uint64_t sub_22E9B26E4(uint64_t a1, const void *a2, size_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _BYTE v19[64];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _QWORD v26[3];
  __int16 v27;
  char v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD **)a1;
  v5 = **(_QWORD ***)a1;
  v6 = sub_22E3CB704(*(llvm::StringMapImpl **)(v5[11] + 15192), a2, a3);
  v7 = *((_DWORD *)v4 + 4);
  v16 = 0;
  v17 = v19;
  v18 = 0x800000000;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = v5;
  v24 = v6;
  v25 = v7;
  sub_22EFC6D6C((uint64_t)v26, v6);
  v26[1] = 0;
  v26[2] = 0;
  v27 = 0;
  v28 = 1;
  v29 = 1;
  sub_22EC56024((uint64_t)&v16);
  LOBYTE(v29) = 0;
  v8 = **(_QWORD **)(a1 + 8);
  if (v8)
    v9 = v8 + 64;
  else
    v9 = 0;
  v10 = 0;
  if (sub_22EC611AC(*v4, &v16, v9, 0))
  {
    if ((_DWORD)v16 == 2)
    {
      v11 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFFCLL;
      v12 = *(_DWORD *)(v11 + 28);
      if ((v12 & 0x7Fu) <= 0x2F && ((1 << (v12 & 0x7F)) & 0xC00000060000) != 0)
      {
        v11 = sub_22EFBAEA4(v11);
        v12 = *(_DWORD *)(v11 + 28);
      }
      if ((v12 & 0x7Eu) - 52 >= 6)
        v10 = 0;
      else
        v10 = v11;
    }
    else
    {
      v10 = 0;
    }
    sub_22EB4E494(*v4, *((unsigned int *)v4 + 4), v10, 1);
  }
  if ((_BYTE)v29)
  {
    if ((_DWORD)v16 == 5)
    {
      sub_22EC64D18(v23, (uint64_t)&v16);
    }
    else if (v21 && (*(_DWORD *)(v23[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v23, (uint64_t)&v16);
    }
  }
  if (v20)
  {
    v15 = sub_22EC6CBD0(v20);
    MEMORY[0x2348A0E9C](v15, 0x10E0C409F09D3C3);
  }
  if (v17 != v19)
    free(v17);
  return v10;
}

uint64_t sub_22E9B28C8(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (**v10)();
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  _QWORD *v14;
  void (**v15)(_QWORD *, uint64_t);
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v6 = sub_22EC6602C(*a1, a2);
  v7 = (v6 >> 1) & 3;
  if (!v7)
  {
    v8 = (uint64_t)(a1 + 6);
    v11 = v6 & 0xFFFFFFFFFFFFFFF8;
    if ((v6 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
      v9 = operator new(0x20uLL);
      v10 = &off_24FAB7468;
      goto LABEL_10;
    }
    v9 = operator new(0x28uLL);
    v12 = &off_24FAB7420;
LABEL_8:
    *v9 = v12;
    v9[1] = a1;
    v9[2] = v11;
    v9[3] = a2;
    *((_DWORD *)v9 + 8) = a3;
    goto LABEL_11;
  }
  if (v7 != 1)
  {
    v11 = v6 & 0xFFFFFFFFFFFFFFF8;
    if ((*(_BYTE *)((v6 & 0xFFFFFFFFFFFFFFF8) + 29) & 0x60) == 0)
      return 1;
    v8 = (uint64_t)(a1 + 6);
    v9 = operator new(0x28uLL);
    v12 = &off_24FAB73D8;
    goto LABEL_8;
  }
  v8 = (uint64_t)(a1 + 6);
  v9 = operator new(0x20uLL);
  v10 = &off_24FAB74B0;
LABEL_10:
  *v9 = v10;
  v9[1] = a1;
  v9[2] = a2;
  *((_DWORD *)v9 + 6) = a3;
LABEL_11:
  v18 = v9;
  sub_22E9B2A3C(v8, (unint64_t)v17);
  v14 = v18;
  if (v18 == v17)
  {
    v15 = (void (**)(_QWORD *, uint64_t))(v17[0] + 32);
    v14 = v17;
    goto LABEL_15;
  }
  if (v18)
  {
    v15 = (void (**)(_QWORD *, uint64_t))(*v18 + 40);
LABEL_15:
    (*v15)(v14, v13);
  }
  return 0;
}

void sub_22E9B2A3C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v9 = v5 + 32 * v4;
    if (v5 <= a2 && v9 > a2)
    {
      v11 = a2 - v5;
      sub_22F3125EC(a1);
      v5 = *(_QWORD *)a1;
      v2 = *(_QWORD *)a1 + v11;
    }
    else
    {
      sub_22F3125EC(a1);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(unsigned int *)(a1 + 8);
  v7 = v5 + 32 * v6;
  v8 = *(_QWORD *)(v2 + 24);
  if (v8)
  {
    if (v8 == v2)
    {
      *(_QWORD *)(v7 + 24) = v7;
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 24) + 24))(*(_QWORD *)(v2 + 24));
      LODWORD(v6) = *(_DWORD *)(a1 + 8);
    }
    else
    {
      *(_QWORD *)(v7 + 24) = v8;
      *(_QWORD *)(v2 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 24) = 0;
  }
  *(_DWORD *)(a1 + 8) = v6 + 1;
}

uint64_t sub_22E9B2AF4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = *(_QWORD *)result;
    v6 = 32 * v2;
    do
    {
      v7 = *(_QWORD *)(v5 + 24);
      if (v7)
      {
        if (v5 == v7)
        {
          *(_QWORD *)(a2 + 24) = a2;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 24) + 24))(*(_QWORD *)(v5 + 24), a2);
        }
        else
        {
          *(_QWORD *)(a2 + 24) = v7;
          *(_QWORD *)(v5 + 24) = 0;
        }
      }
      else
      {
        *(_QWORD *)(a2 + 24) = 0;
      }
      v5 += 32;
      a2 += 32;
      v6 -= 32;
    }
    while (v6);
    v8 = *(unsigned int *)(v4 + 8);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)v4;
      for (i = 32 * v8; i; i -= 32)
      {
        result = *(_QWORD *)(v9 + i - 8);
        if (v9 + i - 32 == result)
        {
          result = v9 + i - 32;
          v11 = 4;
        }
        else
        {
          if (!result)
            continue;
          v11 = 5;
        }
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v11))();
      }
    }
  }
  return result;
}

void sub_22E9B2BC8()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22E9B2BDC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24FAB73D8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_22E9B2C1C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FAB73D8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unsigned int *sub_22E9B2C44(uint64_t a1)
{
  uint64_t v2;
  _BOOL4 v4;
  unsigned int v5[24];

  sub_22E8FCA40(**(_QWORD ***)(a1 + 8), *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24), 0x16B1u, 0, (uint64_t)v5);
  v2 = sub_22E890024((uint64_t)v5, (uint64_t *)(a1 + 24));
  v4 = *(_DWORD *)(a1 + 32) == 5;
  sub_22E89519C(v2, (unsigned int *)&v4);
  return sub_22E903BEC(v5);
}

void sub_22E9B2CB4()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22E9B2CC8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24FAB7420;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_22E9B2D08(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FAB7420;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_22E9B2D30(uint64_t a1)
{
  _QWORD **v2;
  uint64_t v3;
  _BOOL4 v4;
  unsigned int v5[24];

  v2 = *(_QWORD ***)(a1 + 8);
  sub_22E8FCA40(*v2, *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24), 0x16B0u, 0, (uint64_t)v5);
  v3 = sub_22E890024((uint64_t)v5, (uint64_t *)(a1 + 24));
  v4 = *(_DWORD *)(a1 + 32) == 5;
  sub_22E89519C(v3, (unsigned int *)&v4);
  sub_22E903BEC(v5);
  sub_22EB17D68(*v2, *(_QWORD *)(a1 + 16));
}

void sub_22E9B2DAC()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22E9B2DC0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24FAB7468;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_22E9B2E00(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FAB7468;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unsigned int *sub_22E9B2E28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL4 v4;
  unsigned int v5[24];

  v1 = a1 + 16;
  sub_22E8FCA40(**(_QWORD ***)(a1 + 8), *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24), 0x16AFu, 0, (uint64_t)v5);
  v2 = sub_22E890024((uint64_t)v5, (uint64_t *)v1);
  v4 = *(_DWORD *)(v1 + 8) == 5;
  sub_22E89519C(v2, (unsigned int *)&v4);
  return sub_22E903BEC(v5);
}

void sub_22E9B2E9C()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22E9B2EB0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24FAB74B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_22E9B2EF0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FAB74B0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unsigned int *sub_22E9B2F18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL4 v4;
  unsigned int v5[24];

  v1 = a1 + 16;
  sub_22E8FCA40(**(_QWORD ***)(a1 + 8), *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24), 0x16AEu, 0, (uint64_t)v5);
  v2 = sub_22E890024((uint64_t)v5, (uint64_t *)v1);
  v4 = *(_DWORD *)(v1 + 8) == 5;
  sub_22E89519C(v2, (unsigned int *)&v4);
  return sub_22E903BEC(v5);
}

_QWORD *sub_22E9B2F88(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](32 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E9B3048(a1, (uint64_t)v4, (uint64_t)v4 + 32 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E9B3048(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 32 * v6;
    do
    {
      *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22E54D320(v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      v9[1] = 0;
      v9[2] = 0;
      v9[3] = 0;
      *(_OWORD *)(v9 + 1) = *(_OWORD *)(a2 + 8);
      v9[3] = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 32;
  }
  return result;
}

void sub_22E9B3108(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X3>, int a4@<W4>, int a5@<W5>, int a6@<W6>, int a7@<W7>, uint64_t a8@<X8>)
{
  sub_22E9650DC(a8, *(_QWORD *)a1, **(_DWORD **)(a1 + 8) + a2, a3, a4, a5, a6, a7);
}

unint64_t sub_22E9B3120(uint64_t a1, int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const char **v10;
  unsigned int v11;
  char *v12;
  size_t v13;
  size_t v14;
  uint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unint64_t result;
  uint64_t *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unint64_t v36;
  int v37;
  unsigned int *v38;

  v7 = *(_QWORD *)(a1 + 24);
  **(_DWORD **)a1 = 6595;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = **(unsigned int **)(v8 + 8);
  if (v9 > 0x7E7)
  {
    v31 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)v8 + 88) + 15208);
    v32 = v31[1];
    if (v32 + 2024 <= v9)
    {
      v33 = v9 - v32 - 2024;
      v34 = v31[2];
    }
    else
    {
      v33 = v9 - 2024;
      v34 = *v31;
    }
    v10 = (const char **)(v34 + 48 * v33);
  }
  else
  {
    v10 = (const char **)&(&off_24FAC8C40)[6 * v9];
  }
  v11 = **(_DWORD **)(a1 + 8) + a2;
  v12 = (char *)*v10;
  if (*v10)
  {
    v13 = strlen(*v10);
    v14 = v13;
    if (!**(_BYTE **)(v8 + 16))
    {
      if (v13 >= 0xA && *(_QWORD *)v12 == 0x69746C6975625F5FLL && *((_WORD *)v12 + 4) == 24430)
      {
        v12 += 10;
        v14 = v13 - 10;
      }
      goto LABEL_21;
    }
  }
  else
  {
    if (!**(_BYTE **)(v8 + 16))
    {
      v12 = 0;
      v14 = 0;
      goto LABEL_21;
    }
    v14 = 0;
  }
  v17 = 12;
  if (v14 < 0xC)
    v17 = v14;
  v12 += v17;
  v18 = v14 - v17;
  if (v18 >= v18 - 4)
    v14 = v18 - 4;
  else
    v14 = v18;
LABEL_21:
  v19 = **(unsigned int ***)(a1 + 32);
  sub_22F0D5A50(*(_QWORD *)((char *)&v19[2 * (((unint64_t)*v19 >> 18) & 1) + 2 + 2 * v11]
                          + ((unint64_t)*v19 >> 24)));
  v21 = v20;
  v22 = *(_QWORD *)(v7 + 88) + 2128;
  v35 = 0;
  v36 = v22;
  v37 = 6595;
  sub_22E3B89A8(&v35, v12, v14);
  v23 = v35;
  if (!v35)
  {
    v23 = (unsigned __int8 *)sub_22E3B8AAC(v36);
    v35 = v23;
  }
  v23[*v23 + 1] = 3;
  v24 = v35;
  v25 = *v35;
  *v35 = v25 + 1;
  *(_QWORD *)&v24[8 * v25 + 16] = v11 + 1;
  v24[(v25 + 1) + 1] = 3;
  v26 = v35;
  v27 = *v35;
  *v35 = v27 + 1;
  *(_QWORD *)&v26[8 * v27 + 16] = a3;
  v26[(v27 + 1) + 1] = 3;
  v28 = v35;
  v29 = *v35;
  *v35 = v29 + 1;
  *(_QWORD *)&v28[8 * v29 + 16] = a4;
  v38 = v19;
  result = sub_22EB52944(v7, v21, &v38, 1uLL, (uint64_t *)&v35);
  if (v35)
  {
    result = v36;
    if (v36)
      return sub_22E3BB10C(v36, (unint64_t)v35);
  }
  return result;
}

uint64_t sub_22E9B3384(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  BOOL v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  BOOL v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  BOOL v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 2);
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v41 = *(_DWORD *)(a2 - 12);
        v40 = a2 - 12;
        if (v41 < *(_DWORD *)v8)
        {
          v110 = *(_DWORD *)(v8 + 8);
          v104 = *(_QWORD *)v8;
          v42 = *(_QWORD *)v40;
          *(_DWORD *)(v8 + 8) = *(_DWORD *)(v40 + 8);
          *(_QWORD *)v8 = v42;
          *(_DWORD *)(v40 + 8) = v110;
          *(_QWORD *)v40 = v104;
        }
        return result;
      case 3:
        return (uint64_t)sub_22E4642B8((uint64_t *)v8, (unsigned int *)(v8 + 12), (unsigned int *)(a2 - 12));
      case 4:
        return (uint64_t)sub_22E464618(v8, (unsigned int *)(v8 + 12), (unsigned int *)(v8 + 24), a2 - 12);
      case 5:
        v43 = (uint64_t *)(v8 + 12);
        v44 = (uint64_t *)(v8 + 24);
        v45 = (uint64_t *)(v8 + 36);
        result = (uint64_t)sub_22E464618(v8, (unsigned int *)(v8 + 12), (unsigned int *)(v8 + 24), v8 + 36);
        v47 = *(_DWORD *)(a2 - 12);
        v46 = a2 - 12;
        if (v47 < *(_DWORD *)(v8 + 36))
        {
          v48 = *v45;
          v49 = *(_DWORD *)(v8 + 44);
          v50 = *(_DWORD *)(v46 + 8);
          *v45 = *(_QWORD *)v46;
          *(_DWORD *)(v8 + 44) = v50;
          *(_DWORD *)(v46 + 8) = v49;
          *(_QWORD *)v46 = v48;
          if (*(_DWORD *)v45 < *(_DWORD *)v44)
          {
            v51 = *(_DWORD *)(v8 + 32);
            v52 = *v44;
            *v44 = *v45;
            *(_DWORD *)(v8 + 32) = *(_DWORD *)(v8 + 44);
            *v45 = v52;
            *(_DWORD *)(v8 + 44) = v51;
            if (*(_DWORD *)v44 < *(_DWORD *)v43)
            {
              v53 = *(_DWORD *)(v8 + 20);
              v54 = *v43;
              *v43 = *v44;
              *(_DWORD *)(v8 + 20) = *(_DWORD *)(v8 + 32);
              *v44 = v54;
              *(_DWORD *)(v8 + 32) = v53;
              if (*(_DWORD *)(v8 + 12) < *(_DWORD *)v8)
              {
                v111 = *(_DWORD *)(v8 + 8);
                v105 = *(_QWORD *)v8;
                *(_QWORD *)v8 = *v43;
                *(_DWORD *)(v8 + 8) = *(_DWORD *)(v8 + 20);
                *v43 = v105;
                *(_DWORD *)(v8 + 20) = v111;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 287)
        {
          v55 = v8 + 12;
          v57 = v8 == a2 || v55 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v57)
            {
              v58 = 0;
              v59 = v8;
              do
              {
                v60 = v55;
                v61 = *(_DWORD *)(v59 + 12);
                if (v61 < *(_DWORD *)v59)
                {
                  v62 = *(_QWORD *)(v59 + 16);
                  v63 = v58;
                  while (1)
                  {
                    v64 = v8 + v63;
                    *(_QWORD *)(v64 + 12) = *(_QWORD *)(v8 + v63);
                    *(_DWORD *)(v64 + 20) = *(_DWORD *)(v8 + v63 + 8);
                    if (!v63)
                      break;
                    v63 -= 12;
                    if (v61 >= *(_DWORD *)(v64 - 12))
                    {
                      v65 = v8 + v63 + 12;
                      goto LABEL_77;
                    }
                  }
                  v65 = v8;
LABEL_77:
                  *(_DWORD *)v65 = v61;
                  *(_QWORD *)(v65 + 4) = v62;
                }
                v55 = v60 + 12;
                v58 += 12;
                v59 = v60;
              }
              while (v60 + 12 != a2);
            }
          }
          else if (!v57)
          {
            do
            {
              v95 = v55;
              v96 = *(_DWORD *)(v7 + 12);
              if (v96 < *(_DWORD *)v7)
              {
                v97 = *(_QWORD *)(v7 + 16);
                v98 = v95;
                do
                {
                  v99 = v98;
                  v100 = *(_QWORD *)(v98 - 12);
                  v98 -= 12;
                  *(_QWORD *)v99 = v100;
                  *(_DWORD *)(v99 + 8) = *(_DWORD *)(v99 - 4);
                }
                while (v96 < *(_DWORD *)(v99 - 24));
                *(_DWORD *)v98 = v96;
                *(_QWORD *)(v98 + 4) = v97;
              }
              v55 = v95 + 12;
              v7 = v95;
            }
            while (v95 + 12 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v66 = (unint64_t)(v10 - 2) >> 1;
            v67 = v66;
            do
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = (unsigned int *)(v8 + 12 * v69);
                if (2 * v68 + 2 >= v10)
                {
                  v71 = *v70;
                }
                else
                {
                  v71 = v70[3];
                  v72 = *v70 >= v71;
                  if (*v70 > v71)
                    v71 = *v70;
                  if (!v72)
                  {
                    v70 += 3;
                    v69 = 2 * v68 + 2;
                  }
                }
                v73 = (unsigned int *)(v8 + 12 * v68);
                v74 = *v73;
                if (v71 >= *v73)
                {
                  v75 = *(_QWORD *)(v73 + 1);
                  do
                  {
                    v76 = v73;
                    v73 = v70;
                    v77 = *(_QWORD *)v70;
                    result = v73[2];
                    v76[2] = result;
                    *(_QWORD *)v76 = v77;
                    if (v66 < v69)
                      break;
                    v78 = (2 * v69) | 1;
                    v70 = (unsigned int *)(v8 + 12 * v78);
                    v69 = 2 * v69 + 2;
                    if (v69 >= v10)
                    {
                      result = *v70;
                      v69 = v78;
                    }
                    else
                    {
                      LODWORD(result) = *v70;
                      v79 = v70[3];
                      result = *v70 <= v79 ? v79 : result;
                      if (*v70 >= v79)
                        v69 = v78;
                      else
                        v70 += 3;
                    }
                  }
                  while (result >= v74);
                  *v73 = v74;
                  *(_QWORD *)(v73 + 1) = v75;
                }
              }
              v67 = v68 - 1;
            }
            while (v68);
            do
            {
              v80 = 0;
              v112 = *(_DWORD *)(v8 + 8);
              v106 = *(_QWORD *)v8;
              v81 = v8;
              do
              {
                v82 = v81 + 12 * v80 + 12;
                v83 = (2 * v80) | 1;
                v84 = 2 * v80 + 2;
                if (v84 < v10)
                {
                  result = *(unsigned int *)(v82 + 12);
                  if (*(_DWORD *)v82 < result)
                  {
                    v82 += 12;
                    v83 = v84;
                  }
                }
                v85 = *(_QWORD *)v82;
                *(_DWORD *)(v81 + 8) = *(_DWORD *)(v82 + 8);
                *(_QWORD *)v81 = v85;
                v81 = v82;
                v80 = v83;
              }
              while (v83 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              a2 -= 12;
              if (v82 == a2)
              {
                *(_DWORD *)(v82 + 8) = v112;
                *(_QWORD *)v82 = v106;
              }
              else
              {
                v86 = *(_QWORD *)a2;
                *(_DWORD *)(v82 + 8) = *(_DWORD *)(a2 + 8);
                *(_QWORD *)v82 = v86;
                *(_DWORD *)(a2 + 8) = v112;
                *(_QWORD *)a2 = v106;
                v87 = v82 - v8 + 12;
                if (v87 >= 13)
                {
                  v88 = (v87 / 0xCuLL - 2) >> 1;
                  v89 = (uint64_t *)(v8 + 12 * v88);
                  v90 = *(_DWORD *)v82;
                  if (*(_DWORD *)v89 < *(_DWORD *)v82)
                  {
                    v91 = *(_QWORD *)(v82 + 4);
                    do
                    {
                      v92 = v82;
                      v82 = (uint64_t)v89;
                      v93 = *v89;
                      *(_DWORD *)(v92 + 8) = *(_DWORD *)(v82 + 8);
                      *(_QWORD *)v92 = v93;
                      if (!v88)
                        break;
                      v88 = (v88 - 1) >> 1;
                      v89 = (uint64_t *)(v8 + 12 * v88);
                    }
                    while (*(_DWORD *)v89 < v90);
                    *(_DWORD *)v82 = v90;
                    *(_QWORD *)(v82 + 4) = v91;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (unsigned int *)(v8 + 12 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 < 0x601)
        {
          result = (uint64_t)sub_22E4642B8((uint64_t *)(v7 + 12 * v11), (unsigned int *)v7, (unsigned int *)(a2 - 12));
        }
        else
        {
          sub_22E4642B8((uint64_t *)v7, (unsigned int *)(v7 + 12 * v11), (unsigned int *)(a2 - 12));
          v13 = 3 * v11;
          v14 = (unsigned int *)(v7 + 12 * v11 - 12);
          sub_22E4642B8((uint64_t *)(v7 + 12), v14, (unsigned int *)(a2 - 24));
          v15 = (unsigned int *)(v7 + 12 + 4 * v13);
          sub_22E4642B8((uint64_t *)(v7 + 24), v15, (unsigned int *)(a2 - 36));
          result = (uint64_t)sub_22E4642B8((uint64_t *)v14, v12, v15);
          v107 = *(_DWORD *)(v7 + 8);
          v101 = *(_QWORD *)v7;
          v16 = v12[2];
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_DWORD *)(v7 + 8) = v16;
          v12[2] = v107;
          *(_QWORD *)v12 = v101;
        }
        --a3;
        v17 = *(_DWORD *)v7;
        if ((a4 & 1) == 0 && *(_DWORD *)(v7 - 12) >= v17)
        {
          if (v17 >= *(_DWORD *)(a2 - 12))
          {
            v32 = v7 + 12;
            do
            {
              v8 = v32;
              if (v32 >= a2)
                break;
              v32 += 12;
            }
            while (v17 >= *(_DWORD *)v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v31 = *(_DWORD *)(v8 + 12);
              v8 += 12;
            }
            while (v17 >= v31);
          }
          v33 = a2;
          if (v8 < a2)
          {
            v33 = a2;
            do
            {
              v34 = *(_DWORD *)(v33 - 12);
              v33 -= 12;
            }
            while (v17 < v34);
          }
          v35 = *(_QWORD *)(v7 + 4);
          while (v8 < v33)
          {
            v109 = *(_DWORD *)(v8 + 8);
            v103 = *(_QWORD *)v8;
            v36 = *(_QWORD *)v33;
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(v33 + 8);
            *(_QWORD *)v8 = v36;
            *(_DWORD *)(v33 + 8) = v109;
            *(_QWORD *)v33 = v103;
            do
            {
              v37 = *(_DWORD *)(v8 + 12);
              v8 += 12;
            }
            while (v17 >= v37);
            do
            {
              v38 = *(_DWORD *)(v33 - 12);
              v33 -= 12;
            }
            while (v17 < v38);
          }
          if (v8 - 12 != v7)
          {
            v39 = *(_QWORD *)(v8 - 12);
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 4);
            *(_QWORD *)v7 = v39;
          }
          a4 = 0;
          *(_DWORD *)(v8 - 12) = v17;
          *(_QWORD *)(v8 - 8) = v35;
          continue;
        }
        v18 = 0;
        v19 = *(_QWORD *)(v7 + 4);
        do
        {
          v20 = *(_DWORD *)(v7 + v18 + 12);
          v18 += 12;
        }
        while (v20 < v17);
        v21 = v7 + v18;
        v22 = a2;
        if (v18 == 12)
        {
          v22 = a2;
          do
          {
            if (v21 >= v22)
              break;
            v24 = *(_DWORD *)(v22 - 12);
            v22 -= 12;
          }
          while (v24 >= v17);
        }
        else
        {
          do
          {
            v23 = *(_DWORD *)(v22 - 12);
            v22 -= 12;
          }
          while (v23 >= v17);
        }
        v8 = v7 + v18;
        if (v21 < v22)
        {
          v25 = v22;
          do
          {
            v108 = *(_DWORD *)(v8 + 8);
            v102 = *(_QWORD *)v8;
            v26 = *(_QWORD *)v25;
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(v25 + 8);
            *(_QWORD *)v8 = v26;
            *(_DWORD *)(v25 + 8) = v108;
            *(_QWORD *)v25 = v102;
            do
            {
              v27 = *(_DWORD *)(v8 + 12);
              v8 += 12;
            }
            while (v27 < v17);
            do
            {
              v28 = *(_DWORD *)(v25 - 12);
              v25 -= 12;
            }
            while (v28 >= v17);
          }
          while (v8 < v25);
        }
        if (v8 - 12 != v7)
        {
          v29 = *(_QWORD *)(v8 - 12);
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 4);
          *(_QWORD *)v7 = v29;
        }
        *(_DWORD *)(v8 - 12) = v17;
        *(_QWORD *)(v8 - 8) = v19;
        if (v21 < v22)
        {
LABEL_30:
          result = sub_22E9B3384(v7, v8 - 12, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v30 = sub_22E9B3BCC(v7, v8 - 12);
        result = sub_22E9B3BCC(v8, a2);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_30;
        }
        a2 = v8 - 12;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_22E9B3BCC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (uint64_t *)(a2 - 12);
      if (*(_DWORD *)(a2 - 12) < *(_DWORD *)a1)
      {
        v7 = *(_DWORD *)(a1 + 8);
        v8 = *(_QWORD *)a1;
        v9 = *(_DWORD *)(a2 - 4);
        *(_QWORD *)a1 = *v6;
        *(_DWORD *)(a1 + 8) = v9;
        *v6 = v8;
        *(_DWORD *)(a2 - 4) = v7;
      }
      return result;
    case 3uLL:
      sub_22E4642B8((uint64_t *)a1, (unsigned int *)(a1 + 12), (unsigned int *)(a2 - 12));
      return 1;
    case 4uLL:
      sub_22E464618(a1, (unsigned int *)(a1 + 12), (unsigned int *)(a1 + 24), a2 - 12);
      return 1;
    case 5uLL:
      v19 = (uint64_t *)(a1 + 12);
      v20 = (uint64_t *)(a1 + 24);
      v21 = (uint64_t *)(a1 + 36);
      sub_22E464618(a1, (unsigned int *)(a1 + 12), (unsigned int *)(a1 + 24), a1 + 36);
      v23 = *(_DWORD *)(a2 - 12);
      v22 = a2 - 12;
      if (v23 < *(_DWORD *)(a1 + 36))
      {
        v24 = *(_DWORD *)(a1 + 44);
        v25 = *v21;
        v26 = *(_DWORD *)(v22 + 8);
        *v21 = *(_QWORD *)v22;
        *(_DWORD *)(a1 + 44) = v26;
        *(_QWORD *)v22 = v25;
        *(_DWORD *)(v22 + 8) = v24;
        if (*(_DWORD *)v21 < *(_DWORD *)v20)
        {
          v27 = *(_DWORD *)(a1 + 32);
          v28 = *v20;
          *v20 = *v21;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 44);
          *v21 = v28;
          *(_DWORD *)(a1 + 44) = v27;
          if (*(_DWORD *)v20 < *(_DWORD *)v19)
          {
            v29 = *(_DWORD *)(a1 + 20);
            v30 = *v19;
            *v19 = *v20;
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
            *v20 = v30;
            *(_DWORD *)(a1 + 32) = v29;
            if (*(_DWORD *)(a1 + 12) < *(_DWORD *)a1)
            {
              v31 = *(_DWORD *)(a1 + 8);
              v32 = *(_QWORD *)a1;
              *(_QWORD *)a1 = *v19;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
              *v19 = v32;
              *(_DWORD *)(a1 + 20) = v31;
            }
          }
        }
      }
      return 1;
    default:
      v10 = (_DWORD *)(a1 + 24);
      sub_22E4642B8((uint64_t *)a1, (unsigned int *)(a1 + 12), (unsigned int *)(a1 + 24));
      v11 = a1 + 36;
      if (a1 + 36 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(_DWORD *)v11;
    if (*(_DWORD *)v11 < *v10)
    {
      v15 = *(_QWORD *)(v11 + 4);
      v16 = v12;
      while (1)
      {
        v17 = a1 + v16;
        *(_QWORD *)(v17 + 36) = *(_QWORD *)(a1 + v16 + 24);
        *(_DWORD *)(v17 + 44) = *(_DWORD *)(a1 + v16 + 32);
        if (v16 == -24)
          break;
        v16 -= 12;
        if (v14 >= *(_DWORD *)(v17 + 12))
        {
          v18 = a1 + v16 + 36;
          goto LABEL_13;
        }
      }
      v18 = a1;
LABEL_13:
      *(_DWORD *)v18 = v14;
      *(_QWORD *)(v18 + 4) = v15;
      if (++v13 == 8)
        return v11 + 12 == a2;
    }
    v10 = (_DWORD *)v11;
    v12 += 12;
    v11 += 12;
    if (v11 == a2)
      return 1;
  }
}

unsigned __int8 **sub_22E9B3E3C(unsigned __int8 **a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;

  v3 = *a2;
  v4 = *a1;
  if (!v4)
  {
    v4 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)a1[1]);
    *a1 = v4;
  }
  v4[*v4 + 1] = 3;
  v5 = *a1;
  v6 = **a1;
  *v5 = v6 + 1;
  *(_QWORD *)&v5[8 * v6 + 16] = v3;
  return a1;
}

void sub_22E9B3E9C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    llvm::deallocate_buffer(*(llvm **)a2, (void *)(32 * *(unsigned int *)(a2 + 16)));
    JUMPOUT(0x2348A0E9CLL);
  }
}

_OWORD *sub_22E9B3EE8(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_OWORD *)MEMORY[0x23489D23C](32 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F312778(a1, (uint64_t)v4, (uint64_t)v4 + 32 * v3);
    return (_OWORD *)llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = xmmword_22F4658D0;
        result += 2;
        v11 -= 32;
      }
      while (v11);
    }
  }
  return result;
}

BOOL sub_22E9B3FAC(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;

  if (a1 >= a2)
  {
    if (a2 == a1)
    {
      a2 = a1;
    }
    else
    {
      v8 = a2;
      while (1)
      {
        v9 = *(unsigned __int16 *)(*(_QWORD *)v8 + 32) - 378;
        v4 = v9 > 0x37;
        v10 = (1 << v9) & 0x80000040000001;
        if (!v4 && v10 != 0)
          break;
        v8 += 8;
        a2 = a1;
        if (v8 == a1)
          return a2 == a1;
      }
      a2 = a1;
      a1 = v8;
    }
  }
  else
  {
    v2 = a1;
    while (1)
    {
      v3 = *(unsigned __int16 *)(*(_QWORD *)v2 + 32) - 378;
      v4 = v3 > 0x37;
      v5 = (1 << v3) & 0x80000040000001;
      if (!v4 && v5 != 0)
        break;
      v2 += 8;
      a1 = a2;
      if (v2 == a2)
        return a2 == a1;
    }
    a1 = a2;
    a2 = v2;
  }
  return a2 == a1;
}

BOOL sub_22E9B4074(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(**(_QWORD **)(a2 + 16) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v2 + 8) & 0xF) != 0)
    v2 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(a2 + 16));
  v3 = sub_22F10C2A4(*(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0));
  if ((*(_DWORD *)(v3 + 28) & 0x7Fu) - 35 >= 3)
    v4 = 0;
  else
    v4 = v3;
  v5 = *(_QWORD *)(v4 + 40);
  if ((v5 & 7) != 0)
    return 0;
  v7 = v5 & 0xFFFFFFFFFFFFFFF8;
  if (!v7)
    return 0;
  v8 = *(_QWORD *)(v7 + 16);
  if (*(_DWORD *)v8 != 15)
    return 0;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(_QWORD *)(v8 + 23);
  return v9 == 0x6C436174654D534FLL && v10 == 0x657361427373616CLL;
}

uint64_t sub_22E9B4128(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  BOOL v8;

  if (*(_BYTE *)result)
  {
    v4 = result;
    v5 = *(_QWORD *)(a2 + 216);
    v6 = *(_WORD *)(v5 + 8);
    if ((v6 & 0x7F) != 1)
    {
      if ((v6 & 0x7Eu) - 58 >= 0xFFFFFFFA)
      {
        *(_QWORD *)(result + 16) = 0;
        result = *(_QWORD *)(*(_QWORD *)(v5 - 24) & 0xFFFFFFFFFFFFFFF0);
        if (result)
          v8 = *(unsigned __int8 *)(result + 16) - 27 > 0xFFFFFFFD;
        else
          v8 = 0;
        if (!v8)
          result = sub_22F10CF48(result);
        v7 = *(_QWORD *)(result + 24);
        goto LABEL_13;
      }
      if ((v6 & 0x7F) != 0x18)
        return result;
      v7 = *(_QWORD *)(v5 + 32);
LABEL_6:
      *(_QWORD *)(v4 + 16) = 0;
LABEL_13:
      *(_QWORD *)(v4 + 8) = v7;
      *(_DWORD *)(v4 + 4) = a3;
      return result;
    }
    result = sub_22F30914C(a2);
    if (result)
    {
      v7 = *(_QWORD *)(result + 1416);
      goto LABEL_6;
    }
  }
  return result;
}

unint64_t sub_22E9B41D0(unint64_t result, uint64_t *a2)
{
  BOOL v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  BOOL v9;

  if (*((_DWORD *)a2 + 2))
    v2 = result >= 0x10;
  else
    v2 = 0;
  if (v2)
  {
    v4 = 0;
    while (1)
    {
      v5 = *a2;
      if ((*(_DWORD *)(*a2 + 40 * v4) - 1) > 1)
        break;
      v6 = *(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
        return 0;
      if ((*(_DWORD *)(v6 + 16) & 0xFEu) - 6 <= 0xFFFFFFFB)
        v6 = sub_22F10CF48(v6);
      v7 = (unint64_t *)(v6 + 32);
LABEL_28:
      result = *v7;
      if (++v4 >= (unint64_t)*((unsigned int *)a2 + 2) || result <= 0xF)
        return result;
    }
    result = sub_22E9C55B0(result);
    if (!result)
      return result;
    if ((*(_BYTE *)(result + 74) & 1) == 0)
      return 0;
    result = sub_22EFCE144(result + 64, *(_QWORD *)(v5 + 40 * v4 + 8));
    if (result)
    {
      while (1)
      {
        v8 = result & 0xFFFFFFFFFFFFFFF8;
        if ((result & 4) == 0 || !v8)
          break;
        if (*(_QWORD *)v8)
          v9 = (*(_DWORD *)(*(_QWORD *)v8 + 28) & 0x7Fu) - 52 >= 0xFFFFFFFD;
        else
          v9 = 0;
        if (v9)
        {
          v8 = *(_QWORD *)v8;
LABEL_27:
          v7 = (unint64_t *)(v8 + 48);
          goto LABEL_28;
        }
        result = *(_QWORD *)(v8 + 8);
        if (!result)
          return result;
      }
      result = 0;
      if (v8 && (*(_DWORD *)(v8 + 28) & 0x7Fu) - 52 >= 0xFFFFFFFD)
        goto LABEL_27;
    }
  }
  return result;
}

uint64_t sub_22E9B4314(uint64_t result, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v7;

  if (*(_BYTE *)result)
  {
    v7 = result;
    *(_QWORD *)(result + 16) = 0;
    if (a4)
    {
      v5 = *(_QWORD *)(a4 + 8);
      result = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
      {
        switch(a5)
        {
          case 27:
          case 29:
          case 55:
          case 56:
          case 57:
          case 59:
            goto LABEL_7;
          case 28:
          case 58:
          case 75:
            goto LABEL_14;
          case 30:
          case 31:
          case 35:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 48:
          case 50:
          case 51:
          case 53:
          case 63:
          case 64:
            break;
          case 32:
          case 34:
          case 38:
            result = sub_22F36891C(*(_QWORD *)(a2 + 88));
            v5 = result;
            break;
          case 47:
          case 49:
          case 52:
          case 54:
            goto LABEL_10;
          default:
            goto LABEL_12;
        }
      }
      else
      {
        switch(a5)
        {
          case 27:
          case 29:
          case 55:
          case 56:
          case 57:
          case 59:
LABEL_7:
            result = sub_22E9D848C(result);
            if (!(_DWORD)result)
              v5 = 0;
            break;
          case 28:
          case 58:
          case 75:
LABEL_14:
            v5 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 16400);
            break;
          case 30:
          case 31:
          case 32:
          case 34:
          case 35:
          case 38:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 48:
          case 50:
          case 51:
          case 53:
          case 63:
          case 64:
            break;
          case 47:
          case 49:
          case 52:
          case 54:
LABEL_10:
            result = sub_22E9D848C(result);
            if (!(_DWORD)result)
              goto LABEL_12;
            v5 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 16480);
            break;
          default:
            goto LABEL_12;
        }
      }
    }
    else
    {
LABEL_12:
      v5 = 0;
    }
    *(_QWORD *)(v7 + 8) = v5;
    *(_DWORD *)(v7 + 4) = a3;
  }
  return result;
}

unint64_t sub_22E9B4418(unint64_t result, uint64_t a2, int a3, int a4, int a5)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  if (*(_BYTE *)result)
  {
    v6 = 0;
    *(_QWORD *)(result + 16) = 0;
    v7 = result;
    if (*(_DWORD *)(result + 4) == a5)
    {
      v6 = *(_QWORD *)(result + 8);
      if (v6 < 0x10)
        v6 = 0;
    }
    result = 0;
    v11 = v6;
    switch(a4)
    {
      case 27:
        if (v6 < 0x10)
          goto LABEL_13;
        v8 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
          goto LABEL_13;
        result = sub_22F10ACF8(v8);
        break;
      case 30:
        if (v6 >= 0x10)
        {
          v9 = *(_QWORD *)(a2 + 88);
          v10 = sub_22E4D27F8(&v11);
          result = sub_22EF5B848(v9, v10, 0);
        }
        else
        {
LABEL_13:
          result = 0;
        }
        break;
      case 32:
      case 33:
      case 35:
      case 37:
      case 39:
        result = v6;
        if (v6 <= 0xF)
          result = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 16480);
        break;
      case 40:
        result = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 16400);
        break;
      default:
        break;
    }
    *(_QWORD *)(v7 + 8) = result;
    *(_DWORD *)(v7 + 4) = a3;
  }
  return result;
}

unint64_t sub_22E9B4528(uint64_t a1, uint64_t a2)
{
  int v3;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;

  v3 = *(_DWORD *)(a2 + 28);
  if ((v3 & 0x7Fu) <= 0x2F && ((1 << (v3 & 0x7F)) & 0xC00000060000) != 0)
  {
    a2 = sub_22EFBAEA4(a2);
    v3 = *(_DWORD *)(a2 + 28);
  }
  v5 = v3 & 0x7F;
  if ((v5 - 43) >= 0xFFFFFFF6)
  {
    v9 = *(_QWORD *)(a2 + 48);
    if (v9)
      return v9 & 0xFFFFFFFFFFFFFFF0;
    return sub_22EF6462C(a1, a2);
  }
  else
  {
    if (v5 != 22)
    {
      v6 = *(_DWORD *)(a2 + 28);
      if ((v6 & 0x7Eu) - 58 > 0xFFFFFFF9)
      {
        v7 = a2;
      }
      else if ((v6 & 0x7F) != 0x1D || (v7 = *(_QWORD *)(a2 + 48)) == 0)
      {
        switch(v5)
        {
          case 25:
            v8 = *(_QWORD *)(a2 + 56);
            break;
          case 67:
            v17 = *(_QWORD *)(a2 + 16);
            v18 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8);
            if ((v17 & 4) != 0)
              v18 = (_QWORD *)*v18;
            if (v18)
              v19 = (unint64_t)(v18 - 8);
            else
              v19 = 0;
            v20 = *(_QWORD *)(v19 + 48);
            if (v20)
              v8 = v20 & 0xFFFFFFFFFFFFFFF0;
            else
              v8 = sub_22EF6462C(a1, v19);
            break;
          case 24:
            sub_22F3B5794(a2);
            break;
          default:
            if ((v5 - 75) < 0xFFFFFFE5)
              return 0;
            v8 = *(_QWORD *)(a2 + 48);
            break;
        }
        goto LABEL_20;
      }
      v8 = sub_22E8BBA74(v7);
LABEL_20:
      if (v8 < 0x10)
        return 0;
      while (1)
      {
        while (1)
        {
          v10 = v8;
          v12 = v8 & 0xFFFFFFFFFFFFFFF0;
          v13 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0);
          v14 = *(_DWORD *)(v13 + 16);
          if (v13 && (*(_DWORD *)(v13 + 16) & 0xFE) == 0x28)
          {
            if ((v14 & 0x100000) != 0)
            {
              do
              {
LABEL_26:
                while (1)
                {
                  v13 = *(_QWORD *)(*(_QWORD *)(v13 + 32) & 0xFFFFFFFFFFFFFFF0);
                  if (!v13)
                    break;
                  v15 = *(_DWORD *)(v13 + 16);
                  if ((v15 & 0xFE) != 0x28)
                    break;
                  if ((v15 & 0x100000) == 0)
                    goto LABEL_46;
                }
                v13 = sub_22F10CF48(v13);
              }
              while ((*(_DWORD *)(v13 + 16) & 0x100000) != 0);
            }
            goto LABEL_46;
          }
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
          {
            v13 = sub_22F10CF48(v13);
            if (v13)
            {
              if ((*(_DWORD *)(v13 + 16) & 0x100000) != 0)
                goto LABEL_26;
LABEL_46:
              v16 = (unint64_t *)(v13 + 32);
              goto LABEL_47;
            }
            v13 = *(_QWORD *)v12;
            LOBYTE(v14) = *(_BYTE *)(*(_QWORD *)v12 + 16);
          }
          v14 = v14;
          if (v14 != 39)
            break;
LABEL_40:
          v8 = *(_QWORD *)(v13 + 32);
          if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 16)
             - 25 >= 2)
            return v10;
        }
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
        {
          v13 = sub_22F10CF48(v13);
          if (v13)
            goto LABEL_40;
          v13 = *(_QWORD *)v12;
          v14 = *(unsigned __int8 *)(*(_QWORD *)v12 + 16);
        }
        if (v14 == 10)
          goto LABEL_46;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 10)
        {
          v13 = sub_22F10CF48(v13);
          if (v13)
            goto LABEL_46;
          v13 = *(_QWORD *)v12;
          v14 = *(unsigned __int8 *)(*(_QWORD *)v12 + 16);
        }
        if ((v14 - 27) <= 0xFFFFFFFD)
        {
          if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 > 1)
            return v10;
          v13 = sub_22F10CF48(v13);
          if (!v13)
            return v10;
        }
        v16 = (unint64_t *)(v13 + 24);
LABEL_47:
        v8 = *v16;
      }
    }
    return sub_22F36D148(a1, (uint64_t *)a2, 0);
  }
}

uint64_t sub_22E9B47E8(uint64_t a1, unint64_t a2, _QWORD *a3, uint64_t a4, int a5, uint64_t a6, __int128 *a7)
{
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  const char *v18;
  std::string::size_type v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  std::string::size_type v32;
  std::string::size_type v33;
  _BYTE *v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  std::string::size_type v48;
  uint64_t v49;
  _BYTE *v50;
  unsigned int v51;
  uint64_t v52;
  char v53;
  std::string::size_type v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  std::string::size_type v60;
  std::string::size_type v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  unint64_t v65;
  __int128 *v66;
  unsigned int *v67;
  unsigned int v68;
  _BYTE *v69;
  unsigned int *v70;
  std::string::size_type v71;
  const void *v72;
  unsigned int v73;
  std::string *p_p;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  _BYTE *v95;
  unint64_t v96;
  uint64_t v97;
  std::string *v98;
  std::string::size_type v99;
  char v100;
  std::string *v101;
  std::string::size_type v102;
  std::string *v103;
  std::string::size_type v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  _BYTE *v111;
  _BYTE *v112;
  unint64_t v113;
  std::string::size_type v114;
  uint64_t v115;
  uint64_t v116;
  std::string::size_type size;
  uint64_t v118;
  uint64_t v119;
  std::string::size_type v120;
  unint64_t v121;
  uint64_t v122;
  _QWORD v123[2];
  char v124;
  _BYTE v125[7];
  _DWORD v126[2];
  uint64_t v127;
  std::string v128;
  std::string __p;
  std::string v130;
  int v131;
  __int16 v132;
  std::string v133;
  uint64_t v134;

  v134 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)a1;
  v15 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8);
  if ((v15 & 4) != 0)
    v16 = (_QWORD *)*v16;
  sub_22F2F2968(a4, (uint64_t)v16);
  if (a5)
  {
    v17 = sub_22F312FB0(a3, *(_QWORD *)a1);
    if (v17)
    {
      if ((*(_BYTE *)(v17 + 32) & 2) != 0)
      {
        v18 = *(const char **)(v17 + 24);
        if (!v18)
        {
          v19 = 0;
LABEL_10:
          v20 = *(_QWORD *)a4;
          v132 = 261;
          v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
          v130.__r_.__value_.__l.__size_ = v19;
          *(_QWORD *)(a4 + 40) = sub_22F2F27DC(v20, (const char **)&v130.__r_.__value_.__l.__data_);
          goto LABEL_11;
        }
      }
      else
      {
        v18 = (const char *)sub_22F0C8E74(v17, (uint64_t)a3);
      }
      v19 = strlen(v18);
      goto LABEL_10;
    }
  }
LABEL_11:
  if ((*(_BYTE *)(a1 + 64) & 8) != 0)
  {
    v36 = *(_QWORD *)a4;
    sub_22EFC683C((uint64_t *)(v14 + 40), &__p);
    v132 = 260;
    v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v37 = sub_22F2F27DC(v36, (const char **)&v130.__r_.__value_.__l.__data_);
    sub_22E8A9AD8(a4, (uint64_t)v37);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_22E8A9B38(a4, (uint64_t)"::");
    return sub_22F2F28A4(a4);
  }
  v21 = (uint64_t *)sub_22F255ABC(v14);
  v23 = v22;
  while (1)
  {
    v24 = v21;
    if (v21 >= v23)
    {
      if (v21 == v23)
        break;
      v25 = v23;
      while (*(_WORD *)(*v25 + 32) != 77)
      {
        if (++v25 == v21)
          goto LABEL_32;
      }
      v24 = v21;
    }
    else
    {
      while (*(_WORD *)(*v24 + 32) != 77)
      {
        if (++v24 == v23)
          goto LABEL_32;
      }
      v25 = v23;
    }
    if (v24 == v25)
      break;
    do
    {
      v27 = *v21++;
      v26 = v27;
    }
    while (*(_WORD *)(v27 + 32) != 77);
    v28 = a6;
    v29 = a3;
    v30 = a2;
    v31 = *(_QWORD *)a4;
    v32 = *(_QWORD *)(v26 + 40);
    v33 = *(unsigned int *)(v26 + 36);
    v132 = 261;
    v130.__r_.__value_.__r.__words[0] = v32;
    v130.__r_.__value_.__l.__size_ = v33;
    v34 = sub_22F2F27DC(v31, (const char **)&v130.__r_.__value_.__l.__data_);
    v35 = *(unsigned int *)(a4 + 136);
    if (v35 >= *(unsigned int *)(a4 + 140))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v35 = *(unsigned int *)(a4 + 136);
    }
    *(_QWORD *)(*(_QWORD *)(a4 + 128) + 8 * v35) = v34;
    ++*(_DWORD *)(a4 + 136);
    a2 = v30;
    a3 = v29;
    a6 = v28;
  }
LABEL_32:
  if (v14 && (*(_DWORD *)(v14 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    sub_22E9B56BC((uint64_t)a3, (uint64_t)a7, v14, *(_QWORD *)(a6 + 16), (uint64_t *)a4);
    sub_22E9B5954((uint64_t *)a4, *(_QWORD *)(a1 + 72), (*(unsigned __int8 *)(a1 + 64) >> 2) & 1, a7);
    sub_22E9B5A60((uint64_t *)a7, v14, (uint64_t *)a4);
    sub_22E8A9D90(a4, 7, "");
    sub_22E9B60CC(a2, (uint64_t)a7, v14, (uint64_t *)a4, 0, 0);
    sub_22E8A9D90(a4, 8, "");
    v38 = (uint64_t *)a4;
    v39 = v14;
LABEL_35:
    sub_22E9B642C(v38, v39, (uint64_t)a7);
    return sub_22F2F28A4(a4);
  }
  if (v14)
  {
    if ((*(_DWORD *)(v14 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
    {
      v42 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFFFF0));
      if (v42)
      {
        if ((*(_DWORD *)(v42 + 28) & 0x7Fu) - 35 <= 2)
        {
          v43 = *(_QWORD *)(v42 + 128);
          if (v43)
          {
            if (((*(unsigned __int16 *)(v43 + 8) | (*(unsigned __int8 *)(v43 + 10) << 16)) & 0x100000) != 0)
            {
              v44 = sub_22EFD462C(v42);
              if (v44)
              {
                v45 = v44;
                if (((*(_DWORD *)(v44 + 28) & 0x7F) != 0x1D || (v45 = *(_QWORD *)(v44 + 48)) != 0)
                  && (*(_DWORD *)(v45 + 28) & 0x7Eu) - 52 <= 5)
                {
                  sub_22E9B56BC((uint64_t)a3, (uint64_t)a7, v45, *(_QWORD *)(a6 + 16), (uint64_t *)a4);
                  sub_22E9B5954((uint64_t *)a4, *(_QWORD *)(a1 + 72), (*(unsigned __int8 *)(a1 + 64) >> 2) & 1, a7);
                  sub_22E9B5A60((uint64_t *)a7, v14, (uint64_t *)a4);
                  sub_22E8A9D90(a4, 7, "");
                  sub_22E9B60CC(a2, (uint64_t)a7, v45, (uint64_t *)a4, 0, 0);
                  sub_22E8A9D90(a4, 8, "");
                  v38 = (uint64_t *)a4;
                  v39 = v45;
                  goto LABEL_35;
                }
              }
            }
          }
        }
      }
    }
  }
  sub_22E9B56BC((uint64_t)a3, (uint64_t)a7, v14, *(_QWORD *)(a6 + 16), (uint64_t *)a4);
  v46 = *(_DWORD *)(v14 + 28) & 0x7F;
  if (!v14 || v46 != 29)
  {
    if (v14 && (v46 - 33) >= 0xFFFFFFF9)
    {
      sub_22E9B5954((uint64_t *)a4, *(_QWORD *)(a1 + 72), (*(unsigned __int8 *)(a1 + 64) >> 2) & 1, a7);
      v49 = *(_QWORD *)a4;
      sub_22EFC683C((uint64_t *)(v14 + 40), &__p);
      v132 = 260;
      v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v50 = sub_22F2F27DC(v49, (const char **)&v130.__r_.__value_.__l.__data_);
      sub_22E8A9AD8(a4, (uint64_t)v50);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_22E8A9D90(a4, 13, "");
      sub_22E9B5C74((uint64_t *)a7, v14, (uint64_t *)a4, 0, 0, 0);
      sub_22E8A9D90(a4, 14, "");
      return sub_22F2F28A4(a4);
    }
    if (!v14 || v46 != 24)
    {
      v62 = *(_QWORD *)(a1 + 72);
      if (v62)
        sub_22E9B5954((uint64_t *)a4, v62, (*(unsigned __int8 *)(a1 + 64) >> 2) & 1, a7);
      v63 = *(_QWORD *)a4;
      sub_22EFC683C((uint64_t *)(v14 + 40), &__p);
      v132 = 260;
      v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v64 = sub_22F2F27DC(v63, (const char **)&v130.__r_.__value_.__l.__data_);
      sub_22E8A9AD8(a4, (uint64_t)v64);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return sub_22F2F28A4(a4);
    }
    v114 = (std::string::size_type)a3;
    v57 = *(_QWORD *)(v14 + 40);
    v58 = v57 & 0xFFFFFFFFFFFFFFF8;
    if ((v57 & 7) == 1)
    {
      v59 = *(_QWORD *)a4;
      if (v58)
      {
        v67 = *(unsigned int **)(v58 + 16);
        v68 = *v67;
        v60 = (std::string::size_type)(v67 + 4);
        v61 = v68;
      }
      else
      {
        v60 = 0;
        v61 = 0;
      }
      v132 = 261;
      v130.__r_.__value_.__r.__words[0] = v60;
      v130.__r_.__value_.__l.__size_ = v61;
      v69 = sub_22F2F27DC(v59, (const char **)&v130.__r_.__value_.__l.__data_);
      sub_22E8A9AD8(a4, (uint64_t)v69);
      return sub_22F2F28A4(a4);
    }
    v65 = v57 & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(v14 + 40) & 7) == 7)
      v65 = *(_QWORD *)(v58 + 16);
    v121 = v57 & 0xFFFFFFFFFFFFFFF8;
    v113 = a2;
    v118 = *(_QWORD *)(v14 + 40) & 7;
    if (!v65)
    {
      v66 = a7;
      memset(&__p, 0, sizeof(__p));
      goto LABEL_100;
    }
    v70 = *(unsigned int **)(v65 + 16);
    v73 = *v70;
    v72 = v70 + 4;
    v71 = v73;
    v66 = a7;
    if (v73 >= 0x17uLL)
    {
      if ((v71 | 7) == 0x17)
        v75 = (v71 & 0xFFFFFFF8) + 8;
      else
        v75 = v71 | 7;
      p_p = (std::string *)operator new(v75 + 1);
      __p.__r_.__value_.__l.__size_ = v71;
      __p.__r_.__value_.__r.__words[2] = v75 - 0x7FFFFFFFFFFFFFFFLL;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v71;
      p_p = &__p;
      if (!v71)
        goto LABEL_99;
    }
    memmove(p_p, v72, v71);
LABEL_99:
    p_p->__r_.__value_.__s.__data_[v71] = 0;
    v58 = v57 & 0xFFFFFFFFFFFFFFF8;
LABEL_100:
    std::string::push_back(&__p, 58);
    v76 = *(_QWORD *)a4;
    v119 = a6;
    if (*(_DWORD *)(a1 + 20))
    {
      v132 = 260;
      v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v78 = sub_22F2F27DC(v76, (const char **)&v130.__r_.__value_.__l.__data_);
      sub_22E8A9C64(a4, (uint64_t)v78);
      if (*(_DWORD *)(v14 + 104) != 1)
      {
LABEL_105:
        v79 = *(unsigned int *)(v14 + 104);
        if ((_DWORD)v79)
        {
          v80 = (uint64_t)v66;
          v81 = 0;
          v120 = 0;
          v115 = (uint64_t)v66;
          v116 = *(_QWORD *)(v14 + 96);
          v82 = v57 & 7;
          v83 = -8 * v79;
          v84 = 16;
          do
          {
            v85 = v82 > 1;
            if (v82 >= 3)
              v85 = *(_DWORD *)v58 - 3;
            if (v81 >= v85)
              break;
            v86 = *(unsigned int *)(a1 + 20);
            if (v84 != 16)
            {
              memset(&v128, 0, sizeof(v128));
              if (v81 > v86)
                sub_22E8A9D90(a4, 19, "");
              v87 = v58;
              if (v118 == 7)
                v87 = *(_QWORD *)(v58 + v84);
              if (v87)
                std::string::append(&v128, (const std::string::value_type *)(*(_QWORD *)(v87 + 16) + 16), **(unsigned int **)(v87 + 16));
              std::string::append(&v128, ":");
              if (v81 < *(unsigned int *)(a1 + 20) || (*(_BYTE *)(a1 + 64) & 0x10) != 0)
              {
                v94 = *(_QWORD *)a4;
                v132 = 260;
                v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
                v95 = sub_22F2F27DC(v94, (const char **)&v130.__r_.__value_.__l.__data_);
                sub_22E8A9C64(a4, (uint64_t)v95);
              }
              else
              {
                v88 = *(_QWORD *)a4;
                v132 = 260;
                v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
                v89 = sub_22F2F27DC(v88, (const char **)&v130.__r_.__value_.__l.__data_);
                sub_22E8A9AD8(a4, (uint64_t)v89);
              }
              if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v128.__r_.__value_.__l.__data_);
              v86 = *(unsigned int *)(a1 + 20);
            }
            if (v81 >= v86)
            {
              memset(&v128, 0, sizeof(v128));
              v122 = v116 + v84;
              v90 = *(_QWORD *)(*(_QWORD *)(v116 + v84 - 16) + 48);
              v127 = v90;
              v91 = *(_QWORD *)(v119 + 16);
              if (v91 >= 0x10)
              {
                sub_22F10F4E4(*(_QWORD *)(v91 & 0xFFFFFFFFFFFFFFF0), v14 + 48, (uint64_t)&v130);
                size = v130.__r_.__value_.__l.__size_;
                v92 = v130.__r_.__value_.__s.__data_[0];
                v120 = v130.__r_.__value_.__r.__words[0] >> 8;
                v93 = v130.__r_.__value_.__s.__data_[16];
                v126[0] = *(_DWORD *)((char *)&v130.__r_.__value_.__r.__words[2] + 1);
                *(_DWORD *)((char *)v126 + 3) = HIDWORD(v130.__r_.__value_.__r.__words[2]);
              }
              else
              {
                v92 = 0;
                v93 = 0;
              }
              if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v90 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 16) != 10
                || (*(_BYTE *)(a1 + 64) & 0x20) != 0)
              {
                if (v93)
                {
                  v130.__r_.__value_.__r.__words[0] = v114;
                  v130.__r_.__value_.__l.__size_ = v92 | (v120 << 8);
                  v130.__r_.__value_.__r.__words[2] = size;
                  v131 = 2;
                  sub_22F10E588((uint64_t)&v130, v90);
                  v127 = v97;
                }
                sub_22E9B7018(&v130, (*(_DWORD *)(*(_QWORD *)(v122 - 16) + 96) >> 13) & ((int)(*(_DWORD *)(*(_QWORD *)(v122 - 16) + 96) << 19) >> 31) & 0x7F, &v127);
                v98 = std::string::insert(&v130, 0, "(");
                v99 = v98->__r_.__value_.__r.__words[0];
                v133.__r_.__value_.__r.__words[0] = v98->__r_.__value_.__l.__size_;
                *(std::string::size_type *)((char *)v133.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v98->__r_.__value_.__r.__words[1] + 7);
                v100 = HIBYTE(v98->__r_.__value_.__r.__words[2]);
                v98->__r_.__value_.__l.__size_ = 0;
                v98->__r_.__value_.__r.__words[2] = 0;
                v98->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v128.__r_.__value_.__l.__data_);
                v128.__r_.__value_.__r.__words[0] = v99;
                v128.__r_.__value_.__l.__size_ = v133.__r_.__value_.__r.__words[0];
                *(std::string::size_type *)((char *)&v128.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v133.__r_.__value_.__r.__words + 7);
                *((_BYTE *)&v128.__r_.__value_.__s + 23) = v100;
                if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v130.__r_.__value_.__l.__data_);
                memset(&v133, 0, sizeof(v133));
                v80 = v115;
                sub_22F119374(&v127, (__int128 *)&v133, v115);
                v101 = std::string::append(&v133, ")");
                v102 = v101->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v130.__r_.__value_.__l.__data_ = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
                v130.__r_.__value_.__r.__words[2] = v102;
                v101->__r_.__value_.__l.__size_ = 0;
                v101->__r_.__value_.__r.__words[2] = 0;
                v101->__r_.__value_.__r.__words[0] = 0;
                if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v103 = &v130;
                else
                  v103 = (std::string *)v130.__r_.__value_.__r.__words[0];
                if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v104 = *((_BYTE *)&v130.__r_.__value_.__s + 23) & 0x7F;
                else
                  v104 = v130.__r_.__value_.__l.__size_;
                std::string::append(&v128, (const std::string::value_type *)v103, v104);
                v58 = v121;
                if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v130.__r_.__value_.__l.__data_);
                if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v133.__r_.__value_.__l.__data_);
                v105 = *(_QWORD *)(*(_QWORD *)(v122 - 16) + 40);
                if ((v105 & 7) == 0)
                {
                  v106 = v105 & 0xFFFFFFFFFFFFFFF8;
                  if (v106)
                  {
                    if ((*(_BYTE *)(a1 + 64) & 0x30) != 0)
                      std::string::append(&v128, (const std::string::value_type *)(*(_QWORD *)(v106 + 16) + 16), **(unsigned int **)(v106 + 16));
                  }
                }
              }
              else
              {
                v96 = *(_QWORD *)(v122 - 16);
                v123[0] = v92 | (v120 << 8);
                v123[1] = size;
                v124 = v93;
                *(_DWORD *)v125 = v126[0];
                *(_DWORD *)&v125[3] = *(_DWORD *)((char *)v126 + 3);
                sub_22E9B67C4((uint64_t)&v130, v80, v96, 1, 0, (uint64_t)v123);
                if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v128.__r_.__value_.__l.__data_);
                v128 = v130;
                v58 = v121;
              }
              if ((*(_BYTE *)(v14 + 58) & 4) != 0 && v83 + v84 == 8)
                std::string::append(&v128, ", ...");
              v107 = *(_BYTE *)(a1 + 64);
              if ((v107 & 0x20) != 0)
              {
                v110 = *(_QWORD *)a4;
                v132 = 260;
                v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
                v111 = sub_22F2F27DC(v110, (const char **)&v130.__r_.__value_.__l.__data_);
                sub_22E8A9B38(a4, (uint64_t)v111);
              }
              else
              {
                v108 = *(_QWORD *)a4;
                v132 = 260;
                v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
                if ((v107 & 0x10) != 0)
                {
                  v112 = sub_22F2F27DC(v108, (const char **)&v130.__r_.__value_.__l.__data_);
                  sub_22E8A9C64(a4, (uint64_t)v112);
                }
                else
                {
                  v109 = sub_22F2F27DC(v108, (const char **)&v130.__r_.__value_.__l.__data_);
                  sub_22E8A9C00(a4, (uint64_t)v109);
                }
              }
              if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v128.__r_.__value_.__l.__data_);
            }
            ++v81;
            v84 += 8;
          }
          while (v83 + v84 != 16);
        }
        if ((*(_BYTE *)(v14 + 58) & 4) != 0)
        {
          if (!*(_DWORD *)(v14 + 104))
          {
            if ((*(_BYTE *)(a1 + 64) & 0x20) != 0)
            {
              sub_22E8A9B38(a4, (uint64_t)", ...");
            }
            else if ((*(_BYTE *)(a1 + 64) & 0x10) != 0)
            {
              sub_22E8A9C64(a4, (uint64_t)", ...");
            }
            else
            {
              sub_22E8A9C00(a4, (uint64_t)", ...");
            }
          }
          sub_22E9B710C(v113, v14, a4);
        }
        v40 = sub_22F2F28A4(a4);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        return v40;
      }
      v77 = "";
    }
    else
    {
      v132 = 260;
      v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v77 = sub_22F2F27DC(v76, (const char **)&v130.__r_.__value_.__l.__data_);
    }
    sub_22E8A9AD8(a4, (uint64_t)v77);
    goto LABEL_105;
  }
  sub_22E9B5954((uint64_t *)a4, *(_QWORD *)(a1 + 72), (*(unsigned __int8 *)(a1 + 64) >> 2) & 1, a7);
  v47 = *(_QWORD *)(v14 + 48);
  sub_22E9B5A60((uint64_t *)a7, v47, (uint64_t *)a4);
  v130.__r_.__value_.__r.__words[0] = 1;
  sub_22F347DFC((uint64_t)a3, v14, (void ***)&v130);
  if ((v130.__r_.__value_.__s.__data_[0] & 1) != 0)
  {
    v48 = v130.__r_.__value_.__r.__words[0] >> 58;
    if (!(v130.__r_.__value_.__r.__words[0] >> 58))
      goto LABEL_84;
    while (1)
    {
LABEL_60:
      v51 = v48 - 1;
      v52 = (v48 - 1);
      v53 = v48 - 1;
      v54 = (v130.__r_.__value_.__r.__words[0] >> 1) & ~(-1 << (v130.__r_.__value_.__r.__words[0] >> 58));
      if ((v130.__r_.__value_.__s.__data_[0] & 1) == 0)
      {
        v53 = v51 & 0x3F;
        v54 = *(_QWORD *)(*(_QWORD *)v130.__r_.__value_.__l.__data_ + 8 * (v51 >> 6));
      }
      if (((v54 >> v53) & 1) == 0)
      {
        v55 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v52 + 16);
        v56 = *(_DWORD *)(v55 + 28) & 0x7F;
        if (v55 && v56 == 38)
        {
          if (*(_QWORD *)(v55 + 72) <= 7uLL)
            goto LABEL_83;
        }
        else if (v55 && v56 == 59)
        {
          if (*(_QWORD *)(v55 + 72) <= 3uLL)
            goto LABEL_83;
        }
        else if (*(_QWORD *)(v55 + 72) < 8uLL)
        {
LABEL_83:
          sub_22E8A9D90(a4, 13, "");
          sub_22E9B5C74((uint64_t *)a7, v14, (uint64_t *)a4, v48, 0, 0);
          sub_22E8A9D90(a4, 14, "");
          goto LABEL_84;
        }
      }
      --v48;
      if (!v52)
        goto LABEL_84;
    }
  }
  v48 = *(unsigned int *)(v130.__r_.__value_.__r.__words[0] + 64);
  if (*(_DWORD *)(v130.__r_.__value_.__r.__words[0] + 64))
    goto LABEL_60;
LABEL_84:
  sub_22E8A9D90(a4, 7, "");
  sub_22E9B60CC(a2, (uint64_t)a7, v47, (uint64_t *)a4, 0, 0);
  sub_22E8A9D90(a4, 8, "");
  sub_22E9B642C((uint64_t *)a4, v47, (uint64_t)a7);
  v40 = sub_22F2F28A4(a4);
  sub_22E54C5D0((void ***)&v130);
  return v40;
}

std::string *sub_22E9B561C(std::string *result, std::string *a2, std::string *a3)
{
  int v5;
  uint64_t v6;
  std::string::size_type *v7;
  int v8;
  const std::string::value_type *v9;

  if (LOWORD(result->__r_.__value_.__l.__data_))
  {
    v5 = 0;
    v6 = 16 * LOWORD(result->__r_.__value_.__l.__data_);
    v7 = &result[1].__r_.__value_.__r.__words[2];
    do
    {
      v8 = *((_DWORD *)v7 - 2);
      if (v8 == 2)
      {
        result = (std::string *)sub_22E9B561C(*v7, a3, a3);
      }
      else
      {
        v9 = (const std::string::value_type *)*v7;
        if (((v8 != 0) & ~v5) != 0)
        {
          result = std::string::append(a2, v9);
          v5 = 0;
        }
        else
        {
          result = std::string::append(a3, v9);
          v5 = 1;
        }
      }
      v7 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return result;
}

void sub_22E9B56BC(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t *a5)
{
  int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;

  if (!a3)
    return;
  v8 = *(_DWORD *)(a3 + 28);
  v9 = v8 & 0x7F;
  if (v9 == 29)
  {
    if ((*(_DWORD *)(*(_QWORD *)(a3 + 48) + 28) & 0x7F) == 0x37)
      return;
    if ((v8 & 0x7Eu) - 58 < 0xFFFFFFFA)
      a3 = *(_QWORD *)(a3 + 48);
LABEL_14:
    v11 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v11)
      v12 = *(unsigned __int8 *)(v11 + 16) - 27 > 0xFFFFFFFD;
    else
      v12 = 0;
    if (!v12)
      v11 = sub_22F10CF48(v11);
    v10 = *(_QWORD *)(v11 + 24);
    goto LABEL_20;
  }
  if ((v9 - 55) < 2)
    return;
  if ((v8 & 0x7Eu) - 58 >= 0xFFFFFFFA)
    goto LABEL_14;
  if ((v8 & 0x7Fu) > 0x42)
  {
    if (v9 != 67)
    {
      if (v9 == 74)
        return;
      goto LABEL_26;
    }
    v14 = *(_QWORD *)(a3 + 16);
    v15 = v14 & 0xFFFFFFFFFFFFFFF8;
    if ((v14 & 4) != 0)
      v15 = *(_QWORD *)v15;
    v16 = *(_WORD *)(v15 + 8) & 0x7F;
    v17 = -40;
    if (v16 > 0x46)
    {
      if (v16 != 83)
      {
        if (v16 == 71)
        {
          v17 = -56;
          goto LABEL_54;
        }
        if (v16 == 81)
          goto LABEL_54;
LABEL_49:
        if (v16 - 52 < 6)
        {
          v17 = -72;
        }
        else
        {
          v17 = -48;
          if (v16 - 33 < 5)
            v17 = -64;
        }
      }
    }
    else
    {
      if (v16 > 0x18)
        goto LABEL_48;
      if (v16 != 16)
      {
        if (((1 << v16) & 0x1066) != 0)
          goto LABEL_54;
        if (v16 != 24)
        {
LABEL_48:
          if (v16 == 70)
          {
            v17 = -64;
            goto LABEL_54;
          }
          goto LABEL_49;
        }
      }
      v17 = -48;
    }
LABEL_54:
    v20 = v15 + v17;
    v21 = *(_QWORD *)(v15 + v17 + 48);
    if (v21)
      v22 = v21 & 0xFFFFFFFFFFFFFFF0;
    else
      v22 = sub_22EF6462C(a1, v20);
    v10 = sub_22F0C6C4C(v22, a1, 0);
    goto LABEL_20;
  }
  if (v9 != 24)
  {
    if (v9 == 51)
    {
      if (a4 >= 0x10)
      {
        sub_22F3B6034(a3, a4);
        goto LABEL_20;
      }
      goto LABEL_30;
    }
LABEL_26:
    if ((v9 - 75) < 0xFFFFFFE5)
    {
      if (v9 != 25)
        return;
      if (a4 >= 0x10)
      {
        v18 = *(_QWORD *)(a3 + 16);
        v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8);
        if ((v18 & 4) != 0)
          v19 = (_QWORD *)*v19;
        sub_22F409EE0((uint64_t *)(a3 + 56), a4, (unint64_t)v19, 3);
      }
      else
      {
        v10 = *(_QWORD *)(a3 + 56);
      }
      goto LABEL_20;
    }
LABEL_30:
    v10 = *(_QWORD *)(a3 + 48);
    goto LABEL_20;
  }
  if (a4 >= 0x10)
    sub_22F3B57F0(a3, a4);
  else
    v10 = *(_QWORD *)(a3 + 80);
LABEL_20:
  if (v10 >= 0x10
    && (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFF0) + 8) | v10 & 7) != (*(_QWORD *)((*(_QWORD *)(a1 + 16832) & 0xFFFFFFFFFFFFFFF0)
                                                                               + 8) | *(_QWORD *)(a1 + 16832) & 7))
  {
    v13 = sub_22E9D1DF8(v10, a2, *a5);
    sub_22E8A9CC8((uint64_t)a5, (uint64_t)v13);
  }
}

void sub_22E9B5954(uint64_t *a1, uint64_t a2, int a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  _BYTE *v11;
  void **v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  void **v20;
  void *__p[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (a2)
  {
    v23 = v4;
    v24 = v5;
    __p[0] = 0;
    __p[1] = 0;
    v22 = 0;
    v13 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 1;
    v15 = 0;
    v16 = 0;
    v14 = 0;
    v12 = (void **)(MEMORY[0x24BED83D8] + 16);
    v20 = __p;
    llvm::raw_ostream::SetBufferAndMode();
    sub_22F0AAD88(a2, (llvm::raw_ostream *)&v12, a4, 0);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v12);
    v10 = *a1;
    LOWORD(v16) = 260;
    v12 = __p;
    v11 = sub_22F2F27DC(v10, (const char **)&v12);
    if (a3)
      sub_22E8A9C64((uint64_t)a1, (uint64_t)v11);
    else
      sub_22E8A9B38((uint64_t)a1, (uint64_t)v11);
    if (SHIBYTE(v22) < 0)
      operator delete(__p[0]);
  }
}

void sub_22E9B5A60(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t v21;
  void *__p[2];
  char v23;
  const char *v24[4];
  __int16 v25;

  v5 = *(_QWORD *)(a2 + 40);
  v3 = (uint64_t *)(a2 + 40);
  v4 = v5;
  if (v5)
  {
    v8 = v4 & 7;
    if (v8 == 7)
    {
      v9 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if (v9 >= 3)
        v9 = 3;
      v8 = v9 | 8;
    }
    if (v8 <= 9)
    {
      if (v8 == 6)
      {
        if ((v4 & 7) == 6)
        {
          v10 = *(int *)(v4 & 0xFFFFFFFFFFFFFFF8);
          if (v10 > 0x2E)
            v11 = 0;
          else
            v11 = off_24FAB7548[v10];
        }
        else
        {
          v11 = "operator";
        }
        sub_22E8A9AD8((uint64_t)a3, (uint64_t)v11);
      }
      else
      {
        if (((1 << v8) & 0x231) != 0)
          goto LABEL_19;
        if (v8 != 3)
          return;
        if ((v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 8) & 0xFFFFFFFFFFFFFFF0),
              v13 = *(unsigned __int8 *)(v12 + 16),
              v12)
          && v13 == 45
          || (v12 ? (v14 = v13 == 27) : (v14 = 0), v14))
        {
          v17 = sub_22F114198(*(_QWORD *)(v12 + 24));
          v18 = *a3;
          sub_22EFC683C((uint64_t *)(v17 + 40), __p);
          v25 = 260;
          v24[0] = (const char *)__p;
          v19 = sub_22F2F27DC(v18, v24);
          sub_22E8A9AD8((uint64_t)a3, (uint64_t)v19);
          if (v23 < 0)
            operator delete(__p[0]);
          v20 = *(_QWORD *)(v17 + 136);
          if ((v20 & 4) == 0)
          {
            v21 = v20 & 0xFFFFFFFFFFFFFFF8;
            if ((v20 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              sub_22E8A9D90((uint64_t)a3, 13, "");
              sub_22E9B5C74(a1, v21, a3, 0, 0, 0);
              sub_22E8A9D90((uint64_t)a3, 14, "");
            }
          }
        }
        else
        {
LABEL_19:
          v15 = *a3;
          sub_22EFC683C(v3, __p);
          v25 = 260;
          v24[0] = (const char *)__p;
          v16 = sub_22F2F27DC(v15, v24);
          sub_22E8A9AD8((uint64_t)a3, (uint64_t)v16);
          if (v23 < 0)
            operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_22E9B5C74(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned int a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string::size_type *v16;
  unint64_t v17;
  std::string **v18;
  uint64_t v19;
  int v20;
  const char *v21;
  unint64_t v22;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  const void *v27;
  std::string::size_type v28;
  std::string *p_dst;
  uint64_t v31;
  unint64_t v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  _BOOL4 v43;
  uint64_t *v44;
  std::string::size_type *v45;
  uint64_t v46;
  uint64_t v47;
  std::string **v48;
  uint64_t v49;
  char v50;
  std::string v51;
  std::string __dst;
  uint64_t v53;
  char v54;
  void *v55;
  uint64_t v56;
  std::string *v57;
  void *v58;
  uint64_t v59;
  _QWORD v60[4];

  v60[2] = *MEMORY[0x24BDAC8D0];
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v12 = *(_QWORD *)(v11 + 56);
  LODWORD(v13) = *(_DWORD *)(v12 + 12) & 0x1FFFFFFF;
  if ((_DWORD)a4)
    v13 = a4;
  else
    v13 = v13;
  if ((_DWORD)v13 != a5)
  {
    v14 = v11;
    v15 = v12 + 16;
    v16 = &__dst.__r_.__value_.__r.__words[2];
    v49 = 8 * v13 - 8;
    v17 = 8 * a5;
    v18 = &v57;
    v47 = MEMORY[0x24BED83D8] + 16;
    v50 = 1;
    while (1)
    {
      memset(&v51, 0, sizeof(v51));
      v19 = *(_QWORD *)(v15 + v17);
      v20 = *(_DWORD *)(v19 + 28) & 0x7F;
      if (v19 && v20 == 38)
      {
        if ((*(_BYTE *)(v19 + 60) & 3) == 1)
        {
          v21 = "typename";
          goto LABEL_24;
        }
        if ((*(_BYTE *)(v19 + 60) & 4) == 0)
        {
          v21 = "class";
          goto LABEL_24;
        }
        LODWORD(__dst.__r_.__value_.__r.__words[1]) = 0;
        v54 = 0;
        v55 = 0;
        LODWORD(v56) = 1;
        v16[1] = 0;
        v16[2] = 0;
        *v16 = 0;
        __dst.__r_.__value_.__r.__words[0] = v47;
        v57 = &v51;
        llvm::raw_ostream::SetBufferAndMode();
        sub_22F3B9C24((uint64_t *)(v19 + 80), (llvm::raw_ostream *)&__dst, *a1, a1[1]);
        if (v53 != __dst.__r_.__value_.__r.__words[2])
          llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&__dst);
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__dst);
LABEL_25:
        if (*(_QWORD *)(v19 + 40) >= 8uLL && (*(_QWORD *)(v19 + 40) & 7) == 0)
        {
          std::string::push_back(&v51, 32);
          v31 = *(_QWORD *)(v19 + 40);
          if ((v31 & 7) != 0)
            v32 = 0;
          else
            v32 = v31 & 0xFFFFFFFFFFFFFFF8;
          v33 = sub_22F1D3238(v32);
          std::string::append(&v51, v33, v34);
        }
        v35 = 7;
        goto LABEL_46;
      }
      if (!v19 || v20 != 59)
      {
        v21 = "template<...> class";
LABEL_24:
        MEMORY[0x2348A0C14](&v51, v21);
        goto LABEL_25;
      }
      v22 = *(_QWORD *)(v19 + 40);
      if (v22 >= 8 && (*(_QWORD *)(v19 + 40) & 7) == 0)
        break;
LABEL_45:
      __dst.__r_.__value_.__r.__words[0] = *(_QWORD *)(v19 + 48);
      sub_22F119374((uint64_t *)&__dst, (__int128 *)&v51, (uint64_t)a1);
      v35 = 3;
LABEL_46:
      v39 = a6 | (*(_QWORD *)(v19 + 72) <= v35);
      if ((v39 & 1) != 0)
      {
        if ((v50 & 1) == 0)
          sub_22E8A9D90((uint64_t)a3, 15, "");
        v40 = *a3;
        LOWORD(v53) = 260;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
        v41 = sub_22F2F27DC(v40, (const char **)&__dst.__r_.__value_.__l.__data_);
        sub_22E8A9C00((uint64_t)a3, (uint64_t)v41);
        v50 = 0;
      }
      else
      {
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)a3;
        *(_OWORD *)v16 = 0u;
        *((_OWORD *)v16 + 1) = 0u;
        v55 = v18;
        v56 = 0x400000000;
        v58 = v60;
        v59 = 0x200000000;
        if ((v50 & 1) == 0)
          sub_22E8A9D90((uint64_t)&__dst, 15, "");
        sub_22E9B5C74(a1, v14, &__dst, a4, v17 >> 3, 1);
        v42 = sub_22F2F28A4((uint64_t)&__dst);
        sub_22E8A9B9C((uint64_t)a3, v42);
        if (v58 != v60)
          free(v58);
        if (v55 != v18)
          free(v55);
      }
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v51.__r_.__value_.__l.__data_);
      a6 = 0;
      v43 = v49 != v17;
      v17 += 8;
      if ((v39 & v43 & 1) == 0)
        return;
    }
    v45 = v16;
    v46 = v15;
    v24 = v14;
    v25 = sub_22F1D3238(v22 & 0xFFFFFFFFFFFFFFF8);
    if (v26 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v27 = v25;
    v28 = v26;
    v48 = v18;
    if (v26 >= 0x17)
    {
      v36 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v36 = v26 | 7;
      v44 = a1;
      v37 = v36 + 1;
      p_dst = (std::string *)operator new(v36 + 1);
      v38 = v37 | 0x8000000000000000;
      a1 = v44;
      __dst.__r_.__value_.__l.__size_ = v28;
      __dst.__r_.__value_.__r.__words[2] = v38;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v26;
      p_dst = &__dst;
      if (!v26)
        goto LABEL_42;
    }
    memmove(p_dst, v27, v28);
LABEL_42:
    p_dst->__r_.__value_.__s.__data_[v28] = 0;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    v51 = __dst;
    v14 = v24;
    v16 = v45;
    v15 = v46;
    v18 = v48;
    goto LABEL_45;
  }
}

void sub_22E9B60CC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6)
{
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  char v15;
  unint64_t v16;
  BOOL v17;
  const std::string::value_type *v18;
  void *v19;
  int v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _BYTE v28[24];
  std::string v29;
  void *__p[2];
  __int128 v31;
  __int128 v32;
  void *v33;
  uint64_t v34;
  _BYTE v35[64];
  void *v36;
  uint64_t v37;
  _QWORD v38[4];

  v38[2] = *MEMORY[0x24BDAC8D0];
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v11)
    v12 = *(_BYTE *)(v11 + 16) == 26;
  else
    v12 = 0;
  if (v12)
    goto LABEL_6;
  v27 = a6;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
  {
    v11 = sub_22F10CF48(v11);
    a6 = v27;
    if (!v11)
    {
      v13 = 0;
      goto LABEL_7;
    }
LABEL_6:
    v13 = (unsigned __int16)(*(_QWORD *)(v11 + 16) >> 38);
    goto LABEL_7;
  }
  v13 = 0;
LABEL_7:
  if (v13 != (_DWORD)a5)
  {
    v14 = -v13;
    v15 = 1;
    while (1)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a3 + 120) + 8 * a5);
      v17 = 1;
      if ((*(_DWORD *)(v16 + 96) & 0x600) != 0x400 && (*(_DWORD *)(v16 + 96) & 0x600) != 0x200)
        v17 = *(_QWORD *)(v16 + 88) > 7uLL;
      if (!(a6 & 1 | !v17))
        break;
      if ((v15 & 1) == 0)
        sub_22E8A9D90((uint64_t)a4, 15, "");
      v28[0] = 0;
      v28[16] = 0;
      sub_22E9B67C4((uint64_t)&v29, a2, v16, 0, 0, (uint64_t)v28);
      if ((*(_DWORD *)(v16 + 96) & 0x600) == 0x400
        || (*(_DWORD *)(v16 + 96) & 0x600) == 0x200
        || *(_QWORD *)(v16 + 88) >= 8uLL)
      {
        sub_22E9D8510(__p, v16, *(_QWORD **)(a1 + 88), *(_DWORD **)(a1 + 56));
        v18 = (SBYTE7(v31) & 0x80u) == 0
            ? (const std::string::value_type *)__p
            : (const std::string::value_type *)__p[0];
        v19 = (SBYTE7(v31) & 0x80u) == 0 ? (void *)(BYTE7(v31) & 0x7F) : __p[1];
        std::string::append(&v29, v18, (std::string::size_type)v19);
        if (SBYTE7(v31) < 0)
          operator delete(__p[0]);
      }
      v20 = sub_22EFBF68C(a3);
      if (v14 + (_DWORD)a5 == -1 && v20)
        std::string::append(&v29, ", ...");
      v21 = *a4;
      LOWORD(v32) = 260;
      __p[0] = &v29;
      v22 = sub_22F2F27DC(v21, (const char **)__p);
      sub_22E8A9C00((uint64_t)a4, (uint64_t)v22);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      v15 = 0;
      a6 = 0;
      a5 = (a5 + 1);
      if (!(v14 + (_DWORD)a5))
        goto LABEL_32;
    }
    *(_OWORD *)__p = *(_OWORD *)a4;
    v31 = 0u;
    v32 = 0u;
    v33 = v35;
    v34 = 0x400000000;
    v36 = v38;
    v37 = 0x200000000;
    if ((v15 & 1) == 0)
      sub_22E8A9D90((uint64_t)__p, 15, "");
    sub_22E9B60CC(a1, a2, a3, __p, a5, 1);
    v26 = sub_22F2F28A4((uint64_t)__p);
    sub_22E8A9B9C((uint64_t)a4, v26);
    if (v36 != v38)
      free(v36);
    if (v33 != v35)
      free(v33);
  }
LABEL_32:
  v23 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v23)
    v24 = *(_BYTE *)(v23 + 16) == 26;
  else
    v24 = 0;
  if (v24
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v23 = sub_22F10CF48(v23)) != 0)
  {
    v25 = *(_QWORD *)(v23 + 16);
    if ((v25 & 0x800000000000000) != 0)
    {
      if ((v25 & 0x3FFFC000000000) == 0)
        sub_22E8A9C00((uint64_t)a4, (uint64_t)"...");
      sub_22E9B710C(a1, a3, (uint64_t)a4);
    }
  }
}

void sub_22E9B642C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BOOL4 v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  unsigned int v11;
  const std::string::value_type *v12;
  const char *v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  void **v18;
  std::string::size_type v19;
  std::string::size_type size;
  uint64_t v21;
  _BYTE *v22;
  void *__p[2];
  uint64_t v24;
  __int16 v25;
  std::string v26;
  std::string v27;
  std::string v28;

  v6 = 0;
  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC)
  {
    if ((*(_BYTE *)(a3 + 6) & 1) != 0)
    {
      if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) + 80) & 0xE000) == 0x4000)
        v7 = 1;
      else
        v7 = (*(_QWORD *)(a2 + 40) & 7) == 6
          && (*(_DWORD *)(*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4;
      v6 = !v7;
    }
    else
    {
      v6 = 0;
    }
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v8)
    v9 = *(_BYTE *)(v8 + 16) == 26;
  else
    v9 = 0;
  if (!v9)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
      return;
    v8 = sub_22F10CF48(v8);
    if (!v8)
      return;
  }
  v10 = (sub_22E47E1B0(v8) & 0xCFFFFFFFFLL) != 0 ? 1 : v6;
  if (v10 != 1)
    return;
  if ((v6 & 1) == 0)
  {
    if (sub_22E47E1B0(v8) == 1)
    {
      v13 = " const";
    }
    else if (sub_22E47E1B0(v8) == 4)
    {
      v13 = " volatile";
    }
    else
    {
      if ((*(_BYTE *)(a3 + 3) & 2) == 0 || sub_22E47E1B0(v8) != 2)
        goto LABEL_20;
      v13 = " restrict";
    }
    sub_22E8A9C64((uint64_t)a1, (uint64_t)v13);
    return;
  }
LABEL_20:
  memset(&v28, 0, sizeof(v28));
  if ((sub_22E47E20C(v8) & 1) != 0)
    std::string::append(&v28, " const");
  if ((sub_22E47E20C(v8) & 4) != 0)
    std::string::append(&v28, " volatile");
  if ((*(_BYTE *)(a3 + 3) & 2) != 0 && (sub_22E47E20C(v8) & 2) != 0)
    std::string::append(&v28, " restrict");
  v11 = sub_22E47E1B0(v8) >> 11;
  switch(v11)
  {
    case 0u:
      if (v6)
      {
        v12 = " thread";
        goto LABEL_57;
      }
      break;
    case 0xBu:
      v12 = " device";
      goto LABEL_57;
    case 0xCu:
      v12 = " threadgroup";
      goto LABEL_57;
    case 0xDu:
      v12 = " constant";
      goto LABEL_57;
    case 0xEu:
      v12 = " threadgroup_imageblock";
      goto LABEL_57;
    case 0xFu:
      v12 = " ray_data";
      goto LABEL_57;
    case 0x10u:
      v12 = " object_data";
LABEL_57:
      std::string::append(&v28, v12);
      break;
    default:
      std::to_string(&v26, v11 - 27);
      v14 = std::string::insert(&v26, 0, " __attribute__((address_space(");
      v15 = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v27.__r_.__value_.__r.__words[2] = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      v16 = std::string::append(&v27, ")))");
      v17 = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v24 = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (v24 >= 0)
        v18 = __p;
      else
        v18 = (void **)__p[0];
      if (v24 >= 0)
        v19 = HIBYTE(v24) & 0x7F;
      else
        v19 = (std::string::size_type)__p[1];
      std::string::append(&v28, (const std::string::value_type *)v18, v19);
      if (SHIBYTE(v24) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      break;
  }
  size = *((_BYTE *)&v28.__r_.__value_.__s + 23) & 0x7F;
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v28.__r_.__value_.__l.__size_;
  if (!size)
  {
    if ((*((_BYTE *)&v28.__r_.__value_.__s + 23) & 0x80) == 0)
      return;
    goto LABEL_62;
  }
  v21 = *a1;
  v25 = 260;
  __p[0] = &v28;
  v22 = sub_22F2F27DC(v21, (const char **)__p);
  sub_22E8A9C64((uint64_t)a1, (uint64_t)v22);
  if ((*((_BYTE *)&v28.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_62:
    operator delete(v28.__r_.__value_.__l.__data_);
}

void sub_22E9B67C4(uint64_t a1, uint64_t a2, unint64_t a3, char a4, int a5, uint64_t a6)
{
  char v9;
  int v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  _BYTE *v29;
  unint64_t v30;
  const void *v31;
  std::string::size_type v32;
  char v33;
  std::string *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int i;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  std::string::size_type v45;
  std::string *v46;
  std::string::size_type v47;
  char v48;
  std::string::size_type v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  std::string::size_type v53;
  uint64_t v54;
  unint64_t v55;
  const std::string::value_type *v56;
  std::string::size_type v57;
  std::string *v58;
  unint64_t v59;
  std::string::size_type size;
  std::string *v61;
  std::string::size_type v62;
  char v63;
  int v64;
  const std::string::value_type *v65;
  std::string::size_type v66;
  std::string::size_type v67;
  std::string *v68;
  std::string::size_type v69;
  std::string *v70;
  std::string::size_type v71;
  char v72;
  char v73;
  BOOL v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  const std::string::value_type *v78;
  std::string::size_type v79;
  unint64_t v80;
  _BYTE *v81;
  unint64_t v82;
  const void *v83;
  std::string::size_type v84;
  std::string *p_dst;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  __int128 v90;
  uint64_t v91;
  std::string v92;
  std::string v93;
  unint64_t v94;
  unint64_t v95[2];
  unint64_t v96[2];
  std::string __dst;
  int v98;
  _QWORD v99[2];
  std::string v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    *(_BYTE *)(a1 + 23) = 3;
    *(_DWORD *)a1 = 7630441;
    return;
  }
  v9 = a4;
  if ((*(_DWORD *)(a3 + 28) & 0x7F) == 0x40)
    v12 = (*(_DWORD *)(a3 + 96) >> 13) & ((int)(*(_DWORD *)(a3 + 96) << 19) >> 31) & 0x7F;
  else
    LOBYTE(v12) = 0;
  v13 = *(_QWORD *)(a3 + 16);
  v14 = v13 & 0xFFFFFFFFFFFFFFF8;
  if ((v13 & 4) != 0)
    v14 = *(_QWORD *)v14;
  v15 = *(_WORD *)(v14 + 8) & 0x7F;
  v16 = *(_QWORD *)(a3 + 48);
  v17 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v17 + 17) & 4) == 0
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 10)
  {
    v96[0] = 0;
    v96[1] = 0;
    v95[0] = 0;
    v95[1] = 0;
    v18 = *(_QWORD *)(a3 + 56);
    v19 = (unint64_t *)(v18 & 0xFFFFFFFFFFFFFFF8);
    if ((v18 & 4) != 0)
      v19 = (unint64_t *)v19[4];
    sub_22E9D8678(v19, v96, v95, a5);
    v20 = v96[0];
    if (!v96[0] && v15 == 24)
    {
      v21 = *(_QWORD *)(a3 + 16);
      v22 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
      if ((v21 & 4) != 0)
        v22 = (_QWORD *)*v22;
      v23 = v22 - 6;
      if (!v22)
        v23 = 0;
      if ((*((_BYTE *)v23 + 58) & 8) == 0
        || (v22 ? (v24 = (unint64_t)(v22 - 6)) : (v24 = 0), (v25 = sub_22EFDCBF0(v24, 0)) == 0))
      {
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
LABEL_96:
        v59 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v59 + 8) & 0xF) != 0)
          v59 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(a3 + 48));
        v94 = v59 & 0xFFFFFFFFFFFFFFF0;
        memset(&__dst, 0, sizeof(__dst));
        sub_22F119374((uint64_t *)&v94, (__int128 *)&__dst, a2);
        if (*(char *)(a1 + 23) < 0)
          operator delete(*(void **)a1);
        *(std::string *)a1 = __dst;
        sub_22E9B7018(&__dst, v12, &v94);
        size = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = __dst.__r_.__value_.__l.__size_;
        if (size)
        {
          std::operator+<char>();
          v61 = std::string::append(&v92, " ");
          v62 = v61->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v93.__r_.__value_.__l.__data_ = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
          v93.__r_.__value_.__r.__words[2] = v62;
          v61->__r_.__value_.__l.__size_ = 0;
          v61->__r_.__value_.__r.__words[2] = 0;
          v61->__r_.__value_.__r.__words[0] = 0;
          v63 = *(_BYTE *)(a1 + 23);
          v64 = v63;
          if (v63 >= 0)
            v65 = (const std::string::value_type *)a1;
          else
            v65 = *(const std::string::value_type **)a1;
          v66 = v63 & 0x7F;
          if (v64 >= 0)
            v67 = v66;
          else
            v67 = *(_QWORD *)(a1 + 8);
          v68 = std::string::append(&v93, v65, v67);
          v69 = v68->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v100.__r_.__value_.__l.__data_ = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
          v100.__r_.__value_.__r.__words[2] = v69;
          v68->__r_.__value_.__l.__size_ = 0;
          v68->__r_.__value_.__r.__words[2] = 0;
          v68->__r_.__value_.__r.__words[0] = 0;
          v70 = std::string::append(&v100, ")");
          v71 = v70->__r_.__value_.__r.__words[0];
          v99[0] = v70->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v99 + 7) = *(std::string::size_type *)((char *)&v70->__r_.__value_.__r.__words[1] + 7);
          v72 = HIBYTE(v70->__r_.__value_.__r.__words[2]);
          v70->__r_.__value_.__l.__size_ = 0;
          v70->__r_.__value_.__r.__words[2] = 0;
          v70->__r_.__value_.__r.__words[0] = 0;
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          *(_QWORD *)a1 = v71;
          *(_QWORD *)(a1 + 8) = v99[0];
          *(_QWORD *)(a1 + 15) = *(_QWORD *)((char *)v99 + 7);
          *(_BYTE *)(a1 + 23) = v72;
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v100.__r_.__value_.__l.__data_);
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v93.__r_.__value_.__l.__data_);
          if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v92.__r_.__value_.__l.__data_);
        }
        v73 = *(_BYTE *)(a1 + 23);
        v74 = v73 < 0;
        v75 = *(char **)a1;
        if (v73 >= 0)
          v75 = (char *)a1;
        v76 = v73 & 0x7F;
        if (v74)
          v76 = *(_QWORD *)(a1 + 8);
        if (v75[v76 - 1] != 41)
          std::string::append((std::string *)a1, " ");
        v77 = *(_QWORD *)(a3 + 40);
        if ((v77 & 7) == 0 && (v77 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v78 = sub_22F1D3238(v77 & 0xFFFFFFFFFFFFFFF8);
          std::string::append((std::string *)a1, v78, v79);
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return;
      }
      sub_22E9D8678(*(unint64_t **)(v25 + 64), v96, v95, a5);
      v20 = v96[0];
    }
    if (v20)
    {
      v90 = *(_OWORD *)a6;
      v91 = *(_QWORD *)(a6 + 16);
      sub_22E9D88EC(a1, a2, a3, v96, (uint64_t)v95, 0, a5, &v90);
      return;
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    if (v15 == 24)
      goto LABEL_96;
    v80 = *(_QWORD *)(a3 + 40);
    if (v80 < 8 || (v80 & 7) != 0)
      goto LABEL_141;
    v81 = sub_22F1D3238(v80 & 0xFFFFFFFFFFFFFFF8);
    if (v82 <= 0x7FFFFFFFFFFFFFF7)
    {
      v83 = v81;
      v84 = v82;
      if (v82 >= 0x17)
      {
        v86 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v82 | 7) != 0x17)
          v86 = v82 | 7;
        v87 = v86 + 1;
        p_dst = (std::string *)operator new(v86 + 1);
        __dst.__r_.__value_.__l.__size_ = v84;
        __dst.__r_.__value_.__r.__words[2] = v87 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v82;
        p_dst = &__dst;
        if (!v82)
          goto LABEL_138;
      }
      memmove(p_dst, v83, v84);
LABEL_138:
      p_dst->__r_.__value_.__s.__data_[v84] = 0;
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      *(std::string *)a1 = __dst;
LABEL_141:
      v88 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v88 + 8) & 0xF) != 0)
        v88 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(a3 + 48));
      v94 = v88 & 0xFFFFFFFFFFFFFFF0;
      v58 = (std::string *)&v94;
      goto LABEL_92;
    }
LABEL_144:
    abort();
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v26 = *(_QWORD *)(a3 + 40);
  if (v26 >= 8 && (v26 & 7) == 0 && v15 != 24 && (a4 & 1) == 0)
  {
    v89 = v15;
    v28 = a2;
    v29 = sub_22F1D3238(v26 & 0xFFFFFFFFFFFFFFF8);
    if (v30 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_144;
    v31 = v29;
    v32 = v30;
    v33 = v12;
    if (v30 >= 0x17)
    {
      v35 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v35 = v30 | 7;
      v36 = v35 + 1;
      v34 = (std::string *)operator new(v35 + 1);
      __dst.__r_.__value_.__l.__size_ = v32;
      __dst.__r_.__value_.__r.__words[2] = v36 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v30;
      v34 = &__dst;
      if (!v30)
        goto LABEL_38;
    }
    memmove(v34, v31, v32);
LABEL_38:
    a2 = v28;
    v34->__r_.__value_.__s.__data_[v32] = 0;
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(std::string *)a1 = __dst;
    v16 = *(_QWORD *)(a3 + 48);
    LOBYTE(v12) = v33;
    v9 = a4;
    v15 = v89;
  }
  v93.__r_.__value_.__r.__words[0] = v16;
  if (*(_BYTE *)(a6 + 16))
  {
    v37 = a3;
    if ((*(_DWORD *)(a3 + 28) & 0x7F) != 0x53)
    {
      v38 = *(_QWORD *)(a3 + 16);
      v39 = v38 & 0xFFFFFFFFFFFFFFF8;
      if ((v38 & 4) != 0)
        v39 = *(_QWORD *)v39;
      for (i = *(_WORD *)(v39 + 8) & 0x7F; i != 83; i = *(_WORD *)(v39 + 8) & 0x7F)
      {
        v41 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v41 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_56;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_55;
          if (i == 16)
            goto LABEL_49;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_62;
          if (i == 24)
          {
LABEL_49:
            v41 = -48;
          }
          else
          {
LABEL_55:
            if (i != 70)
            {
LABEL_56:
              v42 = i - 52;
              if ((i - 33) >= 5)
                v43 = -48;
              else
                v43 = -64;
              if (v42 >= 6)
                v41 = v43;
              else
                v41 = -72;
              goto LABEL_62;
            }
            v41 = -64;
          }
        }
LABEL_62:
        v44 = *(_QWORD *)(v39 + v41 + 16);
        v39 = v44 & 0xFFFFFFFFFFFFFFF8;
        if ((v44 & 4) != 0)
          v39 = *(_QWORD *)v39;
      }
      v37 = v39 - 40;
    }
    __dst.__r_.__value_.__r.__words[0] = *(_QWORD *)(v37 + 88);
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = *(_OWORD *)a6;
    v98 = 2;
    sub_22F10E588((uint64_t)&__dst, v16);
    v93.__r_.__value_.__r.__words[0] = v45;
  }
  if (v15 != 24)
  {
    v58 = &v93;
LABEL_92:
    sub_22F119374((uint64_t *)v58, (__int128 *)a1, a2);
    return;
  }
  sub_22E9B7018(&__dst, v12, &v93);
  v46 = std::string::insert(&__dst, 0, "(");
  v47 = v46->__r_.__value_.__r.__words[0];
  v100.__r_.__value_.__r.__words[0] = v46->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v100.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v46->__r_.__value_.__r.__words[1] + 7);
  v48 = HIBYTE(v46->__r_.__value_.__r.__words[2]);
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v49 = v100.__r_.__value_.__r.__words[0];
  *(_QWORD *)a1 = v47;
  *(_QWORD *)(a1 + 8) = v49;
  *(_QWORD *)(a1 + 15) = *(std::string::size_type *)((char *)v100.__r_.__value_.__r.__words + 7);
  *(_BYTE *)(a1 + 23) = v48;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  memset(&v100, 0, sizeof(v100));
  sub_22F119374((uint64_t *)&v93, (__int128 *)&v100, a2);
  v50 = std::string::append(&v100, ")");
  v51 = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = &__dst;
  else
    v52 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
  else
    v53 = __dst.__r_.__value_.__l.__size_;
  std::string::append((std::string *)a1, (const std::string::value_type *)v52, v53);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
  v54 = *(_QWORD *)(a3 + 40);
  if ((v54 & 7) != 0)
    v55 = 0;
  else
    v55 = v54 & 0xFFFFFFFFFFFFFFF8;
  if (v55 && (v9 & 1) == 0)
  {
    v56 = sub_22F1D3238(v55);
    std::string::append((std::string *)a1, v56, v57);
  }
}

std::string *sub_22E9B7018(std::string *this, char a2, _QWORD *a3)
{
  std::string *v5;
  const std::string::value_type *v6;
  const std::string::value_type *v7;

  v5 = this;
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if ((a2 & 1) != 0)
  {
    v6 = "in ";
  }
  else if ((a2 & 2) != 0)
  {
    v6 = "inout ";
  }
  else
  {
    if ((a2 & 4) == 0)
      goto LABEL_8;
    v6 = "out ";
  }
  this = std::string::append(this, v6);
LABEL_8:
  if ((a2 & 8) != 0)
  {
    v7 = "bycopy ";
  }
  else
  {
    if ((a2 & 0x10) == 0)
    {
      if ((a2 & 0x20) == 0)
        goto LABEL_11;
      goto LABEL_16;
    }
    v7 = "byref ";
  }
  this = std::string::append(v5, v7);
  if ((a2 & 0x20) == 0)
  {
LABEL_11:
    if ((a2 & 0x40) == 0)
      return this;
    goto LABEL_17;
  }
LABEL_16:
  this = std::string::append(v5, "oneway ");
  if ((a2 & 0x40) == 0)
    return this;
LABEL_17:
  this = (std::string *)sub_22F114F34(a3);
  if ((unsigned __int16)this >= 0x100u && this <= 2u)
    return std::string::append(v5, off_24FAB76C0[(char)this]);
  return this;
}

void sub_22E9B710C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm *v12;
  const char *v13;
  llvm *v14;

  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v6 = *(uint64_t **)v5;
    v7 = *(unsigned int *)(v5 + 8);
    i = *(uint64_t **)v5;
    if ((_DWORD)v7)
    {
      v9 = 8 * v7;
      for (i = *(uint64_t **)v5; *(_WORD *)(*i + 32) != 307; ++i)
      {
        v9 -= 8;
        if (!v9)
          return;
      }
    }
    if (i != &v6[v7])
    {
      do
      {
        v11 = *v6++;
        v10 = v11;
      }
      while (*(_WORD *)(v11 + 32) != 307);
      if (!*(_DWORD *)(v10 + 36))
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + 1) & 0x40) != 0
          && (v14 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(a1 + 544), "nil", 3uLL), sub_22F2EE534(a1, v14)))
        {
          v13 = ", nil";
        }
        else
        {
          v12 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(a1 + 544), "NULL", 4uLL);
          if (sub_22F2EE534(a1, v12))
            v13 = ", NULL";
          else
            v13 = ", (void*)0";
        }
        sub_22E8A9B38(a3, (uint64_t)v13);
      }
    }
  }
}

uint64_t sub_22E9B721C(uint64_t a1, uint64_t a2, _QWORD *a3, const char *a4, size_t a5, int a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  const char *v26;
  unint64_t v27;
  _DWORD *v28;
  unsigned int v29;
  _BYTE *v30;
  uint64_t v31;
  _BYTE *v32;
  void *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char **v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  _BOOL4 v51;
  const char *v52;
  int v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  size_t v57;
  _BYTE *v58;
  int v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  const char *v67;
  size_t v68;
  _BYTE *v69;
  unint64_t v70;
  unint64_t v71;
  const char *v72;
  size_t v73;
  _BYTE *v74;
  int v75;
  uint64_t v77;
  int v78;
  unint64_t v79;
  __int128 v81;
  void *__p[2];
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  int v90;
  void **v91;
  __int128 __dst;
  uint64_t v93;
  __int128 v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  _DWORD v98[3];
  void *v99;
  uint64_t v100;
  _BYTE v101[64];
  void *v102;
  uint64_t v103;
  _BYTE v104[16];
  const char *v105;
  size_t v106;
  __int128 v107;
  __int128 v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD v111[8];
  _QWORD *v112;
  uint64_t v113;
  _QWORD v114[4];

  v114[2] = *MEMORY[0x24BDAC8D0];
  v13 = a3[11];
  *(_QWORD *)&v81 = ((*(_QWORD *)(*(_QWORD *)(v13 + 2000) + 100) >> 12) & 0x2000000 | sub_22E8FCD8C(v13, a3[10]) & 0xFFFFDFFFFDE9CFFFLL) ^ 0x200002143000;
  *((_QWORD *)&v81 + 1) = v14;
  *(_QWORD *)&v94 = a4;
  *((_QWORD *)&v94 + 1) = a5;
  v96 = 0;
  memset(v98, 0, sizeof(v98));
  v97 = 0;
  v95 = 1;
  v99 = v101;
  v100 = 0x400000000;
  v102 = v104;
  v103 = 0x200000000;
  v15 = *(_DWORD *)a1;
  if (!*(_DWORD *)a1)
  {
    v20 = (unint64_t *)(a1 + 8);
    goto LABEL_9;
  }
  if (v15 == 1)
  {
    v20 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 48);
LABEL_9:
    v79 = *v20;
LABEL_10:
    v21 = sub_22F2F29D8((unsigned int *)a1);
    if (v21)
    {
      if (*(_BYTE *)(v21 + 16) == 26)
        v22 = v21;
      else
        v22 = 0;
    }
    else
    {
      v22 = 0;
    }
    v23 = v79;
    if (*(_DWORD *)a1 == 4)
    {
      v24 = 0;
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
      v26 = "";
      if ((v25 & 7) == 0)
      {
        v27 = v25 & 0xFFFFFFFFFFFFFFF8;
        if (v27)
        {
          v28 = *(_DWORD **)(v27 + 16);
          v29 = *v28;
          v26 = (const char *)(v28 + 4);
          v24 = v29;
        }
      }
      LOWORD(v108) = 261;
      v105 = v26;
      v106 = v24;
      v30 = sub_22F2F27DC(v94, &v105);
      sub_22E8A9B38((uint64_t)&v94, (uint64_t)v30);
      goto LABEL_87;
    }
    if (!v79)
    {
      v31 = v94;
      *(_QWORD *)&__dst = *(_QWORD *)(sub_22F2F29D8((unsigned int *)a1) + 24);
      v85 = 0;
      v84 = 0uLL;
      sub_22F119374((uint64_t *)&__dst, &v84, (uint64_t)&v81);
      LOWORD(v108) = 260;
      v105 = (const char *)&v84;
      v32 = sub_22F2F27DC(v31, &v105);
      sub_22E8A9CC8((uint64_t)&v94, (uint64_t)v32);
      if (SHIBYTE(v85) < 0)
      {
        v33 = (void *)v84;
LABEL_86:
        operator delete(v33);
        goto LABEL_87;
      }
      goto LABEL_87;
    }
    if (!a6 || (v34 = sub_22F31301C((_QWORD *)a3[11], a1, a2)) == 0)
    {
LABEL_84:
      sub_22E9B56BC(a3[11], (uint64_t)&v81, v79, 0, (uint64_t *)&v94);
      __dst = 0uLL;
      v93 = 0;
      LODWORD(v106) = 0;
      BYTE8(v108) = 0;
      v109 = 0;
      LODWORD(v110) = 1;
      *(_QWORD *)&v108 = 0;
      v107 = 0uLL;
      v105 = (const char *)(MEMORY[0x24BED83D8] + 16);
      v111[0] = &__dst;
      llvm::raw_ostream::SetBufferAndMode();
      *(_QWORD *)&v84 = *(_QWORD *)(v79 + 40);
      sub_22EFC5F80(&v84);
      LOWORD(v87) = 260;
      *(_QWORD *)&v84 = v111[0];
      v58 = sub_22F2F27DC(v94, (const char **)&v84);
      sub_22E8A9B38((uint64_t)&v94, (uint64_t)v58);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v105);
      if (SHIBYTE(v93) < 0)
      {
        v33 = (void *)__dst;
        goto LABEL_86;
      }
LABEL_87:
      if (a7)
        v59 = 11;
      else
        v59 = 7;
      sub_22E8A9D90((uint64_t)&v94, v59, "");
      if (*(_DWORD *)a1 == 4)
      {
        v78 = a7;
        v60 = 0;
        v61 = *(_QWORD *)(a1 + 8);
        if (v61 && (*(_DWORD *)(v61 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
        {
          v62 = sub_22E46A3A0(v61);
          if (v62 == v63)
          {
            v60 = 0;
          }
          else
          {
            v64 = v62;
            v65 = v63;
            v60 = 0;
            do
            {
              v66 = *(_QWORD *)(**(_QWORD **)(v64 + 16) & 0xFFFFFFFFFFFFFFF0);
              if ((*(_BYTE *)(v66 + 8) & 0xF) != 0)
                v66 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v64 + 16));
              *(_QWORD *)&__dst = v66 & 0xFFFFFFFFFFFFFFF0;
              v85 = 0;
              v84 = 0uLL;
              sub_22F119374((uint64_t *)&__dst, &v84, (uint64_t)&v81);
              if (v85 >= 0)
                v67 = (const char *)&v84;
              else
                v67 = (const char *)v84;
              if (v85 >= 0)
                v68 = HIBYTE(v85) & 0x7F;
              else
                v68 = *((_QWORD *)&v84 + 1);
              if (v60)
                sub_22E8A9D90((uint64_t)&v94, 15, "");
              LOWORD(v108) = 261;
              v105 = v67;
              v106 = v68;
              v69 = sub_22F2F27DC(v94, &v105);
              if ((_DWORD)a2 == v60)
                sub_22E8A9D2C((uint64_t)&v94, (uint64_t)v69);
              else
                sub_22E8A9C00((uint64_t)&v94, (uint64_t)v69);
              if (SHIBYTE(v85) < 0)
                operator delete((void *)v84);
              v64 += 24;
              ++v60;
            }
            while (v64 != v65);
          }
        }
        v70 = sub_22EFC3B90(v61);
        v23 = v79;
        if (v70)
        {
          v71 = v70;
LABEL_115:
          LOBYTE(__dst) = 0;
          LOBYTE(v93) = 0;
          sub_22E9B67C4((uint64_t)&v84, (uint64_t)&v81, v71, 0, 0, (uint64_t)&__dst);
          if (v85 >= 0)
            v72 = (const char *)&v84;
          else
            v72 = (const char *)v84;
          if (v85 >= 0)
            v73 = HIBYTE(v85) & 0x7F;
          else
            v73 = *((_QWORD *)&v84 + 1);
          if (v60)
            sub_22E8A9D90((uint64_t)&v94, 15, "");
          LOWORD(v108) = 261;
          v105 = v72;
          v106 = v73;
          v74 = sub_22F2F27DC(v94, &v105);
          if (v60 == (_DWORD)a2)
            sub_22E8A9D2C((uint64_t)&v94, (uint64_t)v74);
          else
            sub_22E8A9C00((uint64_t)&v94, (uint64_t)v74);
          if (SHIBYTE(v85) < 0)
            operator delete((void *)v84);
          ++v60;
          while (1)
          {
            v71 = *(_QWORD *)(v71 + 8) & 0xFFFFFFFFFFFFFFF8;
            if (!v71)
              break;
            if ((*(_DWORD *)(v71 + 28) & 0x7Fu) - 49 < 3)
              goto LABEL_115;
          }
        }
        a7 = v78;
      }
      else
      {
        sub_22E9B7CDC(a3[11], (uint64_t)&v81, v79, v22, &v94, a2, 0, 0);
      }
      if (a7)
        v75 = 12;
      else
        v75 = 8;
      sub_22E8A9D90((uint64_t)&v94, v75, "");
      if ((*(_BYTE *)(a3[9] + 104) & 0x20) != 0 && v23)
        sub_22E9B642C((uint64_t *)&v94, v23, (uint64_t)&v81);
      v56 = sub_22F2F28A4((uint64_t)&v94);
      goto LABEL_140;
    }
    if ((*(_BYTE *)(v34 + 32) & 2) != 0)
    {
      v35 = *(const char **)(v34 + 24);
      if (!v35)
      {
        v57 = 0;
LABEL_83:
        LOWORD(v108) = 261;
        v105 = v35;
        v106 = v57;
        *(_QWORD *)&v98[1] = sub_22F2F27DC(v94, &v105);
        goto LABEL_84;
      }
    }
    else
    {
      v35 = (const char *)sub_22F0C8E74(v34, a3[11]);
    }
    v57 = strlen(v35);
    goto LABEL_83;
  }
  v79 = 0;
  if (v15 != 3)
    goto LABEL_10;
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(_QWORD *)(v16 + 56);
  v18 = *(_DWORD *)(v17 + 12);
  v105 = a4;
  v106 = a5;
  v107 = 0u;
  v108 = 0u;
  v109 = v111;
  v110 = 0x400000000;
  v112 = v114;
  v113 = 0x200000000;
  v19 = *(_DWORD *)(v16 + 28) & 0x7F;
  if (v16 && v19 == 28)
    __asm { BR              X10 }
  if (v16 && v19 == 31)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v16 + 48) + 48);
  }
  else
  {
    if (!v16 || v19 != 29)
    {
      switch(v19)
      {
        case 27:
          HIBYTE(v93) = 7;
          strcpy((char *)&__dst, "concept");
          break;
        case 32:
          HIBYTE(v93) = 5;
          strcpy((char *)&__dst, "class");
          break;
        case 30:
          HIBYTE(v93) = 4;
          strcpy((char *)&__dst, "type");
          break;
        default:
          HIBYTE(v93) = 0;
          LOBYTE(__dst) = 0;
          break;
      }
      goto LABEL_37;
    }
    v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 48) + 48) & 0xFFFFFFFFFFFFFFF0);
    if (!v37 || *(unsigned __int8 *)(v37 + 16) - 27 <= 0xFFFFFFFD)
      v37 = sub_22F10CF48(v37);
    v36 = *(_QWORD *)(v37 + 24);
  }
  *(_QWORD *)&v84 = v36;
  v93 = 0;
  __dst = 0uLL;
  sub_22F119374((uint64_t *)&v84, &__dst, (uint64_t)&v81);
LABEL_37:
  v38 = v18 & 0x1FFFFFFF;
  v39 = HIBYTE(v93) & 0x7F;
  if (v93 < 0)
    v39 = *((_QWORD *)&__dst + 1);
  v40 = v94;
  if (v39)
  {
    LOWORD(v87) = 260;
    *(_QWORD *)&v84 = &__dst;
    v41 = sub_22F2F27DC(v94, (const char **)&v84);
    sub_22E8A9CC8((uint64_t)&v94, (uint64_t)v41);
    v40 = v94;
  }
  sub_22EFC683C((uint64_t *)(v16 + 40), __p);
  LOWORD(v87) = 260;
  *(_QWORD *)&v84 = __p;
  v42 = sub_22F2F27DC(v40, (const char **)&v84);
  sub_22E8A9B38((uint64_t)&v94, (uint64_t)v42);
  if (SHIBYTE(v83) < 0)
    operator delete(__p[0]);
  sub_22E8A9D90((uint64_t)&v94, 13, "");
  if ((_DWORD)v38)
  {
    v77 = v16;
    v43 = 0;
    v44 = v17 + 16;
    v45 = 8 * v38;
    v46 = (const char **)&v94;
    v47 = MEMORY[0x24BED83D8] + 16;
    while (1)
    {
      v48 = *(_QWORD *)(v44 + v43);
      v49 = *(_DWORD *)(v48 + 28) & 0x7F;
      if (!v48 || v49 != 38)
      {
        if (v48 && v49 == 59)
        {
          v50 = 3;
          goto LABEL_51;
        }
        v51 = 0;
        if (!v48 || v49 != 32)
          goto LABEL_52;
      }
      v50 = 7;
LABEL_51:
      v51 = *(_QWORD *)(v48 + 72) > v50;
LABEL_52:
      __p[0] = 0;
      __p[1] = 0;
      v83 = 0;
      *(_QWORD *)&v84 = v47;
      DWORD2(v84) = 0;
      v88 = 0;
      v89 = 0;
      v90 = 1;
      v86 = 0;
      v87 = 0;
      v85 = 0;
      v91 = __p;
      llvm::raw_ostream::SetBufferAndMode();
      sub_22F3B8394(v48, (uint64_t)&v84, &v81, 0, 0);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v84);
      if (v51)
        v46 = &v105;
      if (v43)
        sub_22E8A9D90((uint64_t)v46, 15, "");
      v52 = *v46;
      if (8 * a2 == v43)
        v53 = 6;
      else
        v53 = 3;
      LOWORD(v87) = 260;
      *(_QWORD *)&v84 = __p;
      v54 = sub_22F2F27DC((uint64_t)v52, (const char **)&v84);
      sub_22E8A9D90((uint64_t)v46, v53, v54);
      if (SHIBYTE(v83) < 0)
        operator delete(__p[0]);
      v43 += 8;
      if (v45 == v43)
      {
        v16 = v77;
        if (v46 == &v105)
        {
          v55 = sub_22F2F28A4((uint64_t)&v105);
          sub_22E8A9B9C((uint64_t)&v94, v55);
        }
        break;
      }
    }
  }
  sub_22E8A9D90((uint64_t)&v94, 14, "");
  if ((*(_DWORD *)(v16 + 28) & 0x7F) == 0x1D)
    sub_22E8A9C64((uint64_t)&v94, (uint64_t)"()");
  v56 = sub_22F2F28A4((uint64_t)&v94);
  if (SHIBYTE(v93) < 0)
    operator delete((void *)__dst);
  if (v112 != v114)
    free(v112);
  if (v109 != v111)
    free(v109);
LABEL_140:
  if (v102 != v104)
    free(v102);
  if (v99 != v101)
    free(v99);
  return v56;
}

void sub_22E9B7CC0()
{
  JUMPOUT(0x22E9B754CLL);
}

void sub_22E9B7CD0()
{
  JUMPOUT(0x22E9B7564);
}

void sub_22E9B7CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v15;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  const std::string::value_type *v23;
  void *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  _BYTE v32[24];
  std::string __p;
  void *v34[2];
  __int128 v35;
  __int128 v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40;
  uint64_t v41;
  _QWORD v42[4];

  v42[2] = *MEMORY[0x24BDAC8D0];
  if (!(a3 | a4))
  {
    sub_22E8A9D90((uint64_t)a5, 6, "...");
    return;
  }
  v15 = a4;
  if (!a3)
    goto LABEL_8;
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v15 && *(_BYTE *)(v15 + 16) == 26)
    goto LABEL_8;
  v30 = a8;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
  {
    v15 = sub_22F10CF48(v15);
    a8 = v30;
    if (!v15)
    {
      v17 = 0;
      goto LABEL_9;
    }
LABEL_8:
    v17 = (unsigned __int16)(*(_QWORD *)(v15 + 16) >> 38);
    goto LABEL_9;
  }
  v17 = 0;
LABEL_9:
  if (v17 == (_DWORD)a7)
  {
LABEL_41:
    if (!a4 || (*(_BYTE *)(a4 + 23) & 8) == 0)
      return;
    *(_OWORD *)v34 = *a5;
    v35 = 0u;
    v36 = 0u;
    v37 = v39;
    v38 = 0x400000000;
    v40 = v42;
    v41 = 0x200000000;
    if (v17 != (_DWORD)a7)
      sub_22E8A9D90((uint64_t)v34, 15, "");
    if (v17 <= a6)
      sub_22E8A9D2C((uint64_t)v34, (uint64_t)"...");
    else
      sub_22E8A9C00((uint64_t)v34, (uint64_t)"...");
    v29 = sub_22F2F28A4((uint64_t)v34);
    sub_22E8A9B9C((uint64_t)a5, v29);
    if (v40 != v42)
      free(v40);
    v28 = v37;
    if (v37 == v39)
      return;
LABEL_59:
    free(v28);
    return;
  }
  v18 = 1;
  v19 = a7;
  while (1)
  {
    if (a3)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(a3 + 120) + 8 * v19);
      v21 = 1;
      if ((*(_DWORD *)(v20 + 96) & 0x600) != 0x400 && (*(_DWORD *)(v20 + 96) & 0x600) != 0x200)
        v21 = *(_QWORD *)(v20 + 88) > 7uLL;
      if (!(a8 & 1 | !v21))
        break;
    }
    if ((v18 & 1) == 0)
      sub_22E8A9D90((uint64_t)a5, 15, "");
    memset(&__p, 0, sizeof(__p));
    if (a3)
    {
      v22 = *(_QWORD *)(*(_QWORD *)(a3 + 120) + 8 * v19);
      v32[0] = 0;
      v32[16] = 0;
      sub_22E9B67C4((uint64_t)v34, a2, v22, 0, 0, (uint64_t)v32);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v34;
      __p.__r_.__value_.__r.__words[2] = v35;
      if ((*(_DWORD *)(v22 + 96) & 0x600) == 0x400
        || (*(_DWORD *)(v22 + 96) & 0x600) == 0x200
        || *(_QWORD *)(v22 + 88) >= 8uLL)
      {
        sub_22E9D8510(v34, v22, *(_QWORD **)(a1 + 1992), *(_DWORD **)(a1 + 2000));
        v23 = (SBYTE7(v35) & 0x80u) == 0
            ? (const std::string::value_type *)v34
            : (const std::string::value_type *)v34[0];
        v24 = (SBYTE7(v35) & 0x80u) == 0 ? (void *)(BYTE7(v35) & 0x7F) : v34[1];
        std::string::append(&__p, v23, (std::string::size_type)v24);
        if (SBYTE7(v35) < 0)
          operator delete(v34[0]);
      }
    }
    else
    {
      v31 = *(_QWORD *)(a4 + 40 + 8 * v19);
      v34[1] = 0;
      *(_QWORD *)&v35 = 0;
      v34[0] = 0;
      sub_22F119374(&v31, (__int128 *)v34, a2);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v34;
      __p.__r_.__value_.__r.__words[2] = v35;
    }
    v25 = *(_QWORD *)a5;
    LOWORD(v36) = 260;
    v34[0] = &__p;
    v26 = sub_22F2F27DC(v25, (const char **)v34);
    if ((_DWORD)a6 == (_DWORD)v19)
      sub_22E8A9D2C((uint64_t)a5, (uint64_t)v26);
    else
      sub_22E8A9C00((uint64_t)a5, (uint64_t)v26);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v18 = 0;
    a8 = 0;
    v19 = (v19 + 1);
    if (v17 == (_DWORD)v19)
      goto LABEL_41;
  }
  *(_OWORD *)v34 = *a5;
  v35 = 0u;
  v36 = 0u;
  v37 = v39;
  v38 = 0x400000000;
  v40 = v42;
  v41 = 0x200000000;
  if ((v18 & 1) == 0)
    sub_22E8A9D90((uint64_t)v34, 15, "");
  sub_22E9B7CDC(a1, a2, a3, a4, v34, a6, v19, 1);
  v27 = sub_22F2F28A4((uint64_t)v34);
  sub_22E8A9B9C((uint64_t)a5, v27);
  if (v40 != v42)
    free(v40);
  v28 = v37;
  if (v37 != v39)
    goto LABEL_59;
}

uint64_t sub_22E9B8178(uint64_t a1)
{
  int v2;
  uint64_t result;
  BOOL v4;
  unsigned int v5;
  uint64_t v6;

  if (!a1)
    return 1;
  v2 = *(_DWORD *)(a1 + 28) & 0x7F;
  result = 5;
  switch(v2)
  {
    case 0:
      result = 39;
      break;
    case 8:
      result = 603;
      break;
    case 10:
      result = 600;
      break;
    case 13:
    case 42:
    case 74:
      result = 35;
      break;
    case 14:
    case 33:
      return result;
    case 16:
      result = 22;
      break;
    case 17:
      result = 33;
      break;
    case 19:
      result = 12;
      break;
    case 20:
      result = 19;
      break;
    case 21:
      result = 18;
      break;
    case 22:
      result = 11;
      break;
    case 23:
      result = 13;
      break;
    case 24:
      v4 = (*(_BYTE *)(a1 + 58) & 2) == 0;
      v5 = 16;
      goto LABEL_38;
    case 25:
      result = 14;
      break;
    case 27:
      result = 604;
      break;
    case 28:
      result = 31;
      break;
    case 29:
      result = 30;
      break;
    case 30:
      result = 601;
      break;
    case 32:
      result = 29;
      break;
    case 37:
      result = 32;
      break;
    case 38:
    case 39:
      result = 27;
      break;
    case 40:
      result = 36;
      break;
    case 41:
      result = 20;
      break;
    case 44:
      result = 34;
      break;
    case 49:
      result = 6;
      break;
    case 51:
      result = 15;
      break;
    case 52:
      result = 8;
      break;
    case 54:
      result = 21;
      break;
    case 55:
      result = 24;
      break;
    case 56:
      result = 26;
      break;
    case 57:
      result = 25;
      break;
    case 59:
      result = 28;
      break;
    case 60:
      result = 9;
      break;
    case 64:
      result = 10;
      break;
    case 67:
      result = 7;
      break;
    case 78:
      v4 = *(_QWORD *)(a1 + 56) == 0;
      v5 = 37;
LABEL_38:
      if (v4)
        result = v5 + 1;
      else
        result = v5;
      break;
    case 82:
      result = 602;
      break;
    case 83:
      result = 300;
      break;
    default:
      if ((v2 - 38) < 0xFFFFFFFB)
        return 1;
      v6 = (unsigned __int16)*(_DWORD *)(a1 + 72) >> 13;
      if (v6 > 4)
        return 1;
      result = dword_22F469CF8[v6];
      break;
  }
  return result;
}

uint64_t sub_22E9B831C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  unint64_t v10;
  unint64_t v11;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 56;
  *(_QWORD *)(a1 + 32) = a1 + 56;
  *(_QWORD *)(a1 + 40) = 16;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 184) = a2;
  *(_QWORD *)(a1 + 192) = a3;
  *(_QWORD *)(a1 + 200) = a4;
  *(_QWORD *)(a1 + 208) = a6;
  *(_QWORD *)(a1 + 216) = a7;
  *(_BYTE *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = a1 + 240;
  *(_QWORD *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 300) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 248) = a1 + 240;
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  sub_22F2A4F2C(a1 + 312, a5);
  *(_QWORD *)(a1 + 488) = 0;
  if (*(_DWORD *)a5 <= 0x24u && ((1 << *(_DWORD *)a5) & 0x1020000380) != 0)
  {
    v10 = sub_22E90328C(a2);
    if (v10)
    {
      if ((*(_BYTE *)(v10 + 58) & 2) != 0)
      {
        v11 = sub_22EFDC9F0(v10);
        if (v11)
          *(_QWORD *)(a1 + 488) = sub_22F3B4E88(v11);
      }
    }
  }
  return a1;
}

void sub_22E9B83FC(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE v11[56];
  void *v12;
  int v13;
  char v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    v17 = v5;
    v18 = v6;
    sub_22F2A4F2C((uint64_t)v11, a3);
    (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, a1, v11, a4, a5);
    if (v16 != v15)
      free(v16);
    if (v14)
    {
      if (v13)
        free(v12);
    }
  }
}

char **sub_22E9B8490(char **a1)
{
  uint64_t v2;
  llvm *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  void **v22;

  sub_22F319AB0((uint64_t)(a1 + 39));
  v2 = *((unsigned int *)a1 + 70);
  v3 = (llvm *)a1[33];
  if ((_DWORD)v2)
  {
    v4 = (uint64_t *)((char *)v3 + 32 * v2);
    v5 = (uint64_t *)((char *)v3 + 16);
    do
    {
      v6 = *(v5 - 2);
      v7 = *(v5 - 1);
      v8 = v5 - 2;
      if ((v6 != -4096 || v7 != -1) && (v6 != -8192 || v7 != -2))
        v5 = sub_22E9D9024(v5);
      v5 += 4;
    }
    while (v8 + 4 != v4);
    v3 = (llvm *)a1[33];
    v11 = (void *)(32 * *((unsigned int *)a1 + 70));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer(v3, v11);
  if (a1[32])
  {
    v13 = a1[30];
    v12 = (uint64_t *)a1[31];
    v14 = *v12;
    *(_QWORD *)(v14 + 8) = *((_QWORD *)v13 + 1);
    **((_QWORD **)v13 + 1) = v14;
    a1[32] = 0;
    if (v12 != (uint64_t *)(a1 + 30))
    {
      do
      {
        v15 = (uint64_t *)v12[1];
        sub_22E9D8FB0((uint64_t)v12);
        v12 = v15;
      }
      while (v15 != (uint64_t *)(a1 + 30));
    }
  }
  v16 = a1[4];
  if (v16 != a1[3])
    free(v16);
  v17 = *a1;
  if (*a1)
  {
    v18 = a1[1];
    v19 = *a1;
    if (v18 != v17)
    {
      do
      {
        v20 = v18 - 96;
        v22 = (void **)(v18 - 56);
        sub_22E6C60B8(&v22);
        v18 = v20;
      }
      while (v20 != v17);
      v19 = *a1;
    }
    a1[1] = v17;
    operator delete(v19);
  }
  return a1;
}

uint64_t sub_22E9B85C4(uint64_t a1, uint64_t a2, int a3)
{
  return ((uint64_t (*)(void))((char *)sub_22E9B85E0 + 4 * byte_22F469494[a3]))();
}

double sub_22E9B85E0(uint64_t a1)
{
  double result;

  *(_DWORD *)a1 = 18;
  *(_BYTE *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 112;
  *(_QWORD *)(a1 + 88) = a1 + 112;
  *(_QWORD *)&result = 8;
  *(_QWORD *)(a1 + 96) = 8;
  *(_DWORD *)(a1 + 104) = 0;
  return result;
}

BOOL sub_22E9B8728(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int16 v5;
  _BOOL4 v7;

  v3 = *(_DWORD *)(a2 + 28);
  if ((v3 & 0x7F) <= 0x2F && ((1 << (v3 & 0x7F)) & 0xC00000060000) != 0)
    v3 = *(_DWORD *)(sub_22EFBAEA4(a2) + 28);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 72) + 1) & 1) != 0)
    v5 = 2098;
  else
    v5 = 2080;
  v7 = (v3 & 0x7B) != 0x19 && (v3 & 0x7F) - 75 < 0xFFFFFFE5;
  return (*(_DWORD *)&v5 & HIWORD(v3)) != 0 && v7;
}

uint64_t sub_22E9B87B4(int a1)
{
  return ((uint64_t (*)(uint64_t))((char *)nullsub_680 + 4 * byte_22F4694A3[a1]))(1);
}

uint64_t sub_22E9B87DC()
{
  return 0;
}

uint64_t sub_22E9B87E4(uint64_t a1, unint64_t a2)
{
  return (a2 >> 8) & 1;
}

uint64_t sub_22E9B87EC(uint64_t a1, __int16 a2)
{
  if ((a2 & 0x4100) != 0)
    return 1;
  else
    return a2 & 1;
}

BOOL sub_22E9B8804(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v7;
  __int16 v9;

  v3 = *(_DWORD *)(a2 + 28) & 0x7F;
  v4 = v3 > 0x2F;
  v5 = (1 << v3) & 0xC00000060000;
  if (!v4 && v5 != 0)
    a2 = sub_22EFBAEA4(a2);
  v7 = **(_QWORD **)(*(_QWORD *)(a1 + 184) + 72);
  if ((v7 & 0x100) != 0)
  {
    v9 = 2106;
  }
  else
  {
    if ((v7 & 0x4000) != 0 && (*(_DWORD *)(a2 + 28) & 0x7F) == 0x33)
      return 1;
    v9 = 2080;
  }
  return (unsigned __int16)(*(_WORD *)(a2 + 30) & v9) != 0;
}

BOOL sub_22E9B8894(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  __int16 v10;

  v2 = a2;
  v4 = *(_DWORD *)(a2 + 28);
  if ((v4 & 0x7Fu) <= 0x2F && ((1 << (v4 & 0x7F)) & 0xC00000060000) != 0)
  {
    v2 = sub_22EFBAEA4(a2);
    v4 = *(_DWORD *)(v2 + 28);
  }
  v6 = v4 & 0x7F;
  if ((v6 - 33) < 0xA)
    return 0;
  if (v6 != 22)
    goto LABEL_12;
  v7 = *(_QWORD *)(v2 + 120);
  if (!v7)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v2 + 96) + 88), *(_QWORD *)(v2 + 96));
    v7 = *(_QWORD *)(v2 + 120);
  }
  if (v7 < 8 || !*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8))
    return 0;
LABEL_12:
  v8 = **(_QWORD **)(*(_QWORD *)(a1 + 184) + 72);
  if ((v8 & 0x100) != 0)
  {
    v9 = *(_DWORD *)(v2 + 28);
    v10 = 2106;
  }
  else
  {
    v9 = *(_DWORD *)(v2 + 28);
    v10 = 2080;
    if ((v8 & 0x4000) != 0 && (*(_DWORD *)(v2 + 28) & 0x7F) == 0x33)
      return 1;
  }
  return (*(_DWORD *)&v10 & HIWORD(v9)) != 0;
}

void sub_22E9B8974(unint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  __int16 i;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int *v51;
  unsigned int v52;
  _BYTE *v53;
  uint64_t v54;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  const void *v60;
  void **v61;
  unint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t **v66;
  __int128 v67;
  __int128 v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  void *v75[2];
  char v76;
  __int16 v77;
  void **v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  int v85;
  void **v86;
  void *__p[2];
  uint64_t v88;
  __int128 v89;
  _OWORD v90[3];
  void *v91;
  uint64_t v92;
  _BYTE v93[64];
  void *v94;
  uint64_t v95;
  _QWORD v96[4];

  v96[2] = *MEMORY[0x24BDAC8D0];
  v6 = a1[27];
  for (i = *(_WORD *)(v6 + 8); (i & 0x7F) == 1; i = *(_WORD *)(v6 + 8))
  {
    v8 = i & 0x7F;
    v9 = -40;
    if (v8 > 70)
    {
      if (v8 != 83)
      {
        if (v8 == 71)
        {
          v9 = -56;
        }
        else if (v8 != 81)
        {
          goto LABEL_13;
        }
      }
    }
    else
    {
      if (v8 > 0x18)
        goto LABEL_12;
      if (v8 == 16)
        goto LABEL_5;
      if (((1 << v8) & 0x1066) != 0)
        goto LABEL_19;
      if (v8 == 24)
      {
LABEL_5:
        v9 = -48;
      }
      else
      {
LABEL_12:
        if (v8 != 70)
        {
LABEL_13:
          v10 = v8 - 52;
          if ((v8 - 33) >= 5)
            v11 = -48;
          else
            v11 = -64;
          if (v10 >= 6)
            v9 = v11;
          else
            v9 = -72;
          goto LABEL_19;
        }
        v9 = -64;
      }
    }
LABEL_19:
    v12 = *(_QWORD *)(v6 + v9 + 16);
    v6 = v12 & 0xFFFFFFFFFFFFFFF8;
    if ((v12 & 4) != 0)
      v6 = *(_QWORD *)v6;
  }
  v13 = (i & 0x7E) - 58;
  v14 = __CFADD__(v13, 4);
  if (v13 >= 0xFFFFFFFC)
    v15 = v6 - 72;
  else
    v15 = 0;
  v65 = v15;
  if (v14)
  {
    v16 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v6 - 72) + 32))(v6 - 72);
    if ((*(_BYTE *)(v16 + 82) & 0xC) != 0 || sub_22EFD7260(v16))
    {
      v17 = *(_QWORD *)(v6 + 48);
      v18 = *(_QWORD *)(*(_QWORD *)(v6 - 24) & 0xFFFFFFFFFFFFFFF0);
      if (v18)
        v19 = *(_BYTE *)(v18 + 16) == 26;
      else
        v19 = 0;
      if (v19
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
        && (v18 = sub_22F10CF48(v18)) != 0)
      {
        v20 = *(_QWORD *)(v18 + 16);
        if ((v20 & 0x3FFFC000000000) != 0)
        {
          v21 = 8 * (unsigned __int16)(v20 >> 38);
          while (*(_QWORD *)(*(_QWORD *)v17 + 40))
          {
            v17 += 8;
            v21 -= 8;
            if (!v21)
              goto LABEL_41;
          }
          return;
        }
      }
LABEL_41:
      v22 = a1[11];
      v62 = a1;
      *(_QWORD *)&v89 = ((*(_QWORD *)(*(_QWORD *)(v22 + 2000) + 100) >> 12) & 0x2000000 | sub_22E8FCD8C(v22, a1[10]) & 0xFFFFDFFFFDF9CFFFLL) ^ 0x200002043000;
      *((_QWORD *)&v89 + 1) = v23;
      v24 = v65;
      v25 = sub_22EFD7394(v65);
      v66 = v26;
      if ((uint64_t **)v25 == v26)
        return;
      v27 = (uint64_t **)v25;
      v63 = (uint64_t)(a3 + 3);
      v61 = (void **)(MEMORY[0x24BED83D8] + 16);
      v64 = a2;
      do
      {
        v28 = *v27;
        v90[0] = *((_OWORD *)a3 + 12);
        memset(&v90[1], 0, 32);
        v91 = v93;
        v92 = 0x400000000;
        v94 = v96;
        v95 = 0x200000000;
        v29 = (*(uint64_t (**)(uint64_t *))(*v28 + 32))(v28);
        if (v29 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24))
        {
          if (a2)
          {
            v30 = v28[2];
            v31 = (_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF8);
            if ((v30 & 4) != 0)
              v31 = (_QWORD *)*v31;
            if (!v31)
              goto LABEL_49;
            v32 = sub_22EFCC008(a2);
            v19 = v32 == sub_22EFCC008((uint64_t)v31);
            v24 = v65;
            if (!v19)
              goto LABEL_49;
          }
          else
          {
            v33 = v28[2];
            v34 = (_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF8);
            if ((v33 & 4) != 0)
              v34 = (_QWORD *)*v34;
            v35 = sub_22F0ABCB8(v62[11], v6, (unint64_t)v34);
            if (v35)
            {
              v36 = v35;
              __p[0] = 0;
              __p[1] = 0;
              v88 = 0;
              LODWORD(v79) = 0;
              v83 = 0;
              v84 = 0;
              v85 = 1;
              v81 = 0;
              v82 = 0;
              v80 = 0;
              v78 = v61;
              v86 = __p;
              llvm::raw_ostream::SetBufferAndMode();
              sub_22F0AAD88(v36, (llvm::raw_ostream *)&v78, &v89, 0);
              v37 = a3[24];
              v77 = 260;
              v75[0] = v86;
              v38 = sub_22F2F27DC(v37, (const char **)v75);
              sub_22E8A9B38((uint64_t)v90, (uint64_t)v38);
              llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v78);
              if (SHIBYTE(v88) < 0)
                operator delete(__p[0]);
            }
          }
          v39 = a3[24];
          sub_22EFC683C(v28 + 5, v75);
          LOWORD(v82) = 260;
          v78 = v75;
          v40 = sub_22F2F27DC(v39, (const char **)&v78);
          sub_22E8A9AD8((uint64_t)v90, (uint64_t)v40);
          if (v76 < 0)
            operator delete(v75[0]);
          v41 = a3;
          sub_22E8A9D90((uint64_t)v90, 7, "");
          v42 = *(uint64_t **)(v6 + 48);
          v43 = *(_QWORD *)(*(_QWORD *)(v65 + 48) & 0xFFFFFFFFFFFFFFF0);
          if (v43 && *(_BYTE *)(v43 + 16) == 26
            || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v43 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
            && (v43 = sub_22F10CF48(v43)) != 0)
          {
            v44 = *(_QWORD *)(v43 + 16);
            if ((v44 & 0x3FFFC000000000) != 0)
            {
              v45 = 8 * (unsigned __int16)(v44 >> 38);
              v46 = 1;
              do
              {
                v47 = *v42;
                if ((v46 & 1) == 0)
                  sub_22E8A9D90((uint64_t)v90, 15, "");
                v48 = v41[24];
                v49 = *(_QWORD *)(v47 + 40);
                if ((v49 & 7) != 0)
                  v50 = 0;
                else
                  v50 = v49 & 0xFFFFFFFFFFFFFFF8;
                v51 = *(int **)(v50 + 16);
                v52 = *v51;
                LOWORD(v82) = 261;
                v78 = (void **)(v51 + 4);
                v79 = v52;
                v53 = sub_22F2F27DC(v48, (const char **)&v78);
                sub_22E8A9C00((uint64_t)v90, (uint64_t)v53);
                v46 = 0;
                ++v42;
                v45 -= 8;
              }
              while (v45);
            }
          }
          sub_22E8A9D90((uint64_t)v90, 8, "");
          v54 = sub_22F2F28A4((uint64_t)v90);
          *(_QWORD *)&v67 = v28;
          *((_QWORD *)&v67 + 1) = v54;
          v68 = xmmword_22F469F20;
          v69 = 0;
          v71 = 0;
          v72 = 0;
          v70 = 0;
          LOBYTE(v73) = v73 & 0xC0;
          v74 = 0uLL;
          *((_QWORD *)&v73 + 1) = 0;
          a3 = v41;
          v55 = v41[1];
          if (v55 >= v41[2])
          {
            v59 = sub_22E9D8E48(v41, (uint64_t)&v67);
          }
          else
          {
            v56 = v67;
            v57 = v68;
            *(_DWORD *)(v55 + 32) = v69;
            *(_OWORD *)v55 = v56;
            *(_OWORD *)(v55 + 16) = v57;
            *(_QWORD *)(v55 + 40) = 0;
            *(_QWORD *)(v55 + 48) = 0;
            *(_QWORD *)(v55 + 56) = 0;
            sub_22E6C6020((_QWORD *)(v55 + 40), v70, v71, 0x6DB6DB6DB6DB6DB7 * ((v71 - v70) >> 3));
            v58 = v74;
            *(_OWORD *)(v55 + 64) = v73;
            *(_OWORD *)(v55 + 80) = v58;
            v59 = v55 + 96;
          }
          a2 = v64;
          v24 = v65;
          a3[1] = v59;
          v78 = (void **)&v70;
          sub_22E6C60B8(&v78);
          v60 = (const void *)(*(uint64_t (**)(uint64_t *))(*v28 + 32))(v28);
          sub_22E3BA850(v63, v60);
        }
LABEL_49:
        if (v94 != v96)
          free(v94);
        if (v91 != v93)
          free(v91);
        ++v27;
      }
      while (v27 != v66);
    }
  }
}

uint64_t sub_22E9B8FE8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = a4;
  *(_QWORD *)a1 = off_24FAB7520;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)a5;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v7 = a3 - 64;
  if (!a3)
    v7 = 0;
  if ((*(_WORD *)(a3 + 8) & 0x7Fu) - 35 >= 3)
    v8 = 0;
  else
    v8 = v7;
  *(_QWORD *)(a1 + 24) = v8;
  if (a4 <= 0xF)
  {
    v9 = sub_22EBBB18C(*(_QWORD *)(a2 + 184));
    if (v9 >= 0x10)
    {
      v10 = sub_22F10ACF8(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0));
      v5 = v10;
      if (!*(_QWORD *)(a1 + 24))
      {
        v11 = sub_22F10C2A4(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0));
        if (v11)
        {
          if ((*(_DWORD *)(v11 + 28) & 0x7Fu) - 35 >= 3)
            v12 = 0;
          else
            v12 = v11;
        }
        else
        {
          v12 = 0;
        }
        *(_QWORD *)(a1 + 24) = v12;
      }
    }
  }
  *(_QWORD *)(a1 + 32) = v5;
  return a1;
}

void sub_22E9B90C4()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  unint64_t v91;
  char *v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  __int128 *v100;
  uint64_t v101;
  unint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  unint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  const char *v114;
  unint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  unint64_t v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  unint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  unint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  char *v144;
  unint64_t v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  unint64_t v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  unint64_t v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  unint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  __int16 v166;
  uint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  uint64_t *v178;
  unint64_t v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  unint64_t v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  unint64_t v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  unint64_t v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  unint64_t v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;
  unint64_t v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  uint64_t v214;
  unint64_t v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  unint64_t v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  unint64_t v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;
  unint64_t v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  uint64_t v234;
  unint64_t v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  uint64_t v239;
  unint64_t v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  uint64_t v244;
  unint64_t v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  uint64_t v249;
  uint64_t *v250;
  unint64_t v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  uint64_t v255;
  unint64_t v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  uint64_t v260;
  unint64_t v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  uint64_t v265;
  unint64_t v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  uint64_t v270;
  unint64_t v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  _BYTE *v282;
  unint64_t v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  uint64_t v293;
  unint64_t v294;
  llvm *v295;
  const char *v296;
  unint64_t v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  uint64_t v301;
  unint64_t v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  uint64_t v306;
  unint64_t v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  uint64_t v311;
  int v312;
  unint64_t v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  uint64_t v318;
  unint64_t v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  uint64_t v323;
  uint64_t v324;
  __int128 v325;
  __int128 v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  uint64_t v340;
  _QWORD *v341;
  uint64_t v342;
  uint64_t v343;
  BOOL v344;
  int v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  unint64_t v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t *v356;
  _QWORD *v357;
  unint64_t v358;
  unint64_t *v359;
  _QWORD *v360;
  _QWORD *v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  unint64_t v365;
  char *v366;
  unint64_t *v367;
  unint64_t v368;
  _QWORD *v369;
  unint64_t v370;
  unint64_t v371;
  uint64_t v372;
  unint64_t v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  int Key;
  uint64_t v381;
  uint64_t *v382;
  uint64_t *v383;
  uint64_t v384;
  uint64_t v385;
  std::string *v386;
  _BYTE *v387;
  _BYTE *v388;
  uint64_t v389;
  unint64_t v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  __int128 v402;
  __int128 v403;
  int v404;
  _QWORD v405[3];
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  int v410;
  _QWORD v411[3];
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  int v416;
  _QWORD v417[3];
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  int v422;
  _QWORD v423[3];
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  int v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  int v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  int v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  int v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  int v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  int v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  int v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  int v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  int v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  int v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  int v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  int v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  int v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  int v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  int v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  int v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  int v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  int v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  int v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  int v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  int v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  int v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  __int128 v603;
  int v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  int v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  int v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  int v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  __int128 v632;
  __int128 v633;
  __int128 v634;
  __int128 v635;
  int v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  __int128 v643;
  int v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  __int128 v648;
  __int128 v649;
  __int128 v650;
  __int128 v651;
  int v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  __int128 v656;
  __int128 v657;
  __int128 v658;
  __int128 v659;
  int v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  __int128 v664;
  __int128 v665;
  __int128 v666;
  __int128 v667;
  int v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  __int128 v672;
  __int128 v673;
  __int128 v674;
  __int128 v675;
  int v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  __int128 v680;
  __int128 v681;
  __int128 v682;
  __int128 v683;
  int v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  __int128 v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  int v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  __int128 v696;
  __int128 v697;
  __int128 v698;
  __int128 v699;
  int v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  __int128 v707;
  int v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  __int128 v712;
  __int128 v713;
  __int128 v714;
  __int128 v715;
  int v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  __int128 v720;
  __int128 v721;
  __int128 v722;
  __int128 v723;
  int v724;
  _QWORD v725[3];
  char v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  __int128 v730;
  __int128 v731;
  int v732;
  _QWORD v733[3];
  char v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  std::string v738;
  __int128 v739;
  char v740;
  void *v741;
  int v742;
  char v743;
  _BYTE *v744;
  void *v745;
  uint64_t v746;
  int v747;
  _BYTE v748[64];
  __int128 v749;
  __int128 v750;
  int v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  __int128 v755;
  __int128 v756;
  __int128 v757;
  __int128 v758;
  int v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  __int128 v763;
  __int128 v764;
  __int128 v765;
  __int128 v766;
  int v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  __int128 v771;
  __int128 v772;
  __int128 v773;
  __int128 v774;
  int v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  __int128 v779;
  __int128 v780;
  __int128 v781;
  __int128 v782;
  int v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  __int128 v787;
  __int128 v788;
  __int128 v789;
  __int128 v790;
  int v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  char v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  __int128 v799;
  __int128 v800;
  int v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  char v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  __int128 v809;
  __int128 v810;
  int v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  __int128 v815;
  __int128 v816;
  __int128 v817;
  __int128 v818;
  int v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  __int128 v823;
  __int128 v824;
  __int128 v825;
  __int128 v826;
  int v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  __int128 v831;
  __int128 v832;
  __int128 v833;
  __int128 v834;
  int v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  __int128 v839;
  __int128 v840;
  __int128 v841;
  __int128 v842;
  int v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  __int128 v847;
  __int128 v848;
  __int128 v849;
  _QWORD v850[3];
  std::string __p;
  int v852;
  int v853;
  _BYTE v854[24];
  char v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  int v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  char v864;
  uint64_t v865;
  int v866;
  void **v867;
  void *v868[2];
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  void **v873[4];
  __int16 v874;
  std::string v875;
  std::string v876;
  _OWORD v877[3];
  void *v878;
  uint64_t v879;
  _BYTE v880[64];
  void *v881;
  uint64_t v882;
  _QWORD v883[6];

  v0 = MEMORY[0x24BDAC7A8]();
  v3 = (uint64_t *)v2;
  v4 = v1;
  v5 = v0;
  v883[3] = *MEMORY[0x24BDAC8D0];
  v6 = *(_OWORD *)(v2 + 192);
  v877[0] = v6;
  memset(&v877[1], 0, 32);
  v878 = v880;
  v879 = 0x400000000;
  v881 = v883;
  v882 = 0x200000000;
  v8 = v7;
  switch(v0)
  {
    case 0:
      if ((*(_BYTE *)(*(_QWORD *)(v1 + 72) + 1) & 1) == 0)
        goto LABEL_3;
      v47 = *(_QWORD *)(*(_QWORD *)(v2 + 184) + 208);
      if (v47 && (*(_BYTE *)(v47 + 8) & 2) != 0)
      {
        sub_22E8A9AD8((uint64_t)v877, (uint64_t)"namespace");
        sub_22E8A9D90((uint64_t)v877, 19, "");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"identifier");
        sub_22E8A9D90((uint64_t)v877, 19, "");
        sub_22E8A9D90((uint64_t)v877, 11, "");
        sub_22E8A9D90((uint64_t)v877, 20, "");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"declarations");
        sub_22E8A9D90((uint64_t)v877, 20, "");
        sub_22E8A9D90((uint64_t)v877, 12, "");
        *(_QWORD *)&v833 = 0;
        *((_QWORD *)&v833 + 1) = sub_22F2F28A4((uint64_t)v877);
        v834 = xmmword_22F469F30;
        v835 = 0;
        v836 = 0;
        v837 = 0;
        LOBYTE(v839) = v839 & 0xC0;
        v838 = 0;
        *((_QWORD *)&v839 + 1) = 0;
        v840 = 0uLL;
        v48 = v3[1];
        if (v48 >= v3[2])
        {
          v52 = sub_22E9D8E48(v3, (uint64_t)&v833);
        }
        else
        {
          v49 = v833;
          v50 = v834;
          *(_DWORD *)(v48 + 32) = v835;
          *(_OWORD *)v48 = v49;
          *(_OWORD *)(v48 + 16) = v50;
          *(_QWORD *)(v48 + 48) = 0;
          *(_QWORD *)(v48 + 56) = 0;
          *(_QWORD *)(v48 + 40) = 0;
          sub_22E6C6020((_QWORD *)(v48 + 40), v836, v837, 0x6DB6DB6DB6DB6DB7 * ((v837 - v836) >> 3));
          v51 = v840;
          *(_OWORD *)(v48 + 64) = v839;
          *(_OWORD *)(v48 + 80) = v51;
          v52 = v48 + 96;
        }
        v3[1] = v52;
        v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v836;
        sub_22E6C60B8((void ***)&v738);
      }
      sub_22E8A9AD8((uint64_t)v877, (uint64_t)"namespace");
      sub_22E8A9D90((uint64_t)v877, 19, "");
      sub_22E8A9C00((uint64_t)v877, (uint64_t)"name");
      sub_22E8A9D90((uint64_t)v877, 18, "");
      sub_22E8A9C00((uint64_t)v877, (uint64_t)"namespace");
      sub_22E8A9D90((uint64_t)v877, 17, "");
      v71 = sub_22F2F28A4((uint64_t)v877);
      *(_QWORD *)&v825 = 0;
      *((_QWORD *)&v825 + 1) = v71;
      v826 = xmmword_22F469F30;
      v827 = 0;
      v828 = 0;
      v829 = 0;
      LOBYTE(v831) = v831 & 0xC0;
      v830 = 0;
      *((_QWORD *)&v831 + 1) = 0;
      v832 = 0uLL;
      v72 = v3[1];
      if (v72 >= v3[2])
      {
        v76 = sub_22E9D8E48(v3, (uint64_t)&v825);
      }
      else
      {
        v73 = v825;
        v74 = v826;
        *(_DWORD *)(v72 + 32) = v827;
        *(_OWORD *)v72 = v73;
        *(_OWORD *)(v72 + 16) = v74;
        *(_QWORD *)(v72 + 48) = 0;
        *(_QWORD *)(v72 + 56) = 0;
        *(_QWORD *)(v72 + 40) = 0;
        sub_22E6C6020((_QWORD *)(v72 + 40), v828, v829, 0x6DB6DB6DB6DB6DB7 * ((v829 - v828) >> 3));
        v75 = v832;
        *(_OWORD *)(v72 + 64) = v831;
        *(_OWORD *)(v72 + 80) = v75;
        v76 = v72 + 96;
      }
      v3[1] = v76;
      v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v828;
      sub_22E6C60B8((void ***)&v738);
      sub_22E8A9AD8((uint64_t)v877, (uint64_t)"using namespace");
      sub_22E8A9D90((uint64_t)v877, 19, "");
      sub_22E8A9C00((uint64_t)v877, (uint64_t)"identifier");
      sub_22E8A9D90((uint64_t)v877, 17, "");
      v77 = sub_22F2F28A4((uint64_t)v877);
      *(_QWORD *)&v817 = 0;
      *((_QWORD *)&v817 + 1) = v77;
      v818 = xmmword_22F469F30;
      v819 = 0;
      v820 = 0;
      v821 = 0;
      LOBYTE(v823) = v823 & 0xC0;
      v822 = 0;
      *((_QWORD *)&v823 + 1) = 0;
      v824 = 0uLL;
      v78 = v3[1];
      if (v78 >= v3[2])
      {
        v82 = sub_22E9D8E48(v3, (uint64_t)&v817);
      }
      else
      {
        v79 = v817;
        v80 = v818;
        *(_DWORD *)(v78 + 32) = v819;
        *(_OWORD *)v78 = v79;
        *(_OWORD *)(v78 + 16) = v80;
        *(_QWORD *)(v78 + 48) = 0;
        *(_QWORD *)(v78 + 56) = 0;
        *(_QWORD *)(v78 + 40) = 0;
        sub_22E6C6020((_QWORD *)(v78 + 40), v820, v821, 0x6DB6DB6DB6DB6DB7 * ((v821 - v820) >> 3));
        v81 = v824;
        *(_OWORD *)(v78 + 64) = v823;
        *(_OWORD *)(v78 + 80) = v81;
        v82 = v78 + 96;
      }
      v3[1] = v82;
      v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v820;
      sub_22E6C60B8((void ***)&v738);
      sub_22E8A9AD8((uint64_t)v877, (uint64_t)"asm");
      sub_22E8A9D90((uint64_t)v877, 7, "");
      sub_22E8A9C00((uint64_t)v877, (uint64_t)"string-literal");
      sub_22E8A9D90((uint64_t)v877, 8, "");
      v83 = sub_22F2F28A4((uint64_t)v877);
      *(_QWORD *)&v809 = 0;
      *((_QWORD *)&v809 + 1) = v83;
      v810 = xmmword_22F469F30;
      v811 = 0;
      v812 = 0;
      v813 = 0;
      LOBYTE(v815) = v815 & 0xC0;
      v814 = 0;
      *((_QWORD *)&v815 + 1) = 0;
      v816 = 0uLL;
      v84 = v3[1];
      if (v84 >= v3[2])
      {
        v88 = sub_22E9D8E48(v3, (uint64_t)&v809);
      }
      else
      {
        v85 = v809;
        v86 = v810;
        *(_DWORD *)(v84 + 32) = v811;
        *(_OWORD *)v84 = v85;
        *(_OWORD *)(v84 + 16) = v86;
        *(_QWORD *)(v84 + 48) = 0;
        *(_QWORD *)(v84 + 56) = 0;
        *(_QWORD *)(v84 + 40) = 0;
        sub_22E6C6020((_QWORD *)(v84 + 40), v812, v813, 0x6DB6DB6DB6DB6DB7 * ((v813 - v812) >> 3));
        v87 = v816;
        *(_OWORD *)(v84 + 64) = v815;
        *(_OWORD *)(v84 + 80) = v87;
        v88 = v84 + 96;
      }
      v3[1] = v88;
      v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v812;
      sub_22E6C60B8((void ***)&v738);
      v89 = *(_QWORD *)(v3[23] + 208);
      if (v89 && (*(_BYTE *)(v89 + 8) & 2) != 0)
      {
        sub_22E8A9AD8((uint64_t)v877, (uint64_t)"template");
        sub_22E8A9D90((uint64_t)v877, 19, "");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"declaration");
        v324 = sub_22F2F28A4((uint64_t)v877);
        *(_QWORD *)&v799 = 0;
        *((_QWORD *)&v799 + 1) = v324;
        v800 = xmmword_22F469F30;
        v801 = 0;
        v90 = &v802;
        v802 = 0;
        v803 = 0;
        v805 &= 0xC0u;
        v804 = 0;
        v806 = 0;
        v808 = 0;
        v807 = 0;
        v91 = v3[1];
        if (v91 < v3[2])
        {
          v92 = &v805;
          v325 = v799;
          v326 = v800;
          *(_DWORD *)(v91 + 32) = v801;
          *(_OWORD *)v91 = v325;
          *(_OWORD *)(v91 + 16) = v326;
          *(_QWORD *)(v91 + 48) = 0;
          *(_QWORD *)(v91 + 56) = 0;
          *(_QWORD *)(v91 + 40) = 0;
          v95 = (_QWORD *)(v91 + 40);
          v96 = v802;
          v97 = v803;
          goto LABEL_87;
        }
        v100 = &v799;
      }
      else
      {
        *(_QWORD *)&v789 = 0;
        *((_QWORD *)&v789 + 1) = "template";
        v790 = xmmword_22F469F40;
        v791 = 0;
        v90 = &v792;
        v792 = 0;
        v793 = 0;
        v795 &= 0xC0u;
        v794 = 0;
        v796 = 0;
        v798 = 0;
        v797 = 0;
        v91 = v3[1];
        if (v91 < v3[2])
        {
          v92 = &v795;
          v93 = v789;
          v94 = v790;
          *(_DWORD *)(v91 + 32) = v791;
          *(_OWORD *)v91 = v93;
          *(_OWORD *)(v91 + 16) = v94;
          *(_QWORD *)(v91 + 48) = 0;
          *(_QWORD *)(v91 + 56) = 0;
          *(_QWORD *)(v91 + 40) = 0;
          v95 = (_QWORD *)(v91 + 40);
          v96 = v792;
          v97 = v793;
LABEL_87:
          sub_22E6C6020(v95, v96, v97, 0x6DB6DB6DB6DB6DB7 * ((v97 - v96) >> 3));
          v98 = *((_OWORD *)v92 + 1);
          *(_OWORD *)(v91 + 64) = *(_OWORD *)v92;
          *(_OWORD *)(v91 + 80) = v98;
          v99 = v91 + 96;
LABEL_90:
          v3[1] = v99;
          v738.__r_.__value_.__r.__words[0] = (std::string::size_type)v90;
          sub_22E6C60B8((void ***)&v738);
LABEL_3:
          if ((*(_BYTE *)(*(_QWORD *)(v4 + 72) + 1) & 0x40) != 0)
            sub_22E9CB10C((uint64_t)v3, 1);
          sub_22E9D92E0((uint64_t)v3);
          goto LABEL_6;
        }
        v100 = &v789;
      }
      v99 = sub_22E9D8E48(v3, (uint64_t)v100);
      goto LABEL_90;
    case 1:
LABEL_6:
      if ((*(_BYTE *)(*(_QWORD *)(v4 + 72) + 1) & 1) == 0)
        goto LABEL_7;
      sub_22E8A9AD8((uint64_t)v877, (uint64_t)"using");
      sub_22E8A9D90((uint64_t)v877, 19, "");
      sub_22E8A9C00((uint64_t)v877, (uint64_t)"qualifier");
      sub_22E8A9B38((uint64_t)v877, (uint64_t)"::");
      sub_22E8A9C00((uint64_t)v877, (uint64_t)"name");
      sub_22E8A9D90((uint64_t)v877, 17, "");
      v36 = sub_22F2F28A4((uint64_t)v877);
      *(_QWORD *)&v781 = 0;
      *((_QWORD *)&v781 + 1) = v36;
      v782 = xmmword_22F469F30;
      v783 = 0;
      v784 = 0;
      v785 = 0;
      LOBYTE(v787) = v787 & 0xC0;
      v786 = 0;
      *((_QWORD *)&v787 + 1) = 0;
      v788 = 0uLL;
      v37 = v3[1];
      if (v37 >= v3[2])
      {
        v41 = sub_22E9D8E48(v3, (uint64_t)&v781);
      }
      else
      {
        v38 = v781;
        v39 = v782;
        *(_DWORD *)(v37 + 32) = v783;
        *(_OWORD *)v37 = v38;
        *(_OWORD *)(v37 + 16) = v39;
        *(_QWORD *)(v37 + 48) = 0;
        *(_QWORD *)(v37 + 56) = 0;
        *(_QWORD *)(v37 + 40) = 0;
        sub_22E6C6020((_QWORD *)(v37 + 40), v784, v785, 0x6DB6DB6DB6DB6DB7 * ((v785 - v784) >> 3));
        v40 = v788;
        *(_OWORD *)(v37 + 64) = v787;
        *(_OWORD *)(v37 + 80) = v40;
        v41 = v37 + 96;
      }
      v3[1] = v41;
      v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v784;
      sub_22E6C60B8((void ***)&v738);
      if ((*(_BYTE *)(*(_QWORD *)(v4 + 72) + 1) & 2) != 0)
        sub_22E9D9494((uint64_t)v877, v3);
      if (sub_22EFC7ADC(*(_QWORD *)(v4 + 216)))
      {
        sub_22E8A9AD8((uint64_t)v877, (uint64_t)"using typename");
        sub_22E8A9D90((uint64_t)v877, 19, "");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"qualifier");
        sub_22E8A9B38((uint64_t)v877, (uint64_t)"::");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"name");
        sub_22E8A9D90((uint64_t)v877, 17, "");
        v101 = sub_22F2F28A4((uint64_t)v877);
        *(_QWORD *)&v773 = 0;
        *((_QWORD *)&v773 + 1) = v101;
        v774 = xmmword_22F469F30;
        v775 = 0;
        v776 = 0;
        v777 = 0;
        LOBYTE(v779) = v779 & 0xC0;
        v778 = 0;
        *((_QWORD *)&v779 + 1) = 0;
        v780 = 0uLL;
        v102 = v3[1];
        if (v102 >= v3[2])
        {
          v106 = sub_22E9D8E48(v3, (uint64_t)&v773);
        }
        else
        {
          v103 = v773;
          v104 = v774;
          *(_DWORD *)(v102 + 32) = v775;
          *(_OWORD *)v102 = v103;
          *(_OWORD *)(v102 + 16) = v104;
          *(_QWORD *)(v102 + 48) = 0;
          *(_QWORD *)(v102 + 56) = 0;
          *(_QWORD *)(v102 + 40) = 0;
          sub_22E6C6020((_QWORD *)(v102 + 40), v776, v777, 0x6DB6DB6DB6DB6DB7 * ((v777 - v776) >> 3));
          v105 = v780;
          *(_OWORD *)(v102 + 64) = v779;
          *(_OWORD *)(v102 + 80) = v105;
          v106 = v102 + 96;
        }
        v3[1] = v106;
        v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v776;
        sub_22E6C60B8((void ***)&v738);
      }
      sub_22E9D95B8((uint64_t)v877, v3, **(_QWORD **)(v4 + 72));
      if (v5 != 1)
        goto LABEL_7;
      sub_22E9D92E0((uint64_t)v3);
      v53 = *(_DWORD *)(v8 + 8);
      sub_22E8A9AD8((uint64_t)v877, (uint64_t)"public");
      if ((v53 & 0x800000) != 0)
      {
        v318 = sub_22F2F28A4((uint64_t)v877);
        *(_QWORD *)&v765 = 0;
        *((_QWORD *)&v765 + 1) = v318;
        v766 = xmmword_22F469F30;
        v767 = 0;
        v768 = 0;
        v769 = 0;
        LOBYTE(v771) = v771 & 0xC0;
        v770 = 0;
        *((_QWORD *)&v771 + 1) = 0;
        v772 = 0uLL;
        v319 = v3[1];
        if (v319 >= v3[2])
        {
          v323 = sub_22E9D8E48(v3, (uint64_t)&v765);
        }
        else
        {
          v320 = v765;
          v321 = v766;
          *(_DWORD *)(v319 + 32) = v767;
          *(_OWORD *)v319 = v320;
          *(_OWORD *)(v319 + 16) = v321;
          *(_QWORD *)(v319 + 48) = 0;
          *(_QWORD *)(v319 + 56) = 0;
          *(_QWORD *)(v319 + 40) = 0;
          sub_22E6C6020((_QWORD *)(v319 + 40), v768, v769, 0x6DB6DB6DB6DB6DB7 * ((v769 - v768) >> 3));
          v322 = v772;
          *(_OWORD *)(v319 + 64) = v771;
          *(_OWORD *)(v319 + 80) = v322;
          v323 = v319 + 96;
        }
        v3[1] = v323;
        v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v768;
        sub_22E6C60B8((void ***)&v738);
        sub_22E8A9AD8((uint64_t)v877, (uint64_t)"protected");
      }
      else
      {
        v54 = *(_QWORD *)(v3[23] + 208);
        if (v54 && (*(_BYTE *)(v54 + 8) & 2) != 0)
          sub_22E8A9D90((uint64_t)v877, 16, "");
        v55 = sub_22F2F28A4((uint64_t)v877);
        *(_QWORD *)&v765 = 0;
        *((_QWORD *)&v765 + 1) = v55;
        v766 = xmmword_22F469F30;
        v767 = 0;
        v768 = 0;
        v769 = 0;
        LOBYTE(v771) = v771 & 0xC0;
        v770 = 0;
        *((_QWORD *)&v771 + 1) = 0;
        v772 = 0uLL;
        v56 = v3[1];
        if (v56 >= v3[2])
        {
          v60 = sub_22E9D8E48(v3, (uint64_t)&v765);
        }
        else
        {
          v57 = v765;
          v58 = v766;
          *(_DWORD *)(v56 + 32) = v767;
          *(_OWORD *)v56 = v57;
          *(_OWORD *)(v56 + 16) = v58;
          *(_QWORD *)(v56 + 48) = 0;
          *(_QWORD *)(v56 + 56) = 0;
          *(_QWORD *)(v56 + 40) = 0;
          sub_22E6C6020((_QWORD *)(v56 + 40), v768, v769, 0x6DB6DB6DB6DB6DB7 * ((v769 - v768) >> 3));
          v59 = v772;
          *(_OWORD *)(v56 + 64) = v771;
          *(_OWORD *)(v56 + 80) = v59;
          v60 = v56 + 96;
        }
        v3[1] = v60;
        v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v768;
        sub_22E6C60B8((void ***)&v738);
        sub_22E8A9AD8((uint64_t)v877, (uint64_t)"protected");
        v327 = *(_QWORD *)(v3[23] + 208);
        if (v327 && (*(_BYTE *)(v327 + 8) & 2) != 0)
          sub_22E8A9D90((uint64_t)v877, 16, "");
      }
      v328 = sub_22F2F28A4((uint64_t)v877);
      *(_QWORD *)&v757 = 0;
      *((_QWORD *)&v757 + 1) = v328;
      v758 = xmmword_22F469F30;
      v759 = 0;
      v760 = 0;
      v761 = 0;
      LOBYTE(v763) = v763 & 0xC0;
      v762 = 0;
      *((_QWORD *)&v763 + 1) = 0;
      v764 = 0uLL;
      v329 = v3[1];
      if (v329 >= v3[2])
      {
        v333 = sub_22E9D8E48(v3, (uint64_t)&v757);
      }
      else
      {
        v330 = v757;
        v331 = v758;
        *(_DWORD *)(v329 + 32) = v759;
        *(_OWORD *)v329 = v330;
        *(_OWORD *)(v329 + 16) = v331;
        *(_QWORD *)(v329 + 48) = 0;
        *(_QWORD *)(v329 + 56) = 0;
        *(_QWORD *)(v329 + 40) = 0;
        sub_22E6C6020((_QWORD *)(v329 + 40), v760, v761, 0x6DB6DB6DB6DB6DB7 * ((v761 - v760) >> 3));
        v332 = v764;
        *(_OWORD *)(v329 + 64) = v763;
        *(_OWORD *)(v329 + 80) = v332;
        v333 = v329 + 96;
      }
      v3[1] = v333;
      v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v760;
      sub_22E6C60B8((void ***)&v738);
      sub_22E8A9AD8((uint64_t)v877, (uint64_t)"private");
      if ((v53 & 0x800000) == 0)
      {
        v334 = *(_QWORD *)(v3[23] + 208);
        if (v334)
        {
          if ((*(_BYTE *)(v334 + 8) & 2) != 0)
            sub_22E8A9D90((uint64_t)v877, 16, "");
        }
      }
      v335 = sub_22F2F28A4((uint64_t)v877);
      *(_QWORD *)&v749 = 0;
      *((_QWORD *)&v749 + 1) = v335;
      v750 = xmmword_22F469F30;
      v751 = 0;
      v752 = 0;
      v753 = 0;
      LOBYTE(v755) = v755 & 0xC0;
      v754 = 0;
      *((_QWORD *)&v755 + 1) = 0;
      v756 = 0uLL;
      v336 = v3[1];
      if (v336 >= v3[2])
      {
        v340 = sub_22E9D8E48(v3, (uint64_t)&v749);
      }
      else
      {
        v337 = v749;
        v338 = v750;
        *(_DWORD *)(v336 + 32) = v751;
        *(_OWORD *)v336 = v337;
        *(_OWORD *)(v336 + 16) = v338;
        *(_QWORD *)(v336 + 48) = 0;
        *(_QWORD *)(v336 + 56) = 0;
        *(_QWORD *)(v336 + 40) = 0;
        sub_22E6C6020((_QWORD *)(v336 + 40), v752, v753, 0x6DB6DB6DB6DB6DB7 * ((v753 - v752) >> 3));
        v339 = v756;
        *(_OWORD *)(v336 + 64) = v755;
        *(_OWORD *)(v336 + 80) = v339;
        v340 = v336 + 96;
      }
      v3[1] = v340;
      v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v752;
      sub_22E6C60B8((void ***)&v738);
      LODWORD(v738.__r_.__value_.__l.__data_) = 6;
      v738.__r_.__value_.__s.__data_[4] = 0;
      v743 = 0;
      *(_OWORD *)&v738.__r_.__value_.__r.__words[1] = 0u;
      v739 = 0u;
      v740 = 0;
      v744 = v748;
      v745 = v748;
      v746 = 8;
      v747 = 0;
      v341 = (_QWORD *)v3[23];
      v342 = v341[27];
      v343 = v342 - 64;
      if (v342)
        v344 = (*(_WORD *)(v342 + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD;
      else
        v344 = 0;
      v345 = !v344;
      if (v345)
        v346 = 0;
      else
        v346 = v343;
      if (v345 == 1)
        goto LABEL_321;
      v396 = v346;
      v871 = 0;
      v870 = 0;
      v872 = 0x2000000000;
      v347 = sub_22E488FF8(v343);
      if (v347 != v348)
      {
        v351 = v347;
        v352 = v348;
        do
        {
          v353 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v351 + 32))(v351);
          if ((*(_BYTE *)(v353 + 82) & 0xC) != 0 || sub_22EFD7260(v353))
          {
            v354 = *(_QWORD *)(v351 + 40) & 0xFFFFFFFFFFFFFFF8;
            if ((*(_QWORD *)(v351 + 40) & 7) == 0 && v354 != 0)
            {
              v356 = sub_22F319BA4((llvm::StringMapImpl *)&v870, (const void *)(*(_QWORD *)(v354 + 16) + 16), **(unsigned int **)(v354 + 16));
              v357 = (_QWORD *)*v356;
              v359 = *(unint64_t **)(*v356 + 16);
              v358 = *(_QWORD *)(*v356 + 24);
              if ((unint64_t)v359 >= v358)
              {
                v361 = (_QWORD *)v357[1];
                v362 = v359 - v361;
                v363 = v362 + 1;
                if ((unint64_t)(v362 + 1) >> 61)
                  abort();
                v364 = v358 - (_QWORD)v361;
                if (v364 >> 2 > v363)
                  v363 = v364 >> 2;
                if ((unint64_t)v364 >= 0x7FFFFFFFFFFFFFF8)
                  v365 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v365 = v363;
                if (v365)
                {
                  if (v365 >> 61)
                    sub_22E3B3F8C();
                  v401 = v365;
                  v366 = (char *)operator new(8 * v365);
                  v365 = v401;
                  v362 = v359 - v361;
                }
                else
                {
                  v366 = 0;
                }
                v367 = (unint64_t *)&v366[8 * v362];
                *v367 = v351;
                v360 = v367 + 1;
                if (v359 != v361)
                {
                  do
                  {
                    v368 = *--v359;
                    *--v367 = v368;
                  }
                  while (v359 != v361);
                  v359 = (unint64_t *)v357[1];
                }
                v357[1] = v367;
                v357[2] = v360;
                v357[3] = &v366[8 * v365];
                if (v359)
                {
                  v369 = v360;
                  operator delete(v359);
                  v360 = v369;
                }
              }
              else
              {
                *v359 = v351;
                v360 = v359 + 1;
              }
              v357[2] = v360;
            }
          }
          do
            v351 = *(_QWORD *)(v351 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v351 && (*(_DWORD *)(v351 + 28) & 0x7Eu) - 54 > 3);
        }
        while (v351 != v352);
      }
      v349 = sub_22E46A3A0(v396);
      v397 = v350;
      if (v349 == v350)
        goto LABEL_327;
      v370 = v349;
      v395 = MEMORY[0x24BED83D8] + 16;
      do
      {
        v371 = *(_QWORD *)(**(_QWORD **)(v370 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v371 + 8) & 0xF) != 0)
          v371 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v370 + 16));
        v372 = sub_22F10C2A4(*(_QWORD *)(v371 & 0xFFFFFFFFFFFFFFF0));
        if (v372)
        {
          if ((*(_DWORD *)(v372 + 28) & 0x7Fu) - 35 <= 2)
          {
            v373 = sub_22E488FF8(v372);
            if (v373 != v374)
            {
              v375 = v373;
              v376 = v374;
              do
              {
                v377 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v375 + 32))(v375);
                if (((*(_BYTE *)(v377 + 82) & 0xC) != 0 || sub_22EFD7260(v377))
                  && (*(_QWORD *)(v375 + 40) & 7) == 0
                  && (*(_QWORD *)(v375 + 40) & 0xFFFFFFFFFFFFFFF8) != 0)
                {
                  Key = llvm::StringMapImpl::FindKey();
                  if (Key != -1 && Key != (unint64_t)v871)
                  {
                    v381 = *(_QWORD *)(v870 + 8 * Key);
                    v383 = *(uint64_t **)(v381 + 8);
                    v382 = *(uint64_t **)(v381 + 16);
                    while (v383 != v382)
                    {
                      if ((sub_22ECF9D50(v341, *v383, v375, 0, 1, 1) & 1) == 0)
                        goto LABEL_375;
                      ++v383;
                    }
                  }
                  v868[1] = 0;
                  v868[0] = 0;
                  v869 = 0;
                  v860 = 0;
                  v864 = 0;
                  v865 = 0;
                  v866 = 1;
                  v862 = 0;
                  v863 = 0;
                  v861 = 0;
                  v859 = v395;
                  v867 = v868;
                  llvm::raw_ostream::SetBufferAndMode();
                  __p.__r_.__value_.__r.__words[0] = v375;
                  __p.__r_.__value_.__r.__words[2] = 0;
                  v852 = 0;
                  v853 = 0;
                  memset(v854, 0, sizeof(v854));
                  memset(v850, 0, sizeof(v850));
                  v855 &= 0xC0u;
                  v857 = 0;
                  v858 = 0;
                  v856 = 0;
                  sub_22E8AB5B4((uint64_t)&__p, 1);
                  v873[0] = (void **)v850;
                  sub_22E6C60B8(v873);
                  v384 = v341[11];
                  *(_QWORD *)&v849 = ((*(_QWORD *)(*(_QWORD *)(v384 + 2000) + 100) >> 12) & 0x2000000 | sub_22E8FCD8C(v384, v341[10]) & 0xFFFFDFFFFDF9CFFFLL) ^ 0x200002043000;
                  *((_QWORD *)&v849 + 1) = v385;
                  v386 = (std::string *)sub_22E9B47E8((uint64_t)&__p, v341[10], (_QWORD *)v341[11], (uint64_t)v877, 0, (uint64_t)&v738, &v849);
                  memset(&v876, 0, sizeof(v876));
                  memset(&v875, 0, sizeof(v875));
                  sub_22E9B561C(v386, &v876, &v875);
                  std::string::append(&v875, " override");
                  v874 = 260;
                  v873[0] = (void **)&v876;
                  v387 = sub_22F2F27DC(*(uint64_t *)&v877[0], (const char **)v873);
                  sub_22E8A9B38((uint64_t)v877, (uint64_t)v387);
                  sub_22E8A9D90((uint64_t)v877, 19, "");
                  v874 = 260;
                  v873[0] = (void **)&v875;
                  v388 = sub_22F2F27DC(*(uint64_t *)&v877[0], (const char **)v873);
                  sub_22E8A9AD8((uint64_t)v877, (uint64_t)v388);
                  v389 = sub_22F2F28A4((uint64_t)v877);
                  if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v875.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v876.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v876.__r_.__value_.__l.__data_);
                  *(_QWORD *)&v841 = v375;
                  *((_QWORD *)&v841 + 1) = v389;
                  *(_QWORD *)&v842 = 40;
                  DWORD2(v842) = 3;
                  v843 = 0;
                  v845 = 0;
                  v846 = 0;
                  v844 = 0;
                  LOBYTE(v847) = v847 & 0xC0;
                  v848 = 0uLL;
                  *((_QWORD *)&v847 + 1) = 0;
                  sub_22E8AB5B4((uint64_t)&v841, 1);
                  v390 = v3[1];
                  if (v390 >= v3[2])
                  {
                    v394 = sub_22E9D8E48(v3, (uint64_t)&v841);
                  }
                  else
                  {
                    v391 = v841;
                    v392 = v842;
                    *(_DWORD *)(v390 + 32) = v843;
                    *(_OWORD *)v390 = v391;
                    *(_OWORD *)(v390 + 16) = v392;
                    *(_QWORD *)(v390 + 40) = 0;
                    *(_QWORD *)(v390 + 48) = 0;
                    *(_QWORD *)(v390 + 56) = 0;
                    sub_22E6C6020((_QWORD *)(v390 + 40), v844, v845, 0x6DB6DB6DB6DB6DB7 * ((v845 - v844) >> 3));
                    v393 = v848;
                    *(_OWORD *)(v390 + 64) = v847;
                    *(_OWORD *)(v390 + 80) = v393;
                    v394 = v390 + 96;
                  }
                  v3[1] = v394;
                  v873[0] = (void **)&v844;
                  sub_22E6C60B8(v873);
                  v873[0] = (void **)v854;
                  sub_22E6C60B8(v873);
                  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v859);
                  if (SHIBYTE(v869) < 0)
                    operator delete(v868[0]);
                }
                do
LABEL_375:
                  v375 = *(_QWORD *)(v375 + 8) & 0xFFFFFFFFFFFFFFF8;
                while (v375 && (*(_DWORD *)(v375 + 28) & 0x7Eu) - 54 > 3);
              }
              while (v375 != v376);
            }
          }
        }
        v370 += 24;
      }
      while (v370 != v397);
LABEL_327:
      sub_22F319C94((uint64_t)&v870);
      if (v745 != v744)
        free(v745);
LABEL_321:
      if (v743 && v742)
        free(v741);
LABEL_7:
      if ((*(_BYTE *)(*(_QWORD *)(v4 + 72) + 1) & 1) != 0
        && (v9 = *(_QWORD *)(v3[23] + 208)) != 0
        && (*(_BYTE *)(v9 + 8) & 2) != 0)
      {
        sub_22E8A9AD8((uint64_t)v877, (uint64_t)"template");
        sub_22E8A9D90((uint64_t)v877, 13, "");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"parameters");
        sub_22E8A9D90((uint64_t)v877, 14, "");
        *(_QWORD *)&v730 = 0;
        *((_QWORD *)&v730 + 1) = sub_22F2F28A4((uint64_t)v877);
        v731 = xmmword_22F469F30;
        v732 = 0;
        v10 = v733;
        memset(v733, 0, sizeof(v733));
        v734 &= 0xC0u;
        v735 = 0;
        v737 = 0;
        v736 = 0;
        v11 = v3[1];
        if (v11 < v3[2])
        {
          v12 = &v734;
          v13 = v730;
          v14 = v731;
          v15 = v732;
          goto LABEL_12;
        }
        v18 = &v730;
      }
      else
      {
        *(_QWORD *)&v722 = 0;
        *((_QWORD *)&v722 + 1) = "template";
        v723 = xmmword_22F469F40;
        v724 = 0;
        v10 = v725;
        memset(v725, 0, sizeof(v725));
        v726 &= 0xC0u;
        v727 = 0;
        v729 = 0;
        v728 = 0;
        v11 = v3[1];
        if (v11 < v3[2])
        {
          v12 = &v726;
          v13 = v722;
          v14 = v723;
          v15 = v724;
LABEL_12:
          *(_DWORD *)(v11 + 32) = v15;
          *(_OWORD *)v11 = v13;
          *(_OWORD *)(v11 + 16) = v14;
          *(_QWORD *)(v11 + 48) = 0;
          *(_QWORD *)(v11 + 56) = 0;
          *(_QWORD *)(v11 + 40) = 0;
          v16 = *((_OWORD *)v12 + 1);
          *(_OWORD *)(v11 + 64) = *(_OWORD *)v12;
          *(_OWORD *)(v11 + 80) = v16;
          v17 = v11 + 96;
          goto LABEL_15;
        }
        v18 = &v722;
      }
      v17 = sub_22E9D8E48(v3, (uint64_t)v18);
LABEL_15:
      v3[1] = v17;
      v738.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
      sub_22E6C60B8((void ***)&v738);
      sub_22E9D96F4(*(_QWORD *)(v4 + 72), (uint64_t)v3);
      v19 = *(_QWORD *)(v4 + 72);
      v20 = v5;
LABEL_19:
      sub_22E9D9B04(v20, v19, v3);
      goto LABEL_20;
    case 2:
      sub_22E9CAE48(*(_QWORD *)(v1 + 72), (uint64_t *)v2, 1);
      sub_22E9D96F4(*(_QWORD *)(v4 + 72), (uint64_t)v3);
      v19 = *(_QWORD *)(v4 + 72);
      v20 = 2;
      goto LABEL_19;
    case 3:
      sub_22E9CAB1C(*(_QWORD *)(v1 + 72), v2, 1);
      sub_22E9D96F4(*(_QWORD *)(v4 + 72), (uint64_t)v3);
      v19 = *(_QWORD *)(v4 + 72);
      v20 = 3;
      goto LABEL_19;
    case 4:
      sub_22E9CB748(*(_QWORD *)(v1 + 72), (uint64_t *)v2, 1);
      goto LABEL_20;
    case 5:
    case 6:
      goto LABEL_7;
    case 7:
      goto LABEL_189;
    case 8:
    case 11:
      v398 = v6;
      if ((*(_BYTE *)(*(_QWORD *)(v1 + 72) + 1) & 2) != 0)
        sub_22E9D9494((uint64_t)v877, (uint64_t *)v2);
      sub_22E9D92E0((uint64_t)v3);
      v28 = *(uint64_t **)(v4 + 72);
      v29 = *v28;
      if ((*v28 & 0x100) != 0)
      {
        v30 = *(_QWORD *)(v3[23] + 208);
        if (v30)
        {
          if ((*(_BYTE *)(v30 + 8) & 2) != 0 && (v28[1] & 0x400000000000) != 0)
          {
            sub_22E8A9AD8((uint64_t)v877, (uint64_t)"try");
            sub_22E8A9D90((uint64_t)v877, 19, "");
            sub_22E8A9D90((uint64_t)v877, 11, "");
            sub_22E8A9D90((uint64_t)v877, 20, "");
            sub_22E8A9C00((uint64_t)v877, (uint64_t)"statements");
            sub_22E8A9D90((uint64_t)v877, 20, "");
            sub_22E8A9D90((uint64_t)v877, 12, "");
            sub_22E8A9D90((uint64_t)v877, 19, "");
            sub_22E8A9B38((uint64_t)v877, (uint64_t)"catch");
            sub_22E8A9D90((uint64_t)v877, 19, "");
            sub_22E8A9D90((uint64_t)v877, 7, "");
            sub_22E8A9C00((uint64_t)v877, (uint64_t)"declaration");
            sub_22E8A9D90((uint64_t)v877, 8, "");
            sub_22E8A9D90((uint64_t)v877, 19, "");
            sub_22E8A9D90((uint64_t)v877, 11, "");
            sub_22E8A9D90((uint64_t)v877, 20, "");
            sub_22E8A9C00((uint64_t)v877, (uint64_t)"statements");
            sub_22E8A9D90((uint64_t)v877, 20, "");
            sub_22E8A9D90((uint64_t)v877, 12, "");
            *(_QWORD *)&v714 = 0;
            *((_QWORD *)&v714 + 1) = sub_22F2F28A4((uint64_t)v877);
            v715 = xmmword_22F469F30;
            v716 = 0;
            v719 = 0;
            v717 = 0;
            v718 = 0;
            LOBYTE(v720) = v720 & 0xC0;
            *((_QWORD *)&v720 + 1) = 0;
            v721 = 0uLL;
            v31 = v3[1];
            if (v31 >= v3[2])
            {
              v35 = sub_22E9D8E48(v3, (uint64_t)&v714);
            }
            else
            {
              v32 = v714;
              v33 = v715;
              *(_DWORD *)(v31 + 32) = v716;
              *(_OWORD *)v31 = v32;
              *(_OWORD *)(v31 + 16) = v33;
              *(_QWORD *)(v31 + 48) = 0;
              *(_QWORD *)(v31 + 56) = 0;
              *(_QWORD *)(v31 + 40) = 0;
              sub_22E6C6020((_QWORD *)(v31 + 40), v717, v718, 0x6DB6DB6DB6DB6DB7 * ((v718 - v717) >> 3));
              v34 = v721;
              *(_OWORD *)(v31 + 64) = v720;
              *(_OWORD *)(v31 + 80) = v34;
              v35 = v31 + 96;
            }
            v3[1] = v35;
            v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v717;
            sub_22E6C60B8((void ***)&v738);
            v29 = **(_QWORD **)(v4 + 72);
          }
        }
      }
      if ((v29 & 0x4000) != 0)
        sub_22E9CBA0C((uint64_t)v3, 1);
      v107 = *(_QWORD *)(v3[23] + 208);
      if (v107 && (*(_BYTE *)(v107 + 8) & 2) != 0)
      {
        sub_22E8A9AD8((uint64_t)v877, (uint64_t)"if");
        sub_22E8A9D90((uint64_t)v877, 19, "");
        sub_22E8A9D90((uint64_t)v877, 7, "");
        if ((**(_QWORD **)(v4 + 72) & 0x100) != 0)
          v108 = "condition";
        else
          v108 = "expression";
        sub_22E8A9C00((uint64_t)v877, (uint64_t)v108);
        sub_22E8A9D90((uint64_t)v877, 8, "");
        sub_22E8A9D90((uint64_t)v877, 19, "");
        sub_22E8A9D90((uint64_t)v877, 11, "");
        sub_22E8A9D90((uint64_t)v877, 20, "");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"statements");
        sub_22E8A9D90((uint64_t)v877, 20, "");
        sub_22E8A9D90((uint64_t)v877, 12, "");
        *(_QWORD *)&v706 = 0;
        *((_QWORD *)&v706 + 1) = sub_22F2F28A4((uint64_t)v877);
        v707 = xmmword_22F469F30;
        v708 = 0;
        v711 = 0;
        v709 = 0;
        v710 = 0;
        LOBYTE(v712) = v712 & 0xC0;
        *((_QWORD *)&v712 + 1) = 0;
        v713 = 0uLL;
        v109 = v3[1];
        if (v109 >= v3[2])
        {
          v113 = sub_22E9D8E48(v3, (uint64_t)&v706);
        }
        else
        {
          v110 = v706;
          v111 = v707;
          *(_DWORD *)(v109 + 32) = v708;
          *(_OWORD *)v109 = v110;
          *(_OWORD *)(v109 + 16) = v111;
          *(_QWORD *)(v109 + 48) = 0;
          *(_QWORD *)(v109 + 56) = 0;
          *(_QWORD *)(v109 + 40) = 0;
          sub_22E6C6020((_QWORD *)(v109 + 40), v709, v710, 0x6DB6DB6DB6DB6DB7 * ((v710 - v709) >> 3));
          v112 = v713;
          *(_OWORD *)(v109 + 64) = v712;
          *(_OWORD *)(v109 + 80) = v112;
          v113 = v109 + 96;
        }
        v3[1] = v113;
        v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v709;
        sub_22E6C60B8((void ***)&v738);
        sub_22E8A9AD8((uint64_t)v877, (uint64_t)"switch");
        sub_22E8A9D90((uint64_t)v877, 19, "");
        sub_22E8A9D90((uint64_t)v877, 7, "");
        if ((**(_QWORD **)(v4 + 72) & 0x100) != 0)
          v114 = "condition";
        else
          v114 = "expression";
        sub_22E8A9C00((uint64_t)v877, (uint64_t)v114);
        sub_22E8A9D90((uint64_t)v877, 8, "");
        sub_22E8A9D90((uint64_t)v877, 19, "");
        sub_22E8A9D90((uint64_t)v877, 11, "");
        sub_22E8A9D90((uint64_t)v877, 20, "");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"cases");
        sub_22E8A9D90((uint64_t)v877, 20, "");
        sub_22E8A9D90((uint64_t)v877, 12, "");
        *(_QWORD *)&v698 = 0;
        *((_QWORD *)&v698 + 1) = sub_22F2F28A4((uint64_t)v877);
        v699 = xmmword_22F469F30;
        v700 = 0;
        v703 = 0;
        v701 = 0;
        v702 = 0;
        LOBYTE(v704) = v704 & 0xC0;
        *((_QWORD *)&v704 + 1) = 0;
        v705 = 0uLL;
        v115 = v3[1];
        if (v115 >= v3[2])
        {
          v119 = sub_22E9D8E48(v3, (uint64_t)&v698);
        }
        else
        {
          v116 = v698;
          v117 = v699;
          *(_DWORD *)(v115 + 32) = v700;
          *(_OWORD *)v115 = v116;
          *(_OWORD *)(v115 + 16) = v117;
          *(_QWORD *)(v115 + 48) = 0;
          *(_QWORD *)(v115 + 56) = 0;
          *(_QWORD *)(v115 + 40) = 0;
          sub_22E6C6020((_QWORD *)(v115 + 40), v701, v702, 0x6DB6DB6DB6DB6DB7 * ((v702 - v701) >> 3));
          v118 = v705;
          *(_OWORD *)(v115 + 64) = v704;
          *(_OWORD *)(v115 + 80) = v118;
          v119 = v115 + 96;
        }
        v3[1] = v119;
        v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v701;
        sub_22E6C60B8((void ***)&v738);
      }
      v120 = *(unsigned int *)(v4 + 1904);
      if ((_DWORD)v120)
      {
        v121 = *(_QWORD *)(*(_QWORD *)(v4 + 1896) + 8 * v120 - 8);
        if (v121)
        {
          if (*(_DWORD *)(v121 + 56))
          {
            sub_22E8A9AD8((uint64_t)v877, (uint64_t)"case");
            sub_22E8A9D90((uint64_t)v877, 19, "");
            sub_22E8A9C00((uint64_t)v877, (uint64_t)"expression");
            sub_22E8A9D90((uint64_t)v877, 16, "");
            *(_QWORD *)&v690 = 0;
            *((_QWORD *)&v690 + 1) = sub_22F2F28A4((uint64_t)v877);
            v691 = xmmword_22F469F30;
            v692 = 0;
            v695 = 0;
            v693 = 0;
            v694 = 0;
            LOBYTE(v696) = v696 & 0xC0;
            *((_QWORD *)&v696 + 1) = 0;
            v697 = 0uLL;
            v122 = v3[1];
            if (v122 >= v3[2])
            {
              v126 = sub_22E9D8E48(v3, (uint64_t)&v690);
            }
            else
            {
              v123 = v690;
              v124 = v691;
              *(_DWORD *)(v122 + 32) = v692;
              *(_OWORD *)v122 = v123;
              *(_OWORD *)(v122 + 16) = v124;
              *(_QWORD *)(v122 + 48) = 0;
              *(_QWORD *)(v122 + 56) = 0;
              *(_QWORD *)(v122 + 40) = 0;
              sub_22E6C6020((_QWORD *)(v122 + 40), v693, v694, 0x6DB6DB6DB6DB6DB7 * ((v694 - v693) >> 3));
              v125 = v697;
              *(_OWORD *)(v122 + 64) = v696;
              *(_OWORD *)(v122 + 80) = v125;
              v126 = v122 + 96;
            }
            v3[1] = v126;
            v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v693;
            sub_22E6C60B8((void ***)&v738);
            sub_22E8A9AD8((uint64_t)v877, (uint64_t)"default");
            sub_22E8A9D90((uint64_t)v877, 16, "");
            *(_QWORD *)&v682 = 0;
            *((_QWORD *)&v682 + 1) = sub_22F2F28A4((uint64_t)v877);
            v683 = xmmword_22F469F30;
            v684 = 0;
            v687 = 0;
            v685 = 0;
            v686 = 0;
            LOBYTE(v688) = v688 & 0xC0;
            *((_QWORD *)&v688 + 1) = 0;
            v689 = 0uLL;
            v127 = v3[1];
            if (v127 >= v3[2])
            {
              v131 = sub_22E9D8E48(v3, (uint64_t)&v682);
            }
            else
            {
              v128 = v682;
              v129 = v683;
              *(_DWORD *)(v127 + 32) = v684;
              *(_OWORD *)v127 = v128;
              *(_OWORD *)(v127 + 16) = v129;
              *(_QWORD *)(v127 + 48) = 0;
              *(_QWORD *)(v127 + 56) = 0;
              *(_QWORD *)(v127 + 40) = 0;
              sub_22E6C6020((_QWORD *)(v127 + 40), v685, v686, 0x6DB6DB6DB6DB6DB7 * ((v686 - v685) >> 3));
              v130 = v689;
              *(_OWORD *)(v127 + 64) = v688;
              *(_OWORD *)(v127 + 80) = v130;
              v131 = v127 + 96;
            }
            v3[1] = v131;
            v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v685;
            sub_22E6C60B8((void ***)&v738);
          }
        }
      }
      v132 = *(_QWORD *)(v3[23] + 208);
      if (v132 && (*(_BYTE *)(v132 + 8) & 2) != 0)
      {
        sub_22E8A9AD8((uint64_t)v877, (uint64_t)"while");
        sub_22E8A9D90((uint64_t)v877, 19, "");
        sub_22E8A9D90((uint64_t)v877, 7, "");
        v133 = (**(_QWORD **)(v4 + 72) & 0x100) != 0 ? "condition" : "expression";
        sub_22E8A9C00((uint64_t)v877, (uint64_t)v133);
        sub_22E8A9D90((uint64_t)v877, 8, "");
        sub_22E8A9D90((uint64_t)v877, 19, "");
        sub_22E8A9D90((uint64_t)v877, 11, "");
        sub_22E8A9D90((uint64_t)v877, 20, "");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"statements");
        sub_22E8A9D90((uint64_t)v877, 20, "");
        sub_22E8A9D90((uint64_t)v877, 12, "");
        *(_QWORD *)&v674 = 0;
        *((_QWORD *)&v674 + 1) = sub_22F2F28A4((uint64_t)v877);
        v675 = xmmword_22F469F30;
        v676 = 0;
        v679 = 0;
        v677 = 0;
        v678 = 0;
        LOBYTE(v680) = v680 & 0xC0;
        *((_QWORD *)&v680 + 1) = 0;
        v681 = 0uLL;
        v134 = v3[1];
        if (v134 >= v3[2])
        {
          v138 = sub_22E9D8E48(v3, (uint64_t)&v674);
        }
        else
        {
          v135 = v674;
          v136 = v675;
          *(_DWORD *)(v134 + 32) = v676;
          *(_OWORD *)v134 = v135;
          *(_OWORD *)(v134 + 16) = v136;
          *(_QWORD *)(v134 + 48) = 0;
          *(_QWORD *)(v134 + 56) = 0;
          *(_QWORD *)(v134 + 40) = 0;
          sub_22E6C6020((_QWORD *)(v134 + 40), v677, v678, 0x6DB6DB6DB6DB6DB7 * ((v678 - v677) >> 3));
          v137 = v681;
          *(_OWORD *)(v134 + 64) = v680;
          *(_OWORD *)(v134 + 80) = v137;
          v138 = v134 + 96;
        }
        v3[1] = v138;
        v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v677;
        sub_22E6C60B8((void ***)&v738);
        sub_22E8A9AD8((uint64_t)v877, (uint64_t)"do");
        sub_22E8A9D90((uint64_t)v877, 19, "");
        sub_22E8A9D90((uint64_t)v877, 11, "");
        sub_22E8A9D90((uint64_t)v877, 20, "");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"statements");
        sub_22E8A9D90((uint64_t)v877, 20, "");
        sub_22E8A9D90((uint64_t)v877, 12, "");
        sub_22E8A9B38((uint64_t)v877, (uint64_t)"while");
        sub_22E8A9D90((uint64_t)v877, 19, "");
        sub_22E8A9D90((uint64_t)v877, 7, "");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"expression");
        sub_22E8A9D90((uint64_t)v877, 8, "");
        *(_QWORD *)&v666 = 0;
        *((_QWORD *)&v666 + 1) = sub_22F2F28A4((uint64_t)v877);
        v667 = xmmword_22F469F30;
        v668 = 0;
        v671 = 0;
        v669 = 0;
        v670 = 0;
        LOBYTE(v672) = v672 & 0xC0;
        *((_QWORD *)&v672 + 1) = 0;
        v673 = 0uLL;
        v139 = v3[1];
        if (v139 >= v3[2])
        {
          v143 = sub_22E9D8E48(v3, (uint64_t)&v666);
        }
        else
        {
          v140 = v666;
          v141 = v667;
          *(_DWORD *)(v139 + 32) = v668;
          *(_OWORD *)v139 = v140;
          *(_OWORD *)(v139 + 16) = v141;
          *(_QWORD *)(v139 + 48) = 0;
          *(_QWORD *)(v139 + 56) = 0;
          *(_QWORD *)(v139 + 40) = 0;
          sub_22E6C6020((_QWORD *)(v139 + 40), v669, v670, 0x6DB6DB6DB6DB6DB7 * ((v670 - v669) >> 3));
          v142 = v673;
          *(_OWORD *)(v139 + 64) = v672;
          *(_OWORD *)(v139 + 80) = v142;
          v143 = v139 + 96;
        }
        v3[1] = v143;
        v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v669;
        sub_22E6C60B8((void ***)&v738);
        sub_22E8A9AD8((uint64_t)v877, (uint64_t)"for");
        sub_22E8A9D90((uint64_t)v877, 19, "");
        sub_22E8A9D90((uint64_t)v877, 7, "");
        v144 = (**(_QWORD **)(v4 + 72) & 0x101) != 0 ? "init-statement" : "init-expression";
        sub_22E8A9C00((uint64_t)v877, (uint64_t)v144);
        sub_22E8A9D90((uint64_t)v877, 17, "");
        sub_22E8A9D90((uint64_t)v877, 19, "");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"condition");
        sub_22E8A9D90((uint64_t)v877, 17, "");
        sub_22E8A9D90((uint64_t)v877, 19, "");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"inc-expression");
        sub_22E8A9D90((uint64_t)v877, 8, "");
        sub_22E8A9D90((uint64_t)v877, 19, "");
        sub_22E8A9D90((uint64_t)v877, 11, "");
        sub_22E8A9D90((uint64_t)v877, 20, "");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"statements");
        sub_22E8A9D90((uint64_t)v877, 20, "");
        sub_22E8A9D90((uint64_t)v877, 12, "");
        *(_QWORD *)&v658 = 0;
        *((_QWORD *)&v658 + 1) = sub_22F2F28A4((uint64_t)v877);
        v659 = xmmword_22F469F30;
        v660 = 0;
        v663 = 0;
        v661 = 0;
        v662 = 0;
        LOBYTE(v664) = v664 & 0xC0;
        *((_QWORD *)&v664 + 1) = 0;
        v665 = 0uLL;
        v145 = v3[1];
        if (v145 >= v3[2])
        {
          v149 = sub_22E9D8E48(v3, (uint64_t)&v658);
        }
        else
        {
          v146 = v658;
          v147 = v659;
          *(_DWORD *)(v145 + 32) = v660;
          *(_OWORD *)v145 = v146;
          *(_OWORD *)(v145 + 16) = v147;
          *(_QWORD *)(v145 + 48) = 0;
          *(_QWORD *)(v145 + 56) = 0;
          *(_QWORD *)(v145 + 40) = 0;
          sub_22E6C6020((_QWORD *)(v145 + 40), v661, v662, 0x6DB6DB6DB6DB6DB7 * ((v662 - v661) >> 3));
          v148 = v665;
          *(_OWORD *)(v145 + 64) = v664;
          *(_OWORD *)(v145 + 80) = v148;
          v149 = v145 + 96;
        }
        v3[1] = v149;
        v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v661;
        sub_22E6C60B8((void ***)&v738);
        if ((*(_BYTE *)(*(_QWORD *)(v4 + 72) + 1) & 0x42) != 0)
        {
          sub_22E8A9AD8((uint64_t)v877, (uint64_t)"for");
          sub_22E8A9D90((uint64_t)v877, 19, "");
          sub_22E8A9D90((uint64_t)v877, 7, "");
          sub_22E8A9C00((uint64_t)v877, (uint64_t)"range-declaration");
          sub_22E8A9D90((uint64_t)v877, 19, "");
          if ((*(_BYTE *)(*(_QWORD *)(v4 + 72) + 1) & 0x40) != 0)
            sub_22E8A9B38((uint64_t)v877, (uint64_t)"in");
          else
            sub_22E8A9D90((uint64_t)v877, 16, "");
          sub_22E8A9D90((uint64_t)v877, 19, "");
          sub_22E8A9C00((uint64_t)v877, (uint64_t)"range-expression");
          sub_22E8A9D90((uint64_t)v877, 8, "");
          sub_22E8A9D90((uint64_t)v877, 19, "");
          sub_22E8A9D90((uint64_t)v877, 11, "");
          sub_22E8A9D90((uint64_t)v877, 20, "");
          sub_22E8A9C00((uint64_t)v877, (uint64_t)"statements");
          sub_22E8A9D90((uint64_t)v877, 20, "");
          sub_22E8A9D90((uint64_t)v877, 12, "");
          *(_QWORD *)&v650 = 0;
          *((_QWORD *)&v650 + 1) = sub_22F2F28A4((uint64_t)v877);
          v651 = xmmword_22F469F30;
          v652 = 0;
          v655 = 0;
          v653 = 0;
          v654 = 0;
          LOBYTE(v656) = v656 & 0xC0;
          *((_QWORD *)&v656 + 1) = 0;
          v657 = 0uLL;
          v150 = v3[1];
          if (v150 >= v3[2])
          {
            v154 = sub_22E9D8E48(v3, (uint64_t)&v650);
          }
          else
          {
            v151 = v650;
            v152 = v651;
            *(_DWORD *)(v150 + 32) = v652;
            *(_OWORD *)v150 = v151;
            *(_OWORD *)(v150 + 16) = v152;
            *(_QWORD *)(v150 + 48) = 0;
            *(_QWORD *)(v150 + 56) = 0;
            *(_QWORD *)(v150 + 40) = 0;
            sub_22E6C6020((_QWORD *)(v150 + 40), v653, v654, 0x6DB6DB6DB6DB6DB7 * ((v654 - v653) >> 3));
            v153 = v657;
            *(_OWORD *)(v150 + 64) = v656;
            *(_OWORD *)(v150 + 80) = v153;
            v154 = v150 + 96;
          }
          v3[1] = v154;
          v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v653;
          sub_22E6C60B8((void ***)&v738);
        }
      }
      if (*(_QWORD *)(v8 + 48))
      {
        sub_22E8A9AD8((uint64_t)v877, (uint64_t)"continue");
        sub_22E8A9D90((uint64_t)v877, 17, "");
        *(_QWORD *)&v642 = 0;
        *((_QWORD *)&v642 + 1) = sub_22F2F28A4((uint64_t)v877);
        v643 = xmmword_22F469F30;
        v644 = 0;
        v647 = 0;
        v645 = 0;
        v646 = 0;
        LOBYTE(v648) = v648 & 0xC0;
        *((_QWORD *)&v648 + 1) = 0;
        v649 = 0uLL;
        v155 = v3[1];
        if (v155 >= v3[2])
        {
          v159 = sub_22E9D8E48(v3, (uint64_t)&v642);
        }
        else
        {
          v156 = v642;
          v157 = v643;
          *(_DWORD *)(v155 + 32) = v644;
          *(_OWORD *)v155 = v156;
          *(_OWORD *)(v155 + 16) = v157;
          *(_QWORD *)(v155 + 48) = 0;
          *(_QWORD *)(v155 + 56) = 0;
          *(_QWORD *)(v155 + 40) = 0;
          sub_22E6C6020((_QWORD *)(v155 + 40), v645, v646, 0x6DB6DB6DB6DB6DB7 * ((v646 - v645) >> 3));
          v158 = v649;
          *(_OWORD *)(v155 + 64) = v648;
          *(_OWORD *)(v155 + 80) = v158;
          v159 = v155 + 96;
        }
        v3[1] = v159;
        v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v645;
        sub_22E6C60B8((void ***)&v738);
      }
      if (*(_QWORD *)(v8 + 40))
      {
        sub_22E8A9AD8((uint64_t)v877, (uint64_t)"break");
        sub_22E8A9D90((uint64_t)v877, 17, "");
        *(_QWORD *)&v634 = 0;
        *((_QWORD *)&v634 + 1) = sub_22F2F28A4((uint64_t)v877);
        v635 = xmmword_22F469F30;
        v636 = 0;
        v639 = 0;
        v637 = 0;
        v638 = 0;
        LOBYTE(v640) = v640 & 0xC0;
        *((_QWORD *)&v640 + 1) = 0;
        v641 = 0uLL;
        v160 = v3[1];
        if (v160 >= v3[2])
        {
          v164 = sub_22E9D8E48(v3, (uint64_t)&v634);
        }
        else
        {
          v161 = v634;
          v162 = v635;
          *(_DWORD *)(v160 + 32) = v636;
          *(_OWORD *)v160 = v161;
          *(_OWORD *)(v160 + 16) = v162;
          *(_QWORD *)(v160 + 48) = 0;
          *(_QWORD *)(v160 + 56) = 0;
          *(_QWORD *)(v160 + 40) = 0;
          sub_22E6C6020((_QWORD *)(v160 + 40), v637, v638, 0x6DB6DB6DB6DB6DB7 * ((v638 - v637) >> 3));
          v163 = v641;
          *(_OWORD *)(v160 + 64) = v640;
          *(_OWORD *)(v160 + 80) = v163;
          v164 = v160 + 96;
        }
        v3[1] = v164;
        v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v637;
        sub_22E6C60B8((void ***)&v738);
      }
      v165 = *(_QWORD *)(v4 + 216);
      v166 = *(_WORD *)(v165 + 8);
      if (v165 && (v166 & 0x7Eu) - 58 >= 0xFFFFFFFA)
      {
        v167 = *(_QWORD *)(*(_QWORD *)(v165 - 24) & 0xFFFFFFFFFFFFFFF0);
        if (!v167 || *(unsigned __int8 *)(v167 + 16) - 27 <= 0xFFFFFFFD)
          v167 = sub_22F10CF48(v167);
        v168 = (unint64_t *)(v167 + 24);
      }
      else if (v165 && (v166 & 0x7F) == 0x18)
      {
        v168 = (unint64_t *)(v165 + 32);
      }
      else
      {
        if (!sub_22F30914C(v4) || *(_QWORD *)(sub_22F30914C(v4) + 1416) < 0x10uLL)
        {
LABEL_176:
          sub_22E8A9AD8((uint64_t)v877, (uint64_t)"return");
          sub_22E8A9D90((uint64_t)v877, 17, "");
          *(_QWORD *)&v626 = 0;
          *((_QWORD *)&v626 + 1) = sub_22F2F28A4((uint64_t)v877);
          v627 = xmmword_22F469F30;
          v628 = 0;
          v178 = &v629;
          v631 = 0;
          v629 = 0;
          v630 = 0;
          LOBYTE(v632) = v632 & 0xC0;
          *((_QWORD *)&v632 + 1) = 0;
          v633 = 0uLL;
          v179 = v3[1];
          if (v179 >= v3[2])
          {
            v183 = sub_22E9D8E48(v3, (uint64_t)&v626);
          }
          else
          {
            v180 = v626;
            v181 = v627;
            *(_DWORD *)(v179 + 32) = v628;
            *(_OWORD *)v179 = v180;
            *(_OWORD *)(v179 + 16) = v181;
            *(_QWORD *)(v179 + 48) = 0;
            *(_QWORD *)(v179 + 56) = 0;
            *(_QWORD *)(v179 + 40) = 0;
            sub_22E6C6020((_QWORD *)(v179 + 40), v629, v630, 0x6DB6DB6DB6DB6DB7 * ((v630 - v629) >> 3));
            v182 = v633;
            *(_OWORD *)(v179 + 64) = v632;
            *(_OWORD *)(v179 + 80) = v182;
            v183 = v179 + 96;
          }
          goto LABEL_179;
        }
        v168 = (unint64_t *)(sub_22F30914C(v4) + 1416);
      }
      v169 = *v168;
      if (v169 < 0x10)
        goto LABEL_176;
      v170 = v169 & 0xFFFFFFFFFFFFFFF0;
      v171 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v169 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v171 && (*(_DWORD *)(v171 + 16) & 0xFF800FF) == 86507531)
        goto LABEL_176;
      sub_22E8A9AD8((uint64_t)v877, (uint64_t)"return");
      sub_22E8A9D90((uint64_t)v877, 19, "");
      sub_22E8A9C00((uint64_t)v877, (uint64_t)"expression");
      sub_22E8A9D90((uint64_t)v877, 17, "");
      *(_QWORD *)&v618 = 0;
      *((_QWORD *)&v618 + 1) = sub_22F2F28A4((uint64_t)v877);
      v619 = xmmword_22F469F30;
      v620 = 0;
      v623 = 0;
      v621 = 0;
      v622 = 0;
      LOBYTE(v624) = v624 & 0xC0;
      *((_QWORD *)&v624 + 1) = 0;
      v625 = 0uLL;
      v173 = v3[1];
      if (v173 >= v3[2])
      {
        v177 = sub_22E9D8E48(v3, (uint64_t)&v618);
      }
      else
      {
        v174 = v618;
        v175 = v619;
        *(_DWORD *)(v173 + 32) = v620;
        *(_OWORD *)v173 = v174;
        *(_OWORD *)(v173 + 16) = v175;
        *(_QWORD *)(v173 + 48) = 0;
        *(_QWORD *)(v173 + 56) = 0;
        *(_QWORD *)(v173 + 40) = 0;
        sub_22E6C6020((_QWORD *)(v173 + 40), v621, v622, 0x6DB6DB6DB6DB6DB7 * ((v622 - v621) >> 3));
        v176 = v625;
        *(_OWORD *)(v173 + 64) = v624;
        *(_OWORD *)(v173 + 80) = v176;
        v177 = v173 + 96;
      }
      v3[1] = v177;
      v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v621;
      sub_22E6C60B8((void ***)&v738);
      v288 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v170 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v288 && (*(_DWORD *)(v288 + 16) & 0xFF800FF) == 0x530000B)
      {
        sub_22E8A9AD8((uint64_t)v877, (uint64_t)"return true");
        sub_22E8A9D90((uint64_t)v877, 17, "");
        *(_QWORD *)&v610 = 0;
        *((_QWORD *)&v610 + 1) = sub_22F2F28A4((uint64_t)v877);
        v611 = xmmword_22F469F30;
        v612 = 0;
        v615 = 0;
        v613 = 0;
        v614 = 0;
        LOBYTE(v616) = v616 & 0xC0;
        *((_QWORD *)&v616 + 1) = 0;
        v617 = 0uLL;
        v289 = v3[1];
        if (v289 >= v3[2])
        {
          v293 = sub_22E9D8E48(v3, (uint64_t)&v610);
        }
        else
        {
          v290 = v610;
          v291 = v611;
          *(_DWORD *)(v289 + 32) = v612;
          *(_OWORD *)v289 = v290;
          *(_OWORD *)(v289 + 16) = v291;
          *(_QWORD *)(v289 + 48) = 0;
          *(_QWORD *)(v289 + 56) = 0;
          *(_QWORD *)(v289 + 40) = 0;
          sub_22E6C6020((_QWORD *)(v289 + 40), v613, v614, 0x6DB6DB6DB6DB6DB7 * ((v614 - v613) >> 3));
          v292 = v617;
          *(_OWORD *)(v289 + 64) = v616;
          *(_OWORD *)(v289 + 80) = v292;
          v293 = v289 + 96;
        }
        v3[1] = v293;
        v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v613;
        sub_22E6C60B8((void ***)&v738);
        sub_22E8A9AD8((uint64_t)v877, (uint64_t)"return false");
        sub_22E8A9D90((uint64_t)v877, 17, "");
        *(_QWORD *)&v602 = 0;
        *((_QWORD *)&v602 + 1) = sub_22F2F28A4((uint64_t)v877);
        v603 = xmmword_22F469F30;
        v604 = 0;
        v607 = 0;
        v605 = 0;
        v606 = 0;
        LOBYTE(v608) = v608 & 0xC0;
        *((_QWORD *)&v608 + 1) = 0;
        v609 = 0uLL;
        v307 = v3[1];
        if (v307 >= v3[2])
        {
          v311 = sub_22E9D8E48(v3, (uint64_t)&v602);
        }
        else
        {
          v308 = v602;
          v309 = v603;
          *(_DWORD *)(v307 + 32) = v604;
          *(_OWORD *)v307 = v308;
          *(_OWORD *)(v307 + 16) = v309;
          *(_QWORD *)(v307 + 48) = 0;
          *(_QWORD *)(v307 + 56) = 0;
          *(_QWORD *)(v307 + 40) = 0;
          sub_22E6C6020((_QWORD *)(v307 + 40), v605, v606, 0x6DB6DB6DB6DB6DB7 * ((v606 - v605) >> 3));
          v310 = v609;
          *(_OWORD *)(v307 + 64) = v608;
          *(_OWORD *)(v307 + 80) = v310;
          v311 = v307 + 96;
        }
        v3[1] = v311;
        v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v605;
        sub_22E6C60B8((void ***)&v738);
      }
      if ((*(_BYTE *)(*(_QWORD *)(v4 + 72) + 1) & 2) != 0)
      {
        v312 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v170 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v312 == 39 || v312 == 31)
        {
          sub_22E8A9AD8((uint64_t)v877, (uint64_t)"return nullptr");
          sub_22E8A9D90((uint64_t)v877, 17, "");
          *(_QWORD *)&v594 = 0;
          *((_QWORD *)&v594 + 1) = sub_22F2F28A4((uint64_t)v877);
          v595 = xmmword_22F469F30;
          v596 = 0;
          v178 = &v597;
          v599 = 0;
          v597 = 0;
          v598 = 0;
          LOBYTE(v600) = v600 & 0xC0;
          *((_QWORD *)&v600 + 1) = 0;
          v601 = 0uLL;
          v314 = v3[1];
          if (v314 >= v3[2])
          {
            v183 = sub_22E9D8E48(v3, (uint64_t)&v594);
          }
          else
          {
            v315 = v594;
            v316 = v595;
            *(_DWORD *)(v314 + 32) = v596;
            *(_OWORD *)v314 = v315;
            *(_OWORD *)(v314 + 16) = v316;
            *(_QWORD *)(v314 + 48) = 0;
            *(_QWORD *)(v314 + 56) = 0;
            *(_QWORD *)(v314 + 40) = 0;
            sub_22E6C6020((_QWORD *)(v314 + 40), v597, v598, 0x6DB6DB6DB6DB6DB7 * ((v598 - v597) >> 3));
            v317 = v601;
            *(_OWORD *)(v314 + 64) = v600;
            *(_OWORD *)(v314 + 80) = v317;
            v183 = v314 + 96;
          }
LABEL_179:
          v3[1] = v183;
          v738.__r_.__value_.__r.__words[0] = (std::string::size_type)v178;
          sub_22E6C60B8((void ***)&v738);
        }
      }
      sub_22E8A9AD8((uint64_t)v877, (uint64_t)"goto");
      sub_22E8A9D90((uint64_t)v877, 19, "");
      sub_22E8A9C00((uint64_t)v877, (uint64_t)"label");
      sub_22E8A9D90((uint64_t)v877, 17, "");
      *(_QWORD *)&v586 = 0;
      *((_QWORD *)&v586 + 1) = sub_22F2F28A4((uint64_t)v877);
      v587 = xmmword_22F469F30;
      v588 = 0;
      v591 = 0;
      v589 = 0;
      v590 = 0;
      LOBYTE(v592) = v592 & 0xC0;
      *((_QWORD *)&v592 + 1) = 0;
      v593 = 0uLL;
      v184 = v3[1];
      if (v184 >= v3[2])
      {
        v188 = sub_22E9D8E48(v3, (uint64_t)&v586);
      }
      else
      {
        v185 = v586;
        v186 = v587;
        *(_DWORD *)(v184 + 32) = v588;
        *(_OWORD *)v184 = v185;
        *(_OWORD *)(v184 + 16) = v186;
        *(_QWORD *)(v184 + 48) = 0;
        *(_QWORD *)(v184 + 56) = 0;
        *(_QWORD *)(v184 + 40) = 0;
        sub_22E6C6020((_QWORD *)(v184 + 40), v589, v590, 0x6DB6DB6DB6DB6DB7 * ((v590 - v589) >> 3));
        v187 = v593;
        *(_OWORD *)(v184 + 64) = v592;
        *(_OWORD *)(v184 + 80) = v187;
        v188 = v184 + 96;
      }
      v3[1] = v188;
      v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v589;
      sub_22E6C60B8((void ***)&v738);
      sub_22E8A9AD8((uint64_t)v877, (uint64_t)"using namespace");
      sub_22E8A9D90((uint64_t)v877, 19, "");
      sub_22E8A9C00((uint64_t)v877, (uint64_t)"identifier");
      sub_22E8A9D90((uint64_t)v877, 17, "");
      *(_QWORD *)&v578 = 0;
      *((_QWORD *)&v578 + 1) = sub_22F2F28A4((uint64_t)v877);
      v579 = xmmword_22F469F30;
      v580 = 0;
      v583 = 0;
      v581 = 0;
      v582 = 0;
      LOBYTE(v584) = v584 & 0xC0;
      *((_QWORD *)&v584 + 1) = 0;
      v585 = 0uLL;
      v189 = v3[1];
      if (v189 >= v3[2])
      {
        v193 = sub_22E9D8E48(v3, (uint64_t)&v578);
      }
      else
      {
        v190 = v578;
        v191 = v579;
        *(_DWORD *)(v189 + 32) = v580;
        *(_OWORD *)v189 = v190;
        *(_OWORD *)(v189 + 16) = v191;
        *(_QWORD *)(v189 + 48) = 0;
        *(_QWORD *)(v189 + 56) = 0;
        *(_QWORD *)(v189 + 40) = 0;
        sub_22E6C6020((_QWORD *)(v189 + 40), v581, v582, 0x6DB6DB6DB6DB6DB7 * ((v582 - v581) >> 3));
        v192 = v585;
        *(_OWORD *)(v189 + 64) = v584;
        *(_OWORD *)(v189 + 80) = v192;
        v193 = v189 + 96;
      }
      v3[1] = v193;
      v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v581;
      sub_22E6C60B8((void ***)&v738);
      sub_22E9D95B8((uint64_t)v877, v3, **(_QWORD **)(v4 + 72));
      *(_QWORD *)&v6 = v398;
LABEL_187:
      v399 = v6;
      sub_22E9D96F4(*(_QWORD *)(v4 + 72), (uint64_t)v3);
LABEL_188:
      *(_QWORD *)&v6 = v399;
LABEL_189:
      v194 = **(_QWORD **)(v4 + 72);
      v400 = v6;
      if ((v194 & 0x100) != 0)
      {
        sub_22E9CA57C(v4, (uint64_t)v3);
        sub_22E8A9CC8((uint64_t)v877, (uint64_t)"BOOL");
        sub_22E8A9AD8((uint64_t)v877, (uint64_t)"true");
        *(_QWORD *)&v546 = 0;
        *((_QWORD *)&v546 + 1) = sub_22F2F28A4((uint64_t)v877);
        v547 = xmmword_22F469F30;
        v548 = 0;
        v551 = 0;
        v549 = 0;
        v550 = 0;
        LOBYTE(v552) = v552 & 0xC0;
        *((_QWORD *)&v552 + 1) = 0;
        v553 = 0uLL;
        v195 = v3[1];
        if (v195 >= v3[2])
        {
          v199 = sub_22E9D8E48(v3, (uint64_t)&v546);
        }
        else
        {
          v196 = v546;
          v197 = v547;
          *(_DWORD *)(v195 + 32) = v548;
          *(_OWORD *)v195 = v196;
          *(_OWORD *)(v195 + 16) = v197;
          *(_QWORD *)(v195 + 48) = 0;
          *(_QWORD *)(v195 + 56) = 0;
          *(_QWORD *)(v195 + 40) = 0;
          sub_22E6C6020((_QWORD *)(v195 + 40), v549, v550, 0x6DB6DB6DB6DB6DB7 * ((v550 - v549) >> 3));
          v198 = v553;
          *(_OWORD *)(v195 + 64) = v552;
          *(_OWORD *)(v195 + 80) = v198;
          v199 = v195 + 96;
        }
        v3[1] = v199;
        v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v549;
        sub_22E6C60B8((void ***)&v738);
        sub_22E8A9CC8((uint64_t)v877, (uint64_t)"BOOL");
        sub_22E8A9AD8((uint64_t)v877, (uint64_t)"false");
        *(_QWORD *)&v538 = 0;
        *((_QWORD *)&v538 + 1) = sub_22F2F28A4((uint64_t)v877);
        v539 = xmmword_22F469F30;
        v540 = 0;
        v543 = 0;
        v541 = 0;
        v542 = 0;
        LOBYTE(v544) = v544 & 0xC0;
        *((_QWORD *)&v544 + 1) = 0;
        v545 = 0uLL;
        v200 = v3[1];
        if (v200 >= v3[2])
        {
          v204 = sub_22E9D8E48(v3, (uint64_t)&v538);
        }
        else
        {
          v201 = v538;
          v202 = v539;
          *(_DWORD *)(v200 + 32) = v540;
          *(_OWORD *)v200 = v201;
          *(_OWORD *)(v200 + 16) = v202;
          *(_QWORD *)(v200 + 48) = 0;
          *(_QWORD *)(v200 + 56) = 0;
          *(_QWORD *)(v200 + 40) = 0;
          sub_22E6C6020((_QWORD *)(v200 + 40), v541, v542, 0x6DB6DB6DB6DB6DB7 * ((v542 - v541) >> 3));
          v203 = v545;
          *(_OWORD *)(v200 + 64) = v544;
          *(_OWORD *)(v200 + 80) = v203;
          v204 = v200 + 96;
        }
        v3[1] = v204;
        v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v541;
        sub_22E6C60B8((void ***)&v738);
        if ((*(_QWORD *)(*(_QWORD *)(v4 + 72) + 8) & 0x8000000000000) != 0)
        {
          sub_22E8A9AD8((uint64_t)v877, (uint64_t)"dynamic_cast");
          sub_22E8A9D90((uint64_t)v877, 13, "");
          sub_22E8A9C00((uint64_t)v877, (uint64_t)"type");
          sub_22E8A9D90((uint64_t)v877, 14, "");
          sub_22E8A9D90((uint64_t)v877, 7, "");
          sub_22E8A9C00((uint64_t)v877, (uint64_t)"expression");
          sub_22E8A9D90((uint64_t)v877, 8, "");
          *(_QWORD *)&v530 = 0;
          *((_QWORD *)&v530 + 1) = sub_22F2F28A4((uint64_t)v877);
          v531 = xmmword_22F469F30;
          v532 = 0;
          v535 = 0;
          v533 = 0;
          v534 = 0;
          LOBYTE(v536) = v536 & 0xC0;
          *((_QWORD *)&v536 + 1) = 0;
          v537 = 0uLL;
          v205 = v3[1];
          if (v205 >= v3[2])
          {
            v209 = sub_22E9D8E48(v3, (uint64_t)&v530);
          }
          else
          {
            v206 = v530;
            v207 = v531;
            *(_DWORD *)(v205 + 32) = v532;
            *(_OWORD *)v205 = v206;
            *(_OWORD *)(v205 + 16) = v207;
            *(_QWORD *)(v205 + 48) = 0;
            *(_QWORD *)(v205 + 56) = 0;
            *(_QWORD *)(v205 + 40) = 0;
            sub_22E6C6020((_QWORD *)(v205 + 40), v533, v534, 0x6DB6DB6DB6DB6DB7 * ((v534 - v533) >> 3));
            v208 = v537;
            *(_OWORD *)(v205 + 64) = v536;
            *(_OWORD *)(v205 + 80) = v208;
            v209 = v205 + 96;
          }
          v3[1] = v209;
          v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v533;
          sub_22E6C60B8((void ***)&v738);
        }
        sub_22E8A9AD8((uint64_t)v877, (uint64_t)"static_cast");
        sub_22E8A9D90((uint64_t)v877, 13, "");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"type");
        sub_22E8A9D90((uint64_t)v877, 14, "");
        sub_22E8A9D90((uint64_t)v877, 7, "");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"expression");
        sub_22E8A9D90((uint64_t)v877, 8, "");
        *(_QWORD *)&v522 = 0;
        *((_QWORD *)&v522 + 1) = sub_22F2F28A4((uint64_t)v877);
        v523 = xmmword_22F469F30;
        v524 = 0;
        v527 = 0;
        v525 = 0;
        v526 = 0;
        LOBYTE(v528) = v528 & 0xC0;
        *((_QWORD *)&v528 + 1) = 0;
        v529 = 0uLL;
        v210 = v3[1];
        if (v210 >= v3[2])
        {
          v214 = sub_22E9D8E48(v3, (uint64_t)&v522);
        }
        else
        {
          v211 = v522;
          v212 = v523;
          *(_DWORD *)(v210 + 32) = v524;
          *(_OWORD *)v210 = v211;
          *(_OWORD *)(v210 + 16) = v212;
          *(_QWORD *)(v210 + 48) = 0;
          *(_QWORD *)(v210 + 56) = 0;
          *(_QWORD *)(v210 + 40) = 0;
          sub_22E6C6020((_QWORD *)(v210 + 40), v525, v526, 0x6DB6DB6DB6DB6DB7 * ((v526 - v525) >> 3));
          v213 = v529;
          *(_OWORD *)(v210 + 64) = v528;
          *(_OWORD *)(v210 + 80) = v213;
          v214 = v210 + 96;
        }
        v3[1] = v214;
        v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v525;
        sub_22E6C60B8((void ***)&v738);
        sub_22E8A9AD8((uint64_t)v877, (uint64_t)"reinterpret_cast");
        sub_22E8A9D90((uint64_t)v877, 13, "");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"type");
        sub_22E8A9D90((uint64_t)v877, 14, "");
        sub_22E8A9D90((uint64_t)v877, 7, "");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"expression");
        sub_22E8A9D90((uint64_t)v877, 8, "");
        *(_QWORD *)&v514 = 0;
        *((_QWORD *)&v514 + 1) = sub_22F2F28A4((uint64_t)v877);
        v515 = xmmword_22F469F30;
        v516 = 0;
        v519 = 0;
        v517 = 0;
        v518 = 0;
        LOBYTE(v520) = v520 & 0xC0;
        *((_QWORD *)&v520 + 1) = 0;
        v521 = 0uLL;
        v215 = v3[1];
        if (v215 >= v3[2])
        {
          v219 = sub_22E9D8E48(v3, (uint64_t)&v514);
        }
        else
        {
          v216 = v514;
          v217 = v515;
          *(_DWORD *)(v215 + 32) = v516;
          *(_OWORD *)v215 = v216;
          *(_OWORD *)(v215 + 16) = v217;
          *(_QWORD *)(v215 + 48) = 0;
          *(_QWORD *)(v215 + 56) = 0;
          *(_QWORD *)(v215 + 40) = 0;
          sub_22E6C6020((_QWORD *)(v215 + 40), v517, v518, 0x6DB6DB6DB6DB6DB7 * ((v518 - v517) >> 3));
          v218 = v521;
          *(_OWORD *)(v215 + 64) = v520;
          *(_OWORD *)(v215 + 80) = v218;
          v219 = v215 + 96;
        }
        v3[1] = v219;
        v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v517;
        sub_22E6C60B8((void ***)&v738);
        sub_22E8A9AD8((uint64_t)v877, (uint64_t)"const_cast");
        sub_22E8A9D90((uint64_t)v877, 13, "");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"type");
        sub_22E8A9D90((uint64_t)v877, 14, "");
        sub_22E8A9D90((uint64_t)v877, 7, "");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"expression");
        sub_22E8A9D90((uint64_t)v877, 8, "");
        *(_QWORD *)&v506 = 0;
        *((_QWORD *)&v506 + 1) = sub_22F2F28A4((uint64_t)v877);
        v507 = xmmword_22F469F30;
        v508 = 0;
        v511 = 0;
        v509 = 0;
        v510 = 0;
        LOBYTE(v512) = v512 & 0xC0;
        *((_QWORD *)&v512 + 1) = 0;
        v513 = 0uLL;
        v220 = v3[1];
        if (v220 >= v3[2])
        {
          v224 = sub_22E9D8E48(v3, (uint64_t)&v506);
        }
        else
        {
          v221 = v506;
          v222 = v507;
          *(_DWORD *)(v220 + 32) = v508;
          *(_OWORD *)v220 = v221;
          *(_OWORD *)(v220 + 16) = v222;
          *(_QWORD *)(v220 + 48) = 0;
          *(_QWORD *)(v220 + 56) = 0;
          *(_QWORD *)(v220 + 40) = 0;
          sub_22E6C6020((_QWORD *)(v220 + 40), v509, v510, 0x6DB6DB6DB6DB6DB7 * ((v510 - v509) >> 3));
          v223 = v513;
          *(_OWORD *)(v220 + 64) = v512;
          *(_OWORD *)(v220 + 80) = v223;
          v224 = v220 + 96;
        }
        v3[1] = v224;
        v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v509;
        sub_22E6C60B8((void ***)&v738);
        if ((*(_QWORD *)(*(_QWORD *)(v4 + 72) + 8) & 0x8000000000000) != 0)
        {
          sub_22E8A9CC8((uint64_t)v877, (uint64_t)"std::type_info");
          sub_22E8A9AD8((uint64_t)v877, (uint64_t)"typeid");
          sub_22E8A9D90((uint64_t)v877, 7, "");
          sub_22E8A9C00((uint64_t)v877, (uint64_t)"expression-or-type");
          sub_22E8A9D90((uint64_t)v877, 8, "");
          *(_QWORD *)&v498 = 0;
          *((_QWORD *)&v498 + 1) = sub_22F2F28A4((uint64_t)v877);
          v499 = xmmword_22F469F30;
          v500 = 0;
          v503 = 0;
          v501 = 0;
          v502 = 0;
          LOBYTE(v504) = v504 & 0xC0;
          *((_QWORD *)&v504 + 1) = 0;
          v505 = 0uLL;
          v225 = v3[1];
          if (v225 >= v3[2])
          {
            v229 = sub_22E9D8E48(v3, (uint64_t)&v498);
          }
          else
          {
            v226 = v498;
            v227 = v499;
            *(_DWORD *)(v225 + 32) = v500;
            *(_OWORD *)v225 = v226;
            *(_OWORD *)(v225 + 16) = v227;
            *(_QWORD *)(v225 + 48) = 0;
            *(_QWORD *)(v225 + 56) = 0;
            *(_QWORD *)(v225 + 40) = 0;
            sub_22E6C6020((_QWORD *)(v225 + 40), v501, v502, 0x6DB6DB6DB6DB6DB7 * ((v502 - v501) >> 3));
            v228 = v505;
            *(_OWORD *)(v225 + 64) = v504;
            *(_OWORD *)(v225 + 80) = v228;
            v229 = v225 + 96;
          }
          v3[1] = v229;
          v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v501;
          sub_22E6C60B8((void ***)&v738);
        }
        sub_22E8A9AD8((uint64_t)v877, (uint64_t)"new");
        sub_22E8A9D90((uint64_t)v877, 19, "");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"type");
        sub_22E8A9D90((uint64_t)v877, 7, "");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"expressions");
        sub_22E8A9D90((uint64_t)v877, 8, "");
        *(_QWORD *)&v490 = 0;
        *((_QWORD *)&v490 + 1) = sub_22F2F28A4((uint64_t)v877);
        v491 = xmmword_22F469F30;
        v492 = 0;
        v495 = 0;
        v493 = 0;
        v494 = 0;
        LOBYTE(v496) = v496 & 0xC0;
        *((_QWORD *)&v496 + 1) = 0;
        v497 = 0uLL;
        v230 = v3[1];
        if (v230 >= v3[2])
        {
          v234 = sub_22E9D8E48(v3, (uint64_t)&v490);
        }
        else
        {
          v231 = v490;
          v232 = v491;
          *(_DWORD *)(v230 + 32) = v492;
          *(_OWORD *)v230 = v231;
          *(_OWORD *)(v230 + 16) = v232;
          *(_QWORD *)(v230 + 48) = 0;
          *(_QWORD *)(v230 + 56) = 0;
          *(_QWORD *)(v230 + 40) = 0;
          sub_22E6C6020((_QWORD *)(v230 + 40), v493, v494, 0x6DB6DB6DB6DB6DB7 * ((v494 - v493) >> 3));
          v233 = v497;
          *(_OWORD *)(v230 + 64) = v496;
          *(_OWORD *)(v230 + 80) = v233;
          v234 = v230 + 96;
        }
        v3[1] = v234;
        v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v493;
        sub_22E6C60B8((void ***)&v738);
        sub_22E8A9AD8((uint64_t)v877, (uint64_t)"new");
        sub_22E8A9D90((uint64_t)v877, 19, "");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"type");
        sub_22E8A9D90((uint64_t)v877, 9, "");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"size");
        sub_22E8A9D90((uint64_t)v877, 10, "");
        sub_22E8A9D90((uint64_t)v877, 7, "");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"expressions");
        sub_22E8A9D90((uint64_t)v877, 8, "");
        *(_QWORD *)&v482 = 0;
        *((_QWORD *)&v482 + 1) = sub_22F2F28A4((uint64_t)v877);
        v483 = xmmword_22F469F30;
        v484 = 0;
        v487 = 0;
        v485 = 0;
        v486 = 0;
        LOBYTE(v488) = v488 & 0xC0;
        *((_QWORD *)&v488 + 1) = 0;
        v489 = 0uLL;
        v235 = v3[1];
        if (v235 >= v3[2])
        {
          v239 = sub_22E9D8E48(v3, (uint64_t)&v482);
        }
        else
        {
          v236 = v482;
          v237 = v483;
          *(_DWORD *)(v235 + 32) = v484;
          *(_OWORD *)v235 = v236;
          *(_OWORD *)(v235 + 16) = v237;
          *(_QWORD *)(v235 + 48) = 0;
          *(_QWORD *)(v235 + 56) = 0;
          *(_QWORD *)(v235 + 40) = 0;
          sub_22E6C6020((_QWORD *)(v235 + 40), v485, v486, 0x6DB6DB6DB6DB6DB7 * ((v486 - v485) >> 3));
          v238 = v489;
          *(_OWORD *)(v235 + 64) = v488;
          *(_OWORD *)(v235 + 80) = v238;
          v239 = v235 + 96;
        }
        v3[1] = v239;
        v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v485;
        sub_22E6C60B8((void ***)&v738);
        sub_22E8A9CC8((uint64_t)v877, (uint64_t)"void");
        sub_22E8A9AD8((uint64_t)v877, (uint64_t)"delete");
        sub_22E8A9D90((uint64_t)v877, 19, "");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"expression");
        *(_QWORD *)&v474 = 0;
        *((_QWORD *)&v474 + 1) = sub_22F2F28A4((uint64_t)v877);
        v475 = xmmword_22F469F30;
        v476 = 0;
        v479 = 0;
        v477 = 0;
        v478 = 0;
        LOBYTE(v480) = v480 & 0xC0;
        *((_QWORD *)&v480 + 1) = 0;
        v481 = 0uLL;
        v240 = v3[1];
        if (v240 >= v3[2])
        {
          v244 = sub_22E9D8E48(v3, (uint64_t)&v474);
        }
        else
        {
          v241 = v474;
          v242 = v475;
          *(_DWORD *)(v240 + 32) = v476;
          *(_OWORD *)v240 = v241;
          *(_OWORD *)(v240 + 16) = v242;
          *(_QWORD *)(v240 + 48) = 0;
          *(_QWORD *)(v240 + 56) = 0;
          *(_QWORD *)(v240 + 40) = 0;
          sub_22E6C6020((_QWORD *)(v240 + 40), v477, v478, 0x6DB6DB6DB6DB6DB7 * ((v478 - v477) >> 3));
          v243 = v481;
          *(_OWORD *)(v240 + 64) = v480;
          *(_OWORD *)(v240 + 80) = v243;
          v244 = v240 + 96;
        }
        v3[1] = v244;
        v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v477;
        sub_22E6C60B8((void ***)&v738);
        sub_22E8A9CC8((uint64_t)v877, (uint64_t)"void");
        sub_22E8A9AD8((uint64_t)v877, (uint64_t)"delete");
        sub_22E8A9D90((uint64_t)v877, 19, "");
        sub_22E8A9D90((uint64_t)v877, 9, "");
        sub_22E8A9D90((uint64_t)v877, 10, "");
        sub_22E8A9D90((uint64_t)v877, 19, "");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"expression");
        *(_QWORD *)&v466 = 0;
        *((_QWORD *)&v466 + 1) = sub_22F2F28A4((uint64_t)v877);
        v467 = xmmword_22F469F30;
        v468 = 0;
        v471 = 0;
        v469 = 0;
        v470 = 0;
        LOBYTE(v472) = v472 & 0xC0;
        *((_QWORD *)&v472 + 1) = 0;
        v473 = 0uLL;
        v245 = v3[1];
        if (v245 >= v3[2])
        {
          v249 = sub_22E9D8E48(v3, (uint64_t)&v466);
        }
        else
        {
          v246 = v466;
          v247 = v467;
          *(_DWORD *)(v245 + 32) = v468;
          *(_OWORD *)v245 = v246;
          *(_OWORD *)(v245 + 16) = v247;
          *(_QWORD *)(v245 + 48) = 0;
          *(_QWORD *)(v245 + 56) = 0;
          *(_QWORD *)(v245 + 40) = 0;
          sub_22E6C6020((_QWORD *)(v245 + 40), v469, v470, 0x6DB6DB6DB6DB6DB7 * ((v470 - v469) >> 3));
          v248 = v473;
          *(_OWORD *)(v245 + 64) = v472;
          *(_OWORD *)(v245 + 80) = v248;
          v249 = v245 + 96;
        }
        v3[1] = v249;
        v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v469;
        sub_22E6C60B8((void ***)&v738);
        v250 = *(uint64_t **)(v4 + 72);
        if ((v250[1] & 0x400000000000) != 0)
        {
          sub_22E8A9CC8((uint64_t)v877, (uint64_t)"void");
          sub_22E8A9AD8((uint64_t)v877, (uint64_t)"throw");
          sub_22E8A9D90((uint64_t)v877, 19, "");
          sub_22E8A9C00((uint64_t)v877, (uint64_t)"expression");
          *(_QWORD *)&v458 = 0;
          *((_QWORD *)&v458 + 1) = sub_22F2F28A4((uint64_t)v877);
          v459 = xmmword_22F469F30;
          v460 = 0;
          v463 = 0;
          v461 = 0;
          v462 = 0;
          LOBYTE(v464) = v464 & 0xC0;
          *((_QWORD *)&v464 + 1) = 0;
          v465 = 0uLL;
          v251 = v3[1];
          if (v251 >= v3[2])
          {
            v255 = sub_22E9D8E48(v3, (uint64_t)&v458);
          }
          else
          {
            v252 = v458;
            v253 = v459;
            *(_DWORD *)(v251 + 32) = v460;
            *(_OWORD *)v251 = v252;
            *(_OWORD *)(v251 + 16) = v253;
            *(_QWORD *)(v251 + 48) = 0;
            *(_QWORD *)(v251 + 56) = 0;
            *(_QWORD *)(v251 + 40) = 0;
            sub_22E6C6020((_QWORD *)(v251 + 40), v461, v462, 0x6DB6DB6DB6DB6DB7 * ((v462 - v461) >> 3));
            v254 = v465;
            *(_OWORD *)(v251 + 64) = v464;
            *(_OWORD *)(v251 + 80) = v254;
            v255 = v251 + 96;
          }
          v3[1] = v255;
          v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v461;
          sub_22E6C60B8((void ***)&v738);
          v250 = *(uint64_t **)(v4 + 72);
        }
        v194 = *v250;
        if ((v194 & 0x200) != 0)
        {
          sub_22E8A9CC8((uint64_t)v877, (uint64_t)"std::nullptr_t");
          sub_22E8A9AD8((uint64_t)v877, (uint64_t)"nullptr");
          *(_QWORD *)&v450 = 0;
          *((_QWORD *)&v450 + 1) = sub_22F2F28A4((uint64_t)v877);
          v451 = xmmword_22F469F30;
          v452 = 0;
          v455 = 0;
          v453 = 0;
          v454 = 0;
          LOBYTE(v456) = v456 & 0xC0;
          *((_QWORD *)&v456 + 1) = 0;
          v457 = 0uLL;
          v256 = v3[1];
          if (v256 >= v3[2])
          {
            v260 = sub_22E9D8E48(v3, (uint64_t)&v450);
          }
          else
          {
            v257 = v450;
            v258 = v451;
            *(_DWORD *)(v256 + 32) = v452;
            *(_OWORD *)v256 = v257;
            *(_OWORD *)(v256 + 16) = v258;
            *(_QWORD *)(v256 + 48) = 0;
            *(_QWORD *)(v256 + 56) = 0;
            *(_QWORD *)(v256 + 40) = 0;
            sub_22E6C6020((_QWORD *)(v256 + 40), v453, v454, 0x6DB6DB6DB6DB6DB7 * ((v454 - v453) >> 3));
            v259 = v457;
            *(_OWORD *)(v256 + 64) = v456;
            *(_OWORD *)(v256 + 80) = v259;
            v260 = v256 + 96;
          }
          v3[1] = v260;
          v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v453;
          sub_22E6C60B8((void ***)&v738);
          sub_22E8A9CC8((uint64_t)v877, (uint64_t)"size_t");
          sub_22E8A9AD8((uint64_t)v877, (uint64_t)"alignof");
          sub_22E8A9D90((uint64_t)v877, 7, "");
          sub_22E8A9C00((uint64_t)v877, (uint64_t)"type");
          sub_22E8A9D90((uint64_t)v877, 8, "");
          *(_QWORD *)&v442 = 0;
          *((_QWORD *)&v442 + 1) = sub_22F2F28A4((uint64_t)v877);
          v443 = xmmword_22F469F30;
          v444 = 0;
          v447 = 0;
          v445 = 0;
          v446 = 0;
          LOBYTE(v448) = v448 & 0xC0;
          *((_QWORD *)&v448 + 1) = 0;
          v449 = 0uLL;
          v261 = v3[1];
          if (v261 >= v3[2])
          {
            v265 = sub_22E9D8E48(v3, (uint64_t)&v442);
          }
          else
          {
            v262 = v442;
            v263 = v443;
            *(_DWORD *)(v261 + 32) = v444;
            *(_OWORD *)v261 = v262;
            *(_OWORD *)(v261 + 16) = v263;
            *(_QWORD *)(v261 + 48) = 0;
            *(_QWORD *)(v261 + 56) = 0;
            *(_QWORD *)(v261 + 40) = 0;
            sub_22E6C6020((_QWORD *)(v261 + 40), v445, v446, 0x6DB6DB6DB6DB6DB7 * ((v446 - v445) >> 3));
            v264 = v449;
            *(_OWORD *)(v261 + 64) = v448;
            *(_OWORD *)(v261 + 80) = v264;
            v265 = v261 + 96;
          }
          v3[1] = v265;
          v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v445;
          sub_22E6C60B8((void ***)&v738);
          sub_22E8A9CC8((uint64_t)v877, (uint64_t)"BOOL");
          sub_22E8A9AD8((uint64_t)v877, (uint64_t)"noexcept");
          sub_22E8A9D90((uint64_t)v877, 7, "");
          sub_22E8A9C00((uint64_t)v877, (uint64_t)"expression");
          sub_22E8A9D90((uint64_t)v877, 8, "");
          *(_QWORD *)&v434 = 0;
          *((_QWORD *)&v434 + 1) = sub_22F2F28A4((uint64_t)v877);
          v435 = xmmword_22F469F30;
          v436 = 0;
          v439 = 0;
          v437 = 0;
          v438 = 0;
          LOBYTE(v440) = v440 & 0xC0;
          *((_QWORD *)&v440 + 1) = 0;
          v441 = 0uLL;
          v266 = v3[1];
          if (v266 >= v3[2])
          {
            v270 = sub_22E9D8E48(v3, (uint64_t)&v434);
          }
          else
          {
            v267 = v434;
            v268 = v435;
            *(_DWORD *)(v266 + 32) = v436;
            *(_OWORD *)v266 = v267;
            *(_OWORD *)(v266 + 16) = v268;
            *(_QWORD *)(v266 + 48) = 0;
            *(_QWORD *)(v266 + 56) = 0;
            *(_QWORD *)(v266 + 40) = 0;
            sub_22E6C6020((_QWORD *)(v266 + 40), v437, v438, 0x6DB6DB6DB6DB6DB7 * ((v438 - v437) >> 3));
            v269 = v441;
            *(_OWORD *)(v266 + 64) = v440;
            *(_OWORD *)(v266 + 80) = v269;
            v270 = v266 + 96;
          }
          v3[1] = v270;
          v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v437;
          sub_22E6C60B8((void ***)&v738);
          sub_22E8A9CC8((uint64_t)v877, (uint64_t)"size_t");
          sub_22E8A9AD8((uint64_t)v877, (uint64_t)"sizeof...");
          sub_22E8A9D90((uint64_t)v877, 7, "");
          sub_22E8A9C00((uint64_t)v877, (uint64_t)"parameter-pack");
          sub_22E8A9D90((uint64_t)v877, 8, "");
          *(_QWORD *)&v426 = 0;
          *((_QWORD *)&v426 + 1) = sub_22F2F28A4((uint64_t)v877);
          v427 = xmmword_22F469F30;
          v428 = 0;
          v431 = 0;
          v429 = 0;
          v430 = 0;
          LOBYTE(v432) = v432 & 0xC0;
          *((_QWORD *)&v432 + 1) = 0;
          v433 = 0uLL;
          v271 = v3[1];
          if (v271 >= v3[2])
          {
            v275 = sub_22E9D8E48(v3, (uint64_t)&v426);
          }
          else
          {
            v272 = v426;
            v273 = v427;
            *(_DWORD *)(v271 + 32) = v428;
            *(_OWORD *)v271 = v272;
            *(_OWORD *)(v271 + 16) = v273;
            *(_QWORD *)(v271 + 48) = 0;
            *(_QWORD *)(v271 + 56) = 0;
            *(_QWORD *)(v271 + 40) = 0;
            sub_22E6C6020((_QWORD *)(v271 + 40), v429, v430, 0x6DB6DB6DB6DB6DB7 * ((v430 - v429) >> 3));
            v274 = v433;
            *(_OWORD *)(v271 + 64) = v432;
            *(_OWORD *)(v271 + 80) = v274;
            v275 = v271 + 96;
          }
          v3[1] = v275;
          v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v429;
          sub_22E6C60B8((void ***)&v738);
          v194 = **(_QWORD **)(v4 + 72);
        }
      }
      if ((v194 & 0x4000) != 0)
      {
        v276 = sub_22E90328C(v4);
        if (v276)
        {
          v277 = v276;
          v278 = sub_22EFDC9F0(v276);
          if (v278)
          {
            v279 = v278;
            if (sub_22F3B46CC(v278))
            {
              v280 = sub_22F3B46CC(v279);
              sub_22EFC683C((uint64_t *)(v280 + 40), &v738);
              v281 = *(_QWORD *)(v277 + 56);
              __p = v738;
              if ((v281 & 0x20000) != 0)
                std::string::append(&__p, " *");
              WORD4(v739) = 260;
              v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              v282 = sub_22F2F27DC(v400, (const char **)&v738.__r_.__value_.__l.__data_);
              sub_22E8A9CC8((uint64_t)v877, (uint64_t)v282);
              sub_22E8A9AD8((uint64_t)v877, (uint64_t)"super");
              *(_QWORD *)&v420 = 0;
              *((_QWORD *)&v420 + 1) = sub_22F2F28A4((uint64_t)v877);
              v421 = xmmword_22F469F30;
              v422 = 0;
              memset(v423, 0, sizeof(v423));
              LOBYTE(v424) = 0;
              v425 = 0uLL;
              *((_QWORD *)&v424 + 1) = 0;
              v283 = v3[1];
              if (v283 >= v3[2])
              {
                v287 = sub_22E9D8E48(v3, (uint64_t)&v420);
              }
              else
              {
                v284 = v420;
                v285 = v421;
                *(_DWORD *)(v283 + 32) = v422;
                *(_OWORD *)v283 = v284;
                *(_OWORD *)(v283 + 16) = v285;
                *(_QWORD *)(v283 + 48) = 0;
                *(_QWORD *)(v283 + 56) = 0;
                *(_QWORD *)(v283 + 40) = 0;
                v286 = v425;
                *(_OWORD *)(v283 + 64) = v424;
                *(_OWORD *)(v283 + 80) = v286;
                v287 = v283 + 96;
              }
              v3[1] = v287;
              v738.__r_.__value_.__r.__words[0] = (std::string::size_type)v423;
              sub_22E6C60B8((void ***)&v738);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
        }
        sub_22E9CBE94((uint64_t)v3, 1);
        v194 = **(_QWORD **)(v4 + 72);
      }
      if ((v194 & 2) != 0)
      {
        sub_22E8A9CC8((uint64_t)v877, (uint64_t)"size_t");
        v294 = *(_QWORD *)(v4 + 80);
        v295 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v294 + 544), "alignof", 7uLL);
        if (sub_22F2EE534(v294, v295))
          v296 = "alignof";
        else
          v296 = "_Alignof";
        sub_22E8A9AD8((uint64_t)v877, (uint64_t)v296);
        sub_22E8A9D90((uint64_t)v877, 7, "");
        sub_22E8A9C00((uint64_t)v877, (uint64_t)"type");
        sub_22E8A9D90((uint64_t)v877, 8, "");
        *(_QWORD *)&v414 = 0;
        *((_QWORD *)&v414 + 1) = sub_22F2F28A4((uint64_t)v877);
        v415 = xmmword_22F469F30;
        v416 = 0;
        memset(v417, 0, sizeof(v417));
        LOBYTE(v418) = 0;
        v419 = 0uLL;
        *((_QWORD *)&v418 + 1) = 0;
        v297 = v3[1];
        if (v297 >= v3[2])
        {
          v301 = sub_22E9D8E48(v3, (uint64_t)&v414);
        }
        else
        {
          v298 = v414;
          v299 = v415;
          *(_DWORD *)(v297 + 32) = v416;
          *(_OWORD *)v297 = v298;
          *(_OWORD *)(v297 + 16) = v299;
          *(_QWORD *)(v297 + 48) = 0;
          *(_QWORD *)(v297 + 56) = 0;
          *(_QWORD *)(v297 + 40) = 0;
          v300 = v419;
          *(_OWORD *)(v297 + 64) = v418;
          *(_OWORD *)(v297 + 80) = v300;
          v301 = v297 + 96;
        }
        v3[1] = v301;
        v738.__r_.__value_.__r.__words[0] = (std::string::size_type)v417;
        sub_22E6C60B8((void ***)&v738);
      }
      sub_22E8A9CC8((uint64_t)v877, (uint64_t)"size_t");
      sub_22E8A9AD8((uint64_t)v877, (uint64_t)"sizeof");
      sub_22E8A9D90((uint64_t)v877, 7, "");
      sub_22E8A9C00((uint64_t)v877, (uint64_t)"expression-or-type");
      sub_22E8A9D90((uint64_t)v877, 8, "");
      *(_QWORD *)&v408 = 0;
      *((_QWORD *)&v408 + 1) = sub_22F2F28A4((uint64_t)v877);
      v409 = xmmword_22F469F30;
      v410 = 0;
      memset(v411, 0, sizeof(v411));
      LOBYTE(v412) = 0;
      v413 = 0uLL;
      *((_QWORD *)&v412 + 1) = 0;
      v302 = v3[1];
      if (v302 >= v3[2])
      {
        v306 = sub_22E9D8E48(v3, (uint64_t)&v408);
      }
      else
      {
        v303 = v408;
        v304 = v409;
        *(_DWORD *)(v302 + 32) = v410;
        *(_OWORD *)v302 = v303;
        *(_OWORD *)(v302 + 16) = v304;
        *(_QWORD *)(v302 + 48) = 0;
        *(_QWORD *)(v302 + 56) = 0;
        *(_QWORD *)(v302 + 40) = 0;
        v305 = v413;
        *(_OWORD *)(v302 + 64) = v412;
        *(_OWORD *)(v302 + 80) = v305;
        v306 = v302 + 96;
      }
      v3[1] = v306;
      v738.__r_.__value_.__r.__words[0] = (std::string::size_type)v411;
      sub_22E6C60B8((void ***)&v738);
LABEL_20:
      v21 = *(uint64_t **)(v4 + 72);
      v22 = *v21;
      if (sub_22E9B87B4(v5))
      {
        sub_22E9C7CC8(v21, (uint64_t)v3);
        v22 = **(_QWORD **)(v4 + 72);
      }
      if (v5 != 12 && (v22 & 0x100) != 0)
      {
        *(_QWORD *)&v402 = 0;
        *((_QWORD *)&v402 + 1) = "operator";
        v403 = xmmword_22F469F50;
        v404 = 0;
        memset(v405, 0, sizeof(v405));
        LOBYTE(v406) = v406 & 0xC0;
        v407 = 0uLL;
        *((_QWORD *)&v406 + 1) = 0;
        v23 = v3[1];
        if (v23 >= v3[2])
        {
          v27 = sub_22E9D8E48(v3, (uint64_t)&v402);
        }
        else
        {
          v24 = v402;
          v25 = v403;
          *(_DWORD *)(v23 + 32) = v404;
          *(_OWORD *)v23 = v24;
          *(_OWORD *)(v23 + 16) = v25;
          *(_QWORD *)(v23 + 48) = 0;
          *(_QWORD *)(v23 + 56) = 0;
          *(_QWORD *)(v23 + 40) = 0;
          v26 = v407;
          *(_OWORD *)(v23 + 64) = v406;
          *(_OWORD *)(v23 + 80) = v26;
          v27 = v23 + 96;
        }
        v3[1] = v27;
        v738.__r_.__value_.__r.__words[0] = (std::string::size_type)v405;
        sub_22E6C60B8((void ***)&v738);
      }
      if (v881 != v883)
        free(v881);
      if (v878 != v880)
        free(v878);
      return;
    case 9:
    case 10:
      goto LABEL_187;
    case 13:
      if ((*(_WORD *)(*(_QWORD *)(v1 + 72) + 148) & 2) == 0)
        goto LABEL_189;
      v399 = v6;
      sub_22E8A9AD8((uint64_t)v877, (uint64_t)"__bridge");
      sub_22E8A9D90((uint64_t)v877, 19, "");
      sub_22E8A9C00((uint64_t)v877, (uint64_t)"type");
      sub_22E8A9D90((uint64_t)v877, 8, "");
      sub_22E8A9C00((uint64_t)v877, (uint64_t)"expression");
      *(_QWORD *)&v570 = 0;
      *((_QWORD *)&v570 + 1) = sub_22F2F28A4((uint64_t)v877);
      v571 = xmmword_22F469F30;
      v572 = 0;
      v575 = 0;
      v573 = 0;
      v574 = 0;
      LOBYTE(v576) = v576 & 0xC0;
      *((_QWORD *)&v576 + 1) = 0;
      v577 = 0uLL;
      v42 = v3[1];
      if (v42 >= v3[2])
      {
        v46 = sub_22E9D8E48(v3, (uint64_t)&v570);
      }
      else
      {
        v43 = v570;
        v44 = v571;
        *(_DWORD *)(v42 + 32) = v572;
        *(_OWORD *)v42 = v43;
        *(_OWORD *)(v42 + 16) = v44;
        *(_QWORD *)(v42 + 48) = 0;
        *(_QWORD *)(v42 + 56) = 0;
        *(_QWORD *)(v42 + 40) = 0;
        sub_22E6C6020((_QWORD *)(v42 + 40), v573, v574, 0x6DB6DB6DB6DB6DB7 * ((v574 - v573) >> 3));
        v45 = v577;
        *(_OWORD *)(v42 + 64) = v576;
        *(_OWORD *)(v42 + 80) = v45;
        v46 = v42 + 96;
      }
      v3[1] = v46;
      v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v573;
      sub_22E6C60B8((void ***)&v738);
      sub_22E8A9AD8((uint64_t)v877, (uint64_t)"__bridge_transfer");
      sub_22E8A9D90((uint64_t)v877, 19, "");
      sub_22E8A9C00((uint64_t)v877, (uint64_t)"Objective-C type");
      sub_22E8A9D90((uint64_t)v877, 8, "");
      sub_22E8A9C00((uint64_t)v877, (uint64_t)"expression");
      *(_QWORD *)&v562 = 0;
      *((_QWORD *)&v562 + 1) = sub_22F2F28A4((uint64_t)v877);
      v563 = xmmword_22F469F30;
      v564 = 0;
      v567 = 0;
      v565 = 0;
      v566 = 0;
      LOBYTE(v568) = v568 & 0xC0;
      *((_QWORD *)&v568 + 1) = 0;
      v569 = 0uLL;
      v61 = v3[1];
      if (v61 >= v3[2])
      {
        v65 = sub_22E9D8E48(v3, (uint64_t)&v562);
      }
      else
      {
        v62 = v562;
        v63 = v563;
        *(_DWORD *)(v61 + 32) = v564;
        *(_OWORD *)v61 = v62;
        *(_OWORD *)(v61 + 16) = v63;
        *(_QWORD *)(v61 + 48) = 0;
        *(_QWORD *)(v61 + 56) = 0;
        *(_QWORD *)(v61 + 40) = 0;
        sub_22E6C6020((_QWORD *)(v61 + 40), v565, v566, 0x6DB6DB6DB6DB6DB7 * ((v566 - v565) >> 3));
        v64 = v569;
        *(_OWORD *)(v61 + 64) = v568;
        *(_OWORD *)(v61 + 80) = v64;
        v65 = v61 + 96;
      }
      v3[1] = v65;
      v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v565;
      sub_22E6C60B8((void ***)&v738);
      sub_22E8A9AD8((uint64_t)v877, (uint64_t)"__bridge_retained");
      sub_22E8A9D90((uint64_t)v877, 19, "");
      sub_22E8A9C00((uint64_t)v877, (uint64_t)"CF type");
      sub_22E8A9D90((uint64_t)v877, 8, "");
      sub_22E8A9C00((uint64_t)v877, (uint64_t)"expression");
      *(_QWORD *)&v554 = 0;
      *((_QWORD *)&v554 + 1) = sub_22F2F28A4((uint64_t)v877);
      v555 = xmmword_22F469F30;
      v556 = 0;
      v559 = 0;
      v557 = 0;
      v558 = 0;
      LOBYTE(v560) = v560 & 0xC0;
      *((_QWORD *)&v560 + 1) = 0;
      v561 = 0uLL;
      v66 = v3[1];
      if (v66 >= v3[2])
      {
        v70 = sub_22E9D8E48(v3, (uint64_t)&v554);
      }
      else
      {
        v67 = v554;
        v68 = v555;
        *(_DWORD *)(v66 + 32) = v556;
        *(_OWORD *)v66 = v67;
        *(_OWORD *)(v66 + 16) = v68;
        *(_QWORD *)(v66 + 48) = 0;
        *(_QWORD *)(v66 + 56) = 0;
        *(_QWORD *)(v66 + 40) = 0;
        sub_22E6C6020((_QWORD *)(v66 + 40), v557, v558, 0x6DB6DB6DB6DB6DB7 * ((v558 - v557) >> 3));
        v69 = v561;
        *(_OWORD *)(v66 + 64) = v560;
        *(_OWORD *)(v66 + 80) = v69;
        v70 = v66 + 96;
      }
      v3[1] = v70;
      v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v557;
      sub_22E6C60B8((void ***)&v738);
      goto LABEL_188;
    default:
      goto LABEL_20;
  }
}

void sub_22E9BE678(_WORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  int v25;
  _QWORD v26[3];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;
  _QWORD v32[3];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  _QWORD v38[3];
  __int128 v39;
  __int128 v40;
  void **v41;

  v4 = operator new(0x28uLL);
  v4[2] = 0;
  v4[3] = 0;
  *((_DWORD *)v4 + 8) = 0;
  v5 = a2[30];
  *v4 = v5;
  v4[1] = a2 + 30;
  *(_QWORD *)(v5 + 8) = v4;
  a2[30] = (uint64_t)v4;
  ++a2[32];
  *(_QWORD *)&v35 = 0;
  *((_QWORD *)&v35 + 1) = "__PRETTY_FUNCTION__";
  v36 = xmmword_22F469F60;
  v37 = 0;
  LOBYTE(v39) = 0;
  memset(v38, 0, sizeof(v38));
  v40 = 0uLL;
  *((_QWORD *)&v39 + 1) = 0;
  v6 = a2[1];
  if (v6 >= a2[2])
  {
    v10 = sub_22E9D8E48(a2, (uint64_t)&v35);
  }
  else
  {
    v7 = v35;
    v8 = v36;
    *(_DWORD *)(v6 + 32) = v37;
    *(_OWORD *)v6 = v7;
    *(_OWORD *)(v6 + 16) = v8;
    *(_QWORD *)(v6 + 48) = 0;
    *(_QWORD *)(v6 + 56) = 0;
    *(_QWORD *)(v6 + 40) = 0;
    v9 = v40;
    *(_OWORD *)(v6 + 64) = v39;
    *(_OWORD *)(v6 + 80) = v9;
    v10 = v6 + 96;
  }
  a2[1] = v10;
  v41 = (void **)v38;
  sub_22E6C60B8(&v41);
  *(_QWORD *)&v29 = 0;
  *((_QWORD *)&v29 + 1) = "__FUNCTION__";
  v30 = xmmword_22F469F60;
  v31 = 0;
  memset(v32, 0, sizeof(v32));
  LOBYTE(v33) = 0;
  v34 = 0uLL;
  *((_QWORD *)&v33 + 1) = 0;
  v11 = a2[1];
  if (v11 >= a2[2])
  {
    v15 = sub_22E9D8E48(a2, (uint64_t)&v29);
  }
  else
  {
    v12 = v29;
    v13 = v30;
    *(_DWORD *)(v11 + 32) = v31;
    *(_OWORD *)v11 = v12;
    *(_OWORD *)(v11 + 16) = v13;
    *(_QWORD *)(v11 + 48) = 0;
    *(_QWORD *)(v11 + 56) = 0;
    *(_QWORD *)(v11 + 40) = 0;
    v14 = v34;
    *(_OWORD *)(v11 + 64) = v33;
    *(_OWORD *)(v11 + 80) = v14;
    v15 = v11 + 96;
  }
  a2[1] = v15;
  v41 = (void **)v32;
  sub_22E6C60B8(&v41);
  if ((*a1 & 0x201) != 0)
  {
    *(_QWORD *)&v23 = 0;
    *((_QWORD *)&v23 + 1) = "__func__";
    v24 = xmmword_22F469F60;
    v25 = 0;
    memset(v26, 0, sizeof(v26));
    LOBYTE(v27) = 0;
    v28 = 0uLL;
    *((_QWORD *)&v27 + 1) = 0;
    v16 = a2[1];
    if (v16 >= a2[2])
    {
      v20 = sub_22E9D8E48(a2, (uint64_t)&v23);
    }
    else
    {
      v17 = v23;
      v18 = v24;
      *(_DWORD *)(v16 + 32) = v25;
      *(_OWORD *)v16 = v17;
      *(_OWORD *)(v16 + 16) = v18;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_QWORD *)(v16 + 40) = 0;
      v19 = v28;
      *(_OWORD *)(v16 + 64) = v27;
      *(_OWORD *)(v16 + 80) = v19;
      v20 = v16 + 96;
    }
    a2[1] = v20;
    v41 = (void **)v26;
    sub_22E6C60B8(&v41);
  }
  v21 = (uint64_t *)a2[30];
  v22 = *v21;
  *(_QWORD *)(v22 + 8) = v21[1];
  *(_QWORD *)v21[1] = v22;
  --a2[32];
  sub_22E9D8FB0((uint64_t)v21);
}

void sub_22E9BE8B8(unint64_t a1, uint64_t *a2, int a3, char a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;
  llvm **v11;
  llvm **v12;
  llvm **v13;
  uint64_t v14;
  llvm **v15;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  llvm *v20;
  int v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v30;
  _BYTE v31[20];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37[2];
  uint64_t v38;
  void **v39;

  v9 = operator new(0x28uLL);
  v9[2] = 0;
  v9[3] = 0;
  *((_DWORD *)v9 + 8) = 0;
  v10 = a2[30];
  *v9 = v10;
  v9[1] = a2 + 30;
  *(_QWORD *)(v10 + 8) = v9;
  a2[30] = (uint64_t)v9;
  ++a2[32];
  v11 = (llvm **)sub_22F18DE84(a1, a3);
  v13 = v12;
  v14 = sub_22F418224(a1, a3);
  if (v11 != (llvm **)v14)
  {
    v15 = (llvm **)v14;
    while (1)
    {
      sub_22E6D719C(a1, *v11, v37);
      if ((a4 & 1) != 0)
        break;
      if (v37[0] > 7uLL || v38 != 0)
        break;
LABEL_15:
      while (1)
      {
        v11 += 2;
        if (v11 == v13)
          break;
        if (((unint64_t)*v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_19;
      }
      v11 = v13;
LABEL_19:
      if (v11 == v15)
        goto LABEL_26;
    }
    if (v38)
    {
      v17 = (uint64_t *)(*(_QWORD *)(v37[1] + 8 * v38 - 8) + 16);
    }
    else
    {
      if ((v37[0] & 0xFFFFFFFFFFFFFFF8) == 0
        || (v18 = sub_22F14FEA4((uint64_t *)(v37[0] & 0xFFFFFFFFFFFFFFF8))) == 0)
      {
        v19 = 0;
LABEL_22:
        v20 = *v11;
        v21 = sub_22F3130A0((unsigned __int16 *)(*((_QWORD *)*v11 + 2) + 16), **((unsigned int **)*v11 + 2), *(_DWORD **)(a1 + 56), a5);
        *(_QWORD *)&v30 = 0;
        *((_QWORD *)&v30 + 1) = v20;
        *(_DWORD *)v31 = v21;
        *(_OWORD *)&v31[4] = xmmword_22F469F70;
        v33 = 0;
        v34 = 0;
        v32 = 0;
        LOBYTE(v35) = v35 & 0xC0;
        *((_QWORD *)&v35 + 1) = 0;
        *(_QWORD *)&v36 = 0;
        *((_QWORD *)&v36 + 1) = v19;
        v22 = a2[1];
        if (v22 >= a2[2])
        {
          v26 = sub_22E9D8E48(a2, (uint64_t)&v30);
        }
        else
        {
          v23 = v30;
          v24 = *(_OWORD *)v31;
          *(_DWORD *)(v22 + 32) = *(_DWORD *)&v31[16];
          *(_OWORD *)v22 = v23;
          *(_OWORD *)(v22 + 16) = v24;
          *(_QWORD *)(v22 + 40) = 0;
          *(_QWORD *)(v22 + 48) = 0;
          *(_QWORD *)(v22 + 56) = 0;
          sub_22E6C6020((_QWORD *)(v22 + 40), v32, v33, 0x6DB6DB6DB6DB6DB7 * ((v33 - v32) >> 3));
          v25 = v36;
          *(_OWORD *)(v22 + 64) = v35;
          *(_OWORD *)(v22 + 80) = v25;
          v26 = v22 + 96;
        }
        a2[1] = v26;
        v39 = (void **)&v32;
        sub_22E6C60B8(&v39);
        goto LABEL_15;
      }
      v17 = v18 + 2;
    }
    v19 = *v17;
    if (*v17 && (*(_WORD *)(v19 + 36) & 0x400) != 0)
      goto LABEL_15;
    goto LABEL_22;
  }
LABEL_26:
  v27 = (uint64_t *)a2[30];
  v28 = *v27;
  *(_QWORD *)(v28 + 8) = v27[1];
  *(_QWORD *)v27[1] = v28;
  --a2[32];
  sub_22E9D8FB0((uint64_t)v27);
}

uint64_t sub_22E9BEB10(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24FAB7520;
  v3 = (void **)(a1 + 40);
  sub_22E6C60B8(&v3);
  return a1;
}

char **sub_22E9BEB54(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  __int128 v49[3];
  void *v50;
  int v51;
  char v52;
  void *v53;
  void *v54;
  _QWORD v55[3];
  __int128 v56;
  __int128 v57;
  int v58;
  _QWORD v59[3];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  int v64;
  _QWORD v65[3];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  void **v92;
  __int128 v93;
  __int128 v94;
  char v95;
  void *v96;
  int v97;
  char v98;
  _BYTE *v99;
  void *v100;
  uint64_t v101;
  int v102;
  _BYTE v103[64];
  char *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t (*v107)();
  uint64_t v108;
  char v109;
  _QWORD *v110;
  uint64_t v111;
  __int128 v112[11];
  void **v113;

  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  if (a5)
    v12 = 20;
  else
    v12 = 19;
  LODWORD(v92) = v12;
  BYTE4(v92) = 0;
  v98 = 0;
  v93 = 0u;
  v94 = 0u;
  v95 = 0;
  v99 = v103;
  v100 = v103;
  v101 = 8;
  v102 = 0;
  sub_22E9B831C((uint64_t)&v104, a1, v10, v11, (__int128 *)&v92, 0, 0);
  if (v100 != v99)
    free(v100);
  if (v98 && v97)
    free(v96);
  v13 = operator new(0x28uLL);
  v13[2] = 0;
  v13[3] = 0;
  *((_DWORD *)v13 + 8) = 0;
  v14 = v110;
  *v13 = v110;
  v13[1] = &v110;
  v14[1] = v13;
  v110 = v13;
  ++v111;
  *(_QWORD *)&v84 = 0;
  *((_QWORD *)&v84 + 1) = "const";
  v85 = xmmword_22F469F50;
  v86 = 0;
  v89 = 0;
  v88 = 0;
  v87 = 0;
  LOBYTE(v90) = v90 & 0xC0;
  v91 = 0uLL;
  *((_QWORD *)&v90 + 1) = 0;
  v15 = v105;
  if (v105 >= v106)
  {
    v19 = sub_22E9D8E48((uint64_t *)&v104, (uint64_t)&v84);
  }
  else
  {
    v16 = v84;
    v17 = v85;
    *(_DWORD *)(v105 + 32) = v86;
    *(_OWORD *)v15 = v16;
    *(_OWORD *)(v15 + 16) = v17;
    *(_QWORD *)(v15 + 48) = 0;
    *(_QWORD *)(v15 + 56) = 0;
    *(_QWORD *)(v15 + 40) = 0;
    sub_22E6C6020((_QWORD *)(v15 + 40), v87, v88, 0x6DB6DB6DB6DB6DB7 * ((v88 - v87) >> 3));
    v18 = v91;
    *(_OWORD *)(v15 + 64) = v90;
    *(_OWORD *)(v15 + 80) = v18;
    v19 = v15 + 96;
  }
  v105 = v19;
  v92 = (void **)&v87;
  sub_22E6C60B8(&v92);
  *(_QWORD *)&v76 = 0;
  *((_QWORD *)&v76 + 1) = "volatile";
  v77 = xmmword_22F469F50;
  v78 = 0;
  v81 = 0;
  v79 = 0;
  v80 = 0;
  LOBYTE(v82) = v82 & 0xC0;
  *((_QWORD *)&v82 + 1) = 0;
  v83 = 0uLL;
  v20 = v105;
  if (v105 >= v106)
  {
    v24 = sub_22E9D8E48((uint64_t *)&v104, (uint64_t)&v76);
  }
  else
  {
    v21 = v76;
    v22 = v77;
    *(_DWORD *)(v105 + 32) = v78;
    *(_OWORD *)v20 = v21;
    *(_OWORD *)(v20 + 16) = v22;
    *(_QWORD *)(v20 + 48) = 0;
    *(_QWORD *)(v20 + 56) = 0;
    *(_QWORD *)(v20 + 40) = 0;
    sub_22E6C6020((_QWORD *)(v20 + 40), v79, v80, 0x6DB6DB6DB6DB6DB7 * ((v80 - v79) >> 3));
    v23 = v83;
    *(_OWORD *)(v20 + 64) = v82;
    *(_OWORD *)(v20 + 80) = v23;
    v24 = v20 + 96;
  }
  v105 = v24;
  v92 = (void **)&v79;
  sub_22E6C60B8(&v92);
  v25 = *(_BYTE **)(a1 + 72);
  if ((*v25 & 1) != 0)
  {
    *(_QWORD *)&v68 = 0;
    *((_QWORD *)&v68 + 1) = "restrict";
    v69 = xmmword_22F469F50;
    v70 = 0;
    v72 = 0;
    v73 = 0;
    v71 = 0;
    LOBYTE(v74) = v74 & 0xC0;
    v75 = 0uLL;
    *((_QWORD *)&v74 + 1) = 0;
    v26 = v105;
    if (v105 >= v106)
    {
      v30 = sub_22E9D8E48((uint64_t *)&v104, (uint64_t)&v68);
    }
    else
    {
      v27 = v68;
      v28 = v69;
      *(_DWORD *)(v105 + 32) = v70;
      *(_OWORD *)v26 = v27;
      *(_OWORD *)(v26 + 16) = v28;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_QWORD *)(v26 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v26 + 40), v71, v72, 0x6DB6DB6DB6DB6DB7 * ((v72 - v71) >> 3));
      v29 = v75;
      *(_OWORD *)(v26 + 64) = v74;
      *(_OWORD *)(v26 + 80) = v29;
      v30 = v26 + 96;
    }
    v105 = v30;
    v92 = (void **)&v71;
    sub_22E6C60B8(&v92);
    v25 = *(_BYTE **)(a1 + 72);
  }
  if ((v25[104] & 0x20) != 0)
  {
    sub_22E9BF210((uint64_t *)&v104, 40);
    v25 = *(_BYTE **)(a1 + 72);
  }
  v31 = *(_QWORD *)v25;
  if ((v31 & 0x100) != 0)
  {
    if ((v31 & 0x200) != 0 && ((*(_DWORD *)a3 >> 12) & 0x3Fu) - 25 <= 1)
    {
      *(_QWORD *)&v62 = 0;
      *((_QWORD *)&v62 + 1) = "final";
      v63 = xmmword_22F469F50;
      v64 = 0;
      memset(v65, 0, sizeof(v65));
      LOBYTE(v66) = 0;
      v67 = 0uLL;
      *((_QWORD *)&v66 + 1) = 0;
      v32 = v105;
      if (v105 >= v106)
      {
        v36 = sub_22E9D8E48((uint64_t *)&v104, (uint64_t)&v62);
      }
      else
      {
        v33 = v62;
        v34 = v63;
        *(_DWORD *)(v105 + 32) = v64;
        *(_OWORD *)v32 = v33;
        *(_OWORD *)(v32 + 16) = v34;
        *(_QWORD *)(v32 + 48) = 0;
        *(_QWORD *)(v32 + 56) = 0;
        *(_QWORD *)(v32 + 40) = 0;
        v35 = v67;
        *(_OWORD *)(v32 + 64) = v66;
        *(_OWORD *)(v32 + 80) = v35;
        v36 = v32 + 96;
      }
      v105 = v36;
      v92 = (void **)v65;
      sub_22E6C60B8(&v92);
    }
    if (a4)
    {
      *(_QWORD *)&v56 = 0;
      *((_QWORD *)&v56 + 1) = "operator";
      v57 = xmmword_22F469F50;
      v58 = 0;
      memset(v59, 0, sizeof(v59));
      LOBYTE(v60) = 0;
      v61 = 0uLL;
      *((_QWORD *)&v60 + 1) = 0;
      v37 = v105;
      if (v105 >= v106)
      {
        v41 = sub_22E9D8E48((uint64_t *)&v104, (uint64_t)&v56);
      }
      else
      {
        v38 = v56;
        v39 = v57;
        *(_DWORD *)(v105 + 32) = v58;
        *(_OWORD *)v37 = v38;
        *(_OWORD *)(v37 + 16) = v39;
        *(_QWORD *)(v37 + 48) = 0;
        *(_QWORD *)(v37 + 56) = 0;
        *(_QWORD *)(v37 + 40) = 0;
        v40 = v61;
        *(_OWORD *)(v37 + 64) = v60;
        *(_OWORD *)(v37 + 80) = v40;
        v41 = v37 + 96;
      }
      v105 = v41;
      v92 = (void **)v59;
      sub_22E6C60B8(&v92);
    }
    if (a5)
    {
      v109 = 1;
      v107 = sub_22E9BF690;
      v108 = 0;
      v42 = *(_QWORD *)(a1 + 216);
      memset(v55, 0, sizeof(v55));
      sub_22E9B8FE8((uint64_t)&v92, (uint64_t)&v104, v42, 0, (uint64_t)v55);
      v113 = (void **)v55;
      sub_22E6C60B8(&v113);
      sub_22EC67A18((_QWORD *)a1, (uint64_t **)a2, 6, (uint64_t)&v92, (*(_BYTE *)(*(_QWORD *)(a1 + 208) + 8) & 4) != 0, (*(_BYTE *)(*(_QWORD *)(a1 + 208) + 8) & 0x20) != 0);
      v108 = 0;
      v107 = 0;
      v92 = (void **)off_24FAB7520;
      v113 = (void **)&v95;
      sub_22E6C60B8(&v113);
    }
  }
  v43 = (uint64_t)v110;
  v44 = *v110;
  *(_QWORD *)(v44 + 8) = v110[1];
  **(_QWORD **)(v43 + 8) = v44;
  --v111;
  sub_22E9D8FB0(v43);
  if (a4)
  {
    if ((a5 & 1) == 0 && sub_22E8AD5F4(a3) == 2 && (*a3 & 0x3FF00) == 0x1C000)
    {
      if (a2)
      {
        if ((*a3 & 0x40000) == 0 && (*(_DWORD *)(a2 + 8) & 0x5A8) == 8)
        {
          v45 = a3[1];
          if (v45 >= 0x10
            && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 16)
             - 33 <= 1)
          {
            sub_22E9BF698(a1, v45, 0, 0, 0, 0, (uint64_t *)&v104);
          }
        }
      }
    }
  }
  v46 = *(_QWORD *)(a1 + 208);
  sub_22F2A4F2C((uint64_t)v49, v112);
  if ((char *)v105 == v104)
    v47 = 0;
  else
    v47 = v104;
  sub_22E9B83FC(a1, v46, v49, (uint64_t)v47, -1431655765 * ((v105 - (unint64_t)v104) >> 5));
  if (v54 != v53)
    free(v54);
  if (v52)
  {
    if (v51)
      free(v50);
    v52 = 0;
  }
  return sub_22E9B8490(&v104);
}

void sub_22E9BF210(uint64_t *a1, int a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  _BYTE v42[20];
  _QWORD v43[3];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[20];
  _QWORD v48[3];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[20];
  _QWORD v53[3];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[20];
  _QWORD v58[3];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _BYTE v62[20];
  _QWORD v63[3];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[20];
  _QWORD v68[3];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _BYTE v72[20];
  _QWORD v73[3];
  __int128 v74;
  __int128 v75;
  void **v76;

  v4 = *(_QWORD *)(a1[23] + 72);
  *(_QWORD *)&v71 = 0;
  *((_QWORD *)&v71 + 1) = "constant";
  *(_DWORD *)v72 = a2;
  *(_OWORD *)&v72[4] = xmmword_22F469F80;
  memset(v73, 0, sizeof(v73));
  LOBYTE(v74) = 0;
  v75 = 0uLL;
  *((_QWORD *)&v74 + 1) = 0;
  v5 = a1[1];
  if (v5 >= a1[2])
  {
    v9 = sub_22E9D8E48(a1, (uint64_t)&v71);
  }
  else
  {
    v6 = v71;
    v7 = *(_OWORD *)v72;
    *(_DWORD *)(v5 + 32) = *(_DWORD *)&v72[16];
    *(_OWORD *)v5 = v6;
    *(_OWORD *)(v5 + 16) = v7;
    *(_QWORD *)(v5 + 48) = 0;
    *(_QWORD *)(v5 + 56) = 0;
    *(_QWORD *)(v5 + 40) = 0;
    v8 = v75;
    *(_OWORD *)(v5 + 64) = v74;
    *(_OWORD *)(v5 + 80) = v8;
    v9 = v5 + 96;
  }
  a1[1] = v9;
  v76 = (void **)v73;
  sub_22E6C60B8(&v76);
  *(_QWORD *)&v66 = 0;
  *((_QWORD *)&v66 + 1) = "device";
  *(_DWORD *)v67 = a2;
  *(_OWORD *)&v67[4] = xmmword_22F469F80;
  memset(v68, 0, sizeof(v68));
  LOBYTE(v69) = 0;
  v70 = 0uLL;
  *((_QWORD *)&v69 + 1) = 0;
  v10 = a1[1];
  if (v10 >= a1[2])
  {
    v14 = sub_22E9D8E48(a1, (uint64_t)&v66);
  }
  else
  {
    v11 = v66;
    v12 = *(_OWORD *)v67;
    *(_DWORD *)(v10 + 32) = *(_DWORD *)&v67[16];
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    *(_QWORD *)(v10 + 48) = 0;
    *(_QWORD *)(v10 + 56) = 0;
    *(_QWORD *)(v10 + 40) = 0;
    v13 = v70;
    *(_OWORD *)(v10 + 64) = v69;
    *(_OWORD *)(v10 + 80) = v13;
    v14 = v10 + 96;
  }
  a1[1] = v14;
  v76 = (void **)v68;
  sub_22E6C60B8(&v76);
  if ((sub_22E8FCD8C(*(_QWORD *)(a1[23] + 88), *(_QWORD *)(a1[23] + 80)) & 0x1000000000000) != 0)
  {
    *(_QWORD *)&v61 = 0;
    *((_QWORD *)&v61 + 1) = "thread";
    *(_DWORD *)v62 = a2;
    *(_OWORD *)&v62[4] = xmmword_22F469F80;
    memset(v63, 0, sizeof(v63));
    LOBYTE(v64) = 0;
    v65 = 0uLL;
    *((_QWORD *)&v64 + 1) = 0;
    v15 = a1[1];
    if (v15 >= a1[2])
    {
      v19 = sub_22E9D8E48(a1, (uint64_t)&v61);
    }
    else
    {
      v16 = v61;
      v17 = *(_OWORD *)v62;
      *(_DWORD *)(v15 + 32) = *(_DWORD *)&v62[16];
      *(_OWORD *)v15 = v16;
      *(_OWORD *)(v15 + 16) = v17;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_QWORD *)(v15 + 40) = 0;
      v18 = v65;
      *(_OWORD *)(v15 + 64) = v64;
      *(_OWORD *)(v15 + 80) = v18;
      v19 = v15 + 96;
    }
    a1[1] = v19;
    v76 = (void **)v63;
    sub_22E6C60B8(&v76);
  }
  *(_QWORD *)&v56 = 0;
  *((_QWORD *)&v56 + 1) = "threadgroup";
  *(_DWORD *)v57 = a2;
  *(_OWORD *)&v57[4] = xmmword_22F469F80;
  memset(v58, 0, sizeof(v58));
  LOBYTE(v59) = 0;
  v60 = 0uLL;
  *((_QWORD *)&v59 + 1) = 0;
  v20 = a1[1];
  if (v20 >= a1[2])
  {
    v24 = sub_22E9D8E48(a1, (uint64_t)&v56);
  }
  else
  {
    v21 = v56;
    v22 = *(_OWORD *)v57;
    *(_DWORD *)(v20 + 32) = *(_DWORD *)&v57[16];
    *(_OWORD *)v20 = v21;
    *(_OWORD *)(v20 + 16) = v22;
    *(_QWORD *)(v20 + 48) = 0;
    *(_QWORD *)(v20 + 56) = 0;
    *(_QWORD *)(v20 + 40) = 0;
    v23 = v60;
    *(_OWORD *)(v20 + 64) = v59;
    *(_OWORD *)(v20 + 80) = v23;
    v24 = v20 + 96;
  }
  a1[1] = v24;
  v76 = (void **)v58;
  sub_22E6C60B8(&v76);
  v25 = *(_QWORD *)(v4 + 124);
  if ((v25 & 0x8000) != 0)
  {
    *(_QWORD *)&v51 = 0;
    *((_QWORD *)&v51 + 1) = "threadgroup_imageblock";
    *(_DWORD *)v52 = a2;
    *(_OWORD *)&v52[4] = xmmword_22F469F80;
    memset(v53, 0, sizeof(v53));
    LOBYTE(v54) = 0;
    v55 = 0uLL;
    *((_QWORD *)&v54 + 1) = 0;
    v26 = a1[1];
    if (v26 >= a1[2])
    {
      v30 = sub_22E9D8E48(a1, (uint64_t)&v51);
    }
    else
    {
      v27 = v51;
      v28 = *(_OWORD *)v52;
      *(_DWORD *)(v26 + 32) = *(_DWORD *)&v52[16];
      *(_OWORD *)v26 = v27;
      *(_OWORD *)(v26 + 16) = v28;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_QWORD *)(v26 + 40) = 0;
      v29 = v55;
      *(_OWORD *)(v26 + 64) = v54;
      *(_OWORD *)(v26 + 80) = v29;
      v30 = v26 + 96;
    }
    a1[1] = v30;
    v76 = (void **)v53;
    sub_22E6C60B8(&v76);
    v25 = *(_QWORD *)(v4 + 124);
    if ((v25 & 0x1000000000) == 0)
    {
LABEL_17:
      if ((v25 & 0x4000000) == 0)
        return;
      goto LABEL_27;
    }
  }
  else if ((v25 & 0x1000000000) == 0)
  {
    goto LABEL_17;
  }
  *(_QWORD *)&v46 = 0;
  *((_QWORD *)&v46 + 1) = "ray_data";
  *(_DWORD *)v47 = a2;
  *(_OWORD *)&v47[4] = xmmword_22F469F80;
  memset(v48, 0, sizeof(v48));
  LOBYTE(v49) = 0;
  v50 = 0uLL;
  *((_QWORD *)&v49 + 1) = 0;
  v31 = a1[1];
  if (v31 >= a1[2])
  {
    v35 = sub_22E9D8E48(a1, (uint64_t)&v46);
  }
  else
  {
    v32 = v46;
    v33 = *(_OWORD *)v47;
    *(_DWORD *)(v31 + 32) = *(_DWORD *)&v47[16];
    *(_OWORD *)v31 = v32;
    *(_OWORD *)(v31 + 16) = v33;
    *(_QWORD *)(v31 + 48) = 0;
    *(_QWORD *)(v31 + 56) = 0;
    *(_QWORD *)(v31 + 40) = 0;
    v34 = v50;
    *(_OWORD *)(v31 + 64) = v49;
    *(_OWORD *)(v31 + 80) = v34;
    v35 = v31 + 96;
  }
  a1[1] = v35;
  v76 = (void **)v48;
  sub_22E6C60B8(&v76);
  if ((*(_QWORD *)(v4 + 124) & 0x4000000) != 0)
  {
LABEL_27:
    *(_QWORD *)&v41 = 0;
    *((_QWORD *)&v41 + 1) = "object_data";
    *(_DWORD *)v42 = a2;
    *(_OWORD *)&v42[4] = xmmword_22F469F80;
    memset(v43, 0, sizeof(v43));
    LOBYTE(v44) = 0;
    v45 = 0uLL;
    *((_QWORD *)&v44 + 1) = 0;
    v36 = a1[1];
    if (v36 >= a1[2])
    {
      v40 = sub_22E9D8E48(a1, (uint64_t)&v41);
    }
    else
    {
      v37 = v41;
      v38 = *(_OWORD *)v42;
      *(_DWORD *)(v36 + 32) = *(_DWORD *)&v42[16];
      *(_OWORD *)v36 = v37;
      *(_OWORD *)(v36 + 16) = v38;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_QWORD *)(v36 + 40) = 0;
      v39 = v45;
      *(_OWORD *)(v36 + 64) = v44;
      *(_OWORD *)(v36 + 80) = v39;
      v40 = v36 + 96;
    }
    a1[1] = v40;
    v76 = (void **)v43;
    sub_22E6C60B8(&v76);
  }
}

uint64_t sub_22E9BF690()
{
  return 0;
}

void sub_22E9BF698(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6, uint64_t *a7)
{
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  const void *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  void **v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t *v32;
  _QWORD *v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t *v41;
  _OWORD v44[2];
  int v45;
  _QWORD v46[3];
  __int128 v47;
  __int128 v48;
  _QWORD v49[3];
  __int128 v50;
  __int128 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  int v61;
  _BYTE v62[128];
  void **v63[2];

  if (a2 < 0x10)
    goto LABEL_7;
  v11 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v12 && *(_BYTE *)(v12 + 16) == 57)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13 < 0x10)
      goto LABEL_7;
    v11 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
  }
  v14 = sub_22E4EBB74(*v11);
  if (v14)
  {
    v15 = sub_22F272660(v14);
    goto LABEL_8;
  }
LABEL_7:
  v15 = 0;
LABEL_8:
  v16 = operator new(0x28uLL);
  v16[2] = 0;
  v16[3] = 0;
  *((_DWORD *)v16 + 8) = 0;
  v17 = a7[30];
  *v16 = v17;
  v16[1] = a7 + 30;
  *(_QWORD *)(v17 + 8) = v16;
  a7[30] = (uint64_t)v16;
  ++a7[32];
  if (a6)
  {
    v18 = sub_22E9CF1FC(a1, 0, a3, a4, (uint64_t)a7);
    if (v18)
    {
      v19 = (const void *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v18 + 32))(v18);
      sub_22E3BA850((uint64_t)(a7 + 3), v19);
    }
  }
  v20 = sub_22E90328C(a1);
  if (v20)
    a7[38] = *(_QWORD *)(v20 + 40);
  v58 = v62;
  v59 = v62;
  v60 = 16;
  v61 = 0;
  if (v15)
  {
    v21 = a7;
    sub_22E9CDBBC(v15, 0, 0, a3, a4, *(_QWORD *)(a1 + 216), (uint64_t)&v58, a5, a7, 1, 0);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 8);
    if (v22)
    {
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
      if (v23)
      {
        v24 = v23;
        v25 = 0;
        do
        {
          v26 = (void **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), v25);
          if (v26)
          {
            v27 = v26;
            v63[0] = v26;
            *(_QWORD *)&v50 = 0;
            if ((sub_22F2BB328((uint64_t *)(a1 + 8560), v63, &v50) & 1) == 0)
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 8) + 232))(*(_QWORD *)(a1 + 8), v27);
          }
          v25 = (v25 + 1);
        }
        while (v24 != (_DWORD)v25);
      }
    }
    v28 = *(_QWORD *)(a1 + 8560);
    v29 = *(unsigned int *)(a1 + 8576);
    v30 = (unint64_t *)(v28 + 40 * v29);
    if (*(_DWORD *)(a1 + 8568))
    {
      if ((_DWORD)v29)
      {
        v31 = 40 * v29;
        v32 = *(unint64_t **)(a1 + 8560);
        while (*v32 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v32 += 5;
          v31 -= 40;
          if (!v31)
            goto LABEL_28;
        }
        v21 = a7;
      }
      else
      {
        v21 = a7;
        v32 = *(unint64_t **)(a1 + 8560);
      }
    }
    else
    {
LABEL_28:
      v21 = a7;
      v32 = (unint64_t *)(v28 + 40 * v29);
    }
    v40 = (unint64_t *)(v28 + 40 * v29);
    while (v32 != v40)
    {
      v41 = v32;
      v33 = v32 + 3;
      do
      {
        v34 = *v33 & 0xFFFFFFFFFFFFFFF8;
        if (!v34)
          break;
        if (sub_22E9D0854(*(_QWORD *)(v34 + 40), 0, a3, a4, 1))
        {
          v35 = sub_22E9C5678(v34);
          *(_QWORD *)&v50 = v34;
          *(_QWORD *)&v51 = v35;
          DWORD2(v51) = 0;
          v52 = 0;
          v54 = 0;
          v55 = 0;
          v53 = 0;
          memset(v49, 0, sizeof(v49));
          LOBYTE(v56) = v56 & 0xC0;
          v57 = 0uLL;
          *((_QWORD *)&v56 + 1) = 0;
          sub_22E8AB5B4((uint64_t)&v50, 1);
          v63[0] = (void **)v49;
          sub_22E6C60B8(v63);
          DWORD1(v51) = a4;
          LOBYTE(v56) = v56 & 0xEF;
          v45 = v52;
          v44[0] = v50;
          v44[1] = v51;
          memset(v46, 0, sizeof(v46));
          sub_22E6C6020(v46, v53, v54, 0x6DB6DB6DB6DB6DB7 * ((v54 - v53) >> 3));
          v47 = v56;
          v48 = v57;
          sub_22E9CF888(v21, (uint64_t)v44, *(_QWORD *)(a1 + 216));
          v63[0] = (void **)v46;
          sub_22E6C60B8(v63);
          v63[0] = (void **)&v53;
          sub_22E6C60B8(v63);
        }
        v33 = (_QWORD *)(v33[1] & 0xFFFFFFFFFFFFFFF8);
      }
      while (v33);
      v36 = v41 + 5;
      while (v36 != v30)
      {
        v37 = *v36;
        v36 += 5;
        if (v37 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v32 = v36 - 5;
          goto LABEL_42;
        }
      }
      v32 = v30;
LABEL_42:
      ;
    }
  }
  v38 = (uint64_t *)v21[30];
  v39 = *v38;
  *(_QWORD *)(v39 + 8) = v38[1];
  *(_QWORD *)v38[1] = v39;
  --v21[32];
  sub_22E9D8FB0((uint64_t)v38);
  if (v59 != v58)
    free(v59);
}

void sub_22E9BFAAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int *v6;
  int v7;
  const char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int HashValue;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  size_t v28;
  char *v29;
  const char *v30;
  size_t v31;
  uint64_t v32;
  _OWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  _BYTE *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  const char *v42;
  uint64_t *v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t i;
  int v50;
  int *v52;
  uint64_t *v53[2];
  __int128 v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _BYTE v72[24];
  _WORD v73[16];
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  if ((*(_BYTE *)(a2 + 11) & 0x40) == 0
    || (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 48))(a2, *(_QWORD *)(*(_QWORD *)(v3 + 88) + 15088)))
  {
    if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 40))(a2, *(_QWORD *)(v3 + 72)))
    {
      v4 = *(_QWORD *)(a2 + 24);
      if (v4)
      {
        v5 = *(int **)(a2 + 16);
        v6 = &v5[4 * v4];
        v52 = v6;
        while (1)
        {
          v7 = *v5;
          if (*v5 == *(_DWORD *)a1[1])
            break;
LABEL_68:
          v5 += 4;
          if (v5 == v6)
            return;
        }
        v8 = (const char *)*((_QWORD *)v5 + 1);
        *(_QWORD *)&v71 = v8;
        if (v8)
          v8 = (const char *)strlen(v8);
        *((_QWORD *)&v71 + 1) = v8;
        v70 = 0uLL;
        if ((v7 - 1) <= 1)
        {
          v9 = llvm::StringRef::find();
          if (v9 == -1)
          {
            v70 = v71;
            v71 = 0uLL;
          }
          else
          {
            v10 = *((_QWORD *)&v71 + 1);
            if (*((_QWORD *)&v71 + 1) >= v9)
              v11 = v9;
            else
              v11 = *((_QWORD *)&v71 + 1);
            if (*((_QWORD *)&v71 + 1) >= v9 + 2)
              v12 = v9 + 2;
            else
              v12 = *((_QWORD *)&v71 + 1);
            *(_QWORD *)&v70 = v71;
            *((_QWORD *)&v70 + 1) = v11;
            *(_QWORD *)&v71 = v71 + v12;
            *((_QWORD *)&v71 + 1) -= v12;
            if (v10 > v9 + 2)
              goto LABEL_21;
          }
          v13 = v70;
          v70 = v71;
          v71 = v13;
        }
LABEL_21:
        if (*(_DWORD *)a1[2] == 1)
        {
          if (*((_QWORD *)&v70 + 1))
          {
            v14 = a1[3];
            v15 = *(_DWORD *)(v14 + 16);
            if (v15)
            {
              v16 = *(_QWORD *)v14;
              HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue();
              v18 = 0;
              v19 = v15 - 1;
              v50 = 1;
              v20 = v70;
              for (i = v16; ; v16 = i)
              {
                v21 = HashValue & v19;
                v22 = v16 + 16 * (HashValue & v19);
                v23 = *(const void **)v22;
                if (*(_QWORD *)v22 == -1)
                {
                  if ((_QWORD)v20 == -1)
                    goto LABEL_67;
                }
                else if (v23 == (const void *)-2)
                {
                  if ((_QWORD)v20 == -2)
                    goto LABEL_67;
                }
                else if (*((_QWORD *)&v20 + 1) == *(_QWORD *)(v22 + 8))
                {
                  if (!*((_QWORD *)&v20 + 1))
                    goto LABEL_67;
                  v24 = v18;
                  v25 = memcmp((const void *)v20, *(const void **)v22, *((size_t *)&v20 + 1));
                  v18 = v24;
                  if (!v25)
                    goto LABEL_67;
                }
                if (v23 == (const void *)-1)
                  break;
                if (v18)
                  v26 = 0;
                else
                  v26 = v23 == (const void *)-2;
                if (v26)
                  v18 = v22;
                HashValue = v50 + v21;
                ++v50;
              }
              if (v18)
                v32 = v18;
              else
                v32 = v22;
            }
            else
            {
              v32 = 0;
            }
            v33 = (_OWORD *)sub_22E4CCD0C(v14, (uint64_t)&v70, (const void **)&v70, v32);
            *v33 = v70;
            v34 = (uint64_t *)a1[4];
            v35 = v34[24];
            v73[4] = 261;
            *(_OWORD *)v72 = v70;
            v36 = sub_22F2F27DC(v35, (const char **)v72);
            *(_QWORD *)&v62 = 0;
            *((_QWORD *)&v62 + 1) = v36;
            v63 = xmmword_22F469F50;
            v64 = 0;
            v66 = 0;
            v67 = 0;
            v65 = 0;
            LOBYTE(v68) = v68 & 0xC0;
            v69 = 0uLL;
            *((_QWORD *)&v68 + 1) = 0;
            v37 = v34[1];
            if (v37 >= v34[2])
            {
              v41 = sub_22E9D8E48(v34, (uint64_t)&v62);
            }
            else
            {
              v38 = v62;
              v39 = v63;
              *(_DWORD *)(v37 + 32) = v64;
              *(_OWORD *)v37 = v38;
              *(_OWORD *)(v37 + 16) = v39;
              *(_QWORD *)(v37 + 40) = 0;
              *(_QWORD *)(v37 + 48) = 0;
              *(_QWORD *)(v37 + 56) = 0;
              sub_22E6C6020((_QWORD *)(v37 + 40), v65, v66, 0x6DB6DB6DB6DB6DB7 * ((v66 - v65) >> 3));
              v40 = v69;
              *(_OWORD *)(v37 + 64) = v68;
              *(_OWORD *)(v37 + 80) = v40;
              v41 = v37 + 96;
            }
            v34[1] = v41;
            v53[0] = &v65;
            sub_22E6C60B8((void ***)v53);
            v42 = sub_22E9D9E44((unsigned __int16 *)v70, *((uint64_t *)&v70 + 1));
            if (v42)
            {
              v43 = (uint64_t *)a1[4];
              *(_QWORD *)&v54 = 0;
              *((_QWORD *)&v54 + 1) = v42;
              v55 = xmmword_22F469F50;
              v56 = 0;
              v58 = 0;
              v59 = 0;
              v57 = 0;
              LOBYTE(v60) = v60 & 0xC0;
              v61 = 0uLL;
              *((_QWORD *)&v60 + 1) = 0;
              v44 = v43[1];
              if (v44 >= v43[2])
              {
                v48 = sub_22E9D8E48(v43, (uint64_t)&v54);
              }
              else
              {
                v45 = v54;
                v46 = v55;
                *(_DWORD *)(v44 + 32) = v56;
                *(_OWORD *)v44 = v45;
                *(_OWORD *)(v44 + 16) = v46;
                *(_QWORD *)(v44 + 40) = 0;
                *(_QWORD *)(v44 + 48) = 0;
                *(_QWORD *)(v44 + 56) = 0;
                sub_22E6C6020((_QWORD *)(v44 + 40), v57, v58, 0x6DB6DB6DB6DB6DB7 * ((v58 - v57) >> 3));
                v47 = v61;
                *(_OWORD *)(v44 + 64) = v60;
                *(_OWORD *)(v44 + 80) = v47;
                v48 = v44 + 96;
              }
              v43[1] = v48;
              *(_QWORD *)v72 = &v57;
              sub_22E6C60B8((void ***)v72);
            }
          }
          goto LABEL_67;
        }
        v27 = a1[5];
        v28 = *(_QWORD *)(v27 + 8);
        if (v28)
        {
          if (*((_QWORD *)&v70 + 1) != v28 || memcmp((const void *)v70, *(const void **)v27, v28))
            goto LABEL_67;
          *(_QWORD *)&v70 = "";
          *((_QWORD *)&v70 + 1) = 0;
        }
        v53[0] = (uint64_t *)a1[4];
        v53[1] = (uint64_t *)a2;
        if (!*(_BYTE *)a1[6])
          sub_22E9D9EB8(v53, (void *)v70, *((size_t *)&v70 + 1), (void *)v71, *((size_t *)&v71 + 1), 0);
        if (*(_QWORD *)a1[7] && !*(_BYTE *)a1[6] || !*(_BYTE *)a1[8])
          goto LABEL_67;
        *(_QWORD *)v72 = v73;
        *(_OWORD *)&v72[8] = xmmword_22F44E330;
        v29 = (char *)v70;
        if (!*((_QWORD *)&v70 + 1))
        {
          v31 = 0;
LABEL_65:
          sub_22E9D9EB8(v53, v29, v31, (void *)v71, *((size_t *)&v71 + 1), 1);
          if (*(_WORD **)v72 != v73)
            free(*(void **)v72);
          goto LABEL_67;
        }
        v30 = sub_22E9D9E44((unsigned __int16 *)v70, *((uint64_t *)&v70 + 1));
        if (v30)
        {
          v29 = (char *)v30;
          v31 = strlen(v30);
          goto LABEL_65;
        }
LABEL_67:
        v6 = v52;
        goto LABEL_68;
      }
    }
  }
}

char **sub_22E9C0008(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  BOOL (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t *v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t last_not_of;
  uint64_t v53;
  unint64_t v54;
  unint64_t first_not_of;
  unint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  int v68;
  __int128 v69[3];
  void *v70;
  int v71;
  char v72;
  void *v73;
  void *v74;
  _QWORD v75[3];
  _QWORD v76[5];
  uint64_t v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD v81[21];
  __int128 v82;
  BOOL (*v83)(uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  __int128 v88[11];
  __int128 v89;
  __int128 v90;
  int v91;
  _QWORD v92[3];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  char __p[21];
  char v98;
  uint64_t v99;
  __int128 v100;
  _BYTE v101[40];
  __int128 v102;
  __int128 v103;
  void *v104;
  uint64_t v105;
  int v106;
  _BYTE v107[16];
  void *v108;
  uint64_t v109;
  _QWORD v110[8];

  v110[5] = *MEMORY[0x24BDAC8D0];
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  if (*((_BYTE *)a3 + 10))
    v8 = 29;
  else
    v8 = 8;
  v9 = *a3;
  LODWORD(v100) = v8;
  BYTE4(v100) = 0;
  LOBYTE(v103) = 0;
  *((_QWORD *)&v103 + 1) = v107;
  v104 = v107;
  v105 = 8;
  v106 = 0;
  memset(v101, 0, 25);
  *((_QWORD *)&v100 + 1) = v9;
  sub_22E9B831C((uint64_t)&v78, a1, v6, v7, &v100, 0, 0);
  if (v104 != *((void **)&v103 + 1))
    free(v104);
  if ((_BYTE)v103 && HIDWORD(v102))
    free((void *)v102);
  if (*((_BYTE *)a3 + 10))
    v10 = 13;
  else
    v10 = 7;
  if (*((_BYTE *)a3 + 9))
  {
    v11 = sub_22E9C09D0;
  }
  else if (*((_BYTE *)a3 + 8))
  {
    v11 = sub_22E9C0AD8;
  }
  else if (sub_22E9B87B4(v10))
  {
    v11 = sub_22E9B8804;
  }
  else
  {
    v11 = sub_22E9B8894;
  }
  v83 = v11;
  v84 = 0;
  if ((unint64_t)*a3 >= 0x10)
  {
    v12 = *(_QWORD *)(*a3 & 0xFFFFFFFFFFFFFFF0);
    if (!v12 || (v13 = *(_DWORD *)(v12 + 16), (v13 & 0xFE) != 0x28))
    {
      v14 = a3;
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
        || (v12 = sub_22F10CF48(v12), v14 = a3, !v12))
      {
LABEL_23:
        v85 = *v14 & 7 | *(_QWORD *)((*v14 & 0xFFFFFFFFFFFFFFF0) + 8);
        goto LABEL_24;
      }
      v13 = *(_DWORD *)(v12 + 16);
    }
    if ((v13 & 0x100000) != 0)
    {
      do
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v12)
        {
          v68 = *(_DWORD *)(v12 + 16);
          if ((v68 & 0xFE) == 0x28)
            continue;
        }
        v12 = sub_22F10CF48(v12);
        v68 = *(_DWORD *)(v12 + 16);
      }
      while ((v68 & 0x100000) != 0);
    }
    v14 = (_QWORD *)(v12 + 32);
    goto LABEL_23;
  }
LABEL_24:
  v15 = *((unsigned int *)a3 + 6);
  if ((_DWORD)v15)
  {
    v16 = 0;
    v17 = 8 * v15;
    do
    {
      v18 = (const void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3[2] + v16) + 32))(*(_QWORD *)(a3[2] + v16));
      sub_22E3BA850((uint64_t)v81, v18);
      v16 += 8;
    }
    while (v17 != v16);
  }
  v19 = *(_QWORD *)(a1 + 216);
  memset(v75, 0, sizeof(v75));
  sub_22E9B8FE8((uint64_t)v76, (uint64_t)&v78, v19, 0, (uint64_t)v75);
  *(_QWORD *)&v100 = v75;
  sub_22E6C60B8((void ***)&v100);
  sub_22EC67A18((_QWORD *)a1, (uint64_t **)a2, 0, (uint64_t)v76, (*(_BYTE *)(*(_QWORD *)(a1 + 208) + 8) & 4) != 0, (*(_BYTE *)(*(_QWORD *)(a1 + 208) + 8) & 0x20) != 0);
  v20 = operator new(0x28uLL);
  v20[2] = 0;
  v20[3] = 0;
  *((_DWORD *)v20 + 8) = 0;
  v21 = v86;
  *v20 = v86;
  v20[1] = &v86;
  v21[1] = v20;
  v86 = v20;
  ++v87;
  sub_22E9B90C4();
  v22 = (uint64_t)v86;
  v23 = *v86;
  *(_QWORD *)(v23 + 8) = v86[1];
  **(_QWORD **)(v22 + 8) = v23;
  --v87;
  sub_22E9D8FB0(v22);
  v24 = 0;
  if ((unint64_t)*a3 >= 0x10)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v26 = *(unsigned __int8 *)(v25 + 16);
    v24 = (v26 < 0x28) & (0x8180000400uLL >> v26);
    if (v26 == 44)
    {
      v27 = sub_22F114198(*(_QWORD *)(v25 + 24));
      v28 = sub_22EFC3500(v27);
      v29 = *(_QWORD *)(a1 + 88);
      v30 = v28 ? v28 : v27;
      v31 = *(_QWORD *)(a1 + 216);
      v105 = 0;
      v104 = 0;
      v103 = 0u;
      v102 = 0u;
      memset(&v101[8], 0, 32);
      *(_QWORD *)&v100 = &v101[16];
      *((_QWORD *)&v100 + 1) = &v101[16];
      *(_QWORD *)v101 = 8;
      sub_22E9C0BC0((unint64_t)&v78, v29, v30, v31, (uint64_t)&v100);
      if (*((_QWORD *)&v100 + 1) != (_QWORD)v100)
        free(*((void **)&v100 + 1));
    }
  }
  if (*(_QWORD *)(a2 + 24) && !*((_BYTE *)a3 + 9) && !*((_BYTE *)a3 + 8))
    sub_22E9BE678(*(_WORD **)(a1 + 72), (uint64_t *)&v78);
  v32 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 208) + 8);
  if ((v32 & 1) != 0)
    sub_22E9BE8B8(*(_QWORD *)(a1 + 80), (uint64_t *)&v78, (v32 >> 5) & 1, 0, v24);
  v33 = *a3;
  if ((unint64_t)*a3 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 2) != 0)
  {
    v34 = (uint64_t *)(v33 & 0xFFFFFFFFFFFFFFF0);
    v35 = sub_22F10D628(*(_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF0));
    if (v35)
    {
      if (*(_DWORD *)(v35 + 20) != 1 || *(_DWORD *)(v35 + 40) != 1)
        goto LABEL_92;
      v37 = (uint64_t *)(*(_QWORD *)(v35 + 48) & 0xFFFFFFFFFFFFFFF0);
    }
    else
    {
      v36 = *v34;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v34 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
      {
LABEL_49:
        if (v36 && *(_BYTE *)(v36 + 16) == 26
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
          && (v36 = sub_22F10CF48(v36)) != 0)
        {
          v38 = *(_QWORD *)(v81[20] + 208);
          if (v38)
          {
            if ((*(_BYTE *)(v38 + 8) & 2) != 0)
            {
              v39 = (unsigned __int16)(*(_QWORD *)(v36 + 16) >> 38);
              v40 = *(unsigned int **)(a1 + 72);
              v100 = v82;
              memset(v101, 0, 32);
              *(_QWORD *)&v101[32] = (char *)&v102 + 8;
              *(_QWORD *)&v102 = 0x400000000;
              v108 = v110;
              v109 = 0x200000000;
              sub_22E8A9D90((uint64_t)&v100, 9, "");
              sub_22E8A9C00((uint64_t)&v100, (uint64_t)"=");
              sub_22E8A9D90((uint64_t)&v100, 10, "");
              if (v39)
              {
                v41 = (uint64_t *)(v36 + 40);
                sub_22E8A9D90((uint64_t)&v100, 7, "");
                v42 = 8 * v39;
                v43 = 1;
                do
                {
                  v99 = *v41;
                  if ((v43 & 1) == 0)
                    sub_22E8A9D90((uint64_t)&v100, 15, "");
                  v98 = 20;
                  strcpy(__p, "!#!NAME_GOES_HERE!#!");
                  sub_22E462F04((unint64_t *)&v89, v40);
                  sub_22F119374(&v99, (__int128 *)__p, (uint64_t)&v89);
                  v96 = 0uLL;
                  v95 = 0uLL;
                  v44 = *(char **)__p;
                  if (v98 >= 0)
                    v44 = __p;
                  v45 = v98 & 0x7F;
                  if (v98 < 0)
                    v45 = *(_QWORD *)&__p[8];
                  *(_QWORD *)&v89 = v44;
                  *((_QWORD *)&v89 + 1) = v45;
                  v46 = llvm::StringRef::find();
                  if (v46 == -1)
                  {
                    v47 = 0;
                    v48 = 0;
                    v50 = *((_QWORD *)&v89 + 1);
                    v49 = v89;
                  }
                  else
                  {
                    v49 = v89;
                    if (*((_QWORD *)&v89 + 1) >= v46)
                      v50 = v46;
                    else
                      v50 = *((_QWORD *)&v89 + 1);
                    if (*((_QWORD *)&v89 + 1) >= v46 + 20)
                      v51 = v46 + 20;
                    else
                      v51 = *((_QWORD *)&v89 + 1);
                    v47 = v89 + v51;
                    v48 = *((_QWORD *)&v89 + 1) - v51;
                  }
                  *(_QWORD *)&v96 = v49;
                  *((_QWORD *)&v96 + 1) = v50;
                  *(_QWORD *)&v95 = v47;
                  *((_QWORD *)&v95 + 1) = v48;
                  last_not_of = llvm::StringRef::find_last_not_of();
                  if ((unint64_t)(last_not_of + 1) < *((_QWORD *)&v96 + 1))
                    v53 = last_not_of + 1;
                  else
                    v53 = *((_QWORD *)&v96 + 1);
                  v54 = *((_QWORD *)&v96 + 1) - v50 + v53;
                  if (*((_QWORD *)&v96 + 1) < v54)
                    v54 = *((_QWORD *)&v96 + 1);
                  *((_QWORD *)&v96 + 1) = v54;
                  first_not_of = llvm::StringRef::find_first_not_of();
                  if (first_not_of >= *((_QWORD *)&v95 + 1))
                    v56 = *((_QWORD *)&v95 + 1);
                  else
                    v56 = first_not_of;
                  *(_QWORD *)&v95 = v95 + v56;
                  *((_QWORD *)&v95 + 1) -= v56;
                  LOWORD(v91) = 261;
                  v89 = v96;
                  v57 = sub_22F2F27DC(v100, (const char **)&v89);
                  sub_22E8A9B38((uint64_t)&v100, (uint64_t)v57);
                  sub_22E8A9D90((uint64_t)&v100, 19, "");
                  sub_22E8A9C00((uint64_t)&v100, (uint64_t)"parameter");
                  LOWORD(v91) = 261;
                  v89 = v95;
                  v58 = sub_22F2F27DC(v100, (const char **)&v89);
                  sub_22E8A9B38((uint64_t)&v100, (uint64_t)v58);
                  if (v98 < 0)
                    operator delete(*(void **)__p);
                  v43 = 0;
                  ++v41;
                  v42 -= 8;
                }
                while (v42);
                sub_22E8A9D90((uint64_t)&v100, 8, "");
              }
              sub_22E8A9D90((uint64_t)&v100, 19, "");
              sub_22E8A9D90((uint64_t)&v100, 11, "");
              sub_22E8A9D90((uint64_t)&v100, 19, "");
              sub_22E8A9C00((uint64_t)&v100, (uint64_t)"body");
              sub_22E8A9D90((uint64_t)&v100, 19, "");
              sub_22E8A9D90((uint64_t)&v100, 12, "");
              v59 = sub_22F2F28A4((uint64_t)&v100);
              *(_QWORD *)&v89 = 0;
              *((_QWORD *)&v89 + 1) = v59;
              v90 = xmmword_22F469F30;
              v91 = 0;
              memset(v92, 0, sizeof(v92));
              LOBYTE(v93) = 0;
              *((_QWORD *)&v93 + 1) = 0;
              v94 = 0uLL;
              v60 = v79;
              if (v79 >= v80)
              {
                v64 = sub_22E9D8E48((uint64_t *)&v78, (uint64_t)&v89);
              }
              else
              {
                v61 = v89;
                v62 = v90;
                *(_DWORD *)(v79 + 32) = v91;
                *(_OWORD *)v60 = v61;
                *(_OWORD *)(v60 + 16) = v62;
                *(_QWORD *)(v60 + 48) = 0;
                *(_QWORD *)(v60 + 56) = 0;
                *(_QWORD *)(v60 + 40) = 0;
                v63 = v94;
                *(_OWORD *)(v60 + 64) = v93;
                *(_OWORD *)(v60 + 80) = v63;
                v64 = v60 + 96;
              }
              v79 = v64;
              *(_QWORD *)__p = v92;
              sub_22E6C60B8((void ***)__p);
              if (v108 != v110)
                free(v108);
              if (*(__int128 **)&v101[32] != (__int128 *)((char *)&v102 + 8))
                free(*(void **)&v101[32]);
            }
          }
        }
        goto LABEL_92;
      }
      v37 = (uint64_t *)(sub_22F10ACF8(*v34) & 0xFFFFFFFFFFFFFFF0);
    }
    v36 = *v37;
    goto LABEL_49;
  }
LABEL_92:
  v65 = *(_QWORD *)(a1 + 208);
  sub_22F2A4F2C((uint64_t)v69, v88);
  if ((char *)v79 == v78)
    v66 = 0;
  else
    v66 = v78;
  sub_22E9B83FC(a1, v65, v69, (uint64_t)v66, -1431655765 * ((v79 - (unint64_t)v78) >> 5));
  if (v74 != v73)
    free(v74);
  if (v72)
  {
    if (v71)
      free(v70);
    v72 = 0;
  }
  v76[0] = off_24FAB7520;
  *(_QWORD *)&v100 = &v77;
  sub_22E6C60B8((void ***)&v100);
  return sub_22E9B8490(&v78);
}

BOOL sub_22E9C09D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;

  v4 = *(_QWORD *)(a1 + 184);
  if ((*(_BYTE *)(*(_QWORD *)(v4 + 72) + 1) & 1) != 0)
  {
    if (!sub_22E9B8804(a1, a2))
      return 0;
  }
  else
  {
    result = sub_22E9B8894(a1, a2);
    if (!result)
      return result;
    v4 = *(_QWORD *)(a1 + 184);
  }
  v6 = sub_22E9B4528(*(_QWORD *)(v4 + 88), a2);
  if (v6 < 0x10)
    return 0;
  v7 = sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 88), v6) & 0xFFFFFFFFFFFFFFF0;
  v8 = *(_QWORD *)v7;
  v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if ((v9 - 32) < 3)
    return 1;
  if ((*(_BYTE *)(v8 + 16) == 32 || v9 == 32 && (v8 = sub_22F10CF48(v8)) != 0) && sub_22E5761BC(v8))
    return 1;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 72) + 1) & 1) == 0)
    return 0;
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45;
}

BOOL sub_22E9C0AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;
  unsigned int v4;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;

  v2 = a2;
  result = sub_22E9B8894(a1, a2);
  if (result)
  {
    v4 = *(_DWORD *)(v2 + 28) & 0x7F;
    if (v4 <= 0x2F && ((1 << v4) & 0xC00000060000) != 0)
    {
      v2 = sub_22EFBAEA4(v2);
      v4 = *(_DWORD *)(v2 + 28) & 0x7F;
    }
    if (v4 - 75 < 0xFFFFFFE5)
      return 0;
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v7 = *(_DWORD *)(v6 + 16);
    if (v6)
      v8 = v7 == 11;
    else
      v8 = 0;
    if (v8)
    {
      if (((*(_DWORD *)(v6 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
        return 1;
    }
    else
    {
      if (v6 && v7 == 44)
      {
        v9 = sub_22F114198(*(_QWORD *)(v6 + 24));
        return (*(_BYTE *)(v9 + 74) & 1) != 0 || *(_QWORD *)(v9 + 128) > 7uLL;
      }
      if (v7 == 9)
        return 1;
    }
    return 0;
  }
  return result;
}

void sub_22E9C0BC0(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  void **v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t *v17;
  uint64_t v18;
  _OWORD v19[2];
  int v20;
  _QWORD v21[3];
  __int128 v22;
  __int128 v23;
  _QWORD v24[3];
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  void **v33[2];

  v9 = *(_QWORD *)(a5 + 96);
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 2000) + 1) & 1) != 0 && !v9)
  {
    if (*(_DWORD *)(a5 + 20) == *(_DWORD *)(a5 + 24))
    {
      if (a3)
        v10 = a3 + 64;
      else
        v10 = 0;
      v9 = sub_22F0ABCB8(a2, a4, v10);
    }
    else
    {
      v9 = 0;
    }
  }
  v11 = operator new(0x28uLL);
  v11[2] = 0;
  v11[3] = 0;
  *((_DWORD *)v11 + 8) = 0;
  v12 = *(_QWORD *)(a1 + 240);
  *v11 = v12;
  v11[1] = a1 + 240;
  *(_QWORD *)(v12 + 8) = v11;
  *(_QWORD *)(a1 + 240) = v11;
  ++*(_QWORD *)(a1 + 256);
  v13 = sub_22E49F9AC(a3);
  sub_22EFC3500(a3);
  if (v13)
  {
LABEL_10:
    v14 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)a5, (void *)v13);
    v15 = *(_QWORD *)(a5 + 8);
    if (v15 == *(_QWORD *)a5)
      v16 = (unsigned int *)(a5 + 20);
    else
      v16 = (unsigned int *)(a5 + 16);
    if (v14 == (void **)(v15 + 8 * *v16))
    {
      *(_QWORD *)&v25 = v13;
      *(_QWORD *)&v26 = 7;
      DWORD2(v26) = 0;
      v27 = 0;
      v29 = 0;
      v30 = 0;
      v28 = 0;
      memset(v24, 0, sizeof(v24));
      LOBYTE(v31) = v31 & 0xC0;
      *((_QWORD *)&v31 + 1) = v9;
      v32 = 0uLL;
      sub_22E8AB5B4((uint64_t)&v25, 1);
      v33[0] = (void **)v24;
      sub_22E6C60B8(v33);
      v19[0] = v25;
      v19[1] = v26;
      v20 = v27;
      memset(v21, 0, sizeof(v21));
      sub_22E6C6020(v21, v28, v29, 0x6DB6DB6DB6DB6DB7 * ((v29 - v28) >> 3));
      v22 = v31;
      v23 = v32;
      sub_22E9C57E4(a1, v19, a4, 0, 0);
      v33[0] = (void **)v21;
      sub_22E6C60B8(v33);
      v33[0] = (void **)&v28;
      sub_22E6C60B8(v33);
    }
    while (1)
    {
      v13 = *(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v13)
        break;
      if ((*(_DWORD *)(v13 + 28) & 0x7F) == 0x43)
        goto LABEL_10;
    }
  }
  v17 = *(uint64_t **)(a1 + 240);
  v18 = *v17;
  *(_QWORD *)(v18 + 8) = v17[1];
  *(_QWORD *)v17[1] = v18;
  --*(_QWORD *)(a1 + 256);
  sub_22E9D8FB0((uint64_t)v17);
}

char **sub_22E9C0E00(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t *a7)
{
  char **result;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  const void *v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t i;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t *v75;
  _QWORD *v76;
  unint64_t v77;
  const void *v78;
  char v79;
  unint64_t v80;
  unsigned int v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  int v90;
  uint64_t v91;
  void **v92;
  void **v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t *v99;
  char v100;
  BOOL v101;
  unint64_t v102;
  unint64_t v103;
  int v104;
  unsigned int v105;
  BOOL v106;
  int v108;
  int v109;
  BOOL v110;
  int v111;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v118;
  char v119;
  char v120;
  char v121;
  char v122;
  char v123;
  uint64_t v124;
  int v125;
  uint64_t v127;
  unsigned int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t *v144;
  uint64_t v145;
  __int128 v146[3];
  void *v147;
  int v148;
  char v149;
  void *v150;
  void *v151;
  _OWORD v152[2];
  int v153;
  _QWORD v154[3];
  __int128 v155;
  __int128 v156;
  _QWORD v157[3];
  __int128 v158;
  __int128 v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  char v170;
  void *v171;
  int v172;
  char v173;
  _BYTE *v174;
  void *v175;
  uint64_t v176;
  int v177;
  _BYTE v178[64];
  char *v179;
  char *v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  __int128 v185[11];
  void **v186[3];

  if (a3)
  {
    result = (char **)sub_22EB1B954(a1, a3);
    if ((result & 1) != 0)
      return result;
    v14 = (unsigned __int8 *)((unint64_t)result & 0xFFFFFFFFFFFFFFFELL);
    if (((unint64_t)result & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
      v143 = a2;
      v21 = 0;
      v20 = *((_QWORD *)v14 + 1);
      goto LABEL_12;
    }
  }
  v15 = *(_QWORD *)(a1 + 88);
  v143 = a2;
  if (a7)
  {
    v19 = sub_22F36D148(v15, a7, 0);
    v18 = sub_22F36CC4C(v15, v19);
  }
  else
  {
    v16 = sub_22F36E1B8(v15);
    v17 = *(_QWORD *)(v16 + 48);
    if (v17)
    {
      v14 = 0;
      v20 = v17 & 0xFFFFFFFFFFFFFFF0;
      goto LABEL_11;
    }
    v18 = sub_22EF6462C(v15, v16);
  }
  v20 = v18;
  v14 = 0;
LABEL_11:
  v21 = 1;
LABEL_12:
  v22 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
  v145 = a4;
  if (((!v23 || *(_BYTE *)(v23 + 16) != 32)
     && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32
      || (v23 = sub_22F10CF48(v23)) == 0)
     || !sub_22E5761BC(v23))
    && (((v24 = *v22) == 0 || *(_BYTE *)(v24 + 16) != 32)
     && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32
      || (v24 = sub_22F10CF48(v24)) == 0)
     || !sub_22E509ED0(v24)))
  {
    if ((v21 & 1) == 0 && (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
    {
      v32 = sub_22F342A50((uint64_t *)a1, v14);
      if (v32 >= 2)
        v20 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    goto LABEL_50;
  }
  if ((v21 & 1) != 0 || *v14 != 200)
    goto LABEL_50;
  v25 = *((_DWORD *)v14 + 6);
  v26 = v14 + 16;
  v27 = (uint64_t *)(v14 + 16);
  if ((v25 & 0x1000000) != 0)
    v27 = (uint64_t *)(*v26 + 40);
  v28 = *v27;
  if (!v28)
    goto LABEL_50;
  v29 = v28 & 0xFFFFFFFFFFFFFFF8;
  if ((~(_BYTE)v28 & 7) == 0)
    v29 = *(_QWORD *)(v29 + 16);
  if ((v25 & 0x1000000) == 0)
    goto LABEL_50;
  if (!v29)
    goto LABEL_50;
  v30 = *v26;
  if (!*v26)
    goto LABEL_50;
  if (BYTE2(v25) == 1)
  {
    v33 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v14 + 5) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v33 || *(_BYTE *)(v33 + 16) != 32)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
        goto LABEL_50;
      v33 = sub_22F10CF48(v33);
      if (!v33)
        goto LABEL_50;
    }
    v34 = sub_22F31179C(v33);
  }
  else
  {
    if (BYTE2(v25))
      goto LABEL_50;
    if ((v25 & 0xFF0000) != 0)
    {
      v31 = 0;
    }
    else
    {
      v31 = *((_QWORD *)v14 + 5);
      if (v31)
        v31 = *(_QWORD *)v31;
    }
    v35 = sub_22E4EBB74(*(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF0));
    if (!v35)
      goto LABEL_50;
    v34 = sub_22F272660(v35);
  }
  v36 = (uint64_t *)v34;
  if (!v34)
    goto LABEL_50;
  v95 = sub_22F3B46CC(v34);
  v96 = *(uint64_t **)(v29 + 16);
  v97 = *v96;
  if ((*(_BYTE *)(v30 + 58) & 2) != 0)
  {
    v99 = 0;
    v100 = 0;
    switch((int)v97)
    {
      case 4:
        v101 = *((_DWORD *)v96 + 4) == 2037411683;
        goto LABEL_165;
      case 6:
        if (*((_DWORD *)v96 + 4) == 1635018098 && *((_WORD *)v96 + 10) == 28265)
          goto LABEL_163;
        v108 = *((_DWORD *)v96 + 4);
        v109 = *((unsigned __int16 *)v96 + 10);
        v110 = v108 == 1869771891;
        v111 = 26478;
        goto LABEL_227;
      case 11:
        if (v96[2] == 0x656C65726F747561 && *(uint64_t *)((char *)v96 + 19) == 0x657361656C65726FLL)
          goto LABEL_163;
        v130 = v96[2];
        v131 = *(uint64_t *)((char *)v96 + 19);
        v132 = v130 == 0x43656C626174756DLL;
        v133 = 0x79706F43656C6261;
        goto LABEL_217;
      case 12:
        v101 = (v96[2] ^ 0x6874695779706F63 | *((unsigned int *)v96 + 6) ^ 0x656E6F5ALL) == 0;
LABEL_165:
        v100 = v101;
        if (v101)
          v99 = v36;
        else
          v99 = 0;
        break;
      default:
        break;
    }
    v113 = *v96;
    if (v113 == 19 && (v100 & 1) == 0)
    {
      v114 = v96[2];
      v115 = v96[3];
      v116 = *(uint64_t *)((char *)v96 + 27);
      v118 = v114 == 0x43656C626174756DLL && v115 == 0x5A6874695779706FLL && v116 == 0x656E6F5A68746957;
LABEL_231:
      if (!v118)
        goto LABEL_50;
      goto LABEL_233;
    }
    if (v113 == 14)
      v119 = v100;
    else
      v119 = 1;
    if ((v119 & 1) != 0)
    {
      if (v113 == 26)
        v120 = v100;
      else
        v120 = 1;
      if ((v120 & 1) == 0)
      {
        v134 = v96[2];
        v135 = v96[3];
        v136 = v96[4];
        v109 = *((unsigned __int16 *)v96 + 20);
        v110 = v134 == 0x6D6563616C706572 && v135 == 0x63656A624F746E65 && v136 == 0x646F436D6F724674;
        v111 = 29285;
        goto LABEL_227;
      }
      if (v113 == 5)
        v121 = v100;
      else
        v121 = 1;
      if ((v121 & 1) == 0)
      {
LABEL_216:
        v129 = *((_DWORD *)v96 + 4);
        v109 = *((unsigned __int8 *)v96 + 20);
        v110 = v129 == 1935764579;
        v111 = 115;
LABEL_227:
        v118 = v110 && v109 == v111;
LABEL_230:
        a6 = a6;
        goto LABEL_231;
      }
      if (v113 == 13)
        v122 = v100;
      else
        v122 = 1;
      if ((v122 & 1) != 0)
      {
        if (v113 == 10)
          v123 = v100;
        else
          v123 = 1;
        if ((v123 & 1) != 0)
        {
          v95 = (uint64_t)v99;
          if ((v100 & 1) == 0)
            goto LABEL_200;
LABEL_206:
          v36 = (uint64_t *)v95;
          a6 = a6;
          if (!v95)
            goto LABEL_50;
          goto LABEL_233;
        }
LABEL_201:
        v124 = v96[2];
        v125 = *((unsigned __int16 *)v96 + 12);
        if (v124 != 0x616C637265707573 || v125 != 29555)
          goto LABEL_200;
        goto LABEL_206;
      }
      v142 = v96[2];
      v131 = *(uint64_t *)((char *)v96 + 21);
      v132 = v142 == 0x726F467373616C63;
      v128 = 1131573062;
    }
    else
    {
      v127 = v96[2];
      v131 = *(uint64_t *)((char *)v96 + 22);
      v132 = v127 == 0x6F7246656B617761;
      v128 = 1131245426;
    }
    v133 = v128 | 0x7265646F00000000;
LABEL_217:
    v118 = v132 && v131 == v133;
    goto LABEL_230;
  }
  if ((int)v97 > 9)
  {
    if ((_DWORD)v97 != 10)
    {
      if ((_DWORD)v97 != 13)
        goto LABEL_200;
      v102 = 0x616C6C6F63576974;
      v103 = bswap64(v96[2]);
      if (v103 == 0x616C6C6F63576974)
      {
        v102 = 0x576974685A6F6E65;
        v103 = bswap64(*(uint64_t *)((char *)v96 + 21));
        if (v103 == 0x576974685A6F6E65)
        {
          v104 = 0;
          goto LABEL_212;
        }
      }
      v106 = v103 >= v102;
      goto LABEL_209;
    }
    goto LABEL_201;
  }
  if ((_DWORD)v97 == 3)
  {
    v105 = bswap32(*((unsigned __int16 *)v96 + 8)) >> 16;
    v106 = v105 >= 0x6E65;
    if (v105 == 28261)
    {
      v104 = *((unsigned __int8 *)v96 + 18) - 119;
      goto LABEL_212;
    }
LABEL_209:
    if (v106)
      v104 = 1;
    else
      v104 = -1;
LABEL_212:
    a6 = a6;
    if (v104)
      goto LABEL_50;
    goto LABEL_233;
  }
  if ((_DWORD)v97 != 5)
  {
LABEL_200:
    a6 = a6;
    goto LABEL_50;
  }
  if (*((_DWORD *)v96 + 4) != 1869376609 || *((_BYTE *)v96 + 20) != 99)
    goto LABEL_216;
LABEL_163:
  a6 = a6;
LABEL_233:
  v138 = *v22;
  if ((*v22 && *(_BYTE *)(v138 + 16) == 32
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v138 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
     && (v138 = sub_22F10CF48(v138)) != 0)
    && sub_22E509ED0(v138))
  {
    v139 = sub_22F36D148(*(_QWORD *)(a1 + 88), v36, 0);
    return sub_22F3172C0(a1, v143, v139, a4, a5, a6, a7 != 0);
  }
  v140 = *(_QWORD *)(a1 + 88);
  v141 = sub_22F36D148(v140, v36, 0);
  v20 = sub_22F36CC4C(v140, v141);
LABEL_50:
  v37 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v38 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  LODWORD(v166) = 30;
  BYTE4(v166) = 0;
  v168 = a4;
  v169 = a5;
  v170 = 0;
  v173 = 0;
  v174 = v178;
  v175 = v178;
  v176 = 8;
  v177 = 0;
  *((_QWORD *)&v166 + 1) = 0;
  v167 = v20;
  sub_22E9B831C((uint64_t)&v179, a1, v37, v38, &v166, 0, 0);
  if (v175 != v174)
    free(v175);
  if (v173 && v172)
    free(v171);
  v39 = operator new(0x28uLL);
  v39[2] = 0;
  v39[3] = 0;
  *((_DWORD *)v39 + 8) = 0;
  v40 = v182;
  *v39 = v182;
  v39[1] = &v182;
  v40[1] = v39;
  v182 = v39;
  ++v183;
  if (a7)
  {
    v41 = sub_22E9CF1FC(a1, 0, a4, a5, (uint64_t)&v179);
    if (v41)
    {
      v42 = (const void *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v41 + 32))(v41);
      sub_22E3BA850((uint64_t)&v181, v42);
    }
  }
  v43 = sub_22E90328C(a1);
  if (v43)
    v184 = *(_QWORD *)(v43 + 40);
  *(_QWORD *)&v166 = &v169;
  *((_QWORD *)&v166 + 1) = &v169;
  v167 = 16;
  LODWORD(v168) = 0;
  v44 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFF0);
  v45 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
  if ((v45 && *(_BYTE *)(v45 + 16) == 32
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v45 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
     && (v45 = sub_22F10CF48(v45)) != 0)
    && sub_22E509ED0(v45)
    || ((v46 = *v44) != 0 && *(_BYTE *)(v46 + 16) == 32
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v46 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
     && (v46 = sub_22F10CF48(v46)) != 0)
    && sub_22E509F54(v46))
  {
    v47 = sub_22E90328C(a1);
    v48 = a4;
    v49 = a6;
    i = a1;
    if (v47)
    {
      v51 = sub_22EFDC9F0(v47);
      if (v51)
        sub_22E9CDBBC(v51, 0, 0, v48, a5, *(_QWORD *)(a1 + 216), (uint64_t)&v166, a6, (uint64_t *)&v179, 1, 0);
    }
    goto LABEL_109;
  }
  v52 = sub_22F40A18C(*v44);
  if (v52)
  {
    v55 = sub_22F3174CC(v52);
    i = a1;
    v57 = a4;
    v49 = a6;
    if ((uint64_t *)v55 != v56)
    {
      v58 = (uint64_t *)v55;
      v59 = v56;
      do
      {
        v60 = *v58++;
        sub_22E9CDBBC(v60, 1, 0, v57, a5, *(_QWORD *)(i + 216), (uint64_t)&v166, a6, (uint64_t *)&v179, 1, 0);
      }
      while (v58 != v59);
    }
    goto LABEL_109;
  }
  v53 = sub_22F40A264(*v44);
  if (v53)
  {
    v61 = v53;
    v62 = sub_22F31179C(v53);
    v63 = *(_QWORD *)(a1 + 216);
    i = a1;
    v64 = a4;
    v49 = a6;
    sub_22E9CDBBC(v62, 1, 0, v64, a5, v63, (uint64_t)&v166, a6, (uint64_t *)&v179, 1, 0);
    v65 = sub_22F3174CC(v61);
    if ((uint64_t *)v65 != v66)
    {
      v67 = (uint64_t *)v65;
      v68 = v66;
      do
      {
        v69 = *v67++;
        sub_22E9CDBBC(v69, 1, 0, v64, a5, *(_QWORD *)(i + 216), (uint64_t)&v166, a6, (uint64_t *)&v179, 1, 0);
      }
      while (v67 != v68);
    }
    goto LABEL_109;
  }
  v54 = *v44;
  if (*v44 && *(_BYTE *)(v54 + 16) == 32)
  {
    v49 = a6;
    i = a1;
    goto LABEL_89;
  }
  v49 = a6;
  i = a1;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v54 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
  {
    v54 = sub_22F10CF48(v54);
    if (v54)
    {
LABEL_89:
      if (sub_22E5761BC(v54))
      {
        v70 = *(_QWORD *)(i + 8);
        if (v70)
        {
          v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 32))(v70);
          if (v71)
          {
            v90 = v71;
            v91 = 0;
            do
            {
              v92 = (void **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(i + 8) + 24))(*(_QWORD *)(i + 8), v91);
              if (v92)
              {
                v93 = v92;
                v186[0] = v92;
                *(_QWORD *)&v158 = 0;
                if ((sub_22F2BB328((uint64_t *)(i + 8560), v186, &v158) & 1) == 0)
                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(i + 8) + 232))(*(_QWORD *)(i + 8), v93);
              }
              v91 = (v91 + 1);
            }
            while (v90 != (_DWORD)v91);
          }
        }
        v72 = *(_QWORD *)(i + 8560);
        v73 = *(unsigned int *)(i + 8576);
        v74 = (unint64_t *)(v72 + 40 * v73);
        if (*(_DWORD *)(i + 8568))
        {
          if ((_DWORD)v73)
          {
            v94 = 40 * v73;
            v75 = *(unint64_t **)(i + 8560);
            while (*v75 >= 0xFFFFFFFFFFFFFFFELL)
            {
              v75 += 5;
              v94 -= 40;
              if (!v94)
                goto LABEL_93;
            }
          }
          else
          {
            v75 = *(unint64_t **)(i + 8560);
          }
        }
        else
        {
LABEL_93:
          v75 = (unint64_t *)(v72 + 40 * v73);
        }
        v144 = (unint64_t *)(v72 + 40 * v73);
        v49 = a6;
        for (i = a1; v75 != v144; v49 = a6)
        {
          v76 = v75 + 1;
          do
          {
            v77 = *v76 & 0xFFFFFFFFFFFFFFF8;
            if (!v77)
              break;
            v78 = *(const void **)(v77 + 40);
            if (sub_22E9D0854((uint64_t)v78, 0, v145, a5, 1))
            {
              sub_22E3BA850((uint64_t)&v166, v78);
              if (v79)
              {
                v80 = *v76 & 0xFFFFFFFFFFFFFFF8;
                v81 = sub_22E9C5678(v80);
                *(_QWORD *)&v158 = v80;
                *(_QWORD *)&v159 = v81;
                DWORD2(v159) = 0;
                v160 = 0;
                v162 = 0;
                v163 = 0;
                v161 = 0;
                memset(v157, 0, sizeof(v157));
                LOBYTE(v164) = v164 & 0xC0;
                v165 = 0uLL;
                *((_QWORD *)&v164 + 1) = 0;
                sub_22E8AB5B4((uint64_t)&v158, 1);
                v186[0] = (void **)v157;
                sub_22E6C60B8(v186);
                DWORD1(v159) = a5;
                LOBYTE(v164) = v164 & 0xEF;
                v153 = v160;
                v152[0] = v158;
                v152[1] = v159;
                memset(v154, 0, sizeof(v154));
                sub_22E6C6020(v154, v161, v162, 0x6DB6DB6DB6DB6DB7 * ((v162 - v161) >> 3));
                v155 = v164;
                v156 = v165;
                sub_22E9CF888((uint64_t *)&v179, (uint64_t)v152, *(_QWORD *)(a1 + 216));
                v186[0] = (void **)v154;
                sub_22E6C60B8(v186);
                v186[0] = (void **)&v161;
                sub_22E6C60B8(v186);
              }
            }
            v76 = (_QWORD *)(v76[1] & 0xFFFFFFFFFFFFFFF8);
          }
          while (v76);
          v82 = v75 + 5;
          while (v82 != v74)
          {
            v83 = *v82;
            v82 += 5;
            if (v83 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v75 = v82 - 5;
              goto LABEL_108;
            }
          }
          v75 = v74;
LABEL_108:
          ;
        }
      }
    }
  }
LABEL_109:
  v84 = (uint64_t)v182;
  v85 = *v182;
  *(_QWORD *)(v85 + 8) = v182[1];
  **(_QWORD **)(v84 + 8) = v85;
  --v183;
  sub_22E9D8FB0(v84);
  if (v49)
  {
    v86 = sub_22E9CF7B8((uint64_t)v179, (uint64_t)v180, a5);
    if (v86 > 0xF)
      sub_22F313C2C(i, v143, v86, 0);
    else
      sub_22F313608(i, v143, 7u);
  }
  else
  {
    v87 = i;
    v88 = *(_QWORD *)(i + 208);
    sub_22F2A4F2C((uint64_t)v146, v185);
    if (v180 == v179)
      v89 = 0;
    else
      v89 = v179;
    sub_22E9B83FC(v87, v88, v146, (uint64_t)v89, -1431655765 * ((unint64_t)(v180 - v179) >> 5));
    if (v151 != v150)
      free(v151);
    if (v149)
    {
      if (v148)
        free(v147);
      v149 = 0;
    }
  }
  if (*((_QWORD *)&v166 + 1) != (_QWORD)v166)
    free(*((void **)&v166 + 1));
  return sub_22E9B8490(&v179);
}

void sub_22E9C1BFC(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned int a5, int a6, char a7, uint64_t a8)
{
  _QWORD *v11;
  _QWORD *v12;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  int v27;
  char *v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34[3];
  void *v35;
  int v36;
  char v37;
  void *v38;
  void *v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  void *v44;
  _BYTE v45[15];
  char v46;
  char v47;
  char v48;
  char v49[24];
  void *__p;
  char v51;
  char v52;
  _QWORD v53[5];
  char *v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  __int128 v58[11];
  __int128 v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  void *v64;
  int v65;
  char v66;
  _BYTE *v67;
  void *v68;
  uint64_t v69;
  int v70;
  _BYTE v71[71];
  char v72;
  uint64_t v73;
  void *__dst;
  _BYTE v75[15];
  char v76;

  v11 = a4;
  v12 = a3;
  v73 = a2;
  v72 = a7;
  if (!a3 || *a3 != 215)
  {
LABEL_5:
    if (!a4)
      goto LABEL_12;
    goto LABEL_6;
  }
  v14 = *((_DWORD *)a3 + 1);
  if (v14)
  {
    v12 = *(_QWORD **)&a3[8 * (v14 - 1) + 24];
    goto LABEL_5;
  }
  v12 = 0;
  if (!a4)
    goto LABEL_12;
LABEL_6:
  if (*a4 == 215)
  {
    v15 = *((_DWORD *)a4 + 1);
    if (v15)
      v11 = *(_QWORD **)&a4[8 * (v15 - 1) + 24];
    else
      v11 = 0;
  }
LABEL_12:
  if (v12)
  {
    if (*(_QWORD *)(a1 + 208))
    {
      v16 = sub_22EC2624C(a1, v12, a6);
      if ((v16 & 1) == 0)
      {
        v17 = sub_22E9C1FE0((unsigned __int8 *)(v16 & 0xFFFFFFFFFFFFFFFELL));
        v18 = *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0);
        if (a6)
        {
          if (v18 && *(_BYTE *)(v18 + 16) == 39
            || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
            && (v18 = sub_22F10CF48(v18)) != 0)
          {
            v17 = *(_QWORD *)(v18 + 32);
          }
          v19 = 11;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
          if ((v20 - 33) >= 2)
            v21 = 10;
          else
            v21 = 12;
          if (v20 == 32)
            v19 = 12;
          else
            v19 = v21;
        }
        LODWORD(v59) = v19;
        BYTE4(v59) = 0;
        v66 = 0;
        v62 = 0;
        v61 = 0;
        v63 = 0;
        v67 = v71;
        v68 = v71;
        v69 = 8;
        v70 = 0;
        v60 = v17;
        *((_QWORD *)&v59 + 1) = a8;
        v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
        v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
        sub_22E9B831C((uint64_t)&v54, a1, v22, v23, &v59, (uint64_t)sub_22E9C2584, 0);
        v53[0] = a1;
        v53[1] = &v54;
        v53[2] = &v73;
        v53[3] = &v59;
        v53[4] = &v72;
        v24 = operator new(0x28uLL);
        v24[2] = 0;
        v24[3] = 0;
        *((_DWORD *)v24 + 8) = 0;
        v25 = v56;
        *v24 = v56;
        v24[1] = &v56;
        v25[1] = v24;
        v56 = v24;
        ++v57;
        v49[0] = 0;
        v52 = 0;
        v26 = sub_22E9C25E0((uint64_t)v53, v12, a6, v49);
        if (v52 && v51 < 0)
          operator delete(__p);
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 208) + 8) & 0x40) != 0)
        {
          v27 = a6 ^ 1;
          v28 = a6 ? "." : "->";
          v29 = a6 ? 1 : 2;
          v76 = v29;
          memcpy(&__dst, v28, v29);
          *(_BYTE *)((unint64_t)&__dst | v29) = 0;
          v44 = __dst;
          *(_QWORD *)v45 = *(_QWORD *)v75;
          *(_QWORD *)&v45[7] = *(_QWORD *)&v75[7];
          v40 = a5 | ((unint64_t)a5 << 32);
          v41 = 1;
          v42 = 0;
          v43 = 0;
          v46 = v76;
          v47 = 0;
          v48 = 1;
          v26 |= sub_22E9C25E0((uint64_t)v53, v11, v27, (char *)&v40);
          if (v48)
          {
            if (v46 < 0)
              operator delete(v44);
          }
        }
        v30 = (uint64_t)v56;
        v31 = *v56;
        *(_QWORD *)(v31 + 8) = v56[1];
        **(_QWORD **)(v30 + 8) = v31;
        --v57;
        sub_22E9D8FB0(v30);
        if (v26)
        {
          v32 = *(_QWORD *)(a1 + 208);
          sub_22F2A4F2C((uint64_t)v34, v58);
          if (v55 == v54)
            v33 = 0;
          else
            v33 = v54;
          sub_22E9B83FC(a1, v32, v34, (uint64_t)v33, -1431655765 * ((unint64_t)(v55 - v54) >> 5));
          if (v39 != v38)
            free(v39);
          if (v37)
          {
            if (v36)
              free(v35);
            v37 = 0;
          }
        }
        sub_22E9B8490(&v54);
        if (v68 != v67)
          free(v68);
        if (v66)
        {
          if (v65)
            free(v64);
        }
      }
    }
  }
}

unint64_t sub_22E9C1FE0(unsigned __int8 *a1)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  unsigned int *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  uint64_t v25;
  int v26;
  unint64_t *v27;
  unsigned __int8 *v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unint64_t v37;
  BOOL v38;
  BOOL v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  char v50;
  unint64_t *v51;
  unint64_t *v52;

  v1 = *((_QWORD *)a1 + 1);
  if (v1 < 0x10)
    return v1;
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v3 = v2 && (*(_DWORD *)(v2 + 16) & 0xFF800FF) == 135790603;
  if (!v3)
    return v1;
  do
  {
    v6 = (unsigned int *)a1;
    LODWORD(v7) = *a1;
    if (v7 > 0xD5)
    {
      if ((_DWORD)v7 == 233)
      {
        LODWORD(v7) = *(_DWORD *)a1;
        if ((*(_DWORD *)a1 & 0x7C0000) != 0x300000)
          break;
        v8 = a1 + 16;
      }
      else
      {
        if ((_DWORD)v7 != 214)
          break;
        v8 = a1 + 24;
        LOBYTE(v7) = -42;
      }
    }
    else if ((_DWORD)v7 == 155)
    {
      if ((**((_DWORD **)a1 + 2) & 0x18000) != 0)
        return v1;
      v8 = a1 + 24;
      if (!a1[48])
        v8 = a1 + 32;
      LOBYTE(v7) = -101;
    }
    else
    {
      if ((_DWORD)v7 != 176)
        break;
      v7 = *((unsigned int *)a1 + 5);
      if ((_DWORD)v7 == -1)
        return v1;
      v8 = &a1[8 * v7 + 40];
      LOBYTE(v7) = -80;
    }
    a1 = *(unsigned __int8 **)v8;
  }
  while (*(unsigned int **)v8 != v6);
  if ((v7 + 113) < 0xFBu)
    goto LABEL_24;
  v10 = sub_22E9C1FE0(*(_QWORD *)((char *)v6 + *((unsigned __int8 *)v6 + 3)));
  if (v10 < 0x10
    || ((v11 = v10,
         v12 = v10 & 0xFFFFFFFFFFFFFFF0,
         v13 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0),
         (v14 = *(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0)) != 0)
      ? (v15 = (*(_DWORD *)(v14 + 16) & 0xFF800FF) == 136839179)
      : (v15 = 0),
        v15))
  {
    v16 = sub_22EFFAC68(*(unsigned __int8 **)((char *)v6 + *((unsigned __int8 *)v6 + 3)));
    if (v16 < 0x10)
      return v1;
    v11 = v16;
    v12 = v16 & 0xFFFFFFFFFFFFFFF0;
    v13 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0);
  }
  v17 = *(unsigned __int8 *)(v13 + 16);
  if (!v13 || v17 != 39)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
    {
LABEL_41:
      if (v17 != 10)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 10)
          goto LABEL_45;
        v13 = sub_22F10CF48(v13);
        if (!v13)
          goto LABEL_45;
      }
      goto LABEL_44;
    }
    v13 = sub_22F10CF48(v13);
    if (!v13)
    {
      v13 = *(_QWORD *)v12;
      v17 = *(unsigned __int8 *)(*(_QWORD *)v12 + 16);
      goto LABEL_41;
    }
  }
LABEL_44:
  v11 = *(_QWORD *)(v13 + 32);
LABEL_45:
  v18 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
  if (v18)
    v19 = *(unsigned __int8 *)(v18 + 16) - 27 > 0xFFFFFFFD;
  else
    v19 = 0;
  if (!v19
    && (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 > 1
     || (v18 = sub_22F10CF48(v18)) == 0))
  {
    v7 = *v6;
    v28 = *(unsigned __int8 **)((char *)v6 + (v7 >> 24));
    v29 = *v28;
    if ((v29 + 43) < 0xFEu)
      goto LABEL_24;
    v30 = v29 == 211;
    v31 = v29 == 211 ? *(_QWORD *)((char *)v6 + (v7 >> 24)) : 0;
    v32 = (unsigned __int8 *)(v31 + 64);
    v33 = v30 ? v32 : v28 + 80;
    v34 = *((unsigned int *)v28 + 1);
    if (!(_DWORD)v34)
      goto LABEL_24;
    v35 = 0;
    v36 = &v33[8 * v34];
    while (1)
    {
      v37 = *(_QWORD *)v33 & 0xFFFFFFFFFFFFFFFCLL;
      if (v37)
        v38 = (*(_DWORD *)(v37 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA;
      else
        v38 = 0;
      if (v38)
      {
        v40 = *(_QWORD *)(*(_QWORD *)(v37 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (v40)
          v42 = *(unsigned __int8 *)(v40 + 16) - 27 >= 0xFFFFFFFE;
        else
          v42 = 0;
        if (!v42)
          goto LABEL_104;
      }
      else
      {
        if (v37)
          v39 = (*(_DWORD *)(v37 + 28) & 0x7F) == 29;
        else
          v39 = 0;
        if (!v39)
          goto LABEL_113;
        v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 48) + 48) & 0xFFFFFFFFFFFFFFF0);
        if (v40)
          v41 = *(unsigned __int8 *)(v40 + 16) - 27 > 0xFFFFFFFD;
        else
          v41 = 0;
        if (!v41)
LABEL_104:
          v40 = sub_22F10CF48(v40);
      }
      v43 = *(_QWORD *)(v40 + 24);
      if (v43 >= 0x10)
      {
        v44 = v43 & 0xFFFFFFFFFFFFFFF0;
        v45 = *(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF0);
        if (v45 && (v46 = *(_DWORD *)(v45 + 16), (v46 & 0xFE) == 0x28))
        {
LABEL_117:
          if ((v46 & 0x100000) != 0)
          {
            do
            {
              v45 = *(_QWORD *)(*(_QWORD *)(v45 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (v45)
              {
                v47 = *(_DWORD *)(v45 + 16);
                if ((v47 & 0xFE) == 0x28)
                  continue;
              }
              v45 = sub_22F10CF48(v45);
              v47 = *(_DWORD *)(v45 + 16);
            }
            while ((v47 & 0x100000) != 0);
          }
          v44 = *(_QWORD *)(v45 + 32) & 0xFFFFFFFFFFFFFFF0;
        }
        else if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
        {
          v45 = sub_22F10CF48(v45);
          if (v45)
          {
            v46 = *(_DWORD *)(v45 + 16);
            goto LABEL_117;
          }
        }
        if (v35)
        {
          v3 = v35 == *(_QWORD *)(*(_QWORD *)(v44 + 8) & 0xFFFFFFFFFFFFFFF0);
          v35 = *(_QWORD *)(*(_QWORD *)(v44 + 8) & 0xFFFFFFFFFFFFFFF0);
          if (!v3)
            return v1;
        }
        else
        {
          v35 = *(_QWORD *)(*(_QWORD *)(v44 + 8) & 0xFFFFFFFFFFFFFFF0);
        }
      }
LABEL_113:
      v33 += 8;
      if (v33 == v36)
      {
        if (v35)
          return v35 & 0xFFFFFFFFFFFFFFF0;
        LOBYTE(v7) = *(_BYTE *)v6;
LABEL_24:
        if (v7 != 123)
          return v1;
        v4 = *((_QWORD *)v6 + 2);
        if (v4 && !sub_22EFFFB48(*((unsigned __int8 **)v6 + 2)))
          v9 = sub_22E9C1FE0(v4);
        else
          v9 = *((_QWORD *)v6 + 3);
        if ((*((_BYTE *)v6 + 2) & 4) != 0 && v9 >= 0x10)
          v9 = sub_22F10ACF8(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0));
        if (v9 < 0x10)
          return v1;
        v22 = sub_22E9C55B0(v9);
        if (!v22 || (*(_DWORD *)(v22 + 28) & 0x7Fu) - 35 > 2 || (*(_BYTE *)(v22 + 74) & 1) == 0)
          return v1;
        sub_22EFB437C(v22, *((_QWORD *)v6 + 6), (unsigned int (*)(_QWORD, _QWORD))sub_22E9DA2B4, (uint64_t)&v50, &v51);
        v23 = v51;
        v24 = v52;
        if (v51 == v52)
        {
          v27 = v51;
        }
        else
        {
          v4 = *(_QWORD *)(*v51 + 48);
          v25 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
          if (v25 && (v26 = *(_DWORD *)(v25 + 16), (v26 & 0xFE) == 0x28))
          {
LABEL_134:
            if ((v26 & 0x100000) != 0)
            {
              do
              {
                v25 = *(_QWORD *)(*(_QWORD *)(v25 + 32) & 0xFFFFFFFFFFFFFFF0);
                if (v25)
                {
                  v49 = *(_DWORD *)(v25 + 16);
                  if ((v49 & 0xFE) == 0x28)
                    continue;
                }
                v25 = sub_22F10CF48(v25);
                v49 = *(_DWORD *)(v25 + 16);
              }
              while ((v49 & 0x100000) != 0);
            }
            v4 = *(_QWORD *)(v25 + 32);
          }
          else if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
          {
            v25 = sub_22F10CF48(v25);
            if (v25)
            {
              v26 = *(_DWORD *)(v25 + 16);
              goto LABEL_134;
            }
          }
          v27 = v51;
        }
        if (v27)
        {
          v52 = v27;
          operator delete(v27);
        }
        if (v23 == v24)
          return v1;
        return v4;
      }
    }
  }
  v4 = *(_QWORD *)(v18 + 24);
  v20 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
  if (!v20 || (v21 = *(_DWORD *)(v20 + 16), (v21 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      return v4;
    v20 = sub_22F10CF48(v20);
    if (!v20)
      return v4;
    v21 = *(_DWORD *)(v20 + 16);
  }
  if ((v21 & 0x100000) != 0)
  {
    do
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v20 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v20)
      {
        v48 = *(_DWORD *)(v20 + 16);
        if ((v48 & 0xFE) == 0x28)
          continue;
      }
      v20 = sub_22F10CF48(v20);
      v48 = *(_DWORD *)(v20 + 16);
    }
    while ((v48 & 0x100000) != 0);
  }
  return *(_QWORD *)(v20 + 32);
}

BOOL sub_22E9C2584(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  int v5;

  v2 = *(_DWORD *)(a2 + 28);
  v3 = v2 & 0x7F;
  if (v3 <= 0x2F && ((1 << (v2 & 0x7F)) & 0xC00000060000) != 0)
  {
    v2 = *(_DWORD *)(sub_22EFBAEA4(a2) + 28);
    v3 = v2 & 0x7F;
  }
  v5 = v2 & 0x7B;
  return v3 - 48 < 0x1B || v5 == 25;
}

uint64_t sub_22E9C25E0(uint64_t a1, _QWORD *a2, int a3, char *a4)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  uint64_t result;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  llvm *v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _BYTE *v44;
  int64x2_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  char *v54;
  uint64_t *v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  int v65;
  char v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  int64x2_t v78;
  char *v79;
  __int128 v80;
  __int128 v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  void *__p;
  uint64_t v95;
  uint64_t v96;
  llvm *v97[3];
  _BYTE v98[32];
  char **v99;
  __int128 v100;
  char *v101;
  __int128 v102;
  __int128 v103;
  _OWORD v104[2];
  int v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  __int128 v109;
  __int128 v110;
  _DWORD v111[2];
  _QWORD v112[3];
  llvm **v113;
  int64x2_t v114;
  char *v115;
  char **v116;
  uint64_t v117;
  __int128 v118;
  char *v119;
  void **v120;
  __int128 v121;
  int v122;
  uint64_t v123;

  v123 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  v8 = *(_QWORD *)a1;
  v9 = sub_22EC2624C(*(_QWORD *)a1, a2, a3);
  if ((v9 & 1) != 0)
    return 0;
  v10 = (_DWORD *)(v9 & 0xFFFFFFFFFFFFFFFELL);
  v11 = sub_22E9C1FE0((unsigned __int8 *)(v9 & 0xFFFFFFFFFFFFFFFELL));
  if (v11 < 0x10)
    return 0;
  v13 = v11;
  v14 = (*v10 >> 8) & 3;
  if (a3)
  {
    v4 = v11 & 0xFFFFFFFFFFFFFFF0;
    v15 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
    if (v15 && *(_BYTE *)(v15 + 16) == 39)
      goto LABEL_11;
    v16 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v16 == 39)
    {
      v15 = sub_22F10CF48(v15);
      if (v15)
      {
LABEL_11:
        v13 = *(_QWORD *)(v15 + 32);
        v14 = 1;
        goto LABEL_12;
      }
      v16 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v16 != 47 && v16 != 32)
      return 0;
  }
LABEL_12:
  v17 = sub_22E9C55B0(v13);
  if (!v17)
  {
    v19 = v13 & 0xFFFFFFFFFFFFFFF0;
    v20 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
    v21 = *(unsigned __int8 *)(v20 + 16);
    if (v20 && v21 == 47)
    {
      if (a3)
        v22 = 1;
      else
        v22 = 2;
      sub_22E9C6D68((uint64_t)v98, v20, **(uint64_t ***)(a1 + 16));
      sub_22E9C6FF0((unint64_t *)&v118, (uint64_t *)v98);
      v23 = *(llvm **)v98;
      v95 = v8;
      if (*(_DWORD *)&v98[16])
      {
        v24 = (unint64_t)*(unsigned int *)&v98[16] << 6;
        v25 = *(_QWORD *)v98 + 32;
        do
        {
          if ((*(_QWORD *)(v25 - 32) | 0x1000) != 0xFFFFFFFFFFFFF000 && *(_BYTE *)(v25 + 8))
          {
            v26 = *(void **)(v25 - 16);
            if ((void *)v25 != v26)
              free(v26);
            *(_BYTE *)(v25 + 8) = 0;
          }
          v25 += 64;
          v24 -= 64;
        }
        while (v24);
        v23 = *(llvm **)v98;
        v27 = (void *)((unint64_t)*(unsigned int *)&v98[16] << 6);
      }
      else
      {
        v27 = 0;
      }
      llvm::deallocate_buffer(v23, v27);
      v39 = *((_QWORD *)&v118 + 1);
      v38 = v118;
      if ((_QWORD)v118 != *((_QWORD *)&v118 + 1))
      {
        v93 = v22;
        while (*(_DWORD *)(v38 + 40) != v22)
        {
LABEL_60:
          v38 += 56;
          if (v38 == v39)
            goto LABEL_63;
        }
        v40 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v95 + 208) + 40))(*(_QWORD *)(v95 + 208));
        v41 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v95 + 208) + 48))(*(_QWORD *)(v95 + 208));
        v42 = sub_22E9C7380(v38, v95, v40, v41);
        *(_QWORD *)v98 = 0;
        *(_QWORD *)&v98[8] = v42;
        *(_OWORD *)&v98[16] = xmmword_22F469F30;
        LODWORD(v99) = 0;
        v101 = 0;
        v100 = 0uLL;
        LOBYTE(v102) = v102 & 0xC0;
        v103 = 0uLL;
        *((_QWORD *)&v102 + 1) = 0;
        if (!a4[56])
        {
          v47 = 0;
          v48 = 0;
          v49 = 0;
LABEL_56:
          v55 = *(uint64_t **)(a1 + 8);
          v104[0] = *(_OWORD *)v98;
          v104[1] = *(_OWORD *)&v98[16];
          v105 = (int)v99;
          v106 = v49;
          v107 = v48;
          v108 = v47;
          v101 = 0;
          v100 = 0uLL;
          v109 = v102;
          v110 = v103;
          v56 = v55[1];
          if (v56 >= v55[2])
          {
            v60 = sub_22E9D8E48(v55, (uint64_t)v104);
          }
          else
          {
            v57 = *(_OWORD *)v98;
            v58 = *(_OWORD *)&v98[16];
            *(_DWORD *)(v56 + 32) = (_DWORD)v99;
            *(_OWORD *)v56 = v57;
            *(_OWORD *)(v56 + 16) = v58;
            *(_QWORD *)(v56 + 40) = 0;
            *(_QWORD *)(v56 + 48) = 0;
            *(_QWORD *)(v56 + 56) = 0;
            sub_22E6C6020((_QWORD *)(v56 + 40), v106, v107, 0x6DB6DB6DB6DB6DB7 * ((v107 - v106) >> 3));
            v59 = v110;
            *(_OWORD *)(v56 + 64) = v109;
            *(_OWORD *)(v56 + 80) = v59;
            v60 = v56 + 96;
          }
          v22 = v93;
          v55[1] = v60;
          v113 = (llvm **)&v106;
          sub_22E6C60B8((void ***)&v113);
          v113 = (llvm **)&v100;
          sub_22E6C60B8((void ***)&v113);
          goto LABEL_60;
        }
        v116 = &v101;
        v43 = (char *)operator new(0x38uLL);
        *(_OWORD *)v43 = *(_OWORD *)a4;
        *(_QWORD *)(v43 + 13) = *(_QWORD *)(a4 + 13);
        v44 = v43 + 24;
        if (a4[47] < 0)
        {
          sub_22E3BB2B4(v44, *((void **)a4 + 3), *((_QWORD *)a4 + 4));
          v51 = *((_QWORD *)&v100 + 1);
          v50 = v100;
          v43[48] = a4[48];
          if (v51 != v50)
          {
            v46 = v43;
            do
            {
              v52 = *(_OWORD *)(v51 - 56);
              *(_QWORD *)(v46 - 43) = *(_QWORD *)(v51 - 43);
              *(_OWORD *)(v46 - 56) = v52;
              v53 = *(_OWORD *)(v51 - 32);
              *((_QWORD *)v46 - 2) = *(_QWORD *)(v51 - 16);
              *((_OWORD *)v46 - 2) = v53;
              *(_QWORD *)(v51 - 24) = 0;
              *(_QWORD *)(v51 - 16) = 0;
              *(_QWORD *)(v51 - 32) = 0;
              *(v46 - 8) = *(_BYTE *)(v51 - 8);
              v46 -= 56;
              v51 -= 56;
            }
            while (v51 != v50);
            v45 = (int64x2_t)v100;
            goto LABEL_55;
          }
          v45 = vdupq_n_s64(v50);
        }
        else
        {
          *(_OWORD *)v44 = *(_OWORD *)(a4 + 24);
          *((_QWORD *)v43 + 5) = *((_QWORD *)a4 + 5);
          v43[48] = a4[48];
          v45 = 0uLL;
        }
        v46 = v43;
LABEL_55:
        v48 = (uint64_t)(v43 + 56);
        *(_QWORD *)&v100 = v46;
        *((_QWORD *)&v100 + 1) = v43 + 56;
        v114 = v45;
        v54 = v101;
        v101 = v43 + 56;
        v115 = v54;
        v113 = (llvm **)v45.i64[0];
        sub_22E9DA2E0((uint64_t)&v113);
        v47 = v101;
        v49 = v100;
        goto LABEL_56;
      }
LABEL_63:
      sub_22E9C7768((void **)&v118);
      return 1;
    }
    v28 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if ((a3 & 1) != 0)
    {
      if (v28 != 32)
        return 1;
    }
    else
    {
      if (v28 == 32)
      {
        if (!a4[56])
        {
          *(_QWORD *)v98 = &v99;
          *(_QWORD *)&v98[8] = &v99;
          *(_QWORD *)&v98[16] = 16;
          *(_DWORD *)&v98[24] = 0;
          v29 = sub_22F40A264(v20);
          if (v29)
          {
            v30 = *(_QWORD *)(a1 + 24);
            v31 = sub_22F31179C(v29);
            sub_22E9C2FC4(v30, v31, 1, 1, *(_QWORD *)(v8 + 216), (uint64_t)v98, *(_QWORD *)(a1 + 8), **(_BYTE **)(a1 + 32), 0, 1);
          }
          v32 = *(_QWORD *)v19;
          if (!*(_QWORD *)v19 || *(_BYTE *)(v32 + 16) != 32)
            v32 = sub_22F10CF48(v32);
          v33 = sub_22F3174CC(v32);
          if ((uint64_t *)v33 != v34)
          {
            v35 = (uint64_t *)v33;
            v36 = v34;
            do
            {
              v37 = *v35++;
              sub_22E9C2FC4(*(_QWORD *)(a1 + 24), v37, 1, 1, *(_QWORD *)(v8 + 216), (uint64_t)v98, *(_QWORD *)(a1 + 8), **(_BYTE **)(a1 + 32), 0, 0);
            }
            while (v35 != v36);
          }
          if (*(_QWORD *)&v98[8] != *(_QWORD *)v98)
            free(*(void **)&v98[8]);
          return 1;
        }
        return 0;
      }
      if ((v28 - 33) > 1)
        return 1;
    }
    if (!a4[56])
    {
      if (!v20 || v21 != 32)
      {
        if (v28 != 32)
        {
LABEL_72:
          if ((v21 - 35) <= 0xFFFFFFFD)
            v20 = sub_22F10CF48(v20);
          v61 = sub_22F272660(v20);
          goto LABEL_103;
        }
        v20 = sub_22F10CF48(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0));
        if (!v20)
        {
          v20 = *(_QWORD *)v19;
          v21 = *(unsigned __int8 *)(*(_QWORD *)v19 + 16);
          goto LABEL_72;
        }
      }
      v61 = sub_22F31179C(v20);
LABEL_103:
      if (v61)
      {
        v85 = *(_QWORD *)(a1 + 8);
        v86 = v61 + 48;
        memset(v97, 0, sizeof(v97));
        sub_22E9B8FE8((uint64_t)v98, v85, v61 + 48, v13, (uint64_t)v97);
        v113 = v97;
        sub_22E6C60B8((void ***)&v113);
        v87 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(v87 + 208) = sub_22E9DA2CC;
        *(_QWORD *)(v87 + 216) = 0;
        sub_22F337E60(v8, v86, 3, (uint64_t)v98, (*(_BYTE *)(*(_QWORD *)(v8 + 208) + 8) & 4) != 0, 0, (*(_BYTE *)(*(_QWORD *)(v8 + 208) + 8) & 0x20) != 0);
        *(_QWORD *)v98 = off_24FAB7520;
        v113 = (llvm **)&v100;
        sub_22E6C60B8((void ***)&v113);
      }
      return 1;
    }
    return 0;
  }
  v62 = v17;
  v96 = v8;
  v63 = *(_QWORD *)(a1 + 8);
  v64 = **(_QWORD ***)(a1 + 16);
  v65 = a4[56];
  if (a4[56])
  {
    v66 = *a4;
    v121 = *(_OWORD *)(a4 + 1);
    v122 = *(_DWORD *)(a4 + 17);
    __p = (void *)*((_QWORD *)a4 + 3);
    v92 = *((_QWORD *)a4 + 4);
    v111[0] = *((_DWORD *)a4 + 10);
    *(_DWORD *)((char *)v111 + 3) = *(_DWORD *)(a4 + 43);
    v18 = a4[47];
    *((_QWORD *)a4 + 3) = 0;
    *((_QWORD *)a4 + 4) = 0;
    *((_QWORD *)a4 + 5) = 0;
    LOBYTE(v4) = a4[48];
  }
  else
  {
    v66 = 0;
  }
  v67 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v67 & 8) != 0)
  {
    v69 = *(_QWORD *)((v67 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v68 = *(_QWORD *)((v67 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v68 = 0;
    v69 = 0;
  }
  v70 = 0;
  v71 = 0;
  v72 = 0;
  *(_QWORD *)(v63 + 288) = v68 | v69 | (v67 | v13) & 7;
  *(_DWORD *)(v63 + 296) = v14;
  *(_BYTE *)(v63 + 300) = 1;
  *(_BYTE *)(v63 + 224) = 1;
  v118 = 0uLL;
  v119 = 0;
  v73 = v18;
  if (v65)
  {
    v99 = &v119;
    v74 = (char *)operator new(0x38uLL);
    v75 = v74;
    *v74 = v66;
    *(_OWORD *)(v74 + 1) = v121;
    *(_DWORD *)(v74 + 17) = v122;
    if (v73 < 0)
    {
      sub_22E3BB2B4(v74 + 24, __p, v92);
      v77 = *((_QWORD *)&v118 + 1);
      v76 = v118;
      v75[48] = v4;
      if (v77 != v76)
      {
        v79 = v75;
        do
        {
          v80 = *(_OWORD *)(v77 - 56);
          *(_QWORD *)(v79 - 43) = *(_QWORD *)(v77 - 43);
          *(_OWORD *)(v79 - 56) = v80;
          v81 = *(_OWORD *)(v77 - 32);
          *((_QWORD *)v79 - 2) = *(_QWORD *)(v77 - 16);
          *((_OWORD *)v79 - 2) = v81;
          *(_QWORD *)(v77 - 24) = 0;
          *(_QWORD *)(v77 - 16) = 0;
          *(_QWORD *)(v77 - 32) = 0;
          *(v79 - 8) = *(_BYTE *)(v77 - 8);
          v79 -= 56;
          v77 -= 56;
        }
        while (v77 != v76);
        v78 = (int64x2_t)v118;
        goto LABEL_94;
      }
      v78 = vdupq_n_s64(v76);
    }
    else
    {
      *((_QWORD *)v74 + 3) = __p;
      *((_QWORD *)v74 + 4) = v92;
      *((_DWORD *)v74 + 10) = v111[0];
      *(_DWORD *)(v74 + 43) = *(_DWORD *)((char *)v111 + 3);
      v74[47] = v73;
      v74[48] = v4;
      v78 = 0uLL;
    }
    v79 = v75;
LABEL_94:
    v71 = v75 + 56;
    *(_QWORD *)&v118 = v79;
    *((_QWORD *)&v118 + 1) = v75 + 56;
    *(int64x2_t *)&v98[8] = v78;
    v82 = v119;
    v119 = v75 + 56;
    *(_QWORD *)&v98[24] = v82;
    *(_QWORD *)v98 = v78.i64[0];
    sub_22E9DA2E0((uint64_t)v98);
    v72 = v118;
    v70 = v119;
  }
  v112[0] = v72;
  v112[1] = v71;
  v112[2] = v70;
  v119 = 0;
  v118 = 0uLL;
  sub_22E9B8FE8((uint64_t)&v113, v63, v62 + 64, v13, (uint64_t)v112);
  *(_QWORD *)v98 = v112;
  sub_22E6C60B8((void ***)v98);
  sub_22F337E60(v96, v62 + 64, 3, (uint64_t)&v113, (*(_BYTE *)(*(_QWORD *)(v96 + 208) + 8) & 4) != 0, 1, (*(_BYTE *)(*(_QWORD *)(v96 + 208) + 8) & 0x20) != 0);
  if ((*(_BYTE *)(*(_QWORD *)(v96 + 72) + 1) & 1) == 0)
    goto LABEL_111;
  v83 = *(_QWORD *)(v63 + 8);
  if (*(_QWORD *)v63 == v83)
    goto LABEL_111;
  if ((*(_BYTE *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
    goto LABEL_107;
  if (v64)
  {
    while (1)
    {
      v84 = v64[45];
      if (v84)
        break;
      v64 = (_QWORD *)*v64;
      if (!v64)
        goto LABEL_111;
    }
    if (sub_22EFC7ADC(v84))
    {
      v83 = *(_QWORD *)(v63 + 8);
LABEL_107:
      *(_QWORD *)v98 = 0;
      *(_QWORD *)&v98[8] = "template";
      *(_OWORD *)&v98[16] = xmmword_22F469F50;
      LODWORD(v99) = 0;
      v101 = 0;
      v100 = 0uLL;
      LOBYTE(v102) = 0;
      v103 = 0uLL;
      *((_QWORD *)&v102 + 1) = 0;
      if (v83 >= *(_QWORD *)(v63 + 16))
      {
        v91 = sub_22E9D8E48((uint64_t *)v63, (uint64_t)v98);
      }
      else
      {
        v88 = *(_OWORD *)v98;
        v89 = *(_OWORD *)&v98[16];
        *(_DWORD *)(v83 + 32) = (_DWORD)v99;
        *(_OWORD *)v83 = v88;
        *(_OWORD *)(v83 + 16) = v89;
        *(_QWORD *)(v83 + 48) = 0;
        *(_QWORD *)(v83 + 56) = 0;
        *(_QWORD *)(v83 + 40) = 0;
        v90 = v103;
        *(_OWORD *)(v83 + 64) = v102;
        *(_OWORD *)(v83 + 80) = v90;
        v91 = v83 + 96;
      }
      *(_QWORD *)(v63 + 8) = v91;
      v120 = (void **)&v100;
      sub_22E6C60B8(&v120);
    }
  }
LABEL_111:
  v113 = (llvm **)off_24FAB7520;
  v120 = (void **)&v117;
  sub_22E6C60B8(&v120);
  v113 = (llvm **)&v118;
  sub_22E6C60B8((void ***)&v113);
  result = 1;
  if (v65 && v73 < 0)
  {
    operator delete(__p);
    return 1;
  }
  return result;
}

void sub_22E9C2FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8, unsigned __int8 a9, char a10)
{
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int i;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  _QWORD v63[7];
  _QWORD v64[2];
  _QWORD v65[7];
  char v66;
  unsigned __int8 v67;
  uint64_t v68;
  unint64_t v69;

  v68 = a5;
  v67 = a8;
  v66 = a10;
  v15 = sub_22E9D15D8(a2);
  v69 = v15;
  v65[0] = a6;
  v65[1] = &v67;
  v65[2] = a7;
  v65[3] = &v66;
  v65[4] = &v68;
  v65[5] = &v69;
  v65[6] = a1;
  if (a9)
  {
    v16 = sub_22F319D40(v15);
    if (v16 != v17)
    {
      v18 = v16;
      v19 = v17;
      do
      {
        sub_22E9DA340((uint64_t)v65, v18);
        do
          v18 = *(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v18 && ((*(_DWORD *)(v18 + 28) & 0x7F) != 0x19 || (*(_BYTE *)(v18 + 73) & 0x40) == 0));
      }
      while (v18 != v19);
    }
  }
  else
  {
    v20 = sub_22F318070(v15);
    if (v20 != v21)
    {
      v22 = v20;
      v23 = v21;
      do
      {
        sub_22E9DA340((uint64_t)v65, v22);
        do
          v22 = *(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v22 && ((*(_DWORD *)(v22 + 28) & 0x7F) != 0x19 || (*(_BYTE *)(v22 + 73) & 0x40) != 0));
      }
      while (v22 != v23);
    }
  }
  if ((_DWORD)a4)
  {
    v32 = v69;
    if (!v69 || (*(_DWORD *)(v69 + 28) & 0x7F) != 0x53)
    {
      v33 = *(_QWORD *)(v69 + 16);
      v34 = v33 & 0xFFFFFFFFFFFFFFF8;
      if ((v33 & 4) != 0)
        v34 = *(_QWORD *)v34;
      for (i = *(_WORD *)(v34 + 8) & 0x7F; i != 83; i = *(_WORD *)(v34 + 8) & 0x7F)
      {
        v36 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v36 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_45;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_44;
          if (i == 16)
            goto LABEL_38;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_51;
          if (i == 24)
          {
LABEL_38:
            v36 = -48;
          }
          else
          {
LABEL_44:
            if (i != 70)
            {
LABEL_45:
              v37 = i - 52;
              if ((i - 33) >= 5)
                v38 = -48;
              else
                v38 = -64;
              if (v37 >= 6)
                v36 = v38;
              else
                v36 = -72;
              goto LABEL_51;
            }
            v36 = -64;
          }
        }
LABEL_51:
        v39 = *(_QWORD *)(v34 + v36 + 16);
        v34 = v39 & 0xFFFFFFFFFFFFFFF8;
        if ((v39 & 4) != 0)
          v34 = *(_QWORD *)v34;
      }
      v32 = v34 - 40;
    }
    v45 = *(_QWORD *)(v32 + 88);
    v46 = *(_QWORD *)(a7 + 184);
    v47 = *(_QWORD *)(v46 + 88);
    v64[0] = ((*(_QWORD *)(*(_QWORD *)(v47 + 2000) + 100) >> 12) & 0x2000000 | sub_22E8FCD8C(v47, *(_QWORD *)(v46 + 80)) & 0xFFFFDFFFFDF9CFFFLL) ^ 0x200002043000;
    v64[1] = v48;
    v63[0] = a6;
    v63[1] = a7;
    v63[2] = v45;
    v63[3] = v64;
    v63[4] = a1;
    v63[5] = &v66;
    v63[6] = &v68;
    v49 = sub_22F2781C0(v69);
    v51 = v49;
    v52 = v50;
    if (a9)
    {
      if (v49 != v50)
      {
        do
        {
          if ((*(_QWORD *)(v51 + 40) & 7) == 1)
          {
            v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v51 + 80) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            v54 = v53 && (*(_DWORD *)(v53 + 16) & 0xFF800FF) == 86507531;
            if (!v54 && (*(_BYTE *)(v51 + 58) & 2) == 0)
              sub_22E9DAD84((uint64_t)v63, v51);
          }
          do
            v51 = *(_QWORD *)(v51 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v51 && (*(_DWORD *)(v51 + 28) & 0x7F) != 0x18);
        }
        while (v51 != v52);
      }
    }
    else if (v49 != v50)
    {
      do
      {
        if ((*(_QWORD *)(v51 + 40) & 7) == 1)
          sub_22E9DAD84((uint64_t)v63, v51);
        do
          v51 = *(_QWORD *)(v51 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v51 && (*(_DWORD *)(v51 + 28) & 0x7F) != 0x18);
      }
      while (v51 != v52);
    }
  }
  v24 = v69;
  v25 = *(_DWORD *)(v69 + 28) & 0x7F;
  if (v69)
    v26 = v25 == 23;
  else
    v26 = 0;
  if (v26)
  {
    v40 = sub_22F259248(v69);
    if ((uint64_t *)v40 != v41)
    {
      v42 = (uint64_t *)v40;
      v43 = v41;
      do
      {
        v44 = *v42++;
        LOWORD(v62) = a9;
        sub_22E9C2FC4(a1, v44, a3, a4, v68, a6, a7, v67, v62);
      }
      while (v42 != v43);
    }
  }
  else if (v69 && v25 == 22)
  {
    if ((_DWORD)a3)
    {
      v55 = sub_22F257E10(v69);
      if (v55)
      {
        v56 = v55;
        do
        {
          BYTE1(v62) = v66;
          LOBYTE(v62) = a9;
          sub_22E9C2FC4(a1, v56, 1, a4, v68, a6, a7, v67, v62);
          v56 = *(_QWORD *)(v56 + 128);
        }
        while (v56);
      }
    }
    v57 = (uint64_t *)sub_22F276134(v24);
    v58 = sub_22F2761B0(v24);
    if (v57 != (uint64_t *)v58)
    {
      v59 = (uint64_t *)v58;
      do
      {
        v60 = *v57++;
        LOWORD(v62) = a9;
        sub_22E9C2FC4(a1, v60, a3, a4, v68, a6, a7, v67, v62);
      }
      while (v57 != v59);
    }
    if (sub_22F3B46CC(v24))
    {
      v61 = sub_22F3B46CC(v24);
      LOWORD(v62) = a9;
      sub_22E9C2FC4(a1, v61, a3, a4, v68, a6, a7, v67, v62);
    }
  }
  else if (v69)
  {
    if (v25 == 19)
    {
      v27 = *(_QWORD *)(v69 + 120) & 0xFFFFFFFFFFFFFFF8;
      v28 = *(unsigned int *)(v27 + 24);
      if ((_DWORD)v28)
      {
        v29 = *(uint64_t **)(v27 + 16);
        v30 = 8 * v28;
        do
        {
          v31 = *v29++;
          LOWORD(v62) = a9;
          sub_22E9C2FC4(a1, v31, a3, a4, v68, a6, a7, v67, v62);
          v30 -= 8;
        }
        while (v30);
      }
    }
  }
}

BOOL sub_22E9C3504(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 28) & 0x7F) == 33;
}

BOOL sub_22E9C3518(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a2 + 28);
  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7F) == 0x1C)
  {
    a2 = *(_QWORD *)(a2 + 48);
    v2 = *(_DWORD *)(a2 + 28);
  }
  return (v2 & 0x7Eu) - 34 <= 3 && (*(_DWORD *)(a2 + 72) & 0xE000) == 0x4000;
}

uint64_t sub_22E9C3560(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;

  v3 = *(_DWORD *)(a2 + 28);
  if (a2)
  {
    LOBYTE(v2) = v3 & 0x7F;
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x1C)
    {
      a2 = *(_QWORD *)(a2 + 48);
      v3 = *(_DWORD *)(a2 + 28);
    }
  }
  v4 = (v3 & 0x7E) - 34;
  if (v4 <= 3)
  {
    v5 = (unsigned __int16)*(_DWORD *)(a2 + 72) >> 13;
    v6 = v5 > 3;
    v2 = (0xBu >> v5) & 1;
    if (v6)
      LOBYTE(v2) = 0;
  }
  return (v4 < 4) & v2;
}

uint64_t sub_22E9C35B8(uint64_t a1, uint64_t a2)
{
  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7F) == 0x1C)
    a2 = *(_QWORD *)(a2 + 48);
  return sub_22E958A54(*(_QWORD *)(a1 + 184), a2, 0);
}

void sub_22E9C35DC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  int v35;
  _QWORD v36[3];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  _QWORD v42[3];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  _QWORD v48[3];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int v53;
  _QWORD v54[3];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  _QWORD v60[3];
  __int128 v61;
  __int128 v62;
  void **v63;

  v6 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 0x2000000) == 0)
  {
    *(_QWORD *)&v57 = 0;
    *((_QWORD *)&v57 + 1) = "const";
    v58 = xmmword_22F469F50;
    v59 = 0;
    memset(v60, 0, sizeof(v60));
    LOBYTE(v61) = 0;
    v62 = 0uLL;
    *((_QWORD *)&v61 + 1) = 0;
    v7 = a2[1];
    if (v7 >= a2[2])
    {
      v11 = sub_22E9D8E48(a2, (uint64_t)&v57);
    }
    else
    {
      v8 = v57;
      v9 = v58;
      *(_DWORD *)(v7 + 32) = v59;
      *(_OWORD *)v7 = v8;
      *(_OWORD *)(v7 + 16) = v9;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      *(_QWORD *)(v7 + 40) = 0;
      v10 = v62;
      *(_OWORD *)(v7 + 64) = v61;
      *(_OWORD *)(v7 + 80) = v10;
      v11 = v7 + 96;
    }
    a2[1] = v11;
    v63 = (void **)v60;
    sub_22E6C60B8(&v63);
    v6 = *(_QWORD *)a1;
  }
  if ((v6 & 0x8000000) == 0)
  {
    *(_QWORD *)&v51 = 0;
    *((_QWORD *)&v51 + 1) = "volatile";
    v52 = xmmword_22F469F50;
    v53 = 0;
    memset(v54, 0, sizeof(v54));
    LOBYTE(v55) = 0;
    v56 = 0uLL;
    *((_QWORD *)&v55 + 1) = 0;
    v12 = a2[1];
    if (v12 >= a2[2])
    {
      v16 = sub_22E9D8E48(a2, (uint64_t)&v51);
    }
    else
    {
      v13 = v51;
      v14 = v52;
      *(_DWORD *)(v12 + 32) = v53;
      *(_OWORD *)v12 = v13;
      *(_OWORD *)(v12 + 16) = v14;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_QWORD *)(v12 + 40) = 0;
      v15 = v56;
      *(_OWORD *)(v12 + 64) = v55;
      *(_OWORD *)(v12 + 80) = v15;
      v16 = v12 + 96;
    }
    a2[1] = v16;
    v63 = (void **)v54;
    sub_22E6C60B8(&v63);
  }
  v17 = *a3;
  if ((*a3 & 1) != 0 && (*(_BYTE *)(a1 + 3) & 4) == 0)
  {
    *(_QWORD *)&v45 = 0;
    *((_QWORD *)&v45 + 1) = "restrict";
    v46 = xmmword_22F469F50;
    v47 = 0;
    memset(v48, 0, sizeof(v48));
    LOBYTE(v49) = 0;
    v50 = 0uLL;
    *((_QWORD *)&v49 + 1) = 0;
    v18 = a2[1];
    if (v18 >= a2[2])
    {
      v22 = sub_22E9D8E48(a2, (uint64_t)&v45);
    }
    else
    {
      v19 = v45;
      v20 = v46;
      *(_DWORD *)(v18 + 32) = v47;
      *(_OWORD *)v18 = v19;
      *(_OWORD *)(v18 + 16) = v20;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_QWORD *)(v18 + 40) = 0;
      v21 = v50;
      *(_OWORD *)(v18 + 64) = v49;
      *(_OWORD *)(v18 + 80) = v21;
      v22 = v18 + 96;
    }
    a2[1] = v22;
    v63 = (void **)v48;
    sub_22E6C60B8(&v63);
    v17 = *a3;
  }
  if ((v17 & 2) != 0 && (*(_BYTE *)(a1 + 3) & 0x20) == 0)
  {
    *(_QWORD *)&v39 = 0;
    *((_QWORD *)&v39 + 1) = "_Atomic";
    v40 = xmmword_22F469F50;
    v41 = 0;
    memset(v42, 0, sizeof(v42));
    LOBYTE(v43) = 0;
    v44 = 0uLL;
    *((_QWORD *)&v43 + 1) = 0;
    v23 = a2[1];
    if (v23 >= a2[2])
    {
      v27 = sub_22E9D8E48(a2, (uint64_t)&v39);
    }
    else
    {
      v24 = v39;
      v25 = v40;
      *(_DWORD *)(v23 + 32) = v41;
      *(_OWORD *)v23 = v24;
      *(_OWORD *)(v23 + 16) = v25;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_QWORD *)(v23 + 40) = 0;
      v26 = v44;
      *(_OWORD *)(v23 + 64) = v43;
      *(_OWORD *)(v23 + 80) = v26;
      v27 = v23 + 96;
    }
    a2[1] = v27;
    v63 = (void **)v42;
    sub_22E6C60B8(&v63);
    v17 = *a3;
  }
  if ((v17 & 0x10) != 0 && (*(_BYTE *)(a1 + 3) & 0x10) == 0)
  {
    *(_QWORD *)&v33 = 0;
    *((_QWORD *)&v33 + 1) = "__unaligned";
    v34 = xmmword_22F469F50;
    v35 = 0;
    memset(v36, 0, sizeof(v36));
    LOBYTE(v37) = 0;
    v38 = 0uLL;
    *((_QWORD *)&v37 + 1) = 0;
    v28 = a2[1];
    if (v28 >= a2[2])
    {
      v32 = sub_22E9D8E48(a2, (uint64_t)&v33);
    }
    else
    {
      v29 = v33;
      v30 = v34;
      *(_DWORD *)(v28 + 32) = v35;
      *(_OWORD *)v28 = v29;
      *(_OWORD *)(v28 + 16) = v30;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_QWORD *)(v28 + 40) = 0;
      v31 = v38;
      *(_OWORD *)(v28 + 64) = v37;
      *(_OWORD *)(v28 + 80) = v31;
      v32 = v28 + 96;
    }
    a2[1] = v32;
    v63 = (void **)v36;
    sub_22E6C60B8(&v63);
  }
  if ((a3[13] & 0x20) != 0 && !sub_22E8AED64(a1))
    sub_22E9BF210(a2, 40);
}

void sub_22E9C3950(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t i;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  __int128 v23[3];
  void *v24;
  int v25;
  char v26;
  void *v27;
  void *v28;
  int v29;
  char v30;
  __int128 v31;
  __int128 v32;
  char v33;
  void *v34;
  int v35;
  char v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  int v40;
  _BYTE v41[64];
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  int v45;
  _BYTE v46[64];
  uint64_t v47;
  char *v48;
  char *v49;
  void *v50;
  uint64_t v51;
  _BYTE v52[280];
  __int128 v53[11];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * *(unsigned int *)(a1 + 1904) - 8);
  v3 = *(unsigned int *)(v2 + 56);
  if ((_DWORD)v3)
  {
    if (*(_QWORD *)(a1 + 208))
    {
      v5 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v3 - 8) & 0xFFFFFFFFFFFFFFF8);
      v6 = *(unsigned __int8 **)&v5[4 * (HIBYTE(*v5) & 1) + 12 + 4 * ((*v5 >> 9) & 1)];
      if (v6)
      {
        v8 = sub_22EFFED0C(v6);
        v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (*(_BYTE *)(v9 + 16) != 44)
        {
          v48 = (char *)*((_QWORD *)v8 + 1);
          BYTE2(v49) = 0;
          v50 = v52;
          v51 = 0x400000000;
          LOWORD(v49) = 1;
          sub_22E9C0008(a1, a2, (uint64_t *)&v48);
          v10 = v50;
          if (v50 == v52)
            return;
          goto LABEL_6;
        }
        v11 = sub_22F114198(*(_QWORD *)(v9 + 24));
        v12 = sub_22EFC3500(v11);
        if (v12)
          v11 = v12;
        v42 = v46;
        v43 = v46;
        v44 = 8;
        v45 = 0;
        v47 = 0;
        for (i = *((_QWORD *)v5 + 1); i; i = *(_QWORD *)(i + 16))
        {
          if (*(_BYTE *)i == 98)
          {
            v14 = sub_22EFFBBCC(*(unsigned __int8 **)(i + 24));
            if (*v14 == 161)
            {
              v15 = v14;
              v16 = (_DWORD *)*((_QWORD *)v14 + 2);
              if (v16)
              {
                if ((v16[7] & 0x7F) == 0x43)
                {
                  sub_22E3BA850((uint64_t)&v42, v16);
                  if ((v15[2] & 4) != 0)
                    v17 = *((_QWORD *)v15 + 4);
                  else
                    v17 = 0;
                  v47 = v17;
                }
              }
            }
          }
        }
        v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
        v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
        v29 = 8;
        v30 = 0;
        v36 = 0;
        v31 = 0u;
        v32 = 0u;
        v33 = 0;
        v37 = v41;
        v38 = v41;
        v39 = 8;
        v40 = 0;
        sub_22E9B831C((uint64_t)&v48, a1, v18, v19, (__int128 *)&v29, 0, 0);
        if (v38 != v37)
          free(v38);
        if (v36 && v35)
          free(v34);
        sub_22E9C0BC0((unint64_t)&v48, *(_QWORD *)(a1 + 88), v11, *(_QWORD *)(a1 + 216), (uint64_t)&v42);
        v20 = *(_QWORD *)(a1 + 208);
        v21 = *(unsigned __int8 *)(v20 + 8);
        if ((v21 & 1) != 0)
        {
          sub_22E9BE8B8(*(_QWORD *)(a1 + 80), (uint64_t *)&v48, (v21 >> 5) & 1, 0, 0);
          v20 = *(_QWORD *)(a1 + 208);
        }
        sub_22F2A4F2C((uint64_t)v23, v53);
        if (v49 == v48)
          v22 = 0;
        else
          v22 = v48;
        sub_22E9B83FC(a1, v20, v23, (uint64_t)v22, -1431655765 * ((unint64_t)(v49 - v48) >> 5));
        if (v28 != v27)
          free(v28);
        if (v26)
        {
          if (v25)
            free(v24);
          v26 = 0;
        }
        sub_22E9B8490(&v48);
        v10 = v43;
        if (v43 != v42)
LABEL_6:
          free(v10);
      }
    }
  }
}

unint64_t sub_22E9C3C80()
{
  uint64_t v0;
  unsigned __int8 *v1;
  uint64_t *v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t *v7;
  unsigned __int8 *v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  __n128 v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  int v39;
  char *v40;
  unint64_t v41;
  unsigned __int8 *v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  BOOL v47;
  unsigned __int8 *v48;
  _BYTE *v49;
  _BYTE *v50;
  unsigned __int8 *v51;
  char v52;
  uint64_t v53;
  void *v54[2];
  _BYTE v55[64];
  void *v56;
  uint64_t v57;
  _BYTE v58[4];
  void *v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[64];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unsigned int v68;
  _QWORD v69[3];
  __int16 v70;
  char v71;
  int v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD v76[339];
  int v77;
  _OWORD v78[9];
  _QWORD *v79;
  uint64_t v80;
  _QWORD v81[5];
  __int128 v82;
  uint64_t v83;
  unsigned int v84;
  __int128 v85;
  int v86;
  char *v87;
  uint64_t v88;
  _QWORD v89[18];

  v0 = MEMORY[0x24BDAC7A8]();
  v89[16] = *MEMORY[0x24BDAC8D0];
  if (!v1)
    return 0;
  v5 = v4;
  v6 = v3;
  v7 = v2;
  v8 = v1;
  v9 = (_QWORD *)v0;
  if (*v1 != 215)
    goto LABEL_5;
  v10 = *((_DWORD *)v1 + 1);
  if (!v10)
    return 0;
  v8 = *(unsigned __int8 **)&v1[8 * (v10 - 1) + 24];
LABEL_5:
  if (*(_QWORD *)(v0 + 208))
    v11 = v8 == 0;
  else
    v11 = 1;
  if (v11 || (v8[1] & 0x80) != 0 || v3 && !v2)
    return 0;
  if (v3)
  {
    v14 = 0;
    v15 = 1;
    while (v2[v14])
    {
      v14 = v15;
      v11 = v3 == v15++;
      if (v11)
      {
        v16 = 8 * v3;
        v17 = v2;
        while ((*(_BYTE *)(*v17 + 1) & 0x80) == 0)
        {
          ++v17;
          v16 -= 8;
          if (!v16)
          {
            v17 = &v2[v3];
            goto LABEL_24;
          }
        }
        goto LABEL_24;
      }
    }
    return 0;
  }
  v17 = v2;
LABEL_24:
  v18 = v17 - v2;
  v87 = (char *)v89;
  v88 = 0x800000000;
  v19 = sub_22EFFBBCC(v8);
  sub_22EFF605C((uint64_t)v8);
  v21 = v20;
  v22 = v20;
  v74 = v76;
  v75 = 0x1000000000;
  v76[336] = v78;
  v76[337] = v78;
  v76[338] = 16;
  v77 = 0;
  v23 = 0uLL;
  v78[8] = 0u;
  v79 = v81;
  v80 = 0x400000000;
  v81[4] = (char *)&v82 + 8;
  v82 = 0u;
  v83 = 1;
  v84 = v20;
  v86 = 0;
  v85 = 0u;
  v24 = *v19;
  if (v24 > 0xD2)
  {
    if (v24 == 211)
    {
      sub_22ED15474((uint64_t)v9, v19, v7, v17 - v7, (uint64_t)&v74, 1);
      goto LABEL_74;
    }
    if (v24 == 212)
    {
      v59 = &v61;
      v60 = 0x800000000;
      v73 = 0;
      if ((*(_DWORD *)v19 & 0x40000) != 0
        && (*(_DWORD *)v19 != 211 ? (v42 = v19 + 80) : (v42 = v19 + 64),
            *(_DWORD *)&v42[8 * *((unsigned int *)v19 + 1)]))
      {
        v43 = &v59;
        sub_22E9C442C((unsigned int *)v19, (uint64_t)&v59);
      }
      else
      {
        v43 = 0;
      }
      v44 = *((_QWORD *)v19 + 7);
      if (v44)
      {
        if (sub_22EFFFB48(*((unsigned __int8 **)v19 + 7)))
          v45 = 0;
        else
          v45 = v44;
      }
      else
      {
        v45 = 0;
      }
      v56 = v58;
      v57 = 0xC00000000;
      sub_22E4639CC((uint64_t)&v56, 1uLL, v45);
      sub_22E3D0148((uint64_t)&v56, v7, &v7[v18]);
      v54[0] = v55;
      v54[1] = (void *)0x800000000;
      v46 = *v19;
      v47 = v46 == 211;
      if (v46 == 211)
        v48 = v19;
      else
        v48 = 0;
      v49 = v48 + 64;
      if (v47)
        v50 = v49;
      else
        v50 = v19 + 80;
      sub_22E3D0148((uint64_t)v54, v50, &v50[8 * *((unsigned int *)v19 + 1)]);
      v51 = (unsigned __int8 *)*((_QWORD *)v19 + 7);
      if (v51)
        v52 = sub_22EFFFB48(v51) ^ 1;
      else
        v52 = 0;
      sub_22ED077A4(v9, (uint64_t)v54, (uint64_t *)v56, v57, (uint64_t)&v74, (uint64_t)v43, 0, 1u, v52);
      if (v54[0] != v55)
        free(v54[0]);
      if (v56 != v58)
        free(v56);
      v37 = v59;
      if (v59 == &v61)
        goto LABEL_74;
LABEL_105:
      free(v37);
      goto LABEL_74;
    }
  }
  else
  {
    if (v24 != 161)
    {
      if (v24 != 188)
        goto LABEL_36;
      v25 = *((_QWORD *)v19 + 3);
      v26 = *(_DWORD *)(v25 + 28);
      if ((v26 & 0x7E) - 52 >= 6)
        goto LABEL_36;
LABEL_32:
      if ((*(_BYTE *)(v9[9] + 1) & 1) == 0)
      {
LABEL_33:
        v27 = 0;
LABEL_34:
        v28 = &v87[16 * v27];
        *(_QWORD *)v28 = 0;
        *((_QWORD *)v28 + 1) = v25;
LABEL_73:
        LODWORD(v88) = v88 + 1;
        goto LABEL_74;
      }
      v38 = *(_QWORD *)(*(_QWORD *)(v25 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (!v38 || *(_BYTE *)(v38 + 16) != 26)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v38 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
          goto LABEL_33;
        if (!sub_22F10CF48(v38))
        {
          v27 = v88;
          if (v88 >= HIDWORD(v88))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v27 = v88;
          }
          goto LABEL_34;
        }
        v26 = *(_DWORD *)(v25 + 28);
      }
      sub_22ED0475C((uint64_t)v9, v25, (v26 >> 13) & 3 | v25, 0, (uint64_t)v7, v17 - v7, (uint64_t)&v74, 0, 1u, 1, 0, 0, 0, 0, 0);
      goto LABEL_74;
    }
    v25 = *((_QWORD *)v19 + 2);
    v26 = *(_DWORD *)(v25 + 28);
    if ((v26 & 0x7E) - 52 <= 5)
      goto LABEL_32;
  }
LABEL_36:
  v29 = sub_22F10C2A4(*(_QWORD *)(*((_QWORD *)v19 + 1) & 0xFFFFFFFFFFFFFFF0));
  if (v29)
  {
    v35 = v29;
    if ((*(_DWORD *)(v29 + 28) & 0x7Fu) - 35 <= 2)
    {
      if ((sub_22EE8B180((uint64_t)v9, v22, *((_QWORD *)v19 + 1), 1, 0) & 1) != 0)
        goto LABEL_74;
      v36 = (v9[11] + 15952) | 6;
      v59 = 0;
      v60 = (uint64_t)v62;
      v61 = 0x800000000;
      v63 = 0;
      v64 = 0;
      v65 = 0;
      v66 = v9;
      v67 = v36;
      v68 = v21;
      sub_22EFC6D6C((uint64_t)v69, v36);
      v69[1] = 0;
      v69[2] = 0;
      v70 = 0;
      v71 = 1;
      v72 = 1;
      sub_22EC56024((uint64_t)&v59);
      sub_22EC611AC((uint64_t)v9, (uint64_t)&v59, v35 + 64, 0);
      LOBYTE(v72) = 0;
      v56 = v58;
      v57 = 0xC00000000;
      sub_22E4639CC((uint64_t)&v56, 1uLL, (uint64_t)v19);
      sub_22E3D0148((uint64_t)&v56, v7, &v7[v18]);
      sub_22ED077A4(v9, (uint64_t)&v60, (uint64_t *)v56, v57, (uint64_t)&v74, 0, 0, 1u, 0);
      if (v56 != v58)
        free(v56);
      if ((_BYTE)v72)
      {
        if ((_DWORD)v59 == 5)
        {
          sub_22EC64D18(v66, (uint64_t)&v59);
        }
        else if (v64 && (*(_DWORD *)(v66[9] + 52) & 0x400000) != 0)
        {
          sub_22E90B5FC((unint64_t)v66, (uint64_t)&v59);
        }
      }
      if (v63)
      {
        v53 = sub_22EC6CBD0(v63);
        MEMORY[0x2348A0E9C](v53, 0x10E0C409F09D3C3);
      }
      v37 = (void *)v60;
      if ((_BYTE *)v60 == v62)
        goto LABEL_74;
      goto LABEL_105;
    }
  }
  v30 = (uint64_t *)(*((_QWORD *)v19 + 1) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)sub_22F10ACF8(*v30) >= 0x10)
    v30 = (uint64_t *)(sub_22F10ACF8(*v30) & 0xFFFFFFFFFFFFFFF0);
  v31 = *v30;
  v32 = *(unsigned __int8 *)(*v30 + 16);
  if (*v30 && v32 == 26)
    goto LABEL_43;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v31 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
  {
    v31 = sub_22F10CF48(*v30);
    if (v31)
    {
LABEL_43:
      v33 = *(_QWORD *)(v31 + 16);
      if (v7 == v17)
        v34 = v17 - v7;
      else
        v34 = v18 + 1;
      if ((v33 & 0x800000000000000) == 0 && v34 > (unsigned __int16)(v33 >> 38))
        goto LABEL_74;
      goto LABEL_70;
    }
    v31 = *v30;
    v32 = *(unsigned __int8 *)(*v30 + 16);
  }
  if ((v32 - 27) > 0xFFFFFFFD
    || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v31 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 <= 1
    && (v31 = sub_22F10CF48(v31)) != 0)
  {
LABEL_70:
    v39 = v88;
    if (v88 >= HIDWORD(v88))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v39 = v88;
    }
    v40 = &v87[16 * v39];
    *(_QWORD *)v40 = 2;
    *((_QWORD *)v40 + 1) = v31;
    goto LABEL_73;
  }
LABEL_74:
  sub_22E9C4470((uint64_t)v9, (uint64_t)&v87, (uint64_t)&v74, v22, v6, v23);
  v41 = sub_22E9C4658((uint64_t)v9, (uint64_t)v87, v88, v6, v5, 0);
  if ((_DWORD)v75)
    v12 = v41;
  else
    v12 = 0;
  sub_22E9DC79C((uint64_t *)&v74);
  if (v87 != (char *)v89)
    free(v87);
  return v12;
}

double sub_22E9C442C(unsigned int *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int *v3;
  _DWORD *v4;
  unsigned int v5;
  unsigned int v6;
  double result;

  v2 = *a1;
  if ((v2 & 0x40000) != 0)
  {
    v3 = &a1[2 * a1[1]];
    if (v2 == 211)
    {
      v5 = v3[16];
      v4 = v3 + 16;
      if (!v5)
        return result;
    }
    else
    {
      v6 = v3[20];
      v4 = v3 + 20;
      if (!v6)
        return result;
    }
    *(_QWORD *)&result = sub_22F0F0558(v4, (uint64_t)&v4[4 * ((v2 >> 18) & 1)], a2).n128_u64[0];
  }
  return result;
}

void sub_22E9C4470(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unint64_t a5, __n128 a6)
{
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  const std::nothrow_t *v12;
  unint64_t v13;
  _QWORD *v14;
  BOOL v15;
  void *v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  int v26;
  _QWORD v27[3];

  v26 = a4;
  v9 = *(_QWORD *)a3;
  v10 = *(unsigned int *)(a3 + 8);
  v11 = (__int128 *)(*(_QWORD *)a3 + 168 * v10);
  v27[0] = a1;
  v27[1] = &v26;
  v27[2] = a3;
  if ((_DWORD)v10)
  {
    v12 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v13 = v10;
    while (1)
    {
      v14 = operator new(168 * v13, v12);
      if (v14)
        break;
      v15 = v13 > 1;
      v13 >>= 1;
      if (!v15)
        goto LABEL_5;
    }
    v16 = v14;
    sub_22E9DAFC0(v9, v11, (uint64_t)v27, v10, v14, v13, a6);
    operator delete(v16);
  }
  else
  {
LABEL_5:
    sub_22E9DAFC0(v9, v11, (uint64_t)v27, v10, 0, 0, a6);
  }
  v17 = *(_DWORD *)(a3 + 8);
  if (v17)
  {
    v18 = *(uint64_t **)a3;
    v19 = 168 * v17;
    while (*v18)
    {
      if ((*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*v18 + 32))(*v18) + 82) & 0x40) == 0)
      {
        if (!sub_22ED06298(1, *v18))
          break;
        v20 = *(_QWORD *)(*(_QWORD *)(*v18 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (v20)
          v21 = *(_BYTE *)(v20 + 16) == 26;
        else
          v21 = 0;
        if (v21
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
          && (v20 = sub_22F10CF48(v20)) != 0)
        {
          v22 = (unsigned __int16)(*(_QWORD *)(v20 + 16) >> 38);
          if (!a5)
            break;
        }
        else
        {
          v22 = 0;
          if (!a5)
            break;
        }
        if (v22 > a5)
          break;
      }
LABEL_23:
      v18 += 21;
      v19 -= 168;
      if (!v19)
        return;
    }
    if ((v18[13] & 1) != 0)
    {
      v23 = *v18;
      v24 = *(unsigned int *)(a2 + 8);
      if (v24 >= *(unsigned int *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v24 = *(unsigned int *)(a2 + 8);
      }
      v25 = (_QWORD *)(*(_QWORD *)a2 + 16 * v24);
      *v25 = 0;
      v25[1] = v23;
      ++*(_DWORD *)(a2 + 8);
    }
    goto LABEL_23;
  }
}

unint64_t sub_22E9C4658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  unsigned int v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t result;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  if (!a3)
    return 0;
  v6 = a4;
  v8 = a2;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 864))
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 208) + 32))(*(_QWORD *)(a1 + 208), a1, a4, a2, a3, a5, a6);
  v9 = 0;
  v10 = v8 + 16 * a3;
  while (1)
  {
    result = sub_22E8A9EE4(v8, v6);
    if (result >= 0x10)
      break;
    result = v9;
LABEL_15:
    v8 += 16;
    v9 = result;
    if (v8 == v10)
      return result;
  }
  if (v9 < 0x10)
    goto LABEL_15;
  v12 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
  if (v12 && (v13 = *(_DWORD *)(v12 + 16), (v13 & 0xFE) == 0x28))
  {
LABEL_19:
    if ((v13 & 0x100000) != 0)
    {
      v24 = result;
      do
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v12 || (v18 = *(_DWORD *)(v12 + 16), (v18 & 0xFE) != 0x28))
        {
          v12 = sub_22F10CF48(v12);
          v18 = *(_DWORD *)(v12 + 16);
        }
        result = v24;
      }
      while ((v18 & 0x100000) != 0);
    }
    v14 = *(_QWORD *)(v12 + 32);
  }
  else
  {
    v14 = v9;
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
    {
      v22 = result;
      v12 = sub_22F10CF48(v12);
      result = v22;
      v14 = v9;
      if (v12)
      {
        v13 = *(_DWORD *)(v12 + 16);
        goto LABEL_19;
      }
    }
  }
  v15 = result & 0xFFFFFFFFFFFFFFF0;
  v16 = *(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0);
  if (v16 && (v17 = *(_DWORD *)(v16 + 16), (v17 & 0xFE) == 0x28))
  {
LABEL_23:
    if ((v17 & 0x100000) != 0)
    {
      v21 = v14;
      do
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v16 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v16 || (v19 = *(_DWORD *)(v16 + 16), (v19 & 0xFE) != 0x28))
        {
          v16 = sub_22F10CF48(v16);
          v19 = *(_DWORD *)(v16 + 16);
        }
        v14 = v21;
      }
      while ((v19 & 0x100000) != 0);
    }
    v15 = *(_QWORD *)(v16 + 32) & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_14;
    v20 = v14;
    v23 = v15;
    v16 = sub_22F10CF48(v16);
    if (v16)
    {
      v17 = *(_DWORD *)(v16 + 16);
      v14 = v20;
      goto LABEL_23;
    }
    v14 = v20;
    v15 = v23;
  }
LABEL_14:
  result = v9;
  if (*(_QWORD *)(*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0))
    goto LABEL_15;
  return 0;
}

unint64_t sub_22E9C487C()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unsigned __int8 **v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  _QWORD *v45;
  unint64_t v46;
  __n128 v47;
  unint64_t *v48;
  BOOL v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  __int128 v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  __int128 v65;
  __int128 v66;
  _QWORD v67[339];
  int v68;
  _OWORD v69[9];
  _QWORD *v70;
  uint64_t v71;
  _QWORD v72[5];
  __int128 v73;
  uint64_t v74;
  unsigned int v75;
  __int128 v76;
  int v77;
  _OWORD *v78;
  uint64_t v79;
  _QWORD v80[18];

  v0 = MEMORY[0x24BDAC7A8]();
  v80[16] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(v0 + 208))
    return 0;
  v7 = v6;
  v8 = v5;
  v9 = v4;
  v10 = v3;
  v11 = v2;
  v12 = v1;
  v13 = (_QWORD *)v0;
  v78 = v80;
  v79 = 0x800000000;
  v14 = v2;
  if ((sub_22EE8B180(v0, v2, v1, 1, 0) & 1) == 0)
  {
    v15 = sub_22F10C2A4(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0));
    if (v15)
    {
      v17 = v15;
      v18 = *(_DWORD *)(v15 + 28);
      if ((v18 & 0x7Eu) - 34 <= 3)
      {
        if ((v18 & 0x7Fu) - 35 >= 3)
          v19 = 0;
        else
          v19 = v15;
        v64 = v8;
        if ((_DWORD)v7 && (*(_DWORD *)(v15 + 72) & 0xE000) != 0x4000)
        {
          if ((*(_BYTE *)(v13[9] + 1) & 1) != 0)
          {
            if (!v19)
              goto LABEL_76;
            v20 = v19;
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v19 + 104) + 96), *(_QWORD *)(v19 + 104));
            v19 = v20;
            if ((**(_QWORD **)(v20 + 128) & 0x80) == 0)
            {
LABEL_53:
              *(_QWORD *)&v66 = v67;
              *((_QWORD *)&v66 + 1) = 0x1000000000;
              v67[336] = v69;
              v67[337] = v69;
              v67[338] = 16;
              v68 = 0;
              v69[8] = 0u;
              v70 = v72;
              v71 = 0x400000000;
              v72[4] = (char *)&v73 + 8;
              v73 = 0u;
              v74 = 1;
              v75 = v11;
              v77 = 0;
              v76 = 0u;
              v46 = sub_22EC66BE4((uint64_t)v13, v19);
              if (v46)
              {
                while (1)
                {
                  v48 = (unint64_t *)(v46 & 0xFFFFFFFFFFFFFFF8);
                  v49 = (v46 & 0xFFFFFFFFFFFFFFF8) == 0 || (v46 & 4) == 0;
                  v50 = v46 & 0xFFFFFFFFFFFFFFF8;
                  if (!v49)
                    v50 = *v48;
                  v51 = *(_DWORD *)(v50 + 28);
                  if (v50 && (*(_DWORD *)(v50 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
                  {
                    if ((_DWORD)v7 && (*(_BYTE *)(v13[9] + 1) & 1) != 0)
                    {
                      if ((sub_22EAC23F4(v13, v50) & 1) != 0)
                        goto LABEL_73;
                      v51 = *(_DWORD *)(v50 + 28);
                    }
                    sub_22ED0475C((uint64_t)v13, v50, (v51 >> 13) & 3 | v50, v12, v10, v9, (uint64_t)&v66, 0, 1u, 1, 0, 0, 0, 0, 0);
                  }
                  else
                  {
                    if (!v50 || (*(_DWORD *)(v50 + 28) & 0x7F) != 0x1D)
                      goto LABEL_73;
                    if ((_DWORD)v7 && (*(_BYTE *)(v13[9] + 1) & 1) != 0)
                    {
                      if ((sub_22EAC23F4(v13, *(_QWORD *)(v50 + 48)) & 1) != 0)
                        goto LABEL_73;
                      v51 = *(_DWORD *)(v50 + 28);
                    }
                    sub_22ED07F48(v13, (_QWORD *)v50, (v51 >> 13) & 3 | v50, v12, 0, v10, v9, (uint64_t)&v66, 0, 1u, 1u, 0, 0);
                  }
LABEL_73:
                  if (!v49)
                  {
                    v46 = v48[1];
                    if (v46)
                      continue;
                  }
                  break;
                }
              }
              sub_22E9C4470((uint64_t)v13, (uint64_t)&v78, (uint64_t)&v66, v14, v9, v47);
              sub_22E9DC79C((uint64_t *)&v66);
              v8 = v64;
LABEL_76:
              v52 = (uint64_t)v78;
              v53 = v79;
              v54 = v8;
              v55 = (uint64_t)v13;
              v56 = v9;
              v57 = v7;
LABEL_77:
              v12 = sub_22E9C4658(v55, v52, v53, v56, v54, v57);
              goto LABEL_4;
            }
          }
          v63 = v19;
          LODWORD(v66) = 4;
          *((_QWORD *)&v66 + 1) = v17;
          v21 = sub_22E8A9E04((uint64_t)&v66);
          if (v9)
          {
            v22 = 0;
            v23 = 0;
            v24 = 8 * v9;
            v25 = (unsigned __int8 **)v10;
            do
            {
              v26 = (uint64_t)*v25;
              v27 = **v25;
              if (v27 == 164)
              {
                v28 = v64;
                if ((*(_DWORD *)(v26 + 20) & 0xFFFE) != 2 || (v29 = *(_QWORD *)(v26 + 24), *(_DWORD *)v29))
                {
                  v32 = -256;
                  v33 = 255;
                  goto LABEL_88;
                }
                v30 = *(_QWORD *)(v29 + 8);
                if ((v30 & 1) != 0)
                {
                  v23 = 0;
                  v22 = v30 & 0xFFFFFFFFFFFFFFFELL;
                }
                else
                {
                  v23 = 0;
                  v31 = *(_QWORD *)(v30 + 40);
                  if ((v31 & 7) != 0)
                    v22 = 0;
                  else
                    v22 = v31 & 0xFFFFFFFFFFFFFFF8;
                }
              }
              else
              {
                if (v27 == 165)
                  goto LABEL_78;
                ++v23;
              }
              ++v25;
              v24 -= 8;
            }
            while (v24);
            if (v22)
            {
              v34 = v23;
              v35 = v21;
              v36 = sub_22EFC3B90(v17);
              if (v36)
              {
                v37 = v36;
                v38 = *(_QWORD *)(v36 + 40);
                if ((v38 & 7) != 0)
                  v39 = 0;
                else
                  v39 = v38 & 0xFFFFFFFFFFFFFFF8;
                if (v39 == v22)
                {
                  v40 = 0;
LABEL_81:
                  v58 = sub_22E8A9E04((uint64_t)&v66);
                  if (v40 >= v58)
                  {
                    v28 = v64;
                  }
                  else
                  {
                    v59 = v58;
                    v28 = v64;
                    while (sub_22E8AA070((uint64_t)&v66, v40) != v37)
                    {
                      if (v59 == ++v40)
                      {
                        v40 = v59;
                        break;
                      }
                    }
                  }
                  v21 = v35;
                  v32 = (v34 + v40 + 1) & 0xFFFFFF00;
                  v33 = (v34 + v40 + 1);
                }
                else
                {
                  v40 = 1;
                  v21 = v35;
                  while (1)
                  {
                    v37 = *(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF8;
                    if (!v37)
                      break;
                    if ((*(_DWORD *)(v37 + 28) & 0x7Fu) - 49 <= 2)
                    {
                      v41 = *(_QWORD *)(v37 + 40);
                      if ((v41 & 7) != 0)
                        v42 = 0;
                      else
                        v42 = v41 & 0xFFFFFFFFFFFFFFF8;
                      if (v42 == v22)
                        goto LABEL_81;
                      ++v40;
                    }
                  }
LABEL_78:
                  v32 = -256;
                  v33 = 255;
                  v28 = v64;
                }
              }
              else
              {
                v32 = -256;
                v33 = 255;
                v28 = v64;
                v21 = v35;
              }
LABEL_88:
              v60 = v32 | v33;
              if (v60 >= v21)
                goto LABEL_4;
              v61 = v66;
              v62 = v79;
              if (v79 >= HIDWORD(v79))
              {
                v65 = v66;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v61 = v65;
                v62 = v79;
              }
              v78[v62] = v61;
              v53 = (v79 + 1);
              LODWORD(v79) = v79 + 1;
              v52 = (uint64_t)v78;
              v54 = v28;
              v55 = (uint64_t)v13;
              v56 = v60;
              v57 = 1;
              goto LABEL_77;
            }
          }
          v19 = v63;
          if (v9 < v21)
          {
            v43 = v66;
            v44 = v79;
            if (v79 >= HIDWORD(v79))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v19 = v63;
              v44 = v79;
            }
            v45 = &v78[v44];
            *v45 = v43;
            v45[1] = v17;
            LODWORD(v79) = v79 + 1;
          }
          v8 = v64;
        }
        if (!v19)
          goto LABEL_76;
        goto LABEL_53;
      }
    }
  }
LABEL_4:
  if (v78 != (_OWORD *)v80)
    free(v78);
  return v12;
}

unint64_t sub_22E9C4E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 208) || !a2 || (*(_DWORD *)(a2 + 28) & 0x7F) != 0x37)
    return 0;
  v7 = *(_WORD *)(a2 + 80) & 0x7F;
  v8 = -40;
  if (v7 > 0x46)
  {
    if (v7 == 83)
      goto LABEL_20;
    if (v7 == 71)
    {
      v8 = -56;
      goto LABEL_20;
    }
    if (v7 != 81)
    {
LABEL_15:
      v9 = v7 - 52;
      v10 = v7 - 33 >= 5;
      v11 = -48;
      if (!v10)
        v11 = -64;
      if (v9 >= 6)
        v8 = v11;
      else
        v8 = -72;
    }
  }
  else
  {
    if (v7 > 0x18)
      goto LABEL_14;
    if (v7 == 16)
    {
LABEL_7:
      v8 = -48;
      goto LABEL_20;
    }
    if (((1 << v7) & 0x1066) == 0)
    {
      if (v7 == 24)
        goto LABEL_7;
LABEL_14:
      if (v7 == 70)
      {
        v8 = -64;
        goto LABEL_20;
      }
      goto LABEL_15;
    }
  }
LABEL_20:
  v12 = *(_QWORD *)(a2 + 72 + v8 + 16);
  v13 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 4) != 0)
    v13 = (_QWORD *)*v13;
  if (v13)
    v14 = (uint64_t)(v13 - 8);
  else
    v14 = 0;
  if (sub_22EAAEBCC(a1, v14, a3, a4, a7))
    return sub_22E9C487C();
  return 0;
}

unint64_t sub_22E9C4FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  BOOL v5;
  unint64_t v6;
  unint64_t v10;
  unsigned int *v11;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[17];

  v23[16] = *MEMORY[0x24BDAC8D0];
  v19 = a3;
  v20 = a4;
  if (*(_QWORD *)(a1 + 208))
    v5 = a2 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  v21 = v23;
  v22 = 0x800000000;
  v18[0] = &v19;
  v18[1] = &v21;
  v17 = a2;
  v10 = sub_22F0F08CC(&v17);
  if (v10)
  {
    sub_22E9C5100((uint64_t)v18, v10);
  }
  else if ((a2 & 6) == 2)
  {
    v11 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    if ((a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v13 = *v11;
      if ((v13 & 3) == 0 && v13 >= 4)
      {
        v14 = (uint64_t *)(v11 + 2);
        v15 = 8 * (v13 >> 2);
        do
        {
          if (*v14)
            v16 = (*(_DWORD *)(*v14 + 28) & 0x7Fu) - 33 >= 0xFFFFFFF9;
          else
            v16 = 0;
          if (v16)
            sub_22E9C5100((uint64_t)v18, *v14);
          ++v14;
          v15 -= 8;
        }
        while (v15);
      }
    }
  }
  v6 = sub_22E9C4658(a1, (uint64_t)v21, v22, v20, a5, 0);
  if (v21 != v23)
    free(v21);
  return v6;
}

uint64_t sub_22E9C5100(uint64_t result, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *i;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;

  v3 = (uint64_t **)result;
  v4 = *(uint64_t **)result;
  if (*(_QWORD *)(*(_QWORD *)result + 8))
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = *v4;
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(_DWORD *)(v8 + 12) & 0x1FFFFFFF;
      v10 = v5;
      if (v9 <= v6)
      {
        if (!(_DWORD)v9)
          return result;
        v11 = 8 * v9;
        for (i = (uint64_t *)(v8 + 16); ; ++i)
        {
          result = sub_22EFC78D8(*i);
          if ((_DWORD)result)
            break;
          v11 -= 8;
          if (!v11)
            return result;
        }
        v10 = (*(_DWORD *)(v8 + 12) & 0x1FFFFFFF) - 1;
      }
      v13 = *(_QWORD *)(v8 + 16 + 8 * v10);
      v14 = *(_DWORD *)(v7 + 56 * v5);
      if (v14)
      {
        if (v14 == 2)
        {
          if ((*(_DWORD *)(v13 + 28) & 0x7F) != 0x20)
            return result;
        }
        else if ((*(_DWORD *)(v13 + 28) & 0x7F) != 0x3B)
        {
          return result;
        }
      }
      else if ((*(_DWORD *)(v13 + 28) & 0x7F) != 0x26)
      {
        return result;
      }
      v4 = *v3;
      v5 = ++v6;
    }
    while ((*v3)[1] > (unint64_t)v6);
  }
  v15 = v3[1];
  v16 = *((unsigned int *)v15 + 2);
  if (v16 >= *((_DWORD *)v15 + 3))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v17 = (_QWORD *)(*v15 + 16 * *((unsigned int *)v15 + 2));
    *v17 = 3;
  }
  else
  {
    v17 = (_QWORD *)(*v15 + 16 * v16);
    *(_DWORD *)v17 = 3;
  }
  v17[1] = a2;
  ++*((_DWORD *)v15 + 2);
  return result;
}

void sub_22E9C5270(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21[3];
  void *v22;
  int v23;
  char v24;
  void *v25;
  void *v26;
  _OWORD v27[2];
  int v28;
  _QWORD v29[3];
  __int128 v30;
  __int128 v31;
  _QWORD v32[3];
  __int128 v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  __int128 v45[11];
  __int128 v46;
  unint64_t v47;
  __int128 v48;
  char v49;
  void *v50;
  int v51;
  char v52;
  _BYTE *v53;
  void *v54;
  uint64_t v55;
  int v56;
  _BYTE v57[64];
  void **v58[3];

  v6 = sub_22E9B41D0(a2, a5);
  if (v6 < 0x10)
    return;
  v7 = v6;
  v8 = sub_22E9C55B0(v6);
  if (!v8)
    return;
  v9 = v8;
  if (!sub_22EFC3B90(v8))
    return;
  LODWORD(v46) = 10;
  BYTE4(v46) = 0;
  v52 = 0;
  *((_QWORD *)&v46 + 1) = 0;
  v48 = 0u;
  v49 = 0;
  v53 = v57;
  v54 = v57;
  v55 = 8;
  v56 = 0;
  v47 = v7;
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  sub_22E9B831C((uint64_t)&v41, a1, v10, v11, &v46, 0, 0);
  v12 = operator new(0x28uLL);
  v12[2] = 0;
  v12[3] = 0;
  *((_DWORD *)v12 + 8) = 0;
  v13 = v43;
  *v12 = v43;
  v12[1] = &v43;
  v13[1] = v12;
  v43 = v12;
  ++v44;
  if ((*(_BYTE *)(v9 + 72) & 0x80) != 0)
    sub_22EFCC320(v9 + 64);
  v14 = *(_QWORD *)(v9 + 80);
  if (v14)
  {
    while ((*(_DWORD *)(v14 + 28) & 0x7F) != 0x44)
    {
      v15 = v14;
      if ((*(_DWORD *)(v14 + 28) & 0x7Fu) - 52 >= 0xFFFFFFFD)
        goto LABEL_11;
LABEL_12:
      v14 = *(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v14)
        goto LABEL_13;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * *(unsigned int *)(v14 + 64) - 8);
LABEL_11:
    v16 = sub_22E9C5678(v15);
    *(_QWORD *)&v33 = v15;
    *(_QWORD *)&v34 = v16;
    DWORD2(v34) = 0;
    v35 = 0;
    v37 = 0;
    v38 = 0;
    v36 = 0;
    memset(v32, 0, sizeof(v32));
    LOBYTE(v39) = v39 & 0xC0;
    v40 = 0uLL;
    *((_QWORD *)&v39 + 1) = 0;
    sub_22E8AB5B4((uint64_t)&v33, 1);
    v58[0] = (void **)v32;
    sub_22E6C60B8(v58);
    v27[0] = v33;
    v27[1] = v34;
    v28 = v35;
    memset(v29, 0, sizeof(v29));
    sub_22E6C6020(v29, v36, v37, 0x6DB6DB6DB6DB6DB7 * ((v37 - v36) >> 3));
    v30 = v39;
    v31 = v40;
    sub_22E9C57E4((unint64_t)&v41, v27, *(_QWORD *)(a1 + 216), 0, 0);
    v58[0] = (void **)v29;
    sub_22E6C60B8(v58);
    v58[0] = (void **)&v36;
    sub_22E6C60B8(v58);
    goto LABEL_12;
  }
LABEL_13:
  v17 = (uint64_t)v43;
  v18 = *v43;
  *(_QWORD *)(v18 + 8) = v43[1];
  **(_QWORD **)(v17 + 8) = v18;
  --v44;
  sub_22E9D8FB0(v17);
  v19 = *(_QWORD *)(a1 + 208);
  sub_22F2A4F2C((uint64_t)v21, v45);
  if (v42 == v41)
    v20 = 0;
  else
    v20 = v41;
  sub_22E9B83FC(a1, v19, v21, (uint64_t)v20, -1431655765 * ((unint64_t)(v42 - v41) >> 5));
  if (v26 != v25)
    free(v26);
  if (v24)
  {
    if (v23)
      free(v22);
    v24 = 0;
  }
  sub_22E9B8490(&v41);
  if (v54 != v53)
    free(v54);
  if (v52)
  {
    if (v51)
      free(v50);
  }
}

uint64_t sub_22E9C55B0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_22F10C2A4(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0));
  if (v2 && (v5 = v2, (*(_DWORD *)(v2 + 28) & 0x7Eu) - 34 <= 3))
  {
    if ((*(_DWORD *)(v2 + 28) & 0x7E) == 0x24 && !sub_22EFD5760(v2))
    {
      v7 = *(_QWORD *)(v5 + 152);
      v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
      if ((v7 & 4) != 0 && v8)
      {
        do
        {
          v9 = *(_QWORD *)(*v8 + 152);
          v8 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
        }
        while ((v9 & 4) != 0 && v8);
      }
      return v8[6];
    }
  }
  else
  {
    v3 = sub_22F10D628(*v1);
    if (v3 && (v10 = *(_QWORD *)(v3 + 32), (v4 = sub_22F0F08CC(&v10)) != 0) && (*(_DWORD *)(v4 + 28) & 0x7F) == 0x1C)
      return *(_QWORD *)(v4 + 48);
    else
      return 0;
  }
  return v5;
}

uint64_t sub_22E9C5678(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  __int16 v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;

  if (!a1)
    return 80;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
  v4 = v2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 4) != 0)
    v4 = v3[1];
  v5 = *(_WORD *)(v4 + 8) & 0x7F;
  v6 = v5 > 0x18 || ((1 << v5) & 0x1000006) == 0;
  if (!v6 || v5 - 52 <= 5)
  {
    if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x3E)
      return 34;
    v7 = *(_QWORD *)(a1 + 40);
    if ((v7 & 7) != 0)
      return 34;
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
    if (!v8)
      return 34;
    v9 = *(_DWORD **)(v8 + 16);
    if (*v9 != 4 || v9[4] != 1684890463)
      return 34;
    return 80;
  }
  if ((v2 & 4) != 0)
    v3 = (_QWORD *)*v3;
  v11 = *(_WORD *)(sub_22EFCBB30((unint64_t)v3) + 8);
  if ((v11 & 0x7Eu) - 34 >= 4 && (v11 & 0x7Fu) - 19 > 4)
  {
    if ((*(_DWORD *)(a1 + 28) & 0x7F) == 0x43)
      return 65;
    else
      return 50;
  }
  else
  {
    if ((*(_DWORD *)(a1 + 28) & 0x7F) == 0x39)
      return 80;
    v12 = *(_QWORD *)(a1 + 40) & 7;
    if ((_DWORD)v12 == 7)
    {
      v13 = *(_DWORD *)(*(_QWORD *)(a1 + 40) & 0xFFFFFFFFFFFFFFF8);
      if (v13 >= 3)
        v13 = 3;
      LODWORD(v12) = v13 | 8;
    }
    v14 = (int)v12 - 5;
    if (v14 >= 5)
      return 35;
    else
      return dword_22F469D0C[v14];
  }
}

__n128 sub_22E9C57E4(unint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4, int a5)
{
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  uint64_t v12;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void ***v20;
  _QWORD *v21;
  int v22;
  const void *v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  BOOL (*v30)(uint64_t, uint64_t);
  BOOL v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  void **v44;
  unint64_t v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unsigned int v64;
  uint64_t v65;
  _QWORD *v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  int v104;
  uint64_t v105;
  BOOL v106;
  int v107;
  int v108;
  BOOL v109;
  _QWORD *v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  llvm *v116;
  unint64_t v117;
  unint64_t v118;
  int v119;
  unsigned int v120;
  _OWORD *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void **v135;
  unsigned int v136;
  int v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _OWORD v142[2];
  int v143;
  _QWORD v144[3];
  __int128 v145;
  __int128 v146;
  char v147;
  _OWORD v148[2];
  int v149;
  _QWORD v150[3];
  __int128 v151;
  __int128 v152;
  _QWORD v153[3];
  __int128 v154;
  __int128 v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  void **v163[2];

  if (*((_DWORD *)a2 + 6))
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 >= *(_QWORD *)(a1 + 16))
    {
      v12 = sub_22E9D8E48((uint64_t *)a1, (uint64_t)a2);
    }
    else
    {
      v8 = *(_OWORD *)a2;
      v9 = *((_OWORD *)a2 + 1);
      *(_DWORD *)(v7 + 32) = *((_DWORD *)a2 + 8);
      *(_OWORD *)v7 = v8;
      *(_OWORD *)(v7 + 16) = v9;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      *(_QWORD *)(v7 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v7 + 40), a2[5], a2[6], 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[6] - a2[5]) >> 3));
      result = *((__n128 *)a2 + 4);
      v11 = *((_OWORD *)a2 + 5);
      *(__n128 *)(v7 + 64) = result;
      *(_OWORD *)(v7 + 80) = v11;
      v12 = v7 + 96;
    }
    *(_QWORD *)(a1 + 8) = v12;
    return result;
  }
  v16 = *a2;
  if (*a2 && (*(_DWORD *)(v16 + 28) & 0x7E) == 0x2E)
  {
    v17 = *(_QWORD *)(v16 + 64);
    v18 = sub_22E9C5678(v17);
    v19 = a2[9];
    *(_QWORD *)&v154 = v17;
    LODWORD(v155) = v18;
    *(_QWORD *)((char *)&v155 + 4) = 0;
    v156 = 0;
    v158 = 0;
    v159 = 0;
    v157 = 0;
    memset(v153, 0, sizeof(v153));
    LOBYTE(v160) = 0;
    v161 = 0uLL;
    *((_QWORD *)&v160 + 1) = v19;
    sub_22E8AB5B4((uint64_t)&v154, 1);
    v163[0] = (void **)v153;
    sub_22E6C60B8(v163);
    *(_QWORD *)&v161 = v16;
    v148[0] = v154;
    v148[1] = v155;
    v149 = v156;
    memset(v150, 0, sizeof(v150));
    sub_22E6C6020(v150, v157, v158, 0x6DB6DB6DB6DB6DB7 * ((v158 - v157) >> 3));
    v151 = v160;
    v152 = v161;
    sub_22E9C57E4(a1, v148, a3, a4, 0);
    v163[0] = (void **)v150;
    sub_22E6C60B8(v163);
    v163[0] = (void **)&v157;
    v20 = v163;
    goto LABEL_7;
  }
  v147 = 0;
  if (sub_22E9DC850(a1, v16, &v147))
  {
    v21 = (_QWORD *)*a2;
    v22 = *(_DWORD *)(*a2 + 28) & 0x7F;
    if (*a2 && v22 == 29)
      v22 = *(_DWORD *)(v21[6] + 28) & 0x7F;
    if (v22 != 55)
    {
      if (a4)
      {
        if ((sub_22E9DCA94(a1, a2, a3, a4) & 1) != 0)
          return result;
        v21 = (_QWORD *)*a2;
      }
      v23 = (const void *)(*(uint64_t (**)(_QWORD *))(*v21 + 32))(v21);
      sub_22E3BA850(a1 + 24, v23);
      if (v24)
      {
        if (v147)
        {
          *((_BYTE *)a2 + 64) |= 8u;
          *((_DWORD *)a2 + 4) = 75;
        }
        else
        {
          v30 = *(BOOL (**)(uint64_t, uint64_t))(a1 + 208);
          if (*(_QWORD *)(a1 + 216))
            v31 = (*(_QWORD *)(a1 + 216) & 1 | (unint64_t)v30) == 0;
          else
            v31 = 1;
          v32 = v31;
          if (v30 == sub_22E9C2584 && v32 && !a2[9] && a5)
          {
            v33 = *(_QWORD *)(*a2 + 16);
            v34 = (_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF8);
            if ((v33 & 4) != 0)
              v34 = (_QWORD *)*v34;
            if ((*(_WORD *)(sub_22EFCBB30((unint64_t)v34) + 8) & 0x7Fu) - 35 <= 2)
              *((_BYTE *)a2 + 64) |= 4u;
          }
        }
        v25 = a2 + 8;
        if ((a2[8] & 4) != 0 && (a2[8] & 8) == 0 && !a2[9])
        {
          v26 = *(_QWORD *)(*a2 + 16);
          v27 = v26 & 0xFFFFFFFFFFFFFFF8;
          if ((v26 & 4) != 0)
            v27 = *(_QWORD *)v27;
          v28 = *(_WORD *)(v27 + 8) & 0x7F;
          if (v27 && v28 == 16)
          {
            v29 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 88);
            v154 = xmmword_22F45EEF0;
            *(_QWORD *)&v155 = v27 - 48;
          }
          else
          {
            if (!v27 || (v28 - 38) < 0xFFFFFFFB)
            {
              *(_BYTE *)v25 = a2[8] & 0xFB;
              goto LABEL_52;
            }
            v35 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 88);
            v36 = *(_QWORD *)(v27 - 16);
            if (v36)
              v37 = v36 & 0xFFFFFFFFFFFFFFF0;
            else
              v37 = sub_22EF6462C(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 88), v27 - 64);
            v38 = *(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0);
            v154 = xmmword_22F4559B0;
            *(_QWORD *)&v155 = v38;
            v29 = v35;
          }
          a2[9] = sub_22F0AA9D0(v29, (uint64_t)&v154);
        }
LABEL_52:
        if (a5)
        {
          *((_DWORD *)a2 + 4) += 2;
          *((_BYTE *)a2 + 64) |= 2u;
        }
        sub_22E9DCB9C(a1, a2);
        if (!*(_BYTE *)(a1 + 300))
          goto LABEL_89;
        v39 = *a2;
        if (!*a2
          || (*(_DWORD *)(v39 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC
          || (*(_QWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v39 + 32))(*a2) + 80) & 0xE000) == 0x4000
          || (*(_QWORD *)(v39 + 40) & 7) == 6
          && (*(_DWORD *)(*(_QWORD *)(v39 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4)
        {
          goto LABEL_89;
        }
        v40 = sub_22E46BB88(v39);
        if (*(_QWORD *)(a1 + 288) == v40)
        {
          --*((_DWORD *)a2 + 4);
        }
        else
        {
          *(_QWORD *)&v154 = *(_QWORD *)(a1 + 288);
          sub_22E96251C((unsigned int *)&v154, v40);
          if ((v154 & 0xCFFFFFFFFLL) != 0
            || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 72) + 104) & 0x20) != 0
            && *(_DWORD *)(a1 + 288) <= 0x7FFu
            && (sub_22E46BB88(v39) & 0xFFFFF800) != 0)
          {
            return result;
          }
        }
        v41 = *(_QWORD *)(*(_QWORD *)(v39 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (!v41 || *(_BYTE *)(v41 + 16) != 26)
          v41 = sub_22F10CF48(v41);
        if ((*(_DWORD *)(v41 + 20) & 3) == 2)
        {
          if (*(_DWORD *)(a1 + 296) == 1)
            return result;
        }
        else if ((*(_DWORD *)(v41 + 20) & 3) == 1 && (v40 & 1) == 0 && *(_DWORD *)(a1 + 296) != 1)
        {
          return result;
        }
        v42 = *(_QWORD *)(v39 + 40);
        v162 = 0;
        v43 = sub_22E9DCF94(*(_QWORD *)(a1 + 264), *(_DWORD *)(a1 + 280), a3, v42, &v162);
        v44 = (void **)v162;
        if ((v43 & 1) != 0)
        {
          v45 = *(_QWORD *)(v162 + 16);
          v135 = (void **)v162;
          if (v45 >= 8)
          {
            v47 = v45 & 0xFFFFFFFFFFFFFFF8;
            if ((v45 & 4) != 0 || !v47)
            {
              if ((v45 & 4) != 0)
              {
                v46 = 0;
                v48 = (*(_QWORD *)v47 + 16 * *(unsigned int *)(v47 + 8)) | 4;
              }
              else
              {
                v46 = 0;
                v48 = 0;
              }
              v47 = *(_QWORD *)v47 | 4;
            }
            else
            {
              v48 = 0;
              v46 = *(_DWORD *)(v162 + 24);
            }
          }
          else
          {
            v46 = 0;
            v47 = 0;
            v48 = 0;
          }
LABEL_86:
          if (v48 == v47 && !v46)
          {
LABEL_88:
            sub_22E9DCCD8((uint64_t)(v135 + 2), v39, -1431655765 * ((*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5));
            v25 = a2 + 8;
LABEL_89:
            v53 = *(_QWORD *)(a1 + 8);
            if (v53 >= *(_QWORD *)(a1 + 16))
            {
              v57 = sub_22E9D8E48((uint64_t *)a1, (uint64_t)a2);
            }
            else
            {
              v54 = *(_OWORD *)a2;
              v55 = *((_OWORD *)a2 + 1);
              *(_DWORD *)(v53 + 32) = *((_DWORD *)a2 + 8);
              *(_OWORD *)v53 = v54;
              *(_OWORD *)(v53 + 16) = v55;
              *(_QWORD *)(v53 + 48) = 0;
              *(_QWORD *)(v53 + 56) = 0;
              *(_QWORD *)(v53 + 40) = 0;
              sub_22E6C6020((_QWORD *)(v53 + 40), a2[5], a2[6], 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[6] - a2[5]) >> 3));
              result = *(__n128 *)v25;
              v56 = *((_OWORD *)v25 + 1);
              *(_OWORD *)(v53 + 64) = *(_OWORD *)v25;
              *(_OWORD *)(v53 + 80) = v56;
              v57 = v53 + 96;
            }
            *(_QWORD *)(a1 + 8) = v57;
            if (v147)
              return result;
            v58 = *((_OWORD *)a2 + 1);
            v142[0] = *(_OWORD *)a2;
            v142[1] = v58;
            v143 = *((_DWORD *)a2 + 8);
            memset(v144, 0, sizeof(v144));
            sub_22E6C6020(v144, a2[5], a2[6], 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[6] - a2[5]) >> 3));
            v59 = *((_OWORD *)v25 + 1);
            v145 = *(_OWORD *)v25;
            v146 = v59;
            sub_22E9DCDB4(a1, (uint64_t)v142);
            *(_QWORD *)&v154 = v144;
            v20 = (void ***)&v154;
LABEL_7:
            sub_22E6C60B8(v20);
            return result;
          }
          v60 = v46;
          while (1)
          {
            v61 = v47 & 0xFFFFFFFFFFFFFFF8;
            if ((v47 & 4) != 0 || !v61)
              v46 = *(_DWORD *)(v61 + 8);
            v62 = *(_QWORD *)(v39 + 16);
            v63 = (_QWORD *)(v62 & 0xFFFFFFFFFFFFFFF8);
            if ((v62 & 4) != 0)
              v63 = (_QWORD *)*v63;
            v64 = v46;
            v140 = *(_QWORD *)a1;
            v139 = *(_QWORD *)a1 + 96 * v46;
            v65 = *(_QWORD *)(*(_QWORD *)v139 + 16);
            v66 = (_QWORD *)(v65 & 0xFFFFFFFFFFFFFFF8);
            if ((v65 & 4) != 0)
              v66 = (_QWORD *)*v66;
            if (v63 != v66)
              goto LABEL_178;
            v137 = *(_DWORD *)(a1 + 296);
            v141 = *(_QWORD *)v139;
            v67 = sub_22EFBF68C(v39);
            v68 = sub_22EFBF68C(v141);
            v69 = v141;
            if (v67 != v68)
              goto LABEL_178;
            v70 = *(_QWORD *)(*(_QWORD *)(v39 + 48) & 0xFFFFFFFFFFFFFFF0);
            v136 = v64;
            if (v70 && *(_BYTE *)(v70 + 16) == 26)
              goto LABEL_106;
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v70 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
            {
              v71 = 0;
              v69 = v141;
              goto LABEL_107;
            }
            v70 = sub_22F10CF48(v70);
            v69 = v141;
            if (v70)
LABEL_106:
              v71 = (unsigned __int16)(*(_QWORD *)(v70 + 16) >> 38);
            else
              v71 = 0;
LABEL_107:
            v72 = *(_QWORD *)(*(_QWORD *)(v69 + 48) & 0xFFFFFFFFFFFFFFF0);
            if (v72)
              v73 = *(_BYTE *)(v72 + 16) == 26;
            else
              v73 = 0;
            if (v73)
              goto LABEL_112;
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v72 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
            {
              v74 = 0;
              goto LABEL_113;
            }
            v72 = sub_22F10CF48(v72);
            if (v72)
LABEL_112:
              v74 = (unsigned __int16)(*(_QWORD *)(v72 + 16) >> 38);
            else
              v74 = 0;
LABEL_113:
            if (v71 != v74)
              goto LABEL_178;
            v75 = sub_22EFC0EB8(v39);
            v76 = sub_22EFC0EB8(v141);
            v77 = v141;
            if (v75 != v76)
              goto LABEL_178;
            v78 = *(_QWORD *)(*(_QWORD *)(v39 + 48) & 0xFFFFFFFFFFFFFFF0);
            if (v78 && *(_BYTE *)(v78 + 16) == 26
              || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v78 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
              && (v78 = sub_22F10CF48(v78), v77 = v141, v78))
            {
              v79 = *(_QWORD *)(v78 + 16);
              if ((v79 & 0x3FFFC000000000) != 0)
              {
                v80 = 0;
                v81 = (unsigned __int16)(v79 >> 38);
                v138 = v47;
                do
                {
                  v47 = v61;
                  v82 = v60;
                  v83 = v48;
                  v84 = *(_QWORD *)(v39 + 120);
                  v85 = v39;
                  v86 = *(_QWORD *)(*(_QWORD *)(v39 + 48) & 0xFFFFFFFFFFFFFFF0);
                  if (v86)
                    v87 = *(_BYTE *)(v86 + 16) == 26;
                  else
                    v87 = 0;
                  if (!v87 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v86 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
                  {
                    v95 = v81;
                    sub_22F10CF48(v86);
                    v81 = v95;
                    v77 = v141;
                  }
                  v88 = *(_QWORD *)(*(_QWORD *)(v84 + 8 * v80) + 48);
                  v89 = *(_QWORD *)((v88 & 0xFFFFFFFFFFFFFFF0) + 8);
                  v90 = *(_QWORD *)(v77 + 120);
                  v91 = *(_QWORD *)(*(_QWORD *)(v77 + 48) & 0xFFFFFFFFFFFFFFF0);
                  if (v91)
                    v92 = *(_BYTE *)(v91 + 16) == 26;
                  else
                    v92 = 0;
                  if (!v92 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v91 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
                  {
                    v134 = v81;
                    sub_22F10CF48(v91);
                    v81 = v134;
                    v77 = v141;
                  }
                  v93 = v88 & 7 | v89;
                  v94 = *(_QWORD *)(*(_QWORD *)(v90 + 8 * v80) + 48);
                  v48 = v83;
                  v39 = v85;
                  v60 = v82;
                  v61 = v47;
                  LOBYTE(v47) = v138;
                  if (v93 != (v94 & 7 | *(_QWORD *)((v94 & 0xFFFFFFFFFFFFFFF0) + 8)))
                    goto LABEL_178;
                }
                while (v81 != ++v80);
              }
            }
            v96 = sub_22E9DD080(v39);
            if (v96 >= v97)
            {
              v98 = v141;
              if (v97 == v96)
                goto LABEL_155;
              while (*(_WORD *)(*(_QWORD *)v97 + 32) != 167)
              {
                v97 += 8;
                if (v97 == v96)
                  goto LABEL_155;
              }
            }
            else
            {
              v98 = v141;
              while (*(_WORD *)(*(_QWORD *)v96 + 32) != 167)
              {
                v96 += 8;
                if (v96 == v97)
                  goto LABEL_155;
              }
            }
            if (v96 != v97)
              goto LABEL_178;
LABEL_155:
            v99 = sub_22E9DD080(v98);
            if (v99 < v100)
            {
              v101 = v141;
              while (*(_WORD *)(*(_QWORD *)v99 + 32) != 167)
              {
                v99 += 8;
                if (v99 == v100)
                  goto LABEL_165;
              }
              goto LABEL_164;
            }
            v101 = v141;
            if (v100 != v99)
            {
              while (*(_WORD *)(*(_QWORD *)v100 + 32) != 167)
              {
                v100 += 8;
                if (v100 == v99)
                  goto LABEL_165;
              }
LABEL_164:
              if (v99 != v100)
                goto LABEL_178;
            }
LABEL_165:
            v102 = *(_QWORD *)(*(_QWORD *)(v39 + 48) & 0xFFFFFFFFFFFFFFF0);
            if (v102)
              v103 = *(_BYTE *)(v102 + 16) == 26;
            else
              v103 = 0;
            if (!v103)
            {
              v102 = sub_22F10CF48(v102);
              v101 = v141;
            }
            v104 = *(_DWORD *)(v102 + 20);
            v105 = *(_QWORD *)(*(_QWORD *)(v101 + 48) & 0xFFFFFFFFFFFFFFF0);
            if (v105)
              v106 = *(_BYTE *)(v105 + 16) == 26;
            else
              v106 = 0;
            if (!v106)
              v105 = sub_22F10CF48(v105);
            if (v137 == 2 && (v104 & 3) != (*(_DWORD *)(v105 + 20) & 3))
            {
              v110 = a2 + 8;
              if ((v104 & 3) != 2)
                return result;
              goto LABEL_198;
            }
            *(_QWORD *)&v154 = sub_22E46BB88(v39);
            v163[0] = (void **)sub_22E46BB88(v141);
            v107 = sub_22E95F24C((unsigned int *)&v154, (uint64_t)v163[0]);
            v108 = sub_22E95F24C((unsigned int *)v163, v154);
            if (v107 != v108)
            {
              v110 = a2 + 8;
              if (!v108)
                return result;
LABEL_198:
              v111 = *(_OWORD *)a2;
              v112 = *((_OWORD *)a2 + 1);
              *(_DWORD *)(v139 + 32) = *((_DWORD *)a2 + 8);
              *(_OWORD *)v139 = v111;
              *(_OWORD *)(v139 + 16) = v112;
              v113 = v140 + 96 * v136;
              sub_22E6C58D4((void **)(v113 + 40));
              *(_OWORD *)(v113 + 40) = *(_OWORD *)(a2 + 5);
              *(_QWORD *)(v113 + 56) = a2[7];
              a2[5] = 0;
              a2[6] = 0;
              a2[7] = 0;
              result = *(__n128 *)v110;
              v114 = *((_OWORD *)v110 + 1);
              *(_OWORD *)(v113 + 64) = *(_OWORD *)v110;
              *(_OWORD *)(v113 + 80) = v114;
              return result;
            }
LABEL_178:
            v109 = (v47 & 4) == 0;
            if ((v47 & 4) != 0)
              v47 = (v61 + 16) | 4;
            else
              v47 = 0;
            if (v109)
              v60 = 0;
            v46 = v60;
            if (v48 == v47 && !(_DWORD)v60)
              goto LABEL_88;
          }
        }
        v163[0] = (void **)v162;
        v49 = *(_DWORD *)(a1 + 272);
        v50 = *(unsigned int *)(a1 + 280);
        if (4 * v49 + 4 >= (3 * v50))
        {
          v51 = 2 * v50;
        }
        else
        {
          v51 = *(_DWORD *)(a1 + 280);
          if ((int)v50 + ~v49 - *(_DWORD *)(a1 + 276) > v50 >> 3)
          {
LABEL_80:
            *(_DWORD *)(a1 + 272) = v49 + 1;
            if (*v44 != (void *)-4096 || (char *)v44[1] + 1 != 0)
              --*(_DWORD *)(a1 + 276);
            v46 = 0;
            v47 = 0;
            v48 = 0;
            *v44 = (void *)a3;
            v44[1] = (void *)v42;
            v44[2] = 0;
            v135 = v44;
            *((_DWORD *)v44 + 6) = 0;
            goto LABEL_86;
          }
        }
        v115 = v39;
        v116 = *(llvm **)(a1 + 264);
        v117 = (v51 - 1) | ((unint64_t)(v51 - 1) >> 1);
        v118 = v117 | (v117 >> 2) | ((v117 | (v117 >> 2)) >> 4);
        v119 = ((v118 | (v118 >> 8)) >> 16) | v118 | (v118 >> 8);
        if ((v119 + 1) > 0x40)
          v120 = v119 + 1;
        else
          v120 = 64;
        *(_DWORD *)(a1 + 280) = v120;
        v121 = (_OWORD *)MEMORY[0x23489D23C](32 * v120, 8);
        *(_QWORD *)(a1 + 264) = v121;
        if (v116)
        {
          *(_QWORD *)(a1 + 272) = 0;
          v122 = *(unsigned int *)(a1 + 280);
          if ((_DWORD)v122)
          {
            v123 = 32 * v122;
            do
            {
              *v121 = xmmword_22F4658D0;
              v121 += 2;
              v123 -= 32;
            }
            while (v123);
          }
          v124 = (char *)(32 * v50);
          if ((_DWORD)v50)
          {
            v125 = (char *)v116 + 16;
            v126 = v124;
            do
            {
              v128 = *((_QWORD *)v125 - 2);
              v127 = *((_QWORD *)v125 - 1);
              if ((v128 != -4096 || v127 != -1) && (v128 != -8192 || v127 != -2))
              {
                *(_QWORD *)&v154 = 0;
                sub_22E9DCF94(*(_QWORD *)(a1 + 264), *(_DWORD *)(a1 + 280), v128, v127, &v154);
                v131 = v154;
                *(_QWORD *)v154 = v128;
                *(_QWORD *)(v131 + 8) = *((_QWORD *)v125 - 1);
                *(_QWORD *)(v131 + 16) = 0;
                *(_DWORD *)(v131 + 24) = *((_DWORD *)v125 + 2);
                *(_QWORD *)(v131 + 16) = *(_QWORD *)v125;
                *(_QWORD *)v125 = 0;
                ++*(_DWORD *)(a1 + 272);
                sub_22E9D9024((uint64_t *)v125);
              }
              v125 += 32;
              v126 -= 32;
            }
            while (v126);
          }
          llvm::deallocate_buffer(v116, v124);
          v121 = *(_OWORD **)(a1 + 264);
          LODWORD(v132) = *(_DWORD *)(a1 + 280);
        }
        else
        {
          *(_QWORD *)(a1 + 272) = 0;
          v132 = *(unsigned int *)(a1 + 280);
          if ((_DWORD)v132)
          {
            v133 = 0;
            do
            {
              v121[v133] = xmmword_22F4658D0;
              v133 += 2;
            }
            while (2 * v132 != v133);
          }
        }
        sub_22E9DCF94((uint64_t)v121, v132, a3, v42, v163);
        v49 = *(_DWORD *)(a1 + 272);
        v44 = v163[0];
        v39 = v115;
        goto LABEL_80;
      }
    }
  }
  return result;
}

uint64_t sub_22E9C655C(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  int v4;

  v3 = *(_BYTE **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (*v3)
  {
    sub_22E8A9D90(v2, 19, "");
    sub_22E8A9D90(*(_QWORD *)(a1 + 8), 11, "");
    sub_22E8A9D90(*(_QWORD *)(a1 + 8), 20, "");
    sub_22E8A9C00(*(_QWORD *)(a1 + 8), (uint64_t)"statements");
    sub_22E8A9D90(*(_QWORD *)(a1 + 8), 20, "");
    v4 = 12;
  }
  else
  {
    sub_22E8A9D90(v2, 20, "");
    sub_22E8A9D90(*(_QWORD *)(a1 + 8), 19, "");
    sub_22E8A9C00(*(_QWORD *)(a1 + 8), (uint64_t)"statement");
    v4 = 17;
  }
  return sub_22E8A9D90(*(_QWORD *)(a1 + 8), v4, "");
}

void sub_22E9C6624(unint64_t *a1, uint64_t a2, uint64_t a3, char a4, char a5, unint64_t a6, unint64_t a7)
{
  BOOL v8;
  BOOL v9;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  llvm *v31;
  void *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t *v36;
  uint64_t *i;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char *v50;
  __int128 v51[3];
  void *v52;
  int v53;
  char v54;
  void *v55;
  void *v56;
  _QWORD v57[3];
  __int128 v58;
  __int128 v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  llvm *v66[2];
  unsigned int v67;
  __int128 v68;
  __int128 v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76[3];
  void *v77;
  int v78;
  char v79;
  void *v80;
  void *v81;
  _QWORD v82[3];
  uint64_t *v83;
  uint64_t *v84;
  _BYTE v85[24];
  char *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  __int128 v92[11];
  uint64_t v93;
  void *v94[2];
  int v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100[16];
  void *v101;
  int v102;
  char v103;
  _BYTE *v104;
  void *v105;
  uint64_t v106;
  int v107;
  _BYTE v108[72];

  if (*(_DWORD *)(a3 + 4))
    v8 = *(_DWORD *)a3 == 0;
  else
    v8 = 1;
  v9 = v8 && *(_QWORD *)(a3 + 8) == 0;
  if (v9 || !a1[26])
    return;
  LODWORD(v96) = 21;
  v103 = 0;
  v99 = 0;
  v98 = 0;
  v100[0] = 0;
  v104 = v108;
  v105 = v108;
  v106 = 8;
  v107 = 0;
  v97 = 0;
  *((_QWORD *)&v96 + 1) = a7;
  BYTE4(v96) = a5;
  v93 = *(_QWORD *)a3;
  sub_22F0AB560(v94, a3 + 8);
  sub_22F319D9C((uint64_t)v100, &v93);
  if (v95)
    free(v94[1]);
  if (*(_DWORD *)a3 && *(_DWORD *)(a3 + 4) && !*(_QWORD *)(a3 + 8))
  {
    v26 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1[26] + 40))(a1[26]);
    v27 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1[26] + 48))(a1[26]);
    sub_22E9B831C((uint64_t)&v86, (uint64_t)a1, v26, v27, &v96, 0, 0);
    if (a7 >= 0x10)
      v89 = *(_QWORD *)((a7 & 0xFFFFFFFFFFFFFFF0) + 8) | a7 & 7;
    v28 = *(_QWORD *)(a2 + 360);
    if (v28)
    {
      memset(v82, 0, sizeof(v82));
      sub_22E9B8FE8((uint64_t)&v83, (uint64_t)&v86, v28, a6, (uint64_t)v82);
      v66[0] = (llvm *)v82;
      sub_22E6C60B8((void ***)v66);
      sub_22EC67A18(a1, (uint64_t **)a2, 0, (uint64_t)&v83, 0, 0);
      v83 = (uint64_t *)off_24FAB7520;
      v66[0] = (llvm *)v85;
      sub_22E6C60B8((void ***)v66);
    }
    v29 = a1[26];
    sub_22F2A4F2C((uint64_t)v76, v92);
    sub_22E9B83FC((uint64_t)a1, v29, v76, 0, 0);
    if (v81 != v80)
      free(v81);
    if (v79)
    {
      if (v78)
        free(v77);
      v79 = 0;
    }
  }
  else
  {
    v15 = sub_22E958204((uint64_t)a1, a3, 1);
    v16 = *(_QWORD *)(a3 + 8);
    if (v16 && (sub_22F0AAC5C(*(_QWORD *)(a3 + 8)) & 4) == 0 && (!v15 || (sub_22E958490(a1, a3, v15) & 1) != 0))
      goto LABEL_76;
    v17 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1[26] + 40))(a1[26]);
    v18 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1[26] + 48))(a1[26]);
    sub_22E9B831C((uint64_t)&v86, (uint64_t)a1, v17, v18, &v96, 0, 0);
    if (a7 >= 0x10)
      v89 = *(_QWORD *)((a7 & 0xFFFFFFFFFFFFFFF0) + 8) | a7 & 7;
    v19 = operator new(0x28uLL);
    v19[2] = 0;
    v19[3] = 0;
    *((_DWORD *)v19 + 8) = 0;
    v20 = v90;
    *v19 = v90;
    v19[1] = &v90;
    v20[1] = v19;
    v90 = v19;
    ++v91;
    if (v86 != (char *)v87 && (sub_22F0AAC5C(v16) & 4) != 0)
    {
      *(_QWORD *)&v68 = 0;
      *((_QWORD *)&v68 + 1) = "template";
      v69 = xmmword_22F469F50;
      v70 = 0;
      v72 = 0;
      v73 = 0;
      v71 = 0;
      LOBYTE(v74) = v74 & 0xC0;
      v75 = 0uLL;
      *((_QWORD *)&v74 + 1) = 0;
      v21 = v87;
      if (v87 >= v88)
      {
        v25 = sub_22E9D8E48((uint64_t *)&v86, (uint64_t)&v68);
      }
      else
      {
        v22 = v68;
        v23 = v69;
        *(_DWORD *)(v87 + 32) = v70;
        *(_OWORD *)v21 = v22;
        *(_OWORD *)(v21 + 16) = v23;
        *(_QWORD *)(v21 + 48) = 0;
        *(_QWORD *)(v21 + 56) = 0;
        *(_QWORD *)(v21 + 40) = 0;
        sub_22E6C6020((_QWORD *)(v21 + 40), v71, v72, 0x6DB6DB6DB6DB6DB7 * ((v72 - v71) >> 3));
        v24 = v75;
        *(_OWORD *)(v21 + 64) = v74;
        *(_OWORD *)(v21 + 80) = v24;
        v25 = v21 + 96;
      }
      v87 = v25;
      v83 = &v71;
      sub_22E6C60B8((void ***)&v83);
    }
    if ((*(_BYTE *)(v16 + 8) & 4) != 0)
    {
      v30 = *(_QWORD *)(v16 + 16);
      if (v30)
      {
        if (*(_BYTE *)(v30 + 16) == 47)
        {
          sub_22E9C6D68((uint64_t)v66, v30, (uint64_t *)a2);
          sub_22E9C6FF0((unint64_t *)&v83, (uint64_t *)v66);
          v31 = v66[0];
          if (v67)
          {
            v33 = (unint64_t)v67 << 6;
            v34 = (char *)v66[0] + 32;
            do
            {
              if ((*((_QWORD *)v34 - 4) | 0x1000) != 0xFFFFFFFFFFFFF000 && v34[8])
              {
                v35 = (char *)*((_QWORD *)v34 - 2);
                if (v34 != v35)
                  free(v35);
                v34[8] = 0;
              }
              v34 += 64;
              v33 -= 64;
            }
            while (v33);
            v31 = v66[0];
            v32 = (void *)((unint64_t)v67 << 6);
          }
          else
          {
            v32 = 0;
          }
          llvm::deallocate_buffer(v31, v32);
          v36 = v83;
          for (i = v84; v36 != i; v36 += 7)
          {
            if (!*((_DWORD *)v36 + 10))
            {
              v38 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1[26] + 40))(a1[26]);
              v39 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1[26] + 48))(a1[26]);
              v40 = sub_22E9C7380((uint64_t)v36, (uint64_t)a1, v38, v39);
              *(_QWORD *)&v58 = 0;
              *((_QWORD *)&v58 + 1) = v40;
              v59 = xmmword_22F469F30;
              v60 = 0;
              v62 = 0;
              v63 = 0;
              v61 = 0;
              LOBYTE(v64) = v64 & 0xC0;
              v65 = 0uLL;
              *((_QWORD *)&v64 + 1) = 0;
              v41 = v87;
              if (v87 >= v88)
              {
                v45 = sub_22E9D8E48((uint64_t *)&v86, (uint64_t)&v58);
              }
              else
              {
                v42 = v58;
                v43 = v59;
                *(_DWORD *)(v87 + 32) = v60;
                *(_OWORD *)v41 = v42;
                *(_OWORD *)(v41 + 16) = v43;
                *(_QWORD *)(v41 + 40) = 0;
                *(_QWORD *)(v41 + 48) = 0;
                *(_QWORD *)(v41 + 56) = 0;
                sub_22E6C6020((_QWORD *)(v41 + 40), v61, v62, 0x6DB6DB6DB6DB6DB7 * ((v62 - v61) >> 3));
                v44 = v65;
                *(_OWORD *)(v41 + 64) = v64;
                *(_OWORD *)(v41 + 80) = v44;
                v45 = v41 + 96;
              }
              v87 = v45;
              v66[0] = (llvm *)&v61;
              sub_22E6C60B8((void ***)v66);
            }
          }
          sub_22E9C7768((void **)&v83);
        }
      }
    }
    if (v15 && (a4 & 1) == 0)
      sub_22E9B8974(a1, v15, (uint64_t *)&v86);
    v46 = (uint64_t)v90;
    v47 = *v90;
    *(_QWORD *)(v47 + 8) = v90[1];
    **(_QWORD **)(v46 + 8) = v47;
    --v91;
    sub_22E9D8FB0(v46);
    v48 = a1[26];
    if (v15)
    {
      if ((*(_BYTE *)(v48 + 8) & 8) != 0 || (v49 = *(_WORD *)(v15 + 8) & 0x7F, v49 != 16) && v49 != 83)
      {
        memset(v57, 0, sizeof(v57));
        sub_22E9B8FE8((uint64_t)&v83, (uint64_t)&v86, v15, a6, (uint64_t)v57);
        v66[0] = (llvm *)v57;
        sub_22E6C60B8((void ***)v66);
        sub_22F337E60((uint64_t)a1, v15, 0, (uint64_t)&v83, 1, 1, (*(_BYTE *)(a1[26] + 8) & 0x20) != 0);
        v83 = (uint64_t *)off_24FAB7520;
        v66[0] = (llvm *)v85;
        sub_22E6C60B8((void ***)v66);
        v48 = a1[26];
      }
    }
    sub_22F2A4F2C((uint64_t)v51, v92);
    if ((char *)v87 == v86)
      v50 = 0;
    else
      v50 = v86;
    sub_22E9B83FC((uint64_t)a1, v48, v51, (uint64_t)v50, -1431655765 * ((v87 - (unint64_t)v86) >> 5));
    if (v56 != v55)
      free(v56);
    if (v54)
    {
      if (v53)
        free(v52);
      v54 = 0;
    }
  }
  sub_22E9B8490(&v86);
LABEL_76:
  if (v105 != v104)
    free(v105);
  if (v103)
  {
    if (v102)
      free(v101);
  }
}

uint64_t sub_22E9C6D68(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void *v4;
  uint64_t *v5;
  uint64_t *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 **v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if (*(_QWORD *)(a2 + 8) == (a2 & 0xFFFFFFFFFFFFFFF0))
    v4 = 0;
  else
    v4 = *(void **)(a2 + 32);
  if (a3 && v4)
  {
    v5 = a3;
    v7 = 0;
    while (1)
    {
      if ((v5[1] & 0x80) != 0)
      {
        v8 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(v5 + 9), v4);
        v9 = v5[10];
        v10 = v9 == v5[9] ? 92 : 88;
        if (v8 != (void **)(v9 + 8 * *(unsigned int *)((char *)v5 + v10)))
          break;
      }
      v7 = v5;
      v5 = (uint64_t *)*v5;
      if (!v5)
        return a1;
    }
    if (v7)
    {
      v12 = v7[45];
      v24 = v26;
      v25 = 0x100000000;
      if (v12)
      {
        v13 = *(_WORD *)(v12 + 8) & 0x7F;
        v14 = -40;
        if (v13 > 0x46)
        {
          switch(v13)
          {
            case 'S':
              goto LABEL_31;
            case 'G':
              v14 = -56;
              goto LABEL_31;
            case 'Q':
LABEL_31:
              v15 = sub_22EFC7948(v12 + v14);
              if (v15)
              {
                v16 = v15;
                sub_22EFE9164(*(_QWORD *)(v15 + 56), (uint64_t)&v24);
                v17 = *(_QWORD *)(v16 + 48);
                if (v17)
                {
                  if ((*(_DWORD *)(v17 + 28) & 0x7Eu) - 52 <= 5)
                  {
                    v21 = *(_QWORD *)(v17 + 56);
                    if ((v21 & 4) != 0)
                    {
                      v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFF8) + 40);
                      if (v22)
                      {
                        v23 = v25;
                        if (v25 >= HIDWORD(v25))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                          v23 = v25;
                        }
                        *((_QWORD *)v24 + v23) = v22;
                        LODWORD(v25) = v25 + 1;
                      }
                    }
                  }
                }
              }
              if ((*(_WORD *)(v12 + 8) & 0x7F) == 0x25)
                sub_22EFE9164(*(_QWORD *)(v12 + 120), (uint64_t)&v24);
              v18 = (unsigned __int8 **)v24;
              if ((_DWORD)v25)
              {
                v19 = 8 * v25;
                do
                {
                  v20 = *v18++;
                  sub_22E9DD13C(a1, v20, a2);
                  v19 -= 8;
                }
                while (v19);
                v18 = (unsigned __int8 **)v24;
              }
              if (v18 != v26)
                free(v18);
              return a1;
          }
        }
        else
        {
          if (v13 <= 0x18)
          {
            if (v13 == 16)
            {
LABEL_19:
              v14 = -48;
              goto LABEL_31;
            }
            if (((1 << v13) & 0x1066) != 0)
              goto LABEL_31;
            if (v13 == 24)
              goto LABEL_19;
          }
          if (v13 == 70)
          {
LABEL_29:
            v14 = -64;
            goto LABEL_31;
          }
        }
        if (v13 - 52 >= 6)
        {
          if (v13 - 33 >= 5)
            goto LABEL_19;
          goto LABEL_29;
        }
        v14 = -72;
        goto LABEL_31;
      }
    }
  }
  return a1;
}

void sub_22E9C6FF0(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = *((unsigned int *)a2 + 4);
  v5 = *a2 + (v4 << 6);
  if (*((_DWORD *)a2 + 2))
  {
    if ((_DWORD)v4)
    {
      v6 = v4 << 6;
      v7 = *a2;
      while ((*(_QWORD *)v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 64;
        v6 -= 64;
        if (!v6)
          goto LABEL_6;
      }
    }
    else
    {
      v7 = *a2;
    }
  }
  else
  {
LABEL_6:
    v7 = *a2 + (v4 << 6);
  }
  v8 = v3 + ((unint64_t)v4 << 6);
  if (v7 != v8)
  {
    v9 = 0;
    v31 = v3 + ((unint64_t)v4 << 6);
    while (1)
    {
      v10 = a1[2];
      if ((unint64_t)v9 < v10)
      {
        *(_QWORD *)v9 = *(_QWORD *)(v7 + 8);
        v9[8] = 0;
        v9[32] = 0;
        if (*(_BYTE *)(v7 + 40))
          sub_22F319EE0((uint64_t)(v9 + 8), v7 + 16);
        *(_OWORD *)(v9 + 40) = *(_OWORD *)(v7 + 48);
        v9 += 56;
        goto LABEL_43;
      }
      v11 = (char *)*a1;
      v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v9[-*a1] >> 3);
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) > 0x492492492492492)
        abort();
      v14 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v10 - (_QWORD)v11) >> 3);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x249249249249249)
        v15 = 0x492492492492492;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 > 0x492492492492492)
          sub_22E3B3F8C();
        v16 = (char *)operator new(56 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = &v16[56 * v12];
      *(_QWORD *)v17 = *(_QWORD *)(v7 + 8);
      v17[8] = 0;
      v17[32] = 0;
      if (*(_BYTE *)(v7 + 40))
      {
        sub_22F319EE0((uint64_t)(v17 + 8), v7 + 16);
        v11 = (char *)*a1;
        v9 = (char *)a1[1];
      }
      v18 = &v16[56 * v15];
      *(_OWORD *)&v16[56 * v12 + 40] = *(_OWORD *)(v7 + 48);
      v19 = v17 + 56;
      if (v9 == v11)
      {
        *a1 = (unint64_t)v17;
        a1[1] = (unint64_t)v19;
        a1[2] = (unint64_t)v18;
        v8 = v31;
      }
      else
      {
        v20 = 0;
        do
        {
          v21 = &v9[v20];
          v22 = *(_QWORD *)&v9[v20 - 56];
          v17[v20 - 48] = 0;
          v23 = (uint64_t)&v17[v20 - 48];
          *(_QWORD *)(v23 - 8) = v22;
          *(_BYTE *)(v23 + 24) = 0;
          if (v9[v20 - 24])
            sub_22F319DE0(v23, (uint64_t)(v21 - 48));
          *(_OWORD *)&v17[v20 - 16] = *((_OWORD *)v21 - 1);
          v20 -= 56;
        }
        while (&v9[v20] != v11);
        v11 = (char *)*a1;
        v24 = (char *)a1[1];
        v25 = &v17[v20];
        v19 = v17 + 56;
        *a1 = (unint64_t)v25;
        a1[1] = (unint64_t)(v17 + 56);
        a1[2] = (unint64_t)v18;
        if (v24 == v11)
        {
          v8 = v31;
          if (!v11)
            goto LABEL_42;
LABEL_41:
          operator delete(v11);
          goto LABEL_42;
        }
        v8 = v31;
        do
        {
          if (*(v24 - 24))
          {
            v26 = (char *)*((_QWORD *)v24 - 6);
            if (v24 - 32 != v26)
              free(v26);
            *(v24 - 24) = 0;
          }
          v24 -= 56;
        }
        while (v24 != v11);
      }
      if (v11)
        goto LABEL_41;
LABEL_42:
      v9 = v19;
LABEL_43:
      a1[1] = (unint64_t)v9;
      v27 = v7 + 64;
      v7 = v5;
      if (v27 != v5)
      {
        v7 = v27;
        while ((*(_QWORD *)v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v7 += 64;
          if (v7 == v5)
          {
            v7 = v5;
            break;
          }
        }
      }
      if (v7 == v8)
      {
        v28 = *a1;
        goto LABEL_53;
      }
    }
  }
  v9 = 0;
  v28 = 0;
LABEL_53:
  v29 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v9[-v28] >> 3));
  if (v9 == (char *)v28)
    v30 = 0;
  else
    v30 = v29;
  sub_22E9F03E4(v28, (uint64_t *)v9, v30, 1);
}

uint64_t sub_22E9C7380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  int *v18;
  unsigned int v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35[2];
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  int v44;
  void **p_p;
  void *__p;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[2];
  __int128 v50;
  __int128 v51;
  void *v52;
  uint64_t v53;
  _BYTE v54[64];
  void *v55;
  uint64_t v56;
  _QWORD v57[4];

  v57[2] = *MEMORY[0x24BDAC8D0];
  v49[0] = a3;
  v49[1] = a4;
  v50 = 0u;
  v51 = 0u;
  v52 = v54;
  v53 = 0x400000000;
  v55 = v57;
  v56 = 0x200000000;
  if (*(_QWORD *)(a1 + 48))
  {
    __p = 0;
    v47 = 0;
    v48 = 0;
    LODWORD(v38) = 0;
    v42 = 0;
    v43 = 0;
    v44 = 1;
    v40 = 0;
    v41 = 0;
    v39 = 0;
    v37 = (uint64_t *)(MEMORY[0x24BED83D8] + 16);
    p_p = &__p;
    llvm::raw_ostream::SetBufferAndMode();
    v7 = *(uint64_t **)(a1 + 48);
    v8 = *(_QWORD *)(v7[7] + 40);
    if ((v8 & 7) != 0)
      goto LABEL_13;
    v9 = *(_DWORD **)((v8 & 0xFFFFFFFFFFFFFFF8) + 16);
    if (*v9 != 7)
      goto LABEL_13;
    v10 = v9[4];
    v11 = *(_DWORD *)((char *)v9 + 19);
    v12 = v10 == 1701667187 && v11 == 1935761253;
    if (v12
      && (v13 = v7[8]) != 0
      && *(_DWORD *)(v13 + 8) == 1
      && *(_DWORD *)(v13 + 16) == 1
      && (v36 = *(_QWORD *)(v13 + 24), v36 >= 0x10))
    {
      v30 = *(_QWORD *)(a2 + 88);
      v35[0] = ((*(_QWORD *)(*(_QWORD *)(v30 + 2000) + 100) >> 12) & 0x2000000 | sub_22E8FCD8C(v30, *(_QWORD *)(a2 + 80)) & 0xFFFFDFFFFDF9CFFFLL) ^ 0x200002043000;
      v35[1] = v31;
      v34 = 257;
      sub_22F119558((uint64_t *)&v36, &v37, (uint64_t)v35, (const void ***)&v32, 0);
    }
    else
    {
LABEL_13:
      v14 = *(_QWORD *)(a2 + 88);
      v15 = sub_22E8FCD8C(v14, *(_QWORD *)(a2 + 80));
      sub_22F3B9C24(v7, (llvm::raw_ostream *)&v37, ((*(_QWORD *)(*(_QWORD *)(v14 + 2000) + 100) >> 12) & 0x2000000 | v15 & 0xFFFFDFFFFDF9CFFFLL) ^ 0x200002043000, v16);
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v37);
    LOWORD(v41) = 260;
    v37 = (uint64_t *)&__p;
    v17 = sub_22F2F27DC(a3, (const char **)&v37);
    sub_22E8A9CC8((uint64_t)v49, (uint64_t)v17);
    if (SHIBYTE(v48) < 0)
      operator delete(__p);
  }
  v18 = *(int **)(*(_QWORD *)a1 + 16);
  v19 = *v18;
  LOWORD(v41) = 261;
  v37 = (uint64_t *)(v18 + 4);
  v38 = v19;
  v20 = sub_22F2F27DC(a3, (const char **)&v37);
  sub_22E8A9AD8((uint64_t)v49, (uint64_t)v20);
  if (*(_BYTE *)(a1 + 32))
  {
    sub_22E8A9D90((uint64_t)v49, 7, "");
    v21 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v21)
    {
      v22 = *(uint64_t **)(a1 + 8);
      v23 = 8 * v21;
      v24 = 1;
      do
      {
        v35[0] = *v22;
        if ((v24 & 1) == 0)
        {
          sub_22E8A9D90((uint64_t)v49, 15, "");
          sub_22E8A9D90((uint64_t)v49, 19, "");
        }
        v25 = *(_QWORD *)(a2 + 88);
        __p = (void *)(((*(_QWORD *)(*(_QWORD *)(v25 + 2000) + 100) >> 12) & 0x2000000 | sub_22E8FCD8C(v25, *(_QWORD *)(a2 + 80)) & 0xFFFFDFFFFDF9CFFFLL) ^ 0x200002043000);
        v47 = v26;
        v33 = 0;
        v32 = 0uLL;
        sub_22F119374(v35, &v32, (uint64_t)&__p);
        LOWORD(v41) = 260;
        v37 = (uint64_t *)&v32;
        v27 = sub_22F2F27DC(a3, (const char **)&v37);
        sub_22E8A9C00((uint64_t)v49, (uint64_t)v27);
        if (SHIBYTE(v33) < 0)
          operator delete((void *)v32);
        v24 = 0;
        ++v22;
        v23 -= 8;
      }
      while (v23);
    }
    sub_22E8A9D90((uint64_t)v49, 8, "");
  }
  v28 = sub_22F2F28A4((uint64_t)v49);
  if (v55 != v57)
    free(v55);
  if (v52 != v54)
    free(v52);
  return v28;
}

void **sub_22E9C7768(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*(v3 - 24))
        {
          v5 = (char *)*((_QWORD *)v3 - 6);
          if (v3 - 32 != v5)
            free(v5);
          *(v3 - 24) = 0;
        }
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

BOOL sub_22E9C77E0(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (v2 <= 0x2F && ((1 << v2) & 0xC00000060000) != 0)
    v2 = *(_DWORD *)(sub_22EFBAEA4(a2) + 28) & 0x7F;
  return v2 == 16;
}

char **sub_22E9C782C(_QWORD *a1, _QWORD *a2)
{
  char **result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  BOOL v13;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  __int128 v34[3];
  void *v35;
  int v36;
  char v37;
  void *v38;
  void *v39;
  _QWORD v40[3];
  _QWORD v41[2];
  int v42;
  int v43;
  int v44;
  int v45;
  _BYTE v46[24];
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  _OWORD v52[2];
  char v53;
  void *v54;
  int v55;
  char v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  int v60;
  _BYTE v61[64];
  char *v62;
  char *v63;
  _QWORD v64[2];
  uint64_t v65;
  __int128 v66[11];
  void **v67;

  result = (char **)a1[26];
  if (!result)
    return result;
  if (*a2)
  {
    v6 = a2[45];
    if (!v6)
      goto LABEL_6;
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1[11] + 1960) + 80);
    v5 = sub_22E3CD31C((uint64_t *)(v4 + 72), v4);
    result = (char **)a1[26];
    if (!v5)
    {
      v6 = 0;
LABEL_6:
      v7 = 0;
      v8 = 1;
      goto LABEL_11;
    }
    v6 = v5 + 40;
  }
  v8 = 0;
  v7 = ((_BYTE)result[1] & 4) == 0 && (*(_WORD *)(v6 + 8) & 0x7F) == 83;
LABEL_11:
  v9 = (*((uint64_t (**)(char **))*result + 5))(result);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[26] + 48))(a1[26]);
  if (v7)
    v11 = 17;
  else
    v11 = 0;
  LODWORD(v51) = v11;
  BYTE4(v51) = 0;
  v56 = 0;
  memset(v52, 0, sizeof(v52));
  v53 = 0;
  v57 = v61;
  v58 = v61;
  v59 = 8;
  v60 = 0;
  sub_22E9B831C((uint64_t)&v62, (uint64_t)a1, v9, v10, (__int128 *)&v51, (uint64_t)sub_22E9C7C60, 0);
  if (v58 != v57)
    free(v58);
  if (v56 && v55)
    free(v54);
  if ((v8 & 1) == 0)
  {
    v12 = *(_WORD *)(v6 + 8) & 0x7F;
    v13 = v12 == 83 || v12 == 16;
    if (v13 && !v7)
    {
      v52[0] = 0uLL;
      v51 = v52;
      if ((*(_BYTE *)(v6 + 8) & 0x80) != 0)
        sub_22EFCC320(v6);
      v15 = *(_QWORD *)(v6 + 16);
      if (v15)
      {
        while ((*(_DWORD *)(v15 + 28) & 0x7F) != 0x10)
        {
          v15 = *(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!v15)
            goto LABEL_32;
        }
LABEL_51:
        v27 = v15;
        if ((*(_BYTE *)(v15 + 80) & 3) == 0)
          v27 = *(_QWORD *)(v15 + 104) & 0xFFFFFFFFFFFFFFF8;
        v28 = *(uint64_t **)&v52[0];
        v29 = (uint64_t **)v52;
        v30 = (uint64_t **)v52;
        if (*(_QWORD *)&v52[0])
        {
          while (1)
          {
            while (1)
            {
              v30 = (uint64_t **)v28;
              v31 = v28[4];
              if (v31 <= v27)
                break;
              v28 = *v30;
              v29 = v30;
              if (!*v30)
                goto LABEL_60;
            }
            if (v31 >= v27)
              break;
            v28 = v30[1];
            if (!v28)
            {
              v29 = v30 + 1;
              goto LABEL_60;
            }
          }
        }
        else
        {
LABEL_60:
          v32 = (uint64_t *)v30;
          v30 = (uint64_t **)operator new(0x30uLL);
          v30[4] = (uint64_t *)v27;
          v30[5] = 0;
          *v30 = 0;
          v30[1] = 0;
          v30[2] = v32;
          *v29 = (uint64_t *)v30;
          v33 = (uint64_t *)v30;
          if (*(_QWORD *)v51)
          {
            v51 = *(_OWORD **)v51;
            v33 = *v29;
          }
          sub_22E49FD00(*(uint64_t **)&v52[0], v33);
          ++*((_QWORD *)&v52[0] + 1);
        }
        v30[5] = (uint64_t *)v15;
        while (1)
        {
          v15 = *(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!v15)
            break;
          if ((*(_DWORD *)(v15 + 28) & 0x7F) == 0x10)
            goto LABEL_51;
        }
      }
LABEL_32:
      v16 = v64;
      v17 = operator new(0x28uLL);
      v17[2] = 0;
      v17[3] = 0;
      *((_DWORD *)v17 + 8) = 0;
      v18 = v64[0];
      *v17 = v64[0];
      v17[1] = v64;
      *(_QWORD *)(v18 + 8) = v17;
      v19 = v65;
      v64[0] = v17;
      ++v65;
      v20 = v51;
      if (v51 != v52)
      {
        do
        {
          v21 = v20[5];
          v22 = sub_22E9C5678(v21);
          v41[0] = v21;
          v42 = v22;
          v43 = 0;
          v44 = 0;
          v45 = 0;
          memset(v46, 0, sizeof(v46));
          memset(v40, 0, sizeof(v40));
          v47 &= 0xC0u;
          v49 = 0;
          v50 = 0;
          v48 = 0;
          sub_22E8AB5B4((uint64_t)v41, 1);
          sub_22E9C57E4((unint64_t)&v62, v41, a1[27], 0, 0);
          v67 = (void **)v46;
          sub_22E6C60B8(&v67);
          v67 = (void **)v40;
          sub_22E6C60B8(&v67);
          v23 = (_QWORD *)v20[1];
          if (v23)
          {
            do
            {
              v24 = v23;
              v23 = (_QWORD *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              v24 = (_OWORD *)v20[2];
              v13 = *(_QWORD *)v24 == (_QWORD)v20;
              v20 = v24;
            }
            while (!v13);
          }
          v20 = v24;
        }
        while (v24 != v52);
        v17 = (_QWORD *)v64[0];
        v18 = *(_QWORD *)v64[0];
        v16 = *(_QWORD **)(v64[0] + 8);
        v19 = v65 - 1;
      }
      *(_QWORD *)(v18 + 8) = v16;
      *(_QWORD *)v17[1] = v18;
      v65 = v19;
      sub_22E9D8FB0((uint64_t)v17);
      sub_22F258024(*(_QWORD **)&v52[0]);
    }
  }
  v25 = a1[26];
  sub_22F2A4F2C((uint64_t)v34, v66);
  if (v63 == v62)
    v26 = 0;
  else
    v26 = v62;
  sub_22E9B83FC((uint64_t)a1, v25, v34, (uint64_t)v26, -1431655765 * ((unint64_t)(v63 - v62) >> 5));
  if (v39 != v38)
    free(v39);
  if (v37)
  {
    if (v36)
      free(v35);
    v37 = 0;
  }
  return sub_22E9B8490(&v62);
}

BOOL sub_22E9C7C60(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 28) & 0x7F) == 16;
}

BOOL sub_22E9C7C74(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (v2 <= 0x2F && ((1 << v2) & 0xC00000060000) != 0)
    v2 = *(_DWORD *)(sub_22EFBAEA4(a2) + 28) & 0x7F;
  return v2 == 22 || v2 - 33 < 0xA;
}

void sub_22E9C7CC8(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  unint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  unint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  unint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  void **v95;
  unint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  char *v100;
  __int128 v101;
  uint64_t v102;
  __int128 *v103;
  unint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  unint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  unint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  unint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  unint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  unint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  unint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  unint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  unint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  unint64_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  unint64_t v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  unint64_t v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  unint64_t v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  int v173;
  _QWORD v174[3];
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  int v179;
  _QWORD v180[3];
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  int v185;
  _QWORD v186[3];
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  int v191;
  _QWORD v192[3];
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  int v197;
  _QWORD v198[3];
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  int v203;
  _QWORD v204[3];
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  int v209;
  _QWORD v210[3];
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  __int128 v214;
  __int128 v215;
  int v216;
  _QWORD v217[3];
  __int128 v218;
  uint64_t v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  _BYTE v270[20];
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  int v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  int v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  int v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  int v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  int v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  int v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  int v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  int v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  int v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  int v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  int v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  int v414;
  _QWORD v415[3];
  __int128 v416;
  __int128 v417;
  void **v418;
  _OWORD v419[3];
  _BYTE *v420;
  uint64_t v421;
  _BYTE v422[64];
  _QWORD *v423;
  uint64_t v424;
  _QWORD v425[4];

  v425[3] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v412 = 0;
  *((_QWORD *)&v412 + 1) = "short";
  v413 = xmmword_22F469F90;
  v414 = 0;
  memset(v415, 0, sizeof(v415));
  LOBYTE(v416) = 0;
  *((_QWORD *)&v416 + 1) = 0;
  v417 = 0uLL;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= *(_QWORD *)(a2 + 16))
  {
    v8 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v412);
  }
  else
  {
    v5 = v412;
    v6 = v413;
    *(_DWORD *)(v4 + 32) = v414;
    *(_OWORD *)v4 = v5;
    *(_OWORD *)(v4 + 16) = v6;
    *(_QWORD *)(v4 + 48) = 0;
    *(_QWORD *)(v4 + 56) = 0;
    *(_QWORD *)(v4 + 40) = 0;
    v7 = v417;
    *(_OWORD *)(v4 + 64) = v416;
    *(_OWORD *)(v4 + 80) = v7;
    v8 = v4 + 96;
  }
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)&v419[0] = v415;
  sub_22E6C60B8((void ***)v419);
  *(_QWORD *)&v404 = 0;
  *((_QWORD *)&v404 + 1) = "long";
  v405 = xmmword_22F469F90;
  v406 = 0;
  v409 = 0;
  v407 = 0;
  v408 = 0;
  LOBYTE(v410) = v410 & 0xC0;
  *((_QWORD *)&v410 + 1) = 0;
  v411 = 0uLL;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9 >= *(_QWORD *)(a2 + 16))
  {
    v13 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v404);
  }
  else
  {
    v10 = v404;
    v11 = v405;
    *(_DWORD *)(v9 + 32) = v406;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    *(_QWORD *)(v9 + 48) = 0;
    *(_QWORD *)(v9 + 56) = 0;
    *(_QWORD *)(v9 + 40) = 0;
    sub_22E6C6020((_QWORD *)(v9 + 40), v407, v408, 0x6DB6DB6DB6DB6DB7 * ((v408 - v407) >> 3));
    v12 = v411;
    *(_OWORD *)(v9 + 64) = v410;
    *(_OWORD *)(v9 + 80) = v12;
    v13 = v9 + 96;
  }
  *(_QWORD *)(a2 + 8) = v13;
  *(_QWORD *)&v419[0] = &v407;
  sub_22E6C60B8((void ***)v419);
  *(_QWORD *)&v396 = 0;
  *((_QWORD *)&v396 + 1) = "signed";
  v397 = xmmword_22F469F90;
  v398 = 0;
  v401 = 0;
  v399 = 0;
  v400 = 0;
  LOBYTE(v402) = v402 & 0xC0;
  *((_QWORD *)&v402 + 1) = 0;
  v403 = 0uLL;
  v14 = *(_QWORD *)(a2 + 8);
  if (v14 >= *(_QWORD *)(a2 + 16))
  {
    v18 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v396);
  }
  else
  {
    v15 = v396;
    v16 = v397;
    *(_DWORD *)(v14 + 32) = v398;
    *(_OWORD *)v14 = v15;
    *(_OWORD *)(v14 + 16) = v16;
    *(_QWORD *)(v14 + 48) = 0;
    *(_QWORD *)(v14 + 56) = 0;
    *(_QWORD *)(v14 + 40) = 0;
    sub_22E6C6020((_QWORD *)(v14 + 40), v399, v400, 0x6DB6DB6DB6DB6DB7 * ((v400 - v399) >> 3));
    v17 = v403;
    *(_OWORD *)(v14 + 64) = v402;
    *(_OWORD *)(v14 + 80) = v17;
    v18 = v14 + 96;
  }
  *(_QWORD *)(a2 + 8) = v18;
  *(_QWORD *)&v419[0] = &v399;
  sub_22E6C60B8((void ***)v419);
  *(_QWORD *)&v388 = 0;
  *((_QWORD *)&v388 + 1) = "unsigned";
  v389 = xmmword_22F469F90;
  v390 = 0;
  v393 = 0;
  v391 = 0;
  v392 = 0;
  LOBYTE(v394) = v394 & 0xC0;
  *((_QWORD *)&v394 + 1) = 0;
  v395 = 0uLL;
  v19 = *(_QWORD *)(a2 + 8);
  if (v19 >= *(_QWORD *)(a2 + 16))
  {
    v23 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v388);
  }
  else
  {
    v20 = v388;
    v21 = v389;
    *(_DWORD *)(v19 + 32) = v390;
    *(_OWORD *)v19 = v20;
    *(_OWORD *)(v19 + 16) = v21;
    *(_QWORD *)(v19 + 48) = 0;
    *(_QWORD *)(v19 + 56) = 0;
    *(_QWORD *)(v19 + 40) = 0;
    sub_22E6C6020((_QWORD *)(v19 + 40), v391, v392, 0x6DB6DB6DB6DB6DB7 * ((v392 - v391) >> 3));
    v22 = v395;
    *(_OWORD *)(v19 + 64) = v394;
    *(_OWORD *)(v19 + 80) = v22;
    v23 = v19 + 96;
  }
  *(_QWORD *)(a2 + 8) = v23;
  *(_QWORD *)&v419[0] = &v391;
  sub_22E6C60B8((void ***)v419);
  *(_QWORD *)&v380 = 0;
  *((_QWORD *)&v380 + 1) = "void";
  v381 = xmmword_22F469F90;
  v382 = 0;
  v385 = 0;
  v383 = 0;
  v384 = 0;
  LOBYTE(v386) = v386 & 0xC0;
  *((_QWORD *)&v386 + 1) = 0;
  v387 = 0uLL;
  v24 = *(_QWORD *)(a2 + 8);
  if (v24 >= *(_QWORD *)(a2 + 16))
  {
    v28 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v380);
  }
  else
  {
    v25 = v380;
    v26 = v381;
    *(_DWORD *)(v24 + 32) = v382;
    *(_OWORD *)v24 = v25;
    *(_OWORD *)(v24 + 16) = v26;
    *(_QWORD *)(v24 + 48) = 0;
    *(_QWORD *)(v24 + 56) = 0;
    *(_QWORD *)(v24 + 40) = 0;
    sub_22E6C6020((_QWORD *)(v24 + 40), v383, v384, 0x6DB6DB6DB6DB6DB7 * ((v384 - v383) >> 3));
    v27 = v387;
    *(_OWORD *)(v24 + 64) = v386;
    *(_OWORD *)(v24 + 80) = v27;
    v28 = v24 + 96;
  }
  *(_QWORD *)(a2 + 8) = v28;
  *(_QWORD *)&v419[0] = &v383;
  sub_22E6C60B8((void ***)v419);
  *(_QWORD *)&v372 = 0;
  *((_QWORD *)&v372 + 1) = "char";
  v373 = xmmword_22F469F90;
  v374 = 0;
  v377 = 0;
  v375 = 0;
  v376 = 0;
  LOBYTE(v378) = v378 & 0xC0;
  *((_QWORD *)&v378 + 1) = 0;
  v379 = 0uLL;
  v29 = *(_QWORD *)(a2 + 8);
  if (v29 >= *(_QWORD *)(a2 + 16))
  {
    v33 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v372);
  }
  else
  {
    v30 = v372;
    v31 = v373;
    *(_DWORD *)(v29 + 32) = v374;
    *(_OWORD *)v29 = v30;
    *(_OWORD *)(v29 + 16) = v31;
    *(_QWORD *)(v29 + 48) = 0;
    *(_QWORD *)(v29 + 56) = 0;
    *(_QWORD *)(v29 + 40) = 0;
    sub_22E6C6020((_QWORD *)(v29 + 40), v375, v376, 0x6DB6DB6DB6DB6DB7 * ((v376 - v375) >> 3));
    v32 = v379;
    *(_OWORD *)(v29 + 64) = v378;
    *(_OWORD *)(v29 + 80) = v32;
    v33 = v29 + 96;
  }
  *(_QWORD *)(a2 + 8) = v33;
  *(_QWORD *)&v419[0] = &v375;
  sub_22E6C60B8((void ***)v419);
  *(_QWORD *)&v364 = 0;
  *((_QWORD *)&v364 + 1) = "int";
  v365 = xmmword_22F469F90;
  v366 = 0;
  v369 = 0;
  v367 = 0;
  v368 = 0;
  LOBYTE(v370) = v370 & 0xC0;
  *((_QWORD *)&v370 + 1) = 0;
  v371 = 0uLL;
  v34 = *(_QWORD *)(a2 + 8);
  if (v34 >= *(_QWORD *)(a2 + 16))
  {
    v38 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v364);
  }
  else
  {
    v35 = v364;
    v36 = v365;
    *(_DWORD *)(v34 + 32) = v366;
    *(_OWORD *)v34 = v35;
    *(_OWORD *)(v34 + 16) = v36;
    *(_QWORD *)(v34 + 48) = 0;
    *(_QWORD *)(v34 + 56) = 0;
    *(_QWORD *)(v34 + 40) = 0;
    sub_22E6C6020((_QWORD *)(v34 + 40), v367, v368, 0x6DB6DB6DB6DB6DB7 * ((v368 - v367) >> 3));
    v37 = v371;
    *(_OWORD *)(v34 + 64) = v370;
    *(_OWORD *)(v34 + 80) = v37;
    v38 = v34 + 96;
  }
  *(_QWORD *)(a2 + 8) = v38;
  *(_QWORD *)&v419[0] = &v367;
  sub_22E6C60B8((void ***)v419);
  *(_QWORD *)&v356 = 0;
  *((_QWORD *)&v356 + 1) = "float";
  v357 = xmmword_22F469F90;
  v358 = 0;
  v361 = 0;
  v359 = 0;
  v360 = 0;
  LOBYTE(v362) = v362 & 0xC0;
  *((_QWORD *)&v362 + 1) = 0;
  v363 = 0uLL;
  v39 = *(_QWORD *)(a2 + 8);
  if (v39 >= *(_QWORD *)(a2 + 16))
  {
    v43 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v356);
  }
  else
  {
    v40 = v356;
    v41 = v357;
    *(_DWORD *)(v39 + 32) = v358;
    *(_OWORD *)v39 = v40;
    *(_OWORD *)(v39 + 16) = v41;
    *(_QWORD *)(v39 + 48) = 0;
    *(_QWORD *)(v39 + 56) = 0;
    *(_QWORD *)(v39 + 40) = 0;
    sub_22E6C6020((_QWORD *)(v39 + 40), v359, v360, 0x6DB6DB6DB6DB6DB7 * ((v360 - v359) >> 3));
    v42 = v363;
    *(_OWORD *)(v39 + 64) = v362;
    *(_OWORD *)(v39 + 80) = v42;
    v43 = v39 + 96;
  }
  *(_QWORD *)(a2 + 8) = v43;
  *(_QWORD *)&v419[0] = &v359;
  sub_22E6C60B8((void ***)v419);
  if ((a1[13] & 0x20) == 0 || (*((_BYTE *)a1 + 127) & 8) != 0)
  {
    *(_QWORD *)&v348 = 0;
    *((_QWORD *)&v348 + 1) = "double";
    v349 = xmmword_22F469F90;
    v350 = 0;
    v353 = 0;
    v351 = 0;
    v352 = 0;
    LOBYTE(v354) = v354 & 0xC0;
    *((_QWORD *)&v354 + 1) = 0;
    v355 = 0uLL;
    v44 = *(_QWORD *)(a2 + 8);
    if (v44 >= *(_QWORD *)(a2 + 16))
    {
      v48 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v348);
    }
    else
    {
      v45 = v348;
      v46 = v349;
      *(_DWORD *)(v44 + 32) = v350;
      *(_OWORD *)v44 = v45;
      *(_OWORD *)(v44 + 16) = v46;
      *(_QWORD *)(v44 + 48) = 0;
      *(_QWORD *)(v44 + 56) = 0;
      *(_QWORD *)(v44 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v44 + 40), v351, v352, 0x6DB6DB6DB6DB6DB7 * ((v352 - v351) >> 3));
      v47 = v355;
      *(_OWORD *)(v44 + 64) = v354;
      *(_OWORD *)(v44 + 80) = v47;
      v48 = v44 + 96;
    }
    *(_QWORD *)(a2 + 8) = v48;
    *(_QWORD *)&v419[0] = &v351;
    sub_22E6C60B8((void ***)v419);
  }
  *(_QWORD *)&v340 = 0;
  *((_QWORD *)&v340 + 1) = "enum";
  v341 = xmmword_22F469F90;
  v342 = 0;
  v345 = 0;
  v343 = 0;
  v344 = 0;
  LOBYTE(v346) = v346 & 0xC0;
  *((_QWORD *)&v346 + 1) = 0;
  v347 = 0uLL;
  v49 = *(_QWORD *)(a2 + 8);
  if (v49 >= *(_QWORD *)(a2 + 16))
  {
    v53 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v340);
  }
  else
  {
    v50 = v340;
    v51 = v341;
    *(_DWORD *)(v49 + 32) = v342;
    *(_OWORD *)v49 = v50;
    *(_OWORD *)(v49 + 16) = v51;
    *(_QWORD *)(v49 + 48) = 0;
    *(_QWORD *)(v49 + 56) = 0;
    *(_QWORD *)(v49 + 40) = 0;
    sub_22E6C6020((_QWORD *)(v49 + 40), v343, v344, 0x6DB6DB6DB6DB6DB7 * ((v344 - v343) >> 3));
    v52 = v347;
    *(_OWORD *)(v49 + 64) = v346;
    *(_OWORD *)(v49 + 80) = v52;
    v53 = v49 + 96;
  }
  *(_QWORD *)(a2 + 8) = v53;
  *(_QWORD *)&v419[0] = &v343;
  sub_22E6C60B8((void ***)v419);
  *(_QWORD *)&v332 = 0;
  *((_QWORD *)&v332 + 1) = "struct";
  v333 = xmmword_22F469F90;
  v334 = 0;
  v337 = 0;
  v335 = 0;
  v336 = 0;
  LOBYTE(v338) = v338 & 0xC0;
  *((_QWORD *)&v338 + 1) = 0;
  v339 = 0uLL;
  v54 = *(_QWORD *)(a2 + 8);
  if (v54 >= *(_QWORD *)(a2 + 16))
  {
    v58 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v332);
  }
  else
  {
    v55 = v332;
    v56 = v333;
    *(_DWORD *)(v54 + 32) = v334;
    *(_OWORD *)v54 = v55;
    *(_OWORD *)(v54 + 16) = v56;
    *(_QWORD *)(v54 + 48) = 0;
    *(_QWORD *)(v54 + 56) = 0;
    *(_QWORD *)(v54 + 40) = 0;
    sub_22E6C6020((_QWORD *)(v54 + 40), v335, v336, 0x6DB6DB6DB6DB6DB7 * ((v336 - v335) >> 3));
    v57 = v339;
    *(_OWORD *)(v54 + 64) = v338;
    *(_OWORD *)(v54 + 80) = v57;
    v58 = v54 + 96;
  }
  *(_QWORD *)(a2 + 8) = v58;
  *(_QWORD *)&v419[0] = &v335;
  sub_22E6C60B8((void ***)v419);
  *(_QWORD *)&v324 = 0;
  *((_QWORD *)&v324 + 1) = "union";
  v325 = xmmword_22F469F90;
  v326 = 0;
  v329 = 0;
  v327 = 0;
  v328 = 0;
  LOBYTE(v330) = v330 & 0xC0;
  *((_QWORD *)&v330 + 1) = 0;
  v331 = 0uLL;
  v59 = *(_QWORD *)(a2 + 8);
  if (v59 >= *(_QWORD *)(a2 + 16))
  {
    v63 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v324);
  }
  else
  {
    v60 = v324;
    v61 = v325;
    *(_DWORD *)(v59 + 32) = v326;
    *(_OWORD *)v59 = v60;
    *(_OWORD *)(v59 + 16) = v61;
    *(_QWORD *)(v59 + 48) = 0;
    *(_QWORD *)(v59 + 56) = 0;
    *(_QWORD *)(v59 + 40) = 0;
    sub_22E6C6020((_QWORD *)(v59 + 40), v327, v328, 0x6DB6DB6DB6DB6DB7 * ((v328 - v327) >> 3));
    v62 = v331;
    *(_OWORD *)(v59 + 64) = v330;
    *(_OWORD *)(v59 + 80) = v62;
    v63 = v59 + 96;
  }
  *(_QWORD *)(a2 + 8) = v63;
  *(_QWORD *)&v419[0] = &v327;
  sub_22E6C60B8((void ***)v419);
  *(_QWORD *)&v316 = 0;
  *((_QWORD *)&v316 + 1) = "const";
  v317 = xmmword_22F469F90;
  v318 = 0;
  v321 = 0;
  v319 = 0;
  v320 = 0;
  LOBYTE(v322) = v322 & 0xC0;
  *((_QWORD *)&v322 + 1) = 0;
  v323 = 0uLL;
  v64 = *(_QWORD *)(a2 + 8);
  if (v64 >= *(_QWORD *)(a2 + 16))
  {
    v68 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v316);
  }
  else
  {
    v65 = v316;
    v66 = v317;
    *(_DWORD *)(v64 + 32) = v318;
    *(_OWORD *)v64 = v65;
    *(_OWORD *)(v64 + 16) = v66;
    *(_QWORD *)(v64 + 48) = 0;
    *(_QWORD *)(v64 + 56) = 0;
    *(_QWORD *)(v64 + 40) = 0;
    sub_22E6C6020((_QWORD *)(v64 + 40), v319, v320, 0x6DB6DB6DB6DB6DB7 * ((v320 - v319) >> 3));
    v67 = v323;
    *(_OWORD *)(v64 + 64) = v322;
    *(_OWORD *)(v64 + 80) = v67;
    v68 = v64 + 96;
  }
  *(_QWORD *)(a2 + 8) = v68;
  *(_QWORD *)&v419[0] = &v319;
  sub_22E6C60B8((void ***)v419);
  *(_QWORD *)&v308 = 0;
  *((_QWORD *)&v308 + 1) = "volatile";
  v309 = xmmword_22F469F90;
  v310 = 0;
  v313 = 0;
  v311 = 0;
  v312 = 0;
  LOBYTE(v314) = v314 & 0xC0;
  *((_QWORD *)&v314 + 1) = 0;
  v315 = 0uLL;
  v69 = *(_QWORD *)(a2 + 8);
  if (v69 >= *(_QWORD *)(a2 + 16))
  {
    v73 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v308);
  }
  else
  {
    v70 = v308;
    v71 = v309;
    *(_DWORD *)(v69 + 32) = v310;
    *(_OWORD *)v69 = v70;
    *(_OWORD *)(v69 + 16) = v71;
    *(_QWORD *)(v69 + 48) = 0;
    *(_QWORD *)(v69 + 56) = 0;
    *(_QWORD *)(v69 + 40) = 0;
    sub_22E6C6020((_QWORD *)(v69 + 40), v311, v312, 0x6DB6DB6DB6DB6DB7 * ((v312 - v311) >> 3));
    v72 = v315;
    *(_OWORD *)(v69 + 64) = v314;
    *(_OWORD *)(v69 + 80) = v72;
    v73 = v69 + 96;
  }
  *(_QWORD *)(a2 + 8) = v73;
  *(_QWORD *)&v419[0] = &v311;
  sub_22E6C60B8((void ***)v419);
  v74 = *a1;
  if ((*a1 & 1) != 0)
  {
    *(_QWORD *)&v300 = 0;
    *((_QWORD *)&v300 + 1) = "_Complex";
    v301 = xmmword_22F469F90;
    v302 = 0;
    v305 = 0;
    v303 = 0;
    v304 = 0;
    LOBYTE(v306) = v306 & 0xC0;
    *((_QWORD *)&v306 + 1) = 0;
    v307 = 0uLL;
    v75 = *(_QWORD *)(a2 + 8);
    if (v75 >= *(_QWORD *)(a2 + 16))
    {
      v79 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v300);
    }
    else
    {
      v76 = v300;
      v77 = v301;
      *(_DWORD *)(v75 + 32) = v302;
      *(_OWORD *)v75 = v76;
      *(_OWORD *)(v75 + 16) = v77;
      *(_QWORD *)(v75 + 48) = 0;
      *(_QWORD *)(v75 + 56) = 0;
      *(_QWORD *)(v75 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v75 + 40), v303, v304, 0x6DB6DB6DB6DB6DB7 * ((v304 - v303) >> 3));
      v78 = v307;
      *(_OWORD *)(v75 + 64) = v306;
      *(_OWORD *)(v75 + 80) = v78;
      v79 = v75 + 96;
    }
    *(_QWORD *)(a2 + 8) = v79;
    *(_QWORD *)&v419[0] = &v303;
    sub_22E6C60B8((void ***)v419);
    *(_QWORD *)&v292 = 0;
    *((_QWORD *)&v292 + 1) = "_Imaginary";
    v293 = xmmword_22F469F90;
    v294 = 0;
    v297 = 0;
    v295 = 0;
    v296 = 0;
    LOBYTE(v298) = v298 & 0xC0;
    *((_QWORD *)&v298 + 1) = 0;
    v299 = 0uLL;
    v80 = *(_QWORD *)(a2 + 8);
    if (v80 >= *(_QWORD *)(a2 + 16))
    {
      v84 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v292);
    }
    else
    {
      v81 = v292;
      v82 = v293;
      *(_DWORD *)(v80 + 32) = v294;
      *(_OWORD *)v80 = v81;
      *(_OWORD *)(v80 + 16) = v82;
      *(_QWORD *)(v80 + 48) = 0;
      *(_QWORD *)(v80 + 56) = 0;
      *(_QWORD *)(v80 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v80 + 40), v295, v296, 0x6DB6DB6DB6DB6DB7 * ((v296 - v295) >> 3));
      v83 = v299;
      *(_OWORD *)(v80 + 64) = v298;
      *(_OWORD *)(v80 + 80) = v83;
      v84 = v80 + 96;
    }
    *(_QWORD *)(a2 + 8) = v84;
    *(_QWORD *)&v419[0] = &v295;
    sub_22E6C60B8((void ***)v419);
    *(_QWORD *)&v284 = 0;
    *((_QWORD *)&v284 + 1) = "_Bool";
    v285 = xmmword_22F469F90;
    v286 = 0;
    v289 = 0;
    v287 = 0;
    v288 = 0;
    LOBYTE(v290) = v290 & 0xC0;
    *((_QWORD *)&v290 + 1) = 0;
    v291 = 0uLL;
    v85 = *(_QWORD *)(a2 + 8);
    if (v85 >= *(_QWORD *)(a2 + 16))
    {
      v89 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v284);
    }
    else
    {
      v86 = v284;
      v87 = v285;
      *(_DWORD *)(v85 + 32) = v286;
      *(_OWORD *)v85 = v86;
      *(_OWORD *)(v85 + 16) = v87;
      *(_QWORD *)(v85 + 48) = 0;
      *(_QWORD *)(v85 + 56) = 0;
      *(_QWORD *)(v85 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v85 + 40), v287, v288, 0x6DB6DB6DB6DB6DB7 * ((v288 - v287) >> 3));
      v88 = v291;
      *(_OWORD *)(v85 + 64) = v290;
      *(_OWORD *)(v85 + 80) = v88;
      v89 = v85 + 96;
    }
    *(_QWORD *)(a2 + 8) = v89;
    *(_QWORD *)&v419[0] = &v287;
    sub_22E6C60B8((void ***)v419);
    *(_QWORD *)&v276 = 0;
    *((_QWORD *)&v276 + 1) = "restrict";
    v277 = xmmword_22F469F90;
    v278 = 0;
    v281 = 0;
    v279 = 0;
    v280 = 0;
    LOBYTE(v282) = v282 & 0xC0;
    *((_QWORD *)&v282 + 1) = 0;
    v283 = 0uLL;
    v90 = *(_QWORD *)(a2 + 8);
    if (v90 >= *(_QWORD *)(a2 + 16))
    {
      v94 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v276);
    }
    else
    {
      v91 = v276;
      v92 = v277;
      *(_DWORD *)(v90 + 32) = v278;
      *(_OWORD *)v90 = v91;
      *(_OWORD *)(v90 + 16) = v92;
      *(_QWORD *)(v90 + 48) = 0;
      *(_QWORD *)(v90 + 56) = 0;
      *(_QWORD *)(v90 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v90 + 40), v279, v280, 0x6DB6DB6DB6DB6DB7 * ((v280 - v279) >> 3));
      v93 = v283;
      *(_OWORD *)(v90 + 64) = v282;
      *(_OWORD *)(v90 + 80) = v93;
      v94 = v90 + 96;
    }
    *(_QWORD *)(a2 + 8) = v94;
    *(_QWORD *)&v419[0] = &v279;
    sub_22E6C60B8((void ***)v419);
    v74 = *a1;
  }
  v419[0] = *(_OWORD *)(a2 + 192);
  memset(&v419[1], 0, 32);
  v420 = v422;
  v421 = 0x400000000;
  v423 = v425;
  v424 = 0x200000000;
  if ((v74 & 0x100) == 0)
  {
    *(_QWORD *)&v207 = 0;
    *((_QWORD *)&v207 + 1) = "__auto_type";
    v208 = xmmword_22F469F90;
    v209 = 0;
    v95 = (void **)v210;
    v213 = 0;
    *((_QWORD *)&v211 + 1) = 0;
    v212 = 0;
    memset(v210, 0, sizeof(v210));
    LOBYTE(v211) = 0;
    v96 = *(_QWORD *)(a2 + 8);
    if (v96 < *(_QWORD *)(a2 + 16))
    {
      v97 = v207;
      v98 = v208;
      *(_DWORD *)(v96 + 32) = v209;
      *(_OWORD *)v96 = v97;
      *(_OWORD *)(v96 + 16) = v98;
      *(_QWORD *)(v96 + 48) = 0;
      *(_QWORD *)(v96 + 56) = 0;
      *(_QWORD *)(v96 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v96 + 40), 0, 0, 0);
      v99 = v211;
      v100 = (char *)&v196 + 1;
LABEL_63:
      v101 = *(_OWORD *)(v100 + 255);
      *(_OWORD *)(v96 + 64) = v99;
      *(_OWORD *)(v96 + 80) = v101;
      v102 = v96 + 96;
LABEL_66:
      *(_QWORD *)(a2 + 8) = v102;
      v418 = v95;
      sub_22E6C60B8(&v418);
      goto LABEL_67;
    }
    v103 = &v207;
    goto LABEL_65;
  }
  *(_QWORD *)&v269 = 0;
  *((_QWORD *)&v269 + 1) = "BOOL";
  *(_DWORD *)v270 = (v74 >> 14) & 1 | 0x32;
  *(_OWORD *)&v270[4] = xmmword_22F469F80;
  v273 = 0;
  v271 = 0;
  v272 = 0;
  LOBYTE(v274) = v274 & 0xC0;
  *((_QWORD *)&v274 + 1) = 0;
  v275 = 0uLL;
  v124 = *(_QWORD *)(a2 + 8);
  if (v124 >= *(_QWORD *)(a2 + 16))
  {
    v128 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v269);
  }
  else
  {
    v125 = v269;
    v126 = *(_OWORD *)v270;
    *(_DWORD *)(v124 + 32) = *(_DWORD *)&v270[16];
    *(_OWORD *)v124 = v125;
    *(_OWORD *)(v124 + 16) = v126;
    *(_QWORD *)(v124 + 48) = 0;
    *(_QWORD *)(v124 + 56) = 0;
    *(_QWORD *)(v124 + 40) = 0;
    sub_22E6C6020((_QWORD *)(v124 + 40), v271, v272, 0x6DB6DB6DB6DB6DB7 * ((v272 - v271) >> 3));
    v127 = v275;
    *(_OWORD *)(v124 + 64) = v274;
    *(_OWORD *)(v124 + 80) = v127;
    v128 = v124 + 96;
  }
  *(_QWORD *)(a2 + 8) = v128;
  v418 = (void **)&v271;
  sub_22E6C60B8(&v418);
  *(_QWORD *)&v261 = 0;
  *((_QWORD *)&v261 + 1) = "class";
  v262 = xmmword_22F469F90;
  v263 = 0;
  v266 = 0;
  v264 = 0;
  v265 = 0;
  LOBYTE(v267) = v267 & 0xC0;
  *((_QWORD *)&v267 + 1) = 0;
  v268 = 0uLL;
  v134 = *(_QWORD *)(a2 + 8);
  if (v134 >= *(_QWORD *)(a2 + 16))
  {
    v138 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v261);
  }
  else
  {
    v135 = v261;
    v136 = v262;
    *(_DWORD *)(v134 + 32) = v263;
    *(_OWORD *)v134 = v135;
    *(_OWORD *)(v134 + 16) = v136;
    *(_QWORD *)(v134 + 48) = 0;
    *(_QWORD *)(v134 + 56) = 0;
    *(_QWORD *)(v134 + 40) = 0;
    sub_22E6C6020((_QWORD *)(v134 + 40), v264, v265, 0x6DB6DB6DB6DB6DB7 * ((v265 - v264) >> 3));
    v137 = v268;
    *(_OWORD *)(v134 + 64) = v267;
    *(_OWORD *)(v134 + 80) = v137;
    v138 = v134 + 96;
  }
  *(_QWORD *)(a2 + 8) = v138;
  v418 = (void **)&v264;
  sub_22E6C60B8(&v418);
  *(_QWORD *)&v253 = 0;
  *((_QWORD *)&v253 + 1) = "wchar_t";
  v254 = xmmword_22F469F90;
  v255 = 0;
  v258 = 0;
  v256 = 0;
  v257 = 0;
  LOBYTE(v259) = v259 & 0xC0;
  *((_QWORD *)&v259 + 1) = 0;
  v260 = 0uLL;
  v144 = *(_QWORD *)(a2 + 8);
  if (v144 >= *(_QWORD *)(a2 + 16))
  {
    v148 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v253);
  }
  else
  {
    v145 = v253;
    v146 = v254;
    *(_DWORD *)(v144 + 32) = v255;
    *(_OWORD *)v144 = v145;
    *(_OWORD *)(v144 + 16) = v146;
    *(_QWORD *)(v144 + 48) = 0;
    *(_QWORD *)(v144 + 56) = 0;
    *(_QWORD *)(v144 + 40) = 0;
    sub_22E6C6020((_QWORD *)(v144 + 40), v256, v257, 0x6DB6DB6DB6DB6DB7 * ((v257 - v256) >> 3));
    v147 = v260;
    *(_OWORD *)(v144 + 64) = v259;
    *(_OWORD *)(v144 + 80) = v147;
    v148 = v144 + 96;
  }
  *(_QWORD *)(a2 + 8) = v148;
  v418 = (void **)&v256;
  sub_22E6C60B8(&v418);
  sub_22E8A9AD8((uint64_t)v419, (uint64_t)"typename");
  sub_22E8A9D90((uint64_t)v419, 19, "");
  sub_22E8A9C00((uint64_t)v419, (uint64_t)"name");
  *(_QWORD *)&v245 = 0;
  *((_QWORD *)&v245 + 1) = sub_22F2F28A4((uint64_t)v419);
  v246 = xmmword_22F469F30;
  v247 = 0;
  v250 = 0;
  v248 = 0;
  v249 = 0;
  LOBYTE(v251) = v251 & 0xC0;
  *((_QWORD *)&v251 + 1) = 0;
  v252 = 0uLL;
  v149 = *(_QWORD *)(a2 + 8);
  if (v149 >= *(_QWORD *)(a2 + 16))
  {
    v153 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v245);
  }
  else
  {
    v150 = v245;
    v151 = v246;
    *(_DWORD *)(v149 + 32) = v247;
    *(_OWORD *)v149 = v150;
    *(_OWORD *)(v149 + 16) = v151;
    *(_QWORD *)(v149 + 48) = 0;
    *(_QWORD *)(v149 + 56) = 0;
    *(_QWORD *)(v149 + 40) = 0;
    sub_22E6C6020((_QWORD *)(v149 + 40), v248, v249, 0x6DB6DB6DB6DB6DB7 * ((v249 - v248) >> 3));
    v152 = v252;
    *(_OWORD *)(v149 + 64) = v251;
    *(_OWORD *)(v149 + 80) = v152;
    v153 = v149 + 96;
  }
  *(_QWORD *)(a2 + 8) = v153;
  v418 = (void **)&v248;
  sub_22E6C60B8(&v418);
  if ((*((_BYTE *)a1 + 1) & 2) != 0)
  {
    *(_QWORD *)&v237 = 0;
    *((_QWORD *)&v237 + 1) = "auto";
    v238 = xmmword_22F469F90;
    v239 = 0;
    v242 = 0;
    v240 = 0;
    v241 = 0;
    LOBYTE(v243) = v243 & 0xC0;
    *((_QWORD *)&v243 + 1) = 0;
    v244 = 0uLL;
    v154 = *(_QWORD *)(a2 + 8);
    if (v154 >= *(_QWORD *)(a2 + 16))
    {
      v158 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v237);
    }
    else
    {
      v155 = v237;
      v156 = v238;
      *(_DWORD *)(v154 + 32) = v239;
      *(_OWORD *)v154 = v155;
      *(_OWORD *)(v154 + 16) = v156;
      *(_QWORD *)(v154 + 48) = 0;
      *(_QWORD *)(v154 + 56) = 0;
      *(_QWORD *)(v154 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v154 + 40), v240, v241, 0x6DB6DB6DB6DB6DB7 * ((v241 - v240) >> 3));
      v157 = v244;
      *(_OWORD *)(v154 + 64) = v243;
      *(_OWORD *)(v154 + 80) = v157;
      v158 = v154 + 96;
    }
    *(_QWORD *)(a2 + 8) = v158;
    v418 = (void **)&v240;
    sub_22E6C60B8(&v418);
    *(_QWORD *)&v229 = 0;
    *((_QWORD *)&v229 + 1) = "char16_t";
    v230 = xmmword_22F469F90;
    v231 = 0;
    v234 = 0;
    v232 = 0;
    v233 = 0;
    LOBYTE(v235) = v235 & 0xC0;
    *((_QWORD *)&v235 + 1) = 0;
    v236 = 0uLL;
    v159 = *(_QWORD *)(a2 + 8);
    if (v159 >= *(_QWORD *)(a2 + 16))
    {
      v163 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v229);
    }
    else
    {
      v160 = v229;
      v161 = v230;
      *(_DWORD *)(v159 + 32) = v231;
      *(_OWORD *)v159 = v160;
      *(_OWORD *)(v159 + 16) = v161;
      *(_QWORD *)(v159 + 48) = 0;
      *(_QWORD *)(v159 + 56) = 0;
      *(_QWORD *)(v159 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v159 + 40), v232, v233, 0x6DB6DB6DB6DB6DB7 * ((v233 - v232) >> 3));
      v162 = v236;
      *(_OWORD *)(v159 + 64) = v235;
      *(_OWORD *)(v159 + 80) = v162;
      v163 = v159 + 96;
    }
    *(_QWORD *)(a2 + 8) = v163;
    v418 = (void **)&v232;
    sub_22E6C60B8(&v418);
    *(_QWORD *)&v221 = 0;
    *((_QWORD *)&v221 + 1) = "char32_t";
    v222 = xmmword_22F469F90;
    v223 = 0;
    v226 = 0;
    v224 = 0;
    v225 = 0;
    LOBYTE(v227) = v227 & 0xC0;
    *((_QWORD *)&v227 + 1) = 0;
    v228 = 0uLL;
    v164 = *(_QWORD *)(a2 + 8);
    if (v164 >= *(_QWORD *)(a2 + 16))
    {
      v168 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v221);
    }
    else
    {
      v165 = v221;
      v166 = v222;
      *(_DWORD *)(v164 + 32) = v223;
      *(_OWORD *)v164 = v165;
      *(_OWORD *)(v164 + 16) = v166;
      *(_QWORD *)(v164 + 48) = 0;
      *(_QWORD *)(v164 + 56) = 0;
      *(_QWORD *)(v164 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v164 + 40), v224, v225, 0x6DB6DB6DB6DB6DB7 * ((v225 - v224) >> 3));
      v167 = v228;
      *(_OWORD *)(v164 + 64) = v227;
      *(_OWORD *)(v164 + 80) = v167;
      v168 = v164 + 96;
    }
    *(_QWORD *)(a2 + 8) = v168;
    v418 = (void **)&v224;
    sub_22E6C60B8(&v418);
    sub_22E8A9AD8((uint64_t)v419, (uint64_t)"decltype");
    sub_22E8A9D90((uint64_t)v419, 7, "");
    sub_22E8A9C00((uint64_t)v419, (uint64_t)"expression");
    sub_22E8A9D90((uint64_t)v419, 8, "");
    *(_QWORD *)&v214 = 0;
    *((_QWORD *)&v214 + 1) = sub_22F2F28A4((uint64_t)v419);
    v215 = xmmword_22F469F30;
    v216 = 0;
    v95 = (void **)v217;
    v220 = 0;
    *((_QWORD *)&v218 + 1) = 0;
    v219 = 0;
    memset(v217, 0, sizeof(v217));
    LOBYTE(v218) = 0;
    v96 = *(_QWORD *)(a2 + 8);
    if (v96 < *(_QWORD *)(a2 + 16))
    {
      v169 = v214;
      v170 = v215;
      *(_DWORD *)(v96 + 32) = v216;
      *(_OWORD *)v96 = v169;
      *(_OWORD *)(v96 + 16) = v170;
      *(_QWORD *)(v96 + 48) = 0;
      *(_QWORD *)(v96 + 56) = 0;
      *(_QWORD *)(v96 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v96 + 40), 0, 0, 0);
      v99 = v218;
      v100 = (char *)&v202 + 1;
      goto LABEL_63;
    }
    v103 = &v214;
LABEL_65:
    v102 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)v103);
    goto LABEL_66;
  }
LABEL_67:
  if ((*((_BYTE *)a1 + 3) & 1) != 0)
  {
    *(_QWORD *)&v201 = 0;
    *((_QWORD *)&v201 + 1) = "half";
    v202 = xmmword_22F469F90;
    v203 = 0;
    memset(v204, 0, sizeof(v204));
    LOBYTE(v205) = 0;
    *((_QWORD *)&v205 + 1) = 0;
    v206 = 0uLL;
    v104 = *(_QWORD *)(a2 + 8);
    if (v104 >= *(_QWORD *)(a2 + 16))
    {
      v108 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v201);
    }
    else
    {
      v105 = v201;
      v106 = v202;
      *(_DWORD *)(v104 + 32) = v203;
      *(_OWORD *)v104 = v105;
      *(_OWORD *)(v104 + 16) = v106;
      *(_QWORD *)(v104 + 48) = 0;
      *(_QWORD *)(v104 + 56) = 0;
      *(_QWORD *)(v104 + 40) = 0;
      v107 = v206;
      *(_OWORD *)(v104 + 64) = v205;
      *(_OWORD *)(v104 + 80) = v107;
      v108 = v104 + 96;
    }
    *(_QWORD *)(a2 + 8) = v108;
    v418 = (void **)v204;
    sub_22E6C60B8(&v418);
  }
  if ((a1[13] & 0x20) != 0)
    sub_22E9BF210((uint64_t *)a2, 50);
  if ((*((_BYTE *)a1 + 4) & 1) != 0)
  {
    sub_22E8A9AD8((uint64_t)v419, (uint64_t)"typeof");
    sub_22E8A9D90((uint64_t)v419, 19, "");
    sub_22E8A9C00((uint64_t)v419, (uint64_t)"expression");
    *(_QWORD *)&v195 = 0;
    *((_QWORD *)&v195 + 1) = sub_22F2F28A4((uint64_t)v419);
    v196 = xmmword_22F469F30;
    v197 = 0;
    memset(v198, 0, sizeof(v198));
    LOBYTE(v199) = 0;
    v200 = 0uLL;
    *((_QWORD *)&v199 + 1) = 0;
    v129 = *(_QWORD *)(a2 + 8);
    if (v129 >= *(_QWORD *)(a2 + 16))
    {
      v133 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v195);
    }
    else
    {
      v130 = v195;
      v131 = v196;
      *(_DWORD *)(v129 + 32) = v197;
      *(_OWORD *)v129 = v130;
      *(_OWORD *)(v129 + 16) = v131;
      *(_QWORD *)(v129 + 48) = 0;
      *(_QWORD *)(v129 + 56) = 0;
      *(_QWORD *)(v129 + 40) = 0;
      v132 = v200;
      *(_OWORD *)(v129 + 64) = v199;
      *(_OWORD *)(v129 + 80) = v132;
      v133 = v129 + 96;
    }
    *(_QWORD *)(a2 + 8) = v133;
    v418 = (void **)v198;
    sub_22E6C60B8(&v418);
    sub_22E8A9AD8((uint64_t)v419, (uint64_t)"typeof");
    sub_22E8A9D90((uint64_t)v419, 7, "");
    sub_22E8A9C00((uint64_t)v419, (uint64_t)"type");
    sub_22E8A9D90((uint64_t)v419, 8, "");
    *(_QWORD *)&v189 = 0;
    *((_QWORD *)&v189 + 1) = sub_22F2F28A4((uint64_t)v419);
    v190 = xmmword_22F469F30;
    v191 = 0;
    memset(v192, 0, sizeof(v192));
    LOBYTE(v193) = 0;
    v194 = 0uLL;
    *((_QWORD *)&v193 + 1) = 0;
    v139 = *(_QWORD *)(a2 + 8);
    if (v139 >= *(_QWORD *)(a2 + 16))
    {
      v143 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v189);
    }
    else
    {
      v140 = v189;
      v141 = v190;
      *(_DWORD *)(v139 + 32) = v191;
      *(_OWORD *)v139 = v140;
      *(_OWORD *)(v139 + 16) = v141;
      *(_QWORD *)(v139 + 48) = 0;
      *(_QWORD *)(v139 + 56) = 0;
      *(_QWORD *)(v139 + 40) = 0;
      v142 = v194;
      *(_OWORD *)(v139 + 64) = v193;
      *(_OWORD *)(v139 + 80) = v142;
      v143 = v139 + 96;
    }
    *(_QWORD *)(a2 + 8) = v143;
    v418 = (void **)v192;
    sub_22E6C60B8(&v418);
  }
  *(_QWORD *)&v183 = 0;
  *((_QWORD *)&v183 + 1) = "_Nonnull";
  v184 = xmmword_22F469F90;
  v185 = 0;
  memset(v186, 0, sizeof(v186));
  LOBYTE(v187) = 0;
  v188 = 0uLL;
  *((_QWORD *)&v187 + 1) = 0;
  v109 = *(_QWORD *)(a2 + 8);
  if (v109 >= *(_QWORD *)(a2 + 16))
  {
    v113 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v183);
  }
  else
  {
    v110 = v183;
    v111 = v184;
    *(_DWORD *)(v109 + 32) = v185;
    *(_OWORD *)v109 = v110;
    *(_OWORD *)(v109 + 16) = v111;
    *(_QWORD *)(v109 + 48) = 0;
    *(_QWORD *)(v109 + 56) = 0;
    *(_QWORD *)(v109 + 40) = 0;
    v112 = v188;
    *(_OWORD *)(v109 + 64) = v187;
    *(_OWORD *)(v109 + 80) = v112;
    v113 = v109 + 96;
  }
  *(_QWORD *)(a2 + 8) = v113;
  v418 = (void **)v186;
  sub_22E6C60B8(&v418);
  *(_QWORD *)&v177 = 0;
  *((_QWORD *)&v177 + 1) = "_Null_unspecified";
  v178 = xmmword_22F469F90;
  v179 = 0;
  memset(v180, 0, sizeof(v180));
  LOBYTE(v181) = 0;
  v182 = 0uLL;
  *((_QWORD *)&v181 + 1) = 0;
  v114 = *(_QWORD *)(a2 + 8);
  if (v114 >= *(_QWORD *)(a2 + 16))
  {
    v118 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v177);
  }
  else
  {
    v115 = v177;
    v116 = v178;
    *(_DWORD *)(v114 + 32) = v179;
    *(_OWORD *)v114 = v115;
    *(_OWORD *)(v114 + 16) = v116;
    *(_QWORD *)(v114 + 48) = 0;
    *(_QWORD *)(v114 + 56) = 0;
    *(_QWORD *)(v114 + 40) = 0;
    v117 = v182;
    *(_OWORD *)(v114 + 64) = v181;
    *(_OWORD *)(v114 + 80) = v117;
    v118 = v114 + 96;
  }
  *(_QWORD *)(a2 + 8) = v118;
  v418 = (void **)v180;
  sub_22E6C60B8(&v418);
  *(_QWORD *)&v171 = 0;
  *((_QWORD *)&v171 + 1) = "_Nullable";
  v172 = xmmword_22F469F90;
  v173 = 0;
  memset(v174, 0, sizeof(v174));
  LOBYTE(v175) = 0;
  v176 = 0uLL;
  *((_QWORD *)&v175 + 1) = 0;
  v119 = *(_QWORD *)(a2 + 8);
  if (v119 >= *(_QWORD *)(a2 + 16))
  {
    v123 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v171);
  }
  else
  {
    v120 = v171;
    v121 = v172;
    *(_DWORD *)(v119 + 32) = v173;
    *(_OWORD *)v119 = v120;
    *(_OWORD *)(v119 + 16) = v121;
    *(_QWORD *)(v119 + 48) = 0;
    *(_QWORD *)(v119 + 56) = 0;
    *(_QWORD *)(v119 + 40) = 0;
    v122 = v176;
    *(_OWORD *)(v119 + 64) = v175;
    *(_OWORD *)(v119 + 80) = v122;
    v123 = v119 + 96;
  }
  *(_QWORD *)(a2 + 8) = v123;
  v418 = (void **)v174;
  sub_22E6C60B8(&v418);
  if (v423 != v425)
    free(v423);
  if (v420 != v422)
    free(v420);
}

char **sub_22E9C98E4(char **result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  const void *v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  const void *v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  int *v37;
  unsigned int v38;
  _BYTE *v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  BOOL v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  BOOL v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  __int128 v70[3];
  void *v71;
  int v72;
  char v73;
  void *v74;
  void *v75;
  _QWORD v76[4];
  _QWORD v77[5];
  _QWORD v78[2];
  _QWORD v79[3];
  BOOL v80;
  _QWORD v81[2];
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  int v85;
  _BYTE v86[32];
  char *v87;
  __int128 v88;
  __int128 v89;
  char v90;
  void *v91;
  int v92;
  char v93;
  _BYTE *v94;
  _BYTE *v95;
  uint64_t v96;
  int v97;
  _BYTE v98[64];
  char *v99;
  char *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  __int128 v104[11];
  const char *v105[4];
  __int16 v106;

  if (!a2)
    return result;
  v6 = a2;
  v7 = (uint64_t)result;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 26 <= 6)
  {
    v6 = *(_QWORD *)(a2 + 48);
    if (!v6)
      return result;
  }
  if ((*(_DWORD *)(v6 + 28) & 0x7F) != 0x37)
    return result;
  v8 = (*(uint64_t (**)(char *))(*(_QWORD *)result[26] + 40))(result[26]);
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 208) + 48))(*(_QWORD *)(v7 + 208));
  LODWORD(v87) = 21;
  BYTE4(v87) = 0;
  v93 = 0;
  v88 = 0u;
  v89 = 0u;
  v90 = 0;
  v94 = v98;
  v95 = v98;
  v96 = 8;
  v97 = 0;
  sub_22E9B831C((uint64_t)&v99, v7, v8, v9, (__int128 *)&v87, 0, 0);
  if (v95 != v94)
    free(v95);
  if (v93 && v92)
    free(v91);
  v10 = operator new(0x28uLL);
  v10[2] = 0;
  v10[3] = 0;
  *((_DWORD *)v10 + 8) = 0;
  v11 = v102;
  *v10 = v102;
  v10[1] = &v102;
  v11[1] = v10;
  v102 = v10;
  ++v103;
  v87 = (char *)&v89 + 8;
  *(_QWORD *)&v88 = (char *)&v89 + 8;
  *((_QWORD *)&v88 + 1) = 4;
  LODWORD(v89) = 0;
  v82 = v86;
  v83 = v86;
  v84 = 4;
  v85 = 0;
  v12 = a4;
  if ((_DWORD)a4)
  {
    v13 = a3;
    while (1)
    {
      v14 = **v13;
      if ((v14 & 6) == 4)
      {
        v15 = *(const void **)(*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 56)
                             + 8 * *(unsigned int *)((v14 & 0xFFFFFFFFFFFFFFF8) + 64)
                             - 8);
        goto LABEL_22;
      }
      if ((v14 & 6) == 2)
        break;
      if ((v14 & 6) != 0 || (*((_WORD *)*v13 + 14) & 1) != 0)
      {
        v15 = 0;
LABEL_22:
        v16 = &v87;
        goto LABEL_23;
      }
      v15 = *(const void **)((*(_QWORD *)(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0)
                           + 8);
      v16 = &v82;
LABEL_23:
      sub_22E3BA850((uint64_t)v16, v15);
      ++v13;
      if (!--v12)
        goto LABEL_24;
    }
    v15 = (const void *)(v14 & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_22;
  }
LABEL_24:
  v17 = *(_QWORD *)(v7 + 88);
  v81[0] = ((*(_QWORD *)(*(_QWORD *)(v17 + 2000) + 100) >> 12) & 0x2000000 | sub_22E8FCD8C(v17, *(_QWORD *)(v7 + 80)) & 0xFFFFDFFFFDF9CFFFLL) ^ 0x200002043000;
  v81[1] = v18;
  v80 = a4 == 0;
  v19 = *(_WORD *)(v6 + 80) & 0x7F;
  v20 = -40;
  if (v19 > 0x46)
  {
    if (v19 == 83)
      goto LABEL_40;
    if (v19 == 71)
    {
      v20 = -56;
      goto LABEL_40;
    }
    if (v19 != 81)
    {
LABEL_35:
      v21 = v19 - 52;
      v22 = v19 - 33 >= 5;
      v23 = -48;
      if (!v22)
        v23 = -64;
      if (v21 >= 6)
        v20 = v23;
      else
        v20 = -72;
    }
  }
  else
  {
    if (v19 > 0x18)
      goto LABEL_34;
    if (v19 == 16)
    {
LABEL_27:
      v20 = -48;
      goto LABEL_40;
    }
    if (((1 << v19) & 0x1066) == 0)
    {
      if (v19 == 24)
        goto LABEL_27;
LABEL_34:
      if (v19 == 70)
      {
        v20 = -64;
        goto LABEL_40;
      }
      goto LABEL_35;
    }
  }
LABEL_40:
  v24 = *(_QWORD *)(v6 + 72 + v20 + 16);
  v25 = (_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF8);
  if ((v24 & 4) != 0)
    v25 = (_QWORD *)*v25;
  v79[0] = &v99;
  v79[1] = v7;
  if (v25)
    v26 = (uint64_t)(v25 - 8);
  else
    v26 = 0;
  v79[2] = v81;
  v78[0] = &v99;
  v78[1] = &v80;
  v77[0] = v78;
  v77[1] = &v99;
  v77[2] = v81;
  v77[3] = v7;
  v77[4] = v79;
  v76[0] = &v99;
  v76[1] = v81;
  v76[2] = v77;
  v76[3] = &v80;
  v27 = sub_22E46A3A0(v26);
  if (v27 != v28)
  {
    v50 = v27;
    v51 = v28;
    v52 = a4 - 1;
    do
    {
      v53 = *(_QWORD *)(**(_QWORD **)(v50 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v53 + 8) & 0xF) != 0)
        v53 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v50 + 16));
      sub_22E3BA850((uint64_t)&v82, *(const void **)((v53 & 0xFFFFFFFFFFFFFFF0) + 8));
      if (v54)
      {
        sub_22E9CA080((uint64_t)v76, v50);
      }
      else if (a4)
      {
        v56 = a3[v52];
        v57 = *v56;
        if ((*v56 & 6) == 0 && (*((_WORD *)v56 + 14) & 1) == 0)
        {
          v58 = *(_QWORD *)(**(_QWORD **)(v50 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v58 + 8) & 0xF) != 0)
          {
            v58 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v50 + 16));
            v56 = a3[v52];
            v57 = *v56;
          }
          if ((v57 & 6) != 0 || (*((_WORD *)v56 + 14) & 1) != 0)
            v59 = 0;
          else
            v59 = *(_QWORD *)(*(_QWORD *)(v57 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFF0);
          v55 = *(_QWORD *)(*(_QWORD *)((v58 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((v59 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          goto LABEL_93;
        }
      }
      v55 = 0;
LABEL_93:
      v80 = v55;
      v50 += 24;
    }
    while (v50 != v51);
  }
  v29 = sub_22E483108(v26);
  if (v29 != v30)
  {
    v60 = v29;
    v61 = v30;
    v62 = a4 - 1;
    do
    {
      v63 = *(_QWORD *)(**(_QWORD **)(v60 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v63 + 8) & 0xF) != 0)
        v63 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v60 + 16));
      sub_22E3BA850((uint64_t)&v82, *(const void **)((v63 & 0xFFFFFFFFFFFFFFF0) + 8));
      if (v64)
      {
        sub_22E9CA080((uint64_t)v76, v60);
      }
      else if (a4)
      {
        v66 = a3[v62];
        v67 = *v66;
        if ((*v66 & 6) == 0 && (*((_WORD *)v66 + 14) & 1) == 0)
        {
          v68 = *(_QWORD *)(**(_QWORD **)(v60 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v68 + 8) & 0xF) != 0)
          {
            v68 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v60 + 16));
            v66 = a3[v62];
            v67 = *v66;
          }
          if ((v67 & 6) != 0 || (*((_WORD *)v66 + 14) & 1) != 0)
            v69 = 0;
          else
            v69 = *(_QWORD *)(*(_QWORD *)(v67 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFF0);
          v65 = *(_QWORD *)(*(_QWORD *)((v68 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((v69 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          goto LABEL_111;
        }
      }
      v65 = 0;
LABEL_111:
      v80 = v65;
      v60 += 24;
    }
    while (v60 != v61);
  }
  v31 = sub_22EFC3B90(v26);
  if (v31)
  {
    v32 = v31;
LABEL_49:
    v33 = (const void *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v32 + 32))(v32);
    sub_22E3BA850((uint64_t)&v87, v33);
    if (v34)
    {
      v35 = *(_QWORD *)(v32 + 40);
      if (v35)
      {
        if ((v35 & 7) != 0)
          v36 = 0;
        else
          v36 = v35 & 0xFFFFFFFFFFFFFFF8;
        v37 = *(int **)(v36 + 16);
        v38 = *v37;
        v106 = 261;
        v105[0] = (const char *)(v37 + 4);
        v105[1] = (const char *)v38;
        v39 = sub_22F2F27DC(v101, v105);
        v40 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v32 + 48) & 0xFFFFFFFFFFFFFFF0));
        v41 = 0;
        if (v40)
        {
          if ((*(_DWORD *)(v40 + 28) & 0x7Fu) - 35 >= 3)
            v41 = 0;
          else
            v41 = v40;
        }
        if (v80)
          v42 = 7;
        else
          v42 = 35;
        sub_22E9F26AC((uint64_t)v77, v41, v42, (uint64_t)v39, v32);
        v80 = 0;
      }
LABEL_70:
      while (1)
      {
        v32 = *(_QWORD *)(v32 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v32)
          goto LABEL_73;
        if ((*(_DWORD *)(v32 + 28) & 0x7Fu) - 49 < 3)
          goto LABEL_49;
      }
    }
    if (a4)
    {
      v43 = *a3[a4 - 1];
      if ((v43 & 6) == 4)
      {
        v44 = *(_QWORD *)(*(_QWORD *)((v43 & 0xFFFFFFFFFFFFFFF8) + 56)
                        + 8 * *(unsigned int *)((v43 & 0xFFFFFFFFFFFFFFF8) + 64)
                        - 8);
        goto LABEL_68;
      }
      if ((v43 & 6) == 2)
      {
        v44 = v43 & 0xFFFFFFFFFFFFFFF8;
LABEL_68:
        v45 = v44 == v32;
        goto LABEL_69;
      }
    }
    v45 = 0;
LABEL_69:
    v80 = v45;
    goto LABEL_70;
  }
LABEL_73:
  v46 = (uint64_t)v102;
  v47 = *v102;
  *(_QWORD *)(v47 + 8) = v102[1];
  **(_QWORD **)(v46 + 8) = v47;
  --v103;
  sub_22E9D8FB0(v46);
  v48 = *(_QWORD *)(v7 + 208);
  sub_22F2A4F2C((uint64_t)v70, v104);
  if (v100 == v99)
    v49 = 0;
  else
    v49 = v99;
  sub_22E9B83FC(v7, v48, v70, (uint64_t)v49, -1431655765 * ((unint64_t)(v100 - v99) >> 5));
  if (v75 != v74)
    free(v75);
  if (v73)
  {
    if (v72)
      free(v71);
    v73 = 0;
  }
  if (v83 != v82)
    free(v83);
  if ((char *)v88 != v87)
    free((void *)v88);
  return sub_22E9B8490(&v99);
}

void sub_22E9CA080(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  __int128 __p;
  uint64_t v14;
  const char *p_p;
  __int16 v16;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 192);
  v5 = *(_QWORD *)(**(_QWORD **)(a2 + 16) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v5 + 8) & 0xF) != 0)
    v5 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(a2 + 16));
  v12 = v5 & 0xFFFFFFFFFFFFFFF0;
  __p = 0uLL;
  v6 = *(_QWORD *)(a1 + 8);
  v14 = 0;
  sub_22F119374((uint64_t *)&v12, &__p, v6);
  v16 = 260;
  p_p = (const char *)&__p;
  v7 = sub_22F2F27DC(v4, &p_p);
  if (SHIBYTE(v14) < 0)
    operator delete((void *)__p);
  v8 = *(_QWORD *)(**(_QWORD **)(a2 + 16) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v8 + 8) & 0xF) != 0)
    v8 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(a2 + 16));
  v9 = sub_22F10C2A4(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0));
  if (v9)
  {
    if ((*(_DWORD *)(v9 + 28) & 0x7Fu) - 35 >= 3)
      v10 = 0;
    else
      v10 = v9;
  }
  else
  {
    v10 = 0;
  }
  if (**(_BYTE **)(a1 + 24))
    v11 = 7;
  else
    v11 = 35;
  sub_22E9F26AC(*(_QWORD *)(a1 + 16), v10, v11, (uint64_t)v7, 0);
}

char **sub_22E9CA19C(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  const void **v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  char v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 v35[3];
  void *v36;
  int v37;
  char v38;
  void *v39;
  void *v40;
  _QWORD v41[3];
  _QWORD v42[3];
  int v43;
  int v44;
  _BYTE v45[24];
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  char v53;
  void *v54;
  int v55;
  char v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  int v60;
  _BYTE v61[64];
  char *v62;
  char *v63;
  _QWORD *v64;
  uint64_t v65;
  __int128 v66[11];
  void **v67[2];

  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  LODWORD(v50) = 0;
  BYTE4(v50) = 0;
  v56 = 0;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v57 = v61;
  v58 = v61;
  v59 = 8;
  v60 = 0;
  sub_22E9B831C((uint64_t)&v62, a1, v7, v8, (__int128 *)&v50, 0, 0);
  if (v58 != v57)
    free(v58);
  if (v56 && v55)
    free(v54);
  v9 = operator new(0x28uLL);
  v10 = 0;
  v9[2] = 0;
  v9[3] = 0;
  *((_DWORD *)v9 + 8) = 0;
  v11 = v64;
  *v9 = v64;
  v9[1] = &v64;
  v11[1] = v9;
  v64 = v9;
  ++v65;
  v50 = (char *)&v52 + 8;
  *(_QWORD *)&v51 = (char *)&v52 + 8;
  *((_QWORD *)&v51 + 1) = 4;
  LODWORD(v52) = 0;
  v12 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v12)
  {
    v10 = 0;
    v13 = 48 * v12;
    v14 = (const void **)(*(_QWORD *)(a3 + 16) + 8);
    do
    {
      if (*((_DWORD *)v14 - 2))
        sub_22E3BA850((uint64_t)&v50, *v14);
      else
        v10 = 1;
      v14 += 6;
      v13 -= 48;
    }
    while (v13);
  }
  for (; a2; a2 = (_QWORD *)*a2)
  {
    v15 = a2[45];
    if (v15)
    {
      v16 = *(_WORD *)(v15 + 8) & 0x7F;
      if (v16 == 16 || v16 == 83)
        break;
    }
    v17 = a2[10];
    v18 = v17 == a2[9] ? 92 : 88;
    v19 = *(unsigned int *)((char *)a2 + v18);
    if ((_DWORD)v19)
    {
      v20 = 8 * v19;
      v21 = (uint64_t *)a2[10];
      while ((unint64_t)*v21 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v21;
        v20 -= 8;
        if (!v20)
          goto LABEL_40;
      }
    }
    else
    {
      v21 = (uint64_t *)a2[10];
    }
    v22 = (_QWORD *)(v17 + 8 * v19);
    if (v21 != v22)
    {
      v23 = *v21;
      if (*v21)
      {
LABEL_27:
        if ((*(_DWORD *)(v23 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9 && sub_22E3CB5E0(v23) && !sub_22E49C868(v23))
        {
          v24 = *(_QWORD *)(v23 + 40);
          v25 = (v24 & 7) != 0 ? 0 : (const void *)(v24 & 0xFFFFFFFFFFFFFFF8);
          sub_22E3BA850((uint64_t)&v50, v25);
          if (v26)
          {
            v42[0] = v23;
            v42[2] = 34;
            v43 = 0;
            v44 = 0;
            memset(v45, 0, sizeof(v45));
            memset(v41, 0, sizeof(v41));
            v46 &= 0xC0u;
            v48 = 0;
            v49 = 0;
            v47 = 0;
            sub_22E8AB5B4((uint64_t)v42, 1);
            sub_22E9C57E4((unint64_t)&v62, v42, *(_QWORD *)(a1 + 216), 0, 0);
            v67[0] = (void **)v45;
            sub_22E6C60B8(v67);
            v67[0] = (void **)v41;
            sub_22E6C60B8(v67);
          }
        }
      }
LABEL_35:
      v27 = (unint64_t *)(v21 + 1);
      while (v27 != v22)
      {
        v28 = *v27++;
        v23 = v28;
        if (v28 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v21 = (uint64_t *)(v27 - 1);
          if (v23)
            goto LABEL_27;
          goto LABEL_35;
        }
      }
    }
LABEL_40:
    ;
  }
  if (((v10 | a4) & 1) == 0 && *(_DWORD *)(a3 + 12) != 1)
    sub_22E9CA57C(a1, (uint64_t)&v62);
  v29 = (uint64_t)v64;
  v30 = *v64;
  *(_QWORD *)(v30 + 8) = v64[1];
  **(_QWORD **)(v29 + 8) = v30;
  --v65;
  sub_22E9D8FB0(v29);
  v31 = *(_QWORD *)(a1 + 208);
  sub_22F2A4F2C((uint64_t)v35, v66);
  if (v63 == v62)
    v32 = 0;
  else
    v32 = v62;
  sub_22E9B83FC(a1, v31, v35, (uint64_t)v32, -1431655765 * ((unint64_t)(v63 - v62) >> 5));
  if (v40 != v39)
    free(v40);
  if (v38)
  {
    if (v37)
      free(v36);
    v38 = 0;
  }
  if ((char *)v51 != v50)
    free((void *)v51);
  return sub_22E9B8490(&v62);
}

void sub_22E9CA57C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  int v16;
  _QWORD v17[3];
  __int128 v18;
  __int128 v19;
  _QWORD v20[2];
  void **v21;
  uint64_t v22[6];
  void *v23;
  uint64_t v24;
  _BYTE v25[64];
  void *v26;
  uint64_t v27;
  _QWORD v28[4];

  v28[3] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EBBB18C(a1);
  if (v4 >= 0x10)
  {
    v5 = v4;
    *(_OWORD *)v22 = *(_OWORD *)(a2 + 192);
    memset(&v22[2], 0, 32);
    v23 = v25;
    v24 = 0x400000000;
    v26 = v28;
    v27 = 0x200000000;
    v6 = *(_QWORD *)(a1 + 88);
    v20[0] = ((*(_QWORD *)(*(_QWORD *)(v6 + 2000) + 100) >> 12) & 0x2000000 | sub_22E8FCD8C(v6, *(_QWORD *)(a1 + 80)) & 0xFFFFDFFFFDF9CFFFLL) ^ 0x200002043000;
    v20[1] = v7;
    v8 = sub_22E9D1DF8(v5, (uint64_t)v20, v22[0]);
    sub_22E8A9CC8((uint64_t)v22, (uint64_t)v8);
    sub_22E8A9AD8((uint64_t)v22, (uint64_t)"this");
    *(_QWORD *)&v14 = 0;
    *((_QWORD *)&v14 + 1) = sub_22F2F28A4((uint64_t)v22);
    v15 = xmmword_22F469F30;
    v16 = 0;
    memset(v17, 0, sizeof(v17));
    LOBYTE(v18) = 0;
    v19 = 0uLL;
    *((_QWORD *)&v18 + 1) = 0;
    v9 = *(_QWORD *)(a2 + 8);
    if (v9 >= *(_QWORD *)(a2 + 16))
    {
      v13 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v14);
    }
    else
    {
      v10 = v14;
      v11 = v15;
      *(_DWORD *)(v9 + 32) = v16;
      *(_OWORD *)v9 = v10;
      *(_OWORD *)(v9 + 16) = v11;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 40) = 0;
      v12 = v19;
      *(_OWORD *)(v9 + 64) = v18;
      *(_OWORD *)(v9 + 80) = v12;
      v13 = v9 + 96;
    }
    *(_QWORD *)(a2 + 8) = v13;
    v21 = (void **)v17;
    sub_22E6C60B8(&v21);
    if (v26 != v28)
      free(v26);
    if (v23 != v25)
      free(v23);
  }
}

char **sub_22E9CA760(char **result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char v11;
  int v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  int *v24;
  char v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34[3];
  void *v35;
  int v36;
  char v37;
  void *v38;
  void *v39;
  __int128 v40;
  __int128 v41;
  int v42;
  _QWORD v43[3];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  int v48;
  _QWORD v49[3];
  __int128 v50;
  __int128 v51;
  void **v52;
  __int128 v53;
  __int128 v54;
  char v55;
  void *v56;
  int v57;
  char v58;
  _BYTE *v59;
  _BYTE *v60;
  uint64_t v61;
  int v62;
  _BYTE v63[64];
  char *v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  __int128 v69[11];

  if ((result[9][1] & 2) == 0)
    return result;
  v3 = (uint64_t)result;
  v4 = (*(uint64_t (**)(char *))(*(_QWORD *)result[26] + 40))(result[26]);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 208) + 48))(*(_QWORD *)(v3 + 208));
  LODWORD(v52) = 0;
  BYTE4(v52) = 0;
  v58 = 0;
  v53 = 0u;
  v54 = 0u;
  v55 = 0;
  v59 = v63;
  v60 = v63;
  v61 = 8;
  v62 = 0;
  sub_22E9B831C((uint64_t)&v64, v3, v4, v5, (__int128 *)&v52, 0, 0);
  if (v60 != v59)
    free(v60);
  if (v58 && v57)
    free(v56);
  v6 = operator new(0x28uLL);
  v6[2] = 0;
  v6[3] = 0;
  *((_DWORD *)v6 + 8) = 0;
  v7 = v67;
  *v6 = v67;
  v6[1] = &v67;
  v7[1] = v6;
  v67 = v6;
  ++v68;
  v8 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v8)
  {
    v9 = *(int **)(a2 + 112);
    v10 = *(unsigned int *)(a2 + 120);
    while (1)
    {
      v12 = *v9;
      v9 += 30;
      v11 = v12;
      if (v12 != 6)
        break;
      if (!--v10)
        goto LABEL_13;
    }
    if (((1 << v11) & 0xB7) == 0)
    {
      v22 = *(_DWORD *)(a2 + 40);
      if (v22 == 1)
      {
        v28 = *(_DWORD *)(a2 + 48);
        if (v28 != 15
          && ((*(_BYTE *)(*(_QWORD *)(v3 + 72) + 1) & 0x10) == 0 || v28 > 0x22 || ((1 << v28) & 0x7C0030000) == 0))
        {
          goto LABEL_13;
        }
      }
      else if (v22 != 6)
      {
        if (v22 != 4)
          goto LABEL_13;
        v23 = 0;
        v24 = *(int **)(a2 + 112);
        while (1)
        {
          v26 = *v24;
          v24 += 30;
          v25 = v26;
          if (v26 != 6)
            break;
          if (v8 == ++v23)
          {
            v27 = 0;
            goto LABEL_41;
          }
        }
        v27 = ((1 << v25) & 0xB7) != 0 ? 0 : v23;
LABEL_41:
        if (*(_DWORD *)(*(_QWORD *)(a2 + 112) + 120 * v27 + 48) >= 2u)
          goto LABEL_13;
      }
      *(_QWORD *)&v46 = 0;
      *((_QWORD *)&v46 + 1) = "default";
      v47 = xmmword_22F469F50;
      v48 = 0;
      memset(v49, 0, sizeof(v49));
      LOBYTE(v50) = 0;
      v51 = 0uLL;
      *((_QWORD *)&v50 + 1) = 0;
      v29 = v65;
      if (v65 >= v66)
      {
        v33 = sub_22E9D8E48((uint64_t *)&v64, (uint64_t)&v46);
      }
      else
      {
        v30 = v46;
        v31 = v47;
        *(_DWORD *)(v65 + 32) = v48;
        *(_OWORD *)v29 = v30;
        *(_OWORD *)(v29 + 16) = v31;
        *(_QWORD *)(v29 + 48) = 0;
        *(_QWORD *)(v29 + 56) = 0;
        *(_QWORD *)(v29 + 40) = 0;
        v32 = v51;
        *(_OWORD *)(v29 + 64) = v50;
        *(_OWORD *)(v29 + 80) = v32;
        v33 = v29 + 96;
      }
      v65 = v33;
      v52 = (void **)v49;
      sub_22E6C60B8(&v52);
    }
  }
LABEL_13:
  *(_QWORD *)&v40 = 0;
  *((_QWORD *)&v40 + 1) = "delete";
  v41 = xmmword_22F469F50;
  v42 = 0;
  memset(v43, 0, sizeof(v43));
  LOBYTE(v44) = 0;
  v45 = 0uLL;
  *((_QWORD *)&v44 + 1) = 0;
  v13 = v65;
  if (v65 >= v66)
  {
    v17 = sub_22E9D8E48((uint64_t *)&v64, (uint64_t)&v40);
  }
  else
  {
    v14 = v40;
    v15 = v41;
    *(_DWORD *)(v65 + 32) = v42;
    *(_OWORD *)v13 = v14;
    *(_OWORD *)(v13 + 16) = v15;
    *(_QWORD *)(v13 + 48) = 0;
    *(_QWORD *)(v13 + 56) = 0;
    *(_QWORD *)(v13 + 40) = 0;
    v16 = v45;
    *(_OWORD *)(v13 + 64) = v44;
    *(_OWORD *)(v13 + 80) = v16;
    v17 = v13 + 96;
  }
  v65 = v17;
  v52 = (void **)v43;
  sub_22E6C60B8(&v52);
  v18 = (uint64_t)v67;
  v19 = *v67;
  *(_QWORD *)(v19 + 8) = v67[1];
  **(_QWORD **)(v18 + 8) = v19;
  --v68;
  sub_22E9D8FB0(v18);
  v20 = *(_QWORD *)(v3 + 208);
  sub_22F2A4F2C((uint64_t)v34, v69);
  if ((char *)v65 == v64)
    v21 = 0;
  else
    v21 = v64;
  sub_22E9B83FC(v3, v20, v34, (uint64_t)v21, -1431655765 * ((v65 - (unint64_t)v64) >> 5));
  if (v39 != v38)
    free(v39);
  if (v37)
  {
    if (v36)
      free(v35);
    v37 = 0;
  }
  return sub_22E9B8490(&v64);
}

void sub_22E9CAB1C(uint64_t a1, uint64_t a2, int a3)
{
  const char *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  int v26;
  _QWORD v27[3];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v32;
  _QWORD v33[3];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  _QWORD v39[3];
  __int128 v40;
  __int128 v41;
  void **v42;
  _OWORD v43[3];
  _BYTE *v44;
  uint64_t v45;
  _BYTE v46[64];
  _QWORD *v47;
  uint64_t v48;
  _QWORD v49[4];

  v49[3] = *MEMORY[0x24BDAC8D0];
  v6 = "@end";
  if (!a3)
    v6 = "end";
  *(_QWORD *)&v36 = 0;
  *((_QWORD *)&v36 + 1) = v6;
  v37 = xmmword_22F469F50;
  v38 = 0;
  memset(v39, 0, sizeof(v39));
  LOBYTE(v40) = 0;
  v41 = 0uLL;
  *((_QWORD *)&v40 + 1) = 0;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7 >= *(_QWORD *)(a2 + 16))
  {
    v11 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v36);
  }
  else
  {
    v8 = v36;
    v9 = v37;
    *(_DWORD *)(v7 + 32) = v38;
    *(_OWORD *)v7 = v8;
    *(_OWORD *)(v7 + 16) = v9;
    *(_QWORD *)(v7 + 48) = 0;
    *(_QWORD *)(v7 + 56) = 0;
    *(_QWORD *)(v7 + 40) = 0;
    v10 = v41;
    *(_OWORD *)(v7 + 64) = v40;
    *(_OWORD *)(v7 + 80) = v10;
    v11 = v7 + 96;
  }
  *(_QWORD *)(a2 + 8) = v11;
  *(_QWORD *)&v43[0] = v39;
  sub_22E6C60B8((void ***)v43);
  v43[0] = *(_OWORD *)(a2 + 192);
  memset(&v43[1], 0, 32);
  v44 = v46;
  v45 = 0x400000000;
  v47 = v49;
  v48 = 0x200000000;
  if ((*(_BYTE *)(a1 + 1) & 0x40) != 0)
  {
    v12 = a3 ? "@dynamic" : "dynamic";
    sub_22E8A9AD8((uint64_t)v43, (uint64_t)v12);
    sub_22E8A9D90((uint64_t)v43, 19, "");
    sub_22E8A9C00((uint64_t)v43, (uint64_t)"property");
    *(_QWORD *)&v30 = 0;
    *((_QWORD *)&v30 + 1) = sub_22F2F28A4((uint64_t)v43);
    v31 = xmmword_22F469F30;
    v32 = 0;
    memset(v33, 0, sizeof(v33));
    LOBYTE(v34) = 0;
    v35 = 0uLL;
    *((_QWORD *)&v34 + 1) = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (v13 >= *(_QWORD *)(a2 + 16))
    {
      v17 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v30);
    }
    else
    {
      v14 = v30;
      v15 = v31;
      *(_DWORD *)(v13 + 32) = v32;
      *(_OWORD *)v13 = v14;
      *(_OWORD *)(v13 + 16) = v15;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_QWORD *)(v13 + 40) = 0;
      v16 = v35;
      *(_OWORD *)(v13 + 64) = v34;
      *(_OWORD *)(v13 + 80) = v16;
      v17 = v13 + 96;
    }
    *(_QWORD *)(a2 + 8) = v17;
    v42 = (void **)v33;
    sub_22E6C60B8(&v42);
    v18 = a3 ? "@synthesize" : "synthesize";
    sub_22E8A9AD8((uint64_t)v43, (uint64_t)v18);
    sub_22E8A9D90((uint64_t)v43, 19, "");
    sub_22E8A9C00((uint64_t)v43, (uint64_t)"property");
    *(_QWORD *)&v24 = 0;
    *((_QWORD *)&v24 + 1) = sub_22F2F28A4((uint64_t)v43);
    v25 = xmmword_22F469F30;
    v26 = 0;
    memset(v27, 0, sizeof(v27));
    LOBYTE(v28) = 0;
    v29 = 0uLL;
    *((_QWORD *)&v28 + 1) = 0;
    v19 = *(_QWORD *)(a2 + 8);
    if (v19 >= *(_QWORD *)(a2 + 16))
    {
      v23 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v24);
    }
    else
    {
      v20 = v24;
      v21 = v25;
      *(_DWORD *)(v19 + 32) = v26;
      *(_OWORD *)v19 = v20;
      *(_OWORD *)(v19 + 16) = v21;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_QWORD *)(v19 + 40) = 0;
      v22 = v29;
      *(_OWORD *)(v19 + 64) = v28;
      *(_OWORD *)(v19 + 80) = v22;
      v23 = v19 + 96;
    }
    *(_QWORD *)(a2 + 8) = v23;
    v42 = (void **)v27;
    sub_22E6C60B8(&v42);
    if (v47 != v49)
      free(v47);
  }
  if (v44 != v46)
    free(v44);
}

void sub_22E9CAE48(uint64_t a1, uint64_t *a2, int a3)
{
  const char *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  const char *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  const char *v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  int v32;
  _QWORD v33[3];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  _QWORD v39[3];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  _QWORD v45[3];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  int v50;
  _QWORD v51[3];
  __int128 v52;
  __int128 v53;
  void **v54;

  v6 = "end";
  if (a3)
    v6 = "@end";
  *(_QWORD *)&v48 = 0;
  *((_QWORD *)&v48 + 1) = v6;
  v49 = xmmword_22F469F50;
  v50 = 0;
  memset(v51, 0, sizeof(v51));
  LOBYTE(v52) = 0;
  v53 = 0uLL;
  *((_QWORD *)&v52 + 1) = 0;
  v7 = a2[1];
  if (v7 >= a2[2])
  {
    v11 = sub_22E9D8E48(a2, (uint64_t)&v48);
  }
  else
  {
    v8 = v48;
    v9 = v49;
    *(_DWORD *)(v7 + 32) = v50;
    *(_OWORD *)v7 = v8;
    *(_OWORD *)(v7 + 16) = v9;
    *(_QWORD *)(v7 + 48) = 0;
    *(_QWORD *)(v7 + 56) = 0;
    *(_QWORD *)(v7 + 40) = 0;
    v10 = v53;
    *(_OWORD *)(v7 + 64) = v52;
    *(_OWORD *)(v7 + 80) = v10;
    v11 = v7 + 96;
  }
  a2[1] = v11;
  v54 = (void **)v51;
  sub_22E6C60B8(&v54);
  if ((*(_BYTE *)(a1 + 1) & 0x40) != 0)
  {
    v12 = "property";
    if (a3)
      v12 = "@property";
    *(_QWORD *)&v42 = 0;
    *((_QWORD *)&v42 + 1) = v12;
    v43 = xmmword_22F469F50;
    v44 = 0;
    memset(v45, 0, sizeof(v45));
    LOBYTE(v46) = 0;
    v47 = 0uLL;
    *((_QWORD *)&v46 + 1) = 0;
    v13 = a2[1];
    if (v13 >= a2[2])
    {
      v17 = sub_22E9D8E48(a2, (uint64_t)&v42);
    }
    else
    {
      v14 = v42;
      v15 = v43;
      *(_DWORD *)(v13 + 32) = v44;
      *(_OWORD *)v13 = v14;
      *(_OWORD *)(v13 + 16) = v15;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_QWORD *)(v13 + 40) = 0;
      v16 = v47;
      *(_OWORD *)(v13 + 64) = v46;
      *(_OWORD *)(v13 + 80) = v16;
      v17 = v13 + 96;
    }
    a2[1] = v17;
    v54 = (void **)v45;
    sub_22E6C60B8(&v54);
    v18 = "required";
    if (a3)
      v18 = "@required";
    *(_QWORD *)&v36 = 0;
    *((_QWORD *)&v36 + 1) = v18;
    v37 = xmmword_22F469F50;
    v38 = 0;
    memset(v39, 0, sizeof(v39));
    LOBYTE(v40) = 0;
    v41 = 0uLL;
    *((_QWORD *)&v40 + 1) = 0;
    v19 = a2[1];
    if (v19 >= a2[2])
    {
      v23 = sub_22E9D8E48(a2, (uint64_t)&v36);
    }
    else
    {
      v20 = v36;
      v21 = v37;
      *(_DWORD *)(v19 + 32) = v38;
      *(_OWORD *)v19 = v20;
      *(_OWORD *)(v19 + 16) = v21;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_QWORD *)(v19 + 40) = 0;
      v22 = v41;
      *(_OWORD *)(v19 + 64) = v40;
      *(_OWORD *)(v19 + 80) = v22;
      v23 = v19 + 96;
    }
    a2[1] = v23;
    v54 = (void **)v39;
    sub_22E6C60B8(&v54);
    v24 = "optional";
    if (a3)
      v24 = "@optional";
    *(_QWORD *)&v30 = 0;
    *((_QWORD *)&v30 + 1) = v24;
    v31 = xmmword_22F469F50;
    v32 = 0;
    memset(v33, 0, sizeof(v33));
    LOBYTE(v34) = 0;
    v35 = 0uLL;
    *((_QWORD *)&v34 + 1) = 0;
    v25 = a2[1];
    if (v25 >= a2[2])
    {
      v29 = sub_22E9D8E48(a2, (uint64_t)&v30);
    }
    else
    {
      v26 = v30;
      v27 = v31;
      *(_DWORD *)(v25 + 32) = v32;
      *(_OWORD *)v25 = v26;
      *(_OWORD *)(v25 + 16) = v27;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_QWORD *)(v25 + 40) = 0;
      v28 = v35;
      *(_OWORD *)(v25 + 64) = v34;
      *(_OWORD *)(v25 + 80) = v28;
      v29 = v25 + 96;
    }
    a2[1] = v29;
    v54 = (void **)v33;
    sub_22E6C60B8(&v54);
  }
}

void sub_22E9CB10C(uint64_t a1, int a2)
{
  const char *v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  const char *v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  const char *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  const char *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  int v43;
  _QWORD v44[3];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  int v49;
  _QWORD v50[3];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  int v55;
  _QWORD v56[3];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  int v61;
  _QWORD v62[3];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  int v67;
  _QWORD v68[3];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  int v73;
  _QWORD v74[3];
  __int128 v75;
  __int128 v76;
  void **v77;
  _OWORD v78[3];
  _BYTE *v79;
  uint64_t v80;
  _BYTE v81[64];
  _QWORD *v82;
  uint64_t v83;
  _QWORD v84[4];

  v84[3] = *MEMORY[0x24BDAC8D0];
  v78[0] = *(_OWORD *)(a1 + 192);
  memset(&v78[1], 0, 32);
  v79 = v81;
  v80 = 0x400000000;
  v82 = v84;
  v83 = 0x200000000;
  if (a2)
    v4 = "@class";
  else
    v4 = "class";
  sub_22E8A9AD8((uint64_t)v78, (uint64_t)v4);
  sub_22E8A9D90((uint64_t)v78, 19, "");
  sub_22E8A9C00((uint64_t)v78, (uint64_t)"name");
  *(_QWORD *)&v71 = 0;
  *((_QWORD *)&v71 + 1) = sub_22F2F28A4((uint64_t)v78);
  v72 = xmmword_22F469F30;
  v73 = 0;
  memset(v74, 0, sizeof(v74));
  LOBYTE(v75) = 0;
  *((_QWORD *)&v75 + 1) = 0;
  v76 = 0uLL;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5 >= *(_QWORD *)(a1 + 16))
  {
    v9 = sub_22E9D8E48((uint64_t *)a1, (uint64_t)&v71);
  }
  else
  {
    v6 = v71;
    v7 = v72;
    *(_DWORD *)(v5 + 32) = v73;
    *(_OWORD *)v5 = v6;
    *(_OWORD *)(v5 + 16) = v7;
    *(_QWORD *)(v5 + 48) = 0;
    *(_QWORD *)(v5 + 56) = 0;
    *(_QWORD *)(v5 + 40) = 0;
    v8 = v76;
    *(_OWORD *)(v5 + 64) = v75;
    *(_OWORD *)(v5 + 80) = v8;
    v9 = v5 + 96;
  }
  *(_QWORD *)(a1 + 8) = v9;
  v77 = (void **)v74;
  sub_22E6C60B8(&v77);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 208);
  if (v10 && (*(_BYTE *)(v10 + 8) & 2) != 0)
  {
    if (a2)
      v11 = "@interface";
    else
      v11 = "interface";
    sub_22E8A9AD8((uint64_t)v78, (uint64_t)v11);
    sub_22E8A9D90((uint64_t)v78, 19, "");
    sub_22E8A9C00((uint64_t)v78, (uint64_t)"class");
    *(_QWORD *)&v65 = 0;
    *((_QWORD *)&v65 + 1) = sub_22F2F28A4((uint64_t)v78);
    v66 = xmmword_22F469F30;
    v67 = 0;
    memset(v68, 0, sizeof(v68));
    LOBYTE(v69) = 0;
    v70 = 0uLL;
    *((_QWORD *)&v69 + 1) = 0;
    v12 = *(_QWORD *)(a1 + 8);
    if (v12 >= *(_QWORD *)(a1 + 16))
    {
      v16 = sub_22E9D8E48((uint64_t *)a1, (uint64_t)&v65);
    }
    else
    {
      v13 = v65;
      v14 = v66;
      *(_DWORD *)(v12 + 32) = v67;
      *(_OWORD *)v12 = v13;
      *(_OWORD *)(v12 + 16) = v14;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_QWORD *)(v12 + 40) = 0;
      v15 = v70;
      *(_OWORD *)(v12 + 64) = v69;
      *(_OWORD *)(v12 + 80) = v15;
      v16 = v12 + 96;
    }
    *(_QWORD *)(a1 + 8) = v16;
    v77 = (void **)v68;
    sub_22E6C60B8(&v77);
    if (a2)
      v17 = "@protocol";
    else
      v17 = "protocol";
    sub_22E8A9AD8((uint64_t)v78, (uint64_t)v17);
    sub_22E8A9D90((uint64_t)v78, 19, "");
    sub_22E8A9C00((uint64_t)v78, (uint64_t)"protocol");
    *(_QWORD *)&v59 = 0;
    *((_QWORD *)&v59 + 1) = sub_22F2F28A4((uint64_t)v78);
    v60 = xmmword_22F469F30;
    v61 = 0;
    memset(v62, 0, sizeof(v62));
    LOBYTE(v63) = 0;
    v64 = 0uLL;
    *((_QWORD *)&v63 + 1) = 0;
    v18 = *(_QWORD *)(a1 + 8);
    if (v18 >= *(_QWORD *)(a1 + 16))
    {
      v22 = sub_22E9D8E48((uint64_t *)a1, (uint64_t)&v59);
    }
    else
    {
      v19 = v59;
      v20 = v60;
      *(_DWORD *)(v18 + 32) = v61;
      *(_OWORD *)v18 = v19;
      *(_OWORD *)(v18 + 16) = v20;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_QWORD *)(v18 + 40) = 0;
      v21 = v64;
      *(_OWORD *)(v18 + 64) = v63;
      *(_OWORD *)(v18 + 80) = v21;
      v22 = v18 + 96;
    }
    *(_QWORD *)(a1 + 8) = v22;
    v77 = (void **)v62;
    sub_22E6C60B8(&v77);
    if (a2)
      v23 = "@implementation";
    else
      v23 = "implementation";
    sub_22E8A9AD8((uint64_t)v78, (uint64_t)v23);
    sub_22E8A9D90((uint64_t)v78, 19, "");
    sub_22E8A9C00((uint64_t)v78, (uint64_t)"class");
    *(_QWORD *)&v53 = 0;
    *((_QWORD *)&v53 + 1) = sub_22F2F28A4((uint64_t)v78);
    v54 = xmmword_22F469F30;
    v55 = 0;
    memset(v56, 0, sizeof(v56));
    LOBYTE(v57) = 0;
    v58 = 0uLL;
    *((_QWORD *)&v57 + 1) = 0;
    v24 = *(_QWORD *)(a1 + 8);
    if (v24 >= *(_QWORD *)(a1 + 16))
    {
      v28 = sub_22E9D8E48((uint64_t *)a1, (uint64_t)&v53);
    }
    else
    {
      v25 = v53;
      v26 = v54;
      *(_DWORD *)(v24 + 32) = v55;
      *(_OWORD *)v24 = v25;
      *(_OWORD *)(v24 + 16) = v26;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_QWORD *)(v24 + 40) = 0;
      v27 = v58;
      *(_OWORD *)(v24 + 64) = v57;
      *(_OWORD *)(v24 + 80) = v27;
      v28 = v24 + 96;
    }
    *(_QWORD *)(a1 + 8) = v28;
    v77 = (void **)v56;
    sub_22E6C60B8(&v77);
  }
  if (a2)
    v29 = "@compatibility_alias";
  else
    v29 = "compatibility_alias";
  sub_22E8A9AD8((uint64_t)v78, (uint64_t)v29);
  sub_22E8A9D90((uint64_t)v78, 19, "");
  sub_22E8A9C00((uint64_t)v78, (uint64_t)"alias");
  sub_22E8A9D90((uint64_t)v78, 19, "");
  sub_22E8A9C00((uint64_t)v78, (uint64_t)"class");
  *(_QWORD *)&v47 = 0;
  *((_QWORD *)&v47 + 1) = sub_22F2F28A4((uint64_t)v78);
  v48 = xmmword_22F469F30;
  v49 = 0;
  memset(v50, 0, sizeof(v50));
  LOBYTE(v51) = 0;
  v52 = 0uLL;
  *((_QWORD *)&v51 + 1) = 0;
  v30 = *(_QWORD *)(a1 + 8);
  if (v30 >= *(_QWORD *)(a1 + 16))
  {
    v34 = sub_22E9D8E48((uint64_t *)a1, (uint64_t)&v47);
  }
  else
  {
    v31 = v47;
    v32 = v48;
    *(_DWORD *)(v30 + 32) = v49;
    *(_OWORD *)v30 = v31;
    *(_OWORD *)(v30 + 16) = v32;
    *(_QWORD *)(v30 + 48) = 0;
    *(_QWORD *)(v30 + 56) = 0;
    *(_QWORD *)(v30 + 40) = 0;
    v33 = v52;
    *(_OWORD *)(v30 + 64) = v51;
    *(_OWORD *)(v30 + 80) = v33;
    v34 = v30 + 96;
  }
  *(_QWORD *)(a1 + 8) = v34;
  v77 = (void **)v50;
  sub_22E6C60B8(&v77);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 72) + 20) & 0x200000000000) != 0)
  {
    if (a2)
      v35 = "@import";
    else
      v35 = "import";
    sub_22E8A9AD8((uint64_t)v78, (uint64_t)v35);
    sub_22E8A9D90((uint64_t)v78, 19, "");
    sub_22E8A9C00((uint64_t)v78, (uint64_t)"module");
    *(_QWORD *)&v41 = 0;
    *((_QWORD *)&v41 + 1) = sub_22F2F28A4((uint64_t)v78);
    v42 = xmmword_22F469F30;
    v43 = 0;
    memset(v44, 0, sizeof(v44));
    LOBYTE(v45) = 0;
    v46 = 0uLL;
    *((_QWORD *)&v45 + 1) = 0;
    v36 = *(_QWORD *)(a1 + 8);
    if (v36 >= *(_QWORD *)(a1 + 16))
    {
      v40 = sub_22E9D8E48((uint64_t *)a1, (uint64_t)&v41);
    }
    else
    {
      v37 = v41;
      v38 = v42;
      *(_DWORD *)(v36 + 32) = v43;
      *(_OWORD *)v36 = v37;
      *(_OWORD *)(v36 + 16) = v38;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_QWORD *)(v36 + 40) = 0;
      v39 = v46;
      *(_OWORD *)(v36 + 64) = v45;
      *(_OWORD *)(v36 + 80) = v39;
      v40 = v36 + 96;
    }
    *(_QWORD *)(a1 + 8) = v40;
    v77 = (void **)v44;
    sub_22E6C60B8(&v77);
  }
  if (v82 != v84)
    free(v82);
  if (v79 != v81)
    free(v79);
}

void sub_22E9CB748(uint64_t a1, uint64_t *a2, int a3)
{
  const char *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  const char *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  const char *v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  int v32;
  _QWORD v33[3];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  _QWORD v39[3];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  _QWORD v45[3];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  int v50;
  _QWORD v51[3];
  __int128 v52;
  __int128 v53;
  void **v54;

  v6 = "private";
  if (a3)
    v6 = "@private";
  *(_QWORD *)&v48 = 0;
  *((_QWORD *)&v48 + 1) = v6;
  v49 = xmmword_22F469F50;
  v50 = 0;
  memset(v51, 0, sizeof(v51));
  LOBYTE(v52) = 0;
  v53 = 0uLL;
  *((_QWORD *)&v52 + 1) = 0;
  v7 = a2[1];
  if (v7 >= a2[2])
  {
    v11 = sub_22E9D8E48(a2, (uint64_t)&v48);
  }
  else
  {
    v8 = v48;
    v9 = v49;
    *(_DWORD *)(v7 + 32) = v50;
    *(_OWORD *)v7 = v8;
    *(_OWORD *)(v7 + 16) = v9;
    *(_QWORD *)(v7 + 48) = 0;
    *(_QWORD *)(v7 + 56) = 0;
    *(_QWORD *)(v7 + 40) = 0;
    v10 = v53;
    *(_OWORD *)(v7 + 64) = v52;
    *(_OWORD *)(v7 + 80) = v10;
    v11 = v7 + 96;
  }
  a2[1] = v11;
  v54 = (void **)v51;
  sub_22E6C60B8(&v54);
  v12 = "protected";
  if (a3)
    v12 = "@protected";
  *(_QWORD *)&v42 = 0;
  *((_QWORD *)&v42 + 1) = v12;
  v43 = xmmword_22F469F50;
  v44 = 0;
  memset(v45, 0, sizeof(v45));
  LOBYTE(v46) = 0;
  v47 = 0uLL;
  *((_QWORD *)&v46 + 1) = 0;
  v13 = a2[1];
  if (v13 >= a2[2])
  {
    v17 = sub_22E9D8E48(a2, (uint64_t)&v42);
  }
  else
  {
    v14 = v42;
    v15 = v43;
    *(_DWORD *)(v13 + 32) = v44;
    *(_OWORD *)v13 = v14;
    *(_OWORD *)(v13 + 16) = v15;
    *(_QWORD *)(v13 + 48) = 0;
    *(_QWORD *)(v13 + 56) = 0;
    *(_QWORD *)(v13 + 40) = 0;
    v16 = v47;
    *(_OWORD *)(v13 + 64) = v46;
    *(_OWORD *)(v13 + 80) = v16;
    v17 = v13 + 96;
  }
  a2[1] = v17;
  v54 = (void **)v45;
  sub_22E6C60B8(&v54);
  v18 = "public";
  if (a3)
    v18 = "@public";
  *(_QWORD *)&v36 = 0;
  *((_QWORD *)&v36 + 1) = v18;
  v37 = xmmword_22F469F50;
  v38 = 0;
  memset(v39, 0, sizeof(v39));
  LOBYTE(v40) = 0;
  v41 = 0uLL;
  *((_QWORD *)&v40 + 1) = 0;
  v19 = a2[1];
  if (v19 >= a2[2])
  {
    v23 = sub_22E9D8E48(a2, (uint64_t)&v36);
  }
  else
  {
    v20 = v36;
    v21 = v37;
    *(_DWORD *)(v19 + 32) = v38;
    *(_OWORD *)v19 = v20;
    *(_OWORD *)(v19 + 16) = v21;
    *(_QWORD *)(v19 + 48) = 0;
    *(_QWORD *)(v19 + 56) = 0;
    *(_QWORD *)(v19 + 40) = 0;
    v22 = v41;
    *(_OWORD *)(v19 + 64) = v40;
    *(_OWORD *)(v19 + 80) = v22;
    v23 = v19 + 96;
  }
  a2[1] = v23;
  v54 = (void **)v39;
  sub_22E6C60B8(&v54);
  if ((*(_BYTE *)(a1 + 1) & 0x40) != 0)
  {
    v24 = "package";
    if (a3)
      v24 = "@package";
    *(_QWORD *)&v30 = 0;
    *((_QWORD *)&v30 + 1) = v24;
    v31 = xmmword_22F469F50;
    v32 = 0;
    memset(v33, 0, sizeof(v33));
    LOBYTE(v34) = 0;
    v35 = 0uLL;
    *((_QWORD *)&v34 + 1) = 0;
    v25 = a2[1];
    if (v25 >= a2[2])
    {
      v29 = sub_22E9D8E48(a2, (uint64_t)&v30);
    }
    else
    {
      v26 = v30;
      v27 = v31;
      *(_DWORD *)(v25 + 32) = v32;
      *(_OWORD *)v25 = v26;
      *(_OWORD *)(v25 + 16) = v27;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_QWORD *)(v25 + 40) = 0;
      v28 = v35;
      *(_OWORD *)(v25 + 64) = v34;
      *(_OWORD *)(v25 + 80) = v28;
      v29 = v25 + 96;
    }
    a2[1] = v29;
    v54 = (void **)v33;
    sub_22E6C60B8(&v54);
  }
}

void sub_22E9CBA0C(uint64_t a1, int a2)
{
  uint64_t v4;
  const char *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  int v26;
  _QWORD v27[3];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v32;
  _QWORD v33[3];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  _QWORD v39[3];
  __int128 v40;
  __int128 v41;
  void **v42;
  _OWORD v43[3];
  _BYTE *v44;
  uint64_t v45;
  _BYTE v46[64];
  _QWORD *v47;
  uint64_t v48;
  _QWORD v49[4];

  v49[3] = *MEMORY[0x24BDAC8D0];
  v43[0] = *(_OWORD *)(a1 + 192);
  memset(&v43[1], 0, 32);
  v44 = v46;
  v45 = 0x400000000;
  v47 = v49;
  v48 = 0x200000000;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 208);
  if (v4 && (*(_BYTE *)(v4 + 8) & 2) != 0)
  {
    if (a2)
      v5 = "@try";
    else
      v5 = "try";
    sub_22E8A9AD8((uint64_t)v43, (uint64_t)v5);
    sub_22E8A9D90((uint64_t)v43, 11, "");
    sub_22E8A9C00((uint64_t)v43, (uint64_t)"statements");
    sub_22E8A9D90((uint64_t)v43, 12, "");
    sub_22E8A9B38((uint64_t)v43, (uint64_t)"@catch");
    sub_22E8A9D90((uint64_t)v43, 7, "");
    sub_22E8A9C00((uint64_t)v43, (uint64_t)"parameter");
    sub_22E8A9D90((uint64_t)v43, 8, "");
    sub_22E8A9D90((uint64_t)v43, 11, "");
    sub_22E8A9C00((uint64_t)v43, (uint64_t)"statements");
    sub_22E8A9D90((uint64_t)v43, 12, "");
    sub_22E8A9B38((uint64_t)v43, (uint64_t)"@finally");
    sub_22E8A9D90((uint64_t)v43, 11, "");
    sub_22E8A9C00((uint64_t)v43, (uint64_t)"statements");
    sub_22E8A9D90((uint64_t)v43, 12, "");
    *(_QWORD *)&v36 = 0;
    *((_QWORD *)&v36 + 1) = sub_22F2F28A4((uint64_t)v43);
    v37 = xmmword_22F469F30;
    v38 = 0;
    memset(v39, 0, sizeof(v39));
    LOBYTE(v40) = 0;
    v41 = 0uLL;
    *((_QWORD *)&v40 + 1) = 0;
    v6 = *(_QWORD *)(a1 + 8);
    if (v6 >= *(_QWORD *)(a1 + 16))
    {
      v10 = sub_22E9D8E48((uint64_t *)a1, (uint64_t)&v36);
    }
    else
    {
      v7 = v36;
      v8 = v37;
      *(_DWORD *)(v6 + 32) = v38;
      *(_OWORD *)v6 = v7;
      *(_OWORD *)(v6 + 16) = v8;
      *(_QWORD *)(v6 + 48) = 0;
      *(_QWORD *)(v6 + 56) = 0;
      *(_QWORD *)(v6 + 40) = 0;
      v9 = v41;
      *(_OWORD *)(v6 + 64) = v40;
      *(_OWORD *)(v6 + 80) = v9;
      v10 = v6 + 96;
    }
    *(_QWORD *)(a1 + 8) = v10;
    v42 = (void **)v39;
    sub_22E6C60B8(&v42);
  }
  if (a2)
    v11 = "@throw";
  else
    v11 = "throw";
  sub_22E8A9AD8((uint64_t)v43, (uint64_t)v11);
  sub_22E8A9D90((uint64_t)v43, 19, "");
  sub_22E8A9C00((uint64_t)v43, (uint64_t)"expression");
  *(_QWORD *)&v30 = 0;
  *((_QWORD *)&v30 + 1) = sub_22F2F28A4((uint64_t)v43);
  v31 = xmmword_22F469F30;
  v32 = 0;
  memset(v33, 0, sizeof(v33));
  LOBYTE(v34) = 0;
  v35 = 0uLL;
  *((_QWORD *)&v34 + 1) = 0;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12 >= *(_QWORD *)(a1 + 16))
  {
    v16 = sub_22E9D8E48((uint64_t *)a1, (uint64_t)&v30);
  }
  else
  {
    v13 = v30;
    v14 = v31;
    *(_DWORD *)(v12 + 32) = v32;
    *(_OWORD *)v12 = v13;
    *(_OWORD *)(v12 + 16) = v14;
    *(_QWORD *)(v12 + 48) = 0;
    *(_QWORD *)(v12 + 56) = 0;
    *(_QWORD *)(v12 + 40) = 0;
    v15 = v35;
    *(_OWORD *)(v12 + 64) = v34;
    *(_OWORD *)(v12 + 80) = v15;
    v16 = v12 + 96;
  }
  *(_QWORD *)(a1 + 8) = v16;
  v42 = (void **)v33;
  sub_22E6C60B8(&v42);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 208);
  if (v17 && (*(_BYTE *)(v17 + 8) & 2) != 0)
  {
    if (a2)
      v18 = "@synchronized";
    else
      v18 = "synchronized";
    sub_22E8A9AD8((uint64_t)v43, (uint64_t)v18);
    sub_22E8A9D90((uint64_t)v43, 19, "");
    sub_22E8A9D90((uint64_t)v43, 7, "");
    sub_22E8A9C00((uint64_t)v43, (uint64_t)"expression");
    sub_22E8A9D90((uint64_t)v43, 8, "");
    sub_22E8A9D90((uint64_t)v43, 11, "");
    sub_22E8A9C00((uint64_t)v43, (uint64_t)"statements");
    sub_22E8A9D90((uint64_t)v43, 12, "");
    *(_QWORD *)&v24 = 0;
    *((_QWORD *)&v24 + 1) = sub_22F2F28A4((uint64_t)v43);
    v25 = xmmword_22F469F30;
    v26 = 0;
    memset(v27, 0, sizeof(v27));
    LOBYTE(v28) = 0;
    v29 = 0uLL;
    *((_QWORD *)&v28 + 1) = 0;
    v19 = *(_QWORD *)(a1 + 8);
    if (v19 >= *(_QWORD *)(a1 + 16))
    {
      v23 = sub_22E9D8E48((uint64_t *)a1, (uint64_t)&v24);
    }
    else
    {
      v20 = v24;
      v21 = v25;
      *(_DWORD *)(v19 + 32) = v26;
      *(_OWORD *)v19 = v20;
      *(_OWORD *)(v19 + 16) = v21;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_QWORD *)(v19 + 40) = 0;
      v22 = v29;
      *(_OWORD *)(v19 + 64) = v28;
      *(_OWORD *)(v19 + 80) = v22;
      v23 = v19 + 96;
    }
    *(_QWORD *)(a1 + 8) = v23;
    v42 = (void **)v27;
    sub_22E6C60B8(&v42);
  }
  if (v47 != v49)
    free(v47);
  if (v44 != v46)
    free(v44);
}

void sub_22E9CBE94(uint64_t a1, int a2)
{
  uint64_t v4;
  const char *v5;
  const char *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  const char *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  const char *v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  const char *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  const char *v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  int v50;
  _QWORD v51[3];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  _QWORD v57[3];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  int v62;
  _QWORD v63[3];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  int v68;
  _QWORD v69[3];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  int v74;
  _QWORD v75[3];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  int v80;
  _QWORD v81[3];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  int v86;
  _QWORD v87[3];
  __int128 v88;
  __int128 v89;
  void **v90;
  _OWORD v91[3];
  _BYTE *v92;
  uint64_t v93;
  _BYTE v94[64];
  _QWORD *v95;
  uint64_t v96;
  _QWORD v97[4];

  v97[3] = *MEMORY[0x24BDAC8D0];
  v91[0] = *(_OWORD *)(a1 + 192);
  memset(&v91[1], 0, 32);
  v92 = v94;
  v93 = 0x400000000;
  v95 = v97;
  v96 = 0x200000000;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 72);
  if ((*(_BYTE *)(v4 + 1) & 1) != 0 || (*(_QWORD *)(v4 + 8) & 0x10000000000) != 0)
    v5 = "const char[]";
  else
    v5 = "char[]";
  sub_22E8A9CC8((uint64_t)v91, (uint64_t)v5);
  if (a2)
    v6 = "@encode";
  else
    v6 = "encode";
  sub_22E8A9AD8((uint64_t)v91, (uint64_t)v6);
  sub_22E8A9D90((uint64_t)v91, 7, "");
  sub_22E8A9C00((uint64_t)v91, (uint64_t)"type-name");
  sub_22E8A9D90((uint64_t)v91, 8, "");
  *(_QWORD *)&v84 = 0;
  *((_QWORD *)&v84 + 1) = sub_22F2F28A4((uint64_t)v91);
  v85 = xmmword_22F469F30;
  v86 = 0;
  memset(v87, 0, sizeof(v87));
  LOBYTE(v88) = 0;
  *((_QWORD *)&v88 + 1) = 0;
  v89 = 0uLL;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7 >= *(_QWORD *)(a1 + 16))
  {
    v11 = sub_22E9D8E48((uint64_t *)a1, (uint64_t)&v84);
  }
  else
  {
    v8 = v84;
    v9 = v85;
    *(_DWORD *)(v7 + 32) = v86;
    *(_OWORD *)v7 = v8;
    *(_OWORD *)(v7 + 16) = v9;
    *(_QWORD *)(v7 + 48) = 0;
    *(_QWORD *)(v7 + 56) = 0;
    *(_QWORD *)(v7 + 40) = 0;
    v10 = v89;
    *(_OWORD *)(v7 + 64) = v88;
    *(_OWORD *)(v7 + 80) = v10;
    v11 = v7 + 96;
  }
  *(_QWORD *)(a1 + 8) = v11;
  v90 = (void **)v87;
  sub_22E6C60B8(&v90);
  sub_22E8A9CC8((uint64_t)v91, (uint64_t)"Protocol *");
  if (a2)
    v12 = "@protocol";
  else
    v12 = "protocol";
  sub_22E8A9AD8((uint64_t)v91, (uint64_t)v12);
  sub_22E8A9D90((uint64_t)v91, 7, "");
  sub_22E8A9C00((uint64_t)v91, (uint64_t)"protocol-name");
  sub_22E8A9D90((uint64_t)v91, 8, "");
  *(_QWORD *)&v78 = 0;
  *((_QWORD *)&v78 + 1) = sub_22F2F28A4((uint64_t)v91);
  v79 = xmmword_22F469F30;
  v80 = 0;
  memset(v81, 0, sizeof(v81));
  LOBYTE(v82) = 0;
  *((_QWORD *)&v82 + 1) = 0;
  v83 = 0uLL;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13 >= *(_QWORD *)(a1 + 16))
  {
    v17 = sub_22E9D8E48((uint64_t *)a1, (uint64_t)&v78);
  }
  else
  {
    v14 = v78;
    v15 = v79;
    *(_DWORD *)(v13 + 32) = v80;
    *(_OWORD *)v13 = v14;
    *(_OWORD *)(v13 + 16) = v15;
    *(_QWORD *)(v13 + 48) = 0;
    *(_QWORD *)(v13 + 56) = 0;
    *(_QWORD *)(v13 + 40) = 0;
    v16 = v83;
    *(_OWORD *)(v13 + 64) = v82;
    *(_OWORD *)(v13 + 80) = v16;
    v17 = v13 + 96;
  }
  *(_QWORD *)(a1 + 8) = v17;
  v90 = (void **)v81;
  sub_22E6C60B8(&v90);
  sub_22E8A9CC8((uint64_t)v91, (uint64_t)"SEL");
  if (a2)
    v18 = "@selector";
  else
    v18 = "selector";
  sub_22E8A9AD8((uint64_t)v91, (uint64_t)v18);
  sub_22E8A9D90((uint64_t)v91, 7, "");
  sub_22E8A9C00((uint64_t)v91, (uint64_t)"selector");
  sub_22E8A9D90((uint64_t)v91, 8, "");
  *(_QWORD *)&v72 = 0;
  *((_QWORD *)&v72 + 1) = sub_22F2F28A4((uint64_t)v91);
  v73 = xmmword_22F469F30;
  v74 = 0;
  memset(v75, 0, sizeof(v75));
  LOBYTE(v76) = 0;
  v77 = 0uLL;
  *((_QWORD *)&v76 + 1) = 0;
  v19 = *(_QWORD *)(a1 + 8);
  if (v19 >= *(_QWORD *)(a1 + 16))
  {
    v23 = sub_22E9D8E48((uint64_t *)a1, (uint64_t)&v72);
  }
  else
  {
    v20 = v72;
    v21 = v73;
    *(_DWORD *)(v19 + 32) = v74;
    *(_OWORD *)v19 = v20;
    *(_OWORD *)(v19 + 16) = v21;
    *(_QWORD *)(v19 + 48) = 0;
    *(_QWORD *)(v19 + 56) = 0;
    *(_QWORD *)(v19 + 40) = 0;
    v22 = v77;
    *(_OWORD *)(v19 + 64) = v76;
    *(_OWORD *)(v19 + 80) = v22;
    v23 = v19 + 96;
  }
  *(_QWORD *)(a1 + 8) = v23;
  v90 = (void **)v75;
  sub_22E6C60B8(&v90);
  sub_22E8A9CC8((uint64_t)v91, (uint64_t)"NSString *");
  if (a2)
    v24 = "@\"";
  else
    v24 = "\"";
  sub_22E8A9AD8((uint64_t)v91, (uint64_t)v24);
  sub_22E8A9C00((uint64_t)v91, (uint64_t)"string");
  sub_22E8A9B38((uint64_t)v91, (uint64_t)"\"");
  *(_QWORD *)&v66 = 0;
  *((_QWORD *)&v66 + 1) = sub_22F2F28A4((uint64_t)v91);
  v67 = xmmword_22F469F30;
  v68 = 0;
  memset(v69, 0, sizeof(v69));
  LOBYTE(v70) = 0;
  v71 = 0uLL;
  *((_QWORD *)&v70 + 1) = 0;
  v25 = *(_QWORD *)(a1 + 8);
  if (v25 >= *(_QWORD *)(a1 + 16))
  {
    v29 = sub_22E9D8E48((uint64_t *)a1, (uint64_t)&v66);
  }
  else
  {
    v26 = v66;
    v27 = v67;
    *(_DWORD *)(v25 + 32) = v68;
    *(_OWORD *)v25 = v26;
    *(_OWORD *)(v25 + 16) = v27;
    *(_QWORD *)(v25 + 48) = 0;
    *(_QWORD *)(v25 + 56) = 0;
    *(_QWORD *)(v25 + 40) = 0;
    v28 = v71;
    *(_OWORD *)(v25 + 64) = v70;
    *(_OWORD *)(v25 + 80) = v28;
    v29 = v25 + 96;
  }
  *(_QWORD *)(a1 + 8) = v29;
  v90 = (void **)v69;
  sub_22E6C60B8(&v90);
  sub_22E8A9CC8((uint64_t)v91, (uint64_t)"NSArray *");
  if (a2)
    v30 = "@[";
  else
    v30 = "[";
  sub_22E8A9AD8((uint64_t)v91, (uint64_t)v30);
  sub_22E8A9C00((uint64_t)v91, (uint64_t)"objects, ...");
  sub_22E8A9D90((uint64_t)v91, 10, "");
  *(_QWORD *)&v60 = 0;
  *((_QWORD *)&v60 + 1) = sub_22F2F28A4((uint64_t)v91);
  v61 = xmmword_22F469F30;
  v62 = 0;
  memset(v63, 0, sizeof(v63));
  LOBYTE(v64) = 0;
  v65 = 0uLL;
  *((_QWORD *)&v64 + 1) = 0;
  v31 = *(_QWORD *)(a1 + 8);
  if (v31 >= *(_QWORD *)(a1 + 16))
  {
    v35 = sub_22E9D8E48((uint64_t *)a1, (uint64_t)&v60);
  }
  else
  {
    v32 = v60;
    v33 = v61;
    *(_DWORD *)(v31 + 32) = v62;
    *(_OWORD *)v31 = v32;
    *(_OWORD *)(v31 + 16) = v33;
    *(_QWORD *)(v31 + 48) = 0;
    *(_QWORD *)(v31 + 56) = 0;
    *(_QWORD *)(v31 + 40) = 0;
    v34 = v65;
    *(_OWORD *)(v31 + 64) = v64;
    *(_OWORD *)(v31 + 80) = v34;
    v35 = v31 + 96;
  }
  *(_QWORD *)(a1 + 8) = v35;
  v90 = (void **)v63;
  sub_22E6C60B8(&v90);
  sub_22E8A9CC8((uint64_t)v91, (uint64_t)"NSDictionary *");
  if (a2)
    v36 = "@{";
  else
    v36 = "{";
  sub_22E8A9AD8((uint64_t)v91, (uint64_t)v36);
  sub_22E8A9C00((uint64_t)v91, (uint64_t)"key");
  sub_22E8A9D90((uint64_t)v91, 16, "");
  sub_22E8A9D90((uint64_t)v91, 19, "");
  sub_22E8A9C00((uint64_t)v91, (uint64_t)"object, ...");
  sub_22E8A9D90((uint64_t)v91, 12, "");
  *(_QWORD *)&v54 = 0;
  *((_QWORD *)&v54 + 1) = sub_22F2F28A4((uint64_t)v91);
  v55 = xmmword_22F469F30;
  v56 = 0;
  memset(v57, 0, sizeof(v57));
  LOBYTE(v58) = 0;
  v59 = 0uLL;
  *((_QWORD *)&v58 + 1) = 0;
  v37 = *(_QWORD *)(a1 + 8);
  if (v37 >= *(_QWORD *)(a1 + 16))
  {
    v41 = sub_22E9D8E48((uint64_t *)a1, (uint64_t)&v54);
  }
  else
  {
    v38 = v54;
    v39 = v55;
    *(_DWORD *)(v37 + 32) = v56;
    *(_OWORD *)v37 = v38;
    *(_OWORD *)(v37 + 16) = v39;
    *(_QWORD *)(v37 + 48) = 0;
    *(_QWORD *)(v37 + 56) = 0;
    *(_QWORD *)(v37 + 40) = 0;
    v40 = v59;
    *(_OWORD *)(v37 + 64) = v58;
    *(_OWORD *)(v37 + 80) = v40;
    v41 = v37 + 96;
  }
  *(_QWORD *)(a1 + 8) = v41;
  v90 = (void **)v57;
  sub_22E6C60B8(&v90);
  sub_22E8A9CC8((uint64_t)v91, (uint64_t)"id");
  if (a2)
    v42 = "@(";
  else
    v42 = "(";
  sub_22E8A9AD8((uint64_t)v91, (uint64_t)v42);
  sub_22E8A9C00((uint64_t)v91, (uint64_t)"expression");
  sub_22E8A9D90((uint64_t)v91, 8, "");
  *(_QWORD *)&v48 = 0;
  *((_QWORD *)&v48 + 1) = sub_22F2F28A4((uint64_t)v91);
  v49 = xmmword_22F469F30;
  v50 = 0;
  memset(v51, 0, sizeof(v51));
  LOBYTE(v52) = 0;
  v53 = 0uLL;
  *((_QWORD *)&v52 + 1) = 0;
  v43 = *(_QWORD *)(a1 + 8);
  if (v43 >= *(_QWORD *)(a1 + 16))
  {
    v47 = sub_22E9D8E48((uint64_t *)a1, (uint64_t)&v48);
  }
  else
  {
    v44 = v48;
    v45 = v49;
    *(_DWORD *)(v43 + 32) = v50;
    *(_OWORD *)v43 = v44;
    *(_OWORD *)(v43 + 16) = v45;
    *(_QWORD *)(v43 + 48) = 0;
    *(_QWORD *)(v43 + 56) = 0;
    *(_QWORD *)(v43 + 40) = 0;
    v46 = v53;
    *(_OWORD *)(v43 + 64) = v52;
    *(_OWORD *)(v43 + 80) = v46;
    v47 = v43 + 96;
  }
  *(_QWORD *)(a1 + 8) = v47;
  v90 = (void **)v51;
  sub_22E6C60B8(&v90);
  if (v95 != v97)
    free(v95);
  if (v92 != v94)
    free(v92);
}

char **sub_22E9CC678(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  char **result;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  unsigned int v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  unsigned int v77;
  unint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  unsigned int v83;
  unint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  unint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  __int128 v103;
  void *v104;
  int v105;
  char v106;
  void *v107;
  void *v108;
  __int128 v109;
  __int128 v110;
  int v111;
  _QWORD v112[3];
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  int v117;
  _QWORD v118[3];
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  int v123;
  _QWORD v124[3];
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  int v129;
  _QWORD v130[3];
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  int v135;
  _QWORD v136[3];
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  __int128 v225;
  __int128 v226;
  char *v227;
  unint64_t v228;
  unint64_t v229;
  __int128 v230;
  _QWORD *v231;
  uint64_t v232;
  __int128 v233[11];
  void **v234;
  _BYTE v235[48];
  void *v236;
  void *v237;
  _DWORD v238[2];
  char v239;
  _BYTE *v240;
  void *v241;
  uint64_t v242;
  int v243;
  _BYTE v244[16];
  void *v245;
  uint64_t v246;
  _QWORD v247[8];

  v247[5] = *MEMORY[0x24BDAC8D0];
  result = *(char ***)(a1 + 208);
  if (!result)
    return result;
  v5 = *a3;
  v6 = (*((uint64_t (**)(char **))*result + 5))(result);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  *(_DWORD *)v235 = 0;
  v235[4] = 0;
  v239 = 0;
  memset(&v235[8], 0, 33);
  v240 = v244;
  v241 = v244;
  v242 = 8;
  v243 = 0;
  sub_22E9B831C((uint64_t)&v227, a1, v6, v7, (__int128 *)v235, 0, 0);
  if (v241 != v240)
    free(v241);
  if (v239 && v238[1])
    free(v237);
  v8 = operator new(0x28uLL);
  v8[2] = 0;
  v8[3] = 0;
  *((_DWORD *)v8 + 8) = 0;
  v9 = v231;
  *v8 = v231;
  v8[1] = &v231;
  v9[1] = v8;
  v231 = v8;
  ++v232;
  v10 = v5 & 0x480;
  if ((v5 & 0x480) == 0)
  {
    if ((v5 & 0x71800) != 0)
    {
      v16 = (v5 >> 7) & 0xE34;
      if (v16 <= 0x1FF)
      {
        if (v16 != 16 && v16 != 32)
          goto LABEL_18;
      }
      else if (v16 != 512 && v16 != 2048 && v16 != 1024)
      {
        goto LABEL_18;
      }
    }
    *(_QWORD *)&v219 = 0;
    *((_QWORD *)&v219 + 1) = "readonly";
    v220 = xmmword_22F469F50;
    v221 = 0;
    v224 = 0;
    v222 = 0;
    v223 = 0;
    LOBYTE(v225) = v225 & 0xC0;
    *((_QWORD *)&v225 + 1) = 0;
    v226 = 0uLL;
    v11 = v228;
    if (v228 >= v229)
    {
      v15 = sub_22E9D8E48((uint64_t *)&v227, (uint64_t)&v219);
    }
    else
    {
      v12 = v219;
      v13 = v220;
      *(_DWORD *)(v228 + 32) = v221;
      *(_OWORD *)v11 = v12;
      *(_OWORD *)(v11 + 16) = v13;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_QWORD *)(v11 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v11 + 40), v222, v223, 0x6DB6DB6DB6DB6DB7 * ((v223 - v222) >> 3));
      v14 = v226;
      *(_OWORD *)(v11 + 64) = v225;
      *(_OWORD *)(v11 + 80) = v14;
      v15 = v11 + 96;
    }
    v228 = v15;
    *(_QWORD *)v235 = &v222;
    sub_22E6C60B8((void ***)v235);
  }
LABEL_18:
  if ((v5 & 0x200) == 0 && v10 != 1152 && (v5 & 0x71800) == 0)
  {
    *(_QWORD *)&v211 = 0;
    *((_QWORD *)&v211 + 1) = "assign";
    v212 = xmmword_22F469F50;
    v213 = 0;
    v216 = 0;
    v214 = 0;
    v215 = 0;
    LOBYTE(v217) = v217 & 0xC0;
    *((_QWORD *)&v217 + 1) = 0;
    v218 = 0uLL;
    v17 = v228;
    if (v228 >= v229)
    {
      v21 = sub_22E9D8E48((uint64_t *)&v227, (uint64_t)&v211);
    }
    else
    {
      v18 = v211;
      v19 = v212;
      *(_DWORD *)(v228 + 32) = v213;
      *(_OWORD *)v17 = v18;
      *(_OWORD *)(v17 + 16) = v19;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_QWORD *)(v17 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v17 + 40), v214, v215, 0x6DB6DB6DB6DB6DB7 * ((v215 - v214) >> 3));
      v20 = v218;
      *(_OWORD *)(v17 + 64) = v217;
      *(_OWORD *)(v17 + 80) = v20;
      v21 = v17 + 96;
    }
    v228 = v21;
    *(_QWORD *)v235 = &v214;
    sub_22E6C60B8((void ***)v235);
  }
  if ((v5 & 0x40000) == 0 && v10 != 1152 && (v5 & 0x31A00) == 0)
  {
    *(_QWORD *)&v203 = 0;
    *((_QWORD *)&v203 + 1) = "unsafe_unretained";
    v204 = xmmword_22F469F50;
    v205 = 0;
    v208 = 0;
    v206 = 0;
    v207 = 0;
    LOBYTE(v209) = v209 & 0xC0;
    *((_QWORD *)&v209 + 1) = 0;
    v210 = 0uLL;
    v22 = v228;
    if (v228 >= v229)
    {
      v26 = sub_22E9D8E48((uint64_t *)&v227, (uint64_t)&v203);
    }
    else
    {
      v23 = v203;
      v24 = v204;
      *(_DWORD *)(v228 + 32) = v205;
      *(_OWORD *)v22 = v23;
      *(_OWORD *)(v22 + 16) = v24;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_QWORD *)(v22 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v22 + 40), v206, v207, 0x6DB6DB6DB6DB6DB7 * ((v207 - v206) >> 3));
      v25 = v210;
      *(_OWORD *)(v22 + 64) = v209;
      *(_OWORD *)(v22 + 80) = v25;
      v26 = v22 + 96;
    }
    v228 = v26;
    *(_QWORD *)v235 = &v206;
    sub_22E6C60B8((void ***)v235);
  }
  if ((v5 & 0x480) == 0)
  {
    if ((v5 & 0x71800) != 0)
    {
      v32 = (v5 >> 7) & 0xE34;
      if (v32 <= 0x1FF)
      {
        if (v32 != 16 && v32 != 32)
          goto LABEL_43;
      }
      else if (v32 != 512 && v32 != 2048 && v32 != 1024)
      {
        goto LABEL_43;
      }
    }
    *(_QWORD *)&v195 = 0;
    *((_QWORD *)&v195 + 1) = "readwrite";
    v196 = xmmword_22F469F50;
    v197 = 0;
    v200 = 0;
    v198 = 0;
    v199 = 0;
    LOBYTE(v201) = v201 & 0xC0;
    *((_QWORD *)&v201 + 1) = 0;
    v202 = 0uLL;
    v27 = v228;
    if (v228 >= v229)
    {
      v31 = sub_22E9D8E48((uint64_t *)&v227, (uint64_t)&v195);
    }
    else
    {
      v28 = v195;
      v29 = v196;
      *(_DWORD *)(v228 + 32) = v197;
      *(_OWORD *)v27 = v28;
      *(_OWORD *)(v27 + 16) = v29;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_QWORD *)(v27 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v27 + 40), v198, v199, 0x6DB6DB6DB6DB6DB7 * ((v199 - v198) >> 3));
      v30 = v202;
      *(_OWORD *)(v27 + 64) = v201;
      *(_OWORD *)(v27 + 80) = v30;
      v31 = v27 + 96;
    }
    v228 = v31;
    *(_QWORD *)v235 = &v198;
    sub_22E6C60B8((void ***)v235);
  }
LABEL_43:
  if ((v5 & 0x800) == 0 && v10 != 1152 && (v5 & 0x71200) == 0)
  {
    *(_QWORD *)&v187 = 0;
    *((_QWORD *)&v187 + 1) = "retain";
    v188 = xmmword_22F469F50;
    v189 = 0;
    v192 = 0;
    v190 = 0;
    v191 = 0;
    LOBYTE(v193) = v193 & 0xC0;
    *((_QWORD *)&v193 + 1) = 0;
    v194 = 0uLL;
    v33 = v228;
    if (v228 >= v229)
    {
      v37 = sub_22E9D8E48((uint64_t *)&v227, (uint64_t)&v187);
    }
    else
    {
      v34 = v187;
      v35 = v188;
      *(_DWORD *)(v228 + 32) = v189;
      *(_OWORD *)v33 = v34;
      *(_OWORD *)(v33 + 16) = v35;
      *(_QWORD *)(v33 + 48) = 0;
      *(_QWORD *)(v33 + 56) = 0;
      *(_QWORD *)(v33 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v33 + 40), v190, v191, 0x6DB6DB6DB6DB6DB7 * ((v191 - v190) >> 3));
      v36 = v194;
      *(_OWORD *)(v33 + 64) = v193;
      *(_OWORD *)(v33 + 80) = v36;
      v37 = v33 + 96;
    }
    v228 = v37;
    *(_QWORD *)v235 = &v190;
    sub_22E6C60B8((void ***)v235);
  }
  if ((v5 & 0x20000) == 0 && v10 != 1152 && (v5 & 0x51A00) == 0)
  {
    *(_QWORD *)&v179 = 0;
    *((_QWORD *)&v179 + 1) = "strong";
    v180 = xmmword_22F469F50;
    v181 = 0;
    v184 = 0;
    v182 = 0;
    v183 = 0;
    LOBYTE(v185) = v185 & 0xC0;
    *((_QWORD *)&v185 + 1) = 0;
    v186 = 0uLL;
    v38 = v228;
    if (v228 >= v229)
    {
      v42 = sub_22E9D8E48((uint64_t *)&v227, (uint64_t)&v179);
    }
    else
    {
      v39 = v179;
      v40 = v180;
      *(_DWORD *)(v228 + 32) = v181;
      *(_OWORD *)v38 = v39;
      *(_OWORD *)(v38 + 16) = v40;
      *(_QWORD *)(v38 + 48) = 0;
      *(_QWORD *)(v38 + 56) = 0;
      *(_QWORD *)(v38 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v38 + 40), v182, v183, 0x6DB6DB6DB6DB6DB7 * ((v183 - v182) >> 3));
      v41 = v186;
      *(_OWORD *)(v38 + 64) = v185;
      *(_OWORD *)(v38 + 80) = v41;
      v42 = v38 + 96;
    }
    v228 = v42;
    *(_QWORD *)v235 = &v182;
    sub_22E6C60B8((void ***)v235);
  }
  if ((v5 & 0x1000) == 0 && v10 != 1152 && (v5 & 0x70A00) == 0)
  {
    *(_QWORD *)&v171 = 0;
    *((_QWORD *)&v171 + 1) = "copy";
    v172 = xmmword_22F469F50;
    v173 = 0;
    v176 = 0;
    v174 = 0;
    v175 = 0;
    LOBYTE(v177) = v177 & 0xC0;
    *((_QWORD *)&v177 + 1) = 0;
    v178 = 0uLL;
    v43 = v228;
    if (v228 >= v229)
    {
      v47 = sub_22E9D8E48((uint64_t *)&v227, (uint64_t)&v171);
    }
    else
    {
      v44 = v171;
      v45 = v172;
      *(_DWORD *)(v228 + 32) = v173;
      *(_OWORD *)v43 = v44;
      *(_OWORD *)(v43 + 16) = v45;
      *(_QWORD *)(v43 + 48) = 0;
      *(_QWORD *)(v43 + 56) = 0;
      *(_QWORD *)(v43 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v43 + 40), v174, v175, 0x6DB6DB6DB6DB6DB7 * ((v175 - v174) >> 3));
      v46 = v178;
      *(_OWORD *)(v43 + 64) = v177;
      *(_OWORD *)(v43 + 80) = v46;
      v47 = v43 + 96;
    }
    v228 = v47;
    *(_QWORD *)v235 = &v174;
    sub_22E6C60B8((void ***)v235);
  }
  if ((v5 & 0x2000) == 0 && v10 != 1152)
  {
    if ((v5 & 0x71800) != 0)
    {
      v53 = (v5 >> 7) & 0xE34;
      if (v53 <= 0x1FF)
      {
        if (v53 != 16 && v53 != 32)
          goto LABEL_76;
      }
      else if (v53 != 512 && v53 != 2048 && v53 != 1024)
      {
        goto LABEL_76;
      }
    }
    *(_QWORD *)&v163 = 0;
    *((_QWORD *)&v163 + 1) = "nonatomic";
    v164 = xmmword_22F469F50;
    v165 = 0;
    v168 = 0;
    v166 = 0;
    v167 = 0;
    LOBYTE(v169) = v169 & 0xC0;
    *((_QWORD *)&v169 + 1) = 0;
    v170 = 0uLL;
    v48 = v228;
    if (v228 >= v229)
    {
      v52 = sub_22E9D8E48((uint64_t *)&v227, (uint64_t)&v163);
    }
    else
    {
      v49 = v163;
      v50 = v164;
      *(_DWORD *)(v228 + 32) = v165;
      *(_OWORD *)v48 = v49;
      *(_OWORD *)(v48 + 16) = v50;
      *(_QWORD *)(v48 + 48) = 0;
      *(_QWORD *)(v48 + 56) = 0;
      *(_QWORD *)(v48 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v48 + 40), v166, v167, 0x6DB6DB6DB6DB6DB7 * ((v167 - v166) >> 3));
      v51 = v170;
      *(_OWORD *)(v48 + 64) = v169;
      *(_OWORD *)(v48 + 80) = v51;
      v52 = v48 + 96;
    }
    v228 = v52;
    *(_QWORD *)v235 = &v166;
    sub_22E6C60B8((void ***)v235);
  }
LABEL_76:
  if ((v5 & 0x8000) == 0 && v10 != 1152)
  {
    if ((v5 & 0x71800) != 0)
    {
      v59 = (v5 >> 7) & 0xE34;
      if (v59 <= 0x1FF)
      {
        if (v59 != 16 && v59 != 32)
          goto LABEL_88;
      }
      else if (v59 != 512 && v59 != 2048 && v59 != 1024)
      {
        goto LABEL_88;
      }
    }
    *(_QWORD *)&v155 = 0;
    *((_QWORD *)&v155 + 1) = "atomic";
    v156 = xmmword_22F469F50;
    v157 = 0;
    v160 = 0;
    v158 = 0;
    v159 = 0;
    LOBYTE(v161) = v161 & 0xC0;
    *((_QWORD *)&v161 + 1) = 0;
    v162 = 0uLL;
    v54 = v228;
    if (v228 >= v229)
    {
      v58 = sub_22E9D8E48((uint64_t *)&v227, (uint64_t)&v155);
    }
    else
    {
      v55 = v155;
      v56 = v156;
      *(_DWORD *)(v228 + 32) = v157;
      *(_OWORD *)v54 = v55;
      *(_OWORD *)(v54 + 16) = v56;
      *(_QWORD *)(v54 + 48) = 0;
      *(_QWORD *)(v54 + 56) = 0;
      *(_QWORD *)(v54 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v54 + 40), v158, v159, 0x6DB6DB6DB6DB6DB7 * ((v159 - v158) >> 3));
      v57 = v162;
      *(_OWORD *)(v54 + 64) = v161;
      *(_OWORD *)(v54 + 80) = v57;
      v58 = v54 + 96;
    }
    v228 = v58;
    *(_QWORD *)v235 = &v158;
    sub_22E6C60B8((void ***)v235);
  }
LABEL_88:
  v60 = *(_QWORD *)(a1 + 72);
  if ((*(_WORD *)(v60 + 148) & 8) != 0)
  {
    if ((v5 & 0x10000) != 0)
      goto LABEL_99;
  }
  else if ((v5 & 0x10000) != 0 || (*(_DWORD *)(v60 + 244) & 0x60000) == 0)
  {
    goto LABEL_99;
  }
  if (v10 != 1152 && (v5 & 0x61A00) == 0)
  {
    *(_QWORD *)&v147 = 0;
    *((_QWORD *)&v147 + 1) = "weak";
    v148 = xmmword_22F469F50;
    v149 = 0;
    v152 = 0;
    v150 = 0;
    v151 = 0;
    LOBYTE(v153) = v153 & 0xC0;
    *((_QWORD *)&v153 + 1) = 0;
    v154 = 0uLL;
    v61 = v228;
    if (v228 >= v229)
    {
      v65 = sub_22E9D8E48((uint64_t *)&v227, (uint64_t)&v147);
    }
    else
    {
      v62 = v147;
      v63 = v148;
      *(_DWORD *)(v228 + 32) = v149;
      *(_OWORD *)v61 = v62;
      *(_OWORD *)(v61 + 16) = v63;
      *(_QWORD *)(v61 + 48) = 0;
      *(_QWORD *)(v61 + 56) = 0;
      *(_QWORD *)(v61 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v61 + 40), v150, v151, 0x6DB6DB6DB6DB6DB7 * ((v151 - v150) >> 3));
      v64 = v154;
      *(_OWORD *)(v61 + 64) = v153;
      *(_OWORD *)(v61 + 80) = v64;
      v65 = v61 + 96;
    }
    v228 = v65;
    *(_QWORD *)v235 = &v150;
    sub_22E6C60B8((void ***)v235);
  }
LABEL_99:
  if ((v5 & 0x4000) == 0 && v10 != 1152)
  {
    if ((v5 & 0x71800) != 0)
    {
      v71 = (v5 >> 7) & 0xE34;
      if (v71 <= 0x1FF)
      {
        if (v71 != 16 && v71 != 32)
          goto LABEL_114;
      }
      else if (v71 != 512 && v71 != 2048 && v71 != 1024)
      {
        goto LABEL_114;
      }
    }
    *(_OWORD *)v235 = v230;
    memset(&v235[16], 0, 32);
    v236 = v238;
    v237 = (void *)0x400000000;
    v245 = v247;
    v246 = 0x200000000;
    sub_22E8A9AD8((uint64_t)v235, (uint64_t)"setter");
    sub_22E8A9B38((uint64_t)v235, (uint64_t)"=");
    sub_22E8A9C00((uint64_t)v235, (uint64_t)"method");
    *(_QWORD *)&v139 = 0;
    *((_QWORD *)&v139 + 1) = sub_22F2F28A4((uint64_t)v235);
    v140 = xmmword_22F469F30;
    v141 = 0;
    v144 = 0;
    v142 = 0;
    v143 = 0;
    LOBYTE(v145) = v145 & 0xC0;
    *((_QWORD *)&v145 + 1) = 0;
    v146 = 0uLL;
    v66 = v228;
    if (v228 >= v229)
    {
      v70 = sub_22E9D8E48((uint64_t *)&v227, (uint64_t)&v139);
    }
    else
    {
      v67 = v139;
      v68 = v140;
      *(_DWORD *)(v228 + 32) = v141;
      *(_OWORD *)v66 = v67;
      *(_OWORD *)(v66 + 16) = v68;
      *(_QWORD *)(v66 + 48) = 0;
      *(_QWORD *)(v66 + 56) = 0;
      *(_QWORD *)(v66 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v66 + 40), v142, v143, 0x6DB6DB6DB6DB6DB7 * ((v143 - v142) >> 3));
      v69 = v146;
      *(_OWORD *)(v66 + 64) = v145;
      *(_OWORD *)(v66 + 80) = v69;
      v70 = v66 + 96;
    }
    v228 = v70;
    v234 = (void **)&v142;
    sub_22E6C60B8(&v234);
    if (v245 != v247)
      free(v245);
    if (v236 != v238)
      free(v236);
  }
LABEL_114:
  if ((v5 & 0x100) == 0 && v10 != 1152)
  {
    if ((v5 & 0x71800) != 0)
    {
      v77 = (v5 >> 7) & 0xE34;
      if (v77 <= 0x1FF)
      {
        if (v77 != 16 && v77 != 32)
          goto LABEL_129;
      }
      else if (v77 != 512 && v77 != 2048 && v77 != 1024)
      {
        goto LABEL_129;
      }
    }
    *(_OWORD *)v235 = v230;
    memset(&v235[16], 0, 32);
    v236 = v238;
    v237 = (void *)0x400000000;
    v245 = v247;
    v246 = 0x200000000;
    sub_22E8A9AD8((uint64_t)v235, (uint64_t)"getter");
    sub_22E8A9B38((uint64_t)v235, (uint64_t)"=");
    sub_22E8A9C00((uint64_t)v235, (uint64_t)"method");
    *(_QWORD *)&v133 = 0;
    *((_QWORD *)&v133 + 1) = sub_22F2F28A4((uint64_t)v235);
    v134 = xmmword_22F469F30;
    v135 = 0;
    *((_QWORD *)&v137 + 1) = 0;
    v138 = 0uLL;
    memset(v136, 0, sizeof(v136));
    LOBYTE(v137) = 0;
    v72 = v228;
    if (v228 >= v229)
    {
      v76 = sub_22E9D8E48((uint64_t *)&v227, (uint64_t)&v133);
    }
    else
    {
      v73 = v133;
      v74 = v134;
      *(_DWORD *)(v228 + 32) = v135;
      *(_OWORD *)v72 = v73;
      *(_OWORD *)(v72 + 16) = v74;
      *(_QWORD *)(v72 + 48) = 0;
      *(_QWORD *)(v72 + 56) = 0;
      *(_QWORD *)(v72 + 40) = 0;
      v75 = v138;
      *(_OWORD *)(v72 + 64) = v137;
      *(_OWORD *)(v72 + 80) = v75;
      v76 = v72 + 96;
    }
    v228 = v76;
    v234 = (void **)v136;
    sub_22E6C60B8(&v234);
    if (v245 != v247)
      free(v245);
    if (v236 != v238)
      free(v236);
  }
LABEL_129:
  if ((v5 & 0x80000) == 0 && v10 != 1152)
  {
    if ((v5 & 0x71800) == 0)
      goto LABEL_132;
    v83 = (v5 >> 7) & 0xE34;
    if (v83 > 0x1FF)
    {
      if (v83 != 512 && v83 != 2048 && v83 != 1024)
        goto LABEL_150;
LABEL_132:
      *(_QWORD *)&v127 = 0;
      *((_QWORD *)&v127 + 1) = "nonnull";
      v128 = xmmword_22F469F50;
      v129 = 0;
      memset(v130, 0, sizeof(v130));
      LOBYTE(v131) = 0;
      *((_QWORD *)&v131 + 1) = 0;
      v132 = 0uLL;
      v78 = v228;
      if (v228 >= v229)
      {
        v82 = sub_22E9D8E48((uint64_t *)&v227, (uint64_t)&v127);
      }
      else
      {
        v79 = v127;
        v80 = v128;
        *(_DWORD *)(v228 + 32) = v129;
        *(_OWORD *)v78 = v79;
        *(_OWORD *)(v78 + 16) = v80;
        *(_QWORD *)(v78 + 48) = 0;
        *(_QWORD *)(v78 + 56) = 0;
        *(_QWORD *)(v78 + 40) = 0;
        v81 = v132;
        *(_OWORD *)(v78 + 64) = v131;
        *(_OWORD *)(v78 + 80) = v81;
        v82 = v78 + 96;
      }
      v228 = v82;
      *(_QWORD *)v235 = v130;
      sub_22E6C60B8((void ***)v235);
      *(_QWORD *)&v121 = 0;
      *((_QWORD *)&v121 + 1) = "nullable";
      v122 = xmmword_22F469F50;
      v123 = 0;
      memset(v124, 0, sizeof(v124));
      LOBYTE(v125) = 0;
      v126 = 0uLL;
      *((_QWORD *)&v125 + 1) = 0;
      v84 = v228;
      if (v228 >= v229)
      {
        v88 = sub_22E9D8E48((uint64_t *)&v227, (uint64_t)&v121);
      }
      else
      {
        v85 = v121;
        v86 = v122;
        *(_DWORD *)(v228 + 32) = v123;
        *(_OWORD *)v84 = v85;
        *(_OWORD *)(v84 + 16) = v86;
        *(_QWORD *)(v84 + 48) = 0;
        *(_QWORD *)(v84 + 56) = 0;
        *(_QWORD *)(v84 + 40) = 0;
        v87 = v126;
        *(_OWORD *)(v84 + 64) = v125;
        *(_OWORD *)(v84 + 80) = v87;
        v88 = v84 + 96;
      }
      v228 = v88;
      *(_QWORD *)v235 = v124;
      sub_22E6C60B8((void ***)v235);
      *(_QWORD *)&v115 = 0;
      *((_QWORD *)&v115 + 1) = "null_unspecified";
      v116 = xmmword_22F469F50;
      v117 = 0;
      memset(v118, 0, sizeof(v118));
      LOBYTE(v119) = 0;
      v120 = 0uLL;
      *((_QWORD *)&v119 + 1) = 0;
      v89 = v228;
      if (v228 >= v229)
      {
        v93 = sub_22E9D8E48((uint64_t *)&v227, (uint64_t)&v115);
      }
      else
      {
        v90 = v115;
        v91 = v116;
        *(_DWORD *)(v228 + 32) = v117;
        *(_OWORD *)v89 = v90;
        *(_OWORD *)(v89 + 16) = v91;
        *(_QWORD *)(v89 + 48) = 0;
        *(_QWORD *)(v89 + 56) = 0;
        *(_QWORD *)(v89 + 40) = 0;
        v92 = v120;
        *(_OWORD *)(v89 + 64) = v119;
        *(_OWORD *)(v89 + 80) = v92;
        v93 = v89 + 96;
      }
      v228 = v93;
      *(_QWORD *)v235 = v118;
      sub_22E6C60B8((void ***)v235);
      *(_QWORD *)&v109 = 0;
      *((_QWORD *)&v109 + 1) = "null_resettable";
      v110 = xmmword_22F469F50;
      v111 = 0;
      memset(v112, 0, sizeof(v112));
      LOBYTE(v113) = 0;
      v114 = 0uLL;
      *((_QWORD *)&v113 + 1) = 0;
      v94 = v228;
      if (v228 >= v229)
      {
        v98 = sub_22E9D8E48((uint64_t *)&v227, (uint64_t)&v109);
      }
      else
      {
        v95 = v109;
        v96 = v110;
        *(_DWORD *)(v228 + 32) = v111;
        *(_OWORD *)v94 = v95;
        *(_OWORD *)(v94 + 16) = v96;
        *(_QWORD *)(v94 + 48) = 0;
        *(_QWORD *)(v94 + 56) = 0;
        *(_QWORD *)(v94 + 40) = 0;
        v97 = v114;
        *(_OWORD *)(v94 + 64) = v113;
        *(_OWORD *)(v94 + 80) = v97;
        v98 = v94 + 96;
      }
      v228 = v98;
      *(_QWORD *)v235 = v112;
      sub_22E6C60B8((void ***)v235);
      goto LABEL_150;
    }
    if (v83 == 16 || v83 == 32)
      goto LABEL_132;
  }
LABEL_150:
  v99 = (uint64_t)v231;
  v100 = *v231;
  *(_QWORD *)(v100 + 8) = v231[1];
  **(_QWORD **)(v99 + 8) = v100;
  --v232;
  sub_22E9D8FB0(v99);
  v101 = *(_QWORD *)(a1 + 208);
  sub_22F2A4F2C((uint64_t)&v103, v233);
  if ((char *)v228 == v227)
    v102 = 0;
  else
    v102 = v227;
  sub_22E9B83FC(a1, v101, &v103, (uint64_t)v102, -1431655765 * ((v228 - (unint64_t)v227) >> 5));
  if (v108 != v107)
    free(v108);
  if (v106)
  {
    if (v105)
      free(v104);
    v106 = 0;
  }
  return sub_22E9B8490(&v227);
}

char **sub_22E9CD988(char **result)
{
  char *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13[3];
  void *v14;
  int v15;
  char v16;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  char v22;
  void *v23;
  int v24;
  char v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  int v29;
  _BYTE v30[64];
  char *v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  __int128 v35[11];

  v1 = result[27];
  if (v1)
  {
    v2 = (uint64_t)result;
    v3 = *((_WORD *)v1 + 4) & 0x7F;
    if (v3 == 19)
    {
      v4 = *((_QWORD *)v1 + 7);
      if (!v4)
        return result;
    }
    else
    {
      if (v3 != 22)
        return result;
      v4 = (uint64_t)(v1 - 48);
    }
    v5 = (*(uint64_t (**)(char *))(*(_QWORD *)result[26] + 40))(result[26]);
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 208) + 48))(*(_QWORD *)(v2 + 208));
    LODWORD(v19) = 0;
    BYTE4(v19) = 0;
    v25 = 0;
    v20 = 0u;
    v21 = 0u;
    v22 = 0;
    v26 = v30;
    v27 = v30;
    v28 = 8;
    v29 = 0;
    sub_22E9B831C((uint64_t)&v31, v2, v5, v6, (__int128 *)&v19, 0, 0);
    if (v27 != v26)
      free(v27);
    if (v25 && v24)
      free(v23);
    v7 = operator new(0x28uLL);
    v7[2] = 0;
    v7[3] = 0;
    *((_DWORD *)v7 + 8) = 0;
    v8 = v33;
    *v7 = v33;
    v7[1] = &v33;
    v8[1] = v7;
    v33 = v7;
    ++v34;
    v19 = (char *)&v21 + 8;
    *(_QWORD *)&v20 = (char *)&v21 + 8;
    *((_QWORD *)&v20 + 1) = 16;
    LODWORD(v21) = 0;
    sub_22E9CDBBC(v4, 1, 1, 0, 0, *(_QWORD *)(v2 + 216), (uint64_t)&v19, 1, (uint64_t *)&v31, 1, 0);
    v9 = (uint64_t)v33;
    v10 = *v33;
    *(_QWORD *)(v10 + 8) = v33[1];
    **(_QWORD **)(v9 + 8) = v10;
    --v34;
    sub_22E9D8FB0(v9);
    v11 = *(_QWORD *)(v2 + 208);
    sub_22F2A4F2C((uint64_t)v13, v35);
    if (v32 == v31)
      v12 = 0;
    else
      v12 = v31;
    sub_22E9B83FC(v2, v11, v13, (uint64_t)v12, -1431655765 * ((unint64_t)(v32 - v31) >> 5));
    if (v18 != v17)
      free(v18);
    if (v16)
    {
      if (v15)
        free(v14);
      v16 = 0;
    }
    if ((char *)v20 != v19)
      free((void *)v20);
    return sub_22E9B8490(&v31);
  }
  return result;
}

void sub_22E9CDBBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, char a10, char a11)
{
  unint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  const void *v24;
  char v25;
  int v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t i;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  _BOOL4 v65;
  unint64_t v67;
  _OWORD v68[2];
  int v69;
  _QWORD v70[3];
  __int128 v71;
  __int128 v72;
  _QWORD v73[3];
  __int128 v74;
  __int128 v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  void **v82[2];

  v17 = sub_22E9D15D8(a1);
  v18 = v17;
  if ((*(_DWORD *)(v17 + 28) & 0x7F) != 0x16)
    v17 = 0;
  v64 = v17;
  if ((a11 & 1) != 0)
  {
    v19 = 1;
  }
  else
  {
    if (!v17)
    {
      v65 = 0;
      goto LABEL_9;
    }
    v19 = sub_22F3B46CC(v17) == 0;
  }
  v65 = v19;
LABEL_9:
  v63 = v18;
  v20 = sub_22F2781C0(v18);
  if (v20 != v21)
  {
    v22 = v20;
    v23 = v21;
    do
    {
      if (((a2 ^ (*(unsigned __int8 *)(v22 + 58) >> 1)) & (!v65 | a2) & 1) == 0)
      {
        v24 = *(const void **)(v22 + 40);
        if (sub_22E9D0854((uint64_t)v24, a3, a4, a5, a8))
        {
          sub_22E3BA850(a7, v24);
          if (v25)
          {
            v26 = sub_22E9C5678(v22);
            *(_QWORD *)&v74 = v22;
            LODWORD(v75) = v26;
            *(_QWORD *)((char *)&v75 + 4) = 0;
            v76 = 0;
            v78 = 0;
            v79 = 0;
            v77 = 0;
            memset(v73, 0, sizeof(v73));
            LOBYTE(v80) = v80 & 0xC0;
            v81 = 0uLL;
            *((_QWORD *)&v80 + 1) = 0;
            sub_22E8AB5B4((uint64_t)&v74, 1);
            v82[0] = (void **)v73;
            sub_22E6C60B8(v82);
            DWORD1(v75) = a5;
            v27 = v80 & 0xEF | (16 * ((_DWORD)a3 != 0));
            LOBYTE(v80) = v27;
            if ((a10 & 1) == 0)
            {
              LODWORD(v75) = v75 + 2;
              LOBYTE(v80) = v27 | 2;
            }
            v68[0] = v74;
            v68[1] = v75;
            v69 = v76;
            memset(v70, 0, sizeof(v70));
            sub_22E6C6020(v70, v77, v78, 0x6DB6DB6DB6DB6DB7 * ((v78 - v77) >> 3));
            v71 = v80;
            v72 = v81;
            sub_22E9CF888(a9, (uint64_t)v68, a6);
            v82[0] = (void **)v70;
            sub_22E6C60B8(v82);
            v82[0] = (void **)&v77;
            sub_22E6C60B8(v82);
          }
        }
      }
      do
        v22 = *(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v22 && (*(_DWORD *)(v22 + 28) & 0x7F) != 0x18);
    }
    while (v22 != v23);
  }
  if (v63 && (*(_DWORD *)(v63 + 28) & 0x7F) == 0x17)
  {
    v28 = *(_QWORD *)(v63 + 104);
    if (!v28)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v63 + 96) + 88), *(_QWORD *)(v63 + 96));
      v28 = *(_QWORD *)(v63 + 104);
    }
    if (v28 >= 8)
    {
      v29 = v28 & 0xFFFFFFFFFFFFFFF8;
      v30 = *(unsigned int *)((v28 & 0xFFFFFFFFFFFFFFF8) + 16);
      if ((_DWORD)v30)
      {
        v31 = *(uint64_t **)(v29 + 8);
        v32 = 8 * v30;
        do
        {
          v33 = *v31++;
          BYTE1(v62) = v65;
          LOBYTE(v62) = 0;
          sub_22E9CDBBC(v33, a2, a3, a4, a5, a6, a7, a8, a9, v62);
          v32 -= 8;
        }
        while (v32);
      }
    }
  }
  if (v64)
  {
    v34 = *(_QWORD *)(v64 + 120);
    if (!v34)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v64 + 96) + 88), *(_QWORD *)(v64 + 96));
      v34 = *(_QWORD *)(v64 + 120);
    }
    if (v34 >= 8)
    {
      v35 = (uint64_t *)sub_22F2590A8(v64);
      v36 = sub_22F25910C(v64);
      if (v35 != (uint64_t *)v36)
      {
        v37 = (uint64_t *)v36;
        do
        {
          v38 = *v35++;
          BYTE1(v62) = v65;
          LOBYTE(v62) = 0;
          sub_22E9CDBBC(v38, a2, a3, a4, a5, a6, a7, a8, a9, v62);
        }
        while (v35 != v37);
      }
      v39 = sub_22F257E10(v64);
      v40 = a9;
      v41 = a7;
      if (!v39)
      {
LABEL_69:
        if (sub_22F3B46CC(v64))
        {
          v59 = sub_22F3B46CC(v64);
          LOWORD(v62) = 0;
          sub_22E9CDBBC(v59, a2, a3, a4, a5, a6, v41, a8, v40, v62);
        }
        v60 = sub_22F3B4E88(v64);
        if (v60)
        {
          BYTE1(v62) = v65;
          LOBYTE(v62) = a10;
          sub_22E9CDBBC(v60, a2, a3, a4, a5, a6, v41, a8, v40, v62);
        }
        return;
      }
      v42 = v39;
      while (1)
      {
        BYTE1(v62) = v65;
        LOBYTE(v62) = a10;
        sub_22E9CDBBC(v42, a2, a3, a4, a5, a6, v41, a8, v40, v62);
        v67 = v42;
        v43 = *(_QWORD *)(v42 + 120) & 0xFFFFFFFFFFFFFFF8;
        v44 = *(unsigned int *)(v43 + 24);
        v45 = v41;
        if ((_DWORD)v44)
        {
          v46 = *(uint64_t **)(v43 + 16);
          v47 = 8 * v44;
          do
          {
            v48 = *v46++;
            BYTE1(v62) = v65;
            LOBYTE(v62) = 0;
            v61 = v40;
            v49 = v45;
            sub_22E9CDBBC(v48, a2, a3, a4, a5, a6, v45, a8, v61, v62);
            v45 = v49;
            v40 = a9;
            v47 -= 8;
          }
          while (v47);
        }
        v41 = v45;
        v50 = v67;
        if ((*(_DWORD *)(v67 + 28) & 0x7F) != 0x53)
          break;
LABEL_66:
        v58 = sub_22F368C34(*(_QWORD *)(v50 + 88), v67);
        if (v58)
        {
          BYTE1(v62) = v65;
          LOBYTE(v62) = a10;
          sub_22E9CDBBC(v58, a2, a3, a4, a5, a6, v41, a8, v40, v62);
        }
        v42 = *(_QWORD *)(v67 + 128);
        if (!v42)
          goto LABEL_69;
      }
      for (i = *(_QWORD *)(v67 + 16); ; i = *(_QWORD *)(v52 + v54 + 16))
      {
        v52 = i & 0xFFFFFFFFFFFFFFF8;
        if ((i & 4) != 0)
          v52 = *(_QWORD *)v52;
        v53 = *(_WORD *)(v52 + 8) & 0x7F;
        if (v53 == 83)
        {
          v50 = v52 - 40;
          goto LABEL_66;
        }
        v54 = -40;
        if ((*(_WORD *)(v52 + 8) & 0x7Fu) > 0x46)
        {
          if (v53 == 71)
          {
            v54 = -56;
            continue;
          }
          if (v53 != 81)
            goto LABEL_56;
        }
        else
        {
          if (v53 > 0x18)
            goto LABEL_55;
          if (v53 == 16)
            goto LABEL_49;
          if (((1 << v53) & 0x1066) == 0)
          {
            if (v53 == 24)
            {
LABEL_49:
              v54 = -48;
              continue;
            }
LABEL_55:
            if (v53 == 70)
            {
              v54 = -64;
              continue;
            }
LABEL_56:
            v55 = v53 - 52;
            v56 = v53 - 33 >= 5;
            v57 = -64;
            if (v56)
              v57 = -48;
            v56 = v55 >= 6;
            v54 = -72;
            if (v56)
              v54 = v57;
            continue;
          }
        }
      }
    }
  }
}

char **sub_22E9CE1F4(char **result)
{
  char *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13[3];
  void *v14;
  int v15;
  char v16;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  char v22;
  void *v23;
  int v24;
  char v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  int v29;
  _BYTE v30[64];
  char *v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  __int128 v35[11];

  v1 = result[27];
  if (v1)
  {
    v2 = (uint64_t)result;
    v3 = *((_WORD *)v1 + 4) & 0x7F;
    if (v3 == 19)
    {
      v4 = *((_QWORD *)v1 + 7);
      if (!v4)
        return result;
    }
    else
    {
      if (v3 != 22)
        return result;
      v4 = (uint64_t)(v1 - 48);
    }
    v5 = (*(uint64_t (**)(char *))(*(_QWORD *)result[26] + 40))(result[26]);
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 208) + 48))(*(_QWORD *)(v2 + 208));
    LODWORD(v19) = 0;
    BYTE4(v19) = 0;
    v25 = 0;
    v20 = 0u;
    v21 = 0u;
    v22 = 0;
    v26 = v30;
    v27 = v30;
    v28 = 8;
    v29 = 0;
    sub_22E9B831C((uint64_t)&v31, v2, v5, v6, (__int128 *)&v19, 0, 0);
    if (v27 != v26)
      free(v27);
    if (v25 && v24)
      free(v23);
    v7 = operator new(0x28uLL);
    v7[2] = 0;
    v7[3] = 0;
    *((_DWORD *)v7 + 8) = 0;
    v8 = v33;
    *v7 = v33;
    v7[1] = &v33;
    v8[1] = v7;
    v33 = v7;
    ++v34;
    v19 = (char *)&v21 + 8;
    *(_QWORD *)&v20 = (char *)&v21 + 8;
    *((_QWORD *)&v20 + 1) = 16;
    LODWORD(v21) = 0;
    sub_22E9CDBBC(v4, 1, 2, 0, 0, *(_QWORD *)(v2 + 216), (uint64_t)&v19, 1, (uint64_t *)&v31, 1, 0);
    v9 = (uint64_t)v33;
    v10 = *v33;
    *(_QWORD *)(v10 + 8) = v33[1];
    **(_QWORD **)(v9 + 8) = v10;
    --v34;
    sub_22E9D8FB0(v9);
    v11 = *(_QWORD *)(v2 + 208);
    sub_22F2A4F2C((uint64_t)v13, v35);
    if (v32 == v31)
      v12 = 0;
    else
      v12 = v31;
    sub_22E9B83FC(v2, v11, v13, (uint64_t)v12, -1431655765 * ((unint64_t)(v32 - v31) >> 5));
    if (v18 != v17)
      free(v18);
    if (v16)
    {
      if (v15)
        free(v14);
      v16 = 0;
    }
    if ((char *)v20 != v19)
      free((void *)v20);
    return sub_22E9B8490(&v31);
  }
  return result;
}

char **sub_22E9CE428(uint64_t a1, uint64_t **a2, int *a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  int v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  unint64_t v64;
  llvm *v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  char *v81;
  __int128 v84[3];
  void *v85;
  int v86;
  char v87;
  void *v88;
  void *v89;
  _QWORD v90[3];
  __int128 v91;
  __int128 v92;
  int v93;
  _QWORD v94[3];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  int v99;
  _QWORD v100[3];
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  int v105;
  _QWORD v106[3];
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  int v111;
  _QWORD v112[3];
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  int v117;
  _QWORD v118[3];
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  char *v177;
  unint64_t v178;
  unint64_t v179;
  __int128 v180;
  BOOL (*v181)(uint64_t, uint64_t);
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  __int128 v185[11];
  void **v186;
  _BYTE v187[44];
  int v188;
  void *v189;
  void *v190;
  _DWORD v191[2];
  char v192;
  _BYTE *v193;
  void *v194;
  uint64_t v195;
  int v196;
  _BYTE v197[16];
  void *v198;
  uint64_t v199;
  _QWORD v200[8];

  v200[5] = *MEMORY[0x24BDAC8D0];
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  *(_DWORD *)v187 = 18;
  v187[4] = 0;
  v192 = 0;
  memset(&v187[8], 0, 33);
  v193 = v197;
  v194 = v197;
  v195 = 8;
  v196 = 0;
  sub_22E9B831C((uint64_t)&v177, a1, v7, v8, (__int128 *)v187, 0, 0);
  if (v194 != v193)
    free(v194);
  if (v192 && v191[1])
    free(v190);
  v9 = operator new(0x28uLL);
  v9[2] = 0;
  v9[3] = 0;
  *((_DWORD *)v9 + 8) = 0;
  v10 = v183;
  *v9 = v183;
  v9[1] = &v183;
  v10[1] = v9;
  v183 = v9;
  ++v184;
  v11 = *a3;
  v12 = *a3 & 3;
  if (!v12)
  {
    *(_QWORD *)&v169 = 0;
    *((_QWORD *)&v169 + 1) = "in";
    v170 = xmmword_22F469F50;
    v171 = 0;
    v174 = 0;
    v172 = 0;
    v173 = 0;
    LOBYTE(v175) = v175 & 0xC0;
    *((_QWORD *)&v175 + 1) = 0;
    v176 = 0uLL;
    v13 = v178;
    if (v178 >= v179)
    {
      v17 = sub_22E9D8E48((uint64_t *)&v177, (uint64_t)&v169);
    }
    else
    {
      v14 = v169;
      v15 = v170;
      *(_DWORD *)(v178 + 32) = v171;
      *(_OWORD *)v13 = v14;
      *(_OWORD *)(v13 + 16) = v15;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_QWORD *)(v13 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v13 + 40), v172, v173, 0x6DB6DB6DB6DB6DB7 * ((v173 - v172) >> 3));
      v16 = v176;
      *(_OWORD *)(v13 + 64) = v175;
      *(_OWORD *)(v13 + 80) = v16;
      v17 = v13 + 96;
    }
    v178 = v17;
    *(_QWORD *)v187 = &v172;
    sub_22E6C60B8((void ***)v187);
    *(_QWORD *)&v161 = 0;
    *((_QWORD *)&v161 + 1) = "inout";
    v162 = xmmword_22F469F50;
    v163 = 0;
    v166 = 0;
    v164 = 0;
    v165 = 0;
    LOBYTE(v167) = v167 & 0xC0;
    *((_QWORD *)&v167 + 1) = 0;
    v168 = 0uLL;
    v18 = v178;
    if (v178 >= v179)
    {
      v22 = sub_22E9D8E48((uint64_t *)&v177, (uint64_t)&v161);
    }
    else
    {
      v19 = v161;
      v20 = v162;
      *(_DWORD *)(v178 + 32) = v163;
      *(_OWORD *)v18 = v19;
      *(_OWORD *)(v18 + 16) = v20;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_QWORD *)(v18 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v18 + 40), v164, v165, 0x6DB6DB6DB6DB6DB7 * ((v165 - v164) >> 3));
      v21 = v168;
      *(_OWORD *)(v18 + 64) = v167;
      *(_OWORD *)(v18 + 80) = v21;
      v22 = v18 + 96;
    }
    v178 = v22;
    *(_QWORD *)v187 = &v164;
    sub_22E6C60B8((void ***)v187);
    v11 = *a3;
  }
  if ((v11 & 6) == 0)
  {
    *(_QWORD *)&v153 = 0;
    *((_QWORD *)&v153 + 1) = "out";
    v154 = xmmword_22F469F50;
    v155 = 0;
    v158 = 0;
    v156 = 0;
    v157 = 0;
    LOBYTE(v159) = v159 & 0xC0;
    *((_QWORD *)&v159 + 1) = 0;
    v160 = 0uLL;
    v23 = v178;
    if (v178 >= v179)
    {
      v27 = sub_22E9D8E48((uint64_t *)&v177, (uint64_t)&v153);
    }
    else
    {
      v24 = v153;
      v25 = v154;
      *(_DWORD *)(v178 + 32) = v155;
      *(_OWORD *)v23 = v24;
      *(_OWORD *)(v23 + 16) = v25;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_QWORD *)(v23 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v23 + 40), v156, v157, 0x6DB6DB6DB6DB6DB7 * ((v157 - v156) >> 3));
      v26 = v160;
      *(_OWORD *)(v23 + 64) = v159;
      *(_OWORD *)(v23 + 80) = v26;
      v27 = v23 + 96;
    }
    v178 = v27;
    *(_QWORD *)v187 = &v156;
    sub_22E6C60B8((void ***)v187);
    if (v12)
    {
      *(_QWORD *)&v145 = 0;
      *((_QWORD *)&v145 + 1) = "inout";
      v146 = xmmword_22F469F50;
      v147 = 0;
      v150 = 0;
      v148 = 0;
      v149 = 0;
      LOBYTE(v151) = v151 & 0xC0;
      *((_QWORD *)&v151 + 1) = 0;
      v152 = 0uLL;
      v28 = v178;
      if (v178 >= v179)
      {
        v32 = sub_22E9D8E48((uint64_t *)&v177, (uint64_t)&v145);
      }
      else
      {
        v29 = v145;
        v30 = v146;
        *(_DWORD *)(v178 + 32) = v147;
        *(_OWORD *)v28 = v29;
        *(_OWORD *)(v28 + 16) = v30;
        *(_QWORD *)(v28 + 48) = 0;
        *(_QWORD *)(v28 + 56) = 0;
        *(_QWORD *)(v28 + 40) = 0;
        sub_22E6C6020((_QWORD *)(v28 + 40), v148, v149, 0x6DB6DB6DB6DB6DB7 * ((v149 - v148) >> 3));
        v31 = v152;
        *(_OWORD *)(v28 + 64) = v151;
        *(_OWORD *)(v28 + 80) = v31;
        v32 = v28 + 96;
      }
      v178 = v32;
      *(_QWORD *)v187 = &v148;
      sub_22E6C60B8((void ***)v187);
    }
  }
  v33 = *a3;
  if ((*a3 & 0x38) == 0)
  {
    *(_QWORD *)&v137 = 0;
    *((_QWORD *)&v137 + 1) = "bycopy";
    v138 = xmmword_22F469F50;
    v139 = 0;
    v142 = 0;
    v140 = 0;
    v141 = 0;
    LOBYTE(v143) = v143 & 0xC0;
    *((_QWORD *)&v143 + 1) = 0;
    v144 = 0uLL;
    v34 = v178;
    if (v178 >= v179)
    {
      v38 = sub_22E9D8E48((uint64_t *)&v177, (uint64_t)&v137);
    }
    else
    {
      v35 = v137;
      v36 = v138;
      *(_DWORD *)(v178 + 32) = v139;
      *(_OWORD *)v34 = v35;
      *(_OWORD *)(v34 + 16) = v36;
      *(_QWORD *)(v34 + 48) = 0;
      *(_QWORD *)(v34 + 56) = 0;
      *(_QWORD *)(v34 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v34 + 40), v140, v141, 0x6DB6DB6DB6DB6DB7 * ((v141 - v140) >> 3));
      v37 = v144;
      *(_OWORD *)(v34 + 64) = v143;
      *(_OWORD *)(v34 + 80) = v37;
      v38 = v34 + 96;
    }
    v178 = v38;
    *(_QWORD *)v187 = &v140;
    sub_22E6C60B8((void ***)v187);
    *(_QWORD *)&v129 = 0;
    *((_QWORD *)&v129 + 1) = "byref";
    v130 = xmmword_22F469F50;
    v131 = 0;
    v134 = 0;
    v132 = 0;
    v133 = 0;
    LOBYTE(v135) = v135 & 0xC0;
    *((_QWORD *)&v135 + 1) = 0;
    v136 = 0uLL;
    v39 = v178;
    if (v178 >= v179)
    {
      v43 = sub_22E9D8E48((uint64_t *)&v177, (uint64_t)&v129);
    }
    else
    {
      v40 = v129;
      v41 = v130;
      *(_DWORD *)(v178 + 32) = v131;
      *(_OWORD *)v39 = v40;
      *(_OWORD *)(v39 + 16) = v41;
      *(_QWORD *)(v39 + 48) = 0;
      *(_QWORD *)(v39 + 56) = 0;
      *(_QWORD *)(v39 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v39 + 40), v132, v133, 0x6DB6DB6DB6DB6DB7 * ((v133 - v132) >> 3));
      v42 = v136;
      *(_OWORD *)(v39 + 64) = v135;
      *(_OWORD *)(v39 + 80) = v42;
      v43 = v39 + 96;
    }
    v178 = v43;
    *(_QWORD *)v187 = &v132;
    sub_22E6C60B8((void ***)v187);
    *(_QWORD *)&v121 = 0;
    *((_QWORD *)&v121 + 1) = "oneway";
    v122 = xmmword_22F469F50;
    v123 = 0;
    v126 = 0;
    v124 = 0;
    v125 = 0;
    LOBYTE(v127) = v127 & 0xC0;
    *((_QWORD *)&v127 + 1) = 0;
    v128 = 0uLL;
    v44 = v178;
    if (v178 >= v179)
    {
      v48 = sub_22E9D8E48((uint64_t *)&v177, (uint64_t)&v121);
    }
    else
    {
      v45 = v121;
      v46 = v122;
      *(_DWORD *)(v178 + 32) = v123;
      *(_OWORD *)v44 = v45;
      *(_OWORD *)(v44 + 16) = v46;
      *(_QWORD *)(v44 + 48) = 0;
      *(_QWORD *)(v44 + 56) = 0;
      *(_QWORD *)(v44 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v44 + 40), v124, v125, 0x6DB6DB6DB6DB6DB7 * ((v125 - v124) >> 3));
      v47 = v128;
      *(_OWORD *)(v44 + 64) = v127;
      *(_OWORD *)(v44 + 80) = v47;
      v48 = v44 + 96;
    }
    v178 = v48;
    *(_QWORD *)v187 = &v124;
    sub_22E6C60B8((void ***)v187);
    v33 = *a3;
  }
  if ((v33 & 0x40) == 0)
  {
    *(_QWORD *)&v115 = 0;
    *((_QWORD *)&v115 + 1) = "nonnull";
    v116 = xmmword_22F469F50;
    v117 = 0;
    *((_QWORD *)&v119 + 1) = 0;
    v120 = 0uLL;
    memset(v118, 0, sizeof(v118));
    LOBYTE(v119) = 0;
    v49 = v178;
    if (v178 >= v179)
    {
      v53 = sub_22E9D8E48((uint64_t *)&v177, (uint64_t)&v115);
    }
    else
    {
      v50 = v115;
      v51 = v116;
      *(_DWORD *)(v178 + 32) = v117;
      *(_OWORD *)v49 = v50;
      *(_OWORD *)(v49 + 16) = v51;
      *(_QWORD *)(v49 + 48) = 0;
      *(_QWORD *)(v49 + 56) = 0;
      *(_QWORD *)(v49 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v49 + 40), 0, 0, 0);
      v52 = v120;
      *(_OWORD *)(v49 + 64) = v119;
      *(_OWORD *)(v49 + 80) = v52;
      v53 = v49 + 96;
    }
    v178 = v53;
    *(_QWORD *)v187 = v118;
    sub_22E6C60B8((void ***)v187);
    *(_QWORD *)&v109 = 0;
    *((_QWORD *)&v109 + 1) = "nullable";
    v110 = xmmword_22F469F50;
    v111 = 0;
    memset(v112, 0, sizeof(v112));
    LOBYTE(v113) = 0;
    *((_QWORD *)&v113 + 1) = 0;
    v114 = 0uLL;
    v54 = v178;
    if (v178 >= v179)
    {
      v58 = sub_22E9D8E48((uint64_t *)&v177, (uint64_t)&v109);
    }
    else
    {
      v55 = v109;
      v56 = v110;
      *(_DWORD *)(v178 + 32) = v111;
      *(_OWORD *)v54 = v55;
      *(_OWORD *)(v54 + 16) = v56;
      *(_QWORD *)(v54 + 48) = 0;
      *(_QWORD *)(v54 + 56) = 0;
      *(_QWORD *)(v54 + 40) = 0;
      v57 = v114;
      *(_OWORD *)(v54 + 64) = v113;
      *(_OWORD *)(v54 + 80) = v57;
      v58 = v54 + 96;
    }
    v178 = v58;
    *(_QWORD *)v187 = v112;
    sub_22E6C60B8((void ***)v187);
    *(_QWORD *)&v103 = 0;
    *((_QWORD *)&v103 + 1) = "null_unspecified";
    v104 = xmmword_22F469F50;
    v105 = 0;
    memset(v106, 0, sizeof(v106));
    LOBYTE(v107) = 0;
    v108 = 0uLL;
    *((_QWORD *)&v107 + 1) = 0;
    v59 = v178;
    if (v178 >= v179)
    {
      v63 = sub_22E9D8E48((uint64_t *)&v177, (uint64_t)&v103);
    }
    else
    {
      v60 = v103;
      v61 = v104;
      *(_DWORD *)(v178 + 32) = v105;
      *(_OWORD *)v59 = v60;
      *(_OWORD *)(v59 + 16) = v61;
      *(_QWORD *)(v59 + 48) = 0;
      *(_QWORD *)(v59 + 56) = 0;
      *(_QWORD *)(v59 + 40) = 0;
      v62 = v108;
      *(_OWORD *)(v59 + 64) = v107;
      *(_OWORD *)(v59 + 80) = v62;
      v63 = v59 + 96;
    }
    v178 = v63;
    *(_QWORD *)v187 = v106;
    sub_22E6C60B8((void ***)v187);
    v33 = *a3;
  }
  if ((v33 & 0x7F) == 0 && (a4 & 1) == 0)
  {
    v64 = *(_QWORD *)(a1 + 80);
    v65 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v64 + 544), "IBAction", 8uLL);
    if (sub_22F2EE534(v64, v65))
    {
      *(_OWORD *)v187 = v180;
      memset(&v187[20], 0, 24);
      *(_DWORD *)&v187[16] = 40;
      v188 = 0;
      v189 = v191;
      v190 = (void *)0x400000000;
      v198 = v200;
      v199 = 0x200000000;
      sub_22E8A9AD8((uint64_t)v187, (uint64_t)"IBAction");
      sub_22E8A9D90((uint64_t)v187, 8, "");
      sub_22E8A9C00((uint64_t)v187, (uint64_t)"selector");
      sub_22E8A9D90((uint64_t)v187, 16, "");
      sub_22E8A9D90((uint64_t)v187, 7, "");
      sub_22E8A9B38((uint64_t)v187, (uint64_t)"id");
      sub_22E8A9D90((uint64_t)v187, 8, "");
      sub_22E8A9B38((uint64_t)v187, (uint64_t)"sender");
      *(_QWORD *)&v97 = 0;
      *((_QWORD *)&v97 + 1) = sub_22F2F28A4((uint64_t)v187);
      v98 = xmmword_22F469F30;
      v99 = 0;
      memset(v100, 0, sizeof(v100));
      LOBYTE(v101) = 0;
      v102 = 0uLL;
      *((_QWORD *)&v101 + 1) = 0;
      v66 = v178;
      if (v178 >= v179)
      {
        v70 = sub_22E9D8E48((uint64_t *)&v177, (uint64_t)&v97);
      }
      else
      {
        v67 = v97;
        v68 = v98;
        *(_DWORD *)(v178 + 32) = v99;
        *(_OWORD *)v66 = v67;
        *(_OWORD *)(v66 + 16) = v68;
        *(_QWORD *)(v66 + 48) = 0;
        *(_QWORD *)(v66 + 56) = 0;
        *(_QWORD *)(v66 + 40) = 0;
        v69 = v102;
        *(_OWORD *)(v66 + 64) = v101;
        *(_OWORD *)(v66 + 80) = v69;
        v70 = v66 + 96;
      }
      v178 = v70;
      v186 = (void **)v100;
      sub_22E6C60B8(&v186);
      if (v198 != v200)
        free(v198);
      if (v189 != v191)
        free(v189);
    }
  }
  if ((a4 & 1) == 0)
  {
    *(_QWORD *)&v91 = 0;
    *((_QWORD *)&v91 + 1) = "instancetype";
    v92 = xmmword_22F469F50;
    v93 = 0;
    memset(v94, 0, sizeof(v94));
    LOBYTE(v95) = 0;
    v96 = 0uLL;
    *((_QWORD *)&v95 + 1) = 0;
    v71 = v178;
    if (v178 >= v179)
    {
      v75 = sub_22E9D8E48((uint64_t *)&v177, (uint64_t)&v91);
    }
    else
    {
      v72 = v91;
      v73 = v92;
      *(_DWORD *)(v178 + 32) = v93;
      *(_OWORD *)v71 = v72;
      *(_OWORD *)(v71 + 16) = v73;
      *(_QWORD *)(v71 + 48) = 0;
      *(_QWORD *)(v71 + 56) = 0;
      *(_QWORD *)(v71 + 40) = 0;
      v74 = v96;
      *(_OWORD *)(v71 + 64) = v95;
      *(_OWORD *)(v71 + 80) = v74;
      v75 = v71 + 96;
    }
    v178 = v75;
    *(_QWORD *)v187 = v94;
    sub_22E6C60B8((void ***)v187);
  }
  sub_22E9B90C4();
  v76 = (uint64_t)v183;
  v77 = *v183;
  *(_QWORD *)(v77 + 8) = v183[1];
  **(_QWORD **)(v76 + 8) = v77;
  --v184;
  sub_22E9D8FB0(v76);
  v181 = sub_22E9B8728;
  v182 = 0;
  v78 = *(_QWORD *)(a1 + 216);
  memset(v90, 0, sizeof(v90));
  sub_22E9B8FE8((uint64_t)v187, (uint64_t)&v177, v78, 0, (uint64_t)v90);
  v186 = (void **)v90;
  sub_22E6C60B8(&v186);
  sub_22EC67A18((_QWORD *)a1, a2, 0, (uint64_t)v187, (*(_BYTE *)(*(_QWORD *)(a1 + 208) + 8) & 4) != 0, (*(_BYTE *)(*(_QWORD *)(a1 + 208) + 8) & 0x20) != 0);
  v79 = *(_QWORD *)(a1 + 208);
  v80 = *(unsigned __int8 *)(v79 + 8);
  if ((v80 & 1) != 0)
  {
    sub_22E9BE8B8(*(_QWORD *)(a1 + 80), (uint64_t *)&v177, (v80 >> 5) & 1, 0, 0);
    v79 = *(_QWORD *)(a1 + 208);
  }
  sub_22F2A4F2C((uint64_t)v84, v185);
  if ((char *)v178 == v177)
    v81 = 0;
  else
    v81 = v177;
  sub_22E9B83FC(a1, v79, v84, (uint64_t)v81, -1431655765 * ((v178 - (unint64_t)v177) >> 5));
  if (v89 != v88)
    free(v89);
  if (v87)
  {
    if (v86)
      free(v85);
    v87 = 0;
  }
  *(_QWORD *)v187 = off_24FAB7520;
  v186 = (void **)&v187[40];
  sub_22E6C60B8(&v186);
  return sub_22E9B8490(&v177);
}

uint64_t sub_22E9CF0DC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (sub_22E9CF13C(a1, a2))
    return 1;
  result = 0;
  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
  {
    result = sub_22E3CB5E0(a2);
    if ((_DWORD)result)
      return !sub_22E49C868(a2);
  }
  return result;
}

BOOL sub_22E9CF13C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v5;
  unsigned int v6;

  v3 = sub_22E9B4528(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 88), a2);
  if (v3 < 0x10)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)((sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 88), v3) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_DWORD *)(v5 + 16);
  if (v6 - 32 < 3)
    return 1;
  if (v6 == 11)
    return ((v6 >> 19) & 0x1FF) - 219 < 3;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 88) + 2000) + 1) & 1) == 0)
    return 0;
  if ((v6 & 0x400) != 0)
    return 1;
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45;
}

unint64_t sub_22E9CF1FC(uint64_t a1, int a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  _BYTE *v37;
  unsigned int *v38;
  unsigned int v39;
  _BYTE *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  _BYTE *v51;
  _DWORD *v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  _BYTE *v56;
  unsigned int *v57;
  unsigned int v58;
  _BYTE *v59;
  uint64_t v60;
  unint64_t v61;
  int *v62;
  unsigned int v63;
  _BYTE *v64;
  unint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  void **v79;
  uint64_t v80;
  const char *v81;
  __int16 v82;
  _OWORD v83[3];
  void *v84;
  uint64_t v85;
  _BYTE v86[64];
  void *v87;
  uint64_t v88;
  _QWORD v89[6];

  v89[3] = *MEMORY[0x24BDAC8D0];
  v9 = sub_22E90328C(a1);
  if (!v9)
    return 0;
  v10 = v9;
  v11 = sub_22EFDC9F0(v9);
  if (!v11)
    return 0;
  v14 = sub_22F3B46CC(v11);
  if (!v14)
    return 0;
  v15 = v14;
  do
  {
    v12 = sub_22EFDA1A0(v15, *(_QWORD *)(v10 + 40), (*(_QWORD *)(v10 + 56) >> 17) & 1, 0);
    if (!v12)
    {
      v16 = sub_22F257E10(v15);
      if (v16)
      {
        v17 = v16;
        while (1)
        {
          v18 = sub_22EFDA1A0(v17, *(_QWORD *)(v10 + 40), (*(_QWORD *)(v10 + 56) >> 17) & 1, 0);
          if (v18)
            break;
          v17 = *(_QWORD *)(v17 + 128);
          if (!v17)
            goto LABEL_12;
        }
        v12 = v18;
      }
      else
      {
LABEL_12:
        v12 = 0;
      }
    }
    v19 = sub_22F3B46CC(v15);
    v15 = v19;
    if (v12)
      v20 = 1;
    else
      v20 = v19 == 0;
  }
  while (!v20);
  if (v12)
  {
    v21 = *(unsigned int *)(v10 + 104);
    if ((_DWORD)v21 == *(_DWORD *)(v12 + 104)
      && ((*(unsigned __int8 *)(v10 + 58) ^ *(unsigned __int8 *)(v12 + 58)) & 4) == 0)
    {
      if ((_DWORD)v21)
      {
        v22 = *(_QWORD *)(v10 + 96);
        v23 = *(_QWORD *)(v12 + 96);
        v24 = 8 * v21;
        while (*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)v22 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)v23 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
        {
          if (*(_QWORD *)(*(_QWORD *)v22 + 40) < 8uLL || (*(_QWORD *)(*(_QWORD *)v22 + 40) & 7) != 0)
            break;
          v22 += 8;
          v23 += 8;
          v24 -= 8;
          if (!v24)
            goto LABEL_31;
        }
        return 0;
      }
LABEL_31:
      v83[0] = *(_OWORD *)(a5 + 192);
      memset(&v83[1], 0, 32);
      v84 = v86;
      v85 = 0x400000000;
      v87 = v89;
      v88 = 0x200000000;
      v26 = *(_QWORD *)(a1 + 88);
      v79 = (void **)(((*(_QWORD *)(*(_QWORD *)(v26 + 2000) + 100) >> 12) & 0x2000000 | sub_22E8FCD8C(v26, *(_QWORD *)(a1 + 80)) & 0xFFFFDFFFFDF9CFFFLL) ^ 0x200002043000);
      v80 = v27;
      sub_22E9B56BC(v26, (uint64_t)&v79, v12, *(_QWORD *)(a5 + 328), (uint64_t *)v83);
      if (a2)
      {
        sub_22E8A9AD8((uint64_t)v83, (uint64_t)"super");
        sub_22E8A9D90((uint64_t)v83, 19, "");
        v28 = *(_QWORD *)(v10 + 40);
        if ((v28 & 7) == 1)
        {
          v29 = v28 & 0xFFFFFFFFFFFFFFF8;
          if (v29)
          {
            v35 = *(unsigned int **)(v29 + 16);
            v36 = *v35;
            v29 = (unint64_t)(v35 + 4);
            v30 = v36;
          }
          else
          {
            v30 = 0;
          }
          v82 = 261;
          v79 = (void **)v29;
          v80 = v30;
          v37 = sub_22F2F27DC(*(uint64_t *)&v83[0], (const char **)&v79);
          sub_22E8A9B38((uint64_t)v83, (uint64_t)v37);
          goto LABEL_75;
        }
      }
      else
      {
        v28 = *(_QWORD *)(v10 + 40);
        if ((v28 & 7) == 1)
        {
          v31 = v28 & 0xFFFFFFFFFFFFFFF8;
          if (v31)
          {
            v38 = *(unsigned int **)(v31 + 16);
            v39 = *v38;
            v31 = (unint64_t)(v38 + 4);
            v32 = v39;
          }
          else
          {
            v32 = 0;
          }
          v82 = 261;
          v79 = (void **)v31;
          v80 = v32;
          v40 = sub_22F2F27DC(*(uint64_t *)&v83[0], (const char **)&v79);
          sub_22E8A9AD8((uint64_t)v83, (uint64_t)v40);
          goto LABEL_75;
        }
      }
      if ((v28 & 7u) >= 2)
      {
        v33 = (_DWORD *)(v28 & 0xFFFFFFFFFFFFFFF8);
        if ((v28 & 7) == 2)
        {
          v34 = 1;
          goto LABEL_46;
        }
        v34 = *v33 - 3;
        if (*v33 != 3)
        {
LABEL_46:
          v41 = 0;
          v42 = v34;
          v70 = *(_QWORD *)(v10 + 96);
          v43 = v28 & 7;
          v44 = v33 + 4;
          do
          {
            if (a4 < v41)
              sub_22E8A9D90((uint64_t)v83, 19, "");
            if (a4 <= v41)
            {
              if (a4 < v41 || a2)
              {
                v52 = v33;
                if (v43 == 7)
                  v52 = *(_DWORD **)&v44[2 * v41];
                if (v52)
                {
                  v57 = (unsigned int *)*((_QWORD *)v52 + 2);
                  v58 = *v57;
                  v52 = v57 + 4;
                  v53 = v58;
                }
                else
                {
                  v53 = 0;
                }
                v82 = 773;
                v79 = (void **)v52;
                v80 = v53;
                v81 = ":";
                v59 = sub_22F2F27DC(*(uint64_t *)&v83[0], (const char **)&v79);
                sub_22E8A9B38((uint64_t)v83, (uint64_t)v59);
              }
              else
              {
                v47 = v33;
                if (v43 == 7)
                  v47 = *(_DWORD **)&v44[2 * v41];
                if (v47)
                {
                  v54 = (unsigned int *)*((_QWORD *)v47 + 2);
                  v55 = *v54;
                  v47 = v54 + 4;
                  v48 = v55;
                }
                else
                {
                  v48 = 0;
                }
                v82 = 773;
                v79 = (void **)v47;
                v80 = v48;
                v81 = ":";
                v56 = sub_22F2F27DC(*(uint64_t *)&v83[0], (const char **)&v79);
                sub_22E8A9AD8((uint64_t)v83, (uint64_t)v56);
              }
              v60 = *(_QWORD *)(*(_QWORD *)(v70 + 8 * v41) + 40);
              if ((v60 & 7) != 0)
                v61 = 0;
              else
                v61 = v60 & 0xFFFFFFFFFFFFFFF8;
              v62 = *(int **)(v61 + 16);
              v63 = *v62;
              v82 = 261;
              v79 = (void **)(v62 + 4);
              v80 = v63;
              v64 = sub_22F2F27DC(*(uint64_t *)&v83[0], (const char **)&v79);
              sub_22E8A9C00((uint64_t)v83, (uint64_t)v64);
            }
            else
            {
              v45 = v33;
              if (v43 == 7)
                v45 = *(_DWORD **)&v44[2 * v41];
              if (v45)
              {
                v49 = (unsigned int *)*((_QWORD *)v45 + 2);
                v50 = *v49;
                v45 = v49 + 4;
                v46 = v50;
              }
              else
              {
                v46 = 0;
              }
              v82 = 773;
              v79 = (void **)v45;
              v80 = v46;
              v81 = ":";
              v51 = sub_22F2F27DC(*(uint64_t *)&v83[0], (const char **)&v79);
              sub_22E8A9C64((uint64_t)v83, (uint64_t)v51);
            }
            ++v41;
          }
          while (v42 != v41);
        }
      }
LABEL_75:
      *(_QWORD *)&v71 = v12;
      *((_QWORD *)&v71 + 1) = sub_22F2F28A4((uint64_t)v83);
      *(_QWORD *)&v72 = 20;
      DWORD2(v72) = 3;
      v73 = 0;
      v75 = 0;
      v76 = 0;
      v74 = 0;
      LOBYTE(v77) = v77 & 0xC0;
      v78 = 0uLL;
      *((_QWORD *)&v77 + 1) = 0;
      sub_22E8AB5B4((uint64_t)&v71, 1);
      v65 = *(_QWORD *)(a5 + 8);
      if (v65 >= *(_QWORD *)(a5 + 16))
      {
        v69 = sub_22E9D8E48((uint64_t *)a5, (uint64_t)&v71);
      }
      else
      {
        v66 = v71;
        v67 = v72;
        *(_DWORD *)(v65 + 32) = v73;
        *(_OWORD *)v65 = v66;
        *(_OWORD *)(v65 + 16) = v67;
        *(_QWORD *)(v65 + 48) = 0;
        *(_QWORD *)(v65 + 56) = 0;
        *(_QWORD *)(v65 + 40) = 0;
        sub_22E6C6020((_QWORD *)(v65 + 40), v74, v75, 0x6DB6DB6DB6DB6DB7 * ((v75 - v74) >> 3));
        v68 = v78;
        *(_OWORD *)(v65 + 64) = v77;
        *(_OWORD *)(v65 + 80) = v68;
        v69 = v65 + 96;
      }
      *(_QWORD *)(a5 + 8) = v69;
      v79 = (void **)&v74;
      sub_22E6C60B8(&v79);
      if (v87 != v89)
        free(v87);
      if (v84 != v86)
        free(v84);
      return v12;
    }
    return 0;
  }
  return v12;
}

unint64_t sub_22E9CF7B8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;

  if (a2 == a1)
    v3 = 0;
  else
    v3 = a1;
  v4 = -1431655765 * ((unint64_t)(a2 - a1) >> 5);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (unsigned int *)(v3 + 16);
    v7 = 160;
    while (1)
    {
      if (!v6[2]
        && (v8 = *((_QWORD *)v6 - 2), (*(_DWORD *)(v8 + 28) & 0x7F) == 0x18)
        && (v9 = *v6, v9 <= v7)
        && *(_DWORD *)(v8 + 104) >= a3)
      {
        result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 96) + 8 * (a3 - 1)) + 48);
        if (v9 < v7 || v5 < 0x10)
          goto LABEL_12;
        if (*(_QWORD *)(*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((result & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
          result = v5;
        else
          result = 0;
      }
      else
      {
        result = v5;
      }
      v9 = v7;
LABEL_12:
      v6 += 24;
      v7 = v9;
      v5 = result;
      if (!--v4)
        return result;
    }
  }
  return 0;
}

void sub_22E9CF888(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void ***v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  _DWORD *v45;
  int v46;
  BOOL v47;
  unint64_t v48;
  int v49;
  BOOL v50;
  uint64_t v51;
  BOOL v52;
  char v54;
  int v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  void **v70;
  int v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  llvm *v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _OWORD v96[2];
  int v97;
  _QWORD v98[3];
  __int128 v99;
  __int128 v100;
  unsigned __int8 v101;
  _OWORD v102[2];
  int v103;
  _QWORD v104[3];
  __int128 v105;
  __int128 v106;
  _QWORD v107[3];
  __int128 v108;
  __int128 v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  void **v116;
  void **v117[2];

  if (*(_DWORD *)(a2 + 24))
  {
    v5 = a1[1];
    if (v5 >= a1[2])
    {
      v9 = sub_22E9D8E48(a1, a2);
    }
    else
    {
      v6 = *(_OWORD *)a2;
      v7 = *(_OWORD *)(a2 + 16);
      *(_DWORD *)(v5 + 32) = *(_DWORD *)(a2 + 32);
      *(_OWORD *)v5 = v6;
      *(_OWORD *)(v5 + 16) = v7;
      *(_QWORD *)(v5 + 48) = 0;
      *(_QWORD *)(v5 + 56) = 0;
      *(_QWORD *)(v5 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v5 + 40), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
      v8 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(v5 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(v5 + 80) = v8;
      v9 = v5 + 96;
    }
    a1[1] = v9;
    return;
  }
  v11 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 && (*(_DWORD *)(v11 + 28) & 0x7E) == 0x2E)
  {
    v12 = *(_QWORD *)(v11 + 64);
    v13 = sub_22E9C5678(v12);
    v14 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)&v108 = v12;
    LODWORD(v109) = v13;
    *(_QWORD *)((char *)&v109 + 4) = 0;
    v110 = 0;
    v112 = 0;
    v113 = 0;
    v111 = 0;
    memset(v107, 0, sizeof(v107));
    LOBYTE(v114) = 0;
    v115 = 0uLL;
    *((_QWORD *)&v114 + 1) = v14;
    sub_22E8AB5B4((uint64_t)&v108, 1);
    v117[0] = (void **)v107;
    sub_22E6C60B8(v117);
    *(_QWORD *)&v115 = v11;
    v102[0] = v108;
    v102[1] = v109;
    v103 = v110;
    memset(v104, 0, sizeof(v104));
    sub_22E6C6020(v104, v111, v112, 0x6DB6DB6DB6DB6DB7 * ((v112 - v111) >> 3));
    v105 = v114;
    v106 = v115;
    sub_22E9CF888(a1, v102, a3);
    v117[0] = (void **)v104;
    sub_22E6C60B8(v117);
    v117[0] = (void **)&v111;
    v15 = v117;
    goto LABEL_7;
  }
  v16 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v11 + 32))(*(_QWORD *)a2);
  v17 = v16[7];
  v101 = 0;
  if (sub_22E9DC850((uint64_t)a1, *(_QWORD *)a2, &v101))
  {
    v18 = *(_QWORD *)a2;
    v19 = *(_DWORD *)(*(_QWORD *)a2 + 28) & 0x7F;
    if (*(_QWORD *)a2 && v19 == 29)
      v19 = *(_DWORD *)(*(_QWORD *)(v18 + 48) + 28) & 0x7F;
    if (v19 != 55)
    {
      v20 = a1[30];
      v21 = *(_QWORD *)(v18 + 40);
      *(_QWORD *)&v108 = 0;
      if (sub_22E9F2DA8(*(_QWORD *)(v20 + 16), *(_DWORD *)(v20 + 32), v21, &v108))
      {
        v22 = v108;
        v23 = *(_QWORD *)(v20 + 16);
        v24 = *(_DWORD *)(v20 + 32);
      }
      else
      {
        v23 = *(_QWORD *)(v20 + 16);
        v24 = *(_DWORD *)(v20 + 32);
        v22 = v23 + 24 * v24;
      }
      if (v22 == v23 + 24 * v24 || (v25 = *(_QWORD *)(v22 + 8), v25 < 8))
      {
        v26 = 0;
        v27 = 0;
        v28 = 0;
      }
      else
      {
        v27 = v25 & 0xFFFFFFFFFFFFFFF8;
        if ((v25 & 4) != 0 || !v27)
        {
          if ((v25 & 4) != 0)
          {
            v28 = 0;
            v26 = (*(_QWORD *)v27 + 16 * *(unsigned int *)(v27 + 8)) | 4;
          }
          else
          {
            v26 = 0;
            v28 = 0;
          }
          v27 = *(_QWORD *)v27 | 4;
        }
        else
        {
          v26 = 0;
          v28 = *(_DWORD *)(v22 + 16);
        }
      }
      v95 = v20;
      if (v27 != v26 || (v29 = v20, v28))
      {
        do
        {
          v32 = v27 & 0xFFFFFFFFFFFFFFF8;
          if ((v27 & 4) != 0 || !v32)
          {
            v34 = *(_QWORD *)v32;
            v33 = *(_DWORD *)(v32 + 8);
          }
          else
          {
            v33 = v28;
            v34 = v27 & 0xFFFFFFFFFFFFFFF8;
          }
          if ((_DWORD *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v34 + 32))(v34) == v16)
          {
            *(_QWORD *)(*a1 + 96 * v33) = *(_QWORD *)a2;
            return;
          }
          v30 = (v27 & 4) == 0;
          if ((v27 & 4) != 0)
            v27 = (v32 + 16) | 4;
          else
            v27 = 0;
          if (v30)
            v28 = 0;
        }
        while (v27 != v26 || v28 != 0);
        v29 = a1[30];
      }
      v35 = a1[31];
      if (v35 == v29)
        goto LABEL_95;
      v36 = v17 & 0x8680000;
      while (1)
      {
        v37 = *(_QWORD *)(*(_QWORD *)a2 + 40);
        *(_QWORD *)&v108 = 0;
        if (sub_22E9F2DA8(*(_QWORD *)(v35 + 16), *(_DWORD *)(v35 + 32), v37, &v108))
        {
          v38 = v108;
          v39 = *(_QWORD *)(v35 + 16);
          v40 = *(_DWORD *)(v35 + 32);
        }
        else
        {
          v39 = *(_QWORD *)(v35 + 16);
          v40 = *(_DWORD *)(v35 + 32);
          v38 = v39 + 24 * v40;
        }
        if (v38 == v39 + 24 * v40 || (v41 = *(_QWORD *)(v38 + 8), v41 < 8))
        {
          v42 = 0;
          v43 = 0;
          v44 = 0;
        }
        else
        {
          v43 = v41 & 0xFFFFFFFFFFFFFFF8;
          if ((v41 & 4) != 0 || !v43)
          {
            if ((v41 & 4) != 0)
            {
              v44 = 0;
              v42 = (*(_QWORD *)v43 + 16 * *(unsigned int *)(v43 + 8)) | 4;
            }
            else
            {
              v42 = 0;
              v44 = 0;
            }
            v43 = *(_QWORD *)v43 | 4;
          }
          else
          {
            v42 = 0;
            v44 = *(_DWORD *)(v38 + 16);
          }
        }
        if (v43 == v42 && !v44)
          goto LABEL_91;
        while (1)
        {
          v45 = (_DWORD *)(v43 & 0xFFFFFFFFFFFFFFF8);
          if ((v43 & 4) == 0)
          {
            if (v45)
              break;
          }
          v48 = *(_QWORD *)v45;
          v49 = *(_DWORD *)(*(_QWORD *)v45 + 28);
          v50 = (v49 & 0x3EFF0000) != 0x60000 || v36 == 0;
          if (v50 && (((v49 | v17) & 0x400000) == 0 || ((v49 ^ v17) & 0x3FFF0000) == 0))
            goto LABEL_90;
LABEL_72:
          v51 = (unint64_t)(v45 + 4) | 4;
          v52 = (v43 & 4) == 0;
          if ((v43 & 4) != 0)
            v43 = v51;
          else
            v43 = 0;
          if (v52)
            v44 = 0;
          if (v43 == v42 && v44 == 0)
            goto LABEL_91;
        }
        v46 = v45[7];
        v47 = (v46 & 0x3EFF0000) != 0x60000 || v36 == 0;
        if (!v47 || ((v46 | v17) & 0x400000) != 0 && ((v46 ^ v17) & 0x3FFF0000) != 0)
          goto LABEL_72;
        v48 = v43 & 0xFFFFFFFFFFFFFFF8;
LABEL_90:
        if ((sub_22E9DCA94((uint64_t)a1, (uint64_t *)a2, a3, v48) & 1) != 0)
          return;
LABEL_91:
        v35 = *(_QWORD *)(v35 + 8);
        if (v35 == v29)
        {
LABEL_95:
          sub_22E3BA850((uint64_t)(a1 + 3), v16);
          if (v54)
          {
            v55 = v101;
            if (v101)
            {
              v56 = *(_BYTE *)(a2 + 64) | 8;
              *(_BYTE *)(a2 + 64) = v56;
              *(_DWORD *)(a2 + 16) = 75;
            }
            else
            {
              sub_22E9DCB9C((unint64_t)a1, (_DWORD *)a2);
              v56 = *(_BYTE *)(a2 + 64);
            }
            v57 = v95;
            v58 = a2 + 64;
            if ((v56 & 4) != 0 && (v56 & 8) == 0 && !*(_QWORD *)(a2 + 72))
            {
              v59 = *(_QWORD *)(*(_QWORD *)a2 + 16);
              v60 = v59 & 0xFFFFFFFFFFFFFFF8;
              if ((v59 & 4) != 0)
                v60 = *(_QWORD *)v60;
              v61 = *(_WORD *)(v60 + 8) & 0x7F;
              if (v60 && v61 == 16)
              {
                v62 = *(_QWORD *)(a1[23] + 88);
                v108 = xmmword_22F45EEF0;
                *(_QWORD *)&v109 = v60 - 48;
                goto LABEL_116;
              }
              if (v60 && (v61 - 38) >= 0xFFFFFFFB)
              {
                v63 = a1[23];
                v64 = *(_QWORD *)(v63 + 88);
                v65 = *(_QWORD *)(v60 - 16);
                if (!v65)
                  v65 = sub_22EF6462C(*(_QWORD *)(v63 + 88), v60 - 64);
                v66 = *(_QWORD *)(v65 & 0xFFFFFFFFFFFFFFF0);
                v108 = xmmword_22F4559B0;
                *(_QWORD *)&v109 = v66;
                v62 = v64;
LABEL_116:
                *(_QWORD *)(a2 + 72) = sub_22F0AA9D0(v62, (uint64_t)&v108);
              }
              else
              {
                *(_BYTE *)v58 = v56 & 0xFB;
              }
            }
            v67 = *(_QWORD *)a2;
            v68 = *(_QWORD *)(*(_QWORD *)a2 + 40);
            v116 = 0;
            v69 = sub_22E9F2DA8(*(_QWORD *)(v95 + 16), *(_DWORD *)(v95 + 32), v68, &v116);
            v70 = v116;
            if ((v69 & 1) == 0)
            {
              v117[0] = v116;
              v71 = *(_DWORD *)(v95 + 24);
              v72 = *(unsigned int *)(v95 + 32);
              if (4 * v71 + 4 >= (3 * v72))
              {
                v73 = 2 * v72;
              }
              else
              {
                v73 = *(_DWORD *)(v95 + 32);
                if ((int)v72 + ~v71 - *(_DWORD *)(v95 + 28) > v72 >> 3)
                  goto LABEL_121;
              }
              v81 = *(llvm **)(v95 + 16);
              v82 = (v73 - 1) | ((unint64_t)(v73 - 1) >> 1);
              v83 = v82 | (v82 >> 2) | ((v82 | (v82 >> 2)) >> 4);
              v84 = ((v83 | (v83 >> 8)) >> 16) | v83 | (v83 >> 8);
              if ((v84 + 1) > 0x40)
                v85 = (v84 + 1);
              else
                v85 = 64;
              *(_DWORD *)(v95 + 32) = v85;
              v86 = MEMORY[0x23489D23C]((_QWORD *)v85, 24 * v85, 8);
              *(_QWORD *)(v95 + 16) = v86;
              if (v81)
              {
                *(_QWORD *)(v95 + 24) = 0;
                v87 = *(unsigned int *)(v95 + 32);
                if ((_DWORD)v87)
                {
                  v88 = 24 * v87;
                  do
                  {
                    *v86 = -1;
                    v86 += 3;
                    v88 -= 24;
                  }
                  while (v88);
                }
                if ((_DWORD)v72)
                {
                  v89 = 24 * v72;
                  v90 = (char *)v81 + 8;
                  do
                  {
                    v91 = *((_QWORD *)v90 - 1);
                    if (v91 <= 0xFFFFFFFFFFFFFFFDLL)
                    {
                      *(_QWORD *)&v108 = 0;
                      sub_22E9F2DA8(*(_QWORD *)(v95 + 16), *(_DWORD *)(v95 + 32), v91, &v108);
                      v92 = v108;
                      *(_QWORD *)v108 = v91;
                      *(_QWORD *)(v92 + 8) = 0;
                      *(_DWORD *)(v92 + 16) = *((_DWORD *)v90 + 2);
                      *(_QWORD *)(v92 + 8) = *(_QWORD *)v90;
                      *(_QWORD *)v90 = 0;
                      ++*(_DWORD *)(v95 + 24);
                      sub_22E9D9024((uint64_t *)v90);
                    }
                    v90 += 24;
                    v89 -= 24;
                  }
                  while (v89);
                }
                llvm::deallocate_buffer(v81, (void *)(24 * v72));
                v86 = *(_QWORD **)(v95 + 16);
                LODWORD(v93) = *(_DWORD *)(v95 + 32);
              }
              else
              {
                *(_QWORD *)(v95 + 24) = 0;
                v93 = *(unsigned int *)(v95 + 32);
                if ((_DWORD)v93)
                {
                  v94 = 0;
                  do
                  {
                    v86[v94] = -1;
                    v94 += 3;
                  }
                  while (3 * v93 != v94);
                }
              }
              sub_22E9F2DA8((uint64_t)v86, v93, v68, v117);
              v57 = v95;
              v71 = *(_DWORD *)(v95 + 24);
              v70 = v117[0];
              v58 = a2 + 64;
LABEL_121:
              *(_DWORD *)(v57 + 24) = v71 + 1;
              if (*v70 != (void *)-1)
                --*(_DWORD *)(v57 + 28);
              *v70 = (void *)v68;
              v70[1] = 0;
              *((_DWORD *)v70 + 4) = 0;
              v67 = *(_QWORD *)a2;
            }
            sub_22E9DCCD8((uint64_t)(v70 + 1), v67, -1431655765 * ((unint64_t)(a1[1] - *a1) >> 5));
            v74 = a1[1];
            if (v74 >= a1[2])
            {
              v78 = sub_22E9D8E48(a1, a2);
            }
            else
            {
              v75 = *(_OWORD *)a2;
              v76 = *(_OWORD *)(a2 + 16);
              *(_DWORD *)(v74 + 32) = *(_DWORD *)(a2 + 32);
              *(_OWORD *)v74 = v75;
              *(_OWORD *)(v74 + 16) = v76;
              *(_QWORD *)(v74 + 48) = 0;
              *(_QWORD *)(v74 + 56) = 0;
              *(_QWORD *)(v74 + 40) = 0;
              sub_22E6C6020((_QWORD *)(v74 + 40), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
              v77 = *(_OWORD *)(v58 + 16);
              *(_OWORD *)(v74 + 64) = *(_OWORD *)v58;
              *(_OWORD *)(v74 + 80) = v77;
              v78 = v74 + 96;
            }
            a1[1] = v78;
            if (!v55)
            {
              v79 = *(_OWORD *)(a2 + 16);
              v96[0] = *(_OWORD *)a2;
              v96[1] = v79;
              v97 = *(_DWORD *)(a2 + 32);
              memset(v98, 0, sizeof(v98));
              sub_22E6C6020(v98, *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
              v80 = *(_OWORD *)(v58 + 16);
              v99 = *(_OWORD *)v58;
              v100 = v80;
              sub_22E9DCDB4((unint64_t)a1, (uint64_t)v96);
              *(_QWORD *)&v108 = v98;
              v15 = (void ***)&v108;
LABEL_7:
              sub_22E6C60B8(v15);
            }
          }
          return;
        }
      }
    }
  }
}

char **sub_22E9D0150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void **v24;
  unsigned int v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::string::size_type size;
  _DWORD *v41;
  _DWORD *v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  unsigned int v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63[3];
  void *v64;
  int v65;
  char v66;
  void *v67;
  void *v68;
  __int128 v69;
  __int128 v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  std::string v77;
  __int128 v78;
  __int128 v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  void **v86[4];
  __int16 v87;
  char *v88;
  unint64_t v89;
  unint64_t v90;
  __int128 v91;
  _QWORD *v92;
  uint64_t v93;
  __int128 v94[11];
  _BYTE v95[48];
  void *v96;
  void *v97;
  _DWORD v98[2];
  char v99;
  _BYTE *v100;
  void *v101;
  uint64_t v102;
  int v103;
  _BYTE v104[16];
  void *v105;
  uint64_t v106;
  _QWORD v107[8];

  v6 = a1;
  v107[5] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    if (v8)
    {
      v57 = v8;
      v58 = 0;
      do
      {
        v59 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 8) + 24))(*(_QWORD *)(v6 + 8), v58);
        if (v59)
        {
          v60 = v59;
          *(_QWORD *)v95 = v59;
          v88 = 0;
          if ((sub_22F2BB328((uint64_t *)(v6 + 8560), v95, &v88) & 1) == 0)
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 8) + 232))(*(_QWORD *)(v6 + 8), v60);
        }
        v58 = (v58 + 1);
      }
      while (v57 != (_DWORD)v58);
    }
  }
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 208) + 40))(*(_QWORD *)(v6 + 208));
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 208) + 48))(*(_QWORD *)(v6 + 208));
  *(_DWORD *)v95 = 27;
  v95[4] = 0;
  v99 = 0;
  memset(&v95[8], 0, 33);
  v100 = v104;
  v101 = v104;
  v102 = 8;
  v103 = 0;
  sub_22E9B831C((uint64_t)&v88, v6, v9, v10, (__int128 *)v95, 0, 0);
  if (v101 != v100)
    free(v101);
  if (v99 && v98[1])
    free(v97);
  v11 = operator new(0x28uLL);
  v11[2] = 0;
  v11[3] = 0;
  *((_DWORD *)v11 + 8) = 0;
  v12 = v92;
  *v11 = v92;
  v11[1] = &v92;
  v12[1] = v11;
  v13 = v93;
  v92 = v11;
  ++v93;
  v14 = *(_QWORD *)(v6 + 8560);
  v15 = *(unsigned int *)(v6 + 8576);
  v16 = (uint64_t *)(v14 + 40 * v15);
  if (*(_DWORD *)(v6 + 8568))
  {
    if ((_DWORD)v15)
    {
      v61 = 40 * v15;
      v17 = *(uint64_t **)(v6 + 8560);
      while ((unint64_t)*v17 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v17 += 5;
        v61 -= 40;
        if (!v61)
          goto LABEL_9;
      }
    }
    else
    {
      v17 = *(uint64_t **)(v6 + 8560);
    }
  }
  else
  {
LABEL_9:
    v17 = (uint64_t *)(v14 + 40 * v15);
  }
  v18 = (uint64_t *)(v14 + 40 * v15);
  if (v17 == v18)
    goto LABEL_58;
  v62 = v6;
  do
  {
    v19 = *v17;
    if (sub_22E9D0854(*v17, 0, a3, a4, 1))
    {
      *(_OWORD *)v95 = v91;
      memset(&v95[16], 0, 32);
      v96 = v98;
      v97 = (void *)0x400000000;
      v105 = v107;
      v106 = 0x200000000;
      v22 = v19 & 7;
      if (v22 == 1)
      {
        v23 = v19 & 0xFFFFFFFFFFFFFFF8;
        if ((v19 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v29 = *(unsigned int **)(v23 + 16);
          v30 = *v29;
          v23 = (unint64_t)(v29 + 4);
          v24 = (void **)v30;
        }
        else
        {
          v24 = 0;
        }
        v87 = 261;
        v86[0] = (void **)v23;
        v86[1] = v24;
        v31 = sub_22F2F27DC(v91, (const char **)v86);
        sub_22E8A9AD8((uint64_t)v95, (uint64_t)v31);
        v32 = sub_22F2F28A4((uint64_t)v95);
        *(_QWORD *)&v78 = 0;
        *((_QWORD *)&v78 + 1) = v32;
        v79 = xmmword_22F469F30;
        v80 = 0;
        v82 = 0;
        v83 = 0;
        v81 = 0;
        LOBYTE(v84) = v84 & 0xC0;
        v85 = 0uLL;
        *((_QWORD *)&v84 + 1) = 0;
        v33 = v89;
        if (v89 >= v90)
        {
          v37 = sub_22E9D8E48((uint64_t *)&v88, (uint64_t)&v78);
        }
        else
        {
          v34 = v78;
          v35 = v79;
          *(_DWORD *)(v89 + 32) = v80;
          *(_OWORD *)v33 = v34;
          *(_OWORD *)(v33 + 16) = v35;
          *(_QWORD *)(v33 + 40) = 0;
          *(_QWORD *)(v33 + 48) = 0;
          *(_QWORD *)(v33 + 56) = 0;
          sub_22E6C6020((_QWORD *)(v33 + 40), v81, v82, 0x6DB6DB6DB6DB6DB7 * ((v82 - v81) >> 3));
          v36 = v85;
          *(_OWORD *)(v33 + 64) = v84;
          *(_OWORD *)(v33 + 80) = v36;
          v37 = v33 + 96;
        }
        v89 = v37;
        v86[0] = (void **)&v81;
        sub_22E6C60B8(v86);
LABEL_54:
        if (v105 != v107)
          free(v105);
        if (v96 != v98)
          free(v96);
        goto LABEL_15;
      }
      memset(&v77, 0, sizeof(v77));
      v25 = v19 & 7;
      v26 = v91;
      if (v25 >= 2)
      {
        v27 = (_DWORD *)(v19 & 0xFFFFFFFFFFFFFFF8);
        if (v25 == 2)
        {
          v28 = 1;
          goto LABEL_34;
        }
        v28 = *v27 - 3;
        if (*v27 != 3)
        {
LABEL_34:
          v38 = 0;
          v39 = v28;
          do
          {
            if (a4 == v38)
            {
              size = *((_BYTE *)&v77.__r_.__value_.__s + 23) & 0x7F;
              if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                size = v77.__r_.__value_.__l.__size_;
              if (size)
              {
                v87 = 260;
                v86[0] = (void **)&v77;
                v46 = sub_22F2F27DC(*(uint64_t *)v95, (const char **)v86);
                sub_22E8A9C64((uint64_t)v95, (uint64_t)v46);
                if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
                {
                  *v77.__r_.__value_.__l.__data_ = 0;
                  v77.__r_.__value_.__l.__size_ = 0;
                }
                else
                {
                  v77.__r_.__value_.__s.__data_[0] = 0;
                  *((_BYTE *)&v77.__r_.__value_.__s + 23) = 0;
                }
              }
            }
            v41 = v27;
            if (v22 == 7)
              v41 = *(_DWORD **)&v27[2 * v38 + 4];
            if (v41)
            {
              v42 = (_DWORD *)*((_QWORD *)v41 + 2);
              v45 = *v42;
              v43 = (const std::string::value_type *)(v42 + 4);
              v44 = v45;
            }
            else
            {
              v43 = 0;
              v44 = 0;
            }
            std::string::append(&v77, v43, v44);
            std::string::push_back(&v77, 58);
            ++v38;
          }
          while (v39 != v38);
          v26 = *(_QWORD *)v95;
          v6 = v62;
        }
      }
      v87 = 260;
      v86[0] = (void **)&v77;
      v47 = sub_22F2F27DC(v26, (const char **)v86);
      sub_22E8A9AD8((uint64_t)v95, (uint64_t)v47);
      v48 = sub_22F2F28A4((uint64_t)v95);
      *(_QWORD *)&v69 = 0;
      *((_QWORD *)&v69 + 1) = v48;
      v70 = xmmword_22F469F30;
      v71 = 0;
      v73 = 0;
      v74 = 0;
      v72 = 0;
      LOBYTE(v75) = v75 & 0xC0;
      v76 = 0uLL;
      *((_QWORD *)&v75 + 1) = 0;
      v49 = v89;
      if (v89 >= v90)
      {
        v53 = sub_22E9D8E48((uint64_t *)&v88, (uint64_t)&v69);
      }
      else
      {
        v50 = v69;
        v51 = v70;
        *(_DWORD *)(v89 + 32) = v71;
        *(_OWORD *)v49 = v50;
        *(_OWORD *)(v49 + 16) = v51;
        *(_QWORD *)(v49 + 40) = 0;
        *(_QWORD *)(v49 + 48) = 0;
        *(_QWORD *)(v49 + 56) = 0;
        sub_22E6C6020((_QWORD *)(v49 + 40), v72, v73, 0x6DB6DB6DB6DB6DB7 * ((v73 - v72) >> 3));
        v52 = v76;
        *(_OWORD *)(v49 + 64) = v75;
        *(_OWORD *)(v49 + 80) = v52;
        v53 = v49 + 96;
      }
      v89 = v53;
      v86[0] = (void **)&v72;
      sub_22E6C60B8(v86);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      goto LABEL_54;
    }
LABEL_15:
    v20 = (unint64_t *)(v17 + 5);
    while (v20 != (unint64_t *)v16)
    {
      v21 = *v20;
      v20 += 5;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v17 = (uint64_t *)(v20 - 5);
        goto LABEL_20;
      }
    }
    v17 = v16;
LABEL_20:
    ;
  }
  while (v17 != v18);
  v11 = v92;
  v12 = (_QWORD *)*v92;
  v13 = v93 - 1;
LABEL_58:
  v12[1] = v11[1];
  *(_QWORD *)v11[1] = v12;
  v93 = v13;
  sub_22E9D8FB0((uint64_t)v11);
  v54 = *(_QWORD *)(v6 + 208);
  sub_22F2A4F2C((uint64_t)v63, v94);
  if ((char *)v89 == v88)
    v55 = 0;
  else
    v55 = v88;
  sub_22E9B83FC(v6, v54, v63, (uint64_t)v55, -1431655765 * ((v89 - (unint64_t)v88) >> 5));
  if (v68 != v67)
    free(v68);
  if (v66)
  {
    if (v65)
      free(v64);
    v66 = 0;
  }
  return sub_22E9B8490(&v88);
}

BOOL sub_22E9D0854(uint64_t a1, int a2, uint64_t a3, unsigned int a4, char a5)
{
  unsigned int v5;
  unsigned int v6;
  _BOOL8 result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v5 = a1 & 7;
  if (v5 >= 2)
  {
    if (v5 == 2)
      v6 = 1;
    else
      v6 = *(_DWORD *)(a1 & 0xFFFFFFFFFFFFFFF8) - 3;
  }
  else
  {
    v6 = 0;
  }
  if (v6 < a4)
    return 0;
  if (a2 == 2)
  {
    if (v5 < 2)
      return 0;
    if (v5 != 2)
      return *(_DWORD *)(a1 & 0xFFFFFFFFFFFFFFF8) == 4;
    return 1;
  }
  if (a2 == 1)
    return (a1 & 7) == 1;
  if (a4 && (a5 & 1) == 0)
  {
    if (v5 >= 2)
    {
      if (v5 == 2)
        v9 = 1;
      else
        v9 = *(_DWORD *)(a1 & 0xFFFFFFFFFFFFFFF8) - 3;
    }
    else
    {
      v9 = 0;
    }
    if (v9 == a4)
      return 0;
    goto LABEL_27;
  }
  if (!a4)
    return 1;
LABEL_27:
  v10 = 0;
  v11 = a1 & 7;
  v12 = a1 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v13 = v12;
    if (v11 == 7)
      v13 = *(_QWORD *)(v12 + 8 * v10 + 16);
    v14 = *(_QWORD *)(a3 + 8 * v10);
    result = v14 == v13;
  }
  while (v14 == v13 && a4 - 1 != v10++);
  return result;
}

void sub_22E9D0954(uint64_t a1, unint64_t a2, int a3, unint64_t a4)
{
  unint64_t i;
  unint64_t v9;
  int v10;
  _QWORD v11[3];
  _QWORD v12[2];
  int v13;
  int v14;
  int v15;
  int v16;
  _BYTE v17[24];
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;

  if ((*(_WORD *)(a1 + 8) & 0x80) != 0)
    sub_22EFCC320(a1);
  for (i = *(_QWORD *)(a1 + 16); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    if ((*(_DWORD *)(i + 28) & 0x7F) == 0x17)
    {
      if (!a3)
        goto LABEL_9;
      v9 = *(_QWORD *)(i + 104);
      if (!v9)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(i + 96) + 88), *(_QWORD *)(i + 96));
        v9 = *(_QWORD *)(i + 104);
      }
      if (v9 <= 7)
      {
LABEL_9:
        v10 = sub_22E9C5678(i);
        v12[0] = i;
        v13 = v10;
        v14 = 0;
        v15 = 0;
        v16 = 0;
        memset(v17, 0, sizeof(v17));
        memset(v11, 0, sizeof(v11));
        v18 &= 0xC0u;
        v20 = 0;
        v21 = 0;
        v19 = 0;
        sub_22E8AB5B4((uint64_t)v12, 1);
        sub_22E9C57E4(a4, v12, a2, 0, 0);
        v22 = (void **)v17;
        sub_22E6C60B8(&v22);
        v22 = (void **)v11;
        sub_22E6C60B8(&v22);
      }
    }
  }
}

void sub_22E9D0A78(uint64_t a1, unint64_t a2, int a3, unint64_t a4)
{
  unint64_t i;
  int v9;
  _QWORD v10[3];
  _QWORD v11[2];
  int v12;
  int v13;
  int v14;
  int v15;
  _BYTE v16[24];
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;

  if ((*(_WORD *)(a1 + 8) & 0x80) != 0)
    sub_22EFCC320(a1);
  for (i = *(_QWORD *)(a1 + 16); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    if ((*(_DWORD *)(i + 28) & 0x7F) == 0x16 && (!a3 || !sub_22F3B4E88(i)))
    {
      v9 = sub_22E9C5678(i);
      v11[0] = i;
      v12 = v9;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      memset(v16, 0, sizeof(v16));
      memset(v10, 0, sizeof(v10));
      v17 &= 0xC0u;
      v19 = 0;
      v20 = 0;
      v18 = 0;
      sub_22E8AB5B4((uint64_t)v11, 1);
      sub_22E9C57E4(a4, v11, a2, 0, 0);
      v21 = (void **)v16;
      sub_22E6C60B8(&v21);
      v21 = (void **)v10;
      sub_22E6C60B8(&v21);
    }
  }
}

char **sub_22E9D0B90(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t i;
  uint64_t v18;
  const void *v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v27;
  const void *v28;
  __int128 v29[3];
  void *v30;
  int v31;
  char v32;
  void *v33;
  void *v34;
  _QWORD v35[3];
  _QWORD v36[2];
  int v37;
  int v38;
  int v39;
  int v40;
  _BYTE v41[24];
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  char v49;
  void *v50;
  int v51;
  char v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  int v56;
  _BYTE v57[64];
  char *v58;
  char *v59;
  _QWORD *v60;
  uint64_t v61;
  __int128 v62[11];
  void **v63;

  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  LODWORD(v46) = 33;
  BYTE4(v46) = 0;
  v52 = 0;
  v47 = 0u;
  v48 = 0u;
  v49 = 0;
  v53 = v57;
  v54 = v57;
  v55 = 8;
  v56 = 0;
  sub_22E9B831C((uint64_t)&v58, a1, v7, v8, (__int128 *)&v46, 0, 0);
  if (v54 != v53)
    free(v54);
  if (v52 && v51)
    free(v50);
  v46 = (char *)&v48 + 8;
  *(_QWORD *)&v47 = (char *)&v48 + 8;
  *((_QWORD *)&v47 + 1) = 16;
  LODWORD(v48) = 0;
  v9 = sub_22EC65CE0((_QWORD *)a1, *(_QWORD *)(a1 + 3344), a3, a4, 0, 0);
  if (v9)
  {
    if ((*(_DWORD *)(v9 + 28) & 0x7F) == 0x16)
    {
      v10 = sub_22F257E10(v9);
      if (v10)
      {
        v11 = v10;
        while ((*(_BYTE *)(v11 + 28) & 0x80) != 0 || (*(_BYTE *)(v11 + 8) & 4) != 0)
        {
          v11 = *(_QWORD *)(v11 + 128);
          if (!v11)
            goto LABEL_13;
        }
LABEL_35:
        v27 = *(_QWORD *)(v11 + 40);
        if ((v27 & 7) != 0)
          v28 = 0;
        else
          v28 = (const void *)(v27 & 0xFFFFFFFFFFFFFFF8);
        sub_22E3BA850((uint64_t)&v46, v28);
        while (1)
        {
          v11 = *(_QWORD *)(v11 + 128);
          if (!v11)
            break;
          if ((*(_BYTE *)(v11 + 28) & 0x80) == 0 && (*(_BYTE *)(v11 + 8) & 4) == 0)
            goto LABEL_35;
        }
      }
    }
  }
LABEL_13:
  v12 = operator new(0x28uLL);
  v12[2] = 0;
  v12[3] = 0;
  *((_DWORD *)v12 + 8) = 0;
  v13 = v60;
  *v12 = v60;
  v12[1] = &v60;
  v13[1] = v12;
  v60 = v12;
  ++v61;
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 1960) + 80);
  v15 = sub_22E3CD31C((uint64_t *)(v14 + 72), v14);
  v16 = v15;
  if ((*(_WORD *)(v15 + 48) & 0x80) != 0)
    sub_22EFCC320(v15 + 40);
  for (i = *(_QWORD *)(v16 + 56); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    if ((*(_DWORD *)(i + 28) & 0x7F) == 0x13)
    {
      v18 = *(_QWORD *)(i + 40);
      v19 = (v18 & 7) != 0 ? 0 : (const void *)(v18 & 0xFFFFFFFFFFFFFFF8);
      sub_22E3BA850((uint64_t)&v46, v19);
      if (v20)
      {
        v21 = sub_22E9C5678(i);
        v36[0] = i;
        v37 = v21;
        v38 = 0;
        v39 = 0;
        v40 = 0;
        memset(v41, 0, sizeof(v41));
        memset(v35, 0, sizeof(v35));
        v42 &= 0xC0u;
        v44 = 0;
        v45 = 0;
        v43 = 0;
        sub_22E8AB5B4((uint64_t)v36, 1);
        sub_22E9C57E4((unint64_t)&v58, v36, *(_QWORD *)(a1 + 216), 0, 0);
        v63 = (void **)v41;
        sub_22E6C60B8(&v63);
        v63 = (void **)v35;
        sub_22E6C60B8(&v63);
      }
    }
  }
  v22 = (uint64_t)v60;
  v23 = *v60;
  *(_QWORD *)(v23 + 8) = v60[1];
  **(_QWORD **)(v22 + 8) = v23;
  --v61;
  sub_22E9D8FB0(v22);
  v24 = *(_QWORD *)(a1 + 208);
  sub_22F2A4F2C((uint64_t)v29, v62);
  if (v59 == v58)
    v25 = 0;
  else
    v25 = v58;
  sub_22E9B83FC(a1, v24, v29, (uint64_t)v25, -1431655765 * ((unint64_t)(v59 - v58) >> 5));
  if (v34 != v33)
    free(v34);
  if (v32)
  {
    if (v31)
      free(v30);
    v32 = 0;
  }
  if ((char *)v47 != v46)
    free((void *)v47);
  return sub_22E9B8490(&v58);
}

char **sub_22E9D0EE4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t i;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 v33[3];
  void *v34;
  int v35;
  char v36;
  void *v37;
  void *v38;
  _QWORD v39[3];
  _QWORD v40[2];
  int v41;
  int v42;
  int v43;
  int v44;
  _BYTE v45[24];
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  char v53;
  void *v54;
  int v55;
  char v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  int v60;
  _BYTE v61[64];
  char *v62;
  char *v63;
  _QWORD *v64;
  uint64_t v65;
  __int128 v66[11];
  void **v67[2];

  v7 = sub_22EC65CE0((_QWORD *)a1, *(_QWORD *)(a1 + 3344), a3, a4, 0, 0);
  if (!v7)
    return sub_22E9D0B90(a1, v8, a3, a4);
  v9 = v7;
  if ((*(_DWORD *)(v7 + 28) & 0x7F) != 0x16)
    return sub_22E9D0B90(a1, v8, a3, a4);
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  LODWORD(v50) = 33;
  BYTE4(v50) = 0;
  v56 = 0;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v57 = v61;
  v58 = v61;
  v59 = 8;
  v60 = 0;
  sub_22E9B831C((uint64_t)&v62, a1, v11, v12, (__int128 *)&v50, 0, 0);
  if (v58 != v57)
    free(v58);
  if (v56 && v55)
    free(v54);
  v50 = (char *)&v52 + 8;
  *(_QWORD *)&v51 = (char *)&v52 + 8;
  *((_QWORD *)&v51 + 1) = 16;
  LODWORD(v52) = 0;
  v13 = operator new(0x28uLL);
  v13[2] = 0;
  v13[3] = 0;
  *((_DWORD *)v13 + 8) = 0;
  v14 = v64;
  *v13 = v64;
  v13[1] = &v64;
  v14[1] = v13;
  v64 = v13;
  ++v65;
  v15 = 1;
  do
  {
    v16 = sub_22F257E10(v9);
    if (v16)
    {
      v17 = v16;
      while ((*(_BYTE *)(v17 + 28) & 0x80) != 0 || (*(_BYTE *)(v17 + 8) & 4) != 0)
      {
        v17 = *(_QWORD *)(v17 + 128);
        if (!v17)
          goto LABEL_15;
      }
LABEL_17:
      if ((v15 & 1) != 0)
      {
        v18 = v17;
        if ((*(_DWORD *)(v17 + 28) & 0x7F) != 0x53)
        {
          for (i = *(_QWORD *)(v17 + 16); ; i = *(_QWORD *)(v20 + v22 + 16))
          {
            v20 = i & 0xFFFFFFFFFFFFFFF8;
            if ((i & 4) != 0)
              v20 = *(_QWORD *)v20;
            v21 = *(_WORD *)(v20 + 8) & 0x7F;
            if (v21 == 83)
            {
              v18 = v20 - 40;
              break;
            }
            v22 = -40;
            if ((*(_WORD *)(v20 + 8) & 0x7Fu) > 0x46)
            {
              if (v21 == 71)
              {
                v22 = -56;
                continue;
              }
              if (v21 != 81)
                goto LABEL_33;
            }
            else
            {
              if (v21 > 0x18)
                goto LABEL_32;
              if (v21 == 16)
                goto LABEL_26;
              if (((1 << v21) & 0x1066) == 0)
              {
                if (v21 == 24)
                {
LABEL_26:
                  v22 = -48;
                  continue;
                }
LABEL_32:
                if (v21 == 70)
                {
                  v22 = -64;
                  continue;
                }
LABEL_33:
                v23 = v21 - 52;
                if (v21 - 33 >= 5)
                  v24 = -48;
                else
                  v24 = -64;
                if (v23 >= 6)
                  v22 = v24;
                else
                  v22 = -72;
                continue;
              }
            }
          }
        }
        if (sub_22F368C34(*(_QWORD *)(v18 + 88), v17))
          goto LABEL_49;
      }
      v25 = *(_QWORD *)(v17 + 40);
      if ((v25 & 7) != 0)
        v26 = 0;
      else
        v26 = (const void *)(v25 & 0xFFFFFFFFFFFFFFF8);
      sub_22E3BA850((uint64_t)&v50, v26);
      if (v27)
      {
        v28 = sub_22E9C5678(v17);
        v40[0] = v17;
        v41 = v28;
        v42 = 0;
        v43 = 0;
        v44 = 0;
        memset(v45, 0, sizeof(v45));
        memset(v39, 0, sizeof(v39));
        v46 &= 0xC0u;
        v48 = 0;
        v49 = 0;
        v47 = 0;
        sub_22E8AB5B4((uint64_t)v40, 1);
        sub_22E9C57E4((unint64_t)&v62, v40, *(_QWORD *)(a1 + 216), 0, 0);
        v67[0] = (void **)v45;
        sub_22E6C60B8(v67);
        v67[0] = (void **)v39;
        sub_22E6C60B8(v67);
      }
LABEL_49:
      while (1)
      {
        v17 = *(_QWORD *)(v17 + 128);
        if (!v17)
          break;
        if ((*(_BYTE *)(v17 + 28) & 0x80) == 0 && (*(_BYTE *)(v17 + 8) & 4) == 0)
          goto LABEL_17;
      }
    }
LABEL_15:
    v9 = sub_22F3B46CC(v9);
    v15 = 0;
  }
  while (v9);
  v29 = (uint64_t)v64;
  v30 = *v64;
  *(_QWORD *)(v30 + 8) = v64[1];
  **(_QWORD **)(v29 + 8) = v30;
  --v65;
  sub_22E9D8FB0(v29);
  v31 = *(_QWORD *)(a1 + 208);
  sub_22F2A4F2C((uint64_t)v33, v66);
  if (v63 == v62)
    v32 = 0;
  else
    v32 = v62;
  sub_22E9B83FC(a1, v31, v33, (uint64_t)v32, -1431655765 * ((unint64_t)(v63 - v62) >> 5));
  if (v38 != v37)
    free(v38);
  if (v36)
  {
    if (v35)
      free(v34);
    v36 = 0;
  }
  if ((char *)v51 != v50)
    free((void *)v51);
  return sub_22E9B8490(&v62);
}

void sub_22E9D1324(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  const void *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16[3];
  void *v17;
  int v18;
  char v19;
  void *v20;
  void *v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  int v25;
  _BYTE v26[128];
  char *v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __int128 v32[11];
  int v33;
  char v34;
  __int128 v35;
  __int128 v36;
  char v37;
  void *v38;
  int v39;
  char v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  int v44;
  _BYTE v45[64];

  v33 = 0;
  v34 = 0;
  v40 = 0;
  v35 = 0u;
  v36 = 0u;
  v37 = 0;
  v41 = v45;
  v42 = v45;
  v43 = 8;
  v44 = 0;
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  sub_22E9B831C((uint64_t)&v27, a1, v2, v3, (__int128 *)&v33, 0, 0);
  v4 = *(_QWORD *)(a1 + 216);
  if (v4 && (*(_WORD *)(v4 + 8) & 0x7Fu) - 19 <= 4 && (*(_DWORD *)(v4 - 20) & 0x7E) == 0x14)
  {
    v5 = sub_22E9D15D8(v4 - 48);
    v6 = v5;
    if ((*(_WORD *)(v5 + 56) & 0x80) != 0)
      sub_22EFCC320(v5 + 48);
    for (i = *(_QWORD *)(v6 + 64); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
    {
      if ((*(_DWORD *)(i + 28) & 0x7F) == 0x4E)
      {
        v8 = (const void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(i + 48) + 32))(*(_QWORD *)(i + 48));
        sub_22E3BA850((uint64_t)&v29, v8);
      }
    }
    v22 = v26;
    v23 = v26;
    v24 = 16;
    v25 = 0;
    v9 = operator new(0x28uLL);
    v9[2] = 0;
    v9[3] = 0;
    *((_DWORD *)v9 + 8) = 0;
    v10 = v30;
    *v9 = v30;
    v9[1] = &v30;
    v10[1] = v9;
    v30 = v9;
    ++v31;
    if (v6 && (*(_DWORD *)(v6 + 28) & 0x7F) == 0x15)
      v11 = *(_QWORD *)(v6 + 88);
    else
      v11 = sub_22F3B55B8(v6);
    sub_22E9C2FC4((uint64_t)&v33, v11, 0, 0, *(_QWORD *)(a1 + 216), (uint64_t)&v22, (uint64_t)&v27, 0, 0, 1);
    v12 = (uint64_t)v30;
    v13 = *v30;
    *(_QWORD *)(v13 + 8) = v30[1];
    **(_QWORD **)(v12 + 8) = v13;
    --v31;
    sub_22E9D8FB0(v12);
    v14 = *(_QWORD *)(a1 + 208);
    sub_22F2A4F2C((uint64_t)v16, v32);
    if (v28 == v27)
      v15 = 0;
    else
      v15 = v27;
    sub_22E9B83FC(a1, v14, v16, (uint64_t)v15, -1431655765 * ((unint64_t)(v28 - v27) >> 5));
    if (v21 != v20)
      free(v21);
    if (v19)
    {
      if (v18)
        free(v17);
      v19 = 0;
    }
    if (v23 != v22)
      free(v23);
  }
  sub_22E9B8490(&v27);
  if (v42 != v41)
    free(v42);
  if (v40)
  {
    if (v39)
      free(v38);
  }
}

uint64_t sub_22E9D15D8(uint64_t a1)
{
  uint64_t v1;
  int v2;
  unint64_t v3;

  v1 = a1;
  v2 = *(_DWORD *)(a1 + 28) & 0x7F;
  if (a1 && v2 == 22)
  {
    v3 = *(_QWORD *)(a1 + 120);
    if (!v3)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
      v3 = *(_QWORD *)(v1 + 120);
    }
    if (v3 <= 7)
      return v1;
    return *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  }
  if (a1 && v2 == 23)
  {
    v3 = *(_QWORD *)(a1 + 104);
    if (!v3)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
      v3 = *(_QWORD *)(v1 + 104);
    }
    if (v3 >= 8)
      return *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  }
  return v1;
}

char **sub_22E9D1664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unsigned int *v25;
  std::string::size_type v26;
  const void *v27;
  unsigned int v28;
  std::string *p_dst;
  uint64_t v30;
  char v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  std::string *v37;
  size_t size;
  BOOL v39;
  char v40;
  int *v41;
  const void *v42;
  int v43;
  std::string *v44;
  size_t v45;
  int *v46;
  const void *v47;
  int v48;
  char *v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _BYTE *v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  __int128 v69[3];
  void *v70;
  int v71;
  char v72;
  void *v73;
  void *v74;
  __int128 v75;
  __int128 v76;
  int v77;
  _QWORD v78[3];
  __int128 v79;
  __int128 v80;
  void **v81[4];
  __int16 v82;
  _QWORD v83[2];
  _QWORD v84[3];
  _QWORD v85[2];
  int v86;
  int v87;
  int v88;
  int v89;
  _BYTE v90[24];
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  std::string __dst;
  std::string v96;
  char *v97;
  unint64_t v98;
  unint64_t v99;
  __int128 v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  __int128 v104[11];
  _BYTE v105[44];
  int v106;
  void *v107;
  void *v108;
  _DWORD v109[2];
  char v110;
  _BYTE *v111;
  void *v112;
  uint64_t v113;
  int v114;
  _BYTE v115[16];
  void *v116;
  uint64_t v117;
  _QWORD v118[8];

  v118[5] = *MEMORY[0x24BDAC8D0];
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  *(_DWORD *)v105 = 0;
  v105[4] = 0;
  v110 = 0;
  memset(&v105[8], 0, 33);
  v111 = v115;
  v112 = v115;
  v113 = 8;
  v114 = 0;
  v68 = (unint64_t *)a1;
  sub_22E9B831C((uint64_t)&v97, a1, v5, v6, (__int128 *)v105, 0, 0);
  if (v112 != v111)
    free(v112);
  if (v110 && v109[1])
    free(v108);
  v7 = *(_QWORD *)(a1 + 216);
  if (v7)
  {
    if ((*(_WORD *)(v7 + 8) & 0x7Fu) - 19 <= 4)
    {
      v8 = *(_DWORD *)(v7 - 20);
      if ((v8 & 0x7E) == 0x14)
      {
        if ((v8 & 0x7F) == 0x15)
          v10 = (unint64_t *)(v7 + 40);
        else
          v10 = (unint64_t *)(sub_22F3B55B8(v7 - 48) + 104);
        v11 = *v10;
        v12 = *(_QWORD *)(a1 + 88);
        v13 = sub_22F36E1B8(v12);
        v14 = *(_QWORD *)(v13 + 48);
        if (v14)
          v15 = v14 & 0xFFFFFFFFFFFFFFF0;
        else
          v15 = sub_22EF6462C(v12, v13);
        if (!v11)
          goto LABEL_24;
        v16 = sub_22EFDA7BC(v11, a3, 1);
        if (!v16)
          goto LABEL_24;
        v17 = v11;
        v18 = *(_QWORD *)(v16 + 56);
        v19 = v18 & 0xFFFFFFFFFFFFFFF0;
        v20 = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0);
        if (!v20 || (v21 = *(_DWORD *)(v20 + 16), (v21 & 0xFE) != 0x28))
        {
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
            || (v20 = sub_22F10CF48(v20)) == 0)
          {
LABEL_21:
            v22 = *(_QWORD *)v19;
            if ((*(_BYTE *)(*(_QWORD *)v19 + 8) & 0xF) != 0)
              v22 = (unint64_t)sub_22F10D2BC(v18);
            v11 = v17;
            v15 = v22 & 0xFFFFFFFFFFFFFFF0;
            v101 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF0) + 8);
LABEL_24:
            v23 = operator new(0x28uLL);
            v23[2] = 0;
            v23[3] = 0;
            *((_DWORD *)v23 + 8) = 0;
            v24 = v102;
            *v23 = v102;
            v23[1] = &v102;
            v24[1] = v23;
            v102 = v23;
            ++v103;
            memset(&v96, 0, sizeof(v96));
            std::string::push_back(&v96, 95);
            std::string::append(&v96, (const std::string::value_type *)(*(_QWORD *)(a3 + 16) + 16), **(unsigned int **)(a3 + 16));
            v25 = *(unsigned int **)(a3 + 16);
            v28 = *v25;
            v27 = v25 + 4;
            v26 = v28;
            if (v28 >= 0x17uLL)
            {
              if ((v26 | 7) == 0x17)
                v30 = (v26 & 0xFFFFFFF8) + 8;
              else
                v30 = v26 | 7;
              p_dst = (std::string *)operator new(v30 + 1);
              __dst.__r_.__value_.__l.__size_ = v26;
              __dst.__r_.__value_.__r.__words[2] = v30 - 0x7FFFFFFFFFFFFFFFLL;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            }
            else
            {
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v26;
              p_dst = &__dst;
              if (!v26)
                goto LABEL_32;
            }
            memmove(p_dst, v27, v26);
LABEL_32:
            p_dst->__r_.__value_.__s.__data_[v26] = 0;
            std::string::push_back(&__dst, 95);
            if (!v11)
              goto LABEL_80;
            v31 = 0;
            do
            {
              v66 = v11;
              v32 = sub_22EFDD1E0(v11);
              if (v32)
              {
                while (1)
                {
                  v33 = sub_22E9C5678(v32);
                  v85[0] = v32;
                  v86 = v33;
                  v87 = 0;
                  v88 = 0;
                  v89 = 0;
                  memset(v90, 0, sizeof(v90));
                  memset(v84, 0, sizeof(v84));
                  v91 &= 0xC0u;
                  v93 = 0;
                  v94 = 0;
                  v92 = 0;
                  sub_22E8AB5B4((uint64_t)v85, 1);
                  sub_22E9C57E4((unint64_t)&v97, v85, v68[27], 0, 0);
                  *(_QWORD *)v105 = v90;
                  sub_22E6C60B8((void ***)v105);
                  *(_QWORD *)v105 = v84;
                  sub_22E6C60B8((void ***)v105);
                  v34 = *(_QWORD *)(v32 + 40);
                  v35 = v34 & 0xFFFFFFFFFFFFFFF8;
                  v36 = (v34 & 7) != 0 ? 0 : v34 & 0xFFFFFFFFFFFFFFF8;
                  if (v36 == a3)
                    break;
                  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v37 = &v96;
                  else
                    v37 = (std::string *)v96.__r_.__value_.__r.__words[0];
                  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    size = *((_BYTE *)&v96.__r_.__value_.__s + 23) & 0x7F;
                  else
                    size = v96.__r_.__value_.__l.__size_;
                  v39 = (*(_QWORD *)(v32 + 40) & 7) != 0 || v35 == 0;
                  v40 = v39;
                  if (v39)
                  {
                    if (!size)
                      break;
                  }
                  else
                  {
                    v41 = *(int **)(v35 + 16);
                    v43 = *v41;
                    v42 = v41 + 4;
                    if (size == v43 && (!size || !memcmp(v37, v42, size)))
                      break;
                  }
                  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v44 = &__dst;
                  else
                    v44 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v45 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
                  else
                    v45 = __dst.__r_.__value_.__l.__size_;
                  if ((v40 & 1) != 0)
                  {
                    if (!v45)
                      break;
                  }
                  else
                  {
                    v46 = *(int **)(v35 + 16);
                    v48 = *v46;
                    v47 = v46 + 4;
                    if (v45 == v48 && (!v45 || !memcmp(v44, v47, v45)))
                      break;
                  }
LABEL_77:
                  v32 = *(_QWORD *)(v32 + 80);
                  if (!v32)
                    goto LABEL_78;
                }
                v49 = v97;
                v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - (_QWORD)v97) >> 5);
                if ((_DWORD)v50)
                {
                  if (v97 == (char *)v98)
                    v49 = 0;
                  v51 = v50 - 1;
                  if (!*(_DWORD *)&v49[96 * (v50 - 1) + 24] && *(_QWORD *)&v49[96 * v51] == v32)
                    --*(_DWORD *)&v49[96 * v51 + 16];
                }
                v31 = 1;
                goto LABEL_77;
              }
LABEL_78:
              v11 = sub_22F3B46CC(v66);
            }
            while (v11);
            if ((v31 & 1) == 0)
            {
LABEL_80:
              v67 = v100;
              *(_OWORD *)v105 = v100;
              memset(&v105[20], 0, 24);
              *(_DWORD *)&v105[16] = 36;
              v106 = 0;
              v107 = v109;
              v108 = (void *)0x400000000;
              v116 = v118;
              v117 = 0x200000000;
              v52 = v68[11];
              v83[0] = ((*(_QWORD *)(*(_QWORD *)(v52 + 2000) + 100) >> 12) & 0x2000000 | sub_22E8FCD8C(v52, v68[10]) & 0xFFFFDFFFFDF9CFFFLL) ^ 0x200002043000;
              v83[1] = v53;
              v54 = sub_22E9D1DF8(v15, (uint64_t)v83, v67);
              sub_22E8A9CC8((uint64_t)v105, (uint64_t)v54);
              v82 = 260;
              v81[0] = (void **)&v96;
              v55 = sub_22F2F27DC(v67, (const char **)v81);
              sub_22E8A9AD8((uint64_t)v105, (uint64_t)v55);
              *(_QWORD *)&v75 = 0;
              *((_QWORD *)&v75 + 1) = sub_22F2F28A4((uint64_t)v105);
              v76 = xmmword_22F469FA0;
              v77 = 0;
              memset(v78, 0, sizeof(v78));
              LOBYTE(v79) = v79 & 0xC0;
              v80 = 0uLL;
              *((_QWORD *)&v79 + 1) = 0;
              v56 = v98;
              if (v98 >= v99)
              {
                v60 = sub_22E9D8E48((uint64_t *)&v97, (uint64_t)&v75);
              }
              else
              {
                v57 = v75;
                v58 = v76;
                *(_DWORD *)(v98 + 32) = v77;
                *(_OWORD *)v56 = v57;
                *(_OWORD *)(v56 + 16) = v58;
                *(_QWORD *)(v56 + 48) = 0;
                *(_QWORD *)(v56 + 56) = 0;
                *(_QWORD *)(v56 + 40) = 0;
                v59 = v80;
                *(_OWORD *)(v56 + 64) = v79;
                *(_OWORD *)(v56 + 80) = v59;
                v60 = v56 + 96;
              }
              v98 = v60;
              v81[0] = (void **)v78;
              sub_22E6C60B8(v81);
              if (v116 != v118)
                free(v116);
              if (v107 != v109)
                free(v107);
            }
            v61 = (uint64_t)v102;
            v62 = *v102;
            *(_QWORD *)(v62 + 8) = v102[1];
            **(_QWORD **)(v61 + 8) = v62;
            --v103;
            sub_22E9D8FB0(v61);
            v63 = v68[26];
            sub_22F2A4F2C((uint64_t)v69, v104);
            if ((char *)v98 == v97)
              v64 = 0;
            else
              v64 = v97;
            sub_22E9B83FC((uint64_t)v68, v63, v69, (uint64_t)v64, -1431655765 * ((v98 - (unint64_t)v97) >> 5));
            if (v74 != v73)
              free(v74);
            if (v72)
            {
              if (v71)
                free(v70);
              v72 = 0;
            }
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v96.__r_.__value_.__l.__data_);
            return sub_22E9B8490(&v97);
          }
          v21 = *(_DWORD *)(v20 + 16);
        }
        if ((v21 & 0x100000) != 0)
        {
          do
          {
            v20 = *(_QWORD *)(*(_QWORD *)(v20 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (v20)
            {
              v65 = *(_DWORD *)(v20 + 16);
              if ((v65 & 0xFE) == 0x28)
                continue;
            }
            v20 = sub_22F10CF48(v20);
            v65 = *(_DWORD *)(v20 + 16);
          }
          while ((v65 & 0x100000) != 0);
        }
        v18 = *(_QWORD *)(v20 + 32);
        v19 = v18 & 0xFFFFFFFFFFFFFFF0;
        goto LABEL_21;
      }
    }
  }
  return sub_22E9B8490(&v97);
}

char *sub_22E9D1DF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  const char *p_p;
  __int16 v16;
  __int128 __p;
  uint64_t v18;
  uint64_t v19;

  v19 = a1;
  if ((a1 & 8) != 0)
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v5 = (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xC00000000) != 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  if (v6 | a1 & 7 || v5)
    goto LABEL_22;
  v7 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
  v8 = *(unsigned __int8 *)(v7 + 16);
  if (v7)
    v9 = v8 == 11;
  else
    v9 = 0;
  if (v9)
    return (char *)sub_22F1125EC(v7);
  if (v7)
  {
    if ((v8 & 0xFE) == 0x2C)
    {
      v10 = sub_22F114198(*(_QWORD *)(v7 + 24));
      if (v10)
      {
        if (!*(_QWORD *)(v10 + 40) && (*(_QWORD *)(v10 + 120) < 8uLL || (*(_QWORD *)(v10 + 120) & 4) != 0))
        {
          v12 = (unsigned __int16)*(_DWORD *)(v10 + 72) >> 13;
          if (v12 < 5)
            return off_24FAB76D8[v12];
        }
      }
    }
  }
LABEL_22:
  __p = 0uLL;
  v18 = 0;
  sub_22F119374(&v19, &__p, a2);
  v16 = 260;
  p_p = (const char *)&__p;
  v13 = sub_22F2F27DC(a3, &p_p);
  if (SHIBYTE(v18) < 0)
    operator delete((void *)__p);
  return v13;
}

void sub_22E9D1F2C(void **a1, uint64_t a2, unsigned __int16 a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  void *v9;
  BOOL v10;
  int v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  llvm *v22;
  llvm *v23;
  unint64_t v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t i;
  _QWORD *v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  _DWORD *v41;
  unsigned int v42;
  _DWORD *v43;
  unsigned int v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  _BYTE *v54;
  _DWORD *v55;
  unsigned int v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  void *v61;
  unint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  llvm *v70;
  llvm *v71;
  uint64_t v72;
  llvm *v73;
  unint64_t *v74;
  const void *v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t j;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  int v100;
  llvm *v101;
  int v102;
  unsigned int v103;
  unint64_t v104;
  __int128 v105[3];
  void *v106;
  int v107;
  char v108;
  void *v109;
  void *v110;
  _OWORD v111[2];
  int v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  _QWORD v117[2];
  char *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  __int128 v122;
  _QWORD *v123;
  uint64_t v124;
  __int128 v125[11];
  llvm *v126;
  uint64_t v127;
  unsigned int v128;
  int v129;
  char v130;
  __int128 v131;
  __int128 v132;
  char v133;
  void *v134;
  int v135;
  char v136;
  _BYTE *v137;
  void *v138;
  uint64_t v139;
  int v140;
  _BYTE v141[64];
  void **v142;
  void *v143[2];
  __int128 v144;
  int v145;
  __int128 v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  _BYTE v150[48];
  void *v151;
  void *v152;
  _DWORD v153[2];
  char v154;
  _BYTE *v155;
  void *v156;
  uint64_t v157;
  int v158;
  _BYTE v159[16];
  void *v160;
  uint64_t v161;
  _QWORD v162[8];

  v162[5] = *MEMORY[0x24BDAC8D0];
  if (a4 >= 0x10)
  {
    v7 = a4;
    v8 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
    if (v8 && *(_BYTE *)(v8 + 16) == 57)
      v7 = *(_QWORD *)(v8 + 8);
  }
  else
  {
    v7 = 0;
  }
  v9 = a1[27];
  if (v9)
    v10 = (*((_WORD *)v9 + 4) & 0x7Fu) - 24 >= 0xFFFFFFFB;
  else
    v10 = 0;
  if (!v10)
  {
    v11 = 0;
    v12 = 0;
    goto LABEL_18;
  }
  v13 = *((_DWORD *)v9 - 5) & 0x7F;
  if (v13 == 21)
  {
    v12 = *((_QWORD *)v9 + 5);
LABEL_17:
    v11 = 1;
    goto LABEL_18;
  }
  if (v13 == 20)
  {
    v12 = sub_22F3B55B8((uint64_t)v9 - 48);
    goto LABEL_17;
  }
  v11 = 0;
  if ((v13 - 19) >= 5)
    v12 = 0;
  else
    v12 = (unint64_t)v9 - 48;
LABEL_18:
  if (!a2 || v12)
  {
    if (v12)
      goto LABEL_30;
LABEL_24:
    v15 = (uint64_t)a1[26];
    v129 = 0;
    v130 = 0;
    v136 = 0;
    v131 = 0u;
    v132 = 0u;
    v133 = 0;
    v137 = v141;
    v138 = v141;
    v139 = 8;
    v140 = 0;
    sub_22E9B83FC((uint64_t)a1, v15, (__int128 *)&v129, 0, 0);
    if (v138 != v137)
      free(v138);
    if (v136 && v135)
      free(v134);
    return;
  }
  v14 = *(_QWORD *)(a2 + 360);
  if (!v14 || (*(_WORD *)(v14 + 8) & 0x7Fu) - 19 >= 5)
    goto LABEL_24;
  v12 = v14 - 48;
LABEL_30:
  v127 = 0;
  v126 = 0;
  v128 = 0;
  sub_22E9D2C14(v12, a3, v7, (uint64_t)&v126, 1);
  v16 = (*(uint64_t (**)(void *))(*(_QWORD *)a1[26] + 40))(a1[26]);
  v17 = (*(uint64_t (**)(void *))(*(_QWORD *)a1[26] + 48))(a1[26]);
  *(_DWORD *)v150 = 0;
  v150[4] = 0;
  v154 = 0;
  memset(&v150[8], 0, 33);
  v155 = v159;
  v156 = v159;
  v157 = 8;
  v158 = 0;
  sub_22E9B831C((uint64_t)&v118, (uint64_t)a1, v16, v17, (__int128 *)v150, 0, 0);
  if (v156 != v155)
    free(v156);
  v98 = v12;
  if (v154 && v153[1])
    free(v152);
  v18 = operator new(0x28uLL);
  v18[2] = 0;
  v18[3] = 0;
  *((_DWORD *)v18 + 8) = 0;
  v19 = v123;
  *v18 = v123;
  v18[1] = &v123;
  v19[1] = v18;
  v123 = v18;
  ++v124;
  v20 = (uint64_t)a1[11];
  v117[0] = ((*(_QWORD *)(*(_QWORD *)(v20 + 2000) + 100) >> 12) & 0x2000000 | sub_22E8FCD8C(v20, (unint64_t)a1[10]) & 0xFFFFDFFFFDF9CFFFLL) ^ 0x200002043000;
  v117[1] = v21;
  v22 = (llvm *)((char *)v126 + 16 * v128);
  v99 = a3;
  if ((_DWORD)v127)
  {
    if (v128)
    {
      v72 = 16 * v128;
      v23 = v126;
      while (*(_QWORD *)v23 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v23 = (llvm *)((char *)v23 + 16);
        v72 -= 16;
        if (!v72)
          goto LABEL_36;
      }
    }
    else
    {
      v23 = v126;
    }
  }
  else
  {
LABEL_36:
    v23 = (llvm *)((char *)v126 + 16 * v128);
  }
  v102 = HIBYTE(a3);
  v101 = (llvm *)((char *)v126 + 16 * v128);
  if (v23 != v101)
  {
    v100 = v11;
    do
    {
      v24 = *((_QWORD *)v23 + 1) & 0xFFFFFFFFFFFFFFF8;
      *(_OWORD *)v150 = v122;
      memset(&v150[16], 0, 32);
      v151 = v153;
      v152 = (void *)0x400000000;
      v160 = v162;
      v161 = 0x200000000;
      if (!v102)
      {
        if ((*(_QWORD *)(v24 + 56) & 0x20000) != 0)
          v25 = "-";
        else
          v25 = "+";
        sub_22E8A9B38((uint64_t)v150, (uint64_t)v25);
        sub_22E8A9D90((uint64_t)v150, 19, "");
      }
      if (v7 <= 0xF)
      {
        sub_22F3B5794(v24);
        v143[0] = a1[11];
        sub_22F10F8A0((uint64_t)v143, v26);
        v143[0] = v27;
        sub_22F114F34(v143);
        sub_22E9D2F30((uint64_t)v143[0], (*(_QWORD *)(v24 + 56) >> 26) & 0x7F, (uint64_t)v117, (uint64_t *)v150);
      }
      v28 = *(_QWORD *)(v24 + 40);
      v29 = v28 & 7;
      v104 = v24;
      if (v29 == 1)
      {
        v30 = (_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF8);
        if (v30)
        {
          v55 = (_DWORD *)v30[2];
          v56 = *v55;
          v30 = v55 + 4;
          v31 = v56;
        }
        else
        {
          v31 = 0;
        }
        LOWORD(v145) = 261;
        v143[0] = v30;
        v143[1] = (void *)v31;
        v57 = sub_22F2F27DC(*(uint64_t *)v150, (const char **)v143);
        sub_22E8A9AD8((uint64_t)v150, (uint64_t)v57);
      }
      else
      {
        v32 = *(unsigned int *)(v24 + 104);
        if ((_DWORD)v32)
        {
          v33 = 0;
          v34 = *(_QWORD *)(v24 + 96);
          v103 = v28 & 7;
          v35 = v28 & 0xFFFFFFFFFFFFFFF8;
          for (i = 8 * v32; i; i -= 8)
          {
            if (v33)
            {
              v39 = v103 > 1;
              if (v103 >= 3)
                v39 = *(_DWORD *)v35 - 3;
              if (v33 >= v39)
                break;
              sub_22E8A9D90((uint64_t)v150, 19, "");
              v37 = (_QWORD *)v35;
              if (v29 == 7)
                v37 = *(_QWORD **)(v35 + 8 * v33 + 16);
              v40 = *(_QWORD *)v150;
              if (v37)
              {
                v43 = (_DWORD *)v37[2];
                v44 = *v43;
                v37 = v43 + 4;
                v38 = v44;
              }
              else
              {
                v38 = 0;
              }
            }
            else
            {
              v37 = (_QWORD *)v35;
              if (v29 == 7)
                v37 = *(_QWORD **)(v35 + 16);
              if (v37)
              {
                v41 = (_DWORD *)v37[2];
                v42 = *v41;
                v37 = v41 + 4;
                v38 = v42;
              }
              else
              {
                v38 = 0;
              }
              v40 = *(_QWORD *)v150;
            }
            LOWORD(v145) = 773;
            v143[0] = v37;
            v143[1] = (void *)v38;
            *(_QWORD *)&v144 = ":";
            v45 = sub_22F2F27DC(v40, (const char **)v143);
            sub_22E8A9AD8((uint64_t)v150, (uint64_t)v45);
            v46 = *(_QWORD *)(v34 + 8 * v33);
            if ((~*(_DWORD *)(v46 + 96) & 0x81000) != 0)
              v47 = sub_22EFBF144(v46);
            else
              v47 = *(_QWORD *)(v46 + 48);
            v143[0] = a1[11];
            v143[1] = 0;
            *(_QWORD *)&v144 = 0;
            DWORD2(v144) = 2;
            sub_22F10E588((uint64_t)v143, v47);
            v142 = v48;
            sub_22F114F34(&v142);
            v49 = *(_DWORD *)(*(_QWORD *)(v34 + 8 * v33) + 96);
            sub_22E9D2F30((uint64_t)v142, (v49 >> 13) & ((int)(v49 << 19) >> 31) & 0x7F, (uint64_t)v117, (uint64_t *)v150);
            v50 = *(_QWORD *)(*(_QWORD *)(v34 + 8 * v33) + 40);
            if ((v50 & 7) == 0)
            {
              v51 = v50 & 0xFFFFFFFFFFFFFFF8;
              if (v51)
              {
                v52 = *(unsigned int **)(v51 + 16);
                v53 = *v52;
                LOWORD(v145) = 261;
                v143[0] = v52 + 4;
                v143[1] = (void *)v53;
                v54 = sub_22F2F27DC(*(uint64_t *)v150, (const char **)v143);
                sub_22E8A9B38((uint64_t)v150, (uint64_t)v54);
              }
            }
            ++v33;
          }
        }
      }
      if ((*(_BYTE *)(v104 + 58) & 4) != 0)
      {
        if (*(_DWORD *)(v104 + 104))
          sub_22E8A9D90((uint64_t)v150, 15, "");
        sub_22E8A9B38((uint64_t)v150, (uint64_t)"...");
      }
      if (v100)
      {
        v58 = *(_QWORD *)(v121 + 208);
        if (v58)
        {
          if ((*(_BYTE *)(v58 + 8) & 2) != 0)
          {
            sub_22E8A9D90((uint64_t)v150, 19, "");
            sub_22E8A9D90((uint64_t)v150, 11, "");
            sub_22E8A9D90((uint64_t)v150, 20, "");
            v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v104 + 80) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            if (v59)
              v60 = (*(_DWORD *)(v59 + 16) & 0xFF800FF) == 86507531;
            else
              v60 = 0;
            if (v60)
            {
              sub_22E8A9C00((uint64_t)v150, (uint64_t)"statements");
            }
            else
            {
              sub_22E8A9B38((uint64_t)v150, (uint64_t)"return");
              sub_22E8A9D90((uint64_t)v150, 19, "");
              sub_22E8A9C00((uint64_t)v150, (uint64_t)"expression");
              sub_22E8A9D90((uint64_t)v150, 17, "");
            }
            sub_22E8A9D90((uint64_t)v150, 20, "");
            sub_22E8A9D90((uint64_t)v150, 12, "");
          }
        }
      }
      v61 = (void *)sub_22F2F28A4((uint64_t)v150);
      v143[0] = (void *)v104;
      v143[1] = v61;
      *(_QWORD *)&v144 = 40;
      DWORD2(v144) = 3;
      v145 = 0;
      v147 = 0;
      v146 = 0uLL;
      LOBYTE(v148) = v148 & 0xC0;
      v149 = 0uLL;
      *((_QWORD *)&v148 + 1) = 0;
      sub_22E8AB5B4((uint64_t)v143, 1);
      if ((*((_BYTE *)v23 + 8) & 4) == 0)
      {
        LODWORD(v144) = v144 + 2;
        LOBYTE(v148) = v148 | 2;
      }
      v111[0] = *(_OWORD *)v143;
      v111[1] = v144;
      v112 = v145;
      v113 = v146;
      v114 = v147;
      v147 = 0;
      v146 = 0uLL;
      v115 = v148;
      v116 = v149;
      v62 = v119;
      if (v119 >= v120)
      {
        v66 = sub_22E9D8E48((uint64_t *)&v118, (uint64_t)v111);
      }
      else
      {
        v63 = *(_OWORD *)v143;
        v64 = v144;
        *(_DWORD *)(v119 + 32) = v145;
        *(_OWORD *)v62 = v63;
        *(_OWORD *)(v62 + 16) = v64;
        *(_QWORD *)(v62 + 40) = 0;
        *(_QWORD *)(v62 + 48) = 0;
        *(_QWORD *)(v62 + 56) = 0;
        sub_22E6C6020((_QWORD *)(v62 + 40), v113, *((uint64_t *)&v113 + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v113 + 1) - v113) >> 3));
        v65 = v116;
        *(_OWORD *)(v62 + 64) = v115;
        *(_OWORD *)(v62 + 80) = v65;
        v66 = v62 + 96;
      }
      v119 = v66;
      v142 = (void **)&v113;
      sub_22E6C60B8(&v142);
      v142 = (void **)&v146;
      sub_22E6C60B8(&v142);
      if (v160 != v162)
        free(v160);
      if (v151 != v153)
        free(v151);
      v67 = (unint64_t *)((char *)v23 + 16);
      while (v67 != (unint64_t *)v22)
      {
        v68 = *v67;
        v67 += 2;
        if (v68 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v23 = (llvm *)(v67 - 2);
          goto LABEL_106;
        }
      }
      v23 = v22;
LABEL_106:
      ;
    }
    while (v23 != v101);
  }
  if ((*(_BYTE *)(*((_QWORD *)a1[11] + 250) + 1) & 0x40) != 0)
  {
    v143[0] = &v144;
    v69 = v98;
    *(_QWORD *)&v144 = v98;
    v143[1] = (void *)0x400000001;
    *(_QWORD *)v150 = &v150[32];
    *(_QWORD *)&v150[8] = &v150[32];
    *(_QWORD *)&v150[16] = 16;
    *(_DWORD *)&v150[24] = 0;
    v70 = (llvm *)((char *)v126 + 16 * v128);
    if ((_DWORD)v127)
    {
      if (v128)
      {
        v96 = 16 * v128;
        v71 = v126;
        while (*(_QWORD *)v71 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v71 = (llvm *)((char *)v71 + 16);
          v96 -= 16;
          if (!v96)
            goto LABEL_109;
        }
      }
      else
      {
        v71 = v126;
      }
    }
    else
    {
LABEL_109:
      v71 = (llvm *)((char *)v126 + 16 * v128);
    }
    v73 = (llvm *)((char *)v126 + 16 * v128);
LABEL_118:
    while (v71 != v73)
    {
      v75 = *(const void **)v71;
      v74 = (unint64_t *)((char *)v71 + 16);
      sub_22E3BA850((uint64_t)v150, v75);
      while (v74 != (unint64_t *)v70)
      {
        v76 = *v74;
        v74 += 2;
        if (v76 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v71 = (llvm *)(v74 - 2);
          goto LABEL_118;
        }
      }
      v71 = v70;
    }
    v77 = *(_DWORD *)(v98 + 28) & 0x7F;
    if (v98 && v77 == 22 || v77 == 19 && (v69 = *(_QWORD *)(v98 + 104)) != 0)
    {
      v78 = sub_22F257E10(v69);
      if (v78)
      {
        v79 = v78;
        while ((*(_BYTE *)(v79 + 28) & 0x80) != 0 || (*(_BYTE *)(v79 + 8) & 4) != 0)
        {
          v79 = *(_QWORD *)(v79 + 128);
          if (!v79)
            goto LABEL_133;
        }
        v82 = v143[1];
        v97 = *(_QWORD *)(v79 + 128);
        if (v97)
        {
          v80 = 1;
          do
          {
            if ((*(_BYTE *)(v97 + 28) & 0x80) == 0 && (*(_BYTE *)(v97 + 8) & 4) == 0)
              ++v80;
            v97 = *(_QWORD *)(v97 + 128);
          }
          while (v97);
          v81 = 0;
        }
        else
        {
          v81 = 0;
          v80 = 1;
        }
      }
      else
      {
LABEL_133:
        v79 = 0;
        v80 = 0;
        v81 = 1;
        v82 = v143[1];
      }
      if (v80 + (unint64_t)v82 <= HIDWORD(v143[1]))
      {
        v83 = v82;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v83 = LODWORD(v143[1]);
        v82 = v143[1];
      }
      if ((v81 & 1) == 0)
      {
        v84 = (uint64_t *)((char *)v143[0] + 8 * v83);
        *v84 = v79;
        for (j = *(_QWORD *)(v79 + 128); j; j = *(_QWORD *)(j + 128))
        {
          if ((*(_BYTE *)(j + 28) & 0x80) == 0 && (*(_BYTE *)(j + 8) & 4) == 0)
          {
            v84[1] = j;
            ++v84;
          }
        }
      }
      LODWORD(v143[1]) = v82 + v80;
    }
    if (v102)
    {
      v86 = LODWORD(v143[1]);
      if (LODWORD(v143[1]))
      {
        v87 = 0;
        do
        {
          v88 = sub_22F318070(*((_QWORD *)v143[0] + v87));
          if (v88 != v89)
          {
            v90 = v88;
            v91 = v89;
            do
            {
              sub_22E9D3014((_QWORD *)v90, v99 != 0, v7, (uint64_t)a1[11], (uint64_t)v150, (uint64_t)&v118);
              do
                v90 = *(_QWORD *)(v90 + 8) & 0xFFFFFFFFFFFFFFF8;
              while (v90 && ((*(_DWORD *)(v90 + 28) & 0x7F) != 0x19 || (*(_BYTE *)(v90 + 73) & 0x40) != 0));
            }
            while (v90 != v91);
          }
          ++v87;
        }
        while (v87 != v86);
      }
    }
    if (*(_QWORD *)&v150[8] != *(_QWORD *)v150)
      free(*(void **)&v150[8]);
    if (v143[0] != &v144)
      free(v143[0]);
  }
  v92 = (uint64_t)v123;
  v93 = *v123;
  *(_QWORD *)(v93 + 8) = v123[1];
  **(_QWORD **)(v92 + 8) = v93;
  --v124;
  sub_22E9D8FB0(v92);
  v94 = (uint64_t)a1[26];
  sub_22F2A4F2C((uint64_t)v105, v125);
  if ((char *)v119 == v118)
    v95 = 0;
  else
    v95 = v118;
  sub_22E9B83FC((uint64_t)a1, v94, v105, (uint64_t)v95, -1431655765 * ((v119 - (unint64_t)v118) >> 5));
  if (v110 != v109)
    free(v110);
  if (v108)
  {
    if (v107)
      free(v106);
    v108 = 0;
  }
  sub_22E9B8490(&v118);
  llvm::deallocate_buffer(v126, (void *)(16 * v128));
}

uint64_t sub_22E9D2C14(uint64_t result, unsigned __int16 a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v9 = result;
  if (!result || (*(_DWORD *)(result + 28) & 0x7F) != 0x16)
    goto LABEL_17;
  v10 = *(_QWORD *)(result + 120);
  if (!v10)
  {
    result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(result + 96) + 88), *(_QWORD *)(result + 96));
    v10 = *(_QWORD *)(v9 + 120);
  }
  if (v10 >= 8)
  {
    v9 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
    v11 = *(_QWORD *)(v9 + 120) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_BYTE *)(v11 + 72) & 1) != 0)
    {
      sub_22F3B48C4(v9);
      v11 = *(_QWORD *)(v9 + 120) & 0xFFFFFFFFFFFFFFF8;
    }
    v12 = *(unsigned int *)(v11 + 24);
    if ((_DWORD)v12)
    {
      v13 = *(uint64_t **)(v11 + 16);
      v14 = 8 * v12;
      do
      {
        v15 = *v13++;
        sub_22E9D2C14(v15, a2, a3, a4, a5);
        v14 -= 8;
      }
      while (v14);
    }
    v16 = sub_22F257E10(v9);
    if (v16)
    {
      v17 = v16;
      while ((*(_BYTE *)(v17 + 28) & 0x80) != 0 || (*(_BYTE *)(v17 + 8) & 4) != 0)
      {
        v17 = *(_QWORD *)(v17 + 128);
        if (!v17)
          goto LABEL_16;
      }
LABEL_47:
      sub_22E9D2C14(v17, a2, a3, a4, 0);
      while (1)
      {
        v17 = *(_QWORD *)(v17 + 128);
        if (!v17)
          break;
        if ((*(_BYTE *)(v17 + 28) & 0x80) == 0 && (*(_BYTE *)(v17 + 8) & 4) == 0)
          goto LABEL_47;
      }
    }
LABEL_16:
    result = sub_22F3B46CC(v9);
    if (result)
    {
      v35 = sub_22F3B46CC(v9);
      result = sub_22E9D2C14(v35, a2, a3, a4, 0);
      if (!v9)
        goto LABEL_25;
LABEL_18:
      if ((*(_DWORD *)(v9 + 28) & 0x7F) == 0x13)
      {
        v18 = *(_QWORD *)(v9 + 120) & 0xFFFFFFFFFFFFFFF8;
        v19 = *(unsigned int *)(v18 + 24);
        if ((_DWORD)v19)
        {
          v20 = *(uint64_t **)(v18 + 16);
          v21 = 8 * v19;
          do
          {
            v22 = *v20++;
            result = sub_22E9D2C14(v22, a2, a3, a4, a5);
            v21 -= 8;
          }
          while (v21);
        }
        if ((a5 & 1) != 0)
        {
          result = *(_QWORD *)(v9 + 104);
          if (result)
            result = sub_22E9D2C14(result, a2, a3, a4, 0);
        }
      }
LABEL_25:
      if (v9 && (*(_DWORD *)(v9 + 28) & 0x7F) == 0x17)
      {
        v23 = *(_QWORD *)(v9 + 104);
        if (!v23)
        {
          result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v9 + 96) + 88), *(_QWORD *)(v9 + 96));
          v23 = *(_QWORD *)(v9 + 104);
        }
        if (v23 < 8)
          return result;
        v9 = *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF8);
        v24 = *(_QWORD *)(v9 + 104) & 0xFFFFFFFFFFFFFFF8;
        v25 = *(unsigned int *)(v24 + 16);
        if ((_DWORD)v25)
        {
          v26 = *(uint64_t **)(v24 + 8);
          v27 = 8 * v25;
          do
          {
            v28 = *v26++;
            sub_22E9D2C14(v28, a2, a3, a4, 0);
            v27 -= 8;
          }
          while (v27);
        }
      }
      result = sub_22F2781C0(v9);
      if (result != v29)
      {
        v30 = result;
        v31 = v29;
        v32 = a2;
        v33 = a2 & 0xFF00;
        if ((_DWORD)a5)
          v34 = 4;
        else
          v34 = 0;
        do
        {
          if ((!v33 || ((*(_DWORD *)(v30 + 56) >> 17) & 1) == v32)
            && (a3 < 0x10
             || *(_QWORD *)(*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v30 + 80) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)))
          {
            v36 = *(_QWORD *)(v30 + 40);
            result = (uint64_t)sub_22F319FA0(a4, &v36);
            *(_QWORD *)(result + 8) = v30 & 0xFFFFFFFFFFFFFFFBLL | v34;
          }
          do
            v30 = *(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v30 && (*(_DWORD *)(v30 + 28) & 0x7F) != 0x18);
        }
        while (v30 != v31);
      }
      return result;
    }
LABEL_17:
    if (!v9)
      goto LABEL_25;
    goto LABEL_18;
  }
  return result;
}

void sub_22E9D2F30(uint64_t a1, char a2, uint64_t a3, uint64_t *a4)
{
  std::string::size_type size;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  std::string *p_p;
  __int16 v12;
  std::string __p;
  uint64_t v14;

  v14 = a1;
  sub_22E8A9D90((uint64_t)a4, 7, "");
  sub_22E9B7018(&__p, a2, &v14);
  size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    v9 = *a4;
    v12 = 260;
    p_p = &__p;
    v10 = sub_22F2F27DC(v9, (const char **)&p_p);
    sub_22E8A9B38((uint64_t)a4, (uint64_t)v10);
  }
  v8 = sub_22E9D1DF8(v14, a3, *a4);
  sub_22E8A9B38((uint64_t)a4, (uint64_t)v8);
  sub_22E8A9D90((uint64_t)a4, 8, "");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22E9D3014(_QWORD *a1, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  const void *v18;
  size_t v19;
  unsigned int v20;
  void **p_dst;
  uint64_t v22;
  size_t v23;
  void **v24;
  uint64_t v25;
  _BOOL4 v26;
  _BOOL4 v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  char v34;
  _BOOL4 v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  const void *p_p;
  size_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  const void *v58;
  size_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  const void *v65;
  size_t v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  BOOL v77;
  uint64_t v78;
  const void *v79;
  size_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  const void *v86;
  size_t v87;
  uint64_t v88;
  char v89;
  _BYTE *v90;
  void **v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  const void *v101;
  size_t v102;
  uint64_t v103;
  char v104;
  uint64_t *v105;
  size_t v106;
  uint64_t v107;
  void **v108;
  unint64_t v109;
  _DWORD *v110;
  unsigned int v111;
  const void *v112;
  size_t v113;
  uint64_t v114;
  char v115;
  const void *v116;
  size_t v117;
  uint64_t *v118;
  const void *v119;
  char v120;
  const void *v121;
  size_t v122;
  const void *v123;
  char v124;
  const void *v125;
  size_t v126;
  const void *v127;
  char v128;
  const void *v129;
  size_t v130;
  uint64_t v131;
  char v132;
  const void *v133;
  size_t v134;
  uint64_t v135;
  char v136;
  const void *v137;
  size_t v138;
  const void *v139;
  char v140;
  const void *v141;
  size_t v142;
  const void *v143;
  size_t v144;
  const void *v145;
  char v146;
  const void *v147;
  size_t v148;
  uint64_t v149;
  char v150;
  unint64_t v151;
  uint64_t v152;
  const void *v153;
  size_t v154;
  uint64_t v155;
  char v156;
  const void *v157;
  size_t v158;
  uint64_t v159;
  char v160;
  const void *v161;
  size_t v162;
  uint64_t v163;
  char v164;
  const void *v165;
  size_t v166;
  uint64_t v167;
  char v168;
  const void *v169;
  size_t v170;
  uint64_t v171;
  char v172;
  const void *v173;
  size_t v174;
  uint64_t v175;
  char v176;
  int v177;
  int *v178;
  unsigned int v179;
  _BYTE *v180;
  uint64_t v181;
  unint64_t v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  int *v187;
  unsigned int v188;
  _BYTE *v189;
  uint64_t v190;
  unsigned int v191;
  unint64_t v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  size_t v197;
  char *v198;
  const void *v199;
  _BYTE *v200;
  unint64_t v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  _DWORD *v209;
  int v210;
  int v211;
  size_t v213;
  char *v214;
  const void *v215;
  _BYTE *v216;
  char *v217;
  _BYTE *v218;
  unint64_t v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  uint64_t v223;
  _BYTE *v224;
  unint64_t v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;
  unint64_t v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  int v239;
  int v240;
  size_t v242;
  char *v243;
  const void *v244;
  _BYTE *v245;
  unint64_t v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  uint64_t v250;
  size_t v251;
  char *v252;
  const void *v253;
  _BYTE *v254;
  unint64_t v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  uint64_t v259;
  size_t v260;
  char *v261;
  const void *v262;
  _BYTE *v263;
  unint64_t v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  uint64_t v268;
  size_t v269;
  char *v270;
  const void *v271;
  _BYTE *v272;
  unint64_t v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  uint64_t v277;
  size_t v278;
  char *v279;
  const void *v280;
  _BYTE *v281;
  unint64_t v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  uint64_t v286;
  size_t v287;
  char *v288;
  const void *v289;
  _BYTE *v290;
  unint64_t v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  uint64_t v295;
  size_t v296;
  char *v297;
  const void *v298;
  _BYTE *v299;
  size_t v300;
  char *v301;
  const void *v302;
  _BYTE *v303;
  unint64_t v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  int v314;
  BOOL v315;
  size_t v316;
  char *v317;
  const void *v318;
  _BYTE *v319;
  unint64_t v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  uint64_t v324;
  size_t v325;
  char *v326;
  const void *v327;
  _BYTE *v328;
  unint64_t v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  uint64_t v333;
  size_t v334;
  char *v335;
  const void *v336;
  _BYTE *v337;
  unint64_t v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  uint64_t v342;
  size_t v343;
  char *v344;
  const void *v345;
  _BYTE *v346;
  unint64_t v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  uint64_t v351;
  size_t v352;
  char *v353;
  const void *v354;
  _BYTE *v355;
  unint64_t v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  uint64_t v360;
  size_t v361;
  char *v362;
  const void *v363;
  _BYTE *v364;
  unint64_t v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  uint64_t v369;
  unint64_t v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  uint64_t v374;
  unsigned int *v375;
  size_t v376;
  _BYTE *v377;
  _BYTE *v378;
  uint64_t v379;
  unint64_t v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  uint64_t v384;
  int v385;
  unsigned int v386;
  int v387;
  int v388;
  __int128 v389;
  uint64_t *v390;
  _BYTE *v391;
  int v392;
  uint64_t *v393;
  __int128 v395;
  __int128 v396;
  int v397;
  _QWORD v398[3];
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  int v403;
  _QWORD v404[3];
  __int128 v405;
  __int128 v406;
  __int128 v407;
  _BYTE v408[20];
  _QWORD v409[3];
  __int128 v410;
  __int128 v411;
  __int128 v412;
  _BYTE v413[20];
  _QWORD v414[3];
  __int128 v415;
  __int128 v416;
  __int128 v417;
  _BYTE v418[20];
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  _BYTE v425[20];
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  _BYTE v432[20];
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  _BYTE v439[20];
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  _BYTE v446[20];
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  _BYTE v453[20];
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  _BYTE v460[20];
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  _BYTE v467[20];
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  _BYTE v474[20];
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  __int128 v478;
  __int128 v479;
  __int128 v480;
  _BYTE v481[20];
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  _BYTE v488[20];
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  _BYTE v495[20];
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  _BYTE v502[20];
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  _BYTE v509[20];
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  __int128 v513;
  __int128 v514;
  void *__p;
  size_t v516;
  void **v517;
  __int16 v518;
  void *v519;
  size_t v520;
  char v521;
  __int128 v522;
  _BYTE v523[20];
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  int v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  int v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  int v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  __int128 v551;
  __int128 v552;
  void **__dst;
  size_t v554;
  uint64_t v555;
  _QWORD v556[2];
  void **v557;
  size_t v558;
  const char *v559;
  __int16 v560;
  void *v561;
  uint64_t v562;
  char v563;
  uint64_t v564;
  uint64_t v565;
  _OWORD v566[3];
  void *v567;
  uint64_t v568;
  _BYTE v569[64];
  void *v570;
  uint64_t v571;
  _QWORD v572[6];

  v572[3] = *MEMORY[0x24BDAC8D0];
  v6 = a1[5];
  v7 = v6 & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 & 7) != 0 || v7 == 0;
  if (v8 || !**(_DWORD **)(v7 + 16))
    return;
  v14 = *(_QWORD *)(a6 + 184);
  v15 = *(_QWORD *)(v14 + 88);
  v556[0] = ((*(_QWORD *)(*(_QWORD *)(v15 + 2000) + 100) >> 12) & 0x2000000 | sub_22E8FCD8C(v15, *(_QWORD *)(v14 + 80)) & 0xFFFFDFFFFDF9CFFFLL) ^ 0x200002043000;
  v556[1] = v16;
  v393 = (uint64_t *)a6;
  v389 = *(_OWORD *)(a6 + 192);
  v566[0] = v389;
  memset(&v566[1], 0, 32);
  v567 = v569;
  v568 = 0x400000000;
  v570 = v572;
  v571 = 0x200000000;
  v390 = *(uint64_t **)(a4 + 15200);
  v17 = *(unsigned int **)(v7 + 16);
  v20 = *v17;
  v18 = v17 + 4;
  v19 = v20;
  if (v20 >= 0x17uLL)
  {
    if ((v19 | 7) == 0x17)
      v22 = (v19 & 0xFFFFFFF8) + 8;
    else
      v22 = v19 | 7;
    p_dst = (void **)operator new(v22 + 1);
    v555 = v22 - 0x7FFFFFFFFFFFFFFFLL;
    __dst = p_dst;
    v554 = v19;
    goto LABEL_13;
  }
  HIBYTE(v555) = v19;
  p_dst = (void **)&__dst;
  if (v19)
LABEL_13:
    memmove(p_dst, v18, v19);
  *((_BYTE *)p_dst + v19) = 0;
  v23 = HIBYTE(v555) & 0x7F;
  if (v555 < 0)
    v23 = v554;
  if (v23)
  {
    v24 = __dst;
    if (v555 >= 0)
      v24 = (void **)&__dst;
    v25 = *(unsigned __int8 *)v24;
    if ((word_22F4ADB24[v25] & 0x40) != 0)
      LOBYTE(v25) = v25 - 32;
    *(_BYTE *)v24 = v25;
  }
  if (a3 < 0x10)
  {
    v26 = 1;
    v27 = 1;
    goto LABEL_33;
  }
  v28 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (v28)
  {
    v29 = *(_DWORD *)(v28 + 16);
    if ((v29 & 0xFE) == 0x28)
      goto LABEL_746;
  }
  v30 = a3 & 0xFFFFFFFFFFFFFFF0;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v28 = sub_22F10CF48(v28);
    if (!v28)
    {
      v30 = a3 & 0xFFFFFFFFFFFFFFF0;
      goto LABEL_27;
    }
    v29 = *(_DWORD *)(v28 + 16);
LABEL_746:
    if ((v29 & 0x100000) != 0)
    {
      do
      {
        v28 = *(_QWORD *)(*(_QWORD *)(v28 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v28)
        {
          v385 = *(_DWORD *)(v28 + 16);
          if ((v385 & 0xFE) == 0x28)
            continue;
        }
        v28 = sub_22F10CF48(v28);
        v385 = *(_DWORD *)(v28 + 16);
      }
      while ((v385 & 0x100000) != 0);
    }
    v30 = *(_QWORD *)(v28 + 32) & 0xFFFFFFFFFFFFFFF0;
  }
LABEL_27:
  v26 = *(_QWORD *)(*(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((a1[7] & 0xFFFFFFFFFFFFFFF0)
                                                                                          + 8) & 0xFFFFFFFFFFFFFFF0);
  v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v31)
    v32 = *(_DWORD *)(v31 + 16) == 11;
  else
    v32 = 0;
  v27 = v32 && (*(_DWORD *)(v31 + 16) & 0xFF80000) == 86507520;
LABEL_33:
  v33 = a5;
  if (!a2)
  {
LABEL_87:
    v392 = 0;
    goto LABEL_88;
  }
  sub_22E3BA850(a5, (const void *)(v7 | 1));
  if (v34)
    v35 = v26;
  else
    v35 = 0;
  if (v35 && !a1[13])
  {
    if (a3 <= 0xF)
      sub_22E9D2F30(a1[7], 0, (uint64_t)v556, (uint64_t *)v566);
    v560 = 261;
    v557 = (void **)v18;
    v558 = v19;
    v391 = sub_22F2F27DC(v389, (const char **)&v557);
    sub_22E8A9AD8((uint64_t)v566, (uint64_t)v391);
    *(_QWORD *)&v545 = 0;
    *((_QWORD *)&v545 + 1) = sub_22F2F28A4((uint64_t)v566);
    v546 = xmmword_22F469FB0;
    v547 = 0;
    v550 = 0;
    v548 = 0;
    v549 = 0;
    LOBYTE(v551) = v551 & 0xC0;
    *((_QWORD *)&v551 + 1) = 0;
    v552 = 0uLL;
    v230 = v393[1];
    if (v230 >= v393[2])
    {
      v234 = sub_22E9D8E48(v393, (uint64_t)&v545);
    }
    else
    {
      v231 = v545;
      v232 = v546;
      *(_DWORD *)(v230 + 32) = v547;
      *(_OWORD *)v230 = v231;
      *(_OWORD *)(v230 + 16) = v232;
      *(_QWORD *)(v230 + 48) = 0;
      *(_QWORD *)(v230 + 56) = 0;
      *(_QWORD *)(v230 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v230 + 40), v548, v549, 0x6DB6DB6DB6DB6DB7 * ((v549 - v548) >> 3));
      v233 = v552;
      v33 = a5;
      *(_OWORD *)(v230 + 64) = v551;
      *(_OWORD *)(v230 + 80) = v233;
      v234 = v230 + 96;
    }
    v393[1] = v234;
    v557 = (void **)&v548;
    sub_22E6C60B8(&v557);
  }
  else
  {
    v391 = 0;
  }
  if (a3 >= 0x10)
  {
    v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v41 = *(_DWORD *)(v40 + 16);
    if (v40)
      v42 = v41 == 11;
    else
      v42 = 0;
    if (v42)
    {
      if (((*(_DWORD *)(v40 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
        goto LABEL_74;
    }
    else if (v40 && v41 == 44)
    {
      v43 = sub_22F114198(*(_QWORD *)(v40 + 24));
      if (((*(_BYTE *)(v43 + 74) & 1) != 0 || *(_QWORD *)(v43 + 128) > 7uLL)
        && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v40 + 24)) + 76) & 0x80) == 0)
      {
        goto LABEL_74;
      }
    }
    else if (v41 == 9)
    {
      goto LABEL_74;
    }
    v44 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
LABEL_69:
    v45 = *(_QWORD *)(*(_QWORD *)(v44 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v45)
      v46 = (*(_DWORD *)(v45 + 16) & 0xFF800FF) == 87031819;
    else
      v46 = 0;
    if (!v46)
      goto LABEL_84;
    goto LABEL_74;
  }
  v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[7] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v37 = *(_DWORD *)(v36 + 16);
  if (v36)
    v38 = v37 == 11;
  else
    v38 = 0;
  if (v38)
  {
    if (((*(_DWORD *)(v36 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_66;
  }
  else
  {
    if (v36 && v37 == 44)
    {
      v39 = sub_22F114198(*(_QWORD *)(v36 + 24));
      if (((*(_BYTE *)(v39 + 74) & 1) != 0 || *(_QWORD *)(v39 + 128) > 7uLL)
        && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v36 + 24)) + 76) & 0x80) == 0)
      {
        goto LABEL_74;
      }
      goto LABEL_66;
    }
    if (v37 != 9)
    {
LABEL_66:
      v44 = *(_QWORD *)(a1[7] & 0xFFFFFFFFFFFFFFF0);
      goto LABEL_69;
    }
  }
LABEL_74:
  v557 = (void **)"is";
  v559 = (const char *)&__dst;
  v560 = 1027;
  llvm::Twine::str((llvm::Twine *)&v557);
  if (SHIBYTE(v517) >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (SHIBYTE(v517) >= 0)
    v48 = HIBYTE(v517) & 0x7F;
  else
    v48 = v516;
  v49 = sub_22E3CB704(*(llvm::StringMapImpl **)(a4 + 15192), p_p, v48);
  v50 = v33;
  v51 = v49;
  sub_22E3BA850(v50, (const void *)(v49 | 1));
  if (v52)
  {
    if (a3 <= 0xF)
    {
      sub_22E8A9D90((uint64_t)v566, 7, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"BOOL");
      sub_22E8A9D90((uint64_t)v566, 8, "");
    }
    v178 = *(int **)(v51 + 16);
    v179 = *v178;
    v560 = 261;
    v557 = (void **)(v178 + 4);
    v558 = v179;
    v180 = sub_22F2F27DC(v389, (const char **)&v557);
    sub_22E8A9AD8((uint64_t)v566, (uint64_t)v180);
    v181 = sub_22F2F28A4((uint64_t)v566);
    *(_QWORD *)&v537 = 0;
    *((_QWORD *)&v537 + 1) = v181;
    v538 = xmmword_22F469FB0;
    v539 = 0;
    v542 = 0;
    v540 = 0;
    v541 = 0;
    LOBYTE(v543) = v543 & 0xC0;
    *((_QWORD *)&v543 + 1) = 0;
    v544 = 0uLL;
    v182 = v393[1];
    if (v182 >= v393[2])
    {
      v186 = sub_22E9D8E48(v393, (uint64_t)&v537);
    }
    else
    {
      v183 = v537;
      v184 = v538;
      *(_DWORD *)(v182 + 32) = v539;
      *(_OWORD *)v182 = v183;
      *(_OWORD *)(v182 + 16) = v184;
      *(_QWORD *)(v182 + 48) = 0;
      *(_QWORD *)(v182 + 56) = 0;
      *(_QWORD *)(v182 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v182 + 40), v540, v541, 0x6DB6DB6DB6DB6DB7 * ((v541 - v540) >> 3));
      v185 = v544;
      *(_OWORD *)(v182 + 64) = v543;
      *(_OWORD *)(v182 + 80) = v185;
      v186 = v182 + 96;
    }
    v393[1] = v186;
    v557 = (void **)&v540;
    sub_22E6C60B8(&v557);
  }
  if (SHIBYTE(v517) < 0)
    operator delete(__p);
  v33 = a5;
LABEL_84:
  if (!v27)
    goto LABEL_87;
  if (a1[14])
  {
    v392 = 1;
  }
  else
  {
    v557 = (void **)"set";
    v559 = (const char *)&__dst;
    v560 = 1027;
    llvm::Twine::str((llvm::Twine *)&v557);
    if (SHIBYTE(v517) >= 0)
      v79 = &__p;
    else
      v79 = __p;
    if (SHIBYTE(v517) >= 0)
      v80 = HIBYTE(v517) & 0x7F;
    else
      v80 = v516;
    v81 = sub_22E3CB704(*(llvm::StringMapImpl **)(a4 + 15192), v79, v80);
    v82 = v33;
    v83 = v81;
    sub_22E3BA850(v82, (const void *)(v81 | 2));
    if (v84)
    {
      if (a3 <= 0xF)
      {
        sub_22E8A9D90((uint64_t)v566, 7, "");
        sub_22E8A9B38((uint64_t)v566, (uint64_t)"void");
        sub_22E8A9D90((uint64_t)v566, 8, "");
      }
      v375 = *(unsigned int **)(v83 + 16);
      v376 = *v375;
      v560 = 773;
      v557 = (void **)(v375 + 4);
      v558 = v376;
      v559 = ":";
      v377 = sub_22F2F27DC(v389, (const char **)&v557);
      sub_22E8A9AD8((uint64_t)v566, (uint64_t)v377);
      sub_22E9D2F30(a1[7], 0, (uint64_t)v556, (uint64_t *)v566);
      v378 = v391;
      if (!v391)
      {
        v560 = 261;
        v557 = (void **)v18;
        v558 = v19;
        v378 = sub_22F2F27DC(v389, (const char **)&v557);
      }
      sub_22E8A9B38((uint64_t)v566, (uint64_t)v378);
      v379 = sub_22F2F28A4((uint64_t)v566);
      *(_QWORD *)&v529 = 0;
      *((_QWORD *)&v529 + 1) = v379;
      v530 = xmmword_22F469FB0;
      v531 = 0;
      v534 = 0;
      v532 = 0;
      v533 = 0;
      LOBYTE(v535) = v535 & 0xC0;
      *((_QWORD *)&v535 + 1) = 0;
      v536 = 0uLL;
      v380 = v393[1];
      if (v380 >= v393[2])
      {
        v384 = sub_22E9D8E48(v393, (uint64_t)&v529);
      }
      else
      {
        v381 = v529;
        v382 = v530;
        *(_DWORD *)(v380 + 32) = v531;
        *(_OWORD *)v380 = v381;
        *(_OWORD *)(v380 + 16) = v382;
        *(_QWORD *)(v380 + 48) = 0;
        *(_QWORD *)(v380 + 56) = 0;
        *(_QWORD *)(v380 + 40) = 0;
        sub_22E6C6020((_QWORD *)(v380 + 40), v532, v533, 0x6DB6DB6DB6DB6DB7 * ((v533 - v532) >> 3));
        v383 = v536;
        *(_OWORD *)(v380 + 64) = v535;
        *(_OWORD *)(v380 + 80) = v383;
        v384 = v380 + 96;
      }
      v393[1] = v384;
      v557 = (void **)&v532;
      sub_22E6C60B8(&v557);
    }
    if (SHIBYTE(v517) < 0)
      operator delete(__p);
    v392 = 1;
    v33 = a5;
  }
LABEL_88:
  v53 = *(_QWORD *)(a1[7] & 0xFFFFFFFFFFFFFFF0);
  if (v53 && *(_BYTE *)(v53 + 16) == 32
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v53 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
    && (v53 = sub_22F10CF48(v53)) != 0)
  {
    v97 = sub_22F31179C(v53);
    if (v97)
    {
      v98 = v97;
      v55 = 40;
      v57 = 40;
      if ((sub_22E9F2F00(v97, "NSMutableArray", 0xEuLL) & 1) == 0)
      {
        v57 = 55;
        if (sub_22E9F2F00(v98, "NSArray", 7uLL))
          v55 = 40;
        else
          v55 = 55;
      }
      v54 = 40;
      if ((sub_22E9F2F00(v98, "NSMutableSet", 0xCuLL) & 1) != 0)
      {
        v56 = 40;
      }
      else
      {
        v177 = sub_22E9F2F00(v98, "NSSet", 5uLL);
        v56 = 55;
        if (v177)
          v54 = 40;
        else
          v54 = 55;
      }
    }
    else
    {
      v54 = 40;
      v55 = 40;
      v56 = 40;
      v57 = 40;
    }
  }
  else
  {
    v54 = 55;
    v55 = 55;
    v56 = 55;
    v57 = 55;
  }
  if (!a2)
  {
    if (a3 < 0x10)
      goto LABEL_107;
    v69 = a3 & 0xFFFFFFFFFFFFFFF0;
    v74 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v74 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
    {
      if (*(_BYTE *)(v74 + 16) != 32)
        v74 = sub_22F10CF48(v74);
      if (sub_22F31179C(v74))
      {
        v235 = *(_QWORD *)v69;
        if (!*(_QWORD *)v69 || *(_BYTE *)(v235 + 16) != 32)
          v235 = sub_22F10CF48(v235);
        v236 = *(_QWORD *)(sub_22F31179C(v235) + 40);
        if ((v236 & 7) == 0)
        {
          v237 = v236 & 0xFFFFFFFFFFFFFFF8;
          if (v237)
          {
            v238 = *(_QWORD *)(v237 + 16);
            if (*(_DWORD *)v238 == 5)
            {
              v239 = *(_DWORD *)(v238 + 16);
              v240 = *(unsigned __int8 *)(v238 + 20);
              if (v239 == 1699959630 && v240 == 116)
              {
LABEL_107:
                v557 = (void **)"keyPathsForValuesAffecting";
                v559 = (const char *)&__dst;
                v560 = 1027;
                llvm::Twine::str((llvm::Twine *)&v557);
                if (SHIBYTE(v517) >= 0)
                  v65 = &__p;
                else
                  v65 = __p;
                if (SHIBYTE(v517) >= 0)
                  v66 = HIBYTE(v517) & 0x7F;
                else
                  v66 = v516;
                v67 = sub_22E3CB704(*(llvm::StringMapImpl **)(a4 + 15192), v65, v66);
                sub_22E3BA850(v33, (const void *)(v67 | 1));
                if (v68)
                {
                  if (a3 <= 0xF)
                  {
                    sub_22E8A9D90((uint64_t)v566, 7, "");
                    sub_22E8A9B38((uint64_t)v566, (uint64_t)"NSSet<NSString *> *");
                    sub_22E8A9D90((uint64_t)v566, 8, "");
                  }
                  v560 = 260;
                  v557 = &__p;
                  v218 = sub_22F2F27DC(v389, (const char **)&v557);
                  sub_22E8A9AD8((uint64_t)v566, (uint64_t)v218);
                  *(_QWORD *)&v401 = 0;
                  *((_QWORD *)&v401 + 1) = sub_22F2F28A4((uint64_t)v566);
                  v402 = xmmword_22F469FC0;
                  v403 = 0;
                  memset(v404, 0, sizeof(v404));
                  LOBYTE(v405) = v405 & 0xC0;
                  v406 = 0uLL;
                  *((_QWORD *)&v405 + 1) = 0;
                  v219 = v393[1];
                  if (v219 >= v393[2])
                  {
                    v223 = sub_22E9D8E48(v393, (uint64_t)&v401);
                  }
                  else
                  {
                    v220 = v401;
                    v221 = v402;
                    *(_DWORD *)(v219 + 32) = v403;
                    *(_OWORD *)v219 = v220;
                    *(_OWORD *)(v219 + 16) = v221;
                    *(_QWORD *)(v219 + 48) = 0;
                    *(_QWORD *)(v219 + 56) = 0;
                    *(_QWORD *)(v219 + 40) = 0;
                    sub_22E6C6020((_QWORD *)(v219 + 40), 0, 0, 0);
                    v222 = v406;
                    *(_OWORD *)(v219 + 64) = v405;
                    *(_OWORD *)(v219 + 80) = v222;
                    v223 = v219 + 96;
                  }
                  v33 = a5;
                  v393[1] = v223;
                  v557 = (void **)v404;
                  sub_22E6C60B8(&v557);
                }
                if (SHIBYTE(v517) < 0)
                  operator delete(__p);
                if (a3 < 0x10)
                  goto LABEL_156;
                v69 = a3 & 0xFFFFFFFFFFFFFFF0;
              }
            }
          }
        }
      }
    }
    v75 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v69 + 8) & 0xFFFFFFFFFFFFFFF0);
    v76 = *(_DWORD *)(v75 + 16);
    if (v75)
      v77 = v76 == 11;
    else
      v77 = 0;
    if (v77)
    {
      if (((*(_DWORD *)(v75 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
        goto LABEL_156;
    }
    else if (v75 && v76 == 44)
    {
      v78 = sub_22F114198(*(_QWORD *)(v75 + 24));
      if (((*(_BYTE *)(v78 + 74) & 1) != 0 || *(_QWORD *)(v78 + 128) > 7uLL)
        && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v75 + 24)) + 76) & 0x80) == 0)
      {
        goto LABEL_156;
      }
    }
    else if (v76 == 9)
    {
      goto LABEL_156;
    }
    v85 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v69 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v85 || (*(_DWORD *)(v85 + 16) & 0xFF800FF) != 0x530000B)
      goto LABEL_343;
LABEL_156:
    v557 = (void **)"automaticallyNotifiesObserversOf";
    v559 = (const char *)&__dst;
    v560 = 1027;
    llvm::Twine::str((llvm::Twine *)&v557);
    if (SHIBYTE(v517) >= 0)
      v86 = &__p;
    else
      v86 = __p;
    if (SHIBYTE(v517) >= 0)
      v87 = HIBYTE(v517) & 0x7F;
    else
      v87 = v516;
    v88 = sub_22E3CB704(*(llvm::StringMapImpl **)(a4 + 15192), v86, v87);
    sub_22E3BA850(v33, (const void *)(v88 | 1));
    if (!v89)
    {
LABEL_341:
      if (SHIBYTE(v517) < 0)
        operator delete(__p);
      goto LABEL_343;
    }
    if (a3 <= 0xF)
    {
      sub_22E8A9D90((uint64_t)v566, 7, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"BOOL");
      sub_22E8A9D90((uint64_t)v566, 8, "");
    }
    v560 = 260;
    v557 = &__p;
    v90 = sub_22F2F27DC(v389, (const char **)&v557);
    sub_22E8A9AD8((uint64_t)v566, (uint64_t)v90);
    *(_QWORD *)&v395 = 0;
    *((_QWORD *)&v395 + 1) = sub_22F2F28A4((uint64_t)v566);
    v396 = xmmword_22F469FC0;
    v397 = 0;
    v91 = (void **)v398;
    memset(v398, 0, sizeof(v398));
    LOBYTE(v399) = v399 & 0xC0;
    v400 = 0uLL;
    *((_QWORD *)&v399 + 1) = 0;
    v92 = v393[1];
    if (v92 >= v393[2])
    {
      v96 = sub_22E9D8E48(v393, (uint64_t)&v395);
    }
    else
    {
      v93 = v395;
      v94 = v396;
      *(_DWORD *)(v92 + 32) = v397;
      *(_OWORD *)v92 = v93;
      *(_OWORD *)(v92 + 16) = v94;
      *(_QWORD *)(v92 + 48) = 0;
      *(_QWORD *)(v92 + 56) = 0;
      *(_QWORD *)(v92 + 40) = 0;
      v95 = v400;
      *(_OWORD *)(v92 + 64) = v399;
      *(_OWORD *)(v92 + 80) = v95;
      v96 = v92 + 96;
    }
    v393[1] = v96;
LABEL_733:
    v557 = v91;
    sub_22E6C60B8(&v557);
    goto LABEL_341;
  }
  v387 = v56;
  v388 = v57;
  v386 = v54;
  if (a3 >= 0x10)
  {
    v64 = a3 & 0xFFFFFFFFFFFFFFF0;
    v70 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v71 = *(_DWORD *)(v70 + 16);
    if (v70)
      v72 = v71 == 11;
    else
      v72 = 0;
    if (v72)
    {
      if (((*(_DWORD *)(v70 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
        goto LABEL_175;
    }
    else if (v70 && v71 == 44)
    {
      v73 = sub_22F114198(*(_QWORD *)(v70 + 24));
      if ((*(_BYTE *)(v73 + 74) & 1) == 0 && *(_QWORD *)(v73 + 128) <= 7uLL
        || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v70 + 24)) + 76) & 0x80) != 0)
      {
        goto LABEL_175;
      }
    }
    else if (v71 != 9)
    {
      goto LABEL_175;
    }
  }
  v557 = (void **)"countOf";
  v559 = (const char *)&__dst;
  v560 = 1027;
  llvm::Twine::str((llvm::Twine *)&v557);
  if (SHIBYTE(v517) >= 0)
    v58 = &__p;
  else
    v58 = __p;
  if (SHIBYTE(v517) >= 0)
    v59 = HIBYTE(v517) & 0x7F;
  else
    v59 = v516;
  v60 = sub_22E3CB704(*(llvm::StringMapImpl **)(a4 + 15192), v58, v59);
  v61 = v33;
  v62 = v60;
  sub_22E3BA850(v61, (const void *)(v60 | 1));
  if (v63)
  {
    if (a3 <= 0xF)
    {
      sub_22E8A9D90((uint64_t)v566, 7, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"NSUInteger");
      sub_22E8A9D90((uint64_t)v566, 8, "");
    }
    v187 = *(int **)(v62 + 16);
    v188 = *v187;
    v560 = 261;
    v557 = (void **)(v187 + 4);
    v558 = v188;
    v189 = sub_22F2F27DC(v389, (const char **)&v557);
    sub_22E8A9AD8((uint64_t)v566, (uint64_t)v189);
    v190 = sub_22F2F28A4((uint64_t)v566);
    if (v386 >= v55)
      v191 = v55;
    else
      v191 = v386;
    *(_QWORD *)&v522 = 0;
    *((_QWORD *)&v522 + 1) = v190;
    *(_DWORD *)v523 = v191;
    *(_OWORD *)&v523[4] = xmmword_22F469FD0;
    v526 = 0;
    v524 = 0;
    v525 = 0;
    LOBYTE(v527) = v527 & 0xC0;
    *((_QWORD *)&v527 + 1) = 0;
    v528 = 0uLL;
    v192 = v393[1];
    if (v192 >= v393[2])
    {
      v196 = sub_22E9D8E48(v393, (uint64_t)&v522);
    }
    else
    {
      v193 = v522;
      v194 = *(_OWORD *)v523;
      *(_DWORD *)(v192 + 32) = *(_DWORD *)&v523[16];
      *(_OWORD *)v192 = v193;
      *(_OWORD *)(v192 + 16) = v194;
      *(_QWORD *)(v192 + 48) = 0;
      *(_QWORD *)(v192 + 56) = 0;
      *(_QWORD *)(v192 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v192 + 40), v524, v525, 0x6DB6DB6DB6DB6DB7 * ((v525 - v524) >> 3));
      v195 = v528;
      *(_OWORD *)(v192 + 64) = v527;
      *(_OWORD *)(v192 + 80) = v195;
      v196 = v192 + 96;
    }
    v393[1] = v196;
    v557 = (void **)&v524;
    sub_22E6C60B8(&v557);
  }
  if (SHIBYTE(v517) < 0)
    operator delete(__p);
  v33 = a5;
  if (a3 < 0x10)
    goto LABEL_176;
  v64 = a3 & 0xFFFFFFFFFFFFFFF0;
LABEL_175:
  v99 = *(_QWORD *)v64;
  v100 = *(_QWORD *)(*(_QWORD *)v64 + 8) & 0xFFFFFFFFFFFFFFF0;
  if (*(_BYTE *)(*(_QWORD *)v100 + 16) != 32)
  {
    v105 = v393;
    goto LABEL_200;
  }
LABEL_176:
  __p = "objectIn";
  v517 = (void **)&__dst;
  v518 = 1027;
  v557 = &__p;
  v559 = "AtIndex";
  v560 = 770;
  llvm::Twine::str((llvm::Twine *)&v557);
  if (v521 >= 0)
    v101 = &v519;
  else
    v101 = v519;
  if (v521 >= 0)
    v102 = v521 & 0x7F;
  else
    v102 = v520;
  v103 = sub_22E3CB704(*(llvm::StringMapImpl **)(a4 + 15192), v101, v102);
  sub_22E3BA850(v33, (const void *)(v103 | 2));
  if (v104)
  {
    if (a3 <= 0xF)
    {
      sub_22E8A9D90((uint64_t)v566, 7, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"id");
      sub_22E8A9D90((uint64_t)v566, 8, "");
    }
    if (v521 >= 0)
      v197 = v521 & 0x7F;
    else
      v197 = v520;
    sub_22E3B8BF4((uint64_t)&__p, v197 + 1);
    if (SHIBYTE(v517) >= 0)
      v198 = (char *)&__p;
    else
      v198 = (char *)__p;
    if (v197)
    {
      if (v521 >= 0)
        v199 = &v519;
      else
        v199 = v519;
      memmove(v198, v199, v197);
    }
    *(_WORD *)&v198[v197] = 58;
    v560 = 260;
    v557 = &__p;
    v200 = sub_22F2F27DC(v389, (const char **)&v557);
    sub_22E8A9AD8((uint64_t)v566, (uint64_t)v200);
    if (SHIBYTE(v517) < 0)
      operator delete(__p);
    sub_22E8A9D90((uint64_t)v566, 7, "");
    sub_22E8A9B38((uint64_t)v566, (uint64_t)"NSUInteger");
    sub_22E8A9D90((uint64_t)v566, 8, "");
    sub_22E8A9B38((uint64_t)v566, (uint64_t)"index");
    *(_QWORD *)&v508 = 0;
    *((_QWORD *)&v508 + 1) = sub_22F2F28A4((uint64_t)v566);
    *(_DWORD *)v509 = v55;
    *(_OWORD *)&v509[4] = xmmword_22F469FD0;
    v512 = 0;
    v510 = 0;
    v511 = 0;
    LOBYTE(v513) = v513 & 0xC0;
    *((_QWORD *)&v513 + 1) = 0;
    v514 = 0uLL;
    v201 = v393[1];
    if (v201 >= v393[2])
    {
      v205 = sub_22E9D8E48(v393, (uint64_t)&v508);
    }
    else
    {
      v202 = v508;
      v203 = *(_OWORD *)v509;
      *(_DWORD *)(v201 + 32) = *(_DWORD *)&v509[16];
      *(_OWORD *)v201 = v202;
      *(_OWORD *)(v201 + 16) = v203;
      *(_QWORD *)(v201 + 48) = 0;
      *(_QWORD *)(v201 + 56) = 0;
      *(_QWORD *)(v201 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v201 + 40), v510, v511, 0x6DB6DB6DB6DB6DB7 * ((v511 - v510) >> 3));
      v204 = v514;
      *(_OWORD *)(v201 + 64) = v513;
      *(_OWORD *)(v201 + 80) = v204;
      v205 = v201 + 96;
    }
    v33 = a5;
    v393[1] = v205;
    v557 = (void **)&v510;
    sub_22E6C60B8(&v557);
  }
  if (v521 < 0)
    operator delete(v519);
  v105 = v393;
  if (a3 < 0x10)
    goto LABEL_186;
  v64 = a3 & 0xFFFFFFFFFFFFFFF0;
  v99 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v100 = *(_QWORD *)(v99 + 8) & 0xFFFFFFFFFFFFFFF0;
LABEL_200:
  if (*(_BYTE *)(*(_QWORD *)v100 + 16) == 32)
  {
    if (*(_BYTE *)(v99 + 16) != 32)
      v99 = sub_22F10CF48(v99);
    if (sub_22F31179C(v99))
    {
      v206 = *(_QWORD *)v64;
      if (!*(_QWORD *)v64 || *(_BYTE *)(v206 + 16) != 32)
        v206 = sub_22F10CF48(v206);
      v207 = *(_QWORD *)(sub_22F31179C(v206) + 40);
      if ((v207 & 7) == 0)
      {
        v208 = v207 & 0xFFFFFFFFFFFFFFF8;
        if (v208)
        {
          v209 = *(_DWORD **)(v208 + 16);
          if (*v209 == 7)
          {
            v210 = v209[4];
            v211 = *(_DWORD *)((char *)v209 + 19);
            if (v210 == 1916883790 && v211 == 2036429426)
            {
LABEL_186:
              v106 = 0;
              v107 = a1[5];
              v108 = (void **)"";
              if ((v107 & 7) == 0)
              {
                v109 = v107 & 0xFFFFFFFFFFFFFFF8;
                if (v109)
                {
                  v110 = *(_DWORD **)(v109 + 16);
                  v111 = *v110;
                  v108 = (void **)(v110 + 4);
                  v106 = v111;
                }
              }
              v557 = v108;
              v558 = v106;
              v559 = "AtIndexes";
              v560 = 773;
              llvm::Twine::str((llvm::Twine *)&v557);
              if (SHIBYTE(v517) >= 0)
                v112 = &__p;
              else
                v112 = __p;
              if (SHIBYTE(v517) >= 0)
                v113 = HIBYTE(v517) & 0x7F;
              else
                v113 = v516;
              v114 = sub_22E3CB704(*(llvm::StringMapImpl **)(a4 + 15192), v112, v113);
              sub_22E3BA850(v33, (const void *)(v114 | 2));
              if (v115)
              {
                if (a3 <= 0xF)
                {
                  sub_22E8A9D90((uint64_t)v566, 7, "");
                  sub_22E8A9B38((uint64_t)v566, (uint64_t)"NSArray *");
                  sub_22E8A9D90((uint64_t)v566, 8, "");
                }
                if (SHIBYTE(v517) >= 0)
                  v361 = HIBYTE(v517) & 0x7F;
                else
                  v361 = v516;
                sub_22E3B8BF4((uint64_t)&v519, v361 + 1);
                if (v521 >= 0)
                  v362 = (char *)&v519;
                else
                  v362 = (char *)v519;
                if (v361)
                {
                  if (SHIBYTE(v517) >= 0)
                    v363 = &__p;
                  else
                    v363 = __p;
                  memmove(v362, v363, v361);
                }
                *(_WORD *)&v362[v361] = 58;
                v560 = 260;
                v557 = &v519;
                v364 = sub_22F2F27DC(v389, (const char **)&v557);
                sub_22E8A9AD8((uint64_t)v566, (uint64_t)v364);
                if (v521 < 0)
                  operator delete(v519);
                sub_22E8A9D90((uint64_t)v566, 7, "");
                sub_22E8A9B38((uint64_t)v566, (uint64_t)"NSIndexSet *");
                sub_22E8A9D90((uint64_t)v566, 8, "");
                sub_22E8A9B38((uint64_t)v566, (uint64_t)"indexes");
                *(_QWORD *)&v501 = 0;
                *((_QWORD *)&v501 + 1) = sub_22F2F28A4((uint64_t)v566);
                *(_DWORD *)v502 = v55;
                *(_OWORD *)&v502[4] = xmmword_22F469FD0;
                v505 = 0;
                v503 = 0;
                v504 = 0;
                LOBYTE(v506) = v506 & 0xC0;
                *((_QWORD *)&v506 + 1) = 0;
                v507 = 0uLL;
                v365 = v105[1];
                if (v365 >= v105[2])
                {
                  v369 = sub_22E9D8E48(v105, (uint64_t)&v501);
                }
                else
                {
                  v366 = v501;
                  v367 = *(_OWORD *)v502;
                  *(_DWORD *)(v365 + 32) = *(_DWORD *)&v502[16];
                  *(_OWORD *)v365 = v366;
                  *(_OWORD *)(v365 + 16) = v367;
                  *(_QWORD *)(v365 + 48) = 0;
                  *(_QWORD *)(v365 + 56) = 0;
                  *(_QWORD *)(v365 + 40) = 0;
                  sub_22E6C6020((_QWORD *)(v365 + 40), v503, v504, 0x6DB6DB6DB6DB6DB7 * ((v504 - v503) >> 3));
                  v368 = v507;
                  *(_OWORD *)(v365 + 64) = v506;
                  *(_OWORD *)(v365 + 80) = v368;
                  v369 = v365 + 96;
                }
                v33 = a5;
                v105[1] = v369;
                v557 = (void **)&v503;
                sub_22E6C60B8(&v557);
              }
              if (SHIBYTE(v517) < 0)
                operator delete(__p);
            }
          }
        }
      }
    }
  }
  if (v392)
  {
    v557 = (void **)"get";
    v559 = (const char *)&__dst;
    v560 = 1027;
    llvm::Twine::str((llvm::Twine *)&v557);
    v562 = 0;
    v561 = 0;
    if (SHIBYTE(v517) >= 0)
      v116 = &__p;
    else
      v116 = __p;
    if (SHIBYTE(v517) >= 0)
      v117 = HIBYTE(v517) & 0x7F;
    else
      v117 = v516;
    v561 = (void *)sub_22E3CB704(*(llvm::StringMapImpl **)(a4 + 15192), v116, v117);
    v562 = sub_22E3CB704(*(llvm::StringMapImpl **)(a4 + 15192), "range", 5uLL);
    v118 = v390;
    v119 = (const void *)sub_22F1D3E5C(v390, 2u, (uint64_t *)&v561);
    sub_22E3BA850(v33, v119);
    if (v120)
    {
      if (a3 <= 0xF)
      {
        sub_22E8A9D90((uint64_t)v566, 7, "");
        sub_22E8A9B38((uint64_t)v566, (uint64_t)"void");
        sub_22E8A9D90((uint64_t)v566, 8, "");
      }
      if (SHIBYTE(v517) >= 0)
        v242 = HIBYTE(v517) & 0x7F;
      else
        v242 = v516;
      sub_22E3B8BF4((uint64_t)&v519, v242 + 1);
      if (v521 >= 0)
        v243 = (char *)&v519;
      else
        v243 = (char *)v519;
      if (v242)
      {
        if (SHIBYTE(v517) >= 0)
          v244 = &__p;
        else
          v244 = __p;
        memmove(v243, v244, v242);
      }
      *(_WORD *)&v243[v242] = 58;
      v560 = 260;
      v557 = &v519;
      v245 = sub_22F2F27DC(v389, (const char **)&v557);
      sub_22E8A9AD8((uint64_t)v566, (uint64_t)v245);
      if (v521 < 0)
        operator delete(v519);
      sub_22E8A9D90((uint64_t)v566, 7, "");
      sub_22E8A9C00((uint64_t)v566, (uint64_t)"object-type");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)" **");
      sub_22E8A9D90((uint64_t)v566, 8, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"buffer");
      sub_22E8A9D90((uint64_t)v566, 19, "");
      sub_22E8A9AD8((uint64_t)v566, (uint64_t)"range:");
      sub_22E8A9D90((uint64_t)v566, 7, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"NSRange");
      sub_22E8A9D90((uint64_t)v566, 8, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"inRange");
      *(_QWORD *)&v494 = 0;
      *((_QWORD *)&v494 + 1) = sub_22F2F28A4((uint64_t)v566);
      *(_DWORD *)v495 = v55;
      *(_OWORD *)&v495[4] = xmmword_22F469FD0;
      v498 = 0;
      v496 = 0;
      v497 = 0;
      LOBYTE(v499) = v499 & 0xC0;
      *((_QWORD *)&v499 + 1) = 0;
      v500 = 0uLL;
      v246 = v105[1];
      if (v246 >= v105[2])
      {
        v250 = sub_22E9D8E48(v105, (uint64_t)&v494);
      }
      else
      {
        v247 = v494;
        v248 = *(_OWORD *)v495;
        *(_DWORD *)(v246 + 32) = *(_DWORD *)&v495[16];
        *(_OWORD *)v246 = v247;
        *(_OWORD *)(v246 + 16) = v248;
        *(_QWORD *)(v246 + 48) = 0;
        *(_QWORD *)(v246 + 56) = 0;
        *(_QWORD *)(v246 + 40) = 0;
        sub_22E6C6020((_QWORD *)(v246 + 40), v496, v497, 0x6DB6DB6DB6DB6DB7 * ((v497 - v496) >> 3));
        v249 = v500;
        *(_OWORD *)(v246 + 64) = v499;
        *(_OWORD *)(v246 + 80) = v249;
        v250 = v246 + 96;
      }
      v33 = a5;
      v118 = v390;
      v105[1] = v250;
      v557 = (void **)&v496;
      sub_22E6C60B8(&v557);
    }
    if (SHIBYTE(v517) < 0)
      operator delete(__p);
    __p = "in";
    v517 = (void **)&__dst;
    v518 = 1027;
    v557 = &__p;
    v559 = "AtIndex";
    v560 = 770;
    llvm::Twine::str((llvm::Twine *)&v557);
    v562 = 0;
    v561 = 0;
    v561 = (void *)sub_22E3CB704(*(llvm::StringMapImpl **)(a4 + 15192), "insertObject", 0xCuLL);
    if (v521 >= 0)
      v121 = &v519;
    else
      v121 = v519;
    if (v521 >= 0)
      v122 = v521 & 0x7F;
    else
      v122 = v520;
    v562 = sub_22E3CB704(*(llvm::StringMapImpl **)(a4 + 15192), v121, v122);
    v123 = (const void *)sub_22F1D3E5C(v118, 2u, (uint64_t *)&v561);
    sub_22E3BA850(v33, v123);
    if (v124)
    {
      if (a3 <= 0xF)
      {
        sub_22E8A9D90((uint64_t)v566, 7, "");
        sub_22E8A9B38((uint64_t)v566, (uint64_t)"void");
        sub_22E8A9D90((uint64_t)v566, 8, "");
      }
      sub_22E8A9AD8((uint64_t)v566, (uint64_t)"insertObject:");
      sub_22E8A9D90((uint64_t)v566, 7, "");
      sub_22E8A9C00((uint64_t)v566, (uint64_t)"object-type");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)" *");
      sub_22E8A9D90((uint64_t)v566, 8, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"object");
      sub_22E8A9D90((uint64_t)v566, 19, "");
      if (v521 >= 0)
        v251 = v521 & 0x7F;
      else
        v251 = v520;
      sub_22E3B8BF4((uint64_t)&__p, v251 + 1);
      if (SHIBYTE(v517) >= 0)
        v252 = (char *)&__p;
      else
        v252 = (char *)__p;
      if (v251)
      {
        if (v521 >= 0)
          v253 = &v519;
        else
          v253 = v519;
        memmove(v252, v253, v251);
      }
      *(_WORD *)&v252[v251] = 58;
      v560 = 260;
      v557 = &__p;
      v254 = sub_22F2F27DC(v389, (const char **)&v557);
      sub_22E8A9AD8((uint64_t)v566, (uint64_t)v254);
      if (SHIBYTE(v517) < 0)
        operator delete(__p);
      sub_22E8A9D90((uint64_t)v566, 7, "");
      sub_22E8A9C00((uint64_t)v566, (uint64_t)"NSUInteger");
      sub_22E8A9D90((uint64_t)v566, 8, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"index");
      *(_QWORD *)&v487 = 0;
      *((_QWORD *)&v487 + 1) = sub_22F2F28A4((uint64_t)v566);
      *(_DWORD *)v488 = v388;
      *(_OWORD *)&v488[4] = xmmword_22F469FD0;
      v491 = 0;
      v489 = 0;
      v490 = 0;
      LOBYTE(v492) = v492 & 0xC0;
      *((_QWORD *)&v492 + 1) = 0;
      v493 = 0uLL;
      v255 = v105[1];
      v118 = v390;
      if (v255 >= v105[2])
      {
        v259 = sub_22E9D8E48(v105, (uint64_t)&v487);
      }
      else
      {
        v256 = v487;
        v257 = *(_OWORD *)v488;
        *(_DWORD *)(v255 + 32) = *(_DWORD *)&v488[16];
        *(_OWORD *)v255 = v256;
        *(_OWORD *)(v255 + 16) = v257;
        *(_QWORD *)(v255 + 48) = 0;
        *(_QWORD *)(v255 + 56) = 0;
        *(_QWORD *)(v255 + 40) = 0;
        sub_22E6C6020((_QWORD *)(v255 + 40), v489, v490, 0x6DB6DB6DB6DB6DB7 * ((v490 - v489) >> 3));
        v258 = v493;
        *(_OWORD *)(v255 + 64) = v492;
        *(_OWORD *)(v255 + 80) = v258;
        v259 = v255 + 96;
      }
      v33 = a5;
      v105[1] = v259;
      v557 = (void **)&v489;
      sub_22E6C60B8(&v557);
    }
    if (v521 < 0)
      operator delete(v519);
    v557 = (void **)"insert";
    v559 = (const char *)&__dst;
    v560 = 1027;
    llvm::Twine::str((llvm::Twine *)&v557);
    v562 = 0;
    v561 = 0;
    if (SHIBYTE(v517) >= 0)
      v125 = &__p;
    else
      v125 = __p;
    if (SHIBYTE(v517) >= 0)
      v126 = HIBYTE(v517) & 0x7F;
    else
      v126 = v516;
    v561 = (void *)sub_22E3CB704(*(llvm::StringMapImpl **)(a4 + 15192), v125, v126);
    v562 = sub_22E3CB704(*(llvm::StringMapImpl **)(a4 + 15192), "atIndexes", 9uLL);
    v127 = (const void *)sub_22F1D3E5C(v118, 2u, (uint64_t *)&v561);
    sub_22E3BA850(v33, v127);
    if (v128)
    {
      if (a3 <= 0xF)
      {
        sub_22E8A9D90((uint64_t)v566, 7, "");
        sub_22E8A9B38((uint64_t)v566, (uint64_t)"void");
        sub_22E8A9D90((uint64_t)v566, 8, "");
      }
      if (SHIBYTE(v517) >= 0)
        v260 = HIBYTE(v517) & 0x7F;
      else
        v260 = v516;
      sub_22E3B8BF4((uint64_t)&v519, v260 + 1);
      if (v521 >= 0)
        v261 = (char *)&v519;
      else
        v261 = (char *)v519;
      if (v260)
      {
        if (SHIBYTE(v517) >= 0)
          v262 = &__p;
        else
          v262 = __p;
        memmove(v261, v262, v260);
      }
      *(_WORD *)&v261[v260] = 58;
      v560 = 260;
      v557 = &v519;
      v263 = sub_22F2F27DC(v389, (const char **)&v557);
      sub_22E8A9AD8((uint64_t)v566, (uint64_t)v263);
      if (v521 < 0)
        operator delete(v519);
      sub_22E8A9D90((uint64_t)v566, 7, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"NSArray *");
      sub_22E8A9D90((uint64_t)v566, 8, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"array");
      sub_22E8A9D90((uint64_t)v566, 19, "");
      sub_22E8A9AD8((uint64_t)v566, (uint64_t)"atIndexes:");
      sub_22E8A9D90((uint64_t)v566, 7, "");
      sub_22E8A9C00((uint64_t)v566, (uint64_t)"NSIndexSet *");
      sub_22E8A9D90((uint64_t)v566, 8, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"indexes");
      *(_QWORD *)&v480 = 0;
      *((_QWORD *)&v480 + 1) = sub_22F2F28A4((uint64_t)v566);
      *(_DWORD *)v481 = v388;
      *(_OWORD *)&v481[4] = xmmword_22F469FD0;
      v484 = 0;
      v482 = 0;
      v483 = 0;
      LOBYTE(v485) = v485 & 0xC0;
      *((_QWORD *)&v485 + 1) = 0;
      v486 = 0uLL;
      v264 = v393[1];
      v118 = v390;
      if (v264 >= v393[2])
      {
        v268 = sub_22E9D8E48(v393, (uint64_t)&v480);
      }
      else
      {
        v265 = v480;
        v266 = *(_OWORD *)v481;
        *(_DWORD *)(v264 + 32) = *(_DWORD *)&v481[16];
        *(_OWORD *)v264 = v265;
        *(_OWORD *)(v264 + 16) = v266;
        *(_QWORD *)(v264 + 48) = 0;
        *(_QWORD *)(v264 + 56) = 0;
        *(_QWORD *)(v264 + 40) = 0;
        sub_22E6C6020((_QWORD *)(v264 + 40), v482, v483, 0x6DB6DB6DB6DB6DB7 * ((v483 - v482) >> 3));
        v267 = v486;
        *(_OWORD *)(v264 + 64) = v485;
        *(_OWORD *)(v264 + 80) = v267;
        v268 = v264 + 96;
      }
      v33 = a5;
      v393[1] = v268;
      v557 = (void **)&v482;
      sub_22E6C60B8(&v557);
      v105 = v393;
    }
    if (SHIBYTE(v517) < 0)
      operator delete(__p);
    __p = "removeObjectFrom";
    v517 = (void **)&__dst;
    v518 = 1027;
    v557 = &__p;
    v559 = "AtIndex";
    v560 = 770;
    llvm::Twine::str((llvm::Twine *)&v557);
    if (v521 >= 0)
      v129 = &v519;
    else
      v129 = v519;
    if (v521 >= 0)
      v130 = v521 & 0x7F;
    else
      v130 = v520;
    v131 = sub_22E3CB704(*(llvm::StringMapImpl **)(a4 + 15192), v129, v130);
    sub_22E3BA850(v33, (const void *)(v131 | 2));
    if (v132)
    {
      if (a3 <= 0xF)
      {
        sub_22E8A9D90((uint64_t)v566, 7, "");
        sub_22E8A9B38((uint64_t)v566, (uint64_t)"void");
        sub_22E8A9D90((uint64_t)v566, 8, "");
      }
      if (v521 >= 0)
        v269 = v521 & 0x7F;
      else
        v269 = v520;
      sub_22E3B8BF4((uint64_t)&__p, v269 + 1);
      if (SHIBYTE(v517) >= 0)
        v270 = (char *)&__p;
      else
        v270 = (char *)__p;
      if (v269)
      {
        if (v521 >= 0)
          v271 = &v519;
        else
          v271 = v519;
        memmove(v270, v271, v269);
      }
      *(_WORD *)&v270[v269] = 58;
      v560 = 260;
      v557 = &__p;
      v272 = sub_22F2F27DC(v389, (const char **)&v557);
      sub_22E8A9AD8((uint64_t)v566, (uint64_t)v272);
      if (SHIBYTE(v517) < 0)
        operator delete(__p);
      sub_22E8A9D90((uint64_t)v566, 7, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"NSUInteger");
      sub_22E8A9D90((uint64_t)v566, 8, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"index");
      *(_QWORD *)&v473 = 0;
      *((_QWORD *)&v473 + 1) = sub_22F2F28A4((uint64_t)v566);
      *(_DWORD *)v474 = v388;
      *(_OWORD *)&v474[4] = xmmword_22F469FD0;
      v477 = 0;
      v475 = 0;
      v476 = 0;
      LOBYTE(v478) = v478 & 0xC0;
      *((_QWORD *)&v478 + 1) = 0;
      v479 = 0uLL;
      v273 = v393[1];
      v118 = v390;
      if (v273 >= v393[2])
      {
        v277 = sub_22E9D8E48(v393, (uint64_t)&v473);
      }
      else
      {
        v274 = v473;
        v275 = *(_OWORD *)v474;
        *(_DWORD *)(v273 + 32) = *(_DWORD *)&v474[16];
        *(_OWORD *)v273 = v274;
        *(_OWORD *)(v273 + 16) = v275;
        *(_QWORD *)(v273 + 48) = 0;
        *(_QWORD *)(v273 + 56) = 0;
        *(_QWORD *)(v273 + 40) = 0;
        sub_22E6C6020((_QWORD *)(v273 + 40), v475, v476, 0x6DB6DB6DB6DB6DB7 * ((v476 - v475) >> 3));
        v276 = v479;
        *(_OWORD *)(v273 + 64) = v478;
        *(_OWORD *)(v273 + 80) = v276;
        v277 = v273 + 96;
      }
      v33 = a5;
      v393[1] = v277;
      v557 = (void **)&v475;
      sub_22E6C60B8(&v557);
      v105 = v393;
    }
    if (v521 < 0)
      operator delete(v519);
    __p = "remove";
    v517 = (void **)&__dst;
    v518 = 1027;
    v557 = &__p;
    v559 = "AtIndexes";
    v560 = 770;
    llvm::Twine::str((llvm::Twine *)&v557);
    if (v521 >= 0)
      v133 = &v519;
    else
      v133 = v519;
    if (v521 >= 0)
      v134 = v521 & 0x7F;
    else
      v134 = v520;
    v135 = sub_22E3CB704(*(llvm::StringMapImpl **)(a4 + 15192), v133, v134);
    sub_22E3BA850(v33, (const void *)(v135 | 2));
    if (v136)
    {
      if (a3 <= 0xF)
      {
        sub_22E8A9D90((uint64_t)v566, 7, "");
        sub_22E8A9B38((uint64_t)v566, (uint64_t)"void");
        sub_22E8A9D90((uint64_t)v566, 8, "");
      }
      if (v521 >= 0)
        v278 = v521 & 0x7F;
      else
        v278 = v520;
      sub_22E3B8BF4((uint64_t)&__p, v278 + 1);
      if (SHIBYTE(v517) >= 0)
        v279 = (char *)&__p;
      else
        v279 = (char *)__p;
      if (v278)
      {
        if (v521 >= 0)
          v280 = &v519;
        else
          v280 = v519;
        memmove(v279, v280, v278);
      }
      *(_WORD *)&v279[v278] = 58;
      v560 = 260;
      v557 = &__p;
      v281 = sub_22F2F27DC(v389, (const char **)&v557);
      sub_22E8A9AD8((uint64_t)v566, (uint64_t)v281);
      if (SHIBYTE(v517) < 0)
        operator delete(__p);
      sub_22E8A9D90((uint64_t)v566, 7, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"NSIndexSet *");
      sub_22E8A9D90((uint64_t)v566, 8, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"indexes");
      *(_QWORD *)&v466 = 0;
      *((_QWORD *)&v466 + 1) = sub_22F2F28A4((uint64_t)v566);
      *(_DWORD *)v467 = v388;
      *(_OWORD *)&v467[4] = xmmword_22F469FD0;
      v470 = 0;
      v468 = 0;
      v469 = 0;
      LOBYTE(v471) = v471 & 0xC0;
      *((_QWORD *)&v471 + 1) = 0;
      v472 = 0uLL;
      v282 = v393[1];
      v118 = v390;
      if (v282 >= v393[2])
      {
        v286 = sub_22E9D8E48(v393, (uint64_t)&v466);
      }
      else
      {
        v283 = v466;
        v284 = *(_OWORD *)v467;
        *(_DWORD *)(v282 + 32) = *(_DWORD *)&v467[16];
        *(_OWORD *)v282 = v283;
        *(_OWORD *)(v282 + 16) = v284;
        *(_QWORD *)(v282 + 48) = 0;
        *(_QWORD *)(v282 + 56) = 0;
        *(_QWORD *)(v282 + 40) = 0;
        sub_22E6C6020((_QWORD *)(v282 + 40), v468, v469, 0x6DB6DB6DB6DB6DB7 * ((v469 - v468) >> 3));
        v285 = v472;
        *(_OWORD *)(v282 + 64) = v471;
        *(_OWORD *)(v282 + 80) = v285;
        v286 = v282 + 96;
      }
      v33 = a5;
      v393[1] = v286;
      v557 = (void **)&v468;
      sub_22E6C60B8(&v557);
      v105 = v393;
    }
    if (v521 < 0)
      operator delete(v519);
    __p = "replaceObjectIn";
    v517 = (void **)&__dst;
    v518 = 1027;
    v557 = &__p;
    v559 = "AtIndex";
    v560 = 770;
    llvm::Twine::str((llvm::Twine *)&v557);
    v562 = 0;
    v561 = 0;
    if (v521 >= 0)
      v137 = &v519;
    else
      v137 = v519;
    if (v521 >= 0)
      v138 = v521 & 0x7F;
    else
      v138 = v520;
    v561 = (void *)sub_22E3CB704(*(llvm::StringMapImpl **)(a4 + 15192), v137, v138);
    v562 = sub_22E3CB704(*(llvm::StringMapImpl **)(a4 + 15192), "withObject", 0xAuLL);
    v139 = (const void *)sub_22F1D3E5C(v118, 2u, (uint64_t *)&v561);
    sub_22E3BA850(v33, v139);
    if (v140)
    {
      if (a3 <= 0xF)
      {
        sub_22E8A9D90((uint64_t)v566, 7, "");
        sub_22E8A9B38((uint64_t)v566, (uint64_t)"void");
        sub_22E8A9D90((uint64_t)v566, 8, "");
      }
      if (v521 >= 0)
        v287 = v521 & 0x7F;
      else
        v287 = v520;
      sub_22E3B8BF4((uint64_t)&__p, v287 + 1);
      if (SHIBYTE(v517) >= 0)
        v288 = (char *)&__p;
      else
        v288 = (char *)__p;
      if (v287)
      {
        if (v521 >= 0)
          v289 = &v519;
        else
          v289 = v519;
        memmove(v288, v289, v287);
      }
      *(_WORD *)&v288[v287] = 58;
      v560 = 260;
      v557 = &__p;
      v290 = sub_22F2F27DC(v389, (const char **)&v557);
      sub_22E8A9AD8((uint64_t)v566, (uint64_t)v290);
      if (SHIBYTE(v517) < 0)
        operator delete(__p);
      sub_22E8A9D90((uint64_t)v566, 7, "");
      sub_22E8A9C00((uint64_t)v566, (uint64_t)"NSUInteger");
      sub_22E8A9D90((uint64_t)v566, 8, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"index");
      sub_22E8A9D90((uint64_t)v566, 19, "");
      sub_22E8A9AD8((uint64_t)v566, (uint64_t)"withObject:");
      sub_22E8A9D90((uint64_t)v566, 7, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"id");
      sub_22E8A9D90((uint64_t)v566, 8, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"object");
      *(_QWORD *)&v459 = 0;
      *((_QWORD *)&v459 + 1) = sub_22F2F28A4((uint64_t)v566);
      *(_DWORD *)v460 = v388;
      *(_OWORD *)&v460[4] = xmmword_22F469FD0;
      v463 = 0;
      v461 = 0;
      v462 = 0;
      LOBYTE(v464) = v464 & 0xC0;
      *((_QWORD *)&v464 + 1) = 0;
      v465 = 0uLL;
      v291 = v105[1];
      if (v291 >= v105[2])
      {
        v295 = sub_22E9D8E48(v105, (uint64_t)&v459);
      }
      else
      {
        v292 = v459;
        v293 = *(_OWORD *)v460;
        *(_DWORD *)(v291 + 32) = *(_DWORD *)&v460[16];
        *(_OWORD *)v291 = v292;
        *(_OWORD *)(v291 + 16) = v293;
        *(_QWORD *)(v291 + 48) = 0;
        *(_QWORD *)(v291 + 56) = 0;
        *(_QWORD *)(v291 + 40) = 0;
        sub_22E6C6020((_QWORD *)(v291 + 40), v461, v462, 0x6DB6DB6DB6DB6DB7 * ((v462 - v461) >> 3));
        v294 = v465;
        *(_OWORD *)(v291 + 64) = v464;
        *(_OWORD *)(v291 + 80) = v294;
        v295 = v291 + 96;
      }
      v105[1] = v295;
      v557 = (void **)&v461;
      sub_22E6C60B8(&v557);
    }
    if (v521 < 0)
      operator delete(v519);
    __p = "replace";
    v517 = (void **)&__dst;
    v518 = 1027;
    v557 = &__p;
    v559 = "AtIndexes";
    v560 = 770;
    llvm::Twine::str((llvm::Twine *)&v557);
    v557 = (void **)"with";
    v559 = (const char *)&__dst;
    v560 = 1027;
    llvm::Twine::str((llvm::Twine *)&v557);
    v565 = 0;
    v564 = 0;
    if (v521 >= 0)
      v141 = &v519;
    else
      v141 = v519;
    if (v521 >= 0)
      v142 = v521 & 0x7F;
    else
      v142 = v520;
    v564 = sub_22E3CB704(*(llvm::StringMapImpl **)(a4 + 15192), v141, v142);
    if (SHIBYTE(v517) >= 0)
      v143 = &__p;
    else
      v143 = __p;
    if (SHIBYTE(v517) >= 0)
      v144 = HIBYTE(v517) & 0x7F;
    else
      v144 = v516;
    v565 = sub_22E3CB704(*(llvm::StringMapImpl **)(a4 + 15192), v143, v144);
    v145 = (const void *)sub_22F1D3E5C(v390, 2u, &v564);
    v33 = a5;
    sub_22E3BA850(a5, v145);
    if (v146)
    {
      if (a3 <= 0xF)
      {
        sub_22E8A9D90((uint64_t)v566, 7, "");
        sub_22E8A9B38((uint64_t)v566, (uint64_t)"void");
        sub_22E8A9D90((uint64_t)v566, 8, "");
      }
      if (v521 >= 0)
        v296 = v521 & 0x7F;
      else
        v296 = v520;
      sub_22E3B8BF4((uint64_t)&v561, v296 + 1);
      if (v563 >= 0)
        v297 = (char *)&v561;
      else
        v297 = (char *)v561;
      if (v296)
      {
        if (v521 >= 0)
          v298 = &v519;
        else
          v298 = v519;
        memmove(v297, v298, v296);
      }
      *(_WORD *)&v297[v296] = 58;
      v560 = 260;
      v557 = &v561;
      v299 = sub_22F2F27DC(v389, (const char **)&v557);
      sub_22E8A9AD8((uint64_t)v566, (uint64_t)v299);
      if (v563 < 0)
        operator delete(v561);
      sub_22E8A9D90((uint64_t)v566, 7, "");
      sub_22E8A9C00((uint64_t)v566, (uint64_t)"NSIndexSet *");
      sub_22E8A9D90((uint64_t)v566, 8, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"indexes");
      sub_22E8A9D90((uint64_t)v566, 19, "");
      if (SHIBYTE(v517) >= 0)
        v300 = HIBYTE(v517) & 0x7F;
      else
        v300 = v516;
      sub_22E3B8BF4((uint64_t)&v561, v300 + 1);
      if (v563 >= 0)
        v301 = (char *)&v561;
      else
        v301 = (char *)v561;
      if (v300)
      {
        if (SHIBYTE(v517) >= 0)
          v302 = &__p;
        else
          v302 = __p;
        memmove(v301, v302, v300);
      }
      *(_WORD *)&v301[v300] = 58;
      v560 = 260;
      v557 = &v561;
      v303 = sub_22F2F27DC(v389, (const char **)&v557);
      sub_22E8A9AD8((uint64_t)v566, (uint64_t)v303);
      if (v563 < 0)
        operator delete(v561);
      sub_22E8A9D90((uint64_t)v566, 7, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"NSArray *");
      sub_22E8A9D90((uint64_t)v566, 8, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"array");
      *(_QWORD *)&v452 = 0;
      *((_QWORD *)&v452 + 1) = sub_22F2F28A4((uint64_t)v566);
      *(_DWORD *)v453 = v388;
      *(_OWORD *)&v453[4] = xmmword_22F469FD0;
      v456 = 0;
      v454 = 0;
      v455 = 0;
      LOBYTE(v457) = v457 & 0xC0;
      *((_QWORD *)&v457 + 1) = 0;
      v458 = 0uLL;
      v304 = v393[1];
      if (v304 >= v393[2])
      {
        v308 = sub_22E9D8E48(v393, (uint64_t)&v452);
      }
      else
      {
        v305 = v452;
        v306 = *(_OWORD *)v453;
        *(_DWORD *)(v304 + 32) = *(_DWORD *)&v453[16];
        *(_OWORD *)v304 = v305;
        *(_OWORD *)(v304 + 16) = v306;
        *(_QWORD *)(v304 + 48) = 0;
        *(_QWORD *)(v304 + 56) = 0;
        *(_QWORD *)(v304 + 40) = 0;
        sub_22E6C6020((_QWORD *)(v304 + 40), v454, v455, 0x6DB6DB6DB6DB6DB7 * ((v455 - v454) >> 3));
        v307 = v458;
        *(_OWORD *)(v304 + 64) = v457;
        *(_OWORD *)(v304 + 80) = v307;
        v308 = v304 + 96;
      }
      v33 = a5;
      v393[1] = v308;
      v557 = (void **)&v454;
      sub_22E6C60B8(&v557);
    }
    if (SHIBYTE(v517) < 0)
      operator delete(__p);
    if (v521 < 0)
      operator delete(v519);
    v105 = v393;
  }
  if (a3 >= 0x10)
  {
    v151 = a3 & 0xFFFFFFFFFFFFFFF0;
    v152 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v152 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
      goto LABEL_287;
    if (*(_BYTE *)(v152 + 16) != 32)
      v152 = sub_22F10CF48(v152);
    if (!sub_22F31179C(v152))
      goto LABEL_287;
    v309 = *(_QWORD *)v151;
    if (!*(_QWORD *)v151 || *(_BYTE *)(v309 + 16) != 32)
      v309 = sub_22F10CF48(v309);
    if ((v310 = *(_QWORD *)(sub_22F31179C(v309) + 40), (v310 & 7) != 0)
      || (v311 = v310 & 0xFFFFFFFFFFFFFFF8) == 0
      || (v312 = *(_QWORD *)(v311 + 16), *(_DWORD *)v312 != 12)
      || ((v313 = *(_QWORD *)(v312 + 16), v314 = *(_DWORD *)(v312 + 24), v313 == 0x72656D756E45534ELL)
        ? (v315 = v314 == 1919906913)
        : (v315 = 0),
          !v315))
    {
LABEL_287:
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v151 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
        goto LABEL_297;
      goto LABEL_288;
    }
  }
  v557 = (void **)"enumeratorOf";
  v559 = (const char *)&__dst;
  v560 = 1027;
  llvm::Twine::str((llvm::Twine *)&v557);
  if (SHIBYTE(v517) >= 0)
    v147 = &__p;
  else
    v147 = __p;
  if (SHIBYTE(v517) >= 0)
    v148 = HIBYTE(v517) & 0x7F;
  else
    v148 = v516;
  v149 = sub_22E3CB704(*(llvm::StringMapImpl **)(a4 + 15192), v147, v148);
  sub_22E3BA850(v33, (const void *)(v149 | 1));
  if (v150)
  {
    if (a3 <= 0xF)
    {
      sub_22E8A9D90((uint64_t)v566, 7, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"NSEnumerator *");
      sub_22E8A9D90((uint64_t)v566, 8, "");
    }
    v560 = 260;
    v557 = &__p;
    v224 = sub_22F2F27DC(v389, (const char **)&v557);
    sub_22E8A9AD8((uint64_t)v566, (uint64_t)v224);
    *(_QWORD *)&v445 = 0;
    *((_QWORD *)&v445 + 1) = sub_22F2F28A4((uint64_t)v566);
    *(_DWORD *)v446 = v386;
    *(_OWORD *)&v446[4] = xmmword_22F469FD0;
    v449 = 0;
    v447 = 0;
    v448 = 0;
    LOBYTE(v450) = v450 & 0xC0;
    *((_QWORD *)&v450 + 1) = 0;
    v451 = 0uLL;
    v225 = v105[1];
    if (v225 >= v105[2])
    {
      v229 = sub_22E9D8E48(v105, (uint64_t)&v445);
    }
    else
    {
      v226 = v445;
      v227 = *(_OWORD *)v446;
      *(_DWORD *)(v225 + 32) = *(_DWORD *)&v446[16];
      *(_OWORD *)v225 = v226;
      *(_OWORD *)(v225 + 16) = v227;
      *(_QWORD *)(v225 + 48) = 0;
      *(_QWORD *)(v225 + 56) = 0;
      *(_QWORD *)(v225 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v225 + 40), v447, v448, 0x6DB6DB6DB6DB6DB7 * ((v448 - v447) >> 3));
      v228 = v451;
      *(_OWORD *)(v225 + 64) = v450;
      *(_OWORD *)(v225 + 80) = v228;
      v229 = v225 + 96;
    }
    v33 = a5;
    v105[1] = v229;
    v557 = (void **)&v447;
    sub_22E6C60B8(&v557);
  }
  if (SHIBYTE(v517) < 0)
    operator delete(__p);
  if (a3 >= 0x10)
  {
    v151 = a3 & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_287;
  }
LABEL_288:
  v557 = (void **)"memberOf";
  v559 = (const char *)&__dst;
  v560 = 1027;
  llvm::Twine::str((llvm::Twine *)&v557);
  if (SHIBYTE(v517) >= 0)
    v153 = &__p;
  else
    v153 = __p;
  if (SHIBYTE(v517) >= 0)
    v154 = HIBYTE(v517) & 0x7F;
  else
    v154 = v516;
  v155 = sub_22E3CB704(*(llvm::StringMapImpl **)(a4 + 15192), v153, v154);
  sub_22E3BA850(v33, (const void *)(v155 | 2));
  if (v156)
  {
    if (a3 <= 0xF)
    {
      sub_22E8A9D90((uint64_t)v566, 7, "");
      sub_22E8A9C00((uint64_t)v566, (uint64_t)"object-type");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)" *");
      sub_22E8A9D90((uint64_t)v566, 8, "");
    }
    if (SHIBYTE(v517) >= 0)
      v213 = HIBYTE(v517) & 0x7F;
    else
      v213 = v516;
    sub_22E3B8BF4((uint64_t)&v519, v213 + 1);
    if (v521 >= 0)
      v214 = (char *)&v519;
    else
      v214 = (char *)v519;
    if (v213)
    {
      if (SHIBYTE(v517) >= 0)
        v215 = &__p;
      else
        v215 = __p;
      memmove(v214, v215, v213);
    }
    *(_WORD *)&v214[v213] = 58;
    v560 = 260;
    v557 = &v519;
    v216 = sub_22F2F27DC(v389, (const char **)&v557);
    sub_22E8A9AD8((uint64_t)v566, (uint64_t)v216);
    if (v521 < 0)
      operator delete(v519);
    sub_22E8A9D90((uint64_t)v566, 7, "");
    if (a3 > 0xF)
    {
      v217 = sub_22E9D1DF8(a3, (uint64_t)v556, *(uint64_t *)&v566[0]);
    }
    else
    {
      sub_22E8A9C00((uint64_t)v566, (uint64_t)"object-type");
      v217 = " *";
    }
    sub_22E8A9B38((uint64_t)v566, (uint64_t)v217);
    sub_22E8A9D90((uint64_t)v566, 8, "");
    sub_22E8A9B38((uint64_t)v566, (uint64_t)"object");
    *(_QWORD *)&v438 = 0;
    *((_QWORD *)&v438 + 1) = sub_22F2F28A4((uint64_t)v566);
    *(_DWORD *)v439 = v386;
    *(_OWORD *)&v439[4] = xmmword_22F469FD0;
    v442 = 0;
    v440 = 0;
    v441 = 0;
    LOBYTE(v443) = v443 & 0xC0;
    *((_QWORD *)&v443 + 1) = 0;
    v444 = 0uLL;
    v370 = v105[1];
    if (v370 >= v105[2])
    {
      v374 = sub_22E9D8E48(v105, (uint64_t)&v438);
    }
    else
    {
      v371 = v438;
      v372 = *(_OWORD *)v439;
      *(_DWORD *)(v370 + 32) = *(_DWORD *)&v439[16];
      *(_OWORD *)v370 = v371;
      *(_OWORD *)(v370 + 16) = v372;
      *(_QWORD *)(v370 + 48) = 0;
      *(_QWORD *)(v370 + 56) = 0;
      *(_QWORD *)(v370 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v370 + 40), v440, v441, 0x6DB6DB6DB6DB6DB7 * ((v441 - v440) >> 3));
      v373 = v444;
      *(_OWORD *)(v370 + 64) = v443;
      *(_OWORD *)(v370 + 80) = v373;
      v374 = v370 + 96;
    }
    v33 = a5;
    v105[1] = v374;
    v557 = (void **)&v440;
    sub_22E6C60B8(&v557);
  }
  if (SHIBYTE(v517) < 0)
    operator delete(__p);
LABEL_297:
  if (v392)
  {
    __p = "add";
    v517 = (void **)&__dst;
    v518 = 1027;
    v557 = &__p;
    v559 = "Object";
    v560 = 770;
    llvm::Twine::str((llvm::Twine *)&v557);
    if (v521 >= 0)
      v157 = &v519;
    else
      v157 = v519;
    if (v521 >= 0)
      v158 = v521 & 0x7F;
    else
      v158 = v520;
    v159 = sub_22E3CB704(*(llvm::StringMapImpl **)(a4 + 15192), v157, v158);
    sub_22E3BA850(v33, (const void *)(v159 | 2));
    if (v160)
    {
      if (a3 <= 0xF)
      {
        sub_22E8A9D90((uint64_t)v566, 7, "");
        sub_22E8A9B38((uint64_t)v566, (uint64_t)"void");
        sub_22E8A9D90((uint64_t)v566, 8, "");
      }
      if (v521 >= 0)
        v316 = v521 & 0x7F;
      else
        v316 = v520;
      sub_22E3B8BF4((uint64_t)&__p, v316 + 1);
      if (SHIBYTE(v517) >= 0)
        v317 = (char *)&__p;
      else
        v317 = (char *)__p;
      if (v316)
      {
        if (v521 >= 0)
          v318 = &v519;
        else
          v318 = v519;
        memmove(v317, v318, v316);
      }
      *(_WORD *)&v317[v316] = 58;
      v560 = 260;
      v557 = &__p;
      v319 = sub_22F2F27DC(v389, (const char **)&v557);
      sub_22E8A9AD8((uint64_t)v566, (uint64_t)v319);
      if (SHIBYTE(v517) < 0)
        operator delete(__p);
      sub_22E8A9D90((uint64_t)v566, 7, "");
      sub_22E8A9C00((uint64_t)v566, (uint64_t)"object-type");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)" *");
      sub_22E8A9D90((uint64_t)v566, 8, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"object");
      *(_QWORD *)&v431 = 0;
      *((_QWORD *)&v431 + 1) = sub_22F2F28A4((uint64_t)v566);
      *(_DWORD *)v432 = v387;
      *(_OWORD *)&v432[4] = xmmword_22F469FD0;
      v435 = 0;
      v433 = 0;
      v434 = 0;
      LOBYTE(v436) = v436 & 0xC0;
      *((_QWORD *)&v436 + 1) = 0;
      v437 = 0uLL;
      v320 = v393[1];
      if (v320 >= v393[2])
      {
        v324 = sub_22E9D8E48(v393, (uint64_t)&v431);
      }
      else
      {
        v321 = v431;
        v322 = *(_OWORD *)v432;
        *(_DWORD *)(v320 + 32) = *(_DWORD *)&v432[16];
        *(_OWORD *)v320 = v321;
        *(_OWORD *)(v320 + 16) = v322;
        *(_QWORD *)(v320 + 48) = 0;
        *(_QWORD *)(v320 + 56) = 0;
        *(_QWORD *)(v320 + 40) = 0;
        sub_22E6C6020((_QWORD *)(v320 + 40), v433, v434, 0x6DB6DB6DB6DB6DB7 * ((v434 - v433) >> 3));
        v323 = v437;
        *(_OWORD *)(v320 + 64) = v436;
        *(_OWORD *)(v320 + 80) = v323;
        v324 = v320 + 96;
      }
      v33 = a5;
      v393[1] = v324;
      v557 = (void **)&v433;
      sub_22E6C60B8(&v557);
    }
    if (v521 < 0)
      operator delete(v519);
    v557 = (void **)"add";
    v559 = (const char *)&__dst;
    v560 = 1027;
    llvm::Twine::str((llvm::Twine *)&v557);
    if (SHIBYTE(v517) >= 0)
      v161 = &__p;
    else
      v161 = __p;
    if (SHIBYTE(v517) >= 0)
      v162 = HIBYTE(v517) & 0x7F;
    else
      v162 = v516;
    v163 = sub_22E3CB704(*(llvm::StringMapImpl **)(a4 + 15192), v161, v162);
    sub_22E3BA850(v33, (const void *)(v163 | 2));
    if (v164)
    {
      if (a3 <= 0xF)
      {
        sub_22E8A9D90((uint64_t)v566, 7, "");
        sub_22E8A9B38((uint64_t)v566, (uint64_t)"void");
        sub_22E8A9D90((uint64_t)v566, 8, "");
      }
      if (SHIBYTE(v517) >= 0)
        v325 = HIBYTE(v517) & 0x7F;
      else
        v325 = v516;
      sub_22E3B8BF4((uint64_t)&v519, v325 + 1);
      if (v521 >= 0)
        v326 = (char *)&v519;
      else
        v326 = (char *)v519;
      if (v325)
      {
        if (SHIBYTE(v517) >= 0)
          v327 = &__p;
        else
          v327 = __p;
        memmove(v326, v327, v325);
      }
      *(_WORD *)&v326[v325] = 58;
      v560 = 260;
      v557 = &v519;
      v328 = sub_22F2F27DC(v389, (const char **)&v557);
      sub_22E8A9AD8((uint64_t)v566, (uint64_t)v328);
      if (v521 < 0)
        operator delete(v519);
      sub_22E8A9D90((uint64_t)v566, 7, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"NSSet *");
      sub_22E8A9D90((uint64_t)v566, 8, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"objects");
      *(_QWORD *)&v424 = 0;
      *((_QWORD *)&v424 + 1) = sub_22F2F28A4((uint64_t)v566);
      *(_DWORD *)v425 = v387;
      *(_OWORD *)&v425[4] = xmmword_22F469FD0;
      v428 = 0;
      v426 = 0;
      v427 = 0;
      LOBYTE(v429) = v429 & 0xC0;
      *((_QWORD *)&v429 + 1) = 0;
      v430 = 0uLL;
      v329 = v393[1];
      if (v329 >= v393[2])
      {
        v333 = sub_22E9D8E48(v393, (uint64_t)&v424);
      }
      else
      {
        v330 = v424;
        v331 = *(_OWORD *)v425;
        *(_DWORD *)(v329 + 32) = *(_DWORD *)&v425[16];
        *(_OWORD *)v329 = v330;
        *(_OWORD *)(v329 + 16) = v331;
        *(_QWORD *)(v329 + 48) = 0;
        *(_QWORD *)(v329 + 56) = 0;
        *(_QWORD *)(v329 + 40) = 0;
        sub_22E6C6020((_QWORD *)(v329 + 40), v426, v427, 0x6DB6DB6DB6DB6DB7 * ((v427 - v426) >> 3));
        v332 = v430;
        *(_OWORD *)(v329 + 64) = v429;
        *(_OWORD *)(v329 + 80) = v332;
        v333 = v329 + 96;
      }
      v33 = a5;
      v393[1] = v333;
      v557 = (void **)&v426;
      sub_22E6C60B8(&v557);
    }
    if (SHIBYTE(v517) < 0)
      operator delete(__p);
    __p = "remove";
    v517 = (void **)&__dst;
    v518 = 1027;
    v557 = &__p;
    v559 = "Object";
    v560 = 770;
    llvm::Twine::str((llvm::Twine *)&v557);
    if (v521 >= 0)
      v165 = &v519;
    else
      v165 = v519;
    if (v521 >= 0)
      v166 = v521 & 0x7F;
    else
      v166 = v520;
    v167 = sub_22E3CB704(*(llvm::StringMapImpl **)(a4 + 15192), v165, v166);
    sub_22E3BA850(v33, (const void *)(v167 | 2));
    if (v168)
    {
      if (a3 <= 0xF)
      {
        sub_22E8A9D90((uint64_t)v566, 7, "");
        sub_22E8A9B38((uint64_t)v566, (uint64_t)"void");
        sub_22E8A9D90((uint64_t)v566, 8, "");
      }
      if (v521 >= 0)
        v334 = v521 & 0x7F;
      else
        v334 = v520;
      sub_22E3B8BF4((uint64_t)&__p, v334 + 1);
      if (SHIBYTE(v517) >= 0)
        v335 = (char *)&__p;
      else
        v335 = (char *)__p;
      if (v334)
      {
        if (v521 >= 0)
          v336 = &v519;
        else
          v336 = v519;
        memmove(v335, v336, v334);
      }
      *(_WORD *)&v335[v334] = 58;
      v560 = 260;
      v557 = &__p;
      v337 = sub_22F2F27DC(v389, (const char **)&v557);
      sub_22E8A9AD8((uint64_t)v566, (uint64_t)v337);
      if (SHIBYTE(v517) < 0)
        operator delete(__p);
      sub_22E8A9D90((uint64_t)v566, 7, "");
      sub_22E8A9C00((uint64_t)v566, (uint64_t)"object-type");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)" *");
      sub_22E8A9D90((uint64_t)v566, 8, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"object");
      *(_QWORD *)&v417 = 0;
      *((_QWORD *)&v417 + 1) = sub_22F2F28A4((uint64_t)v566);
      *(_DWORD *)v418 = v387;
      *(_OWORD *)&v418[4] = xmmword_22F469FD0;
      v421 = 0;
      v419 = 0;
      v420 = 0;
      LOBYTE(v422) = v422 & 0xC0;
      *((_QWORD *)&v422 + 1) = 0;
      v423 = 0uLL;
      v338 = v393[1];
      if (v338 >= v393[2])
      {
        v342 = sub_22E9D8E48(v393, (uint64_t)&v417);
      }
      else
      {
        v339 = v417;
        v340 = *(_OWORD *)v418;
        *(_DWORD *)(v338 + 32) = *(_DWORD *)&v418[16];
        *(_OWORD *)v338 = v339;
        *(_OWORD *)(v338 + 16) = v340;
        *(_QWORD *)(v338 + 48) = 0;
        *(_QWORD *)(v338 + 56) = 0;
        *(_QWORD *)(v338 + 40) = 0;
        sub_22E6C6020((_QWORD *)(v338 + 40), v419, v420, 0x6DB6DB6DB6DB6DB7 * ((v420 - v419) >> 3));
        v341 = v423;
        *(_OWORD *)(v338 + 64) = v422;
        *(_OWORD *)(v338 + 80) = v341;
        v342 = v338 + 96;
      }
      v33 = a5;
      v393[1] = v342;
      v557 = (void **)&v419;
      sub_22E6C60B8(&v557);
    }
    if (v521 < 0)
      operator delete(v519);
    v557 = (void **)"remove";
    v559 = (const char *)&__dst;
    v560 = 1027;
    llvm::Twine::str((llvm::Twine *)&v557);
    if (SHIBYTE(v517) >= 0)
      v169 = &__p;
    else
      v169 = __p;
    if (SHIBYTE(v517) >= 0)
      v170 = HIBYTE(v517) & 0x7F;
    else
      v170 = v516;
    v171 = sub_22E3CB704(*(llvm::StringMapImpl **)(a4 + 15192), v169, v170);
    sub_22E3BA850(v33, (const void *)(v171 | 2));
    if (v172)
    {
      if (a3 <= 0xF)
      {
        sub_22E8A9D90((uint64_t)v566, 7, "");
        sub_22E8A9B38((uint64_t)v566, (uint64_t)"void");
        sub_22E8A9D90((uint64_t)v566, 8, "");
      }
      if (SHIBYTE(v517) >= 0)
        v343 = HIBYTE(v517) & 0x7F;
      else
        v343 = v516;
      sub_22E3B8BF4((uint64_t)&v519, v343 + 1);
      if (v521 >= 0)
        v344 = (char *)&v519;
      else
        v344 = (char *)v519;
      if (v343)
      {
        if (SHIBYTE(v517) >= 0)
          v345 = &__p;
        else
          v345 = __p;
        memmove(v344, v345, v343);
      }
      *(_WORD *)&v344[v343] = 58;
      v560 = 260;
      v557 = &v519;
      v346 = sub_22F2F27DC(v389, (const char **)&v557);
      sub_22E8A9AD8((uint64_t)v566, (uint64_t)v346);
      if (v521 < 0)
        operator delete(v519);
      sub_22E8A9D90((uint64_t)v566, 7, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"NSSet *");
      sub_22E8A9D90((uint64_t)v566, 8, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"objects");
      *(_QWORD *)&v412 = 0;
      *((_QWORD *)&v412 + 1) = sub_22F2F28A4((uint64_t)v566);
      *(_DWORD *)v413 = v387;
      *(_OWORD *)&v413[4] = xmmword_22F469FD0;
      memset(v414, 0, sizeof(v414));
      LOBYTE(v415) = v415 & 0xC0;
      v416 = 0uLL;
      *((_QWORD *)&v415 + 1) = 0;
      v347 = v393[1];
      if (v347 >= v393[2])
      {
        v351 = sub_22E9D8E48(v393, (uint64_t)&v412);
      }
      else
      {
        v348 = v412;
        v349 = *(_OWORD *)v413;
        *(_DWORD *)(v347 + 32) = *(_DWORD *)&v413[16];
        *(_OWORD *)v347 = v348;
        *(_OWORD *)(v347 + 16) = v349;
        *(_QWORD *)(v347 + 48) = 0;
        *(_QWORD *)(v347 + 56) = 0;
        *(_QWORD *)(v347 + 40) = 0;
        sub_22E6C6020((_QWORD *)(v347 + 40), 0, 0, 0);
        v350 = v416;
        *(_OWORD *)(v347 + 64) = v415;
        *(_OWORD *)(v347 + 80) = v350;
        v351 = v347 + 96;
      }
      v33 = a5;
      v393[1] = v351;
      v557 = (void **)v414;
      sub_22E6C60B8(&v557);
    }
    if (SHIBYTE(v517) < 0)
      operator delete(__p);
    v557 = (void **)"intersect";
    v559 = (const char *)&__dst;
    v560 = 1027;
    llvm::Twine::str((llvm::Twine *)&v557);
    if (SHIBYTE(v517) >= 0)
      v173 = &__p;
    else
      v173 = __p;
    if (SHIBYTE(v517) >= 0)
      v174 = HIBYTE(v517) & 0x7F;
    else
      v174 = v516;
    v175 = sub_22E3CB704(*(llvm::StringMapImpl **)(a4 + 15192), v173, v174);
    sub_22E3BA850(v33, (const void *)(v175 | 2));
    if (!v176)
      goto LABEL_341;
    if (a3 <= 0xF)
    {
      sub_22E8A9D90((uint64_t)v566, 7, "");
      sub_22E8A9B38((uint64_t)v566, (uint64_t)"void");
      sub_22E8A9D90((uint64_t)v566, 8, "");
    }
    if (SHIBYTE(v517) >= 0)
      v352 = HIBYTE(v517) & 0x7F;
    else
      v352 = v516;
    sub_22E3B8BF4((uint64_t)&v519, v352 + 1);
    if (v521 >= 0)
      v353 = (char *)&v519;
    else
      v353 = (char *)v519;
    if (v352)
    {
      if (SHIBYTE(v517) >= 0)
        v354 = &__p;
      else
        v354 = __p;
      memmove(v353, v354, v352);
    }
    *(_WORD *)&v353[v352] = 58;
    v560 = 260;
    v557 = &v519;
    v355 = sub_22F2F27DC(v389, (const char **)&v557);
    sub_22E8A9AD8((uint64_t)v566, (uint64_t)v355);
    if (v521 < 0)
      operator delete(v519);
    sub_22E8A9D90((uint64_t)v566, 7, "");
    sub_22E8A9B38((uint64_t)v566, (uint64_t)"NSSet *");
    sub_22E8A9D90((uint64_t)v566, 8, "");
    sub_22E8A9B38((uint64_t)v566, (uint64_t)"objects");
    *(_QWORD *)&v407 = 0;
    *((_QWORD *)&v407 + 1) = sub_22F2F28A4((uint64_t)v566);
    *(_DWORD *)v408 = v387;
    *(_OWORD *)&v408[4] = xmmword_22F469FD0;
    v91 = (void **)v409;
    memset(v409, 0, sizeof(v409));
    LOBYTE(v410) = v410 & 0xC0;
    v411 = 0uLL;
    *((_QWORD *)&v410 + 1) = 0;
    v356 = v393[1];
    if (v356 >= v393[2])
    {
      v360 = sub_22E9D8E48(v393, (uint64_t)&v407);
    }
    else
    {
      v357 = v407;
      v358 = *(_OWORD *)v408;
      *(_DWORD *)(v356 + 32) = *(_DWORD *)&v408[16];
      *(_OWORD *)v356 = v357;
      *(_OWORD *)(v356 + 16) = v358;
      *(_QWORD *)(v356 + 48) = 0;
      *(_QWORD *)(v356 + 56) = 0;
      *(_QWORD *)(v356 + 40) = 0;
      sub_22E6C6020((_QWORD *)(v356 + 40), 0, 0, 0);
      v359 = v411;
      *(_OWORD *)(v356 + 64) = v410;
      *(_OWORD *)(v356 + 80) = v359;
      v360 = v356 + 96;
    }
    v393[1] = v360;
    goto LABEL_733;
  }
LABEL_343:
  if (SHIBYTE(v555) < 0)
    operator delete(__dst);
  if (v570 != v572)
    free(v570);
  if (v567 != v569)
    free(v567);
}

char **sub_22E9D70F0(uint64_t a1, uint64_t a2, int a3, int a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  int *v34;
  unsigned int v35;
  _BYTE *v36;
  uint64_t v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t *v44;
  unint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v55;
  _QWORD *v56;
  __int128 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  BOOL v63;
  BOOL v64;
  _QWORD *v66;
  uint64_t v67;
  __int128 *v68;
  int *v69;
  unsigned int v70;
  _BYTE *v71;
  uint64_t v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unint64_t *v81;
  unint64_t *v83;
  __int128 v86[3];
  void *v87;
  int v88;
  char v89;
  void *v90;
  void *v91;
  __int128 v92;
  __int128 v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  _OWORD v100[2];
  int v101;
  _QWORD v102[3];
  __int128 v103;
  __int128 v104;
  _QWORD v105[3];
  __int128 v106;
  __int128 v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  void **v114;
  uint64_t v115;
  __int16 v116;
  char *v117;
  unint64_t v118;
  unint64_t v119;
  __int128 v120;
  unint64_t v121;
  _QWORD v122[2];
  uint64_t v123;
  __int128 v124[11];
  _BYTE v125[48];
  void *v126;
  void *v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  int v131;
  _BYTE v132[16];
  void *v133;
  uint64_t v134;
  _QWORD v135[8];

  v135[5] = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
    if (v11)
    {
      v14 = v11;
      v15 = 0;
      do
      {
        v16 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), v15);
        if (v16)
        {
          v17 = v16;
          *(_QWORD *)v125 = v16;
          v117 = 0;
          if ((sub_22F2BB328((uint64_t *)(a1 + 8560), v125, &v117) & 1) == 0)
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 232))(*(_QWORD *)(a1 + 8), v17);
        }
        v15 = (v15 + 1);
      }
      while (v14 != (_DWORD)v15);
    }
  }
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  *(_DWORD *)v125 = 0;
  v125[4] = 0;
  BYTE8(v128) = 0;
  memset(&v125[8], 0, 33);
  *(_QWORD *)&v129 = v132;
  *((_QWORD *)&v129 + 1) = v132;
  v130 = 8;
  v131 = 0;
  sub_22E9B831C((uint64_t)&v117, a1, v12, v13, (__int128 *)v125, 0, 0);
  if (*((_QWORD *)&v129 + 1) != (_QWORD)v129)
    free(*((void **)&v129 + 1));
  if (BYTE8(v128) && DWORD1(v128))
    free(v127);
  if (a5)
  {
    if (a5 >= 0x10)
    {
      v18 = *(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0);
      if (v18 && *(_BYTE *)(v18 + 16) == 57)
        a5 = *(_QWORD *)(v18 + 8);
    }
    else
    {
      a5 = 0;
    }
    v19 = a5 & 0xFFFFFFFFFFFFFFF0;
    v20 = *(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0);
    if (!v20 || (v21 = *(_DWORD *)(v20 + 16), (v21 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
        || (v20 = sub_22F10CF48(v20)) == 0)
      {
LABEL_23:
        v121 = a5 & 7 | *(_QWORD *)(v19 + 8);
        goto LABEL_24;
      }
      v21 = *(_DWORD *)(v20 + 16);
    }
    if ((v21 & 0x100000) != 0)
    {
      do
      {
        v20 = *(_QWORD *)(*(_QWORD *)(v20 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v20)
        {
          v80 = *(_DWORD *)(v20 + 16);
          if ((v80 & 0xFE) == 0x28)
            continue;
        }
        v20 = sub_22F10CF48(v20);
        v80 = *(_DWORD *)(v20 + 16);
      }
      while ((v80 & 0x100000) != 0);
    }
    a5 = *(_QWORD *)(v20 + 32);
    v19 = a5 & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_23;
  }
LABEL_24:
  v22 = operator new(0x28uLL);
  v22[2] = 0;
  v22[3] = 0;
  *((_DWORD *)v22 + 8) = 0;
  v23 = v122[0];
  *v22 = v122[0];
  v22[1] = v122;
  *(_QWORD *)(v23 + 8) = v22;
  v24 = v123;
  v122[0] = v22;
  ++v123;
  v25 = *(_QWORD *)(a1 + 8560);
  v26 = *(unsigned int *)(a1 + 8576);
  v27 = (unint64_t *)(v25 + 40 * v26);
  if (*(_DWORD *)(a1 + 8568))
  {
    if ((_DWORD)v26)
    {
      v55 = 40 * v26;
      v28 = *(unint64_t **)(a1 + 8560);
      while (*v28 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v28 += 5;
        v55 -= 40;
        if (!v55)
          goto LABEL_25;
      }
    }
    else
    {
      v28 = *(unint64_t **)(a1 + 8560);
    }
  }
  else
  {
LABEL_25:
    v28 = (unint64_t *)(v25 + 40 * v26);
  }
  v81 = (unint64_t *)(v25 + 40 * v26);
  if (v28 != v81)
  {
    do
    {
      v29 = 3;
      if (a3)
        v29 = 1;
      v83 = v28;
      v30 = &v28[v29];
      do
      {
        v31 = *v30 & 0xFFFFFFFFFFFFFFF8;
        if (!v31)
          break;
        if (sub_22E9D0854(*(_QWORD *)(v31 + 40), 0, a6, a7, 1))
        {
          if (a4)
          {
            if ((_DWORD)a7 && *(_DWORD *)(v31 + 104) >= a7)
            {
              v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 96) + 8 * (a7 - 1)) + 40);
              if (v32 >= 8
                && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 96) + 8 * (a7 - 1)) + 40) & 7) == 0)
              {
                *(_OWORD *)v125 = v120;
                memset(&v125[16], 0, 32);
                v126 = &v128;
                v127 = (void *)0x400000000;
                v133 = v135;
                v134 = 0x200000000;
                v34 = *(int **)((v32 & 0xFFFFFFFFFFFFFFF8) + 16);
                v35 = *v34;
                v116 = 261;
                v114 = (void **)(v34 + 4);
                v115 = v35;
                v36 = sub_22F2F27DC(v120, (const char **)&v114);
                sub_22E8A9AD8((uint64_t)v125, (uint64_t)v36);
                v37 = sub_22F2F28A4((uint64_t)v125);
                *(_QWORD *)&v106 = 0;
                *((_QWORD *)&v106 + 1) = v37;
                v107 = xmmword_22F469F30;
                v108 = 0;
                v110 = 0;
                v111 = 0;
                v109 = 0;
                LOBYTE(v112) = v112 & 0xC0;
                v113 = 0uLL;
                *((_QWORD *)&v112 + 1) = 0;
                v38 = v118;
                if (v118 >= v119)
                {
                  v42 = sub_22E9D8E48((uint64_t *)&v117, (uint64_t)&v106);
                }
                else
                {
                  v39 = v106;
                  v40 = v107;
                  *(_DWORD *)(v118 + 32) = v108;
                  *(_OWORD *)v38 = v39;
                  *(_OWORD *)(v38 + 16) = v40;
                  *(_QWORD *)(v38 + 40) = 0;
                  *(_QWORD *)(v38 + 48) = 0;
                  *(_QWORD *)(v38 + 56) = 0;
                  sub_22E6C6020((_QWORD *)(v38 + 40), v109, v110, 0x6DB6DB6DB6DB6DB7 * ((v110 - v109) >> 3));
                  v41 = v113;
                  *(_OWORD *)(v38 + 64) = v112;
                  *(_OWORD *)(v38 + 80) = v41;
                  v42 = v38 + 96;
                }
                v118 = v42;
                v114 = (void **)&v109;
                sub_22E6C60B8(&v114);
                if (v133 != v135)
                  free(v133);
                if (v126 != &v128)
                  free(v126);
              }
            }
          }
          else
          {
            v43 = sub_22E9C5678(v31);
            *(_QWORD *)v125 = v31;
            *(_QWORD *)&v125[16] = v43;
            *(_DWORD *)&v125[24] = 0;
            *(_DWORD *)&v125[32] = 0;
            v126 = 0;
            v127 = 0;
            *(_QWORD *)&v125[40] = 0;
            memset(v105, 0, sizeof(v105));
            LOBYTE(v128) = v128 & 0xC0;
            v129 = 0uLL;
            *((_QWORD *)&v128 + 1) = 0;
            sub_22E8AB5B4((uint64_t)v125, 1);
            v114 = (void **)v105;
            sub_22E6C60B8(&v114);
            *(_DWORD *)&v125[20] = a7;
            LOBYTE(v128) = v128 & 0xCF | 0x20;
            v101 = *(_DWORD *)&v125[32];
            v100[0] = *(_OWORD *)v125;
            v100[1] = *(_OWORD *)&v125[16];
            memset(v102, 0, sizeof(v102));
            sub_22E6C6020(v102, *(uint64_t *)&v125[40], (uint64_t)v126, 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v126 - *(_QWORD *)&v125[40]) >> 3));
            v103 = v128;
            v104 = v129;
            sub_22E9CF888((uint64_t *)&v117, (uint64_t)v100, *(_QWORD *)(a1 + 216));
            v114 = (void **)v102;
            sub_22E6C60B8(&v114);
            v114 = (void **)&v125[40];
            sub_22E6C60B8(&v114);
          }
        }
        v30 = (unint64_t *)(v30[1] & 0xFFFFFFFFFFFFFFF8);
      }
      while (v30);
      v44 = v83 + 5;
      while (v44 != v27)
      {
        v45 = *v44;
        v44 += 5;
        if (v45 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v28 = v44 - 5;
          goto LABEL_57;
        }
      }
      v28 = v27;
LABEL_57:
      ;
    }
    while (v28 != v81);
    v22 = (_QWORD *)v122[0];
    v23 = *(_QWORD *)v122[0];
    v24 = v123 - 1;
  }
  *(_QWORD *)(v23 + 8) = v22[1];
  *(_QWORD *)v22[1] = v23;
  v123 = v24;
  sub_22E9D8FB0((uint64_t)v22);
  if ((a4 & 1) == 0)
  {
    if (a7)
    {
      v46 = *(_DWORD **)(*(_QWORD *)a6 + 16);
      if ((*v46 & 0xFFFFFFFC) != 0 && v46[4] == 1953066601)
      {
        v47 = *(_QWORD *)(a1 + 80);
        v48 = sub_22F18DE84(v47, 1);
        v50 = v49;
        v51 = sub_22F418224(v47, 1);
        if (v48 != (_QWORD *)v51)
        {
          v56 = (_QWORD *)v51;
          v57 = &v128;
          do
          {
            v58 = *(_QWORD *)(*v48 + 16);
            if (*(_DWORD *)v58 == 25)
            {
              v59 = *(_QWORD *)(v58 + 16);
              v60 = *(_QWORD *)(v58 + 24);
              v61 = *(_QWORD *)(v58 + 32);
              v62 = *(unsigned __int8 *)(v58 + 40);
              v63 = v59 == 0x47495345445F534ELL && v60 == 0x4E495F444554414ELL;
              v64 = v63 && v61 == 0x455A494C41495449;
              if (v64 && v62 == 82)
              {
                v66 = operator new(0x28uLL);
                v66[2] = 0;
                v66[3] = 0;
                *((_DWORD *)v66 + 8) = 0;
                v67 = v122[0];
                *v66 = v122[0];
                v66[1] = v122;
                *(_QWORD *)(v67 + 8) = v66;
                v122[0] = v66;
                ++v123;
                *(_OWORD *)v125 = v120;
                memset(&v125[16], 0, 32);
                v68 = v57;
                v126 = v57;
                v127 = (void *)0x400000000;
                v133 = v135;
                v134 = 0x200000000;
                v69 = *(int **)(*v48 + 16);
                v70 = *v69;
                v116 = 261;
                v114 = (void **)(v69 + 4);
                v115 = v70;
                v71 = sub_22F2F27DC(v120, (const char **)&v114);
                sub_22E8A9AD8((uint64_t)v125, (uint64_t)v71);
                v72 = sub_22F2F28A4((uint64_t)v125);
                *(_QWORD *)&v92 = 0;
                *((_QWORD *)&v92 + 1) = v72;
                v93 = xmmword_22F469FE0;
                v94 = 0;
                v96 = 0;
                v97 = 0;
                v95 = 0;
                LOBYTE(v98) = v98 & 0xC0;
                v99 = 0uLL;
                *((_QWORD *)&v98 + 1) = 0;
                v73 = v118;
                if (v118 >= v119)
                {
                  v77 = sub_22E9D8E48((uint64_t *)&v117, (uint64_t)&v92);
                }
                else
                {
                  v74 = v92;
                  v75 = v93;
                  *(_DWORD *)(v118 + 32) = v94;
                  *(_OWORD *)v73 = v74;
                  *(_OWORD *)(v73 + 16) = v75;
                  *(_QWORD *)(v73 + 40) = 0;
                  *(_QWORD *)(v73 + 48) = 0;
                  *(_QWORD *)(v73 + 56) = 0;
                  sub_22E6C6020((_QWORD *)(v73 + 40), v95, v96, 0x6DB6DB6DB6DB6DB7 * ((v96 - v95) >> 3));
                  v76 = v99;
                  *(_OWORD *)(v73 + 64) = v98;
                  *(_OWORD *)(v73 + 80) = v76;
                  v77 = v73 + 96;
                }
                v118 = v77;
                v114 = (void **)&v95;
                sub_22E6C60B8(&v114);
                v78 = v122[0];
                v79 = *(_QWORD *)v122[0];
                *(_QWORD *)(v79 + 8) = *(_QWORD *)(v122[0] + 8);
                **(_QWORD **)(v78 + 8) = v79;
                --v123;
                sub_22E9D8FB0(v78);
                v57 = v68;
                if (v133 != v135)
                  free(v133);
                if (v126 != v68)
                  free(v126);
              }
            }
            while (1)
            {
              v48 += 2;
              if (v48 == v50)
                break;
              if ((*v48 | 0x1000) != 0xFFFFFFFFFFFFF000)
                goto LABEL_94;
            }
            v48 = v50;
LABEL_94:
            ;
          }
          while (v48 != v56);
        }
      }
    }
  }
  v52 = *(_QWORD *)(a1 + 208);
  sub_22F2A4F2C((uint64_t)v86, v124);
  if ((char *)v118 == v117)
    v53 = 0;
  else
    v53 = v117;
  sub_22E9B83FC(a1, v52, v86, (uint64_t)v53, -1431655765 * ((v118 - (unint64_t)v117) >> 5));
  if (v91 != v90)
    free(v91);
  if (v89)
  {
    if (v88)
      free(v87);
    v89 = 0;
  }
  return sub_22E9B8490(&v117);
}

void sub_22E9D7B08(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  void **v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  char *v37;
  __int128 v38[3];
  void *v39;
  int v40;
  char v41;
  void *v42;
  void *v43;
  void **v44[3];
  llvm *v45[2];
  unsigned int v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  char v50;
  void *v51;
  int v52;
  char v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  int v57;
  _BYTE v58[64];
  char *v59;
  char *v60;
  __int128 v61[11];
  void *v62[2];
  char v63;
  char v64;
  _QWORD *v65;
  __int128 v66;
  _QWORD v67[17];

  v67[16] = *MEMORY[0x24BDAC8D0];
  v64 = a4;
  llvm::sys::path::convert_to_slash();
  if (v63 >= 0)
    v5 = v62;
  else
    v5 = (void **)v62[0];
  if (v63 >= 0)
    v6 = v63 & 0x7F;
  else
    v6 = (size_t)v62[1];
  v7 = v67;
  v65 = v67;
  v66 = xmmword_22F44E310;
  if (v6 >= 0x81)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v7 = v65;
    v8 = v66;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    if (!v6)
      goto LABEL_10;
  }
  memcpy((char *)v7 + v8, v5, v6);
  v9 = v66;
LABEL_10:
  *(_QWORD *)&v66 = v9 + v6;
  llvm::sys::path::native();
  v10 = *(void ***)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 16) + 8);
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  LODWORD(v47) = 34;
  BYTE4(v47) = 0;
  v53 = 0;
  v48 = 0u;
  v49 = 0u;
  v50 = 0;
  v54 = v58;
  v55 = v58;
  v56 = 8;
  v57 = 0;
  sub_22E9B831C((uint64_t)&v59, a1, v11, v12, (__int128 *)&v47, 0, 0);
  if (v55 != v54)
    free(v55);
  if (v53 && v52)
    free(v51);
  v45[0] = 0;
  v45[1] = 0;
  v46 = 0;
  v47 = &v64;
  *(_QWORD *)&v48 = v45;
  *((_QWORD *)&v48 + 1) = &v59;
  *(_QWORD *)&v49 = a1;
  v44[0] = (void **)&v65;
  v44[1] = v10;
  v44[2] = (void **)&v47;
  v13 = *(_QWORD **)(a1 + 80);
  v14 = v13[13];
  if (!v64)
  {
    v15 = sub_22F172F28(v13);
    v16 = sub_22E49F3DC(*(_QWORD **)(*(_QWORD *)(v15 + 8) + 88), *(_DWORD *)(v15 + 16));
    if (v16)
    {
      v17 = *(_QWORD *)((*((_QWORD *)v16 + 2) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v17)
      {
        do
        {
          v18 = *(_QWORD *)(v17 + 8);
          v17 = v18 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while ((v18 & 2) != 0 && v17);
        if (v17)
        {
          v19 = *(_QWORD *)(v17 + 40);
          if (v19)
            sub_22E9D7F04(v44, *(void **)v19, *(_QWORD *)(v19 + 8), 0, 0);
        }
      }
    }
    v20 = *(unsigned int *)(v14 + 104);
    if ((_DWORD)v20)
    {
      v21 = 0;
      v22 = 16 * v20;
      do
      {
        v23 = *(_QWORD *)(v14 + 56);
        v24 = (*(unsigned __int8 *)(v23 + v21 + 8) >> 2) & 3;
        if (v24 <= 1)
          sub_22E9D7F04(v44, **(void ***)(*(_QWORD *)(v23 + v21) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + v21) + 8) + 8), 0, v24);
        v21 += 16;
      }
      while (v22 != v21);
    }
  }
  v25 = *(unsigned int *)(v14 + 104);
  v26 = *(unsigned int *)(v14 + 108);
  if ((_DWORD)v25 != (_DWORD)v26)
  {
    v27 = v26 - v25;
    v28 = 16 * v25;
    do
    {
      v29 = *(_QWORD *)(v14 + 56);
      v30 = (*(unsigned __int8 *)(v29 + v28 + 8) >> 2) & 3;
      if (v30 <= 1)
        sub_22E9D7F04(v44, **(void ***)(*(_QWORD *)(v29 + v28) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + v28) + 8) + 8), 0, v30);
      v28 += 16;
      --v27;
    }
    while (v27);
    LODWORD(v25) = *(_DWORD *)(v14 + 108);
  }
  v31 = (uint64_t)(*(_QWORD *)(v14 + 64) - *(_QWORD *)(v14 + 56)) >> 4;
  if (v31 != v25)
  {
    v32 = v31 - v25;
    v33 = 16 * v25;
    do
    {
      v34 = *(_QWORD *)(v14 + 56);
      v35 = (*(unsigned __int8 *)(v34 + v33 + 8) >> 2) & 3;
      if (v35 <= 1)
        sub_22E9D7F04(v44, **(void ***)(*(_QWORD *)(v34 + v33) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + v33) + 8) + 8), 1, v35);
      v33 += 16;
      --v32;
    }
    while (v32);
  }
  v36 = *(_QWORD *)(a1 + 208);
  sub_22F2A4F2C((uint64_t)v38, v61);
  if (v60 == v59)
    v37 = 0;
  else
    v37 = v59;
  sub_22E9B83FC(a1, v36, v38, (uint64_t)v37, -1431655765 * ((unint64_t)(v60 - v59) >> 5));
  if (v43 != v42)
    free(v43);
  if (v41)
  {
    if (v40)
      free(v39);
    v41 = 0;
  }
  llvm::deallocate_buffer(v45[0], (void *)(16 * v46));
  sub_22E9B8490(&v59);
  if (v65 != v67)
    free(v65);
  if (v63 < 0)
    operator delete(v62[0]);
}

void sub_22E9D7F04(void ***a1, void *__src, size_t __n, char a4, int a5)
{
  uint64_t v10;
  void **v11;
  std::__shared_weak_count *v12;
  _WORD *v13;
  unint64_t v14;
  BOOL v15;
  _BOOL4 v16;
  void **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t v28;
  int v29;
  void **v30;
  const char *v31;
  char v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  uint64_t v38;
  void *v39;
  char v40;
  int v41;
  _BYTE *v42;
  char *__s;
  unint64_t __na;
  const char *v45;
  std::__shared_weak_count *v46;
  __int16 v47;
  uint64_t v48;
  const std::error_category *v49;
  const char *v50;
  __int16 v51;
  _QWORD v52[4];
  __int16 v53;
  void *__p;
  std::__shared_weak_count *v55;
  uint64_t v56;
  const std::error_category *v57;
  __int16 v58;
  int v59;
  char v60;
  char *v61;
  __int128 v62;
  _QWORD v63[19];

  v63[16] = *MEMORY[0x24BDAC8D0];
  v61 = (char *)v63;
  v62 = xmmword_22F44E310;
  if (__n < 0x81)
  {
    v10 = 0;
    if (!__n)
      goto LABEL_4;
    goto LABEL_3;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  v10 = v62;
  if (__n)
  {
LABEL_3:
    memcpy(&v61[v10], __src, __n);
    v10 = v62;
  }
LABEL_4:
  *(_QWORD *)&v62 = v10 + __n;
  v11 = *a1;
  v12 = (std::__shared_weak_count *)(*a1)[1];
  if (v12)
  {
    if (a5 == 1)
    {
      llvm::sys::path::begin();
      llvm::sys::path::end();
      v51 = 773;
      v48 = v56;
      v49 = v57;
      v50 = ".framework";
      v45 = "Headers";
      v47 = 259;
      llvm::sys::path::append();
      llvm::sys::path::const_iterator::operator++();
      llvm::sys::path::append();
    }
    else
    {
      v58 = 261;
      __p = *v11;
      v55 = v12;
      v53 = 257;
      v51 = 257;
      v47 = 257;
      llvm::sys::path::append();
    }
  }
  v13 = (_WORD *)llvm::sys::path::filename();
  v15 = 0;
  if (v14 >= 2)
  {
    if (*v13 == 29777)
    {
      v16 = 0;
      goto LABEL_27;
    }
    v15 = v14 == 8 && *(_QWORD *)v13 == 0x7451657669746341;
  }
  v16 = 0;
  if ((a4 & 1) == 0 && !v15)
    v16 = (unint64_t)v62 < 0x12
       || *(_QWORD *)&v61[v62 - 18] != 0x6F77656D6172662ELL
       || *(_QWORD *)&v61[v62 - 10] != 0x65646165482F6B72
       || *(_WORD *)&v61[v62 - 2] != 29554;
LABEL_27:
  LODWORD(v48) = 0;
  v49 = std::system_category();
  v19 = a1[1];
  v58 = 261;
  __p = v61;
  v55 = (std::__shared_weak_count *)v62;
  (*((void (**)(const char **__return_ptr, void **, void **, uint64_t *))*v19 + 4))(&v45, v19, &__p, &v48);
  if (!(_DWORD)v48)
  {
    v23 = 0;
    while (1)
    {
      __p = 0;
      v55 = 0;
      v24 = sub_22E6D5ADC((uint64_t *)&v45, (uint64_t *)&__p);
      v25 = v55;
      if (v55)
      {
        p_shared_owners = (unint64_t *)&v55->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if (v24)
        goto LABEL_28;
      if (++v23 == 2500)
        goto LABEL_28;
      __s = (char *)llvm::sys::path::filename();
      __na = v28;
      v29 = *((_DWORD *)v45 + 8);
      if (v29 == 4)
      {
        v30 = a1[1];
        v31 = (const char *)*((_QWORD *)v45 + 1);
        v32 = v45[31];
        v33 = v32;
        if (v32 >= 0)
          v31 = v45 + 8;
        v34 = *((_QWORD *)v45 + 2);
        v35 = v32 & 0x7F;
        if (v33 >= 0)
          v34 = v35;
        v53 = 261;
        v52[0] = v31;
        v52[1] = v34;
        (*((void (**)(void **__return_ptr, void **, _QWORD *))*v30 + 2))(&__p, v30, v52);
        if ((v60 & 1) != 0)
          v29 = 4;
        else
          v29 = v59;
        if ((v60 & 1) == 0 && SHIBYTE(v56) < 0)
          operator delete(__p);
      }
      if (v29 == 2)
        break;
      if (v29 == 3)
      {
        if (a5 == 1)
        {
          v36 = __na;
          if (!(*a1)[1])
          {
            if (__na < 0xA)
              goto LABEL_75;
            if (*(_QWORD *)&__s[__na - 10] != 0x6F77656D6172662ELL || *(_WORD *)&__s[__na - 2] != 27506)
              goto LABEL_75;
            if (__na >= __na - 10)
              v36 = __na - 10;
          }
        }
        else
        {
          v36 = __na;
        }
        v38 = (uint64_t)a1[2];
        v39 = __s;
        v40 = 1;
LABEL_74:
        sub_22E9F2F80(v38, v39, v36, v40);
      }
LABEL_75:
      sub_22E6D5A44(&v45, &v48);
      if ((_DWORD)v48)
        goto LABEL_28;
    }
    if ((llvm::StringRef::endswith_insensitive() & 1) == 0
      && (llvm::StringRef::endswith_insensitive() & 1) == 0
      && (llvm::StringRef::endswith_insensitive() & 1) == 0)
    {
      v41 = llvm::StringRef::endswith_insensitive();
      if (((v41 | v16) & 1) != 0)
      {
        if (!v41)
          goto LABEL_75;
      }
      else if (__na)
      {
        v42 = memchr(__s, 46, __na);
        if (v42)
        {
          if (v42 - __s != -1)
            goto LABEL_75;
        }
      }
    }
    v38 = (uint64_t)a1[2];
    v39 = __s;
    v36 = __na;
    v40 = 0;
    goto LABEL_74;
  }
LABEL_28:
  v20 = v46;
  if (v46)
  {
    v21 = (unint64_t *)&v46->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v61 != (char *)v63)
    free(v61);
}

BOOL sub_22E9D848C(uint64_t a1)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  v2 = *(_DWORD *)(v1 + 16);
  if (v1)
    v3 = v2 == 11;
  else
    v3 = 0;
  if (v3)
    return ((*(_DWORD *)(v1 + 16) >> 19) & 0x1FEu) - 166 < 0x14;
  if (!v1 || v2 != 44)
    return v2 == 9;
  v4 = sub_22F114198(*(_QWORD *)(v1 + 24));
  return (*(_BYTE *)(v4 + 74) & 1) != 0 || *(_QWORD *)(v4 + 128) > 7uLL;
}

void sub_22E9D8510(_BYTE *a1, uint64_t a2, _QWORD *a3, _DWORD *a4)
{
  unint64_t v7;
  BOOL v8;
  char v9;
  _BYTE *v10;
  unint64_t v11;
  std::string::size_type v12;
  const void *v13;
  std::string *p_p;
  uint64_t v15;
  uint64_t v16;
  std::string __p;
  char v18;

  v7 = sub_22EFBF2CC(a2);
  if (HIDWORD(v7))
    v8 = (_DWORD)v7 == 0;
  else
    v8 = 1;
  v9 = v8;
  v18 = v9;
  if (v8)
    goto LABEL_9;
  v10 = (_BYTE *)sub_22F142368(v7, 1u, a3, a4, &v18);
  if (v18)
    goto LABEL_9;
  v12 = v11;
  if (!v11)
    goto LABEL_9;
  v13 = v10;
  if (v11 == 1)
  {
    if (*v10 != 61)
    {
      if (!v10)
        goto LABEL_20;
      goto LABEL_19;
    }
LABEL_9:
    a1[23] = 0;
    *a1 = 0;
    return;
  }
  if (!v10)
  {
LABEL_20:
    memset(&__p, 0, sizeof(__p));
    goto LABEL_25;
  }
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v11 >= 0x17)
  {
    v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v15 = v11 | 7;
    v16 = v15 + 1;
    p_p = (std::string *)operator new(v15 + 1);
    __p.__r_.__value_.__l.__size_ = v12;
    __p.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_24;
  }
LABEL_19:
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v11;
  p_p = &__p;
LABEL_24:
  memmove(p_p, v13, v12);
  p_p->__r_.__value_.__s.__data_[v12] = 0;
LABEL_25:
  std::string::at(&__p, 0);
  std::operator+<char>();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

unint64_t *sub_22E9D8678(unint64_t *result, unint64_t *a2, unint64_t *a3, char a4)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;

  if (!result)
    return result;
  v7 = *result++;
  v6 = v7;
  if ((v7 & 0xF) != 0)
  {
    v6 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
    if ((v6 & 0xFFFFFFFFFFFFFFF0) != 0)
      v13 = *(_QWORD *)((char *)&unk_22F469D20
                      + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
    else
      v13 = 1;
    result = (unint64_t *)(((unint64_t)result + v13 - 1) & -v13);
    if ((a4 & 1) != 0)
      goto LABEL_4;
  }
  else if ((a4 & 1) != 0)
  {
    goto LABEL_4;
  }
  while (1)
  {
    while ((v6 & 0xF) != 0)
    {
LABEL_18:
      v6 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
      if ((v6 & 0xFFFFFFFFFFFFFFF0) != 0)
        v14 = *(_QWORD *)((char *)&unk_22F469D20
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v14 = 1;
      result = (unint64_t *)(((unint64_t)result + v14 - 1) & -v14);
    }
    while (1)
    {
      v16 = *(unsigned __int8 *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v6)
      {
        if (v16 == 50)
          break;
      }
      if (!v6 || v16 != 7)
        goto LABEL_4;
      v6 = *(_QWORD *)(v6 + 32);
      if (v6 >= 0x10 && (v6 & 0xF) == 0)
        v15 = *(_QWORD *)((char *)&unk_22F469D20
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v15 = 1;
      result = (unint64_t *)(((unint64_t)result + v15 + 7) & -v15);
      if ((v6 & 0xF) != 0)
        goto LABEL_18;
    }
    v18 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 80);
    v19 = (unint64_t *)(v18 & 0xFFFFFFFFFFFFFFF8);
    if ((v18 & 4) != 0)
      v19 = (unint64_t *)*v19;
    if (!v19)
      break;
    v21 = *v19;
    v20 = v19 + 1;
    v6 = v21;
    if ((v21 & 0xF) != 0)
    {
      v6 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
      if ((v6 & 0xFFFFFFFFFFFFFFF0) != 0)
        v22 = *(_QWORD *)((char *)&unk_22F469D20
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v22 = 1;
      result = (unint64_t *)(((unint64_t)v20 + v22 - 1) & -v22);
    }
    else
    {
      result = v20;
    }
  }
LABEL_4:
  if ((v6 & 0xF) != 0 || !v6 || *(_BYTE *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 16) != 10)
    return result;
  v8 = *(_QWORD *)(v6 + 32);
  if (v8 >= 0x10 && (v8 & 0xF) == 0)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFF0;
    v10 = *(_QWORD *)((char *)&unk_22F469D20
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
    v11 = ((unint64_t)result + v10 + 3) & -v10;
    goto LABEL_10;
  }
  v11 = (uint64_t)result + 4;
  if ((v8 & 0xF) == 0)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFF0;
LABEL_10:
    if (*(_BYTE *)(*(_QWORD *)v9 + 16) == 37)
    {
      result = (unint64_t *)sub_22F1169C8(v8, v11);
      v8 = (unint64_t)result;
    }
  }
  if ((v8 & 0xF) != 0)
  {
    v8 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v23 = *(unsigned __int8 *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 16) - 25;
    v24 = v23 >= 2;
    if (v23 >= 2)
      v25 = 0;
    else
      v25 = v8;
    if (v24)
      v26 = 0;
    else
      v26 = v11;
    *a2 = v25;
    a2[1] = v26;
    if (*(_BYTE *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
    {
      v12 = v11;
    }
    else
    {
      v8 = 0;
      v12 = 0;
    }
  }
  *a3 = v8;
  a3[1] = v12;
  return result;
}

void sub_22E9D88EC(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4, uint64_t a5, char a6, int a7, __int128 *a8)
{
  unint64_t v13;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int i;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type v38;
  uint64_t v39;
  unint64_t v40;
  _DWORD *v41;
  std::string *v42;
  std::string::size_type size;
  unsigned int v44;
  const char *v45;
  char v46;
  int v47;
  size_t v48;
  size_t v49;
  void **v50;
  const void *v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  __int128 v56;
  uint64_t v57;
  void *__p[2];
  uint64_t v59;
  uint64_t v60;
  std::string v61;
  int v62;

  v13 = a3;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v16 = *(_QWORD *)(*a4 + 24);
  v60 = v16;
  if (*((_BYTE *)a8 + 16))
  {
    if (!a3 || (v17 = a3, (*(_DWORD *)(a3 + 28) & 0x7F) != 0x53))
    {
      v18 = *(_QWORD *)(a3 + 16);
      v19 = v18 & 0xFFFFFFFFFFFFFFF8;
      if ((v18 & 4) != 0)
        v19 = *(_QWORD *)v19;
      for (i = *(_WORD *)(v19 + 8) & 0x7F; i != 83; i = *(_WORD *)(v19 + 8) & 0x7F)
      {
        v21 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v21 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_17;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_16;
          if (i == 16)
            goto LABEL_10;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_23;
          if (i == 24)
          {
LABEL_10:
            v21 = -48;
          }
          else
          {
LABEL_16:
            if (i != 70)
            {
LABEL_17:
              v22 = i - 52;
              if ((i - 33) >= 5)
                v23 = -48;
              else
                v23 = -64;
              if (v22 >= 6)
                v21 = v23;
              else
                v21 = -72;
              goto LABEL_23;
            }
            v21 = -64;
          }
        }
LABEL_23:
        v24 = *(_QWORD *)(v19 + v21 + 16);
        v19 = v24 & 0xFFFFFFFFFFFFFFF8;
        if ((v24 & 4) != 0)
          v19 = *(_QWORD *)v19;
      }
      v17 = v19 - 40;
    }
    v61.__r_.__value_.__r.__words[0] = *(_QWORD *)(v17 + 88);
    *(_OWORD *)&v61.__r_.__value_.__r.__words[1] = *a8;
    v62 = 1;
    sub_22F10E588((uint64_t)&v61, v16);
    v16 = v25;
    v60 = v25;
  }
  v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v26)
    v27 = *(_DWORD *)(v26 + 16) == 11;
  else
    v27 = 0;
  if (!v27 || (*(_DWORD *)(v26 + 16) & 0xFF80000) != 86507520 || a7 != 0)
    sub_22F119374(&v60, (__int128 *)a1, a2);
  memset(&v61, 0, sizeof(v61));
  if (!*(_QWORD *)a5)
    goto LABEL_76;
  if (*(_BYTE *)(*a4 + 16) == 25 || (*(_DWORD *)(*a4 + 20) & 0x3FFFC0) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)a5 + 23) & 8) != 0)
    {
      v45 = "(...)";
LABEL_78:
      MEMORY[0x2348A0C14](&v61, v45);
      if (!a7)
        goto LABEL_63;
LABEL_79:
      v46 = *(_BYTE *)(a1 + 23);
      v47 = v46;
      v48 = v46 & 0x7F;
      if (v47 >= 0)
        v49 = v48;
      else
        v49 = *(_QWORD *)(a1 + 8);
      sub_22E3B8BF4((uint64_t)__p, v49 + 3);
      if (v59 >= 0)
        v50 = __p;
      else
        v50 = (void **)__p[0];
      if (v49)
      {
        if (*(char *)(a1 + 23) >= 0)
          v51 = (const void *)a1;
        else
          v51 = *(const void **)a1;
        memmove(v50, v51, v49);
      }
      *(_DWORD *)((char *)v50 + v49) = 6170656;
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      *(_OWORD *)a1 = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 16) = v59;
      if ((a6 & 1) == 0)
      {
        v52 = *(_QWORD *)(v13 + 40);
        if ((v52 & 7) == 0)
        {
          v53 = v52 & 0xFFFFFFFFFFFFFFF8;
          if (v53)
            std::string::append((std::string *)a1, (const std::string::value_type *)(*(_QWORD *)(v53 + 16) + 16), **(unsigned int **)(v53 + 16));
        }
      }
      std::string::append((std::string *)a1, ")");
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = &v61;
      else
        v42 = (std::string *)v61.__r_.__value_.__r.__words[0];
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v61.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v61.__r_.__value_.__l.__size_;
      goto LABEL_102;
    }
LABEL_76:
    v45 = "(void)";
    goto LABEL_78;
  }
  v54 = a6;
  v55 = v13;
  std::string::append(&v61, "(");
  if (*(_BYTE *)(*a4 + 16) != 25)
  {
    v30 = (unsigned __int16)(*(_QWORD *)(*a4 + 16) >> 38);
    if ((unsigned __int16)(*(_QWORD *)(*a4 + 16) >> 38))
    {
      v31 = 0;
      v32 = 8 * v30;
      v33 = 8 * (v30 - 1);
      do
      {
        if (v31)
          std::string::append(&v61, ", ");
        v34 = *(_QWORD *)(a4[1] + v31 + 16);
        v56 = *a8;
        v57 = *((_QWORD *)a8 + 2);
        sub_22E9B67C4(__p, a2, v34, 0, 1, &v56);
        if (v59 >= 0)
          v35 = __p;
        else
          v35 = (void **)__p[0];
        if (v59 >= 0)
          v36 = HIBYTE(v59) & 0x7F;
        else
          v36 = (std::string::size_type)__p[1];
        std::string::append(&v61, (const std::string::value_type *)v35, v36);
        if (SHIBYTE(v59) < 0)
          operator delete(__p[0]);
        if (v33 == v31 && (*(_BYTE *)(*(_QWORD *)a5 + 23) & 8) != 0)
          std::string::append(&v61, ", ...");
        v31 += 8;
      }
      while (v32 != v31);
    }
  }
  std::string::append(&v61, ")");
  v13 = v55;
  a6 = v54;
  if (a7)
    goto LABEL_79;
LABEL_63:
  sub_22E74ABDC(94, (const void **)a1, (uint64_t)__p);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 16) = v59;
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = &v61;
  else
    v37 = (std::string *)v61.__r_.__value_.__r.__words[0];
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = *((_BYTE *)&v61.__r_.__value_.__s + 23) & 0x7F;
  else
    v38 = v61.__r_.__value_.__l.__size_;
  std::string::append((std::string *)a1, (const std::string::value_type *)v37, v38);
  if ((a6 & 1) == 0)
  {
    v39 = *(_QWORD *)(v13 + 40);
    if ((v39 & 7) == 0)
    {
      v40 = v39 & 0xFFFFFFFFFFFFFFF8;
      if (v40)
      {
        v41 = *(_DWORD **)(v40 + 16);
        v44 = *v41;
        v42 = (std::string *)(v41 + 4);
        size = v44;
LABEL_102:
        std::string::append((std::string *)a1, (const std::string::value_type *)v42, size);
      }
    }
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
}

uint64_t sub_22E9D8DB4(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= a1[2])
  {
    result = sub_22E9D8E48(a1, a2);
  }
  else
  {
    v5 = *(_OWORD *)a2;
    v6 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(v4 + 32) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)v4 = v5;
    *(_OWORD *)(v4 + 16) = v6;
    *(_QWORD *)(v4 + 48) = 0;
    *(_QWORD *)(v4 + 56) = 0;
    *(_QWORD *)(v4 + 40) = 0;
    sub_22E6C6020((_QWORD *)(v4 + 40), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
    v7 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v4 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v4 + 80) = v7;
    result = v4 + 96;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_22E9D8E48(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  void *__p;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;
  void **v21;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 5) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v3;
  v20 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      sub_22E3B3F8C();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[96 * v2];
  __p = v7;
  v17 = v8;
  v19 = &v7[96 * v6];
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_OWORD *)v8 + 1) = v9;
  *((_DWORD *)v8 + 8) = *(_DWORD *)(a2 + 32);
  *((_QWORD *)v8 + 6) = 0;
  *((_QWORD *)v8 + 7) = 0;
  *((_QWORD *)v8 + 5) = 0;
  sub_22E6C6020((_QWORD *)v8 + 5, *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  v10 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v8 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v8 + 5) = v10;
  v18 = v8 + 96;
  sub_22F319B00(a1, &__p);
  v11 = a1[1];
  v13 = v17;
  v12 = v18;
  if (v18 != v17)
  {
    do
    {
      v14 = v12 - 96;
      v21 = (void **)(v12 - 56);
      sub_22E6C60B8(&v21);
      v12 = v14;
    }
    while (v14 != v13);
  }
  if (__p)
    operator delete(__p);
  return v11;
}

void sub_22E9D8FB0(uint64_t a1)
{
  uint64_t v2;
  llvm *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = *(unsigned int *)(a1 + 32);
  v3 = *(llvm **)(a1 + 16);
  if ((_DWORD)v2)
  {
    v4 = 24 * v2;
    v5 = (uint64_t *)((char *)v3 + 8);
    do
    {
      if ((unint64_t)*(v5 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
        v5 = sub_22E9D9024(v5);
      v5 += 3;
      v4 -= 24;
    }
    while (v4);
    v3 = *(llvm **)(a1 + 16);
    v6 = 24 * *(unsigned int *)(a1 + 32);
  }
  else
  {
    v6 = 0;
  }
  llvm::deallocate_buffer(v3, (void *)v6);
  operator delete((void *)a1);
}

uint64_t *sub_22E9D9024(uint64_t *a1)
{
  uint64_t v2;
  void **v3;

  v2 = *a1;
  if ((*a1 & 4) != 0)
  {
    v3 = (void **)(v2 & 0xFFFFFFFFFFFFFFF8);
    if ((v2 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if (*v3 != v3 + 2)
        free(*v3);
      MEMORY[0x2348A0E9C](v3, 0x1080C4014AC8D4BLL);
      *a1 = 0;
    }
  }
  return a1;
}

uint64_t sub_22E9D9084(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24FAB7520;
  v3 = (void **)(a1 + 40);
  sub_22E6C60B8(&v3);
  return MEMORY[0x2348A0E9C](a1, 0x10A1C40F2926BA7);
}

void sub_22E9D90DC(_QWORD *a1, uint64_t a2, uint64_t a3, _WORD *a4, int a5)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  _OWORD v16[2];
  int v17;
  _QWORD v18[3];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  void **v30[3];

  v10 = sub_22E9C5678(a2);
  if (a4)
  {
    if ((a4[4] & 0x7Fu) - 35 > 2)
    {
      v11 = 0;
      a4 = 0;
    }
    else
    {
      v11 = a1[4];
      v12 = (uint64_t)(a4 - 32);
      if (a1[3])
        a4 = (_WORD *)a1[3];
      else
        a4 -= 32;
      v13 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)a4 + 32))(a4);
      if (v13 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12)
        && !sub_22EFB35BC((unint64_t)a4, v12))
      {
        v11 = 0;
        a4 = (_WORD *)v12;
      }
    }
  }
  else
  {
    v11 = 0;
  }
  v14 = sub_22E90B6D4(*(_QWORD **)(a1[1] + 184), a2, (uint64_t)a4, v11);
  v22 = 0;
  v21 = 0uLL;
  sub_22E6C6020(&v21, a1[5], a1[6], 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[6] - a1[5]) >> 3));
  *(_QWORD *)&v24 = v10;
  DWORD2(v24) = 0;
  v25 = 0;
  v26 = v21;
  v27 = v22;
  v21 = 0uLL;
  v22 = 0;
  *(_QWORD *)&v23 = a2;
  LOBYTE(v28) = 0;
  v29 = 0uLL;
  *((_QWORD *)&v28 + 1) = 0;
  sub_22E8AB5B4((uint64_t)&v23, v14);
  v30[0] = (void **)&v21;
  sub_22E6C60B8(v30);
  v15 = a1[1];
  v16[0] = v23;
  v16[1] = v24;
  v17 = v25;
  memset(v18, 0, sizeof(v18));
  sub_22E6C6020(v18, v26, *((uint64_t *)&v26 + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v26 + 1) - v26) >> 3));
  v19 = v28;
  v20 = v29;
  sub_22E9C57E4(v15, v16, a1[2], a3, a5);
  v30[0] = (void **)v18;
  sub_22E6C60B8(v30);
  v30[0] = (void **)&v26;
  sub_22E6C60B8(v30);
}

uint64_t sub_22E9D92D4(uint64_t a1, const void *a2)
{
  return sub_22E3BA850(*(_QWORD *)(a1 + 8) + 392, a2);
}

void sub_22E9D92E0(uint64_t a1)
{
  unint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  int v9;
  _QWORD v10[3];
  __int128 v11;
  __int128 v12;
  void **v13;
  _OWORD v14[3];
  void *v15;
  uint64_t v16;
  _BYTE v17[64];
  void *v18;
  uint64_t v19;
  _QWORD v20[4];

  v20[3] = *MEMORY[0x24BDAC8D0];
  v14[0] = *(_OWORD *)(a1 + 192);
  memset(&v14[1], 0, 32);
  v15 = v17;
  v16 = 0x400000000;
  v18 = v20;
  v19 = 0x200000000;
  sub_22E8A9AD8((uint64_t)v14, (uint64_t)"typedef");
  sub_22E8A9D90((uint64_t)v14, 19, "");
  sub_22E8A9C00((uint64_t)v14, (uint64_t)"type");
  sub_22E8A9D90((uint64_t)v14, 19, "");
  sub_22E8A9C00((uint64_t)v14, (uint64_t)"name");
  sub_22E8A9D90((uint64_t)v14, 17, "");
  *(_QWORD *)&v7 = 0;
  *((_QWORD *)&v7 + 1) = sub_22F2F28A4((uint64_t)v14);
  v8 = xmmword_22F469F30;
  v9 = 0;
  memset(v10, 0, sizeof(v10));
  LOBYTE(v11) = 0;
  v12 = 0uLL;
  *((_QWORD *)&v11 + 1) = 0;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= *(_QWORD *)(a1 + 16))
  {
    v6 = sub_22E9D8E48((uint64_t *)a1, (uint64_t)&v7);
  }
  else
  {
    v3 = v7;
    v4 = v8;
    *(_DWORD *)(v2 + 32) = v9;
    *(_OWORD *)v2 = v3;
    *(_OWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 48) = 0;
    *(_QWORD *)(v2 + 56) = 0;
    *(_QWORD *)(v2 + 40) = 0;
    v5 = v12;
    *(_OWORD *)(v2 + 64) = v11;
    *(_OWORD *)(v2 + 80) = v5;
    v6 = v2 + 96;
  }
  *(_QWORD *)(a1 + 8) = v6;
  v13 = (void **)v10;
  sub_22E6C60B8(&v13);
  if (v18 != v20)
    free(v18);
  if (v15 != v17)
    free(v15);
}

void sub_22E9D9494(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  int v11;
  _QWORD v12[3];
  __int128 v13;
  __int128 v14;
  void **v15;

  sub_22E8A9AD8(a1, (uint64_t)"using");
  sub_22E8A9D90(a1, 19, "");
  sub_22E8A9C00(a1, (uint64_t)"name");
  sub_22E8A9D90(a1, 18, "");
  sub_22E8A9C00(a1, (uint64_t)"type");
  sub_22E8A9D90(a1, 17, "");
  *(_QWORD *)&v9 = 0;
  *((_QWORD *)&v9 + 1) = sub_22F2F28A4(a1);
  v10 = xmmword_22F469F30;
  v11 = 0;
  memset(v12, 0, sizeof(v12));
  LOBYTE(v13) = 0;
  v14 = 0uLL;
  *((_QWORD *)&v13 + 1) = 0;
  v4 = a2[1];
  if (v4 >= a2[2])
  {
    v8 = sub_22E9D8E48(a2, (uint64_t)&v9);
  }
  else
  {
    v5 = v9;
    v6 = v10;
    *(_DWORD *)(v4 + 32) = v11;
    *(_OWORD *)v4 = v5;
    *(_OWORD *)(v4 + 16) = v6;
    *(_QWORD *)(v4 + 48) = 0;
    *(_QWORD *)(v4 + 56) = 0;
    *(_QWORD *)(v4 + 40) = 0;
    v7 = v14;
    *(_OWORD *)(v4 + 64) = v13;
    *(_OWORD *)(v4 + 80) = v7;
    v8 = v4 + 96;
  }
  a2[1] = v8;
  v15 = (void **)v12;
  sub_22E6C60B8(&v15);
}

void sub_22E9D95B8(uint64_t a1, uint64_t *a2, __int16 a3)
{
  void **v3;
  void **v4;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  int v14;
  _QWORD v15[3];
  __int128 v16;
  __int128 v17;
  void **v18[7];

  if ((a3 & 0x200) != 0)
  {
    v18[5] = v3;
    v18[6] = v4;
    sub_22E8A9AD8(a1, (uint64_t)"static_assert");
    sub_22E8A9D90(a1, 7, "");
    sub_22E8A9C00(a1, (uint64_t)"expression");
    sub_22E8A9D90(a1, 15, "");
    sub_22E8A9C00(a1, (uint64_t)"message");
    sub_22E8A9D90(a1, 8, "");
    sub_22E8A9D90(a1, 17, "");
    *(_QWORD *)&v12 = 0;
    *((_QWORD *)&v12 + 1) = sub_22F2F28A4(a1);
    v13 = xmmword_22F469F30;
    v14 = 0;
    memset(v15, 0, sizeof(v15));
    LOBYTE(v16) = 0;
    v17 = 0uLL;
    *((_QWORD *)&v16 + 1) = 0;
    v7 = a2[1];
    if (v7 >= a2[2])
    {
      v11 = sub_22E9D8E48(a2, (uint64_t)&v12);
    }
    else
    {
      v8 = v12;
      v9 = v13;
      *(_DWORD *)(v7 + 32) = v14;
      *(_OWORD *)v7 = v8;
      *(_OWORD *)(v7 + 16) = v9;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      *(_QWORD *)(v7 + 40) = 0;
      v10 = v17;
      *(_OWORD *)(v7 + 64) = v16;
      *(_OWORD *)(v7 + 80) = v10;
      v11 = v7 + 96;
    }
    a2[1] = v11;
    v18[0] = (void **)v15;
    sub_22E6C60B8(v18);
  }
}

void sub_22E9D96F4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  int v31;
  _QWORD v32[3];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  _QWORD v38[3];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int v43;
  _QWORD v44[3];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  int v49;
  _QWORD v50[3];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  int v55;
  _QWORD v56[3];
  __int128 v57;
  __int128 v58;
  void **v59;
  _OWORD v60[3];
  _BYTE *v61;
  uint64_t v62;
  _BYTE v63[64];
  _QWORD *v64;
  uint64_t v65;
  _QWORD v66[4];

  v66[3] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v53 = 0;
  *((_QWORD *)&v53 + 1) = "extern";
  v54 = xmmword_22F469F50;
  v55 = 0;
  memset(v56, 0, sizeof(v56));
  LOBYTE(v57) = 0;
  v58 = 0uLL;
  *((_QWORD *)&v57 + 1) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= *(_QWORD *)(a2 + 16))
  {
    v8 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v53);
  }
  else
  {
    v5 = v53;
    v6 = v54;
    *(_DWORD *)(v4 + 32) = v55;
    *(_OWORD *)v4 = v5;
    *(_OWORD *)(v4 + 16) = v6;
    *(_QWORD *)(v4 + 48) = 0;
    *(_QWORD *)(v4 + 56) = 0;
    *(_QWORD *)(v4 + 40) = 0;
    v7 = v58;
    *(_OWORD *)(v4 + 64) = v57;
    *(_OWORD *)(v4 + 80) = v7;
    v8 = v4 + 96;
  }
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)&v60[0] = v56;
  sub_22E6C60B8((void ***)v60);
  *(_QWORD *)&v47 = 0;
  *((_QWORD *)&v47 + 1) = "static";
  v48 = xmmword_22F469F50;
  v49 = 0;
  memset(v50, 0, sizeof(v50));
  LOBYTE(v51) = 0;
  v52 = 0uLL;
  *((_QWORD *)&v51 + 1) = 0;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9 >= *(_QWORD *)(a2 + 16))
  {
    v13 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v47);
  }
  else
  {
    v10 = v47;
    v11 = v48;
    *(_DWORD *)(v9 + 32) = v49;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    *(_QWORD *)(v9 + 48) = 0;
    *(_QWORD *)(v9 + 56) = 0;
    *(_QWORD *)(v9 + 40) = 0;
    v12 = v52;
    *(_OWORD *)(v9 + 64) = v51;
    *(_OWORD *)(v9 + 80) = v12;
    v13 = v9 + 96;
  }
  *(_QWORD *)(a2 + 8) = v13;
  *(_QWORD *)&v60[0] = v50;
  sub_22E6C60B8((void ***)v60);
  if ((*(_BYTE *)(a1 + 1) & 2) != 0)
  {
    v60[0] = *(_OWORD *)(a2 + 192);
    memset(&v60[1], 0, 32);
    v61 = v63;
    v62 = 0x400000000;
    v64 = v66;
    v65 = 0x200000000;
    sub_22E8A9AD8((uint64_t)v60, (uint64_t)"alignas");
    sub_22E8A9D90((uint64_t)v60, 7, "");
    sub_22E8A9C00((uint64_t)v60, (uint64_t)"expression");
    sub_22E8A9D90((uint64_t)v60, 8, "");
    *(_QWORD *)&v41 = 0;
    *((_QWORD *)&v41 + 1) = sub_22F2F28A4((uint64_t)v60);
    v42 = xmmword_22F469F30;
    v43 = 0;
    memset(v44, 0, sizeof(v44));
    LOBYTE(v45) = 0;
    v46 = 0uLL;
    *((_QWORD *)&v45 + 1) = 0;
    v14 = *(_QWORD *)(a2 + 8);
    if (v14 >= *(_QWORD *)(a2 + 16))
    {
      v18 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v41);
    }
    else
    {
      v15 = v41;
      v16 = v42;
      *(_DWORD *)(v14 + 32) = v43;
      *(_OWORD *)v14 = v15;
      *(_OWORD *)(v14 + 16) = v16;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_QWORD *)(v14 + 40) = 0;
      v17 = v46;
      *(_OWORD *)(v14 + 64) = v45;
      *(_OWORD *)(v14 + 80) = v17;
      v18 = v14 + 96;
    }
    *(_QWORD *)(a2 + 8) = v18;
    v59 = (void **)v44;
    sub_22E6C60B8(&v59);
    *(_QWORD *)&v35 = 0;
    *((_QWORD *)&v35 + 1) = "constexpr";
    v36 = xmmword_22F469F50;
    v37 = 0;
    memset(v38, 0, sizeof(v38));
    LOBYTE(v39) = 0;
    v40 = 0uLL;
    *((_QWORD *)&v39 + 1) = 0;
    v19 = *(_QWORD *)(a2 + 8);
    if (v19 >= *(_QWORD *)(a2 + 16))
    {
      v23 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v35);
    }
    else
    {
      v20 = v35;
      v21 = v36;
      *(_DWORD *)(v19 + 32) = v37;
      *(_OWORD *)v19 = v20;
      *(_OWORD *)(v19 + 16) = v21;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_QWORD *)(v19 + 40) = 0;
      v22 = v40;
      *(_OWORD *)(v19 + 64) = v39;
      *(_OWORD *)(v19 + 80) = v22;
      v23 = v19 + 96;
    }
    *(_QWORD *)(a2 + 8) = v23;
    v59 = (void **)v38;
    sub_22E6C60B8(&v59);
    *(_QWORD *)&v29 = 0;
    *((_QWORD *)&v29 + 1) = "thread_local";
    v30 = xmmword_22F469F50;
    v31 = 0;
    memset(v32, 0, sizeof(v32));
    LOBYTE(v33) = 0;
    v34 = 0uLL;
    *((_QWORD *)&v33 + 1) = 0;
    v24 = *(_QWORD *)(a2 + 8);
    if (v24 >= *(_QWORD *)(a2 + 16))
    {
      v28 = sub_22E9D8E48((uint64_t *)a2, (uint64_t)&v29);
    }
    else
    {
      v25 = v29;
      v26 = v30;
      *(_DWORD *)(v24 + 32) = v31;
      *(_OWORD *)v24 = v25;
      *(_OWORD *)(v24 + 16) = v26;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_QWORD *)(v24 + 40) = 0;
      v27 = v34;
      *(_OWORD *)(v24 + 64) = v33;
      *(_OWORD *)(v24 + 80) = v27;
      v28 = v24 + 96;
    }
    *(_QWORD *)(a2 + 8) = v28;
    v59 = (void **)v32;
    sub_22E6C60B8(&v59);
    if (v64 != v66)
      free(v64);
    if (v61 != v63)
      free(v61);
  }
}

void sub_22E9D9B04(unsigned int a1, uint64_t a2, uint64_t *a3)
{
  void **v3;
  void **v4;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  int v34;
  _QWORD v35[3];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  _QWORD v41[3];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;
  _QWORD v47[3];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  int v52;
  _BYTE v53[24];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  int v58;
  _BYTE v59[24];
  __int128 v60;
  __int128 v61;
  void **v62[7];

  if (a1 <= 6)
  {
    v62[5] = v3;
    v62[6] = v4;
    if (((1 << a1) & 0x2D) == 0)
    {
      if (((1 << a1) & 0x42) == 0)
        return;
      if ((*(_BYTE *)(a2 + 1) & 1) != 0)
      {
        *(_QWORD *)&v56 = 0;
        *((_QWORD *)&v56 + 1) = "explicit";
        v57 = xmmword_22F469F50;
        v58 = 0;
        memset(v59, 0, sizeof(v59));
        LOBYTE(v60) = 0;
        v61 = 0uLL;
        *((_QWORD *)&v60 + 1) = 0;
        v12 = a3[1];
        if (v12 >= a3[2])
        {
          v16 = sub_22E9D8E48(a3, (uint64_t)&v56);
        }
        else
        {
          v13 = v56;
          v14 = v57;
          *(_DWORD *)(v12 + 32) = v58;
          *(_OWORD *)v12 = v13;
          *(_OWORD *)(v12 + 16) = v14;
          *(_QWORD *)(v12 + 48) = 0;
          *(_QWORD *)(v12 + 56) = 0;
          *(_QWORD *)(v12 + 40) = 0;
          v15 = v61;
          *(_OWORD *)(v12 + 64) = v60;
          *(_OWORD *)(v12 + 80) = v15;
          v16 = v12 + 96;
        }
        a3[1] = v16;
        v62[0] = (void **)v59;
        sub_22E6C60B8(v62);
        *(_QWORD *)&v50 = 0;
        *((_QWORD *)&v50 + 1) = "friend";
        v51 = xmmword_22F469F50;
        v52 = 0;
        memset(v53, 0, sizeof(v53));
        LOBYTE(v54) = 0;
        v55 = 0uLL;
        *((_QWORD *)&v54 + 1) = 0;
        v17 = a3[1];
        if (v17 >= a3[2])
        {
          v21 = sub_22E9D8E48(a3, (uint64_t)&v50);
        }
        else
        {
          v18 = v50;
          v19 = v51;
          *(_DWORD *)(v17 + 32) = v52;
          *(_OWORD *)v17 = v18;
          *(_OWORD *)(v17 + 16) = v19;
          *(_QWORD *)(v17 + 48) = 0;
          *(_QWORD *)(v17 + 56) = 0;
          *(_QWORD *)(v17 + 40) = 0;
          v20 = v55;
          *(_OWORD *)(v17 + 64) = v54;
          *(_OWORD *)(v17 + 80) = v20;
          v21 = v17 + 96;
        }
        a3[1] = v21;
        v62[0] = (void **)v53;
        sub_22E6C60B8(v62);
        *(_QWORD *)&v44 = 0;
        *((_QWORD *)&v44 + 1) = "mutable";
        v45 = xmmword_22F469F50;
        v46 = 0;
        memset(v47, 0, sizeof(v47));
        LOBYTE(v48) = 0;
        v49 = 0uLL;
        *((_QWORD *)&v48 + 1) = 0;
        v22 = a3[1];
        if (v22 >= a3[2])
        {
          v26 = sub_22E9D8E48(a3, (uint64_t)&v44);
        }
        else
        {
          v23 = v44;
          v24 = v45;
          *(_DWORD *)(v22 + 32) = v46;
          *(_OWORD *)v22 = v23;
          *(_OWORD *)(v22 + 16) = v24;
          *(_QWORD *)(v22 + 48) = 0;
          *(_QWORD *)(v22 + 56) = 0;
          *(_QWORD *)(v22 + 40) = 0;
          v25 = v49;
          *(_OWORD *)(v22 + 64) = v48;
          *(_OWORD *)(v22 + 80) = v25;
          v26 = v22 + 96;
        }
        a3[1] = v26;
        v62[0] = (void **)v47;
        sub_22E6C60B8(v62);
        *(_QWORD *)&v38 = 0;
        *((_QWORD *)&v38 + 1) = "virtual";
        v39 = xmmword_22F469F50;
        v40 = 0;
        memset(v41, 0, sizeof(v41));
        LOBYTE(v42) = 0;
        v43 = 0uLL;
        *((_QWORD *)&v42 + 1) = 0;
        v27 = a3[1];
        if (v27 >= a3[2])
        {
          v31 = sub_22E9D8E48(a3, (uint64_t)&v38);
        }
        else
        {
          v28 = v38;
          v29 = v39;
          *(_DWORD *)(v27 + 32) = v40;
          *(_OWORD *)v27 = v28;
          *(_OWORD *)(v27 + 16) = v29;
          *(_QWORD *)(v27 + 48) = 0;
          *(_QWORD *)(v27 + 56) = 0;
          *(_QWORD *)(v27 + 40) = 0;
          v30 = v43;
          *(_OWORD *)(v27 + 64) = v42;
          *(_OWORD *)(v27 + 80) = v30;
          v31 = v27 + 96;
        }
        a3[1] = v31;
        v62[0] = (void **)v41;
        sub_22E6C60B8(v62);
      }
    }
    if ((*(_WORD *)a2 & 0x101) != 0)
    {
      *(_QWORD *)&v32 = 0;
      *((_QWORD *)&v32 + 1) = "inline";
      v33 = xmmword_22F469F50;
      v34 = 0;
      memset(v35, 0, sizeof(v35));
      LOBYTE(v36) = 0;
      v37 = 0uLL;
      *((_QWORD *)&v36 + 1) = 0;
      v7 = a3[1];
      if (v7 >= a3[2])
      {
        v11 = sub_22E9D8E48(a3, (uint64_t)&v32);
      }
      else
      {
        v8 = v32;
        v9 = v33;
        *(_DWORD *)(v7 + 32) = v34;
        *(_OWORD *)v7 = v8;
        *(_OWORD *)(v7 + 16) = v9;
        *(_QWORD *)(v7 + 48) = 0;
        *(_QWORD *)(v7 + 56) = 0;
        *(_QWORD *)(v7 + 40) = 0;
        v10 = v37;
        *(_OWORD *)(v7 + 64) = v36;
        *(_OWORD *)(v7 + 80) = v10;
        v11 = v7 + 96;
      }
      a3[1] = v11;
      v62[0] = (void **)v35;
      sub_22E6C60B8(v62);
    }
  }
}

const char *sub_22E9D9E44(unsigned __int16 *a1, uint64_t a2)
{
  int v2;
  const char *v3;

  if (a2 == 3)
  {
    v2 = *a1 ^ 0x6E67 | *((unsigned __int8 *)a1 + 2) ^ 0x75;
    v3 = "__gnu__";
  }
  else
  {
    if (a2 != 5)
      return 0;
    v2 = *(_DWORD *)a1 ^ 0x6E616C63 | *((unsigned __int8 *)a1 + 4) ^ 0x67;
    v3 = "_Clang";
  }
  if (v2)
    return 0;
  else
    return v3;
}

void sub_22E9D9EB8(uint64_t **a1, void *__src, size_t __n, void *a4, size_t a5, int a6)
{
  uint64_t v10;
  void **v11;
  uint64_t v14;
  _BYTE *v15;
  size_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  int v35;
  _QWORD v36[3];
  __int128 v37;
  __int128 v38;
  void **v39[4];
  __int16 v40;
  void *v41;
  __int128 v42;
  _BYTE v43[32];
  _OWORD v44[3];
  void *v45;
  uint64_t v46;
  _BYTE v47[64];
  void *v48;
  uint64_t v49;
  _QWORD v50[4];

  v50[3] = *MEMORY[0x24BDAC8D0];
  v44[0] = *((_OWORD *)*a1 + 12);
  memset(&v44[1], 0, 32);
  v45 = v47;
  v46 = 0x400000000;
  v48 = v50;
  v49 = 0x200000000;
  v41 = v43;
  v42 = xmmword_22F44E330;
  if (__n)
  {
    if (__n >= 0x21)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v15 = v41;
      v14 = v42;
    }
    else
    {
      v14 = 0;
      v15 = v43;
    }
    memcpy(&v15[v14], __src, __n);
    v16 = v42 + __n;
    *(_QWORD *)&v42 = v16;
    if (*((_QWORD *)&v42 + 1) < v16 + 2)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v16 = v42;
    }
    *(_WORD *)((char *)v41 + v16) = 14906;
    v10 = v42 + 2;
    *(_QWORD *)&v42 = v42 + 2;
    if (!a6)
    {
LABEL_3:
      if (*((_QWORD *)&v42 + 1) < v10 + a5)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v10 = v42;
        if (!a5)
          goto LABEL_6;
      }
      else if (!a5)
      {
LABEL_6:
        v11 = (void **)(v10 + a5);
        goto LABEL_20;
      }
      memcpy((char *)v41 + v10, a4, a5);
      v10 = v42;
      goto LABEL_6;
    }
  }
  else
  {
    v10 = 0;
    if (!a6)
      goto LABEL_3;
  }
  if (*((_QWORD *)&v42 + 1) < (unint64_t)(v10 + 2))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v10 = v42;
  }
  *(_WORD *)((char *)v41 + v10) = 24415;
  v17 = v42 + 2;
  *(_QWORD *)&v42 = v17;
  if (*((_QWORD *)&v42 + 1) < v17 + a5)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v17 = v42;
    if (!a5)
      goto LABEL_17;
    goto LABEL_16;
  }
  if (a5)
  {
LABEL_16:
    memcpy((char *)v41 + v17, a4, a5);
    v17 = v42;
  }
LABEL_17:
  v18 = v17 + a5;
  *(_QWORD *)&v42 = v18;
  if (*((_QWORD *)&v42 + 1) < v18 + 2)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v18 = v42;
  }
  *(_WORD *)((char *)v41 + v18) = 24415;
  v11 = (void **)(v42 + 2);
LABEL_20:
  *(_QWORD *)&v42 = v11;
  v19 = (*a1)[24];
  v40 = 261;
  v39[0] = (void **)v41;
  v39[1] = v11;
  v20 = sub_22F2F27DC(v19, (const char **)v39);
  sub_22E8A9AD8((uint64_t)v44, (uint64_t)v20);
  if (a1[1][5])
  {
    sub_22E8A9D90((uint64_t)v44, 7, "(");
    v21 = a1[1];
    v22 = v21[5];
    if (v22)
    {
      v23 = (uint64_t *)v21[4];
      v24 = 8 * v22;
      v25 = 1;
      do
      {
        v26 = *v23;
        if ((v25 & 1) == 0)
          sub_22E8A9D90((uint64_t)v44, 15, ", ");
        sub_22E8A9C00((uint64_t)v44, v26);
        v25 = 0;
        ++v23;
        v24 -= 8;
      }
      while (v24);
    }
    sub_22E8A9D90((uint64_t)v44, 8, ")");
  }
  v27 = *a1;
  *(_QWORD *)&v33 = 0;
  *((_QWORD *)&v33 + 1) = sub_22F2F28A4((uint64_t)v44);
  v34 = xmmword_22F469F30;
  v35 = 0;
  memset(v36, 0, sizeof(v36));
  LOBYTE(v37) = 0;
  v38 = 0uLL;
  *((_QWORD *)&v37 + 1) = 0;
  v28 = v27[1];
  if (v28 >= v27[2])
  {
    v32 = sub_22E9D8E48(v27, (uint64_t)&v33);
  }
  else
  {
    v29 = v33;
    v30 = v34;
    *(_DWORD *)(v28 + 32) = v35;
    *(_OWORD *)v28 = v29;
    *(_OWORD *)(v28 + 16) = v30;
    *(_QWORD *)(v28 + 48) = 0;
    *(_QWORD *)(v28 + 56) = 0;
    *(_QWORD *)(v28 + 40) = 0;
    v31 = v38;
    *(_OWORD *)(v28 + 64) = v37;
    *(_OWORD *)(v28 + 80) = v31;
    v32 = v28 + 96;
  }
  v27[1] = v32;
  v39[0] = (void **)v36;
  sub_22E6C60B8(v39);
  if (v41 != v43)
    free(v41);
  if (v48 != v50)
    free(v48);
  if (v45 != v47)
    free(v45);
}

BOOL sub_22E9DA2B4(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 28) & 0x7Fu) - 48 < 0x1B;
}

BOOL sub_22E9DA2CC(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 28) & 0x7F) == 51;
}

uint64_t sub_22E9DA2E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 56;
      *(_QWORD *)(a1 + 16) = v2 - 56;
      if (*(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_22E9DA340(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  char v7;
  unsigned int v8;
  uint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int i;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  unint64_t v47;
  _DWORD *v48;
  unsigned int v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v60;
  uint64_t *v61;
  _OWORD v62[2];
  int v63;
  _QWORD v64[3];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  char v76;
  void *__p[2];
  char v78;
  _OWORD v79[2];
  int v80;
  _QWORD v81[3];
  __int128 v82;
  __int128 v83;
  _BYTE v84[32];
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  _OWORD v91[2];
  int v92;
  _QWORD v93[3];
  __int128 v94;
  __int128 v95;
  _QWORD v96[3];
  unint64_t v97[2];
  unint64_t v98;
  uint64_t v99;
  _OWORD v100[2];
  int v101;
  _QWORD v102[3];
  __int128 v103;
  __int128 v104;
  _QWORD v105[3];
  void **v106;
  _OWORD v107[2];
  __int128 v108;
  void *v109;
  uint64_t v110;
  _BYTE v111[64];
  void *v112;
  uint64_t v113;
  _BYTE v114[16];
  __int128 v115;
  __int128 v116;
  __int128 v117;
  void *v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  void *v122;
  uint64_t v123;
  _QWORD v124[4];

  v124[2] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a2 + 40);
  if ((v5 & 7) != 0)
    v6 = 0;
  else
    v6 = (const void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  sub_22E3BA850(v4, v6);
  if (!v7)
    return;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) != 10
    || !**(_BYTE **)(a1 + 8))
  {
    *(_QWORD *)&v115 = a2;
    *(_QWORD *)&v116 = sub_22E9C5678(a2);
    DWORD2(v116) = 0;
    LODWORD(v117) = 0;
    v119 = 0;
    *((_QWORD *)&v117 + 1) = 0;
    v118 = 0;
    memset(v105, 0, sizeof(v105));
    LOBYTE(v120) = 0;
    *((_QWORD *)&v120 + 1) = 0;
    v121 = 0uLL;
    sub_22E8AB5B4((uint64_t)&v115, 1);
    *(_QWORD *)&v107[0] = v105;
    sub_22E6C60B8((void ***)v107);
    if (!**(_BYTE **)(a1 + 24))
    {
      LODWORD(v116) = v116 + 2;
      LOBYTE(v120) = v120 | 2;
    }
    v9 = *(uint64_t **)(a1 + 16);
    v100[0] = v115;
    v100[1] = v116;
    v101 = v117;
    v10 = v102;
    memset(v102, 0, sizeof(v102));
    sub_22E6C6020(v102, *((uint64_t *)&v117 + 1), (uint64_t)v118, 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v118 - *((_QWORD *)&v117 + 1)) >> 3));
    v103 = v120;
    v104 = v121;
    v11 = **(_QWORD **)(a1 + 32);
    v12 = v100;
    goto LABEL_14;
  }
  v99 = 0;
  v98 = 0;
  v97[1] = 0;
  v97[0] = 0;
  sub_22E9D8678(*(unint64_t **)(a2 + 64), &v98, v97, 0);
  if (!v98)
  {
    v8 = sub_22E9C5678(a2);
    *(_QWORD *)&v115 = a2;
    *(_QWORD *)&v116 = v8;
    DWORD2(v116) = 0;
    LODWORD(v117) = 0;
    v119 = 0;
    *((_QWORD *)&v117 + 1) = 0;
    v118 = 0;
    memset(v96, 0, sizeof(v96));
    LOBYTE(v120) = 0;
    *((_QWORD *)&v120 + 1) = 0;
    v121 = 0uLL;
    sub_22E8AB5B4((uint64_t)&v115, 1);
    *(_QWORD *)&v107[0] = v96;
    sub_22E6C60B8((void ***)v107);
    if (!**(_BYTE **)(a1 + 24))
    {
      LODWORD(v116) = v116 + 2;
      LOBYTE(v120) = v120 | 2;
    }
    v9 = *(uint64_t **)(a1 + 16);
    v91[0] = v115;
    v91[1] = v116;
    v92 = v117;
    v10 = v93;
    memset(v93, 0, sizeof(v93));
    sub_22E6C6020(v93, *((uint64_t *)&v117 + 1), (uint64_t)v118, 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v118 - *((_QWORD *)&v117 + 1)) >> 3));
    v94 = v120;
    v95 = v121;
    v11 = **(_QWORD **)(a1 + 32);
    v12 = v91;
LABEL_14:
    sub_22E9CF888(v9, (uint64_t)v12, v11);
    *(_QWORD *)&v107[0] = v10;
    sub_22E6C60B8((void ***)v107);
    *(_QWORD *)&v107[0] = (char *)&v117 + 8;
    sub_22E6C60B8((void ***)v107);
    return;
  }
  v13 = *(_QWORD *)(a1 + 16);
  v115 = *(_OWORD *)(v13 + 192);
  v116 = 0u;
  v117 = 0u;
  v118 = &v120;
  v119 = 0x400000000;
  v122 = v124;
  v123 = 0x200000000;
  v14 = *(_QWORD *)(v13 + 184);
  v15 = *(_QWORD *)(v14 + 88);
  __p[0] = (void *)(((*(_QWORD *)(*(_QWORD *)(v15 + 2000) + 100) >> 12) & 0x2000000 | sub_22E8FCD8C(v15, *(_QWORD *)(v14 + 80)) & 0xFFFFDFFFFDF9CFFFLL) ^ 0x200002043000);
  __p[1] = v16;
  v17 = *(_QWORD *)(v98 + 24);
  sub_22E47EE80(&v98);
  v18 = sub_22E9D1DF8(v17, (uint64_t)__p, v115);
  sub_22E8A9CC8((uint64_t)&v115, (uint64_t)v18);
  sub_22E9B5A60((uint64_t *)__p, a2, (uint64_t *)&v115);
  sub_22E8A9D90((uint64_t)&v115, 7, "");
  v19 = v97[0];
  if (v97[0] && (*(_BYTE *)(v97[0] + 23) & 8) != 0)
  {
    sub_22E8A9C00((uint64_t)&v115, (uint64_t)"...");
  }
  else if (*(_BYTE *)(v98 + 16) != 25)
  {
    v20 = (unsigned __int16)(*(_QWORD *)(v98 + 16) >> 38);
    if ((unsigned __int16)(*(_QWORD *)(v98 + 16) >> 38))
    {
      v21 = 0;
      v22 = 8 * v20;
      v23 = 8 * (v20 - 1);
      do
      {
        if (v21)
          sub_22E8A9D90((uint64_t)&v115, 15, "");
        v24 = *(_QWORD *)(v99 + v21 + 16);
        LOBYTE(v67) = 0;
        LOBYTE(v68) = 0;
        sub_22E9B67C4((uint64_t)v84, (uint64_t)__p, v24, 0, 0, (uint64_t)&v67);
        if (v19 && v23 == v21 && (*(_BYTE *)(v19 + 23) & 8) != 0)
          std::string::append((std::string *)v84, ", ...");
        LOWORD(v108) = 260;
        *(_QWORD *)&v107[0] = v84;
        v25 = sub_22F2F27DC(v115, (const char **)v107);
        sub_22E8A9C00((uint64_t)&v115, (uint64_t)v25);
        if ((v84[23] & 0x80000000) != 0)
          operator delete(*(void **)v84);
        v21 += 8;
      }
      while (v22 != v21);
    }
  }
  sub_22E8A9D90((uint64_t)&v115, 8, "");
  v26 = sub_22F2F28A4((uint64_t)&v115);
  v27 = sub_22E9C5678(a2);
  *(_QWORD *)v84 = a2;
  *(_QWORD *)&v84[8] = v26;
  *(_DWORD *)&v84[16] = v27;
  *(_QWORD *)&v84[20] = 0x300000000;
  v85 = 0;
  v87 = 0;
  v88 = 0;
  v86 = 0;
  LOBYTE(v89) = 0;
  v90 = 0uLL;
  *((_QWORD *)&v89 + 1) = 0;
  sub_22E8AB5B4((uint64_t)v84, 1);
  if (!**(_BYTE **)(a1 + 24))
  {
    *(_DWORD *)&v84[16] += 2;
    LOBYTE(v89) = v89 | 2;
  }
  v28 = *(uint64_t **)(a1 + 16);
  v79[0] = *(_OWORD *)v84;
  v79[1] = *(_OWORD *)&v84[16];
  v80 = v85;
  memset(v81, 0, sizeof(v81));
  sub_22E6C6020(v81, v86, v87, 0x6DB6DB6DB6DB6DB7 * ((v87 - v86) >> 3));
  v82 = v89;
  v83 = v90;
  sub_22E9CF888(v28, (uint64_t)v79, **(_QWORD **)(a1 + 32));
  *(_QWORD *)&v107[0] = v81;
  sub_22E6C60B8((void ***)v107);
  if ((*(_BYTE *)(a2 + 72) & 1) == 0)
  {
    v29 = *(_QWORD *)(a1 + 16);
    v30 = *(_OWORD *)(v29 + 192);
    v107[1] = 0u;
    v108 = 0u;
    v107[0] = v30;
    v109 = v111;
    v110 = 0x400000000;
    v112 = v114;
    v113 = 0x200000000;
    v31 = **(_QWORD **)(a1 + 40);
    if (!v31 || (*(_DWORD *)(v31 + 28) & 0x7F) != 0x53)
    {
      v32 = *(_QWORD *)(v31 + 16);
      v33 = v32 & 0xFFFFFFFFFFFFFFF8;
      if ((v32 & 4) != 0)
        v33 = *(_QWORD *)v33;
      for (i = *(_WORD *)(v33 + 8) & 0x7F; i != 83; i = *(_WORD *)(v33 + 8) & 0x7F)
      {
        v35 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v35 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_54;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_53;
          if (i == 16)
            goto LABEL_47;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_60;
          if (i == 24)
          {
LABEL_47:
            v35 = -48;
          }
          else
          {
LABEL_53:
            if (i != 70)
            {
LABEL_54:
              v36 = i - 52;
              if ((i - 33) >= 5)
                v37 = -48;
              else
                v37 = -64;
              if (v36 >= 6)
                v35 = v37;
              else
                v35 = -72;
              goto LABEL_60;
            }
            v35 = -64;
          }
        }
LABEL_60:
        v38 = *(_QWORD *)(v33 + v35 + 16);
        v33 = v38 & 0xFFFFFFFFFFFFFFF8;
        if ((v38 & 4) != 0)
          v33 = *(_QWORD *)v33;
      }
      v31 = v33 - 40;
    }
    v39 = *(_QWORD *)(v31 + 88);
    v40 = *(_QWORD *)(v29 + 184);
    v41 = *(_QWORD *)(v40 + 88);
    *(_QWORD *)&v67 = ((*(_QWORD *)(*(_QWORD *)(v41 + 2000) + 100) >> 12) & 0x2000000 | sub_22E8FCD8C(v41, *(_QWORD *)(v40 + 80)) & 0xFFFFDFFFFDF9CFFFLL) ^ 0x200002043000;
    *((_QWORD *)&v67 + 1) = v42;
    sub_22E9B56BC(v39, (uint64_t)&v67, a2, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16), (uint64_t *)v107);
    v43 = 0;
    v44 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 192);
    v45 = *(_QWORD *)(a2 + 40);
    v46 = "";
    if ((v45 & 7) == 0)
    {
      v47 = v45 & 0xFFFFFFFFFFFFFFF8;
      if (v47)
      {
        v48 = *(_DWORD **)(v47 + 16);
        v49 = *v48;
        v46 = (const char *)(v48 + 4);
        v43 = v49;
      }
    }
    LOWORD(v69) = 261;
    *(_QWORD *)&v67 = v46;
    *((_QWORD *)&v67 + 1) = v43;
    v50 = sub_22F2F27DC(v44, (const char **)&v67);
    sub_22E8A9AD8((uint64_t)v107, (uint64_t)v50);
    sub_22E8A9D90((uint64_t)v107, 18, "");
    v51 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 184);
    v52 = *(_QWORD *)(v51 + 88);
    *(_QWORD *)&v67 = ((*(_QWORD *)(*(_QWORD *)(v52 + 2000) + 100) >> 12) & 0x2000000 | sub_22E8FCD8C(v52, *(_QWORD *)(v51 + 80)) & 0xFFFFDFFFFDF9CFFFLL) ^ 0x200002043000;
    *((_QWORD *)&v67 + 1) = v53;
    LOBYTE(v75) = 0;
    v76 = 0;
    sub_22E9D88EC((uint64_t)__p, (uint64_t)&v67, a2, &v98, (uint64_t)v97, 1, 0, &v75);
    LOWORD(v69) = 260;
    *(_QWORD *)&v67 = __p;
    v54 = sub_22F2F27DC(*(uint64_t *)&v107[0], (const char **)&v67);
    sub_22E8A9C00((uint64_t)v107, (uint64_t)v54);
    v55 = sub_22F2F28A4((uint64_t)v107);
    v56 = sub_22E9C5678(a2);
    v57 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v98 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_DWORD *)(v57 + 16) & 0xFF80000) != 0x5280000 || *(_DWORD *)(v57 + 16) != 11 || v57 == 0)
      v60 = -3;
    else
      v60 = 3;
    *(_QWORD *)&v67 = a2;
    *((_QWORD *)&v67 + 1) = v55;
    LODWORD(v68) = v60 + v56;
    *(_QWORD *)((char *)&v68 + 4) = 0x300000000;
    v69 = 0;
    LOBYTE(v73) = 0;
    v71 = 0;
    v72 = 0;
    v70 = 0;
    v74 = 0uLL;
    *((_QWORD *)&v73 + 1) = 0;
    sub_22E8AB5B4((uint64_t)&v67, 1);
    if (!**(_BYTE **)(a1 + 24))
    {
      LODWORD(v68) = v68 + 2;
      LOBYTE(v73) = v73 | 2;
    }
    v61 = *(uint64_t **)(a1 + 16);
    v62[0] = v67;
    v62[1] = v68;
    v63 = v69;
    memset(v64, 0, sizeof(v64));
    sub_22E6C6020(v64, v70, v71, 0x6DB6DB6DB6DB6DB7 * ((v71 - v70) >> 3));
    v65 = v73;
    v66 = v74;
    sub_22E9CF888(v61, (uint64_t)v62, **(_QWORD **)(a1 + 32));
    v106 = (void **)v64;
    sub_22E6C60B8(&v106);
    v106 = (void **)&v70;
    sub_22E6C60B8(&v106);
    if (v78 < 0)
      operator delete(__p[0]);
    if (v112 != v114)
      free(v112);
    if (v109 != v111)
      free(v109);
  }
  *(_QWORD *)&v107[0] = &v86;
  sub_22E6C60B8((void ***)v107);
  if (v122 != v124)
    free(v122);
  if (v118 != &v120)
    free(v118);
}

void sub_22E9DAD84(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t *v12;
  _OWORD v13[2];
  int v14;
  _QWORD v15[3];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  void **v26;
  _OWORD v27[3];
  void *v28;
  uint64_t v29;
  _BYTE v30[64];
  void *v31;
  uint64_t v32;
  _QWORD v33[4];

  v33[3] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8);
  if ((~*(_DWORD *)(a2 + 40) & 7) == 0)
    v4 = (_QWORD *)v4[2];
  if (v4)
  {
    sub_22E3BA850(*(_QWORD *)a1, v4);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 16);
      v27[0] = *(_OWORD *)(*(_QWORD *)(a1 + 8) + 192);
      memset(&v27[1], 0, 32);
      v28 = v30;
      v29 = 0x400000000;
      v31 = v33;
      v32 = 0x200000000;
      sub_22E9B56BC(v6, *(_QWORD *)(a1 + 24), a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), (uint64_t *)v27);
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 192);
      v8 = (unsigned int *)v4[2];
      v9 = *v8;
      LOWORD(v20) = 261;
      *(_QWORD *)&v18 = v8 + 4;
      *((_QWORD *)&v18 + 1) = v9;
      v10 = sub_22F2F27DC(v7, (const char **)&v18);
      sub_22E8A9AD8((uint64_t)v27, (uint64_t)v10);
      v11 = sub_22F2F28A4((uint64_t)v27);
      *(_QWORD *)&v18 = a2;
      *((_QWORD *)&v18 + 1) = v11;
      *(_QWORD *)&v19 = 37;
      DWORD2(v19) = 3;
      v20 = 0;
      v22 = 0;
      v23 = 0;
      v21 = 0;
      LOBYTE(v24) = 0;
      v25 = 0uLL;
      *((_QWORD *)&v24 + 1) = 0;
      sub_22E8AB5B4((uint64_t)&v18, 1);
      if (!**(_BYTE **)(a1 + 40))
      {
        LODWORD(v19) = v19 + 2;
        LOBYTE(v24) = v24 | 2;
      }
      v12 = *(uint64_t **)(a1 + 8);
      v13[0] = v18;
      v13[1] = v19;
      v14 = v20;
      memset(v15, 0, sizeof(v15));
      sub_22E6C6020(v15, v21, v22, 0x6DB6DB6DB6DB6DB7 * ((v22 - v21) >> 3));
      v16 = v24;
      v17 = v25;
      sub_22E9CF888(v12, (uint64_t)v13, **(_QWORD **)(a1 + 48));
      v26 = (void **)v15;
      sub_22E6C60B8(&v26);
      v26 = (void **)&v21;
      sub_22E6C60B8(&v26);
      if (v31 != v33)
        free(v31);
      if (v28 != v30)
        free(v28);
    }
  }
}

void sub_22E9DAFC0(uint64_t a1, __int128 *a2, uint64_t a3, unint64_t a4, _QWORD *a5, uint64_t a6, __n128 a7)
{
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unint64_t v30;
  __int128 *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _OWORD *v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __n128 v53;
  uint64_t v54;
  _QWORD *v55;
  _OWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  _OWORD *v59;
  _BOOL4 v60;
  void **v61;
  _OWORD *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  _QWORD *v76;
  _OWORD *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  _OWORD *v85;
  _QWORD *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  unint64_t v93;
  _QWORD *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  void **v107[3];

  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      v10 = (__int128 *)((char *)a2 - 168);
      if (sub_22ED0DB6C(*(_QWORD *)a3, (_QWORD *)a2 - 21, (_QWORD *)a1, **(_DWORD **)(a3 + 8), *(_DWORD *)(*(_QWORD *)(a3 + 16) + 2964)))
      {
        v11 = *(_OWORD *)(a1 + 16);
        v96 = *(_OWORD *)a1;
        v97 = v11;
        v12 = *(_OWORD *)(a1 + 48);
        v98 = *(_OWORD *)(a1 + 32);
        v99 = v12;
        v13 = *(_QWORD *)(a1 + 80);
        v95 = *(_OWORD *)(a1 + 64);
        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 80) = 0;
        *(_QWORD *)(a1 + 64) = 0;
        v102 = *(_OWORD *)(a1 + 88);
        v14 = *(_OWORD *)(a1 + 104);
        v15 = *(_OWORD *)(a1 + 120);
        v16 = *(_OWORD *)(a1 + 136);
        v106 = *(_OWORD *)(a1 + 152);
        v105 = v16;
        v104 = v15;
        v103 = v14;
        v17 = *v10;
        v18 = *(__int128 *)((char *)a2 - 152);
        v19 = *(__int128 *)((char *)a2 - 120);
        *(_OWORD *)(a1 + 32) = *(__int128 *)((char *)a2 - 136);
        *(_OWORD *)(a1 + 48) = v19;
        *(_OWORD *)a1 = v17;
        *(_OWORD *)(a1 + 16) = v18;
        sub_22E6C58D4((void **)(a1 + 64));
        v21 = *(__int128 *)((char *)a2 - 104);
        v20 = (char *)a2 - 104;
        *(_OWORD *)(a1 + 64) = v21;
        *(_QWORD *)(a1 + 80) = *((_QWORD *)v20 + 2);
        *(_QWORD *)v20 = 0;
        *((_QWORD *)v20 + 1) = 0;
        *((_QWORD *)v20 + 2) = 0;
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(v20 + 24);
        v22 = *(_OWORD *)(v20 + 40);
        v23 = *(_OWORD *)(v20 + 56);
        v24 = *(_OWORD *)(v20 + 72);
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(v20 + 88);
        *(_OWORD *)(a1 + 136) = v24;
        *(_OWORD *)(a1 + 120) = v23;
        *(_OWORD *)(a1 + 104) = v22;
        v25 = v97;
        *v10 = v96;
        v10[1] = v25;
        v26 = v99;
        v10[2] = v98;
        v10[3] = v26;
        sub_22E6C58D4((void **)v20);
        *(_OWORD *)v20 = v95;
        *((_QWORD *)v20 + 2) = v13;
        v101 = 0;
        v100 = 0uLL;
        *(_OWORD *)(v20 + 24) = v102;
        *(_OWORD *)(v20 + 40) = v103;
        *(_OWORD *)(v20 + 56) = v104;
        *(_OWORD *)(v20 + 72) = v105;
        *(_OWORD *)(v20 + 88) = v106;
        v107[0] = (void **)&v100;
        sub_22E6C60B8(v107);
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      if ((__int128 *)a1 != a2)
      {
        v33 = (_QWORD *)(a1 + 168);
        if ((__int128 *)(a1 + 168) != a2)
        {
          v34 = 0;
          v35 = (_OWORD *)a1;
          do
          {
            v36 = v33;
            if (sub_22ED0DB6C(*(_QWORD *)a3, v33, v35, **(_DWORD **)(a3 + 8), *(_DWORD *)(*(_QWORD *)(a3 + 16) + 2964)))
            {
              v37 = v36[1];
              v96 = *v36;
              v97 = v37;
              v38 = v36[3];
              v98 = v36[2];
              v99 = v38;
              v100 = *(_OWORD *)((char *)v35 + 232);
              v101 = *((_QWORD *)v35 + 31);
              *((_QWORD *)v35 + 29) = 0;
              *((_QWORD *)v35 + 30) = 0;
              *((_QWORD *)v35 + 31) = 0;
              v39 = v35[17];
              v102 = v35[16];
              v40 = v35[18];
              v41 = v35[20];
              v105 = v35[19];
              v106 = v41;
              v42 = v34;
              v103 = v39;
              v104 = v40;
              while (1)
              {
                v43 = a1 + v42;
                v44 = *(_OWORD *)(a1 + v42 + 16);
                *(_OWORD *)(v43 + 168) = *(_OWORD *)(a1 + v42);
                *(_OWORD *)(v43 + 184) = v44;
                v45 = *(_OWORD *)(a1 + v42 + 48);
                *(_OWORD *)(v43 + 200) = *(_OWORD *)(a1 + v42 + 32);
                *(_OWORD *)(v43 + 216) = v45;
                sub_22E6C58D4((void **)(a1 + v42 + 232));
                *(_OWORD *)(v43 + 232) = *(_OWORD *)(v43 + 64);
                *(_QWORD *)(v43 + 248) = *(_QWORD *)(v43 + 80);
                *(_QWORD *)(v43 + 72) = 0;
                *(_QWORD *)(v43 + 80) = 0;
                *(_QWORD *)(v43 + 64) = 0;
                v46 = *(_OWORD *)(a1 + v42 + 104);
                *(_OWORD *)(v43 + 256) = *(_OWORD *)(v43 + 88);
                *(_OWORD *)(v43 + 272) = v46;
                v47 = *(_OWORD *)(a1 + v42 + 136);
                *(_OWORD *)(v43 + 288) = *(_OWORD *)(v43 + 120);
                *(_OWORD *)(v43 + 304) = v47;
                *(_OWORD *)(v43 + 320) = *(_OWORD *)(v43 + 152);
                if (!v42)
                  break;
                v42 -= 168;
                if (!sub_22ED0DB6C(*(_QWORD *)a3, &v96, (_QWORD *)(v42 + a1), **(_DWORD **)(a3 + 8), *(_DWORD *)(*(_QWORD *)(a3 + 16) + 2964)))
                {
                  v48 = a1 + v42 + 168;
                  goto LABEL_18;
                }
              }
              v48 = a1;
LABEL_18:
              v49 = v97;
              *(_OWORD *)v48 = v96;
              *(_OWORD *)(v48 + 16) = v49;
              v50 = v99;
              *(_OWORD *)(v48 + 32) = v98;
              *(_OWORD *)(v48 + 48) = v50;
              sub_22E6C58D4((void **)(v48 + 64));
              *(_OWORD *)(v48 + 64) = v100;
              *(_QWORD *)(v48 + 80) = v101;
              *(_OWORD *)(v43 + 88) = v102;
              v51 = v105;
              *(_OWORD *)(v43 + 152) = v106;
              *(_OWORD *)(v43 + 136) = v51;
              v52 = v103;
              *(_OWORD *)(v43 + 120) = v104;
              v101 = 0;
              v100 = 0uLL;
              *(_OWORD *)(v43 + 104) = v52;
              v107[0] = (void **)&v100;
              sub_22E6C60B8(v107);
            }
            v33 = (_QWORD *)v36 + 21;
            v34 += 168;
            v35 = v36;
          }
          while ((_OWORD *)((char *)v36 + 168) != a2);
        }
      }
    }
    else
    {
      v30 = a4 >> 1;
      v31 = (__int128 *)(a1 + 168 * (a4 >> 1));
      v32 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v53 = sub_22E9DB5D4((__int128 *)a1, v31, a3, v32, (uint64_t)a5, a7);
        v54 = (uint64_t)&a5[21 * v30];
        sub_22E9DB5D4((__int128 *)(a1 + 168 * (a4 >> 1)), a2, a3, a4 - (a4 >> 1), v54, v53);
        v55 = &a5[21 * a4];
        v56 = (_OWORD *)(a1 + 104);
        v57 = v54;
        v58 = a5;
        while ((_QWORD *)v57 != v55)
        {
          v59 = (_OWORD *)((char *)v56 - 104);
          v60 = sub_22ED0DB6C(*(_QWORD *)a3, (_QWORD *)v57, v58, **(_DWORD **)(a3 + 8), *(_DWORD *)(*(_QWORD *)(a3 + 16) + 2964));
          v61 = (void **)v56 - 5;
          v62 = v56 - 1;
          if (v60)
          {
            v63 = *(_OWORD *)v57;
            v64 = *(_OWORD *)(v57 + 16);
            v65 = *(_OWORD *)(v57 + 48);
            *(_OWORD *)((char *)v56 - 72) = *(_OWORD *)(v57 + 32);
            *(_OWORD *)((char *)v56 - 56) = v65;
            *v59 = v63;
            *(_OWORD *)((char *)v56 - 88) = v64;
            sub_22E6C58D4(v61);
            *(_OWORD *)((char *)v56 - 40) = *(_OWORD *)(v57 + 64);
            *((_QWORD *)v56 - 3) = *(_QWORD *)(v57 + 80);
            *(_QWORD *)(v57 + 64) = 0;
            *(_QWORD *)(v57 + 72) = 0;
            *(_QWORD *)(v57 + 80) = 0;
            *v62 = *(_OWORD *)(v57 + 88);
            v66 = *(_OWORD *)(v57 + 104);
            v67 = *(_OWORD *)(v57 + 120);
            v68 = *(_OWORD *)(v57 + 152);
            v56[2] = *(_OWORD *)(v57 + 136);
            v56[3] = v68;
            *v56 = v66;
            v56[1] = v67;
            v57 += 168;
          }
          else
          {
            v69 = *(_OWORD *)v58;
            v70 = *((_OWORD *)v58 + 1);
            v71 = *((_OWORD *)v58 + 3);
            *(_OWORD *)((char *)v56 - 72) = *((_OWORD *)v58 + 2);
            *(_OWORD *)((char *)v56 - 56) = v71;
            *v59 = v69;
            *(_OWORD *)((char *)v56 - 88) = v70;
            sub_22E6C58D4(v61);
            *(_OWORD *)((char *)v56 - 40) = *((_OWORD *)v58 + 4);
            *((_QWORD *)v56 - 3) = v58[10];
            v58[8] = 0;
            v58[9] = 0;
            v58[10] = 0;
            *v62 = *(_OWORD *)(v58 + 11);
            v72 = *(_OWORD *)(v58 + 13);
            v73 = *(_OWORD *)(v58 + 15);
            v74 = *(_OWORD *)(v58 + 19);
            v56[2] = *(_OWORD *)(v58 + 17);
            v56[3] = v74;
            *v56 = v72;
            v56[1] = v73;
            v58 += 21;
          }
          v56 = (_OWORD *)((char *)v56 + 168);
          if (v58 == (_QWORD *)v54)
          {
            if ((_QWORD *)v57 != v55)
            {
              v75 = 0;
              do
              {
                v76 = (_QWORD *)(v57 + v75);
                v77 = (_OWORD *)((char *)v56 + v75);
                v78 = *(_OWORD *)(v57 + v75);
                v79 = *(_OWORD *)(v57 + v75 + 16);
                v80 = *(_OWORD *)(v57 + v75 + 32);
                *(_OWORD *)((char *)v77 - 56) = *(_OWORD *)(v57 + v75 + 48);
                *(_OWORD *)((char *)v77 - 72) = v80;
                *(_OWORD *)((char *)v77 - 88) = v79;
                *(_OWORD *)((char *)v77 - 104) = v78;
                sub_22E6C58D4((void **)((char *)v56 + v75 - 40));
                *(_OWORD *)((char *)v77 - 40) = *(_OWORD *)(v57 + v75 + 64);
                *((_QWORD *)v77 - 3) = *(_QWORD *)(v57 + v75 + 80);
                v76[8] = 0;
                v76[9] = 0;
                v76[10] = 0;
                *(v77 - 1) = *(_OWORD *)(v57 + v75 + 88);
                v81 = *(_OWORD *)(v57 + v75 + 104);
                v82 = *(_OWORD *)(v57 + v75 + 120);
                v83 = *(_OWORD *)(v57 + v75 + 152);
                v77[2] = *(_OWORD *)(v57 + v75 + 136);
                v77[3] = v83;
                *v77 = v81;
                v77[1] = v82;
                v75 += 168;
              }
              while (v76 + 21 != v55);
            }
            goto LABEL_34;
          }
        }
        if (v58 != (_QWORD *)v54)
        {
          v84 = 0;
          do
          {
            v85 = (_OWORD *)((char *)v56 + v84 * 8);
            v86 = &v58[v84];
            v87 = *(_OWORD *)&v58[v84];
            v88 = *(_OWORD *)&v58[v84 + 2];
            v89 = *(_OWORD *)&v58[v84 + 4];
            *(_OWORD *)((char *)v85 - 56) = *(_OWORD *)&v58[v84 + 6];
            *(_OWORD *)((char *)v85 - 72) = v89;
            *(_OWORD *)((char *)v85 - 88) = v88;
            *(_OWORD *)((char *)v85 - 104) = v87;
            sub_22E6C58D4((void **)((char *)v56 + v84 * 8 - 40));
            *(_OWORD *)((char *)v85 - 40) = *(_OWORD *)&v58[v84 + 8];
            *((_QWORD *)v85 - 3) = v58[v84 + 10];
            v86[8] = 0;
            v86[9] = 0;
            v86[10] = 0;
            *(v85 - 1) = *(_OWORD *)&v58[v84 + 11];
            v90 = *(_OWORD *)&v58[v84 + 13];
            v91 = *(_OWORD *)&v58[v84 + 15];
            v92 = *(_OWORD *)&v58[v84 + 19];
            v85[2] = *(_OWORD *)&v58[v84 + 17];
            v85[3] = v92;
            *v85 = v90;
            v85[1] = v91;
            v84 += 21;
          }
          while (v86 + 21 != (_QWORD *)v54);
        }
LABEL_34:
        if (a5)
        {
          v93 = a4;
          v94 = a5 + 8;
          do
          {
            *(_QWORD *)&v96 = v94;
            sub_22E6C60B8((void ***)&v96);
            v94 += 21;
            --v93;
          }
          while (v93);
        }
      }
      else
      {
        sub_22E9DAFC0(a1, v31, a3, v32, a5, a6);
        sub_22E9DAFC0(a1 + 168 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), a5, a6);
        sub_22E9DBC58(a1, (_QWORD *)(a1 + 168 * (a4 >> 1)), a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6);
      }
    }
  }
}

__n128 sub_22E9DB5D4(__int128 *a1, __int128 *a2, uint64_t a3, unint64_t a4, uint64_t a5, __n128 result)
{
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  _BOOL4 v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *v20;
  _OWORD *v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _OWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  __int128 *v78;
  _OWORD *v79;
  _BOOL4 v80;
  _QWORD *v81;
  _OWORD *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;

  if (a4)
  {
    v10 = a1;
    if (a4 == 2)
    {
      v16 = (__int128 *)((char *)a2 - 168);
      v17 = sub_22ED0DB6C(*(_QWORD *)a3, (_QWORD *)a2 - 21, a1, **(_DWORD **)(a3 + 8), *(_DWORD *)(*(_QWORD *)(a3 + 16) + 2964));
      v18 = (_QWORD *)(a5 + 64);
      v19 = (_OWORD *)(a5 + 88);
      v20 = (_OWORD *)(a5 + 104);
      v21 = (_OWORD *)(a5 + 168);
      v22 = (_QWORD *)(a5 + 232);
      if (v17)
      {
        v23 = *v16;
        v24 = *(__int128 *)((char *)a2 - 152);
        v25 = *(__int128 *)((char *)a2 - 120);
        *(_OWORD *)(a5 + 32) = *(__int128 *)((char *)a2 - 136);
        *(_OWORD *)(a5 + 48) = v25;
        *(_OWORD *)a5 = v23;
        *(_OWORD *)(a5 + 16) = v24;
        *(_QWORD *)(a5 + 72) = 0;
        *(_QWORD *)(a5 + 80) = 0;
        *v18 = 0;
        *(_OWORD *)(a5 + 64) = *(__int128 *)((char *)a2 - 104);
        *(_QWORD *)(a5 + 80) = *((_QWORD *)a2 - 11);
        *((_QWORD *)a2 - 13) = 0;
        *((_QWORD *)a2 - 12) = 0;
        *((_QWORD *)a2 - 11) = 0;
        *v19 = *(a2 - 5);
        v26 = *(a2 - 4);
        v27 = *(a2 - 3);
        v28 = *(a2 - 1);
        *(_OWORD *)(a5 + 136) = *(a2 - 2);
        *(_OWORD *)(a5 + 152) = v28;
        *v20 = v26;
        *(_OWORD *)(a5 + 120) = v27;
        v29 = *(_OWORD *)v10;
        v30 = *((_OWORD *)v10 + 1);
        v31 = *((_OWORD *)v10 + 3);
        *(_OWORD *)(a5 + 200) = *((_OWORD *)v10 + 2);
        *(_OWORD *)(a5 + 216) = v31;
        *v21 = v29;
        *(_OWORD *)(a5 + 184) = v30;
        *(_QWORD *)(a5 + 240) = 0;
        *(_QWORD *)(a5 + 248) = 0;
        *v22 = 0;
        *(_OWORD *)(a5 + 232) = *((_OWORD *)v10 + 4);
        *(_QWORD *)(a5 + 248) = v10[10];
        v10[8] = 0;
        v10[9] = 0;
        v10[10] = 0;
        *(_OWORD *)(a5 + 256) = *(_OWORD *)(v10 + 11);
        result = *(__n128 *)(v10 + 13);
        v32 = *(_OWORD *)(v10 + 15);
        v33 = *(_OWORD *)(v10 + 17);
        v34 = *(_OWORD *)(v10 + 19);
      }
      else
      {
        v66 = *(_OWORD *)v10;
        v67 = *((_OWORD *)v10 + 1);
        v68 = *((_OWORD *)v10 + 3);
        *(_OWORD *)(a5 + 32) = *((_OWORD *)v10 + 2);
        *(_OWORD *)(a5 + 48) = v68;
        *(_OWORD *)a5 = v66;
        *(_OWORD *)(a5 + 16) = v67;
        *(_QWORD *)(a5 + 72) = 0;
        *(_QWORD *)(a5 + 80) = 0;
        *v18 = 0;
        *(_OWORD *)(a5 + 64) = *((_OWORD *)v10 + 4);
        *(_QWORD *)(a5 + 80) = v10[10];
        v10[8] = 0;
        v10[9] = 0;
        v10[10] = 0;
        *v19 = *(_OWORD *)(v10 + 11);
        v69 = *(_OWORD *)(v10 + 13);
        v70 = *(_OWORD *)(v10 + 15);
        v71 = *(_OWORD *)(v10 + 19);
        *(_OWORD *)(a5 + 136) = *(_OWORD *)(v10 + 17);
        *(_OWORD *)(a5 + 152) = v71;
        *v20 = v69;
        *(_OWORD *)(a5 + 120) = v70;
        v72 = *v16;
        v73 = *(__int128 *)((char *)a2 - 152);
        v74 = *(__int128 *)((char *)a2 - 120);
        *(_OWORD *)(a5 + 200) = *(__int128 *)((char *)a2 - 136);
        *(_OWORD *)(a5 + 216) = v74;
        *v21 = v72;
        *(_OWORD *)(a5 + 184) = v73;
        *(_QWORD *)(a5 + 240) = 0;
        *(_QWORD *)(a5 + 248) = 0;
        *v22 = 0;
        *(_OWORD *)(a5 + 232) = *(__int128 *)((char *)a2 - 104);
        *(_QWORD *)(a5 + 248) = *((_QWORD *)a2 - 11);
        *((_QWORD *)a2 - 13) = 0;
        *((_QWORD *)a2 - 12) = 0;
        *((_QWORD *)a2 - 11) = 0;
        *(_OWORD *)(a5 + 256) = *(a2 - 5);
        result = (__n128)*(a2 - 4);
        v32 = *(a2 - 3);
        v33 = *(a2 - 2);
        v34 = *(a2 - 1);
      }
      *(_OWORD *)(a5 + 304) = v33;
      *(_OWORD *)(a5 + 320) = v34;
      *(__n128 *)(a5 + 272) = result;
      *(_OWORD *)(a5 + 288) = v32;
    }
    else if (a4 == 1)
    {
      v11 = *a1;
      v12 = a1[1];
      v13 = a1[3];
      *(_OWORD *)(a5 + 32) = a1[2];
      *(_OWORD *)(a5 + 48) = v13;
      *(_OWORD *)a5 = v11;
      *(_OWORD *)(a5 + 16) = v12;
      *(_QWORD *)(a5 + 72) = 0;
      *(_QWORD *)(a5 + 80) = 0;
      *(_QWORD *)(a5 + 64) = 0;
      *(_OWORD *)(a5 + 64) = a1[4];
      *(_QWORD *)(a5 + 80) = *((_QWORD *)a1 + 10);
      *((_QWORD *)a1 + 8) = 0;
      *((_QWORD *)a1 + 9) = 0;
      *((_QWORD *)a1 + 10) = 0;
      *(_OWORD *)(a5 + 88) = *(__int128 *)((char *)a1 + 88);
      result = *(__n128 *)((char *)a1 + 104);
      v14 = *(__int128 *)((char *)a1 + 120);
      v15 = *(__int128 *)((char *)a1 + 136);
      *(_OWORD *)(a5 + 152) = *(__int128 *)((char *)a1 + 152);
      *(_OWORD *)(a5 + 136) = v15;
      *(_OWORD *)(a5 + 120) = v14;
      *(__n128 *)(a5 + 104) = result;
    }
    else if ((uint64_t)a4 > 8)
    {
      v75 = 168 * (a4 >> 1);
      v76 = (_QWORD *)((char *)a1 + v75);
      sub_22E9DAFC0(a1, (char *)a1 + v75, a3, a4 >> 1, a5, a4 >> 1);
      sub_22E9DAFC0(&v10[(unint64_t)v75 / 8], a2, a3, a4 - (a4 >> 1), a5 + v75, a4 - (a4 >> 1));
      v77 = a5 + 104;
      v78 = (__int128 *)&v10[(unint64_t)v75 / 8];
      while (v78 != a2)
      {
        v79 = (_OWORD *)(v77 - 104);
        v80 = sub_22ED0DB6C(*(_QWORD *)a3, v78, v10, **(_DWORD **)(a3 + 8), *(_DWORD *)(*(_QWORD *)(a3 + 16) + 2964));
        v81 = (_QWORD *)(v77 - 40);
        v82 = (_OWORD *)(v77 - 16);
        if (v80)
        {
          v83 = *v78;
          v84 = v78[1];
          v85 = v78[3];
          *(_OWORD *)(v77 - 72) = v78[2];
          *(_OWORD *)(v77 - 56) = v85;
          *v79 = v83;
          *(_OWORD *)(v77 - 88) = v84;
          *(_QWORD *)(v77 - 32) = 0;
          *(_QWORD *)(v77 - 24) = 0;
          *v81 = 0;
          *(_OWORD *)(v77 - 40) = v78[4];
          *(_QWORD *)(v77 - 24) = *((_QWORD *)v78 + 10);
          *((_QWORD *)v78 + 8) = 0;
          *((_QWORD *)v78 + 9) = 0;
          *((_QWORD *)v78 + 10) = 0;
          *v82 = *(__int128 *)((char *)v78 + 88);
          result = *(__n128 *)((char *)v78 + 104);
          v86 = *(__int128 *)((char *)v78 + 120);
          v87 = *(__int128 *)((char *)v78 + 152);
          *(_OWORD *)(v77 + 32) = *(__int128 *)((char *)v78 + 136);
          *(_OWORD *)(v77 + 48) = v87;
          *(__n128 *)v77 = result;
          *(_OWORD *)(v77 + 16) = v86;
          v78 = (__int128 *)((char *)v78 + 168);
        }
        else
        {
          v88 = *(_OWORD *)v10;
          v89 = *((_OWORD *)v10 + 1);
          v90 = *((_OWORD *)v10 + 3);
          *(_OWORD *)(v77 - 72) = *((_OWORD *)v10 + 2);
          *(_OWORD *)(v77 - 56) = v90;
          *v79 = v88;
          *(_OWORD *)(v77 - 88) = v89;
          *(_QWORD *)(v77 - 32) = 0;
          *(_QWORD *)(v77 - 24) = 0;
          *v81 = 0;
          *(_OWORD *)(v77 - 40) = *((_OWORD *)v10 + 4);
          *(_QWORD *)(v77 - 24) = v10[10];
          v10[8] = 0;
          v10[9] = 0;
          v10[10] = 0;
          *v82 = *(_OWORD *)(v10 + 11);
          result = *(__n128 *)(v10 + 13);
          v91 = *(_OWORD *)(v10 + 15);
          v92 = *(_OWORD *)(v10 + 19);
          *(_OWORD *)(v77 + 32) = *(_OWORD *)(v10 + 17);
          *(_OWORD *)(v77 + 48) = v92;
          *(__n128 *)v77 = result;
          *(_OWORD *)(v77 + 16) = v91;
          v10 += 21;
        }
        v77 += 168;
        if (v10 == v76)
        {
          if (v78 != a2)
          {
            v93 = 0;
            do
            {
              v94 = (_QWORD *)((char *)v78 + v93);
              v95 = v77 + v93;
              v96 = *(__int128 *)((char *)v78 + v93);
              v97 = *(__int128 *)((char *)v78 + v93 + 16);
              v98 = *(__int128 *)((char *)v78 + v93 + 32);
              *(_OWORD *)(v95 - 56) = *(__int128 *)((char *)v78 + v93 + 48);
              *(_OWORD *)(v95 - 72) = v98;
              *(_OWORD *)(v95 - 88) = v97;
              *(_OWORD *)(v95 - 104) = v96;
              *(_QWORD *)(v95 - 32) = 0;
              *(_QWORD *)(v95 - 24) = 0;
              *(_QWORD *)(v95 - 40) = 0;
              *(_OWORD *)(v95 - 40) = *(__int128 *)((char *)v78 + v93 + 64);
              *(_QWORD *)(v95 - 24) = *(_QWORD *)((char *)v78 + v93 + 80);
              v94[8] = 0;
              v94[9] = 0;
              v94[10] = 0;
              *(_OWORD *)(v95 - 16) = *(__int128 *)((char *)v78 + v93 + 88);
              result = *(__n128 *)((char *)v78 + v93 + 104);
              v99 = *(__int128 *)((char *)v78 + v93 + 120);
              v100 = *(__int128 *)((char *)v78 + v93 + 152);
              *(_OWORD *)(v95 + 32) = *(__int128 *)((char *)v78 + v93 + 136);
              *(_OWORD *)(v95 + 48) = v100;
              *(__n128 *)v95 = result;
              *(_OWORD *)(v95 + 16) = v99;
              v93 += 168;
            }
            while (v94 + 21 != (_QWORD *)a2);
          }
          return result;
        }
      }
      if (v10 != v76)
      {
        v101 = 0;
        do
        {
          v102 = v77 + v101 * 8;
          v103 = &v10[v101];
          v104 = *(_OWORD *)&v10[v101];
          v105 = *(_OWORD *)&v10[v101 + 2];
          v106 = *(_OWORD *)&v10[v101 + 4];
          *(_OWORD *)(v102 - 56) = *(_OWORD *)&v10[v101 + 6];
          *(_OWORD *)(v102 - 72) = v106;
          *(_OWORD *)(v102 - 88) = v105;
          *(_OWORD *)(v102 - 104) = v104;
          *(_QWORD *)(v102 - 32) = 0;
          *(_QWORD *)(v102 - 24) = 0;
          *(_QWORD *)(v102 - 40) = 0;
          *(_OWORD *)(v102 - 40) = *(_OWORD *)&v10[v101 + 8];
          *(_QWORD *)(v102 - 24) = v10[v101 + 10];
          v103[8] = 0;
          v103[9] = 0;
          v103[10] = 0;
          *(_OWORD *)(v102 - 16) = *(_OWORD *)&v10[v101 + 11];
          result = *(__n128 *)&v10[v101 + 13];
          v107 = *(_OWORD *)&v10[v101 + 15];
          v108 = *(_OWORD *)&v10[v101 + 19];
          *(_OWORD *)(v102 + 32) = *(_OWORD *)&v10[v101 + 17];
          *(_OWORD *)(v102 + 48) = v108;
          *(__n128 *)v102 = result;
          *(_OWORD *)(v102 + 16) = v107;
          v101 += 21;
        }
        while (v103 + 21 != v76);
      }
    }
    else if (a1 != a2)
    {
      v35 = *a1;
      v36 = a1[1];
      v37 = a1[3];
      *(_OWORD *)(a5 + 32) = a1[2];
      *(_OWORD *)(a5 + 48) = v37;
      *(_OWORD *)a5 = v35;
      *(_OWORD *)(a5 + 16) = v36;
      *(_QWORD *)(a5 + 72) = 0;
      *(_QWORD *)(a5 + 80) = 0;
      *(_QWORD *)(a5 + 64) = 0;
      *(_OWORD *)(a5 + 64) = a1[4];
      *(_QWORD *)(a5 + 80) = *((_QWORD *)a1 + 10);
      *((_QWORD *)a1 + 8) = 0;
      *((_QWORD *)a1 + 9) = 0;
      *((_QWORD *)a1 + 10) = 0;
      *(_OWORD *)(a5 + 88) = *(__int128 *)((char *)a1 + 88);
      result = *(__n128 *)((char *)a1 + 104);
      v38 = *(__int128 *)((char *)a1 + 120);
      v39 = *(__int128 *)((char *)a1 + 136);
      *(_OWORD *)(a5 + 152) = *(__int128 *)((char *)a1 + 152);
      *(_OWORD *)(a5 + 136) = v39;
      *(_OWORD *)(a5 + 120) = v38;
      *(__n128 *)(a5 + 104) = result;
      v40 = (_QWORD *)a1 + 21;
      if ((__int128 *)((char *)a1 + 168) != a2)
      {
        v41 = 0;
        v42 = a5;
        do
        {
          v43 = v40;
          v44 = (_OWORD *)(v42 + 168);
          if (sub_22ED0DB6C(*(_QWORD *)a3, v40, (_QWORD *)v42, **(_DWORD **)(a3 + 8), *(_DWORD *)(*(_QWORD *)(a3 + 16) + 2964)))
          {
            v45 = *(_OWORD *)(v42 + 16);
            *v44 = *(_OWORD *)v42;
            *(_OWORD *)(v42 + 184) = v45;
            v46 = *(_OWORD *)(v42 + 48);
            *(_OWORD *)(v42 + 200) = *(_OWORD *)(v42 + 32);
            *(_OWORD *)(v42 + 216) = v46;
            *(_OWORD *)(v42 + 232) = *(_OWORD *)(v42 + 64);
            *(_QWORD *)(v42 + 248) = *(_QWORD *)(v42 + 80);
            *(_QWORD *)(v42 + 64) = 0;
            *(_QWORD *)(v42 + 72) = 0;
            *(_QWORD *)(v42 + 80) = 0;
            v47 = *(_OWORD *)(v42 + 88);
            v48 = *(_OWORD *)(v42 + 104);
            v49 = *(_OWORD *)(v42 + 120);
            v50 = *(_OWORD *)(v42 + 152);
            *(_OWORD *)(v42 + 304) = *(_OWORD *)(v42 + 136);
            *(_OWORD *)(v42 + 320) = v50;
            *(_OWORD *)(v42 + 272) = v48;
            *(_OWORD *)(v42 + 288) = v49;
            v51 = a5;
            *(_OWORD *)(v42 + 256) = v47;
            if (v42 != a5)
            {
              v52 = v41;
              while (1)
              {
                v51 = a5 + v52;
                if (!sub_22ED0DB6C(*(_QWORD *)a3, v43, (_QWORD *)(a5 + v52 - 168), **(_DWORD **)(a3 + 8), *(_DWORD *)(*(_QWORD *)(a3 + 16) + 2964)))break;
                v53 = *(_OWORD *)(a5 + v52 - 152);
                *(_OWORD *)v51 = *(_OWORD *)(a5 + v52 - 168);
                *(_OWORD *)(v51 + 16) = v53;
                v54 = *(_OWORD *)(a5 + v52 - 120);
                *(_OWORD *)(v51 + 32) = *(_OWORD *)(a5 + v52 - 136);
                *(_OWORD *)(v51 + 48) = v54;
                sub_22E6C58D4((void **)(v51 + 64));
                *(_OWORD *)(v51 + 64) = *(_OWORD *)(v51 - 104);
                v55 = *(_OWORD *)(v51 - 64);
                *(_OWORD *)(v51 + 88) = *(_OWORD *)(v51 - 80);
                *(_OWORD *)(v51 + 104) = v55;
                v56 = *(_OWORD *)(v51 - 32);
                *(_OWORD *)(v51 + 120) = *(_OWORD *)(v51 - 48);
                *(_QWORD *)(v51 + 80) = *(_QWORD *)(v51 - 88);
                *(_QWORD *)(v51 - 96) = 0;
                *(_QWORD *)(v51 - 88) = 0;
                *(_QWORD *)(v51 - 104) = 0;
                *(_OWORD *)(v51 + 136) = v56;
                *(_OWORD *)(v51 + 152) = *(_OWORD *)(v51 - 16);
                v52 -= 168;
                if (!v52)
                {
                  v51 = a5;
                  break;
                }
              }
            }
            v57 = *(_OWORD *)v43;
            v58 = *((_OWORD *)v43 + 1);
            v59 = *((_OWORD *)v43 + 3);
            *(_OWORD *)(v51 + 32) = *((_OWORD *)v43 + 2);
            *(_OWORD *)(v51 + 48) = v59;
            *(_OWORD *)v51 = v57;
            *(_OWORD *)(v51 + 16) = v58;
            sub_22E6C58D4((void **)(v51 + 64));
            *(_OWORD *)(v51 + 64) = *(_OWORD *)(v10 + 29);
            *(_QWORD *)(v51 + 80) = v10[31];
            v10[29] = 0;
            v10[30] = 0;
            v10[31] = 0;
            *(_OWORD *)(v51 + 88) = *((_OWORD *)v10 + 16);
            v60 = v51 + 104;
          }
          else
          {
            v61 = *(_OWORD *)v43;
            v62 = *((_OWORD *)v43 + 1);
            v63 = *((_OWORD *)v43 + 3);
            *(_OWORD *)(v42 + 200) = *((_OWORD *)v43 + 2);
            *(_OWORD *)(v42 + 216) = v63;
            *v44 = v61;
            *(_OWORD *)(v42 + 184) = v62;
            *(_QWORD *)(v42 + 240) = 0;
            *(_QWORD *)(v42 + 248) = 0;
            *(_QWORD *)(v42 + 232) = 0;
            *(_OWORD *)(v42 + 232) = *(_OWORD *)(v10 + 29);
            *(_QWORD *)(v42 + 248) = v10[31];
            v10[29] = 0;
            v10[30] = 0;
            v10[31] = 0;
            *(_OWORD *)(v42 + 256) = *((_OWORD *)v10 + 16);
            v60 = v42 + 272;
          }
          result = *((__n128 *)v10 + 17);
          v64 = *((_OWORD *)v10 + 18);
          v65 = *((_OWORD *)v10 + 20);
          *(_OWORD *)(v60 + 32) = *((_OWORD *)v10 + 19);
          *(_OWORD *)(v60 + 48) = v65;
          v40 = v43 + 21;
          *(__n128 *)v60 = result;
          *(_OWORD *)(v60 + 16) = v64;
          v41 += 168;
          v42 += 168;
          v10 = v43;
        }
        while (v43 + 21 != (_QWORD *)a2);
      }
    }
  }
  return result;
}

void sub_22E9DBC58(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  _BOOL4 v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  void **v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __int128 *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _QWORD *v102;
  void **v103;
  _BOOL4 v104;
  _OWORD *v105;
  _QWORD *v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  unint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 *v123;
  _OWORD *v124;
  __int128 *v125;
  _OWORD *v126;
  _BOOL4 v127;
  void **v128;
  _OWORD *v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  _QWORD *v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  _QWORD *v164;
  void **v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  _OWORD *v173;
  _QWORD *v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  void **v212[3];

  v190 = a6;
  if (!a6)
    return;
  while (a5 > a8 && v190 > a8)
  {
    if (!a5)
      return;
    v14 = 0;
    v15 = -a5;
    while (1)
    {
      v16 = a1 + v14;
      if (sub_22ED0DB6C(*(_QWORD *)a4, a2, (_QWORD *)(a1 + v14), **(_DWORD **)(a4 + 8), *(_DWORD *)(*(_QWORD *)(a4 + 16) + 2964)))
      {
        break;
      }
      v14 += 168;
      if (__CFADD__(v15++, 1))
        return;
    }
    v18 = -v15;
    v192 = a2;
    v188 = a7;
    if (-v15 >= v190)
    {
      if (v15 == -1)
      {
        v142 = a1 + v14;
        v143 = *(_OWORD *)(a1 + v14);
        v144 = *(_OWORD *)(a1 + v14 + 16);
        v145 = *(_OWORD *)(a1 + v14 + 48);
        v202 = *(_OWORD *)(a1 + v14 + 32);
        v203 = v145;
        v200 = v143;
        v201 = v144;
        v146 = a2;
        v147 = *(_QWORD *)(v142 + 80);
        v199 = *(_OWORD *)(v142 + 64);
        *(_QWORD *)(v142 + 64) = 0;
        *(_QWORD *)(v142 + 72) = 0;
        *(_QWORD *)(v142 + 80) = 0;
        v207 = *(_OWORD *)(v142 + 88);
        v148 = *(_OWORD *)(v142 + 104);
        v149 = *(_OWORD *)(v142 + 120);
        v150 = *(_OWORD *)(v142 + 136);
        v211 = *(_OWORD *)(v142 + 152);
        v210 = v150;
        v209 = v149;
        v208 = v148;
        v151 = *(_OWORD *)v146;
        v152 = *((_OWORD *)v146 + 1);
        v153 = *((_OWORD *)v146 + 3);
        *(_OWORD *)(v142 + 32) = *((_OWORD *)v146 + 2);
        *(_OWORD *)(v142 + 48) = v153;
        *(_OWORD *)v142 = v151;
        *(_OWORD *)(v142 + 16) = v152;
        sub_22E6C58D4((void **)(v142 + 64));
        *(_OWORD *)(v142 + 64) = *((_OWORD *)v146 + 4);
        *(_QWORD *)(v142 + 80) = v146[10];
        v146[8] = 0;
        v146[9] = 0;
        v146[10] = 0;
        *(_OWORD *)(v142 + 88) = *(_OWORD *)(v146 + 11);
        v154 = *(_OWORD *)(v146 + 13);
        v155 = *(_OWORD *)(v146 + 15);
        v156 = *(_OWORD *)(v146 + 17);
        *(_OWORD *)(v142 + 152) = *(_OWORD *)(v146 + 19);
        *(_OWORD *)(v142 + 136) = v156;
        *(_OWORD *)(v142 + 120) = v155;
        *(_OWORD *)(v142 + 104) = v154;
        v157 = v200;
        v158 = v201;
        v159 = v203;
        *((_OWORD *)v146 + 2) = v202;
        *((_OWORD *)v146 + 3) = v159;
        *(_OWORD *)v146 = v157;
        *((_OWORD *)v146 + 1) = v158;
        sub_22E6C58D4((void **)v146 + 8);
        *((_OWORD *)v146 + 4) = v199;
        v146[10] = v147;
        v204 = 0;
        v205 = 0;
        v206 = 0;
        *(_OWORD *)(v146 + 11) = v207;
        v160 = v211;
        v161 = v210;
        v162 = v209;
        *(_OWORD *)(v146 + 13) = v208;
        *(_OWORD *)(v146 + 15) = v162;
        *(_OWORD *)(v146 + 17) = v161;
        *(_OWORD *)(v146 + 19) = v160;
        v212[0] = (void **)&v204;
        sub_22E6C60B8(v212);
        return;
      }
      v186 = a3;
      v187 = a4;
      if (v15 > 0)
        v18 = 1 - v15;
      v184 = v18 >> 1;
      v33 = (_QWORD *)(a1 + 168 * (v18 >> 1) + v14);
      v21 = a3;
      v34 = (char *)a3 - (char *)a2;
      if (a3 != a2)
      {
        v35 = *(_QWORD *)a4;
        v36 = *(unsigned int **)(a4 + 8);
        v37 = 0xCF3CF3CF3CF3CF3DLL * (v34 >> 3);
        v38 = *(_QWORD *)(v187 + 16);
        v21 = v192;
        do
        {
          v39 = &v21[21 * (v37 >> 1)];
          v40 = v21;
          v41 = sub_22ED0DB6C(v35, v39, v33, *v36, *(_DWORD *)(v38 + 2964));
          if (v41)
            v37 += ~(v37 >> 1);
          else
            v37 >>= 1;
          if (v41)
            v21 = v39 + 21;
          else
            v21 = v40;
        }
        while (v37);
      }
      v31 = v192;
      v20 = 0xCF3CF3CF3CF3CF3DLL * (v21 - v192);
      v32 = v188;
      v22 = v184;
      v23 = v33;
    }
    else
    {
      if (v190 >= 0)
        v19 = v190;
      else
        v19 = v190 + 1;
      v20 = v19 >> 1;
      v21 = &a2[21 * (v19 >> 1)];
      v22 = 0xCF3CF3CF3CF3CF3DLL * (((uint64_t)a2 - a1 - v14) >> 3);
      if ((_QWORD *)v16 == a2)
      {
        v16 = (uint64_t)a2;
        v23 = a2;
        v43 = (uint64_t)&a2[21 * (v19 >> 1)];
LABEL_55:
        v88 = v190;
        goto LABEL_58;
      }
      v182 = v19 >> 1;
      v186 = a3;
      v23 = (_QWORD *)(a1 + v14);
      do
      {
        v24 = v22 >> 1;
        v25 = &v23[21 * (v22 >> 1)];
        v26 = v23;
        v27 = v22;
        v28 = v21;
        v29 = sub_22ED0DB6C(*(_QWORD *)a4, v21, v25, **(_DWORD **)(a4 + 8), *(_DWORD *)(*(_QWORD *)(a4 + 16) + 2964));
        v21 = v28;
        v30 = v27 + ~(v27 >> 1);
        if (v29)
          v23 = v26;
        else
          v23 = v25 + 21;
        if (v29)
          v22 = v24;
        else
          v22 = v30;
      }
      while (v22);
      v187 = a4;
      v22 = 0xCF3CF3CF3CF3CF3DLL * (((uint64_t)v23 - a1 - v14) >> 3);
      v31 = v192;
      v32 = v188;
      v20 = v182;
    }
    if (v23 != v31)
    {
      if (v31 != v21)
      {
        v183 = v20;
        v185 = v22;
        v193 = v21;
        v42 = 0;
        v43 = (uint64_t)v31;
        v191 = v23;
        while (1)
        {
          v44 = &v23[v42];
          v45 = &v31[v42];
          v46 = *(_OWORD *)&v23[v42];
          v47 = *(_OWORD *)&v23[v42 + 2];
          v48 = *(_OWORD *)&v23[v42 + 6];
          v202 = *(_OWORD *)&v23[v42 + 4];
          v203 = v48;
          v200 = v46;
          v201 = v47;
          v196 = v23[v42 + 10];
          v49 = (void **)&v23[v42 + 8];
          v194 = *(_OWORD *)v49;
          *v49 = 0;
          v44[9] = 0;
          v44[10] = 0;
          v207 = *(_OWORD *)&v23[v42 + 11];
          v50 = *(_OWORD *)&v23[v42 + 13];
          v51 = *(_OWORD *)&v23[v42 + 15];
          v52 = *(_OWORD *)&v23[v42 + 19];
          v210 = *(_OWORD *)&v23[v42 + 17];
          v211 = v52;
          v208 = v50;
          v209 = v51;
          v53 = *(_OWORD *)&v31[v42];
          v54 = *(_OWORD *)&v31[v42 + 2];
          v55 = *(_OWORD *)&v31[v42 + 6];
          *((_OWORD *)v44 + 2) = *(_OWORD *)&v31[v42 + 4];
          *((_OWORD *)v44 + 3) = v55;
          *(_OWORD *)v44 = v53;
          *((_OWORD *)v44 + 1) = v54;
          sub_22E6C58D4(v49);
          *(_OWORD *)v49 = *((_OWORD *)v45 + 4);
          v44[10] = v45[10];
          v45[8] = 0;
          v45[9] = 0;
          v45[10] = 0;
          *(_OWORD *)(v44 + 11) = *(_OWORD *)(v45 + 11);
          v56 = *(_OWORD *)(v45 + 13);
          v57 = *(_OWORD *)(v45 + 15);
          v58 = *(_OWORD *)(v45 + 17);
          *(_OWORD *)(v44 + 19) = *(_OWORD *)(v45 + 19);
          *(_OWORD *)(v44 + 17) = v58;
          *(_OWORD *)(v44 + 15) = v57;
          *(_OWORD *)(v44 + 13) = v56;
          v59 = v200;
          v60 = v201;
          v61 = v203;
          *((_OWORD *)v45 + 2) = v202;
          *((_OWORD *)v45 + 3) = v61;
          *(_OWORD *)v45 = v59;
          *((_OWORD *)v45 + 1) = v60;
          sub_22E6C58D4((void **)v45 + 8);
          *((_OWORD *)v45 + 4) = v194;
          v45[10] = v196;
          v204 = 0;
          v205 = 0;
          v206 = 0;
          *(_OWORD *)(v45 + 11) = v207;
          v62 = v208;
          v63 = v209;
          v64 = v210;
          *(_OWORD *)(v45 + 19) = v211;
          *(_OWORD *)(v45 + 17) = v64;
          *(_OWORD *)(v45 + 15) = v63;
          *(_OWORD *)(v45 + 13) = v62;
          v212[0] = (void **)&v204;
          sub_22E6C60B8(v212);
          v65 = (uint64_t)(v45 + 21);
          v66 = (uint64_t)&v23[v42 + 21];
          v21 = v193;
          if ((_QWORD *)v65 == v193)
            break;
          if (v66 == v43)
            v43 = v65;
          v42 += 21;
          v23 = v191;
          v31 = v192;
        }
        if (v66 == v43)
        {
          a4 = v187;
          a7 = v188;
          a3 = v186;
        }
        else
        {
          v67 = (__int128 *)(v44 + 21);
          v195 = v43;
          do
          {
            while (1)
            {
              v68 = *v67;
              v69 = v67[1];
              v70 = v67[3];
              v202 = v67[2];
              v203 = v70;
              v200 = v68;
              v201 = v69;
              v71 = *((_QWORD *)v67 + 10);
              v197 = v67[4];
              *((_QWORD *)v67 + 8) = 0;
              *((_QWORD *)v67 + 9) = 0;
              *((_QWORD *)v67 + 10) = 0;
              v207 = *(__int128 *)((char *)v67 + 88);
              v72 = *(__int128 *)((char *)v67 + 104);
              v73 = *(__int128 *)((char *)v67 + 120);
              v74 = *(__int128 *)((char *)v67 + 152);
              v210 = *(__int128 *)((char *)v67 + 136);
              v211 = v74;
              v208 = v72;
              v209 = v73;
              v75 = *(_OWORD *)v43;
              v76 = *(_OWORD *)(v43 + 16);
              v77 = *(_OWORD *)(v43 + 48);
              v67[2] = *(_OWORD *)(v43 + 32);
              v67[3] = v77;
              *v67 = v75;
              v67[1] = v76;
              sub_22E6C58D4((void **)v67 + 8);
              v67[4] = *(_OWORD *)(v43 + 64);
              *((_QWORD *)v67 + 10) = *(_QWORD *)(v43 + 80);
              *(_QWORD *)(v43 + 64) = 0;
              *(_QWORD *)(v43 + 72) = 0;
              *(_QWORD *)(v43 + 80) = 0;
              *(__int128 *)((char *)v67 + 88) = *(_OWORD *)(v43 + 88);
              v78 = *(_OWORD *)(v43 + 104);
              v79 = *(_OWORD *)(v43 + 120);
              v80 = *(_OWORD *)(v43 + 136);
              *(__int128 *)((char *)v67 + 152) = *(_OWORD *)(v43 + 152);
              *(__int128 *)((char *)v67 + 136) = v80;
              *(__int128 *)((char *)v67 + 120) = v79;
              *(__int128 *)((char *)v67 + 104) = v78;
              v81 = v200;
              v82 = v201;
              v83 = v203;
              *(_OWORD *)(v43 + 32) = v202;
              *(_OWORD *)(v43 + 48) = v83;
              *(_OWORD *)v43 = v81;
              *(_OWORD *)(v43 + 16) = v82;
              sub_22E6C58D4((void **)(v43 + 64));
              *(_OWORD *)(v43 + 64) = v197;
              *(_QWORD *)(v43 + 80) = v71;
              v204 = 0;
              v205 = 0;
              v206 = 0;
              *(_OWORD *)(v43 + 88) = v207;
              v85 = v210;
              v84 = v211;
              v86 = v209;
              *(_OWORD *)(v43 + 104) = v208;
              *(_OWORD *)(v43 + 120) = v86;
              *(_OWORD *)(v43 + 136) = v85;
              *(_OWORD *)(v43 + 152) = v84;
              v212[0] = (void **)&v204;
              sub_22E6C60B8(v212);
              v21 = v193;
              v67 = (__int128 *)((char *)v67 + 168);
              v43 += 168;
              if ((_QWORD *)v43 == v193)
                break;
              v87 = v195;
              if (v67 == (__int128 *)v195)
                v87 = v43;
              v195 = v87;
            }
            v43 = v195;
          }
          while (v67 != (__int128 *)v195);
          v43 = (uint64_t)&v23[v42 + 21];
          a3 = v186;
          a4 = v187;
          a7 = v188;
        }
        v88 = v190;
        v23 = v191;
        v20 = v183;
        v22 = v185;
        goto LABEL_58;
      }
      a7 = v32;
      v21 = v31;
      v43 = (uint64_t)v23;
      a3 = v186;
      a4 = v187;
      goto LABEL_55;
    }
    v23 = v31;
    v43 = (uint64_t)v21;
    a3 = v186;
    a4 = v187;
    v88 = v190;
    a7 = v32;
LABEL_58:
    a5 = -(uint64_t)v22 - v15;
    v89 = v88 - v20;
    if ((uint64_t)(v20 + v22) >= (uint64_t)(v88 - (v20 + v22) - v15))
    {
      v90 = v22;
      v91 = v20;
      sub_22E9DBC58(v43);
      a2 = v23;
      v89 = v91;
      a5 = v90;
      a3 = (_QWORD *)v43;
    }
    else
    {
      a2 = v21;
      sub_22E9DBC58(v16);
      v16 = v43;
    }
    v190 = v89;
    a1 = v16;
    if (!v89)
      return;
  }
  if (a5 <= v190)
  {
    if ((_QWORD *)a1 == a2)
      return;
    v114 = 0;
    v93 = 0;
    do
    {
      v115 = (_QWORD *)(a1 + v114);
      v116 = &a7[v114 / 8];
      v117 = *(_OWORD *)(a1 + v114);
      v118 = *(_OWORD *)(a1 + v114 + 16);
      v119 = *(_OWORD *)(a1 + v114 + 48);
      *((_OWORD *)v116 + 2) = *(_OWORD *)(a1 + v114 + 32);
      *((_OWORD *)v116 + 3) = v119;
      *(_OWORD *)v116 = v117;
      *((_OWORD *)v116 + 1) = v118;
      v116[9] = 0;
      v116[10] = 0;
      v116[8] = 0;
      *((_OWORD *)v116 + 4) = *(_OWORD *)(a1 + v114 + 64);
      v116[10] = *(_QWORD *)(a1 + v114 + 80);
      v115[8] = 0;
      v115[9] = 0;
      v115[10] = 0;
      *(_OWORD *)(v116 + 11) = *(_OWORD *)(a1 + v114 + 88);
      v120 = *(_OWORD *)(a1 + v114 + 104);
      v121 = *(_OWORD *)(a1 + v114 + 120);
      v122 = *(_OWORD *)(a1 + v114 + 136);
      *(_OWORD *)(v116 + 19) = *(_OWORD *)(a1 + v114 + 152);
      *(_OWORD *)(v116 + 17) = v122;
      *(_OWORD *)(v116 + 15) = v121;
      *(_OWORD *)(v116 + 13) = v120;
      ++v93;
      v114 += 168;
    }
    while (v115 + 21 != a2);
    if (v114)
    {
      v123 = (__int128 *)&a7[v114 / 8];
      v198 = (uint64_t)&a7[v114 / 8 - 21];
      v124 = (_OWORD *)(a1 + 104);
      v125 = (__int128 *)a7;
      while (a2 != a3)
      {
        v126 = (_OWORD *)((char *)v124 - 104);
        v127 = sub_22ED0DB6C(*(_QWORD *)a4, a2, v125, **(_DWORD **)(a4 + 8), *(_DWORD *)(*(_QWORD *)(a4 + 16) + 2964));
        v128 = (void **)v124 - 5;
        v129 = v124 - 1;
        if (v127)
        {
          v130 = *(_OWORD *)a2;
          v131 = *((_OWORD *)a2 + 1);
          v132 = *((_OWORD *)a2 + 3);
          *(_OWORD *)((char *)v124 - 72) = *((_OWORD *)a2 + 2);
          *(_OWORD *)((char *)v124 - 56) = v132;
          *v126 = v130;
          *(_OWORD *)((char *)v124 - 88) = v131;
          sub_22E6C58D4(v128);
          *(_OWORD *)((char *)v124 - 40) = *((_OWORD *)a2 + 4);
          *((_QWORD *)v124 - 3) = a2[10];
          a2[8] = 0;
          a2[9] = 0;
          a2[10] = 0;
          *v129 = *(_OWORD *)(a2 + 11);
          v133 = *(_OWORD *)(a2 + 13);
          v134 = *(_OWORD *)(a2 + 15);
          v135 = *(_OWORD *)(a2 + 19);
          v124[2] = *(_OWORD *)(a2 + 17);
          v124[3] = v135;
          *v124 = v133;
          v124[1] = v134;
          a2 += 21;
        }
        else
        {
          v136 = *v125;
          v137 = v125[1];
          v138 = v125[3];
          *(_OWORD *)((char *)v124 - 72) = v125[2];
          *(_OWORD *)((char *)v124 - 56) = v138;
          *v126 = v136;
          *(_OWORD *)((char *)v124 - 88) = v137;
          sub_22E6C58D4(v128);
          *(_OWORD *)((char *)v124 - 40) = v125[4];
          *((_QWORD *)v124 - 3) = *((_QWORD *)v125 + 10);
          *((_QWORD *)v125 + 8) = 0;
          *((_QWORD *)v125 + 9) = 0;
          *((_QWORD *)v125 + 10) = 0;
          *v129 = *(__int128 *)((char *)v125 + 88);
          v139 = *(__int128 *)((char *)v125 + 104);
          v140 = *(__int128 *)((char *)v125 + 120);
          v141 = *(__int128 *)((char *)v125 + 152);
          v124[2] = *(__int128 *)((char *)v125 + 136);
          v124[3] = v141;
          *v124 = v139;
          v124[1] = v140;
          v125 = (__int128 *)((char *)v125 + 168);
        }
        v124 = (_OWORD *)((char *)v124 + 168);
        if (v123 == v125)
          goto LABEL_97;
      }
      if (v123 != v125)
      {
        v172 = 0;
        do
        {
          v173 = (_OWORD *)((char *)v124 + v172);
          v174 = (_QWORD *)((char *)v125 + v172);
          v175 = *(__int128 *)((char *)v125 + v172);
          v176 = *(__int128 *)((char *)v125 + v172 + 16);
          v177 = *(__int128 *)((char *)v125 + v172 + 32);
          *(_OWORD *)((char *)v173 - 56) = *(__int128 *)((char *)v125 + v172 + 48);
          *(_OWORD *)((char *)v173 - 72) = v177;
          *(_OWORD *)((char *)v173 - 88) = v176;
          *(_OWORD *)((char *)v173 - 104) = v175;
          sub_22E6C58D4((void **)((char *)v124 + v172 - 40));
          *(_OWORD *)((char *)v173 - 40) = *(__int128 *)((char *)v125 + v172 + 64);
          *((_QWORD *)v173 - 3) = *(_QWORD *)((char *)v125 + v172 + 80);
          v174[8] = 0;
          v174[9] = 0;
          v174[10] = 0;
          *(v173 - 1) = *(__int128 *)((char *)v125 + v172 + 88);
          v178 = *(__int128 *)((char *)v125 + v172 + 104);
          v179 = *(__int128 *)((char *)v125 + v172 + 120);
          v180 = *(__int128 *)((char *)v125 + v172 + 152);
          v173[2] = *(__int128 *)((char *)v125 + v172 + 136);
          v173[3] = v180;
          *v173 = v178;
          v173[1] = v179;
          v172 += 168;
        }
        while ((_QWORD *)v198 != v174);
      }
    }
  }
  else
  {
    if (a2 == a3)
      return;
    v92 = 0;
    v93 = 0;
    do
    {
      v94 = &a7[v92];
      v95 = &a2[v92];
      v96 = *(_OWORD *)&a2[v92];
      v97 = *(_OWORD *)&a2[v92 + 2];
      v98 = *(_OWORD *)&a2[v92 + 6];
      *((_OWORD *)v94 + 2) = *(_OWORD *)&a2[v92 + 4];
      *((_OWORD *)v94 + 3) = v98;
      *(_OWORD *)v94 = v96;
      *((_OWORD *)v94 + 1) = v97;
      v94[9] = 0;
      v94[10] = 0;
      v94[8] = 0;
      *((_OWORD *)v94 + 4) = *(_OWORD *)&a2[v92 + 8];
      v94[10] = a2[v92 + 10];
      v95[8] = 0;
      v95[9] = 0;
      v95[10] = 0;
      *(_OWORD *)(v94 + 11) = *(_OWORD *)&a2[v92 + 11];
      v99 = *(_OWORD *)&a2[v92 + 13];
      v100 = *(_OWORD *)&a2[v92 + 15];
      v101 = *(_OWORD *)&a2[v92 + 17];
      *(_OWORD *)(v94 + 19) = *(_OWORD *)&a2[v92 + 19];
      *(_OWORD *)(v94 + 17) = v101;
      *(_OWORD *)(v94 + 15) = v100;
      *(_OWORD *)(v94 + 13) = v99;
      ++v93;
      v92 += 21;
    }
    while (v95 + 21 != a3);
    if (v92 * 8)
    {
      v102 = &a7[v92];
      v103 = (void **)(a3 - 10);
      while (a2 != (_QWORD *)a1)
      {
        v104 = sub_22ED0DB6C(*(_QWORD *)a4, v102 - 21, a2 - 21, **(_DWORD **)(a4 + 8), *(_DWORD *)(*(_QWORD *)(a4 + 16) + 2964));
        if (v104)
          v105 = a2 - 21;
        else
          v105 = v102 - 21;
        v106 = a2;
        if (v104)
        {
          v106 = a2 - 21;
        }
        else
        {
          a2 = v102;
          v102 -= 21;
        }
        v107 = v105[2];
        v108 = v105[3];
        v109 = v105[1];
        *(_OWORD *)(v103 - 11) = *v105;
        *(_OWORD *)(v103 - 5) = v108;
        *(_OWORD *)(v103 - 7) = v107;
        *(_OWORD *)(v103 - 9) = v109;
        sub_22E6C58D4(v103 - 3);
        *(_OWORD *)(v103 - 3) = *(_OWORD *)(a2 - 13);
        *(v103 - 1) = (void *)*(a2 - 11);
        *(a2 - 13) = 0;
        *(a2 - 12) = 0;
        *(a2 - 11) = 0;
        *(_OWORD *)v103 = *((_OWORD *)a2 - 5);
        v110 = *((_OWORD *)a2 - 4);
        v111 = *((_OWORD *)a2 - 3);
        v112 = *((_OWORD *)a2 - 2);
        v113 = *((_OWORD *)a2 - 1);
        a2 = v106;
        *((_OWORD *)v103 + 3) = v112;
        *((_OWORD *)v103 + 4) = v113;
        *((_OWORD *)v103 + 1) = v110;
        *((_OWORD *)v103 + 2) = v111;
        v103 -= 21;
        if (v102 == a7)
          goto LABEL_97;
      }
      if (v102 != a7)
      {
        v163 = 0;
        do
        {
          v164 = &v102[v163];
          v165 = &v103[v163];
          v166 = *(_OWORD *)&v102[v163 - 21];
          v167 = *(_OWORD *)&v102[v163 - 19];
          v168 = *(_OWORD *)&v102[v163 - 17];
          *(_OWORD *)(v165 - 5) = *(_OWORD *)&v102[v163 - 15];
          *(_OWORD *)(v165 - 7) = v168;
          *(_OWORD *)(v165 - 9) = v167;
          *(_OWORD *)(v165 - 11) = v166;
          sub_22E6C58D4(&v103[v163 - 3]);
          *(_OWORD *)(v165 - 3) = *(_OWORD *)&v102[v163 - 13];
          *(v165 - 1) = (void *)v102[v163 - 11];
          *(v164 - 13) = 0;
          *(v164 - 12) = 0;
          *(v164 - 11) = 0;
          *(_OWORD *)v165 = *(_OWORD *)&v102[v163 - 10];
          v169 = *(_OWORD *)&v102[v163 - 8];
          v170 = *(_OWORD *)&v102[v163 - 6];
          v171 = *(_OWORD *)&v102[v163 - 2];
          *((_OWORD *)v165 + 3) = *(_OWORD *)&v102[v163 - 4];
          *((_OWORD *)v165 + 4) = v171;
          *((_OWORD *)v165 + 1) = v169;
          *((_OWORD *)v165 + 2) = v170;
          v163 -= 21;
        }
        while (&v102[v163] != a7);
      }
    }
  }
LABEL_97:
  if (a7)
  {
    v181 = a7 + 8;
    do
    {
      *(_QWORD *)&v200 = v181;
      sub_22E6C60B8((void ***)&v200);
      v181 += 21;
      --v93;
    }
    while (v93);
  }
}

char **sub_22E9DC79C(uint64_t *a1)
{
  void *v2;

  sub_22ECF9784(a1);
  sub_22E3B4EF4((uint64_t)(a1 + 358));
  v2 = (void *)a1[339];
  if (v2 != (void *)a1[338])
    free(v2);
  return sub_22E9DC7DC((char **)a1);
}

char **sub_22E9DC7DC(char **a1)
{
  char *v2;
  unsigned int v3;
  char *v4;
  uint64_t v5;
  void **v7;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v4 = v2 - 104;
    v5 = 168 * v3;
    do
    {
      v7 = (void **)&v4[v5];
      sub_22E6C60B8(&v7);
      v5 -= 168;
    }
    while (v5);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22E9DC850(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  _QWORD *v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  char v24;
  BOOL v25;
  int v26;
  BOOL v27;
  BOOL v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL (*v32)(uint64_t, uint64_t);
  BOOL v33;
  char v34;

  *a3 = 0;
  v6 = *(_DWORD *)(a2 + 28) & 0x7F;
  v7 = v6 > 0x2F;
  v8 = (1 << v6) & 0xC00000060000;
  v9 = v7 || v8 == 0;
  v10 = a2;
  if (!v9)
    v10 = sub_22EFBAEA4(a2);
  if (!*(_QWORD *)(v10 + 40))
    return 0;
  result = 0;
  v12 = *(_DWORD *)(v10 + 28);
  v13 = (v12 & 0x1800000) != 0;
  if ((v12 & 0x220000) != 0)
    v13 = 0;
  if ((*(_DWORD *)(v10 + 28) & 0x7E) == 0x24)
    return result;
  if (v13)
    return result;
  result = 0;
  v14 = *(_DWORD *)(v10 + 28) & 0x7F;
  if (v14 == 13 || v14 == 37)
    return result;
  v15 = *(_QWORD *)(a1 + 184);
  v16 = sub_22EFB92BC(v10, *(_QWORD *)(v15 + 72));
  if (v16 >= 3)
  {
    v17 = *(_DWORD *)(v10 + 24);
    if (!v17)
      return 0;
    if (v16 == 3)
    {
      v18 = *(_QWORD **)(v15 + 112);
      if (v17 < 0)
        v17 = sub_22F1E238C(v18, v17);
      v19 = sub_22F1E361C(v18, v17);
      if (v19 != 3)
      {
        if (v19)
          return 0;
      }
    }
  }
  v20 = *(_QWORD *)(a1 + 208);
  v21 = *(_QWORD *)(a1 + 216);
  v22 = v21 & 1 | v20;
  if (v21)
    v23 = v22 == 0;
  else
    v23 = 1;
  v24 = v23;
  if ((uint64_t (*)(uint64_t, uint64_t))v20 == sub_22E9C35B8 && (v24 & 1) != 0
    || (*(_DWORD *)(v10 + 28) & 0x7F) == 0x10
    && (v21 ? (v25 = v22 == 0) : (v25 = 1),
        v25 ? (v26 = 0) : (v26 = 1),
        (BOOL (*)(uint64_t, uint64_t))v20 != sub_22E9C77E0 ? (v27 = v20 == (_QWORD)sub_22E9C7C60) : (v27 = 1),
        !v27 ? (v28 = v20 == 0) : (v28 = 1),
        !v28 || v26))
  {
    *a3 = 1;
  }
  if (!v22)
    return 1;
  v29 = (_QWORD *)(a1 + (v21 >> 1));
  if ((v21 & 1) != 0)
    v20 = *(_QWORD *)(*v29 + v20);
  if ((((uint64_t (*)(_QWORD *, uint64_t))v20)(v29, a2) & 1) != 0)
    return 1;
  if (!*(_BYTE *)(a1 + 224))
    return 0;
  v30 = *(_QWORD *)(a1 + 184);
  if ((*(_BYTE *)(*(_QWORD *)(v30 + 72) + 1) & 1) == 0)
    return 0;
  v31 = v10;
  if ((*(_DWORD *)(v10 + 28) & 0x7F) == 0x1C)
    v31 = *(_QWORD *)(v10 + 48);
  result = sub_22E958A54(v30, v31, 0);
  if (!(_DWORD)result)
    return result;
  v32 = *(BOOL (**)(uint64_t, uint64_t))(a1 + 208);
  if (*(_QWORD *)(a1 + 216))
    v33 = (*(_QWORD *)(a1 + 216) & 1 | (unint64_t)v32) == 0;
  else
    v33 = 1;
  v34 = !v33;
  if (v32 != sub_22E9C2584 || (v34 & 1) != 0)
    goto LABEL_67;
  if ((*(_DWORD *)(v10 + 28) & 0x7Fu) - 35 > 2)
    return 0;
  result = sub_22EFC3A88(v10);
  if ((_DWORD)result)
  {
LABEL_67:
    result = 1;
    *a3 = 1;
  }
  return result;
}

uint64_t sub_22E9DCA94(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 72) + 1) & 1) == 0)
    return 1;
  v9 = *a2;
  v10 = *(_QWORD *)(*a2 + 16);
  v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (_QWORD *)*v11;
  v12 = sub_22EFCBB30((unint64_t)v11);
  v13 = *(_WORD *)(v12 + 8) & 0x7F;
  result = 1;
  v14 = v13 > 0x18 || ((1 << v13) & 0x1000006) == 0;
  if (v14 && v13 - 52 >= 6)
  {
    v15 = *(_QWORD *)(a4 + 16);
    v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8);
    if ((v15 & 4) != 0)
      v16 = (_QWORD *)*v16;
    if (v12 == sub_22EFCBB30((unint64_t)v16))
      return 1;
    *((_BYTE *)a2 + 64) = a2[8] & 0xFA | 1;
    if (a2[9])
    {
      return 0;
    }
    else
    {
      v17 = *(_QWORD *)(v9 + 16);
      v18 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8);
      if ((v17 & 4) != 0)
        v18 = (_QWORD *)*v18;
      v19 = sub_22F0ABCB8(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 88), a3, (unint64_t)v18);
      result = 0;
      a2[9] = v19;
    }
  }
  return result;
}

unint64_t sub_22E9DCB9C(unint64_t result, _DWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  int v10;

  v3 = result;
  v4 = *(_QWORD *)(result + 304);
  if (v4)
  {
    if (*(_QWORD *)a2)
      v5 = (*(_DWORD *)(*(_QWORD *)a2 + 28) & 0x7F) == 24;
    else
      v5 = 0;
    if (v5 && v4 == *(_QWORD *)(*(_QWORD *)a2 + 40))
      a2[4] -= 3;
  }
  if (*(_QWORD *)(result + 232) >= 0x10uLL)
  {
    result = sub_22E9B4528(*(_QWORD *)(*(_QWORD *)(result + 184) + 88), *(_QWORD *)a2);
    if (result >= 0x10)
    {
      v6 = *(_QWORD *)((result & 0xFFFFFFFFFFFFFFF0) + 8);
      v7 = v6 & 0xFFFFFFFFFFFFFFF0;
      if (*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v3 + 232) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
      {
        v8 = 2;
LABEL_13:
        a2[4] >>= v8;
        return result;
      }
      v9 = v6 | result & 7;
      v10 = sub_22F312858(*(_QWORD *)(v3 + 232));
      result = sub_22F312858(v9);
      if (v10 == (_DWORD)result
        && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 232) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                     + 16) != 44
         || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 44))
      {
        v8 = 1;
        goto LABEL_13;
      }
    }
  }
  return result;
}

uint64_t sub_22E9DCCD8(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  _QWORD *v9;

  v5 = result;
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result > 7uLL)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    if ((v6 & 4) == 0 && v7)
    {
      result = operator new();
      *(_QWORD *)(result + 16) = v7;
      *(_QWORD *)result = result + 16;
      *(_QWORD *)(result + 24) = *(unsigned int *)(v5 + 8);
      *(_QWORD *)(result + 8) = 0x400000001;
      *(_QWORD *)v5 = result | 4;
      v7 = result & 0xFFFFFFFFFFFFFFF8;
    }
    v8 = *(_DWORD *)(v7 + 8);
    if (v8 >= *(_DWORD *)(v7 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_DWORD *)(v7 + 8);
    }
    v9 = (_QWORD *)(*(_QWORD *)v7 + 16 * v8);
    *v9 = a2;
    v9[1] = a3;
    ++*(_DWORD *)(v7 + 8);
  }
  else
  {
    *(_QWORD *)result = a2 & 0xFFFFFFFFFFFFFFFBLL;
    *(_DWORD *)(result + 8) = a3;
  }
  return result;
}

unint64_t sub_22E9DCDB4(unint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 184) + 72) + 1) & 1) == 0)
    return result;
  v3 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return result;
  v4 = (uint64_t *)result;
  if (((1 << *(_DWORD *)(result + 312)) & 0xFDFCFFC7FLL) != 0)
    return result;
  v5 = *(_DWORD *)(v3 + 28);
  if ((v5 & 0x7F) == 0x1C)
  {
    v3 = *(_QWORD *)(v3 + 48);
  }
  else if ((v5 & 0x7E) == 0x24 || (v5 & 0x7Fu) - 38 < 0xFFFFFFFD)
  {
    return result;
  }
  v7 = *(_QWORD *)(v3 + 128);
  if (v7
    || (result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104)),
        (v7 = *(_QWORD *)(v3 + 128)) != 0))
  {
    v8 = *(_QWORD *)(v7 + 88);
    if (v8)
    {
      result = sub_22E9DD0D8(*(_QWORD *)(v4[23] + 88), v8);
      if (result)
      {
        v9 = (_OWORD *)(a2 + 64);
        while (1)
        {
          v10 = (uint64_t *)(result & 0xFFFFFFFFFFFFFFF8);
          if ((result & 4) == 0 || !v10)
            break;
          v11 = *v10;
          *(_QWORD *)a2 = *v10;
          *(_DWORD *)(a2 + 28) = sub_22E9B8178(v11);
          v12 = v4[1];
          if (v12 >= v4[2])
          {
            v16 = sub_22E9D8E48(v4, a2);
          }
          else
          {
            v13 = *(_OWORD *)a2;
            v14 = *(_OWORD *)(a2 + 16);
            *(_DWORD *)(v12 + 32) = *(_DWORD *)(a2 + 32);
            *(_OWORD *)v12 = v13;
            *(_OWORD *)(v12 + 16) = v14;
            *(_QWORD *)(v12 + 40) = 0;
            *(_QWORD *)(v12 + 48) = 0;
            *(_QWORD *)(v12 + 56) = 0;
            sub_22E6C6020((_QWORD *)(v12 + 40), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
            v15 = *(_OWORD *)(a2 + 80);
            *(_OWORD *)(v12 + 64) = *v9;
            *(_OWORD *)(v12 + 80) = v15;
            v16 = v12 + 96;
          }
          v4[1] = v16;
          result = v10[1];
          if (!result)
            return result;
        }
        *(_QWORD *)a2 = v10;
        *(_DWORD *)(a2 + 28) = sub_22E9B8178(result & 0xFFFFFFFFFFFFFFF8);
        v17 = v4[1];
        if (v17 >= v4[2])
        {
          result = sub_22E9D8E48(v4, a2);
        }
        else
        {
          v18 = *(_OWORD *)a2;
          v19 = *(_OWORD *)(a2 + 16);
          *(_DWORD *)(v17 + 32) = *(_DWORD *)(a2 + 32);
          *(_OWORD *)v17 = v18;
          *(_OWORD *)(v17 + 16) = v19;
          *(_QWORD *)(v17 + 48) = 0;
          *(_QWORD *)(v17 + 56) = 0;
          *(_QWORD *)(v17 + 40) = 0;
          sub_22E6C6020((_QWORD *)(v17 + 40), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
          v20 = *(_OWORD *)(a2 + 80);
          *(_OWORD *)(v17 + 64) = *v9;
          *(_OWORD *)(v17 + 80) = v20;
          result = v17 + 96;
        }
        v4[1] = result;
      }
    }
  }
  return result;
}

uint64_t sub_22E9DCF94(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v15;
  int v16;
  BOOL v17;
  int v19;

  if (a2)
  {
    v5 = (37 * a4)
       + ~((unint64_t)(37 * a4) << 32)
       + ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ ((_DWORD)v7 + ~((_DWORD)v7 << 27)));
    v9 = (_QWORD *)(a1 + 32 * v8);
    v10 = *v9;
    v11 = v9[1];
    if (*v9 == a3 && v11 == a4)
    {
      v13 = 1;
    }
    else
    {
      v15 = 0;
      v16 = 1;
      while (v10 != -4096 || v11 != -1)
      {
        if (v15)
          v17 = 0;
        else
          v17 = v11 == -2;
        if (v17 && v10 == -8192)
          v15 = v9;
        v19 = v8 + v16++;
        v8 = v19 & (a2 - 1);
        v9 = (_QWORD *)(a1 + 32 * v8);
        v10 = *v9;
        v11 = v9[1];
        v13 = 1;
        if (*v9 == a3 && v11 == a4)
          goto LABEL_9;
      }
      v13 = 0;
      if (v15)
        v9 = v15;
    }
  }
  else
  {
    v9 = 0;
    v13 = 0;
  }
LABEL_9:
  *a5 = v9;
  return v13;
}

uint64_t sub_22E9DD080(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v1 = *v3;
  if ((*(_BYTE *)(a1 + 29) & 1) != 0)
    sub_22EFC8E88(a1);
  return v1;
}

unint64_t sub_22E9DD0D8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 48);
  if (v4)
    v5 = v4 & 0xFFFFFFFFFFFFFFF0;
  else
    v5 = sub_22EF6462C(a1, a2);
  v6 = sub_22EFC6A3C((_QWORD *)(a1 + 15224), v5 & 7 | *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8));
  return sub_22EFCE144(a2 + 64, v6);
}

uint64_t sub_22E9DD13C(uint64_t result, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;

  if (!a2 || !a3)
    return result;
  v4 = a2;
  v5 = result;
  while (1)
  {
    v6 = *v4;
    if (v6 == 157)
    {
      v7 = *((unsigned int *)v4 + 22);
      if (!(_DWORD)v7)
        return result;
      v8 = 0;
      v9 = *((_QWORD *)v4 + 9);
      v10 = *(_QWORD *)(v9 + 56);
      v11 = 24 * v7;
      for (i = v4 + 112; ; i += 3)
      {
        if (v8 >= (*(_DWORD *)(v10 + 12) & 0x1FFFFFFFu))
          return result;
        if (*((_DWORD *)i - 2) == 1)
        {
          v13 = *(_QWORD *)(*i & 0xFFFFFFFFFFFFFFF0);
          if (v13)
          {
            if (*(_QWORD *)(v13 + 8) == *(_QWORD *)(a3 + 8))
            {
              v14 = *(_QWORD *)(v10 + 16 + 8 * v8);
              if (!v14 || (*(_DWORD *)(v14 + 28) & 0x7F) != 0x26)
                goto LABEL_19;
              result = sub_22E9DD13C(v5, *(_QWORD *)(v9 + 64), *(_QWORD *)(v14 + 48));
            }
          }
        }
        ++v8;
LABEL_19:
        v11 -= 24;
        if (!v11)
          return result;
      }
    }
    if ((v6 & 0xFE) != 0x70)
      break;
    if (((*(_DWORD *)v4 >> 18) & 0x3Fu) - 19 <= 1)
    {
      result = sub_22E9DD13C(v5, *((_QWORD *)v4 + 2), a3);
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 3);
      if (v4)
        continue;
    }
    return result;
  }
  if (v6 == 219)
  {
    v15 = *((unsigned int *)v4 + 5);
    if ((_DWORD)v15)
    {
      v16 = (uint64_t)&v4[8 * *((unsigned int *)v4 + 4) + 40];
      v17 = 8 * v15;
      do
      {
        v18 = *(_QWORD *)v16;
        if ((*(_BYTE *)(*(_QWORD *)v16 + 4) & 1) != 0)
        {
          v19 = *(_DWORD *)v18;
          if (*(_DWORD *)v18)
          {
            if (v19 <= 2)
            {
              v27 = v5;
              v28 = a3;
              v29 = 0u;
              v30 = 0u;
              v21 = *(_QWORD *)(v18 + 24);
              if (v21 >= 8 && (*(_QWORD *)(v18 + 24) & 4) == 0)
              {
                v24 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFF8) + 16);
                v25 = *(_BYTE *)(v24 + 60);
                v26 = v24 + 80;
                if ((v25 & 4) == 0)
                  v26 = 0;
                *((_QWORD *)&v30 + 1) = v26;
                v23 = *(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFFCLL;
                *(_QWORD *)&v30 = v23;
              }
              else
              {
                v23 = *(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFFCLL;
              }
              result = sub_22E9DD810((uint64_t)&v27, v23, 0);
            }
            else if (v19 == 3)
            {
              result = sub_22E9DD13C(v5, *(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFFCLL, a3);
            }
          }
          else
          {
            v20 = *(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8);
            v27 = v5;
            v28 = a3;
            v29 = 0u;
            v30 = 0u;
            result = sub_22E9DD360(&v27, v20);
          }
        }
        v16 += 8;
        v17 -= 8;
      }
      while (v17);
    }
  }
  return result;
}

uint64_t sub_22E9DD360(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _DWORD v46[2];
  uint64_t v47;

  if (a2 < 0x10)
    return 1;
  while (2)
  {
    v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    v5 = *(_DWORD *)(v4 + 16);
    result = 1;
    switch((char)v5)
    {
      case 0:
      case 1:
      case 4:
      case 6:
      case 7:
      case 8:
      case 10:
      case 12:
      case 29:
      case 32:
      case 36:
      case 37:
      case 38:
      case 39:
      case 54:
      case 55:
      case 56:
        goto LABEL_5;
      case 2:
        result = sub_22E9DD360(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(v4 + 19) & 2) == 0)
          return 1;
        v14 = *(_QWORD *)(v4 + 56);
        if (!v14)
          return 1;
        goto LABEL_49;
      case 3:
        result = sub_22E9DD360(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v14 = *(_QWORD *)(v4 + 48);
        if (v14)
          goto LABEL_49;
        return 1;
      case 5:
        result = sub_22E9DD360(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v13 = *(_QWORD *)(v4 + 40);
        return sub_22E9DD810((uint64_t)a1, v13, 0);
      case 13:
      case 48:
        v13 = *(_QWORD *)(v4 + 24);
        return sub_22E9DD810((uint64_t)a1, v13, 0);
      case 14:
        result = sub_22E9DD360(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        v15 = *(_QWORD *)(v4 + 40);
        if (!v15)
          return 1;
        result = sub_22E9E924C(a1, v15);
        if (!(_DWORD)result)
          return result;
        v16 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v16)
          return 1;
        v17 = v4 + 48;
        v18 = v16 - 1;
        do
        {
          result = sub_22E9EE328((uint64_t)a1, v17);
          v19 = v18-- != 0;
          v20 = v19;
          if (!(_DWORD)result)
            break;
          v17 += 24;
        }
        while ((v20 & 1) != 0);
        return result;
      case 15:
        result = sub_22E9EE224((uint64_t)a1, *(_QWORD *)(v4 + 40));
        if ((_DWORD)result)
          goto LABEL_19;
        return result;
      case 16:
        v7 = *(_QWORD *)(v4 + 40);
        goto LABEL_22;
      case 17:
        v13 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
        return sub_22E9DD810((uint64_t)a1, v13, 0);
      case 18:
        sub_22E9EE2E8(a1, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
        return sub_22E9EE284((uint64_t)a1, *(_QWORD *)(v4 + 32));
      case 19:
        v7 = *(_QWORD *)(v4 + 40);
        if (!v7)
          goto LABEL_23;
LABEL_22:
        result = sub_22E9DD810((uint64_t)a1, v7, 0);
        if (!(_DWORD)result)
          return result;
LABEL_23:
        v6 = (unint64_t *)(v4 + 48);
        goto LABEL_6;
      case 20:
        result = sub_22E9EE284((uint64_t)a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v21 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v21)
          return 1;
        v22 = v4 + 48;
        v23 = v21 - 1;
        do
        {
          result = sub_22E9EE328((uint64_t)a1, v22);
          v19 = v23-- != 0;
          v24 = v19;
          if (!(_DWORD)result)
            break;
          v22 += 24;
        }
        while ((v24 & 1) != 0);
        return result;
      case 21:
        v8 = *(_QWORD *)(v4 + 48);
        if (v8)
        {
          result = sub_22E9DD810((uint64_t)a1, v8, 0);
          if (!(_DWORD)result)
            return result;
        }
        goto LABEL_31;
      case 22:
        goto LABEL_34;
      case 23:
        v9 = *(_QWORD *)(v4 + 64);
        if (!v9)
          goto LABEL_5;
        goto LABEL_35;
      case 24:
        v10 = *(_QWORD *)(v4 + 32);
        if (v10)
        {
          result = sub_22E9EE284((uint64_t)a1, v10);
          if (!(_DWORD)result)
            return result;
        }
LABEL_31:
        v6 = (unint64_t *)(v4 + 40);
        goto LABEL_6;
      case 25:
      case 28:
      case 49:
LABEL_19:
        v6 = (unint64_t *)(v4 + 24);
        goto LABEL_6;
      case 26:
        result = sub_22E9DD360(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        v25 = *(_QWORD *)(v4 + 16);
        v26 = (unsigned __int16)(v25 >> 38);
        if (!(unsigned __int16)(v25 >> 38))
          goto LABEL_82;
        v27 = 8 * v26;
        v28 = (_QWORD *)(v4 + 40);
        break;
      case 30:
        v11 = *(_QWORD *)(v4 + 48);
        if (v11)
        {
          result = sub_22E9DD810((uint64_t)a1, v11, 0);
          if (!(_DWORD)result)
            return result;
        }
LABEL_34:
        v9 = *(_QWORD *)(v4 + 56);
        if (!v9)
          goto LABEL_5;
LABEL_35:
        result = sub_22E9DD810((uint64_t)a1, v9, 0);
        if (!(_DWORD)result)
          return result;
LABEL_5:
        v6 = (unint64_t *)(v4 + 32);
LABEL_6:
        a2 = *v6;
        if (*v6 < 0x10)
          return 1;
        continue;
      case 31:
        v12 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0;
        goto LABEL_40;
      case 33:
        v35 = *(_QWORD *)(v4 + 24);
        if (*(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0) != v4)
        {
          result = sub_22E9DD360(a1, v35);
          if (!(_DWORD)result)
            return result;
        }
        v36 = (*(_QWORD *)(v4 + 16) >> 19) & 0x7FLL;
        if (!v36)
          return 1;
        v37 = (uint64_t *)(v4 + 48);
        v38 = 8 * v36 - 8;
        do
        {
          v39 = *v37++;
          result = sub_22E9DD360(a1, v39);
          if ((_DWORD)result)
            v40 = v38 == 0;
          else
            v40 = 1;
          v38 -= 8;
        }
        while (!v40);
        return result;
      case 40:
        while ((v5 & 0x100000) != 0)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v4 = sub_22F10CF48(v4);
          v5 = *(_DWORD *)(v4 + 16);
        }
        goto LABEL_5;
      case 41:
        while ((v5 & 0x100000) != 0)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v4 = sub_22F10CF48(v4);
          v5 = *(_DWORD *)(v4 + 16);
        }
        goto LABEL_5;
      case 42:
        v41 = *(_DWORD *)(v4 + 20);
        v47 = *(_QWORD *)(v4 + 40);
        v46[0] = 8;
        v46[1] = v41;
        return sub_22E9EE328((uint64_t)a1, (uint64_t)v46);
      case 43:
        v6 = (unint64_t *)(v4 + 8);
        goto LABEL_6;
      case 46:
        result = sub_22E9EE224((uint64_t)a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v42 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v42)
          return 1;
        v43 = v4 + 40;
        v44 = v42 - 1;
        do
        {
          result = sub_22E9EE328((uint64_t)a1, v43);
          v19 = v44-- != 0;
          v45 = v19;
          if (!(_DWORD)result)
            break;
          v43 += 24;
        }
        while ((v45 & 1) != 0);
        return result;
      case 51:
        v12 = *(_QWORD *)(v4 + 24);
LABEL_40:
        result = sub_22E9DD360(a1, v12);
        if (!(_DWORD)result)
          return result;
        goto LABEL_5;
      default:
        return result;
    }
    break;
  }
  do
  {
    if ((sub_22E9DD360(a1, *v28) & 1) == 0)
      return 0;
    ++v28;
    v27 -= 8;
  }
  while (v27);
  v25 = *(_QWORD *)(v4 + 16);
  v26 = (unsigned __int16)(v25 >> 38);
LABEL_82:
  if ((v25 & 0x3C0000000000000) == 0x80000000000000)
  {
    v29 = (_DWORD *)((v4 + 40 + 8 * v26 + 4 * ((v25 >> 59) & 1) + 7) & 0xFFFFFFFFFFFFFFF8);
    v32 = *v29;
    v31 = v29 + 2;
    v30 = v32;
    if (v32)
    {
      v33 = 8 * v30;
      while ((sub_22E9DD360(a1, *v31) & 1) != 0)
      {
        ++v31;
        v33 -= 8;
        if (!v33)
          goto LABEL_87;
      }
      return 0;
    }
  }
LABEL_87:
  v34 = sub_22F257D3C(v4);
  if (!v34)
    return 1;
  v14 = v34;
LABEL_49:
  result = sub_22E9DD810((uint64_t)a1, v14, 0);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22E9DD810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD v17[10];

  v17[8] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (a3)
    {
      v4 = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v5 = *(_DWORD *)(a3 + 8);
      if (v5 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v5 = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v5) = v4;
      ++*(_DWORD *)(a3 + 8);
    }
    else
    {
      v17[0] = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v16 = 0x800000001;
      v7 = 1;
      do
      {
        v8 = v7;
        v9 = &v17[v7];
        v10 = *(v9 - 1);
        if ((v10 & 4) != 0)
        {
          v7 = v8 - 1;
          LODWORD(v16) = v8 - 1;
        }
        else
        {
          *(v9 - 1) = v10 | 4;
          v11 = *(unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFF8) - 1;
          if (v11 <= 0xEB)
            __asm { BR              X9 }
          v7 = v16;
          if ((_DWORD)v8 != (_DWORD)v16)
          {
            v12 = &v17[v16 - 1];
            if (&v17[v8] < v12)
            {
              v13 = &v17[v8 + 1];
              do
              {
                v14 = *(v13 - 1);
                *(v13 - 1) = *v12;
                *v12-- = v14;
              }
              while (v13++ < v12);
            }
          }
        }
      }
      while (v7);
    }
  }
  return 1;
}

uint64_t sub_22E9E924C(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;
  int v5;
  uint64_t result;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  BOOL v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t **v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t **v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t **v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t **v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unsigned int v93;
  BOOL v94;
  uint64_t v95;
  uint64_t **v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t **v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t **v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t **v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t **v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t **v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t **v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  BOOL v127;
  uint64_t v128;
  uint64_t **v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  BOOL v134;
  uint64_t v135;
  uint64_t **v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t **v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t **v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  BOOL v154;
  uint64_t v155;
  uint64_t **v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t **v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t **v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t **v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t *v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t **v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  BOOL v185;
  uint64_t v186;
  uint64_t **v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t **v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t **v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t *v205;
  unint64_t *v206;
  unint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t **v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t **v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t **v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  BOOL v225;
  uint64_t v226;
  uint64_t **v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  BOOL v235;
  uint64_t v236;
  uint64_t **v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  BOOL v242;
  uint64_t v243;
  uint64_t **v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t **v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t **v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t **v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t **v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  _DWORD *v275;
  uint64_t v276;
  uint64_t *v277;
  unsigned int v278;
  uint64_t v279;
  unsigned int v280;
  BOOL v281;
  uint64_t v282;
  uint64_t **v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unsigned int v290;
  BOOL v291;
  uint64_t v292;
  uint64_t **v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t **v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t **v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unsigned int v305;
  BOOL v306;
  uint64_t v307;
  uint64_t **v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t **v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  unsigned int v318;
  uint64_t v319;
  uint64_t **v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t **v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t **v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t **v332;
  uint64_t *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t *v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t **v340;
  uint64_t *v341;
  uint64_t v342;
  uint64_t v343;
  unsigned int v344;
  uint64_t v345;
  uint64_t **v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t **v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  unint64_t *v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t **v365;
  uint64_t *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t **v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  unsigned int v373;
  BOOL v374;
  uint64_t v375;
  uint64_t **v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;
  unsigned int v382;
  uint64_t v383;
  uint64_t **v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  uint64_t **v392;
  uint64_t *v393;
  uint64_t v394;
  uint64_t v395;
  unsigned int v396;
  uint64_t v397;
  uint64_t **v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t *v404;
  unsigned int v405;
  uint64_t v406;
  uint64_t **v407;
  uint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  unsigned int v411;
  BOOL v412;
  uint64_t v413;
  uint64_t **v414;
  uint64_t *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t **v418;
  uint64_t *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t **v422;
  uint64_t *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t **v426;
  uint64_t *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t **v430;
  uint64_t *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t **v434;
  uint64_t *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t **v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  int v442;
  uint64_t v443;
  unsigned int v444;
  uint64_t v445;
  uint64_t **v446;
  uint64_t *v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t v450;
  unsigned int v451;
  uint64_t v452;
  uint64_t **v453;
  uint64_t *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t **v457;
  uint64_t *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t **v461;
  uint64_t *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t i;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unsigned int v471;
  BOOL v472;
  uint64_t v473;
  uint64_t **v474;
  uint64_t *v475;
  uint64_t v476;
  uint64_t v477;
  unsigned int v478;
  uint64_t v479;
  uint64_t **v480;
  uint64_t *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t **v484;
  uint64_t *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t *v488;
  uint64_t **v489;
  uint64_t *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t *v493;
  unsigned int v494;
  uint64_t v495;
  uint64_t **v496;
  uint64_t *v497;
  uint64_t v498;
  uint64_t v499;
  char *v500;
  uint64_t v501;
  uint64_t **v502;
  uint64_t *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t **v506;
  uint64_t *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t **v511;
  uint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  unint64_t v515;
  uint64_t v516;
  unsigned int v517;
  uint64_t v518;
  uint64_t **v519;
  uint64_t *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t **v530;
  uint64_t *v531;
  uint64_t v532;
  uint64_t v533;
  BOOL v534;
  uint64_t **v535;
  uint64_t *v536;
  uint64_t v537;
  uint64_t v538;
  BOOL v539;
  BOOL v540;
  BOOL v541;
  BOOL v542;
  BOOL v543;
  int *v544;
  BOOL v545;
  BOOL v546;
  BOOL v547;
  uint64_t **v548;
  uint64_t *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  int v559;
  uint64_t v560;

  if (!a2)
    return 1;
  v4 = a2 + 28;
  v5 = *(_DWORD *)(a2 + 28) & 0x7F;
  if ((*(_DWORD *)(a2 + 28) & 0x200) != 0)
  {
    if (v5 == 38)
      return sub_22E9ED0D4(a1, a2);
    return 1;
  }
  switch(v5)
  {
    case 0:
      result = sub_22E9EE3F4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v8 = *v7;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v10 = *(_QWORD *)v9 + 8 * *(unsigned int *)(v9 + 8);
      }
      else
      {
        v10 = 0;
      }
      while (2)
      {
        if (v8 == (uint64_t *)v10)
          return 1;
        if ((sub_22E9EE490((uint64_t)a1, *v8) & 1) != 0)
        {
          ++v8;
          continue;
        }
        break;
      }
      return 0;
    case 1:
      v248 = *(unint64_t **)(a2 + 96);
      if (v248)
      {
        result = sub_22E9ED998(a1, *v248, (uint64_t)(v248 + 1));
        if (!(_DWORD)result)
          return result;
      }
      v249 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
      result = sub_22E9DD810(a1, v249, 0);
      if (!(_DWORD)result)
        return result;
      v250 = *(unsigned int *)(a2 + 112);
      if (!(_DWORD)v250)
        goto LABEL_454;
      v251 = 16 * v250;
      v252 = (_QWORD *)(*(_QWORD *)(a2 + 104) + 8);
      while (1)
      {
        if (*v252)
        {
          result = sub_22E9DD810(a1, *v252, 0);
          if (!(_DWORD)result)
            break;
        }
        v252 += 2;
        v251 -= 16;
        if (!v251)
        {
LABEL_454:
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v254 = *v253;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v256 = *(_QWORD *)v255 + 8 * *(unsigned int *)(v255 + 8);
            }
            else
            {
              v256 = 0;
            }
            while (v254 != (uint64_t *)v256)
            {
              if ((sub_22E9EE490((uint64_t)a1, *v254) & 1) == 0)
                return 0;
              ++v254;
            }
          }
          return 1;
        }
      }
      return result;
    case 2:
      result = sub_22E9DD810(a1, *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v217 = *v216;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v219 = *(_QWORD *)v218 + 8 * *(unsigned int *)(v218 + 8);
      }
      else
      {
        v219 = 0;
      }
      while (2)
      {
        if (v217 == (uint64_t *)v219)
          return 1;
        if ((sub_22E9EE490((uint64_t)a1, *v217) & 1) != 0)
        {
          ++v217;
          continue;
        }
        break;
      }
      return 0;
    case 3:
      result = sub_22E9E924C(a1);
      if (!(_DWORD)result)
        return result;
      v231 = *(_QWORD *)(a2 + 48);
      if (!v231)
        goto LABEL_421;
      v232 = *(unsigned int *)(v231 + 8);
      if (!(_DWORD)v232)
        goto LABEL_421;
      v233 = v231 + 16;
      while ((sub_22E9EE10C((uint64_t)a1, v233) & 1) != 0)
      {
        v233 += 32;
        if (!--v232)
        {
LABEL_421:
          v234 = *(_DWORD *)v4 & 0x7F;
          v235 = v234 > 0x39 || ((1 << v234) & 0x3F0003E01011066) == 0;
          if (v235
            && (v234 - 70 <= 0xD ? (v541 = ((1 << (v234 - 70)) & 0x2803) == 0) : (v541 = 1), v541 && v234 - 19 > 4))
          {
            v236 = 0;
          }
          else
          {
            v236 = sub_22EFCAE04(a2);
          }
          result = sub_22E9EE3F4((uint64_t)a1, v236);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v238 = *v237;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v240 = *(_QWORD *)v239 + 8 * *(unsigned int *)(v239 + 8);
            }
            else
            {
              v240 = 0;
            }
            while (v238 != (uint64_t *)v240)
            {
              if ((sub_22E9EE490((uint64_t)a1, *v238) & 1) == 0)
                return 0;
              ++v238;
            }
          }
          return 1;
        }
      }
      return 0;
    case 4:
      result = sub_22E9EE3F4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v173 = *v172;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v175 = *(_QWORD *)v174 + 8 * *(unsigned int *)(v174 + 8);
      }
      else
      {
        v175 = 0;
      }
      while (2)
      {
        if (v173 == (uint64_t *)v175)
          return 1;
        if ((sub_22E9EE490((uint64_t)a1, *v173) & 1) != 0)
        {
          ++v173;
          continue;
        }
        break;
      }
      return 0;
    case 5:
      result = sub_22E9EE3F4((uint64_t)a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v298 = *v297;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v300 = *(_QWORD *)v299 + 8 * *(unsigned int *)(v299 + 8);
      }
      else
      {
        v300 = 0;
      }
      while (2)
      {
        if (v298 == (uint64_t *)v300)
          return 1;
        if ((sub_22E9EE490((uint64_t)a1, *v298) & 1) != 0)
        {
          ++v298;
          continue;
        }
        break;
      }
      return 0;
    case 6:
      result = sub_22E9EE3F4((uint64_t)a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v325 = *v324;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v327 = *(_QWORD *)v326 + 8 * *(unsigned int *)(v326 + 8);
      }
      else
      {
        v327 = 0;
      }
      while (2)
      {
        if (v325 == (uint64_t *)v327)
          return 1;
        if ((sub_22E9EE490((uint64_t)a1, *v325) & 1) != 0)
        {
          ++v325;
          continue;
        }
        break;
      }
      return 0;
    case 7:
      result = sub_22E9DD810(a1, *(_QWORD *)(a2 + 40), 0);
      if (!(_DWORD)result)
        return result;
      v241 = *(_DWORD *)v4 & 0x7F;
      v242 = v241 > 0x39 || ((1 << v241) & 0x3F0003E01011066) == 0;
      v243 = !v242 || v241 - 70 <= 0xD && ((1 << (v241 - 70)) & 0x2803) != 0 || v241 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E9EE3F4((uint64_t)a1, v243);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v245 = *v244;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v247 = *(_QWORD *)v246 + 8 * *(unsigned int *)(v246 + 8);
      }
      else
      {
        v247 = 0;
      }
      while (2)
      {
        if (v245 == (uint64_t *)v247)
          return 1;
        if ((sub_22E9EE490((uint64_t)a1, *v245) & 1) != 0)
        {
          ++v245;
          continue;
        }
        break;
      }
      return 0;
    case 8:
      v336 = *(_QWORD *)(a2 + 40);
      v337 = (unint64_t *)(v336 & 0xFFFFFFFFFFFFFFF8);
      if ((v336 & 4) != 0 && v337)
      {
        if ((sub_22E9ED998(a1, *v337, (uint64_t)(v337 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22E9E924C(a1);
        if (!(_DWORD)result)
          return result;
      }
      v478 = *(_DWORD *)v4 & 0x7F;
      if (v478 <= 0x39 && ((1 << v478) & 0x3F0003E01011066) != 0
        || v478 - 70 <= 0xD && ((1 << (v478 - 70)) & 0x2803) != 0
        || v478 - 19 <= 4)
      {
        v479 = sub_22EFCAE04(a2);
      }
      else
      {
        v479 = 0;
      }
      result = sub_22E9EE3F4((uint64_t)a1, v479);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v481 = *v480;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v483 = *(_QWORD *)v482 + 8 * *(unsigned int *)(v482 + 8);
      }
      else
      {
        v483 = 0;
      }
      while (2)
      {
        if (v481 == (uint64_t *)v483)
          return 1;
        if ((sub_22E9EE490((uint64_t)a1, *v481) & 1) != 0)
        {
          ++v481;
          continue;
        }
        break;
      }
      return 0;
    case 9:
      v204 = *(_QWORD *)(a2 + 48);
      v205 = (unint64_t *)(v204 & 0xFFFFFFFFFFFFFFF8);
      if ((v204 & 4) != 0 && v205)
      {
        if ((sub_22E9ED998(a1, *v205, (uint64_t)(v205 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22E9E924C(a1);
        if (!(_DWORD)result)
          return result;
      }
      v465 = *(unsigned int *)(a2 + 36);
      if (!(_DWORD)v465)
        goto LABEL_859;
      for (i = 0; i != v465; ++i)
      {
        v467 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * i);
        v468 = *(_DWORD *)(v467 + 12) & 0x1FFFFFFF;
        if ((_DWORD)v468)
        {
          v469 = v467 + 16;
          v470 = 8 * v468;
          while ((sub_22E9E924C(a1) & 1) != 0)
          {
            v469 += 8;
            v470 -= 8;
            if (!v470)
              goto LABEL_858;
          }
          return 0;
        }
LABEL_858:
        ;
      }
LABEL_859:
      v471 = *(_DWORD *)v4 & 0x7F;
      v472 = v471 > 0x39 || ((1 << v471) & 0x3F0003E01011066) == 0;
      if (v472 && (v471 - 70 <= 0xD ? (v547 = ((1 << (v471 - 70)) & 0x2803) == 0) : (v547 = 1), v547 && v471 - 19 > 4))
        v473 = 0;
      else
        v473 = sub_22EFCAE04(a2);
      result = sub_22E9EE3F4((uint64_t)a1, v473);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v475 = *v474;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v477 = *(_QWORD *)v476 + 8 * *(unsigned int *)(v476 + 8);
        }
        else
        {
          v477 = 0;
        }
        while (v475 != (uint64_t *)v477)
        {
          if ((sub_22E9EE490((uint64_t)a1, *v475) & 1) == 0)
            return 0;
          ++v475;
        }
      }
      return 1;
    case 10:
      result = sub_22E9EE3F4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v333 = *v332;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v335 = *(_QWORD *)v334 + 8 * *(unsigned int *)(v334 + 8);
      }
      else
      {
        v335 = 0;
      }
      while (2)
      {
        if (v333 == (uint64_t *)v335)
          return 1;
        if ((sub_22E9EE490((uint64_t)a1, *v333) & 1) != 0)
        {
          ++v333;
          continue;
        }
        break;
      }
      return 0;
    case 11:
      return (sub_22E9ED11C((uint64_t)a1, a2) & 1) != 0;
    case 12:
      result = sub_22E9EE3F4((uint64_t)a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v201 = *v200;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v203 = *(_QWORD *)v202 + 8 * *(unsigned int *)(v202 + 8);
      }
      else
      {
        v203 = 0;
      }
      while (2)
      {
        if (v201 == (uint64_t *)v203)
          return 1;
        if ((sub_22E9EE490((uint64_t)a1, *v201) & 1) != 0)
        {
          ++v201;
          continue;
        }
        break;
      }
      return 0;
    case 13:
      if (!sub_22E9ED404(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v316 = *(_DWORD *)(a2 + 24);
      v317 = *(_QWORD *)(a2 + 80);
      v558 = *(_QWORD *)(a2 + 40);
      v559 = v316;
      v560 = v317;
      if (!sub_22E9ED504((uint64_t)a1, &v558))
        return 0;
      if ((v318 = *(_DWORD *)v4 & 0x7F, v318 <= 0x39) && ((1 << v318) & 0x3F0003E01011066) != 0
        || v318 - 70 <= 0xD && ((1 << (v318 - 70)) & 0x2803) != 0
        || v318 - 19 <= 4)
      {
        v319 = sub_22EFCAE04(a2);
      }
      else
      {
        v319 = 0;
      }
      if (!sub_22E9EE3F4((uint64_t)a1, v319))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v321 = *v320;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v323 = *(_QWORD *)v322 + 8 * *(unsigned int *)(v322 + 8);
      }
      else
      {
        v323 = 0;
      }
      while (2)
      {
        if (v321 == (uint64_t *)v323)
          return 1;
        if ((sub_22E9EE490((uint64_t)a1, *v321) & 1) != 0)
        {
          ++v321;
          continue;
        }
        break;
      }
      return 0;
    case 14:
      result = sub_22E9EE3F4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v141 = *v140;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v143 = *(_QWORD *)v142 + 8 * *(unsigned int *)(v142 + 8);
      }
      else
      {
        v143 = 0;
      }
      while (2)
      {
        if (v141 == (uint64_t *)v143)
          return 1;
        if ((sub_22E9EE490((uint64_t)a1, *v141) & 1) != 0)
        {
          ++v141;
          continue;
        }
        break;
      }
      return 0;
    case 15:
      result = sub_22E9EE3F4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v221 = *v220;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v223 = *(_QWORD *)v222 + 8 * *(unsigned int *)(v222 + 8);
      }
      else
      {
        v223 = 0;
      }
      while (2)
      {
        if (v221 == (uint64_t *)v223)
          return 1;
        if ((sub_22E9EE490((uint64_t)a1, *v221) & 1) != 0)
        {
          ++v221;
          continue;
        }
        break;
      }
      return 0;
    case 16:
      result = sub_22E9EE3F4((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v123 = *v122;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v125 = *(_QWORD *)v124 + 8 * *(unsigned int *)(v124 + 8);
      }
      else
      {
        v125 = 0;
      }
      while (2)
      {
        if (v123 == (uint64_t *)v125)
          return 1;
        if ((sub_22E9EE490((uint64_t)a1, *v123) & 1) != 0)
        {
          ++v123;
          continue;
        }
        break;
      }
      return 0;
    case 17:
      result = sub_22E9ED404(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v264 = *v263;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v266 = *(_QWORD *)v265 + 8 * *(unsigned int *)(v265 + 8);
      }
      else
      {
        v266 = 0;
      }
      while (2)
      {
        if (v264 == (uint64_t *)v266)
          return 1;
        if ((sub_22E9EE490((uint64_t)a1, *v264) & 1) != 0)
        {
          ++v264;
          continue;
        }
        break;
      }
      return 0;
    case 18:
      result = sub_22E9EE3F4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v329 = *v328;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v331 = *(_QWORD *)v330 + 8 * *(unsigned int *)(v330 + 8);
      }
      else
      {
        v331 = 0;
      }
      while (2)
      {
        if (v329 == (uint64_t *)v331)
          return 1;
        if ((sub_22E9EE490((uint64_t)a1, *v329) & 1) != 0)
        {
          ++v329;
          continue;
        }
        break;
      }
      return 0;
    case 19:
      v361 = *(_QWORD *)(a2 + 112);
      if (!v361)
        goto LABEL_650;
      v362 = *(unsigned int *)(v361 + 8);
      if (!(_DWORD)v362)
        goto LABEL_650;
      v363 = (uint64_t *)(v361 + 16);
      v364 = 8 * v362;
      while ((sub_22E9ED234(a1, *v363) & 1) != 0)
      {
        ++v363;
        v364 -= 8;
        if (!v364)
        {
LABEL_650:
          result = sub_22E9EE3F4((uint64_t)a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v366 = *v365;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v368 = *(_QWORD *)v367 + 8 * *(unsigned int *)(v367 + 8);
            }
            else
            {
              v368 = 0;
            }
            while (v366 != (uint64_t *)v368)
            {
              if ((sub_22E9EE490((uint64_t)a1, *v366) & 1) == 0)
                return 0;
              ++v366;
            }
          }
          return 1;
        }
      }
      return 0;
    case 20:
      result = sub_22E9EE3F4((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v284 = *v283;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v286 = *(_QWORD *)v285 + 8 * *(unsigned int *)(v285 + 8);
      }
      else
      {
        v286 = 0;
      }
      while (2)
      {
        if (v284 == (uint64_t *)v286)
          return 1;
        if ((sub_22E9EE490((uint64_t)a1, *v284) & 1) != 0)
        {
          ++v284;
          continue;
        }
        break;
      }
      return 0;
    case 21:
      result = sub_22E9EE3F4((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v313 = *v312;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v315 = *(_QWORD *)v314 + 8 * *(unsigned int *)(v314 + 8);
      }
      else
      {
        v315 = 0;
      }
      while (2)
      {
        if (v313 == (uint64_t *)v315)
          return 1;
        if ((sub_22E9EE490((uint64_t)a1, *v313) & 1) != 0)
        {
          ++v313;
          continue;
        }
        break;
      }
      return 0;
    case 22:
      v354 = *(_QWORD *)(a2 + 112);
      if (!v354)
        goto LABEL_637;
      v355 = *(unsigned int *)(v354 + 8);
      if (!(_DWORD)v355)
        goto LABEL_637;
      v356 = (uint64_t *)(v354 + 16);
      v357 = 8 * v355;
      while ((sub_22E9ED234(a1, *v356) & 1) != 0)
      {
        ++v356;
        v357 -= 8;
        if (!v357)
        {
LABEL_637:
          v358 = (unint64_t *)sub_22F259044(a2);
          if (v358)
          {
            result = sub_22E9ED998(a1, *v358, (uint64_t)(v358 + 1));
            if (!(_DWORD)result)
              return result;
          }
          v359 = *(_QWORD *)(a2 + 120);
          if (!v359)
          {
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
            v359 = *(_QWORD *)(a2 + 120);
          }
          if (v359 < 8)
            v360 = 0;
          else
            v360 = *(_QWORD *)(v359 & 0xFFFFFFFFFFFFFFF8);
          if (v360 == a2)
          {
            v552 = sub_22F2590A8(a2);
            v553 = sub_22F25910C(a2);
            v554 = sub_22F259178(a2);
            v555 = sub_22F2591DC(a2);
            if (v552 != v553 && v554 != v555)
            {
              v556 = v554 + 4;
              v557 = v552 + 8;
              do
              {
                if (v557 == v553)
                  break;
                v557 += 8;
                v31 = v556 == v555;
                v556 += 4;
              }
              while (!v31);
            }
          }
          result = sub_22E9EE3F4((uint64_t)a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v531 = *v530;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v533 = *(_QWORD *)v532 + 8 * *(unsigned int *)(v532 + 8);
            }
            else
            {
              v533 = 0;
            }
            while (v531 != (uint64_t *)v533)
            {
              if ((sub_22E9EE490((uint64_t)a1, *v531) & 1) == 0)
                return 0;
              ++v531;
            }
          }
          return 1;
        }
      }
      return 0;
    case 23:
      v388 = *(_QWORD *)(a2 + 104);
      if (!v388)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
        v388 = *(_QWORD *)(a2 + 104);
      }
      if (v388 < 8)
        v389 = 0;
      else
        v389 = *(_QWORD *)(v388 & 0xFFFFFFFFFFFFFFF8);
      if (v389 == a2)
      {
        v523 = sub_22F259248(a2);
        v525 = v524;
        v526 = sub_22F2592CC(a2);
        if (v523 != v525 && v526 != v527)
        {
          v528 = v526 + 4;
          v529 = v523 + 8;
          do
          {
            if (v529 == v525)
              break;
            v529 += 8;
            v31 = v528 == v527;
            v528 += 4;
          }
          while (!v31);
        }
      }
      result = sub_22E9EE3F4((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v485 = *v484;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v487 = *(_QWORD *)v486 + 8 * *(unsigned int *)(v486 + 8);
      }
      else
      {
        v487 = 0;
      }
      while (2)
      {
        if (v485 == (uint64_t *)v487)
          return 1;
        if ((sub_22E9EE490((uint64_t)a1, *v485) & 1) != 0)
        {
          ++v485;
          continue;
        }
        break;
      }
      return 0;
    case 24:
      v207 = *(unint64_t **)(a2 + 88);
      if (v207)
      {
        result = sub_22E9ED998(a1, *v207, (uint64_t)(v207 + 1));
        if (!(_DWORD)result)
          return result;
      }
      v208 = *(unsigned int *)(a2 + 104);
      if (!(_DWORD)v208)
        goto LABEL_379;
      v209 = *(_QWORD *)(a2 + 96);
      v210 = 8 * v208;
      while ((sub_22E9E924C(a1) & 1) != 0)
      {
        v209 += 8;
        v210 -= 8;
        if (!v210)
        {
LABEL_379:
          if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 72))(a2))
          {
            v211 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
            result = sub_22E9DD810(a1, v211, 0);
            if (!(_DWORD)result)
              return result;
          }
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v213 = *v212;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v215 = *(_QWORD *)v214 + 8 * *(unsigned int *)(v214 + 8);
            }
            else
            {
              v215 = 0;
            }
            while (v213 != (uint64_t *)v215)
            {
              if ((sub_22E9EE490((uint64_t)a1, *v213) & 1) == 0)
                return 0;
              ++v213;
            }
          }
          return 1;
        }
      }
      return 0;
    case 25:
      v206 = *(unint64_t **)(a2 + 64);
      if (v206)
      {
        if ((sub_22E9ED998(a1, *v206, (uint64_t)(v206 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22E9DD360(a1, *(_QWORD *)(a2 + 56));
        if (!(_DWORD)result)
          return result;
      }
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v507 = *v506;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v509 = *(_QWORD *)v508 + 8 * *(unsigned int *)(v508 + 8);
      }
      else
      {
        v509 = 0;
      }
      while (2)
      {
        if (v507 == (uint64_t *)v509)
          return 1;
        if ((sub_22E9EE490((uint64_t)a1, *v507) & 1) != 0)
        {
          ++v507;
          continue;
        }
        break;
      }
      return 0;
    case 26:
      result = sub_22E9EEA2C((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      v411 = *(_DWORD *)v4 & 0x7F;
      v412 = v411 > 0x39 || ((1 << v411) & 0x3F0003E01011066) == 0;
      v413 = !v412 || v411 - 70 <= 0xD && ((1 << (v411 - 70)) & 0x2803) != 0 || v411 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E9EE3F4((uint64_t)a1, v413);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v415 = *v414;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v417 = *(_QWORD *)v416 + 8 * *(unsigned int *)(v416 + 8);
      }
      else
      {
        v417 = 0;
      }
      while (2)
      {
        if (v415 == (uint64_t *)v417)
          return 1;
        if ((sub_22E9EE490((uint64_t)a1, *v415) & 1) != 0)
        {
          ++v415;
          continue;
        }
        break;
      }
      return 0;
    case 27:
      result = sub_22E9EEA2C((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E9DD810(a1, *(_QWORD *)(a2 + 64), 0);
      if (!(_DWORD)result)
        return result;
      if ((v112 = *(_DWORD *)v4 & 0x7F, v112 <= 0x39) && ((1 << v112) & 0x3F0003E01011066) != 0
        || v112 - 70 <= 0xD && ((1 << (v112 - 70)) & 0x2803) != 0
        || v112 - 19 <= 4)
      {
        v113 = sub_22EFCAE04(a2);
      }
      else
      {
        v113 = 0;
      }
      result = sub_22E9EE3F4((uint64_t)a1, v113);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v115 = *v114;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v117 = *(_QWORD *)v116 + 8 * *(unsigned int *)(v116 + 8);
      }
      else
      {
        v117 = 0;
      }
      while (2)
      {
        if (v115 == (uint64_t *)v117)
          return 1;
        if ((sub_22E9EE490((uint64_t)a1, *v115) & 1) != 0)
        {
          ++v115;
          continue;
        }
        break;
      }
      return 0;
    case 28:
      result = sub_22E9EEA2C((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E9E924C(a1);
      if (!(_DWORD)result)
        return result;
      if ((v390 = *(_DWORD *)v4 & 0x7F, v390 <= 0x39) && ((1 << v390) & 0x3F0003E01011066) != 0
        || v390 - 70 <= 0xD && ((1 << (v390 - 70)) & 0x2803) != 0
        || v390 - 19 <= 4)
      {
        v391 = sub_22EFCAE04(a2);
      }
      else
      {
        v391 = 0;
      }
      result = sub_22E9EE3F4((uint64_t)a1, v391);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v393 = *v392;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v395 = *(_QWORD *)v394 + 8 * *(unsigned int *)(v394 + 8);
      }
      else
      {
        v395 = 0;
      }
      while (2)
      {
        if (v393 == (uint64_t *)v395)
          return 1;
        if ((sub_22E9EE490((uint64_t)a1, *v393) & 1) != 0)
        {
          ++v393;
          continue;
        }
        break;
      }
      return 0;
    case 29:
      result = sub_22E9EEA2C((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E9E924C(a1);
      if (!(_DWORD)result)
        return result;
      if ((v396 = *(_DWORD *)v4 & 0x7F, v396 <= 0x39) && ((1 << v396) & 0x3F0003E01011066) != 0
        || v396 - 70 <= 0xD && ((1 << (v396 - 70)) & 0x2803) != 0
        || v396 - 19 <= 4)
      {
        v397 = sub_22EFCAE04(a2);
      }
      else
      {
        v397 = 0;
      }
      result = sub_22E9EE3F4((uint64_t)a1, v397);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v399 = *v398;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v401 = *(_QWORD *)v400 + 8 * *(unsigned int *)(v400 + 8);
      }
      else
      {
        v401 = 0;
      }
      while (2)
      {
        if (v399 == (uint64_t *)v401)
          return 1;
        if ((sub_22E9EE490((uint64_t)a1, *v399) & 1) != 0)
        {
          ++v399;
          continue;
        }
        break;
      }
      return 0;
    case 30:
      result = sub_22E9E924C(a1);
      if (!(_DWORD)result)
        return result;
      result = sub_22E9EEA2C((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v338 = *(_DWORD *)v4 & 0x7F, v338 <= 0x39) && ((1 << v338) & 0x3F0003E01011066) != 0
        || v338 - 70 <= 0xD && ((1 << (v338 - 70)) & 0x2803) != 0
        || v338 - 19 <= 4)
      {
        v339 = sub_22EFCAE04(a2);
      }
      else
      {
        v339 = 0;
      }
      result = sub_22E9EE3F4((uint64_t)a1, v339);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v341 = *v340;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v343 = *(_QWORD *)v342 + 8 * *(unsigned int *)(v342 + 8);
      }
      else
      {
        v343 = 0;
      }
      while (2)
      {
        if (v341 == (uint64_t *)v343)
          return 1;
        if ((sub_22E9EE490((uint64_t)a1, *v341) & 1) != 0)
        {
          ++v341;
          continue;
        }
        break;
      }
      return 0;
    case 31:
      result = sub_22E9EEA2C((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E9E924C(a1);
      if (!(_DWORD)result)
        return result;
      if ((v257 = *(_DWORD *)v4 & 0x7F, v257 <= 0x39) && ((1 << v257) & 0x3F0003E01011066) != 0
        || v257 - 70 <= 0xD && ((1 << (v257 - 70)) & 0x2803) != 0
        || v257 - 19 <= 4)
      {
        v258 = sub_22EFCAE04(a2);
      }
      else
      {
        v258 = 0;
      }
      result = sub_22E9EE3F4((uint64_t)a1, v258);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v260 = *v259;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v262 = *(_QWORD *)v261 + 8 * *(unsigned int *)(v261 + 8);
      }
      else
      {
        v262 = 0;
      }
      while (2)
      {
        if (v260 == (uint64_t *)v262)
          return 1;
        if ((sub_22E9EE490((uint64_t)a1, *v260) & 1) != 0)
        {
          ++v260;
          continue;
        }
        break;
      }
      return 0;
    case 32:
      result = sub_22E9E924C(a1);
      if (!(_DWORD)result)
        return result;
      if (*(_QWORD *)(a2 + 72) >= 8uLL && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v544 = sub_22F259350(a2);
        result = sub_22E9EE10C((uint64_t)a1, (uint64_t)v544);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22E9EEA2C((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v344 = *(_DWORD *)v4 & 0x7F, v344 <= 0x39) && ((1 << v344) & 0x3F0003E01011066) != 0
        || v344 - 70 <= 0xD && ((1 << (v344 - 70)) & 0x2803) != 0
        || v344 - 19 <= 4)
      {
        v345 = sub_22EFCAE04(a2);
      }
      else
      {
        v345 = 0;
      }
      result = sub_22E9EE3F4((uint64_t)a1, v345);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v347 = *v346;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v349 = *(_QWORD *)v348 + 8 * *(unsigned int *)(v348 + 8);
      }
      else
      {
        v349 = 0;
      }
      if (v347 == (uint64_t *)v349)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v347) & 1) != 0)
      {
        if (++v347 == (uint64_t *)v349)
          return 1;
      }
      return 0;
    case 33:
      v144 = *(_QWORD *)(a2 + 120);
      if ((v144 & 4) == 0)
        goto LABEL_252;
      v145 = 0;
      while (1)
      {
        v146 = v144 & 0xFFFFFFFFFFFFFFF8;
        if (v145 >= *(unsigned int *)(v146 + 16))
          break;
        sub_22E9EEA2C((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v146 + 24) + 8 * v145++));
        v144 = *(_QWORD *)(a2 + 120);
        if ((v144 & 4) == 0)
        {
LABEL_252:
          v147 = 0;
          v148 = 0;
          goto LABEL_946;
        }
      }
      v147 = *(_QWORD *)v146;
      v148 = *(_QWORD *)(v146 + 8);
LABEL_946:
      result = sub_22E9ED404(a1, v147, v148);
      if (!(_DWORD)result)
        return result;
      v510 = *(_QWORD *)(a2 + 128);
      if ((v510 & 4) != 0 && (v510 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        result = sub_22E9ED998(a1, *(_QWORD *)(v510 & 0xFFFFFFFFFFFFFFF8), (v510 & 0xFFFFFFFFFFFFFFF8) + 8);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22E9EE3F4((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v512 = *v511;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v514 = *(_QWORD *)v513 + 8 * *(unsigned int *)(v513 + 8);
      }
      else
      {
        v514 = 0;
      }
      if (v512 == (uint64_t *)v514)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v512) & 1) != 0)
      {
        if (++v512 == (uint64_t *)v514)
          return 1;
      }
      return 0;
    case 34:
      result = sub_22E9EEACC(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22E9EE3F4((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v119 = *v118;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v121 = *(_QWORD *)v120 + 8 * *(unsigned int *)(v120 + 8);
      }
      else
      {
        v121 = 0;
      }
      if (v119 == (uint64_t *)v121)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v119) & 1) != 0)
      {
        if (++v119 == (uint64_t *)v121)
          return 1;
      }
      return 0;
    case 35:
      result = sub_22E9EEB40(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22E9EE3F4((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v101 = *v100;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v103 = *(_QWORD *)v102 + 8 * *(unsigned int *)(v102 + 8);
      }
      else
      {
        v103 = 0;
      }
      if (v101 == (uint64_t *)v103)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v101) & 1) != 0)
      {
        if (++v101 == (uint64_t *)v103)
          return 1;
      }
      return 0;
    case 36:
      v104 = *(unint64_t ***)(a2 + 160);
      if (v104)
      {
        if (*v104)
        {
          result = sub_22E9ED998(a1, **v104, (uint64_t)(*v104 + 1));
          if (!(_DWORD)result)
            return result;
        }
      }
      v105 = *(_QWORD *)(a2 + 120);
      if ((v105 & 4) != 0)
      {
        v488 = (uint64_t *)(v105 & 0xFFFFFFFFFFFFFFF8);
        v106 = *v488;
        v107 = v488[1];
      }
      else
      {
        v106 = 0;
        v107 = 0;
      }
      result = sub_22E9ED404(a1, v106, v107);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFD5760(a2) != 2)
        return 1;
      result = sub_22E9EE3F4((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v490 = *v489;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v492 = *(_QWORD *)v491 + 8 * *(unsigned int *)(v491 + 8);
      }
      else
      {
        v492 = 0;
      }
      if (v490 == (uint64_t *)v492)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v490) & 1) != 0)
      {
        if (++v490 == (uint64_t *)v492)
          return 1;
      }
      return 0;
    case 37:
      v63 = *(_QWORD *)(a2 + 184);
      if (!v63)
        goto LABEL_104;
      v64 = *(_DWORD *)(v63 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v64)
        goto LABEL_104;
      v65 = v63 + 16;
      v66 = 8 * v64;
      while ((sub_22E9E924C(a1) & 1) != 0)
      {
        v65 += 8;
        v66 -= 8;
        if (!v66)
        {
LABEL_104:
          v67 = *(_QWORD *)(a2 + 192);
          v68 = *(unsigned int *)(v67 + 8);
          if ((_DWORD)v68)
          {
            v69 = v67 + 16;
            while ((sub_22E9EE10C((uint64_t)a1, v69) & 1) != 0)
            {
              v69 += 32;
              if (!--v68)
                goto LABEL_108;
            }
            return 0;
          }
LABEL_108:
          result = sub_22E9EEB40(a1, a2);
          if (!(_DWORD)result)
            return result;
          result = sub_22E9EE3F4((uint64_t)a1, a2 + 64);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v71 = *v70;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v73 = *(_QWORD *)v72 + 8 * *(unsigned int *)(v72 + 8);
            }
            else
            {
              v73 = 0;
            }
            if (v71 != (uint64_t *)v73)
            {
              while ((sub_22E9EE490((uint64_t)a1, *v71) & 1) != 0)
              {
                if (++v71 == (uint64_t *)v73)
                  return 1;
              }
              return 0;
            }
          }
          return 1;
        }
      }
      return 0;
    case 38:
      v402 = *(_QWORD *)(a2 + 48);
      if (v402)
      {
        result = sub_22E9DD360(a1, v402 & 0xFFFFFFFFFFFFFFF0);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22E9ED0D4(a1, a2);
      if (!(_DWORD)result)
        return result;
      v403 = *(_QWORD *)(a2 + 72);
      if (v403 >= 8 && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v404 = (unint64_t *)(v403 & 0xFFFFFFFFFFFFFFF8);
        if ((*(_QWORD *)(a2 + 72) & 6) == 4 && v404)
          v404 = (unint64_t *)v404[1];
        result = sub_22E9ED998(a1, *v404, (uint64_t)(v404 + 1));
        if (!(_DWORD)result)
          return result;
      }
      if ((v405 = *(_DWORD *)v4 & 0x7F, v405 <= 0x39) && ((1 << v405) & 0x3F0003E01011066) != 0
        || v405 - 70 <= 0xD && ((1 << (v405 - 70)) & 0x2803) != 0
        || v405 - 19 <= 4)
      {
        v406 = sub_22EFCAE04(a2);
      }
      else
      {
        v406 = 0;
      }
      result = sub_22E9EE3F4((uint64_t)a1, v406);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v408 = *v407;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v410 = *(_QWORD *)v409 + 8 * *(unsigned int *)(v409 + 8);
      }
      else
      {
        v410 = 0;
      }
      if (v408 == (uint64_t *)v410)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v408) & 1) != 0)
      {
        if (++v408 == (uint64_t *)v410)
          return 1;
      }
      return 0;
    case 39:
      return (sub_22E9ED234(a1, a2) & 1) != 0;
    case 40:
      v176 = *(_QWORD *)(a2 + 80);
      v177 = (unint64_t *)(v176 & 0xFFFFFFFFFFFFFFF8);
      if ((v176 & 4) != 0)
        v177 = (unint64_t *)*v177;
      result = sub_22E9ED998(a1, *v177, (uint64_t)(v177 + 1));
      if (!(_DWORD)result)
        return result;
      if ((v178 = *(_DWORD *)v4 & 0x7F, v178 <= 0x39) && ((1 << v178) & 0x3F0003E01011066) != 0
        || v178 - 70 <= 0xD && ((1 << (v178 - 70)) & 0x2803) != 0
        || v178 - 19 <= 4)
      {
        v179 = sub_22EFCAE04(a2);
      }
      else
      {
        v179 = 0;
      }
      result = sub_22E9EE3F4((uint64_t)a1, v179);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v181 = *v180;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v183 = *(_QWORD *)v182 + 8 * *(unsigned int *)(v182 + 8);
      }
      else
      {
        v183 = 0;
      }
      if (v181 == (uint64_t *)v183)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v181) & 1) != 0)
      {
        if (++v181 == (uint64_t *)v183)
          return 1;
      }
      return 0;
    case 41:
      v267 = *(_QWORD *)(a2 + 80);
      v268 = (unint64_t *)(v267 & 0xFFFFFFFFFFFFFFF8);
      if ((v267 & 4) != 0)
        v268 = (unint64_t *)*v268;
      result = sub_22E9ED998(a1, *v268, (uint64_t)(v268 + 1));
      if (!(_DWORD)result)
        return result;
      if ((v269 = *(_DWORD *)v4 & 0x7F, v269 <= 0x39) && ((1 << v269) & 0x3F0003E01011066) != 0
        || v269 - 70 <= 0xD && ((1 << (v269 - 70)) & 0x2803) != 0
        || v269 - 19 <= 4)
      {
        v270 = sub_22EFCAE04(a2);
      }
      else
      {
        v270 = 0;
      }
      result = sub_22E9EE3F4((uint64_t)a1, v270);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v272 = *v271;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v274 = *(_QWORD *)v273 + 8 * *(unsigned int *)(v273 + 8);
      }
      else
      {
        v274 = 0;
      }
      if (v272 == (uint64_t *)v274)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v272) & 1) != 0)
      {
        if (++v272 == (uint64_t *)v274)
          return 1;
      }
      return 0;
    case 42:
      result = sub_22E9ED404(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      v373 = *(_DWORD *)v4 & 0x7F;
      v374 = v373 > 0x39 || ((1 << v373) & 0x3F0003E01011066) == 0;
      v375 = !v374 || v373 - 70 <= 0xD && ((1 << (v373 - 70)) & 0x2803) != 0 || v373 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E9EE3F4((uint64_t)a1, v375);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v377 = *v376;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v379 = *(_QWORD *)v378 + 8 * *(unsigned int *)(v378 + 8);
      }
      else
      {
        v379 = 0;
      }
      if (v377 == (uint64_t *)v379)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v377) & 1) != 0)
      {
        if (++v377 == (uint64_t *)v379)
          return 1;
      }
      return 0;
    case 43:
      result = sub_22E9EE3F4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v41 = *v40;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v43 = *(_QWORD *)v42 + 8 * *(unsigned int *)(v42 + 8);
      }
      else
      {
        v43 = 0;
      }
      if (v41 == (uint64_t *)v43)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v41) & 1) != 0)
      {
        if (++v41 == (uint64_t *)v43)
          return 1;
      }
      return 0;
    case 44:
      result = sub_22E9ED404(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
      if (!(_DWORD)result)
        return result;
      v133 = *(_DWORD *)v4 & 0x7F;
      v134 = v133 > 0x39 || ((1 << v133) & 0x3F0003E01011066) == 0;
      v135 = !v134 || v133 - 70 <= 0xD && ((1 << (v133 - 70)) & 0x2803) != 0 || v133 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E9EE3F4((uint64_t)a1, v135);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v137 = *v136;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v139 = *(_QWORD *)v138 + 8 * *(unsigned int *)(v138 + 8);
      }
      else
      {
        v139 = 0;
      }
      if (v137 == (uint64_t *)v139)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v137) & 1) != 0)
      {
        if (++v137 == (uint64_t *)v139)
          return 1;
      }
      return 0;
    case 45:
      result = sub_22E9EE3F4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v351 = *v350;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v353 = *(_QWORD *)v352 + 8 * *(unsigned int *)(v352 + 8);
      }
      else
      {
        v353 = 0;
      }
      if (v351 == (uint64_t *)v353)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v351) & 1) != 0)
      {
        if (++v351 == (uint64_t *)v353)
          return 1;
      }
      return 0;
    case 46:
      result = sub_22E9EE3F4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v435 = *v434;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v437 = *(_QWORD *)v436 + 8 * *(unsigned int *)(v436 + 8);
      }
      else
      {
        v437 = 0;
      }
      if (v435 == (uint64_t *)v437)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v435) & 1) != 0)
      {
        if (++v435 == (uint64_t *)v437)
          return 1;
      }
      return 0;
    case 47:
      result = sub_22E9EE3F4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v79 = *v78;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v81 = *(_QWORD *)v80 + 8 * *(unsigned int *)(v80 + 8);
      }
      else
      {
        v81 = 0;
      }
      if (v79 == (uint64_t *)v81)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v79) & 1) != 0)
      {
        if (++v79 == (uint64_t *)v81)
          return 1;
      }
      return 0;
    case 48:
      result = sub_22E9EE3F4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v150 = *v149;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v152 = *(_QWORD *)v151 + 8 * *(unsigned int *)(v151 + 8);
      }
      else
      {
        v152 = 0;
      }
      if (v150 == (uint64_t *)v152)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v150) & 1) != 0)
      {
        if (++v150 == (uint64_t *)v152)
          return 1;
      }
      return 0;
    case 49:
      result = sub_22E9EEBB8(a1, a2);
      if (!(_DWORD)result)
        return result;
      v171 = *(_QWORD *)(a2 + 72);
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v515 = v171 & 0xFFFFFFFFFFFFFFFCLL;
        v516 = *(_QWORD *)(a2 + 72) & 3;
        if ((_DWORD)v516 && (_DWORD)v516 != 3)
          v515 = *(_QWORD *)(v515 + 8);
        if ((sub_22E9DD810(a1, v515, 0) & 1) == 0)
          return 0;
      }
      else if ((v171 & 3) != 0 && (v171 & 3) != 3)
      {
        result = sub_22E9DD810(a1, v171 & 0xFFFFFFFFFFFFFFFCLL, 0);
        if (!(_DWORD)result)
          return result;
      }
      v517 = *(_DWORD *)v4 & 0x7F;
      if (v517 <= 0x39 && ((1 << v517) & 0x3F0003E01011066) != 0
        || v517 - 70 <= 0xD && ((1 << (v517 - 70)) & 0x2803) != 0
        || v517 - 19 <= 4)
      {
        v518 = sub_22EFCAE04(a2);
      }
      else
      {
        v518 = 0;
      }
      result = sub_22E9EE3F4((uint64_t)a1, v518);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v520 = *v519;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v522 = *(_QWORD *)v521 + 8 * *(unsigned int *)(v521 + 8);
        }
        else
        {
          v522 = 0;
        }
        for (; v520 != (uint64_t *)v522; ++v520)
        {
          if ((sub_22E9EE490((uint64_t)a1, *v520) & 1) == 0)
            return 0;
        }
      }
      return 1;
    case 50:
      result = sub_22E9EEBB8(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v33 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v33 = *(_QWORD *)(v33 + 8);
        result = sub_22E9DD810(a1, v33, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v34 = *(_DWORD *)v4 & 0x7F, v34 <= 0x39) && ((1 << v34) & 0x3F0003E01011066) != 0
        || (v34 - 70 <= 0xD ? (v542 = ((1 << (v34 - 70)) & 0x2803) == 0) : (v542 = 1), !v542 || v34 - 19 <= 4))
      {
        v35 = sub_22EFCAE04(a2);
      }
      else
      {
        v35 = 0;
      }
      result = sub_22E9EE3F4((uint64_t)a1, v35);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v37 = *v36;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v39 = *(_QWORD *)v38 + 8 * *(unsigned int *)(v38 + 8);
      }
      else
      {
        v39 = 0;
      }
      if (v37 == (uint64_t *)v39)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v37) & 1) != 0)
      {
        if (++v37 == (uint64_t *)v39)
          return 1;
      }
      return 0;
    case 51:
      result = sub_22E9EEBB8(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v450 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v450 = *(_QWORD *)(v450 + 8);
        result = sub_22E9DD810(a1, v450, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v451 = *(_DWORD *)v4 & 0x7F, v451 <= 0x39) && ((1 << v451) & 0x3F0003E01011066) != 0
        || (v451 - 70 <= 0xD ? (v543 = ((1 << (v451 - 70)) & 0x2803) == 0) : (v543 = 1), !v543 || v451 - 19 <= 4))
      {
        v452 = sub_22EFCAE04(a2);
      }
      else
      {
        v452 = 0;
      }
      result = sub_22E9EE3F4((uint64_t)a1, v452);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v454 = *v453;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v456 = *(_QWORD *)v455 + 8 * *(unsigned int *)(v455 + 8);
      }
      else
      {
        v456 = 0;
      }
      if (v454 == (uint64_t *)v456)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v454) & 1) != 0)
      {
        if (++v454 == (uint64_t *)v456)
          return 1;
      }
      return 0;
    case 52:
      result = sub_22E9EEC84(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v431 = *v430;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v433 = *(_QWORD *)v432 + 8 * *(unsigned int *)(v432 + 8);
      }
      else
      {
        v433 = 0;
      }
      if (v431 == (uint64_t *)v433)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v431) & 1) != 0)
      {
        if (++v431 == (uint64_t *)v433)
          return 1;
      }
      return 0;
    case 53:
      result = sub_22E9EEC84(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v75 = *v74;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v77 = *(_QWORD *)v76 + 8 * *(unsigned int *)(v76 + 8);
      }
      else
      {
        v77 = 0;
      }
      if (v75 == (uint64_t *)v77)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v75) & 1) != 0)
      {
        if (++v75 == (uint64_t *)v77)
          return 1;
      }
      return 0;
    case 54:
      result = sub_22E9EEC84(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v419 = *v418;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v421 = *(_QWORD *)v420 + 8 * *(unsigned int *)(v420 + 8);
      }
      else
      {
        v421 = 0;
      }
      if (v419 == (uint64_t *)v421)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v419) & 1) != 0)
      {
        if (++v419 == (uint64_t *)v421)
          return 1;
      }
      return 0;
    case 55:
      result = sub_22E9EEC84(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v427 = *v426;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v429 = *(_QWORD *)v428 + 8 * *(unsigned int *)(v428 + 8);
      }
      else
      {
        v429 = 0;
      }
      if (v427 == (uint64_t *)v429)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v427) & 1) != 0)
      {
        if (++v427 == (uint64_t *)v429)
          return 1;
      }
      return 0;
    case 56:
      result = sub_22E9EEC84(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v83 = *v82;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v85 = *(_QWORD *)v84 + 8 * *(unsigned int *)(v84 + 8);
      }
      else
      {
        v85 = 0;
      }
      if (v83 == (uint64_t *)v85)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v83) & 1) != 0)
      {
        if (++v83 == (uint64_t *)v85)
          return 1;
      }
      return 0;
    case 57:
      result = sub_22E9EEC84(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v370 = *v369;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v372 = *(_QWORD *)v371 + 8 * *(unsigned int *)(v371 + 8);
      }
      else
      {
        v372 = 0;
      }
      if (v370 == (uint64_t *)v372)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v370) & 1) != 0)
      {
        if (++v370 == (uint64_t *)v372)
          return 1;
      }
      return 0;
    case 58:
      result = sub_22E9EEBB8(a1, a2);
      if (!(_DWORD)result)
        return result;
      v153 = *(_DWORD *)v4 & 0x7F;
      v154 = v153 > 0x39 || ((1 << v153) & 0x3F0003E01011066) == 0;
      v155 = !v154 || v153 - 70 <= 0xD && ((1 << (v153 - 70)) & 0x2803) != 0 || v153 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E9EE3F4((uint64_t)a1, v155);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v157 = *v156;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v159 = *(_QWORD *)v158 + 8 * *(unsigned int *)(v158 + 8);
      }
      else
      {
        v159 = 0;
      }
      if (v157 == (uint64_t *)v159)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v157) & 1) != 0)
      {
        if (++v157 == (uint64_t *)v159)
          return 1;
      }
      return 0;
    case 59:
      result = sub_22E9EEBB8(a1, a2);
      if (!(_DWORD)result)
        return result;
      v380 = *(_QWORD *)(a2 + 72);
      if (v380 >= 4 && (*(_QWORD *)(a2 + 72) & 3) != 1)
      {
        v381 = v380 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_QWORD *)(a2 + 72) & 3) == 2 && v381)
          v381 = *(_QWORD *)(v381 + 8);
        result = sub_22E9DD810(a1, v381, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v382 = *(_DWORD *)v4 & 0x7F, v382 <= 0x39) && ((1 << v382) & 0x3F0003E01011066) != 0
        || v382 - 70 <= 0xD && ((1 << (v382 - 70)) & 0x2803) != 0
        || v382 - 19 <= 4)
      {
        v383 = sub_22EFCAE04(a2);
      }
      else
      {
        v383 = 0;
      }
      result = sub_22E9EE3F4((uint64_t)a1, v383);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v385 = *v384;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v387 = *(_QWORD *)v386 + 8 * *(unsigned int *)(v386 + 8);
      }
      else
      {
        v387 = 0;
      }
      if (v385 == (uint64_t *)v387)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v385) & 1) != 0)
      {
        if (++v385 == (uint64_t *)v387)
          return 1;
      }
      return 0;
    case 60:
      result = sub_22E9EF048(a1, a2);
      if (!(_DWORD)result)
        return result;
      v184 = *(_DWORD *)v4 & 0x7F;
      v185 = v184 > 0x39 || ((1 << v184) & 0x3F0003E01011066) == 0;
      v186 = !v185 || v184 - 70 <= 0xD && ((1 << (v184 - 70)) & 0x2803) != 0 || v184 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E9EE3F4((uint64_t)a1, v186);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v188 = *v187;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v190 = *(_QWORD *)v189 + 8 * *(unsigned int *)(v189 + 8);
      }
      else
      {
        v190 = 0;
      }
      if (v188 == (uint64_t *)v190)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v188) & 1) != 0)
      {
        if (++v188 == (uint64_t *)v190)
          return 1;
      }
      return 0;
    case 61:
      result = sub_22E9EF048(a1, a2);
      if (!(_DWORD)result)
        return result;
      v287 = *(unsigned int *)(a2 + 100);
      if (!(_DWORD)v287)
        goto LABEL_514;
      v288 = a2 + 104;
      v289 = 8 * v287;
      while ((sub_22E9E924C(a1) & 1) != 0)
      {
        v288 += 8;
        v289 -= 8;
        if (!v289)
        {
LABEL_514:
          v290 = *(_DWORD *)v4 & 0x7F;
          v291 = v290 > 0x39 || ((1 << v290) & 0x3F0003E01011066) == 0;
          if (v291
            && (v290 - 70 <= 0xD ? (v545 = ((1 << (v290 - 70)) & 0x2803) == 0) : (v545 = 1), v545 && v290 - 19 > 4))
          {
            v292 = 0;
          }
          else
          {
            v292 = sub_22EFCAE04(a2);
          }
          result = sub_22E9EE3F4((uint64_t)a1, v292);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v294 = *v293;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v296 = *(_QWORD *)v295 + 8 * *(unsigned int *)(v295 + 8);
          }
          else
          {
            v296 = 0;
          }
          if (v294 == (uint64_t *)v296)
            return 1;
          while ((sub_22E9EE490((uint64_t)a1, *v294) & 1) != 0)
          {
            if (++v294 == (uint64_t *)v296)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 62:
      result = sub_22E9EF048(a1, a2);
      if (!(_DWORD)result)
        return result;
      v305 = *(_DWORD *)v4 & 0x7F;
      v306 = v305 > 0x39 || ((1 << v305) & 0x3F0003E01011066) == 0;
      v307 = !v306 || v305 - 70 <= 0xD && ((1 << (v305 - 70)) & 0x2803) != 0 || v305 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E9EE3F4((uint64_t)a1, v307);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v309 = *v308;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v311 = *(_QWORD *)v310 + 8 * *(unsigned int *)(v310 + 8);
      }
      else
      {
        v311 = 0;
      }
      if (v309 == (uint64_t *)v311)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v309) & 1) != 0)
      {
        if (++v309 == (uint64_t *)v311)
          return 1;
      }
      return 0;
    case 63:
      result = sub_22E9EF048(a1, a2);
      if (!(_DWORD)result)
        return result;
      v224 = *(_DWORD *)v4 & 0x7F;
      v225 = v224 > 0x39 || ((1 << v224) & 0x3F0003E01011066) == 0;
      v226 = !v225 || v224 - 70 <= 0xD && ((1 << (v224 - 70)) & 0x2803) != 0 || v224 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E9EE3F4((uint64_t)a1, v226);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v228 = *v227;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v230 = *(_QWORD *)v229 + 8 * *(unsigned int *)(v229 + 8);
      }
      else
      {
        v230 = 0;
      }
      if (v228 == (uint64_t *)v230)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v228) & 1) != 0)
      {
        if (++v228 == (uint64_t *)v230)
          return 1;
      }
      return 0;
    case 64:
      result = sub_22E9EF048(a1, a2);
      if (!(_DWORD)result)
        return result;
      v191 = *(_DWORD *)(a2 + 96) & 0x600;
      if (v191 != 1024)
        goto LABEL_343;
      result = sub_22E9DD810(a1, *(_QWORD *)(a2 + 88) & 0xFFFFFFFFFFFFFFF8, 0);
      if (!(_DWORD)result)
        return result;
      v191 = *(_DWORD *)(a2 + 96) & 0x600;
LABEL_343:
      if (v191 != 1024 && v191 != 512 && *(_QWORD *)(a2 + 88) >= 8uLL)
      {
        v192 = sub_22EFBC5B4(a2);
        v193 = v192;
        if (v192 && (*(_BYTE *)v192 & 0xFE) == 0xAC)
          v193 = *(_QWORD *)(v192 + 16);
        result = sub_22E9DD810(a1, v193, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v194 = *(_DWORD *)v4 & 0x7F, v194 <= 0x39) && ((1 << v194) & 0x3F0003E01011066) != 0
        || v194 - 70 <= 0xD && ((1 << (v194 - 70)) & 0x2803) != 0
        || v194 - 19 <= 4)
      {
        v195 = sub_22EFCAE04(a2);
      }
      else
      {
        v195 = 0;
      }
      result = sub_22E9EE3F4((uint64_t)a1, v195);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v197 = *v196;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v199 = *(_QWORD *)v198 + 8 * *(unsigned int *)(v198 + 8);
      }
      else
      {
        v199 = 0;
      }
      if (v197 == (uint64_t *)v199)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v197) & 1) != 0)
      {
        if (++v197 == (uint64_t *)v199)
          return 1;
      }
      return 0;
    case 65:
      v301 = *(unint64_t ***)(a2 + 120);
      if (v301)
      {
        if (*v301)
        {
          result = sub_22E9ED998(a1, **v301, (uint64_t)(*v301 + 1));
          if (!(_DWORD)result)
            return result;
        }
      }
      v302 = *(_QWORD *)(a2 + 56);
      if ((v302 & 4) != 0)
      {
        v493 = (uint64_t *)(v302 & 0xFFFFFFFFFFFFFFF8);
        v303 = *v493;
        v304 = v493[1];
      }
      else
      {
        v303 = 0;
        v304 = 0;
      }
      result = sub_22E9ED404(a1, v303, v304);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFBC2B0(a2) != 2)
        return 1;
      v494 = *(_DWORD *)v4 & 0x7F;
      if (v494 <= 0x39 && ((1 << v494) & 0x3F0003E01011066) != 0
        || v494 - 70 <= 0xD && ((1 << (v494 - 70)) & 0x2803) != 0
        || v494 - 19 <= 4)
      {
        v495 = sub_22EFCAE04(a2);
      }
      else
      {
        v495 = 0;
      }
      result = sub_22E9EE3F4((uint64_t)a1, v495);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v497 = *v496;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v499 = *(_QWORD *)v498 + 8 * *(unsigned int *)(v498 + 8);
      }
      else
      {
        v499 = 0;
      }
      if (v497 == (uint64_t *)v499)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v497) & 1) != 0)
      {
        if (++v497 == (uint64_t *)v499)
          return 1;
      }
      return 0;
    case 66:
      v44 = *(_QWORD *)(a2 + 424);
      if (!v44)
        goto LABEL_68;
      v45 = *(_DWORD *)(v44 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v45)
        goto LABEL_68;
      v46 = v44 + 16;
      v47 = 8 * v45;
      while ((sub_22E9E924C(a1) & 1) != 0)
      {
        v46 += 8;
        v47 -= 8;
        if (!v47)
        {
LABEL_68:
          v48 = *(_QWORD *)(a2 + 432);
          v49 = *(unsigned int *)(v48 + 8);
          if ((_DWORD)v49)
          {
            v50 = v48 + 16;
            while ((sub_22E9EE10C((uint64_t)a1, v50) & 1) != 0)
            {
              v50 += 32;
              if (!--v49)
                goto LABEL_72;
            }
          }
          else
          {
LABEL_72:
            result = sub_22E9EF048(a1, a2);
            if (!(_DWORD)result)
              return result;
            v51 = *(_DWORD *)v4 & 0x7F;
            v52 = v51 > 0x39 || ((1 << v51) & 0x3F0003E01011066) == 0;
            if (v52
              && (v51 - 70 <= 0xD ? (v546 = ((1 << (v51 - 70)) & 0x2803) == 0) : (v546 = 1), v546 && v51 - 19 > 4))
            {
              v53 = 0;
            }
            else
            {
              v53 = sub_22EFCAE04(a2);
            }
            result = sub_22E9EE3F4((uint64_t)a1, v53);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v55 = *v54;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v57 = *(_QWORD *)v56 + 8 * *(unsigned int *)(v56 + 8);
            }
            else
            {
              v57 = 0;
            }
            if (v55 == (uint64_t *)v57)
              return 1;
            while ((sub_22E9EE490((uint64_t)a1, *v55) & 1) != 0)
            {
              if (++v55 == (uint64_t *)v57)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 67:
      result = sub_22E9DD810(a1, *(_QWORD *)(a2 + 56), 0);
      if (!(_DWORD)result)
        return result;
      v126 = *(_DWORD *)v4 & 0x7F;
      v127 = v126 > 0x39 || ((1 << v126) & 0x3F0003E01011066) == 0;
      v128 = !v127 || v126 - 70 <= 0xD && ((1 << (v126 - 70)) & 0x2803) != 0 || v126 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E9EE3F4((uint64_t)a1, v128);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v130 = *v129;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v132 = *(_QWORD *)v131 + 8 * *(unsigned int *)(v131 + 8);
      }
      else
      {
        v132 = 0;
      }
      if (v130 == (uint64_t *)v132)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v130) & 1) != 0)
      {
        if (++v130 == (uint64_t *)v132)
          return 1;
      }
      return 0;
    case 68:
      result = sub_22E9EE3F4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v462 = *v461;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v464 = *(_QWORD *)v463 + 8 * *(unsigned int *)(v463 + 8);
      }
      else
      {
        v464 = 0;
      }
      if (v462 == (uint64_t *)v464)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v462) & 1) != 0)
      {
        if (++v462 == (uint64_t *)v464)
          return 1;
      }
      return 0;
    case 69:
      result = sub_22E9EE3F4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v109 = *v108;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v111 = *(_QWORD *)v110 + 8 * *(unsigned int *)(v110 + 8);
      }
      else
      {
        v111 = 0;
      }
      if (v109 == (uint64_t *)v111)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v109) & 1) != 0)
      {
        if (++v109 == (uint64_t *)v111)
          return 1;
      }
      return 0;
    case 70:
      v21 = *(_DWORD **)(a2 + 56);
      v24 = *v21;
      v23 = (uint64_t *)(v21 + 4);
      v22 = v24;
      if (!v24)
        return (sub_22E9DD360(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      v25 = 8 * v22;
      while ((sub_22E9EF0A8(a1, *v23) & 1) != 0)
      {
        ++v23;
        v25 -= 8;
        if (!v25)
          return (sub_22E9DD360(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return 0;
    case 71:
      result = sub_22E9DD810(a1, *(_QWORD *)(a2 + 88), 0);
      if ((_DWORD)result)
      {
        v62 = *(_QWORD *)(a2 + 96);
        if (!v62)
          return (sub_22E9DD360(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
        result = sub_22E9DD810(a1, v62, 0);
        if ((_DWORD)result)
          return (sub_22E9DD360(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return result;
    case 72:
      result = sub_22E9EE3F4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v423 = *v422;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v425 = *(_QWORD *)v424 + 8 * *(unsigned int *)(v424 + 8);
      }
      else
      {
        v425 = 0;
      }
      if (v423 == (uint64_t *)v425)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v423) & 1) != 0)
      {
        if (++v423 == (uint64_t *)v425)
          return 1;
      }
      return 0;
    case 73:
      result = sub_22E9EE3F4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v439 = *v438;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v441 = *(_QWORD *)v440 + 8 * *(unsigned int *)(v440 + 8);
      }
      else
      {
        v441 = 0;
      }
      if (v439 == (uint64_t *)v441)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v439) & 1) != 0)
      {
        if (++v439 == (uint64_t *)v441)
          return 1;
      }
      return 0;
    case 74:
      if (!sub_22E9ED404(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v442 = *(_DWORD *)(a2 + 24);
      v443 = *(_QWORD *)(a2 + 80);
      v558 = *(_QWORD *)(a2 + 40);
      v559 = v442;
      v560 = v443;
      if (!sub_22E9ED504((uint64_t)a1, &v558))
        return 0;
      if ((v444 = *(_DWORD *)v4 & 0x7F, v444 <= 0x39) && ((1 << v444) & 0x3F0003E01011066) != 0
        || v444 - 70 <= 0xD && ((1 << (v444 - 70)) & 0x2803) != 0
        || v444 - 19 <= 4)
      {
        v445 = sub_22EFCAE04(a2);
      }
      else
      {
        v445 = 0;
      }
      if (!sub_22E9EE3F4((uint64_t)a1, v445))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v447 = *v446;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v449 = *(_QWORD *)v448 + 8 * *(unsigned int *)(v448 + 8);
      }
      else
      {
        v449 = 0;
      }
      while (2)
      {
        if (v447 == (uint64_t *)v449)
          return 1;
        if ((sub_22E9EE490((uint64_t)a1, *v447) & 1) != 0)
        {
          ++v447;
          continue;
        }
        break;
      }
      return 0;
    case 75:
      v86 = *(unsigned int **)(a2 + 40);
      v87 = *v86;
      v88 = v86[1];
      if (!(_DWORD)v88)
        goto LABEL_146;
      v89 = &v86[2 * v87 + 4];
      v90 = 8 * v88;
      while ((sub_22E9DD810(a1, *(_QWORD *)v89, 0) & 1) != 0)
      {
        v89 += 2;
        v90 -= 8;
        if (!v90)
        {
          v86 = *(unsigned int **)(a2 + 40);
          v87 = *v86;
LABEL_146:
          if ((_DWORD)v87)
          {
            v91 = (uint64_t *)(v86 + 4);
            v92 = 8 * v87;
            while ((sub_22E9EF0A8(a1, *v91) & 1) != 0)
            {
              ++v91;
              v92 -= 8;
              if (!v92)
                goto LABEL_150;
            }
          }
          else
          {
LABEL_150:
            v93 = *(_DWORD *)v4 & 0x7F;
            v94 = v93 > 0x39 || ((1 << v93) & 0x3F0003E01011066) == 0;
            if (v94
              && (v93 - 70 <= 0xD ? (v540 = ((1 << (v93 - 70)) & 0x2803) == 0) : (v540 = 1), v540 && v93 - 19 > 4))
            {
              v95 = 0;
            }
            else
            {
              v95 = sub_22EFCAE04(a2);
            }
            result = sub_22E9EE3F4((uint64_t)a1, v95);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v97 = *v96;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v99 = *(_QWORD *)v98 + 8 * *(unsigned int *)(v98 + 8);
            }
            else
            {
              v99 = 0;
            }
            if (v97 == (uint64_t *)v99)
              return 1;
            while ((sub_22E9EE490((uint64_t)a1, *v97) & 1) != 0)
            {
              if (++v97 == (uint64_t *)v99)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 76:
      v275 = *(_DWORD **)(a2 + 40);
      v278 = *v275;
      v277 = (uint64_t *)(v275 + 4);
      v276 = v278;
      if (!v278)
        goto LABEL_1013;
      v279 = 8 * v276;
      while ((sub_22E9EF0A8(a1, *v277) & 1) != 0)
      {
        ++v277;
        v279 -= 8;
        if (!v279)
        {
          v280 = *(_DWORD *)v4 & 0x7F;
          v281 = v280 > 0x39 || ((1 << v280) & 0x3F0003E01011066) == 0;
          if (v281
            && (v280 - 70 <= 0xD ? (v539 = ((1 << (v280 - 70)) & 0x2803) == 0) : (v539 = 1), v539 && v280 - 19 > 4))
          {
LABEL_1013:
            v282 = 0;
          }
          else
          {
            v282 = sub_22EFCAE04(a2);
          }
          result = sub_22E9EE3F4((uint64_t)a1, v282);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v549 = *v548;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v551 = *(_QWORD *)v550 + 8 * *(unsigned int *)(v550 + 8);
          }
          else
          {
            v551 = 0;
          }
          if (v549 == (uint64_t *)v551)
            return 1;
          while ((sub_22E9EE490((uint64_t)a1, *v549) & 1) != 0)
          {
            if (++v549 == (uint64_t *)v551)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 77:
      v26 = *(unsigned int **)(a2 + 40);
      v27 = v26[1];
      if (!(_DWORD)v27)
        goto LABEL_998;
      v28 = &v26[2 * *v26 + 4];
      v29 = 8 * v27;
      while ((sub_22E9DD810(a1, *(_QWORD *)v28, 0) & 1) != 0)
      {
        v28 += 2;
        v29 -= 8;
        if (!v29)
        {
          v30 = *(_DWORD *)v4 & 0x7F;
          v31 = v30 > 0x39 || ((1 << v30) & 0x3F0003E01011066) == 0;
          if (v31 && (v30 - 70 <= 0xD ? (v534 = ((1 << (v30 - 70)) & 0x2803) == 0) : (v534 = 1), v534 && v30 - 19 > 4))
LABEL_998:
            v32 = 0;
          else
            v32 = sub_22EFCAE04(a2);
          result = sub_22E9EE3F4((uint64_t)a1, v32);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v536 = *v535;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v538 = *(_QWORD *)v537 + 8 * *(unsigned int *)(v537 + 8);
          }
          else
          {
            v538 = 0;
          }
          if (v536 == (uint64_t *)v538)
            return 1;
          while ((sub_22E9EE490((uint64_t)a1, *v536) & 1) != 0)
          {
            if (++v536 == (uint64_t *)v538)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 78:
      result = sub_22E9EE3F4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v458 = *v457;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v460 = *(_QWORD *)v459 + 8 * *(unsigned int *)(v459 + 8);
      }
      else
      {
        v460 = 0;
      }
      if (v458 == (uint64_t *)v460)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v458) & 1) != 0)
      {
        if (++v458 == (uint64_t *)v460)
          return 1;
      }
      return 0;
    case 79:
      result = sub_22E9EE3F4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v18 = *v17;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v20 = *(_QWORD *)v19 + 8 * *(unsigned int *)(v19 + 8);
      }
      else
      {
        v20 = 0;
      }
      if (v18 == (uint64_t *)v20)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v18) & 1) != 0)
      {
        if (++v18 == (uint64_t *)v20)
          return 1;
      }
      return 0;
    case 80:
      result = sub_22E9EE3F4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v59 = *v58;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v61 = *(_QWORD *)v60 + 8 * *(unsigned int *)(v60 + 8);
      }
      else
      {
        v61 = 0;
      }
      if (v59 == (uint64_t *)v61)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v59) & 1) != 0)
      {
        if (++v59 == (uint64_t *)v61)
          return 1;
      }
      return 0;
    case 81:
      v166 = sub_22EFCAE04(a2);
      result = sub_22E9EE3F4((uint64_t)a1, v166);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v168 = *v167;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v170 = *(_QWORD *)v169 + 8 * *(unsigned int *)(v169 + 8);
      }
      else
      {
        v170 = 0;
      }
      if (v168 == (uint64_t *)v170)
        return 1;
      while ((sub_22E9EE490((uint64_t)a1, *v168) & 1) != 0)
      {
        if (++v168 == (uint64_t *)v170)
          return 1;
      }
      return 0;
    case 82:
      result = sub_22E9DD810(a1, *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFFCLL, 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22E9DD810(a1, *(_QWORD *)(a2 + 48), 0);
      if (!(_DWORD)result)
        return result;
      if ((v160 = *(_DWORD *)v4 & 0x7F, v160 <= 0x39) && ((1 << v160) & 0x3F0003E01011066) != 0
        || v160 - 70 <= 0xD && ((1 << (v160 - 70)) & 0x2803) != 0
        || v160 - 19 <= 4)
      {
        v161 = sub_22EFCAE04(a2);
      }
      else
      {
        v161 = 0;
      }
      result = sub_22E9EE3F4((uint64_t)a1, v161);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v163 = *v162;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v165 = *(_QWORD *)v164 + 8 * *(unsigned int *)(v164 + 8);
      }
      else
      {
        v165 = 0;
      }
      if (v163 == (uint64_t *)v165)
        return 1;
      break;
    case 83:
      v11 = *(_QWORD *)(a2 + 88);
      v12 = *(_BYTE **)(v11 + 19016);
      v13 = *(_BYTE **)(v11 + 19024);
      v14 = v13 - v12;
      if (v13 == v12)
      {
        v15 = 0;
        v16 = 0;
      }
      else
      {
        if (v14 < 0)
          abort();
        v15 = (char *)operator new(v13 - v12);
        memmove(v15, v12, v14);
        v16 = &v15[8 * (v14 >> 3)];
      }
      if (v16 - v15 == 8 && (*(_DWORD *)(*(_QWORD *)v15 + 28) & 0x7F) == 0x53)
      {
        operator delete(v15);
        result = sub_22E9EE3F4((uint64_t)a1, a2 + 40);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (v15 != v16)
        {
          v500 = v15;
          do
          {
            if ((*(_DWORD *)(*(_QWORD *)v500 + 28) & 0x7Fu) - 1 >= 2
              && ((*(_DWORD *)(*(_QWORD *)v500 + 28) & 0x7Fu) - 35 > 2
               || (v501 = *(_QWORD *)(*(_QWORD *)v500 + 128)) == 0
               || ((*(unsigned __int16 *)(v501 + 8) | (*(unsigned __int8 *)(v501 + 10) << 16)) & 0x100000) == 0)
              && !sub_22E9E924C(a1))
            {
              if (v15)
                operator delete(v15);
              return 0;
            }
            v500 += 8;
          }
          while (v500 != v16);
        }
        if (v15)
          operator delete(v15);
      }
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v503 = *v502;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v505 = *(_QWORD *)v504 + 8 * *(unsigned int *)(v504 + 8);
        }
        else
        {
          v505 = 0;
        }
        for (; v503 != (uint64_t *)v505; ++v503)
        {
          if ((sub_22E9EE490((uint64_t)a1, *v503) & 1) == 0)
            return 0;
        }
      }
      return 1;
    default:
      return 1;
  }
  while ((sub_22E9EE490((uint64_t)a1, *v163) & 1) != 0)
  {
    if (++v163 == (uint64_t *)v165)
      return 1;
  }
  return 0;
}

uint64_t sub_22E9ED0D4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  if ((*(_BYTE *)(a2 + 60) & 4) != 0)
  {
    if (*(_QWORD *)(a2 + 152))
    {
      if ((sub_22E9DD810(a1, *(_QWORD *)(a2 + 152), 0) & 1) == 0)
        return 0;
    }
    else
    {
      result = sub_22E9ED364(a1, a2 + 80);
      if (!(_DWORD)result)
        return result;
    }
  }
  return 1;
}

uint64_t sub_22E9ED11C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  result = sub_22E9DD810(a1, *(_QWORD *)(a2 + 40), 0);
  if ((_DWORD)result)
  {
    v5 = *(_DWORD *)(a2 + 28) & 0x7F;
    v6 = v5 > 0x39 || ((1 << v5) & 0x3F0003E01011066) == 0;
    if (v6 && (v5 - 70 <= 0xD ? (v8 = ((1 << (v5 - 70)) & 0x2803) == 0) : (v8 = 1), v8 && v5 - 19 > 4))
      v7 = 0;
    else
      v7 = sub_22EFCAE04(a2);
    result = sub_22E9EE3F4(a1, v7);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v10 = *v9;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v12 = *(_QWORD *)v11 + 8 * *(unsigned int *)(v11 + 8);
      }
      else
      {
        v12 = 0;
      }
      if (v10 == v12)
      {
        return 1;
      }
      else
      {
        v13 = v10 + 8;
        do
        {
          result = sub_22E9EE490(a1, *(_QWORD *)(v13 - 8));
          if ((_DWORD)result)
            v14 = v13 == v12;
          else
            v14 = 1;
          v13 += 8;
        }
        while (!v14);
      }
    }
  }
  return result;
}

uint64_t sub_22E9ED234(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t result;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  if (!*(_DWORD *)(a2 + 96))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 80);
  v5 = (unint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (unint64_t *)*v5;
  result = sub_22E9ED998(a1, *v5, (uint64_t)(v5 + 1));
  if ((_DWORD)result)
  {
LABEL_5:
    v7 = *(_DWORD *)(a2 + 28) & 0x7F;
    v8 = v7 > 0x39 || ((1 << v7) & 0x3F0003E01011066) == 0;
    if (v8 && (v7 - 70 <= 0xD ? (v10 = ((1 << (v7 - 70)) & 0x2803) == 0) : (v10 = 1), v10 && v7 - 19 > 4))
      v9 = 0;
    else
      v9 = sub_22EFCAE04(a2);
    result = sub_22E9EE3F4((uint64_t)a1, v9);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v12 = *v11;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v14 = *(_QWORD *)v13 + 8 * *(unsigned int *)(v13 + 8);
      }
      else
      {
        v14 = 0;
      }
      if (v12 == v14)
      {
        return 1;
      }
      else
      {
        v15 = v12 + 8;
        do
        {
          result = sub_22E9EE490((uint64_t)a1, *(_QWORD *)(v15 - 8));
          if ((_DWORD)result)
            v16 = v15 == v14;
          else
            v16 = 1;
          v15 += 8;
        }
        while (!v16);
      }
    }
  }
  return result;
}

uint64_t sub_22E9ED364(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  __int128 v11;
  uint64_t v12;

  result = sub_22E9ED404(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    v11 = *(_OWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 40);
    result = sub_22E9ED504((uint64_t)a1, (uint64_t *)&v11);
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)(a2 + 64);
      if (v5 && (v6 = *(unsigned int *)(v5 + 8), (_DWORD)v6))
      {
        v7 = v5 + 16;
        v8 = v6 - 1;
        do
        {
          result = sub_22E9EE10C((uint64_t)a1, v7);
          v10 = v8-- != 0;
          if (!(_DWORD)result)
            break;
          v7 += 32;
        }
        while (v10);
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22E9ED404(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!a2)
    return 1;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 0xFFFFFFFFFFFFFFF8) == 0)
  {
    v16 = a2;
    v17 = a3;
    goto LABEL_13;
  }
  if ((*(_BYTE *)(v7 + 8) & 4) != 0
    && ((v8 = *(_QWORD *)(v7 + 16), v9 = a1[1], v8) ? (v10 = v9 == 0) : (v10 = 1),
        !v10 && *(_QWORD *)(v8 + 8) == *(_QWORD *)(v9 + 8)))
  {
    if ((v6 & 6) != 0)
      v14 = 0;
    else
      v14 = *(_QWORD *)(a2 + 16);
    sub_22E9ED5BC(a1, v14);
    v15 = *(_QWORD *)(a2 + 8);
    v16 = a2;
    v17 = a3;
    v7 = v15 & 0xFFFFFFFFFFFFFFF8;
    if ((v15 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
LABEL_13:
      if (*(_QWORD *)(a2 + 16) && (*(_BYTE *)(a2 + 8) & 4) != 0)
      {
        v12 = sub_22F0AB4E0((uint64_t)&v16);
        return sub_22E9ED998(a1, v12, v13);
      }
      return 1;
    }
  }
  else
  {
    v16 = a2;
    v17 = a3;
  }
  result = sub_22E9ED404(a1, v7, a3);
  if ((_DWORD)result)
    goto LABEL_13;
  return result;
}

uint64_t sub_22E9ED504(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t result;
  unint64_t v8;
  int v9;
  unint64_t v10;

  v2 = *a2;
  v3 = *a2 & 7;
  v4 = v3;
  if ((_DWORD)v3 == 7)
  {
    v5 = *(_DWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
    if (v5 >= 3)
      v5 = 3;
    v4 = v5 | 8;
  }
  if ((v4 - 3) < 3)
  {
    if ((v3 - 3) <= 2)
    {
      v6 = (_QWORD *)a2[2];
      if (v6)
      {
        if ((sub_22E9ED998(a1, *v6, v6 + 1) & 1) == 0)
          return 0;
      }
    }
    return 1;
  }
  if (v4 != 8)
    return 1;
  if ((~(_BYTE)v2 & 7) != 0)
    goto LABEL_15;
  v8 = v2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_DWORD *)v8;
  if (*(_DWORD *)v8 >= 3u)
    v9 = 3;
  if (v9)
LABEL_15:
    v10 = 0;
  else
    v10 = *(_QWORD *)(v8 + 16) & 0xFFFFFFFFFFFFFFF9;
  result = sub_22E9EE224(a1, v10);
  if ((_DWORD)result)
    return 1;
  return result;
}

void sub_22E9ED5BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    LOBYTE(v3) = 0;
    v5 = 0;
    v7 = 0;
    v2 = a2;
    v6 = 0;
    sub_22E9ED64C(*a1, (uint64_t)&v2);
    if (v5)
    {
      if (v3 != &v4)
        free(v3);
    }
  }
}

__n128 sub_22E9ED64C(uint64_t a1, uint64_t a2)
{
  char v4;
  __n128 result;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  int v15;
  llvm *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;

  v33 = 0;
  v4 = sub_22E9ED904(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)a2, &v33);
  v6 = v33;
  if ((v4 & 1) == 0)
  {
    v34 = v33;
    v13 = *(_DWORD *)(a1 + 8);
    v14 = *(unsigned int *)(a1 + 16);
    if (4 * v13 + 4 >= (3 * v14))
    {
      v15 = 2 * v14;
    }
    else
    {
      v15 = *(_DWORD *)(a1 + 16);
      if ((int)v14 + ~v13 - *(_DWORD *)(a1 + 12) > v14 >> 3)
      {
LABEL_17:
        *(_DWORD *)(a1 + 8) = v13 + 1;
        if (*(_QWORD *)v6 != -4096)
          --*(_DWORD *)(a1 + 12);
        *(_QWORD *)v6 = *(_QWORD *)a2;
        *(_OWORD *)(v6 + 40) = 0u;
        *(_OWORD *)(v6 + 8) = 0u;
        *(_OWORD *)(v6 + 24) = 0u;
        *(_DWORD *)(v6 + 48) = 2;
        *(_QWORD *)(v6 + 56) = 0;
        goto LABEL_20;
      }
    }
    v16 = *(llvm **)a1;
    v17 = (v15 - 1) | ((unint64_t)(v15 - 1) >> 1);
    v18 = v17 | (v17 >> 2) | ((v17 | (v17 >> 2)) >> 4);
    v19 = ((v18 | (v18 >> 8)) >> 16) | v18 | (v18 >> 8);
    if ((v19 + 1) > 0x40)
      v20 = v19 + 1;
    else
      v20 = 64;
    *(_DWORD *)(a1 + 16) = v20;
    v21 = (_QWORD *)MEMORY[0x23489D23C]((unint64_t)v20 << 6, 8);
    *(_QWORD *)a1 = v21;
    if (v16)
    {
      *(_QWORD *)(a1 + 8) = 0;
      v24 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v24)
      {
        v25 = v24 << 6;
        do
        {
          *v21 = -4096;
          v21 += 8;
          v25 -= 64;
        }
        while (v25);
      }
      v26 = (void *)(v14 << 6);
      if ((_DWORD)v14)
      {
        v27 = (char *)v16 + 32;
        v28 = v14 << 6;
        do
        {
          v29 = *((_QWORD *)v27 - 4);
          if ((v29 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v35 = 0;
            sub_22E9ED904(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v29, &v35);
            v30 = v35;
            *v35 = v29;
            v30[1] = *((_QWORD *)v27 - 3);
            *((_BYTE *)v30 + 16) = 0;
            *((_BYTE *)v30 + 40) = 0;
            if (v27[8])
            {
              v32 = v30;
              sub_22F319DE0((uint64_t)(v30 + 2), (uint64_t)(v27 - 16));
              v30 = v32;
            }
            *((_OWORD *)v30 + 3) = *((_OWORD *)v27 + 1);
            ++*(_DWORD *)(a1 + 8);
            if (v27[8])
            {
              v31 = (char *)*((_QWORD *)v27 - 2);
              if (v27 != v31)
                free(v31);
              v27[8] = 0;
            }
          }
          v27 += 64;
          v28 -= 64;
        }
        while (v28);
      }
      llvm::deallocate_buffer(v16, v26);
      v21 = *(_QWORD **)a1;
      LODWORD(v22) = *(_DWORD *)(a1 + 16);
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0;
      v22 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v22)
      {
        v23 = 0;
        do
        {
          v21[v23 / 8] = -4096;
          v23 += 64;
        }
        while (v22 << 6 != v23);
      }
    }
    sub_22E9ED904((uint64_t)v21, v22, *(_QWORD *)a2, &v34);
    v13 = *(_DWORD *)(a1 + 8);
    v6 = v34;
    goto LABEL_17;
  }
  v7 = *(unsigned __int8 *)(a2 + 32);
  v8 = *(unsigned __int8 *)(v33 + 40);
  if (v8 < v7
    || v7 >= v8
    && ((v9 = *(_QWORD *)(a2 + 48), v10 = *(_QWORD *)(v33 + 56), v9) && !v10
     || (v10 ? (v11 = v9 == 0) : (v11 = 0), !v11 ? (v12 = *(_DWORD *)(v33 + 48) < *(_DWORD *)(a2 + 40)) : (v12 = 0), v12)))
  {
LABEL_20:
    *(_QWORD *)(v6 + 8) = *(_QWORD *)a2;
    sub_22F319E54(v6 + 16, a2 + 8);
    result = *(__n128 *)(a2 + 40);
    *(__n128 *)(v6 + 48) = result;
  }
  return result;
}

uint64_t sub_22E9ED904(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  int v10;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = (_QWORD *)(a1 + (v4 << 6));
    v6 = *v5;
    if (*v5 == a3)
    {
      v7 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v6 != -4096)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v6 == -8192;
        if (v11)
          v9 = v5;
        v12 = v4 + v10++;
        v4 = v12 & (a2 - 1);
        v5 = (_QWORD *)(a1 + (v4 << 6));
        v6 = *v5;
        v7 = 1;
        if (*v5 == a3)
          goto LABEL_5;
      }
      v7 = 0;
      if (v9)
        v5 = v9;
    }
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
LABEL_5:
  *a4 = v5;
  return v7;
}

uint64_t sub_22E9ED998(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v10;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  char v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;

  if (a2)
  {
    v4 = a2;
    do
    {
      v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      if ((v4 & 0xF) != 0)
      {
LABEL_4:
        if ((v6 & 0xFFFFFFFFFFFFFFF0) != 0)
          v7 = *(_QWORD *)((char *)&unk_22F469D20
                         + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        else
          v7 = 1;
        a3 = (a3 + v7 - 1) & -v7;
        v4 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      }
      else
      {
        result = 1;
        switch(*(_BYTE *)(v6 + 16))
        {
          case 0:
          case 1:
          case 0x16:
          case 0x17:
          case 0x36:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F469D20
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 - 1;
            goto LABEL_62;
          case 2:
          case 3:
          case 4:
          case 5:
            v21 = *(_QWORD *)(v4 + 32);
            if (v21 >= 0x10 && (*(_QWORD *)(v4 + 32) & 0xFLL) == 0)
              v73 = *(_QWORD *)((char *)&unk_22F469D20
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v73 = 1;
            result = sub_22E9ED998(a1, v21, (a3 + v73 + 15) & -v73);
            if (!(_DWORD)result)
              return result;
            v23 = *(_QWORD *)(a3 + 8);
            return sub_22E9DD810(a1, v23, 0);
          case 6:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F469D20
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 11;
            goto LABEL_62;
          case 7:
          case 0x25:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F469D20
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 7;
            goto LABEL_62;
          case 8:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F469D20
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = v20 + a3;
            goto LABEL_62;
          case 0xA:
          case 0x20:
          case 0x24:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
            v4 = *(_QWORD *)(v4 + 32);
            goto LABEL_9;
          case 0xC:
          case 0x37:
          case 0x38:
            goto LABEL_76;
          case 0xD:
          case 0x30:
            v23 = *(_QWORD *)(v4 + 24);
            return sub_22E9DD810(a1, v23, 0);
          case 0xE:
            result = sub_22E9DD360(a1, *(_QWORD *)(v4 + 24));
            if (!(_DWORD)result)
              return result;
            if (!*(_QWORD *)(v4 + 40))
              return 1;
            result = sub_22E9ED404(a1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16));
            if (!(_DWORD)result)
              return result;
            v25 = *(_DWORD *)(a3 + 28);
            v74 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 40);
            v75 = v25;
            sub_22EFC6D6C((uint64_t)&v76, v74);
            result = sub_22E9ED504((uint64_t)a1, &v74);
            if (!(_DWORD)result)
              return result;
            v26 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v26)
              return 1;
            v27 = v4 + 48;
            v28 = (uint64_t *)(a3 + 56);
            v29 = v26 - 1;
            do
            {
              v30 = *v28++;
              v77 = *(_OWORD *)v27;
              v78 = *(_QWORD *)(v27 + 16);
              v79 = v30;
              result = sub_22E9EE10C((uint64_t)a1, (uint64_t)&v77);
              v31 = v29-- != 0;
              v32 = v31;
              if (!(_DWORD)result)
                break;
              v27 += 24;
            }
            while ((v32 & 1) != 0);
            return result;
          case 0xF:
            result = sub_22E9EE224((uint64_t)a1, *(_QWORD *)(v4 + 40));
            if (!(_DWORD)result)
              return result;
            v24 = *(_QWORD *)(v4 + 24);
            return sub_22E9DD360(a1, v24);
          case 0x10:
            v33 = *(_QWORD *)(v4 + 40);
            goto LABEL_96;
          case 0x11:
            v23 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
            return sub_22E9DD810(a1, v23, 0);
          case 0x12:
            sub_22E9EE2E8(a1, v4);
            return sub_22E9ED404(a1, *(_QWORD *)(v4 + 32), *(_QWORD *)(a3 + 8));
          case 0x13:
            v33 = *(_QWORD *)(v4 + 40);
            if (!v33)
              goto LABEL_97;
LABEL_96:
            result = sub_22E9DD810(a1, v33, 0);
            if (!(_DWORD)result)
              return result;
LABEL_97:
            v24 = *(_QWORD *)(v4 + 48);
            return sub_22E9DD360(a1, v24);
          case 0x14:
            v34 = *(_QWORD *)(a3 + 8);
            if (v34)
            {
              v35 = *(_QWORD *)(v4 + 32);
              if (v35)
              {
                result = sub_22E9ED404(a1, v35, v34);
                if (!(_DWORD)result)
                  return result;
              }
            }
            v36 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v36)
              return 1;
            v37 = v4 + 48;
            v38 = (uint64_t *)(a3 + 32);
            v39 = v36 - 1;
            do
            {
              v40 = *v38++;
              v77 = *(_OWORD *)v37;
              v78 = *(_QWORD *)(v37 + 16);
              v79 = v40;
              result = sub_22E9EE10C((uint64_t)a1, (uint64_t)&v77);
              v31 = v39-- != 0;
              v41 = v31;
              if (!(_DWORD)result)
                break;
              v37 += 24;
            }
            while ((v41 & 1) != 0);
            return result;
          case 0x15:
            v42 = *(_QWORD *)(v4 + 48);
            if (v42)
            {
              result = sub_22E9DD810(a1, v42, 0);
              if (!(_DWORD)result)
                return result;
            }
            v24 = *(_QWORD *)(v4 + 40);
            return sub_22E9DD360(a1, v24);
          case 0x18:
            v17 = *(_QWORD *)(v4 + 32);
            if (v17)
            {
              result = sub_22E9ED404(a1, v17, *(_QWORD *)(a3 + 8));
              if (!(_DWORD)result)
                return result;
            }
            v4 = *(_QWORD *)(v4 + 40);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              goto LABEL_60;
            v20 = 1;
            goto LABEL_61;
          case 0x19:
            *(_QWORD *)&v77 = v4;
            *((_QWORD *)&v77 + 1) = a3;
            v43 = *(_QWORD *)(v4 + 24);
            v44 = sub_22E47EE80(&v77);
            return sub_22E9ED998(a1, v43, v44);
          case 0x1A:
            *(_QWORD *)&v77 = v4;
            *((_QWORD *)&v77 + 1) = a3;
            v45 = *(_QWORD *)(v4 + 24);
            v46 = sub_22E47EE80(&v77);
            result = sub_22E9ED998(a1, v45, v46);
            if (!(_DWORD)result)
              return result;
            v47 = v77;
            v48 = *(_QWORD *)(v77 + 16);
            if (*(_BYTE *)(v77 + 16) == 25 || (v48 & 0x3FFFC000000000) == 0)
              goto LABEL_126;
            v50 = 0;
            v51 = (unsigned __int16)(v48 >> 38);
            do
            {
              if (*(_QWORD *)(*((_QWORD *)&v77 + 1) + 8 * v50 + 16))
              {
                if ((sub_22E9E924C(a1) & 1) == 0)
                  return 0;
              }
              else if (v50 < (unsigned __int16)(*(_QWORD *)(v47 + 16) >> 38))
              {
                result = sub_22E9DD360(a1, *(_QWORD *)(v47 + 40 + 8 * v50));
                if (!(_DWORD)result)
                  return result;
              }
              ++v50;
            }
            while (v51 != v50);
            v48 = *(_QWORD *)(v47 + 16);
LABEL_126:
            if ((v48 & 0x3C0000000000000) == 0x80000000000000)
            {
              v52 = (_DWORD *)((v47 + 8 * (unsigned __int16)(v48 >> 38) + 4 * ((v48 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8);
              v55 = *v52;
              v54 = v52 + 2;
              v53 = v55;
              if (v55)
              {
                v56 = 8 * v53;
                while ((sub_22E9DD360(a1, *v54) & 1) != 0)
                {
                  ++v54;
                  v56 -= 8;
                  if (!v56)
                    goto LABEL_131;
                }
                return 0;
              }
            }
LABEL_131:
            v57 = sub_22F257D3C(v47);
            if (!v57)
              return 1;
            result = sub_22E9DD810(a1, v57, 0);
            if ((_DWORD)result)
              return 1;
            return result;
          case 0x1C:
            v4 = *(_QWORD *)(v4 + 24);
LABEL_9:
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F469D20
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 3;
            goto LABEL_62;
          case 0x1D:
          case 0x1E:
            result = sub_22E9DD810(a1, *(_QWORD *)(a3 + 16), 0);
            if (!(_DWORD)result)
              return result;
            result = sub_22E9DD810(a1, *(_QWORD *)(a3 + 24), 0);
            if (!(_DWORD)result)
              return result;
LABEL_76:
            v24 = *(_QWORD *)(v4 + 32);
            return sub_22E9DD360(a1, v24);
          case 0x1F:
            v19 = *(_QWORD **)(a3 + 8);
            if (v19)
            {
              if ((sub_22E9ED998(a1, *v19, v19 + 1) & 1) == 0)
                return 0;
            }
            else
            {
              result = sub_22E9DD360(a1, *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0);
              if (!(_DWORD)result)
                return result;
            }
            v4 = *(_QWORD *)(v4 + 32);
            v20 = 1;
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
LABEL_60:
              v20 = *(_QWORD *)((char *)&unk_22F469D20
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
LABEL_61:
            v10 = a3 + v20 + 15;
LABEL_62:
            a3 = v10 & -v20;
            break;
          case 0x21:
            v58 = *(_QWORD *)(v4 + 24);
            v59 = *(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0);
            if (v59 != v4)
            {
              v60 = 1;
              if (v58 >= 0x10 && (v58 & 0xF) == 0)
                v60 = *(_QWORD *)((char *)&unk_22F469D20
                                + ((uint64_t)((unint64_t)*(unsigned int *)(v59 + 16) << 56) >> 53));
              result = sub_22E9ED998(a1, v58, (a3+ (((HIWORD(*(_DWORD *)(v4 + 16)) & 0x3F8) + 4 * (*(_DWORD *)(v4 + 16) >> 26) + 31) & 0x7F8)+ v60- 1) & -v60);
              if (!(_DWORD)result)
                return result;
            }
            v61 = (*(_DWORD *)(v4 + 16) >> 19) & 0x7F;
            if (!(_DWORD)v61)
              return 1;
            v62 = (_QWORD *)(a3 + 24);
            v63 = v61 - 1;
            do
            {
              v64 = (_QWORD *)*v62++;
              result = sub_22E9ED998(a1, *v64, v64 + 1);
              v31 = v63-- != 0;
              v65 = v31;
            }
            while ((_DWORD)result && (v65 & 1) != 0);
            return result;
          case 0x2A:
            v66 = *(_DWORD *)(v4 + 20);
            *((_QWORD *)&v77 + 1) = *(_QWORD *)(v4 + 40);
            LODWORD(v77) = 8;
            DWORD1(v77) = v66;
            return sub_22E9EE328((uint64_t)a1, (uint64_t)&v77);
          case 0x2B:
            v24 = *(_QWORD *)(v4 + 8);
            return sub_22E9DD360(a1, v24);
          case 0x2E:
            result = sub_22E9EE224((uint64_t)a1, *(_QWORD *)(v4 + 32));
            if (!(_DWORD)result)
              return result;
            v67 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v67)
              return 1;
            v68 = v4 + 40;
            v69 = (uint64_t *)(a3 + 16);
            v70 = v67 - 1;
            do
            {
              v71 = *v69++;
              v77 = *(_OWORD *)v68;
              v78 = *(_QWORD *)(v68 + 16);
              v79 = v71;
              result = sub_22E9EE10C((uint64_t)a1, (uint64_t)&v77);
              v31 = v70-- != 0;
              v72 = v31;
              if (!(_DWORD)result)
                break;
              v68 += 24;
            }
            while ((v72 & 1) != 0);
            return result;
          case 0x31:
          case 0x33:
            v13 = *(unint64_t **)(a3 + 16);
            v14 = *v13;
            a3 = (uint64_t)(v13 + 1);
            v4 = v14;
            break;
          case 0x39:
            goto LABEL_4;
          default:
            return result;
        }
      }
    }
    while (v4);
  }
  return 1;
}

uint64_t sub_22E9EE10C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v6 = (_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (v6)
        result = sub_22E9ED998(a1, *v6, v6 + 1);
      else
        result = sub_22E9DD360(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      v5 = (_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (!*v5 || (result = sub_22E9ED404(a1, *v5, v5[1]), (_DWORD)result))
        result = sub_22E9EE224(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22E9DD810(a1, *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL, 0);
      break;
    case 8:
      v7 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        v9 = v7 - 1;
        do
        {
          result = sub_22E9EE328(a1, v8);
          v11 = v9-- != 0;
          if (!(_DWORD)result)
            break;
          v8 += 24;
        }
        while (v11);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22E9EE224(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  char v5;

  v2 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 6) != 6 || v2 == 0)
  {
    if ((a2 & 6) != 4)
      return 1;
    if (!v2)
      return 1;
    result = sub_22E9EE284(a1, *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if ((_DWORD)result)
      return 1;
  }
  else
  {
    v5 = sub_22E9EE284(a1, *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
    return (v5 & 1) != 0;
  }
  return result;
}

uint64_t sub_22E9EE284(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (!a2)
    return 1;
  v4 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v4 || (result = sub_22E9EE284(a1, v4), (_DWORD)result))
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (v6 && (*(_BYTE *)(a2 + 8) & 4) != 0)
      return sub_22E9DD360(a1, v6 & 0xFFFFFFFFFFFFFFF0);
    return 1;
  }
  return result;
}

void sub_22E9EE2E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v2 = *(_QWORD *)(a2 + 32);
  if (v2 && (*(_BYTE *)(v2 + 8) & 4) != 0)
  {
    v3 = *(_QWORD *)(v2 + 16);
    v4 = a1[1];
    if (v3)
      v5 = v4 == 0;
    else
      v5 = 1;
    if (!v5 && *(_QWORD *)(v3 + 8) == *(_QWORD *)(v4 + 8))
      sub_22E9ED5BC(a1, *(_QWORD *)(a2 + 40));
  }
}

uint64_t sub_22E9EE328(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v8;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      result = sub_22E9DD360(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      result = sub_22E9EE224(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22E9DD810(a1, *(_QWORD *)(a2 + 8), 0);
      break;
    case 8:
      v4 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v4)
      {
        v5 = *(_QWORD *)(a2 + 8);
        v6 = v4 - 1;
        do
        {
          result = sub_22E9EE328(a1, v5);
          v8 = v6-- != 0;
          if (!(_DWORD)result)
            break;
          v5 += 24;
        }
        while (v8);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22E9EE3F4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!a2)
    return 1;
  if ((*(_WORD *)(a2 + 8) & 0x80) != 0)
    sub_22EFCC320(a2);
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 1;
  while (1)
  {
    if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 1 >= 2
      && ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 35 > 2
       || (v5 = *(_QWORD *)(v4 + 128)) == 0
       || ((*(unsigned __int16 *)(v5 + 8) | (*(unsigned __int8 *)(v5 + 10) << 16)) & 0x100000) == 0))
    {
      result = sub_22E9E924C(a1);
      if (!(_DWORD)result)
        break;
    }
    v4 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v4)
      return 1;
  }
  return result;
}

uint64_t sub_22E9EE490(uint64_t a1, uint64_t a2)
{
  if (a2)
    __asm { BR              X10 }
  return 1;
}

void sub_22E9EE514()
{
  uint64_t v0;
  uint64_t v1;

  if (sub_22E9DD810(v0, *(_QWORD *)(v1 + 40), 0))
    JUMPOUT(0x22E9EE4D0);
  JUMPOUT(0x22E9EE504);
}

void sub_22E9EE530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v2 = *(unsigned int *)(v1 + 48);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2;
    while ((sub_22E9DD810(v0, *v3, 0) & 1) != 0)
    {
      ++v3;
      v4 -= 8;
      if (!v4)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v5 = *(unsigned int *)(v1 + 64);
    if (!(_DWORD)v5)
      JUMPOUT(0x22E9EE500);
    v6 = *(uint64_t **)(v1 + 72);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22E9DD810(v0, v8, 0))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  JUMPOUT(0x22E9EE504);
}

void sub_22E9EE668()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E9DD810(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E9EE504);
}

void sub_22E9EE6A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E9DD810(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E9EE504);
}

void sub_22E9EE6D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E9DD810(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E9EE504);
}

void sub_22E9EE710()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22E9DD810(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22E9EE500);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E9DD810(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E9EE504);
}

void sub_22E9EE75C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E9DD810(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E9EE504);
}

void sub_22E9EE794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  if (sub_22E9DD810(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 56);
    if ((_DWORD)v2)
    {
      v3 = *(uint64_t **)(v1 + 64);
      v4 = 8 * v2;
      do
      {
        if ((sub_22E9DD810(v0, *v3, 0) & 1) == 0)
          JUMPOUT(0x22E9EE660);
        ++v3;
        v4 -= 8;
      }
      while (v4);
    }
    v5 = *(unsigned int *)(v1 + 72);
    if (!(_DWORD)v5)
      JUMPOUT(0x22E9EE500);
    v6 = *(uint64_t **)(v1 + 80);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22E9DD810(v0, v8, 0))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  JUMPOUT(0x22E9EE504);
}

void sub_22E9EE810()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E9DD810(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E9EE504);
}

void sub_22E9EE848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E9DD810(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E9EE504);
}

void sub_22E9EE880()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22E9DD810(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22E9EE500);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E9DD810(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E9EE504);
}

void sub_22E9EE8CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22E9DD810(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22E9EE500);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E9DD810(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E9EE504);
}

void sub_22E9EE918()
{
  JUMPOUT(0x22E9EE4ECLL);
}

void sub_22E9EE920()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (sub_22E9DD810(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if ((_DWORD)v2)
    {
      v3 = *(uint64_t **)(v1 + 56);
      v4 = 8 * v2;
      while ((sub_22E9DD810(v0, *v3, 0) & 1) != 0)
      {
        ++v3;
        v4 -= 8;
        if (!v4)
          goto LABEL_6;
      }
LABEL_33:
      JUMPOUT(0x22E9EE660);
    }
LABEL_6:
    v5 = *(unsigned int *)(v1 + 64);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v1 + 72);
      v7 = 8 * v5;
      while ((sub_22E9DD810(v0, *v6, 0) & 1) != 0)
      {
        ++v6;
        v7 -= 8;
        if (!v7)
          goto LABEL_10;
      }
      goto LABEL_33;
    }
LABEL_10:
    v8 = *(unsigned int *)(v1 + 80);
    if ((_DWORD)v8)
    {
      v9 = *(uint64_t **)(v1 + 88);
      v10 = 8 * v8;
      while ((sub_22E9DD810(v0, *v9, 0) & 1) != 0)
      {
        ++v9;
        v10 -= 8;
        if (!v10)
          goto LABEL_14;
      }
      goto LABEL_33;
    }
LABEL_14:
    v11 = *(unsigned int *)(v1 + 96);
    if ((_DWORD)v11)
    {
      v12 = *(uint64_t **)(v1 + 104);
      v13 = 8 * v11;
      while ((sub_22E9DD810(v0, *v12, 0) & 1) != 0)
      {
        ++v12;
        v13 -= 8;
        if (!v13)
          goto LABEL_18;
      }
      goto LABEL_33;
    }
LABEL_18:
    v14 = *(unsigned int *)(v1 + 128);
    if (!(_DWORD)v14)
      JUMPOUT(0x22E9EE500);
    v15 = *(uint64_t **)(v1 + 136);
    v16 = 8 * v14 - 8;
    do
    {
      v17 = *v15++;
      if (sub_22E9DD810(v0, v17, 0))
        v18 = v16 == 0;
      else
        v18 = 1;
      v16 -= 8;
    }
    while (!v18);
  }
  JUMPOUT(0x22E9EE504);
}

uint64_t sub_22E9EEA2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  if (!a2)
    return 1;
  v4 = a2 + 16;
  v5 = *(_DWORD *)(a2 + 12);
  if ((v5 & 0x1FFFFFFF) != 0)
  {
    v6 = 8 * (v5 & 0x1FFFFFFF);
    v7 = a2 + 16;
    while ((sub_22E9E924C(a1) & 1) != 0)
    {
      v7 += 8;
      v6 -= 8;
      if (!v6)
      {
        v5 = *(_DWORD *)(a2 + 12);
        goto LABEL_7;
      }
    }
    return 0;
  }
  else
  {
LABEL_7:
    if ((v5 & 0x40000000) == 0)
      return 1;
    v8 = *(_QWORD *)(v4 + 8 * (v5 & 0x1FFFFFFF));
    if (!v8)
      return 1;
    result = sub_22E9DD810(a1, v8, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22E9EEACC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 120);
  if ((v3 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v3 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22E9EEA2C((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v3 = *(_QWORD *)(a2 + 120);
      if ((v3 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  return sub_22E9ED404(a1, v7, v8);
}

uint64_t sub_22E9EEB40(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;

  result = sub_22E9EEACC(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a2 + 74) & 1) == 0)
      return 1;
    v5 = sub_22E46A3A0(a2);
    if (v5 == v6)
    {
      return 1;
    }
    else
    {
      v7 = v6;
      v8 = v5 + 24;
      do
      {
        result = sub_22E9ED998(a1, **(_QWORD **)(v8 - 8), *(_QWORD *)(v8 - 8) + 8);
        if ((_DWORD)result)
          v9 = v8 == v7;
        else
          v9 = 1;
        v8 += 24;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t sub_22E9EEBB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t *v11;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22E9EEA2C((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22E9ED404(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_QWORD *)(a2 + 56);
    if ((v10 & 4) != 0)
    {
      v11 = *(unint64_t **)((v10 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (v11)
        return (sub_22E9ED998(a1, *v11, (uint64_t)(v11 + 1)) & 1) != 0;
    }
    else if (v10 >= 8)
    {
      v11 = (unint64_t *)(v10 & 0xFFFFFFFFFFFFFFF8);
      return (sub_22E9ED998(a1, *v11, (uint64_t)(v11 + 1)) & 1) != 0;
    }
    result = sub_22E9DD360(a1, *(_QWORD *)(a2 + 48));
    if (!(_DWORD)result)
      return result;
    return 1;
  }
  return result;
}

uint64_t sub_22E9EEC84(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  _BOOL4 v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22E9EEA2C((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22E9ED404(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_DWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 152);
    v38 = *(_QWORD *)(a2 + 40);
    v39 = v10;
    v40 = v11;
    result = sub_22E9ED504((uint64_t)a1, &v38);
    if ((_DWORD)result)
    {
      v12 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(a2 + 144) & 6) == 4 && v12 != 0 && (*(_BYTE *)(v12 + 16) & 6) != 0)
      {
        v14 = *(_QWORD *)(v12 + 32);
        if (v14)
        {
          v15 = *(unsigned int *)(v14 + 8);
          if ((_DWORD)v15)
          {
            v16 = v14 + 16;
            while ((sub_22E9EE10C((uint64_t)a1, v16) & 1) != 0)
            {
              v16 += 32;
              if (!--v15)
                goto LABEL_19;
            }
            return 0;
          }
        }
      }
LABEL_19:
      v17 = *(_QWORD *)(a2 + 56);
      v18 = (unint64_t *)(v17 & 0xFFFFFFFFFFFFFFF8);
      if ((v17 & 4) != 0)
        v18 = (unint64_t *)v18[4];
      if (v18)
      {
        result = sub_22E9ED998(a1, *v18, (uint64_t)(v18 + 1));
        if (!(_DWORD)result)
          return result;
        v17 = *(_QWORD *)(a2 + 56);
      }
      if ((v17 & 4) == 0
        || (v19 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 40)) == 0
        || (result = sub_22E9DD810(a1, v19, 0), (_DWORD)result))
      {
        if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x37)
        {
          v20 = sub_22EFD7ED0(a2);
          v21 = sub_22EFD7ED0(a2) + 8 * ((*(_QWORD *)(a2 + 80) >> 40) & 0x1FFFFFLL);
          while (v20 != v21)
          {
            v22 = *(_QWORD *)v20;
            if ((*(_WORD *)(*(_QWORD *)v20 + 28) & 4) != 0)
            {
              v23 = (unint64_t *)(*(_QWORD *)v22 & 0xFFFFFFFFFFFFFFF8);
              if ((*(_QWORD *)v22 & 6) != 0 || v23 == 0)
                goto LABEL_37;
              result = sub_22E9ED998(a1, *v23, (uint64_t)(v23 + 1));
              if (!(_DWORD)result)
                return result;
              if ((*(_WORD *)(v22 + 28) & 4) != 0)
              {
LABEL_37:
                result = sub_22E9DD810(a1, *(_QWORD *)(v22 + 8), 0);
                if (!(_DWORD)result)
                  return result;
              }
            }
            v20 += 8;
          }
        }
        v25 = sub_22E49F868(a2) && (*(_BYTE *)(a2 + 83) & 2) == 0;
        if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
          goto LABEL_70;
        v26 = *(_WORD *)(a2 + 80) & 0x7F;
        v27 = -40;
        if (v26 > 0x46)
        {
          if (v26 == 83)
            goto LABEL_60;
          if (v26 == 71)
          {
            v27 = -56;
            goto LABEL_60;
          }
          if (v26 != 81)
          {
LABEL_55:
            v28 = v26 - 52;
            v29 = v26 - 33 >= 5;
            v30 = -48;
            if (!v29)
              v30 = -64;
            if (v28 >= 6)
              v27 = v30;
            else
              v27 = -72;
          }
        }
        else
        {
          if (v26 > 0x18)
            goto LABEL_54;
          if (v26 == 16)
          {
LABEL_46:
            v27 = -48;
            goto LABEL_60;
          }
          if (((1 << v26) & 0x1066) == 0)
          {
            if (v26 == 24)
              goto LABEL_46;
LABEL_54:
            if (v26 == 70)
            {
              v27 = -64;
              goto LABEL_60;
            }
            goto LABEL_55;
          }
        }
LABEL_60:
        v31 = *(_QWORD *)(a2 + 72 + v27 + 16);
        v32 = (_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF8);
        if ((v31 & 4) != 0)
          v32 = (_QWORD *)*v32;
        if (v32)
        {
          v33 = v32[8];
          if (v33)
          {
            if (((*(unsigned __int16 *)(v33 + 8) | (*(unsigned __int8 *)(v33 + 10) << 16)) & 0x100000) != 0)
            {
              v34 = sub_22EFD462C((unint64_t)(v32 - 8));
              if (v34)
              {
                if ((*(_DWORD *)(v34 + 28) & 0x7F) != 0x1D || (v34 = *(_QWORD *)(v34 + 48)) != 0)
                {
                  if (v34 == a2
                    || (v35 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v34 + 32))(v34),
                        v35 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2)))
                  {
                    if (!v25)
                      return 1;
LABEL_71:
                    v36 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
                    result = sub_22E9DD810(a1, v36, 0);
                    if (!(_DWORD)result)
                      return result;
                    if ((*(_WORD *)(a2 + 80) & 0x80) != 0)
                      sub_22EFCC320(a2 + 72);
                    v37 = *(_QWORD *)(a2 + 88);
                    if (v37)
                    {
                      do
                      {
                        if ((*(_DWORD *)(v37 + 28) & 0x7E) == 0x2E)
                        {
                          result = sub_22E9E924C(a1);
                          if (!(_DWORD)result)
                            break;
                        }
                        result = 1;
                        v37 = *(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF8;
                      }
                      while (v37);
                      return result;
                    }
                    return 1;
                  }
                }
              }
            }
          }
        }
LABEL_70:
        if (!v25)
          return 1;
        goto LABEL_71;
      }
    }
  }
  return result;
}

uint64_t sub_22E9EF048(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;

  result = sub_22E9EEBB8(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
      return 1;
    if ((*(_BYTE *)(a2 + 97) & 8) != 0)
      return 1;
    v5 = sub_22EFBC5B4(a2);
    result = sub_22E9DD810(a1, v5, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22E9EF0A8(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *mm;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *i2;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *n;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *ii;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *nn;
  uint64_t v79;
  uint64_t v80;
  _QWORD *i1;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *i;
  uint64_t v92;
  uint64_t v93;
  _QWORD *j;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *jj;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *kk;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *k;
  uint64_t v175;
  uint64_t v176;
  _QWORD *m;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;

  if (!a2)
    return 1;
  switch(*(_DWORD *)(a2 + 8))
  {
    case 3:
      v85 = (_QWORD *)(a2 + 24);
      result = sub_22E9DD810(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
      if ((_DWORD)result)
      {
        v86 = *(unsigned int *)(a2 + 16);
        if (!(_DWORD)v86)
          return 1;
        v87 = 8 * v86;
        do
        {
          if ((sub_22E9DD810(a1, *v85, 0) & 1) == 0)
            return 0;
          ++v85;
          v87 -= 8;
        }
        while (v87);
        return 1;
      }
      return result;
    case 4:
    case 7:
    case 0xC:
    case 0x13:
    case 0x15:
    case 0x23:
    case 0x3C:
    case 0x3D:
    case 0x46:
    case 0x4B:
      v5 = *(_QWORD *)(a2 + 16);
      return (sub_22E9DD810(a1, v5, 0) & 1) != 0;
    case 5:
      v137 = (_QWORD *)(a2 + 24);
      result = sub_22E9DD810(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
      if (!(_DWORD)result)
        return result;
      v138 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v138)
        return 1;
      v139 = 8 * v138;
      while ((sub_22E9DD810(a1, *v137, 0) & 1) != 0)
      {
        ++v137;
        v139 -= 8;
        if (!v139)
          return 1;
      }
      return 0;
    case 6:
      result = sub_22E9DD810(a1, *(_QWORD *)(a2 + 24), 0);
      if (!(_DWORD)result)
        return result;
      v134 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v134)
        return 1;
      v135 = (_QWORD *)(a2 + 40);
      v136 = 8 * v134;
      while ((sub_22E9DD810(a1, *v135, 0) & 1) != 0)
      {
        ++v135;
        v136 -= 8;
        if (!v136)
          return 1;
      }
      return 0;
    case 0xE:
      v88 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v88)
        return 1;
      v89 = a2 + 24;
      v90 = 8 * v88;
      for (i = (_QWORD *)(a2 + 24); (sub_22E9DD810(a1, *i, 0) & 1) != 0; ++i)
      {
        v90 -= 8;
        if (!v90)
        {
          v92 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v92)
            return 1;
          v93 = 8 * v92;
          for (j = (_QWORD *)(v89 + 8 * v92); (sub_22E9DD810(a1, *j, 0) & 1) != 0; ++j)
          {
            v93 -= 8;
            if (!v93)
            {
              v95 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v95)
                return 1;
              v96 = (_QWORD *)(v89 + 8 * v95 + 8 * v95);
              v97 = 8 * v95;
              while ((sub_22E9DD810(a1, *v96, 0) & 1) != 0)
              {
                ++v96;
                v97 -= 8;
                if (!v97)
                {
                  v98 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v98)
                    return 1;
                  v99 = (_QWORD *)(v89 + 8 * v98 + 8 * v98 + 8 * v98);
                  v100 = 8 * v98;
                  while ((sub_22E9DD810(a1, *v99, 0) & 1) != 0)
                  {
                    ++v99;
                    v100 -= 8;
                    if (!v100)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0xF:
      v171 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v171)
        return 1;
      v172 = a2 + 24;
      v173 = 8 * v171;
      for (k = (_QWORD *)(a2 + 24); (sub_22E9DD810(a1, *k, 0) & 1) != 0; ++k)
      {
        v173 -= 8;
        if (!v173)
        {
          v175 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v175)
            return 1;
          v176 = 8 * v175;
          for (m = (_QWORD *)(v172 + 8 * v175); (sub_22E9DD810(a1, *m, 0) & 1) != 0; ++m)
          {
            v176 -= 8;
            if (!v176)
            {
              v178 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v178)
                return 1;
              v179 = (_QWORD *)(v172 + 8 * v178 + 8 * v178);
              v180 = 8 * v178;
              while ((sub_22E9DD810(a1, *v179, 0) & 1) != 0)
              {
                ++v179;
                v180 -= 8;
                if (!v180)
                {
                  v181 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v181)
                    return 1;
                  v182 = (_QWORD *)(v172 + 8 * v181 + 8 * v181 + 8 * v181);
                  v183 = 8 * v181;
                  while ((sub_22E9DD810(a1, *v182, 0) & 1) != 0)
                  {
                    ++v182;
                    v183 -= 8;
                    if (!v183)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x12:
      v184 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v184)
        return 1;
      v185 = (_QWORD *)(a2 + 40);
      v186 = 8 * v184;
      while ((sub_22E9DD810(a1, *v185, 0) & 1) != 0)
      {
        ++v185;
        v186 -= 8;
        if (!v186)
          return 1;
      }
      return 0;
    case 0x14:
    case 0x58:
      v5 = *(_QWORD *)(a2 + 24);
      return (sub_22E9DD810(a1, v5, 0) & 1) != 0;
    case 0x16:
      result = sub_22E9DD810(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 40);
      return (sub_22E9DD810(a1, v5, 0) & 1) != 0;
    case 0x18:
      result = sub_22E9DD810(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 48);
      return (sub_22E9DD810(a1, v5, 0) & 1) != 0;
    case 0x1A:
      v193 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v193)
        return 1;
      v194 = (_QWORD *)(a2 + 24);
      v195 = 8 * v193;
      while ((sub_22E9DD810(a1, *v194, 0) & 1) != 0)
      {
        ++v194;
        v195 -= 8;
        if (!v195)
          return 1;
      }
      return 0;
    case 0x1B:
    case 0x1C:
    case 0x21:
    case 0x24:
    case 0x34:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3E:
    case 0x4E:
      result = sub_22E9DD810(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 32);
      return (sub_22E9DD810(a1, v5, 0) & 1) != 0;
    case 0x1D:
      v40 = a2 + 40;
      v41 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v41)
        goto LABEL_72;
      v42 = 8 * v41;
      v43 = (_QWORD *)(a2 + 40);
      while ((sub_22E9DD810(a1, *v43, 0) & 1) != 0)
      {
        ++v43;
        v42 -= 8;
        if (!v42)
        {
LABEL_72:
          result = sub_22E9DD810(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          v44 = *(unsigned int *)(a2 + 16);
          if ((_DWORD)v44)
          {
            v45 = 8 * v44;
            for (n = (_QWORD *)(v40 + 8 * v44); (sub_22E9DD810(a1, *n, 0) & 1) != 0; ++n)
            {
              v45 -= 8;
              if (!v45)
              {
                v47 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v47)
                  return 1;
                v48 = (_QWORD *)(v40 + 8 * v47 + 8 * v47);
                v49 = 8 * v47;
                while ((sub_22E9DD810(a1, *v48, 0) & 1) != 0)
                {
                  ++v48;
                  v49 -= 8;
                  if (!v49)
                    return 1;
                }
                return 0;
              }
            }
            return 0;
          }
          return 1;
        }
      }
      return 0;
    case 0x1E:
      v82 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v82)
        return 1;
      v83 = (_QWORD *)(a2 + 24);
      v84 = 8 * v82;
      while ((sub_22E9DD810(a1, *v83, 0) & 1) != 0)
      {
        ++v83;
        v84 -= 8;
        if (!v84)
          return 1;
      }
      return 0;
    case 0x1F:
      v187 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v187)
        return 1;
      v188 = (_QWORD *)(a2 + 104);
      v189 = 8 * v187;
      while ((sub_22E9DD810(a1, *v188, 0) & 1) != 0)
      {
        ++v188;
        v189 -= 8;
        if (!v189)
          return 1;
      }
      return 0;
    case 0x22:
      v199 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v199)
        return 1;
      v200 = (_QWORD *)(a2 + 80);
      v201 = 8 * v199;
      while ((sub_22E9DD810(a1, *v200, 0) & 1) != 0)
      {
        ++v200;
        v201 -= 8;
        if (!v201)
          return 1;
      }
      return 0;
    case 0x25:
      if (!sub_22E9ED404(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22E9ED504((uint64_t)a1, (uint64_t *)&v208))
        return 0;
      v56 = a2 + 96;
      v57 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v57)
        goto LABEL_98;
      v58 = 8 * v57;
      v59 = (_QWORD *)(a2 + 96);
      while ((sub_22E9DD810(a1, *v59, 0) & 1) != 0)
      {
        ++v59;
        v58 -= 8;
        if (!v58)
        {
LABEL_98:
          if (sub_22E9DD810(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22E9DD810(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v60 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v60)
              return 1;
            v61 = 8 * v60;
            for (ii = (_QWORD *)(v56 + 8 * v60); (sub_22E9DD810(a1, *ii, 0) & 1) != 0; ++ii)
            {
              v61 -= 8;
              if (!v61)
              {
                v63 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v63)
                  return 1;
                v64 = (_QWORD *)(v56 + 8 * v63 + 8 * v63);
                v65 = 8 * v63;
                while ((sub_22E9DD810(a1, *v64, 0) & 1) != 0)
                {
                  ++v64;
                  v65 -= 8;
                  if (!v65)
                  {
                    v66 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v66)
                      return 1;
                    v67 = (_QWORD *)(v56 + 8 * v66 + 8 * v66 + 8 * v66);
                    v68 = 8 * v66;
                    while ((sub_22E9DD810(a1, *v67, 0) & 1) != 0)
                    {
                      ++v67;
                      v68 -= 8;
                      if (!v68)
                      {
                        v69 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v69)
                          return 1;
                        v70 = (_QWORD *)(v56 + 8 * v69 + 8 * v69 + 8 * v69 + 8 * v69);
                        v71 = 8 * v69;
                        while ((sub_22E9DD810(a1, *v70, 0) & 1) != 0)
                        {
                          ++v70;
                          v71 -= 8;
                          if (!v71)
                          {
                            v72 = *(unsigned int *)(a2 + 16);
                            if (!(_DWORD)v72)
                              return 1;
                            v73 = (_QWORD *)(v56 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72);
                            v74 = 8 * v72;
                            while ((sub_22E9DD810(a1, *v73, 0) & 1) != 0)
                            {
                              ++v73;
                              v74 -= 8;
                              if (!v74)
                                return 1;
                            }
                            return 0;
                          }
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x27:
      v168 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v168)
        return 1;
      v169 = (_QWORD *)(a2 + 24);
      v170 = 8 * v168;
      while ((sub_22E9DD810(a1, *v169, 0) & 1) != 0)
      {
        ++v169;
        v170 -= 8;
        if (!v170)
          return 1;
      }
      return 0;
    case 0x29:
      v53 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v53)
        return 1;
      v54 = (_QWORD *)(a2 + 32);
      v55 = 8 * v53;
      while ((sub_22E9DD810(a1, *v54, 0) & 1) != 0)
      {
        ++v54;
        v55 -= 8;
        if (!v55)
          return 1;
      }
      return 0;
    case 0x2A:
      v50 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v50)
        return 1;
      v51 = (_QWORD *)(a2 + 80);
      v52 = 8 * v50;
      while ((sub_22E9DD810(a1, *v51, 0) & 1) != 0)
      {
        ++v51;
        v52 -= 8;
        if (!v52)
          return 1;
      }
      return 0;
    case 0x2B:
      v101 = a2 + 64;
      v102 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v102)
        goto LABEL_164;
      v103 = 8 * v102;
      v104 = (_QWORD *)(a2 + 64);
      while ((sub_22E9DD810(a1, *v104, 0) & 1) != 0)
      {
        ++v104;
        v103 -= 8;
        if (!v103)
        {
LABEL_164:
          result = sub_22E9DD810(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22E9DD810(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v105 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v105)
            return 1;
          v106 = 8 * v105;
          for (jj = (_QWORD *)(v101 + 8 * v105); (sub_22E9DD810(a1, *jj, 0) & 1) != 0; ++jj)
          {
            v106 -= 8;
            if (!v106)
            {
              v108 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v108)
                return 1;
              v109 = (_QWORD *)(v101 + 8 * v108 + 8 * v108);
              v110 = 8 * v108;
              while ((sub_22E9DD810(a1, *v109, 0) & 1) != 0)
              {
                ++v109;
                v110 -= 8;
                if (!v110)
                {
                  v111 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v111)
                    return 1;
                  v112 = (_QWORD *)(v101 + 8 * v111 + 8 * v111 + 8 * v111);
                  v113 = 8 * v111;
                  while ((sub_22E9DD810(a1, *v112, 0) & 1) != 0)
                  {
                    ++v112;
                    v113 -= 8;
                    if (!v113)
                    {
                      v114 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v114)
                        return 1;
                      v115 = (_QWORD *)(v101 + 8 * v114 + 8 * v114 + 8 * v114 + 8 * v114);
                      v116 = 8 * v114;
                      while ((sub_22E9DD810(a1, *v115, 0) & 1) != 0)
                      {
                        ++v115;
                        v116 -= 8;
                        if (!v116)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2C:
      v117 = a2 + 64;
      v118 = *(unsigned int *)(a2 + 16);
      result = sub_22E9DD810(a1, *(_QWORD *)(a2 + 64 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118), 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22E9DD810(a1, *(_QWORD *)(v117+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8), 0);
      if (!(_DWORD)result)
        return result;
      v119 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v119)
        goto LABEL_191;
      v120 = 8 * v119;
      v121 = (_QWORD *)(a2 + 64);
      while ((sub_22E9DD810(a1, *v121, 0) & 1) != 0)
      {
        ++v121;
        v120 -= 8;
        if (!v120)
        {
LABEL_191:
          result = sub_22E9DD810(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22E9DD810(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v122 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v122)
            return 1;
          v123 = 8 * v122;
          for (kk = (_QWORD *)(v117 + 8 * v122); (sub_22E9DD810(a1, *kk, 0) & 1) != 0; ++kk)
          {
            v123 -= 8;
            if (!v123)
            {
              v125 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v125)
                return 1;
              v126 = (_QWORD *)(v117 + 8 * v125 + 8 * v125);
              v127 = 8 * v125;
              while ((sub_22E9DD810(a1, *v126, 0) & 1) != 0)
              {
                ++v126;
                v127 -= 8;
                if (!v127)
                {
                  v128 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v128)
                    return 1;
                  v129 = (_QWORD *)(v117 + 8 * v128 + 8 * v128 + 8 * v128);
                  v130 = 8 * v128;
                  while ((sub_22E9DD810(a1, *v129, 0) & 1) != 0)
                  {
                    ++v129;
                    v130 -= 8;
                    if (!v130)
                    {
                      v131 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v131)
                        return 1;
                      v132 = (_QWORD *)(v117 + 8 * v131 + 8 * v131 + 8 * v131 + 8 * v131);
                      v133 = 8 * v131;
                      while ((sub_22E9DD810(a1, *v132, 0) & 1) != 0)
                      {
                        ++v132;
                        v133 -= 8;
                        if (!v133)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2E:
      v190 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v190)
        return 1;
      v191 = (_QWORD *)(a2 + 136);
      v192 = 8 * v190;
      while ((sub_22E9DD810(a1, *v191, 0) & 1) != 0)
      {
        ++v191;
        v192 -= 8;
        if (!v192)
          return 1;
      }
      return 0;
    case 0x35:
      v6 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v6)
        return 1;
      v7 = a2 + 24;
      v8 = 8 * v6;
      for (mm = (_QWORD *)(a2 + 24); (sub_22E9DD810(a1, *mm, 0) & 1) != 0; ++mm)
      {
        v8 -= 8;
        if (!v8)
        {
          v10 = *(unsigned int *)(a2 + 16);
          v11 = (uint64_t *)(v7 + 8 * v10);
          v208 = (unint64_t)v11;
          if ((_DWORD)v10)
          {
            v12 = 0;
            v13 = &v11[v10];
            while (1)
            {
              if ((v12 & 3) != 0)
              {
                if ((v12 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                  v14 = (_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 40);
                else
                  v14 = (_QWORD *)sub_22F3AC1A8(*v11);
                if ((sub_22E9DD810(a1, *v14, 0) & 1) == 0)
                  return 0;
                if (v12 < 4)
                  sub_22F3F2FE0((uint64_t)&v208, 1);
                else
                  sub_22F0D8720((uint64_t)&v208);
              }
              else
              {
                if (!sub_22E9DD810(a1, *v11, 0))
                  return 0;
                *(_QWORD *)&v208 = v11 + 1;
              }
              v12 = *((_QWORD *)&v208 + 1);
              v11 = (uint64_t *)v208;
              if ((uint64_t *)v208 == v13 && *((_QWORD *)&v208 + 1) == 0)
                return 1;
            }
          }
          return 1;
        }
      }
      return 0;
    case 0x3F:
      v75 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v75)
        return 1;
      v76 = a2 + 24;
      v77 = 8 * v75;
      for (nn = (_QWORD *)(a2 + 24); (sub_22E9DD810(a1, *nn, 0) & 1) != 0; ++nn)
      {
        v77 -= 8;
        if (!v77)
        {
          v79 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v79)
            return 1;
          v80 = 8 * v79;
          for (i1 = (_QWORD *)(v76 + 8 * v79); (sub_22E9DD810(a1, *i1, 0) & 1) != 0; ++i1)
          {
            v80 -= 8;
            if (!v80)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 0x42:
      if (!sub_22E9ED404(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v208 = *(_OWORD *)(a2 + 80);
      v209 = *(_QWORD *)(a2 + 96);
      if (!sub_22E9ED504((uint64_t)a1, (uint64_t *)&v208))
        return 0;
      v140 = a2 + 104;
      v141 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v141)
        goto LABEL_228;
      v142 = 8 * v141;
      v143 = (_QWORD *)(a2 + 104);
      while ((sub_22E9DD810(a1, *v143, 0) & 1) != 0)
      {
        ++v143;
        v142 -= 8;
        if (!v142)
        {
LABEL_228:
          if (sub_22E9DD810(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22E9DD810(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v144 = *(unsigned int *)(a2 + 16);
            if ((_DWORD)v144)
            {
              v145 = 8 * v144;
              v146 = (_QWORD *)(v140 + 8 * v144);
              while ((sub_22E9DD810(a1, *v146, 0) & 1) != 0)
              {
                ++v146;
                v145 -= 8;
                if (!v145)
                {
                  v147 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v147)
                    goto LABEL_246;
                  v148 = (_QWORD *)(v140 + 8 * v147 + 8 * v147);
                  v149 = 8 * v147;
                  while ((sub_22E9DD810(a1, *v148, 0) & 1) != 0)
                  {
                    ++v148;
                    v149 -= 8;
                    if (!v149)
                    {
                      v150 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v150)
                        goto LABEL_246;
                      v151 = (_QWORD *)(v140 + 8 * v150 + 8 * v150 + 8 * v150);
                      v152 = 8 * v150;
                      while ((sub_22E9DD810(a1, *v151, 0) & 1) != 0)
                      {
                        ++v151;
                        v152 -= 8;
                        if (!v152)
                        {
                          v153 = *(unsigned int *)(a2 + 16);
                          if (!(_DWORD)v153)
                            goto LABEL_246;
                          v154 = (_QWORD *)(v140 + 8 * v153 + 8 * v153 + 8 * v153 + 8 * v153);
                          v155 = 8 * v153;
                          while ((sub_22E9DD810(a1, *v154, 0) & 1) != 0)
                          {
                            ++v154;
                            v155 -= 8;
                            if (!v155)
                              goto LABEL_246;
                          }
                          return 0;
                        }
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
            else
            {
LABEL_246:
              if (*(_DWORD *)(a2 + 48) != 1)
                return 1;
              v156 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v156)
                return 1;
              v157 = (_QWORD *)(v140 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156);
              v158 = 8 * v156;
              while ((sub_22E9DD810(a1, *v157, 0) & 1) != 0)
              {
                ++v157;
                v158 -= 8;
                if (!v158)
                {
                  v159 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v159)
                    return 1;
                  v160 = (_QWORD *)(v140 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159);
                  v161 = 8 * v159;
                  while ((sub_22E9DD810(a1, *v160, 0) & 1) != 0)
                  {
                    ++v160;
                    v161 -= 8;
                    if (!v161)
                    {
                      v162 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v162)
                        return 1;
                      v163 = (_QWORD *)(v140 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162);
                      v164 = 8 * v162;
                      while ((sub_22E9DD810(a1, *v163, 0) & 1) != 0)
                      {
                        ++v163;
                        v164 -= 8;
                        if (!v164)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x47:
      result = sub_22E9DD810(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 64);
      return (sub_22E9DD810(a1, v5, 0) & 1) != 0;
    case 0x49:
      v202 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v202)
        return 1;
      v203 = (_QWORD *)(a2 + 24);
      v204 = 8 * v202;
      while ((sub_22E9DD810(a1, *v203, 0) & 1) != 0)
      {
        ++v203;
        v204 -= 8;
        if (!v204)
          return 1;
      }
      return 0;
    case 0x4C:
      v165 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v165)
        return 1;
      v166 = (_QWORD *)(a2 + 24);
      v167 = 8 * v165;
      while ((sub_22E9DD810(a1, *v166, 0) & 1) != 0)
      {
        ++v166;
        v167 -= 8;
        if (!v167)
          return 1;
      }
      return 0;
    case 0x4D:
      if (!sub_22E9ED404(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22E9ED504((uint64_t)a1, (uint64_t *)&v208))
        return 0;
      v24 = a2 + 96;
      v25 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v25)
        goto LABEL_49;
      v26 = 8 * v25;
      v27 = (_QWORD *)(a2 + 96);
      while ((sub_22E9DD810(a1, *v27, 0) & 1) != 0)
      {
        ++v27;
        v26 -= 8;
        if (!v26)
        {
LABEL_49:
          if (sub_22E9DD810(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22E9DD810(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v28 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v28)
              return 1;
            v29 = 8 * v28;
            for (i2 = (_QWORD *)(v24 + 8 * v28); (sub_22E9DD810(a1, *i2, 0) & 1) != 0; ++i2)
            {
              v29 -= 8;
              if (!v29)
              {
                v31 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v31)
                  return 1;
                v32 = (_QWORD *)(v24 + 8 * v31 + 8 * v31);
                v33 = 8 * v31;
                while ((sub_22E9DD810(a1, *v32, 0) & 1) != 0)
                {
                  ++v32;
                  v33 -= 8;
                  if (!v33)
                  {
                    v34 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v34)
                      return 1;
                    v35 = (_QWORD *)(v24 + 8 * v34 + 8 * v34 + 8 * v34);
                    v36 = 8 * v34;
                    while ((sub_22E9DD810(a1, *v35, 0) & 1) != 0)
                    {
                      ++v35;
                      v36 -= 8;
                      if (!v36)
                      {
                        v37 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v37)
                          return 1;
                        v38 = (_QWORD *)(v24 + 8 * v37 + 8 * v37 + 8 * v37 + 8 * v37);
                        v39 = 8 * v37;
                        while ((sub_22E9DD810(a1, *v38, 0) & 1) != 0)
                        {
                          ++v38;
                          v39 -= 8;
                          if (!v39)
                            return 1;
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x51:
      v16 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v16)
        return 1;
      v17 = (_QWORD *)(a2 + 104);
      v18 = 8 * v16;
      while ((sub_22E9DD810(a1, *v17, 0) & 1) != 0)
      {
        ++v17;
        v18 -= 8;
        if (!v18)
          return 1;
      }
      return 0;
    case 0x59:
      v205 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v205)
        return 1;
      v206 = (_QWORD *)(a2 + 80);
      v207 = 8 * v205;
      while ((sub_22E9DD810(a1, *v206, 0) & 1) != 0)
      {
        ++v206;
        v207 -= 8;
        if (!v207)
          return 1;
      }
      return 0;
    case 0x5A:
      v196 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v196)
        return 1;
      v197 = (_QWORD *)(a2 + 80);
      v198 = 8 * v196;
      while ((sub_22E9DD810(a1, *v197, 0) & 1) != 0)
      {
        ++v197;
        v198 -= 8;
        if (!v198)
          return 1;
      }
      return 0;
    case 0x5B:
      v19 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v19)
        return 1;
      v20 = 0;
      v21 = a2 + 24;
      v22 = 2 * v19;
      break;
    default:
      return 1;
  }
  while (1)
  {
    v23 = *(_QWORD *)(v21 + 8 * (v20 + 1));
    result = sub_22E9DD810(a1, *(_QWORD *)(v21 + 8 * v20), 0);
    if (!(_DWORD)result)
      break;
    if ((sub_22E9DD810(a1, v23, 0) & 1) == 0)
      return 0;
    v20 += 2;
    if (v22 == v20)
      return 1;
  }
  return result;
}

void sub_22E9F015C(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if ((a3 & 7) != 0)
    return;
  LOBYTE(v12) = 0;
  v15 = 0;
  v17 = 0;
  v11 = a3 & 0xFFFFFFFFFFFFFFF8;
  v16 = a4;
  v5 = (unsigned int *)a1[2];
  if (v5 && a1[3] == a2)
  {
    v12 = &v14;
    v13 = 0x100000000;
    v15 = 1;
    v6 = v5[4];
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = (unint64_t)&v5[2 * (((unint64_t)*v5 >> 18) & 1) + 2] + ((unint64_t)*v5 >> 24);
      v9 = 8 * v6;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)v8 + 8);
        if (v7 >= HIDWORD(v13))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v7 = v13;
        }
        *((_QWORD *)v12 + v7) = v10;
        v7 = v13 + 1;
        LODWORD(v13) = v13 + 1;
        v8 += 8;
        v9 -= 8;
      }
      while (v9);
      v5 = (unsigned int *)a1[2];
    }
    if (v5 != (unsigned int *)a1[4])
      goto LABEL_7;
  }
  else if (a1[4] != a2)
  {
    goto LABEL_7;
  }
  v17 = a1[5];
LABEL_7:
  sub_22E9ED64C(*a1, (uint64_t)&v11);
  if (v15)
  {
    if (v12 != &v14)
      free(v12);
  }
}

uint64_t sub_22E9F02EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 1;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4 == v3)
    v5 = 0;
  else
    v5 = *(uint64_t **)(a2 + 24);
  if (v4 == v3)
    v6 = 0;
  else
    v6 = *(uint64_t **)(a2 + 16);
  v14 = 0;
  v15 = 0;
  v13 = v6;
  if (v6 == v5)
    return 1;
  v9 = 0;
  while (1)
  {
    if ((v9 & 3) == 0)
    {
      result = sub_22E9DD810(a1, *v6, a3);
      if (!(_DWORD)result)
        return result;
      v13 = v6 + 1;
      goto LABEL_18;
    }
    v10 = (_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFCLL) != 0 ? (v9 & 0xFFFFFFFFFFFFFFFCLL) + 40 : sub_22F3AC1A8(*v6));
    if ((sub_22E9DD810(a1, *v10, a3) & 1) == 0)
      return 0;
    if (v9 < 4)
      sub_22F3F2FE0((uint64_t)&v13, 1);
    else
      sub_22F0D8720((uint64_t)&v13);
LABEL_18:
    v6 = v13;
    v9 = v14;
    if (v13 == v5 && v14 == 0)
      return 1;
  }
}

void sub_22E9F03E4(unint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unint64_t v17;
  unsigned int *v18;
  unint64_t v19;
  size_t v20;
  int v21;
  unsigned int *v22;
  size_t v23;
  const void *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  size_t v30;
  size_t v31;
  int v32;
  int v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  unint64_t v37;
  unsigned int *v38;
  size_t v39;
  size_t v40;
  int v41;
  int v42;
  unsigned int *v43;
  size_t v44;
  size_t v45;
  int v46;
  int v47;
  unint64_t v48;
  unsigned int *v49;
  size_t v50;
  const void *v51;
  unsigned int v52;
  unint64_t v53;
  unsigned int *v54;
  size_t v55;
  size_t v56;
  int v57;
  int v58;
  unint64_t v59;
  unsigned int *v60;
  size_t v61;
  size_t v62;
  int v63;
  int v64;
  BOOL v65;
  unsigned int *v66;
  size_t v67;
  unsigned int *v68;
  size_t v69;
  size_t v70;
  int v71;
  unint64_t v72;
  unsigned int *v73;
  size_t v74;
  size_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unsigned int *v79;
  size_t v80;
  size_t v81;
  int v82;
  int v83;
  uint64_t *v84;
  uint64_t *v85;
  unsigned int *v86;
  size_t v87;
  size_t v88;
  int v89;
  int v90;
  uint64_t v91;
  unsigned int *v92;
  size_t v93;
  const void *v94;
  unsigned int v95;
  uint64_t *v96;
  unsigned int *v97;
  size_t v98;
  size_t v99;
  int v100;
  int v101;
  uint64_t *v102;
  unsigned int *v103;
  size_t v104;
  size_t v105;
  int v106;
  int v107;
  int64_t v108;
  int64_t v109;
  uint64_t v110;
  unint64_t v111;
  unsigned int *v112;
  unint64_t v113;
  unsigned int *v114;
  unint64_t v115;
  size_t v116;
  int v117;
  int v118;
  unint64_t v119;
  uint64_t v120;
  unsigned int *v121;
  unint64_t v122;
  uint64_t v123;
  unsigned int *v124;
  unint64_t v125;
  size_t v126;
  int v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int *v131;
  unint64_t v132;
  unsigned int *v133;
  unint64_t v134;
  size_t v135;
  int v136;
  int v137;
  unsigned int *v138;
  unint64_t v139;
  uint64_t v140;
  unsigned int *v141;
  unint64_t v142;
  size_t v143;
  int v144;
  BOOL v145;
  int v146;
  uint64_t v147;
  int64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unsigned int *v154;
  unint64_t v155;
  unsigned int *v156;
  unint64_t v157;
  size_t v158;
  int v159;
  int v160;
  __int128 *v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int *v165;
  unint64_t v166;
  unsigned int *v167;
  unint64_t v168;
  size_t v169;
  int v170;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int *v178;
  unint64_t v179;
  unsigned int *v180;
  unint64_t v181;
  size_t v182;
  int v183;
  int v184;
  unsigned int *v185;
  unint64_t v186;
  uint64_t v187;
  unsigned int *v188;
  unint64_t v189;
  size_t v190;
  int v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unsigned int *v197;
  unint64_t v198;
  unsigned int *v199;
  unint64_t v200;
  size_t v201;
  int v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int *v210;
  unint64_t v211;
  unsigned int *v212;
  unint64_t v213;
  size_t v214;
  int v215;
  int v216;
  _QWORD *v217;
  unint64_t v218;
  unint64_t i;
  unint64_t v220;
  uint64_t v221;
  unsigned int *v222;
  unint64_t v223;
  unsigned int *v224;
  unint64_t v225;
  size_t v226;
  int v227;
  uint64_t v228;
  char *v229;
  _OWORD *v230;
  uint64_t v231;
  uint64_t v232;
  unsigned int *v233;
  unint64_t v234;
  unsigned int *v235;
  unint64_t v236;
  size_t v237;
  int v238;
  int v239;
  int v240;
  uint64_t *v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v247;
  int64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  void *v252[2];
  uint64_t v253;
  char v254;
  __int128 v255;
  uint64_t v256;
  void *v257[2];
  uint64_t v258;
  char v259;
  __int128 v260;
  uint64_t v261;

  v261 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v7 = a2;
  v241 = a2 - 7;
  v8 = a1;
LABEL_3:
  v240 = a4;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)v7 - v8;
    v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v7 - v8) >> 3);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v185 = *(unsigned int **)(*(a2 - 7) + 16);
        v186 = *v185;
        v187 = *(_QWORD *)v8;
        v188 = *(unsigned int **)(*(_QWORD *)v8 + 16);
        v189 = *v188;
        if (v189 >= v186)
          v190 = *v185;
        else
          v190 = *v188;
        if (v190 && (v191 = memcmp(v185 + 4, v188 + 4, v190)) != 0)
        {
          if ((v191 & 0x80000000) == 0)
            return;
        }
        else if (v186 >= v189)
        {
          return;
        }
        v256 = v187;
        LOBYTE(v257[0]) = 0;
        v259 = 0;
        if (*(_BYTE *)(v8 + 32))
          sub_22F319DE0((uint64_t)v257, v8 + 8);
        v260 = *(_OWORD *)(v8 + 40);
        *(_QWORD *)v8 = *(a2 - 7);
        sub_22F319E54(v8 + 8, (uint64_t)(a2 - 6));
        *(_OWORD *)(v8 + 40) = *((_OWORD *)a2 - 1);
        *(a2 - 7) = v256;
        sub_22F319E54((uint64_t)(a2 - 6), (uint64_t)v257);
        *((_OWORD *)a2 - 1) = v260;
        if (v259)
        {
          if (v257[0] != &v258)
            free(v257[0]);
        }
        return;
      case 3uLL:
        sub_22E9F1BEC((uint64_t *)v8, (uint64_t *)(v8 + 56), v241);
        return;
      case 4uLL:
        sub_22E9F23B8(v8, v8 + 56, v8 + 112, v241);
        return;
      case 5uLL:
        sub_22E9F1818(v8, v8 + 56, v8 + 112, v8 + 168, v241);
        return;
      default:
        if (v9 <= 1343)
        {
          if ((a4 & 1) != 0)
          {
            if ((uint64_t *)v8 == v7)
              return;
            v192 = v8 + 56;
            if ((uint64_t *)(v8 + 56) == a2)
              return;
            v193 = 0;
            v194 = v8;
            while (1)
            {
              v195 = v194;
              v194 = v192;
              v196 = *(_QWORD *)(v195 + 56);
              v197 = *(unsigned int **)(v196 + 16);
              v198 = *v197;
              v199 = *(unsigned int **)(*(_QWORD *)v195 + 16);
              v200 = *v199;
              if (v200 >= v198)
                v201 = *v197;
              else
                v201 = *v199;
              if (v201 && (v202 = memcmp(v197 + 4, v199 + 4, v201)) != 0)
              {
                v203 = a2;
                if (v202 < 0)
                  goto LABEL_331;
              }
              else
              {
                v145 = v198 >= v200;
                v203 = a2;
                if (!v145)
                {
LABEL_331:
                  v256 = v196;
                  LOBYTE(v257[0]) = 0;
                  v259 = 0;
                  if (*(_BYTE *)(v195 + 88))
                    sub_22F319DE0((uint64_t)v257, v195 + 64);
                  v260 = *(_OWORD *)(v195 + 96);
                  v204 = *(_QWORD *)v195;
                  v205 = v193;
                  while (1)
                  {
                    v206 = v205;
                    v207 = a1 + v205;
                    *(_QWORD *)(a1 + v205 + 56) = v204;
                    v208 = a1 + v205 + 8;
                    sub_22F319E54(a1 + v205 + 64, v208);
                    *(_OWORD *)(v207 + 96) = *(_OWORD *)(v207 + 40);
                    v209 = v256;
                    if (!v206)
                      break;
                    v210 = *(unsigned int **)(v256 + 16);
                    v211 = *v210;
                    v204 = *(_QWORD *)(v207 - 56);
                    v212 = *(unsigned int **)(v204 + 16);
                    v213 = *v212;
                    if (v213 >= v211)
                      v214 = *v210;
                    else
                      v214 = *v212;
                    if (v214 && (v215 = memcmp(v210 + 4, v212 + 4, v214)) != 0)
                    {
                      v216 = (v215 >> 31) | 1;
                      v203 = a2;
                    }
                    else
                    {
                      v145 = v211 >= v213;
                      v203 = a2;
                      if (v145)
                        goto LABEL_344;
                      v216 = -1;
                    }
                    v205 = v206 - 56;
                    if (v216 != -1)
                    {
LABEL_344:
                      v217 = (_QWORD *)(a1 + v206);
                      goto LABEL_346;
                    }
                  }
                  v217 = (_QWORD *)a1;
LABEL_346:
                  *v217 = v209;
                  sub_22F319E54(v208, (uint64_t)v257);
                  *(_OWORD *)(v207 + 40) = v260;
                  if (v259 && v257[0] != &v258)
                    free(v257[0]);
                }
              }
              v192 = v194 + 56;
              v193 += 56;
              if ((uint64_t *)(v194 + 56) == v203)
                return;
            }
          }
          if ((uint64_t *)v8 == v7)
            return;
          v218 = v8 + 56;
          if ((uint64_t *)(v8 + 56) == a2)
            return;
          for (i = v8 + 40; ; i += 56)
          {
            v220 = a1;
            a1 = v218;
            v221 = *(_QWORD *)(v220 + 56);
            v222 = *(unsigned int **)(v221 + 16);
            v223 = *v222;
            v224 = *(unsigned int **)(*(_QWORD *)v220 + 16);
            v225 = *v224;
            if (v225 >= v223)
              v226 = *v222;
            else
              v226 = *v224;
            if (v226 && (v227 = memcmp(v222 + 4, v224 + 4, v226)) != 0)
            {
              if (v227 < 0)
                goto LABEL_368;
            }
            else if (v223 < v225)
            {
LABEL_368:
              v256 = v221;
              LOBYTE(v257[0]) = 0;
              v259 = 0;
              if (*(_BYTE *)(v220 + 88))
                sub_22F319DE0((uint64_t)v257, v220 + 64);
              v260 = *(_OWORD *)(v220 + 96);
              v228 = *(_QWORD *)v220;
              v229 = (char *)i;
              do
              {
                v230 = v229;
                *((_QWORD *)v229 + 2) = v228;
                v231 = (uint64_t)(v229 - 32);
                sub_22F319E54((uint64_t)(v229 + 24), (uint64_t)(v229 - 32));
                *(_OWORD *)((char *)v230 + 56) = *v230;
                v232 = v256;
                v233 = *(unsigned int **)(v256 + 16);
                v234 = *v233;
                v228 = *((_QWORD *)v230 - 12);
                v235 = *(unsigned int **)(v228 + 16);
                v236 = *v235;
                if (v236 >= v234)
                  v237 = *v233;
                else
                  v237 = *v235;
                if (v237 && (v238 = memcmp(v233 + 4, v235 + 4, v237)) != 0)
                {
                  v239 = (v238 >> 31) | 1;
                }
                else
                {
                  if (v234 >= v236)
                    break;
                  v239 = -1;
                }
                v229 = (char *)v230 - 56;
              }
              while (v239 == -1);
              *((_QWORD *)v230 - 5) = v232;
              sub_22F319E54(v231, (uint64_t)v257);
              *v230 = v260;
              if (v259 && v257[0] != &v258)
                free(v257[0]);
            }
            v218 = a1 + 56;
            if ((uint64_t *)(a1 + 56) == a2)
              return;
          }
        }
        if (a3)
        {
          v11 = v10 >> 1;
          v12 = (uint64_t *)(v8 + 56 * (v10 >> 1));
          if ((unint64_t)v9 < 0x1C01)
          {
            sub_22E9F1BEC((uint64_t *)(v8 + 56 * (v10 >> 1)), (uint64_t *)v8, v241);
          }
          else
          {
            sub_22E9F1BEC((uint64_t *)v8, (uint64_t *)(v8 + 56 * (v10 >> 1)), v241);
            v13 = (uint64_t *)(56 * v11 + v8 - 56);
            sub_22E9F1BEC((uint64_t *)(a1 + 56), v13, a2 - 14);
            sub_22E9F1BEC((uint64_t *)(a1 + 112), (uint64_t *)(a1 + 56 + 56 * v11), a2 - 21);
            sub_22E9F1BEC(v13, (uint64_t *)(a1 + 56 * (v10 >> 1)), (uint64_t *)(a1 + 56 + 56 * v11));
            v256 = *(_QWORD *)a1;
            LOBYTE(v257[0]) = 0;
            v259 = 0;
            if (*(_BYTE *)(a1 + 32))
              sub_22F319DE0((uint64_t)v257, a1 + 8);
            v260 = *(_OWORD *)(a1 + 40);
            *(_QWORD *)a1 = *v12;
            v14 = a1 + 56 * v11;
            sub_22F319E54(a1 + 8, v14 + 8);
            *(_OWORD *)(a1 + 40) = *(_OWORD *)(v14 + 40);
            *v12 = v256;
            sub_22F319E54(v14 + 8, (uint64_t)v257);
            *(_OWORD *)(v14 + 40) = v260;
            if (v259 && v257[0] != &v258)
              free(v257[0]);
          }
          --a3;
          v15 = *(_QWORD *)a1;
          if ((a4 & 1) != 0)
            goto LABEL_23;
          v16 = *(unsigned int **)(*(_QWORD *)(a1 - 56) + 16);
          v17 = *v16;
          v18 = *(unsigned int **)(v15 + 16);
          v19 = *v18;
          if (v19 >= v17)
            v20 = *v16;
          else
            v20 = *v18;
          if (v20)
          {
            v21 = memcmp(v16 + 4, v18 + 4, v20);
            if (v21)
            {
              if (v21 < 0)
                goto LABEL_23;
LABEL_103:
              v250 = v15;
              LOBYTE(v252[0]) = 0;
              v254 = 0;
              if (*(_BYTE *)(a1 + 32))
                sub_22F319DE0((uint64_t)v252, a1 + 8);
              v255 = *(_OWORD *)(a1 + 40);
              v66 = *(unsigned int **)(v15 + 16);
              v67 = *v66;
              v68 = *(unsigned int **)(*v241 + 16);
              v69 = *v68;
              if (v69 >= v67)
                v70 = *v66;
              else
                v70 = *v68;
              if (v70 && (v71 = memcmp(v66 + 4, v68 + 4, v70)) != 0)
              {
                if (v71 < 0)
                  goto LABEL_111;
              }
              else if (v67 < v69)
              {
LABEL_111:
                v72 = a1 + 56;
                do
                {
                  v8 = v72;
                  v73 = *(unsigned int **)(*(_QWORD *)v72 + 16);
                  v74 = *v73;
                  if (v74 >= v67)
                    v75 = v67;
                  else
                    v75 = *v73;
                  if (v75 && (v76 = memcmp(v66 + 4, v73 + 4, v75)) != 0)
                  {
                    v77 = (v76 >> 31) | 1;
                  }
                  else if (v67 == v74)
                  {
                    v77 = 0;
                  }
                  else
                  {
                    if (v67 < v74)
                      break;
                    v77 = 1;
                  }
                  v72 = v8 + 56;
                }
                while (v77 != -1);
LABEL_138:
                v84 = a2;
                if (v8 < (unint64_t)a2)
                {
                  v85 = a2 - 7;
                  do
                  {
                    v84 = v85;
                    v86 = *(unsigned int **)(*v85 + 16);
                    v87 = *v86;
                    if (v87 >= v67)
                      v88 = v67;
                    else
                      v88 = *v86;
                    if (v88 && (v89 = memcmp(v66 + 4, v86 + 4, v88)) != 0)
                    {
                      v90 = (v89 >> 31) | 1;
                    }
                    else
                    {
                      if (v67 >= v87)
                        break;
                      v90 = -1;
                    }
                    v85 = v84 - 7;
                  }
                  while (v90 == -1);
                }
                if (v8 < (unint64_t)v84)
                {
                  v91 = *(_QWORD *)v8;
                  do
                  {
                    v256 = v91;
                    LOBYTE(v257[0]) = 0;
                    v259 = 0;
                    if (*(_BYTE *)(v8 + 32))
                      sub_22F319DE0((uint64_t)v257, v8 + 8);
                    v260 = *(_OWORD *)(v8 + 40);
                    *(_QWORD *)v8 = *v84;
                    sub_22F319E54(v8 + 8, (uint64_t)(v84 + 1));
                    *(_OWORD *)(v8 + 40) = *(_OWORD *)(v84 + 5);
                    *v84 = v256;
                    sub_22F319E54((uint64_t)(v84 + 1), (uint64_t)v257);
                    *(_OWORD *)(v84 + 5) = v260;
                    if (v259 && v257[0] != &v258)
                      free(v257[0]);
                    v15 = v250;
                    v92 = *(unsigned int **)(v250 + 16);
                    v95 = *v92;
                    v94 = v92 + 4;
                    v93 = v95;
                    v96 = (uint64_t *)(v8 + 56);
                    do
                    {
                      v8 = (unint64_t)v96;
                      v91 = *v96;
                      v97 = *(unsigned int **)(*v96 + 16);
                      v98 = *v97;
                      if (v98 >= v93)
                        v99 = v93;
                      else
                        v99 = *v97;
                      if (v99 && (v100 = memcmp(v94, v97 + 4, v99)) != 0)
                      {
                        v101 = (v100 >> 31) | 1;
                      }
                      else if (v93 == v98)
                      {
                        v101 = 0;
                      }
                      else
                      {
                        if (v93 < v98)
                          break;
                        v101 = 1;
                      }
                      v96 = (uint64_t *)(v8 + 56);
                    }
                    while (v101 != -1);
                    v102 = v84 - 7;
                    do
                    {
                      v84 = v102;
                      v103 = *(unsigned int **)(*v102 + 16);
                      v104 = *v103;
                      if (v104 >= v93)
                        v105 = v93;
                      else
                        v105 = *v103;
                      if (v105 && (v106 = memcmp(v94, v103 + 4, v105)) != 0)
                      {
                        v107 = (v106 >> 31) | 1;
                      }
                      else
                      {
                        if (v93 >= v104)
                          break;
                        v107 = -1;
                      }
                      v102 = v84 - 7;
                    }
                    while (v107 == -1);
                  }
                  while (v8 < (unint64_t)v84);
                }
                if (v8 - 56 != a1)
                {
                  *(_QWORD *)a1 = *(_QWORD *)(v8 - 56);
                  sub_22F319E54(a1 + 8, v8 - 48);
                  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v8 - 16);
                  v15 = v250;
                }
                *(_QWORD *)(v8 - 56) = v15;
                sub_22F319E54(v8 - 48, (uint64_t)v252);
                *(_OWORD *)(v8 - 16) = v255;
                v7 = a2;
                if (v254 && v252[0] != &v253)
                  free(v252[0]);
                goto LABEL_102;
              }
              v78 = a1 + 56;
              do
              {
                v8 = v78;
                if (v78 >= (unint64_t)a2)
                  break;
                v79 = *(unsigned int **)(*(_QWORD *)v78 + 16);
                v80 = *v79;
                v81 = v80 >= v67 ? v67 : *v79;
                if (v81 && (v82 = memcmp(v66 + 4, v79 + 4, v81)) != 0)
                {
                  v83 = (v82 >> 31) | 1;
                }
                else if (v67 == v80)
                {
                  v83 = 0;
                }
                else
                {
                  if (v67 < v80)
                    goto LABEL_138;
                  v83 = 1;
                }
                v78 = v8 + 56;
              }
              while (v83 != -1);
              goto LABEL_138;
            }
          }
          if (v17 >= v19)
            goto LABEL_103;
LABEL_23:
          v249 = v15;
          LOBYTE(v252[0]) = 0;
          v254 = 0;
          if (*(_BYTE *)(a1 + 32))
            sub_22F319DE0((uint64_t)v252, a1 + 8);
          v255 = *(_OWORD *)(a1 + 40);
          v22 = *(unsigned int **)(v15 + 16);
          v25 = *v22;
          v24 = v22 + 4;
          v23 = v25;
          v26 = 56;
          do
          {
            v27 = v26;
            v28 = *(_QWORD *)(a1 + v26);
            v29 = *(unsigned int **)(v28 + 16);
            v30 = *v29;
            if (v23 >= v30)
              v31 = *v29;
            else
              v31 = v23;
            if (v31 && (v32 = memcmp(v29 + 4, v24, v31)) != 0)
            {
              v33 = (v32 >> 31) | 1;
            }
            else
            {
              if (v30 >= v23)
                break;
              v33 = -1;
            }
            v26 = v27 + 56;
          }
          while (v33 == -1);
          v242 = a3;
          v34 = a1 + v27;
          v35 = a2 - 7;
          if (v27 == 56)
          {
            v36 = a2 - 7;
            while (v34 < (unint64_t)(v36 + 7))
            {
              v37 = (unint64_t)v36;
              v38 = *(unsigned int **)(*v36 + 16);
              v39 = *v38;
              if (v23 >= v39)
                v40 = *v38;
              else
                v40 = v23;
              if (v40 && (v41 = memcmp(v38 + 4, v24, v40)) != 0)
              {
                v42 = (v41 >> 31) | 1;
              }
              else if (v39 == v23)
              {
                v42 = 0;
              }
              else
              {
                if (v39 < v23)
                  goto LABEL_63;
                v42 = 1;
              }
              v36 = (uint64_t *)(v37 - 56);
              if (v42 == -1)
                goto LABEL_63;
            }
            v37 = (unint64_t)(v36 + 7);
          }
          else
          {
            do
            {
              v37 = (unint64_t)v35;
              v43 = *(unsigned int **)(*v35 + 16);
              v44 = *v43;
              if (v23 >= v44)
                v45 = *v43;
              else
                v45 = v23;
              if (v45 && (v46 = memcmp(v43 + 4, v24, v45)) != 0)
              {
                v47 = (v46 >> 31) | 1;
              }
              else if (v44 == v23)
              {
                v47 = 0;
              }
              else
              {
                if (v44 < v23)
                  break;
                v47 = 1;
              }
              v35 = (uint64_t *)(v37 - 56);
            }
            while (v47 != -1);
          }
LABEL_63:
          v8 = v34;
          if (v34 < v37)
          {
            v48 = v37;
            do
            {
              v256 = v28;
              LOBYTE(v257[0]) = 0;
              v259 = 0;
              if (*(_BYTE *)(v8 + 32))
                sub_22F319DE0((uint64_t)v257, v8 + 8);
              v260 = *(_OWORD *)(v8 + 40);
              *(_QWORD *)v8 = *(_QWORD *)v48;
              sub_22F319E54(v8 + 8, v48 + 8);
              *(_OWORD *)(v8 + 40) = *(_OWORD *)(v48 + 40);
              *(_QWORD *)v48 = v256;
              sub_22F319E54(v48 + 8, (uint64_t)v257);
              *(_OWORD *)(v48 + 40) = v260;
              if (v259 && v257[0] != &v258)
                free(v257[0]);
              v15 = v249;
              v49 = *(unsigned int **)(v249 + 16);
              v52 = *v49;
              v51 = v49 + 4;
              v50 = v52;
              v53 = v8 + 56;
              do
              {
                v8 = v53;
                v28 = *(_QWORD *)v53;
                v54 = *(unsigned int **)(*(_QWORD *)v53 + 16);
                v55 = *v54;
                if (v50 >= v55)
                  v56 = *v54;
                else
                  v56 = v50;
                if (v56 && (v57 = memcmp(v54 + 4, v51, v56)) != 0)
                {
                  v58 = (v57 >> 31) | 1;
                }
                else
                {
                  if (v55 >= v50)
                    break;
                  v58 = -1;
                }
                v53 = v8 + 56;
              }
              while (v58 == -1);
              v59 = v48 - 56;
              do
              {
                v48 = v59;
                v60 = *(unsigned int **)(*(_QWORD *)v59 + 16);
                v61 = *v60;
                if (v50 >= v61)
                  v62 = *v60;
                else
                  v62 = v50;
                if (v62 && (v63 = memcmp(v60 + 4, v51, v62)) != 0)
                {
                  v64 = (v63 >> 31) | 1;
                }
                else if (v61 == v50)
                {
                  v64 = 0;
                }
                else
                {
                  if (v61 < v50)
                    break;
                  v64 = 1;
                }
                v59 = v48 - 56;
              }
              while (v64 != -1);
            }
            while (v8 < v48);
          }
          if (v8 - 56 != a1)
          {
            *(_QWORD *)a1 = *(_QWORD *)(v8 - 56);
            sub_22F319E54(a1 + 8, v8 - 48);
            *(_OWORD *)(a1 + 40) = *(_OWORD *)(v8 - 16);
            v15 = v249;
          }
          *(_QWORD *)(v8 - 56) = v15;
          sub_22F319E54(v8 - 48, (uint64_t)v252);
          *(_OWORD *)(v8 - 16) = v255;
          v7 = a2;
          if (v254 && v252[0] != &v253)
            free(v252[0]);
          a3 = v242;
          a4 = v240;
          if (v34 < v37)
            goto LABEL_101;
          v65 = sub_22E9F201C((uint64_t *)a1, (uint64_t *)(v8 - 56));
          if (!sub_22E9F201C((uint64_t *)v8, a2))
          {
            if (v65)
              continue;
LABEL_101:
            sub_22E9F03E4(a1, v8 - 56, v242, v240 & 1);
LABEL_102:
            a4 = 0;
            goto LABEL_3;
          }
          a2 = (uint64_t *)(v8 - 56);
          if (v65)
            return;
          goto LABEL_2;
        }
        if ((uint64_t *)v8 != v7)
        {
          v248 = (v10 - 2) >> 1;
          v108 = v248;
          while (1)
          {
            v109 = v108;
            if (v248 < v108)
              goto LABEL_211;
            v110 = (2 * v108) | 1;
            v111 = a1 + 56 * v110;
            if (2 * v108 + 2 < (uint64_t)v10)
            {
              v112 = *(unsigned int **)(*(_QWORD *)v111 + 16);
              v113 = *v112;
              v114 = *(unsigned int **)(*(_QWORD *)(v111 + 56) + 16);
              v115 = *v114;
              if (v115 >= v113)
                v116 = *v112;
              else
                v116 = *v114;
              if (v116 && (v117 = memcmp(v112 + 4, v114 + 4, v116)) != 0)
              {
                v118 = (v117 >> 31) | 1;
              }
              else
              {
                if (v113 < v115)
                  v118 = -1;
                else
                  v118 = 1;
                if (v113 == v115)
                  v118 = 0;
              }
              if (v118 == -1)
              {
                v111 += 56;
                v110 = 2 * v109 + 2;
              }
            }
            v119 = a1 + 56 * v109;
            v120 = *(_QWORD *)v111;
            v121 = *(unsigned int **)(*(_QWORD *)v111 + 16);
            v122 = *v121;
            v123 = *(_QWORD *)v119;
            v124 = *(unsigned int **)(*(_QWORD *)v119 + 16);
            v125 = *v124;
            if (v125 >= v122)
              v126 = *v121;
            else
              v126 = *v124;
            if (v126 && (v127 = memcmp(v121 + 4, v124 + 4, v126)) != 0)
            {
              if (v127 < 0)
                goto LABEL_211;
            }
            else if (v122 < v125)
            {
              goto LABEL_211;
            }
            v256 = v123;
            LOBYTE(v257[0]) = 0;
            v259 = 0;
            if (*(_BYTE *)(a1 + 56 * v109 + 32))
            {
              sub_22F319DE0((uint64_t)v257, a1 + 56 * v109 + 8);
              v120 = *(_QWORD *)v111;
            }
            v260 = *(_OWORD *)(a1 + 56 * v109 + 40);
            v243 = v10;
            while (1)
            {
              v128 = v111;
              *(_QWORD *)v119 = v120;
              v129 = v111 + 8;
              sub_22F319E54(v119 + 8, v111 + 8);
              *(_OWORD *)(v119 + 40) = *(_OWORD *)(v111 + 40);
              if (v248 < v110)
                break;
              v130 = (2 * v110) | 1;
              v111 = a1 + 56 * v130;
              v110 = 2 * v110 + 2;
              if (v110 >= (uint64_t)v10)
              {
                v110 = v130;
              }
              else
              {
                v131 = *(unsigned int **)(*(_QWORD *)v111 + 16);
                v132 = *v131;
                v133 = *(unsigned int **)(*(_QWORD *)(v111 + 56) + 16);
                v134 = *v133;
                if (v134 >= v132)
                  v135 = *v131;
                else
                  v135 = *v133;
                if (v135 && (v136 = memcmp(v131 + 4, v133 + 4, v135)) != 0)
                {
                  v137 = (v136 >> 31) | 1;
                }
                else
                {
                  if (v132 < v134)
                    v137 = -1;
                  else
                    v137 = 1;
                  if (v132 == v134)
                    v137 = 0;
                }
                if (v137 == -1)
                  v111 += 56;
                else
                  v110 = v130;
              }
              v120 = *(_QWORD *)v111;
              v138 = *(unsigned int **)(*(_QWORD *)v111 + 16);
              v139 = *v138;
              v140 = v256;
              v141 = *(unsigned int **)(v256 + 16);
              v142 = *v141;
              if (v142 >= v139)
                v143 = *v138;
              else
                v143 = *v141;
              if (v143 && (v144 = memcmp(v138 + 4, v141 + 4, v143)) != 0)
              {
                v146 = (v144 >> 31) | 1;
              }
              else
              {
                v145 = v139 >= v142;
                if (v139 != v142)
                {
                  v10 = v243;
                  if (!v145)
                    goto LABEL_249;
                  v146 = 1;
                  goto LABEL_246;
                }
                v146 = 0;
              }
              v10 = v243;
LABEL_246:
              v119 = v128;
              if (v146 == -1)
                goto LABEL_249;
            }
            v140 = v256;
LABEL_249:
            *(_QWORD *)v128 = v140;
            sub_22F319E54(v129, (uint64_t)v257);
            *(_OWORD *)(v128 + 40) = v260;
            if (v259 && v257[0] != &v258)
              free(v257[0]);
LABEL_211:
            v108 = v109 - 1;
            if (!v109)
            {
              while (2)
              {
                v251 = *(_QWORD *)a1;
                LOBYTE(v252[0]) = 0;
                v254 = 0;
                if (*(_BYTE *)(a1 + 32))
                  sub_22F319DE0((uint64_t)v252, a1 + 8);
                v147 = 0;
                v255 = *(_OWORD *)(a1 + 40);
                v148 = (v10 - 2) >> 1;
                v149 = a1;
                do
                {
                  v150 = v149 + 56 * v147 + 56;
                  v151 = (2 * v147) | 1;
                  v152 = 2 * v147 + 2;
                  if (v152 < (uint64_t)v10)
                  {
                    v153 = v10;
                    v154 = *(unsigned int **)(*(_QWORD *)v150 + 16);
                    v155 = *v154;
                    v156 = *(unsigned int **)(*(_QWORD *)(v150 + 56) + 16);
                    v157 = *v156;
                    if (v157 >= v155)
                      v158 = *v154;
                    else
                      v158 = *v156;
                    if (v158 && (v159 = memcmp(v154 + 4, v156 + 4, v158)) != 0)
                    {
                      v160 = (v159 >> 31) | 1;
                    }
                    else
                    {
                      if (v155 < v157)
                        v160 = -1;
                      else
                        v160 = 1;
                      if (v155 == v157)
                        v160 = 0;
                    }
                    if (v160 == -1)
                    {
                      v150 += 56;
                      v151 = v152;
                    }
                    v10 = v153;
                  }
                  *(_QWORD *)v149 = *(_QWORD *)v150;
                  sub_22F319E54(v149 + 8, v150 + 8);
                  *(_OWORD *)(v149 + 40) = *(_OWORD *)(v150 + 40);
                  v149 = v150;
                  v147 = v151;
                }
                while (v151 <= v148);
                v161 = (__int128 *)(v150 + 40);
                v162 = a2 - 7;
                if ((uint64_t *)v150 == a2 - 7)
                {
                  *(_QWORD *)v150 = v251;
                  sub_22F319E54(v150 + 8, (uint64_t)v252);
                  *v161 = v255;
                }
                else
                {
                  *(_QWORD *)v150 = *(a2 - 7);
                  sub_22F319E54(v150 + 8, (uint64_t)(a2 - 6));
                  *v161 = *((_OWORD *)a2 - 1);
                  *(a2 - 7) = v251;
                  sub_22F319E54((uint64_t)(a2 - 6), (uint64_t)v252);
                  *((_OWORD *)a2 - 1) = v255;
                  v163 = v150 - a1 + 56;
                  if (v163 >= 57)
                  {
                    v247 = (v163 / 0x38uLL - 2) >> 1;
                    v164 = a1 + 56 * v247;
                    v165 = *(unsigned int **)(*(_QWORD *)v164 + 16);
                    v166 = *v165;
                    v244 = *(_QWORD *)v150;
                    v167 = *(unsigned int **)(*(_QWORD *)v150 + 16);
                    v168 = *v167;
                    if (v168 >= v166)
                      v169 = *v165;
                    else
                      v169 = *v167;
                    if (v169 && (v170 = memcmp(v165 + 4, v167 + 4, v169), v164 = a1 + 56 * v247, v170))
                    {
                      if ((v170 & 0x80000000) == 0)
                        goto LABEL_283;
                    }
                    else if (v166 >= v168)
                    {
                      goto LABEL_283;
                    }
                    v256 = v244;
                    LOBYTE(v257[0]) = 0;
                    v259 = 0;
                    if (*(_BYTE *)(v150 + 32))
                    {
                      v172 = v164;
                      sub_22F319DE0((uint64_t)v257, v150 + 8);
                      v164 = v172;
                    }
                    v260 = *v161;
                    v173 = *(_QWORD *)v164;
                    v174 = v247;
                    do
                    {
                      v175 = v164;
                      *(_QWORD *)v150 = v173;
                      v176 = v164 + 8;
                      sub_22F319E54(v150 + 8, v164 + 8);
                      *(_OWORD *)(v150 + 40) = *(_OWORD *)(v175 + 40);
                      v177 = v256;
                      if (!v174)
                        break;
                      v174 = (v174 - 1) >> 1;
                      v164 = a1 + 56 * v174;
                      v173 = *(_QWORD *)v164;
                      v178 = *(unsigned int **)(*(_QWORD *)v164 + 16);
                      v179 = *v178;
                      v180 = *(unsigned int **)(v256 + 16);
                      v181 = *v180;
                      v182 = v181 >= v179 ? *v178 : *v180;
                      if (v182
                        && (v245 = *(_QWORD *)v164,
                            v183 = memcmp(v178 + 4, v180 + 4, v182),
                            v173 = v245,
                            v164 = a1 + 56 * v174,
                            v183))
                      {
                        v184 = (v183 >> 31) | 1;
                      }
                      else
                      {
                        if (v179 >= v181)
                          break;
                        v184 = -1;
                      }
                      v150 = v175;
                    }
                    while (v184 == -1);
                    *(_QWORD *)v175 = v177;
                    sub_22F319E54(v176, (uint64_t)v257);
                    *(_OWORD *)(v175 + 40) = v260;
                    if (v259 && v257[0] != &v258)
                      free(v257[0]);
                  }
                }
LABEL_283:
                if (v254 && v252[0] != &v253)
                  free(v252[0]);
                a2 = v162;
                if ((uint64_t)v10-- <= 2)
                  return;
                continue;
              }
            }
          }
        }
        return;
    }
  }
}

void sub_22E9F1818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  unsigned int *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  size_t v16;
  int v17;
  uint64_t v18;
  unsigned int *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  size_t v24;
  int v25;
  _OWORD *v26;
  uint64_t v27;
  unsigned int *v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unint64_t v32;
  size_t v33;
  int v34;
  _OWORD *v35;
  uint64_t v36;
  unsigned int *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unint64_t v41;
  size_t v42;
  int v43;
  _OWORD *v44;
  void *v45[2];
  uint64_t v46;
  char v47;
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  sub_22E9F23B8(a1, a2, a3, (uint64_t *)a4);
  v10 = *a5;
  v11 = *(unsigned int **)(*a5 + 16);
  v12 = *v11;
  v13 = *(_QWORD *)a4;
  v14 = *(unsigned int **)(*(_QWORD *)a4 + 16);
  v15 = *v14;
  if (v15 >= v12)
    v16 = *v11;
  else
    v16 = *v14;
  if (v16 && (v17 = memcmp(v11 + 4, v14 + 4, v16)) != 0)
  {
    if ((v17 & 0x80000000) == 0)
      return;
  }
  else if (v12 >= v15)
  {
    return;
  }
  LOBYTE(v45[0]) = 0;
  v47 = 0;
  if (*(_BYTE *)(a4 + 32))
  {
    sub_22F319DE0((uint64_t)v45, a4 + 8);
    v10 = *a5;
  }
  v48 = *(_OWORD *)(a4 + 40);
  *(_QWORD *)a4 = v10;
  sub_22F319E54(a4 + 8, (uint64_t)(a5 + 1));
  *(_OWORD *)(a4 + 40) = *(_OWORD *)(a5 + 5);
  *a5 = v13;
  sub_22F319E54((uint64_t)(a5 + 1), (uint64_t)v45);
  *(_OWORD *)(a5 + 5) = v48;
  if (v47 && v45[0] != &v46)
    free(v45[0]);
  v18 = *(_QWORD *)a4;
  v19 = *(unsigned int **)(*(_QWORD *)a4 + 16);
  v20 = *v19;
  v21 = *(_QWORD *)a3;
  v22 = *(unsigned int **)(*(_QWORD *)a3 + 16);
  v23 = *v22;
  if (v23 >= v20)
    v24 = *v19;
  else
    v24 = *v22;
  if (v24 && (v25 = memcmp(v19 + 4, v22 + 4, v24)) != 0)
  {
    if ((v25 & 0x80000000) == 0)
      return;
  }
  else if (v20 >= v23)
  {
    return;
  }
  v26 = (_OWORD *)(a4 + 40);
  LOBYTE(v45[0]) = 0;
  v47 = 0;
  if (*(_BYTE *)(a3 + 32))
  {
    sub_22F319DE0((uint64_t)v45, a3 + 8);
    v18 = *(_QWORD *)a4;
  }
  v48 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)a3 = v18;
  sub_22F319E54(a3 + 8, a4 + 8);
  *(_OWORD *)(a3 + 40) = *v26;
  *(_QWORD *)a4 = v21;
  sub_22F319E54(a4 + 8, (uint64_t)v45);
  *v26 = v48;
  if (v47 && v45[0] != &v46)
    free(v45[0]);
  v27 = *(_QWORD *)a3;
  v28 = *(unsigned int **)(*(_QWORD *)a3 + 16);
  v29 = *v28;
  v30 = *(_QWORD *)a2;
  v31 = *(unsigned int **)(*(_QWORD *)a2 + 16);
  v32 = *v31;
  if (v32 >= v29)
    v33 = *v28;
  else
    v33 = *v31;
  if (v33 && (v34 = memcmp(v28 + 4, v31 + 4, v33)) != 0)
  {
    if ((v34 & 0x80000000) == 0)
      return;
  }
  else if (v29 >= v32)
  {
    return;
  }
  v35 = (_OWORD *)(a3 + 40);
  LOBYTE(v45[0]) = 0;
  v47 = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    sub_22F319DE0((uint64_t)v45, a2 + 8);
    v27 = *(_QWORD *)a3;
  }
  v48 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)a2 = v27;
  sub_22F319E54(a2 + 8, a3 + 8);
  *(_OWORD *)(a2 + 40) = *v35;
  *(_QWORD *)a3 = v30;
  sub_22F319E54(a3 + 8, (uint64_t)v45);
  *v35 = v48;
  if (v47 && v45[0] != &v46)
    free(v45[0]);
  v36 = *(_QWORD *)a2;
  v37 = *(unsigned int **)(*(_QWORD *)a2 + 16);
  v38 = *v37;
  v39 = *(_QWORD *)a1;
  v40 = *(unsigned int **)(*(_QWORD *)a1 + 16);
  v41 = *v40;
  if (v41 >= v38)
    v42 = *v37;
  else
    v42 = *v40;
  if (v42 && (v43 = memcmp(v37 + 4, v40 + 4, v42)) != 0)
  {
    if ((v43 & 0x80000000) == 0)
      return;
  }
  else if (v38 >= v41)
  {
    return;
  }
  v44 = (_OWORD *)(a2 + 40);
  LOBYTE(v45[0]) = 0;
  v47 = 0;
  if (*(_BYTE *)(a1 + 32))
  {
    sub_22F319DE0((uint64_t)v45, a1 + 8);
    v36 = *(_QWORD *)a2;
  }
  v48 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)a1 = v36;
  sub_22F319E54(a1 + 8, a2 + 8);
  *(_OWORD *)(a1 + 40) = *v44;
  *(_QWORD *)a2 = v39;
  sub_22F319E54(a2 + 8, (uint64_t)v45);
  *v44 = v48;
  if (v47)
  {
    if (v45[0] != &v46)
      free(v45[0]);
  }
}

void sub_22E9F1BEC(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;
  size_t v8;
  uint64_t v9;
  unsigned int *v10;
  size_t v11;
  size_t v12;
  int v13;
  uint64_t v14;
  unsigned int *v15;
  size_t v16;
  size_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  size_t v22;
  size_t v23;
  int v24;
  uint64_t v25;
  unsigned int *v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unint64_t v30;
  size_t v31;
  int v32;
  _OWORD *v33;
  uint64_t v34;
  unsigned int *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unint64_t v39;
  size_t v40;
  int v41;
  __int128 *v42;
  void *v43[2];
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v7 = *(unsigned int **)(*a2 + 16);
  v8 = *v7;
  v9 = *a1;
  v10 = *(unsigned int **)(*a1 + 16);
  v11 = *v10;
  if (v11 >= v8)
    v12 = *v7;
  else
    v12 = *v10;
  if (v12)
  {
    v13 = memcmp(v7 + 4, v10 + 4, v12);
    if (v13)
    {
      if (v13 < 0)
        goto LABEL_7;
LABEL_21:
      v20 = *a3;
      v21 = *(unsigned int **)(*a3 + 16);
      v22 = *v21;
      if (v8 >= v22)
        v23 = *v21;
      else
        v23 = v8;
      if (v23 && (v24 = memcmp(v21 + 4, v7 + 4, v23)) != 0)
      {
        if ((v24 & 0x80000000) == 0)
          return;
      }
      else if (v22 >= v8)
      {
        return;
      }
      LOBYTE(v43[0]) = 0;
      v45 = 0;
      if (*((_BYTE *)a2 + 32))
      {
        sub_22F319DE0((uint64_t)v43, (uint64_t)(a2 + 1));
        v20 = *a3;
      }
      v46 = *(_OWORD *)(a2 + 5);
      *a2 = v20;
      sub_22F319E54((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
      *(_OWORD *)(a2 + 5) = *(_OWORD *)(a3 + 5);
      *a3 = v6;
      sub_22F319E54((uint64_t)(a3 + 1), (uint64_t)v43);
      *(_OWORD *)(a3 + 5) = v46;
      if (v45 && v43[0] != &v44)
        free(v43[0]);
      v25 = *a2;
      v26 = *(unsigned int **)(*a2 + 16);
      v27 = *v26;
      v28 = *a1;
      v29 = *(unsigned int **)(*a1 + 16);
      v30 = *v29;
      if (v30 >= v27)
        v31 = *v26;
      else
        v31 = *v29;
      if (v31 && (v32 = memcmp(v26 + 4, v29 + 4, v31)) != 0)
      {
        if ((v32 & 0x80000000) == 0)
          return;
      }
      else if (v27 >= v30)
      {
        return;
      }
      v33 = a2 + 5;
      LOBYTE(v43[0]) = 0;
      v45 = 0;
      if (*((_BYTE *)a1 + 32))
      {
        sub_22F319DE0((uint64_t)v43, (uint64_t)(a1 + 1));
        v25 = *a2;
      }
      v46 = *(_OWORD *)(a1 + 5);
      *a1 = v25;
      sub_22F319E54((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
      *(_OWORD *)(a1 + 5) = *v33;
      *a2 = v28;
      sub_22F319E54((uint64_t)(a2 + 1), (uint64_t)v43);
      *v33 = v46;
      goto LABEL_17;
    }
  }
  if (v8 >= v11)
    goto LABEL_21;
LABEL_7:
  v14 = *a3;
  v15 = *(unsigned int **)(*a3 + 16);
  v16 = *v15;
  if (v8 >= v16)
    v17 = *v15;
  else
    v17 = v8;
  if (v17)
  {
    v18 = memcmp(v15 + 4, v7 + 4, v17);
    if (v18)
    {
      if (v18 < 0)
        goto LABEL_13;
LABEL_47:
      LOBYTE(v43[0]) = 0;
      v45 = 0;
      if (*((_BYTE *)a1 + 32))
      {
        sub_22F319DE0((uint64_t)v43, (uint64_t)(a1 + 1));
        v6 = *a2;
      }
      v46 = *(_OWORD *)(a1 + 5);
      *a1 = v6;
      sub_22F319E54((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
      *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
      *a2 = v9;
      sub_22F319E54((uint64_t)(a2 + 1), (uint64_t)v43);
      *(_OWORD *)(a2 + 5) = v46;
      if (v45 && v43[0] != &v44)
        free(v43[0]);
      v34 = *a3;
      v35 = *(unsigned int **)(*a3 + 16);
      v36 = *v35;
      v37 = *a2;
      v38 = *(unsigned int **)(*a2 + 16);
      v39 = *v38;
      if (v39 >= v36)
        v40 = *v35;
      else
        v40 = *v38;
      if (v40 && (v41 = memcmp(v35 + 4, v38 + 4, v40)) != 0)
      {
        if ((v41 & 0x80000000) == 0)
          return;
      }
      else if (v36 >= v39)
      {
        return;
      }
      v42 = (__int128 *)(a2 + 5);
      LOBYTE(v43[0]) = 0;
      v45 = 0;
      if (*((_BYTE *)a2 + 32))
      {
        sub_22F319DE0((uint64_t)v43, (uint64_t)(a2 + 1));
        v34 = *a3;
      }
      v46 = *v42;
      *a2 = v34;
      sub_22F319E54((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
      *v42 = *(_OWORD *)(a3 + 5);
      *a3 = v37;
      v19 = (uint64_t)(a3 + 1);
      goto LABEL_16;
    }
  }
  if (v16 >= v8)
    goto LABEL_47;
LABEL_13:
  LOBYTE(v43[0]) = 0;
  v45 = 0;
  if (*((_BYTE *)a1 + 32))
  {
    sub_22F319DE0((uint64_t)v43, (uint64_t)(a1 + 1));
    v14 = *a3;
  }
  v46 = *(_OWORD *)(a1 + 5);
  *a1 = v14;
  sub_22F319E54((uint64_t)(a1 + 1), (uint64_t)(a3 + 1));
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a3 + 5);
  *a3 = v9;
  v19 = (uint64_t)(a3 + 1);
LABEL_16:
  sub_22F319E54(v19, (uint64_t)v43);
  *(_OWORD *)(a3 + 5) = v46;
LABEL_17:
  if (v45)
  {
    if (v43[0] != &v44)
      free(v43[0]);
  }
}

BOOL sub_22E9F201C(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  size_t v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int *v19;
  unint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  size_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unsigned int *v30;
  unint64_t v31;
  unsigned int *v32;
  unint64_t v33;
  size_t v34;
  int v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  int v39;
  void *v40[2];
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t v44;

  v2 = a2;
  v44 = *MEMORY[0x24BDAC8D0];
  v4 = 0x6DB6DB6DB6DB6DB7 * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 7);
      v7 = *(unsigned int **)(v6 + 16);
      v8 = *v7;
      v9 = *a1;
      v10 = *(unsigned int **)(*a1 + 16);
      v11 = *v10;
      if (v11 >= v8)
        v12 = *v7;
      else
        v12 = *v10;
      if (v12 && (v13 = memcmp(v7 + 4, v10 + 4, v12)) != 0)
      {
        if ((v13 & 0x80000000) == 0)
          return 1;
      }
      else if (v8 >= v11)
      {
        return 1;
      }
      LOBYTE(v40[0]) = 0;
      v42 = 0;
      if (*((_BYTE *)a1 + 32))
      {
        sub_22F319DE0((uint64_t)v40, (uint64_t)(a1 + 1));
        v6 = *(v2 - 7);
      }
      v43 = *(_OWORD *)(a1 + 5);
      *a1 = v6;
      sub_22F319E54((uint64_t)(a1 + 1), (uint64_t)(v2 - 6));
      *(_OWORD *)(a1 + 5) = *((_OWORD *)v2 - 1);
      *(v2 - 7) = v9;
      sub_22F319E54((uint64_t)(v2 - 6), (uint64_t)v40);
      *((_OWORD *)v2 - 1) = v43;
      if (v42)
      {
        if (v40[0] != &v41)
          free(v40[0]);
      }
      return 1;
    case 3:
      sub_22E9F1BEC(a1, a1 + 7, a2 - 7);
      return 1;
    case 4:
      sub_22E9F23B8((uint64_t)a1, (uint64_t)(a1 + 7), (uint64_t)(a1 + 14), a2 - 7);
      return 1;
    case 5:
      sub_22E9F1818((uint64_t)a1, (uint64_t)(a1 + 7), (uint64_t)(a1 + 14), (uint64_t)(a1 + 21), a2 - 7);
      return 1;
    default:
      v14 = a1 + 14;
      sub_22E9F1BEC(a1, a1 + 7, a1 + 14);
      v15 = a1 + 21;
      if (a1 + 21 == v2)
        return 1;
      v16 = 0;
      v17 = 0;
      v38 = v2;
      break;
  }
  do
  {
    v18 = *v15;
    v19 = *(unsigned int **)(*v15 + 16);
    v20 = *v19;
    v21 = *(unsigned int **)(*v14 + 16);
    v22 = *v21;
    if (v22 >= v20)
      v23 = *v19;
    else
      v23 = *v21;
    if (v23 && (v24 = memcmp(v19 + 4, v21 + 4, v23)) != 0)
    {
      if ((v24 & 0x80000000) == 0)
        goto LABEL_19;
    }
    else if (v20 >= v22)
    {
      goto LABEL_19;
    }
    v39 = v17;
    LOBYTE(v40[0]) = 0;
    v42 = 0;
    if (*((_BYTE *)v15 + 32))
      sub_22F319DE0((uint64_t)v40, (uint64_t)(v15 + 1));
    v43 = *(_OWORD *)(v15 + 5);
    v25 = *v14;
    v26 = v16;
    while (1)
    {
      v27 = v26;
      v28 = (char *)a1 + v26;
      *(uint64_t *)((char *)a1 + v26 + 168) = v25;
      v29 = (uint64_t)a1 + v26 + 120;
      sub_22F319E54((uint64_t)a1 + v26 + 176, v29);
      *((_OWORD *)v28 + 13) = *(_OWORD *)(v28 + 152);
      if (v27 == -112)
        break;
      v30 = *(unsigned int **)(v18 + 16);
      v31 = *v30;
      v25 = *((_QWORD *)v28 + 7);
      v32 = *(unsigned int **)(v25 + 16);
      v33 = *v32;
      if (v33 >= v31)
        v34 = *v30;
      else
        v34 = *v32;
      if (v34 && (v35 = memcmp(v30 + 4, v32 + 4, v34)) != 0)
      {
        v36 = (v35 >> 31) | 1;
      }
      else
      {
        if (v31 >= v33)
          goto LABEL_34;
        v36 = -1;
      }
      v26 = v27 - 56;
      if (v36 != -1)
      {
LABEL_34:
        v37 = (uint64_t *)((char *)a1 + v27 + 112);
        goto LABEL_36;
      }
    }
    v37 = a1;
LABEL_36:
    *v37 = v18;
    sub_22F319E54(v29, (uint64_t)v40);
    *(_OWORD *)(v28 + 152) = v43;
    v2 = v38;
    if (v42 && v40[0] != &v41)
      free(v40[0]);
    v17 = v39 + 1;
    if (v39 == 7)
      return v15 + 7 == v38;
LABEL_19:
    v14 = v15;
    v16 += 56;
    v15 += 7;
  }
  while (v15 != v2);
  return 1;
}

void sub_22E9F23B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned int *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  size_t v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unint64_t v21;
  size_t v22;
  int v23;
  _OWORD *v24;
  uint64_t v25;
  unsigned int *v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unint64_t v30;
  size_t v31;
  int v32;
  _OWORD *v33;
  void *v34[2];
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  sub_22E9F1BEC((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  v8 = *a4;
  v9 = *(unsigned int **)(*a4 + 16);
  v10 = *v9;
  v11 = *(_QWORD *)a3;
  v12 = *(unsigned int **)(*(_QWORD *)a3 + 16);
  v13 = *v12;
  if (v13 >= v10)
    v14 = *v9;
  else
    v14 = *v12;
  if (v14 && (v15 = memcmp(v9 + 4, v12 + 4, v14)) != 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
  }
  else if (v10 >= v13)
  {
    return;
  }
  LOBYTE(v34[0]) = 0;
  v36 = 0;
  if (*(_BYTE *)(a3 + 32))
  {
    sub_22F319DE0((uint64_t)v34, a3 + 8);
    v8 = *a4;
  }
  v37 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)a3 = v8;
  sub_22F319E54(a3 + 8, (uint64_t)(a4 + 1));
  *(_OWORD *)(a3 + 40) = *(_OWORD *)(a4 + 5);
  *a4 = v11;
  sub_22F319E54((uint64_t)(a4 + 1), (uint64_t)v34);
  *(_OWORD *)(a4 + 5) = v37;
  if (v36 && v34[0] != &v35)
    free(v34[0]);
  v16 = *(_QWORD *)a3;
  v17 = *(unsigned int **)(*(_QWORD *)a3 + 16);
  v18 = *v17;
  v19 = *(_QWORD *)a2;
  v20 = *(unsigned int **)(*(_QWORD *)a2 + 16);
  v21 = *v20;
  if (v21 >= v18)
    v22 = *v17;
  else
    v22 = *v20;
  if (v22 && (v23 = memcmp(v17 + 4, v20 + 4, v22)) != 0)
  {
    if ((v23 & 0x80000000) == 0)
      return;
  }
  else if (v18 >= v21)
  {
    return;
  }
  v24 = (_OWORD *)(a3 + 40);
  LOBYTE(v34[0]) = 0;
  v36 = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    sub_22F319DE0((uint64_t)v34, a2 + 8);
    v16 = *(_QWORD *)a3;
  }
  v37 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)a2 = v16;
  sub_22F319E54(a2 + 8, a3 + 8);
  *(_OWORD *)(a2 + 40) = *v24;
  *(_QWORD *)a3 = v19;
  sub_22F319E54(a3 + 8, (uint64_t)v34);
  *v24 = v37;
  if (v36 && v34[0] != &v35)
    free(v34[0]);
  v25 = *(_QWORD *)a2;
  v26 = *(unsigned int **)(*(_QWORD *)a2 + 16);
  v27 = *v26;
  v28 = *(_QWORD *)a1;
  v29 = *(unsigned int **)(*(_QWORD *)a1 + 16);
  v30 = *v29;
  if (v30 >= v27)
    v31 = *v26;
  else
    v31 = *v29;
  if (v31 && (v32 = memcmp(v26 + 4, v29 + 4, v31)) != 0)
  {
    if ((v32 & 0x80000000) == 0)
      return;
  }
  else if (v27 >= v30)
  {
    return;
  }
  v33 = (_OWORD *)(a2 + 40);
  LOBYTE(v34[0]) = 0;
  v36 = 0;
  if (*(_BYTE *)(a1 + 32))
  {
    sub_22F319DE0((uint64_t)v34, a1 + 8);
    v25 = *(_QWORD *)a2;
  }
  v37 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)a1 = v25;
  sub_22F319E54(a1 + 8, a2 + 8);
  *(_OWORD *)(a1 + 40) = *v33;
  *(_QWORD *)a2 = v28;
  sub_22F319E54(a2 + 8, (uint64_t)v34);
  *v33 = v37;
  if (v36)
  {
    if (v34[0] != &v35)
      free(v34[0]);
  }
}

void sub_22E9F26AC(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t *v9;
  BOOL v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t *v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t **v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  void *v29;
  __int128 v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  void *__p[2];
  __int128 v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  _OWORD v48[2];
  __int128 v49;
  void *v50;
  uint64_t v51;
  _BYTE v52[64];
  void *v53;
  uint64_t v54;
  _QWORD v55[4];

  v55[2] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v8 = sub_22E9DD0D8(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 88), a2);
    if (v8)
    {
      v29 = (void *)a2;
      while (1)
      {
        v9 = (unint64_t *)(v8 & 0xFFFFFFFFFFFFFFF8);
        v10 = (v8 & 0xFFFFFFFFFFFFFFF8) == 0 || (v8 & 4) == 0;
        v11 = v8 & 0xFFFFFFFFFFFFFFF8;
        if (!v10)
          v11 = *v9;
        v12 = *(_QWORD **)(a1 + 32);
        v13 = v12[1];
        v48[0] = *(_OWORD *)(*v12 + 192);
        v48[1] = 0u;
        v49 = 0u;
        v50 = v52;
        v51 = 0x400000000;
        v53 = v55;
        v54 = 0x200000000;
        sub_22E8A9AD8((uint64_t)v48, a4);
        sub_22E8A9D90((uint64_t)v48, 7, "");
        if (v11 && (*(_DWORD *)(v11 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
        {
          v14 = *(_QWORD *)(v13 + 80);
          v15 = v12[2];
          v16 = v11;
        }
        else
        {
          if (!v11 || (*(_DWORD *)(v11 + 28) & 0x7F) != 0x1D)
            goto LABEL_16;
          v14 = *(_QWORD *)(v13 + 80);
          v15 = v12[2];
          v16 = *(_QWORD *)(v11 + 48);
        }
        sub_22E9B60CC(v14, v15, v16, (uint64_t *)v48, 0, 0);
LABEL_16:
        sub_22E8A9D90((uint64_t)v48, 8, "");
        v17 = (void *)sub_22F2F28A4((uint64_t)v48);
        if (v53 != v55)
          free(v53);
        if (v50 != v52)
          free(v50);
        __p[0] = v29;
        __p[1] = v17;
        LODWORD(v40) = a3;
        *(_QWORD *)((char *)&v40 + 4) = 0x300000000;
        v41 = 0;
        v43 = 0;
        v44 = 0;
        v42 = 0;
        LOBYTE(v45) = v45 & 0xC0;
        v46 = 0uLL;
        *((_QWORD *)&v45 + 1) = 0;
        sub_22E8AB5B4((uint64_t)__p, 1);
        HIDWORD(v40) = sub_22E9B8178(v11);
        v18 = *(uint64_t **)(a1 + 8);
        v33 = v41;
        v31 = *(_OWORD *)__p;
        v32 = v40;
        v35 = 0;
        v36 = 0;
        v34 = 0;
        sub_22E6C6020(&v34, v42, v43, 0x6DB6DB6DB6DB6DB7 * ((v43 - v42) >> 3));
        v37 = v45;
        v38 = v46;
        v19 = v18[1];
        if (v19 >= v18[2])
        {
          v23 = sub_22E9D8E48(v18, (uint64_t)&v31);
        }
        else
        {
          v20 = v31;
          v21 = v32;
          *(_DWORD *)(v19 + 32) = v33;
          *(_OWORD *)v19 = v20;
          *(_OWORD *)(v19 + 16) = v21;
          *(_QWORD *)(v19 + 40) = 0;
          *(_QWORD *)(v19 + 48) = 0;
          *(_QWORD *)(v19 + 56) = 0;
          sub_22E6C6020((_QWORD *)(v19 + 40), v34, v35, 0x6DB6DB6DB6DB6DB7 * ((v35 - v34) >> 3));
          v22 = v38;
          *(_OWORD *)(v19 + 64) = v37;
          *(_OWORD *)(v19 + 80) = v22;
          v23 = v19 + 96;
        }
        v18[1] = v23;
        *(_QWORD *)&v48[0] = &v34;
        sub_22E6C60B8((void ***)v48);
        *(_QWORD *)&v48[0] = &v42;
        sub_22E6C60B8((void ***)v48);
        if (!v10)
        {
          v8 = v9[1];
          if (v8)
            continue;
        }
        return;
      }
    }
    sub_22E9F2AA8(*(uint64_t ***)a1, a4, a4, a2);
  }
  else
  {
    v25 = *(uint64_t ***)a1;
    if (a5)
    {
      v26 = *(_QWORD *)(a1 + 16);
      v27 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 192);
      v47 = *(_QWORD *)(a5 + 48);
      __p[1] = 0;
      *(_QWORD *)&v40 = 0;
      __p[0] = 0;
      sub_22F119374(&v47, (__int128 *)__p, v26);
      LOWORD(v49) = 260;
      *(_QWORD *)&v48[0] = __p;
      v28 = sub_22F2F27DC(v27, (const char **)v48);
      sub_22E9F2AA8(v25, a4, (uint64_t)v28, a5);
      if (SBYTE7(v40) < 0)
        operator delete(__p[0]);
    }
    else
    {
      sub_22E9F2AA8(*(uint64_t ***)a1, a4, a4, 0);
    }
  }
}

void sub_22E9F2AA8(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  void ***v23;
  __int128 v24;
  _BYTE v25[20];
  _QWORD v26[3];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  void **v45;
  _OWORD v46[3];
  _BYTE *v47;
  uint64_t v48;
  _BYTE v49[64];
  _QWORD *v50;
  uint64_t v51;
  _QWORD v52[4];

  v52[3] = *MEMORY[0x24BDAC8D0];
  v46[0] = *((_OWORD *)*a1 + 12);
  memset(&v46[1], 0, 32);
  v47 = v49;
  v48 = 0x400000000;
  v50 = v52;
  v51 = 0x200000000;
  sub_22E8A9AD8((uint64_t)v46, a2);
  sub_22E8A9D90((uint64_t)v46, 7, "");
  sub_22E8A9C00((uint64_t)v46, a3);
  sub_22E8A9D90((uint64_t)v46, 8, "");
  if (a4)
  {
    v15 = sub_22F2F28A4((uint64_t)v46);
    if (*(_BYTE *)a1[1])
      v16 = 7;
    else
      v16 = 35;
    *(_QWORD *)&v37 = a4;
    *((_QWORD *)&v37 + 1) = v15;
    *(_QWORD *)((char *)&v38 + 4) = 0x300000000;
    LODWORD(v38) = v16;
    v39 = 0;
    LOBYTE(v43) = 0;
    v41 = 0;
    v42 = 0;
    v40 = 0;
    v44 = 0uLL;
    *((_QWORD *)&v43 + 1) = 0;
    sub_22E8AB5B4((uint64_t)&v37, 1);
    if ((*(_DWORD *)(a4 + 28) & 0x7Fu) - 49 <= 2)
      HIDWORD(v38) = 47;
    v17 = *a1;
    v29 = v37;
    v30 = v38;
    v31 = v39;
    v33 = 0;
    v34 = 0;
    v32 = 0;
    sub_22E6C6020(&v32, v40, v41, 0x6DB6DB6DB6DB6DB7 * ((v41 - v40) >> 3));
    v35 = v43;
    v36 = v44;
    v18 = v17[1];
    if (v18 >= v17[2])
    {
      v22 = sub_22E9D8E48(v17, (uint64_t)&v29);
    }
    else
    {
      v19 = v29;
      v20 = v30;
      *(_DWORD *)(v18 + 32) = v31;
      *(_OWORD *)v18 = v19;
      *(_OWORD *)(v18 + 16) = v20;
      *(_QWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      sub_22E6C6020((_QWORD *)(v18 + 40), v32, v33, 0x6DB6DB6DB6DB6DB7 * ((v33 - v32) >> 3));
      v21 = v36;
      *(_OWORD *)(v18 + 64) = v35;
      *(_OWORD *)(v18 + 80) = v21;
      v22 = v18 + 96;
    }
    v17[1] = v22;
    v45 = (void **)&v32;
    sub_22E6C60B8(&v45);
    v45 = (void **)&v40;
    v23 = &v45;
  }
  else
  {
    v7 = *a1;
    v8 = sub_22F2F28A4((uint64_t)v46);
    if (*(_BYTE *)a1[1])
      v9 = 7;
    else
      v9 = 35;
    *(_QWORD *)&v24 = 0;
    *((_QWORD *)&v24 + 1) = v8;
    *(_DWORD *)v25 = v9;
    *(_OWORD *)&v25[4] = xmmword_22F46A000;
    memset(v26, 0, sizeof(v26));
    LOBYTE(v27) = 0;
    v28 = 0uLL;
    *((_QWORD *)&v27 + 1) = 0;
    v10 = v7[1];
    if (v10 >= v7[2])
    {
      v14 = sub_22E9D8E48(v7, (uint64_t)&v24);
    }
    else
    {
      v11 = v24;
      v12 = *(_OWORD *)v25;
      *(_DWORD *)(v10 + 32) = *(_DWORD *)&v25[16];
      *(_OWORD *)v10 = v11;
      *(_OWORD *)(v10 + 16) = v12;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_QWORD *)(v10 + 40) = 0;
      v13 = v28;
      *(_OWORD *)(v10 + 64) = v27;
      *(_OWORD *)(v10 + 80) = v13;
      v14 = v10 + 96;
    }
    v7[1] = v14;
    *(_QWORD *)&v37 = v26;
    v23 = (void ***)&v37;
  }
  sub_22E6C60B8(v23);
  if (v50 != v52)
    free(v50);
  if (v47 != v49)
    free(v47);
}

uint64_t sub_22E9F2DA8(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 24 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 24 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *sub_22E9F2E40(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F31A0B8(a1, v4, (_QWORD *)v4 + 2 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -1;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

unint64_t sub_22E9F2F00(unint64_t a1, void *__s2, size_t __n)
{
  unint64_t v6;
  int *v8;
  const void *v9;
  int v10;
  unint64_t result;

  while (1)
  {
    v6 = *(_QWORD *)(a1 + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(a1 + 40) & 7) == 0 && v6 != 0)
    {
      v8 = *(int **)(v6 + 16);
      v10 = *v8;
      v9 = v8 + 4;
      if (v10 == __n && (!__n || !memcmp(v9, __s2, __n)))
        break;
    }
    result = sub_22F3B46CC(a1);
    a1 = result;
    if (!result)
      return result;
  }
  return 1;
}

void sub_22E9F2F80(uint64_t a1, void *__src, size_t __n, char a4)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  char v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  const char *v15;
  size_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  int v27;
  _QWORD v28[3];
  __int128 v29;
  __int128 v30;
  void **v31[2];
  char *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  void *v36;
  uint64_t v37;
  _BYTE v38[64];
  void *v39;
  uint64_t v40;
  _BYTE v41[16];
  void **v42;
  __int128 v43;
  _QWORD v44[9];

  v44[8] = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 24);
  v42 = (void **)v44;
  v43 = xmmword_22F44E300;
  if (__n < 0x41)
  {
    v9 = 0;
    if (!__n)
      goto LABEL_4;
    goto LABEL_3;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  v9 = v43;
  if (__n)
  {
LABEL_3:
    memcpy((char *)v42 + v9, __src, __n);
    v9 = v43;
  }
LABEL_4:
  v10 = v9 + __n;
  *(_QWORD *)&v43 = v10;
  if ((a4 & 1) != 0)
  {
    v11 = 47;
  }
  else if (**(_BYTE **)a1)
  {
    v11 = 62;
  }
  else
  {
    v11 = 34;
  }
  if (v10 + 1 > *((_QWORD *)&v43 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v10 = v43;
  }
  *((_BYTE *)v42 + v10) = v11;
  *(_QWORD *)&v43 = v43 + 1;
  v12 = *(_QWORD *)(a1 + 8);
  v31[0] = v42;
  v31[1] = (void **)v43;
  sub_22F31A16C((uint64_t)&v32, v12, (const void **)v31);
  if ((_BYTE)v34)
  {
    v13 = v32;
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 192);
    LOWORD(v35) = 261;
    v32 = (char *)v42;
    v33 = v43;
    v15 = sub_22F2F27DC(v14, (const char **)&v32);
    v16 = strlen(v15);
    *(_QWORD *)v13 = v15;
    *((_QWORD *)v13 + 1) = v16;
    v17 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 208) + 40))(*(_QWORD *)(v8 + 208));
    v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 208) + 48))(*(_QWORD *)(v8 + 208));
    v32 = (char *)v17;
    v33 = v18;
    v34 = 0u;
    v35 = 0u;
    v36 = v38;
    v37 = 0x400000000;
    v39 = v41;
    v40 = 0x200000000;
    sub_22E8A9AD8((uint64_t)&v32, (uint64_t)v15);
    v19 = *(uint64_t **)(a1 + 16);
    *(_QWORD *)&v25 = 0;
    *((_QWORD *)&v25 + 1) = sub_22F2F28A4((uint64_t)&v32);
    v26 = xmmword_22F469F30;
    v27 = 0;
    memset(v28, 0, sizeof(v28));
    LOBYTE(v29) = 0;
    v30 = 0uLL;
    *((_QWORD *)&v29 + 1) = 0;
    v20 = v19[1];
    if (v20 >= v19[2])
    {
      v24 = sub_22E9D8E48(v19, (uint64_t)&v25);
    }
    else
    {
      v21 = v25;
      v22 = v26;
      *(_DWORD *)(v20 + 32) = v27;
      *(_OWORD *)v20 = v21;
      *(_OWORD *)(v20 + 16) = v22;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_QWORD *)(v20 + 40) = 0;
      v23 = v30;
      *(_OWORD *)(v20 + 64) = v29;
      *(_OWORD *)(v20 + 80) = v23;
      v24 = v20 + 96;
    }
    v19[1] = v24;
    v31[0] = (void **)v28;
    sub_22E6C60B8(v31);
    if (v39 != v41)
      free(v39);
    if (v36 != v38)
      free(v36);
  }
  if (v42 != v44)
    free(v42);
}

uint64_t sub_22E9F3234(uint64_t a1, unsigned __int8 *a2, __int128 *a3, BOOL *a4, char a5)
{
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  uint64_t v28;
  unsigned int v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  __int128 v35;
  uint64_t v36;

  v9 = sub_22EFFA6B0(a2);
  sub_22E9F34E0((uint64_t)&v29, v9);
  if (v29 - 35 > 1)
  {
    if (*v9 == 173)
    {
      v11 = (uint64_t *)(v9 + 16);
      v12 = &v33;
      goto LABEL_6;
    }
    v14 = *((_QWORD *)v9 + 1);
    v32 = v14;
    v15 = *(_DWORD *)v9;
    if ((*(_DWORD *)v9 & 0x8000) != 0)
    {
      if (!a4)
        return 1;
      v16 = *((unsigned __int16 *)a3 + 8);
      if (v16 == 21)
      {
        if ((a5 & 1) != 0
          || (v17 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0), *(_DWORD *)v9 == 211)
          && (*(_DWORD *)(v17 + 16) & 0x400) != 0
          || ((v18 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 16),
               (v18 & 0xFF800FF) != 0x820000B)
            ? (v19 = v18 - 25 >= 2)
            : (v19 = 0),
              !v19))
        {
          v20 = 1;
          v10 = 1;
          goto LABEL_33;
        }
      }
    }
    else
    {
      if (*(_QWORD *)(*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(a1 + 88) + 16400) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
      {
        v10 = 1;
        if (!a4)
          return v10;
        v20 = 0;
LABEL_33:
        *a4 = v20;
        return v10;
      }
      sub_22EFF605C((uint64_t)v9);
      sub_22E8FCA40((_QWORD *)a1, v21, 0xFB9u, 0, (uint64_t)&v29);
      v22 = sub_22E8901B8((uint64_t)&v29, &v32);
      sub_22F0D4E74((uint64_t)v9);
      v28 = v23;
      sub_22E8906A0(v22, &v28);
      sub_22E903BEC(&v29);
      if (!a4)
        return 0;
      v16 = *((unsigned __int16 *)a3 + 8);
      if (v16 == 21)
      {
        if ((a5 & 1) != 0
          || (v24 = *(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF0), (*(_BYTE *)(v24 + 17) & 4) != 0) && *v9 == 211
          || ((v25 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 16),
               (v25 & 0xFF800FF) != 0x820000B)
            ? (v26 = v25 - 25 >= 2)
            : (v26 = 0),
              !v26))
        {
          v10 = 0;
          v20 = 1;
          goto LABEL_33;
        }
      }
    }
    v10 = (v15 >> 15) & 1;
    v20 = (int)sub_22F1DD1BC(v16, 1, (**(_QWORD **)(a1 + 72) >> 9) & 1) > 5;
    goto LABEL_33;
  }
  v35 = *a3;
  v36 = *((_QWORD *)a3 + 2);
  v10 = 0;
  if (sub_22E9F3234(a1, v30, &v35, a4, 0))
  {
    v11 = &v31;
    v12 = &v34;
LABEL_6:
    v13 = *v11;
    *(_OWORD *)v12 = *a3;
    *((_QWORD *)v12 + 2) = *((_QWORD *)a3 + 2);
    return sub_22E9F3234(a1, v13, v12, a4, 0);
  }
  return v10;
}

uint64_t sub_22E9F34E0(uint64_t result, unsigned __int8 *a2)
{
  int v2;
  unsigned __int8 *v3;

  *(_DWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v2 = *a2;
  if ((v2 & 0xFE) == 0x70)
  {
    *(_DWORD *)result = dword_22F4A2BC4[((unint64_t)*(unsigned int *)a2 >> 18) & 0x3F];
    *(_QWORD *)(result + 8) = *((_QWORD *)a2 + 2);
    v3 = a2 + 24;
LABEL_6:
    *(_QWORD *)(result + 16) = *(_QWORD *)v3;
    return result;
  }
  if (v2 == 141 && *((_DWORD *)a2 + 4) == 2)
  {
    *(_DWORD *)result = *((_DWORD *)a2 + 1) & 0x3F;
    *(_QWORD *)(result + 8) = *(_QWORD *)&a2[8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)
                                           + 8
                                           + ((unint64_t)*(unsigned int *)a2 >> 24)];
    v3 = &a2[8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)
           + 16
           + ((unint64_t)*(unsigned int *)a2 >> 24)];
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_22E9F3578(uint64_t a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4, _BYTE *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  char v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t NodeOrInsertPos;
  int v30;
  int32x2_t v31;
  char v32;
  uint64_t v33[5];
  uint64_t v34;
  int v35;
  void *v36[2];
  _BYTE v37[128];
  void *v38[2];
  _QWORD v39[8];
  int v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (!a4)
  {
    v20 = 0;
    *(_BYTE *)(a8 + 128) = 1;
    return v20;
  }
  v36[0] = v37;
  v36[1] = (void *)0x2000000000;
  if (a2)
    v15 = HIDWORD(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 140)) & 1;
  else
    v15 = 0;
  if ((v15 & 1) != 0)
  {
    sub_22F365138((uint64_t)v36, *(_QWORD *)(a1 + 88), a2, (uint64_t)a5, a6);
    NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
    if (NodeOrInsertPos)
    {
      v16 = NodeOrInsertPos;
LABEL_38:
      *(_QWORD *)a8 = *(_QWORD *)v16;
      *(_QWORD *)(a8 + 8) = *(_QWORD *)(v16 + 8);
      sub_22F2E32AC(a8 + 16, v16 + 16);
      *(_BYTE *)(a8 + 128) = *(_BYTE *)(v16 + 128);
      sub_22E9F6214(a8 + 136, v16 + 136);
      goto LABEL_30;
    }
    v16 = operator new();
    *(_QWORD *)v16 = 0;
    *(_QWORD *)(v16 + 8) = a2;
    *(_QWORD *)(v16 + 16) = v16 + 32;
    *(_QWORD *)(v16 + 24) = 0x400000000;
    sub_22F25DE94(v16 + 16, a5, &a5[24 * a6]);
    *(_BYTE *)(v16 + 128) = 0;
    *(_QWORD *)(v16 + 136) = v16 + 152;
    *(_QWORD *)(v16 + 144) = 0x400000000;
  }
  else
  {
    v16 = a8;
  }
  v30 = v15;
  if (!a6)
  {
LABEL_11:
    sub_22EE00E90(&v31, a1, 14, a7, a7, a2, 0, a8, (uint64_t)a5, a6, 0);
    if (v32)
    {
      sub_22EE014E4(&v31);
      v19 = v30;
    }
    else
    {
      v38[0] = v39;
      v40 = 0;
      v41 = 0;
      v39[0] = a5;
      v39[1] = a6;
      v38[1] = (void *)0x400000001;
      v21 = 8 * a4 - 8;
      do
      {
        v22 = *a3;
        v35 = a7;
        v33[4] = v16;
        v34 = a2;
        v33[0] = a1;
        v33[1] = (uint64_t)&v35;
        v33[2] = (uint64_t)&v34;
        v33[3] = (uint64_t)v38;
        v23 = sub_22E9F6318(a1, v22, v16, v33);
        if ((v23 & 1) != 0)
          break;
        if (!*(_BYTE *)(v16 + 128))
          break;
        ++a3;
        v24 = v21;
        v21 -= 8;
      }
      while (v24);
      v19 = v30;
      if (v38[0] != v39)
        free(v38[0]);
      sub_22EE014E4(&v31);
      if ((v23 & 1) == 0)
        goto LABEL_29;
    }
    if (v19)
    {
      v25 = *(void **)(v16 + 136);
      if (v25 != (void *)(v16 + 152))
        free(v25);
      v26 = *(void **)(v16 + 16);
      if (v26 != (void *)(v16 + 32))
        free(v26);
      MEMORY[0x2348A0E9C](v16, 0x10E0C409E7A7F72);
    }
    v20 = 1;
    goto LABEL_31;
  }
  v17 = 24 * a6;
  v18 = (uint64_t)a5;
  while ((sub_22F0EEB00(v18) & 2) == 0)
  {
    v18 += 24;
    v17 -= 24;
    if (!v17)
      goto LABEL_11;
  }
  *(_BYTE *)(v16 + 128) = 1;
  v19 = v30;
LABEL_29:
  if (v19)
  {
    llvm::FoldingSetBase::GetOrInsertNode();
    goto LABEL_38;
  }
LABEL_30:
  v20 = 0;
LABEL_31:
  if (v36[0] != v37)
    free(v36[0]);
  return v20;
}

uint64_t sub_22E9F38D0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int *v21;
  char *v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v27[24];
  uint64_t v28;
  uint64_t v29[2];
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  char *v35;
  uint64_t v36;
  _QWORD v37[9];

  v37[8] = *MEMORY[0x24BDAC8D0];
  v5 = (unint64_t)sub_22EFFA6B0(a2);
  sub_22E9F34E0((uint64_t)v29, (unsigned __int8 *)v5);
  if ((LODWORD(v29[0]) - 35) <= 1)
  {
    if ((sub_22E9F741C(a1, (unsigned __int8 *)v29[1], a3) & 1) == 0)
    {
      if (*(_BYTE *)(a3 + 128))
        v6 = 36;
      else
        v6 = 35;
      if (LODWORD(v29[0]) != v6)
      {
        v7 = &v30;
        return sub_22E9F38D0(a1, *v7, a3);
      }
      return 0;
    }
    return 1;
  }
  if (*(unsigned __int8 *)v5 == 173)
  {
    v7 = (uint64_t *)(v5 + 16);
    return sub_22E9F38D0(a1, *v7, a3);
  }
  if ((v5 & 1) != 0)
    return 1;
  if (v5 < 2)
    return 0;
  LODWORD(v35) = 4;
  v29[0] = 0;
  LODWORD(v28) = 3;
  v31[0] = *(unsigned int *)(a1 + 1704);
  sub_22EB4DDB8(a1 + 3688, (int *)&v35, (int *)v31, (__int16 *)(a1 + 1693), v29, (int *)&v28);
  v9 = *(unsigned int *)(a1 + 3696);
  v10 = v9 - 2;
  v11 = *(_QWORD *)(a1 + 3688);
  v12 = *(_DWORD *)(v11 + 576 * (v9 - 2));
  if (v12 == 5)
  {
    *(_BYTE *)(v11 + 576 * v9 - 4) = *(_BYTE *)(v11 + 576 * v10 + 572);
    v13 = 1;
  }
  else if (v12 == 2)
  {
    *(_BYTE *)(v11 + 576 * v9 - 4) = 1;
    v13 = *(_BYTE *)(v11 + 576 * v10 + 573) != 0;
  }
  else
  {
    v13 = 0;
    *(_BYTE *)(v11 + 576 * v9 - 4) = 0;
  }
  v14 = v11 + 576 * v9;
  *(_BYTE *)(v14 - 3) = v13;
  *(_WORD *)(a1 + 1693) = 0;
  if (*(_DWORD *)(a1 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v14 - 560));
    sub_22EAEAE08(a1 + 1840, (uint64_t *)(v14 - 496));
  }
  v35 = (char *)v37;
  v36 = 0x200000000;
  LOWORD(v31[0]) = 0;
  LODWORD(v32) = 0;
  v31[1] = &v35;
  v15 = sub_22F006900(v5 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v31, *(_QWORD *)(a1 + 88), 0);
  if ((_DWORD)v36)
    v16 = 0;
  else
    v16 = v15;
  if ((v16 & 1) == 0)
  {
    sub_22F0D5A50(v5 & 0xFFFFFFFFFFFFFFFELL);
    sub_22E8FCA40((_QWORD *)a1, v19, 0xFBBu, 0, (uint64_t)v29);
    sub_22F0D4E74(v5 & 0xFFFFFFFFFFFFFFFELL);
    v28 = v20;
    sub_22E8906A0((uint64_t)v29, &v28);
    sub_22E903BEC((unsigned int *)v29);
    if ((_DWORD)v36)
    {
      v21 = (int *)v35;
      v22 = &v35[32 * v36];
      do
      {
        v23 = (uint64_t)(v21 + 2);
        v24 = *v21;
        v21 += 8;
        sub_22E90379C((_QWORD *)a1, v24, v23, 0, (uint64_t)v27);
        sub_22E903BEC(v27);
      }
      while (v21 != (int *)v22);
    }
    goto LABEL_32;
  }
  v17 = v34;
  if (v34 > 0x40)
  {
    v25 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v33);
    *(_BYTE *)(a3 + 128) = v25 != v17;
    if (v25 == v17)
    {
LABEL_36:
      v29[0] = v5 & 0xFFFFFFFFFFFFFFFELL;
      sub_22F2CCF30(a3 + 136, v5, v29);
    }
  }
  else
  {
    v18 = v33;
    *(_BYTE *)(a3 + 128) = v33 != 0;
    if (!v18)
      goto LABEL_36;
  }
LABEL_32:
  v8 = v16 ^ 1u;
  if (v32 >= 2)
    sub_22EF53BC0(&v32);
  sub_22E89277C(&v35);
  sub_22EB48E64(a1);
  return v8;
}

uint64_t sub_22E9F3C18(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned __int8 *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v19[2];
  char v20;
  unsigned __int8 *v21[2];

  v21[1] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v5 = *(unsigned __int8 **)((*(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFFFFFF8) + 40);
  if ((v5[1] & 0x40) != 0)
  {
    result = 0;
    *(_BYTE *)(a3 + 128) = 1;
    return result;
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC)
  {
    v10 = sub_22E46BB88(a2);
    v12 = *(_WORD *)(a2 + 80) & 0x7F;
    v13 = -40;
    if (v12 > 0x46)
    {
      if (v12 != 83)
      {
        if (v12 == 71)
        {
          v13 = -56;
          goto LABEL_21;
        }
        if (v12 == 81)
          goto LABEL_21;
LABEL_16:
        v14 = v12 - 52;
        v15 = v12 - 33 >= 5;
        v16 = -48;
        if (!v15)
          v16 = -64;
        if (v14 >= 6)
          v13 = v16;
        else
          v13 = -72;
      }
    }
    else
    {
      if (v12 > 0x18)
        goto LABEL_15;
      if (v12 != 16)
      {
        if (((1 << v12) & 0x1066) != 0)
          goto LABEL_21;
        if (v12 != 24)
        {
LABEL_15:
          if (v12 == 70)
          {
            v13 = -64;
            goto LABEL_21;
          }
          goto LABEL_16;
        }
      }
      v13 = -48;
    }
LABEL_21:
    v17 = *(_QWORD *)(a2 + 72 + v13 + 16);
    v18 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8);
    if ((v17 & 4) != 0)
      v18 = (_QWORD *)*v18;
    if (v18)
      v9 = (uint64_t)(v18 - 8);
    else
      v9 = 0;
    goto LABEL_26;
  }
  v9 = 0;
  v10 = 0;
LABEL_26:
  sub_22EBBBB24((uint64_t)v19, a1, v9, v10, v9 != 0);
  v21[0] = v5;
  if (!a4)
    a4 = *(_DWORD *)(a2 + 24);
  result = sub_22E9F3578(a1, a2, v21, 1, 0, 0, a4 | ((unint64_t)a4 << 32), a3);
  if (v20)
    *(_QWORD *)(v19[0] + 10288) = v19[1];
  return result;
}

uint64_t sub_22E9F3DF4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void **v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  int v25;
  void *__p[2];
  char v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  __int128 v31;
  _BYTE v32[128];
  _QWORD *v33;
  uint64_t v34;
  _BYTE v35[24];
  _QWORD v36[2];
  _BYTE *v37;
  uint64_t v38;
  _BYTE v39[96];
  char v40;
  char *v41;
  uint64_t v42;
  _QWORD v43[10];

  v43[8] = *MEMORY[0x24BDAC8D0];
  v28 = a2;
  v29 = a5;
  v36[0] = 0;
  v36[1] = 0;
  v37 = v39;
  v38 = 0x400000000;
  v40 = 0;
  v41 = (char *)v43;
  v42 = 0x400000000;
  v33 = v35;
  v34 = 0x300000000;
  sub_22EFE9164(*(_QWORD *)(a2 + 56), (uint64_t)&v33);
  v10 = *(_QWORD *)(a2 + 48);
  if (v10)
  {
    if ((*(_DWORD *)(v10 + 28) & 0x7Eu) - 52 <= 5)
    {
      v13 = *(_QWORD *)(v10 + 56);
      if ((v13 & 4) != 0)
      {
        v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 40);
        if (v14)
        {
          v15 = v34;
          if (v34 >= HIDWORD(v34))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v15 = v34;
          }
          v33[v15] = v14;
          LODWORD(v34) = v34 + 1;
        }
      }
    }
  }
  if ((sub_22E9F3578(a1, a2, v33, v34, a3, a4, a5, v36) & 1) != 0)
    goto LABEL_4;
  if (!v40)
  {
    v30 = v32;
    v32[0] = 32;
    v31 = xmmword_22F460B10;
    sub_22ED730EC((uint64_t)a1, *(_QWORD *)(a2 + 56), a3, a4, __p);
    if (v27 >= 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    if (v27 >= 0)
      v17 = v27 & 0x7F;
    else
      v17 = (size_t)__p[1];
    v18 = v31;
    if (*((_QWORD *)&v31 + 1) < (unint64_t)v31 + v17)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v18 = v31;
      if (!v17)
        goto LABEL_28;
    }
    else if (!v17)
    {
LABEL_28:
      *(_QWORD *)&v31 = v18 + v17;
      if (v27 < 0)
        operator delete(__p[0]);
      sub_22E8FCA40(a1, a5, 0x12B2u, 0, (uint64_t)__p);
      v25 = sub_22F31CFF0((uint64_t)a1, a2 & 0xFFFFFFFFFFFFFFF9);
      v19 = sub_22E8900C4((uint64_t)__p, &v25);
      v20 = sub_22E890024(v19, &v28);
      v21 = sub_22F2F2210(v20, (uint64_t)&v30);
      sub_22E8906A0(v21, &v29);
      sub_22E903BEC((unsigned int *)__p);
      if ((_DWORD)v42)
      {
        v22 = 16 * v42;
        v23 = v41 + 8;
        v24 = 1;
        do
        {
          sub_22E9F4654(a1, v23, v24 & 1);
          v24 = 0;
          v23 += 2;
          v22 -= 16;
        }
        while (v22);
      }
      if (v30 != v32)
        free(v30);
LABEL_4:
      v11 = 1;
      goto LABEL_7;
    }
    memcpy((char *)v30 + v18, v16, v17);
    v18 = v31;
    goto LABEL_28;
  }
  v11 = 0;
LABEL_7:
  if (v33 != (_QWORD *)v35)
    free(v33);
  if (v41 != (char *)v43)
    free(v41);
  if (v37 != v39)
    free(v37);
  return v11;
}

uint64_t sub_22E9F4114(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  unint64_t v32;
  uint64_t *v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  char v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int32x2_t v49;
  char v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[64];
  int v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  llvm *v58;
  unsigned int v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD v68[5];

  v68[3] = *MEMORY[0x24BDAC8D0];
  v12 = *(_QWORD *)(a3 + 144) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(a3 + 144) & 6) != 4 || v12 == 0)
    v14 = 0;
  else
    v14 = *(_QWORD *)(v12 + 16) & 0xFFFFFFFFFFFFFFF8;
  v66 = v68;
  v67 = 0x300000000;
  sub_22EFE9164(*(_QWORD *)(v14 + 56), (uint64_t)&v66);
  v16 = *(_QWORD *)(v14 + 48);
  if (v16
    && (*(_DWORD *)(v16 + 28) & 0x7Eu) - 52 <= 5
    && (v26 = *(_QWORD *)(v16 + 56), (v26 & 4) != 0)
    && (v27 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFFF8) + 40)) != 0)
  {
    v28 = v67;
    if (v67 >= HIDWORD(v67))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v28 = v67;
    }
    v66[v28] = v27;
    LODWORD(v67) = v67 + 1;
    if (!(_DWORD)v67)
      goto LABEL_33;
  }
  else if (!(_DWORD)v67)
  {
LABEL_33:
    v29 = 0;
    *(_BYTE *)(a6 + 128) = 1;
    goto LABEL_72;
  }
  v47 = *(_QWORD *)(a1 + 3200);
  v48 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 3200) = 0;
  v46 = *(_QWORD *)(a1 + 10288);
  v44 = *(_DWORD *)(a1 + 2192);
  v45 = *(_DWORD *)(a1 + 1944);
  *(_QWORD *)(a1 + 216) = a3 + 72;
  *(_QWORD *)(a1 + 10288) = 0;
  *(_DWORD *)(a1 + 1944) = *(_DWORD *)(a1 + 1904);
  *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a1 + 1960);
  v56 = a1;
  v17 = 16;
  v57 = 1;
  do
  {
    *(uint64_t *)((char *)&v56 + v17) = -4096;
    v17 += 16;
  }
  while (v17 != 80);
  v60 = &v62;
  v61 = 0x100000000;
  v63 = *(_QWORD *)(a1 + 12024);
  v64 = 0;
  v65 = 0;
  *(_QWORD *)(a1 + 12024) = &v56;
  v18 = *(_QWORD *)(a3 + 144) & 6;
  v19 = *(_QWORD *)(a3 + 144) & 0xFFFFFFFFFFFFFFF8;
  if (v18 != 4 || v19 == 0)
  {
    v21 = v18 != 2 || v19 == 0;
    if (v21 || ((((*(_DWORD *)v19 >> 1) & 3) + 1) & 0xFFFFFFFD) == 0)
      goto LABEL_22;
    v32 = 0;
    v31 = (int *)(v19 + 8);
  }
  else
  {
    v30 = *(_QWORD *)(v19 + 16);
    if (((((v30 >> 1) & 3) + 1) & 0xFFFFFFFD) == 0)
      goto LABEL_22;
    v31 = (int *)(v19 + 40);
    v32 = v30 & 0xFFFFFFFFFFFFFFF8;
  }
  sub_22EE00E90(&v49, a1, 14, *v31, 0, v32, 0, v15, a4, a5, 0);
  if (!v50)
  {
    v33 = *(uint64_t **)((*(_QWORD *)(a3 + 144) & 0xFFFFFFFFFFFFFFF8) + 24);
    v51 = v53;
    v52 = 0x400000000;
    v54 = 0;
    v55 = 0;
    sub_22E9F7044((uint64_t)&v51, v33);
    v43 = sub_22EE44010(a1, a3, *(_QWORD *)((*(_QWORD *)((*(_QWORD *)(a3 + 144) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFFFFFFFFFF8) + 48), (uint64_t)&v56, (uint64_t)&v51);
    if (v51 != v53)
      free(v51);
    sub_22EE014E4(&v49);
    if ((v43 & 1) != 0)
      goto LABEL_43;
LABEL_22:
    if ((*(_DWORD *)(a3 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
    {
      v22 = 0;
      v23 = 0;
LABEL_61:
      sub_22EBBBB24((uint64_t)&v51, a1, v22, v23, v22 != 0);
      v29 = sub_22E9F3578(a1, v14, v66, v67, a4, a5, a2 | ((unint64_t)a2 << 32), a6);
      if (v53[0])
        *((_QWORD *)v51 + 1286) = v52;
      goto LABEL_63;
    }
    v23 = sub_22E46BB88(a3);
    v24 = *(_WORD *)(a3 + 80) & 0x7F;
    v25 = -40;
    if (v24 > 0x46)
    {
      if (v24 != 83)
      {
        if (v24 == 71)
        {
          v25 = -56;
          goto LABEL_56;
        }
        if (v24 == 81)
          goto LABEL_56;
LABEL_51:
        v34 = v24 - 52;
        v35 = v24 - 33 >= 5;
        v36 = -48;
        if (!v35)
          v36 = -64;
        if (v34 >= 6)
          v25 = v36;
        else
          v25 = -72;
      }
    }
    else
    {
      if (v24 > 0x18)
        goto LABEL_50;
      if (v24 != 16)
      {
        if (((1 << v24) & 0x1066) != 0)
          goto LABEL_56;
        if (v24 != 24)
        {
LABEL_50:
          if (v24 == 70)
          {
            v25 = -64;
            goto LABEL_56;
          }
          goto LABEL_51;
        }
      }
      v25 = -48;
    }
LABEL_56:
    v37 = *(_QWORD *)(a3 + 72 + v25 + 16);
    v38 = (_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF8);
    if ((v37 & 4) != 0)
      v38 = (_QWORD *)*v38;
    if (v38)
      v22 = (uint64_t)(v38 - 8);
    else
      v22 = 0;
    goto LABEL_61;
  }
  sub_22EE014E4(&v49);
LABEL_43:
  v29 = 1;
LABEL_63:
  if (!(_BYTE)v64)
  {
    if ((_DWORD)v61)
    {
      v40 = 0;
      v41 = 8 * v61;
      do
      {
        v42 = *(void ***)((char *)v60 + v40);
        if (v42)
        {
          if (*v42 != v42 + 2)
            free(*v42);
          MEMORY[0x2348A0E9C](v42, 0x1080C40ED926357);
        }
        v40 += 8;
      }
      while (v41 != v40);
    }
    *(_QWORD *)(v56 + 12024) = v63;
    LOBYTE(v64) = 1;
  }
  if (v60 != &v62)
    free(v60);
  if ((v57 & 1) == 0)
    llvm::deallocate_buffer(v58, (void *)(16 * v59));
  if (v48)
  {
    *(_QWORD *)(a1 + 216) = v48;
    *(_QWORD *)(a1 + 3200) = v47;
    *(_QWORD *)(a1 + 10288) = v46;
    *(_DWORD *)(a1 + 1944) = v45;
    *(_DWORD *)(a1 + 2192) = v44;
  }
LABEL_72:
  if (v66 != v68)
    free(v66);
  return v29;
}

void sub_22E9F4654(_QWORD *a1, _QWORD *a2, int a3)
{
  int *v3;
  unsigned int v4[24];

  v3 = (int *)(*a2 & 0xFFFFFFFFFFFFFFFCLL);
  if ((*a2 & 2) != 0 && v3)
  {
    sub_22E8FCA40(a1, *v3, 0x17C7u, 0, (uint64_t)v4);
    sub_22F2F2210((uint64_t)v4, (uint64_t)(v3 + 2));
    sub_22E903BEC(v4);
  }
  else
  {
    sub_22E9F7764(a1, (unsigned __int8 *)(*a2 & 0xFFFFFFFFFFFFFFFCLL), a3);
  }
}

uint64_t sub_22E9F46C0(_BYTE *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  unsigned __int8 *v7;
  uint64_t result;
  char v9;
  uint64_t v10;
  int32x2_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  char v24;
  int v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v7 = sub_22EFFA6B0(a4);
  sub_22E9F34E0((uint64_t)&v25, v7);
  if ((v25 - 35) <= 1)
  {
    result = sub_22E9F46C0(&v23, a2, a3, v26);
    if (!v24)
    {
      *a1 = 0;
      a1[8] = 0;
      return result;
    }
    result = sub_22E9F46C0(&v28, a2, a3, v27);
    v9 = v29;
    if (!v29)
    {
      *a1 = 0;
      goto LABEL_10;
    }
    v10 = *(_QWORD *)(a2 + 88);
    v11 = (int32x2_t)v23;
    v12 = v28;
    v13 = v25;
    result = sub_22E3CD3D4(v10 + 2032, 16, 3);
    *(int32x2_t *)result = v11;
    *(_QWORD *)(result + 8) = v12;
    v14 = 6;
    if (v13 == 35)
      v14 = 2;
    v15 = result & 0xFFFFFFFFFFFFFFF9 | v14;
LABEL_9:
    *(_QWORD *)a1 = v15;
    v9 = 1;
LABEL_10:
    a1[8] = v9;
    return result;
  }
  if (*v7 != 157)
  {
    result = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 32, 3);
    *(_QWORD *)result = v7;
    *(_BYTE *)(result + 8) = 0;
    *(_BYTE *)(result + 24) = 0;
    v15 = result & 0xFFFFFFFFFFFFFFFDLL;
    goto LABEL_9;
  }
  sub_22EFF605C((uint64_t)v7);
  v17 = v16;
  sub_22F0D4E74((uint64_t)v7);
  sub_22EE00E90(&v23, a2, 16, v17, v18, a3, 0, v19, 0, 0, 0);
  v20 = *((_QWORD *)v7 + 9);
  v28 = *(_QWORD *)(v20 + 64);
  v21 = sub_22F31A1F8(a2, v20, &v28, 1);
  if (!v21)
  {
    *a1 = 0;
    a1[8] = 0;
    return (uint64_t)sub_22EE014E4((int32x2_t *)&v23);
  }
  v22 = (_QWORD *)v21;
  sub_22EE014E4((int32x2_t *)&v23);
  LOBYTE(v23) = 0;
  v24 = 0;
  sub_22F31AC48(&v23, *(_QWORD *)(a2 + 88), v22);
  v24 = 1;
  result = sub_22E9F48E8(a2, &v23, *((_QWORD *)v7 + 9), (uint64_t)(v7 + 104), *((unsigned int *)v7 + 22), *((_QWORD *)v7 + 10));
  *a1 = 0;
  a1[8] = 0;
  if ((result & 1) == 0 && v24)
  {
    v15 = v23;
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_22E9F48E8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int32 v21;
  int8x8_t *v22;
  uint64_t v23;
  int8x8_t v24;
  uint8x8_t v25;
  uint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int32 v31;
  int8x8_t *v32;
  uint64_t v33;
  int8x8_t v34;
  uint8x8_t v35;
  uint8x8_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  int32x2_t v63[2];
  void *v64[2];
  _QWORD v65[8];
  int v66;
  char v67;
  void *__src;
  uint64_t v69;
  _QWORD v70[35];

  v10 = a2;
  v70[33] = *MEMORY[0x24BDAC8D0];
  v12 = *a2;
  if ((*a2 & 2) == 0)
  {
LABEL_4:
    v15 = *(_QWORD *)(a3 + 56);
    v16 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    __src = v70;
    v69 = 0x800000000;
    v70[32] = 0;
    v64[0] = v65;
    v66 = 0;
    v67 = 0;
    v65[0] = a4;
    v65[1] = a5;
    v64[1] = (void *)0x400000001;
    if (!*(_BYTE *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 24))
    {
      v17 = *(_DWORD *)(v15 + 12);
      v18 = v17 & 0x1FFFFFFF;
      if ((v17 & 0x1FFFFFFF) > 0x39)
      {
        v19 = operator new();
        *(_QWORD *)v19 = v19 + 16;
        *(_QWORD *)(v19 + 8) = 0x600000000;
        sub_22E47EDD0(v19, (v18 + 63) >> 6, 0);
        *(_DWORD *)(v19 + 64) = v18;
      }
      else
      {
        v19 = ((unint64_t)v17 << 58) | 1;
      }
      v63[0] = (int32x2_t)v19;
      sub_22EDCAF5C(*(_QWORD *)(a1 + 88), *(unsigned __int8 **)v16, 0, 0, (unint64_t *)v63);
      if ((v63[0].i8[0] & 1) != 0)
      {
        v27 = (uint8x8_t)vcnt_s8((int8x8_t)((*(_QWORD *)v63 >> 1) & ~(-1 << (*(_QWORD *)v63 >> 58))));
        v27.i16[0] = vaddlv_u8(v27);
        v21 = v27.i32[0];
      }
      else
      {
        v20 = *(unsigned int *)(*(_QWORD *)v63 + 8);
        if ((_DWORD)v20)
        {
          v21 = 0;
          v22 = **(int8x8_t ***)v63;
          v23 = 8 * v20;
          do
          {
            v24 = *v22++;
            v25 = (uint8x8_t)vcnt_s8(v24);
            v25.i16[0] = vaddlv_u8(v25);
            v21 += v25.i32[0];
            v23 -= 8;
          }
          while (v23);
        }
        else
        {
          v21 = 0;
        }
      }
      v28 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 32 * v21, 3);
      if (v21)
      {
        v29 = v28;
        do
        {
          *(_DWORD *)v29 = 0;
          *(_QWORD *)(v29 + 8) = 0;
          *(_QWORD *)(v29 + 24) = 0;
          v29 += 32;
        }
        while (v29 != v28 + 32 * v21);
      }
      if ((v63[0].i8[0] & 1) != 0)
      {
        v36 = (uint8x8_t)vcnt_s8((int8x8_t)((*(_QWORD *)v63 >> 1) & ~(-1 << (*(_QWORD *)v63 >> 58))));
        v36.i16[0] = vaddlv_u8(v36);
        v31 = v36.i32[0];
      }
      else
      {
        v30 = *(unsigned int *)(*(_QWORD *)v63 + 8);
        if ((_DWORD)v30)
        {
          v31 = 0;
          v32 = **(int8x8_t ***)v63;
          v33 = 8 * v30;
          do
          {
            v34 = *v32++;
            v35 = (uint8x8_t)vcnt_s8(v34);
            v35.i16[0] = vaddlv_u8(v35);
            v31 += v35.i32[0];
            v33 -= 8;
          }
          while (v33);
        }
        else
        {
          v31 = 0;
        }
      }
      *(_QWORD *)(v16 + 8) = v28;
      *(_QWORD *)(v16 + 16) = v31;
      *(_BYTE *)(v16 + 24) = 1;
      v37 = *(_DWORD *)(v15 + 12);
      v38 = v37 & 0x1FFFFFFF;
      if ((v37 & 0x1FFFFFFF) != 0)
      {
        v39 = 0;
        v40 = 0;
        v61 = v15 + 16;
        v62 = v16;
        v41 = (_QWORD *)(a6 + 40);
        do
        {
          if ((v63[0].i8[0] & 1) != 0)
          {
            if (((1 << v39) & (*(_QWORD *)v63 >> 1) & ~(-1 << (*(_QWORD *)v63 >> 58))) != 0)
            {
LABEL_33:
              v42 = *(_QWORD *)(v16 + 8);
              v43 = *(_QWORD *)(v61 + 8 * v39);
              if (v39 >= *(unsigned int *)(a6 + 8))
              {
                v44 = 0;
              }
              else if ((*((_DWORD *)v41 - 6) - 5) > 1)
              {
                v60 = v40;
                v45 = *(_QWORD *)(v61 + 8 * v39);
                v59 = v42;
                sub_22F0EFE08((uint64_t)(v41 - 3));
                v42 = v59;
                v43 = v45;
                v40 = v60;
                v44 = v46;
              }
              else
              {
                v44 = *(_DWORD *)((*v41 & 0xFFFFFFFFFFFFFFFCLL) + 16);
              }
              v47 = v40 + 1;
              sub_22F347148(a1, v43, v44, v42 + 32 * v40);
              v40 = v47;
              v16 = v62;
            }
          }
          else if ((*(_QWORD *)(**(_QWORD **)v63 + 8 * (v39 >> 6)) & (1 << v39)) != 0)
          {
            goto LABEL_33;
          }
          ++v39;
          v41 += 4;
        }
        while (v38 != v39);
      }
      sub_22E54C5D0((void ***)v63);
    }
    v48 = a6 + 16;
    v49 = *(unsigned int *)(a6 + 8);
    sub_22F0EFE08(a6 + 16);
    v51 = v50;
    sub_22F0EFE08(v48 + 32 * v49 - 32);
    sub_22EE00E90(v63, a1, 17, v51, v52 & 0xFFFFFFFF00000000 | v51, a3, 0, v53, 0, 0, 0);
    v26 = sub_22EE09D78(a1, *(_QWORD *)(v16 + 8), *(_QWORD *)(v16 + 16), (uint64_t)v64);
    if ((v26 & 1) == 0)
    {
      v54 = v69;
      v55 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 32 * v69, 3);
      if ((_DWORD)v54)
      {
        v56 = v55;
        do
        {
          *(_DWORD *)v56 = 0;
          *(_QWORD *)(v56 + 8) = 0;
          *(_QWORD *)(v56 + 24) = 0;
          v56 += 32;
        }
        while (v56 != v55 + 32 * v54);
      }
      v57 = v69;
      *(_QWORD *)(v16 + 8) = v55;
      *(_QWORD *)(v16 + 16) = v57;
      *(_BYTE *)(v16 + 24) = 1;
      if ((_DWORD)v69)
        memmove(*(void **)((*v10 & 0xFFFFFFFFFFFFFFFCLL) + 8), __src, 32 * v69);
    }
    sub_22EE014E4(v63);
    if (v64[0] != v65)
      free(v64[0]);
    if (__src != v70)
      free(__src);
    return v26;
  }
  while ((sub_22E9F48E8(a1, v12 & 0xFFFFFFFFFFFFFFF8, a3, a4, a5, a6) & 1) == 0)
  {
    v13 = *v10 & 0xFFFFFFFFFFFFFFF8;
    v14 = *(_QWORD *)(v13 + 8);
    v10 = (_QWORD *)(v13 + 8);
    v12 = v14;
    if ((v14 & 2) == 0)
      goto LABEL_4;
  }
  return 1;
}

uint64_t sub_22E9F4DA0(uint64_t a1, uint64_t a2, unsigned __int8 **a3, unint64_t a4, uint64_t a5, unsigned __int8 **a6, unint64_t a7, char *a8)
{
  uint64_t result;
  char v11;
  BOOL v18;
  uint64_t *v19;
  uint64_t *v20;
  char *v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t v24;
  _QWORD **v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45[2];
  void *v46;
  uint64_t v47;
  _BYTE v48[128];
  void *v49;
  uint64_t v50;
  _BYTE v51[128];
  void *v52;
  unsigned int v53;
  uint64_t v54;
  char *v55;
  unsigned int v56;
  _QWORD v57[18];

  v57[16] = *MEMORY[0x24BDAC8D0];
  if (!a4)
  {
    result = 0;
    v11 = a7 == 0;
    goto LABEL_5;
  }
  if (!a7)
  {
    result = 0;
    v11 = 1;
LABEL_5:
    *a8 = v11;
    return result;
  }
  v45[0] = a2;
  v45[1] = a5;
  v55 = 0;
  if (sub_22F2C52BC(*(_QWORD *)(a1 + 10296), *(_DWORD *)(a1 + 10312), a2, a5, &v55))
    v18 = v55 == (char *)(*(_QWORD *)(a1 + 10296) + 24 * *(unsigned int *)(a1 + 10312));
  else
    v18 = 1;
  if (!v18)
  {
    result = 0;
    v11 = v55[16];
    goto LABEL_5;
  }
  v19 = (uint64_t *)sub_22F31A1F8(a1, a2, a3, a4);
  if (!v19)
    return 1;
  sub_22E9F58A4(&v55, v19);
  v20 = (uint64_t *)sub_22F31A1F8(a1, a5, a6, a7);
  if (v20)
  {
    v44 = v20;
    sub_22E9F5BB8(&v52, v20);
    v49 = v51;
    v50 = 0x400000000;
    if (v56)
      sub_22E9F8418((uint64_t)&v49, (uint64_t)&v55);
    v46 = v48;
    v47 = 0x400000000;
    if (v53)
      sub_22E9F8418((uint64_t)&v46, (uint64_t)&v52);
    if ((_DWORD)v50)
    {
      v21 = (char *)v49;
      v43 = (char *)v49 + 32 * v50;
      while (!(_DWORD)v47)
      {
LABEL_32:
        v21 += 32;
        if (v21 == v43)
          goto LABEL_33;
      }
      v22 = (uint64_t **)v46;
      v23 = (uint64_t **)((char *)v46 + 32 * v47);
      while (1)
      {
        v24 = *((unsigned int *)v21 + 2);
        if (!(_DWORD)v24)
          break;
        v25 = *(_QWORD ***)v21;
        v26 = *(_QWORD *)v21 + 8 * v24;
        while (1)
        {
          v27 = *((unsigned int *)v22 + 2);
          if ((_DWORD)v27)
            break;
LABEL_29:
          if (++v25 == (_QWORD **)v26)
          {
            LOBYTE(v24) = 0;
            goto LABEL_34;
          }
        }
        v28 = *v25;
        v29 = *v22;
        v30 = 8 * v27;
        while (*v28 != *(_QWORD *)*v29 || !sub_22E9F81B0((uint64_t)v28, *(_QWORD *)(a1 + 88), *v29))
        {
          ++v29;
          v30 -= 8;
          if (!v30)
            goto LABEL_29;
        }
        v22 += 4;
        if (v22 == v23)
          goto LABEL_32;
      }
    }
    else
    {
LABEL_33:
      LOBYTE(v24) = 1;
    }
LABEL_34:
    *a8 = v24;
    v31 = (char *)v46;
    if ((_DWORD)v47)
    {
      v32 = 32 * v47;
      do
      {
        v33 = *(char **)&v31[v32 - 32];
        if (&v31[v32 - 16] != v33)
          free(v33);
        v32 -= 32;
      }
      while (v32);
      v31 = (char *)v46;
    }
    if (v31 != v48)
      free(v31);
    v34 = (char *)v49;
    if ((_DWORD)v50)
    {
      v35 = 32 * v50;
      do
      {
        v36 = *(char **)&v34[v35 - 32];
        if (&v34[v35 - 16] != v36)
          free(v36);
        v35 -= 32;
      }
      while (v35);
      v34 = (char *)v49;
    }
    if (v34 != v51)
      free(v34);
    v37 = (char *)v52;
    if (v53)
    {
      v38 = 32 * v53;
      do
      {
        v39 = *(char **)&v37[v38 - 32];
        if (&v37[v38 - 16] != v39)
          free(v39);
        v38 -= 32;
      }
      while (v38);
      v37 = (char *)v52;
    }
    if (v37 != (char *)&v54)
      free(v37);
    v20 = v44;
  }
  v40 = v55;
  if (v56)
  {
    v41 = 32 * v56;
    do
    {
      v42 = *(char **)&v40[v41 - 32];
      if (&v40[v41 - 16] != v42)
        free(v42);
      v41 -= 32;
    }
    while (v41);
    v40 = v55;
  }
  if (v40 != (char *)v57)
    free(v40);
  if (!v20)
    return 1;
  sub_22F31A3C0((uint64_t)&v55, a1 + 10296, v45, a8);
  return 0;
}

BOOL sub_22E9F5158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _BOOL8 v14;
  char v15;
  _BYTE *v17;
  int v18;
  char v19;
  uint64_t *v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  void *v26;
  int v27;
  void *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  int v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  int v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  int v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  int v62;
  int v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  int v73;
  int v74;
  char v75;
  char v76;
  uint64_t v77[3];
  uint64_t v78[3];
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  _BYTE v83[128];
  void *v84;
  uint64_t v85;
  _BYTE v86[128];
  void *v87;
  uint64_t v88;
  _BYTE v89[128];
  void *v90;
  uint64_t v91;
  _BYTE v92[128];
  void *v93;
  uint64_t v94;
  _BYTE v95[128];
  void *v96;
  uint64_t v97;
  _BYTE v98[128];
  void *v99;
  uint64_t v100;
  _BYTE v101[128];
  void *v102;
  uint64_t v103;
  _BYTE v104[128];
  void *v105;
  unsigned int v106;
  uint64_t v107;
  void *v108;
  unsigned int v109;
  uint64_t v110;
  void *v111;
  unsigned int v112;
  uint64_t v113;
  char *v114;
  unsigned int v115;
  _QWORD v116[18];

  v116[16] = *MEMORY[0x24BDAC8D0];
  sub_22EE03478(a1);
  v14 = 0;
  if (!v15 && a4 && a7)
  {
    v17 = (_BYTE *)(a1 + 10664);
    v79 = 0;
    v80 = 0;
    v76 = *(_BYTE *)(a1 + 11952);
    v74 = *(_DWORD *)(a1 + 8456);
    v75 = *(_BYTE *)(a1 + 10664);
    v18 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 180);
    sub_22EE03478(a1);
    if (!v19)
      *(_BYTE *)(a1 + 11952) = 1;
    *v17 = 0;
    v20 = (uint64_t *)sub_22F31A1F8(a1, a2, a3, a4);
    if (v20)
    {
      v29 = v20;
      sub_22E9F58A4(&v114, v20);
      sub_22E9F5BB8(&v111, v29);
      v30 = (uint64_t *)sub_22F31A1F8(a1, a5, a6, a7);
      if (v30)
      {
        v31 = v30;
        sub_22E9F58A4(&v108, v30);
        sub_22E9F5BB8(&v105, v31);
        v102 = v104;
        v103 = 0x400000000;
        if (v115)
          sub_22E9F8418((uint64_t)&v102, (uint64_t)&v114);
        v99 = v101;
        v100 = 0x400000000;
        if (v106)
          sub_22E9F8418((uint64_t)&v99, (uint64_t)&v105);
        v73 = sub_22E9F5ECC((uint64_t)v102, v103, (uint64_t *)&v99, a1);
        v32 = (char *)v99;
        if ((_DWORD)v100)
        {
          v33 = 32 * v100;
          do
          {
            v34 = *(char **)&v32[v33 - 32];
            if (&v32[v33 - 16] != v34)
              free(v34);
            v33 -= 32;
          }
          while (v33);
          v32 = (char *)v99;
        }
        if (v32 != v101)
          free(v32);
        v35 = (char *)v102;
        if ((_DWORD)v103)
        {
          v36 = 32 * v103;
          do
          {
            v37 = *(char **)&v35[v36 - 32];
            if (&v35[v36 - 16] != v37)
              free(v37);
            v36 -= 32;
          }
          while (v36);
          v35 = (char *)v102;
        }
        if (v35 != v104)
          free(v35);
        v96 = v98;
        v97 = 0x400000000;
        if (v109)
          sub_22E9F8418((uint64_t)&v96, (uint64_t)&v108);
        v93 = v95;
        v94 = 0x400000000;
        if (v112)
          sub_22E9F8418((uint64_t)&v93, (uint64_t)&v111);
        v38 = sub_22E9F5ECC((uint64_t)v96, v97, (uint64_t *)&v93, a1);
        v39 = (char *)v93;
        if ((_DWORD)v94)
        {
          v40 = 32 * v94;
          do
          {
            v41 = *(char **)&v39[v40 - 32];
            if (&v39[v40 - 16] != v41)
              free(v41);
            v40 -= 32;
          }
          while (v40);
          v39 = (char *)v93;
        }
        if (v39 != v95)
          free(v39);
        v42 = (char *)v96;
        if ((_DWORD)v97)
        {
          v43 = 32 * v97;
          do
          {
            v44 = *(char **)&v42[v43 - 32];
            if (&v42[v43 - 16] != v44)
              free(v44);
            v43 -= 32;
          }
          while (v43);
          v42 = (char *)v96;
        }
        if (v42 != v98)
          free(v42);
        v90 = v92;
        v91 = 0x400000000;
        if (v115)
          sub_22E9F8418((uint64_t)&v90, (uint64_t)&v114);
        v87 = v89;
        v88 = 0x400000000;
        if (v106)
          sub_22E9F8418((uint64_t)&v87, (uint64_t)&v105);
        v78[0] = a1;
        v78[1] = (uint64_t)&v80;
        v78[2] = (uint64_t)&v79;
        v45 = sub_22E9F5FCC((uint64_t)v90, v91, (uint64_t *)&v87, v78);
        v46 = (char *)v87;
        if ((_DWORD)v88)
        {
          v47 = 32 * v88;
          do
          {
            v48 = *(char **)&v46[v47 - 32];
            if (&v46[v47 - 16] != v48)
              free(v48);
            v47 -= 32;
          }
          while (v47);
          v46 = (char *)v87;
        }
        if (v46 != v89)
          free(v46);
        v49 = (char *)v90;
        if ((_DWORD)v91)
        {
          v50 = 32 * v91;
          do
          {
            v51 = *(char **)&v49[v50 - 32];
            if (&v49[v50 - 16] != v51)
              free(v51);
            v50 -= 32;
          }
          while (v50);
          v49 = (char *)v90;
        }
        if (v49 != v92)
          free(v49);
        v84 = v86;
        v85 = 0x400000000;
        if (v109)
          sub_22E9F8418((uint64_t)&v84, (uint64_t)&v108);
        v81 = v83;
        v82 = 0x400000000;
        if (v112)
          sub_22E9F8418((uint64_t)&v81, (uint64_t)&v111);
        v77[0] = a1;
        v77[1] = (uint64_t)&v80;
        v77[2] = (uint64_t)&v79;
        v52 = sub_22E9F5FCC((uint64_t)v84, v85, (uint64_t *)&v81, v77);
        v53 = (char *)v81;
        if ((_DWORD)v82)
        {
          v54 = 32 * v82;
          do
          {
            v55 = *(char **)&v53[v54 - 32];
            if (&v53[v54 - 16] != v55)
              free(v55);
            v54 -= 32;
          }
          while (v54);
          v53 = (char *)v81;
        }
        if (v53 != v83)
          free(v53);
        v56 = (char *)v84;
        if ((_DWORD)v85)
        {
          v57 = 32 * v85;
          do
          {
            v58 = *(char **)&v56[v57 - 32];
            if (&v56[v57 - 16] != v58)
              free(v58);
            v57 -= 32;
          }
          while (v57);
          v56 = (char *)v84;
        }
        if (v56 != v86)
          free(v56);
        v59 = (char *)v105;
        if (v106)
        {
          v60 = 32 * v106;
          do
          {
            v61 = *(char **)&v59[v60 - 32];
            if (&v59[v60 - 16] != v61)
              free(v61);
            v60 -= 32;
          }
          while (v60);
          v59 = (char *)v105;
        }
        v62 = v38 ^ v52;
        if (v59 != (char *)&v107)
          free(v59);
        v63 = v73 ^ v45 | v62;
        v64 = (char *)v108;
        v22 = v74;
        if (v109)
        {
          v65 = 32 * v109;
          do
          {
            v66 = *(char **)&v64[v65 - 32];
            if (&v64[v65 - 16] != v66)
              free(v66);
            v65 -= 32;
          }
          while (v65);
          v64 = (char *)v108;
        }
        v21 = v63 ^ 1;
        if (v64 != (char *)&v110)
          free(v64);
      }
      else
      {
        v21 = 1;
        v22 = v74;
      }
      v67 = (char *)v111;
      if (v112)
      {
        v68 = 32 * v112;
        do
        {
          v69 = *(char **)&v67[v68 - 32];
          if (&v67[v68 - 16] != v69)
            free(v69);
          v68 -= 32;
        }
        while (v68);
        v67 = (char *)v111;
      }
      if (v67 != (char *)&v113)
        free(v67);
      v70 = v114;
      if (v115)
      {
        v71 = 32 * v115;
        do
        {
          v72 = *(char **)&v70[v71 - 32];
          if (&v70[v71 - 16] != v72)
            free(v72);
          v71 -= 32;
        }
        while (v71);
        v70 = v114;
      }
      if (v70 != (char *)v116)
        free(v70);
    }
    else
    {
      v21 = 1;
      v22 = v74;
    }
    *(_DWORD *)(a1 + 8456) = v22;
    *(_BYTE *)(a1 + 11952) = v76;
    *v17 = v75;
    v23 = *(_QWORD *)(a1 + 104);
    if (*(_DWORD *)(v23 + 180) == 5)
      *(_BYTE *)(v23 + 170) = 1;
    if (v18)
      v24 = 3;
    else
      v24 = 0;
    *(_DWORD *)(v23 + 180) = v24;
    v14 = v21 == 0;
    if (!v21)
    {
      sub_22F0D5A50(v80);
      sub_22E8FCA40((_QWORD *)a1, v25, 0x152Cu, 0, (uint64_t)&v114);
      sub_22F0D4E74(v80);
      v111 = v26;
      sub_22E8906A0((uint64_t)&v114, (uint64_t *)&v111);
      sub_22E903BEC((unsigned int *)&v114);
      sub_22F0D5A50(v79);
      sub_22E8FCA40((_QWORD *)a1, v27, 0x152Du, 0, (uint64_t)&v114);
      sub_22F0D4E74(v79);
      v111 = v28;
      sub_22E8906A0((uint64_t)&v114, (uint64_t *)&v111);
      sub_22E903BEC((unsigned int *)&v114);
    }
  }
  return v14;
}

void sub_22E9F58A4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  void *v18[2];
  _BYTE v19[16];
  void *v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[17];

  v25[16] = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if ((*a2 & 2) == 0)
  {
    v23 = v25;
    v25[0] = v3 & 0xFFFFFFFFFFFFFFFCLL;
    v24 = 0x200000001;
    *a1 = a1 + 2;
    a1[1] = 0x400000000;
    sub_22F31A798((uint64_t)a1, (uint64_t)&v23, 1);
    v17 = v23;
    if (v23 != v25)
      goto LABEL_38;
    return;
  }
  sub_22E9F58A4(&v23, v3 & 0xFFFFFFFFFFFFFFF8);
  sub_22E9F58A4(&v20, (*a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  if ((*(_BYTE *)a2 & 4) != 0)
  {
    if (v21 + (unint64_t)v24 > HIDWORD(v24))
    {
      sub_22F31A8C0((uint64_t)&v23);
      while (v21)
      {
LABEL_17:
        sub_22F31A6AC(v18, (uint64_t *)&v20);
        sub_22E9F70B0((uint64_t)&v23, (unint64_t)v18);
        if (v18[0] != v19)
          free(v18[0]);
      }
    }
    else if (v21)
    {
      goto LABEL_17;
    }
    *a1 = a1 + 2;
    a1[1] = 0x400000000;
    if ((_DWORD)v24)
      sub_22E9F7158((uint64_t)a1, (uint64_t)&v23);
    goto LABEL_22;
  }
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  v5 = v24;
  if (v21 * (unint64_t)v24 >= 5)
  {
    sub_22F31A8C0((uint64_t)a1);
    v5 = v24;
    if (!(_DWORD)v24)
      goto LABEL_22;
  }
  else if (!(_DWORD)v24)
  {
    goto LABEL_22;
  }
  v6 = (uint64_t *)v23;
  v7 = (uint64_t *)((char *)v23 + 32 * v5);
  do
  {
    if (v21)
    {
      v8 = 32 * v21;
      v9 = (unsigned int *)((char *)v20 + 8);
      do
      {
        v18[0] = v19;
        v18[1] = (void *)0x200000000;
        v10 = *((unsigned int *)v6 + 2);
        if ((unint64_t)*v9 + v10 >= 3)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v10 = *((unsigned int *)v6 + 2);
        }
        sub_22E9F7384(*v6, (uint64_t *)(*v6 + 8 * v10), (uint64_t)v18);
        sub_22E9F7384(*((_QWORD *)v9 - 1), (uint64_t *)(*((_QWORD *)v9 - 1) + 8 * *v9), (uint64_t)v18);
        sub_22F31A728((uint64_t)a1, (uint64_t)v18);
        if (v18[0] != v19)
          free(v18[0]);
        v9 += 8;
        v8 -= 32;
      }
      while (v8);
    }
    v6 += 4;
  }
  while (v6 != v7);
LABEL_22:
  v11 = (char *)v20;
  if (v21)
  {
    v12 = 32 * v21;
    do
    {
      v13 = *(char **)&v11[v12 - 32];
      if (&v11[v12 - 16] != v13)
        free(v13);
      v12 -= 32;
    }
    while (v12);
    v11 = (char *)v20;
  }
  if (v11 != (char *)&v22)
    free(v11);
  v14 = v23;
  if ((_DWORD)v24)
  {
    v15 = 4 * v24;
    do
    {
      v16 = (_QWORD *)v14[v15 - 4];
      if (&v14[v15 - 2] != v16)
        free(v16);
      v15 -= 4;
    }
    while (v15 * 8);
    v14 = v23;
  }
  if (v14 != v25)
  {
    v17 = v14;
LABEL_38:
    free(v17);
  }
}

void sub_22E9F5BB8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  void *v18[2];
  _BYTE v19[16];
  void *v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[17];

  v25[16] = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if ((*a2 & 2) == 0)
  {
    v23 = v25;
    v25[0] = v3 & 0xFFFFFFFFFFFFFFFCLL;
    v24 = 0x200000001;
    *a1 = a1 + 2;
    a1[1] = 0x400000000;
    sub_22F31A798((uint64_t)a1, (uint64_t)&v23, 1);
    v17 = v23;
    if (v23 != v25)
      goto LABEL_37;
    return;
  }
  sub_22E9F5BB8(&v23, v3 & 0xFFFFFFFFFFFFFFF8);
  sub_22E9F5BB8(&v20, (*a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  if ((*(_BYTE *)a2 & 4) == 0)
  {
    if (v21 + (unint64_t)v24 > HIDWORD(v24))
    {
      sub_22F31A8C0((uint64_t)&v23);
      while (v21)
      {
LABEL_5:
        sub_22F31A6AC(v18, (uint64_t *)&v20);
        sub_22E9F70B0((uint64_t)&v23, (unint64_t)v18);
        if (v18[0] != v19)
          free(v18[0]);
      }
    }
    else if (v21)
    {
      goto LABEL_5;
    }
    *a1 = a1 + 2;
    a1[1] = 0x400000000;
    if ((_DWORD)v24)
      sub_22E9F7158((uint64_t)a1, (uint64_t)&v23);
    goto LABEL_21;
  }
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  v5 = v24;
  if (v21 * (unint64_t)v24 >= 5)
  {
    sub_22F31A8C0((uint64_t)a1);
    v5 = v24;
    if (!(_DWORD)v24)
      goto LABEL_21;
  }
  else if (!(_DWORD)v24)
  {
    goto LABEL_21;
  }
  v6 = (uint64_t *)v23;
  v7 = (uint64_t *)((char *)v23 + 32 * v5);
  do
  {
    if (v21)
    {
      v8 = 32 * v21;
      v9 = (unsigned int *)((char *)v20 + 8);
      do
      {
        v18[0] = v19;
        v18[1] = (void *)0x200000000;
        v10 = *((unsigned int *)v6 + 2);
        if ((unint64_t)*v9 + v10 >= 3)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v10 = *((unsigned int *)v6 + 2);
        }
        sub_22E9F7384(*v6, (uint64_t *)(*v6 + 8 * v10), (uint64_t)v18);
        sub_22E9F7384(*((_QWORD *)v9 - 1), (uint64_t *)(*((_QWORD *)v9 - 1) + 8 * *v9), (uint64_t)v18);
        sub_22F31A728((uint64_t)a1, (uint64_t)v18);
        if (v18[0] != v19)
          free(v18[0]);
        v9 += 8;
        v8 -= 32;
      }
      while (v8);
    }
    v6 += 4;
  }
  while (v6 != v7);
LABEL_21:
  v11 = (char *)v20;
  if (v21)
  {
    v12 = 32 * v21;
    do
    {
      v13 = *(char **)&v11[v12 - 32];
      if (&v11[v12 - 16] != v13)
        free(v13);
      v12 -= 32;
    }
    while (v12);
    v11 = (char *)v20;
  }
  if (v11 != (char *)&v22)
    free(v11);
  v14 = v23;
  if ((_DWORD)v24)
  {
    v15 = 4 * v24;
    do
    {
      v16 = (_QWORD *)v14[v15 - 4];
      if (&v14[v15 - 2] != v16)
        free(v16);
      v15 -= 4;
    }
    while (v15 * 8);
    v14 = v23;
  }
  if (v14 != v25)
  {
    v17 = v14;
LABEL_37:
    free(v17);
  }
}

uint64_t sub_22E9F5ECC(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD **v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;

  if (!a2)
    return 1;
  v6 = a1;
  v18 = a1 + 32 * a2;
  while (1)
  {
    v7 = *((unsigned int *)a3 + 2);
    if ((_DWORD)v7)
      break;
LABEL_15:
    v6 += 32;
    if (v6 == v18)
      return 1;
  }
  v8 = *a3;
  v9 = *a3 + 32 * v7;
  while (1)
  {
    v10 = *(unsigned int *)(v6 + 8);
    if (!(_DWORD)v10)
      return 0;
    v11 = *(_QWORD ***)v6;
    v12 = *(_QWORD *)v6 + 8 * v10;
    while (1)
    {
      v13 = *(unsigned int *)(v8 + 8);
      if ((_DWORD)v13)
        break;
LABEL_12:
      if (++v11 == (_QWORD **)v12)
        return 0;
    }
    v14 = *v11;
    v15 = *(uint64_t **)v8;
    v16 = 8 * v13;
    while (*v14 != *(_QWORD *)*v15 || !sub_22E9F81B0((uint64_t)v14, *(_QWORD *)(a4 + 88), *v15))
    {
      ++v15;
      v16 -= 8;
      if (!v16)
        goto LABEL_12;
    }
    v8 += 32;
    if (v8 == v9)
      goto LABEL_15;
  }
}

uint64_t sub_22E9F5FCC(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 **v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned __int8 **v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 ***v26;
  uint64_t (**v28)();
  void **v29;
  char v30;
  uint64_t v31;
  void *v32[2];
  _BYTE v33[128];
  void *v34[2];
  _QWORD v35[18];

  v35[16] = *MEMORY[0x24BDAC8D0];
  v4 = 1;
  if (a2)
  {
    v20 = a1 + 32 * a2;
    while (1)
    {
      v5 = *((unsigned int *)a3 + 2);
      if ((_DWORD)v5)
        break;
LABEL_22:
      a1 += 32;
      if (a1 == v20)
        return 1;
    }
    v25 = *a3;
    v22 = *a3 + 32 * v5;
    v23 = a1;
    while (1)
    {
      v6 = *(unsigned int *)(a1 + 8);
      if (!(_DWORD)v6)
        return 0;
      v26 = *(unsigned __int8 ****)a1;
      v24 = *(_QWORD *)a1 + 8 * v6;
      while (1)
      {
        v7 = *(unsigned int *)(v25 + 8);
        if ((_DWORD)v7)
          break;
LABEL_19:
        if (++v26 == (unsigned __int8 ***)v24)
          return 0;
      }
      v8 = *v26;
      v9 = *(uint64_t **)v25;
      v10 = 8 * v7;
      while (1)
      {
        v11 = (unsigned __int8 **)*v9;
        v12 = *a4;
        if (sub_22E9F81B0((uint64_t)v8, *(_QWORD *)(*a4 + 88), *v9))
        {
          v13 = *v8;
          v14 = *v11;
          if (*v8 == v14)
            break;
          v34[0] = v35;
          v34[1] = (void *)0x2000000000;
          v32[0] = v33;
          v32[1] = (void *)0x2000000000;
          v15 = *(_QWORD *)(v12 + 88);
          v30 = 1;
          v28 = &off_24FAC6E70;
          v29 = v34;
          v31 = v15;
          sub_22F0E9FEC(&v28, v13);
          v16 = *(_QWORD *)(v12 + 88);
          v30 = 1;
          v28 = &off_24FAC6E70;
          v29 = v32;
          v31 = v16;
          sub_22F0E9FEC(&v28, v14);
          v17 = llvm::FoldingSetNodeID::operator==();
          v18 = v17;
          if (v17)
          {
            *(_QWORD *)a4[1] = v13;
            *(_QWORD *)a4[2] = v14;
          }
          if (v32[0] != v33)
            free(v32[0]);
          if (v34[0] != v35)
            free(v34[0]);
          if ((v18 & 1) != 0)
            break;
        }
        ++v9;
        v10 -= 8;
        if (!v10)
          goto LABEL_19;
      }
      v25 += 32;
      a1 = v23;
      if (v25 == v22)
        goto LABEL_22;
    }
  }
  return v4;
}

uint64_t sub_22E9F6214(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v6 = *(_QWORD **)a2;
        v7 = *(_QWORD *)a2 + 16 * v4;
        v8 = *(_QWORD **)a1;
        do
        {
          *v8 = *v6;
          v8[1] = v6[1];
          v6 += 2;
          v8 += 2;
        }
        while (v6 != (_QWORD *)v7);
      }
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        v9 = *(_QWORD **)a2;
        v10 = *(_QWORD *)a2 + 16 * v5;
        v11 = *(_QWORD **)a1;
        do
        {
          *v11 = *v9;
          v11[1] = v9[1];
          v9 += 2;
          v11 += 2;
        }
        while (v9 != (_QWORD *)v10);
LABEL_14:
        v12 = *(unsigned int *)(a2 + 8);
        if (v5 != v12)
          memcpy((void *)(*(_QWORD *)a1 + 16 * v5), (const void *)(*(_QWORD *)a2 + 16 * v5), *(_QWORD *)a2 + 16 * v12 - (*(_QWORD *)a2 + 16 * v5));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v5 = 0;
    goto LABEL_14;
  }
  return a1;
}

uint64_t sub_22E9F6318(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t *a4)
{
  unsigned __int8 *v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int *v26;
  char *v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v32[24];
  uint64_t v33;
  uint64_t v34[2];
  uint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  char *v40;
  uint64_t v41;
  _QWORD v42[9];

  v42[8] = *MEMORY[0x24BDAC8D0];
  v7 = sub_22EFFA6B0(a2);
  sub_22E9F34E0((uint64_t)v34, v7);
  if ((LODWORD(v34[0]) - 35) <= 1)
  {
    if ((sub_22E9F667C(a1, (unsigned __int8 *)v34[1], a3, a4) & 1) == 0)
    {
      if (*(_BYTE *)(a3 + 128))
        v8 = 36;
      else
        v8 = 35;
      if (LODWORD(v34[0]) != v8)
      {
        v9 = &v35;
        return sub_22E9F6318(a1, *v9, a3, a4);
      }
      return 0;
    }
    return 1;
  }
  if (*v7 == 173)
  {
    v9 = (uint64_t *)(v7 + 16);
    return sub_22E9F6318(a1, *v9, a3, a4);
  }
  v11 = sub_22E9F69E0(a4, (unint64_t)v7);
  v12 = v11;
  if ((v11 & 1) != 0)
    return 1;
  if (v11 < 2)
    return 0;
  LODWORD(v40) = 4;
  v34[0] = 0;
  LODWORD(v33) = 3;
  v36[0] = *(unsigned int *)(a1 + 1704);
  sub_22EB4DDB8(a1 + 3688, (int *)&v40, (int *)v36, (__int16 *)(a1 + 1693), v34, (int *)&v33);
  v13 = *(unsigned int *)(a1 + 3696);
  v14 = v13 - 2;
  v15 = *(_QWORD *)(a1 + 3688);
  v16 = *(_DWORD *)(v15 + 576 * (v13 - 2));
  if (v16 == 5)
  {
    *(_BYTE *)(v15 + 576 * v13 - 4) = *(_BYTE *)(v15 + 576 * v14 + 572);
    v17 = 1;
  }
  else if (v16 == 2)
  {
    *(_BYTE *)(v15 + 576 * v13 - 4) = 1;
    v17 = *(_BYTE *)(v15 + 576 * v14 + 573) != 0;
  }
  else
  {
    v17 = 0;
    *(_BYTE *)(v15 + 576 * v13 - 4) = 0;
  }
  v18 = v15 + 576 * v13;
  *(_BYTE *)(v18 - 3) = v17;
  *(_WORD *)(a1 + 1693) = 0;
  if (*(_DWORD *)(a1 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v18 - 560));
    sub_22EAEAE08(a1 + 1840, (uint64_t *)(v18 - 496));
  }
  v40 = (char *)v42;
  v41 = 0x200000000;
  LOWORD(v36[0]) = 0;
  LODWORD(v37) = 0;
  v36[1] = &v40;
  v19 = v12 & 0xFFFFFFFFFFFFFFFELL;
  v20 = sub_22F006900(v19, (uint64_t)v36, *(_QWORD *)(a1 + 88), 0);
  if ((_DWORD)v41)
    v21 = 0;
  else
    v21 = v20;
  if ((v21 & 1) == 0)
  {
    sub_22F0D5A50(v19);
    sub_22E8FCA40((_QWORD *)a1, v24, 0xFBBu, 0, (uint64_t)v34);
    sub_22F0D4E74(v19);
    v33 = v25;
    sub_22E8906A0((uint64_t)v34, &v33);
    sub_22E903BEC((unsigned int *)v34);
    if ((_DWORD)v41)
    {
      v26 = (int *)v40;
      v27 = &v40[32 * v41];
      do
      {
        v28 = (uint64_t)(v26 + 2);
        v29 = *v26;
        v26 += 8;
        sub_22E90379C((_QWORD *)a1, v29, v28, 0, (uint64_t)v32);
        sub_22E903BEC(v32);
      }
      while (v26 != (int *)v27);
    }
    goto LABEL_32;
  }
  v22 = v39;
  if (v39 > 0x40)
  {
    v30 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v38);
    *(_BYTE *)(a3 + 128) = v30 != v22;
    if (v30 == v22)
    {
LABEL_36:
      v34[0] = v19;
      sub_22F2CCF30(a3 + 136, (uint64_t)v7, v34);
    }
  }
  else
  {
    v23 = v38;
    *(_BYTE *)(a3 + 128) = v38 != 0;
    if (!v23)
      goto LABEL_36;
  }
LABEL_32:
  v10 = v21 ^ 1u;
  if (v37 >= 2)
    sub_22EF53BC0(&v37);
  sub_22E89277C(&v40);
  sub_22EB48E64(a1);
  return v10;
}

uint64_t sub_22E9F667C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t *a4)
{
  unsigned __int8 *v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int *v26;
  char *v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v32[24];
  uint64_t v33;
  uint64_t v34[2];
  uint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  char *v40;
  uint64_t v41;
  _QWORD v42[9];

  v42[8] = *MEMORY[0x24BDAC8D0];
  v7 = sub_22EFFA6B0(a2);
  sub_22E9F34E0((uint64_t)v34, v7);
  if ((LODWORD(v34[0]) - 35) <= 1)
  {
    if ((sub_22E9F667C(a1, v34[1], a3, a4) & 1) == 0)
    {
      if (*(_BYTE *)(a3 + 128))
        v8 = 36;
      else
        v8 = 35;
      if (LODWORD(v34[0]) != v8)
      {
        v9 = &v35;
        return sub_22E9F667C(a1, *v9, a3, a4);
      }
      return 0;
    }
    return 1;
  }
  if (*v7 == 173)
  {
    v9 = (uint64_t *)(v7 + 16);
    return sub_22E9F667C(a1, *v9, a3, a4);
  }
  v11 = sub_22E9F69E0(a4, (unint64_t)v7);
  v12 = v11;
  if ((v11 & 1) != 0)
    return 1;
  if (v11 < 2)
    return 0;
  LODWORD(v40) = 4;
  v34[0] = 0;
  LODWORD(v33) = 3;
  v36[0] = *(unsigned int *)(a1 + 1704);
  sub_22EB4DDB8(a1 + 3688, (int *)&v40, (int *)v36, (__int16 *)(a1 + 1693), v34, (int *)&v33);
  v13 = *(unsigned int *)(a1 + 3696);
  v14 = v13 - 2;
  v15 = *(_QWORD *)(a1 + 3688);
  v16 = *(_DWORD *)(v15 + 576 * (v13 - 2));
  if (v16 == 5)
  {
    *(_BYTE *)(v15 + 576 * v13 - 4) = *(_BYTE *)(v15 + 576 * v14 + 572);
    v17 = 1;
  }
  else if (v16 == 2)
  {
    *(_BYTE *)(v15 + 576 * v13 - 4) = 1;
    v17 = *(_BYTE *)(v15 + 576 * v14 + 573) != 0;
  }
  else
  {
    v17 = 0;
    *(_BYTE *)(v15 + 576 * v13 - 4) = 0;
  }
  v18 = v15 + 576 * v13;
  *(_BYTE *)(v18 - 3) = v17;
  *(_WORD *)(a1 + 1693) = 0;
  if (*(_DWORD *)(a1 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v18 - 560));
    sub_22EAEAE08(a1 + 1840, (uint64_t *)(v18 - 496));
  }
  v40 = (char *)v42;
  v41 = 0x200000000;
  LOWORD(v36[0]) = 0;
  LODWORD(v37) = 0;
  v36[1] = &v40;
  v19 = v12 & 0xFFFFFFFFFFFFFFFELL;
  v20 = sub_22F006900(v19, (uint64_t)v36, *(_QWORD *)(a1 + 88), 0);
  if ((_DWORD)v41)
    v21 = 0;
  else
    v21 = v20;
  if ((v21 & 1) == 0)
  {
    sub_22F0D5A50(v19);
    sub_22E8FCA40((_QWORD *)a1, v24, 0xFBBu, 0, (uint64_t)v34);
    sub_22F0D4E74(v19);
    v33 = v25;
    sub_22E8906A0((uint64_t)v34, &v33);
    sub_22E903BEC((unsigned int *)v34);
    if ((_DWORD)v41)
    {
      v26 = (int *)v40;
      v27 = &v40[32 * v41];
      do
      {
        v28 = (uint64_t)(v26 + 2);
        v29 = *v26;
        v26 += 8;
        sub_22E90379C((_QWORD *)a1, v29, v28, 0, (uint64_t)v32);
        sub_22E903BEC(v32);
      }
      while (v26 != (int *)v27);
    }
    goto LABEL_32;
  }
  v22 = v39;
  if (v39 > 0x40)
  {
    v30 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v38);
    *(_BYTE *)(a3 + 128) = v30 != v22;
    if (v30 == v22)
    {
LABEL_36:
      v34[0] = v19;
      sub_22F2CCF30(a3 + 136, (uint64_t)v7, v34);
    }
  }
  else
  {
    v23 = v38;
    *(_BYTE *)(a3 + 128) = v38 != 0;
    if (!v23)
      goto LABEL_36;
  }
LABEL_32:
  v10 = v21 ^ 1u;
  if (v37 >= 2)
    sub_22EF53BC0(&v37);
  sub_22E89277C(&v40);
  sub_22EB48E64(a1);
  return v10;
}

uint64_t sub_22E9F69E0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unsigned int v23;
  __n128 v24;
  char v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  size_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  char v40;
  char v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  int32x2_t v52;
  char v53;
  void *__src;
  __int128 v55;
  _WORD v56[64];
  uint64_t v57;
  int v58;
  char v59;
  uint64_t v60;
  char *v61[2];
  _QWORD v62[17];
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  void *v68;
  uint64_t v69;
  _QWORD v70[10];
  void *v71;
  uint64_t v72;
  _BYTE v73[104];
  void *v74;
  uint64_t v75;
  _QWORD v76[10];

  v76[8] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v48 = 4;
  v57 = 0;
  v52.i32[0] = 3;
  __src = (void *)*(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v48, (int *)&__src, (__int16 *)(v4 + 1693), &v57, (int *)&v52);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = *a1;
  v12 = *(_DWORD *)a1[1];
  v57 = 0;
  v58 = v12;
  v59 = 0;
  v60 = 0;
  v61[0] = (char *)v62;
  v61[1] = (char *)0x400000000;
  v62[16] = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = v70;
  v69 = 0x800000000;
  v70[9] = 0;
  v70[8] = 0;
  v71 = v73;
  v72 = 0x400000000;
  v73[96] = 0;
  v74 = v76;
  v75 = 0x400000000;
  sub_22F0D5A50(a2);
  v14 = v13;
  v15 = *(_QWORD *)a1[2];
  sub_22F0D4E74(a2);
  sub_22EE00E90(&v52, v11, 15, v14, v16, v15, 0, v17, 0, 0, (uint64_t)&v57);
  if (v53)
  {
    v18 = 0;
    v19 = 1;
    v20 = 1;
  }
  else
  {
    v21 = *a1;
    v22 = (char *)(*a1 + 10664);
    v23 = *(_DWORD *)(*a1 + 8456);
    v40 = *v22;
    v41 = *(_BYTE *)(*a1 + 11952);
    v43 = *(_DWORD *)(*(_QWORD *)(*a1 + 104) + 180);
    sub_22EE03478(*a1);
    if (!v25)
      v22[1288] = 1;
    *v22 = 0;
    v26 = sub_22EE0A68C(v21, a2, a1[3], v24);
    if ((v26 & 1) != 0)
    {
      v44 = v26;
      v27 = 1;
    }
    else
    {
      v44 = sub_22ED025A8((uint64_t *)*a1, (unsigned __int8 *)(v26 & 0xFFFFFFFFFFFFFFFELL));
      v27 = v44 & 1;
    }
    v28 = *(_DWORD *)(v21 + 8456);
    v42 = v23;
    v29 = v28 > v23;
    if (v28 > v23)
      v19 = 1;
    else
      v19 = v27;
    if (v29)
    {
      v48 = 0;
      v49 = 0;
      v50 = 0;
      v51 = 0;
      sub_22E9F6EB8((unint64_t)&v57, (uint64_t)&v48);
      __src = v56;
      v56[0] = 8250;
      v55 = xmmword_22F45D830;
      sub_22E9F6F54((uint64_t)&v49, *(_QWORD *)(*a1 + 104), &__src);
      v34 = v55;
      v35 = (void *)sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, v55, 3);
      v36 = v55;
      v39 = v35;
      if ((unint64_t)(v55 + 1) > *((_QWORD *)&v55 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v35 = v39;
        v36 = v55;
      }
      *((_BYTE *)__src + v36) = 0;
      memcpy(v35, __src, v34);
      v38 = a1[4] + 136;
      v37 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 24, 3);
      *(_DWORD *)v37 = v48;
      *(_QWORD *)(v37 + 8) = v39;
      *(_QWORD *)(v37 + 16) = v34;
      v47 = v37;
      sub_22F2CCEF8(v38, a2, &v47);
      *(_BYTE *)(a1[4] + 128) = 0;
      if (__src != v56)
        free(__src);
      if (v49 && v50)
        sub_22E3BB10C(v50, v49);
      v20 = 0;
      v19 = 1;
    }
    else
    {
      v20 = 1;
    }
    *(_DWORD *)(v21 + 8456) = v42;
    v22[1288] = v41;
    *v22 = v40;
    v30 = *(_QWORD *)(v21 + 104);
    if (*(_DWORD *)(v30 + 180) == 5)
      *(_BYTE *)(v30 + 170) = 1;
    if (v43)
      v31 = 3;
    else
      v31 = 0;
    *(_DWORD *)(v30 + 180) = v31;
    v18 = v44;
  }
  sub_22EE014E4(&v52);
  if (v74 != v76)
    free(v74);
  if (v71 != v73)
    free(v71);
  if (v68 != v70)
    free(v68);
  sub_22E89277C(v61);
  if (!v19)
  {
    v32 = *a1;
    v46 = 0;
    v45 = 0uLL;
    if (sub_22E9F3234(v32, (unsigned __int8 *)(v18 & 0xFFFFFFFFFFFFFFFELL), &v45, 0, 0))
      v20 = v18;
    else
      v20 = 1;
  }
  sub_22EB48E64(v4);
  return v20;
}

unint64_t sub_22E9F6EB8(unint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v2 = result;
  v3 = *(_QWORD *)(result + 24);
  *(_DWORD *)a2 = *(_DWORD *)v3;
  v4 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v6;
  v7 = *(unsigned int *)(result + 32);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(result + 24);
    v9 = 32 * v7;
    do
    {
      v10 = v8 + v9;
      v11 = *(_QWORD *)(v8 + v9 - 24);
      if (v11)
      {
        result = *(_QWORD *)(v10 - 16);
        if (result)
        {
          result = sub_22E3BB10C(result, v11);
          *(_QWORD *)(v10 - 24) = 0;
        }
      }
      v9 -= 32;
    }
    while (v9);
  }
  *(_DWORD *)(v2 + 32) = 0;
  *(_BYTE *)(v2 + 12) = 0;
  return result;
}

uint64_t sub_22E9F6F54(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  unsigned __int8 *v12[2];
  uint64_t v13;
  __int16 v14;

  v6 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a2 + 312) = 0;
  *(_DWORD *)(a2 + 316) = v6;
  if (*(char *)(a2 + 311) < 0)
  {
    **(_BYTE **)(a2 + 288) = 0;
    *(_QWORD *)(a2 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(a2 + 288) = 0;
    *(_BYTE *)(a2 + 311) = 0;
  }
  v12[0] = (unsigned __int8 *)(a2 + 320);
  v12[1] = 0;
  v13 = a2;
  v14 = 1;
  *(_BYTE *)(a2 + 320) = 0;
  *(_DWORD *)(a2 + 664) = 0;
  v7 = *(unsigned int *)(a2 + 776);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a2 + 768);
    v9 = 56 * v7;
    do
    {
      if (*(char *)(v8 + v9 - 9) < 0)
        operator delete(*(void **)(v8 + v9 - 32));
      v9 -= 56;
    }
    while (v9);
  }
  *(_DWORD *)(a2 + 776) = 0;
  sub_22E906864((unsigned __int8 **)a1, v12);
  v11[1] = 0;
  v11[2] = 0;
  v11[0] = a2;
  sub_22F41A758(v11, a3);
  v13 = 0;
  v14 = 0;
  *(_DWORD *)(a2 + 316) = -1;
  return sub_22E3BB0B8((uint64_t)v12);
}

uint64_t sub_22E9F7044(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;

  v2 = result;
  v3 = *a2;
  v4 = *((unsigned int *)a2 + 2);
  v5 = *(_DWORD *)(result + 8);
  if (v5 >= *(_DWORD *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(v2 + 8);
  }
  v6 = (_QWORD *)(*(_QWORD *)v2 + 16 * v5);
  *v6 = v3;
  v6[1] = v4;
  ++*(_DWORD *)(v2 + 8);
  return result;
}

_QWORD *sub_22E9F70B0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _QWORD *result;
  unint64_t v7;
  unint64_t v9;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v7 = v5 + 32 * v4;
    if (v5 <= a2 && v7 > a2)
    {
      v9 = a2 - v5;
      sub_22F31A8C0(a1);
      v5 = *(_QWORD *)a1;
      v2 = *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_22F31A8C0(a1);
      v5 = *(_QWORD *)a1;
    }
  }
  result = (_QWORD *)(v5 + 32 * *(unsigned int *)(a1 + 8));
  *result = result + 2;
  result[1] = 0x200000000;
  if (*(_DWORD *)(v2 + 8))
    result = (_QWORD *)sub_22F24C77C((uint64_t)result, v2);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22E9F7158(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(unsigned int *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        v10 = *(char **)a1;
        if ((_DWORD)v5)
        {
          v11 = 0;
          do
          {
            sub_22F24C77C((uint64_t)&v10[v11], (uint64_t)&v4[v11]);
            v11 += 32;
          }
          while (32 * v5 != v11);
          v6 = *(unsigned int *)(a1 + 8);
          v12 = &v10[v11];
          v10 = *(char **)a1;
        }
        else
        {
          v12 = *(char **)a1;
        }
        v13 = &v10[32 * v6];
        if (v13 != v12)
        {
          v14 = v13 - 16;
          do
          {
            v15 = (char *)*((_QWORD *)v14 - 2);
            if (v14 != v15)
              free(v15);
            v16 = v14 - 16;
            v14 -= 32;
          }
          while (v16 != v12);
        }
        *(_DWORD *)(a1 + 8) = v5;
        v17 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v17)
        {
          v18 = *(char **)a2;
          v19 = 32 * v17;
          do
          {
            v20 = *(char **)&v18[v19 - 32];
            if (&v18[v19 - 16] != v20)
              free(v20);
            v19 -= 32;
          }
          while (v19);
        }
        goto LABEL_44;
      }
      if (*(_DWORD *)(a1 + 12) < v5)
      {
        if ((_DWORD)v6)
        {
          v21 = *(char **)a1;
          v22 = 32 * v6;
          do
          {
            v23 = *(char **)&v21[v22 - 32];
            if (&v21[v22 - 16] != v23)
              free(v23);
            v22 -= 32;
          }
          while (v22);
        }
        *(_DWORD *)(a1 + 8) = 0;
        sub_22F31A8C0(a1);
      }
      else if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)a1;
        v8 = 32 * v6;
        do
        {
          v9 = sub_22F24C77C(v7, (uint64_t)v4);
          v4 += 32;
          v7 = v9 + 32;
          v8 -= 32;
        }
        while (v8);
        goto LABEL_33;
      }
      v6 = 0;
LABEL_33:
      v24 = *(char **)a2;
      v25 = *(unsigned int *)(a2 + 8);
      if (v6 != v25)
      {
        v26 = *(char **)a1;
        v27 = 32 * v6;
        v28 = 32 * v25;
        do
        {
          v29 = &v26[v27];
          *(_QWORD *)v29 = &v26[v27 + 16];
          *((_QWORD *)v29 + 1) = 0x200000000;
          if (*(_DWORD *)&v24[v27 + 8])
            sub_22F24C77C((uint64_t)v29, (uint64_t)&v24[v27]);
          v26 += 32;
          v28 -= 32;
          v24 += 32;
        }
        while (v27 != v28);
        v24 = *(char **)a2;
      }
      *(_DWORD *)(a1 + 8) = v5;
      v30 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v30)
      {
        v31 = 32 * v30;
        do
        {
          v32 = *(char **)&v24[v31 - 32];
          if (&v24[v31 - 16] != v32)
            free(v32);
          v31 -= 32;
        }
        while (v31);
      }
LABEL_44:
      *(_DWORD *)(a2 + 8) = 0;
      return a1;
    }
    sub_22F31A9DC((char **)a1, (char **)a2);
  }
  return a1;
}

uint64_t sub_22E9F7384(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;

  if ((uint64_t *)result != a2)
  {
    v5 = (uint64_t *)result;
    v6 = *(_DWORD *)(a3 + 8);
    do
    {
      v7 = *v5;
      if (v6 >= *(_DWORD *)(a3 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v6 = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v6) = v7;
      v6 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v6;
      ++v5;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t sub_22E9F741C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int *v21;
  char *v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v27[24];
  uint64_t v28;
  uint64_t v29[2];
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  char *v35;
  uint64_t v36;
  _QWORD v37[9];

  v37[8] = *MEMORY[0x24BDAC8D0];
  v5 = (unint64_t)sub_22EFFA6B0(a2);
  sub_22E9F34E0((uint64_t)v29, (unsigned __int8 *)v5);
  if ((LODWORD(v29[0]) - 35) <= 1)
  {
    if ((sub_22E9F741C(a1, v29[1], a3) & 1) == 0)
    {
      if (*(_BYTE *)(a3 + 128))
        v6 = 36;
      else
        v6 = 35;
      if (LODWORD(v29[0]) != v6)
      {
        v7 = &v30;
        return sub_22E9F741C(a1, *v7, a3);
      }
      return 0;
    }
    return 1;
  }
  if (*(unsigned __int8 *)v5 == 173)
  {
    v7 = (uint64_t *)(v5 + 16);
    return sub_22E9F741C(a1, *v7, a3);
  }
  if ((v5 & 1) != 0)
    return 1;
  if (v5 < 2)
    return 0;
  LODWORD(v35) = 4;
  v29[0] = 0;
  LODWORD(v28) = 3;
  v31[0] = *(unsigned int *)(a1 + 1704);
  sub_22EB4DDB8(a1 + 3688, (int *)&v35, (int *)v31, (__int16 *)(a1 + 1693), v29, (int *)&v28);
  v9 = *(unsigned int *)(a1 + 3696);
  v10 = v9 - 2;
  v11 = *(_QWORD *)(a1 + 3688);
  v12 = *(_DWORD *)(v11 + 576 * (v9 - 2));
  if (v12 == 5)
  {
    *(_BYTE *)(v11 + 576 * v9 - 4) = *(_BYTE *)(v11 + 576 * v10 + 572);
    v13 = 1;
  }
  else if (v12 == 2)
  {
    *(_BYTE *)(v11 + 576 * v9 - 4) = 1;
    v13 = *(_BYTE *)(v11 + 576 * v10 + 573) != 0;
  }
  else
  {
    v13 = 0;
    *(_BYTE *)(v11 + 576 * v9 - 4) = 0;
  }
  v14 = v11 + 576 * v9;
  *(_BYTE *)(v14 - 3) = v13;
  *(_WORD *)(a1 + 1693) = 0;
  if (*(_DWORD *)(a1 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v14 - 560));
    sub_22EAEAE08(a1 + 1840, (uint64_t *)(v14 - 496));
  }
  v35 = (char *)v37;
  v36 = 0x200000000;
  LOWORD(v31[0]) = 0;
  LODWORD(v32) = 0;
  v31[1] = &v35;
  v15 = sub_22F006900(v5 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v31, *(_QWORD *)(a1 + 88), 0);
  if ((_DWORD)v36)
    v16 = 0;
  else
    v16 = v15;
  if ((v16 & 1) == 0)
  {
    sub_22F0D5A50(v5 & 0xFFFFFFFFFFFFFFFELL);
    sub_22E8FCA40((_QWORD *)a1, v19, 0xFBBu, 0, (uint64_t)v29);
    sub_22F0D4E74(v5 & 0xFFFFFFFFFFFFFFFELL);
    v28 = v20;
    sub_22E8906A0((uint64_t)v29, &v28);
    sub_22E903BEC((unsigned int *)v29);
    if ((_DWORD)v36)
    {
      v21 = (int *)v35;
      v22 = &v35[32 * v36];
      do
      {
        v23 = (uint64_t)(v21 + 2);
        v24 = *v21;
        v21 += 8;
        sub_22E90379C((_QWORD *)a1, v24, v23, 0, (uint64_t)v27);
        sub_22E903BEC(v27);
      }
      while (v21 != (int *)v22);
    }
    goto LABEL_32;
  }
  v17 = v34;
  if (v34 > 0x40)
  {
    v25 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v33);
    *(_BYTE *)(a3 + 128) = v25 != v17;
    if (v25 == v17)
    {
LABEL_36:
      v29[0] = v5 & 0xFFFFFFFFFFFFFFFELL;
      sub_22F2CCF30(a3 + 136, v5, v29);
    }
  }
  else
  {
    v18 = v33;
    *(_BYTE *)(a3 + 128) = v33 != 0;
    if (!v18)
      goto LABEL_36;
  }
LABEL_32:
  v8 = v16 ^ 1u;
  if (v32 >= 2)
    sub_22EF53BC0(&v32);
  sub_22E89277C(&v35);
  sub_22EB48E64(a1);
  return v8;
}

void sub_22E9F7764(_QWORD *a1, unsigned __int8 *a2, int a3)
{
  unsigned __int8 *v5;
  int v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  char v45;
  uint64_t v46;
  int v47;
  BOOL v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const void *v56;
  void **v57;
  unint64_t v58;
  int v59;
  _QWORD *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  _QWORD *v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  void *__p[2];
  unint64_t v83;
  _QWORD v84[2];
  void *__dst[2];
  unint64_t v86;
  int v87;
  unsigned __int8 *v88;
  _OWORD v89[6];
  unint64_t v90;
  uint64_t v91;
  uint64_t v92[2];
  unint64_t v93;
  uint64_t v94;
  uint64_t v95[2];
  _QWORD *v96;
  __int128 v97;
  _QWORD v98[8];

  v98[5] = *MEMORY[0x24BDAC8D0];
  v5 = sub_22EFFA6B0(a2);
  v88 = v5;
  v6 = *v5;
  if ((v6 & 0xFE) != 0x70)
  {
LABEL_4:
    if (v6 == 157)
      v8 = v5;
    else
      v8 = 0;
    __dst[0] = v8;
    if (v6 == 157)
    {
      if (*(_DWORD *)(*((_QWORD *)v5 + 10) + 8) == 1)
      {
        sub_22F0D4E74((uint64_t)v5);
        sub_22E8FCA40(a1, v37, 0x17BFu, 0, (uint64_t)v89);
        LODWORD(v90) = a3;
        v38 = sub_22E8900C4((uint64_t)v89, (int *)&v90);
        v39 = sub_22F31ABB4(v38, *((_QWORD *)v5 + 10) + 16);
        v93 = *((_QWORD *)v5 + 9);
        sub_22E9AEF84(v39, (uint64_t *)&v93);
      }
      else
      {
        sub_22F0D4E74((uint64_t)v5);
        sub_22E8FCA40(a1, v40, 0x156Fu, 0, (uint64_t)v89);
        LODWORD(v93) = a3;
        v41 = sub_22E8900C4((uint64_t)v89, (int *)&v93);
        sub_22F2F37E0(v41, (uint64_t *)__dst);
      }
      sub_22E903BEC((unsigned int *)v89);
      v42 = (_QWORD *)*((_QWORD *)v5 + 12);
      if (*v42)
      {
        v43 = 16 * *v42;
        v44 = v42 + 3;
        v45 = 1;
        do
        {
          sub_22E9F4654(a1, v44, v45 & 1);
          v45 = 0;
          v44 += 2;
          v43 -= 16;
        }
        while (v43);
      }
      return;
    }
    if (v6 != 219)
      goto LABEL_83;
    v9 = *((unsigned int *)v5 + 5);
    if (!(_DWORD)v9)
      return;
    v10 = (uint64_t)&v5[8 * *((unsigned int *)v5 + 4) + 40];
    v11 = 8 * v9;
    while (1)
    {
      v12 = *(_QWORD *)v10;
      if ((*(_BYTE *)(*(_QWORD *)v10 + 4) & 5) == 0)
        break;
      v10 += 8;
      v11 -= 8;
      if (!v11)
        return;
    }
    if ((*(_DWORD *)v12 - 3) >= 0xFFFFFFFE)
    {
      switch(*(_DWORD *)(v12 + 40))
      {
        case 1:
          v58 = *(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFFCLL;
          if (!*(_QWORD *)(v58 + 32))
          {
            v59 = *(_DWORD *)(v58 + 16);
            v60 = a1;
            v61 = 5615;
            goto LABEL_123;
          }
          v72 = v58 + 24;
          v73 = *(_DWORD *)(v58 + 16);
          v74 = a1;
          v75 = 5614;
          break;
        case 2:
          sub_22E8FCA40(a1, *(_DWORD *)(v12 + 16), 0x15F0u, 0, (uint64_t)v89);
          LODWORD(v90) = a3;
          v78 = sub_22E8900C4((uint64_t)v89, (int *)&v90);
          v93 = *(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFFCLL;
          sub_22F2F37E0(v78, (uint64_t *)&v93);
          goto LABEL_84;
        case 3:
          v58 = *(_QWORD *)(v12 + 24) & 0xFFFFFFFFFFFFFFF8;
          if (!*(_QWORD *)(v58 + 32))
          {
            v59 = *(_DWORD *)(v58 + 16);
            v60 = a1;
            v61 = 5618;
            goto LABEL_123;
          }
          v72 = v58 + 24;
          v73 = *(_DWORD *)(v58 + 16);
          v74 = a1;
          v75 = 5617;
          break;
        case 4:
          v23 = *(_QWORD *)(v12 + 32);
          v93 = v23;
          if (*(_DWORD *)(*(_QWORD *)(v23 + 80) + 8) == 1)
          {
            v24 = *(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFFCLL;
            sub_22F0D5A50(v24);
            sub_22E8FCA40(a1, v25, 0x15EDu, 0, (uint64_t)v89);
            LODWORD(__p[0]) = a3;
            v26 = sub_22E8900C4((uint64_t)v89, (int *)__p);
            v90 = sub_22EF67758(a1[11], v24);
            v27 = sub_22E8901B8(v26, (uint64_t *)&v90);
            v96 = *(_QWORD **)(v23 + 72);
            sub_22E9AEF84(v27, (uint64_t *)&v96);
          }
          else
          {
            v89[0] = *(_OWORD *)(v23 + 16);
            if (*(_QWORD *)&v89[0])
              v79 = sub_22F0AB0EC((unint64_t *)v89);
            else
              v79 = *(_DWORD *)(v23 + 48);
            sub_22E8FCA40(a1, v79, 0x15ECu, 0, (uint64_t)v89);
            LODWORD(v90) = a3;
            v81 = sub_22E8900C4((uint64_t)v89, (int *)&v90);
            sub_22F2F37E0(v81, (uint64_t *)&v93);
          }
          sub_22E903BEC((unsigned int *)v89);
          v28 = *(_QWORD **)(v23 + 96);
          if (*v28)
          {
            v29 = 16 * *v28;
            v30 = v28 + 3;
            v31 = 1;
            do
            {
              sub_22E9F4654(a1, v30, v31 & 1);
              v31 = 0;
              v30 += 2;
              v29 -= 16;
            }
            while (v29);
          }
          return;
        default:
          return;
      }
    }
    else if (*(_DWORD *)v12)
    {
      v17 = *(_QWORD *)(v12 + 8);
      if ((v17 & 2) == 0)
      {
        v18 = *(_QWORD **)(v12 + 16);
        if (*v18)
        {
          v19 = 16 * *v18;
          v20 = v18 + 3;
          do
          {
            sub_22E9F4654(a1, v20, a3 & 1);
            LOBYTE(a3) = 0;
            v20 += 2;
            v19 -= 16;
          }
          while (v19);
        }
        return;
      }
      v58 = v17 & 0xFFFFFFFFFFFFFFFCLL;
      if (!*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFFCLL) + 32))
      {
        v59 = *(_DWORD *)(v58 + 16);
        v60 = a1;
        v61 = 5828;
        goto LABEL_123;
      }
      v72 = v58 + 24;
      v73 = *(_DWORD *)(v58 + 16);
      v74 = a1;
      v75 = 5827;
    }
    else
    {
      v58 = *(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!*(_QWORD *)(v58 + 32))
      {
        v59 = *(_DWORD *)(v58 + 16);
        v60 = a1;
        v61 = 6135;
LABEL_123:
        sub_22E8FCA40(v60, v59, v61, 0, (uint64_t)v89);
        LODWORD(v93) = a3;
        v76 = sub_22E8900C4((uint64_t)v89, (int *)&v93);
        v77 = v58;
LABEL_131:
        sub_22F2F2210(v76, v77);
        goto LABEL_84;
      }
      v72 = v58 + 24;
      v73 = *(_DWORD *)(v58 + 16);
      v74 = a1;
      v75 = 6134;
    }
    sub_22E8FCA40(v74, v73, v75, 0, (uint64_t)v89);
    LODWORD(v93) = a3;
    v80 = sub_22E8900C4((uint64_t)v89, (int *)&v93);
    v76 = sub_22F2F2210(v80, v58);
    v77 = v72;
    goto LABEL_131;
  }
  while (1)
  {
    v7 = (*(_DWORD *)v5 >> 18) & 0x3F;
    if (v7 != 20)
      break;
    sub_22E9F7764(a1, *((_QWORD *)v5 + 2), a3 & 1);
    v5 = sub_22EFFA6B0(*((unsigned __int8 **)v5 + 3));
    a3 = 0;
    v88 = v5;
    v6 = *v5;
    if ((v6 & 0xFE) != 0x70)
      goto LABEL_4;
  }
  if (v7 != 19)
  {
    if ((v7 - 10) < 6)
    {
      v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 2) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v33 = *(_DWORD *)(v32 + 16);
      if (v32)
        v34 = v33 == 11;
      else
        v34 = 0;
      if (v34)
      {
        if (((*(_DWORD *)(v32 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
          goto LABEL_83;
      }
      else if (v32 && v33 == 44)
      {
        v35 = sub_22F114198(*(_QWORD *)(v32 + 24));
        if ((*(_BYTE *)(v35 + 74) & 1) == 0 && *(_QWORD *)(v35 + 128) <= 7uLL
          || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v32 + 24)) + 76) & 0x80) != 0)
        {
          goto LABEL_83;
        }
      }
      else if (v33 != 9)
      {
        goto LABEL_83;
      }
      v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v47 = *(_DWORD *)(v46 + 16);
      if (v46)
        v48 = v47 == 11;
      else
        v48 = 0;
      if (v48)
      {
        if (((*(_DWORD *)(v46 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
          goto LABEL_77;
      }
      else
      {
        if (v46 && v47 == 44)
        {
          v49 = sub_22F114198(*(_QWORD *)(v46 + 24));
          if ((*(_BYTE *)(v49 + 74) & 1) == 0 && *(_QWORD *)(v49 + 128) <= 7uLL
            || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v46 + 24)) + 76) & 0x80) != 0)
          {
            goto LABEL_83;
          }
LABEL_77:
          LOWORD(v93) = 0;
          v94 = 0;
          LODWORD(v95[0]) = 0;
          LOWORD(v90) = 0;
          v91 = 0;
          LODWORD(v92[0]) = 0;
          sub_22F00554C(*((_QWORD *)v5 + 2), (uint64_t)&v93, a1[11], 0, 1);
          sub_22F00554C(*((_QWORD *)v5 + 3), (uint64_t)&v90, a1[11], 0, 1);
          if (v94 | v91)
          {
            if (LODWORD(v92[0]) >= 2)
              sub_22EF53BC0(v92);
            if (LODWORD(v95[0]) >= 2)
              sub_22EF53BC0(v95);
            v5 = v88;
            goto LABEL_83;
          }
          sub_22F0D5A50((uint64_t)v88);
          sub_22E8FCA40(a1, v52, 0x154Au, 0, (uint64_t)v89);
          v87 = a3 & 1;
          v53 = sub_22E8900C4((uint64_t)v89, &v87);
          v54 = sub_22F2F37E0(v53, (uint64_t *)&v88);
          v96 = v98;
          v97 = xmmword_22F455490;
          llvm::APInt::toString();
          v55 = (void *)v97;
          if ((unint64_t)v97 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_134;
          v56 = v96;
          if ((unint64_t)v97 >= 0x17)
          {
            v62 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
            if (((unint64_t)v97 | 7) != 0x17)
              v62 = v97 | 7;
            v63 = v62 + 1;
            v57 = (void **)operator new(v62 + 1);
            __dst[1] = v55;
            v86 = v63 | 0x8000000000000000;
            __dst[0] = v57;
          }
          else
          {
            HIBYTE(v86) = v97;
            v57 = __dst;
            if (!(_QWORD)v97)
            {
LABEL_98:
              *((_BYTE *)v55 + (_QWORD)v57) = 0;
              if (v96 != v98)
                free(v96);
              v64 = sub_22F2F3734(v54, __dst);
              v84[0] = sub_22EFFBA38((*(_DWORD *)v5 >> 18) & 0x3F);
              v84[1] = v65;
              v66 = sub_22F2F2210(v64, (uint64_t)v84);
              v96 = v98;
              v97 = xmmword_22F455490;
              llvm::APInt::toString();
              v67 = (void *)v97;
              if ((unint64_t)v97 <= 0x7FFFFFFFFFFFFFF7)
              {
                v68 = v96;
                if ((unint64_t)v97 >= 0x17)
                {
                  v70 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if (((unint64_t)v97 | 7) != 0x17)
                    v70 = v97 | 7;
                  v71 = v70 + 1;
                  v69 = operator new(v70 + 1);
                  __p[1] = v67;
                  v83 = v71 | 0x8000000000000000;
                  __p[0] = v69;
                }
                else
                {
                  HIBYTE(v83) = v97;
                  v69 = __p;
                  if (!(_QWORD)v97)
                    goto LABEL_108;
                }
                memmove(v69, v68, (size_t)v67);
LABEL_108:
                *((_BYTE *)v67 + (_QWORD)v69) = 0;
                if (v96 != v98)
                  free(v96);
                sub_22F2F3734(v66, __p);
                if (SHIBYTE(v83) < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(v86) < 0)
                  operator delete(__dst[0]);
                sub_22E903BEC((unsigned int *)v89);
                if (LODWORD(v92[0]) >= 2)
                  sub_22EF53BC0(v92);
                if (LODWORD(v95[0]) >= 2)
                  sub_22EF53BC0(v95);
                return;
              }
LABEL_134:
              abort();
            }
          }
          memmove(v57, v56, (size_t)v55);
          goto LABEL_98;
        }
        if (v47 == 9)
          goto LABEL_77;
      }
    }
LABEL_83:
    sub_22F0D4E74((uint64_t)v5);
    sub_22E8FCA40(a1, v50, 0x1549u, 0, (uint64_t)v89);
    LODWORD(v93) = a3 & 1;
    v51 = sub_22E8900C4((uint64_t)v89, (int *)&v93);
    sub_22F2F37E0(v51, (uint64_t *)&v88);
LABEL_84:
    sub_22E903BEC((unsigned int *)v89);
    return;
  }
  sub_22F007D7C(*((unsigned __int8 **)v5 + 2), a1[11], 0, (uint64_t)v89);
  v13 = DWORD2(v89[0]);
  if (DWORD2(v89[0]) > 0x40)
  {
    v21 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v89);
    if (*(_QWORD *)&v89[0])
      MEMORY[0x2348A0E84](*(_QWORD *)&v89[0], 0x1000C8000313F17);
    if (v21 != v13)
      goto LABEL_17;
  }
  else if (*(_QWORD *)&v89[0])
  {
LABEL_17:
    v14 = *((_QWORD *)v5 + 3);
    v15 = a3 & 1;
    v16 = a1;
LABEL_53:
    sub_22E9F7764(v16, v14, v15);
    return;
  }
  sub_22E9F7764(a1, *((_QWORD *)v5 + 2), a3 & 1);
  sub_22F007D7C(*((unsigned __int8 **)v5 + 3), a1[11], 0, (uint64_t)v89);
  v22 = DWORD2(v89[0]);
  if (DWORD2(v89[0]) > 0x40)
  {
    v36 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v89);
    if (*(_QWORD *)&v89[0])
      MEMORY[0x2348A0E84](*(_QWORD *)&v89[0], 0x1000C8000313F17);
    if (v36 == v22)
      goto LABEL_52;
  }
  else if (!*(_QWORD *)&v89[0])
  {
LABEL_52:
    v14 = *((_QWORD *)v5 + 3);
    v16 = a1;
    v15 = 0;
    goto LABEL_53;
  }
}

BOOL sub_22E9F81B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v12[24];
  void *v13[2];
  _BYTE v14[128];
  void *v15[2];
  _QWORD v16[17];

  v16[16] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 24))
    v3 = *(_BYTE *)(a3 + 24) == 0;
  else
    v3 = 1;
  if (v3)
    return (*(_BYTE *)(a1 + 24) != 0) == (*(_BYTE *)(a3 + 24) != 0);
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a3 + 16))
    return 0;
  if (!*(_QWORD *)(a1 + 16))
    return 1;
  v8 = 0;
  v9 = 32 * *(_QWORD *)(a1 + 16) - 32;
  do
  {
    v15[0] = v16;
    v15[1] = (void *)0x2000000000;
    v13[0] = v14;
    v13[1] = (void *)0x2000000000;
    sub_22EF6871C((unsigned int *)(*(_QWORD *)(a1 + 8) + v8), (uint64_t)v12);
    sub_22F0EED38((uint64_t)v12, (uint64_t)v15, a2);
    sub_22EF6871C((unsigned int *)(*(_QWORD *)(a3 + 8) + v8), (uint64_t)v12);
    sub_22F0EED38((uint64_t)v12, (uint64_t)v13, a2);
    v4 = llvm::FoldingSetNodeID::operator==();
    if (v13[0] != v14)
      free(v13[0]);
    if (v15[0] != v16)
      free(v15[0]);
    if (v9 == v8)
      v10 = 0;
    else
      v10 = v4;
    v8 += 32;
  }
  while ((v10 & 1) != 0);
  return v4;
}

int64x2_t *sub_22E9F8348(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int64x2_t *result;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)MEMORY[0x23489D23C]((_QWORD *)v8, 24 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F31ADD4(a1, (uint64_t)v4, (uint64_t)v4 + 24 * v3);
    return (int64x2_t *)llvm::deallocate_buffer(v4, (void *)(24 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *result = v12;
        result = (int64x2_t *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E9F8418(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v10 = 0;
        v11 = *(_QWORD *)a2;
        v12 = *(_QWORD *)a1;
        do
        {
          sub_22F24C890(v12 + v10, v11 + v10);
          v10 += 32;
        }
        while (32 * v4 != v10);
        v5 = *(unsigned int *)(a1 + 8);
        v13 = *(_QWORD *)a1;
        v14 = v12 + v10;
      }
      else
      {
        v13 = *(_QWORD *)a1;
        v14 = *(_QWORD *)a1;
      }
      v15 = v13 + 32 * v5;
      if (v15 != v14)
      {
        v16 = (char *)(v15 - 16);
        do
        {
          v17 = (char *)*((_QWORD *)v16 - 2);
          if (v16 != v17)
            free(v17);
          v18 = v16 - 16;
          v16 -= 32;
        }
        while (v18 != (char *)v14);
      }
      goto LABEL_27;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      if ((_DWORD)v5)
      {
        v19 = *(_QWORD *)a1;
        v20 = 32 * v5;
        do
        {
          v21 = *(void **)(v19 + v20 - 32);
          if ((void *)(v19 + v20 - 16) != v21)
            free(v21);
          v20 -= 32;
        }
        while (v20);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_22F31A8C0(a1);
    }
    else if ((_DWORD)v5)
    {
      v6 = *(_QWORD *)a2;
      v7 = *(_QWORD *)a1;
      v8 = 32 * v5;
      do
      {
        v9 = sub_22F24C890(v7, v6);
        v6 += 32;
        v7 = v9 + 32;
        v8 -= 32;
      }
      while (v8);
LABEL_26:
      v22 = *(unsigned int *)(a2 + 8);
      if (v5 != v22)
      {
        v24 = *(_QWORD *)a2;
        v25 = *(_QWORD *)a1;
        v26 = 32 * v5;
        v27 = 32 * v22;
        do
        {
          v28 = (_QWORD *)(v25 + v26);
          *v28 = v25 + v26 + 16;
          v28[1] = 0x200000000;
          if (*(_DWORD *)(v24 + v26 + 8))
            sub_22F24C890((uint64_t)v28, v24 + v26);
          v25 += 32;
          v27 -= 32;
          v24 += 32;
        }
        while (v26 != v27);
      }
LABEL_27:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    v5 = 0;
    goto LABEL_26;
  }
  return a1;
}

uint64_t sub_22E9F85C0()
{
  uint64_t v0;
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  void *v59;
  unint64_t v60;
  _OWORD *v61;
  _OWORD *v62;
  __int128 v63;
  void **v64;
  uint64_t v65;
  void *v66;
  unint64_t v67;
  _OWORD *v68;
  _OWORD *v69;
  __int128 v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unsigned int v93;
  int v94;
  uint64_t *v95;
  uint64_t v96;
  unsigned __int8 *v97;
  uint64_t v98;
  uint64_t v99;
  _BOOL8 v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  int *v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  __int16 v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  _DWORD v119[3094];
  void *v120;
  void *v121;
  uint64_t v122;
  _QWORD v123[8];
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  unsigned int v129;
  _QWORD v130[3];
  __int16 v131;
  int v132;
  char v133;
  uint64_t v134;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = v0;
  v134 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(v0 + 216);
  if (v4)
    v5 = v4 - 72;
  else
    v5 = 0;
  if (!v4
    || (*(_DWORD *)(v4 - 44) & 0x7Eu) - 54 > 3
    || (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 - 72) + 32))(v4 - 72) + 80) & 0xE000) == 0x4000
    || (*(_QWORD *)(v4 - 32) & 7) == 6
    && (*(_DWORD *)(*(_QWORD *)(v4 - 32) & 0xFFFFFFFFFFFFFFF8) - 1) < 4)
  {
    v6 = 0;
  }
  else
  {
    v6 = (*(unsigned __int8 *)(*(_QWORD *)(sub_22EFD7558(v4 - 72) & 0xFFFFFFFFFFFFFFF0) + 17) >> 2) & 1;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(v7 + 16) & 0x400) != 0 || v6)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + 16832);
    goto LABEL_13;
  }
  if (*(_DWORD *)(v7 + 16) != 26)
    v7 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFFFF0));
  v26 = *(_DWORD *)(v5 + 24);
  v114 = 0;
  v27 = sub_22F31B9B0((_QWORD *)v3, v2, v26, &v114);
  if (!v27)
  {
    v8 = 0;
    goto LABEL_13;
  }
  v28 = v27;
  v117 = v119;
  v118 = 0x800000000;
  v119[64] = v2;
  v119[65] = v2;
  v29 = *(void **)(v7 + 24);
  v30 = (unint64_t)sub_22EF579A8(*(_QWORD *)(v3 + 88), (unint64_t)v29, v2);
  LODWORD(v120) = 1;
  v121 = v29;
  v123[0] = v30 & 0xFFFFFFFFFFFFFFFCLL | 2;
  v31 = (_OWORD *)sub_22E78DF7C((uint64_t)&v117, (unint64_t)&v120, 1);
  v32 = (char *)v117 + 32 * v118;
  v33 = v31[1];
  *v32 = *v31;
  v32[1] = v33;
  LODWORD(v118) = v118 + 1;
  if (v4
    && (*(_DWORD *)(v5 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC
    && (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5) + 80) & 0xE000) != 0x4000
    && ((*(_QWORD *)(v5 + 40) & 7) != 6
     || (*(_DWORD *)(*(_QWORD *)(v5 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) >= 4))
  {
    v34 = *(_QWORD *)(sub_22EFD7558(v5) & 0xFFFFFFFFFFFFFFF0);
    if (!v34 || *(_BYTE *)(v34 + 16) != 39)
      v34 = sub_22F10CF48(v34);
    v35 = *(_QWORD *)(v34 + 32);
    v36 = *(_QWORD *)(v3 + 88);
    if ((*(_QWORD *)(v7 + 16) & 0x300000000) == 0x200000000)
      v37 = sub_22EF5FB8C(v36, v35);
    else
      v37 = sub_22EF5F8C4(v36, v35, 1);
    v59 = (void *)v37;
    v60 = (unint64_t)sub_22EF579A8(*(_QWORD *)(v3 + 88), v37, v2);
    LODWORD(v120) = 1;
    v121 = v59;
    v123[0] = v60 & 0xFFFFFFFFFFFFFFFCLL | 2;
    v61 = (_OWORD *)sub_22E78DF7C((uint64_t)&v117, (unint64_t)&v120, 1);
    v62 = (char *)v117 + 32 * v118;
    v63 = v61[1];
    *v62 = *v61;
    v62[1] = v63;
    LODWORD(v118) = v118 + 1;
  }
  if ((unsigned __int16)(*(_QWORD *)(v7 + 16) >> 38))
  {
    v64 = (void **)(v7 + 40);
    v65 = 8 * (unsigned __int16)(*(_QWORD *)(v7 + 16) >> 38);
    do
    {
      v66 = *v64++;
      v67 = (unint64_t)sub_22EF579A8(*(_QWORD *)(v3 + 88), (unint64_t)v66, v2);
      LODWORD(v120) = 1;
      v121 = v66;
      v123[0] = v67 & 0xFFFFFFFFFFFFFFFCLL | 2;
      v68 = (_OWORD *)sub_22E78DF7C((uint64_t)&v117, (unint64_t)&v120, 1);
      v69 = (char *)v117 + 32 * v118;
      v70 = v68[1];
      *v69 = *v68;
      v69[1] = v70;
      LODWORD(v118) = v118 + 1;
      v65 -= 8;
    }
    while (v65);
  }
  v71 = sub_22ED60904((_QWORD *)v3, v28 & 0xFFFFFFFFFFFFFFF9, v2, (uint64_t)&v117);
  if (v71 >= 0x10)
  {
    v72 = v71;
    v120 = &unk_24FAB6EF8;
    LODWORD(v121) = 3126;
    if ((sub_22EE8B0B0(v3, v2, v71) & 1) == 0)
    {
      v113 = 0;
      v73 = (uint64_t *)(v72 & 0xFFFFFFFFFFFFFFF0);
      v74 = sub_22F10C2A4(*(_QWORD *)(v72 & 0xFFFFFFFFFFFFFFF0));
      v75 = 0;
      if (v74)
      {
        if ((*(_DWORD *)(v74 + 28) & 0x7Fu) - 35 >= 3)
          v75 = 0;
        else
          v75 = v74;
      }
      v113 = v75;
      v76 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v3 + 80) + 544), "promise_type", 0xCuLL);
      v120 = 0;
      v121 = v123;
      v122 = 0x800000000;
      v124 = 0;
      v125 = 0;
      v126 = 0;
      v127 = (_QWORD *)v3;
      v128 = v76;
      v129 = v2;
      sub_22EFC6D6C((uint64_t)v130, v76);
      v130[2] = 0;
      v130[1] = 0;
      v131 = 0;
      v132 = 257;
      v133 = 0;
      sub_22EC56024((uint64_t)&v120);
      if (v113)
        v77 = v113 + 64;
      else
        v77 = 0;
      sub_22EC611AC(v3, &v120, v77, 0);
      if ((_DWORD)v120 != 2)
        goto LABEL_121;
      v78 = *(_QWORD *)v121 & 0xFFFFFFFFFFFFFFFCLL;
      v79 = *(_DWORD *)(v78 + 28) & 0x7F;
      if (v79 <= 0x2F && ((1 << v79) & 0xC00000060000) != 0)
      {
        v78 = sub_22EFBAEA4(*(_QWORD *)v121 & 0xFFFFFFFFFFFFFFFCLL);
        v79 = *(_DWORD *)(v78 + 28) & 0x7F;
      }
      if (v79 - 33 < 0xA)
      {
        v80 = *(_QWORD *)(v78 + 48);
        if (v80)
          v8 = v80 & 0xFFFFFFFFFFFFFFF0;
        else
          v8 = sub_22EF6462C(*(_QWORD *)(v3 + 88), v78);
        v81 = sub_22F10C2A4(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0));
        if (v81 && (*(_DWORD *)(v81 + 28) & 0x7Fu) - 35 < 3)
        {
          v87 = *(_QWORD *)(v3 + 88);
          v108 = xmmword_22F45EEF0;
          v109 = v114;
          v88 = sub_22F0AA9D0(v87, (uint64_t)&v108);
          v89 = *(_QWORD *)(v3 + 88);
          v90 = *v73;
          *(_QWORD *)&v108 = 0;
          *((_QWORD *)&v108 + 1) = v88 & 0xFFFFFFFFFFFFFFF9 | 4;
          v109 = v90;
          v91 = sub_22F0AA9D0(v89, (uint64_t)&v108);
          v92 = sub_22EF65684(*(_QWORD *)(v3 + 88), 6, v91, v8, 0);
          *(_QWORD *)&v108 = &unk_24FAB6EF8;
          DWORD2(v108) = 3124;
          if (sub_22EE8B0B0(v3, v26, v92))
            v8 = 0;
          goto LABEL_123;
        }
        sub_22E8FCA40((_QWORD *)v3, v26, 0xDF2u, 0, (uint64_t)&v108);
        v82 = *(_QWORD *)(v3 + 88);
        v115 = xmmword_22F45EEF0;
        v116 = v114;
        v83 = sub_22F0AA9D0(v82, (uint64_t)&v115);
        v84 = *(_QWORD *)(v3 + 88);
        v85 = *v73;
        *(_QWORD *)&v115 = 0;
        *((_QWORD *)&v115 + 1) = v83 & 0xFFFFFFFFFFFFFFF9 | 4;
        v116 = v85;
        v86 = sub_22F0AA9D0(v84, (uint64_t)&v115);
        *(_QWORD *)&v115 = sub_22EF65684(*(_QWORD *)(v3 + 88), 6, v86, v8, 0);
        sub_22E8901B8((uint64_t)&v108, (uint64_t *)&v115);
      }
      else
      {
LABEL_121:
        sub_22E8FCA40((_QWORD *)v3, v26, 0xDF3u, 0, (uint64_t)&v108);
        sub_22E890024((uint64_t)&v108, &v113);
      }
      sub_22E903BEC((unsigned int *)&v108);
      v8 = 0;
LABEL_123:
      if (BYTE1(v132))
      {
        if ((_DWORD)v120 == 5)
        {
          sub_22EC64D18(v127, (uint64_t)&v120);
        }
        else if (v125 && (*(_DWORD *)(v127[9] + 52) & 0x400000) != 0)
        {
          sub_22E90B5FC((unint64_t)v127, (uint64_t)&v120);
        }
      }
      if (v124)
      {
        v106 = sub_22EC6CBD0(v124);
        MEMORY[0x2348A0E9C](v106, 0x10E0C409F09D3C3);
      }
      if (v121 != v123)
        free(v121);
      goto LABEL_132;
    }
  }
  v8 = 0;
LABEL_132:
  if (v117 != v119)
    free(v117);
LABEL_13:
  if (v8 < 0x10)
    return 0;
  v10 = v5 + 72;
  if (v4)
    v11 = v5 + 72;
  else
    v11 = 0;
  v107 = v5;
  v12 = *(_DWORD *)(v5 + 24);
  v13 = *(_QWORD *)(v3 + 88);
  v14 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v3 + 80) + 544), "__promise", 9uLL);
  v15 = v2;
  v16 = sub_22EF579A8(*(_QWORD *)(v3 + 88), v8, v2);
  v17 = sub_22EFBB670(v13, v11, v12, v12, v14, v8, (uint64_t)v16, 0);
  *(_DWORD *)(v17 + 28) |= 0x200u;
  sub_22EA203D8(v3, v17);
  result = 0;
  if ((*(_BYTE *)(v17 + 28) & 0x80) == 0)
  {
    v18 = *(unsigned int *)(v3 + 1904);
    if ((_DWORD)v18)
      v19 = *(_QWORD *)(*(_QWORD *)(v3 + 1896) + 8 * v18 - 8);
    else
      v19 = 0;
    v20 = v107;
    v120 = &v122;
    v121 = (void *)0x400000000;
    v21 = (*(_DWORD *)(v107 + 28) & 0x7E) - 58;
    if (v21 >= 0xFFFFFFFC)
      v22 = v107;
    else
      v22 = 0;
    if (!v4)
      goto LABEL_70;
    if (v21 < 0xFFFFFFFC)
      goto LABEL_70;
    if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22) + 80) & 0xE000) == 0x4000)
      goto LABEL_70;
    v23 = *(_QWORD *)(v22 + 40);
    if ((v23 & 7) == 6 && (*(_DWORD *)(v23 & 0xFFFFFFFFFFFFFFF8) - 1) < 4)
      goto LABEL_70;
    v24 = *(_WORD *)(v22 + 80) & 0x7F;
    v25 = -40;
    if (v24 > 0x46)
    {
      switch(v24)
      {
        case 'S':
          goto LABEL_60;
        case 'G':
          v25 = -56;
          goto LABEL_60;
        case 'Q':
LABEL_60:
          v38 = *(_QWORD *)(v22 + 72 + v25 + 16);
          v39 = (_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF8);
          if ((v38 & 4) != 0)
          {
            v39 = (_QWORD *)*v39;
            if (v39)
              goto LABEL_62;
          }
          else if (v39)
          {
LABEL_62:
            v40 = v39[8];
            if (v40
              && ((*(unsigned __int16 *)(v40 + 8) | (*(unsigned __int8 *)(v40 + 10) << 16)) & 0x100000) != 0
              && (v23 & 7) == 6
              && *(_DWORD *)(v23 & 0xFFFFFFFFFFFFFFF8) == 42)
            {
              goto LABEL_70;
            }
          }
          v41 = sub_22EBBC0DC((_QWORD *)v3, v15);
          if ((v41 & 1) != 0
            || (v42 = sub_22EB2EA08(v3, v15, 5, (unint64_t)v41 & 0xFFFFFFFFFFFFFFFELL), (v42 & 1) != 0))
          {
LABEL_96:
            v17 = 0;
LABEL_153:
            if (v120 != &v122)
              free(v120);
            return v17;
          }
          v43 = v42 & 0xFFFFFFFFFFFFFFFELL;
          v44 = v121;
          if (v121 >= HIDWORD(v121))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v44 = v121;
          }
          *((_QWORD *)v120 + v44) = v43;
          LODWORD(v121) = (_DWORD)v121 + 1;
LABEL_70:
          v45 = *(uint64_t **)(v107 + 120);
          v46 = *(_QWORD *)(*(_QWORD *)(v107 + 48) & 0xFFFFFFFFFFFFFFF0);
          if (v46)
            v47 = *(_BYTE *)(v46 + 16) == 26;
          else
            v47 = 0;
          if (v47
            || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v46 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
            && (v46 = sub_22F10CF48(v46)) != 0)
          {
            v48 = *(_QWORD *)(v46 + 16);
            if ((v48 & 0x3FFFC000000000) != 0)
            {
              v49 = v19 + 184;
              v50 = &v45[(unsigned __int16)(v48 >> 38)];
              while (1)
              {
                if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v45 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
                  goto LABEL_78;
                v51 = *(_QWORD *)(*(_QWORD *)(sub_22F31AEB0(v49, *v45) + 8) + 8);
                v52 = *(_QWORD *)(v51 + 48);
                v53 = *(_QWORD *)(v52 & 0xFFFFFFFFFFFFFFF0);
                if (v53)
                {
                  v54 = *(_DWORD *)(v53 + 16);
                  if ((v54 & 0xFE) == 0x28)
                    goto LABEL_89;
                }
                if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v53 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
                {
                  v57 = *(_QWORD *)(v51 + 48);
                  v53 = sub_22F10CF48(v53);
                  v52 = v57;
                  if (v53)
                    break;
                }
LABEL_83:
                v55 = sub_22F32D524(v3, v51, v52, 1, *(_DWORD *)(v20 + 24), 0);
                if ((v55 & 1) != 0)
                  goto LABEL_96;
                v56 = v121;
                if (v121 >= (unint64_t)HIDWORD(v121))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v56 = v121;
                }
                *((_QWORD *)v120 + v56) = v55 & 0xFFFFFFFFFFFFFFFELL;
                LODWORD(v121) = (_DWORD)v121 + 1;
LABEL_78:
                if (++v45 == v50)
                  goto LABEL_143;
              }
              v54 = *(_DWORD *)(v53 + 16);
LABEL_89:
              if ((v54 & 0x100000) != 0)
              {
                do
                {
                  v53 = *(_QWORD *)(*(_QWORD *)(v53 + 32) & 0xFFFFFFFFFFFFFFF0);
                  if (!v53 || (v58 = *(_DWORD *)(v53 + 16), (v58 & 0xFE) != 0x28))
                  {
                    v53 = sub_22F10CF48(v53);
                    v58 = *(_DWORD *)(v53 + 16);
                  }
                  v20 = v107;
                }
                while ((v58 & 0x100000) != 0);
              }
              v52 = *(_QWORD *)(v53 + 32);
              goto LABEL_83;
            }
          }
LABEL_143:
          v93 = v121;
          if ((_DWORD)v121)
          {
            v94 = *(_DWORD *)(v20 + 24);
            v95 = (uint64_t *)v120;
            v96 = sub_22E3CD3D4(*(_QWORD *)(v3 + 88) + 2032, 8 * v121 + 24, 3);
            v97 = (unsigned __int8 *)sub_22F002D50(v96, v94, v95, v93, v94);
            LODWORD(v108) = 0;
            v98 = *(_QWORD *)(v17 + 48);
            *((_QWORD *)&v108 + 1) = 0;
            v109 = v98;
            v110 = 0;
            v111 = v17;
            v112 = 0;
            v99 = *(unsigned int *)(v17 + 24);
            v100 = *v97 == 180;
            sub_22F0D5A50((uint64_t)v97);
            v102 = v101;
            sub_22F0D60E4(v96);
            *(_QWORD *)&v115 = v100 | (v99 << 32);
            *((_QWORD *)&v115 + 1) = v102 | (unint64_t)(v103 << 32);
            sub_22EC395BC(&v117, v3, &v108, &v115, v120, v121, 0, 0);
            if ((_DWORD)v117)
            {
              v104 = sub_22EC3DF80((int)&v117, v3);
              if ((v104 & 1) != 0)
              {
                sub_22EFC77E8(v17, 1);
              }
              else if ((v104 & 0xFFFFFFFFFFFFFFFELL) != 0)
              {
                v105 = sub_22EBCCCF0(v3, (int *)(v104 & 0xFFFFFFFFFFFFFFFELL));
                sub_22EFBC9E4(v17, (uint64_t)v105);
                *(_BYTE *)(v17 + 96) = *(_BYTE *)(v17 + 96) & 0x9F | 0x20;
                sub_22EA2A59C((_QWORD *)v3, v17);
              }
            }
            else
            {
              sub_22EA117E4();
            }
            sub_22EC3CE2C((uint64_t)&v117);
          }
          else
          {
            sub_22EA117E4();
          }
          sub_22EFCCFA0(v10, v17);
          goto LABEL_153;
      }
    }
    else
    {
      if (v24 <= 0x18)
      {
        if (v24 == 16)
        {
LABEL_34:
          v25 = -48;
          goto LABEL_60;
        }
        if (((1 << v24) & 0x1066) != 0)
          goto LABEL_60;
        if (v24 == 24)
          goto LABEL_34;
      }
      if (v24 == 70)
      {
LABEL_58:
        v25 = -64;
        goto LABEL_60;
      }
    }
    if (v24 - 52 >= 6)
    {
      if (v24 - 33 >= 5)
        goto LABEL_34;
      goto LABEL_58;
    }
    v25 = -72;
    goto LABEL_60;
  }
  return result;
}

uint64_t sub_22E9F92B0(uint64_t a1, char a2, unsigned __int8 *a3)
{
  _BOOL8 v6;

  if (!a3)
    return (a1 << 32) | 3;
  if ((a2 & 1) != 0)
  {
    v6 = *a3 == 180;
    sub_22F0D5A50((uint64_t)a3);
    sub_22F0D60E4((uint64_t)a3);
    return v6 | (a1 << 32);
  }
  else
  {
    sub_22F0D5A50((uint64_t)a3);
    return (a1 << 32) | 2;
  }
}

BOOL sub_22E9F9340(_QWORD *a1, unsigned int *a2)
{
  unint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v17[24];
  unint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  int v21;
  _BYTE v22[32];
  uint64_t *v23;
  uint64_t v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x24BDAC8D0];
  v18 = (unint64_t *)v22;
  v19 = (unint64_t *)v22;
  v20 = 4;
  v21 = 0;
  sub_22E9F94CC(a1, a2, (uint64_t)&v18);
  v3 = v19;
  if (v19 == v18)
    v4 = (uint64_t *)((char *)&v20 + 4);
  else
    v4 = &v20;
  v5 = *(unsigned int *)v4;
  v6 = &v19[v5];
  if ((_DWORD)v5)
  {
    v7 = 8 * v5;
    while (*v3 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v3;
      v7 -= 8;
      if (!v7)
      {
        v3 = v6;
        break;
      }
    }
  }
  v23 = v25;
  v24 = 0x400000000;
  sub_22F31BF68((uint64_t)&v23, v3, v6, v6);
  v8 = 126 - 2 * __clz(v24);
  if ((_DWORD)v24)
    v9 = v8;
  else
    v9 = 0;
  sub_22E9FCCA4((uint64_t)v23, (uint64_t **)&v23[v24], v9, 1);
  v10 = v23;
  if ((_DWORD)v24)
  {
    v11 = 8 * v24;
    do
    {
      v12 = *v10++;
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
      sub_22E8FCA40(a1, SHIDWORD(v13), 0x1580u, 0, (uint64_t)v17);
      sub_22E903BEC(v17);
      v11 -= 8;
    }
    while (v11);
    v10 = v23;
  }
  v14 = HIDWORD(v20);
  v15 = v21;
  if (v10 != v25)
    free(v10);
  if (v19 != v18)
    free(v19);
  return v14 == v15;
}

void sub_22E9F94CC(_QWORD *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  _QWORD *v16;
  unint64_t v17;
  _DWORD *v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _DWORD *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;

  if ((*(_BYTE *)a2 & 0xFE) == 0x76)
  {
    v6 = *((_QWORD *)a2 + 2);
    if (sub_22EB16E5C((uint64_t)a1, (uint64_t)a2, v6, 0)
      && (!v6 || (*(_DWORD *)(v6 + 28) & 0x7Eu) - 58 < 0xFFFFFFFA || sub_22EFC01DC(v6, 0) != 1243))
    {
      if (*(_DWORD *)(a3 + 20) == *(_DWORD *)(a3 + 24))
      {
        v7 = a1[27];
        if (v7)
          v8 = v7 - 72;
        else
          v8 = 0;
        sub_22E8FCA40(a1, *(_DWORD *)(v8 + 24), 0xC30u, 0, (uint64_t)&v34);
        sub_22E903BEC((unsigned int *)&v34);
      }
      sub_22E3BA850(a3, (const void *)v6);
    }
    v9 = *(_WORD *)(v6 + 80) & 0x7F;
    v10 = -40;
    if (v9 > 0x46)
    {
      if (v9 != 83)
      {
        if (v9 == 71)
        {
          v10 = -56;
          goto LABEL_62;
        }
        if (v9 == 81)
          goto LABEL_62;
LABEL_57:
        v24 = v9 - 52;
        v19 = v9 - 33 >= 5;
        v25 = -48;
        if (!v19)
          v25 = -64;
        if (v24 >= 6)
          v10 = v25;
        else
          v10 = -72;
      }
    }
    else
    {
      if (v9 > 0x18)
        goto LABEL_56;
      if (v9 != 16)
      {
        if (((1 << v9) & 0x1066) != 0)
          goto LABEL_62;
        if (v9 != 24)
        {
LABEL_56:
          if (v9 == 70)
          {
            v10 = -64;
            goto LABEL_62;
          }
          goto LABEL_57;
        }
      }
      v10 = -48;
    }
LABEL_62:
    v26 = *(_QWORD *)(v6 + 72 + v10 + 16);
    v27 = (_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF8);
    if ((v26 & 4) != 0)
      v27 = (_QWORD *)*v27;
    if (v27)
      v23 = (unint64_t)(v27 - 8);
    else
      v23 = 0;
    goto LABEL_67;
  }
  if ((*(_BYTE *)a2 + 113) >= 0xFBu)
  {
    v17 = *a2;
    if ((v17 & 0x8000) == 0)
    {
      v18 = (_DWORD *)sub_22EFFA604(*(unsigned __int8 **)((char *)a2 + (v17 >> 24)));
      if (sub_22EB16E5C((uint64_t)a1, (uint64_t)a2, (uint64_t)v18, 0))
      {
        v19 = v18 && (v18[7] & 0x7Eu) - 58 >= 0xFFFFFFFA;
        if (!v19 || sub_22EFC01DC((uint64_t)v18, 0) != 1243)
        {
          if (*(_DWORD *)(a3 + 20) == *(_DWORD *)(a3 + 24))
          {
            v20 = a1[27];
            if (v20)
              v21 = v20 - 72;
            else
              v21 = 0;
            sub_22E8FCA40(a1, *(_DWORD *)(v21 + 24), 0xC30u, 0, (uint64_t)&v34);
            sub_22E903BEC((unsigned int *)&v34);
          }
          sub_22E3BA850(a3, v18);
        }
      }
      v22 = sub_22EFFA9C0((uint64_t)a2, a1[11]);
      if (sub_22F115260(v22) == 1)
      {
        v23 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                      + 24));
LABEL_67:
        v28 = (_DWORD *)sub_22EFD10F8(v23);
        if (sub_22EB16E5C((uint64_t)a1, 0, (uint64_t)v28, 0))
        {
          v29 = v28 && (v28[7] & 0x7Eu) - 58 >= 0xFFFFFFFA;
          if (!v29 || sub_22EFC01DC((uint64_t)v28, 0) != 1243)
          {
            if (*(_DWORD *)(a3 + 20) == *(_DWORD *)(a3 + 24))
            {
              v30 = a1[27];
              if (v30)
                v31 = v30 - 72;
              else
                v31 = 0;
              sub_22E8FCA40(a1, *(_DWORD *)(v31 + 24), 0xC30u, 0, (uint64_t)&v34);
              sub_22E903BEC((unsigned int *)&v34);
            }
            sub_22E3BA850(a3, v28);
          }
        }
      }
    }
  }
  else
  {
    sub_22F0D492C((uint64_t)a2);
    v32 = v34;
    v11 = v36;
    v33 = v35;
    v12 = v37;
    v14 = *((_QWORD *)&v34 + 1);
    v13 = (uint64_t *)v34;
    if ((_QWORD)v34 != v36 || *((_QWORD *)&v34 + 1) != v37)
    {
      do
      {
        v16 = v13;
        if ((v14 & 3) != 0)
        {
          if ((v14 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            v16 = (_QWORD *)((v14 & 0xFFFFFFFFFFFFFFFCLL) + 40);
          else
            v16 = (_QWORD *)sub_22F3AC1A8(*v13);
        }
        if (*v16)
          sub_22E9F94CC(a1, *v16, a3);
        if ((v14 & 3) != 0)
        {
          if (v14 >= 4)
            sub_22F0D8720((uint64_t)&v32);
          else
            sub_22F3F2FE0((uint64_t)&v32, 1);
        }
        else
        {
          *(_QWORD *)&v32 = v13 + 1;
        }
        v14 = *((_QWORD *)&v32 + 1);
        v13 = (uint64_t *)v32;
      }
      while (v32 != __PAIR128__(v12, v11));
    }
  }
}

BOOL sub_22E9F98A0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD v17[6];
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  unsigned int v22;

  v22 = a3;
  v21[0] = a4;
  v21[1] = a5;
  v20 = a2;
  v6 = sub_22E9F99C4(a1, a3, a4, a5, 0);
  if (v6)
  {
    v7 = *(unsigned int *)(a1 + 1904);
    v8 = (_DWORD)v7 ? *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v7 - 8) : 0;
    v19 = v8;
    v9 = *(_DWORD *)(v8 + 8);
    if ((v9 & 0x20000) != 0)
    {
      *(_DWORD *)(v8 + 8) = v9 & 0xFFFDFFFF;
      v10 = *(_QWORD *)(a1 + 216);
      if (v10)
        v11 = v10 - 72;
      else
        v11 = 0;
      v18 = *(_DWORD *)(v11 + 24);
      v17[0] = a1;
      v17[1] = &v19;
      v17[2] = &v18;
      v17[3] = &v20;
      v17[4] = &v22;
      v17[5] = v21;
      v12 = sub_22E9F9C8C((uint64_t)v17, "initial_suspend", 0xFuLL);
      if ((v12 & 1) == 0)
      {
        v13 = sub_22E9F9C8C((uint64_t)v17, "final_suspend", 0xDuLL);
        if ((v13 & 1) == 0)
        {
          v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
          if (sub_22E9F9340((_QWORD *)a1, (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFFELL)))
          {
            v15 = v19;
            *(_DWORD *)(v19 + 8) &= ~0x20000u;
            *(_QWORD *)(v15 + 336) = v12 & 0xFFFFFFFFFFFFFFFELL;
            *(_QWORD *)(v15 + 344) = v14;
          }
        }
      }
    }
  }
  return v6 != 0;
}

uint64_t sub_22E9F99C4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  __int16 v9;
  BOOL v10;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  _QWORD v30[12];
  _QWORD v31[2];
  unsigned int v32;
  char v33;

  v32 = a2;
  v31[0] = a3;
  v31[1] = a4;
  v8 = *(_QWORD *)(a1 + 216);
  v9 = *(_WORD *)(v8 + 8);
  if (v8)
    v10 = (v9 & 0x7Eu) - 58 > 0xFFFFFFF9;
  else
    v10 = 0;
  if (!v10)
  {
    if ((v9 & 0x7F) == 0x18)
      v25 = 3118;
    else
      v25 = 3119;
    sub_22E8FCA40((_QWORD *)a1, a2, v25, 0, (uint64_t)v30);
    sub_22F2F2210((uint64_t)v30, (uint64_t)v31);
    sub_22E903BEC((unsigned int *)v30);
    return 0;
  }
  v29 = 0;
  v30[0] = a1;
  v30[1] = &v32;
  v30[2] = v31;
  v30[3] = &v29;
  v14 = *(_DWORD *)(v8 - 44);
  if ((v14 & 0x7Eu) - 58 >= 0xFFFFFFFC)
  {
    v15 = v14 & 0x7F;
    if (v15 == 55)
    {
      v16 = 0;
      goto LABEL_32;
    }
    if (v15 == 57)
    {
      v16 = 1;
LABEL_32:
      sub_22E9FC9D4((uint64_t)v30, v16);
      return 0;
    }
  }
  if (sub_22EFBFAF0(v8 - 72))
  {
    v16 = 2;
    goto LABEL_32;
  }
  if ((*(_QWORD *)(v8 + 8) & 0xC0000000) != 0)
  {
    if ((*(_QWORD *)(v8 + 8) & 0xC0000000) == 0x80000000)
      v17 = 6;
    else
      v17 = 3;
    sub_22E9FC9D4((uint64_t)v30, v17);
  }
  v18 = *(_QWORD *)(*(_QWORD *)(v8 - 24) & 0xFFFFFFFFFFFFFFF0);
  if (v18)
    v19 = *(unsigned __int8 *)(v18 + 16) - 27 > 0xFFFFFFFD;
  else
    v19 = 0;
  if (!v19)
    v18 = sub_22F10CF48(v18);
  v20 = *(_QWORD *)(*(_QWORD *)(v18 + 24) & 0xFFFFFFFFFFFFFFF0);
  v33 = 0;
  v21 = sub_22F110500((uint64_t)&v33, v20);
  if (v21 && *(_QWORD *)(v21 + 24) <= 0xFuLL && (*(_BYTE *)(v21 + 17) & 4) == 0)
    sub_22E9FC9D4((uint64_t)v30, 4u);
  if (sub_22EFBF68C(v8 - 72))
    sub_22E9FC9D4((uint64_t)v30, 5u);
  if (v29)
    return 0;
  v22 = *(unsigned int *)(a1 + 1904);
  if ((_DWORD)v22)
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v22 - 8);
  else
    v23 = 0;
  if (!*(_DWORD *)(v23 + 12) && (a5 & 1) == 0)
  {
    *(_DWORD *)(v23 + 12) = a2;
    if (a4 == 8)
    {
      if (*(_QWORD *)a3 == 0x74696177615F6F63)
        v27 = 67371008;
      else
        v27 = (*(_QWORD *)a3 == 0x646C6569795F6F63) << 19;
    }
    else if (a4 == 9 && (*(_QWORD *)a3 == 0x72757465725F6F63 ? (v26 = *(_BYTE *)(a3 + 8) == 110) : (v26 = 0), v26))
    {
      v27 = 0x4000000;
    }
    else
    {
      v27 = 0;
    }
    *(_DWORD *)(v23 + 8) = *(_DWORD *)(v23 + 8) & 0xFFF3FFFF | (((v27 >> 18) & 3) << 18);
  }
  if (!*(_QWORD *)(v23 + 176))
  {
    if (!sub_22E9FC668(a1, a2))
      return 0;
    v28 = sub_22E9F85C0();
    *(_QWORD *)(v23 + 176) = v28;
    if (!v28)
      return 0;
  }
  return v23;
}

unint64_t sub_22E9F9C8C(uint64_t a1, _QWORD *a2, size_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  int *v8;
  unsigned int v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _BOOL4 v19;
  _BOOL4 v20;
  unsigned int v21[24];

  v6 = *(_QWORD **)a1;
  v7 = sub_22E9FA490(*(_QWORD **)a1, *(_QWORD *)(**(_QWORD **)(a1 + 8) + 176), **(_DWORD **)(a1 + 16), a2, a3, 0, 0);
  if ((v7 & 1) == 0)
  {
    v8 = *(int **)(a1 + 16);
    v9 = *v8;
    v10 = sub_22E9FA000(v6, **(_QWORD **)(a1 + 24), *v8);
    if ((v10 & 1) == 0)
    {
      v11 = sub_22E9FA5D0((uint64_t)v6, v9, v7 & 0xFFFFFFFFFFFFFFFELL, (unsigned __int8 *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFFELL));
      if ((v11 & 1) == 0)
      {
        v12 = sub_22E9FA6A4((uint64_t)v6, **(_DWORD **)(a1 + 16), v11 & 0xFFFFFFFFFFFFFFFELL, 1);
        v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
        if ((v12 & 0xFFFFFFFFFFFFFFFELL) != 0)
        {
          sub_22EFF605C(v12 & 0xFFFFFFFFFFFFFFFELL);
          v15 = v14;
        }
        else
        {
          v15 = 0;
        }
        v16 = sub_22EBCF22C((uint64_t)v6, v13, v15, 0, 0);
        if ((v16 & 1) == 0)
          return v16 & 0xFFFFFFFFFFFFFFFELL;
        sub_22E8FCA40(v6, **(_DWORD **)(a1 + 16), 0x1583u, 0, (uint64_t)v21);
        v19 = a3 != 15 || *a2 != 0x5F6C616974696E69 || *(_QWORD *)((char *)a2 + 7) != 0x646E65707375735FLL;
        v20 = v19;
        sub_22E8900C4((uint64_t)v21, (int *)&v20);
        sub_22E903BEC(v21);
        sub_22E8FCA40(v6, **(_DWORD **)(a1 + 32), 0x158Fu, 0, (uint64_t)v21);
        sub_22F2F2210((uint64_t)v21, *(_QWORD *)(a1 + 40));
        sub_22E903BEC(v21);
      }
    }
  }
  return 1;
}

uint64_t sub_22E9F9E30(unsigned int *a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v11;
  unsigned int *v12;
  char v14;

  if (!sub_22E9F98A0((uint64_t)a1, a2, a3, (uint64_t)"co_await", 8))
  {
    sub_22EBBCB14(a1, a4, 0, 0, sub_22F2E6FA4, &v14);
    return 1;
  }
  sub_22E9F9F38(a1, a3, (uint64_t)"co_await", 8);
  v8 = *(_QWORD *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(v8 + 16) & 0xFE00000u) >= 0x8180001 && v8 != 0 && *(_DWORD *)(v8 + 16) == 11)
  {
    v11 = sub_22EB19A28(a1);
    if ((v11 & 1) != 0)
      return 1;
    a4 = v11 & 0xFFFFFFFFFFFFFFFELL;
  }
  v12 = sub_22E9FA000(a1, a2, a3);
  if ((v12 & 1) == 0)
    return sub_22E9FA204(a1, a3, a4, (unsigned __int8 *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFFELL));
  return 1;
}

unsigned int *sub_22E9F9F38(unsigned int *result, int a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v8;
  int v9;
  unsigned int v10[24];
  _QWORD v11[2];

  v5 = result;
  v11[0] = a3;
  v11[1] = a4;
  v6 = *(_DWORD *)(*((_QWORD *)result + 461) + 576 * result[924] - 576);
  if (v6 <= 3 && v6 != 2)
  {
    sub_22E8FCA40(result, a2, 0xC37u, 0, (uint64_t)v10);
    sub_22F2F2210((uint64_t)v10, (uint64_t)v11);
    result = sub_22E903BEC(v10);
  }
  v8 = v5 + 3222;
  while (1)
  {
    v8 = (_QWORD *)*v8;
    if (!v8)
      break;
    v9 = *((_DWORD *)v8 + 2);
    if ((v9 & 1) != 0)
      break;
    if ((v9 & 0x1000000) != 0)
    {
      sub_22E8FCA40(v5, a2, 0xC38u, 0, (uint64_t)v10);
      sub_22F2F2210((uint64_t)v10, (uint64_t)v11);
      return sub_22E903BEC(v10);
    }
  }
  return result;
}

unsigned int *sub_22E9FA000(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _BYTE v20[64];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  _BYTE v27[24];
  int v28;
  __int16 v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v6 = (a1[11] + 16000) | 6;
  v17 = 0;
  v18 = v20;
  v19 = 0x800000000;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = a1;
  v25 = v6;
  v26 = 0;
  sub_22EFC6D6C((uint64_t)v27, v6);
  *(_OWORD *)&v27[8] = xmmword_22F4559B0;
  v28 = 16842752;
  v29 = 0;
  v30 = 0;
  sub_22EC56024((uint64_t)&v17);
  sub_22EC63520(a1, &v17, a2, 0, 0);
  v7 = v19;
  if (v19 < 2)
  {
    v9 = v18;
    v8 = (_DWORD)v19 == 1 && (*(_DWORD *)((*(_QWORD *)v18 & 0xFFFFFFFFFFFFFFFCLL) + 28) & 0x7F) == 29;
  }
  else
  {
    v8 = 1;
    v9 = v18;
  }
  v10 = a1[11];
  v14 = v6;
  v15 = a3;
  sub_22EFC6D6C((uint64_t)&v16, v6);
  v11 = sub_22F0605AC(v10, 0, 0, 0, (uint64_t)&v14, 1, v8, v9, (uint64_t)v9 + 8 * v7);
  if (HIBYTE(v28))
  {
    if ((_DWORD)v17 == 5)
    {
      sub_22EC64D18(v24, (uint64_t)&v17);
    }
    else if (v22 && (*(_DWORD *)(v24[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v24, (uint64_t)&v17);
    }
  }
  if (v21)
  {
    v13 = sub_22EC6CBD0(v21);
    MEMORY[0x2348A0E9C](v13, 0x10E0C409F09D3C3);
  }
  if (v18 != v20)
    free(v18);
  return v11;
}

uint64_t sub_22E9FA204(_QWORD *a1, unsigned int a2, unint64_t a3, unsigned __int8 *a4)
{
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char v32;
  uint64_t v33;

  v5 = a3;
  v33 = *MEMORY[0x24BDAC8D0];
  v25 = a3;
  v8 = sub_22E9F99C4((uint64_t)a1, a2, (uint64_t)"co_await", 8, 0);
  if (!v8)
    return 1;
  v9 = v8;
  v10 = *(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(v10 + 16) & 0xFE00000u) >= 0x8180001 && v10 != 0 && *(_DWORD *)(v10 + 16) == 11)
  {
    v13 = sub_22EB19A28(a1);
    if ((v13 & 1) != 0)
      return 1;
    v5 = v13 & 0xFFFFFFFFFFFFFFFELL;
    v25 = v13 & 0xFFFFFFFFFFFFFFFELL;
  }
  v14 = *(_QWORD *)(v9 + 176);
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v15 + 17) & 4) == 0)
  {
    v16 = sub_22F10C2A4(v15);
    if (v16)
    {
      if ((*(_DWORD *)(v16 + 28) & 0x7Fu) - 35 >= 3)
        v17 = 0;
      else
        v17 = v16;
    }
    else
    {
      v17 = 0;
    }
    LOBYTE(v24) = 0;
    sub_22E9FC4CC((uint64_t)&v26, (uint64_t)a1, "await_transform", v17, a2, &v24);
    if (v32)
    {
      if (v26 == 5)
      {
        sub_22EC64D18(v31, (uint64_t)&v26);
      }
      else if (v30 && (*(_DWORD *)(v31[9] + 52) & 0x400000) != 0)
      {
        sub_22E90B5FC((unint64_t)v31, (uint64_t)&v26);
      }
    }
    if (v29)
    {
      v23 = sub_22EC6CBD0(v29);
      MEMORY[0x2348A0E9C](v23, 0x10E0C409F09D3C3);
    }
    if (v27 != &v28)
      free(v27);
    if (!(_BYTE)v24)
    {
LABEL_30:
      v19 = sub_22E9FA5D0((uint64_t)a1, a2, v5, a4);
      if ((v19 & 1) == 0)
        return sub_22E9FA6A4((uint64_t)a1, a2, v19 & 0xFFFFFFFFFFFFFFFELL, 0);
      return 1;
    }
    v18 = sub_22E9FA490(a1, v14, a2, "await_transform", 0xFuLL, (uint64_t)&v25, 1);
    if ((v18 & 1) == 0)
    {
      v5 = v18 & 0xFFFFFFFFFFFFFFFELL;
      v25 = v18 & 0xFFFFFFFFFFFFFFFELL;
      goto LABEL_30;
    }
    sub_22E8FCA40(a1, a2, 0x1582u, 0, (uint64_t)&v26);
    sub_22F0D4E74(v25);
    v24 = v21;
    sub_22E8906A0((uint64_t)&v26, &v24);
    sub_22E903BEC(&v26);
    return 1;
  }
  v22 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  return sub_22F31BD7C(v22, a2, *(_QWORD *)(a1[11] + 16832), v5, (uint64_t)a4);
}

uint64_t sub_22E9FA490(_QWORD *a1, uint64_t a2, int a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0);
  if (!v13 || (v14 = *(_DWORD *)(v13 + 16), (v14 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_4;
    v22 = a2;
    v23 = *(_QWORD *)(a2 + 48);
    v18 = a3;
    v13 = sub_22F10CF48(v13);
    a2 = v22;
    v12 = v23;
    a3 = v18;
    if (!v13)
      goto LABEL_4;
    v14 = *(_DWORD *)(v13 + 16);
  }
  if ((v14 & 0x100000) != 0)
  {
    v21 = a3;
    do
    {
      v19 = a2;
      v13 = *(_QWORD *)(*(_QWORD *)(v13 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (!v13 || (v20 = *(_DWORD *)(v13 + 16), (v20 & 0xFE) != 0x28))
      {
        v13 = sub_22F10CF48(v13);
        v20 = *(_DWORD *)(v13 + 16);
      }
      a2 = v19;
      a3 = v21;
    }
    while ((v20 & 0x100000) != 0);
  }
  v12 = *(_QWORD *)(v13 + 32);
LABEL_4:
  v15 = a3;
  v16 = sub_22F32D524((uint64_t)a1, a2, v12, 1, a3, 0);
  if ((v16 & 1) != 0)
    return 1;
  else
    return sub_22E9FCAFC(a1, v16 & 0xFFFFFFFFFFFFFFFELL, v15, a4, a5, a6, a7);
}

uint64_t sub_22E9FA5D0(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int8 *a4)
{
  int v7;
  BOOL v8;
  unsigned __int8 *v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  void *v14[2];
  _QWORD v15[17];

  v15[16] = *MEMORY[0x24BDAC8D0];
  v14[0] = v15;
  v14[1] = (void *)0x1000000000;
  v7 = *a4;
  v8 = v7 == 211;
  if (v7 == 211)
    v9 = a4;
  else
    v9 = 0;
  v10 = v9 + 64;
  if (v8)
    v11 = v10;
  else
    v11 = a4 + 80;
  sub_22E3D0148((uint64_t)v14, v11, &v11[8 * *((unsigned int *)a4 + 1)]);
  v12 = sub_22ED1677C(a1, a2, 13, v14, a3, 1);
  if (v14[0] != v15)
    free(v14[0]);
  return v12;
}

uint64_t sub_22E9FA6A4(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v15;
  unsigned int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v8 = sub_22E9F99C4(a1, a2, (uint64_t)"co_await", 8, a4);
  if (!v8)
    return 1;
  v9 = v8;
  v10 = *(_QWORD *)(a3 + 8);
  v11 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_DWORD *)(v11 + 16);
  if ((v12 & 0xFE00000u) >= 0x8180001 && v11 != 0 && *(_DWORD *)(v11 + 16) == 11)
  {
    v15 = sub_22EB19A28(a1);
    if ((v15 & 1) == 0)
    {
      a3 = v15 & 0xFFFFFFFFFFFFFFFELL;
      v10 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v12 = *(_DWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 16);
      goto LABEL_12;
    }
    return 1;
  }
LABEL_12:
  if ((v12 & 0x400) != 0)
  {
    v18 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 64, 3);
    result = sub_22F31BE14(v18, 159, a2, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16832), a3);
  }
  else
  {
    if ((*(_BYTE *)(a3 + 1) & 3) == 0)
      a3 = sub_22F335E0C(a1, v10, a3, 1);
    sub_22EFF605C(a3);
    v23 = 0;
    v21 = 0u;
    v22 = 0u;
    sub_22E9FA834(a1, *(_QWORD *)(v9 + 176), v16, a3, (uint64_t)&v21);
    if ((_BYTE)v23)
      return 1;
    v19 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 64, 3);
    result = sub_22F31BEA4(v19, 159, a2, a3, v21, *((uint64_t *)&v21 + 1), (int *)v22, *((uint64_t *)&v22 + 1));
  }
  if (a4)
    v20 = 0x40000;
  else
    v20 = 0;
  *(_DWORD *)result = *(_DWORD *)result & 0xFFFBFFFF | v20;
  return result;
}

void sub_22E9FA834(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59[24];
  void *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63[12];
  void *v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[64];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned int v73;
  _QWORD v74[3];
  __int16 v75;
  int v76;
  char v77;
  unsigned int v78;
  unsigned int v79;
  __int128 v80;
  void *v81[9];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unsigned int v87;
  _QWORD v88[3];
  __int16 v89;
  int v90;
  char v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  v10 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 24, 3);
  v11 = a3;
  v12 = sub_22E5BBE34(v10, a3, *(_QWORD *)(a4 + 8), 1, (*(_DWORD *)a4 >> 10) & 7, a4);
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 24) = v12;
  *(_QWORD *)(a5 + 32) = 0;
  v13 = sub_22E9FCAFC((_QWORD *)a1, v10, a3, "await_ready", 0xBuLL, 0, 0);
  if ((v13 & 1) != 0)
  {
    *(_BYTE *)(a5 + 32) = 1;
    return;
  }
  v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
  *(_QWORD *)a5 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if ((v13 & 0xFFFFFFFFFFFFFFFELL) == 0)
    return;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
  {
    v15 = sub_22ED025A8(a1);
    if ((v15 & 1) != 0)
    {
      v16 = sub_22EFFA604(*(unsigned __int8 **)(v14 + *(unsigned __int8 *)(v14 + 3)));
      if (v16)
      {
        if ((*(_DWORD *)(v16 + 28) & 0x7Eu) - 52 >= 6)
          v17 = 0;
        else
          v17 = v16;
      }
      else
      {
        v17 = 0;
      }
      v18 = *(_QWORD *)(v17 + 56);
      if ((v18 & 4) != 0 && (v56 = v18 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v56 + 16)))
        v19 = **(int ***)(v56 + 24);
      else
        v19 = (int *)(v17 + 64);
      sub_22E8FCA40((_QWORD *)a1, *v19, 0x1555u, 0, (uint64_t)v59);
      sub_22E903BEC(v59);
      sub_22E8FCA40((_QWORD *)a1, a3, 0x1581u, 0, (uint64_t)&v64);
      v20 = sub_22EFFA604(*(unsigned __int8 **)(v14 + *(unsigned __int8 *)(v14 + 3)));
      if (v20)
      {
        if ((*(_DWORD *)(v20 + 28) & 0x7Eu) - 52 >= 6)
          v21 = 0;
        else
          v21 = v20;
      }
      else
      {
        v21 = 0;
      }
      *(_QWORD *)&v80 = v21;
      v22 = sub_22E890024((uint64_t)&v64, (uint64_t *)&v80);
      sub_22F0D4E74(a4);
      v63[0] = v23;
      sub_22E8906A0(v22, v63);
      sub_22E903BEC((unsigned int *)&v64);
      *(_BYTE *)(a5 + 32) = 1;
    }
    else
    {
      *(_QWORD *)a5 = sub_22EBCCCF0(a1, (int *)(v15 & 0xFFFFFFFFFFFFFFFELL));
    }
  }
  v24 = *(_QWORD *)(a2 + 48);
  if (v24 <= 0xF)
    goto LABEL_87;
  v25 = *(_QWORD *)(a1 + 3408);
  v26 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 80) + 544), "coroutine_handle", 0x10uLL);
  *(_QWORD *)&v80 = 0;
  *((_QWORD *)&v80 + 1) = &v81[1];
  v81[0] = (void *)0x800000000;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v85 = (_QWORD *)a1;
  v86 = v26;
  v87 = a3;
  sub_22EFC6D6C((uint64_t)v88, v26);
  v88[2] = 0;
  v88[1] = 0;
  v89 = 0;
  v90 = 257;
  v91 = 0;
  sub_22EC56024((uint64_t)&v80);
  if (v25)
    v27 = v25 + 48;
  else
    v27 = 0;
  if ((sub_22EC611AC(a1, &v80, v27, 0) & 1) == 0)
  {
    sub_22E8FCA40((_QWORD *)a1, a3, 0xDF1u, 0, (uint64_t)&v64);
    sub_22F2F30F4((uint64_t)&v64, (uint64_t)"std::coroutine_handle");
    v37 = (unsigned int *)&v64;
    goto LABEL_33;
  }
  v28 = **((_QWORD **)&v80 + 1) & 0xFFFFFFFFFFFFFFFCLL;
  if ((_DWORD)v80 != 2)
    goto LABEL_32;
  v29 = *(_DWORD *)(v28 + 28);
  if ((v29 & 0x7Fu) > 0x2F)
  {
    v30 = **((_QWORD **)&v80 + 1) & 0xFFFFFFFFFFFFFFFCLL;
  }
  else
  {
    v30 = **((_QWORD **)&v80 + 1) & 0xFFFFFFFFFFFFFFFCLL;
    if (((1 << (v29 & 0x7F)) & 0xC00000060000) != 0)
    {
      v30 = sub_22EFBAEA4(**((_QWORD **)&v80 + 1) & 0xFFFFFFFFFFFFFFFCLL);
      v29 = *(_DWORD *)(v30 + 28);
    }
  }
  if ((v29 & 0x7F) != 0x1C)
  {
LABEL_32:
    BYTE1(v90) = 0;
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v28 + 24), 0xEA8u, 0, (uint64_t)v63);
    v37 = (unsigned int *)v63;
LABEL_33:
    sub_22E903BEC(v37);
    v36 = 0;
    goto LABEL_34;
  }
  v64 = &v66;
  v65 = (void *)0x800000000;
  v78 = a3;
  v79 = a3;
  v31 = (unint64_t)sub_22EF579A8(*(_QWORD *)(a1 + 88), v24, a3);
  LODWORD(v60) = 1;
  v61 = v24;
  v62 = v31 & 0xFFFFFFFFFFFFFFFCLL | 2;
  v32 = (_OWORD *)sub_22E78DF7C((uint64_t)&v64, (unint64_t)&v60, 1);
  v33 = (char *)v64 + 32 * v65;
  v34 = v32[1];
  *v33 = *v32;
  v33[1] = v34;
  LODWORD(v65) = (_DWORD)v65 + 1;
  v35 = sub_22ED60904((_QWORD *)a1, v30 & 0xFFFFFFFFFFFFFFF9, a3, (uint64_t)&v64);
  if (v35 >= 0x10)
  {
    v36 = v35;
    v60 = &unk_24FAB6EF8;
    LODWORD(v61) = 3126;
    if (sub_22EE8B0B0(a1, a3, v35))
      v36 = 0;
  }
  else
  {
    v36 = 0;
  }
  if (v64 != &v66)
    free(v64);
LABEL_34:
  if (BYTE1(v90))
  {
    if ((_DWORD)v80 == 5)
    {
      sub_22EC64D18(v85, (uint64_t)&v80);
    }
    else if (v83 && (*(_DWORD *)(v85[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v85, (uint64_t)&v80);
    }
  }
  if (v82)
  {
    v57 = sub_22EC6CBD0(v82);
    MEMORY[0x2348A0E9C](v57, 0x10E0C409F09D3C3);
  }
  if (*((void ***)&v80 + 1) != &v81[1])
    free(*((void **)&v80 + 1));
  if (v36 < 0x10)
    goto LABEL_87;
  v38 = sub_22E9580E4(a1, v36);
  v39 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 80) + 544), "from_address", 0xCuLL);
  v64 = 0;
  v65 = v67;
  v66 = 0x800000000;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = (_QWORD *)a1;
  v72 = v39;
  v73 = a3;
  sub_22EFC6D6C((uint64_t)v74, v39);
  v74[1] = 0;
  v74[2] = 0;
  v75 = 0;
  v76 = 257;
  v77 = 0;
  sub_22EC56024((uint64_t)&v64);
  if ((sub_22EC611AC(a1, &v64, v38, 0) & 1) != 0)
  {
    v63[0] = 0;
    v63[0] = sub_22EB27ADC(a1, a3, 1248, 0, 0);
    v80 = 0u;
    *(_OWORD *)v81 = 0u;
    v40 = sub_22EB235A8((_QWORD *)a1, (uint64_t)&v80, (uint64_t)&v64, 0, 0);
    if ((v40 & 1) != 0)
      v41 = 1;
    else
      v41 = sub_22EB1CFA4(a1, 0, v40 & 0xFFFFFFFFFFFFFFFELL, a3, v63, 1, a3, 0, 0);
    if (HIDWORD(v81[1]))
      free(v81[0]);
  }
  else
  {
    sub_22E8FCA40((_QWORD *)a1, a3, 0xC2Cu, 0, (uint64_t)&v80);
    sub_22F2F30F4((uint64_t)&v80, (uint64_t)"from_address");
    sub_22E903BEC((unsigned int *)&v80);
    v41 = 1;
  }
  if (BYTE1(v76))
  {
    if ((_DWORD)v64 == 5)
    {
      sub_22EC64D18(v71, (uint64_t)&v64);
    }
    else if (v69 && (*(_DWORD *)(v71[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v71, (uint64_t)&v64);
    }
  }
  if (v68)
  {
    v58 = sub_22EC6CBD0(v68);
    MEMORY[0x2348A0E9C](v58, 0x10E0C409F09D3C3);
  }
  if (v65 == v67)
  {
    if ((v41 & 1) == 0)
      goto LABEL_59;
LABEL_87:
    *(_BYTE *)(a5 + 32) = 1;
    return;
  }
  free(v65);
  if ((v41 & 1) != 0)
    goto LABEL_87;
LABEL_59:
  v63[0] = v41 & 0xFFFFFFFFFFFFFFFELL;
  v42 = sub_22E9FCAFC((_QWORD *)a1, v10, v11, "await_suspend", 0xDuLL, (uint64_t)v63, 1);
  if ((v42 & 1) != 0)
  {
    *(_BYTE *)(a5 + 32) = 1;
    return;
  }
  v43 = v42 & 0xFFFFFFFFFFFFFFFELL;
  *(_QWORD *)(a5 + 8) = v42 & 0xFFFFFFFFFFFFFFFELL;
  if ((v42 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v43 + 8) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
    {
      v44 = sub_22EFFA9C0(v42 & 0xFFFFFFFFFFFFFFFELL, *(_QWORD *)(a1 + 88));
      v60 = (void *)v44;
      v45 = v44 & 0xFFFFFFFFFFFFFFF0;
      v46 = *(_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v46 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28
        || !sub_22F10DDF0(*(_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF0)) && !sub_22F10DE3C(v46))
      {
        goto LABEL_71;
      }
      v47 = sub_22E9FCAFC((_QWORD *)a1, v43, v11, "address", 7uLL, 0, 0);
      if ((v47 & 1) != 0)
        goto LABEL_71;
      v48 = v47 & 0xFFFFFFFFFFFFFFFELL;
      if ((sub_22F10DFD8(*(_QWORD *)(*(_QWORD *)((v47 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) == 0)
      {
        v49 = sub_22EFFA604(*(unsigned __int8 **)(v48 + *(unsigned __int8 *)(v48 + 3)));
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v49 + 24), 0x18EDu, 0, (uint64_t)&v64);
        *(_QWORD *)&v80 = *(_QWORD *)(v48 + 8);
        sub_22E8901B8((uint64_t)&v64, (uint64_t *)&v80);
        sub_22E903BEC((unsigned int *)&v64);
      }
      v64 = sub_22EBCCCF0(a1, (int *)v48);
      v50 = (int *)sub_22EB27ADC(a1, v11, 1243, &v64, 1);
      if (!v50)
      {
LABEL_71:
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v45 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28
          || (v51 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v45 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFF800FF,
              v51 != 86507531)
          && v51 != 87031819)
        {
          v52 = sub_22EFFA604(*(unsigned __int8 **)(v43 + *(unsigned __int8 *)(v43 + 3)));
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v52 + 24), 0xB52u, 0, (uint64_t)&v64);
          sub_22E8901B8((uint64_t)&v64, (uint64_t *)&v60);
          sub_22E903BEC((unsigned int *)&v64);
          sub_22E8FCA40((_QWORD *)a1, v11, 0x1581u, 0, (uint64_t)&v64);
          v53 = sub_22EFFA604(*(unsigned __int8 **)(v43 + *(unsigned __int8 *)(v43 + 3)));
          if (v53)
          {
            if ((*(_DWORD *)(v53 + 28) & 0x7Eu) - 52 >= 6)
              v54 = 0;
            else
              v54 = v53;
          }
          else
          {
            v54 = 0;
          }
          *(_QWORD *)&v80 = v54;
          sub_22E890024((uint64_t)&v64, (uint64_t *)&v80);
          sub_22E903BEC((unsigned int *)&v64);
          *(_BYTE *)(a5 + 32) = 1;
          goto LABEL_91;
        }
        v50 = sub_22EBCCCF0(a1, (int *)v43);
      }
      *(_QWORD *)(a5 + 8) = v50;
    }
LABEL_91:
    v55 = sub_22E9FCAFC((_QWORD *)a1, v10, v11, "await_resume", 0xCuLL, 0, 0);
    if ((v55 & 1) != 0)
      *(_BYTE *)(a5 + 32) = 1;
    else
      *(_QWORD *)(a5 + 16) = v55 & 0xFFFFFFFFFFFFFFFELL;
    *(_WORD *)(a1 + 1693) = 257;
  }
}

uint64_t sub_22E9FB1B0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v6 = sub_22E9F99C4(a1, a2, (uint64_t)"co_yield", 8, 0);
  if (!v6)
    return 1;
  v7 = v6;
  v8 = *(_QWORD *)(a3 + 8);
  v9 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_DWORD *)(v9 + 16);
  if ((v10 & 0xFE00000u) >= 0x8180001 && v9 != 0 && *(_DWORD *)(v9 + 16) == 11)
  {
    v13 = sub_22EB19A28(a1);
    if ((v13 & 1) == 0)
    {
      a3 = v13 & 0xFFFFFFFFFFFFFFFELL;
      v8 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v10 = *(_DWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 16);
      goto LABEL_12;
    }
    return 1;
  }
LABEL_12:
  if ((v10 & 0x400) != 0)
  {
    v15 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 64, 3);
    return sub_22F31BE14(v15, 160, a2, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16832), a3);
  }
  else
  {
    if ((*(_BYTE *)(a3 + 1) & 3) == 0)
      a3 = sub_22F335E0C(a1, v8, a3, 1);
    v19 = 0;
    v17 = 0u;
    v18 = 0u;
    sub_22E9FA834(a1, *(_QWORD *)(v7 + 176), a2, a3, (uint64_t)&v17);
    if ((_BYTE)v19)
      return 1;
    v16 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 64, 3);
    return sub_22F31BEA4(v16, 160, a2, a3, v17, *((uint64_t *)&v17 + 1), (int *)v18, *((uint64_t *)&v18 + 1));
  }
}

uint64_t sub_22E9FB310(uint64_t a1, unsigned int a2, unint64_t a3, char a4)
{
  unsigned __int8 *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  const char *v21;
  unint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  size_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  unint64_t v38;

  v5 = (unsigned __int8 *)a3;
  v38 = a3;
  v9 = sub_22E9F99C4(a1, a2, (uint64_t)"co_return", 9, a4);
  if (!v9)
    return 1;
  v10 = v9;
  if (!v5)
  {
    v17 = 0;
    v18 = *(_QWORD *)(v9 + 176);
    goto LABEL_25;
  }
  v11 = *(_QWORD *)(*((_QWORD *)v5 + 1) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_DWORD *)(v11 + 16);
  if ((v12 & 0xFF80000) != 0x8200000
    && (v12 & 0xFE00000u) >= 0x8180001
    && v11 != 0
    && *(_DWORD *)(v11 + 16) == 11)
  {
    v16 = sub_22EB19A28(a1);
    if ((v16 & 1) != 0)
      return 1;
    v18 = *(_QWORD *)(v10 + 176);
    v5 = (unsigned __int8 *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    v38 = v16 & 0xFFFFFFFFFFFFFFFELL;
    if ((v16 & 0xFFFFFFFFFFFFFFFELL) == 0)
    {
      v17 = 0;
      goto LABEL_25;
    }
  }
  else
  {
    v18 = *(_QWORD *)(v9 + 176);
  }
  if (*v5 == 180
    || ((v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
      ? (v20 = (*(_DWORD *)(v19 + 16) & 0xFF800FF) == 86507531)
      : (v20 = 0),
        !v20))
  {
    sub_22ED3466C(a1, (uint64_t *)&v38, 2);
    v21 = "return_value";
    v22 = &v38;
    v23 = (_QWORD *)a1;
    v24 = v18;
    v25 = a2;
    v26 = 12;
    v27 = 1;
    goto LABEL_26;
  }
  sub_22EFF605C((uint64_t)v5);
  v17 = v28;
LABEL_25:
  v38 = sub_22EBCF22C(a1, (unint64_t)v5, v17, 1, 0) & 0xFFFFFFFFFFFFFFFELL;
  v21 = "return_void";
  v23 = (_QWORD *)a1;
  v24 = v18;
  v25 = a2;
  v26 = 11;
  v22 = 0;
  v27 = 0;
LABEL_26:
  v29 = sub_22E9FA490(v23, v24, v25, v21, v26, (uint64_t)v22, v27);
  if ((v29 & 1) != 0)
    return 1;
  v30 = v29 & 0xFFFFFFFFFFFFFFFELL;
  if ((v29 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    sub_22EFF605C(v29 & 0xFFFFFFFFFFFFFFFELL);
    v32 = v31;
  }
  else
  {
    v32 = 0;
  }
  v34 = sub_22EBCF22C(a1, v30, v32, 0, 0) & 0xFFFFFFFFFFFFFFFELL;
  v33 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
  v35 = v38;
  *(_BYTE *)v33 = 10;
  if (byte_255E04EB3)
  {
    v36 = sub_22F0D3748(10);
    ++*((_DWORD *)v36 + 2);
  }
  *(_DWORD *)(v33 + 8) = a2;
  *(_BYTE *)(v33 + 32) = *(_BYTE *)(v33 + 32) & 0xFE | a4;
  *(_QWORD *)(v33 + 16) = v35;
  *(_QWORD *)(v33 + 24) = v34;
  return v33;
}

void sub_22E9FB558(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  unsigned int v12[24];
  unsigned int v13[24];
  unsigned int v14[32];
  char v15;
  void *v16;
  _QWORD v17[7];

  v17[6] = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned int *)(a1 + 1904);
  if ((_DWORD)v6)
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v6 - 8);
  else
    v7 = 0;
  if (*a3)
  {
    if (*(_QWORD *)(v7 + 176))
    {
      if (*(_BYTE *)*a3 != 11)
      {
        if (sub_22E46A45C(a2))
        {
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x1834u, 0, (uint64_t)v13);
          sub_22E903BEC(v13);
        }
        v8 = *(_DWORD *)(v7 + 16);
        if (v8)
        {
          sub_22E8FCA40((_QWORD *)a1, v8, 0x1243u, 0, (uint64_t)v12);
          sub_22E903BEC(v12);
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v7 + 12), 0x158Fu, 0, (uint64_t)v14);
          v9 = ((unint64_t)*(unsigned int *)(v7 + 8) >> 18) & 3;
          v10 = qword_22F46A030[v9];
          v11[0] = off_24FAB7718[v9];
          v11[1] = v10;
          sub_22F2F2210((uint64_t)v14, (uint64_t)v11);
          sub_22E903BEC(v14);
        }
        sub_22F31B0C0((uint64_t)v14, a1, a2, v7, *a3);
        if (v15 && sub_22E9FB738((uint64_t)v14))
          *a3 = sub_22F3F2E7C(*(_QWORD *)(a1 + 88), (uint64_t)v14);
        else
          sub_22EFC77E8(a2, 1);
        if (v16 != v17)
          free(v16);
      }
    }
    else
    {
      sub_22EFC77E8(a2, 1);
    }
  }
}

BOOL sub_22E9FB738(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 result;

  v2 = sub_22E9FA490(*(_QWORD **)(a1 + 104), *(_QWORD *)(*(_QWORD *)(a1 + 120) + 176), *(_DWORD *)(a1 + 132), "get_return_object", 0x11uLL, 0, 0);
  if ((v2 & 1) != 0)
  {
    result = 0;
    *(_BYTE *)(a1 + 128) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 64) = v2 & 0xFFFFFFFFFFFFFFFELL;
    result = 1;
    *(_BYTE *)(a1 + 128) = 1;
    if (!*(_BYTE *)(a1 + 184))
    {
      sub_22F31B2A0(a1);
      return *(_BYTE *)(a1 + 128) != 0;
    }
  }
  return result;
}

BOOL sub_22E9FB7B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  char v18;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v3)
    v4 = *(unsigned __int8 *)(v3 + 16) - 27 > 0xFFFFFFFD;
  else
    v4 = 0;
  if (!v4)
    v3 = sub_22F10CF48(v3);
  v5 = *(_QWORD *)(v3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v6)
    v7 = (*(_DWORD *)(v6 + 16) & 0xFF800FF) == 86507531;
  else
    v7 = 0;
  if (v7)
    return (sub_22EBCF22C(*(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 64), *(_DWORD *)(a1 + 132), 0, 0) & 1) == 0;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v8)
    v9 = (*(_DWORD *)(v8 + 16) & 0xFF800FF) == 86507531;
  else
    v9 = 0;
  if (v9)
  {
    v12 = *(_DWORD *)(a1 + 132);
    v13 = 3;
    v14 = 0;
    v15 = v5;
    v16 = 0;
    v17 = v12;
    v18 = 0;
    sub_22EC45014(*(_QWORD *)(a1 + 104), &v13, 0, *(_QWORD *)(a1 + 64), 0, 0);
  }
  else
  {
    v10 = sub_22ED358AC(*(_QWORD *)(a1 + 104), *(_DWORD *)(a1 + 132), *(_QWORD *)(a1 + 64), 0);
    if ((v10 & 1) == 0)
    {
      *(_QWORD *)(a1 + 72) = v10 & 0xFFFFFFFFFFFFFFFELL;
      return 1;
    }
  }
  sub_22E9FC5AC(*(_QWORD **)(a1 + 104), *(unsigned __int8 **)(a1 + 64), *(_QWORD *)(a1 + 120));
  return 0;
}

BOOL sub_22E9FB908(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  BOOL v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  _QWORD *v55;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  uint64_t v86;
  void *__src;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  _QWORD v92[10];
  void *v93;
  void *v94;
  uint64_t v95;
  _BYTE v96[64];
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  int v102;
  _QWORD v103[3];
  __int16 v104;
  int v105;
  char v106;
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 176) + 48);
  v3 = *(_QWORD *)(a1 + 104);
  v4 = *(_DWORD *)(a1 + 132);
  v93 = &unk_24FAB6EF8;
  LODWORD(v94) = 3591;
  if ((sub_22EE8B0B0(v3, v4, v2) & 1) != 0)
    return 0;
  v6 = *(_QWORD *)(a1 + 80);
  v85 = 0;
  v86 = 0;
  v84 = 0;
  __src = &v89;
  v88 = 0x100000000;
  v7 = *(_QWORD *)(a1 + 112);
  if (!v7)
    goto LABEL_31;
  if ((*(_DWORD *)(v7 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
    goto LABEL_31;
  if ((*(_QWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 32))(*(_QWORD *)(a1 + 112)) + 80) & 0xE000) == 0x4000)
    goto LABEL_31;
  v8 = *(_QWORD *)(v7 + 40);
  if ((v8 & 7) == 6 && (*(_DWORD *)(v8 & 0xFFFFFFFFFFFFFFF8) - 1) < 4)
    goto LABEL_31;
  v9 = *(_WORD *)(v7 + 80) & 0x7F;
  v10 = -40;
  if (v9 <= 0x46)
  {
    if (v9 <= 0x18)
    {
      if (v9 == 16)
      {
LABEL_11:
        v10 = -48;
        goto LABEL_23;
      }
      if (((1 << v9) & 0x1066) != 0)
        goto LABEL_23;
      if (v9 == 24)
        goto LABEL_11;
    }
    if (v9 == 70)
    {
LABEL_21:
      v10 = -64;
      goto LABEL_23;
    }
    goto LABEL_19;
  }
  if (v9 == 83)
    goto LABEL_23;
  if (v9 == 71)
  {
    v10 = -56;
    goto LABEL_23;
  }
  if (v9 != 81)
  {
LABEL_19:
    if (v9 - 52 >= 6)
    {
      if (v9 - 33 >= 5)
        goto LABEL_11;
      goto LABEL_21;
    }
    v10 = -72;
  }
LABEL_23:
  v11 = *(_QWORD *)(v7 + 72 + v10 + 16);
  v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
  if ((v11 & 4) != 0)
  {
    v12 = (_QWORD *)*v12;
    if (v12)
      goto LABEL_25;
  }
  else if (v12)
  {
LABEL_25:
    v13 = v12[8];
    if (v13
      && ((*(unsigned __int16 *)(v13 + 8) | (*(unsigned __int8 *)(v13 + 10) << 16)) & 0x100000) != 0
      && (v8 & 7) == 6
      && *(_DWORD *)(v8 & 0xFFFFFFFFFFFFFFF8) == 42)
    {
      goto LABEL_31;
    }
  }
  v14 = sub_22EBBC0DC(*(_QWORD **)(a1 + 104), *(_DWORD *)(a1 + 132));
  if ((v14 & 1) != 0)
    goto LABEL_113;
  v15 = sub_22EB2EA08(*(_QWORD *)(a1 + 104), *(_DWORD *)(a1 + 132), 5, (unint64_t)v14 & 0xFFFFFFFFFFFFFFFELL);
  if ((v15 & 1) != 0)
    goto LABEL_113;
  *((_QWORD *)__src + v88) = v15 & 0xFFFFFFFFFFFFFFFELL;
  LODWORD(v88) = v88 + 1;
LABEL_31:
  v16 = *(_QWORD *)(a1 + 112);
  v17 = *(uint64_t **)(v16 + 120);
  v18 = *(_QWORD *)(*(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v18)
    v19 = *(_BYTE *)(v18 + 16) == 26;
  else
    v19 = 0;
  if (v19
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v18 = sub_22F10CF48(v18)) != 0)
  {
    v20 = *(_QWORD *)(v18 + 16);
    if ((v20 & 0x3FFFC000000000) != 0)
    {
      v21 = &v17[(unsigned __int16)(v20 >> 38)];
      while (1)
      {
        v22 = *v17;
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v17 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
          goto LABEL_39;
        v23 = *(_DWORD *)(v22 + 24);
        v24 = *(_QWORD *)(a1 + 104);
        v25 = sub_22EFBF144(*v17);
        v26 = *(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF0);
        if (v26)
        {
          v27 = *(_DWORD *)(v26 + 16);
          if ((v27 & 0xFE) == 0x28)
            goto LABEL_50;
        }
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
        {
          v82 = v25;
          v26 = sub_22F10CF48(v26);
          v25 = v82;
          if (v26)
            break;
        }
LABEL_44:
        v28 = sub_22F32D524(v24, v22, v25, 1, v23, 0);
        if ((v28 & 1) != 0)
          goto LABEL_113;
        v29 = v88;
        if (v88 >= (unint64_t)HIDWORD(v88))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v29 = v88;
        }
        *((_QWORD *)__src + v29) = v28 & 0xFFFFFFFFFFFFFFFELL;
        LODWORD(v88) = v88 + 1;
LABEL_39:
        if (++v17 == v21)
          goto LABEL_61;
      }
      v27 = *(_DWORD *)(v26 + 16);
LABEL_50:
      if ((v27 & 0x100000) != 0)
      {
        do
        {
          v26 = *(_QWORD *)(*(_QWORD *)(v26 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v26)
          {
            v30 = *(_DWORD *)(v26 + 16);
            if ((v30 & 0xFE) == 0x28)
              continue;
          }
          v26 = sub_22F10CF48(v26);
          v30 = *(_DWORD *)(v26 + 16);
        }
        while ((v30 & 0x100000) != 0);
      }
      v25 = *(_QWORD *)(v26 + 32);
      goto LABEL_44;
    }
  }
LABEL_61:
  sub_22EBBF744(*(_QWORD **)(a1 + 104), *(_DWORD *)(a1 + 132), 0, 1, 2, v2, 0, (_BYTE *)&v84 + 1, &v84, (uint64_t *)__src, v88, &v86, &v85);
  v31 = v86;
  if (!v86 && (_DWORD)v88)
  {
    LODWORD(v88) = 0;
    sub_22EBBF744(*(_QWORD **)(a1 + 104), *(_DWORD *)(a1 + 132), 0, 1, 2, v2, 0, (_BYTE *)&v84 + 1, &v84, (uint64_t *)__src, 0, &v86, &v85);
    v31 = v86;
  }
  if (!v31)
  {
    sub_22EBBF744(*(_QWORD **)(a1 + 104), *(_DWORD *)(a1 + 132), 0, 0, 2, v2, 0, (_BYTE *)&v84 + 1, &v84, (uint64_t *)__src, v88, &v86, &v85);
    v31 = v86;
    if (!v86)
    {
      if (!v6)
        goto LABEL_113;
      goto LABEL_72;
    }
  }
  v32 = *(_QWORD *)(v31 + 16);
  v33 = v32 & 0xFFFFFFFFFFFFFFF8;
  if ((v32 & 4) != 0)
    v33 = *(_QWORD *)v33;
  if (v6)
  {
    if ((*(_WORD *)(v33 + 8) & 0x7Fu) - 38 > 0xFFFFFFFC)
    {
LABEL_98:
      v47 = *(_QWORD *)(*(_QWORD *)(v31 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v47)
        v48 = *(_BYTE *)(v47 + 16) == 26;
      else
        v48 = 0;
      if (!v48)
        v47 = sub_22F10CF48(v47);
      if (sub_22F113A44(v47))
      {
        sub_22E8FCA40(*(_QWORD **)(a1 + 104), *(_DWORD *)(v86 + 24), 0xC33u, 0, (uint64_t)&v93);
        sub_22E890024((uint64_t)&v93, &v86);
        sub_22E903BEC((unsigned int *)&v93);
        sub_22E8FCA40(*(_QWORD **)(a1 + 104), *(_DWORD *)(a1 + 132), 0x1581u, 0, (uint64_t)&v93);
        sub_22E890024((uint64_t)&v93, &v86);
        sub_22E903BEC((unsigned int *)&v93);
        goto LABEL_113;
      }
      goto LABEL_105;
    }
LABEL_72:
    v34 = *(_QWORD **)(a1 + 104);
    v35 = *(_DWORD *)(a1 + 132);
    v36 = v34[419];
    if ((v36 & 1) != 0)
    {
      v36 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v34[11] + 16048) + 16))(*(_QWORD *)(v34[11] + 16048), v36 >> 1);
      v34[419] = v36;
    }
    v37 = sub_22E3CB704((llvm::StringMapImpl *)(v34[10] + 544), "nothrow", 7uLL);
    v93 = 0;
    v94 = v96;
    v95 = 0x800000000;
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v100 = v34;
    v101 = v37;
    v102 = v35;
    sub_22EFC6D6C((uint64_t)v103, v37);
    v103[1] = 0;
    v103[2] = 0;
    v104 = 0;
    v105 = 257;
    v106 = 0;
    sub_22EC56024((uint64_t)&v93);
    if (v36)
      v38 = v36 + 48;
    else
      v38 = 0;
    if ((sub_22EC611AC(v34, &v93, v38, 0) & 1) != 0)
    {
      v39 = *(_QWORD *)v94 & 0xFFFFFFFFFFFFFFFCLL;
      if ((_DWORD)v93 == 2)
      {
        v40 = *(_DWORD *)(v39 + 28) & 0x7F;
        if (v40 > 0x2F)
        {
          v41 = *(_QWORD *)v94 & 0xFFFFFFFFFFFFFFFCLL;
        }
        else
        {
          v41 = *(_QWORD *)v94 & 0xFFFFFFFFFFFFFFFCLL;
          if (((1 << v40) & 0xC00000060000) != 0)
          {
            v41 = sub_22EFBAEA4(*(_QWORD *)v94 & 0xFFFFFFFFFFFFFFFCLL);
            v40 = *(_DWORD *)(v41 + 28) & 0x7F;
          }
        }
        if (v40 - 60 < 7)
        {
          v65 = sub_22F32D524((uint64_t)v34, v41, *(_QWORD *)(v41 + 48), 1, v35, 0);
          if ((v65 & 1) != 0)
            v45 = 0;
          else
            v45 = v65 & 0xFFFFFFFFFFFFFFFELL;
          goto LABEL_86;
        }
      }
      BYTE1(v105) = 0;
      v42 = *(_DWORD *)(v39 + 24);
      v43 = v34;
      v44 = 3755;
    }
    else
    {
      v43 = v34;
      v42 = v35;
      v44 = 3565;
    }
    sub_22E8FCA40(v43, v42, v44, 0, (uint64_t)&v90);
    sub_22E903BEC((unsigned int *)&v90);
    v45 = 0;
LABEL_86:
    if (BYTE1(v105))
    {
      if ((_DWORD)v93 == 5)
      {
        sub_22EC64D18(v100, (uint64_t)&v93);
      }
      else if (v98 && (*(_DWORD *)(v100[9] + 52) & 0x400000) != 0)
      {
        sub_22E90B5FC((unint64_t)v100, (uint64_t)&v93);
      }
    }
    if (v97)
    {
      v79 = sub_22EC6CBD0(v97);
      MEMORY[0x2348A0E9C](v79, 0x10E0C409F09D3C3);
    }
    if (v94 == v96)
    {
      if (!v45)
        goto LABEL_113;
    }
    else
    {
      free(v94);
      if (!v45)
        goto LABEL_113;
    }
    v46 = 0;
    LODWORD(v88) = 0;
    if (!HIDWORD(v88))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v46 = v88;
    }
    *((_QWORD *)__src + v46) = v45;
    LODWORD(v88) = v88 + 1;
    v86 = 0;
    sub_22EBBF744(*(_QWORD **)(a1 + 104), *(_DWORD *)(a1 + 132), 0, 2, 2, v2, 0, (_BYTE *)&v84 + 1, &v84, (uint64_t *)__src, v88, &v86, &v85);
    v31 = v86;
    if (!v86)
      goto LABEL_113;
    goto LABEL_98;
  }
LABEL_105:
  v49 = *(_QWORD **)(a1 + 104);
  v50 = *(unsigned int *)(a1 + 132);
  v93 = 0;
  v51 = (v49[11] + 15312) | 6;
  v52 = sub_22F10C2A4(*(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0));
  v53 = 0;
  if (v52)
  {
    if ((*(_DWORD *)(v52 + 28) & 0x7Fu) - 35 >= 3)
      v53 = 0;
    else
      v53 = v52;
  }
  if (!sub_22F3318B8(v49, v50, v53, v51, &v93, 1))
  {
    v54 = v93;
    if (!v93)
    {
      v57 = sub_22EE8B180(v49, v50);
      v54 = (void *)sub_22F33171C(v49, v50, v57 ^ 1u, 0, v51);
      v93 = v54;
    }
    sub_22EB4E494(v49, v50, v54, 1);
    v55 = v93;
    if (v93)
    {
      v83 = sub_22EB27ADC(*(_QWORD *)(a1 + 104), *(unsigned int *)(a1 + 132), 1248, 0, 0);
      v58 = sub_22EB27ADC(*(_QWORD *)(a1 + 104), *(unsigned int *)(a1 + 132), 1247, 0, 0);
      v59 = sub_22F32D524(*(_QWORD *)(a1 + 104), v86, *(_QWORD *)(v86 + 48), 1, *(_DWORD *)(a1 + 132), 0);
      if ((v59 & 1) == 0)
      {
        v93 = &v95;
        v94 = (void *)0x200000000;
        sub_22E4639CC((uint64_t)&v93, 1uLL, v58);
        sub_22F2ECCD8((uint64_t)&v93, (uint64_t)v93 + 8 * v94, (uint64_t *)__src, (uint64_t *)__src + v88);
        LOWORD(v80) = 0;
        v60 = sub_22EB1CFA4(*(_QWORD *)(a1 + 104), *(_QWORD *)(*(_QWORD *)(a1 + 104) + 12888), v59 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)(a1 + 132), v93, v94, *(unsigned int *)(a1 + 132), 0, v80);
        v61 = *(_QWORD *)(a1 + 104);
        v62 = v60 & 0xFFFFFFFFFFFFFFFELL;
        if ((v60 & 0xFFFFFFFFFFFFFFFELL) != 0)
        {
          sub_22EFF605C(v60 & 0xFFFFFFFFFFFFFFFELL);
          v64 = v63;
        }
        else
        {
          v64 = 0;
        }
        v66 = sub_22EBCF22C(v61, v62, v64, 0, 0);
        v5 = 0;
        if ((v66 & 1) == 0)
        {
          v67 = v66;
          v68 = v55[6];
          v69 = sub_22F32D524(*(_QWORD *)(a1 + 104), (uint64_t)v55, v68, 1, *(_DWORD *)(a1 + 132), 0);
          if ((v69 & 1) != 0)
          {
            v5 = 0;
          }
          else
          {
            v70 = 1;
            v71 = sub_22EB27ADC(*(_QWORD *)(a1 + 104), *(unsigned int *)(a1 + 132), 1250, &v83, 1);
            v90 = v92;
            v92[0] = v71;
            v91 = 0x200000001;
            v72 = *(_QWORD *)(v68 & 0xFFFFFFFFFFFFFFF0);
            if (!v72 || *(_BYTE *)(v72 + 16) != 26)
            {
              v72 = sub_22F10CF48(v72);
              v70 = v91;
            }
            if ((*(_DWORD *)(v72 + 20) & 0x3FFF80) != 0)
            {
              if (v70 >= HIDWORD(v91))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v70 = v91;
              }
              *((_QWORD *)v90 + v70) = v58;
              v70 = v91 + 1;
              LODWORD(v91) = v91 + 1;
            }
            LOWORD(v81) = 0;
            v73 = sub_22EB1CFA4(*(_QWORD *)(a1 + 104), *(_QWORD *)(*(_QWORD *)(a1 + 104) + 12888), v69 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)(a1 + 132), v90, v70, *(unsigned int *)(a1 + 132), 0, v81);
            v74 = *(_QWORD *)(a1 + 104);
            v75 = v73 & 0xFFFFFFFFFFFFFFFELL;
            if ((v73 & 0xFFFFFFFFFFFFFFFELL) != 0)
            {
              sub_22EFF605C(v73 & 0xFFFFFFFFFFFFFFFELL);
              v77 = v76;
            }
            else
            {
              v77 = 0;
            }
            v78 = sub_22EBCF22C(v74, v75, v77, 0, 0);
            v5 = (v78 & 1) == 0;
            if ((v78 & 1) == 0)
            {
              *(_QWORD *)(a1 + 48) = v67 & 0xFFFFFFFFFFFFFFFELL;
              *(_QWORD *)(a1 + 56) = v78 & 0xFFFFFFFFFFFFFFFELL;
            }
            if (v90 != v92)
              free(v90);
          }
        }
        if (v93 != &v95)
          free(v93);
        goto LABEL_114;
      }
    }
  }
LABEL_113:
  v5 = 0;
LABEL_114:
  if (__src != &v89)
    free(__src);
  return v5;
}

uint64_t sub_22E9FC4CC(uint64_t a1, uint64_t a2, char *__s, uint64_t a4, int a5, _BYTE *a6)
{
  char *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v9 = __s;
  v12 = *(_QWORD *)(a2 + 80);
  if (__s)
    __s = (char *)strlen(__s);
  v13 = sub_22E3CB704((llvm::StringMapImpl *)(v12 + 544), v9, (size_t)__s);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_QWORD *)(a1 + 16) = 0x800000000;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = a2;
  *(_QWORD *)(a1 + 120) = v13;
  *(_DWORD *)(a1 + 128) = a5;
  sub_22EFC6D6C(a1 + 136, v13);
  *(_OWORD *)(a1 + 144) = xmmword_22F463A40;
  *(_DWORD *)(a1 + 160) = 16842752;
  *(_WORD *)(a1 + 164) = 0;
  *(_BYTE *)(a1 + 166) = 0;
  sub_22EC56024(a1);
  *(_BYTE *)(a1 + 163) = 0;
  if (a4)
    v14 = a4 + 64;
  else
    v14 = 0;
  result = sub_22EC611AC(a2, a1, v14, 0);
  *a6 = result;
  return result;
}

unsigned int *sub_22E9FC5AC(_QWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v8[2];
  unsigned int v9[24];

  if (*a2 == 140)
  {
    v8[0] = sub_22F060FB4((uint64_t)a2);
    sub_22E8FCA40(a1, *(_DWORD *)(v8[0] + 24), 0x1651u, 0, (uint64_t)v9);
    sub_22E890024((uint64_t)v9, v8);
    sub_22E903BEC(v9);
  }
  sub_22E8FCA40(a1, *(_DWORD *)(a3 + 12), 0x158Fu, 0, (uint64_t)v9);
  v5 = ((unint64_t)*(unsigned int *)(a3 + 8) >> 18) & 3;
  v6 = qword_22F46A030[v5];
  v8[0] = (uint64_t)off_24FAB7718[v5];
  v8[1] = v6;
  sub_22F2F2210((uint64_t)v9, (uint64_t)v8);
  return sub_22E903BEC(v9);
}

uint64_t sub_22E9FC668(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * *(unsigned int *)(a1 + 1904) - 8);
  if (*(_DWORD *)(v2 + 264))
    return 0;
  v6 = *(_QWORD *)(a1 + 216);
  if (v6)
    v7 = v6 - 72;
  else
    v7 = 0;
  v8 = *(uint64_t **)(v7 + 120);
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v9)
    v10 = *(_BYTE *)(v9 + 16) == 26;
  else
    v10 = 0;
  if (v10
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26 && (v9 = sub_22F10CF48(v9)) != 0)
  {
    v11 = *(_QWORD *)(v9 + 16);
    if ((v11 & 0x3FFFC000000000) != 0)
    {
      v12 = &v8[(unsigned __int16)(v11 >> 38)];
      while (1)
      {
        v13 = *v8;
        v14 = *(_QWORD *)(*v8 + 48);
        v15 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0);
        v16 = *(_DWORD *)(v15 + 16);
        if ((v16 & 0x400) != 0)
          goto LABEL_14;
        if ((*(_DWORD *)(v15 + 16) & 0xFE) == 0x28)
          goto LABEL_34;
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
        {
          v15 = sub_22F10CF48(v15);
          if (v15)
            break;
        }
LABEL_18:
        v17 = sub_22F32D524(a1, v13, v14, 1, a2, 0);
        if ((v17 & 1) != 0)
          return 0;
        v18 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v13 + 48) & 0xFFFFFFFFFFFFFFF0));
        if (v18 && (*(_DWORD *)(v18 + 28) & 0x7Fu) - 35 < 3
          || (v19 = *(_QWORD *)(v13 + 48),
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                       + 16) == 41))
        {
          v20 = v17 & 0xFFFFFFFFFFFFFFFELL;
          v21 = sub_22EE7E490((_QWORD *)a1, *(_QWORD *)(v20 + 8), 0, 0);
          sub_22F0D5A50(v20);
          v23 = v22;
          v24 = sub_22EF579A8(*(_QWORD *)(a1 + 88), v21, v22);
          sub_22F0D4E74(v20);
          sub_22E95ADCC((_QWORD *)a1, v23, 146, v24, v20, v23 | (v23 << 32), v25);
          v19 = *(_QWORD *)(v13 + 48);
        }
        v26 = *(_QWORD *)(v13 + 40);
        v27 = (v26 & 7) != 0 ? 0 : v26 & 0xFFFFFFFFFFFFFFF8;
        v28 = sub_22EF579A8(*(_QWORD *)(a1 + 88), v19, a2);
        v29 = sub_22EFBB670(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 216), a2, a2, v27, v19, (uint64_t)v28, 0);
        *(_DWORD *)(v29 + 28) |= 0x200u;
        sub_22EA28AD8();
        v30 = sub_22ED2B2F8(a1, v29, a2, a2);
        if ((v30 & 1) != 0)
          return 0;
        v37 = v13;
        v38 = 0;
        sub_22F31C058((uint64_t)&v35, v2 + 184, &v37, &v38);
        if (v36)
        {
          v31 = v35;
          v32 = *(unsigned int *)(v2 + 264);
          if (v32 >= *(unsigned int *)(v2 + 268))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v32 = *(unsigned int *)(v2 + 264);
          }
          v33 = (uint64_t *)(*(_QWORD *)(v2 + 256) + 16 * v32);
          *v33 = v13;
          v33[1] = v30 & 0xFFFFFFFFFFFFFFFELL;
          LODWORD(v33) = *(_DWORD *)(v2 + 264);
          *(_DWORD *)(v2 + 264) = (_DWORD)v33 + 1;
          *(_DWORD *)(v31 + 8) = (_DWORD)v33;
        }
LABEL_14:
        if (++v8 == v12)
          return 1;
      }
      v16 = *(_DWORD *)(v15 + 16);
LABEL_34:
      if ((v16 & 0x100000) != 0)
      {
        do
        {
          v15 = *(_QWORD *)(*(_QWORD *)(v15 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v15)
          {
            v34 = *(_DWORD *)(v15 + 16);
            if ((v34 & 0xFE) == 0x28)
              continue;
          }
          v15 = sub_22F10CF48(v15);
          v34 = *(_DWORD *)(v15 + 16);
        }
        while ((v34 & 0x100000) != 0);
      }
      v14 = *(_QWORD *)(v15 + 32);
      goto LABEL_18;
    }
  }
  return 1;
}

unsigned int *sub_22E9FC9D4(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int *result;
  unsigned int v16[4];
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  char v22;
  uint64_t v23;

  sub_22E8FCA40(*(_QWORD **)a1, **(_DWORD **)(a1 + 8), 0xC2Du, 0, (uint64_t)v16);
  if (v20)
  {
    v13 = v18;
    if (!v18)
    {
      v13 = (unsigned __int8 *)sub_22E3B8AAC(v19);
      v18 = v13;
    }
    v11 = a2;
    v13[*v13 + 1] = 2;
    v12 = v18;
    goto LABEL_11;
  }
  if (v22)
  {
    v4 = v17;
    v5 = (uint64_t *)(*(_QWORD *)v16 + 12784);
    if (v17)
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
    v23 = v4;
    v6 = sub_22F2F1D6C(v5, &v23);
    v7 = v6[1] + 32 * v21;
    v10 = *(unsigned __int8 **)(v7 + 8);
    v9 = (unsigned __int8 **)(v7 + 8);
    v8 = v10;
    if (!v10)
    {
      v8 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v9[1]);
      *v9 = v8;
    }
    v11 = a2;
    v8[*v8 + 1] = 2;
    v12 = *v9;
LABEL_11:
    v14 = *v12;
    *v12 = v14 + 1;
    *(_QWORD *)&v12[8 * v14 + 16] = v11;
  }
  sub_22F2F2210((uint64_t)v16, *(_QWORD *)(a1 + 16));
  result = sub_22E903BEC(v16);
  **(_BYTE **)(a1 + 24) = 1;
  return result;
}

uint64_t sub_22E9FCAFC(_QWORD *a1, uint64_t a2, unsigned int a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25[24];
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;

  v28 = sub_22E3CB704((llvm::StringMapImpl *)(a1[10] + 544), a4, a5);
  v29 = a3;
  sub_22EFC6D6C((uint64_t)&v30, v28);
  v26 = 0u;
  v27 = 0u;
  v12 = sub_22EC225CC(a1, a2, *(_QWORD *)(a2 + 8), a3, 0, (uint64_t)&v26, 0, 0, (uint64_t)&v28, 0, 0, 0);
  if ((v12 & 1) == 0)
  {
    v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(unsigned __int8 *)(v12 & 0xFFFFFFFFFFFFFFFELL) != 231)
    {
      LOWORD(v21) = 0;
      v14 = sub_22EB1CFA4(a1, 0, v13, a3, a6, a7, a3, 0, v21);
      goto LABEL_11;
    }
    sub_22F338D48((uint64_t)a1, v13);
    sub_22E8FCA40(a1, a3, 0xFAAu, 0, (uint64_t)v25);
    v24 = v28;
    v15 = sub_22E894538((uint64_t)v25, &v24);
    v16 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0));
    if (v16)
    {
      if ((*(_DWORD *)(v16 + 28) & 0x7Fu) - 35 >= 3)
        v17 = 0;
      else
        v17 = v16;
    }
    else
    {
      v17 = 0;
    }
    v23 = v17;
    v18 = sub_22E890024(v15, &v23);
    sub_22F0D4E74(a2);
    v22 = v19;
    sub_22E8906A0(v18, &v22);
    sub_22E903BEC(v25);
  }
  v14 = 1;
LABEL_11:
  if (HIDWORD(v27))
    free((void *)v27);
  return v14;
}

uint64_t sub_22E9FCCA4(uint64_t result, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t **v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t (*v17)(uint64_t);
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  BOOL v34;
  uint64_t *v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t **v48;
  uint64_t **v49;
  uint64_t *v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t **v61;
  BOOL v62;
  char v63;
  uint64_t v64;
  uint64_t **v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t **v73;
  int64_t v74;
  int64_t v75;
  int64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t **v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  unint64_t v120;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t *v126;
  unint64_t v127;
  int64_t v128;
  uint64_t *v129;
  uint64_t **v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v138;

  v5 = (uint64_t **)result;
LABEL_2:
  v6 = a2;
  v130 = a2 - 1;
  while (2)
  {
    v7 = (char *)v6 - (char *)v5;
    v8 = v6 - v5;
    switch(v8)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v45 = *(a2 - 1);
        v46 = (uint64_t)*v5;
        v47 = (unint64_t)(*(uint64_t (**)(uint64_t *))(*v45 + 16))(v45) >> 32;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46);
        if (v47 < HIDWORD(result))
        {
          *v5 = v45;
          *(a2 - 1) = (uint64_t *)v46;
        }
        return result;
      case 3:
        return sub_22E9FD72C((uint64_t *)v5, v5 + 1, v130);
      case 4:
        return sub_22E9FDB3C((uint64_t *)v5, v5 + 1, v5 + 2, v130);
      case 5:
        v48 = v5 + 2;
        v49 = v5 + 3;
        sub_22E9FDB3C((uint64_t *)v5, v5 + 1, v5 + 2, v5 + 3);
        v50 = *(a2 - 1);
        v51 = v5[3];
        v52 = (unint64_t)(*(uint64_t (**)(uint64_t *))(*v50 + 16))(v50) >> 32;
        result = (*(uint64_t (**)(uint64_t *))(*v51 + 16))(v51);
        if (v52 < HIDWORD(result))
        {
          *v49 = v50;
          *(a2 - 1) = v51;
          v53 = *v49;
          v54 = *v48;
          v55 = **v49;
          v56 = (unint64_t)(*(uint64_t (**)(uint64_t *))(v55 + 16))(*v49) >> 32;
          result = (*(uint64_t (**)(uint64_t *))(*v54 + 16))(v54);
          if (v56 < HIDWORD(result))
          {
            *v48 = v53;
            *v49 = v54;
            v57 = v5[1];
            v58 = (unint64_t)(*(uint64_t (**)(uint64_t *))(v55 + 16))(v53) >> 32;
            result = (*(uint64_t (**)(uint64_t *))(*v57 + 16))(v57);
            if (v58 < HIDWORD(result))
            {
              v5[1] = v53;
              v5[2] = v57;
              v59 = (uint64_t)*v5;
              v60 = (unint64_t)(*(uint64_t (**)(uint64_t *))(v55 + 16))(v53) >> 32;
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 16))(v59);
              if (v60 < HIDWORD(result))
              {
                *v5 = v53;
                v5[1] = (uint64_t *)v59;
              }
            }
          }
        }
        return result;
      default:
        if (v7 <= 191)
        {
          v61 = v5 + 1;
          v62 = v5 == v6 || v61 == v6;
          v63 = v62;
          if ((a4 & 1) != 0)
          {
            if ((v63 & 1) == 0)
            {
              v64 = 8;
              v65 = v5;
              do
              {
                v67 = *v65;
                v66 = v65[1];
                v65 = v61;
                v68 = *v66;
                v69 = (unint64_t)(*(uint64_t (**)(uint64_t *))(*v66 + 16))(v66) >> 32;
                result = (*(uint64_t (**)(uint64_t *))(*v67 + 16))(v67);
                if (v69 < HIDWORD(result))
                {
                  v70 = v64;
                  while (1)
                  {
                    *(uint64_t **)((char *)v5 + v70) = v67;
                    v71 = v70 - 8;
                    if (v70 == 8)
                      break;
                    v67 = *(uint64_t **)((char *)v5 + v70 - 16);
                    v72 = (unint64_t)(*(uint64_t (**)(uint64_t *))(v68 + 16))(v66) >> 32;
                    result = (*(uint64_t (**)(uint64_t *))(*v67 + 16))(v67);
                    v70 = v71;
                    if (v72 >= HIDWORD(result))
                    {
                      v73 = (uint64_t **)((char *)v5 + v71);
                      goto LABEL_80;
                    }
                  }
                  v73 = v5;
LABEL_80:
                  *v73 = v66;
                }
                v61 = v65 + 1;
                v64 += 8;
              }
              while (v65 + 1 != a2);
            }
          }
          else if ((v63 & 1) == 0)
          {
            do
            {
              v123 = (uint64_t)*v5;
              v122 = v5[1];
              v5 = v61;
              v124 = *v122;
              v125 = (unint64_t)(*(uint64_t (**)(uint64_t *))(*v122 + 16))(v122) >> 32;
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v123 + 16))(v123);
              if (v125 < HIDWORD(result))
              {
                v126 = (uint64_t *)v5;
                do
                {
                  *v126 = v123;
                  v123 = *(v126 - 2);
                  v127 = (unint64_t)(*(uint64_t (**)(uint64_t *))(v124 + 16))(v122) >> 32;
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v123 + 16))(v123);
                  --v126;
                }
                while (v127 < HIDWORD(result));
                *v126 = (uint64_t)v122;
              }
              v61 = v5 + 1;
            }
            while (v5 + 1 != a2);
          }
          return result;
        }
        v138 = (uint64_t *)v5;
        if (!a3)
        {
          if (v5 == v6)
            return result;
          v74 = (unint64_t)(v8 - 2) >> 1;
          v75 = v74;
          do
          {
            v76 = v75;
            if (v74 >= v75)
            {
              v77 = (2 * v75) | 1;
              v78 = (uint64_t *)&v5[v77];
              v79 = 2 * v75 + 2;
              v80 = (uint64_t *)*v78;
              if (v79 >= v8)
              {
                v87 = *v80;
              }
              else
              {
                v82 = v78 + 1;
                v81 = (uint64_t *)v78[1];
                v83 = *v80;
                v84 = v75;
                v131 = (unint64_t)(*(uint64_t (**)(uint64_t))(*v80 + 16))(*v78) >> 32;
                v134 = v78;
                v85 = *v81;
                v86 = (*(uint64_t (**)(uint64_t *))(*v81 + 16))(v81);
                v76 = v84;
                if (v131 >= HIDWORD(v86))
                  v87 = v83;
                else
                  v87 = v85;
                v78 = v134;
                v5 = (uint64_t **)v138;
                if (v131 < HIDWORD(v86))
                {
                  v80 = v81;
                  v78 = v82;
                  v77 = v79;
                }
              }
              v128 = v76;
              v88 = &v5[v76];
              v89 = *v88;
              v90 = (unint64_t)(*(uint64_t (**)(uint64_t *))(v87 + 16))(v80) >> 32;
              v91 = *v89;
              result = (*(uint64_t (**)(uint64_t *))(*v89 + 16))(v89);
              v76 = v128;
              if (v90 >= HIDWORD(result))
              {
                v135 = v91;
                v129 = v89;
                do
                {
                  v92 = v78;
                  *v88 = v80;
                  if (v74 < v77)
                    break;
                  v93 = (2 * v77) | 1;
                  v78 = &v138[v93];
                  v94 = 2 * v77 + 2;
                  v80 = (uint64_t *)*v78;
                  if (v94 >= v8)
                  {
                    v99 = *v80;
                    v77 = (2 * v77) | 1;
                  }
                  else
                  {
                    v95 = (uint64_t *)v78[1];
                    v96 = *v80;
                    v132 = (unint64_t)(*(uint64_t (**)(uint64_t))(*v80 + 16))(*v78) >> 32;
                    v97 = *v95;
                    v98 = (*(uint64_t (**)(uint64_t *))(*v95 + 16))(v95);
                    v99 = v132 >= HIDWORD(v98) ? v96 : v97;
                    v74 = (unint64_t)(v8 - 2) >> 1;
                    v89 = v129;
                    if (v132 >= HIDWORD(v98))
                    {
                      v77 = v93;
                    }
                    else
                    {
                      v80 = v95;
                      ++v78;
                      v77 = v94;
                    }
                  }
                  v100 = (unint64_t)(*(uint64_t (**)(uint64_t *))(v99 + 16))(v80) >> 32;
                  result = (*(uint64_t (**)(uint64_t *))(v135 + 16))(v89);
                  v88 = (uint64_t **)v92;
                }
                while (v100 >= HIDWORD(result));
                *v92 = (uint64_t)v89;
                v5 = (uint64_t **)v138;
                v76 = v128;
              }
            }
            v75 = v76 - 1;
          }
          while (v76);
          while (2)
          {
            v101 = 0;
            v136 = (uint64_t)*v5;
            v102 = (uint64_t *)v5;
            do
            {
              v103 = &v102[v101];
              v106 = v103[1];
              v104 = v103 + 1;
              v105 = v106;
              v107 = (2 * v101) | 1;
              v108 = 2 * v101 + 2;
              if (v108 < v8)
              {
                v109 = v104[1];
                v110 = (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v105 + 16))(v105) >> 32;
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v109 + 16))(v109);
                if (v110 < HIDWORD(result))
                {
                  v105 = v109;
                  ++v104;
                  v107 = v108;
                }
              }
              *v102 = v105;
              v102 = v104;
              v101 = v107;
            }
            while (v107 <= (uint64_t)((unint64_t)(v8 - 2) >> 1));
            v111 = (uint64_t *)(a2 - 1);
            v62 = v104 == (uint64_t *)--a2;
            if (!v62)
            {
              *v104 = *v111;
              *v111 = v136;
              v5 = (uint64_t **)v138;
              v112 = (char *)v104 - (char *)v138 + 8;
              if (v112 >= 9)
              {
                v113 = (((unint64_t)v112 >> 3) - 2) >> 1;
                v114 = &v138[v113];
                v115 = *v114;
                v116 = *v104;
                v117 = (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*v114 + 16))(*v114) >> 32;
                v118 = *(_QWORD *)v116;
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v116 + 16))(v116);
                if (v117 < HIDWORD(result))
                {
                  do
                  {
                    v119 = v114;
                    *v104 = v115;
                    if (!v113)
                      break;
                    v113 = (v113 - 1) >> 1;
                    v114 = &v138[v113];
                    v115 = *v114;
                    v120 = (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*v114 + 16))(*v114) >> 32;
                    result = (*(uint64_t (**)(uint64_t))(v118 + 16))(v116);
                    v104 = v119;
                  }
                  while (v120 < HIDWORD(result));
                  *v119 = v116;
LABEL_120:
                  v5 = (uint64_t **)v138;
                }
              }
              if (v8-- <= 2)
                return result;
              continue;
            }
            break;
          }
          *v104 = v136;
          goto LABEL_120;
        }
        v9 = (unint64_t)v8 >> 1;
        v10 = (uint64_t *)&v5[(unint64_t)v8 >> 1];
        if ((unint64_t)v7 < 0x401)
        {
          sub_22E9FD72C(v10, v5, v130);
        }
        else
        {
          sub_22E9FD72C((uint64_t *)v5, (uint64_t **)v10, v130);
          sub_22E9FD72C((uint64_t *)v5 + 1, (uint64_t **)v10 - 1, a2 - 2);
          sub_22E9FD72C((uint64_t *)v5 + 2, &v5[v9 + 1], a2 - 3);
          sub_22E9FD72C(v10 - 1, (uint64_t **)v10, &v5[v9 + 1]);
          v11 = (uint64_t)*v5;
          *v5 = (uint64_t *)*v10;
          *v10 = v11;
        }
        --a3;
        v12 = (uint64_t)*v5;
        v13 = **v5;
        if ((a4 & 1) == 0)
        {
          v15 = a3;
          v16 = (unint64_t)(*(uint64_t (**)(_QWORD))(**(v5 - 1) + 16))(*(v5 - 1)) >> 32;
          v17 = *(uint64_t (**)(uint64_t))(v13 + 16);
          v18 = v17(v12);
          v19 = HIDWORD(v18);
          v20 = v16 >= HIDWORD(v18);
          a3 = v15;
          if (!v20)
          {
            v14 = v17(v12);
            goto LABEL_13;
          }
          result = (*(uint64_t (**)(uint64_t *))(**v130 + 16))(*v130);
          if (v19 >= HIDWORD(result))
          {
            v36 = v5 + 1;
            do
            {
              v5 = v36;
              if (v36 >= v6)
                break;
              ++v36;
              result = (*(uint64_t (**)(uint64_t *))(**v5 + 16))(*v5);
            }
            while (v19 >= HIDWORD(result));
          }
          else
          {
            do
            {
              v35 = v5[1];
              ++v5;
              result = (*(uint64_t (**)(uint64_t *))(*v35 + 16))(v35);
            }
            while (v19 >= HIDWORD(result));
          }
          v37 = (uint64_t *)v6;
          if (v5 < v6)
          {
            v37 = (uint64_t *)v6;
            do
            {
              v38 = *--v37;
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
            }
            while (v19 < HIDWORD(result));
          }
          if (v5 < (uint64_t **)v37)
          {
            v39 = (uint64_t)*v5;
            v40 = (uint64_t *)*v37;
            do
            {
              *v5 = v40;
              *v37 = v39;
              v41 = (unint64_t)(*(uint64_t (**)(uint64_t))(v13 + 16))(v12) >> 32;
              do
              {
                v42 = v5[1];
                ++v5;
                v39 = (uint64_t)v42;
              }
              while (v41 >= (unint64_t)(*(uint64_t (**)(uint64_t *))(*v42 + 16))(v42) >> 32);
              do
              {
                v43 = (uint64_t *)*--v37;
                v40 = v43;
                result = (*(uint64_t (**)(uint64_t *))(*v43 + 16))(v43);
              }
              while (v41 < HIDWORD(result));
            }
            while (v5 < (uint64_t **)v37);
          }
          v44 = (uint64_t *)(v5 - 1);
          if (v5 - 1 != (uint64_t **)v138)
            *v138 = *v44;
          a4 = 0;
          *v44 = v12;
          continue;
        }
        v14 = (*(uint64_t (**)(uint64_t))(v13 + 16))(v12);
LABEL_13:
        v21 = 0;
        v22 = HIDWORD(v14);
        do
          v23 = v5[++v21];
        while ((unint64_t)(*(uint64_t (**)(uint64_t *))(*v23 + 16))(v23) >> 32 < v22);
        v24 = &v5[v21];
        v25 = v6;
        if (v21 == 1)
        {
          v25 = v6;
          do
          {
            if (v24 >= v25)
              break;
            v27 = (uint64_t)*--v25;
          }
          while ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27) >> 32 >= v22);
        }
        else
        {
          do
            v26 = (uint64_t)*--v25;
          while ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26) >> 32 >= v22);
        }
        if (v24 >= v25)
        {
          v5 = (uint64_t **)((char *)v5 + v21 * 8);
        }
        else
        {
          v28 = *v25;
          v5 = (uint64_t **)((char *)v5 + v21 * 8);
          v29 = v25;
          do
          {
            *v5 = v28;
            *v29 = v23;
            v30 = (unint64_t)(*(uint64_t (**)(uint64_t))(v13 + 16))(v12) >> 32;
            do
            {
              v31 = v5[1];
              ++v5;
              v23 = v31;
            }
            while ((unint64_t)(*(uint64_t (**)(uint64_t *))(*v31 + 16))(v31) >> 32 < v30);
            do
            {
              v32 = *--v29;
              v28 = v32;
            }
            while ((unint64_t)(*(uint64_t (**)(uint64_t *))(*v32 + 16))(v32) >> 32 >= v30);
          }
          while (v5 < v29);
        }
        v33 = (uint64_t *)(v5 - 1);
        if (v5 - 1 != (uint64_t **)v138)
          *v138 = *v33;
        *v33 = v12;
        v6 = a2;
        if (v24 < v25)
        {
LABEL_34:
          result = sub_22E9FCCA4(v138, v5 - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v34 = sub_22E9FD864((uint64_t)v138, v5 - 1);
        result = sub_22E9FD864((uint64_t)v5, a2);
        if (!(_DWORD)result)
        {
          if (v34)
            continue;
          goto LABEL_34;
        }
        a2 = v5 - 1;
        v5 = (uint64_t **)v138;
        if (!v34)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_22E9FD72C(uint64_t *a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;

  v6 = *a2;
  v7 = (uint64_t *)*a1;
  v8 = (unint64_t)(*(uint64_t (**)(uint64_t *))(**a2 + 16))(*a2) >> 32;
  v9 = *v7;
  v10 = (unint64_t)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7) >> 32;
  v11 = *a3;
  result = (*(uint64_t (**)(uint64_t *))(**a3 + 16))(*a3);
  if (v8 >= v10)
  {
    if (HIDWORD(result) < v8)
    {
      *a2 = v11;
      *a3 = v6;
      v13 = *a2;
      v14 = (uint64_t *)*a1;
      v15 = (unint64_t)(*(uint64_t (**)(uint64_t *))(**a2 + 16))(*a2) >> 32;
      result = (*(uint64_t (**)(uint64_t *))(*v14 + 16))(v14);
      if (v15 < HIDWORD(result))
      {
        *a1 = (uint64_t)v13;
        *a2 = v14;
      }
    }
  }
  else
  {
    if (HIDWORD(result) >= v8)
    {
      *a1 = (uint64_t)v6;
      *a2 = v7;
      v16 = *a3;
      v17 = (unint64_t)(*(uint64_t (**)(uint64_t *))(**a3 + 16))(*a3) >> 32;
      result = (*(uint64_t (**)(uint64_t *))(v9 + 16))(v7);
      if (v17 >= HIDWORD(result))
        return result;
      *a2 = v16;
    }
    else
    {
      *a1 = (uint64_t)v11;
    }
    *a3 = v7;
  }
  return result;
}

BOOL sub_22E9FD864(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t **v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v4 = ((uint64_t)a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (uint64_t)*(a2 - 1);
      v7 = *(_QWORD *)a1;
      v8 = (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6) >> 32;
      if (v8 < (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7) >> 32)
      {
        *(_QWORD *)a1 = v6;
        *(a2 - 1) = (uint64_t *)v7;
      }
      return 1;
    case 3:
      sub_22E9FD72C((uint64_t *)a1, (uint64_t **)(a1 + 8), a2 - 1);
      return 1;
    case 4:
      sub_22E9FDB3C((uint64_t *)a1, (uint64_t **)(a1 + 8), (uint64_t **)(a1 + 16), a2 - 1);
      return 1;
    case 5:
      v22 = (uint64_t *)(a1 + 16);
      v23 = (uint64_t **)(a1 + 24);
      sub_22E9FDB3C((uint64_t *)a1, (uint64_t **)(a1 + 8), (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 24));
      v24 = *(a2 - 1);
      v25 = *(uint64_t **)(a1 + 24);
      v26 = (unint64_t)(*(uint64_t (**)(uint64_t *))(*v24 + 16))(v24) >> 32;
      if (v26 < (unint64_t)(*(uint64_t (**)(uint64_t *))(*v25 + 16))(v25) >> 32)
      {
        *v23 = v24;
        *(a2 - 1) = v25;
        v27 = *v23;
        v28 = (uint64_t *)*v22;
        v29 = **v23;
        v30 = (unint64_t)(*(uint64_t (**)(uint64_t *))(v29 + 16))(*v23) >> 32;
        if (v30 < (unint64_t)(*(uint64_t (**)(uint64_t *))(*v28 + 16))(v28) >> 32)
        {
          *v22 = (uint64_t)v27;
          *v23 = v28;
          v31 = *(_QWORD *)(a1 + 8);
          v32 = (unint64_t)(*(uint64_t (**)(uint64_t *))(v29 + 16))(v27) >> 32;
          if (v32 < (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31) >> 32)
          {
            *(_QWORD *)(a1 + 8) = v27;
            *(_QWORD *)(a1 + 16) = v31;
            v33 = *(_QWORD *)a1;
            v34 = (unint64_t)(*(uint64_t (**)(uint64_t *))(v29 + 16))(v27) >> 32;
            if (v34 < (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33) >> 32)
            {
              *(_QWORD *)a1 = v27;
              *(_QWORD *)(a1 + 8) = v33;
            }
          }
        }
      }
      return 1;
    default:
      v9 = (uint64_t *)(a1 + 16);
      sub_22E9FD72C((uint64_t *)a1, (uint64_t **)(a1 + 8), (uint64_t **)(a1 + 16));
      v10 = (uint64_t **)(a1 + 24);
      if ((uint64_t **)(a1 + 24) == a2)
        return 1;
      v11 = 0;
      v12 = 24;
      break;
  }
  while (1)
  {
    v13 = *v10;
    v14 = *v9;
    v15 = **v10;
    v16 = (unint64_t)(*(uint64_t (**)(uint64_t *))(v15 + 16))(*v10) >> 32;
    if (v16 < (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14) >> 32)
    {
      v17 = v12;
      while (1)
      {
        *(_QWORD *)(a1 + v17) = v14;
        v18 = v17 - 8;
        if (v17 == 8)
          break;
        v14 = *(_QWORD *)(a1 + v17 - 16);
        v19 = (unint64_t)(*(uint64_t (**)(uint64_t *))(v15 + 16))(v13) >> 32;
        v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        v17 = v18;
        if (v19 >= HIDWORD(v20))
        {
          v21 = (uint64_t **)(a1 + v18);
          goto LABEL_13;
        }
      }
      v21 = (uint64_t **)a1;
LABEL_13:
      *v21 = v13;
      if (++v11 == 8)
        return v10 + 1 == a2;
    }
    v9 = (uint64_t *)v10;
    v12 += 8;
    if (++v10 == a2)
      return 1;
  }
}

uint64_t sub_22E9FDB3C(uint64_t *a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t result;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;

  sub_22E9FD72C(a1, a2, a3);
  v8 = *a4;
  v9 = *a3;
  v10 = (unint64_t)(*(uint64_t (**)(uint64_t *))(**a4 + 16))(*a4) >> 32;
  result = (*(uint64_t (**)(uint64_t *))(*v9 + 16))(v9);
  if (v10 < HIDWORD(result))
  {
    *a3 = v8;
    *a4 = v9;
    v12 = *a3;
    v13 = *a2;
    v14 = (unint64_t)(*(uint64_t (**)(uint64_t *))(**a3 + 16))(*a3) >> 32;
    result = (*(uint64_t (**)(uint64_t *))(*v13 + 16))(v13);
    if (v14 < HIDWORD(result))
    {
      *a2 = v12;
      *a3 = v13;
      v15 = *a2;
      v16 = *a1;
      v17 = (unint64_t)(*(uint64_t (**)(uint64_t *))(**a2 + 16))(*a2) >> 32;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
      if (v17 < HIDWORD(result))
      {
        *a1 = (uint64_t)v15;
        *a2 = (uint64_t *)v16;
      }
    }
  }
  return result;
}

uint64_t sub_22E9FDC40(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[64];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v14;
    do
    {
      v10 = *(_QWORD *)(a1 + v8 + 8);
      if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *(_QWORD *)v9 = v10;
        *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
        v9 += 16;
      }
      v8 += 16;
    }
    while (v8 != 64);
    if (a2 > 4)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22F31C1DC(a1, (uint64_t)v14, (uint64_t)v9);
  }
  else
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F31C1DC(a1, (uint64_t)v6, (uint64_t)v6 + 16 * v7);
    return llvm::deallocate_buffer(v6, (void *)(16 * v7));
  }
}

uint64_t sub_22E9FDDBC(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t *a4, unint64_t a5, unsigned int a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  void *__p[2];
  char v24;
  unsigned int v25[24];

  v8 = a1[11];
  v9 = *(_QWORD *)(v8 + 1480);
  if (v9)
  {
    v14 = *(_QWORD *)(v9 + 48);
    v15 = sub_22E3CD3D4(v8 + 2032, 32, 3);
    v16 = a1[11];
    *(_QWORD *)v25 = 0;
    sub_22EFF69F0(v15, v16, v9, 0, v14, 1, a3, v25, 0);
    sub_22EB4E494((uint64_t)a1, a3, v9, 1, v17, v18, v19, v20);
    LOWORD(v22) = 1;
    return sub_22EB1CFA4((uint64_t)a1, a2, v15, a3, a4, a5, a6, 0, v22);
  }
  else
  {
    sub_22E8FCA40(a1, a3, 0x13B9u, 0, (uint64_t)v25);
    sub_22F31C2A4((uint64_t)a1, (uint64_t)__p);
    sub_22F2F3734((uint64_t)v25, __p);
    if (v24 < 0)
      operator delete(__p[0]);
    sub_22E903BEC(v25);
    return 1;
  }
}

uint64_t sub_22E9FDEF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  unsigned int v11;

  v4 = *(_QWORD *)(a2 + 8);
  v2 = a2 + 8;
  v3 = v4;
  if ((v4 & 4) != 0)
  {
    v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    v2 = *(_QWORD *)v6;
    v5 = *(_QWORD *)v6 + 8 * *(unsigned int *)(v6 + 8);
  }
  else
  {
    v5 = v2 + 8 * (v3 > 7);
  }
  if (v2 == v5)
    return 2;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  do
  {
    switch(*(_WORD *)(*(_QWORD *)(*(_QWORD *)v2 + 72) + 8))
    {
      case '7':
        v10 = 1;
        break;
      case ':':
        v9 = 1;
        break;
      case ';':
        v7 = 1;
        break;
      case '<':
        v8 = 1;
        break;
      default:
        break;
    }
    v2 += 8;
  }
  while (v2 != v5);
  if ((v7 & 1) != 0)
    v11 = 3;
  else
    v11 = 0;
  if ((v10 & 1) == 0)
    v11 = 2;
  if ((v9 & 1) != 0)
    v11 = 1;
  if ((v8 & 1) != 0)
    return 4;
  else
    return v11;
}

uint64_t sub_22E9FDFC4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    return 2;
  if (sub_22E9FE0BC(a2))
    return 4;
  if (sub_22E462B18(a2))
    return 1;
  if ((*(_BYTE *)(a2 + 29) & 1) == 0 || (sub_22EFC8E88(a2), v7 = *((unsigned int *)v6 + 2), !(_DWORD)v7))
  {
LABEL_14:
    if ((sub_22E9FE11C(a2, a3) & 1) == 0)
    {
      if ((*(_BYTE *)(a2 + 29) & 2) != 0)
      {
        if (!a3)
          return 3;
      }
      else if (!sub_22E692064(a2) && (a3 & 1) == 0)
      {
        return 3;
      }
    }
    return 2;
  }
  v8 = *v6;
  v9 = 8 * v7;
  while (*(_WORD *)(*(_QWORD *)v8 + 32) != 130
       || ((*(unsigned __int16 *)(*(_QWORD *)v8 + 32) | (*(unsigned __int8 *)(*(_QWORD *)v8 + 34) << 16)) & 0x40000) != 0
       && a3)
  {
    v8 += 8;
    v9 -= 8;
    if (!v9)
      goto LABEL_14;
  }
  if (sub_22E9FE11C(a2, a3))
    return 3;
  else
    return 0;
}

BOOL sub_22E9FE0BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 135)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22E9FE11C(uint64_t a1, int a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v4 = *((unsigned int *)v3 + 2);
  if (!(_DWORD)v4)
    return 0;
  v5 = *v3;
  v6 = 8 * v4;
  result = 1;
  while (*(_WORD *)(*(_QWORD *)v5 + 32) != 134
       || ((*(unsigned __int16 *)(*(_QWORD *)v5 + 32) | (*(unsigned __int8 *)(*(_QWORD *)v5 + 34) << 16)) & 0x40000) != 0
       && a2)
  {
    v5 += 8;
    v6 -= 8;
    if (!v6)
      return 0;
  }
  return result;
}

uint64_t sub_22E9FE18C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;

  if (sub_22E466F1C(a2))
    return 3;
  if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x40 && (*(_BYTE *)(a2 + 97) & 0x80) != 0
    || (v4 = *(_QWORD *)(a2 + 48), (v4 & 1) != 0)
    || (*(_BYTE *)((v4 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) != 0)
  {
    if (sub_22E466EBC(a2))
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 2;
      sub_22EFC8E88(a2);
      v6 = *(uint64_t **)v5;
      v7 = *(unsigned int *)(v5 + 8);
      i = *(uint64_t **)v5;
      if ((_DWORD)v7)
      {
        v9 = 8 * v7;
        for (i = *(uint64_t **)v5; *(_WORD *)(*i + 32) != 129; ++i)
        {
          v9 -= 8;
          if (!v9)
            return 2;
        }
      }
      if (i == &v6[v7])
        return 2;
      do
      {
        v10 = *v6++;
        v11 = *(unsigned __int16 *)(v10 + 32) | (*(unsigned __int8 *)(v10 + 34) << 16);
      }
      while (*(_WORD *)(v10 + 32) != 129);
      if ((v11 & 0x40000) != 0)
        return 2;
    }
  }
  if (sub_22E466E5C(a2)
    || sub_22E466EBC(a2)
    || sub_22E469D10(a2)
    || sub_22F1151E0(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0))
    || sub_22F115220(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0)))
  {
    return 0;
  }
  v12 = *(_QWORD *)(a2 + 16);
  v13 = v12 & 0xFFFFFFFFFFFFFFF8;
  if ((v12 & 4) != 0)
    v13 = *(_QWORD *)v13;
  result = 1;
  if (v13 && (*(_WORD *)(v13 + 8) & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    v14 = sub_22E9FDFC4(1, v13 - 72, 0);
    if (v14 > 3)
      return 1;
    else
      return dword_22F462DE0[v14];
  }
  return result;
}

uint64_t sub_22E9FE318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  __int16 v10;
  uint64_t v11;

  v5 = sub_22E9FDFC4(a1, a2, 0);
  v6 = v5;
  v7 = sub_22E9FDFC4(v5, a3, 0);
  v8 = 0;
  if (v6 != 4 && v7 != 4)
  {
    if (v7 == 1 && v6 < 2)
      return 0;
    if (v7 == 3)
      return 2;
    if (v7 == v6 || v6 == 2 && v7 == 1 || v6 == 1 && !v7)
      return 4;
    if (v6 != 3)
    {
      return 0;
    }
    else
    {
      v10 = *(_WORD *)(*(_QWORD *)(a1 + 72) + 96);
      v8 = 3;
      if ((v10 & 0x80) == 0 || v7)
      {
        v11 = v10 & 0x80;
        if ((v7 - 1) < 2 && v11 == 0)
          return 3;
        else
          return 1;
      }
    }
  }
  return v8;
}

uint64_t sub_22E9FE3F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unsigned int v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  unint64_t v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  _BOOL8 v74;
  unint64_t v75;
  int v76;
  _BOOL4 v78;
  _BOOL4 v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BOOL4 v95;
  unsigned int v96;
  __int128 v97;
  uint64_t v98;
  int v99;
  __int16 v100;
  char v101;
  int v102;
  int v103;
  char v104;
  void *v105;
  uint64_t v106;
  _QWORD v107[18];

  v107[16] = *MEMORY[0x24BDAC8D0];
  v11 = a4 + 72;
  v12 = *(_WORD *)(a4 + 80) & 0x7F;
  v13 = -40;
  if (v12 > 0x46)
  {
    if (v12 == 83)
      goto LABEL_17;
    if (v12 == 71)
    {
      v13 = -56;
      goto LABEL_17;
    }
    if (v12 != 81)
    {
LABEL_12:
      v14 = -48;
      if (v12 - 33 < 5)
        v14 = -64;
      if (v12 - 52 >= 6)
        v13 = v14;
      else
        v13 = -72;
    }
  }
  else
  {
    if (v12 > 0x18)
      goto LABEL_11;
    if (v12 == 16)
    {
LABEL_4:
      v13 = -48;
      goto LABEL_17;
    }
    if (((1 << v12) & 0x1066) == 0)
    {
      if (v12 == 24)
        goto LABEL_4;
LABEL_11:
      if (v12 == 70)
      {
        v13 = -64;
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
LABEL_17:
  v15 = *(_QWORD *)(v11 + v13 + 16);
  v16 = v15 & 0xFFFFFFFFFFFFFFF8;
  if ((v15 & 4) != 0)
    v16 = *(_QWORD *)(v16 + 8);
  v17 = -40;
  if ((*(_WORD *)(a4 + 80) & 0x7Fu) > 0x46)
  {
    if (v12 == 83)
      goto LABEL_35;
    if (v12 == 71)
    {
      v17 = -56;
      goto LABEL_35;
    }
    if (v12 != 81)
    {
LABEL_30:
      v18 = v12 - 52;
      v19 = v12 - 33 >= 5;
      v20 = -48;
      if (!v19)
        v20 = -64;
      if (v18 >= 6)
        v17 = v20;
      else
        v17 = -72;
    }
  }
  else
  {
    if (v12 > 0x18)
      goto LABEL_29;
    if (v12 == 16)
    {
LABEL_22:
      v17 = -48;
      goto LABEL_35;
    }
    if (((1 << v12) & 0x1066) == 0)
    {
      if (v12 == 24)
        goto LABEL_22;
LABEL_29:
      if (v12 == 70)
      {
        v17 = -64;
        goto LABEL_35;
      }
      goto LABEL_30;
    }
  }
LABEL_35:
  v21 = *(_QWORD *)(v11 + v17 + 16);
  v22 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
  if ((v21 & 4) != 0)
    v22 = (_QWORD *)*v22;
  v23 = v22 == 0;
  if (v22)
    v24 = v22 - 8;
  else
    v24 = 0;
  v25 = v24 + 8;
  if (v23)
    v26 = 0;
  else
    v26 = v25;
  v27 = sub_22F295B40(a4);
  v28 = sub_22E466E5C(a4);
  if (!v28)
  {
    if (!v27)
    {
      v37 = 0;
      goto LABEL_60;
    }
    goto LABEL_53;
  }
  sub_22EFC8E88(a4);
  v30 = *v29;
  v31 = *((unsigned int *)v29 + 2);
  if ((_DWORD)v31 && *(_WORD *)(*v30 + 32) != 130)
  {
    v32 = 8 * v31 - 8;
    v33 = *v29;
    do
    {
      v34 = v33[1];
      ++v33;
      v32 -= 8;
    }
    while (*(_WORD *)(v34 + 32) != 130);
  }
  do
  {
    v35 = *v30++;
    v36 = *(unsigned __int16 *)(v35 + 32) | (*(unsigned __int8 *)(v35 + 34) << 16);
  }
  while (*(_WORD *)(v35 + 32) != 130);
  v37 = (v36 & 0x40000) == 0;
  if ((v36 & 0x40000) != 0 && v27)
  {
LABEL_53:
    sub_22EFC8E88(a4);
    v39 = *v38;
    v40 = *((unsigned int *)v38 + 2);
    if ((_DWORD)v40 && *(_WORD *)(*v39 + 32) != 134)
    {
      v41 = 8 * v40 - 8;
      v42 = *v38;
      do
      {
        v43 = v42[1];
        ++v42;
        v41 -= 8;
      }
      while (*(_WORD *)(v43 + 32) != 134);
    }
    do
    {
      v44 = *v39++;
      v45 = *(unsigned __int16 *)(v44 + 32) | (*(unsigned __int8 *)(v44 + 34) << 16);
    }
    while (*(_WORD *)(v44 + 32) != 134);
    v37 = (v45 & 0x40000) == 0;
  }
LABEL_60:
  v95 = v27;
  v46 = 0;
  if ((_QWORD *)v16 != v26 || v37)
    return v46;
  LOBYTE(v103) = 0;
  v104 = 0;
  if (a4)
    v47 = v11;
  else
    v47 = 0;
  v92 = *(_QWORD *)(a1 + 3200);
  v93 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 3200) = 0;
  v91 = *(_QWORD *)(a1 + 10288);
  v89 = *(_DWORD *)(a1 + 2192);
  v90 = *(_DWORD *)(a1 + 1944);
  *(_QWORD *)(a1 + 216) = v47;
  *(_QWORD *)(a1 + 10288) = 0;
  *(_DWORD *)(a1 + 1944) = *(_DWORD *)(a1 + 1904);
  *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a1 + 1960);
  v105 = v107;
  v106 = 0x1000000000;
  v48 = sub_22E46A3A0(a2);
  if (v48 != v49)
  {
    v50 = v48;
    v51 = v49;
    v52 = v48;
    do
    {
      if ((*(_BYTE *)(v52 + 12) & 1) == 0)
      {
        v53 = v106;
        if (v106 >= (unint64_t)HIDWORD(v106))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v53 = v106;
        }
        *((_QWORD *)v105 + v53) = v50;
        LODWORD(v106) = v106 + 1;
      }
      v52 += 24;
      v50 += 24;
    }
    while (v52 != v51);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 0x800) != 0)
  {
    v60 = v106;
    if (!(_DWORD)v106)
      goto LABEL_97;
LABEL_81:
    v61 = (char *)v105;
    v62 = 8 * v60;
    while (1)
    {
      v63 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)v61 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v63 + 8) & 0xF) != 0)
        v63 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(*(_QWORD *)v61 + 16));
      v64 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v64)
      {
        if (*(_BYTE *)(v64 + 16) == 45)
        {
          v65 = sub_22F114198(*(_QWORD *)(v64 + 24));
          v66 = sub_22EC6602C(a1, v65, a3, a5, 0, 0, 0, 0, 0, 0, 0, 0);
          if ((v66 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v67 = sub_22E9FDFC4(v66, v66 & 0xFFFFFFFFFFFFFFF8, 0);
            v102 = v67;
            if (v104)
            {
              if (v103 == 3)
              {
                v103 = v67;
              }
              else if (v67 != 3 && v103 != v67)
              {
                goto LABEL_133;
              }
            }
            else
            {
              v103 = v67;
              v104 = 1;
            }
          }
        }
      }
      v61 += 8;
      v62 -= 8;
      if (!v62)
        goto LABEL_97;
    }
  }
  v54 = sub_22E483108(a2);
  v56 = v55;
  v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - v54) >> 3);
  v58 = v106;
  if (v57 + v106 > HIDWORD(v106))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v58 = v106;
  }
  if (v54 != v56)
  {
    v59 = (unint64_t *)((char *)v105 + 8 * v58);
    do
    {
      *v59++ = v54;
      v54 += 24;
    }
    while (v54 != v56);
  }
  v60 = v58 + v57;
  LODWORD(v106) = v60;
  if (v60)
    goto LABEL_81;
LABEL_97:
  v69 = sub_22EFC3B90(a2);
  if (v69)
  {
    v70 = v69;
    v71 = *(_DWORD *)(v69 + 28);
LABEL_99:
    if ((v71 & 0x80) == 0)
    {
      v72 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(*(_QWORD *)(a1 + 88), *(_QWORD *)(v70 + 48)) & 0xFFFFFFFFFFFFFFF0)
                                  + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v72)
      {
        if (*(_BYTE *)(v72 + 16) == 45)
        {
          v73 = sub_22F114198(*(_QWORD *)(v72 + 24));
          v74 = (_DWORD)a5 && (unint64_t)((*(_BYTE *)(v70 + 68) & 2) == 0);
          v75 = sub_22EC6602C(a1, v73, a3, v74, 0, 0, 0, 0, 0, 0, 0, 0);
          if ((v75 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v76 = sub_22E9FDFC4(v75, v75 & 0xFFFFFFFFFFFFFFF8, 0);
            v102 = v76;
            if (!v104)
            {
              v103 = v76;
              v104 = 1;
              goto LABEL_115;
            }
            if (v103 == 3)
            {
              v103 = v76;
              goto LABEL_115;
            }
            if (v76 != 3 && v103 != v76)
            {
LABEL_133:
              if (a6)
              {
                sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x1622u, 0, (uint64_t)&v97);
                v96 = a3;
                v85 = sub_22E89519C((uint64_t)&v97, &v96);
                v86 = sub_22E8900C4(v85, &v103);
                sub_22E8900C4(v86, &v102);
                sub_22E903BEC((unsigned int *)&v97);
              }
              v87 = *(_QWORD *)(a1 + 88);
              v97 = 0uLL;
              v99 = 0;
              v98 = 0;
              v101 = 120;
              v100 = 0;
              v88 = sub_22F382324(v87, &v97);
              sub_22EFCA95C(a4, v88);
              v46 = 1;
              goto LABEL_128;
            }
          }
        }
      }
    }
LABEL_115:
    while (1)
    {
      v70 = *(_QWORD *)(v70 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v70)
        break;
      v71 = *(_DWORD *)(v70 + 28);
      if ((v71 & 0x7Fu) - 49 < 3)
        goto LABEL_99;
    }
  }
  v78 = v104 != 0;
  if (v103)
    v79 = 0;
  else
    v79 = v104 != 0;
  if (v103 != 2)
    v78 = 0;
  if (!v28 && !v78)
  {
    v81 = *(_QWORD *)(a1 + 88);
    v97 = 0uLL;
    v99 = 0;
    v98 = 0;
    v101 = 120;
    v100 = 0;
    v82 = sub_22F381CB8(v81, &v97);
    sub_22EFCA95C(a4, v82);
  }
  if (!v79 && !v95)
  {
    v83 = *(_QWORD *)(a1 + 88);
    v97 = 0uLL;
    v99 = 0;
    v98 = 0;
    v101 = 120;
    v100 = 0;
    v84 = sub_22F38218C(v83, &v97);
    sub_22EFCA95C(a4, v84);
  }
  v46 = 0;
LABEL_128:
  if (v105 != v107)
    free(v105);
  if (v93)
  {
    *(_QWORD *)(a1 + 216) = v93;
    *(_QWORD *)(a1 + 3200) = v92;
    *(_QWORD *)(a1 + 10288) = v91;
    *(_DWORD *)(a1 + 1944) = v90;
    *(_DWORD *)(a1 + 2192) = v89;
  }
  return v46;
}

uint64_t sub_22E9FEBC4(uint64_t a1, unsigned int a2, unint64_t a3)
{
  uint64_t v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;

  if ((sub_22EFBF86C(a3, &v32, 0) & 1) != 0)
    goto LABEL_13;
  v6 = *(_QWORD *)(a3 + 144) & 6;
  v7 = (_DWORD *)(*(_QWORD *)(a3 + 144) & 0xFFFFFFFFFFFFFFF8);
  if (v6 != 4 || v7 == 0)
  {
    if (v6 != 2 || v7 == 0)
      goto LABEL_13;
  }
  else
  {
    v7 += 4;
  }
  if (((((*v7 >> 1) & 3) + 1) & 0xFFFFFFFD) != 0)
    sub_22EE44C50(a1, a2, *(_QWORD *)(a3 + 112), 0, 0, 0);
LABEL_13:
  if ((*(_BYTE *)(a3 + 82) & 0x80) == 0)
  {
    result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a3 + 64))(a3);
    if (!result)
      return result;
    if (*(_BYTE *)result != 8 || *(_DWORD *)result > 0xFFu)
      return 0;
    v11 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
    v12 = v11 && *(_BYTE *)(v11 + 16) == 26;
    if ((v12
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
       && (v11 = sub_22F10CF48(v11)) != 0)
      && (*(_DWORD *)(v11 + 20) & 0x3FFFC0) != 0)
    {
      return 0;
    }
    v13 = a3 + 72;
    v14 = *(_WORD *)(a3 + 80) & 0x7F;
    v15 = -40;
    if (v14 > 0x46)
    {
      if (v14 == 83)
        goto LABEL_40;
      if (v14 == 71)
      {
        v15 = -56;
        goto LABEL_40;
      }
      if (v14 != 81)
      {
LABEL_35:
        v16 = v14 - 52;
        v17 = v14 - 33 >= 5;
        v18 = -48;
        if (!v17)
          v18 = -64;
        if (v16 >= 6)
          v15 = v18;
        else
          v15 = -72;
      }
    }
    else
    {
      if (v14 > 0x18)
        goto LABEL_34;
      if (v14 == 16)
      {
LABEL_27:
        v15 = -48;
        goto LABEL_40;
      }
      if (((1 << v14) & 0x1066) == 0)
      {
        if (v14 == 24)
          goto LABEL_27;
LABEL_34:
        if (v14 == 70)
        {
          v15 = -64;
          goto LABEL_40;
        }
        goto LABEL_35;
      }
    }
LABEL_40:
    v19 = *(_QWORD *)(v13 + v15 + 16);
    v20 = (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF8);
    if ((v19 & 4) != 0)
      v20 = (_QWORD *)*v20;
    if (v20)
      v21 = (uint64_t)(v20 - 8);
    else
      v21 = 0;
    if (!sub_22E463414(v21))
    {
      v22 = *(_WORD *)(a3 + 80) & 0x7F;
      v23 = -40;
      if (v22 > 0x46)
      {
        if (v22 == 83)
          goto LABEL_62;
        if (v22 == 71)
        {
          v23 = -56;
          goto LABEL_62;
        }
        if (v22 != 81)
        {
LABEL_57:
          v24 = v22 - 52;
          v17 = v22 - 33 >= 5;
          v25 = -48;
          if (!v17)
            v25 = -64;
          if (v24 >= 6)
            v23 = v25;
          else
            v23 = -72;
        }
      }
      else
      {
        if (v22 > 0x18)
          goto LABEL_56;
        if (v22 == 16)
        {
LABEL_49:
          v23 = -48;
          goto LABEL_62;
        }
        if (((1 << v22) & 0x1066) == 0)
        {
          if (v22 == 24)
            goto LABEL_49;
LABEL_56:
          if (v22 == 70)
          {
            v23 = -64;
            goto LABEL_62;
          }
          goto LABEL_57;
        }
      }
LABEL_62:
      v26 = *(_QWORD *)(v13 + v23 + 16);
      v27 = (_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF8);
      if ((v26 & 4) != 0)
        v27 = (_QWORD *)*v27;
      if (v27)
        v28 = v27 - 8;
      else
        v28 = 0;
      if ((v28[9] & 0xE000) != 0x4000)
      {
        v29 = sub_22EFD7ED0(a3);
        v30 = sub_22EFD7ED0(a3) + 8 * ((*(_QWORD *)(a3 + 80) >> 40) & 0x1FFFFFLL);
        if (v29 != v30)
        {
          while (1)
          {
            v31 = *(_QWORD *)(*(_QWORD *)v29 + 8);
            if ((*(_BYTE *)v31 & 0xFE) != 0x76 || (sub_22E9FEBC4(a1, a2, *(_QWORD *)(v31 + 16)) & 1) == 0)
              break;
            v29 += 8;
            result = 1;
            if (v29 == v30)
              return result;
          }
          return 0;
        }
      }
      return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_22E9FEEFC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *i;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;

  if (!a3)
    return 1;
  if ((sub_22EFBF86C(a3, &v43, 0) & 1) == 0)
  {
    v6 = *(_QWORD *)(a3 + 144) & 6;
    v7 = (_DWORD *)(*(_QWORD *)(a3 + 144) & 0xFFFFFFFFFFFFFFF8);
    if (v6 != 4 || v7 == 0)
    {
      if (v6 != 2 || v7 == 0)
        goto LABEL_16;
    }
    else
    {
      v7 += 4;
    }
    if (((((*v7 >> 1) & 3) + 1) & 0xFFFFFFFD) != 0)
      sub_22EE44C50(a1, a2, *(_QWORD *)(a3 + 112), 0, 0, 0);
  }
LABEL_16:
  if ((*(_BYTE *)(a3 + 82) & 0x80) != 0)
    return 1;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
  if (!result)
    return result;
  if (*(_BYTE *)result != 8 || *(_DWORD *)result > 0xFFu)
    return 0;
  v11 = a3 + 72;
  v12 = a3;
  v13 = *(_WORD *)(a3 + 80) & 0x7F;
  v14 = -40;
  if (v13 > 0x46)
  {
    if (v13 == 83)
      goto LABEL_37;
    if (v13 == 71)
    {
      v14 = -56;
      goto LABEL_37;
    }
    if (v13 != 81)
    {
LABEL_32:
      v15 = v13 - 52;
      v16 = v13 - 33 >= 5;
      v17 = -48;
      if (!v16)
        v17 = -64;
      if (v15 >= 6)
        v14 = v17;
      else
        v14 = -72;
    }
  }
  else
  {
    if (v13 > 0x18)
      goto LABEL_31;
    if (v13 == 16)
    {
LABEL_24:
      v14 = -48;
      goto LABEL_37;
    }
    if (((1 << v13) & 0x1066) == 0)
    {
      if (v13 == 24)
        goto LABEL_24;
LABEL_31:
      if (v13 == 70)
      {
        v14 = -64;
        goto LABEL_37;
      }
      goto LABEL_32;
    }
  }
LABEL_37:
  v18 = *(_QWORD *)(v11 + v14 + 16);
  v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8);
  if ((v18 & 4) != 0)
    v19 = (_QWORD *)*v19;
  if (v19)
    v20 = (uint64_t)(v19 - 8);
  else
    v20 = 0;
  if (sub_22E463414(v20))
    return 0;
  v21 = *(_WORD *)(v12 + 80) & 0x7F;
  v22 = -40;
  if (v21 > 0x46)
  {
    if (v21 != 83)
    {
      if (v21 == 71)
      {
        v22 = -56;
        goto LABEL_59;
      }
      if (v21 == 81)
        goto LABEL_59;
LABEL_54:
      v23 = v21 - 52;
      v16 = v21 - 33 >= 5;
      v24 = -48;
      if (!v16)
        v24 = -64;
      if (v23 >= 6)
        v22 = v24;
      else
        v22 = -72;
    }
  }
  else
  {
    if (v21 > 0x18)
      goto LABEL_53;
    if (v21 != 16)
    {
      if (((1 << v21) & 0x1066) != 0)
        goto LABEL_59;
      if (v21 != 24)
      {
LABEL_53:
        if (v21 == 70)
        {
          v22 = -64;
          goto LABEL_59;
        }
        goto LABEL_54;
      }
    }
    v22 = -48;
  }
LABEL_59:
  v25 = *(_QWORD *)(v11 + v22 + 16);
  v26 = (_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF8);
  if ((v25 & 4) != 0)
    v26 = (_QWORD *)*v26;
  if (v26)
    v27 = v26 - 8;
  else
    v27 = 0;
  if ((v27[9] & 0xE000) == 0x4000)
    return 1;
  v28 = sub_22E46A3A0(v20);
  if (v28 != v29)
  {
    v30 = v28;
    v31 = v29;
    do
    {
      v32 = *(_QWORD *)(**(_QWORD **)(v30 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v32 + 8) & 0xF) != 0)
        v32 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v30 + 16));
      v33 = sub_22F10C2A4(*(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF0));
      if (v33)
      {
        if ((*(_DWORD *)(v33 + 28) & 0x7Fu) - 35 <= 2)
        {
          v34 = sub_22EFD10F8(v33);
          result = sub_22E9FEEFC(a1, a2, v34);
          if (!(_DWORD)result)
            return result;
        }
      }
      v30 += 24;
    }
    while (v30 != v31);
  }
  v35 = sub_22EFC3B90(v20);
  if (!v35)
    return 1;
  v36 = v35;
LABEL_75:
  for (i = (_QWORD *)(v36 + 48); ; i = (_QWORD *)(v40 + 32))
  {
    v38 = *(_QWORD *)(*i & 0xFFFFFFFFFFFFFFF0);
    if (v38)
      v39 = (*(_DWORD *)(v38 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
    else
      v39 = 0;
    if (v39)
    {
      v40 = *(_QWORD *)(*i & 0xFFFFFFFFFFFFFFF0);
      continue;
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
      break;
    v40 = sub_22F10CF48(v38);
    if (!v40)
      break;
  }
  v41 = sub_22F10C2A4(v38);
  if (!v41
    || (*(_DWORD *)(v41 + 28) & 0x7Fu) - 35 > 2
    || (v42 = sub_22EFD10F8(v41), result = sub_22E9FEEFC(a1, a2, v42), (_DWORD)result))
  {
    while (1)
    {
      v36 = *(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v36)
        return 1;
      if ((*(_DWORD *)(v36 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_75;
    }
  }
  return result;
}

uint64_t sub_22E9FF2F4(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _BOOL4 v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12[24];

  if ((*(_DWORD *)(a2 + 28) & 0x80) == 0)
  {
    v3 = (_QWORD *)result;
    if (((*(_DWORD *)(a2 + 28) & 0x7F) != 0x40 || (*(_DWORD *)(a2 + 96) & 0x600u) - 1536 <= 0xFFFFFBFF)
      && *(_QWORD *)(a2 + 88) >= 8uLL)
    {
      result = sub_22E3CB5E0(a2);
      if ((result & 1) == 0 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
      {
        result = sub_22EFBC5B4(a2);
        v4 = result;
        if (!result || (*(_BYTE *)(result + 2) & 1) == 0)
        {
          v5 = sub_22E469D10(a2);
          if (v5 || sub_22E466E5C(a2) || (result = sub_22E466EBC(a2), (_DWORD)result))
          {
            result = sub_22E9FF4F0((uint64_t)v3, a2, v5);
            if ((result & 1) != 0)
              return result;
            if (v5)
              v6 = 4699;
            else
              v6 = 3286;
            sub_22E8FCA40(v3, *(_DWORD *)(a2 + 24), v6, 0, (uint64_t)v12);
            sub_22F0D4E74(v4);
            v11 = v7;
            sub_22E8906A0((uint64_t)v12, &v11);
            goto LABEL_17;
          }
          if ((*(_BYTE *)v4 & 0xFE) == 0x76)
          {
            v8 = *(_QWORD *)(v4 + 16);
            v11 = v8;
            if (!v8)
              return result;
          }
          else
          {
            if ((*(_BYTE *)v4 + 113) < 0xFBu)
              return result;
            result = sub_22EFFA604(*(unsigned __int8 **)(v4 + *(unsigned __int8 *)(v4 + 3)));
            if (!result)
              return result;
            v8 = result;
            if ((*(_DWORD *)(result + 28) & 0x7Eu) - 52 > 5)
              return result;
            v11 = result;
          }
          result = sub_22E9FDFC4(result, v8, 0);
          v10 = result;
          if ((result - 4) <= 0xFFFFFFFD)
          {
            sub_22E8FCA40(v3, *(_DWORD *)(a2 + 24), 0x121Fu, 0, (uint64_t)v12);
            v9 = sub_22E8900C4((uint64_t)v12, &v10);
            sub_22E890024(v9, &v11);
            sub_22E903BEC(v12);
            sub_22E8FCA40(v3, *(_DWORD *)(v11 + 24), 0x1771u, 0, (uint64_t)v12);
            sub_22E890024((uint64_t)v12, &v11);
LABEL_17:
            sub_22E903BEC(v12);
            return sub_22EFC77E8(a2, 1);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_22E9FF4F0(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;

  v6 = sub_22EFBC5B4(a2);
  v11 = v6;
  if (a3 == 1)
  {
    if (!v6)
    {
LABEL_5:
      v13 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0));
      if (!v13 || (*(_DWORD *)(v13 + 28) & 0x7Fu) - 35 >= 3)
        return 1;
      goto LABEL_18;
    }
    if ((*(_BYTE *)v6 & 0xFE) == 0x76)
    {
      result = sub_22E9FEBC4(a1, *(_DWORD *)(a2 + 24), *(_QWORD *)(v6 + 16));
      if ((_DWORD)result)
        goto LABEL_5;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if ((*(_WORD *)(*(_QWORD *)(a1 + 72) + 96) & 0x1000) != 0)
      return 1;
    if (!v6
      || (*(_BYTE *)v6 & 0xFE) == 0x76 && (sub_22E9FEBC4(a1, *(_DWORD *)(a2 + 24), *(_QWORD *)(v6 + 16)) & 1) != 0
      || (v14 = *(_QWORD *)(a1 + 88),
          v15 = *(_BYTE *)(v14 + 16064),
          *(_BYTE *)(v14 + 16064) = 1,
          result = sub_22EFFFBEC(v11, v14, (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)+ 16) & 0xFE) == 40, 0, v7, v8, v9, v10), *(_BYTE *)(v14 + 16064) = v15, (_DWORD)result))
    {
      v13 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0));
      if (!v13 || (*(_DWORD *)(v13 + 28) & 0x7Fu) - 35 > 2)
        return 1;
LABEL_18:
      v16 = *(_DWORD *)(a2 + 24);
      v17 = sub_22EFD10F8(v13);
      return sub_22E9FEEFC(a1, v16, v17);
    }
  }
  return result;
}

void sub_22E9FF670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24[24];
  __int128 v25;
  uint64_t v26;
  int v27;
  __int16 v28;
  char v29;
  uint64_t v30;

  v30 = a2;
  if (!*(_DWORD *)(a1 + 12776))
  {
    if ((*(_WORD *)(*(_QWORD *)(a1 + 72) + 96) & 0x200) == 0
      || (*(_BYTE *)(a2 + 83) & 0xC0) == 0
      || (sub_22EFBF68C(a2) & 1) != 0
      || sub_22F295B40(a2)
      || sub_22E466E5C(a2)
      || sub_22E462B18(a2))
    {
      return;
    }
    v8 = *(_QWORD **)(a3 + 8);
    v9 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v9)
    {
      v10 = 8 * v9;
      v11 = &v8[v9];
      while (1)
      {
        v12 = *v8 & 0xFFFFFFFFFFFFFFFCLL;
        v13 = *(_DWORD *)(v12 + 28);
        v14 = v13 & 0x7E;
        if (v12 && v14 == 46)
        {
          v12 = *(_QWORD *)(v12 + 64);
          v13 = *(_DWORD *)(v12 + 28);
          v14 = v13 & 0x7E;
        }
        if (((v14 - 58) > 0xFFFFFFF9 || (v13 & 0x7F) == 0x1D && (v12 = *(_QWORD *)(v12 + 48)) != 0)
          && sub_22E466E5C(v12)
          && !sub_22F295B40(v12)
          && !sub_22ECF9D50((_QWORD *)a1, a2, v12, 0, 0, 1))
        {
          break;
        }
        ++v8;
        v10 -= 8;
        if (!v10)
        {
          v8 = v11;
          break;
        }
      }
      v17 = v8;
      v8 = *(_QWORD **)(a3 + 8);
      v18 = *(unsigned int *)(a3 + 16);
    }
    else
    {
      v18 = 0;
      v17 = *(_QWORD **)(a3 + 8);
    }
    if (&v8[v18] != v17)
    {
      v19 = *v17 & 0xFFFFFFFFFFFFFFFCLL;
      v20 = sub_22F1E361C(*(_QWORD **)(a1 + 112), *(_DWORD *)(v19 + 24));
      if (v20 == 3 || v20 == 0)
      {
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0xC49u, 0, (uint64_t)&v25);
        sub_22E890024((uint64_t)&v25, &v30);
        sub_22E903BEC((unsigned int *)&v25);
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v19 + 24), 0x1584u, 0, (uint64_t)v24);
        sub_22E903BEC(v24);
      }
      return;
    }
    v22 = *(_QWORD *)(a1 + 88);
    v25 = 0uLL;
    v27 = 0;
    v26 = 0;
    v29 = 120;
    v28 = 0;
    v23 = sub_22F38218C(v22, &v25);
    sub_22EFCA95C(a2, v23);
    v6 = *(_QWORD *)(a1 + 88);
    v25 = 0uLL;
    v27 = 0;
    v26 = 0;
    v29 = 120;
LABEL_10:
    v28 = 0;
    v7 = sub_22F381CB8(v6, &v25);
    sub_22EFCA95C(a2, v7);
    return;
  }
  if (!sub_22F295B40(a2))
  {
    v15 = *(_QWORD *)(a1 + 88);
    v25 = 0uLL;
    v27 = 0;
    v26 = 0;
    v29 = 120;
    v28 = 0;
    v16 = sub_22F38218C(v15, &v25);
    sub_22EFCA95C(a2, v16);
  }
  if (!sub_22E466E5C(a2))
  {
    v6 = *(_QWORD *)(a1 + 88);
    v25 = 0uLL;
    v27 = 0;
    v26 = 0;
    v29 = 120;
    goto LABEL_10;
  }
}

void sub_22E9FF910(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  char v19;

  if ((*(_WORD *)(*(_QWORD *)(a1 + 72) + 96) & 0x80) == 0)
    return;
  if (sub_22E466EBC(a2))
    return;
  if (sub_22E466EBC(a2))
    return;
  if (sub_22E469D10(a2))
    return;
  v4 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (v4 == 64)
    return;
  if (v4 == 62)
  {
    v14 = *(_QWORD *)(a2 + 16);
    v6 = v14 & 0xFFFFFFFFFFFFFFF8;
    if ((v14 & 4) == 0)
    {
LABEL_25:
      if ((*(_WORD *)(v6 + 8) & 0x7Eu) - 34 > 3)
        return;
      goto LABEL_10;
    }
LABEL_24:
    v6 = *(_QWORD *)v6;
    goto LABEL_25;
  }
  v5 = *(_QWORD *)(a2 + 16);
  v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  v7 = v5 & 0xFFFFFFFFFFFFFFF8;
  if ((v5 & 4) != 0)
    v7 = *(_QWORD *)(v6 + 8);
  v8 = *(_WORD *)(sub_22EFCBB30(v7) + 8) & 0x7F;
  if (v8 != 16 && v8 != 83)
  {
    v11 = v5 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 4) != 0)
      v11 = *(_QWORD *)v6;
    if ((*(_WORD *)(v11 + 8) & 0x7Eu) - 34 >= 4)
    {
      if ((v5 & 4) == 0)
        goto LABEL_25;
      goto LABEL_24;
    }
  }
LABEL_10:
  v9 = *(_QWORD *)(a2 + 48);
  if ((*(_BYTE *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
  {
    v10 = sub_22EFBC5B4(a2);
    if ((!v10 || (*(_BYTE *)(v10 + 2) & 1) == 0)
      && ((v9 & 1) != 0 || (*(_DWORD *)(a2 + 96) & 0x8000) != 0
                        || (*(_BYTE *)((v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) != 0))
    {
      if (sub_22E9FF4F0(a1, a2, 0))
      {
        v12 = *(_QWORD *)(a1 + 88);
        v15 = 0uLL;
        v17 = 0;
        v16 = 0;
        v19 = 120;
        v18 = 0;
        v13 = sub_22F381B20(v12, &v15);
        sub_22EFCA95C(a2, v13);
      }
    }
  }
}

uint64_t sub_22E9FFABC(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  _BOOL4 v7;
  unsigned int *v8;
  _BYTE v9[96];
  uint64_t v10;
  _BYTE v11[96];

  if ((*(_WORD *)(*(_QWORD *)(result + 72) + 96) & 0x80) != 0)
  {
    v5 = (_QWORD *)result;
    result = sub_22E903070(result, 1);
    if (result)
    {
      if ((*(_WORD *)(result + 8) & 0x7Eu) - 58 >= 0xFFFFFFFA)
      {
        v6 = result - 72;
        v7 = sub_22E466E5C(a2);
        result = sub_22E462B18(v6);
        if ((result & 1) == 0)
        {
          result = sub_22E466E5C(v6);
          if (v7 && (result & 1) == 0 && (*(_BYTE *)(a3 + 24) & 3) == 1)
          {
            if ((*(_BYTE *)(a3 + 24) & 8) != 0)
            {
              sub_22E903A04((uint64_t)v9, 3, *(_DWORD *)(a3 + 8), 6715, a2, v5);
              v8 = (unsigned int *)v9;
            }
            else
            {
              sub_22E903A04((uint64_t)v11, 3, *(_DWORD *)(a3 + 8), 3006, a2, v5);
              v10 = *(_QWORD *)a3;
              sub_22E890024((uint64_t)v11, &v10);
              v8 = (unsigned int *)v11;
            }
            return (uint64_t)sub_22E903BEC(v8);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_22E9FFBC0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  int v10;
  uint64_t i;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17[24];
  uint64_t v18;
  unsigned int v19[25];
  int v20;
  unint64_t v21;
  int v22;

  result = sub_22E9FDFC4((uint64_t)a1, a2, 0);
  v22 = result;
  v7 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v7)
  {
    v8 = result;
    v9 = *(_QWORD **)(a3 + 8);
    v10 = result & 5;
    for (i = 8 * v7; i; i -= 8)
    {
      v12 = *v9 & 0xFFFFFFFFFFFFFFFCLL;
      if (v12)
        v13 = (*(_DWORD *)(v12 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA;
      else
        v13 = 0;
      if (v13)
      {
        v21 = *v9 & 0xFFFFFFFFFFFFFFFCLL;
      }
      else
      {
        if ((*(_DWORD *)(v12 + 28) & 0x7F) != 0x1D)
          goto LABEL_15;
        v12 = *(_QWORD *)(v12 + 48);
        v21 = v12;
        if (!v12)
          goto LABEL_15;
      }
      result = sub_22E9FDFC4(result, v12, 0);
      v20 = result;
      if (v8 != (_DWORD)result && (v10 == 1 || (result & 5) == 1))
      {
        result = sub_22ECF9D50(a1, a2, v12, 0, 0, 1);
        if (!(_DWORD)result)
        {
          sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0xC48u, 0, (uint64_t)v19);
          v14 = sub_22E8900C4((uint64_t)v19, &v22);
          v18 = *(_QWORD *)(a2 + 40);
          v15 = sub_22E894538(v14, &v18);
          v16 = sub_22E8900C4(v15, &v20);
          sub_22E890024(v16, (uint64_t *)&v21);
          sub_22E903BEC(v19);
          sub_22E8FCA40(a1, *(_DWORD *)(v21 + 24), 0x6Cu, 0, (uint64_t)v17);
          sub_22E903BEC(v17);
          return sub_22EFC77E8(a2, 1);
        }
      }
LABEL_15:
      ++v9;
    }
  }
  return result;
}

uint64_t sub_22E9FFD4C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(uint64_t **)a1;
  v2 = *(unsigned int *)(a1 + 8);
  i = *(uint64_t **)a1;
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    for (i = *(uint64_t **)a1; *(_WORD *)(*i + 32) != 130; ++i)
    {
      v4 -= 8;
      if (!v4)
        return 0;
    }
  }
  if (i == &v1[v2])
    return 0;
  do
  {
    v6 = *v1++;
    result = v6;
  }
  while (*(_WORD *)(v6 + 32) != 130);
  return result;
}

uint64_t sub_22E9FFDAC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(uint64_t **)a1;
  v2 = *(unsigned int *)(a1 + 8);
  i = *(uint64_t **)a1;
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    for (i = *(uint64_t **)a1; *(_WORD *)(*i + 32) != 134; ++i)
    {
      v4 -= 8;
      if (!v4)
        return 0;
    }
  }
  if (i == &v1[v2])
    return 0;
  do
  {
    v6 = *v1++;
    result = v6;
  }
  while (*(_WORD *)(v6 + 32) != 134);
  return result;
}

unint64_t sub_22E9FFE0C(int *a1, int *a2)
{
  int *v2;
  int *v3;
  unsigned __int8 v4;
  unint64_t v5;
  int v7;
  unint64_t v8;
  _OWORD v11[4];
  _OWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = a2;
  v3 = a1;
  v15 = *MEMORY[0x24BDAC8D0];
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  v4 = atomic_load((unsigned __int8 *)&qword_253E4AB98);
  v5 = 0x253E4A000uLL;
  if ((v4 & 1) == 0)
  {
    v7 = __cxa_guard_acquire(&qword_253E4AB98);
    v5 = 0x253E4A000uLL;
    v3 = a1;
    v2 = a2;
    if (v7)
    {
      v8 = *MEMORY[0x24BED7368];
      if (!*MEMORY[0x24BED7368])
        v8 = 0xFF51AFD7ED558CCDLL;
      qword_253E4AB90 = v8;
      __cxa_guard_release(&qword_253E4AB98);
      v5 = 0x253E4A000;
      v3 = a1;
      v2 = a2;
    }
  }
  v14 = *(_QWORD *)(v5 + 2960);
  return sub_22E9FFF00((char *)v11, 0, v11, (char *)v12, v3, v2);
}

unint64_t sub_22E9FFF00(char *a1, uint64_t a2, _DWORD *a3, char *a4, int *a5, int *a6)
{
  _DWORD *v9;
  char *v10;
  uint64_t v12;
  int v13[2];

  v12 = a2;
  v9 = sub_22E9FFF78(a1, &v12, a3, (unint64_t)a4, *a5);
  *(_QWORD *)v13 = v12;
  v10 = (char *)sub_22E9FFF78(a1, (uint64_t *)v13, v9, (unint64_t)a4, *a6);
  return sub_22E54F2E8(a1, *(uint64_t *)v13, v10, a4);
}

_DWORD *sub_22E9FFF78(_QWORD *a1, uint64_t *a2, _DWORD *__dst, unint64_t a4, int a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int __src;

  __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *__dst = a5;
    return __dst + 1;
  }
  else
  {
    v8 = a4 - (_QWORD)__dst;
    memcpy(__dst, &__src, a4 - (_QWORD)__dst);
    v9 = *a2;
    if (*a2)
    {
      v10 = a1[9];
      v11 = a1[11];
      v12 = a1[1];
      v13 = a1[12];
      v14 = a1[13];
      v16 = a1[6];
      v15 = a1[7];
      v17 = a1[14];
      v18 = v17 ^ (0xB492B66FBE98F273 * __ROR8__(v10 + a1[8] + v11 + v12, 37));
      v19 = a1[5];
      v20 = v19 + v11 - 0x4B6D499041670D8DLL * __ROR8__(v13 + v10 + v16, 42);
      v21 = __ROR8__(v14 + a1[10], 33);
      v22 = *a1 - 0x4B6D499041670D8DLL * v13;
      v23 = v14 + v22;
      v25 = a1[2];
      v24 = a1[3];
      v21 *= 0xB492B66FBE98F273;
      v26 = v21 + v17 + a1[4];
      v27 = v22 + v12 + v25;
      v28 = v19 + v16 + v26;
      a1[12] = __ROR8__(v23 + v24 + v18, 21) + v22 + __ROR8__(v27, 44);
      a1[13] = v28 + v15;
      a1[14] = __ROR8__(v28, 44) + v26 + __ROR8__(v25 + v20 + v26 + v15, 21);
      a1[10] = v18;
      a1[11] = v27 + v24;
      a1[8] = v21;
      a1[9] = v20;
      v29 = v9 + 64;
    }
    else
    {
      v30 = a1[15];
      v31 = __ROR8__(v30 ^ 0xB492B66FBE98F273, 49);
      v32 = v30 ^ (v30 >> 47);
      v33 = a1[1];
      v34 = v33 + v30 + v31;
      v35 = a1[6];
      v36 = a1[7];
      v37 = a1[5];
      v38 = v37 + v31 - 0x4B6D499041670D8DLL * __ROR8__(v35 + v30 - 0x4B6D499041670D8DLL * v30, 42);
      v39 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v30 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v30 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
      v40 = 0x9DDFEA08EB382D69
          * (v30 ^ (((0x9DDFEA08EB382D69 * (v32 ^ (0xB492B66FBE98F273 * v30))) ^ v30) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                  * (v32 ^ (0xB492B66FBE98F273 * v30))));
      v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v40 >> 47));
      v42 = 0xB492B66FBE98F273 * __ROR8__(v32 - 0x622015F714C7D297 * (v39 ^ (v39 >> 47)), 33);
      v43 = *a1 - 0x6D8ED9027DD26057 * v30;
      v45 = a1[2];
      v44 = a1[3];
      v46 = v43 + v33 + v45;
      v47 = v41 ^ (0xB492B66FBE98F273 * __ROR8__(v34, 37));
      v48 = v42 + a1[4] + v41;
      a1[8] = v42;
      a1[9] = v38;
      a1[10] = v47;
      a1[11] = v46 + v44;
      a1[12] = __ROR8__(v46, 44) + v43 + __ROR8__(v43 + v32 + v44 + v47, 21);
      a1[13] = v37 + v35 + v48 + v36;
      a1[14] = __ROR8__(v38 + v45 + v36 + v48, 21) + v48 + __ROR8__(v37 + v35 + v48, 44);
      v29 = 64;
    }
    *a2 = v29;
    if ((unint64_t)a1 + 4 - v8 <= a4)
    {
      memcpy(a1, (char *)&__src + v8, 4 - v8);
      return (_DWORD *)((char *)a1 + 4 - v8);
    }
  }
  return a1;
}

_OWORD *sub_22EA00214(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  llvm *v14;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_OWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result++ = xmmword_22F463B20;
        v11 -= 16;
      }
      while (v11);
    }
    v12 = (void *)(16 * v3);
    if ((_DWORD)v3)
    {
      v13 = 16 * v3;
      v14 = v4;
      do
      {
        if (*(_QWORD *)v14 != -8192 && *(_QWORD *)v14 != -4096 || *((_DWORD *)v14 + 2) != 0)
        {
          v21 = 0;
          sub_22F31CBD0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v21);
          v17 = (_QWORD *)v21;
          v18 = *(_QWORD *)v14;
          *(_DWORD *)(v21 + 8) = *((_DWORD *)v14 + 2);
          *v17 = v18;
          ++*(_DWORD *)(a1 + 8);
        }
        v14 = (llvm *)((char *)v14 + 16);
        v13 -= 16;
      }
      while (v13);
    }
    return (_OWORD *)llvm::deallocate_buffer(v4, v12);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v19 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v19)
    {
      v20 = 16 * v19;
      do
      {
        *result++ = xmmword_22F463B20;
        v20 -= 16;
      }
      while (v20);
    }
  }
  return result;
}

uint64_t sub_22EA00378(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(uint64_t **)a1;
  v2 = *(unsigned int *)(a1 + 8);
  i = *(uint64_t **)a1;
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    for (i = *(uint64_t **)a1; *(_WORD *)(*i + 32) != 133; ++i)
    {
      v4 -= 8;
      if (!v4)
        return 0;
    }
  }
  if (i == &v1[v2])
    return 0;
  do
  {
    v6 = *v1++;
    result = v6;
  }
  while (*(_WORD *)(v6 + 32) != 133);
  return result;
}

unint64_t sub_22EA003D8(_QWORD *a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5, uint64_t a6, unsigned int a7, unint64_t a8, unsigned __int8 a9, unsigned __int8 a10, unsigned __int8 a11, void ***a12)
{
  uint64_t v15;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  void **v29;
  BOOL v30;
  int v31;
  __int128 *v32;
  unint64_t v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  BOOL v53;
  char v54;
  BOOL v55;
  uint64_t v56;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  char v70;
  char v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  BOOL v79;
  unsigned int *v80;
  unint64_t v81;
  _DWORD *v82;
  _DWORD *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  size_t v89;
  unsigned int v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  _BYTE *v109;
  uint64_t v110;
  int v111;
  __int128 v112;
  void *v113[2];
  char v114;
  unint64_t v115;
  uint64_t (**v116)();
  int v117;
  char v118;
  uint64_t v119;
  _BYTE v120[23];
  unsigned int v121;
  unint64_t v122;
  void *v123[2];
  uint64_t v124;
  _QWORD v125[4];
  _BYTE v126[32];
  void **v127[3];
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  _BYTE v133[64];
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  int v139;
  _QWORD v140[2];
  int v141;
  int v142;
  int v143;
  __int16 v144;
  char v145;
  uint64_t v146;

  v15 = a5;
  v146 = *MEMORY[0x24BDAC8D0];
  v121 = a3;
  if (a11)
  {
    if ((*(_BYTE *)(a1[9] + 1) & 8) != 0)
      v19 = a9;
    else
      v19 = 1;
    v107 = (v19 | a6 | a7) ^ 1;
  }
  else
  {
    v107 = 0;
  }
  if (a8)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
    {
      v20 = a2;
      v21 = sub_22E9580E4((uint64_t)a1, a8);
      a2 = v20;
      v22 = v21;
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (!a5 || (!*(_DWORD *)a5 || !*(_DWORD *)(a5 + 4)) && !*(_QWORD *)(a5 + 8))
  {
LABEL_17:
    v22 = 0;
    goto LABEL_18;
  }
  v23 = a2;
  v24 = sub_22E958204((uint64_t)a1, a5, 0);
  if (v24)
  {
    v22 = v24;
    if ((sub_22EFC7ADC(v24) & 1) != 0)
    {
      a2 = v23;
      goto LABEL_18;
    }
    v72 = sub_22E958490(a1, v15, v22);
    a2 = v23;
    if ((v72 & 1) == 0)
    {
LABEL_18:
      v104 = a7;
      v106 = v15;
      v130 = 0;
      v131 = v133;
      if ((_DWORD)a6)
        v25 = 6;
      else
        v25 = 0;
      v132 = 0x800000000;
      v134 = 0;
      v135 = 0;
      v136 = 0;
      v137 = a1;
      v138 = a2;
      v139 = a3;
      v105 = a2;
      sub_22EFC6D6C((uint64_t)v140, a2);
      v140[1] = 0;
      v141 = v25;
      v142 = 0;
      v143 = 16842752;
      v144 = 0;
      v145 = 0;
      sub_22EC56024((uint64_t)&v130);
      v26 = (uint64_t)a1;
      if (v22)
      {
        sub_22EC611AC(a1, &v130, v22, 0);
        if (a8 && !(_DWORD)v132)
          sub_22EC63520(a1, &v130, a4, 0, 0);
      }
      else
      {
        sub_22EC63520(a1, &v130, a4, 0, 0);
        if (!(_DWORD)v132
          && (*(_BYTE *)a1[9] & 0x10) != 0
          && (!v15 || (!*(_DWORD *)v15 || !*(_DWORD *)(v15 + 4)) && !*(_QWORD *)(v15 + 8)))
        {
          v37 = sub_22EA01178(a1, v105, v121);
          if (v37)
          {
LABEL_197:
            if (HIBYTE(v143))
            {
              if ((_DWORD)v130 == 5)
              {
                sub_22EC64D18(v137, (uint64_t)&v130);
              }
              else if (v135 && (*(_DWORD *)(v137[9] + 52) & 0x400000) != 0)
              {
                sub_22E90B5FC((unint64_t)v137, (uint64_t)&v130);
              }
            }
LABEL_160:
            if (v134)
            {
              v102 = sub_22EC6CBD0(v134);
              MEMORY[0x2348A0E9C](v102, 0x10E0C409F09D3C3);
            }
            if (v131 != v133)
              free(v131);
            return v37;
          }
        }
      }
      switch((int)v130)
      {
        case 0:
        case 1:
          if (!a12)
            goto LABEL_159;
          v117 = 16777217;
          memset(v120, 0, 11);
          v119 = 0;
          v116 = &off_24FAB7860;
          v120[11] = 1;
          v120[12] = a6;
          v120[13] = v107;
          v120[14] = 1;
          v118 = 0;
          sub_22EC6AB20(v26, &v138, v25, a4, v15, (uint64_t)&v116, 1, 0, (uint64_t)&v122, 0, 0, 1u);
          v27 = v122;
          v28 = v123[0];
          if ((v122 & 7) != 0)
            v29 = 0;
          else
            v29 = (void **)(v122 & 0xFFFFFFFFFFFFFFF8);
          v115 = 0;
          v114 = 0;
          LODWORD(v127[0]) = 0;
          v127[1] = v29;
          v129 = v121;
          v128 = v121;
          if (v15)
            v30 = v123[0] == 0;
          else
            v30 = 1;
          v31 = !v30;
          v108 = v31;
          v112 = 0u;
          *(_OWORD *)v113 = 0u;
          v32 = (__int128 *)v15;
          if (!v30)
          {
            v33 = v121 | ((unint64_t)v121 << 32);
            v32 = &v112;
            sub_22F0AB9D8((uint64_t)&v112 + 8, *(_QWORD *)(v26 + 88), (unint64_t)v123[0], v33);
            *(_QWORD *)&v112 = v33;
            v27 = v122;
          }
          if (v28)
            v34 = 0;
          else
            v34 = v29 == (void **)v105;
          v35 = !v34;
          if (v27
            && v35
            && (!v32
             || (**(_QWORD **)(v26 + 72) & 0x100) == 0
             || !sub_22ED562E8((_QWORD *)v26, a4, (uint64_t)v32, 0, (int *)v127, 0, 0, &v115, &v114, 0)))
          {
            *(_WORD *)((char *)&v103 + 1) = __PAIR16__(a11, a10);
            LOBYTE(v103) = a9;
            v36 = sub_22EA003D8(v26, v29, v121, a4, v32, a6, v104, a8, v103, 0);
            if (v36)
            {
              v37 = v36;
              v110 = *(_QWORD *)(v26 + 88) + 2128;
              v111 = 5074;
              v38 = v138;
              v39 = (_BYTE *)sub_22E3B8AAC(v110);
              v109 = v39;
              v40 = v39 + 1;
              v41 = *v39;
              v40[v41] = 10;
              *v39 = v41 + 2;
              v39 += 16;
              *(_QWORD *)&v39[8 * v41] = v38;
              v42 = (v41 + 1);
              v40[v42] = 2;
              *(_QWORD *)&v39[8 * v42] = a6;
              sub_22EC6BEF8(v26, (uint64_t)&v122, (uint64_t)&v109, 1);
              if (v109 && v110)
                sub_22E3BB10C(v110, (unint64_t)v109);
              if (v108)
              {
                v43 = v121 | ((unint64_t)v121 << 32);
                sub_22F0AB9D8(v15 + 8, *(_QWORD *)(v26 + 88), (unint64_t)v28, v43);
                *(_QWORD *)v15 = v43;
              }
              *a12 = v29;
              if (HIDWORD(v113[1]))
                free(v113[0]);
              v127[0] = (void **)v126;
              sub_22E8D19C8(v127);
              if (v123[1] != v125)
                free(v123[1]);
              goto LABEL_197;
            }
          }
          if (HIDWORD(v113[1]))
            free(v113[0]);
          v127[0] = (void **)v126;
          sub_22E8D19C8(v127);
          if (v123[1] != v125)
            free(v123[1]);
          goto LABEL_159;
        case 2:
          v64 = *(_QWORD *)v131 & 0xFFFFFFFFFFFFFFFCLL;
          v65 = *(_DWORD *)(v64 + 28);
          if ((v65 & 0x7Fu) > 0x2F || ((1 << (v65 & 0x7F)) & 0xC00000060000) == 0)
            v45 = *(_QWORD *)v131 & 0xFFFFFFFFFFFFFFFCLL;
          else
            v45 = sub_22EFBAEA4(*(_QWORD *)v131 & 0xFFFFFFFFFFFFFFFCLL);
          v58 = (_QWORD *)v26;
          if ((v65 & 0x7E) == 0x2E)
            v44 = v64;
          else
            v44 = 0;
          goto LABEL_108;
        case 3:
        case 4:
          goto LABEL_159;
        case 5:
          if (HIDWORD(v130) == 3 || !(_DWORD)v132)
            goto LABEL_159;
          v44 = 0;
          v45 = 0;
          v46 = v131;
          v47 = 8 * v132;
          do
          {
            v48 = *v46 & 0xFFFFFFFFFFFFFFFCLL;
            v49 = *(_DWORD *)(v48 + 28);
            v50 = v49 & 0x7F;
            v51 = v48;
            if (v50 <= 0x2F && ((1 << (v49 & 0x7F)) & 0xC00000060000) != 0)
            {
              v51 = sub_22EFBAEA4(v48);
              v50 = *(_DWORD *)(v51 + 28) & 0x7F;
            }
            v53 = v50 - 33 < 0xA || v50 == 22;
            if (v53 || v50 == 43)
              goto LABEL_82;
            v54 = v107 ^ 1;
            if (v50 - 33 < 0xFFFFFFF9)
              v54 = 1;
            if ((v54 & 1) == 0)
            {
              v55 = v50 > 0x20;
              v56 = (1 << v50) & 0x150000000;
              if (!v55 && v56 != 0)
              {
LABEL_82:
                if (!v45 || *(_DWORD *)(v51 + 24) < *(_DWORD *)(v45 + 24))
                {
                  if ((v49 & 0x7E) == 0x2E)
                    v44 = v48;
                  else
                    v44 = 0;
                  v45 = v51;
                }
              }
            }
            ++v46;
            v47 -= 8;
          }
          while (v47);
          v58 = (_QWORD *)v26;
          if (!v45)
            goto LABEL_159;
LABEL_108:
          v59 = v45 + 28;
          v60 = *(_DWORD *)(v45 + 28);
          v61 = v60 & 0x7F;
          if (!v45 || (v61 - 43) < 0xFFFFFFF6)
          {
            v15 = v106;
            if (v45 && v61 == 22)
            {
              v26 = (uint64_t)v58;
              sub_22EB17F48(v58, v45, &v121, 1, 0, 0, 0, 0);
              if ((v104 & 1) != 0)
              {
LABEL_159:
                v37 = 0;
                HIBYTE(v143) = 0;
                goto LABEL_160;
              }
              v63 = sub_22F36D148(v58[11], (uint64_t *)v45, 0);
            }
            else
            {
              if (v45 && v61 == 43)
              {
                sub_22EB17F48(v58, v45, &v121, 1, 0, 0, 0, 0);
                v44 = 0;
                v26 = (uint64_t)v58;
                v37 = *(_QWORD *)(v58[11] + 16480);
LABEL_158:
                if (v37 <= 0xF)
                  goto LABEL_159;
                if (v44)
                  v37 = sub_22F36C604(*(_QWORD *)(v26 + 88), v44, v37);
                if (v15)
                {
                  v79 = (!*(_DWORD *)v15 || !*(_DWORD *)(v15 + 4)) && *(_QWORD *)(v15 + 8) == 0;
                  if (!v79 && (a9 & 1) == 0 && (*(_DWORD *)v59 & 0x7F) != 0x16 && (*(_DWORD *)v59 & 0x7F) != 0x2B)
                  {
                    if (a10)
                    {
                      v122 = (unint64_t)&v124;
                      *(int64x2_t *)v123 = vdupq_n_s64(0x20uLL);
                      v125[3] = 0;
                      sub_22EEB5360((uint64_t)&v122, v37, 4uLL, 4);
                      *v80 = v121;
                      if (v37 >= 0x10)
                      {
                        v81 = *(_QWORD *)(v15 + 8);
                        if (v81)
                          v37 = sub_22EF65684(*(_QWORD *)(v26 + 88), 6, v81, v37, 0);
                      }
                      sub_22EEB5360((uint64_t)&v122, v37, 0x10uLL, 8);
                      v83 = v82;
                      *v82 = 0;
                      v85 = *(_QWORD *)(v15 + 8);
                      v84 = (uint64_t *)(v15 + 8);
                      if (v85)
                        sub_22F0ABC50(v84, *(_QWORD *)(v26 + 88));
                      else
                        v86 = 0;
                      *((_QWORD *)v83 + 1) = v86;
                      v88 = *(_QWORD *)(v26 + 88);
                      v89 = (char *)v123[0] - (char *)v123[1];
                      v90 = LODWORD(v123[0]) - LODWORD(v123[1]);
                      if (LODWORD(v123[0]) == LODWORD(v123[1]))
                        v90 = sub_22F11598C(v37);
                      v91 = (_QWORD *)sub_22E3CD3D4(v88 + 2032, v90 + 8, 3);
                      *v91 = v37;
                      memcpy(v91 + 1, (char *)v123[1] + v122, v89);
                      v37 = sub_22EE7D030(v26, v37, (uint64_t)v91);
                      if ((uint64_t *)v122 != &v124 && v122)
                        MEMORY[0x2348A0E84]();
                    }
                    else if (v37 >= 0x10)
                    {
                      v87 = *(_QWORD *)(v15 + 8);
                      if (v87)
                        v37 = sub_22EF65684(*(_QWORD *)(v26 + 88), 6, v87, v37, 0);
                    }
                  }
                }
                goto LABEL_197;
              }
              v26 = (uint64_t)v58;
LABEL_91:
              if (!v107
                || (v61 - 33) < 0xFFFFFFF9
                || !v45
                || (v60 & 0x7Fu) > 0x25
                || ((1 << (v60 & 0x7F)) & 0x2150000000) == 0)
              {
                goto LABEL_159;
              }
              if (v44)
                v62 = v44;
              else
                v62 = v45;
              v63 = sub_22F36D4FC(*(_QWORD *)(v26 + 88), v62 & 0xFFFFFFFFFFFFFFF9, 0, 0);
            }
            v37 = v63;
            v44 = 0;
            goto LABEL_158;
          }
          v15 = v106;
          if (v22)
          {
            if ((*(_WORD *)(v22 + 8) & 0x7Fu) - 35 >= 3)
              v67 = 0;
            else
              v67 = v22 - 64;
          }
          else
          {
            v67 = 0;
          }
          v73 = v61 - 35;
          if (v73 >= 3)
            v74 = 0;
          else
            v74 = v45;
          if ((a6 & 1) != 0 || a9 || !v67 || v73 > 2 || !sub_22EFC3A88(v74))
            goto LABEL_144;
          v76 = *(_WORD *)(v74 + 72) & 0x7F;
          v77 = -40;
          if (v76 > 0x46)
          {
            switch(v76)
            {
              case 'S':
                goto LABEL_209;
              case 'G':
                v77 = -56;
                goto LABEL_209;
              case 'Q':
LABEL_209:
                v92 = *(_QWORD *)(v74 + 64 + v77 + 16);
                v93 = v92 & 0xFFFFFFFFFFFFFFF8;
                if ((v92 & 4) != 0)
                  v93 = *(_QWORD *)v93;
                v94 = *(_WORD *)(v93 + 8) & 0x7F;
                v95 = -40;
                if (v94 > 0x46)
                {
                  switch(v94)
                  {
                    case 'S':
                      goto LABEL_226;
                    case 'G':
                      v95 = -56;
                      goto LABEL_226;
                    case 'Q':
                      goto LABEL_226;
                  }
                }
                else
                {
                  if (v94 <= 0x18)
                  {
                    if (v94 == 16)
                      goto LABEL_214;
                    if (((1 << v94) & 0x1066) != 0)
                      goto LABEL_226;
                    if (v94 == 24)
                    {
LABEL_214:
                      v95 = -48;
LABEL_226:
                      v96 = v93 + v95;
                      if (v67 == v93 + v95
                        || (v97 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v67 + 32))(v67),
                            v97 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)v96 + 32))(v96)))
                      {
                        sub_22E8FCA40(v58, v121, 0x1167u, 0, (uint64_t)&v122);
                        v116 = (uint64_t (**)())v105;
                        v98 = sub_22E8BAE44((uint64_t)&v122, (uint64_t *)&v116);
                        LODWORD(v127[0]) = 1;
                        sub_22E8900C4(v98, (int *)v127);
                        sub_22E903BEC((unsigned int *)&v122);
                      }
LABEL_144:
                      sub_22EB17F48(v58, v45, &v121, 1, 0, 0, 0, 0);
                      v75 = *(_QWORD *)(v45 + 48);
                      v26 = (uint64_t)v58;
                      if (v75)
                        v37 = v75 & 0xFFFFFFFFFFFFFFF0;
                      else
                        v37 = sub_22EF6462C(v58[11], v45);
                      if ((*(_DWORD *)v59 & 0x7Eu) - 58 >= 0xFFFFFFFA)
                        sub_22EB4E494(v26, *(unsigned int *)(v45 + 24), v45, 0);
                      else
                        *(_DWORD *)v59 |= 0x800u;
                      goto LABEL_158;
                    }
                  }
                  if (v94 == 70)
                  {
LABEL_224:
                    v95 = -64;
                    goto LABEL_226;
                  }
                }
                if (v94 - 52 < 6)
                {
                  v95 = -72;
                  goto LABEL_226;
                }
                if (v94 - 33 < 5)
                  goto LABEL_224;
                goto LABEL_214;
            }
          }
          else
          {
            if (v76 <= 0x18)
            {
              if (v76 == 16)
              {
LABEL_153:
                v77 = -48;
                goto LABEL_209;
              }
              if (((1 << v76) & 0x1066) != 0)
                goto LABEL_209;
              if (v76 == 24)
                goto LABEL_153;
            }
            if (v76 == 70)
            {
LABEL_207:
              v77 = -64;
              goto LABEL_209;
            }
          }
          if (v76 - 52 >= 6)
          {
            if (v76 - 33 >= 5)
              goto LABEL_153;
            goto LABEL_207;
          }
          v77 = -72;
          goto LABEL_209;
        default:
          v44 = 0;
          v45 = 0;
          v59 = 28;
          LOBYTE(v60) = MEMORY[0x1C];
          v61 = MEMORY[0x1C] & 0x7F;
          goto LABEL_91;
      }
    }
    return 0;
  }
  v68 = *(_QWORD *)(v15 + 8);
  if (!v68)
    return 0;
  v69 = a1;
  v70 = sub_22F0AAC5C(v68);
  v37 = 0;
  if ((a6 | a9) == 1 && (v70 & 4) != 0)
  {
    if (a10)
      return sub_22ED71588((uint64_t)v69, (uint64_t)a4, 0, v15, v23, a3);
    if (*(_QWORD *)(v15 + 8))
    {
      v99 = sub_22F0ABC50((uint64_t *)(v15 + 8), v69[11]);
      v100 = v101;
    }
    else
    {
      v99 = 0;
      v100 = 0;
    }
    return sub_22ED717D8(v69, 6, 0, v99, v100, v23, a3, 1);
  }
  return v37;
}

unint64_t sub_22EA01178(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  void *v26;
  size_t v27;
  unsigned int v28;
  _QWORD *v29;
  unint64_t v30;
  __int128 v32;
  size_t __n[2];
  _BYTE v34[24];
  _QWORD v35[11];

  v35[10] = *MEMORY[0x24BDAC8D0];
  v3 = a1[27];
  if (!v3)
    return 0;
  v7 = a3;
  do
  {
    v8 = *(_WORD *)(v3 + 8) & 0x7F;
    v9 = v8 - 38;
    v10 = v3 - 64;
    if ((v8 - 38) >= 0xFFFFFFFD
      && (*(_QWORD *)(v3 + 72) >= 8uLL ? (v11 = (*(_QWORD *)(v3 + 72) & 4) == 0) : (v11 = 0), v11))
    {
      v12 = sub_22EA3D488(a2, v7, (uint64_t *)(v3 - 64));
      v8 = *(_WORD *)(v3 + 8) & 0x7F;
    }
    else
    {
      v12 = 0;
    }
    v13 = -40;
    if (v8 > 70)
    {
      if (v8 == 83)
        goto LABEL_27;
      if (v8 == 71)
      {
        v13 = -56;
        goto LABEL_27;
      }
      if (v8 != 81)
        goto LABEL_21;
    }
    else
    {
      if (v8 > 0x18)
        goto LABEL_20;
      if (v8 == 16)
        goto LABEL_13;
      if (((1 << v8) & 0x1066) == 0)
      {
        if (v8 == 24)
        {
LABEL_13:
          v13 = -48;
          goto LABEL_27;
        }
LABEL_20:
        if (v8 == 70)
        {
          v13 = -64;
          goto LABEL_27;
        }
LABEL_21:
        v14 = v8 - 52;
        if ((v8 - 33) >= 5)
          v15 = -48;
        else
          v15 = -64;
        if (v14 >= 6)
          v13 = v15;
        else
          v13 = -72;
      }
    }
LABEL_27:
    v16 = *(_QWORD *)(v3 + v13 + 16);
    v3 = v16 & 0xFFFFFFFFFFFFFFF8;
    if ((v16 & 4) != 0)
      v3 = *(_QWORD *)v3;
    if (v3)
      v17 = v12 == 0;
    else
      v17 = 0;
  }
  while (v17);
  if (v12 != 2)
    return 0;
  if (v9 >= 0xFFFFFFFD)
    v18 = v10;
  else
    v18 = 0;
  sub_22E8FCA40(a1, v7, 0x1483u, 0, (uint64_t)v34);
  *(_QWORD *)&v32 = a2;
  sub_22E8BAE44((uint64_t)v34, (uint64_t *)&v32);
  sub_22E903BEC((unsigned int *)v34);
  v19 = a1[11];
  v20 = *(_QWORD *)(sub_22EF6477C(v19, v18) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)v34 = xmmword_22F4559B0;
  *(_QWORD *)&v34[16] = v20;
  v21 = sub_22F0AA9D0(v19, (uint64_t)v34);
  v22 = sub_22EF65A30(v19, 5, v21, a2, 0);
  v23 = v7 | (a3 << 32);
  v32 = 0u;
  *(_OWORD *)__n = 0u;
  sub_22F0AB9D8((uint64_t)&v32 + 8, v19, v21, v23);
  *(_QWORD *)&v32 = v23;
  *(_QWORD *)v34 = v35;
  *(int64x2_t *)&v34[8] = vdupq_n_s64(0x20uLL);
  v35[4] = 0;
  sub_22EEB5360((uint64_t)v34, v22, 0x18uLL, 8);
  v25 = v24;
  v26 = 0;
  v24[4] = a3;
  *v24 = 0;
  if (*((_QWORD *)&v32 + 1))
  {
    if (HIDWORD(__n[1]))
    {
      v26 = (void *)sub_22E3CD3D4(v19 + 2032, LODWORD(__n[1]), 3);
      memcpy(v26, (const void *)__n[0], LODWORD(__n[1]));
    }
    else
    {
      v26 = (void *)__n[0];
    }
  }
  *((_QWORD *)v25 + 1) = v26;
  v27 = *(_QWORD *)&v34[8] - *(_QWORD *)&v34[16];
  v28 = *(_DWORD *)&v34[8] - *(_DWORD *)&v34[16];
  if (*(_DWORD *)&v34[8] == *(_DWORD *)&v34[16])
    v28 = sub_22F11598C(v22);
  v29 = (_QWORD *)sub_22E3CD3D4(v19 + 2032, v28 + 8, 3);
  *v29 = v22;
  memcpy(v29 + 1, (const void *)(*(_QWORD *)v34 + *(_QWORD *)&v34[16]), v27);
  v30 = sub_22EE7D030((uint64_t)a1, v22, (uint64_t)v29);
  if (*(_QWORD **)v34 != v35 && *(_QWORD *)v34)
    MEMORY[0x2348A0E84]();
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  return v30;
}

unint64_t sub_22EA014E4(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t i;
  unint64_t v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  unsigned int v30;
  _QWORD *v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v44;
  void *__src;
  size_t __n;
  uint64_t v47;
  _BYTE v48[24];
  _QWORD v49[11];

  v49[10] = *MEMORY[0x24BDAC8D0];
  if (!a4 || (*(_BYTE *)(a1[1611] + 8) & 0x80) == 0)
  {
    v7 = a1[27];
    if (!v7)
      return 0;
    while (1)
    {
      if (!sub_22EFC7ADC(v7))
        return 0;
      v8 = sub_22EFCC008(v7);
      v9 = v8;
      if (!v8)
        goto LABEL_7;
      v10 = *(_WORD *)(v8 + 8);
      if ((v10 & 0x7Eu) - 58 < 0xFFFFFFFC)
        goto LABEL_7;
      v11 = v10 & 0x7F;
      v12 = -40;
      if (v11 > 70)
      {
        if (v11 == 83)
          goto LABEL_25;
        if (v11 == 71)
        {
          v12 = -56;
          goto LABEL_25;
        }
        if (v11 != 81)
          goto LABEL_20;
      }
      else
      {
        if (v11 > 0x18)
          goto LABEL_19;
        if (v11 == 16)
          goto LABEL_12;
        if (((1 << v11) & 0x1066) == 0)
        {
          if (v11 == 24)
          {
LABEL_12:
            v12 = -48;
            goto LABEL_25;
          }
LABEL_19:
          if (v11 == 70)
          {
            v12 = -64;
            goto LABEL_25;
          }
LABEL_20:
          if ((v11 - 52) < 6)
          {
            v12 = -72;
          }
          else if ((v11 - 33) >= 5)
          {
            v12 = -48;
          }
          else
          {
            v12 = -64;
          }
        }
      }
LABEL_25:
      v13 = *(_QWORD *)(v8 + v12 + 16);
      v14 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
      if ((v13 & 4) != 0)
        v14 = (_QWORD *)*v14;
      if (v14)
        v15 = (uint64_t)(v14 - 8);
      else
        v15 = 0;
      if (sub_22F3B1AA4(v15))
      {
        v33 = *(_WORD *)(v9 + 8) & 0x7F;
        v34 = -40;
        if (v33 > 0x46)
        {
          if (v33 != 83)
          {
            if (v33 == 71)
            {
              v34 = -56;
            }
            else if (v33 != 81)
            {
              goto LABEL_78;
            }
          }
        }
        else
        {
          if (v33 > 0x18)
            goto LABEL_77;
          if (v33 == 16)
            goto LABEL_68;
          if (((1 << v33) & 0x1066) == 0)
          {
            if (v33 == 24)
              goto LABEL_68;
LABEL_77:
            if (v33 == 70)
              goto LABEL_80;
LABEL_78:
            if (v33 - 52 >= 6)
            {
              if (v33 - 33 < 5)
              {
LABEL_80:
                v34 = -64;
                goto LABEL_82;
              }
LABEL_68:
              v34 = -48;
              goto LABEL_82;
            }
            v34 = -72;
          }
        }
LABEL_82:
        v35 = *(_QWORD *)(v9 + v34 + 16);
        v36 = (_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF8);
        if ((v35 & 4) != 0)
          v36 = (_QWORD *)*v36;
        if (v36)
        {
          v44 = v36 - 8;
          v37 = a1[11];
          v38 = (*((_DWORD *)v36 - 9) & 0x7F) - 26;
          v39 = *(v36 - 2);
          v40 = v38 >= 7;
          v41 = 4;
          if (!v40)
            v41 = 6;
          *(_QWORD *)v48 = 0;
          *(_QWORD *)&v48[8] = v41;
          *(_QWORD *)&v48[16] = v39;
          v23 = (_QWORD *)sub_22F0AA9D0(v37, (uint64_t)v48);
          v24 = a3;
          sub_22E8FCA40(a1, a3, 0x1511u, 0, (uint64_t)v48);
          v47 = a2;
          v42 = sub_22E8BAE44((uint64_t)v48, &v47);
          sub_22E890024(v42, (uint64_t *)&v44);
          goto LABEL_55;
        }
        return 0;
      }
LABEL_7:
      v7 = sub_22EFCB77C(v9);
      if (!v7)
        return 0;
    }
  }
  v16 = a1[11];
  for (i = a1[27]; ; i = sub_22EFCB77C(v18))
  {
    v18 = sub_22EFCC008(i);
    v19 = *(_WORD *)(v18 + 8) & 0x7F;
    if (v18 && v19 == 16)
    {
      if ((*(_BYTE *)(v18 + 56) & 4) == 0 && *(_QWORD *)(v18 - 8) >= 8uLL && (*(_QWORD *)(v18 - 8) & 7) == 0)
      {
        *(_OWORD *)v48 = xmmword_22F45EEF0;
        *(_QWORD *)&v48[16] = v18 - 48;
LABEL_53:
        v23 = (_QWORD *)sub_22F0AA9D0(v16, (uint64_t)v48);
        goto LABEL_54;
      }
      continue;
    }
    if (v18 && (v19 - 38) >= 0xFFFFFFFD)
    {
      v21 = *(_QWORD *)(v18 - 16);
      v22 = 4;
      if ((*(_DWORD *)(v18 - 36) & 0x7Fu) - 26 < 7)
        v22 = 6;
      *(_QWORD *)v48 = 0;
      *(_QWORD *)&v48[8] = v22;
      *(_QWORD *)&v48[16] = v21;
      goto LABEL_53;
    }
    if (v19 == 83)
      break;
  }
  v23 = *(_QWORD **)(v16 + 920);
  if (!v23)
  {
    v23 = (_QWORD *)sub_22E3CD3D4(v16 + 2032, 24, 3);
    v23[1] = 0;
    v23[2] = 0;
    *v23 = 0;
    *(_QWORD *)(v16 + 920) = v23;
  }
LABEL_54:
  v24 = a3;
  sub_22E8FCA40(a1, a3, 0x14B2u, 0, (uint64_t)v48);
  v44 = (_QWORD *)a2;
  sub_22E8BAE44((uint64_t)v48, (uint64_t *)&v44);
LABEL_55:
  sub_22E903BEC((unsigned int *)v48);
  v25 = sub_22EF65A30(a1[11], 6, (unint64_t)v23, a2, 0);
  v44 = 0;
  __src = 0;
  __n = 0;
  sub_22F0AB9D8((uint64_t)&v44, a1[11], (unint64_t)v23, v24 | (a3 << 32));
  if (v44)
  {
    if (HIDWORD(__n))
    {
      v26 = (void *)sub_22E3CD3D4(a1[11] + 2032, __n, 3);
      memcpy(v26, __src, __n);
    }
    else
    {
      v26 = __src;
    }
  }
  else
  {
    v26 = 0;
  }
  *(_QWORD *)v48 = v49;
  *(int64x2_t *)&v48[8] = vdupq_n_s64(0x20uLL);
  v49[4] = 0;
  sub_22EEB5360((uint64_t)v48, v25, 0x18uLL, 8);
  *(_DWORD *)(v27 + 16) = a3;
  *(_DWORD *)v27 = 0;
  *(_QWORD *)(v27 + 8) = v26;
  v28 = a1[11];
  v29 = *(_QWORD *)&v48[8] - *(_QWORD *)&v48[16];
  v30 = *(_DWORD *)&v48[8] - *(_DWORD *)&v48[16];
  if (*(_DWORD *)&v48[8] == *(_DWORD *)&v48[16])
    v30 = sub_22F11598C(v25);
  v31 = (_QWORD *)sub_22E3CD3D4(v28 + 2032, v30 + 8, 3);
  *v31 = v25;
  memcpy(v31 + 1, (const void *)(*(_QWORD *)v48 + *(_QWORD *)&v48[16]), v29);
  v32 = sub_22EE7D030((uint64_t)a1, v25, (uint64_t)v31);
  if (*(_QWORD **)v48 != v49 && *(_QWORD *)v48)
    MEMORY[0x2348A0E84]();
  if (HIDWORD(__n))
    free(__src);
  return v32;
}

uint64_t sub_22EA01A14(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _BYTE v15[64];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _BYTE v22[24];
  int v23;
  __int16 v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v13 = v15;
  v14 = 0x800000000;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = a1;
  v20 = a2;
  v21 = 0;
  sub_22EFC6D6C((uint64_t)v22, a2);
  *(_OWORD *)&v22[8] = xmmword_22F4555C0;
  v23 = 16842752;
  v24 = 0;
  v25 = 0;
  sub_22EC56024((uint64_t)&v12);
  sub_22EC63520(a1, (uint64_t)&v12, a3, 0, 0);
  v5 = 0;
  HIBYTE(v23) = 0;
  if ((_DWORD)v12 == 2)
  {
    v6 = *(_QWORD *)v13 & 0xFFFFFFFFFFFFFFFCLL;
    v7 = *(_DWORD *)(v6 + 28) & 0x7F;
    if (v7 <= 0x2F && ((1 << v7) & 0xC00000060000) != 0)
    {
      v6 = sub_22EFBAEA4(v6);
      v7 = *(_DWORD *)(v6 + 28) & 0x7F;
    }
    if (v7 - 38 < 0xFFFFFFFB || (v9 = (unsigned __int16)*(_DWORD *)(v6 + 72) >> 13, v9 > 4))
      v5 = 0;
    else
      v5 = dword_22F46A234[v9];
  }
  if (v16)
  {
    v11 = sub_22EC6CBD0(v16);
    MEMORY[0x2348A0E9C](v11, 0x10E0C409F09D3C3);
  }
  if (v13 != v15)
    free(v13);
  return v5;
}

void sub_22EA01B98(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _BYTE *a5, unint64_t *a6, int a7)
{
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  const void *v18;
  size_t v19;
  unsigned int v20;
  _BYTE *v21;
  uint64_t v22;
  _BOOL8 v23;
  unint64_t v24;
  _BYTE *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _BYTE __p[47];
  __int16 v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _DWORD *v80;
  uint64_t v81;
  int v82;
  uint64_t (**v83)();
  int v84;
  char v85;
  uint64_t v86;
  _BYTE v87[11];
  __int16 v88;
  char v89;
  char v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  int v94;
  int v95;
  _BYTE v96[32];
  _QWORD v97[6];

  v97[4] = *MEMORY[0x24BDAC8D0];
  if (sub_22E95A25C(*a2))
    return;
  *a6 = 0;
  v84 = 16777217;
  memset(v87, 0, sizeof(v87));
  v86 = 0;
  v83 = &off_24FAB7860;
  v88 = 0;
  v89 = a7;
  v90 = a7 ^ 1;
  v85 = 0;
  v14 = a3;
  *(_QWORD *)__p = *a2;
  *(_DWORD *)&__p[8] = a3;
  sub_22EFC6D6C((uint64_t)&__p[16], *(uint64_t *)__p);
  sub_22EC6AB20(a1, (uint64_t *)__p, 0, (uint64_t *)a4, (uint64_t)a5, (uint64_t)&v83, 1, 0, (uint64_t)&v91, 0, 0, 1u);
  if (v91)
  {
    if (v94 && !*(_QWORD *)v93)
    {
      if (a7)
        v33 = 4020;
      else
        v33 = 5076;
      *(_QWORD *)&__p[8] = *(_QWORD *)(a1 + 88) + 2128;
      *(_DWORD *)&__p[16] = v33;
      v34 = *a2;
      v35 = (_BYTE *)sub_22E3B8AAC(*(uint64_t *)&__p[8]);
      *(_QWORD *)__p = v35;
      v36 = *v35;
      v35[v36 + 1] = 5;
      *v35 = v36 + 1;
      *(_QWORD *)&v35[8 * v36 + 16] = v34;
      sub_22EC6BEF8(a1, (uint64_t)&v91, (uint64_t)__p, 1);
      if (*(_QWORD *)__p && *(_QWORD *)&__p[8])
        sub_22E3BB10C(*(unint64_t *)&__p[8], *(unint64_t *)__p);
      if ((v91 & 7) != 0)
        v37 = 0;
      else
        v37 = v91 & 0xFFFFFFFFFFFFFFF8;
      *a2 = v37;
    }
    else
    {
      if (a5 && *((_QWORD *)a5 + 1))
      {
        v15 = sub_22E958204(a1, (uint64_t)a5, 0);
        sub_22EC6887C(&v91, *(unsigned int **)(a1 + 72), (uint64_t)__p);
        v16 = *a2;
        if (!v96[28])
          goto LABEL_49;
        v17 = *(unsigned int **)(v16 + 16);
        v20 = *v17;
        v18 = v17 + 4;
        v19 = v20;
        if (__p[23] >= 0)
          v21 = __p;
        else
          v21 = *(_BYTE **)__p;
        v22 = __p[23] & 0x7F;
        if (__p[23] < 0)
          v22 = *(_QWORD *)&__p[8];
        if (v19 == v22)
        {
          if (v19)
            v23 = memcmp(v18, v21, v19) == 0;
          else
            v23 = 1;
        }
        else
        {
LABEL_49:
          v23 = 0;
        }
        if (a7)
          v38 = 4014;
        else
          v38 = 5072;
        v81 = *(_QWORD *)(a1 + 88) + 2128;
        v82 = v38;
        v39 = (_BYTE *)sub_22E3B8AAC(v81);
        v80 = v39;
        v40 = v39 + 1;
        v41 = *v39;
        v40[v41] = 5;
        *v39 = v41 + 3;
        v42 = v39 + 16;
        *(_QWORD *)&v42[8 * v41] = v16;
        v43 = (v41 + 1);
        v40[v43] = 13;
        *(_QWORD *)&v42[8 * v43] = v15;
        v44 = (v41 + 2);
        v40[v44] = 2;
        *(_QWORD *)&v42[8 * v44] = v23;
        sub_22E4D6448((uint64_t)(v39 + 336), *(_QWORD *)a5, 1);
        sub_22EC6BEF8(a1, (uint64_t)&v91, (uint64_t)&v80, a7 ^ 1);
        if (v80 && v81)
          sub_22E3BB10C(v81, (unint64_t)v80);
        v14 = a3;
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      else
      {
        if (a7)
          v29 = 4020;
        else
          v29 = 5076;
        *(_QWORD *)&__p[8] = *(_QWORD *)(a1 + 88) + 2128;
        *(_DWORD *)&__p[16] = v29;
        v30 = *a2;
        v31 = (_BYTE *)sub_22E3B8AAC(*(uint64_t *)&__p[8]);
        *(_QWORD *)__p = v31;
        v32 = *v31;
        v31[v32 + 1] = 5;
        *v31 = v32 + 1;
        *(_QWORD *)&v31[8 * v32 + 16] = v30;
        sub_22EC6BEF8(a1, (uint64_t)&v91, (uint64_t)__p, a7 ^ 1);
        if (*(_QWORD *)__p && *(_QWORD *)&__p[8])
          sub_22E3BB10C(*(unint64_t *)&__p[8], *(unint64_t *)__p);
      }
      if ((a7 & 1) == 0)
      {
        memset(__p, 0, 32);
        if (v92)
        {
          v45 = v14 | (a3 << 32);
          sub_22F0AB9D8((uint64_t)&__p[8], *(_QWORD *)(a1 + 88), v92, v45);
          *(_QWORD *)__p = v45;
          if (*(_QWORD *)&__p[8])
            a5 = __p;
        }
        if ((v91 & 7) != 0)
          v46 = 0;
        else
          v46 = v91 & 0xFFFFFFFFFFFFFFF8;
        *a6 = sub_22EA003D8((_QWORD *)a1, v46, v14, (uint64_t *)a4, (uint64_t)a5, 0, 0, 0, 0, 1u, 1u, 0);
        if (*(_DWORD *)&__p[28])
          free(*(void **)&__p[16]);
      }
    }
    *(_QWORD *)__p = v97;
    sub_22E8D19C8((void ***)__p);
    v47 = v93;
    if (v93 != v96)
      goto LABEL_68;
    return;
  }
  *(_QWORD *)__p = v97;
  sub_22E8D19C8((void ***)__p);
  if (v93 != v96)
    free(v93);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) == 0 || (a7 & 1) != 0)
  {
LABEL_26:
    if (!a5 || !*((_QWORD *)a5 + 1) && (!*(_DWORD *)a5 || !*((_DWORD *)a5 + 1)))
    {
      if (a7)
        v48 = 4019;
      else
        v48 = 5075;
      sub_22E8FCA40((_QWORD *)a1, a3, v48, 0, (uint64_t)&v91);
      sub_22E8BAE44((uint64_t)&v91, a2);
LABEL_75:
      sub_22E903BEC((unsigned int *)&v91);
      return;
    }
    v79 = sub_22E958204(a1, (uint64_t)a5, 0);
    if (v79)
    {
      if (a7)
        v26 = 4013;
      else
        v26 = 5029;
      sub_22E8FCA40((_QWORD *)a1, a3, v26, 0, (uint64_t)&v91);
      v27 = sub_22E8BAE44((uint64_t)&v91, a2);
      v28 = sub_22E894FB4(v27, (uint64_t *)&v79);
      *(_QWORD *)__p = *(_QWORD *)a5;
      sub_22E8906A0(v28, (uint64_t *)__p);
      goto LABEL_75;
    }
    v49 = *((_QWORD *)a5 + 1);
    if (!v49)
      return;
    if ((sub_22F0AAC5C(v49) & 8) != 0)
    {
      v52 = *a2;
      v53 = a1;
      v54 = a4;
      v55 = (uint64_t)a5;
      v56 = a3;
LABEL_85:
      *a6 = sub_22ED71588(v53, v54, 0, v55, v52, v56);
      return;
    }
    v50 = *((_QWORD *)a5 + 1);
    if (!v50 || (sub_22F0AAC5C(v50) & 4) == 0)
      return;
    if ((**(_BYTE **)(a1 + 72) & 0x10) == 0)
      goto LABEL_82;
    v57 = *(_QWORD *)(a1 + 216);
    v58 = *(_WORD *)(v57 + 8);
    if ((v58 & 0x7Eu) - 34 > 3)
    {
      v68 = v58 & 0x7F;
      if (v68 <= 0x18 && ((1 << v68) & 0x1000006) != 0 || v68 - 52 < 6)
        goto LABEL_103;
    }
    else
    {
      v59 = *((_QWORD *)a5 + 1);
      v61 = *(_QWORD *)(v59 + 8);
      v60 = *(_QWORD *)(v59 + 16);
      if (v60 && (*(_QWORD *)(v59 + 8) & 6) == 2 && (*(_DWORD *)(v60 + 28) & 0x7Fu) - 35 < 3)
        goto LABEL_103;
      v62 = sub_22E46A3A0(v57 - 64);
      if (v62 != v63)
      {
        v64 = v62;
        v65 = v63;
        v66 = v60 & (v61 << 61 >> 63);
        do
        {
          if (v66)
          {
            v67 = *(_QWORD *)(**(_QWORD **)(v64 + 16) & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v67 + 8) & 0xF) != 0)
              v67 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v64 + 16));
            if (*(_QWORD *)(*(_QWORD *)((v66 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((v67 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
              goto LABEL_103;
          }
          v64 += 24;
        }
        while (v64 != v65);
      }
    }
    if ((*(_DWORD *)(a4 + 8) & 0x100) == 0)
    {
LABEL_82:
      v51 = 5027;
LABEL_104:
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)a5, v51, 0, (uint64_t)&v91);
      v78 = *((_QWORD *)a5 + 1);
      v69 = sub_22EA02390((uint64_t)&v91, &v78);
      v70 = *(unsigned int **)(*a2 + 16);
      v71 = *v70;
      v80 = v70 + 4;
      v81 = v71;
      v72 = sub_22F2F2210(v69, (uint64_t)&v80);
      LODWORD(v77) = *(_QWORD *)a5;
      HIDWORD(v77) = a3;
      v73 = sub_22E8906A0(v72, &v77);
      v74 = *(unsigned int *)a5 | ((unint64_t)*(unsigned int *)a5 << 32);
      *(_QWORD *)&__p[12] = 0;
      __p[20] = 0;
      *(_QWORD *)__p = v74;
      __p[8] = 0;
      memset(&__p[34], 0, 13);
      strcpy(&__p[24], "typename ");
      v76 = 9;
      sub_22E890748(v73, __p);
      if ((char)v76 < 0)
        operator delete(*(void **)&__p[24]);
      sub_22E903BEC((unsigned int *)&v91);
      v52 = *a2;
      v53 = a1;
      v54 = a4;
      v55 = (uint64_t)a5;
      v56 = a3;
      goto LABEL_85;
    }
LABEL_103:
    v51 = 5391;
    goto LABEL_104;
  }
  v24 = *a2;
  LODWORD(v91) = 0;
  v92 = v24;
  v94 = a3;
  v95 = a3;
  memset(__p, 0, 32);
  v80 = 0;
  LOBYTE(v79) = 0;
  if (a5)
    v25 = a5;
  else
    v25 = __p;
  if (sub_22ED562E8((_QWORD *)a1, (uint64_t *)a4, (uint64_t)v25, 0, (int *)&v91, 0, 1, (unint64_t *)&v80, &v79, 0) != 2)
  {
    if (*(_DWORD *)&__p[28])
      free(*(void **)&__p[16]);
    goto LABEL_26;
  }
  sub_22F345DF8((_QWORD *)a1, (uint64_t)v80, a3);
  if (*(_DWORD *)&__p[28])
  {
    v47 = *(void **)&__p[16];
LABEL_68:
    free(v47);
  }
}

uint64_t sub_22EA02390(uint64_t a1, uint64_t *a2)
{
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 80))
  {
    sub_22EA44EF0((unsigned __int8 **)(a1 + 32), a2);
  }
  else if (*(_BYTE *)(a1 + 92))
  {
    v5 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v8 = v6;
    v7 = sub_22F2F1D6C(v5, &v8);
    sub_22EA44EF0((unsigned __int8 **)(v7[1] + 32 * *(unsigned int *)(a1 + 88) + 8), a2);
  }
  return a1;
}

uint64_t sub_22EA02430(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  unsigned int v8;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  BOOL v24;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  const void *v43;
  size_t v44;
  unsigned int v45;
  const void *p_p;
  unint64_t v47;
  _BOOL4 v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  unint64_t v52;
  unsigned __int8 *v53;
  _BYTE *v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v73;
  char v74;
  _QWORD *v75;
  uint64_t v76;
  BOOL v77;
  unint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  int v83;
  int v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  BOOL v94;
  unint64_t v95;
  BOOL v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  int v101;
  uint64_t v104;
  unsigned int v105;
  _DWORD *v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _BOOL4 v116;
  uint64_t v117;
  _BYTE *v119;
  unint64_t v120;
  int v121;
  void *__p;
  unint64_t v123;
  int v124;
  char v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130[2];
  void *v131;
  int v132;
  _BYTE v133[32];
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  _BYTE v138[64];
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  unsigned int v144;
  _QWORD v145[2];
  uint64_t v146;
  __int16 v147;
  int v148;
  char v149;
  uint64_t v150;

  v8 = a5;
  v150 = *MEMORY[0x24BDAC8D0];
  v129 = a5;
  v126 = *a4;
  v127 = a5;
  sub_22EFC6D6C((uint64_t)&v128, v126);
  v14 = sub_22E90328C((uint64_t)a1);
  v15 = (uint64_t *)(a3 + 8);
  if ((*(_BYTE *)(a1[9] + 1) & 1) != 0 && *(_QWORD *)(a3 + 8))
  {
    v16 = *a4;
    v17 = sub_22EAA96DC((uint64_t)a1, v13, a3);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 40);
      if ((v18 & 7) == 0 && v16 == (v18 & 0xFFFFFFFFFFFFFFF8))
        return 0;
    }
    v8 = v129;
  }
  v19 = *a4;
  v135 = 0;
  v136 = v138;
  v137 = 0x800000000;
  v139 = 0;
  v140 = 0;
  v141 = 0;
  v142 = a1;
  v143 = v19;
  v144 = v8;
  sub_22EFC6D6C((uint64_t)v145, v19);
  v145[1] = 0;
  v146 = 0;
  v147 = 0;
  v148 = 257;
  v149 = 0;
  sub_22EC56024((uint64_t)&v135);
  sub_22EC64BE8((uint64_t)a1, (uint64_t)&v135, (uint64_t)a2, a3, v14 == 0, 0);
  v21 = *(_DWORD *)a3;
  v20 = *(_DWORD *)(a3 + 4);
  v22 = *(_QWORD *)(a3 + 8);
  if (*(_DWORD *)a3 && v20 && !v22)
  {
LABEL_11:
    v8 = 1;
    goto LABEL_12;
  }
  if (!(_DWORD)v137)
  {
    v77 = !v20 || v21 == 0;
    if (v77 && !v22 && (*(_BYTE *)a1[9] & 0x10) != 0)
    {
      if (sub_22EA01178(a1, *a4, v129))
        goto LABEL_205;
      v21 = *(_DWORD *)a3;
      v20 = *(_DWORD *)(a3 + 4);
    }
  }
  if ((!v21 || !v20) && v14 && !*v15)
  {
    if ((_DWORD)v137)
    {
      v69 = v136;
      v70 = 8 * v137;
      while ((*(_DWORD *)((*v69 & 0xFFFFFFFFFFFFFFFCLL) + 28) & 0x7F) != 0x16
           && (*(_DWORD *)((*v69 & 0xFFFFFFFFFFFFFFFCLL) + 28) & 0x7Fu) - 33 >= 0xA)
      {
        if ((*(_DWORD *)((*v69 & 0xFFFFFFFFFFFFFFFCLL) + 28) & 0x7Fu) - 26 < 7
          && *(_BYTE *)(v142[9] + 1) & (*(_WORD *)(a6 + 16) == 46))
        {
          break;
        }
        ++v69;
        v70 -= 8;
        if (!v70)
          goto LABEL_129;
      }
    }
    else
    {
LABEL_129:
      v73 = sub_22EB23CEC(a1, (int *)&v135, (uint64_t)a2, *a4);
      if (v74)
        goto LABEL_11;
      if (v73)
      {
LABEL_131:
        v8 = 4;
        goto LABEL_12;
      }
      if (!(_DWORD)v137)
        sub_22EC56E74((uint64_t)a1, (uint64_t)&v135);
    }
  }
  v23 = 0;
  while (!(_DWORD)v135)
  {
    if (*(_DWORD *)a3)
      v24 = *(_DWORD *)(a3 + 4) == 0;
    else
      v24 = 1;
    if (v24 && !*v15 && *(_WORD *)(a6 + 16) == 21)
    {
      v26 = *(_QWORD *)a1[9];
      if ((v26 & 0x100) != 0)
      {
        v8 = 5;
        goto LABEL_12;
      }
      if ((v26 & 8) == 0 && sub_22EA03278((uint64_t)a1, v129, *a4, a2))
      {
        v8 = 4;
        goto LABEL_12;
      }
    }
    v27 = *(_QWORD *)a1[9];
    if ((v27 & 0x1000) != 0 && (!*(_DWORD *)a3 || !*(_DWORD *)(a3 + 4)) && !*v15 && *(_WORD *)(a6 + 16) == 46)
    {
      sub_22F36E3C0(a1[11], v126);
      v8 = 11;
      goto LABEL_12;
    }
    if (!(v23 & 1 | (v27 >> 8) & 1) && (sub_22EA03AB0((uint64_t)a1, (uint64_t)&v135, (uint64_t)a2, a3, a4, v129) & 1) != 0)
      goto LABEL_157;
    if ((a7 == 0) | v23 & 1)
      goto LABEL_151;
    sub_22EC6AB20((uint64_t)a1, &v143, v146, a2, a3, a7, 1, 0, (uint64_t)v130, 0, 0, 1u);
    if (!v130[0])
    {
      v28 = 0;
      goto LABEL_45;
    }
    if (v132)
      v29 = *(_QWORD *)v131;
    else
      v29 = 0;
    v30 = sub_22F2E6D78((uint64_t)v130);
    v31 = a1[9];
    if ((*(_BYTE *)(v31 + 1) & 1) != 0 && *(_WORD *)(a6 + 16) == 46 && v30)
    {
      v32 = *(_DWORD *)(v30 + 28);
      if ((v32 & 0x7Fu) - 26 < 7)
      {
        v33 = 4020;
        v34 = 4014;
        goto LABEL_63;
      }
    }
    else
    {
      if (!v30)
        goto LABEL_62;
      v32 = *(_DWORD *)(v30 + 28);
    }
    v35 = v32 & 0x7F;
    if ((v35 - 33) < 0xA || (v35 | 4) == 0x16)
    {
      v33 = 5076;
      v34 = 5072;
      goto LABEL_63;
    }
LABEL_62:
    v33 = 5050;
    v34 = 4012;
LABEL_63:
    if (*(_DWORD *)(a3 + 4))
      v36 = *(_DWORD *)a3 == 0;
    else
      v36 = 1;
    if (!v36 || *(_QWORD *)(a3 + 8))
    {
      v117 = v29;
      sub_22EC6887C(v130, (unsigned int *)v31, (uint64_t)&__p);
      v41 = *a4;
      if (!v133[28])
        goto LABEL_81;
      v42 = *(unsigned int **)(v41 + 16);
      v45 = *v42;
      v43 = v42 + 4;
      v44 = v45;
      if (v125 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      v47 = v125 & 0x7F;
      if (v125 < 0)
        v47 = v123;
      if (v44 == v47)
      {
        if (v44)
          v48 = memcmp(v43, p_p, v44) == 0;
        else
          v48 = 1;
        v116 = v48;
      }
      else
      {
LABEL_81:
        v116 = 0;
      }
      v49 = a1[11] + 2128;
      v119 = 0;
      v120 = v49;
      v121 = v34;
      v119 = (_BYTE *)sub_22E3B8AAC(v49);
      v119[*v119 + 1] = 5;
      v50 = v119;
      v51 = *v119;
      *v119 = v51 + 1;
      *(_QWORD *)&v50[8 * v51 + 16] = v41;
      v52 = sub_22E958204((uint64_t)a1, a3, 0);
      v53 = v119;
      if (!v119)
      {
        v53 = (unsigned __int8 *)sub_22E3B8AAC(v120);
        v119 = v53;
      }
      v53[*v53 + 1] = 13;
      v54 = v119;
      v55 = *v119;
      *v119 = v55 + 1;
      *(_QWORD *)&v54[8 * v55 + 16] = v52;
      v54[(v55 + 1) + 1] = 2;
      v56 = v119;
      v57 = *v119;
      *v119 = v57 + 1;
      *(_QWORD *)&v56[8 * v57 + 16] = v116;
      sub_22E4D6448((uint64_t)(v56 + 336), *(_QWORD *)a3, 1);
      sub_22EC6BEF8((uint64_t)a1, (uint64_t)v130, (uint64_t)&v119, 1);
      if (v119 && v120)
        sub_22E3BB10C(v120, (unint64_t)v119);
      v29 = v117;
      if (v125 < 0)
        operator delete(__p);
    }
    else
    {
      v37 = a1[11] + 2128;
      __p = 0;
      v123 = v37;
      v124 = v33;
      v38 = *a4;
      __p = (void *)sub_22E3B8AAC(v37);
      *((_BYTE *)__p + *(unsigned __int8 *)__p + 1) = 5;
      v39 = __p;
      v40 = *(unsigned __int8 *)__p;
      *(_BYTE *)__p = v40 + 1;
      v39[v40 + 2] = v38;
      sub_22EC6BEF8((uint64_t)a1, (uint64_t)v130, (uint64_t)&__p, 1);
      if (__p && v123)
        sub_22E3BB10C(v123, (unint64_t)__p);
    }
    v58 = v130[0];
    v59 = v130[0] & 0xFFFFFFFFFFFFFFF8;
    if ((v130[0] & 7) != 0)
      v59 = 0;
    *a4 = v59;
    if (v132 && !*(_QWORD *)v131)
    {
      v28 = 1;
      v8 = 2;
    }
    else
    {
      LODWORD(v135) = 0;
      LODWORD(v137) = 0;
      if (v139)
      {
        v60 = sub_22EC6CBD0(v139);
        MEMORY[0x2348A0E9C](v60, 0x10E0C409F09D3C3);
        v58 = v130[0];
      }
      HIBYTE(v148) = 0;
      v139 = 0;
      v140 = 0;
      v143 = v58;
      if (v29)
      {
        v61 = *(unsigned int *)(v29 + 28);
        v62 = v137;
        if (v137 >= (unint64_t)HIDWORD(v137))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v62 = v137;
        }
        *((_QWORD *)v136 + v62) = (v61 >> 13) & 3 | v29;
        LODWORD(v137) = v137 + 1;
        LODWORD(v135) = 2;
      }
      else if ((_DWORD)v135 != 2)
      {
        goto LABEL_114;
      }
      v63 = *(_QWORD *)v136 & 0xFFFFFFFFFFFFFFFCLL;
      v64 = *(_DWORD *)(v63 + 28);
      if ((v64 & 0x7Fu) <= 0x2F && ((1 << (v64 & 0x7F)) & 0xC00000060000) != 0)
      {
        v63 = sub_22EFBAEA4(*(_QWORD *)v136 & 0xFFFFFFFFFFFFFFFCLL);
        v64 = *(_DWORD *)(v63 + 28);
      }
      if ((v64 & 0x7F) != 0x33)
      {
LABEL_114:
        v28 = 2;
        goto LABEL_45;
      }
      v65 = *(_QWORD *)(v63 + 40);
      if ((v65 & 7) != 0)
        v66 = 0;
      else
        v66 = v65 & 0xFFFFFFFFFFFFFFF8;
      v67 = sub_22EB23CEC(a1, (int *)&v135, (uint64_t)a2, v66);
      if (v68)
      {
        v8 = 1;
        v28 = 1;
      }
      else
      {
        if (!v67)
          goto LABEL_114;
        v28 = 1;
        v8 = 4;
      }
    }
LABEL_45:
    __p = &v134;
    sub_22E8D19C8((void ***)&__p);
    if (v131 != v133)
      free(v131);
    v23 = 1;
    if (v28 != 2)
    {
      if (v28)
        goto LABEL_12;
LABEL_151:
      v8 = 0;
      BYTE1(v148) = 0;
      goto LABEL_152;
    }
  }
  if ((_DWORD)v135 == 1)
  {
    v8 = 6;
    goto LABEL_12;
  }
  if ((_DWORD)v135 == 5)
  {
    v8 = 1;
    if ((*(_BYTE *)(a1[9] + 1) & 1) == 0 || *(_WORD *)(a6 + 16) != 46)
      goto LABEL_12;
    if (!(_DWORD)v137)
      goto LABEL_11;
    v75 = v136;
    v76 = 8 * v137;
    while (!sub_22ED5601C(*v75 & 0xFFFFFFFFFFFFFFFCLL, 1, 0))
    {
      ++v75;
      v8 = 1;
      v76 -= 8;
      if (!v76)
        goto LABEL_12;
    }
    v8 = 1;
    sub_22ED56130((uint64_t)a1, (uint64_t)&v135, 1, 1);
    if ((_DWORD)v135 == 5)
      goto LABEL_12;
  }
  else
  {
LABEL_157:
    LOBYTE(v8) = 0;
  }
  v79 = *(_QWORD *)a1[9];
  if ((v79 & 0x100) == 0 || *(_WORD *)(a6 + 16) != 46)
    goto LABEL_173;
  if ((v8 & 1) != 0)
    goto LABEL_170;
  LODWORD(v80) = 0;
  if (*(_DWORD *)(a3 + 4))
    v81 = *(_DWORD *)a3 == 0;
  else
    v81 = 1;
  if (v81 && !*(_QWORD *)(a3 + 8))
    v80 = (v79 >> 12) & 1;
  if (!sub_22ED56220((uint64_t)a1, (uint64_t)&v135, 1, 0, v80))
  {
LABEL_173:
    v130[0] = (uint64_t)a1;
    v130[1] = a3;
    v131 = &v129;
    v82 = *(_QWORD *)v136 & 0xFFFFFFFFFFFFFFFCLL;
    v83 = *(_DWORD *)(v82 + 28);
    if ((v83 & 0x7Fu) <= 0x2F && ((1 << (v83 & 0x7F)) & 0xC00000060000) != 0)
    {
      v82 = sub_22EFBAEA4(*(_QWORD *)v136 & 0xFFFFFFFFFFFFFFFCLL);
      v83 = *(_DWORD *)(v82 + 28);
    }
    v85 = v83 & 0x7F;
    if ((v85 - 43) >= 0xFFFFFFF6)
    {
      sub_22EB17F48((uint64_t)a1, (_DWORD *)v82, &v129, 1, 0, 0, 0, 0);
      if ((*(_DWORD *)(v82 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
        sub_22EB4E494((uint64_t)a1, *(_DWORD *)(v82 + 24), v82, 0, v87, v88, v89, v90);
      else
        *(_DWORD *)(v82 + 28) |= 0x800u;
      v98 = *(_QWORD *)v136 & 0xFFFFFFFFFFFFFFFCLL;
      v99 = v82;
      goto LABEL_204;
    }
    if (v85 > 26)
    {
      if (v85 == 27)
      {
        v8 = 12;
        goto LABEL_12;
      }
      if (v85 == 43)
      {
        v8 = 1;
        sub_22EB17F48((uint64_t)a1, (_DWORD *)v82, &v129, 1, 0, 0, 0, 0);
        goto LABEL_12;
      }
    }
    else
    {
      if (v85 == 18)
      {
        v86 = *(uint64_t **)(v82 + 48);
        if (v86)
          goto LABEL_216;
        goto LABEL_224;
      }
      if (v85 == 22)
      {
        v86 = (uint64_t *)v82;
LABEL_216:
        sub_22EB17F48((uint64_t)a1, v86, &v129, 1, 0, 0, 0, 0);
        if (*(_WORD *)(a6 + 16) == 25)
        {
          v8 = 0;
          BYTE1(v148) = 0;
          goto LABEL_12;
        }
        sub_22F36D148(a1[11], v86, 0);
LABEL_205:
        v8 = 3;
        goto LABEL_12;
      }
    }
    if ((v85 - 33) >= 0xFFFFFFF9 && (v85 | 2) != 31)
    {
      v8 = 8;
      goto LABEL_12;
    }
LABEL_224:
    v101 = *(unsigned __int16 *)(a6 + 16);
    if (v101 != 5)
    {
      if (v101 != 30 && v101 != 27)
        goto LABEL_248;
      if (v85 <= 0x2F && ((1 << v85) & 0xC00000060000) != 0)
        v85 = *(_DWORD *)(sub_22EFBAEA4(v82) + 28) & 0x7F;
      if ((v85 - 52) >= 6 && v85 != 29)
      {
LABEL_248:
        v108 = sub_22EB2348C((uint64_t)a1, a3, (uint64_t)&v135, v101 == 21);
        v109 = v108;
        if ((_DWORD)v135 != 2 || (v108 & 1) != 0 || sub_22E8BB0E8(v82))
        {
          BYTE1(v148) = 0;
          v110 = a1[11];
          v111 = v140;
          if (*v15)
          {
            v112 = sub_22F0ABC50(v15, v110);
            v113 = v114;
          }
          else
          {
            v112 = 0;
            v113 = 0;
          }
          sub_22F0605AC(v110, v111, v112, v113, (uint64_t)&v143, v109, v135 == 3, v136, (uint64_t)v136 + 8 * v137);
          v8 = 7;
          goto LABEL_12;
        }
        goto LABEL_131;
      }
    }
    if ((sub_22EA03AB0((uint64_t)a1, (uint64_t)&v135, (uint64_t)a2, a3, a4, v129) & 1) == 0)
    {
      v101 = *(unsigned __int16 *)(a6 + 16);
      goto LABEL_248;
    }
    if ((_DWORD)v135 == 2)
    {
      v104 = *(_QWORD *)v136 & 0xFFFFFFFFFFFFFFFCLL;
      v105 = *(_DWORD *)(v104 + 28) & 0x7F;
      if (v105 <= 0x2F && ((1 << v105) & 0xC00000060000) != 0)
      {
        v104 = sub_22EFBAEA4(v104);
        v105 = *(_DWORD *)(v104 + 28) & 0x7F;
      }
      if (v105 - 33 >= 0xA)
        v107 = 0;
      else
        v107 = (_DWORD *)v104;
    }
    else
    {
      v107 = 0;
    }
    sub_22EB17F48((uint64_t)a1, v107, &v129, 1, 0, 0, 0, 0);
    v98 = *(_QWORD *)v136 & 0xFFFFFFFFFFFFFFFCLL;
    v99 = (unint64_t)v107;
LABEL_204:
    sub_22EA03DDC((uint64_t)v130, v99, v98);
    goto LABEL_205;
  }
  sub_22ED56130((uint64_t)a1, (uint64_t)&v135, 1, 1);
LABEL_170:
  if (v137 >= 2)
  {
    sub_22EF6E25C(a1[11], (char *)v136, (char *)v136 + 8 * v137);
LABEL_198:
    BYTE1(v148) = 0;
    v8 = 10;
    goto LABEL_152;
  }
  if (!(_DWORD)v137)
  {
    sub_22F36E3C0(a1[11], v126);
    goto LABEL_198;
  }
  v91 = sub_22ED5601C(*(_QWORD *)v136 & 0xFFFFFFFFFFFFFFFCLL, 1, 0);
  v92 = *(_DWORD *)(v91 + 28) & 0x7F;
  v93 = *(_QWORD *)v136 & 0xFFFFFFFFFFFFFFFCLL;
  v94 = (*(_DWORD *)(v93 + 28) & 0x7E) != 0x2E || v93 == 0;
  v95 = *(_QWORD *)v136 & 0xFFFFFFFFFFFFFFF8;
  if (v94)
    v95 = v91 & 0xFFFFFFFFFFFFFFF9;
  if (*(_DWORD *)(a3 + 4))
    v96 = *(_DWORD *)a3 == 0;
  else
    v96 = 1;
  v97 = *(_QWORD *)(a3 + 8);
  if (!v96 || v97)
    sub_22F36E410(a1[11], v97, 0, v95);
  if (v92 == 29)
    goto LABEL_198;
  if (v92 == 31)
    v8 = 9;
  else
    v8 = 8;
LABEL_12:
  if (BYTE1(v148))
  {
    if ((_DWORD)v135 == 5)
    {
      sub_22EC64D18(v142, (uint64_t)&v135);
    }
    else if (v140 && (*(_DWORD *)(v142[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v142, (uint64_t)&v135);
    }
  }
LABEL_152:
  if (v139)
  {
    v115 = sub_22EC6CBD0(v139);
    MEMORY[0x2348A0E9C](v115, 0x10E0C409F09D3C3);
  }
  if (v136 != v138)
    free(v136);
  return v8;
}

unint64_t sub_22EA03278(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  _DWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  unsigned int v41;
  unsigned __int8 v42;
  unsigned int v43;
  int Key;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  __int128 v58;
  uint64_t v59;
  uint64_t (***v60)();
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  int v71;
  uint64_t v72;
  unsigned int v73[8];
  unint64_t v74;
  void **v75[3];
  uint64_t v76[12];
  _BYTE v77[24];
  __int128 v78;
  _BYTE v79[22];
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  int v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  __int16 v87;
  __int128 v88;
  uint64_t (***v89)();
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t (**v94)();
  int v95;
  char v96;
  uint64_t v97;
  _BYTE v98[11];
  char *v99;
  __int128 v100;
  void *v101[2];
  uint64_t v102;
  _BYTE v103[22];
  __int128 v104;
  uint64_t v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v8 = a4;
  do
  {
    v9 = v8;
    if ((*((_BYTE *)v8 + 10) & 0x40) != 0)
      break;
    v8 = (uint64_t *)*v8;
  }
  while (*v9);
  v10 = v9[45];
  if (!v10)
  {
    v11 = v9;
    do
    {
      v11 = (uint64_t *)*v11;
      v10 = v11[45];
    }
    while (!v10);
  }
  v12 = *(_QWORD *)(a1 + 216);
  v13 = *(_QWORD *)(a1 + 3200);
  *(_QWORD *)(a1 + 3200) = 0;
  v14 = *(_QWORD *)(a1 + 10288);
  v54 = *(_DWORD *)(a1 + 2192);
  v55 = *(_DWORD *)(a1 + 1944);
  *(_QWORD *)(a1 + 216) = v10;
  *(_QWORD *)(a1 + 10288) = 0;
  *(_DWORD *)(a1 + 1944) = *(_DWORD *)(a1 + 1904);
  *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a1 + 1960);
  v15 = sub_22EA1C0A0(*(_QWORD *)(a1 + 88), a3);
  v74 = v15;
  if (!v15)
    goto LABEL_11;
  sub_22EA0483C(a1, v15, v9, 0);
  if ((*(_DWORD *)(v15 + 28) & 0x7Eu) - 52 > 5)
    goto LABEL_9;
  v18 = v13;
  v19 = *(_QWORD *)(a1 + 88);
  v51 = v12;
  v20 = v14;
  v21 = *(_QWORD *)(v15 + 48);
  v22 = *(_QWORD *)(v19 + 16480);
  *(_WORD *)v77 = 0;
  v23 = sub_22F369930(v19, v22, (unsigned __int16 *)v77);
  v24 = v19;
  v13 = v18;
  v25 = v21;
  v14 = v20;
  v12 = v51;
  if (!sub_22F36EDA0(v24, v25, v23, 0))
  {
LABEL_9:
    sub_22E8FCA40((_QWORD *)a1, a2, 0x1515u, 0, (uint64_t)v77);
    v16 = sub_22E890024((uint64_t)v77, (uint64_t *)&v74);
    LOBYTE(v94) = (**(_QWORD **)(a1 + 72) & 1) == 0;
    sub_22E894E38(v16, (unsigned __int8 *)&v94);
    sub_22E903BEC((unsigned int *)v77);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v74 + 24), 0x6Cu, 0, (uint64_t)v73);
    sub_22E903BEC(v73);
    v17 = v74;
  }
  else
  {
LABEL_11:
    v26 = *(_QWORD *)(a3 + 16);
    v53 = v13;
    if ((*(_QWORD *)v26 & 0xFFFFFFFEuLL) >= 0xA
      && ((v27 = *(_QWORD *)(v26 + 16), v28 = *(unsigned __int16 *)(v26 + 24), v27 == 0x69746C6975625F5FLL)
        ? (v29 = v28 == 24430)
        : (v29 = 0),
          v29))
    {
      v30 = v12;
      v32 = v14;
      LODWORD(v33) = 0;
      v34 = 0;
      v35 = 6322;
    }
    else
    {
      v30 = v12;
      v31 = *(_QWORD *)(a1 + 72);
      if ((*(_DWORD *)(v31 + 52) & 0x40000000) != 0)
      {
        v32 = v14;
        LODWORD(v33) = 0;
        v34 = 0;
        v35 = 4404;
      }
      else
      {
        v32 = v14;
        v33 = *(_QWORD *)v31 & 1;
        v34 = v33 == 0;
        if (v33)
          v35 = 5262;
        else
          v35 = 6664;
      }
    }
    v100 = 0uLL;
    v101[0] = &v102;
    v101[1] = (void *)0x100000000;
    *(_QWORD *)v103 = 0;
    *(_QWORD *)&v103[8] = 0;
    *(_QWORD *)&v103[14] = 0;
    v105 = 0;
    v104 = 0uLL;
    if (a4)
    {
      if (!v15)
      {
        v36 = v35;
        v52 = v33;
        v37 = sub_22F1CF5F4(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 32), v35, a2, *(_QWORD *)(a1 + 104));
        LODWORD(v33) = v52;
        v35 = v36;
        if (v37 >= 4)
        {
          v96 = 1;
          v95 = 16843009;
          memset(v98, 0, sizeof(v98));
          v97 = 0;
          v94 = &off_24FAB7948;
          v56 = a3;
          v57 = a2;
          sub_22EFC6D6C((uint64_t)&v58, a3);
          sub_22EC6AB20(a1, &v56, 0, a4, 0, (uint64_t)&v94, 0, 0, (uint64_t)v77, 0, 0, 1u);
          v100 = *(_OWORD *)v77;
          sub_22F24C77C((uint64_t)v101, (uint64_t)&v77[16]);
          *(_OWORD *)v103 = *(_OWORD *)v79;
          *(_QWORD *)&v103[14] = *(_QWORD *)&v79[14];
          sub_22EA44D30((void **)&v104);
          v104 = v80;
          v105 = v81;
          v81 = 0;
          v80 = 0uLL;
          v75[0] = (void **)&v80;
          sub_22E8D19C8(v75);
          if (*(__int128 **)&v77[16] != (__int128 *)((char *)&v78 + 8))
            free(*(void **)&v77[16]);
          v35 = v36;
          LODWORD(v33) = v52;
        }
      }
    }
    v14 = v32;
    v12 = v30;
    if ((**(_BYTE **)(a1 + 72) & 1) == 0
      || ((v33 | v34) & 1) == 0
      || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088) + 68) & 0xFFFFFFF7) != 3)
    {
      goto LABEL_33;
    }
    v38 = *(_DWORD **)(a3 + 16);
    v41 = *v38;
    v39 = v38 + 4;
    v40 = v41;
    v42 = atomic_load((unsigned __int8 *)&qword_253E4C0C0);
    if ((v42 & 1) == 0)
    {
      v50 = v35;
      v48 = __cxa_guard_acquire(&qword_253E4C0C0);
      v35 = v50;
      if (v48)
      {
        v49 = 0;
        qword_253E4C0C8 = 0;
        *(_QWORD *)&dword_253E4C0D0 = 0;
        qword_253E4C0D8 = 0x800000000;
        do
        {
          sub_22E3B39D4((llvm::StringMapImpl *)&qword_253E4C0C8, (&off_24FAB7730)[v49], (size_t)(&off_24FAB7730)[v49 + 1]);
          v49 += 2;
        }
        while (v49 != 36);
        __cxa_atexit((void (*)(void *))sub_22E90D950, &qword_253E4C0C8, &dword_22E3A8000);
        __cxa_guard_release(&qword_253E4C0C0);
        v12 = v30;
        v35 = v50;
      }
    }
    if (v40 < 8 || *v39 != 0x6574616572435241)
    {
      v43 = v35;
      Key = llvm::StringMapImpl::FindKey();
      v35 = v43;
      if (Key == -1 || Key == (unint64_t)dword_253E4C0D0)
      {
LABEL_33:
        sub_22E8FCA40((_QWORD *)a1, a2, v35, 0, (uint64_t)v77);
        v94 = (uint64_t (**)())a3;
        sub_22E8BAE44((uint64_t)v77, (uint64_t *)&v94);
        sub_22E903BEC((unsigned int *)v77);
      }
    }
    v13 = v53;
    if ((_QWORD)v100)
    {
      v46 = sub_22F2E6D78((uint64_t)&v100);
      if (!v46 || (*(_BYTE *)(v46 + 29) & 2) == 0)
      {
        v47 = *(_QWORD *)(a1 + 88) + 2128;
        *(_QWORD *)v77 = 0;
        *(_QWORD *)&v77[8] = v47;
        *(_DWORD *)&v77[16] = 5648;
        sub_22EC6BEF8(a1, (uint64_t)&v100, (uint64_t)v77, 0);
        if (*(_QWORD *)v77)
        {
          if (*(_QWORD *)&v77[8])
            sub_22E3BB10C(*(unint64_t *)&v77[8], *(unint64_t *)v77);
        }
      }
    }
    v17 = v74;
    if (!v74)
    {
      sub_22F30677C(&v94);
      v58 = 0u;
      v59 = 0;
      v60 = &v94;
      v72 = 0;
      v65 = 0u;
      v66 = 0u;
      v61 = 0u;
      v62 = 0u;
      v63 = 0u;
      v64 = 0u;
      v67 = 0u;
      v68 = 0u;
      v69 = 0u;
      v70 = 0u;
      v71 = 0;
      DWORD2(v65) = a2;
      DWORD1(v66) = a2;
      v56 = 28672;
      *(_QWORD *)v77 = &v56;
      *(_QWORD *)&v79[8] = 0;
      *(_OWORD *)&v77[8] = 0u;
      v78 = 0u;
      *(_DWORD *)v79 = 0;
      v80 = 0u;
      v82 = 0u;
      LODWORD(v81) = 8;
      v83 = 0;
      v84 = &v86;
      v85 = 0x800000000;
      v87 &= 0xFC00u;
      v88 = 0u;
      v89 = &v94;
      v93 = 0;
      v92 = 0u;
      v91 = 0u;
      v90 = 0u;
      sub_22E8ACEBC(0, 0, 0, 0, 0, 0, 0, 1, (uint64_t)v75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0,
        0,
        0,
        a2,
        0,
        a2,
        (uint64_t)v77,
        0,
        0,
        0,
        0,
        0);
      sub_22E824ABC((uint64_t)v77, (unint64_t)v75, (uint64_t)&v58 + 8, 0);
      sub_22E80F94C(v76);
      *(_DWORD *)v79 = 0;
      *(_QWORD *)&v79[8] = a3;
      DWORD1(v80) = a2;
      LODWORD(v80) = a2;
      v17 = sub_22EA130FC(a1, (uint64_t)v9, (uint64_t)v77);
      *(_DWORD *)(v17 + 28) |= 0x200u;
      sub_22EA06B98(a1, v17);
      sub_22E827F78((uint64_t)v77);
      if (DWORD1(v63))
        free(*((void **)&v62 + 1));
      sub_22E8D1BC4((uint64_t)v60, (uint64_t)&v60);
      sub_22E80F94C((uint64_t *)&v61);
      sub_22E80F94C(&v59);
      sub_22E8FB19C(&v99);
      sub_22E3B4EF4((uint64_t)&v94);
      v13 = v53;
    }
    *(_QWORD *)v77 = &v104;
    sub_22E8D19C8((void ***)v77);
    if (v101[0] != &v102)
      free(v101[0]);
  }
  if (v12)
  {
    *(_QWORD *)(a1 + 216) = v12;
    *(_QWORD *)(a1 + 3200) = v13;
    *(_QWORD *)(a1 + 10288) = v14;
    *(_DWORD *)(a1 + 1944) = v55;
    *(_DWORD *)(a1 + 2192) = v54;
  }
  return v17;
}

uint64_t sub_22EA03AB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unsigned int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v18;
  char *v19;
  size_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD v31[6];
  void *__p;
  char v33;
  int v34;
  unsigned int v35[24];
  _QWORD v36[2];
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _BYTE v40[64];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unsigned int v46;
  _BYTE v47[24];
  int v48;
  __int16 v49;
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v12 = *a5;
  v37 = 0;
  v38 = v40;
  v39 = 0x800000000;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = (_QWORD *)a1;
  v45 = v12;
  v46 = a6;
  sub_22EFC6D6C((uint64_t)v47, v12);
  *(_OWORD *)&v47[8] = xmmword_22F4555C0;
  v48 = 16842752;
  v49 = 0;
  v50 = 0;
  sub_22EC56024((uint64_t)&v37);
  sub_22EC64BE8(a1, (uint64_t)&v37, a3, a4, 0, 0);
  v13 = 0;
  if ((_DWORD)v37 == 2)
  {
    v14 = *(_QWORD *)v38 & 0xFFFFFFFFFFFFFFFCLL;
    v15 = *(_DWORD *)(v14 + 28) & 0x7F;
    if (v15 <= 0x2F && ((1 << v15) & 0xC00000060000) != 0)
    {
      v14 = sub_22EFBAEA4(v14);
      v15 = *(_DWORD *)(v14 + 28) & 0x7F;
    }
    if (v15 - 33 <= 4)
    {
      v18 = (unsigned __int16)*(_DWORD *)(v14 + 72) >> 13;
      if (v18 > 4)
      {
        v19 = 0;
        v20 = 0;
      }
      else
      {
        v19 = off_24FAB79C0[v18];
        v20 = qword_22F46A248[(unsigned __int16)*(_DWORD *)(v14 + 72) >> 13];
      }
      v21 = v20 - 1;
      if (v20 < v20 - 1)
        v21 = v20;
      v36[0] = v19;
      v36[1] = v21;
      sub_22E8FCA40((_QWORD *)a1, a6, 0x53u, 0, (uint64_t)v35);
      v22 = sub_22E8BAE44((uint64_t)v35, a5);
      v23 = sub_22F2F2210(v22, (uint64_t)v36);
      v34 = (**(_DWORD **)(a1 + 72) >> 8) & 1;
      v24 = sub_22E89519C(v23, (unsigned int *)&v34);
      sub_22E729148(v19, v20, a6, 0, (uint64_t)v31);
      sub_22E890748(v24, v31);
      if (v33 < 0)
        operator delete(__p);
      sub_22E903BEC(v35);
      v25 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v25)
      {
        v26 = *(uint64_t **)(a2 + 8);
        v27 = 8 * v25;
        do
        {
          v28 = *v26++;
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)((v28 & 0xFFFFFFFFFFFFFFFCLL) + 24), 0x63u, 0, (uint64_t)v35);
          v29 = sub_22E8BAE44((uint64_t)v35, a5);
          sub_22F2F2210(v29, (uint64_t)v36);
          sub_22E903BEC(v35);
          v27 -= 8;
        }
        while (v27);
      }
      v13 = 1;
      sub_22F30C4D4(a2, 1);
      sub_22EC64BE8(a1, a2, a3, a4, 0, 0);
    }
    else
    {
      v13 = 0;
    }
  }
  if (HIBYTE(v48))
  {
    if ((_DWORD)v37 == 5)
    {
      sub_22EC64D18(v44, (uint64_t)&v37);
    }
    else if (v42 && (*(_DWORD *)(v44[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v44, (uint64_t)&v37);
    }
  }
  if (v41)
  {
    v30 = sub_22EC6CBD0(v41);
    MEMORY[0x2348A0E9C](v30, 0x10E0C409F09D3C3);
  }
  if (v38 != v40)
    free(v38);
  return v13;
}

unint64_t sub_22EA03DDC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  unsigned __int32 v19;
  _QWORD *v20;
  _QWORD *v22;
  int64x2_t v23;
  _QWORD v24[6];

  v24[5] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a2 + 48);
  if (v6)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFF0;
    if (!a3)
      goto LABEL_7;
  }
  else
  {
    v7 = sub_22EF6462C(*(_QWORD *)(v5 + 88), a2);
    if (!a3)
      goto LABEL_7;
  }
  if ((*(_DWORD *)(a3 + 28) & 0x7E) == 0x2E)
    v7 = sub_22F36C604(*(_QWORD *)(v5 + 88), a3, v7);
LABEL_7:
  v8 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)v8 && *(_DWORD *)(v8 + 4) || *(_QWORD *)(v8 + 8))
  {
    v22 = v24;
    v23 = vdupq_n_s64(0x20uLL);
    v24[4] = 0;
    sub_22EEB5360((uint64_t)&v22, v7, 4uLL, 4);
    *v9 = **(_DWORD **)(a1 + 16);
    if (v7 >= 0x10)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      if (v10)
        v7 = sub_22EF65684(*(_QWORD *)(v5 + 88), 6, v10, v7, 0);
    }
    sub_22EEB5360((uint64_t)&v22, v7, 0x10uLL, 8);
    v12 = v11;
    *v11 = 0;
    v13 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(v13 + 8);
    v14 = (uint64_t *)(v13 + 8);
    if (v15)
      sub_22F0ABC50(v14, *(_QWORD *)(v5 + 88));
    else
      v16 = 0;
    *((_QWORD *)v12 + 1) = v16;
    v17 = *(_QWORD *)(v5 + 88);
    v18 = v23.i64[0] - v23.i64[1];
    v19 = v23.i32[0] - v23.i32[2];
    if (v23.i32[0] == v23.i32[2])
      v19 = sub_22F11598C(v7);
    v20 = (_QWORD *)sub_22E3CD3D4(v17 + 2032, v19 + 8, 3);
    *v20 = v7;
    memcpy(v20 + 1, (char *)v22 + v23.i64[1], v18);
    v7 = sub_22EE7D030(v5, v7, (uint64_t)v20);
    if (v22 != v24 && v22)
      MEMORY[0x2348A0E84]();
  }
  return v7;
}

uint64_t sub_22EA03FE0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  BOOL v12;
  int v14;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _BYTE v27[64];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned int v33;
  _QWORD v34[3];
  __int16 v35;
  int v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  if (sub_22E90328C((uint64_t)a1))
  {
    v12 = !*(_DWORD *)(a3 + 4) || *(_DWORD *)a3 == 0;
    if (v12 && *(_QWORD *)(a3 + 8) == 0)
    {
      v14 = *(_DWORD *)(a4 + 28);
      if ((v14 & 0x7Fu) > 0x2F || ((1 << (v14 & 0x7F)) & 0xC00000060000) == 0)
      {
        v16 = a4;
      }
      else
      {
        v16 = sub_22EFBAEA4(a4);
        v14 = *(_DWORD *)(v16 + 28);
      }
      if ((v14 & 0x7F) == 0x33)
        return sub_22EB23FF0((uint64_t)a1, a2, a5, v16);
    }
  }
  v18 = *(_QWORD *)(a4 + 40);
  v24 = 0;
  v25 = v27;
  v26 = 0x800000000;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = a1;
  v32 = v18;
  v33 = a5;
  sub_22EFC6D6C((uint64_t)v34, v18);
  v34[1] = 0;
  v34[2] = 0;
  v35 = 0;
  v36 = 257;
  v37 = 0;
  sub_22EC56024((uint64_t)&v24);
  v19 = *(unsigned int *)(a4 + 28);
  v20 = v26;
  if (v26 >= HIDWORD(v26))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v20 = v26;
  }
  *((_QWORD *)v25 + v20) = (v19 >> 13) & 3 | a4;
  LODWORD(v26) = v26 + 1;
  LODWORD(v24) = 2;
  sub_22EC561E4((uint64_t)&v24);
  v21 = sub_22EB2348C((uint64_t)a1, a3, (uint64_t)&v24, *(unsigned __int16 *)(a6 + 16) == 21);
  v22 = sub_22EB235A8(a1, a3, (uint64_t)&v24, v21, 0);
  if (BYTE1(v36))
  {
    if ((_DWORD)v24 == 5)
    {
      sub_22EC64D18(v31, (uint64_t)&v24);
    }
    else if (v29 && (*(_DWORD *)(v31[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v31, (uint64_t)&v24);
    }
  }
  if (v28)
  {
    v23 = sub_22EC6CBD0(v28);
    MEMORY[0x2348A0E9C](v23, 0x10E0C409F09D3C3);
  }
  if (v25 != v27)
    free(v25);
  return v22;
}

unsigned __int8 *sub_22EA04268(_QWORD *a1, uint64_t *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  int v6;
  uint64_t *v7;
  BOOL v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  int v13;
  BOOL v14;
  unsigned __int8 *v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  __int128 v23;
  void *v24[2];
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[64];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  _QWORD v35[3];
  __int16 v36;
  int v37;
  char v38;
  uint64_t v39;

  v3 = a3;
  v39 = *MEMORY[0x24BDAC8D0];
  v7 = (uint64_t *)(a3 + 80);
  v6 = *a3;
  v8 = v6 == 211;
  if (v6 == 211)
    v9 = a3;
  else
    v9 = 0;
  v10 = v9 + 64;
  if (!v8)
    v10 = a3 + 80;
  if (sub_22E8BB0E8(*v10 & 0xFFFFFFFFFFFFFFFCLL))
  {
    v23 = 0u;
    *(_OWORD *)v24 = 0u;
    sub_22E8ACE30((uint64_t)&v23, *((_QWORD *)v3 + 5), *((_QWORD *)v3 + 6));
    v11 = *((_QWORD *)v3 + 2);
    v12 = *((_DWORD *)v3 + 6);
    v25 = 0;
    v26 = v28;
    v27 = 0x800000000;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = a1;
    v33 = v11;
    v34 = v12;
    sub_22EFC6D6C((uint64_t)v35, v11);
    v35[1] = 0;
    v35[2] = 0;
    v36 = 0;
    v37 = 257;
    v38 = 0;
    sub_22EC56024((uint64_t)&v25);
    v30 = *((_QWORD *)v3 + 7);
    v13 = *v3;
    v14 = v13 == 211;
    if (v13 == 211)
      v15 = v3;
    else
      v15 = 0;
    v16 = (uint64_t *)(v15 + 64);
    if (v14)
      v7 = v16;
    v17 = *((unsigned int *)v3 + 1);
    if ((_DWORD)v17)
    {
      v18 = v27;
      v19 = 8 * v17;
      do
      {
        v20 = *v7;
        if (v18 >= HIDWORD(v27))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v18 = v27;
        }
        *((_QWORD *)v26 + v18) = v20;
        v18 = v27 + 1;
        LODWORD(v27) = v27 + 1;
        LODWORD(v25) = 2;
        ++v7;
        v19 -= 8;
      }
      while (v19);
    }
    sub_22EC561E4((uint64_t)&v25);
    v3 = (unsigned __int8 *)sub_22EC21A04((uint64_t)a1, (uint64_t *)&v23, 0, (uint64_t)&v25, 0, a2, 0);
    if (BYTE1(v37))
    {
      if ((_DWORD)v25 == 5)
      {
        sub_22EC64D18(v32, (uint64_t)&v25);
      }
      else if (v30 && (*(_DWORD *)(v32[9] + 52) & 0x400000) != 0)
      {
        sub_22E90B5FC((unint64_t)v32, (uint64_t)&v25);
      }
    }
    if (v29)
    {
      v22 = sub_22EC6CBD0(v29);
      MEMORY[0x2348A0E9C](v22, 0x10E0C409F09D3C3);
    }
    if (v26 != v28)
      free(v26);
    if (HIDWORD(v24[1]))
      free(v24[0]);
  }
  return v3;
}

unint64_t sub_22EA044C0(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  int v27;
  unint64_t v28;

  v2 = *(_WORD *)(a2 + 8);
  v3 = v2 & 0x7E;
  if ((v3 - 52) >= 6)
  {
    v4 = v2 & 0x7F;
    goto LABEL_8;
  }
  v4 = v2 & 0x7F;
  if ((v3 - 54) > 3)
    goto LABEL_43;
  v5 = -40;
  if (v4 > 70)
  {
    if (v4 == 83)
      goto LABEL_39;
    if (v4 == 71)
    {
      v5 = -56;
      goto LABEL_39;
    }
    if (v4 != 81)
    {
LABEL_34:
      v11 = -48;
      if ((v4 - 33) < 5)
        v11 = -64;
      if ((v4 - 52) >= 6)
        v5 = v11;
      else
        v5 = -72;
    }
  }
  else
  {
    if (v4 > 0x18)
      goto LABEL_33;
    if (v4 == 16)
    {
LABEL_6:
      v5 = -48;
      goto LABEL_39;
    }
    if (((1 << v4) & 0x1066) == 0)
    {
      if (v4 == 24)
        goto LABEL_6;
LABEL_33:
      if (v4 == 70)
      {
        v5 = -64;
        goto LABEL_39;
      }
      goto LABEL_34;
    }
  }
LABEL_39:
  v12 = *(_QWORD *)(a2 + v5 + 16);
  v13 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 4) != 0)
  {
    v13 = (_QWORD *)*v13;
    if (!v13)
      goto LABEL_43;
  }
  else if (!v13)
  {
    goto LABEL_43;
  }
  v14 = v13[8];
  if (v14
    && ((*(unsigned __int16 *)(v14 + 8) | (*(unsigned __int8 *)(v14 + 10) << 16)) & 0x100000) != 0
    && (*(_QWORD *)(a2 - 32) & 7) == 6
    && *(_DWORD *)(*(_QWORD *)(a2 - 32) & 0xFFFFFFFFFFFFFFF8) == 42)
  {
LABEL_8:
    v6 = -40;
    if (v4 > 70)
    {
      if (v4 != 83)
      {
        if (v4 == 71)
        {
          v6 = -56;
        }
        else if (v4 != 81)
        {
LABEL_23:
          v7 = v4 - 52;
          v26 = (v4 - 33) >= 5;
          v8 = -48;
          if (!v26)
            v8 = -64;
          if (v7 >= 6)
            v6 = v8;
          else
            v6 = -72;
        }
      }
    }
    else
    {
      if (v4 <= 0x18)
      {
        if (v4 == 16)
        {
LABEL_11:
          v6 = -48;
          goto LABEL_28;
        }
        if (((1 << v4) & 0x1066) != 0)
          goto LABEL_28;
        if (v4 == 24)
          goto LABEL_11;
      }
      if (v4 != 70)
        goto LABEL_23;
      v6 = -64;
    }
LABEL_28:
    v9 = *(_QWORD *)(a2 + v6 + 16);
    result = v9 & 0xFFFFFFFFFFFFFFF8;
    if ((v9 & 4) != 0)
      return *(_QWORD *)(result + 8);
    return result;
  }
LABEL_43:
  v15 = -40;
  if (v4 > 70)
  {
    if (v4 != 83)
    {
      if (v4 == 71)
      {
        v15 = -56;
        goto LABEL_61;
      }
      if (v4 == 81)
        goto LABEL_61;
      goto LABEL_56;
    }
  }
  else
  {
    if (v4 > 0x18)
      goto LABEL_55;
    if (v4 != 16)
    {
      if (((1 << v4) & 0x1066) != 0)
        goto LABEL_61;
      if (v4 != 24)
      {
LABEL_55:
        if (v4 == 70)
        {
          v15 = -64;
          goto LABEL_61;
        }
LABEL_56:
        v16 = v4 - 52;
        v26 = (v4 - 33) >= 5;
        v17 = -48;
        if (!v26)
          v17 = -64;
        if (v16 >= 6)
          v15 = v17;
        else
          v15 = -72;
        goto LABEL_61;
      }
    }
    v15 = -48;
  }
LABEL_61:
  v18 = *(_QWORD *)(a2 + v15 + 16);
  v19 = v18 & 0xFFFFFFFFFFFFFFF8;
  if ((v18 & 4) != 0)
    v19 = *(_QWORD *)(v19 + 8);
  if ((*(_WORD *)(v19 + 8) & 0x7Fu) - 35 <= 2)
  {
    while (1)
    {
      result = v19;
      v20 = *(_WORD *)(v19 + 8) & 0x7F;
      v21 = -40;
      if (v20 > 70)
      {
        if (v20 != 83)
        {
          if (v20 == 71)
          {
            v21 = -56;
          }
          else if (v20 != 81)
          {
            goto LABEL_75;
          }
        }
      }
      else
      {
        if (v20 > 0x18)
          goto LABEL_74;
        if (v20 == 16)
          goto LABEL_67;
        if (((1 << v20) & 0x1066) != 0)
          goto LABEL_81;
        if (v20 == 24)
        {
LABEL_67:
          v21 = -48;
        }
        else
        {
LABEL_74:
          if (v20 != 70)
          {
LABEL_75:
            v22 = v20 - 52;
            if ((v20 - 33) >= 5)
              v23 = -48;
            else
              v23 = -64;
            if (v22 >= 6)
              v21 = v23;
            else
              v21 = -72;
            goto LABEL_81;
          }
          v21 = -64;
        }
      }
LABEL_81:
      v24 = *(_QWORD *)(result + v21 + 16);
      v25 = v24 & 0xFFFFFFFFFFFFFFF8;
      if ((v24 & 4) != 0)
        v25 = *(_QWORD *)(v25 + 8);
      if (v25)
        v26 = (*(_WORD *)(v25 + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD;
      else
        v26 = 0;
      v27 = !v26;
      if (v27)
        v28 = 0;
      else
        v28 = v25 - 64;
      v19 = v28 + 64;
      if ((v27 & 1) != 0)
        return result;
    }
  }
  return v19;
}

uint64_t sub_22EA0483C(uint64_t result, unint64_t a2, uint64_t *a3, int a4)
{
  uint64_t *v4;
  _QWORD *v6;
  uint64_t i;
  int v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  void *v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  llvm::SmallPtrSetImplBase *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;

  v4 = a3;
  v6 = (_QWORD *)result;
  for (i = a3[45]; i; i = v4[45])
  {
    v8 = *(_WORD *)(i + 8) & 0x7F;
    if (v8 == 33)
    {
      if ((*(_BYTE *)(i + 12) & 0x80) != 0)
        break;
    }
    else if (v8 != 12 && v8 != 5)
    {
      break;
    }
    v4 = (uint64_t *)*v4;
  }
  if (a4)
    result = sub_22EFCCFA0(*(_QWORD *)(result + 216), a2);
  v10 = (uint64_t *)v6[9];
  v11 = *v10;
  if ((*((_BYTE *)v10 + 238) & 0x40) == 0)
  {
    if ((v11 & 0x100) != 0)
    {
      result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 24))(a2);
      if ((_DWORD)result)
      {
        if (!v4[3])
          return result;
      }
    }
    goto LABEL_33;
  }
  if ((v11 & 0x100) != 0)
  {
    result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 24))(a2);
    if ((_DWORD)result)
    {
      v12 = *(_QWORD *)(a2 + 16);
      v13 = (unint64_t *)(v12 & 0xFFFFFFFFFFFFFFF8);
      if ((v12 & 4) != 0)
      {
        v14 = sub_22EFCBB30(*v13);
        v15 = v13[1];
      }
      else
      {
        v14 = sub_22EFCBB30(v12 & 0xFFFFFFFFFFFFFFF8);
        v15 = v12 & 0xFFFFFFFFFFFFFFF8;
      }
      result = sub_22EFCBB30(v15);
      if (!result)
      {
        v18 = v12 & 4;
LABEL_27:
        if (v18)
          v13 = (unint64_t *)v13[1];
        v19 = v13[1] & 0x7F;
        v20 = v19 > 0x18 || ((1 << v19) & 0x1000006) == 0;
        if (v20 && v19 - 52 >= 6)
          return result;
        goto LABEL_33;
      }
      v16 = result;
      v17 = sub_22EFCC008(v14);
      result = sub_22EFCC008(v16);
      if (v17 != result)
      {
        v18 = *(_QWORD *)(a2 + 16) & 4;
        v13 = (unint64_t *)(*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_27;
      }
    }
  }
LABEL_33:
  if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 52 <= 5 && (*(_QWORD *)(a2 + 144) & 6) == 4)
  {
    v21 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
    if (v21)
    {
      if (*(_QWORD *)(v21 + 16) > 7uLL)
        return result;
    }
  }
  v22 = sub_22E8CEB58((uint64_t)(v6 + 415), *(_QWORD *)(a2 + 40));
  v44 = v22;
  if (!v22)
    goto LABEL_60;
  v23 = v22;
  while (1)
  {
    if ((v23 & 1) != 0)
      v24 = *(void **)(v23 & 0xFFFFFFFFFFFFFFFELL);
    else
      v24 = (void *)v23;
    v25 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(v4 + 9), v24);
    v26 = v4[10];
    if (v26 == v4[9])
      v27 = 92;
    else
      v27 = 88;
    if (v25 == (void **)(v26 + 8 * *(unsigned int *)((char *)v4 + v27)))
    {
      if ((v23 & 1) == 0)
        goto LABEL_60;
      goto LABEL_50;
    }
    if ((v23 & 1) == 0)
      break;
    if (sub_22EFBAB2C(a2, *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFFELL)))
    {
      v29 = *(void **)(v23 & 0xFFFFFFFFFFFFFFFELL);
      goto LABEL_53;
    }
LABEL_50:
    sub_22E8CECFC((unint64_t *)&v44);
    v23 = v44;
    if (!v44)
      goto LABEL_60;
  }
  v28 = sub_22EFBAB2C(a2, v23);
  v29 = (void *)v23;
  if (!v28)
    goto LABEL_60;
LABEL_53:
  v30 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(v4 + 9), v29);
  v31 = v4[10];
  v32 = 88;
  if (v31 == v4[9])
    v32 = 92;
  if (v30 != (void **)(v31 + 8 * *(unsigned int *)((char *)v4 + v32)))
  {
    *v30 = (void *)-2;
    ++*((_DWORD *)v4 + 24);
  }
  if ((v23 & 1) != 0)
    v23 = *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFFELL);
  sub_22E8CEA58((uint64_t)(v6 + 415), v23);
LABEL_60:
  v33 = (llvm::SmallPtrSetImplBase *)(v4 + 9);
  sub_22E3BA850((uint64_t)v33, (const void *)a2);
  if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0xF || *(_DWORD *)(a2 + 76) != *(_DWORD *)(a2 + 24))
  {
    sub_22E8CE7E8((uint64_t)(v6 + 415), a2);
    return sub_22EA04C04(v6, a2);
  }
  v34 = sub_22E8CEB58((uint64_t)(v6 + 415), *(_QWORD *)(a2 + 40));
  v44 = v34;
  if (!v34)
  {
LABEL_81:
    v43 = 0;
    goto LABEL_82;
  }
  v35 = v34;
  while (2)
  {
    if ((v35 & 1) != 0)
      v36 = *(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFFELL);
    else
      v36 = v35;
    v37 = *(_QWORD *)(v36 + 16);
    v38 = v37 & 0xFFFFFFFFFFFFFFF8;
    if ((v37 & 4) != 0)
      v38 = *(_QWORD *)(v38 + 8);
    v39 = sub_22EFCBB30(v38);
    v40 = v6[27];
    if (v39 == v40)
    {
      if ((v35 & 1) != 0)
        v42 = *(void **)(v35 & 0xFFFFFFFFFFFFFFFELL);
      else
        v42 = (void *)v35;
      sub_22E3BA914(v33, v42);
      if ((v35 & 1) == 0)
        goto LABEL_81;
      goto LABEL_80;
    }
    v41 = sub_22EFCBE78(v39, v40);
    if ((v41 & 1) == 0 && (v35 & 1) != 0)
    {
LABEL_80:
      sub_22E8CECFC((unint64_t *)&v44);
      v35 = v44;
      if (!v44)
        goto LABEL_81;
      continue;
    }
    break;
  }
  if (v41)
    v43 = v35;
  else
    v43 = 0;
LABEL_82:
  sub_22F305254((uint64_t)(v6 + 415), v43, a2);
  return sub_22EA04C04(v6, a2);
}

uint64_t sub_22EA04C04(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  unsigned int v10[24];
  uint64_t v11;

  v11 = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  if (!result && (*(_BYTE *)(a2 + 29) & 2) == 0)
  {
    result = sub_22EFB92BC(a2, a1[9]);
    if ((_DWORD)result)
    {
      v5 = result;
      v6 = *(_QWORD **)(a1[11] + 1992);
      result = (uint64_t)sub_22F1E361C(v6, *(_DWORD *)(a2 + 24));
      if ((_DWORD)result)
        v7 = (_DWORD)result == 3;
      else
        v7 = 1;
      if (v7)
      {
        result = sub_22E90086C(v6, *(_DWORD *)(a2 + 24));
        if ((result & 1) == 0)
        {
          sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x1B2Bu, 0, (uint64_t)v10);
          v8 = sub_22E890024((uint64_t)v10, &v11);
          v9 = v5;
          sub_22E8900C4(v8, &v9);
          return (uint64_t)sub_22E903BEC(v10);
        }
      }
    }
  }
  return result;
}

void sub_22EA04CD4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, int a5, int a6)
{
  int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  unint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;

  if (*(_DWORD *)(a2 + 16))
  {
    v12 = 0;
    v13 = *(_QWORD **)(a2 + 8);
    v14 = a1 + 3320;
    do
    {
LABEL_3:
      v15 = (_QWORD *)(*v13 & 0xFFFFFFFFFFFFFFFCLL);
      if ((sub_22E8CE620(v14, v15, a3, a4, a6) & 1) == 0)
      {
        while (1)
        {
          if (a5)
          {
            if (v15)
            {
              v27 = *(_QWORD *)(a1 + 88);
              v16 = sub_22EFB948C((uint64_t)v15);
              if (v16)
              {
                if (v16 != 3)
                {
                  if ((*(_BYTE *)(*(_QWORD *)(v27 + 2000) + 1) & 1) == 0)
                    break;
                  v17 = sub_22EFCBB30(a3);
                  v18 = *(_WORD *)(v17 + 8) & 0x7F;
                  v19 = v18 > 0x18 || ((1 << v18) & 0x1000006) == 0;
                  if (!v19 || v18 - 52 <= 5)
                  {
                    v23 = v15[2];
                    v24 = v23 & 0xFFFFFFFFFFFFFFF8;
                    if ((v23 & 4) != 0)
                      v24 = *(_QWORD *)v24;
                    if ((*(_WORD *)(v24 + 8) & 0x7Eu) - 34 >= 4)
                    {
                      v28 = sub_22F3B16C0(v17);
                      v25 = sub_22F3B16C0(v24);
                      if (v25)
                      {
                        v26 = v25;
                        v29 = sub_22EFCC008(v28);
                        if (v29 == sub_22EFCC008(v26))
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v20 = *(_QWORD *)(a2 + 8);
          v21 = *(unsigned int *)(a2 + 16);
          v22 = *(_QWORD *)(v20 + 8 * v21 - 8);
          LODWORD(v21) = v21 - 1;
          *(_DWORD *)(a2 + 16) = v21;
          *v13 = v22;
          if (v13 == (_QWORD *)(v20 + 8 * v21))
            goto LABEL_21;
          v15 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
          v12 = 1;
          if ((sub_22E8CE620(v14, (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFFCLL), a3, a4, a6) & 1) != 0)
          {
            if (++v13 != (_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(a2 + 16)))
              goto LABEL_3;
            goto LABEL_21;
          }
        }
      }
      ++v13;
    }
    while (v13 != (_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(a2 + 16)));
    if (v12)
LABEL_21:
      sub_22EA3DA00(a2);
  }
}

uint64_t sub_22EA04ED8(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  _BOOL4 v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24[24];
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;
  unsigned int v29[25];
  unsigned __int8 v30;
  BOOL v31;
  uint64_t v32;

  v32 = a2;
  v6 = *(_DWORD *)(a2 + 28);
  if ((v6 & 0x1800000) != 0)
  {
    v7 = sub_22EFB9D84(a3);
    if (v7 != sub_22EFB9D84(a2))
    {
      v8 = *(_QWORD *)(a3 + 8) & 6;
      if ((*(_BYTE *)(a3 + 29) & 0x80) != 0)
      {
        if (v8)
        {
          v9 = sub_22EFC7594(a3);
          goto LABEL_44;
        }
      }
      else if (v8)
      {
        v9 = *(_QWORD *)(a3 - 8);
LABEL_44:
        *(_QWORD *)(a2 - 8) = v9;
        sub_22EC61DA0((uint64_t)a1, a2);
        return 0;
      }
      v9 = 0;
      goto LABEL_44;
    }
    v6 = *(_DWORD *)(a2 + 28);
  }
  v10 = *(_QWORD *)(a2 + 8) & 6;
  if ((v6 & 0x8000) != 0)
  {
    if (v10)
    {
      v11 = sub_22EFC7594(a2);
      goto LABEL_13;
    }
  }
  else if (v10)
  {
    v11 = *(_QWORD *)(a2 - 8);
    goto LABEL_13;
  }
  v11 = 0;
LABEL_13:
  v12 = *(_QWORD *)(a3 + 8) & 6;
  if ((*(_BYTE *)(a3 + 29) & 0x80) != 0)
  {
    if (v12)
    {
      v13 = sub_22EFC7594(a3);
      if (!v11)
        goto LABEL_23;
      goto LABEL_21;
    }
  }
  else if (v12)
  {
    v13 = *(_QWORD *)(a3 - 8);
    if (!v11)
      goto LABEL_23;
    goto LABEL_21;
  }
  v13 = 0;
  if (!v11)
    goto LABEL_23;
LABEL_21:
  if (*(_DWORD *)(v11 + 28) == 6)
    v11 = *(_QWORD *)(v11 + 32);
LABEL_23:
  if (!v13)
  {
    v15 = 0;
    v14 = v11 != 0;
    goto LABEL_32;
  }
  if (*(_DWORD *)(v13 + 28) == 6)
    v13 = *(_QWORD *)(v13 + 32);
  v14 = v11 != 0;
  v15 = v13 != 0;
  if (!v11 || !v13)
  {
LABEL_32:
    if (v11 == v13)
      return 0;
    if (!v14)
      goto LABEL_36;
    goto LABEL_34;
  }
  v16 = 0;
  if ((*(_DWORD *)(v13 + 28) - 3) < 2 || v11 == v13)
    return v16;
  v15 = 1;
LABEL_34:
  v17 = *(_DWORD *)(v11 + 28);
  if (v17 > 6 || (v14 = 1, ((1 << v17) & 0x5A) == 0))
  {
    v14 = 0;
    v16 = 0;
    v31 = 0;
    if (!v15)
      return v16;
    goto LABEL_37;
  }
LABEL_36:
  v31 = v14;
  if (!v15)
    goto LABEL_39;
LABEL_37:
  v18 = *(_DWORD *)(v13 + 28);
  if (v18 > 6 || ((1 << v18) & 0x5A) == 0)
  {
LABEL_39:
    v16 = 0;
    v30 = 0;
    if (!v14)
      return v16;
    goto LABEL_50;
  }
  v30 = 1;
LABEL_50:
  sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0xF4Cu, 0, (uint64_t)v29);
  v20 = sub_22E890024((uint64_t)v29, &v32);
  v21 = sub_22E894E38(v20, (unsigned __int8 *)&v31);
  if (v31)
  {
    sub_22F1D8A24((uint64_t *)v11, 0, v27);
  }
  else
  {
    v28 = 0;
    LOBYTE(v27[0]) = 0;
  }
  v22 = sub_22F2F3734(v21, v27);
  v23 = sub_22E894E38(v22, &v30);
  if (v30)
  {
    sub_22F1D8A24((uint64_t *)v13, 0, __p);
  }
  else
  {
    v26 = 0;
    LOBYTE(__p[0]) = 0;
  }
  sub_22F2F3734(v23, __p);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete(v27[0]);
  sub_22E903BEC(v29);
  sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x6Cu, 0, (uint64_t)v24);
  sub_22E903BEC(v24);
  v16 = 1;
  sub_22EFC77E8(v32, 1);
  return v16;
}

uint64_t sub_22EA051EC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t result;
  _BOOL4 v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20[24];
  unsigned int v21[25];
  int v22;
  uint64_t v23;

  v23 = a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 4) != 0)
    v7 = *(_QWORD *)(v7 + 8);
  v8 = *(_WORD *)(sub_22EFCBFBC(v7) + 8) & 0x7F;
  if (v8 != 83 && v8 != 16)
    return 0;
  v10 = *(_QWORD *)(a3 + 16);
  v11 = v10 & 0xFFFFFFFFFFFFFFF8;
  if ((v10 & 4) != 0)
    v11 = *(_QWORD *)(v11 + 8);
  v12 = *(_WORD *)(sub_22EFCBFBC(v11) + 8) & 0x7F;
  if (v12 != 83 && v12 != 16)
    return 0;
  v15 = sub_22EFCAF18(a2);
  v16 = sub_22EFCAF18(a3);
  result = 0;
  if ((v15 || v16) && !v16)
  {
    v17 = sub_22EFB948C(a3);
    if ((v17 - 2) < 2)
    {
      v22 = 0;
LABEL_20:
      sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x1213u, 0, (uint64_t)v21);
      v18 = sub_22E890024((uint64_t)v21, &v23);
      sub_22E8900C4(v18, &v22);
      sub_22E903BEC(v21);
      sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x6Cu, 0, (uint64_t)v20);
      sub_22E903BEC(v20);
      return 1;
    }
    if (v17 != 4)
    {
      v22 = 0;
      if (v17 == 5)
      {
        v19 = 2;
        goto LABEL_23;
      }
      if (v17 != 1)
        goto LABEL_20;
    }
    v19 = 1;
LABEL_23:
    v22 = v19;
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_22EA05358(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  __int16 v3;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) != 0)
    v2 = *(_QWORD *)v2;
  v3 = *(_WORD *)(v2 + 8);
  if ((v3 & 0x7F) == 0x53)
    return sub_22EFB948C(a1) < 3;
  while ((v3 & 0x7Eu) - 38 < 0xFFFFFFFC
       || *(_QWORD *)(v2 - 24)
       || *(_QWORD *)(v2 + 56) >= 8uLL && (*(_QWORD *)(v2 + 56) & 4) == 0)
  {
    v6 = v3 & 0x7F;
    v7 = -40;
    if (v6 > 70)
    {
      if (v6 != 83)
      {
        if (v6 == 71)
        {
          v7 = -56;
        }
        else if (v6 != 81)
        {
          goto LABEL_23;
        }
      }
    }
    else
    {
      if (v6 > 0x18)
        goto LABEL_22;
      if (v6 == 16)
        goto LABEL_15;
      if (((1 << v6) & 0x1066) != 0)
        goto LABEL_29;
      if (v6 == 24)
      {
LABEL_15:
        v7 = -48;
      }
      else
      {
LABEL_22:
        if (v6 != 70)
        {
LABEL_23:
          v8 = v6 - 52;
          if ((v6 - 33) >= 5)
            v9 = -48;
          else
            v9 = -64;
          if (v8 >= 6)
            v7 = v9;
          else
            v7 = -72;
          goto LABEL_29;
        }
        v7 = -64;
      }
    }
LABEL_29:
    v10 = *(_QWORD *)(v2 + v7 + 16);
    v2 = v10 & 0xFFFFFFFFFFFFFFF8;
    if ((v10 & 4) != 0)
      v2 = *(_QWORD *)v2;
    v3 = *(_WORD *)(v2 + 8);
    if ((v3 & 0x7F) == 0x53)
      return sub_22EFB948C(a1) < 3;
  }
  return 1;
}

uint64_t sub_22EA0548C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  if ((*(_BYTE *)(a2 + 28) & 0x80) != 0 || (sub_22EFC9084(a2, 1) & 1) != 0 || sub_22EA057AC(a2))
    return 0;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (_QWORD *)*v5;
  if ((sub_22EFC7ADC((unint64_t)v5) & 1) != 0)
    return 0;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 4) != 0)
    v7 = *(_QWORD *)(v7 + 8);
  if ((sub_22EFC7ADC(v7) & 1) != 0)
    return 0;
  v9 = *(_DWORD *)(a2 + 28);
  v10 = (v9 & 0x7E) - 58;
  if (v10 < 0xFFFFFFFA)
  {
    if ((v9 & 0x7Fu) - 67 < 0xFFFFFFF9
      || *(_DWORD *)(a1 + 8352)
      || !sub_22F1E3734(*(_QWORD **)(a1 + 112), *(_DWORD *)(a2 + 24))
      || (sub_22EF736B8(*(_QWORD **)(a1 + 88), a2) & 1) != 0)
    {
      return 0;
    }
    v11 = *(_DWORD *)(a2 + 28) & 0x7F;
    if (v11 != 64)
    {
      v12 = *(_QWORD *)(a2 + 16);
      v13 = v12 & 0xFFFFFFFFFFFFFFF8;
      if ((v12 & 4) != 0)
        v13 = *(_QWORD *)v13;
      if ((*(_WORD *)(v13 + 8) & 0x7Eu) - 34 <= 3)
      {
        if (sub_22EFBC2B0(a2) == 1)
          return 0;
        v11 = *(_DWORD *)(a2 + 28) & 0x7F;
      }
      if (v11 != 64)
      {
        v14 = *(_QWORD *)(a2 + 16);
        v15 = v14 & 0xFFFFFFFFFFFFFFF8;
        if ((v14 & 4) != 0)
          v15 = *(_QWORD *)v15;
        if ((*(_WORD *)(v15 + 8) & 0x7Eu) - 34 <= 3
          && sub_22EFBC2B0(a2) == 2
          && sub_22EFBE104(a2)
          && !(*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 24))(a2))
        {
          return 0;
        }
      }
    }
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40
      || (*(_BYTE *)(a2 + 97) & 0x20) == 0
      || !*(_DWORD *)(a1 + 8352) && sub_22F1E3734(*(_QWORD **)(a1 + 112), *(_DWORD *)(a2 + 24)))
    {
      return sub_22EA05358(a2);
    }
    return 0;
  }
  v16 = *(_QWORD *)(a2 + 144) & 6;
  v17 = v16 != 4;
  v18 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
  if (!v18)
    v17 = 1;
  if (v17)
  {
    if (v16 != 2 || !v18)
      goto LABEL_46;
    v19 = *(_QWORD *)v18;
  }
  else
  {
    v19 = *(_QWORD *)(v18 + 16);
  }
  if ((v19 & 6) == 0)
    return 0;
  if ((v19 & 6) == 2)
  {
    if (v16 != 2 || !v18)
    {
      if (v17 || (*(_BYTE *)(v18 + 8) & 4) == 0)
        goto LABEL_46;
      v18 = *(_QWORD *)(v18 + 48);
    }
    if (v18)
    {
      if (!(*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 24))(a2))
        return 0;
      v10 = (*(_DWORD *)(a2 + 28) & 0x7E) - 58;
    }
  }
LABEL_46:
  if (v10 >= 0xFFFFFFFC)
  {
    v21 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2);
    if ((*(_BYTE *)(v21 + 82) & 0xC) != 0 || sub_22EFD7260(v21))
      return 0;
    v22 = *(_QWORD *)(a2 + 80);
    if ((v22 & 0x8000000) != 0)
    {
      if ((v22 & 0x20000000) != 0)
        goto LABEL_48;
    }
    else if (*(_QWORD *)(a2 + 128) | *(_QWORD *)(a2 + 80) & 0x20000000)
    {
      goto LABEL_48;
    }
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x37)
    {
      if ((sub_22EFD3AF0(a2, &v23) & 1) != 0)
        return 0;
    }
    else if ((sub_22EFD3B9C(a2) & 1) != 0)
    {
      return 0;
    }
  }
  else if ((*(_BYTE *)(a2 + 82) & 1) != 0
         && (*(_DWORD *)(a1 + 8352) || !sub_22F1E3734(*(_QWORD **)(a1 + 112), *(_DWORD *)(a2 + 24))))
  {
    return 0;
  }
LABEL_48:
  v20 = *(_QWORD *)(a2 + 80);
  if ((v20 & 0x8000000) != 0)
  {
    if ((v20 & 0x20000000) == 0)
      return sub_22EA05358(a2);
  }
  else if (!(*(_QWORD *)(a2 + 128) | *(_QWORD *)(a2 + 80) & 0x20000000))
  {
    return sub_22EA05358(a2);
  }
  if ((sub_22EF736B8(*(_QWORD **)(a1 + 88), a2) & 1) != 0)
    return 0;
  return sub_22EA05358(a2);
}

BOOL sub_22EA057AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 339)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22EA0580C(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;

  if (a2)
  {
    v3 = result;
    v4 = *(_DWORD *)(a2 + 28);
    if ((v4 & 0x7Eu) - 58 >= 0xFFFFFFFA)
    {
      v5 = *(_QWORD *)(a2 + 112);
      if (v5 != a2)
      {
        result = sub_22EA0548C(result, v5);
        if ((result & 1) != 0)
          return result;
        v4 = *(_DWORD *)(a2 + 28);
      }
    }
    if ((v4 & 0x7Fu) - 67 < 0xFFFFFFF9
      || (v6 = *(_QWORD *)(a2 + 80), v6 == a2)
      || (result = sub_22EA0548C(v3, v6), (result & 1) == 0))
    {
      result = sub_22EA0548C(v3, a2);
      if ((_DWORD)result)
      {
        v7 = *(_DWORD *)(v3 + 2912);
        if (v7 >= *(_DWORD *)(v3 + 2916))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v7 = *(_DWORD *)(v3 + 2912);
        }
        *(_QWORD *)(*(_QWORD *)(v3 + 2904) + 8 * v7) = a2;
        ++*(_DWORD *)(v3 + 2912);
      }
    }
  }
  return result;
}

void sub_22EA058D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD, __int128 *), uint64_t a4)
{
  unint64_t i;
  int v9;

  if ((*(_BYTE *)(*(_QWORD *)(a2 + 48) + 17) & 4) == 0)
  {
    if ((*(_WORD *)(a2 + 72) & 0x80) != 0)
      sub_22EFCC320(a2 + 64);
    for (i = *(_QWORD *)(a2 + 80); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
    {
      v9 = *(_DWORD *)(i + 28);
      if ((v9 & 0x7Fu) - 42 >= 0xFFFFFFFD)
      {
        sub_22EA05988(a1, i, a3, a4);
      }
      else if ((v9 & 0x7Eu) - 38 >= 0xFFFFFFFC)
      {
        sub_22EA058D8(a1, i, a3, a4);
      }
    }
  }
}

void sub_22EA05988(uint64_t a1, unint64_t a2, uint64_t (*a3)(uint64_t, _QWORD, __int128 *), uint64_t a4)
{
  int v4;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v15;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  _BOOL4 v22;
  BOOL v23;
  int v24;
  int v26;
  int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t *v62;
  uint64_t v63;
  int v64;
  __int128 v65;
  int v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  void *__p;
  _QWORD v72[3];

  v4 = *(_DWORD *)(a2 + 28);
  if ((v4 & 0x80) != 0)
    return;
  if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x3D)
  {
    v9 = *(unsigned int *)(a2 + 100);
    if ((_DWORD)v9)
    {
      v10 = a2 + 104;
      v11 = a2 + 104 + 8 * v9;
      do
      {
        v12 = *(_BYTE **)v10;
        if ((*(_BYTE *)(*(_QWORD *)v10 + 29) & 8) != 0)
          return;
        v13 = *(_BYTE **)v10;
        do
        {
          if ((v13[29] & 8) != 0)
            return;
          v13 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v13 + 40))(v13);
        }
        while (v13 != v12 && v13 != 0);
        v10 += 8;
      }
      while (v10 != v11);
    }
    goto LABEL_25;
  }
  if ((v4 & 0x800) == 0 && *(_QWORD *)(a2 + 40))
  {
    v15 = (_BYTE *)a2;
    do
    {
      if ((v15[29] & 8) != 0)
        return;
      v15 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v15 + 40))(v15);
    }
    while (v15 != (_BYTE *)a2 && v15 != 0);
    if ((sub_22EFC9084(a2, 1) & 1) == 0)
    {
LABEL_25:
      if (sub_22EA057AC(a2) || sub_22E4CBAA4(a2))
        return;
      v17 = *(_DWORD *)(a2 + 28);
      if ((v17 & 0x7F) == 0xF)
        goto LABEL_46;
      v18 = *(_QWORD *)(a2 + 16);
      v19 = v18 & 0xFFFFFFFFFFFFFFF8;
      v20 = v18 & 0xFFFFFFFFFFFFFFF8;
      if ((v18 & 4) != 0)
        v20 = *(_QWORD *)v19;
      v21 = *(_WORD *)(v20 + 8) & 0x7F;
      v22 = v21 - 52 < 6;
      v23 = v21 > 0x18;
      v24 = (1 << v21) & 0x1000006;
      v26 = !v23 && v24 != 0 || v22;
      if ((v18 & 4) != 0)
        v19 = *(_QWORD *)v19;
      if (v19 && (*(_WORD *)(v19 + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD)
      {
        if ((v26 & 1) == 0)
        {
          if (!sub_22EA3DA94(v19 - 64) || (sub_22EFC7ADC(v19) & 1) != 0)
            return;
          v17 = *(_DWORD *)(a2 + 28);
        }
      }
      else if (!v26)
      {
        return;
      }
      v27 = v17 & 0x7F;
      if ((v27 - 39) < 3)
        goto LABEL_46;
      if ((v27 - 67) < 0xFFFFFFF9 || v27 == 62 || v27 == 64)
        return;
      v45 = (unsigned __int8 *)sub_22EFBC5B4(a2);
      v46 = v45;
      if (v45 && *v45 == 173)
        v46 = (unsigned __int8 *)*((_QWORD *)v45 + 2);
      v47 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
      v48 = sub_22F10D4DC(v47);
      if (v48)
      {
        if (sub_22EA057AC(*(_QWORD *)(v48 + 24)))
          return;
      }
      if (!v46)
        goto LABEL_90;
      if (*v46 != 186)
        goto LABEL_90;
      v49 = *((_QWORD *)v46 + 2);
      if ((v49 & 4) == 0 || !*(_QWORD *)((v49 & 0xFFFFFFFFFFFFFFF8) + 48))
        goto LABEL_90;
      v50 = (uint64_t *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
      v51 = *v50;
      if (!*v50 || (v52 = *(_DWORD *)(v51 + 16), (v52 & 0xFE) != 0x28))
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v51 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
          || (v51 = sub_22F10CF48(v51)) == 0)
        {
LABEL_87:
          v47 = *v50;
          v53 = *((_QWORD *)v46 + 2);
          v54 = v53 & 0xFFFFFFFFFFFFFFF8;
          if ((v53 & 4) != 0)
            v54 = *(_QWORD *)(v54 + 40);
          v46 = sub_22EFFEEC4((unsigned __int8 *)v54);
LABEL_90:
          if ((sub_22F1110EC(v47, 0) & 1) != 0)
            return;
          v55 = *(_DWORD *)(v47 + 16);
          if ((v55 & 0x400) != 0)
            return;
          while (1)
          {
            v56 = v55 & 0xFE;
            if ((v56 - 6) > 0xFFFFFFFB)
            {
              v57 = v47;
            }
            else
            {
              if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
                goto LABEL_100;
              v57 = sub_22F10CF48(v47);
              if (!v57)
              {
                v56 = *(_DWORD *)(v47 + 16) & 0xFE;
LABEL_100:
                if (v56 == 44
                  || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C
                  && (v47 = sub_22F10CF48(v47)) != 0)
                {
                  v58 = sub_22F114198(*(_QWORD *)(v47 + 24));
                  if (sub_22EA057AC(v58))
                    return;
                  if (v58 && (*(_DWORD *)(v58 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
                  {
                    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v58 + 104) + 96), *(_QWORD *)(v58 + 104));
                    if ((**(_QWORD **)(v58 + 128) & 0x100000000000) == 0 && !sub_22EA06058(v58))
                      return;
                    if (v46)
                    {
                      if ((*v46 & 0xFE) == 0x76
                        && (v46[2] & 4) == 0
                        && (*(_BYTE *)(*((_QWORD *)v46 + 2) + 82) & 0x80) == 0
                        && !sub_22EA06058(v58)
                        && ((*(_BYTE *)(sub_22EFBC5B4(a2) + 2) & 1) != 0 || !sub_22EFBCF80(a2)))
                      {
                        return;
                      }
                      if ((v46[1] & 0x80) != 0)
                      {
                        v59 = sub_22F282248(v58);
                        while (v59 != v60)
                        {
                          if ((*(_BYTE *)(v59 + 82) & 0x80) == 0)
                            return;
                          do
                            v59 = *(_QWORD *)(v59 + 8) & 0xFFFFFFFFFFFFFFF8;
                          while (v59 && (*(_DWORD *)(v59 + 28) & 0x7F) != 0x37);
                        }
                      }
                      if (*v46 == 136)
                        return;
                    }
                  }
                }
LABEL_46:
                v28 = *(_DWORD *)(a2 + 28) & 0x7F;
                if ((v28 - 39) >= 3)
                  v29 = 0;
                else
                  v29 = a2;
                v67 = v29;
                if (v29)
                {
                  sub_22F2B3BA8(a1 + 2552, (uint64_t *)&v67);
                }
                else
                {
                  v68 = 0;
                  v67 = 0;
                  v69 = 0;
                  v70 = 0;
                  memset(v72, 0, 17);
                  __p = 0;
                  if (v28 == 15)
                  {
                    v30 = *(_QWORD *)(a1 + 88);
                    v31 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 16))(a2);
                    v32 = sub_22F142BC4(HIDWORD(v31), 61, *(uint64_t **)(v30 + 1992), *(_DWORD **)(v30 + 2000), 1);
                    if (v32)
                    {
                      v67 = (*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 16))(a2) | ((unint64_t)v32 << 32);
                      v68 = 0;
                      __p = 0;
                      memset(v72, 0, 17);
                      v69 = 0;
                      v70 = 0;
                    }
                  }
                  v33 = *(_DWORD *)(a2 + 28) & 0x7F;
                  if (v33 != 64 && (v33 - 67) >= 0xFFFFFFF9 && (*(_BYTE *)(a2 + 97) & 2) != 0)
                  {
                    v34 = 7128;
                  }
                  else if (v33 == 15)
                  {
                    v34 = 7131;
                  }
                  else
                  {
                    v34 = 7142;
                  }
                  v35 = *(_DWORD *)(a2 + 24);
                  v63 = *(_QWORD *)(a1 + 88) + 2128;
                  v64 = v34;
                  v36 = (uint64_t *)sub_22E3B8AAC(v63);
                  v62 = v36;
                  v37 = *(unsigned __int8 *)v36;
                  *((_BYTE *)v36 + v37 + 1) = 11;
                  *(_BYTE *)v36 = v37 + 1;
                  v36[v37 + 2] = a2;
                  sub_22E6D82D0((uint64_t *)&v62, &v67);
                  v66 = v64;
                  *(_QWORD *)&v65 = 0;
                  *((_QWORD *)&v65 + 1) = v63;
                  if (v62)
                  {
                    v38 = (_OWORD *)sub_22E3B8AAC(v63);
                    v39 = 0;
                    *(_QWORD *)&v65 = v38;
                    v40 = v62;
                    v41 = *((_OWORD *)v62 + 1);
                    *v38 = *(_OWORD *)v62;
                    v38[1] = v41;
                    v42 = *((_OWORD *)v40 + 5);
                    v44 = *((_OWORD *)v40 + 2);
                    v43 = *((_OWORD *)v40 + 3);
                    v38[4] = *((_OWORD *)v40 + 4);
                    v38[5] = v42;
                    v38[2] = v44;
                    v38[3] = v43;
                    do
                    {
                      std::string::operator=((std::string *)((char *)v38 + v39 * 8 + 96), (const std::string *)&v40[v39 + 12]);
                      v39 += 3;
                    }
                    while (v39 != 30);
                    sub_22E78D560((uint64_t)(v38 + 21), (uint64_t)(v40 + 42));
                    sub_22E78D658((uint64_t)(v38 + 28), v40 + 56);
                  }
                  sub_22EA06000(a3, a4, v35, &v65);
                  if ((_QWORD)v65 && *((_QWORD *)&v65 + 1))
                    sub_22E3BB10C(*((unint64_t *)&v65 + 1), v65);
                  if (v62 && v63)
                    sub_22E3BB10C(v63, (unint64_t)v62);
                  if (SHIBYTE(v72[1]) < 0)
                    operator delete(__p);
                }
                return;
              }
            }
            v47 = *(_QWORD *)(*(_QWORD *)(v57 + 32) & 0xFFFFFFFFFFFFFFF0);
            v55 = *(_DWORD *)(v47 + 16);
          }
        }
        v52 = *(_DWORD *)(v51 + 16);
      }
      if ((v52 & 0x100000) != 0)
      {
        do
        {
          v51 = *(_QWORD *)(*(_QWORD *)(v51 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v51)
          {
            v61 = *(_DWORD *)(v51 + 16);
            if ((v61 & 0xFE) == 0x28)
              continue;
          }
          v51 = sub_22F10CF48(v51);
          v61 = *(_DWORD *)(v51 + 16);
        }
        while ((v61 & 0x100000) != 0);
      }
      v50 = (uint64_t *)(*(_QWORD *)(v51 + 32) & 0xFFFFFFFFFFFFFFF0);
      goto LABEL_87;
    }
  }
}

unint64_t sub_22EA06000(uint64_t (*a1)(uint64_t, _QWORD, __int128 *), uint64_t a2, unsigned int a3, __int128 *a4)
{
  unint64_t result;
  __int128 v5;
  int v6;

  v6 = *((_DWORD *)a4 + 4);
  v5 = *a4;
  *(_QWORD *)a4 = 0;
  result = a1(a2, a3, &v5);
  if ((_QWORD)v5)
  {
    result = *((_QWORD *)&v5 + 1);
    if (*((_QWORD *)&v5 + 1))
      return sub_22E3BB10C(*((unint64_t *)&v5 + 1), v5);
  }
  return result;
}

BOOL sub_22EA06058(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 347)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

void sub_22EA060B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  uint64_t v16;
  _BYTE *v17;
  _QWORD *i;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  unint64_t v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t j;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t k;
  _QWORD *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  _BYTE *v51;
  unint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int v58;
  unint64_t v59;
  _OWORD *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t m;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83[24];
  unsigned int v84[24];
  uint64_t v85;
  void **v86;
  __n128 v87;
  _OWORD *v88;
  unint64_t v89;
  int v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  _QWORD v94[82];

  v94[80] = *MEMORY[0x24BDAC8D0];
  sub_22E8FB9FC((void **)a3);
  if (*(_DWORD *)(a3 + 92) == *(_DWORD *)(a3 + 96))
    return;
  v5 = v94;
  v92 = v94;
  v93 = 0x1000000000;
  v86 = &v92;
  v6 = *(_QWORD *)(a3 + 80);
  v7 = 88;
  if (v6 == *(_QWORD *)(a3 + 72))
    v7 = 92;
  v8 = *(unsigned int *)(a3 + v7);
  if ((_DWORD)v8)
  {
    v9 = 8 * v8;
    v10 = *(unint64_t **)(a3 + 80);
    while (*v10 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v10;
      v9 -= 8;
      if (!v9)
      {
        v11 = v94;
        goto LABEL_115;
      }
    }
  }
  else
  {
    v10 = *(unint64_t **)(a3 + 80);
  }
  v12 = (unint64_t *)(v6 + 8 * v8);
  v11 = v94;
  if (v10 == v12)
    goto LABEL_115;
  v82 = a1 + 8848;
  v13 = *v10;
LABEL_12:
  if (*(_DWORD *)(*(_QWORD *)(a3 + 400) + 176) <= *(_DWORD *)(a3 + 412))
  {
    sub_22EA05988(a1, v13, (uint64_t (*)(uint64_t, _QWORD, __int128 *))sub_22EA450A4, (uint64_t)&v86);
    v14 = *(_DWORD *)(v13 + 28);
    if ((v14 & 0x7Eu) - 38 >= 0xFFFFFFFC && v13 != 0)
    {
      sub_22EA058D8(a1, v13, (uint64_t (*)(uint64_t, _QWORD, __int128 *))sub_22EA450A4, (uint64_t)&v86);
      v14 = *(_DWORD *)(v13 + 28);
    }
    v16 = (v14 & 0x7Fu) - 60 >= 7 ? 0 : v13;
    v85 = v16;
    if (v16)
    {
      if ((*(_BYTE *)(v16 + 29) & 8) == 0)
      {
        v17 = (_BYTE *)v13;
        while ((v17[29] & 8) == 0)
        {
          v17 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v17 + 40))(v17);
          if (v17 == (_BYTE *)v16 || v17 == 0)
            goto LABEL_74;
        }
      }
      if (*(_QWORD *)(v16 + 40) && !sub_22EA057AC(v16) && !sub_22E8D12CC(v16))
      {
        for (i = (_QWORD *)(v16 + 48); ; i = (_QWORD *)(v23 + 32))
        {
          v20 = *(_QWORD *)(*i & 0xFFFFFFFFFFFFFFF0);
          if (v20)
            v21 = (*(_DWORD *)(v20 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
          else
            v21 = 0;
          if (v21)
          {
            v23 = *(_QWORD *)(*i & 0xFFFFFFFFFFFFFFF0);
          }
          else
          {
            v22 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
            if ((v22 & 0xFEu) - 2 > 3)
            {
              v68 = (_QWORD *)(v20 + 8);
LABEL_45:
              v24 = v22 & 0xFE;
              if (v24 != 40 && (*(_DWORD *)(v20 + 16) & 0x400) == 0)
              {
                if ((!v20 || (*(_DWORD *)(v20 + 16) & 0xFE) != 0x2C) && (v24 != 44 || (v20 = sub_22F10CF48(v20)) == 0)
                  || (v25 = sub_22F114198(*(_QWORD *)(v20 + 24)), !sub_22EA057AC(v25))
                  && (v25 ? (v26 = (*(_DWORD *)(v25 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD) : (v26 = 0),
                      !v26 || sub_22EA06058(v25)))
                {
                  if ((!sub_22E49C868(v16) || *(_BYTE *)(*(_QWORD *)(*v68 & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
                    && (!sub_22E4CBAA4(v16) || *(_BYTE *)(*(_QWORD *)(*v68 & 0xFFFFFFFFFFFFFFF0) + 16) != 32))
                  {
                    v91 = v16;
                    v87.n128_u64[0] = 0;
                    if (sub_22EA45010(v82, &v91, &v87))
                    {
                      if (v87.n128_u64[0] != *(_QWORD *)(a1 + 8848) + 16 * *(unsigned int *)(a1 + 8864)
                        && !*(_DWORD *)(v87.n128_u64[0] + 8))
                      {
                        v79 = *(_DWORD *)(v16 + 24);
                        if ((*(_DWORD *)(v16 + 28) & 0x7F) == 0x40)
                          v27 = 7119;
                        else
                          v27 = 7120;
                        v28 = *(_QWORD *)(a1 + 88) + 2128;
                        v29 = (_BYTE *)sub_22E3B8AAC(v28);
                        v30 = *v29;
                        v29[v30 + 1] = 11;
                        *v29 = v30 + 1;
                        *(_QWORD *)&v29[8 * v30 + 16] = v16;
                        v31 = (unint64_t)v29;
                        LODWORD(v88) = v27;
                        v87.n128_u64[1] = v28;
                        v32 = (_OWORD *)sub_22E3B8AAC(v28);
                        v87.n128_u64[0] = (unint64_t)v32;
                        v33 = *(_OWORD *)(v31 + 16);
                        *v32 = *(_OWORD *)v31;
                        v32[1] = v33;
                        v34 = *(_OWORD *)(v31 + 80);
                        v36 = *(_OWORD *)(v31 + 32);
                        v35 = *(_OWORD *)(v31 + 48);
                        v32[4] = *(_OWORD *)(v31 + 64);
                        v32[5] = v34;
                        v32[2] = v36;
                        v32[3] = v35;
                        for (j = 96; j != 336; j += 24)
                          std::string::operator=((std::string *)((char *)v32 + j), (const std::string *)(v31 + j));
                        sub_22E78D560((uint64_t)(v32 + 21), v31 + 336);
                        sub_22E78D658((uint64_t)(v32 + 28), (uint64_t *)(v31 + 448));
                        sub_22EA06000((uint64_t (*)(uint64_t, _QWORD, __int128 *))sub_22EA450A4, (uint64_t)&v86, v79, (__int128 *)&v87);
                        if (v87.n128_u64[0] && v87.n128_u64[1])
                          sub_22E3BB10C(v87.n128_u64[1], v87.n128_u64[0]);
                        sub_22E3BB10C(v28, v31);
                      }
                    }
                  }
                }
              }
              break;
            }
            v23 = sub_22F10CF48(v20);
            if (!v23)
            {
              v68 = (_QWORD *)(v20 + 8);
              v22 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
              goto LABEL_45;
            }
          }
        }
      }
LABEL_74:
      v87.n128_u64[0] = 0;
      if (sub_22EA45010(v82, &v85, &v87))
      {
        *(_QWORD *)v87.n128_u64[0] = -8192;
        *(int32x2_t *)(a1 + 8856) = vadd_s32(*(int32x2_t *)(a1 + 8856), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
  }
  if (!*(_QWORD *)(v13 + 40))
    goto LABEL_109;
  if ((*(_DWORD *)(v13 + 28) & 0x7F) == 0xF)
  {
    if (*(_QWORD *)(v13 + 64))
    {
      if (!*(_BYTE *)(v13 + 72))
      {
LABEL_82:
        v80 = *(_DWORD *)(v13 + 24);
        v38 = *(_QWORD *)(a1 + 88) + 2128;
        v39 = (unsigned __int8 *)sub_22E3B8AAC(v38);
        v40 = *v39;
        v39[v40 + 1] = 11;
        *v39 = v40 + 1;
        *(_QWORD *)&v39[8 * v40 + 16] = v13;
        LODWORD(v88) = 5043;
        v87.n128_u64[1] = v38;
        v41 = (_OWORD *)sub_22E3B8AAC(v38);
        v87.n128_u64[0] = (unint64_t)v41;
        v42 = *((_OWORD *)v39 + 1);
        *v41 = *(_OWORD *)v39;
        v41[1] = v42;
        v43 = *((_OWORD *)v39 + 5);
        v45 = *((_OWORD *)v39 + 2);
        v44 = *((_OWORD *)v39 + 3);
        v41[4] = *((_OWORD *)v39 + 4);
        v41[5] = v43;
        v41[2] = v45;
        v41[3] = v44;
        for (k = 96; k != 336; k += 24)
          std::string::operator=((std::string *)((char *)v41 + k), (const std::string *)&v39[k]);
        sub_22E78D560((uint64_t)(v41 + 21), (uint64_t)(v39 + 336));
        sub_22E78D658((uint64_t)(v41 + 28), (uint64_t *)v39 + 56);
        sub_22EA06000((uint64_t (*)(uint64_t, _QWORD, __int128 *))sub_22EA450A4, (uint64_t)&v86, v80, (__int128 *)&v87);
        if (v87.n128_u64[0] && v87.n128_u64[1])
          sub_22E3BB10C(v87.n128_u64[1], v87.n128_u64[0]);
        sub_22E3BB10C(v38, (unint64_t)v39);
      }
    }
    else if (!*(_QWORD *)(v13 + 48))
    {
      goto LABEL_82;
    }
  }
  sub_22E8CEA58(a1 + 3320, v13);
  v91 = v13;
  v87.n128_u64[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 10152), &v91, &v87))
  {
    v47 = (_QWORD *)v87.n128_u64[0];
    if (v87.n128_u64[0] != *(_QWORD *)(a1 + 10152) + 16 * *(unsigned int *)(a1 + 10168))
    {
      v48 = *(_QWORD *)(v87.n128_u64[0] + 8);
      if (v48)
        v49 = (*(_DWORD *)(v48 + 28) & 0x7Fu) - 52 >= 0xFFFFFFFD;
      else
        v49 = 0;
      if (v49)
      {
        v78 = *(_DWORD *)(v48 + 24);
        v81 = *(_DWORD *)(v13 + 24);
        v50 = *(_QWORD *)(a1 + 88) + 2128;
        v51 = (_BYTE *)sub_22E3B8AAC(v50);
        v52 = (unint64_t)v51;
        v54 = v51 + 1;
        v53 = *v51;
        v54[v53] = 11;
        *v51 = v53 + 2;
        *(_QWORD *)&v51[8 * v53 + 16] = v13;
        v55 = (v53 + 1);
        v54[v55] = 11;
        *(_QWORD *)&v51[8 * v55 + 16] = v48;
        v56 = *(_QWORD *)(v48 + 16);
        v57 = v56 & 0xFFFFFFFFFFFFFFF8;
        if ((v56 & 4) != 0)
          v57 = *(_QWORD *)v57;
        v58 = (*(_WORD *)(v57 + 8) & 0x7E) - 34;
        if (v57)
          v59 = v57 - 64;
        else
          v59 = 0;
        if (v58 >= 4)
          v59 = 0;
        v51[(v53 + 2) + 1] = 11;
        *v51 = v53 + 3;
        *(_QWORD *)&v51[8 * (v53 + 2) + 16] = v59;
        v60 = (_OWORD *)sub_22E3B8AAC(v50);
        v61 = *(_OWORD *)(v52 + 16);
        *v60 = *(_OWORD *)v52;
        v60[1] = v61;
        v62 = *(_OWORD *)(v52 + 80);
        v64 = *(_OWORD *)(v52 + 32);
        v63 = *(_OWORD *)(v52 + 48);
        v60[4] = *(_OWORD *)(v52 + 64);
        v60[5] = v62;
        v60[2] = v64;
        v60[3] = v63;
        for (m = 96; m != 336; m += 24)
          std::string::operator=((std::string *)((char *)v60 + m), (const std::string *)(v52 + m));
        sub_22E78D560((uint64_t)(v60 + 21), v52 + 336);
        sub_22E78D658((uint64_t)(v60 + 28), (uint64_t *)(v52 + 448));
        v87.n128_u64[0] = __PAIR64__(v78, v81);
        v87.n128_u8[8] = 1;
        v90 = 6385;
        v88 = v60;
        v89 = v50;
        sub_22EA3DAF0((uint64_t)&v92, &v87);
        if (v88 && v89)
          sub_22E3BB10C(v89, (unint64_t)v88);
        sub_22E3BB10C(v50, v52);
      }
      *v47 = -8192;
      *(int32x2_t *)(a1 + 10160) = vadd_s32(*(int32x2_t *)(a1 + 10160), (int32x2_t)0x1FFFFFFFFLL);
    }
  }
LABEL_109:
  v66 = v10 + 1;
  while (v66 != v12)
  {
    v67 = *v66++;
    v13 = v67;
    if (v67 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v10 = v66 - 1;
      goto LABEL_12;
    }
  }
  v11 = v92;
  v5 = (char *)v92 + 40 * v93;
  if (!(_DWORD)v93)
  {
LABEL_115:
    v69 = 0;
    goto LABEL_116;
  }
  v69 = 126 - 2 * __clz(v93);
LABEL_116:
  sub_22EA450FC((uint64_t)v11, v5, v69, 1);
  v70 = (char *)v92;
  if ((_DWORD)v93)
  {
    v71 = (char *)v92 + 40 * v93;
    v72 = (char *)v92 + 4;
    do
    {
      v73 = v72 + 12;
      sub_22E90379C((_QWORD *)a1, *((_DWORD *)v72 - 1), (uint64_t)(v72 + 12), 0, (uint64_t)v84);
      sub_22E903BEC(v84);
      if (v72[4])
      {
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)v72, 0x6Cu, 0, (uint64_t)v83);
        sub_22E903BEC(v83);
      }
      v72 += 40;
    }
    while (v73 + 24 != v71);
    v70 = (char *)v92;
    if ((_DWORD)v93)
    {
      v74 = 40 * v93;
      do
      {
        v75 = &v70[v74];
        v76 = *(_QWORD *)&v70[v74 - 24];
        if (v76)
        {
          v77 = *((_QWORD *)v75 - 2);
          if (v77)
          {
            sub_22E3BB10C(v77, v76);
            *((_QWORD *)v75 - 3) = 0;
          }
        }
        v74 -= 40;
      }
      while (v74);
      v70 = (char *)v92;
    }
  }
  if (v70 != (char *)v94)
    free(v70);
}

unint64_t sub_22EA06918(_QWORD *a1, uint64_t *a2, int a3, int a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void **v20;
  uint64_t v21;
  int v22;
  uint64_t (**v23)();
  int v24;
  char v25;
  uint64_t v26;
  _BYTE v27[11];
  _QWORD v28[2];
  void *v29;
  uint64_t v30;
  _QWORD v31[4];

  v31[3] = *MEMORY[0x24BDAC8D0];
  v8 = sub_22EC65CE0(a1, a1[418], *a2, a3, 0, 0);
  if (v8)
    v9 = 1;
  else
    v9 = a4 == 0;
  if (!v9)
  {
    v25 = 1;
    v24 = 16843009;
    memset(v27, 0, sizeof(v27));
    v26 = 0;
    v23 = &off_24FAB7898;
    v20 = (void **)*a2;
    LODWORD(v21) = a3;
    sub_22EFC6D6C((uint64_t)&v22, (uint64_t)v20);
    sub_22EC6AB20((uint64_t)a1, (uint64_t *)&v20, 0, (uint64_t *)a1[418], 0, (uint64_t)&v23, 1, 0, (uint64_t)v28, 0, 0, 1u);
    v8 = 0;
    if (v28[0])
    {
      v21 = a1[11] + 2128;
      v22 = 5052;
      v13 = *a2;
      v14 = (void **)sub_22E3B8AAC(v21);
      v20 = v14;
      v15 = *(unsigned __int8 *)v14;
      *((_BYTE *)v14 + v15 + 1) = 5;
      *(_BYTE *)v14 = v15 + 1;
      v14[v15 + 2] = (void *)v13;
      sub_22EC6BEF8((uint64_t)a1, (uint64_t)v28, (uint64_t)&v20, 1);
      if (v20 && v21)
        sub_22E3BB10C(v21, (unint64_t)v20);
      v16 = sub_22F2E6D78((uint64_t)v28);
      v8 = v16;
      if ((*(_DWORD *)(v16 + 28) & 0x7F) == 0x16)
        v17 = v16;
      else
        v17 = 0;
      v18 = *(_QWORD *)(v17 + 40);
      if ((v18 & 7) != 0)
        v19 = 0;
      else
        v19 = v18 & 0xFFFFFFFFFFFFFFF8;
      *a2 = v19;
    }
    v20 = (void **)v31;
    sub_22E8D19C8(&v20);
    if (v29 != &v30)
      free(v29);
  }
  if (v8)
  {
    if ((*(_DWORD *)(v8 + 28) & 0x7F) == 0x16)
    {
      v10 = *(_QWORD *)(v8 + 120);
      if (!v10)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 96) + 88), *(_QWORD *)(v8 + 96));
        v10 = *(_QWORD *)(v8 + 120);
      }
      if (v10 >= 8)
      {
        v11 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
        if (v11)
          return v11;
      }
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

uint64_t *sub_22EA06B40(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  int v4;

  while (1)
  {
    v2 = *((_DWORD *)a2 + 2);
    if ((v2 & 8) == 0)
      goto LABEL_13;
    v3 = a2[45];
    if (!v3)
      break;
    v4 = *(_WORD *)(v3 + 8) & 0x7F;
    if (v4 == 33)
    {
      if ((*(_BYTE *)(v3 + 12) & 0x80) == 0)
        goto LABEL_13;
      break;
    }
    if (v4 != 12 && v4 != 5)
      break;
LABEL_13:
    a2 = (uint64_t *)*a2;
  }
  if ((v2 & 0x20) != 0 && (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) == 0)
    goto LABEL_13;
  return a2;
}

void sub_22EA06B98(uint64_t a1, unint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  char **v7;
  char *v8;
  char *v9;
  BOOL v10;
  char v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  char **v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  char **v24;
  BOOL v25;
  char **v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  unsigned int v35;
  const char *v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  _BOOL4 v69;
  int v70;
  int v71;
  _BOOL4 v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  BOOL v95;
  BOOL v96;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  unsigned int v126;
  __int128 v127;
  int v128;
  int v129;
  int v130;
  __int16 v131;
  char v132;
  BOOL v133;
  unsigned int v134;
  __int128 v135;
  int v136;
  int v137;
  int v138;
  __int16 v139;
  char v140;
  uint64_t v141;

  v141 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 28) & 0x80) != 0)
    return;
  v4 = sub_22EFC01DC(a2, 0);
  if (v4)
  {
    v5 = v4;
    v134 = 0;
    v133 = 0;
    if (sub_22F1CA0EC(*(uint64_t **)(*(_QWORD *)(a1 + 88) + 15208), v4, &v134, &v133, "pP") && !sub_22F31E3AC(a2))
    {
      v33 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v33)
        v34 = *(_BYTE *)(v33 + 16) == 26;
      else
        v34 = 0;
      if (v34
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
        && (v33 = sub_22F10CF48(v33)) != 0)
      {
        v35 = v134;
        v36 = "printf";
        if (v134 < (unsigned __int16)(*(_QWORD *)(v33 + 16) >> 38)
          && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v134)
                                                                      + 48) & 0xFFFFFFFFFFFFFFF0)
                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) == 32)
        {
          v36 = "NSString";
        }
      }
      else
      {
        v36 = "printf";
        v35 = v134;
      }
      v37 = *(_QWORD *)(a1 + 88);
      v38 = strlen(v36);
      v39 = sub_22E3CB704(*(llvm::StringMapImpl **)(v37 + 15192), v36, v38);
      v40 = *(_DWORD *)(a2 + 24);
      if (v133)
        v41 = 0;
      else
        v41 = v35 + 2;
      v135 = 0uLL;
      v136 = v40;
      v137 = v40;
      v138 = 0;
      v140 = 120;
      v139 = 0;
      v42 = sub_22F386FBC(v37, v39, v35 + 1, v41, &v135);
      sub_22EFCA95C(a2, v42);
    }
    if (sub_22F1CA0EC(*(uint64_t **)(*(_QWORD *)(a1 + 88) + 15208), v5, &v134, &v133, "sS") && !sub_22F31E3AC(a2))
    {
      v43 = *(_QWORD *)(a1 + 88);
      v44 = sub_22E3CB704(*(llvm::StringMapImpl **)(v43 + 15192), "scanf", 5uLL);
      if (v133)
        v45 = 0;
      else
        v45 = v134 + 2;
      v46 = *(_DWORD *)(a2 + 24);
      v135 = 0uLL;
      v136 = v46;
      v137 = v46;
      v138 = 0;
      v140 = 120;
      v139 = 0;
      v47 = sub_22F386FBC(v43, v44, v134 + 1, v45, &v135);
      sub_22EFCA95C(a2, v47);
    }
    *(_QWORD *)&v135 = &v136;
    *((_QWORD *)&v135 + 1) = 0x400000000;
    if (!sub_22EA331AC(a2) && sub_22F1CA1AC(*(uint64_t **)(*(_QWORD *)(a1 + 88) + 15208), v5, (uint64_t)&v135))
    {
      v60 = *(_QWORD *)(a1 + 88);
      v61 = *(_DWORD *)(a2 + 24);
      v127 = 0uLL;
      v128 = v61;
      v129 = v61;
      v130 = 0;
      v132 = 120;
      v131 = 0;
      v62 = sub_22F382A88(v60, (const void *)v135, DWORD2(v135), &v127);
      sub_22EFCA95C(a2, v62);
    }
    v6 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 244);
    v126 = v5 - 2024;
    if (v5 >= 0x7E8)
    {
      v116 = *(_QWORD **)(*(_QWORD *)(a1 + 88) + 15208);
      v117 = v116[1];
      if (v117 + 2024 <= (unint64_t)v5)
        v7 = (char **)(v116[2] + 48 * (v5 - v117 - 2024));
      else
        v7 = (char **)(*v116 + 48 * v126);
    }
    else
    {
      v7 = &(&off_24FAC8C40)[6 * v5];
    }
    v8 = strchr(v7[2], 101);
    v9 = strchr(v7[2], 103);
    if (!sub_22E3E3190(a2) && (unint64_t)v8 | (unint64_t)v9)
    {
      if (v8)
      {
        if (v9)
          v10 = (v6 & 0x180) == 0;
        else
          v10 = 1;
        v11 = v10;
        if ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 20) & 0x80000000000) != 0 || (v6 & 0x180) != 0 || (v11 & 1) == 0)
          goto LABEL_25;
        goto LABEL_101;
      }
      if (!v9 || (v6 & 0x180) == 0)
      {
LABEL_101:
        v66 = *(_QWORD *)(a1 + 88);
        v67 = *(_DWORD *)(a2 + 24);
        v127 = 0uLL;
        v128 = v67;
        v129 = v67;
        v130 = 0;
        v132 = 120;
        v131 = 0;
        v68 = sub_22F383BD4(v66, &v127);
        sub_22EFCA95C(a2, v68);
      }
    }
LABEL_25:
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088);
    v13 = *(_DWORD *)(v12 + 72);
    if (((v13 - 1) < 6
       || (v14 = *(_DWORD *)(v12 + 68), v13 == 16) && v14 == 15
       || v14 == 15 && (v13 == 17 || !v13))
      && !sub_22E3E3190(a2)
      && (v5 - 144 <= 3 && v5 != 146 || v5 - 1019 < 3))
    {
      v15 = *(_QWORD *)(a1 + 88);
      v16 = *(_DWORD *)(a2 + 24);
      v127 = 0uLL;
      v128 = v16;
      v129 = v16;
      v130 = 0;
      v132 = 120;
      v131 = 0;
      v17 = sub_22F383BD4(v15, &v127);
      sub_22EFCA95C(a2, v17);
    }
    else if (v5 > 0x7E7)
    {
      v124 = *(_QWORD **)(*(_QWORD *)(a1 + 88) + 15208);
      v125 = v124[1];
      if (v125 + 2024 <= (unint64_t)v5)
        v18 = (char **)(v124[2] + 48 * (v5 - v125 - 2024));
      else
        v18 = (char **)(*v124 + 48 * v126);
LABEL_38:
      if (strchr(v18[2], 106) && !sub_22E47254C(a2))
      {
        v52 = *(_QWORD *)(a1 + 88);
        v53 = *(_DWORD *)(a2 + 24);
        v127 = 0uLL;
        v128 = v53;
        v129 = v53;
        v130 = 0;
        v132 = 120;
        v131 = 0;
        v54 = sub_22F39F45C(v52, &v127);
        sub_22EFCA95C(a2, v54);
      }
      v19 = *(_QWORD *)(a1 + 88);
      if (v5 > 0x7E7)
      {
        v118 = *(_QWORD **)(v19 + 15208);
        v119 = v118[1];
        if (v119 + 2024 <= (unint64_t)v5)
          v20 = (char **)(v118[2] + 48 * (v5 - v119 - 2024));
        else
          v20 = (char **)(*v118 + 48 * v126);
      }
      else
      {
        v20 = &(&off_24FAC8C40)[6 * v5];
      }
      if (strchr(v20[2], 110))
      {
        v21 = sub_22E4725AC(a2);
        v19 = *(_QWORD *)(a1 + 88);
        if (!v21)
        {
          v22 = *(_DWORD *)(a2 + 24);
          v127 = 0uLL;
          v128 = v22;
          v129 = v22;
          v130 = 0;
          v132 = 120;
          v131 = 0;
          v23 = sub_22EF96AB8(v19, &v127);
          sub_22EFCA95C(a2, v23);
          v19 = *(_QWORD *)(a1 + 88);
        }
      }
      if (v5 > 0x7E7)
      {
        v120 = *(_QWORD **)(v19 + 15208);
        v121 = v120[1];
        if (v121 + 2024 <= (unint64_t)v5)
          v24 = (char **)(v120[2] + 48 * (v5 - v121 - 2024));
        else
          v24 = (char **)(*v120 + 48 * v126);
      }
      else
      {
        v24 = &(&off_24FAC8C40)[6 * v5];
      }
      if (strchr(v24[2], 85))
      {
        v25 = sub_22E47278C(a2);
        v19 = *(_QWORD *)(a1 + 88);
        if (!v25)
        {
          v55 = *(_DWORD *)(a2 + 24);
          v127 = 0uLL;
          v128 = v55;
          v129 = v55;
          v130 = 0;
          v132 = 120;
          v131 = 0;
          v56 = sub_22F39D714(v19, &v127);
          sub_22EFCA95C(a2, v56);
          v19 = *(_QWORD *)(a1 + 88);
        }
      }
      if (v5 > 0x7E7)
      {
        v122 = *(_QWORD **)(v19 + 15208);
        v123 = v122[1];
        if (v123 + 2024 <= (unint64_t)v5)
          v26 = (char **)(v122[2] + 48 * (v5 - v123 - 2024));
        else
          v26 = (char **)(*v122 + 48 * v126);
      }
      else
      {
        v26 = &(&off_24FAC8C40)[6 * v5];
      }
      if (strchr(v26[2], 99) && !sub_22E3E3190(a2))
      {
        v57 = *(_QWORD *)(a1 + 88);
        v58 = *(_DWORD *)(a2 + 24);
        v127 = 0uLL;
        v128 = v58;
        v129 = v58;
        v130 = 0;
        v132 = 120;
        v131 = 0;
        v59 = sub_22F383BD4(v57, &v127);
        sub_22EFCA95C(a2, v59);
      }
      if (v5 >= 0x7E8
        && (*(_QWORD *)(*(_QWORD *)(a1 + 72) + 64) & 0x2000000000) != 0
        && !sub_22E466E5C(a2)
        && !sub_22F295B40(a2))
      {
        v63 = *(_QWORD *)(a1 + 88);
        v64 = *(_DWORD *)(a2 + 24);
        if (((*(_WORD *)(*(_QWORD *)(a1 + 72) + 96) & 0x80) == 0) != *(_QWORD *)(*(_QWORD *)(v63 + 15208) + 8)
                                                                        + 2024 <= (unint64_t)v5)
        {
          v127 = 0uLL;
          v128 = v64;
          v129 = v64;
          v130 = 0;
          v132 = 120;
          v131 = 0;
          v65 = sub_22F38218C(v63, &v127);
        }
        else
        {
          v127 = 0uLL;
          v128 = v64;
          v129 = v64;
          v130 = 0;
          v132 = 120;
          v131 = 0;
          v65 = sub_22F381CB8(v63, &v127);
        }
        sub_22EFCA95C(a2, v65);
      }
      if ((int)v5 <= 809)
      {
        if (v5 == 806)
        {
          v48 = *(_QWORD *)(a1 + 88);
          v49 = (*(_DWORD *)(a2 + 28) & 0x7E) - 58;
          v50 = -2147483647;
          if (v49 >= 0xFFFFFFFA)
          {
            if (sub_22EFBAEF8(a2))
              v50 = -1073741823;
            else
              v50 = -2147483647;
            v49 = (*(_DWORD *)(a2 + 28) & 0x7E) - 58;
          }
          if (v49 >= 0xFFFFFFFA)
          {
            v72 = sub_22EFBAEF8(a2);
            v73 = -1073741823;
            if (!v72)
              v73 = -2147483647;
            v51 = v73 + 1;
          }
          else
          {
            v51 = -2147483646;
          }
          v74 = *(_DWORD *)(a2 + 24);
          v127 = 0uLL;
          v128 = v74;
          v129 = v74;
          v130 = 0;
          v132 = 120;
          v131 = 0;
          v32 = v48;
          v28 = v50;
          goto LABEL_111;
        }
        if (v5 != 809)
          goto LABEL_112;
        v29 = -2147483647;
        v30 = *(_QWORD *)(a1 + 88);
        if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA && sub_22EFBAEF8(a2))
          v29 = -1073741823;
        v31 = *(_DWORD *)(a2 + 24);
        v127 = 0uLL;
        v128 = v31;
        v129 = v31;
        v130 = 0;
        v132 = 120;
        v131 = 0;
        v32 = v30;
        v28 = v29;
      }
      else
      {
        if (v5 != 810)
        {
          if (v5 != 883 && v5 != 819)
            goto LABEL_112;
          if (!sub_22F310CD8(a2))
          {
            v112 = -2147483647;
            v113 = *(_QWORD *)(a1 + 88);
            if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA && sub_22EFBAEF8(a2))
              v112 = -1073741823;
            v114 = *(_DWORD *)(a2 + 24);
            v127 = 0uLL;
            v128 = v114;
            v129 = v114;
            v130 = 0;
            v132 = 120;
            v131 = 0;
            v115 = sub_22F37CF44(v113, v112, &v127);
            sub_22EFCA95C(a2, v115);
          }
          if ((v5 | 0x40) != 0x373)
            goto LABEL_112;
        }
        v27 = *(_QWORD *)(a1 + 88);
        if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
        {
          v69 = sub_22EFBAEF8(a2);
          v70 = -1073741823;
          if (!v69)
            v70 = -2147483647;
          v28 = v70 + 1;
        }
        else
        {
          v28 = -2147483646;
        }
        v71 = *(_DWORD *)(a2 + 24);
        v127 = 0uLL;
        v128 = v71;
        v129 = v71;
        v130 = 0;
        v132 = 120;
        v131 = 0;
        v32 = v27;
      }
      v51 = 0;
LABEL_111:
      v75 = sub_22F37D130(v32, v28, v51, &v127);
      sub_22EFCA95C(a2, v75);
LABEL_112:
      if ((int *)v135 != &v136)
        free((void *)v135);
      goto LABEL_114;
    }
    v18 = &(&off_24FAC8C40)[6 * v5];
    goto LABEL_38;
  }
LABEL_114:
  sub_22EA32F94(a1, a2);
  if ((~*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) & 0x2400000000000) == 0 && sub_22EFB9440(a2) && !sub_22E4725AC(a2))
  {
    v76 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
    v77 = v76 && *(_BYTE *)(v76 + 16) == 26;
    if (!v77
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v76 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26
       || (v76 = sub_22F10CF48(v76)) == 0)
      || (*(_WORD *)(v76 + 22) & 0x3C0) == 0)
    {
      v78 = *(_QWORD *)(a1 + 88);
      v79 = *(_DWORD *)(a2 + 24);
      v135 = 0uLL;
      v136 = v79;
      v137 = v79;
      v138 = 0;
      v140 = 120;
      v139 = 0;
      v80 = sub_22EF96AB8(v78, &v135);
      sub_22EFCA95C(a2, v80);
    }
  }
  v81 = *(_QWORD *)(a2 + 40);
  if ((v81 & 7) != 0)
    return;
  v82 = v81 & 0xFFFFFFFFFFFFFFF8;
  if ((v81 & 0xFFFFFFFFFFFFFFF8) == 0)
    return;
  v83 = *(_QWORD *)(a2 + 16);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
  {
    v84 = v83 & 0xFFFFFFFFFFFFFFF8;
    if ((v83 & 4) == 0)
      goto LABEL_133;
    goto LABEL_132;
  }
  v84 = v83 & 0xFFFFFFFFFFFFFFF8;
  v85 = v83 & 0xFFFFFFFFFFFFFFF8;
  if ((v83 & 4) != 0)
    v85 = *(_QWORD *)v84;
  if ((*(_WORD *)(v85 + 8) & 0x7F) == 0x53)
    goto LABEL_135;
  if ((v83 & 4) != 0)
LABEL_132:
    v84 = *(_QWORD *)v84;
LABEL_133:
  if ((*(_WORD *)(v84 + 8) & 0x7F) != 0xC || (*(_DWORD *)(v84 + 8) & 0xE000) != 0x2000)
    return;
LABEL_135:
  v86 = *(_QWORD *)(v82 + 16);
  if (*(_DWORD *)v86 == 9)
  {
    v87 = *(_QWORD *)(v86 + 16);
    v88 = *(unsigned __int8 *)(v86 + 24);
    if (v87 == 0x746E697270736176 && v88 == 102)
    {
LABEL_166:
      if (!sub_22F31E3AC(a2))
      {
        v102 = *(_QWORD *)(a1 + 88);
        v103 = sub_22E3CB704(*(llvm::StringMapImpl **)(v102 + 15192), "printf", 6uLL);
        v104 = *(_QWORD *)(v82 + 16);
        v105 = 3;
        if (*(_DWORD *)v104 == 9)
        {
          if (*(_QWORD *)(v104 + 16) ^ 0x746E697270736176 | *(unsigned __int8 *)(v104 + 24) ^ 0x66)
            v105 = 3;
          else
            v105 = 0;
        }
        v106 = *(_DWORD *)(a2 + 24);
        v135 = 0uLL;
        v136 = v106;
        v137 = v106;
        v138 = 0;
        v140 = 120;
        v139 = 0;
        v107 = sub_22F386FBC(v102, v103, 2, v105, &v135);
        sub_22EFCA95C(a2, v107);
      }
    }
  }
  else if (*(_DWORD *)v86 == 8 && *(_QWORD *)(v86 + 16) == 0x66746E6972707361)
  {
    goto LABEL_166;
  }
  v90 = *(_QWORD *)(v82 + 16);
  if (*(_DWORD *)v90 == 28)
  {
    v91 = *(_QWORD *)(v90 + 16);
    v92 = *(_QWORD *)(v90 + 24);
    v93 = *(_QWORD *)(v90 + 32);
    v94 = *(_DWORD *)(v90 + 40);
    v95 = v91 == 0x6972745346435F5FLL && v92 == 0x6F43656B614D676ELL;
    v96 = v95 && v93 == 0x7453746E6174736ELL;
    if (v96 && v94 == 1735289202)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        goto LABEL_172;
      sub_22EFC8E88(a2);
      v99 = *((unsigned int *)v98 + 2);
      if ((_DWORD)v99)
      {
        v100 = 8 * v99;
        v101 = *v98;
        while (*(_WORD *)(*(_QWORD *)v101 + 32) != 180)
        {
          v101 += 8;
          v100 -= 8;
          if (!v100)
            goto LABEL_172;
        }
      }
      else
      {
        v101 = *v98;
      }
      if (v101 == *v98 + 8 * v99)
      {
LABEL_172:
        v108 = -2147483647;
        v109 = *(_QWORD *)(a1 + 88);
        if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA && sub_22EFBAEF8(a2))
          v108 = -1073741823;
        v110 = *(_DWORD *)(a2 + 24);
        v135 = 0uLL;
        v136 = v110;
        v137 = v110;
        v138 = 0;
        v140 = 120;
        v139 = 0;
        v111 = sub_22F387104(v109, v108, &v135);
        sub_22EFCA95C(a2, v111);
      }
    }
  }
}

unint64_t sub_22EA07920(uint64_t a1, uint64_t a2, unsigned int a3, _QWORD *a4, int a5, int a6)
{
  unint64_t v11;
  int v12;
  BOOL v13;
  void **v14;
  unint64_t v15;
  unsigned int v16;
  char **v17;
  unsigned int v18;
  void **v19;
  uint64_t v20;
  char **v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int i;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  size_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  void *v84;
  uint64_t v85;
  _BYTE v86[128];
  __int128 v87;
  uint64_t v88;
  int v89;
  __int16 v90;
  char v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  sub_22EC608B8((_QWORD *)a1, a4, a3);
  v83 = 0;
  v11 = sub_22EF72B64(*(_QWORD *)(a1 + 88), a3, &v83, 0);
  v82 = v11;
  v12 = v83;
  if (v83)
  {
    v13 = v83 == 1 || a5 == 0;
    if (!v13 && !sub_22F31D240(*(uint64_t **)(*(_QWORD *)(a1 + 88) + 15208), a3))
    {
      if (v12 != 3)
      {
        sub_22E8FCA40((_QWORD *)a1, a6, 0x1A07u, 0, (uint64_t)&v87);
        __asm { BR              X9; loc_22EA08080 }
      }
      sub_22E8FCA40((_QWORD *)a1, a6, 0x1A06u, 0, (uint64_t)&v87);
      if (a3 > 0x7E7)
      {
        v76 = *(uint64_t **)(*(_QWORD *)(a1 + 88) + 15208);
        v77 = v76[1];
        if (v77 + 2024 <= (unint64_t)a3)
        {
          v78 = a3 - v77 - 2024;
          v79 = v76[2];
        }
        else
        {
          v78 = a3 - 2024;
          v79 = *v76;
        }
        v14 = (void **)(v79 + 48 * v78);
      }
      else
      {
        v14 = (void **)&(&off_24FAC8C40)[6 * a3];
      }
      v84 = *v14;
      sub_22E8AECC4((uint64_t)&v87, (uint64_t *)&v84);
      sub_22E903BEC((unsigned int *)&v87);
    }
    return 0;
  }
  v15 = v11;
  if ((a5 & 1) == 0)
  {
    v16 = a3 - 2024;
    if (a3 < 0x7E8)
    {
      if (!strchr((&off_24FAC8C40)[6 * a3 + 2], 102))
      {
        v17 = &(&off_24FAC8C40)[6 * a3];
        goto LABEL_15;
      }
LABEL_16:
      if ((**(_QWORD **)(a1 + 72) & 1) != 0)
        v18 = 5264;
      else
        v18 = 5263;
      sub_22E8FCA40((_QWORD *)a1, a6, v18, 0, (uint64_t)&v87);
      if (a3 > 0x7E7)
      {
        v68 = *(_QWORD **)(*(_QWORD *)(a1 + 88) + 15208);
        v69 = v68[1];
        if (v69 + 2024 <= (unint64_t)a3)
          v19 = (void **)(v68[2] + 48 * (a3 - v69 - 2024));
        else
          v19 = (void **)(*v68 + 48 * v16);
      }
      else
      {
        v19 = (void **)&(&off_24FAC8C40)[6 * a3];
      }
      v84 = *v19;
      v20 = sub_22E8AECC4((uint64_t)&v87, (uint64_t *)&v84);
      sub_22E8901B8(v20, (uint64_t *)&v82);
      sub_22E903BEC((unsigned int *)&v87);
      if (a3 > 0x7E7)
      {
        v70 = *(_QWORD **)(*(_QWORD *)(a1 + 88) + 15208);
        v71 = v70[1];
        if (v71 + 2024 <= (unint64_t)a3)
          v21 = (char **)(v70[2] + 48 * (a3 - v71 - 2024));
        else
          v21 = (char **)(*v70 + 48 * v16);
      }
      else
      {
        v21 = &(&off_24FAC8C40)[6 * a3];
      }
      v84 = v21[3];
      if (v84)
      {
        sub_22E8FCA40((_QWORD *)a1, a6, 0x162Cu, 0, (uint64_t)&v87);
        v22 = sub_22E96133C((uint64_t)&v87, (uint64_t *)&v84);
        if (a3 > 0x7E7)
        {
          v72 = *(_QWORD **)(*(_QWORD *)(a1 + 88) + 15208);
          v73 = v72[1];
          if (v73 + 2024 <= (unint64_t)a3)
            v23 = (uint64_t *)(v72[2] + 48 * (a3 - v73 - 2024));
          else
            v23 = (uint64_t *)(*v72 + 48 * v16);
        }
        else
        {
          v23 = (uint64_t *)&(&off_24FAC8C40)[6 * a3];
        }
        v81 = *v23;
        sub_22E8AECC4(v22, &v81);
        sub_22E903BEC((unsigned int *)&v87);
      }
      v15 = v82;
      goto LABEL_28;
    }
    v65 = *(uint64_t **)(*(_QWORD *)(a1 + 88) + 15208);
    v66 = v65[1];
    if (v66 + 2024 <= (unint64_t)a3)
    {
      v74 = a3 - v66 - 2024;
      v75 = v65[2];
      if (strchr(*(char **)(v75 + 48 * v74 + 16), 102))
        goto LABEL_16;
      v17 = (char **)(v75 + 48 * v74);
    }
    else
    {
      v67 = *v65;
      if (strchr(*(char **)(*v65 + 48 * v16 + 16), 102))
        goto LABEL_16;
      v17 = (char **)(v67 + 48 * v16);
    }
LABEL_15:
    if (!strchr(v17[2], 104))
      goto LABEL_28;
    goto LABEL_16;
  }
LABEL_28:
  if (v15 < 0x10)
    return 0;
  v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 1960) + 80);
  v27 = sub_22E3CD31C((uint64_t *)(v26 + 72), v26);
  if (v27)
    v28 = v27 + 40;
  else
    v28 = 0;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
  {
    v29 = sub_22EFD899C(*(_QWORD *)(a1 + 88), v28, a6, a6, 1, 0);
    *(_DWORD *)(v29 + 28) |= 0x200u;
    sub_22EFCCFA0(v28, v29);
    if (v29)
      v28 = v29 + 40;
    else
      v28 = 0;
  }
  v30 = *(_QWORD *)(a1 + 88);
  v31 = *(_DWORD *)(a1 + 56) & 0xFC;
  v32 = *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0);
  if (v32)
    v33 = *(_BYTE *)(v32 + 16) == 26;
  else
    v33 = 0;
  v80 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFF0);
  if (v33)
  {
    v34 = a6;
  }
  else
  {
    v34 = a6;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v32 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
      v32 = sub_22F10CF48(v32);
    else
      v32 = 0;
  }
  v35 = v32 != 0;
  *(_QWORD *)&v87 = a2;
  DWORD2(v87) = a6;
  sub_22EFC6D6C((uint64_t)&v88, a2);
  v24 = sub_22EFC4400(v30, v28, v34, (uint64_t *)&v87, v15, 0, 1, v31 != 4, 0, v35, 0, 0);
  *(_DWORD *)(v24 + 28) |= 0x200u;
  v36 = *(_QWORD *)(a1 + 88);
  v87 = 0uLL;
  v89 = 0;
  v88 = 0;
  v91 = 120;
  v90 = 0;
  v37 = sub_22EF9612C(v36, a3, &v87);
  sub_22EFCA95C(v24, v37);
  v38 = *v80;
  if (*v80 && *(_BYTE *)(v38 + 16) == 26)
  {
    *(_QWORD *)&v87 = &v88;
    *((_QWORD *)&v87 + 1) = 0x1000000000;
    v84 = v86;
    v85 = 0x1000000000;
    v39 = *(_QWORD *)(v38 + 16);
    if ((v39 & 0x3FFFC000000000) != 0)
    {
      v40 = 0;
      v41 = 0;
      v42 = v38 + 40;
      v43 = (unsigned __int16)(v39 >> 38);
      do
      {
        v44 = sub_22EFBF080(*(_QWORD *)(a1 + 88), v24 + 72, 0, 0, 0, *(_QWORD *)(v42 + 8 * v41), 0, 0, 0);
        v45 = v44;
        v46 = *(_DWORD *)(v44 + 96);
        *(_DWORD *)(v44 + 96) = v46 & 0xFFF01FFF;
        if (v41 >= 0xFF)
          sub_22F3AC2B8(v44, v41);
        else
          *(_DWORD *)(v44 + 96) = v46 & 0xF0001FFF | v40 & 0xFF00000;
        v47 = DWORD2(v87);
        if (DWORD2(v87) >= (unint64_t)HIDWORD(v87))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v47 = DWORD2(v87);
        }
        *(_QWORD *)(v87 + 8 * v47) = v45;
        ++DWORD2(v87);
        v48 = *(_QWORD *)(v42 + 8 * v41);
        v49 = v85;
        if (v85 >= (unint64_t)HIDWORD(v85))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v49 = v85;
        }
        *((_QWORD *)v84 + v49) = v48;
        LODWORD(v85) = v85 + 1;
        ++v41;
        v40 += 0x100000;
      }
      while (v43 != v41);
      v50 = (uint64_t *)v87;
      v51 = DWORD2(v87);
      if (!v24)
        goto LABEL_63;
    }
    else
    {
      v51 = 0;
      v50 = &v88;
      if (!v24)
        goto LABEL_63;
    }
    v52 = v24;
    if ((*(_DWORD *)(v24 + 28) & 0x7F) == 0x53)
    {
LABEL_89:
      if (v51)
      {
        v60 = 8 * v51;
        v61 = (void *)sub_22E3CD3D4(*(_QWORD *)(v52 + 88) + 2032, 8 * v51, 3);
        *(_QWORD *)(v24 + 120) = v61;
        memmove(v61, v50, v60);
      }
      if (v84 != v86)
        free(v84);
      if ((uint64_t *)v87 != &v88)
        free((void *)v87);
      goto LABEL_95;
    }
LABEL_63:
    v53 = *(_QWORD *)(v24 + 16);
    v54 = v53 & 0xFFFFFFFFFFFFFFF8;
    if ((v53 & 4) != 0)
      v54 = *(_QWORD *)v54;
    for (i = *(_WORD *)(v54 + 8) & 0x7F; i != 83; i = *(_WORD *)(v54 + 8) & 0x7F)
    {
      v56 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v56 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_76;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_75;
        if (i == 16)
          goto LABEL_69;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_82;
        if (i == 24)
        {
LABEL_69:
          v56 = -48;
        }
        else
        {
LABEL_75:
          if (i != 70)
          {
LABEL_76:
            v57 = i - 52;
            if ((i - 33) >= 5)
              v58 = -48;
            else
              v58 = -64;
            if (v57 >= 6)
              v56 = v58;
            else
              v56 = -72;
            goto LABEL_82;
          }
          v56 = -64;
        }
      }
LABEL_82:
      v59 = *(_QWORD *)(v54 + v56 + 16);
      v54 = v59 & 0xFFFFFFFFFFFFFFF8;
      if ((v59 & 4) != 0)
        v54 = *(_QWORD *)v54;
    }
    v52 = v54 - 40;
    goto LABEL_89;
  }
LABEL_95:
  sub_22EA06B98(a1, v24);
  sub_22EA082A4(a1, v24);
  v62 = *(_QWORD *)(a1 + 216);
  v63 = *(_QWORD *)(v24 + 16);
  v64 = (_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF8);
  if ((v63 & 4) != 0)
    v64 = (_QWORD *)*v64;
  *(_QWORD *)(a1 + 216) = v64;
  sub_22EA0483C(a1, v24, *(uint64_t **)(a1 + 3344), 1);
  *(_QWORD *)(a1 + 216) = v62;
  return v24;
}

uint64_t sub_22EA082A4(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;

  if ((*(_BYTE *)(*(_QWORD *)(result + 72) + 1) & 1) != 0)
    goto LABEL_2;
  v7 = result;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) != 0)
    v5 = *(_QWORD *)(v5 + 8);
  v6 = *(_WORD *)(sub_22EFCBB30(v5) + 8) & 0x7F;
  result = v7;
  if (v6 != 83)
  {
LABEL_2:
    v3 = sub_22EF59494(*(_QWORD *)(result + 88));
    return sub_22EFCE90C(v3 + 40, a2);
  }
  return result;
}

uint64_t sub_22EA08320(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v15[25];
  _BOOL4 v16;
  uint64_t v17;
  unint64_t v18;

  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Fu) - 42 >= 0xFFFFFFFD)
  {
    v6 = *(_QWORD *)((*(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8) + ((2 * *(_QWORD *)(a2 + 80)) & 8));
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 48);
    if (v7)
      v6 = v7 & 0xFFFFFFFFFFFFFFF0;
    else
      v6 = sub_22EF6462C(a1[11], a2);
  }
  v18 = v6;
  v8 = *(_QWORD *)((*(_QWORD *)(a3 + 80) & 0xFFFFFFFFFFFFFFF8) + ((2 * *(_QWORD *)(a3 + 80)) & 8));
  v17 = v8;
  v9 = *(_DWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 16);
  if ((v9 & 0x800) != 0)
  {
    v16 = (*(_DWORD *)(a2 + 28) & 0x7F) == 40;
    sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x121Cu, 0, (uint64_t)v15);
    v11 = sub_22E8900C4((uint64_t)v15, (int *)&v16);
    v12 = &v17;
  }
  else
  {
    if (v6 == v8
      || ((*(_DWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 16) | v9) & 0x400) != 0
      || (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 8) | v6 & 7) == (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 8) | v8 & 7))
    {
      return 0;
    }
    v16 = (*(_DWORD *)(a2 + 28) & 0x7F) == 40;
    sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x1218u, 0, (uint64_t)v15);
    v10 = sub_22E8900C4((uint64_t)v15, (int *)&v16);
    v11 = sub_22E8901B8(v10, &v17);
    v12 = (uint64_t *)&v18;
  }
  sub_22E8901B8(v11, v12);
  sub_22E903BEC(v15);
  if (*(_DWORD *)(a2 + 24))
    sub_22F31D30C((uint64_t)a1, a2, *(_DWORD *)(a3 + 24));
  v13 = 1;
  sub_22EFC77E8(a3, 1);
  return v13;
}

int32x2_t sub_22EA084D0(uint64_t a1, unint64_t a2, _BYTE *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int32x2_t result;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int i;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t k;
  unint64_t v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  BOOL v103;
  uint64_t v104;
  int v105;
  unsigned __int16 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  unsigned int v112;
  uint64_t j;
  unint64_t v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  int v120;
  uint64_t v121;
  unsigned int *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int *v130;
  uint64_t v131;
  uint64_t **v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  const void **v159;
  uint64_t v160;
  uint64_t v161;
  size_t v162;
  const void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  int m;
  uint64_t v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  int v181;
  int v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  int n;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t **v191;
  uint64_t *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  int v200;
  uint64_t v201;
  unsigned int v202;
  unsigned int v203;
  uint64_t v204;
  int v205;
  int v206;
  int v207;
  uint64_t v208;
  int v209;
  unsigned __int16 *v210;
  int v211;
  llvm::StringMapImpl *v212;
  int v213;
  unsigned int v214;
  const char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t *v222;
  uint64_t *v223;
  uint64_t v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t *v232;
  uint64_t *v233;
  uint64_t *v234;
  unsigned int v235;
  uint64_t v236;
  uint64_t *v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  unint64_t v242;
  unsigned int v243;
  unsigned int v244;
  uint64_t v245;
  unsigned int *v246;
  int v247;
  uint64_t v248;
  unint64_t v249;
  int ii;
  uint64_t v251;
  unsigned int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  __int16 v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  __int16 v262;
  _BYTE v263[24];
  const void **v264;
  int v265;
  unint64_t v266;
  _QWORD *v268;
  unint64_t v269;
  unsigned int v270[24];
  unsigned int v271[24];
  unsigned int v272[24];
  unsigned int v273[24];
  unsigned int v274[24];
  unsigned int v275[24];
  _BYTE v276[96];
  unsigned int v277[24];
  _BYTE v278[96];
  unsigned int v279[24];
  unsigned int v280[24];
  uint64_t v281[12];
  uint64_t v282;
  uint64_t v283[12];
  _QWORD *v284;
  uint64_t v285;
  _QWORD v286[12];

  v286[10] = *MEMORY[0x24BDAC8D0];
  v7 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a3 + 56))(a3);
  if ((*(_BYTE *)(v7 + 29) & 1) != 0)
  {
    sub_22EFC8E88(v7);
    v9 = *(uint64_t **)v8;
    v10 = *(unsigned int *)(v8 + 8);
    v11 = *(uint64_t **)v8;
    if ((_DWORD)v10)
    {
      v12 = 8 * v10;
      v11 = *(uint64_t **)v8;
      while (*(_WORD *)(*v11 + 32) != 340)
      {
        ++v11;
        v12 -= 8;
        if (!v12)
          goto LABEL_8;
      }
    }
    if (v11 != &v9[v10])
    {
      do
      {
        v21 = *v9++;
        v20 = v21;
      }
      while (*(_WORD *)(v21 + 32) != 340);
      sub_22F3A5474(v20, *(_QWORD *)(a1 + 88));
      v23 = *(_WORD *)(v22 + 32);
      *(_BYTE *)(v22 + 34) |= 1u;
      *(_WORD *)(v22 + 32) = v23;
      sub_22EFCA95C(a2, v22);
    }
  }
LABEL_8:
  v13 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a3 + 56))(a3);
  if ((*(_BYTE *)(v13 + 29) & 1) != 0)
  {
    *(double *)&result = sub_22EFC8E88(v13);
    v16 = *(uint64_t **)v15;
    v17 = *(unsigned int *)(v15 + 8);
    v18 = *(uint64_t **)v15;
    if ((_DWORD)v17)
    {
      v19 = 8 * v17;
      v18 = *(uint64_t **)v15;
      while (*(_WORD *)(*v18 + 32) != 298)
      {
        ++v18;
        v19 -= 8;
        if (!v19)
          goto LABEL_17;
      }
    }
    if (v18 != &v16[v17])
    {
      do
      {
        v25 = *v16++;
        v24 = v25;
      }
      while (*(_WORD *)(v25 + 32) != 298);
      sub_22F39F054(v24, *(_QWORD *)(a1 + 88));
      v27 = *(_WORD *)(v26 + 32);
      *(_BYTE *)(v26 + 34) |= 1u;
      *(_WORD *)(v26 + 32) = v27;
      sub_22EFCA95C(a2, v26);
    }
  }
LABEL_17:
  if ((a3[29] & 1) != 0)
  {
    sub_22EFC8E88((uint64_t)a3);
    v29 = *(uint64_t **)v28;
    v30 = *(unsigned int *)(v28 + 8);
    v31 = *(uint64_t **)v28;
    if ((_DWORD)v30)
    {
      v32 = 8 * v30;
      v31 = *(uint64_t **)v28;
      while (*(_WORD *)(*v31 + 32) != 149)
      {
        ++v31;
        v32 -= 8;
        if (!v32)
          goto LABEL_30;
      }
    }
    if (v31 != &v29[v30])
    {
      do
      {
        v34 = *v29++;
        v33 = v34;
      }
      while (*(_WORD *)(v34 + 32) != 149);
      goto LABEL_31;
    }
  }
  else if ((*(_BYTE *)(a2 + 29) & 1) == 0)
  {
    return result;
  }
LABEL_30:
  v33 = 0;
LABEL_31:
  v269 = (unint64_t)a3;
  if ((*(_BYTE *)(a2 + 29) & 1) == 0)
    goto LABEL_41;
  sub_22EFC8E88(a2);
  v36 = *(uint64_t **)v35;
  v37 = *(unsigned int *)(v35 + 8);
  v38 = *(uint64_t **)v35;
  if ((_DWORD)v37)
  {
    v39 = 8 * v37;
    v38 = *(uint64_t **)v35;
    while (*(_WORD *)(*v38 + 32) != 149)
    {
      ++v38;
      v39 -= 8;
      if (!v39)
        goto LABEL_41;
    }
  }
  if (v38 == &v36[v37])
  {
LABEL_41:
    if (!v33)
      goto LABEL_107;
    v43 = 0;
    v40 = 0;
    v42 = 1;
  }
  else
  {
    do
    {
      v41 = *v36++;
      v40 = v41;
    }
    while (*(_WORD *)(v41 + 32) != 149);
    if (v33)
      goto LABEL_107;
    v42 = 0;
    v43 = 1;
  }
  v44 = sub_22EFBC608(v269);
  if (v44)
  {
    if (v44 != a2)
    {
      if (v43)
      {
        sub_22EA0A550(a1, v44, v40, 0);
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v46 = *(char **)v45;
          v47 = *(unsigned int *)(v45 + 8);
          if ((_DWORD)v47)
          {
            v48 = &v46[8 * v47];
            v49 = 8 * v47 - 8;
            v50 = *(char **)v45;
            v51 = *(char **)v45;
            while (1)
            {
              v52 = *(_QWORD *)v51;
              v51 += 8;
              if (*(_WORD *)(v52 + 32) == 149)
                break;
              v49 -= 8;
              v50 = v51;
              if (v51 == v48)
                goto LABEL_105;
            }
            if (v51 == v48)
            {
              v48 = v50;
            }
            else
            {
              v64 = 8;
              v48 = v50;
              do
              {
                v65 = *(_QWORD *)&v50[v64];
                if (*(_WORD *)(v65 + 32) != 149)
                {
                  *(_QWORD *)v48 = v65;
                  v48 += 8;
                }
                v64 += 8;
                v49 -= 8;
              }
              while (v49);
              v46 = *(char **)v45;
            }
          }
          else
          {
            v48 = *(char **)v45;
          }
LABEL_105:
          v66 = (unint64_t)(v48 - v46) >> 3;
          *(_DWORD *)(v45 + 8) = v66;
          if (!(_DWORD)v66)
            *(_DWORD *)(a2 + 28) &= ~0x100u;
        }
      }
      goto LABEL_107;
    }
    goto LABEL_56;
  }
  v53 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (a2 && v53 == 64 && (*(_DWORD *)(a2 + 96) & 0x600u) - 1536 > 0xFFFFFBFF)
  {
LABEL_60:
    v55 = *(_QWORD *)(a2 + 16);
    v56 = v55 & 0xFFFFFFFFFFFFFFF8;
    if ((v55 & 4) != 0)
      v56 = *(_QWORD *)v56;
    for (i = *(_WORD *)(v56 + 8) & 0x7F; i != 83; i = *(_WORD *)(v56 + 8) & 0x7F)
    {
      v58 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v58 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_73;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_72;
        if (i == 16)
          goto LABEL_66;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_79;
        if (i == 24)
        {
LABEL_66:
          v58 = -48;
        }
        else
        {
LABEL_72:
          if (i != 70)
          {
LABEL_73:
            v59 = i - 52;
            if ((i - 33) >= 5)
              v60 = -48;
            else
              v60 = -64;
            if (v59 >= 6)
              v58 = v60;
            else
              v58 = -72;
            goto LABEL_79;
          }
          v58 = -64;
        }
      }
LABEL_79:
      v61 = *(_QWORD *)(v56 + v58 + 16);
      v56 = v61 & 0xFFFFFFFFFFFFFFF8;
      if ((v61 & 4) != 0)
        v56 = *(_QWORD *)v56;
    }
    v54 = v56 - 40;
LABEL_86:
    if (sub_22EFBBF74(a2, *(_QWORD *)(v54 + 88)))
      v62 = 1;
    else
      v62 = a2 == 0;
    if (!v62 || ((v42 ^ 1) & 1) != 0)
      goto LABEL_107;
    goto LABEL_92;
  }
  if (*(_QWORD *)(a2 + 88) <= 7uLL)
  {
    if (a2)
    {
      v54 = a2;
      if (v53 == 83)
        goto LABEL_86;
    }
    goto LABEL_60;
  }
LABEL_56:
  if (!v42)
    goto LABEL_107;
LABEL_92:
  v63 = *(unsigned __int8 *)(v33 + 30);
  if ((~(v63 << 16) & 0x780000) != 0)
  {
    if ((((*(unsigned __int16 *)(v33 + 28) | (v63 << 16)) >> 19) & 0xF) != 0)
      goto LABEL_107;
  }
  else if (sub_22F1BFAD0(v33))
  {
    goto LABEL_107;
  }
  sub_22EA0A550(a1, a2, v33, 1);
LABEL_107:
  v268 = (_QWORD *)a1;
  if ((*(_BYTE *)(a2 + 29) & 1) == 0)
    goto LABEL_108;
  v72 = *(_DWORD *)(v269 + 28);
  if ((v72 & 0x7Fu) - 38 >= 0xFFFFFFFB)
  {
    v73 = (void *)sub_22EFC3500(v269);
    if (!v73)
      goto LABEL_108;
    goto LABEL_165;
  }
  if ((v72 & 0x7Fu) - 67 >= 0xFFFFFFF9)
  {
    v81 = *(_QWORD *)(v269 + 16);
    v82 = v81 & 0xFFFFFFFFFFFFFFF8;
    if ((v81 & 4) != 0)
      v82 = *(_QWORD *)v82;
    v83 = *(_WORD *)(v82 + 8) & 0x7F;
    if (v83 == 83)
    {
LABEL_155:
      v88 = *(_QWORD *)(v269 + 80);
      if (v88)
      {
        v89 = 0;
        v90 = *(_QWORD *)(v82 + 48);
        v73 = *(void **)(v269 + 80);
        while (sub_22EFBBF74((unint64_t)v73, v90) != 2)
        {
          if ((*((_BYTE *)v73 + 72) & 3) != 0)
          {
            if (v89)
              goto LABEL_163;
            v89 = 1;
          }
          v91 = sub_22E3CD31C((uint64_t *)v73 + 9, (uint64_t)v73);
          if (v91 != v88)
          {
            v73 = (void *)v91;
            if (v91)
              continue;
          }
          goto LABEL_163;
        }
      }
      else
      {
LABEL_163:
        v73 = (void *)sub_22F3AC108(v269);
      }
      a1 = (uint64_t)v268;
      if (!v73)
        goto LABEL_108;
      goto LABEL_165;
    }
    while (1)
    {
      v84 = -40;
      if (v83 > 70)
      {
        if (v83 == 71)
        {
          v84 = -56;
        }
        else if (v83 != 81)
        {
          goto LABEL_143;
        }
      }
      else
      {
        if (v83 > 0x18)
          goto LABEL_142;
        if (v83 == 16)
          goto LABEL_136;
        if (((1 << v83) & 0x1066) != 0)
          goto LABEL_149;
        if (v83 == 24)
        {
LABEL_136:
          v84 = -48;
        }
        else
        {
LABEL_142:
          if (v83 != 70)
          {
LABEL_143:
            v85 = v83 - 52;
            if ((v83 - 33) >= 5)
              v86 = -48;
            else
              v86 = -64;
            if (v85 >= 6)
              v84 = v86;
            else
              v84 = -72;
            goto LABEL_149;
          }
          v84 = -64;
        }
      }
LABEL_149:
      v87 = *(_QWORD *)(v82 + v84 + 16);
      v82 = v87 & 0xFFFFFFFFFFFFFFF8;
      if ((v87 & 4) != 0)
        v82 = *(_QWORD *)v82;
      v83 = *(_WORD *)(v82 + 8) & 0x7F;
      if (v83 == 83)
        goto LABEL_155;
    }
  }
  if ((v72 & 0x7Eu) - 58 < 0xFFFFFFFA)
    goto LABEL_108;
  v284 = 0;
  if (!sub_22EFBF86C(v269, (unint64_t *)&v284, 1))
    goto LABEL_108;
  v73 = v284;
  if (!v284)
    goto LABEL_108;
LABEL_165:
  if (v73 == (void *)a2)
    goto LABEL_108;
  sub_22EFC8E88(a2);
  v93 = *(_DWORD *)(v92 + 8);
  if (!v93)
    goto LABEL_108;
  v94 = v92;
  v95 = 0;
  do
  {
    v96 = *(_QWORD *)(*(_QWORD *)v94 + 8 * v95);
    if ((*(unsigned __int16 *)(v96 + 32) | 4) != 0x16E)
    {
      v105 = *((_DWORD *)v73 + 7);
      if ((v105 & 0x7Fu) - 67 < 0xFFFFFFF9)
      {
        v106 = *(_WORD *)(v96 + 32);
        if ((v105 & 0x100) == 0)
          goto LABEL_234;
LABEL_258:
        sub_22EFC8E88((uint64_t)v73);
        v127 = *v126;
        if ((*((_BYTE *)v73 + 29) & 1) != 0)
        {
          sub_22EFC8E88((uint64_t)v73);
          v129 = *(_QWORD *)v128 + 8 * *(unsigned int *)(v128 + 8);
        }
        else
        {
          v129 = 0;
        }
        while (v127 != v129)
        {
          if (*(unsigned __int16 *)(*(_QWORD *)v127 + 32) == v106)
          {
            ++v95;
            a1 = (uint64_t)v268;
            goto LABEL_239;
          }
          v127 += 8;
        }
LABEL_234:
        v119 = *(unsigned __int16 *)(v96 + 32);
        a1 = (uint64_t)v268;
        if (v119 == 342 || v119 == 120)
        {
LABEL_236:
          ++v95;
          continue;
        }
        v120 = *(unsigned __int16 *)(v96 + 32);
        if (v120 == 98)
          v121 = v96;
        else
          v121 = 0;
        v282 = v121;
        if (v121)
        {
          if (sub_22F31E800(v121))
          {
            sub_22E8FCA40(v268, *((_DWORD *)v73 + 6), 0xA34u, 0, (uint64_t)&v284);
            v130 = (unsigned int *)sub_22E9AEE38((uint64_t)&v284, &v282);
            sub_22E903BEC(v130);
            sub_22E8FCA40(v268, *(_DWORD *)(v96 + 16), 0x1528u, 0, (uint64_t)&v284);
            v122 = (unsigned int *)sub_22E9AEE38((uint64_t)&v284, &v282);
            goto LABEL_254;
          }
          goto LABEL_253;
        }
        if (v119 == 306)
        {
          if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x40 && (*(_DWORD *)(a2 + 96) & 0x6000) == 0x2000)
            goto LABEL_236;
        }
        else if (v119 == 368)
        {
          if ((*(_BYTE *)(v268[9] + 1) & 1) == 0)
          {
            sub_22E8FCA40(v268, *(_DWORD *)(v96 + 16), 0xE9Bu, 0, (uint64_t)v281);
            sub_22E903BEC((unsigned int *)v281);
            sub_22E8FCA40(v268, *((_DWORD *)v73 + 6), 0x6Du, 0, (uint64_t)v280);
            v122 = v280;
LABEL_254:
            sub_22E903BEC(v122);
            v123 = *(_QWORD *)v94 + 8 * v95;
            v124 = *(unsigned int *)(v94 + 8);
            v125 = *(_QWORD *)v94 + 8 * v124;
            if (v125 != v123 + 8)
            {
              memmove((void *)v123, (const void *)(v123 + 8), v125 - (v123 + 8));
              LODWORD(v124) = *(_DWORD *)(v94 + 8);
            }
            *(_DWORD *)(v94 + 8) = v124 - 1;
            --v93;
            continue;
          }
LABEL_253:
          sub_22E8FCA40(v268, *(_DWORD *)(v96 + 16), 0x1884u, 0, (uint64_t)v279);
          sub_22E903BEC(v279);
          sub_22E8FCA40(v268, *((_DWORD *)v73 + 6), 0x6Du, 0, (uint64_t)v278);
          v122 = (unsigned int *)v278;
          goto LABEL_254;
        }
        if (v120 == 246)
        {
          ++v95;
          continue;
        }
        goto LABEL_253;
      }
      for (j = *((_QWORD *)v73 + 2); ; j = *(_QWORD *)(v114 + v116 + 16))
      {
        v114 = j & 0xFFFFFFFFFFFFFFF8;
        if ((j & 4) != 0)
          v114 = *(_QWORD *)v114;
        v115 = *(_WORD *)(v114 + 8) & 0x7F;
        if (v115 == 83)
        {
          if (sub_22EFBBF74((unint64_t)v73, *(_QWORD *)(v114 + 48)) != 2)
          {
            ++v95;
            goto LABEL_239;
          }
          v106 = *(_WORD *)(v96 + 32);
          if ((*((_DWORD *)v73 + 7) & 0x100) == 0)
            goto LABEL_234;
          goto LABEL_258;
        }
        v116 = -40;
        if ((*(_WORD *)(v114 + 8) & 0x7Fu) > 0x46)
        {
          if (v115 == 71)
          {
            v116 = -56;
            continue;
          }
          if (v115 != 81)
            goto LABEL_222;
        }
        else
        {
          if (v115 > 0x18)
            goto LABEL_221;
          if (v115 == 16)
            goto LABEL_215;
          if (((1 << v115) & 0x1066) == 0)
          {
            if (v115 == 24)
            {
LABEL_215:
              v116 = -48;
              continue;
            }
LABEL_221:
            if (v115 == 70)
            {
              v116 = -64;
              continue;
            }
LABEL_222:
            v117 = v115 - 52;
            v103 = v115 - 33 >= 5;
            v118 = -64;
            if (v103)
              v118 = -48;
            v103 = v117 >= 6;
            v116 = -72;
            if (v103)
              v116 = v118;
            continue;
          }
        }
      }
    }
    if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
    {
      LOWORD(v284) = 0;
      v285 = 0;
      v286[0] = 0;
      sub_22EA30480((_QWORD *)a1, a2, (unint64_t)v73, (uint64_t)&v284);
      if ((_BYTE)v284)
      {
        v107 = *(_QWORD *)v94 + 8 * v95;
        v108 = *(unsigned int *)(v94 + 8);
        v109 = *(_QWORD *)v94 + 8 * v108;
        if (v109 != v107 + 8)
        {
          memmove((void *)v107, (const void *)(v107 + 8), v109 - (v107 + 8));
          LODWORD(v108) = *(_DWORD *)(v94 + 8);
        }
        v110 = 0;
        *(_DWORD *)(v94 + 8) = v108 - 1;
        --v93;
      }
      else
      {
        v110 = 1;
      }
      goto LABEL_238;
    }
    v97 = v73;
    if ((*((_DWORD *)v73 + 7) & 0x7F) == 0x53)
      goto LABEL_202;
    for (k = *((_QWORD *)v73 + 2); ; k = *(_QWORD *)(v99 + v101 + 16))
    {
      v99 = k & 0xFFFFFFFFFFFFFFF8;
      if ((k & 4) != 0)
        v99 = *(_QWORD *)v99;
      v100 = *(_WORD *)(v99 + 8) & 0x7F;
      if (v100 == 83)
        break;
      v101 = -40;
      if ((*(_WORD *)(v99 + 8) & 0x7Fu) > 0x46)
      {
        if (v100 == 71)
        {
          v101 = -56;
          continue;
        }
        if (v100 != 81)
          goto LABEL_185;
      }
      else
      {
        if (v100 > 0x18)
          goto LABEL_184;
        if (v100 == 16)
          goto LABEL_178;
        if (((1 << v100) & 0x1066) == 0)
        {
          if (v100 == 24)
          {
LABEL_178:
            v101 = -48;
            continue;
          }
LABEL_184:
          if (v100 == 70)
          {
            v101 = -64;
            continue;
          }
LABEL_185:
          v102 = v100 - 52;
          v103 = v100 - 33 >= 5;
          v104 = -64;
          if (v103)
            v104 = -48;
          v103 = v102 >= 6;
          v101 = -72;
          if (v103)
            v101 = v104;
          continue;
        }
      }
    }
    v97 = (_QWORD *)(v99 - 40);
LABEL_202:
    v111 = sub_22EFBBF74((unint64_t)v73, v97[11]);
    if (v111 == 1)
      v112 = 2604;
    else
      v112 = 4628;
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), v112, 0, (uint64_t)&v284);
    v282 = *(_QWORD *)(a2 + 40);
    sub_22E894538((uint64_t)&v284, &v282);
    sub_22E903BEC((unsigned int *)&v284);
    if (v111 == 1)
    {
      sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)v73 + 6), 0x6Du, 0, (uint64_t)v283);
      sub_22E903BEC((unsigned int *)v283);
    }
    else
    {
      sub_22F31D30C(a1, (unint64_t)v73, *(_DWORD *)(a2 + 24));
    }
    v110 = 1;
    sub_22EFC77E8(a2, 1);
LABEL_238:
    v95 += v110;
LABEL_239:
    ;
  }
  while (v95 != v93);
LABEL_108:
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v68 = *(uint64_t **)v67;
    v69 = *(unsigned int *)(v67 + 8);
    v70 = *(uint64_t **)v67;
    if ((_DWORD)v69)
    {
      v71 = 8 * v69;
      v70 = *(uint64_t **)v67;
      while (*(_WORD *)(*v70 + 32) != 109)
      {
        ++v70;
        v71 -= 8;
        if (!v71)
          goto LABEL_276;
      }
    }
    if (v70 != &v68[v69])
    {
      do
      {
        v75 = *v68++;
        v74 = v75;
      }
      while (*(_WORD *)(v75 + 32) != 109);
      if ((*(_BYTE *)(v269 + 29) & 1) == 0)
        goto LABEL_268;
      sub_22EFC8E88(v269);
      v77 = *(uint64_t **)v76;
      v78 = *(unsigned int *)(v76 + 8);
      v79 = *(uint64_t **)v76;
      if ((_DWORD)v78)
      {
        v80 = 8 * v78;
        v79 = *(uint64_t **)v76;
        while (*(_WORD *)(*v79 + 32) != 109)
        {
          ++v79;
          v80 -= 8;
          if (!v80)
            goto LABEL_268;
        }
      }
      if (v79 != &v77[v78])
      {
        do
        {
          v148 = *v77++;
          v147 = v148;
        }
        while (*(_WORD *)(v148 + 32) != 109);
        if ((sub_22F31D4F4(v147, v74) & 1) == 0)
        {
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0xCBFu, 0, (uint64_t)v277);
          sub_22E903BEC(v277);
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v147 + 16), 0x6Cu, 0, (uint64_t)v276);
          v140 = (unsigned int *)v276;
          goto LABEL_275;
        }
      }
      else
      {
LABEL_268:
        if (sub_22EFC9084(v269, 1))
        {
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0xE8Au, 0, (uint64_t)&v284);
          LOBYTE(v281[0]) = (*(_DWORD *)(v269 + 28) & 0x7Eu) - 52 < 6;
          v131 = sub_22E894E38((uint64_t)&v284, (unsigned __int8 *)v281);
          sub_22EFC8E88(a2);
          v133 = *v132;
          v134 = *((unsigned int *)v132 + 2);
          if ((_DWORD)v134 && *(_WORD *)(*v133 + 32) != 109)
          {
            v135 = 8 * v134 - 8;
            v136 = *v132;
            do
            {
              v137 = v136[1];
              ++v136;
              v135 -= 8;
            }
            while (*(_WORD *)(v137 + 32) != 109);
          }
          do
          {
            v139 = *v133++;
            v138 = v139;
          }
          while (*(_WORD *)(v139 + 32) != 109);
          v283[0] = *(_QWORD *)(v138 + 16);
          sub_22E8906A0(v131, v283);
          v140 = (unsigned int *)&v284;
LABEL_275:
          sub_22E903BEC(v140);
        }
      }
    }
  }
LABEL_276:
  v141 = v269;
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v143 = *(uint64_t **)v142;
    v144 = *(unsigned int *)(v142 + 8);
    v145 = *(uint64_t **)v142;
    if ((_DWORD)v144)
    {
      v146 = 8 * v144;
      v145 = *(uint64_t **)v142;
      while (*(_WORD *)(*v145 + 32) != 361)
      {
        ++v145;
        v146 -= 8;
        if (!v146)
          goto LABEL_311;
      }
    }
    if (v145 != &v143[v144])
    {
      do
      {
        v150 = *v143++;
        v149 = v150;
      }
      while (*(_WORD *)(v150 + 32) != 361);
      if ((*(_BYTE *)(v269 + 29) & 1) == 0)
        goto LABEL_310;
      sub_22EFC8E88(v269);
      v152 = *(uint64_t **)v151;
      v153 = *(unsigned int *)(v151 + 8);
      v154 = *(uint64_t **)v151;
      if ((_DWORD)v153)
      {
        v155 = 8 * v153;
        v154 = *(uint64_t **)v151;
        while (*(_WORD *)(*v154 + 32) != 361)
        {
          ++v154;
          v155 -= 8;
          if (!v155)
            goto LABEL_310;
        }
      }
      if (v154 == &v152[v153])
      {
LABEL_310:
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v149 + 16), 0xA10u, 0, (uint64_t)v274);
        sub_22E903BEC(v274);
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v269 + 24), 0x6Cu, 0, (uint64_t)v273);
        sub_22E903BEC(v273);
      }
      else
      {
        do
        {
          v157 = *v152++;
          v156 = v157;
        }
        while (*(_WORD *)(v157 + 32) != 361);
        v158 = *(unsigned int *)(v149 + 36);
        if ((_DWORD)v158)
        {
          v159 = *(const void ***)(v149 + 40);
          v264 = &v159[2 * v158];
          v266 = a2;
          do
          {
            v160 = *(_QWORD *)(v156 + 40);
            v161 = *(unsigned int *)(v156 + 36);
            if ((_DWORD)v161)
            {
              v163 = *v159;
              v162 = (size_t)v159[1];
              v164 = 16 * v161;
              v165 = *(_QWORD *)(v156 + 40);
              while (*(_QWORD *)(v165 + 8) != v162 || v162 && memcmp(*(const void **)v165, v163, v162))
              {
                v165 += 16;
                v164 -= 16;
                if (!v164)
                {
                  v165 = v160 + 16 * v161;
                  break;
                }
              }
              v141 = v269;
            }
            else
            {
              v165 = *(_QWORD *)(v156 + 40);
            }
            v62 = v161 == (v165 - v160) >> 4;
            a1 = (uint64_t)v268;
            if (v62)
            {
              sub_22E8FCA40(v268, *(_DWORD *)(v149 + 16), 0xF9Du, 0, (uint64_t)&v284);
              sub_22F2F2210((uint64_t)&v284, (uint64_t)v159);
              sub_22E903BEC((unsigned int *)&v284);
              sub_22E8FCA40(v268, *(_DWORD *)(v156 + 16), 0x6Cu, 0, (uint64_t)v275);
              sub_22E903BEC(v275);
            }
            v159 += 2;
            a2 = v266;
          }
          while (v159 != v264);
        }
      }
    }
  }
LABEL_311:
  if (sub_22E63A8A4(a2) && !sub_22E63A8A4(v141) && a2 && (*(_DWORD *)(a2 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
  {
    v166 = *(_QWORD *)(a2 + 16);
    v167 = v166 & 0xFFFFFFFFFFFFFFF8;
    if ((v166 & 4) != 0)
      v167 = *(_QWORD *)v167;
    for (m = *(_WORD *)(v167 + 8) & 0x7F; m != 83; m = *(_WORD *)(v167 + 8) & 0x7F)
    {
      v169 = -40;
      if (m > 70)
      {
        if (m == 71)
        {
          v169 = -56;
        }
        else if (m != 81)
        {
          goto LABEL_328;
        }
      }
      else
      {
        if (m > 0x18)
          goto LABEL_327;
        if (m == 16)
          goto LABEL_321;
        if (((1 << m) & 0x1066) != 0)
          goto LABEL_334;
        if (m == 24)
        {
LABEL_321:
          v169 = -48;
        }
        else
        {
LABEL_327:
          if (m != 70)
          {
LABEL_328:
            v170 = m - 52;
            if ((m - 33) >= 5)
              v171 = -48;
            else
              v171 = -64;
            if (v170 >= 6)
              v169 = v171;
            else
              v169 = -72;
            goto LABEL_334;
          }
          v169 = -64;
        }
      }
LABEL_334:
      v172 = *(_QWORD *)(v167 + v169 + 16);
      v167 = v172 & 0xFFFFFFFFFFFFFFF8;
      if ((v172 & 4) != 0)
        v167 = *(_QWORD *)v167;
    }
    if (!sub_22EFBBF74(a2, *(_QWORD *)(v167 + 48)))
    {
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x1889u, 0, (uint64_t)v272);
      sub_22E903BEC(v272);
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v141 + 24), 0x6Cu, 0, (uint64_t)v271);
      sub_22E903BEC(v271);
    }
  }
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    *(double *)&result = sub_22EFC8E88(a2);
    v174 = *(uint64_t **)v173;
    v175 = *(unsigned int *)(v173 + 8);
    v176 = *(uint64_t **)v173;
    if ((_DWORD)v175)
    {
      v177 = 8 * v175;
      v176 = *(uint64_t **)v173;
      while (*(_WORD *)(*v176 + 32) != 145)
      {
        ++v176;
        v177 -= 8;
        if (!v177)
          goto LABEL_354;
      }
    }
    if (v176 != &v174[v175])
    {
      do
      {
        v179 = *v174++;
        v178 = v179;
      }
      while (*(_WORD *)(v179 + 32) != 145);
      if (!sub_22EA0ABB4(v141)
        && ((*(unsigned __int16 *)(v178 + 32) | (*(unsigned __int8 *)(v178 + 34) << 16)) & 0x40000) == 0
        && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 54 <= 3)
      {
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x1A54u, 0, (uint64_t)&v284);
        LODWORD(v283[0]) = 0;
        sub_22E8900C4((uint64_t)&v284, (int *)v283);
        sub_22E903BEC((unsigned int *)&v284);
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v141 + 24), 0x6Cu, 0, (uint64_t)v270);
        sub_22E903BEC(v270);
      }
    }
  }
LABEL_354:
  if ((*(_BYTE *)(v141 + 29) & 1) == 0)
    return result;
  v180 = *(_DWORD *)(a2 + 28);
  v265 = (v180 >> 8) & 1;
  v181 = a4;
  if ((v180 & 0x100) != 0)
    goto LABEL_387;
  v284 = v286;
  v285 = 0x400000000;
  v182 = v180 & 0x7F;
  v183 = a2;
  if (v182 != 83)
  {
    v184 = *(_QWORD *)(a2 + 16);
    v185 = v184 & 0xFFFFFFFFFFFFFFF8;
    if ((v184 & 4) != 0)
      v185 = *(_QWORD *)v185;
    for (n = *(_WORD *)(v185 + 8) & 0x7F; n != 83; n = *(_WORD *)(v185 + 8) & 0x7F)
    {
      v187 = -40;
      if (n > 70)
      {
        if (n == 71)
        {
          v187 = -56;
        }
        else if (n != 81)
        {
          goto LABEL_371;
        }
      }
      else
      {
        if (n > 0x18)
          goto LABEL_370;
        if (n == 16)
          goto LABEL_364;
        if (((1 << n) & 0x1066) != 0)
          goto LABEL_377;
        if (n == 24)
        {
LABEL_364:
          v187 = -48;
        }
        else
        {
LABEL_370:
          if (n != 70)
          {
LABEL_371:
            v188 = n - 52;
            if ((n - 33) >= 5)
              v189 = -48;
            else
              v189 = -64;
            if (v188 >= 6)
              v187 = v189;
            else
              v187 = -72;
            goto LABEL_377;
          }
          v187 = -64;
        }
      }
LABEL_377:
      v190 = *(_QWORD *)(v185 + v187 + 16);
      v185 = v190 & 0xFFFFFFFFFFFFFFF8;
      if ((v190 & 4) != 0)
        v185 = *(_QWORD *)v185;
    }
    v183 = v185 - 40;
  }
  sub_22EFCA91C(a2, (uint64_t)&v284, *(_QWORD *)(v183 + 88));
  if (v284 != v286)
    free(v284);
  if ((*(_BYTE *)(v141 + 29) & 1) != 0)
  {
LABEL_387:
    sub_22EFC8E88(v141);
    v192 = *v191;
    if ((*(_BYTE *)(v141 + 29) & 1) != 0)
    {
      sub_22EFC8E88(v141);
      v194 = *(_QWORD *)v193 + 8 * *(unsigned int *)(v193 + 8);
      goto LABEL_389;
    }
  }
  else
  {
    v192 = 0;
  }
  v194 = 0;
LABEL_389:
  while (2)
  {
    v195 = v192;
    if ((unint64_t)v192 >= v194)
    {
      v196 = (uint64_t *)v194;
      if (v192 == (uint64_t *)v194)
        break;
      while (*(unsigned __int16 *)(*v196 + 32) - 45 >= 0x13B)
      {
        if (++v196 == v192)
          goto LABEL_505;
      }
      v195 = v192;
    }
    else
    {
      while (*(unsigned __int16 *)(*v195 + 32) - 45 >= 0x13B)
      {
        if (++v195 == (uint64_t *)v194)
          goto LABEL_505;
      }
      v196 = (uint64_t *)v194;
    }
    if (v195 != v196)
    {
      do
      {
        v198 = *v192++;
        v197 = v198;
        v199 = *(unsigned __int16 *)(v198 + 32);
      }
      while ((v199 - 45) > 0x13A);
      if (v199 == 115 || v199 == 337 || v199 == 160)
      {
        if ((a4 - 1) < 4)
        {
          v200 = v181;
LABEL_408:
          if (v199 == 298 || v199 == 340 || !sub_22EA3DC90())
            continue;
          v202 = *(unsigned __int16 *)(v197 + 32) | (*(unsigned __int8 *)(v197 + 34) << 16);
          v203 = *(unsigned __int16 *)(v197 + 32);
          if (v203 <= 0xAA)
          {
            if (*(unsigned __int16 *)(v197 + 32) <= 0x90u)
            {
              if (v203 == 45)
              {
                v212 = *(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 88) + 15192);
                v213 = *(unsigned __int8 *)(v197 + 30);
                if ((~(v213 << 16) & 0x780000) != 0)
                  v214 = ((*(unsigned __int16 *)(v197 + 28) | (v213 << 16)) >> 19) & 0xF;
                else
                  v214 = sub_22F1BFAD0(v197);
                if (v214 >= 5)
                  v215 = "__forceinline";
                else
                  v215 = "always_inline";
                v216 = sub_22E3CB704(v212, v215, 0xDuLL);
                sub_22EA4ACB0((_QWORD *)a1, a2, (__n128 *)v197, v216);
                v208 = v217;
                v141 = v269;
                goto LABEL_432;
              }
              if (v203 == 115)
              {
                *(_OWORD *)&v263[8] = *(_OWORD *)(v197 + 72);
                *(_QWORD *)v263 = *(_QWORD *)(v197 + 64);
                v204 = sub_22EA47FF0((_QWORD *)a1, a2, v197, *(_QWORD *)(v197 + 40), (v202 >> 18) & 1, *(_QWORD *)(v197 + 48), *(_QWORD *)(v197 + 56), v201, *(__int128 *)v263, *(_QWORD *)(v197 + 80), *(_QWORD *)(v197 + 88), *(_BYTE *)(v197 + 96), *(void **)(v197 + 104), *(unsigned int *)(v197 + 100), *(_BYTE *)(v197 + 112), *(void **)(v197 + 120), *(unsigned int *)(v197 + 116), v200, *(_DWORD *)(v197 + 128));
                goto LABEL_431;
              }
            }
            else
            {
              switch(v203)
              {
                case 0x91u:
                  v204 = sub_22EA48C08((_QWORD *)a1, a2, v197, *(const void **)(v197 + 40), *(unsigned int *)(v197 + 36));
                  goto LABEL_431;
                case 0x9Du:
                  sub_22EA4D680((_QWORD *)a1, a2, (__n128 *)v197);
                  goto LABEL_431;
                case 0x9Bu:
                  sub_22F320A40((_QWORD *)a1, a2, v197);
                  goto LABEL_431;
              }
            }
          }
          else if (*(unsigned __int16 *)(v197 + 32) <= 0xC9u)
          {
            if (v203 == 171)
            {
              v204 = sub_22EA48D84((_QWORD *)a1, a2, v197, *(const void **)(v197 + 40), *(unsigned int *)(v197 + 36));
              goto LABEL_431;
            }
            if (v203 == 179)
            {
              v204 = sub_22EA49028(a1, a2, (_OWORD *)v197, *(_QWORD *)(v197 + 40), *(_DWORD *)(v197 + 48), *(_DWORD *)(v197 + 52));
              goto LABEL_431;
            }
          }
          else
          {
            if (*(unsigned __int16 *)(v197 + 32) > 0x130u)
            {
              switch(v203)
              {
                case 0x131u:
                  v204 = sub_22EA4896C((_QWORD *)a1, a2, v197, *(const void **)(v197 + 40), *(unsigned int *)(v197 + 36));
                  break;
                case 0x14Fu:
                  sub_22F31F418((_QWORD *)a1, a2, v197, *(_DWORD *)(v197 + 36));
                  break;
                case 0x15Au:
                  sub_22F31F344((_QWORD *)a1, a2, v197, *(_DWORD *)(v197 + 36));
                  break;
                default:
                  goto LABEL_448;
              }
LABEL_431:
              v208 = v204;
LABEL_432:
              if (!v208)
                continue;
LABEL_433:
              v210 = (unsigned __int16 *)(v208 + 32);
              v209 = *(unsigned __int16 *)(v208 + 32);
              *(_BYTE *)(v208 + 34) = (v209 | (*(unsigned __int8 *)(v208 + 34) << 16) | 0x10000u) >> 16;
              *(_WORD *)(v208 + 32) = v209;
              sub_22EFCA95C(a2, v208);
              v211 = *v210;
              v181 = a4;
              LOBYTE(v265) = 1;
              if (v211 == 202)
              {
                (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 96) + 112))(*(_QWORD *)(a1 + 96), a2);
                LOBYTE(v265) = 1;
              }
              continue;
            }
            if (v203 == 202)
            {
              v205 = *(unsigned __int8 *)(v197 + 35);
              v206 = *(unsigned __int8 *)(v197 + 30);
              if ((~(v206 << 16) & 0x780000) != 0)
                v207 = ((*(unsigned __int16 *)(v197 + 28) | (v206 << 16)) >> 19) & 0xF;
              else
                v207 = sub_22F1BFAD0(v197);
              sub_22EA4D784((_QWORD *)a1, a2, (__n128 *)v197, v205 != 0, v207);
              v208 = v218;
              goto LABEL_443;
            }
          }
LABEL_448:
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 68) & 0x20) != 0 && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 52 <= 5)
          {
            if (*(unsigned __int16 *)(v197 + 32) <= 0xC0u)
            {
              v219 = v203 - 98;
              if (v219 > 0x3E)
                goto LABEL_472;
              if (((1 << (v203 - 98)) & 0x1900000001) != 0)
                continue;
              if (v219 != 62)
                goto LABEL_472;
LABEL_463:
              if ((v200 - 2) < 3)
                continue;
LABEL_464:
              if ((v202 & 0x100000) == 0 && sub_22EA404D8(a2, v197))
                continue;
              v204 = sub_22EF9C5AC(v197);
              goto LABEL_431;
            }
            if (*(unsigned __int16 *)(v197 + 32) <= 0x10Fu)
            {
              if (v203 != 193)
              {
                if (v203 != 212)
                  goto LABEL_472;
LABEL_470:
                sub_22EA4AEEC((_QWORD *)a1, a2, (__n128 *)v197);
                goto LABEL_431;
              }
LABEL_459:
              v204 = sub_22EA4ADE0(a1, a2, v197);
              goto LABEL_431;
            }
          }
          else
          {
            if (*(unsigned __int16 *)(v197 + 32) <= 0xD3u)
            {
              if (v203 == 98)
                continue;
              if (v203 == 160)
                goto LABEL_463;
              if (v203 != 193)
                goto LABEL_472;
              goto LABEL_459;
            }
            if (v203 == 212)
              goto LABEL_470;
          }
          if (v203 == 272)
          {
            sub_22EA4B0E8((_QWORD *)a1, a2, (__n128 *)v197);
            goto LABEL_431;
          }
          if (v203 == 322)
          {
            v208 = sub_22F31FAB0((_QWORD *)a1, a2, v197, *(const void **)(v197 + 40), *(unsigned int *)(v197 + 36));
            goto LABEL_433;
          }
LABEL_472:
          if ((v200 - 2) <= 2 && v203 == 337 || v200 == 2 && v203 == 324)
            continue;
          if (*(unsigned __int16 *)(v197 + 32) <= 0xD1u)
          {
            if (*(unsigned __int16 *)(v197 + 32) <= 0xAEu)
            {
              if (v203 == 117)
              {
                a1 = (uint64_t)v268;
                v220 = sub_22F320680((uint64_t)v268, a2, v197);
              }
              else
              {
                if (v203 != 168)
                {
                  a1 = (uint64_t)v268;
                  v141 = v269;
                  v181 = a4;
                  if (v203 == 169)
                  {
                    v204 = sub_22F320BFC(v268, a2, v197);
                    goto LABEL_431;
                  }
                  goto LABEL_464;
                }
                a1 = (uint64_t)v268;
                v220 = sub_22F320AF8(v268, a2, v197);
              }
            }
            else if (v203 == 175)
            {
              a1 = (uint64_t)v268;
              sub_22EA63C9C(v268, a2, (__n128 *)v197);
            }
            else
            {
              if (v203 != 185)
              {
                a1 = (uint64_t)v268;
                v141 = v269;
                v181 = a4;
                if (v203 == 187)
                {
                  v204 = sub_22EA4D148(v268, a2, v197, *(_DWORD *)(v197 + 36));
                  goto LABEL_431;
                }
                goto LABEL_464;
              }
              a1 = (uint64_t)v268;
              sub_22EA4CFF0(v268, a2, v197, *(_DWORD *)(v197 + 36), *(_DWORD *)(v197 + 40), *(_DWORD *)(v197 + 44));
            }
          }
          else
          {
            if (*(unsigned __int16 *)(v197 + 32) <= 0x160u)
            {
              if (v203 == 210)
              {
                a1 = (uint64_t)v268;
                v141 = v269;
                v181 = a4;
                if (!*(_BYTE *)(v197 + 48))
                {
                  sub_22EA63A28(v268, a2, v197);
                  goto LABEL_431;
                }
              }
              else
              {
                a1 = (uint64_t)v268;
                v141 = v269;
                v181 = a4;
                if (v203 == 342)
                {
                  v204 = sub_22EA4CDA8(v268, a2, v197, *(const void **)(v197 + 40), *(unsigned int *)(v197 + 36), *(_QWORD *)(v197 + 48));
                  goto LABEL_431;
                }
              }
              goto LABEL_464;
            }
            if (v203 != 353)
            {
              a1 = (uint64_t)v268;
              v141 = v269;
              v181 = a4;
              if (v203 == 354)
              {
                v204 = sub_22F320890(v268, (_BYTE *)a2, v197);
                goto LABEL_431;
              }
              goto LABEL_464;
            }
            a1 = (uint64_t)v268;
            v220 = sub_22F3206E8(v268, (_BYTE *)a2, v197);
          }
          v208 = v220;
          v141 = v269;
LABEL_443:
          v181 = a4;
          goto LABEL_432;
        }
        if (!v181)
          continue;
      }
      v200 = 0;
      goto LABEL_408;
    }
    break;
  }
LABEL_505:
  v281[0] = 0;
  v221 = (uint64_t *)sub_22E47E5E0(v141);
  v223 = v222;
  v224 = 0;
  v225 = 0;
  v226 = 0;
  while (1)
  {
    v227 = v221;
    if (v221 >= v223)
    {
      if (v221 == v223)
        break;
      v228 = v223;
      while (*(_WORD *)(*v228 + 32) != 98)
      {
        if (++v228 == v221)
          goto LABEL_525;
      }
      v227 = v221;
    }
    else
    {
      while (*(_WORD *)(*v227 + 32) != 98)
      {
        if (++v227 == v223)
          goto LABEL_525;
      }
      v228 = v223;
    }
    if (v227 == v228)
      break;
    do
    {
      v230 = *v221++;
      v229 = v230;
    }
    while (*(_WORD *)(v230 + 32) != 98);
    if ((sub_22F37CC2C(v229) & 1) != 0)
      goto LABEL_606;
    if (sub_22F31E800(v229))
    {
      v281[0] = v229;
      v224 = v229;
    }
    v231 = sub_22F37CC74(v229, *(_QWORD *)(a1 + 88));
    if (v231 > v225)
    {
      v225 = v231;
      v226 = v229;
    }
  }
LABEL_525:
  v232 = (uint64_t *)sub_22E47E5E0(a2);
  v234 = v233;
  v235 = 0;
  v236 = 0;
  while (1)
  {
    v237 = v232;
    if (v232 >= v234)
    {
      if (v232 == v234)
        break;
      v238 = v234;
      while (*(_WORD *)(*v238 + 32) != 98)
      {
        if (++v238 == v232)
          goto LABEL_545;
      }
      v237 = v232;
    }
    else
    {
      while (*(_WORD *)(*v237 + 32) != 98)
      {
        if (++v237 == v234)
          goto LABEL_545;
      }
      v238 = v234;
    }
    if (v237 == v238)
      break;
    do
    {
      v240 = *v232++;
      v239 = v240;
    }
    while (*(_WORD *)(v240 + 32) != 98);
    if ((sub_22F37CC2C(v239) & 1) != 0)
      goto LABEL_606;
    if (sub_22F31E800(v239))
      v236 = v239;
    v241 = sub_22F37CC74(v239, *(_QWORD *)(a1 + 88));
    if (v241 > v235)
      v235 = v241;
  }
LABEL_545:
  if (!v224 || !v236 || v225 == v235)
  {
    if (!v224 || v236)
      goto LABEL_597;
    v247 = *(_DWORD *)(a2 + 28) & 0x7F;
    if (a2 && (v247 - 67) >= 0xFFFFFFF9)
    {
      v248 = *(_QWORD *)(a2 + 16);
      v249 = v248 & 0xFFFFFFFFFFFFFFF8;
      if ((v248 & 4) != 0)
        v249 = *(_QWORD *)v249;
      for (ii = *(_WORD *)(v249 + 8) & 0x7F; ii != 83; ii = *(_WORD *)(v249 + 8) & 0x7F)
      {
        v251 = -40;
        if (ii > 70)
        {
          if (ii == 71)
          {
            v251 = -56;
          }
          else if (ii != 81)
          {
            goto LABEL_575;
          }
        }
        else
        {
          if (ii > 0x18)
            goto LABEL_574;
          if (ii == 16)
            goto LABEL_568;
          if (((1 << ii) & 0x1066) != 0)
            goto LABEL_581;
          if (ii == 24)
          {
LABEL_568:
            v251 = -48;
          }
          else
          {
LABEL_574:
            if (ii != 70)
            {
LABEL_575:
              v252 = ii - 52;
              if ((ii - 33) >= 5)
                v253 = -48;
              else
                v253 = -64;
              if (v252 >= 6)
                v251 = v253;
              else
                v251 = -72;
              goto LABEL_581;
            }
            v251 = -64;
          }
        }
LABEL_581:
        v254 = *(_QWORD *)(v249 + v251 + 16);
        v249 = v254 & 0xFFFFFFFFFFFFFFF8;
        if ((v254 & 4) != 0)
          v249 = *(_QWORD *)v249;
      }
      if (!sub_22EFBBF74(a2, *(_QWORD *)(v249 + 48)))
      {
LABEL_597:
        if (v225 <= v235)
        {
          v260 = v281[0];
          if (!v281[0] || v236)
            goto LABEL_606;
        }
        else
        {
          v256 = v226;
          sub_22EF95FEC(v226, *(_QWORD *)(a1 + 88));
          v258 = *(_WORD *)(v257 + 32);
          *(_BYTE *)(v257 + 34) |= 1u;
          *(_WORD *)(v257 + 32) = v258;
          sub_22EFCA95C(a2, v257);
          v259 = v269;
          if (!v281[0] || v236 || sub_22F31E800(v256))
            goto LABEL_607;
          v260 = v281[0];
        }
        sub_22EF95FEC(v260, *(_QWORD *)(a1 + 88));
        v262 = *(_WORD *)(v261 + 32);
        *(_BYTE *)(v261 + 34) |= 1u;
        *(_WORD *)(v261 + 32) = v262;
        sub_22EFCA95C(a2, v261);
        v259 = v269;
        if (!a2)
          return result;
LABEL_608:
        if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 38 >= 0xFFFFFFFC
          && (*(_DWORD *)(v259 + 28) & 0x7Eu) - 38 >= 0xFFFFFFFC
          && (sub_22EF5EAF8(*(_QWORD *)(a1 + 88), a2, v259) & 1) == 0)
        {
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x11FDu, 0, (uint64_t)&v284);
          v283[0] = *(_QWORD *)(a2 + 40);
          sub_22E894538((uint64_t)&v284, v283);
          sub_22E903BEC((unsigned int *)&v284);
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v259 + 24), 0x1778u, 0, (uint64_t)&v284);
          v283[0] = *(_QWORD *)(a2 + 40);
          sub_22E894538((uint64_t)&v284, v283);
          sub_22E903BEC((unsigned int *)&v284);
        }
        return result;
      }
    }
    else if (a2 && (v247 - 38) >= 0xFFFFFFFB && (*(_BYTE *)(a2 + 74) & 3) == 0)
    {
      goto LABEL_597;
    }
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0xA34u, 0, (uint64_t)&v284);
    sub_22E8FB3C4((uint64_t)&v284, v281);
    sub_22E903BEC((unsigned int *)&v284);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v281[0] + 16), 0x1528u, 0, (uint64_t)&v284);
    sub_22E8FB3C4((uint64_t)&v284, v281);
    v246 = (unsigned int *)&v284;
LABEL_596:
    sub_22E903BEC(v246);
    goto LABEL_597;
  }
  if (!v225 || !v235)
  {
    if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Fu) - 75 >= 0xFFFFFFE5)
    {
      v242 = *(_QWORD *)(a2 + 48);
      if (!v225)
        goto LABEL_553;
    }
    else
    {
      v255 = *(_QWORD *)(a2 + 48);
      if (v255)
      {
        v242 = v255 & 0xFFFFFFFFFFFFFFF0;
        if (v225)
          goto LABEL_554;
      }
      else
      {
        v242 = sub_22EF6462C(*(_QWORD *)(a1 + 88), a2);
        if (v225)
          goto LABEL_554;
      }
LABEL_553:
      sub_22EF5CDF0(*(_QWORD *)(a1 + 88), *(_QWORD *)(v242 & 0xFFFFFFFFFFFFFFF0));
      v225 = v243;
    }
LABEL_554:
    if (!v235)
    {
      sub_22EF5CDF0(*(_QWORD *)(a1 + 88), *(_QWORD *)(v242 & 0xFFFFFFFFFFFFFFF0));
      v235 = v244;
    }
  }
  if (v225 != v235)
  {
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v236 + 16), 0xA33u, 0, (uint64_t)&v284);
    v280[0] = v225
            / (unint64_t)sub_22EF5CDF0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 16408) & 0xFFFFFFFFFFFFFFF0));
    v245 = sub_22E89519C((uint64_t)&v284, v280);
    v279[0] = v235
            / (unint64_t)sub_22EF5CDF0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 16408) & 0xFFFFFFFFFFFFFFF0));
    sub_22E89519C(v245, v279);
    sub_22E903BEC((unsigned int *)&v284);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v224 + 16), 0x6Cu, 0, (uint64_t)v283);
    v246 = (unsigned int *)v283;
    goto LABEL_596;
  }
LABEL_606:
  v259 = v269;
  if ((v265 & 1) == 0)
  {
    result = sub_22F3B12BC(a2);
    if (!a2)
      return result;
    goto LABEL_608;
  }
LABEL_607:
  if (a2)
    goto LABEL_608;
  return result;
}

void sub_22EA0A550(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v7;
  uint64_t v8;
  std::string::size_type size;
  std::string::size_type v10;
  std::string::size_type v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const void *v15;
  std::string::size_type v16;
  std::string *p_dst;
  uint64_t v18;
  uint64_t v19;
  std::string::size_type v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  const void *v26;
  std::string::size_type v27;
  std::string *v28;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  const void *v36;
  std::string::size_type v37;
  std::string *v38;
  uint64_t v39;
  uint64_t v40;
  std::string::size_type v41;
  std::string::size_type v42;
  uint64_t v43;
  std::string *p_p;
  size_t v45;
  unsigned int *v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  unint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  std::string *v55;
  size_t v56;
  BOOL v57;
  _BYTE v58[96];
  std::string __p;
  uint64_t v60;
  std::string v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  std::string __dst;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v60 = a2;
  v7 = *(_DWORD *)(a2 + 64);
  memset(&__p, 0, sizeof(__p));
  v8 = **(_QWORD **)(a1 + 72);
  if ((v8 & 0x1000) == 0)
  {
    size = 0;
    LOBYTE(v10) = 0;
    v11 = 0;
    if ((v8 & 0x200) == 0)
      goto LABEL_30;
LABEL_19:
    v21 = *(_QWORD *)(a1 + 80);
    LOWORD(__dst.__r_.__value_.__l.__data_) = 19;
    __dst.__r_.__value_.__l.__size_ = 0;
    LOWORD(__dst.__r_.__value_.__r.__words[2]) = 19;
    v67 = 0;
    v22 = sub_22E3CB704((llvm::StringMapImpl *)(v21 + 544), "clang", 5uLL);
    v68 = 5;
    v69 = v22;
    v70 = 71;
    v71 = 0;
    v23 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 80) + 544), "require_constant_initialization", 0x1FuLL);
    v72 = 5;
    v73 = v23;
    v74 = 20;
    v75 = 0;
    v76 = 20;
    v77 = 0;
    v24 = sub_22F18DFA4(v21, v7, (unsigned __int16 *)&__dst, 7);
    if (v25 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_94;
    v26 = (const void *)v24;
    v27 = v25;
    if (v25 >= 0x17)
    {
      v29 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v25 | 7) != 0x17)
        v29 = v25 | 7;
      v30 = v29 + 1;
      v28 = (std::string *)operator new(v29 + 1);
      v61.__r_.__value_.__l.__size_ = v27;
      v61.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
      v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
    }
    else
    {
      *((_BYTE *)&v61.__r_.__value_.__s + 23) = v25;
      v28 = &v61;
      if (!v25)
        goto LABEL_27;
    }
    memmove(v28, v26, v27);
LABEL_27:
    v28->__r_.__value_.__s.__data_[v27] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v61;
    v10 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    size = v61.__r_.__value_.__l.__size_;
    v11 = HIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x7F;
    goto LABEL_30;
  }
  v12 = *(_QWORD *)(a1 + 80);
  LOWORD(v61.__r_.__value_.__l.__data_) = 175;
  v61.__r_.__value_.__l.__size_ = 0;
  v13 = sub_22F18DFA4(v12, v7, (unsigned __int16 *)&v61, 1);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_94;
  v15 = (const void *)v13;
  v16 = v14;
  if (v14 >= 0x17)
  {
    v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v18 = v14 | 7;
    v19 = v18 + 1;
    p_dst = (std::string *)operator new(v18 + 1);
    __dst.__r_.__value_.__l.__size_ = v16;
    __dst.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_11;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
  p_dst = &__dst;
  if (v14)
LABEL_11:
    memmove(p_dst, v15, v16);
  p_dst->__r_.__value_.__s.__data_[v16] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __dst;
  LOBYTE(v10) = *((_BYTE *)&__dst.__r_.__value_.__s + 23);
  size = __dst.__r_.__value_.__l.__size_;
  v11 = HIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v20 = __p.__r_.__value_.__l.__size_;
  if (!v20 && (**(_QWORD **)(a1 + 72) & 0x200) != 0)
    goto LABEL_19;
LABEL_30:
  if ((v10 & 0x80u) == 0)
    v31 = v11;
  else
    v31 = size;
  if (v31)
    goto LABEL_45;
  v32 = *(_QWORD *)(a1 + 80);
  LOWORD(__dst.__r_.__value_.__l.__data_) = 186;
  __dst.__r_.__value_.__l.__size_ = 0;
  LOWORD(__dst.__r_.__value_.__r.__words[2]) = 21;
  v67 = 0;
  v68 = 22;
  v69 = 0;
  v33 = sub_22E3CB704((llvm::StringMapImpl *)(v32 + 544), "require_constant_initialization", 0x1FuLL);
  v70 = 5;
  v71 = v33;
  v72 = 22;
  v73 = 0;
  v74 = 22;
  v75 = 0;
  v34 = sub_22F18DFA4(v32, v7, (unsigned __int16 *)&__dst, 6);
  if (v35 > 0x7FFFFFFFFFFFFFF7)
LABEL_94:
    abort();
  v36 = (const void *)v34;
  v37 = v35;
  if (v35 >= 0x17)
  {
    v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v39 = v35 | 7;
    v40 = v39 + 1;
    v38 = (std::string *)operator new(v39 + 1);
    v61.__r_.__value_.__l.__size_ = v37;
    v61.__r_.__value_.__r.__words[2] = v40 | 0x8000000000000000;
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
  }
  else
  {
    *((_BYTE *)&v61.__r_.__value_.__s + 23) = v35;
    v38 = &v61;
    if (!v35)
      goto LABEL_42;
  }
  memmove(v38, v36, v37);
LABEL_42:
  v38->__r_.__value_.__s.__data_[v37] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v61;
  v10 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
  size = v61.__r_.__value_.__l.__size_;
  v11 = HIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x7F;
LABEL_45:
  if ((v10 & 0x80u) == 0)
    v41 = v11;
  else
    v41 = size;
  if (!v41 && (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 0x10) != 0)
  {
    MEMORY[0x2348A0C14](&__p, "constinit");
    LOBYTE(v10) = *((_BYTE *)&__p.__r_.__value_.__s + 23);
    size = __p.__r_.__value_.__l.__size_;
    v11 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  }
  if ((v10 & 0x80u) == 0)
    v42 = v11;
  else
    v42 = size;
  if (!v42 && (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 2) != 0)
  {
    MEMORY[0x2348A0C14](&__p, "[[clang::require_constant_initialization]]");
    LOBYTE(v10) = *((_BYTE *)&__p.__r_.__value_.__s + 23);
    size = __p.__r_.__value_.__l.__size_;
    v11 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  }
  if ((v10 & 0x80u) == 0)
    size = v11;
  if (!size)
    MEMORY[0x2348A0C14](&__p, "__attribute__((require_constant_initialization))");
  std::string::append(&__p, " ");
  if (a4)
  {
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v60 + 24), 0x1451u, 0, (uint64_t)&__dst);
    v43 = sub_22E890024((uint64_t)&__dst, &v60);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      v45 = __p.__r_.__value_.__l.__size_;
    sub_22E729148(p_p, v45, v7, 0, (uint64_t)&v61);
    sub_22E890748(v43, &v61);
    if (SHIBYTE(v64) < 0)
      operator delete(v62);
    sub_22E903BEC((unsigned int *)&__dst);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a3 + 16), 0x157Bu, 0, (uint64_t)v58);
    v46 = (unsigned int *)v58;
  }
  else
  {
    v47 = *(_DWORD *)(a3 + 16);
    v48 = *(unsigned __int8 *)(a3 + 30);
    if ((~(v48 << 16) & 0x780000) != 0)
      v49 = ((*(unsigned __int16 *)(a3 + 28) | (v48 << 16)) >> 19) & 0xF;
    else
      v49 = sub_22F1BFAD0(a3);
    if (v49)
      v50 = 6954;
    else
      v50 = 3094;
    sub_22E8FCA40((_QWORD *)a1, v47, v50, 0, (uint64_t)&__dst);
    v51 = *(_QWORD *)(a3 + 16) | ((unint64_t)*(_QWORD *)(a3 + 16) << 32);
    *(std::string::size_type *)((char *)&v61.__r_.__value_.__r.__words[1] + 4) = 0;
    v61.__r_.__value_.__s.__data_[20] = 0;
    v63 = 0;
    v64 = 0;
    v62 = 0;
    v65 = 0;
    v61.__r_.__value_.__r.__words[0] = v51;
    v61.__r_.__value_.__s.__data_[8] = 1;
    sub_22E890748((uint64_t)&__dst, &v61);
    if (SHIBYTE(v64) < 0)
      operator delete(v62);
    sub_22E903BEC((unsigned int *)&__dst);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v60 + 24), 0x157Au, 0, (uint64_t)&__dst);
    v52 = *(unsigned __int8 *)(a3 + 30);
    if ((~(v52 << 16) & 0x780000) != 0)
      v53 = ((*(unsigned __int16 *)(a3 + 28) | (v52 << 16)) >> 19) & 0xF;
    else
      v53 = sub_22F1BFAD0(a3);
    v57 = v53 == 0;
    v54 = sub_22E894E38((uint64_t)&__dst, (unsigned __int8 *)&v57);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v55 = &__p;
    else
      v55 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v56 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      v56 = __p.__r_.__value_.__l.__size_;
    sub_22E729148(v55, v56, v7, 0, (uint64_t)&v61);
    sub_22E890748(v54, &v61);
    if (SHIBYTE(v64) < 0)
      operator delete(v62);
    v46 = (unsigned int *)&__dst;
  }
  sub_22E903BEC(v46);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

BOOL sub_22EA0ABB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 145)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22EA0AC14(_QWORD *a1, uint64_t a2, unint64_t *a3, uint64_t *a4, int a5, int a6)
{
  int v6;
  int v7;
  uint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  _QWORD *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  _QWORD *v92;
  uint64_t v93;
  unsigned __int8 *v94;
  unsigned __int8 **v95;
  unsigned __int8 *v96;
  unint64_t *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  int v120;
  int v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  int v125;
  int v126;
  int v127;
  uint64_t v128;
  unsigned int v129;
  int v130;
  uint64_t v131;
  unsigned int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  int v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  _BOOL4 v142;
  uint64_t v143;
  BOOL v144;
  uint64_t v145;
  BOOL v146;
  uint64_t v147;
  BOOL v148;
  int v149;
  uint64_t v150;
  BOOL v151;
  int v152;
  uint64_t v153;
  unint64_t *v154;
  uint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  BOOL v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _BOOL4 v181;
  uint64_t v182;
  char v183;
  uint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  BOOL v207;
  uint64_t v208;
  unsigned __int8 *v209;
  unsigned __int8 *v210;
  uint64_t v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t *v215;
  uint64_t v216;
  BOOL v217;
  int v218;
  uint64_t v219;
  BOOL v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  BOOL v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  unint64_t v230;
  uint64_t *v231;
  unint64_t v232;
  unint64_t *v233;
  unint64_t *v234;
  BOOL v235;
  unint64_t v236;
  BOOL v237;
  BOOL v238;
  unsigned int v239;
  unint64_t v240;
  unint64_t *v241;
  unint64_t *v242;
  uint64_t v243;
  BOOL v244;
  uint64_t *v245;
  int v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  unsigned int *v253;
  _BYTE *v254;
  _QWORD *v255;
  unint64_t v256;
  uint64_t v258;
  _QWORD *v259;
  _QWORD *v260;
  _QWORD *v261;
  _QWORD *v262;
  uint64_t v263;
  unint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void **v272;
  unint64_t v273;
  int v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unsigned __int8 *v282;
  unsigned __int8 *v283;
  uint64_t v284;
  unint64_t v285;
  unint64_t v286;
  void **v287;
  int v288;
  _BOOL4 v289;
  unsigned int *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  uint64_t *v299;
  _QWORD *v300;
  uint64_t v301;
  unsigned __int8 *v302;
  unsigned __int8 **v303;
  unsigned __int8 *v304;
  _BYTE *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t *v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  unint64_t *v314;
  uint64_t v315;
  unint64_t v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  unint64_t v321;
  _BOOL4 v322;
  unint64_t *v323;
  unint64_t v324;
  _QWORD *v325;
  uint64_t *v326;
  uint64_t v327;
  uint64_t v328;
  unsigned int v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t *v332;
  _BYTE *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t *v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t *v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t *v342;
  unint64_t v343;
  unint64_t v344;
  unsigned int v345;
  int v346;
  uint64_t v347;
  unsigned int v348;
  unsigned int v349;
  char **v350;
  uint64_t v351;
  _DWORD *v352;
  unint64_t *v353;
  unint64_t v354;
  unint64_t v355;
  int i;
  uint64_t v357;
  unsigned int v358;
  uint64_t v359;
  uint64_t v360;
  size_t v361;
  void *v362;
  uint64_t v363;
  unsigned int v364;
  uint64_t v365;
  unint64_t *v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t *v369;
  uint64_t v370;
  BOOL v371;
  uint64_t v372;
  uint64_t v373;
  BOOL v374;
  int v375;
  uint64_t v376;
  int v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unsigned int v383;
  int v384;
  uint64_t v385;
  uint64_t *v386;
  _QWORD *v387;
  uint64_t v388;
  unsigned __int8 *v389;
  unsigned __int8 **v390;
  unsigned __int8 *v391;
  _BYTE *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  char *v404;
  __int128 *v405;
  char *v406;
  __int128 v407;
  int64_t v408;
  char v409;
  uint64_t *v410;
  uint64_t v411;
  unsigned int v412;
  uint64_t v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  int v417;
  unint64_t *v418;
  uint64_t v419;
  uint64_t *v420;
  unint64_t v421;
  unsigned int v422;
  uint64_t v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t v426;
  unint64_t v427;
  unint64_t v428;
  char v429;
  char v430;
  uint64_t v431;
  unint64_t v432;
  uint64_t *v433;
  int v434;
  int v435;
  uint64_t v437;
  unsigned int v438[24];
  uint64_t v439;
  _BYTE v440[96];
  _BYTE v441[96];
  unsigned int v442[24];
  _BYTE v443[96];
  unsigned int v444[24];
  _BYTE v445[96];
  unsigned int v446[24];
  unsigned int v447[24];
  _BYTE v448[96];
  _BYTE v449[96];
  unsigned int v450[24];
  _BYTE v451[96];
  _BYTE v452[96];
  _BYTE v453[96];
  _BYTE v454[96];
  _BYTE v455[96];
  unsigned int v456[24];
  unsigned int v457[24];
  _BYTE v458[96];
  unsigned int v459[24];
  unsigned int v460[15];
  unsigned int v461[24];
  uint64_t v462;
  unint64_t *v463;
  __int128 v464;
  uint64_t v465;
  void *v466;
  __int128 v467;
  void *__p;
  unsigned __int8 *v469;
  uint64_t v470;
  char v471;
  char v472;
  unsigned int v473;
  char v474;
  __int128 v475;
  _DWORD v476[32];
  uint64_t v477;

  v6 = a6;
  v7 = a5;
  v8 = a4;
  v9 = (unint64_t *)a2;
  v10 = (uint64_t)a1;
  v477 = *MEMORY[0x24BDAC8D0];
  v463 = (unint64_t *)a2;
  v11 = *a3;
  v12 = *(_DWORD *)(*a3 + 28);
  if (*a3)
    v13 = (*(_DWORD *)(*a3 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA;
  else
    v13 = 0;
  if (v13)
  {
    v462 = *a3;
    v15 = v11;
    goto LABEL_9;
  }
  if ((*(_DWORD *)(*a3 + 28) & 0x7F) == 0x1D)
  {
    v15 = *(_QWORD *)(v11 + 48);
    v462 = v15;
    if (v15)
      goto LABEL_9;
  }
  else
  {
    v462 = 0;
  }
  if (!v11 || (v12 & 0x7E) != 0x2E)
  {
    sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x1215u, 0, (uint64_t)&v466);
    *(_QWORD *)&v475 = v463[5];
    sub_22E894538((uint64_t)&v466, (uint64_t *)&v475);
    sub_22E903BEC((unsigned int *)&v466);
    sub_22F31D30C(v10, *a3, *((_DWORD *)v463 + 6));
    return 1;
  }
  if ((*(_WORD *)(a2 + 30) & 0x180) != 0)
  {
    sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x13E8u, 0, (uint64_t)v461);
    sub_22E903BEC(v461);
    sub_22E8FCA40((_QWORD *)v10, *(_DWORD *)(*(_QWORD *)(v11 + 64) + 24), 0x1812u, 0, (uint64_t)v460);
    sub_22E903BEC(v460);
    do
      v11 = *(_QWORD *)(v11 + 72);
    while (v11 && (*(_DWORD *)(v11 + 28) & 0x7E) == 0x2E);
    sub_22E8FCA40((_QWORD *)v10, *(_DWORD *)(v11 + 24), 0x180Fu, 0, (uint64_t)&v466);
    LODWORD(v475) = 0;
    sub_22E8900C4((uint64_t)&v466, (int *)&v475);
    goto LABEL_23;
  }
  v27 = *(_QWORD *)(a2 + 144);
  v28 = (uint64_t *)(v11 + 64);
  if ((v27 & 6) != 0 || (v29 = v27 & 0xFFFFFFFFFFFFFFF8, (v27 & 0xFFFFFFFFFFFFFFF8) == 0))
  {
    v39 = *v28;
    if (*v28)
      v40 = (*(_DWORD *)(*v28 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA;
    else
      v40 = 0;
    if (!v40)
      goto LABEL_56;
    v41 = *(_QWORD *)(v39 + 16);
    v42 = (_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF8);
    if ((v41 & 4) != 0)
      v42 = (_QWORD *)*v42;
    v43 = sub_22EFCBB30((unint64_t)v42);
    v44 = v9[2];
    v45 = (_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF8);
    if ((v44 & 4) != 0)
      v45 = (_QWORD *)*v45;
    v46 = sub_22EFCBB30((unint64_t)v45);
    if (!v46 || (v47 = v46, v48 = sub_22EFCC008(v43), v48 != sub_22EFCC008(v47)))
    {
      if (!sub_22EFB9440(v39) || !sub_22EFB9440((uint64_t)v9))
      {
LABEL_56:
        sub_22E8FCA40((_QWORD *)v10, *((_DWORD *)v9 + 6), 0x13E4u, 0, (uint64_t)&v466);
        sub_22E903BEC((unsigned int *)&v466);
        sub_22E8FCA40((_QWORD *)v10, *(_DWORD *)(*v28 + 24), 0x1812u, 0, (uint64_t)&v475);
        sub_22E903BEC((unsigned int *)&v475);
        do
          v11 = *(_QWORD *)(v11 + 72);
        while (v11 && (*(_DWORD *)(v11 + 28) & 0x7E) == 0x2E);
        goto LABEL_59;
      }
    }
    v8 = a4;
    v7 = a5;
    v6 = a6;
  }
  else
  {
    v30 = *v28;
    if (!*v28 || (*(_DWORD *)(v30 + 28) & 0x7F) != 0x1D)
      goto LABEL_34;
    v31 = *(_QWORD *)(v30 + 16);
    v32 = (_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF8);
    if ((v31 & 4) != 0)
      v32 = (_QWORD *)*v32;
    v33 = sub_22EFCBB30((unint64_t)v32);
    v34 = *(_QWORD *)(v29 + 16);
    v35 = (_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF8);
    if ((v34 & 4) != 0)
      v35 = (_QWORD *)*v35;
    v36 = sub_22EFCBB30((unint64_t)v35);
    if (!v36 || (v37 = v36, v38 = sub_22EFCC008(v33), v38 != sub_22EFCC008(v37)))
    {
LABEL_34:
      sub_22E8FCA40((_QWORD *)v10, *(_DWORD *)(v29 + 24), 0x13E4u, 0, (uint64_t)&v466);
      sub_22E903BEC((unsigned int *)&v466);
      sub_22E8FCA40((_QWORD *)v10, *(_DWORD *)(*v28 + 24), 0x1812u, 0, (uint64_t)&v475);
      sub_22E903BEC((unsigned int *)&v475);
      do
        v11 = *(_QWORD *)(v11 + 72);
      while (v11 && (*(_DWORD *)(v11 + 28) & 0x7E) == 0x2E);
LABEL_59:
      sub_22E8FCA40((_QWORD *)v10, *(_DWORD *)(v11 + 24), 0x180Fu, 0, (uint64_t)&v464);
      LODWORD(v439) = 0;
      sub_22E8900C4((uint64_t)&v464, (int *)&v439);
      v24 = (unsigned int *)&v464;
      goto LABEL_60;
    }
    v15 = *v28;
    v8 = a4;
    v7 = a5;
    v6 = a6;
    if (*v28 && (*(_DWORD *)(*v28 + 28) & 0x7Eu) - 58 > 0xFFFFFFF9)
      goto LABEL_55;
    if ((*(_DWORD *)(*v28 + 28) & 0x7F) != 0x1D)
    {
      v15 = 0;
      goto LABEL_55;
    }
    v28 = (uint64_t *)(v15 + 48);
  }
  v15 = *v28;
LABEL_55:
  v462 = v15;
  *a3 = v15;
LABEL_9:
  sub_22EA0DDBC((uint64_t)v9, v15);
  if ((*(_BYTE *)(v15 + 28) & 0x80) != 0)
    return 1;
  v16 = *(uint64_t **)(*(_QWORD *)(v10 + 88) + 15208);
  v17 = sub_22EFC01DC(v15, 0);
  if (!sub_22F1CA310(v16, v17))
  {
    sub_22E8FCA40((_QWORD *)v10, *((_DWORD *)v9 + 6), 0xBA5u, 0, (uint64_t)&v466);
    *(_QWORD *)&v475 = *(_QWORD *)(v462 + 40);
    sub_22E894538((uint64_t)&v466, (uint64_t *)&v475);
    sub_22E903BEC((unsigned int *)&v466);
    v20 = *(_DWORD *)(v462 + 24);
    v21 = (_QWORD *)v10;
    v22 = 6000;
LABEL_22:
    sub_22E8FCA40(v21, v20, v22, 0, (uint64_t)&v466);
    v23 = sub_22E890024((uint64_t)&v466, &v462);
    *(_QWORD *)&v475 = *(_QWORD *)(v462 + 48);
    sub_22E8901B8(v23, (uint64_t *)&v475);
LABEL_23:
    v24 = (unsigned int *)&v466;
LABEL_60:
    sub_22E903BEC(v24);
    return 1;
  }
  v18 = *(_DWORD *)(v15 + 24);
  v435 = v6;
  if (sub_22E49F868(v15))
  {
    v19 = 109;
  }
  else if ((*(_BYTE *)(v15 + 29) & 2) != 0)
  {
    if (sub_22EFC01DC(v15, 0))
      v19 = 6000;
    else
      v19 = 110;
    if (!v18)
      v18 = *((_DWORD *)v9 + 6);
  }
  else
  {
    v19 = 108;
  }
  if ((*((_DWORD *)v9 + 7) & 0x7Eu) - 54 >= 4
    && (*(_DWORD *)(v15 + 28) & 0x7Eu) - 54 >= 4
    && (v9[10] & 0xE000) == 0x4000
    && (sub_22EFB948C(v15) | 4) == 6
    && (v9[18] < 8 || (v9[18] & 6) != 4))
  {
    if ((v51 = *(_QWORD *)(v10 + 72), !sub_22EA0E0E4(v15)) && (*(_DWORD *)(v51 + 52) & 0x80) == 0
      || (*(_BYTE *)(v51 + 1) & 1) != 0
      || (*(_QWORD *)(v15 + 80) & 0x2E000) != 0x22000)
    {
      if ((**(_BYTE **)(v10 + 72) & 0x20) == 0)
      {
        sub_22E8FCA40((_QWORD *)v10, *((_DWORD *)v9 + 6), 0x1279u, 0, (uint64_t)&v466);
        sub_22E890024((uint64_t)&v466, (uint64_t *)&v463);
        sub_22E903BEC((unsigned int *)&v466);
        sub_22E8FCA40((_QWORD *)v10, v18, v19, 0, (uint64_t)v458);
        v24 = (unsigned int *)v458;
        goto LABEL_60;
      }
      sub_22E8FCA40((_QWORD *)v10, *((_DWORD *)v9 + 6), 0x14E8u, 0, (uint64_t)&v466);
      sub_22E890024((uint64_t)&v466, (uint64_t *)&v463);
      sub_22E903BEC((unsigned int *)&v466);
      sub_22E8FCA40((_QWORD *)v10, v18, v19, 0, (uint64_t)v459);
      sub_22E903BEC(v459);
      v9 = v463;
    }
  }
  *(_QWORD *)&v475 = 0;
  if ((*((_BYTE *)v9 + 29) & 1) != 0)
  {
    sub_22EFC8E88((uint64_t)v9);
    v53 = *(uint64_t **)v52;
    v54 = *(unsigned int *)(v52 + 8);
    v55 = *(uint64_t **)v52;
    if ((_DWORD)v54)
    {
      v56 = 8 * v54;
      v55 = *(uint64_t **)v52;
      while (*(_WORD *)(*v55 + 32) != 193)
      {
        ++v55;
        v56 -= 8;
        if (!v56)
          goto LABEL_96;
      }
    }
    if (v55 != &v53[v54])
    {
      do
      {
        v58 = *v53++;
        v57 = v58;
      }
      while (*(_WORD *)(v58 + 32) != 193);
      *(_QWORD *)&v475 = v57;
      if ((*(_BYTE *)(v462 + 29) & 1) == 0)
        goto LABEL_95;
      sub_22EFC8E88(v462);
      v87 = *((unsigned int *)v86 + 2);
      if ((_DWORD)v87)
      {
        v88 = 8 * v87;
        v89 = *v86;
        while (*(_WORD *)(*(_QWORD *)v89 + 32) != 193)
        {
          v89 += 8;
          v88 -= 8;
          if (!v88)
            goto LABEL_95;
        }
      }
      else
      {
        v89 = *v86;
      }
      if (v89 == *v86 + 8 * v87)
      {
LABEL_95:
        sub_22E8FCA40((_QWORD *)v10, *((_DWORD *)v463 + 6), 0xB05u, 0, (uint64_t)&v466);
        sub_22E8FB3C4((uint64_t)&v466, (uint64_t *)&v475);
        sub_22E903BEC((unsigned int *)&v466);
        sub_22E8FCA40((_QWORD *)v10, *(_DWORD *)(v462 + 24), 0x6Cu, 0, (uint64_t)v457);
        sub_22E903BEC(v457);
        sub_22EA0DEEC((uint64_t)v463);
      }
    }
  }
LABEL_96:
  if ((*((_BYTE *)v463 + 29) & 1) != 0)
  {
    sub_22EFC8E88((uint64_t)v463);
    v60 = *(uint64_t **)v59;
    v61 = *(unsigned int *)(v59 + 8);
    v62 = *(uint64_t **)v59;
    if ((_DWORD)v61)
    {
      v63 = 8 * v61;
      v62 = *(uint64_t **)v59;
      while (*(_WORD *)(*v62 + 32) != 171)
      {
        ++v62;
        v63 -= 8;
        if (!v63)
          goto LABEL_112;
      }
    }
    if (v62 != &v60[v61])
    {
      do
      {
        v65 = *v60++;
        v64 = v65;
      }
      while (*(_WORD *)(v65 + 32) != 171);
      if (!sub_22E47E038(v462))
      {
        sub_22E8FCA40((_QWORD *)v10, *(_DWORD *)(v64 + 16), 0xB05u, 0, (uint64_t)&v466);
        if (v472)
        {
          v66 = v469;
          if (!v469)
          {
            v66 = (unsigned __int8 *)sub_22E3B8AAC(v470);
            v469 = v66;
          }
          v66[*v66 + 1] = 15;
          v67 = v469;
        }
        else
        {
          if (!v474)
            goto LABEL_111;
          v90 = *((_QWORD *)&v467 + 1);
          v91 = (uint64_t *)((char *)v466 + 12784);
          if (*((_QWORD *)&v467 + 1))
            v90 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v467 + 1) + 32))(*((_QWORD *)&v467 + 1));
          *(_QWORD *)&v475 = v90;
          v92 = sub_22F2F1D6C(v91, (uint64_t *)&v475);
          v93 = v92[1] + 32 * v473;
          v96 = *(unsigned __int8 **)(v93 + 8);
          v95 = (unsigned __int8 **)(v93 + 8);
          v94 = v96;
          if (!v96)
          {
            v94 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v95[1]);
            *v95 = v94;
          }
          v94[*v94 + 1] = 15;
          v67 = *v95;
        }
        v68 = *v67;
        *v67 = v68 + 1;
        *(_QWORD *)&v67[8 * v68 + 16] = v64;
LABEL_111:
        sub_22E903BEC((unsigned int *)&v466);
        sub_22E8FCA40((_QWORD *)v10, *(_DWORD *)(v462 + 24), 0x6Cu, 0, (uint64_t)v456);
        sub_22E903BEC(v456);
        sub_22EA0DFB8((uint64_t)v463);
      }
    }
  }
LABEL_112:
  v69 = v463;
  v70 = v462;
  if ((sub_22EA04ED8((_QWORD *)v10, (uint64_t)v463, v462) & 1) != 0
    || (sub_22EA051EC((_QWORD *)v10, (uint64_t)v69, v70) & 1) != 0)
  {
    return 1;
  }
  v71 = v462;
  v434 = v18;
  v433 = v8;
  if ((*(_BYTE *)(*(_QWORD *)(v10 + 72) + 1) & 1) == 0)
  {
    LOBYTE(v475) = 0;
    v72 = sub_22EA0E084(v462);
    LOBYTE(v475) = v72;
    if (v72 == sub_22EA0E084((uint64_t)v463) || (*(_BYTE *)(v462 + 29) & 2) != 0)
      goto LABEL_168;
    sub_22E8FCA40((_QWORD *)v10, *((_DWORD *)v463 + 6), 0xB14u, 0, (uint64_t)&v466);
    v73 = sub_22E890024((uint64_t)&v466, (uint64_t *)&v463);
    sub_22E894E38(v73, (unsigned __int8 *)&v475);
    sub_22E903BEC((unsigned int *)&v466);
    v74 = v462;
    v75 = v475;
    if ((_BYTE)v475)
    {
      if (!v462)
      {
LABEL_167:
        v109 = v463;
        v110 = *(_QWORD *)(v10 + 88);
        v467 = 0uLL;
        v466 = 0;
        LODWORD(__p) = 0;
        WORD2(__p) = 0;
        BYTE6(__p) = (v75 & 0x800000 | 0x780000u) >> 16;
        v111 = sub_22F39A9DC(v110, &v466);
        sub_22EFCA95C((uint64_t)v109, v111);
LABEL_168:
        v71 = v462;
        goto LABEL_169;
      }
      v76 = 0;
      v77 = v462;
      while (1)
      {
        if ((*(_BYTE *)(v77 + 29) & 1) != 0)
        {
          sub_22EFC8E88(v77);
          v79 = *(uint64_t **)v78;
          v80 = *(unsigned int *)(v78 + 8);
          v81 = *(uint64_t **)v78;
          if ((_DWORD)v80)
          {
            v82 = 8 * v80;
            v81 = *(uint64_t **)v78;
            while (*(_WORD *)(*v81 + 32) != 492)
            {
              ++v81;
              v82 -= 8;
              if (!v82)
                goto LABEL_129;
            }
          }
          if (v81 != &v79[v80])
          {
            do
            {
              v83 = *v79++;
              v84 = *(unsigned __int16 *)(v83 + 32) | (*(unsigned __int8 *)(v83 + 34) << 16);
            }
            while (*(_WORD *)(v83 + 32) != 492);
            if ((v84 & 0x40000) == 0)
              break;
          }
        }
LABEL_129:
        if ((*(_BYTE *)(v77 + 104) & 3) != 0)
        {
          if (v76)
            goto LABEL_149;
          v76 = 1;
        }
        v85 = sub_22E3CD31C((uint64_t *)(v77 + 104), v77);
        if (v85 != v74)
        {
          v77 = v85;
          if (v85)
            continue;
        }
        goto LABEL_149;
      }
      v74 = v77;
    }
    if (v74)
    {
      sub_22E8FCA40((_QWORD *)v10, *(_DWORD *)(v74 + 24), 0x154Fu, 0, (uint64_t)&v466);
      sub_22E894E38((uint64_t)&v466, (unsigned __int8 *)&v475);
      sub_22E903BEC((unsigned int *)&v466);
    }
LABEL_149:
    if (!(_BYTE)v475)
    {
      v97 = v463;
      if ((*((_BYTE *)v463 + 29) & 1) != 0)
      {
        sub_22EFC8E88((uint64_t)v463);
        v99 = *(char **)v98;
        v100 = *(unsigned int *)(v98 + 8);
        if ((_DWORD)v100)
        {
          v101 = &v99[8 * v100];
          v102 = 8 * v100 - 8;
          v103 = *(char **)v98;
          v104 = *(char **)v98;
          while (1)
          {
            v105 = *(_QWORD *)v104;
            v104 += 8;
            if (*(_WORD *)(v105 + 32) == 492)
              break;
            v102 -= 8;
            v103 = v104;
            if (v104 == v101)
              goto LABEL_165;
          }
          if (v104 == v101)
          {
            v101 = v103;
          }
          else
          {
            v106 = 8;
            v101 = v103;
            do
            {
              v107 = *(_QWORD *)&v103[v106];
              if (*(_WORD *)(v107 + 32) != 492)
              {
                *(_QWORD *)v101 = v107;
                v101 += 8;
              }
              v106 += 8;
              v102 -= 8;
            }
            while (v102);
            v99 = *(char **)v98;
          }
        }
        else
        {
          v101 = *(char **)v98;
        }
LABEL_165:
        v108 = (unint64_t)(v101 - v99) >> 3;
        *(_DWORD *)(v98 + 8) = v108;
        if (!(_DWORD)v108)
          *((_DWORD *)v97 + 7) &= ~0x100u;
      }
      goto LABEL_168;
    }
    v75 = WORD2(__p) | (BYTE6(__p) << 16);
    goto LABEL_167;
  }
LABEL_169:
  v112 = *(_QWORD *)(v71 + 48);
  v113 = *(_QWORD *)((v112 & 0xFFFFFFFFFFFFFFF0) + 8);
  v114 = v463[6];
  v115 = *(_QWORD *)((v114 & 0xFFFFFFFFFFFFFFF0) + 8);
  v116 = *(_QWORD *)(v113 & 0xFFFFFFFFFFFFFFF0);
  v117 = *(_QWORD *)(v115 & 0xFFFFFFFFFFFFFFF0);
  v118 = *(_DWORD *)(v116 + 16);
  v119 = *(_DWORD *)(v117 + 16);
  v120 = (v118 >> 19) & 0x1F;
  v121 = (v119 >> 19) & 0x1F;
  if (v120 == v121)
  {
    v122 = v119 >> 19;
  }
  else
  {
    v424 = *(_QWORD *)(v113 & 0xFFFFFFFFFFFFFFF0);
    v426 = *(_QWORD *)(v71 + 112);
    v206 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v426 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v206)
      v207 = *(unsigned __int8 *)(v206 + 16) - 27 > 0xFFFFFFFD;
    else
      v207 = 0;
    v428 = *(_QWORD *)((v112 & 0xFFFFFFFFFFFFFFF0) + 8);
    v430 = v112;
    v422 = v19;
    if (!v207)
      v206 = sub_22F10CF48(v206);
    v212 = *(_DWORD *)(v206 + 16);
    if (sub_22F31D55C(v206, v463[6]))
    {
      v291 = sub_22EFC01DC(v462, 0);
      if (!(_DWORD)v291)
      {
        v292 = sub_22F31D55C(v291, *(_QWORD *)(v426 + 48));
        sub_22E8FCA40((_QWORD *)v10, *((_DWORD *)v463 + 6), 0xBD6u, 0, (uint64_t)&v466);
        *(_QWORD *)&v475 = sub_22F40A550((v119 >> 19) & 0x1F);
        *((_QWORD *)&v475 + 1) = v293;
        v294 = sub_22F2F2210((uint64_t)&v466, (uint64_t)&v475);
        LOBYTE(v439) = v292 == 0;
        v295 = sub_22E894E38(v294, (unsigned __int8 *)&v439);
        if (v292)
        {
          *(_QWORD *)&v464 = sub_22F40A550((v212 >> 19) & 0x1F);
          *((_QWORD *)&v464 + 1) = v365;
        }
        else
        {
          *(_QWORD *)&v464 = "";
          *((_QWORD *)&v464 + 1) = 0;
        }
        sub_22F2F2210(v295, (uint64_t)&v464);
        sub_22E903BEC((unsigned int *)&v466);
        sub_22E8FCA40((_QWORD *)v10, *(_DWORD *)(v426 + 24), 0x6Cu, 0, (uint64_t)v455);
        v24 = (unsigned int *)v455;
        goto LABEL_60;
      }
      sub_22E8FCA40((_QWORD *)v10, *((_DWORD *)v463 + 6), 0x18C5u, 0, (uint64_t)&v466);
      *(_QWORD *)&v475 = sub_22F40A550(v121);
      *((_QWORD *)&v475 + 1) = v327;
      v328 = sub_22F2F2210((uint64_t)&v466, (uint64_t)&v475);
      LODWORD(v464) = 3;
      sub_22E8900C4(v328, (int *)&v464);
      sub_22E903BEC((unsigned int *)&v466);
      v122 = v120 | (32 * HIBYTE(v119));
    }
    else
    {
      v122 = v120 | (32 * HIBYTE(v119));
    }
    v116 = v424;
    v113 = v428;
    LOBYTE(v112) = v430;
    v19 = v422;
  }
  v123 = (v122 >> 5) & 1;
  if (((v118 >> 19) & 0x20) == 0)
    v123 = 1;
  if (v123)
    v124 = v122;
  else
    v124 = v122 | 0x20;
  if ((((v118 >> 19) & 0x700) != 0) != ((v124 & 0x700) != 0))
    goto LABEL_185;
  v125 = ((v124 >> 8) & 7) - 1;
  if (((v124 >> 8) & 7) == 0)
    v125 = 0;
  if (((v118 >> 27) & 7) != 0)
    v126 = ((v118 >> 27) & 7) - 1;
  else
    v126 = 0;
  v127 = v123 ^ 1;
  if (v120 != v121)
    v127 = 1;
  if (v126 != v125)
  {
LABEL_185:
    if ((v124 & 0x700) != 0)
    {
      v128 = v116;
      sub_22E8FCA40((_QWORD *)v10, *((_DWORD *)v463 + 6), 0x1237u, 0, (uint64_t)&v466);
      v129 = *(_DWORD *)(v117 + 16);
      if ((v129 & 0x38000000) != 0)
        v130 = ((v129 >> 27) & 7) - 1;
      else
        v130 = 0;
      LODWORD(v475) = v130;
      v131 = sub_22E89519C((uint64_t)&v466, (unsigned int *)&v475);
      v132 = *(_DWORD *)(v128 + 16);
      if ((v132 & 0x38000000) != 0)
        v133 = ((v132 >> 27) & 7) - 1;
      else
        v133 = 0;
      LODWORD(v464) = v133;
      sub_22E89519C(v131, (unsigned int *)&v464);
      sub_22E903BEC((unsigned int *)&v466);
      sub_22E8FCA40((_QWORD *)v10, v434, 0x6Cu, 0, (uint64_t)v454);
      v24 = (unsigned int *)v454;
      goto LABEL_60;
    }
    v134 = (v118 >> 27) & 7;
    v13 = v134 != 0;
    v135 = v134 - 1;
    if (!v13)
      v135 = 0;
    v124 = v124 & 0xFFFFF8FF | ((v135 << 8) + 256);
    v127 = 1;
  }
  if (((v118 >> 25) & 1) != (v124 & 0x40) >> 6)
  {
    if ((v124 & 0x40) != 0)
    {
      sub_22E8FCA40((_QWORD *)v10, *((_DWORD *)v463 + 6), 0xDBBu, 0, (uint64_t)&v466);
      sub_22F2F30F4((uint64_t)&v466, (uint64_t)"'ns_returns_retained'");
      sub_22E903BEC((unsigned int *)&v466);
      sub_22E8FCA40((_QWORD *)v10, v434, 0x6Cu, 0, (uint64_t)v453);
      v24 = (unsigned int *)v453;
      goto LABEL_60;
    }
    v136 = (v124 >> 7) & 1;
    LOWORD(v124) = v124 | 0x40;
    if (((v118 >> 26) & 1) == v136)
      goto LABEL_207;
    goto LABEL_201;
  }
  v136 = (v124 >> 7) & 1;
  if (((v118 >> 26) & 1) != v136)
  {
LABEL_201:
    if (v136)
    {
      if ((*((_BYTE *)v463 + 29) & 1) != 0)
      {
        sub_22EFC8E88((uint64_t)v463);
        v202 = *(uint64_t **)v201;
        v203 = *(unsigned int *)(v201 + 8);
        v204 = *(uint64_t **)v201;
        v138 = v434;
        if ((_DWORD)v203)
        {
          v205 = 8 * v203;
          v204 = *(uint64_t **)v201;
          while (*(_WORD *)(*v204 + 32) != 104)
          {
            ++v204;
            v205 -= 8;
            if (!v205)
              goto LABEL_314;
          }
        }
        if (v204 == &v202[v203])
        {
LABEL_314:
          v137 = 0;
        }
        else
        {
          do
          {
            v208 = *v202++;
            v137 = v208;
          }
          while (*(_WORD *)(v208 + 32) != 104);
        }
      }
      else
      {
        v137 = 0;
        v138 = v434;
      }
      sub_22E8FCA40((_QWORD *)v10, *((_DWORD *)v463 + 6), 0xDBBu, 0, (uint64_t)&v466);
      if (v472)
      {
        v209 = v469;
        if (!v469)
        {
          v209 = (unsigned __int8 *)sub_22E3B8AAC(v470);
          v469 = v209;
        }
        v209[*v209 + 1] = 15;
        v210 = v469;
        v211 = *v469;
        *v469 = v211 + 1;
        *(_QWORD *)&v210[8 * v211 + 16] = v137;
      }
      else if (v474)
      {
        v297 = v138;
        v298 = *((_QWORD *)&v467 + 1);
        v299 = (uint64_t *)((char *)v466 + 12784);
        if (*((_QWORD *)&v467 + 1))
          v298 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v467 + 1) + 32))(*((_QWORD *)&v467 + 1));
        *(_QWORD *)&v475 = v298;
        v300 = sub_22F2F1D6C(v299, (uint64_t *)&v475);
        v301 = v300[1] + 32 * v473;
        v304 = *(unsigned __int8 **)(v301 + 8);
        v303 = (unsigned __int8 **)(v301 + 8);
        v302 = v304;
        if (!v304)
        {
          v302 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v303[1]);
          *v303 = v302;
        }
        v302[*v302 + 1] = 15;
        v305 = *v303;
        v306 = **v303;
        *v305 = v306 + 1;
        *(_QWORD *)&v305[8 * v306 + 16] = v137;
        v138 = v297;
      }
      sub_22E903BEC((unsigned int *)&v466);
      sub_22E8FCA40((_QWORD *)v10, v138, 0x6Cu, 0, (uint64_t)v452);
      v24 = (unsigned int *)v452;
      goto LABEL_60;
    }
    LOWORD(v124) = v124 | 0x80;
    goto LABEL_207;
  }
  if (!v127)
  {
    v427 = v113;
    v429 = v112;
    v423 = v116;
    v139 = v114 & 7 | v115;
    goto LABEL_210;
  }
LABEL_207:
  v140 = *(_QWORD *)(v463[6] & 0xFFFFFFFFFFFFFFF0);
  v423 = v116;
  v427 = v113;
  v429 = v112;
  if (!v140 || *(unsigned __int8 *)(v140 + 16) - 27 <= 0xFFFFFFFD)
  {
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v140 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 <= 1)
      v140 = sub_22F10CF48(v140);
    else
      v140 = 0;
  }
  v141 = (unint64_t)sub_22EF5F1F4(*(_QWORD *)(v10 + 88), v140, v124);
  v463[6] = v141 & 0xFFFFFFFFFFFFFFF0;
  v139 = *(_QWORD *)((v141 & 0xFFFFFFFFFFFFFFF0) + 8);
LABEL_210:
  if ((*(_BYTE *)(v462 + 82) & 1) == 0
    && (*((_BYTE *)v463 + 82) & 1) != 0
    && !sub_22EA0E0E4((uint64_t)v463)
    && (*(_DWORD *)(*(_QWORD *)(v10 + 72) + 52) & 0x80) == 0
    && sub_22EFC9084(v462, 0)
    && (sub_22EFBF86C(v462, (unint64_t *)&v466, 0) & 1) == 0
    && !sub_22E49F868((uint64_t)v463))
  {
    v466 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v462 + 32))(v462);
    LODWORD(v467) = 0;
    sub_22E785624(v10 + 8512, &v466);
  }
  v142 = sub_22EA0E0E4((uint64_t)v463);
  v143 = v462;
  if (v142 && (*(_BYTE *)(v462 + 82) & 1) != 0)
  {
    v144 = sub_22EA0E0E4(v462);
    v143 = v462;
    if (!v144)
    {
      v258 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v462 + 32))(v462);
      v259 = (_QWORD *)sub_22F31ECD0(v10 + 8512, v258);
      if (*(_QWORD **)(v10 + 8544) != v259)
      {
        v260 = v259;
        v466 = 0;
        if (sub_22E3B9914(v10 + 8512, v259, &v466))
        {
          *(_QWORD *)v466 = -8192;
          *(int32x2_t *)(v10 + 8520) = vadd_s32(*(int32x2_t *)(v10 + 8520), (int32x2_t)0x1FFFFFFFFLL);
        }
        v261 = *(_QWORD **)(v10 + 8544);
        v262 = v260 + 2;
        if (v260 + 2 == v261)
        {
          *(_QWORD *)(v10 + 8544) = v260;
        }
        else
        {
          v263 = 0;
          v264 = ((uint64_t)v260 - *(_QWORD *)(v10 + 8536)) >> 4;
          do
          {
            v265 = &v262[v263];
            *(v265 - 2) = v262[v263];
            *((_DWORD *)v265 - 2) = v262[v263 + 1];
            v263 += 2;
          }
          while (v265 + 2 != v261);
          *(_QWORD *)(v10 + 8544) = &v260[v263];
          if (v263 * 8)
          {
            v266 = *(_QWORD *)(v10 + 8512);
            v267 = *(unsigned int *)(v10 + 8528);
            v268 = v266 + 16 * v267;
            if (*(_DWORD *)(v10 + 8520))
            {
              if ((_DWORD)v267)
              {
                v269 = 16 * v267;
                v270 = *(_QWORD *)(v10 + 8512);
                while ((*(_QWORD *)v270 | 0x1000) == 0xFFFFFFFFFFFFF000)
                {
                  v270 += 16;
                  v269 -= 16;
                  if (!v269)
                    goto LABEL_431;
                }
              }
              else
              {
                v270 = *(_QWORD *)(v10 + 8512);
              }
            }
            else
            {
LABEL_431:
              v270 = v266 + 16 * v267;
            }
            v378 = v266 + 16 * v267;
            while (v270 != v378)
            {
              v379 = *(unsigned int *)(v270 + 8);
              if (v264 < v379)
                *(_DWORD *)(v270 + 8) = v379 - 1;
              v380 = v270 + 16;
              v270 = v268;
              if (v380 != v268)
              {
                v270 = v380;
                while ((*(_QWORD *)v270 | 0x1000) == 0xFFFFFFFFFFFFF000)
                {
                  v270 += 16;
                  if (v270 == v268)
                  {
                    v270 = v268;
                    break;
                  }
                }
              }
            }
          }
        }
      }
      v143 = v462;
    }
  }
  v425 = v139;
  v145 = *(_QWORD *)(*(_QWORD *)(v143 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v145)
    v146 = *(_BYTE *)(v145 + 16) == 26;
  else
    v146 = 0;
  if ((v146
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v145 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
     && (v145 = sub_22F10CF48(v145)) != 0)
    && (*(_DWORD *)(v145 + 20) & 0x3FFFC0) != 0)
  {
    v147 = *(_QWORD *)(*(_QWORD *)(v462 + 48) & 0xFFFFFFFFFFFFFFF0);
    v148 = v147 && *(_BYTE *)(v147 + 16) == 26;
    if (v148
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v147 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
      && (v147 = sub_22F10CF48(v147)) != 0)
    {
      v149 = (unsigned __int16)(*(_QWORD *)(v147 + 16) >> 38);
    }
    else
    {
      v149 = 0;
    }
    v150 = *(_QWORD *)(v463[6] & 0xFFFFFFFFFFFFFFF0);
    v151 = v150 && *(_BYTE *)(v150 + 16) == 26;
    if (v151
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v150 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
      && (v150 = sub_22F10CF48(v150)) != 0)
    {
      v152 = (unsigned __int16)(*(_QWORD *)(v150 + 16) >> 38);
    }
    else
    {
      v152 = 0;
    }
    if (v149 == v152)
    {
      v153 = v462;
      v154 = v463;
      v155 = *(uint64_t **)(v462 + 120);
      v156 = *(_QWORD *)(v462 + 48) & 0xFFFFFFFFFFFFFFF0;
      v157 = *(_QWORD *)v156;
      if (*(_QWORD *)v156)
        v158 = *(_BYTE *)(*(_QWORD *)v156 + 16) == 26;
      else
        v158 = 0;
      v159 = *(_QWORD *)(v462 + 120);
      if (!v158)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v157 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
        {
          sub_22F10CF48(v157);
          v159 = *(_QWORD *)(v153 + 120);
          v156 = *(_QWORD *)(v153 + 48) & 0xFFFFFFFFFFFFFFF0;
        }
        else
        {
          v159 = *(_QWORD *)(v462 + 120);
        }
      }
      v160 = *(_QWORD *)v156;
      if (*(_QWORD *)v156 && *(_BYTE *)(v160 + 16) == 26
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v160 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
        && (v160 = sub_22F10CF48(v160)) != 0)
      {
        v161 = (unsigned __int16)(*(_QWORD *)(v160 + 16) >> 38);
      }
      else
      {
        v161 = 0;
      }
      v162 = (uint64_t *)(v159 + 8 * v161);
      v163 = (uint64_t *)v154[15];
      v164 = *(_QWORD *)(v154[6] & 0xFFFFFFFFFFFFFFF0);
      if ((!v164 || *(_BYTE *)(v164 + 16) != 26)
        && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v164 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
      {
        sub_22F10CF48(v164);
      }
      if (v155 != v162)
      {
        v165 = v162;
        while (1)
        {
          v166 = *v163;
          if ((*(_BYTE *)(*v155 + 29) & 1) == 0)
            goto LABEL_261;
          sub_22EFC8E88(*v155);
          v168 = *(uint64_t **)v167;
          v169 = *(unsigned int *)(v167 + 8);
          v170 = *(uint64_t **)v167;
          if ((_DWORD)v169)
          {
            v171 = 8 * v169;
            v170 = *(uint64_t **)v167;
            while (*(_WORD *)(*v170 + 32) != 83)
            {
              ++v170;
              v171 -= 8;
              if (!v171)
                goto LABEL_261;
            }
          }
          if (v170 == &v168[v169])
          {
LABEL_261:
            v172 = 0;
          }
          else
          {
            do
            {
              v173 = *v168++;
              v172 = v173;
            }
            while (*(_WORD *)(v173 + 32) != 83);
          }
          if ((*(_BYTE *)(v166 + 29) & 1) == 0)
            goto LABEL_271;
          sub_22EFC8E88(v166);
          v175 = *(uint64_t **)v174;
          v176 = *(unsigned int *)(v174 + 8);
          v177 = *(uint64_t **)v174;
          if ((_DWORD)v176)
          {
            v178 = 8 * v176;
            v177 = *(uint64_t **)v174;
            while (*(_WORD *)(*v177 + 32) != 83)
            {
              ++v177;
              v178 -= 8;
              if (!v178)
                goto LABEL_271;
            }
          }
          if (v177 == &v175[v176])
          {
LABEL_271:
            v179 = 0;
          }
          else
          {
            do
            {
              v180 = *v175++;
              v179 = v180;
            }
            while (*(_WORD *)(v180 + 32) != 83);
          }
          if (v172 != v179)
          {
            if (!v172)
              break;
            if (!v179)
              break;
            if (*(_DWORD *)(v172 + 36) != *(_DWORD *)(v179 + 36))
              break;
            v181 = sub_22F248BA8(v172);
            if (v181 != sub_22F248BA8(v179))
              break;
          }
          ++v155;
          ++v163;
          if (v155 == v165)
            goto LABEL_278;
        }
        sub_22E8FCA40((_QWORD *)v10, *((_DWORD *)v463 + 6), 0xCC1u, 0, (uint64_t)&v466);
        *(_QWORD *)&v475 = v463[5];
        sub_22E894538((uint64_t)&v466, (uint64_t *)&v475);
        sub_22E903BEC((unsigned int *)&v466);
        v20 = v434;
        goto LABEL_348;
      }
    }
  }
LABEL_278:
  if ((*(_BYTE *)(v462 + 29) & 1) != 0)
  {
    sub_22EFC8E88(v462);
    v187 = *(uint64_t **)v186;
    v188 = *(unsigned int *)(v186 + 8);
    v189 = *(uint64_t **)v186;
    v183 = v429;
    v184 = v433;
    v185 = v427;
    if ((_DWORD)v188)
    {
      v190 = 8 * v188;
      v189 = *(uint64_t **)v186;
      while (*(_WORD *)(*v189 + 32) != 336)
      {
        ++v189;
        v190 -= 8;
        if (!v190)
          goto LABEL_288;
      }
    }
    if (v189 == &v187[v188])
    {
LABEL_288:
      v182 = 0;
    }
    else
    {
      do
      {
        v191 = *v187++;
        v182 = v191;
      }
      while (*(_WORD *)(v191 + 32) != 336);
    }
  }
  else
  {
    v182 = 0;
    v183 = v429;
    v184 = v433;
    v185 = v427;
  }
  if ((*((_BYTE *)v463 + 29) & 1) != 0)
  {
    v192 = v183;
    v193 = v185;
    sub_22EFC8E88((uint64_t)v463);
    v185 = v193;
    v183 = v192;
    v195 = *(uint64_t **)v194;
    v196 = *(unsigned int *)(v194 + 8);
    v197 = *(uint64_t **)v194;
    if ((_DWORD)v196)
    {
      v198 = 8 * v196;
      v197 = *(uint64_t **)v194;
      while (*(_WORD *)(*v197 + 32) != 336)
      {
        ++v197;
        v198 -= 8;
        if (!v198)
          goto LABEL_326;
      }
    }
    if (v197 != &v195[v196])
    {
      do
      {
        v200 = *v195++;
        v199 = v200;
      }
      while (*(_WORD *)(v200 + 32) != 336);
      if (v182)
      {
        if (*(_QWORD *)(v182 + 40) != *(_QWORD *)(v199 + 40))
        {
          sub_22E8FCA40((_QWORD *)v10, *(_DWORD *)(v199 + 16), 0x1314u, 0, (uint64_t)&v466);
          LODWORD(v475) = 0;
          sub_22E8900C4((uint64_t)&v466, (int *)&v475);
          sub_22E903BEC((unsigned int *)&v466);
          sub_22E8FCA40((_QWORD *)v10, *(_DWORD *)(v182 + 16), 0x17F2u, 0, (uint64_t)v451);
          v24 = (unsigned int *)v451;
          goto LABEL_60;
        }
        if (((*(_DWORD *)(v199 + 48) ^ *(_DWORD *)(v182 + 48)) & 0x3FFFFFFF) != 0)
        {
          sub_22E8FCA40((_QWORD *)v10, *(_DWORD *)(v199 + 16), 0x1314u, 0, (uint64_t)&v466);
          v49 = 1;
          LODWORD(v475) = 1;
          sub_22E8900C4((uint64_t)&v466, (int *)&v475);
          sub_22E903BEC((unsigned int *)&v466);
          sub_22E8FCA40((_QWORD *)v10, *(_DWORD *)(v182 + 16), 0x17F2u, 0, (uint64_t)v450);
          sub_22E903BEC(v450);
          return v49;
        }
      }
    }
  }
LABEL_326:
  v213 = *(_QWORD *)(v10 + 72);
  if ((*(_QWORD *)v213 & 0x100) == 0)
  {
    v214 = v183 & 7 | v185;
    goto LABEL_328;
  }
  if (sub_22EB14A64(v10, v462, (uint64_t)v463))
    return 1;
  v431 = *(_QWORD *)((*(_QWORD *)(v462 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
  v214 = *(_QWORD *)(v462 + 48) & 7 | v431;
  v425 = v463[6] & 7 | *(_QWORD *)((v463[6] & 0xFFFFFFFFFFFFFFF0) + 8);
  v222 = sub_22EA0E144(v462);
  v223 = sub_22EA0E144((uint64_t)v463);
  v224 = v223 & 0xFFFFFFFFFFFFFFF0;
  if ((*(_QWORD *)((v222 & 0xFFFFFFFFFFFFFFF0) + 8) | v222 & 7) != (*(_QWORD *)((v223 & 0xFFFFFFFFFFFFFFF0) + 8) | v223 & 7)
    && sub_22F31D5A4((uint64_t)v463, v462, v223, v222))
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v224 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v222 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) != 32
      || (v425 = sub_22EF71EC8(*(_QWORD *)(v10 + 88), v425, v214), v425 <= 0xF))
    {
      if (sub_22E8BB0E8((uint64_t)v463) && (*(unsigned int (**)(unint64_t *))(*v463 + 24))(v463))
      {
        sub_22E8FCA40((_QWORD *)v10, *((_DWORD *)v463 + 6), 0xEB7u, 0, (uint64_t)&v466);
        v271 = sub_22E890024((uint64_t)&v466, (uint64_t *)&v463);
        *(_QWORD *)&v475 = sub_22F3AC46C((unint64_t)v463);
        v272 = (void **)v271;
      }
      else
      {
        sub_22E8FCA40((_QWORD *)v10, *((_DWORD *)v463 + 6), 0x117Du, 0, (uint64_t)&v466);
        *(_QWORD *)&v475 = sub_22F3AC46C((unint64_t)v463);
        v272 = &v466;
      }
      sub_22E8906A0((uint64_t)v272, (uint64_t *)&v475);
      sub_22E903BEC((unsigned int *)&v466);
      sub_22E8FCA40((_QWORD *)v10, v434, v19, 0, (uint64_t)&v466);
      v381 = sub_22E890024((uint64_t)&v466, &v462);
      *(_QWORD *)&v475 = *(_QWORD *)(v462 + 48);
      v382 = sub_22E8901B8(v381, (uint64_t *)&v475);
      *(_QWORD *)&v464 = sub_22F3AC46C(v462);
      sub_22E8906A0(v382, (uint64_t *)&v464);
      goto LABEL_23;
    }
  }
  if (*(_QWORD *)(v423 + 24) == *(_QWORD *)(*(_QWORD *)(v425 & 0xFFFFFFFFFFFFFFF0) + 24))
    goto LABEL_361;
  v225 = *(_QWORD *)(*(_QWORD *)(v462 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v225)
    v226 = *(unsigned __int8 *)(v225 + 16) - 27 > 0xFFFFFFFD;
  else
    v226 = 0;
  if (!v226)
    v225 = sub_22F10CF48(v225);
  v227 = *(_QWORD *)(*(_QWORD *)(v225 + 24) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v466) = 0;
  v228 = sub_22F110500((uint64_t)&v466, v227);
  if (!v228)
    goto LABEL_361;
  v229 = *(_DWORD *)(v228 + 16);
  if (v229 != 14)
    goto LABEL_361;
  v230 = *(_QWORD *)(v228 + 24);
  if (v230 > 0xF)
  {
    v231 = v184;
    v366 = v463;
    v366[6] = sub_22F34729C(v10, v463[6], v230);
    v367 = v10;
    v368 = sub_22F34729C(v10, v425, v230);
  }
  else
  {
    if ((v229 & 0x400) == 0)
    {
LABEL_361:
      v231 = v184;
      goto LABEL_362;
    }
    v231 = v184;
    v369 = v463;
    v369[6] = sub_22F347230(v10);
    v367 = v10;
    v368 = sub_22F347230(v10);
  }
  v425 = v368 & 7 | *(_QWORD *)((v368 & 0xFFFFFFFFFFFFFFF0) + 8);
  v10 = v367;
LABEL_362:
  if ((*(_DWORD *)(v462 + 28) & 0x7Eu) - 54 >= 4)
    v232 = 0;
  else
    v232 = v462;
  v233 = v463;
  if ((*((_DWORD *)v463 + 7) & 0x7Eu) - 54 >= 4)
    v234 = 0;
  else
    v234 = v463;
  if (v232)
    v235 = v234 == 0;
  else
    v235 = 1;
  if (v235)
    goto LABEL_443;
  v234[10] = v234[10] & 0xFFFFFFFFFF7FFFFFLL | (((*(_QWORD *)(v232 + 80) >> 23) & 1) << 23);
  v236 = *(_QWORD *)(v232 + 144) & 0xFFFFFFFFFFFFFFF8;
  v237 = (*(_QWORD *)(v232 + 144) & 6) != 4 || v236 == 0;
  if (v237 || *(_QWORD *)(v236 + 16) < 8uLL)
  {
    v238 = 0;
  }
  else
  {
    v256 = v234[18] & 0xFFFFFFFFFFFFFFF8;
    if ((v234[18] & 6) != 4 || v256 == 0)
      v273 = 0;
    else
      v273 = *(_QWORD *)(v256 + 16) & 0xFFFFFFFFFFFFFFF8;
    v238 = v273 != 0;
  }
  v274 = *((_DWORD *)v234 + 7);
  if ((v274 & 0x1800000) == 0)
  {
    v285 = v234[2];
    v286 = v285 & 0xFFFFFFFFFFFFFFF8;
    if ((v285 & 4) != 0)
      v286 = *(_QWORD *)(v286 + 8);
    if ((*(_WORD *)(v286 + 8) & 0x7Eu) - 38 < 0xFFFFFFFC)
      v238 = 1;
    if (v238)
    {
      if ((*(_BYTE *)(v232 + 29) & 2) != 0)
      {
        sub_22E8FCA40((_QWORD *)v10, *((_DWORD *)v234 + 6), 0xC9Au, 0, (uint64_t)&v466);
        v296 = sub_22E890024((uint64_t)&v466, (uint64_t *)&v463);
        LOBYTE(v475) = sub_22EAB3978(v10, v232);
        LODWORD(v475) = v475;
        v287 = (void **)v296;
      }
      else
      {
        if ((*(_BYTE *)(*(_QWORD *)(v232 + 112) + 83) & 4) == 0)
          goto LABEL_443;
        sub_22E8FCA40((_QWORD *)v10, *((_DWORD *)v234 + 6), 0xC99u, 0, (uint64_t)&v466);
        LOBYTE(v475) = sub_22EAB3978(v10, v232);
        LODWORD(v475) = v475;
        v287 = &v466;
      }
      sub_22E8900C4((uint64_t)v287, (int *)&v475);
      goto LABEL_23;
    }
    if ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v232 + 32))(v232) + 80) & 0xE000) == 0x4000)
    {
      v289 = 1;
      v288 = v434;
    }
    else
    {
      v288 = v434;
      v289 = (*(_QWORD *)(v232 + 40) & 7) == 6
          && (*(_DWORD *)(*(_QWORD *)(v232 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4;
    }
    if ((*(_QWORD *)((*(uint64_t (**)(unint64_t *))(*v234 + 32))(v234) + 80) & 0xE000) == 0x4000)
    {
      if (!v289)
        goto LABEL_470;
    }
    else if ((v234[5] & 7) == 6)
    {
      if (v289 != (*(_DWORD *)(v234[5] & 0xFFFFFFFFFFFFFFF8) - 1) < 4)
      {
LABEL_470:
        sub_22E8FCA40((_QWORD *)v10, *((_DWORD *)v463 + 6), 0x1189u, 0, (uint64_t)v449);
        v290 = (unsigned int *)v449;
LABEL_640:
        sub_22E903BEC(v290);
        v20 = v288;
LABEL_348:
        v21 = (_QWORD *)v10;
        v22 = v19;
        goto LABEL_22;
      }
    }
    else if (v289)
    {
      goto LABEL_470;
    }
    if (*(_DWORD *)(v10 + 10680) <= *(_DWORD *)(v10 + 11956))
    {
      if ((*(_DWORD *)(v232 + 28) & 0x7F) == 0x37)
      {
        v364 = 3099;
      }
      else if ((*((_DWORD *)v234 + 7) & 0x7F) == 0x39)
      {
        v364 = 3256;
      }
      else if ((*((_DWORD *)v234 + 7) & 0x7F) == 0x38)
      {
        v364 = 3105;
      }
      else
      {
        v364 = 3777;
      }
      sub_22E8FCA40((_QWORD *)v10, *((_DWORD *)v463 + 6), v364, 0, (uint64_t)v448);
      v290 = (unsigned int *)v448;
      goto LABEL_640;
    }
    sub_22E8FCA40((_QWORD *)v10, *((_DWORD *)v463 + 6), 0xEC2u, 0, (uint64_t)&v466);
    v363 = sub_22E890024((uint64_t)&v466, (uint64_t *)&v463);
    *(_QWORD *)&v475 = v463[6];
    sub_22E8901B8(v363, (uint64_t *)&v475);
    goto LABEL_633;
  }
  if ((*(_BYTE *)(v232 + 29) & 2) != 0)
    *((_DWORD *)v234 + 7) = v274 | 0x200;
LABEL_443:
  if ((*((_BYTE *)v233 + 29) & 1) != 0)
  {
    sub_22EFC8E88((uint64_t)v233);
    v276 = *(uint64_t **)v275;
    v277 = *(unsigned int *)(v275 + 8);
    v278 = *(uint64_t **)v275;
    if ((_DWORD)v277)
    {
      v279 = 8 * v277;
      v278 = *(uint64_t **)v275;
      while (*(_WORD *)(*v278 + 32) != 138)
      {
        ++v278;
        v279 -= 8;
        if (!v279)
          goto LABEL_483;
      }
    }
    if (v278 != &v276[v277])
    {
      do
      {
        v281 = *v276++;
        v280 = v281;
      }
      while (*(_WORD *)(v281 + 32) != 138);
      if (!sub_22EA0E1A0(v462))
      {
        sub_22E8FCA40((_QWORD *)v10, *(_DWORD *)(v280 + 16), 0xB05u, 0, (uint64_t)&v466);
        if (v472)
        {
          v282 = v469;
          if (!v469)
          {
            v282 = (unsigned __int8 *)sub_22E3B8AAC(v470);
            v469 = v282;
          }
          v282[*v282 + 1] = 15;
          v283 = v469;
          v284 = *v469;
          *v469 = v284 + 1;
          *(_QWORD *)&v283[8 * v284 + 16] = v280;
        }
        else if (v474)
        {
          v383 = v19;
          v384 = v7;
          v385 = *((_QWORD *)&v467 + 1);
          v386 = (uint64_t *)((char *)v466 + 12784);
          if (*((_QWORD *)&v467 + 1))
            v385 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v467 + 1) + 32))(*((_QWORD *)&v467 + 1));
          *(_QWORD *)&v475 = v385;
          v387 = sub_22F2F1D6C(v386, (uint64_t *)&v475);
          v388 = v387[1] + 32 * v473;
          v391 = *(unsigned __int8 **)(v388 + 8);
          v390 = (unsigned __int8 **)(v388 + 8);
          v389 = v391;
          if (!v391)
          {
            v389 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v390[1]);
            *v390 = v389;
          }
          v389[*v389 + 1] = 15;
          v392 = *v390;
          v393 = **v390;
          *v392 = v393 + 1;
          *(_QWORD *)&v392[8 * v393 + 16] = v280;
          v7 = v384;
          v19 = v383;
        }
        sub_22E903BEC((unsigned int *)&v466);
        sub_22E8FCA40((_QWORD *)v10, *(_DWORD *)(v462 + 24), 0x6Cu, 0, (uint64_t)v447);
        sub_22E903BEC(v447);
      }
    }
  }
LABEL_483:
  if ((*((_BYTE *)v463 + 29) & 1) != 0)
  {
    sub_22EFC8E88((uint64_t)v463);
    v308 = *(uint64_t **)v307;
    v309 = *(unsigned int *)(v307 + 8);
    v310 = *(uint64_t **)v307;
    if ((_DWORD)v309)
    {
      v311 = 8 * v309;
      v310 = *(uint64_t **)v307;
      while (*(_WORD *)(*v310 + 32) != 79)
      {
        ++v310;
        v311 -= 8;
        if (!v311)
          goto LABEL_490;
      }
    }
    if (v310 != &v308[v309])
    {
      do
      {
        v319 = *v308++;
        v318 = v319;
      }
      while (*(_WORD *)(v319 + 32) != 79);
      if (!sub_22F31D630(v462))
      {
        sub_22E8FCA40((_QWORD *)v10, *(_DWORD *)(v318 + 16), 0xBC6u, 0, (uint64_t)&v466);
        LODWORD(v475) = 0;
        sub_22E8900C4((uint64_t)&v466, (int *)&v475);
        sub_22E903BEC((unsigned int *)&v466);
        sub_22E8FCA40((_QWORD *)v10, *(_DWORD *)(*(_QWORD *)(v462 + 112) + 24), 0x155Fu, 0, (uint64_t)&v466);
        LODWORD(v475) = 0;
        sub_22E8900C4((uint64_t)&v466, (int *)&v475);
        sub_22E903BEC((unsigned int *)&v466);
      }
    }
  }
LABEL_490:
  v312 = v214;
  if ((v118 & 0x1000000) == 0)
  {
    v312 = v214;
    if ((v124 & 0x20) != 0)
    {
      v313 = *(_QWORD *)(v431 & 0xFFFFFFFFFFFFFFF0);
      if (!v313 || *(_BYTE *)(v313 + 16) != 26)
        v313 = sub_22F10CF48(*(_QWORD *)(v431 & 0xFFFFFFFFFFFFFFF0));
      v312 = (unint64_t)sub_22EF5F1F4(*(_QWORD *)(v10 + 88), v313, (v118 >> 19) | 0x20) & 0xFFFFFFFFFFFFFFF0;
    }
  }
  v314 = v463;
  v315 = *(_QWORD *)(v462 + 16);
  v316 = v315 & 0xFFFFFFFFFFFFFFF8;
  if ((v315 & 4) != 0)
    v316 = *(_QWORD *)v316;
  if ((*(_WORD *)(v316 + 8) & 0x7Eu) - 34 >= 4)
  {
    v317 = sub_22EFC0844(v462);
    if (v317)
    {
      if (v317 != 1 || !sub_22EFC09D4((uint64_t)v314))
        goto LABEL_511;
    }
    else
    {
      v320 = v314[2];
      v321 = v320 & 0xFFFFFFFFFFFFFFF8;
      if ((v320 & 4) != 0)
        v321 = *(_QWORD *)(v321 + 8);
      if (!sub_22F3B13A0(v321))
        goto LABEL_511;
    }
    if ((*((_WORD *)v463 + 15) & 0x180) == 0)
    {
      sub_22E8FCA40((_QWORD *)v10, *((_DWORD *)v463 + 6), 0xCC0u, 0, (uint64_t)&v466);
      sub_22E890024((uint64_t)&v466, (uint64_t *)&v463);
      sub_22E903BEC((unsigned int *)&v466);
      sub_22E8FCA40((_QWORD *)v10, v434, v19, 0, (uint64_t)v445);
      v24 = (unsigned int *)v445;
      goto LABEL_60;
    }
    sub_22E8FCA40((_QWORD *)v10, *((_DWORD *)v463 + 6), 0x14DDu, 0, (uint64_t)&v466);
    sub_22E890024((uint64_t)&v466, (uint64_t *)&v463);
    sub_22E903BEC((unsigned int *)&v466);
    sub_22E8FCA40((_QWORD *)v10, v434, v19, 0, (uint64_t)v446);
    sub_22E903BEC(v446);
  }
LABEL_511:
  if ((*(_BYTE *)(*(_QWORD *)(v10 + 72) + 104) & 0x20) != 0
    && !sub_22EA57988((_QWORD *)v10, v462, (uint64_t)v463))
  {
    return 1;
  }
  v322 = sub_22EF5F5D4(*(_QWORD *)(v10 + 88), v312, v425);
  v323 = v463;
  v324 = v462;
  if (v322)
  {
    v325 = (_QWORD *)v10;
    v326 = v231;
    return sub_22EA0E200(v325, v323, v324, v326, v7);
  }
  if (!sub_22F31D5A4((uint64_t)v463, v462, v425, v214))
    return 0;
  v213 = *(_QWORD *)(v10 + 72);
  v184 = v231;
  if ((*(_QWORD *)v213 & 0x100) == 0)
  {
LABEL_328:
    v215 = (unint64_t *)v462;
    if ((*(_BYTE *)(v213 + 228) & 1) == 0
      && (*(_BYTE *)(v462 + 82) & 0x30) != 0
      && (*((_BYTE *)v463 + 82) & 0x20) == 0
      && v435)
    {
      v216 = *(_QWORD *)(*(_QWORD *)(v462 + 48) & 0xFFFFFFFFFFFFFFF0);
      v217 = v216 && *(_BYTE *)(v216 + 16) == 26;
      if (v217
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v216 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
        && (v216 = sub_22F10CF48(v216)) != 0)
      {
        v218 = (unsigned __int16)(*(_QWORD *)(v216 + 16) >> 38);
      }
      else
      {
        v218 = 0;
      }
      v219 = *(_QWORD *)(v463[6] & 0xFFFFFFFFFFFFFFF0);
      v220 = v219 && *(_BYTE *)(v219 + 16) == 26;
      if (v220
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v219 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
        && (v219 = sub_22F10CF48(v219)) != 0)
      {
        v221 = (unsigned __int16)(*(_QWORD *)(v219 + 16) >> 38);
      }
      else
      {
        v221 = 0;
      }
      v215 = (unint64_t *)v462;
      if (v218 != v221)
      {
        if ((*(_BYTE *)(v462 + 82) & 0x10) != 0)
          v462 = (*(uint64_t (**)(void))(*(_QWORD *)v462 + 32))();
        sub_22E8FCA40((_QWORD *)v10, *((_DWORD *)v463 + 6), 0xBFFu, 0, (uint64_t)&v466);
        sub_22E890024((uint64_t)&v466, (uint64_t *)&v463);
        sub_22E903BEC((unsigned int *)&v466);
        v20 = *(_DWORD *)(v462 + 24);
        goto LABEL_348;
      }
    }
    v239 = v19;
    v240 = v463[10];
    if (((v240 >> 21) & 1) != (*((_BYTE *)v215 + 82) & 0x20) >> 5
      && (*((_BYTE *)v463 + 29) & 2) == 0
      && (*((_BYTE *)v215 + 29) & 2) == 0)
    {
      v241 = (v240 & 0x200000) != 0 ? v463 : v215;
      v242 = (v240 & 0x200000) != 0 ? v215 : v463;
      v243 = *(_QWORD *)(v241[6] & 0xFFFFFFFFFFFFFFF0);
      v244 = v243 && *(_BYTE *)(v243 + 16) == 26;
      if ((v244
         || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v243 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
         && (v243 = sub_22F10CF48(v243)) != 0)
        && (*(_DWORD *)(v243 + 20) & 0x3FFFC0) != 0)
      {
        v245 = v184;
        v246 = sub_22F1CF68C(*(_QWORD *)(*(_QWORD *)(v10 + 104) + 32), 0x1B5Bu, *((_DWORD *)v242 + 6), *(_QWORD *)(v10 + 104));
        if (v246 == 1
          && !sub_22EFC01DC((uint64_t)v242, 0)
          && (*((_BYTE *)v242 + 29) & 2) == 0
          && sub_22F1E3C34(*(_QWORD **)(v10 + 112), *((_DWORD *)v242 + 6), *((_DWORD *)v241 + 6)))
        {
          v247 = *(_QWORD *)(v10 + 88) + 2128;
          *(_QWORD *)&v475 = 0;
          *((_QWORD *)&v475 + 1) = v247;
          v476[0] = 6779;
          v248 = v242[7];
          v249 = v248 & 0xFFFFFFFFFFFFFFF8;
          if ((v248 & 4) != 0)
            v249 = *(_QWORD *)(v249 + 32);
          if (v249)
          {
            v250 = *(_QWORD *)v249;
            if ((*(_QWORD *)v249 & 0xFLL) == 0)
            {
              if (v250)
              {
                if (*(_BYTE *)(*(_QWORD *)(v250 & 0xFFFFFFFFFFFFFFF0) + 16) == 25)
                {
                  v251 = *(unsigned int *)(v249 + 16);
                  BYTE12(v467) = 0;
                  *(_QWORD *)((char *)&v467 + 4) = 0;
                  v470 = 0x400000000000000;
                  v469 = 0;
                  v466 = (void *)(v251 | (v251 << 32));
                  LOBYTE(v467) = 0;
                  __p = (void *)1684631414;
                  v471 = 0;
                  sub_22E6D82D0((uint64_t *)&v475, &v466);
                  if (SHIBYTE(v470) < 0)
                    operator delete(__p);
                }
              }
            }
          }
          sub_22E90379C((_QWORD *)v10, *((_DWORD *)v242 + 6), (uint64_t)&v475, 0, (uint64_t)v444);
          sub_22E903BEC(v444);
          if ((_QWORD)v475 && *((_QWORD *)&v475 + 1))
            sub_22E3BB10C(*((unint64_t *)&v475 + 1), v475);
        }
        if (sub_22EFC01DC((uint64_t)v241, 0) || (*((_BYTE *)v241 + 29) & 2) != 0)
        {
          v146 = v246 == 1;
          v184 = v245;
          if (!v146 && !sub_22EFC01DC((uint64_t)v242, 0) && (*((_BYTE *)v242 + 29) & 2) == 0)
          {
            v252 = *((_DWORD *)v242 + 6);
            v253 = (unsigned int *)v440;
            v254 = v440;
            v255 = (_QWORD *)v10;
            goto LABEL_524;
          }
        }
        else
        {
          if (sub_22F1E3C34(*(_QWORD **)(v10 + 112), *((_DWORD *)v241 + 6), *((_DWORD *)v242 + 6)))
          {
            v252 = *((_DWORD *)v242 + 6);
            v253 = (unsigned int *)v443;
            v254 = v443;
            v255 = (_QWORD *)v10;
LABEL_524:
            v329 = 6779;
LABEL_525:
            sub_22E8FCA40(v255, v252, v329, 0, (uint64_t)v254);
            sub_22E903BEC(v253);
            v184 = v245;
            goto LABEL_526;
          }
          sub_22E8FCA40((_QWORD *)v10, *((_DWORD *)v241 + 6), 0x1A7Bu, 0, (uint64_t)v442);
          sub_22E903BEC(v442);
          v146 = v246 == 1;
          v184 = v245;
          if (!v146 && !sub_22EFC01DC((uint64_t)v242, 0))
          {
            v252 = *((_DWORD *)v242 + 6);
            v253 = (unsigned int *)v441;
            v254 = v441;
            v255 = (_QWORD *)v10;
            v329 = 5646;
            goto LABEL_525;
          }
        }
      }
    }
LABEL_526:
    v19 = v239;
    if (sub_22F36EDA0(*(_QWORD *)(v10 + 88), v214, v425, 0))
    {
      v330 = *(_QWORD *)(v214 & 0xFFFFFFFFFFFFFFF0);
      if (!v330 || *(unsigned __int8 *)(v330 + 16) - 27 <= 0xFFFFFFFD)
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v330 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 <= 1)
          v330 = sub_22F10CF48(v330);
        else
          v330 = 0;
      }
      v331 = *(_QWORD *)(v425 & 0xFFFFFFFFFFFFFFF0);
      if (!v331 || *(unsigned __int8 *)(v331 + 16) - 27 <= 0xFFFFFFFD)
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v331 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 <= 1)
          v331 = sub_22F10CF48(*(_QWORD *)(v425 & 0xFFFFFFFFFFFFFFF0));
        else
          v331 = 0;
      }
      if (v7 && *(_BYTE *)(v331 + 16) == 25 && *(_BYTE *)(v330 + 16) == 26 && v330)
      {
        v332 = (uint64_t *)(v330 + 40);
        v333 = (_BYTE *)(v330 + 40 + 8 * (unsigned __int16)(*(_QWORD *)(v330 + 16) >> 38));
        v466 = (char *)&v467 + 8;
        *(_QWORD *)&v467 = 0x1000000000;
        sub_22E3D0148((uint64_t)&v466, (_BYTE *)(v330 + 40), v333);
        v334 = *(_QWORD *)(v10 + 88);
        v335 = *(_QWORD *)(v331 + 24);
        v336 = (uint64_t *)v466;
        v337 = v467;
        sub_22E4913B4(v330, (uint64_t)&v475);
        v338 = sub_22EF63D8C(v334, v335, v336, v337, &v475, 0);
        v339 = v463;
        v463[6] = v338;
        v339[10] |= 0x100000uLL;
        *(_QWORD *)&v475 = v476;
        *((_QWORD *)&v475 + 1) = 0x1000000000;
        v340 = (unsigned __int16)(*(_QWORD *)(v330 + 16) >> 38);
        if ((unsigned __int16)(*(_QWORD *)(v330 + 16) >> 38))
        {
          v341 = 8 * v340;
          do
          {
            if (v463)
              v342 = v463 + 9;
            else
              v342 = 0;
            v343 = sub_22EFBF080(*(_QWORD *)(v10 + 88), (uint64_t)v342, 0, 0, 0, *v332, 0, 0, 0);
            v344 = v343;
            v345 = DWORD2(v475);
            v346 = *(_DWORD *)(v343 + 96);
            *(_DWORD *)(v343 + 96) = v346 & 0xFFF01FFF;
            if (v345 >= 0xFF)
            {
              sub_22F3AC2B8(v343, v345);
              v345 = DWORD2(v475);
            }
            else
            {
              *(_DWORD *)(v343 + 96) = v346 & 0xF0001FFF | (v345 << 20);
            }
            *(_DWORD *)(v344 + 28) |= 0x200u;
            if (v345 >= HIDWORD(v475))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v345 = DWORD2(v475);
            }
            *(_QWORD *)(v475 + 8 * v345) = v344;
            v340 = ++DWORD2(v475);
            ++v332;
            v341 -= 8;
          }
          while (v341);
          v339 = v463;
          v352 = (_DWORD *)v475;
        }
        else
        {
          v352 = v476;
        }
        v184 = v433;
        if (!v339 || (v353 = v339, (*((_DWORD *)v339 + 7) & 0x7F) != 0x53))
        {
          v354 = v339[2];
          v355 = v354 & 0xFFFFFFFFFFFFFFF8;
          if ((v354 & 4) != 0)
            v355 = *(_QWORD *)v355;
          for (i = *(_WORD *)(v355 + 8) & 0x7F; i != 83; i = *(_WORD *)(v355 + 8) & 0x7F)
          {
            v357 = -40;
            if (i > 70)
            {
              if (i == 71)
              {
                v357 = -56;
                v184 = v433;
              }
              else
              {
                v184 = v433;
                if (i != 81)
                  goto LABEL_577;
              }
            }
            else
            {
              if (i > 0x18)
                goto LABEL_576;
              if (i == 16)
                goto LABEL_570;
              if (((1 << i) & 0x1066) != 0)
                goto LABEL_583;
              if (i == 24)
              {
LABEL_570:
                v357 = -48;
              }
              else
              {
LABEL_576:
                if (i != 70)
                {
LABEL_577:
                  v358 = i - 52;
                  if ((i - 33) >= 5)
                    v359 = -48;
                  else
                    v359 = -64;
                  if (v358 >= 6)
                    v357 = v359;
                  else
                    v357 = -72;
                  goto LABEL_583;
                }
                v357 = -64;
              }
            }
LABEL_583:
            v360 = *(_QWORD *)(v355 + v357 + 16);
            v355 = v360 & 0xFFFFFFFFFFFFFFF8;
            if ((v360 & 4) != 0)
              v355 = *(_QWORD *)v355;
          }
          v353 = (unint64_t *)(v355 - 40);
        }
        if (v340)
        {
          v361 = 8 * v340;
          v362 = (void *)sub_22E3CD3D4(v353[11] + 2032, 8 * v340, 3);
          v339[15] = (unint64_t)v362;
          memmove(v362, v352, v361);
          v352 = (_DWORD *)v475;
        }
        if (v352 != v476)
          free(v352);
        if (v466 != (char *)&v467 + 8)
          free(v466);
      }
      v323 = v463;
      v324 = v462;
      v325 = (_QWORD *)v10;
      v326 = v184;
      return sub_22EA0E200(v325, v323, v324, v326, v7);
    }
  }
  if (sub_22F369EB8(*(_QWORD *)(v10 + 88), v214, v425))
    return 0;
  v347 = v462;
  if ((*(_BYTE *)(*(_QWORD *)(v10 + 72) + 1) & 1) != 0 || (*(_BYTE *)(v462 + 82) & 0x30) == 0)
  {
    v288 = v434;
LABEL_554:
    if ((*(_BYTE *)(v347 + 29) & 2) != 0)
    {
      v349 = sub_22EFC01DC(v347, 0);
      if (v349)
      {
        if (v349 > 0x7E7)
        {
          v410 = *(uint64_t **)(*(_QWORD *)(v10 + 88) + 15208);
          v411 = v410[1];
          if (v411 + 2024 <= (unint64_t)v349)
          {
            v412 = v349 - v411 - 2024;
            v413 = v410[2];
          }
          else
          {
            v412 = v349 - 2024;
            v413 = *v410;
          }
          v350 = (char **)(v413 + 48 * v412);
        }
        else
        {
          v350 = &(&off_24FAC8C40)[6 * v349];
        }
        if (strchr(v350[2], 102))
        {
          sub_22E8FCA40((_QWORD *)v10, *((_DWORD *)v463 + 6), 0x1B1Cu, 0, (uint64_t)&v466);
          sub_22E890024((uint64_t)&v466, (uint64_t *)&v463);
          sub_22E903BEC((unsigned int *)&v466);
          sub_22E8FCA40((_QWORD *)v10, v288, 0x1770u, 0, (uint64_t)&v466);
          v351 = sub_22E890024((uint64_t)&v466, &v462);
          *(_QWORD *)&v475 = *(_QWORD *)(v462 + 48);
          sub_22E8901B8(v351, (uint64_t *)&v475);
          sub_22E903BEC((unsigned int *)&v466);
          return 0;
        }
        v19 = 6000;
      }
    }
    sub_22E8FCA40((_QWORD *)v10, *((_DWORD *)v463 + 6), 0xBFFu, 0, (uint64_t)&v466);
    *(_QWORD *)&v475 = v463[5];
    sub_22E894538((uint64_t)&v466, (uint64_t *)&v475);
LABEL_633:
    v290 = (unsigned int *)&v466;
    goto LABEL_640;
  }
  v348 = v19;
  if ((*((_BYTE *)v463 + 82) & 0x30) != 0)
    goto LABEL_552;
  v370 = *(_QWORD *)(v463[6] & 0xFFFFFFFFFFFFFFF0);
  if (v370)
    v371 = *(_BYTE *)(v370 + 16) == 26;
  else
    v371 = 0;
  if (!v371)
  {
    v288 = v434;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v370 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
      goto LABEL_554;
    v372 = sub_22F10CF48(*(_QWORD *)(v463[6] & 0xFFFFFFFFFFFFFFF0));
    v347 = v462;
    if (!v372)
      goto LABEL_554;
  }
  v373 = *(_QWORD *)(*(_QWORD *)(v347 + 48) & 0xFFFFFFFFFFFFFFF0);
  v374 = v373 && *(_BYTE *)(v373 + 16) == 26;
  if (v374
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v373 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v373 = sub_22F10CF48(v373)) != 0)
  {
    v375 = (unsigned __int16)(*(_QWORD *)(v373 + 16) >> 38);
  }
  else
  {
    v375 = 0;
  }
  if ((v376 = *(_QWORD *)(v463[6] & 0xFFFFFFFFFFFFFFF0)) != 0 && *(_BYTE *)(v376 + 16) == 26
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v376 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v376 = sub_22F10CF48(v376)) != 0)
  {
    v377 = (unsigned __int16)(*(_QWORD *)(v376 + 16) >> 38);
  }
  else
  {
    v377 = 0;
  }
  v347 = v462;
  if (v375 != v377)
  {
LABEL_552:
    v288 = v434;
    v19 = v348;
    goto LABEL_554;
  }
  *(_QWORD *)&v475 = v476;
  *((_QWORD *)&v475 + 1) = 0x1000000000;
  v466 = (char *)&v467 + 8;
  *(_QWORD *)&v467 = 0x1000000000;
  v437 = *(_QWORD *)(*(_QWORD *)(v462 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v437 || *(_BYTE *)(v437 + 16) != 26)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v437 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
      v437 = sub_22F10CF48(v437);
    else
      v437 = 0;
  }
  v394 = *(_QWORD *)(v463[6] & 0xFFFFFFFFFFFFFFF0);
  if (!v394 || *(_BYTE *)(v394 + 16) != 26)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v394 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
      v394 = sub_22F10CF48(v394);
    else
      v394 = 0;
  }
  v432 = sub_22EF6FF80(*(_QWORD *)(v10 + 88), *(_QWORD *)(v437 + 24), *(_QWORD *)(v394 + 24), 0, 0, 0);
  v395 = *(_QWORD *)(*(_QWORD *)(v462 + 48) & 0xFFFFFFFFFFFFFFF0);
  if ((v395 && *(_BYTE *)(v395 + 16) == 26
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v395 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
     && (v395 = sub_22F10CF48(v395)) != 0)
    && v432 >= 0x10)
  {
    v396 = *(_QWORD *)(v395 + 16);
    if ((v396 & 0x3FFFC000000000) != 0)
    {
      v397 = 0;
      v398 = v394 + 40;
      v399 = (unsigned __int16)(v396 >> 38);
      v49 = 1;
      while (1)
      {
        v400 = *(_QWORD *)(*(_QWORD *)(v462 + 120) + 8 * v397);
        v401 = *(_QWORD *)(v463[15] + 8 * v397);
        if (!sub_22F36EDA0(*(_QWORD *)(v10 + 88), *(_QWORD *)(v400 + 48), *(_QWORD *)(v398 + 8 * v397), 0))
        {
          if (!sub_22F36EDA0(*(_QWORD *)(v10 + 88), *(_QWORD *)(v400 + 48), *(_QWORD *)(v401 + 48), 1))
          {
            v409 = 0;
            goto LABEL_746;
          }
          *(_QWORD *)&v464 = v400;
          *((_QWORD *)&v464 + 1) = v401;
          v465 = *(_QWORD *)(v398 + 8 * v397);
          v404 = (char *)v466;
          if (v467 >= DWORD1(v467))
          {
            if (v466 <= &v464 && (char *)v466 + 24 * v467 > (char *)&v464)
            {
              v408 = (char *)&v464 - (_BYTE *)v466;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v404 = (char *)v466;
              v405 = (__int128 *)((char *)v466 + v408);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v405 = &v464;
              v404 = (char *)v466;
            }
          }
          else
          {
            v405 = &v464;
          }
          v406 = &v404[24 * v467];
          v407 = *v405;
          *((_QWORD *)v406 + 2) = *((_QWORD *)v405 + 2);
          *(_OWORD *)v406 = v407;
          LODWORD(v467) = v467 + 1;
        }
        v402 = *(_QWORD *)(v401 + 48);
        v403 = DWORD2(v475);
        if (DWORD2(v475) >= (unint64_t)HIDWORD(v475))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v403 = DWORD2(v475);
        }
        *(_QWORD *)(v475 + 8 * v403) = v402;
        ++DWORD2(v475);
        if (v399 == ++v397)
          goto LABEL_737;
      }
    }
  }
  if (v432 < 0x10)
  {
    v409 = 0;
    v49 = 1;
  }
  else
  {
LABEL_737:
    if ((_DWORD)v467)
    {
      v414 = 0;
      v415 = 0;
      do
      {
        sub_22E8FCA40((_QWORD *)v10, *(_DWORD *)(*(_QWORD *)((char *)v466 + v414 + 8) + 24), 0x14D1u, 0, (uint64_t)&v464);
        v416 = sub_22E8901B8((uint64_t)&v464, (uint64_t *)((char *)v466 + v414 + 16));
        v439 = *(_QWORD *)(*(_QWORD *)((char *)v466 + v414) + 48);
        sub_22E8901B8(v416, &v439);
        sub_22E903BEC((unsigned int *)&v464);
        v417 = *(_DWORD *)(*(_QWORD *)((char *)v466 + v414) + 24);
        if (v417)
        {
          sub_22E8FCA40((_QWORD *)v10, v417, 0x6Cu, 0, (uint64_t)v438);
          sub_22E903BEC(v438);
        }
        ++v415;
        v414 += 24;
      }
      while (v415 < v467);
    }
    if ((v7 & 1) != 0)
    {
      v418 = v463;
      v419 = *(_QWORD *)(v10 + 88);
      v420 = (uint64_t *)v475;
      v421 = DWORD2(v475);
      sub_22E4913B4(v437, (uint64_t)&v464);
      v418[6] = sub_22EF63D8C(v419, v432, v420, v421, &v464, 0);
    }
    v49 = sub_22EA0E200((_QWORD *)v10, v463, v462, v433, v7);
    v409 = 1;
  }
LABEL_746:
  if (v466 != (char *)&v467 + 8)
    free(v466);
  if ((_DWORD *)v475 != v476)
    free((void *)v475);
  if ((v409 & 1) == 0)
  {
    v347 = v462;
    goto LABEL_552;
  }
  return v49;
}

uint64_t sub_22EA0DDBC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;

  v2 = *(_QWORD *)(result + 56);
  if ((v2 & 4) == 0 || !*(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF8))
    return result;
  v4 = result;
  v5 = *(_QWORD *)(result + 16);
  v6 = (unint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8);
  v7 = v5 & 0xFFFFFFFFFFFFFFF8;
  if ((v5 & 4) != 0)
    v7 = *v6;
  v8 = sub_22EFCBB30(v7);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
  if ((v9 & 4) != 0)
    v10 = (_QWORD *)*v10;
  v11 = sub_22EFCBB30((unint64_t)v10);
  if (v11)
  {
    v12 = sub_22EFCC008(v8);
    result = sub_22EFCC008(v11);
    if (v12 == result)
      return result;
    v13 = *(_QWORD *)(v4 + 16);
    v6 = (unint64_t *)(v13 & 0xFFFFFFFFFFFFFFF8);
    if ((v13 & 4) == 0)
      goto LABEL_11;
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_11;
  }
  v6 = (unint64_t *)v6[1];
LABEL_11:
  v14 = v11 & 0xFFFFFFFFFFFFFFFBLL;
  *(_QWORD *)(v4 + 16) = v14;
  result = sub_22EFC80C4(v4, (uint64_t)v6);
  v15 = *(_DWORD *)(v4 + 28);
  if ((v15 & 0x7Eu) - 58 < 0xFFFFFFFA)
  {
    if ((v15 & 0x7Fu) - 67 < 0xFFFFFFF9)
      return result;
    result = sub_22EFB6870(v4);
    if (!result)
      return result;
LABEL_19:
    *(_QWORD *)(result + 16) = v14;
    return sub_22EFC80C4(result, (uint64_t)v6);
  }
  v16 = *(_QWORD *)(v4 + 144);
  if ((v16 & 6) == 0)
  {
    result = v16 & 0xFFFFFFFFFFFFFFF8;
    if ((v16 & 0xFFFFFFFFFFFFFFF8) != 0)
      goto LABEL_19;
  }
  return result;
}

void sub_22EA0DEEC(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  if ((*(_BYTE *)(a1 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a1);
    v3 = *(char **)v2;
    v4 = *(unsigned int *)(v2 + 8);
    if ((_DWORD)v4)
    {
      v5 = &v3[8 * v4];
      v6 = 8 * v4 - 8;
      v7 = *(char **)v2;
      v8 = *(char **)v2;
      while (1)
      {
        v9 = *(_QWORD *)v8;
        v8 += 8;
        if (*(_WORD *)(v9 + 32) == 193)
          break;
        v6 -= 8;
        v7 = v8;
        if (v8 == v5)
          goto LABEL_15;
      }
      if (v8 == v5)
      {
        v5 = v7;
      }
      else
      {
        v10 = 8;
        v5 = v7;
        do
        {
          v11 = *(_QWORD *)&v7[v10];
          if (*(_WORD *)(v11 + 32) != 193)
          {
            *(_QWORD *)v5 = v11;
            v5 += 8;
          }
          v10 += 8;
          v6 -= 8;
        }
        while (v6);
        v3 = *(char **)v2;
      }
    }
    else
    {
      v5 = *(char **)v2;
    }
LABEL_15:
    v12 = (unint64_t)(v5 - v3) >> 3;
    *(_DWORD *)(v2 + 8) = v12;
    if (!(_DWORD)v12)
      *(_DWORD *)(a1 + 28) &= ~0x100u;
  }
}

void sub_22EA0DFB8(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  if ((*(_BYTE *)(a1 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a1);
    v3 = *(char **)v2;
    v4 = *(unsigned int *)(v2 + 8);
    if ((_DWORD)v4)
    {
      v5 = &v3[8 * v4];
      v6 = 8 * v4 - 8;
      v7 = *(char **)v2;
      v8 = *(char **)v2;
      while (1)
      {
        v9 = *(_QWORD *)v8;
        v8 += 8;
        if (*(_WORD *)(v9 + 32) == 171)
          break;
        v6 -= 8;
        v7 = v8;
        if (v8 == v5)
          goto LABEL_15;
      }
      if (v8 == v5)
      {
        v5 = v7;
      }
      else
      {
        v10 = 8;
        v5 = v7;
        do
        {
          v11 = *(_QWORD *)&v7[v10];
          if (*(_WORD *)(v11 + 32) != 171)
          {
            *(_QWORD *)v5 = v11;
            v5 += 8;
          }
          v10 += 8;
          v6 -= 8;
        }
        while (v6);
        v3 = *(char **)v2;
      }
    }
    else
    {
      v5 = *(char **)v2;
    }
LABEL_15:
    v12 = (unint64_t)(v5 - v3) >> 3;
    *(_DWORD *)(v2 + 8) = v12;
    if (!(_DWORD)v12)
      *(_DWORD *)(a1 + 28) &= ~0x100u;
  }
}

BOOL sub_22EA0E084(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 492)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

BOOL sub_22EA0E0E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 181)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22EA0E144(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  BOOL v4;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = (_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8);
  if ((v1 & 4) != 0)
    v2 = (_QWORD *)v2[4];
  if (!v2)
    v2 = (_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(*v2 & 0xFFFFFFFFFFFFFFF0);
  if (v3)
    v4 = *(unsigned __int8 *)(v3 + 16) - 27 > 0xFFFFFFFD;
  else
    v4 = 0;
  if (!v4)
    v3 = sub_22F10CF48(v3);
  return *(_QWORD *)(v3 + 24);
}

BOOL sub_22EA0E1A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 138)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22EA0E200(_QWORD *a1, unint64_t *a2, unint64_t a3, uint64_t *a4, int a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  unsigned int v26;
  uint64_t j;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t result;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  __int16 v38;
  __int16 v39;
  unsigned int v40[24];

  sub_22EA084D0((uint64_t)a1, (unint64_t)a2, (_BYTE *)a3, 1);
  if ((*(_BYTE *)(a3 + 82) & 8) != 0)
    sub_22EFBFA74((unint64_t)a2, 1);
  v10 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a3 + 112) + 104), *(_QWORD *)(a3 + 112));
  if (sub_22EFC9084(v10, 0))
  {
    v11 = (*(uint64_t (**)(unint64_t *))(*a2 + 32))(a2);
    *(_DWORD *)(v11 + 28) |= 0x400u;
  }
  v12 = *(_QWORD *)(a2[6] & 0xFFFFFFFFFFFFFFF0);
  if (v12)
    v13 = *(_BYTE *)(v12 + 16) == 26;
  else
    v13 = 0;
  if (v13
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v12 = sub_22F10CF48(v12)) != 0)
  {
    v14 = (unsigned __int16)(*(_QWORD *)(v12 + 16) >> 38);
  }
  else
  {
    v14 = 0;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v15)
    v16 = *(_BYTE *)(v15 + 16) == 26;
  else
    v16 = 0;
  if (v16
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v15 = sub_22F10CF48(v15)) != 0)
  {
    v17 = (unsigned __int16)(*(_QWORD *)(v15 + 16) >> 38);
  }
  else
  {
    v17 = 0;
  }
  if (v14 == v17
    && ((v18 = *(_QWORD *)(a2[6] & 0xFFFFFFFFFFFFFFF0)) != 0 && *(_BYTE *)(v18 + 16) == 26
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
     && (v18 = sub_22F10CF48(v18)) != 0))
  {
    v19 = *(_QWORD *)(v18 + 16);
    if ((v19 & 0x3FFFC000000000) != 0)
    {
      v20 = 0;
      v21 = (unsigned __int16)(v19 >> 38);
      do
      {
        v22 = *(_QWORD *)(a2[15] + 8 * v20);
        v23 = *(_QWORD *)(*(_QWORD *)(a3 + 120) + 8 * v20);
        sub_22EA0E584(v22, v23, a1);
        for (i = *(_QWORD *)(*(_QWORD *)(v23 + 48) & 0xFFFFFFFFFFFFFFF0); ; i = *(_QWORD *)(v25 + 40))
        {
          v25 = sub_22F10D774(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0));
          if (!v25)
            break;
          v26 = (*(_DWORD *)(v25 + 16) >> 19) - 33;
          if (v26 < 4)
          {
            v37 = 0x3010200u >> (8 * v26);
            v35 = *(_QWORD *)(v22 + 48);
            for (j = *(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0); ; j = *(_QWORD *)(v28 + 40))
            {
              v28 = sub_22F10D774(*(_QWORD *)(j & 0xFFFFFFFFFFFFFFF0));
              if (!v28)
              {
                *(_QWORD *)(v22 + 48) = sub_22F369798(a1[11], dword_22F46A4D0[v37 & 3], v35, v35);
                goto LABEL_31;
              }
              v29 = (*(_DWORD *)(v28 + 16) >> 19) - 33;
              if (v29 < 4)
                break;
            }
            v36 = 0x3010200u >> (8 * v29);
            if (v37 != v36)
            {
              sub_22E8FCA40(a1, *(_DWORD *)(v22 + 24), 0x1A53u, 0, (uint64_t)v40);
              v30 = (*(_DWORD *)(v22 + 96) >> 19) & (*(_DWORD *)(v22 + 96) << 19 >> 31);
              LOBYTE(v39) = v36;
              HIBYTE(v39) = v30;
              v31 = sub_22F2F3884((uint64_t)v40, &v39);
              v32 = (*(_DWORD *)(v23 + 96) >> 19) & (*(_DWORD *)(v23 + 96) << 19 >> 31);
              LOBYTE(v38) = v37;
              HIBYTE(v38) = v32;
              sub_22F2F3884(v31, &v38);
              sub_22E903BEC(v40);
              sub_22E8FCA40(a1, *(_DWORD *)(v23 + 24), 0x6Cu, 0, (uint64_t)v40);
              sub_22E903BEC(v40);
            }
            break;
          }
        }
LABEL_31:
        ++v20;
      }
      while (v20 != v21);
    }
  }
  if ((*(_BYTE *)(a1[9] + 1) & 1) != 0)
    return sub_22EAA499C((uint64_t)a1, (uint64_t)a2, a3, a4);
  v33 = sub_22EF6FF80(a1[11], *(_QWORD *)(a3 + 48), a2[6], 0, 0, 0);
  result = 0;
  if (v33 >= 0x10)
  {
    if (a5)
    {
      result = 0;
      a2[6] = v33;
    }
  }
  return result;
}

int32x2_t sub_22EA0E584(unint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  int32x2_t result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int i;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int j;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  int v46;
  void *v47[2];
  _QWORD v48[11];

  v48[10] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a1 + 29) & 1) != 0)
  {
    *(double *)&result = sub_22EFC8E88(a1);
    v8 = *(uint64_t **)v6;
    v9 = *(unsigned int *)(v6 + 8);
    v10 = *(uint64_t **)v6;
    if ((_DWORD)v9)
    {
      v11 = 8 * v9;
      v10 = *(uint64_t **)v6;
      while (*(_WORD *)(*v10 + 32) != 79)
      {
        ++v10;
        v11 -= 8;
        if (!v11)
          goto LABEL_8;
      }
    }
    if (v10 != &v8[v9])
    {
      do
      {
        v13 = *v8++;
        v12 = v13;
      }
      while (*(_WORD *)(v13 + 32) != 79);
      if (!sub_22F31D630(a2))
      {
        sub_22E8FCA40(a3, *(_DWORD *)(v12 + 16), 0xBC6u, 0, (uint64_t)v47);
        v46 = 1;
        sub_22E8900C4((uint64_t)v47, &v46);
        sub_22E903BEC((unsigned int *)v47);
        v14 = *(_QWORD *)(a2 + 16);
        v15 = v14 & 0xFFFFFFFFFFFFFFF8;
        v16 = v14 & 0xFFFFFFFFFFFFFFF8;
        if ((v14 & 4) != 0)
          v16 = *(_QWORD *)v15;
        if (v16)
          v17 = v16 - 72;
        else
          v17 = 0;
        v18 = *(_QWORD *)(v17 + 112);
        v19 = (*(_DWORD *)(a2 + 96) >> 20);
        if (v19 == 255)
        {
          v20 = a2;
          if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
          {
            if ((v14 & 4) != 0)
              v15 = *(_QWORD *)v15;
            for (i = *(_WORD *)(v15 + 8) & 0x7F; i != 83; i = *(_WORD *)(v15 + 8) & 0x7F)
            {
              v22 = -40;
              if (i > 70)
              {
                if (i == 71)
                {
                  v22 = -56;
                }
                else if (i != 81)
                {
                  goto LABEL_32;
                }
              }
              else
              {
                if (i > 0x18)
                  goto LABEL_31;
                if (i == 16)
                  goto LABEL_25;
                if (((1 << i) & 0x1066) != 0)
                  goto LABEL_38;
                if (i == 24)
                {
LABEL_25:
                  v22 = -48;
                }
                else
                {
LABEL_31:
                  if (i != 70)
                  {
LABEL_32:
                    v23 = i - 52;
                    if ((i - 33) >= 5)
                      v24 = -48;
                    else
                      v24 = -64;
                    if (v23 >= 6)
                      v22 = v24;
                    else
                      v22 = -72;
                    goto LABEL_38;
                  }
                  v22 = -64;
                }
              }
LABEL_38:
              v25 = *(_QWORD *)(v15 + v22 + 16);
              v15 = v25 & 0xFFFFFFFFFFFFFFF8;
              if ((v25 & 4) != 0)
                v15 = *(_QWORD *)v15;
            }
            v20 = v15 - 40;
          }
          v19 = sub_22F36F2CC(*(_QWORD *)(v20 + 88), a2);
        }
        sub_22E8FCA40(a3, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 120) + 8 * v19) + 24), 0x155Fu, 0, (uint64_t)v47);
        v46 = 1;
        sub_22E8900C4((uint64_t)v47, &v46);
        sub_22E903BEC((unsigned int *)v47);
      }
    }
  }
LABEL_8:
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    v26 = *(_DWORD *)(a1 + 28);
    v27 = (v26 >> 8) & 1;
    if ((v26 & 0x100) == 0)
    {
      v47[0] = v48;
      v47[1] = (void *)0x400000000;
      v28 = v26 & 0x7F;
      v29 = a1;
      if (v28 != 83)
      {
        v30 = *(_QWORD *)(a1 + 16);
        v31 = v30 & 0xFFFFFFFFFFFFFFF8;
        if ((v30 & 4) != 0)
          v31 = *(_QWORD *)v31;
        for (j = *(_WORD *)(v31 + 8) & 0x7F; j != 83; j = *(_WORD *)(v31 + 8) & 0x7F)
        {
          v33 = -40;
          if (j > 70)
          {
            if (j == 71)
            {
              v33 = -56;
            }
            else if (j != 81)
            {
              goto LABEL_59;
            }
          }
          else
          {
            if (j > 0x18)
              goto LABEL_58;
            if (j == 16)
              goto LABEL_52;
            if (((1 << j) & 0x1066) != 0)
              goto LABEL_65;
            if (j == 24)
            {
LABEL_52:
              v33 = -48;
            }
            else
            {
LABEL_58:
              if (j != 70)
              {
LABEL_59:
                v34 = j - 52;
                if ((j - 33) >= 5)
                  v35 = -48;
                else
                  v35 = -64;
                if (v34 >= 6)
                  v33 = v35;
                else
                  v33 = -72;
                goto LABEL_65;
              }
              v33 = -64;
            }
          }
LABEL_65:
          v36 = *(_QWORD *)(v31 + v33 + 16);
          v31 = v36 & 0xFFFFFFFFFFFFFFF8;
          if ((v36 & 4) != 0)
            v31 = *(_QWORD *)v31;
        }
        v29 = v31 - 40;
      }
      sub_22EFCA91C(a1, (uint64_t)v47, *(_QWORD *)(v29 + 88));
      if (v47[0] != v48)
        free(v47[0]);
    }
    v37 = (uint64_t *)sub_22F255ABC(a2);
    v39 = v38;
    while (1)
    {
      v40 = v37;
      if (v37 >= v39)
      {
        if (v37 == v39)
          break;
        v41 = v39;
        while (*(unsigned __int16 *)(*v41 + 32) - 73 >= 0xD)
        {
          if (++v41 == v37)
            goto LABEL_90;
        }
        v40 = v37;
      }
      else
      {
        while (*(unsigned __int16 *)(*v40 + 32) - 73 >= 0xD)
        {
          if (++v40 == v39)
            goto LABEL_90;
        }
        v41 = v39;
      }
      if (v40 == v41)
        break;
      do
      {
        v43 = *v37++;
        v42 = v43;
      }
      while (*(unsigned __int16 *)(v43 + 32) - 73 > 0xC);
      if (!sub_22EA404D8(a1, v42))
      {
        v44 = sub_22EF9C5AC(v42);
        v45 = *(_WORD *)(v44 + 32);
        *(_BYTE *)(v44 + 34) |= 1u;
        *(_WORD *)(v44 + 32) = v45;
        sub_22EFCA95C(a1, v44);
        LOBYTE(v27) = 1;
      }
    }
LABEL_90:
    if ((v27 & 1) == 0)
      return sub_22F3B12BC(a1);
  }
  return result;
}

unint64_t sub_22EA0EA3C(unint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  unint64_t v20;
  char v21;

  if ((*(_BYTE *)(a2 + 28) & 0x80) != 0 || (*(_BYTE *)(a3 + 28) & 0x80) != 0)
    return result;
  v7 = result;
  if ((*(_BYTE *)(*(_QWORD *)(result + 72) + 1) & 1) == 0)
  {
    result = sub_22EF6FF80(*(_QWORD *)(result + 88), *(_QWORD *)(a2 + 48), *(_QWORD *)(a3 + 48), 0, 0, 0);
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0);
  v21 = 0;
  result = sub_22F110500((uint64_t)&v21, v9);
  if (result && *(_QWORD *)(result + 24) <= 0xFuLL && (*(_BYTE *)(result + 17) & 4) == 0)
    return result;
  v10 = *(_QWORD *)(a3 + 48);
  if ((*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 8) | v8 & 7) == (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFF0) + 8) | v10 & 7))
    return sub_22F327964(v7, a2, a3);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu)
     - 2 > 3
    || (v11 & 0xFEu) - 2 > 3)
  {
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                    + 16) == 32
      && v11 == 32)
    {
      result = sub_22EF71EC8(*(_QWORD *)(v7 + 88), v8, v10);
      goto LABEL_5;
    }
    goto LABEL_6;
  }
  v12 = sub_22EF5C728(*(_QWORD *)(v7 + 88), *(_QWORD *)(a3 + 48));
  v13 = sub_22EF5C728(*(_QWORD *)(v7 + 88), *(_QWORD *)(a2 + 48));
  v14 = v13;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 4
    && (*(_BYTE *)(v13 + 17) & 4) == 0)
  {
    v15 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a3 + 80) + 72), *(_QWORD *)(a3 + 80));
    if (v15)
    {
      v16 = v15;
      while (1)
      {
        v17 = *(_QWORD *)(*(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 4
          && (*(_BYTE *)(v17 + 17) & 4) == 0
          && (*(_QWORD *)(a2 + 48) & 7 | *(_QWORD *)((*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8)) != (*(_QWORD *)((*(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(v16 + 48) & 7))
        {
          break;
        }
        if ((*(_BYTE *)(v16 + 72) & 3) == 0)
        {
          v16 = sub_22E3CD31C((uint64_t *)(v16 + 72), v16);
          if (v16)
            continue;
        }
        goto LABEL_27;
      }
      v19 = (_QWORD *)v7;
      v20 = a2;
      return sub_22EA0EDE0(v19, v20, v16);
    }
  }
LABEL_27:
  v18 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v18 != 4 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
  {
    if ((v18 & 0xFEu) - 2 <= 3
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 4
      && (*(_QWORD *)((*(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(v12 + 32) & 7) == (*(_QWORD *)((*(_QWORD *)(v14 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(v14 + 32) & 7))
    {
      result = *(_QWORD *)(a3 + 48);
      goto LABEL_5;
    }
LABEL_6:
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
      || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
    {
      result = sub_22E3CEC2C(a2);
      if ((_DWORD)result)
      {
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
        {
          if (a4)
            *(_QWORD *)(a2 + 48) = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 16832);
        }
        return result;
      }
    }
    v19 = (_QWORD *)v7;
    v20 = a2;
    v16 = a3;
    return sub_22EA0EDE0(v19, v20, v16);
  }
  if ((*(_QWORD *)((*(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(v12 + 32) & 7) != (*(_QWORD *)((*(_QWORD *)(v14 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(v14 + 32) & 7))
    goto LABEL_6;
  result = *(_QWORD *)(a2 + 48);
LABEL_5:
  if (result <= 0xF)
    goto LABEL_6;
  if (a4)
    *(_QWORD *)(a2 + 48) = result;
  return result;
}

uint64_t sub_22EA0EDE0(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int i;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v20[24];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24[24];

  v6 = *(_DWORD *)(a2 + 24);
  if (!a2 || (v7 = a2, (*(_DWORD *)(a2 + 28) & 0x7F) != 0x53))
  {
    v8 = *(_QWORD *)(a2 + 16);
    v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    if ((v8 & 4) != 0)
      v9 = *(_QWORD *)v9;
    for (i = *(_WORD *)(v9 + 8) & 0x7F; i != 83; i = *(_WORD *)(v9 + 8) & 0x7F)
    {
      v11 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v11 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_16;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_15;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_22;
        if (i == 24)
        {
LABEL_9:
          v11 = -48;
        }
        else
        {
LABEL_15:
          if (i != 70)
          {
LABEL_16:
            v12 = i - 52;
            if ((i - 33) >= 5)
              v13 = -48;
            else
              v13 = -64;
            if (v12 >= 6)
              v11 = v13;
            else
              v11 = -72;
            goto LABEL_22;
          }
          v11 = -64;
        }
      }
LABEL_22:
      v14 = *(_QWORD *)(v9 + v11 + 16);
      v9 = v14 & 0xFFFFFFFFFFFFFFF8;
      if ((v14 & 4) != 0)
        v9 = *(_QWORD *)v9;
    }
    v7 = v9 - 40;
  }
  if (sub_22EFBBF74(a2, *(_QWORD *)(v7 + 88)))
    v15 = 4631;
  else
    v15 = 4626;
  sub_22E8FCA40(a1, v6, v15, 0, (uint64_t)v24);
  v23 = *(_QWORD *)(a2 + 40);
  v16 = sub_22E894538((uint64_t)v24, &v23);
  v22 = *(_QWORD *)(a2 + 48);
  v17 = sub_22E8901B8(v16, &v22);
  v21 = *(_QWORD *)(a3 + 48);
  sub_22E8901B8(v17, &v21);
  sub_22E903BEC(v24);
  v18 = sub_22EA0F0EC(a3, a2);
  sub_22E8FCA40(a1, SHIDWORD(v18), v18, 0, (uint64_t)v20);
  sub_22E903BEC(v20);
  return sub_22EFC77E8(a2, 1);
}

BOOL sub_22EA0EFC8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;

  if (a4)
    return 0;
  if ((*(_BYTE *)(a1 + 1) & 1) != 0)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x40 && (*(_BYTE *)(a2 + 98) & 2) != 0)
      return 1;
    v12 = *(_QWORD *)(a3 + 16);
    v13 = v12 & 0xFFFFFFFFFFFFFFF8;
    if ((v12 & 4) != 0)
      v13 = *(_QWORD *)(v13 + 8);
    v14 = *(_WORD *)(v13 + 8) & 0x7F;
    v15 = v14 > 0x18 || ((1 << v14) & 0x1000006) == 0;
    if (!v15 || v14 - 52 < 6)
      return 0;
    v16 = *(_QWORD *)(a2 + 16);
    v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    if ((v16 & 4) != 0)
      v17 = *(_QWORD *)(v17 + 8);
    v18 = *(_WORD *)(v17 + 8) & 0x7F;
    if (v18 <= 0x18 && ((1 << v18) & 0x1000006) != 0)
      return 0;
    return v18 - 58 < 0xFFFFFFFA;
  }
  else
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    v7 = v5 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 4) != 0)
      v7 = *(_QWORD *)(v6 + 8);
    v8 = *(_WORD *)(v7 + 8) & 0x7F;
    v9 = v8 > 0x18 || ((1 << v8) & 0x1000006) == 0;
    if (v9 && v8 - 52 > 5)
      return 1;
    if ((v5 & 4) != 0)
      v6 = *(_QWORD *)(v6 + 8);
    v10 = *(_QWORD *)(a2 + 16);
    v11 = v10 & 0xFFFFFFFFFFFFFFF8;
    if ((v10 & 4) != 0)
      v11 = *(_QWORD *)(v11 + 8);
    return v6 == v11;
  }
}

unint64_t sub_22EA0F0EC(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int i;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v4 = *(unsigned int *)(a1 + 24);
  if (!a1 || (v5 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    if ((v6 & 4) != 0)
      v7 = *(_QWORD *)v7;
    for (i = *(_WORD *)(v7 + 8) & 0x7F; i != 83; i = *(_WORD *)(v7 + 8) & 0x7F)
    {
      v9 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v9 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_16;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_15;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_22;
        if (i == 24)
        {
LABEL_9:
          v9 = -48;
        }
        else
        {
LABEL_15:
          if (i != 70)
          {
LABEL_16:
            v10 = i - 52;
            if ((i - 33) >= 5)
              v11 = -48;
            else
              v11 = -64;
            if (v10 >= 6)
              v9 = v11;
            else
              v9 = -72;
            goto LABEL_22;
          }
          v9 = -64;
        }
      }
LABEL_22:
      v12 = *(_QWORD *)(v7 + v9 + 16);
      v7 = v12 & 0xFFFFFFFFFFFFFFF8;
      if ((v12 & 4) != 0)
        v7 = *(_QWORD *)v7;
    }
    v5 = v7 - 40;
  }
  if (sub_22EFBBF74(a1, *(_QWORD *)(v5 + 88)))
  {
    v13 = 109;
  }
  else if ((*(_DWORD *)(a1 + 28) & 0x200) != 0)
  {
    v13 = 110;
    if ((*(_DWORD *)(a1 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
    {
      if (sub_22EFC01DC(a1, 0))
        v13 = 6000;
      else
        v13 = 110;
    }
    if (!(_DWORD)v4)
      v4 = *(unsigned int *)(a2 + 24);
  }
  else
  {
    v13 = 108;
  }
  return v13 | (unint64_t)(v4 << 32);
}

uint64_t sub_22EA0F280(unint64_t *a1, uint64_t a2)
{
  unint64_t *v3;
  uint64_t v5;
  unint64_t v6;

  if (a2)
  {
    v5 = *(_QWORD *)(a2 + 72);
    a1[1] = v5;
    v6 = sub_22E3CD31C((uint64_t *)(v5 + 64), v5);
    *a1 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    *((_DWORD *)a1 - 9) |= *(_DWORD *)(v6 + 28) & 0x260000;
    v3 = (unint64_t *)a1[1];
  }
  else
  {
    v3 = a1 - 8;
    a1[1] = (unint64_t)(a1 - 8);
  }
  return sub_22E7B7A74((uint64_t)(v3 + 8), (uint64_t)(a1 - 8));
}

BOOL sub_22EA0F2E8(_QWORD **a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  _QWORD *v7;
  const void **v8;
  const void *v9;
  const void **v10;
  const void *v11;
  size_t v12;
  void **p_dst;
  size_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void *__p[2];
  char v23;
  void **__dst;
  size_t v25;
  unint64_t v26;
  unsigned int v27[24];

  v3 = a3;
  if (!a3)
    return v3 != 0;
  v7 = *a1;
  if (!a2)
  {
    sub_22E8FCA40(*a1, a3, 0x17A9u, 0, (uint64_t)v27);
    v8 = (const void **)a1[1];
    v9 = *v8;
    if (!*v8)
    {
      __dst = 0;
      v25 = 0;
      v26 = 0;
LABEL_21:
      sub_22F2F3734((uint64_t)v27, (void **)&__dst);
      if (SHIBYTE(v26) < 0)
        operator delete(__dst);
      sub_22E903BEC(v27);
      return v3 != 0;
    }
    v12 = (size_t)v8[1];
    if (v12 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v12 >= 0x17)
      {
        v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v16 = v12 | 7;
        v17 = v16 + 1;
        p_dst = (void **)operator new(v16 + 1);
        v25 = v12;
        v26 = v17 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v26) = v8[1];
        p_dst = (void **)&__dst;
        if (!v12)
          goto LABEL_20;
      }
      memmove(p_dst, v9, v12);
LABEL_20:
      *((_BYTE *)p_dst + v12) = 0;
      goto LABEL_21;
    }
LABEL_35:
    abort();
  }
  sub_22E8FCA40(*a1, a3, 0x17AAu, 0, (uint64_t)v27);
  v10 = (const void **)a1[1];
  v11 = *v10;
  if (!*v10)
  {
    __dst = 0;
    v25 = 0;
    v26 = 0;
    goto LABEL_29;
  }
  v14 = (size_t)v10[1];
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_35;
  if (v14 >= 0x17)
  {
    v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v18 = v14 | 7;
    v19 = v18 + 1;
    v15 = (void **)operator new(v18 + 1);
    v25 = v14;
    v26 = v19 | 0x8000000000000000;
    __dst = v15;
  }
  else
  {
    HIBYTE(v26) = v10[1];
    v15 = (void **)&__dst;
    if (!v14)
      goto LABEL_28;
  }
  memmove(v15, v11, v14);
LABEL_28:
  *((_BYTE *)v15 + v14) = 0;
LABEL_29:
  v20 = sub_22F2F3734((uint64_t)v27, (void **)&__dst);
  sub_22F1D8A24((uint64_t *)a2, 0, __p);
  sub_22F2F3734(v20, __p);
  if (v23 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__dst);
  sub_22E903BEC(v27);
  v21 = *(_DWORD *)(a2 + 24);
  if (v21)
  {
    sub_22E8FCA40(v7, v21, 0x15A7u, 0, (uint64_t)v27);
    sub_22F1D8A24((uint64_t *)a2, 0, &__dst);
    goto LABEL_21;
  }
  return v3 != 0;
}

unint64_t sub_22EA0F52C(unint64_t a1, uint64_t a2, int a3, unsigned int *a4, const void *a5, unint64_t a6, int a7, unint64_t *a8)
{
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  int *v20;
  unint64_t *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  int v98;
  int v99;
  uint64_t v100;
  _QWORD *v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  int v105;
  _QWORD *v106;
  int v107;
  _QWORD *v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  int v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  char v123;
  uint64_t v124;
  _QWORD *v125;
  unint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  unsigned int v152;
  int v153;
  _BYTE v154[96];
  uint64_t v155;
  char v156;
  uint64_t v157;
  char v158;
  void *v159;
  _QWORD v160[8];
  char *v161;
  char v162;
  uint64_t v163;
  char v164;
  void *__p;
  uint64_t v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  void *v170[2];
  _QWORD v171[2];
  unsigned int *v172;
  __int128 v173;
  __int128 v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  __int128 v180;
  int v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  __int16 v185;
  __int128 v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;

  v192 = *MEMORY[0x24BDAC8D0];
  v16 = *(_QWORD *)a4;
  if (((*(_QWORD *)a4 >> 12) & 0x3F) - 23 > 4)
  {
    v153 = a3;
    v17 = 0;
    goto LABEL_10;
  }
  v17 = *((_QWORD *)a4 + 1);
  if (!v17)
    return v17;
  v18 = *((_QWORD *)a4 + 1);
  if ((*(_DWORD *)(v17 + 28) & 0x7Fu) - 33 >= 5)
  {
    if ((*(_DWORD *)(v17 + 28) & 0x7F) == 0x1C)
    {
      v18 = *(_QWORD *)(v17 + 48);
      if (v18)
        goto LABEL_6;
      v153 = a3;
LABEL_11:
      v19 = 1;
      if ((v16 & 0x4000000) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    v153 = a3;
LABEL_10:
    v18 = 0;
    goto LABEL_11;
  }
LABEL_6:
  sub_22EA10BEC((_QWORD *)a1, v18, a2);
  *(_DWORD *)(v18 + 72) |= 0x80000u;
  if ((*(_BYTE *)(v18 + 28) & 0x80) != 0)
    return v18;
  v153 = a3;
  v19 = 0;
  v16 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 0x4000000) != 0)
  {
LABEL_12:
    sub_22E8FCA40((_QWORD *)a1, a4[37], 0x1379u, 0, (uint64_t)&v172);
    v161 = (char *)*((_QWORD *)a4 + 11);
    sub_22E8906A0((uint64_t)&v172, (uint64_t *)&v161);
    sub_22E903BEC((unsigned int *)&v172);
    v16 = *(_QWORD *)a4;
  }
LABEL_13:
  if ((v16 & 0x300000000) != 0)
  {
    if ((v16 & 0x100000000) != 0)
      v20 = (int *)(a4 + 41);
    else
      v20 = (int *)(a4 + 46);
    sub_22E8FCA40((_QWORD *)a1, *v20, 0xE2Au, 0, (uint64_t)&v172);
    LODWORD(v161) = (**(_DWORD **)(a1 + 72) >> 11) & 1;
    sub_22E89519C((uint64_t)&v172, (unsigned int *)&v161);
    sub_22E903BEC((unsigned int *)&v172);
    v16 = *(_QWORD *)a4;
  }
  if ((v16 & 0x6000000000) != 0)
  {
    if ((v19 & 1) != 0)
    {
      sub_22E8FCA40((_QWORD *)a1, a4[49], 0xC15u, 0, (uint64_t)&v172);
      LODWORD(v161) = (*(_QWORD *)a4 >> 37) & 3;
      v21 = (unint64_t *)&v172;
      v22 = (int *)&v161;
    }
    else
    {
      sub_22E8FCA40((_QWORD *)a1, a4[49], 0xC0Eu, 0, (uint64_t)&v172);
      LODWORD(v161) = dword_22F46A284[(((unint64_t)*a4 >> 12) & 0x3F) - 23];
      v21 = (unint64_t *)sub_22E89519C((uint64_t)&v172, (unsigned int *)&v161);
      LODWORD(v155) = (*(_QWORD *)a4 >> 37) & 3;
      v22 = (int *)&v155;
    }
    sub_22E8900C4((uint64_t)v21, v22);
LABEL_27:
    sub_22E903BEC((unsigned int *)&v172);
    return v17;
  }
  sub_22EA11438((unsigned int *)a1, (uint64_t)a4);
  v28 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 0x1000000000) != 0)
  {
    if (!v17 || v18)
      return sub_22F329770((_QWORD *)a1, a2, (uint64_t *)a4, a5, a6, v25, v26, v27);
    return 0;
  }
  if (a6)
  {
    v29 = (*(_DWORD *)(*((_QWORD *)a5 + a6 - 1) + 12) & 0x1FFFFFFF) == 0;
    if ((v19 & 1) != 0)
      goto LABEL_47;
  }
  else
  {
    v29 = 0;
    if ((v19 & 1) != 0)
    {
LABEL_47:
      LOBYTE(v34) = 1;
      goto LABEL_48;
    }
  }
  v32 = a4[14];
  if (a4[15])
    v33 = v32 == 0;
  else
    v33 = 1;
  if ((!v33 || *((_QWORD *)a4 + 8))
    && ((*(unsigned __int8 *)(v18 + 74) | a7 | v29) & 1) == 0
    && (*(_DWORD *)(v18 + 28) & 0x7F) != 0x25)
  {
    sub_22E8FCA40((_QWORD *)a1, v32, 0x126Cu, 0, (uint64_t)&v172);
    LODWORD(v155) = dword_22F46A284[(((unint64_t)*a4 >> 12) & 0x3F) - 23];
    v67 = sub_22E89519C((uint64_t)&v172, (unsigned int *)&v155);
    v161 = (char *)*((_QWORD *)a4 + 7);
    sub_22E8906A0(v67, (uint64_t *)&v161);
    sub_22E903BEC((unsigned int *)&v172);
    return 0;
  }
  if ((*(_DWORD *)(v18 + 28) & 0x7Eu) - 34 > 3 || *(_QWORD *)(v18 + 40))
    goto LABEL_47;
  LOBYTE(v34) = 1;
  if ((*(_QWORD *)a4 & 7) != 1 && (*(_DWORD *)(v18 + 72) & 0x10000) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) == 0)
    {
      v45 = *(_QWORD *)(v18 + 16);
      v46 = v45 & 0xFFFFFFFFFFFFFFF8;
      if ((v45 & 4) != 0)
        v46 = *(_QWORD *)v46;
      if ((*(_WORD *)(v46 + 8) & 0x7Eu) - 34 > 3)
      {
        LOBYTE(v34) = 0;
        goto LABEL_48;
      }
    }
    v47 = *(_WORD *)(*(_QWORD *)(a1 + 216) + 8) & 0x7F;
    if (v47 <= 0x18 && ((1 << v47) & 0x1000006) != 0 || v47 - 52 <= 5)
      *a8 = v18;
    v48 = *(_QWORD *)(v18 + 16);
    v49 = v48 & 0xFFFFFFFFFFFFFFF8;
    if ((v48 & 4) != 0)
      v49 = *(_QWORD *)v49;
    v50 = *(_DWORD *)(v18 + 72);
    v51 = **(_QWORD **)(a1 + 72);
    if ((v50 & 0xE000) == 0x4000)
    {
      if ((v51 & 0x102) != 0)
        goto LABEL_154;
      v52 = *(_DWORD *)(v18 + 24);
      v53 = (_QWORD *)a1;
      v54 = 5175;
    }
    else if ((v51 & 0x100) != 0)
    {
      v52 = *(_DWORD *)(v18 + 24);
      v53 = (_QWORD *)a1;
      v54 = 5255;
    }
    else
    {
      if ((v51 & 2) != 0)
        goto LABEL_154;
      v52 = *(_DWORD *)(v18 + 24);
      v53 = (_QWORD *)a1;
      v54 = 5182;
    }
    sub_22E8FCA40(v53, v52, v54, 0, (uint64_t)&v161);
    sub_22E903BEC((unsigned int *)&v161);
    v51 = **(_QWORD **)(a1 + 72);
    v50 = *(_DWORD *)(v18 + 72);
LABEL_154:
    if ((v51 & 0x100) == 0)
    {
      v80 = 0;
LABEL_230:
      if ((v50 & 0xE000) != 0x4000 && (*(_WORD *)(v49 + 8) & 0x7Eu) - 34 >= 4)
      {
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v18 + 24), 0xA52u, 0, (uint64_t)&v172);
        LODWORD(v155) = (**(_DWORD **)(a1 + 72) >> 8) & 1;
        sub_22E89519C((uint64_t)&v172, (unsigned int *)&v155);
        sub_22E903BEC((unsigned int *)&v172);
        v80 = 1;
      }
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0 && !sub_22EFC3B90(v18))
      {
        sub_22E8FCA40((_QWORD *)a1, a4[22], 0x14BFu, 0, (uint64_t)&v172);
        v155 = *((_QWORD *)a4 + 11);
        sub_22E8906A0((uint64_t)&v172, &v155);
        sub_22E903BEC((unsigned int *)&v172);
      }
      v172 = a4;
      v176 = 0;
      v177 = 0;
      v173 = 0u;
      v174 = 0u;
      v175 = 0;
      v178 = *((_QWORD *)a4 + 11);
      v180 = 0u;
      v179 = 7;
      v181 = 0;
      v182 = &v184;
      v183 = 0x800000000;
      v185 = v185 & 0xFC00 | ((*(_QWORD *)a4 & 0x3F000) == 204800);
      v113 = *((_QWORD *)a4 + 5);
      v186 = 0u;
      v187 = v113;
      v191 = 0;
      v190 = 0u;
      v189 = 0u;
      v188 = 0u;
      v114 = (unint64_t)sub_22EE8156C(a1, (uint64_t)&v172, a2, v23, v24, v25, v26, v27);
      if ((*(_WORD *)(v49 + 8) & 0x7Eu) - 38 < 0xFFFFFFFC || !v49)
        __asm { BR              X11 }
      v115 = *(_QWORD *)(a1 + 88);
      v116 = a4[22];
      v117 = *(_DWORD *)(v18 + 24);
      v118 = *(_QWORD *)(v18 + 48);
      if (v118)
        v119 = v118 & 0xFFFFFFFFFFFFFFF0;
      else
        v119 = sub_22EF6462C(*(_QWORD *)(a1 + 88), v18);
      v17 = sub_22EFC7430(80, v115, v49, 0);
      v120 = sub_22EA41AB8(v17, 49, v49, v117);
      *(_QWORD *)(v120 + 40) = 0;
      *(_QWORD *)(v120 + 48) = v119;
      *(_QWORD *)(v120 + 56) = v114 & 0xFFFFFFFFFFFFFFFBLL;
      *(_QWORD *)v120 = &off_24FAC2F90;
      *(_DWORD *)(v120 + 64) = v116;
      *(_DWORD *)(v120 + 68) = 0;
      *(_QWORD *)(v120 + 72) = 0;
      *(_DWORD *)(v120 + 28) = *(_DWORD *)(v120 + 28) & 0xFFFF9FFF | ((v153 & 3) << 13);
      sub_22EA7E768((_QWORD *)a1, a2, v17, (uint64_t)&v172);
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
        sub_22EA11770(*(_QWORD *)(a1 + 2264), v17);
      *(_DWORD *)(v17 + 28) |= 0x200u;
      *(_QWORD *)(v18 + 72) |= 0x1000000uLL;
      sub_22EFCCFA0(v49, v17);
      v170[0] = v171;
      v171[0] = v17;
      v170[1] = (void *)0x200000001;
      v121 = sub_22EA128A4((_QWORD *)a1, (uint64_t *)a2, v49, v18, v153, (uint64_t)v170) | v80;
      if (v17)
      {
        v122 = *(_DWORD *)(v17 + 28) & 0x7F;
        if ((v122 - 67) >= 0xFFFFFFF9 && (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
        {
          v123 = *(_BYTE *)(v17 + 96);
          if ((v123 & 7) == 2 || (*(_BYTE *)(v17 + 96) & 7) == 0 && (v123 & 0x18) == 0x10)
          {
            if (v122 == 64 || v122 == 62)
              goto LABEL_279;
            v124 = *(_QWORD *)(v17 + 16);
            v125 = (_QWORD *)(v124 & 0xFFFFFFFFFFFFFFF8);
            v126 = v124 & 0xFFFFFFFFFFFFFFF8;
            if ((v124 & 4) != 0)
              v126 = v125[1];
            v127 = *(_WORD *)(sub_22EFCBB30(v126) + 8) & 0x7F;
            if (v127 != 16 && v127 != 83)
            {
              if ((v124 & 4) != 0)
                v125 = (_QWORD *)*v125;
              if (((_WORD)v125[1] & 0x7Eu) - 34 >= 4)
              {
LABEL_279:
                v143 = *(_QWORD *)(v17 + 16);
                v144 = (_QWORD *)(v143 & 0xFFFFFFFFFFFFFFF8);
                if ((v143 & 4) != 0)
                  v144 = (_QWORD *)*v144;
                v145 = sub_22EC5250C(a1, (unint64_t)v144);
                if (v145)
                {
                  v146 = v145;
                  if (*(_DWORD *)(*(_QWORD *)(a1 + 72) + 192) < 0xB532B80u)
                  {
                    v148 = *(_QWORD *)(a2 + 32);
                    if (v148)
                      v147 = *(unsigned __int16 *)(v148 + 14);
                    else
                      v147 = 1;
                  }
                  else
                  {
                    v147 = *(unsigned __int16 *)(a2 + 16);
                  }
                  v149 = *(_QWORD *)(a1 + 88);
                  v150 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v145 + 40))(v145, v17, v147);
                  v169 = v17;
                  if (v150 >= 2)
                    *(_DWORD *)sub_22F36F0B0(v149 + 1800, (unint64_t *)&v169) = v150;
                  v151 = *(_QWORD *)(a1 + 88);
                  v152 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v146 + 32))(v146, v17);
                  v169 = v17;
                  if (v152 >= 2)
                    *(_DWORD *)sub_22F26BBB0(v151 + 1848, (unint64_t *)&v169) = v152;
                }
              }
            }
          }
        }
      }
      if (v121)
        sub_22EFC77E8(v17, 1);
      if (v170[0] != v171)
        free(v170[0]);
      sub_22E827F78((uint64_t)&v172);
      return v17;
    }
    v170[0] = 0;
    if ((v50 & 0xE000) != 0x4000)
    {
LABEL_178:
      v95 = *(_QWORD *)a4;
      if (!(*(_QWORD *)a4 >> 25))
      {
LABEL_185:
        if ((*(_WORD *)(v18 + 72) & 0x80) != 0)
          sub_22EFCC320(v18 + 64);
        v96 = *(_QWORD *)(v18 + 80);
        if (!v96)
        {
          v97 = 0;
LABEL_224:
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v18 + 104) + 96), *(_QWORD *)(v18 + 104));
          if ((**(_QWORD **)(v18 + 128) & 0x800000) != 0
            && (*(_WORD *)(v49 + 8) & 0x7Eu) - 34 <= 3
            && (*(_DWORD *)(v49 + 8) & 0xE000) == 0x4000)
          {
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v49 + 40) + 96), *(_QWORD *)(v49 + 40));
            if ((**(_QWORD **)(v49 + 64) & 0x800000) != 0)
            {
              v112 = sub_22EA40620(v18);
              sub_22EA38A74((unsigned int *)a1, v49 - 64, v112);
            }
          }
          v80 = v97 & 1;
          v50 = *(_DWORD *)(v18 + 72);
          goto LABEL_230;
        }
        v97 = 0;
        while (1)
        {
          v98 = *(_DWORD *)(v96 + 28);
          if ((v98 & 0x80) == 0)
          {
            v99 = *(_DWORD *)(v96 + 28) & 0x7F;
            if ((v99 - 52) >= 0xFFFFFFFD)
            {
              if ((v98 & 0x6000) != 0)
              {
                sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v96 + 24), 0xA4Eu, 0, (uint64_t)&v172);
                LOBYTE(v155) = (*(_DWORD *)(v18 + 72) & 0xE000) == 0x4000;
                v104 = sub_22E894E38((uint64_t)&v172, (unsigned __int8 *)&v155);
                LOBYTE(v169) = (*(_DWORD *)(v96 + 28) & 0x6000) == 0x2000;
                sub_22E894E38(v104, (unsigned __int8 *)&v169);
                sub_22E903BEC((unsigned int *)&v172);
                v97 = 1;
              }
              if (sub_22EA11510(a1, v96))
                v97 = 1;
              goto LABEL_206;
            }
            if ((v98 & 0x200) == 0)
            {
              if ((v99 - 33) > 4)
                break;
              v100 = *(_QWORD *)(v96 + 16);
              v101 = (_QWORD *)(v100 & 0xFFFFFFFFFFFFFFF8);
              if ((v100 & 4) != 0)
                v101 = (_QWORD *)*v101;
              if (v101 == (_QWORD *)(v18 + 64))
                break;
            }
          }
LABEL_206:
          v96 = *(_QWORD *)(v96 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!v96)
            goto LABEL_224;
        }
        v102 = *(_DWORD *)(v96 + 28) & 0x7E;
        if ((v102 - 38) >= 0xFFFFFFFC)
        {
          if ((*(_BYTE *)(v96 + 75) & 1) != 0 || !*(_QWORD *)(v96 + 40))
          {
            v107 = *(_DWORD *)(v96 + 24);
            v108 = (_QWORD *)a1;
            v109 = 5172;
LABEL_214:
            sub_22E8FCA40(v108, v107, v109, 0, (uint64_t)&v172);
            LOBYTE(v155) = (*(_DWORD *)(v18 + 72) & 0xE000) == 0x4000;
            sub_22E894E38((uint64_t)&v172, (unsigned __int8 *)&v155);
            sub_22E903BEC((unsigned int *)&v172);
            goto LABEL_206;
          }
          if ((**(_BYTE **)(a1 + 72) & 0x20) == 0)
          {
            v105 = *(_DWORD *)(v96 + 24);
            v106 = (_QWORD *)a1;
            v103 = 2641;
            goto LABEL_222;
          }
        }
        else
        {
          if (!v99 || v99 == 82)
            goto LABEL_206;
          if ((v99 - 33) >= 0xA)
          {
            v110 = v102 - 52;
            if ((v99 - 60) >= 7)
              v111 = 2636;
            else
              v111 = 2640;
            if (v110 >= 6)
              v103 = v111;
            else
              v103 = 2639;
LABEL_221:
            v105 = *(_DWORD *)(v96 + 24);
            v106 = (_QWORD *)a1;
LABEL_222:
            sub_22E8FCA40(v106, v105, v103, 0, (uint64_t)&v172);
            LOBYTE(v155) = (*(_DWORD *)(v18 + 72) & 0xE000) == 0x4000;
            sub_22E894E38((uint64_t)&v172, (unsigned __int8 *)&v155);
            sub_22E903BEC((unsigned int *)&v172);
            v97 = 1;
            goto LABEL_206;
          }
          if ((**(_BYTE **)(a1 + 72) & 0x20) == 0)
          {
            v103 = 2641;
            goto LABEL_221;
          }
        }
        v107 = *(_DWORD *)(v96 + 24);
        v108 = (_QWORD *)a1;
        v109 = 5173;
        goto LABEL_214;
      }
      if ((v95 & 0x2000000) != 0)
      {
        sub_22E8FCA40((_QWORD *)a1, a4[36], 0x1436u, 0, (uint64_t)&v172);
        LOBYTE(v169) = (*(_DWORD *)(v18 + 72) & 0xE000) == 0x4000;
        v128 = sub_22E894E38((uint64_t)&v172, (unsigned __int8 *)&v169);
        v129 = sub_22F2F30F4(v128, (uint64_t)"const");
        v130 = a4[36];
        v157 = 0;
        v158 = 0;
        memset(v160, 0, 17);
        v159 = 0;
        v155 = v130 | (v130 << 32);
        v156 = 1;
        sub_22E890748(v129, &v155);
        if (SHIBYTE(v160[1]) < 0)
          operator delete(v159);
        sub_22E903BEC((unsigned int *)&v172);
        v95 = *(_QWORD *)a4;
        if ((*(_QWORD *)a4 & 0x8000000) == 0)
        {
LABEL_181:
          if ((v95 & 0x4000000) == 0)
            goto LABEL_182;
          goto LABEL_266;
        }
      }
      else if ((v95 & 0x8000000) == 0)
      {
        goto LABEL_181;
      }
      sub_22E8FCA40((_QWORD *)a1, a4[38], 0x1436u, 0, (uint64_t)&v172);
      LOBYTE(v169) = (*(_DWORD *)(v18 + 72) & 0xE000) == 0x4000;
      v131 = sub_22E894E38((uint64_t)&v172, (unsigned __int8 *)&v169);
      v132 = sub_22F2F30F4(v131, (uint64_t)"volatile");
      v133 = a4[38];
      v157 = 0;
      v158 = 0;
      memset(v160, 0, 17);
      v159 = 0;
      v155 = v133 | (v133 << 32);
      v156 = 1;
      sub_22E890748(v132, &v155);
      if (SHIBYTE(v160[1]) < 0)
        operator delete(v159);
      sub_22E903BEC((unsigned int *)&v172);
      v95 = *(_QWORD *)a4;
      if ((*(_QWORD *)a4 & 0x4000000) == 0)
      {
LABEL_182:
        if ((v95 & 0x20000000) == 0)
          goto LABEL_183;
        goto LABEL_269;
      }
LABEL_266:
      sub_22E8FCA40((_QWORD *)a1, a4[37], 0x1436u, 0, (uint64_t)&v172);
      LOBYTE(v169) = (*(_DWORD *)(v18 + 72) & 0xE000) == 0x4000;
      v134 = sub_22E894E38((uint64_t)&v172, (unsigned __int8 *)&v169);
      v135 = sub_22F2F30F4(v134, (uint64_t)"restrict");
      v136 = a4[37];
      v157 = 0;
      v158 = 0;
      memset(v160, 0, 17);
      v159 = 0;
      v155 = v136 | (v136 << 32);
      v156 = 1;
      sub_22E890748(v135, &v155);
      if (SHIBYTE(v160[1]) < 0)
        operator delete(v159);
      sub_22E903BEC((unsigned int *)&v172);
      v95 = *(_QWORD *)a4;
      if ((*(_QWORD *)a4 & 0x20000000) == 0)
      {
LABEL_183:
        if ((v95 & 0x10000000) == 0)
        {
LABEL_184:
          *(_QWORD *)a4 = v95 & 0xFFFFFFFF01FFFFFFLL;
          *((_QWORD *)a4 + 25) = 0;
          *((_QWORD *)a4 + 18) = 0;
          *((_QWORD *)a4 + 19) = 0;
          a4[40] = 0;
          goto LABEL_185;
        }
LABEL_272:
        sub_22E8FCA40((_QWORD *)a1, a4[40], 0x1436u, 0, (uint64_t)&v172);
        LOBYTE(v169) = (*(_DWORD *)(v18 + 72) & 0xE000) == 0x4000;
        v140 = sub_22E894E38((uint64_t)&v172, (unsigned __int8 *)&v169);
        v141 = sub_22F2F30F4(v140, (uint64_t)"__unaligned");
        v142 = a4[40];
        v157 = 0;
        v158 = 0;
        memset(v160, 0, 17);
        v159 = 0;
        v155 = v142 | (v142 << 32);
        v156 = 1;
        sub_22E890748(v141, &v155);
        if (SHIBYTE(v160[1]) < 0)
          operator delete(v159);
        sub_22E903BEC((unsigned int *)&v172);
        v95 = *(_QWORD *)a4;
        goto LABEL_184;
      }
LABEL_269:
      sub_22E8FCA40((_QWORD *)a1, a4[39], 0x1436u, 0, (uint64_t)&v172);
      LOBYTE(v169) = (*(_DWORD *)(v18 + 72) & 0xE000) == 0x4000;
      v137 = sub_22E894E38((uint64_t)&v172, (unsigned __int8 *)&v169);
      v138 = sub_22F2F30F4(v137, (uint64_t)"_Atomic");
      v139 = a4[39];
      v157 = 0;
      v158 = 0;
      memset(v160, 0, 17);
      v159 = 0;
      v155 = v139 | (v139 << 32);
      v156 = 1;
      sub_22E890748(v138, &v155);
      if (SHIBYTE(v160[1]) < 0)
        operator delete(v159);
      sub_22E903BEC((unsigned int *)&v172);
      v95 = *(_QWORD *)a4;
      if ((*(_QWORD *)a4 & 0x10000000) == 0)
        goto LABEL_184;
      goto LABEL_272;
    }
    LODWORD(v169) = 0;
    v81 = sub_22EFCBB30(v49);
    v82 = *(_QWORD *)a4 & 7;
    if (v82 != 3)
    {
      v83 = *(_WORD *)(v81 + 8) & 0x7F;
      if (v83 == 83 || v83 == 16 && (v84 = *(_QWORD *)(v81 - 8), v84 >= 8) && (v84 & 7) == 0)
      {
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v18 + 24), 0xA53u, 0, (uint64_t)&v172);
        v85 = *(unsigned int *)(v18 + 24);
        v157 = 0;
        v158 = 0;
        v155 = v85 | (v85 << 32);
        v156 = 0;
        v160[0] = 0;
        *(_QWORD *)((char *)v160 + 7) = 0;
        strcpy((char *)&v159, "static ");
        *(_WORD *)((char *)&v160[1] + 7) = 7;
        sub_22E890748((uint64_t)&v172, &v155);
        if (SHIBYTE(v160[1]) < 0)
          operator delete(v159);
        sub_22E903BEC((unsigned int *)&v172);
        v86 = (uint64_t)a4;
        v87 = a1;
        v88 = 3;
LABEL_177:
        sub_22E8AD658(v86, v87, v88, 0, v170, (int *)&v169);
        goto LABEL_178;
      }
      if (!v82)
        goto LABEL_178;
    }
    if ((*(_WORD *)(v49 + 8) & 0x7Eu) - 34 > 3)
      goto LABEL_178;
    sub_22E8FCA40((_QWORD *)a1, a4[24], 0xA54u, 0, (uint64_t)&v172);
    v94 = a4[24];
    v157 = 0;
    v158 = 0;
    memset(v160, 0, 17);
    v159 = 0;
    v155 = v94 | (v94 << 32);
    v156 = 1;
    sub_22E890748((uint64_t)&v172, &v155);
    if (SHIBYTE(v160[1]) < 0)
      operator delete(v159);
    sub_22E903BEC((unsigned int *)&v172);
    v86 = (uint64_t)a4;
    v87 = a1;
    v88 = 0;
    goto LABEL_177;
  }
LABEL_48:
  v35 = **(_QWORD **)(a1 + 72);
  if ((v35 & 0x100) == 0 && (v28 & 7) == 0 && (*(_WORD *)(*(_QWORD *)(a1 + 216) + 8) & 0x7Eu) - 34 <= 3)
  {
    v36 = v28 & 0x3F000;
    if ((v19 & 1) != 0)
    {
      if (v36 == 114688)
      {
        v37 = sub_22F10E26C(*(_QWORD *)(*((_QWORD *)a4 + 1) & 0xFFFFFFFFFFFFFFF0));
        if (!v37)
        {
          v37 = sub_22F10E2FC(*(_QWORD *)(*((_QWORD *)a4 + 1) & 0xFFFFFFFFFFFFFFF0));
          if (!v37)
            goto LABEL_62;
        }
        v38 = sub_22F114198(*(_QWORD *)(v37 + 24));
        if (!v38)
          goto LABEL_62;
        v39 = v38;
        v35 = **(_QWORD **)(a1 + 72);
LABEL_61:
        if ((v35 & 0x20) == 0)
          goto LABEL_62;
        sub_22E8FCA40((_QWORD *)a1, a4[22], 0x14B0u, 0, (uint64_t)&v172);
        LOBYTE(v155) = (*(_DWORD *)(v39 + 72) & 0xE000) == 0x4000;
        v89 = sub_22E894E38((uint64_t)&v172, (unsigned __int8 *)&v155);
        v161 = (char *)*((_QWORD *)a4 + 11);
        sub_22E8906A0(v89, (uint64_t *)&v161);
        sub_22E903BEC((unsigned int *)&v172);
        return sub_22F31D92C((_QWORD *)a1, (uint64_t *)a2, (uint64_t)a4, v39, v90, v91, v92, v93);
      }
    }
    else if (v36 == 114688 || *(_QWORD *)(v18 + 40))
    {
      v39 = v18;
      if ((*(_DWORD *)(v18 + 28) & 0x7Eu) - 34 >= 4)
      {
LABEL_62:
        LOBYTE(v34) = 0;
        goto LABEL_63;
      }
      goto LABEL_61;
    }
  }
LABEL_63:
  if ((*(_QWORD *)a4 & 0x3F000) == 0x32000 || v17 && (*(_BYTE *)(v17 + 28) & 0x80) != 0)
    return v17;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) == 0 || (*(_QWORD *)a4 & 7) == 1)
    v41 = 1;
  else
    v41 = v19;
  if ((v41 & 1) == 0 && (*(_DWORD *)(v18 + 28) & 0x7F) == 0x21)
  {
    v42 = sub_22E49F9AC(v18);
    sub_22EFC3500(v18);
    if (!v42)
    {
      v43 = *(_QWORD *)(v18 + 40);
      if (v43 < 8 || (v43 & 7) != 0)
        v34 &= *(unsigned __int8 *)(v18 + 28) >> 7;
    }
  }
  v44 = *(_QWORD *)a4 & 7;
  if (v44 == 1 || ((*(_QWORD *)a4 >> 12) & 0x3F) - 23 > 4 || !*((_QWORD *)a4 + 1))
  {
    if (v44 == 1)
    {
      sub_22E8FCA40((_QWORD *)a1, a4[22], 0x150Eu, 0, (uint64_t)&v172);
      v161 = (char *)*((_QWORD *)a4 + 11);
      sub_22E8906A0((uint64_t)&v172, (uint64_t *)&v161);
      sub_22E903BEC((unsigned int *)&v172);
    }
    else
    {
      LOBYTE(v34) = 0;
    }
  }
  if (v18)
  {
    v55 = a4[48];
    if (v55)
    {
      v56 = *(_QWORD *)(v18 + 16);
      v57 = v56 & 0xFFFFFFFFFFFFFFF8;
      if ((v56 & 4) != 0)
        v57 = *(_QWORD *)v57;
      v58 = *(_WORD *)(v57 + 8) & 0x7F;
      if (v58 <= 0x18 && ((1 << v58) & 0x1000006) != 0 || v58 - 52 <= 5)
      {
        sub_22E8FCA40((_QWORD *)a1, v55, 0xF6Au, 0, (uint64_t)&v172);
        LODWORD(v155) = (unsigned __int16)*(_DWORD *)(v18 + 72) >> 13;
        v59 = sub_22E8900C4((uint64_t)&v172, (int *)&v155);
        v60 = a4[48];
        v163 = 0;
        v164 = 0;
        v166 = 0;
        v167 = 0;
        __p = 0;
        v168 = 0;
        v161 = (char *)(v60 | (v60 << 32));
        v162 = 1;
        sub_22E890748(v59, &v161);
        if (SHIBYTE(v167) < 0)
          operator delete(__p);
        sub_22E903BEC((unsigned int *)&v172);
      }
    }
  }
  v172 = (unsigned int *)v17;
  sub_22EA2DB10(a1, (unint64_t *)&v172, 1uLL);
  if ((v34 & 1) == 0)
  {
    if (a6)
      v65 = 4005;
    else
      v65 = 5311;
    if (a7)
      v66 = 4005;
    else
      v66 = v65;
    sub_22E8FCA40((_QWORD *)a1, a4[22], v66, 0, (uint64_t)&v172);
    v161 = (char *)*((_QWORD *)a4 + 11);
    sub_22E8906A0((uint64_t)&v172, (uint64_t *)&v161);
    goto LABEL_27;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
    v61 = 5349;
  else
    v61 = 6996;
  v62 = *(_QWORD *)a4;
  v63 = *(_QWORD *)a4 & 7;
  if ((*a4 & 7) != 0)
  {
    if ((_DWORD)v63 == 7)
    {
      sub_22E8FCA40((_QWORD *)a1, a4[24], 0xF92u, 0, (uint64_t)v154);
      v64 = (unsigned int *)v154;
LABEL_125:
      sub_22E903BEC(v64);
      goto LABEL_126;
    }
    if ((v62 & 0x20) == 0 && (_DWORD)v63 != 1)
    {
      sub_22E8FCA40((_QWORD *)a1, a4[24], v61, 0, (uint64_t)&v172);
      v161 = off_24FAB79E8[v62 & 7];
      sub_22E8AECC4((uint64_t)&v172, (uint64_t *)&v161);
      v64 = (unsigned int *)&v172;
      goto LABEL_125;
    }
  }
LABEL_126:
  v68 = *(_QWORD *)a4;
  v69 = (*(_QWORD *)a4 >> 3) & 3;
  if ((_DWORD)v69)
  {
    sub_22E8FCA40((_QWORD *)a1, a4[25], v61, 0, (uint64_t)&v172);
    v161 = off_24FAB7A58[v69 - 1];
    sub_22E8AECC4((uint64_t)&v172, (uint64_t *)&v161);
    sub_22E903BEC((unsigned int *)&v172);
    v68 = *(_QWORD *)a4;
  }
  if (v68 >> 25)
  {
    if ((v68 & 0x2000000) != 0)
    {
      sub_22E8FCA40((_QWORD *)a1, a4[36], v61, 0, (uint64_t)&v172);
      sub_22F2F30F4((uint64_t)&v172, (uint64_t)"const");
      sub_22E903BEC((unsigned int *)&v172);
      v68 = *(_QWORD *)a4;
      if ((*(_QWORD *)a4 & 0x8000000) == 0)
      {
LABEL_131:
        if ((v68 & 0x20000000) == 0)
          goto LABEL_132;
        goto LABEL_169;
      }
    }
    else if ((v68 & 0x8000000) == 0)
    {
      goto LABEL_131;
    }
    sub_22E8FCA40((_QWORD *)a1, a4[36], v61, 0, (uint64_t)&v172);
    sub_22F2F30F4((uint64_t)&v172, (uint64_t)"volatile");
    sub_22E903BEC((unsigned int *)&v172);
    v68 = *(_QWORD *)a4;
    if ((*(_QWORD *)a4 & 0x20000000) == 0)
    {
LABEL_132:
      if ((v68 & 0x10000000) == 0)
        goto LABEL_133;
LABEL_170:
      sub_22E8FCA40((_QWORD *)a1, a4[40], v61, 0, (uint64_t)&v172);
      sub_22F2F30F4((uint64_t)&v172, (uint64_t)"__unaligned");
      sub_22E903BEC((unsigned int *)&v172);
      goto LABEL_133;
    }
LABEL_169:
    sub_22E8FCA40((_QWORD *)a1, a4[39], v61, 0, (uint64_t)&v172);
    sub_22F2F30F4((uint64_t)&v172, (uint64_t)"_Atomic");
    sub_22E903BEC((unsigned int *)&v172);
    if ((*(_QWORD *)a4 & 0x10000000) == 0)
      goto LABEL_133;
    goto LABEL_170;
  }
LABEL_133:
  v71 = (uint64_t *)(a4 + 8);
  v70 = *((_QWORD *)a4 + 4);
  if (v70 >= 8)
  {
    v72 = v70 & 0xFFFFFFFFFFFFFFF8;
    if ((v70 & 4) == 0 || !v72 || *(_DWORD *)(v72 + 8))
    {
      v73 = *a4;
      v74 = (v73 >> 12) & 0x3F;
      if ((v73 & 0x3C000) == 0x18000 || (_DWORD)v74 == 23)
      {
        if ((v70 & 4) != 0)
        {
          v76 = *(unsigned int *)(v72 + 8);
          if (!(_DWORD)v76)
            return v17;
          v71 = *(uint64_t **)v72;
          v75 = *(_QWORD *)v72 + 8 * v76;
        }
        else
        {
          v75 = (uint64_t)(a4 + 10);
        }
        v77 = v74 - 23;
        do
        {
          v78 = *v71++;
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v78 + 16), 0x194Bu, 0, (uint64_t)&v172);
          v79 = sub_22E8D2984((uint64_t)&v172, (uint64_t *)v78);
          LODWORD(v161) = dword_22F46A284[v77];
          sub_22E89519C(v79, (unsigned int *)&v161);
          sub_22E903BEC((unsigned int *)&v172);
        }
        while (v71 != (uint64_t *)v75);
      }
    }
  }
  return v17;
}

_QWORD *sub_22EA10BEC(_QWORD *result, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;

  v3 = result[11];
  if ((*(_BYTE *)(*(_QWORD *)(v3 + 2000) + 1) & 1) == 0)
    return result;
  v6 = (uint64_t)result;
  result = (_QWORD *)(a2 + 64);
  v7 = *(_WORD *)(a2 + 72) & 0x7F;
  v8 = -40;
  if (v7 > 0x46)
  {
    if (v7 == 83)
      goto LABEL_6;
    if (v7 == 71)
    {
      v8 = -56;
      goto LABEL_6;
    }
    if (v7 != 81)
    {
LABEL_20:
      v13 = v7 - 52;
      v14 = v7 - 33 >= 5;
      v15 = -48;
      if (!v14)
        v15 = -64;
      if (v13 >= 6)
        v8 = v15;
      else
        v8 = -72;
    }
  }
  else
  {
    if (v7 > 0x18)
      goto LABEL_19;
    if (v7 == 16)
    {
LABEL_5:
      v8 = -48;
      goto LABEL_6;
    }
    if (((1 << v7) & 0x1066) == 0)
    {
      if (v7 == 24)
        goto LABEL_5;
LABEL_19:
      if (v7 == 70)
      {
        v8 = -64;
        goto LABEL_6;
      }
      goto LABEL_20;
    }
  }
LABEL_6:
  v9 = *(_QWORD *)((char *)result + v8 + 16);
  v10 = v9 & 0xFFFFFFFFFFFFFFF8;
  if ((v9 & 4) != 0)
    v10 = *(_QWORD *)v10;
  if ((*(_WORD *)(v10 + 8) & 0x7Fu) - 35 <= 2)
  {
    v16 = *(_QWORD *)(a2 + 40);
    if ((v16 & 7) == 0)
    {
      v17 = v16 & 0xFFFFFFFFFFFFFFF8;
      if (v17)
      {
        if (**(_DWORD **)(v17 + 16))
          return result;
      }
    }
    v18 = *(_QWORD *)(a2 + 120);
    if (v18 >= 8 && (v18 & 4) == 0)
      return result;
    v19 = *(_QWORD *)(sub_22EFCAD5C((uint64_t)result) + 16);
    v20 = (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF8);
    if ((v19 & 4) != 0)
      v20 = (_QWORD *)*v20;
    result = (_QWORD *)sub_22F36F16C(v3, (uint64_t)v20);
LABEL_32:
    v21 = *(_QWORD *)(v6 + 88);
    if (*(_DWORD *)(*(_QWORD *)(v6 + 72) + 192) > 0xB532B7Fu)
    {
      v23 = *(unsigned __int16 *)(a3 + 16);
    }
    else
    {
      v22 = *(_QWORD *)(a3 + 32);
      if (v22)
        v23 = *(unsigned __int16 *)(v22 + 14);
      else
        v23 = 1;
    }
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 48))(result, a2, v23);
    v25 = a2;
    if (result >= 2)
    {
      v24 = (int)result;
      result = (_QWORD *)sub_22F36F0B0(v21 + 1800, &v25);
      *(_DWORD *)result = v24;
    }
    return result;
  }
  v11 = *(_QWORD *)(a2 + 16);
  v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
  if ((v11 & 4) != 0)
    v12 = (_QWORD *)*v12;
  result = (_QWORD *)sub_22EC5250C(v6, (unint64_t)v12);
  if (result)
    goto LABEL_32;
  return result;
}

void sub_22EA10DE0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _BOOL4 v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  const void *v21;
  size_t v22;
  unsigned int v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 **v36;
  unsigned __int8 *v37;
  const void *v38;
  uint64_t v39[5];
  char v40;
  BOOL v41;
  unsigned int v42[4];
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  char v48;
  unint64_t v49;
  int v50;
  _BYTE *v51;
  __int128 v52;
  _BYTE v53[40];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 28) & 0x80) != 0 || *(_QWORD *)(a2 + 40))
    return;
  if (*(_QWORD *)(a2 + 120) >= 8uLL && (*(_QWORD *)(a2 + 120) & 4) == 0)
    return;
  v7 = *(_QWORD *)((*(_QWORD *)(a3 + 80) & 0xFFFFFFFFFFFFFFF8) + ((2 * *(_QWORD *)(a3 + 80)) & 8));
  v8 = *(_QWORD *)(a2 + 48);
  if (v8)
    v9 = v8 & 0xFFFFFFFFFFFFFFF0;
  else
    v9 = sub_22EF6462C(*(_QWORD *)(a1 + 88), a2);
  if ((*(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 8) | v7 & 7) != (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF0) + 8) | v9 & 7))
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
      (*(void (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 88) + 15064) + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 15064), a2, a3);
    return;
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 38 < 0xFFFFFFFD)
  {
    v50 = 0;
    v49 = 0;
    if ((*(_BYTE *)(a2 + 32) & 7) != 0)
    {
      LODWORD(v10) = 0;
      v11 = 1;
LABEL_18:
      v13 = 0;
      v15 = 5024;
      goto LABEL_19;
    }
LABEL_41:
    *(_QWORD *)(a2 + 120) = a3 & 0xFFFFFFFFFFFFFFFBLL;
    return;
  }
  v12 = sub_22EA1122C(a2);
  v13 = v12;
  v49 = v12;
  v50 = v14;
  v11 = (*(_BYTE *)(a2 + 32) & 7) != 0;
  if (!(v12 | *(_BYTE *)(a2 + 32) & 7))
    goto LABEL_41;
  if ((_DWORD)v12 == 6)
    return;
  v10 = HIDWORD(v12);
  if (!(_DWORD)v12)
    goto LABEL_18;
  v15 = 4026;
LABEL_19:
  if (v11)
    v16 = v15;
  else
    v16 = 5313;
  v17 = sub_22F141A3C(*(unsigned int *)(a2 + 56), 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
  v51 = v53;
  v53[0] = 32;
  v52 = xmmword_22F46A4C0;
  v18 = *(_QWORD *)(a3 + 40);
  if ((v18 & 7) != 0)
    v19 = 0;
  else
    v19 = v18 & 0xFFFFFFFFFFFFFFF8;
  v20 = *(unsigned int **)(v19 + 16);
  v23 = *v20;
  v21 = v20 + 4;
  v22 = v23;
  if (v23 >= 0x28uLL)
  {
    v38 = v21;
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v21 = v38;
    v25 = v51;
    v24 = v52;
  }
  else
  {
    v24 = 1;
    v25 = v53;
    if (!v22)
      goto LABEL_28;
  }
  memcpy(&v25[v24], v21, v22);
  v24 = v52;
LABEL_28:
  *(_QWORD *)&v52 = v24 + v22;
  sub_22E8FCA40((_QWORD *)a1, v17, v16, 0, (uint64_t)v42);
  v41 = (*(_DWORD *)(a3 + 28) & 0x7F) == 40;
  v26 = sub_22E894E38((uint64_t)v42, (unsigned __int8 *)&v41);
  sub_22E729148(v51, v52, v17, 0, (uint64_t)v39);
  sub_22E890748(v26, v39);
  if (v40 < 0)
    operator delete((void *)v39[3]);
  sub_22E903BEC(v42);
  if (v13)
  {
    sub_22E8FCA40((_QWORD *)a1, v10, 0x16C7u, 0, (uint64_t)v42);
    LODWORD(v39[0]) = v13 - 1;
    v27 = sub_22E8900C4((uint64_t)v42, (int *)v39);
    sub_22E8906A0(v27, (uint64_t *)((char *)&v49 + 4));
    sub_22E903BEC(v42);
  }
  sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a3 + 24), 0x17FBu, 0, (uint64_t)v42);
  if (v46)
  {
    v28 = v44;
    if (!v44)
    {
      v28 = (unsigned __int8 *)sub_22E3B8AAC(v45);
      v44 = v28;
    }
    v28[*v28 + 1] = 11;
    v29 = v44;
LABEL_36:
    v30 = *v29;
    *v29 = v30 + 1;
    *(_QWORD *)&v29[8 * v30 + 16] = a3;
    goto LABEL_38;
  }
  if (v48)
  {
    v31 = v43;
    v32 = (uint64_t *)(*(_QWORD *)v42 + 12784);
    if (v43)
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 32))(v43);
    v39[0] = v31;
    v33 = sub_22F2F1D6C(v32, v39);
    v34 = v33[1] + 32 * v47;
    v37 = *(unsigned __int8 **)(v34 + 8);
    v36 = (unsigned __int8 **)(v34 + 8);
    v35 = v37;
    if (!v37)
    {
      v35 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v36[1]);
      *v36 = v35;
    }
    v35[*v35 + 1] = 11;
    v29 = *v36;
    goto LABEL_36;
  }
LABEL_38:
  LOBYTE(v39[0]) = (*(_DWORD *)(a3 + 28) & 0x7F) == 40;
  sub_22E894E38((uint64_t)v42, (unsigned __int8 *)v39);
  sub_22E903BEC(v42);
  if (v51 != v53)
    free(v51);
  if (!v11)
    goto LABEL_41;
}

uint64_t sub_22EA1122C(uint64_t a1)
{
  unint64_t v2;
  char v3;
  int v4;
  int v5;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;

  if ((*(_BYTE *)(a1 + 28) & 0x80) != 0)
    return 6;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if (!*(_DWORD *)(*(_QWORD *)(a1 + 128) + 16))
  {
    if ((*(_WORD *)(a1 + 72) & 0x80) != 0)
      sub_22EFCC320(a1 + 64);
    v2 = *(_QWORD *)(a1 + 80);
    if (v2)
    {
      v3 = 0;
      while (1)
      {
        v4 = *(_DWORD *)(v2 + 28);
        if ((v4 & 0x80) != 0)
        {
          v3 = 1;
        }
        else
        {
          v5 = *(_DWORD *)(v2 + 28) & 0x7F;
          if ((v5 - 52) >= 0xFFFFFFFD)
          {
            v7 = *(_QWORD *)(v2 + 72) & 3;
            if ((_DWORD)v7)
              v8 = (_DWORD)v7 == 3;
            else
              v8 = 1;
            if (!v8)
            {
              v13 = (_QWORD *)(*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFFFFCLL);
              if ((*(_BYTE *)(v2 + 68) & 1) != 0)
                v13 = (_QWORD *)*v13;
              LODWORD(v18) = 2;
              if (v13)
                sub_22F0D4E74((uint64_t)v13);
              else
                v14 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v2 + 16))(v2);
              HIDWORD(v18) = v14;
              return v18;
            }
          }
          else if ((v5 - 33) > 0x31 || ((1 << (v5 - 33)) & 0x2000800000001) == 0)
          {
            if (v5 == 8)
            {
              v17 = 4;
              goto LABEL_49;
            }
            if ((v5 - 38) > 0xFFFFFFFC)
            {
              v9 = *(_QWORD *)(v2 + 128);
              if (v9 && ((*(unsigned __int16 *)(v9 + 8) | (*(unsigned __int8 *)(v9 + 10) << 16)) & 0x100000) != 0)
              {
                v17 = 3;
                goto LABEL_49;
              }
              if ((*(_BYTE *)(v2 + 74) & 1) != 0)
              {
                v10 = sub_22EA1122C(v2);
                if ((_DWORD)v10)
                  return v10;
              }
            }
            else if ((v4 & 0x200) == 0)
            {
              v17 = 5;
LABEL_49:
              LODWORD(v18) = v17;
              HIDWORD(v18) = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v2 + 16))(v2);
              return v18;
            }
          }
        }
        v2 = *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v2)
        {
          if ((v3 & 1) != 0)
            return 6;
          else
            return 0;
        }
      }
    }
    return 0;
  }
  LODWORD(v18) = 1;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 24);
  if ((v15 & 1) != 0)
    v15 = sub_22EFCF510(*(_QWORD *)(a1 + 128));
  v16 = *(_DWORD *)v15;
  sub_22F24CD30(a1);
  HIDWORD(v18) = v16;
  return v18;
}

unsigned int *sub_22EA11438(unsigned int *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6[24];
  unsigned int v7[24];
  unsigned int v8[24];

  if ((*(_BYTE *)(a2 + 4) & 4) != 0)
  {
    v2 = a2;
    v4 = result;
    sub_22E8FCA40(result, *(_DWORD *)(a2 + 168), 0x1416u, 0, (uint64_t)v8);
    sub_22E903BEC(v8);
    a2 = v2;
    result = v4;
  }
  if (*(_QWORD *)(a2 + 16))
  {
    v3 = a2;
    v5 = result;
    sub_22E8FCA40(result, *(_DWORD *)(a2 + 172), 0xD08u, 0, (uint64_t)v7);
    sub_22E903BEC(v7);
    a2 = v3;
    result = v5;
  }
  if ((*(_BYTE *)(a2 + 4) & 8) != 0)
  {
    sub_22E8FCA40(result, *(_DWORD *)(a2 + 176), 0xFD7u, 0, (uint64_t)v6);
    return sub_22E903BEC(v6);
  }
  return result;
}

unint64_t sub_22EA114E8(unint64_t a1, unint64_t a2)
{
  unint64_t v3;

  v3 = a2;
  return sub_22EA2DB10(a1, &v3, 1uLL);
}

BOOL sub_22EA11510(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  __int128 v26;
  int v27;
  int v28;
  int v29;
  __int16 v30;
  char v31;
  int v32;

  if ((*(_BYTE *)(a2 + 28) & 0x80) != 0)
    return 0;
  v3 = *(_QWORD *)(a2 + 48);
  if ((*(_BYTE *)(*(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
    return 0;
  v5 = sub_22EF5BA38(*(_QWORD *)(a1 + 88), v3);
  result = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v7 && *(_BYTE *)(v7 + 16) == 45)
  {
    v8 = sub_22F114198(*(_QWORD *)(v7 + 24));
    v9 = v8;
    v10 = *(_QWORD *)(v8 + 128);
    if (!v10)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 104) + 96), *(_QWORD *)(v8 + 104));
      v10 = *(_QWORD *)(v9 + 128);
      if (!v10)
        return 0;
    }
    if (!*(_QWORD *)(v10 + 88))
      return 0;
    if (sub_22E3CD2C4(v9))
    {
      v11 = 1;
    }
    else
    {
      if (!sub_22E49F698(v9))
      {
        v32 = 0;
        goto LABEL_19;
      }
      if (sub_22E69200C(v9))
      {
        v11 = 3;
      }
      else
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v9 + 104) + 96), *(_QWORD *)(v9 + 104));
        if ((**(_QWORD **)(v9 + 128) & 0x100000000000) != 0)
          return 0;
        v11 = 5;
      }
    }
    v32 = v11;
LABEL_19:
    v12 = *(_QWORD *)(a1 + 72);
    if ((*(_BYTE *)(v12 + 1) & 2) == 0 && (*(_WORD *)(v12 + 148) & 2) != 0 && (*(_BYTE *)(v9 + 75) & 2) != 0)
    {
      v13 = *(_DWORD *)(a2 + 24);
      v14 = sub_22F1E361C(*(_QWORD **)(a1 + 112), v13);
      if (v14)
      {
        if (v14 != 3)
        {
          if (!sub_22F3089DC(a2))
          {
            v22 = *(_QWORD *)(a1 + 88);
            v26 = 0uLL;
            v27 = v13;
            v28 = v13;
            v29 = 0;
            v31 = 120;
            v30 = 0;
            v23 = sub_22F3A4818(v22, "", 0, 6, &v26);
            sub_22EFCA95C(a2, v23);
          }
          return 0;
        }
      }
    }
    if ((**(_QWORD **)(a1 + 72) & 0x200) != 0)
      v15 = 6447;
    else
      v15 = 3561;
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), v15, 0, (uint64_t)&v26);
    v16 = *(_QWORD *)(a2 + 16);
    v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    if ((v16 & 4) != 0)
      v17 = *(_QWORD *)v17;
    v18 = (*(_WORD *)(v17 + 8) & 0x7E) - 34;
    if (v17)
      v19 = v17 - 64;
    else
      v19 = 0;
    if (v18 >= 4)
      v19 = 0;
    v25 = (*(_DWORD *)(v19 + 72) & 0xE000) == 0x4000;
    v20 = sub_22E894E38((uint64_t)&v26, (unsigned __int8 *)&v25);
    v24 = *(_QWORD *)(a2 + 40);
    v21 = sub_22E894538(v20, &v24);
    sub_22E8900C4(v21, &v32);
    sub_22E903BEC((unsigned int *)&v26);
    sub_22F328244(a1, v9, v32);
    return (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 2) == 0;
  }
  return result;
}

uint64_t sub_22EA11770(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v3 = result;
  v4 = *(_DWORD *)(result + 8);
  if (v4 >= *(_DWORD *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = a2;
  ++*(_DWORD *)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 272) + 8 * *(unsigned int *)(v3 + 280);
  ++*(_QWORD *)(v5 - 8);
  return result;
}

void sub_22EA117E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int i;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  unsigned int *v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int j;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int k;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  unint64_t v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  unint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  BOOL v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  _BOOL4 v112;
  uint64_t v113;
  uint64_t v114;
  _BOOL4 v115;
  _QWORD v116[2];
  _BYTE v117[96];
  unsigned int v118[24];
  unsigned int v119[24];
  _BYTE v120[96];
  _BYTE v121[96];
  _BYTE v122[96];
  unint64_t v123;
  __int128 v124;
  void *__p;
  __int128 v126;
  char v127;
  _BYTE v128[96];
  uint64_t v129;
  void (**v130)(_QWORD, uint64_t, _QWORD, uint64_t);
  int v131;
  uint64_t *v132;
  uint64_t v133;

  v0 = (_QWORD *)MEMORY[0x24BDAC7A8]();
  v133 = *MEMORY[0x24BDAC8D0];
  if (!v1)
    return;
  v2 = v1;
  v3 = *(_DWORD *)(v1 + 28) & 0x7F;
  v4 = (v3 - 60) >= 7 ? 0 : v1;
  v129 = v4;
  if (!v4)
    return;
  v5 = (uint64_t)v0;
  if (v3 == 61)
  {
    v6 = *(_DWORD *)(v4 + 24);
    v7 = 3170;
LABEL_8:
    sub_22E8FCA40(v0, v6, v7, 0, (uint64_t)&v130);
    sub_22E890024((uint64_t)&v130, &v129);
LABEL_9:
    v8 = (unsigned int *)&v130;
    goto LABEL_10;
  }
  v11 = (_QWORD *)(v4 + 48);
  v10 = *(_QWORD *)(v4 + 48);
  v12 = v10 & 0xFFFFFFFFFFFFFFF0;
  v13 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v130) = 0;
  v14 = sub_22F110500((uint64_t)&v130, v13);
  if (v14
    && *(_QWORD *)(v14 + 24) <= 0xFuLL
    && (*(_BYTE *)(v14 + 17) & 4) == 0
    && (sub_22EA285A4((_QWORD *)v5, v4, 0, 0) & 1) != 0)
  {
    return;
  }
  v15 = *(_DWORD *)(v4 + 28);
  if ((v15 & 0x7F) != 0x40 && (*(_BYTE *)(v4 + 97) & 0x80) != 0)
  {
    v16 = v2;
    if ((v15 & 0x7F) != 0x53)
    {
      v17 = *(_QWORD *)(v4 + 16);
      v18 = v17 & 0xFFFFFFFFFFFFFFF8;
      if ((v17 & 4) != 0)
        v18 = *(_QWORD *)v18;
      for (i = *(_WORD *)(v18 + 8) & 0x7F; i != 83; i = *(_WORD *)(v18 + 8) & 0x7F)
      {
        v20 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v20 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_34;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_33;
          if (i == 16)
            goto LABEL_27;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_40;
          if (i == 24)
          {
LABEL_27:
            v20 = -48;
          }
          else
          {
LABEL_33:
            if (i != 70)
            {
LABEL_34:
              v21 = i - 52;
              if ((i - 33) >= 5)
                v22 = -48;
              else
                v22 = -64;
              if (v21 >= 6)
                v20 = v22;
              else
                v20 = -72;
              goto LABEL_40;
            }
            v20 = -64;
          }
        }
LABEL_40:
        v23 = *(_QWORD *)(v18 + v20 + 16);
        v18 = v23 & 0xFFFFFFFFFFFFFFF8;
        if ((v23 & 4) != 0)
          v18 = *(_QWORD *)v18;
      }
      v16 = v18 - 40;
    }
    v24 = sub_22EFBBF74(v4, *(_QWORD *)(v16 + 88));
    v15 = *(_DWORD *)(v4 + 28);
    if (!v24)
    {
      if ((*(_DWORD *)(v4 + 28) & 0x7F) == 0x40)
        goto LABEL_78;
      if ((*(_BYTE *)(v4 + 97) & 1) != 0)
        goto LABEL_48;
      v50 = *(_QWORD *)(v4 + 16);
      v51 = v50 & 0xFFFFFFFFFFFFFFF8;
      if ((v50 & 4) != 0)
        v51 = *(_QWORD *)v51;
      if ((*(_WORD *)(v51 + 8) & 0x7Eu) - 34 > 3)
      {
LABEL_78:
        sub_22E8FCA40((_QWORD *)v5, *(_DWORD *)(v4 + 24), 0xE3Du, 0, (uint64_t)v128);
        v8 = (unsigned int *)v128;
        goto LABEL_10;
      }
      if ((*(_BYTE *)(*(_QWORD *)(v5 + 72) + 1) & 8) == 0
        && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 88) + 15088) + 148) != 11)
      {
        v6 = *(_DWORD *)(v4 + 24);
        v0 = (_QWORD *)v5;
        v7 = 3085;
        goto LABEL_8;
      }
    }
  }
LABEL_48:
  if ((*(_BYTE *)(*(_QWORD *)(v5 + 72) + 104) & 0x20) != 0 && (v15 & 0x80) == 0)
  {
    if ((sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v11 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0) & 1) != 0)
    {
      v15 = *(_DWORD *)(v4 + 28);
      if ((*(_BYTE *)(*(_QWORD *)(v5 + 72) + 122) & 8) == 0
        && ((*(_DWORD *)(v4 + 28) & 0x7F) == 0x40 || (*(_BYTE *)(v4 + 97) & 0x80) == 0))
      {
        v25 = *(_QWORD *)(v4 + 56);
        if ((v25 & 4) != 0 && (v109 = v25 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v109 + 16)))
          v26 = **(int ***)(v109 + 24);
        else
          v26 = (int *)(v4 + 64);
        sub_22E8FCA40((_QWORD *)v5, *v26, 0xF1Bu, 0, (uint64_t)&v130);
        v27 = *(_QWORD *)(v129 + 56);
        if ((v27 & 4) != 0 && (v110 = v27 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v110 + 16)))
          v28 = **(unsigned int ***)(v110 + 24);
        else
          v28 = (unsigned int *)(v129 + 64);
        v29 = *v28 | ((unint64_t)*v28 << 32);
        BYTE12(v124) = 0;
        *(_QWORD *)((char *)&v124 + 4) = 0;
        v123 = v29;
        LOBYTE(v124) = 0;
        *((_QWORD *)&v126 + 1) = 0xA00000000000000;
        *(_QWORD *)((char *)&v126 + 2) = 0;
        LOWORD(v126) = 8306;
        __p = *(void **)"constexpr ";
        v127 = 0;
        sub_22E890748((uint64_t)&v130, &v123);
        if (SHIBYTE(v126) < 0)
          operator delete(__p);
        goto LABEL_9;
      }
    }
    else
    {
      v15 = *(_DWORD *)(v4 + 28);
    }
  }
  if ((v15 & 0x80) == 0)
  {
    v30 = (uint64_t *)(*v11 & 0xFFFFFFFFFFFFFFF0);
    v31 = v30[1];
    if ((v31 & 8) != 0
      && (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x1800
      && (*(_BYTE *)(v4 + 96) & 7) != 1
      && !sub_22EFBC5B4(v4))
    {
      v101 = sub_22F10C2A4(*v30);
      if (!v101)
        goto LABEL_245;
      if ((*(_DWORD *)(v101 + 28) & 0x7Fu) - 35 > 2)
        goto LABEL_245;
      v102 = sub_22F282248(v101);
      if (v102 == v103)
        goto LABEL_245;
      v104 = v102;
      v105 = v103;
      v106 = 0;
      do
      {
        if ((*(_BYTE *)(v104 + 83) & 0xC0) != 0)
        {
          v107 = *(_QWORD *)(*(_QWORD *)(v104 + 48) & 0xFFFFFFFFFFFFFFF0);
          v108 = v107 && *(_BYTE *)(v107 + 16) == 26;
          if ((!v108
             && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v107 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26
              || (v107 = sub_22F10CF48(v107)) == 0)
             || (*(_DWORD *)(v107 + 20) & 0x3FFFC0) == 0)
            && (sub_22E46BB88(v104) & 0xFFFFF800) == 0x1800)
          {
            v106 = 1;
          }
        }
        do
          v104 = *(_QWORD *)(v104 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v104 && (*(_DWORD *)(v104 + 28) & 0x7F) != 0x37);
      }
      while (v104 != v105);
      if ((v106 & 1) == 0)
      {
LABEL_245:
        sub_22E8FCA40((_QWORD *)v5, *(_DWORD *)(v4 + 24), 0x1127u, 0, (uint64_t)v122);
        v8 = (unsigned int *)v122;
        goto LABEL_10;
      }
      v15 = *(_DWORD *)(v4 + 28);
    }
  }
  v32 = v2;
  if ((v15 & 0x80) != 0)
    goto LABEL_123;
  v33 = *(_QWORD *)((*v11 & 0xFFFFFFFFFFFFFFF0) + 8);
  v32 = v2;
  if ((v33 & 8) == 0)
    goto LABEL_123;
  v32 = v2;
  if ((*(_QWORD *)((v33 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0x6800)
    goto LABEL_123;
  if ((*(_BYTE *)(*(_QWORD *)(v5 + 72) + 129) & 0x20) != 0)
  {
    v38 = v2;
    if ((v15 & 0x7F) != 0x53)
    {
      v39 = *(_QWORD *)(v4 + 16);
      v40 = v39 & 0xFFFFFFFFFFFFFFF8;
      if ((v39 & 4) != 0)
        v40 = *(_QWORD *)v40;
      for (j = *(_WORD *)(v40 + 8) & 0x7F; j != 83; j = *(_WORD *)(v40 + 8) & 0x7F)
      {
        v42 = -40;
        if (j > 70)
        {
          if (j == 71)
          {
            v42 = -56;
          }
          else if (j != 81)
          {
            goto LABEL_93;
          }
        }
        else
        {
          if (j > 0x18)
            goto LABEL_92;
          if (j == 16)
            goto LABEL_86;
          if (((1 << j) & 0x1066) != 0)
            goto LABEL_99;
          if (j == 24)
          {
LABEL_86:
            v42 = -48;
          }
          else
          {
LABEL_92:
            if (j != 70)
            {
LABEL_93:
              v43 = j - 52;
              if ((j - 33) >= 5)
                v44 = -48;
              else
                v44 = -64;
              if (v43 >= 6)
                v42 = v44;
              else
                v42 = -72;
              goto LABEL_99;
            }
            v42 = -64;
          }
        }
LABEL_99:
        v45 = *(_QWORD *)(v40 + v42 + 16);
        v40 = v45 & 0xFFFFFFFFFFFFFFF8;
        if ((v45 & 4) != 0)
          v40 = *(_QWORD *)v40;
      }
      v38 = v40 - 40;
    }
    v46 = sub_22EFBBF74(v4, *(_QWORD *)(v38 + 88));
    v32 = v2;
    if (v46)
    {
      v47 = 0;
      v48 = v4;
      while (!sub_22EFBC5B4(v48))
      {
        if ((*(_BYTE *)(v48 + 72) & 3) != 0)
        {
          if (v47)
            goto LABEL_114;
          v47 = 1;
        }
        v49 = sub_22E3CD31C((uint64_t *)(v48 + 72), v48);
        if (v49 != v4)
        {
          v48 = v49;
          if (v49)
            continue;
        }
LABEL_114:
        v35 = v4;
        goto LABEL_72;
      }
      v32 = v4;
    }
    goto LABEL_123;
  }
  v32 = v2;
  if ((*(_BYTE *)(v4 + 96) & 7) != 1)
  {
    v34 = sub_22EFBC5B4(v4);
    v35 = v2;
    v32 = v2;
    if (!v34)
    {
LABEL_72:
      v36 = sub_22E634350(v35);
      v32 = v4;
      if (!v36)
      {
        if ((*(_BYTE *)(v4 + 29) & 1) == 0
          || (sub_22EFC8E88(v4),
              v112 = sub_22E54E894(*(_QWORD *)v111, *(_QWORD *)v111 + 8 * *(unsigned int *)(v111 + 8)),
              v32 = v2,
              v112))
        {
          v37 = sub_22E633F90(v4);
          v32 = v2;
          if (!v37)
          {
            if ((*(_BYTE *)(v4 + 29) & 1) == 0
              || (sub_22EFC8E88(v4),
                  v115 = sub_22F271604(*(uint64_t **)v114, (uint64_t *)(*(_QWORD *)v114 + 8 * *(unsigned int *)(v114 + 8))), v32 = v2, v115))
            {
              sub_22E8FCA40((_QWORD *)v5, *(_DWORD *)(v4 + 24), 0x1127u, 0, (uint64_t)v121);
              v8 = (unsigned int *)v121;
              goto LABEL_10;
            }
          }
        }
      }
    }
  }
LABEL_123:
  v52 = *(_DWORD *)(v32 + 28);
  if ((v52 & 0x80) == 0)
  {
    if (sub_22E4C7388(v2))
    {
      if ((*(_BYTE *)(v4 + 96) & 7) == 1)
      {
        v6 = *(_DWORD *)(v4 + 24);
        v0 = (_QWORD *)v5;
        v7 = 3738;
        goto LABEL_8;
      }
      v81 = *(_DWORD *)(v4 + 24);
      v82 = *(_QWORD *)(v4 + 48);
      v130 = (void (**)(_QWORD, uint64_t, _QWORD, uint64_t))&unk_24FAB6EF8;
      v131 = 4962;
      v83 = sub_22EE8B0B0(v5, v81, v82);
      v9 = v129;
      if (v83)
        goto LABEL_12;
      v84 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v129 + 48) & 0xFFFFFFFFFFFFFFF0));
      if (!v84 || (*(_DWORD *)(v84 + 28) & 0x7Fu) - 35 > 2 || sub_22E49F698(v84))
        return;
      sub_22E8FCA40((_QWORD *)v5, *(_DWORD *)(v129 + 24), 0xE9Cu, 0, (uint64_t)v120);
      v8 = (unsigned int *)v120;
LABEL_10:
      sub_22E903BEC(v8);
      goto LABEL_11;
    }
    v52 = *(_DWORD *)(v4 + 28);
    v32 = v2;
  }
  v53 = v52 & 0x7F;
  v54 = v32;
  if (v53 != 83)
  {
    v55 = *(_QWORD *)(v32 + 16);
    v56 = v55 & 0xFFFFFFFFFFFFFFF8;
    if ((v55 & 4) != 0)
      v56 = *(_QWORD *)v56;
    for (k = *(_WORD *)(v56 + 8) & 0x7F; k != 83; k = *(_WORD *)(v56 + 8) & 0x7F)
    {
      v58 = -40;
      if (k > 70)
      {
        if (k == 71)
        {
          v58 = -56;
        }
        else if (k != 81)
        {
          goto LABEL_142;
        }
      }
      else
      {
        if (k > 0x18)
          goto LABEL_141;
        if (k == 16)
          goto LABEL_135;
        if (((1 << k) & 0x1066) != 0)
          goto LABEL_148;
        if (k == 24)
        {
LABEL_135:
          v58 = -48;
        }
        else
        {
LABEL_141:
          if (k != 70)
          {
LABEL_142:
            v59 = k - 52;
            if ((k - 33) >= 5)
              v60 = -48;
            else
              v60 = -64;
            if (v59 >= 6)
              v58 = v60;
            else
              v58 = -72;
            goto LABEL_148;
          }
          v58 = -64;
        }
      }
LABEL_148:
      v61 = *(_QWORD *)(v56 + v58 + 16);
      v56 = v61 & 0xFFFFFFFFFFFFFFF8;
      if ((v61 & 4) != 0)
        v56 = *(_QWORD *)v56;
    }
    v54 = v56 - 40;
  }
  v62 = sub_22EFBBF74(v32, *(_QWORD *)(v54 + 88));
  v63 = v62;
  if ((*(_BYTE *)(v4 + 28) & 0x80) != 0 || !v62)
    goto LABEL_167;
  while (1)
  {
    v64 = *(_QWORD *)(*v11 & 0xFFFFFFFFFFFFFFF0);
    if (v64)
      v65 = (*(_DWORD *)(v64 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
    else
      v65 = 0;
    if (v65)
    {
      v66 = *(_QWORD *)(*v11 & 0xFFFFFFFFFFFFFFF0);
      goto LABEL_165;
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v64 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
      break;
    v66 = sub_22F10CF48(*(_QWORD *)(*v11 & 0xFFFFFFFFFFFFFFF0));
    if (!v66)
      break;
LABEL_165:
    v11 = (_QWORD *)(v66 + 32);
  }
  v67 = sub_22F10C2A4(v64);
  if (v67 && (*(_DWORD *)(v67 + 28) & 0x7Eu) - 34 <= 3 && (*(_BYTE *)(v67 + 75) & 0x80) != 0)
    sub_22F31DBEC(v5, *(_QWORD *)(v4 + 48), *(_DWORD *)(v4 + 24), 2, 1);
LABEL_167:
  if (v63)
  {
    if (v63 == 1)
    {
      if ((*(_BYTE *)(v4 + 28) & 0x80) == 0)
      {
        v77 = sub_22EF5C728(*(_QWORD *)(v5 + 88), v10);
        if (v77 && *(_BYTE *)(v77 + 16) == 4)
        {
          v78 = *(_DWORD *)(v4 + 24);
          v79 = *(_QWORD *)(v77 + 32);
          v131 = 2705;
          v130 = (void (**)(_QWORD, uint64_t, _QWORD, uint64_t))&unk_24FAB79A8;
          if (sub_22EE8B0B0(v5, v78, v79))
            sub_22EFC77E8(v129, 1);
        }
        else if ((*(_BYTE *)(v4 + 96) & 7) == 2 && (*(_BYTE *)(v4 + 72) & 3) != 0)
        {
          v85 = *(_DWORD *)(v4 + 24);
          v130 = (void (**)(_QWORD, uint64_t, _QWORD, uint64_t))&unk_24FAB6EF8;
          v131 = 5384;
          sub_22EE8B0B0(v5, v85, v10);
        }
      }
      if ((*(_BYTE *)(v129 + 28) & 0x80) == 0)
      {
        v86 = *(_DWORD *)(v5 + 2800);
        if (v86 >= *(_DWORD *)(v5 + 2804))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v86 = *(_DWORD *)(v5 + 2800);
        }
        *(_QWORD *)(*(_QWORD *)(v5 + 2792) + 8 * v86) = v129;
        ++*(_DWORD *)(v5 + 2800);
      }
    }
    else
    {
      if (v63 == 2 && (*(_DWORD *)(v4 + 28) & 0x7F) != 0x40)
      {
        v68 = *(_QWORD *)(v4 + 16);
        v69 = v68 & 0xFFFFFFFFFFFFFFF8;
        if ((v68 & 4) != 0)
          v69 = *(_QWORD *)v69;
        if ((*(_WORD *)(v69 + 8) & 0x7Eu) - 34 <= 3)
        {
          v70 = 0;
          while (!sub_22EFBC5B4(v2))
          {
            if ((*(_BYTE *)(v2 + 72) & 3) != 0)
            {
              if (v70)
                goto LABEL_181;
              v70 = 1;
            }
            v71 = sub_22E3CD31C((uint64_t *)(v2 + 72), v2);
            if (v71 != v4)
            {
              v2 = v71;
              if (v71)
                continue;
            }
            goto LABEL_181;
          }
          goto LABEL_183;
        }
      }
LABEL_181:
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 4)
      {
        sub_22E8FCA40((_QWORD *)v5, *(_DWORD *)(v4 + 24), 0x1370u, 0, (uint64_t)v117);
        v8 = (unsigned int *)v117;
        goto LABEL_10;
      }
      if (!sub_22E633F90(v4))
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
        {
          sub_22E8FCA40((_QWORD *)v5, *(_DWORD *)(v4 + 24), 0x1235u, 0, (uint64_t)&v130);
          v80 = sub_22E890024((uint64_t)&v130, &v129);
          LODWORD(v123) = *(_DWORD *)(v129 + 24);
          HIDWORD(v123) = v123;
          sub_22E8906A0(v80, (uint64_t *)&v123);
          goto LABEL_9;
        }
        if ((*(_BYTE *)(*(_QWORD *)v12 + 17) & 4) == 0 && (*(_BYTE *)(v4 + 28) & 0x80) == 0 && !sub_22E6314F8(v4))
        {
          v87 = *(_DWORD *)(v4 + 24);
          v88 = sub_22EF5BA38(*(_QWORD *)(v5 + 88), v10);
          v130 = (void (**)(_QWORD, uint64_t, _QWORD, uint64_t))&unk_24FAB6EF8;
          v131 = 4962;
          v89 = sub_22EE8B0B0(v5, v87, v88);
          v9 = v129;
          if (!v89)
          {
            v90 = *(unsigned int *)(v129 + 24);
            LODWORD(v123) = 2;
            v130 = (void (**)(_QWORD, uint64_t, _QWORD, uint64_t))&unk_24FAB7980;
            v131 = 2577;
            v132 = (uint64_t *)&v123;
            if (!sub_22EAB2EB4(v5, v90, v10, &v130))
            {
              if ((*(_BYTE *)(*(_QWORD *)(v5 + 72) + 1) & 1) != 0 && sub_22E3CB5E0(v129))
              {
                v91 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(*(_QWORD *)(v5 + 88), v10) & 0xFFFFFFFFFFFFFFF0)
                                            + 8) & 0xFFFFFFFFFFFFFFF0);
                if (v91)
                {
                  if (*(_BYTE *)(v91 + 16) == 45)
                  {
                    v92 = sub_22F114198(*(_QWORD *)(v91 + 24));
                    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v92 + 104) + 96), *(_QWORD *)(v92 + 104));
                    if ((**(_QWORD **)(v92 + 128) & 0x100) == 0)
                    {
                      v93 = *(unsigned int *)(v5 + 1904);
                      if ((_DWORD)v93)
                      {
                        v94 = *(_QWORD *)(*(_QWORD *)(v5 + 1896) + 8 * v93 - 8);
                        *(_DWORD *)(v94 + 8) |= 8u;
                      }
                    }
                  }
                }
              }
              v95 = *(_QWORD *)(v129 + 48);
              if ((*(_DWORD *)(*(_QWORD *)(v5 + 72) + 52) & 0x40000000) == 0
                || (v96 = *(_QWORD *)((v95 & 0xFFFFFFFFFFFFFFF0) + 8), (v96 & 8) == 0)
                || (*(_QWORD *)((v96 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0x1000)
              {
                LODWORD(v123) = 0;
                *(_QWORD *)&v124 = 0;
                *((_QWORD *)&v124 + 1) = v95;
                LODWORD(__p) = 0;
                *(_QWORD *)&v126 = v129;
                WORD4(v126) = 0;
                v97 = *(unsigned int *)(v129 + 24) | ((unint64_t)*(unsigned int *)(v129 + 24) << 32);
                v116[0] = ((unint64_t)*(unsigned int *)(v129 + 24) << 32) | 3;
                v116[1] = v97;
                sub_22EC395BC(&v130, v5, &v123, v116, 0, 0, 0, 1);
                v98 = sub_22EC3DF80((int)&v130, v5);
                v99 = v129;
                if ((v98 & 0xFFFFFFFFFFFFFFFELL) != 0)
                {
                  v100 = sub_22EBCCCF0(v5, (int *)(v98 & 0xFFFFFFFFFFFFFFFELL));
                  sub_22EFBC9E4(v99, (uint64_t)v100);
                  v99 = v129;
                  *(_BYTE *)(v129 + 96) = *(_BYTE *)(v129 + 96) & 0x9F | 0x20;
                }
                else if (v98)
                {
                  v113 = sub_22F32D6EC(v5, *(_DWORD *)(v129 + 24), *(_DWORD *)(v129 + 24), 0, 0, 0);
                  v99 = v129;
                  if ((v113 & 0xFFFFFFFFFFFFFFFELL) != 0)
                  {
                    sub_22EFBC9E4(v129, v113 & 0xFFFFFFFFFFFFFFFELL);
                    v99 = v129;
                  }
                }
                sub_22EA2A59C((_QWORD *)v5, v99);
                sub_22EC3CE2C((uint64_t)&v130);
              }
              return;
            }
LABEL_11:
            v9 = v129;
          }
LABEL_12:
          sub_22EFC77E8(v9, 1);
        }
      }
    }
  }
  else
  {
LABEL_183:
    if ((*(_BYTE *)(*(_QWORD *)v12 + 17) & 4) == 0)
    {
      if (sub_22E3CEC2C(v4))
      {
        v72 = sub_22EFB948C(v4);
        if ((v72 == 3 || !v72) && (*(_BYTE *)(v4 + 28) & 0x80) == 0)
        {
          v73 = *(_DWORD *)(v4 + 24);
          v130 = (void (**)(_QWORD, uint64_t, _QWORD, uint64_t))&unk_24FAB6EF8;
          v131 = 4962;
          if (sub_22EE8B0B0(v5, v73, v10))
            sub_22EFC77E8(v129, 1);
        }
      }
    }
    if ((*(_DWORD *)(*(_QWORD *)v12 + 16) & 0x400) == 0 && (*(_BYTE *)(v129 + 28) & 0x80) == 0)
    {
      v74 = *(unsigned int *)(v129 + 24);
      LODWORD(v123) = 2;
      v130 = (void (**)(_QWORD, uint64_t, _QWORD, uint64_t))&unk_24FAB7980;
      v131 = 2577;
      v132 = (uint64_t *)&v123;
      if (sub_22EAB2EB4(v5, v74, v10, &v130))
        sub_22EFC77E8(v129, 1);
    }
    if ((*(_BYTE *)(*(_QWORD *)v12 + 17) & 4) == 0
      && (*(_BYTE *)(v129 + 28) & 0x80) == 0
      && (*(_BYTE *)(v129 + 96) & 7) == 3)
    {
      sub_22E8FCA40((_QWORD *)v5, *(_DWORD *)(v129 + 24), 0x1B07u, 0, (uint64_t)v119);
      sub_22E903BEC(v119);
      sub_22E8FCA40((_QWORD *)v5, *(_DWORD *)(v129 + 24), 0x177Du, 0, (uint64_t)v118);
      sub_22E903BEC(v118);
    }
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 88) + 15088) + 856))(*(_QWORD *)(*(_QWORD *)(v5 + 88) + 15088)))
    {
      v75 = v129;
      if ((*(_BYTE *)(v129 + 28) & 0x80) == 0 && (*(_BYTE *)(*(_QWORD *)(v5 + 72) + 1) & 1) == 0)
      {
        v76 = *(_DWORD *)(v5 + 2832);
        if (v76 >= *(_DWORD *)(v5 + 2836))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v76 = *(_DWORD *)(v5 + 2832);
        }
        *(_QWORD *)(*(_QWORD *)(v5 + 2824) + 8 * v76) = v75;
        ++*(_DWORD *)(v5 + 2832);
      }
    }
  }
}

uint64_t sub_22EA128A4(_QWORD *a1, uint64_t *a2, unint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  unint64_t v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  uint64_t v16;
  int v17;
  BOOL v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t **v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  char v46;
  unsigned int v48[24];
  unsigned int v49[5];
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  _BYTE v55[64];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  int v61;
  _BYTE v62[24];
  __int16 v63;
  char v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  if ((*(_WORD *)(a4 + 72) & 0x80) != 0)
    sub_22EFCC320(a4 + 64);
  v11 = *(_QWORD *)(a4 + 80);
  if (v11)
  {
    v46 = 0;
    v45 = a4;
    v44 = (a5 & 3) << 13;
    v42 = a5;
    do
    {
      v12 = (*(_DWORD *)(v11 + 28) & 0x7F) - 49;
      v13 = v12 > 0x13;
      v14 = (1 << v12) & 0x80007;
      if (!v13 && v14 != 0)
      {
        v16 = *(_QWORD *)(v11 + 40);
        if (v16)
        {
          v17 = *(_DWORD *)(v11 + 24);
          v18 = (*(_DWORD *)(v45 + 72) & 0xE000) == 0x4000;
          v51 = *(_QWORD *)(v11 + 40);
          v52 = 0;
          v50 = v18;
          v53 = v55;
          v54 = 0x800000000;
          v57 = 0;
          v58 = 0;
          v56 = 0;
          v59 = a1;
          v60 = v16;
          v61 = v17;
          sub_22EFC6D6C((uint64_t)v62, v16);
          *(_OWORD *)&v62[8] = xmmword_22F463A40;
          v63 = 1;
          v64 = 1;
          v65 = 0;
          sub_22EC56024((uint64_t)&v52);
          if (!sub_22EC63520((uint64_t)a1, (uint64_t)&v52, a2, 0, 0))
            goto LABEL_29;
          v19 = *(_QWORD *)v53 & 0xFFFFFFFFFFFFFFFCLL;
          v20 = *(_DWORD *)(v19 + 28) & 0x7F;
          v13 = v20 > 0x2F;
          v21 = (1 << v20) & 0xC00000060000;
          if (!v13 && v21 != 0)
            v19 = sub_22EFBAEA4(*(_QWORD *)v53 & 0xFFFFFFFFFFFFFFFCLL);
          if (sub_22E8CE620((uint64_t)(a1 + 415), (_QWORD *)v19, a3, a2, 0))
          {
            sub_22E8FCA40(a1, v17, 0xA4Du, 0, (uint64_t)v49);
            v23 = sub_22E894E38((uint64_t)v49, (unsigned __int8 *)&v50);
            sub_22E894538(v23, &v51);
            sub_22E903BEC(v49);
            sub_22E8FCA40(a1, *(_DWORD *)(v19 + 24), 0x6Cu, 0, (uint64_t)v48);
            sub_22E903BEC(v48);
            if ((_BYTE)v65)
            {
              if ((_DWORD)v52 == 5)
              {
                sub_22EC64D18(v59, (uint64_t)&v52);
              }
              else if (v57 && (*(_DWORD *)(v59[9] + 52) & 0x400000) != 0)
              {
                sub_22E90B5FC((unint64_t)v59, (uint64_t)&v52);
              }
            }
            if (v56)
            {
              v37 = sub_22EC6CBD0(v56);
              MEMORY[0x2348A0E9C](v37, 0x10E0C409F09D3C3);
            }
            if (v53 != v55)
              free(v53);
            v46 = 1;
          }
          else
          {
LABEL_29:
            if ((_BYTE)v65)
            {
              if ((_DWORD)v52 == 5)
              {
                sub_22EC64D18(v59, (uint64_t)&v52);
              }
              else if (v57 && (*(_DWORD *)(v59[9] + 52) & 0x400000) != 0)
              {
                sub_22E90B5FC((unint64_t)v59, (uint64_t)&v52);
              }
            }
            if (v56)
            {
              v38 = sub_22EC6CBD0(v56);
              MEMORY[0x2348A0E9C](v38, 0x10E0C409F09D3C3);
            }
            if (v53 != v55)
              free(v53);
            v24 = *(unsigned int *)(a6 + 8);
            if ((*(_DWORD *)(v11 + 28) & 0x7F) == 0x44)
            {
              sub_22F2633B0(a6, *(_BYTE **)(v11 + 56), (_BYTE *)(*(_QWORD *)(v11 + 56) + 8 * *(unsigned int *)(v11 + 64)));
              v25 = *(_DWORD *)(a6 + 8);
            }
            else
            {
              v26 = *(unsigned int *)(a6 + 8);
              if (v24 >= *(_DWORD *)(a6 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v26 = *(unsigned int *)(a6 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a6 + 8 * v26) = v11;
              v25 = *(_DWORD *)(a6 + 8) + 1;
              *(_DWORD *)(a6 + 8) = v25;
            }
            v27 = sub_22E3CD3D4(a1[11] + 2032, 8 * v25, 3);
            v28 = *(unsigned int *)(a6 + 8);
            v43 = v24;
            if ((_DWORD)v28)
            {
              v29 = 0;
              do
              {
                *(_QWORD *)(v27 + v29) = *(_QWORD *)(*(_QWORD *)a6 + v29);
                v29 += 8;
              }
              while (8 * v28 != v29);
            }
            else
            {
              LODWORD(v28) = 0;
            }
            v30 = *(_QWORD *)(v11 + 40);
            if ((v30 & 7) != 0)
              v31 = 0;
            else
              v31 = v30 & 0xFFFFFFFFFFFFFFF8;
            v32 = sub_22F3AD82C(a1[11], a3, *(_DWORD *)(v11 + 24), v31, *(_QWORD *)(v11 + 48), v27, v28);
            if ((*(_BYTE *)(v11 + 29) & 1) != 0)
            {
              sub_22EFC8E88(v11);
              v34 = *v33;
              if ((*(_BYTE *)(v11 + 29) & 1) != 0)
              {
                sub_22EFC8E88(v11);
                v36 = *(_QWORD *)v35 + 8 * *(unsigned int *)(v35 + 8);
              }
              else
              {
                v36 = 0;
              }
              while (v34 != (uint64_t *)v36)
              {
                v39 = *v34++;
                v40 = sub_22EF9C5AC(v39);
                sub_22EFCA95C(v32, v40);
              }
            }
            *(_DWORD *)(v32 + 28) = v44 | *(_DWORD *)(v32 + 28) & 0xFFFF9FFF | 0x200;
            sub_22EA0483C((uint64_t)a1, v32, a2, 1);
            if (v42 != 3)
              *(_DWORD *)(v32 + 28) = *(_DWORD *)(v32 + 28) & 0xFFFF9FFF | v44;
            sub_22E50D8F0(a6, v43);
          }
        }
      }
      v11 = *(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8;
    }
    while (v11);
  }
  else
  {
    v46 = 0;
  }
  return v46 & 1;
}

void sub_22EA12DAC(uint64_t a1, uint64_t a2)
{
  sub_22EA12DB4(a1, a2 + 40);
}

void sub_22EA12DB4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_22EA12DF8()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_QWORD *)v0 = *(_QWORD *)(v2 + 8);
  *(_DWORD *)(v0 + 8) = v1;
  *(_QWORD *)(v0 + 16) = 0;
}

uint64_t sub_22EA12F94()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22EF685D4(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 24), *(_DWORD *)(*(_QWORD *)(v1 + 8) + 4), v0);
}

void sub_22EA1302C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,unsigned int a23)
{
  int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v27 = *(_QWORD *)(v25 + 8);
  *(_QWORD *)(v26 - 56) = v27;
  v28 = sub_22F0F08CC((uint64_t *)(v26 - 56));
  v29 = v28;
  if (v28 && (*(_DWORD *)(v28 + 28) & 0x7F) == 0x1C)
  {
    sub_22F3AE65C((_QWORD *)(v24[11] + 15224), v28);
    JUMPOUT(0x22EA13024);
  }
  v30 = sub_22E8FCA40(v24, v23, 0xC78u, 0, (uint64_t)&a23);
  a22 = sub_22F31CFF0(v30, v27);
  v31 = sub_22E8900C4((uint64_t)&a23, &a22);
  sub_22F30C54C(v31, (uint64_t *)(v26 - 56));
  sub_22E903BEC(&a23);
  if (v29)
  {
    sub_22E8FCA40(v24, *(_DWORD *)(v29 + 24), 0x17D6u, 0, (uint64_t)&a9);
    sub_22E903BEC(&a9);
  }
  JUMPOUT(0x22EA12F74);
}

uint64_t sub_22EA130FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  int v9;

  *(_WORD *)(a3 + 1088) &= 0xFFF3u;
  result = sub_22EA13184(a1, a2, (uint64_t **)a3, 0, 0);
  v5 = *(_QWORD *)(a1 + 224);
  if (v5)
  {
    if ((*(_WORD *)(v5 + 8) & 0x7Fu) - 19 <= 4 && result != 0)
    {
      v7 = *(_QWORD *)(result + 16);
      v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      if ((v7 & 4) != 0)
        v8 = *(_QWORD *)v8;
      v9 = *(_WORD *)(v8 + 8) & 0x7F;
      if (v9 == 83 || v9 == 16)
        *(_DWORD *)(result + 28) |= 0x1000u;
    }
  }
  return result;
}

uint64_t sub_22EA13184(uint64_t a1, uint64_t a2, uint64_t **a3, int **a4, uint64_t a5)
{
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int i;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t *v24;
  BOOL v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  char *v38;
  char *v39;
  char *v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  _BOOL8 v46;
  unint64_t v47;
  unsigned int v48;
  int v49;
  unint64_t v51;
  unsigned int v52;
  BOOL v53;
  unsigned int v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 *v82;
  _BYTE *v83;
  uint64_t v84;
  int v85;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int8 *v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  unint64_t v118;
  int v119[2];
  _BYTE v120[103];
  char v121;
  __int128 v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t *v128;
  char v129;
  uint64_t v130;
  char v131;
  void *__p;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  int v137;
  uint64_t v138[12];
  unsigned int v139;
  void *v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  __int16 v146;
  char v147;
  char v148;
  uint64_t v149;

  v149 = *MEMORY[0x24BDAC8D0];
  v10 = a3 + 5;
  sub_22EA12DB4(a1, (uint64_t)(a3 + 5));
  v11 = v126;
  v125 = v126;
  if (*((_DWORD *)a3 + 22))
    return sub_22EAA5428(a1, a2, (uint64_t *)a3, a4, a5);
  if (!(_QWORD)v126)
  {
    if (((_WORD)a3[136] & 1) != 0 || (**a3 & 0x3F000) == 0x32000)
      return 0;
    sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)*a3 + 22), 0xC51u, 0, (uint64_t)&v139);
    v138[0] = (*a3)[11];
    v19 = sub_22E8906A0((uint64_t)&v139, v138);
    v20 = (uint64_t)a3[9];
    goto LABEL_23;
  }
  if ((sub_22EE72C58(a1, (uint64_t *)&v126, 2) & 1) != 0)
    return 0;
  for (i = *(_DWORD *)(a2 + 8); (i & 0x88) != 8; i = *(_DWORD *)(a2 + 8))
    a2 = *(_QWORD *)a2;
  v21 = *(_QWORD *)(a1 + 216);
  v22 = *((_DWORD *)a3 + 2);
  v23 = *((_DWORD *)a3 + 3);
  v124 = v21;
  v24 = a3[2];
  if (v22)
    v25 = v23 == 0;
  else
    v25 = 1;
  if (!v25 && v24 == 0)
  {
    *((_WORD *)a3 + 544) |= 1u;
    goto LABEL_27;
  }
  if (!v24)
    goto LABEL_27;
  if ((sub_22EE72B18(a1, (uint64_t)(a3 + 1), 10) & 1) != 0)
    return 0;
  v27 = **a3;
  v28 = sub_22E958204(a1, (uint64_t)(a3 + 1), (v27 & 0x1000000000) == 0);
  v124 = v28;
  if (!v28 || (*(_WORD *)(v28 + 8) & 0x7F) == 0x21)
  {
    sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)a3 + 16), 0x12F0u, 0, (uint64_t)&v139);
    v138[0] = (uint64_t)a3[2];
    v19 = sub_22EA02390((uint64_t)&v139, v138);
    v20 = (uint64_t)a3[1];
LABEL_23:
    v128 = (uint64_t *)v20;
    v29 = (uint64_t *)&v128;
LABEL_24:
    sub_22E8906A0(v19, v29);
    sub_22E903BEC(&v139);
    return 0;
  }
  v21 = v28;
  v116 = sub_22EFC7ADC(v28);
  if ((v116 & 1) == 0 && (sub_22E958490(a1, a3 + 1, v21) & 1) != 0)
    return 0;
  if ((*(_WORD *)(v21 + 8) & 0x7Fu) - 35 <= 2 && !*(_QWORD *)(v21 + 64))
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v21 + 40) + 96), *(_QWORD *)(v21 + 40));
    if (!*(_QWORD *)(v21 + 64))
    {
      sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)a3 + 16), 0xEB8u, 0, (uint64_t)&v139);
      v94 = sub_22E894538((uint64_t)&v139, &v125);
      v19 = sub_22E894FB4(v94, (uint64_t *)&v124);
      v138[0] = (uint64_t)a3[1];
      v29 = v138;
      goto LABEL_24;
    }
  }
  if ((*((_BYTE *)*a3 + 4) & 0x10) == 0
    && sub_22EA14220(a1, (uint64_t)(a3 + 1), v21, v11, *((_DWORD *)a3 + 16), *((_DWORD *)a3 + 10) == 7))
  {
    if ((*(_WORD *)(v21 + 8) & 0x7Eu) - 34 < 4)
      return 0;
    *((_WORD *)a3 + 544) |= 1u;
  }
  if ((v27 & 0x1000000000) == 0 && ((v116 ^ 1) & 1) == 0 && a5)
  {
    v115 = *(_QWORD *)(a1 + 3200);
    v117 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 3200) = 0;
    v114 = *(_QWORD *)(a1 + 10288);
    v112 = *(_DWORD *)(a1 + 2192);
    v113 = *(_DWORD *)(a1 + 1944);
    *(_QWORD *)(a1 + 216) = v21;
    *(_QWORD *)(a1 + 10288) = 0;
    *(_DWORD *)(a1 + 1944) = *(_DWORD *)(a1 + 1904);
    *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a1 + 1960);
    v73 = (uint64_t)*a3;
    v74 = (*(_DWORD *)*a3 >> 12) & 0x3F;
    *(_QWORD *)v119 = v21;
    if (v74 <= 0x25)
    {
      if (((1 << v74) & 0x2130000000) == 0)
      {
        if (((1 << v74) & 0xC0000000) == 0)
          goto LABEL_195;
        v106 = *(_QWORD *)(v73 + 8);
        v105 = (unint64_t *)(v73 + 8);
        v107 = sub_22F346C38(a1, v106);
        if ((v107 & 1) != 0)
          goto LABEL_208;
        v93 = v107 & 0xFFFFFFFFFFFFFFFELL;
        v76 = v105;
        goto LABEL_192;
      }
      v76 = (unint64_t *)(v73 + 8);
      v75 = *(_QWORD *)(v73 + 8);
      if (v75 >= 0x10)
      {
        v77 = *(_QWORD *)(v75 & 0xFFFFFFFFFFFFFFF0);
        if (v77 && *(_DWORD *)(v77 + 16) == 57)
        {
          v75 = *(_QWORD *)(v77 + 8);
          if (v75 < 0x10 || (*(_BYTE *)(*(_QWORD *)(v75 & 0xFFFFFFFFFFFFFFF0) + 17) & 2) == 0)
            goto LABEL_195;
          v78 = *(uint64_t **)(v77 + 24);
          if (v78)
            goto LABEL_190;
          goto LABEL_189;
        }
        if ((*(_DWORD *)(v77 + 16) & 0x200) != 0)
        {
LABEL_189:
          v78 = sub_22EF579A8(*(_QWORD *)(a1 + 88), v75, *(_DWORD *)(v73 + 120));
LABEL_190:
          v92 = sub_22ED722D8(a1, v78, *((_DWORD *)a3 + 16), v11);
          if (!v92)
            goto LABEL_208;
          v93 = sub_22EE7D030(a1, *v92, (uint64_t)v92);
LABEL_192:
          *v76 = v93;
        }
      }
    }
LABEL_195:
    v95 = *((unsigned int *)a3 + 30);
    if (!(_DWORD)v95)
    {
LABEL_209:
      if (v117)
      {
        *(_QWORD *)(a1 + 216) = v117;
        *(_QWORD *)(a1 + 3200) = v115;
        *(_QWORD *)(a1 + 10288) = v114;
        *(_DWORD *)(a1 + 1944) = v113;
        *(_DWORD *)(a1 + 2192) = v112;
      }
      v21 = *(_QWORD *)v119;
      goto LABEL_27;
    }
    v96 = 0;
    v97 = 120 * v95;
    while (1)
    {
      v98 = a3[14];
      if (LODWORD(v98[v96 / 8]) == 5 && (sub_22ED72834(a1, (uint64_t)&v98[v96 / 8 + 5]) & 1) != 0)
        break;
      v96 += 120;
      if (v97 == v96)
        goto LABEL_209;
    }
LABEL_208:
    *((_WORD *)a3 + 544) |= 1u;
    goto LABEL_209;
  }
LABEL_27:
  v118 = v21;
  v30 = sub_22EE8156C(a1, (uint64_t)a3, a2, v13, v14, v15, v16, v17);
  v31 = *v30;
  if (sub_22EE67290(a1, *((_DWORD *)a3 + 16), v30, 2))
    *((_WORD *)a3 + 544) |= 1u;
  v32 = *(_QWORD *)(a1 + 216);
  v33 = *(_WORD *)(v32 + 8) & 0x7F;
  v34 = -40;
  if (v33 <= 0x46)
  {
    if (v33 <= 0x18)
    {
      if (v33 == 16)
      {
LABEL_32:
        v34 = -48;
        goto LABEL_44;
      }
      if (((1 << v33) & 0x1066) != 0)
        goto LABEL_44;
      if (v33 == 24)
        goto LABEL_32;
    }
    if (v33 == 70)
    {
LABEL_42:
      v34 = -64;
      goto LABEL_44;
    }
    goto LABEL_40;
  }
  if (v33 == 83)
    goto LABEL_44;
  if (v33 == 71)
  {
    v34 = -56;
    goto LABEL_44;
  }
  if (v33 != 81)
  {
LABEL_40:
    if (v33 - 52 >= 6)
    {
      if (v33 - 33 >= 5)
        goto LABEL_32;
      goto LABEL_42;
    }
    v34 = -72;
  }
LABEL_44:
  if (sub_22EFB9D84(v32 + v34))
    v35 = 1;
  else
    v35 = 2;
  sub_22EA406B0((uint64_t)&v139, a1, &v126, 0, v35);
  if (a3[2])
  {
    sub_22EC611AC(a1, &v139, v21, 0);
    v36 = v141;
    if (v141)
    {
      v37 = 0;
      v38 = (char *)v140;
      v39 = (char *)v140 - 8;
      v40 = (char *)v140;
      v41 = v141;
      while (2)
      {
        v42 = *(_QWORD *)v40;
        while (1)
        {
          v43 = *(_DWORD *)((v42 & 0xFFFFFFFFFFFFFFFCLL) + 28);
          if ((v43 & 0x7E) != 0x2E)
          {
            v44 = v43 & 0x7F;
            if (v44 != 42 && v44 != 74)
              break;
          }
          v42 = *(_QWORD *)&v39[8 * v36];
          v141 = v41 - 1;
          *(_QWORD *)v40 = v42;
          v37 = 1;
          v36 = --v41;
          if (v40 == &v38[8 * v41])
            goto LABEL_58;
        }
        v40 += 8;
        v36 = v41;
        if (v40 != &v38[8 * v41])
          continue;
        break;
      }
      if (v37)
LABEL_58:
        sub_22EA3DA00((uint64_t)&v139);
    }
  }
  else
  {
    v45 = **a3 & 7;
    if (v45 == 1)
    {
      v46 = 0;
    }
    else
    {
      v47 = *(_QWORD *)(a1 + 216);
      v48 = *(_WORD *)(v47 + 8) & 0x7F;
      if ((v48 <= 0x18 && ((1 << v48) & 0x1000006) != 0 || v48 - 52 <= 5)
        && (v45 == 2
         || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                             + 16)
          - 25 < 2))
      {
        v46 = (*(_WORD *)(sub_22F3B16C0(v47) + 8) & 0x7F) == 83;
        sub_22F30C4D4((uint64_t)&v139, 9);
        v146 = 257;
        sub_22EC56024((uint64_t)&v139);
      }
      else
      {
        v49 = *(_WORD *)(sub_22EFCBB30(v47) + 8) & 0x7F;
        v46 = v45 != 3 && v49 == 83;
      }
    }
    sub_22EC63520(a1, &v139, a2, v46, 0);
  }
  if (v139 == 2)
  {
    v51 = *(_QWORD *)v140 & 0xFFFFFFFFFFFFFFFCLL;
    v52 = *(_DWORD *)(v51 + 28) & 0x7F;
    v53 = v52 > 0x2F || ((1 << v52) & 0xC00000060000) == 0;
    v54 = *(_DWORD *)(v51 + 28) & 0x7F;
    if (!v53)
      v54 = *(_DWORD *)(sub_22EFBAEA4(*(_QWORD *)v140 & 0xFFFFFFFFFFFFFFFCLL) + 28) & 0x7F;
    v55 = v54 > 0x3B;
    v56 = (1 << v54) & 0x800004100000000;
    if (!v55 && v56 != 0)
    {
      if (((_WORD)a3[136] & 1) == 0 && (**a3 & 0x3F000) != 0x32000)
      {
        v85 = *((_DWORD *)a3 + 16);
        if (v52 <= 0x2F && ((1 << v52) & 0xC00000060000) != 0)
        {
          v87 = *((_DWORD *)a3 + 16);
          v88 = sub_22EFBAEA4(v51);
          v85 = v87;
          v51 = v88;
        }
        sub_22F34553C(a1, v85, v51);
      }
      v139 = 0;
      v141 = 0;
      if (v143)
      {
        v58 = sub_22EC6CBD0(v143);
        MEMORY[0x2348A0E9C](v58, 0x10E0C409F09D3C3);
      }
      v148 = 0;
      v143 = 0;
      v144 = 0;
    }
  }
  v59 = v31 & 0xFFFFFFFFFFFFFFF0;
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v59 + 8) & 0xFFFFFFFFFFFFFFF0) + 16)
     - 25 >= 2)
  {
    v122 = v126;
    v123 = v127;
    if (sub_22EA14140((_QWORD *)a1, v118, (uint64_t)&v122))
    {
      v139 = 0;
      v141 = 0;
      if (v143)
      {
        v60 = sub_22EC6CBD0(v143);
        MEMORY[0x2348A0E9C](v60, 0x10E0C409F09D3C3);
      }
      v148 = 0;
      v143 = 0;
      v144 = 0;
    }
  }
  if (v139 == 2)
  {
    v61 = *(_QWORD *)v140 & 0xFFFFFFFFFFFFFFFCLL;
    v62 = *(_DWORD *)(v61 + 28) & 0x7F;
    if (v62 <= 0x2F && ((1 << v62) & 0xC00000060000) != 0)
      v62 = *(_DWORD *)(sub_22EFBAEA4(v61) + 28) & 0x7F;
    if (v62 - 33 <= 4
      && (**a3 & 7) != 1
      && (!a5
       || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v59 + 8) & 0xFFFFFFFFFFFFFFF0) + 16)
        - 25 <= 1))
    {
      v139 = 0;
      v141 = 0;
      if (v143)
      {
        v64 = sub_22EC6CBD0(v143);
        MEMORY[0x2348A0E9C](v64, 0x10E0C409F09D3C3);
      }
      v148 = 0;
      v143 = 0;
      v144 = 0;
    }
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
    sub_22EAA474C(a1, (uint64_t)a3);
  v121 = 1;
  v65 = (uint64_t)*a3;
  if ((**a3 & 7) != 1)
  {
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v59 + 8) & 0xFFFFFFFFFFFFFFF0) + 16)
       - 25 > 1)
      v67 = sub_22EA19234((_QWORD *)a1, a2, (uint64_t)a3, v118, (uint64_t *)v30);
    else
      sub_22EA147E8((_QWORD *)a1, a2, (uint64_t)a3, v118, (uint64_t *)v30, (int)&v139, a4, a5, (uint64_t)&v121);
    v12 = v67;
    if (!v67)
      goto LABEL_131;
    goto LABEL_126;
  }
  if (!a5)
  {
    if (a3[2])
    {
      sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)a3 + 16), 0x120Bu, 0, (uint64_t)v138);
      v128 = a3[1];
      sub_22E8906A0((uint64_t)v138, (uint64_t *)&v128);
      sub_22E903BEC((unsigned int *)v138);
      *((_WORD *)a3 + 544) |= 1u;
      v118 = *(_QWORD *)(a1 + 216);
      v139 = 0;
      v141 = 0;
      if (v143)
      {
        v109 = sub_22EC6CBD0(v143);
        MEMORY[0x2348A0E9C](v109, 0x10E0C409F09D3C3);
      }
      v148 = 0;
      v143 = 0;
      v144 = 0;
      v65 = (uint64_t)*a3;
    }
    sub_22EA11438((unsigned int *)a1, v65);
    v68 = (uint64_t)*a3;
    v69 = **a3;
    if ((v69 & 0x300000000) != 0)
    {
      v25 = (v69 & 0x100000000) == 0;
      v110 = 164;
      if (v25)
        v110 = 184;
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v68 + v110), 0xE2Au, 0, (uint64_t)v138);
      LODWORD(v128) = (**(_DWORD **)(a1 + 72) >> 11) & 1;
      sub_22E89519C((uint64_t)v138, (unsigned int *)&v128);
      sub_22E903BEC((unsigned int *)v138);
      v68 = (uint64_t)*a3;
      v69 = **a3;
    }
    if ((v69 & 0x6000000000) != 0)
    {
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v68 + 196), 0xE3Bu, 0, (uint64_t)v138);
      LODWORD(v128) = 1;
      v111 = sub_22E8900C4((uint64_t)v138, (int *)&v128);
      LODWORD(v136) = ((unint64_t)**a3 >> 37) & 3;
      sub_22E8900C4(v111, (int *)&v136);
      sub_22E903BEC((unsigned int *)v138);
    }
    if (*v10)
    {
      if (*v10 == 9)
      {
        sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)a3 + 16), 0xC77u, 0, (uint64_t)v138);
        sub_22F2F30F4((uint64_t)v138, (uint64_t)"typedef");
      }
      else
      {
        sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)a3 + 16), 0x13A2u, 0, (uint64_t)v138);
        v128 = a3[8];
        sub_22E8906A0((uint64_t)v138, (uint64_t *)&v128);
      }
      v66 = (unsigned int *)v138;
      goto LABEL_110;
    }
    v70 = sub_22EFC45FC(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 216), *((_DWORD *)a3 + 18), *((_DWORD *)a3 + 16), (uint64_t)a3[6], (uint64_t)v30);
    v12 = v70;
    if (((_WORD)a3[136] & 1) != 0 || (v71 = (uint64_t)*a3, (**a3 & 0x3F000) == 0x32000))
    {
      sub_22EFC77E8(v70, 1);
LABEL_124:
      if (!v12)
        goto LABEL_131;
      sub_22EA7E768((_QWORD *)a1, a2, v12, (uint64_t)a3);
      sub_22EA1C0F0(a1, a2, v12);
      LOBYTE(v138[0]) = ((_BYTE)a3[136] & 0x10) != 0;
      sub_22EA1C3E4((_QWORD *)a1, (uint64_t *)a2, v118, v12, (uint64_t)&v139, v138);
      *((_WORD *)a3 + 544) = (_WORD)a3[136] & 0xFFEF | (16 * LOBYTE(v138[0]));
LABEL_126:
      if (*(_QWORD *)(v12 + 40) && v121)
        sub_22EA0483C(a1, v12, (uint64_t *)a2, 1);
      if (*(_DWORD *)(a1 + 12304))
        sub_22EC7FD5C(a1, 0, v12, 0);
      goto LABEL_131;
    }
    if (!*(_DWORD *)(v71 + 192))
    {
LABEL_183:
      if (((*(_DWORD *)v71 >> 12) & 0x3Fu) - 23 <= 4)
        sub_22EA10DE0(a1, *(_QWORD *)(v71 + 8), v12);
      goto LABEL_124;
    }
    v79 = *(_WORD *)(*(_QWORD *)(a1 + 216) + 8) & 0x7F;
    if ((v79 > 0x18 || ((1 << v79) & 0x1000006) == 0) && v79 - 52 > 5)
    {
      v91 = *(_QWORD *)(v70 + 8);
      if ((v91 & 6) != 0)
        *(_QWORD *)(v70 + 8) = v91 | 6;
      goto LABEL_183;
    }
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v70 + 24), 0xF69u, 0, (uint64_t)v138);
    v137 = 2;
    v80 = sub_22E8900C4((uint64_t)v138, &v137);
    v81 = v80;
    if (*(_BYTE *)(v80 + 80))
    {
      v82 = *(unsigned __int8 **)(v80 + 32);
      if (!v82)
      {
        v82 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(v81 + 40));
        *(_QWORD *)(v81 + 32) = v82;
      }
      v82[*v82 + 1] = 11;
      v83 = *(_BYTE **)(v81 + 32);
    }
    else
    {
      if (!*(_BYTE *)(v80 + 92))
        goto LABEL_180;
      v99 = (uint64_t *)(*(_QWORD *)v80 + 12784);
      v100 = *(_QWORD *)(v80 + 16);
      if (v100)
        v100 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v100 + 32))(v100);
      v128 = (uint64_t *)v100;
      v101 = sub_22F2F1D6C(v99, (uint64_t *)&v128)[1] + 32 * *(unsigned int *)(v81 + 88);
      v104 = *(unsigned __int8 **)(v101 + 8);
      v103 = (_QWORD *)(v101 + 8);
      v102 = v104;
      if (!v104)
      {
        v102 = (unsigned __int8 *)sub_22E3B8AAC(v103[1]);
        *v103 = v102;
      }
      v102[*v102 + 1] = 11;
      v83 = (_BYTE *)*v103;
    }
    v84 = *v83;
    *v83 = v84 + 1;
    *(_QWORD *)&v83[8 * v84 + 16] = v12;
LABEL_180:
    LODWORD(v136) = *((_DWORD *)*a3 + 48);
    HIDWORD(v136) = v136;
    v89 = sub_22E8906A0(v81, &v136);
    v90 = *((unsigned int *)*a3 + 48) | ((unint64_t)*((unsigned int *)*a3 + 48) << 32);
    v130 = 0;
    v131 = 0;
    v133 = 0;
    v134 = 0;
    __p = 0;
    v135 = 0;
    v128 = (uint64_t *)v90;
    v129 = 1;
    sub_22E890748(v89, &v128);
    if (SHIBYTE(v134) < 0)
      operator delete(__p);
    sub_22E903BEC((unsigned int *)v138);
    v71 = (uint64_t)*a3;
    goto LABEL_183;
  }
  sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)a3 + 16), 0x12FFu, 0, (uint64_t)v120);
  v66 = (unsigned int *)v120;
LABEL_110:
  sub_22E903BEC(v66);
  v12 = 0;
LABEL_131:
  if (v147)
  {
    if (v139 == 5)
    {
      sub_22EC64D18(v145, (uint64_t)&v139);
    }
    else if (v144 && (*(_DWORD *)(v145[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v145, (uint64_t)&v139);
    }
  }
  if (v143)
  {
    v108 = sub_22EC6CBD0(v143);
    MEMORY[0x2348A0E9C](v108, 0x10E0C409F09D3C3);
  }
  if (v140 != &v142)
    free(v140);
  return v12;
}

uint64_t sub_22EA14140(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14[24];
  uint64_t v15;

  v3 = 0;
  v4 = *(_QWORD *)a3;
  v15 = *(_QWORD *)a3;
  if (a2 && (*(_WORD *)(a2 + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD)
  {
    while ((*(_BYTE *)(a2 + 11) & 1) != 0)
    {
      v12 = a3;
      v13 = v4;
      v11 = a1;
      v9 = *(_QWORD *)(sub_22EFCAD5C(a2) + 16);
      a2 = v9 & 0xFFFFFFFFFFFFFFF8;
      if ((v9 & 4) != 0)
        a2 = *(_QWORD *)a2;
      v3 = 0;
      if (a2)
        v10 = (*(_WORD *)(a2 + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD;
      else
        v10 = 0;
      a1 = v11;
      a3 = v12;
      v4 = v13;
      if (!v10)
        return v3;
    }
    v6 = *(_QWORD *)(a2 - 24);
    if (v6 >= 8 && (*(_QWORD *)(a2 - 24) & 7) == 0 && v6 == v4)
    {
      sub_22E8FCA40(a1, *(_DWORD *)(a3 + 8), 0xEBEu, 0, (uint64_t)v14);
      sub_22E894538((uint64_t)v14, &v15);
      sub_22E903BEC(v14);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

BOOL sub_22EA14220(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5, char a6)
{
  unint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  __int16 v17;
  unsigned int v18;
  int v19;
  _QWORD *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 result;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50[2];
  unint64_t v51;
  unint64_t v52;
  _BYTE v53[12];
  char v54;
  void *__p;
  uint64_t v56;
  uint64_t v57;
  char v58;
  unsigned int v59[24];
  uint64_t v60;

  v60 = a4;
  v11 = a1 + 216;
LABEL_2:
  v11 = *(_QWORD *)v11;
  while (1)
  {
    v12 = *(_WORD *)(v11 + 8) & 0x7F;
    v13 = v12 == 12 || v12 == 2;
    if (!v13)
      break;
    v14 = *(_QWORD *)(v11 - 24);
    v11 = v14 & 0xFFFFFFFFFFFFFFF8;
    if ((v14 & 4) != 0)
      goto LABEL_2;
  }
  if (a3)
  {
    v15 = sub_22EFCC008(v11);
    if (v15 == sub_22EFCC008(a3))
    {
      if ((*(_WORD *)(v11 + 8) & 0x7Eu) - 34 > 3)
      {
        sub_22E8FCA40((_QWORD *)a1, a5, 0x1A67u, 0, (uint64_t)v59);
        sub_22E894538((uint64_t)v59, &v60);
        goto LABEL_96;
      }
      if ((**(_QWORD **)(a1 + 72) & 0x20) != 0)
        v26 = 6723;
      else
        v26 = 3769;
      sub_22E8FCA40((_QWORD *)a1, a5, v26, 0, (uint64_t)v59);
      v27 = sub_22E894538((uint64_t)v59, &v60);
      v28 = *(_QWORD *)a2;
      *(_QWORD *)&v53[4] = 0;
      v54 = 0;
      v56 = 0;
      v57 = 0;
      __p = 0;
      v58 = 0;
      v52 = v28;
      v53[0] = 1;
      sub_22E890748(v27, &v52);
      if (SHIBYTE(v57) < 0)
        operator delete(__p);
      sub_22E903BEC(v59);
      result = 0;
      *(_DWORD *)(a2 + 24) = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      return result;
    }
  }
  v16 = sub_22EFCBE78(v11, a3);
  v17 = *(_WORD *)(v11 + 8);
  v18 = (v17 & 0x7E) - 34;
  if ((v16 & 1) == 0 && (a6 & 1) == 0)
  {
    if (v18 <= 3)
    {
      v19 = a5;
      v20 = (_QWORD *)a1;
      v21 = 3776;
LABEL_60:
      sub_22E8FCA40(v20, v19, v21, 0, (uint64_t)v59);
      v41 = sub_22E894538((uint64_t)v59, &v60);
      v52 = *(_QWORD *)a2;
      v42 = (uint64_t *)&v52;
LABEL_61:
      sub_22E8906A0(v41, v42);
      sub_22E903BEC(v59);
      return 1;
    }
    v39 = *(_WORD *)(a3 + 8) & 0x7F;
    if (v39 == 83)
    {
      v19 = a5;
      v20 = (_QWORD *)a1;
      v21 = 3660;
      goto LABEL_60;
    }
    if ((v17 & 0x7Eu) - 52 <= 5)
    {
      v19 = a5;
      v20 = (_QWORD *)a1;
      v21 = 3662;
      goto LABEL_60;
    }
    v40 = v17 & 0x7F;
    if (v40 == 5)
    {
      if (v39 == 16)
        return 0;
      v19 = a5;
      v20 = (_QWORD *)a1;
      v21 = 3342;
      goto LABEL_60;
    }
    v19 = a5;
    if (v40 == 1)
    {
      v20 = (_QWORD *)a1;
      v21 = 3661;
      goto LABEL_60;
    }
    sub_22E8FCA40((_QWORD *)a1, a5, 0xE4Fu, 0, (uint64_t)v59);
    v43 = sub_22E894538((uint64_t)v59, &v60);
    v44 = *(_WORD *)(v11 + 8) & 0x7F;
    v45 = -40;
    if (v44 > 0x46)
    {
      switch(v44)
      {
        case 'S':
          goto LABEL_78;
        case 'G':
          v45 = -56;
          goto LABEL_78;
        case 'Q':
LABEL_78:
          v52 = v11 + v45;
          v46 = sub_22E890024(v43, (uint64_t *)&v52);
          v47 = *(_WORD *)(a3 + 8) & 0x7F;
          v48 = -40;
          if (v47 > 0x46)
          {
            switch(v47)
            {
              case 'S':
                goto LABEL_93;
              case 'G':
                v48 = -56;
                goto LABEL_93;
              case 'Q':
                goto LABEL_93;
            }
          }
          else
          {
            if (v47 <= 0x18)
            {
              if (v47 == 16)
                goto LABEL_81;
              if (((1 << v47) & 0x1066) != 0)
                goto LABEL_93;
              if (v47 == 24)
              {
LABEL_81:
                v48 = -48;
LABEL_93:
                v50[0] = a3 + v48;
                v41 = sub_22E890024(v46, v50);
                v51 = *(_QWORD *)a2;
                v42 = (uint64_t *)&v51;
                goto LABEL_61;
              }
            }
            if (v47 == 70)
            {
LABEL_91:
              v48 = -64;
              goto LABEL_93;
            }
          }
          if (v47 - 52 < 6)
          {
            v48 = -72;
            goto LABEL_93;
          }
          if (v47 - 33 < 5)
            goto LABEL_91;
          goto LABEL_81;
      }
    }
    else
    {
      if (v44 <= 0x18)
      {
        if (v44 == 16)
        {
LABEL_66:
          v45 = -48;
          goto LABEL_78;
        }
        if (((1 << v44) & 0x1066) != 0)
          goto LABEL_78;
        if (v44 == 24)
          goto LABEL_66;
      }
      if (v44 == 70)
      {
LABEL_76:
        v45 = -64;
        goto LABEL_78;
      }
    }
    if (v44 - 52 >= 6)
    {
      if (v44 - 33 >= 5)
        goto LABEL_66;
      goto LABEL_76;
    }
    v45 = -72;
    goto LABEL_78;
  }
  if (v18 <= 3)
  {
    sub_22E8FCA40((_QWORD *)a1, a5, 0xEC0u, 0, (uint64_t)v59);
    v22 = sub_22E894538((uint64_t)v59, &v60);
    v52 = *(_QWORD *)a2;
    sub_22E8906A0(v22, (uint64_t *)&v52);
    sub_22E903BEC(v59);
    *(_DWORD *)(a2 + 24) = 0;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    if ((v60 & 7) - 3 > 1)
      return 0;
    v23 = *(_QWORD *)((v60 & 0xFFFFFFFFFFFFFFF8) + 8);
    v24 = *(_QWORD *)(v11 - 16);
    v25 = v24 ? v24 & 0xFFFFFFFFFFFFFFF0 : sub_22EF6462C(*(_QWORD *)(a1 + 88), v11 - 64);
    return (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFF0) + 8) | v23 & 7) != (*(_QWORD *)((v25 & 0xFFFFFFFFFFFFFFF0) + 8) | v25 & 7);
  }
  v31 = *(_QWORD *)(a2 + 8);
  v30 = *(_QWORD *)(a2 + 16);
  v32 = *(_QWORD *)(v31 + 8);
  do
  {
    if (v32 < 8)
      break;
    v31 = v32 & 0xFFFFFFFFFFFFFFF8;
    v13 = (v32 & 0xFFFFFFFFFFFFFFF8) == 0;
    v32 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  while (!v13);
  v52 = v31;
  *(_QWORD *)v53 = v30;
  if ((v32 & 4) == 0)
    return 0;
  v33 = *(_QWORD *)(v31 + 16);
  if (!v33 || *(_BYTE *)(v33 + 16) != 13)
    return 0;
  sub_22E8FCA40((_QWORD *)a1, a5, 0xC58u, 0, (uint64_t)v59);
  v34 = sub_22F0AB4E0((uint64_t)&v52);
  v35 = v34;
  v50[0] = v34;
  v50[1] = v36;
LABEL_35:
  v37 = v34;
  while (1)
  {
    if ((v37 & 0xF) != 0)
    {
LABEL_46:
      v34 = sub_22F115B7C(v37);
      goto LABEL_35;
    }
    v38 = *(unsigned __int8 *)(*(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v38 <= 0x39)
      break;
LABEL_41:
    if (sub_22F115668(v37))
      v35 = v37;
    v37 = sub_22F115B7C(v37);
    if (!v37)
      goto LABEL_95;
  }
  if (v38 == 24)
    goto LABEL_94;
  if (v38 != 26)
  {
    if (((1 << v38) & 0x20000000200003CLL) != 0)
      goto LABEL_46;
    goto LABEL_41;
  }
  if ((*(_BYTE *)(v37 + 23) & 0x10) == 0)
    goto LABEL_46;
LABEL_94:
  v35 = v37;
LABEL_95:
  v49 = sub_22F115668(v35);
  v51 = v49 | ((unint64_t)sub_22F1167E8(v50) << 32);
  sub_22E8906A0((uint64_t)v59, (uint64_t *)&v51);
LABEL_96:
  sub_22E903BEC(v59);
  return 0;
}

void sub_22EA147E8(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, void *__src, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  BOOL v14;
  int v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  char *v20;
  unsigned int v21[24];
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[19];

  v26[16] = *MEMORY[0x24BDAC8D0];
  v23 = a4;
  v22 = *a5;
  v13 = *(_QWORD *)(*(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v13)
    v14 = *(unsigned __int8 *)(v13 + 16) - 27 > 0xFFFFFFFD;
  else
    v14 = 0;
  if (!v14)
    v13 = sub_22F10CF48(v13);
  if ((*(_BYTE *)(v13 + 19) & 0x80) != 0)
  {
    sub_22E8FCA40(a1, *(_DWORD *)(a3 + 64), 0xDBCu, 0, (uint64_t)v21);
    sub_22E903BEC(v21);
  }
  v24 = v26;
  v25 = 0x400000000;
  if ((unint64_t)(8 * a8) >= 0x21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = v25;
    v16 = v24;
    if (!a8)
      goto LABEL_10;
  }
  else
  {
    v15 = 0;
    v16 = v26;
    if (!a8)
      goto LABEL_10;
  }
  memcpy(&v16[v15], __src, 8 * a8);
  v15 = v25;
LABEL_10:
  v17 = v15 + a8;
  LODWORD(v25) = v15 + a8;
  v18 = *(_QWORD *)(a3 + 1160);
  if (v18)
  {
    if (v17
      && (v19 = sub_22EFE90A8(*(_QWORD *)(a3 + 1160)),
          v20 = (char *)v24 + 8 * v17,
          v19 == sub_22EFE90A8(*((_QWORD *)v20 - 1))))
    {
      *((_QWORD *)v20 - 1) = v18;
    }
    else
    {
      if (v17 >= HIDWORD(v25))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v17 = v25;
      }
      *((_QWORD *)v24 + v17) = v18;
      LODWORD(v25) = v25 + 1;
    }
  }
  sub_22EA12DB4((uint64_t)a1, a3 + 40);
  __asm { BR              X11 }
}

uint64_t sub_22EA19234(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *i;
  uint64_t v11;
  BOOL v12;
  void *v14;
  uint64_t v15;
  uint64_t v16[4];
  uint64_t v17;

  v16[2] = (uint64_t)a5;
  v16[3] = a4;
  v7 = *a5;
  v16[1] = *a5;
  sub_22EA12DB4((uint64_t)a1, a3 + 40);
  v16[0] = v17;
  if ((v17 & 7) != 0)
    v8 = 0;
  else
    v8 = v17 & 0xFFFFFFFFFFFFFFF8;
  v15 = v8;
  if (*(_DWORD *)(a3 + 88))
  {
    if ((*(_DWORD *)(a3 + 104) & 0x7FFFFFFF) != 0)
    {
      v15 = **(_QWORD **)(a3 + 96);
      v16[0] = v15;
    }
LABEL_8:
    v9 = a1[9];
    if ((*(_BYTE *)(v9 + 104) & 0x20) != 0 && (*(_BYTE *)(v9 + 125) & 1) == 0)
    {
      for (i = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFF0); ; i = (uint64_t *)(sub_22F10ACF8(*i) & 0xFFFFFFFFFFFFFFF0))
      {
        v11 = *i;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*i + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
          goto LABEL_18;
        if (*(_BYTE *)(v11 + 16) != 39)
        {
          v11 = sub_22F10CF48(v11);
          if (!v11)
            continue;
        }
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                                              + 16)
           - 25 <= 1)
          break;
      }
      sub_22E8FCA40(a1, *(_DWORD *)(a3 + 64), 0x112Fu, 0, (uint64_t)&v17);
      LODWORD(v14) = 0;
      sub_22E8900C4((uint64_t)&v17, (int *)&v14);
      sub_22E903BEC((unsigned int *)&v17);
      *(_WORD *)(a3 + 1088) |= 1u;
      v11 = *i;
LABEL_18:
      if (v11)
        v12 = *(_BYTE *)(v11 + 16) == 31;
      else
        v12 = 0;
      if ((v12
         || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
         && (v11 = sub_22F10CF48(v11)) != 0)
        && sub_22F28C8B4(v11))
      {
        sub_22E8FCA40(a1, *(_DWORD *)(a3 + 64), 0x112Fu, 0, (uint64_t)&v17);
        LODWORD(v14) = 0;
        sub_22E8900C4((uint64_t)&v17, (int *)&v14);
        sub_22E903BEC((unsigned int *)&v17);
        *(_WORD *)(a3 + 1088) |= 1u;
      }
    }
    __asm { BR              X10 }
  }
  if (v8)
    goto LABEL_8;
  sub_22E8FCA40(a1, *(_DWORD *)(a3 + 64), 0xB77u, 0, (uint64_t)&v17);
  sub_22E894538((uint64_t)&v17, v16);
  sub_22E903BEC((unsigned int *)&v17);
  return 0;
}

BOOL sub_22EA1BDC8(_QWORD *a1, uint64_t **a2, uint64_t *a3, int a4, unsigned int a5)
{
  uint64_t *v10;
  unsigned int *v11;
  unsigned int v12;
  void *v13;
  const void *v14;
  void **v15;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[96];
  void *__dst[2];
  unint64_t v21;
  _BYTE v22[96];
  _BYTE v23[96];
  unsigned int v24[24];
  uint64_t v25;
  unsigned int v26;
  char v27;
  char v28;
  _QWORD *v29;
  __int128 v30;
  _QWORD v31[6];

  v31[5] = *MEMORY[0x24BDAC8D0];
  v28 = 0;
  v26 = 1;
  v25 = 0;
  v27 = 0;
  v10 = sub_22EA1C03C(*a2, a1[11], &v28, (unsigned int *)&v25);
  if (!v10)
  {
    if (v28)
    {
      sub_22E8FCA40(a1, a4, 0x1385u, 0, (uint64_t)v23);
      v11 = (unsigned int *)v23;
      goto LABEL_14;
    }
    v12 = v26;
    if (v26 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v25) != v12)
      {
LABEL_7:
        sub_22E8FCA40(a1, a4, 0xAA7u, 0, (uint64_t)v22);
        v29 = v31;
        v30 = xmmword_22F455490;
        llvm::APInt::toString();
        v13 = (void *)v30;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        v14 = v29;
        if ((unint64_t)v30 >= 0x17)
        {
          v17 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
          if (((unint64_t)v30 | 7) != 0x17)
            v17 = v30 | 7;
          v18 = v17 + 1;
          v15 = (void **)operator new(v17 + 1);
          __dst[1] = v13;
          v21 = v18 | 0x8000000000000000;
          __dst[0] = v15;
        }
        else
        {
          HIBYTE(v21) = v30;
          v15 = __dst;
          if (!(_QWORD)v30)
            goto LABEL_23;
        }
        memmove(v15, v14, (size_t)v13);
LABEL_23:
        *((_BYTE *)v13 + (_QWORD)v15) = 0;
        if (v29 != v31)
          free(v29);
        sub_22F2F3734((uint64_t)v22, __dst);
        if (SHIBYTE(v21) < 0)
          operator delete(__dst[0]);
        v11 = (unsigned int *)v22;
        goto LABEL_14;
      }
    }
    else if (v25)
    {
      goto LABEL_7;
    }
    if (!a5)
      goto LABEL_15;
    sub_22E8FCA40(a1, a4, a5, 0, (uint64_t)v19);
    v11 = (unsigned int *)v19;
LABEL_14:
    sub_22E903BEC(v11);
    goto LABEL_15;
  }
  sub_22E8FCA40(a1, a4, 0x151Cu, 0, (uint64_t)v24);
  sub_22E903BEC(v24);
  *a2 = v10;
  *a3 = *v10;
LABEL_15:
  if (v26 >= 0x41 && v25)
    MEMORY[0x2348A0E84](v25, 0x1000C8000313F17);
  return v10 != 0;
}

uint64_t *sub_22EA1C03C(uint64_t *a1, uint64_t a2, _BYTE *a3, unsigned int *a4)
{
  unint64_t v6;
  uint64_t *v7;

  v6 = sub_22EA21D3C(*a1, a2, a3, a4);
  if (v6 < 0x10)
    return 0;
  v7 = sub_22EF579A8(a2, v6, 0);
  sub_22EA40740(*a1, (uint64_t)(a1 + 1), *v7, (uint64_t)(v7 + 1));
  return v7;
}

unint64_t sub_22EA1C0A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t result;
  char v6;

  v3 = sub_22EF59494(a1);
  v4 = sub_22EFCE144(v3 + 40, a2);
  if (v4 < 8)
    return 0;
  v6 = v4;
  result = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 4) != 0)
  {
    if (result)
      return *(_QWORD *)result;
  }
  return result;
}

uint64_t *sub_22EA1C0F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int v13;
  void *v14;
  const void *v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[96];
  void *__dst[2];
  unint64_t v21;
  _BYTE v22[96];
  _BYTE v23[96];
  _BYTE v24[96];
  unsigned int v25[24];
  uint64_t *v26;
  unsigned int v27;
  char v28;
  char v29;
  _QWORD *v30;
  __int128 v31;
  _QWORD v32[6];

  v32[5] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a3 + 80);
  result = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8);
  if ((v5 & 4) != 0)
    result = (uint64_t *)*result;
  v7 = *result & 0xFFFFFFFFFFFFFFF0;
  if ((*(_BYTE *)(*(_QWORD *)v7 + 17) & 8) != 0)
  {
    v8 = *(unsigned int *)(a1 + 1904);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v8 - 8);
      *(_DWORD *)(v9 + 8) |= 8u;
    }
    if (!*(_QWORD *)(a2 + 24))
    {
      v29 = 0;
      v27 = 1;
      v26 = 0;
      v28 = 0;
      v10 = sub_22EA1C03C(result, *(_QWORD *)(a1 + 88), &v29, (unsigned int *)&v26);
      if (v10)
      {
        v11 = v10;
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a3 + 24), 0x151Cu, 0, (uint64_t)v25);
        result = (uint64_t *)sub_22E903BEC(v25);
        *(_QWORD *)(a3 + 80) = *(_QWORD *)(a3 + 80) & 3 | (unint64_t)v11 & 0xFFFFFFFFFFFFFFFBLL;
        goto LABEL_22;
      }
      if (v29)
      {
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a3 + 24), 0x1385u, 0, (uint64_t)v24);
        v12 = (unsigned int *)v24;
LABEL_21:
        sub_22E903BEC(v12);
        result = (uint64_t *)sub_22EFC77E8(a3, 1);
LABEL_22:
        if (v27 >= 0x41)
        {
          result = v26;
          if (v26)
            return (uint64_t *)MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
        }
        return result;
      }
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 5)
      {
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a3 + 24), 0x141Au, 0, (uint64_t)v23);
        v12 = (unsigned int *)v23;
        goto LABEL_21;
      }
      v13 = v27;
      if (v27 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v26) != v13)
        {
LABEL_15:
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a3 + 24), 0xAA7u, 0, (uint64_t)v22);
          v30 = v32;
          v31 = xmmword_22F455490;
          llvm::APInt::toString();
          v14 = (void *)v31;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
            abort();
          v15 = v30;
          if ((unint64_t)v31 >= 0x17)
          {
            v17 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
            if (((unint64_t)v31 | 7) != 0x17)
              v17 = v31 | 7;
            v18 = v17 + 1;
            v16 = (void **)operator new(v17 + 1);
            __dst[1] = v14;
            v21 = v18 | 0x8000000000000000;
            __dst[0] = v16;
          }
          else
          {
            HIBYTE(v21) = v31;
            v16 = __dst;
            if (!(_QWORD)v31)
              goto LABEL_30;
          }
          memmove(v16, v15, (size_t)v14);
LABEL_30:
          *((_BYTE *)v14 + (_QWORD)v16) = 0;
          if (v30 != v32)
            free(v30);
          sub_22F2F3734((uint64_t)v22, __dst);
          if (SHIBYTE(v21) < 0)
            operator delete(__dst[0]);
          v12 = (unsigned int *)v22;
          goto LABEL_21;
        }
      }
      else if (v26)
      {
        goto LABEL_15;
      }
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a3 + 24), 0x141Eu, 0, (uint64_t)v19);
      v12 = (unsigned int *)v19;
      goto LABEL_21;
    }
  }
  return result;
}

unint64_t sub_22EA1C3E4(_QWORD *a1, uint64_t *a2, unint64_t a3, unint64_t a4, uint64_t a5, _BYTE *a6)
{
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int *v40;
  int v41;
  unint64_t *v42;
  uint64_t v43;
  unsigned int v44;
  int v46;
  int v47;
  uint64_t v50;
  int v51;
  int v54;
  int v55;
  int v57;
  int v58;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int i;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  _QWORD *j;
  void **v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99[12];

  v12 = *(_QWORD *)(a4 + 16);
  v13 = v12 & 0xFFFFFFFFFFFFFFF8;
  if ((v12 & 4) != 0)
    v13 = *(_QWORD *)v13;
  v14 = (*(_WORD *)(v13 + 8) & 0x7Eu) - 38 <= 0xFFFFFFFB && *(_DWORD *)a5 == 2;
  if (!v14 || sub_22F1CF68C(*(_QWORD *)(a1[13] + 32), 0x1948u, *(_DWORD *)(a5 + 128), a1[13]) == 1)
  {
    v15 = 0;
  }
  else
  {
    v43 = **(_QWORD **)(a5 + 8) & 0xFFFFFFFFFFFFFFFCLL;
    v44 = *(_DWORD *)(v43 + 28) & 0x7F;
    if (v44 <= 0x2F && ((1 << v44) & 0xC00000060000) != 0)
    {
      v43 = sub_22EFBAEA4(v43);
      v44 = *(_DWORD *)(v43 + 28) & 0x7F;
    }
    if (v44 - 39 >= 3)
      v15 = 0;
    else
      v15 = v43;
  }
  sub_22EA04CD4((uint64_t)a1, a5, a3, a2, 0, 0);
  if ((*(_QWORD *)(a1[9] + 20) & 0x200200000000000) != 0)
  {
    v16 = *(unsigned int *)(a5 + 16);
    if ((_DWORD)v16)
    {
      v17 = 0;
      v18 = *(_QWORD **)(a5 + 8);
      v19 = v18;
      do
      {
        v20 = *v19 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_BYTE *)(v20 + 8) & 4) != 0)
        {
          while ((*(_BYTE *)(v20 + 8) & 4) != 0)
          {
            if ((sub_22EC62AF4((uint64_t)a1, v20) & 1) != 0)
              break;
            if (v20)
            {
              if ((*(_DWORD *)(v20 + 28) & 0x7Fu) - 42 >= 0xFFFFFFFD)
              {
                v21 = *(_QWORD *)((*(_QWORD *)(v20 + 80) & 0xFFFFFFFFFFFFFFF8)
                                + ((2 * *(_QWORD *)(v20 + 80)) & 8));
                v22 = *(_QWORD *)((*(_QWORD *)(a4 + 80) & 0xFFFFFFFFFFFFFFF8)
                                + ((2 * *(_QWORD *)(a4 + 80)) & 8));
                if ((*(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFF0) + 8) | v21 & 7) == (*(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF0)
                                                                                             + 8) | v22 & 7)
                  || sub_22EFB6D64(v20, 1) && sub_22EFB6D64(a4, 0))
                {
                  break;
                }
              }
            }
            v23 = *(_QWORD *)(a5 + 8);
            v24 = *(unsigned int *)(a5 + 16);
            v25 = *(_QWORD *)(v23 + 8 * v24 - 8);
            LODWORD(v24) = v24 - 1;
            *(_DWORD *)(a5 + 16) = v24;
            *v19 = v25;
            if (v19 == (_QWORD *)(v23 + 8 * v24))
              goto LABEL_26;
            v20 = v25 & 0xFFFFFFFFFFFFFFFCLL;
            if ((*(_BYTE *)((v25 & 0xFFFFFFFFFFFFFFFCLL) + 8) & 4) == 0)
            {
              v17 = 1;
              break;
            }
            v17 = 1;
          }
          v18 = *(_QWORD **)(a5 + 8);
          v16 = *(unsigned int *)(a5 + 16);
        }
        ++v19;
      }
      while (v19 != &v18[v16]);
      if (v17)
LABEL_26:
        sub_22EA3DA00(a5);
    }
  }
  if (!*(_DWORD *)(a5 + 16))
  {
    sub_22E90DA20((unint64_t)a1, a4);
    goto LABEL_48;
  }
  *a6 = 1;
  if ((*(_BYTE *)(a4 + 28) & 0x80) != 0)
    goto LABEL_48;
  if ((*(_BYTE *)(a1[9] + 1) & 0x40) != 0)
  {
    v26 = *(_QWORD *)(a4 + 40);
    if ((v26 & 7) != 0)
      v27 = 0;
    else
      v27 = v26 & 0xFFFFFFFFFFFFFFF8;
    v28 = *(uint64_t **)(v27 + 16);
    v29 = *v28;
    v30 = *v28;
    if (*v28 == 5)
    {
      if (v30 == 5)
      {
        v57 = *((_DWORD *)v28 + 4);
        v58 = *((unsigned __int8 *)v28 + 20);
        if (v57 == 1935764547 && v58 == 115)
        {
          v34 = (_QWORD *)a1[11];
          v34[166] = *(_QWORD *)((*(_QWORD *)(a4 + 80) & 0xFFFFFFFFFFFFFFF8)
                               + ((2 * *(_QWORD *)(a4 + 80)) & 8));
          v35 = sub_22F36E27C((uint64_t)v34);
          goto LABEL_104;
        }
      }
    }
    else if ((_DWORD)v29 == 3)
    {
      if (v30 == 3)
      {
        v54 = *((unsigned __int16 *)v28 + 8);
        v55 = *((unsigned __int8 *)v28 + 18);
        if (v54 == 17747 && v55 == 76)
        {
          v34 = (_QWORD *)a1[11];
          v34[167] = *(_QWORD *)((*(_QWORD *)(a4 + 80) & 0xFFFFFFFFFFFFFFF8)
                               + ((2 * *(_QWORD *)(a4 + 80)) & 8));
          v35 = sub_22F36E228((uint64_t)v34);
          goto LABEL_104;
        }
      }
    }
    else if ((_DWORD)v29 == 2 && v30 == 2 && *((_WORD *)v28 + 8) == 25705)
    {
      v32 = *(_QWORD *)((*(_QWORD *)(a4 + 80) & 0xFFFFFFFFFFFFFFF8) + ((2 * *(_QWORD *)(a4 + 80)) & 8));
      v33 = *(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF0);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
      {
        if ((sub_22F10DFD8(*(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
          goto LABEL_46;
        if (*(_BYTE *)(v33 + 16) != 39)
          v33 = sub_22F10CF48(v33);
        if (sub_22F10DE3C(*(_QWORD *)(*(_QWORD *)(v33 + 32) & 0xFFFFFFFFFFFFFFF0)))
        {
LABEL_46:
          v34 = (_QWORD *)a1[11];
          v34[165] = v32;
          v35 = sub_22F36E1B8((uint64_t)v34);
LABEL_104:
          v60 = v35;
          v61 = *(_QWORD *)(v35 + 48);
          if (!v61)
            v61 = sub_22EF6462C((uint64_t)v34, v60);
          *(_QWORD *)(a4 + 48) = *(_QWORD *)(v61 & 0xFFFFFFFFFFFFFFF0);
          goto LABEL_48;
        }
      }
    }
  }
  v62 = sub_22F31CE68(a5);
  if (!v62)
  {
    sub_22E8FCA40(a1, *(_DWORD *)(a4 + 24), 0x1215u, 0, (uint64_t)v99);
    v98 = *(_QWORD *)(a4 + 40);
    sub_22E894538((uint64_t)v99, &v98);
    sub_22E903BEC((unsigned int *)v99);
    v70 = **(_QWORD **)(a5 + 8) & 0xFFFFFFFFFFFFFFFCLL;
    if (*(_DWORD *)(v70 + 24))
    {
      v78 = *(_DWORD *)(a4 + 24);
      v79 = (uint64_t)a1;
LABEL_136:
      sub_22F31D30C(v79, v70, v78);
    }
LABEL_125:
    sub_22EFC77E8(a4, 1);
    goto LABEL_48;
  }
  v63 = v62;
  if ((*(_DWORD *)(v62 + 28) & 0x80) != 0)
    goto LABEL_125;
  if ((*(_DWORD *)(v62 + 28) & 0x7Fu) - 42 < 0xFFFFFFFD)
    goto LABEL_110;
  v71 = sub_22EFB6D64(v62, 1);
  v72 = sub_22EFB6D64(a4, 0);
  v99[0] = 0;
  if (!v71)
    goto LABEL_110;
  v73 = v72;
  if (!v72)
    goto LABEL_110;
  v74 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v71 + 32))(v71);
  if (v74 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 32))(v73)
    || (sub_22EE8B858((uint64_t)a1, v71, v99, 0) & 1) != 0)
  {
    goto LABEL_110;
  }
  *(_QWORD *)(a4 + 48) = *(_QWORD *)(v63 + 48);
  v75 = *(_QWORD *)(v63 + 80);
  v76 = v75 & 0xFFFFFFFFFFFFFFF8;
  if ((v75 & 4) == 0)
  {
    v77 = *(_QWORD *)(a4 + 80) & 3 | v76;
    goto LABEL_165;
  }
  v80 = *(_QWORD *)v76;
  v81 = *(_QWORD *)(v76 + 8);
  v82 = a4;
  if ((*(_DWORD *)(a4 + 28) & 0x7F) != 0x53)
  {
    v83 = *(_QWORD *)(a4 + 16);
    v84 = v83 & 0xFFFFFFFFFFFFFFF8;
    if ((v83 & 4) != 0)
      v84 = *(_QWORD *)v84;
    for (i = *(_WORD *)(v84 + 8) & 0x7F; i != 83; i = *(_WORD *)(v84 + 8) & 0x7F)
    {
      v86 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v86 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_151;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_150;
        if (i == 16)
          goto LABEL_144;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_157;
        if (i == 24)
        {
LABEL_144:
          v86 = -48;
        }
        else
        {
LABEL_150:
          if (i != 70)
          {
LABEL_151:
            v87 = i - 52;
            if ((i - 33) >= 5)
              v88 = -48;
            else
              v88 = -64;
            if (v87 >= 6)
              v86 = v88;
            else
              v86 = -72;
            goto LABEL_157;
          }
          v86 = -64;
        }
      }
LABEL_157:
      v89 = *(_QWORD *)(v84 + v86 + 16);
      v84 = v89 & 0xFFFFFFFFFFFFFFF8;
      if ((v89 & 4) != 0)
        v84 = *(_QWORD *)v84;
    }
    v82 = v84 - 40;
  }
  v90 = sub_22E3CD3D4(*(_QWORD *)(v82 + 88) + 2032, 16, 3);
  *(_QWORD *)v90 = v80;
  *(_QWORD *)(v90 + 8) = v81;
  v77 = *(_QWORD *)(a4 + 80) & 3 | v90 | 4;
LABEL_165:
  *(_QWORD *)(a4 + 80) = v77;
  sub_22EC61DA0((uint64_t)a1, v99[0]);
  if ((*(_DWORD *)(v73 + 28) & 0x7F) == 0x21)
  {
    v91 = sub_22EA06B40((uint64_t)a1, a2);
    if ((*(_WORD *)(v73 + 72) & 0x80) != 0)
      sub_22EFCC320(v73 + 64);
    for (j = *(_QWORD **)(v73 + 80); j; j = (_QWORD *)(j[1] & 0xFFFFFFFFFFFFFFF8))
    {
      v93 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(v91 + 9), j);
      v94 = v91[10];
      v95 = 88;
      if (v94 == v91[9])
        v95 = 92;
      if (v93 != (void **)(v94 + 8 * *(unsigned int *)((char *)v91 + v95)))
      {
        *v93 = (void *)-2;
        ++*((_DWORD *)v91 + 24);
      }
      sub_22E8CEA58((uint64_t)(a1 + 415), (uint64_t)j);
      v96 = j[2];
      v97 = v96 & 0xFFFFFFFFFFFFFFF8;
      if ((v96 & 4) != 0)
        v97 = *(_QWORD *)(v97 + 8);
      sub_22F3B1578(v97, (uint64_t)j);
    }
  }
LABEL_110:
  if ((sub_22EA08320(a1, v63, a4) & 1) == 0)
  {
    if ((*(_DWORD *)(v63 + 28) & 0x7Fu) - 42 >= 0xFFFFFFFD)
    {
      v64 = *(_QWORD *)(v63 + 72);
      *(_QWORD *)(a4 + 72) = v64;
      v65 = sub_22E3CD31C((uint64_t *)(v64 + 64), v64);
      *(_QWORD *)(a4 + 64) = v65 & 0xFFFFFFFFFFFFFFFCLL;
      *(_DWORD *)(a4 + 28) |= *(_DWORD *)(v65 + 28) & 0x260000;
      sub_22E7B7A74(*(_QWORD *)(a4 + 72) + 64, a4);
      sub_22EA084D0((uint64_t)a1, a4, (_BYTE *)v63, 1);
    }
    v66 = (uint64_t *)a1[9];
    v67 = *v66;
    if ((*v66 & 0x20) == 0)
    {
      if ((v67 & 0x100) == 0)
      {
        if ((v67 & 2) == 0 && (*(uint64_t *)((char *)v66 + 20) & 0x200000000000) == 0)
        {
          if ((*(_BYTE *)(*(_QWORD *)(a1[13] + 128) + 24) & 0x10) == 0
            || (*(_BYTE *)(v63 + 29) & 2) == 0
            && ((v68 = sub_22F1E361C(*(_QWORD **)(a1[11] + 1992), *(_DWORD *)(v63 + 24)), v68 == 3)
             || !v68)
            && ((v69 = sub_22F1E361C(*(_QWORD **)(a1[11] + 1992), *(_DWORD *)(a4 + 24)), v69 == 3)
             || !v69))
          {
            sub_22E8FCA40(a1, *(_DWORD *)(a4 + 24), 0x14DBu, 0, (uint64_t)v99);
            v98 = *(_QWORD *)(a4 + 40);
            sub_22E894538((uint64_t)v99, &v98);
            sub_22E903BEC((unsigned int *)v99);
            sub_22F31D30C((uint64_t)a1, v63, *(_DWORD *)(a4 + 24));
          }
        }
        goto LABEL_48;
      }
      if ((*(_WORD *)(a1[27] + 8) & 0x7Fu) - 35 > 2 || (*(_DWORD *)(v63 + 28) & 0x7Fu) - 39 > 2)
        goto LABEL_48;
      sub_22E8FCA40(a1, *(_DWORD *)(a4 + 24), 0x1214u, 0, (uint64_t)v99);
      v98 = *(_QWORD *)(a4 + 40);
      sub_22E894538((uint64_t)v99, &v98);
      sub_22E903BEC((unsigned int *)v99);
      v78 = *(_DWORD *)(a4 + 24);
      v79 = (uint64_t)a1;
      v70 = v63;
      goto LABEL_136;
    }
  }
LABEL_48:
  if (v15 && !*a6)
    sub_22EA1CDDC((uint64_t)a1, a4, v15, a5);
  v36 = *(_QWORD *)(a4 + 40);
  if ((v36 & 7) == 0)
  {
    v37 = v36 & 0xFFFFFFFFFFFFFFF8;
    if ((v36 & 0xFFFFFFFFFFFFFFF8) != 0 && (*(_BYTE *)(a4 + 28) & 0x80) == 0)
    {
      v38 = *(_QWORD *)(a4 + 16);
      v39 = (_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF8);
      if ((v38 & 4) != 0)
        v39 = (_QWORD *)*v39;
      if ((*(_WORD *)(sub_22EFCBB30((unint64_t)v39) + 8) & 0x7F) == 0x53)
      {
        v40 = *(int **)(v37 + 16);
        v41 = *v40;
        if (*v40 == 10)
        {
          if (*((_QWORD *)v40 + 2) == 0x625F706D6A676973 && *((_WORD *)v40 + 12) == 26229)
          {
            v42 = (unint64_t *)(a1[11] + 1448);
            goto LABEL_88;
          }
          v50 = *((_QWORD *)v40 + 2);
          v51 = *((unsigned __int16 *)v40 + 12);
          if (v50 == 0x747865746E6F6375 && v51 == 29791)
          {
            v42 = (unint64_t *)(a1[11] + 1456);
            goto LABEL_88;
          }
        }
        else if (v41 == 7)
        {
          v46 = v40[4];
          v47 = *(int *)((char *)v40 + 19);
          if (v46 == 1601203562 && v47 == 1718968927)
          {
            v42 = (unint64_t *)(a1[11] + 1440);
            goto LABEL_88;
          }
        }
        else if (v41 == 4 && v40[4] == 1162627398)
        {
          v42 = (unint64_t *)(a1[11] + 1432);
LABEL_88:
          *v42 = a4;
        }
      }
    }
  }
  return a4;
}

uint64_t sub_22EA1CDDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  __int16 v10;
  uint64_t result;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  __int16 v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  _QWORD *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  __int16 v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  _QWORD *v68;
  unsigned int v69[24];
  unsigned int v70[24];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v5 = a3;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = v8 & 0xFFFFFFFFFFFFFFF8;
  if ((v8 & 4) != 0)
    v9 = *(_QWORD *)v9;
  if (a3 && (*(_DWORD *)(a3 + 28) & 0x7Fu) - 52 >= 0xFFFFFFFD)
  {
    v10 = *(_WORD *)(v9 + 8);
    if ((v10 & 0x7Eu) - 58 >= 0xFFFFFFFC && v9 != 0)
    {
      result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v9 - 72) + 32))(v9 - 72);
      if ((*(_QWORD *)(result + 80) & 0xE000) == 0x4000
        || (*(_QWORD *)(v9 - 32) & 7) == 6
        && (*(_DWORD *)(*(_QWORD *)(v9 - 32) & 0xFFFFFFFFFFFFFFF8) - 1) < 4)
      {
        return result;
      }
      v10 = *(_WORD *)(v9 + 8);
    }
    if ((v10 & 0x7F) == 0x37 && (*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
    {
      v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      v74 = v5;
      return sub_22F31EDC0((uint64_t)v70, a1 + 10152, &v73, &v74);
    }
  }
  if (v5 && (*(_DWORD *)(v5 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9 && sub_22EFB93F4(v5))
  {
    v13 = 0;
    v14 = v5;
    while (1)
    {
      v15 = *(_DWORD *)(v14 + 28) & 0x7F;
      if (v15 != 64 && v15 != 62)
      {
        v16 = *(_QWORD *)(v14 + 16);
        v17 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
        v18 = v16 & 0xFFFFFFFFFFFFFFF8;
        if ((v16 & 4) != 0)
          v18 = v17[1];
        v19 = *(_WORD *)(sub_22EFCBB30(v18) + 8) & 0x7F;
        if (v19 == 16 || v19 == 83)
          break;
        if ((v16 & 4) != 0)
          v17 = (_QWORD *)*v17;
        if (((_WORD)v17[1] & 0x7Eu) - 34 < 4)
          break;
      }
      if ((*(_BYTE *)(v14 + 72) & 3) != 0)
      {
        if (v13)
          goto LABEL_35;
        v13 = 1;
      }
      v20 = sub_22E3CD31C((uint64_t *)(v14 + 72), v14);
      if (v20 != v5)
      {
        v14 = v20;
        if (v20)
          continue;
      }
      goto LABEL_35;
    }
    v5 = v14;
  }
LABEL_35:
  v21 = *(_QWORD *)(v5 + 16);
  v22 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
  if ((v21 & 4) != 0)
    v22 = (_QWORD *)*v22;
  result = sub_22EFCBB30((unint64_t)v22);
  v23 = result;
  v72 = result;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 60 > 6)
  {
    v24 = 0;
    v25 = 6472;
  }
  else
  {
    v24 = 0;
    v25 = 6472;
    if ((*(_DWORD *)(v5 + 28) & 0x7Fu) - 60 <= 6 && v9)
    {
      v26 = *(_WORD *)(v9 + 8);
      v27 = v26 & 0x7E;
      if ((v27 - 54) > 3)
      {
        v24 = 0;
        goto LABEL_49;
      }
      v28 = v26 & 0x7F;
      v29 = -40;
      if (v28 > 70)
      {
        if (v28 == 83)
          goto LABEL_79;
        if (v28 == 71)
        {
          v29 = -56;
          goto LABEL_79;
        }
        if (v28 != 81)
        {
LABEL_74:
          if ((v28 - 52) < 6)
          {
            v29 = -72;
          }
          else
          {
            v29 = -48;
            if ((v28 - 33) < 5)
              v29 = -64;
          }
        }
      }
      else
      {
        if (v28 > 0x18)
          goto LABEL_73;
        if (v28 == 16)
        {
LABEL_44:
          v29 = -48;
          goto LABEL_79;
        }
        if (((1 << v28) & 0x1066) == 0)
        {
          if (v28 == 24)
            goto LABEL_44;
LABEL_73:
          if (v28 == 70)
          {
            v29 = -64;
            goto LABEL_79;
          }
          goto LABEL_74;
        }
      }
LABEL_79:
      v44 = *(_QWORD *)(v9 + v29 + 16);
      v45 = v44 & 0xFFFFFFFFFFFFFFF8;
      if ((v44 & 4) != 0)
        v45 = *(_QWORD *)v45;
      v24 = 0;
      if (!v45 || (*(_WORD *)(v45 + 8) & 0x7Fu) - 38 < 0xFFFFFFFD)
        goto LABEL_49;
      v46 = *(_QWORD *)(v45 + 64);
      if (!v46 || ((*(unsigned __int16 *)(v46 + 8) | (*(unsigned __int8 *)(v46 + 10) << 16)) & 0x100000) == 0)
        goto LABEL_106;
      v47 = -40;
      if (v28 > 70)
      {
        switch(v28)
        {
          case 'S':
            goto LABEL_100;
          case 'G':
            v47 = -56;
            goto LABEL_100;
          case 'Q':
LABEL_100:
            v48 = *(_QWORD *)(v9 + v47 + 16);
            v49 = v48 & 0xFFFFFFFFFFFFFFF8;
            if ((v48 & 4) != 0)
              v49 = *(_QWORD *)(v49 + 8);
            result = sub_22EFCBE78(result, v49);
            if ((_DWORD)result)
            {
              v50 = *(unsigned int *)(a1 + 1904);
              if ((*(_BYTE *)(*(_QWORD *)(v45 + 64) + 104) & 0x18) != 0)
              {
                if ((_DWORD)v50)
                  v51 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v50 - 8);
                else
                  v51 = 0;
                v67 = *(_DWORD *)(v51 + 1768);
                if (v67 >= *(_DWORD *)(v51 + 1772))
                {
                  result = llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v67 = *(_DWORD *)(v51 + 1768);
                }
                v68 = (_QWORD *)(*(_QWORD *)(v51 + 1760) + 16 * v67);
                *v68 = a2;
                v68[1] = v5;
                ++*(_DWORD *)(v51 + 1768);
                return result;
              }
              v63 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v50 - 8);
              v64 = *(unsigned int *)(v63 + 1272);
              if (!(_DWORD)v64)
                goto LABEL_147;
              v65 = *(_QWORD *)(v63 + 1264);
              v66 = 32 * v64;
              while ((*(_BYTE *)(v65 + 24) & 8) != 0 || (*(_BYTE *)(v65 + 24) & 3) == 3 || *(_QWORD *)v65 != v5)
              {
                v65 += 32;
                v66 -= 32;
                if (!v66)
                  goto LABEL_147;
              }
              v24 = *(_DWORD *)(v65 + 8);
              if (v24)
              {
                v25 = 6472;
              }
              else
              {
LABEL_147:
                v24 = 0;
                v25 = 6473;
              }
LABEL_107:
              result = sub_22E3CB5E0(v5);
              if ((_DWORD)result)
              {
                v52 = v9;
                while (1)
                {
                  if (v23)
                  {
                    v53 = sub_22EFCC008(v52);
                    result = sub_22EFCC008(v23);
                    if (v53 == result)
                      goto LABEL_46;
                  }
                  v54 = *(_WORD *)(v52 + 8);
                  v55 = v54 & 0x7F;
                  if ((v55 - 1) >= 2)
                    break;
LABEL_137:
                  result = sub_22F31DCF8(v52);
                  v52 = result;
                  if (!result)
                    goto LABEL_46;
                }
                if ((v54 & 0x7Eu) - 54 > 3)
                  return result;
                v56 = -40;
                if (v55 > 70)
                {
                  if (v55 == 83)
                    goto LABEL_130;
                  if (v55 == 71)
                  {
                    v56 = -56;
                    goto LABEL_130;
                  }
                  if (v55 != 81)
                  {
LABEL_124:
                    v57 = v55 - 52;
                    v58 = (v55 - 33) >= 5;
                    v59 = -64;
                    if (v58)
                      v59 = -48;
                    v58 = v57 >= 6;
                    v56 = -72;
                    if (v58)
                      v56 = v59;
                  }
                }
                else
                {
                  if (v55 > 0x18)
                    goto LABEL_123;
                  if (v55 == 16)
                  {
LABEL_116:
                    v56 = -48;
                    goto LABEL_130;
                  }
                  if (((1 << v55) & 0x1066) == 0)
                  {
                    if (v55 == 24)
                      goto LABEL_116;
LABEL_123:
                    if (v55 == 70)
                    {
                      v56 = -64;
                      goto LABEL_130;
                    }
                    goto LABEL_124;
                  }
                }
LABEL_130:
                v60 = *(_QWORD *)(v52 + v56 + 16);
                v61 = (_QWORD *)(v60 & 0xFFFFFFFFFFFFFFF8);
                if ((v60 & 4) != 0)
                  v61 = (_QWORD *)*v61;
                if (!v61)
                  return result;
                v62 = v61[8];
                if (!v62
                  || ((*(unsigned __int16 *)(v62 + 8) | (*(unsigned __int8 *)(v62 + 10) << 16)) & 0x100000) == 0
                  || (*(_QWORD *)(v52 - 32) & 7) != 6
                  || *(_DWORD *)(*(_QWORD *)(v52 - 32) & 0xFFFFFFFFFFFFFFF8) != 42)
                {
                  return result;
                }
                goto LABEL_137;
              }
              goto LABEL_46;
            }
LABEL_106:
            v24 = 0;
            goto LABEL_107;
        }
      }
      else
      {
        if (v28 <= 0x18)
        {
          if (v28 == 16)
          {
LABEL_88:
            v47 = -48;
            goto LABEL_100;
          }
          if (((1 << v28) & 0x1066) != 0)
            goto LABEL_100;
          if (v28 == 24)
            goto LABEL_88;
        }
        if (v28 == 70)
        {
LABEL_98:
          v47 = -64;
          goto LABEL_100;
        }
      }
      if ((v28 - 52) >= 6)
      {
        if ((v28 - 33) >= 5)
          goto LABEL_88;
        goto LABEL_98;
      }
      v47 = -72;
      goto LABEL_100;
    }
  }
LABEL_46:
  if (!v9)
    goto LABEL_51;
  v27 = *(_WORD *)(v9 + 8) & 0x7E;
LABEL_49:
  if ((v27 - 34) <= 3 && (*(_WORD *)(v23 + 8) & 0x7Eu) - 34 > 3)
    return result;
LABEL_51:
  v71 = *(_QWORD *)(a4 + 120);
  v30 = sub_22EA1FEC4(*(_DWORD *)(v5 + 28), v23);
  sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a4 + 128), v25, 0, (uint64_t)v70);
  v31 = sub_22E894538((uint64_t)v70, &v71);
  v32 = v31;
  if (*(_BYTE *)(v31 + 80))
  {
    v33 = *(unsigned __int8 **)(v31 + 32);
    if (!v33)
    {
      v33 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(v32 + 40));
      *(_QWORD *)(v32 + 32) = v33;
    }
    v34 = v30;
    v33[*v33 + 1] = 2;
    v35 = *(_BYTE **)(v32 + 32);
  }
  else
  {
    if (!*(_BYTE *)(v31 + 92))
      goto LABEL_57;
    v38 = (uint64_t *)(*(_QWORD *)v31 + 12784);
    v39 = *(_QWORD *)(v31 + 16);
    if (v39)
      v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 32))(v39);
    v73 = v39;
    v40 = sub_22F2F1D6C(v38, &v73)[1] + 32 * *(unsigned int *)(v32 + 88);
    v43 = *(unsigned __int8 **)(v40 + 8);
    v42 = (_QWORD *)(v40 + 8);
    v41 = v43;
    if (!v43)
    {
      v41 = (unsigned __int8 *)sub_22E3B8AAC(v42[1]);
      *v42 = v41;
    }
    v34 = v30;
    v41[*v41 + 1] = 2;
    v35 = (_BYTE *)*v42;
  }
  v36 = *v35;
  *v35 = v36 + 1;
  *(_QWORD *)&v35[8 * v36 + 16] = v34;
LABEL_57:
  sub_22E894FB4(v32, &v72);
  sub_22E903BEC(v70);
  if (v24)
  {
    sub_22E8FCA40((_QWORD *)a1, v24, 0x1817u, 0, (uint64_t)v70);
    v37 = sub_22E894538((uint64_t)v70, &v71);
    LODWORD(v73) = 1;
    sub_22E8900C4(v37, (int *)&v73);
    sub_22E903BEC(v70);
  }
  sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v5 + 24), 0x6Cu, 0, (uint64_t)v69);
  return (uint64_t)sub_22E903BEC(v69);
}

void sub_22EA1D5B8(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  int v13;
  uint64_t v14;
  uint64_t v15[12];

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 48);
  v5 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v6 & 8) != 0)
  {
    v7 = (*(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 6) & 7;
    if (v7 != 4)
    {
      if (v7)
        goto LABEL_21;
      goto LABEL_4;
    }
    v10 = *(_DWORD *)(a2 + 28) & 0x7F;
    if ((v10 - 67) >= 0xFFFFFFF9)
    {
      if (sub_22E49C868(a2))
      {
        LODWORD(v14) = 0;
LABEL_19:
        sub_22E8FCA40(a1, *(_DWORD *)(v2 + 24), 0xA5Bu, 0, (uint64_t)v15);
        sub_22E89519C((uint64_t)v15, (unsigned int *)&v14);
        sub_22E903BEC((unsigned int *)v15);
        goto LABEL_20;
      }
      if (!sub_22E3CB5E0(v2))
      {
        v11 = 1;
        goto LABEL_18;
      }
    }
    else
    {
      if (v10 == 51)
      {
        v11 = 3;
LABEL_18:
        LODWORD(v14) = v11;
        goto LABEL_19;
      }
      if ((v10 - 49) <= 2)
      {
        v11 = 2;
        goto LABEL_18;
      }
    }
LABEL_20:
    v7 = 4;
    goto LABEL_21;
  }
LABEL_4:
  if (!sub_22F40ACB8(*v5))
    return;
  if (sub_22F114FB4(*v5))
    v7 = 1;
  else
    v7 = 2;
  v8 = a1[11];
  v15[0] = v7 << 6;
  v9 = sub_22E491354((unsigned int *)v15, v4);
  *(_QWORD *)(v2 + 48) = sub_22EF5DBC4(v8, v9, v15[0]);
LABEL_21:
  if ((*(_DWORD *)(v2 + 28) & 0x7Fu) - 60 >= 7)
    v2 = 0;
  if (v7 >= 2 && v2 != 0)
  {
    sub_22EFBB794(v2);
    if (v13)
    {
      sub_22E8FCA40(a1, *(_DWORD *)(v2 + 24), 0xA76u, 0, (uint64_t)v15);
      v14 = *(_QWORD *)(v2 + 48);
      sub_22E8901B8((uint64_t)v15, &v14);
      sub_22E903BEC((unsigned int *)v15);
    }
  }
}

unint64_t sub_22EA1D764(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  BOOL v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 48);
  v5 = v4 & 0xFFFFFFFFFFFFFFF0;
  v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF0) + 8);
  if (((v6 & 8) == 0 || (*(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0)
    && (*(_BYTE *)(*(_QWORD *)v5 + 17) & 4) == 0
    && (*(_DWORD *)(a2 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFFFF0);
    v8 = *(_DWORD *)(v7 + 16) & 0xFF800FF;
    v9 = v8 == 116391947 || v8 == 86507531;
    v10 = v9;
    if (!v7 || !v10)
    {
      v11 = 4;
      if (sub_22F31DB68(result + 24, *(_QWORD *)(result + 72)))
      {
        if (sub_22E3CB5E0(a2))
          v11 = 4;
        else
          v11 = 1;
      }
      if (*(_QWORD *)v5)
        v12 = *(_BYTE *)(*(_QWORD *)v5 + 16) == 1;
      else
        v12 = 0;
      if (v12)
      {
        v13 = *(_QWORD *)(*(_QWORD *)v5 + 32);
        v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 8);
        if (((v14 & 8) == 0 || (*(_DWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0)
          && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) & 0xFEu)
           - 2 <= 3)
        {
          v15 = sub_22EF5DD84(*(_QWORD *)(v3 + 88), v13, v11);
          v16 = sub_22EF5C728(*(_QWORD *)(v3 + 88), v15);
          v4 = sub_22F36A2BC(*(_QWORD *)(v3 + 88), v16 & 0xFFFFFFFFFFFFFFF0);
        }
      }
      result = sub_22EF5DD84(*(_QWORD *)(v3 + 88), v4, v11);
      v17 = result;
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) & 0xFEu)
         - 2 <= 3)
      {
        result = sub_22EF5C728(*(_QWORD *)(v3 + 88), result);
        v17 = result & 0xFFFFFFFFFFFFFFF0;
      }
      *(_QWORD *)(a2 + 48) = v17;
    }
  }
  return result;
}

uint64_t sub_22EA1D904(unint64_t *a1)
{
  unint64_t v2;
  unsigned int v3;
  BOOL v4;
  char v5;
  uint64_t result;
  unint64_t i;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *a1;
  v3 = *(_WORD *)(v2 + 8) & 0x7F;
  v4 = v3 > 0x18 || ((1 << v3) & 0x1000006) == 0;
  if (!v4 || v3 - 52 <= 5)
  {
    v5 = sub_22EFC7ADC(v2);
    result = 1;
    if ((v5 & 1) != 0)
      return result;
    for (i = *a1; ; *a1 = i)
    {
      v8 = *(_WORD *)(i + 8) & 0x7F;
      v9 = v8 == 12 || v8 == 16;
      if (v9 || v8 == 83)
        return 1;
      v10 = -40;
      if ((*(_WORD *)(i + 8) & 0x7Fu) > 0x46)
      {
        if (v8 == 71)
        {
          v10 = -56;
          goto LABEL_28;
        }
        if (v8 != 81)
          goto LABEL_22;
      }
      else
      {
        if (v8 > 0x18)
          goto LABEL_21;
        if (v8 == 16)
          goto LABEL_15;
        if (((1 << v8) & 0x1066) == 0)
        {
          if (v8 == 24)
          {
LABEL_15:
            v10 = -48;
            goto LABEL_28;
          }
LABEL_21:
          if (v8 == 70)
          {
            v10 = -64;
            goto LABEL_28;
          }
LABEL_22:
          v11 = v8 - 52;
          if (v8 - 33 >= 5)
            v12 = -48;
          else
            v12 = -64;
          if (v11 >= 6)
            v10 = v12;
          else
            v10 = -72;
        }
      }
LABEL_28:
      v13 = *(_QWORD *)(i + v10 + 16);
      i = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0)
        i = *(_QWORD *)i;
    }
  }
  return 0;
}

BOOL sub_22EA1DA40(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 result;
  unint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;

  v2 = *(_QWORD *)a1 + 32;
  v3 = *(_QWORD *)v2;
  if ((*(_QWORD *)v2 & 4) != 0)
  {
    v5 = v3 & 0xFFFFFFFFFFFFFFF8;
    v2 = *(_QWORD *)v5;
    v4 = *(_QWORD *)v5 + 8 * *(unsigned int *)(v5 + 8);
  }
  else
  {
    v4 = v2 + 8 * (v3 > 7);
  }
  while (v2 != v4)
  {
    if (*(unsigned __int16 *)(*(_QWORD *)v2 + 28) == a2)
      return 1;
    v2 += 8;
  }
  v6 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v6)
  {
    for (i = 0; i != v6; ++i)
    {
      v8 = *(_QWORD *)(a1 + 112) + 120 * i;
      v11 = *(_QWORD *)(v8 + 24);
      v9 = v8 + 24;
      v10 = v11;
      if ((v11 & 4) != 0)
      {
        v13 = v10 & 0xFFFFFFFFFFFFFFF8;
        v9 = *(_QWORD *)v13;
        v12 = *(_QWORD *)v13 + 8 * *(unsigned int *)(v13 + 8);
      }
      else
      {
        v12 = v9 + 8 * (v10 > 7);
      }
      while (v9 != v12)
      {
        if (*(unsigned __int16 *)(*(_QWORD *)v9 + 28) == a2)
          return 1;
        v9 += 8;
      }
    }
  }
  v14 = *(_QWORD *)(a1 + 1104);
  if ((v14 & 4) != 0)
  {
    v18 = v14 & 0xFFFFFFFFFFFFFFF8;
    v15 = *(_QWORD *)v18;
    v16 = *(_QWORD *)v18 + 8 * *(unsigned int *)(v18 + 8);
  }
  else
  {
    v15 = a1 + 1104;
    v16 = a1 + 1104 + 8 * (v14 > 7);
  }
  if (v15 == v16)
    return 0;
  v19 = v15 + 8;
  do
  {
    v20 = *(unsigned __int16 *)(*(_QWORD *)(v19 - 8) + 28);
    result = v20 == a2;
    v21 = v20 == a2 || v19 == v16;
    v19 += 8;
  }
  while (!v21);
  return result;
}

BOOL sub_22EA1DB60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 409)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22EA1DBC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 420)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22EA1DC20(_QWORD *a1)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  while (1)
  {
    v1 = *(_QWORD *)(*a1 & 0xFFFFFFFFFFFFFFF0);
    if (v1)
      v2 = (*(_DWORD *)(v1 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
    else
      v2 = 0;
    if (v2)
    {
      v3 = v1;
      goto LABEL_9;
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
      break;
    v5 = v1;
    v3 = sub_22F10CF48(v1);
    v1 = v5;
    if (!v3)
      break;
LABEL_9:
    a1 = (_QWORD *)(v3 + 32);
  }
  result = sub_22F10C2A4(v1);
  if (result)
  {
    if ((*(_DWORD *)(result + 28) & 0x7Eu) - 34 > 3)
      return 0;
    else
      return *(_BYTE *)(result + 76) & 1;
  }
  return result;
}

BOOL sub_22EA1DCD0(uint64_t a1)
{
  if (a1 && (*(_DWORD *)(a1 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
    return sub_22EFB9440(a1);
  if (a1 && (*(_DWORD *)(a1 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
    return sub_22EFB93F4(a1);
  return 0;
}

uint64_t sub_22EA1DD0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v6;
  unsigned int v7;
  unsigned int v9;

  if (*(_DWORD *)a3 != 2
    || sub_22F1CF68C(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 32), 0x1948u, *(_DWORD *)(a3 + 128), *(_QWORD *)(a1 + 104)) == 1|| !sub_22E3CB5E0(a2))
  {
    return 0;
  }
  result = **(_QWORD **)(a3 + 8) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = *(_DWORD *)(result + 28);
  v7 = v6 & 0x7F;
  if (v7 <= 0x2F && ((1 << (v6 & 0x7F)) & 0xC00000060000) != 0)
  {
    result = sub_22EFBAEA4(result);
    v6 = *(_DWORD *)(result + 28);
    v7 = v6 & 0x7F;
  }
  v9 = v7 - 60;
  if ((v6 & 0x7C) != 0x30 && v9 >= 7)
    return 0;
  return result;
}

uint64_t sub_22EA1DDB8(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int v28;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BOOL4 v65;
  _BOOL4 v66;
  unint64_t v67;
  unsigned int v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _BYTE *v72;
  int v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  int v78;
  _QWORD *v79;
  unsigned int v80;
  int v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  int i;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  int m;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  int n;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  int v151;
  int v152;
  _QWORD *v153;
  unsigned int v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  int j;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  int k;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  int v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  int v191;
  unsigned int v192[24];
  uint64_t v193[12];
  _OWORD v194[6];
  uint64_t v195[12];
  uint64_t v196[12];
  unint64_t v197;
  uint64_t v198[12];
  uint64_t v199[12];
  unsigned int v200[26];

  v4 = a2;
  sub_22EA203D8((uint64_t)a1, a2);
  v6 = *(_DWORD *)(v4 + 28);
  if ((v6 & 0x80) != 0)
    return 0;
  if (!*(_DWORD *)(a3 + 16))
  {
    v7 = *(_QWORD *)(v4 + 16);
    v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
    if ((*(_BYTE *)(a1[9] + 1) & 1) != 0)
    {
      if ((v7 & 4) != 0)
        v8 = (_QWORD *)*v8;
      if ((*(_WORD *)(sub_22EFCBB30((unint64_t)v8) + 8) & 0x7F) == 0x53)
      {
        if ((sub_22EA46308(a1, v4, 1, a3) & 1) == 0)
          goto LABEL_23;
      }
      else if (!sub_22EA1F584((uint64_t)a1, v4) || !sub_22EA46308(a1, v4, 0, a3))
      {
        goto LABEL_23;
      }
    }
    else
    {
      if ((v7 & 4) != 0)
        v8 = (_QWORD *)*v8;
      if ((*(_WORD *)(sub_22EFCBB30((unint64_t)v8) + 8) & 0x7F) != 0x53)
        goto LABEL_23;
      v9 = sub_22EA1C0A0(a1[11], *(_QWORD *)(v4 + 40));
      if (!v9)
        goto LABEL_23;
      v10 = v9;
      *(_DWORD *)a3 = 0;
      *(_DWORD *)(a3 + 16) = 0;
      v11 = *(_QWORD *)(a3 + 88);
      if (v11)
      {
        v12 = sub_22EC6CBD0(v11);
        MEMORY[0x2348A0E9C](v12, 0x10E0C409F09D3C3);
        v13 = *(_DWORD *)(a3 + 16);
      }
      else
      {
        v13 = 0;
      }
      *(_BYTE *)(a3 + 165) = 0;
      *(_QWORD *)(a3 + 88) = 0;
      *(_QWORD *)(a3 + 96) = 0;
      v14 = *(unsigned int *)(v10 + 28);
      if (v13 >= *(_DWORD *)(a3 + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v13 = *(_DWORD *)(a3 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8 * v13) = (v14 >> 13) & 3 | v10;
      ++*(_DWORD *)(a3 + 16);
      *(_DWORD *)a3 = 2;
    }
    *(_BYTE *)(a3 + 165) = 1;
LABEL_23:
    v6 = *(_DWORD *)(v4 + 28);
    if (*(_DWORD *)(a3 + 16))
      goto LABEL_24;
    v24 = *(_DWORD *)(v4 + 28) & 0x7F;
    if (v24 != 64 && v24 != 62)
    {
      v25 = *(_QWORD *)(v4 + 16);
      v26 = (_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF8);
      v27 = v25 & 0xFFFFFFFFFFFFFFF8;
      if ((v25 & 4) != 0)
        v27 = v26[1];
      v28 = *(_WORD *)(sub_22EFCBB30(v27) + 8) & 0x7F;
      if (v28 == 16 || v28 == 83)
        goto LABEL_45;
      if (v24 != 64)
      {
        if ((v25 & 4) != 0)
          v26 = (_QWORD *)*v26;
        if (((_WORD)v26[1] & 0x7Eu) - 34 <= 3)
        {
LABEL_45:
          if (sub_22E633F90(v4) && (sub_22E991F30(a1, v4) & 1) != 0)
            return 1;
        }
      }
    }
    return 0;
  }
LABEL_24:
  v197 = v4;
  if ((v6 & 0x80) != 0 || !sub_22EC631CC((uint64_t)a1, a3, v4))
    return 1;
  v15 = sub_22EFB6870(v4);
  if (*(_DWORD *)a3 != 2)
    goto LABEL_94;
  v16 = v15;
  v17 = **(_QWORD **)(a3 + 8) & 0xFFFFFFFFFFFFFFFCLL;
  v18 = *(_DWORD *)(v17 + 28);
  v19 = v18 & 0x7F;
  v20 = v19 > 0x2F || ((1 << (v18 & 0x7F)) & 0xC00000060000) == 0;
  v21 = **(_QWORD **)(a3 + 8) & 0xFFFFFFFFFFFFFFFCLL;
  if (v16)
  {
    if (!v20)
    {
      v21 = sub_22EFBAEA4(v21);
      v19 = *(_DWORD *)(v21 + 28) & 0x7F;
    }
    if (v19 == 31)
      v22 = v21;
    else
      v22 = 0;
    if (v22)
    {
      v23 = *(_QWORD *)(v22 + 48);
      if (!v17)
        goto LABEL_82;
    }
    else
    {
      v23 = 0;
      if (!v17)
        goto LABEL_82;
    }
    if ((v18 & 0x7E) == 0x2E)
    {
      v40 = *(_QWORD *)(v17 + 64);
      if (!v40 || (*(_DWORD *)(v40 + 28) & 0x7F) != 0x1F)
        goto LABEL_78;
      v41 = *(_QWORD *)(v40 + 16);
      v42 = (_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF8);
      if ((v41 & 4) != 0)
        v42 = (_QWORD *)*v42;
      v43 = sub_22EFCBB30((unint64_t)v42);
      v44 = *(_QWORD *)(v16 + 16);
      v45 = (_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF8);
      if ((v44 & 4) != 0)
        v45 = (_QWORD *)*v45;
      v46 = sub_22EFCBB30((unint64_t)v45);
      if (!v46 || (v47 = v46, v48 = sub_22EFCC008(v43), v48 != sub_22EFCC008(v47)))
      {
LABEL_78:
        sub_22E8FCA40(a1, *(_DWORD *)(v16 + 24), 0x13E4u, 0, (uint64_t)v200);
        sub_22E903BEC(v200);
        sub_22E8FCA40(a1, *(_DWORD *)(*(_QWORD *)(v17 + 64) + 24), 0x1812u, 0, (uint64_t)v199);
        sub_22E903BEC((unsigned int *)v199);
        do
          v17 = *(_QWORD *)(v17 + 72);
        while (v17 && (*(_DWORD *)(v17 + 28) & 0x7E) == 0x2E);
        goto LABEL_89;
      }
    }
  }
  else
  {
    if (!v20)
    {
      v21 = sub_22EFBAEA4(v21);
      v19 = *(_DWORD *)(v21 + 28) & 0x7F;
    }
    v22 = 0;
    if (v19 - 60 >= 7)
      v23 = 0;
    else
      v23 = v21;
    if (v17 && (v18 & 0x7E) == 0x2E)
    {
      v30 = *(_QWORD *)(v17 + 64);
      if (v30)
        v31 = (*(_DWORD *)(v30 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9;
      else
        v31 = 0;
      if (v31)
      {
        v32 = *(_QWORD *)(v30 + 16);
        v33 = (_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF8);
        if ((v32 & 4) != 0)
          v33 = (_QWORD *)*v33;
        v34 = sub_22EFCBB30((unint64_t)v33);
        v35 = *(_QWORD *)(v4 + 16);
        v36 = (_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF8);
        if ((v35 & 4) != 0)
          v36 = (_QWORD *)*v36;
        if ((v37 = sub_22EFCBB30((unint64_t)v36)) != 0
          && (v38 = v37, v39 = sub_22EFCC008(v34), v39 == sub_22EFCC008(v38))
          || sub_22EFB93F4(v30) && sub_22EFB93F4(v4))
        {
          v22 = 0;
          goto LABEL_82;
        }
      }
      sub_22E8FCA40(a1, *(_DWORD *)(v4 + 24), 0x13E4u, 0, (uint64_t)v200);
      sub_22E903BEC(v200);
      sub_22E8FCA40(a1, *(_DWORD *)(*(_QWORD *)(v17 + 64) + 24), 0x1812u, 0, (uint64_t)v199);
      sub_22E903BEC((unsigned int *)v199);
      do
        v17 = *(_QWORD *)(v17 + 72);
      while (v17 && (*(_DWORD *)(v17 + 28) & 0x7E) == 0x2E);
LABEL_89:
      sub_22E8FCA40(a1, *(_DWORD *)(v17 + 24), 0x180Fu, 0, (uint64_t)v198);
      LODWORD(v196[0]) = 0;
      sub_22E8900C4((uint64_t)v198, (int *)v196);
      v50 = v198;
LABEL_90:
      sub_22E903BEC((unsigned int *)v50);
LABEL_91:
      v49 = v197;
      goto LABEL_92;
    }
  }
LABEL_82:
  if (!v23)
  {
LABEL_94:
    sub_22E8FCA40(a1, *(_DWORD *)(v4 + 24), 0x1215u, 0, (uint64_t)v200);
    v199[0] = *(_QWORD *)(v197 + 40);
    sub_22E894538((uint64_t)v200, v199);
    sub_22E903BEC(v200);
    sub_22F31D30C((uint64_t)a1, **(_QWORD **)(a3 + 8) & 0xFFFFFFFFFFFFFFFCLL, *(_DWORD *)(v197 + 24));
    goto LABEL_91;
  }
  sub_22EA0DDBC(v4, v23);
  if (!v16 || sub_22ED5D218(a1, *(_QWORD *)(v16 + 56), *(_QWORD *)(v22 + 56), 1, 0, 0))
  {
    if ((*(_DWORD *)(v23 + 28) & 0x7F) != 0x40)
    {
      v51 = *(_QWORD *)(v23 + 16);
      v52 = v51 & 0xFFFFFFFFFFFFFFF8;
      if ((v51 & 4) != 0)
        v52 = *(_QWORD *)v52;
      if ((*(_WORD *)(v52 + 8) & 0x7Eu) - 34 <= 3
        && ((*(uint64_t (**)(unint64_t))(*(_QWORD *)v4 + 24))(v4) & 1) == 0)
      {
        sub_22E8FCA40(a1, *(_DWORD *)(v4 + 24), 0xCD1u, 0, (uint64_t)v200);
        v53 = *(_QWORD *)(v197 + 40);
        if ((v53 & 7) != 0)
          v54 = 0;
        else
          v54 = v53 & 0xFFFFFFFFFFFFFFF8;
        v199[0] = v54;
        sub_22E8BAE44((uint64_t)v200, v199);
        sub_22E903BEC(v200);
        sub_22E8FCA40(a1, *(_DWORD *)(v23 + 24), 0x6Cu, 0, (uint64_t)v200);
        sub_22E903BEC(v200);
        sub_22EFC77E8(v197, 1);
        v4 = v197;
      }
    }
    sub_22EA084D0((uint64_t)a1, v4, (_BYTE *)v23, 1);
    if (sub_22F29CC90(v197) && (*(_BYTE *)(v23 + 96) & 7) == 0 && !sub_22F29CC90(v23))
    {
      sub_22E8FCA40(a1, *(_DWORD *)(v197 + 24), 0x1C01u, 0, (uint64_t)v199);
      v198[0] = *(_QWORD *)(v197 + 40);
      sub_22E894538((uint64_t)v199, v198);
      sub_22E903BEC((unsigned int *)v199);
      sub_22E8FCA40(a1, *(_DWORD *)(v23 + 24), 0x6Cu, 0, (uint64_t)v199);
      sub_22E903BEC((unsigned int *)v199);
      v84 = v197;
      if ((*(_BYTE *)(v197 + 29) & 1) != 0)
      {
        sub_22EFC8E88(v197);
        v86 = *(char **)v85;
        v87 = *(unsigned int *)(v85 + 8);
        if ((_DWORD)v87)
        {
          v88 = &v86[8 * v87];
          v89 = 8 * v87 - 8;
          v90 = *(char **)v85;
          v91 = *(char **)v85;
          while (1)
          {
            v92 = *(_QWORD *)v91;
            v91 += 8;
            if (*(_WORD *)(v92 + 32) == 350)
              break;
            v89 -= 8;
            v90 = v91;
            if (v91 == v88)
              goto LABEL_305;
          }
          if (v91 == v88)
          {
            v88 = v90;
          }
          else
          {
            v138 = 8;
            v88 = v90;
            do
            {
              v139 = *(_QWORD *)&v90[v138];
              if (*(_WORD *)(v139 + 32) != 350)
              {
                *(_QWORD *)v88 = v139;
                v88 += 8;
              }
              v138 += 8;
              v89 -= 8;
            }
            while (v89);
            v86 = *(char **)v85;
          }
        }
        else
        {
          v88 = *(char **)v85;
        }
LABEL_305:
        v144 = (unint64_t)(v88 - v86) >> 3;
        *(_DWORD *)(v85 + 8) = v144;
        if (!(_DWORD)v144)
          *(_DWORD *)(v84 + 28) &= ~0x100u;
      }
    }
    v196[0] = 0;
    if ((*(_BYTE *)(v197 + 29) & 1) != 0)
    {
      sub_22EFC8E88(v197);
      v56 = *(uint64_t **)v55;
      v57 = *(unsigned int *)(v55 + 8);
      v58 = *(uint64_t **)v55;
      if ((_DWORD)v57)
      {
        v59 = 8 * v57;
        v58 = *(uint64_t **)v55;
        while (*(_WORD *)(*v58 + 32) != 193)
        {
          ++v58;
          v59 -= 8;
          if (!v59)
            goto LABEL_122;
        }
      }
      if (v58 != &v56[v57])
      {
        do
        {
          v61 = *v56++;
          v60 = v61;
        }
        while (*(_WORD *)(v61 + 32) != 193);
        v196[0] = v60;
        if ((*(_BYTE *)(v23 + 29) & 1) == 0)
          goto LABEL_121;
        sub_22EFC8E88(v23);
        v109 = *((unsigned int *)v108 + 2);
        if ((_DWORD)v109)
        {
          v110 = 8 * v109;
          v111 = *v108;
          while (*(_WORD *)(*(_QWORD *)v111 + 32) != 193)
          {
            v111 += 8;
            v110 -= 8;
            if (!v110)
              goto LABEL_121;
          }
        }
        else
        {
          v111 = *v108;
        }
        if (v111 == *v108 + 8 * v109)
        {
LABEL_121:
          sub_22E8FCA40(a1, *(_DWORD *)(v197 + 24), 0xB05u, 0, (uint64_t)v198);
          sub_22E8FB3C4((uint64_t)v198, v196);
          sub_22E903BEC((unsigned int *)v198);
          sub_22E8FCA40(a1, *(_DWORD *)(v23 + 24), 0x6Cu, 0, (uint64_t)v198);
          sub_22E903BEC((unsigned int *)v198);
          sub_22EA0DEEC(v197);
        }
      }
    }
LABEL_122:
    v62 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v23 + 80) + 72), *(_QWORD *)(v23 + 80));
    v63 = v197;
    if (v62 != v23)
    {
      v64 = v62;
      v65 = sub_22EA0EFC8(a1[9], v197, v62, *(_BYTE *)(a3 + 165));
      sub_22EA0EA3C((unint64_t)a1, v63, v64, v65);
      v63 = v197;
      if ((*(_BYTE *)(v197 + 28) & 0x80) != 0)
        return 1;
    }
    v66 = sub_22EA0EFC8(a1[9], v63, v23, *(_BYTE *)(a3 + 165));
    sub_22EA0EA3C((unint64_t)a1, v63, v23, v66);
    if ((*(_BYTE *)(v197 + 28) & 0x80) != 0)
      return 1;
    v67 = sub_22EA0F0EC(v23, v197);
    v68 = v67;
    v69 = HIDWORD(v67);
    if ((*(_BYTE *)(v197 + 96) & 7) == 2)
    {
      if ((*(_DWORD *)(v197 + 28) & 0x7F) == 0x40)
        goto LABEL_130;
      v70 = *(_QWORD *)(v197 + 16);
      v71 = v70 & 0xFFFFFFFFFFFFFFF8;
      if ((v70 & 4) != 0)
        v71 = *(_QWORD *)v71;
      if ((*(_WORD *)(v71 + 8) & 0x7Eu) - 34 >= 4)
      {
LABEL_130:
        if ((sub_22EFB948C(v23) | 4) == 6)
        {
          if ((*(_BYTE *)a1[9] & 0x20) == 0)
          {
            sub_22E8FCA40(a1, *(_DWORD *)(v197 + 24), 0x1279u, 0, (uint64_t)v196);
            v195[0] = *(_QWORD *)(v197 + 40);
            sub_22E894538((uint64_t)v196, v195);
            sub_22E903BEC((unsigned int *)v196);
            sub_22E8FCA40(a1, v69, v68, 0, (uint64_t)v196);
            v50 = v196;
            goto LABEL_90;
          }
          sub_22E8FCA40(a1, *(_DWORD *)(v197 + 24), 0x14E8u, 0, (uint64_t)v196);
          v195[0] = *(_QWORD *)(v197 + 40);
          sub_22E894538((uint64_t)v196, v195);
          sub_22E903BEC((unsigned int *)v196);
          sub_22E8FCA40(a1, v69, v68, 0, (uint64_t)v196);
          sub_22E903BEC((unsigned int *)v196);
        }
      }
    }
    v72 = (_BYTE *)v197;
    if ((*(_BYTE *)(v197 + 96) & 5) != 1 || (v73 = sub_22EFB948C(v23), v72 = (_BYTE *)v197, v73 == 3) || !v73)
    {
      v74 = *(_BYTE *)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v72 + 32))(v72) + 96) & 7;
      v72 = (_BYTE *)v197;
      if (v74 != 2)
      {
        if ((*(_DWORD *)(v197 + 28) & 0x7F) == 0x40)
          goto LABEL_142;
        v75 = *(_QWORD *)(v197 + 16);
        v76 = v75 & 0xFFFFFFFFFFFFFFF8;
        if ((v75 & 4) != 0)
          v76 = *(_QWORD *)v76;
        if ((*(_WORD *)(v76 + 8) & 0x7Eu) - 34 >= 4)
        {
LABEL_142:
          v77 = *(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v23 + 32))(v23) + 96) & 7;
          v72 = (_BYTE *)v197;
          if (v77 == 2)
          {
            v78 = *(_DWORD *)(v197 + 24);
            v79 = a1;
            v80 = 4035;
LABEL_156:
            sub_22E8FCA40(v79, v78, v80, 0, (uint64_t)v195);
            *(_QWORD *)&v194[0] = *(_QWORD *)(v197 + 40);
            sub_22E894538((uint64_t)v195, (uint64_t *)v194);
            sub_22E903BEC((unsigned int *)v195);
            sub_22E8FCA40(a1, v69, v68, 0, (uint64_t)v195);
            v50 = v195;
            goto LABEL_90;
          }
        }
      }
    }
    if ((v72[96] & 5) == 1)
    {
      v81 = sub_22EFB948C(v23);
      if ((v81 == 3 || !v81) && ((sub_22E3CEC2C(v23) & 1) != 0 || (*(_DWORD *)(v23 + 28) & 0x7F) == 0x40))
      {
        v78 = *(_DWORD *)(v197 + 24);
        v79 = a1;
        v80 = 3354;
        goto LABEL_156;
      }
    }
    v82 = sub_22EFB948C(v23);
    v83 = v197;
    if (v82 && v82 != 3)
    {
      if ((sub_22E3CEC2C(v197) & 1) != 0 || (*(_DWORD *)(v83 + 28) & 0x7F) == 0x40)
      {
        v83 = v197;
        if ((*(_BYTE *)(v197 + 96) & 5) != 1)
        {
          v78 = *(_DWORD *)(v197 + 24);
          v79 = a1;
          v80 = 4031;
          goto LABEL_156;
        }
      }
      else
      {
        v83 = v197;
      }
    }
    if ((sub_22EA04ED8(a1, v83, v23) & 1) != 0 || (sub_22EA051EC(a1, v83, v23) & 1) != 0)
      return 1;
    v93 = v197;
    v94 = *(_DWORD *)(v197 + 28) & 0x7F;
    if ((*(_BYTE *)(v197 + 96) & 5) != 1)
    {
      if (v94 == 64 || v94 == 62)
        goto LABEL_297;
      v95 = *(_QWORD *)(v197 + 16);
      v96 = (_QWORD *)(v95 & 0xFFFFFFFFFFFFFFF8);
      v97 = v95 & 0xFFFFFFFFFFFFFFF8;
      if ((v95 & 4) != 0)
        v97 = v96[1];
      v98 = *(_WORD *)(sub_22EFCBB30(v97) + 8) & 0x7F;
      if (v98 != 16 && v98 != 83)
      {
        if ((v95 & 4) != 0)
          v96 = (_QWORD *)*v96;
        if (((_WORD)v96[1] & 0x7Eu) - 34 >= 4)
        {
LABEL_297:
          v140 = *(_QWORD *)(v23 + 16);
          v141 = v140 & 0xFFFFFFFFFFFFFFF8;
          if ((v140 & 4) != 0)
            v141 = *(_QWORD *)(v141 + 8);
          if ((*(_WORD *)(v141 + 8) & 0x7Eu) - 34 > 3)
            goto LABEL_303;
          v142 = *(_QWORD *)(v93 + 16);
          v143 = v142 & 0xFFFFFFFFFFFFFFF8;
          if ((v142 & 4) != 0)
            v143 = *(_QWORD *)(v143 + 8);
          if ((*(_WORD *)(v143 + 8) & 0x7Eu) - 34 <= 3)
          {
LABEL_303:
            v78 = *(_DWORD *)(v93 + 24);
            v79 = a1;
            v80 = 4628;
            goto LABEL_156;
          }
        }
      }
    }
    if (v94 != 64 && (*(_BYTE *)(v93 + 97) & 0x20) != 0)
    {
      v99 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v23 + 80) + 72), *(_QWORD *)(v23 + 80));
      if ((*(_DWORD *)(v99 + 28) & 0x7F) == 0x40 || (*(_BYTE *)(v99 + 97) & 0x20) == 0)
      {
        v100 = v23;
        if ((*(_DWORD *)(v23 + 28) & 0x7F) != 0x53)
        {
          v101 = *(_QWORD *)(v23 + 16);
          v102 = v101 & 0xFFFFFFFFFFFFFFF8;
          if ((v101 & 4) != 0)
            v102 = *(_QWORD *)v102;
          for (i = *(_WORD *)(v102 + 8) & 0x7F; i != 83; i = *(_WORD *)(v102 + 8) & 0x7F)
          {
            v104 = -40;
            if (i > 70)
            {
              if (i == 71)
              {
                v104 = -56;
              }
              else if (i != 81)
              {
                goto LABEL_191;
              }
            }
            else
            {
              if (i > 0x18)
                goto LABEL_190;
              if (i == 16)
                goto LABEL_184;
              if (((1 << i) & 0x1066) != 0)
                goto LABEL_197;
              if (i == 24)
              {
LABEL_184:
                v104 = -48;
              }
              else
              {
LABEL_190:
                if (i != 70)
                {
LABEL_191:
                  v105 = i - 52;
                  if ((i - 33) >= 5)
                    v106 = -48;
                  else
                    v106 = -64;
                  if (v105 >= 6)
                    v104 = v106;
                  else
                    v104 = -72;
                  goto LABEL_197;
                }
                v104 = -64;
              }
            }
LABEL_197:
            v107 = *(_QWORD *)(v102 + v104 + 16);
            v102 = v107 & 0xFFFFFFFFFFFFFFF8;
            if ((v107 & 4) != 0)
              v102 = *(_QWORD *)v102;
          }
          v100 = v102 - 40;
        }
        v112 = *(_QWORD *)(v23 + 80);
        if (v112)
        {
          v113 = 0;
          v114 = *(_QWORD *)(v100 + 88);
          v115 = *(_QWORD *)(v23 + 80);
          while (sub_22EFBBF74(v115, v114) != 2)
          {
            if ((*(_BYTE *)(v115 + 72) & 3) != 0)
            {
              if (v113)
                goto LABEL_219;
              v113 = 1;
            }
            v116 = sub_22E3CD31C((uint64_t *)(v115 + 72), v115);
            if (v116 != v112)
            {
              v115 = v116;
              if (v116)
                continue;
            }
            goto LABEL_219;
          }
          sub_22E8FCA40(a1, *(_DWORD *)(v197 + 24), 0xE26u, 0, (uint64_t)v195);
          sub_22E890024((uint64_t)v195, (uint64_t *)&v197);
          sub_22E903BEC((unsigned int *)v195);
          sub_22E8FCA40(a1, *(_DWORD *)(v115 + 24), 0x6Du, 0, (uint64_t)v195);
          sub_22E903BEC((unsigned int *)v195);
        }
      }
    }
LABEL_219:
    if ((*(_DWORD *)(v23 + 28) & 0x7F) != 0x40 && (*(_BYTE *)(v23 + 97) & 0x20) != 0
      || (*(_DWORD *)(v197 + 28) & 0x7F) == 0x40
      || (*(_BYTE *)(v197 + 97) & 0x20) == 0
      || !sub_22EFC9084(v23, 0))
    {
LABEL_310:
      sub_22EFBB794(v197);
      v146 = v145;
      sub_22EFBB794(v23);
      if (v146 == v147)
      {
LABEL_318:
        if ((*(_BYTE *)(a1[9] + 1) & 1) != 0)
        {
          if (!v197 || (v155 = v197, (*(_DWORD *)(v197 + 28) & 0x7F) != 0x53))
          {
            v156 = *(_QWORD *)(v197 + 16);
            v157 = v156 & 0xFFFFFFFFFFFFFFF8;
            if ((v156 & 4) != 0)
              v157 = *(_QWORD *)v157;
            for (j = *(_WORD *)(v157 + 8) & 0x7F; j != 83; j = *(_WORD *)(v157 + 8) & 0x7F)
            {
              v159 = -40;
              if (j > 70)
              {
                if (j == 71)
                {
                  v159 = -56;
                }
                else if (j != 81)
                {
                  goto LABEL_334;
                }
              }
              else
              {
                if (j > 0x18)
                  goto LABEL_333;
                if (j == 16)
                  goto LABEL_327;
                if (((1 << j) & 0x1066) != 0)
                  goto LABEL_340;
                if (j == 24)
                {
LABEL_327:
                  v159 = -48;
                }
                else
                {
LABEL_333:
                  if (j != 70)
                  {
LABEL_334:
                    v160 = j - 52;
                    if ((j - 33) >= 5)
                      v161 = -48;
                    else
                      v161 = -64;
                    if (v160 >= 6)
                      v159 = v161;
                    else
                      v159 = -72;
                    goto LABEL_340;
                  }
                  v159 = -64;
                }
              }
LABEL_340:
              v162 = *(_QWORD *)(v157 + v159 + 16);
              v157 = v162 & 0xFFFFFFFFFFFFFFF8;
              if ((v162 & 4) != 0)
                v157 = *(_QWORD *)v157;
            }
            v155 = v157 - 40;
          }
          if (sub_22EFBBF74(v197, *(_QWORD *)(v155 + 88)) == 2)
          {
            if ((*(_DWORD *)(v23 + 28) & 0x7F) == 0x40)
              goto LABEL_356;
            v163 = *(_QWORD *)(v23 + 16);
            v164 = v163 & 0xFFFFFFFFFFFFFFF8;
            if ((v163 & 4) != 0)
              v164 = *(_QWORD *)v164;
            if ((*(_WORD *)(v164 + 8) & 0x7Eu) - 34 > 3
              || (v165 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v23 + 32))(v23),
                  (*(_DWORD *)(v165 + 28) & 0x7F) == 0x40)
              || (*(_BYTE *)(v165 + 97) & 0x20) == 0
              || (v166 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v23 + 32))(v23),
                  (*(_DWORD *)(v166 + 28) & 0x7F) == 0x40)
              || (*(_BYTE *)(v166 + 97) & 0x80) == 0)
            {
LABEL_356:
              v167 = v23;
              if ((*(_DWORD *)(v23 + 28) & 0x7F) != 0x53)
              {
                v168 = *(_QWORD *)(v23 + 16);
                v169 = v168 & 0xFFFFFFFFFFFFFFF8;
                if ((v168 & 4) != 0)
                  v169 = *(_QWORD *)v169;
                for (k = *(_WORD *)(v169 + 8) & 0x7F; k != 83; k = *(_WORD *)(v169 + 8) & 0x7F)
                {
                  v171 = -40;
                  if (k > 70)
                  {
                    if (k == 71)
                    {
                      v171 = -56;
                    }
                    else if (k != 81)
                    {
                      goto LABEL_370;
                    }
                  }
                  else
                  {
                    if (k > 0x18)
                      goto LABEL_369;
                    if (k == 16)
                      goto LABEL_363;
                    if (((1 << k) & 0x1066) != 0)
                      goto LABEL_376;
                    if (k == 24)
                    {
LABEL_363:
                      v171 = -48;
                    }
                    else
                    {
LABEL_369:
                      if (k != 70)
                      {
LABEL_370:
                        v172 = k - 52;
                        if ((k - 33) >= 5)
                          v173 = -48;
                        else
                          v173 = -64;
                        if (v172 >= 6)
                          v171 = v173;
                        else
                          v171 = -72;
                        goto LABEL_376;
                      }
                      v171 = -64;
                    }
                  }
LABEL_376:
                  v174 = *(_QWORD *)(v169 + v171 + 16);
                  v169 = v174 & 0xFFFFFFFFFFFFFFF8;
                  if ((v174 & 4) != 0)
                    v169 = *(_QWORD *)v169;
                }
                v167 = v169 - 40;
              }
              v175 = *(_QWORD *)(v23 + 80);
              if (v175)
              {
                v176 = 0;
                v177 = *(_QWORD *)(v167 + 88);
                v178 = *(_QWORD *)(v23 + 80);
                while (sub_22EFBBF74(v178, v177) != 2)
                {
                  if ((*(_BYTE *)(v178 + 72) & 3) != 0)
                  {
                    if (v176)
                      goto LABEL_393;
                    v176 = 1;
                  }
                  v179 = sub_22E3CD31C((uint64_t *)(v178 + 72), v178);
                  if (v179 != v175)
                  {
                    v178 = v179;
                    if (v179)
                      continue;
                  }
                  goto LABEL_393;
                }
                if ((sub_22F31D794(a1, v178, v197) & 1) != 0)
                  return 1;
              }
            }
            else
            {
              sub_22E8FCA40(a1, *(_DWORD *)(v197 + 24), 0x1967u, 0, (uint64_t)v193);
              sub_22E903BEC((unsigned int *)v193);
            }
          }
        }
LABEL_393:
        v180 = *(_QWORD *)(v23 + 16);
        v181 = v180 & 0xFFFFFFFFFFFFFFF8;
        if ((v180 & 4) != 0)
          v181 = *(_QWORD *)v181;
        if ((*(_WORD *)(v181 + 8) & 0x7Eu) - 34 >= 4)
        {
          v182 = v197;
          v183 = sub_22EFBBDAC(v23);
          if (v183)
          {
            if (v183 == 1)
            {
              v184 = *(_QWORD *)(v182 + 16);
              v185 = v184 & 0xFFFFFFFFFFFFFFF8;
              if ((v184 & 4) != 0)
                v185 = *(_QWORD *)(v185 + 8);
              if (sub_22EFCBD94(v185, 1))
              {
LABEL_401:
                sub_22E8FCA40(a1, *(_DWORD *)(v197 + 24), 0xCC0u, 0, (uint64_t)v192);
                sub_22E890024((uint64_t)v192, (uint64_t *)&v197);
                sub_22E903BEC(v192);
                sub_22E8FCA40(a1, v69, v68, 0, (uint64_t)v192);
                v50 = (uint64_t *)v192;
                goto LABEL_90;
              }
            }
          }
          else
          {
            v186 = *(_QWORD *)(v182 + 16);
            v187 = v186 & 0xFFFFFFFFFFFFFFF8;
            if ((v186 & 4) != 0)
              v187 = *(_QWORD *)(v187 + 8);
            if (sub_22F3B13A0(v187))
              goto LABEL_401;
          }
        }
        v188 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v23 + 80) + 72), *(_QWORD *)(v23 + 80));
        if (sub_22EFC9084(v188, 0))
        {
          v189 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v197 + 32))(v197);
          *(_DWORD *)(v189 + 28) |= 0x400u;
        }
        sub_22F31D8D8((unint64_t *)(v197 + 72), *(_QWORD *)(v23 + 80));
        if (v16)
        {
          sub_22EA0F280((unint64_t *)(v16 + 64), v22);
          v190 = v197;
          v191 = *(_DWORD *)(v23 + 28) & 0x6000;
          *(_DWORD *)(v197 + 28) = *(_DWORD *)(v197 + 28) & 0xFFFF9FFF | v191;
        }
        else
        {
          v16 = v197;
          v191 = *(_DWORD *)(v23 + 28) & 0x6000;
          v190 = v197;
        }
        *(_DWORD *)(v16 + 28) = *(_DWORD *)(v16 + 28) & 0xFFFF9FFF | v191;
        if ((*(_DWORD *)(v23 + 28) & 0x7F) != 0x40 && (*(_BYTE *)(v23 + 97) & 0x20) != 0)
          *(_DWORD *)(v190 + 96) |= 0x2000u;
        return 1;
      }
      sub_22EFBB794(v23);
      if (v148)
      {
        sub_22EFBB794(v197);
        if (v149)
        {
          sub_22E8FCA40(a1, *(_DWORD *)(v197 + 24), 0x1309u, 0, (uint64_t)v194);
          v193[0] = *(_QWORD *)(v197 + 40);
          v150 = sub_22E894538((uint64_t)v194, v193);
          sub_22EFBB794(v197);
          LOBYTE(v192[0]) = v151 == 2;
          sub_22E894E38(v150, (unsigned __int8 *)v192);
LABEL_317:
          sub_22E903BEC((unsigned int *)v194);
          sub_22E8FCA40(a1, v69, v68, 0, (uint64_t)v194);
          sub_22E903BEC((unsigned int *)v194);
          goto LABEL_318;
        }
        v152 = *(_DWORD *)(v197 + 24);
        v153 = a1;
        v154 = 4039;
      }
      else
      {
        v152 = *(_DWORD *)(v197 + 24);
        v153 = a1;
        v154 = 4871;
      }
      sub_22E8FCA40(v153, v152, v154, 0, (uint64_t)v194);
      v193[0] = *(_QWORD *)(v197 + 40);
      sub_22E894538((uint64_t)v194, v193);
      goto LABEL_317;
    }
    v117 = v23;
    if ((*(_DWORD *)(v23 + 28) & 0x7F) != 0x53)
    {
      v118 = *(_QWORD *)(v23 + 16);
      v119 = v118 & 0xFFFFFFFFFFFFFFF8;
      if ((v118 & 4) != 0)
        v119 = *(_QWORD *)v119;
      for (m = *(_WORD *)(v119 + 8) & 0x7F; m != 83; m = *(_WORD *)(v119 + 8) & 0x7F)
      {
        v121 = -40;
        if (m > 70)
        {
          if (m == 71)
          {
            v121 = -56;
          }
          else if (m != 81)
          {
            goto LABEL_238;
          }
        }
        else
        {
          if (m > 0x18)
            goto LABEL_237;
          if (m == 16)
            goto LABEL_231;
          if (((1 << m) & 0x1066) != 0)
            goto LABEL_244;
          if (m == 24)
          {
LABEL_231:
            v121 = -48;
          }
          else
          {
LABEL_237:
            if (m != 70)
            {
LABEL_238:
              v122 = m - 52;
              if ((m - 33) >= 5)
                v123 = -48;
              else
                v123 = -64;
              if (v122 >= 6)
                v121 = v123;
              else
                v121 = -72;
              goto LABEL_244;
            }
            v121 = -64;
          }
        }
LABEL_244:
        v124 = *(_QWORD *)(v119 + v121 + 16);
        v119 = v124 & 0xFFFFFFFFFFFFFFF8;
        if ((v124 & 4) != 0)
          v119 = *(_QWORD *)v119;
      }
      v117 = v119 - 40;
    }
    v125 = *(_QWORD *)(v23 + 80);
    if (v125)
    {
      v126 = 0;
      v127 = *(_QWORD *)(v117 + 88);
      v128 = *(_QWORD *)(v23 + 80);
      while (sub_22EFBBF74(v128, v127) != 2)
      {
        if ((*(_BYTE *)(v128 + 72) & 3) != 0)
        {
          if (v126)
            goto LABEL_259;
          v126 = 1;
        }
        v129 = sub_22E3CD31C((uint64_t *)(v128 + 72), v128);
        if (v129 != v125)
        {
          v128 = v129;
          if (v129)
            continue;
        }
        goto LABEL_259;
      }
      goto LABEL_310;
    }
LABEL_259:
    if (!v197 || (v130 = v197, (*(_DWORD *)(v197 + 28) & 0x7F) != 0x53))
    {
      v131 = *(_QWORD *)(v197 + 16);
      v132 = v131 & 0xFFFFFFFFFFFFFFF8;
      if ((v131 & 4) != 0)
        v132 = *(_QWORD *)v132;
      for (n = *(_WORD *)(v132 + 8) & 0x7F; n != 83; n = *(_WORD *)(v132 + 8) & 0x7F)
      {
        v134 = -40;
        if (n > 70)
        {
          if (n == 71)
          {
            v134 = -56;
          }
          else if (n != 81)
          {
            goto LABEL_274;
          }
        }
        else
        {
          if (n > 0x18)
            goto LABEL_273;
          if (n == 16)
            goto LABEL_267;
          if (((1 << n) & 0x1066) != 0)
            goto LABEL_280;
          if (n == 24)
          {
LABEL_267:
            v134 = -48;
          }
          else
          {
LABEL_273:
            if (n != 70)
            {
LABEL_274:
              v135 = n - 52;
              if ((n - 33) >= 5)
                v136 = -48;
              else
                v136 = -64;
              if (v135 >= 6)
                v134 = v136;
              else
                v134 = -72;
              goto LABEL_280;
            }
            v134 = -64;
          }
        }
LABEL_280:
        v137 = *(_QWORD *)(v132 + v134 + 16);
        v132 = v137 & 0xFFFFFFFFFFFFFFF8;
        if ((v137 & 4) != 0)
          v132 = *(_QWORD *)v132;
      }
      v130 = v132 - 40;
    }
    if (!sub_22EFBBF74(v197, *(_QWORD *)(v130 + 88)))
    {
      *(_QWORD *)&v194[0] = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v23 + 32))(v23);
      DWORD2(v194[0]) = 0;
      sub_22E785624((uint64_t)(a1 + 1064), v194);
    }
    goto LABEL_310;
  }
  v49 = v4;
LABEL_92:
  sub_22EFC77E8(v49, 1);
  return 1;
}

BOOL sub_22EA1F584(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  unint64_t v6;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) == 0)
    return sub_22EFB93F4(a2);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  if ((v5 & 4) != 0)
    v6 = *(_QWORD *)(v6 + 8);
  return sub_22EFCBD94(v6, 1)
      && !sub_22EA0E084(a2)
      && ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 68) & 0x20) == 0 || !sub_22E466E5C(a2) && !sub_22F295B40(a2))
      && sub_22EFB93F4(a2);
}

void sub_22EA1F618(_QWORD *a1, unint64_t a2, uint64_t a3, int a4, int a5, __n128 a6)
{
  uint64_t v6;
  int v7;
  char v8;
  unint64_t v9;
  unint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 v41;
  _BOOL4 v42;
  _BOOL4 v43;
  int v44;
  BOOL v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  _BOOL4 v51;
  int v52;
  uint64_t v53;
  _BOOL4 v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *i;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int16 v79;
  _BOOL4 v80;
  unsigned int v81[24];
  unsigned int v82[24];
  unsigned int v83[24];
  unsigned int v84[24];
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  int v88;
  __int16 v89;
  char v90;
  uint64_t v91;
  uint64_t v92[2];

  v92[0] = a3;
  if ((*(_DWORD *)(a2 + 28) & 0x80) != 0)
    return;
  v6 = a3;
  if ((*(_DWORD *)(a3 + 28) & 0x80) != 0)
    return;
  v7 = a5;
  v8 = a4;
  v9 = a2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 26 >= 7)
    v11 = 0;
  else
    v11 = a2;
  v12 = v11 != 0;
  if (v11)
  {
    v9 = *(_QWORD *)(v11 + 48);
    v7 = a4 & a5;
  }
  if ((*(_DWORD *)(a3 + 28) & 0x7Fu) - 33 >= 0xFFFFFFF9)
  {
    v6 = *(_QWORD *)(a3 + 48);
    v92[0] = v6;
    v12 = 1;
  }
  if (!v9 || !v6)
    return;
  if ((*(_BYTE *)(v9 + 29) & 1) == 0)
    goto LABEL_21;
  a6.n128_f64[0] = sub_22EFC8E88(v9);
  v14 = *(uint64_t **)v13;
  v15 = *(unsigned int *)(v13 + 8);
  v16 = *(uint64_t **)v13;
  if ((_DWORD)v15)
  {
    v17 = 8 * v15;
    v16 = *(uint64_t **)v13;
    while (*(_WORD *)(*v16 + 32) != 157)
    {
      ++v16;
      v17 -= 8;
      if (!v17)
        goto LABEL_21;
    }
  }
  if (v16 == &v14[v15])
  {
LABEL_21:
    v18 = 0;
  }
  else
  {
    do
    {
      v19 = *v14++;
      v18 = v19;
    }
    while (*(_WORD *)(v19 + 32) != 157);
  }
  v91 = v18;
  if ((*(_BYTE *)(v9 + 29) & 1) == 0)
    goto LABEL_31;
  a6.n128_f64[0] = sub_22EFC8E88(v9);
  v21 = *(uint64_t **)v20;
  v22 = *(unsigned int *)(v20 + 8);
  v23 = *(uint64_t **)v20;
  if ((_DWORD)v22)
  {
    v24 = 8 * v22;
    v23 = *(uint64_t **)v20;
    while (*(_WORD *)(*v23 + 32) != 155)
    {
      ++v23;
      v24 -= 8;
      if (!v24)
        goto LABEL_31;
    }
  }
  if (v23 == &v21[v22])
  {
LABEL_31:
    v25 = 0;
  }
  else
  {
    do
    {
      v26 = *v21++;
      v25 = v26;
    }
    while (*(_WORD *)(v26 + 32) != 155);
  }
  if ((*(_BYTE *)(v6 + 29) & 1) == 0)
    goto LABEL_41;
  a6.n128_f64[0] = sub_22EFC8E88(v6);
  v28 = *(uint64_t **)v27;
  v29 = *(unsigned int *)(v27 + 8);
  v30 = *(uint64_t **)v27;
  if ((_DWORD)v29)
  {
    v31 = 8 * v29;
    v30 = *(uint64_t **)v27;
    while (*(_WORD *)(*v30 + 32) != 157)
    {
      ++v30;
      v31 -= 8;
      if (!v31)
        goto LABEL_41;
    }
  }
  if (v30 == &v28[v29])
  {
LABEL_41:
    v32 = 0;
  }
  else
  {
    do
    {
      v33 = *v28++;
      v32 = v33;
    }
    while (*(_WORD *)(v33 + 32) != 157);
  }
  if ((*(_BYTE *)(v6 + 29) & 1) == 0)
    goto LABEL_51;
  a6.n128_f64[0] = sub_22EFC8E88(v6);
  v35 = *(uint64_t **)v34;
  v36 = *(unsigned int *)(v34 + 8);
  v37 = *(uint64_t **)v34;
  if ((_DWORD)v36)
  {
    v38 = 8 * v36;
    v37 = *(uint64_t **)v34;
    while (*(_WORD *)(*v37 + 32) != 155)
    {
      ++v37;
      v38 -= 8;
      if (!v38)
        goto LABEL_51;
    }
  }
  if (v37 == &v35[v36])
  {
LABEL_51:
    v39 = 0;
  }
  else
  {
    do
    {
      v40 = *v35++;
      v39 = v40;
    }
    while (*(_WORD *)(v40 + 32) != 155);
  }
  v80 = v12;
  if (!v32 || ((*(unsigned __int16 *)(v32 + 32) | (*(unsigned __int8 *)(v32 + 34) << 16)) & 0x10000) != 0)
  {
    if (!v39)
    {
      v41 = 0;
      v42 = v18 == 0;
      goto LABEL_85;
    }
    v41 = ((*(unsigned __int16 *)(v39 + 32) | (*(unsigned __int8 *)(v39 + 34) << 16)) & 0x10000) == 0;
  }
  else
  {
    v41 = 1;
  }
  if (v18 || v25 || !v41)
  {
    v42 = v18 == 0;
  }
  else
  {
    v42 = 1;
    if ((v8 & 1) == 0 && (*(_BYTE *)(v9 + 29) & 2) == 0)
    {
      if (sub_22E8BB0E8(v9))
      {
        v43 = 0;
      }
      else
      {
        v44 = *(_DWORD *)(v9 + 28);
        if ((v44 & 0x7Fu) - 67 >= 0xFFFFFFF9)
        {
          v43 = sub_22EFB6870(v9) == 0;
          v44 = *(_DWORD *)(v9 + 28);
        }
        else
        {
          v43 = 0;
        }
        if ((v44 & 0x7Eu) - 58 >= 0xFFFFFFFA && *(_QWORD *)(v9 + 144) < 8uLL)
          v43 = 1;
      }
      if (sub_22EFC9084(v9, 1))
      {
        v45 = !v32 || (*(_DWORD *)(v9 + 28) & 0x7Eu) - 52 >= 6;
        if (v45)
          v43 = 0;
      }
      v46 = v43 ? 6254 : 2807;
      sub_22E8FCA40(a1, *(_DWORD *)(v6 + 24), v46, 0, (uint64_t)&v86);
      v47 = sub_22E890024((uint64_t)&v86, v92);
      v48 = v32 ? v32 : v39;
      v85 = v48;
      sub_22E8FB3C4(v47, &v85);
      sub_22E903BEC((unsigned int *)&v86);
      sub_22E8FCA40(a1, *(_DWORD *)(v9 + 24), 0x6Cu, 0, (uint64_t)v84);
      sub_22E903BEC(v84);
      if (!v43)
      {
        sub_22EFC77E8(v92[0], 1);
        return;
      }
    }
  }
LABEL_85:
  v49 = (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(a1[11] + 15088) + 408))(*(_QWORD *)(a1[11] + 15088), a6);
  v50 = *(_DWORD *)(v92[0] + 28);
  if (v92[0] && (*(_DWORD *)(v92[0] + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
  {
    if ((*(_DWORD *)(v92[0] + 28) & 0x7F) == 0x40)
    {
      v51 = 0;
    }
    else
    {
      v55 = *(_QWORD *)(v92[0] + 16);
      v56 = v55 & 0xFFFFFFFFFFFFFFF8;
      if ((v55 & 4) != 0)
        v56 = *(_QWORD *)v56;
      v51 = (*(_WORD *)(v56 + 8) & 0x7Eu) - 34 < 4;
    }
    v57 = sub_22EFBBF74(v92[0], a1[11]);
    v52 = 0;
    v54 = 0;
    v7 = v57 != 0;
  }
  else
  {
    v52 = 0;
    if (v92[0] && (*(_DWORD *)(v92[0] + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
    {
      v52 = *(_BYTE *)(v92[0] + 82) & 1;
      v53 = *(_QWORD *)(v92[0] + 56);
      if ((v53 & 4) != 0 && *(_QWORD *)(v53 & 0xFFFFFFFFFFFFFFF8))
      {
        v51 = 0;
        v54 = (v50 & 0x220000) != 0 && (v50 & 0x1800000) != 0;
      }
      else
      {
        v51 = 0;
        v54 = 0;
      }
    }
    else
    {
      v51 = 0;
      v54 = 0;
    }
  }
  if (v42 || v41)
    goto LABEL_103;
  if (v52)
  {
    if (((v80 & v49 ^ 1 | v51) & 1) != 0)
      goto LABEL_103;
  }
  else if (v51)
  {
    goto LABEL_112;
  }
  if (((v54 | ((*(_BYTE *)(v92[0] + 31) & 8) >> 3)) & 1) == 0)
  {
    if ((v49 & v7) == 1)
    {
      sub_22E8FCA40(a1, *(_DWORD *)(v92[0] + 24), 0x1B1Eu, 0, (uint64_t)&v86);
      sub_22E890024((uint64_t)&v86, v92);
      sub_22E903BEC((unsigned int *)&v86);
      sub_22E8FCA40(a1, *(_DWORD *)(v9 + 24), 0x6Cu, 0, (uint64_t)v83);
      sub_22E903BEC(v83);
      sub_22EA40A3C(v92[0]);
      v62 = v92[0];
      v63 = a1[11];
      v64 = *(_QWORD *)(v32 + 16);
      v86 = 0uLL;
      v87 = v64;
      v88 = 0;
      v90 = 120;
      v89 = 0;
      v65 = sub_22F384564(v63, &v86);
      sub_22EFCA95C(v62, v65);
    }
    else
    {
      sub_22E8FCA40(a1, *(_DWORD *)(v92[0] + 24), 0x1B1Du, 0, (uint64_t)&v86);
      v59 = sub_22E890024((uint64_t)&v86, v92);
      sub_22E9AEE38(v59, &v91);
      sub_22E903BEC((unsigned int *)&v86);
      sub_22E8FCA40(a1, *(_DWORD *)(v9 + 24), 0x6Cu, 0, (uint64_t)v82);
      sub_22E903BEC(v82);
      sub_22E8FCA40(a1, *(_DWORD *)(v18 + 16), 0x176Fu, 0, (uint64_t)v81);
      sub_22E903BEC(v81);
      sub_22EA40A3C(v9);
      sub_22EA40A3C(v92[0]);
    }
    goto LABEL_112;
  }
LABEL_103:
  if (((v42 | v52 ^ 1 | v49) & 1) == 0)
  {
    sub_22EA40A3C(v9);
    sub_22EA40A3C(v92[0]);
    sub_22E8FCA40(a1, *(_DWORD *)(v92[0] + 24), 0x1978u, 0, (uint64_t)&v86);
    v58 = sub_22E890024((uint64_t)&v86, v92);
    sub_22E9AEE38(v58, &v91);
    sub_22E903BEC((unsigned int *)&v86);
  }
LABEL_112:
  if (!v92[0]
    || (*(_DWORD *)(v92[0] + 28) & 0x7Eu) - 58 < 0xFFFFFFFC
    || *(_QWORD *)(v92[0] + 144) < 8uLL
    || (*(_QWORD *)(v92[0] + 144) & 6) != 2
    || v32 | v39)
  {
    return;
  }
  v60 = *(_WORD *)(v92[0] + 80) & 0x7F;
  v61 = -40;
  if (v60 > 0x46)
  {
    if (v60 == 83)
      goto LABEL_136;
    if (v60 == 71)
    {
      v61 = -56;
      goto LABEL_136;
    }
    if (v60 != 81)
    {
LABEL_131:
      v66 = v60 - 52;
      v45 = v60 - 33 >= 5;
      v67 = -48;
      if (!v45)
        v67 = -64;
      if (v66 >= 6)
        v61 = v67;
      else
        v61 = -72;
    }
  }
  else
  {
    if (v60 > 0x18)
      goto LABEL_130;
    if (v60 == 16)
    {
LABEL_120:
      v61 = -48;
      goto LABEL_136;
    }
    if (((1 << v60) & 0x1066) == 0)
    {
      if (v60 == 24)
        goto LABEL_120;
LABEL_130:
      if (v60 == 70)
      {
        v61 = -64;
        goto LABEL_136;
      }
      goto LABEL_131;
    }
  }
LABEL_136:
  v68 = *(_QWORD *)(v92[0] + 72 + v61 + 16);
  v69 = (_QWORD *)(v68 & 0xFFFFFFFFFFFFFFF8);
  if ((v68 & 4) != 0)
    v69 = (_QWORD *)*v69;
  if (v69)
    v70 = (uint64_t)(v69 - 8);
  else
    v70 = 0;
  if ((*(_BYTE *)(v70 + 29) & 1) != 0)
  {
    sub_22EFC8E88(v70);
    v72 = *(uint64_t **)v71;
    v73 = *(unsigned int *)(v71 + 8);
    i = *(uint64_t **)v71;
    if ((_DWORD)v73)
    {
      v75 = 8 * v73;
      for (i = *(uint64_t **)v71; *(_WORD *)(*i + 32) != 155; ++i)
      {
        v75 -= 8;
        if (!v75)
          return;
      }
    }
    if (i != &v72[v73])
    {
      do
      {
        v77 = *v72++;
        v76 = v77;
      }
      while (*(_WORD *)(v77 + 32) != 155);
      sub_22F384608(v76, a1[11]);
      v79 = *(_WORD *)(v78 + 32);
      *(_BYTE *)(v78 + 34) |= 1u;
      *(_WORD *)(v78 + 32) = v79;
      sub_22EFCA95C(v92[0], v78);
    }
  }
}

uint64_t sub_22EA1FE28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v5;
  unsigned int v6;
  unsigned int v8;

  if (*(_DWORD *)a3 != 2
    || sub_22F1CF68C(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 32), 0x1948u, *(_DWORD *)(a3 + 128), *(_QWORD *)(a1 + 104)) == 1)
  {
    return 0;
  }
  result = **(_QWORD **)(a3 + 8) & 0xFFFFFFFFFFFFFFFCLL;
  v5 = *(_DWORD *)(result + 28);
  v6 = v5 & 0x7F;
  if (v6 <= 0x2F && ((1 << (v5 & 0x7F)) & 0xC00000060000) != 0)
  {
    result = sub_22EFBAEA4(result);
    v5 = *(_DWORD *)(result + 28);
    v6 = v5 & 0x7F;
  }
  v8 = v6 - 60;
  if ((v5 & 0x7C) != 0x30 && v8 >= 7)
    return 0;
  return result;
}

uint64_t sub_22EA1FEC4(char a1, uint64_t a2)
{
  int v2;
  int v4;
  _BOOL4 v6;
  unsigned int v7;

  v2 = a1 & 0x7F;
  switch(v2)
  {
    case '(':
      return 5;
    case ')':
      return 4;
    case '0':
      return 6;
  }
  v4 = *(_WORD *)(a2 + 8) & 0x7F;
  v6 = v4 == 83 || v4 == 16;
  if ((v2 - 49) >= 3)
    v7 = 2;
  else
    v7 = 3;
  if ((*(_WORD *)(a2 + 8) & 0x7Eu) - 34 <= 3)
    return v7;
  else
    return v6;
}

unsigned int *sub_22EA1FF30(unsigned int *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  unsigned int v28[24];
  uint64_t v29;
  unsigned int v30[24];
  _QWORD *v31;
  uint64_t v32[2];

  v2 = *(unsigned int *)(a2 + 1768);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = *(_QWORD **)(a2 + 1760);
    v6 = &v5[2 * v2];
    do
    {
      v7 = v5[1];
      v8 = *(unsigned int *)(a2 + 1272);
      if ((_DWORD)v8)
      {
        v9 = *(_QWORD *)(a2 + 1264);
        v10 = 32 * v8;
        while ((*(_BYTE *)(v9 + 24) & 8) != 0 || (*(_BYTE *)(v9 + 24) & 3) == 3 || *(_QWORD *)v9 != v7)
        {
          v9 += 32;
          v10 -= 32;
          if (!v10)
            goto LABEL_9;
        }
        v11 = *(unsigned int *)(v9 + 8);
      }
      else
      {
LABEL_9:
        v11 = 0;
      }
      v31 = 0;
      v12 = *(_QWORD *)(v7 + 16);
      v13 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
      if ((v12 & 4) != 0)
        v13 = (_QWORD *)*v13;
      v31 = v13;
      if (v11)
        v14 = 6472;
      else
        v14 = 6473;
      sub_22E8FCA40(v4, *(_DWORD *)(*v5 + 24), v14, 0, (uint64_t)v30);
      v29 = *(_QWORD *)(*v5 + 40);
      v15 = sub_22E894538((uint64_t)v30, &v29);
      v16 = sub_22EA1FEC4(*(_DWORD *)(v7 + 28), (uint64_t)v31);
      if (*(_BYTE *)(v15 + 80))
      {
        v17 = *(unsigned __int8 **)(v15 + 32);
        if (!v17)
        {
          v17 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(v15 + 40));
          *(_QWORD *)(v15 + 32) = v17;
        }
        v18 = v16;
        v17[*v17 + 1] = 2;
        v19 = *(_BYTE **)(v15 + 32);
      }
      else
      {
        if (!*(_BYTE *)(v15 + 92))
          goto LABEL_22;
        v22 = *(_QWORD *)v15;
        v23 = *(_QWORD *)(v15 + 16);
        if (v23)
          v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
        v32[0] = v23;
        v24 = sub_22F2F1D6C((uint64_t *)(v22 + 12784), v32)[1] + 32 * *(unsigned int *)(v15 + 88);
        v27 = *(unsigned __int8 **)(v24 + 8);
        v26 = (_QWORD *)(v24 + 8);
        v25 = v27;
        if (!v27)
        {
          v25 = (unsigned __int8 *)sub_22E3B8AAC(v26[1]);
          *v26 = v25;
        }
        v18 = v16;
        v25[*v25 + 1] = 2;
        v19 = (_BYTE *)*v26;
      }
      v20 = *v19;
      *v19 = v20 + 1;
      *(_QWORD *)&v19[8 * v20 + 16] = v18;
LABEL_22:
      sub_22E894FB4(v15, (uint64_t *)&v31);
      sub_22E903BEC(v30);
      if (v11)
      {
        sub_22E8FCA40(v4, v11, 0x1817u, 0, (uint64_t)v30);
        v32[0] = *(_QWORD *)(*v5 + 40);
        v21 = sub_22E894538((uint64_t)v30, v32);
        LODWORD(v29) = 0;
        sub_22E8900C4(v21, (int *)&v29);
        sub_22E903BEC(v30);
      }
      sub_22E8FCA40(v4, *(_DWORD *)(v7 + 24), 0x6Cu, 0, (uint64_t)v28);
      result = sub_22E903BEC(v28);
      v5 += 2;
    }
    while (v5 != v6);
  }
  return result;
}

uint64_t sub_22EA2018C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  _QWORD v9[22];

  v9[21] = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)(a3 + 24);
  result = sub_22F1CF68C(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 32), 0x1948u, v6, *(_QWORD *)(a1 + 104));
  if ((_DWORD)result != 1)
  {
    sub_22E8BAEE4((uint64_t)v9, a1, *(_QWORD *)(a3 + 40), v6, 0, 1);
    sub_22EC63520(a1, v9, a2, 0, 0);
    v8 = sub_22EA1DD0C(a1, a3, (uint64_t)v9);
    if (v8)
      sub_22EA1CDDC(a1, a3, v8, (uint64_t)v9);
    return sub_22E8BAFF0((uint64_t)v9);
  }
  return result;
}

int32x2_t sub_22EA20274(uint64_t a1, unsigned __int8 *a2, int a3)
{
  unsigned __int8 *v5;
  int32x2_t result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12[24];
  unsigned int v13[24];
  uint64_t v14;
  _QWORD *v15;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
  {
    if (*(_DWORD *)(a1 + 10160))
    {
      v5 = sub_22EFFA6B0(a2);
      if (*v5 == 161)
      {
        v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v5 + 2) + 32))(*((_QWORD *)v5 + 2));
        v15 = (_QWORD *)v14;
        *(_QWORD *)v13 = 0;
        if (sub_22E793870((uint64_t *)(a1 + 10152), &v15, v13))
        {
          v7 = *(_QWORD **)v13;
          if (*(_QWORD *)v13 != *(_QWORD *)(a1 + 10152) + 16 * *(unsigned int *)(a1 + 10168))
          {
            v8 = *(_QWORD *)(*(_QWORD *)v13 + 8);
            v9 = *(_QWORD *)(v8 + 16);
            v10 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
            if ((v9 & 4) != 0)
              v10 = (_QWORD *)*v10;
            v15 = v10;
            sub_22E8FCA40((_QWORD *)a1, a3, 0x1A63u, 0, (uint64_t)v13);
            v11 = sub_22E890024((uint64_t)v13, &v14);
            sub_22E894FB4(v11, (uint64_t *)&v15);
            sub_22E903BEC(v13);
            sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v14 + 24), 0x1816u, 0, (uint64_t)v13);
            sub_22E890024((uint64_t)v13, &v14);
            sub_22E903BEC(v13);
            sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v8 + 24), 0x6Cu, 0, (uint64_t)v12);
            sub_22E903BEC(v12);
            *v7 = -8192;
            result = vadd_s32(*(int32x2_t *)(a1 + 10160), (int32x2_t)0x1FFFFFFFFLL);
            *(int32x2_t *)(a1 + 10160) = result;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_22EA203D8(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  _BOOL4 v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  uint8x16_t v44;
  __int32 v45;
  int v46;
  _QWORD *v47;
  unsigned int v48;
  BOOL v49;
  char v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  BOOL v58;
  _BOOL4 v59;
  unint64_t *v60;
  uint64_t v61;
  char v62;
  int v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  const char *v69;
  char v70;
  int v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  unsigned int *v82;
  _BYTE *v83;
  _QWORD *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  int v108;
  int v109;
  _QWORD *v110;
  unsigned int v111;
  unsigned int *v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  int j;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  _QWORD *v125;
  unsigned int v126;
  unsigned int v127;
  int v128;
  uint64_t v129;
  _QWORD *v130;
  unint64_t v131;
  int v132;
  int v133;
  unsigned int *v134;
  _BYTE *v135;
  _QWORD *v136;
  unsigned int v137;
  uint64_t i;
  uint64_t *v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  BOOL v143;
  uint64_t v144;
  int v145;
  int v146;
  BOOL v147;
  char v148;
  uint64_t v149;
  _QWORD *v150;
  unint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v155;
  int v156;
  BOOL v157;
  BOOL v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int *v164;
  int v165;
  int v166;
  uint64_t v167;
  _QWORD *v168;
  unint64_t v169;
  int v170;
  uint64_t v171;
  unsigned int v172;
  char v173;
  int v174;
  _BOOL4 v175;
  uint64_t v176;
  _QWORD *v177;
  unint64_t v178;
  unint64_t v179;
  int v180;
  char v181;
  uint64_t v182;
  _QWORD *v183;
  unint64_t v184;
  int v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  const char *v190;
  void (***v191)(_QWORD, _QWORD *, _QWORD, unint64_t);
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  _BYTE v199[96];
  _BYTE v200[96];
  unsigned int v201[24];
  _BYTE v202[96];
  _BYTE v203[96];
  _BYTE v204[96];
  _BYTE v205[96];
  _BYTE v206[96];
  _BYTE v207[96];
  unsigned int v208[24];
  _BYTE v209[96];
  _BYTE v210[53];
  unint64_t v211;
  unsigned int v212[24];
  uint64_t v213[12];
  const char *v214;
  unsigned int v215;
  uint64_t v216;
  char v217;
  void *__p;
  uint64_t v219;
  uint64_t v220;
  char v221;
  BOOL v222;
  void (**v223)(_QWORD, _QWORD *, _QWORD, unint64_t);
  int v224;
  unint64_t v225;

  v2 = *(_DWORD *)(a2 + 28);
  if ((v2 & 0x80) != 0)
    return result;
  v4 = result;
  v5 = *(_QWORD *)(a2 + 48);
  v211 = v5;
  v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v223) = 0;
  result = sub_22F110500((uint64_t)&v223, v6);
  if (result)
  {
    if (*(_QWORD *)(result + 24) <= 0xFuLL && (*(_BYTE *)(result + 17) & 4) == 0)
      return result;
  }
  if ((v2 & 0x100) != 0)
  {
    sub_22EA49EE4((_QWORD *)v4, a2);
    v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
  }
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 33 <= 1)
  {
    sub_22E8FCA40((_QWORD *)v4, *(_DWORD *)(a2 + 24), 0x127Du, 0, (uint64_t)&v223);
    v61 = *(unsigned int *)(a2 + 24);
    v216 = 0;
    v217 = 0;
    v220 = 0x100000000000000;
    v219 = 0;
    v214 = (const char *)(v61 | (v61 << 32));
    LOBYTE(v215) = 0;
    __p = (void *)42;
    v221 = 0;
    sub_22E890748((uint64_t)&v223, &v214);
    if (SHIBYTE(v220) < 0)
      operator delete(__p);
    sub_22E903BEC((unsigned int *)&v223);
    v5 = sub_22F36CC4C(*(_QWORD *)(v4 + 88), v5);
    v211 = v5;
    *(_QWORD *)(a2 + 48) = v5;
  }
  v7 = *(_QWORD *)(v4 + 72);
  if ((*(_DWORD *)(v7 + 52) & 0x40000000) == 0 && (*(_BYTE *)(v7 + 104) & 0x20) == 0 && sub_22E3CB5E0(a2))
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v8 & 8) != 0 && (*(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0)
    {
LABEL_13:
      v9 = *(_DWORD *)(a2 + 24);
      v10 = (_QWORD *)v4;
      v11 = 2728;
      goto LABEL_14;
    }
  }
  v12 = v5 & 0xFFFFFFFFFFFFFFF0;
  v13 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v13 & 8) != 0 && (*(_BYTE *)((v13 & 0xFFFFFFFFFFFFFFF0) + 0x19) & 6) != 0)
  {
    sub_22E8FCA40((_QWORD *)v4, *(_DWORD *)(a2 + 24), 0xEFBu, 0, (uint64_t)v210);
    v14 = (unsigned int *)v210;
LABEL_224:
    sub_22E903BEC(v14);
    return sub_22EFC77E8(a2, 1);
  }
  v15 = *(_QWORD *)(v4 + 72);
  if (*(_DWORD *)(v15 + 56) == 120 && !sub_22F420564(v4 + 24, (uint64_t)"cl_clang_storage_class_specifiers", 33, v15))
  {
    v62 = *(_BYTE *)(a2 + 96);
    if ((v62 & 7) == 2 || (*(_BYTE *)(a2 + 96) & 7) == 0 && (v62 & 0x18) == 0x10)
    {
      v63 = *(_DWORD *)(a2 + 28) & 0x7F;
      if (v63 == 64 || v63 == 62)
        goto LABEL_101;
      v64 = *(_QWORD *)(a2 + 16);
      v65 = (_QWORD *)(v64 & 0xFFFFFFFFFFFFFFF8);
      v66 = v64 & 0xFFFFFFFFFFFFFFF8;
      if ((v64 & 4) != 0)
        v66 = v65[1];
      v67 = *(_WORD *)(sub_22EFCBB30(v66) + 8) & 0x7F;
      if (v67 != 16 && v67 != 83)
      {
        if ((v64 & 4) != 0)
          v65 = (_QWORD *)*v65;
        if (((_WORD)v65[1] & 0x7Eu) - 34 >= 4)
        {
LABEL_101:
          sub_22E8FCA40((_QWORD *)v4, *(_DWORD *)(a2 + 24), 0x1275u, 0, (uint64_t)v209);
          v14 = (unsigned int *)v209;
          goto LABEL_224;
        }
      }
    }
  }
  if ((*(_DWORD *)(*(_QWORD *)(v4 + 72) + 52) & 0x40000000) != 0)
  {
    v34 = *(_QWORD *)(a2 + 16);
    v35 = v34 & 0xFFFFFFFFFFFFFFF8;
    if ((v34 & 4) != 0)
      v35 = *(_QWORD *)v35;
    v225 = *(_QWORD *)(a2 + 48);
    v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v225 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v37 = *(_DWORD *)(v36 + 16);
    v38 = v37 & 0xFF800FF;
    v40 = (v37 & 0xFF800FF) == 0x108000B || v38 == 17825803;
    if (v36)
    {
      *(int8x8_t *)v41.i8 = vand_s8((int8x8_t)vdup_n_s32(v37), (int8x8_t)0xFF000FF0FC000FFLL);
      v41.i64[1] = __PAIR64__(v41.u32[1], v38);
      v42 = vdupq_laneq_s32(v41, 2);
      v41.i32[3] = v37 & 0xFF800FF;
      v43 = vdupq_n_s32(v38);
      v44 = (uint8x16_t)vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v41, (int32x4_t)xmmword_22F45AEC0), (int16x8_t)vceqq_s32(v42, (int32x4_t)xmmword_22F45AEB0)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v42, (int32x4_t)xmmword_22F45AED0), (int16x8_t)vceqq_s32(v42, (int32x4_t)xmmword_22F45AEE0)));
      v44.i8[0] = vmaxvq_u8(v44);
      v45 = v44.i32[0];
      *(int8x8_t *)v44.i8 = vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v43, (int32x4_t)xmmword_22F45AEF0), (int16x8_t)vceqq_s32(v43, (int32x4_t)xmmword_22F45AF00)));
      v44.i8[0] = vmaxv_u8(*(uint8x8_t *)v44.i8);
      if ((v45 | v44.i32[0]) & 1 | ((v37 & 0xFF800FF) == 16777227 || v40))
        goto LABEL_59;
    }
    v49 = v38 != 18350091 || v36 == 0;
    if (!v49 || *(_DWORD *)(v36 + 16) == 38)
    {
LABEL_59:
      v46 = *(_DWORD *)(a2 + 24);
      v47 = (_QWORD *)v4;
      v48 = 4424;
LABEL_84:
      sub_22E8FCA40(v47, v46, v48, 0, (uint64_t)&v223);
      v60 = &v225;
LABEL_222:
      sub_22E8901B8((uint64_t)&v223, (uint64_t *)v60);
      goto LABEL_223;
    }
    if (!sub_22E3CB5E0(a2))
    {
      v50 = *(_BYTE *)(a2 + 96);
      if ((v50 & 7) != 2 && ((*(_BYTE *)(a2 + 96) & 7) != 0 || (v50 & 0x18) != 0x10))
        goto LABEL_75;
      v51 = *(_DWORD *)(a2 + 28) & 0x7F;
      if (v51 != 64 && v51 != 62)
      {
        v52 = *(_QWORD *)(a2 + 16);
        v53 = (_QWORD *)(v52 & 0xFFFFFFFFFFFFFFF8);
        v54 = v52 & 0xFFFFFFFFFFFFFFF8;
        if ((v52 & 4) != 0)
          v54 = v53[1];
        v55 = *(_WORD *)(sub_22EFCBB30(v54) + 8) & 0x7F;
        if (v55 == 16 || v55 == 83)
          goto LABEL_75;
        if ((v52 & 4) != 0)
          v53 = (_QWORD *)*v53;
        if (((_WORD)v53[1] & 0x7Eu) - 34 <= 3)
        {
LABEL_75:
          v56 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v225 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          v57 = *(_DWORD *)(v56 + 16);
          v58 = (v57 & 0xFE800FF) == 0x700000B || (v57 & 0xFF800FF) == 116916235;
          v59 = v58;
          if (v56 && v59)
          {
            v46 = *(_DWORD *)(a2 + 24);
            v47 = (_QWORD *)v4;
            v48 = 3687;
            goto LABEL_84;
          }
        }
      }
    }
    if (!sub_22F420564(v4 + 24, (uint64_t)"__cl_clang_function_pointers", 28, *(_QWORD *)(v4 + 72)))
    {
      for (i = *(_QWORD *)((v225 & 0xFFFFFFFFFFFFFFF0) + 8); ; i = sub_22F10ACF8(*v139))
      {
        v139 = (uint64_t *)(i & 0xFFFFFFFFFFFFFFF0);
        v140 = *(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0);
        v141 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v140 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v141 == 39)
          goto LABEL_263;
        if (*(_BYTE *)(v140 + 16) == 31)
          break;
        if (v141 == 31)
        {
          v140 = sub_22F10CF48(v140);
          if (v140)
            break;
          v140 = *v139;
        }
LABEL_262:
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v140 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
          goto LABEL_314;
LABEL_263:
        if ((v140 && *(_BYTE *)(v140 + 16) == 39
           || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v140 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
           && (v140 = sub_22F10CF48(v140)) != 0)
          && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v140 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                                              + 16)
           - 25 < 2)
        {
          goto LABEL_295;
        }
        v142 = *v139;
        v143 = *v139 && *(_BYTE *)(*v139 + 16) == 31;
        if ((v143
           || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v142 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
           && (v142 = sub_22F10CF48(v142)) != 0)
          && sub_22F28C8B4(v142))
        {
          goto LABEL_295;
        }
        v144 = *v139;
        if (!*v139 || (v145 = *(_DWORD *)(v144 + 16), (v145 & 0xFE) != 0x28))
        {
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v144 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
            continue;
          v144 = sub_22F10CF48(v144);
          if (!v144)
            continue;
          v145 = *(_DWORD *)(v144 + 16);
        }
        if ((v145 & 0x100000) != 0)
        {
          do
          {
            v144 = *(_QWORD *)(*(_QWORD *)(v144 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (v144)
            {
              v146 = *(_DWORD *)(v144 + 16);
              if ((v146 & 0xFE) == 0x28)
                continue;
            }
            v144 = sub_22F10CF48(v144);
            v146 = *(_DWORD *)(v144 + 16);
          }
          while ((v146 & 0x100000) != 0);
        }
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v144 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                                              + 16)
           - 25 <= 1)
        {
LABEL_295:
          sub_22E8FCA40((_QWORD *)v4, *(_DWORD *)(a2 + 24), 0x112Fu, 0, (uint64_t)&v223);
          v222 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v139 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 40;
          sub_22E894E38((uint64_t)&v223, (unsigned __int8 *)&v222);
          goto LABEL_223;
        }
      }
      v147 = sub_22F28C8B4(v140);
      v140 = *v139;
      if (v147)
        goto LABEL_263;
      goto LABEL_262;
    }
LABEL_314:
    result = sub_22F420564(v4 + 24, (uint64_t)"cl_khr_fp16", 11, *(_QWORD *)(v4 + 72));
    if ((result & 1) == 0)
    {
      result = sub_22EF5BA38(*(_QWORD *)(v4 + 88), v225);
      v153 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v153 && (*(_DWORD *)(v153 + 16) & 0xFF800FF) == 110100491)
      {
        v46 = *(_DWORD *)(a2 + 24);
        v47 = (_QWORD *)v4;
        v48 = 4402;
        goto LABEL_84;
      }
    }
    v155 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v225 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v156 = *(_DWORD *)(v155 + 16) & 0xFF800FF;
    if (v155)
      v157 = v156 == 116916235;
    else
      v157 = 0;
    if (v157)
    {
      v162 = *(_QWORD *)((v225 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v162 & 8) == 0 || (*(_QWORD *)((v162 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0x2000)
      {
        v163 = *(_QWORD *)(a2 + 56);
        if ((v163 & 4) != 0 && (v192 = v163 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v192 + 16)))
          v164 = **(int ***)(v192 + 24);
        else
          v164 = (int *)(a2 + 64);
        sub_22E8FCA40((_QWORD *)v4, *v164, 0xCE4u, 0, (uint64_t)&v214);
        v14 = (unsigned int *)&v214;
        goto LABEL_224;
      }
      goto LABEL_352;
    }
    if (v155)
      v158 = v156 == 116391947;
    else
      v158 = 0;
    if (!v158)
      goto LABEL_352;
    v159 = *(_QWORD *)((v225 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v159 & 8) != 0)
    {
      v160 = *(_DWORD *)((v159 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800;
      if (v160 == 4096 || v160 == 2048)
      {
        sub_22E8FCA40((_QWORD *)v4, *(_DWORD *)(a2 + 24), 0x1424u, 0, (uint64_t)v213);
        sub_22E903BEC((unsigned int *)v213);
        result = sub_22EFC77E8(a2, 1);
      }
    }
    if ((*(_WORD *)(v35 + 8) & 0x7F) == 0x53)
    {
      v161 = *(_QWORD *)((v225 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v161 & 8) != 0)
      {
        if ((v225 & 1) != 0 || (*(_QWORD *)((v161 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x1800)
          goto LABEL_351;
      }
      else if ((v225 & 1) != 0)
      {
        goto LABEL_351;
      }
      if ((v161 & 1) == 0)
      {
        sub_22E8FCA40((_QWORD *)v4, *(_DWORD *)(a2 + 24), 0x113Fu, 0, (uint64_t)v212);
        sub_22E903BEC(v212);
        result = sub_22EFC77E8(a2, 1);
      }
    }
LABEL_351:
    if ((*(_BYTE *)(a2 + 28) & 0x80) != 0)
      return result;
LABEL_352:
    if (sub_22E49C868(a2))
    {
      sub_22E8FCA40((_QWORD *)v4, *(_DWORD *)(a2 + 24), 0x111Eu, 0, (uint64_t)v208);
      return (uint64_t)sub_22E903BEC(v208);
    }
    v197 = *(_QWORD *)v12;
    v198 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v198 == 10)
    {
      if ((v5 & 1) == 0 && (*(_BYTE *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) == 0)
      {
        v9 = *(_DWORD *)(a2 + 24);
        v10 = (_QWORD *)v4;
        v11 = 4407;
LABEL_14:
        sub_22E8FCA40(v10, v9, v11, 0, (uint64_t)&v223);
        LODWORD(v214) = 0;
LABEL_15:
        sub_22E8900C4((uint64_t)&v223, (int *)&v214);
        goto LABEL_223;
      }
      if ((*(_BYTE *)(a2 + 96) & 5) == 1)
      {
        sub_22E8FCA40((_QWORD *)v4, *(_DWORD *)(a2 + 24), 0x112Eu, 0, (uint64_t)v207);
        v14 = (unsigned int *)v207;
        goto LABEL_224;
      }
    }
    v165 = *(_DWORD *)(a2 + 28) & 0x7F;
    if (v165 != 64 && v165 != 62)
    {
      v166 = *(_DWORD *)(a2 + 28) & 0x7F;
      v167 = *(_QWORD *)(a2 + 16);
      v168 = (_QWORD *)(v167 & 0xFFFFFFFFFFFFFFF8);
      v169 = v167 & 0xFFFFFFFFFFFFFFF8;
      if ((v167 & 4) != 0)
        v169 = v168[1];
      v170 = *(_WORD *)(sub_22EFCBB30(v169) + 8) & 0x7F;
      if (v170 == 16 || v170 == 83)
        goto LABEL_365;
      v165 = v166;
      if (v166 != 64)
      {
        if ((v167 & 4) != 0)
          v168 = (_QWORD *)*v168;
        v165 = v166;
        if (((_WORD)v168[1] & 0x7Eu) - 34 < 4)
          goto LABEL_365;
      }
    }
    v181 = *(_BYTE *)(a2 + 96);
    if ((v181 & 7) == 2 || (*(_BYTE *)(a2 + 96) & 7) == 0 && (v181 & 0x18) == 0x10)
    {
      if (v165 == 64 || v165 == 62)
        goto LABEL_365;
      v182 = *(_QWORD *)(a2 + 16);
      v183 = (_QWORD *)(v182 & 0xFFFFFFFFFFFFFFF8);
      v184 = v182 & 0xFFFFFFFFFFFFFFF8;
      if ((v182 & 4) != 0)
        v184 = v183[1];
      v185 = *(_WORD *)(sub_22EFCBB30(v184) + 8) & 0x7F;
      if (v185 != 16 && v185 != 83)
      {
        if ((v182 & 4) != 0)
          v183 = (_QWORD *)*v183;
        if ((v181 & 5) == 1 || ((_WORD)v183[1] & 0x7Eu) - 38 < 0xFFFFFFFC)
          goto LABEL_365;
LABEL_397:
        v186 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v186 & 8) == 0)
          goto LABEL_21;
        switch(*(_QWORD *)((v186 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11)
        {
          case 0u:
          case 4u:
            goto LABEL_21;
          case 1u:
            sub_22E8FCA40((_QWORD *)v4, *(_DWORD *)(a2 + 24), 0x1130u, 0, (uint64_t)&v223);
            LODWORD(v214) = 1;
            v194 = sub_22E8900C4((uint64_t)&v223, (int *)&v214);
            sub_22F2F30F4(v194, (uint64_t)"global");
            goto LABEL_223;
          case 2u:
          case 3u:
            v187 = sub_22E903070(v4, 0);
            if (!v187 || (*(_WORD *)(v187 + 8) & 0x7Eu) - 58 < 0xFFFFFFFA)
              goto LABEL_21;
            v188 = v187 - 72;
            if (sub_22E47290C(v187 - 72))
            {
              if (!sub_22E47290C(v188) || (*(_BYTE *)(*(_QWORD *)(v4 + 12888) + 8) & 1) != 0)
                goto LABEL_21;
              v189 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8);
              if ((v189 & 8) != 0 && (*(_QWORD *)((v189 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x1800)
              {
                sub_22E8FCA40((_QWORD *)v4, *(_DWORD *)(a2 + 24), 0x111Au, 0, (uint64_t)&v223);
                v190 = "constant";
                v191 = &v223;
              }
              else
              {
                sub_22E8FCA40((_QWORD *)v4, *(_DWORD *)(a2 + 24), 0x111Au, 0, (uint64_t)&v223);
                v190 = "local";
                v191 = &v223;
              }
            }
            else
            {
              v195 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8);
              if ((v195 & 8) != 0 && (*(_QWORD *)((v195 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x1800)
              {
                sub_22E8FCA40((_QWORD *)v4, *(_DWORD *)(a2 + 24), 0x1130u, 0, (uint64_t)&v223);
                LODWORD(v214) = 0;
                v191 = (void (***)(_QWORD, _QWORD *, _QWORD, unint64_t))sub_22E8900C4((uint64_t)&v223, (int *)&v214);
                goto LABEL_413;
              }
              sub_22E8FCA40((_QWORD *)v4, *(_DWORD *)(a2 + 24), 0x1130u, 0, (uint64_t)&v223);
              LODWORD(v214) = 0;
              v191 = (void (***)(_QWORD, _QWORD *, _QWORD, unint64_t))sub_22E8900C4((uint64_t)&v223, (int *)&v214);
              v190 = "local";
            }
            break;
          default:
            sub_22E8FCA40((_QWORD *)v4, *(_DWORD *)(a2 + 24), 0xAA8u, 0, (uint64_t)&v223);
            LODWORD(v214) = 1;
            goto LABEL_15;
        }
        goto LABEL_414;
      }
    }
    if ((v181 & 5) != 1)
      goto LABEL_397;
LABEL_365:
    if ((v198 & 0xFF800FF) == 0x6F0000B)
      goto LABEL_21;
    if ((*(_BYTE *)(v197 + 17) & 4) != 0)
      goto LABEL_21;
    v171 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v171 & 8) != 0)
    {
      v172 = *(_DWORD *)((v171 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800;
      if (v172 == 6144 || v172 == 2048 && sub_22F31DB68(v4 + 24, *(_QWORD *)(v4 + 72)))
        goto LABEL_21;
    }
    v173 = *(_BYTE *)(a2 + 96);
    if ((v173 & 7) == 2 || (*(_BYTE *)(a2 + 96) & 7) == 0 && (v173 & 0x18) == 0x10)
    {
      v174 = *(_DWORD *)(a2 + 28) & 0x7F;
      v175 = 1;
      if (v174 != 64 && v174 != 62)
      {
        v176 = *(_QWORD *)(a2 + 16);
        v177 = (_QWORD *)(v176 & 0xFFFFFFFFFFFFFFF8);
        v178 = v176 & 0xFFFFFFFFFFFFFFF8;
        if ((v176 & 4) != 0)
          v178 = v177[1];
        v179 = sub_22EFCBB30(v178);
        v175 = 0;
        v180 = *(_WORD *)(v179 + 8) & 0x7F;
        if (v180 != 16 && v180 != 83)
        {
          if ((v176 & 4) != 0)
            v177 = (_QWORD *)*v177;
          v175 = ((_WORD)v177[1] & 0x7Eu) - 38 < 0xFFFFFFFC;
        }
      }
    }
    else
    {
      v175 = 0;
    }
    LODWORD(v214) = v175 | (2 * ((v173 & 5) == 1));
    if (sub_22F31DB68(v4 + 24, *(_QWORD *)(v4 + 72)))
    {
      sub_22E8FCA40((_QWORD *)v4, *(_DWORD *)(a2 + 24), 0x1131u, 0, (uint64_t)&v223);
      v193 = sub_22E8900C4((uint64_t)&v223, (int *)&v214);
      sub_22F2F30F4(v193, (uint64_t)"global or constant");
LABEL_223:
      v14 = (unsigned int *)&v223;
      goto LABEL_224;
    }
    sub_22E8FCA40((_QWORD *)v4, *(_DWORD *)(a2 + 24), 0x1131u, 0, (uint64_t)&v223);
    v191 = (void (***)(_QWORD, _QWORD *, _QWORD, unint64_t))sub_22E8900C4((uint64_t)&v223, (int *)&v214);
LABEL_413:
    v190 = "constant";
LABEL_414:
    sub_22F2F30F4((uint64_t)v191, (uint64_t)v190);
    goto LABEL_223;
  }
LABEL_21:
  v16 = *(_QWORD *)(v4 + 72);
  if ((*(_BYTE *)(v16 + 104) & 0x20) == 0)
    goto LABEL_125;
  v17 = *(_DWORD *)(a2 + 28);
  v18 = v17 & 0x7F;
  if (v18 != 64 && v18 != 62)
  {
    v19 = *(_QWORD *)(a2 + 16);
    v20 = (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF8);
    v21 = v19 & 0xFFFFFFFFFFFFFFF8;
    if ((v19 & 4) != 0)
      v21 = v20[1];
    v22 = *(_WORD *)(sub_22EFCBB30(v21) + 8) & 0x7F;
    if (v22 == 16 || v22 == 83)
      goto LABEL_28;
    if (v18 != 64)
    {
      if ((v19 & 4) != 0)
        v20 = (_QWORD *)*v20;
      if (((_WORD)v20[1] & 0x7Eu) - 34 <= 3)
      {
LABEL_28:
        v23 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v23 & 8) == 0 || (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0x6800)
        {
          if ((v17 & 0x100) != 0 && (*(_QWORD *)(v16 + 124) & 0x400) != 0)
          {
            sub_22EFC8E88(a2);
            if (!sub_22F271604(*(uint64_t **)v196, (uint64_t *)(*(_QWORD *)v196 + 8 * *(unsigned int *)(v196 + 8))))
              goto LABEL_112;
            if ((*(_QWORD *)(*(_QWORD *)(v4 + 72) + 132) & 4) == 0)
              goto LABEL_34;
          }
          else if ((*(_QWORD *)(v16 + 132) & 4) == 0)
          {
            goto LABEL_34;
          }
          v24 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8);
          if ((v24 & 8) != 0 && (*(_DWORD *)((v24 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0)
          {
LABEL_34:
            if (!sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0)|| (v25 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8), (v25 & 8) != 0)&& (*(_DWORD *)((v25 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0)
            {
              v26 = *(_BYTE *)(a2 + 96);
              if ((v26 & 7) == 2 || (*(_BYTE *)(a2 + 96) & 7) == 0 && (v26 & 0x18) == 0x10)
              {
                v27 = *(_DWORD *)(a2 + 28) & 0x7F;
                v28 = 1;
                if (v27 != 64 && v27 != 62)
                {
                  v29 = *(_QWORD *)(a2 + 16);
                  v30 = (_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF8);
                  v31 = v29 & 0xFFFFFFFFFFFFFFF8;
                  if ((v29 & 4) != 0)
                    v31 = v30[1];
                  v32 = sub_22EFCBB30(v31);
                  v28 = 0;
                  v33 = *(_WORD *)(v32 + 8) & 0x7F;
                  if (v33 != 16 && v33 != 83)
                  {
                    if ((v29 & 4) != 0)
                      v30 = (_QWORD *)*v30;
                    v28 = ((_WORD)v30[1] & 0x7Eu) - 38 < 0xFFFFFFFC;
                  }
                }
              }
              else
              {
                v28 = 0;
              }
              LODWORD(v213[0]) = v28 | (2 * ((v26 & 5) == 1));
              sub_22E8FCA40((_QWORD *)v4, *(_DWORD *)(a2 + 24), 0x1131u, 0, (uint64_t)&v223);
              v68 = sub_22E8900C4((uint64_t)&v223, (int *)v213);
              if ((*(_QWORD *)(*(_QWORD *)(v4 + 72) + 132) & 4) != 0)
                v69 = "constant or thread";
              else
                v69 = "constant";
              v214 = v69;
              sub_22E8AECC4(v68, (uint64_t *)&v214);
              goto LABEL_223;
            }
          }
        }
      }
    }
  }
LABEL_112:
  v70 = *(_BYTE *)(a2 + 96);
  if ((v70 & 7) == 2 || (*(_BYTE *)(a2 + 96) & 7) == 0 && (v70 & 0x18) == 0x10)
  {
    v71 = *(_DWORD *)(a2 + 28) & 0x7F;
    if (v71 == 64 || v71 == 62)
      goto LABEL_252;
    v72 = *(_QWORD *)(a2 + 16);
    v73 = (_QWORD *)(v72 & 0xFFFFFFFFFFFFFFF8);
    v74 = v72 & 0xFFFFFFFFFFFFFFF8;
    if ((v72 & 4) != 0)
      v74 = v73[1];
    v75 = *(_WORD *)(sub_22EFCBB30(v74) + 8) & 0x7F;
    if (v75 != 16 && v75 != 83)
    {
      if ((v72 & 4) != 0)
        v73 = (_QWORD *)*v73;
      if (((_WORD)v73[1] & 0x7Eu) - 34 >= 4)
      {
LABEL_252:
        sub_22E8FCA40((_QWORD *)v4, *(_DWORD *)(a2 + 24), 0x1275u, 0, (uint64_t)v206);
        v14 = (unsigned int *)v206;
        goto LABEL_224;
      }
    }
  }
  v76 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (v76 == 64 || v76 == 62)
    goto LABEL_137;
  v77 = *(_QWORD *)(a2 + 16);
  v78 = (_QWORD *)(v77 & 0xFFFFFFFFFFFFFFF8);
  v79 = v77 & 0xFFFFFFFFFFFFFFF8;
  if ((v77 & 4) != 0)
    v79 = v78[1];
  v80 = *(_WORD *)(sub_22EFCBB30(v79) + 8) & 0x7F;
  if (v80 != 16 && v80 != 83)
  {
    if ((v77 & 4) != 0)
      v78 = (_QWORD *)*v78;
    if (((_WORD)v78[1] & 0x7Eu) - 34 >= 4)
    {
LABEL_137:
      v86 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v86 & 8) != 0)
      {
        v87 = *(_DWORD *)((v86 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800;
        if (v87)
        {
          if (v87 != 24576)
            goto LABEL_13;
        }
      }
    }
  }
LABEL_125:
  if (sub_22E3CB5E0(a2))
  {
    v81 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v81 & 8) != 0 && (*(_QWORD *)((v81 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x30) == 0x10 && !sub_22E49C868(a2))
    {
      if ((*(_BYTE *)(*(_QWORD *)(v4 + 72) + 246) & 6) != 0)
      {
        v82 = (unsigned int *)v205;
        v83 = v205;
        v84 = (_QWORD *)v4;
        v85 = 6611;
      }
      else
      {
        v82 = (unsigned int *)v204;
        v83 = v204;
        v84 = (_QWORD *)v4;
        v85 = 6288;
      }
      sub_22E8FCA40(v84, *(_DWORD *)(a2 + 24), v85, 0, (uint64_t)v83);
      sub_22E903BEC(v82);
    }
  }
  v88 = *(_DWORD *)(*(_QWORD *)v12 + 16);
  if ((v88 & 0x800) != 0)
  {
    v91 = *(unsigned int *)(v4 + 1904);
    if ((_DWORD)v91)
    {
      v92 = *(_QWORD *)(*(_QWORD *)(v4 + 1896) + 8 * v91 - 8);
      *(_DWORD *)(v92 + 8) |= 8u;
    }
    v93 = sub_22EFB948C(a2);
    if (v93 != 3 && v93)
      goto LABEL_152;
  }
  else if (sub_22E8D12CC(a2) || sub_22E49C868(a2))
  {
    v89 = *(unsigned int *)(v4 + 1904);
    if ((_DWORD)v89)
    {
      v90 = *(_QWORD *)(*(_QWORD *)(v4 + 1896) + 8 * v89 - 8);
      *(_DWORD *)(v90 + 8) |= 8u;
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 5
    || sub_22E3CB5E0(a2))
  {
    goto LABEL_181;
  }
LABEL_152:
  LOBYTE(v212[0]) = 0;
  v215 = 1;
  v214 = 0;
  LOBYTE(v216) = 0;
  v94 = *(_QWORD *)(a2 + 56);
  v95 = (uint64_t *)(v94 & 0xFFFFFFFFFFFFFFF8);
  if ((v94 & 4) != 0)
    v95 = (uint64_t *)v95[4];
  v96 = sub_22EA1C03C(v95, *(_QWORD *)(v4 + 88), v212, (unsigned int *)&v214);
  v97 = v96;
  if (!v96)
  {
    v100 = 0;
LABEL_162:
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 5)
    {
      v101 = sub_22EF5C728(*(_QWORD *)(v4 + 88), v5);
      if (*(_BYTE *)(v101 + 16) == 5)
        v102 = v101;
      else
        v102 = 0;
      sub_22F0D4E74(*(_QWORD *)(v102 + 40));
      v213[0] = v103;
      v104 = *(_DWORD *)(a2 + 28) & 0x7F;
      if (v104 == 64 || v104 == 62)
        goto LABEL_300;
      v105 = *(_QWORD *)(a2 + 16);
      v106 = (_QWORD *)(v105 & 0xFFFFFFFFFFFFFFF8);
      v107 = v105 & 0xFFFFFFFFFFFFFFF8;
      if ((v105 & 4) != 0)
        v107 = v106[1];
      v108 = *(_WORD *)(sub_22EFCBB30(v107) + 8) & 0x7F;
      if (v108 == 16 || v108 == 83)
        goto LABEL_171;
      if ((v105 & 4) != 0)
        v106 = (_QWORD *)*v106;
      if (((_WORD)v106[1] & 0x7Eu) - 34 <= 3)
      {
LABEL_171:
        v109 = *(_DWORD *)(a2 + 24);
        v110 = (_QWORD *)v4;
        v111 = 5146;
      }
      else
      {
LABEL_300:
        v148 = *(_BYTE *)(a2 + 96);
        if ((v148 & 7) != 2 && ((*(_BYTE *)(a2 + 96) & 7) != 0 || (v148 & 0x18) != 0x10))
          goto LABEL_308;
        if (v104 == 64 || v104 == 62)
          goto LABEL_346;
        v149 = *(_QWORD *)(a2 + 16);
        v150 = (_QWORD *)(v149 & 0xFFFFFFFFFFFFFFF8);
        v151 = v149 & 0xFFFFFFFFFFFFFFF8;
        if ((v149 & 4) != 0)
          v151 = v150[1];
        v152 = *(_WORD *)(sub_22EFCBB30(v151) + 8) & 0x7F;
        if (v152 == 16 || v152 == 83)
          goto LABEL_308;
        if ((v149 & 4) != 0)
          v150 = (_QWORD *)*v150;
        if (((_WORD)v150[1] & 0x7Eu) - 34 >= 4)
        {
LABEL_346:
          v109 = *(_DWORD *)(a2 + 24);
          v110 = (_QWORD *)v4;
          v111 = 5145;
        }
        else
        {
LABEL_308:
          v109 = *(_DWORD *)(a2 + 24);
          v110 = (_QWORD *)v4;
          v111 = 5144;
        }
      }
      sub_22E8FCA40(v110, v109, v111, 0, (uint64_t)&v223);
      sub_22E8906A0((uint64_t)&v223, v213);
      v112 = (unsigned int *)&v223;
LABEL_245:
      sub_22E903BEC(v112);
      result = sub_22EFC77E8(a2, 1);
      if (v215 >= 0x41)
      {
        result = (uint64_t)v214;
        if (v214)
          return MEMORY[0x2348A0E84](v214, 0x1000C8000313F17);
      }
      return result;
    }
    if (!v97)
    {
      v128 = *(_DWORD *)(a2 + 28) & 0x7F;
      if (v128 == 64 || v128 == 62)
        goto LABEL_313;
      v129 = *(_QWORD *)(a2 + 16);
      v130 = (_QWORD *)(v129 & 0xFFFFFFFFFFFFFFF8);
      v131 = v129 & 0xFFFFFFFFFFFFFFF8;
      if ((v129 & 4) != 0)
        v131 = v130[1];
      v132 = *(_WORD *)(sub_22EFCBB30(v131) + 8) & 0x7F;
      if (v132 == 16 || v132 == 83)
        goto LABEL_243;
      if ((v129 & 4) != 0)
        v130 = (_QWORD *)*v130;
      if (((_WORD)v130[1] & 0x7Eu) - 34 <= 3)
      {
LABEL_243:
        v133 = *(_DWORD *)(a2 + 24);
        v134 = (unsigned int *)v203;
        v135 = v203;
        v136 = (_QWORD *)v4;
        v137 = 5150;
      }
      else
      {
LABEL_313:
        v133 = *(_DWORD *)(a2 + 24);
        v134 = (unsigned int *)v202;
        v135 = v202;
        v136 = (_QWORD *)v4;
        v137 = 5149;
      }
      sub_22E8FCA40(v136, v133, v137, 0, (uint64_t)v135);
      v112 = v134;
      goto LABEL_245;
    }
    goto LABEL_174;
  }
  v98 = *(_QWORD *)(a2 + 56);
  v99 = (_QWORD *)(v98 & 0xFFFFFFFFFFFFFFF8);
  if ((v98 & 4) != 0)
    v99 = (_QWORD *)v99[4];
  if (v5 == *v99)
    v100 = *v96;
  else
    v100 = sub_22EA21D3C(v5, *(_QWORD *)(v4 + 88), v212, (unsigned int *)&v214);
  if (v100 <= 0xF)
    goto LABEL_162;
LABEL_174:
  sub_22E8FCA40((_QWORD *)v4, *(_DWORD *)(a2 + 24), 0x151Cu, 0, (uint64_t)v201);
  sub_22E903BEC(v201);
  *(_QWORD *)(a2 + 48) = v100;
  v113 = *(_QWORD *)(a2 + 56);
  if ((v113 & 4) != 0)
    *(_QWORD *)((v113 & 0xFFFFFFFFFFFFFFF8) + 32) = v97;
  else
    *(_QWORD *)(a2 + 56) = (unint64_t)v97 & 0xFFFFFFFFFFFFFFFBLL;
  if (v215 >= 0x41 && v214)
    MEMORY[0x2348A0E84](v214, 0x1000C8000313F17);
  v12 = v211 & 0xFFFFFFFFFFFFFFF0;
LABEL_181:
  v114 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v114)
    v115 = (*(_DWORD *)(v114 + 16) & 0xFF800FF) == 86507531;
  else
    v115 = 0;
  if (!v115)
    goto LABEL_185;
  v116 = a2;
  if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
  {
    v117 = *(_QWORD *)(a2 + 16);
    v118 = v117 & 0xFFFFFFFFFFFFFFF8;
    if ((v117 & 4) != 0)
      v118 = *(_QWORD *)v118;
    for (j = *(_WORD *)(v118 + 8) & 0x7F; j != 83; j = *(_WORD *)(v118 + 8) & 0x7F)
    {
      v120 = -40;
      if (j > 70)
      {
        if (j == 71)
        {
          v120 = -56;
        }
        else if (j != 81)
        {
          goto LABEL_202;
        }
      }
      else
      {
        if (j > 0x18)
          goto LABEL_201;
        if (j == 16)
          goto LABEL_195;
        if (((1 << j) & 0x1066) != 0)
          goto LABEL_208;
        if (j == 24)
        {
LABEL_195:
          v120 = -48;
        }
        else
        {
LABEL_201:
          if (j != 70)
          {
LABEL_202:
            v121 = j - 52;
            if ((j - 33) >= 5)
              v122 = -48;
            else
              v122 = -64;
            if (v121 >= 6)
              v120 = v122;
            else
              v120 = -72;
            goto LABEL_208;
          }
          v120 = -64;
        }
      }
LABEL_208:
      v123 = *(_QWORD *)(v118 + v120 + 16);
      v118 = v123 & 0xFFFFFFFFFFFFFFF8;
      if ((v123 & 4) != 0)
        v118 = *(_QWORD *)v118;
    }
    v116 = v118 - 40;
  }
  if (sub_22EFBBF74(a2, *(_QWORD *)(v116 + 88)) || (*(_BYTE *)(*(_QWORD *)(v4 + 72) + 1) & 1) != 0)
  {
    v124 = *(_DWORD *)(a2 + 24);
    v125 = (_QWORD *)v4;
    v126 = 4962;
LABEL_221:
    sub_22E8FCA40(v125, v124, v126, 0, (uint64_t)&v223);
    v60 = &v211;
    goto LABEL_222;
  }
LABEL_185:
  if (!sub_22E3CB5E0(a2) && sub_22E49C868(a2))
  {
    sub_22E8FCA40((_QWORD *)v4, *(_DWORD *)(a2 + 24), 0xB8Au, 0, (uint64_t)v200);
    v14 = (unsigned int *)v200;
    goto LABEL_224;
  }
  result = sub_22E3CB5E0(a2);
  if ((result & 1) == 0)
  {
    result = sub_22F111384(*(_QWORD *)(v211 & 0xFFFFFFFFFFFFFFF0));
    if ((_DWORD)result)
    {
      v124 = *(_DWORD *)(a2 + 24);
      v125 = (_QWORD *)v4;
      v126 = 4704;
      goto LABEL_221;
    }
  }
  if ((v88 & 0x800) != 0)
  {
    result = sub_22E49C868(a2);
    if ((_DWORD)result)
    {
      sub_22E8FCA40((_QWORD *)v4, *(_DWORD *)(a2 + 24), 0xB8Bu, 0, (uint64_t)v199);
      v14 = (unsigned int *)v199;
      goto LABEL_224;
    }
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x40
    && (*(_BYTE *)(a2 + 97) & 0x80) != 0
    && (*(_BYTE *)(*(_QWORD *)(v211 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
  {
    v127 = *(_DWORD *)(a2 + 24);
    v223 = (void (**)(_QWORD, _QWORD *, _QWORD, unint64_t))&unk_24FAB6EF8;
    v224 = 3087;
    result = sub_22EE8BC8C((_QWORD *)v4, v127, v211, &v223);
    if ((_DWORD)result)
      return sub_22EFC77E8(a2, 1);
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 15088) + 56) - 23) <= 1)
  {
    result = sub_22E3CEC2C(a2);
    if ((result & 1) == 0)
    {
      result = sub_22E97DED0((_QWORD *)v4, v211, *(_DWORD *)(a2 + 24));
      if ((_DWORD)result)
        return sub_22EFC77E8(a2, 1);
    }
  }
  return result;
}

unint64_t sub_22EA21D3C(uint64_t a1, uint64_t a2, _BYTE *a3, unsigned int *a4)
{
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  char v33;
  unsigned int v34[3];
  char v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  v8 = a4[2];
  if (v8 > 0x40)
  {
    **(_QWORD **)a4 = 0;
    bzero((void *)(*(_QWORD *)a4 + 8), (((unint64_t)(v8 + 63) >> 3) - 8) & 0xFFFFFFF8);
  }
  else
  {
    *(_QWORD *)a4 = 0;
  }
  v9 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
    return 0;
  *(_QWORD *)v34 = 0;
  v10 = sub_22E491354(v34, a1);
  v11 = *(unsigned __int8 *)(v10 + 16);
  if (v10 && v11 == 39)
  {
    v12 = sub_22EA21D3C(*(_QWORD *)(v10 + 32), a2, a3, a4);
    if (v12 >= 0x10)
    {
      v13 = sub_22EF5B848(a2, v12, 0);
      return sub_22F40A8A8((uint64_t)v34, a2, v13);
    }
    return v12;
  }
  if (!v10 || v11 != 37)
  {
    v12 = 0;
    v14 = *v9;
    if (!v14 || *(_BYTE *)(v14 + 16) != 5)
      return v12;
    v15 = *(_QWORD *)(v14 + 32);
    if ((*(_BYTE *)(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0) + 17) & 8) == 0
      || (v15 = sub_22EA21D3C(*(_QWORD *)(v14 + 32), a2, a3, a4), v15 >= 0x10))
    {
      v36 = 0;
      v37 = 0;
      LODWORD(v38) = 0;
      v16 = *(_QWORD *)(v14 + 40);
      if (v16)
      {
        if (sub_22F00554C(v16, (uint64_t)&v36, a2, 0, 0))
        {
          v32 = v40;
          if (v40 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v31, (const llvm::APInt *)&v39);
          else
            v31 = v39;
          v33 = v41;
          if (v41)
            goto LABEL_27;
          v21 = v32 - 1;
          v22 = &v31;
          if (v32 >= 0x41)
            v22 = (unint64_t *)(v31 + 8 * (v21 >> 6));
          if (((*v22 >> v21) & 1) == 0)
          {
LABEL_27:
            v18 = *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v18 + 17) & 0xC) != 0
              || (sub_22F1110EC(v18, 0) & 1) != 0
              || (v28 = *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0), v35 = 0, (v29 = sub_22F110500((uint64_t)&v35, v28)) != 0)
              && *(_QWORD *)(v29 + 24) <= 0xFuLL
              && (*(_BYTE *)(v29 + 17) & 4) == 0)
            {
              v19 = v32;
              if (v32 > 0x40)
                v20 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v31);
              else
                v20 = v32 + __clz(v31) - 64;
              v23 = v19 - v20;
            }
            else
            {
              v23 = sub_22F10B100(a2, v15, (llvm::APInt *)&v31);
            }
            v24 = sub_22EF67C8C(a2);
            v25 = sub_22EF5CDF0(a2, *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0));
            if (v25 >= 0x3D)
              v26 = 61;
            else
              v26 = v25;
            if (v23 <= v26)
            {
              v30 = sub_22EF5FE30(a2, v15, (const llvm::APInt *)&v31, *(unsigned __int8 **)(v14 + 40), 0, 0);
              v12 = sub_22F40A8A8((uint64_t)v34, a2, v30);
            }
            else
            {
              if (a4[2] > 0x40 || (v27 = v32, v32 > 0x40))
              {
                llvm::APInt::assignSlowCase((llvm::APInt *)a4, (const llvm::APInt *)&v31);
              }
              else
              {
                *(_QWORD *)a4 = v31;
                a4[2] = v27;
              }
              v12 = 0;
              *((_BYTE *)a4 + 12) = v33;
            }
          }
          else
          {
            v12 = 0;
            *a3 = 1;
          }
          if (v32 >= 0x41 && v31)
            MEMORY[0x2348A0E84](v31, 0x1000C8000313F17);
        }
        else
        {
          v12 = 0;
        }
        if (v38 >= 2)
          sub_22EF53BC0(&v38);
        return v12;
      }
    }
    return 0;
  }
  v12 = sub_22EA21D3C(*(_QWORD *)(v10 + 32), a2, a3, a4);
  if (v12 >= 0x10)
  {
    v13 = sub_22EF5F41C(a2, v12);
    return sub_22F40A8A8((uint64_t)v34, a2, v13);
  }
  return v12;
}

BOOL sub_22EA22104(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 303)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22EA22164(_DWORD *a1, char a2)
{
  int v4;
  uint64_t result;
  int v6;
  unsigned int v7;
  unsigned int v8;

  v4 = a1[7];
  result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 48))(a1);
  v6 = a1[7];
  v7 = v6 & 0xFFD9FFFF;
  a1[7] = v6 & 0xFFD9FFFF;
  if ((v4 & 0x1020000) != 0)
  {
    v8 = v6 & 0xFED9FFFF;
    v7 = v8 | 0x1000000;
    a1[7] = v8 | 0x1000000;
    if ((a2 & 1) != 0 || result && (*(_BYTE *)(result + 30) & 2) != 0)
    {
      v7 = v8 | 0x1060000;
      a1[7] = v8 | 0x1060000;
    }
  }
  if ((v4 & 0xCA00000) != 0)
  {
    a1[7] = v7 | 0x800000;
    if ((a2 & 1) != 0 || result && (*(_BYTE *)(result + 30) & 0x20) != 0)
      a1[7] = v7 | 0xA00000;
  }
  return result;
}

unint64_t sub_22EA2221C(unint64_t result)
{
  unsigned int v1;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  while (1)
  {
    v1 = *(_WORD *)(result + 8) & 0x7F;
    if (v1 == 16 || v1 == 83)
      return result;
    if (v1 <= 0x18 && ((1 << v1) & 0x1000006) != 0)
      return result;
    v3 = v1 - 52;
    if (v1 - 52 < 6)
      return result;
    v4 = -40;
    if ((*(_WORD *)(result + 8) & 0x7Fu) > 0x46)
    {
      if (v1 == 71)
      {
        v4 = -56;
        goto LABEL_25;
      }
      if (v1 == 81)
        goto LABEL_25;
    }
    else
    {
      if (v1 <= 0x18)
      {
        if (((1 << v1) & 0x1066) != 0)
          goto LABEL_25;
        if (v1 == 24)
        {
          v4 = -48;
          goto LABEL_25;
        }
      }
      if (v1 == 70)
      {
        v4 = -64;
        goto LABEL_25;
      }
    }
    if (v1 - 33 >= 5)
      v5 = -48;
    else
      v5 = -64;
    if (v3 >= 6)
      v4 = v5;
    else
      v4 = -72;
LABEL_25:
    v6 = *(_QWORD *)(result + v4 + 16);
    result = v6 & 0xFFFFFFFFFFFFFFF8;
    if ((v6 & 4) != 0)
      result = *(_QWORD *)result;
  }
}

void sub_22EA22308(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  if ((*(_BYTE *)(a1 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a1);
    v3 = *(char **)v2;
    v4 = *(unsigned int *)(v2 + 8);
    if ((_DWORD)v4)
    {
      v5 = &v3[8 * v4];
      v6 = 8 * v4 - 8;
      v7 = *(char **)v2;
      v8 = *(char **)v2;
      while (1)
      {
        v9 = *(_QWORD *)v8;
        v8 += 8;
        if (*(_WORD *)(v9 + 32) == 305)
          break;
        v6 -= 8;
        v7 = v8;
        if (v8 == v5)
          goto LABEL_15;
      }
      if (v8 == v5)
      {
        v5 = v7;
      }
      else
      {
        v10 = 8;
        v5 = v7;
        do
        {
          v11 = *(_QWORD *)&v7[v10];
          if (*(_WORD *)(v11 + 32) != 305)
          {
            *(_QWORD *)v5 = v11;
            v5 += 8;
          }
          v10 += 8;
          v6 -= 8;
        }
        while (v6);
        v3 = *(char **)v2;
      }
    }
    else
    {
      v5 = *(char **)v2;
    }
LABEL_15:
    v12 = (unint64_t)(v5 - v3) >> 3;
    *(_DWORD *)(v2 + 8) = v12;
    if (!(_DWORD)v12)
      *(_DWORD *)(a1 + 28) &= ~0x100u;
  }
}

uint64_t sub_22EA223D4(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t result;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t v41;
  __int128 v42;
  unint64_t v43;
  int v44;
  __int16 v45;
  char v46;

  if (!a2 || (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
  {
LABEL_32:
    v18 = sub_22E63A8A4(a2);
    result = 0;
    if (!v18 && a3)
    {
      v20 = *(_DWORD **)(a1 + 1192);
      if (v20)
      {
        v38 = *(_QWORD *)(a1 + 88);
        v39 = &v20[v20[1] + 5];
        v40 = ((*v20 >> 21) & 7u) * v20[4];
        v41 = *(unsigned int *)(a1 + 1200) | ((unint64_t)*(unsigned int *)(a1 + 1200) << 32);
        v42 = 0uLL;
        v43 = v41;
        v44 = 0;
        v46 = 30;
        v45 = 478;
        return sub_22F39F9D8(v38, v39, v40, &v42);
      }
      else
      {
        return 0;
      }
    }
    return result;
  }
  v6 = *(_WORD *)(a2 + 80) & 0x7F;
  v7 = -40;
  if (v6 > 0x46)
  {
    if (v6 != 83)
    {
      if (v6 == 71)
      {
        v7 = -56;
        goto LABEL_19;
      }
      if (v6 == 81)
        goto LABEL_19;
      goto LABEL_14;
    }
  }
  else
  {
    if (v6 > 0x18)
      goto LABEL_13;
    if (v6 != 16)
    {
      if (((1 << v6) & 0x1066) != 0)
        goto LABEL_19;
      if (v6 != 24)
      {
LABEL_13:
        if (v6 == 70)
        {
          v7 = -64;
          goto LABEL_19;
        }
LABEL_14:
        v8 = v6 - 52;
        v29 = v6 - 33 >= 5;
        v9 = -48;
        if (!v29)
          v9 = -64;
        if (v8 >= 6)
          v7 = v9;
        else
          v7 = -72;
        goto LABEL_19;
      }
    }
    v7 = -48;
  }
LABEL_19:
  v10 = *(_QWORD *)(a2 + 72 + v7 + 16);
  v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (_QWORD *)*v11;
  if (v11)
    v12 = (uint64_t)(v11 - 8);
  else
    v12 = 0;
  if ((*(_BYTE *)(v12 + 29) & 1) == 0)
    goto LABEL_31;
  sub_22EFC8E88(v12);
  v14 = *(uint64_t **)v13;
  v15 = *(unsigned int *)(v13 + 8);
  v16 = *(uint64_t **)v13;
  if ((_DWORD)v15)
  {
    v17 = 8 * v15;
    v16 = *(uint64_t **)v13;
    while (*(_WORD *)(*v16 + 32) != 145)
    {
      ++v16;
      v17 -= 8;
      if (!v17)
        goto LABEL_31;
    }
  }
  if (v16 == &v14[v15])
  {
LABEL_31:
    if (*(_QWORD *)(a1 + 1192))
      goto LABEL_32;
    while (1)
    {
LABEL_39:
      v23 = *(_WORD *)(v12 + 72) & 0x7F;
      v24 = -40;
      if (v23 > 0x46)
      {
        if (v23 != 83)
        {
          if (v23 == 71)
          {
            v24 = -56;
          }
          else if (v23 != 81)
          {
            goto LABEL_50;
          }
        }
      }
      else
      {
        if (v23 > 0x18)
          goto LABEL_49;
        if (v23 == 16)
          goto LABEL_42;
        if (((1 << v23) & 0x1066) != 0)
          goto LABEL_56;
        if (v23 == 24)
        {
LABEL_42:
          v24 = -48;
        }
        else
        {
LABEL_49:
          if (v23 != 70)
          {
LABEL_50:
            v25 = v23 - 52;
            if (v23 - 33 >= 5)
              v26 = -48;
            else
              v26 = -64;
            if (v25 >= 6)
              v24 = v26;
            else
              v24 = -72;
            goto LABEL_56;
          }
          v24 = -64;
        }
      }
LABEL_56:
      v27 = *(_QWORD *)(v12 + 64 + v24 + 16);
      v28 = v27 & 0xFFFFFFFFFFFFFFF8;
      if ((v27 & 4) != 0)
        v28 = *(_QWORD *)v28;
      if (v28)
        v29 = (*(_WORD *)(v28 + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD;
      else
        v29 = 0;
      v30 = !v29;
      if (v30)
        v12 = 0;
      else
        v12 = v28 - 64;
      if ((v30 & 1) != 0)
        goto LABEL_32;
      if ((*(_BYTE *)(v28 - 35) & 1) != 0)
      {
        sub_22EFC8E88(v28 - 64);
        v32 = *(uint64_t **)v31;
        v33 = *(unsigned int *)(v31 + 8);
        v34 = *(uint64_t **)v31;
        if ((_DWORD)v33)
        {
          v35 = 8 * v33;
          v34 = *(uint64_t **)v31;
          while (*(_WORD *)(*v34 + 32) != 145)
          {
            ++v34;
            v35 -= 8;
            if (!v35)
              goto LABEL_39;
          }
        }
        if (v34 != &v32[v33])
        {
          do
          {
            v36 = *v32++;
            v21 = v36;
          }
          while (*(_WORD *)(v36 + 32) != 145);
          goto LABEL_79;
        }
      }
    }
  }
  do
  {
    v22 = *v14++;
    v21 = v22;
  }
  while (*(_WORD *)(v22 + 32) != 145);
LABEL_79:
  result = sub_22F383808(v21, *(_QWORD *)(a1 + 88));
  v37 = *(_WORD *)(result + 32);
  *(_BYTE *)(result + 34) |= 4u;
  *(_WORD *)(result + 32) = v37;
  return result;
}

unint64_t sub_22EA22744(unint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int *v10;
  unsigned int *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41[25];
  unsigned int v42;
  unsigned int v43[25];
  unsigned int v44;
  unsigned int v45[24];
  unsigned int v46[24];
  _QWORD v47[12];
  uint64_t v48;
  _QWORD v49[4];
  __int128 v50;
  uint64_t v51;
  uint64_t v52;

  v5 = result;
  v52 = *MEMORY[0x24BDAC8D0];
  v48 = a2;
  v6 = *(_QWORD *)(a2 + 80);
  if ((v6 & 0xE000) == 0x4000)
  {
    v7 = *(_DWORD *)(a3 + 96);
    if ((**(_QWORD **)(result + 72) & 0x100) != 0)
      v8 = 4728;
    else
      v8 = 6999;
    sub_22E8FCA40((_QWORD *)result, v7, v8, 0, (uint64_t)v47);
    v9 = *(unsigned int *)(a3 + 96);
    *(_QWORD *)((char *)&v49[1] + 4) = 0;
    BYTE4(v49[2]) = 0;
    v50 = 0uLL;
    v49[3] = 0;
    LOBYTE(v51) = 0;
    v49[0] = v9 | (v9 << 32);
    LOBYTE(v49[1]) = 1;
    sub_22E890748((uint64_t)v47, v49);
    if (SHIBYTE(v50) < 0)
      operator delete((void *)v49[3]);
    result = (unint64_t)sub_22E903BEC((unsigned int *)v47);
    v6 = *(_QWORD *)(a2 + 80);
  }
  if ((v6 & 0x20000) != 0)
  {
    if ((*(_QWORD *)a3 & 0x100000000) != 0)
      v10 = (int *)(a3 + 164);
    else
      v10 = (int *)(a3 + 184);
    sub_22E8FCA40((_QWORD *)v5, *v10, 0xE28u, 0, (uint64_t)v47);
    if ((*(_QWORD *)a3 & 0x100000000) != 0)
      v11 = (unsigned int *)(a3 + 164);
    else
      v11 = (unsigned int *)(a3 + 184);
    v12 = *v11 | ((unint64_t)*v11 << 32);
    *(_QWORD *)((char *)&v49[1] + 4) = 0;
    BYTE4(v49[2]) = 0;
    v50 = 0uLL;
    v49[3] = 0;
    LOBYTE(v51) = 0;
    v49[0] = v12;
    LOBYTE(v49[1]) = 1;
    sub_22E890748((uint64_t)v47, v49);
    if (SHIBYTE(v50) < 0)
      operator delete((void *)v49[3]);
    result = (unint64_t)sub_22E903BEC((unsigned int *)v47);
  }
  if ((*(_BYTE *)(a3 + 4) & 8) != 0)
  {
    v13 = *(unsigned int *)(a3 + 176);
    v14 = sub_22F141A3C(v13, 0, *(_QWORD **)(v5 + 112), *(_DWORD **)(v5 + 72));
    sub_22E8FCA40((_QWORD *)v5, v13, 0x14C3u, 0, (uint64_t)v46);
    sub_22E903BEC(v46);
    sub_22E8FCA40((_QWORD *)v5, v13, 0x164Fu, 0, (uint64_t)v47);
    BYTE4(v49[2]) = 0;
    *(_QWORD *)((char *)&v49[1] + 4) = 0;
    v50 = 0uLL;
    v49[3] = 0;
    LOBYTE(v51) = 0;
    v49[0] = v13 | (v14 << 32);
    LOBYTE(v49[1]) = 1;
    sub_22E890748((uint64_t)v47, v49);
    if (SHIBYTE(v50) < 0)
      operator delete((void *)v49[3]);
    result = (unint64_t)sub_22E903BEC((unsigned int *)v47);
  }
  if ((*(_BYTE *)(a2 + 83) & 0xC0) != 0)
  {
    sub_22E8FCA40((_QWORD *)v5, *(_DWORD *)(a3 + 196), 0xC08u, 0, (uint64_t)v47);
    LOBYTE(v44) = (*(_QWORD *)(a2 + 80) & 0xC0000000) == 0x80000000;
    v15 = sub_22E894E38((uint64_t)v47, (unsigned __int8 *)&v44);
    v16 = *(unsigned int *)(a3 + 196);
    *(_QWORD *)((char *)&v49[1] + 4) = 0;
    BYTE4(v49[2]) = 0;
    v50 = 0uLL;
    v49[3] = 0;
    LOBYTE(v51) = 0;
    v49[0] = v16 | (v16 << 32);
    LOBYTE(v49[1]) = 1;
    sub_22E890748(v15, v49);
    if (SHIBYTE(v50) < 0)
      operator delete((void *)v49[3]);
    result = (unint64_t)sub_22E903BEC((unsigned int *)v47);
    *(_QWORD *)(a2 + 80) &= 0xFFFFFFFF3FFFFFFFLL;
  }
  v17 = *(_QWORD *)(v5 + 72);
  if ((*(_DWORD *)(v17 + 52) & 0x40000000) != 0)
  {
    sub_22E8FCA40((_QWORD *)v5, *(_DWORD *)(a2 + 24), 0x113Eu, 0, (uint64_t)v47);
    LOBYTE(v49[0]) = sub_22E47290C(a2);
    sub_22E894E38((uint64_t)v47, (unsigned __int8 *)v49);
LABEL_44:
    sub_22E903BEC((unsigned int *)v47);
    v24 = a2;
    return sub_22EFC77E8(v24, 1);
  }
  if ((*(_WORD *)(v17 + 96) & 0x40) != 0)
    return result;
  if ((*(_BYTE *)(v17 + 104) & 0x20) != 0)
  {
    sub_22E8FCA40((_QWORD *)v5, *(_DWORD *)(a2 + 24), 0xF2Eu, 0, (uint64_t)v47);
    LODWORD(v49[0]) = sub_22F3AC79C(a2);
    sub_22E89519C((uint64_t)v47, (unsigned int *)v49);
    goto LABEL_44;
  }
  v18 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v18)
    v19 = *(unsigned __int8 *)(v18 + 16) - 27 > 0xFFFFFFFD;
  else
    v19 = 0;
  if (!v19)
  {
    result = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0));
    v18 = result;
  }
  v20 = *(_QWORD *)(v18 + 16);
  if ((v20 & 0xF80000) != 0)
  {
    result = (unint64_t)sub_22EF5F1F4(*(_QWORD *)(v5 + 88), v18, (v20 >> 19) & 0x1FE0);
    v18 = result;
    *(_QWORD *)(a2 + 48) = result & 0xFFFFFFFFFFFFFFF0;
  }
  v21 = *(_QWORD *)((*(_QWORD *)(v18 + 24) & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((**(_QWORD **)(v5 + 72) & 0x80000100) == 0x80000000)
  {
    if (*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v5 + 88) + 16480) & 0xFFFFFFFFFFFFFFF0)
                                                                          + 8) & 0xFFFFFFFFFFFFFFF0))
    {
      v22 = sub_22EFBAFDC(a2);
      sub_22E8FCA40((_QWORD *)v5, v22, 0x14A3u, 0, (uint64_t)v45);
      sub_22E903BEC(v45);
      result = sub_22F3AC46C(a2);
      if (HIDWORD(result))
      {
        v23 = result;
        if ((_DWORD)result)
        {
          sub_22E8FCA40((_QWORD *)v5, result, 0x164Eu, 0, (uint64_t)v47);
          BYTE4(v49[2]) = 0;
          *(_QWORD *)((char *)&v49[1] + 4) = 0;
          *(_QWORD *)&v50 = 0;
          *((_QWORD *)&v50 + 1) = 0x300000000000000;
          v49[3] = 7630441;
          LOBYTE(v51) = 0;
          v49[0] = v23;
          LOBYTE(v49[1]) = 1;
          sub_22E890748((uint64_t)v47, v49);
          if (SHIBYTE(v50) < 0)
            operator delete((void *)v49[3]);
          result = (unint64_t)sub_22E903BEC((unsigned int *)v47);
        }
      }
      goto LABEL_49;
    }
LABEL_48:
    *(_QWORD *)(a2 + 80) |= 0x10000000uLL;
    goto LABEL_49;
  }
  if ((v21 | *(_QWORD *)(v18 + 24) & 7) == (*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v5 + 88) + 16480) & 0xFFFFFFFFFFFFFFF0)
                                                         + 8) | *(_QWORD *)(*(_QWORD *)(v5 + 88) + 16480) & 7))
    goto LABEL_48;
  v39 = sub_22F3AC46C(a2);
  v40 = sub_22EFBAFDC(a2);
  sub_22E8FCA40((_QWORD *)v5, v40, 0xEA5u, 0, (uint64_t)v47);
  if (HIDWORD(v39) && (_DWORD)v39)
  {
    BYTE4(v49[2]) = 0;
    *(_QWORD *)((char *)&v49[1] + 4) = 0;
    *(_QWORD *)&v50 = 0;
    *((_QWORD *)&v50 + 1) = 0x300000000000000;
    v49[3] = 7630441;
    LOBYTE(v51) = 0;
    v49[0] = v39;
    LOBYTE(v49[1]) = 1;
  }
  else
  {
    v51 = 0;
    v50 = 0u;
    memset(v49, 0, sizeof(v49));
  }
  sub_22E890748((uint64_t)v47, v49);
  if (SHIBYTE(v50) < 0)
    operator delete((void *)v49[3]);
  sub_22E903BEC((unsigned int *)v47);
  result = sub_22EFC77E8(a2, 1);
LABEL_49:
  if (*(_BYTE *)(v18 + 16) == 25)
    return result;
  v25 = *(_QWORD *)(v18 + 16);
  v26 = (unsigned __int16)(v25 >> 38);
  v44 = v26;
  if ((v25 & 0x800000000000000) != 0)
  {
    sub_22E8FCA40((_QWORD *)v5, *(_DWORD *)(a2 + 24), 0x151Au, 0, (uint64_t)v43);
    sub_22E903BEC(v43);
  }
  if (v26 != 4)
  {
    if (v26 < 4)
      goto LABEL_55;
    goto LABEL_82;
  }
  v27 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 88) + 15088) + 68);
  if (v27 > 0x21 || ((1 << v27) & 0x3F0000888) == 0)
  {
LABEL_82:
    sub_22E8FCA40((_QWORD *)v5, *(_DWORD *)(a2 + 24), 0xEA6u, 0, (uint64_t)v47);
    sub_22E89519C((uint64_t)v47, &v44);
    sub_22E903BEC((unsigned int *)v47);
    sub_22EFC77E8(a2, 1);
    v44 = 3;
  }
LABEL_55:
  v28 = *(_QWORD *)(v5 + 88);
  v29 = sub_22EF5B848(v28, *(_QWORD *)(v28 + 16408), 0);
  result = sub_22EF5B848(v28, v29, 0);
  v49[0] = *(_QWORD *)(*(_QWORD *)(v5 + 88) + 16480);
  v49[1] = result;
  v49[2] = result;
  v49[3] = result;
  v42 = 0;
  if (v44)
  {
    v30 = result;
    v31 = 0;
    v32 = v18 + 40;
    do
    {
      v33 = *(_QWORD *)(v32 + 8 * v31);
      v34 = v49[v31];
      if (*(_QWORD *)(*(_QWORD *)((v33 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((v34 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
      {
        if (v34 != v30
          || ((v47[0] = 0, (v35 = sub_22E491354((unsigned int *)v47, v33)) == 0) || *(_BYTE *)(v35 + 16) != 39)
          && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
           || (v35 = sub_22F10CF48(v35)) == 0)
          || ((v36 = sub_22E491354((unsigned int *)v47, *(_QWORD *)(v35 + 32))) == 0 || *(_BYTE *)(v36 + 16) != 39)
          && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
           || (v36 = sub_22F10CF48(v36)) == 0)
          || (result = sub_22E491354((unsigned int *)v47, *(_QWORD *)(v36 + 32)),
              *(_QWORD *)((result & 0xFFFFFFFFFFFFFFF0) + 8) != (*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v5 + 88)
                                                                                          + 16408) & 0xFFFFFFFFFFFFFFF0)
                                                                             + 8) | *(_QWORD *)(*(_QWORD *)(v5 + 88)
                                                                                              + 16408) & 7))
          || LODWORD(v47[0]) > 1
          || (v47[0] & 0xC00000000) != 0)
        {
          sub_22E8FCA40((_QWORD *)v5, *(_DWORD *)(a2 + 24), 0xEA3u, 0, (uint64_t)v47);
          v37 = sub_22E89519C((uint64_t)v47, &v42);
          sub_22E8901B8(v37, &v49[v42]);
          sub_22E903BEC((unsigned int *)v47);
          result = sub_22EFC77E8(a2, 1);
        }
      }
      v31 = v42 + 1;
      v42 = v31;
    }
    while (v31 < v44);
    if (v44 == 1 && (*(_BYTE *)(a2 + 28) & 0x80) == 0)
    {
      sub_22E8FCA40((_QWORD *)v5, *(_DWORD *)(a2 + 24), 0x1A37u, 0, (uint64_t)v41);
      result = (unint64_t)sub_22E903BEC(v41);
    }
  }
  if ((*(_BYTE *)(a2 + 28) & 0x80) == 0)
  {
    v38 = *(_QWORD *)(a2 + 144);
    if (v38 >= 8 && (v38 & 6) == 0)
    {
      sub_22E8FCA40((_QWORD *)v5, *(_DWORD *)(a2 + 24), 0xEA7u, 0, (uint64_t)v47);
      sub_22E890024((uint64_t)v47, &v48);
      sub_22E903BEC((unsigned int *)v47);
      v24 = v48;
      return sub_22EFC77E8(v24, 1);
    }
  }
  return result;
}

uint64_t sub_22EA22FD4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  int v19;
  int v20;
  BOOL v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  _DWORD *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34[24];
  uint64_t v35;

  v35 = a2;
  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = *(unsigned __int8 *)(v5 + 16) - 27 > 0xFFFFFFFD;
  else
    v6 = 0;
  if (!v6)
    v5 = sub_22F10CF48(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
  v8 = *(_QWORD *)v7;
  v9 = *(_DWORD *)(*(_QWORD *)v7 + 16);
  if (*(_QWORD *)v7)
    v10 = v9 == 11;
  else
    v10 = 0;
  if (v10)
  {
    if (((*(_DWORD *)(*(_QWORD *)v7 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_18;
  }
  else if (v8 && v9 == 44)
  {
    v11 = sub_22F114198(*(_QWORD *)(v8 + 24));
    if ((*(_BYTE *)(v11 + 74) & 1) == 0 && *(_QWORD *)(v11 + 128) <= 7uLL)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
LABEL_18:
      v12 = *(_DWORD *)(*(_QWORD *)v7 + 16);
      v13 = v12;
      if (v12 != 32)
      {
        v14 = v12 & 0xFF800FF;
        if (v13 != 39 && v14 != 114294795)
          goto LABEL_32;
      }
    }
  }
  else if (v9 != 9)
  {
    goto LABEL_18;
  }
  v16 = *(_QWORD *)(a2 + 40);
  if ((v16 & 7) != 0
    || (v17 = v16 & 0xFFFFFFFFFFFFFFF8) == 0
    || (v18 = *(_DWORD **)(v17 + 16), *v18 != 7)
    || ((v19 = v18[4], v20 = *(_DWORD *)((char *)v18 + 19), v19 == 1298951236) ? (v21 = v20 == 1852399949) : (v21 = 0),
        !v21))
  {
    *(_QWORD *)(a2 + 80) |= 0x10000000uLL;
  }
LABEL_32:
  result = sub_22F34BA4C((uint64_t)a1, v4);
  if ((result & 1) != 0)
    goto LABEL_51;
  v23 = *(_QWORD *)(a2 + 40);
  if ((v23 & 7) == 0)
  {
    v24 = v23 & 0xFFFFFFFFFFFFFFF8;
    if (v24)
    {
      v25 = *(_QWORD *)(v24 + 16);
      if (*(_DWORD *)v25 == 5)
      {
        v26 = *(_DWORD *)(v25 + 16);
        v27 = *(unsigned __int8 *)(v25 + 20);
        if (v26 == 1767992695 && v27 == 110)
        {
LABEL_48:
          v32 = *(_QWORD *)(v5 + 16);
          if ((v32 & 0xF80000) != 0)
          {
            result = a1[11];
            v31 = (v32 >> 19) & 0x1FE0;
            goto LABEL_50;
          }
          goto LABEL_51;
        }
      }
      else if (*(_DWORD *)v25 == 4 && *(_DWORD *)(v25 + 16) == 1852399981)
      {
        goto LABEL_48;
      }
    }
  }
  result = a1[11];
  v29 = *(_DWORD **)(result + 15088);
  if (v29[17] != 15 || v29[18] == 1 || v29[14] != 41)
    goto LABEL_48;
  v30 = *(_QWORD *)(v5 + 16);
  if ((v30 & 0xF80000) != 0x80000)
  {
    v31 = (v30 >> 19) & 0x1FE0 | 1;
LABEL_50:
    result = (uint64_t)sub_22EF5F1F4(result, v5, v31);
    *(_QWORD *)(a2 + 48) = result & 0xFFFFFFFFFFFFFFF0;
  }
LABEL_51:
  if ((*(_BYTE *)(a2 + 28) & 0x80) == 0)
  {
    v33 = *(_QWORD *)(a2 + 144);
    if (v33 >= 8 && (v33 & 6) == 0)
    {
      sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0xEA7u, 0, (uint64_t)v34);
      sub_22E890024((uint64_t)v34, &v35);
      sub_22E903BEC(v34);
      return sub_22EFC77E8(v35, 1);
    }
  }
  return result;
}

BOOL sub_22EA23284(unint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, int a5, int a6)
{
  _QWORD *v8;
  _BOOL4 v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  int *v76;
  int v77;
  int v78;
  unsigned int *v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  int *v89;
  int v90;
  int v91;
  int v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  BOOL v98;
  _QWORD *v99;
  unint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  unint64_t v136;
  BOOL v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  int v141;
  void **v142;
  uint64_t v143;
  unint64_t v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  int *v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  unint64_t v172;
  uint64_t v173;
  __n128 v174;
  uint64_t v175;
  _QWORD *v176;
  unint64_t v177;
  BOOL v178;
  _QWORD *v179;
  char v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t **v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _DWORD *v195;
  unsigned int v196;
  size_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  _BOOL4 v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int *v213;
  const void *v214;
  size_t v215;
  unsigned int v216;
  int *v217;
  const void *v218;
  int v219;
  void ***v220;
  void ***v221;
  void **v222;
  uint64_t v223;
  void ***v224;
  _BOOL4 v225;
  uint64_t v226;
  uint64_t v227;
  void ***v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  void ***v232;
  uint64_t v233;
  unint64_t v234;
  _QWORD *v235;
  uint64_t i;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  _QWORD *v242;
  uint64_t v243;
  char v244;
  _QWORD *v245;
  unint64_t v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unsigned int v251;
  int v252;
  BOOL v253;
  BOOL v254;
  int v255;
  int v256;
  int8x16_t v257;
  int32x4_t v258;
  int v259;
  _BOOL4 v260;
  uint16x4_t v261;
  BOOL v262;
  BOOL v263;
  BOOL v264;
  BOOL v265;
  BOOL v266;
  int32x4_t v267;
  int32x4_t v268;
  int32x2_t v269;
  int v270;
  _QWORD *v271;
  unsigned int v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  int v276;
  uint64_t *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  BOOL v281;
  unint64_t v283;
  uint64_t v284;
  BOOL v285;
  unint64_t v286;
  uint64_t v287;
  size_t v288;
  int *v289;
  int v290;
  int v291;
  BOOL v292;
  uint64_t v293;
  int *v294;
  int v295;
  int v296;
  BOOL v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unsigned int *v303;
  const void *v304;
  size_t v305;
  unsigned int v306;
  int *v307;
  const void *v308;
  int v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t *v312;
  uint64_t v313;
  uint64_t *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  size_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  int v326;
  unsigned int *v327;
  char v328;
  int v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t v333;
  uint64_t *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  unint64_t v339;
  uint64_t v340;
  int v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  int v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  void ***v354;
  uint64_t v355;
  uint64_t v356;
  _QWORD *v357;
  _QWORD *v358;
  char v359;
  int v360;
  _QWORD *v361;
  unint64_t v362;
  int v363;
  char v364;
  uint64_t *v365;
  int v367;
  uint64_t v368;
  int v369;
  unsigned int v370[24];
  unsigned int v371[24];
  unsigned int v372[24];
  unint64_t v373;
  _QWORD *v374;
  _BYTE v375[96];
  unsigned int v376[24];
  __int128 v377;
  uint64_t v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int16 v382;
  int v383[24];
  unsigned int v384[24];
  _OWORD v385[6];
  _OWORD v386[5];
  void **v387;
  unsigned int v388[24];
  void **v389[12];
  void ***v390;
  __int128 v391;
  void *__p;
  __int16 v393;
  int v394;
  uint64_t v395;
  __int16 v396;
  char v397;
  __int128 v398;
  uint64_t v399;
  int v400;
  _BYTE v401[64];
  __int128 v402;
  char *v403;
  uint64_t v404;
  uint64_t v405;
  llvm *v406;
  unsigned int v407;
  unsigned __int8 v408;
  _QWORD *v409;
  void *v410;
  uint64_t v411;
  int v412;
  _QWORD v413[5];
  void *v414;
  uint64_t v415;
  _DWORD v416[26];
  uint64_t v417;
  __int16 v418;
  char v419;
  uint64_t v420;

  v8 = a3;
  v420 = *MEMORY[0x24BDAC8D0];
  v374 = a3;
  v12 = (**(_QWORD **)(a1 + 72) & 0x100) == 0 && *(_BYTE *)(a4 + 165) == 0;
  v367 = v12;
  v373 = 0;
  if (!*(_DWORD *)(a4 + 16))
  {
LABEL_15:
    v364 = 0;
    goto LABEL_17;
  }
  if ((sub_22EA2796C(a4, **(_QWORD **)(*(_QWORD *)(a1 + 88) + 2000), (uint64_t)a3) & 1) == 0)
  {
    v14 = **(_QWORD **)(a4 + 8) & 0xFFFFFFFFFFFFFFFCLL;
    if (sub_22EA27A2C(a1, v14, (unint64_t)v8))
    {
      v364 = 0;
      v373 = v14;
      goto LABEL_14;
    }
    goto LABEL_15;
  }
  if (sub_22ECF9910((_QWORD *)a1, a2, (unint64_t)v8, a4, &v373, 0) - 1 >= 2)
  {
    v364 = 1;
    v8 = v374;
LABEL_17:
    v15 = v8[2];
    v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8);
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) == 0)
    {
      if ((v15 & 4) != 0)
        v16 = (_QWORD *)*v16;
      if ((*(_WORD *)(sub_22EFCBB30((unint64_t)v16) + 8) & 0x7F) != 0x53)
        goto LABEL_80;
      v17 = sub_22EA1C0A0(*(_QWORD *)(a1 + 88), v8[5]);
      if (!v17)
        goto LABEL_80;
      v18 = v17;
      *(_DWORD *)a4 = 0;
      *(_DWORD *)(a4 + 16) = 0;
      v19 = *(_QWORD *)(a4 + 88);
      if (v19)
      {
        v20 = sub_22EC6CBD0(v19);
        MEMORY[0x2348A0E9C](v20, 0x10E0C409F09D3C3);
        v21 = *(_DWORD *)(a4 + 16);
      }
      else
      {
        v21 = 0;
      }
      *(_BYTE *)(a4 + 165) = 0;
      *(_QWORD *)(a4 + 88) = 0;
      *(_QWORD *)(a4 + 96) = 0;
      v32 = *(unsigned int *)(v18 + 28);
      if (v21 >= *(_DWORD *)(a4 + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v21 = *(_DWORD *)(a4 + 16);
      }
      v33 = (v32 >> 13) & 3 | v18;
      goto LABEL_60;
    }
    if ((v15 & 4) != 0)
      v16 = (_QWORD *)*v16;
    v22 = *(_WORD *)(sub_22EFCBB30((unint64_t)v16) + 8) & 0x7F;
    if (v22 != 83 && !sub_22EA271A4(a1, (uint64_t)v8))
      goto LABEL_80;
    *(_QWORD *)&v398 = v8;
    LOBYTE(v390) = v22 == 83;
    v23 = sub_22EA1C0A0(*(_QWORD *)(a1 + 88), v8[5]);
    if (v22 == 83 && v23 == 0)
    {
      if (!sub_22EA271A4(a1, (uint64_t)v8))
        goto LABEL_80;
    }
    else
    {
      v25 = v23;
      if (v23)
      {
        if (v22 != 83 || sub_22EA271A4(a1, (uint64_t)v8))
        {
          *(_DWORD *)a4 = 0;
          *(_DWORD *)(a4 + 16) = 0;
          v26 = *(_QWORD *)(a4 + 88);
          if (v26)
          {
            v27 = sub_22EC6CBD0(v26);
            MEMORY[0x2348A0E9C](v27, 0x10E0C409F09D3C3);
            v21 = *(_DWORD *)(a4 + 16);
          }
          else
          {
            v21 = 0;
          }
          *(_BYTE *)(a4 + 165) = 0;
          *(_QWORD *)(a4 + 88) = 0;
          *(_QWORD *)(a4 + 96) = 0;
          v37 = *(unsigned int *)(v25 + 28);
          if (v21 >= *(_DWORD *)(a4 + 20))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v21 = *(_DWORD *)(a4 + 16);
          }
          v33 = (v37 >> 13) & 3 | v25;
LABEL_60:
          *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8 * v21) = v33;
          v38 = *(_DWORD *)(a4 + 16);
          *(_DWORD *)a4 = 2;
          *(_DWORD *)(a4 + 16) = v38 + 1;
          if (v38 != -1)
          {
            v39 = **(_QWORD **)(a4 + 8) & 0xFFFFFFFFFFFFFFFCLL;
            v40 = *(_DWORD *)(v39 + 28) & 0x7F;
            v98 = v40 > 0x2F;
            v41 = (1 << v40) & 0xC00000060000;
            if (!v98 && v41 != 0)
              v39 = sub_22EFBAEA4(v39);
            v373 = v39;
            if (sub_22EA0E084(v39) || sub_22EA0E084((uint64_t)v374))
            {
              v13 = 1;
              if (!sub_22ECF9D50((_QWORD *)a1, (uint64_t)v374, v373, 0, 1, 1))
              {
                v367 = 0;
                goto LABEL_81;
              }
              v13 = 0;
              v367 = 0;
              v373 = 0;
              goto LABEL_11;
            }
            v367 = 0;
LABEL_14:
            v13 = 1;
            goto LABEL_81;
          }
LABEL_80:
          v13 = 0;
          goto LABEL_81;
        }
        if ((*((_DWORD *)v8 + 7) & 0x7Fu) - 60 > 6)
          goto LABEL_80;
        v31 = *(_DWORD *)(v25 + 28);
LABEL_77:
        v137 = __CFADD__((v31 & 0x7E) - 58, 6);
        v43 = 112;
        if (!v137)
          v43 = 80;
        v44 = *(_QWORD *)(v25 + v43);
        sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)v8 + 6), 0xD19u, 0, (uint64_t)&v402);
        v45 = sub_22E894E38((uint64_t)&v402, (unsigned __int8 *)&v390);
        sub_22E890024(v45, (uint64_t *)&v398);
        sub_22E903BEC((unsigned int *)&v402);
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v44 + 24), 0x15F4u, 0, (uint64_t)&v402);
        sub_22E894E38((uint64_t)&v402, (unsigned __int8 *)&v390);
        sub_22E903BEC((unsigned int *)&v402);
        goto LABEL_80;
      }
      if (v22 != 83)
      {
        v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 1960) + 80);
        v35 = sub_22E3CD31C((uint64_t *)(v34 + 72), v34);
        v36 = sub_22EFCE144(v35 + 40, v8[5]);
        if (v36)
        {
          while (1)
          {
            v25 = v36 & 0xFFFFFFFFFFFFFFF8;
            if ((v36 & 4) == 0 || !v25)
              break;
            v31 = *(_DWORD *)(*(_QWORD *)v25 + 28);
            if ((v31 & 0x7Fu) - 60 < 7)
            {
              v25 = *(_QWORD *)v25;
              goto LABEL_77;
            }
            v36 = *(_QWORD *)(v25 + 8);
            if (!v36)
              goto LABEL_80;
          }
          v31 = *(_DWORD *)(v25 + 28);
          if ((v31 & 0x7Fu) - 60 < 7)
            goto LABEL_77;
        }
        goto LABEL_80;
      }
    }
    LOBYTE(v390) = 0;
    v28 = *(unsigned int *)(a4 + 16);
    if (!(_DWORD)v28)
      goto LABEL_80;
    v29 = *(_QWORD **)(a4 + 8);
    v30 = 8 * v28;
    while (1)
    {
      v25 = *v29 & 0xFFFFFFFFFFFFFFFCLL;
      v31 = *(_DWORD *)(v25 + 28);
      if ((v31 & 0x7Fu) - 60 < 7)
        goto LABEL_77;
      ++v29;
      v30 -= 8;
      if (!v30)
        goto LABEL_80;
    }
  }
  v13 = 1;
LABEL_11:
  v364 = 1;
LABEL_81:
  v46 = v374;
  if ((*((_BYTE *)v374 + 29) & 1) == 0)
    goto LABEL_90;
  sub_22EFC8E88((uint64_t)v374);
  v48 = *(uint64_t **)v47;
  v49 = *(unsigned int *)(v47 + 8);
  v50 = *(uint64_t **)v47;
  if ((_DWORD)v49)
  {
    v51 = 8 * v49;
    v50 = *(uint64_t **)v47;
    while (*(_WORD *)(*v50 + 32) != 327)
    {
      ++v50;
      v51 -= 8;
      if (!v51)
        goto LABEL_90;
    }
  }
  if (v50 == &v48[v49])
  {
LABEL_90:
    v52 = 0;
  }
  else
  {
    do
    {
      v53 = *v48++;
      v52 = v53;
    }
    while (*(_WORD *)(v53 + 32) != 327);
  }
  if ((*((_BYTE *)v46 + 29) & 1) == 0)
    goto LABEL_100;
  sub_22EFC8E88((uint64_t)v46);
  v55 = *(uint64_t **)v54;
  v56 = *(unsigned int *)(v54 + 8);
  v57 = *(uint64_t **)v54;
  if ((_DWORD)v56)
  {
    v58 = 8 * v56;
    v57 = *(uint64_t **)v54;
    while (*(_WORD *)(*v57 + 32) != 127)
    {
      ++v57;
      v58 -= 8;
      if (!v58)
        goto LABEL_100;
    }
  }
  if (v57 == &v55[v56])
  {
LABEL_100:
    v59 = 0;
  }
  else
  {
    do
    {
      v60 = *v55++;
      v59 = v60;
    }
    while (*(_WORD *)(v60 + 32) != 127);
  }
  v369 = v13;
  v365 = (uint64_t *)a2;
  if ((*((_BYTE *)v46 + 29) & 1) == 0)
    goto LABEL_110;
  sub_22EFC8E88((uint64_t)v46);
  v62 = *(uint64_t **)v61;
  v63 = *(unsigned int *)(v61 + 8);
  v64 = *(uint64_t **)v61;
  if ((_DWORD)v63)
  {
    v65 = 8 * v63;
    v64 = *(uint64_t **)v61;
    while (*(_WORD *)(*v64 + 32) != 128)
    {
      ++v64;
      v65 -= 8;
      if (!v65)
        goto LABEL_110;
    }
  }
  if (v64 == &v62[v63])
  {
LABEL_110:
    v66 = 0;
  }
  else
  {
    do
    {
      v67 = *v62++;
      v66 = v67;
    }
    while (*(_WORD *)(v67 + 32) != 128);
  }
  v368 = a4;
  v363 = a5;
  if ((*((_BYTE *)v46 + 29) & 1) == 0)
    goto LABEL_120;
  sub_22EFC8E88((uint64_t)v46);
  v69 = *(uint64_t **)v68;
  v70 = *(unsigned int *)(v68 + 8);
  v71 = *(uint64_t **)v68;
  if ((_DWORD)v70)
  {
    v72 = 8 * v70;
    v71 = *(uint64_t **)v68;
    while (*(_WORD *)(*v71 + 32) != 328)
    {
      ++v71;
      v72 -= 8;
      if (!v72)
        goto LABEL_120;
    }
  }
  if (v71 == &v69[v70])
  {
LABEL_120:
    v73 = 0;
  }
  else
  {
    do
    {
      v74 = *v69++;
      v73 = v74;
    }
    while (*(_WORD *)(v74 + 32) != 328);
  }
  v75 = sub_22EFC0C9C((uint64_t)v46);
  if (sub_22EFBFAF0((uint64_t)v46))
  {
    if (!v75)
      goto LABEL_158;
    if (v75 == 1)
    {
      if (*(_DWORD *)(v52 + 36) != 7)
        goto LABEL_158;
      v76 = *(int **)(v52 + 40);
      v77 = *v76;
      v78 = *(int *)((char *)v76 + 3);
      if (v77 != 1634100580 || v78 != 1953264993)
        goto LABEL_158;
    }
    sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)v46 + 6), 0xF82u, 0, (uint64_t)v375);
    v80 = (unsigned int *)v375;
    goto LABEL_131;
  }
  v81 = v373;
  if (!v373)
    goto LABEL_141;
  v82 = *(_DWORD *)(v373 + 28);
  v83 = (v82 & 0x7E) - 58;
  if (v83 <= 0xFFFFFFF9 && ((v82 & 0x7F) != 0x1D || !*(_QWORD *)(v373 + 48)))
    goto LABEL_141;
  v84 = *(_QWORD *)(v373 + 16);
  v85 = (_QWORD *)(v84 & 0xFFFFFFFFFFFFFFF8);
  if ((v84 & 4) != 0)
    v85 = (_QWORD *)*v85;
  v86 = sub_22EFCBB30((unint64_t)v85);
  v87 = v46[2];
  v88 = (_QWORD *)(v87 & 0xFFFFFFFFFFFFFFF8);
  if ((v87 & 4) != 0)
    v88 = (_QWORD *)*v88;
  if (v86 != sub_22EFCBB30((unint64_t)v88))
  {
LABEL_141:
    if (v75)
    {
      if (v75 == 1)
      {
        if (*(_DWORD *)(v52 + 36) != 7)
          goto LABEL_158;
        v89 = *(int **)(v52 + 40);
        v90 = *v89;
        v91 = *(int *)((char *)v89 + 3);
        if (v90 != 1634100580 || v91 != 1953264993)
          goto LABEL_158;
        if (sub_22EA41C40((_QWORD *)a1, (uint64_t)v46))
          goto LABEL_151;
      }
      if (sub_22EA41EB0((_QWORD *)a1, 0, (uint64_t)v46, 1, v75))
        goto LABEL_151;
      v94 = (*(uint64_t (**)(_QWORD *))(*v46 + 32))(v46);
      *(_QWORD *)(v94 + 80) |= 0x1000000000uLL;
    }
LABEL_158:
    v95 = v368;
    v93 = v369;
    goto LABEL_159;
  }
  if (v83 <= 0xFFFFFFF9)
    v81 = *(_QWORD *)(v81 + 48);
  if ((*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 32))(v81) + 84) & 0x10) == 0 && !v75)
    goto LABEL_158;
  if ((*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 32))(v81) + 84) & 0x10) != 0
    && !v75
    && sub_22EFC0C9C(v81) != 4)
  {
    sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)v46 + 6), 0xF84u, 0, (uint64_t)&v402);
    LOBYTE(v398) = sub_22EFC0C9C(v81) != 1;
    sub_22E894E38((uint64_t)&v402, (unsigned __int8 *)&v398);
    v80 = (unsigned int *)&v402;
LABEL_131:
    sub_22E903BEC(v80);
LABEL_151:
    sub_22EFC77E8((uint64_t)v46, 1);
LABEL_152:
    v93 = v369;
    return v93 != 0;
  }
  if ((*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 32))(v81) + 84) & 0x10) == 0)
  {
    if (v75 == 4)
    {
      if (sub_22EFC9084(v81, 0))
      {
        sub_22EFC77E8((uint64_t)v46, 1);
        sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)v46 + 6), 0xF7Cu, 0, (uint64_t)&v402);
        v112 = v408;
        sub_22E903BEC((unsigned int *)&v402);
        v95 = v368;
        v93 = v369;
        if (!v112)
          goto LABEL_159;
        return v93 != 0;
      }
      v170 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 32))(v81);
      *(_QWORD *)(v170 + 80) |= 0x1000000000uLL;
    }
    else if (v75 == 1)
    {
      if ((*(_BYTE *)(v81 + 29) & 1) != 0)
      {
        sub_22EFC8E88(v81);
        v166 = *(uint64_t **)v165;
        v167 = *(unsigned int *)(v165 + 8);
        v168 = *(uint64_t **)v165;
        v95 = v368;
        v93 = v369;
        if ((_DWORD)v167)
        {
          v169 = 8 * v167;
          v168 = *(uint64_t **)v165;
          while (*(_WORD *)(*v168 + 32) != 327)
          {
            ++v168;
            v169 -= 8;
            if (!v169)
              goto LABEL_567;
          }
        }
        if (v168 == &v166[v167])
        {
LABEL_567:
          v111 = 0;
        }
        else
        {
          do
          {
            v233 = *v166++;
            v111 = v233;
          }
          while (*(_WORD *)(v233 + 32) != 327);
        }
      }
      else
      {
        v111 = 0;
        v95 = v368;
        v93 = v369;
      }
      sub_22E639F38(*(_DWORD **)(v52 + 40), *(unsigned int *)(v52 + 36), v385);
      v286 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v385[0] + 1) - *(_QWORD *)&v385[0]) >> 3));
      if (*((_QWORD *)&v385[0] + 1) == *(_QWORD *)&v385[0])
        v287 = 0;
      else
        v287 = v286;
      sub_22E63C10C(*(uint64_t *)&v385[0], *((const void ***)&v385[0] + 1), (uint64_t)v389, v287, 1);
      v288 = *(unsigned int *)(v52 + 36);
      if ((_DWORD)v288 == 7
        && ((v289 = *(int **)(v52 + 40), v290 = *v289, v291 = *(int *)((char *)v289 + 3), v290 == 1634100580)
          ? (v292 = v291 == 1953264993)
          : (v292 = 0),
            v292)
        || v111
        && (*(_DWORD *)(v111 + 36) != (_DWORD)v288
         || (_DWORD)v288 && memcmp(*(const void **)(v111 + 40), *(const void **)(v52 + 40), v288)))
      {
        if ((sub_22EA41EB0((_QWORD *)a1, v81, (uint64_t)v46, 1, 1u) & 1) != 0
          || (sub_22EA41C40((_QWORD *)a1, (uint64_t)v46) & 1) != 0)
        {
LABEL_591:
          sub_22EFC77E8((uint64_t)v46, 1);
          v389[0] = (void **)v385;
          v228 = v389;
LABEL_592:
          sub_22E3B3CC8(v228);
          return v93 != 0;
        }
        v293 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 32))(v81);
        if (v111
          || (*(_QWORD *)(v293 + 80) & 0x1000000000) != 0
          || *(_DWORD *)(v52 + 36) != 7
          || ((v294 = *(int **)(v52 + 40), v295 = *v294, v296 = *(int *)((char *)v294 + 3), v295 == 1634100580)
            ? (v297 = v296 == 1953264993)
            : (v297 = 0),
              !v297))
        {
          if (!sub_22EA41C40((_QWORD *)a1, v81))
          {
            v326 = v93;
            sub_22EA422EC((uint64_t)v384, *(_DWORD *)(v111 + 36), *(_DWORD **)(v111 + 40));
            if (sub_22F31E9F0((uint64_t)v384, (uint64_t)v385))
            {
              sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)v46 + 6), 0xF80u, 0, (uint64_t)&v398);
              sub_22E903BEC((unsigned int *)&v398);
              sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v81 + 24), 0x6Cu, 0, (uint64_t)&v390);
              v327 = (unsigned int *)&v390;
LABEL_634:
              sub_22E903BEC(v327);
              v328 = 1;
              sub_22EFC77E8((uint64_t)v46, 1);
            }
            else
            {
              v329 = 0;
              v330 = v81;
              do
              {
                if ((*(_BYTE *)(v330 + 29) & 1) == 0)
                  goto LABEL_645;
                sub_22EFC8E88(v330);
                v332 = *(uint64_t **)v331;
                v333 = *(unsigned int *)(v331 + 8);
                v334 = *(uint64_t **)v331;
                if ((_DWORD)v333)
                {
                  v335 = 8 * v333;
                  v334 = *(uint64_t **)v331;
                  while (*(_WORD *)(*v334 + 32) != 327)
                  {
                    ++v334;
                    v335 -= 8;
                    if (!v335)
                      goto LABEL_645;
                  }
                }
                if (v334 == &v332[v333])
                {
LABEL_645:
                  v336 = 0;
                }
                else
                {
                  do
                  {
                    v337 = *v332++;
                    v336 = v337;
                  }
                  while (*(_WORD *)(v337 + 32) != 327);
                }
                if ((*(_BYTE *)(v330 + 104) & 3) == 0)
                {
                  v339 = sub_22E3CD31C((uint64_t *)(v330 + 104), v330);
                  if (v339)
                  {
                    v340 = v339;
                    while (1)
                    {
                      v341 = *(_DWORD *)(v340 + 28);
                      v342 = v340;
                      if ((v341 & 0x7Eu) - 58 <= 0xFFFFFFF9)
                      {
                        if ((v341 & 0x7F) == 0x1D)
                          v342 = *(_QWORD *)(v340 + 48);
                        else
                          v342 = 0;
                      }
                      if (sub_22EFC0C9C(v342))
                        break;
                      v340 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v340 + 48))(v340);
                      if (!v340)
                        goto LABEL_647;
                    }
                    if (!v336
                      || ((*(unsigned __int16 *)(v336 + 32) | (*(unsigned __int8 *)(v336 + 34) << 16)) & 0x10000) != 0)
                    {
                      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v330 + 24), 0xF84u, 0, (uint64_t)v389);
                      v383[0] = 0;
                      sub_22E8900C4((uint64_t)v389, v383);
                      sub_22E903BEC((unsigned int *)v389);
                      sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)v46 + 6), 0x16B9u, 0, (uint64_t)v388);
                      v327 = v388;
                      goto LABEL_634;
                    }
                  }
                }
LABEL_647:
                if ((*(_BYTE *)(v330 + 104) & 3) != 0)
                {
                  if (v329)
                    break;
                  v329 = 1;
                }
                v338 = sub_22E3CD31C((uint64_t *)(v330 + 104), v330);
                if (v338 == v81)
                  break;
                v330 = v338;
              }
              while (v338);
              v343 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 32))(v81);
              *(_QWORD *)(v343 + 80) |= 0x1000000000uLL;
              v344 = (*(uint64_t (**)(_QWORD *))(*v46 + 32))(v46);
              *(_QWORD *)(v344 + 80) |= 0x1000000000uLL;
              v373 = 0;
              *(_DWORD *)v368 = 0;
              *(_DWORD *)(v368 + 16) = 0;
              v345 = *(_QWORD *)(v368 + 88);
              if (v345)
              {
                v346 = sub_22EC6CBD0(v345);
                MEMORY[0x2348A0E9C](v346, 0x10E0C409F09D3C3);
              }
              v326 = 0;
              v328 = 0;
              *(_BYTE *)(v368 + 165) = 0;
              *(_QWORD *)(v368 + 88) = 0;
              *(_QWORD *)(v368 + 96) = 0;
            }
            v389[0] = (void **)v384;
            sub_22E3B3CC8(v389);
            v389[0] = (void **)v385;
            sub_22E3B3CC8(v389);
            v95 = v368;
            v93 = v326;
            if ((v328 & 1) == 0)
              goto LABEL_159;
            return v93 != 0;
          }
          sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)v46 + 6), 0x16B9u, 0, (uint64_t)&v402);
          sub_22E903BEC((unsigned int *)&v402);
          goto LABEL_591;
        }
        v373 = v81;
        v324 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 32))(v81);
        *(_QWORD *)(v324 + 80) |= 0x1000000000uLL;
        v325 = (*(uint64_t (**)(_QWORD *))(*v46 + 32))(v46);
        *(_QWORD *)(v325 + 80) |= 0x1000000000uLL;
        v93 = 1;
      }
      v389[0] = (void **)v385;
      v232 = v389;
LABEL_631:
      sub_22E3B3CC8(v232);
      goto LABEL_159;
    }
  }
  v171 = sub_22EFC0C9C(v81);
  if (v75 && v171 != v75 && v171 && (v75 != 2 || v171 != 3) && (v75 != 3 || v171 != 2))
  {
    sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)v46 + 6), 0xF85u, 0, (uint64_t)&v402);
    sub_22E903BEC((unsigned int *)&v402);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v81 + 24), 0x6Cu, 0, (uint64_t)&v398);
    v80 = (unsigned int *)&v398;
    goto LABEL_131;
  }
  v356 = v81;
  memset(v386, 0, 74);
  if (v52)
  {
    sub_22E639F38(*(_DWORD **)(v52 + 40), *(unsigned int *)(v52 + 36), &v377);
    sub_22E63B344((void **)v386);
    v386[0] = v377;
    *(_QWORD *)&v386[1] = v378;
    v378 = 0;
    v377 = 0uLL;
    *(_OWORD *)((char *)&v386[1] + 8) = v379;
    *(_OWORD *)((char *)&v386[2] + 8) = v380;
    *(_OWORD *)((char *)&v386[3] + 8) = v381;
    WORD4(v386[4]) = v382;
    v387 = (void **)&v377;
    sub_22E3B3CC8(&v387);
    v172 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v386[0] + 1) - *(_QWORD *)&v386[0]) >> 3));
    if (*((_QWORD *)&v386[0] + 1) == *(_QWORD *)&v386[0])
      v173 = 0;
    else
      v173 = v172;
    sub_22E63C10C(*(uint64_t *)&v386[0], *((const void ***)&v386[0] + 1), (uint64_t)&v377, v173, 1);
  }
  v359 = (*(_WORD *)(*(_QWORD *)(a1 + 216) + 8) & 0x7Eu) - 34 <= 3 && (*((_WORD *)v46 + 15) & 0x180) == 0;
  v360 = sub_22EA2796C(v368, **(_QWORD **)(*(_QWORD *)(a1 + 88) + 2000), (uint64_t)v46);
  v175 = *(unsigned int *)(v368 + 16);
  if (!(_DWORD)v175)
  {
LABEL_419:
    if (v75 == 1 && (sub_22EA41C40((_QWORD *)a1, (uint64_t)v46) & 1) != 0
      || (v225 = (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v356 + 32))(v356) + 80) & 0x1000000000) == 0,
          (sub_22EA41EB0((_QWORD *)a1, v356, (uint64_t)v46, v225, v75) & 1) != 0))
    {
      sub_22EFC77E8((uint64_t)v46, 1);
      *(_QWORD *)&v377 = v386;
      sub_22E3B3CC8((void ***)&v377);
      goto LABEL_152;
    }
    if ((*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v356 + 32))(v356) + 84) & 0x10) != 0)
    {
      v229 = (*(uint64_t (**)(_QWORD *))(*v46 + 32))(v46);
      *(_QWORD *)(v229 + 80) |= 0x1000000000uLL;
      v373 = 0;
      v95 = v368;
      *(_DWORD *)v368 = 0;
      *(_DWORD *)(v368 + 16) = 0;
      v230 = *(_QWORD *)(v368 + 88);
      if (v230)
      {
        v231 = sub_22EC6CBD0(v230);
        MEMORY[0x2348A0E9C](v231, 0x10E0C409F09D3C3);
      }
      v93 = 0;
      *(_BYTE *)(v368 + 165) = 0;
      *(_QWORD *)(v368 + 88) = 0;
      *(_QWORD *)(v368 + 96) = 0;
    }
    else
    {
      v226 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v356 + 32))(v356);
      *(_QWORD *)(v226 + 80) |= 0x1000000000uLL;
      v227 = (*(uint64_t (**)(_QWORD *))(*v46 + 32))(v46);
      *(_QWORD *)(v227 + 80) |= 0x1000000000uLL;
      v373 = v356;
      v93 = 1;
      v95 = v368;
    }
    *(_QWORD *)&v377 = v386;
    v232 = (void ***)&v377;
    goto LABEL_631;
  }
  v176 = *(_QWORD **)(v368 + 8);
  v361 = &v176[v175];
  while (1)
  {
    v177 = *v176 & 0xFFFFFFFFFFFFFFFCLL;
    if (v177)
      v178 = (*(_DWORD *)(v177 + 28) & 0x7Eu) - 58 > 0xFFFFFFF9;
    else
      v178 = 0;
    v362 = *v176 & 0xFFFFFFFFFFFFFFFCLL;
    if (!v178)
    {
      if ((*(_DWORD *)(v177 + 28) & 0x7F) != 0x1D)
        goto LABEL_418;
      v177 = *(_QWORD *)(v362 + 48);
      if (!v177)
        goto LABEL_418;
    }
    if (v360)
    {
      v179 = v176;
      v180 = sub_22ECF9D50((_QWORD *)a1, (uint64_t)v46, v177, v359, 1, 1);
      v176 = v179;
      if ((v180 & 1) != 0)
        goto LABEL_418;
    }
    if (v75 - 2 >= 2)
      break;
    if ((*(_BYTE *)(v177 + 29) & 1) == 0)
      goto LABEL_387;
    v181 = v176;
    v174.n128_f64[0] = sub_22EFC8E88(v177);
    v176 = v181;
    v183 = *(uint64_t **)v182;
    v184 = *(unsigned int *)(v182 + 8);
    v185 = *(uint64_t **)v182;
    if ((_DWORD)v184)
    {
      v186 = 8 * v184;
      v185 = *(uint64_t **)v182;
      while (*(_WORD *)(*v185 + 32) != 128)
      {
        ++v185;
        v186 -= 8;
        if (!v186)
          goto LABEL_387;
      }
    }
    if (v185 == &v183[v184])
    {
LABEL_387:
      v198 = 0;
    }
    else
    {
      do
      {
        v199 = *v183++;
        v198 = v199;
      }
      while (*(_WORD *)(v199 + 32) != 128);
    }
    if ((*(_BYTE *)(v177 + 29) & 1) == 0)
      goto LABEL_397;
    v200 = v176;
    v174.n128_f64[0] = sub_22EFC8E88(v177);
    v176 = v200;
    v202 = *(uint64_t **)v201;
    v203 = *(unsigned int *)(v201 + 8);
    v204 = *(uint64_t **)v201;
    if ((_DWORD)v203)
    {
      v205 = 8 * v203;
      v204 = *(uint64_t **)v201;
      while (*(_WORD *)(*v204 + 32) != 127)
      {
        ++v204;
        v205 -= 8;
        if (!v205)
          goto LABEL_397;
      }
    }
    if (v204 == &v202[v203])
    {
LABEL_397:
      v206 = 0;
    }
    else
    {
      do
      {
        v207 = *v202++;
        v206 = v207;
      }
      while (*(_WORD *)(v207 + 32) != 127);
    }
    if (v75 == 3)
    {
      v208 = v176;
      v209 = sub_22E631558(v177);
      v176 = v208;
      if (v209)
      {
        v299 = *(unsigned int *)(v206 + 36);
        v93 = v369;
        if ((_DWORD)v299 != *(_DWORD *)(v59 + 36))
          goto LABEL_604;
        if ((_DWORD)v299)
        {
          v300 = *(_QWORD *)(v206 + 40);
          v301 = *(_QWORD *)(v59 + 40);
          v302 = 8 * v299;
          while (1)
          {
            v303 = *(unsigned int **)(*(_QWORD *)v300 + 16);
            v306 = *v303;
            v304 = v303 + 4;
            v305 = v306;
            v307 = *(int **)(*(_QWORD *)v301 + 16);
            v309 = *v307;
            v308 = v307 + 4;
            if (v305 != v309 || v305 && memcmp(v304, v308, v305))
              break;
            v300 += 8;
            v301 += 8;
            v302 -= 8;
            if (!v302)
              goto LABEL_602;
          }
LABEL_604:
          sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)v46 + 6), 0xC3Fu, 0, (uint64_t)v384);
          sub_22E903BEC(v384);
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v177 + 24), 0x6Cu, 0, (uint64_t)v383);
          sub_22E903BEC((unsigned int *)v383);
LABEL_626:
          sub_22EFC77E8((uint64_t)v46, 1);
          goto LABEL_427;
        }
LABEL_602:
        v310 = (*(uint64_t (**)(_QWORD *, __n128))(*v46 + 32))(v46, v174);
        *(_QWORD *)(v310 + 80) |= 0x1000000000uLL;
        v373 = v362;
        v95 = v368;
        goto LABEL_603;
      }
    }
    else if (v75 == 2 && v198)
    {
      v358 = v176;
      v353 = v177;
      v354 = *(void ****)(v198 + 40);
      v352 = *(unsigned int *)(v66 + 36);
      v355 = *(unsigned int *)(v198 + 36);
      if ((_DWORD)v355 == (_DWORD)v352)
      {
        if (!(_DWORD)v355)
          goto LABEL_602;
        v210 = *(_QWORD *)(v66 + 40);
        v211 = *(_QWORD *)(v198 + 40);
        v212 = 8 * v355;
        while (1)
        {
          v213 = *(unsigned int **)(*(_QWORD *)v211 + 16);
          v216 = *v213;
          v214 = v213 + 4;
          v215 = v216;
          v217 = *(int **)(*(_QWORD *)v210 + 16);
          v219 = *v217;
          v218 = v217 + 4;
          if (v215 != v219 || v215 && memcmp(v214, v218, v215))
            break;
          v211 += 8;
          v210 += 8;
          v212 -= 8;
          if (!v212)
            goto LABEL_602;
        }
      }
      v176 = v358;
      v220 = v354;
      if ((_DWORD)v355)
      {
        v221 = *(void ****)(v66 + 40);
        while (!(_DWORD)v352)
        {
LABEL_417:
          if (++v220 == &v354[v355])
            goto LABEL_418;
        }
        v222 = *v220;
        v223 = 8 * v352;
        v224 = v221;
        while (1)
        {
          v387 = *v224;
          if (v222 == v387)
            break;
          ++v224;
          v223 -= 8;
          if (!v223)
            goto LABEL_417;
        }
        sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)v46 + 6), 0xC40u, 0, (uint64_t)&v377);
        sub_22E8BAE44((uint64_t)&v377, (uint64_t *)&v387);
        sub_22E903BEC((unsigned int *)&v377);
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v353 + 24), 0x6Cu, 0, (uint64_t)v376);
        sub_22E903BEC(v376);
        sub_22EFC77E8((uint64_t)v46, 1);
LABEL_426:
        v93 = v369;
LABEL_427:
        *(_QWORD *)&v377 = v386;
        v228 = (void ***)&v377;
        goto LABEL_592;
      }
    }
LABEL_418:
    if (++v176 == v361)
      goto LABEL_419;
  }
  if (v75 == 1)
  {
    v357 = v176;
    v174.n128_f64[0] = sub_22EFC8E88(v177);
    v188 = *v187;
    v189 = *((unsigned int *)v187 + 2);
    if ((_DWORD)v189 && *(_WORD *)(*v188 + 32) != 327)
    {
      v190 = 8 * v189 - 8;
      v191 = *v187;
      do
      {
        v192 = v191[1];
        ++v191;
        v190 -= 8;
      }
      while (*(_WORD *)(v192 + 32) != 327);
    }
    do
    {
      v194 = *v188++;
      v193 = v194;
    }
    while (*(_WORD *)(v194 + 32) != 327);
    v195 = *(_DWORD **)(v193 + 40);
    v196 = *(_DWORD *)(v193 + 36);
    v197 = *(unsigned int *)(v52 + 36);
    if (v196 == (_DWORD)v197 && (!v196 || !memcmp(*(const void **)(v193 + 40), *(const void **)(v52 + 40), v197)))
      goto LABEL_602;
    sub_22EA422EC((uint64_t)&v377, v196, v195);
    if (sub_22F31E9F0((uint64_t)&v377, (uint64_t)v386))
    {
      sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)v46 + 6), 0xF80u, 0, (uint64_t)&v390);
      sub_22E903BEC((unsigned int *)&v390);
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v177 + 24), 0x6Cu, 0, (uint64_t)v389);
      sub_22E903BEC((unsigned int *)v389);
      sub_22EFC77E8((uint64_t)v46, 1);
      v387 = (void **)&v377;
      sub_22E3B3CC8(&v387);
      goto LABEL_426;
    }
    v387 = (void **)&v377;
    sub_22E3B3CC8(&v387);
    v176 = v357;
    goto LABEL_418;
  }
  if (v75 != 4)
    goto LABEL_418;
  if ((*(_BYTE *)(v177 + 29) & 1) != 0)
  {
    sub_22EFC8E88(v177);
    v312 = *(uint64_t **)v311;
    v313 = *(unsigned int *)(v311 + 8);
    v314 = *(uint64_t **)v311;
    v95 = v368;
    if ((_DWORD)v313)
    {
      v315 = 8 * v313;
      v314 = *(uint64_t **)v311;
      while (*(_WORD *)(*v314 + 32) != 328)
      {
        ++v314;
        v315 -= 8;
        if (!v315)
          goto LABEL_614;
      }
    }
    if (v314 == &v312[v313])
    {
LABEL_614:
      v298 = 0;
    }
    else
    {
      do
      {
        v316 = *v312++;
        v298 = v316;
      }
      while (*(_WORD *)(v316 + 32) != 328);
    }
  }
  else
  {
    v298 = 0;
    v95 = v368;
  }
  v373 = v177;
  v317 = (*(uint64_t (**)(_QWORD *))(*v46 + 32))(v46);
  *(_QWORD *)(v317 + 80) |= 0x1000000000uLL;
  if (v73 && v298)
  {
    v318 = *(unsigned int *)(v298 + 36);
    if ((_DWORD)v318 == *(_DWORD *)(v73 + 36))
    {
      if (!(_DWORD)v318)
        goto LABEL_603;
      v319 = *(_QWORD *)(v298 + 40);
      v320 = v319 + 16 * v318;
      v321 = *(_QWORD *)(v73 + 40);
      while (1)
      {
        v322 = *(_QWORD *)(v319 + 8);
        if (v322 != *(_QWORD *)(v321 + 8) || v322 && memcmp(*(const void **)v319, *(const void **)v321, v322))
          break;
        v319 += 16;
        v321 += 16;
        if (v319 == v320)
          goto LABEL_603;
      }
    }
    sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)v46 + 6), 0x12A7u, 0, (uint64_t)v388);
    sub_22E903BEC(v388);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v177 + 24), 0x6Cu, 0, (uint64_t)v385);
    sub_22E903BEC((unsigned int *)v385);
    v93 = 1;
    goto LABEL_626;
  }
LABEL_603:
  *(_QWORD *)&v377 = v386;
  sub_22E3B3CC8((void ***)&v377);
  v93 = 1;
LABEL_159:
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088) + 56) - 23) <= 1)
  {
    v96 = v374;
    v97 = *(_QWORD *)(v374[6] & 0xFFFFFFFFFFFFFFF0);
    if (v97)
      v98 = *(unsigned __int8 *)(v97 + 16) - 27 > 0xFFFFFFFD;
    else
      v98 = 0;
    if (!v98)
    {
      v97 = sub_22F10CF48(v97);
      v96 = v374;
    }
    if (sub_22E97DED0((_QWORD *)a1, *(_QWORD *)(v97 + 24), *((_DWORD *)v96 + 6)))
      sub_22EFC77E8((uint64_t)v374, 1);
  }
  if ((*((_DWORD *)v374 + 7) & 0x7Eu) - 54 >= 4)
    v99 = 0;
  else
    v99 = v374;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 4) == 0
    && v99
    && (*((_BYTE *)v99 + 83) & 0xC0) != 0
    && (*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v99 + 32))(v99) + 80) & 0xE000) != 0x4000
    && ((v99[5] & 7) != 6 || (*(_DWORD *)(v99[5] & 0xFFFFFFFFFFFFFFF8) - 1) >= 4)
    && (*((_DWORD *)v99 + 7) & 0x7F) != 0x37
    && (*((_DWORD *)v99 + 7) & 0x7F) != 0x39
    && (sub_22E46BB88((uint64_t)v99) & 1) == 0)
  {
    v100 = v373;
    if (!v373)
      goto LABEL_188;
    v101 = *(_DWORD *)(v373 + 28);
    v102 = v101 & 0x7E;
    if ((v102 - 58) > 0xFFFFFFF9)
    {
LABEL_184:
      if ((v102 - 54) > 3
        || (*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v100 + 32))(v100) + 80) & 0xE000) != 0x4000
        && ((*(_QWORD *)(v100 + 40) & 7) != 6
         || (*(_DWORD *)(*(_QWORD *)(v100 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) >= 4))
      {
        goto LABEL_188;
      }
    }
    else
    {
      if ((v101 & 0x7F) == 0x1D)
      {
        v100 = *(_QWORD *)(v373 + 48);
        if (v100)
        {
          v102 = *(_DWORD *)(v100 + 28) & 0x7E;
          goto LABEL_184;
        }
      }
LABEL_188:
      v103 = *(_QWORD *)(v99[6] & 0xFFFFFFFFFFFFFFF0);
      if (v103)
        v104 = *(_BYTE *)(v103 + 16) == 26;
      else
        v104 = 0;
      if (!v104)
        v103 = sub_22F10CF48(*(_QWORD *)(v99[6] & 0xFFFFFFFFFFFFFFF0));
      sub_22E4913B4(v103, (uint64_t)&v398);
      DWORD1(v398) |= 1u;
      v99[6] = sub_22EF63D8C(*(_QWORD *)(a1 + 88), *(_QWORD *)(v103 + 24), (uint64_t *)(v103 + 40), (unsigned __int16)(*(_QWORD *)(v103 + 16) >> 38), &v398, 0);
      if (*(_DWORD *)(a1 + 10680) <= *(_DWORD *)(a1 + 11956))
      {
        v105 = v99[7];
        v106 = (unint64_t *)(v105 & 0xFFFFFFFFFFFFFFF8);
        if ((v105 & 4) != 0)
          v106 = (unint64_t *)v106[4];
        v109 = *v106;
        v108 = (uint64_t)(v106 + 1);
        v107 = v109;
        if ((v109 & 0xF) == 0 && *(_BYTE *)(*(_QWORD *)(v107 & 0xFFFFFFFFFFFFFFF0) + 16) == 37)
          v107 = sub_22F1169C8(v107, v108);
        if ((v107 & 0xF) != 0)
        {
          v110 = 0;
        }
        else
        {
          v110 = 0;
          if (v107
            && *(unsigned __int8 *)(*(_QWORD *)(v107 & 0xFFFFFFFFFFFFFFF0) + 16) - 27 >= 0xFFFFFFFE)
          {
            v110 = sub_22F141A3C(*(unsigned int *)(v108 + 8), 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
          }
        }
        sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)v99 + 6), 0x18FDu, 0, (uint64_t)&v402);
        BYTE12(v391) = 0;
        *(_QWORD *)((char *)&v391 + 4) = 0;
        v390 = (void ***)(v110 | ((unint64_t)v110 << 32));
        LOBYTE(v391) = 0;
        v396 = 1536;
        v395 = 0;
        HIBYTE(__p) = 0;
        v393 = 0;
        v394 = 0;
        strcpy((char *)&__p, " const");
        v397 = 0;
        sub_22E890748((uint64_t)&v402, &v390);
        if (SHIBYTE(v396) < 0)
          operator delete(__p);
        sub_22E903BEC((unsigned int *)&v402);
      }
    }
  }
  if (!v93)
  {
    if (!(*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1 | ((v364 & 1) == 0)))
    {
      if ((*((_BYTE *)v374 + 29) & 1) == 0)
        goto LABEL_252;
      sub_22EFC8E88((uint64_t)v374);
      v115 = *((unsigned int *)v114 + 2);
      if ((_DWORD)v115)
      {
        v116 = 8 * v115;
        v117 = *v114;
        while (*(_WORD *)(*(_QWORD *)v117 + 32) != 492)
        {
          v117 += 8;
          v116 -= 8;
          if (!v116)
            goto LABEL_252;
        }
      }
      else
      {
        v117 = *v114;
      }
      if (v117 == *v114 + 8 * v115)
      {
LABEL_252:
        v132 = *(_QWORD **)(v95 + 8);
        v133 = *(unsigned int *)(v95 + 16);
        if ((_DWORD)v133)
        {
          v134 = 8 * v133;
          v135 = &v132[v133];
          while (1)
          {
            v136 = *v132 & 0xFFFFFFFFFFFFFFFCLL;
            v137 = v136 && (*(_DWORD *)(v136 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA;
            if (v137 && !sub_22EA0E084(v136))
              break;
            ++v132;
            v134 -= 8;
            if (!v134)
            {
              v132 = v135;
              break;
            }
          }
          v138 = v132;
          v132 = *(_QWORD **)(v95 + 8);
          LODWORD(v133) = *(_DWORD *)(v95 + 16);
        }
        else
        {
          v138 = *(_QWORD **)(v95 + 8);
        }
        if (v138 != &v132[v133])
        {
          sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)v374 + 6), 0xB15u, 0, (uint64_t)v372);
          sub_22E903BEC(v372);
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)((*v138 & 0xFFFFFFFFFFFFFFFCLL) + 24), 0x154Fu, 0, (uint64_t)&v402);
          LOBYTE(v398) = 0;
          sub_22E894E38((uint64_t)&v402, (unsigned __int8 *)&v398);
          sub_22E903BEC((unsigned int *)&v402);
          v154 = v374;
          v155 = *(_QWORD *)(a1 + 88);
          v402 = 0uLL;
          LODWORD(v404) = 0;
          v403 = 0;
          WORD2(v404) = 0;
          BYTE6(v404) = ((((BYTE6(v404) >> 7) & 1) << 23) | 0x780000u) >> 16;
          v156 = sub_22F39A9DC(v155, &v402);
          sub_22EFCA95C((uint64_t)v154, v156);
        }
      }
    }
LABEL_266:
    v139 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(v139 + 72))
    {
      sub_22EC985FC(a1, (uint64_t)v374);
      v139 = *(_QWORD *)(a1 + 72);
    }
    if ((*(_BYTE *)(v139 + 1) & 1) == 0)
      goto LABEL_549;
    v140 = v374;
    v141 = *((_DWORD *)v374 + 7) & 0x7F;
    if (v374 && v141 == 55)
    {
      sub_22EABF674(a1, (uint64_t)v374);
      goto LABEL_272;
    }
    if (!v374 || v141 != 57)
    {
      if (v374 && v141 == 53)
      {
        v147 = v374[18];
        v148 = (_QWORD *)(v147 & 0xFFFFFFFFFFFFFFF8);
        if ((v147 & 6) == 0 && v148)
        {
          sub_22F345C28((unsigned int *)a1, (uint64_t)v148);
          v147 = v140[18];
          v148 = (_QWORD *)(v147 & 0xFFFFFFFFFFFFFFF8);
        }
        v149 = v147 & 6;
        if (v149 == 4 && v148)
        {
          v148 += 2;
        }
        else if (v149 != 2 || !v148)
        {
          goto LABEL_272;
        }
        if ((*v148 & 6) == 2)
        {
          v152 = v140[7];
          if ((v152 & 4) != 0 && (v323 = v152 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v323 + 16)))
            v153 = **(int ***)(v323 + 24);
          else
            v153 = (int *)(v140 + 8);
          sub_22E8FCA40((_QWORD *)a1, *v153, 0xC7Bu, 0, (uint64_t)&v402);
          LODWORD(v398) = 1;
          sub_22E8900C4((uint64_t)&v402, (int *)&v398);
          sub_22E903BEC((unsigned int *)&v402);
        }
      }
LABEL_272:
      v142 = (void **)v374;
      if (!v374 || (*((_DWORD *)v374 + 7) & 0x7Eu) - 58 < 0xFFFFFFFC)
        goto LABEL_467;
      v143 = v374[18] & 6;
      v144 = v374[18] & 0xFFFFFFFFFFFFFFF8;
      if (v143 == 4 && v144)
      {
        if (*(_QWORD *)(v144 + 16) >= 8uLL)
          goto LABEL_458;
      }
      else if (!v143 && v144)
      {
        goto LABEL_458;
      }
      if ((void **)(*(uint64_t (**)(_QWORD *))(*v374 + 32))(v374) == v142)
      {
        v150 = (_WORD)v142[10] & 0x7F;
        v151 = 0x1FFFFFFFFFFFFFFBLL;
        if (v150 > 0x46)
        {
          switch(v150)
          {
            case 'S':
              goto LABEL_443;
            case 'G':
              v151 = 0x1FFFFFFFFFFFFFF9;
              goto LABEL_443;
            case 'Q':
              goto LABEL_443;
          }
        }
        else
        {
          if (v150 <= 0x18)
          {
            if (v150 == 16)
              goto LABEL_300;
            if (((1 << v150) & 0x1066) != 0)
              goto LABEL_443;
            if (v150 == 24)
            {
LABEL_300:
              v151 = 0x1FFFFFFFFFFFFFFALL;
LABEL_443:
              v234 = (unint64_t)v142[v151 + 11];
              v235 = (_QWORD *)(v234 & 0xFFFFFFFFFFFFFFF8);
              if ((v234 & 4) != 0)
                v235 = (_QWORD *)*v235;
              v389[0] = v142;
              *(_QWORD *)&v398 = v401;
              *((_QWORD *)&v398 + 1) = v401;
              v399 = 4;
              v400 = 0;
              *(_QWORD *)&v402 = 0;
              *((_QWORD *)&v402 + 1) = (char *)&v402 + 8;
              v403 = (char *)&v402 + 8;
              v404 = 0;
              v405 = 1;
              for (i = 40; i != 168; i += 16)
                *(_QWORD *)((char *)&v402 + i) = 0;
              v409 = v413;
              v410 = v413;
              if (v235)
                v237 = (unint64_t)(v235 - 8);
              else
                v237 = 0;
              v411 = 4;
              v412 = 0;
              v413[4] = 0;
              v414 = v416;
              v415 = 0x400000000;
              v416[24] = 0;
              v417 = 0;
              v418 = 1;
              v419 = 0;
              *((_QWORD *)&v391 + 1) = &v398;
              v390 = v389;
              *(_QWORD *)&v391 = a1;
              sub_22EFB3774(v237, (unsigned int (*)(uint64_t, unint64_t, uint64_t))sub_22EA4656C, (uint64_t)&v390, (uint64_t)&v402, 0);
              if (v414 != v416)
                free(v414);
              if (v410 != v409)
                free(v410);
              if ((v405 & 1) == 0)
                llvm::deallocate_buffer(v406, (void *)(16 * v407));
              sub_22E687D9C((uint64_t *)&v402 + 1);
              if (*((_QWORD *)&v398 + 1) != (_QWORD)v398)
                free(*((void **)&v398 + 1));
              goto LABEL_458;
            }
          }
          if (v150 == 70)
          {
LABEL_438:
            v151 = 0x1FFFFFFFFFFFFFF8;
            goto LABEL_443;
          }
        }
        if (v150 - 52 < 6)
        {
          v151 = 0x1FFFFFFFFFFFFFF7;
          goto LABEL_443;
        }
        if (v150 - 33 < 5)
          goto LABEL_438;
        goto LABEL_300;
      }
LABEL_458:
      v238 = (*((uint64_t (**)(void **))*v142 + 4))(v142);
      if ((*(_BYTE *)(v238 + 82) & 0xC) != 0 || sub_22EFD7260(v238))
      {
        v239 = v374[7];
        if ((v239 & 4) != 0)
        {
          v240 = *(_QWORD *)((v239 & 0xFFFFFFFFFFFFFFF8) + 40);
          if (v240)
          {
            sub_22F0D5A50(v240);
            sub_22E8FCA40((_QWORD *)a1, v241, 0xC18u, 0, (uint64_t)v370);
            sub_22E903BEC(v370);
          }
        }
      }
      if ((*(_QWORD *)((*((uint64_t (**)(void **))*v142 + 4))(v142) + 80) & 0xE000) == 0x4000
        || ((unint64_t)v142[5] & 7) == 6
        && (*(_DWORD *)((unint64_t)v142[5] & 0xFFFFFFFFFFFFFFF8) - 1) <= 3)
      {
        sub_22EAD25B4(a1, (uint64_t)v142);
      }
LABEL_467:
      v242 = v374;
      if (v374 && (*((_DWORD *)v374 + 7) & 0x7F) == 0x38)
      {
        sub_22EAC0D08((_QWORD *)a1, (uint64_t)v374);
        v242 = v374;
      }
      v243 = v242[5];
      if ((v243 & 7) == 6 && *(_DWORD *)(v243 & 0xFFFFFFFFFFFFFFF8))
      {
        v244 = sub_22EACCED0(a1, (uint64_t)v242);
        v242 = v374;
        if ((v244 & 1) != 0)
        {
          v245 = v374;
LABEL_482:
          sub_22EFC77E8((uint64_t)v245, 1);
          return v93 != 0;
        }
        v243 = v374[5];
      }
      if ((~(_BYTE)v243 & 7) == 0)
      {
        v246 = v243 & 0xFFFFFFFFFFFFFFF8;
        v247 = *(_DWORD *)v246;
        if (*(_DWORD *)v246 >= 3u)
          v247 = 3;
        if (v247 == 1 && *(_QWORD *)(v246 + 16) && sub_22EACD8AC(a1, (uint64_t)v242))
        {
LABEL_481:
          v245 = v374;
          goto LABEL_482;
        }
      }
      if ((*(_WORD *)(*(_QWORD *)(a1 + 216) + 8) & 0x7Eu) - 34 >= 4)
        sub_22EAA82D0((_QWORD *)a1, v374);
      if (*(_DWORD *)(v95 + 16) || !sub_22EFB9440((uint64_t)v374) || (sub_22EFC18B0((uint64_t)v374) & 1) != 0)
        goto LABEL_534;
      v248 = *(_QWORD *)(v374[6] & 0xFFFFFFFFFFFFFFF0);
      if (!v248 || *(unsigned __int8 *)(v248 + 16) - 27 <= 0xFFFFFFFD)
        v248 = sub_22F10CF48(v248);
      *(_QWORD *)&v398 = *(_QWORD *)(v248 + 24);
      if (!sub_22F1110EC(*(_QWORD *)(v398 & 0xFFFFFFFFFFFFFFF0), 0)
        || (v249 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v398 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
        && (*(_DWORD *)(v249 + 16) & 0xFF800FF) == 0x528000B)
      {
        if ((sub_22F111438(&v398, *(_QWORD *)(a1 + 88)) & 1) != 0)
          goto LABEL_534;
        v250 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v398 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v251 = *(_DWORD *)(v250 + 16);
        v252 = v251 & 0xFF800FF;
        v253 = v250 && v252 == 86507531;
        v254 = v253;
        v255 = *(_DWORD *)(v250 + 16);
        if (v255 == 32)
          goto LABEL_534;
        if (v254)
          goto LABEL_534;
        v256 = v251 & 0xFF000FF;
        if (v250)
        {
          if (v256 == 116391947)
            goto LABEL_534;
        }
        v257 = (int8x16_t)vdupq_n_s32(v251);
        v258 = (int32x4_t)vandq_s8(v257, (int8x16_t)vdupq_n_s32(0xFC000FFu));
        v259 = v251 & 0xFE000FF;
        v260 = (v251 & 0xFE000FF) == 16777227;
        if (v250)
        {
          v261 = (uint16x4_t)vmovn_s32(vceqq_s32(v258, (int32x4_t)xmmword_22F45AEA0));
          v261.i16[0] = vmaxv_u16(v261);
          if (((v261.i32[0] | v260) & 1) != 0)
            goto LABEL_534;
        }
        v262 = v256 == 117440523 || v252 == 118489099;
        v263 = !v262 || v250 == 0;
        v264 = !v263;
        if (v255 == 38 || v264)
          goto LABEL_534;
        v265 = v258.i32[0] == 20971531 || v259 == 18874379;
        v266 = v265;
        if (v250 && v266)
          goto LABEL_534;
        if (v250)
        {
          if (v255 == 11)
          {
            v267 = (int32x4_t)vandq_s8(v257, (int8x16_t)xmmword_22F45ABC0);
            v268 = v267;
            v268.i32[1] = v267.i32[0];
            v268.i32[2] = v267.i32[0];
            if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(vzip1q_s32(v267, (int32x4_t)vextq_s8((int8x16_t)v267, (int8x16_t)v267, 4uLL)), (int32x4_t)xmmword_22F45ABD0), (int16x8_t)vceqq_s32(v268, (int32x4_t)xmmword_22F45ABE0)))) & 1) != 0)goto LABEL_534;
            v269 = vceq_s32(vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v267, (int8x16_t)v267, 8uLL)), (int32x2_t)0x720000008000000);
            if ((v269.i8[4] & 1) != 0 || (v269.i8[0] & 1) != 0)
              goto LABEL_534;
          }
        }
        v270 = *((_DWORD *)v374 + 6);
        v271 = (_QWORD *)a1;
        v272 = 6964;
      }
      else
      {
        v270 = *((_DWORD *)v374 + 6);
        v271 = (_QWORD *)a1;
        v272 = 6965;
      }
      sub_22E8FCA40(v271, v270, v272, 0, (uint64_t)&v402);
      v273 = sub_22E890024((uint64_t)&v402, (uint64_t *)&v374);
      sub_22E8901B8(v273, (uint64_t *)&v398);
      sub_22E903BEC((unsigned int *)&v402);
LABEL_534:
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 8) == 0
        && ((v374[18] & 6) != 4 || (v274 = v374[18] & 0xFFFFFFFFFFFFFFF8) == 0 || *(_QWORD *)(v274 + 16) <= 7uLL))
      {
        v275 = *(_QWORD *)(v374[6] & 0xFFFFFFFFFFFFFFF0);
        if (!v275 || *(_BYTE *)(v275 + 16) != 26)
          v275 = sub_22F10CF48(v275);
        v276 = sub_22EA27A8C(*(_QWORD *)(v275 + 24));
        if ((unsigned __int16)(*(_QWORD *)(v275 + 16) >> 38))
        {
          v277 = (uint64_t *)(v275 + 40);
          v278 = 8 * (unsigned __int16)(*(_QWORD *)(v275 + 16) >> 38);
          do
          {
            v279 = *v277++;
            v276 |= sub_22EA27A8C(v279);
            v278 -= 8;
          }
          while (v278);
        }
        if ((v276 & 1) != 0)
        {
          sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)v374 + 6), 0x190Eu, 0, (uint64_t)&v402);
          sub_22E890024((uint64_t)&v402, (uint64_t *)&v374);
          sub_22E903BEC((unsigned int *)&v402);
        }
      }
      v139 = *(_QWORD *)(a1 + 72);
      if (!v93 && (*(_BYTE *)(v139 + 68) & 0x20) != 0)
      {
        sub_22E9FFBC0((_QWORD *)a1, (uint64_t)v374, v95);
        v139 = *(_QWORD *)(a1 + 72);
      }
LABEL_549:
      if ((*(_BYTE *)(v139 + 104) & 0x20) != 0)
      {
        v280 = *(_QWORD *)(v374[6] & 0xFFFFFFFFFFFFFFF0);
        if (v280)
          v281 = *(unsigned __int8 *)(v280 + 16) - 27 > 0xFFFFFFFD;
        else
          v281 = 0;
        if (!v281)
          v280 = sub_22F10CF48(v280);
        if (sub_22F10C618(*(_QWORD *)(*(_QWORD *)(v280 + 24) & 0xFFFFFFFFFFFFFFF0)))
        {
          v283 = sub_22F3AC46C((unint64_t)v374);
          if (!HIDWORD(v283) || !(_DWORD)v283)
            LODWORD(v283) = *((_DWORD *)v374 + 6);
          sub_22E8FCA40((_QWORD *)a1, v283, 0xF19u, 0, (uint64_t)&v402);
          v284 = *(_QWORD *)(v374[6] & 0xFFFFFFFFFFFFFFF0);
          if (v284)
            v285 = *(unsigned __int8 *)(v284 + 16) - 27 > 0xFFFFFFFD;
          else
            v285 = 0;
          if (!v285)
            v284 = sub_22F10CF48(v284);
          *(_QWORD *)&v398 = *(_QWORD *)(v284 + 24);
          sub_22E8901B8((uint64_t)&v402, (uint64_t *)&v398);
          sub_22E903BEC((unsigned int *)&v402);
        }
      }
      return v93 != 0;
    }
    v145 = v374[10] & 0x7F;
    v146 = -40;
    if (v145 > 0x46)
    {
      if (v145 == 83)
        goto LABEL_318;
      if (v145 == 71)
      {
        v146 = -56;
        goto LABEL_318;
      }
      if (v145 != 81)
      {
LABEL_313:
        v157 = v145 - 52;
        v137 = v145 - 33 >= 5;
        v158 = -48;
        if (!v137)
          v158 = -64;
        if (v157 >= 6)
          v146 = v158;
        else
          v146 = -72;
      }
    }
    else
    {
      if (v145 > 0x18)
        goto LABEL_312;
      if (v145 == 16)
      {
LABEL_283:
        v146 = -48;
        goto LABEL_318;
      }
      if (((1 << v145) & 0x1066) == 0)
      {
        if (v145 == 24)
          goto LABEL_283;
LABEL_312:
        if (v145 == 70)
        {
          v146 = -64;
          goto LABEL_318;
        }
        goto LABEL_313;
      }
    }
LABEL_318:
    v159 = *(_QWORD *)((char *)v374 + v146 + 88);
    v160 = (_QWORD *)(v159 & 0xFFFFFFFFFFFFFFF8);
    if ((v159 & 4) != 0)
      v160 = (_QWORD *)*v160;
    if (v160)
      v161 = (unint64_t)(v160 - 8);
    else
      v161 = 0;
    v162 = *(_QWORD *)(v161 + 48);
    if (v162)
      v163 = v162 & 0xFFFFFFFFFFFFFFF0;
    else
      v163 = sub_22EF6462C(*(_QWORD *)(a1 + 88), v161);
    if ((*(_BYTE *)(*(_QWORD *)(v163 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
    {
      v164 = sub_22EFC6B40((_QWORD *)(*(_QWORD *)(a1 + 88) + 15224), *(_QWORD *)((v163 & 0xFFFFFFFFFFFFFFF0) + 8) | v163 & 7);
      if (v374[5] != v164)
      {
        sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)v374 + 6), 0xCB5u, 0, (uint64_t)v371);
        sub_22E903BEC(v371);
        goto LABEL_481;
      }
    }
    goto LABEL_272;
  }
  if (!sub_22EA0AC14((_QWORD *)a1, (uint64_t)v374, &v373, v365, v367, a6))
  {
    *(_DWORD *)v95 = 0;
    *(_DWORD *)(v95 + 16) = 0;
    v118 = *(_QWORD *)(v95 + 88);
    if (v118)
    {
      v119 = sub_22EC6CBD0(v118);
      MEMORY[0x2348A0E9C](v119, 0x10E0C409F09D3C3);
      v120 = *(_DWORD *)(v95 + 16);
    }
    else
    {
      v120 = 0;
    }
    *(_BYTE *)(v95 + 165) = 0;
    *(_QWORD *)(v95 + 88) = 0;
    *(_QWORD *)(v95 + 96) = 0;
    v121 = v373;
    v122 = *(unsigned int *)(v373 + 28);
    if (v120 >= *(_DWORD *)(v95 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v120 = *(_DWORD *)(v95 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(v95 + 8) + 8 * v120) = (v122 >> 13) & 3 | v121;
    ++*(_DWORD *)(v95 + 16);
    *(_DWORD *)v95 = 2;
    v123 = v373;
    if (v373 && (*(_DWORD *)(v373 + 28) & 0x7F) == 0x1D)
    {
      v124 = *(_QWORD **)(v373 + 48);
      v125 = v374[18];
      if ((v125 & 6) != 0)
        v126 = 0;
      else
        v126 = v125 & 0xFFFFFFFFFFFFFFF8;
      sub_22EFE9C40(v126, v373);
      sub_22EFC0DC4(v374, (uint64_t)v124);
      if (sub_22E8BB0E8((uint64_t)v374))
      {
        *((_DWORD *)v374 + 7) = *((_DWORD *)v374 + 7) & 0xFFFF9FFF | (((*(_DWORD *)(v123 + 28) >> 13) & 3) << 13);
        *(_DWORD *)(v126 + 28) = *(_DWORD *)(v126 + 28) & 0xFFFF9FFF | (((*(_DWORD *)(v123 + 28) >> 13) & 3) << 13);
      }
      if (v363)
      {
        if (*(_QWORD *)sub_22EFE9368(v126) >= 8uLL)
        {
          v127 = (_QWORD *)sub_22EFE9368(v126);
          *v127 |= 4uLL;
          if ((*(_BYTE *)((*(uint64_t (**)(_QWORD *))(*v124 + 32))(v124) + 82) & 0x40) != 0)
            v124[10] &= ~0x400000uLL;
        }
      }
    }
    else
    {
      v128 = v374;
      v129 = v374[2];
      v130 = v129 & 0xFFFFFFFFFFFFFFF8;
      if ((v129 & 4) != 0)
        v130 = *(_QWORD *)(v130 + 8);
      if (!sub_22EFC7ADC(v130))
        goto LABEL_248;
      if ((*((_DWORD *)v128 + 7) & 0x1800000) == 0)
        goto LABEL_690;
      v347 = v128[2];
      v348 = v347 & 0xFFFFFFFFFFFFFFF8;
      if ((v347 & 4) != 0)
        v348 = *(_QWORD *)v348;
      v349 = *(_WORD *)(v348 + 8) & 0x7F;
      v95 = v368;
      if (v349 != 16 && v349 != 83)
      {
LABEL_690:
        v350 = (*((_DWORD *)v128 + 7) & 0x7Fu) - 48 >= 0x1B ? 0 : (uint64_t)v128;
        v351 = (*(_DWORD *)(v123 + 28) & 0x7Fu) - 48 >= 0x1B ? 0 : v123;
        if (!v350 || !v351 || sub_22F31D5A4(v350, v351, *(_QWORD *)(v350 + 48), *(_QWORD *)(v351 + 48)))
        {
LABEL_248:
          v131 = v373;
          sub_22EFC0DC4(v374, v373);
          if (sub_22E8BB0E8((uint64_t)v374))
            *((_DWORD *)v374 + 7) = *((_DWORD *)v374 + 7) & 0xFFFF9FFF | (((*(_DWORD *)(v131 + 28) >> 13) & 3) << 13);
        }
      }
    }
    goto LABEL_266;
  }
  v113 = 1;
  sub_22EFC77E8((uint64_t)v374, 1);
  return v113;
}

uint64_t sub_22EA25B3C(_QWORD *a1)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  while (1)
  {
    v1 = *(_QWORD *)(*a1 & 0xFFFFFFFFFFFFFFF0);
    if (v1)
      v2 = (*(_DWORD *)(v1 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
    else
      v2 = 0;
    if (v2)
    {
      v3 = v1;
      goto LABEL_9;
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
      break;
    v5 = v1;
    v3 = sub_22F10CF48(v1);
    v1 = v5;
    if (!v3)
      break;
LABEL_9:
    a1 = (_QWORD *)(v3 + 32);
  }
  result = sub_22F10C2A4(v1);
  if (result)
  {
    if ((*(_DWORD *)(result + 28) & 0x7Eu) - 34 > 3)
      return 0;
    else
      return (*(unsigned __int8 *)(result + 76) >> 1) & 1;
  }
  return result;
}

uint64_t sub_22EA25BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, uint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  char *v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  int *v50;
  char v51;
  int v52;
  int v53;
  uint64_t v54;
  int *v55;
  char v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  BOOL v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t *v77;
  char *i;
  uint64_t v79;
  unsigned int v80;
  char v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  const void *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  _BYTE *v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _BOOL8 v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int16 v118;
  char v119;
  int v120;
  unsigned int v121;
  _BYTE v123[17];
  void **v124;
  char v125;
  uint64_t v126;
  char v127;
  void *__p;
  __int128 v129;
  char v130;
  uint64_t v131;
  unsigned int v132;
  unsigned __int8 v133;
  uint64_t (**v134)();
  int v135;
  char v136;
  uint64_t v137;
  _BYTE v138[11];
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  BOOL v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  __int128 v148;
  void *v149;
  uint64_t v150;
  _BYTE v151[22];
  __int128 v152;
  uint64_t v153;
  void **v154;
  void *v155;
  uint64_t v156;
  _BYTE v157[64];
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  int v163;
  _QWORD v164[2];
  unsigned int v165;
  int v166;
  __int16 v167;
  char v168;
  int v169;
  __int128 v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  _BYTE v174[22];
  __int128 v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  _QWORD v179[5];

  v179[2] = *MEMORY[0x24BDAC8D0];
  v11 = *(_QWORD *)(a3 + 40);
  v147 = v11;
  v12 = *(_QWORD *)(a3 + 16);
  v13 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 4) != 0)
    v13 = (_QWORD *)*v13;
  v146 = v13;
  v143 = &v145;
  v144 = 0x100000000;
  v176 = 0;
  v177 = (char *)v179;
  v178 = 0x100000000;
  v170 = 0uLL;
  v171 = &v173;
  v172 = 0x100000000;
  *(_QWORD *)v174 = 0;
  *(_QWORD *)&v174[8] = 0;
  *(_QWORD *)&v174[14] = 0;
  v175 = 0uLL;
  v142 = (*(_WORD *)(a4[1] + 1088) & 0xC) != 0;
  if ((a5 & 1) != 0)
  {
    v121 = 4008;
    v14 = 10;
  }
  else
  {
    v14 = 0;
    if ((*(_WORD *)(a3 + 30) & 0x180) != 0)
      v15 = 4612;
    else
      v15 = 3765;
    v121 = v15;
  }
  v16 = *(_DWORD *)(a3 + 24);
  v154 = 0;
  v155 = v157;
  v156 = 0x800000000;
  v158 = 0;
  v159 = 0;
  v160 = 0;
  v161 = (_QWORD *)a1;
  v162 = v11;
  v163 = v16;
  sub_22EFC6D6C((uint64_t)v164, v11);
  v164[1] = 0;
  v165 = v14;
  v166 = 0;
  v167 = 1;
  v168 = 1;
  v169 = 0;
  sub_22EC56024((uint64_t)&v154);
  sub_22EFC77E8(a3, 1);
  if (a5)
    sub_22EC63520(a1, &v154, a6, 0, 0);
  else
    sub_22EC611AC(a1, &v154, v146, 0);
  v17 = *(_QWORD *)(a1 + 88);
  if ((*(_DWORD *)(a3 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
  {
    v18 = 0;
    goto LABEL_34;
  }
  v19 = *(_WORD *)(a3 + 80) & 0x7F;
  v20 = -40;
  if (v19 > 0x46)
  {
    switch(v19)
    {
      case 'S':
        goto LABEL_29;
      case 'G':
        v20 = -56;
        goto LABEL_29;
      case 'Q':
        goto LABEL_29;
    }
    goto LABEL_25;
  }
  if (v19 > 0x18)
    goto LABEL_24;
  if (v19 != 16)
  {
    if (((1 << v19) & 0x1066) != 0)
      goto LABEL_29;
    if (v19 != 24)
    {
LABEL_24:
      if (v19 == 70)
      {
LABEL_27:
        v20 = -64;
        goto LABEL_29;
      }
LABEL_25:
      if (v19 - 52 < 6)
      {
        v20 = -72;
        goto LABEL_29;
      }
      if (v19 - 33 < 5)
        goto LABEL_27;
    }
  }
  v20 = -48;
LABEL_29:
  v21 = *(_QWORD *)(a3 + 72 + v20 + 16);
  v22 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
  if ((v21 & 4) != 0)
    v22 = (_QWORD *)*v22;
  if (v22)
    v18 = v22 - 8;
  else
    v18 = 0;
LABEL_34:
  v23 = 0;
  v136 = 1;
  v135 = 16843009;
  memset(v138, 0, sizeof(v138));
  v137 = 0;
  v134 = &off_24FAB78D0;
  v139 = v17;
  v140 = a3;
  if (v18)
    v23 = (*(uint64_t (**)(_QWORD *))(*v18 + 32))(v18);
  v141 = v23;
  if ((_DWORD)v156)
  {
    v63 = v155;
    v64 = 8 * v156;
    do
    {
      v65 = *v63 & 0xFFFFFFFFFFFFFFFCLL;
      if (v65)
        v66 = (*(_DWORD *)(v65 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA;
      else
        v66 = 0;
      if (v66 && sub_22EA40B08(*v63 & 0xFFFFFFFFFFFFFFFCLL, a3, (uint64_t)&v143))
      {
        if ((_DWORD)v144)
          v67 = *(_DWORD *)v143 + 1;
        else
          v67 = 0;
        v68 = v178;
        if (v178 >= (unint64_t)HIDWORD(v178))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v68 = v178;
        }
        v69 = (unint64_t *)&v177[16 * v68];
        *v69 = v65;
        v69[1] = v67;
        LODWORD(v178) = v178 + 1;
      }
      ++v63;
      v64 -= 8;
    }
    while (v64);
  }
  else
  {
    if (a5)
      v24 = 0;
    else
      v24 = (uint64_t)v146;
    sub_22EC6AB20(a1, &v162, v165, a6, a4[1] + 8, (uint64_t)&v134, 1, v24, (uint64_t)&v148, 0, 0, 1u);
    v170 = v148;
    sub_22F24C77C((uint64_t)&v171, (uint64_t)&v149);
    *(_OWORD *)v174 = *(_OWORD *)v151;
    *(_QWORD *)&v174[14] = *(_QWORD *)&v151[14];
    sub_22EA44D30((void **)&v175);
    v175 = v152;
    v176 = v153;
    v153 = 0;
    v152 = 0uLL;
    v25 = v170;
    v124 = (void **)&v152;
    sub_22E8D19C8(&v124);
    if (v149 != &v150)
      free(v149);
    if (v25)
    {
      v70 = a4[1];
      v71 = v170;
      v72 = v170 & 0xFFFFFFFFFFFFFFF8;
      if ((v170 & 7) != 0)
        v72 = 0;
      v73 = *(_DWORD *)(v70 + 64);
      *(_DWORD *)(v70 + 40) = 0;
      *(_QWORD *)(v70 + 48) = v72;
      *(_DWORD *)(v70 + 68) = v73;
      *(_DWORD *)a2 = 0;
      *(_DWORD *)(a2 + 16) = 0;
      v74 = *(_QWORD *)(a2 + 88);
      if (v74)
      {
        v75 = sub_22EC6CBD0(v74);
        MEMORY[0x2348A0E9C](v75, 0x10E0C409F09D3C3);
        v71 = v170;
      }
      v76 = (char *)(a1 + 10664);
      *(_BYTE *)(a2 + 165) = 0;
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(a2 + 120) = v71;
      if (!(_DWORD)v172 || *v171)
        v77 = v171;
      else
        v77 = &v171[v172];
      for (i = (char *)&v171[v172]; v77 != (uint64_t *)i; ++v77)
      {
        v107 = *v77;
        if (*v77)
          v108 = (*(_DWORD *)(*v77 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA;
        else
          v108 = 0;
        if (v108
          && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v107 + 72))(*v77) & 1) == 0
          && sub_22EA40B08(v107, a3, (uint64_t)&v143))
        {
          v109 = *(unsigned int *)(v107 + 28);
          v110 = *(unsigned int *)(a2 + 16);
          if (v110 >= *(unsigned int *)(a2 + 20))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v110 = *(unsigned int *)(a2 + 16);
          }
          *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v110) = (v109 >> 13) & 3 | v107;
          ++*(_DWORD *)(a2 + 16);
          *(_DWORD *)a2 = 2;
        }
      }
      v79 = a4[1];
      v118 = *(_WORD *)(v79 + 1088);
      v80 = *(_DWORD *)(a1 + 8456);
      v81 = *(_BYTE *)(a1 + 11952);
      v119 = *v76;
      v120 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 180);
      sub_22EE03478(a1);
      if (!v82)
        *(_BYTE *)(a1 + 11952) = 1;
      *v76 = 0;
      v83 = *a4;
      v84 = *(_QWORD *)(sub_22F2E6D78((uint64_t)&v170) + 16);
      v85 = (_QWORD *)(v84 & 0xFFFFFFFFFFFFFFF8);
      if ((v84 & 4) != 0)
        v85 = (_QWORD *)*v85;
      v86 = *(_QWORD *)(a3 + 56);
      v87 = v86 & 0xFFFFFFFFFFFFFFF8;
      if ((v86 & 4) != 0)
        v87 = *(_QWORD *)(v87 + 32);
      v88 = sub_22EA147E8(a1, v83, v79, (int)v85, v87, a2, (void *)a4[2], a4[3], (uint64_t)(a4 + 4));
      v61 = v88;
      if (*(_DWORD *)(a1 + 8456) <= v80)
        v89 = (const void *)v88;
      else
        v89 = 0;
      *(_DWORD *)(a1 + 8456) = v80;
      *(_BYTE *)(a1 + 11952) = v81;
      *v76 = v119;
      v90 = *(_QWORD *)(a1 + 104);
      if (*(_DWORD *)(v90 + 180) == 5)
        *(_BYTE *)(v90 + 170) = 1;
      if (v120)
        v91 = 3;
      else
        v91 = 0;
      *(_DWORD *)(v90 + 180) = v91;
      if (v89)
      {
        v92 = (*(uint64_t (**)(const void *))(*(_QWORD *)v89 + 32))(v89);
        v93 = *(unsigned int *)(a2 + 16);
        if ((_DWORD)v93)
        {
          v94 = v92;
          v95 = *(_QWORD **)(a2 + 8);
          v96 = 8 * v93;
          do
          {
            if ((*(uint64_t (**)(unint64_t))(*(_QWORD *)(*v95 & 0xFFFFFFFFFFFFFFFCLL) + 32))(*v95 & 0xFFFFFFFFFFFFFFFCLL) == v94)
            {
              v97 = *v95 & 0xFFFFFFFFFFFFFFFCLL;
              LODWORD(v172) = 0;
              sub_22F33852C((uint64_t)&v170, v97);
            }
            ++v95;
            v96 -= 8;
          }
          while (v96);
        }
        sub_22E3BA850(a1 + 8728, v89);
        if (a5)
          v98 = 4009;
        else
          v98 = 3766;
        *((_QWORD *)&v148 + 1) = *(_QWORD *)(a1 + 88) + 2128;
        LODWORD(v149) = v98;
        v99 = v147;
        v100 = (_BYTE *)sub_22E3B8AAC(*((uint64_t *)&v148 + 1));
        *(_QWORD *)&v148 = v100;
        v101 = v100 + 1;
        v102 = *v100;
        v101[v102] = 10;
        *v100 = v102 + 3;
        v100 += 16;
        *(_QWORD *)&v100[8 * v102] = v99;
        v103 = (uint64_t)v146;
        v104 = (v102 + 1);
        v101[v104] = 13;
        *(_QWORD *)&v100[8 * v104] = v103;
        v105 = v142;
        v106 = (v102 + 2);
        v101[v106] = 2;
        *(_QWORD *)&v100[8 * v106] = v105;
        sub_22EC6BEF8(a1, (uint64_t)&v170, (uint64_t)&v148, 1);
        if ((_QWORD)v148 && *((_QWORD *)&v148 + 1))
          sub_22E3BB10C(*((unint64_t *)&v148 + 1), v148);
        goto LABEL_93;
      }
      v111 = a4[1];
      v112 = v147;
      v113 = v147 & 0xFFFFFFFFFFFFFFF8;
      if ((v147 & 7) != 0)
        v113 = 0;
      v114 = *(_DWORD *)(v111 + 64);
      *(_DWORD *)(v111 + 40) = 0;
      *(_QWORD *)(v111 + 48) = v113;
      *(_DWORD *)(v111 + 68) = v114;
      *(_WORD *)(a4[1] + 1088) = *(_WORD *)(a4[1] + 1088) & 0xFFEF | v118 & 0x10;
      *(_DWORD *)a2 = 0;
      *(_DWORD *)(a2 + 16) = 0;
      v115 = *(_QWORD *)(a2 + 88);
      if (v115)
      {
        v116 = sub_22EC6CBD0(v115);
        MEMORY[0x2348A0E9C](v116, 0x10E0C409F09D3C3);
        v112 = v147;
      }
      *(_BYTE *)(a2 + 165) = 0;
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(a2 + 120) = v112;
    }
  }
  sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a3 + 24), v121, 0, (uint64_t)&v148);
  v26 = sub_22E894538((uint64_t)&v148, &v147);
  v27 = sub_22E894FB4(v26, (uint64_t *)&v146);
  v28 = sub_22E894E38(v27, (unsigned __int8 *)&v142);
  LODWORD(v124) = *(_DWORD *)(a3 + 24);
  sub_22F2F2168(v28, (unsigned int *)&v124);
  sub_22E903BEC((unsigned int *)&v148);
  v133 = 0;
  if ((*(_DWORD *)(a3 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC)
    v133 = sub_22E8FB7BC(a3);
  if ((_DWORD)v178)
  {
    v29 = (unsigned int *)v177;
    v30 = &v177[16 * v178];
    do
    {
      v31 = *(_QWORD *)v29;
      if (*(_QWORD *)v29)
        v32 = (*(_DWORD *)(*(_QWORD *)v29 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC;
      else
        v32 = 0;
      v33 = !v32;
      if (v32)
        v34 = sub_22E8FB7BC(*(_QWORD *)v29);
      else
        v34 = 0;
      v35 = v33 & a5;
      v36 = v29[2];
      v132 = v36;
      if (v36)
      {
        v37 = *(_QWORD *)(*(_QWORD *)(v31 + 120) + 8 * (v36 - 1));
        v38 = sub_22EFBAFDC(v37);
        if (!v38)
          v38 = *(_DWORD *)(v31 + 24);
        if (v35)
          v39 = 5701;
        else
          v39 = 5716;
        sub_22E8FCA40((_QWORD *)a1, v38, v39, 0, (uint64_t)&v148);
        v40 = sub_22E89519C((uint64_t)&v148, &v132);
        v124 = *(void ***)(v37 + 48);
        v41 = sub_22E8901B8(v40, (uint64_t *)&v124);
        v131 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 120) + 8 * (v132 - 1)) + 48);
        sub_22E8901B8(v41, &v131);
      }
      else
      {
        if (v133 == v34)
        {
          if (v35)
            v43 = 5700;
          else
            v43 = 5715;
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v31 + 24), v43, 0, (uint64_t)v123);
          v42 = (unsigned int *)v123;
          goto LABEL_69;
        }
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v31 + 24), 0x1652u, 0, (uint64_t)&v148);
        v44 = sub_22E894E38((uint64_t)&v148, &v133);
        LODWORD(v131) = (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31) >> 32;
        v45 = sub_22F2F2168(v44, (unsigned int *)&v131);
        v46 = a4[1];
        v47 = *(unsigned int *)(v46 + 120);
        v48 = *(int **)(v46 + 112);
        if (v133)
        {
          if ((_DWORD)v47)
          {
            v49 = 0;
            v50 = v48;
            while (1)
            {
              v52 = *v50;
              v50 += 30;
              v51 = v52;
              if (v52 != 6)
                break;
              if (v47 == ++v49)
                goto LABEL_76;
            }
            if (((1 << v51) & 0xB7) != 0)
              v53 = 0;
            else
              v53 = v49;
          }
          else
          {
LABEL_76:
            v53 = 0;
          }
          v59 = *(unsigned int *)(*(_QWORD *)&v48[30 * v53 + 20] + 144);
          v126 = 0;
          v127 = 0;
          v129 = 0uLL;
          __p = 0;
          v130 = 0;
          v124 = (void **)(v59 | (v59 << 32));
          v125 = 1;
        }
        else
        {
          if ((_DWORD)v47)
          {
            v54 = 0;
            v55 = v48;
            while (1)
            {
              v57 = *v55;
              v55 += 30;
              v56 = v57;
              if (v57 != 6)
                break;
              if (v47 == ++v54)
                goto LABEL_81;
            }
            if (((1 << v56) & 0xB7) != 0)
              v58 = 0;
            else
              v58 = v54;
          }
          else
          {
LABEL_81:
            v58 = 0;
          }
          v60 = v48[30 * v58 + 11];
          v127 = 0;
          v126 = 0;
          v124 = (void **)((v60 + 1) | ((unint64_t)(v60 + 1) << 32));
          v125 = 0;
          HIWORD(v129) = 1536;
          HIBYTE(__p) = 0;
          LOWORD(v129) = 0;
          *(_DWORD *)((char *)&v129 + 2) = 0;
          *(_QWORD *)((char *)&v129 + 6) = 0;
          strcpy((char *)&__p, " const");
          v130 = 0;
        }
        sub_22E890748(v45, &v124);
        if (SHIBYTE(v129) < 0)
          operator delete(__p);
      }
      v42 = (unsigned int *)&v148;
LABEL_69:
      sub_22E903BEC(v42);
      v29 += 4;
    }
    while (v29 != (unsigned int *)v30);
  }
  v61 = 0;
LABEL_93:
  if ((_BYTE)v169)
  {
    if ((_DWORD)v154 == 5)
    {
      sub_22EC64D18(v161, (uint64_t)&v154);
    }
    else if (v159 && (*(_DWORD *)(v161[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v161, (uint64_t)&v154);
    }
  }
  if (v158)
  {
    v117 = sub_22EC6CBD0(v158);
    MEMORY[0x2348A0E9C](v117, 0x10E0C409F09D3C3);
  }
  if (v155 != v157)
    free(v155);
  v154 = (void **)&v175;
  sub_22E8D19C8(&v154);
  if (v171 != &v173)
    free(v171);
  if (v177 != (char *)v179)
    free(v177);
  if (v143 != &v145)
    free(v143);
  return v61;
}

void sub_22EA26864(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  char v76;
  int v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  BOOL v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  BOOL v92;
  char v93;
  BOOL v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  uint64_t *v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t *v109;
  uint64_t v110;
  BOOL v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115[24];
  unsigned int v116[24];
  unsigned int v117[24];
  unsigned int v118[24];

  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v5 = *(uint64_t **)v4;
    v6 = *(unsigned int *)(v4 + 8);
    v7 = *(uint64_t **)v4;
    if ((_DWORD)v6)
    {
      v8 = 8 * v6;
      v7 = *(uint64_t **)v4;
      while (*(_WORD *)(*v7 + 32) != 349)
      {
        ++v7;
        v8 -= 8;
        if (!v8)
          goto LABEL_26;
      }
    }
    if (v7 != &v5[v6])
    {
      do
      {
        v10 = *v5++;
        v9 = v10;
      }
      while (*(_WORD *)(v10 + 32) != 349);
      if (sub_22EFB948C(a2) <= 2)
      {
        sub_22E8FCA40(a1, *(_DWORD *)(v9 + 16), 0xB2Bu, 0, (uint64_t)v118);
        sub_22E903BEC(v118);
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v12 = *(char **)v11;
          v13 = *(unsigned int *)(v11 + 8);
          if ((_DWORD)v13)
          {
            v14 = &v12[8 * v13];
            v15 = 8 * v13 - 8;
            v16 = *(char **)v11;
            v17 = *(char **)v11;
            while (1)
            {
              v18 = *(_QWORD *)v17;
              v17 += 8;
              if (*(_WORD *)(v18 + 32) == 349)
                break;
              v15 -= 8;
              v16 = v17;
              if (v17 == v14)
                goto LABEL_24;
            }
            if (v17 == v14)
            {
              v14 = v16;
            }
            else
            {
              v19 = 8;
              v14 = v16;
              do
              {
                v20 = *(_QWORD *)&v16[v19];
                if (*(_WORD *)(v20 + 32) != 349)
                {
                  *(_QWORD *)v14 = v20;
                  v14 += 8;
                }
                v19 += 8;
                v15 -= 8;
              }
              while (v15);
              v12 = *(char **)v11;
            }
          }
          else
          {
            v14 = *(char **)v11;
          }
LABEL_24:
          v21 = (unint64_t)(v14 - v12) >> 3;
          *(_DWORD *)(v11 + 8) = v21;
          if (!(_DWORD)v21)
            *(_DWORD *)(a2 + 28) &= ~0x100u;
        }
      }
    }
  }
LABEL_26:
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v23 = *(uint64_t **)v22;
    v24 = *(unsigned int *)(v22 + 8);
    v25 = *(uint64_t **)v22;
    if ((_DWORD)v24)
    {
      v26 = 8 * v24;
      v25 = *(uint64_t **)v22;
      while (*(_WORD *)(*v25 + 32) != 351)
      {
        ++v25;
        v26 -= 8;
        if (!v26)
          goto LABEL_36;
      }
    }
    if (v25 != &v23[v24])
    {
      do
      {
        v28 = *v23++;
        v27 = v28;
      }
      while (*(_WORD *)(v28 + 32) != 351);
      if (sub_22EFB948C(a2) >= 3)
      {
        sub_22E8FCA40(a1, *(_DWORD *)(v27 + 16), 0xB2Du, 0, (uint64_t)v117);
        sub_22E903BEC(v117);
        sub_22EA4108C(a2);
        sub_22EA3089C(a2);
      }
    }
  }
LABEL_36:
  v29 = *(_DWORD *)(a2 + 28);
  v30 = (v29 & 0x7F) - 67;
  v31 = __CFADD__(v30, 7);
  if (v30 >= 0xFFFFFFF9)
    v32 = a2;
  else
    v32 = 0;
  v112 = v32;
  if (v31
    && ((v29 & 0x7F) != 0x40 || (*(_DWORD *)(a2 + 96) & 0x600u) - 1536 <= 0xFFFFFBFF)
    && *(_QWORD *)(a2 + 88) >= 8uLL
    && (v29 & 0x100) != 0)
  {
    sub_22EFC8E88(a2);
    v39 = *(uint64_t **)v38;
    v40 = *(unsigned int *)(v38 + 8);
    v41 = *(uint64_t **)v38;
    if ((_DWORD)v40)
    {
      v42 = 8 * v40;
      v41 = *(uint64_t **)v38;
      while (*(_WORD *)(*v41 + 32) != 362)
      {
        ++v41;
        v42 -= 8;
        if (!v42)
          goto LABEL_40;
      }
    }
    if (v41 != &v39[v40])
    {
      do
      {
        v54 = *v39++;
        v53 = v54;
      }
      while (*(_WORD *)(v54 + 32) != 362);
      sub_22E8FCA40(a1, *(_DWORD *)(v53 + 16), 0xA2Du, 0, (uint64_t)v116);
      v55 = sub_22E890024((uint64_t)v116, &v112);
      LODWORD(v114) = 0;
      sub_22E8900C4(v55, (int *)&v114);
      sub_22E903BEC(v116);
      sub_22EA3089C(v112);
    }
  }
LABEL_40:
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v34 = *(uint64_t **)v33;
    v35 = *(unsigned int *)(v33 + 8);
    v36 = *(uint64_t **)v33;
    if ((_DWORD)v35)
    {
      v37 = 8 * v35;
      v36 = *(uint64_t **)v33;
      while (*(_WORD *)(*v36 + 32) != 306)
      {
        ++v36;
        v37 -= 8;
        if (!v37)
          goto LABEL_78;
      }
    }
    if (v36 != &v34[v35])
    {
      do
      {
        v44 = *v34++;
        v43 = v44;
      }
      while (*(_WORD *)(v44 + 32) != 306);
      if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 52 < 6 || sub_22EFB948C(a2) <= 2)
      {
        sub_22E8FCA40(a1, *(_DWORD *)(v43 + 16), 0xB1Fu, 0, (uint64_t)v115);
        sub_22E903BEC(v115);
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v46 = *(char **)v45;
          v47 = *(unsigned int *)(v45 + 8);
          if ((_DWORD)v47)
          {
            v48 = &v46[8 * v47];
            v49 = 8 * v47 - 8;
            v50 = *(char **)v45;
            v51 = *(char **)v45;
            while (1)
            {
              v52 = *(_QWORD *)v51;
              v51 += 8;
              if (*(_WORD *)(v52 + 32) == 306)
                break;
              v49 -= 8;
              v50 = v51;
              if (v51 == v48)
                goto LABEL_76;
            }
            if (v51 == v48)
            {
              v48 = v50;
            }
            else
            {
              v56 = 8;
              v48 = v50;
              do
              {
                v57 = *(_QWORD *)&v50[v56];
                if (*(_WORD *)(v57 + 32) != 306)
                {
                  *(_QWORD *)v48 = v57;
                  v48 += 8;
                }
                v56 += 8;
                v49 -= 8;
              }
              while (v49);
              v46 = *(char **)v45;
            }
          }
          else
          {
            v48 = *(char **)v45;
          }
LABEL_76:
          v58 = (unint64_t)(v48 - v46) >> 3;
          *(_DWORD *)(v45 + 8) = v58;
          if (!(_DWORD)v58)
            *(_DWORD *)(a2 + 28) &= ~0x100u;
        }
      }
    }
  }
LABEL_78:
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v60 = *(uint64_t **)v59;
    v61 = *(unsigned int *)(v59 + 8);
    v62 = *(uint64_t **)v59;
    if ((_DWORD)v61)
    {
      v63 = 8 * v61;
      v62 = *(uint64_t **)v59;
      while (*(_WORD *)(*v62 + 32) != 157)
      {
        ++v62;
        v63 -= 8;
        if (!v63)
          goto LABEL_87;
      }
    }
    if (v62 != &v60[v61])
    {
      do
      {
        v65 = *v60++;
        v64 = v65;
      }
      while (*(_WORD *)(v65 + 32) != 157);
LABEL_95:
      v112 = v64;
      v72 = (*(_DWORD *)(a2 + 28) & 0x7F) - 67;
      if (v72 < 0xFFFFFFF9)
        goto LABEL_102;
      v73 = *(_QWORD *)(a2 + 16);
      v74 = v73 & 0xFFFFFFFFFFFFFFF8;
      if ((v73 & 4) != 0)
        v74 = *(_QWORD *)v74;
      if (!v74 || (*(_WORD *)(v74 + 8) & 0x7F) != 16)
      {
LABEL_102:
        sub_22EFB948C(a2);
        goto LABEL_103;
      }
      v82 = v74 - 48;
      while (1)
      {
        v83 = *(_QWORD *)(v82 + 40);
        v85 = (v83 & 7) != 0 || v83 < 8;
        v86 = *(_WORD *)(v82 + 56) & 0x7F;
        v87 = -40;
        if (v86 > 0x46)
        {
          if (v86 != 83)
          {
            if (v86 == 71)
            {
              v87 = -56;
            }
            else if (v86 != 81)
            {
              goto LABEL_136;
            }
          }
        }
        else
        {
          if (v86 > 0x18)
            goto LABEL_135;
          if (v86 == 16)
            goto LABEL_128;
          if (((1 << v86) & 0x1066) != 0)
            goto LABEL_142;
          if (v86 == 24)
          {
LABEL_128:
            v87 = -48;
          }
          else
          {
LABEL_135:
            if (v86 != 70)
            {
LABEL_136:
              v88 = v86 - 52;
              if (v86 - 33 >= 5)
                v89 = -48;
              else
                v89 = -64;
              if (v88 >= 6)
                v87 = v89;
              else
                v87 = -72;
              goto LABEL_142;
            }
            v87 = -64;
          }
        }
LABEL_142:
        v90 = *(_QWORD *)(v82 + 48 + v87 + 16);
        v91 = v90 & 0xFFFFFFFFFFFFFFF8;
        if ((v90 & 4) != 0)
          v91 = *(_QWORD *)v91;
        if (v91)
          v92 = (*(_WORD *)(v91 + 8) & 0x7F) == 16;
        else
          v92 = 0;
        v93 = !v92 || v85;
        if (v92)
          v82 = v91 - 48;
        else
          v82 = 0;
        if ((v93 & 1) != 0)
        {
          v94 = *(_DWORD *)(*(_QWORD *)(a1[11] + 15088) + 148) == 11 && v85;
          if (sub_22EFB948C(a2) >= 3 && v94)
            goto LABEL_162;
          if (v94)
            goto LABEL_163;
LABEL_103:
          if (sub_22EFB948C(a2) < 3)
            goto LABEL_162;
          if (v72 >= 0xFFFFFFF9)
          {
            v76 = *(_BYTE *)(a2 + 96);
            if ((v76 & 7) == 2 || (*(_BYTE *)(a2 + 96) & 7) == 0 && (v76 & 0x18) == 0x10)
            {
              v77 = *(_DWORD *)(a2 + 28) & 0x7F;
              if (v77 == 64 || v77 == 62)
                goto LABEL_162;
              v78 = *(_QWORD *)(a2 + 16);
              v79 = (_QWORD *)(v78 & 0xFFFFFFFFFFFFFFF8);
              v80 = v78 & 0xFFFFFFFFFFFFFFF8;
              if ((v78 & 4) != 0)
                v80 = v79[1];
              v81 = *(_WORD *)(sub_22EFCBB30(v80) + 8) & 0x7F;
              if (v81 != 16 && v81 != 83)
              {
                if ((v78 & 4) != 0)
                  v79 = (_QWORD *)*v79;
                if (((_WORD)v79[1] & 0x7Eu) - 34 >= 4)
                {
LABEL_162:
                  sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0xAF6u, 0, (uint64_t)v116);
                  v114 = a2;
                  v95 = sub_22E890024((uint64_t)v116, &v114);
                  sub_22E8FB3C4(v95, &v112);
                  sub_22E903BEC(v116);
                  sub_22EFC77E8(a2, 1);
                }
              }
            }
          }
          goto LABEL_163;
        }
      }
    }
  }
LABEL_87:
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v67 = *(uint64_t **)v66;
    v68 = *(unsigned int *)(v66 + 8);
    v69 = *(uint64_t **)v66;
    if ((_DWORD)v68)
    {
      v70 = 8 * v68;
      v69 = *(uint64_t **)v66;
      while (*(_WORD *)(*v69 + 32) != 155)
      {
        ++v69;
        v70 -= 8;
        if (!v70)
          goto LABEL_163;
      }
    }
    if (v69 != &v67[v68])
    {
      do
      {
        v71 = *v67++;
        v64 = v71;
      }
      while (*(_WORD *)(v71 + 32) != 155);
      goto LABEL_95;
    }
  }
LABEL_163:
  v96 = (*(_DWORD *)(a2 + 28) & 0x7E) - 58;
  if (v96 >= 0xFFFFFFFA)
    v97 = a2;
  else
    v97 = 0;
  if (v96 >= 0xFFFFFFFA)
  {
    v98 = *(_QWORD *)(a2 + 56);
    v99 = (uint64_t *)(v98 & 0xFFFFFFFFFFFFFFF8);
    if ((v98 & 4) != 0)
      v99 = (uint64_t *)v99[4];
    v112 = *v99;
    v113 = (uint64_t)(v99 + 1);
    v100 = sub_22EA41158((unint64_t *)&v112);
    if (v100)
    {
      v102 = v100;
      v103 = v101;
      do
      {
        v104 = *v103;
        if (*v103 && *(_WORD *)(v104 + 32) == 57)
        {
          v105 = (*(_DWORD *)(a2 + 28) & 0x7E) - 58;
          if (v105 < 0xFFFFFFFC
            || (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v97 + 32))(v97) + 80) & 0xE000) == 0x4000
            || (*(_QWORD *)(a2 + 40) & 7) == 6
            && (*(_DWORD *)(*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) <= 3)
          {
            sub_22E8FCA40(a1, *(_DWORD *)(v104 + 16), 0xE8Cu, 0, (uint64_t)v116);
            v111 = v105 < 0xFFFFFFFC;
LABEL_181:
            v106 = sub_22E894E38((uint64_t)v116, (unsigned __int8 *)&v111);
            v114 = *(_QWORD *)(v104 + 16);
            sub_22E8906A0(v106, &v114);
            sub_22E903BEC(v116);
            goto LABEL_182;
          }
          if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x39 || (*(_DWORD *)(a2 + 28) & 0x7F) == 0x37)
          {
            sub_22E8FCA40(a1, *(_DWORD *)(v104 + 16), 0xE8Bu, 0, (uint64_t)v116);
            v111 = (*(_DWORD *)(a2 + 28) & 0x7F) == 57;
            goto LABEL_181;
          }
        }
LABEL_182:
        v107 = *(_QWORD *)(v102 + 32);
        if (v107 >= 0x10 && (*(_QWORD *)(v102 + 32) & 0xFLL) == 0)
          v110 = *(_QWORD *)((char *)&unk_22F46A2E8
                           + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v107 & 0xFFFFFFFFFFFFFFF0)
                                                                          + 16) << 56) >> 53));
        else
          v110 = 1;
        v112 = *(_QWORD *)(v102 + 32);
        v113 = ((unint64_t)v103 + v110 + 7) & -v110;
        v102 = sub_22EA41158((unint64_t *)&v112);
        v103 = v109;
      }
      while (v102);
    }
  }
}

BOOL sub_22EA271A4(uint64_t a1, uint64_t a2)
{
  return ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) == 0
       || sub_22EFC09D4(a2)
       && !sub_22EA0E084(a2)
       && ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 68) & 0x20) == 0 || !sub_22E466E5C(a2) && !sub_22F295B40(a2)))
      && sub_22EFB9440(a2);
}

BOOL sub_22EA27224(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 150)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

void sub_22EA27284(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  if ((*(_BYTE *)(a1 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a1);
    v3 = *(char **)v2;
    v4 = *(unsigned int *)(v2 + 8);
    if ((_DWORD)v4)
    {
      v5 = &v3[8 * v4];
      v6 = 8 * v4 - 8;
      v7 = *(char **)v2;
      v8 = *(char **)v2;
      while (1)
      {
        v9 = *(_QWORD *)v8;
        v8 += 8;
        if (*(_WORD *)(v9 + 32) == 115)
          break;
        v6 -= 8;
        v7 = v8;
        if (v8 == v5)
          goto LABEL_15;
      }
      if (v8 == v5)
      {
        v5 = v7;
      }
      else
      {
        v10 = 8;
        v5 = v7;
        do
        {
          v11 = *(_QWORD *)&v7[v10];
          if (*(_WORD *)(v11 + 32) != 115)
          {
            *(_QWORD *)v5 = v11;
            v5 += 8;
          }
          v10 += 8;
          v6 -= 8;
        }
        while (v6);
        v3 = *(char **)v2;
      }
    }
    else
    {
      v5 = *(char **)v2;
    }
LABEL_15:
    v12 = (unint64_t)(v5 - v3) >> 3;
    *(_DWORD *)(v2 + 8) = v12;
    if (!(_DWORD)v12)
      *(_DWORD *)(a1 + 28) &= ~0x100u;
  }
}

BOOL sub_22EA27350(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 161)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22EA273B0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, int *a6, int *a7, char a8, char a9, char a10)
{
  int v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v24;
  int v25;
  _BOOL8 v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  unsigned __int8 v37;
  int v38;
  int v39;
  unsigned __int8 v40;
  _BOOL4 v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  unsigned int v46[20];
  char v47;
  unsigned int v48[24];
  unsigned int v49[24];

  v17 = *(_DWORD *)(a4 + 16);
  if (a2 && v17)
  {
    v18 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v18)
      v19 = *(_BYTE *)(v18 + 16) == 26;
    else
      v19 = 0;
    if (v19)
    {
LABEL_11:
      v21 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v21)
        v22 = *(_BYTE *)(v21 + 16) == 26;
      else
        v22 = 0;
      if (!v22
        && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26 || !sub_22F10CF48(v21)))
      {
        sub_22E90379C(a1, *(_DWORD *)(a3 + 24), a4, 0, (uint64_t)v46);
LABEL_44:
        v26 = v47 != 0;
        sub_22E903BEC(v46);
        return v26;
      }
      goto LABEL_17;
    }
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26 || !sub_22F10CF48(v18))
    {
      sub_22E90379C(a1, *(_DWORD *)(a2 + 24), a4, 0, (uint64_t)v49);
      sub_22E903BEC(v49);
      sub_22E90379C(a1, *a5, (uint64_t)(a5 + 2), 0, (uint64_t)v48);
      sub_22E903BEC(v48);
      return 1;
    }
    v17 = *(_DWORD *)(a4 + 16);
  }
  if (v17)
    goto LABEL_11;
LABEL_17:
  if ((a8 & 1) == 0 && *(_QWORD *)(a3 + 144) >= 8uLL && (*(_QWORD *)(a3 + 144) & 6) == 0)
  {
    sub_22E90379C(a1, *a6, (uint64_t)(a6 + 2), 0, (uint64_t)v46);
    v45 = 0;
    goto LABEL_43;
  }
  if (a3 && (*(_DWORD *)(a3 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC)
  {
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
    if ((*(_BYTE *)(v24 + 82) & 0xC) != 0 || sub_22EFD7260(v24))
    {
      sub_22E90379C(a1, *a6, (uint64_t)(a6 + 2), 0, (uint64_t)v46);
      v25 = 1;
LABEL_42:
      v45 = v25;
LABEL_43:
      sub_22E8900C4((uint64_t)v46, &v45);
      goto LABEL_44;
    }
    if ((*(_DWORD *)(a3 + 28) & 0x7F) == 0x39)
    {
      sub_22E90379C(a1, *a6, (uint64_t)(a6 + 2), 0, (uint64_t)v46);
      v25 = 4;
      goto LABEL_42;
    }
    if ((*(_DWORD *)(a3 + 28) & 0x7F) == 0x37)
    {
      sub_22E90379C(a1, *a6, (uint64_t)(a6 + 2), 0, (uint64_t)v46);
      v25 = 3;
      goto LABEL_42;
    }
  }
  if ((*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3) + 82) & 0x40) != 0)
  {
    sub_22E90379C(a1, *a6, (uint64_t)(a6 + 2), 0, (uint64_t)v46);
    v25 = 5;
    goto LABEL_42;
  }
  v27 = *(_QWORD *)(a3 + 80);
  if ((v27 & 0x2000000) != 0)
  {
    sub_22E90379C(a1, *a6, (uint64_t)(a6 + 2), 0, (uint64_t)v46);
    v25 = 6;
    goto LABEL_42;
  }
  if ((v27 & 0xC0000000) != 0 && (a9 & 1) == 0)
  {
    sub_22E90379C(a1, *a6, (uint64_t)(a6 + 2), 0, (uint64_t)v46);
    if ((*(_QWORD *)(a3 + 80) & 0xC0000000) == 0x80000000)
      v25 = 8;
    else
      v25 = 7;
    goto LABEL_42;
  }
  v29 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v30 = *(_QWORD *)(v29 + 24);
  v31 = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v46[0]) = 0;
  v32 = sub_22F110500((uint64_t)v46, v31);
  if (v32 && *(_QWORD *)(v32 + 24) <= 0xFuLL && (*(_BYTE *)(v32 + 17) & 4) == 0)
  {
    sub_22E90379C(a1, *a6, (uint64_t)(a6 + 2), 0, (uint64_t)v46);
    v25 = 2;
    goto LABEL_42;
  }
  if (!a2)
    return 0;
  v33 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (((*(_DWORD *)(v29 + 16) ^ *(_DWORD *)(v33 + 16)) & 0xF80000) != 0)
  {
    sub_22E90379C(a1, *a7, (uint64_t)(a7 + 2), 0, (uint64_t)v46);
    v45 = 0;
    goto LABEL_43;
  }
  if (*(_QWORD *)(v33 + 24) != v30)
  {
    sub_22E90379C(a1, *a7, (uint64_t)(a7 + 2), 0, (uint64_t)v46);
    v35 = 1;
    goto LABEL_59;
  }
  v34 = *(_QWORD *)(a2 + 80);
  if (((v34 ^ v27) & 0xC0000000) != 0)
  {
    sub_22E90379C(a1, *a7, (uint64_t)(a7 + 2), 0, (uint64_t)v46);
    v35 = 2;
LABEL_59:
    v45 = v35;
    goto LABEL_43;
  }
  if (((v27 >> 17) & 1) != ((v34 >> 17) & 1))
  {
    sub_22E90379C(a1, *a7, (uint64_t)(a7 + 2), 0, (uint64_t)v46);
    v35 = 3;
    goto LABEL_59;
  }
  v36 = sub_22EFB948C(a2);
  if ((v36 - 2) >= 3)
    v37 = v36;
  else
    v37 = 0x10006u >> (8 * (v36 - 2));
  v38 = v37;
  v39 = sub_22EFB948C(a3);
  if ((v39 - 2) >= 3)
    v40 = v39;
  else
    v40 = 0x10006u >> (8 * (v39 - 2));
  if (v38 != v40)
  {
    sub_22E90379C(a1, *a7, (uint64_t)(a7 + 2), 0, (uint64_t)v46);
    v35 = 4;
    goto LABEL_59;
  }
  if ((a10 & 1) == 0)
  {
    v41 = sub_22EFB9440(a2);
    if (v41 != sub_22EFB9440(a3))
    {
      sub_22E90379C(a1, *a7, (uint64_t)(a7 + 2), 0, (uint64_t)v46);
      v35 = 5;
      goto LABEL_59;
    }
  }
  v42 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v42 || *(_BYTE *)(v42 + 16) != 26)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
      v42 = sub_22F10CF48(v42);
    else
      v42 = 0;
  }
  v43 = *(_DWORD *)(a2 + 24);
  v44 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v44 || *(_BYTE *)(v44 + 16) != 26)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v44 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
      v44 = sub_22F10CF48(v44);
    else
      v44 = 0;
  }
  return (sub_22EB15D70((uint64_t)a1, v42, v43, v44, *(_DWORD *)(a3 + 24)) & 1) != 0;
}

uint64_t sub_22EA2796C(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;

  if ((a2 & 0x100) != 0 || sub_22EA0E084(a3))
    return 1;
  if (*(_DWORD *)a1 == 2)
  {
    v10 = **(_QWORD **)(a1 + 8) & 0xFFFFFFFFFFFFFFFCLL;
    v11 = *(_DWORD *)(v10 + 28) & 0x7F;
    v12 = v11 > 0x2F;
    v13 = (1 << v11) & 0xC00000060000;
    if (!v12 && v13 != 0)
      v10 = sub_22EFBAEA4(v10);
    return sub_22EA0E084(v10);
  }
  else if (*(_DWORD *)a1 == 3 && (v5 = *(unsigned int *)(a1 + 16), (_DWORD)v5))
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      result = sub_22EA0E084(v8 & 0xFFFFFFFFFFFFFFFCLL);
      if ((result & 1) != 0)
        break;
      v9 = v7;
      v7 -= 8;
    }
    while (v9);
  }
  else
  {
    return 0;
  }
  return result;
}

BOOL sub_22EA27A2C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if ((*(_BYTE *)(a2 + 8) & 4) == 0 || (sub_22EC62AF4(a1, a2) & 1) != 0)
    return 1;
  if (sub_22EFB948C(a3) < 3)
    return 0;
  return sub_22EFB9D84(a3) == 0;
}

BOOL sub_22EA27A8C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  BOOL v7;

  v1 = a1;
  v2 = a1 & 0xFFFFFFFFFFFFFFF0;
  v3 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 16);
    if ((v4 & 0xFE) == 0x28)
    {
      do
      {
LABEL_24:
        if ((v4 & 0x100000) == 0)
          goto LABEL_13;
        v3 = *(_QWORD *)(*(_QWORD *)(v3 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v3)
          break;
        v4 = *(_DWORD *)(v3 + 16);
      }
      while ((v4 & 0xFE) == 0x28);
      v3 = sub_22F10CF48(v3);
      goto LABEL_23;
    }
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
  {
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    goto LABEL_7;
  }
  v3 = sub_22F10CF48(v3);
  if (v3)
  {
LABEL_23:
    v4 = *(_DWORD *)(v3 + 16);
    goto LABEL_24;
  }
  v3 = *(_QWORD *)v2;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
LABEL_7:
  if (v5 == 39 || v5 == 32)
  {
    v1 = sub_22F10ACF8(v3);
  }
  else if (*(_BYTE *)(v3 + 16) == 31 || v5 == 31 && (v3 = sub_22F10CF48(v3)) != 0)
  {
LABEL_13:
    v1 = *(_QWORD *)(v3 + 32);
  }
  v6 = *(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF0);
  if (v6)
    v7 = *(_BYTE *)(v6 + 16) == 26;
  else
    v7 = 0;
  return (v7
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
       && (v6 = sub_22F10CF48(v6)) != 0)
      && !sub_22F113A44(v6);
}

uint64_t sub_22EA27BBC(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int v37[24];
  unsigned __int8 *v38;

  if ((a2[2] & 1) == 0)
  {
    v38 = 0;
    v14 = sub_22EFFFBEC((uint64_t)a2, a1[11], 0, &v38, a5, a6, a7, a8);
    if (v14)
      return !v14;
    if ((*(_QWORD *)(a1[9] + 140) & 0x40000000000) != 0 && (*v38 + 55) <= 3u)
    {
      v19 = *a2;
      if (v19 == 201)
      {
        v20 = *((unsigned int *)a2 + 4);
        if ((_DWORD)v20)
        {
          v21 = 0;
          v22 = 8 * v20;
          while (1)
          {
            v23 = *(_QWORD *)&a2[v21 + 40];
            if (!sub_22EFFFBEC(v23, a1[11], 0, 0, v10, v11, v12, v13))
              break;
            v21 += 8;
            if (v22 == v21)
            {
              v19 = *a2;
              goto LABEL_17;
            }
          }
LABEL_26:
          sub_22EFF605C(v23);
          sub_22E8FCA40(a1, v33, 0x1002u, 0, (uint64_t)v37);
          v36 = sub_22F32F390((int)a1, a2);
          sub_22E8900C4((uint64_t)v37, &v36);
          v16 = (unsigned __int8 *)v23;
          goto LABEL_7;
        }
      }
      else
      {
LABEL_17:
        if (v19 == 203)
        {
          v24 = *((_DWORD *)a2 + 4) & 0x7FFFFFFF;
          if ((_DWORD)v24)
          {
            v26 = 0;
            v27 = 16 * v24;
            while (1)
            {
              v28 = *(unsigned __int8 **)&a2[v26 + 40];
              if (*v28 != 204)
                break;
              v23 = *(_QWORD *)&a2[v26 + 48];
              if (!sub_22EFFFBEC(*(_QWORD *)&a2[v26 + 40], a1[11], 0, 0, v10, v11, v12, v13))
                break;
              if (!sub_22EFFFBEC(v23, a1[11], 0, 0, v29, v30, v31, v32))
                goto LABEL_26;
              v26 += 16;
              if (v27 == v26)
                goto LABEL_19;
            }
            sub_22EFF605C((uint64_t)v28);
            sub_22E8FCA40(a1, v34, 0x1002u, 0, (uint64_t)v37);
            v36 = sub_22F32F390((int)a1, a2);
            sub_22E8900C4((uint64_t)v37, &v36);
            v16 = v28;
            goto LABEL_7;
          }
        }
      }
LABEL_19:
      sub_22EFF605C((uint64_t)v38);
      sub_22E8FCA40(a1, v25, 0x1002u, 0, (uint64_t)v37);
      v36 = sub_22F32F390((int)a1, a2);
      sub_22E8900C4((uint64_t)v37, &v36);
    }
    else
    {
      sub_22EFF605C((uint64_t)v38);
      sub_22E8FCA40(a1, v15, 0xE1Bu, 0, (uint64_t)v37);
    }
    v16 = v38;
LABEL_7:
    sub_22F0D4E74((uint64_t)v16);
    v35 = v17;
    sub_22E8906A0((uint64_t)v37, &v35);
    sub_22E903BEC(v37);
    return !v14;
  }
  return 1;
}

