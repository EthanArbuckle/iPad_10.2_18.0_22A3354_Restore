void sub_22EF4D0B4(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  __int16 v12;
  unsigned __int8 v13;
  __int16 v14;
  unint64_t v15;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[4];
  __int16 v19;

  if ((unint64_t)(a3 - a2) > 0x20)
  {
    v17 = 1283;
    v16[0] = "nullability info for ";
    v16[2] = a6;
    v16[3] = a7;
    v18[0] = v16;
    v18[2] = " does not fit";
    v19 = 770;
    sub_22EF4BDA0(a1, (llvm::Twine *)v18);
    return;
  }
  if (a2 == a3)
  {
    if ((a4 & 0xFF00) == 0)
      return;
    LOWORD(v8) = *(_WORD *)(a5 + 56);
    v9 = *(_QWORD *)(a5 + 64);
    v14 = 3;
    goto LABEL_15;
  }
  v7 = 0;
  v8 = *(unsigned __int16 *)(a5 + 56);
  v9 = *(_QWORD *)(a5 + 64);
  v10 = 2;
  do
  {
    v11 = *(unsigned __int8 *)(a2 + v7);
    v12 = v8 | 1;
    v13 = v7 + 2;
    if ((int)v7 + 2 <= (v8 >> 1))
      v8 |= 1u;
    else
      v8 = v8 & 0xFFFFFE00 | 1 | (2 * (v7 + 2));
    *(_WORD *)(a5 + 56) = v8;
    LODWORD(v9) = v9 & ~(3 << v10) | (v11 << v10);
    v10 += 2;
    ++v7;
  }
  while (a2 + v7 != a3);
  v14 = (2 * v13) | 1;
  if ((a4 & 0xFF00) != 0)
  {
LABEL_15:
    if ((v8 & 0x1FE) != 0)
      LOWORD(v8) = v8 | 1;
    else
      LOWORD(v8) = v8 & 0xFE00 | 3;
    v15 = v9 & 0xFFFFFFFC | (unint64_t)a4;
    goto LABEL_19;
  }
  if ((v8 & 0x1FE) == 0)
    LOWORD(v8) = v12 & 0xFE01 | 2;
  v15 = v9 & 0xFFFFFFFC;
LABEL_19:
  *(_QWORD *)(a5 + 64) = v15;
  *(_WORD *)(a5 + 56) = v8 & 0xFE00 | v14;
}

void sub_22EF4D1EC(uint64_t a1, uint64_t a2)
{
  size_t v3;
  const void *v4;
  __int128 *p_dst;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 __dst;
  unint64_t v10;
  void *__p[2];
  unint64_t v12;
  char v13;

  if (!*(_BYTE *)(a2 + 16))
  {
    v6 = 0;
    LOBYTE(__p[0]) = 0;
    goto LABEL_12;
  }
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v4 = *(const void **)a2;
  if (v3 >= 0x17)
  {
    v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v7 = v3 | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = v3;
    v10 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v10) = *(_QWORD *)(a2 + 8);
    p_dst = &__dst;
    if (!v3)
      goto LABEL_11;
  }
  memmove(p_dst, v4, v3);
LABEL_11:
  *((_BYTE *)p_dst + v3) = 0;
  *(_OWORD *)__p = __dst;
  v12 = v10;
  v6 = 1;
LABEL_12:
  v13 = v6;
  sub_22EF2DD4C(a1 + 56, (__int128 *)__p);
  if (v13)
  {
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
}

void sub_22EF4D2E4(uint64_t a1, uint64_t a2)
{
  size_t v3;
  const void *v4;
  __int128 *p_dst;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 __dst;
  unint64_t v10;
  void *__p[2];
  unint64_t v12;
  char v13;

  if (!*(_BYTE *)(a2 + 16))
  {
    v6 = 0;
    LOBYTE(__p[0]) = 0;
    goto LABEL_12;
  }
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v4 = *(const void **)a2;
  if (v3 >= 0x17)
  {
    v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v7 = v3 | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = v3;
    v10 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v10) = *(_QWORD *)(a2 + 8);
    p_dst = &__dst;
    if (!v3)
      goto LABEL_11;
  }
  memmove(p_dst, v4, v3);
LABEL_11:
  *((_BYTE *)p_dst + v3) = 0;
  *(_OWORD *)__p = __dst;
  v12 = v10;
  v6 = 1;
LABEL_12:
  v13 = v6;
  sub_22EF2DD4C(a1 + 88, (__int128 *)__p);
  if (v13)
  {
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
}

unint64_t sub_22EF4D3DC(unsigned int *a1, _QWORD *a2)
{
  _DWORD *v3;
  int v4;

  v3 = sub_22E49F3DC(a2, a1[7]);
  if (v3)
    v4 = *v3 & 0x7FFFFFFF;
  else
    v4 = 0;
  return (a1[8] + v4) | ((unint64_t)(a1[8] + v4 + a1[11]) << 32);
}

unint64_t sub_22EF4D434(unsigned int *a1, _QWORD *a2)
{
  _DWORD *v3;
  int v4;

  v3 = sub_22E49F3DC(a2, a1[9]);
  if (v3)
    v4 = *v3 & 0x7FFFFFFF;
  else
    v4 = 0;
  return (a1[10] + v4) | ((unint64_t)(a1[10] + v4 + a1[11]) << 32);
}

uint64_t sub_22EF4D488(uint64_t a1, unint64_t a2, unsigned int a3, unint64_t *a4, _DWORD *a5)
{
  _QWORD *v8;
  int64_t v9;
  unint64_t v10;
  unsigned int v12;
  unsigned int v14;
  _QWORD *v16;
  uint64_t result;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  int v22;

  v8 = *(_QWORD **)a1;
  v9 = sub_22F141C1C(a2, a3, *(_QWORD *)a1, *(_DWORD **)(a1 + 8));
  v10 = v9;
  if (v9 < 0x100000000 || (int)v9 < 1)
    return 0;
  v12 = sub_22F1E361C(v8, v9);
  if (v12 != 3 && v12 != 0)
    return 0;
  v14 = sub_22F1E361C(v8, SHIDWORD(v10));
  if (v14 != 3 && v14 != 0)
    return 0;
  v16 = *(_QWORD **)(a1 + 16);
  if (v16)
  {
    if (sub_22F163A8C(v16, v10))
      return 0;
  }
  v18 = sub_22E677168((uint64_t)v8, v10);
  v19 = sub_22E677168((uint64_t)v8, SHIDWORD(v10));
  result = 0;
  if ((_DWORD)v18 == (_DWORD)v19)
  {
    v20 = HIDWORD(v19);
    v21 = v20 >= HIDWORD(v18);
    v22 = v20 - HIDWORD(v18);
    if (v21)
    {
      *a4 = v18;
      *a5 = v22;
      return 1;
    }
  }
  return result;
}

uint64_t sub_22EF4D58C(uint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unsigned int a5)
{
  int v7;
  BOOL v9;
  BOOL v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;

  v7 = a2;
  v21 = 0;
  v20 = 0;
  if ((sub_22EF4D488(a1, a2, a3, (unint64_t *)&v21, &v20) & 1) == 0)
    goto LABEL_18;
  v19 = 0;
  v18 = 0;
  if ((sub_22EF4D488(a1, a4, a5, &v19, &v18) & 1) == 0 || (_DWORD)v21 != (_DWORD)v19 || (int)v19 < (int)v21)
    goto LABEL_18;
  v9 = (int)v21 < (int)v19 || HIDWORD(v19) >= HIDWORD(v21);
  v10 = !v9;
  if ((int)v21 >= (int)v19
    && !v10
    && ((v11 = HIDWORD(v21) + v20, (HIDWORD(v21) + v20) < HIDWORD(v19))
      ? (v12 = (int)v21 <= (int)v19)
      : (v12 = 0),
        !v12 && (v13 = (HIDWORD(v19) + v18), v14 = v11 - v13, v11 >= v13)))
  {
    v16 = v7;
    v17 = (v13 << 32) | v21;
    sub_22F363930(a1, v16, v21, HIDWORD(v19) - HIDWORD(v21));
    sub_22F363930(a1, SHIDWORD(a4), v17, v14);
    return 1;
  }
  else
  {
LABEL_18:
    result = 0;
    *(_BYTE *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t sub_22EF4D6B0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  unsigned int v6;
  int v7;
  BOOL v8;
  uint64_t *v9;

  v3 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    v5 = (int *)(*(_QWORD *)(a1 + 40) + 28);
    while (1)
    {
      if (*(v5 - 7) == 2 && *v5 == (_DWORD)a3)
      {
        v7 = *v5;
        v6 = v5[1];
        if (*v5 < (int)a3 || ((int)a3 >= v7 ? (v8 = v6 >= HIDWORD(a3)) : (v8 = 1), !v8))
        {
          if (v7 > (int)a3 || v7 >= (int)a3 && v5[4] + v6 > HIDWORD(a3))
            return 0;
        }
      }
      v5 += 14;
      v4 -= 56;
      if (!v4)
        goto LABEL_14;
    }
  }
  else
  {
LABEL_14:
    v9 = *(uint64_t **)(a1 + 24);
    if (v9)
      return sub_22EF4D8E0(v9, a2, a3);
    else
      return 1;
  }
}

unint64_t sub_22EF4D748(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 56 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  return v3;
}

uint64_t sub_22EF4D7C0(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int v13;

  v1 = result;
  v2 = *(_DWORD *)(result + 80);
  if (v2)
  {
    v3 = *(_QWORD *)(result + 72);
    v4 = v3 + 24 * v2;
    do
    {
      v13 = *(_DWORD *)v3;
      v5 = *(_QWORD *)(v3 + 8);
      v6 = *(_QWORD *)(v3 + 16);
      v7 = sub_22F363E4C((uint64_t *)(v1 + 48), &v13);
      result = (uint64_t)(v7 + 2);
      v8 = (char *)*((_QWORD *)v7 + 1);
      v9 = v7[4];
      v10 = v8;
      if ((_DWORD)v9)
      {
        v11 = 16 * v9;
        v10 = (char *)*((_QWORD *)v7 + 1);
        while (*(_QWORD *)v10 != v5 || *((_QWORD *)v10 + 1) != v6)
        {
          v10 += 16;
          v11 -= 16;
          if (!v11)
          {
            v10 = &v8[16 * v9];
            break;
          }
        }
      }
      if (v9 == (v10 - v8) >> 4)
      {
        if (v9 >= v7[5])
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v8 = (char *)*((_QWORD *)v7 + 1);
          v9 = v7[4];
        }
        v12 = &v8[16 * v9];
        *(_QWORD *)v12 = v5;
        *((_QWORD *)v12 + 1) = v6;
        ++v7[4];
      }
      v3 += 24;
    }
    while (v3 != v4);
  }
  *(_DWORD *)(v1 + 80) = 0;
  return result;
}

uint64_t sub_22EF4D8E0(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v6 = sub_22EF4D9F8((uint64_t)a1, a3);
  if (a1 + 4 == (uint64_t *)v6 || *(_QWORD *)(v6 + 32) == a3)
  {
    if (!sub_22F1E2440((_QWORD *)*a1, a2, 0))
      return 1;
    v13 = 0;
    v12 = 0;
    sub_22F363ABC((_QWORD **)a1, a2, &v13, (uint64_t)&v11);
    v14 = 0;
    if (!sub_22F363EBC(a1 + 6, &v13, &v14))
      return 1;
    if (v14 == a1[6] + 56 * *((unsigned int *)a1 + 16))
      return 1;
    v8 = *(unsigned int *)(v14 + 16);
    if (!(_DWORD)v8)
      return 1;
    v9 = 16 * v8;
    for (i = *(_QWORD *)(v14 + 8) + 12; v11 != *(_QWORD *)(i - 12) || v12 == *(_QWORD *)(i - 4); i += 16)
    {
      v9 -= 16;
      if (!v9)
        return 1;
    }
  }
  return 0;
}

uint64_t sub_22EF4D9F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t result;
  BOOL v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  BOOL v14;

  v2 = a1 + 32;
  v3 = *(uint64_t **)(a1 + 32);
  v4 = (uint64_t *)(a1 + 32);
  if (v3)
  {
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = v3[4];
      if ((int)a2 >= (int)v5)
      {
        if ((int)v5 >= (int)a2 && HIDWORD(a2) < HIDWORD(v5))
          v4 = v3;
        else
          ++v3;
      }
      else
      {
        v4 = v3;
      }
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  if (v4 == *(uint64_t **)(a1 + 24))
    return v2;
  v8 = *v4;
  if (*v4)
  {
    do
    {
      result = v8;
      v8 = *(_QWORD *)(v8 + 8);
    }
    while (v8);
  }
  else
  {
    do
    {
      result = v4[2];
      v10 = *(_QWORD *)result == (_QWORD)v4;
      v4 = (uint64_t *)result;
    }
    while (v10);
  }
  v11 = *(_DWORD *)(result + 32);
  if ((int)a2 < v11)
    return v2;
  v12 = *(_DWORD *)(result + 36);
  v13 = v11 < (int)a2 || HIDWORD(a2) >= v12;
  v14 = !v13 || v11 < (int)a2;
  if (v14 || *(_DWORD *)(result + 56) + v12 <= HIDWORD(a2))
    return v2;
  return result;
}

uint64_t sub_22EF4DABC(uint64_t *a1, int a2, uint64_t a3, const void *a4, size_t a5, int a6)
{
  uint64_t v12;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  size_t v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = a3;
  v12 = sub_22EF4D8E0(a1, a2, a3);
  if ((_DWORD)v12 && a5)
  {
    if (sub_22F1E2440((_QWORD *)*a1, a2, 0))
    {
      *((_QWORD *)&v20 + 1) = 0;
      v24 = 0;
      sub_22F363ABC((_QWORD **)a1, a2, &v24, (uint64_t)&v20);
      if ((_QWORD)v20)
        sub_22F363CE4((unint64_t)(a1 + 9), v24, &v20);
    }
    *(_QWORD *)&v20 = &v25;
    v14 = sub_22F364134((uint64_t)(a1 + 3), a3, (uint64_t **)&v20);
    v15 = v14;
    v16 = v14[6];
    if (v16)
    {
      if (a6)
      {
        v18 = v14[5];
        *(_QWORD *)&v20 = a4;
        *((_QWORD *)&v20 + 1) = a5;
        v21 = v18;
        v22 = v16;
      }
      else
      {
        *(_QWORD *)&v20 = v14[5];
        *((_QWORD *)&v20 + 1) = v16;
        v21 = (uint64_t)a4;
        v22 = a5;
      }
      v23 = 1285;
      v14[5] = (uint64_t)sub_22F363C18((uint64_t)a1, (const char **)&v20);
      v15[6] = v19;
    }
    else
    {
      v17 = (void *)sub_22E3CD3D4((uint64_t)(a1 + 33), a5, 0);
      memmove(v17, a4, a5);
      v15[5] = (uint64_t)v17;
      v15[6] = a5;
    }
  }
  return v12;
}

uint64_t sub_22EF4DBF8(uint64_t a1, int a2, uint64_t a3, unint64_t a4, int a5, int a6)
{
  unsigned int v6;
  int v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v24;
  _QWORD *v25;
  size_t v26;
  uint64_t v27;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v35;
  uint64_t v37;
  size_t v38;
  const void *v39;
  size_t v40;
  uint64_t v41;
  size_t v42;
  const void *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  size_t v47;
  const void *v48;
  size_t v49;
  uint64_t v50;
  unsigned int v55;
  char v56;
  void *v57;
  __int128 v58;
  _QWORD v59[18];

  v59[16] = *MEMORY[0x24BDAC8D0];
  if (!a5)
    return 1;
  v6 = a4;
  v57 = v59;
  v58 = xmmword_22F44E310;
  v8 = a4;
  v9 = HIDWORD(a4);
  v11 = (_QWORD *)(a1 + 32);
  v10 = *(_QWORD **)(a1 + 32);
  if (v10)
  {
    v12 = (_QWORD *)(a1 + 32);
    do
    {
      v13 = v10[4];
      if ((int)a4 >= (int)v13)
      {
        if ((int)v13 >= (int)a4 && HIDWORD(a4) < HIDWORD(v13))
          v12 = v10;
        else
          ++v10;
      }
      else
      {
        v12 = v10;
      }
      v10 = (_QWORD *)*v10;
    }
    while (v10);
  }
  else
  {
    v12 = (_QWORD *)(a1 + 32);
  }
  if (v12 == *(_QWORD **)(a1 + 24))
  {
    v18 = v12;
  }
  else
  {
    v17 = (_QWORD *)*v12;
    if (*v12)
    {
      do
      {
        v18 = v17;
        v17 = (_QWORD *)v17[1];
      }
      while (v17);
    }
    else
    {
      do
      {
        v18 = (_QWORD *)v12[2];
        v19 = *v18 == (_QWORD)v12;
        v12 = v18;
      }
      while (v19);
    }
  }
  v55 = HIDWORD(a4) + a5;
  if (v18 == v11)
  {
LABEL_39:
    v26 = 0;
    v27 = a4;
    LODWORD(v22) = a4;
LABEL_86:
    if ((int)v22 > v8 || v9 >= v55)
      goto LABEL_94;
LABEL_88:
    v56 = 0;
    v46 = sub_22EF4E058((_QWORD **)a1, v27, v6 | ((unint64_t)v55 << 32), &v56);
    if (v56)
    {
      v16 = 0;
      goto LABEL_95;
    }
    v48 = (const void *)v46;
    v49 = v47;
    v50 = v58;
    if (*((_QWORD *)&v58 + 1) < (unint64_t)v58 + v47)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v50 = v58;
      if (!v49)
        goto LABEL_93;
    }
    else if (!v47)
    {
LABEL_93:
      v26 = v50 + v49;
      *(_QWORD *)&v58 = v50 + v49;
LABEL_94:
      v16 = sub_22EF4DABC((uint64_t *)a1, a2, a3, v57, v26, a6);
      goto LABEL_95;
    }
    memcpy((char *)v57 + v50, v48, v49);
    v50 = v58;
    goto LABEL_93;
  }
  while (1)
  {
    v20 = v18[4];
    if (v20 == a4)
      goto LABEL_45;
    v21 = (*((_DWORD *)v18 + 14) + HIDWORD(v20));
    v22 = v18[4];
    if ((int)a4 < (int)v20)
      break;
    if ((int)a4 <= (int)v22 && v21 > HIDWORD(a4))
      break;
    v24 = (_QWORD *)v18[1];
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (_QWORD *)v18[2];
        v19 = *v25 == (_QWORD)v18;
        v18 = v25;
      }
      while (!v19);
    }
    v18 = v25;
    if (v25 == v11)
      goto LABEL_39;
  }
  if ((int)a4 <= (int)v22 && ((int)a4 < (int)v22 || HIDWORD(a4) <= HIDWORD(v20)))
  {
LABEL_45:
    v22 = a4;
    goto LABEL_51;
  }
  v29 = (_QWORD *)v18[1];
  if (v29)
  {
    do
    {
      v18 = v29;
      v29 = (_QWORD *)*v29;
    }
    while (v29);
  }
  else
  {
    do
    {
      v30 = v18;
      v18 = (_QWORD *)v18[2];
    }
    while ((_QWORD *)*v18 != v30);
  }
  v9 = v21;
LABEL_51:
  if (v18 == v11)
  {
    v26 = 0;
LABEL_85:
    v27 = v22 | (v9 << 32);
    if ((int)v22 < v8)
      goto LABEL_88;
    goto LABEL_86;
  }
  v26 = 0;
  v31 = v22;
  while (1)
  {
    v32 = v18[4];
    v22 = v32;
    v33 = HIDWORD(v32);
    if ((int)v32 >= v8 && (v8 < (int)v32 || v55 <= HIDWORD(v32)))
    {
      v22 = v31;
      goto LABEL_85;
    }
    v35 = *((_DWORD *)v18 + 14);
    if ((int)v31 < (int)v32)
      break;
    if ((int)v31 <= (int)v32 && v9 < HIDWORD(v32))
      break;
LABEL_69:
    v43 = (const void *)v18[5];
    v42 = v18[6];
    if (*((_QWORD *)&v58 + 1) < v42 + v26)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v26 = v58;
      if (!v42)
        goto LABEL_72;
LABEL_71:
      memcpy((char *)v57 + v26, v43, v42);
      v26 = v58;
      goto LABEL_72;
    }
    if (v42)
      goto LABEL_71;
LABEL_72:
    v26 += v42;
    *(_QWORD *)&v58 = v26;
    v44 = (_QWORD *)v18[1];
    if (v44)
    {
      do
      {
        v45 = v44;
        v44 = (_QWORD *)*v44;
      }
      while (v44);
    }
    else
    {
      do
      {
        v45 = (_QWORD *)v18[2];
        v19 = *v45 == (_QWORD)v18;
        v18 = v45;
      }
      while (!v19);
    }
    v9 = (v35 + v33);
    v31 = v22;
    v18 = v45;
    if (v45 == v11)
      goto LABEL_85;
  }
  v56 = 0;
  v37 = sub_22EF4E058((_QWORD **)a1, v31 | (v9 << 32), v32, &v56);
  if (!v56)
  {
    v39 = (const void *)v37;
    v40 = v38;
    v41 = v58;
    if (*((_QWORD *)&v58 + 1) < (unint64_t)v58 + v38)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v41 = v58;
      if (!v40)
        goto LABEL_68;
    }
    else if (!v38)
    {
LABEL_68:
      v26 = v41 + v40;
      *(_QWORD *)&v58 = v41 + v40;
      goto LABEL_69;
    }
    memcpy((char *)v57 + v41, v39, v40);
    v41 = v58;
    goto LABEL_68;
  }
  v16 = 0;
LABEL_95:
  if (v57 != v59)
    free(v57);
  return v16;
}

uint64_t sub_22EF4E058(_QWORD **a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  int v5;
  int v6;
  _DWORD *v8;
  int v9;

  v5 = HIDWORD(a3);
  v6 = HIDWORD(a2);
  v8 = sub_22E49F3DC(*a1, a2);
  if (v8)
    v9 = *v8 & 0x7FFFFFFF;
  else
    v9 = 0;
  return sub_22F142368((v9 + v6) | ((unint64_t)(v9 + v5) << 32), 0, *a1, a1[1], a4);
}

void sub_22EF4E0C8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v20;
  uint64_t *v21;
  char *v22;
  uint64_t *v23;
  uint64_t *v24;
  char *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (a4)
  {
    v5 = a3;
    v7 = (uint64_t *)(a1 + 32);
    v6 = *(uint64_t **)(a1 + 32);
    v8 = (uint64_t **)(a1 + 24);
    v9 = (uint64_t *)(a1 + 32);
    if (v6)
    {
      v9 = (uint64_t *)(a1 + 32);
      do
      {
        v10 = v6[4];
        if ((int)a3 >= (int)v10)
        {
          v11 = (int)v10 < (int)a3 || HIDWORD(a3) >= HIDWORD(v10);
          v12 = !v11;
          if ((v12 & 1) != 0)
            v9 = v6;
          else
            ++v6;
        }
        else
        {
          v9 = v6;
        }
        v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
    if (v9 == *v8)
    {
      v14 = v9;
    }
    else
    {
      v13 = (uint64_t *)*v9;
      if (*v9)
      {
        do
        {
          v14 = v13;
          v13 = (uint64_t *)v13[1];
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (uint64_t *)v9[2];
          v15 = *v14 == (_QWORD)v9;
          v9 = v14;
        }
        while (v15);
      }
    }
    if (v14 == v7)
    {
LABEL_36:
      v35 = a3;
      v36 = 0;
      v37 = 0;
      v38 = 0;
      *((_DWORD *)sub_22F3641DC((_QWORD **)(a1 + 24), v7, a3, (uint64_t)&v35) + 14) = a4;
    }
    else
    {
      v16 = HIDWORD(a3) + a4;
      while (1)
      {
        v17 = v14[4];
        if ((int)a3 < (int)v17)
          goto LABEL_46;
        v18 = *((_DWORD *)v14 + 14) + HIDWORD(v17);
        if ((int)v17 >= (int)a3 && v18 > HIDWORD(a3))
          break;
        v20 = (uint64_t *)v14[1];
        if (v20)
        {
          do
          {
            v21 = v20;
            v20 = (uint64_t *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            v21 = (uint64_t *)v14[2];
            v15 = *v21 == (_QWORD)v14;
            v14 = v21;
          }
          while (!v15);
        }
        v14 = v21;
        if (v21 == v7)
          goto LABEL_36;
      }
      if (HIDWORD(v17) > HIDWORD(a3))
      {
LABEL_46:
        v35 = a3;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        v25 = sub_22F3641DC((_QWORD **)(a1 + 24), v14, a3, (uint64_t)&v35);
        v22 = v25 + 32;
        *((_DWORD *)v25 + 14) = a4;
        goto LABEL_47;
      }
      if (v18 >= v16)
        return;
      v22 = (char *)(v14 + 4);
      *((_DWORD *)v14 + 14) = v16 - HIDWORD(v17);
      if (v17 == a3)
      {
        v14[5] = 0;
        v14[6] = 0;
      }
      v23 = (uint64_t *)v14[1];
      if (v23)
      {
        do
        {
          v14 = v23;
          v23 = (uint64_t *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = v14;
          v14 = (uint64_t *)v14[2];
        }
        while ((uint64_t *)*v14 != v24);
      }
LABEL_47:
      if (v14 != v7)
      {
        while (1)
        {
          v26 = *((_DWORD *)v14 + 8);
          v27 = v5 < v26;
          if (v5 <= v26)
          {
            v28 = *((_DWORD *)v14 + 9);
            if (v27 || v16 <= v28)
              return;
            v30 = *((_DWORD *)v14 + 14) + v28;
            v11 = v30 >= v16;
            v31 = v30 - v16;
            if (v31 != 0 && v11)
              break;
          }
          v32 = (uint64_t *)v14[1];
          v33 = v14;
          if (v32)
          {
            do
            {
              v34 = v32;
              v32 = (uint64_t *)*v32;
            }
            while (v32);
          }
          else
          {
            do
            {
              v34 = (uint64_t *)v33[2];
              v15 = *v34 == (_QWORD)v33;
              v33 = v34;
            }
            while (!v15);
          }
          sub_22EC72F0C(v8, v14);
          operator delete(v14);
          v14 = v34;
          if (v34 == v7)
            return;
        }
        *((_DWORD *)v22 + 6) += v31;
        sub_22EC72F0C(v8, v14);
        operator delete(v14);
      }
    }
  }
}

void sub_22EF4E36C(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v4;
  unint64_t v5;
  const void *v6;
  size_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  const void *v19;
  size_t v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD **v24;
  uint64_t v27;
  char v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 40))
    return;
  v4 = *(_QWORD **)(a1 + 24);
  v5 = v4[4];
  v6 = (const void *)v4[5];
  v7 = v4[6];
  if (v7 >= 0x81)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    goto LABEL_4;
  }
  if (v7)
LABEL_4:
    memcpy(v28, v6, v7);
  v8 = HIDWORD(v5);
  v9 = v5;
  v10 = v7;
  v27 = v7;
  v11 = *((_DWORD *)v4 + 14);
  v12 = (_QWORD *)v4[1];
  if (v12)
  {
    do
    {
      v13 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    do
    {
      v13 = (_QWORD *)v4[2];
      v14 = *v13 == (_QWORD)v4;
      v4 = v13;
    }
    while (!v14);
  }
  v24 = (_QWORD **)a1;
  v15 = (_QWORD *)(a1 + 32);
  if (v13 != (_QWORD *)(a1 + 32))
  {
    v16 = (v11 + HIDWORD(v5));
    v17 = v8;
    while (1)
    {
      v18 = v13[4];
      v19 = (const void *)v13[5];
      v20 = v13[6];
      v21 = *((_DWORD *)v13 + 14);
      if (v18 != (v9 | (v16 << 32)))
      {
        sub_22EF4E61C(a2, v28, v10, v9 | (v17 << 32), v11, *v24, v24[1], a3);
        if (v20 > 0x80)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
LABEL_19:
          memcpy(v28, v19, v20);
        }
        else if (v20)
        {
          goto LABEL_19;
        }
        v9 = v18;
        v17 = HIDWORD(v18);
        v10 = v20;
        v27 = v20;
        v16 = (v21 + HIDWORD(v18));
        v11 = v21;
        goto LABEL_21;
      }
      if (v20 + v10 > 0x80)
        break;
      if (v20)
        goto LABEL_15;
LABEL_16:
      v10 += v20;
      v27 = v10;
      v11 += v21;
LABEL_21:
      v22 = (_QWORD *)v13[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v13[2];
          v14 = *v23 == (_QWORD)v13;
          v13 = v23;
        }
        while (!v14);
      }
      v13 = v23;
      if (v23 == v15)
        goto LABEL_32;
    }
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v10 = v27;
    if (!v20)
      goto LABEL_16;
LABEL_15:
    memcpy(&v28[v10], v19, v20);
    v10 = v27;
    goto LABEL_16;
  }
  v17 = HIDWORD(v5);
LABEL_32:
  sub_22EF4E61C(a2, v28, v10, v9 | (v17 << 32), v11, *v24, v24[1], a3);
}

uint64_t sub_22EF4E61C(uint64_t a1, const char *a2, uint64_t a3, unint64_t a4, int a5, _QWORD *a6, uint64_t *a7, int a8)
{
  unint64_t v15;
  unsigned int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  BOOL v31;
  _QWORD v32[2];
  char v33;

  v15 = HIDWORD(a4);
  v16 = a4;
  v17 = sub_22E49F3DC(a6, a4);
  if (v17)
    v18 = *v17 & 0x7FFFFFFF;
  else
    v18 = 0;
  v19 = (v18 + v15);
  if (!a3 && a8)
  {
    if (sub_22F410C24((v18 + v15), a6, a7) == (_DWORD)v19)
    {
      sub_22F1E1E78(a6, v16, (uint64_t)v32);
      if (!v33)
        goto LABEL_29;
      v22 = (v15 + a5);
      if (v32[1] == v22)
        goto LABEL_29;
      v23 = *(unsigned __int8 *)(v32[0] + v22);
      if (!(_DWORD)v15)
      {
        if ((_DWORD)v23 == 32)
          ++a5;
        goto LABEL_29;
      }
      v24 = *(unsigned __int8 *)(v32[0] + (v15 - 1));
      if ((_DWORD)v23 == 32)
      {
        v25 = *(unsigned __int8 *)(v32[0] + (v22 - 1));
        v26 = *(unsigned __int8 *)(v32[0] + (v22 + 1));
        v27 = word_22F4ADB24[v24];
        if ((v27 & 0xE8) == 0 && ((v28 = *a7, (_DWORD)v24 != 36) || (v28 & 0x20000000) == 0)
          || (word_22F4ADB24[v26] & 0xE8) == 0 && ((v28 = *a7, (_DWORD)v26 != 36) || (v28 & 0x20000000) == 0))
        {
          if ((v27 & 7) != 0
            || (v29 = word_22F4ADB24[v26], (v29 & 7) != 0)
            || ((word_22F4ADB24[v25] & 0xE8) != 0 || (_DWORD)v25 == 36 && (v28 & 0x20000000) != 0)
            && ((v29 & 0xE8) != 0 || (_DWORD)v26 == 36 && (v28 & 0x20000000) != 0))
          {
            ++a5;
          }
        }
        goto LABEL_29;
      }
      if ((word_22F4ADB24[v24] & 0xE8) == 0 && ((_DWORD)v24 != 36 || (*a7 & 0x20000000) == 0))
      {
LABEL_29:
        v30 = (a5 + v19);
LABEL_41:
        v20 = v19 | (v30 << 32);
        return (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, v20, 0);
      }
      if ((word_22F4ADB24[v23] & 0xE8) != 0
        || ((_DWORD)v23 == 36 ? (v31 = (*((_BYTE *)a7 + 3) & 0x20) != 0) : (v31 = 0), v31))
      {
        v20 = v19 | ((unint64_t)(v19 + a5) << 32);
        a2 = " ";
        a3 = 1;
        if (a5)
          return (*(uint64_t (**)(uint64_t, unint64_t, _QWORD, const char *, uint64_t))(*(_QWORD *)a1 + 24))(a1, v20, 0, a2, a3);
        return (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v19, a2, a3);
      }
    }
    v30 = (v19 + a5);
    goto LABEL_41;
  }
  v20 = v19 | ((unint64_t)(v19 + a5) << 32);
  if (a3)
  {
    if (a5)
      return (*(uint64_t (**)(uint64_t, unint64_t, _QWORD, const char *, uint64_t))(*(_QWORD *)a1 + 24))(a1, v20, 0, a2, a3);
    return (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v19, a2, a3);
  }
  return (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, v20, 0);
}

_DWORD *sub_22EF4E8B4(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 56 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    v12 = 56 * v3;
    sub_22F364040(a1, (uint64_t)v4, (uint64_t)v4 + v12);
    return (_DWORD *)llvm::deallocate_buffer(v4, (void *)v12);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 56 * v10;
      do
      {
        *result = -1;
        result += 14;
        v11 -= 56;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22EF4E980(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    do
    {
      while (1)
      {
        v6 = v4;
        v7 = v4[4];
        if ((int)a3 >= (int)v7 && ((int)v7 < (int)a3 || HIDWORD(a3) >= HIDWORD(v7)))
          break;
        v4 = (_QWORD *)*v6;
        result = v6;
        if (!*v6)
          goto LABEL_17;
      }
      if ((int)v7 >= (int)a3 && HIDWORD(v7) >= HIDWORD(a3))
        break;
      result = v6 + 1;
      v4 = (_QWORD *)v6[1];
    }
    while (v4);
  }
  else
  {
    v6 = result;
  }
LABEL_17:
  *a2 = v6;
  return result;
}

_QWORD *sub_22EF4E9E4(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;

  if (a1 + 1 == a2
    || (v5 = a2[4], (int)a5 < (int)v5)
    || ((int)v5 >= (int)a5 ? (v6 = HIDWORD(a5) >= HIDWORD(v5)) : (v6 = 1), !v6))
  {
    v10 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_31:
      if (v10)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v10)
    {
      v11 = (_QWORD *)*a2;
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v13 = a2;
      do
      {
        v12 = (_QWORD *)v13[2];
        v14 = *v12 == (_QWORD)v13;
        v13 = v12;
      }
      while (v14);
    }
    v15 = v12[4];
    if ((int)v15 < (int)a5)
      goto LABEL_31;
    if ((int)a5 >= (int)v15 && HIDWORD(v15) < HIDWORD(a5))
      goto LABEL_31;
    return sub_22EF4E980((uint64_t)a1, a3, a5);
  }
  if ((int)v5 < (int)a5 || HIDWORD(v5) < HIDWORD(a5))
  {
    v8 = a2[1];
    if (v8)
    {
      v9 = (_QWORD *)a2[1];
      do
      {
        a4 = v9;
        v9 = (_QWORD *)*v9;
      }
      while (v9);
    }
    else
    {
      v18 = a2;
      do
      {
        a4 = (_QWORD *)v18[2];
        v14 = *a4 == (_QWORD)v18;
        v18 = a4;
      }
      while (!v14);
    }
    if (a4 == a1 + 1
      || (v19 = a4[4], (int)a5 < (int)v19)
      || ((int)v19 >= (int)a5 ? (v20 = HIDWORD(a5) >= HIDWORD(v19)) : (v20 = 1), !v20))
    {
      if (v8)
      {
        *a3 = a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return a4;
    }
    return sub_22EF4E980((uint64_t)a1, a3, a5);
  }
  *a3 = a2;
  *a4 = a2;
  return a4;
}

uint64_t sub_22EF4EB30(unint64_t *a1, uint64_t a2, unint64_t a3)
{
  int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  llvm *v9;
  unsigned int v10;
  llvm *v11;
  uint64_t v12;
  llvm *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t i;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t *v35;
  llvm *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unsigned int v50;
  unint64_t v51;
  llvm *v52;
  unsigned int v53;
  int v54;
  __int128 v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  unsigned int v61;
  _DWORD v62[3];

  v5 = *(_DWORD *)(a3 + 28) & 0x7F;
  if (!a3 || v5 != 21)
  {
    v6 = a3;
    if (a3)
    {
      v6 = a3;
      if (v5 == 20)
      {
        v6 = sub_22F3B55B8(a3);
        if (!v6)
          return 0;
      }
    }
LABEL_7:
    v60 = 0uLL;
    v61 = 0;
    v58 = a2;
    bzero(&v59, 0x2C0uLL);
    if ((*(_DWORD *)(v6 + 28) & 0x7F) == 0x13)
    {
      LODWORD(v56) = 0;
      sub_22EF4FFD4(*(_QWORD *)((*(_QWORD *)(v6 + 120) & 0xFFFFFFFFFFFFFFF8) + 16), (uint64_t *)(*(_QWORD *)((*(_QWORD *)(v6 + 120) & 0xFFFFFFFFFFFFFFF8) + 16)+ 8 * *(unsigned int *)((*(_QWORD *)(v6 + 120) & 0xFFFFFFFFFFFFFFF8) + 24)), (uint64_t)&v58, (uint64_t)&v60, &v56);
      v10 = v61;
      v9 = (llvm *)v60;
      if (!DWORD2(v60))
        goto LABEL_101;
    }
    else
    {
      if ((*(_DWORD *)(v6 + 28) & 0x7F) != 0x16)
      {
        v51 = a3;
        v10 = 0;
        v9 = 0;
        v13 = 0;
        v11 = 0;
LABEL_20:
        v50 = v10;
        v52 = (llvm *)((char *)v9 + 16 * v10);
        if (v13 == v52)
        {
LABEL_74:
          v37 = (uint64_t)(a1 + 1);
          v38 = (uint64_t)(a1 + 1);
          if ((*(_DWORD *)(v51 + 28) & 0x7E) == 0x14)
          {
            sub_22EF5043C(v38, v51, 2);
            if (v51)
            {
              if ((*(_DWORD *)(v51 + 28) & 0x7F) == 0x15)
              {
                v39 = sub_22F3B46CC(*(_QWORD *)(v51 + 88));
                if (v39)
                {
                  v40 = v39;
                  do
                  {
                    sub_22EF5043C(v37, v40, 2);
                    v40 = sub_22F3B46CC(v40);
                  }
                  while (v40);
                }
              }
            }
          }
          else
          {
            sub_22EF5043C(v38, v51, 1);
            if (v51)
            {
              if ((*(_DWORD *)(v51 + 28) & 0x7F) == 0x16)
              {
                v44 = sub_22F3B46CC(v51);
                if (v44)
                {
                  v45 = v44;
                  do
                  {
                    sub_22EF5043C(v37, v45, 1);
                    v45 = sub_22F3B46CC(v45);
                  }
                  while (v45);
                }
              }
            }
          }
          *a1 = v51;
          v7 = 1;
          v10 = v50;
          goto LABEL_84;
        }
        while (1)
        {
          v14 = *(_QWORD *)v13;
          v53 = *((_DWORD *)v13 + 2);
          v15 = sub_22F2781C0(*(_QWORD *)v13);
          if (v15 != v16)
            break;
LABEL_68:
          v36 = (llvm *)((char *)v13 + 16);
          v13 = v11;
          if (v36 != v11)
          {
            while ((*(_QWORD *)v36 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v36 = (llvm *)((char *)v36 + 16);
              if (v36 == v11)
              {
                v13 = v11;
                goto LABEL_73;
              }
            }
            v13 = v36;
          }
LABEL_73:
          if (v13 == v52)
            goto LABEL_74;
        }
        v17 = v15;
        v18 = v16;
        while (1)
        {
          if ((*(_DWORD *)(v17 + 28) & 0x200) == 0)
          {
            v19 = v17;
            if ((*(_DWORD *)(v17 + 28) & 0x7F) != 0x53)
            {
              for (i = *(_QWORD *)(v17 + 16); ; i = *(_QWORD *)(v21 + v23 + 16))
              {
                v21 = i & 0xFFFFFFFFFFFFFFF8;
                if ((i & 4) != 0)
                  v21 = *(_QWORD *)v21;
                v22 = *(_WORD *)(v21 + 8) & 0x7F;
                if (v22 == 83)
                {
                  v19 = v21 - 40;
                  break;
                }
                v23 = -40;
                if ((*(_WORD *)(v21 + 8) & 0x7Fu) > 0x46)
                {
                  if (v22 == 71)
                  {
                    v23 = -56;
                    continue;
                  }
                  if (v22 != 81)
                    goto LABEL_39;
                }
                else
                {
                  if (v22 > 0x18)
                    goto LABEL_38;
                  if (v22 == 16)
                    goto LABEL_32;
                  if (((1 << v22) & 0x1066) == 0)
                  {
                    if (v22 == 24)
                    {
LABEL_32:
                      v23 = -48;
                      continue;
                    }
LABEL_38:
                    if (v22 == 70)
                    {
                      v23 = -64;
                      continue;
                    }
LABEL_39:
                    v24 = v22 - 52;
                    v25 = v22 - 33 >= 5;
                    v26 = -64;
                    if (v25)
                      v26 = -48;
                    v25 = v24 >= 6;
                    v23 = -72;
                    if (v25)
                      v23 = v26;
                    continue;
                  }
                }
              }
            }
            v27 = *(_QWORD *)(*(_QWORD *)(v19 + 88) + 15088);
            v28 = *(void **)(v27 + 224);
            v29 = *(_QWORD *)(v27 + 232);
            v56 = *(_OWORD *)(v27 + 240);
            if ((sub_22EFC93E8(v17, v28, v29, (uint64_t *)&v56, 0, 0) & 0xFFFFFFFD) != 1)
            {
              v30 = (*(_QWORD *)(v17 + 56) & 0x20000) != 0 ? 8 : 32;
              v31 = (*(_QWORD *)(v17 + 56) & 0x20000) != 0 ? a1 + 1 : a1 + 4;
              v32 = *(_QWORD *)(v17 + 40);
              *(_QWORD *)&v56 = 0;
              if ((sub_22EF5024C(*(unint64_t *)((char *)a1 + v30), *((_DWORD *)v31 + 4), v32, &v56) & 1) == 0)
                break;
            }
          }
          do
LABEL_62:
            v17 = *(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v17 && (*(_DWORD *)(v17 + 28) & 0x7F) != 0x18);
          if (v17 == v18)
            goto LABEL_68;
        }
        v33 = *((_DWORD *)v31 + 2);
        v34 = *((_DWORD *)v31 + 4);
        if (4 * v33 + 4 >= 3 * v34)
        {
          v34 *= 2;
        }
        else if (v34 + ~v33 - *((_DWORD *)v31 + 3) > v34 >> 3)
        {
LABEL_59:
          v35 = (uint64_t *)v56;
          ++*((_DWORD *)v31 + 2);
          if (*v35 != -1)
            --*((_DWORD *)v31 + 3);
          *v35 = v32;
          v35[1] = v17;
          v35[2] = v14;
          v35[3] = v53;
          v35[4] = 0;
          goto LABEL_62;
        }
        sub_22EF502E4((uint64_t)v31, v34);
        *(_QWORD *)&v56 = 0;
        sub_22EF5024C(*(unint64_t *)((char *)a1 + v30), *((_DWORD *)v31 + 4), v32, &v56);
        goto LABEL_59;
      }
      v8 = *(_QWORD *)(v6 + 120);
      if (!v8)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v6 + 96) + 88), *(_QWORD *)(v6 + 96));
        v8 = *(_QWORD *)(v6 + 120);
      }
      if (v8 <= 7)
      {
        v9 = 0;
        v7 = 0;
        v10 = 0;
LABEL_84:
        llvm::deallocate_buffer(v9, (void *)(16 * v10));
        return v7;
      }
      v56 = 0uLL;
      v57 = 0;
      if (v6 == a3)
      {
        v42 = sub_22F2590A8(a3);
        v43 = (uint64_t *)sub_22F25910C(a3);
      }
      else
      {
        v42 = sub_22F276134(v6);
        v43 = (uint64_t *)sub_22F2761B0(v6);
      }
      v62[0] = 0;
      sub_22EF4FFD4(v42, v43, (uint64_t)&v58, (uint64_t)&v56, v62);
      v46 = sub_22F3B46CC(v6);
      if (v46)
      {
        v47 = v46;
        do
        {
          v48 = sub_22F2590A8(v47);
          v49 = (uint64_t *)sub_22F25910C(v47);
          sub_22EF4FFD4(v48, v49, (uint64_t)&v58, (uint64_t)&v56, v62);
          v47 = sub_22F3B46CC(v47);
        }
        while (v47);
      }
      llvm::deallocate_buffer(0, 0);
      v9 = (llvm *)v56;
      v60 = v56;
      v54 = DWORD2(v56);
      v56 = 0uLL;
      v10 = v57;
      v61 = v57;
      llvm::deallocate_buffer(0, 0);
      if (!v54)
      {
LABEL_101:
        v7 = 0;
        goto LABEL_84;
      }
    }
    v11 = (llvm *)((char *)v9 + 16 * v10);
    v51 = a3;
    if (v10)
    {
      v12 = 0;
      while ((*(_QWORD *)((char *)v9 + v12) | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v12 += 16;
        if (16 * v10 == v12)
        {
          v13 = (llvm *)((char *)v9 + 16 * v10);
          goto LABEL_20;
        }
      }
      v13 = (llvm *)((char *)v9 + v12);
    }
    else
    {
      v13 = v9;
    }
    goto LABEL_20;
  }
  v6 = *(_QWORD *)(a3 + 88);
  if (v6)
    goto LABEL_7;
  return 0;
}

void sub_22EF4F144(uint64_t a1, _DWORD *a2, uint64_t a3, void (*a4)(uint64_t, unint64_t **, double), uint64_t a5)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  _OWORD *v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  char *v43;
  char *v44;
  __int128 v45;
  char *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  unint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  _DWORD *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  _DWORD *v64;
  unsigned int v65;
  _DWORD *v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  unint64_t *v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  void *v74;
  size_t v75;
  double v76;
  uint64_t v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unsigned int v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  unsigned int v101;
  int v102;
  _BYTE *v103;
  uint64_t v104;
  unint64_t *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  _DWORD *v112;
  unsigned int v113;
  unsigned int v114;
  _DWORD *v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  llvm::raw_ostream *v119;
  uint64_t *v120;
  char v121;
  const void *v122;
  unint64_t v123;
  size_t v124;
  uint64_t *v125;
  _BYTE *v126;
  uint64_t *v127;
  unint64_t v128;
  llvm::raw_ostream *v129;
  const char *v130;
  uint64_t v131;
  char v132;
  void *v133;
  void **v134;
  size_t v135;
  double v136;
  char v137;
  void *v138;
  size_t v139;
  double v140;
  uint64_t v141;
  int v142;
  unint64_t *v145;
  unint64_t *v146;
  unint64_t *v149;
  uint64_t v150;
  _DWORD *v151;
  int v152;
  void *__p[2];
  uint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  _WORD *v159;
  char v160;
  uint64_t v161;
  int v162;
  void **v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  _BYTE *v170;
  _BYTE *v171;
  char v172;
  uint64_t v173;
  int v174;
  void **v175;
  void *v176[2];
  uint64_t v177;
  __int128 v178;
  unint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  char v184;
  char v185;
  uint64_t v186;
  int v187;
  void **v188;
  uint64_t v189;

  v189 = *MEMORY[0x24BDAC8D0];
  if ((a2[7] & 0x7E) == 0x14)
    v6 = 2;
  else
    v6 = 1;
  v7 = *(unsigned int *)(a1 + 16);
  v8 = *(_QWORD *)a1 + 40 * v7;
  if (*(_DWORD *)(a1 + 8))
  {
    if ((_DWORD)v7)
    {
      v9 = 40 * v7;
      v10 = *(_QWORD *)a1;
      while (*(_QWORD *)v10 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v10 += 40;
        v9 -= 40;
        if (!v9)
          goto LABEL_9;
      }
    }
    else
    {
      v10 = *(_QWORD *)a1;
    }
  }
  else
  {
LABEL_9:
    v10 = *(_QWORD *)a1 + 40 * v7;
  }
  v11 = *(_QWORD *)a1 + 40 * v7;
  v152 = v6;
  if (v10 == v11)
  {
    v14 = 0;
    v13 = 0;
    v12 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (_OWORD *)(v10 + 8);
      if ((*(_QWORD *)(*(_QWORD *)(v10 + 8) + 56) & 0x3000000) == 0x1000000 && (*(_DWORD *)(v10 + 28) & v6) == 0)
      {
        if (v13 >= v14)
        {
          v17 = (v13 - v12) >> 5;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 59)
LABEL_284:
            abort();
          if ((v14 - v12) >> 4 > v18)
            v18 = (v14 - v12) >> 4;
          if ((unint64_t)(v14 - v12) >= 0x7FFFFFFFFFFFFFE0)
            v19 = 0x7FFFFFFFFFFFFFFLL;
          else
            v19 = v18;
          if (v19)
          {
            if (v19 >> 59)
LABEL_285:
              sub_22E3B3F8C();
            v20 = v12;
            v21 = (char *)operator new(32 * v19);
            v12 = v20;
          }
          else
          {
            v21 = 0;
          }
          v22 = *(_OWORD *)(v10 + 24);
          v23 = &v21[32 * v17];
          *(_OWORD *)v23 = *v15;
          *((_OWORD *)v23 + 1) = v22;
          if (v13 == v12)
          {
            v26 = &v21[32 * v17];
          }
          else
          {
            v24 = &v21[32 * v17];
            do
            {
              v25 = *((_OWORD *)v13 - 1);
              v26 = v24 - 32;
              *((_OWORD *)v24 - 2) = *((_OWORD *)v13 - 2);
              *((_OWORD *)v24 - 1) = v25;
              v13 -= 32;
              v24 -= 32;
            }
            while (v13 != v12);
          }
          v14 = &v21[32 * v19];
          v13 = v23 + 32;
          if (v12)
            operator delete(v12);
          v12 = v26;
          v6 = v152;
        }
        else
        {
          v16 = *(_OWORD *)(v10 + 24);
          *(_OWORD *)v13 = *v15;
          *((_OWORD *)v13 + 1) = v16;
          v13 += 32;
        }
      }
      v27 = (unint64_t *)(v10 + 40);
      while (v27 != (unint64_t *)v8)
      {
        v28 = *v27;
        v27 += 5;
        if (v28 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v10 = (uint64_t)(v27 - 5);
          goto LABEL_40;
        }
      }
      v10 = v8;
LABEL_40:
      ;
    }
    while (v10 != v11);
  }
  v29 = *(_QWORD *)(a1 + 24);
  v30 = *(unsigned int *)(a1 + 40);
  v31 = (unint64_t *)(v29 + 40 * v30);
  if (*(_DWORD *)(a1 + 32))
  {
    if ((_DWORD)v30)
    {
      v32 = 40 * v30;
      v33 = *(unint64_t **)(a1 + 24);
      while (*v33 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v33 += 5;
        v32 -= 40;
        if (!v32)
          goto LABEL_48;
      }
    }
    else
    {
      v33 = *(unint64_t **)(a1 + 24);
    }
  }
  else
  {
LABEL_48:
    v33 = (unint64_t *)(v29 + 40 * v30);
  }
  v34 = (unint64_t *)(v29 + 40 * v30);
  while (v33 != v34)
  {
    v35 = v33 + 1;
    if ((*(_QWORD *)(v33[1] + 56) & 0x3000000) == 0x1000000 && (*((_DWORD *)v33 + 7) & v6) == 0)
    {
      if (v13 >= v14)
      {
        v37 = (v13 - v12) >> 5;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 59)
          goto LABEL_284;
        if ((v14 - v12) >> 4 > v38)
          v38 = (v14 - v12) >> 4;
        if ((unint64_t)(v14 - v12) >= 0x7FFFFFFFFFFFFFE0)
          v39 = 0x7FFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
        {
          if (v39 >> 59)
            goto LABEL_285;
          v40 = v12;
          v41 = (char *)operator new(32 * v39);
          v12 = v40;
        }
        else
        {
          v41 = 0;
        }
        v42 = *(_OWORD *)(v33 + 3);
        v43 = &v41[32 * v37];
        *(_OWORD *)v43 = *v35;
        *((_OWORD *)v43 + 1) = v42;
        if (v13 == v12)
        {
          v46 = &v41[32 * v37];
        }
        else
        {
          v44 = &v41[32 * v37];
          do
          {
            v45 = *((_OWORD *)v13 - 1);
            v46 = v44 - 32;
            *((_OWORD *)v44 - 2) = *((_OWORD *)v13 - 2);
            *((_OWORD *)v44 - 1) = v45;
            v13 -= 32;
            v44 -= 32;
          }
          while (v13 != v12);
        }
        v14 = &v41[32 * v39];
        v13 = v43 + 32;
        if (v12)
          operator delete(v12);
        v12 = v46;
        v6 = v152;
      }
      else
      {
        v36 = *(_OWORD *)(v33 + 3);
        *(_OWORD *)v13 = *v35;
        *((_OWORD *)v13 + 1) = v36;
        v13 += 32;
      }
    }
    v47 = v33 + 5;
    while (v47 != v31)
    {
      v48 = *v47;
      v47 += 5;
      if (v48 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v33 = v47 - 5;
        goto LABEL_78;
      }
    }
    v33 = v31;
LABEL_78:
    ;
  }
  v49 = 126 - 2 * __clz((v13 - v12) >> 5);
  if (v13 == v12)
    v50 = 0;
  else
    v50 = v49;
  v146 = (unint64_t *)v12;
  sub_22EF50528((unint64_t)v12, (unint64_t)v13, v50, 1);
  v51 = a2[7] & 0x7E;
  v52 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
  v53 = HIDWORD(v52);
  if (v51 == 20)
  {
    if (HIDWORD(v52))
      goto LABEL_110;
    goto LABEL_109;
  }
  v54 = *(_QWORD *)(a3 + 1992);
  v55 = *(_DWORD **)(a3 + 2000);
  v56 = HIDWORD(v52);
  if ((v52 & 0x8000000000000000) != 0)
    LODWORD(v56) = sub_22F1E22F0(*(_QWORD **)(a3 + 1992), SHIDWORD(v52));
  v57 = v56 & 0x7FFFFFFF;
  v58 = *(_DWORD *)(v54 + 304);
  v59 = v58 + 1;
  if (v58 + 1 > 1)
  {
    if ((v58 & 0x80000000) != 0)
    {
      v61 = -2 - v58;
      if (((*(_QWORD *)(*(_QWORD *)(v54 + 224) + 8 * ((-2 - v58) >> 6)) >> (-2 - v58)) & 1) != 0)
        v60 = (_DWORD *)(*(_QWORD *)(v54 + 200) + 24 * v61);
      else
        v60 = (_DWORD *)sub_22F1E1134(v54, v61, 0);
    }
    else
    {
      v60 = (_DWORD *)(*(_QWORD *)(v54 + 184) + 24 * v58);
    }
  }
  else
  {
    v60 = *(_DWORD **)(v54 + 184);
  }
  if ((*v60 & 0x7FFFFFFFu) <= v57
    && (v58 == -2
     || (v59 != *(_DWORD *)(v54 + 192)
       ? ((v59 & 0x80000000) != 0
        ? ((v65 = -3 - v58,
            ((*(_QWORD *)(*(_QWORD *)(v54 + 224) + 8 * ((-3 - v58) >> 6)) >> (-3 - v58)) & 1) == 0)
         ? (v64 = (_DWORD *)sub_22F1E1134(v54, v65, 0))
         : (v64 = (_DWORD *)(*(_QWORD *)(v54 + 200) + 24 * v65)))
        : (v64 = (_DWORD *)(*(_QWORD *)(v54 + 184) + 24 * v59)),
          v63 = *v64 & 0x7FFFFFFF)
       : (v63 = *(_DWORD *)(v54 + 216)),
         v63 > v57)))
  {
    v62 = *(_DWORD *)(v54 + 304);
  }
  else
  {
    v62 = sub_22F1E1EE8(v54, v56 & 0x7FFFFFFF);
  }
  v66 = sub_22E49F3DC((_QWORD *)v54, v62);
  if (v66)
    v67 = *v66 & 0x7FFFFFFF;
  else
    v67 = 0;
  if (v67 == (_DWORD)v53 || (LODWORD(v53) = sub_22F410C24((v56 - 1), (_QWORD *)v54, v55), !(_DWORD)v53))
LABEL_109:
    v53 = (unint64_t)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2) >> 32;
LABEL_110:
  v178 = *(_OWORD *)(a3 + 15104);
  v177 = 0;
  *(_QWORD *)&v178 = v178 | 0x800C2000;
  v176[0] = 0;
  v176[1] = 0;
  v168 = 0;
  v172 = 0;
  v173 = 0;
  v174 = 1;
  v170 = 0;
  v171 = 0;
  v169 = 0;
  v68 = MEMORY[0x24BED83D8] + 16;
  v167 = MEMORY[0x24BED83D8] + 16;
  v175 = v176;
  llvm::raw_ostream::SetBufferAndMode();
  v164 = 0;
  v165 = 0;
  v166 = 0;
  v156 = 0;
  v160 = 0;
  v161 = 0;
  v162 = 1;
  v158 = 0;
  v159 = 0;
  v157 = 0;
  v145 = (unint64_t *)v68;
  v155 = v68;
  v163 = &v164;
  llvm::raw_ostream::SetBufferAndMode();
  if (v13 != (char *)v146)
  {
    v69 = 0;
    v142 = a2[7] & 0x7E;
    v150 = 0;
    v70 = v146;
    while (1)
    {
      v71 = v70[1];
      v149 = v70;
      if (v150 == v71)
        goto LABEL_205;
      v72 = *((_BYTE *)v163 + 23);
      if (v72 < 0)
      {
        if (!v163[1])
          goto LABEL_126;
      }
      else if (!*((_BYTE *)v163 + 23))
      {
        goto LABEL_126;
      }
      v73 = v70[1];
      if (v72 >= 0)
        v74 = v163;
      else
        v74 = *v163;
      if (v72 >= 0)
        v75 = *((unsigned __int8 *)v163 + 23);
      else
        v75 = (size_t)v163[1];
      v76 = sub_22E729148(v74, v75, v69, 0, (uint64_t)&v179);
      a4(a5, &v179, v76);
      if (v185 < 0)
        operator delete(v182);
      v71 = v73;
LABEL_126:
      if (SHIBYTE(v166) < 0)
      {
        *(_BYTE *)v164 = 0;
        v165 = 0;
      }
      else
      {
        LOBYTE(v164) = 0;
        HIBYTE(v166) = 0;
      }
      v77 = *(_QWORD *)(a3 + 1992);
      v151 = *(_DWORD **)(a3 + 2000);
      if ((a2[7] & 0x7E) == 0x14)
        v78 = 2;
      else
        v78 = 1;
      v179 = (unint64_t *)&v181;
      v180 = 0x400000000;
      v141 = v71;
      v79 = sub_22F2781C0(v71);
      if (v79 != v80)
      {
        v82 = v79;
        v83 = v80;
        do
        {
          if ((*(_BYTE *)(v82 + 29) & 2) == 0)
          {
            v84 = *(_QWORD *)(v82 + 56);
            v85 = (v84 & 0x20000) == 0;
            v86 = (v84 & 0x20000) != 0 ? 0 : 24;
            v87 = v85 ? a1 + 24 : a1;
            v88 = *(_QWORD *)(v82 + 40);
            __p[0] = 0;
            if (sub_22EF5024C(*(_QWORD *)(a1 + v86), *(_DWORD *)(v87 + 16), v88, __p))
            {
              v89 = __p[0];
              v90 = *(_QWORD *)v87;
              v91 = *(_DWORD *)(v87 + 16);
            }
            else
            {
              v90 = *(_QWORD *)v87;
              v91 = *(_DWORD *)(v87 + 16);
              v89 = (_QWORD *)(*(_QWORD *)v87 + 40 * v91);
            }
            if (v89 != (_QWORD *)(v90 + 40 * v91) && (*((_DWORD *)v89 + 7) & v78) != 0)
            {
              v92 = v89[4];
              v93 = *(_QWORD *)(v92 + 16);
              v94 = v93 & 0xFFFFFFFFFFFFFFF8;
              if ((v93 & 4) != 0)
                v94 = *(_QWORD *)(v94 + 8);
              if ((_DWORD *)v94 == a2 + 12)
              {
                v95 = v180;
                if (v180 >= (unint64_t)HIDWORD(v180))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v95 = v180;
                }
                v179[v95] = v92;
                LODWORD(v180) = v180 + 1;
              }
            }
          }
          do
            v82 = *(_QWORD *)(v82 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v82 && (*(_DWORD *)(v82 + 28) & 0x7F) != 0x18);
        }
        while (v82 != v83);
      }
      v81 = v180;
      if ((_DWORD)v180)
      {
        v96 = (char *)v179;
        v97 = *v179;
        v98 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)*v179 + 64))(*v179);
        if (v98)
        {
          sub_22F0D60E4(v98);
          LODWORD(v97) = v99;
          if ((v99 & 0x80000000) == 0)
            goto LABEL_163;
        }
        else
        {
          LODWORD(v97) = *(_DWORD *)(v97 + 108);
          if ((v97 & 0x80000000) == 0)
          {
LABEL_163:
            if (v81 == 1)
            {
LABEL_164:
              v97 = v97;
              while (1)
              {
                v100 = v97;
                v101 = sub_22F41101C(v97, (_QWORD *)v77, v151);
                if (!v101)
                  goto LABEL_201;
                if (v97 >> 31)
                  break;
                if ((v101 & 0x80000000) != 0)
                  break;
                v97 = v101;
                v102 = sub_22F423C68(v77, v100, 0);
                if (v102 != sub_22F423C68(v77, v97, 0))
                  break;
                v103 = (_BYTE *)sub_22F142368(v97 | (v97 << 32), 1u, (_QWORD *)v77, v151, 0);
                if (v104 != 1 || *v103 != 59)
                  goto LABEL_201;
              }
              v110 = *(_DWORD *)(v77 + 304);
              v111 = v110 + 1;
              if (v110 + 1 > 1)
              {
                if ((v110 & 0x80000000) != 0)
                {
                  v113 = -2 - v110;
                  if (((*(_QWORD *)(*(_QWORD *)(v77 + 224) + 8 * ((-2 - v110) >> 6)) >> (-2 - v110)) & 1) != 0)
                    v112 = (_DWORD *)(*(_QWORD *)(v77 + 200) + 24 * v113);
                  else
                    v112 = (_DWORD *)sub_22F1E1134(v77, v113, 0);
                }
                else
                {
                  v112 = (_DWORD *)(*(_QWORD *)(v77 + 184) + 24 * v110);
                }
              }
              else
              {
                v112 = *(_DWORD **)(v77 + 184);
              }
              if ((*v112 & 0x7FFFFFFFu) <= (v100 & 0x7FFFFFFF)
                && (v110 == -2
                 || (v111 != *(_DWORD *)(v77 + 192)
                   ? ((v111 & 0x80000000) != 0
                    ? ((v116 = -3 - v110,
                        ((*(_QWORD *)(*(_QWORD *)(v77 + 224) + 8 * ((-3 - v110) >> 6)) >> (-3 - v110)) & 1) == 0)
                     ? (v115 = (_DWORD *)sub_22F1E1134(v77, v116, 0))
                     : (v115 = (_DWORD *)(*(_QWORD *)(v77 + 200) + 24 * v116)))
                    : (v115 = (_DWORD *)(*(_QWORD *)(v77 + 184) + 24 * v111)),
                      v114 = *v115 & 0x7FFFFFFF)
                   : (v114 = *(_DWORD *)(v77 + 216)),
                     v114 > (v100 & 0x7FFFFFFF))))
              {
                v117 = *(_DWORD *)(v77 + 304);
              }
              else
              {
                v117 = sub_22F1E1EE8(v77, v100 & 0x7FFFFFFF);
              }
              v118 = sub_22F423C68(v77, v100, 0);
              v69 = sub_22F1E38E8((uint64_t *)v77, v117, v118, -1);
              if (!v69)
              {
LABEL_201:
                v69 = sub_22F141A3C(v100, 0, (_QWORD *)v77, v151);
                goto LABEL_202;
              }
              goto LABEL_202;
            }
            v105 = (unint64_t *)(v96 + 8);
            v106 = 8 * v81 - 8;
            while (2)
            {
              v107 = *v105;
              v108 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)*v105 + 64))(*v105);
              if (v108)
              {
                sub_22F0D60E4(v108);
                LODWORD(v107) = v109;
                if (v109 < 0)
                  goto LABEL_175;
              }
              else
              {
                LODWORD(v107) = *(_DWORD *)(v107 + 108);
                if ((v107 & 0x80000000) != 0)
LABEL_175:
                  v107 = sub_22F1E2828((_QWORD *)v77, v107) >> 32;
              }
              if (sub_22F1E3C34((_QWORD *)v77, v97, v107))
                LODWORD(v97) = v107;
              ++v105;
              v106 -= 8;
              if (!v106)
                goto LABEL_164;
              continue;
            }
          }
        }
        v97 = sub_22F1E2828((_QWORD *)v77, v97) >> 32;
        v96 = (char *)v179;
        v81 = v180;
        goto LABEL_163;
      }
      v69 = 0;
LABEL_202:
      if (v179 != (unint64_t *)&v181)
        free(v179);
      v150 = v141;
      v70 = v149;
LABEL_205:
      if (v69)
        v119 = (llvm::raw_ostream *)&v155;
      else
        v119 = (llvm::raw_ostream *)&v167;
      __p[0] = 0;
      __p[1] = 0;
      v154 = 0;
      LODWORD(v180) = 0;
      v184 = 0;
      v186 = 0;
      v187 = 1;
      v182 = 0;
      v183 = 0;
      v181 = 0;
      v179 = v145;
      v188 = __p;
      llvm::raw_ostream::SetBufferAndMode();
      sub_22F3B8394(*v70, (uint64_t)&v179, &v178, 0, 0);
      v120 = (uint64_t *)&v171;
      if (v69)
      {
        if ((unint64_t)(v158 - (_QWORD)v159) > 1)
          *v159++ = 2570;
        else
          llvm::raw_ostream::write((llvm::raw_ostream *)&v155, "\n\n");
        v120 = (uint64_t *)&v159;
      }
      v121 = *((_BYTE *)v188 + 23);
      if (v121 >= 0)
        v122 = v188;
      else
        v122 = *v188;
      v123 = v121 & 0x7F;
      if (v121 < 0)
        v123 = (unint64_t)v188[1];
      if (v123 >= v123 - 1)
        v124 = v123 - 1;
      else
        v124 = v123;
      v125 = (uint64_t *)&v170;
      if (v69)
        v125 = &v158;
      v126 = (_BYTE *)*v120;
      if (v124 <= *v125 - *v120)
      {
        if (v124)
        {
          memcpy(v126, v122, v124);
          v126 = (_BYTE *)(*v120 + v124);
          *v120 = (uint64_t)v126;
        }
      }
      else
      {
        llvm::raw_ostream::write(v119, (const char *)v122);
        v126 = (_BYTE *)*v120;
      }
      v127 = (uint64_t *)&v170;
      if (v69)
        v127 = &v158;
      v128 = *v127 - (_QWORD)v126;
      if (v142 == 20)
      {
        if (v128 > 0x10)
        {
          v126[16] = 10;
          *(_OWORD *)v126 = *(_OWORD *)" { \n  <#code#>\n}\n";
          v131 = *v120 + 17;
LABEL_244:
          *v120 = v131;
          goto LABEL_234;
        }
        v129 = v119;
        v130 = " { \n  <#code#>\n}\n";
      }
      else
      {
        if (v128 > 1)
        {
          *(_WORD *)v126 = 2619;
          v131 = *v120 + 2;
          goto LABEL_244;
        }
        v129 = v119;
        v130 = ";\n";
      }
      llvm::raw_ostream::write(v129, v130);
LABEL_234:
      if (!v69)
      {
        if (v170 == v171)
          llvm::raw_ostream::write((llvm::raw_ostream *)&v167, "\n");
        else
          *v171++ = 10;
      }
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v179);
      if (SHIBYTE(v154) < 0)
        operator delete(__p[0]);
      v70 = v149 + 4;
      if (v149 + 4 == (unint64_t *)v13)
        goto LABEL_249;
    }
  }
  v69 = 0;
LABEL_249:
  v132 = *((_BYTE *)v163 + 23);
  if (v132 < 0)
    v133 = v163[1];
  else
    v133 = (void *)*((unsigned __int8 *)v163 + 23);
  if (v133)
  {
    v134 = v132 >= 0 ? v163 : (void **)*v163;
    v135 = v132 >= 0 ? *((unsigned __int8 *)v163 + 23) : (size_t)v163[1];
    v136 = sub_22E729148(v134, v135, v69, 0, (uint64_t)&v179);
    a4(a5, &v179, v136);
    if (v185 < 0)
      operator delete(v182);
  }
  v137 = *((_BYTE *)v175 + 23);
  if (v137 < 0)
  {
    if (!v175[1])
      goto LABEL_273;
  }
  else if (!*((_BYTE *)v175 + 23))
  {
    goto LABEL_273;
  }
  if (v137 >= 0)
    v138 = v175;
  else
    v138 = *v175;
  if (v137 >= 0)
    v139 = *((unsigned __int8 *)v175 + 23);
  else
    v139 = (size_t)v175[1];
  v140 = sub_22E729148(v138, v139, v53, 0, (uint64_t)&v179);
  a4(a5, &v179, v140);
  if (v185 < 0)
    operator delete(v182);
LABEL_273:
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v155);
  if (SHIBYTE(v166) < 0)
    operator delete(v164);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v167);
  if (SHIBYTE(v177) < 0)
    operator delete(v176[0]);
  if (v146)
    operator delete(v146);
}

uint64_t sub_22EF4FFD4(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  llvm *v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[13];

  if ((uint64_t *)result != a2)
  {
    v39[11] = v5;
    v39[12] = v6;
    v11 = (uint64_t *)result;
    while (1)
    {
      v12 = *v11;
      result = sub_22F3E8F0C(a3, 0);
      v13 = *(_QWORD *)(v12 + 40);
      if ((v13 & 7) != 0)
        v14 = 0;
      else
        v14 = v13 & 0xFFFFFFFFFFFFFFF8;
      if (result == v14)
        goto LABEL_7;
      v15 = sub_22F259248(v12);
      sub_22EF4FFD4(v15);
      v16 = (*a5)++;
      v37 = 0;
      result = sub_22ECB1B60(*(_QWORD *)a4, *(_DWORD *)(a4 + 16), v12, &v37);
      if ((result & 1) != 0)
        goto LABEL_7;
      v17 = v37;
      v38 = v37;
      v18 = *(_DWORD *)(a4 + 8);
      v19 = *(unsigned int *)(a4 + 16);
      if (4 * v18 + 4 >= (3 * v19))
        break;
      v20 = *(_DWORD *)(a4 + 16);
      if ((int)v19 + ~v18 - *(_DWORD *)(a4 + 12) <= v19 >> 3)
        goto LABEL_16;
LABEL_12:
      *(_DWORD *)(a4 + 8) = v18 + 1;
      if (*(_QWORD *)v17 != -4096)
        --*(_DWORD *)(a4 + 12);
      *(_QWORD *)v17 = v12;
      *(_DWORD *)(v17 + 8) = v16;
LABEL_7:
      if (++v11 == a2)
        return result;
    }
    v20 = 2 * v19;
LABEL_16:
    v36 = v16;
    v21 = *(llvm **)a4;
    v22 = (v20 - 1) | ((unint64_t)(v20 - 1) >> 1);
    v23 = v22 | (v22 >> 2) | ((v22 | (v22 >> 2)) >> 4);
    v24 = ((v23 | (v23 >> 8)) >> 16) | v23 | (v23 >> 8);
    if ((v24 + 1) > 0x40)
      v25 = v24 + 1;
    else
      v25 = 64;
    *(_DWORD *)(a4 + 16) = v25;
    v26 = (_QWORD *)MEMORY[0x23489D23C](16 * v25, 8);
    *(_QWORD *)a4 = v26;
    if (v21)
    {
      *(_QWORD *)(a4 + 8) = 0;
      v27 = *(unsigned int *)(a4 + 16);
      if ((_DWORD)v27)
      {
        v28 = 16 * v27;
        do
        {
          *v26 = -4096;
          v26 += 2;
          v28 -= 16;
        }
        while (v28);
      }
      v35 = (void *)(16 * v19);
      if ((_DWORD)v19)
      {
        v29 = (_DWORD *)((char *)v21 + 8);
        v30 = 16 * v19;
        do
        {
          v31 = *((_QWORD *)v29 - 1);
          if ((v31 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v39[0] = 0;
            sub_22ECB1B60(*(_QWORD *)a4, *(_DWORD *)(a4 + 16), v31, v39);
            v32 = v39[0];
            *(_QWORD *)v39[0] = v31;
            *(_DWORD *)(v32 + 8) = *v29;
            ++*(_DWORD *)(a4 + 8);
          }
          v29 += 4;
          v30 -= 16;
        }
        while (v30);
      }
      llvm::deallocate_buffer(v21, v35);
      v26 = *(_QWORD **)a4;
      LODWORD(v33) = *(_DWORD *)(a4 + 16);
    }
    else
    {
      *(_QWORD *)(a4 + 8) = 0;
      v33 = *(unsigned int *)(a4 + 16);
      if ((_DWORD)v33)
      {
        v34 = 0;
        do
        {
          v26[v34] = -4096;
          v34 += 2;
        }
        while (2 * v33 != v34);
      }
    }
    result = sub_22ECB1B60((uint64_t)v26, v33, v12, &v38);
    v18 = *(_DWORD *)(a4 + 8);
    v17 = v38;
    v16 = v36;
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_22EF5024C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 40 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 40 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *sub_22EF502E4(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm *v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 40 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 40 * v10;
      do
      {
        *result = -1;
        result += 5;
        v11 -= 40;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 40 * v3;
      v13 = v4;
      do
      {
        v14 = *(_QWORD *)v13;
        if (*(_QWORD *)v13 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v19 = 0;
          sub_22EF5024C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v19);
          v15 = v19;
          *v19 = *(_QWORD *)v13;
          v16 = *(_OWORD *)((char *)v13 + 8);
          *(_OWORD *)(v15 + 3) = *(_OWORD *)((char *)v13 + 24);
          *(_OWORD *)(v15 + 1) = v16;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 = (llvm *)((char *)v13 + 40);
        v12 -= 40;
      }
      while (v12);
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(40 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v17 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v17)
    {
      v18 = 40 * v17;
      do
      {
        *result = -1;
        result += 5;
        v18 -= 40;
      }
      while (v18);
    }
  }
  return result;
}

unint64_t sub_22EF5043C(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  result = sub_22F2781C0(a2);
  if (result != v6)
  {
    v7 = result;
    v8 = v6;
    do
    {
      v9 = *(_QWORD *)(v7 + 56);
      if ((v9 & 0x20000) != 0)
        v10 = 0;
      else
        v10 = 24;
      if ((v9 & 0x20000) != 0)
        v11 = a1;
      else
        v11 = a1 + 24;
      v12 = *(_QWORD *)(v7 + 40);
      v15 = 0;
      result = sub_22EF5024C(*(_QWORD *)(a1 + v10), *(_DWORD *)(v11 + 16), v12, &v15);
      v13 = v15;
      if ((_DWORD)result)
        v14 = v15 == *(_QWORD *)(a1 + v10) + 40 * *(unsigned int *)(v11 + 16);
      else
        v14 = 1;
      if (!v14)
      {
        *(_DWORD *)(v15 + 28) |= a3;
        if (!*(_QWORD *)(v13 + 32))
          *(_QWORD *)(v13 + 32) = v7;
      }
      do
        v7 = *(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v7 && (*(_DWORD *)(v7 + 28) & 0x7F) != 0x18);
    }
    while (v7 != v8);
  }
  return result;
}

void sub_22EF50528(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  void *v21;
  void **v22;
  size_t v23;
  char v24;
  size_t v25;
  __int128 *v26;
  size_t v27;
  int v28;
  BOOL v29;
  __int128 *v30;
  _DWORD *v31;
  int v32;
  _DWORD *v33;
  int v34;
  void *v35;
  void **v36;
  size_t v37;
  char v38;
  size_t v39;
  __int128 *v40;
  size_t v41;
  int v42;
  BOOL v43;
  unint64_t v44;
  int v45;
  _DWORD *v46;
  int v47;
  void *v48;
  void **v49;
  size_t v50;
  char v51;
  size_t v52;
  __int128 *v53;
  size_t v54;
  int v55;
  BOOL v56;
  __int128 *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  unint64_t v63;
  int v64;
  int v65;
  void *v66;
  void **v67;
  size_t v68;
  char v69;
  size_t v70;
  __int128 *v71;
  size_t v72;
  int v73;
  BOOL v74;
  __int128 *v75;
  int v76;
  int v77;
  void *v78;
  void **v79;
  size_t v80;
  char v81;
  size_t v82;
  __int128 *v83;
  size_t v84;
  int v85;
  BOOL v86;
  __int128 v87;
  int v88;
  BOOL v89;
  __int128 v90;
  int v91;
  uint64_t v92;
  _DWORD *v93;
  _BOOL4 v94;
  unint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  int v100;
  __int128 *v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 *v105;
  __int128 *v106;
  __int128 *v107;
  __int128 *v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  unint64_t v121;
  BOOL v123;
  uint64_t v124;
  _OWORD *v125;
  _OWORD *v126;
  __int128 v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  __int128 v132;
  uint64_t v133;
  int64_t v134;
  int64_t v135;
  int64_t v136;
  uint64_t v137;
  __int128 *v138;
  __int128 *v139;
  __int128 v140;
  int v141;
  void *v142;
  __int128 v143;
  __int128 *v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  int64_t v148;
  int v149;
  void *v150;
  void **v151;
  size_t v152;
  char v153;
  size_t v154;
  __int128 *v155;
  size_t v156;
  int v157;
  BOOL v158;
  __int128 v159;
  __int128 *v160;
  _OWORD *v161;
  uint64_t v162;
  __int128 v163;
  _OWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  __int128 *v174;
  __int128 v175;
  int v176;
  __int128 v177;
  __int128 *v178;
  __int128 v179;
  unint64_t v180;
  int v181;
  int v182;
  void *v183;
  void **v184;
  size_t v185;
  unsigned __int8 v186;
  size_t v187;
  void **v188;
  size_t v189;
  int v190;
  BOOL v191;
  __int128 v192;
  unint64_t v194;
  _OWORD *v195;
  __int128 v196;
  int v197;
  uint64_t v198;
  unint64_t v199;
  __int128 v200;
  BOOL v201;
  int v202;
  __int128 *v203;
  __int128 *v204;
  _DWORD *v206;
  __int128 v207;
  int64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  __int128 *v212;
  int v213;
  int v214;
  unint64_t v215;
  _OWORD *v216;
  unint64_t v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 *v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  __int128 v228;
  __int128 v229;
  void *v230;
  size_t v231;
  unsigned __int8 v232;
  void *v233;
  size_t v234;
  unsigned __int8 v235;
  uint64_t v236;

  v236 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v212 = (__int128 *)(a2 - 32);
  v215 = a2;
  v203 = (__int128 *)(a2 - 96);
  v204 = (__int128 *)(a2 - 64);
  while (2)
  {
    v6 = (_OWORD *)a1;
    v7 = v215 - a1;
    v8 = (uint64_t)(v215 - a1) >> 5;
    switch(v8)
    {
      case 0:
      case 1:
        return;
      case 2:
        v101 = (__int128 *)(v215 - 32);
        if (sub_22EF51468(*(_QWORD *)(v215 - 32), *(_DWORD *)(v215 - 16), (_DWORD *)a1))
        {
          v102 = *(_OWORD *)(a1 + 16);
          v228 = *(_OWORD *)a1;
          v229 = v102;
          v103 = *(_OWORD *)(v215 - 16);
          *(_OWORD *)a1 = *v101;
          *(_OWORD *)(a1 + 16) = v103;
          v104 = v229;
          *v101 = v228;
          *(_OWORD *)(v215 - 16) = v104;
        }
        return;
      case 3:
        sub_22EF51560((__int128 *)a1, (__int128 *)(a1 + 32), v212);
        return;
      case 4:
        sub_22EF518D8(a1, a1 + 32, a1 + 64, (uint64_t)v212);
        return;
      case 5:
        v105 = (__int128 *)(a1 + 32);
        v106 = (__int128 *)(a1 + 64);
        v107 = (__int128 *)(a1 + 96);
        sub_22EF518D8(a1, a1 + 32, a1 + 64, a1 + 96);
        v108 = (__int128 *)(v215 - 32);
        if (sub_22EF51468(*(_QWORD *)(v215 - 32), *(_DWORD *)(v215 - 16), (_DWORD *)(a1 + 96)))
        {
          v110 = *(_OWORD *)(a1 + 112);
          v228 = *v107;
          v109 = v228;
          v229 = v110;
          v111 = *(_OWORD *)(v215 - 16);
          *v107 = *v108;
          *(_OWORD *)(a1 + 112) = v111;
          *v108 = v109;
          *(_OWORD *)(v215 - 16) = v110;
          if (sub_22EF51468(*(_QWORD *)(a1 + 96), *(_DWORD *)(a1 + 112), (_DWORD *)(a1 + 64)))
          {
            v113 = *v106;
            v112 = *(_OWORD *)(a1 + 80);
            v114 = *(_OWORD *)(a1 + 112);
            *v106 = *v107;
            *(_OWORD *)(a1 + 80) = v114;
            *v107 = v113;
            *(_OWORD *)(a1 + 112) = v112;
            if (sub_22EF51468(*(_QWORD *)(a1 + 64), *(_DWORD *)(a1 + 80), (_DWORD *)(a1 + 32)))
            {
              v116 = *v105;
              v115 = *(_OWORD *)(a1 + 48);
              v117 = *(_OWORD *)(a1 + 80);
              *v105 = *v106;
              *(_OWORD *)(a1 + 48) = v117;
              *v106 = v116;
              *(_OWORD *)(a1 + 80) = v115;
              if (sub_22EF51468(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 48), (_DWORD *)a1))
              {
                v118 = *(_OWORD *)(a1 + 16);
                v228 = *(_OWORD *)a1;
                v229 = v118;
                v119 = *(_OWORD *)(a1 + 48);
                *(_OWORD *)a1 = *v105;
                *(_OWORD *)(a1 + 16) = v119;
                v120 = v229;
                *v105 = v228;
                *(_OWORD *)(a1 + 48) = v120;
              }
            }
          }
        }
        return;
      default:
        if (v7 <= 767)
        {
          v121 = a1 + 32;
          v123 = a1 == v215 || v121 == v215;
          if ((a4 & 1) == 0)
          {
            if (!v123)
            {
              v194 = a1 - 32;
              do
              {
                v195 = v6;
                v6 = (_OWORD *)v121;
                if (sub_22EF51468(*((_QWORD *)v195 + 4), *(_DWORD *)(v121 + 16), v195))
                {
                  v196 = *v6;
                  v197 = *((_DWORD *)v6 + 4);
                  *(_QWORD *)&v228 = *(_QWORD *)((char *)v6 + 20);
                  DWORD2(v228) = *((_DWORD *)v6 + 7);
                  v223 = v196;
                  v198 = v196;
                  v199 = v194;
                  do
                  {
                    v200 = *(_OWORD *)(v199 + 48);
                    *(_OWORD *)(v199 + 64) = *(_OWORD *)(v199 + 32);
                    *(_OWORD *)(v199 + 80) = v200;
                    v201 = sub_22EF51468(v198, v197, (_DWORD *)v199);
                    v199 -= 32;
                  }
                  while (v201);
                  *(_OWORD *)(v199 + 64) = v223;
                  *(_DWORD *)(v199 + 80) = v197;
                  v202 = DWORD2(v228);
                  *(_QWORD *)(v199 + 84) = v228;
                  *(_DWORD *)(v199 + 92) = v202;
                }
                v121 = (unint64_t)(v6 + 2);
                v194 += 32;
              }
              while (v6 + 2 != (_OWORD *)v215);
            }
            return;
          }
          if (v123)
            return;
          v124 = 0;
          v125 = v6;
          while (1)
          {
            v126 = v125;
            v125 = (_OWORD *)v121;
            if (sub_22EF51468(*((_QWORD *)v126 + 4), *(_DWORD *)(v121 + 16), v126))
            {
              v127 = *v125;
              v128 = *((_DWORD *)v125 + 4);
              *(_QWORD *)&v228 = *(_QWORD *)((char *)v125 + 20);
              DWORD2(v228) = *((_DWORD *)v125 + 7);
              v222 = v127;
              v129 = v127;
              v130 = v124;
              while (1)
              {
                v131 = (char *)v6 + v130;
                v132 = *(_OWORD *)((char *)v6 + v130 + 16);
                *((_OWORD *)v131 + 2) = *(_OWORD *)((char *)v6 + v130);
                *((_OWORD *)v131 + 3) = v132;
                if (!v130)
                  break;
                v130 -= 32;
                if (!sub_22EF51468(v129, v128, (_OWORD *)((char *)v6 + v130)))
                {
                  v133 = (uint64_t)v6 + v130 + 32;
                  goto LABEL_212;
                }
              }
              v133 = (uint64_t)v6;
LABEL_212:
              *(_OWORD *)v133 = v222;
              *(_DWORD *)(v133 + 16) = v128;
              *(_QWORD *)(v133 + 20) = v228;
              *(_DWORD *)(v133 + 28) = DWORD2(v228);
            }
            v121 = (unint64_t)(v125 + 2);
            v124 += 32;
            if (v125 + 2 == (_OWORD *)v215)
              return;
          }
        }
        v221 = (__int128 *)a1;
        if (!a3)
        {
          if (a1 == v215)
            return;
          v134 = (unint64_t)(v8 - 2) >> 1;
          v135 = v134;
LABEL_217:
          v136 = v135;
          if (v134 < v135)
            goto LABEL_258;
          v137 = (2 * v135) | 1;
          v138 = &v221[2 * v137];
          if (2 * v135 + 2 < v8 && sub_22EF51468(*(_QWORD *)v138, *((_DWORD *)v138 + 4), (_DWORD *)v138 + 8))
          {
            v138 += 2;
            v137 = 2 * v136 + 2;
          }
          v139 = &v221[2 * v136];
          if (sub_22EF51468(*(_QWORD *)v138, *((_DWORD *)v138 + 4), v139))
            goto LABEL_258;
          v208 = v136;
          v140 = *v139;
          v141 = *((_DWORD *)v139 + 4);
          v142 = *(void **)((char *)v139 + 20);
          LODWORD(v231) = *((_DWORD *)v139 + 7);
          v230 = v142;
          v143 = v138[1];
          *v139 = *v138;
          v139[1] = v143;
          if (v134 < v137)
          {
            v144 = v138;
            goto LABEL_257;
          }
          v210 = v140;
          v219 = v140;
          v213 = v141;
          while (1)
          {
            v145 = 2 * v137;
            v137 = (2 * v137) | 1;
            v144 = &v221[2 * v137];
            v146 = v145 + 2;
            if (v145 + 2 < v8 && sub_22EF51468(*(_QWORD *)v144, *((_DWORD *)v144 + 4), (_DWORD *)v144 + 8))
            {
              v144 += 2;
              v137 = v146;
            }
            v147 = *((_DWORD *)v144 + 4);
            if (v141 == v147)
            {
              v148 = v134;
              v226 = *(_QWORD *)(*(_QWORD *)v144 + 40);
              sub_22F1D3A38(&v226, (char *)&v228);
              v225 = *(_QWORD *)(v210 + 40);
              sub_22F1D3A38(&v225, (char *)&v233);
              v149 = (char)v235;
              v150 = v233;
              if ((v235 & 0x80u) == 0)
                v151 = &v233;
              else
                v151 = (void **)v233;
              if ((v235 & 0x80u) == 0)
                v152 = v235;
              else
                v152 = v234;
              v153 = BYTE7(v229);
              if ((SBYTE7(v229) & 0x80u) == 0)
                v154 = BYTE7(v229) & 0x7F;
              else
                v154 = *((_QWORD *)&v228 + 1);
              if ((SBYTE7(v229) & 0x80u) == 0)
                v155 = &v228;
              else
                v155 = (__int128 *)v228;
              if (v152 >= v154)
                v156 = v154;
              else
                v156 = v152;
              v157 = memcmp(v155, v151, v156);
              if (v157)
                v158 = v157 < 0;
              else
                v158 = v154 < v152;
              if (v149 < 0)
              {
                operator delete(v150);
                v153 = BYTE7(v229);
              }
              v134 = v148;
              if (v153 < 0)
                operator delete((void *)v228);
              v141 = v213;
              if (v158)
              {
LABEL_256:
                v144 = v138;
                v140 = v219;
LABEL_257:
                *v144 = v140;
                *((_DWORD *)v144 + 4) = v141;
                *(_QWORD *)((char *)v144 + 20) = v230;
                *((_DWORD *)v144 + 7) = v231;
                v136 = v208;
LABEL_258:
                v135 = v136 - 1;
                if (!v136)
                {
                  v160 = v221;
                  v161 = (_OWORD *)v215;
                  while (1)
                  {
                    v162 = 0;
                    v163 = v160[1];
                    v228 = *v160;
                    v229 = v163;
                    v164 = v160;
                    do
                    {
                      v165 = (uint64_t)&v164[2 * v162 + 2];
                      v166 = (2 * v162) | 1;
                      v167 = 2 * v162 + 2;
                      if (v167 < v8 && sub_22EF51468(*(_QWORD *)v165, v164[2 * v162 + 3], &v164[2 * v162 + 4]))
                      {
                        v165 += 32;
                        v166 = v167;
                      }
                      v168 = *(_OWORD *)(v165 + 16);
                      *v164 = *(_OWORD *)v165;
                      v164[1] = v168;
                      v164 = (_OWORD *)v165;
                      v162 = v166;
                    }
                    while (v166 <= (uint64_t)((unint64_t)(v8 - 2) >> 1));
                    v161 -= 2;
                    if ((_OWORD *)v165 == v161)
                    {
                      v179 = v229;
                      *(_OWORD *)v165 = v228;
                      *(_OWORD *)(v165 + 16) = v179;
                    }
                    else
                    {
                      v169 = v161[1];
                      *(_OWORD *)v165 = *v161;
                      *(_OWORD *)(v165 + 16) = v169;
                      v170 = v229;
                      *v161 = v228;
                      v161[1] = v170;
                      v171 = v165 - (_QWORD)v160 + 32;
                      if (v171 >= 33)
                      {
                        v172 = ((unint64_t)v171 >> 5) - 2;
                        v173 = v172 >> 1;
                        v174 = &v160[2 * (v172 >> 1)];
                        if (sub_22EF51468(*(_QWORD *)v174, *((_DWORD *)v174 + 4), (_DWORD *)v165))
                        {
                          v216 = v161;
                          v175 = *(_OWORD *)v165;
                          v176 = *(_DWORD *)(v165 + 16);
                          v226 = *(_QWORD *)(v165 + 20);
                          v227 = *(_DWORD *)(v165 + 28);
                          v177 = v174[1];
                          *(_OWORD *)v165 = *v174;
                          *(_OWORD *)(v165 + 16) = v177;
                          if (v172 >= 2)
                          {
                            v211 = v175;
                            v220 = v175;
                            v214 = v176;
                            while (1)
                            {
                              v180 = v173 - 1;
                              v173 = (v173 - 1) >> 1;
                              v178 = &v221[2 * v173];
                              v181 = *((_DWORD *)v178 + 4);
                              if (v176 == v181)
                              {
                                v225 = *(_QWORD *)(*(_QWORD *)v178 + 40);
                                sub_22F1D3A38(&v225, (char *)&v233);
                                v224 = *(_QWORD *)(v211 + 40);
                                sub_22F1D3A38(&v224, (char *)&v230);
                                v182 = (char)v232;
                                v183 = v230;
                                if ((v232 & 0x80u) == 0)
                                  v184 = &v230;
                                else
                                  v184 = (void **)v230;
                                if ((v232 & 0x80u) == 0)
                                  v185 = v232;
                                else
                                  v185 = v231;
                                v186 = v235;
                                if ((v235 & 0x80u) == 0)
                                  v187 = v235 & 0x7F;
                                else
                                  v187 = v234;
                                if ((v235 & 0x80u) == 0)
                                  v188 = &v233;
                                else
                                  v188 = (void **)v233;
                                if (v185 >= v187)
                                  v189 = v187;
                                else
                                  v189 = v185;
                                v190 = memcmp(v188, v184, v189);
                                if (v190)
                                  v191 = v190 < 0;
                                else
                                  v191 = v187 < v185;
                                if (v182 < 0)
                                {
                                  operator delete(v183);
                                  v186 = v235;
                                }
                                v175 = v220;
                                if ((v186 & 0x80) != 0)
                                {
                                  operator delete(v233);
                                  v175 = v220;
                                }
                                v176 = v214;
                                if (!v191)
                                  break;
                              }
                              else if (v176 <= v181)
                              {
                                break;
                              }
                              v192 = v178[1];
                              *v174 = *v178;
                              v174[1] = v192;
                              v174 = &v221[2 * v173];
                              if (v180 <= 1)
                                goto LABEL_299;
                            }
                          }
                          v178 = v174;
LABEL_299:
                          *v178 = v175;
                          *((_DWORD *)v178 + 4) = v176;
                          *(_QWORD *)((char *)v178 + 20) = v226;
                          *((_DWORD *)v178 + 7) = v227;
                          v160 = v221;
                          v161 = v216;
                        }
                      }
                    }
                    if (v8-- <= 2)
                      return;
                  }
                }
                goto LABEL_217;
              }
            }
            else if (v141 > v147)
            {
              goto LABEL_256;
            }
            v159 = v144[1];
            *v138 = *v144;
            v138[1] = v159;
            v138 = v144;
            v140 = v219;
            if (v134 < v137)
              goto LABEL_257;
          }
        }
        v9 = (unint64_t)v8 >> 1;
        v10 = &v6[2 * ((unint64_t)v8 >> 1)];
        if ((unint64_t)v7 <= 0x1000)
        {
          sub_22EF51560(v10, v6, v212);
        }
        else
        {
          sub_22EF51560(v6, v10, v212);
          sub_22EF51560(v221 + 2, v10 - 2, v204);
          v11 = &v221[2 * v9 + 2];
          sub_22EF51560(v221 + 4, v11, v203);
          v6 = v221;
          sub_22EF51560(v10 - 2, v10, v11);
          v12 = v221[1];
          v228 = *v221;
          v229 = v12;
          v13 = v10[1];
          *v221 = *v10;
          v221[1] = v13;
          v14 = v229;
          *v10 = v228;
          v10[1] = v14;
        }
        --a3;
        if ((a4 & 1) == 0 && !sub_22EF51468(*((_QWORD *)v6 - 4), *((_DWORD *)v6 - 4), v6))
        {
          v90 = *v6;
          v91 = *((_DWORD *)v6 + 4);
          v233 = *(void **)((char *)v6 + 20);
          LODWORD(v234) = *((_DWORD *)v6 + 7);
          v218 = v90;
          v92 = v90;
          if (sub_22EF51468(v90, v91, v212))
          {
            a1 = (unint64_t)v6;
            do
              a1 += 32;
            while (!sub_22EF51468(v92, v91, (_DWORD *)a1));
          }
          else
          {
            v93 = v6 + 2;
            do
            {
              a1 = (unint64_t)v93;
              if ((unint64_t)v93 >= v215)
                break;
              v94 = sub_22EF51468(v92, v91, v93);
              v93 = (_DWORD *)(a1 + 32);
            }
            while (!v94);
          }
          v95 = v215;
          if (a1 < v215)
          {
            v95 = v215;
            do
              v95 -= 32;
            while (sub_22EF51468(v92, v91, (_DWORD *)v95));
          }
          while (a1 < v95)
          {
            v96 = *(_OWORD *)(a1 + 16);
            v228 = *(_OWORD *)a1;
            v229 = v96;
            v97 = *(_OWORD *)(v95 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v95;
            *(_OWORD *)(a1 + 16) = v97;
            v98 = v229;
            *(_OWORD *)v95 = v228;
            *(_OWORD *)(v95 + 16) = v98;
            do
              a1 += 32;
            while (!sub_22EF51468(v92, v91, (_DWORD *)a1));
            do
              v95 -= 32;
            while (sub_22EF51468(v92, v91, (_DWORD *)v95));
          }
          if ((__int128 *)(a1 - 32) != v221)
          {
            v99 = *(_OWORD *)(a1 - 16);
            *v221 = *(_OWORD *)(a1 - 32);
            v221[1] = v99;
          }
          a4 = 0;
          *(_OWORD *)(a1 - 32) = v218;
          *(_DWORD *)(a1 - 16) = v91;
          v100 = v234;
          *(_QWORD *)(a1 - 12) = v233;
          *(_DWORD *)(a1 - 4) = v100;
          continue;
        }
        v209 = a3;
        v15 = 0;
        v16 = *v6;
        v17 = *((_DWORD *)v6 + 4);
        v230 = *(void **)((char *)v6 + 20);
        LODWORD(v231) = *((_DWORD *)v6 + 7);
        v207 = v16;
        v18 = v16;
        while (1)
        {
          v19 = v6[v15 + 3];
          if (v17 != v19)
            break;
          v226 = *(_QWORD *)(*(_QWORD *)&v6[v15 + 2] + 40);
          sub_22F1D3A38(&v226, (char *)&v228);
          v225 = *(_QWORD *)(v18 + 40);
          sub_22F1D3A38(&v225, (char *)&v233);
          v20 = (char)v235;
          v21 = v233;
          if ((v235 & 0x80u) == 0)
            v22 = &v233;
          else
            v22 = (void **)v233;
          if ((v235 & 0x80u) == 0)
            v23 = v235;
          else
            v23 = v234;
          v24 = BYTE7(v229);
          if ((SBYTE7(v229) & 0x80u) == 0)
            v25 = BYTE7(v229) & 0x7F;
          else
            v25 = *((_QWORD *)&v228 + 1);
          if ((SBYTE7(v229) & 0x80u) == 0)
            v26 = &v228;
          else
            v26 = (__int128 *)v228;
          if (v23 >= v25)
            v27 = v25;
          else
            v27 = v23;
          v28 = memcmp(v26, v22, v27);
          if (v28)
            v29 = v28 < 0;
          else
            v29 = v25 < v23;
          if (v20 < 0)
          {
            operator delete(v21);
            if ((BYTE7(v229) & 0x80) == 0)
              goto LABEL_33;
          }
          else if ((v24 & 0x80) == 0)
          {
            goto LABEL_33;
          }
          operator delete((void *)v228);
LABEL_33:
          v6 = v221;
          if (!v29)
            goto LABEL_39;
LABEL_36:
          v15 += 2;
        }
        if (v17 > v19)
          goto LABEL_36;
LABEL_39:
        v217 = (unint64_t)&v6[v15 + 2];
        v30 = v212;
        if (v15 * 16)
        {
          while (2)
          {
            while (1)
            {
              v31 = v30;
              v32 = *((_DWORD *)v30 + 4);
              v30 -= 2;
              if (v17 == v32)
                break;
              if (v17 > v32)
                goto LABEL_102;
            }
            v33 = v31;
            v226 = *(_QWORD *)(*(_QWORD *)v31 + 40);
            sub_22F1D3A38(&v226, (char *)&v228);
            v225 = *(_QWORD *)(v18 + 40);
            sub_22F1D3A38(&v225, (char *)&v233);
            v34 = (char)v235;
            v35 = v233;
            if ((v235 & 0x80u) == 0)
              v36 = &v233;
            else
              v36 = (void **)v233;
            if ((v235 & 0x80u) == 0)
              v37 = v235;
            else
              v37 = v234;
            v38 = BYTE7(v229);
            if ((SBYTE7(v229) & 0x80u) == 0)
              v39 = BYTE7(v229) & 0x7F;
            else
              v39 = *((_QWORD *)&v228 + 1);
            if ((SBYTE7(v229) & 0x80u) == 0)
              v40 = &v228;
            else
              v40 = (__int128 *)v228;
            if (v37 >= v39)
              v41 = v39;
            else
              v41 = v37;
            v42 = memcmp(v40, v36, v41);
            if (v42)
              v43 = v42 < 0;
            else
              v43 = v39 < v37;
            if (v34 < 0)
            {
              operator delete(v35);
              if ((BYTE7(v229) & 0x80) != 0)
                goto LABEL_66;
            }
            else
            {
              if ((v38 & 0x80) == 0)
                goto LABEL_61;
LABEL_66:
              operator delete((void *)v228);
            }
LABEL_61:
            v31 = v33;
            if (v43)
              goto LABEL_102;
            continue;
          }
        }
        v31 = (_DWORD *)v215;
        if (v217 < v215)
        {
          v31 = v212;
          v44 = (unint64_t)&v6[v15 + 2];
          while (1)
          {
            v45 = v31[4];
            if (v17 == v45)
              break;
            if (v17 > v45 || v44 >= (unint64_t)v31)
              goto LABEL_102;
LABEL_99:
            v31 -= 8;
          }
          v46 = v31;
          v226 = *(_QWORD *)(*(_QWORD *)v31 + 40);
          sub_22F1D3A38(&v226, (char *)&v228);
          v225 = *(_QWORD *)(v18 + 40);
          sub_22F1D3A38(&v225, (char *)&v233);
          v47 = (char)v235;
          v48 = v233;
          if ((v235 & 0x80u) == 0)
            v49 = &v233;
          else
            v49 = (void **)v233;
          if ((v235 & 0x80u) == 0)
            v50 = v235;
          else
            v50 = v234;
          v51 = BYTE7(v229);
          if ((SBYTE7(v229) & 0x80u) == 0)
            v52 = BYTE7(v229) & 0x7F;
          else
            v52 = *((_QWORD *)&v228 + 1);
          if ((SBYTE7(v229) & 0x80u) == 0)
            v53 = &v228;
          else
            v53 = (__int128 *)v228;
          if (v50 >= v52)
            v54 = v52;
          else
            v54 = v50;
          v55 = memcmp(v53, v49, v54);
          if (v55)
            v56 = v55 >= 0;
          else
            v56 = v52 >= v50;
          if (v47 < 0)
          {
            operator delete(v48);
            if ((BYTE7(v229) & 0x80) != 0)
              goto LABEL_101;
          }
          else
          {
            if ((v51 & 0x80) == 0)
              goto LABEL_90;
LABEL_101:
            operator delete((void *)v228);
          }
LABEL_90:
          v44 = v217;
          v31 = v46;
          if (v217 >= (unint64_t)v46 || !v56)
            goto LABEL_102;
          goto LABEL_99;
        }
LABEL_102:
        a1 = v217;
        v206 = v31;
        if (v217 >= (unint64_t)v31)
          goto LABEL_161;
        v59 = (__int128 *)v31;
        while (2)
        {
          v60 = *(_OWORD *)(a1 + 16);
          v228 = *(_OWORD *)a1;
          v229 = v60;
          v61 = v59[1];
          *(_OWORD *)a1 = *v59;
          *(_OWORD *)(a1 + 16) = v61;
          v62 = v229;
          *v59 = v228;
          v59[1] = v62;
          v63 = a1 + 32;
          while (2)
          {
            while (2)
            {
              a1 = v63;
              v64 = *(_DWORD *)(v63 + 16);
              v63 += 32;
              if (v17 == v64)
              {
                v226 = *(_QWORD *)(*(_QWORD *)a1 + 40);
                sub_22F1D3A38(&v226, (char *)&v228);
                v225 = *(_QWORD *)(v18 + 40);
                sub_22F1D3A38(&v225, (char *)&v233);
                v65 = (char)v235;
                v66 = v233;
                if ((v235 & 0x80u) == 0)
                  v67 = &v233;
                else
                  v67 = (void **)v233;
                if ((v235 & 0x80u) == 0)
                  v68 = v235;
                else
                  v68 = v234;
                v69 = BYTE7(v229);
                if ((SBYTE7(v229) & 0x80u) == 0)
                  v70 = BYTE7(v229) & 0x7F;
                else
                  v70 = *((_QWORD *)&v228 + 1);
                if ((SBYTE7(v229) & 0x80u) == 0)
                  v71 = &v228;
                else
                  v71 = (__int128 *)v228;
                if (v68 >= v70)
                  v72 = v70;
                else
                  v72 = v68;
                v73 = memcmp(v71, v67, v72);
                if (v73)
                  v74 = v73 < 0;
                else
                  v74 = v70 < v68;
                if (v65 < 0)
                {
                  operator delete(v66);
                  if ((BYTE7(v229) & 0x80) != 0)
                    goto LABEL_131;
                }
                else
                {
                  if ((v69 & 0x80) == 0)
                    goto LABEL_126;
LABEL_131:
                  operator delete((void *)v228);
                }
LABEL_126:
                if (!v74)
                  goto LABEL_132;
                continue;
              }
              break;
            }
            if (v17 > v64)
              continue;
            break;
          }
LABEL_132:
          v75 = v59 - 2;
          while (2)
          {
            while (2)
            {
              v59 = v75;
              v76 = *((_DWORD *)v75 + 4);
              v75 -= 2;
              if (v17 == v76)
              {
                v226 = *(_QWORD *)(*(_QWORD *)v59 + 40);
                sub_22F1D3A38(&v226, (char *)&v228);
                v225 = *(_QWORD *)(v18 + 40);
                sub_22F1D3A38(&v225, (char *)&v233);
                v77 = (char)v235;
                v78 = v233;
                if ((v235 & 0x80u) == 0)
                  v79 = &v233;
                else
                  v79 = (void **)v233;
                if ((v235 & 0x80u) == 0)
                  v80 = v235;
                else
                  v80 = v234;
                v81 = BYTE7(v229);
                if ((SBYTE7(v229) & 0x80u) == 0)
                  v82 = BYTE7(v229) & 0x7F;
                else
                  v82 = *((_QWORD *)&v228 + 1);
                if ((SBYTE7(v229) & 0x80u) == 0)
                  v83 = &v228;
                else
                  v83 = (__int128 *)v228;
                if (v80 >= v82)
                  v84 = v82;
                else
                  v84 = v80;
                v85 = memcmp(v83, v79, v84);
                if (v85)
                  v86 = v85 < 0;
                else
                  v86 = v82 < v80;
                if (v77 < 0)
                {
                  operator delete(v78);
                  if ((BYTE7(v229) & 0x80) != 0)
                    goto LABEL_159;
                }
                else
                {
                  if ((v81 & 0x80) == 0)
                    goto LABEL_154;
LABEL_159:
                  operator delete((void *)v228);
                }
LABEL_154:
                if (v86)
                  goto LABEL_160;
                continue;
              }
              break;
            }
            if (v17 <= v76)
              continue;
            break;
          }
LABEL_160:
          if (a1 < (unint64_t)v59)
            continue;
          break;
        }
LABEL_161:
        if ((__int128 *)(a1 - 32) != v221)
        {
          v87 = *(_OWORD *)(a1 - 16);
          *v221 = *(_OWORD *)(a1 - 32);
          v221[1] = v87;
        }
        *(_OWORD *)(a1 - 32) = v207;
        *(_DWORD *)(a1 - 16) = v17;
        v88 = v231;
        *(_QWORD *)(a1 - 12) = v230;
        *(_DWORD *)(a1 - 4) = v88;
        a3 = v209;
        if (v217 < (unint64_t)v206)
        {
LABEL_166:
          sub_22EF50528(v221, a1 - 32, v209, a4 & 1);
          a4 = 0;
          continue;
        }
        v89 = sub_22EF51640((uint64_t)v221, a1 - 32);
        if (!sub_22EF51640(a1, v215))
        {
          if (v89)
            continue;
          goto LABEL_166;
        }
        a2 = a1 - 32;
        a1 = (unint64_t)v221;
        if (!v89)
          goto LABEL_2;
        return;
    }
  }
}

BOOL sub_22EF51468(uint64_t a1, int a2, _DWORD *a3)
{
  int v3;
  int v5;
  void *v6;
  _QWORD *v7;
  size_t v8;
  char v9;
  void *v10;
  void **v11;
  size_t v12;
  int v13;
  _BOOL8 v14;
  uint64_t v16;
  _QWORD v17[2];
  unsigned __int8 v18;
  uint64_t v19;
  void *__p[2];
  char v21;

  v3 = a3[4];
  if (v3 != a2)
    return v3 > a2;
  v19 = *(_QWORD *)(a1 + 40);
  sub_22F1D3A38(&v19, (char *)__p);
  v16 = *(_QWORD *)(*(_QWORD *)a3 + 40);
  sub_22F1D3A38(&v16, (char *)v17);
  v5 = (char)v18;
  v6 = (void *)v17[0];
  if ((v18 & 0x80u) == 0)
    v7 = v17;
  else
    v7 = (_QWORD *)v17[0];
  if ((v18 & 0x80u) == 0)
    v8 = v18;
  else
    v8 = v17[1];
  v9 = v21;
  if (v21 >= 0)
    v10 = (void *)(v21 & 0x7F);
  else
    v10 = __p[1];
  if (v21 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if (v8 >= (unint64_t)v10)
    v12 = (size_t)v10;
  else
    v12 = v8;
  v13 = memcmp(v11, v7, v12);
  if (v13)
    v14 = v13 < 0;
  else
    v14 = (unint64_t)v10 < v8;
  if (v5 < 0)
  {
    operator delete(v6);
    if (v21 < 0)
LABEL_25:
      operator delete(__p[0]);
  }
  else if (v9 < 0)
  {
    goto LABEL_25;
  }
  return v14;
}

BOOL sub_22EF51560(__int128 *a1, __int128 *a2, __int128 *a3)
{
  BOOL v6;
  _BOOL8 result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v6 = sub_22EF51468(*(_QWORD *)a2, *((_DWORD *)a2 + 4), a1);
  result = sub_22EF51468(*(_QWORD *)a3, *((_DWORD *)a3 + 4), a2);
  if (v6)
  {
    if (result)
    {
      v9 = *a1;
      v8 = a1[1];
      v10 = a3[1];
      *a1 = *a3;
      a1[1] = v10;
    }
    else
    {
      v18 = *a1;
      v17 = a1[1];
      v19 = a2[1];
      *a1 = *a2;
      a1[1] = v19;
      *a2 = v18;
      a2[1] = v17;
      result = sub_22EF51468(*(_QWORD *)a3, *((_DWORD *)a3 + 4), a2);
      if (!result)
        return result;
      v9 = *a2;
      v8 = a2[1];
      v20 = a3[1];
      *a2 = *a3;
      a2[1] = v20;
    }
    *a3 = v9;
    a3[1] = v8;
  }
  else if (result)
  {
    v12 = *a2;
    v11 = a2[1];
    v13 = a3[1];
    *a2 = *a3;
    a2[1] = v13;
    *a3 = v12;
    a3[1] = v11;
    result = sub_22EF51468(*(_QWORD *)a2, *((_DWORD *)a2 + 4), a1);
    if (result)
    {
      v15 = *a1;
      v14 = a1[1];
      v16 = a2[1];
      *a1 = *a2;
      a1[1] = v16;
      *a2 = v15;
      a2[1] = v14;
    }
  }
  return result;
}

BOOL sub_22EF51640(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  int v39;

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (_OWORD *)(a2 - 32);
      if (sub_22EF51468(*(_QWORD *)(a2 - 32), *(_DWORD *)(a2 - 16), (_DWORD *)a1))
      {
        v8 = *(_OWORD *)a1;
        v7 = *(_OWORD *)(a1 + 16);
        v9 = v6[1];
        *(_OWORD *)a1 = *v6;
        *(_OWORD *)(a1 + 16) = v9;
        *v6 = v8;
        v6[1] = v7;
      }
      return 1;
    case 3:
      sub_22EF51560((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)(a2 - 32));
      return 1;
    case 4:
      sub_22EF518D8(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      v20 = (__int128 *)(a1 + 32);
      v21 = (__int128 *)(a1 + 64);
      v22 = (__int128 *)(a1 + 96);
      sub_22EF518D8(a1, a1 + 32, a1 + 64, a1 + 96);
      v24 = *(_QWORD *)(a2 - 32);
      v23 = a2 - 32;
      if (sub_22EF51468(v24, *(_DWORD *)(v23 + 16), (_DWORD *)(a1 + 96)))
      {
        v26 = *v22;
        v25 = *(_OWORD *)(a1 + 112);
        v27 = *(_OWORD *)(v23 + 16);
        *v22 = *(_OWORD *)v23;
        *(_OWORD *)(a1 + 112) = v27;
        *(_OWORD *)v23 = v26;
        *(_OWORD *)(v23 + 16) = v25;
        if (sub_22EF51468(*(_QWORD *)(a1 + 96), *(_DWORD *)(a1 + 112), (_DWORD *)(a1 + 64)))
        {
          v29 = *v21;
          v28 = *(_OWORD *)(a1 + 80);
          v30 = *(_OWORD *)(a1 + 112);
          *v21 = *v22;
          *(_OWORD *)(a1 + 80) = v30;
          *v22 = v29;
          *(_OWORD *)(a1 + 112) = v28;
          if (sub_22EF51468(*(_QWORD *)(a1 + 64), *(_DWORD *)(a1 + 80), (_DWORD *)(a1 + 32)))
          {
            v32 = *v20;
            v31 = *(_OWORD *)(a1 + 48);
            v33 = *(_OWORD *)(a1 + 80);
            *v20 = *v21;
            *(_OWORD *)(a1 + 48) = v33;
            *v21 = v32;
            *(_OWORD *)(a1 + 80) = v31;
            if (sub_22EF51468(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 48), (_DWORD *)a1))
            {
              v35 = *(_OWORD *)a1;
              v34 = *(_OWORD *)(a1 + 16);
              v36 = *(_OWORD *)(a1 + 48);
              *(_OWORD *)a1 = *v20;
              *(_OWORD *)(a1 + 16) = v36;
              *v20 = v35;
              *(_OWORD *)(a1 + 48) = v34;
            }
          }
        }
      }
      return 1;
    default:
      v10 = (_DWORD *)(a1 + 64);
      sub_22EF51560((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)(a1 + 64));
      v11 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if (sub_22EF51468(*(_QWORD *)v11, *(_DWORD *)(v11 + 16), v10))
    {
      v14 = *(_DWORD *)(v11 + 16);
      v38 = *(_QWORD *)(v11 + 20);
      v39 = *(_DWORD *)(v11 + 28);
      v37 = *(_OWORD *)v11;
      v15 = *(_QWORD *)v11;
      v16 = v12;
      while (1)
      {
        v17 = a1 + v16;
        v18 = *(_OWORD *)(a1 + v16 + 80);
        *(_OWORD *)(v17 + 96) = *(_OWORD *)(a1 + v16 + 64);
        *(_OWORD *)(v17 + 112) = v18;
        if (v16 == -64)
          break;
        v16 -= 32;
        if (!sub_22EF51468(v15, v14, (_DWORD *)(v17 + 32)))
        {
          v19 = a1 + v16 + 96;
          goto LABEL_12;
        }
      }
      v19 = a1;
LABEL_12:
      *(_OWORD *)v19 = v37;
      *(_DWORD *)(v19 + 16) = v14;
      *(_QWORD *)(v19 + 20) = v38;
      *(_DWORD *)(v19 + 28) = v39;
      if (++v13 == 8)
        return v11 + 32 == a2;
    }
    v10 = (_DWORD *)v11;
    v12 += 32;
    v11 += 32;
    if (v11 == a2)
      return 1;
  }
}

__n128 sub_22EF518D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  sub_22EF51560((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  if (sub_22EF51468(*(_QWORD *)a4, *(_DWORD *)(a4 + 16), (_DWORD *)a3))
  {
    v10 = *(_OWORD *)a3;
    v9 = *(_OWORD *)(a3 + 16);
    v11 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v11;
    *(_OWORD *)a4 = v10;
    *(_OWORD *)(a4 + 16) = v9;
    if (sub_22EF51468(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), (_DWORD *)a2))
    {
      v13 = *(_OWORD *)a2;
      v12 = *(_OWORD *)(a2 + 16);
      v14 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v14;
      *(_OWORD *)a3 = v13;
      *(_OWORD *)(a3 + 16) = v12;
      if (sub_22EF51468(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), (_DWORD *)a1))
      {
        v15 = *(_OWORD *)a1;
        result = *(__n128 *)(a1 + 16);
        v16 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v16;
        *(_OWORD *)a2 = v15;
        *(__n128 *)(a2 + 16) = result;
      }
    }
  }
  return result;
}

void sub_22EF51980(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  uint8x8_t v18;
  _QWORD **v19;
  _QWORD *i;
  unint64_t v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  int8x8_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD **v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *j;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  void *v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  _BYTE *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t **v48;
  int v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  _QWORD *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t *v63;
  uint64_t *v64;
  unint64_t v65;
  uint8x8_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t *v77;
  _QWORD *v78;
  _QWORD *v79;
  void *v80;
  _QWORD v81[7];
  char v82;
  unsigned __int8 *v83;
  void *__p[2];
  void *v85[2];
  float v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD v90[2];
  void *v91;
  uint64_t v92;
  _BYTE v93[64];
  void *v94;
  uint64_t v95;
  _BYTE v96[64];
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  unsigned int v101;
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  v90[0] = a5;
  v90[1] = a6;
  v88 = a3;
  v89 = a2;
  v87 = a4;
  v8 = *(unsigned __int8 **)(a2 + 8);
  if (!v8)
  {
    v11 = 0;
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v85 = 0u;
    v86 = 1.0;
    v83 = 0;
    goto LABEL_115;
  }
  v9 = 0;
  v10 = *(_QWORD *)(a2 + 8);
  do
  {
    ++v9;
    v10 = *(_QWORD *)(v10 + 16);
  }
  while (v10);
  v11 = 0;
  v12 = 0;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v85 = 0u;
  v86 = 1.0;
  v83 = 0;
  do
  {
    v13 = v12;
    v12 = v8;
    --v9;
    if (*v8 == 99)
    {
      v83 = v8;
      goto LABEL_88;
    }
    v14 = *((_QWORD *)v8 + 3);
    if (v14)
    {
      LOWORD(v97) = 0;
      v98 = 0;
      LODWORD(v99) = 0;
      if (!sub_22F00554C(v14, (uint64_t)&v97, a1, 0, 0)
        || (v15 = v101, v15 - sub_22E99C40C((llvm::APInt *)&v100) - 64 < 0xFFFFFFBF))
      {
LABEL_86:
        if (v99 >= 2)
          sub_22EF53BC0(&v99);
        goto LABEL_88;
      }
      if (v101 > 0x40)
        v16 = *v100;
      else
        v16 = (uint64_t)((_QWORD)v100 << -(uint64_t)v101) >> -(uint64_t)v101;
      v17 = (unint64_t)__p[1];
      if (__p[1])
      {
        v18 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          v6 = v16;
          if ((void *)v16 >= __p[1])
            v6 = v16 % (unint64_t)__p[1];
        }
        else
        {
          v6 = ((unint64_t)__p[1] - 1) & v16;
        }
        v19 = (_QWORD **)*((_QWORD *)__p[0] + v6);
        if (v19)
        {
          for (i = *v19; i; i = (_QWORD *)*i)
          {
            v21 = i[1];
            if (v21 == v16)
            {
              if (i[2] == v16)
                goto LABEL_85;
            }
            else
            {
              if (v18.u32[0] > 1uLL)
              {
                if ((void *)v21 >= __p[1])
                  v21 %= (unint64_t)__p[1];
              }
              else
              {
                v21 &= (unint64_t)__p[1] - 1;
              }
              if (v21 != v6)
                break;
            }
          }
        }
      }
      i = operator new(0x30uLL);
      *i = 0;
      i[1] = v16;
      i[2] = v16;
      i[3] = 0;
      i[4] = 0;
      i[5] = 0;
      v22 = (float)((unint64_t)v85[1] + 1);
      if (v17 && (float)(v86 * (float)v17) >= v22)
      {
LABEL_75:
        v38 = __p[0];
        v39 = (_QWORD *)*((_QWORD *)__p[0] + v6);
        if (v39)
        {
          *i = *v39;
        }
        else
        {
          *i = v85[0];
          v85[0] = i;
          v38[v6] = v85;
          if (!*i)
            goto LABEL_84;
          v40 = *(_QWORD *)(*i + 8);
          if ((v17 & (v17 - 1)) != 0)
          {
            if (v40 >= v17)
              v40 %= v17;
          }
          else
          {
            v40 &= v17 - 1;
          }
          v39 = (char *)__p[0] + 8 * v40;
        }
        *v39 = i;
LABEL_84:
        ++v85[1];
LABEL_85:
        i[3] = v12;
        i[4] = v13;
        v11 = v12;
        *((_DWORD *)i + 10) = v9;
        goto LABEL_86;
      }
      v23 = (v17 & (v17 - 1)) != 0;
      if (v17 < 3)
        v23 = 1;
      v24 = v23 | (2 * v17);
      v25 = vcvtps_u32_f32(v22 / v86);
      if (v24 <= v25)
        prime = (int8x8_t)v25;
      else
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        v17 = (unint64_t)__p[1];
      }
      if (*(_QWORD *)&prime > v17)
        goto LABEL_41;
      if (*(_QWORD *)&prime < v17)
      {
        v33 = vcvtps_u32_f32((float)(unint64_t)v85[1] / v86);
        if (v17 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v17), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
        {
          v33 = std::__next_prime(v33);
        }
        else
        {
          v35 = 1 << -(char)__clz(v33 - 1);
          if (v33 >= 2)
            v33 = v35;
        }
        if (*(_QWORD *)&prime <= v33)
          prime = (int8x8_t)v33;
        if (*(_QWORD *)&prime >= v17)
        {
          v17 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_41:
            if (*(_QWORD *)&prime >> 61)
              sub_22E3B3F8C();
            v27 = operator new(8 * *(_QWORD *)&prime);
            v28 = __p[0];
            __p[0] = v27;
            if (v28)
              operator delete(v28);
            v29 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v29++) = 0;
            while (*(_QWORD *)&prime != v29);
            v30 = (_QWORD **)v85[0];
            if (v85[0])
            {
              v31 = *((_QWORD *)v85[0] + 1);
              v32 = (uint8x8_t)vcnt_s8(prime);
              v32.i16[0] = vaddlv_u8(v32);
              if (v32.u32[0] > 1uLL)
              {
                if (v31 >= *(_QWORD *)&prime)
                  v31 %= *(_QWORD *)&prime;
              }
              else
              {
                v31 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v31) = v85;
              for (j = *v30; j; v31 = v37)
              {
                v37 = j[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(_QWORD *)&prime)
                    v37 %= *(_QWORD *)&prime;
                }
                else
                {
                  v37 &= *(_QWORD *)&prime - 1;
                }
                if (v37 != v31)
                {
                  if (!*((_QWORD *)__p[0] + v37))
                  {
                    *((_QWORD *)__p[0] + v37) = v30;
                    goto LABEL_66;
                  }
                  *v30 = (_QWORD *)*j;
                  *j = **((_QWORD **)__p[0] + v37);
                  **((_QWORD **)__p[0] + v37) = j;
                  j = v30;
                }
                v37 = v31;
LABEL_66:
                v30 = (_QWORD **)j;
                j = (_QWORD *)*j;
              }
            }
            v17 = (unint64_t)prime;
            goto LABEL_70;
          }
          v41 = __p[0];
          __p[0] = 0;
          if (v41)
            operator delete(v41);
          v17 = 0;
          __p[1] = 0;
        }
      }
LABEL_70:
      if ((v17 & (v17 - 1)) != 0)
      {
        if (v16 >= v17)
          v6 = v16 % v17;
        else
          v6 = v16;
      }
      else
      {
        v6 = (v17 - 1) & v16;
      }
      goto LABEL_75;
    }
LABEL_88:
    v8 = (unsigned __int8 *)*((_QWORD *)v12 + 2);
  }
  while (v8);
  v8 = *(unsigned __int8 **)(v89 + 8);
  if (!v8)
    goto LABEL_115;
  v42 = 0;
  v43 = 0;
  do
  {
    v44 = *v8;
    if (v44 == 98)
    {
      v45 = *(_BYTE **)&v8[8 * (((unint64_t)*(unsigned __int16 *)v8 >> 8) & 1) + 32];
      if (!v45)
        goto LABEL_110;
    }
    else if (v44 == 99)
    {
      v45 = (_BYTE *)*((_QWORD *)v8 + 3);
      if (!v45)
        goto LABEL_110;
    }
    else
    {
      v45 = (_BYTE *)*((_QWORD *)v8 + 3);
    }
    if (*v45 == 8)
      ++v42;
LABEL_110:
    ++v43;
    v8 = (unsigned __int8 *)*((_QWORD *)v8 + 2);
  }
  while (v8);
  if (v43)
    LOBYTE(v8) = (float)((float)v42 / (float)v43) >= 0.9;
  else
    LOBYTE(v8) = 0;
LABEL_115:
  v82 = (char)v8;
  v81[0] = &v87;
  v81[1] = a1;
  v81[2] = &v88;
  v81[3] = &v82;
  v81[4] = &v83;
  v81[5] = &v89;
  v81[6] = v90;
  v97 = &v99;
  v98 = 0x800000000;
  v94 = v96;
  v95 = 0x800000000;
  v46 = v88;
  v47 = sub_22E49F9AC(v88);
  sub_22EFC3500(v46);
  if (v47)
  {
LABEL_116:
    v48 = (unint64_t **)(v47 + 64);
    v49 = *(_DWORD *)(v47 + 72);
    if (v49 - sub_22E99C40C((llvm::APInt *)(v47 + 64)) - 64 >= 0xFFFFFFBF)
    {
      v50 = *(_DWORD *)(v47 + 72);
      if (v50 > 0x40)
        v51 = **v48;
      else
        v51 = (uint64_t)((_QWORD)*v48 << -(char)v50) >> -(char)v50;
      v52 = v98;
      if (v98 >= (unint64_t)HIDWORD(v98))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v52 = v98;
      }
      v53 = (unint64_t *)&v97[2 * v52];
      *v53 = v47;
      v53[1] = v51;
      LODWORD(v98) = v98 + 1;
      if (sub_22EF52770((uint64_t)__p[0], (unint64_t)__p[1], v51))
      {
        v54 = v95;
        if (v95 >= (unint64_t)HIDWORD(v95))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v54 = v95;
        }
        *((_QWORD *)v94 + v54) = v51;
        LODWORD(v95) = v95 + 1;
      }
    }
    while (1)
    {
      v47 = *(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v47)
        break;
      if ((*(_DWORD *)(v47 + 28) & 0x7F) == 0x43)
        goto LABEL_116;
    }
  }
  v91 = v93;
  v92 = 0x800000000;
  if ((_DWORD)v95)
  {
    v55 = 0;
    v56 = v94;
    v57 = 8 * v95;
    v58 = __p[0];
    v59 = __p[1];
    while (1)
    {
      v60 = sub_22EF52770((uint64_t)v58, (unint64_t)v59, v56[v55]);
      if (!v60 || v55 != *((_DWORD *)v60 + 10))
        break;
      ++v55;
      v57 -= 8;
      if (!v57)
      {
        v61 = *((_DWORD *)v11 + 1);
        if ((_DWORD)v98)
        {
          v62 = 0;
          v63 = v97;
          v64 = &v97[2 * v98];
          do
          {
            if (sub_22EF52770((uint64_t)__p[0], (unint64_t)__p[1], v63[1]))
            {
              sub_22EF52338((uint64_t)v81, (uint64_t *)v91, v62, v61);
              LODWORD(v92) = 0;
              v65 = v63[1];
              v66 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
              v66.i16[0] = vaddlv_u8(v66);
              if (v66.u32[0] > 1uLL)
              {
                v67 = v63[1];
                if ((void *)v65 >= __p[1])
                  v67 = v65 % (unint64_t)__p[1];
              }
              else
              {
                v67 = ((unint64_t)__p[1] - 1) & v65;
              }
              v69 = (_QWORD *)*((_QWORD *)__p[0] + v67);
              do
              {
                do
                  v69 = (_QWORD *)*v69;
                while (v69[1] != v65);
              }
              while (v69[2] != v65);
              v70 = v69[4];
              v62 = 0;
              if (v70)
                v61 = *(_DWORD *)(v70 + 4);
              else
                v61 = 0;
            }
            else
            {
              v68 = *v63;
              if (v62 >= HIDWORD(v92))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v62 = v92;
              }
              *((_QWORD *)v91 + v62) = v68;
              v62 = v92 + 1;
              LODWORD(v92) = v92 + 1;
            }
            v63 += 2;
          }
          while (v63 != v64);
          v77 = (uint64_t *)v91;
        }
        else
        {
          v62 = 0;
          v77 = (uint64_t *)v93;
        }
        v75 = v62;
        v76 = v61;
        goto LABEL_164;
      }
    }
  }
  if ((_DWORD)v98)
  {
    v71 = 0;
    v72 = 16 * v98;
    v73 = (unint64_t *)(v97 + 1);
    do
    {
      if (!sub_22EF52770((uint64_t)__p[0], (unint64_t)__p[1], *v73))
      {
        v74 = *(v73 - 1);
        if (v71 >= HIDWORD(v92))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v71 = v92;
        }
        *((_QWORD *)v91 + v71) = v74;
        v71 = v92 + 1;
        LODWORD(v92) = v92 + 1;
      }
      v73 += 2;
      v72 -= 16;
    }
    while (v72);
    v77 = (uint64_t *)v91;
  }
  else
  {
    v71 = 0;
    v77 = (uint64_t *)v93;
  }
  v75 = v71;
  v76 = 0;
LABEL_164:
  sub_22EF52338((uint64_t)v81, v77, v75, v76);
  if (v91 != v93)
    free(v91);
  if (v94 != v96)
    free(v94);
  if (v97 != &v99)
    free(v97);
  v78 = v85[0];
  if (v85[0])
  {
    do
    {
      v79 = (_QWORD *)*v78;
      operator delete(v78);
      v78 = v79;
    }
    while (v79);
  }
  v80 = __p[0];
  __p[0] = 0;
  if (v80)
    operator delete(v80);
}

void sub_22EF52338(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  _DWORD *v19;
  const char *v20;
  size_t v21;
  unsigned int v22;
  uint64_t *v23;
  _WORD *v24;
  unint64_t v25;
  _DWORD *v27;
  const char *v28;
  size_t v29;
  unsigned int v30;
  uint64_t *v31;
  _BYTE *v32;
  char *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned __int16 *v36;
  uint64_t v37;
  char v38;
  void *v39;
  size_t v40;
  double v41;
  _BYTE v43[24];
  void *__p;
  char v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char v51;
  uint64_t v52;
  int v53;
  void **v54;
  void *v55[2];
  uint64_t v56;

  if (!a3)
    return;
  v55[0] = 0;
  v55[1] = 0;
  v56 = 0;
  v47 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 1;
  v49 = 0;
  v50 = 0;
  v48 = 0;
  v46 = MEMORY[0x24BED83D8] + 16;
  v54 = v55;
  llvm::raw_ostream::SetBufferAndMode();
  v7 = 8 * a3;
  do
  {
    v8 = *a2;
    v9 = v50;
    if ((unint64_t)(v49 - (_QWORD)v50) > 4)
    {
      v50[4] = 32;
      *v9 = 1702060387;
      v50 += 5;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v46, "case ");
    }
    v10 = **(_QWORD **)a1;
    if (v10)
    {
      v11 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 16);
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
      if ((v11 & 4) != 0)
        v12 = *(_QWORD *)(v12 + 8);
      v13 = sub_22F0ABCB8(*(_QWORD *)(a1 + 8), v10, v12);
      if (v13)
        sub_22F0AAD88(v13, (llvm::raw_ostream *)&v46, (__int128 *)(*(_QWORD *)(a1 + 8) + 15104), 0);
    }
    v14 = **(_QWORD **)(a1 + 16);
    if ((*(_BYTE *)(v14 + 76) & 0x80) != 0)
    {
      v15 = *(_QWORD *)(v14 + 40);
      v16 = v15 & 7;
      v17 = v15 & 0xFFFFFFFFFFFFFFF8;
      if (v16)
        v18 = 1;
      else
        v18 = v17 == 0;
      if (!v18)
      {
        v19 = *(_DWORD **)(v17 + 16);
        v22 = *v19;
        v20 = (const char *)(v19 + 4);
        v21 = v22;
        if (v22 > (unint64_t)(v49 - (_QWORD)v50))
        {
          v23 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)&v46, v20);
          goto LABEL_20;
        }
        if (v21)
        {
          memcpy(v50, v20, v21);
          v50 += v21;
        }
      }
      v23 = &v46;
LABEL_20:
      v24 = (_WORD *)v23[4];
      if ((unint64_t)(v23[3] - (_QWORD)v24) > 1)
      {
        *v24 = 14906;
        v23[4] += 2;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v23, "::");
      }
    }
    v25 = *(_QWORD *)(v8 + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(v8 + 40) & 7) == 0 && v25 != 0)
    {
      v27 = *(_DWORD **)(v25 + 16);
      v30 = *v27;
      v28 = (const char *)(v27 + 4);
      v29 = v30;
      if (v30 > (unint64_t)(v49 - (_QWORD)v50))
      {
        v31 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)&v46, v28);
        goto LABEL_31;
      }
      if (v29)
      {
        memcpy(v50, v28, v29);
        v50 += v29;
      }
    }
    v31 = &v46;
LABEL_31:
    v32 = (_BYTE *)v31[4];
    if ((_BYTE *)v31[3] == v32)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v31, ":");
    }
    else
    {
      *v32 = 58;
      ++v31[4];
    }
    v33 = v50;
    if (**(_BYTE **)(a1 + 24))
    {
      if ((unint64_t)(v49 - (_QWORD)v50) > 1)
      {
        *(_WORD *)v50 = 31520;
        v33 = v50 + 2;
        v50 += 2;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v46, " {");
        v33 = v50;
      }
    }
    if ((unint64_t)(v49 - (_QWORD)v33) > 0x10)
    {
      v33[16] = 10;
      *(_OWORD *)v33 = *(_OWORD *)"\n<#code#>\nbreak;\n";
      v50 += 17;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v46, "\n<#code#>\nbreak;\n");
    }
    if (**(_BYTE **)(a1 + 24))
    {
      if ((unint64_t)(v49 - (_QWORD)v50) > 1)
      {
        *(_WORD *)v50 = 2685;
        v50 += 2;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v46, "}\n");
      }
    }
    ++a2;
    v7 -= 8;
  }
  while (v7);
  v34 = a4;
  if (!a4)
  {
    v35 = **(_QWORD **)(a1 + 32);
    v36 = **(unsigned __int16 ***)(a1 + 40);
    if (v35 && v35 == *((_QWORD *)v36 + 1))
      v34 = *(_DWORD *)(v35 + 4);
    else
      sub_22F0D60E4(*(_QWORD *)&v36[4 * ((*v36 >> 9) & 1) + 16 + 4 * (HIBYTE(*v36) & 1)]);
  }
  v37 = *(_QWORD *)(a1 + 48);
  if ((v34 & 0x80000000) != 0)
    v34 = sub_22F1E238C(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 1992), v34);
  v38 = *((_BYTE *)v54 + 23);
  if (v38 >= 0)
    v39 = v54;
  else
    v39 = *v54;
  if (v38 >= 0)
    v40 = v38 & 0x7F;
  else
    v40 = (size_t)v54[1];
  v41 = sub_22E729148(v39, v40, v34, 0, (uint64_t)v43);
  (*(void (**)(_QWORD, _BYTE *, double))v37)(*(_QWORD *)(v37 + 8), v43, v41);
  if (v45 < 0)
    operator delete(__p);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v46);
  if (SHIBYTE(v56) < 0)
    operator delete(v55[0]);
}

_QWORD *sub_22EF52770(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = (a2 - 1) & a3;
  }
  v5 = *(_QWORD **)(a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a3)
      {
        if (result[2] == a3)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= a2)
            v7 %= a2;
        }
        else
        {
          v7 &= a2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_22EF52818(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v22 = 0;
  if (sub_22EF52A00(a1, &v22, *(_QWORD *)(*a2 + 2000)))
  {
    v6 = *(_DWORD *)(a1 + 24);
    if ((unsigned __int16)v6 == 1)
    {
      v7 = sub_22EFFA6B0(*(unsigned __int8 **)(a1 + 48));
      v8 = v7;
      v9 = (_QWORD *)(a1 + 16);
      if ((v6 & 0x1000000) != 0)
        v9 = (_QWORD *)(*v9 + 40);
      v10 = *v9;
      v11 = *v7;
      if (v11 == 204)
      {
        v14 = sub_22F3E8F0C((uint64_t)a2, 1u);
        if (v14 == v22)
        {
          v17 = a2[11];
          if (!v17)
          {
            v17 = sub_22E3CB704(*(llvm::StringMapImpl **)(*a2 + 15192), "stringWithString", 0x10uLL) | 2;
            a2[11] = v17;
          }
          if (v17 == v10)
            goto LABEL_26;
          v18 = a2[15];
          if (!v18)
          {
            v18 = sub_22E3CB704(*(llvm::StringMapImpl **)(*a2 + 15192), "initWithString", 0xEuLL) | 2;
            a2[15] = v18;
          }
          if (v18 == v10)
            goto LABEL_26;
        }
        v11 = *v8;
      }
      if (v11 == 201
        && (v15 = sub_22F3E8F0C((uint64_t)a2, 2u), v15 == v22)
        && (sub_22F3E8F74((uint64_t)a2, 1u) == v10 || sub_22F3E8F74((uint64_t)a2, 5u) == v10)
        || *v8 == 203
        && (v16 = sub_22F3E8F0C((uint64_t)a2, 4u), v16 == v22)
        && (sub_22F3E91B4((uint64_t)a2, 1u) == v10 || sub_22F3E91B4((uint64_t)a2, 6u) == v10))
      {
LABEL_26:
        sub_22F0D4E74(a1);
        v20 = v19;
        sub_22F0D4E74(*(_QWORD *)(a1 + 48));
        v12 = 1;
        sub_22EF4D58C(a3, v20, 1u, v21, 1u);
        return v12;
      }
    }
  }
  return 0;
}

uint64_t sub_22EF52A00(uint64_t result, unint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;

  if (result)
  {
    v3 = result;
    if ((*(_DWORD *)(result + 24) & 0x5000000) != 0x1000000 || !*(_QWORD *)(result + 16))
      return 0;
    result = sub_22F3C7A68(result);
    if (result)
    {
      v6 = *(_QWORD *)(result + 40);
      if ((v6 & 7) != 0)
        v7 = 0;
      else
        v7 = v6 & 0xFFFFFFFFFFFFFFF8;
      *a2 = v7;
      v8 = *(_DWORD *)(v3 + 24);
      if (!BYTE2(v8))
        return 1;
      result = 0;
      if (BYTE2(v8) == 1 && (*(_WORD *)(a3 + 148) & 2) != 0)
      {
        v9 = (v8 & 0xFF0000) == 0x10000 ? *(unsigned __int8 **)(v3 + 40) : 0;
        v10 = sub_22EFFA6B0(v9);
        if (*v10 != 200)
          return 0;
        result = sub_22F32FCE0((uint64_t)v10);
        if ((_DWORD)result != 1)
          return 0;
      }
    }
  }
  return result;
}

unint64_t sub_22EF52AD4(unint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _QWORD *v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  _QWORD *i;
  void *v13;
  uint64_t v14;
  _BYTE v15[48];
  void *v16[2];
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v2 = *a1 & 7;
  if (v2 == 7)
    return a1[1];
  if ((*a1 & 3) == 3)
  {
    v4 = (v1 & 0x7FFFFFFF8) != 0;
    if ((v1 & 4) != 0)
      v4 = v1 > 7;
    if (!v4)
      return 0;
LABEL_15:
    if (v2 != 3)
    {
      v7 = v1 & 0xFFFFFFFFFFFFFFFCLL;
      if (*(unsigned __int8 *)(v1 & 0xFFFFFFFFFFFFFFFCLL) == 186)
      {
        v16[0] = v17;
        v16[1] = (void *)0x200000000;
        v13 = v15;
        v14 = 0x200000000;
        v8 = *(_QWORD *)(v7 + 16);
        v9 = v8 & 0xFFFFFFFFFFFFFFF8;
        if ((v8 & 4) != 0)
          v9 = *(_QWORD *)(v9 + 40);
        v10 = sub_22EFF59A4((unsigned __int8 *)v9, (uint64_t)v16, (uint64_t)&v13);
        if ((_DWORD)v14)
        {
          v3 = *((_QWORD *)v10 + 1);
          if (v13 != v15)
            free(v13);
          if (v16[0] != v17)
            free(v16[0]);
          return v3;
        }
        if (v13 != v15)
          free(v13);
        if (v16[0] != v17)
          free(v16[0]);
      }
      return *(_QWORD *)(v7 + 8);
    }
    return a1[1];
  }
  if (v1 < 4)
    return 0;
  v5 = (_QWORD *)(v1 & 0xFFFFFFFFFFFFFFFCLL);
  if ((v1 & 3) != 0 || v5 == 0)
  {
    if ((*a1 & 3) == 2)
      return a1[1];
    goto LABEL_15;
  }
  for (i = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 56))(v5);
        i;
        i = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*i + 48))(i))
  {
    v3 = i[6];
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 4)
      return v3;
  }
  return v5[6];
}

BOOL sub_22EF52C94(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  if ((*(_QWORD *)a1 & 3) == 2 || (~*(_QWORD *)a1 & 3) == 0)
    return 1;
  return *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8) && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
}

unint64_t sub_22EF52CE4(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v4;
  unsigned __int8 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;

  v1 = *a1;
  v2 = *a1 & 7;
  if ((*a1 & 3) == 2 || v2 == 3)
  {
    v4 = HIDWORD(v1);
    v5 = atomic_load((unsigned __int8 *)&qword_253E4AB98);
    v6 = 0x253E4A000uLL;
    if ((v5 & 1) == 0)
    {
      v14 = HIDWORD(v1);
      v15 = *a1;
      v12 = __cxa_guard_acquire(&qword_253E4AB98);
      v6 = 0x253E4A000uLL;
      v4 = v14;
      LODWORD(v1) = v15;
      if (v12)
      {
        v13 = *MEMORY[0x24BED7368];
        if (!*MEMORY[0x24BED7368])
          v13 = 0xFF51AFD7ED558CCDLL;
        qword_253E4AB90 = v13;
        __cxa_guard_release(&qword_253E4AB98);
        v6 = 0x253E4A000;
        v4 = v14;
        LODWORD(v1) = v15;
      }
    }
    v7 = (*(_QWORD *)(v6 + 2960) + 8 * v1) ^ v4;
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * v7) >> 47) ^ (0x9DDFEA08EB382D69 * v7))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * v7) >> 47) ^ (0x9DDFEA08EB382D69 * v7))) >> 47));
  }
  else
  {
    v18 = *a1;
    v9 = v2 | 4;
    if ((v2 | 4) == 7)
      v10 = 0;
    else
      v10 = *((_DWORD *)a1 + 2);
    v17 = v10;
    if (v9 == 7)
      v11 = 0;
    else
      v11 = *((_DWORD *)a1 + 3);
    v16 = v11;
    return sub_22EF52E0C(&v18, &v17, &v16);
  }
}

unint64_t sub_22EF52E0C(_QWORD *a1, int *a2, int *a3)
{
  int *v3;
  int *v4;
  unsigned __int8 v5;
  unint64_t v6;
  uint64_t v7;
  int v9;
  int v10;
  unint64_t v11;
  _QWORD *v14;
  _OWORD v15[4];
  _OWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = a3;
  v4 = a2;
  v19 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  v5 = atomic_load((unsigned __int8 *)&qword_253E4AB98);
  v6 = 0x253E4A000uLL;
  if ((v5 & 1) == 0)
  {
    v14 = a1;
    v9 = __cxa_guard_acquire(&qword_253E4AB98);
    v6 = 0x253E4A000uLL;
    v4 = a2;
    v3 = a3;
    v10 = v9;
    a1 = v14;
    if (v10)
    {
      v11 = *MEMORY[0x24BED7368];
      if (!*MEMORY[0x24BED7368])
        v11 = 0xFF51AFD7ED558CCDLL;
      qword_253E4AB90 = v11;
      __cxa_guard_release(&qword_253E4AB98);
      v6 = 0x253E4A000;
      v3 = a3;
      a1 = v14;
      v4 = a2;
    }
  }
  v7 = *a1;
  v18 = *(_QWORD *)(v6 + 2960);
  *(_QWORD *)&v15[0] = v7;
  return sub_22E9FFF00((char *)v15, 0, (_DWORD *)v15 + 2, (char *)v16, v4, v3);
}

uint64_t sub_22EF52F1C(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;

  if (a2 == a3)
    v6 = a2;
  else
    v6 = a2 + 1;
  v7 = (_QWORD *)operator new[]();
  *v7 = 72;
  v7[1] = v6;
  if ((_DWORD)v6)
  {
    v8 = 72 * v6;
    v9 = v7 + 2;
    do
    {
      *v9 = 0;
      v9 += 18;
      v8 -= 72;
    }
    while (v8);
  }
  *(_QWORD *)a1 = v7 + 2;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  return a1;
}

uint64_t *sub_22EF52FA8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if (*a1)
  {
    v3 = v2 - 16;
    v4 = *(_QWORD *)(v2 - 8);
    if (v4)
    {
      v5 = 72 * v4;
      v6 = v2 - 72;
      do
      {
        if (*(_DWORD *)(v6 + v5) >= 2u)
          sub_22EF53BC0();
        v5 -= 72;
      }
      while (v5);
    }
    MEMORY[0x2348A0E84](v3, 0x1000C800131AABDLL);
  }
  return a1;
}

uint64_t sub_22EF53024(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;

  v6 = (a3 + a2);
  v7 = (_QWORD *)operator new[]();
  *v7 = 72;
  v7[1] = v6;
  if ((_DWORD)v6)
  {
    v8 = 72 * v6;
    v9 = v7 + 2;
    do
    {
      *v9 = 0;
      v9 += 18;
      v8 -= 72;
    }
    while (v8);
  }
  *(_QWORD *)a1 = v7 + 2;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  return a1;
}

uint64_t sub_22EF530AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  const void *v9;
  const void *v10;
  void *v11;
  const void *v12;
  llvm::APFloatBase *v13;
  uint64_t v14;
  uint64_t *v15;
  const llvm::detail::IEEEFloat *v16;
  uint64_t v17;
  llvm::APFloatBase *v18;
  uint64_t v19;
  char *v20;
  char v21;
  const llvm::APInt *v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  int i;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  _DWORD *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  llvm::APFloatBase *v52;
  uint64_t v53;
  uint64_t v54;
  llvm::APFloatBase *v55;
  uint64_t v56;
  const llvm::detail::IEEEFloat *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  _DWORD *v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  const llvm::APInt *v90;
  const llvm::APInt *v91;
  uint64_t v92;
  unsigned int v93;
  char v94;
  uint64_t v95;
  unsigned int v96;
  char v97;
  uint64_t v98;
  unsigned int v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104[3];
  char v105;
  uint64_t v106[3];
  int v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;

  v112 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)a1 = 0;
  switch(*(_DWORD *)a2)
  {
    case 0:
    case 1:
      *(_DWORD *)a1 = *(_DWORD *)a2;
      break;
    case 2:
      *(_DWORD *)(a1 + 16) = 1;
      *(_QWORD *)(a1 + 8) = 0;
      *(_BYTE *)(a1 + 20) = 1;
      *(_DWORD *)a1 = 2;
      v99 = *(_DWORD *)(a2 + 16);
      if (v99 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v98, (const llvm::APInt *)(a2 + 8));
        v82 = *(_DWORD *)(a1 + 16);
        v21 = *(_BYTE *)(a2 + 20);
        v100 = v21;
        if (v82 >= 0x41)
        {
          v83 = *(_QWORD *)(a1 + 8);
          if (v83)
          {
            MEMORY[0x2348A0E84](v83, 0x1000C8000313F17);
            v21 = v100;
          }
        }
      }
      else
      {
        v98 = *(_QWORD *)(a2 + 8);
        v21 = *(_BYTE *)(a2 + 20);
      }
      *(_QWORD *)(a1 + 8) = v98;
      *(_DWORD *)(a1 + 16) = v99;
      *(_BYTE *)(a1 + 20) = v21;
      break;
    case 3:
      v13 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v107, 0.0);
      v14 = llvm::APFloatBase::IEEEdouble(v13);
      MEMORY[0x23489F4E0](a1 + 16, &v107, v14);
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v107);
      *(_DWORD *)a1 = 3;
      v15 = v106;
      v17 = *(_QWORD *)(a2 + 16);
      v16 = (const llvm::detail::IEEEFloat *)(a2 + 16);
      v19 = llvm::APFloatBase::PPCDoubleDouble(v18);
      if (v19 == v17)
        MEMORY[0x23489F2A0](v106, v16);
      else
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v106, v16);
      sub_22E51FDA0((uint64_t *)(a1 + 16), v106);
      if (v19 != v106[0])
        goto LABEL_45;
      v20 = &v105;
      goto LABEL_96;
    case 4:
      v22 = (const llvm::APInt *)(a2 + 8);
      v23 = *(_DWORD *)(a2 + 16);
      LODWORD(v108) = v23;
      if (v23 >= 0x41)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v107, v22);
        v23 = v108;
        v22 = (const llvm::APInt *)&v107;
      }
      v24 = *(_QWORD *)v22;
      v25 = *(_BYTE *)(a2 + 20);
      v26 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a1 + 16) = v23;
      *(_QWORD *)(a1 + 8) = v24;
      *(_BYTE *)(a1 + 20) = v25;
      *(_DWORD *)(a1 + 24) = v26;
      *(_DWORD *)a1 = 4;
      break;
    case 5:
      *(_DWORD *)(a1 + 16) = 1;
      *(_QWORD *)(a1 + 8) = 0;
      *(_BYTE *)(a1 + 20) = 1;
      *(_DWORD *)(a1 + 32) = 1;
      *(_QWORD *)(a1 + 24) = 0;
      *(_BYTE *)(a1 + 36) = 1;
      *(_DWORD *)a1 = 5;
      v90 = (const llvm::APInt *)(a2 + 8);
      v96 = *(_DWORD *)(a2 + 16);
      if (v96 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v95, v90);
      else
        v95 = *(_QWORD *)v90;
      v97 = *(_BYTE *)(a2 + 20);
      v91 = (const llvm::APInt *)(a2 + 24);
      v93 = *(_DWORD *)(a2 + 32);
      if (v93 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v92, v91);
      else
        v92 = *(_QWORD *)v91;
      v94 = *(_BYTE *)(a2 + 36);
      sub_22F2C4444(a1, (uint64_t)&v95, (uint64_t)&v92);
      if (v93 >= 0x41 && v92)
        MEMORY[0x2348A0E84](v92, 0x1000C8000313F17);
      if (v96 >= 0x41 && v95)
        MEMORY[0x2348A0E84](v95, 0x1000C8000313F17);
      break;
    case 6:
      v52 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v107, 0.0);
      v53 = llvm::APFloatBase::IEEEdouble(v52);
      MEMORY[0x23489F4E0](a1 + 16, &v107, v53);
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v107);
      llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v107, 0.0);
      MEMORY[0x23489F4E0](a1 + 48, &v107, v53);
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v107);
      *(_DWORD *)a1 = 6;
      v15 = v104;
      v54 = *(_QWORD *)(a2 + 16);
      v56 = llvm::APFloatBase::PPCDoubleDouble(v55);
      if (v56 == v54)
        MEMORY[0x23489F2A0](v104, a2 + 16);
      else
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v104, (const llvm::detail::IEEEFloat *)(a2 + 16));
      v57 = (const llvm::detail::IEEEFloat *)(a2 + 48);
      if (v56 == *(_QWORD *)(a2 + 48))
        MEMORY[0x23489F2A0](&v101, v57);
      else
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v101, v57);
      sub_22E51FDA0((uint64_t *)(a1 + 16), v104);
      sub_22E51FDA0((uint64_t *)(a1 + 48), &v101);
      if (v56 == v101)
        sub_22E463170((llvm::APFloatBase *)&v102);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v101);
      if (v56 == v104[0])
      {
        v20 = &v103;
LABEL_96:
        sub_22E463170((llvm::APFloatBase *)(v20 + 16));
      }
      else
      {
LABEL_45:
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v15);
      }
      break;
    case 7:
      *(_QWORD *)(a1 + 40) = 0;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_DWORD *)(a1 + 48) = -1;
      *(_DWORD *)a1 = 7;
      v4 = *(unsigned int *)(a2 + 48);
      v5 = *(_QWORD *)(a2 + 8);
      v6 = *(_QWORD *)(a2 + 16);
      v7 = (_QWORD *)(a2 + 24);
      if ((_DWORD)v4 == -1)
      {
        sub_22F3644A4(a1, v5, v6, v7, *(_BYTE *)(a2 + 52) & 1);
      }
      else
      {
        v10 = *(const void **)(a2 + 56);
        v8 = (char *)(a2 + 56);
        v9 = v10;
        v11 = (void *)sub_22EF55C28(a1, v5, v6, v7, v4, (*(v8 - 4) >> 1) & 1, *(v8 - 4) & 1);
        if ((_DWORD)v4)
        {
          if ((v4 - 3) >= 0xFFFFFFFC)
            v12 = v8;
          else
            v12 = v9;
          memcpy(v11, v12, 8 * v4);
        }
      }
      break;
    case 8:
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      *(_DWORD *)a1 = 8;
      sub_22EF53920(a1, *(_QWORD **)(a2 + 8), *(_DWORD *)(a2 + 16));
      break;
    case 9:
      v58 = (uint64_t *)(a1 + 8);
      sub_22EF52F1C(a1 + 8, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20));
      *(_DWORD *)a1 = 9;
      v59 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v59)
      {
        v60 = 0;
        v61 = 72 * v59;
        do
        {
          v62 = *(_QWORD *)(a2 + 8);
          v63 = *v58;
          if (*v58 != v62)
          {
            sub_22EF530AC(&v107, v62 + v60);
            if (*(_DWORD *)(v63 + v60) >= 2u)
              sub_22EF53BC0((uint64_t *)(v63 + v60));
            v64 = v63 + v60;
            *(_DWORD *)v64 = v107;
            v65 = v108;
            v66 = v109;
            v67 = v110;
            *(_OWORD *)(v64 + 56) = v111;
            *(_OWORD *)(v64 + 40) = v67;
            *(_OWORD *)(v64 + 24) = v66;
            *(_OWORD *)(v64 + 8) = v65;
          }
          v60 += 72;
        }
        while (v61 != v60);
        LODWORD(v59) = *(_DWORD *)(a2 + 16);
      }
      if ((_DWORD)v59 != *(_DWORD *)(a2 + 20))
      {
        v74 = *(_QWORD *)(a2 + 8) + 72 * v59;
        v75 = *(_QWORD *)(a1 + 8);
        v76 = *(_DWORD *)(a1 + 16);
        v77 = (_DWORD *)(v75 + 72 * v76);
        if (v77 != (_DWORD *)v74)
        {
          sub_22EF530AC(&v107, v74);
          if (*v77 >= 2u)
            sub_22EF53BC0((uint64_t *)(v75 + 72 * v76));
          *v77 = v107;
          v78 = v75 + 72 * v76;
          v79 = v108;
          v80 = v109;
          v81 = v110;
          *(_OWORD *)(v78 + 56) = v111;
          *(_OWORD *)(v78 + 40) = v81;
          *(_OWORD *)(v78 + 24) = v80;
          *(_OWORD *)(v78 + 8) = v79;
        }
      }
      break;
    case 0xA:
      v27 = *(_DWORD *)(a2 + 16);
      v28 = *(_DWORD *)(a2 + 20);
      v29 = (v28 + v27);
      v30 = (_QWORD *)operator new[]();
      *v30 = 72;
      v30[1] = v29;
      if ((_DWORD)v29)
      {
        v31 = 72 * v29;
        v32 = v30 + 2;
        do
        {
          *v32 = 0;
          v32 += 18;
          v31 -= 72;
        }
        while (v31);
      }
      *(_QWORD *)(a1 + 8) = v30 + 2;
      *(_DWORD *)(a1 + 16) = v27;
      *(_DWORD *)(a1 + 20) = v28;
      *(_DWORD *)a1 = 10;
      v33 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v33)
      {
        v34 = 0;
        v35 = 72 * v33;
        do
        {
          v36 = *(_QWORD *)(a2 + 8);
          v37 = *(_QWORD *)(a1 + 8);
          if (v37 != v36)
          {
            sub_22EF530AC(&v107, v36 + v34);
            if (*(_DWORD *)(v37 + v34) >= 2u)
              sub_22EF53BC0((uint64_t *)(v37 + v34));
            v38 = v37 + v34;
            *(_DWORD *)v38 = v107;
            v39 = v108;
            v40 = v109;
            v41 = v110;
            *(_OWORD *)(v38 + 56) = v111;
            *(_OWORD *)(v38 + 40) = v41;
            *(_OWORD *)(v38 + 24) = v40;
            *(_OWORD *)(v38 + 8) = v39;
          }
          v34 += 72;
        }
        while (v35 != v34);
      }
      v42 = *(_DWORD *)(a2 + 20);
      if (v42)
      {
        for (i = 0; i != v42; ++i)
        {
          v44 = *(_QWORD *)(a2 + 8) + 72 * (i + *(_DWORD *)(a2 + 16));
          v45 = *(_QWORD *)(a1 + 8);
          v46 = i + *(_DWORD *)(a1 + 16);
          v47 = (_DWORD *)(v45 + 72 * v46);
          if (v47 != (_DWORD *)v44)
          {
            sub_22EF530AC(&v107, v44);
            if (*v47 >= 2u)
              sub_22EF53BC0((uint64_t *)(v45 + 72 * v46));
            *v47 = v107;
            v48 = v45 + 72 * v46;
            v49 = v108;
            v50 = v109;
            v51 = v110;
            *(_OWORD *)(v48 + 56) = v111;
            *(_OWORD *)(v48 + 40) = v51;
            *(_OWORD *)(v48 + 24) = v50;
            *(_OWORD *)(v48 + 8) = v49;
          }
        }
      }
      break;
    case 0xB:
      *(_QWORD *)(a1 + 8) = 0;
      v68 = operator new();
      *(_DWORD *)v68 = 0;
      *(_QWORD *)(a1 + 16) = v68;
      *(_DWORD *)a1 = 11;
      v69 = *(_QWORD *)(a2 + 8);
      v70 = *(_QWORD *)(a2 + 16);
      if (v69 && (*(_BYTE *)(v69 + 29) & 0x80) != 0)
      {
        v69 = sub_22EFB5D7C(v69);
        v68 = *(_QWORD *)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v69;
      if (v68 != v70)
      {
        sub_22EF530AC(&v107, v70);
        if (*(_DWORD *)v68 >= 2u)
          sub_22EF53BC0((uint64_t *)v68);
        *(_DWORD *)v68 = v107;
        v71 = v108;
        v72 = v109;
        v73 = v110;
        *(_OWORD *)(v68 + 56) = v111;
        *(_OWORD *)(v68 + 40) = v73;
        *(_OWORD *)(v68 + 24) = v72;
        *(_OWORD *)(v68 + 8) = v71;
      }
      break;
    case 0xC:
      v85 = *(unsigned int *)(a2 + 16);
      if (v85 <= 6)
        v86 = (uint64_t *)(a2 + 24);
      else
        v86 = *(uint64_t **)(a2 + 24);
      v87 = sub_22F364DA4(a1, *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8, (*(_QWORD *)(a2 + 8) >> 2) & 1, *(_DWORD *)(a2 + 16));
      if ((_DWORD)v85)
      {
        v88 = (_QWORD *)v87;
        do
        {
          v89 = *v86++;
          *v88++ = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 32))(v89);
          --v85;
        }
        while (v85);
      }
      break;
    case 0xD:
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)a1 = 13;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      break;
    default:
      return a1;
  }
  return a1;
}

void sub_22EF53920(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = (_QWORD *)operator new[]();
  *v7 = 72;
  v7[1] = v6;
  v8 = v7 + 2;
  if (a3)
  {
    v9 = 72 * v6;
    v10 = v7 + 2;
    do
    {
      *v10 = 0;
      v10 += 18;
      v9 -= 72;
    }
    while (v9);
    *(_QWORD *)(a1 + 8) = v8;
    *(_DWORD *)(a1 + 16) = a3;
    v11 = a2;
    v12 = v7 + 2;
    do
    {
      if (v8 != a2)
      {
        sub_22EF530AC(&v15, v11);
        if (*(_DWORD *)v12 >= 2u)
          sub_22EF53BC0(v12);
        *(_DWORD *)v12 = v15;
        v13 = v17;
        *(_OWORD *)(v12 + 1) = v16;
        *(_OWORD *)(v12 + 3) = v13;
        v14 = v19;
        *(_OWORD *)(v12 + 5) = v18;
        *(_OWORD *)(v12 + 7) = v14;
      }
      v12 += 9;
      v11 += 9;
      --v6;
    }
    while (v6);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v8;
    *(_DWORD *)(a1 + 16) = 0;
  }
}

uint64_t sub_22EF53A50(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

__n128 sub_22EF53A5C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  __n128 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  int v9;
  __n128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (a2 && (*(_BYTE *)(a2 + 29) & 0x80) != 0)
    a2 = sub_22EFB5D7C(a2);
  *(_QWORD *)(a1 + 8) = a2;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6 != a3)
  {
    sub_22EF530AC((uint64_t)&v9, a3);
    if (*(_DWORD *)v6 >= 2u)
      sub_22EF53BC0((uint64_t *)v6);
    *(_DWORD *)v6 = v9;
    result = v10;
    v7 = v11;
    v8 = v12;
    *(_OWORD *)(v6 + 56) = v13;
    *(_OWORD *)(v6 + 40) = v8;
    *(_OWORD *)(v6 + 24) = v7;
    *(__n128 *)(v6 + 8) = result;
  }
  return result;
}

__n128 sub_22EF53B28(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  result = *(__n128 *)(a2 + 8);
  v3 = *(_OWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 24) = v3;
  *(__n128 *)(a1 + 8) = result;
  *(_DWORD *)a2 = 0;
  return result;
}

uint64_t sub_22EF53B58(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (*(_DWORD *)a1 >= 2u)
    sub_22EF53BC0((uint64_t *)a1);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_OWORD *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  *(_DWORD *)a2 = 0;
  return a1;
}

void sub_22EF53BC0(uint64_t *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  unsigned int v7;
  uint64_t v8;

  if (*(_DWORD *)a1 == 2)
  {
LABEL_2:
    if (*((_DWORD *)a1 + 4) >= 0x41u)
    {
      v5 = a1[1];
      if (v5)
        MEMORY[0x2348A0E84](v5, 0x1000C8000313F17);
    }
  }
  else
  {
    switch(*(_DWORD *)a1)
    {
      case 3:
        v3 = a1[2];
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v3)
          sub_22E463170((llvm::APFloatBase *)(a1 + 3));
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)(a1 + 2));
        break;
      case 4:
        goto LABEL_2;
      case 5:
        sub_22F364EC0((uint64_t)(a1 + 1));
        break;
      case 6:
        sub_22E4EEC9C(a1 + 6);
        sub_22E4EEC9C(a1 + 2);
        break;
      case 7:
        v2 = *((_DWORD *)a1 + 12);
        if (v2)
        {
          if ((v2 - 3) <= 0xFFFFFFFB)
          {
            v4 = a1[7];
            if (v4)
              MEMORY[0x2348A0E84](v4, 0x1000C8000313F17);
          }
          *((_DWORD *)a1 + 12) = 0;
        }
        break;
      case 8:
      case 9:
      case 0xA:
        sub_22EF52FA8(a1 + 1);
        break;
      case 0xB:
        v6 = (_DWORD *)a1[2];
        if (v6)
        {
          if (*v6 >= 2u)
            sub_22EF53BC0(a1[2]);
          MEMORY[0x2348A0E9C](v6, 0x1000C400131AABDLL);
        }
        break;
      case 0xC:
        v7 = *((_DWORD *)a1 + 4);
        if (v7)
        {
          if (v7 >= 7)
          {
            v8 = a1[3];
            if (v8)
              MEMORY[0x2348A0E84](v8, 0x60C8044C4A2DFLL);
          }
          *((_DWORD *)a1 + 4) = 0;
        }
        break;
      default:
        break;
    }
  }
  *(_DWORD *)a1 = 0;
}

BOOL sub_22EF53D60(unsigned int *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((_DWORD)v1 != 2)
    __asm { BR              X10 }
  return a1[4] > 0x40;
}

void sub_22EF53DC0()
{
  JUMPOUT(0x22EF53D90);
}

void sub_22EF53DC8(llvm::APFloatBase *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  if (llvm::APFloatBase::PPCDoubleDouble(a1) != v2)
  {
    llvm::detail::IEEEFloat::partCount((llvm::detail::IEEEFloat *)(v1 + 16));
    JUMPOUT(0x22EF53D8CLL);
  }
  JUMPOUT(0x22EF53D90);
}

uint64_t sub_22EF53E64(uint64_t result, llvm::APInt *this)
{
  unsigned int v2;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  unint64_t v9;

  v2 = *((_DWORD *)this + 2);
  if (v2)
  {
    v4 = result;
    v5 = 0;
    v6 = *((_DWORD *)this + 2);
    do
    {
      v7 = v6 - 32;
      result = llvm::APInt::extractBitsAsZExtValue(this);
      v8 = result;
      v9 = *(unsigned int *)(v4 + 8);
      if (v9 >= *(unsigned int *)(v4 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v9 = *(unsigned int *)(v4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v4 + 4 * v9) = v8;
      ++*(_DWORD *)(v4 + 8);
      v5 += 32;
      v6 = v7;
    }
    while (v5 < v2);
  }
  return result;
}

uint64_t sub_22EF53F1C(llvm::APFloatBase *a1, uint64_t a2)
{
  llvm::detail::DoubleAPFloat *v2;
  uint64_t v3;

  v2 = (llvm::detail::DoubleAPFloat *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v3)
    return llvm::detail::DoubleAPFloat::bitcastToAPInt(v2);
  else
    return llvm::detail::IEEEFloat::bitcastToAPInt(v2);
}

uint64_t sub_22EF53F70(uint64_t result, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = (*(_DWORD *)(v4 + 16) & 0xFF800FF) == 86507531;
  else
    v5 = 0;
  if (!v5)
    __asm { BR              X14 }
  v6 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v6) <= 5)
    return llvm::raw_ostream::write(a2, "void()");
  *(_WORD *)(v6 + 4) = 10536;
  *(_DWORD *)v6 = 1684631414;
  *((_QWORD *)a2 + 4) += 6;
  return result;
}

double sub_22EF559C8(_QWORD *a1)
{
  const llvm::detail::IEEEFloat *v1;
  uint64_t v2;
  uint64_t v3;
  llvm::APFloatBase *v4;
  double v5;
  double v6;
  _BYTE v8[8];
  uint64_t v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  v1 = (const llvm::detail::IEEEFloat *)(a1 + 1);
  v2 = a1[1];
  v3 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v3 == v2)
    v4 = (llvm::APFloatBase *)MEMORY[0x23489F2A0](&v9, v1);
  else
    v4 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v9, v1);
  llvm::APFloatBase::IEEEdouble(v4);
  llvm::APFloat::convert();
  llvm::APFloat::convertToDouble((llvm::APFloat *)v8);
  v6 = v5;
  if (v3 == v9)
    sub_22E463170((llvm::APFloatBase *)v10);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v9);
  return v6;
}

void sub_22EF55AB4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  LODWORD(v8) = 0;
  LOBYTE(v12) = 0;
  v13 = 0;
  LODWORD(v14) = 1;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v7 = MEMORY[0x24BED83D8] + 16;
  v15 = (uint64_t)a4;
  llvm::raw_ostream::SetBufferAndMode();
  sub_22EF53F70(a1, (llvm::raw_ostream *)&v7, a2 + 15104, a3);
  if (v11 != v9)
    llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v7);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v7);
}

uint64_t sub_22EF55B70(uint64_t a1)
{
  return a1 + 24;
}

void sub_22EF55B78(uint64_t a1, unsigned int a2)
{
  int v2;
  size_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2 != a2)
  {
    if ((v2 - 3) <= 0xFFFFFFFB && *(_QWORD *)(a1 + 48))
    {
      v6 = a1;
      v7 = a2;
      MEMORY[0x2348A0E84](*(_QWORD *)(a1 + 48), 0x1000C8000313F17);
      a2 = v7;
      a1 = v6;
    }
    *(_DWORD *)(a1 + 40) = a2;
    if (a2 - 3 <= 0xFFFFFFFB)
    {
      v3 = 8 * a2;
      v4 = a1;
      v5 = (void *)operator new[]();
      bzero(v5, v3);
      *(_QWORD *)(v4 + 48) = v5;
    }
  }
}

uint64_t sub_22EF55C28(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unsigned int a5, int a6, char a7)
{
  uint64_t v7;
  char v8;
  char v9;
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  v7 = a1 + 8;
  if (a6)
    v8 = 2;
  else
    v8 = 0;
  v9 = *(_BYTE *)(a1 + 52) & 0xFD | v8;
  *(_BYTE *)(a1 + 52) = v9;
  *(_QWORD *)(a1 + 24) = *a4;
  *(_BYTE *)(a1 + 52) = v9 & 0xFE | a7;
  sub_22EF55B78(a1 + 8, a5);
  *(_BYTE *)(v7 + 44) &= 0xF3u;
  *(_QWORD *)(v7 + 24) = 0;
  result = v7 + 48;
  if ((*(_DWORD *)(v7 + 40) - 3) <= 0xFFFFFFFB)
    return *(_QWORD *)result;
  return result;
}

uint64_t sub_22EF55CB8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  int v28;
  unsigned __int8 v29;
  uint64_t v31;
  unsigned __int8 v32;

  v3 = 22;
  v32 = 22;
  result = 17;
  switch(*(_DWORD *)a2)
  {
    case 7:
      v8 = *(_QWORD *)(a2 + 8);
      v9 = v8 & 3;
      if (v9 == 3)
      {
        v10 = (v8 & 0x7FFFFFFF8) != 0;
        if ((v8 & 4) != 0)
          v10 = v8 > 7;
        if (!v10)
          return 22;
      }
      else
      {
        if (v8 < 4)
          return 22;
        v25 = (unsigned __int8 *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v8 & 3) == 0 && v25)
        {
          v23 = a1;
          goto LABEL_27;
        }
        if (v9 == 2 && v25)
        {
          v24 = sub_22F3ABD4C(a1, v8 & 0xFFFFFFFFFFFFFFFCLL, a3);
          goto LABEL_37;
        }
        if (v9 == 1)
        {
          if (v25)
          {
            if (*v25 == 186)
            {
              v31 = *((_QWORD *)v25 + 2);
              if ((v31 & 4) != 0)
              {
                if (sub_22F3B2674(v31 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_26;
                return 17;
              }
            }
          }
        }
      }
      return result;
    case 9:
      v11 = *(_DWORD *)(a2 + 16);
      if (v11)
      {
        v12 = 0;
        v13 = 72 * v11 - 72;
        do
        {
          v14 = sub_22EF55CB8(a1, *(_QWORD *)(a2 + 8) + v12, a3);
          sub_22EF55F74(&v32, v14);
          v3 = v32;
          v15 = (v32 & 7) == 1 || v13 == v12;
          v12 += 72;
        }
        while (!v15);
        v16 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        v16 = 0;
        v3 = 22;
      }
      if (v16 == *(_DWORD *)(a2 + 20))
        return v3;
      v22 = *(_QWORD *)(a2 + 8) + 72 * v16;
      goto LABEL_36;
    case 0xA:
      v17 = *(_DWORD *)(a2 + 16);
      if (v17)
      {
        v18 = 0;
        v19 = 72 * v17 - 72;
        do
        {
          v20 = sub_22EF55CB8(a1, *(_QWORD *)(a2 + 8) + v18, a3);
          sub_22EF55F74(&v32, v20);
          v3 = v32;
          v21 = (v32 & 7) == 1 || v19 == v18;
          v18 += 72;
        }
        while (!v21);
      }
      else
      {
        v3 = 22;
      }
      v26 = *(_DWORD *)(a2 + 20);
      if (v26)
      {
        v27 = 0;
        v28 = v26 - 1;
        do
        {
          v29 = sub_22EF55CB8(a1, *(_QWORD *)(a2 + 8) + 72 * (v27 + *(_DWORD *)(a2 + 16)), a3);
          sub_22EF55F74(&v32, v29);
          v3 = v32;
        }
        while ((v32 & 7) != 1 && v28 != v27++);
      }
      return v3;
    case 0xB:
      if (!*(_QWORD *)(a2 + 8))
        return 22;
      v22 = *(_QWORD *)(a2 + 16);
LABEL_36:
      v24 = sub_22EF55CB8(a1, v22, a3);
      goto LABEL_37;
    case 0xC:
      if ((*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8) == 0)
        return 22;
LABEL_26:
      v23 = a1;
LABEL_27:
      v24 = sub_22EFB620C(v23);
LABEL_37:
      sub_22EF55F74(&v32, v24);
      return v32;
    case 0xD:
      return result;
    default:
      return v3;
  }
}

_BYTE *sub_22EF55F74(_BYTE *result, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  char v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  _BOOL4 v11;
  char v12;

  v2 = a2 & 7;
  v3 = *result;
  if (v2 == 3)
    v4 = 3;
  else
    v4 = v3 & 7;
  if (v2 == 3)
    v2 = v3 & 7;
  v5 = v2 - 1;
  if (v4 < v2)
    LOBYTE(v2) = v4;
  v6 = v5 < 2 && v4 == 3;
  if (v6)
    LOBYTE(v2) = 0;
  v7 = v2 | v3 & 0xF8;
  v8 = (a2 >> 3) & 3;
  v9 = (a2 >> 5) & 1;
  v10 = (v3 >> 3) & 3;
  v6 = v10 == v8;
  v11 = v10 >= v8;
  if (!v6)
    v9 = 1;
  v12 = v7 & 0xC7 | (8 * v8) | a2 & 0x20;
  if ((v11 & v9) != 0)
    v7 = v12;
  *result = v7;
  return result;
}

uint64_t sub_22EF55FE4()
{
  return 1;
}

uint64_t sub_22EF55FEC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t sub_22EF55FF8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t sub_22EF56004(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v19;
  int v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v29;
  _QWORD v30[2];
  char v31;

  if (!a4[2])
    return 0;
  v7 = sub_22E677168(*(_QWORD *)(a1 + 1992), a3);
  v8 = v7;
  v9 = HIDWORD(v7);
  v10 = a4 + 1;
  v11 = a4[1];
  if (v11)
  {
    v12 = a4 + 1;
    do
    {
      v13 = *(_DWORD *)(v11 + 32);
      v14 = v13 >= HIDWORD(v7);
      if (v13 >= HIDWORD(v7))
        v15 = (uint64_t *)v11;
      else
        v15 = (uint64_t *)(v11 + 8);
      if (v14)
        v12 = (_QWORD *)v11;
      v11 = *v15;
    }
    while (*v15);
    if (v12 != v10)
    {
      v16 = v12[5];
      v17 = *(unsigned __int8 *)(v16 + 32);
      if ((v17 & 0x1C) == 0 || ((v17 >> 2) & 7) - 3 >= 0xFFFFFFFE)
      {
        if ((v17 & 0x40) == 0 || !*(_BYTE *)(*(_QWORD *)(a1 + 2000) + 568))
          goto LABEL_25;
      }
      else if ((v17 & 0x40) == 0)
      {
        goto LABEL_25;
      }
      v19 = (*(_DWORD *)(a2 + 28) & 0x7F) - 24;
      if (v19 <= 0x2B && ((1 << v19) & 0xFF00E000003) != 0)
      {
        v20 = sub_22F1E33FC(*(_QWORD *)(a1 + 1992), v7, SHIDWORD(v7), 0);
        v21 = sub_22F3F0AA0(a1 + 16072, v16, v8, *((_DWORD *)v12 + 8));
        v10 = v12;
        if (v20 == v21)
          return v16;
        goto LABEL_26;
      }
LABEL_25:
      v10 = v12;
    }
  }
LABEL_26:
  if (v10 == (_QWORD *)*a4)
    return 0;
  v22 = (_QWORD *)*v10;
  if (*v10)
  {
    do
    {
      v23 = v22;
      v22 = (_QWORD *)v22[1];
    }
    while (v22);
  }
  else
  {
    do
    {
      v23 = (_QWORD *)v10[2];
      v24 = *v23 == (_QWORD)v10;
      v10 = v23;
    }
    while (v24);
  }
  v25 = v23[5];
  v26 = *(unsigned __int8 *)(v25 + 32);
  if ((v26 & 0x1C) == 0 || ((v26 >> 2) & 7) - 3 >= 0xFFFFFFFE)
  {
    v16 = 0;
    if ((v26 & 0x40) != 0 || !*(_BYTE *)(*(_QWORD *)(a1 + 2000) + 568))
      return v16;
  }
  else if ((v26 & 0x40) != 0)
  {
    return 0;
  }
  v29 = sub_22F3F0B40(a1 + 16072, v25);
  sub_22F1E1E78(*(_QWORD **)(a1 + 1992), v8, (uint64_t)v30);
  if (!v31)
    return 0;
  v30[0] += v29;
  v30[1] = v9 - v29;
  if (llvm::StringRef::find_first_of() == -1)
    return v25;
  else
    return 0;
}

uint64_t sub_22EF56224(unint64_t a1, _QWORD *a2)
{
  int v2;
  uint64_t v5;
  _BYTE *v6;
  int v9;
  uint64_t v11;
  unint64_t v12;
  int v13;
  _BYTE *v14;
  char v15;
  uint64_t v16;
  char v18;

  v2 = *(_DWORD *)(a1 + 28);
  if ((v2 & 0x200) != 0)
    return 0;
  if ((*(_DWORD *)(a1 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    v5 = *(_QWORD *)(a1 + 144) & 6;
    v6 = (_BYTE *)(*(_QWORD *)(a1 + 144) & 0xFFFFFFFFFFFFFFF8);
    if (v5 != 4 || v6 == 0)
    {
      if (v5 != 2 || v6 == 0)
        goto LABEL_13;
    }
    else
    {
      v6 += 16;
    }
    if ((*v6 & 6) == 0)
      return 0;
  }
LABEL_13:
  v9 = *(_DWORD *)(a1 + 28) & 0x7F;
  if (v9 != 64 && (*(_DWORD *)(a1 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 4) != 0)
      v12 = *(_QWORD *)v12;
    if ((*(_WORD *)(v12 + 8) & 0x7Eu) - 34 <= 3)
    {
      if (sub_22EFBC2B0(a1) != 1)
      {
        v2 = *(_DWORD *)(a1 + 28);
        v9 = v2 & 0x7F;
        goto LABEL_23;
      }
      return 0;
    }
  }
LABEL_23:
  if ((v9 - 38) >= 0xFFFFFFFD && sub_22EFD5760(a1) == 1
    || (v2 & 0x7E) == 0x24 && (*(_BYTE *)(a1 + 180) & 6) == 0)
  {
    return 0;
  }
  v13 = v2 & 0x7F;
  if (v13 == 33)
  {
    v14 = *(_BYTE **)(a1 + 144);
    if (v14 && (*v14 & 6) == 0)
      return 0;
    v13 = 33;
  }
  else if ((v13 - 38) < 0xFFFFFFFB)
  {
    v15 = 1;
    goto LABEL_34;
  }
  v15 = 0;
  v16 = 0;
  if ((*(_DWORD *)(a1 + 72) & 0x50000) == 0x40000)
    return v16;
LABEL_34:
  if ((v13 - 24) <= 0x28)
  {
    if (((1 << (v13 - 24)) & 0x10800004100) != 0)
      return 0;
    if (v13 == 24)
      return (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1 + 16))(a1);
  }
  if ((v2 & 0x7C) == 0x1C || v13 == 25 || (v13 - 19) < 5 || v13 == 41 || (v2 & 0x7E) == 0x24)
    return (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1 + 16))(a1);
  v16 = *(unsigned int *)(a1 + 24);
  if ((int)v16 >= 0)
    v18 = 1;
  else
    v18 = v15;
  if ((v18 & 1) != 0 || !sub_22F1E2440(a2, *(_DWORD *)(a1 + 24), 0) || (*(_BYTE *)(a1 + 74) & 1) == 0)
    return v16;
  return sub_22F1E22F0(a2, v16);
}

uint64_t sub_22EF56434(_QWORD *a1, unint64_t a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21[9];

  if (!a2)
    return 0;
  v21[7] = v3;
  v21[8] = v4;
  v8 = sub_22EF565C8(a2);
  v9 = sub_22F3652A8((uint64_t)(a1 + 2020), v8);
  if (a1[2024] != v9)
  {
    if (a3)
      *a3 = v8;
    return *(_QWORD *)(v9 + 8);
  }
  result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v8 + 32))(v8);
  v21[0] = result;
  if (!result)
    return result;
  v10 = result;
  v11 = sub_22F3652A8((uint64_t)(a1 + 2026), result);
  if (a1[2030] != v11)
  {
    if (a3)
      *a3 = *(_QWORD *)(v11 + 8);
    v9 = sub_22F3652A8((uint64_t)(a1 + 2020), *(_QWORD *)(v11 + 8));
    return *(_QWORD *)(v9 + 8);
  }
  v12 = sub_22F3652A8((uint64_t)(a1 + 2032), v10);
  if (a1[2036] == v12)
    v13 = 0;
  else
    v13 = *(_QWORD *)(v12 + 8);
  v14 = v8;
  while (1)
  {
    if (v13)
    {
      if (v13 == v14)
        v13 = 0;
      goto LABEL_20;
    }
    v17 = sub_22F3651C0((uint64_t)a1, v14);
    if (v17)
      break;
    v13 = 0;
    *(_QWORD *)sub_22F29C4C0((uint64_t)(a1 + 2032), v21) = v14;
LABEL_20:
    v15 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v14 + 40))(v14);
    v14 = v15;
    if (v15 == v8 || v15 == 0)
    {
      result = 0;
      if (a3)
        *a3 = 0;
      return result;
    }
  }
  v18 = v17;
  v19 = (uint64_t)a1;
  v20 = v18;
  sub_22F36530C(v19, v14, v18);
  if (a3)
    *a3 = v14;
  return v20;
}

unint64_t sub_22EF565C8(unint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = result;
  v2 = *(_DWORD *)(result + 28);
  v3 = v2 & 0x7E;
  if ((v3 - 58) < 0xFFFFFFFA)
  {
    v4 = v2 & 0x7F;
    if ((v4 - 67) >= 0xFFFFFFF9)
    {
      if (v4 != 64)
      {
        v11 = *(_QWORD *)(result + 16);
        v12 = v11 & 0xFFFFFFFFFFFFFFF8;
        if ((v11 & 4) != 0)
          v12 = *(_QWORD *)v12;
        if ((*(_WORD *)(v12 + 8) & 0x7Eu) - 34 <= 3)
        {
          v13 = (_QWORD *)sub_22EFBE104(result);
          if (v13)
          {
            if ((*v13 & 0xFFFFFFFFFFFFFFF8) != 0)
              return *v13 & 0xFFFFFFFFFFFFFFF8;
            else
              return v1;
          }
        }
      }
    }
    else
    {
      if ((v4 - 38) >= 0xFFFFFFFD)
      {
        v14 = *(_QWORD *)(result + 136);
        v15 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFF8);
        if ((v14 & 4) == 0)
        {
          result = v14 & 0xFFFFFFFFFFFFFFF8;
          if (v15)
            return result;
        }
        if (v3 == 36)
        {
          if ((*(_BYTE *)(v1 + 180) & 7) != 1)
            return v1;
          v16 = *(_QWORD *)(v1 + 152);
          result = v16 & 0xFFFFFFFFFFFFFFF8;
          if ((v16 & 4) == 0 || !result)
            return result;
          v17 = *(_QWORD *)result;
        }
        else
        {
          if (!v15)
            return v1;
          result = v1;
          if ((v14 & 4) == 0)
            return result;
          v17 = *v15;
        }
        return v17 & 0xFFFFFFFFFFFFFFF8;
      }
      if (v4 == 33)
      {
        v5 = *(_QWORD **)(result + 144);
        if (v5)
          v5 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFF8);
        if (v5)
          return (unint64_t)v5;
        return result;
      }
    }
    return v1;
  }
  v6 = *(_QWORD *)(result + 144);
  v7 = v6 & 6;
  result = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 6) == 0 && result != 0)
    return result;
  if (v7 != 4 || result == 0)
  {
    v10 = v7 != 2 || result == 0;
    if (v10 || (*(_BYTE *)result & 6) != 0)
      return v1;
  }
  else
  {
    v18 = *(_QWORD *)(result + 16);
    if ((v18 & 6) != 0)
      return v1;
    result = v18 & 0xFFFFFFFFFFFFFFF8;
    if ((v18 & 0xFFFFFFFFFFFFFFF8) != 0)
      return result;
  }
  result = sub_22EFBF824(v1);
  if (!result)
    return v1;
  return result;
}

unint64_t sub_22EF56748(unint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *i;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (*(_DWORD *)(result + 16088))
    v4 = a3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v6 = a2;
    v7 = result;
    v8 = 8 * a3;
    v9 = 8 * a3;
    for (i = a2; ; ++i)
    {
      v11 = *(_DWORD *)(*i + 24);
      if (v11)
        break;
      v9 -= 8;
      if (!v9)
        return result;
    }
    result = sub_22E677168(*(_QWORD *)(result + 1992), v11);
    if ((_DWORD)result)
    {
      LODWORD(v25) = result;
      result = (unint64_t)sub_22F3F0A38((uint64_t *)(v7 + 16080), &v25);
      v12 = *(_QWORD *)(v7 + 16080) + 32 * *(unsigned int *)(v7 + 16096);
      v13 = v12 == result ? 0 : (_QWORD *)(result + 8);
      if (v12 != result && *(_QWORD *)(result + 24))
      {
        v15 = *(_QWORD **)(result + 16);
        result += 16;
        v14 = v15;
        if (v15)
        {
          do
          {
            v16 = v14;
            v14 = (_QWORD *)v14[1];
          }
          while (v14);
        }
        else
        {
          do
          {
            v16 = *(_QWORD **)(result + 16);
            v4 = *v16 == result;
            result = (unint64_t)v16;
          }
          while (v4);
        }
        if ((*(_BYTE *)(v16[5] + 32) & 0x20) == 0)
        {
          do
          {
            result = *v6;
            if ((*(_BYTE *)(*v6 + 28) & 0x80) == 0)
            {
              v17 = sub_22EF565C8(result);
              result = sub_22EF56224(v17, *(_QWORD **)(v7 + 1992));
              if ((int)result >= 1)
              {
                v18 = result;
                v24 = 0;
                v25 = v17;
                result = sub_22F25AFD8((uint64_t *)(v7 + 16160), &v25, &v24);
                if ((_DWORD)result)
                {
                  v19 = v24;
                  v20 = *(_QWORD *)(v7 + 16160);
                  v21 = *(unsigned int *)(v7 + 16176);
                }
                else
                {
                  v20 = *(_QWORD *)(v7 + 16160);
                  v21 = *(unsigned int *)(v7 + 16176);
                  v19 = v20 + 16 * v21;
                }
                if (v19 == v20 + 16 * v21)
                {
                  result = sub_22EF56004(v7, v17, v18, v13);
                  if (result)
                  {
                    v22 = (int *)result;
                    sub_22F36530C(v7, v17, result);
                    v23 = sub_22F3F08AC(v22, v7, a4, v17);
                    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
                    result = (unint64_t)sub_22F24C2B0(v7 + 16304, &v25);
                    *(_QWORD *)(result + 8) = v23;
                  }
                }
              }
            }
            ++v6;
            v8 -= 8;
          }
          while (v8);
        }
      }
    }
  }
  return result;
}

void sub_22EF5693C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  unsigned int v30;
  unsigned __int8 *v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t *v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned __int8 *v62;
  unsigned int v63;
  uint64_t (**v64)();
  uint64_t v65;
  char v66;
  uint64_t v67;

  v6 = *(_DWORD *)(a3 + 64) & 0xFFFFF;
  v7 = *(_DWORD *)(a1 + 8);
  if (v7 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v7) = v6;
  v8 = *(_DWORD *)(a1 + 12);
  v9 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v9;
  v10 = *(_DWORD *)(a3 + 64) >> 20;
  if (v9 >= v8)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v9) = v10;
  v11 = *(_DWORD *)(a1 + 12);
  v12 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v12;
  v13 = *(unsigned __int8 *)(a3 + 80);
  if (v12 >= v11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v12) = v13;
  v14 = *(_DWORD *)(a1 + 12);
  v15 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v15;
  v16 = *(_QWORD *)(a3 + 56);
  v17 = *(_DWORD *)(v16 + 12) & 0x1FFFFFFF;
  if (v15 >= v14)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v15) = v17;
  ++*(_DWORD *)(a1 + 8);
  v18 = *(_DWORD *)(v16 + 12) & 0x1FFFFFFF;
  if ((_DWORD)v18)
  {
    v19 = (uint64_t *)(v16 + 16);
    v20 = v16 + 16 + 8 * v18;
    do
    {
      v21 = *v19;
      v22 = *(_DWORD *)(*v19 + 28) & 0x7F;
      if (*v19 && v22 == 38)
      {
        v23 = *(unsigned int *)(a1 + 8);
        if (v23 >= *(unsigned int *)(a1 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v23 = *(unsigned int *)(a1 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a1 + 4 * v23) = 0;
        v24 = *(_DWORD *)(a1 + 12);
        v25 = *(_DWORD *)(a1 + 8) + 1;
        *(_DWORD *)(a1 + 8) = v25;
        v26 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 48)
                                                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                        + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 32);
        if (v25 >= v24)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v25 = *(_DWORD *)(a1 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a1 + 4 * v25) = (v26 >> 15) & 1;
        v27 = *(_DWORD *)(a1 + 12);
        v28 = *(_DWORD *)(a1 + 8) + 1;
        *(_DWORD *)(a1 + 8) = v28;
        v29 = *(_BYTE *)(v21 + 60);
        if (v28 >= v27)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v28 = *(_DWORD *)(a1 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a1 + 4 * v28) = (v29 & 4) >> 2;
        v30 = *(_DWORD *)(a1 + 8) + 1;
        *(_DWORD *)(a1 + 8) = v30;
        if ((v29 & 4) != 0)
        {
          v31 = *(unsigned __int8 **)(v21 + 152);
          v66 = 1;
          v64 = &off_24FAC6E70;
          v65 = a1;
          v67 = a2;
          sub_22F0E9FEC(&v64, v31);
          v30 = *(_DWORD *)(a1 + 8);
        }
        v32 = *(_DWORD *)(a1 + 12);
        if ((*(_BYTE *)(v21 + 60) & 8) != 0)
        {
          if (v30 >= v32)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v30 = *(_DWORD *)(a1 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a1 + 4 * v30) = 1;
          v57 = *(_DWORD *)(a1 + 12);
          v58 = *(_DWORD *)(a1 + 8) + 1;
          *(_DWORD *)(a1 + 8) = v58;
          v59 = *(_DWORD *)(v21 + 64);
          if (v58 >= v57)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v58 = *(_DWORD *)(a1 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a1 + 4 * v58) = v59;
        }
        else
        {
          if (v30 >= v32)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v30 = *(_DWORD *)(a1 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a1 + 4 * v30) = 0;
        }
      }
      else
      {
        v33 = *(unsigned int *)(a1 + 8);
        v34 = *(unsigned int *)(a1 + 12);
        if (!v21 || v22 != 59)
        {
          if (v33 >= v34)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v33 = *(unsigned int *)(a1 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a1 + 4 * v33) = 2;
          ++*(_DWORD *)(a1 + 8);
          sub_22EF5693C(a1, a2, v21);
          goto LABEL_60;
        }
        if (v33 >= v34)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v33 = *(unsigned int *)(a1 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a1 + 4 * v33) = 1;
        v35 = *(_DWORD *)(a1 + 12);
        v36 = *(_DWORD *)(a1 + 8) + 1;
        *(_DWORD *)(a1 + 8) = v36;
        v37 = *(unsigned __int8 *)(v21 + 80);
        if (v36 >= v35)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v36 = *(_DWORD *)(a1 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a1 + 4 * v36) = v37;
        v38 = *(_DWORD *)(a1 + 12);
        v39 = *(_DWORD *)(a1 + 8) + 1;
        *(_DWORD *)(a1 + 8) = v39;
        v40 = *(_QWORD *)(v21 + 48);
        v41 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFFF0) + 8);
        if (v39 >= v38)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v39 = *(_DWORD *)(a1 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a1 + 4 * v39) = v40 & 7 | v41;
        v42 = *(_DWORD *)(a1 + 12);
        v43 = *(_DWORD *)(a1 + 8) + 1;
        *(_DWORD *)(a1 + 8) = v43;
        if (v43 >= v42)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v43 = *(_DWORD *)(a1 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a1 + 4 * v43) = HIDWORD(v41);
        v44 = *(_DWORD *)(a1 + 12);
        v45 = *(_DWORD *)(a1 + 8) + 1;
        *(_DWORD *)(a1 + 8) = v45;
        if (*(_BYTE *)(v21 + 81))
        {
          if (v45 >= v44)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v45 = *(_DWORD *)(a1 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a1 + 4 * v45) = 1;
          v46 = *(_DWORD *)(a1 + 12);
          v47 = *(_DWORD *)(a1 + 8) + 1;
          *(_DWORD *)(a1 + 8) = v47;
          v48 = *(_DWORD *)(v21 + 84);
          if (v47 >= v46)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v47 = *(_DWORD *)(a1 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a1 + 4 * v47) = v48;
          v49 = *(_DWORD *)(a1 + 8) + 1;
          *(_DWORD *)(a1 + 8) = v49;
          v50 = *(unsigned int *)(v21 + 84);
          if ((_DWORD)v50)
          {
            v51 = (uint64_t *)(v21 + 88);
            do
            {
              v53 = *v51;
              v51 += 2;
              v52 = v53;
              v54 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFFFF0) + 8);
              if (v49 >= *(_DWORD *)(a1 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v49 = *(_DWORD *)(a1 + 8);
              }
              *(_DWORD *)(*(_QWORD *)a1 + 4 * v49) = v52 & 7 | v54;
              v55 = *(_DWORD *)(a1 + 12);
              v56 = *(_DWORD *)(a1 + 8) + 1;
              *(_DWORD *)(a1 + 8) = v56;
              if (v56 >= v55)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v56 = *(_DWORD *)(a1 + 8);
              }
              *(_DWORD *)(*(_QWORD *)a1 + 4 * v56) = HIDWORD(v54);
              v49 = *(_DWORD *)(a1 + 8) + 1;
              *(_DWORD *)(a1 + 8) = v49;
              --v50;
            }
            while (v50);
          }
          goto LABEL_60;
        }
        if (v45 >= v44)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v45 = *(_DWORD *)(a1 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a1 + 4 * v45) = 0;
      }
      ++*(_DWORD *)(a1 + 8);
LABEL_60:
      ++v19;
    }
    while (v19 != (uint64_t *)v20);
  }
  v60 = *(_QWORD *)(a3 + 56);
  v61 = *(_DWORD *)(v60 + 12);
  if ((v61 & 0x40000000) != 0)
    v62 = *(unsigned __int8 **)(v60 + 8 * (v61 & 0x1FFFFFFF) + 16);
  else
    v62 = 0;
  v63 = *(_DWORD *)(a1 + 8);
  if (v63 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v63 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v63) = v62 != 0;
  ++*(_DWORD *)(a1 + 8);
  if (v62)
  {
    v66 = 1;
    v64 = &off_24FAC6E70;
    v65 = a1;
    v67 = a2;
    sub_22F0E9FEC(&v64, v62);
  }
}

uint64_t sub_22EF56FD4(uint64_t a1, uint64_t a2)
{
  uint64_t NodeOrInsertPos;
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  void *v21;
  unsigned int v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  _OWORD *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  void *v62;
  int v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  __int128 v73;
  _QWORD v74[2];
  void *v75[2];
  _QWORD v76[3];
  void *v77;
  uint64_t v78;
  _QWORD v79[33];
  void *v80;
  uint64_t v81;
  _BYTE v82[32];
  void *v83[2];
  _QWORD v84[18];

  v84[16] = *MEMORY[0x24BDAC8D0];
  v83[0] = v84;
  v83[1] = (void *)0x2000000000;
  sub_22EF5693C((uint64_t)v83, a1, a2);
  v74[1] = 0;
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v5 = *(_QWORD *)(NodeOrInsertPos + 8);
  }
  else
  {
    v68 = a2;
    v7 = *(_QWORD *)(a2 + 56);
    v80 = v82;
    v81 = 0x400000000;
    v8 = *(_DWORD *)(v7 + 12) & 0x1FFFFFFF;
    if (v8 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_DWORD *)(v7 + 12) & 0x1FFFFFFF;
    }
    if (v8)
    {
      v12 = 0;
      v13 = (uint64_t *)(v7 + 16);
      v14 = v7 + 16 + 8 * v8;
      v70 = v14;
      do
      {
        v15 = *v13;
        v16 = *(_DWORD *)(*v13 + 28) & 0x7F;
        if (*v13 && v16 == 38)
        {
          v17 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(a1 + 1960) + 80));
          if (v17)
            v18 = v17 + 40;
          else
            v18 = 0;
          if ((*(_BYTE *)(v15 + 60) & 8) != 0)
          {
            v20 = *(_DWORD *)(v15 + 64);
            v12 = v20 >> 8;
            v19 = 0x100000000;
          }
          else
          {
            v19 = 0;
            LOBYTE(v20) = 0;
          }
          v30 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 48)
                                                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                          + 8) & 0xFFFFFFFFFFFFFFF0)
                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 32);
          v31 = sub_22EFEAF4C(a1, v18, 0, 0, v30 & 0x7FFF, HIWORD(v30), 0, 0, (v30 & 0x8000) != 0, (*(_BYTE *)(v15 + 60) & 2) != 0, v19 | v20 | (v12 << 8));
          v26 = v31;
          if ((*(_BYTE *)(v15 + 60) & 4) != 0)
            v32 = v15 + 80;
          else
            v32 = 0;
          if ((*(_BYTE *)(v15 + 60) & 4) != 0)
          {
            v33 = sub_22EF57740(a1, *(_QWORD *)(v15 + 152), (void *)(*(_QWORD *)(v31 + 48) & 0xFFFFFFFFFFFFFFF0));
            v77 = v79;
            v78 = 0x800000000;
            v79[32] = 0;
            v34 = v79;
            v35 = *(_QWORD *)(v15 + 144);
            if (v35)
            {
              v36 = *(unsigned int *)(v35 + 8);
              v34 = v79;
              if ((_DWORD)v36)
              {
                v37 = v35 + 16;
                v38 = 32 * v36;
                do
                {
                  v39 = *(_QWORD *)(v37 + 16);
                  *(_OWORD *)v75 = *(_OWORD *)v37;
                  v76[0] = v39;
                  v76[1] = 0;
                  v40 = (_OWORD *)sub_22E78DF7C((uint64_t)&v77, (unint64_t)v75, 1);
                  v41 = (char *)v77 + 32 * v78;
                  v42 = v40[1];
                  *v41 = *v40;
                  v41[1] = v42;
                  LODWORD(v78) = v78 + 1;
                  v37 += 32;
                  v38 -= 32;
                }
                while (v38);
                v34 = v77;
              }
            }
            *(_QWORD *)&v73 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + 40);
            DWORD2(v73) = 0;
            sub_22EFC6D6C((uint64_t)v74, v73);
            v43 = *(_QWORD *)(v32 + 56);
            *(_QWORD *)(v26 + 80) = 0;
            *(_QWORD *)(v26 + 88) = 0;
            *(_DWORD *)(v26 + 96) = 0;
            *(_OWORD *)(v26 + 104) = v73;
            *(_QWORD *)(v26 + 120) = v74[0];
            *(_QWORD *)(v26 + 128) = 0;
            *(_QWORD *)(v26 + 136) = v43;
            *(_QWORD *)(v26 + 144) = 0;
            *(_QWORD *)(v26 + 152) = v33;
            *(_BYTE *)(v26 + 60) |= 4u;
            if (v34 != v79)
              free(v34);
            v14 = v70;
          }
        }
        else if (v15 && v16 == 59)
        {
          v71 = *(_QWORD *)((*(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
          v21 = (void *)(*(_QWORD *)(v15 + 48) & 7 | v71);
          v22 = sub_22F11598C((unint64_t)v21);
          v23 = (_QWORD *)sub_22E3CD3D4(a1 + 2032, v22 + 8, 3);
          *v23 = v21;
          sub_22F115E94(a1, (unint64_t)v21, v23 + 1, 0);
          if (*(_BYTE *)(v15 + 81))
          {
            v69 = v12;
            v77 = v79;
            v78 = 0x200000000;
            v75[0] = v76;
            v75[1] = (void *)0x200000000;
            v45 = *(unsigned int *)(v15 + 84);
            if ((_DWORD)v45)
            {
              v48 = (uint64_t *)(v15 + 88);
              do
              {
                v50 = *v48;
                v48 += 2;
                v49 = v50;
                v51 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFFFF0) + 8);
                v52 = v78;
                if (v78 >= (unint64_t)HIDWORD(v78))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v52 = v78;
                }
                *((_QWORD *)v77 + v52) = v49 & 7 | v51;
                LODWORD(v78) = v78 + 1;
                v53 = *((_QWORD *)v77 + v78 - 1);
                v54 = sub_22F11598C(v53);
                v55 = (_QWORD *)sub_22E3CD3D4(a1 + 2032, v54 + 8, 3);
                *v55 = v53;
                sub_22F115E94(a1, v53, v55 + 1, 0);
                v56 = LODWORD(v75[1]);
                if (LODWORD(v75[1]) >= (unint64_t)HIDWORD(v75[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v56 = LODWORD(v75[1]);
                }
                *((_QWORD *)v75[0] + v56) = v55;
                ++LODWORD(v75[1]);
                --v45;
              }
              while (v45);
            }
            v46 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(a1 + 1960) + 80));
            if (v46)
              v47 = v46 + 40;
            else
              v47 = 0;
            v26 = sub_22F3B8968(a1, v47, 0, 0, *(_DWORD *)(v15 + 68) & 0xFFFFF, *(_DWORD *)(v15 + 68) >> 20, 0, (uint64_t)v21, v23, (uint64_t *)v77, v78, (uint64_t *)v75[0], LODWORD(v75[1]));
            if (v75[0] != v76)
              free(v75[0]);
            v12 = v69;
            v14 = v70;
            if (v77 != v79)
              free(v77);
          }
          else
          {
            v24 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(a1 + 1960) + 80));
            if (v24)
              v25 = v24 + 40;
            else
              v25 = 0;
            v26 = sub_22EFEB338(a1, v25, 0, 0, *(_DWORD *)(v15 + 68) & 0xFFFFF, *(_DWORD *)(v15 + 68) >> 20, 0, (uint64_t)v21, *(_BYTE *)(v15 + 80), (uint64_t)v23);
          }
          v27 = *(_QWORD *)(v71 & 0xFFFFFFFFFFFFFFF0);
          LOBYTE(v77) = 0;
          v28 = sub_22F110500((uint64_t)&v77, v27);
          if (v28 && *(_BYTE *)(v28 + 16) == 14 && *(_QWORD *)(v28 + 40))
          {
            v29 = sub_22F2D6770(v15);
            *(_QWORD *)(v26 + 16 * *(unsigned int *)(v26 + 84) + 88) = sub_22EF57740(a1, v29, v21);
          }
        }
        else
        {
          v26 = sub_22EF56FD4(a1, *v13);
        }
        v44 = v81;
        if (v81 >= (unint64_t)HIDWORD(v81))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v44 = v81;
        }
        *((_QWORD *)v80 + v44) = v26;
        LODWORD(v81) = v81 + 1;
        ++v13;
      }
      while (v13 != (uint64_t *)v14);
    }
    v9 = *(_QWORD *)(v68 + 56);
    v10 = *(_DWORD *)(v9 + 12);
    if ((v10 & 0x40000000) != 0)
      v11 = *(_QWORD *)(v9 + 8 * (v10 & 0x1FFFFFFF) + 16);
    else
      v11 = 0;
    v57 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(a1 + 1960) + 80));
    if (v57)
      v58 = v57 + 40;
    else
      v58 = 0;
    v59 = *(_DWORD *)(v68 + 64);
    v60 = v59 & 0xFFFFF;
    v61 = v59 >> 20;
    v72 = *(_BYTE *)(v68 + 80);
    v62 = v80;
    v63 = v81;
    if (v11)
      v64 = v81 + 1;
    else
      v64 = v81;
    v65 = (_DWORD *)sub_22E3CD3D4(a1 + 2032, 8 * v64 + 16, 3);
    sub_22EFE8D6C(v65, v66, 0, 0, (uint64_t)v62, v63, 0, v11);
    v5 = sub_22F3B8BD0(a1, v58, 0, v60, v61, v72, 0, (uint64_t)v65);
    llvm::FoldingSetBase::FindNodeOrInsertPos();
    v67 = (_QWORD *)sub_22E3CD3D4(a1 + 2032, 16, 3);
    *v67 = 0;
    v67[1] = v5;
    llvm::FoldingSetBase::InsertNode();
    if (v80 != v82)
      free(v80);
  }
  if (v83[0] != v84)
    free(v83[0]);
  return v5;
}

uint64_t sub_22EF57740(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  char *v9;
  __int128 v10;
  unint64_t v11;
  char *v12;
  __int128 v13;
  unsigned int v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v20;
  _DWORD v21[2];
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[10];

  v25[9] = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  if (*(_BYTE *)a2 == 124)
    v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_DWORD *)(v6 + 88);
  v23 = v25;
  v24 = 0x300000000;
  if (v7 >= 4)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if (*(_DWORD *)(v6 + 104) == 8)
  {
    v21[0] = 1;
    v22 = a3;
    v8 = sub_22E4EF088((uint64_t)&v23, (unint64_t)v21, 1);
    v9 = (char *)v23 + 24 * v24;
    v10 = *(_OWORD *)v8;
    *((_QWORD *)v9 + 2) = *(_QWORD *)(v8 + 16);
    *(_OWORD *)v9 = v10;
    LODWORD(v24) = v24 + 1;
    sub_22F346110((unsigned int *)&v23, (uint64_t)v23 + 24 * v24, (_BYTE *)(*(_QWORD *)(v6 + 112) + 24), (_BYTE *)(*(_QWORD *)(v6 + 112) + 24 * *(unsigned int *)(v6 + 108)));
    v22 = v23;
    v21[0] = 8;
    v21[1] = v24;
    LODWORD(v24) = 0;
    v11 = sub_22E4EF088((uint64_t)&v23, (unint64_t)v21, 1);
    v12 = (char *)v23 + 24 * v24;
    v13 = *(_OWORD *)v11;
    *((_QWORD *)v12 + 2) = *(_QWORD *)(v11 + 16);
    *(_OWORD *)v12 = v13;
    v14 = v24 + 1;
    LODWORD(v24) = v24 + 1;
  }
  else
  {
    v21[0] = 1;
    v22 = a3;
    v15 = sub_22E4EF088((uint64_t)&v23, (unint64_t)v21, 1);
    v16 = (char *)v23 + 24 * v24;
    v17 = *(_OWORD *)v15;
    *((_QWORD *)v16 + 2) = *(_QWORD *)(v15 + 16);
    *(_OWORD *)v16 = v17;
    LODWORD(v24) = v24 + 1;
    sub_22F346110((unsigned int *)&v23, (uint64_t)v23 + 24 * v24, (_BYTE *)(v6 + 128), (_BYTE *)(v6 + 128 + 24 * v7 - 24));
    v14 = v24;
  }
  v18 = sub_22F3C4038(a1, *(_QWORD *)(v6 + 72), (__int128 *)v23, v14, 0, (*(_DWORD *)v6 >> 14) & 1, (*(_DWORD *)v6 >> 13) & 1);
  if (*(_BYTE *)a2 == 124)
  {
    v20 = sub_22E3CD3D4(a1 + 2032, 64, 3);
    v18 = sub_22F34B0D0(v20, *(_QWORD *)(a2 + 8), 0, 0, v18, 19, 0, 0, 0, 0);
  }
  if (v23 != v25)
    free(v23);
  return v18;
}

_QWORD *sub_22EF579A8(uint64_t a1, unint64_t a2, unsigned int a3)
{
  unsigned int v6;
  _QWORD *v7;

  v6 = sub_22F11598C(a2);
  v7 = (_QWORD *)sub_22E3CD3D4(a1 + 2032, v6 + 8, 3);
  *v7 = a2;
  sub_22F115E94(a1, a2, v7 + 1, a3);
  return v7;
}

uint64_t sub_22EF57A14(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;

  v1 = (unsigned int *)(*(_QWORD *)(a1 + 15088) + 148);
  v2 = *(_QWORD *)(a1 + 2000);
  if (*(_BYTE *)(v2 + 700))
    v1 = (unsigned int *)(v2 + 696);
  return *v1;
}

uint64_t sub_22EF57A38(uint64_t a1, uint64_t a2, llvm::SpecialCaseList *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  llvm::FoldingSetBase *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  llvm::SpecialCaseList **v18;

  *(_DWORD *)a1 = 0;
  v14 = (llvm::FoldingSetBase *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = 0;
  llvm::FoldingSetBase::FoldingSetBase(v14);
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 40));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 56));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 72));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 88));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 104));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 120));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 136));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 152));
  *(_QWORD *)(a1 + 168) = a1;
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 176));
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 216));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 232));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 248));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 264));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 280));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 296));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 312));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 328));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 344));
  *(_QWORD *)(a1 + 360) = a1;
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 368));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 384));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 400));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 416));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 432));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 448));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 464));
  *(_QWORD *)(a1 + 480) = a1;
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 488));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 504));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 520));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 536));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 552));
  *(_QWORD *)(a1 + 568) = a1;
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 576));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 592));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 608));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 624));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 640));
  *(_QWORD *)(a1 + 656) = a1;
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 664));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 680));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 696));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 712));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 728));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 744));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 760));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 776));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 792));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 808));
  *(_QWORD *)(a1 + 824) = a1;
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 832));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 848));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 864));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 880));
  *(_QWORD *)(a1 + 896) = a1;
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 904));
  *(_DWORD *)(a1 + 944) = 0;
  *(_QWORD *)(a1 + 936) = 0;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_DWORD *)(a1 + 968) = 0;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_DWORD *)(a1 + 992) = 0;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_DWORD *)(a1 + 1016) = 0;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_DWORD *)(a1 + 1040) = 0;
  *(_DWORD *)(a1 + 1064) = 0;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_DWORD *)(a1 + 1088) = 0;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_DWORD *)(a1 + 1112) = 0;
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 1120));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 1136));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 1152));
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_QWORD *)(a1 + 1184) = 0x1000000000;
  *(_QWORD *)(a1 + 1200) = 0;
  *(_OWORD *)(a1 + 1208) = 0u;
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 1224));
  *(_QWORD *)(a1 + 1240) = a1;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_DWORD *)(a1 + 1504) = 0;
  *(_DWORD *)(a1 + 1528) = 0;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_DWORD *)(a1 + 1552) = 0;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_DWORD *)(a1 + 1576) = 0;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_DWORD *)(a1 + 1600) = 0;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_DWORD *)(a1 + 1624) = 0;
  *(_DWORD *)(a1 + 1648) = 0;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_DWORD *)(a1 + 1672) = 0;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_DWORD *)(a1 + 1696) = 0;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_DWORD *)(a1 + 1720) = 0;
  *(_DWORD *)(a1 + 1744) = 0;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_DWORD *)(a1 + 1768) = 0;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_DWORD *)(a1 + 1792) = 0;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_DWORD *)(a1 + 1816) = 0;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(_OWORD *)(a1 + 1852) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1900) = 0u;
  *(_OWORD *)(a1 + 1888) = 0u;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_DWORD *)(a1 + 1936) = 0;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(_QWORD *)(a1 + 1992) = a3;
  *(_QWORD *)(a1 + 2000) = a2;
  v15 = (uint64_t *)operator new();
  sub_22F1DD610(v15);
  v15[1] = (uint64_t)a3;
  *(_QWORD *)(a1 + 2008) = v15;
  v16 = operator new();
  v17 = *(uint64_t **)(a1 + 2000);
  *(_QWORD *)(a1 + 2016) = sub_22F43F700(v16, v17[38], 0xAAAAAAAAAAAAAAABLL * ((v17[39] - v17[38]) >> 3), v17[41], 0xAAAAAAAAAAAAAAABLL * ((v17[42] - v17[41]) >> 3), v17[44], 0xAAAAAAAAAAAAAAABLL * ((v17[45] - v17[44]) >> 3), (uint64_t)a3);
  v18 = (llvm::SpecialCaseList **)operator new();
  *(_QWORD *)(a1 + 2024) = sub_22F1DD2C8(v18, *(_QWORD *)(*(_QWORD *)(a1 + 2000) + 376), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 2000) + 384)- *(_QWORD *)(*(_QWORD *)(a1 + 2000) + 376)) >> 3), a3);
  *(_OWORD *)(a1 + 2032) = 0u;
  *(_QWORD *)(a1 + 2048) = a1 + 2064;
  *(_QWORD *)(a1 + 2056) = 0x400000000;
  *(_QWORD *)(a1 + 2096) = a1 + 2112;
  *(_OWORD *)(a1 + 2104) = 0u;
  *(_QWORD *)(a1 + 2120) = 1;
  sub_22F1CE6F0(a1 + 2128);
  *(_OWORD *)(a1 + 15064) = 0u;
  *(_OWORD *)(a1 + 15088) = 0u;
  sub_22E462F04((unint64_t *)(a1 + 15104), (unsigned int *)a2);
  *(_OWORD *)(a1 + 15148) = 0u;
  *(_OWORD *)(a1 + 15136) = 0u;
  *(_OWORD *)(a1 + 15120) = 0u;
  *(_OWORD *)(a1 + 15168) = 0u;
  *(_DWORD *)(a1 + 15184) = 0;
  *(_QWORD *)(a1 + 15192) = a4;
  *(_QWORD *)(a1 + 15200) = a5;
  *(_QWORD *)(a1 + 15208) = a6;
  *(_DWORD *)(a1 + 15216) = a7;
  sub_22EFC69A0((_QWORD *)(a1 + 15224), a1);
  *(_BYTE *)(a1 + 16064) = 0;
  *(_OWORD *)(a1 + 16048) = 0u;
  *(_QWORD *)(a1 + 16072) = a3;
  *(_BYTE *)(a1 + 16152) = 0;
  *(_OWORD *)(a1 + 16080) = 0u;
  *(_DWORD *)(a1 + 16096) = 0;
  *(_OWORD *)(a1 + 16104) = 0u;
  *(_DWORD *)(a1 + 16120) = 0;
  *(_OWORD *)(a1 + 16128) = 0u;
  *(_DWORD *)(a1 + 16144) = 0;
  *(_OWORD *)(a1 + 16160) = 0u;
  *(_DWORD *)(a1 + 16176) = 0;
  *(_OWORD *)(a1 + 16184) = 0u;
  *(_OWORD *)(a1 + 16200) = 0u;
  *(_OWORD *)(a1 + 16212) = 0u;
  *(_OWORD *)(a1 + 16260) = 0u;
  *(_OWORD *)(a1 + 16248) = 0u;
  *(_OWORD *)(a1 + 16232) = 0u;
  *(_OWORD *)(a1 + 16308) = 0u;
  *(_OWORD *)(a1 + 16296) = 0u;
  *(_OWORD *)(a1 + 16280) = 0u;
  *(_DWORD *)(a1 + 16328) = 198;
  *(_QWORD *)(a1 + 16336) = a1 + 2032;
  *(_QWORD *)(a1 + 16344) = a1 + 16360;
  *(_QWORD *)(a1 + 16352) = 0x400000000;
  sub_22F3A7EF0(a1 + 16328, (const void ***)(a2 + 544));
  bzero((void *)(a1 + 16392), 0x8B4uLL);
  *(_DWORD *)(a1 + 18640) = 0;
  *(_OWORD *)(a1 + 18624) = 0u;
  *(_QWORD *)(a1 + 18648) = a1;
  *(_OWORD *)(a1 + 18656) = 0u;
  *(_DWORD *)(a1 + 18672) = 0;
  *(_OWORD *)(a1 + 18680) = 0u;
  *(_OWORD *)(a1 + 18696) = 0u;
  *(_OWORD *)(a1 + 18712) = 0u;
  *(_QWORD *)(a1 + 18728) = 0;
  *(_QWORD *)(a1 + 18736) = a1 + 18752;
  *(_QWORD *)(a1 + 18744) = 0x1000000000;
  *(_OWORD *)(a1 + 19008) = 0u;
  *(_OWORD *)(a1 + 19024) = 0u;
  *(_OWORD *)(a1 + 19040) = 0u;
  *(_OWORD *)(a1 + 19052) = 0u;
  *(_DWORD *)(a1 + 19068) = 24;
  *(_QWORD *)(a1 + 19080) = a1 + 19096;
  *(_QWORD *)(a1 + 19088) = 0x400000000;
  *(_DWORD *)(a1 + 19144) = 0;
  *(_OWORD *)(a1 + 19128) = 0u;
  sub_22F3655A8(a1);
  return a1;
}

void sub_22EF581A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  void **v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;

  sub_22EFCE95C(*(_QWORD *)(a1 + 19008) & 0xFFFFFFFFFFFFFFF8, (*(_QWORD *)(a1 + 19008) & 4) != 0);
  *(_QWORD *)(a1 + 19008) &= 7uLL;
  v2 = *(unsigned int *)(a1 + 18744);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)(a1 + 18736);
    v4 = v3 + 16 * v2;
    do
    {
      v6 = *(void (**)(uint64_t))v3;
      v5 = *(_QWORD *)(v3 + 8);
      v3 += 16;
      v6(v5);
    }
    while (v3 != v4);
  }
  *(_DWORD *)(a1 + 18744) = 0;
  v7 = *(_QWORD *)(a1 + 952);
  v8 = *(unsigned int *)(a1 + 968);
  v9 = (_QWORD *)(v7 + 16 * v8);
  if (*(_DWORD *)(a1 + 960))
  {
    if ((_DWORD)v8)
    {
      v11 = 16 * v8;
      v10 = *(_QWORD **)(a1 + 952);
      while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v10 += 2;
        v11 -= 16;
        if (!v11)
          goto LABEL_10;
      }
    }
    else
    {
      v10 = *(_QWORD **)(a1 + 952);
    }
  }
  else
  {
LABEL_10:
    v10 = (_QWORD *)(v7 + 16 * v8);
  }
  v12 = (_QWORD *)(v7 + 16 * v8);
  if (v10 != v12)
  {
    do
    {
      v13 = v10 + 2;
      v14 = v9;
      if (v10 + 2 != v9)
      {
        while ((*v13 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v13 += 2;
          if (v13 == v9)
          {
            v14 = v9;
            goto LABEL_17;
          }
        }
        v14 = v13;
      }
LABEL_17:
      v15 = v10[1];
      if (v15)
        sub_22F0C93EC(v15);
      v10 = v14;
    }
    while (v14 != v12);
  }
  sub_22E5D120C(a1 + 952);
  v16 = *(_QWORD *)(a1 + 928);
  v17 = *(unsigned int *)(a1 + 944);
  v18 = (_QWORD *)(v16 + 16 * v17);
  if (*(_DWORD *)(a1 + 936))
  {
    if ((_DWORD)v17)
    {
      v20 = 16 * v17;
      v19 = *(_QWORD **)(a1 + 928);
      while ((*v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v19 += 2;
        v20 -= 16;
        if (!v20)
          goto LABEL_26;
      }
    }
    else
    {
      v19 = *(_QWORD **)(a1 + 928);
    }
  }
  else
  {
LABEL_26:
    v19 = (_QWORD *)(v16 + 16 * v17);
  }
  v21 = (_QWORD *)(v16 + 16 * v17);
  if (v19 != v21)
  {
    do
    {
      v22 = v19 + 2;
      v23 = v18;
      if (v19 + 2 != v18)
      {
        while ((*v22 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v22 += 2;
          if (v22 == v18)
          {
            v23 = v18;
            goto LABEL_33;
          }
        }
        v23 = v22;
      }
LABEL_33:
      v24 = v19[1];
      if (v24)
        sub_22F0C93EC(v24);
      v19 = v23;
    }
    while (v23 != v21);
  }
  sub_22EF585A0(a1 + 928);
  v25 = *(_QWORD *)(a1 + 1488);
  v26 = *(unsigned int *)(a1 + 1504);
  v27 = (_QWORD *)(v25 + 16 * v26);
  if (*(_DWORD *)(a1 + 1496))
  {
    if ((_DWORD)v26)
    {
      v29 = 16 * v26;
      v28 = *(_QWORD **)(a1 + 1488);
      while ((*v28 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v28 += 2;
        v29 -= 16;
        if (!v29)
          goto LABEL_42;
      }
    }
    else
    {
      v28 = *(_QWORD **)(a1 + 1488);
    }
  }
  else
  {
LABEL_42:
    v28 = (_QWORD *)(v25 + 16 * v26);
  }
  v30 = (_QWORD *)(v25 + 16 * v26);
LABEL_44:
  while (v28 != v30)
  {
    v31 = (void **)v28[1];
    if (*v31 != v31 + 2)
      free(*v31);
    v32 = v28 + 2;
    v28 = v27;
    if (v32 != v27)
    {
      v28 = v32;
      while ((*v28 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v28 += 2;
        if (v28 == v27)
        {
          v28 = v27;
          goto LABEL_44;
        }
      }
    }
  }
  sub_22EF585F0(a1 + 1488);
  v33 = *(_QWORD *)(a1 + 1560);
  v34 = *(unsigned int *)(a1 + 1576);
  v35 = (_QWORD *)(v33 + 16 * v34);
  if (*(_DWORD *)(a1 + 1568))
  {
    if ((_DWORD)v34)
    {
      v37 = 16 * v34;
      v36 = *(_QWORD **)(a1 + 1560);
      while ((*v36 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v36 += 2;
        v37 -= 16;
        if (!v37)
          goto LABEL_58;
      }
    }
    else
    {
      v36 = *(_QWORD **)(a1 + 1560);
    }
  }
  else
  {
LABEL_58:
    v36 = (_QWORD *)(v33 + 16 * v34);
  }
  v38 = (_QWORD *)(v33 + 16 * v34);
LABEL_60:
  while (v36 != v38)
  {
    v39 = v36[1];
    v40 = *(void **)(v39 + 48);
    if (v40 != (void *)(v39 + 64))
      free(v40);
    if (*(_QWORD *)v39 != v39 + 16)
      free(*(void **)v39);
    v41 = v36 + 2;
    v36 = v35;
    if (v41 != v35)
    {
      v36 = v41;
      while ((*v36 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v36 += 2;
        if (v36 == v35)
        {
          v36 = v35;
          goto LABEL_60;
        }
      }
    }
  }
  sub_22E5D120C(a1 + 1560);
  v42 = *(_QWORD *)(a1 + 15144);
  v43 = *(unsigned int *)(a1 + 15160);
  v44 = (_QWORD *)(v42 + 24 * v43);
  if (*(_DWORD *)(a1 + 15152))
  {
    if ((_DWORD)v43)
    {
      v45 = 24 * v43;
      v46 = *(_QWORD **)(a1 + 15144);
      while ((*v46 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v46 += 3;
        v45 -= 24;
        if (!v45)
          goto LABEL_75;
      }
    }
    else
    {
      v46 = *(_QWORD **)(a1 + 15144);
    }
  }
  else
  {
LABEL_75:
    v46 = (_QWORD *)(v42 + 24 * v43);
  }
  v47 = (_QWORD *)(v42 + 24 * v43);
LABEL_78:
  while (v46 != v47)
  {
    sub_22EF58640((uint64_t)(v46 + 1));
    v48 = v46 + 3;
    v46 = v44;
    if (v48 != v44)
    {
      v46 = v48;
      while ((*v46 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v46 += 3;
        if (v46 == v44)
        {
          v46 = v44;
          goto LABEL_78;
        }
      }
    }
  }
  sub_22EF58788(a1 + 15144);
  sub_22EF587DC((unsigned int *)(a1 + 15168));
}

uint64_t sub_22EF585A0(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*(_QWORD *)(result + 8))
  {
    v1 = *(unsigned int *)(result + 16);
    if (v1 > 4 * *(_DWORD *)(result + 8) && v1 >= 0x41)
    {
      return sub_22E5867C8(result);
    }
    else
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 16 * v1;
        do
        {
          *v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *(_QWORD *)(result + 8) = 0;
    }
  }
  return result;
}

uint64_t sub_22EF585F0(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*(_QWORD *)(result + 8))
  {
    v1 = *(unsigned int *)(result + 16);
    if (v1 > 4 * *(_DWORD *)(result + 8) && v1 >= 0x41)
    {
      return sub_22E5867C8(result);
    }
    else
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 16 * v1;
        do
        {
          *v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *(_QWORD *)(result + 8) = 0;
    }
  }
  return result;
}

uint64_t sub_22EF58640(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  llvm *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = result;
  if ((*(_DWORD *)result - 1) >= 0x1B)
  {
    if (*(_DWORD *)result == 31)
    {
      v5 = *(_QWORD *)(result + 8);
      v6 = *(unsigned int *)(v5 + 16);
      v7 = *(_QWORD *)v5 + 24 * v6;
      if (*(_DWORD *)(v5 + 8))
      {
        if ((_DWORD)v6)
        {
          v8 = 24 * v6;
          v9 = *(_QWORD **)v5;
          while ((*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v9 += 3;
            v8 -= 24;
            if (!v8)
              goto LABEL_11;
          }
        }
        else
        {
          v9 = *(_QWORD **)v5;
        }
      }
      else
      {
LABEL_11:
        v9 = (_QWORD *)(*(_QWORD *)v5 + 24 * v6);
      }
      v10 = *(_QWORD *)v5 + 24 * v6;
      if (v9 != (_QWORD *)v10)
      {
        do
        {
          result = sub_22EF58640(v9 + 1);
          v11 = v9 + 3;
          v9 = (_QWORD *)v7;
          if (v11 != (_QWORD *)v7)
          {
            v9 = v11;
            while ((*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v9 += 3;
              if (v9 == (_QWORD *)v7)
              {
                v9 = (_QWORD *)v7;
                break;
              }
            }
          }
        }
        while (v9 != (_QWORD *)v10);
        v5 = *(_QWORD *)(v1 + 8);
      }
      if (v5)
      {
        v3 = *(llvm **)v5;
        v4 = 24 * *(unsigned int *)(v5 + 16);
        goto LABEL_4;
      }
    }
  }
  else
  {
    v2 = *(_QWORD *)(result + 8);
    if (v2)
    {
      v3 = *(llvm **)v2;
      v4 = 16 * *(unsigned int *)(v2 + 16);
LABEL_4:
      llvm::deallocate_buffer(v3, (void *)v4);
      JUMPOUT(0x2348A0E9CLL);
    }
  }
  return result;
}

uint64_t sub_22EF58788(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*(_QWORD *)(result + 8))
  {
    v1 = *(unsigned int *)(result + 16);
    if (v1 > 4 * *(_DWORD *)(result + 8) && v1 >= 0x41)
    {
      return sub_22E601090(result);
    }
    else
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 24 * v1;
        do
        {
          *v2 = -4096;
          v2 += 3;
          v3 -= 24;
        }
        while (v3);
      }
      *(_QWORD *)(result + 8) = 0;
    }
  }
  return result;
}

void sub_22EF587DC(unsigned int *a1)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v2 = a1[2];
  if (v2 || a1[3])
  {
    v3 = a1[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      sub_22EF77004(a1);
    }
    else
    {
      if ((_DWORD)v3)
      {
        v4 = *(_QWORD **)a1;
        v5 = 32 * v3;
        do
        {
          if (*v4 != -4096)
          {
            if (*v4 != -8192)
            {
              v6 = (void *)v4[1];
              if (v6)
              {
                v4[2] = v6;
                operator delete(v6);
              }
            }
            *v4 = -4096;
          }
          v4 += 4;
          v5 -= 32;
        }
        while (v5);
      }
      *((_QWORD *)a1 + 1) = 0;
    }
  }
}

uint64_t sub_22EF58884(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  llvm *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  llvm *v13;
  void *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  llvm::SpecialCaseList **v26;
  llvm::SpecialCaseList **v27;
  llvm::SpecialCaseList **v28;
  llvm::SpecialCaseList **v29;
  llvm::SpecialCaseList **v30;
  llvm::SpecialCaseList **v31;
  uint64_t v32;
  llvm *v33;
  void *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  llvm *v39;
  void *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  llvm *v45;
  void *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  llvm *v50;
  void *v51;
  uint64_t *v52;
  uint64_t v53;
  void *v54;
  void *v55;

  v2 = (unsigned int *)(a1 + 18616);
  sub_22EF581A4(a1);
  v3 = v2[132];
  v4 = *(llvm **)(a1 + 19128);
  if (v3)
  {
    v5 = (char *)v4 + 48 * v3;
    v6 = (uint64_t)v4 + 16;
    do
    {
      v7 = v6 - 16;
      if ((unint64_t)(*(_QWORD *)(v6 - 16) + 1) > 1 || *(_DWORD *)(v6 - 8) != 0)
        v6 = sub_22E3B3AD0(v6);
      v6 += 48;
    }
    while ((char *)(v7 + 48) != v5);
    v4 = *(llvm **)(a1 + 19128);
    v3 = v2[132];
  }
  llvm::deallocate_buffer(v4, (void *)(48 * v3));
  sub_22F36FFB4((void **)(a1 + 19080));
  sub_22F36FF38(a1 + 19048);
  v9 = *(_QWORD *)(a1 + 19040);
  *(_QWORD *)(a1 + 19040) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(void **)(a1 + 19016);
  if (v10)
  {
    *(_QWORD *)(a1 + 19024) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 18736);
  if (v11 != (void *)(a1 + 18752))
    free(v11);
  v12 = v2[14];
  v13 = *(llvm **)(a1 + 18656);
  if ((_DWORD)v12)
  {
    v15 = v12 << 7;
    v16 = (char *)v13 + 32;
    do
    {
      if (*(v16 - 32) <= 0xFDu)
      {
        v17 = (char *)*((_QWORD *)v16 - 2);
        if (v16 != v17)
          free(v17);
      }
      v16 += 128;
      v15 -= 128;
    }
    while (v15);
    v13 = *(llvm **)(a1 + 18656);
    v14 = (void *)((unint64_t)v2[14] << 7);
  }
  else
  {
    v14 = 0;
  }
  llvm::deallocate_buffer(v13, v14);
  llvm::deallocate_buffer(*(llvm **)(a1 + 18624), (void *)(8 * v2[6]));
  llvm::deallocate_buffer(*(llvm **)(a1 + 18600), (void *)(8 * *v2));
  v18 = *(void **)(a1 + 16344);
  if (v18 != (void *)(a1 + 16360))
    free(v18);
  llvm::deallocate_buffer(*(llvm **)(a1 + 16304), (void *)(16 * *(unsigned int *)(a1 + 16320)));
  sub_22F271570(a1 + 16256);
  sub_22F271570(a1 + 16208);
  sub_22F271570(a1 + 16160);
  sub_22F36FCE4(a1 + 16072);
  v19 = *(_DWORD **)(a1 + 16048);
  if (v19)
  {
    v20 = v19[2] - 1;
    v19[2] = v20;
    if (!v20)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
  }
  sub_22F36FD34(a1 + 15224);
  sub_22F36FED8((unsigned int *)(a1 + 15168));
  llvm::deallocate_buffer(*(llvm **)(a1 + 15168), (void *)(32 * *(unsigned int *)(a1 + 15184)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 15144), (void *)(24 * *(unsigned int *)(a1 + 15160)));
  v21 = *(_QWORD *)(a1 + 15128);
  *(_QWORD *)(a1 + 15128) = 0;
  if (v21)
  {
    v22 = sub_22F3BA48C(v21);
    MEMORY[0x2348A0E9C](v22, 0x1020C4093CA8EA1);
  }
  v23 = *(_QWORD *)(a1 + 15120);
  *(_QWORD *)(a1 + 15120) = 0;
  if (v23)
  {
    v24 = sub_22F3CD3F4(v23);
    MEMORY[0x2348A0E9C](v24, 0x1020C407DCD39BELL);
  }
  v25 = *(_QWORD *)(a1 + 15064);
  *(_QWORD *)(a1 + 15064) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  sub_22F1CE7B0(a1 + 2128);
  sub_22E3B4EF4(a1 + 2032);
  v26 = *(llvm::SpecialCaseList ***)(a1 + 2024);
  *(_QWORD *)(a1 + 2024) = 0;
  if (v26)
  {
    v27 = sub_22F1DD284(v26);
    MEMORY[0x2348A0E9C](v27, 0x1020C40D4DADF34);
  }
  v28 = *(llvm::SpecialCaseList ***)(a1 + 2016);
  *(_QWORD *)(a1 + 2016) = 0;
  if (v28)
  {
    v29 = sub_22F43F820(v28);
    MEMORY[0x2348A0E9C](v29, 0x20C40DC1BFBCFLL);
  }
  v30 = *(llvm::SpecialCaseList ***)(a1 + 2008);
  *(_QWORD *)(a1 + 2008) = 0;
  if (v30)
  {
    v31 = sub_22F421FAC(v30);
    MEMORY[0x2348A0E9C](v31, 0x20C40A4A59CD2);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 1920), (void *)(16 * *(unsigned int *)(a1 + 1936)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1896), (void *)(16 * *(unsigned int *)(a1 + 1912)));
  sub_22F271570(a1 + 1848);
  sub_22F271570(a1 + 1800);
  v32 = *(unsigned int *)(a1 + 1792);
  v33 = *(llvm **)(a1 + 1776);
  if ((_DWORD)v32)
  {
    v35 = (uint64_t *)((char *)v33 + 8);
    v36 = 16 * v32;
    do
    {
      if ((*(v35 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v37 = *v35;
        *v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      }
      v35 += 2;
      v36 -= 16;
    }
    while (v36);
    v33 = *(llvm **)(a1 + 1776);
    v34 = (void *)(16 * *(unsigned int *)(a1 + 1792));
  }
  else
  {
    v34 = 0;
  }
  llvm::deallocate_buffer(v33, v34);
  v38 = *(unsigned int *)(a1 + 1768);
  v39 = *(llvm **)(a1 + 1752);
  if ((_DWORD)v38)
  {
    v41 = (uint64_t *)((char *)v39 + 8);
    v42 = 16 * v38;
    do
    {
      if ((*(v41 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v43 = *v41;
        *v41 = 0;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
      }
      v41 += 2;
      v42 -= 16;
    }
    while (v42);
    v39 = *(llvm **)(a1 + 1752);
    v40 = (void *)(16 * *(unsigned int *)(a1 + 1768));
  }
  else
  {
    v40 = 0;
  }
  llvm::deallocate_buffer(v39, v40);
  v44 = *(unsigned int *)(a1 + 1744);
  v45 = *(llvm **)(a1 + 1728);
  if ((_DWORD)v44)
  {
    v47 = (uint64_t *)((char *)v45 + 8);
    v48 = 16 * v44;
    do
    {
      if ((*(v47 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v47 = sub_22F29CFE8(v47);
      v47 += 2;
      v48 -= 16;
    }
    while (v48);
    v45 = *(llvm **)(a1 + 1728);
    v46 = (void *)(16 * *(unsigned int *)(a1 + 1744));
  }
  else
  {
    v46 = 0;
  }
  llvm::deallocate_buffer(v45, v46);
  llvm::deallocate_buffer(*(llvm **)(a1 + 1704), (void *)(16 * *(unsigned int *)(a1 + 1720)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1680), (void *)(16 * *(unsigned int *)(a1 + 1696)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1656), (void *)(16 * *(unsigned int *)(a1 + 1672)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1632), (void *)(16 * *(unsigned int *)(a1 + 1648)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1608), (void *)(16 * *(unsigned int *)(a1 + 1624)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1584), (void *)(16 * *(unsigned int *)(a1 + 1600)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1560), (void *)(16 * *(unsigned int *)(a1 + 1576)));
  v49 = *(unsigned int *)(a1 + 1552);
  v50 = *(llvm **)(a1 + 1536);
  if ((_DWORD)v49)
  {
    v52 = (uint64_t *)((char *)v50 + 8);
    v53 = 16 * v49;
    do
    {
      if ((*(v52 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v52 = sub_22F29CFE8(v52);
      v52 += 2;
      v53 -= 16;
    }
    while (v53);
    v50 = *(llvm **)(a1 + 1536);
    v51 = (void *)(16 * *(unsigned int *)(a1 + 1552));
  }
  else
  {
    v51 = 0;
  }
  llvm::deallocate_buffer(v50, v51);
  llvm::deallocate_buffer(*(llvm **)(a1 + 1512), (void *)(16 * *(unsigned int *)(a1 + 1528)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1488), (void *)(16 * *(unsigned int *)(a1 + 1504)));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 1224));
  if (*(char *)(a1 + 1223) < 0)
    operator delete(*(void **)(a1 + 1200));
  sub_22F275768(a1 + 1168);
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 1152));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 1136));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 1120));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1096), (void *)(16 * *(unsigned int *)(a1 + 1112)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1072), (void *)(16 * *(unsigned int *)(a1 + 1088)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1048), (void *)(16 * *(unsigned int *)(a1 + 1064)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1024), (void *)(16 * *(unsigned int *)(a1 + 1040)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1000), (void *)(16 * *(unsigned int *)(a1 + 1016)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 976), (void *)(24 * *(unsigned int *)(a1 + 992)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 952), (void *)(16 * *(unsigned int *)(a1 + 968)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 928), (void *)(16 * *(unsigned int *)(a1 + 944)));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 904));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 880));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 864));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 848));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 832));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 808));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 792));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 776));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 760));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 744));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 728));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 712));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 696));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 680));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 664));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 640));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 624));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 608));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 592));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 576));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 552));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 536));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 520));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 504));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 488));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 464));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 448));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 432));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 416));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 400));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 384));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 368));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 344));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 328));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 312));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 296));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 280));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 264));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 248));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 232));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 216));
  v54 = *(void **)(a1 + 192);
  if (v54)
  {
    *(_QWORD *)(a1 + 200) = v54;
    operator delete(v54);
  }
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 176));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 152));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 136));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 120));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 104));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 88));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 72));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 56));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 40));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 24));
  v55 = *(void **)(a1 + 8);
  if (v55 != (void *)(a1 + 24))
    free(v55);
  return a1;
}

uint64_t sub_22EF5908C(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  _QWORD *v6;
  unsigned int v7;
  _QWORD *v8;

  v5 = (unsigned int *)(result + 18744);
  v6 = (_QWORD *)(result + 18736);
  v7 = *(_DWORD *)(result + 18744);
  if (v7 >= *(_DWORD *)(result + 18748))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *v5;
  }
  v8 = (_QWORD *)(*v6 + 16 * v7);
  *v8 = a2;
  v8[1] = a3;
  ++*v5;
  return result;
}

uint64_t sub_22EF59108(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t result;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  llvm *v10[2];
  unsigned int v11;
  _QWORD v12[2];
  char v13;

  v3 = (uint64_t *)(a1 + 1536);
  v10[0] = (llvm *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v12[0] = 0;
  result = sub_22F246C54(v3, v10, v12);
  if ((_DWORD)result && v12[0] != *(_QWORD *)(a1 + 1536) + 16 * *(unsigned int *)(a1 + 1552))
  {
    v11 = 0;
    v10[0] = 0;
    v10[1] = 0;
    v6 = (unint64_t *)(v12[0] + 8);
    v5 = *(_QWORD *)(v12[0] + 8);
    if ((v5 & 4) != 0)
    {
      v9 = v5 & 0xFFFFFFFFFFFFFFF8;
      v8 = *(_QWORD **)v9;
      v7 = *(_QWORD *)v9 + 8 * *(unsigned int *)(v9 + 8);
    }
    else
    {
      v7 = (uint64_t)&v6[v5 > 7];
      v8 = (_QWORD *)(v12[0] + 8);
    }
    while (v8 != (_QWORD *)v7)
    {
      sub_22F29D1F0((uint64_t)v10, v8, (uint64_t)v12);
      if (!v13)
        *v8 = 0;
      ++v8;
    }
    sub_22EF59200(v6);
    return llvm::deallocate_buffer(v10[0], (void *)(8 * v11));
  }
  return result;
}

unint64_t *sub_22EF59200(unint64_t *a1)
{
  unint64_t v1;
  unint64_t *v2;
  unint64_t *v3;
  unint64_t *i;
  unint64_t *v5;

  v1 = *a1;
  if ((*a1 & 4) != 0)
  {
    v3 = *(unint64_t **)(v1 & 0xFFFFFFFFFFFFFFF8);
    v2 = &v3[*(unsigned int *)((v1 & 0xFFFFFFFFFFFFFFF8) + 8)];
  }
  else
  {
    v2 = &a1[v1 > 7];
    v3 = a1;
  }
  if (v3 != v2)
  {
    while (*v3)
    {
      if (++v3 == v2)
      {
        v3 = v2;
        break;
      }
    }
  }
  if (v3 != v2)
  {
    for (i = v3 + 1; i != v2; ++i)
    {
      if (*i)
        *v3++ = *i;
    }
  }
  if ((v1 & 4) != 0)
    v5 = (unint64_t *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8)
                            + 8 * *(unsigned int *)((v1 & 0xFFFFFFFFFFFFFFF8) + 8));
  else
    v5 = &a1[v1 > 7];
  return sub_22EF77120(a1, v3, v5);
}

uint64_t sub_22EF5929C(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  int v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (uint64_t *)(a1 + 1536);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v8 = 0;
  v4 = sub_22F246C54(v3, &v7, &v8);
  result = 0;
  if (v4 && v8 != *(_QWORD *)(a1 + 1536) + 16 * *(unsigned int *)(a1 + 1552))
  {
    v6 = *(_QWORD *)(v8 + 8);
    if (v6 >= 8)
    {
      if ((v6 & 4) != 0)
        return *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
      else
        return v8 + 8;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_QWORD *sub_22EF5934C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *result;
  unsigned int *v6;
  _QWORD *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a3;
  v10 = a2;
  if (a3 && (*(_DWORD *)(a3 + 28) & 0x7F) == 0xA)
  {
    v11 = *(_QWORD *)(a3 + 40);
    v12 = 0;
    result = (_QWORD *)sub_22E793870((uint64_t *)(a1 + 1560), &v11, &v12);
    if (!(_DWORD)result || v12 == *(_QWORD *)(a1 + 1560) + 16 * *(unsigned int *)(a1 + 1576))
      return result;
    v6 = *(unsigned int **)(v12 + 8);
    if (v6[14] + (unint64_t)v6[2] == 1)
    {
      sub_22F367E0C((uint64_t)v6, a1);
      if ((*(_DWORD *)(**(_QWORD **)v6 + 28) & 0x7F) == 0xA)
        v3 = **(_QWORD **)v6;
    }
  }
  result = sub_22F24C2B0(a1 + 1560, &v10);
  v7 = (_QWORD *)result[1];
  if (v7)
  {
    v8 = *((_DWORD *)v7 + 2);
    if (v8 >= *((_DWORD *)v7 + 3))
    {
      result = (_QWORD *)llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *((_DWORD *)v7 + 2);
    }
  }
  else
  {
    v9 = result;
    result = (_QWORD *)sub_22E3CD3D4(a1 + 2032, 80, 3);
    v7 = result;
    v8 = 0;
    *result = result + 2;
    result[1] = 0x400000000;
    result[6] = result + 8;
    result[7] = 0x400000000;
    v9[1] = result;
  }
  *(_QWORD *)(*v7 + 8 * v8) = v3;
  ++*((_DWORD *)v7 + 2);
  return result;
}

uint64_t sub_22EF59494(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = *(_QWORD *)(a1 + 1968);
  if (!result)
  {
    v3 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(a1 + 1960) + 80));
    result = sub_22F3AD374(a1, v3);
    *(_QWORD *)(a1 + 1968) = result;
  }
  return result;
}

uint64_t sub_22EF594DC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v6 = operator new();
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 16) = 0;
  if ((*(_DWORD *)(a3 + 28) & 0x7Fu) - 60 <= 6)
  {
    v9 = a3;
    *(_QWORD *)&v10 = a2;
    *((_QWORD *)&v10 + 1) = v6;
    sub_22EF757BC((_DWORD *)(a1 + 15144), &v9, &v10, (uint64_t)&v8);
  }
  return a2;
}

uint64_t sub_22EF59578(uint64_t a1, unint64_t a2, const void *a3, size_t a4)
{
  unsigned int v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v8 = sub_22F11598C(a2);
  v9 = (_QWORD *)sub_22E3CD3D4(a1 + 2032, v8 + 8, 3);
  *v9 = a2;
  sub_22F115E94(a1, a2, v9 + 1, 0);
  v10 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(a1 + 1960) + 80));
  if (v10)
    v11 = v10 + 40;
  else
    v11 = 0;
  v12 = sub_22E3CB704(*(llvm::StringMapImpl **)(a1 + 15192), a3, a4);
  result = sub_22EFC45FC(a1, v11, 0, 0, v12, (uint64_t)v9);
  *(_DWORD *)(result + 28) |= 0x200u;
  return result;
}

uint64_t sub_22EF59640(uint64_t a1, unint64_t *a2, int a3)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  unsigned int v9;

  result = sub_22E3CD3D4(a1 + 2032, 24, 4);
  v7 = result;
  *(_QWORD *)result = result;
  *(_QWORD *)(result + 8) = result & 0xFFFFFFFFFFFFFFF0;
  if (a3 == 259)
    v8 = 1547;
  else
    v8 = 11;
  *(_DWORD *)(result + 16) = v8 & 0xF007FFFF | ((a3 & 0x1FF) << 19) | *(_DWORD *)(result + 16) & 0xF0000000;
  *a2 = result & 0xFFFFFFFFFFFFFFF0;
  v9 = *(_DWORD *)(a1 + 16);
  if (v9 >= *(_DWORD *)(a1 + 20))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a1 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v9) = v7;
  ++*(_DWORD *)(a1 + 16);
  return result;
}

uint64_t sub_22EF596EC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  unint64_t v28;
  unint64_t v29;

  *(_QWORD *)(a1 + 15088) = a2;
  *(_QWORD *)(a1 + 15096) = a3;
  v5 = sub_22F365480(a1);
  v6 = *(_QWORD *)(a1 + 15064);
  *(_QWORD *)(a1 + 15064) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 2000);
  if ((*(_WORD *)(v7 + 148) & 0x200) != 0)
    v8 = &unk_22F49EE94;
  else
    v8 = (void *)a2[19];
  *(_QWORD *)(a1 + 15072) = v8;
  v9 = (*(_DWORD *)(v7 + 244) >> 15) & 3;
  if (v9 == 2)
  {
    LOBYTE(v9) = 0;
  }
  else if (v9 != 1)
  {
    LOBYTE(v9) = *((_BYTE *)a2 + 360) != 0;
  }
  *(_BYTE *)(a1 + 15080) = v9;
  sub_22EF59640(a1, (unint64_t *)(a1 + 16392), 165);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16400), 166);
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 2000) + 52) & 0x800000) != 0)
    v10 = 178;
  else
    v10 = 167;
  sub_22EF59640(a1, (unint64_t *)(a1 + 16408), v10);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16464), 179);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16472), 181);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16480), 182);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16488), 183);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16496), 184);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16512), 168);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16520), 173);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16528), 174);
  v11 = (_QWORD *)(a1 + 16536);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16536), 175);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16544), 176);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16560), 211);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16568), 212);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16576), 213);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16584), 216);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16592), 217);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16808), 214);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16600), 186);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16608), 187);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16616), 188);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16624), 189);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16632), 190);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16640), 191);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16648), 192);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16656), 193);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16664), 194);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16672), 195);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16680), 196);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16688), 197);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16696), 198);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16704), 199);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16712), 200);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16720), 201);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16728), 202);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16736), 203);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16744), 204);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16752), 205);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16760), 206);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16768), 207);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16776), 208);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16784), 209);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16504), 185);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16552), 177);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16416), dword_22F49EF00[*(int *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 128) - 1]);
  if ((~**(_DWORD **)(a1 + 2000) & 0x2000100) != 0)
  {
    v12 = *a2;
    v13 = *(unsigned int *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 128);
    if ((_DWORD)v13 != 8)
      __asm { BR              X11 }
    *(_QWORD *)(a1 + 16424) = *v11;
  }
  else
  {
    *(_QWORD *)(a1 + 16424) = *(_QWORD *)(a1 + 16416);
    v12 = *a2;
  }
  v14 = *(unsigned int *)((char *)a2 + *(_QWORD *)(v12 - 24) + 132);
  if ((_DWORD)v14 != 8)
    __asm { BR              X10 }
  *(_QWORD *)(a1 + 16432) = *v11;
  sub_22EF59640(a1, (unint64_t *)(a1 + 16440), 170);
  v15 = *(_QWORD *)(a1 + 2000);
  if ((*(_BYTE *)(v15 + 1) & 1) != 0)
  {
    sub_22EF59640(a1, (unint64_t *)(a1 + 16448), 171);
    v15 = *(_QWORD *)(a1 + 2000);
  }
  else
  {
    v16 = *(unsigned int *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 136);
    if ((_DWORD)v16 != 8)
      __asm { BR              X11 }
    *(_QWORD *)(a1 + 16448) = *v11;
  }
  if ((*(_BYTE *)(v15 + 1) & 1) != 0)
  {
    sub_22EF59640(a1, (unint64_t *)(a1 + 16456), 172);
  }
  else
  {
    v17 = *(unsigned int *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 140);
    if ((_DWORD)v17 != 8)
      __asm { BR              X10 }
    *(_QWORD *)(a1 + 16456) = *v11;
  }
  sub_22EF59640(a1, (unint64_t *)(a1 + 16832), 259);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16840), 260);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16848), 261);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16872), 262);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16856), 263);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16880), 265);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16864), 264);
  v18 = *(_QWORD *)(a1 + 2000);
  if (*(_DWORD *)(v18 + 72))
  {
    sub_22EF59640(a1, (unint64_t *)(a1 + 17256), 267);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17264), 268);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17272), 269);
    v18 = *(_QWORD *)(a1 + 2000);
  }
  if ((*(_BYTE *)(v18 + 204) & 8) != 0)
    sub_22EF59640(a1, (unint64_t *)(a1 + 17248), 266);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16888), 219);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16896), 220);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16904), 221);
  v19 = *(_QWORD *)(a1 + 2000);
  if ((*(_DWORD *)(v19 + 52) & 0x40000000) != 0 || (*(_BYTE *)(v19 + 68) & 4) != 0)
  {
    sub_22EF59640(a1, (unint64_t *)(a1 + 16920), 0);
    sub_22EF59640(a1, (unint64_t *)(a1 + 16928), 1);
    sub_22EF59640(a1, (unint64_t *)(a1 + 16936), 2);
    sub_22EF59640(a1, (unint64_t *)(a1 + 16944), 3);
    sub_22EF59640(a1, (unint64_t *)(a1 + 16952), 4);
    sub_22EF59640(a1, (unint64_t *)(a1 + 16960), 5);
    sub_22EF59640(a1, (unint64_t *)(a1 + 16968), 6);
    sub_22EF59640(a1, (unint64_t *)(a1 + 16976), 7);
    sub_22EF59640(a1, (unint64_t *)(a1 + 16984), 8);
    sub_22EF59640(a1, (unint64_t *)(a1 + 16992), 9);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17000), 10);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17008), 11);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17016), 12);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17024), 13);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17032), 14);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17040), 15);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17048), 16);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17056), 17);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17064), 18);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17072), 19);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17080), 20);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17088), 21);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17096), 22);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17104), 23);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17112), 24);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17120), 25);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17128), 26);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17136), 27);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17144), 28);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17152), 29);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17160), 30);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17168), 31);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17176), 32);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17184), 33);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17192), 34);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17200), 35);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17208), 222);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17216), 223);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17224), 224);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17232), 225);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17240), 226);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17280), 36);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17288), 37);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17296), 38);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17304), 39);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17312), 40);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17320), 41);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17328), 42);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17336), 43);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17344), 44);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17352), 45);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17360), 46);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17368), 47);
    v19 = *(_QWORD *)(a1 + 2000);
  }
  if ((*(_BYTE *)(v19 + 104) & 0x20) != 0)
  {
    sub_22EF59640(a1, (unint64_t *)(a1 + 17376), 227);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17384), 228);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17392), 229);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17400), 230);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17408), 231);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17416), 232);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17424), 233);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17432), 234);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17440), 235);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17448), 236);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17456), 237);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17464), 238);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17472), 239);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17480), 240);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17488), 241);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17496), 242);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17504), 243);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17512), 244);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17520), 245);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17528), 246);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17536), 247);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17544), 248);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17552), 249);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17560), 250);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17568), 251);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17576), 252);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17584), 253);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17592), 254);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17600), 255);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17608), 256);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17616), 257);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17624), 258);
  }
  if ((a2[36] & 0x80) != 0)
  {
    sub_22EF59640(a1, (unint64_t *)(a1 + 17632), 48);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17640), 49);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17648), 50);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17656), 51);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17664), 52);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17672), 53);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17680), 54);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17688), 55);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17696), 56);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17704), 57);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17712), 58);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17720), 59);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17728), 60);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17736), 61);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17744), 62);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17752), 63);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17760), 64);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17768), 65);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17776), 66);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17784), 67);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17792), 68);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17800), 69);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17808), 70);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17816), 71);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17824), 72);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17832), 73);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17840), 74);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17848), 75);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17856), 76);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17864), 77);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17872), 78);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17880), 79);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17888), 80);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17896), 81);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17904), 82);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17912), 83);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17920), 84);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17928), 85);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17936), 86);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17944), 87);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17952), 88);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17960), 89);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17968), 90);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17976), 91);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17984), 92);
    sub_22EF59640(a1, (unint64_t *)(a1 + 17992), 93);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18000), 94);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18008), 95);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18016), 96);
  }
  if ((*((_DWORD *)a2 + 14) - 23) <= 1)
  {
    sub_22EF59640(a1, (unint64_t *)(a1 + 18024), 97);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18032), 98);
  }
  if ((*((_BYTE *)a2 + 289) & 1) != 0)
  {
    sub_22EF59640(a1, (unint64_t *)(a1 + 18040), 99);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18048), 100);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18056), 101);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18064), 102);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18072), 103);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18080), 104);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18088), 105);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18096), 106);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18104), 107);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18112), 108);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18120), 109);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18128), 110);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18136), 111);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18144), 112);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18152), 113);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18160), 114);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18168), 115);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18176), 116);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18184), 117);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18192), 118);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18200), 119);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18208), 120);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18216), 121);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18224), 122);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18232), 123);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18240), 124);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18248), 125);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18256), 126);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18264), 127);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18272), 128);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18280), 129);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18288), 130);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18296), 131);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18304), 132);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18312), 133);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18320), 134);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18328), 135);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18336), 136);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18344), 137);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18352), 138);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18360), 139);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18368), 140);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18376), 141);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18384), 142);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18392), 143);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18400), 144);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18408), 145);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18416), 146);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18424), 147);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18432), 148);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18440), 149);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18448), 150);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18456), 151);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18464), 152);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18472), 153);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18480), 154);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18488), 155);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18496), 156);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18504), 157);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18512), 158);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18520), 159);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18528), 160);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18536), 161);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18544), 162);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18552), 163);
    sub_22EF59640(a1, (unint64_t *)(a1 + 18560), 164);
  }
  v20 = 16464;
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 160) & 1) == 0)
    v20 = 16400;
  *(_QWORD *)(a1 + 16912) = *(_QWORD *)(a1 + v20);
  *(_QWORD *)(a1 + 1384) = 0;
  *(_QWORD *)(a1 + 1408) = 0;
  v21 = *(_QWORD *)(a1 + 16392);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 2000) + 68) & 1) != 0)
  {
    if ((v21 & 8) != 0)
    {
      v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
      v23 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x7FFLL;
    }
    else
    {
      v22 = 0;
      v23 = 0;
    }
    v24 = *(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0;
    v29 = *(_QWORD *)(a1 + 16392) & 7 | v22 | v23 | 0x2800;
    v25 = sub_22E491354((unsigned int *)&v29, v24);
    v26 = sub_22EF5DBC4(a1, v25, v29);
    v21 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFFF0) + 8) | v26 & 7;
  }
  *(_QWORD *)(a1 + 16816) = sub_22EF5B848(a1, v21, 0);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16824), 218);
  sub_22EF59640(a1, (unint64_t *)(a1 + 16792), 210);
  result = sub_22EF59640(a1, (unint64_t *)(a1 + 16800), 215);
  *(_QWORD *)(a1 + 18584) = 0;
  if ((**(_BYTE **)(a1 + 2000) & 0xA0) != 0)
  {
    *(_QWORD *)(a1 + 18592) = sub_22F368234(a1, "_GUID", 5uLL, 0);
    v28 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(a1 + 1960) + 80));
    return sub_22EFCCFA0(v28 + 40, *(_QWORD *)(a1 + 18592));
  }
  return result;
}

void sub_22EF5AFC0()
{
  JUMPOUT(0x22EF59C78);
}

void sub_22EF5AFC8()
{
  JUMPOUT(0x22EF59BF0);
}

void sub_22EF5AFD0()
{
  JUMPOUT(0x22EF59BD0);
}

void sub_22EF5AFD8()
{
  JUMPOUT(0x22EF59C34);
}

void sub_22EF5AFE0()
{
  JUMPOUT(0x22EF59C78);
}

void sub_22EF5AFEC()
{
  JUMPOUT(0x22EF59BF0);
}

void sub_22EF5AFF4()
{
  JUMPOUT(0x22EF59BF0);
}

void sub_22EF5AFFC()
{
  JUMPOUT(0x22EF59BF0);
}

void sub_22EF5B004()
{
  JUMPOUT(0x22EF59BF0);
}

void sub_22EF5B00C()
{
  JUMPOUT(0x22EF59BF0);
}

void sub_22EF5B014()
{
  JUMPOUT(0x22EF59BF0);
}

void sub_22EF5B01C()
{
  JUMPOUT(0x22EF59BD0);
}

void sub_22EF5B024()
{
  JUMPOUT(0x22EF59C34);
}

void sub_22EF5B02C()
{
  JUMPOUT(0x22EF59C78);
}

void sub_22EF5B034()
{
  JUMPOUT(0x22EF59BD0);
}

void sub_22EF5B03C()
{
  JUMPOUT(0x22EF59BD0);
}

void sub_22EF5B044()
{
  JUMPOUT(0x22EF59BD0);
}

void sub_22EF5B04C()
{
  JUMPOUT(0x22EF59BD0);
}

void sub_22EF5B054()
{
  JUMPOUT(0x22EF59BD0);
}

void sub_22EF5B05C()
{
  JUMPOUT(0x22EF59C34);
}

void sub_22EF5B064()
{
  JUMPOUT(0x22EF59C34);
}

void sub_22EF5B06C()
{
  JUMPOUT(0x22EF59C34);
}

void sub_22EF5B074()
{
  JUMPOUT(0x22EF59C34);
}

void sub_22EF5B07C()
{
  JUMPOUT(0x22EF59C34);
}

void sub_22EF5B084()
{
  JUMPOUT(0x22EF59C78);
}

void sub_22EF5B08C()
{
  JUMPOUT(0x22EF59C78);
}

void sub_22EF5B094()
{
  JUMPOUT(0x22EF59C78);
}

void sub_22EF5B09C()
{
  JUMPOUT(0x22EF59C78);
}

void sub_22EF5B0A4()
{
  JUMPOUT(0x22EF59C78);
}

uint64_t sub_22EF5B0AC(uint64_t a1, int a2)
{
  if (a2 == 8)
    return *(_QWORD *)(a1 + 16536);
  else
    return ((uint64_t (*)(void))((char *)&loc_22EF5B0C0 + 4 * byte_22F49E63C[a2]))();
}

void sub_22EF5B0E4()
{
  JUMPOUT(0x22EF5B0B8);
}

void sub_22EF5B0EC()
{
  JUMPOUT(0x22EF5B0B8);
}

void sub_22EF5B0F4()
{
  JUMPOUT(0x22EF5B0B8);
}

void sub_22EF5B0FC()
{
  JUMPOUT(0x22EF5B0B8);
}

void sub_22EF5B104()
{
  JUMPOUT(0x22EF5B0B8);
}

void sub_22EF5B10C()
{
  JUMPOUT(0x22EF5B0B8);
}

void sub_22EF5B114()
{
  JUMPOUT(0x22EF5B0B8);
}

void sub_22EF5B120()
{
  JUMPOUT(0x22EF5B0B8);
}

void sub_22EF5B128()
{
  JUMPOUT(0x22EF5B0B8);
}

uint64_t sub_22EF5B130(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 1992) + 8);
}

double sub_22EF5B13C(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  double result;
  uint64_t v16;

  v16 = a2;
  v3 = *(_DWORD *)(a1 + 1504);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 1488);
    v5 = v3 - 1;
    v6 = v5 & ((a2 >> 4) ^ (a2 >> 9));
    v7 = (_QWORD *)(v4 + 16 * v6);
    v8 = *v7;
    if (*v7 == a2)
      goto LABEL_3;
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v4 + 16 * v6);
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_3;
    }
    if (v9)
      v13 = v9;
    else
      v13 = v7;
  }
  else
  {
    v13 = 0;
  }
  v7 = sub_22EF771BC(a1 + 1488, (uint64_t)&v16, &v16, v13);
  *v7 = v16;
  v7[1] = 0;
LABEL_3:
  if (!v7[1])
  {
    v14 = (_QWORD *)sub_22E3CD3D4(a1 + 2032, 48, 3);
    *v14 = v14 + 2;
    *(_QWORD *)&result = 0x400000000;
    v14[1] = 0x400000000;
    v7[1] = v14;
  }
  return result;
}

uint64_t sub_22EF5B234(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = (uint64_t *)(a1 + 1728);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v11 = 0;
  v12 = v4;
  if (sub_22E793870(v3, &v12, &v11))
  {
    v5 = v11;
    v6 = *(_QWORD *)(a1 + 1728);
    v7 = *(unsigned int *)(a1 + 1744);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 1728);
    v7 = *(unsigned int *)(a1 + 1744);
    v5 = v6 + 16 * v7;
  }
  if (v5 == v6 + 16 * v7)
    return 0;
  v10 = *(_QWORD *)(v5 + 8);
  result = v5 + 8;
  v9 = v10;
  if ((v10 & 4) != 0)
    return *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
  return result;
}

uint64_t sub_22EF5B2E0(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))((char *)sub_22EF5B318
                            + 4
                            * byte_22F49E647[((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0)
                                                                                 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                         + 16) >> 19) & 0x1FF)
                                           - 210]))();
}

uint64_t sub_22EF5B318(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 15088) + *(_QWORD *)(**(_QWORD **)(a1 + 15088) - 24) + 56);
}

unint64_t sub_22EF5B404(uint64_t a1, unint64_t a2, char a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  BOOL v51;
  int v52;

  v6 = sub_22EFC8A80(a2);
  v7 = (*(_DWORD *)(a2 + 28) & 0x7F) - 49;
  if (v6)
  {
    v8 = v6;
    if (v7 > 2 || sub_22E6A4B04(a2))
      goto LABEL_87;
    v9 = *(_QWORD *)(a2 + 16);
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    if ((v9 & 4) != 0)
      v10 = *(_QWORD *)v10;
    v11 = (*(_WORD *)(v10 + 8) & 0x7E) - 34;
    v12 = v10 ? v10 - 64 : 0;
    v13 = v11 >= 4 ? 0 : v12;
    if (sub_22E6A4B04(v13))
      goto LABEL_87;
    goto LABEL_27;
  }
  if (v7 > 2)
  {
    v8 = 8;
    goto LABEL_27;
  }
  if (sub_22E6A4B04(a2))
  {
    v8 = 8;
    goto LABEL_87;
  }
  v14 = *(_QWORD *)(a2 + 16);
  v15 = v14 & 0xFFFFFFFFFFFFFFF8;
  if ((v14 & 4) != 0)
    v15 = *(_QWORD *)v15;
  v16 = (*(_WORD *)(v15 + 8) & 0x7E) - 34;
  if (v15)
    v17 = v15 - 64;
  else
    v17 = 0;
  if (v16 >= 4)
    v18 = 0;
  else
    v18 = v17;
  v8 = 8;
  if (!sub_22E6A4B04(v18))
  {
LABEL_27:
    if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 75 < 0xFFFFFFE5)
      goto LABEL_87;
    v19 = *(_QWORD *)(a2 + 48);
    v20 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
    if (v20 && (v21 = *(_DWORD *)(v20 + 16), (v21 & 0xFE) == 0x28))
    {
      if ((a3 & 1) != 0)
      {
LABEL_31:
        if ((v21 & 0x100000) != 0)
        {
          do
          {
            while (1)
            {
              v20 = *(_QWORD *)(*(_QWORD *)(v20 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (!v20)
                break;
              v22 = *(_DWORD *)(v20 + 16);
              if ((v22 & 0xFE) != 0x28)
                break;
              if ((v22 & 0x100000) == 0)
                goto LABEL_37;
            }
            v20 = sub_22F10CF48(v20);
          }
          while ((*(_DWORD *)(v20 + 16) & 0x100000) != 0);
        }
LABEL_37:
        v19 = *(_QWORD *)(v20 + 32);
        goto LABEL_48;
      }
    }
    else
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        goto LABEL_48;
      v20 = sub_22F10CF48(v20);
      if (!v20)
        goto LABEL_48;
      v21 = *(_DWORD *)(v20 + 16);
      if ((a3 & 1) != 0)
        goto LABEL_31;
    }
    if ((v21 & 0x100000) != 0)
    {
      do
      {
        while (1)
        {
          v20 = *(_QWORD *)(*(_QWORD *)(v20 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (!v20)
            break;
          v23 = *(_DWORD *)(v20 + 16);
          if ((v23 & 0xFE) != 0x28)
            break;
          if ((v23 & 0x100000) == 0)
            goto LABEL_47;
        }
        v20 = sub_22F10CF48(v20);
      }
      while ((*(_DWORD *)(v20 + 16) & 0x100000) != 0);
    }
LABEL_47:
    v19 = sub_22EF5B848(a1, *(_QWORD *)(v20 + 32), 0);
LABEL_48:
    v24 = sub_22EF5BA38(a1, v19);
    v25 = (uint64_t *)(v19 & 0xFFFFFFFFFFFFFFF0);
    v26 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v26 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 <= 1)
    {
      sub_22EF5BB40(a1, v26);
      v8 = v27;
      goto LABEL_70;
    }
    v28 = v24 & 0xFFFFFFFFFFFFFFF0;
    if ((sub_22F1110EC(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0), 0) & 1) != 0)
    {
LABEL_70:
      if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 52 >= 0xFFFFFFFD)
      {
        v38 = *(_QWORD *)(a2 + 16);
        v39 = v38 & 0xFFFFFFFFFFFFFFF8;
        if ((v38 & 4) != 0)
          v39 = *(_QWORD *)v39;
        v40 = (*(_WORD *)(v39 + 8) & 0x7E) - 34;
        if (v39)
          v41 = v39 - 64;
        else
          v41 = 0;
        if (v40 >= 4)
          v42 = 0;
        else
          v42 = v41;
        if ((*(_BYTE *)(v42 + 28) & 0x80) == 0)
        {
          v43 = sub_22F0C975C(a1, v42);
          v44 = *(_QWORD *)(v43 + 16);
          v45 = sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v44;
          v46 = *(_QWORD *)(*(_QWORD *)(v43 + 48) + 8 * sub_22EFC306C(a2));
          v47 = v46 & -v46;
          if (v47 >= v45)
            LODWORD(v47) = v45;
          if (v46)
            v48 = v47;
          else
            v48 = v45;
          if (v48 < v8)
            v8 = v48;
        }
      }
      goto LABEL_87;
    }
    v29 = sub_22EF5C728(a1, v19);
    if (v29)
    {
      if ((a3 & 1) == 0)
      {
        v30 = *(_QWORD *)(a1 + 15088) + *(_QWORD *)(**(_QWORD **)(a1 + 15088) - 24);
        if (*(_BYTE *)(v30 + 18))
        {
          v32 = *(unsigned __int8 *)(v29 + 16);
          if (v32 == 5)
            goto LABEL_58;
          if (v32 == 2)
          {
            v31 = *(unsigned __int8 *)(v30 + 18);
            if (sub_22EF5CDF0(a1, v29) >= v31)
            {
              v30 = *(_QWORD *)(a1 + 15088) + *(_QWORD *)(**(_QWORD **)(a1 + 15088) - 24);
LABEL_58:
              v33 = *(unsigned __int8 *)(v30 + 19);
              if (v8 <= v33)
                v8 = v33;
            }
          }
        }
      }
    }
    v34 = sub_22EF5C8B8(a1, *v25);
    if (v8 <= v34)
      v8 = v34;
    v35 = *(_QWORD *)(v28 + 8);
    if ((v35 & 8) != 0 && (*(_BYTE *)((v35 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 8) != 0)
      v8 = 8;
    if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9 && !sub_22E3CB5E0(a2) && (a3 & 1) == 0)
    {
      v36 = sub_22EF5CDF0(a1, *v25);
      v37 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 15088) + 152))(*(_QWORD *)(a1 + 15088), v36);
      if (v8 <= v37)
        v8 = v37;
    }
    goto LABEL_70;
  }
LABEL_87:
  v49 = *(_DWORD *)(*(_QWORD *)(a1 + 15088) + *(_QWORD *)(**(_QWORD **)(a1 + 15088) - 24) + 168);
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 60 >= 7)
    v50 = 0;
  else
    v50 = a2;
  if (v49)
    v51 = v50 == 0;
  else
    v51 = 1;
  if (!v51)
  {
    v52 = *(_BYTE *)(v50 + 96) & 7;
    if (v49 >= v8)
      v49 = v8;
    if (v52 == 2)
      v8 = v49;
  }
  return v8 / (unint64_t)sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
}

unint64_t sub_22EF5B848(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t NodeOrInsertPos;
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  void *v17[2];
  _QWORD v18[17];

  v18[16] = *MEMORY[0x24BDAC8D0];
  v17[0] = v18;
  v17[1] = (void *)0x2000000000;
  v6 = a3;
  sub_22EF5F720((uint64_t)v17, a2, a3);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v8 = (NodeOrInsertPos - 24) & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    if (*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) == (*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0))
    {
      v10 = 0;
    }
    else
    {
      v10 = sub_22EF5B848(a1, *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7, v6);
      llvm::FoldingSetBase::FindNodeOrInsertPos();
    }
    v11 = sub_22E3CD3D4(a1 + 2032, 48, 4);
    v12 = *(_DWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1F00;
    v8 = v11 & 0xFFFFFFFFFFFFFFF0;
    if (v10 >= 0x10)
      v13 = v10;
    else
      v13 = v11 & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)v11 = v11;
    *(_QWORD *)(v11 + 8) = v13;
    v14 = v12 | *(_DWORD *)(v11 + 16) & 0xFFF80000 | 0x27;
    *(_QWORD *)(v11 + 24) = 0;
    *(_DWORD *)(v11 + 16) = v14;
    *(_QWORD *)(v11 + 32) = a2;
    *(_DWORD *)(v11 + 40) = a3;
    v15 = *(_DWORD *)(a1 + 16);
    if (v15 >= *(_DWORD *)(a1 + 20))
    {
      v16 = v11;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v11 = v16;
      v15 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15) = v11;
    ++*(_DWORD *)(a1 + 16);
    llvm::FoldingSetBase::InsertNode();
  }
  if (v17[0] != v18)
    free(v17[0]);
  return v8;
}

uint64_t sub_22EF5BA38(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  signed int v8;
  unint64_t v9;
  uint64_t v11;
  unint64_t v12;

  v4 = 0;
  v5 = 0;
  while (1)
  {
    v6 = sub_22F10D058(a2);
    if (!v6 || (*(_DWORD *)(v6 + 16) & 0xFEu) - 6 <= 0xFFFFFFFB)
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
        break;
      v11 = v7;
      v6 = sub_22F10CF48(v6);
      v7 = v11;
      if (!v6)
        break;
    }
    a2 = *(_QWORD *)(v6 + 32);
    v8 = (v7 >> 9) & 3;
    if ((int)((v5 >> 9) & 3) > v8)
      LOBYTE(v8) = (v5 >> 9) & 3;
    if ((v7 & 0x600) != 0)
      v5 = v7 & 0xFFFFF9FF | v5 & 0xFFFFF9FF | ((v8 & 3) << 9);
    else
      v5 |= v7 & 0xFFFFF9FF;
    if ((v7 & 0xC00000000) != 0)
      v4 = HIDWORD(v7);
    else
      v4 = v4;
  }
  if (((v5 | (unint64_t)(v4 << 32)) & 0xCFFFFFFF8) == 0)
    return v5 & 7 | a2;
  v12 = v5 | (unint64_t)(v4 << 32);
  v9 = sub_22E491354((unsigned int *)&v12, a2);
  return sub_22EF5DBC4(a1, v9, v12);
}

uint64_t sub_22EF5BB40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  void (*v14)(void);
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v2 = 0;
  v3 = *(_DWORD *)(a2 + 16);
  v4 = a2;
  switch((char)v3)
  {
    case 0:
    case 1:
    case 7:
    case 24:
      v7 = *(_QWORD *)(a2 + 40);
      goto LABEL_80;
    case 2:
    case 4:
    case 5:
      if (v3 == 2)
      {
        v8 = (_QWORD *)(a2 + 40);
        if (*(_DWORD *)(a2 + 48) >= 0x41u)
          v8 = (_QWORD *)*v8;
        v9 = (_QWORD *)*v8;
      }
      else
      {
        v9 = 0;
      }
      v2 = sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0)) * (_QWORD)v9;
      v31 = *(_QWORD *)(a1 + 15088);
      if (*(_DWORD *)(v31 + 148) != 11 || *(_BYTE *)(v31 + *(_QWORD *)(*(_QWORD *)v31 - 24)) == 64)
        return (v2 + (unint64_t)v30 - 1) / v30 * v30;
      return v2;
    case 3:
    case 13:
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 1) & 0x40) == 0)
        v4 = *(_QWORD *)(a2 + 32);
      goto LABEL_30;
    case 6:
      v32 = sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0));
      if (!v32)
        return 8;
      v33 = v32 | (v32 >> 1) | ((v32 | (v32 >> 1)) >> 2);
      v34 = v33 | (v33 >> 4);
      if ((v32 & (v32 - 1)) != 0)
        v35 = v34 + 1;
      else
        v35 = v32;
      if (v32 > *(unsigned __int8 *)(*(_QWORD *)(a1 + 15088) + 94))
        return v32;
      else
        return v35;
    case 8:
    case 22:
    case 23:
    case 37:
    case 51:
    case 54:
      v7 = *(_QWORD *)(a2 + 32);
      goto LABEL_80;
    case 9:
      v36 = sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
      v37 = ((unint64_t)*(unsigned int *)(v4 + 32) >> 1) & 0xFFFFFF;
      v38 = (v37 - 1) | ((v37 - 1) >> 1) | (((v37 - 1) | ((v37 - 1) >> 1)) >> 2);
      v39 = v38 | (v38 >> 4) | ((v38 | (v38 >> 4)) >> 8);
      v40 = v39 | (v39 >> 16);
      if ((_DWORD)v37)
        v41 = v40 + 1;
      else
        v41 = 0;
      if (v36 > v41)
        LODWORD(v41) = v36;
      if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 15088) + *(_QWORD *)(**(_QWORD **)(a1 + 15088) - 24) + 23) >= v41)
        v42 = v41;
      else
        v42 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 15088) + *(_QWORD *)(**(_QWORD **)(a1 + 15088) - 24) + 23);
      return ((unint64_t)(v42 + v37) - 1) / v42 * v42;
    case 10:
      goto LABEL_21;
    case 11:
      __asm { BR              X10 }
      return result;
    case 12:
      return 2 * sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0));
    case 14:
    case 15:
    case 28:
    case 33:
    case 49:
      v7 = *(_QWORD *)(a2 + 24);
      goto LABEL_80;
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 27:
    case 30:
    case 36:
    case 42:
    case 46:
      if ((v3 & 0x80000) != 0)
        v6 = (uint64_t *)(a2 + 24 * *(unsigned int *)(a2 + 20) + 40);
      else
        v6 = (uint64_t *)(a2 + 8);
      v7 = *v6;
      goto LABEL_80;
    case 25:
    case 26:
      return 0;
    case 29:
      return sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0))
           * *(unsigned int *)(a2 + 40)
           * *(unsigned int *)(a2 + 44);
    case 31:
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 15064) + 16))(*(_QWORD *)(a1 + 15064), a2);
    case 32:
      return *(unsigned __int8 *)(*(_QWORD *)(a1 + 15088) + *(_QWORD *)(**(_QWORD **)(a1 + 15088) - 24));
    case 34:
      if ((*(_BYTE *)(sub_22F409D88(a2) + 28) & 0x80) != 0)
        return 8;
      v55 = sub_22F409D88(v4);
      v56 = *(_QWORD *)sub_22F0CBDC4(a1, v55, 0);
      v2 = sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v56;
      sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
      return v2;
    case 35:
    case 43:
      v7 = *(_QWORD *)(a2 + 8);
      goto LABEL_80;
    case 38:
      v43 = *(uint64_t **)(a1 + 15088);
      v44 = *v43;
      if (!*(_DWORD *)(*(_QWORD *)(a1 + 15072) + 4))
        return *((unsigned __int8 *)v43 + *(_QWORD *)(v44 - 24));
      v2 = (*(uint64_t (**)(void))(v44 + 864))();
      if (!*(_DWORD *)(*(_QWORD *)(a1 + 15072) + 4))
        return v2;
      v14 = *(void (**)(void))(**(_QWORD **)(a1 + 15088) + 872);
      goto LABEL_23;
    case 39:
      v45 = sub_22EF5CF80(a1, *(_QWORD *)(a2 + 32));
      v46 = *(uint64_t **)(a1 + 15088);
      v47 = *v46;
      if ((_DWORD)v45)
      {
        v48 = (*(uint64_t (**)(void))(v47 + 864))();
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 15088) + 872))(*(_QWORD *)(a1 + 15088), v45);
      }
      else
      {
        v48 = *((unsigned __int8 *)v46 + *(_QWORD *)(v47 - 24));
      }
      v52 = *(_BYTE *)(v4 + 40);
      v53 = v48 << ((v52 & 6) == 2);
      if ((v52 & 7) == 2)
        v54 = v48;
      else
        v54 = 0;
      return v53 + v54;
    case 40:
    case 41:
      if ((v3 & 0x100000) == 0)
        goto LABEL_21;
      break;
    case 44:
    case 45:
      if ((*(_BYTE *)(sub_22F114198(*(_QWORD *)(a2 + 24)) + 28) & 0x80) != 0)
        return 8;
      v15 = *(unsigned __int8 *)(v4 + 16);
      v16 = sub_22F114198(*(_QWORD *)(v4 + 24));
      v17 = v16;
      if (v15 == 44)
      {
        v18 = sub_22E496830(v16);
        v19 = sub_22F10CF48(*(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0));
        v2 = sub_22EF5CDF0(a1, v19);
        sub_22EFC8A80(v17);
      }
      else
      {
        v51 = *(_QWORD *)sub_22F0C975C(a1, v16);
        v2 = sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v51;
        sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
        sub_22E49F7A8(v17);
      }
      return v2;
    case 47:
    case 48:
      v20 = *(_QWORD *)(a2 + 24);
      if ((*(_BYTE *)(v20 + 1) & 0x80) == 0)
        v4 = *(_QWORD *)(v20 + 8);
LABEL_30:
      v21 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      return sub_22EF5CDF0(a1, *v21);
    case 50:
      v49 = *(_QWORD *)(a2 + 24);
      v2 = sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v49 + 80) & 0xFFFFFFFFFFFFFFF8)+ ((2 * *(_QWORD *)(v49 + 80)) & 8)) & 0xFFFFFFFFFFFFFFF0));
      sub_22EFC8A80(v49);
      return v2;
    case 53:
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 64) + 48);
LABEL_80:
      v21 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
      return sub_22EF5CDF0(a1, *v21);
    case 55:
    case 56:
      v22 = sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0));
      v23 = *(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (*(_BYTE *)(v23 + 16) == 56
        && ((v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
          ? (v25 = (*(_DWORD *)(v24 + 16) & 0xFF800FF) == 87031819)
          : (v25 = 0),
            v25
         && (*(_BYTE *)(*(_QWORD *)(a1 + 15088) + *(_QWORD *)(**(_QWORD **)(a1 + 15088) - 24) + 160) & 0x20) != 0))
      {
        v2 = *(unsigned int *)(v4 + 20);
      }
      else
      {
        v2 = v22 * *(unsigned int *)(v4 + 20);
      }
      v26 = *(_DWORD *)(v4 + 16);
      if ((v26 & 0x780000) != 0x80000)
      {
        v27 = v2 <= 8 ? 8 : v2;
        if ((v27 & ((_DWORD)v27 - 1)) != 0)
        {
          v28 = v27 | (v27 >> 1) | ((v27 | (v27 >> 1)) >> 2);
          v29 = v28 | (v28 >> 4) | ((v28 | (v28 >> 4)) >> 8);
          return (v2 + (unint64_t)((v29 | (v29 >> 16)) + 1) - 1)
               / ((v29 | (v29 >> 16)) + 1)
               * ((v29 | (v29 >> 16)) + 1);
        }
      }
      return v2;
    default:
      return v2;
  }
  do
  {
    while (1)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (!v4)
        break;
      v10 = *(_DWORD *)(v4 + 16);
      if ((v10 & 0xFE) != 0x28)
        break;
      if ((v10 & 0x100000) == 0)
        goto LABEL_21;
    }
    v4 = sub_22F10CF48(v4);
  }
  while ((*(_DWORD *)(v4 + 16) & 0x100000) != 0);
LABEL_21:
  v11 = sub_22EF5CF80(a1, *(_QWORD *)(v4 + 32));
  v12 = *(uint64_t **)(a1 + 15088);
  v13 = *v12;
  if (!v11)
    return *((unsigned __int8 *)v12 + *(_QWORD *)(v13 - 24));
  v2 = (*(uint64_t (**)(void))(v13 + 864))();
  v14 = *(void (**)(void))(**(_QWORD **)(a1 + 15088) + 872);
LABEL_23:
  v14();
  return v2;
}

unint64_t sub_22EF5C728(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t result;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  uint64_t v14;

  v3 = a2 & 0xFFFFFFFFFFFFFFF0;
  if ((a2 & 0xF) != 0
    || ((result = *(_QWORD *)v3) != 0 ? (v5 = (*(_DWORD *)(*(_QWORD *)v3 + 16) & 0xFEu) - 6 > 0xFFFFFFFB) : (v5 = 0),
        !v5))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu)
       - 2 > 3)
    {
      return 0;
    }
    else
    {
      v7 = sub_22F10D058(a2);
      result = 0;
      if (v7)
      {
        v8 = *(_DWORD *)(v7 + 16);
        if ((v8 & 0xFE) - 6 >= 0xFFFFFFFC)
        {
          if ((v6 & 0xCFFFFFFFFLL) != 0)
          {
            v9 = *(_QWORD *)(v7 + 32);
            if ((v6 & 0xCFFFFFFF8) != 0)
            {
              v14 = v6;
              v10 = sub_22E491354((unsigned int *)&v14, v9);
              v11 = sub_22EF5DBC4(a1, v10, v14);
              v8 = *(_DWORD *)(v7 + 16);
            }
            else
            {
              v11 = v9 | v6 & 7;
            }
            switch(v8)
            {
              case 4u:
                v13 = sub_22EF6096C(a1, v11, (v8 >> 22) & 7, (v8 >> 19) & 7, *(_QWORD *)(v7 + 40), v7 + 56, *(unsigned int *)(v7 + 48));
                break;
              case 3u:
                v13 = sub_22EF6042C(a1, v11, *(unsigned __int8 **)(v7 + 48), (v8 >> 22) & 7, (v8 >> 19) & 7, *(_QWORD *)(v7 + 56));
                break;
              case 2u:
                if ((v8 & 0x2000000) != 0)
                  v12 = *(unsigned __int8 **)(v7 + 56);
                else
                  v12 = 0;
                v13 = sub_22EF5FE30(a1, v11, (const llvm::APInt *)(v7 + 40), v12, (v8 >> 22) & 7, (v8 >> 19) & 7);
                break;
              default:
                v13 = sub_22EF60740(a1, v11, *(_DWORD **)(v7 + 40), (v8 >> 22) & 7, (v8 >> 19) & 7, *(_QWORD *)(v7 + 48));
                break;
            }
            return *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
          }
          else
          {
            return v7;
          }
        }
      }
    }
  }
  return result;
}

unint64_t sub_22EF5C8B8(uint64_t a1, uint64_t a2)
{
  _QWORD *i;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  BOOL v21;
  unint64_t result;

  for (i = (_QWORD *)(a1 + 16536); ; a2 = *(_QWORD *)(*i & 0xFFFFFFFFFFFFFFF0))
  {
    sub_22EF5CDF0(a1, a2);
    v6 = v5;
    if (!a2)
      goto LABEL_4;
LABEL_3:
    if ((*(_DWORD *)(a2 + 16) & 0xFEu) - 6 > 0xFFFFFFFB)
    {
      v7 = a2;
      goto LABEL_8;
    }
LABEL_4:
    while ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
    {
      v7 = sub_22F10CF48(a2);
      if (!v7)
      {
        v9 = (_QWORD *)(a2 + 8);
        v10 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        goto LABEL_11;
      }
LABEL_8:
      a2 = *(_QWORD *)(*(_QWORD *)(v7 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (a2)
        goto LABEL_3;
    }
    v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    v9 = (_QWORD *)(a2 + 8);
LABEL_11:
    if (v10 != 31)
      break;
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 15088) + *(_QWORD *)(**(_QWORD **)(a1 + 15088) - 24) + 120);
    if (v8 != 8)
      __asm { BR              X9 }
  }
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 15088) + 768))(*(_QWORD *)(a1 + 15088)))
    return v6;
  v11 = *(_QWORD *)(*v9 & 0xFFFFFFFFFFFFFFF0);
  v12 = *(unsigned __int8 *)(v11 + 16);
  if (v11 && v12 == 45)
  {
    v13 = sub_22F114198(*(_QWORD *)(v11 + 24));
    if (HIDWORD(v6) != 1 && (*(_BYTE *)(v13 + 28) & 0x80) == 0)
    {
      v14 = *(_DWORD *)(sub_22F0C975C(a1, v13) + 24);
      return sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v14;
    }
    return v6;
  }
  if (a2 && *(_BYTE *)(a2 + 16) == 12)
  {
    v15 = a2;
    goto LABEL_26;
  }
  if (v12 == 12)
  {
    v15 = sub_22F10CF48(a2);
    if (v15)
LABEL_26:
      a2 = *(_QWORD *)(*(_QWORD *)(v15 + 32) & 0xFFFFFFFFFFFFFFF0);
  }
  v16 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_DWORD *)(v16 + 16);
  if (v16 && *(_DWORD *)(v16 + 16) == 44)
  {
    v18 = sub_22F114198(*(_QWORD *)(v16 + 24));
    a2 = *(_QWORD *)(sub_22E496830(v18) & 0xFFFFFFFFFFFFFFF0);
    v17 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v17 != 11)
    return v6;
  v19 = v17 & 0xFF80000;
  v20 = v17 & 0xFB80000;
  v21 = v19 == 111149056 || v20 == 92274688;
  if (!v21
    && (v19 != 111673344
     || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 15088) + 776))(*(_QWORD *)(a1 + 15088)))
    || HIDWORD(v6))
  {
    return v6;
  }
  LODWORD(result) = sub_22EF5CDF0(a1, a2);
  if (v6 <= result)
    return result;
  else
    return v6;
}

uint64_t sub_22EF5CBF4(uint64_t a1, uint64_t a2)
{
  return sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0)) * a2;
}

unint64_t sub_22EF5CC24(uint64_t a1, unint64_t a2)
{
  return a2 / sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
}

unint64_t sub_22EF5CC54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  unint64_t result;
  uint64_t v7;
  unint64_t v8;

  v5 = a2 & 0xFFFFFFFFFFFFFFF0;
  result = sub_22EF5CCD0(a1, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0), (uint64_t)a3);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 2000) + 1) & 1) != 0)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v7)
    {
      if (*(_BYTE *)(v7 + 16) == 45)
      {
        v8 = sub_22F114198(*(_QWORD *)(v7 + 24));
        result = sub_22F0C975C(a1, v8);
        *a3 = *(_QWORD *)(result + 8);
      }
    }
  }
  return result;
}

unint64_t sub_22EF5CCD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;

  if (a2 && *(_BYTE *)(a2 + 16) == 2)
  {
    result = (unint64_t)sub_22EF5CCD0(&v16, a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0));
    v7 = (_QWORD *)(a2 + 40);
    if (*(_DWORD *)(a2 + 48) >= 0x41u)
      v7 = (_QWORD *)*v7;
    v8 = v16 * *v7;
    v9 = v17;
    v10 = *(_QWORD *)(a1 + 15088);
    if (*(_DWORD *)(v10 + 148) != 11 || *(_BYTE *)(v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)) == 64)
      v8 = (v8 + v17 - 1) / v17 * v17;
    v11 = v18;
    *(_QWORD *)a3 = v8;
    *(_QWORD *)(a3 + 8) = v9;
    *(_DWORD *)(a3 + 16) = v11;
  }
  else
  {
    v12 = sub_22EF5CDF0(a1, a2);
    v14 = v13;
    v15 = v12 / sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
    result = sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
    *(_QWORD *)a3 = v15;
    *(_QWORD *)(a3 + 8) = v14 / result;
    *(_DWORD *)(a3 + 16) = HIDWORD(v14);
  }
  return result;
}

uint64_t sub_22EF5CDF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v11 = a2;
  v4 = a1 + 976;
  v5 = sub_22EF5CE7C((uint64_t *)(a1 + 976), a2);
  if ((uint64_t *)(*(_QWORD *)(a1 + 976) + 24 * *(unsigned int *)(a1 + 992)) != v5)
    return v5[1];
  v6 = sub_22EF5BB40(a1, a2);
  v8 = v7;
  v9 = sub_22EF7787C(v4, &v11);
  v9[1] = v6;
  v9[2] = v8;
  return v6;
}

uint64_t *sub_22EF5CE7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t *result;
  uint64_t v6;
  int v7;
  unsigned int v8;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 4);
  if (!v3)
    return (uint64_t *)(v2 + 24 * v3);
  v4 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  result = (uint64_t *)(v2 + 24 * v4);
  v6 = *result;
  if (*result != a2)
  {
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      result = (uint64_t *)(v2 + 24 * v4);
      v6 = *result;
      if (*result == a2)
        return result;
    }
    return (uint64_t *)(v2 + 24 * v3);
  }
  return result;
}

uint64_t sub_22EF5CEF4(uint64_t a1)
{
  int v1;
  unsigned int v2;
  uint64_t result;

  v1 = *(_DWORD *)(a1 + 16);
  if (!a1 || v1 != 11)
    return 4 * (v1 == 38);
  v2 = (*(_DWORD *)(a1 + 16) >> 19) & 0x1FF;
  if (v2 < 0x24)
    return 3;
  switch(v2)
  {
    case 0xDEu:
      result = 7;
      break;
    case 0xDFu:
      result = 2;
      break;
    case 0xE0u:
      result = 1;
      break;
    case 0xE1u:
      result = 5;
      break;
    case 0xE2u:
      result = 6;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_22EF5CF80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 25 > 1)
  {
    if ((v2 & 8) == 0)
    {
      v5 = 0;
      goto LABEL_9;
    }
    v3 = v2 & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    if ((v2 & 8) == 0)
      return *(unsigned int *)(*(_QWORD *)(a1 + 15088) + 160);
    v3 = v2 & 0xFFFFFFFFFFFFFFF0;
    if ((*(_DWORD *)(v3 + 24) & 0xFFFFF800) == 0)
      return *(unsigned int *)(*(_QWORD *)(a1 + 15088) + 160);
  }
  v5 = *(_DWORD *)(v3 + 24);
LABEL_9:
  v6 = v5 >> 11;
  v4 = (v5 >> 11) - 27;
  if (v6 < 0x1B)
    return *(unsigned int *)(*(_QWORD *)(a1 + 15072) + 4 * v6);
  return v4;
}

uint64_t sub_22EF5CFF4(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v15 = a2;
  v16 = a2;
  v4 = (uint64_t *)(a1 + 1000);
  v17 = 0;
  if (!sub_22F246C54((uint64_t *)(a1 + 1000), &v16, &v17)
    || v17 == *(_QWORD *)(a1 + 1000) + 16 * *(unsigned int *)(a1 + 1016))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
    v8 = *(unsigned __int8 *)(v7 + 16);
    if (v7 && v8 == 45)
    {
      v9 = sub_22F114198(*(_QWORD *)(v7 + 24));
      v10 = sub_22F0C975C(a1, v9);
    }
    else
    {
      if (!v7 || v8 != 34)
      {
        v13 = sub_22F10CF48(a2);
        sub_22EF5CDF0(a1, v13);
        v5 = v14;
        goto LABEL_13;
      }
      v11 = sub_22F409D88(v7);
      v10 = sub_22F0CBDC4(a1, v11, 0);
    }
    v12 = *(_QWORD *)(v10 + 32);
    v5 = sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v12;
LABEL_13:
    *((_DWORD *)sub_22F283EC0(v4, &v15) + 2) = v5;
    return v5;
  }
  return *(unsigned int *)(v17 + 8);
}

uint64_t sub_22EF5D104(uint64_t a1, uint64_t a2)
{
  _QWORD v3[3];

  sub_22EF5CCD0(a1, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v3);
  return v3[0];
}

unint64_t sub_22EF5D130(uint64_t a1, uint64_t a2)
{
  unsigned int v3;

  sub_22EF5CDF0(a1, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  return v3 / (unint64_t)sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
}

unint64_t sub_22EF5D174(uint64_t a1, uint64_t a2)
{
  unsigned int v3;

  sub_22EF5CDF0(a1, a2);
  return v3 / (unint64_t)sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
}

unint64_t sub_22EF5D1B0(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;

  v3 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_22EF5CDF0(a1, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_22EF5C8B8(a1, *v3);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 15088) + 152))(*(_QWORD *)(a1 + 15088), v4);
  if (v5 <= v6)
    v7 = v6;
  else
    v7 = v5;
  return v7 / sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
}

uint64_t sub_22EF5D228(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;

  v5 = result;
  v6 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (a2 && v6 == 22)
  {
    v13 = (uint64_t *)sub_22F276134(a2);
    v14 = sub_22F2761B0(a2);
    if (v13 != (uint64_t *)v14)
    {
      v15 = (uint64_t *)v14;
      do
      {
        v16 = *v13++;
        sub_22EF5D228(v5, v16, a3);
      }
      while (v13 != v15);
    }
    v17 = sub_22F257E10(a2);
    if (v17)
    {
      v18 = v17;
      while ((*(_BYTE *)(v18 + 28) & 0x80) != 0 || (*(_BYTE *)(v18 + 8) & 4) != 0)
      {
        v18 = *(_QWORD *)(v18 + 128);
        if (!v18)
          goto LABEL_21;
      }
LABEL_25:
      sub_22EF5D228(v5, v18, a3);
      while (1)
      {
        v18 = *(_QWORD *)(v18 + 128);
        if (!v18)
          break;
        if ((*(_BYTE *)(v18 + 28) & 0x80) == 0 && (*(_BYTE *)(v18 + 8) & 4) == 0)
          goto LABEL_25;
      }
    }
LABEL_21:
    result = sub_22F3B46CC(a2);
    if (result)
    {
      v19 = result;
      do
      {
        sub_22EF5D228(v5, v19, a3);
        result = sub_22F3B46CC(v19);
        v19 = result;
      }
      while (result);
    }
  }
  else if (a2 && v6 == 19)
  {
    v7 = *(_QWORD *)(a2 + 120) & 0xFFFFFFFFFFFFFFF8;
    v8 = *(unsigned int *)(v7 + 24);
    if ((_DWORD)v8)
    {
      v9 = *(uint64_t **)(v7 + 16);
      v10 = 8 * v8;
      do
      {
        v11 = *v9++;
        result = sub_22EF5D228(v5, v11, a3);
        v10 -= 8;
      }
      while (v10);
    }
  }
  else if (a2)
  {
    if (v6 == 23)
    {
      result = sub_22E3BA850(a3, *(const void **)(a2 + 96));
      if (v12)
      {
        result = sub_22F259248(a2);
        if ((uint64_t *)result != v20)
        {
          v21 = (uint64_t *)result;
          v22 = v20;
          do
          {
            v23 = *v21++;
            result = sub_22EF5D228(v5, v23, a3);
          }
          while (v21 != v22);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22EF5D3C4(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  _QWORD v24[3];

  v23 = a2;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu)
     - 2 <= 3)
  {
    do
    {
      a2 = sub_22EF5BA38(a1, a2);
      v23 = a2;
    }
    while ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                       + 16) & 0xFEu)
          - 2 < 4);
  }
  result = sub_22F111968(&v23, a1);
  if ((_DWORD)result)
  {
    v4 = *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0);
    v5 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0;
    v6 = *(_QWORD *)v5;
    v7 = *(_DWORD *)(*(_QWORD *)v5 + 16);
    if (*(_QWORD *)v5)
      v8 = v7 == 11;
    else
      v8 = 0;
    if (v8)
    {
      if (((*(_DWORD *)(*(_QWORD *)v5 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
        return 1;
    }
    else if (v6 && v7 == 44)
    {
      v9 = sub_22F114198(*(_QWORD *)(v6 + 24));
      if ((*(_BYTE *)(v9 + 74) & 1) != 0 || *(_QWORD *)(v9 + 128) > 7uLL)
        return 1;
      v4 = *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0);
      v5 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0;
    }
    else if (v7 == 9)
    {
      return 1;
    }
    v10 = *(_QWORD *)v5;
    v11 = *(unsigned __int8 *)(*(_QWORD *)v5 + 16);
    if (v11 == 45)
    {
      v14 = sub_22F114198(*(_QWORD *)(v10 + 24));
      if ((*(_BYTE *)(v14 + 28) & 0x80) == 0)
      {
        v15 = v14;
        if ((*(_DWORD *)(v14 + 72) & 0xE000) == 0x4000)
        {
          sub_22EF5CCD0(a1, *(_QWORD *)(v14 + 48), (uint64_t)v24);
          v16 = v24[0];
          v17 = sub_22EFC3B90(v15);
          if (v17)
          {
            v18 = v17;
            v19 = (_QWORD *)(v17 + 48);
            result = sub_22EF5D3C4(a1, *(_QWORD *)(v17 + 48));
            if (!(_DWORD)result)
              return result;
LABEL_30:
            sub_22EF5CCD0(a1, *(_QWORD *)(*v19 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v24);
            if (v24[0] != v16)
              return 0;
            while (1)
            {
              v18 = *(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8;
              if (!v18)
                break;
              if ((*(_DWORD *)(v18 + 28) & 0x7Fu) - 49 <= 2)
              {
                v19 = (_QWORD *)(v18 + 48);
                v20 = sub_22EF5D3C4(a1, *(_QWORD *)(v18 + 48));
                result = 0;
                if ((v20 & 1) != 0)
                  goto LABEL_30;
                return result;
              }
            }
          }
          return sub_22EFC3B90(v15) != 0;
        }
        v21 = sub_22EF5D660(a1, v14);
        if (v22)
          return v21 == sub_22EF5CDF0(a1, *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0));
      }
      return 0;
    }
    if (v11 != 39)
    {
      if (v11 == 31)
      {
        if (*(_BYTE *)(v4 + 16) != 31)
          v4 = sub_22F10CF48(v4);
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 15064) + 16))(*(_QWORD *)(a1 + 15064), v4);
        return (v12 & 0x100000000) == 0;
      }
      return 0;
    }
    return 1;
  }
  return result;
}

unint64_t sub_22EF5D660(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  _QWORD v48[5];

  v48[4] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22F0C975C(a1, a2);
  v5 = 0;
  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
  {
    v6 = v4;
    if (sub_22E463414(a2))
      goto LABEL_66;
    v46 = v48;
    v47 = 0x400000000;
    v7 = sub_22E46A3A0(a2);
    if (v7 == v8)
    {
      v15 = v47;
    }
    else
    {
      v9 = v7;
      v10 = v8;
      do
      {
        v11 = *(_QWORD *)(**(_QWORD **)(v9 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v11 + 8) & 0xF) != 0)
          v11 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v9 + 16));
        v12 = sub_22F10C2A4(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0));
        if (v12)
        {
          if ((*(_DWORD *)(v12 + 28) & 0x7Fu) - 35 >= 3)
            v13 = 0;
          else
            v13 = v12;
        }
        else
        {
          v13 = 0;
        }
        v14 = v47;
        if (v47 >= HIDWORD(v47))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          *((_QWORD *)v46 + v47) = v13;
          v14 = v47;
        }
        else
        {
          *((_QWORD *)v46 + v47) = v13;
        }
        v15 = v14 + 1;
        LODWORD(v47) = v15;
        v9 += 24;
      }
      while (v9 != v10);
    }
    v45 = v6;
    v16 = 126 - 2 * __clz(v15);
    v17 = v15 ? v16 : 0;
    v18 = 1;
    sub_22EF75A7C((uint64_t)v46, (uint64_t *)v46 + v15, &v45, v17, 1);
    v19 = (uint64_t *)v46;
    if ((_DWORD)v47)
    {
      v5 = 0;
      v20 = 8 * v47;
      while (1)
      {
        v21 = *v19;
        v22 = sub_22EF5D660(a1, *v19);
        if (!v23)
          break;
        v24 = v22;
        if (v22)
        {
          v25 = sub_22E46A3EC(v6, v21);
          v26 = sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
          if (v26 * v25 == v5)
            v27 = v24;
          else
            v27 = 0;
          if (v26 * v25 != v5)
            break;
          v5 += v27;
        }
        ++v19;
        v20 -= 8;
        if (!v20)
        {
          v18 = 1;
          goto LABEL_34;
        }
      }
      v18 = 0;
      v5 = 0;
LABEL_34:
      v19 = (uint64_t *)v46;
    }
    else
    {
      v5 = 0;
    }
    if (v19 != v48)
      free(v19);
    if (!v18)
      goto LABEL_66;
  }
  v28 = sub_22EFC3B90(a2);
  if (v28)
  {
    v29 = v28;
LABEL_41:
    v30 = *(_QWORD *)(v29 + 48);
    v31 = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0);
    v32 = *(_QWORD *)(v31 + 8) & 0xFFFFFFFFFFFFFFF0;
    if (*(_BYTE *)(*(_QWORD *)v32 + 16) != 45)
    {
LABEL_47:
      if ((*(_DWORD *)(*(_QWORD *)v32 + 16) & 0xFE) != 0x28)
      {
        if (!sub_22EF5D3C4(a1, v30))
          goto LABEL_66;
        v31 = *(_QWORD *)(*(_QWORD *)(v29 + 48) & 0xFFFFFFFFFFFFFFF0);
      }
      sub_22EF5CCD0(a1, v31, (uint64_t)&v46);
      v35 = v46;
      v36 = sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0)) * (_QWORD)v35;
      if ((*(_BYTE *)(v29 + 68) & 1) == 0)
        goto LABEL_53;
      v37 = sub_22EFC2EF4(v29, a1);
      if (v36 >= v37)
      {
        v36 = v37;
LABEL_53:
        if (!v36)
          goto LABEL_59;
LABEL_54:
        v38 = sub_22F0CBBE4(a1, v29);
        if (v38 == v5)
          v39 = v36;
        else
          v39 = 0;
        if (v38 == v5)
        {
          v5 += v39;
          goto LABEL_59;
        }
      }
LABEL_66:
      v42 = 0;
      v43 = 0;
      return v43 | v42;
    }
    v33 = sub_22F10C2A4(*(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0));
    if ((*(_DWORD *)(v33 + 28) & 0x7Eu) - 34 >= 4)
      v34 = 0;
    else
      v34 = v33;
    if ((*(_DWORD *)(v34 + 72) & 0xE000) == 0x4000)
    {
      v30 = *(_QWORD *)(v29 + 48);
      v31 = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0);
      v32 = *(_QWORD *)(v31 + 8) & 0xFFFFFFFFFFFFFFF0;
      goto LABEL_47;
    }
    v40 = sub_22EF5D660(a1, v34);
    if (!v41)
      goto LABEL_66;
    v36 = v40;
    if (v40)
      goto LABEL_54;
LABEL_59:
    while (1)
    {
      v29 = *(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v29)
        break;
      if ((*(_DWORD *)(v29 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_41;
    }
  }
  v42 = v5 & 0xFFFFFFFFFFFFFF00;
  v43 = v5;
  return v43 | v42;
}

uint64_t sub_22EF5DA28(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  v3 = sub_22E496488(a2);
  if (v3 == v4)
  {
    v5 = 0;
  }
  else
  {
    v6 = v3;
    v7 = v4;
    LODWORD(v5) = 0;
    do
    {
      v8 = sub_22F368B68(v6);
      do
      {
        v6 = *(_QWORD *)(v6 + 128);
        if (!v6)
          break;
      }
      while ((*(_BYTE *)(v6 + 28) & 0x80) != 0 || *(_QWORD *)(v6 + 40) >= 8uLL && (*(_QWORD *)(v6 + 40) & 7) == 0);
      v5 = (v8 + v5);
    }
    while (v6 != v7);
  }
  v10 = sub_22F3B4E88(a2);
  if (v10)
    return sub_22F368B68(v10) + v5;
  return v5;
}

BOOL sub_22EF5DAC4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  BOOL v4;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v3)
    v4 = (*(_DWORD *)(v3 + 16) & 0xFF800FF) == 114294795;
  else
    v4 = 0;
  if (v4)
    return 1;
  v6 = *(_DWORD *)(v3 + 16);
  if (v6 != 39 && v6 != 32)
    return *a2 == 175;
  v7 = sub_22EFFBBCC(a2);
  v8 = 1;
  if (!sub_22EFFBE1C((unint64_t)v7, a1, 1))
    return *a2 == 175;
  return v8;
}

_QWORD *sub_22EF5DB78(uint64_t a1, unint64_t a2, unsigned int a3)
{
  _QWORD *result;

  if (!a3)
    a3 = sub_22F11598C(a2);
  result = (_QWORD *)sub_22E3CD3D4(a1 + 2032, a3 + 8, 3);
  *result = a2;
  return result;
}

uint64_t sub_22EF5DBC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t NodeOrInsertPos;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  signed int v14;
  uint64_t v15;
  unint64_t v16;

  v6 = a3 & 0xFFFFFFFFFFFFFFF8;
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v8 = (NodeOrInsertPos - 16) & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 8);
    if (v9 == (a2 & 0xFFFFFFFFFFFFFFF0))
    {
      v10 = 0;
    }
    else
    {
      v11 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
      if ((v9 & 8) != 0)
      {
        v11 = (_QWORD *)*v11;
        v12 = *(_QWORD *)((*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 0x18) | *(_QWORD *)(a2 + 8) & 7;
      }
      else
      {
        v12 = *(_QWORD *)(a2 + 8) & 7;
      }
      LODWORD(v13) = v6 & 0xFFFFF9F8 | v12;
      v14 = (v6 >> 9) & 3;
      if ((int)((v12 >> 9) & 3) > v14)
        LOBYTE(v14) = (v12 >> 9) & 3;
      if ((v6 & 0x600) != 0)
        v13 = v6 & 0xFFFFF9F8 | v12 & 0xFFFFF9FF | ((v14 & 3) << 9);
      else
        v13 = v13;
      if ((a3 & 0xC00000000) != 0)
        v12 = a3;
      v10 = sub_22EF5DBC4(a1, v11, v12 & 0xFFFFFFFF00000000 | v13);
      llvm::FoldingSetBase::FindNodeOrInsertPos();
    }
    v15 = sub_22E3CD3D4(a1 + 2032, 32, 4);
    v8 = v15 & 0xFFFFFFFFFFFFFFF0;
    v16 = v15 & 0xFFFFFFFFFFFFFFF0 | 8;
    if (v10 >= 0x10)
      v16 = v10;
    *(_QWORD *)v15 = a2;
    *(_QWORD *)(v15 + 8) = v16;
    *(_QWORD *)(v15 + 24) = v6;
    *(_QWORD *)(v15 + 16) = 0;
    llvm::FoldingSetBase::InsertNode();
  }
  return a3 & 7 | v8 | 8;
}

uint64_t sub_22EF5DD84(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v9;

  v5 = *(_QWORD *)((*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v5 & 8) != 0)
    v6 = *(_DWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
  else
    v6 = 0;
  if (v6 != a3)
  {
    v9 = 0;
    v7 = sub_22E491354((unsigned int *)&v9, a2);
    LODWORD(v9) = v9 & 0x7FF | (a3 << 11) | (a3 == 13);
    return sub_22EF5DBC4(a1, v7, v9);
  }
  return a2;
}

uint64_t sub_22EF5DE18(uint64_t a1, uint64_t a2, signed int a3)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  signed int v8;
  uint64_t v10;

  v5 = *(_QWORD *)((*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v5 & 8) != 0)
    v6 = (*(_DWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 9) & 3;
  else
    v6 = 0;
  if (v6 != a3)
  {
    v10 = 0;
    v7 = sub_22E491354((unsigned int *)&v10, a2);
    v8 = (v10 >> 9) & 3;
    if (v8 <= a3)
      v8 = a3;
    LODWORD(v10) = v10 & 0xFFFFF9FF | (v8 << 9);
    return sub_22EF5DBC4(a1, v7, v10);
  }
  return a2;
}

unint64_t sub_22EF5DEB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;

  v2 = a2;
  v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v3 & 8) != 0 && (*(_DWORD *)((v3 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0)
  {
    v12 = 0;
    do
    {
      v5 = sub_22E491354((unsigned int *)&v12, v2);
      v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v6 & 8) == 0)
        break;
      if ((*(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0)
        break;
      v7 = sub_22F4098F0(v2, a1);
      v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v8 & 8) == 0)
        break;
      v2 = v7;
    }
    while ((*(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0);
    v9 = v12 & 0x7FF;
    LODWORD(v12) = v9;
    if (v9 <= 7 && (v12 & 0xC00000000) == 0)
      return v5 & 0xFFFFFFFFFFFFFFF0 | v9;
    else
      return sub_22EF5DBC4(a1, v5, v12);
  }
  return v2;
}

uint64_t sub_22EF5DF94(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  int v16;
  uint64_t v17[9];
  char *__s;
  __int128 v19;
  _QWORD v20[33];

  v20[32] = *MEMORY[0x24BDAC8D0];
  __s = (char *)v20;
  v19 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v17, (uint64_t)&__s);
  v4 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if ((v5 && *(_BYTE *)(v5 + 16) == 39
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
     && (v5 = sub_22F10CF48(v5)) != 0)
    && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 25 < 2)
  {
LABEL_4:
    a2 = sub_22F10ACF8(*v4);
    v4 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
    goto LABEL_9;
  }
  v6 = *v4;
  if (!*v4 || (v7 = *(_DWORD *)(v6 + 16), (v7 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_9;
    v6 = sub_22F10CF48(v6);
    if (!v6)
      goto LABEL_9;
    v7 = *(_DWORD *)(v6 + 16);
  }
  if ((v7 & 0x100000) != 0)
  {
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v6 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v6)
      {
        v16 = *(_DWORD *)(v6 + 16);
        if ((v16 & 0xFE) == 0x28)
          continue;
      }
      v6 = sub_22F10CF48(v6);
      v16 = *(_DWORD *)(v6 + 16);
    }
    while ((v16 & 0x100000) != 0);
  }
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 25 <= 1)
    goto LABEL_4;
LABEL_9:
  v8 = *v4;
  v9 = *(_QWORD *)(*v4 + 8);
  if (*(unsigned __int8 *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) - 25 > 1)
  {
    if ((v9 & 0xF) != 0)
      v8 = (uint64_t)sub_22F10D2BC(a2);
    v10 = v8 & 0xFFFFFFFFFFFFFFF0;
    v11 = sub_22F368DF4(a1, 0);
    (*(void (**)(uint64_t, unint64_t, uint64_t *))(*(_QWORD *)v11 + 184))(v11, v10, v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  }
  else
  {
    sub_22EF5E234(a1, v17, a2);
  }
  v12 = v19;
  if ((unint64_t)(v19 + 1) > *((_QWORD *)&v19 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v12 = v19;
  }
  __s[v12] = 0;
  if (__s)
    v13 = strlen(__s);
  else
    v13 = 0;
  v14 = sub_22F3F1554((unsigned __int8 *)__s, v13);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v17);
  if (__s != (char *)v20)
    free(__s);
  return (unsigned __int16)(v14 + (((v14 * (unsigned __int128)0x8000800080008001) >> 64) >> 15) + 1);
}

uint64_t sub_22EF5E234(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  const char *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  _BYTE *v13;
  int v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  char *v22;
  const char *v23;
  void *v24;
  _WORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  llvm::raw_ostream *v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  size_t v40;
  unsigned int v41;
  char v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _WORD *v46;
  uint64_t *v47;
  uint64_t v48[3];

  v4 = result;
  v47 = a2 + 4;
  while (2)
  {
    v5 = *(_QWORD *)(*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    switch(*(_BYTE *)(v5 + 16))
    {
      case 2:
      case 4:
      case 5:
        v6 = (_BYTE *)a2[4];
        if ((_BYTE *)a2[3] == v6)
        {
          v7 = (llvm::raw_ostream *)a2;
          v8 = "A";
          goto LABEL_7;
        }
        *v6 = 65;
        goto LABEL_34;
      case 6:
        goto LABEL_31;
      case 9:
      case 0x1D:
      case 0x26:
LABEL_61:
        v22 = (char *)a2[4];
        if ((char *)a2[3] == v22)
        {
          v23 = "?";
          goto LABEL_65;
        }
        v42 = 63;
        goto LABEL_96;
      case 0xA:
      case 0x20:
      case 0x27:
LABEL_63:
        v22 = (char *)a2[4];
        if ((char *)a2[3] == v22)
        {
          v23 = "P";
          goto LABEL_65;
        }
        v42 = 80;
        goto LABEL_96;
      case 0xB:
        v26 = *(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0);
        v27 = *(unsigned __int8 *)(v26 + 16);
        if (v27 == 11)
          v28 = *(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0);
        else
          v28 = 0;
        switch((*(_DWORD *)(v28 + 16) >> 19) & 0x1FF)
        {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
          case 0x20:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
          case 0x2A:
          case 0x2B:
          case 0x2C:
          case 0x2D:
          case 0x2E:
          case 0x2F:
          case 0x30:
          case 0x31:
          case 0x32:
          case 0x33:
          case 0x34:
          case 0x35:
          case 0x36:
          case 0x37:
          case 0x38:
          case 0x39:
          case 0x3A:
          case 0x3B:
          case 0x3C:
          case 0x3D:
          case 0x3E:
          case 0x3F:
          case 0x40:
          case 0x41:
          case 0x42:
          case 0x43:
          case 0x44:
          case 0x45:
          case 0x46:
          case 0x47:
          case 0x48:
          case 0x49:
          case 0x4A:
          case 0x4B:
          case 0x4C:
          case 0x4D:
          case 0x4E:
          case 0x4F:
          case 0x50:
          case 0x51:
          case 0x52:
          case 0x53:
          case 0x54:
          case 0x55:
          case 0x56:
          case 0x57:
          case 0x58:
          case 0x59:
          case 0x5A:
          case 0x5B:
          case 0x5C:
          case 0x5D:
          case 0x5E:
          case 0x5F:
          case 0x60:
          case 0x61:
          case 0x62:
          case 0xD9:
            return result;
          case 0xA5:
            v22 = (char *)a2[4];
            if ((char *)a2[3] == v22)
            {
              v23 = "v";
              goto LABEL_65;
            }
            v42 = 118;
            goto LABEL_96;
          case 0xA6:
          case 0xA7:
          case 0xA8:
          case 0xA9:
          case 0xAA:
          case 0xAB:
          case 0xAC:
          case 0xAD:
          case 0xAE:
          case 0xAF:
          case 0xB0:
          case 0xB1:
          case 0xB2:
          case 0xB3:
          case 0xB4:
          case 0xB5:
          case 0xB6:
          case 0xB7:
          case 0xB8:
          case 0xB9:
          case 0xBA:
          case 0xBB:
          case 0xBC:
          case 0xBD:
          case 0xBE:
          case 0xBF:
          case 0xC0:
          case 0xC1:
          case 0xC2:
          case 0xC3:
          case 0xC4:
          case 0xC5:
          case 0xC6:
          case 0xC7:
          case 0xC8:
          case 0xC9:
          case 0xCA:
          case 0xCB:
          case 0xCC:
          case 0xCD:
          case 0xCE:
          case 0xCF:
          case 0xD0:
          case 0xD1:
            goto LABEL_59;
          case 0xD2:
            v46 = (_WORD *)a2[4];
            if ((unint64_t)(a2[3] - (_QWORD)v46) <= 1)
              return llvm::raw_ostream::write((llvm::raw_ostream *)a2, "Dh");
            *v46 = 26692;
            v43 = v47;
            v44 = *v47 + 2;
            goto LABEL_97;
          case 0xD3:
            v22 = (char *)a2[4];
            if ((char *)a2[3] == v22)
            {
              v23 = "f";
              goto LABEL_65;
            }
            v42 = 102;
            goto LABEL_96;
          case 0xD4:
            v22 = (char *)a2[4];
            if ((char *)a2[3] == v22)
            {
              v23 = "d";
              goto LABEL_65;
            }
            v42 = 100;
            goto LABEL_96;
          case 0xD5:
            v22 = (char *)a2[4];
            if ((char *)a2[3] == v22)
            {
              v23 = "e";
              goto LABEL_65;
            }
            v42 = 101;
            goto LABEL_96;
          case 0xD6:
            v45 = a2[4];
            if ((unint64_t)(a2[3] - v45) <= 4)
              return llvm::raw_ostream::write((llvm::raw_ostream *)a2, "DF16_");
            *(_BYTE *)(v45 + 4) = 95;
            *(_DWORD *)v45 = 909198916;
            v43 = v47;
            v44 = *v47 + 5;
            goto LABEL_97;
          case 0xD7:
          case 0xDE:
          case 0xDF:
          case 0xE0:
          case 0xE1:
          case 0xE2:
          case 0xE3:
          case 0xE4:
          case 0xE5:
          case 0xE6:
          case 0xE7:
          case 0xE8:
          case 0xE9:
          case 0xEA:
          case 0xEB:
          case 0xEC:
          case 0xED:
          case 0xEE:
          case 0xEF:
          case 0xF0:
          case 0xF1:
          case 0xF2:
          case 0xF3:
          case 0xF4:
          case 0xF5:
          case 0xF6:
          case 0xF7:
          case 0xF8:
          case 0xF9:
          case 0xFA:
          case 0xFB:
          case 0xFC:
          case 0xFD:
          case 0xFE:
          case 0xFF:
          case 0x100:
          case 0x101:
          case 0x102:
            goto LABEL_61;
          case 0xD8:
            v22 = (char *)a2[4];
            if ((char *)a2[3] == v22)
            {
              v23 = "g";
              goto LABEL_65;
            }
            v42 = 103;
            break;
          case 0xDA:
          case 0xDB:
          case 0xDC:
          case 0xDD:
            goto LABEL_63;
          default:
            goto LABEL_69;
        }
        goto LABEL_96;
      case 0xC:
        v9 = (_BYTE *)a2[4];
        if ((_BYTE *)a2[3] == v9)
        {
          v7 = (llvm::raw_ostream *)a2;
          v8 = "C";
LABEL_7:
          result = llvm::raw_ostream::write(v7, v8);
        }
        else
        {
          *v9 = 67;
LABEL_34:
          ++*v47;
        }
        goto LABEL_31;
      case 0x19:
      case 0x1A:
        v15 = (_BYTE *)a2[4];
        if ((_BYTE *)a2[3] == v15)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)a2, "F");
        }
        else
        {
          *v15 = 70;
          ++*v47;
        }
        result = sub_22EF5E234(v4, a2, *(_QWORD *)(v5 + 24));
        if (*(_BYTE *)(v5 + 16) == 26)
        {
          v16 = *(_QWORD *)(v5 + 16);
          if ((unsigned __int16)(v16 >> 38))
          {
            v17 = (unint64_t *)(v5 + 40);
            v18 = 8 * (unsigned __int16)(v16 >> 38);
            do
            {
              v19 = *v17++;
              v20 = sub_22EF69FD4(v4, v19);
              result = sub_22EF5E234(v4, a2, v20);
              v18 -= 8;
            }
            while (v18);
            v16 = *(_QWORD *)(v5 + 16);
          }
          if ((v16 & 0x800000000000000) != 0)
          {
            v21 = (_BYTE *)a2[4];
            if ((_BYTE *)a2[3] == v21)
            {
              result = llvm::raw_ostream::write((llvm::raw_ostream *)a2, "z");
            }
            else
            {
              *v21 = 122;
              ++*v47;
            }
          }
        }
        v22 = (char *)a2[4];
        if ((char *)a2[3] == v22)
        {
          v23 = "E";
          goto LABEL_65;
        }
        v42 = 69;
        goto LABEL_96;
      case 0x1F:
        v10 = (_BYTE *)a2[4];
        if ((_BYTE *)a2[3] == v10)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)a2, "M");
        }
        else
        {
          *v10 = 77;
          ++*v47;
        }
        if (*(_BYTE *)(v5 + 16) != 31)
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31)
            v5 = sub_22F10CF48(v5);
          else
            v5 = 0;
        }
        result = sub_22EF5E234(v4, a2, *(_QWORD *)(v5 + 40) & 0xFFFFFFFFFFFFFFF0);
        goto LABEL_31;
      case 0x21:
      case 0x22:
        v24 = (void *)a2[4];
        if ((unint64_t)(a2[3] - (_QWORD)v24) <= 0xC)
          return llvm::raw_ostream::write((llvm::raw_ostream *)a2, "<objc_object>");
        qmemcpy(v24, "<objc_object>", 13);
        v43 = v47;
        v44 = *v47 + 13;
        goto LABEL_97;
      case 0x28:
        v11 = (_BYTE *)a2[4];
        if ((_BYTE *)a2[3] == v11)
        {
          result = llvm::raw_ostream::write((llvm::raw_ostream *)a2, "R");
        }
        else
        {
          *v11 = 82;
          ++*v47;
        }
        if ((*(_BYTE *)(v5 + 18) & 0x10) != 0)
        {
          do
          {
            v5 = *(_QWORD *)(*(_QWORD *)(v5 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (v5)
            {
              v12 = *(_DWORD *)(v5 + 16);
              if ((v12 & 0xFE) == 0x28)
                continue;
            }
            result = sub_22F10CF48(v5);
            v5 = result;
            v12 = *(_DWORD *)(result + 16);
          }
          while ((v12 & 0x100000) != 0);
        }
        goto LABEL_31;
      case 0x29:
        v13 = (_BYTE *)a2[4];
        if ((_BYTE *)a2[3] == v13)
        {
          result = llvm::raw_ostream::write((llvm::raw_ostream *)a2, "O");
        }
        else
        {
          *v13 = 79;
          ++*v47;
        }
        if ((*(_BYTE *)(v5 + 18) & 0x10) != 0)
        {
          do
          {
            v5 = *(_QWORD *)(*(_QWORD *)(v5 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (v5)
            {
              v14 = *(_DWORD *)(v5 + 16);
              if ((v14 & 0xFE) == 0x28)
                continue;
            }
            result = sub_22F10CF48(v5);
            v5 = result;
            v14 = *(_DWORD *)(result + 16);
          }
          while ((v14 & 0x100000) != 0);
        }
LABEL_31:
        a3 = *(_QWORD *)(v5 + 32);
        continue;
      case 0x2C:
LABEL_59:
        v22 = (char *)a2[4];
        if ((char *)a2[3] == v22)
        {
          v23 = "i";
LABEL_65:
          v29 = (llvm::raw_ostream *)a2;
          return llvm::raw_ostream::write(v29, v23);
        }
        v42 = 105;
LABEL_96:
        *v22 = v42;
        v43 = v47;
        v44 = *v47 + 1;
        goto LABEL_97;
      case 0x2D:
        v26 = *(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0);
        v27 = *(unsigned __int8 *)(v26 + 16);
LABEL_69:
        if (v27 != 45)
          v26 = 0;
        result = sub_22F114198(*(_QWORD *)(v26 + 24));
        v30 = *(_QWORD *)(result + 40);
        v31 = v30 & 0xFFFFFFFFFFFFFFF8;
        v32 = (v30 & 7) != 0 || v31 == 0;
        if (v32
          && ((v33 = *(_QWORD *)(result + 120), (v33 & 4) != 0)
           || (v34 = v33 & 0xFFFFFFFFFFFFFFF8) == 0
           || ((v35 = *(_QWORD *)(v34 + 40), v31 = v35 & 0xFFFFFFFFFFFFFFF8, (v35 & 7) == 0)
             ? (v36 = v31 == 0)
             : (v36 = 1),
               v36)))
        {
          v37 = a2[4];
          if ((unint64_t)(a2[3] - v37) > 0x11)
          {
            *(_WORD *)(v37 + 16) = 15972;
            *(_OWORD *)v37 = *(_OWORD *)"<anonymous_record>";
            v43 = v47;
            v44 = *v47 + 18;
LABEL_97:
            *v43 = v44;
          }
          else
          {
            return llvm::raw_ostream::write((llvm::raw_ostream *)a2, "<anonymous_record>");
          }
        }
        else
        {
          v38 = llvm::raw_ostream::operator<<();
          v39 = *(_DWORD **)(v31 + 16);
          v41 = *v39;
          v23 = (const char *)(v39 + 4);
          v40 = v41;
          result = *(_QWORD *)(v38 + 32);
          if (v41 <= (unint64_t)(*(_QWORD *)(v38 + 24) - result))
          {
            if (v40)
            {
              result = (uint64_t)memcpy((void *)result, v23, v40);
              *(_QWORD *)(v38 + 32) += v40;
            }
          }
          else
          {
            v29 = (llvm::raw_ostream *)v38;
            return llvm::raw_ostream::write(v29, v23);
          }
        }
        return result;
      case 0x37:
      case 0x38:
        v25 = (_WORD *)a2[4];
        if ((unint64_t)(a2[3] - (_QWORD)v25) > 1)
        {
          *v25 = 30276;
          *v47 += 2;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)a2, "Dv");
        }
        sub_22EF5CCD0(v4, v5, (uint64_t)v48);
        return llvm::raw_ostream::operator<<();
      default:
        return result;
    }
  }
}

uint64_t sub_22EF5E978(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  unint64_t v6;
  _BYTE v8[72];
  char *__s;
  __int128 v10;
  _QWORD v11[33];

  v11[32] = *MEMORY[0x24BDAC8D0];
  v3 = sub_22F368DF4(a1, 0);
  __s = (char *)v11;
  v10 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v8, (uint64_t)&__s);
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v3 + 104))(v3, a2, v8);
  v4 = v10;
  if ((unint64_t)(v10 + 1) > *((_QWORD *)&v10 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v4 = v10;
  }
  __s[v4] = 0;
  if (__s)
    v5 = strlen(__s);
  else
    v5 = 0;
  v6 = sub_22F3F1554((unsigned __int8 *)__s, v5);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v8);
  if (__s != (char *)v11)
    free(__s);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return (unsigned __int16)(v6 + (((v6 * (unsigned __int128)0x8000800080008001) >> 64) >> 15) + 1);
}

unint64_t sub_22EF5EAB0(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v3;

  if ((*(_BYTE *)(a2 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a2);
  result = sub_22E5E0510(v3);
  if (result)
    return ((unint64_t)*(unsigned int *)(result + 36) << 32) | 1;
  return result;
}

uint64_t sub_22EF5EAF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  int v6;
  unint64_t v7;
  int v8;
  _BOOL4 v9;

  if (a2 == a3)
    return 1;
  v4 = sub_22EF5EAB0(a1, a2);
  v6 = v5;
  v7 = sub_22EF5EAB0(v4, a3);
  v9 = HIDWORD(v4) == HIDWORD(v7) && v6 == v8;
  return v4 == v7 && v9;
}

uint64_t sub_22EF5EB64(uint64_t a1, unint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int16 v27;
  BOOL v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 v34;
  BOOL v35;
  unsigned __int16 v36;
  _QWORD *v38;
  int v39;
  unint64_t v40;

  v40 = a2;
  if ((*(_QWORD *)(*(_QWORD *)(a1 + 2000) + 8) & 0x4000000000000000) != 0)
  {
    v4 = *(_QWORD *)(a1 + 1584);
    v5 = *(unsigned int *)(a1 + 1600);
    if ((_DWORD)v5)
    {
      LODWORD(v6) = (v5 - 1) & ((a2 >> 9) ^ a2);
      v7 = (uint64_t *)(v4 + 16 * v6);
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_10;
      v9 = 1;
      while (v8)
      {
        v10 = v6 + v9++;
        v6 = v10 & (v5 - 1);
        v8 = *(_QWORD *)(v4 + 16 * v6);
        if (v8 == a2)
        {
          v7 = (uint64_t *)(v4 + 16 * v6);
          goto LABEL_10;
        }
      }
    }
    v7 = (uint64_t *)(v4 + 16 * v5);
LABEL_10:
    if (v7 != (uint64_t *)(v4 + 16 * v5))
    {
      v2 = *((unsigned __int8 *)v7 + 8);
      goto LABEL_12;
    }
    v13 = a1 + 1584;
    v14 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v16 = *(_DWORD *)(v15 + 16);
    if (v16 > 0x26)
    {
      if (v16 == 44)
      {
        v17 = sub_22F114198(*(_QWORD *)(v15 + 24));
        if (((*(_BYTE *)(v17 + 74) & 1) != 0 || *(_QWORD *)(v17 + 128) >= 8uLL)
          && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v15 + 24)) + 76) & 0x80) == 0)
        {
          goto LABEL_44;
        }
      }
      else if (v16 == 39)
      {
LABEL_44:
        v29 = v14[1];
        if ((v29 & 8) != 0)
          v30 = *(_DWORD *)((v29 & 0xFFFFFFFFFFFFFFF0) + 0x1C);
        else
          v30 = 0;
        v28 = (v30 & 0xC) == 0;
        v39 = (v30 >> 5) & 1;
        if (v28)
          v2 = 0;
        else
          v2 = v39;
LABEL_65:
        v38 = sub_22F370708(v13, &v40);
        goto LABEL_66;
      }
    }
    else if (v16 == 11)
    {
      if (((*(_DWORD *)(v15 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
        goto LABEL_44;
    }
    else if (v16 == 9)
    {
      goto LABEL_44;
    }
    v18 = sub_22F10C2A4(*v14);
    if (!v18)
      goto LABEL_23;
    v31 = v18;
    if ((*(_DWORD *)(v18 + 28) & 0x7Eu) - 34 > 3)
      goto LABEL_23;
    if (sub_22EFC3500(v18) && (*(_BYTE *)(v31 + 28) & 0x80) == 0)
    {
      v32 = sub_22EFC3B90(v31);
      if (!v32)
      {
LABEL_23:
        v19 = sub_22F10C2A4(*v14);
        if (!v19 || (*(_DWORD *)(v19 + 28) & 0x7Fu) - 35 > 2 || (v22 = sub_22E46A3A0(v19), v22 == v23))
        {
LABEL_24:
          v20 = *v14;
          if (!*v14 || (*(_DWORD *)(v20 + 16) & 0xFEu) - 2 > 3)
          {
            v21 = sub_22F370708(a1 + 1584, &v40);
            v2 = 0;
            *((_BYTE *)v21 + 8) = 0;
            goto LABEL_12;
          }
          v2 = sub_22EF5EB64(a1, *(_QWORD *)(v20 + 32)) != 0;
          goto LABEL_65;
        }
        v24 = v22;
        v25 = v23;
        while (1)
        {
          v26 = *(_QWORD *)(**(_QWORD **)(v24 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v26 + 8) & 0xF) != 0)
            v26 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v24 + 16));
          v27 = sub_22EF5EB64(a1, v26 & 0xFFFFFFFFFFFFFFF0);
          v28 = v27 < 0x100u || v27 == 0;
          if (!v28)
            break;
          if (v27 < 0x100u)
            goto LABEL_60;
          v24 += 24;
          if (v24 == v25)
            goto LABEL_24;
        }
LABEL_59:
        v38 = sub_22F370708(a1 + 1584, &v40);
        v2 = 1;
LABEL_66:
        *((_BYTE *)v38 + 8) = v2;
        goto LABEL_12;
      }
      v33 = v32;
      v34 = sub_22EF5EB64(a1, *(_QWORD *)(v32 + 48));
      v35 = v34 < 0x100u;
      if (v34 >= 0x100u && (_BYTE)v34)
        goto LABEL_59;
LABEL_52:
      if (!v35)
      {
        while (1)
        {
          v33 = *(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!v33)
            goto LABEL_23;
          if ((*(_DWORD *)(v33 + 28) & 0x7Fu) - 49 <= 2)
          {
            v36 = sub_22EF5EB64(a1, *(_QWORD *)(v33 + 48));
            v35 = v36 < 0x100u;
            if (v36 < 0x100u || v36 == 0)
              goto LABEL_52;
            goto LABEL_59;
          }
        }
      }
    }
LABEL_60:
    v2 = 0;
    v11 = 0;
    return v2 | (v11 << 8);
  }
  v2 = 0;
LABEL_12:
  v11 = 1;
  return v2 | (v11 << 8);
}

uint64_t sub_22EF5EE9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _BOOL8 v15;
  char v17;
  size_t v18;
  int v19;
  void *v20;
  void **v21;
  uint64_t v22;
  void **p_s1;
  int v24;
  int v25;
  int v26;
  int v27;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  _QWORD *v33;
  int v34;
  void *__p[2];
  char v36;
  void *__s1;
  size_t __n;
  char v39;

  v5 = a2 & 0xFFFFFFFFFFFFFFF0;
  v6 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (!v6 || (v7 = *(_DWORD *)(v6 + 16), (v7 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_4;
    v30 = a2;
    v6 = sub_22F10CF48(v6);
    if (!v6)
    {
      a2 = v30;
      goto LABEL_4;
    }
    v7 = *(_DWORD *)(v6 + 16);
  }
  if ((v7 & 0x100000) != 0)
  {
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v6 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v6)
      {
        v32 = *(_DWORD *)(v6 + 16);
        if ((v32 & 0xFE) == 0x28)
          continue;
      }
      v6 = sub_22F10CF48(v6);
      v32 = *(_DWORD *)(v6 + 16);
    }
    while ((v32 & 0x100000) != 0);
  }
  a2 = *(_QWORD *)(v6 + 32);
  v5 = a2 & 0xFFFFFFFFFFFFFFF0;
LABEL_4:
  v8 = *(_QWORD *)v5;
  if ((*(_BYTE *)(*(_QWORD *)v5 + 8) & 0xF) != 0)
    v8 = (unint64_t)sub_22F10D2BC(a2);
  v9 = a3 & 0xFFFFFFFFFFFFFFF0;
  v10 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (!v10 || (v11 = *(_DWORD *)(v10 + 16), (v11 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_9;
    v31 = (_QWORD *)v8;
    v10 = sub_22F10CF48(v10);
    if (!v10)
    {
      v8 = (unint64_t)v31;
      v9 = a3 & 0xFFFFFFFFFFFFFFF0;
      goto LABEL_9;
    }
    v11 = *(_DWORD *)(v10 + 16);
    v8 = (unint64_t)v31;
  }
  if ((v11 & 0x100000) != 0)
  {
    do
    {
      v33 = (_QWORD *)v8;
      v10 = *(_QWORD *)(*(_QWORD *)(v10 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (!v10 || (v34 = *(_DWORD *)(v10 + 16), (v34 & 0xFE) != 0x28))
      {
        v10 = sub_22F10CF48(v10);
        v34 = *(_DWORD *)(v10 + 16);
      }
      v8 = (unint64_t)v33;
    }
    while ((v34 & 0x100000) != 0);
  }
  a3 = *(_QWORD *)(v10 + 32);
  v9 = a3 & 0xFFFFFFFFFFFFFFF0;
LABEL_9:
  v12 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)v9;
  if ((*(_BYTE *)(*(_QWORD *)v9 + 8) & 0xF) != 0)
    v13 = (unint64_t)sub_22F10D2BC(a3);
  v14 = v13 & 0xFFFFFFFFFFFFFFF0;
  if (*v12 == *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0))
    return 1;
  sub_22F368E18(a1, (uint64_t)v12, &__s1);
  sub_22F368E18(a1, v14, __p);
  v17 = v39;
  if (v39 >= 0)
    v18 = v39 & 0x7F;
  else
    v18 = __n;
  v19 = v36;
  v20 = (void *)(v36 & 0x7F);
  if (v36 < 0)
    v20 = __p[1];
  if ((void *)v18 == v20)
  {
    if (v36 >= 0)
      v21 = __p;
    else
      v21 = (void **)__p[0];
    if (v39 < 0)
    {
      v15 = memcmp(__s1, v21, __n) == 0;
    }
    else if ((v39 & 0x7F) != 0)
    {
      v22 = (v39 & 0x7F) - 1;
      p_s1 = &__s1;
      do
      {
        v25 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        v24 = v25;
        v27 = *(unsigned __int8 *)v21;
        v21 = (void **)((char *)v21 + 1);
        v26 = v27;
        v29 = v22-- != 0;
        v15 = v24 == v26;
      }
      while (v24 == v26 && v29);
    }
    else
    {
      v15 = 1;
    }
  }
  else
  {
    v15 = 0;
  }
  if (v19 < 0)
  {
    operator delete(__p[0]);
    v17 = v39;
  }
  if (v17 < 0)
    operator delete(__s1);
  return v15;
}

unint64_t sub_22EF5F130(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v2 = a2;
  v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (!v4 || *(_BYTE *)(v4 + 16) != 39)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
      return v2;
    v11 = a1;
    v4 = sub_22F10CF48(v4);
    v2 = a2;
    a1 = v11;
    if (!v4)
      return v2;
  }
  v7 = *(_QWORD *)(v4 + 32);
  v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v8 & 8) == 0 || ((*(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11) - 24) > 2)
    return v2;
  v9 = v4;
  v10 = sub_22EF5DEB0(a1, v7);
  return sub_22EF5B848(a1, v10, *(_DWORD *)(v9 + 40));
}

_QWORD *sub_22EF5F1F4(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  _QWORD *v4;
  unint64_t v6;
  __int128 v8[5];
  unsigned __int16 v9;

  v4 = (_QWORD *)a2;
  v9 = a3;
  if (*(_DWORD *)(a2 + 16) >> 19 != a3)
  {
    if (*(_DWORD *)(a2 + 16) == 25)
    {
      v6 = sub_22F369930(a1, *(_QWORD *)(a2 + 24), &v9);
    }
    else
    {
      sub_22E4913B4(a2, (uint64_t)v8);
      LOWORD(v8[0]) = a3;
      v6 = sub_22EF63D8C(a1, v4[3], v4 + 5, (unsigned __int16)(v4[2] >> 38), v8, 0);
    }
    return *(_QWORD **)(v6 & 0xFFFFFFFFFFFFFFF0);
  }
  return v4;
}

unint64_t sub_22EF5F294(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[5];
  __int128 v22[5];

  v5 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_DWORD *)(v5 + 16);
  if (v5 && v6 == 37)
  {
    v7 = sub_22EF5F294(a1, *(_QWORD *)(v5 + 32), a3);
    return sub_22EF5F41C(a1, v7);
  }
  else
  {
    if (v5)
      v9 = v6 == 28;
    else
      v9 = 0;
    if (v9)
    {
      v17 = sub_22EF5F294(a1, *(_QWORD *)(v5 + 24), a3);
      return sub_22F369C08(a1, v17, *(_QWORD *)(v5 + 32));
    }
    else
    {
      if (v5)
        v10 = v6 == 7;
      else
        v10 = 0;
      if (v10)
      {
        v18 = *(_DWORD *)(v5 + 16) >> 19;
        v19 = sub_22EF5F294(a1, *(_QWORD *)(v5 + 32), a3);
        v20 = sub_22EF5F294(a1, *(_QWORD *)(v5 + 40), a3);
        return sub_22F369798(a1, v18, v19, v20);
      }
      else
      {
        if (v5)
          v11 = v6 == 26;
        else
          v11 = 0;
        if (!v11)
          v5 = sub_22F10CF48(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
        v12 = *(_QWORD *)(v5 + 24);
        v13 = (unsigned __int16)(*(_QWORD *)(v5 + 16) >> 38);
        sub_22E4913B4(v5, (uint64_t)v21);
        v14 = *a3;
        v15 = a3[1];
        v22[0] = v21[0];
        v22[1] = v14;
        v16 = a3[2];
        v22[2] = v15;
        v22[3] = v16;
        v22[4] = v21[4];
        return sub_22EF63D8C(a1, v12, (uint64_t *)(v5 + 40), v13, v22, 0);
      }
    }
  }
}

unint64_t sub_22EF5F41C(uint64_t a1, unint64_t a2)
{
  uint64_t NodeOrInsertPos;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;

  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
    return (NodeOrInsertPos - 24) & 0xFFFFFFFFFFFFFFF0;
  v5 = a2;
  if (*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) != (*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0))
  {
    v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7;
    llvm::FoldingSetBase::FindNodeOrInsertPos();
  }
  v6 = sub_22E3CD3D4(a1 + 2032, 40, 4);
  v7 = v6;
  v8 = *(_DWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1F00;
  v9 = v6 & 0xFFFFFFFFFFFFFFF0;
  if (v5 >= 0x10)
    v10 = v5;
  else
    v10 = v6 & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)v6 = v6;
  *(_QWORD *)(v6 + 8) = v10;
  *(_DWORD *)(v6 + 16) = v8 | *(_DWORD *)(v6 + 16) & 0xFFF80000 | 0x25;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = a2;
  v11 = *(_DWORD *)(a1 + 16);
  if (v11 >= *(_DWORD *)(a1 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a1 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v11) = v7;
  ++*(_DWORD *)(a1 + 16);
  llvm::FoldingSetBase::InsertNode();
  return v9;
}

BOOL sub_22EF5F5D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  if ((*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7) == (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) | a3 & 7))
    return 1;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 2000) + 1) & 8) == 0)
    return 0;
  v12 = 0;
  v13 = 0u;
  v14 = 0u;
  v15 = 0;
  v5 = sub_22EF5F294(a1, a2, (__int128 *)&v12);
  v8 = 0;
  v9 = 0u;
  v10 = 0u;
  v11 = 0;
  v6 = sub_22EF5F294(a1, a3, (__int128 *)&v8);
  return (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8) | v5 & 7) == (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 8) | v6 & 7);
}

unint64_t sub_22EF5F6AC(uint64_t a1, uint64_t a2, __int128 *a3, int a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;

  result = sub_22EF5F294(a1, *(_QWORD *)(a2 + 48), a3);
  *(_QWORD *)(a2 + 48) = result;
  if (a4)
  {
    v9 = *(_QWORD *)(a2 + 56);
    v10 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF8);
    if ((v9 & 4) != 0)
      v10 = (uint64_t *)v10[4];
    if (v10)
    {
      if (*v10 != result)
        result = sub_22EF5F294(a1, *v10, a3);
      *v10 = result;
    }
  }
  return result;
}

uint64_t sub_22EF5F720(uint64_t result, uint64_t a2, char a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_DWORD *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12))
  {
    v13 = result;
    v8 = a2;
    v10 = a3;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v8;
    a3 = v10;
    result = v13;
    v3 = *(_DWORD *)(v13 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v3) = a2;
  v4 = *(_DWORD *)(result + 12);
  v5 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v5;
  if (v5 >= v4)
  {
    v14 = result;
    v9 = HIDWORD(a2);
    v11 = a3;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(a2) = v9;
    a3 = v11;
    result = v14;
    v5 = *(_DWORD *)(v14 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v5) = HIDWORD(a2);
  v6 = *(_DWORD *)(result + 12);
  v7 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v7;
  if (v7 >= v6)
  {
    v15 = result;
    v12 = a3;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a3 = v12;
    result = v15;
    v7 = *(_DWORD *)(v15 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v7) = a3 & 0x1F;
  ++*(_DWORD *)(result + 8);
  return result;
}

unint64_t sub_22EF5F824(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t i;
  uint64_t v7;
  int v9;

  v4 = sub_22EF5C728(a1, a2);
  v5 = sub_22EF5B848(a1, *(_QWORD *)(v4 + 32), 0) | ((unint64_t)*(unsigned int *)(v4 + 16) >> 19) & 7;
  for (i = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0); ; i = *(_QWORD *)(v7 + 40))
  {
    v7 = sub_22F10D774(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0));
    if (!v7)
      return v5;
    v9 = *(_DWORD *)(v7 + 16) >> 19;
    if ((v9 - 33) < 4)
      break;
  }
  return sub_22F369798(a1, v9, v5, v5);
}

unint64_t sub_22EF5F8C4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t NodeOrInsertPos;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  void *v25[2];
  _QWORD v26[18];

  v26[16] = *MEMORY[0x24BDAC8D0];
  v25[0] = v26;
  v25[1] = (void *)0x2000000000;
  sub_22E547B70((uint64_t)v25, a2, a3);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v7 = (NodeOrInsertPos - 24) & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_35;
  }
  v8 = a2 & 0xFFFFFFFFFFFFFFF0;
  v9 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 + 16);
    if ((v10 & 0xFE) == 0x28)
    {
      if ((v10 & 0x100000) != 0)
      {
        do
        {
LABEL_6:
          while (1)
          {
            v9 = *(_QWORD *)(*(_QWORD *)(v9 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v9)
              break;
            v11 = *(_DWORD *)(v9 + 16);
            if ((v11 & 0xFE) != 0x28)
              break;
            if ((v11 & 0x100000) == 0)
              goto LABEL_21;
          }
          v9 = sub_22F10CF48(v9);
        }
        while ((*(_DWORD *)(v9 + 16) & 0x100000) != 0);
      }
LABEL_21:
      v13 = *(_QWORD *)(v9 + 32);
      v12 = v13 & 0xFFFFFFFFFFFFFFF0;
      goto LABEL_22;
    }
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v9 = sub_22F10CF48(v9);
    if (!a3)
      goto LABEL_19;
  }
  else
  {
    v9 = 0;
    if (!a3)
    {
LABEL_19:
      if (!v9)
      {
        v12 = a2 & 0xFFFFFFFFFFFFFFF0;
        LOBYTE(v13) = a2;
        goto LABEL_22;
      }
      if ((*(_DWORD *)(v9 + 16) & 0x100000) != 0)
        goto LABEL_6;
      goto LABEL_21;
    }
  }
  if (v9)
    goto LABEL_19;
  v12 = a2 & 0xFFFFFFFFFFFFFFF0;
  LOBYTE(v13) = a2;
  if (*(_QWORD *)(*(_QWORD *)v8 + 8) != (*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF0))
  {
LABEL_22:
    v14 = sub_22EF5F8C4(a1, v13 & 7 | *(_QWORD *)(v12 + 8), 1);
    llvm::FoldingSetBase::FindNodeOrInsertPos();
    goto LABEL_23;
  }
  v14 = 0;
LABEL_23:
  v15 = sub_22E3CD3D4(a1 + 2032, 40, 4);
  v16 = v15;
  v17 = *(_DWORD *)(*(_QWORD *)v8 + 16) & 0x1F00;
  v7 = v15 & 0xFFFFFFFFFFFFFFF0;
  if (v14 >= 0x10)
    v18 = v14;
  else
    v18 = v15 & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)v15 = v15;
  *(_QWORD *)(v15 + 8) = v18;
  v19 = *(_DWORD *)(v15 + 16) & 0xFFF00000;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = a2;
  if (a3)
    v20 = 524328;
  else
    v20 = 40;
  v21 = v20 | v19 | v17;
  *(_DWORD *)(v15 + 16) = v21;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
    v22 = 0x100000;
  else
    v22 = 40;
  *(_DWORD *)(v15 + 16) = v22 | v21 & 0xFFEFFFFF;
  v23 = *(_DWORD *)(a1 + 16);
  if (v23 >= *(_DWORD *)(a1 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v23 = *(_DWORD *)(a1 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v23) = v16;
  ++*(_DWORD *)(a1 + 16);
  llvm::FoldingSetBase::InsertNode();
LABEL_35:
  if (v25[0] != v26)
    free(v25[0]);
  return v7;
}

unint64_t sub_22EF5FB8C(uint64_t a1, uint64_t a2)
{
  uint64_t NodeOrInsertPos;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  void *v22[2];
  _QWORD v23[17];

  v23[16] = *MEMORY[0x24BDAC8D0];
  v22[0] = v23;
  v22[1] = (void *)0x2000000000;
  sub_22E547B70((uint64_t)v22, a2, 0);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v5 = (NodeOrInsertPos - 24) & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_3;
  }
  v7 = a2 & 0xFFFFFFFFFFFFFFF0;
  v8 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 16);
    if ((v9 & 0xFE) == 0x28)
      goto LABEL_25;
  }
  v10 = *(_QWORD *)(v8 + 8);
  if ((*(_DWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
    goto LABEL_9;
  v8 = sub_22F10CF48(v8);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 16);
LABEL_25:
    if ((v9 & 0x100000) != 0)
    {
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v8 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v8)
        {
          v21 = *(_DWORD *)(v8 + 16);
          if ((v21 & 0xFE) == 0x28)
            continue;
        }
        v8 = sub_22F10CF48(v8);
        v21 = *(_DWORD *)(v8 + 16);
      }
      while ((v21 & 0x100000) != 0);
    }
    v20 = *(_QWORD *)(v8 + 32);
    v19 = v20 & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_21;
  }
  v8 = *(_QWORD *)v7;
  v10 = *(_QWORD *)(*(_QWORD *)v7 + 8);
LABEL_9:
  if (v10 != (v8 & 0xFFFFFFFFFFFFFFF0))
  {
    v19 = a2 & 0xFFFFFFFFFFFFFFF0;
    LOBYTE(v20) = a2;
LABEL_21:
    v11 = sub_22EF5FB8C(a1, v20 & 7 | *(_QWORD *)(v19 + 8));
    llvm::FoldingSetBase::FindNodeOrInsertPos();
    goto LABEL_11;
  }
  v11 = 0;
LABEL_11:
  v12 = sub_22E3CD3D4(a1 + 2032, 40, 4);
  v13 = v12;
  v14 = *(_DWORD *)(*(_QWORD *)v7 + 16) & 0x1F00;
  v5 = v12 & 0xFFFFFFFFFFFFFFF0;
  if (v11 >= 0x10)
    v15 = v11;
  else
    v15 = v12 & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)v12 = v12;
  *(_QWORD *)(v12 + 8) = v15;
  v16 = v14 | *(_DWORD *)(v12 + 16) & 0xFFF80000 | 0x29;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = a2;
  *(_DWORD *)(v12 + 16) = v16 & 0xFFF01F29;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
    v17 = 0x100000;
  else
    v17 = 40;
  *(_DWORD *)(v12 + 16) = v17 | v16 & 0xFFE7FFFF;
  v18 = *(_DWORD *)(a1 + 16);
  if (v18 >= *(_DWORD *)(a1 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v18 = *(_DWORD *)(a1 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v18) = v13;
  ++*(_DWORD *)(a1 + 16);
  llvm::FoldingSetBase::InsertNode();
LABEL_3:
  if (v22[0] != v23)
    free(v22[0]);
  return v5;
}

unint64_t sub_22EF5FE30(uint64_t a1, uint64_t a2, const llvm::APInt *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 *v10;
  uint64_t NodeOrInsertPos;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  llvm::APInt *v24;
  unsigned int v25;
  unsigned int v26;
  void *v28;
  unsigned int v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[17];

  v33[16] = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    if ((a4[1] & 0x40) != 0)
      v10 = a4;
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  v29 = *((_DWORD *)a3 + 2);
  if (v29 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v28, a3);
  else
    v28 = *(void **)a3;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 15088) + 32))(*(_QWORD *)(a1 + 15088));
  llvm::APInt::zextOrTrunc((llvm::APInt *)&v28);
  if (v29 >= 0x41 && v28)
    MEMORY[0x2348A0E84](v28, 0x1000C8000313F17);
  v28 = v31;
  v29 = v32;
  v31 = v33;
  v32 = 0x2000000000;
  sub_22F10B35C((uint64_t)&v31, a1, a2, (uint64_t)&v28, v10, a5, a6);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v12 = NodeOrInsertPos - 24;
  }
  else
  {
    if (*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) == (*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0)
      && (a2 & 0xF) == 0
      && v10 == 0)
    {
      v22 = 0;
    }
    else
    {
      v15 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
      v16 = v15 | a2 & 7;
      if ((v15 & 8) != 0)
      {
        v18 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFF0);
        v19 = v16 & 7;
        v16 = *v18;
        v17 = v18[3] | v19;
      }
      else
      {
        v17 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 7 | a2 & 7;
      }
      v20 = sub_22EF5FE30(a1, v16 & 0xFFFFFFFFFFFFFFF0, &v28, 0, a5, a6);
      if ((v17 & 0xCFFFFFFF8) != 0)
      {
        v30 = v17;
        v21 = sub_22E491354((unsigned int *)&v30, v20);
        v22 = sub_22EF5DBC4(a1, v21, v30);
      }
      else
      {
        v22 = v17 & 7 | v20;
      }
      llvm::FoldingSetBase::FindNodeOrInsertPos();
    }
    if (v10)
      v23 = 64;
    else
      v23 = 56;
    v12 = sub_22E3CD3D4(a1 + 2032, v23, 4);
    v24 = (llvm::APInt *)(sub_22F10B060(v12, 2, a2, v22, a5, a6, v10) + 40);
    v25 = v29;
    *(_DWORD *)(v12 + 48) = v29;
    if (v25 > 0x40)
      llvm::APInt::initSlowCase(v24, (const llvm::APInt *)&v28);
    else
      *(_QWORD *)v24 = v28;
    *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 + 16) & 0xFDFFFFFF | ((v10 != 0) << 25);
    if (v10)
      *(_QWORD *)(v12 + 56) = v10;
    llvm::FoldingSetBase::InsertNode();
    v26 = *(_DWORD *)(a1 + 16);
    if (v26 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v26 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v26) = v12;
    ++*(_DWORD *)(a1 + 16);
  }
  if (v31 != v33)
    free(v31);
  if (v29 >= 0x41 && v28)
    MEMORY[0x2348A0E84](v28, 0x1000C8000313F17);
  return v12 & 0xFFFFFFFFFFFFFFF0;
}

uint64_t sub_22EF60188(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v2 = a2;
  if ((*(_BYTE *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 17) & 8) != 0)
  {
    v4 = sub_22F10D058(a2);
    v5 = v4;
    v7 = v6;
    v8 = 0;
    v9 = *(_DWORD *)(v4 + 16);
    switch((char)v9)
    {
      case 25:
      case 26:
      case 31:
      case 38:
        return v2;
      case 27:
      case 28:
      case 29:
      case 30:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
        goto LABEL_28;
      case 39:
        v10 = sub_22EF60188(a1, *(_QWORD *)(v4 + 32));
        v11 = sub_22EF5B848(a1, v10, 0);
        goto LABEL_27;
      case 40:
        if ((v9 & 0x100000) == 0)
          goto LABEL_13;
        do
        {
          while (1)
          {
            v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v4)
              break;
            v15 = *(_DWORD *)(v4 + 16);
            if ((v15 & 0xFE) != 0x28)
              break;
            if ((v15 & 0x100000) == 0)
              goto LABEL_13;
          }
          v4 = sub_22F10CF48(v4);
        }
        while ((*(_DWORD *)(v4 + 16) & 0x100000) != 0);
LABEL_13:
        v16 = sub_22EF60188(a1, *(_QWORD *)(v4 + 32));
        v11 = sub_22EF5F8C4(a1, v16, (*(_DWORD *)(v5 + 16) >> 19) & 1);
        goto LABEL_27;
      case 41:
        if ((v9 & 0x100000) == 0)
          goto LABEL_20;
        break;
      default:
        switch(*(_DWORD *)(v4 + 16))
        {
          case 2u:
            v12 = sub_22EF60188(a1, *(_QWORD *)(v4 + 32));
            v13 = *(_DWORD *)(v5 + 16);
            if ((v13 & 0x2000000) != 0)
              v14 = *(unsigned __int8 **)(v5 + 56);
            else
              v14 = 0;
            v11 = sub_22EF5FE30(a1, v12, (const llvm::APInt *)(v5 + 40), v14, (v13 >> 22) & 7, (v13 >> 19) & 7);
            goto LABEL_27;
          case 3u:
            v19 = sub_22EF60188(a1, *(_QWORD *)(v4 + 32));
            v11 = sub_22EF6042C(a1, v19, *(unsigned __int8 **)(v5 + 48), (*(_DWORD *)(v5 + 16) >> 22) & 7, (*(_DWORD *)(v5 + 16) >> 19) & 7, *(_QWORD *)(v5 + 56));
            goto LABEL_27;
          case 4u:
            v20 = sub_22EF60188(a1, *(_QWORD *)(v4 + 32));
            v21 = (*(_DWORD *)(v5 + 16) >> 19) & 7;
            v22 = a1;
            v23 = 0;
            v24 = 0;
            goto LABEL_24;
          case 5u:
            v20 = sub_22EF60188(a1, *(_QWORD *)(v4 + 32));
            v21 = (*(_DWORD *)(v5 + 16) >> 19) & 7;
            v24 = *(_QWORD *)(v5 + 48);
            v22 = a1;
            v23 = 2;
LABEL_24:
            v11 = sub_22EF60740(v22, v20, 0, v23, v21, v24);
            goto LABEL_27;
          case 6u:
            v27 = sub_22EF60188(a1, *(_QWORD *)(v4 + 32));
            v11 = sub_22F36A8C0(a1, v27);
            goto LABEL_27;
          case 0xAu:
            return v2;
          default:
            goto LABEL_28;
        }
    }
    do
    {
      while (1)
      {
        v5 = *(_QWORD *)(*(_QWORD *)(v5 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v5)
          break;
        v17 = *(_DWORD *)(v5 + 16);
        if ((v17 & 0xFE) != 0x28)
          break;
        if ((v17 & 0x100000) == 0)
          goto LABEL_20;
      }
      v5 = sub_22F10CF48(v5);
    }
    while ((*(_DWORD *)(v5 + 16) & 0x100000) != 0);
LABEL_20:
    v18 = sub_22EF60188(a1, *(_QWORD *)(v5 + 32));
    v11 = sub_22EF5FB8C(a1, v18);
LABEL_27:
    v8 = v11;
LABEL_28:
    if ((v7 & 0xCFFFFFFF8) != 0)
    {
      v28 = v7;
      v25 = sub_22E491354((unsigned int *)&v28, v8);
      return sub_22EF5DBC4(a1, v25, v28);
    }
    else
    {
      return v8 | v7 & 7;
    }
  }
  return v2;
}

unint64_t sub_22EF6042C(uint64_t a1, uint64_t a2, unsigned __int8 *a3, char a4, char a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t NodeOrInsertPos;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  _QWORD *v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned int v30;
  uint64_t v32;
  void *v33[2];
  _QWORD v34[18];

  v34[16] = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v11 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
    v12 = v11 | a2 & 7;
    if ((v11 & 8) != 0)
    {
      v26 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFF0);
      v27 = v12 & 7;
      v12 = *v26;
      v13 = v26[3] | v27;
    }
    else
    {
      v13 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 7 | a2 & 7;
    }
    v14 = v12 & 0xFFFFFFFFFFFFFFF0;
    v33[0] = v34;
    v33[1] = (void *)0x2000000000;
    sub_22F10B5A4((uint64_t)v33, a1, v12 & 0xFFFFFFFFFFFFFFF0, a4, a5, a3);
    NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
    if (NodeOrInsertPos)
    {
      v16 = NodeOrInsertPos - 24;
    }
    else
    {
      v16 = sub_22E3CD3D4(a1 + 2032, 64, 4);
      v24 = (_QWORD *)sub_22F10B060(v16, 3, v14, 0, a4, a5, a3);
      v24[5] = a1;
      v24[6] = a3;
      v24[7] = a6;
      llvm::FoldingSetBase::InsertNode();
      v25 = *(_DWORD *)(a1 + 16);
      if (v25 >= *(_DWORD *)(a1 + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v25 = *(_DWORD *)(a1 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v25) = v16;
      ++*(_DWORD *)(a1 + 16);
    }
    v17 = v16 & 0xFFFFFFFFFFFFFFF0;
    if ((v13 & 0xCFFFFFFF8) != 0)
    {
      v32 = v13;
      v18 = sub_22E491354((unsigned int *)&v32, v17);
      v19 = sub_22EF5DBC4(a1, v18, v32);
    }
    else
    {
      v19 = v17 | v13 & 7;
    }
    if (v14 != a2 || *(unsigned __int8 **)(v16 + 48) != a3)
    {
      v20 = sub_22E3CD3D4(a1 + 2032, 64, 4);
      v21 = (_QWORD *)sub_22F10B060(v20, 3, a2, v19, a4, a5, a3);
      v21[5] = a1;
      v21[6] = a3;
      v21[7] = a6;
      v22 = *(_DWORD *)(a1 + 16);
      if (v22 >= *(_DWORD *)(a1 + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v22 = *(_DWORD *)(a1 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v22) = v20;
      ++*(_DWORD *)(a1 + 16);
      v19 = v20 & 0xFFFFFFFFFFFFFFF0;
    }
    if (v33[0] != v34)
      free(v33[0]);
  }
  else
  {
    v28 = sub_22E3CD3D4(a1 + 2032, 64, 4);
    v29 = (_QWORD *)sub_22F10B060(v28, 3, a2, 0, a4, a5, 0);
    v29[5] = a1;
    v29[6] = 0;
    v29[7] = a6;
    v30 = *(_DWORD *)(a1 + 16);
    if (v30 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v30 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v30) = v28;
    ++*(_DWORD *)(a1 + 16);
    return v28 & 0xFFFFFFFFFFFFFFF0;
  }
  return v19;
}

unint64_t sub_22EF60740(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v7;
  char v8;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v35;

  v7 = a5;
  v8 = a4;
  if ((a2 & 0xF) != 0
    || *(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) != (*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0))
  {
    v13 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
    v14 = v13 | a2 & 7;
    if ((v13 & 8) != 0)
    {
      v16 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
      v17 = v14 & 7;
      v14 = *v16;
      v15 = v16[3] | v17;
    }
    else
    {
      v15 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 7 | a2 & 7;
    }
    v18 = sub_22EF60740(a1, v14 & 0xFFFFFFFFFFFFFFF0, a3, a4, a5, a6);
    if ((v15 & 0xCFFFFFFF8) != 0)
    {
      v35 = v15;
      v19 = sub_22E491354((unsigned int *)&v35, v18);
      v12 = sub_22EF5DBC4(a1, v19, v35);
    }
    else
    {
      v12 = v15 & 7 | v18;
    }
  }
  else
  {
    v12 = 0;
  }
  v20 = sub_22E3CD3D4(a1 + 2032, 56, 4);
  v21 = sub_22F10B060(v20, 5, a2, v12, v8, v7, a3);
  *(_QWORD *)(v21 + 40) = a3;
  *(_QWORD *)(v21 + 48) = a6;
  v23 = *(uint64_t **)(a1 + 200);
  v22 = *(_QWORD *)(a1 + 208);
  if ((unint64_t)v23 >= v22)
  {
    v25 = *(_QWORD **)(a1 + 192);
    v26 = v23 - v25;
    v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 61)
      abort();
    v28 = v22 - (_QWORD)v25;
    if (v28 >> 2 > v27)
      v27 = v28 >> 2;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
      v29 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v29 = v27;
    if (v29)
    {
      if (v29 >> 61)
        sub_22E3B3F8C();
      v30 = (char *)operator new(8 * v29);
    }
    else
    {
      v30 = 0;
    }
    v31 = (uint64_t *)&v30[8 * v26];
    *v31 = v20;
    v24 = v31 + 1;
    if (v23 != v25)
    {
      do
      {
        v32 = *--v23;
        *--v31 = v32;
      }
      while (v23 != v25);
      v23 = *(uint64_t **)(a1 + 192);
    }
    *(_QWORD *)(a1 + 192) = v31;
    *(_QWORD *)(a1 + 200) = v24;
    *(_QWORD *)(a1 + 208) = &v30[8 * v29];
    if (v23)
      operator delete(v23);
  }
  else
  {
    *v23 = v20;
    v24 = v23 + 1;
  }
  *(_QWORD *)(a1 + 200) = v24;
  v33 = *(_DWORD *)(a1 + 16);
  if (v33 >= *(_DWORD *)(a1 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v33 = *(_DWORD *)(a1 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v33) = v20;
  ++*(_DWORD *)(a1 + 16);
  return v20 & 0xFFFFFFFFFFFFFFF0;
}

unint64_t sub_22EF6096C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v10;
  char v11;
  unint64_t v14;
  uint64_t v18;
  unsigned int v19;

  v10 = a4;
  v11 = a3;
  v14 = sub_22F36AA84(a1, a2, a3, a4);
  if (*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) != (*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0)
    || (a2 & 0xF) != 0
    || a5 != 0)
  {
    v18 = sub_22E3CD3D4(a1 + 2032, 8 * a7 + 56, 4);
    sub_22F40A6A0(v18, a2, v14, v11, v10, a5, a6, a7);
    v19 = *(_DWORD *)(a1 + 16);
    if (v19 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v19 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v19) = v18;
    ++*(_DWORD *)(a1 + 16);
    return v18 & 0xFFFFFFFFFFFFFFF0;
  }
  return v14;
}

unint64_t sub_22EF60A6C(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  int v6;
  unint64_t result;
  uint64_t v8;

  v4 = a2;
  v6 = (*(uint64_t (**)(_QWORD, uint64_t, BOOL))(**(_QWORD **)(a1 + 15088) + 16))(*(_QWORD *)(a1 + 15088), a2, a3 != 0);
  if (v6 != 8)
    __asm { BR              X9 }
  result = *(_QWORD *)(a1 + 16536);
  if (v4 == 128 && result <= 0xF)
  {
    v8 = 16552;
    if (a3)
      v8 = 16504;
    return *(_QWORD *)(a1 + v8);
  }
  return result;
}

void sub_22EF60B04()
{
  JUMPOUT(0x22EF60AACLL);
}

void sub_22EF60B0C()
{
  JUMPOUT(0x22EF60AACLL);
}

void sub_22EF60B14()
{
  JUMPOUT(0x22EF60AACLL);
}

void sub_22EF60B1C()
{
  JUMPOUT(0x22EF60AACLL);
}

void sub_22EF60B24()
{
  JUMPOUT(0x22EF60AACLL);
}

void sub_22EF60B2C()
{
  JUMPOUT(0x22EF60AACLL);
}

void sub_22EF60B34()
{
  JUMPOUT(0x22EF60AACLL);
}

void sub_22EF60B40()
{
  JUMPOUT(0x22EF60AACLL);
}

void sub_22EF60B48()
{
  JUMPOUT(0x22EF60AACLL);
}

uint64_t sub_22EF60B50(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _BOOL4 v134;
  _BOOL4 v135;
  uint64_t v136;
  uint64_t v137;
  _BOOL4 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _BOOL4 v155;
  _BOOL4 v156;
  _BOOL4 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  int v166;
  _BOOL4 v167;
  _BOOL4 v168;
  _BOOL4 v169;
  _BOOL4 v170;
  _BOOL4 v171;
  _BOOL4 v172;
  _BOOL4 v173;
  _BOOL4 v174;
  _BOOL4 v175;

  v5 = *(_DWORD *)(*(_QWORD *)(a1 + 15088) + 288);
  if ((v5 & 0x80) != 0)
  {
    v7 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
    v8 = sub_22EF5CDF0(a1, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
    v9 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v9)
      v10 = (*(_DWORD *)(v9 + 16) & 0xFF800FF) == 87031819;
    else
      v10 = 0;
    if (!v10 && sub_22F1105F0(*v7) && sub_22F110B20(*v7) && a3 == 16 && v8 == 8)
    {
      v11 = 17632;
      return *(_QWORD *)(a1 + v11);
    }
    v12 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v12)
      v13 = (*(_DWORD *)(v12 + 16) & 0xFF800FF) == 87031819;
    else
      v13 = 0;
    if (!v13 && sub_22F1105F0(*v7) && sub_22F110B20(*v7) && a3 == 8 && v8 == 16)
    {
      v11 = 17640;
      return *(_QWORD *)(a1 + v11);
    }
    v14 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v14)
      v15 = (*(_DWORD *)(v14 + 16) & 0xFF800FF) == 87031819;
    else
      v15 = 0;
    if (!v15 && sub_22F1105F0(*v7) && sub_22F110B20(*v7) && a3 == 4 && v8 == 32)
    {
      v11 = 17648;
      return *(_QWORD *)(a1 + v11);
    }
    v16 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v16)
      v17 = (*(_DWORD *)(v16 + 16) & 0xFF800FF) == 87031819;
    else
      v17 = 0;
    if (!v17 && sub_22F1105F0(*v7) && sub_22F110B20(*v7) && a3 == 2 && v8 == 64)
    {
      v11 = 17656;
      return *(_QWORD *)(a1 + v11);
    }
    v18 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v18)
      v19 = (*(_DWORD *)(v18 + 16) & 0xFF800FF) == 87031819;
    else
      v19 = 0;
    if (!v19 && sub_22F1105F0(*v7) && !sub_22F110B20(*v7) && a3 == 16 && v8 == 8)
    {
      v11 = 17664;
      return *(_QWORD *)(a1 + v11);
    }
    v20 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v20)
      v21 = (*(_DWORD *)(v20 + 16) & 0xFF800FF) == 87031819;
    else
      v21 = 0;
    if (!v21 && sub_22F1105F0(*v7) && !sub_22F110B20(*v7) && a3 == 8 && v8 == 16)
    {
      v11 = 17672;
      return *(_QWORD *)(a1 + v11);
    }
    v22 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((!v22 || (*(_DWORD *)(v22 + 16) & 0xFF800FF) != 0x530000B)
      && sub_22F1105F0(*v7)
      && !sub_22F110B20(*v7)
      && a3 == 4
      && v8 == 32)
    {
      v11 = 17680;
      return *(_QWORD *)(a1 + v11);
    }
    v23 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((!v23 || (*(_DWORD *)(v23 + 16) & 0xFF800FF) != 0x530000B)
      && sub_22F1105F0(*v7)
      && !sub_22F110B20(*v7)
      && a3 == 2
      && v8 == 64)
    {
      v11 = 17688;
      return *(_QWORD *)(a1 + v11);
    }
    v24 = *v7;
    v25 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v25 || (*(_DWORD *)(v25 + 16) & 0xFF800FF) != 0x530000B)
    {
      if (sub_22F1105F0(*v7) && sub_22F110B20(*v7)
        || (v24 = *v7, sub_22F110DD0(*v7))
        && ((v26 = *(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0)) == 0
         || (*(_DWORD *)(v26 + 16) & 0xFF800FF) != 0x6B8000B))
      {
        if (a3 == 8 && v8 == 16)
        {
          v11 = 17696;
          return *(_QWORD *)(a1 + v11);
        }
        v24 = *v7;
      }
    }
    v67 = *(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v67 || (*(_DWORD *)(v67 + 16) & 0xFF800FF) != 0x530000B)
    {
      if (sub_22F1105F0(v24) && sub_22F110B20(*v7)
        || (v24 = *v7, sub_22F110DD0(*v7))
        && ((v68 = *(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0)) == 0
         || (*(_DWORD *)(v68 + 16) & 0xFF800FF) != 0x6B8000B))
      {
        if (a3 == 4 && v8 == 32)
        {
          v11 = 17704;
          return *(_QWORD *)(a1 + v11);
        }
        v24 = *v7;
      }
    }
    v74 = *(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v74 || (*(_DWORD *)(v74 + 16) & 0xFF800FF) != 0x530000B)
    {
      if (sub_22F1105F0(v24) && sub_22F110B20(*v7)
        || (v24 = *v7, sub_22F110DD0(*v7))
        && ((v75 = *(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0)) == 0
         || (*(_DWORD *)(v75 + 16) & 0xFF800FF) != 0x6B8000B))
      {
        if (a3 == 2 && v8 == 64)
        {
          v11 = 17712;
          return *(_QWORD *)(a1 + v11);
        }
        v24 = *v7;
      }
    }
    v76 = *(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v76 || (*(_DWORD *)(v76 + 16) & 0xFF800FF) != 0x530000B)
    {
      if (sub_22F1105F0(v24) && sub_22F110B20(*v7))
      {
        if (a3 != 8 || v8 != 16)
        {
          v24 = *v7;
          goto LABEL_372;
        }
      }
      else
      {
        v24 = *v7;
        if (!sub_22F110DD0(*v7))
          goto LABEL_372;
        v77 = *(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0);
        if (!v77)
          goto LABEL_372;
        v78 = *(_DWORD *)(v77 + 16);
        if (v78 != 11 || a3 != 8 || (v78 & 0xFF80000) != 0x6B80000 || v8 != 16)
          goto LABEL_372;
      }
      v11 = 17720;
      return *(_QWORD *)(a1 + v11);
    }
LABEL_372:
    v79 = *(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((!v79 || (*(_DWORD *)(v79 + 16) & 0xFF800FF) != 0x530000B)
      && sub_22F1105F0(v24)
      && sub_22F110B20(*v7)
      && a3 == 32
      && v8 == 8)
    {
      v11 = 17728;
      return *(_QWORD *)(a1 + v11);
    }
    v80 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((!v80 || (*(_DWORD *)(v80 + 16) & 0xFF800FF) != 0x530000B)
      && sub_22F1105F0(*v7)
      && sub_22F110B20(*v7)
      && a3 == 16
      && v8 == 16)
    {
      v11 = 17736;
      return *(_QWORD *)(a1 + v11);
    }
    v81 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((!v81 || (*(_DWORD *)(v81 + 16) & 0xFF800FF) != 0x530000B)
      && sub_22F1105F0(*v7)
      && sub_22F110B20(*v7)
      && a3 == 8
      && v8 == 32)
    {
      v11 = 17744;
      return *(_QWORD *)(a1 + v11);
    }
    v82 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((!v82 || (*(_DWORD *)(v82 + 16) & 0xFF800FF) != 0x530000B)
      && sub_22F1105F0(*v7)
      && sub_22F110B20(*v7)
      && a3 == 4
      && v8 == 64)
    {
      v11 = 17752;
      return *(_QWORD *)(a1 + v11);
    }
    v83 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((!v83 || (*(_DWORD *)(v83 + 16) & 0xFF800FF) != 0x530000B)
      && sub_22F1105F0(*v7)
      && !sub_22F110B20(*v7)
      && a3 == 32
      && v8 == 8)
    {
      v11 = 17760;
      return *(_QWORD *)(a1 + v11);
    }
    v84 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((!v84 || (*(_DWORD *)(v84 + 16) & 0xFF800FF) != 0x530000B)
      && sub_22F1105F0(*v7)
      && !sub_22F110B20(*v7)
      && a3 == 16
      && v8 == 16)
    {
      v11 = 17768;
      return *(_QWORD *)(a1 + v11);
    }
    v85 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((!v85 || (*(_DWORD *)(v85 + 16) & 0xFF800FF) != 0x530000B)
      && sub_22F1105F0(*v7)
      && !sub_22F110B20(*v7)
      && a3 == 8
      && v8 == 32)
    {
      v11 = 17776;
      return *(_QWORD *)(a1 + v11);
    }
    v86 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((!v86 || (*(_DWORD *)(v86 + 16) & 0xFF800FF) != 0x530000B)
      && sub_22F1105F0(*v7)
      && !sub_22F110B20(*v7)
      && a3 == 4
      && v8 == 64)
    {
      v11 = 17784;
      return *(_QWORD *)(a1 + v11);
    }
    v87 = *v7;
    v88 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v88 || (*(_DWORD *)(v88 + 16) & 0xFF800FF) != 0x530000B)
    {
      if (sub_22F1105F0(*v7) && sub_22F110B20(*v7)
        || (v87 = *v7, sub_22F110DD0(*v7))
        && ((v89 = *(_QWORD *)(*(_QWORD *)(v87 + 8) & 0xFFFFFFFFFFFFFFF0)) == 0
         || (*(_DWORD *)(v89 + 16) & 0xFF800FF) != 0x6B8000B))
      {
        if (a3 == 16 && v8 == 16)
        {
          v11 = 17792;
          return *(_QWORD *)(a1 + v11);
        }
        v87 = *v7;
      }
    }
    v116 = *(_QWORD *)(*(_QWORD *)(v87 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v116 || (*(_DWORD *)(v116 + 16) & 0xFF800FF) != 0x530000B)
    {
      if (sub_22F1105F0(v87) && sub_22F110B20(*v7)
        || (v87 = *v7, sub_22F110DD0(*v7))
        && ((v117 = *(_QWORD *)(*(_QWORD *)(v87 + 8) & 0xFFFFFFFFFFFFFFF0)) == 0
         || (*(_DWORD *)(v117 + 16) & 0xFF800FF) != 0x6B8000B))
      {
        if (a3 == 8 && v8 == 32)
        {
          v11 = 17800;
          return *(_QWORD *)(a1 + v11);
        }
        v87 = *v7;
      }
    }
    v118 = *(_QWORD *)(*(_QWORD *)(v87 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v118 || (*(_DWORD *)(v118 + 16) & 0xFF800FF) != 0x530000B)
    {
      if (sub_22F1105F0(v87) && sub_22F110B20(*v7)
        || (v87 = *v7, sub_22F110DD0(*v7))
        && ((v119 = *(_QWORD *)(*(_QWORD *)(v87 + 8) & 0xFFFFFFFFFFFFFFF0)) == 0
         || (*(_DWORD *)(v119 + 16) & 0xFF800FF) != 0x6B8000B))
      {
        if (a3 == 4 && v8 == 64)
        {
          v11 = 17808;
          return *(_QWORD *)(a1 + v11);
        }
        v87 = *v7;
      }
    }
    v120 = *(_QWORD *)(*(_QWORD *)(v87 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v120 || (*(_DWORD *)(v120 + 16) & 0xFF800FF) != 0x530000B)
    {
      if (sub_22F1105F0(v87) && sub_22F110B20(*v7))
      {
        if (a3 != 16 || v8 != 16)
        {
          v87 = *v7;
          goto LABEL_562;
        }
      }
      else
      {
        v87 = *v7;
        if (!sub_22F110DD0(*v7))
          goto LABEL_562;
        v121 = *(_QWORD *)(*(_QWORD *)(v87 + 8) & 0xFFFFFFFFFFFFFFF0);
        if (!v121)
          goto LABEL_562;
        v122 = *(_DWORD *)(v121 + 16);
        if (v122 != 11 || a3 != 16 || (v122 & 0xFF80000) != 0x6B80000 || v8 != 16)
          goto LABEL_562;
      }
      v11 = 17816;
      return *(_QWORD *)(a1 + v11);
    }
LABEL_562:
    v123 = *(_QWORD *)(*(_QWORD *)(v87 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((!v123 || (*(_DWORD *)(v123 + 16) & 0xFF800FF) != 0x530000B)
      && sub_22F1105F0(v87)
      && sub_22F110B20(*v7)
      && a3 == 48
      && v8 == 8)
    {
      v11 = 17824;
      return *(_QWORD *)(a1 + v11);
    }
    v124 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((!v124 || (*(_DWORD *)(v124 + 16) & 0xFF800FF) != 0x530000B)
      && sub_22F1105F0(*v7)
      && sub_22F110B20(*v7)
      && a3 == 24
      && v8 == 16)
    {
      v11 = 17832;
      return *(_QWORD *)(a1 + v11);
    }
    v125 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((!v125 || (*(_DWORD *)(v125 + 16) & 0xFF800FF) != 0x530000B)
      && sub_22F1105F0(*v7)
      && sub_22F110B20(*v7)
      && a3 == 12
      && v8 == 32)
    {
      v11 = 17840;
      return *(_QWORD *)(a1 + v11);
    }
    v126 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((!v126 || (*(_DWORD *)(v126 + 16) & 0xFF800FF) != 0x530000B)
      && sub_22F1105F0(*v7)
      && sub_22F110B20(*v7)
      && a3 == 6
      && v8 == 64)
    {
      v11 = 17848;
      return *(_QWORD *)(a1 + v11);
    }
    v127 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((!v127 || (*(_DWORD *)(v127 + 16) & 0xFF800FF) != 0x530000B)
      && sub_22F1105F0(*v7)
      && !sub_22F110B20(*v7)
      && a3 == 48
      && v8 == 8)
    {
      v11 = 17856;
      return *(_QWORD *)(a1 + v11);
    }
    v128 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((!v128 || (*(_DWORD *)(v128 + 16) & 0xFF800FF) != 0x530000B)
      && sub_22F1105F0(*v7)
      && !sub_22F110B20(*v7)
      && a3 == 24
      && v8 == 16)
    {
      v11 = 17864;
      return *(_QWORD *)(a1 + v11);
    }
    v129 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((!v129 || (*(_DWORD *)(v129 + 16) & 0xFF800FF) != 0x530000B)
      && sub_22F1105F0(*v7)
      && !sub_22F110B20(*v7)
      && a3 == 12
      && v8 == 32)
    {
      v11 = 17872;
      return *(_QWORD *)(a1 + v11);
    }
    v130 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((!v130 || (*(_DWORD *)(v130 + 16) & 0xFF800FF) != 0x530000B)
      && sub_22F1105F0(*v7)
      && !sub_22F110B20(*v7)
      && a3 == 6
      && v8 == 64)
    {
      v11 = 17880;
      return *(_QWORD *)(a1 + v11);
    }
    v131 = *v7;
    v132 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v132 || (*(_DWORD *)(v132 + 16) & 0xFF800FF) != 0x530000B)
    {
      if (sub_22F1105F0(*v7) && sub_22F110B20(*v7)
        || (v131 = *v7, sub_22F110DD0(*v7))
        && ((v133 = *(_QWORD *)(*(_QWORD *)(v131 + 8) & 0xFFFFFFFFFFFFFFF0)) == 0
         || (*(_DWORD *)(v133 + 16) & 0xFF800FF) != 0x6B8000B))
      {
        if (a3 == 24 && v8 == 16)
        {
          v11 = 17888;
          return *(_QWORD *)(a1 + v11);
        }
        v131 = *v7;
      }
    }
    v136 = *(_QWORD *)(*(_QWORD *)(v131 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v136 || (*(_DWORD *)(v136 + 16) & 0xFF800FF) != 0x530000B)
    {
      if (sub_22F1105F0(v131) && sub_22F110B20(*v7)
        || (v131 = *v7, sub_22F110DD0(*v7))
        && ((v137 = *(_QWORD *)(*(_QWORD *)(v131 + 8) & 0xFFFFFFFFFFFFFFF0)) == 0
         || (*(_DWORD *)(v137 + 16) & 0xFF800FF) != 0x6B8000B))
      {
        if (a3 == 12 && v8 == 32)
        {
          v11 = 17896;
          return *(_QWORD *)(a1 + v11);
        }
        v131 = *v7;
      }
    }
    v139 = *(_QWORD *)(*(_QWORD *)(v131 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v139 || (*(_DWORD *)(v139 + 16) & 0xFF800FF) != 0x530000B)
    {
      if (sub_22F1105F0(v131) && sub_22F110B20(*v7)
        || (v131 = *v7, sub_22F110DD0(*v7))
        && ((v140 = *(_QWORD *)(*(_QWORD *)(v131 + 8) & 0xFFFFFFFFFFFFFFF0)) == 0
         || (*(_DWORD *)(v140 + 16) & 0xFF800FF) != 0x6B8000B))
      {
        if (a3 == 6 && v8 == 64)
        {
          v11 = 17904;
          return *(_QWORD *)(a1 + v11);
        }
        v131 = *v7;
      }
    }
    v141 = *(_QWORD *)(*(_QWORD *)(v131 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v141 || (*(_DWORD *)(v141 + 16) & 0xFF800FF) != 0x530000B)
    {
      if (sub_22F1105F0(v131) && sub_22F110B20(*v7))
      {
        if (a3 != 24 || v8 != 16)
        {
          v131 = *v7;
          goto LABEL_692;
        }
      }
      else
      {
        v131 = *v7;
        if (!sub_22F110DD0(*v7))
          goto LABEL_692;
        v142 = *(_QWORD *)(*(_QWORD *)(v131 + 8) & 0xFFFFFFFFFFFFFFF0);
        if (!v142)
          goto LABEL_692;
        v143 = *(_DWORD *)(v142 + 16);
        if (v143 != 11 || a3 != 24 || (v143 & 0xFF80000) != 0x6B80000 || v8 != 16)
          goto LABEL_692;
      }
      v11 = 17912;
      return *(_QWORD *)(a1 + v11);
    }
LABEL_692:
    v144 = *(_QWORD *)(*(_QWORD *)(v131 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((!v144 || (*(_DWORD *)(v144 + 16) & 0xFF800FF) != 0x530000B)
      && sub_22F1105F0(v131)
      && sub_22F110B20(*v7)
      && a3 == 64
      && v8 == 8)
    {
      v11 = 17920;
      return *(_QWORD *)(a1 + v11);
    }
    v145 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((!v145 || (*(_DWORD *)(v145 + 16) & 0xFF800FF) != 0x530000B)
      && sub_22F1105F0(*v7)
      && sub_22F110B20(*v7)
      && a3 == 32
      && v8 == 16)
    {
      v11 = 17928;
      return *(_QWORD *)(a1 + v11);
    }
    v146 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((!v146 || (*(_DWORD *)(v146 + 16) & 0xFF800FF) != 0x530000B)
      && sub_22F1105F0(*v7)
      && sub_22F110B20(*v7)
      && a3 == 16
      && v8 == 32)
    {
      v11 = 17936;
      return *(_QWORD *)(a1 + v11);
    }
    v147 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((!v147 || (*(_DWORD *)(v147 + 16) & 0xFF800FF) != 0x530000B)
      && sub_22F1105F0(*v7)
      && sub_22F110B20(*v7)
      && a3 == 8
      && v8 == 64)
    {
      v11 = 17944;
      return *(_QWORD *)(a1 + v11);
    }
    v148 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((!v148 || (*(_DWORD *)(v148 + 16) & 0xFF800FF) != 0x530000B)
      && sub_22F1105F0(*v7)
      && !sub_22F110B20(*v7)
      && a3 == 64
      && v8 == 8)
    {
      v11 = 17952;
      return *(_QWORD *)(a1 + v11);
    }
    v149 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((!v149 || (*(_DWORD *)(v149 + 16) & 0xFF800FF) != 0x530000B)
      && sub_22F1105F0(*v7)
      && !sub_22F110B20(*v7)
      && a3 == 32
      && v8 == 16)
    {
      v11 = 17960;
      return *(_QWORD *)(a1 + v11);
    }
    v150 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((!v150 || (*(_DWORD *)(v150 + 16) & 0xFF800FF) != 0x530000B)
      && sub_22F1105F0(*v7)
      && !sub_22F110B20(*v7)
      && a3 == 16
      && v8 == 32)
    {
      v11 = 17968;
      return *(_QWORD *)(a1 + v11);
    }
    v151 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((!v151 || (*(_DWORD *)(v151 + 16) & 0xFF800FF) != 0x530000B)
      && sub_22F1105F0(*v7)
      && !sub_22F110B20(*v7)
      && a3 == 8
      && v8 == 64)
    {
      v11 = 17976;
      return *(_QWORD *)(a1 + v11);
    }
    v152 = *v7;
    v153 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v153 || (*(_DWORD *)(v153 + 16) & 0xFF800FF) != 0x530000B)
    {
      if (sub_22F1105F0(*v7) && sub_22F110B20(*v7)
        || (v152 = *v7, sub_22F110DD0(*v7))
        && ((v154 = *(_QWORD *)(*(_QWORD *)(v152 + 8) & 0xFFFFFFFFFFFFFFF0)) == 0
         || (*(_DWORD *)(v154 + 16) & 0xFF800FF) != 0x6B8000B))
      {
        if (a3 == 32 && v8 == 16)
        {
          v11 = 17984;
          return *(_QWORD *)(a1 + v11);
        }
        v152 = *v7;
      }
    }
    v158 = *(_QWORD *)(*(_QWORD *)(v152 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v158 || (*(_DWORD *)(v158 + 16) & 0xFF800FF) != 0x530000B)
    {
      if (sub_22F1105F0(v152) && sub_22F110B20(*v7)
        || (v152 = *v7, sub_22F110DD0(*v7))
        && ((v159 = *(_QWORD *)(*(_QWORD *)(v152 + 8) & 0xFFFFFFFFFFFFFFF0)) == 0
         || (*(_DWORD *)(v159 + 16) & 0xFF800FF) != 0x6B8000B))
      {
        if (a3 == 16 && v8 == 32)
        {
          v11 = 17992;
          return *(_QWORD *)(a1 + v11);
        }
        v152 = *v7;
      }
    }
    v160 = *(_QWORD *)(*(_QWORD *)(v152 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v160 || (*(_DWORD *)(v160 + 16) & 0xFF800FF) != 0x530000B)
    {
      if (sub_22F1105F0(v152) && sub_22F110B20(*v7)
        || (v152 = *v7, sub_22F110DD0(*v7))
        && ((v161 = *(_QWORD *)(*(_QWORD *)(v152 + 8) & 0xFFFFFFFFFFFFFFF0)) == 0
         || (*(_DWORD *)(v161 + 16) & 0xFF800FF) != 0x6B8000B))
      {
        if (a3 == 8 && v8 == 64)
        {
          v11 = 18000;
          return *(_QWORD *)(a1 + v11);
        }
        v152 = *v7;
      }
    }
    v162 = *(_QWORD *)(*(_QWORD *)(v152 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v162 && (*(_DWORD *)(v162 + 16) & 0xFF800FF) == 0x530000B)
      goto LABEL_822;
    if (sub_22F1105F0(v152) && sub_22F110B20(*v7))
    {
      if (a3 != 32 || v8 != 16)
      {
        v152 = *v7;
        goto LABEL_822;
      }
    }
    else
    {
      v152 = *v7;
      if (!sub_22F110DD0(*v7)
        || (v163 = *(_QWORD *)(*(_QWORD *)(v152 + 8) & 0xFFFFFFFFFFFFFFF0)) == 0
        || (v164 = *(_DWORD *)(v163 + 16), v164 != 11)
        || a3 != 32
        || (v164 & 0xFF80000) != 0x6B80000
        || v8 != 16)
      {
LABEL_822:
        result = 0;
        v165 = *(_QWORD *)(*(_QWORD *)(v152 + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v165)
        {
          v166 = *(_DWORD *)(v165 + 16);
          if (v166 == 11)
          {
            result = 0;
            if (a3 == 16 && (v166 & 0xFF80000) == 0x5300000)
            {
              v11 = 18016;
              return *(_QWORD *)(a1 + v11);
            }
          }
        }
        return result;
      }
    }
    v11 = 18008;
    return *(_QWORD *)(a1 + v11);
  }
  if ((v5 & 0x100) == 0)
    return 0;
  v27 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_22EF5CDF0(a1, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  v29 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v29)
    v30 = (*(_DWORD *)(v29 + 16) & 0xFF800FF) == 87031819;
  else
    v30 = 0;
  if (!v30 && sub_22F1105F0(*v27) && sub_22F110B20(*v27) && a3 == 1 && v28 == 8)
  {
    v11 = 18040;
    return *(_QWORD *)(a1 + v11);
  }
  v31 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v31)
    v32 = (*(_DWORD *)(v31 + 16) & 0xFF800FF) == 87031819;
  else
    v32 = 0;
  if (!v32 && sub_22F1105F0(*v27) && sub_22F110B20(*v27) && a3 == 2 && v28 == 8)
  {
    v11 = 18048;
    return *(_QWORD *)(a1 + v11);
  }
  v33 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v33)
    v34 = (*(_DWORD *)(v33 + 16) & 0xFF800FF) == 87031819;
  else
    v34 = 0;
  if (!v34 && sub_22F1105F0(*v27) && sub_22F110B20(*v27) && a3 == 4 && v28 == 8)
  {
    v11 = 18056;
    return *(_QWORD *)(a1 + v11);
  }
  v35 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v35)
    v36 = (*(_DWORD *)(v35 + 16) & 0xFF800FF) == 87031819;
  else
    v36 = 0;
  if (!v36 && sub_22F1105F0(*v27) && sub_22F110B20(*v27) && a3 == 8 && v28 == 8)
  {
    v11 = 18064;
    return *(_QWORD *)(a1 + v11);
  }
  v37 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v37)
    v38 = (*(_DWORD *)(v37 + 16) & 0xFF800FF) == 87031819;
  else
    v38 = 0;
  if (!v38 && sub_22F1105F0(*v27) && sub_22F110B20(*v27) && a3 == 16 && v28 == 8)
  {
    v11 = 18072;
    return *(_QWORD *)(a1 + v11);
  }
  v39 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v39)
    v40 = (*(_DWORD *)(v39 + 16) & 0xFF800FF) == 87031819;
  else
    v40 = 0;
  if (!v40 && sub_22F1105F0(*v27) && sub_22F110B20(*v27) && a3 == 32 && v28 == 8)
  {
    v11 = 18080;
    return *(_QWORD *)(a1 + v11);
  }
  v41 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v41 || (*(_DWORD *)(v41 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && sub_22F110B20(*v27)
    && a3 == 64
    && v28 == 8)
  {
    v11 = 18088;
    return *(_QWORD *)(a1 + v11);
  }
  v42 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v42 || (*(_DWORD *)(v42 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && !sub_22F110B20(*v27)
    && a3 == 1
    && v28 == 8)
  {
    v11 = 18096;
    return *(_QWORD *)(a1 + v11);
  }
  v43 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v43 || (*(_DWORD *)(v43 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && !sub_22F110B20(*v27)
    && a3 == 2
    && v28 == 8)
  {
    v11 = 18104;
    return *(_QWORD *)(a1 + v11);
  }
  v44 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v44 || (*(_DWORD *)(v44 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && !sub_22F110B20(*v27)
    && a3 == 4
    && v28 == 8)
  {
    v11 = 18112;
    return *(_QWORD *)(a1 + v11);
  }
  v45 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v45 || (*(_DWORD *)(v45 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && !sub_22F110B20(*v27)
    && a3 == 8
    && v28 == 8)
  {
    v11 = 18120;
    return *(_QWORD *)(a1 + v11);
  }
  v46 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v46 || (*(_DWORD *)(v46 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && !sub_22F110B20(*v27)
    && a3 == 16
    && v28 == 8)
  {
    v11 = 18128;
    return *(_QWORD *)(a1 + v11);
  }
  v47 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v47 || (*(_DWORD *)(v47 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && !sub_22F110B20(*v27)
    && a3 == 32
    && v28 == 8)
  {
    v11 = 18136;
    return *(_QWORD *)(a1 + v11);
  }
  v48 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v48 || (*(_DWORD *)(v48 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && !sub_22F110B20(*v27)
    && a3 == 64
    && v28 == 8)
  {
    v11 = 18144;
    return *(_QWORD *)(a1 + v11);
  }
  v49 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v49 || (*(_DWORD *)(v49 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && sub_22F110B20(*v27)
    && a3 == 1
    && v28 == 16)
  {
    v11 = 18152;
    return *(_QWORD *)(a1 + v11);
  }
  v50 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v50 || (*(_DWORD *)(v50 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && sub_22F110B20(*v27)
    && a3 == 2
    && v28 == 16)
  {
    v11 = 18160;
    return *(_QWORD *)(a1 + v11);
  }
  v51 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v51 || (*(_DWORD *)(v51 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && sub_22F110B20(*v27)
    && a3 == 4
    && v28 == 16)
  {
    v11 = 18168;
    return *(_QWORD *)(a1 + v11);
  }
  v52 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v52 || (*(_DWORD *)(v52 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && sub_22F110B20(*v27)
    && a3 == 8
    && v28 == 16)
  {
    v11 = 18176;
    return *(_QWORD *)(a1 + v11);
  }
  v53 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v53 || (*(_DWORD *)(v53 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && sub_22F110B20(*v27)
    && a3 == 16
    && v28 == 16)
  {
    v11 = 18184;
    return *(_QWORD *)(a1 + v11);
  }
  v54 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v54 || (*(_DWORD *)(v54 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && sub_22F110B20(*v27)
    && a3 == 32
    && v28 == 16)
  {
    v11 = 18192;
    return *(_QWORD *)(a1 + v11);
  }
  v55 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v55 || (*(_DWORD *)(v55 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && !sub_22F110B20(*v27)
    && a3 == 1
    && v28 == 16)
  {
    v11 = 18200;
    return *(_QWORD *)(a1 + v11);
  }
  v56 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v56 || (*(_DWORD *)(v56 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && !sub_22F110B20(*v27)
    && a3 == 2
    && v28 == 16)
  {
    v11 = 18208;
    return *(_QWORD *)(a1 + v11);
  }
  v57 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v57 || (*(_DWORD *)(v57 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && !sub_22F110B20(*v27)
    && a3 == 4
    && v28 == 16)
  {
    v11 = 18216;
    return *(_QWORD *)(a1 + v11);
  }
  v58 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v58 || (*(_DWORD *)(v58 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && !sub_22F110B20(*v27)
    && a3 == 8
    && v28 == 16)
  {
    v11 = 18224;
    return *(_QWORD *)(a1 + v11);
  }
  v59 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v59 || (*(_DWORD *)(v59 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && !sub_22F110B20(*v27)
    && a3 == 16
    && v28 == 16)
  {
    v11 = 18232;
    return *(_QWORD *)(a1 + v11);
  }
  v60 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v60 || (*(_DWORD *)(v60 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && !sub_22F110B20(*v27)
    && a3 == 32
    && v28 == 16)
  {
    v11 = 18240;
    return *(_QWORD *)(a1 + v11);
  }
  v61 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v61 || (*(_DWORD *)(v61 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && sub_22F110B20(*v27)
    && a3 == 1
    && v28 == 32)
  {
    v11 = 18248;
    return *(_QWORD *)(a1 + v11);
  }
  v62 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v62 || (*(_DWORD *)(v62 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && sub_22F110B20(*v27)
    && a3 == 2
    && v28 == 32)
  {
    v11 = 18256;
    return *(_QWORD *)(a1 + v11);
  }
  v63 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v63 || (*(_DWORD *)(v63 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && sub_22F110B20(*v27)
    && a3 == 4
    && v28 == 32)
  {
    v11 = 18264;
    return *(_QWORD *)(a1 + v11);
  }
  v64 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v64 || (*(_DWORD *)(v64 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && sub_22F110B20(*v27)
    && a3 == 8
    && v28 == 32)
  {
    v11 = 18272;
    return *(_QWORD *)(a1 + v11);
  }
  v65 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v65 || (*(_DWORD *)(v65 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && sub_22F110B20(*v27)
    && a3 == 16
    && v28 == 32)
  {
    v11 = 18280;
    return *(_QWORD *)(a1 + v11);
  }
  v66 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v66 || (*(_DWORD *)(v66 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && !sub_22F110B20(*v27)
    && a3 == 1
    && v28 == 32)
  {
    v11 = 18288;
    return *(_QWORD *)(a1 + v11);
  }
  v69 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v69 || (*(_DWORD *)(v69 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && !sub_22F110B20(*v27)
    && a3 == 2
    && v28 == 32)
  {
    v11 = 18296;
    return *(_QWORD *)(a1 + v11);
  }
  v70 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v70 || (*(_DWORD *)(v70 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && !sub_22F110B20(*v27)
    && a3 == 4
    && v28 == 32)
  {
    v11 = 18304;
    return *(_QWORD *)(a1 + v11);
  }
  v71 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v71 || (*(_DWORD *)(v71 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && !sub_22F110B20(*v27)
    && a3 == 8
    && v28 == 32)
  {
    v11 = 18312;
    return *(_QWORD *)(a1 + v11);
  }
  v72 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v72 || (*(_DWORD *)(v72 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && !sub_22F110B20(*v27)
    && a3 == 16
    && v28 == 32)
  {
    v11 = 18320;
    return *(_QWORD *)(a1 + v11);
  }
  v73 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v73 || (*(_DWORD *)(v73 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && sub_22F110B20(*v27)
    && a3 == 1
    && v28 == 64)
  {
    v11 = 18328;
    return *(_QWORD *)(a1 + v11);
  }
  v90 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v90 || (*(_DWORD *)(v90 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && sub_22F110B20(*v27)
    && a3 == 2
    && v28 == 64)
  {
    v11 = 18336;
    return *(_QWORD *)(a1 + v11);
  }
  v91 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v91 || (*(_DWORD *)(v91 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && sub_22F110B20(*v27)
    && a3 == 4
    && v28 == 64)
  {
    v11 = 18344;
    return *(_QWORD *)(a1 + v11);
  }
  v92 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v92 || (*(_DWORD *)(v92 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && sub_22F110B20(*v27)
    && a3 == 8
    && v28 == 64)
  {
    v11 = 18352;
    return *(_QWORD *)(a1 + v11);
  }
  v93 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v93 || (*(_DWORD *)(v93 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && !sub_22F110B20(*v27)
    && a3 == 1
    && v28 == 64)
  {
    v11 = 18360;
    return *(_QWORD *)(a1 + v11);
  }
  v94 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v94 || (*(_DWORD *)(v94 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && !sub_22F110B20(*v27)
    && a3 == 2
    && v28 == 64)
  {
    v11 = 18368;
    return *(_QWORD *)(a1 + v11);
  }
  v95 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v95 || (*(_DWORD *)(v95 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && !sub_22F110B20(*v27)
    && a3 == 4
    && v28 == 64)
  {
    v11 = 18376;
    return *(_QWORD *)(a1 + v11);
  }
  v96 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((!v96 || (*(_DWORD *)(v96 + 16) & 0xFF800FF) != 0x530000B)
    && sub_22F1105F0(*v27)
    && !sub_22F110B20(*v27)
    && a3 == 8
    && v28 == 64)
  {
    v11 = 18384;
    return *(_QWORD *)(a1 + v11);
  }
  v97 = *v27;
  v98 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v98 || (*(_DWORD *)(v98 + 16) & 0xFF800FF) != 0x530000B)
  {
    if (sub_22F1105F0(*v27) && !sub_22F110B20(*v27))
    {
      if (a3 != 1 || v28 != 16)
      {
        v97 = *v27;
        goto LABEL_489;
      }
    }
    else
    {
      v97 = *v27;
      v134 = sub_22F110DD0(*v27);
      if (a3 != 1 || !v134 || v28 != 16)
        goto LABEL_489;
    }
    v11 = 18392;
    return *(_QWORD *)(a1 + v11);
  }
LABEL_489:
  v99 = *(_QWORD *)(*(_QWORD *)(v97 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v99 || (*(_DWORD *)(v99 + 16) & 0xFF800FF) != 0x530000B)
  {
    if (sub_22F1105F0(v97) && !sub_22F110B20(*v27))
    {
      if (a3 != 2 || v28 != 16)
      {
        v97 = *v27;
        goto LABEL_491;
      }
    }
    else
    {
      v97 = *v27;
      v135 = sub_22F110DD0(*v27);
      if (a3 != 2 || !v135 || v28 != 16)
        goto LABEL_491;
    }
    v11 = 18400;
    return *(_QWORD *)(a1 + v11);
  }
LABEL_491:
  v100 = *(_QWORD *)(*(_QWORD *)(v97 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v100 || (*(_DWORD *)(v100 + 16) & 0xFF800FF) != 0x530000B)
  {
    if (sub_22F1105F0(v97) && !sub_22F110B20(*v27))
    {
      if (a3 != 4 || v28 != 16)
      {
        v97 = *v27;
        goto LABEL_493;
      }
    }
    else
    {
      v97 = *v27;
      v138 = sub_22F110DD0(*v27);
      if (a3 != 4 || !v138 || v28 != 16)
        goto LABEL_493;
    }
    v11 = 18408;
    return *(_QWORD *)(a1 + v11);
  }
LABEL_493:
  v101 = *(_QWORD *)(*(_QWORD *)(v97 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v101 || (*(_DWORD *)(v101 + 16) & 0xFF800FF) != 0x530000B)
  {
    if (sub_22F1105F0(v97) && !sub_22F110B20(*v27))
    {
      if (a3 != 8 || v28 != 16)
      {
        v97 = *v27;
        goto LABEL_495;
      }
    }
    else
    {
      v97 = *v27;
      v155 = sub_22F110DD0(*v27);
      if (a3 != 8 || !v155 || v28 != 16)
        goto LABEL_495;
    }
    v11 = 18416;
    return *(_QWORD *)(a1 + v11);
  }
LABEL_495:
  v102 = *(_QWORD *)(*(_QWORD *)(v97 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v102 || (*(_DWORD *)(v102 + 16) & 0xFF800FF) != 0x530000B)
  {
    if (sub_22F1105F0(v97) && !sub_22F110B20(*v27))
    {
      if (a3 != 16 || v28 != 16)
      {
        v97 = *v27;
        goto LABEL_497;
      }
    }
    else
    {
      v97 = *v27;
      v156 = sub_22F110DD0(*v27);
      if (a3 != 16 || !v156 || v28 != 16)
        goto LABEL_497;
    }
    v11 = 18424;
    return *(_QWORD *)(a1 + v11);
  }
LABEL_497:
  v103 = *(_QWORD *)(*(_QWORD *)(v97 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v103 || (*(_DWORD *)(v103 + 16) & 0xFF800FF) != 0x530000B)
  {
    if (sub_22F1105F0(v97) && !sub_22F110B20(*v27))
    {
      if (a3 != 32 || v28 != 16)
      {
        v97 = *v27;
        goto LABEL_499;
      }
    }
    else
    {
      v97 = *v27;
      v157 = sub_22F110DD0(*v27);
      if (a3 != 32 || !v157 || v28 != 16)
        goto LABEL_499;
    }
    v11 = 18432;
    return *(_QWORD *)(a1 + v11);
  }
LABEL_499:
  v104 = *(_QWORD *)(*(_QWORD *)(v97 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v104 || (*(_DWORD *)(v104 + 16) & 0xFF800FF) != 0x530000B)
  {
    if (sub_22F1105F0(v97) && !sub_22F110B20(*v27))
    {
      if (a3 != 1 || v28 != 32)
      {
        v97 = *v27;
        goto LABEL_501;
      }
    }
    else
    {
      v97 = *v27;
      v167 = sub_22F110DD0(*v27);
      if (a3 != 1 || !v167 || v28 != 32)
        goto LABEL_501;
    }
    v11 = 18440;
    return *(_QWORD *)(a1 + v11);
  }
LABEL_501:
  v105 = *(_QWORD *)(*(_QWORD *)(v97 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v105 || (*(_DWORD *)(v105 + 16) & 0xFF800FF) != 0x530000B)
  {
    if (sub_22F1105F0(v97) && !sub_22F110B20(*v27))
    {
      if (a3 != 2 || v28 != 32)
      {
        v97 = *v27;
        goto LABEL_503;
      }
    }
    else
    {
      v97 = *v27;
      v168 = sub_22F110DD0(*v27);
      if (a3 != 2 || !v168 || v28 != 32)
        goto LABEL_503;
    }
    v11 = 18448;
    return *(_QWORD *)(a1 + v11);
  }
LABEL_503:
  v106 = *(_QWORD *)(*(_QWORD *)(v97 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v106 || (*(_DWORD *)(v106 + 16) & 0xFF800FF) != 0x530000B)
  {
    if (sub_22F1105F0(v97) && !sub_22F110B20(*v27))
    {
      if (a3 != 4 || v28 != 32)
      {
        v97 = *v27;
        goto LABEL_505;
      }
    }
    else
    {
      v97 = *v27;
      v169 = sub_22F110DD0(*v27);
      if (a3 != 4 || !v169 || v28 != 32)
        goto LABEL_505;
    }
    v11 = 18456;
    return *(_QWORD *)(a1 + v11);
  }
LABEL_505:
  v107 = *(_QWORD *)(*(_QWORD *)(v97 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v107 || (*(_DWORD *)(v107 + 16) & 0xFF800FF) != 0x530000B)
  {
    if (sub_22F1105F0(v97) && !sub_22F110B20(*v27))
    {
      if (a3 != 8 || v28 != 32)
      {
        v97 = *v27;
        goto LABEL_507;
      }
    }
    else
    {
      v97 = *v27;
      v170 = sub_22F110DD0(*v27);
      if (a3 != 8 || !v170 || v28 != 32)
        goto LABEL_507;
    }
    v11 = 18464;
    return *(_QWORD *)(a1 + v11);
  }
LABEL_507:
  v108 = *(_QWORD *)(*(_QWORD *)(v97 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v108 || (*(_DWORD *)(v108 + 16) & 0xFF800FF) != 0x530000B)
  {
    if (sub_22F1105F0(v97) && !sub_22F110B20(*v27))
    {
      if (a3 != 16 || v28 != 32)
      {
        v97 = *v27;
        goto LABEL_509;
      }
    }
    else
    {
      v97 = *v27;
      v171 = sub_22F110DD0(*v27);
      if (a3 != 16 || !v171 || v28 != 32)
        goto LABEL_509;
    }
    v11 = 18472;
    return *(_QWORD *)(a1 + v11);
  }
LABEL_509:
  v109 = *(_QWORD *)(*(_QWORD *)(v97 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v109 || (*(_DWORD *)(v109 + 16) & 0xFF800FF) != 0x530000B)
  {
    if (sub_22F1105F0(v97) && !sub_22F110B20(*v27))
    {
      if (a3 != 1 || v28 != 64)
      {
        v97 = *v27;
        goto LABEL_511;
      }
    }
    else
    {
      v97 = *v27;
      v172 = sub_22F110DD0(*v27);
      if (a3 != 1 || !v172 || v28 != 64)
        goto LABEL_511;
    }
    v11 = 18480;
    return *(_QWORD *)(a1 + v11);
  }
LABEL_511:
  v110 = *(_QWORD *)(*(_QWORD *)(v97 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v110 || (*(_DWORD *)(v110 + 16) & 0xFF800FF) != 0x530000B)
  {
    if (sub_22F1105F0(v97) && !sub_22F110B20(*v27))
    {
      if (a3 != 2 || v28 != 64)
      {
        v97 = *v27;
        goto LABEL_513;
      }
    }
    else
    {
      v97 = *v27;
      v173 = sub_22F110DD0(*v27);
      if (a3 != 2 || !v173 || v28 != 64)
        goto LABEL_513;
    }
    v11 = 18488;
    return *(_QWORD *)(a1 + v11);
  }
LABEL_513:
  v111 = *(_QWORD *)(*(_QWORD *)(v97 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v111 || (*(_DWORD *)(v111 + 16) & 0xFF800FF) != 0x530000B)
  {
    if (sub_22F1105F0(v97) && !sub_22F110B20(*v27))
    {
      if (a3 != 4 || v28 != 64)
      {
        v97 = *v27;
        goto LABEL_515;
      }
    }
    else
    {
      v97 = *v27;
      v174 = sub_22F110DD0(*v27);
      if (a3 != 4 || !v174 || v28 != 64)
        goto LABEL_515;
    }
    v11 = 18496;
    return *(_QWORD *)(a1 + v11);
  }
LABEL_515:
  v112 = *(_QWORD *)(*(_QWORD *)(v97 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v112 || (*(_DWORD *)(v112 + 16) & 0xFF800FF) != 0x530000B)
  {
    if (sub_22F1105F0(v97) && !sub_22F110B20(*v27))
    {
      if (a3 != 8 || v28 != 64)
      {
        v97 = *v27;
        goto LABEL_517;
      }
    }
    else
    {
      v97 = *v27;
      v175 = sub_22F110DD0(*v27);
      if (a3 != 8 || !v175 || v28 != 64)
        goto LABEL_517;
    }
    v11 = 18504;
    return *(_QWORD *)(a1 + v11);
  }
LABEL_517:
  result = 0;
  v113 = *(_QWORD *)(*(_QWORD *)(v97 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v113)
  {
    v114 = *(_DWORD *)(v113 + 16);
    if (v114 == 11)
    {
      v115 = v114 & 0xFF80000;
      if (a3 == 64 && v115 == 87031808)
      {
        v11 = 18512;
        return *(_QWORD *)(a1 + v11);
      }
      if (a3 == 32 && v115 == 87031808)
      {
        v11 = 18520;
        return *(_QWORD *)(a1 + v11);
      }
      if (a3 == 16 && v115 == 87031808)
      {
        v11 = 18528;
        return *(_QWORD *)(a1 + v11);
      }
      if (a3 == 8 && v115 == 87031808)
      {
        v11 = 18536;
        return *(_QWORD *)(a1 + v11);
      }
      if (a3 == 4 && v115 == 87031808)
      {
        v11 = 18544;
        return *(_QWORD *)(a1 + v11);
      }
      if (a3 == 2 && v115 == 87031808)
      {
        v11 = 18552;
        return *(_QWORD *)(a1 + v11);
      }
      result = 0;
      if (a3 == 1 && v115 == 87031808)
      {
        v11 = 18560;
        return *(_QWORD *)(a1 + v11);
      }
    }
  }
  return result;
}

uint64_t sub_22EF6356C(uint64_t result, uint64_t a2, int a3, int a4, int a5)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *(_DWORD *)(result + 8);
  if (v5 >= *(_DWORD *)(result + 12))
  {
    v28 = result;
    v14 = a2;
    v16 = a3;
    v19 = a4;
    v23 = a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v14;
    a3 = v16;
    a4 = v19;
    result = v28;
    a5 = v23;
    v5 = *(_DWORD *)(v28 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v5) = a2;
  v6 = *(_DWORD *)(result + 12);
  v7 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v7;
  if (v7 >= v6)
  {
    v29 = result;
    v15 = HIDWORD(a2);
    v17 = a3;
    v20 = a4;
    v24 = a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(a2) = v15;
    a3 = v17;
    a4 = v20;
    result = v29;
    a5 = v24;
    v7 = *(_DWORD *)(v29 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v7) = HIDWORD(a2);
  v8 = *(_DWORD *)(result + 12);
  v9 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v9;
  if (v9 >= v8)
  {
    v30 = result;
    v18 = a3;
    v21 = a4;
    v25 = a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a3 = v18;
    a4 = v21;
    result = v30;
    a5 = v25;
    v9 = *(_DWORD *)(v30 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v9) = a3;
  v10 = *(_DWORD *)(result + 12);
  v11 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v11;
  if (v11 >= v10)
  {
    v31 = result;
    v22 = a4;
    v26 = a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a4 = v22;
    result = v31;
    a5 = v26;
    v11 = *(_DWORD *)(v31 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v11) = a4;
  v12 = *(_DWORD *)(result + 12);
  v13 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v13;
  if (v13 >= v12)
  {
    v32 = result;
    v27 = a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    result = v32;
    a5 = v27;
    v13 = *(_DWORD *)(v32 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v13) = a5;
  ++*(_DWORD *)(result + 8);
  return result;
}

unint64_t sub_22EF63724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t NodeOrInsertPos;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  void *v17[2];
  _QWORD v18[17];

  v18[16] = *MEMORY[0x24BDAC8D0];
  v17[0] = v18;
  v17[1] = (void *)0x2000000000;
  sub_22EF6356C((uint64_t)v17, a2, a3, 56, a4);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v9 = NodeOrInsertPos - 24;
  }
  else
  {
    if (*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) == (*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0))
    {
      v11 = 0;
    }
    else
    {
      v11 = sub_22EF63724(a1, *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7, a3, a4);
      llvm::FoldingSetBase::FindNodeOrInsertPos();
    }
    v12 = sub_22E3CD3D4(a1 + 2032, 40, 4);
    v9 = v12;
    v13 = *(_DWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1F00;
    v14 = v12 & 0xFFFFFFFFFFFFFFF0;
    if (v11 >= 0x10)
      v14 = v11;
    *(_QWORD *)v12 = v12;
    *(_QWORD *)(v12 + 8) = v14;
    v15 = *(_DWORD *)(v12 + 16) & 0xFF800000;
    *(_QWORD *)(v12 + 24) = 0;
    *(_QWORD *)(v12 + 32) = a2;
    *(_DWORD *)(v12 + 16) = v13 & 0xFF87FFFF | ((a4 & 0xF) << 19) | v15 | 0x38;
    *(_DWORD *)(v12 + 20) = a3;
    llvm::FoldingSetBase::InsertNode();
    v16 = *(_DWORD *)(a1 + 16);
    if (v16 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v16 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v16) = v9;
    ++*(_DWORD *)(a1 + 16);
  }
  if (v17[0] != v18)
    free(v17[0]);
  return v9 & 0xFFFFFFFFFFFFFFF0;
}

unint64_t sub_22EF63908(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, int a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t NodeOrInsertPos;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v22;
  uint64_t v23;
  void *v24[2];
  _QWORD v25[17];

  v25[16] = *MEMORY[0x24BDAC8D0];
  v24[0] = v25;
  v24[1] = (void *)0x2000000000;
  v10 = a2 & 0xFFFFFFFFFFFFFFF0;
  v11 = a2 & 7;
  sub_22F10B7B0((uint64_t)v24, a1, *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | v11, a3, a4);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v13 = NodeOrInsertPos - 24;
    v14 = sub_22E3CD3D4(a1 + 2032, 64, 4);
    v15 = v14;
    v16 = v13 & 0xFFFFFFFFFFFFFFF0;
    v17 = a5;
    v18 = a1;
    v19 = a2;
LABEL_3:
    sub_22F10B740(v14, v18, v19, v16, a3, a4, v17);
    goto LABEL_4;
  }
  v22 = *(_QWORD *)(v10 + 8) | v11;
  if (v22 != a2)
  {
    v23 = sub_22EF63908(a1, v22, a3, a4, 0);
    v14 = sub_22E3CD3D4(a1 + 2032, 64, 4);
    v15 = v14;
    v17 = a5;
    v18 = a1;
    v19 = a2;
    v16 = v23;
    goto LABEL_3;
  }
  v15 = sub_22E3CD3D4(a1 + 2032, 64, 4);
  sub_22F10B740(v15, a1, a2, 0, a3, a4, a5);
  llvm::FoldingSetBase::FindNodeOrInsertPos();
  llvm::FoldingSetBase::InsertNode();
LABEL_4:
  v20 = *(_DWORD *)(a1 + 16);
  if (v20 >= *(_DWORD *)(a1 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v20 = *(_DWORD *)(a1 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v20) = v15;
  ++*(_DWORD *)(a1 + 16);
  if (v24[0] != v25)
    free(v24[0]);
  return v15 & 0xFFFFFFFFFFFFFFF0;
}

unint64_t sub_22EF63B24(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, int a5)
{
  uint64_t v10;
  uint64_t NodeOrInsertPos;
  uint64_t v12;
  unsigned __int8 *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  void *v21[2];
  _QWORD v22[17];

  v22[16] = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7;
  v21[0] = v22;
  v21[1] = (void *)0x2000000000;
  sub_22F408A0C((uint64_t)v21, a1, v10, a3, a4);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v12 = NodeOrInsertPos - 24;
  }
  else
  {
    v12 = sub_22E3CD3D4(a1 + 2032, 72, 4);
    v19 = sub_22F40894C(v12, 0x1Eu, v10, 0, (uint64_t)a3, a4);
    *(_QWORD *)(v19 + 40) = a1;
    *(_QWORD *)(v19 + 48) = a3;
    *(_QWORD *)(v19 + 56) = a4;
    *(_DWORD *)(v19 + 64) = a5;
    llvm::FoldingSetBase::InsertNode();
    v20 = *(_DWORD *)(a1 + 16);
    if (v20 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v20 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v20) = v12;
    ++*(_DWORD *)(a1 + 16);
  }
  if (*(_QWORD *)(v12 + 32) == a2
    && ((v13 = *(unsigned __int8 **)(v12 + 48), v13 == a3) ? (v14 = v13 == a4) : (v14 = 0), v14))
  {
    v15 = v12;
  }
  else
  {
    v15 = sub_22E3CD3D4(a1 + 2032, 72, 4);
    v17 = sub_22F40894C(v15, 0x1Eu, a2, v12 & 0xFFFFFFFFFFFFFFF0, (uint64_t)a3, a4);
    *(_QWORD *)(v17 + 40) = a1;
    *(_QWORD *)(v17 + 48) = a3;
    *(_QWORD *)(v17 + 56) = a4;
    *(_DWORD *)(v17 + 64) = a5;
    v18 = *(_DWORD *)(a1 + 16);
    if (v18 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v18 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v18) = v15;
    ++*(_DWORD *)(a1 + 16);
  }
  if (v21[0] != v22)
    free(v21[0]);
  return v15 & 0xFFFFFFFFFFFFFFF0;
}

uint64_t sub_22EF63D48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v3 = v2 | a2 & 7;
  if ((v2 & 8) != 0
    && (v5 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0),
        v6 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFF0) + 0x18),
        (v6 & 0x1C0) != 0))
  {
    return sub_22EA28548(a1, *v5 & 0xFFFFFFFFFFFFFFF0, v6 & 0xFFFFFFFFFFFFFE3FLL | v3 & 7);
  }
  else
  {
    return v3;
  }
}

unint64_t sub_22EF63D8C(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, __int128 *a5, char a6)
{
  uint64_t v10;
  uint64_t NodeOrInsertPos;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[64];
  void *v68[2];
  __int128 v69;
  void *v70[2];
  _QWORD v71[18];

  v10 = a2;
  v71[16] = *MEMORY[0x24BDAC8D0];
  v70[0] = v71;
  v70[1] = (void *)0x2000000000;
  sub_22F113B3C((uint64_t)v70, a2, a3, a4, (unsigned __int16 *)a5, a1, 1);
  v64 = 0;
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  v13 = NodeOrInsertPos;
  if (!NodeOrInsertPos)
  {
    v18 = 0;
    goto LABEL_7;
  }
  v14 = NodeOrInsertPos - 32;
  v15 = (v13 - 32) & 0xFFFFFFFFFFFFFFF0;
  if ((a6 & 1) == 0 && (*((_DWORD *)a5 + 4) - 6) <= 2)
  {
    v57 = v13;
    v16 = v10;
    v17 = *((_QWORD *)a5 + 5);
    if (v17 != sub_22F257D3C(v14))
    {
      v18 = *(_QWORD *)(v15 + 8);
      v10 = v16;
      v13 = v57;
LABEL_7:
      v58 = v10;
      v19 = **(_QWORD **)(a1 + 2000);
      v20 = *((_DWORD *)a5 + 4);
      v21 = v20 == 0;
      if (v20 && (v19 & 0x800) != 0)
      {
        if ((v20 - 5) >= 2)
        {
          if (v20 == 2)
          {
            v22 = *((_QWORD *)a5 + 4);
            if (!v22)
            {
              v21 = 0;
              goto LABEL_44;
            }
            v21 = 0;
            v25 = (_QWORD *)*((_QWORD *)a5 + 3);
            v26 = 8 * v22;
            while (1)
            {
              v27 = *(_QWORD *)(*v25 & 0xFFFFFFFFFFFFFFF0);
              if (*(_QWORD *)(v27 + 8) != (v27 & 0xFFFFFFFFFFFFFFF0))
                break;
              if (*(_BYTE *)(v27 + 16) != 36)
              {
                if (*(_BYTE *)(*(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
                {
                  v28 = v19;
                  v29 = v13;
                  v27 = sub_22F10CF48(v27);
                  v13 = v29;
                  v19 = v28;
                }
                else
                {
                  v27 = 0;
                }
              }
              v21 |= v27 != 0;
              ++v25;
              v26 -= 8;
              if (!v26)
                goto LABEL_11;
            }
          }
          v21 = 0;
          LOBYTE(v22) = 0;
LABEL_44:
          v23 = v18;
          goto LABEL_45;
        }
        v21 = 1;
      }
LABEL_11:
      LOBYTE(v22) = 0;
      if (!v13)
      {
        v23 = v18;
        if ((v21 & 1) != 0)
        {
          if (*(_QWORD *)(*(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0) + 8) != (*(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0)
            || (v24 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFFF0) + 8), (v24 & 8) != 0)
            && (*(_WORD *)((v24 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x180) != 0)
          {
LABEL_16:
            LOBYTE(v22) = 0;
            v21 = 1;
            goto LABEL_45;
          }
          LOBYTE(v22) = (*((_BYTE *)a5 + 2) & 2) == 0;
          v21 = 1;
          if (a4 && (*((_BYTE *)a5 + 2) & 2) == 0)
          {
            v30 = 0;
            v31 = 1;
            while (1)
            {
              v32 = a3[v30];
              v33 = *(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF0);
              v34 = (v32 & 0xF) == 0 && *(_QWORD *)(v33 + 8) == (v33 & 0xFFFFFFFFFFFFFFF0);
              if (!v34)
                goto LABEL_16;
              LODWORD(v22) = *(_DWORD *)(v33 + 16);
              if ((v22 & 0x800) != 0)
              {
                if ((sub_22F40AD24(v33) & 1) != 0)
                  goto LABEL_16;
                LOBYTE(v22) = *(_BYTE *)(v33 + 16);
              }
              if (v22 - 25 < 2)
                goto LABEL_16;
              v35 = (v22 & 0xFE) - 6;
              LOBYTE(v22) = v35 < 0xFFFFFFFC;
              v21 = 1;
              if (a4 != v31)
              {
                v30 = v31++;
                if (v35 < 0xFFFFFFFC)
                  continue;
              }
              break;
            }
          }
        }
LABEL_45:
        if ((v22 & 1) != 0 || v23 > 0xF)
          goto LABEL_68;
        v68[0] = &v69;
        v68[1] = (void *)0x1000000000;
        if (a4 < 0x11)
        {
          if (!a4)
            goto LABEL_56;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v36 = 0;
        v37 = 1;
        do
        {
          v38 = sub_22EF64498(a1, a3[v36]);
          v39 = LODWORD(v68[1]);
          if (LODWORD(v68[1]) >= (unint64_t)HIDWORD(v68[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v39 = LODWORD(v68[1]);
          }
          *((_QWORD *)v68[0] + v39) = v38;
          ++LODWORD(v68[1]);
          v36 = v37;
          v34 = a4 == v37++;
        }
        while (!v34);
LABEL_56:
        v65 = v67;
        v66 = 0x800000000;
        v40 = a5[1];
        v59 = *a5;
        v60 = v40;
        v41 = a5[3];
        v61 = a5[2];
        v62 = v41;
        v63 = a5[4];
        BYTE2(v59) &= ~2u;
        v42 = v58;
        if ((v21 & 1) == 0)
        {
          if ((v19 & 0x800) != 0)
          {
            v43 = *((_DWORD *)a5 + 4);
            if (v43 <= 0xB)
            {
              if (((1 << v43) & 0xE89) == 0)
              {
                if (((1 << v43) & 0x132) != 0)
                {
                  LODWORD(v60) = 5;
                  goto LABEL_64;
                }
                if (v43 != 2)
                  goto LABEL_64;
                v46 = *((_QWORD *)a5 + 4);
                if (v46)
                {
                  LODWORD(v47) = 0;
                  v48 = 0;
                  v49 = (uint64_t *)*((_QWORD *)a5 + 3);
                  v50 = 8 * v46;
                  do
                  {
                    v51 = *v49;
                    v52 = (uint64_t *)(*v49 & 0xFFFFFFFFFFFFFFF0);
                    v53 = *v52;
                    if (!*v52 || *(_BYTE *)(v53 + 16) != 36)
                    {
                      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v53 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
                      {
                        v53 = sub_22F10CF48(v53);
                        LODWORD(v47) = v66;
                      }
                      else
                      {
                        v53 = 0;
                      }
                    }
                    v54 = v53 != 0;
                    v55 = v52[1];
                    if (v47 >= HIDWORD(v66))
                    {
                      v56 = v53 != 0;
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      v54 = v56;
                      LODWORD(v47) = v66;
                    }
                    *((_QWORD *)v65 + v47) = v55 | v51 & 7;
                    v48 |= v54;
                    v47 = (v66 + 1);
                    LODWORD(v66) = v66 + 1;
                    ++v49;
                    v50 -= 8;
                  }
                  while (v50);
                  v42 = v58;
                  if ((v48 & 1) != 0)
                  {
                    LODWORD(v60) = 2;
                    *((_QWORD *)&v60 + 1) = v65;
                    *(_QWORD *)&v61 = v47;
                    goto LABEL_64;
                  }
                }
              }
              LODWORD(v60) = 0;
            }
          }
          else
          {
            v61 = 0u;
            v62 = 0u;
            v60 = 0u;
          }
        }
LABEL_64:
        v44 = sub_22EF63D48(a1, v42);
        sub_22EF63D8C(a1, v44, v68[0], LODWORD(v68[1]), &v59, 1);
        llvm::FoldingSetBase::FindNodeOrInsertPos();
        if (v65 != v67)
          free(v65);
        if (v68[0] != &v69)
          free(v68[0]);
LABEL_68:
        __asm { BR              X11 }
      }
      goto LABEL_44;
    }
  }
  if (v70[0] != v71)
    free(v70[0]);
  return v15;
}

unint64_t sub_22EF64498(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(sub_22EF60188(a1, *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(v3 + 16) & 0xFEu) - 2 <= 3)
    return sub_22EF5F824(a1, v3 & 0xFFFFFFFFFFFFFFF0);
  if (*(_DWORD *)(v3 + 16) - 25 <= 1)
    return sub_22EF5B848(a1, v3 & 0xFFFFFFFFFFFFFFF0, 0);
  return v3 & 0xFFFFFFFFFFFFFFF0;
}

uint64_t sub_22EF64524(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  int v3;

  if (a2 >= 0x10)
  {
    v2 = *(_QWORD *)(a1 + 2000);
    if ((*(_DWORD *)(v2 + 52) & 0x40000000) != 0)
    {
      v3 = 3;
      return sub_22EF5DD84(a1, a2, v3);
    }
    if ((*(_BYTE *)(v2 + 104) & 0x20) != 0)
    {
      v3 = 13;
      return sub_22EF5DD84(a1, a2, v3);
    }
  }
  return a2;
}

unint64_t sub_22EF64558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  unsigned int v8;
  unint64_t v10;

  v3 = *(_QWORD *)(a2 + 48);
  if (!v3)
  {
    if ((*(_BYTE *)(a2 + 96) & 3) != 0 || (v10 = sub_22E3CD31C((uint64_t *)(a2 + 96), a2)) == 0)
    {
      v7 = sub_22E3CD3D4(a1 + 2032, 40, 4);
      *(_QWORD *)v7 = v7;
      *(_QWORD *)(v7 + 8) = v7 & 0xFFFFFFFFFFFFFFF0;
      *(_DWORD *)(v7 + 16) = *(_DWORD *)(v7 + 16) & 0xFFF80000 | 0x61B;
      *(_QWORD *)(v7 + 24) = a2;
      *(_QWORD *)(v7 + 32) = a3;
      *(_QWORD *)(a2 + 48) = v7;
      v8 = *(_DWORD *)(a1 + 16);
      if (v8 >= *(_DWORD *)(a1 + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = *(_DWORD *)(a1 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v8) = v7;
      ++*(_DWORD *)(a1 + 16);
      v3 = *(_QWORD *)(a2 + 48);
    }
    else
    {
      v3 = *(_QWORD *)(v10 + 48);
      *(_QWORD *)(a2 + 48) = v3;
    }
  }
  return v3 & 0xFFFFFFFFFFFFFFF0;
}

unint64_t sub_22EF6462C(uint64_t a1, unint64_t a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(a2 + 28);
  v3 = v2 & 0x7F;
  if (a2 && (v3 - 42) >= 0xFFFFFFFD)
    return sub_22EF64680(a1, a2, 0);
  if (a2 && (v2 & 0x7Eu) - 38 >= 0xFFFFFFFC)
    return sub_22EF6477C(a1, a2);
  if (a2 && v3 == 33)
    return sub_22EF64864(a1, a2);
  if (v3 != 42)
    a2 = 0;
  return sub_22EF6494C(a1, a2);
}

unint64_t sub_22EF64680(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unsigned int v14;

  v3 = *(_QWORD *)(a2 + 48);
  if (v3)
    return v3 & 0xFFFFFFFFFFFFFFF0;
  if (a3 <= 0xF)
    a3 = *(_QWORD *)((*(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8) + ((2 * *(_QWORD *)(a2 + 80)) & 8));
  v8 = a3 & 0xFFFFFFFFFFFFFFF0;
  v9 = a3 & 7 | *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8);
  v10 = sub_22E3CD3D4(a1 + 2032, 32, 4);
  v11 = v10;
  v12 = *(_DWORD *)(*(_QWORD *)v8 + 16) & 0x1E00;
  v4 = v10 & 0xFFFFFFFFFFFFFFF0;
  if (v9 >= 0x10)
    v13 = v9;
  else
    v13 = v10 & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)v10 = v10;
  *(_QWORD *)(v10 + 8) = v13;
  *(_DWORD *)(v10 + 16) = v12 | *(_DWORD *)(v10 + 16) & 0xFFF80000 | 0x32;
  *(_QWORD *)(v10 + 24) = a2;
  *(_QWORD *)(a2 + 48) = v10;
  v14 = *(_DWORD *)(a1 + 16);
  if (v14 >= *(_DWORD *)(a1 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = *(_DWORD *)(a1 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v14) = v11;
  ++*(_DWORD *)(a1 + 16);
  return v4;
}

unint64_t sub_22EF6477C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  int v6;
  unsigned int v7;
  unint64_t v9;

  v2 = *(_QWORD *)(a2 + 48);
  if (!v2)
  {
    if ((*(_BYTE *)(a2 + 96) & 3) == 0
      && (v9 = sub_22E3CD31C((uint64_t *)(a2 + 96), a2)) != 0
      && (v2 = *(_QWORD *)(v9 + 48)) != 0)
    {
      *(_QWORD *)(a2 + 48) = v2;
    }
    else
    {
      v2 = sub_22E3CD3D4(a1 + 2032, 32, 4);
      v5 = sub_22EFC7ADC(a2 + 64);
      *(_QWORD *)v2 = v2;
      *(_QWORD *)(v2 + 8) = v2 & 0xFFFFFFFFFFFFFFF0;
      if (v5)
        v6 = 1581;
      else
        v6 = 45;
      *(_DWORD *)(v2 + 16) = *(_DWORD *)(v2 + 16) & 0xFFF80000 | v6;
      *(_QWORD *)(v2 + 24) = a2;
      *(_QWORD *)(a2 + 48) = v2;
      v7 = *(_DWORD *)(a1 + 16);
      if (v7 >= *(_DWORD *)(a1 + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v7 = *(_DWORD *)(a1 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v7) = v2;
      ++*(_DWORD *)(a1 + 16);
    }
  }
  return v2 & 0xFFFFFFFFFFFFFFF0;
}

unint64_t sub_22EF64864(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  int v6;
  unsigned int v7;
  unint64_t v9;

  v2 = *(_QWORD *)(a2 + 48);
  if (!v2)
  {
    if ((*(_BYTE *)(a2 + 96) & 3) == 0
      && (v9 = sub_22E3CD31C((uint64_t *)(a2 + 96), a2)) != 0
      && (v2 = *(_QWORD *)(v9 + 48)) != 0)
    {
      *(_QWORD *)(a2 + 48) = v2;
    }
    else
    {
      v2 = sub_22E3CD3D4(a1 + 2032, 32, 4);
      v5 = sub_22EFC7ADC(a2 + 64);
      *(_QWORD *)v2 = v2;
      *(_QWORD *)(v2 + 8) = v2 & 0xFFFFFFFFFFFFFFF0;
      if (v5)
        v6 = 1580;
      else
        v6 = 44;
      *(_DWORD *)(v2 + 16) = *(_DWORD *)(v2 + 16) & 0xFFF80000 | v6;
      *(_QWORD *)(v2 + 24) = a2;
      *(_QWORD *)(a2 + 48) = v2;
      v7 = *(_DWORD *)(a1 + 16);
      if (v7 >= *(_DWORD *)(a1 + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v7 = *(_DWORD *)(a1 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v7) = v2;
      ++*(_DWORD *)(a1 + 16);
    }
  }
  return v2 & 0xFFFFFFFFFFFFFFF0;
}

unint64_t sub_22EF6494C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v2 = *(_QWORD *)(a2 + 48);
  if (v2)
    return v2 & 0xFFFFFFFFFFFFFFF0;
  if ((*(_BYTE *)(a2 + 29) & 0x80) != 0)
  {
    v6 = sub_22EFB5D7C(a2);
    if (v6)
    {
      v2 = *(_QWORD *)(v6 + 48);
      if (v2)
      {
        *(_QWORD *)(a2 + 48) = v2;
        return v2 & 0xFFFFFFFFFFFFFFF0;
      }
    }
  }
  v7 = sub_22E3CD3D4(a1 + 2032, 32, 4);
  v3 = v7 & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)v7 = v7;
  *(_QWORD *)(v7 + 8) = v7 & 0xFFFFFFFFFFFFFFF0;
  *(_DWORD *)(v7 + 16) = *(_DWORD *)(v7 + 16) & 0xFFF80000 | 0x634;
  *(_QWORD *)(v7 + 24) = a2;
  *(_QWORD *)(a2 + 48) = v7;
  v8 = *(_DWORD *)(a1 + 16);
  if (v8 >= *(_DWORD *)(a1 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a1 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v8) = v7;
  ++*(_DWORD *)(a1 + 16);
  return v3;
}

unint64_t sub_22EF64A1C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t NodeOrInsertPos;
  uint64_t v7;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unsigned int v12;

  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v7 = NodeOrInsertPos - 24;
  }
  else
  {
    v9 = sub_22E3CD3D4(a1 + 2032, 40, 4);
    v7 = v9;
    v10 = *(_DWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1F00;
    v11 = v9 & 0xFFFFFFFFFFFFFFF0;
    if (a3 >= 0x10)
      v11 = a3;
    *(_QWORD *)v9 = v9;
    *(_QWORD *)(v9 + 8) = v11;
    *(_DWORD *)(v9 + 16) = v10 | *(_DWORD *)(v9 + 16) & 0xFFF80000 | 0x2B;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = a2;
    v12 = *(_DWORD *)(a1 + 16);
    if (v12 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v12 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v12) = v7;
    ++*(_DWORD *)(a1 + 16);
    llvm::FoldingSetBase::InsertNode();
  }
  return v7 & 0xFFFFFFFFFFFFFFF0;
}

unint64_t sub_22EF64B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t NodeOrInsertPos;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  void *v21[2];
  _QWORD v22[17];

  v22[16] = *MEMORY[0x24BDAC8D0];
  v21[0] = v22;
  v21[1] = (void *)0x2000000000;
  sub_22EF64DA8((uint64_t)v21, a2, a3, a4, a5);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v11 = NodeOrInsertPos - 24;
  }
  else
  {
    if (a5)
    {
      v12 = sub_22EF64B98(a1, a2, a3, a4, 0);
      v13 = sub_22E3CD3D4(a1 + 2032, 40, 4);
      v11 = v13;
      v14 = *(_DWORD *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x100;
      v15 = v13 & 0xFFFFFFFFFFFFFFF0;
      if (v12 >= 0x10)
        v15 = v12;
      *(_QWORD *)v13 = v13;
      *(_QWORD *)(v13 + 8) = v15;
      *(_DWORD *)(v13 + 16) = v14 | *(_DWORD *)(v13 + 16) & 0xFFF80000 | 0x62F;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = a5;
      llvm::FoldingSetBase::FindNodeOrInsertPos();
    }
    else
    {
      v16 = sub_22E3CD3D4(a1 + 2032, 40, 4);
      v11 = v16;
      *(_QWORD *)v16 = v16;
      *(_QWORD *)(v16 + 8) = v16 & 0xFFFFFFFFFFFFFFF0;
      if ((_DWORD)a4)
        v17 = 1839;
      else
        v17 = 1583;
      *(_DWORD *)(v16 + 16) = *(_DWORD *)(v16 + 16) & 0xFFF80000 | v17;
      *(_QWORD *)(v16 + 24) = 0;
      if ((_DWORD)a4)
        v18 = 0x8000;
      else
        v18 = 0;
      *(_DWORD *)(v16 + 32) = a2 & 0x7FFF | ((_DWORD)a3 << 16) | v18;
    }
    v19 = *(_DWORD *)(a1 + 16);
    if (v19 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v19 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v19) = v11;
    ++*(_DWORD *)(a1 + 16);
    llvm::FoldingSetBase::InsertNode();
  }
  if (v21[0] != v22)
    free(v21[0]);
  return v11 & 0xFFFFFFFFFFFFFFF0;
}

uint64_t sub_22EF64DA8(uint64_t result, int a2, int a3, int a4, uint64_t a5)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = *(_DWORD *)(result + 8);
  if (v5 >= *(_DWORD *)(result + 12))
  {
    v27 = result;
    v14 = a2;
    v15 = a3;
    v17 = a4;
    v21 = a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v14;
    a3 = v15;
    a4 = v17;
    a5 = v21;
    result = v27;
    v5 = *(_DWORD *)(v27 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v5) = a2;
  v6 = *(_DWORD *)(result + 12);
  v7 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v7;
  if (v7 >= v6)
  {
    v28 = result;
    v16 = a3;
    v18 = a4;
    v22 = a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a3 = v16;
    a4 = v18;
    a5 = v22;
    result = v28;
    v7 = *(_DWORD *)(v28 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v7) = a3;
  v8 = *(_DWORD *)(result + 12);
  v9 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v9;
  if (v9 >= v8)
  {
    v29 = result;
    v19 = a4;
    v23 = a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a4 = v19;
    a5 = v23;
    result = v29;
    v9 = *(_DWORD *)(v29 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v9) = a4;
  v10 = *(_DWORD *)(result + 12);
  v11 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v11;
  if (v11 >= v10)
  {
    v25 = result;
    v20 = a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a5 = v20;
    result = v25;
    v11 = *(_DWORD *)(v25 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v11) = a5;
  v12 = *(_DWORD *)(result + 12);
  v13 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v13;
  if (v13 >= v12)
  {
    v26 = result;
    v24 = HIDWORD(a5);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(a5) = v24;
    result = v26;
    v13 = *(_DWORD *)(v26 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v13) = HIDWORD(a5);
  ++*(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_22EF64F48(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unint64_t a5)
{
  unint64_t v8;
  unsigned int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v8 = sub_22EF64FE8(a1, a2, a4, a5);
  v9 = sub_22F11598C(v8);
  result = sub_22E3CD3D4(a1 + 2032, v9 + 8, 3);
  *(_QWORD *)result = v8;
  *(_DWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a4 + 272);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a4 + 276);
  v11 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = (_QWORD *)(result + 24);
    v14 = 32 * v11;
    do
    {
      *v13++ = *(_QWORD *)(*(_QWORD *)a4 + v12 + 24);
      v12 += 32;
    }
    while (v14 != v12);
  }
  return result;
}

unint64_t sub_22EF64FE8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  __int128 v13;
  unsigned int v14;
  unint64_t v15;
  void *v17;
  uint64_t v18;
  _QWORD v19[13];

  v19[12] = *MEMORY[0x24BDAC8D0];
  v17 = v19;
  v18 = 0x400000000;
  v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a3 + 8);
  }
  if (v8)
  {
    v9 = *(_QWORD *)a3;
    v10 = 32 * v8;
    do
    {
      v11 = sub_22E4EF088((uint64_t)&v17, v9, 1);
      v12 = (char *)v17 + 24 * v18;
      v13 = *(_OWORD *)v11;
      *((_QWORD *)v12 + 2) = *(_QWORD *)(v11 + 16);
      *(_OWORD *)v12 = v13;
      v14 = v18 + 1;
      LODWORD(v18) = v18 + 1;
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
  }
  else
  {
    v14 = v18;
  }
  v15 = sub_22EF6512C(a1, a2, (uint64_t)v17, v14, a4);
  if (v17 != v19)
    free(v17);
  return v15;
}

unint64_t sub_22EF6512C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  unint64_t v10;
  unint64_t v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v21;

  v8 = a2;
  v21 = a2;
  v10 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 6) == 4 && v10 != 0)
  {
    v8 = *(_QWORD *)(v10 + 16);
    v21 = v8;
  }
  v12 = sub_22F0F08CC(&v21);
  if (v12)
    v13 = (*(_DWORD *)(v12 + 28) & 0x7F) == 30;
  else
    v13 = 0;
  if (a5 <= 0xF)
  {
    v14 = sub_22EF65280(a1, v8, a3, a4);
    v13 = 0;
    v15 = 0;
  }
  else
  {
    v14 = *(_QWORD *)((a5 & 0xFFFFFFFFFFFFFFF0) + 8) | a5 & 7;
    v15 = 8;
    if (!v13)
      v15 = 0;
  }
  v16 = sub_22E3CD3D4(a1 + 2032, v15 + 24 * a4 + 40, 4);
  v17 = v16;
  if (v13)
    v18 = a5;
  else
    v18 = 0;
  sub_22F1145FC(v16, v8, a3, a4, v14, v18);
  v19 = *(_DWORD *)(a1 + 16);
  if (v19 >= *(_DWORD *)(a1 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v19 = *(_DWORD *)(a1 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v19) = v17;
  ++*(_DWORD *)(a1 + 16);
  return v17 & 0xFFFFFFFFFFFFFFF0;
}

unint64_t sub_22EF65280(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t NodeOrInsertPos;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  void *v16[2];
  _BYTE v17[128];
  void *v18;
  uint64_t v19;
  _QWORD v20[13];

  v20[12] = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 6) == 4 && v7 != 0)
    v15 = *(_QWORD *)(v7 + 16);
  sub_22EF65464(a1, &v15);
  v10 = v9;
  v18 = v20;
  v19 = 0x400000000;
  sub_22EF655C4(a1, a3, a4, &v18);
  v16[0] = v17;
  v16[1] = (void *)0x2000000000;
  sub_22F114774((uint64_t)v16, v10, (uint64_t)v18, v19, a1);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v12 = NodeOrInsertPos - 24;
  }
  else
  {
    v12 = sub_22E3CD3D4(a1 + 2032, 24 * v19 + 40, 4);
    sub_22F1145FC(v12, v10, (uint64_t)v18, v19, 0, 0);
    v14 = *(_DWORD *)(a1 + 16);
    if (v14 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v14) = v12;
    ++*(_DWORD *)(a1 + 16);
    llvm::FoldingSetBase::InsertNode();
  }
  if (v16[0] != v17)
    free(v16[0]);
  if (v18 != v20)
    free(v18);
  return v12 & 0xFFFFFFFFFFFFFFF0;
}

void sub_22EF65464(uint64_t a1, _QWORD *a2)
{
  char *v2;

  v2 = (char *)sub_22EF654A4 + 4 * byte_22F49EB65[sub_22F0F084C(a2)];
  __asm { BR              X10 }
}

unint64_t sub_22EF654A4()
{
  uint64_t v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;

  v2 = sub_22F0F08CC(v1);
  v3 = v2;
  if (v2 && (*(_DWORD *)(v2 + 28) & 0x7F) == 0x20)
    v3 = sub_22EF56FD4(v0, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3) & 0xFFFFFFFFFFFFFFF9;
}

void sub_22EF65544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, int a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  _QWORD *v14;
  _DWORD *v15;
  unint64_t v17;
  uint64_t v18;
  int v19;

  v15 = (_DWORD *)(*v14 & 0xFFFFFFFFFFFFFFF8);
  if ((*v14 & 6) != 2 || v15 == 0)
  {
    v17 = 0;
  }
  else if ((~*v15 & 3) != 0)
  {
    v17 = 0;
  }
  else
  {
    v17 = *v14 & 0xFFFFFFFFFFFFFFF8;
  }
  v18 = sub_22EF56FD4(v13, *(_QWORD *)(v17 + 16));
  v19 = *(_DWORD *)v17 >> 2;
  a11 = *(_QWORD *)(v17 + 24);
  a9 = 8;
  a10 = v19;
  sub_22EF6871C(&a9, (uint64_t)&a13);
  sub_22F36D860(v13, v18, (uint64_t)&a13);
  JUMPOUT(0x22EF65530);
}

uint64_t sub_22EF655C4(uint64_t a1, uint64_t a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;

  v6 = a3;
  sub_22EF769C4((uint64_t)a4, a3);
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *a4 + v7;
      sub_22EF6871C((unsigned int *)(a2 + v7), (uint64_t)&v11);
      *(_OWORD *)v9 = v11;
      *(_QWORD *)(v9 + 16) = v12;
      v8 |= sub_22F0EF184((unsigned int *)v9, (_DWORD *)(a2 + v7)) ^ 1;
      v7 += 24;
    }
    while (24 * v6 != v7);
  }
  else
  {
    LOBYTE(v8) = 0;
  }
  return v8 & 1;
}

unint64_t sub_22EF65684(uint64_t a1, int a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v8;
  uint64_t NodeOrInsertPos;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  void *v16[2];
  _QWORD v17[17];

  v8 = a2;
  v17[16] = *MEMORY[0x24BDAC8D0];
  v16[0] = v17;
  v16[1] = (void *)0x2000000000;
  sub_22EF65834((uint64_t)v16, a2, a3, a4, a5);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v13 = NodeOrInsertPos - 24;
  }
  else
  {
    v11 = a4;
    if (*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) != (*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0))
    {
      v11 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFFFF0) + 8) | a4 & 7;
      llvm::FoldingSetBase::FindNodeOrInsertPos();
    }
    if (a5)
      v12 = 56;
    else
      v12 = 48;
    v13 = sub_22E3CD3D4(a1 + 2032, v12, 4);
    sub_22EF76A50(v13, v8, a3, a4, v11, a5);
    v14 = *(_DWORD *)(a1 + 16);
    if (v14 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v14) = v13;
    ++*(_DWORD *)(a1 + 16);
    llvm::FoldingSetBase::InsertNode();
  }
  if (v16[0] != v17)
    free(v16[0]);
  return v13 & 0xFFFFFFFFFFFFFFF0;
}

uint64_t sub_22EF65834(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  v7 = result;
  v8 = *(_DWORD *)(result + 8);
  if (v8 >= *(_DWORD *)(result + 12))
  {
    v21 = a2;
    v23 = a3;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v21;
    a3 = v23;
    v8 = *(_DWORD *)(v7 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v7 + 4 * v8) = a2;
  v9 = *(_DWORD *)(v7 + 12);
  v10 = *(_DWORD *)(v7 + 8) + 1;
  *(_DWORD *)(v7 + 8) = v10;
  if (v10 >= v9)
  {
    v22 = a3;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    a3 = v22;
    v10 = *(_DWORD *)(v7 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v7 + 4 * v10) = a3;
  v11 = *(_DWORD *)(v7 + 12);
  v12 = *(_DWORD *)(v7 + 8) + 1;
  *(_DWORD *)(v7 + 8) = v12;
  if (v12 >= v11)
  {
    v24 = HIDWORD(a3);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(a3) = v24;
    v12 = *(_DWORD *)(v7 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v7 + 4 * v12) = HIDWORD(a3);
  v13 = *(_DWORD *)(v7 + 12);
  v14 = *(_DWORD *)(v7 + 8) + 1;
  *(_DWORD *)(v7 + 8) = v14;
  if (v14 >= v13)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = *(_DWORD *)(v7 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v7 + 4 * v14) = a4;
  v15 = *(_DWORD *)(v7 + 12);
  v16 = *(_DWORD *)(v7 + 8) + 1;
  *(_DWORD *)(v7 + 8) = v16;
  if (v16 >= v15)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v16 = *(_DWORD *)(v7 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v7 + 4 * v16) = HIDWORD(a4);
  v17 = *(_DWORD *)(v7 + 12);
  v18 = *(_DWORD *)(v7 + 8) + 1;
  *(_DWORD *)(v7 + 8) = v18;
  if (v18 >= v17)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v18 = *(_DWORD *)(v7 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v7 + 4 * v18) = a5;
  v19 = *(_DWORD *)(v7 + 12);
  v20 = *(_DWORD *)(v7 + 8) + 1;
  *(_DWORD *)(v7 + 8) = v20;
  if (v20 >= v19)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v20 = *(_DWORD *)(v7 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v7 + 4 * v20) = HIDWORD(a5);
  ++*(_DWORD *)(v7 + 8);
  return result;
}

unint64_t sub_22EF65A30(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5;
  uint64_t v10;
  uint64_t NodeOrInsertPos;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  void *v19[2];
  _QWORD v20[17];

  v5 = a5;
  v20[16] = *MEMORY[0x24BDAC8D0];
  if (a5 <= 0xF)
  {
    v10 = sub_22EF65C10(a1, a3);
    if (v10 != a3)
      v5 = sub_22EF65A30(a1, a2, v10, a4, 0);
  }
  v19[0] = v20;
  v19[1] = (void *)0x2000000000;
  sub_22EF65DE8((uint64_t)v19, a2, a3, a4);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v14 = (NodeOrInsertPos - 24) & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    v12 = sub_22E3CD3D4(a1 + 2032, 48, 4);
    v13 = sub_22F0AAC5C(a3);
    v14 = v12 & 0xFFFFFFFFFFFFFFF0;
    if (v5 >= 0x10)
      v15 = v5;
    else
      v15 = v12 & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)v12 = v12;
    *(_QWORD *)(v12 + 8) = v15;
    v16 = *(_DWORD *)(v12 + 16) & 0xF8000000 | (((2 * v13) & 0x10 | v13 & 1) << 8) | (a2 << 19) | 0x612;
    *(_QWORD *)(v12 + 24) = 0;
    *(_DWORD *)(v12 + 16) = v16;
    *(_QWORD *)(v12 + 32) = a3;
    *(_QWORD *)(v12 + 40) = a4;
    v17 = *(_DWORD *)(a1 + 16);
    if (v17 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v17 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v17) = v12;
    ++*(_DWORD *)(a1 + 16);
    llvm::FoldingSetBase::InsertNode();
  }
  if (v19[0] != v20)
    free(v19[0]);
  return v14;
}

uint64_t sub_22EF65C10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  v2 = a2;
  if (!a2)
    return v2;
  v3 = *(_QWORD *)(a2 + 16);
  if (!v3)
    return v2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = (v4 >> 1) & 3;
  if (v5 - 2 < 2)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0);
    v7 = *(unsigned __int8 *)(v6 + 16);
    if (v6)
      v8 = v7 == 18;
    else
      v8 = 0;
    if (v8)
    {
      v25 = a1;
    }
    else
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 18)
      {
LABEL_9:
        if (v6)
          v9 = v7 == 20;
        else
          v9 = 0;
        v10 = v6;
        if (v9
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 20
          && (v24 = v6, v26 = a1, v10 = sub_22F10CF48(v6), v6 = v24, a1 = v26, v10))
        {
          v21 = *(_QWORD *)(v10 + 32) | 6;
          *(_QWORD *)&v27 = 0;
          *((_QWORD *)&v27 + 1) = v21;
        }
        else
        {
          v27 = xmmword_22F4559B0;
        }
        v28 = v6;
        return sub_22F0AA9D0(a1, (uint64_t)&v27);
      }
      v23 = v6;
      v25 = a1;
      v20 = sub_22F10CF48(v6);
      if (!v20)
      {
        v6 = v23;
        a1 = v25;
        v7 = *(unsigned __int8 *)(v23 + 16);
        goto LABEL_9;
      }
      v6 = v20;
    }
    v18 = *(_QWORD *)(v6 + 32);
    v19 = *(_QWORD *)(v6 + 40);
    return sub_22F3E8BDC(v25, v18, v19);
  }
  v25 = a1;
  if (v5 != 1)
  {
    v18 = sub_22EF65C10(a1, v4 & 0xFFFFFFFFFFFFFFF8);
    if ((*(_BYTE *)(a2 + 8) & 6) != 0)
      v19 = 0;
    else
      v19 = *(_QWORD *)(a2 + 16);
    return sub_22F3E8BDC(v25, v18, v19);
  }
  v12 = *(_DWORD *)(v3 + 28) & 0x7F;
  if ((v12 - 35) < 3)
    return v2;
  v13 = *(_QWORD *)(a2 + 8) & 6;
  if (v12 == 16)
  {
    if (v13 == 2)
      v14 = *(_QWORD *)(a2 + 16);
    else
      v14 = 0;
  }
  else
  {
    if (v12 == 17 && v13 == 2)
      v14 = *(_QWORD *)(a2 + 16);
    else
      v14 = 0;
    do
    {
      v14 = *(_QWORD *)(v14 + 88);
      if (v14)
        v16 = (*(_DWORD *)(v14 + 28) & 0x7F) == 17;
      else
        v16 = 0;
    }
    while (v16);
  }
  v17 = sub_22EFD8B98(v14);
  return sub_22F3E8C08(v25, 0, v17);
}

uint64_t sub_22EF65DE8(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v5 = result;
  v6 = *(_DWORD *)(result + 8);
  if (v6 >= *(_DWORD *)(result + 12))
  {
    v15 = a2;
    v17 = a3;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v15;
    a3 = v17;
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v5 + 4 * v6) = a2;
  v7 = *(_DWORD *)(v5 + 12);
  v8 = *(_DWORD *)(v5 + 8) + 1;
  *(_DWORD *)(v5 + 8) = v8;
  if (v8 >= v7)
  {
    v16 = a3;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    a3 = v16;
    v8 = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v5 + 4 * v8) = a3;
  v9 = *(_DWORD *)(v5 + 12);
  v10 = *(_DWORD *)(v5 + 8) + 1;
  *(_DWORD *)(v5 + 8) = v10;
  if (v10 >= v9)
  {
    v18 = HIDWORD(a3);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(a3) = v18;
    v10 = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v5 + 4 * v10) = HIDWORD(a3);
  v11 = *(_DWORD *)(v5 + 12);
  v12 = *(_DWORD *)(v5 + 8) + 1;
  *(_DWORD *)(v5 + 8) = v12;
  if (v12 >= v11)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v5 + 4 * v12) = a4;
  v13 = *(_DWORD *)(v5 + 12);
  v14 = *(_DWORD *)(v5 + 8) + 1;
  *(_DWORD *)(v5 + 8) = v14;
  if (v14 >= v13)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v5 + 4 * v14) = HIDWORD(a4);
  ++*(_DWORD *)(v5 + 8);
  return result;
}

unint64_t sub_22EF65F64(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t NodeOrInsertPos;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  void *v20;
  uint64_t v21;
  _BYTE v22[384];
  void *v23[2];
  _QWORD v24[18];

  v24[16] = *MEMORY[0x24BDAC8D0];
  v23[0] = v24;
  v23[1] = (void *)0x2000000000;
  sub_22F40A470((uint64_t)v23, a1, a2, a3, a4, a5, a6);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v13 = NodeOrInsertPos - 24;
  }
  else
  {
    v15 = sub_22EF65C10(a1, a3);
    if (a2 == 6)
      v16 = 5;
    else
      v16 = a2;
    v20 = v22;
    v21 = 0x1000000000;
    v17 = sub_22EF655C4(a1, a5, a6, &v20);
    if ((_DWORD)v16 == a2 && !v17 && v15 == a3)
    {
      v18 = 0;
    }
    else
    {
      v18 = sub_22EF65F64(a1, v16, v15, a4, v20, v21);
      llvm::FoldingSetBase::FindNodeOrInsertPos();
    }
    v13 = sub_22E3CD3D4(a1 + 2032, 24 * a6 + 48, 4);
    sub_22F40A378(v13, a2, a3, a4, a5, a6, v18);
    v19 = *(_DWORD *)(a1 + 16);
    if (v19 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v19 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v19) = v13;
    ++*(_DWORD *)(a1 + 16);
    llvm::FoldingSetBase::InsertNode();
    if (v20 != v22)
      free(v20);
  }
  if (v23[0] != v24)
    free(v23[0]);
  return v13 & 0xFFFFFFFFFFFFFFF0;
}

double sub_22EF661A0@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (a2 && v6 == 38)
  {
    v7 = *(_QWORD *)(a2 + 48);
    if (v7)
    {
      v8 = v7 & 0xFFFFFFFFFFFFFFF0;
    }
    else
    {
      v8 = sub_22EF6462C(a1, a2);
      v7 = *(_QWORD *)(a2 + 48);
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                   + 8) & 0xFFFFFFFFFFFFFFF0)
                                           + 8) & 0xFFFFFFFFFFFFFFF0)
                   + 33) & 0x80) != 0)
      v8 = sub_22EF663B4(a1, v8, 0);
    *(_DWORD *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v8;
  }
  else if (a2 && v6 == 59)
  {
    v9 = *(_QWORD *)(a2 + 48);
    v10 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
    if (v10 && *(_BYTE *)(v10 + 16) == 36)
      v9 = *(_QWORD *)(v10 + 32);
    v20 = v9;
    v11 = sub_22F1133DC(&v20, a1);
    v12 = v11 | (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16) == 45);
    v13 = (_DWORD *)sub_22E3CD3D4(a1 + 2032, 32, 3);
    v14 = sub_22E8BBBD0(*(_QWORD *)(a2 + 48));
    v15 = *(_DWORD *)(a2 + 24);
    v20 = 0;
    sub_22EFF69F0((uint64_t)v13, a1, a2, 0, v12, v14, v15, &v20, 0);
    if (*(_BYTE *)(a2 + 80))
    {
      v16 = sub_22E3CD3D4(a1 + 2032, 32, 3);
      v13 = (_DWORD *)sub_22EDA4684(v16, *(_QWORD *)(a1 + 16832), v13, *(_DWORD *)(a2 + 24), 0);
    }
    *(_DWORD *)a3 = 7;
    *(_QWORD *)(a3 + 8) = v13;
  }
  else
  {
    if (*(_BYTE *)(a2 + 80))
      v17 = 6;
    else
      v17 = 5;
    *(_QWORD *)a3 = v17;
    *(_QWORD *)(a3 + 8) = a2 & 0xFFFFFFFFFFFFFFF9;
  }
  if (sub_22EFC7864(a2))
  {
    v19 = sub_22E3CD3D4(a1 + 2032, 24, 3);
    *(_OWORD *)v19 = *(_OWORD *)a3;
    *(_QWORD *)(v19 + 16) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)&result = 0x100000008;
    *(_QWORD *)a3 = 0x100000008;
    *(_QWORD *)(a3 + 8) = v19;
  }
  return result;
}

unint64_t sub_22EF663B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t NodeOrInsertPos;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  void *v17[2];
  _QWORD v18[17];

  v18[16] = *MEMORY[0x24BDAC8D0];
  v17[0] = v18;
  v17[1] = (void *)0x2000000000;
  sub_22EF6666C((uint64_t)v17, a2, a3);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v7 = (NodeOrInsertPos - 24) & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    if (*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) == (*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0))
    {
      v9 = 0;
    }
    else
    {
      v9 = sub_22EF663B4(a1, *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7, a3, 0);
      llvm::FoldingSetBase::FindNodeOrInsertPos();
    }
    v10 = sub_22E3CD3D4(a1 + 2032, 40, 4);
    v11 = v10;
    v12 = *(_DWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1800;
    v7 = v10 & 0xFFFFFFFFFFFFFFF0;
    if (v9 >= 0x10)
      v13 = v9;
    else
      v13 = v10 & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)v10 = v10;
    *(_QWORD *)(v10 + 8) = v13;
    v14 = v12 | *(_DWORD *)(v10 + 16) & 0xFFF80000 | 0x624;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = a2;
    if ((a3 & 0xFF00000000) != 0)
      v15 = a3 + 1;
    else
      v15 = 0;
    *(_DWORD *)(v10 + 16) = v14;
    *(_DWORD *)(v10 + 20) = v15;
    v16 = *(_DWORD *)(a1 + 16);
    if (v16 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v16 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v16) = v11;
    ++*(_DWORD *)(a1 + 16);
    llvm::FoldingSetBase::InsertNode();
  }
  if (v17[0] != v18)
    free(v17[0]);
  return v7;
}

__n128 sub_22EF66594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  __n128 *v9;
  __n128 *v10;
  uint64_t v11;
  __n128 result;
  _BYTE v13[24];

  v5 = *(_DWORD *)(a2 + 12) & 0x1FFFFFFF;
  if (v5 + (unint64_t)*(unsigned int *)(a3 + 8) > *(unsigned int *)(a3 + 12))
  {
    v11 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v11;
    v5 = *(_DWORD *)(v11 + 12) & 0x1FFFFFFF;
  }
  if ((_DWORD)v5)
  {
    v6 = (unint64_t *)(a2 + 16);
    v7 = 8 * v5;
    do
    {
      v8 = *v6++;
      sub_22EF661A0(a1, v8, (uint64_t)v13);
      v9 = (__n128 *)sub_22E4EF088(a3, (unint64_t)v13, 1);
      v10 = (__n128 *)(*(_QWORD *)a3 + 24 * *(unsigned int *)(a3 + 8));
      result = *v9;
      v10[1].n128_u64[0] = v9[1].n128_u64[0];
      *v10 = result;
      ++*(_DWORD *)(a3 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_22EF6666C(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_DWORD *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12))
  {
    v17 = result;
    v10 = a2;
    v11 = a3;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v10;
    a3 = v11;
    result = v17;
    v3 = *(_DWORD *)(v17 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v3) = a2;
  v4 = *(_DWORD *)(result + 12);
  v5 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v5;
  if (v5 >= v4)
  {
    v18 = result;
    v12 = HIDWORD(a2);
    v13 = a3;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(a2) = v12;
    a3 = v13;
    result = v18;
    v5 = *(_DWORD *)(v18 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v5) = HIDWORD(a2);
  v6 = *(_DWORD *)(result + 12);
  v7 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v7;
  v8 = a3 & 0xFF00000000;
  if (v7 >= v6)
  {
    v19 = result;
    v14 = a3;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(a3) = v14;
    result = v19;
    v7 = *(_DWORD *)(v19 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v7) = v8 != 0;
  v9 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v9;
  if (v8)
  {
    v15 = a3;
    v16 = result;
    if (v9 >= *(_DWORD *)(result + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v9 = *(_DWORD *)(v16 + 8);
    }
    *(_DWORD *)(*(_QWORD *)v16 + 4 * v9) = v15;
    ++*(_DWORD *)(v16 + 8);
  }
  return result;
}

unint64_t sub_22EF667E8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v11;
  unint64_t v12;
  uint64_t NodeOrInsertPos;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t *__src;
  unint64_t v53;
  int v54;
  unint64_t v55;
  void *__base;
  size_t __nel;
  _BYTE v58[64];
  void *v59;
  uint64_t v60;
  _BYTE v61[32];
  void *v62[2];
  _QWORD v63[18];

  v11 = a3;
  v12 = a2;
  v63[16] = *MEMORY[0x24BDAC8D0];
  if (!a4 && !a6 && (a7 & 1) == 0 && *(_BYTE *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) == 34)
    return v12;
  v62[0] = v63;
  v62[1] = (void *)0x2000000000;
  sub_22F40A93C((uint64_t)v62, a2, a3, a4, a5, a6, a7);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (!NodeOrInsertPos)
  {
    v51 = a1;
    __src = v11;
    if (a4)
    {
      v17 = &v11[a4];
      v18 = a4;
      goto LABEL_12;
    }
    v25 = sub_22E4EBB74(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0));
    if (v25)
    {
      v11 = (uint64_t *)sub_22F10E414(v25);
      v17 = &v11[v26];
      if (v26)
      {
        v18 = v26;
LABEL_12:
        v19 = v11 + 1;
        do
        {
          v20 = *(_QWORD *)(*(v19 - 1) & 0xFFFFFFFFFFFFFFF0);
          v21 = v20 & 0xFFFFFFFFFFFFFFF0;
          v22 = *(_QWORD *)(v20 + 8);
          v23 = v22 == v21;
        }
        while (v22 == v21 && v19++ != v17);
        v53 = v18;
        v50 = 0;
LABEL_24:
        if (!a6)
        {
LABEL_25:
          if (v23)
          {
            v27 = v53;
            if (*(_QWORD *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 8) == (*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0))
            {
              v28 = 0;
              v29 = v51;
LABEL_73:
              v16 = sub_22E3CD3D4(v29 + 2032, (8 * (a6 + a4) + 48), 4);
              *(_QWORD *)(sub_22F409BC0(v16, v28, v12, __src, a4, a5, a6, a7) + 40) = 0;
              v49 = *(_DWORD *)(v29 + 16);
              if (v49 >= *(_DWORD *)(v29 + 20))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v49 = *(_DWORD *)(v29 + 16);
              }
              *(_QWORD *)(*(_QWORD *)(v29 + 8) + 8 * v49) = v16;
              ++*(_DWORD *)(v29 + 16);
              llvm::FoldingSetBase::InsertNode();
              goto LABEL_8;
            }
            v59 = v61;
            v60 = 0x400000000;
            __base = v58;
            __nel = 0x800000000;
            goto LABEL_68;
          }
          v59 = v61;
          v60 = 0x400000000;
          v32 = 1;
          v27 = v53;
          goto LABEL_39;
        }
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a5 + 32))(*a5) == *a5)
        {
          if (a6 == 1)
            goto LABEL_25;
          v30 = 0;
          v31 = 1;
          while ((sub_22EFC5BC0(*(_QWORD *)(a5[v30] + 40), *(_QWORD *)(a5[v31] + 40)) & 0x80000000) != 0
               && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5[v31] + 32))(a5[v31]) == a5[v31])
          {
            v31 = (v30 + 2);
            ++v30;
            if (a6 == v31)
              goto LABEL_25;
          }
        }
        v59 = v61;
        v60 = 0x400000000;
        v27 = v53;
        if (v23)
        {
          __base = v58;
          __nel = 0x800000000;
          goto LABEL_44;
        }
        v32 = 0;
LABEL_39:
        if (v27 < 5)
        {
          v34 = 0;
        }
        else
        {
          v33 = v32;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v33;
          v34 = v60;
        }
        if ((v50 & 1) == 0)
        {
          do
          {
            v38 = *v11;
            v39 = *(_QWORD *)((*v11 & 0xFFFFFFFFFFFFFFF0) + 8);
            if (v34 >= HIDWORD(v60))
            {
              v54 = v32;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v32 = v54;
              v34 = v60;
            }
            *((_QWORD *)v59 + v34) = v38 & 7 | v39;
            v34 = v60 + 1;
            LODWORD(v60) = v60 + 1;
            ++v11;
          }
          while (v11 != v17);
        }
        v11 = (uint64_t *)v59;
        v27 = v34;
        __base = v58;
        __nel = 0x800000000;
        if ((v32 & 1) != 0)
        {
LABEL_68:
          v48 = a6;
          v36 = (char *)a5;
          v29 = v51;
LABEL_69:
          v28 = sub_22EF667E8(v29, *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 8) | v12 & 7, v11, v27, v36, v48, a7);
          llvm::FoldingSetBase::FindNodeOrInsertPos();
          if (__base != v58)
            free(__base);
          if (v59 != v61)
            free(v59);
          goto LABEL_73;
        }
LABEL_44:
        sub_22F2633B0((uint64_t)&__base, a5, &a5[a6]);
        v35 = __nel;
        v29 = v51;
        if (__nel >= 2)
        {
          qsort(__base, __nel, 8uLL, (int (__cdecl *)(const void *, const void *))sub_22EF76B1C);
          v35 = __nel;
        }
        v36 = (char *)__base;
        if (v35)
        {
          v55 = v27;
          v40 = 8 * v35;
          do
          {
            *(_QWORD *)v36 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v36 + 32))(*(_QWORD *)v36);
            v36 += 8;
            v40 -= 8;
          }
          while (v40);
          v36 = (char *)__base;
          v37 = (char *)__base + 8 * __nel;
          v41 = (char *)__base;
          v27 = v55;
          if ((_DWORD)__nel)
          {
            v42 = 0;
            while (8 * __nel - 8 != v42)
            {
              v44 = *(_QWORD *)((char *)__base + v42);
              v43 = *(_QWORD *)((char *)__base + v42 + 8);
              v42 += 8;
              if (v44 == v43)
              {
                v41 = (char *)__base + v42 - 8;
                goto LABEL_59;
              }
            }
          }
          else
          {
LABEL_59:
            if (v41 != v37)
            {
              v45 = v41 + 16;
              if (v41 + 16 != v37)
              {
                v46 = *(_QWORD *)v41;
                do
                {
                  v47 = v46;
                  v46 = *(_QWORD *)v45;
                  if (v47 != *(_QWORD *)v45)
                  {
                    *((_QWORD *)v41 + 1) = v46;
                    v41 += 8;
                  }
                  v45 += 8;
                }
                while (v45 != v37);
              }
              v37 = v41 + 8;
            }
          }
        }
        else
        {
          v37 = (char *)__base;
        }
        LODWORD(__nel) = (unint64_t)(v37 - v36) >> 3;
        v48 = __nel;
        goto LABEL_69;
      }
      v53 = 0;
      v50 = 1;
    }
    else
    {
      v53 = 0;
      v50 = 1;
      v17 = v11;
    }
    v23 = 1;
    goto LABEL_24;
  }
  v16 = NodeOrInsertPos - 40;
LABEL_8:
  v12 = v16 & 0xFFFFFFFFFFFFFFF0;
  if (v62[0] != v63)
    free(v62[0]);
  return v12;
}

unint64_t sub_22EF66DE0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, _BYTE *a5, int a6)
{
  unint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BOOL4 v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[9];

  v9 = a2;
  v34[8] = *MEMORY[0x24BDAC8D0];
  *a5 = 0;
  v11 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v13 = *(unsigned __int8 *)(v12 + 16);
  if (a6 && v12 && v13 == 32)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFFFF0);
    if (v24)
      v25 = *(unsigned __int8 *)(v24 + 16) - 35 > 0xFFFFFFFD;
    else
      v25 = 0;
    if (!v25)
      v24 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFFFF0));
    v32 = v34;
    v33 = 0x800000000;
    v26 = *(_QWORD *)(v24 + 16);
    v27 = (_BYTE *)(v24 + 48 + 8 * ((v26 >> 19) & 0x7F));
    sub_22F2633B0((uint64_t)&v32, v27, &v27[8 * (v26 >> 26)]);
    sub_22F2633B0((uint64_t)&v32, a3, &a3[a4]);
    v28 = sub_22EF667E8(a1, *(_QWORD *)(v24 + 24), (uint64_t *)(v24 + 48), (*(_QWORD *)(v24 + 16) >> 19) & 0x7FLL, (uint64_t *)v32, v33, HIDWORD(*(_QWORD *)(v24 + 16)) & 1);
    v9 = sub_22F36CC4C(a1, v28);
    if (v32 != v34)
      free(v32);
    return v9;
  }
  if ((v13 - 35) >= 0xFFFFFFFE)
  {
    v21 = *(_QWORD *)(v12 + 16);
    a2 = *(_QWORD *)(v12 + 24);
    v16 = (uint64_t *)(v12 + 48);
    v17 = (v21 >> 19) & 0x7F;
    v20 = HIDWORD(v21) & 1;
    v15 = a1;
    v18 = a3;
    v19 = a4;
    return sub_22EF667E8(v15, a2, v16, v17, v18, v19, v20);
  }
  v14 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if ((v14 - 33) <= 1)
  {
    v15 = a1;
    v16 = 0;
    v17 = 0;
    v18 = a3;
    v19 = a4;
    v20 = 0;
    return sub_22EF667E8(v15, a2, v16, v17, v18, v19, v20);
  }
  if (v13 != 32)
  {
    if (v14 != 32)
      goto LABEL_13;
    v12 = sub_22F10CF48(v12);
    if (!v12)
    {
      v12 = *v11;
      if (!*v11)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  v23 = sub_22E5761BC(v12);
  v12 = *v11;
  if (v23)
  {
    if (!v12 || *(_BYTE *)(v12 + 16) != 32)
      v12 = sub_22F10CF48(v12);
    v29 = *(_QWORD *)(a1 + 16888);
    goto LABEL_37;
  }
LABEL_13:
  if (!v12)
  {
LABEL_15:
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
      goto LABEL_18;
    v12 = sub_22F10CF48(v12);
    if (!v12)
      goto LABEL_18;
    goto LABEL_17;
  }
LABEL_14:
  if (*(_BYTE *)(v12 + 16) != 32)
    goto LABEL_15;
LABEL_17:
  if (!sub_22E509ED0(v12))
  {
LABEL_18:
    *a5 = 1;
    return v9;
  }
  v12 = *v11;
  if (!*v11 || *(_BYTE *)(v12 + 16) != 32)
    v12 = sub_22F10CF48(v12);
  v29 = *(_QWORD *)(a1 + 16896);
LABEL_37:
  v30 = sub_22F36CE1C(v12);
  v31 = sub_22EF667E8(a1, v29, 0, 0, a3, a4, v30);
  return sub_22F36CC4C(a1, v31);
}

uint64_t sub_22EF670E0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;

  v4 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  result = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (!result || *(_BYTE *)(result + 16) != 32)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
      return 0;
    result = sub_22F10CF48(result);
    if (!result)
      return result;
  }
  result = sub_22E491464(result);
  if ((_DWORD)result)
  {
    v6 = *v4;
    if (*v4 && *(_BYTE *)(v6 + 16) == 32
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
      && (v6 = sub_22F10CF48(v6)) != 0)
    {
      v8 = sub_22F3174CC(v6);
      if (v8 == v9)
      {
        v7 = 1;
        LODWORD(v6) = 1;
      }
      else
      {
        v10 = v9;
        v11 = v8 + 8;
        do
        {
          LODWORD(v6) = sub_22EFDDC98(a3, *(_QWORD *)(v11 - 8), 0, 0);
          if ((_DWORD)v6)
            v12 = v11 == v10;
          else
            v12 = 1;
          v11 += 8;
        }
        while (!v12);
        v7 = 1;
      }
    }
    else
    {
      v7 = 0;
    }
    return v7 & v6;
  }
  return result;
}

uint64_t sub_22EF671D4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  _BYTE v39[64];

  v5 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (!v6 || *(_BYTE *)(v6 + 16) != 32)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
      return 0;
    v6 = sub_22F10CF48(v6);
    if (!v6)
      return 0;
  }
  if (!sub_22E491464(v6))
    return 0;
  v7 = *v5;
  if (!v7 || *(_BYTE *)(v7 + 16) != 32)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
      return 0;
    v7 = sub_22F10CF48(v7);
    if (!v7)
      return 0;
  }
  v8 = *(_QWORD *)(a3 + 120);
  if (!v8)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a3 + 96) + 88), *(_QWORD *)(a3 + 96));
    v8 = *(_QWORD *)(a3 + 120);
  }
  if (v8 < 8)
    return 0;
  v35 = (uint64_t *)v39;
  v36 = (uint64_t *)v39;
  v37 = 8;
  v38 = 0;
  sub_22EF5D228(a1, a3, (uint64_t)&v35);
  v9 = 0;
  if (HIDWORD(v37) != v38)
  {
    v11 = sub_22F3174CC(v7);
    if ((uint64_t *)v11 != v12)
    {
      v13 = (uint64_t *)v11;
      v14 = v12;
      while (1)
      {
        v15 = *v13;
        v16 = v36 == v35 ? (uint64_t *)((char *)&v37 + 4) : &v37;
        v17 = *(unsigned int *)v16;
        if ((_DWORD)v17)
        {
          v18 = 8 * v17;
          v19 = v36;
          while ((unint64_t)*v19 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v19;
            v18 -= 8;
            if (!v18)
              goto LABEL_37;
          }
        }
        else
        {
          v19 = v36;
        }
        v20 = (char *)&v36[v17];
        if (v19 == (uint64_t *)v20)
          break;
        v21 = *v19;
LABEL_31:
        if ((sub_22EF674A4(a1, v15, v21) & 1) == 0)
        {
          while (1)
          {
            if (++v19 == (uint64_t *)v20)
              goto LABEL_37;
            v21 = *v19;
            if ((unint64_t)*v19 < 0xFFFFFFFFFFFFFFFELL)
              goto LABEL_31;
          }
        }
        ++v13;
        v9 = 1;
        if (v13 == v14)
          goto LABEL_14;
      }
    }
LABEL_37:
    if (v36 == v35)
      v22 = (uint64_t *)((char *)&v37 + 4);
    else
      v22 = &v37;
    v23 = *(unsigned int *)v22;
    if ((_DWORD)v23)
    {
      v24 = 8 * v23;
      v25 = v36;
      v9 = 1;
      while ((unint64_t)*v25 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v25;
        v24 -= 8;
        if (!v24)
          goto LABEL_14;
      }
    }
    else
    {
      v25 = v36;
    }
    v26 = (char *)&v36[v23];
    if (v25 != (uint64_t *)v26)
    {
      v27 = *v25;
      v28 = sub_22F3174CC(v7);
      if ((uint64_t *)v28 == v29)
      {
        v9 = 0;
        goto LABEL_14;
      }
      v30 = (uint64_t *)v28;
      v31 = v29;
LABEL_50:
      while (!sub_22EF674A4(a1, v27, *v30))
      {
        v9 = 0;
        if (++v30 == v31)
          goto LABEL_14;
      }
      v32 = (unint64_t *)(v25 + 1);
      while (v32 != (unint64_t *)v26)
      {
        v33 = *v32++;
        v27 = v33;
        if (v33 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v30 = (uint64_t *)sub_22F3174CC(v7);
          v31 = v34;
          v9 = 0;
          v25 = (uint64_t *)(v32 - 1);
          if (v30 != v34)
            goto LABEL_50;
          goto LABEL_14;
        }
      }
    }
    v9 = 1;
  }
LABEL_14:
  if (v36 != v35)
    free(v36);
  return v9;
}

uint64_t sub_22EF674A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;

  if (a2)
  {
    if (a3)
    {
      if (a2 == a3)
        return 1;
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      if (v6 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3))
        return 1;
    }
  }
  v8 = sub_22F259248(a3);
  if (v8 == v9)
    return 0;
  v10 = v9;
  v11 = v8 + 8;
  do
  {
    result = sub_22EF674A4(a1, a2, *(_QWORD *)(v11 - 8));
    if ((result & 1) != 0)
      break;
    v12 = v11 == v10;
    v11 += 8;
  }
  while (!v12);
  return result;
}

unint64_t sub_22EF67558(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t NodeOrInsertPos;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  int v10;
  int v11;
  unint64_t v12;
  _QWORD v13[2];
  char v14;
  uint64_t v15;
  void *v16[2];
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  if ((a2[1] & 0x80) != 0)
  {
    v15 = a1;
    v16[0] = v17;
    v16[1] = (void *)0x2000000000;
    v14 = 1;
    v13[0] = &off_24FAC6E70;
    v13[1] = v16;
    sub_22F0E9FEC(v13, a2);
    v13[0] = 0;
    NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
    if (NodeOrInsertPos)
    {
      v5 = NodeOrInsertPos - 32;
      v6 = sub_22E3CD3D4(a1 + 2032, 32, 4);
      sub_22F11405C(v6, (unsigned int *)a2, v5 & 0xFFFFFFFFFFFFFFF0);
    }
    else
    {
      v6 = sub_22E3CD3D4(a1 + 2032, 48, 4);
      v9 = *(_DWORD *)a2;
      v10 = (*(_DWORD *)a2 & 0x18000) != 0;
      v11 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF0) + 16);
      *(_QWORD *)v6 = v6;
      *(_QWORD *)(v6 + 8) = v6 & 0xFFFFFFFFFFFFFFF0;
      *(_DWORD *)(v6 + 16) = *(_DWORD *)(v6 + 16) & 0xFFF80000 | (v9 >> 5) & 0x1300 | (v10 << 10) | v11 & 0x800 | 0x30;
      *(_QWORD *)(v6 + 24) = a2;
      *(_QWORD *)(v6 + 32) = 0;
      *(_QWORD *)(v6 + 40) = a1;
      llvm::FoldingSetBase::InsertNode();
    }
    if (v16[0] != v17)
      free(v16[0]);
  }
  else
  {
    v12 = *((_QWORD *)a2 + 1) & 7 | *(_QWORD *)((*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF0) + 8);
    v6 = sub_22E3CD3D4(a1 + 2032, 32, 4);
    sub_22F11405C(v6, (unsigned int *)a2, v12);
  }
  v7 = *(_DWORD *)(a1 + 16);
  if (v7 >= *(_DWORD *)(a1 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a1 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v7) = v6;
  ++*(_DWORD *)(a1 + 16);
  return v6 & 0xFFFFFFFFFFFFFFF0;
}

unint64_t sub_22EF67758(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;

  v2 = (*(_DWORD *)a2 >> 8) & 3;
  if (!v2)
    return *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  if (v2 == 1)
    return sub_22EF5F8C4(a1, v4, 1);
  else
    return sub_22EF5FB8C(a1, v4);
}

unint64_t sub_22EF67788(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t NodeOrInsertPos;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;
  void *v14[2];
  _QWORD v15[17];

  v15[16] = *MEMORY[0x24BDAC8D0];
  if ((a2[1] & 0x40) != 0)
  {
    v13 = a1;
    v14[0] = v15;
    v14[1] = (void *)0x2000000000;
    v12 = 1;
    v11[0] = &off_24FAC6E70;
    v11[1] = v14;
    sub_22F0E9FEC(v11, a2);
    v11[0] = 0;
    NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
    if (NodeOrInsertPos)
    {
      v7 = NodeOrInsertPos - 40;
    }
    else
    {
      v7 = sub_22E3CD3D4(a1 + 2032, 56, 4);
      sub_22F114128(v7, a1, (unsigned int *)a2);
      llvm::FoldingSetBase::InsertNode();
    }
    v8 = sub_22E3CD3D4(a1 + 2032, 40, 4);
    sub_22F1140B8(v8, (uint64_t)a2, a3, v7 & 0xFFFFFFFFFFFFFFF0);
    if (v14[0] != v15)
      free(v14[0]);
  }
  else
  {
    v8 = sub_22E3CD3D4(a1 + 2032, 40, 4);
    sub_22F1140B8(v8, (uint64_t)a2, a3, *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) | a3 & 7);
  }
  v9 = *(_DWORD *)(a1 + 16);
  if (v9 >= *(_DWORD *)(a1 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a1 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v9) = v8;
  ++*(_DWORD *)(a1 + 16);
  return v8 & 0xFFFFFFFFFFFFFFF0;
}

unint64_t sub_22EF67944(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t NodeOrInsertPos;
  unint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unsigned int v24;
  void *v25;
  uint64_t v26;
  _BYTE v27[96];
  void *v28[2];
  _QWORD v29[18];

  v29[16] = *MEMORY[0x24BDAC8D0];
  if (a2 <= 0xF && !(_DWORD)a3 && !a6 && (a4 & 1) == 0)
    return sub_22EF67C08(a1);
  v28[0] = v29;
  v28[1] = (void *)0x2000000000;
  sub_22F115380((uint64_t)v28, a1, a2, a3, a4, a6, a7, a8);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v19 = NodeOrInsertPos - 32;
  }
  else
  {
    if ((a9 & 1) != 0)
    {
      v20 = a5;
      v21 = 0;
    }
    else
    {
      v20 = a5;
      if (a2 > 0xF)
      {
        v21 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7;
      }
      else
      {
        v25 = v27;
        v26 = 0x400000000;
        if (sub_22EF655C4(a1, a7, a8, &v25))
        {
          v21 = sub_22EF67944(a1, 0, a3, a4, a5, a6, v25, v26, 1);
          llvm::FoldingSetBase::FindNodeOrInsertPos();
        }
        else
        {
          v21 = 0;
        }
        if (v25 != v27)
          free(v25);
      }
    }
    v22 = sub_22E3CD3D4(a1 + 2032, 24 * a8 + 48, 4);
    v19 = v22;
    if ((_DWORD)a4)
      v23 = 6;
    else
      v23 = 0;
    sub_22F40AF14(v22, a2, a3, v23 | v20, v21, a6, a7, a8);
    v24 = *(_DWORD *)(a1 + 16);
    if (v24 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v24 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v24) = v19;
    ++*(_DWORD *)(a1 + 16);
    llvm::FoldingSetBase::InsertNode();
  }
  if (v28[0] != v29)
    free(v28[0]);
  return v19 & 0xFFFFFFFFFFFFFFF0;
}

unint64_t sub_22EF67C08(uint64_t a1)
{
  unint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = *(_QWORD *)(a1 + 18568);
  if (result <= 0xF)
  {
    v3 = sub_22E3CD3D4(a1 + 2032, 48, 4);
    sub_22F40AF14(v3, 0, 0, 0, 0, 0, 0, 0);
    result = v4 & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(a1 + 18568) = result;
  }
  return result;
}

unint64_t sub_22EF67C6C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_22EF67944(a1, a2, a3, a4, a5, a6, a7, a8, 0);
}

uint64_t sub_22EF67C8C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned int *)(*(_QWORD *)(a1 + 15088) + *(_QWORD *)(**(_QWORD **)(a1 + 15088) - 24) + 112);
  if ((_DWORD)v1 == 8)
    return *(_QWORD *)(a1 + 16536);
  else
    return ((uint64_t (*)(void))((char *)&loc_22EF67CB4 + 4 * byte_22F49EB6D[v1]))();
}

void sub_22EF67CD4()
{
  JUMPOUT(0x22EF67CACLL);
}

void sub_22EF67CDC()
{
  JUMPOUT(0x22EF67CACLL);
}

void sub_22EF67CE4()
{
  JUMPOUT(0x22EF67CACLL);
}

void sub_22EF67CEC()
{
  JUMPOUT(0x22EF67CACLL);
}

void sub_22EF67CF4()
{
  JUMPOUT(0x22EF67CACLL);
}

void sub_22EF67CFC()
{
  JUMPOUT(0x22EF67CACLL);
}

void sub_22EF67D04()
{
  JUMPOUT(0x22EF67CACLL);
}

void sub_22EF67D10()
{
  JUMPOUT(0x22EF67CACLL);
}

void sub_22EF67D18()
{
  JUMPOUT(0x22EF67CACLL);
}

unint64_t sub_22EF67D20(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = a2 & 0xFFFFFFFFFFFFFFF0;
  v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v4 && *(_BYTE *)(v4 + 16) == 56)
    goto LABEL_5;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 56)
  {
    v4 = sub_22F10CF48(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
    if (v4)
    {
LABEL_5:
      v5 = sub_22EF67D20(a1, *(_QWORD *)(v4 + 32));
      return sub_22EF63724(a1, v5, *(unsigned int *)(v4 + 20), (*(_DWORD *)(v4 + 16) >> 19) & 0xF);
    }
    v4 = *(_QWORD *)v3;
  }
  v7 = sub_22E3E4B64(v4);
  if (v7)
  {
    v12 = v7;
    v13 = sub_22EF67D20(a1, *(_QWORD *)(v7 + 32));
    return sub_22F36B7E4(a1, v13, *(unsigned int *)(v12 + 20), (*(_DWORD *)(v12 + 16) >> 19) & 0xF);
  }
  else
  {
    v8 = *(_QWORD *)v3;
    if (!*(_QWORD *)v3 || *(_BYTE *)(v8 + 16) != 9)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0);
      v10 = *(unsigned __int8 *)(v9 + 16);
      if (v10 != 9)
        goto LABEL_13;
      v8 = sub_22F10CF48(v8);
      if (!v8)
      {
        v8 = *(_QWORD *)v3;
        v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) & 0xFFFFFFFFFFFFFFF0);
        v10 = *(unsigned __int8 *)(v9 + 16);
LABEL_13:
        if (v10 == 44)
        {
          v11 = sub_22F114198(*(_QWORD *)(v9 + 24));
          v8 = *(_QWORD *)(sub_22E496830(v11) & 0xFFFFFFFFFFFFFFF0);
        }
        __asm { BR              X10 }
      }
    }
    return sub_22F36C2DC(a1, 1, (*(_DWORD *)(v8 + 32) >> 1) & 0xFFFFFF);
  }
}

uint64_t sub_22EF67EA4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16624);
}

uint64_t sub_22EF67EAC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16640);
}

uint64_t sub_22EF67EB4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16688);
}

uint64_t sub_22EF67EBC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16728);
}

uint64_t sub_22EF67EC4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16520);
}

uint64_t sub_22EF67ECC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16536);
}

uint64_t sub_22EF67ED4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16768);
}

uint64_t sub_22EF67EDC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16776);
}

uint64_t sub_22EF67EE4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16544);
}

uint64_t sub_22EF67EEC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16552);
}

uint64_t sub_22EF67EF4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16672);
}

uint64_t sub_22EF67EFC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16632);
}

uint64_t sub_22EF67F04()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16720);
}

uint64_t sub_22EF67F0C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16736);
}

uint64_t sub_22EF67F14()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16784);
}

unint64_t sub_22EF67F34(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  int v13;
  unsigned int v14;
  unsigned __int8 *v15;
  uint64_t v16;

  v5 = a2 & 0xFFFFFFFFFFFFFFF0;
  if ((*(_BYTE *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xF) != 0)
  {
    v5 = (uint64_t)sub_22F10D2BC(a2);
    v6 = v16;
  }
  else if ((a2 & 8) != 0)
  {
    v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 0x18) | a2 & 7;
    v5 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  }
  else
  {
    v6 = a2 & 7;
  }
  v7 = sub_22F10CF48(v5);
  if (v7
    && (v8 = v7, (*(_DWORD *)(v7 + 16) & 0xFEu) - 6 > 0xFFFFFFFB)
    && (v9 = *(_QWORD *)(v7 + 32), v10 = sub_22EF67F34(a1, v9, a3), v9 != v10))
  {
    v12 = *a3 | v6 & 0xFFFFF9FF;
    v13 = (*a3 >> 9) & 3;
    if (v13 <= (int)((v6 >> 9) & 3))
      LOBYTE(v13) = (v6 >> 9) & 3;
    if ((v6 & 0x600) != 0)
      v12 = *a3 & 0xFFFFF9FF | v6 & 0xFFFFF9FF | ((v13 & 3) << 9);
    *a3 = v12;
    if ((v6 & 0xC00000000) != 0)
      a3[1] = HIDWORD(v6);
    v14 = *(_DWORD *)(v8 + 16);
    switch(v14)
    {
      case 5u:
        return sub_22EF60740(a1, v10, *(_DWORD **)(v8 + 40), (v14 >> 22) & 7, (v14 >> 19) & 7, *(_QWORD *)(v8 + 48));
      case 4u:
        return sub_22EF6096C(a1, v10, (v14 >> 22) & 7, 0, *(_QWORD *)(v8 + 40), 0, 0);
      case 2u:
        if ((v14 & 0x2000000) != 0)
          v15 = *(unsigned __int8 **)(v8 + 56);
        else
          v15 = 0;
        return sub_22EF5FE30(a1, v10, (const llvm::APInt *)(v8 + 40), v15, (v14 >> 22) & 7, 0);
      default:
        return sub_22EF6042C(a1, v10, *(unsigned __int8 **)(v8 + 48), (v14 >> 22) & 7, 0, 0);
    }
  }
  else
  {
    *(_QWORD *)a3 = v6;
    return v5 & 0xFFFFFFFFFFFFFFF0;
  }
}

unint64_t sub_22EF68100(uint64_t a1, unint64_t *a2, unint64_t *a3, int a4)
{
  unint64_t result;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  const llvm::APInt *v13;
  int v14;

  result = sub_22EF5C728(a1, *a2);
  if (result)
  {
    v9 = result;
    do
    {
      result = sub_22EF5C728(a1, *a3);
      if (!result)
        return result;
      v10 = result;
      v11 = *(unsigned __int8 *)(v9 + 16);
      if (v11 == 4)
      {
        v14 = *(unsigned __int8 *)(result + 16);
        if (v14 != 4)
        {
          if (!a4)
            return result;
          if (v14 != 2 || (**(_QWORD **)(a1 + 2000) & 0x1000) == 0)
            return result;
        }
      }
      else
      {
        if (v11 != 2)
          return result;
        v12 = *(unsigned __int8 *)(result + 16);
        if (v12 == 2)
        {
          result = v9 + 40;
          v13 = (const llvm::APInt *)(v10 + 40);
          if (*(_DWORD *)(v9 + 48) > 0x40u)
          {
            result = llvm::APInt::equalSlowCase((llvm::APInt *)result, v13);
            if ((result & 1) != 0)
              goto LABEL_24;
          }
          else if (*(_QWORD *)result == *(_QWORD *)v13)
          {
            goto LABEL_24;
          }
        }
        if (!a4)
          return result;
        if (v12 != 4 || (**(_QWORD **)(a1 + 2000) & 0x1000) == 0)
          return result;
      }
LABEL_24:
      *a2 = *(_QWORD *)(v9 + 32);
      *a3 = *(_QWORD *)(v10 + 32);
      result = sub_22EF5C728(a1, *a2);
      v9 = result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_22EF68220(uint64_t a1, unint64_t *a2, unint64_t *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;

  sub_22EF68100(a1, a2, a3, a4);
  v7 = *(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0);
  if (!v7 || *(_BYTE *)(v7 + 16) != 39)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
      v7 = sub_22F10CF48(v7);
    else
      v7 = 0;
  }
  v8 = *(_QWORD *)(*a3 & 0xFFFFFFFFFFFFFFF0);
  if (!v8 || *(_BYTE *)(v8 + 16) != 39)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
      goto LABEL_15;
    v8 = sub_22F10CF48(v8);
  }
  if (v7)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (!v9)
    goto LABEL_35;
LABEL_15:
  v7 = *(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0);
  if (v7)
    v10 = *(_BYTE *)(v7 + 16) == 31;
  else
    v10 = 0;
  if (!v10)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31)
      v7 = sub_22F10CF48(*(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0));
    else
      v7 = 0;
  }
  v8 = *(_QWORD *)(*a3 & 0xFFFFFFFFFFFFFFF0);
  if (v8)
    v11 = *(_BYTE *)(v8 + 16) == 31;
  else
    v11 = 0;
  if (!v11)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31)
      goto LABEL_33;
    v8 = sub_22F10CF48(v8);
  }
  if (v7)
    v12 = v8 == 0;
  else
    v12 = 1;
  if (!v12
    && *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v7 + 40) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v8 + 40) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
  {
LABEL_35:
    v14 = *(_QWORD *)(v7 + 32);
LABEL_36:
    *a2 = v14;
    *a3 = *(_QWORD *)(v8 + 32);
    return 1;
  }
LABEL_33:
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 2000) + 1) & 0x40) == 0)
    return 0;
  v16 = *(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0);
  if (!v16 || *(_BYTE *)(v16 + 16) != 32)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
      v16 = sub_22F10CF48(v16);
    else
      v16 = 0;
  }
  v8 = *(_QWORD *)(*a3 & 0xFFFFFFFFFFFFFFF0);
  if (!v8 || *(_BYTE *)(v8 + 16) != 32)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
      return 0;
    v8 = sub_22F10CF48(v8);
  }
  v13 = 0;
  if (v16 && v8)
  {
    v14 = *(_QWORD *)(v16 + 32);
    goto LABEL_36;
  }
  return v13;
}

BOOL sub_22EF6845C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v9 = a3;
  v10 = a2;
  do
  {
    v8 = 0;
    v4 = sub_22EF67F34(a1, v10, &v8);
    v10 = v4;
    v9 = sub_22EF67F34(a1, v9, &v8);
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF0) + 8) | v4 & 7;
    v6 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF0) + 8) | v9 & 7;
  }
  while (v5 != v6 && (sub_22EF68220(a1, (unint64_t *)&v10, &v9, 1) & 1) != 0);
  return v5 == v6;
}

uint64_t sub_22EF68504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v12 = a3;
  v13 = a2;
  do
  {
    v10 = 0;
    v11 = 0;
    v4 = sub_22EF67F34(a1, v13, &v11);
    v13 = v4;
    v5 = sub_22EF67F34(a1, v12, &v10);
    v12 = v5;
    LODWORD(v11) = v11 & 0xFFFFFFF8;
    LODWORD(v10) = v10 & 0xFFFFFFF8;
    v6 = (_DWORD)v11 == (_DWORD)v10 && HIDWORD(v11) == HIDWORD(v10);
    v7 = v6;
    if (!v6)
      break;
    if ((*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF0) + 8) | v4 & 7) == (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8) | v5 & 7))
      break;
    v8 = sub_22EF68220(a1, (unint64_t *)&v13, (unint64_t *)&v12, 0);
    v7 = 0;
  }
  while ((v8 & 1) != 0);
  return v7;
}

uint64_t sub_22EF685D4@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v8;

  v8 = a1;
  if (sub_22F0F084C(&v8))
    __asm { BR              X10 }
  v6 = *(_QWORD *)(sub_22F0F08CC(&v8) + 40);
  *(_QWORD *)a3 = v6;
  *(_DWORD *)(a3 + 8) = a2;
  return sub_22EFC6D6C(a3 + 16, v6);
}

uint64_t sub_22EF68650()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(sub_22F0F097C(&v4) + 8) + 40);
  *(_QWORD *)v0 = v2;
  *(_DWORD *)(v0 + 8) = v1;
  return sub_22EFC6D6C(v0 + 16, v2);
}

void sub_22EF68684()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  if ((~(_BYTE)v3 & 6) != 0)
    v4 = 0;
  else
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v4 + 8) & 4) != 0)
  {
    *(_QWORD *)v0 = (v2 + 16 * *(int *)(v4 + 16) + 15280) | 6;
    *(_DWORD *)(v0 + 8) = v1;
    *(_QWORD *)(v0 + 16) = 0;
    JUMPOUT(0x22EF68670);
  }
  JUMPOUT(0x22EF68614);
}

void sub_22EF6871C(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  if ((_DWORD)v3 != 1)
    __asm { BR              X10 }
  v4 = *((_QWORD *)a1 + 1) & 7 | *(_QWORD *)((*((_QWORD *)a1 + 1) & 0xFFFFFFFFFFFFFFF0) + 8);
  *(_DWORD *)a2 = 1;
  *(_QWORD *)(a2 + 8) = v4;
}

void sub_22EF687A4()
{
  uint64_t v0;
  uint64_t v1;

  *(_OWORD *)v0 = *(_OWORD *)v1;
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v1 + 16);
  JUMPOUT(0x22EF6876CLL);
}

void sub_22EF687B8()
{
  _OWORD *v0;
  _OWORD *v1;

  *v0 = *v1;
  JUMPOUT(0x22EF687B0);
}

void sub_22EF687D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int128 a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;

  v14 = *(unsigned int *)(v12 + 4);
  if ((_DWORD)v14)
  {
    v15 = 3 * v14;
    v16 = sub_22E3CD3D4(v13 + 2032, 24 * v14, 3);
    v17 = v16;
    v18 = v16;
    do
    {
      *(_DWORD *)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
      v18 += 24;
    }
    while (v18 != v16 + 8 * v15);
    v19 = *(unsigned int *)(v12 + 4);
    if ((_DWORD)v19)
    {
      v20 = *(unsigned int **)(v12 + 8);
      v21 = 24 * v19;
      v22 = v16;
      do
      {
        sub_22EF6871C(v20, (uint64_t)&a10);
        *(_OWORD *)v22 = a10;
        *(_QWORD *)(v22 + 16) = a11;
        v20 += 6;
        v22 += 24;
        v21 -= 24;
      }
      while (v21);
      LODWORD(v19) = *(_DWORD *)(v12 + 4);
    }
    *(_QWORD *)(v11 + 8) = v17;
    *(_DWORD *)v11 = 8;
    *(_DWORD *)(v11 + 4) = v19;
    JUMPOUT(0x22EF6876CLL);
  }
  sub_22EF687A4();
}

void sub_22EF68870(uint64_t a1, ...)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a1);
  sub_22F0F0834((uint64_t *)va, *(_QWORD *)(v2 + 8));
  sub_22EF65464(v3, (uint64_t *)va);
  v1[1] = v4;
  *v1 = 5;
  JUMPOUT(0x22EF6876CLL);
}

void sub_22EF6889C(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  va_list va;

  va_start(va, a1);
  sub_22F0F0834((uint64_t *)va, *(_QWORD *)(v2 + 8));
  sub_22EF65464(v3, (uint64_t *)va);
  v5 = v4;
  v6 = sub_22F0EECD8(v2);
  *(_QWORD *)(v1 + 8) = v5;
  if ((v6 & 0xFF00000000) != 0)
    v7 = v6 + 1;
  else
    v7 = 0;
  *(_DWORD *)v1 = 6;
  *(_DWORD *)(v1 + 4) = v7;
  JUMPOUT(0x22EF6876CLL);
}

void sub_22EF688DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 16) + 32))(*(_QWORD *)(v1 + 16));
  v3 = *(_QWORD *)(v1 + 8);
  *(_DWORD *)v0 = 2;
  *(_QWORD *)(v0 + 8) = v3;
  *(_QWORD *)(v0 + 16) = v2;
  JUMPOUT(0x22EF6876CLL);
}

void sub_22EF68900()
{
  JUMPOUT(0x22EF68764);
}

uint64_t sub_22EF6891C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t (*v41)(void);
  unint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t **v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  size_t v65;
  unsigned __int8 *v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  BOOL v80;
  int v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  char v87;
  char v88;
  uint64_t v89;
  char v90;
  BOOL v91;
  uint64_t v92;
  unsigned __int8 *v93;
  uint64_t v94;
  uint64_t i;
  unint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int8 *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unsigned int v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t v118;
  BOOL v119;
  BOOL v120;
  BOOL v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125[4];
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t (**v130)();
  void **v131;
  char v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  _BYTE v136[128];
  _QWORD *v137;
  uint64_t v138;
  _QWORD v139[18];

  v139[16] = *MEMORY[0x24BDAC8D0];
  if (a2 == a3)
    return 1;
  v3 = a3;
  v4 = a2;
  if (*(_QWORD *)(a2 + 40) != *(_QWORD *)(a3 + 40))
    return 0;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 4) != 0)
    v7 = (_QWORD *)*v7;
  v8 = sub_22EFCBB30((unint64_t)v7);
  v9 = *(_WORD *)(v8 + 8) & 0x7F;
  v10 = -40;
  if (v9 <= 0x46)
  {
    if (v9 <= 0x18)
    {
      if (v9 == 16)
      {
LABEL_8:
        v10 = -48;
        goto LABEL_20;
      }
      if (((1 << v9) & 0x1066) != 0)
        goto LABEL_20;
      if (v9 == 24)
        goto LABEL_8;
    }
    if (v9 == 70)
    {
LABEL_18:
      v10 = -64;
      goto LABEL_20;
    }
    goto LABEL_16;
  }
  if (v9 == 83)
    goto LABEL_20;
  if (v9 == 71)
  {
    v10 = -56;
    goto LABEL_20;
  }
  if (v9 != 81)
  {
LABEL_16:
    if (v9 - 52 >= 6)
    {
      if (v9 - 33 >= 5)
        goto LABEL_8;
      goto LABEL_18;
    }
    v10 = -72;
  }
LABEL_20:
  v11 = *(_QWORD *)(v3 + 16);
  v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
  if ((v11 & 4) != 0)
    v12 = (_QWORD *)*v12;
  v13 = v8 + v10;
  v14 = sub_22EFCBB30((unint64_t)v12);
  v15 = *(_WORD *)(v14 + 8) & 0x7F;
  v16 = -40;
  if (v15 > 0x46)
  {
    switch(v15)
    {
      case 'S':
        goto LABEL_37;
      case 'G':
        v16 = -56;
        goto LABEL_37;
      case 'Q':
        goto LABEL_37;
    }
    goto LABEL_33;
  }
  if (v15 > 0x18)
    goto LABEL_32;
  if (v15 != 16)
  {
    if (((1 << v15) & 0x1066) != 0)
      goto LABEL_37;
    if (v15 != 24)
    {
LABEL_32:
      if (v15 == 70)
      {
LABEL_35:
        v16 = -64;
        goto LABEL_37;
      }
LABEL_33:
      if (v15 - 52 < 6)
      {
        v16 = -72;
        goto LABEL_37;
      }
      if (v15 - 33 < 5)
        goto LABEL_35;
    }
  }
  v16 = -48;
LABEL_37:
  v17 = v14 + v16;
  if (v13 != v14 + v16)
  {
    v18 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v13 + 32))(v13);
    if (v18 != (*(uint64_t (**)(unint64_t))(*(_QWORD *)v17 + 32))(v17))
      return 0;
  }
  v19 = *(_DWORD *)(v4 + 28);
  v20 = v19 & 0x7F;
  v21 = *(_DWORD *)(v3 + 28) & 0x7F;
  if ((v20 - 42) >= 0xFFFFFFFD && (v21 - 42) >= 0xFFFFFFFD)
  {
    v22 = *(_QWORD *)((*(_QWORD *)(v4 + 80) & 0xFFFFFFFFFFFFFFF8) + ((2 * *(_QWORD *)(v4 + 80)) & 8));
    v23 = *(_QWORD *)((*(_QWORD *)(v3 + 80) & 0xFFFFFFFFFFFFFFF8) + ((2 * *(_QWORD *)(v3 + 80)) & 8));
LABEL_42:
    v24 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF0) + 8) | v22 & 7;
    v25 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFF0) + 8) | v23 & 7;
    return v24 == v25;
  }
  if (v20 != v21)
    return 0;
  v28 = v19 & 0x7E;
  if (v28 == 22)
    return 1;
  if (v20 == 19)
  {
    v27 = 0;
    v29 = *(_QWORD *)(v4 + 40);
    if (v29 < 8)
      return v27;
    if ((v29 & 7) != 0)
      return v27;
    v27 = 0;
    v30 = *(_QWORD *)(v3 + 40);
    if (v30 < 8)
      return v27;
    if ((v30 & 7) != 0)
      return v27;
    v27 = 0;
    v31 = *(_QWORD *)(v4 + 104);
    if (!v31)
      return v27;
    v32 = *(_QWORD *)(v3 + 104);
    if (!v32)
      return v27;
    v24 = *(_QWORD *)(v31 + 40);
    v25 = *(_QWORD *)(v32 + 40);
    return v24 == v25;
  }
  if (v28 == 36)
    return 0;
  if ((v20 - 38) >= 0xFFFFFFFB)
  {
    v34 = (unsigned __int16)*(_DWORD *)(v4 + 72) >> 13;
    v35 = (unsigned __int16)*(_DWORD *)(v3 + 72) >> 13;
    if (v34 == v35)
      return 1;
    v27 = 0;
    if (v34 > 3 || v34 == 2)
      return v27;
    if (v35 < 4)
      return (0xBu >> v35) & 1;
    return 0;
  }
  if ((v28 - 58) < 0xFFFFFFFA)
  {
    if ((v20 - 67) >= 0xFFFFFFF9)
    {
      v36 = sub_22EFB948C(v4);
      if (v36 == sub_22EFB948C(v3))
      {
        if ((*(_QWORD *)((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(v4 + 48) & 7) == (*(_QWORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(v3 + 48) & 7))
          return 1;
        v37 = sub_22EF5C728(a1, *(_QWORD *)(v4 + 48));
        v38 = sub_22EF5C728(a1, *(_QWORD *)(v3 + 48));
        v27 = 0;
        if (!v37 || !v38)
          return v27;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 4
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v38 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 4)
        {
          v22 = *(_QWORD *)(v37 + 32);
          v23 = *(_QWORD *)(v38 + 32);
          goto LABEL_42;
        }
      }
      return 0;
    }
    if (v20 == 16)
      return ((*(_BYTE *)(v4 + 104) & 4) == 0) ^ ((*(_BYTE *)(v3 + 104) & 4) >> 2);
    if ((v20 - 33) >= 0xFFFFFFF9)
    {
      if (sub_22EF6891C(a1))
        return sub_22EF697AC(a1, *(_QWORD *)(v4 + 56), *(_QWORD *)(v3 + 56));
      return 0;
    }
    if ((v20 - 52) >= 0xFFFFFFFD)
    {
      v22 = *(_QWORD *)(v4 + 48);
      v23 = *(_QWORD *)(v3 + 48);
      goto LABEL_42;
    }
    if (v20 != 67)
    {
      if (v20 == 68)
      {
        v39 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * *(unsigned int *)(v4 + 64) - 8);
        v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 32))(v39);
        v41 = *(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)(v3 + 56) + 8 * *(unsigned int *)(v3 + 64) - 8) + 32);
LABEL_87:
        v42 = v41();
        return v40 == v42;
      }
      if (v28 == 46)
      {
        v24 = *(_QWORD *)(v4 + 64);
        v25 = *(_QWORD *)(v3 + 64);
        return v24 == v25;
      }
      v27 = 0;
      if ((*(_DWORD *)(v4 + 28) & 0x7Fu) <= 0x29)
      {
        if (v20 != 13)
        {
          if (v20 != 17)
            return v27;
          do
          {
            v4 = *(_QWORD *)(v4 + 88);
            if (v4)
              v121 = (*(_DWORD *)(v4 + 28) & 0x7F) == 17;
            else
              v121 = 0;
          }
          while (v121);
          do
          {
            v3 = *(_QWORD *)(v3 + 88);
            if (v3)
              v122 = (*(_DWORD *)(v3 + 28) & 0x7F) == 17;
            else
              v122 = 0;
          }
          while (v122);
          v40 = sub_22EFCC008(v4 + 48);
          v42 = sub_22EFCC008(v3 + 48);
          return v40 == v42;
        }
        if (!sub_22EF69DA4(*(_QWORD *)(v4 + 64), *(_QWORD *)(v3 + 64))
          || ((*(unsigned __int8 *)(v4 + 48) ^ *(unsigned __int8 *)(v3 + 48)) & 4) != 0)
        {
          return 0;
        }
        return (*(_DWORD *)(v4 + 56) != 0) ^ (*(_DWORD *)(v3 + 56) == 0);
      }
      if (v20 == 42)
        return sub_22EF69DA4(*(_QWORD *)(v4 + 72), *(_QWORD *)(v3 + 72));
      if (v20 != 45)
      {
        if (v20 != 74)
          return v27;
        if (!sub_22EF69DA4(*(_QWORD *)(v4 + 64), *(_QWORD *)(v3 + 64)))
          return 0;
        return (*(_DWORD *)(v4 + 56) != 0) ^ (*(_DWORD *)(v3 + 56) == 0);
      }
      v27 = 0;
      v123 = *(_QWORD *)(v4 + 48);
      if (!v123)
        return v27;
      v124 = *(_QWORD *)(v3 + 48);
      if (!v124)
        return v27;
      if (v123 != v124)
      {
        v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v123 + 32))(v123);
        v41 = *(uint64_t (**)(void))(*(_QWORD *)v124 + 32);
        goto LABEL_87;
      }
    }
    return 1;
  }
  if (v20 == 55 && (*(_BYTE *)(v4 + 87) & 0x20) != 0)
  {
    if (*(_QWORD *)(v4 + 168))
    {
      if (!sub_22EF6891C(a1))
        return 0;
    }
  }
  v44 = (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4) + 80) >> 36) & 1;
  if ((_DWORD)v44 != (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3) + 84) & 0x10) >> 4)
    return 0;
  if ((*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4) + 84) & 0x10) != 0)
  {
    if ((*(_BYTE *)(v4 + 29) & 1) == 0)
      goto LABEL_110;
    sub_22EFC8E88(v4);
    v48 = *(uint64_t **)v47;
    v49 = *(unsigned int *)(v47 + 8);
    v50 = *(uint64_t **)v47;
    if ((_DWORD)v49)
    {
      v51 = 8 * v49;
      v50 = *(uint64_t **)v47;
      while (*(_WORD *)(*v50 + 32) != 327)
      {
        ++v50;
        v51 -= 8;
        if (!v51)
          goto LABEL_110;
      }
    }
    if (v50 == &v48[v49])
    {
LABEL_110:
      v54 = 0;
    }
    else
    {
      do
      {
        v55 = *v48++;
        v54 = v55;
      }
      while (*(_WORD *)(v55 + 32) != 327);
    }
    sub_22EFC8E88(v3);
    v57 = *v56;
    v58 = *((unsigned int *)v56 + 2);
    if ((_DWORD)v58 && *(_WORD *)(*v57 + 32) != 327)
    {
      v59 = 8 * v58 - 8;
      v60 = *v56;
      do
      {
        v61 = v60[1];
        ++v60;
        v59 -= 8;
      }
      while (*(_WORD *)(v61 + 32) != 327);
    }
    do
    {
      v63 = *v57++;
      v62 = v63;
    }
    while (*(_WORD *)(v63 + 32) != 327);
    v64 = *(_DWORD *)(v54 + 36);
    v65 = *(unsigned int *)(v62 + 36);
    if (v64 != (_DWORD)v65 || v64 && memcmp(*(const void **)(v54 + 40), *(const void **)(v62 + 40), v65))
      return 0;
  }
  v45 = *(_QWORD *)(v4 + 56);
  if ((v45 & 4) != 0)
  {
    v52 = *(unsigned __int8 **)((v45 & 0xFFFFFFFFFFFFFFF8) + 40);
    v53 = *(_QWORD *)(v3 + 56);
    if ((v53 & 4) != 0)
    {
      v66 = *(unsigned __int8 **)((v53 & 0xFFFFFFFFFFFFFFF8) + 40);
      if ((v52 == 0) == (v66 != 0))
        return 0;
      if (v52)
      {
        v137 = v139;
        v138 = 0x2000000000;
        v133 = a1;
        v134 = v136;
        v135 = 0x2000000000;
        v132 = 1;
        v130 = &off_24FAC6E70;
        v131 = (void **)&v137;
        sub_22F0E9FEC(&v130, v52);
        v132 = 1;
        v130 = &off_24FAC6E70;
        v131 = &v134;
        v133 = a1;
        sub_22F0E9FEC(&v130, v66);
        v67 = llvm::FoldingSetNodeID::operator==();
        if (v134 != v136)
          free(v134);
        if (v137 != v139)
          free(v137);
        if (!v67)
          return 0;
      }
    }
    else if (v52)
    {
      return 0;
    }
  }
  else
  {
    v46 = *(_QWORD *)(v3 + 56);
    if ((v46 & 4) != 0 && *(_QWORD *)((v46 & 0xFFFFFFFFFFFFFFF8) + 40))
      return 0;
  }
  v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  v69 = *(_QWORD *)(v68 + 56);
  if ((v69 & 4) != 0)
  {
    v70 = *(uint64_t **)((v69 & 0xFFFFFFFFFFFFFFF8) + 32);
    if (v70)
      goto LABEL_132;
  }
  else if (v69 >= 8)
  {
    v70 = (uint64_t *)(v69 & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_132;
  }
  v70 = (uint64_t *)(v68 + 48);
LABEL_132:
  v71 = *v70;
  v72 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  v73 = *(_QWORD *)(v72 + 56);
  if ((v73 & 4) != 0)
  {
    v74 = *(uint64_t **)((v73 & 0xFFFFFFFFFFFFFFF8) + 32);
    if (v74)
      goto LABEL_137;
  }
  else if (v73 >= 8)
  {
    v74 = (uint64_t *)(v73 & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_137;
  }
  v74 = (uint64_t *)(v72 + 48);
LABEL_137:
  v75 = *v74;
  v76 = v71 & 0xFFFFFFFFFFFFFFF0;
  v77 = v75 & 0xFFFFFFFFFFFFFFF0;
  if ((*(_QWORD *)((v71 & 0xFFFFFFFFFFFFFFF0) + 8) | v71 & 7) != (*(_QWORD *)((v75 & 0xFFFFFFFFFFFFFFF0) + 8) | v75 & 7))
  {
    v78 = *(_QWORD *)v76;
    v79 = *(unsigned __int8 *)(*(_QWORD *)v76 + 16);
    if (v78)
      v80 = v79 == 26;
    else
      v80 = 0;
    if (!v80)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v78 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
        v78 = sub_22F10CF48(v78);
      else
        v78 = 0;
    }
    v118 = *(_QWORD *)v77;
    if (*(_QWORD *)v77)
      v119 = *(_BYTE *)(*(_QWORD *)v77 + 16) == 26;
    else
      v119 = 0;
    if (!v119)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v118 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
        v118 = sub_22F10CF48(v118);
      else
        v118 = 0;
    }
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 2000) + 1) & 8) != 0)
    {
      v120 = !v78 || v118 == 0;
      if (!v120
        && (((*(_QWORD *)(v78 + 16) >> 54) & 0xF) - 9 < 2
         || ((*(_QWORD *)(v118 + 16) >> 54) & 0xF) - 9 <= 1)
        && sub_22EF5F5D4(a1, v71, v75))
      {
        return 1;
      }
    }
    return 0;
  }
  v81 = sub_22EFB948C(v4);
  if (v81 != sub_22EFB948C(v3))
    return 0;
  v137 = v139;
  v138 = 0x2000000000;
  v134 = v136;
  v135 = 0x2000000000;
  v82 = (uint64_t *)sub_22E9DD080(v4);
  v84 = v83;
  v126 = v82;
  v127 = (uint64_t *)sub_22E9DD080(v3);
  v128 = v84;
  v129 = v85;
  v125[0] = (uint64_t)v84;
  v125[1] = (uint64_t)v85;
  v125[2] = (uint64_t)v84;
  v125[3] = (uint64_t)v85;
  if (!sub_22ED2300C((uint64_t *)&v126, v125))
    goto LABEL_229;
LABEL_147:
  v86 = sub_22ED230CC(&v126, &v128);
  v88 = v87;
  v89 = sub_22ED230CC(&v127, &v129);
  if (v88)
    v91 = v90 == 0;
  else
    v91 = 1;
  if (!v91)
  {
    v92 = v89;
    LODWORD(v138) = 0;
    LODWORD(v135) = 0;
    v93 = *(unsigned __int8 **)(v86 + 40);
    v94 = v4;
    if ((*(_DWORD *)(v4 + 28) & 0x7F) == 0x53)
      goto LABEL_176;
    for (i = *(_QWORD *)(v4 + 16); ; i = *(_QWORD *)(v96 + v98 + 16))
    {
      v96 = i & 0xFFFFFFFFFFFFFFF8;
      if ((i & 4) != 0)
        v96 = *(_QWORD *)v96;
      v97 = *(_WORD *)(v96 + 8) & 0x7F;
      if (v97 == 83)
      {
        v94 = v96 - 40;
LABEL_176:
        v102 = *(_QWORD *)(v94 + 88);
        v132 = 1;
        v130 = &off_24FAC6E70;
        v131 = (void **)&v137;
        v133 = v102;
        sub_22F0E9FEC(&v130, v93);
        v103 = *(unsigned __int8 **)(v92 + 40);
        v104 = v3;
        if ((*(_DWORD *)(v3 + 28) & 0x7F) == 0x53)
          goto LABEL_201;
        v105 = *(_QWORD *)(v3 + 16);
        while (2)
        {
          v106 = v105 & 0xFFFFFFFFFFFFFFF8;
          if ((v105 & 4) != 0)
            v106 = *(_QWORD *)v106;
          v107 = *(_WORD *)(v106 + 8) & 0x7F;
          if (v107 != 83)
          {
            v108 = -40;
            if ((*(_WORD *)(v106 + 8) & 0x7Fu) > 0x46)
            {
              if (v107 == 71)
              {
                v108 = -56;
              }
              else if (v107 != 81)
              {
                goto LABEL_191;
              }
            }
            else
            {
              if (v107 > 0x18)
                goto LABEL_190;
              if (v107 == 16)
                goto LABEL_184;
              if (((1 << v107) & 0x1066) == 0)
              {
                if (v107 == 24)
                {
LABEL_184:
                  v108 = -48;
                }
                else
                {
LABEL_190:
                  if (v107 == 70)
                  {
                    v108 = -64;
                  }
                  else
                  {
LABEL_191:
                    v109 = v107 - 52;
                    v100 = v107 - 33 >= 5;
                    v110 = -64;
                    if (v100)
                      v110 = -48;
                    v100 = v109 >= 6;
                    v108 = -72;
                    if (v100)
                      v108 = v110;
                  }
                }
              }
            }
            v105 = *(_QWORD *)(v106 + v108 + 16);
            continue;
          }
          break;
        }
        v104 = v106 - 40;
LABEL_201:
        v111 = *(_QWORD *)(v104 + 88);
        v132 = 1;
        v130 = &off_24FAC6E70;
        v131 = &v134;
        v133 = v111;
        sub_22F0E9FEC(&v130, v103);
        if (!llvm::FoldingSetNodeID::operator==())
          break;
        v112 = v126;
        if (v126 < v128)
        {
          v113 = v126;
          while (*(_WORD *)(*v113 + 32) != 167)
          {
            if (++v113 == v128)
              goto LABEL_210;
          }
          v114 = v128;
          goto LABEL_213;
        }
        v114 = v128;
        if (v128 != v126)
        {
          while (*(_WORD *)(*v114 + 32) != 167)
          {
            if (++v114 == v126)
            {
LABEL_210:
              v112 = v128;
              goto LABEL_215;
            }
          }
          v113 = v126;
LABEL_213:
          v112 = v126 + 1;
          if (v113 == v114)
            v112 = v128;
        }
LABEL_215:
        v115 = v127;
        if (v127 < v129)
        {
          v116 = v127;
          while (*(_WORD *)(*v116 + 32) != 167)
          {
            if (++v116 == v129)
              goto LABEL_223;
          }
          v117 = v129;
          goto LABEL_226;
        }
        v117 = v129;
        if (v129 != v127)
        {
          while (*(_WORD *)(*v117 + 32) != 167)
          {
            if (++v117 == v127)
            {
LABEL_223:
              v115 = v129;
              goto LABEL_228;
            }
          }
          v116 = v127;
LABEL_226:
          v115 = v127 + 1;
          if (v116 == v117)
            v115 = v129;
        }
LABEL_228:
        v126 = v112;
        v127 = v115;
        if (!sub_22ED2300C((uint64_t *)&v126, v125))
        {
LABEL_229:
          v27 = 1;
          goto LABEL_256;
        }
        goto LABEL_147;
      }
      v98 = -40;
      if ((*(_WORD *)(v96 + 8) & 0x7Fu) > 0x46)
      {
        if (v97 == 71)
        {
          v98 = -56;
          continue;
        }
        if (v97 != 81)
          goto LABEL_166;
      }
      else
      {
        if (v97 > 0x18)
          goto LABEL_165;
        if (v97 == 16)
          goto LABEL_159;
        if (((1 << v97) & 0x1066) == 0)
        {
          if (v97 == 24)
          {
LABEL_159:
            v98 = -48;
            continue;
          }
LABEL_165:
          if (v97 == 70)
          {
            v98 = -64;
            continue;
          }
LABEL_166:
          v99 = v97 - 52;
          v100 = v97 - 33 >= 5;
          v101 = -64;
          if (v100)
            v101 = -48;
          v100 = v99 >= 6;
          v98 = -72;
          if (v100)
            v98 = v101;
          continue;
        }
      }
    }
  }
  v27 = 0;
LABEL_256:
  if (v134 != v136)
    free(v134);
  if (v137 != v139)
    free(v137);
  return v27;
}

uint64_t sub_22EF697AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t i;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  int v43;
  unsigned __int8 *v44;
  int v45;
  unsigned __int8 *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (**v50)();
  void **v51;
  char v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  _BYTE v56[128];
  void *v57;
  uint64_t v58;
  _QWORD v59[18];

  v59[16] = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a2 + 12);
  v4 = v3 & 0x1FFFFFFF;
  if ((v3 & 0x1FFFFFFF) != (*(_DWORD *)(a3 + 12) & 0x1FFFFFFF))
    return 0;
  if ((_DWORD)v4)
  {
    v8 = 0;
    v49 = a2 + 16;
    while (1)
    {
      v9 = *(_QWORD *)(v49 + 8 * v8);
      v10 = *(_QWORD *)(a3 + 16 + 8 * v8);
      v11 = *(_DWORD *)(v9 + 28) & 0x7F;
      if (v11 != (*(_DWORD *)(v10 + 28) & 0x7F))
        return 0;
      if (v11 == 59)
      {
        if ((*(_BYTE *)(v9 + 80) != 0) != (*(_BYTE *)(v10 + 80) != 0)
          || (*(_QWORD *)((*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(v9 + 48) & 7) != (*(_QWORD *)((*(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(v10 + 48) & 7))
        {
          return 0;
        }
        goto LABEL_93;
      }
      if (v11 != 38)
      {
        if ((*(_BYTE *)(v9 + 80) != 0) != (*(_BYTE *)(v10 + 80) != 0)
          || (sub_22EF697AC(a1, *(_QWORD *)(v9 + 56), *(_QWORD *)(v10 + 56)) & 1) == 0)
        {
          return 0;
        }
        goto LABEL_93;
      }
      if (((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                                        + 8) & 0xFFFFFFFFFFFFFFF0)
                                + 33) ^ *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                                     + 8) & 0xFFFFFFFFFFFFFFF0)
                                                             + 33)) & 0x80) != 0)
        return 0;
      v12 = *(unsigned __int8 *)(v9 + 60);
      v13 = *(unsigned __int8 *)(v10 + 60);
      if (((v12 ^ v13) & 2) != 0)
        return 0;
      v14 = v12 & 4;
      v15 = v14 ? v9 + 80 : 0;
      v16 = (v13 & 4) != 0 ? v10 + 80 : 0;
      if (((v14 ^ v13 & 4) & 4) != 0)
        return 0;
      if ((v14 & v13) != 0)
        break;
LABEL_93:
      if (++v8 == v4)
      {
        v3 = *(_DWORD *)(a2 + 12);
        goto LABEL_95;
      }
    }
    if (*(_QWORD *)(v15 + 56))
      v17 = *(_QWORD *)(v16 + 56) == 0;
    else
      v17 = 1;
    if (v17)
      return 0;
    result = sub_22EF6891C(a1);
    if ((_DWORD)result)
    {
      v19 = *(_QWORD *)(v15 + 64);
      v20 = *(_QWORD *)(v16 + 64);
      if ((v19 != 0) != (v20 != 0))
        return 0;
      if (!v19)
        goto LABEL_93;
      v21 = *(unsigned int *)(v19 + 8);
      if ((_DWORD)v21 != *(_DWORD *)(v20 + 8))
        return 0;
      v57 = v59;
      v58 = 0x2000000000;
      v54 = v56;
      v55 = 0x2000000000;
      if (!(_DWORD)v21)
        goto LABEL_82;
      v48 = a1;
      v22 = v19 + 16;
      v23 = v19 + 16 + 32 * v21;
      while (1)
      {
        v24 = v9;
        if ((*(_DWORD *)(v9 + 28) & 0x7F) == 0x53)
          goto LABEL_52;
        for (i = *(_QWORD *)(v9 + 16); ; i = *(_QWORD *)(v26 + v28 + 16))
        {
          v26 = i & 0xFFFFFFFFFFFFFFF8;
          if ((i & 4) != 0)
            v26 = *(_QWORD *)v26;
          v27 = *(_WORD *)(v26 + 8) & 0x7F;
          if (v27 == 83)
            break;
          v28 = -40;
          if ((*(_WORD *)(v26 + 8) & 0x7Fu) > 0x46)
          {
            if (v27 == 71)
            {
              v28 = -56;
              continue;
            }
            if (v27 != 81)
              goto LABEL_42;
          }
          else
          {
            if (v27 > 0x18)
              goto LABEL_41;
            if (v27 == 16)
              goto LABEL_35;
            if (((1 << v27) & 0x1066) == 0)
            {
              if (v27 == 24)
              {
LABEL_35:
                v28 = -48;
                continue;
              }
LABEL_41:
              if (v27 == 70)
              {
                v28 = -64;
                continue;
              }
LABEL_42:
              v29 = v27 - 52;
              v30 = v27 - 33 >= 5;
              v31 = -64;
              if (v30)
                v31 = -48;
              v30 = v29 >= 6;
              v28 = -72;
              if (v30)
                v28 = v31;
              continue;
            }
          }
        }
        v24 = v26 - 40;
LABEL_52:
        sub_22F0EED38(v22, (uint64_t)&v57, *(_QWORD *)(v24 + 88));
        v22 += 32;
        if (v22 == v23)
        {
          v32 = *(unsigned int *)(v20 + 8);
          a1 = v48;
          if ((_DWORD)v32)
          {
            v33 = v20 + 16;
            v34 = v20 + 16 + 32 * v32;
            while (v10)
            {
              v35 = v10;
              if ((*(_DWORD *)(v10 + 28) & 0x7F) != 0x53)
                break;
LABEL_81:
              sub_22F0EED38(v33, (uint64_t)&v54, *(_QWORD *)(v35 + 88));
              v33 += 32;
              if (v33 == v34)
                goto LABEL_82;
            }
            v36 = *(_QWORD *)(v10 + 16);
            while (2)
            {
              v37 = v36 & 0xFFFFFFFFFFFFFFF8;
              if ((v36 & 4) != 0)
                v37 = *(_QWORD *)v37;
              v38 = *(_WORD *)(v37 + 8) & 0x7F;
              if (v38 == 83)
              {
                v35 = v37 - 40;
                goto LABEL_81;
              }
              v39 = -40;
              if ((*(_WORD *)(v37 + 8) & 0x7Fu) > 0x46)
              {
                if (v38 == 71)
                {
                  v39 = -56;
                }
                else if (v38 != 81)
                {
                  goto LABEL_71;
                }
              }
              else
              {
                if (v38 > 0x18)
                  goto LABEL_70;
                if (v38 == 16)
                  goto LABEL_64;
                if (((1 << v38) & 0x1066) == 0)
                {
                  if (v38 == 24)
                  {
LABEL_64:
                    v39 = -48;
                  }
                  else
                  {
LABEL_70:
                    if (v38 == 70)
                    {
                      v39 = -64;
                    }
                    else
                    {
LABEL_71:
                      v40 = v38 - 52;
                      v30 = v38 - 33 >= 5;
                      v41 = -64;
                      if (v30)
                        v41 = -48;
                      v30 = v40 >= 6;
                      v39 = -72;
                      if (v30)
                        v39 = v41;
                    }
                  }
                }
              }
              v36 = *(_QWORD *)(v37 + v39 + 16);
              continue;
            }
          }
LABEL_82:
          v42 = llvm::FoldingSetNodeID::operator==();
          if (v54 != v56)
            free(v54);
          if (v57 != v59)
            free(v57);
          if ((v42 & 1) == 0)
            return 0;
          goto LABEL_93;
        }
      }
    }
  }
  else
  {
LABEL_95:
    if ((v3 & 0x40000000) != 0)
    {
      v44 = *(unsigned __int8 **)(a2 + 8 * (v3 & 0x1FFFFFFF) + 16);
      v45 = *(_DWORD *)(a3 + 12);
      if ((v45 & 0x40000000) != 0)
      {
        v46 = *(unsigned __int8 **)(a3 + 8 * (v45 & 0x1FFFFFFF) + 16);
        if ((v44 == 0) == (v46 != 0))
          return 0;
        if (v44)
        {
          v57 = v59;
          v58 = 0x2000000000;
          v53 = a1;
          v54 = v56;
          v55 = 0x2000000000;
          v52 = 1;
          v50 = &off_24FAC6E70;
          v51 = &v57;
          sub_22F0E9FEC(&v50, v44);
          v52 = 1;
          v50 = &off_24FAC6E70;
          v51 = &v54;
          v53 = a1;
          sub_22F0E9FEC(&v50, v46);
          v47 = llvm::FoldingSetNodeID::operator==();
          if (v54 != v56)
            free(v54);
          if (v57 != v59)
            free(v57);
          if (!v47)
            return 0;
        }
      }
      else if (v44)
      {
        return 0;
      }
    }
    else
    {
      v43 = *(_DWORD *)(a3 + 12);
      if ((v43 & 0x40000000) != 0 && *(_QWORD *)(a3 + 8 * (v43 & 0x1FFFFFFF) + 16))
        return 0;
    }
    return 1;
  }
  return result;
}

uint64_t sub_22EF69DA4(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;

  while (1)
  {
    v4 = sub_22EF76B30(a1);
    if (v4)
    {
      v5 = v4;
      result = sub_22EF76B30(a2);
      if (!result)
        return result;
      v7 = result;
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      if (v8 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7))
        return 0;
      v9 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 16);
      if (v9)
      {
        v10 = (*(_DWORD *)(a1 + 8) >> 1) & 3;
        if (v10 == 2)
        {
          v10 = 3;
        }
        else if (v10 == 1)
        {
          if ((*(_DWORD *)(v9 + 28) & 0x7F) == 0x10)
            v10 = 1;
          else
            v10 = 2;
          if ((*(_DWORD *)(v9 + 28) & 0x7Fu) - 35 < 3)
            v10 = 6;
        }
        else if (v10)
        {
          v10 = 4;
        }
      }
      else
      {
        v10 = 5;
      }
      v11 = *(_QWORD *)(a2 + 16);
      if (v11)
      {
        v12 = (*(_DWORD *)(a2 + 8) >> 1) & 3;
        if (v12 == 2)
        {
          v12 = 3;
        }
        else if (v12 == 1)
        {
          v16 = *(_DWORD *)(v11 + 28) & 0x7F;
          v17 = v16 - 35;
          if (v16 == 16)
            v12 = 1;
          else
            v12 = 2;
          if (v17 < 3)
            v12 = 6;
        }
        else if (v12)
        {
          v12 = 4;
        }
      }
      else
      {
        v12 = 5;
      }
      if (v10 != v12)
        return 0;
    }
    if (!v9)
      return 1;
    v13 = *(_QWORD *)(a1 + 8);
    v14 = (v13 >> 1) & 3;
    if (v14 - 2 < 2)
    {
      if (*(_QWORD *)(v9 + 8) != *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8))
        return 0;
      goto LABEL_15;
    }
    if (v14 != 1)
    {
      v18 = 0;
      if ((v13 & 6) != 0)
        v19 = 0;
      else
        v19 = v9;
      v15 = *(_QWORD *)(a2 + 8);
      if ((v15 & 6) == 0)
        v18 = *(_QWORD *)(a2 + 16);
      if (v19 != v18)
        return 0;
      goto LABEL_16;
    }
    if ((*(_DWORD *)(v9 + 28) & 0x7Fu) - 35 < 3)
      return 1;
LABEL_15:
    v15 = *(_QWORD *)(a2 + 8);
LABEL_16:
    a2 = v15 & 0xFFFFFFFFFFFFFFF8;
    a1 = v13 & 0xFFFFFFFFFFFFFFF8;
    if ((v13 & 0xFFFFFFFFFFFFFFF8) == 0 || !a2)
      return (a1 | a2) == 0;
  }
}

unint64_t sub_22EF69F90(uint64_t a1, unint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu)
     - 2 < 4
    || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 16)
     - 25 <= 1)
  {
    return sub_22F36A2BC(a1, a2);
  }
  else
  {
    return a2;
  }
}

unint64_t sub_22EF69FD4(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = sub_22EF60188(a1, a2);
  v4 = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v4 + 8);
  if ((*(_DWORD *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 < 4
    || *(_DWORD *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 16) - 25 <= 1)
  {
    v3 = sub_22F36A2BC(a1, v3);
    v4 = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0);
    v5 = *(_QWORD *)(v4 + 8);
  }
  if ((v5 & 0xF) != 0)
    v4 = (unint64_t)sub_22F10D2BC(v3);
  return v4 & 0xFFFFFFFFFFFFFFF0;
}

uint64_t sub_22EF6A060(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v3;
  BOOL v4;
  int v5;
  uint64_t v6;

  result = 1;
  do
  {
    v3 = (_QWORD *)(a2 + 40);
    if (*(_DWORD *)(a2 + 48) >= 0x41u)
      v3 = (_QWORD *)*v3;
    result *= *v3;
    a2 = *(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0);
    if (a2)
      v4 = (*(_DWORD *)(a2 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
    else
      v4 = 0;
    if (v4)
    {
      v5 = *(_DWORD *)(a2 + 16);
      continue;
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
      break;
    v6 = result;
    a2 = sub_22F10CF48(a2);
    result = v6;
    if (!a2)
      break;
    v5 = *(unsigned __int8 *)(a2 + 16);
  }
  while (v5 == 2);
  return result;
}

uint64_t sub_22EF6A108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  unsigned int v5;

  v4 = sub_22EF6A17C(a2);
  v5 = sub_22EF6A17C(a3);
  if (v4 == v5)
    return 0;
  if (!v4 && v5 - 1 < 2 || !v5 && v4 && v4 < 3)
    return 4294967294;
  if (v4 > v5)
    return 1;
  return 0xFFFFFFFFLL;
}

uint64_t sub_22EF6A17C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v4;

  while (1)
  {
    v1 = a1 & 0xFFFFFFFFFFFFFFF0;
    v2 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
    if (!v2 || *(_BYTE *)(v2 + 16) != 12)
    {
      v4 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 12)
        return dword_22F49EF44[((v4 >> 19) & 0x1FF) - 210];
      v2 = sub_22F10CF48(v2);
      if (!v2)
        break;
    }
    a1 = *(_QWORD *)(v2 + 32);
  }
  v4 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  return dword_22F49EF44[((v4 >> 19) & 0x1FF) - 210];
}

uint64_t sub_22EF6A204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_22EF5B2E0(a1, a2);
  v7 = sub_22EF5B2E0(a1, a3);
  if (v6 == v7)
    return 0;
  else
    return sub_22EF6A108(v7, a2, a3);
}

uint64_t sub_22EF6A268(uint64_t a1, uint64_t a2)
{
  if (!a2 || *(_DWORD *)(a2 + 16) != 9)
    __asm { BR              X10 }
  return (4 * *(_DWORD *)(a2 + 32)) & 0x7FFFFF8;
}

uint64_t sub_22EF6A330(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;

  v3 = a2 & 0xFFFFFFFFFFFFFFF0;
  v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0;
  v6 = *(_QWORD *)v5;
  if (*(_QWORD *)v5 && *(_BYTE *)(v6 + 16) == 44)
  {
    v7 = sub_22F114198(*(_QWORD *)(v6 + 24));
    v3 = sub_22E496830(v7) & 0xFFFFFFFFFFFFFFF0;
    v4 = *(_QWORD *)v3;
    v5 = *(_QWORD *)(*(_QWORD *)v3 + 8) & 0xFFFFFFFFFFFFFFF0;
  }
  v8 = *(_QWORD *)v5;
  v9 = *(_DWORD *)(*(_QWORD *)v5 + 16);
  if (v8)
    v10 = (v9 & 0xFF800FF) == 87031819;
  else
    v10 = 0;
  if (v10)
    return 1;
  if (*(_BYTE *)(v4 + 16) == 9)
    return (*(_DWORD *)(v4 + 32) >> 1) & 0xFFFFFF;
  if (v9 == 9)
  {
    v4 = sub_22F10CF48(v4);
    if (v4)
      return (*(_DWORD *)(v4 + 32) >> 1) & 0xFFFFFF;
    v4 = *(_QWORD *)v3;
  }
  return sub_22EF5CDF0(a1, v4);
}

unsigned __int8 *sub_22EF6A3F8(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *result;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;

  if ((*(_DWORD *)a2 & 0x18000) == 0
    && ((*(_BYTE *)(*(_QWORD *)(a1 + 2000) + 1) & 1) == 0
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                 + 16) != 44))
  {
    result = sub_22F0018D8((unsigned __int8 *)a2);
    if (!result)
      return result;
    v4 = *((_QWORD *)result + 6);
    v5 = sub_22EFC2EF4((uint64_t)result, a1);
    v6 = a1 + 16480;
    v7 = sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16480) & 0xFFFFFFFFFFFFFFF0));
    if (v7 > v5)
      return *(unsigned __int8 **)v6;
    if (v7 == v5)
    {
      if (!sub_22F110930(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)))
        v6 = a1 + 16528;
      return *(unsigned __int8 **)v6;
    }
  }
  return 0;
}

uint64_t sub_22EF6A4D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD v21[6];

  v21[5] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_DWORD *)(v5 + 16);
  if (v5 && v6 == 44)
    return *(_QWORD *)(sub_22F114198(*(_QWORD *)(v5 + 24)) + 136);
  if (v5)
    v8 = v6 == 11;
  else
    v8 = 0;
  if (v8 && ((v9 = (v6 >> 19) & 0x1FF, (v9 - 169) < 4) || v9 == 180))
  {
    v10 = sub_22EF5CDF0((uint64_t)a1, v5);
    v7 = a1[2060];
    v21[0] = a1[2066];
    v11 = a1[2067];
    v21[1] = a1[2061];
    v21[2] = v11;
    v12 = a1[2068];
    v21[3] = a1[2062];
    v21[4] = v12;
    v13 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFF0);
    v14 = sub_22EF5CDF0((uint64_t)a1, *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
    if (v10 >= v14)
    {
      v15 = 0;
      v16 = v6 & 0xFF80000;
      do
      {
        if (v10 == v14 && (((v16 != 94371840) ^ sub_22F110930(*v13)) & 1) != 0)
          break;
        if (v15 == 5)
          break;
        v7 = v21[v15];
        v13 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFF0);
        v14 = sub_22EF5CDF0((uint64_t)a1, *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
        ++v15;
      }
      while (v10 >= v14);
    }
  }
  else if (sub_22F110930(v4))
  {
    return a1[2060];
  }
  else
  {
    v17 = sub_22EF6A330((uint64_t)a1, a2);
    v18 = sub_22EF6A330((uint64_t)a1, a1[2060]);
    v19 = 2060;
    if (v17 == v18)
      v19 = 2066;
    return a1[v19];
  }
  return v7;
}

uint64_t sub_22EF6A694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;

  v4 = *(_QWORD *)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v4 && *(_BYTE *)(v4 + 16) == 44)
    v4 = sub_22EF6A794(*(_QWORD *)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0));
  if (*(_BYTE *)(v5 + 16) == 44 && v5 != 0)
    v5 = sub_22EF6A794(v5);
  if (v4 == v5)
    return 0;
  v7 = sub_22F110B50(v4);
  v8 = sub_22F110B50(v5);
  v9 = sub_22EF6A268(a1, v4);
  v10 = sub_22EF6A268(a1, v5);
  if (v7 == v8)
  {
    if (v9 != v10)
    {
      if (v9 > v10)
        return 1;
      else
        return 0xFFFFFFFFLL;
    }
    return 0;
  }
  if (v7)
  {
    v11 = v9 >= v10;
    v12 = -1;
  }
  else
  {
    v11 = v10 >= v9;
    v12 = 1;
  }
  if (v11)
    return -v12;
  else
    return v12;
}

uint64_t sub_22EF6A794(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_22F114198(*(_QWORD *)(a1 + 24));
  if ((*(_BYTE *)(v2 + 74) & 1) == 0 && *(_QWORD *)(v2 + 128) < 8uLL
    || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(a1 + 24)) + 76) & 0x80) != 0)
  {
    return 0;
  }
  v3 = sub_22F114198(*(_QWORD *)(a1 + 24));
  return *(_QWORD *)(sub_22E496830(v3) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_22EF6A7F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t i;
  unsigned int v5;
  unint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  const char *v28;
  unint64_t v29;
  const char *v30;
  unint64_t v31;
  const char *v32;
  unint64_t v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  result = *(_QWORD *)(a1 + 1400);
  if (!result)
  {
    v3 = sub_22F368234(a1, "__NSConstantString_tag", 0x16uLL, 0);
    *(_QWORD *)(a1 + 1392) = v3;
    sub_22EFC3340(v3);
    for (i = 0; i != 80; i += 16)
      *(unint64_t *)((char *)&v27 + i) = 0;
    v5 = *(_DWORD *)(*(_QWORD *)(a1 + 2000) + 420);
    if (v5 > 2)
    {
      v24 = sub_22EF5B0AC(a1, *(_DWORD *)(*(_QWORD *)(a1 + 15088) + *(_QWORD *)(**(_QWORD **)(a1 + 15088) - 24) + 124));
      v27 = sub_22EF67D20(a1, v24);
      v28 = "_cfisa";
      v25 = sub_22EF5B0AC(a1, *(_DWORD *)(*(_QWORD *)(a1 + 15088) + *(_QWORD *)(**(_QWORD **)(a1 + 15088) - 24) + 124));
      v29 = sub_22EF67D20(a1, v25);
      v30 = "_swift_rc";
      v31 = sub_22EF5B0AC(a1, dword_22F49EF64[*(int *)(*(_QWORD *)(a1 + 15088) + *(_QWORD *)(**(_QWORD **)(a1 + 15088) - 24) + 144)- 1]);
      v32 = "_swift_rc";
      v33 = sub_22EF5B848(a1, *(_QWORD *)(a1 + 16408) | 1, 0);
      v34 = "_ptr";
      if (v5 - 5 > 1)
      {
        v26 = sub_22EF5B0AC(a1, *(_DWORD *)(*(_QWORD *)(a1 + 15088) + *(_QWORD *)(**(_QWORD **)(a1 + 15088) - 24) + 124));
        v6 = sub_22EF67D20(a1, v26);
        v8 = 5;
        v9 = 4;
        v7 = "_ptr";
      }
      else
      {
        v6 = *(_QWORD *)(a1 + 16480);
        v7 = "_ptr";
        v8 = 5;
        v9 = 4;
      }
    }
    else
    {
      v27 = sub_22EF5B848(a1, *(_QWORD *)(a1 + 16480) | 1, 0);
      v28 = "isa";
      v29 = *(_QWORD *)(a1 + 16480);
      v30 = "flags";
      v31 = sub_22EF5B848(a1, *(_QWORD *)(a1 + 16408) | 1, 0);
      v32 = "str";
      v6 = *(_QWORD *)(a1 + 16488);
      v7 = "length";
      v8 = 4;
      v9 = 3;
    }
    v10 = 0;
    v11 = &v27 + 2 * v9;
    *v11 = v6;
    v11[1] = (unint64_t)v7;
    v12 = 16 * v8;
    do
    {
      v13 = *(_QWORD *)(a1 + 1392);
      if (v13)
        v14 = v13 + 64;
      else
        v14 = 0;
      v15 = *(const void **)((char *)&v27 + v10 + 8);
      if (v15)
        v16 = strlen(*(const char **)((char *)&v27 + v10 + 8));
      else
        v16 = 0;
      v17 = sub_22E3CB704(*(llvm::StringMapImpl **)(a1 + 15192), v15, v16);
      v18 = *(unint64_t *)((char *)&v27 + v10);
      v19 = sub_22EFC7430(80, a1, v14, 0);
      v20 = sub_22EA41AB8(v19, 49, v14, 0);
      *(_QWORD *)(v20 + 40) = v17;
      *(_QWORD *)(v20 + 48) = v18;
      *(_QWORD *)(v20 + 56) = 0;
      *(_QWORD *)(v20 + 64) = 0;
      *(_QWORD *)v20 = &off_24FAC2F90;
      *(_QWORD *)(v20 + 72) = 0;
      *(_DWORD *)(v20 + 28) &= 0xFFFF9FFF;
      sub_22EFCCFA0(*(_QWORD *)(a1 + 1392) + 64, v19);
      v10 += 16;
    }
    while (v12 != v10);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1392) + 104))(*(_QWORD *)(a1 + 1392));
    v21 = *(_QWORD *)(a1 + 1392);
    v22 = *(_QWORD *)(v21 + 48);
    if (v22)
      v23 = v22 & 0xFFFFFFFFFFFFFFF0;
    else
      v23 = sub_22EF6462C(a1, v21);
    result = sub_22EF59578(a1, v23, "__NSConstantString", 0x12uLL);
    *(_QWORD *)(a1 + 1400) = result;
  }
  return result;
}

BOOL sub_22EF6AB44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  int v13;
  _BOOL8 result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v20 = a2;
  v6 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_22F10C2A4(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (v7)
  {
    v16 = v7;
    if ((*(_DWORD *)(v7 + 28) & 0x7Fu) - 35 <= 2)
    {
      v21 = 0;
      v22 = a3;
      if (sub_22F246C54((uint64_t *)(a1 + 1096), &v22, &v21))
      {
        v17 = v21;
        v18 = *(_QWORD *)(a1 + 1096);
        v19 = *(unsigned int *)(a1 + 1112);
      }
      else
      {
        v18 = *(_QWORD *)(a1 + 1096);
        v19 = *(unsigned int *)(a1 + 1112);
        v17 = v18 + 16 * v19;
      }
      if (v17 != v18 + 16 * v19 && *(_QWORD *)(v17 + 8) > 3uLL)
        return 1;
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v16 + 104) + 96), *(_QWORD *)(v16 + 104));
      return (**(_QWORD **)(v16 + 128) & 0x100000000000) == 0;
    }
  }
  v8 = v6[1];
  if ((v8 & 8) != 0)
  {
    v9 = *(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 0x1C);
    v10 = v9 & 0xC;
    v11 = v9 & 2;
    if (v10 && v11 != 0)
      return 1;
  }
  if (sub_22F111B38(&v20) || sub_22F115260(a2))
    return 1;
  v13 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v13 == 10 || v13 == 32 || (result = sub_22F115064(*v6)))
  {
    v15 = v6[1];
    if ((v15 & 8) == 0 || (*(_WORD *)((v15 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) == 0)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 10 && !sub_22F115064(*v6))
        return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32;
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_22EF6ACE0(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  _QWORD v12[3];

  v3 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 4)
  {
    v5 = 0;
    if ((sub_22F1110EC(v4, 0) & 1) != 0)
      return v5;
    v4 = *v3;
  }
  sub_22EF5CCD0(a1, v4, (uint64_t)v12);
  v5 = v12[0];
  v6 = *v3;
  if (v12[0] < 1)
    goto LABEL_19;
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_DWORD *)(v7 + 16);
  if (v7)
    v9 = v8 == 11;
  else
    v9 = 0;
  if (v9)
  {
    if (((*(_DWORD *)(v7 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
      goto LABEL_15;
    goto LABEL_19;
  }
  if (!v7 || v8 != 44)
  {
    if (v8 == 9)
      goto LABEL_15;
LABEL_19:
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
    {
      sub_22EF5CCD0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16816) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v12);
      return v12[0];
    }
    return v5;
  }
  v10 = sub_22F114198(*(_QWORD *)(v7 + 24));
  if ((*(_BYTE *)(v10 + 74) & 1) == 0 && *(_QWORD *)(v10 + 128) <= 7uLL)
  {
    v6 = *v3;
    goto LABEL_19;
  }
LABEL_15:
  sub_22EF5CCD0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16480) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v12);
  if (v5 <= v12[0])
    return v12[0];
  else
    return v5;
}

uint64_t sub_22EF6AE34(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v12;

  if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
    return 0;
  v2 = a2;
  if ((*(_BYTE *)(a2 + 97) & 0x20) == 0)
    return 0;
  v4 = *(_QWORD *)(a2 + 80);
  if ((*(_DWORD *)(v4 + 28) & 0x7F) != 0x40 && (*(_BYTE *)(v4 + 97) & 0x40) == 0)
  {
    v5 = *(_QWORD *)(v4 + 16);
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 4) != 0)
      v6 = *(_QWORD *)v6;
    if ((*(_WORD *)(v6 + 8) & 0x7Eu) - 34 <= 3)
    {
      v7 = 0;
      while (1)
      {
        v8 = *(_QWORD *)(a2 + 16);
        v9 = v8 & 0xFFFFFFFFFFFFFFF8;
        if ((v8 & 4) != 0)
          v9 = *(_QWORD *)(v9 + 8);
        v10 = *(_WORD *)(v9 + 8) & 0x7F;
        if (v10 == 83 || v10 == 16)
        {
          if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x40)
          {
            v12 = *(_DWORD *)(a2 + 96);
            if ((v12 & 0x4000) != 0)
              goto LABEL_22;
            if ((v12 & 0x8000) != 0)
              return 3;
          }
          if ((*(_DWORD *)(v4 + 28) & 0x7F) != 0x40 && (*(_BYTE *)(v4 + 97) & 0x80) != 0)
            return 3;
        }
LABEL_22:
        if ((*(_BYTE *)(a2 + 72) & 3) != 0)
        {
          if (v7)
            return 2;
          v7 = 1;
        }
        a2 = sub_22E3CD31C((uint64_t *)(a2 + 72), a2);
        result = 2;
        if (a2 == v2 || !a2)
          return result;
      }
    }
  }
  return 1;
}

uint64_t sub_22EF6AF60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  const std::string::value_type *p_p;
  std::string::size_type v23;
  uint64_t result;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  uint64_t *v40;
  void *__p;
  std::string::size_type v42;
  char v43;
  _BYTE v44[20];
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v6)
    v7 = *(_BYTE *)(v6 + 16) == 10;
  else
    v7 = 0;
  if (!v7)
    v6 = sub_22F10CF48(v6);
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 32) & 0xFFFFFFFFFFFFFFF0);
  if (v8)
    v9 = *(unsigned __int8 *)(v8 + 16) - 27 > 0xFFFFFFFD;
  else
    v9 = 0;
  if (!v9)
    v8 = sub_22F10CF48(v8);
  v10 = *(_QWORD *)(v8 + 24);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 2000) + 2) & 1) != 0)
    v11 = 103;
  else
    v11 = 7;
  LODWORD(__p) = v11;
  sub_22EF6B358(a1, v10);
  sub_22EF5CCD0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16816) & 0xFFFFFFFFFFFFFFF0), (uint64_t)&__p);
  v12 = (int64_t)__p;
  v13 = *(unsigned int *)(v5 + 80);
  v14 = (unint64_t)__p;
  if ((_DWORD)v13)
  {
    v15 = *(uint64_t **)(v5 + 72);
    v16 = 8 * v13;
    v14 = (unint64_t)__p;
    do
    {
      v17 = *v15++;
      v14 += sub_22EF6ACE0(a1, *(_QWORD *)(v17 + 48));
      v16 -= 8;
    }
    while (v16);
  }
  if ((v14 & 0x8000000000000000) != 0)
  {
    v19 = 0;
    v20 = -(uint64_t)v14;
    do
    {
      *(&v45 + v19--) = (v20 % 0xA) | 0x30;
      v9 = v20 > 9;
      v20 /= 0xAuLL;
    }
    while (v9);
    v44[v19 + 20] = 45;
    v18 = &v44[v19 + 20];
    v21 = (char *)(1 - v19);
  }
  else
  {
    if (v14)
    {
      v18 = (char *)&v46;
      do
      {
        *--v18 = (v14 % 0xA) | 0x30;
        v9 = v14 > 9;
        v14 /= 0xAuLL;
      }
      while (v9);
    }
    else
    {
      v18 = &v45;
      v45 = 48;
    }
    v21 = (char *)((char *)&v46 - v18);
  }
  sub_22E3B4274(&__p, v18, (char *)&v46, (unint64_t)v21);
  if (v43 >= 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if (v43 >= 0)
    v23 = v43 & 0x7F;
  else
    v23 = v42;
  std::string::append(a3, p_p, v23);
  if (v43 < 0)
    operator delete(__p);
  result = (uint64_t)std::string::append(a3, "@?0");
  v25 = *(unsigned int *)(v5 + 80);
  if ((_DWORD)v25)
  {
    v26 = *(uint64_t **)(v5 + 72);
    v40 = &v26[v25];
    while (1)
    {
      v27 = *v26;
      v28 = sub_22EFBF144(*v26);
      v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v30 = *(_DWORD *)(v29 + 16);
      if (!v29 || (*(_DWORD *)(v29 + 16) & 0xFEu) - 6 < 0xFFFFFFFC)
        break;
      if (v30 != 2)
        goto LABEL_44;
LABEL_45:
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 2000) + 2) & 1) != 0)
        v32 = 103;
      else
        v32 = 7;
      LODWORD(__p) = v32;
      sub_22EF6B358(a1, v28);
      if (v12 < 0)
      {
        v35 = 0;
        v36 = -v12;
        do
        {
          *(&v45 + v35--) = (v36 % 0xA) | 0x30;
          v9 = v36 > 9;
          v36 /= 0xAuLL;
        }
        while (v9);
        v33 = &v45 + v35;
        *(&v45 + v35) = 45;
        v37 = (char *)(1 - v35);
      }
      else
      {
        v33 = (char *)&v46;
        v34 = v12;
        if (v12)
        {
          do
          {
            *--v33 = (v34 % 0xA) | 0x30;
            v9 = v34 > 9;
            v34 /= 0xAuLL;
          }
          while (v9);
        }
        else
        {
          v45 = 48;
          v33 = &v45;
        }
        v37 = (char *)((char *)&v46 - v33);
      }
      sub_22E3B4274(&__p, v33, (char *)&v46, (unint64_t)v37);
      if (v43 >= 0)
        v38 = (const std::string::value_type *)&__p;
      else
        v38 = (const std::string::value_type *)__p;
      if (v43 >= 0)
        v39 = v43 & 0x7F;
      else
        v39 = v42;
      std::string::append(a3, v38, v39);
      if (v43 < 0)
        operator delete(__p);
      result = sub_22EF6ACE0(a1, v28);
      v12 += result;
      if (++v26 == v40)
        return result;
    }
    if ((v30 - 25) > 1)
      goto LABEL_45;
LABEL_44:
    v28 = *(_QWORD *)(v27 + 48);
    goto LABEL_45;
  }
  return result;
}

void sub_22EF6B358(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

void sub_22EF6B3D0()
{
  _QWORD *v0;
  uint64_t v1;

  if (v0)
    *v0 = v1;
}

void sub_22EF6C204(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  const std::string::value_type *p_p;
  std::string::size_type v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  const std::string::value_type *v44;
  std::string::size_type v45;
  uint64_t *v46;
  int v47;
  void *__p;
  std::string::size_type v49;
  char v50;
  _BYTE v51[20];
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  v8 = a2[10];
  sub_22F36E11C(a1, (a2[7] >> 26) & 0x7F, a4);
  if (a3)
    v9 = 103;
  else
    v9 = 7;
  v47 = v9;
  LODWORD(__p) = v9;
  sub_22EF6B358(a1, v8);
  sub_22EF5CCD0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16816) & 0xFFFFFFFFFFFFFFF0), (uint64_t)&__p);
  v10 = (unint64_t)__p;
  v11 = 2 * (_QWORD)__p;
  v12 = a2[5] & 7;
  v13 = 2 * (_QWORD)__p;
  if (v12 >= 2)
  {
    v14 = (uint64_t *)a2[12];
    if ((_DWORD)v12 == 2)
    {
      v15 = v14 + 1;
    }
    else
    {
      v13 = 2 * (_QWORD)__p;
      if (*(_DWORD *)(a2[5] & 0xFFFFFFFFFFFFFFF8) == 3)
        goto LABEL_11;
      v15 = &v14[*(_DWORD *)(a2[5] & 0xFFFFFFFFFFFFFFF8) - 3];
    }
    v13 = 2 * (_QWORD)__p;
    do
    {
      v16 = *v14++;
      v13 += sub_22EF6ACE0(a1, *(_QWORD *)(v16 + 48));
    }
    while (v14 != v15);
  }
LABEL_11:
  if ((v13 & 0x8000000000000000) != 0)
  {
    v19 = 0;
    v20 = -(uint64_t)v13;
    do
    {
      *(&v52 + v19--) = (v20 % 0xA) | 0x30;
      v18 = v20 > 9;
      v20 /= 0xAuLL;
    }
    while (v18);
    v51[v19 + 20] = 45;
    v17 = &v51[v19 + 20];
    v21 = (char *)(1 - v19);
  }
  else
  {
    if (v13)
    {
      v17 = (char *)&v53;
      do
      {
        *--v17 = (v13 % 0xA) | 0x30;
        v18 = v13 > 9;
        v13 /= 0xAuLL;
      }
      while (v18);
    }
    else
    {
      v17 = &v52;
      v52 = 48;
    }
    v21 = (char *)((char *)&v53 - v17);
  }
  sub_22E3B4274(&__p, v17, (char *)&v53, (unint64_t)v21);
  if (v50 >= 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if (v50 >= 0)
    v23 = v50 & 0x7F;
  else
    v23 = v49;
  std::string::append(a4, p_p, v23);
  if (v50 < 0)
    operator delete(__p);
  std::string::append(a4, "@0:");
  if ((v10 & 0x8000000000000000) != 0)
  {
    v25 = 0;
    v26 = -(uint64_t)v10;
    do
    {
      *(&v52 + v25--) = (v26 % 0xA) | 0x30;
      v18 = v26 > 9;
      v26 /= 0xAuLL;
    }
    while (v18);
    v51[v25 + 20] = 45;
    v24 = &v51[v25 + 20];
    v27 = (char *)(1 - v25);
  }
  else
  {
    if (v10)
    {
      v24 = (char *)&v53;
      do
      {
        *--v24 = (v10 % 0xA) | 0x30;
        v18 = v10 > 9;
        v10 /= 0xAuLL;
      }
      while (v18);
    }
    else
    {
      v24 = &v52;
      v52 = 48;
    }
    v27 = (char *)((char *)&v53 - v24);
  }
  sub_22E3B4274(&__p, v24, (char *)&v53, (unint64_t)v27);
  if (v50 >= 0)
    v28 = (const std::string::value_type *)&__p;
  else
    v28 = (const std::string::value_type *)__p;
  if (v50 >= 0)
    v29 = v50 & 0x7F;
  else
    v29 = v49;
  std::string::append(a4, v28, v29);
  if (v50 < 0)
    operator delete(__p);
  v30 = a2[5] & 7;
  if (v30 >= 2)
  {
    v31 = (uint64_t *)a2[12];
    if ((_DWORD)v30 == 2)
    {
      v32 = v31 + 1;
LABEL_52:
      v46 = v32;
      while (1)
      {
        v33 = *v31;
        v34 = sub_22EFBF144(*v31);
        v35 = v34;
        v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v37 = *(_DWORD *)(v36 + 16);
        if (!v36 || (*(_DWORD *)(v36 + 16) & 0xFEu) - 6 < 0xFFFFFFFC)
          break;
        if (v37 != 2)
          goto LABEL_60;
LABEL_61:
        sub_22F36E11C(v34, (*(_DWORD *)(v33 + 96) >> 13) & ((int)(*(_DWORD *)(v33 + 96) << 19) >> 31) & 0x7F, a4);
        LODWORD(__p) = v47;
        sub_22EF6B358(a1, v35);
        if (v11 < 0)
        {
          v41 = 0;
          v42 = -v11;
          do
          {
            *(&v52 + v41--) = (v42 % 0xA) | 0x30;
            v18 = v42 > 9;
            v42 /= 0xAuLL;
          }
          while (v18);
          v39 = &v52 + v41;
          *(&v52 + v41) = 45;
          v43 = (char *)(1 - v41);
        }
        else
        {
          v39 = (char *)&v53;
          v40 = v11;
          if (v11)
          {
            do
            {
              *--v39 = (v40 % 0xA) | 0x30;
              v18 = v40 > 9;
              v40 /= 0xAuLL;
            }
            while (v18);
          }
          else
          {
            v52 = 48;
            v39 = &v52;
          }
          v43 = (char *)((char *)&v53 - v39);
        }
        sub_22E3B4274(&__p, v39, (char *)&v53, (unint64_t)v43);
        if (v50 >= 0)
          v44 = (const std::string::value_type *)&__p;
        else
          v44 = (const std::string::value_type *)__p;
        if (v50 >= 0)
          v45 = v50 & 0x7F;
        else
          v45 = v49;
        std::string::append(a4, v44, v45);
        if (v50 < 0)
          operator delete(__p);
        v11 += sub_22EF6ACE0(a1, v35);
        if (++v31 == v46)
          return;
      }
      if ((v37 - 25) > 1)
        goto LABEL_61;
LABEL_60:
      v35 = *(_QWORD *)(v33 + 48);
      goto LABEL_61;
    }
    if (*(_DWORD *)(a2[5] & 0xFFFFFFFFFFFFFFF8) != 3)
    {
      v32 = &v31[*(_DWORD *)(a2[5] & 0xFFFFFFFFFFFFFFF8) - 3];
      goto LABEL_52;
    }
  }
}

unint64_t sub_22EF6C718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v5 = *(_DWORD *)(a3 + 28) & 0x7F;
    v6 = sub_22F276498(a3);
    if (v5 == 20)
    {
      if (v6 != v7)
      {
        while (*(_QWORD *)(v6 + 48) != a2)
        {
          do
            v6 = *(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v6 && (*(_DWORD *)(v6 + 28) & 0x7F) != 0x4E);
          a3 = 0;
          if (v6 == v7)
            return a3;
        }
        return v6;
      }
    }
    else if (v6 != v7)
    {
      while (*(_QWORD *)(v6 + 48) != a2)
      {
        do
          v6 = *(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v6 && (*(_DWORD *)(v6 + 28) & 0x7F) != 0x4E);
        a3 = 0;
        if (v6 == v7)
          return a3;
      }
      return v6;
    }
    return 0;
  }
  return a3;
}

void sub_22EF6C7E4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  const std::string::value_type *v13;
  int v14;
  const std::string::value_type *p_p;
  std::string::size_type v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  uint64_t v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  unsigned int v22;
  uint64_t v23;
  void *__p;
  std::string::size_type v25;
  char v26;

  v7 = sub_22EF6C718(a1, a2, a3);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 56);
    v9 = v8 == 0;
    if (v8)
      v10 = v7;
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  *(_BYTE *)(a4 + 23) = 1;
  *(_WORD *)a4 = 84;
  v11 = *(_QWORD *)(a2 + 56);
  LODWORD(__p) = 15;
  sub_22EF6B358(a1, v11);
  if ((*(_BYTE *)(a2 + 72) & 1) == 0)
  {
    v22 = sub_22F274FC4(a2) - 1;
    if (v22 > 2)
      goto LABEL_15;
    v13 = off_24FABA8B0[v22];
LABEL_14:
    std::string::append((std::string *)a4, v13);
    goto LABEL_15;
  }
  std::string::append((std::string *)a4, ",R");
  v12 = *(_DWORD *)(a2 + 72);
  if ((v12 & 0x20) == 0)
  {
    if ((v12 & 0x10) == 0)
      goto LABEL_9;
LABEL_12:
    std::string::append((std::string *)a4, ",&");
    if ((*(_DWORD *)(a2 + 72) & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_13;
  }
  std::string::append((std::string *)a4, ",C");
  v12 = *(_DWORD *)(a2 + 72);
  if ((v12 & 0x10) != 0)
    goto LABEL_12;
LABEL_9:
  if ((v12 & 0x200) != 0)
  {
LABEL_13:
    v13 = ",W";
    goto LABEL_14;
  }
LABEL_15:
  if (v9)
    std::string::append((std::string *)a4, ",D");
  v14 = *(_DWORD *)(a2 + 72);
  if ((v14 & 0x40) != 0)
  {
    std::string::append((std::string *)a4, ",N");
    v14 = *(_DWORD *)(a2 + 72);
    if ((v14 & 2) == 0)
    {
LABEL_19:
      if ((v14 & 0x80) == 0)
        goto LABEL_39;
      goto LABEL_31;
    }
  }
  else if ((v14 & 2) == 0)
  {
    goto LABEL_19;
  }
  std::string::append((std::string *)a4, ",G");
  v23 = *(_QWORD *)(a2 + 80);
  sub_22F1D3A38(&v23, (char *)&__p);
  if (v26 >= 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if (v26 >= 0)
    v16 = v26 & 0x7F;
  else
    v16 = v25;
  std::string::append((std::string *)a4, p_p, v16);
  if (v26 < 0)
    operator delete(__p);
  if ((*(_DWORD *)(a2 + 72) & 0x80) != 0)
  {
LABEL_31:
    std::string::append((std::string *)a4, ",S");
    v23 = *(_QWORD *)(a2 + 88);
    sub_22F1D3A38(&v23, (char *)&__p);
    if (v26 >= 0)
      v17 = (const std::string::value_type *)&__p;
    else
      v17 = (const std::string::value_type *)__p;
    if (v26 >= 0)
      v18 = v26 & 0x7F;
    else
      v18 = v25;
    std::string::append((std::string *)a4, v17, v18);
    if (v26 < 0)
      operator delete(__p);
  }
LABEL_39:
  if (v10)
  {
    v19 = *(_QWORD *)(v10 + 56);
    std::string::append((std::string *)a4, ",V");
    sub_22EFC683C((uint64_t *)(v19 + 40), &__p);
    if (v26 >= 0)
      v20 = (const std::string::value_type *)&__p;
    else
      v20 = (const std::string::value_type *)__p;
    if (v26 >= 0)
      v21 = v26 & 0x7F;
    else
      v21 = v25;
    std::string::append((std::string *)a4, v20, v21);
    if (v26 < 0)
      operator delete(__p);
  }
}

uint64_t sub_22EF6CA64(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v4 + 16) == 50)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0);
    v6 = *(_DWORD *)(v5 + 16);
    if (v5 && *(_DWORD *)(v5 + 16) == 11)
    {
      v8 = result;
      if ((v6 & 0xFF80000) == 0x5780000)
      {
        result = sub_22EF6A330(result, v3);
        if ((_DWORD)result == 32)
        {
          v9 = 16528;
          goto LABEL_14;
        }
        v6 = *(_DWORD *)(v5 + 16);
      }
      if ((v6 & 0xFF80000) != 0x5B80000)
        return result;
      result = sub_22EF6A330(v8, *a2);
      if ((_DWORD)result != 32)
        return result;
      v9 = 16480;
LABEL_14:
      *a2 = *(_QWORD *)(v8 + v9);
    }
  }
  return result;
}

void sub_22EF6CB24(uint64_t a1, std::string *this, uint64_t a3, unint64_t a4)
{
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  BOOL v17;
  const std::string::value_type *p_p;
  std::string::size_type v19;
  uint64_t v20;
  std::string::value_type v21;
  unsigned int v22;
  char *v23;
  unint64_t v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  void *__p;
  std::string::size_type v28;
  char v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  std::string::push_back(this, 98);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 2000) + 400) >= 5u)
  {
    if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x33)
    {
      v8 = sub_22EFDE1AC(a4);
      v9 = sub_22F0CBCD0(a1, (uint64_t)v8, 0, a4);
    }
    else
    {
      v10 = *(_QWORD *)(a4 + 16);
      v11 = v10 & 0xFFFFFFFFFFFFFFF8;
      if ((v10 & 4) != 0)
        v11 = *(_QWORD *)v11;
      v12 = (*(_WORD *)(v11 + 8) & 0x7E) - 34;
      if (v11)
        v13 = v11 - 64;
      else
        v13 = 0;
      if (v12 >= 4)
        v14 = 0;
      else
        v14 = v13;
      v15 = sub_22F0C975C(a1, v14);
      v9 = *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * sub_22EFC306C(a4));
    }
    if (v9)
    {
      v16 = (char *)&v31;
      do
      {
        *--v16 = (v9 % 0xA) | 0x30;
        v17 = v9 > 9;
        v9 /= 0xAuLL;
      }
      while (v17);
    }
    else
    {
      v16 = &v30;
      v30 = 48;
    }
    sub_22E3B4274(&__p, v16, (char *)&v31, (char *)&v31 - v16);
    if (v29 >= 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if (v29 >= 0)
      v19 = v29 & 0x7F;
    else
      v19 = v28;
    std::string::append(this, p_p, v19);
    if (v29 < 0)
      operator delete(__p);
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v20 && *(_BYTE *)(v20 + 16) == 44)
      sub_22EF6CF98(a1, *(_QWORD *)(v20 + 24));
    else
      sub_22EF6CDA0(a1, v20);
    std::string::push_back(this, v21);
  }
  v22 = sub_22EFC2EF4(a4, a1);
  if (v22)
  {
    v23 = (char *)&v31;
    v24 = v22;
    do
    {
      *--v23 = (v24 % 0xA) | 0x30;
      v17 = v24 > 9;
      v24 /= 0xAuLL;
    }
    while (v17);
  }
  else
  {
    v23 = &v30;
    v30 = 48;
  }
  sub_22E3B4274(&__p, v23, (char *)&v31, (char *)&v31 - v23);
  if (v29 >= 0)
    v25 = (const std::string::value_type *)&__p;
  else
    v25 = (const std::string::value_type *)__p;
  if (v29 >= 0)
    v26 = v29 & 0x7F;
  else
    v26 = v28;
  std::string::append(this, v25, v26);
  if (v29 < 0)
    operator delete(__p);
}

void sub_22EF6CDA0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_22EF6CDE4()
{
  return 32;
}

uint64_t sub_22EF6CE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 *a9, uint64_t a10, uint64_t a11, __int16 a12)
{
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  size_t v20;

  v14 = *(_QWORD *)(*(_QWORD *)(v12 + 1992) + 8);
  v15 = sub_22F41A810(*(_QWORD *)(v14 + 32), 4, "cannot yet @encode type %0", 0x1AuLL);
  *(_DWORD *)(v14 + 312) = 0;
  *(_DWORD *)(v14 + 316) = v15;
  if (*(char *)(v14 + 311) < 0)
  {
    **(_BYTE **)(v14 + 288) = 0;
    *(_QWORD *)(v14 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v14 + 288) = 0;
    *(_BYTE *)(v14 + 311) = 0;
  }
  a9 = (unsigned __int8 *)(v14 + 320);
  a10 = 0;
  a11 = v14;
  a12 = 1;
  *(_BYTE *)(v14 + 320) = 0;
  *(_DWORD *)(v14 + 664) = 0;
  v16 = *(unsigned int *)(v14 + 776);
  if ((_DWORD)v16)
  {
    v17 = *(_QWORD *)(v14 + 768);
    v18 = 56 * v16;
    do
    {
      if (*(char *)(v17 + v18 - 9) < 0)
        operator delete(*(void **)(v17 + v18 - 32));
      v18 -= 56;
    }
    while (v18);
  }
  *(_DWORD *)(v14 + 776) = 0;
  v19 = (void *)sub_22F1125EC(a2);
  sub_22E3B89A8(&a9, v19, v20);
  sub_22E3BB0B8((uint64_t)&a9);
  return sub_22EF6CDE4();
}

void sub_22EF6CEE0()
{
  JUMPOUT(0x22EF6CDE8);
}

void sub_22EF6CEE8()
{
  JUMPOUT(0x22EF6CDE8);
}

void sub_22EF6CEF0()
{
  JUMPOUT(0x22EF6CDE8);
}

void sub_22EF6CEF8()
{
  JUMPOUT(0x22EF6CDE8);
}

void sub_22EF6CF00()
{
  JUMPOUT(0x22EF6CDE8);
}

void sub_22EF6CF08()
{
  JUMPOUT(0x22EF6CDE8);
}

void sub_22EF6CF10()
{
  JUMPOUT(0x22EF6CDE8);
}

void sub_22EF6CF74()
{
  JUMPOUT(0x22EF6CDE8);
}

void sub_22EF6CF7C()
{
  JUMPOUT(0x22EF6CDE8);
}

void sub_22EF6CF84()
{
  JUMPOUT(0x22EF6CDE8);
}

void sub_22EF6CF8C()
{
  JUMPOUT(0x22EF6CDE8);
}

void sub_22EF6CF98(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = sub_22F114198(a2);
  if ((*(_BYTE *)(v3 + 77) & 2) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22E496830(v3) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    sub_22EF6CDA0(a1, v4);
  }
}

uint64_t sub_22EF6CFF0(uint64_t a1, int a2)
{
  int i;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  int v10;
  _BOOL4 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  for (i = a2 ^ 1; ; i = 1)
  {
    while (1)
    {
      if (a1 && (*(_DWORD *)(a1 + 16) & 0xFEu) - 6 > 0xFFFFFFFB)
      {
        v6 = a1;
        goto LABEL_9;
      }
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
      {
        v4 = *(_DWORD *)(a1 + 16);
        if (!a1)
          goto LABEL_12;
        goto LABEL_6;
      }
      v6 = sub_22F10CF48(a1);
      if (!v6)
        break;
LABEL_9:
      a1 = *(_QWORD *)(*(_QWORD *)(v6 + 32) & 0xFFFFFFFFFFFFFFF0);
    }
    v4 = *(unsigned __int8 *)(a1 + 16);
    if (!a1)
      goto LABEL_12;
LABEL_6:
    if (v4 == 39)
    {
      v5 = a1;
      goto LABEL_14;
    }
LABEL_12:
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
      break;
    v5 = sub_22F10CF48(a1);
    if (!v5)
      break;
LABEL_14:
    a1 = *(_QWORD *)(*(_QWORD *)(v5 + 32) & 0xFFFFFFFFFFFFFFF0);
  }
  v7 = sub_22F10C2A4(a1);
  if (!v7)
    return 0;
  v9 = v7;
  v10 = *(_DWORD *)(v7 + 28);
  if ((v10 & 0x7Fu) - 35 > 2)
    return 0;
  if ((v10 & 0x7E) == 0x24)
    return 1;
  if (*(_QWORD *)(v7 + 128))
  {
    v12 = 0;
  }
  else
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v7 + 104) + 96), *(_QWORD *)(v7 + 104));
    v12 = *(_QWORD *)(v9 + 128) == 0;
  }
  if (((i | v12) & 1) != 0)
    return 0;
  v13 = sub_22E46A3A0(v9);
  if (v13 == v14)
  {
LABEL_31:
    v18 = sub_22EFC3B90(v9);
    if (v18)
    {
      v19 = v18;
      v8 = 1;
      if ((sub_22EF6CFF0(*(_QWORD *)(*(_QWORD *)(v18 + 48) & 0xFFFFFFFFFFFFFFF0), 1) & 1) == 0)
      {
        do
        {
          v19 = *(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8;
          v8 = v19 != 0;
        }
        while (v19
             && ((*(_DWORD *)(v19 + 28) & 0x7Fu) - 49 > 2
              || !sub_22EF6CFF0(*(_QWORD *)(*(_QWORD *)(v19 + 48) & 0xFFFFFFFFFFFFFFF0), 1)));
      }
      return v8;
    }
    return 0;
  }
  v15 = v13;
  v16 = v14;
  v8 = 1;
  while (1)
  {
    v17 = *(_QWORD *)(**(_QWORD **)(v15 + 16) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v17 + 8) & 0xF) != 0)
      v17 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v15 + 16));
    if ((sub_22EF6CFF0(*(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0), 1) & 1) != 0)
      return v8;
    v15 += 24;
    if (v15 == v16)
      goto LABEL_31;
  }
}

void sub_22EF6D204(uint64_t a1, unint64_t a2, std::string *a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD **v36;
  _QWORD **v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  std::string::size_type v47;
  std::string::size_type v48;
  std::string::size_type v49;
  const std::string::value_type *p_p;
  std::string::size_type v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  BOOL v65;
  _QWORD *v66;
  unint64_t v67;
  BOOL v68;
  _QWORD *v69;
  unint64_t v70;
  const std::string::value_type *v71;
  std::string::size_type v72;
  _QWORD *v73;
  _QWORD **v74;
  BOOL v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  void *__p;
  std::string::size_type v81;
  char v82;
  _QWORD *v83;
  _QWORD *v84[2];

  if (!sub_22EFC3500(a2) || (*(_BYTE *)(sub_22EFC3500(a2) + 28) & 0x80) != 0)
    return;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 35 >= 3)
    v12 = 0;
  else
    v12 = a2;
  v84[0] = 0;
  v84[1] = 0;
  v83 = v84;
  v76 = a2;
  v77 = v12;
  v78 = sub_22F0C975C(a1, a2);
  if (v12)
  {
    v13 = sub_22E46A3A0(v12);
    if (v13 != v14)
    {
      v55 = v13;
      v56 = v14;
      do
      {
        if ((*(_BYTE *)(v55 + 12) & 1) == 0)
        {
          v57 = *(_QWORD *)(**(_QWORD **)(v55 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v57 + 8) & 0xF) != 0)
            v57 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v55 + 16));
          v58 = sub_22F10C2A4(*(_QWORD *)(v57 & 0xFFFFFFFFFFFFFFF0));
          if (v58)
          {
            if ((*(_DWORD *)(v58 + 28) & 0x7Fu) - 35 >= 3)
              v59 = 0;
            else
              v59 = v58;
          }
          else
          {
            v59 = 0;
          }
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v59 + 104) + 96), *(_QWORD *)(v59 + 104));
          if ((**(_QWORD **)(v59 + 128) & 0x200) == 0)
          {
            v60 = sub_22E46A3EC(v78, v59);
            v61 = sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v60;
            v62 = v84[0];
            v63 = v84;
            if (v84[0])
            {
              v63 = v84;
              do
              {
                v64 = v62[4];
                v65 = v61 >= v64;
                if (v61 >= v64)
                  v66 = v62 + 1;
                else
                  v66 = v62;
                if (!v65)
                  v63 = v62;
                v62 = (_QWORD *)*v66;
              }
              while (*v66);
            }
            sub_22F371FB0(&v83, v63, v61, v59);
          }
        }
        v55 += 24;
      }
      while (v55 != v56);
    }
  }
  v15 = sub_22EFC3B90(a2);
  if (v15)
  {
    v16 = v15;
    v17 = 0;
LABEL_11:
    if (sub_22EFC2F84(v16, a1) || (sub_22EFC2FDC(v16, a1) & 1) == 0)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v78 + 48) + 8 * v17);
      v19 = v84[0];
      v20 = v84;
      if (v84[0])
      {
        v20 = v84;
        do
        {
          v21 = v19[4];
          v22 = v18 >= v21;
          if (v18 >= v21)
            v23 = v19 + 1;
          else
            v23 = v19;
          if (!v22)
            v20 = v19;
          v19 = (_QWORD *)*v23;
        }
        while (*v23);
      }
      sub_22F371FB0(&v83, v20, v18, v16);
      ++v17;
    }
    while (1)
    {
      v16 = *(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v16)
        break;
      if ((*(_DWORD *)(v16 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_11;
    }
  }
  if (v77 && (a5 & 1) != 0)
  {
    v24 = v77;
    v25 = sub_22E483108(v77);
    if (v25 == v26)
      goto LABEL_51;
    v27 = v25;
    v28 = v26;
    do
    {
      v29 = *(_QWORD *)(**(_QWORD **)(v27 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v29 + 8) & 0xF) != 0)
        v29 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v27 + 16));
      v30 = sub_22F10C2A4(*(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0));
      if (v30)
      {
        if ((*(_DWORD *)(v30 + 28) & 0x7Fu) - 35 >= 3)
          v31 = 0;
        else
          v31 = v30;
      }
      else
      {
        v31 = 0;
      }
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v31 + 104) + 96), *(_QWORD *)(v31 + 104));
      if ((**(_QWORD **)(v31 + 128) & 0x200) == 0)
      {
        v32 = sub_22F2500F4(v78, v31);
        v33 = sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v32;
        v34 = **(_QWORD **)(v78 + 72);
        if (v33 >= sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v34)
        {
          v35 = v84[0];
          if (!v84[0])
            goto LABEL_49;
          v36 = v84;
          do
          {
            v37 = v36;
            v38 = v35;
            v39 = v35[4];
            v40 = v35 + 1;
            if (v39 >= v33)
            {
              v40 = v38;
              v36 = (_QWORD **)v38;
            }
            v35 = (_QWORD *)*v40;
          }
          while (v35);
          if (v36 == v84)
            goto LABEL_49;
          if (v39 >= v33)
            v37 = (_QWORD **)v38;
          if (v33 < (unint64_t)v37[4])
LABEL_49:
            sub_22F371FB0(&v83, v84, v33, v31);
        }
      }
      v27 += 24;
    }
    while (v27 != v28);
  }
  v24 = v77;
  if (!v77)
  {
    v42 = *(_QWORD *)v78;
    v43 = v83;
    goto LABEL_72;
  }
LABEL_51:
  v41 = *(uint64_t **)(v78 + 72);
  if (a5)
    v41 = (uint64_t *)v78;
  v42 = *v41;
  v43 = v83;
  if (sub_22E463414(v24))
  {
    v44 = v24;
    if (v43 == v84 || v43[4])
    {
      v45 = v76;
      if (a4)
      {
        std::string::append(a3, "\"_vptr$");
        sub_22EFC683C((uint64_t *)(v44 + 40), &__p);
        v46 = v82;
        v47 = v81;
        v48 = v82 & 0x7F;
        if (v82 >= 0)
          v49 = v82 & 0x7F;
        else
          v49 = v81;
        if (!v49)
        {
          MEMORY[0x2348A0C14](&__p, "?");
          v46 = v82;
          v47 = v81;
          v48 = v82 & 0x7F;
        }
        if (v46 >= 0)
          p_p = (const std::string::value_type *)&__p;
        else
          p_p = (const std::string::value_type *)__p;
        if (v46 >= 0)
          v51 = v48;
        else
          v51 = v47;
        std::string::append(a3, p_p, v51);
        std::string::push_back(a3, 34);
        if (v82 < 0)
          operator delete(__p);
      }
      std::string::append(a3, "^^?");
      goto LABEL_73;
    }
  }
LABEL_72:
  v45 = v76;
LABEL_73:
  if ((*(_BYTE *)(v45 + 74) & 0x80) == 0)
  {
    v52 = sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v42;
    v53 = v84[0];
    if (v84[0])
    {
      v54 = v84;
      do
      {
        v67 = v53[4];
        v68 = v52 >= v67;
        if (v52 >= v67)
          v69 = v53 + 1;
        else
          v69 = v53;
        if (!v68)
          v54 = v53;
        v53 = (_QWORD *)*v69;
      }
      while (*v69);
    }
    else
    {
      v54 = v84;
    }
    sub_22F372040(&v83, v54, v52);
  }
  if (v43 != v84)
  {
    do
    {
      v70 = v43[5];
      if (!v70)
        break;
      if ((*(_DWORD *)(v70 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
      {
        sub_22EF6D204(a1, v43[5], a3, a4, 0, a6);
      }
      else
      {
        if (a4)
        {
          std::string::push_back(a3, 34);
          sub_22EFC683C((uint64_t *)(v70 + 40), &__p);
          if (v82 >= 0)
            v71 = (const std::string::value_type *)&__p;
          else
            v71 = (const std::string::value_type *)__p;
          if (v82 >= 0)
            v72 = v82 & 0x7F;
          else
            v72 = v81;
          std::string::append(a3, v71, v72);
          if (v82 < 0)
            operator delete(__p);
          std::string::push_back(a3, 34);
        }
        if ((*(_BYTE *)(v70 + 68) & 1) != 0)
        {
          sub_22EF6CB24(a1, a3, *(_QWORD *)(v70 + 48), v70);
        }
        else
        {
          __p = *(void **)(v70 + 48);
          sub_22EF6CA64(a1, (uint64_t *)&__p);
          v79 = 18;
          sub_22EF6B358(a1, __p, a3, &v79, a4, a6);
        }
      }
      v73 = (_QWORD *)v43[1];
      if (v73)
      {
        do
        {
          v74 = (_QWORD **)v73;
          v73 = (_QWORD *)*v73;
        }
        while (v73);
      }
      else
      {
        do
        {
          v74 = (_QWORD **)v43[2];
          v75 = *v74 == v43;
          v43 = v74;
        }
        while (!v75);
      }
      v43 = v74;
    }
    while (v74 != v84);
  }
  sub_22F258024(v84[0]);
}

uint64_t sub_22EF6D84C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 1264);
  if (!v1)
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 15088) + 288))(*(_QWORD *)(a1 + 15088)))
      __asm { BR              X10 }
    v5 = sub_22EF5B848(a1, *(_QWORD *)(a1 + 16408), 0);
    v1 = sub_22EF59578(a1, v5, "__builtin_va_list", 0x11uLL);
    *(_QWORD *)(a1 + 1264) = v1;
  }
  return v1;
}

void sub_22EF6D92C()
{
  JUMPOUT(0x22EF6D8DCLL);
}

#error "22EF6DAB4: call analysis failed (funcsize=111)"

#error "22EF6DFCC: call analysis failed (funcsize=73)"

#error "22EF6E108: call analysis failed (funcsize=121)"

uint64_t sub_22EF6E22C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 18584);
  if (!result)
  {
    sub_22EF6D84C(a1);
    return *(_QWORD *)(a1 + 18584);
  }
  return result;
}

unint64_t sub_22EF6E25C(uint64_t a1, char *a2, char *a3)
{
  char *v4;
  _DWORD *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v9;

  v4 = a2;
  v5 = (_DWORD *)sub_22E3CD3D4(a1 + 2032, ((a3 - a2) & 0x7FFFFFFF8) + 8, 3);
  *v5 = ((unint64_t)(a3 - v4) >> 1) & 0xFFFFFFFC;
  if (a3 != v4)
  {
    v6 = (unint64_t *)(v5 + 2);
    do
    {
      v7 = *(_QWORD *)v4;
      v4 += 8;
      *v6++ = v7 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v4 != a3);
  }
  sub_22F401FD4(&v9, (uint64_t)v5);
  return v9;
}

unint64_t sub_22EF6E2D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t NodeOrInsertPos;
  uint64_t v7;
  void *v9[2];
  _QWORD v10[17];

  v10[16] = *MEMORY[0x24BDAC8D0];
  v9[0] = v10;
  v9[1] = (void *)0x2000000000;
  sub_22F0F0708((uint64_t)v9, a2, a3);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v7 = NodeOrInsertPos - 8;
  }
  else
  {
    v7 = sub_22E3CD3D4(a1 + 2032, 32, 3);
    *(_DWORD *)v7 = 2;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = a2;
    *(_QWORD *)(v7 + 24) = a3;
    llvm::FoldingSetBase::InsertNode();
  }
  if (v9[0] != v10)
    free(v9[0]);
  return v7 & 0xFFFFFFFFFFFFFFF9 | 2;
}

uint64_t sub_22EF6E3E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 2000);
  if ((*(_BYTE *)(v2 + 246) & 6) == 0)
    return 0;
  do
  {
    v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v4 & 8) != 0)
    {
      result = (*(_DWORD *)((v4 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 4) & 3;
      if ((_DWORD)result)
        break;
    }
    v5 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v6 != 39)
    {
      result = 2;
      if (v6 == 10 || v6 == 32)
        return result;
      return 0;
    }
    if (*(_BYTE *)(v5 + 16) != 39)
    {
      v5 = sub_22F10CF48(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
      v2 = *(_QWORD *)(a1 + 2000);
    }
    result = 0;
    a2 = *(_QWORD *)(v5 + 32);
  }
  while ((*(_BYTE *)(v2 + 246) & 6) != 0);
  return result;
}

uint64_t sub_22EF6E49C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v13;

  v3 = a2 & 0xFFFFFFFFFFFFFFF0;
  v4 = a3 & 0xFFFFFFFFFFFFFFF0;
  if (*(_QWORD *)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
    return 1;
  v5 = *(_QWORD *)v3;
  v6 = *(unsigned __int8 *)(*(_QWORD *)v3 + 16) - 57;
  if (v5)
    v7 = v6 > 0xFFFFFFFD;
  else
    v7 = 0;
  if (!v7)
    v5 = sub_22F10CF48(v5);
  v8 = *(_QWORD *)v4;
  if (*(_QWORD *)v4)
    v9 = *(unsigned __int8 *)(*(_QWORD *)v4 + 16) - 57 > 0xFFFFFFFD;
  else
    v9 = 0;
  if (!v9)
    v8 = sub_22F10CF48(v8);
  if (*(_DWORD *)(v5 + 20) == *(_DWORD *)(v8 + 20)
    && (*(_QWORD *)((*(_QWORD *)(v5 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(v5 + 32) & 7) == (*(_QWORD *)((*(_QWORD *)(v8 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(v8 + 32) & 7)
    && ((v10 = (*(_DWORD *)(v5 + 16) >> 19) & 0xF, v10 <= 4)
      ? (v11 = ((1 << ((*(_DWORD *)(v5 + 16) >> 19) & 0xF)) & 0x1A) == 0)
      : (v11 = 1),
        v11
     && ((v13 = (*(_DWORD *)(v8 + 16) >> 19) & 0xF, v13 > 4) || ((1 << v13) & 0x1A) == 0)
     && v10 - 7 >= 2
     && v13 - 7 > 1))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22EF6E5C8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(_BYTE *)(v4 + 16) == 11;
  else
    v5 = 0;
  if (!v5)
    return 0;
  v7 = *a1;
  v8 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  result = sub_22E3E4B64(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
  if (result)
  {
    v9 = result;
    v10 = (*(_DWORD *)(result + 16) >> 19) & 0xF;
    if (v10)
    {
      if (v10 != 7)
      {
        if (v10 == 8)
          return (*(_DWORD *)(v4 + 16) & 0xFF80000) == 50331648;
        return 0;
      }
      v14 = *(_QWORD *)(result + 32) & 7 | *(_QWORD *)((*(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
      return v14 == sub_22F1113D8(*v3, v7);
    }
    else
    {
      v12 = sub_22EF5CDF0(v7, *v8);
      if (v12 != sub_22EF76B84(v7, *(_DWORD *)(v4 + 16)))
        return 0;
      v13 = *(_QWORD *)(v9 + 32);
      sub_22F36AD2C(v7, v4);
      return (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 8) | v13 & 7) == (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF0) + 8) | v15 & 7);
    }
  }
  return result;
}

uint64_t sub_22EF6E6F8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  uint64_t v25;

  v3 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(_BYTE *)(v4 + 16) == 11;
  else
    v5 = 0;
  if (!v5)
    return 0;
  v7 = *a1;
  v8 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  result = sub_22E3E4B64(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
  if (result)
  {
    v9 = result;
    v10 = *(_DWORD *)(result + 16);
    v11 = (v10 >> 19) & 0xF;
    if (v11 != 7 && v11 != 0)
      return 0;
    v13 = v10 & 0x780000;
    if (v13 == 3670016 && (*(_DWORD *)(v4 + 16) & 0xFF80000) == 50331648)
      return 0;
    v15 = *(_QWORD *)(*(_QWORD *)(v7 + 2000) + 232);
    if (!v13)
    {
      v16 = sub_22EF5CDF0(v7, *v8);
      if (v16 != sub_22EF76B84(v7, *(_DWORD *)(v4 + 16)))
        return 0;
    }
    v17 = (v15 >> 59) & 3;
    if ((_DWORD)v17 == 2)
      return 1;
    if ((_DWORD)v17 != 1)
      return 0;
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v9 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                + 8) & 0xFFFFFFFFFFFFFFF0);
    v19 = *(_DWORD *)(v18 + 16);
    if (v18)
      v20 = v19 == 11;
    else
      v20 = 0;
    if (v20)
    {
      if (((*(_DWORD *)(v18 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
        return 0;
    }
    else if (v18 && v19 == 44)
    {
      v21 = sub_22F114198(*(_QWORD *)(v18 + 24));
      if ((*(_BYTE *)(v21 + 74) & 1) == 0 && *(_QWORD *)(v21 + 128) <= 7uLL
        || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v18 + 24)) + 76) & 0x80) != 0)
      {
        return 0;
      }
    }
    else if (v19 != 9)
    {
      return 0;
    }
    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22F1113D8(*v3, v7) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v23 = *(_DWORD *)(v22 + 16);
    if (v22)
      v24 = v23 == 11;
    else
      v24 = 0;
    if (v24)
      return ((*(_DWORD *)(v22 + 16) >> 19) & 0x1FEu) - 166 < 0x14;
    if (!v22 || v23 != 44)
      return v23 == 9;
    v25 = sub_22F114198(*(_QWORD *)(v22 + 24));
    if ((*(_BYTE *)(v25 + 74) & 1) != 0 || *(_QWORD *)(v25 + 128) >= 8uLL)
      return (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v22 + 24)) + 76) & 0x80) == 0;
    return 0;
  }
  return result;
}

unint64_t sub_22EF6E900(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  char *v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  int v65;
  _BYTE v66[64];

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 2000) + 238) & 8) != 0)
  {
    if ((sub_22F10DFD8(a2) & 1) != 0
      || sub_22E5761BC(a2)
      || sub_22E509ED0(a2)
      || (sub_22F10DFD8(a3) & 1) != 0
      || sub_22E5761BC(a3)
      || sub_22E509ED0(a3))
    {
      return 1;
    }
  }
  else
  {
    if (sub_22E5761BC(a2) || sub_22E5761BC(a3))
      return 1;
    if (sub_22E509ED0(a2) || sub_22E509F54(a2) || sub_22E509ED0(a3) || sub_22E509F54(a3))
      return 0;
  }
  if (!sub_22E491464(a2))
  {
    result = sub_22F40A120(a2);
    if (!result)
      return result;
    v17 = sub_22F3174CC(a2);
    if ((uint64_t *)v17 != v18)
    {
      v19 = (uint64_t *)v17;
      v20 = v18;
      do
      {
        v21 = *v19;
        v22 = sub_22F3174CC(a3);
        if ((uint64_t *)v22 == v23)
          return 0;
        v24 = (uint64_t *)v22;
        v25 = v23;
        while (1)
        {
          v26 = *v24;
          if ((sub_22EF674A4(a1, v21, *v24) & 1) != 0 || a4 && (sub_22EF674A4(a1, v26, v21) & 1) != 0)
            break;
          result = 0;
          if (++v24 == v25)
            return result;
        }
        ++v19;
      }
      while (v19 != v20);
    }
    v27 = sub_22F31179C(a2);
    if (!v27)
    {
LABEL_97:
      v51 = 0;
      return v51 == 0;
    }
    v62 = (uint64_t *)v66;
    v63 = (uint64_t *)v66;
    v64 = 8;
    v65 = 0;
    sub_22EF5D228(a1, v27, (uint64_t)&v62);
    LODWORD(v28) = HIDWORD(v64);
    if (HIDWORD(v64) == v65)
    {
      v29 = *(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v29)
        v30 = *(unsigned __int8 *)(v29 + 16) - 35 > 0xFFFFFFFD;
      else
        v30 = 0;
      if (!v30)
        v29 = sub_22F10CF48(v29);
      if ((*(_BYTE *)(v29 + 19) & 0xFC) == 0)
        goto LABEL_93;
      LODWORD(v28) = HIDWORD(v64);
    }
    if (v63 == v62)
      v28 = v28;
    else
      v28 = v64;
    if ((_DWORD)v28)
    {
      v31 = 8 * v28;
      v32 = v63;
      while ((unint64_t)*v32 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v32;
        v31 -= 8;
        if (!v31)
          goto LABEL_80;
      }
    }
    else
    {
      v32 = v63;
    }
    v50 = (char *)&v63[v28];
    if (v32 == (uint64_t *)v50)
      goto LABEL_80;
    v53 = *v32;
    v54 = sub_22F3174CC(a3);
    if ((uint64_t *)v54 != v55)
    {
      v56 = (uint64_t *)v54;
      v57 = v55;
LABEL_83:
      while (1)
      {
        v58 = *v56;
        if (sub_22EF674A4(a1, v53, *v56) || a4 && (sub_22EF674A4(a1, v58, v53) & 1) != 0)
          break;
        v52 = 0;
        ++v56;
        v51 = 1;
        if (v56 == v57)
          goto LABEL_94;
      }
      v59 = (unint64_t *)(v32 + 1);
      while (v59 != (unint64_t *)v50)
      {
        v60 = *v59++;
        v53 = v60;
        if (v60 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v56 = (uint64_t *)sub_22F3174CC(a3);
          v57 = v61;
          v52 = 0;
          v32 = (uint64_t *)(v59 - 1);
          v51 = 1;
          if (v56 != v61)
            goto LABEL_83;
          goto LABEL_94;
        }
      }
LABEL_80:
      v51 = 0;
      v52 = 1;
      goto LABEL_94;
    }
LABEL_93:
    v52 = 0;
    v51 = 1;
LABEL_94:
    if (v63 != v62)
      free(v63);
    if (!v52)
      return v51 == 0;
    goto LABEL_97;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFF0);
  if (!v9 || *(unsigned __int8 *)(v9 + 16) - 35 <= 0xFFFFFFFD)
    v9 = sub_22F10CF48(v9);
  if ((*(_BYTE *)(v9 + 19) & 0xFC) == 0)
  {
    v10 = sub_22F31179C(a3);
    if (v10)
    {
      v11 = v10;
      v12 = sub_22F3174CC(a2);
      if (v12 != v13)
      {
        v14 = v13;
        v15 = v12 + 8;
        do
        {
          result = sub_22EFDDC98(v11, *(_QWORD *)(v15 - 8), 1, 0);
          if ((_DWORD)result)
            v16 = v15 == v14;
          else
            v16 = 1;
          v15 += 8;
        }
        while (!v16);
        return result;
      }
    }
    return 1;
  }
  v33 = sub_22F3174CC(a2);
  if ((uint64_t *)v33 == v34)
    return 1;
  v35 = (uint64_t *)v33;
  v36 = v34;
  do
  {
    v37 = *v35;
    v38 = sub_22F3174CC(a3);
    if ((uint64_t *)v38 == v39)
    {
LABEL_67:
      v43 = 1;
    }
    else
    {
      v40 = (uint64_t *)v38;
      v41 = v39;
      while (1)
      {
        v42 = *v40;
        if ((sub_22EF674A4(a1, v37, *v40) & 1) != 0 || a4 && (sub_22EF674A4(a1, v42, v37) & 1) != 0)
          break;
        if (++v40 == v41)
          goto LABEL_67;
      }
      v43 = 0;
    }
    v44 = sub_22F31179C(a3);
    if (!v44 || (v45 = v44, v46 = sub_22F3174CC(a2), (uint64_t *)v46 == v47))
    {
LABEL_70:
      if ((v43 & 1) != 0)
        return 0;
    }
    else
    {
      v48 = (uint64_t *)v46;
      v49 = v47;
      while ((sub_22EFDDC98(v45, *v48, 1, 0) & 1) == 0)
      {
        if (++v48 == v49)
          goto LABEL_70;
      }
    }
    ++v35;
    result = 1;
  }
  while (v35 != v36);
  return result;
}

uint64_t sub_22EF6ED94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v28;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  BOOL v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;

  while (1)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
      v7 = *(unsigned __int8 *)(v6 + 16) - 35 > 0xFFFFFFFD;
    else
      v7 = 0;
    if (!v7)
      v6 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0));
    v8 = *(_QWORD *)(*(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFF0);
    if (v8)
      v9 = *(unsigned __int8 *)(v8 + 16) - 35 > 0xFFFFFFFD;
    else
      v9 = 0;
    if (!v9)
      v8 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFF0));
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 2000) + 232);
    v11 = *(_QWORD *)(v6 + 16) & 0xFC000000;
    if ((v10 & 0x8000000000000) != 0)
    {
      if (!v11)
      {
        v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v18 = v17 && *(_DWORD *)(v17 + 16) == 11;
        if (v18 && ((*(_DWORD *)(v17 + 16) >> 19) & 0x1FFu) - 219 < 2)
          return 1;
      }
      v14 = *(_QWORD *)(v8 + 16);
      if ((v14 & 0xFC000000) == 0)
      {
        v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v20 = v19 && *(_DWORD *)(v19 + 16) == 11;
        if (v20 && ((*(_DWORD *)(v19 + 16) >> 19) & 0x1FFu) - 219 < 2)
          return 1;
      }
    }
    else
    {
      if (!v11)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v12 && (*(_DWORD *)(v12 + 16) & 0xFF800FF) == 114819083)
          return 1;
      }
      v14 = *(_QWORD *)(v8 + 16);
      if ((v14 & 0xFC000000) == 0)
      {
        v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v15 && (*(_DWORD *)(v15 + 16) & 0xFF800FF) == 114819083)
          return 1;
      }
    }
    if (!v11
      || ((v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
        ? (v22 = (*(_DWORD *)(v21 + 16) & 0xFF800FF) == 114819083)
        : (v22 = 0),
          !v22))
    {
      v23 = v14 & 0xFC000000;
      if (!v23)
        break;
      v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (!v24 || (*(_DWORD *)(v24 + 16) & 0xFF800FF) != 114819083)
        break;
    }
    if ((sub_22EF6E900(a1, a2, a3, 0) & 1) != 0)
      return 1;
    result = sub_22F409D44(v8);
    if (!(_DWORD)result)
      return result;
LABEL_76:
    v35 = sub_22F409DEC(a3, a1);
    a3 = sub_22F409DEC(a2, a1);
    a2 = v35;
  }
  if (v11 && v23)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v26 && (*(_DWORD *)(v26 + 16) & 0xFF800FF) == 115343371)
    {
      v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v28 && (*(_DWORD *)(v28 + 16) & 0xFF800FF) == 115343371)
      {
        v36 = sub_22F3174CC(a2);
        v44 = v37;
        if ((uint64_t *)v36 == v37)
          return 1;
        v38 = (uint64_t *)v36;
        while (1)
        {
          v39 = *v38;
          v40 = sub_22F3174CC(a3);
          if ((uint64_t *)v40 == v41)
            goto LABEL_72;
          v42 = (uint64_t *)v40;
          v43 = v41;
          while (!sub_22EF674A4(a1, v39, *v42))
          {
            if (++v42 == v43)
              goto LABEL_72;
          }
          ++v38;
          result = 1;
          if (v38 == v44)
            return result;
        }
      }
    }
  }
  if ((v10 & 0x8000000000000) != 0
    || ((v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
      ? (v31 = (*(_DWORD *)(v30 + 16) & 0xFF800FF) == 115343371)
      : (v31 = 0),
        !v31
     || ((v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
       ? (v33 = (*(_DWORD *)(v32 + 16) & 0xFF800FF) == 115343371)
       : (v33 = 0),
         !v33)))
  {
    result = sub_22F272660(v6);
    if (!result)
      return result;
    result = sub_22F272660(v8);
    if (!result)
      return result;
    if ((sub_22EF6F180(a1, v6, v8) & 1) == 0)
    {
LABEL_72:
      if ((sub_22F409D44(v8) & 1) == 0)
        return 0;
      goto LABEL_76;
    }
  }
  return 1;
}

uint64_t sub_22EF6F180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  _BYTE v42[64];

  v6 = sub_22F272660(a2);
  v7 = sub_22F272660(a3);
  result = sub_22E595B08(v6, v7);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a2 + 19) & 0xFC) == 0)
      goto LABEL_54;
    v38 = (uint64_t *)v42;
    v39 = (uint64_t *)v42;
    v40 = 8;
    v41 = 0;
    v9 = sub_22F272660(a3);
    sub_22EF5D228(a1, v9, (uint64_t)&v38);
    v10 = *(_QWORD *)(a3 + 16);
    if (v10 >> 26)
    {
      v11 = (unint64_t *)(a3 + 8 * ((v10 >> 19) & 0x7F) + 48);
      v12 = 8 * (v10 >> 26);
      do
      {
        v13 = *v11++;
        sub_22EF5D228(a1, v13, (uint64_t)&v38);
        v12 -= 8;
      }
      while (v12);
    }
    if (HIDWORD(v40) == v41)
    {
LABEL_10:
      v14 = 0;
    }
    else
    {
      v25 = *(_QWORD *)(a2 + 16);
      if (v25 >> 26)
      {
        v26 = (uint64_t *)(a2 + 8 * ((v25 >> 19) & 0x7F) + 48);
        v27 = &v26[v25 >> 26];
        do
        {
          v28 = *v26;
          v29 = v39 == v38 ? (uint64_t *)((char *)&v40 + 4) : &v40;
          v30 = *(unsigned int *)v29;
          if ((_DWORD)v30)
          {
            v31 = 8 * v30;
            v32 = v39;
            while ((unint64_t)*v32 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v32;
              v31 -= 8;
              if (!v31)
                goto LABEL_10;
            }
          }
          else
          {
            v32 = v39;
          }
          v33 = (char *)&v39[v30];
          v14 = v32 != (uint64_t *)v33;
          if (v32 == (uint64_t *)v33)
            break;
          v37 = v27;
          v34 = *v32;
LABEL_38:
          v35 = *(_QWORD *)(v28 + 40);
          if ((v35 & 7) != 0)
            v36 = 0;
          else
            v36 = v35 & 0xFFFFFFFFFFFFFFF8;
          if (!sub_22F3B4C44(v34, v36))
          {
            while (1)
            {
              if (++v32 == (uint64_t *)v33)
                goto LABEL_10;
              v34 = *v32;
              if ((unint64_t)*v32 < 0xFFFFFFFFFFFFFFFELL)
                goto LABEL_38;
            }
          }
          ++v26;
          v27 = v37;
        }
        while (v26 != v37);
      }
      else
      {
        v14 = 1;
      }
    }
    if (v39 != v38)
      free(v39);
    if (v14)
    {
LABEL_54:
      if (!sub_22F409CF8(a2))
        return 1;
      while (1)
      {
        v18 = sub_22F272660(a3);
        if (v6)
        {
          if (v18)
          {
            if (v18 == v6)
              break;
            v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
            if (v15 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6))
              break;
          }
        }
        v16 = *(_QWORD *)(a3 + 32);
        if ((v16 & 4) == 0)
        {
          sub_22F409FE8(a3);
          v16 = *(_QWORD *)(a3 + 32);
        }
        a3 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0);
        if (a3)
          v17 = *(unsigned __int8 *)(a3 + 16) - 35 > 0xFFFFFFFD;
        else
          v17 = 0;
        if (!v17)
          a3 = sub_22F10CF48(a3);
      }
      if (!sub_22F409CF8(a3))
        return 1;
      v19 = (uint64_t *)sub_22F272660(a2);
      v20 = (uint64_t *)sub_22F10E414(a2);
      v22 = v21;
      v23 = (uint64_t *)sub_22F10E414(a3);
      result = sub_22EF6FA74(a1, v19, v20, v22, v23, v24);
      if ((_DWORD)result)
        return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_22EF6F444(unsigned __int8 **a1, char a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((a2 & 1) != 0)
    return 1;
  v4 = (uint64_t)a1[3];
  v5 = 1;
  if (!**a1)
    v5 = 2;
  result = sub_22F36CE1C(*(_QWORD *)a1[v5]);
  if ((_DWORD)result)
  {
    v6 = sub_22F409DEC(*(_QWORD *)a1[1], v4);
    v7 = sub_22F409DEC(*(_QWORD *)a1[2], v4);
    return sub_22F36EA60(v4, v6, v7, **a1);
  }
  return result;
}

unint64_t sub_22EF6F4E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t i;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  BOOL v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  _BOOL4 v53;
  _BOOL4 v54;
  char v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  _BYTE v73[64];
  uint64_t v74;
  llvm *v75;
  unsigned int v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0);
  if (v6)
    v7 = *(unsigned __int8 *)(v6 + 16) - 35 > 0xFFFFFFFD;
  else
    v7 = 0;
  if (!v7)
    v6 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFF0);
  if (v8)
    v9 = *(unsigned __int8 *)(v8 + 16) - 35 > 0xFFFFFFFD;
  else
    v9 = 0;
  if (!v9)
    v8 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_22F272660(v6);
  v11 = sub_22F272660(v8);
  if (v10)
    v12 = v11 == 0;
  else
    v12 = 1;
  if (v12)
    return 0;
  v15 = v11;
  v16 = sub_22F409D44(v6);
  if ((v16 & 1) != 0)
    v17 = 1;
  else
    v17 = sub_22F409D44(v8);
  v74 = 1;
  for (i = 8; i != 72; i += 16)
    *(uint64_t *)((char *)&v74 + i) = -4096;
  while (1)
  {
    v21 = sub_22F272660(v6);
    v71 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
    sub_22F2A150C(&v74, (uint64_t *)&v71)[1] = v6;
    v22 = sub_22F272660(v6);
    if (v22)
    {
      if (v22 == v15
        || (v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22),
            v23 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15)))
      {
        v35 = (uint64_t *)(v6 + 48);
        v36 = (*(_QWORD *)(v6 + 16) >> 19) & 0x7FLL;
        if (sub_22F409CF8(v6) && sub_22F409CF8(v8))
        {
          v37 = (uint64_t *)sub_22F272660(v6);
          v38 = (uint64_t *)sub_22F10E414(v6);
          v40 = v39;
          v41 = (uint64_t *)sub_22F10E414(v8);
          if ((sub_22EF6FA74(a1, v37, v38, v40, v41, v42) & 1) == 0)
          {
LABEL_56:
            v13 = 0;
            goto LABEL_57;
          }
          v43 = 0;
          v35 = (uint64_t *)(v6 + 48);
        }
        else
        {
          v53 = sub_22F409CF8(v6);
          if (v53 == sub_22F409CF8(v8))
          {
            v43 = 0;
          }
          else
          {
            v35 = 0;
            v36 = 0;
            v43 = 1;
          }
        }
        v71 = v73;
        v72 = 0x800000000;
        v56 = sub_22F272660(v6);
        sub_22EF6FBC4(a1, v56, *(_QWORD *)(a2 + 32), a3, (uint64_t)&v71);
        if ((v43 & 1) != 0 || (_DWORD)v72 || v17 != sub_22F409D44(v6))
        {
          v57 = (uint64_t *)sub_22F272660(v6);
          v58 = sub_22F36D148(a1, v57, 0);
          v59 = (uint64_t *)v71;
          v60 = v72;
          if ((v17 & 1) != 0)
            v61 = 1;
          else
            v61 = sub_22F409D44(v6);
          v68 = sub_22EF667E8(a1, v58, v35, v36, v59, v60, v61);
        }
        else
        {
          v68 = v6 & 0xFFFFFFFFFFFFFFF0;
        }
        v13 = sub_22F36CC4C(a1, v68);
        v70 = v71;
        if (v71 != v73)
          goto LABEL_84;
        goto LABEL_57;
      }
    }
    v24 = *(_QWORD *)(v6 + 32);
    if ((v24 & 4) == 0)
    {
      sub_22F409FE8(v6);
      v24 = *(_QWORD *)(v6 + 32);
    }
    v25 = v24 & 0xFFFFFFFFFFFFFFF0;
    if (!v25)
      break;
    v6 = *(_QWORD *)v25;
    v19 = *(unsigned __int8 *)(*(_QWORD *)v25 + 16) - 35;
    if (v6)
      v20 = v19 > 0xFFFFFFFD;
    else
      v20 = 0;
    if (!v20)
      v6 = sub_22F10CF48(v6);
  }
  while (1)
  {
    v26 = sub_22F272660(v8);
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
    v28 = sub_22F2E5664((uint64_t)&v74, v27);
    if ((v74 & 1) != 0)
      v29 = (char *)&v75;
    else
      v29 = (char *)v75;
    v30 = v76;
    if ((v74 & 1) != 0)
      v30 = 4;
    if (&v29[16 * v30] != (char *)v28)
      break;
    v31 = *(_QWORD *)(v8 + 32);
    if ((v31 & 4) == 0)
    {
      sub_22F409FE8(v8);
      v31 = *(_QWORD *)(v8 + 32);
    }
    v32 = v31 & 0xFFFFFFFFFFFFFFF0;
    if (!v32)
      goto LABEL_56;
    v8 = *(_QWORD *)v32;
    v33 = *(unsigned __int8 *)(*(_QWORD *)v32 + 16) - 35;
    if (v8)
      v34 = v33 > 0xFFFFFFFD;
    else
      v34 = 0;
    if (!v34)
      v8 = sub_22F10CF48(v8);
  }
  v44 = *(_QWORD *)(v28 + 8);
  v45 = (uint64_t *)(v8 + 48);
  v46 = (*(_QWORD *)(v8 + 16) >> 19) & 0x7FLL;
  if (sub_22F409CF8(v44) && sub_22F409CF8(v8))
  {
    v47 = (uint64_t *)sub_22F272660(v44);
    v48 = (uint64_t *)sub_22F10E414(v44);
    v50 = v49;
    v51 = (uint64_t *)sub_22F10E414(v8);
    if ((sub_22EF6FA74(a1, v47, v48, v50, v51, v52) & 1) == 0)
      goto LABEL_56;
LABEL_69:
    v55 = 0;
  }
  else
  {
    v54 = sub_22F409CF8(v44);
    if (v54 == sub_22F409CF8(v8))
      goto LABEL_69;
    v46 = 0;
    v45 = 0;
    v55 = 1;
  }
  v71 = v73;
  v72 = 0x800000000;
  v62 = sub_22F272660(v8);
  sub_22EF6FBC4(a1, v62, *(_QWORD *)(a2 + 32), a3, (uint64_t)&v71);
  if ((v55 & 1) != 0 || (_DWORD)v72 || v17 != sub_22F409D44(v8))
  {
    v63 = (uint64_t *)sub_22F272660(v8);
    v64 = sub_22F36D148(a1, v63, 0);
    v65 = (uint64_t *)v71;
    v66 = v72;
    if ((v17 & 1) != 0)
      v67 = 1;
    else
      v67 = sub_22F409D44(v8);
    v69 = sub_22EF667E8(a1, v64, v45, v46, v65, v66, v67);
  }
  else
  {
    v69 = v8 & 0xFFFFFFFFFFFFFFF0;
  }
  v13 = sub_22F36CC4C(a1, v69);
  v70 = v71;
  if (v71 != v73)
LABEL_84:
    free(v70);
LABEL_57:
  if ((v74 & 1) == 0)
    llvm::deallocate_buffer(v75, (void *)(16 * v76));
  return v13;
}

uint64_t sub_22EF6FA74(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unsigned int v10;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[9];

  if (a4 != a6)
    return 0;
  v22[7] = v6;
  v22[8] = v7;
  v10 = a4;
  v13 = sub_22F3B4828(a2);
  v14 = v10;
  if (!v10)
    return 1;
  v15 = v13 + 16;
  while (1)
  {
    v17 = *a3++;
    v16 = v17;
    if ((*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF0) + 8) | v17 & 7) == (*(_QWORD *)((*a5 & 0xFFFFFFFFFFFFFFF0) + 8) | *a5 & 7))
      goto LABEL_14;
    v18 = *(unsigned __int16 *)(*(_QWORD *)v15 + 88) >> 14;
    if (v18 == 2)
    {
      result = sub_22EF76BD0(a1, *a5, v16);
      if (!(_DWORD)result)
        return result;
      goto LABEL_14;
    }
    if (v18 != 1)
      break;
    if ((sub_22EF76BD0(a1, v16, *a5) & 1) == 0)
      return 0;
LABEL_14:
    v15 += 8;
    ++a5;
    result = 1;
    if (!--v14)
      return result;
  }
  if (v18)
    goto LABEL_14;
  v22[0] = a1;
  sub_22F10F8A0((uint64_t)v22, v16);
  v20 = v19;
  v22[0] = a1;
  sub_22F10F8A0((uint64_t)v22, *a5);
  if ((*(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 8) | v20 & 7) == (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFF0) + 8) | v21 & 7))
    goto LABEL_14;
  return 0;
}

void sub_22EF6FBC4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  void *v28;
  void **v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  void **v35;
  uint64_t v36;
  void **v37;
  uint64_t v38;
  void **v39;
  void *v40;
  void **v41;
  uint64_t *v42;
  uint64_t v43;
  void **v44;
  uint64_t *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  int v49;
  _BYTE v50[64];
  char *v51;
  char *v52;
  uint64_t v53;
  int v54;
  _BYTE v55[64];
  char *v56;
  char *v57;
  uint64_t v58;
  int v59;
  _BYTE v60[64];

  v9 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (v9)
    v10 = *(unsigned __int8 *)(v9 + 16) - 35 > 0xFFFFFFFD;
  else
    v10 = 0;
  if (!v10)
    v9 = sub_22F10CF48(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
  v11 = *(_QWORD *)(*(_QWORD *)(a4 + 32) & 0xFFFFFFFFFFFFFFF0);
  if (v11)
    v12 = *(unsigned __int8 *)(v11 + 16) - 35 > 0xFFFFFFFD;
  else
    v12 = 0;
  if (!v12)
    v11 = sub_22F10CF48(v11);
  v56 = v60;
  v57 = v60;
  v58 = 8;
  v59 = 0;
  v13 = *(_QWORD *)(v9 + 16);
  if (v13 >> 26)
  {
    v14 = (unint64_t *)(v9 + 8 * ((v13 >> 19) & 0x7F) + 48);
    v15 = 8 * (v13 >> 26);
    do
    {
      v16 = *v14++;
      sub_22EF5D228(a1, v16, (uint64_t)&v56);
      v15 -= 8;
    }
    while (v15);
  }
  v17 = sub_22F272660(v9);
  sub_22EF5D228(a1, v17, (uint64_t)&v56);
  v51 = v55;
  v52 = v55;
  v53 = 8;
  v54 = 0;
  v18 = *(_QWORD *)(v11 + 16);
  if (v18 >> 26)
  {
    v19 = (unint64_t *)(v11 + 8 * ((v18 >> 19) & 0x7F) + 48);
    v20 = 8 * (v18 >> 26);
    do
    {
      v21 = *v19++;
      sub_22EF5D228(a1, v21, (uint64_t)&v51);
      v20 -= 8;
    }
    while (v20);
  }
  v22 = sub_22F272660(v11);
  sub_22EF5D228(a1, v22, (uint64_t)&v51);
  if (v57 == v56)
    v23 = (uint64_t *)((char *)&v58 + 4);
  else
    v23 = &v58;
  v24 = *(unsigned int *)v23;
  if ((_DWORD)v24)
  {
    v25 = 8 * v24;
    v26 = v57;
    while (*(_QWORD *)v26 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v26 += 8;
      v25 -= 8;
      if (!v25)
        goto LABEL_39;
    }
  }
  else
  {
    v26 = v57;
  }
  v27 = &v57[8 * v24];
  if (v26 != v27)
  {
    v28 = *(void **)v26;
LABEL_28:
    v29 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v51, v28);
    if (v52 == v51)
      v30 = (uint64_t *)((char *)&v53 + 4);
    else
      v30 = &v53;
    if (v29 != (void **)&v52[8 * *(unsigned int *)v30])
    {
      v31 = *(unsigned int *)(a5 + 8);
      if (v31 >= *(unsigned int *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v31 = *(unsigned int *)(a5 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v31) = v28;
      ++*(_DWORD *)(a5 + 8);
    }
    v32 = (unint64_t *)(v26 + 8);
    while (v32 != (unint64_t *)v27)
    {
      v33 = *v32++;
      v28 = (void *)v33;
      if (v33 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v26 = (char *)(v32 - 1);
        goto LABEL_28;
      }
    }
  }
LABEL_39:
  v46 = v50;
  v47 = v50;
  v48 = 8;
  v49 = 0;
  sub_22EF5D228(a1, a2, (uint64_t)&v46);
  if (HIDWORD(v48) == v49)
  {
    LODWORD(v34) = *(_DWORD *)(a5 + 8);
  }
  else
  {
    v35 = *(void ***)a5;
    v36 = *(unsigned int *)(a5 + 8);
    if (!(_DWORD)v36)
      goto LABEL_58;
    v37 = &v35[v36];
    v38 = 8 * v36 - 8;
    v39 = *(void ***)a5;
    do
    {
      v40 = *v39++;
      v41 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v46, v40);
      v42 = v47 == v46 ? (uint64_t *)((char *)&v48 + 4) : &v48;
      if (v41 != (void **)&v47[8 * *(unsigned int *)v42])
        break;
      v38 -= 8;
      v35 = v39;
    }
    while (v39 != v37);
    if (v39 == v37)
    {
LABEL_58:
      v37 = v35;
    }
    else
    {
      v43 = 1;
      v37 = v35;
      do
      {
        v44 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v46, v35[v43]);
        if (v47 == v46)
          v45 = (uint64_t *)((char *)&v48 + 4);
        else
          v45 = &v48;
        if (v44 == (void **)&v47[8 * *(unsigned int *)v45])
          *v37++ = v35[v43];
        ++v43;
        v38 -= 8;
      }
      while (v38);
    }
    v34 = ((unint64_t)v37 - *(_QWORD *)a5) >> 3;
    *(_DWORD *)(a5 + 8) = v34;
  }
  if (v34 >= 2)
    qsort(*(void **)a5, v34, 8uLL, (int (__cdecl *)(const void *, const void *))sub_22EF76DD4);
  if (v47 != v46)
    free(v47);
  if (v52 != v51)
    free(v52);
  if (v57 != v56)
    free(v57);
}

uint64_t sub_22EF6FF80(uint64_t a1, unint64_t a2, unint64_t a3, char a4, char a5, char a6)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t result;
  int v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int8x8_t v37;
  int32x2_t v38;
  int8x8_t v39;
  int32x2_t v40;
  int32x2_t v41;
  int8x8_t v42;
  __int32 v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _BOOL4 v51;
  __int32 v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  BOOL v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  BOOL v96;
  unint64_t v97;
  _BOOL4 v98;
  llvm::APInt *v99;
  const llvm::APInt *v100;
  uint64_t v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unsigned int v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  unsigned int v129;
  char v130;
  uint64_t v131;
  const llvm::APInt *v132;
  unsigned __int8 *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  BOOL v137;
  __int16 v138;
  int v139;
  _BOOL4 v140;
  uint64_t v141;
  _BYTE v142[8];
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  unsigned int v148;

  while (1)
  {
    while (1)
    {
      v12 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
      v13 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
      if (!v13 || (*(_DWORD *)(v13 + 16) & 0xFE) != 0x28)
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
          v13 = sub_22F10CF48(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
        else
          v13 = 0;
      }
      v14 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
      v15 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
      if (!v15 || (*(_DWORD *)(v15 + 16) & 0xFE) != 0x28)
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
          v15 = sub_22F10CF48(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
        else
          v15 = 0;
      }
      v16 = !*(_DWORD *)(*(_QWORD *)(a1 + 2000) + 72) || v13 == 0;
      if (v16 || v15 == 0)
        break;
      if (*(unsigned __int8 *)(*v14 + 16) != *(unsigned __int8 *)(*v12 + 16))
        return 0;
      if ((*(_BYTE *)(v13 + 18) & 0x10) != 0)
      {
        do
        {
          while (1)
          {
            v13 = *(_QWORD *)(*(_QWORD *)(v13 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v13)
              break;
            v18 = *(_DWORD *)(v13 + 16);
            if ((v18 & 0xFE) != 0x28)
              break;
            if ((v18 & 0x100000) == 0)
              goto LABEL_25;
          }
          v13 = sub_22F10CF48(v13);
        }
        while ((*(_DWORD *)(v13 + 16) & 0x100000) != 0);
      }
LABEL_25:
      a2 = *(_QWORD *)(v13 + 32);
      if ((*(_BYTE *)(v15 + 18) & 0x10) != 0)
      {
        do
        {
          while (1)
          {
            v15 = *(_QWORD *)(*(_QWORD *)(v15 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v15)
              break;
            v19 = *(_DWORD *)(v15 + 16);
            if ((v19 & 0xFE) != 0x28)
              break;
            if ((v19 & 0x100000) == 0)
              goto LABEL_31;
          }
          v15 = sub_22F10CF48(v15);
        }
        while ((*(_DWORD *)(v15 + 16) & 0x100000) != 0);
      }
LABEL_31:
      a3 = *(_QWORD *)(v15 + 32);
    }
    if (v13 | v15)
      return 0;
    if ((a5 & 1) != 0)
    {
      v20 = *v12;
      if ((*(_BYTE *)(*v12 + 8) & 0xF) != 0)
        v20 = (unint64_t)sub_22F10D2BC(a2);
      v21 = *v14;
      if ((*(_BYTE *)(*v14 + 8) & 0xF) != 0)
        v21 = (unint64_t)sub_22F10D2BC(a3);
      v12 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFF0);
      v14 = (uint64_t *)(v21 & 0xFFFFFFFFFFFFFFF0);
      a3 = v21 & 0xFFFFFFFFFFFFFFF0;
      a2 = v20 & 0xFFFFFFFFFFFFFFF0;
    }
    v22 = v12[1];
    v23 = v14[1];
    if ((a2 & 7 | v22) == (v23 | a3 & 7))
      return a2;
    if ((v22 & 8) != 0)
    {
      v24 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
      v25 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      if ((v23 & 8) == 0)
      {
LABEL_44:
        HIDWORD(v26) = 0;
        v27 = 0;
        goto LABEL_45;
      }
    }
    else
    {
      v24 = 0;
      v25 = 0;
      if ((v23 & 8) == 0)
        goto LABEL_44;
    }
    v26 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
    v27 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFF0) + 0x18);
LABEL_45:
    v28 = v25 | a2 & 7 | v22 & 7;
    v29 = HIDWORD(v24);
    v30 = v27 | v23 & 7 | a3 & 7;
    if (v28 == v30 && (_DWORD)v29 == HIDWORD(v26))
      break;
    if (((v30 ^ v28) & 0xFFFFFE07) != 0)
      return 0;
    result = 0;
    if ((((unsigned __int16)v30 ^ (unsigned __int16)v28) & 0x1C0) != 0 || (_DWORD)v29 != HIDWORD(v26))
      return result;
    if (((v28 ^ v30) & 8) != 0)
      return 0;
    result = 0;
    v32 = (v28 >> 4) & 3;
    if (v32 == 1)
      return result;
    v33 = (v30 >> 4) & 3;
    if (v33 == 1)
      return result;
    if (v32 == 2
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
    {
      a3 = sub_22F369084(a1, a3, 2);
    }
    else
    {
      if (v33 != 2
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) != 32)
      {
        return 0;
      }
      a2 = sub_22F369084(a1, a2, 2);
    }
    a4 = 0;
    a5 = 0;
    a6 = 0;
  }
  v34 = *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0);
  v35 = v23 & 0xFFFFFFFFFFFFFFF0;
  v36 = *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0);
  v37.i32[0] = *(_DWORD *)(v34 + 16);
  v37.i32[1] = *(_DWORD *)(v36 + 16);
  v38 = (int32x2_t)vand_s8(v37, (int8x8_t)0xFF000000FFLL);
  v39 = vbsl_s8((int8x8_t)vceq_s32(v38, (int32x2_t)0x1A0000001ALL), (int8x8_t)0x1900000019, (int8x8_t)v38);
  v40 = (int32x2_t)vbsl_s8((int8x8_t)vceq_s32((int32x2_t)(*(_QWORD *)&v39 & 0xFFFFFFFEFFFFFFFELL), (int32x2_t)0x400000004), (int8x8_t)0x200000002, v39);
  v41 = (int32x2_t)vbsl_s8((int8x8_t)vceq_s32(v40, (int32x2_t)0x2200000022), (int8x8_t)0x2100000021, (int8x8_t)v40);
  v42 = vbsl_s8((int8x8_t)vceq_s32(v41, (int32x2_t)0x3800000038), (int8x8_t)0x3700000037, (int8x8_t)v41);
  if (v42.i32[0] != v42.i32[1])
  {
    v44 = *v12;
    v45 = *(_QWORD *)(*(_QWORD *)(*v12 + 8) & 0xFFFFFFFFFFFFFFF0);
    v46 = *(unsigned __int8 *)(v45 + 16);
    if (v45 && v46 == 44)
      return sub_22EF71B34(a1, *(_QWORD *)(v45 + 24), a3, 0);
    v47 = *v14;
    v48 = *(_QWORD *)(*(_QWORD *)(*v14 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v48 && *(_BYTE *)(v48 + 16) == 44)
      return sub_22EF71B34(a1, *(_QWORD *)(v48 + 24), a2, a6 & 1);
    if (a6 & 1 | ((a4 & 1) == 0))
    {
LABEL_231:
      v114 = *v12;
      if ((!*v12 || *(_BYTE *)(v114 + 16) != 14)
        && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v114 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 14
         || (v114 = sub_22F10CF48(v114)) == 0)
        || *(_QWORD *)(v114 + 24) > 0xFuLL
        || (v115 = *(_DWORD *)(v114 + 16) & 0x180400, result = a3, v115 != 0x100000))
      {
        v116 = *v14;
        if (!*v14 || *(_BYTE *)(v116 + 16) != 14)
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v116 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 14)
            return 0;
          v116 = sub_22F10CF48(v116);
          if (!v116)
            return 0;
        }
        if (*(_QWORD *)(v116 + 24) > 0xFuLL)
          return 0;
        v117 = *(_DWORD *)(v116 + 16) & 0x180400;
        result = a2;
        if (v117 != 0x100000)
          return 0;
      }
      return result;
    }
    if (*(_BYTE *)(v44 + 16) != 32)
    {
      if (v46 != 32)
        goto LABEL_224;
      v44 = sub_22F10CF48(*v12);
      if (!v44)
      {
        v47 = *v14;
        goto LABEL_224;
      }
    }
    v51 = sub_22E5761BC(v44);
    v47 = *v14;
    if (v51 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 10)
      return a2;
LABEL_224:
    if ((v47 && *(_BYTE *)(v47 + 16) == 32
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
       && (v47 = sub_22F10CF48(v47)) != 0)
      && sub_22E5761BC(v47)
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 10)
    {
      return a3;
    }
    goto LABEL_231;
  }
  result = 0;
  if (v42.u8[0] <= 0x1Cu)
  {
    switch(v42.i8[0])
    {
      case 2:
        v49 = sub_22EF5C728(a1, a2);
        if (v49)
        {
          if (*(_BYTE *)(v49 + 16) == 2)
            v50 = v49;
          else
            v50 = 0;
        }
        else
        {
          v50 = 0;
        }
        v93 = sub_22EF5C728(a1, a3);
        v94 = v93;
        if (v93)
        {
          v95 = *(unsigned __int8 *)(v93 + 16);
          v96 = v95 == 2;
          if (v95 == 2)
            v97 = v93;
          else
            v97 = 0;
          v98 = v50 != 0;
          if (v50 && v95 == 2)
          {
            v99 = (llvm::APInt *)(v97 + 40);
            v100 = (const llvm::APInt *)(v50 + 40);
            if (*(_DWORD *)(v97 + 48) > 0x40u)
            {
              if (!llvm::APInt::equalSlowCase(v99, v100))
                return 0;
            }
            else if (*(_QWORD *)v99 != *(_QWORD *)v100)
            {
              return 0;
            }
            v96 = 1;
            v98 = 1;
          }
          else
          {
            v94 = v97;
          }
        }
        else
        {
          v96 = 0;
          v98 = v50 != 0;
        }
        v118 = *(_QWORD *)(sub_22EF5C728(a1, a2) + 32);
        v119 = *(_QWORD *)(sub_22EF5C728(a1, a3) + 32);
        if ((a5 & 1) != 0)
        {
          v120 = *(_QWORD *)(v118 & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v120 + 8) & 0xF) != 0)
            v120 = (unint64_t)sub_22F10D2BC(v118);
          v118 = v120 & 0xFFFFFFFFFFFFFFF0;
          v121 = *(_QWORD *)(v119 & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v121 + 8) & 0xF) != 0)
            v121 = (unint64_t)sub_22F10D2BC(v119);
          v119 = v121 & 0xFFFFFFFFFFFFFFF0;
        }
        v122 = sub_22EF6FF80(a1, v118, v119, 0, a5 & 1, 0);
        if (v122 < 0x10)
          return 0;
        v123 = v122;
        v124 = sub_22EF5C728(a1, a2);
        if (v124)
        {
          if (*(_BYTE *)(v124 + 16) == 5)
            v125 = v124;
          else
            v125 = 0;
          v141 = v125;
        }
        else
        {
          v141 = 0;
        }
        v140 = v98;
        v126 = sub_22EF5C728(a1, a3);
        if (v126)
        {
          if (*(_BYTE *)(v126 + 16) == 5)
            v127 = v126;
          else
            v127 = 0;
        }
        else
        {
          v127 = 0;
        }
        if (v141 | v127)
        {
          v137 = v96;
          v148 = 1;
          v147 = 0;
          v146 = 1;
          v145 = 0;
          sub_22EF71C54((uint64_t)v142, a1, v141, v50);
          v139 = v142[0];
          if (v148 >= 0x41 && v147)
            MEMORY[0x2348A0E84](v147, 0x1000C8000313F17);
          v147 = v143;
          v148 = v144;
          sub_22EF71C54((uint64_t)v142, a1, v127, v94);
          v128 = v142[0];
          if (v146 >= 0x41 && v145)
            MEMORY[0x2348A0E84](v145, 0x1000C8000313F17);
          v145 = v143;
          v129 = v144;
          v146 = v144;
          if (v139)
          {
            if (v128)
            {
              v130 = sub_22EF71DC4((llvm::APInt *)&v147, (llvm::APInt *)&v145);
              v129 = v146;
              if ((v130 & 1) == 0)
              {
                if (v146 >= 0x41 && v145)
                  MEMORY[0x2348A0E84](v145, 0x1000C8000313F17);
                if (v148 >= 0x41 && v147)
                  MEMORY[0x2348A0E84](v147, 0x1000C8000313F17);
                return 0;
              }
            }
          }
          if (v129 >= 0x41 && v145)
            MEMORY[0x2348A0E84](v145, 0x1000C8000313F17);
          if (v148 >= 0x41 && v147)
            MEMORY[0x2348A0E84](v147, 0x1000C8000313F17);
          v96 = v137;
        }
        if (v140)
        {
          v131 = *(_QWORD *)((v123 & 0xFFFFFFFFFFFFFFF0) + 8) | v123 & 7;
          result = a2;
          if ((*(_QWORD *)((v118 & 0xFFFFFFFFFFFFFFF0) + 8) | v118 & 7) == v131)
            return result;
          if (v96)
          {
            result = a3;
            if (v131 == (*(_QWORD *)((v119 & 0xFFFFFFFFFFFFFFF0) + 8) | v119 & 7))
              return result;
          }
          v132 = (const llvm::APInt *)(v50 + 40);
          if ((*(_BYTE *)(v50 + 19) & 2) != 0)
          {
            v133 = *(unsigned __int8 **)(v50 + 56);
            return sub_22EF5FE30(a1, v123, v132, v133, 0, 0);
          }
        }
        else
        {
          if (!v96)
          {
            if (v141)
            {
              v134 = *(_QWORD *)((v123 & 0xFFFFFFFFFFFFFFF0) + 8) | v123 & 7;
              if ((*(_QWORD *)((v118 & 0xFFFFFFFFFFFFFFF0) + 8) | v118 & 7) == v134)
                return a2;
              result = a2;
              if (!v127)
                return result;
            }
            else
            {
              if (!v127)
              {
                v136 = *(_QWORD *)((v123 & 0xFFFFFFFFFFFFFFF0) + 8) | v123 & 7;
                result = a2;
                if ((*(_QWORD *)((v118 & 0xFFFFFFFFFFFFFFF0) + 8) | v118 & 7) != v136)
                {
                  result = a3;
                  if ((*(_QWORD *)((v119 & 0xFFFFFFFFFFFFFFF0) + 8) | v119 & 7) != v136)
                    return sub_22EF6096C(a1, v123, 0, 0, 0, 0, 0);
                }
                return result;
              }
              v134 = *(_QWORD *)((v123 & 0xFFFFFFFFFFFFFFF0) + 8) | v123 & 7;
              a2 = a3;
            }
            if (v134 == (*(_QWORD *)((v119 & 0xFFFFFFFFFFFFFFF0) + 8) | v119 & 7))
              return a3;
            else
              return a2;
          }
          result = a3;
          if ((*(_QWORD *)((v123 & 0xFFFFFFFFFFFFFFF0) + 8) | v123 & 7) == (*(_QWORD *)((v119 & 0xFFFFFFFFFFFFFFF0)
                                                                                         + 8) | v119 & 7))
            return result;
          v132 = (const llvm::APInt *)(v94 + 40);
          if ((*(_BYTE *)(v94 + 19) & 2) != 0)
          {
            v133 = *(unsigned __int8 **)(v94 + 56);
            return sub_22EF5FE30(a1, v123, v132, v133, 0, 0);
          }
        }
        v133 = 0;
        return sub_22EF5FE30(a1, v123, v132, v133, 0, 0);
      case 3:
      case 4:
      case 5:
      case 7:
      case 8:
LABEL_320:
        __break(1u);
        return result;
      case 6:
        v70 = *v12;
        if (!*v12 || *(_BYTE *)(v70 + 16) != 6)
          v70 = sub_22F10CF48(v70);
        v71 = *(_QWORD *)(v70 + 32);
        v72 = *v14;
        if (!*v14 || *(_BYTE *)(v72 + 16) != 6)
          v72 = sub_22F10CF48(v72);
        v73 = *(_QWORD *)(v72 + 32);
        if ((a5 & 1) != 0)
        {
          v74 = *(_QWORD *)(v71 & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v74 + 8) & 0xF) != 0)
            v74 = (unint64_t)sub_22F10D2BC(v71);
          v71 = v74 & 0xFFFFFFFFFFFFFFF0;
          v75 = *(_QWORD *)(v73 & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v75 + 8) & 0xF) != 0)
            v75 = (unint64_t)sub_22F10D2BC(v73);
          v73 = v75 & 0xFFFFFFFFFFFFFFF0;
        }
        v76 = sub_22EF6FF80(a1, v71, v73, 0, a5 & 1, 0);
        if (v76 < 0x10)
          return 0;
        v77 = v76;
        v78 = *(_QWORD *)((v76 & 0xFFFFFFFFFFFFFFF0) + 8) | v76 & 7;
        result = a2;
        if ((*(_QWORD *)((v71 & 0xFFFFFFFFFFFFFFF0) + 8) | v71 & 7) != v78)
        {
          result = a3;
          if ((*(_QWORD *)((v73 & 0xFFFFFFFFFFFFFFF0) + 8) | v73 & 7) != v78)
            return sub_22F36A8C0(a1, v77);
        }
        return result;
      case 9:
        v79 = *v12;
        if (!*v12 || *(_BYTE *)(v79 + 16) != 9)
          v79 = sub_22F10CF48(v79);
        v80 = *(_DWORD *)(v79 + 32);
        v81 = *v14;
        if (!*v14 || *(_BYTE *)(v81 + 16) != 9)
          v81 = sub_22F10CF48(v81);
        v82 = *(_DWORD *)(v81 + 32);
        v83 = *v12;
        if (!*v12 || *(_BYTE *)(v83 + 16) != 9)
          v83 = sub_22F10CF48(v83);
        v84 = *(_DWORD *)(v83 + 32);
        v85 = *v14;
        if (!*v14 || *(_BYTE *)(v85 + 16) != 9)
          v85 = sub_22F10CF48(v85);
        if (((v80 ^ v82) & 1) != 0)
          return 0;
        v86 = ((*(_DWORD *)(v85 + 32) ^ v84) & 0x1FFFFFE) == 0;
LABEL_178:
        if (v86)
          return a2;
        else
          return 0;
      case 0xA:
        v53 = *v12;
        if (!*v12 || *(_BYTE *)(v53 + 16) != 10)
          v53 = sub_22F10CF48(v53);
        v54 = *(_QWORD *)(v53 + 32);
        v55 = *v14;
        if (!*v14 || *(_BYTE *)(v55 + 16) != 10)
          v55 = sub_22F10CF48(v55);
        v56 = *(_QWORD *)(v55 + 32);
        if ((a5 & 1) != 0)
        {
          v57 = *(_QWORD *)(v54 & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v57 + 8) & 0xF) != 0)
            v57 = (unint64_t)sub_22F10D2BC(v54);
          v54 = v57 & 0xFFFFFFFFFFFFFFF0;
          v58 = *(_QWORD *)(v56 & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v58 + 8) & 0xF) != 0)
            v58 = (unint64_t)sub_22F10D2BC(v56);
          v56 = v58 & 0xFFFFFFFFFFFFFFF0;
        }
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 2000) + 52) & 0x40000000) != 0)
        {
          v59 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFFFF0) + 8);
          if ((v59 & 8) != 0)
            v60 = *(_DWORD *)((v59 & 0xFFFFFFFFFFFFFFF0) + 0x18);
          else
            v60 = 0;
          v101 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFFFF0) + 8);
          if ((v101 & 8) != 0)
            v102 = *(_DWORD *)((v101 & 0xFFFFFFFFFFFFFFF0) + 0x18);
          else
            v102 = 0;
          v138 = v60;
          if (!sub_22E95F2F0(v60 >> 11, v102 >> 11))
            return 0;
          v54 = v138 & 0x7FF | (unint64_t)((v59 | v54) & 7) | *(_QWORD *)(v54 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0;
          v56 = v102 & 0x7FF | *(_QWORD *)(v56 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0 | (v101 | v56) & 7;
        }
        v103 = sub_22EF6FF80(a1, v54, v56, a4 & 1, a5 & 1, 0);
        if (v103 < 0x10)
          return 0;
        v104 = v103;
        v105 = *(_QWORD *)((v103 & 0xFFFFFFFFFFFFFFF0) + 8) | v103 & 7;
        result = a2;
        if ((*(_QWORD *)((v54 & 0xFFFFFFFFFFFFFFF0) + 8) | v54 & 7) != v105)
        {
          result = a3;
          if ((*(_QWORD *)((v56 & 0xFFFFFFFFFFFFFFF0) + 8) | v56 & 7) != v105)
            return sub_22F36A4F8(a1, v104);
        }
        return result;
      case 0xB:
      case 0xC:
        return result;
      default:
        return sub_22EF71270(a1, a2, a3, a4 & 1, a5 & 1);
    }
  }
  switch(v42.i8[0])
  {
    case 0x1D:
      if (v38.i32[0] == 29)
      {
        v43 = v38.i32[1];
      }
      else
      {
        v34 = sub_22F10CF48(v34);
        v36 = *(_QWORD *)v35;
        v43 = *(unsigned __int8 *)(*(_QWORD *)v35 + 16);
      }
      if (v43 != 29)
        v36 = sub_22F10CF48(v36);
      if (*(_QWORD *)(v34 + 32) != *(_QWORD *)(v36 + 32) || *(_DWORD *)(v34 + 40) != *(_DWORD *)(v36 + 40))
        return 0;
      v91 = *(_DWORD *)(v34 + 44);
      v92 = *(_DWORD *)(v36 + 44);
      goto LABEL_177;
    case 0x1E:
    case 0x1F:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
      goto LABEL_320;
    case 0x20:
      v87 = *v12;
      if (*v12)
        v88 = *(_BYTE *)(*v12 + 16) == 32;
      else
        v88 = 0;
      v89 = !v88;
      if ((a4 & 1) != 0)
      {
        if (v89)
          v87 = sub_22F10CF48(*v12);
        v135 = *v14;
        if (!*v14 || *(_BYTE *)(v135 + 16) != 32)
          v135 = sub_22F10CF48(*v14);
        v63 = sub_22F36EA60(a1, v87, v135, a6 & 1);
      }
      else
      {
        if (v89)
          v87 = sub_22F10CF48(*v12);
        v90 = *v14;
        if (!*v14 || *(_BYTE *)(v90 + 16) != 32)
          v90 = sub_22F10CF48(*v14);
        v63 = sub_22EF6ED94(a1, v87, v90);
      }
      goto LABEL_163;
    case 0x21:
      v61 = *v12;
      if (!*v12 || *(unsigned __int8 *)(v61 + 16) - 35 <= 0xFFFFFFFD)
        v61 = sub_22F10CF48(*v12);
      v62 = *v14;
      if (!*v14 || *(unsigned __int8 *)(v62 + 16) - 35 <= 0xFFFFFFFD)
        v62 = sub_22F10CF48(*v14);
      v63 = sub_22EF6F180(a1, v61, v62);
LABEL_163:
      if (v63)
        return a2;
      else
        return 0;
    case 0x26:
    case 0x2C:
    case 0x2D:
      return result;
    case 0x27:
      v64 = *v12;
      if (!*v12 || *(_BYTE *)(v64 + 16) != 39)
        v64 = sub_22F10CF48(*v12);
      v65 = *v14;
      if (!*v14 || *(_BYTE *)(v65 + 16) != 39)
        v65 = sub_22F10CF48(*v14);
      v66 = *(_DWORD *)(v64 + 40);
      v67 = v66;
      v68 = v66 & 7;
      if (((*(_DWORD *)(v65 + 40) ^ v66) & 0x1F) != 0)
      {
        v69 = *(_DWORD *)(v65 + 40) & 7;
        if ((v66 & 7) != 0)
        {
          if (v69 || v68 != 4 && v68 != 1)
            return 0;
        }
        else
        {
          result = 0;
          if (v69 > 4)
            return result;
          v67 = *(_DWORD *)(v65 + 40);
          if (((1 << v69) & 0x13) == 0)
            return result;
        }
      }
      else if ((v66 & 7) == 0)
      {
        v67 = *(_DWORD *)(v65 + 40);
      }
      v106 = *(_QWORD *)(v64 + 32);
      v107 = *(_QWORD *)(v65 + 32);
      if ((a5 & 1) != 0)
      {
        v108 = *(_QWORD *)(v106 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v108 + 8) & 0xF) != 0)
          v108 = (unint64_t)sub_22F10D2BC(v106);
        v106 = v108 & 0xFFFFFFFFFFFFFFF0;
        v109 = *(_QWORD *)(v107 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v109 + 8) & 0xF) != 0)
          v109 = (unint64_t)sub_22F10D2BC(v107);
        v107 = v109 & 0xFFFFFFFFFFFFFFF0;
      }
      v110 = sub_22EF6FF80(a1, v106, v107, 0, a5 & 1, 0);
      if (v110 < 0x10)
        return 0;
      v111 = v66 & 0xFFFFFF00;
      v112 = *(_QWORD *)((v110 & 0xFFFFFFFFFFFFFFF0) + 8) | v110 & 7;
      if ((*(_QWORD *)((v106 & 0xFFFFFFFFFFFFFFF0) + 8) | v106 & 7) != v112)
      {
        v12 = v14;
        a2 = a3;
        if ((*(_QWORD *)((v107 & 0xFFFFFFFFFFFFFFF0) + 8) | v107 & 7) != v112)
        {
          a2 = sub_22EF5B848(a1, v110, v111 | v67);
          v12 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
        }
      }
      v113 = *v12;
      if (!*v12 || *(_BYTE *)(v113 + 16) != 39)
        v113 = sub_22F10CF48(v113);
      if (((*(_DWORD *)(v113 + 40) ^ v67) & 0x1F) != 0)
        return sub_22F369668(a1, a2, v111 | v67);
      break;
    default:
      if ((v38.i32[0] - 57) > 0xFFFFFFFD)
      {
        v52 = v38.i32[1];
      }
      else
      {
        v34 = sub_22F10CF48(v34);
        v36 = *(_QWORD *)v35;
        v52 = *(unsigned __int8 *)(*(_QWORD *)v35 + 16);
      }
      if ((v52 - 57) <= 0xFFFFFFFD)
        v36 = sub_22F10CF48(v36);
      if (*(_QWORD *)(v34 + 32) != *(_QWORD *)(v36 + 32))
        return 0;
      v91 = *(_DWORD *)(v34 + 20);
      v92 = *(_DWORD *)(v36 + 20);
LABEL_177:
      v86 = v91 == v92;
      goto LABEL_178;
  }
  return a2;
}

unint64_t sub_22EF71198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  result = sub_22F10E2FC(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (result)
  {
    v10 = sub_22F114198(*(_QWORD *)(result + 24));
    if (!sub_22E69BDA8(v10))
      return 0;
    result = sub_22EFC3B90(v10);
    if (result)
    {
      v11 = result;
LABEL_5:
      v12 = *(_QWORD *)(*(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v12 + 8) & 0xF) != 0)
        v12 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(v11 + 48));
      result = sub_22EF6FF80(a1, v12 & 0xFFFFFFFFFFFFFFF0, a3, a4, a5, 0);
      if (result <= 0xF)
      {
        while (1)
        {
          v11 = *(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!v11)
            return 0;
          if ((*(_DWORD *)(v11 + 28) & 0x7Fu) - 49 < 3)
            goto LABEL_5;
        }
      }
    }
  }
  return result;
}

unint64_t sub_22EF71270(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  unint64_t v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned __int16 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v70;
  unint64_t v71;
  unint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  char v77;
  uint64_t v78;
  unsigned __int16 v79;
  unsigned __int16 v80;
  __int128 v81[4];
  void *v82;
  __int16 v83;
  void *v84;
  __int128 v85;
  _BYTE v86[14];
  unsigned __int16 v87;
  __int128 v88;
  _QWORD v89[12];

  v89[10] = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v10)
    v11 = *(unsigned __int8 *)(v10 + 16) - 27 > 0xFFFFFFFD;
  else
    v11 = 0;
  if (!v11)
    v10 = sub_22F10CF48(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  v12 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v13 = *(unsigned __int8 *)(v12 + 16);
  if (v12)
    v14 = (v13 - 27) > 0xFFFFFFFD;
  else
    v14 = 0;
  if (!v14)
  {
    v12 = sub_22F10CF48(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
    v13 = *(unsigned __int8 *)(v12 + 16);
  }
  if (*(_BYTE *)(v10 + 16) == 26)
    v15 = v10;
  else
    v15 = 0;
  if (v13 == 26)
    v16 = v12;
  else
    v16 = 0;
  if ((_DWORD)a4)
  {
    v17 = *(_QWORD *)(v12 + 24);
    v18 = *(_QWORD *)(v10 + 24);
    if ((a5 & 1) == 0)
    {
      if ((v17 & 0xF) != 0 || (*(_BYTE *)((v17 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xF) != 0)
      {
        v19 = 0;
        goto LABEL_24;
      }
      if ((v18 & 0xF) == 0)
      {
        v19 = (*(_BYTE *)((v18 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xF) != 0;
        goto LABEL_24;
      }
    }
    v19 = 1;
LABEL_24:
    v20 = a1;
    v21 = 1;
    v22 = 1;
    goto LABEL_25;
  }
  v18 = *(_QWORD *)(v10 + 24);
  v17 = *(_QWORD *)(v12 + 24);
  v20 = a1;
  v21 = 0;
  v19 = a5;
  v22 = 0;
LABEL_25:
  v23 = sub_22EF6FF80(v20, v18, v17, v21, v19, v22);
  v24 = v23;
  if (v23 < 0x10)
    return 0;
  if ((_DWORD)a5)
  {
    v25 = *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v25 + 8) & 0xF) != 0)
      v25 = (unint64_t)sub_22F10D2BC(v24);
    v24 = v25 & 0xFFFFFFFFFFFFFFF0;
    v26 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v10 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0;
    v27 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v12 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    v26 = *(_QWORD *)(v10 + 24) & 7 | *(_QWORD *)((*(_QWORD *)(v10 + 24) & 0xFFFFFFFFFFFFFFF0) + 8);
    v27 = *(_QWORD *)(v12 + 24) & 7 | *(_QWORD *)((*(_QWORD *)(v12 + 24) & 0xFFFFFFFFFFFFFFF0) + 8);
  }
  v28 = *(_DWORD *)(v10 + 16);
  v29 = *(_DWORD *)(v12 + 16) >> 19;
  if (((v29 ^ (v28 >> 19)) & 0x1F) != 0)
    return 0;
  v30 = v28 >> 19;
  if (((v30 & 0x700) != 0) != (((*(_DWORD *)(v12 + 16) >> 19) & 0x700) != 0))
    return 0;
  v31 = ((*(_DWORD *)(v12 + 16) >> 27) & 7) - 1;
  if (((*(_DWORD *)(v12 + 16) >> 27) & 7) == 0)
    v31 = 0;
  v32 = ((v30 >> 8) & 7) != 0 ? ((v30 >> 8) & 7) - 1 : 0;
  if (v32 != v31
    || ((v30 ^ v29) & 0x40) != 0
    || ((v30 ^ v29) & 0x80) != 0
    || ((v30 ^ v29) & 0x800) != 0)
  {
    return 0;
  }
  v33 = v24 & 7 | *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFFF0) + 8);
  v34 = (v29 | v30) & 0x20;
  v35 = (((v30 & 0x20) == 0) ^ (v34 >> 5)) & (v33 == v26);
  v36 = ((((*(_DWORD *)(v12 + 16) >> 19) & 0x20) == 0) ^ (v34 >> 5)) & (v33 == v27);
  if (((v29 | v30) & 0x20) != 0)
    v37 = v30 | 0x20;
  else
    v37 = v30 & 0xFFDF;
  v87 = v37;
  if (!v15 || !v16)
  {
    if (v15)
      LOBYTE(v36) = 0;
    v57 = v35 & (v16 == 0);
    if (v15)
      v58 = v15;
    else
      v58 = v16;
    if (v58)
    {
      v59 = *(_QWORD *)(v58 + 16);
      if ((v59 & 0x800000000000000) != 0)
        return 0;
      v80 = v37;
      if ((v59 & 0x3FFFC000000000) != 0)
      {
        v60 = (uint64_t *)(v58 + 40);
        v61 = (unsigned __int16)(v59 >> 38);
        do
        {
          v62 = *v60++;
          v63 = v62 & 0xFFFFFFFFFFFFFFF0;
          v64 = *(_QWORD *)(v62 & 0xFFFFFFFFFFFFFFF0);
          v65 = *(_QWORD *)(*(_QWORD *)(v64 + 8) & 0xFFFFFFFFFFFFFFF0);
          if (v65 && *(_BYTE *)(v65 + 16) == 44)
          {
            v66 = sub_22F114198(*(_QWORD *)(v65 + 24));
            v67 = sub_22E496830(v66);
            if (v67 < 0x10)
              return 0;
            v63 = v67 & 0xFFFFFFFFFFFFFFF0;
            v64 = *(_QWORD *)(v67 & 0xFFFFFFFFFFFFFFF0);
          }
          if (sub_22F1124D8(v64)
            || (*(_QWORD *)(*(_QWORD *)(v63 + 8) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(a1 + 16560))
          {
            return 0;
          }
        }
        while (--v61);
      }
      if (v57)
        a3 = a2;
      if (((v57 | v36) & 1) != 0)
        return a3;
      sub_22E4913B4(v58, (uint64_t)&v88);
      LOWORD(v88) = v80;
      return sub_22EF63D8C(a1, v24, (uint64_t *)(v58 + 40), (unsigned __int16)(*(_QWORD *)(v58 + 16) >> 38), &v88, 0);
    }
    else
    {
      if ((v35 & (v16 == 0)) != 0)
        a3 = a2;
      if (v35 & (v16 == 0) | v36 & 1)
        return a3;
      return sub_22F369930(a1, v24, &v87);
    }
  }
  v38 = *(_QWORD *)(v15 + 16);
  v39 = *(_QWORD *)(v16 + 16);
  if (((v39 ^ v38) & 0x3FFFC000000000) != 0)
    return 0;
  if (((v38 & 0x800000000000000) != 0) != ((v39 & 0x800000000000000) != 0))
    return 0;
  v79 = v37;
  v78 = sub_22E47E1B0(v15);
  v40 = sub_22E47E1B0(v16);
  if (v78 != v40)
    return 0;
  v84 = v86;
  v85 = xmmword_22F4559B0;
  v83 = 0;
  if (sub_22EF71984(v40, v15, v16, (_BYTE *)&v83 + 1, &v83, (uint64_t *)&v84))
  {
    v41 = v35 & (HIBYTE(v83) != 0);
    if ((_BYTE)v83)
      v42 = v36;
    else
      v42 = 0;
    *(_QWORD *)&v88 = v89;
    *((_QWORD *)&v88 + 1) = 0xA00000000;
    v43 = *(_QWORD *)(v15 + 16);
    if ((v43 & 0x3FFFC000000000) != 0)
    {
      v44 = (uint64_t *)(v15 + 40);
      v45 = (uint64_t *)(v16 + 40);
      v46 = (unsigned __int16)(v43 >> 38);
      while (1)
      {
        v73 = v42;
        v74 = v46;
        v77 = v41;
        v76 = v44 + 1;
        v47 = *(_QWORD *)(*v44 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v47 + 8) & 0xF) != 0)
          v47 = (unint64_t)sub_22F10D2BC(*v44);
        v48 = *(_QWORD *)(*v45 & 0xFFFFFFFFFFFFFFF0);
        v75 = v45;
        if ((*(_BYTE *)(v48 + 8) & 0xF) != 0)
          v48 = (unint64_t)sub_22F10D2BC(*v45);
        v49 = (unint64_t *)(v47 & 0xFFFFFFFFFFFFFFF0);
        v50 = (unint64_t *)(v48 & 0xFFFFFFFFFFFFFFF0);
        v51 = sub_22F36EE00(a1, v47 & 0xFFFFFFFFFFFFFFF0, v48 & 0xFFFFFFFFFFFFFFF0, a4, a5);
        if (v51 < 0x10)
          break;
        v52 = v51;
        if ((_DWORD)a5)
        {
          v71 = *(_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v71 + 8) & 0xF) != 0)
            v71 = (unint64_t)sub_22F10D2BC(v51);
          v53 = DWORD2(v88);
          if (DWORD2(v88) >= (unint64_t)HIDWORD(v88))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v53 = DWORD2(v88);
          }
          v52 = v71 & 0xFFFFFFFFFFFFFFF0;
          *(_QWORD *)(v88 + 8 * v53) = v71 & 0xFFFFFFFFFFFFFFF0;
          ++DWORD2(v88);
          v72 = *v49;
          if ((*(_BYTE *)(*v49 + 8) & 0xF) != 0)
            v72 = (unint64_t)sub_22F10D2BC((uint64_t)v49);
          v54 = *v50;
          if ((*(_BYTE *)(*v50 + 8) & 0xF) != 0)
            v54 = (unint64_t)sub_22F10D2BC((uint64_t)v50);
          v49 = (unint64_t *)(v72 & 0xFFFFFFFFFFFFFFF0);
          v50 = (unint64_t *)(v54 & 0xFFFFFFFFFFFFFFF0);
        }
        else
        {
          v55 = DWORD2(v88);
          if (DWORD2(v88) >= (unint64_t)HIDWORD(v88))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v55 = DWORD2(v88);
          }
          *(_QWORD *)(v88 + 8 * v55) = v52;
          ++DWORD2(v88);
        }
        v56 = v52 & 7 | *(_QWORD *)((v52 & 0xFFFFFFFFFFFFFFF0) + 8);
        v41 = v77 & (v56 == v49[1]);
        v42 = (v56 == v50[1]) & v73;
        v44 = v76;
        v45 = v75 + 1;
        v46 = v74 - 1;
        if (v74 == 1)
          goto LABEL_106;
      }
      a3 = 0;
    }
    else
    {
LABEL_106:
      if ((v41 & 1) != 0)
      {
        a3 = a2;
      }
      else if ((v42 & 1) == 0)
      {
        sub_22E4913B4(v15, (uint64_t)v81);
        LOWORD(v81[0]) = v79;
        if ((_QWORD)v85)
          v70 = v84;
        else
          v70 = 0;
        v82 = v70;
        a3 = sub_22EF63D8C(a1, v24, (uint64_t *)v88, DWORD2(v88), v81, 0);
      }
    }
    if ((_QWORD *)v88 != v89)
      free((void *)v88);
  }
  else
  {
    a3 = 0;
  }
  if (v84 != v86)
    free(v84);
  return a3;
}

uint64_t sub_22EF71984(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, _BYTE *a5, uint64_t *a6)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  _BYTE *v26;
  _BYTE *v27;

  result = 1;
  *a5 = 1;
  *a4 = 1;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a3 + 16);
  if (((v7 | v8) & 0x400000000000000) == 0)
    return result;
  if ((v7 & 0x400000000000000) != 0)
    v14 = a2;
  else
    v14 = a3;
  sub_22E47E270(v14);
  v15 = *(_QWORD *)(v14 + 16);
  v16 = (unsigned __int16)(v15 >> 38);
  if (!(unsigned __int16)(v15 >> 38))
  {
LABEL_26:
    a6[1] = 0;
    return 1;
  }
  v26 = a4;
  v27 = a5;
  v17 = 0;
  v18 = 0;
  do
  {
    if ((v7 & 0x400000000000000) != 0 && (*(_BYTE *)(a2 + 23) & 4) != 0)
    {
      v19 = *(unsigned __int8 *)(sub_22E47E270(a2) + v18);
      if ((v8 & 0x400000000000000) == 0)
        goto LABEL_13;
    }
    else
    {
      v19 = 0;
      if ((v8 & 0x400000000000000) == 0)
        goto LABEL_13;
    }
    if ((*(_BYTE *)(a3 + 23) & 4) == 0)
    {
LABEL_13:
      v20 = 0;
      goto LABEL_15;
    }
    v20 = *(unsigned __int8 *)(sub_22E47E270(a3) + v18);
LABEL_15:
    if (((v20 ^ v19) & 0xFFFFFFBF) != 0)
      return 0;
    v21 = a6[1];
    if (v21 + 1 > (unint64_t)a6[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v21 = a6[1];
    }
    v22 = v20 & v19 & 0x40;
    *(_BYTE *)(*a6 + v21) = v22 | v19 & 0xBF;
    v23 = *a6;
    v24 = a6[1] + 1;
    a6[1] = v24;
    v25 = *(_BYTE *)(v23 + v24 - 1) != 0;
    if (((v19 & 0x40) != 0) != (v22 != 0))
      *v26 = 0;
    if ((v22 != 0) != (v20 & 0x40) >> 6)
      *v27 = 0;
    v17 |= v25;
    ++v18;
  }
  while (v16 != v18);
  if ((v17 & 1) == 0)
    goto LABEL_26;
  return 1;
}

uint64_t sub_22EF71B34(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;

  v7 = sub_22F114198(a2);
  v8 = sub_22E496830(v7);
  if (v8 < 0x10)
    return 0;
  v9 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFF0);
  v10 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 8) | v8 & 7) == (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) | a3 & 7))
    return a3;
  if (!a4)
    return 0;
  v11 = *(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_DWORD *)(v11 + 16);
  if (v11)
    v13 = v12 == 11;
  else
    v13 = 0;
  if (!v13)
  {
    if (v11 && v12 == 44)
    {
      v14 = sub_22F114198(*(_QWORD *)(v11 + 24));
      if ((*(_BYTE *)(v14 + 74) & 1) == 0 && *(_QWORD *)(v14 + 128) <= 7uLL
        || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v11 + 24)) + 76) & 0x80) != 0)
      {
        return 0;
      }
      goto LABEL_17;
    }
    if (v12 == 9)
      goto LABEL_17;
    return 0;
  }
  if (((*(_DWORD *)(v11 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
    return 0;
LABEL_17:
  v15 = sub_22EF5CDF0(a1, *v9);
  if (v15 != sub_22EF5CDF0(a1, *v10))
    return 0;
  return a3;
}

uint64_t sub_22EF71C54(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  char v7;
  uint64_t v8;
  const llvm::APInt *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned __int8 v16;

  v4 = result;
  if (a3)
  {
    LOBYTE(v14) = 0;
    v16 = 0;
    result = *(_QWORD *)(a3 + 40);
    if (!result)
      goto LABEL_13;
    sub_22F00905C(result, a2, 0, (uint64_t)&v11);
    result = sub_22E54C490((uint64_t)&v14, (uint64_t)&v11);
    v5 = v16;
    if ((_BYTE)v13)
    {
      if (v12 >= 0x41)
      {
        result = v11;
        if (v11)
          result = MEMORY[0x2348A0E84](v11, 0x1000C8000313F17);
      }
    }
    if (v5)
    {
      LOBYTE(v11) = 1;
      v6 = v15;
      v13 = v15;
      if (v15 > 0x40)
      {
        result = llvm::APInt::initSlowCase((llvm::APInt *)&v12, (const llvm::APInt *)&v14);
        v7 = v11;
        v6 = v13;
        v8 = v12;
      }
      else
      {
        v7 = 1;
        v8 = v14;
      }
      *(_BYTE *)v4 = v7;
      *(_DWORD *)(v4 + 16) = v6;
      *(_QWORD *)(v4 + 8) = v8;
    }
    else
    {
LABEL_13:
      *(_BYTE *)v4 = 0;
      *(_DWORD *)(v4 + 16) = 1;
      *(_QWORD *)(v4 + 8) = 0;
    }
    if (v16 && v15 >= 0x41)
    {
      result = v14;
      if (v14)
        return MEMORY[0x2348A0E84](v14, 0x1000C8000313F17);
    }
  }
  else if (a4)
  {
    v9 = (const llvm::APInt *)(a4 + 40);
    *(_BYTE *)result = 1;
    result += 8;
    v10 = *(_DWORD *)(a4 + 48);
    *(_DWORD *)(v4 + 16) = v10;
    if (v10 > 0x40)
      return llvm::APInt::initSlowCase((llvm::APInt *)result, v9);
    else
      *(_QWORD *)result = *(_QWORD *)v9;
  }
  else
  {
    *(_BYTE *)result = 0;
    *(_DWORD *)(result + 16) = 1;
    *(_QWORD *)(result + 8) = 0;
  }
  return result;
}

uint64_t sub_22EF71DC4(llvm::APInt *a1, llvm::APInt *this)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  v3 = *((_DWORD *)a1 + 2);
  v4 = *((_DWORD *)this + 2);
  if (v3 == v4)
  {
    if (v3 > 0x40)
      return llvm::APInt::equalSlowCase(a1, this);
    v5 = *(_QWORD *)a1;
    return v5 == *(_QWORD *)this;
  }
  if (v3 > v4)
  {
    llvm::APInt::zext(this);
    if (*((_DWORD *)a1 + 2) > 0x40u)
      v8 = llvm::APInt::equalSlowCase(a1, (const llvm::APInt *)&v9);
    else
      v8 = *(_QWORD *)a1 == v9;
    if (v10 < 0x41)
      return v8;
    goto LABEL_13;
  }
  llvm::APInt::zext(a1);
  if (v10 > 0x40)
  {
    v8 = llvm::APInt::equalSlowCase((llvm::APInt *)&v9, this);
LABEL_13:
    if (v9)
      MEMORY[0x2348A0E84](v9, 0x1000C8000313F17);
    return v8;
  }
  v5 = v9;
  return v5 == *(_QWORD *)this;
}

unint64_t sub_22EF71EC8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  int v30;
  int v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int128 v40[5];

  v3 = a2;
  v4 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v6 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8);
  v8 = v7 | a3 & 7;
  if ((v5 | a2 & 7) == v8)
    return v3;
  v11 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
  v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if ((v12 - 25) > 1)
  {
    if ((v5 & 8) != 0)
    {
      v24 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      v23 = HIDWORD(*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 0x18));
    }
    else
    {
      LODWORD(v23) = 0;
      v24 = 0;
    }
    v25 = v24 | v5 & 7 | a2 & 7;
    if ((v7 & 8) != 0)
    {
      v27 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      v26 = HIDWORD(*(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x18));
    }
    else
    {
      LODWORD(v26) = 0;
      v27 = 0;
    }
    v28 = v27 | v8 & 7;
    if (v25 == v28 && (_DWORD)v23 == (_DWORD)v26)
    {
      result = 0;
      if (v12 == 32
        && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) == 32)
      {
        v33 = *v4;
        if (!*v4 || *(_BYTE *)(v33 + 16) != 32)
          v33 = sub_22F10CF48(v33);
        v34 = *(_QWORD *)(v33 + 32);
        v35 = *v6;
        if (!*v6 || *(_BYTE *)(v35 + 16) != 32)
          v35 = sub_22F10CF48(v35);
        v36 = *(_QWORD *)(v35 + 32);
        v37 = sub_22EF71EC8(a1, v34, v36);
        if (v37 == v34)
          return v3;
        v3 = a3;
        if (v37 == v36)
          return v3;
        return 0;
      }
    }
    else
    {
      if (((v28 ^ v25) & 0xFFFFF807) != 0)
        return 0;
      v30 = (v25 >> 4) & 3;
      v31 = (v28 >> 4) & 3;
      if (v30 == 1 || v31 == 1)
        return 0;
      result = a2;
      if (v30 != 2)
      {
        if (v31 == 2)
          return a3;
        else
          return 0;
      }
    }
  }
  else
  {
    v13 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 > 1)
      return 0;
    v14 = *(_QWORD *)(v11 + 24);
    v15 = *(_QWORD *)(v13 + 24);
    v16 = sub_22EF71EC8(a1, v15, v14);
    if (v16 < 0x10)
      return 0;
    if (v16 != v15 && v16 != v14)
      return 0;
    v18 = *v4;
    if (*v4 && *(unsigned __int8 *)(v18 + 16) - 27 > 0xFFFFFFFD
      || (result = sub_22F10CF48(*v4), (v18 = result) != 0))
    {
      sub_22E4913B4(v18, (uint64_t)v40);
      v19 = *v4;
      v20 = *(unsigned __int8 *)(*v4 + 16);
      if (v20 == 39)
        goto LABEL_15;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
      {
        v39 = *v4;
        v19 = sub_22F10CF48(v19);
        if (v19)
        {
LABEL_15:
          v19 = *(_QWORD *)(*(_QWORD *)(v19 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v19)
            v21 = *(unsigned __int8 *)(v19 + 16) - 27 > 0xFFFFFFFD;
          else
            v21 = 0;
          if (v21)
            goto LABEL_53;
LABEL_55:
          if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 > 1
            || (v19 = sub_22F10CF48(v19)) == 0)
          {
            LOWORD(v38) = 0;
            goto LABEL_54;
          }
LABEL_53:
          v38 = *(_DWORD *)(v19 + 16) >> 19;
LABEL_54:
          LOWORD(v40[0]) = v38;
          return sub_22EF63D8C(a1, v14, (uint64_t *)(v18 + 40), (unsigned __int16)(*(_QWORD *)(v18 + 16) >> 38), v40, 0);
        }
        v19 = v39;
        v20 = *(unsigned __int8 *)(v39 + 16);
      }
      if ((v20 - 27) > 0xFFFFFFFD)
        goto LABEL_53;
      goto LABEL_55;
    }
  }
  return result;
}

unint64_t sub_22EF721C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = a2 & 0xFFFFFFFFFFFFFFF0;
  v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v4 && *(_BYTE *)(v4 + 16) == 56)
    goto LABEL_5;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 56)
  {
    v4 = sub_22F10CF48(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
    if (v4)
    {
LABEL_5:
      v5 = sub_22EF721C8(a1, *(_QWORD *)(v4 + 32));
      return sub_22EF63724(a1, v5, *(unsigned int *)(v4 + 20), (*(_DWORD *)(v4 + 16) >> 19) & 0xF);
    }
    v4 = *(_QWORD *)v3;
  }
  v7 = sub_22E3E4B64(v4);
  if (v7)
  {
    v12 = v7;
    v13 = sub_22EF721C8(a1, *(_QWORD *)(v7 + 32));
    return sub_22F36B7E4(a1, v13, *(unsigned int *)(v12 + 20), (*(_DWORD *)(v12 + 16) >> 19) & 0xF);
  }
  else
  {
    v8 = *(_QWORD *)v3;
    if (!*(_QWORD *)v3 || *(_BYTE *)(v8 + 16) != 9)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0);
      v10 = *(unsigned __int8 *)(v9 + 16);
      if (v10 != 9)
        goto LABEL_13;
      v8 = sub_22F10CF48(v8);
      if (!v8)
      {
        v8 = *(_QWORD *)v3;
        v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) & 0xFFFFFFFFFFFFFFF0);
        v10 = *(unsigned __int8 *)(v9 + 16);
LABEL_13:
        if (v10 == 44)
        {
          v11 = sub_22F114198(*(_QWORD *)(v9 + 24));
          v8 = *(_QWORD *)(sub_22E496830(v11) & 0xFFFFFFFFFFFFFFF0);
        }
        __asm { BR              X10 }
      }
    }
    return sub_22F36C2DC(a1, 0, (*(_DWORD *)(v8 + 32) >> 1) & 0xFFFFFF);
  }
}

uint64_t sub_22EF72344()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16616);
}

uint64_t sub_22EF7234C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16488);
}

uint64_t sub_22EF72354()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16664);
}

uint64_t sub_22EF7235C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16704);
}

uint64_t sub_22EF72364()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16416);
}

uint64_t sub_22EF7236C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16472);
}

uint64_t sub_22EF72374()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16480);
}

uint64_t sub_22EF7237C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16496);
}

uint64_t sub_22EF72384()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16504);
}

uint64_t sub_22EF7238C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16744);
}

uint64_t sub_22EF72394()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16752);
}

uint64_t sub_22EF7239C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16600);
}

uint64_t sub_22EF723A4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16608);
}

uint64_t sub_22EF723AC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16648);
}

uint64_t sub_22EF723B4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16656);
}

uint64_t sub_22EF723BC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16696);
}

uint64_t sub_22EF723C4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16712);
}

void sub_22EF723E4(_QWORD *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;

  *a4 = 0;
  v4 = (*a1)++;
  __asm { BR              X12 }
}

void sub_22EF72458()
{
  char v0;
  _BYTE *v1;

  *v1 = v0;
  JUMPOUT(0x22EF7242CLL);
}

void sub_22EF72464()
{
  JUMPOUT(0x22EF7242CLL);
}

void sub_22EF724E0()
{
  JUMPOUT(0x22EF7242CLL);
}

void sub_22EF724EC()
{
  JUMPOUT(0x22EF7242CLL);
}

uint64_t sub_22EF72514(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__endptr, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  char **v20;
  uint64_t *v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  int v28;
  const char *v29;
  unint64_t v30;
  char *v31;
  int v32;
  char *v34;

  v24 = v21[2070];
  if (!(_DWORD)v22)
    return v24;
  while (2)
  {
    v25 = *v20;
    while (1)
    {
      *v20 = ++v25;
      v26 = *(v25 - 1);
      if (v26 <= 67)
        break;
      if (v26 == 68)
      {
        v27 = 4;
      }
      else
      {
        if (v26 != 82)
          goto LABEL_23;
        v27 = 2;
      }
LABEL_10:
      v24 |= v27;
    }
    if (v26 == 67)
    {
      v27 = 1;
      goto LABEL_10;
    }
    if (v26 == 38 || v26 == 42)
    {
      v28 = *v25;
      v34 = 0;
      if (v28 == 95)
        v29 = v25 + 1;
      else
        v29 = v25;
      v30 = strtoul(v29, &v34, 10);
      v31 = v34;
      if (v34 != *v20)
      {
        v32 = v30;
        if (v28 != 95)
          v32 = sub_22F36F850(v21[250], v21[1886], v30);
        v24 = sub_22EF5DD84((uint64_t)v21, v24, v32);
        *v20 = v31;
      }
      if (v26 == 42)
      {
        v22 = v22 & 0xFFFFFFFF00000000 | v23 & 0xE0;
        v24 = sub_22EF5B848((uint64_t)v21, v24, v22);
        v23 &= 0xFFFFFFE0;
      }
      else
      {
        v24 = sub_22EF5F8C4((uint64_t)v21, v24, 1);
      }
      continue;
    }
    break;
  }
LABEL_23:
  *v20 = v25 - 1;
  return v24;
}

void sub_22EF729CC()
{
  uint64_t v0;

  sub_22F36E228(v0);
  JUMPOUT(0x22EF7269CLL);
}

void sub_22EF729D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__endptr)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  __endptr = 0;
  v15 = strtoul((const char *)(v10 + 1), &__endptr, 10);
  *v11 = __endptr;
  sub_22EF723E4(v11, v12, v14, v13);
  sub_22F36B7E4(v12, v16, v15, 0);
  JUMPOUT(0x22EF726ECLL);
}

void sub_22EF72A28()
{
  uint64_t v0;

  sub_22F36E1B8(v0);
  JUMPOUT(0x22EF7269CLL);
}

void sub_22EF72A34()
{
  uint64_t v0;

  sub_22F36DB14(v0);
  JUMPOUT(0x22EF726ECLL);
}

void sub_22EF72A40()
{
  _QWORD *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;

  sub_22EF723E4(v0, v1, v3, v2);
  sub_22F369F4C(v1, v4);
  JUMPOUT(0x22EF726ECLL);
}

void sub_22EF72A68()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72A70()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72A78()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72A80()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72A88()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72A90()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72A98()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72AA0()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72AA8()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72AB0()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72AB8()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72AC0()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72AC8()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72AD0()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72AD8()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72AE0()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72AE8()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72AF0()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72AF8()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72B00()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72B08()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72B10()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72B18()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72B20()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72B28()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72B30()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72B38()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72B40()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72B48()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72B50()
{
  JUMPOUT(0x22EF726F0);
}

void sub_22EF72B58()
{
  JUMPOUT(0x22EF726F0);
}

unint64_t sub_22EF72B64(uint64_t a1, unsigned int a2, _DWORD *a3, _DWORD *a4)
{
  unint64_t v8;
  char **v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  char **v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v24;
  char **v25;
  int v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  unsigned __int16 v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;
  unsigned __int16 v47;
  char v48;
  char *v49;
  void *v50;
  uint64_t v51;
  _QWORD v52[10];

  v52[8] = *MEMORY[0x24BDAC8D0];
  v8 = a2;
  if (a2 > 0x7E7)
  {
    v28 = *(uint64_t **)(a1 + 15208);
    v29 = v28[1];
    if (v29 + 2024 <= (unint64_t)a2)
    {
      v30 = a2 - v29 - 2024;
      v31 = v28[2];
    }
    else
    {
      v30 = a2 - 2024;
      v31 = *v28;
    }
    v9 = (char **)(v31 + 48 * v30);
  }
  else
  {
    v9 = &(&off_24FAC8C40)[6 * a2];
  }
  v49 = v9[1];
  if (*v49)
  {
    v50 = v52;
    v51 = 0x800000000;
    v48 = 0;
    *a3 = 0;
    sub_22EF723E4(&v49, a1, (uint64_t)a3, &v48);
    if (*a3)
      goto LABEL_5;
    v13 = v10;
    while (1)
    {
      v14 = *v49;
      if (!*v49 || v14 == 46)
        break;
      sub_22EF723E4(&v49, a1, (uint64_t)a3, &v48);
      if (*a3)
        goto LABEL_5;
      v16 = v15;
      if (a4 && v48)
        *a4 |= 1 << v51;
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) & 0xFEu)
         - 2 <= 3)
        v16 = sub_22EF5F824(a1, v15);
      v17 = v51;
      if (v51 >= (unint64_t)HIDWORD(v51))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v17 = v51;
      }
      *((_QWORD *)v50 + v17) = v16;
      LODWORD(v51) = v51 + 1;
    }
    if (a2 == 733)
    {
LABEL_5:
      v11 = 0;
    }
    else
    {
      v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 15088) + 720))(*(_QWORD *)(a1 + 15088));
      v47 = v18;
      v38 = *(uint64_t **)(a1 + 15208);
      if (a2 > 0x7E7)
      {
        v32 = v38[1];
        if (v32 + 2024 <= v8)
        {
          v33 = a2 - v32 - 2024;
          v34 = v38[2];
        }
        else
        {
          v33 = a2 - 2024;
          v34 = *v38;
        }
        v19 = (char **)(v34 + 48 * v33);
      }
      else
      {
        v19 = &(&off_24FAC8C40)[6 * v8];
      }
      if (strchr(v19[2], 114))
      {
        v18 |= 0x20u;
        v47 = v18;
      }
      v20 = v51;
      v21 = *(uint64_t **)(a1 + 2000);
      v22 = *v21;
      v24 = v14 == 46 && (_DWORD)v51 == 0 && (*v21 & 0x108) == 0;
      if (v24 && (v21[1] & 0x200000000) == 0)
      {
        v27 = sub_22F369930(a1, v13, &v47);
      }
      else
      {
        v42 = 0;
        v41 = 0;
        v43 = 0u;
        v44 = 0u;
        v45 = 0u;
        v46 = 0;
        v39 = v18;
        v40 = v14 == 46;
        if ((v22 & 0x100) != 0)
        {
          if (a2 > 0x7E7)
          {
            v35 = v38[1];
            if (v35 + 2024 <= v8)
            {
              v36 = a2 - v35 - 2024;
              v37 = v38[2];
            }
            else
            {
              v36 = a2 - 2024;
              v37 = *v38;
            }
            v25 = (char **)(v37 + 48 * v36);
          }
          else
          {
            v25 = &(&off_24FAC8C40)[6 * v8];
          }
          if (strchr(v25[2], 110))
          {
            if ((v22 & 0x200) != 0)
              v26 = 5;
            else
              v26 = 1;
            HIDWORD(v42) = v26;
          }
        }
        v27 = sub_22EF63D8C(a1, v13, (uint64_t *)v50, v20, (__int128 *)&v39, 0);
      }
      v11 = v27;
    }
    if (v50 != v52)
      free(v50);
  }
  else
  {
    v11 = 0;
    *a3 = 1;
  }
  return v11;
}

uint64_t sub_22EF72F20(uint64_t a1, uint64_t a2, int a3, char a4)
{
  char v4;
  uint64_t result;

  v4 = a2;
  if (a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 15064) + 24))(*(_QWORD *)(a1 + 15064), a2);
  if ((a4 & 1) != 0)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 15088) + 720))(*(_QWORD *)(a1 + 15088));
  result = 0;
  switch((*(_DWORD *)(*(_QWORD *)(a1 + 2000) + 240) >> 10) & 7)
  {
    case 1:
      return result;
    case 2:
      if (!(*(unsigned int (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 15088) + 568))(*(_QWORD *)(a1 + 15088), "sse2", 4)|| (v4 & 1) != 0)
      {
        return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 15088) + 720))(*(_QWORD *)(a1 + 15088));
      }
      result = 2;
      break;
    case 3:
      if ((a2 & 1) != 0)
        return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 15088) + 720))(*(_QWORD *)(a1 + 15088));
      result = 1;
      break;
    case 4:
      if ((a2 & 1) != 0)
        return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 15088) + 720))(*(_QWORD *)(a1 + 15088));
      result = 4;
      break;
    case 5:
      if ((_DWORD)a2)
        return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 15088) + 720))(*(_QWORD *)(a1 + 15088));
      result = 8;
      break;
    default:
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 15088) + 720))(*(_QWORD *)(a1 + 15088));
  }
  return result;
}

uint64_t sub_22EF72FFC(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (sub_22EFB948C(a2) < 3)
  {
    v8 = 0;
  }
  else if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC && !sub_22E692064(a2))
  {
    v8 = 2;
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 144) & 6;
    v5 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
    if (v4 == 4 && v5 != 0)
    {
      v5 += 16;
      goto LABEL_35;
    }
    if (v4 == 2 && v5 != 0)
LABEL_35:
      __asm { BR              X10 }
    if ((*(_BYTE *)(a2 + 82) & 1) != 0)
    {
      if ((*(_BYTE *)(a1[250] + 1) & 1) == 0 && *(_DWORD *)(a1[1886] + 148) != 11)
      {
        if ((*(_BYTE *)(a2 + 29) & 1) == 0)
          goto LABEL_37;
        sub_22EFC8E88(a2);
        v15 = *((unsigned int *)v14 + 2);
        if ((_DWORD)v15)
        {
          v16 = 8 * v15;
          v17 = *v14;
          while (*(_WORD *)(*(_QWORD *)v17 + 32) != 155)
          {
            v17 += 8;
            v16 -= 8;
            if (!v16)
              goto LABEL_37;
          }
        }
        else
        {
          v17 = *v14;
        }
        if (v17 == *v14 + 8 * v15)
          goto LABEL_37;
      }
      if (!sub_22EA0E0E4(a2))
      {
        if (sub_22EFC129C(a2))
          v8 = 4;
        else
          v8 = 2;
      }
      else
      {
LABEL_37:
        if (sub_22F3AC620(a2))
          v8 = 3;
        else
          v8 = 1;
      }
    }
    else
    {
      v8 = 3;
    }
  }
  v9 = sub_22EF731D0((uint64_t)a1, a2, v8);
  v10 = a1[2006];
  if (v10)
  {
    v11 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v10 + 104))(v10, a2);
    if (v11)
    {
      if (v11 == 1 && (_DWORD)v9 == 2)
        return 4;
    }
    else
    {
      return 1;
    }
  }
  return v9;
}

uint64_t sub_22EF731D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!sub_22E49F808(a2))
  {
    if ((*(_BYTE *)(a2 + 29) & 1) == 0)
      goto LABEL_6;
    sub_22EFC8E88(a2);
    v10 = *((unsigned int *)v9 + 2);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      v12 = *v9;
      while (*(_WORD *)(*(_QWORD *)v12 + 32) != 155)
      {
        v12 += 8;
        v11 -= 8;
        if (!v11)
          goto LABEL_6;
      }
    }
    else
    {
      v12 = *v9;
    }
    if (v12 == *v9 + 8 * v10)
    {
LABEL_6:
      v7 = *(_QWORD *)(a1 + 2000);
      if ((*(_BYTE *)(v7 + 68) & 0x20) == 0 || (*(_WORD *)(v7 + 96) & 0x80) == 0)
        return a3;
      v8 = sub_22E462B18(a2);
      if ((a3 & 0xFFFFFFFD) != 0 || !v8)
      {
        if ((sub_22EF74E40(a1, a2) & 1) != 0)
          return 3;
        return a3;
      }
    }
    else if ((_DWORD)a3 != 2)
    {
      return a3;
    }
    return 4;
  }
  result = 1;
  if ((_DWORD)a3 != 2 && (_DWORD)a3 != 4)
    return a3;
  return result;
}

uint64_t sub_22EF732CC(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v36;

  v4 = sub_22EFB948C(a2);
  if (v4 < 3)
  {
LABEL_67:
    v15 = 0;
    goto LABEL_68;
  }
  v5 = *(_BYTE *)(a2 + 96);
  v6 = v5 & 7;
  if (v6 != 2)
  {
    v7 = v5 & 0x18;
    if (v6 || v7 != 16)
      goto LABEL_56;
  }
  v9 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (v9 != 64 && v9 != 62)
  {
    v10 = *(_QWORD *)(a2 + 16);
    v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
    v12 = v10 & 0xFFFFFFFFFFFFFFF8;
    if ((v10 & 4) != 0)
      v12 = v11[1];
    v4 = sub_22EFCBB30(v12);
    v13 = *(_WORD *)(v4 + 8) & 0x7F;
    if (v13 == 16 || v13 == 83)
      goto LABEL_56;
    if ((v10 & 4) != 0)
      v11 = (_QWORD *)*v11;
    if (((_WORD)v11[1] & 0x7Eu) - 34 < 4)
    {
LABEL_56:
      if (*(_DWORD *)(a1[1886] + 148) != 11 || (*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
        goto LABEL_14;
      v25 = *(_QWORD *)(a2 + 16);
      v26 = v25 & 0xFFFFFFFFFFFFFFF8;
      if ((v25 & 4) != 0)
        v26 = *(_QWORD *)v26;
      if ((*(_WORD *)(v26 + 8) & 0x7Eu) - 34 > 3)
        goto LABEL_14;
      v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v28 = *(_DWORD *)(v27 + 16);
      if (v27)
        v29 = v28 == 11;
      else
        v29 = 0;
      if (v29)
      {
        if (((*(_DWORD *)(v27 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
          goto LABEL_14;
      }
      else
      {
        if (v27 && v28 == 44)
        {
          v4 = sub_22F114198(*(_QWORD *)(v27 + 24));
          if ((*(_BYTE *)(v4 + 74) & 1) != 0 || *(_QWORD *)(v4 + 128) >= 8uLL)
            goto LABEL_81;
LABEL_14:
          if ((*(_BYTE *)(a2 + 29) & 1) == 0
            || (sub_22EFC8E88(a2),
                v4 = sub_22F271604(*(uint64_t **)v30, (uint64_t *)(*(_QWORD *)v30 + 8 * *(unsigned int *)(v30 + 8))),
                (_DWORD)v4))
          {
            sub_22EF6AE34(v4, a2);
            v14 = (char *)&loc_22EF733A4 + 4 * byte_22F49EE33[sub_22EFBC2B0(a2)];
            __asm { BR              X10 }
          }
          goto LABEL_67;
        }
        if (v28 != 9)
          goto LABEL_14;
      }
LABEL_81:
      v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 80) + 24))(*(_QWORD *)(a2 + 80));
      if ((v4 & 1) == 0)
      {
        v36 = *(_QWORD *)(a2 + 80);
        if ((!v36 || (*(_DWORD *)(v36 + 28) & 0x7F) != 0x40 || (*(_DWORD *)(v36 + 96) & 0x600u) - 1536 <= 0xFFFFFBFF)
          && *(_QWORD *)(v36 + 88) > 7uLL)
        {
          goto LABEL_16;
        }
      }
      goto LABEL_14;
    }
  }
  v16 = sub_22EFC8010(a2);
  if (!v16)
  {
LABEL_16:
    v15 = 2;
    goto LABEL_68;
  }
  v15 = 2;
  while (1)
  {
    v17 = *(_WORD *)(v16 + 8);
    if ((v17 & 0x7Eu) - 52 < 6)
      break;
    v18 = v17 & 0x7F;
    v19 = -40;
    if (v18 > 70)
    {
      if (v18 != 83)
      {
        if (v18 == 71)
        {
          v19 = -56;
        }
        else if (v18 != 81)
        {
          goto LABEL_35;
        }
      }
    }
    else
    {
      if (v18 > 0x18)
        goto LABEL_34;
      if (v18 == 16)
        goto LABEL_27;
      if (((1 << v18) & 0x1066) != 0)
        goto LABEL_41;
      if (v18 == 24)
      {
LABEL_27:
        v19 = -48;
      }
      else
      {
LABEL_34:
        if (v18 != 70)
        {
LABEL_35:
          v20 = v18 - 52;
          if ((v18 - 33) >= 5)
            v21 = -48;
          else
            v21 = -64;
          if (v20 >= 6)
            v19 = v21;
          else
            v19 = -72;
          goto LABEL_41;
        }
        v19 = -64;
      }
    }
LABEL_41:
    v22 = *(_QWORD *)(v16 + v19 + 16);
    v16 = v22 & 0xFFFFFFFFFFFFFFF8;
    if ((v22 & 4) != 0)
      v16 = *(_QWORD *)(v16 + 8);
    if (!v16)
      goto LABEL_68;
  }
  v23 = sub_22EF72FFC(a1, v16 - 72);
  if (v23 == 4)
    v24 = 2;
  else
    v24 = v23;
  if (v23 == 1)
    v15 = 2;
  else
    v15 = v24;
LABEL_68:
  v31 = sub_22EF731D0((uint64_t)a1, a2, v15);
  v32 = a1[2006];
  if (v32)
  {
    v33 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v32 + 104))(v32, a2);
    if (v33)
    {
      if (v33 == 1 && (_DWORD)v31 == 2)
        return 4;
    }
    else
    {
      return 1;
    }
  }
  return v31;
}

uint64_t sub_22EF736B8(_QWORD *a1, unint64_t a2)
{
  int v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  int v10;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int i;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int j;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v4 = *(_DWORD *)(a2 + 28);
  v5 = v4 & 0x7F;
  if (a2 && (v5 - 67) >= 0xFFFFFFF9)
  {
    result = 0;
    if (v5 != 64 && v5 != 62)
    {
      v7 = *(_QWORD *)(a2 + 16);
      v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
      v9 = v7 & 0xFFFFFFFFFFFFFFF8;
      if ((v7 & 4) != 0)
        v9 = v8[1];
      v10 = *(_WORD *)(sub_22EFCBB30(v9) + 8) & 0x7F;
      if (v10 != 16 && v10 != 83)
      {
        if ((v7 & 4) != 0)
          v8 = (_QWORD *)*v8;
        if (((_WORD)v8[1] & 0x7Eu) - 34 > 3)
          return 0;
      }
      if ((*(_BYTE *)(a2 + 96) & 7) == 5 || sub_22EFB6870(a2) || (*(_DWORD *)(a2 + 28) & 0x7F) == 0x42)
        return 0;
      goto LABEL_18;
    }
  }
  else
  {
    if (a2 && (v4 & 0x7Eu) - 58 > 0xFFFFFFF9)
    {
      if (*(_QWORD *)(a2 + 144) >= 8uLL && (*(_QWORD *)(a2 + 144) & 6) == 0)
        return 0;
LABEL_18:
      v12 = *(_QWORD *)(a2 + 16);
      v13 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
      if ((v12 & 4) != 0)
        v13 = (_QWORD *)*v13;
      if ((sub_22EFC7ADC((unint64_t)v13) & 1) != 0 || sub_22E4E9AA8(a2))
        return 0;
      if (sub_22E6314F8(a2) || sub_22E4671B0(a2))
        return 1;
      v16 = *(_DWORD *)(a2 + 28);
      if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
      {
        v17 = *(_QWORD *)(a2 + 80);
        if ((v17 & 0x8000000) != 0)
        {
          if ((v17 & 0x20000000) != 0)
            goto LABEL_41;
        }
        else if (*(_QWORD *)(a2 + 128) | *(_QWORD *)(a2 + 80) & 0x20000000)
        {
LABEL_41:
          if (!sub_22EA27224(a2) && !sub_22EA27350(a2))
          {
            if (((1 << *(_DWORD *)(a1[1886] + 148)) & 0xE65) == 0 || (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
              return (int)sub_22EF72FFC(a1, a2) > 2;
            v18 = *(_WORD *)(a2 + 80) & 0x7F;
            v19 = -40;
            if (v18 > 0x46)
            {
              switch(v18)
              {
                case 'S':
                  goto LABEL_154;
                case 'G':
                  v19 = -56;
                  goto LABEL_154;
                case 'Q':
LABEL_154:
                  v58 = *(_QWORD *)(a2 + 72 + v19 + 16);
                  v59 = (_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF8);
                  if ((v58 & 4) != 0)
                    v59 = (_QWORD *)*v59;
                  if (v59)
                    v60 = (uint64_t)(v59 - 8);
                  else
                    v60 = 0;
                  if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 24))(a2))
                  {
                    if (sub_22E463414(v60))
                    {
                      v61 = sub_22F0CB980((uint64_t)a1, v60);
                      if (v61)
                      {
                        v62 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v61 + 32))(v61);
                        if (v62 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2))
                          return 1;
                      }
                    }
                  }
                  return (int)sub_22EF72FFC(a1, a2) > 2;
              }
            }
            else
            {
              if (v18 <= 0x18)
              {
                if (v18 == 16)
                {
LABEL_48:
                  v19 = -48;
                  goto LABEL_154;
                }
                if (((1 << v18) & 0x1066) != 0)
                  goto LABEL_154;
                if (v18 == 24)
                  goto LABEL_48;
              }
              if (v18 == 70)
              {
LABEL_152:
                v19 = -64;
                goto LABEL_154;
              }
            }
            if (v18 - 52 >= 6)
            {
              if (v18 - 33 >= 5)
                goto LABEL_48;
              goto LABEL_152;
            }
            v19 = -72;
            goto LABEL_154;
          }
          return 1;
        }
        return sub_22EFC1480(a2);
      }
      if (*(_DWORD *)(a1[250] + 72))
      {
        sub_22EF95D10(a2);
        if (v20)
          return 1;
        v16 = *(_DWORD *)(a2 + 28);
      }
      if (!a2 || (v21 = v16 & 0x7F, v22 = a2, v21 != 83))
      {
        v23 = *(_QWORD *)(a2 + 16);
        v24 = v23 & 0xFFFFFFFFFFFFFFF8;
        if ((v23 & 4) != 0)
          v24 = *(_QWORD *)v24;
        for (i = *(_WORD *)(v24 + 8) & 0x7F; i != 83; i = *(_WORD *)(v24 + 8) & 0x7F)
        {
          v26 = -40;
          if (i > 70)
          {
            if (i == 71)
            {
              v26 = -56;
            }
            else if (i != 81)
            {
              goto LABEL_67;
            }
          }
          else
          {
            if (i > 0x18)
              goto LABEL_66;
            if (i == 16)
              goto LABEL_60;
            if (((1 << i) & 0x1066) != 0)
              goto LABEL_73;
            if (i == 24)
            {
LABEL_60:
              v26 = -48;
            }
            else
            {
LABEL_66:
              if (i != 70)
              {
LABEL_67:
                v27 = i - 52;
                if ((i - 33) >= 5)
                  v28 = -48;
                else
                  v28 = -64;
                if (v27 >= 6)
                  v26 = v28;
                else
                  v26 = -72;
                goto LABEL_73;
              }
              v26 = -64;
            }
          }
LABEL_73:
          v29 = *(_QWORD *)(v24 + v26 + 16);
          v24 = v29 & 0xFFFFFFFFFFFFFFF8;
          if ((v29 & 4) != 0)
            v24 = *(_QWORD *)v24;
        }
        v22 = v24 - 40;
      }
      if (!sub_22EFBBF74(a2, *(_QWORD *)(v22 + 88)))
      {
        if (*(_DWORD *)(a1[1886] + 148) != 11 || (*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
          return 0;
        v52 = *(_QWORD *)(a2 + 16);
        v53 = v52 & 0xFFFFFFFFFFFFFFF8;
        if ((v52 & 4) != 0)
          v53 = *(_QWORD *)v53;
        if ((*(_WORD *)(v53 + 8) & 0x7Eu) - 34 > 3)
          return 0;
        v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v55 = *(_DWORD *)(v54 + 16);
        if (v54)
          v56 = v55 == 11;
        else
          v56 = 0;
        if (v56)
        {
          if (((*(_DWORD *)(v54 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
            return 0;
        }
        else if (v54 && v55 == 44)
        {
          v57 = sub_22F114198(*(_QWORD *)(v54 + 24));
          if ((*(_BYTE *)(v57 + 74) & 1) == 0 && *(_QWORD *)(v57 + 128) < 8uLL)
            return 0;
        }
        else if (v55 != 9)
        {
          return 0;
        }
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 80) + 24))(*(_QWORD *)(a2 + 80)) & 1) != 0)
          return 0;
        v63 = *(_QWORD *)(a2 + 80);
        if (v63)
        {
          if ((*(_DWORD *)(v63 + 28) & 0x7F) == 0x40 && (*(_DWORD *)(v63 + 96) & 0x600u) - 1536 > 0xFFFFFBFF)
            return 0;
        }
        if (*(_QWORD *)(v63 + 88) < 8uLL)
          return 0;
      }
      v30 = sub_22EF732CC(a1, a2);
      if (v30 > 2)
        return 1;
      if (v30 != 1)
      {
        if (sub_22EFBEA2C(a2, (uint64_t)a1))
          return 1;
        v31 = sub_22EFBC5B4(a2);
        if (v31)
        {
          if (sub_22F0005B0(v31, (uint64_t)a1, 1, v32, v33, v34, v35, v36)
            && ((*(_BYTE *)(sub_22EFBC5B4(a2) + 2) & 1) != 0 || !sub_22EFBCF80(a2)))
          {
            return 1;
          }
        }
        v37 = *(_DWORD *)(a2 + 28);
        if (a2)
        {
          if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x3D)
          {
            v38 = *(unsigned int *)(a2 + 100);
            if ((_DWORD)v38)
            {
              v39 = a2 + 104;
              v40 = 8 * v38;
              do
              {
                v41 = *(unsigned __int8 **)(*(_QWORD *)v39 + 64);
                if (v41)
                {
                  v42 = sub_22EFFED0C(v41);
                  if (*v42 == 161 && *((_QWORD *)v42 + 2) && (sub_22EF736B8(a1) & 1) != 0)
                    return 1;
                }
                v39 += 8;
                v40 -= 8;
              }
              while (v40);
              v37 = *(_DWORD *)(a2 + 28);
            }
          }
        }
        if ((v37 & 0x100) == 0)
          return 0;
        sub_22EFC8E88(a2);
        if (sub_22E54E894(*(_QWORD *)v43, *(_QWORD *)v43 + 8 * *(unsigned int *)(v43 + 8)))
          return 0;
        if (!a2 || (v44 = a2, (*(_DWORD *)(a2 + 28) & 0x7F) != 0x53))
        {
          v45 = *(_QWORD *)(a2 + 16);
          v46 = v45 & 0xFFFFFFFFFFFFFFF8;
          if ((v45 & 4) != 0)
            v46 = *(_QWORD *)v46;
          for (j = *(_WORD *)(v46 + 8) & 0x7F; j != 83; j = *(_WORD *)(v46 + 8) & 0x7F)
          {
            v48 = -40;
            if (j > 70)
            {
              if (j == 71)
              {
                v48 = -56;
              }
              else if (j != 81)
              {
                goto LABEL_115;
              }
            }
            else
            {
              if (j > 0x18)
                goto LABEL_114;
              if (j == 16)
                goto LABEL_108;
              if (((1 << j) & 0x1066) != 0)
                goto LABEL_121;
              if (j == 24)
              {
LABEL_108:
                v48 = -48;
              }
              else
              {
LABEL_114:
                if (j != 70)
                {
LABEL_115:
                  v49 = j - 52;
                  if ((j - 33) >= 5)
                    v50 = -48;
                  else
                    v50 = -64;
                  if (v49 >= 6)
                    v48 = v50;
                  else
                    v48 = -72;
                  goto LABEL_121;
                }
                v48 = -64;
              }
            }
LABEL_121:
            v51 = *(_QWORD *)(v46 + v48 + 16);
            v46 = v51 & 0xFFFFFFFFFFFFFFF8;
            if ((v51 & 4) != 0)
              v46 = *(_QWORD *)v46;
          }
          v44 = v46 - 40;
        }
        return sub_22EFBBF74(a2, *(_QWORD *)(v44 + 88)) == 2;
      }
      return 0;
    }
    result = 1;
    switch(v4 & 0x7F)
    {
      case 'F':
      case 'G':
      case 'K':
      case 'M':
        v14 = *(_QWORD *)(a2 + 16);
        v15 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF8);
        if ((v14 & 4) != 0)
          v15 = (_QWORD *)*v15;
        result = sub_22EFC7ADC((unint64_t)v15) ^ 1;
        break;
      case 'H':
      case 'I':
      case 'J':
      case 'N':
        return 0;
      case 'L':
      case 'O':
      case 'P':
        return result;
      default:
        if (v5 != 10)
          return 0;
        break;
    }
  }
  return result;
}

uint64_t sub_22EF73E64(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t result;
  unint64_t *v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  llvm **v15;
  unsigned int v16;
  llvm **v17;
  uint64_t v18;
  _BYTE v19[24];
  uint64_t v20;
  llvm *v21[2];
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v20 = 1;
  *(int64x2_t *)v21 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v22 = *(_OWORD *)v21;
  v6 = (_QWORD *)sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 112) + 104), *(_QWORD *)(a2 + 112));
  v7 = v6[2];
  v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 4) != 0)
    v8 = (_QWORD *)*v8;
  v9 = sub_22EFCBB30((unint64_t)v8);
  for (result = sub_22EFCE144(v9, v6[5]); result; result = v11[1])
  {
    v11 = (unint64_t *)(result & 0xFFFFFFFFFFFFFFF8);
    v12 = (result & 0xFFFFFFFFFFFFFFF8) == 0 || (result & 4) == 0;
    v13 = result & 0xFFFFFFFFFFFFFFF8;
    if (!v12)
      v13 = *v11;
    if (!v13 || (*(_DWORD *)(v13 + 28) & 0x7Eu) - 58 <= 0xFFFFFFF9)
      v13 = *(_QWORD *)(v13 + 48);
    result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v13 + 112) + 104), *(_QWORD *)(v13 + 112));
    v18 = result;
    if (result)
    {
      v14 = result;
      if ((*(_QWORD *)((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(result + 48) & 7) == (*(_QWORD *)((v6[6] & 0xFFFFFFFFFFFFFFF0) + 8) | v6[6] & 7))
      {
        if ((v20 & 1) != 0)
          v15 = v21;
        else
          v15 = (llvm **)v21[0];
        v16 = v21[1];
        if ((v20 & 1) != 0)
          v16 = 4;
        v17 = &v15[v16];
        result = (uint64_t)sub_22F36EE94((uint64_t)&v20, result);
        if (v17 == (llvm **)result)
        {
          sub_22F32CC38((uint64_t)v19, (uint64_t)&v20, &v18);
          result = a3(a4, v14);
        }
      }
    }
    if (v12)
      break;
  }
  if ((v20 & 1) == 0)
    return llvm::deallocate_buffer(v21[0], (void *)(8 * LODWORD(v21[1])));
  return result;
}

uint64_t sub_22EF7402C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v8 = 0;
  v9 = v3;
  if (sub_22EF7922C((uint64_t *)a1, &v9, &v8))
  {
    v6 = v8;
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned int *)(a1 + 16);
    v6 = *(_QWORD *)a1 + 16 * v5;
  }
  if (v6 == v4 + 16 * v5)
    return *(_QWORD *)(a1 + 32);
  else
    return *(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(v6 + 8);
}

uint64_t sub_22EF740A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v8 = 0;
  v9 = v3;
  if (sub_22F25AFD8((uint64_t *)a1, &v9, &v8))
  {
    v6 = v8;
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned int *)(a1 + 16);
    v6 = *(_QWORD *)a1 + 16 * v5;
  }
  if (v6 == v4 + 16 * v5)
    return *(_QWORD *)(a1 + 32);
  else
    return *(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(v6 + 8);
}

unint64_t sub_22EF7411C(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unsigned int v10;

  v5 = *(_QWORD *)(a1 + 2000);
  if ((*(_BYTE *)(v5 + 1) & 1) != 0 || (*(_QWORD *)(v5 + 8) & 0x10000000000) != 0)
    a2 |= 1uLL;
  v6 = sub_22EF64524(a1, a2);
  v10 = 32;
  v9 = (a3 + 1);
  v7 = sub_22EF5FE30(a1, v6, (const llvm::APInt *)&v9, 0, 0, 0);
  if (v10 >= 0x41 && v9)
    MEMORY[0x2348A0E84](v9, 0x1000C8000313F17);
  return v7;
}

uint64_t sub_22EF741C8(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(*(_QWORD *)(sub_22F10CF48(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0)) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = (*(_DWORD *)(v4 + 16) & 0xFF800FF) == 114294795;
  else
    v5 = 0;
  if (!v5 && (v6 = *(_QWORD *)((sub_22F10ACF8(*v3) & 0xFFFFFFFFFFFFFFF0) + 8), (v6 & 8) != 0))
    v7 = *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
  else
    v7 = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 15088) + 40))(*(_QWORD *)(a1 + 15088), v7);
}

uint64_t sub_22EF74250(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  BOOL v4;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v3 = *(_DWORD *)(v2 + 16);
  if (v2)
    v4 = *(_DWORD *)(v2 + 16) == 11;
  else
    v4 = 0;
  if (v4 && ((v3 >> 19) & 0x1FE) - 198 < 0xC)
    return a2;
  else
    return ((uint64_t (*)(void))((char *)&loc_22EF742AC + 4 * byte_22F49EE48[((v3 >> 19) & 0x1FF) - 186]))();
}

uint64_t sub_22EF74318(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  unsigned __int16 v9;
  int v10;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  char v16;
  unsigned __int16 v17;
  int v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;

  v4 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_DWORD *)(v5 + 16);
  if (v5)
    v7 = v6 == 11;
  else
    v7 = 0;
  if (v7)
  {
    if (((*(_DWORD *)(v5 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_17;
  }
  else if (v5 && v6 == 44)
  {
    v8 = sub_22F114198(*(_QWORD *)(v5 + 24));
    if ((*(_BYTE *)(v8 + 74) & 1) == 0 && *(_QWORD *)(v8 + 128) <= 7uLL
      || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v5 + 24)) + 76) & 0x80) != 0)
    {
LABEL_17:
      v12 = *(_QWORD *)(*(_QWORD *)(*v4 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v12)
        v13 = *(_DWORD *)(v12 + 16) == 11;
      else
        v13 = 0;
      if (v13)
      {
        v15 = (*(_DWORD *)(v12 + 16) >> 19) & 0x1FF;
        v16 = (*(_DWORD *)(v12 + 16) >> 19) + 70;
        v14 = (v15 - 186) < 0xF && ((0x71C7u >> v16) & 1) != 0 || (v15 - 204) < 3;
      }
      else
      {
        v14 = 0;
      }
      v17 = sub_22EF5CDF0(a1, *v4);
      v18 = sub_22F36F89C(a1, a2);
      v19 = *(_QWORD *)(*(_QWORD *)(*v4 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v19)
        v20 = *(_DWORD *)(v19 + 16) == 11;
      else
        v20 = 0;
      if (v20)
      {
        v21 = (((*(_DWORD *)(v19 + 16) >> 19) & 0x1FEu) - 198 < 0xC) << 30;
        if (!v14)
          goto LABEL_31;
      }
      else
      {
        v21 = 0;
        if (!v14)
        {
LABEL_31:
          v22 = 0;
          v23 = (*(_BYTE *)(*(_QWORD *)(a1 + 15088) + *(_QWORD *)(**(_QWORD **)(a1 + 15088) - 24) + 36) != 0) << 31;
          return v22 | v21 | v23 | v17 | (v18 << 16);
        }
      }
      v23 = 0;
      v22 = 0x20000000;
      return v22 | v21 | v23 | v17 | (v18 << 16);
    }
  }
  else if (v6 != 9)
  {
    goto LABEL_17;
  }
  v9 = sub_22EF6A330(a1, a2);
  if (sub_22F110930(*v4))
    v10 = 0x20000000;
  else
    v10 = 0;
  return v10 & 0xFFFF0000 | v9;
}

uint64_t sub_22EF744F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  BOOL v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  sub_22E639F38(*(_DWORD **)(a2 + 40), *(unsigned int *)(a2 + 36), (_OWORD *)a3);
  v5 = *(_QWORD *)a3;
  v6 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)a3 != v6)
  {
    while (1)
    {
      v7 = *(_BYTE *)(v5 + 23);
      v8 = v7 < 0;
      v9 = *(char **)v5;
      if (v7 >= 0)
        v9 = (char *)v5;
      v10 = v7 & 0x7F;
      if (v8)
        v10 = *(_QWORD *)(v5 + 8);
      v11 = (uint64_t)(v10 ? v9 + 1 : v9);
      v12 = v5 + 24;
      if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 15088) + 536))(*(_QWORD *)(a1 + 15088), v11, v10 - (v10 != 0)) & 1) == 0)break;
      v5 += 24;
      if (v12 == v6)
      {
        v5 = v6;
        return sub_22E80B318(a3, v5, *(__int128 **)(a3 + 8));
      }
    }
    while (v12 != v6)
    {
      v13 = *(_BYTE *)(v12 + 23);
      v14 = v13 < 0;
      v15 = *(_QWORD *)v12;
      if (v13 >= 0)
        v15 = v12;
      v16 = v13 & 0x7F;
      if (v14)
        v16 = *(_QWORD *)(v12 + 8);
      if (v16)
        v17 = v15 + 1;
      else
        v17 = v15;
      if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 15088) + 536))(*(_QWORD *)(a1 + 15088), v17, v16 - (v16 != 0)))
      {
        if (*(char *)(v5 + 23) < 0)
          operator delete(*(void **)v5);
        v18 = *(_OWORD *)v12;
        *(_QWORD *)(v5 + 16) = *(_QWORD *)(v12 + 16);
        *(_OWORD *)v5 = v18;
        v5 += 24;
        *(_BYTE *)(v12 + 23) = 0;
        *(_BYTE *)v12 = 0;
      }
      v12 += 24;
    }
  }
  return sub_22E80B318(a3, v5, *(__int128 **)(a3 + 8));
}

void sub_22EF74614(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void ***v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  const void **v32;
  const void **v33;
  uint64_t v34;
  void **v35;
  size_t v36;
  const void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char **v49;
  char *v50;
  unint64_t v51;
  BOOL v53;
  _OWORD *v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  _OWORD *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  __int128 v68;
  int64x2_t v69;
  char *v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  void **v76;
  uint64_t v77;
  void **v78;
  unint64_t v79;
  __int16 v80;
  void *__p[2];
  uint64_t v82;
  int64x2_t v83;
  char *v84;
  void *v85;
  int64x2_t v86;
  char *v87;
  char **v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 15088) + 16);
  v10 = *(char **)(v7 + 48);
  v8 = v7 + 48;
  v9 = v10;
  v11 = *(_BYTE *)(v8 + 23);
  if (v11 >= 0)
    v12 = (char *)v8;
  else
    v12 = v9;
  v13 = *(_QWORD *)(v8 + 8);
  if (v11 >= 0)
    v14 = v11 & 0x7F;
  else
    v14 = v13;
  v15 = a3 & 0xFFFFFFFFFFFFFFF8;
  if ((a3 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Eu) - 58 <= 0xFFFFFFF9)
  {
    if ((*(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7F) == 0x1D)
      v15 = *(_QWORD *)(v15 + 48);
    else
      v15 = 0;
  }
  if ((*(_BYTE *)(v15 + 29) & 1) != 0)
  {
    sub_22EFC8E88(v15);
    v17 = *(uint64_t **)v16;
    v18 = *(unsigned int *)(v16 + 8);
    v19 = *(uint64_t **)v16;
    if ((_DWORD)v18)
    {
      v20 = 8 * v18;
      v19 = *(uint64_t **)v16;
      while (*(_WORD *)(*v19 + 32) != 327)
      {
        ++v19;
        v20 -= 8;
        if (!v20)
          goto LABEL_24;
      }
    }
    if (v19 != &v17[v18])
    {
      do
      {
        v22 = *v17++;
        v21 = v22;
      }
      while (*(_WORD *)(v22 + 32) != 327);
      sub_22EF744F4(a1, v21, (uint64_t)&v85);
      sub_22E724FAC((char **)&v85, (uint64_t)v85, *(__int128 **)(*(_QWORD *)(*(_QWORD *)(a1 + 15088) + 16) + 176), *(__int128 **)(*(_QWORD *)(*(_QWORD *)(a1 + 15088) + 16) + 184), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 15088) + 16) + 184)- *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 15088) + 16) + 176)) >> 3));
      if (v88
        && (*(unsigned int (**)(_QWORD, char *))(**(_QWORD **)(a1 + 15088) + 480))(*(_QWORD *)(a1 + 15088), v87))
      {
        v12 = v87;
        v14 = (unint64_t)v88;
      }
      (*(void (**)(_QWORD, uint64_t *, _QWORD, char *, unint64_t, void **))(**(_QWORD **)(a1 + 15088)
                                                                                           + 440))(*(_QWORD *)(a1 + 15088), a2, *(_QWORD *)(*(_QWORD *)(a1 + 1992) + 8), v12, v14, &v85);
      v76 = &v85;
      v23 = &v76;
      goto LABEL_87;
    }
  }
LABEL_24:
  if ((*(_BYTE *)(v15 + 29) & 1) == 0)
    goto LABEL_44;
  sub_22EFC8E88(v15);
  v25 = *(uint64_t **)v24;
  v26 = *(unsigned int *)(v24 + 8);
  v27 = *(uint64_t **)v24;
  if ((_DWORD)v26)
  {
    v28 = 8 * v26;
    v27 = *(uint64_t **)v24;
    while (*(_WORD *)(*v27 + 32) != 128)
    {
      ++v27;
      v28 -= 8;
      if (!v28)
        goto LABEL_44;
    }
  }
  if (v27 == &v25[v26])
  {
LABEL_44:
    if ((*(_BYTE *)(v15 + 29) & 1) == 0)
      goto LABEL_64;
    sub_22EFC8E88(v15);
    v43 = *(uint64_t **)v42;
    v44 = *(unsigned int *)(v42 + 8);
    v45 = *(uint64_t **)v42;
    if ((_DWORD)v44)
    {
      v46 = 8 * v44;
      v45 = *(uint64_t **)v42;
      while (*(_WORD *)(*v45 + 32) != 328)
      {
        ++v45;
        v46 -= 8;
        if (!v46)
          goto LABEL_64;
      }
    }
    if (v45 == &v43[v44])
    {
LABEL_64:
      sub_22E6C7490((llvm::StringMapImpl *)&v73, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 15088) + 16) + 224));
      v57 = *a2;
      *a2 = v73;
      v73 = v57;
      v58 = a2[1];
      a2[1] = v74;
      v74 = v58;
      LODWORD(v57) = *((_DWORD *)a2 + 4);
      *((_DWORD *)a2 + 4) = v75;
      v75 = v57;
      sub_22E622C5C((uint64_t)&v73);
      return;
    }
    do
    {
      v48 = *v43++;
      v47 = v48;
    }
    while (*(_WORD *)(v48 + 32) != 328);
    v83 = 0uLL;
    v84 = 0;
    v49 = (char **)(*(_QWORD *)(v47 + 40) + 16 * a4);
    v50 = *v49;
    v51 = (unint64_t)v49[1];
    if (v51 < 5)
      goto LABEL_62;
    if (*(_DWORD *)v50 == 1751347809 && v50[4] == 61)
    {
      v12 = v50 + 5;
      v14 = v51 - 5;
    }
    else if (v51 != 7 || (*(_DWORD *)v50 == 1634100580 ? (v53 = *(_DWORD *)(v50 + 3) == 1953264993) : (v53 = 0), !v53))
    {
LABEL_62:
      v76 = (void **)"+";
      v77 = 1;
      v78 = (void **)v50;
      v79 = v51;
      v80 = 1285;
      llvm::Twine::str((llvm::Twine *)&v76);
      v54 = (_OWORD *)v83.i64[1];
      v55 = v84;
      if (v83.i64[1] >= (unint64_t)v84)
      {
        v59 = v14;
        v60 = v12;
        v61 = (_OWORD *)v83.i64[0];
        v62 = 0xAAAAAAAAAAAAAAABLL * ((v83.i64[1] - v83.i64[0]) >> 3);
        v63 = v62 + 1;
        if (v62 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_89:
          abort();
        if (0x5555555555555556 * ((uint64_t)&v84[-v83.i64[0]] >> 3) > v63)
          v63 = 0x5555555555555556 * ((uint64_t)&v84[-v83.i64[0]] >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v84[-v83.i64[0]] >> 3) >= 0x555555555555555)
          v64 = 0xAAAAAAAAAAAAAAALL;
        else
          v64 = v63;
        v88 = &v84;
        if (v64)
        {
          if (v64 > 0xAAAAAAAAAAAAAAALL)
            sub_22E3B3F8C();
          v65 = (char *)operator new(24 * v64);
        }
        else
        {
          v65 = 0;
        }
        v66 = &v65[24 * v62];
        *(_OWORD *)v66 = *(_OWORD *)__p;
        *((_QWORD *)v66 + 2) = v82;
        __p[1] = 0;
        v82 = 0;
        __p[0] = 0;
        if (v54 == v61)
        {
          v69 = vdupq_n_s64((unint64_t)v54);
          v67 = &v65[24 * v62];
        }
        else
        {
          v67 = &v65[24 * v62];
          do
          {
            v68 = *(_OWORD *)((char *)v54 - 24);
            *((_QWORD *)v67 - 1) = *((_QWORD *)v54 - 1);
            *(_OWORD *)(v67 - 24) = v68;
            v67 -= 24;
            *((_QWORD *)v54 - 2) = 0;
            *((_QWORD *)v54 - 1) = 0;
            *((_QWORD *)v54 - 3) = 0;
            v54 = (_OWORD *)((char *)v54 - 24);
          }
          while (v54 != v61);
          v69 = v83;
          v55 = v84;
        }
        v70 = v66 + 24;
        v83.i64[0] = (uint64_t)v67;
        v83.i64[1] = (uint64_t)(v66 + 24);
        v86 = v69;
        v84 = &v65[24 * v64];
        v87 = v55;
        v85 = (void *)v69.i64[0];
        sub_22E3B8B94((uint64_t)&v85);
        v83.i64[1] = (uint64_t)v70;
        v12 = v60;
        v14 = v59;
        if (SHIBYTE(v82) < 0)
          operator delete(__p[0]);
      }
      else
      {
        v56 = *(_OWORD *)__p;
        *(_QWORD *)(v83.i64[1] + 16) = v82;
        *v54 = v56;
        v83.i64[1] = (uint64_t)v54 + 24;
      }
    }
    (*(void (**)(_QWORD, uint64_t *, _QWORD, char *, unint64_t, int64x2_t *))(**(_QWORD **)(a1 + 15088)
                                                                                             + 440))(*(_QWORD *)(a1 + 15088), a2, *(_QWORD *)(*(_QWORD *)(a1 + 1992) + 8), v12, v14, &v83);
    v85 = &v83;
    v23 = (void ***)&v85;
LABEL_87:
    sub_22E3B3CC8(v23);
    return;
  }
  do
  {
    v30 = *v25++;
    v29 = v30;
  }
  while (*(_WORD *)(v30 + 32) != 128);
  v85 = &v86.u64[1];
  v86.i64[0] = 0x2000000000;
  v31 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(v29 + 40) + 8 * a4) + 16);
  (*(void (**)(_QWORD, unsigned int *, _QWORD, void **))(**(_QWORD **)(a1 + 15088) + 624))(*(_QWORD *)(a1 + 15088), v31 + 4, *v31, &v85);
  v32 = (const void **)v85;
  v77 = 0;
  v78 = 0;
  v76 = 0;
  if (!v86.i32[0])
  {
    v41 = 0;
    goto LABEL_66;
  }
  v71 = v14;
  v72 = v12;
  v33 = (const void **)((char *)v85 + 16 * v86.u32[0]);
  v34 = 3 * v86.u32[0];
  v35 = (void **)operator new(24 * v86.u32[0]);
  v76 = v35;
  v78 = &v35[v34];
  do
  {
    v36 = (size_t)v32[1];
    if (v36 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_89;
    v37 = *v32;
    if (v36 >= 0x17)
    {
      v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v36 | 7) != 0x17)
        v39 = v36 | 7;
      v40 = v39 + 1;
      v38 = operator new(v39 + 1);
      v35[1] = (void *)v36;
      v35[2] = (void *)(v40 | 0x8000000000000000);
      *v35 = v38;
LABEL_41:
      memmove(v38, v37, v36);
      goto LABEL_42;
    }
    *((_BYTE *)v35 + 23) = v36;
    v38 = v35;
    if (v36)
      goto LABEL_41;
LABEL_42:
    *((_BYTE *)v38 + v36) = 0;
    v35 += 3;
    v32 += 2;
  }
  while (v32 != v33);
  v77 = (uint64_t)v35;
  v41 = (char *)v76;
  v14 = v71;
  v12 = v72;
LABEL_66:
  sub_22E724FAC((char **)&v76, (uint64_t)v41, *(__int128 **)(*(_QWORD *)(*(_QWORD *)(a1 + 15088) + 16) + 176), *(__int128 **)(*(_QWORD *)(*(_QWORD *)(a1 + 15088) + 16) + 184), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 15088) + 16) + 184)- *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 15088) + 16) + 176)) >> 3));
  (*(void (**)(_QWORD, uint64_t *, _QWORD, char *, unint64_t, void ***))(**(_QWORD **)(a1 + 15088)
                                                                                        + 440))(*(_QWORD *)(a1 + 15088), a2, *(_QWORD *)(*(_QWORD *)(a1 + 1992) + 8), v12, v14, &v76);
  v83.i64[0] = (uint64_t)&v76;
  sub_22E3B3CC8((void ***)&v83);
  if (v85 != &v86.u64[1])
    free(v85);
}

uint64_t sub_22EF74CB8(uint64_t a1, uint64_t a2)
{
  _BOOL4 v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL4 v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t result;

  v3 = (*(_DWORD *)(a2 + 28) & 0x7Fu) - 60 <= 6 && (*(_BYTE *)(a2 + 96) & 7) == 2;
  if (!sub_22E466E5C(a2))
    goto LABEL_28;
  sub_22EFC8E88(a2);
  v5 = *v4;
  v6 = *((unsigned int *)v4 + 2);
  if ((_DWORD)v6 && *(_WORD *)(*v5 + 32) != 130)
  {
    v7 = 8 * v6 - 8;
    v8 = *v4;
    do
    {
      v9 = v8[1];
      ++v8;
      v7 -= 8;
    }
    while (*(_WORD *)(v9 + 32) != 130);
  }
  do
  {
    v10 = *v5++;
    v11 = *(unsigned __int16 *)(v10 + 32) | (*(unsigned __int8 *)(v10 + 34) << 16);
  }
  while (*(_WORD *)(v10 + 32) != 130);
  if ((v11 & 0x40000) != 0)
  {
LABEL_28:
    if (sub_22E466EBC(a2))
    {
      sub_22EFC8E88(a2);
      v14 = *v13;
      v15 = *((unsigned int *)v13 + 2);
      if ((_DWORD)v15 && *(_WORD *)(*v14 + 32) != 129)
      {
        v16 = 8 * v15 - 8;
        v17 = *v13;
        do
        {
          v18 = v17[1];
          ++v17;
          v16 -= 8;
        }
        while (*(_WORD *)(v18 + 32) != 129);
      }
      do
      {
        v19 = *v14++;
        v20 = *(unsigned __int16 *)(v19 + 32) | (*(unsigned __int8 *)(v19 + 34) << 16);
      }
      while (*(_WORD *)(v19 + 32) != 129);
      v12 = (v20 & 0x40000) == 0;
      if (!v3)
        goto LABEL_24;
    }
    else
    {
      v12 = 0;
      if (!v3)
        goto LABEL_24;
    }
  }
  else
  {
    v12 = 1;
    if (!v3)
      goto LABEL_24;
  }
  if (((v12 | sub_22E466F1C(a2)) & 1) != 0)
    return 1;
LABEL_24:
  result = sub_22E462B18(a2);
  if ((_DWORD)result)
    return sub_22EFC83D8(a2);
  return result;
}

uint64_t sub_22EF74E40(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_22EF74CB8(a1, a2);
  if ((_DWORD)result)
  {
    if (sub_22E466F1C(a2) || sub_22E462B18(a2))
    {
      return 1;
    }
    else
    {
      v5 = 0;
      v6 = a2;
      return sub_22E46706C((uint64_t *)(a1 + 18600), &v6, &v5);
    }
  }
  return result;
}

uint64_t sub_22EF74EAC(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5)
{
  _BOOL8 v5;
  uint64_t v12;
  BOOL v13;
  void **p_dst;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *i;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  const void *v32;
  size_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int Key;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  void *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *__p[2];
  unint64_t v65;
  _BYTE v66[72];
  _BYTE v67[72];
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[2];
  void *__src;
  __int128 __len;
  _BYTE v74[9];
  void **__dst;
  __int128 v76;
  _QWORD v77[34];

  v77[32] = *MEMORY[0x24BDAC8D0];
  v71[0] = a2;
  v71[1] = a3;
  if ((*(_QWORD *)(*(_QWORD *)(a1 + 2000) + 8) & 0xC000000000000000) == 0)
    return 1;
  v12 = a1 + 19128;
  __dst = 0;
  if (sub_22F372A24(*(_QWORD *)(a1 + 19128), *(_DWORD *)(a1 + 19144), (uint64_t)v71, &__dst))
    v13 = __dst == (void **)(*(_QWORD *)(a1 + 19128) + 48 * *(unsigned int *)(v12 + 16));
  else
    v13 = 1;
  if (!v13)
  {
    if (!a4)
    {
      v76 = 0uLL;
      __dst = 0;
      goto LABEL_19;
    }
    if (a5 > 0x7FFFFFFFFFFFFFF7)
LABEL_85:
      abort();
    if (a5 >= 0x17)
    {
      v15 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a5 | 7) != 0x17)
        v15 = a5 | 7;
      v16 = v15 + 1;
      p_dst = (void **)operator new(v15 + 1);
      *((_QWORD *)&v76 + 1) = v16 | 0x8000000000000000;
      __dst = p_dst;
      *(_QWORD *)&v76 = a5;
    }
    else
    {
      HIBYTE(v76) = a5;
      p_dst = (void **)&__dst;
      if (!a5)
        goto LABEL_18;
    }
    memmove(p_dst, a4, a5);
LABEL_18:
    *((_BYTE *)p_dst + a5) = 0;
LABEL_19:
    v5 = llvm::StringMapImpl::FindKey() != -1;
    if (SHIBYTE(v76) < 0)
      operator delete(__dst);
    return v5;
  }
  v61 = v12;
  v17 = sub_22F368DF4(a1, 0);
  v68 = 0;
  v69 = 0;
  v70 = 0x4800000000;
  v18 = sub_22F36EF28((_QWORD *)a1);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 24))(v18, a2, a3);
  if (!v19
    || ((v63 = a2 & 0xFFFFFFFFFFFFFFF8, (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7F) != 0x39)
      ? (v20 = 0)
      : (v20 = a2 & 0xFFFFFFFFFFFFFFF8),
        (v21 = *(_DWORD *)(v19 + 8)) == 0))
  {
    v22 = 0;
    v23 = 0;
    i = 0;
    __src = 0;
    *(_QWORD *)&__len = 0;
    *((_QWORD *)&__len + 1) = 0x800000000;
    goto LABEL_27;
  }
  v41 = *(_QWORD *)v19;
  v62 = *(_QWORD *)v19 + 56 * v21;
  do
  {
    __dst = (void **)v77;
    v76 = xmmword_22F44E320;
    sub_22F242C48((uint64_t)v67, (uint64_t)&__dst);
    if (v20)
      (*(void (**)(uint64_t, unint64_t, _QWORD, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v17 + 88))(v17, v20, v71[0] & 7, v41, 1, v67);
    else
      (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v17 + 80))(v17, v63, v41, 1, v67);
    __src = v74;
    __len = xmmword_22F44E320;
    sub_22F242C48((uint64_t)v66, (uint64_t)&__src);
    if (v20)
      (*(void (**)(uint64_t, unint64_t, _QWORD, uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v17 + 88))(v17, v20, v71[0] & 7, v41, 0, v66);
    else
      (*(void (**)(uint64_t, unint64_t, uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v17 + 80))(v17, v63, v41, 0, v66);
    Key = llvm::StringMapImpl::FindKey();
    if (Key == -1 || Key == (unint64_t)v69)
    {
      v43 = sub_22F372B6C((llvm::StringMapImpl *)&v68, __dst, v76);
      v44 = *v43;
      v45 = *(unsigned int *)(*v43 + 16);
      if ((_DWORD)v45)
      {
        v46 = *(_QWORD *)(v44 + 8);
        v47 = 24 * v45;
        do
        {
          if (*(char *)(v46 + v47 - 1) < 0)
            operator delete(*(void **)(v46 + v47 - 24));
          v47 -= 24;
        }
        while (v47);
      }
      *(_DWORD *)(v44 + 16) = 0;
    }
    v48 = sub_22F372B6C((llvm::StringMapImpl *)&v68, __dst, v76);
    v49 = (void *)__len;
    if ((unint64_t)__len > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_85;
    v50 = v20;
    v51 = v17;
    v52 = *v48;
    v53 = __src;
    if ((unint64_t)__len >= 0x17)
    {
      v55 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if (((unint64_t)__len | 7) != 0x17)
        v55 = __len | 7;
      v56 = v55 + 1;
      v54 = operator new(v55 + 1);
      __p[1] = v49;
      v65 = v56 | 0x8000000000000000;
      __p[0] = v54;
LABEL_68:
      memmove(v54, v53, (size_t)v49);
      goto LABEL_69;
    }
    HIBYTE(v65) = __len;
    v54 = __p;
    if ((_QWORD)__len)
      goto LABEL_68;
LABEL_69:
    *((_BYTE *)v49 + (_QWORD)v54) = 0;
    v57 = sub_22E3B9688(v52 + 8, (unint64_t)__p, 1);
    v58 = *(_QWORD *)(v52 + 8) + 24 * *(unsigned int *)(v52 + 16);
    v59 = *(_OWORD *)v57;
    *(_QWORD *)(v58 + 16) = *(_QWORD *)(v57 + 16);
    *(_OWORD *)v58 = v59;
    *(_QWORD *)(v57 + 8) = 0;
    *(_QWORD *)(v57 + 16) = 0;
    *(_QWORD *)v57 = 0;
    ++*(_DWORD *)(v52 + 16);
    if (SHIBYTE(v65) < 0)
      operator delete(__p[0]);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v66);
    v17 = v51;
    v20 = v50;
    if (__src != v74)
      free(__src);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v67);
    if (__dst != v77)
      free(__dst);
    v41 += 56;
  }
  while (v41 != v62);
  v22 = v68;
  v23 = v69;
  __src = 0;
  *(_QWORD *)&__len = 0;
  *((_QWORD *)&__len + 1) = 0x800000000;
  if ((_DWORD)v69)
  {
    for (i = v68; !*i || *i == -8; ++i)
      ;
  }
  else
  {
    v23 = 0;
    i = v68;
  }
LABEL_27:
  v25 = &v22[v23];
  if (i != v25)
  {
    v26 = *i;
    do
    {
      v27 = *(unsigned int *)(v26 + 16);
      v28 = 126 - 2 * __clz(v27);
      if ((_DWORD)v27)
        v29 = v28;
      else
        v29 = 0;
      sub_22E63C10C(*(_QWORD *)(v26 + 8), (const void **)(*(_QWORD *)(v26 + 8) + 24 * v27), (uint64_t)&__dst, v29, 1);
      v30 = *(_QWORD *)(v26 + 8);
      v31 = *(_BYTE *)(v30 + 23);
      if (v31 >= 0)
        v32 = *(const void **)(v26 + 8);
      else
        v32 = *(const void **)v30;
      if (v31 >= 0)
        v33 = v31 & 0x7F;
      else
        v33 = *(_QWORD *)(v30 + 8);
      sub_22E3B39D4((llvm::StringMapImpl *)&__src, v32, v33);
      do
      {
        v34 = i[1];
        ++i;
        v26 = v34;
        if (v34)
          v35 = v26 == -8;
        else
          v35 = 1;
      }
      while (v35);
    }
    while (i != v25);
  }
  v5 = llvm::StringMapImpl::FindKey() != -1;
  v36 = sub_22F372C68(v61, (uint64_t)v71);
  v37 = __src;
  v38 = __len;
  v39 = DWORD2(__len);
  HIDWORD(v76) = HIDWORD(__len);
  __src = 0;
  *(_QWORD *)&__len = 0;
  DWORD2(__len) = 0;
  __dst = *(void ***)(v36 + 16);
  v40 = *(_QWORD *)(v36 + 24);
  *(_QWORD *)(v36 + 16) = v37;
  *(_QWORD *)(v36 + 24) = v38;
  *(_QWORD *)&v76 = v40;
  LODWORD(v37) = *(_DWORD *)(v36 + 32);
  *(_DWORD *)(v36 + 32) = v39;
  DWORD2(v76) = (_DWORD)v37;
  sub_22E3B3AD0((uint64_t)&__dst);
  sub_22E3B3AD0((uint64_t)&__src);
  sub_22F372ADC((uint64_t)&v68);
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
  return v5;
}

uint64_t sub_22EF754D4(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  BOOL v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13[7];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 1223) < 0)
    v2 = *(_QWORD *)(a1 + 1208);
  else
    v2 = *(unsigned __int8 *)(a1 + 1223);
  v3 = (void **)(a1 + 1200);
  if (v2)
  {
    if (*(char *)(a1 + 1223) >= 0)
      return a1 + 1200;
    else
      return *(_QWORD *)(a1 + 1200);
  }
  v5 = *(_QWORD *)(a1 + 2000);
  if (*(char *)(v5 + 695) < 0)
  {
    if (*(_QWORD *)(v5 + 680))
      goto LABEL_10;
    return 0;
  }
  if (!*(_BYTE *)(v5 + 695))
    return 0;
LABEL_10:
  llvm::MD5::MD5((llvm::MD5 *)&v9);
  llvm::MD5::update();
  llvm::MD5::final();
  v6 = v11;
  if (v11)
  {
    v7 = v13;
    do
    {
      *--v7 = a0123456789abcd_2[v6 & 0xF] | 0x20;
      v8 = v6 > 0xF;
      v6 >>= 4;
    }
    while (v8);
  }
  else
  {
    v7 = &v12;
    v12 = 48;
  }
  sub_22E3B4274(&v9, v7, v13, v13 - v7);
  if (*(char *)(a1 + 1223) < 0)
    operator delete(*v3);
  *(_OWORD *)v3 = v9;
  *(_QWORD *)(a1 + 1216) = v10;
  if (*(char *)(a1 + 1223) >= 0)
    return a1 + 1200;
  else
    return *(_QWORD *)(a1 + 1200);
}

char *sub_22EF75668(char **a1, _BYTE *__src, _BYTE *a3)
{
  char *result;
  char *v7;
  char *v8;
  _QWORD *v9;
  int64_t v10;

  result = a1[2];
  v7 = *a1;
  if (result == *a1)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
    }
    result = (char *)operator new(8uLL);
    v7 = result;
    *a1 = result;
    a1[1] = result;
    v9 = a1 + 1;
    a1[2] = result + 8;
    v10 = a3 - __src;
    if (a3 != __src)
      result = (char *)memcpy(result, __src, a3 - __src);
  }
  else
  {
    v8 = a1[1];
    v9 = a1 + 1;
    v10 = a3 - __src;
    if (v8 != v7)
    {
      if (a3 == __src)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (__src != a3)
LABEL_10:
      result = (char *)memmove(v7, __src, a3 - __src);
  }
LABEL_11:
  *v9 = &v7[v10];
  return result;
}

uint64_t sub_22EF75734(uint64_t a1)
{
  uint64_t v2;
  llvm *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(llvm **)a1;
  if ((_DWORD)v2)
  {
    v4 = 32 * v2;
    v5 = (uint64_t)v3 + 8;
    do
    {
      if ((*(_DWORD *)(v5 - 8) + 1) >= 2)
        sub_22E3B4AB8(v5, *(_QWORD **)(v5 + 8));
      v5 += 32;
      v4 -= 32;
    }
    while (v4);
    v3 = *(llvm **)a1;
    v6 = (void *)(32 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    v6 = 0;
  }
  llvm::deallocate_buffer(v3, v6);
  return a1;
}

uint64_t sub_22EF757BC@<X0>(_DWORD *a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22E54B7C0((uint64_t)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22EF75850(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_OWORD *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 24 * a1[4];
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

_QWORD *sub_22EF75850(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = a1[2];
  v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22EF75900((uint64_t)a1, v7);
  v9 = 0;
  sub_22E54B7C0((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096)
    --a1[3];
  return a4;
}

_QWORD *sub_22EF75900(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 24 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22EF759CC(a1, (uint64_t)v4, (uint64_t)v4 + 24 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(24 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = -4096;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22EF759CC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = -4096;
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22E54B7C0(v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *(_OWORD *)(v9 + 1) = *(_OWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

uint64_t sub_22EF75A7C(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t *v117;

  v117 = (uint64_t *)result;
LABEL_2:
  v114 = a2 - 1;
  v9 = v117;
  while (2)
  {
    v10 = v9;
    v11 = (char *)a2 - (char *)v9;
    v12 = a2 - v9;
    v117 = v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v52 = *v10;
        v53 = sub_22E46A3EC(*a3, *(a2 - 1));
        result = sub_22E46A3EC(*a3, v52);
        if (v53 < result)
        {
          v54 = *v10;
          *v10 = *(a2 - 1);
          *(a2 - 1) = v54;
        }
        return result;
      case 3:
        return sub_22EF764E8(v10, v10 + 1, v114, a3);
      case 4:
        return sub_22EF7680C(v10, v10 + 1, v10 + 2, v114, a3);
      case 5:
        return sub_22EF763B8(v10, v10 + 1, v10 + 2, v10 + 3, v114, a3);
      default:
        if (v11 <= 191)
        {
          v55 = v10 + 1;
          v57 = v10 == a2 || v55 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v57)
            {
              v58 = 0;
              do
              {
                v60 = *v10;
                v59 = v10[1];
                v10 = v55;
                v61 = sub_22E46A3EC(*a3, v59);
                result = sub_22E46A3EC(*a3, v60);
                if (v61 < result)
                {
                  v62 = *v10;
                  v63 = v58;
                  while (1)
                  {
                    *(uint64_t *)((char *)v117 + v63 + 8) = *(uint64_t *)((char *)v117 + v63);
                    if (!v63)
                      break;
                    v64 = *(uint64_t *)((char *)v117 + v63 - 8);
                    v65 = sub_22E46A3EC(*a3, v62);
                    result = sub_22E46A3EC(*a3, v64);
                    v63 -= 8;
                    if (v65 >= result)
                    {
                      v66 = (uint64_t *)((char *)v117 + v63 + 8);
                      goto LABEL_72;
                    }
                  }
                  v66 = v117;
LABEL_72:
                  *v66 = v62;
                }
                v55 = v10 + 1;
                v58 += 8;
              }
              while (v10 + 1 != a2);
            }
          }
          else if (!v57)
          {
            do
            {
              v103 = *v117;
              v104 = v55;
              v105 = sub_22E46A3EC(*a3, v117[1]);
              result = sub_22E46A3EC(*a3, v103);
              if (v105 < result)
              {
                v106 = *v104;
                v107 = v104;
                do
                {
                  v108 = v107;
                  v109 = *--v107;
                  *v108 = v109;
                  v110 = *(v108 - 2);
                  v111 = sub_22E46A3EC(*a3, v106);
                  result = sub_22E46A3EC(*a3, v110);
                }
                while (v111 < result);
                *v107 = v106;
              }
              v117 = v104;
              v55 = v104 + 1;
            }
            while (v104 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v67 = (unint64_t)(v12 - 2) >> 1;
            v68 = v67;
            do
            {
              v69 = v68;
              if (v67 >= v68)
              {
                v70 = (2 * v68) | 1;
                v71 = &v117[v70];
                v72 = 2 * v68 + 2;
                if (v72 < v12)
                {
                  v73 = v71[1];
                  v74 = sub_22E46A3EC(*a3, *v71);
                  v75 = v74 < sub_22E46A3EC(*a3, v73);
                  v67 = (unint64_t)(v12 - 2) >> 1;
                  if (v75)
                  {
                    ++v71;
                    v70 = v72;
                  }
                }
                v76 = &v117[v69];
                v77 = *v76;
                v78 = sub_22E46A3EC(*a3, *v71);
                result = sub_22E46A3EC(*a3, v77);
                if (v78 >= result)
                {
                  v112 = v69;
                  v115 = *v76;
                  do
                  {
                    v79 = v71;
                    *v76 = *v71;
                    if (v67 < v70)
                      break;
                    v80 = (2 * v70) | 1;
                    v71 = &v117[v80];
                    v81 = 2 * v70 + 2;
                    if (v81 < v12)
                    {
                      v82 = v71[1];
                      v83 = sub_22E46A3EC(*a3, *v71);
                      v84 = sub_22E46A3EC(*a3, v82);
                      if (v83 < v84)
                        ++v71;
                      v67 = (unint64_t)(v12 - 2) >> 1;
                      if (v83 < v84)
                        v80 = v81;
                    }
                    v85 = sub_22E46A3EC(*a3, *v71);
                    result = sub_22E46A3EC(*a3, v115);
                    v76 = v79;
                    v70 = v80;
                  }
                  while (v85 >= result);
                  *v79 = v115;
                  v69 = v112;
                }
              }
              v68 = v69 - 1;
            }
            while (v69);
            do
            {
              v86 = 0;
              v87 = v117;
              v113 = *v117;
              v116 = a2;
              do
              {
                v88 = &v87[v86 + 1];
                v89 = (2 * v86) | 1;
                v90 = 2 * v86 + 2;
                if (v90 < v12)
                {
                  v91 = v87[v86 + 2];
                  v92 = sub_22E46A3EC(*a3, *v88);
                  result = sub_22E46A3EC(*a3, v91);
                  if (v92 < result)
                  {
                    ++v88;
                    v89 = v90;
                  }
                }
                *v87 = *v88;
                v87 = v88;
                v86 = v89;
              }
              while (v89 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
              v93 = v116 - 1;
              if (v88 == v116 - 1)
              {
                v94 = v116 - 1;
                *v88 = v113;
              }
              else
              {
                *v88 = *v93;
                v94 = v116 - 1;
                *v93 = v113;
                v95 = (char *)v88 - (char *)v117 + 8;
                if (v95 >= 9)
                {
                  v96 = (((unint64_t)v95 >> 3) - 2) >> 1;
                  v97 = &v117[v96];
                  v98 = *v88;
                  v99 = sub_22E46A3EC(*a3, *v97);
                  result = sub_22E46A3EC(*a3, v98);
                  if (v99 < result)
                  {
                    v100 = *v88;
                    do
                    {
                      v101 = v97;
                      *v88 = *v97;
                      if (!v96)
                        break;
                      v96 = (v96 - 1) >> 1;
                      v97 = &v117[v96];
                      v102 = sub_22E46A3EC(*a3, *v97);
                      result = sub_22E46A3EC(*a3, v100);
                      v88 = v101;
                    }
                    while (v102 < result);
                    *v101 = v100;
                  }
                }
              }
              v75 = v12-- <= 2;
              a2 = v94;
            }
            while (!v75);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v10[(unint64_t)v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          sub_22EF764E8(v14, v10, v114, a3);
        }
        else
        {
          sub_22EF764E8(v10, v14, v114, a3);
          sub_22EF764E8(v10 + 1, v14 - 1, a2 - 2, a3);
          sub_22EF764E8(v10 + 2, &v10[v13 + 1], a2 - 3, a3);
          sub_22EF764E8(v14 - 1, v14, &v10[v13 + 1], a3);
          v15 = *v10;
          *v10 = *v14;
          *v14 = v15;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v16 = *v10;
          v17 = sub_22E46A3EC(*a3, *(v10 - 1));
          if (v17 >= sub_22E46A3EC(*a3, v16))
          {
            v35 = *v10;
            v36 = *v114;
            v37 = sub_22E46A3EC(*a3, *v10);
            result = sub_22E46A3EC(*a3, v36);
            if (v37 >= result)
            {
              v40 = v10 + 1;
              do
              {
                v9 = v40;
                if (v40 >= a2)
                  break;
                ++v40;
                v41 = *v9;
                v42 = sub_22E46A3EC(*a3, v35);
                result = sub_22E46A3EC(*a3, v41);
              }
              while (v42 >= result);
            }
            else
            {
              v9 = v10;
              do
              {
                v38 = v9[1];
                ++v9;
                v39 = sub_22E46A3EC(*a3, v35);
                result = sub_22E46A3EC(*a3, v38);
              }
              while (v39 >= result);
            }
            v43 = a2;
            if (v9 < a2)
            {
              v43 = a2;
              do
              {
                v44 = *--v43;
                v45 = sub_22E46A3EC(*a3, v35);
                result = sub_22E46A3EC(*a3, v44);
              }
              while (v45 < result);
            }
            while (v9 < v43)
            {
              v46 = *v9;
              *v9 = *v43;
              *v43 = v46;
              do
              {
                v47 = v9[1];
                ++v9;
                v48 = sub_22E46A3EC(*a3, v35);
              }
              while (v48 >= sub_22E46A3EC(*a3, v47));
              do
              {
                v49 = *--v43;
                v50 = sub_22E46A3EC(*a3, v35);
                result = sub_22E46A3EC(*a3, v49);
              }
              while (v50 < result);
            }
            v51 = v9 - 1;
            if (v9 - 1 != v10)
              *v10 = *v51;
            a5 = 0;
            *v51 = v35;
            continue;
          }
        }
        v18 = 0;
        v19 = *v10;
        do
          v20 = sub_22E46A3EC(*a3, v10[++v18]);
        while (v20 < sub_22E46A3EC(*a3, v19));
        v21 = &v10[v18];
        v22 = a2;
        if (v18 == 1)
        {
          v22 = a2;
          do
          {
            if (v21 >= v22)
              break;
            v25 = *--v22;
            v26 = sub_22E46A3EC(*a3, v25);
          }
          while (v26 >= sub_22E46A3EC(*a3, v19));
        }
        else
        {
          do
          {
            v23 = *--v22;
            v24 = sub_22E46A3EC(*a3, v23);
          }
          while (v24 >= sub_22E46A3EC(*a3, v19));
        }
        v9 = v21;
        if (v21 < v22)
        {
          v27 = v22;
          do
          {
            v28 = *v9;
            *v9 = *v27;
            *v27 = v28;
            do
            {
              v29 = v9[1];
              ++v9;
              v30 = sub_22E46A3EC(*a3, v29);
            }
            while (v30 < sub_22E46A3EC(*a3, v19));
            do
            {
              v31 = *--v27;
              v32 = sub_22E46A3EC(*a3, v31);
            }
            while (v32 >= sub_22E46A3EC(*a3, v19));
          }
          while (v9 < v27);
        }
        v33 = v9 - 1;
        if (v9 - 1 != v117)
          *v117 = *v33;
        *v33 = v19;
        if (v21 < v22)
        {
LABEL_30:
          result = sub_22EF75A7C(v117, v9 - 1, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v34 = sub_22EF76624(v117, v9 - 1, a3);
        result = sub_22EF76624(v9, a2, a3);
        if (!(_DWORD)result)
        {
          if (v34)
            continue;
          goto LABEL_30;
        }
        a2 = v9 - 1;
        if (!v34)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_22EF763B8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_22EF7680C(a1, a2, a3, a4, a6);
  v12 = *a4;
  v13 = sub_22E46A3EC(*a6, *a5);
  result = sub_22E46A3EC(*a6, v12);
  if (v13 < result)
  {
    v15 = *a4;
    *a4 = *a5;
    *a5 = v15;
    v16 = *a3;
    v17 = sub_22E46A3EC(*a6, *a4);
    result = sub_22E46A3EC(*a6, v16);
    if (v17 < result)
    {
      v18 = *a3;
      *a3 = *a4;
      *a4 = v18;
      v19 = *a2;
      v20 = sub_22E46A3EC(*a6, *a3);
      result = sub_22E46A3EC(*a6, v19);
      if (v20 < result)
      {
        v21 = *a2;
        *a2 = *a3;
        *a3 = v21;
        v22 = *a1;
        v23 = sub_22E46A3EC(*a6, *a2);
        result = sub_22E46A3EC(*a6, v22);
        if (v23 < result)
        {
          v24 = *a1;
          *a1 = *a2;
          *a2 = v24;
        }
      }
    }
  }
  return result;
}

uint64_t sub_22EF764E8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v8 = *a1;
  v9 = sub_22E46A3EC(*a4, *a2);
  v10 = sub_22E46A3EC(*a4, v8);
  v11 = *a2;
  v12 = sub_22E46A3EC(*a4, *a3);
  result = sub_22E46A3EC(*a4, v11);
  if (v9 >= v10)
  {
    if (v12 < result)
    {
      v15 = *a2;
      *a2 = *a3;
      *a3 = v15;
      v16 = *a1;
      v17 = sub_22E46A3EC(*a4, *a2);
      result = sub_22E46A3EC(*a4, v16);
      if (v17 < result)
      {
        v18 = *a1;
        *a1 = *a2;
        *a2 = v18;
      }
    }
  }
  else
  {
    v14 = *a1;
    if (v12 >= result)
    {
      *a1 = *a2;
      *a2 = v14;
      v19 = sub_22E46A3EC(*a4, *a3);
      result = sub_22E46A3EC(*a4, v14);
      if (v19 < result)
      {
        v20 = *a2;
        *a2 = *a3;
        *a3 = v20;
      }
    }
    else
    {
      *a1 = *a3;
      *a3 = v14;
    }
  }
  return result;
}

BOOL sub_22EF76624(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *a1;
      v9 = sub_22E46A3EC(*a3, *(a2 - 1));
      if (v9 < sub_22E46A3EC(*a3, v8))
      {
        v10 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      sub_22EF764E8(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_22EF7680C(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_22EF763B8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v11 = a1 + 2;
      sub_22EF764E8(a1, a1 + 1, a1 + 2, a3);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = sub_22E46A3EC(*a3, *v12);
    if (v16 < sub_22E46A3EC(*a3, v15))
    {
      v17 = *v12;
      v18 = v13;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18 + 24) = *(uint64_t *)((char *)a1 + v18 + 16);
        if (v18 == -16)
          break;
        v19 = *(uint64_t *)((char *)a1 + v18 + 8);
        v20 = sub_22E46A3EC(*a3, v17);
        v18 -= 8;
        if (v20 >= sub_22E46A3EC(*a3, v19))
        {
          v21 = (uint64_t *)((char *)a1 + v18 + 24);
          goto LABEL_12;
        }
      }
      v21 = a1;
LABEL_12:
      *v21 = v17;
      if (++v14 == 8)
        return v12 + 1 == a2;
    }
    v11 = v12;
    v13 += 8;
    if (++v12 == a2)
      return 1;
  }
}

uint64_t sub_22EF7680C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_22EF764E8(a1, a2, a3, a5);
  v10 = *a3;
  v11 = sub_22E46A3EC(*a5, *a4);
  result = sub_22E46A3EC(*a5, v10);
  if (v11 < result)
  {
    v13 = *a3;
    *a3 = *a4;
    *a4 = v13;
    v14 = *a2;
    v15 = sub_22E46A3EC(*a5, *a3);
    result = sub_22E46A3EC(*a5, v14);
    if (v15 < result)
    {
      v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      v17 = *a1;
      v18 = sub_22E46A3EC(*a5, *a2);
      result = sub_22E46A3EC(*a5, v17);
      if (v18 < result)
      {
        v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  return result;
}

_DWORD *sub_22EF76900(_DWORD *result, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  _DWORD *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *result;
  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    v9 = *result;
    v7 = result;
    v11 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v2 = v9;
    result = v7;
    a2 = v11;
    v3 = *(_DWORD *)(v11 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v3) = v2;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  v6 = result[1];
  if (v5 >= v4)
  {
    v8 = result[1];
    v10 = a2;
    result = (_DWORD *)llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = v8;
    a2 = v10;
    v5 = *(_DWORD *)(v10 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v5) = v6;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22EF769C4(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(result + 8);
  if (v2 != a2)
  {
    v4 = result;
    if (v2 <= a2)
    {
      if (*(unsigned int *)(result + 12) < a2)
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v2 = *(unsigned int *)(v4 + 8);
      }
      if (v2 != a2)
      {
        v5 = *(_QWORD *)v4 + 24 * a2;
        v6 = *(_QWORD *)v4 + 24 * v2;
        do
        {
          *(_DWORD *)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
          v6 += 24;
        }
        while (v6 != v5);
      }
    }
    *(_DWORD *)(v4 + 8) = a2;
  }
  return result;
}

uint64_t sub_22EF76A50(uint64_t a1, unsigned __int8 a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  unint64_t v16;
  unsigned int v17;

  v12 = *(_DWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 16);
  if (a3)
  {
    v13 = sub_22F0AAC5C(a3);
    v14 = v13 & 3 | (16 * ((v13 >> 3) & 1));
  }
  else
  {
    v14 = 0;
  }
  v15 = v14 | (v12 >> 8);
  v16 = a1 & 0xFFFFFFFFFFFFFFF0;
  if (a5 >= 0x10)
    v16 = a5;
  *(_QWORD *)a1 = a1;
  *(_QWORD *)(a1 + 8) = v16;
  v17 = *(_DWORD *)(a1 + 16) & 0xF8000000 | ((v15 & 0x1F) << 8) | (a2 << 19);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = a4;
  *(_DWORD *)(a1 + 16) = v17 & 0xF7FFFFE7 | 0x18;
  if (a6)
  {
    *(_DWORD *)(a1 + 16) = v17 | 0x8000018;
    *(_QWORD *)(a1 + 48) = a6;
  }
  return a1;
}

uint64_t sub_22EF76B1C(uint64_t a1, uint64_t a2)
{
  return sub_22EFC5BC0(*(_QWORD *)(*(_QWORD *)a1 + 40), *(_QWORD *)(*(_QWORD *)a2 + 40));
}

uint64_t sub_22EF76B30(uint64_t a1)
{
  uint64_t result;
  BOOL v2;

  if ((*(_QWORD *)(a1 + 8) & 6) != 2)
    return 0;
  result = *(_QWORD *)(a1 + 16);
  if ((*(_DWORD *)(result + 28) & 0x7F) == 0x10)
    return result;
  if ((*(_DWORD *)(result + 28) & 0x7F) != 0x11)
    return 0;
  do
  {
    result = *(_QWORD *)(result + 88);
    if (result)
      v2 = (*(_DWORD *)(result + 28) & 0x7F) == 17;
    else
      v2 = 0;
  }
  while (v2);
  return result;
}

unint64_t sub_22EF76B84(uint64_t a1, int a2)
{
  unint64_t v2;

  v2 = (*(_DWORD *)(*(_QWORD *)(a1 + 2000) + 216) << 7);
  if ((a2 & 0xFF80000) == 0x3000000)
    v2 /= (unint64_t)sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
  return v2;
}

uint64_t sub_22EF76BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  _BOOL4 v16;

  v6 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (!v7 || *(_BYTE *)(v7 + 16) != 32)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
      v7 = sub_22F10CF48(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
    else
      v7 = 0;
  }
  v8 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (!v9 || *(_BYTE *)(v9 + 16) != 32)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
    {
      v11 = 0;
      v9 = 0;
      v10 = v7 != 0;
      goto LABEL_14;
    }
    v9 = sub_22F10CF48(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
  }
  v10 = v7 != 0;
  v11 = v9 != 0;
  if (v7 && v9)
    return sub_22EF6ED94(a1, v7, v9);
LABEL_14:
  v13 = *v6;
  if (!v13 || *(_BYTE *)(v13 + 16) != 10)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 10)
      v13 = sub_22F10CF48(v13);
    else
      v13 = 0;
  }
  v14 = *v8;
  if (!*v8 || *(_BYTE *)(v14 + 16) != 10)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 10)
    {
      v16 = 0;
      v15 = v13 != 0;
      return v10 && sub_22E5761BC(v7) && v16 || v11 && (v15 & sub_22E5761BC(v9) & 1) != 0;
    }
    v14 = sub_22F10CF48(v14);
  }
  v15 = v13 != 0;
  v16 = v14 != 0;
  if (v13 && v14)
    return (unint64_t)sub_22EF6FF80(a1, a2, a3, 1, 0, 0) > 0xF;
  return v10 && sub_22E5761BC(v7) && v16 || v11 && (v15 & sub_22E5761BC(v9) & 1) != 0;
}

uint64_t sub_22EF76DD4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _DWORD *v4;
  const char *v5;
  size_t v6;
  unsigned int v7;
  unint64_t v8;
  _DWORD *v10;
  const char *v11;
  size_t v12;
  unsigned int v13;
  size_t v14;
  int v15;
  unsigned int v17;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 40) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(*(_QWORD *)a1 + 40) & 7) != 0 || v2 == 0)
  {
    v6 = 0;
    v5 = "";
  }
  else
  {
    v4 = *(_DWORD **)(v2 + 16);
    v7 = *v4;
    v5 = (const char *)(v4 + 4);
    v6 = v7;
  }
  v8 = *(_QWORD *)(*(_QWORD *)a2 + 40) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(*(_QWORD *)a2 + 40) & 7) != 0 || v8 == 0)
  {
    v12 = 0;
    v11 = "";
  }
  else
  {
    v10 = *(_DWORD **)(v8 + 16);
    v13 = *v10;
    v11 = (const char *)(v10 + 4);
    v12 = v13;
  }
  if (v12 >= v6)
    v14 = v6;
  else
    v14 = v12;
  if (v14)
  {
    v15 = memcmp(v5, v11, v14);
    if (v15)
      return (v15 >> 31) | 1u;
  }
  if (v6 < v12)
    v17 = -1;
  else
    v17 = 1;
  if (v6 == v12)
    return 0;
  else
    return v17;
}

uint64_t sub_22EF76E84(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  result = 0;
  if (a2)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 35 <= 2)
      return sub_22EFD4B78(a2) | 0x100000000;
  }
  return result;
}

uint64_t sub_22EF76EC0(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v17 = 0;
  result = sub_22F25AFD8((uint64_t *)a1, a2, &v17);
  if ((_DWORD)result)
  {
    *v17 = -8192;
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  v5 = *(_QWORD **)(a1 + 32);
  v6 = a2 + 2;
  if (a2 + 2 == v5)
  {
    *(_QWORD *)(a1 + 32) = a2;
  }
  else
  {
    v7 = 0;
    v8 = ((uint64_t)a2 - *(_QWORD *)(a1 + 24)) >> 4;
    do
    {
      v9 = &v6[v7];
      *((_OWORD *)v9 - 1) = *(_OWORD *)&v6[v7];
      v7 += 2;
    }
    while (v9 + 2 != v5);
    *(_QWORD *)(a1 + 32) = &a2[v7];
    if (v7 * 8)
    {
      v10 = *(unsigned int *)(a1 + 16);
      v11 = *(_QWORD *)a1 + 16 * v10;
      if (*(_DWORD *)(a1 + 8))
      {
        if ((_DWORD)v10)
        {
          v12 = 16 * v10;
          v13 = *(_QWORD *)a1;
          while ((*(_QWORD *)v13 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v13 += 16;
            v12 -= 16;
            if (!v12)
              goto LABEL_12;
          }
        }
        else
        {
          v13 = *(_QWORD *)a1;
        }
      }
      else
      {
LABEL_12:
        v13 = *(_QWORD *)a1 + 16 * v10;
      }
      v14 = *(_QWORD *)a1 + 16 * v10;
LABEL_17:
      while (v13 != v14)
      {
        v15 = *(unsigned int *)(v13 + 8);
        if (v8 < v15)
          *(_DWORD *)(v13 + 8) = v15 - 1;
        v16 = v13 + 16;
        v13 = v11;
        if (v16 != v11)
        {
          v13 = v16;
          while ((*(_QWORD *)v13 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v13 += 16;
            if (v13 == v11)
            {
              v13 = v11;
              goto LABEL_17;
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_22EF77004(unsigned int *a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  llvm *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a1[4];
  v3 = a1[2];
  sub_22F36FED8(a1);
  if (v3)
  {
    v4 = 1 << (33 - __clz(v3 - 1));
    if (v4 <= 64)
      v5 = 64;
    else
      v5 = v4;
    if (v5 == a1[4])
    {
      *((_QWORD *)a1 + 1) = 0;
      v6 = 32 * v5;
      v7 = *(llvm **)a1;
      do
      {
        *(_QWORD *)v7 = -4096;
        v7 = (llvm *)((char *)v7 + 32);
        v6 -= 32;
      }
      while (v6);
      return;
    }
  }
  else
  {
    if (!a1[4])
    {
      *((_QWORD *)a1 + 1) = 0;
      return;
    }
    v5 = 0;
  }
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(32 * v2));
  if (v5)
  {
    v8 = (4 * v5 / 3 + 1) | ((unint64_t)(4 * v5 / 3 + 1) >> 1);
    v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
    LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
    a1[4] = v9;
    v10 = (_QWORD *)MEMORY[0x23489D23C](32 * v9, 8);
    *(_QWORD *)a1 = v10;
    *((_QWORD *)a1 + 1) = 0;
    v11 = a1[4];
    if ((_DWORD)v11)
    {
      v12 = 32 * v11;
      do
      {
        *v10 = -4096;
        v10 += 4;
        v12 -= 32;
      }
      while (v12);
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    a1[4] = 0;
  }
}

unint64_t *sub_22EF77120(unint64_t *a1, unint64_t *__dst, unint64_t *__src)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  int64_t v8;

  v3 = __dst;
  v4 = *a1;
  if ((*a1 & 4) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v6 = *(_QWORD *)v5;
      v7 = (unint64_t *)(*(_QWORD *)v5 + 8 * *(unsigned int *)(v5 + 8));
      v8 = (char *)v7 - (char *)__src;
      if (v7 != __src)
      {
        memmove(__dst, __src, (char *)v7 - (char *)__src);
        v6 = *(_QWORD *)v5;
      }
      *(_DWORD *)(v5 + 8) = ((unint64_t)v3 + v8 - v6) >> 3;
    }
  }
  else
  {
    if (a1 == __dst && __dst != __src)
    {
      v4 = 0;
      *__dst = 0;
    }
    return &a1[v4 > 7];
  }
  return v3;
}

_QWORD *sub_22EF771BC(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_22EF772EC(a1, v7);
      v17 = 0;
      sub_22F25AFD8((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_22EF772EC(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_22EF772EC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22EF773AC(a1, v4, &v4[2 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22EF773AC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)result;
    v5 = 16 * v3;
    do
    {
      *v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  if (a2 != a3)
  {
    v6 = 0;
    v7 = v3 - 1;
    do
    {
      v8 = *a2;
      if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v9 = ((v8 >> 4) ^ (v8 >> 9)) & v7;
        v10 = (_QWORD *)(*(_QWORD *)result + 16 * v9);
        v11 = *v10;
        if (v8 != *v10)
        {
          v12 = 0;
          v13 = 1;
          while (v11 != -4096)
          {
            if (v12)
              v14 = 0;
            else
              v14 = v11 == -8192;
            if (v14)
              v12 = v10;
            v15 = v9 + v13++;
            v9 = v15 & v7;
            v10 = (_QWORD *)(*(_QWORD *)result + 16 * (v15 & v7));
            v11 = *v10;
            if (v8 == *v10)
              goto LABEL_8;
          }
          if (v12)
            v10 = v12;
        }
LABEL_8:
        *v10 = v8;
        v10[1] = a2[1];
        *(_DWORD *)(result + 8) = ++v6;
      }
      a2 += 2;
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t *sub_22EF77484(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t *result;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  int v12;
  uint64_t *v13;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
    result = (uint64_t *)(*(_QWORD *)a1 + 16 * v5);
    v7 = *result;
    if (*a2 == *result)
      return result;
    v8 = 0;
    v9 = 1;
    while (v7 != -4096)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -8192;
      if (v10)
        v8 = result;
      v11 = v5 + v9++;
      v5 = v11 & (v4 - 1);
      result = (uint64_t *)(*(_QWORD *)a1 + 16 * v5);
      v7 = *result;
      if (*a2 == *result)
        return result;
    }
    if (v8)
      result = v8;
  }
  else
  {
    result = 0;
  }
  v12 = *(_DWORD *)(a1 + 8);
  if (4 * v12 + 4 >= 3 * v4)
  {
    v4 *= 2;
    goto LABEL_21;
  }
  if (v4 + ~v12 - *(_DWORD *)(a1 + 12) <= v4 >> 3)
  {
LABEL_21:
    sub_22EF775B8(a1, v4);
    v13 = 0;
    sub_22E610528(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v13);
    result = v13;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = 0;
  return result;
}

_QWORD *sub_22EF775B8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F3700AC(a1, v4, &v4[2 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22EF77678(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F370304(a1, v4, &v4[2 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22EF77738(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F3704C0((uint64_t *)a1, v4, &v4[2 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22EF777F8(uint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(result + 24 * v5);
    v7 = *v6;
    if (*v6 != a3)
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(result + 24 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_3;
      }
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_3:
  *a4 = v6;
  return result;
}

_QWORD *sub_22EF7787C(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  _QWORD *v13;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v13 = 0;
LABEL_16:
    v6 = sub_22EF77940(a1, (uint64_t)a2, a2, v13);
    *v6 = *a2;
    v6[1] = 0;
    v6[2] = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 24 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v9 = 0;
    v10 = 1;
    while (v7 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v7 == -8192;
      if (v11)
        v9 = v6;
      v12 = v5 + v10++;
      v5 = v12 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 24 * (v12 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v9)
      v13 = v9;
    else
      v13 = v6;
    goto LABEL_16;
  }
  return v6;
}

_QWORD *sub_22EF77940(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22EF779F4(a1, v7);
  v9 = 0;
  sub_22EF777F8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_22EF779F4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 24 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22EF77AC0(a1, v4, &v4[3 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(24 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = -4096;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22EF77AC0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  unsigned int v14;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)result;
    v5 = 24 * v3;
    do
    {
      *v4 = -4096;
      v4 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 3)
  {
    v6 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v7 = *(_DWORD *)(result + 16) - 1;
      v8 = v7 & ((v6 >> 4) ^ (v6 >> 9));
      v9 = *(_QWORD *)result + 24 * v8;
      v10 = *(_QWORD *)v9;
      if (v6 != *(_QWORD *)v9)
      {
        v11 = 0;
        v12 = 1;
        while (v10 != -4096)
        {
          if (v11)
            v13 = 0;
          else
            v13 = v10 == -8192;
          if (v13)
            v11 = v9;
          v14 = v8 + v12++;
          v8 = v14 & v7;
          v9 = *(_QWORD *)result + 24 * (v14 & v7);
          v10 = *(_QWORD *)v9;
          if (v6 == *(_QWORD *)v9)
            goto LABEL_7;
        }
        if (v11)
          v9 = v11;
      }
LABEL_7:
      *(_QWORD *)v9 = v6;
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 1);
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t sub_22EF77BA4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v17;

  v5 = a3;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 3;
  v9 = *(unsigned int *)(a1 + 8);
  if (*(_QWORD *)a1 + 8 * v9 == a2)
  {
    sub_22F370588(a1, a3, a4);
    return *(_QWORD *)a1 + 8 * v8;
  }
  else
  {
    if (a3 == a4)
    {
      v10 = 0;
    }
    else
    {
      v10 = 0;
      v11 = a3;
      do
      {
        ++v10;
        do
          v11 = *(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v11 && (*(_DWORD *)(v11 + 28) & 0x7F) != 0x33);
      }
      while (v11 != a4);
    }
    if (v10 + v9 > *(unsigned int *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(_QWORD *)a1;
      v9 = *(unsigned int *)(a1 + 8);
    }
    v12 = (unint64_t *)(v7 + 8 * v8);
    v13 = (unint64_t *)(v7 + 8 * v9);
    v14 = v13 - v12;
    if (v14 >= v10)
    {
      sub_22F246808(a1, (char *)&v13[-v10], (char *)(v7 + 8 * v9));
      if (&v13[-v10] != v12)
        memmove(&v12[v10], v12, (char *)&v13[-v10] - (char *)v12);
      if (v5 != a4)
      {
        v17 = v12;
        do
        {
          *v17 = v5;
          do
            v5 = *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v5 && (*(_DWORD *)(v5 + 28) & 0x7F) != 0x33);
          ++v17;
        }
        while (v5 != a4);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = v9 + v10;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 8 * (v9 + v10) - 8 * v14), v12, (char *)v13 - (char *)v12);
        v15 = v12;
        do
        {
          *v15++ = v5;
          do
            v5 = *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v5 && (*(_DWORD *)(v5 + 28) & 0x7F) != 0x33);
          --v14;
        }
        while (v14);
      }
      while (v5 != a4)
      {
        *v13 = v5;
        do
          v5 = *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v5 && (*(_DWORD *)(v5 + 28) & 0x7F) != 0x33);
        ++v13;
      }
    }
  }
  return (uint64_t)v12;
}

uint64_t sub_22EF77D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;
  int v18;

  if (a2)
    v6 = (uint64_t *)(a2 - 16);
  else
    v6 = 0;
  v7 = *v6;
  v8 = v6[3];
  v9 = *(_DWORD *)(a5 + 8);
  if (v9 >= *(_DWORD *)(a5 + 12))
  {
    v17 = v7;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = v17;
    v9 = *(_DWORD *)(a5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a5 + 4 * v9) = v7;
  v10 = *(_DWORD *)(a5 + 12);
  v11 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v11;
  if (v11 >= v10)
  {
    v18 = HIDWORD(v7);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(v7) = v18;
    v11 = *(_DWORD *)(a5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a5 + 4 * v11) = HIDWORD(v7);
  v12 = *(_DWORD *)(a5 + 12);
  v13 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v13;
  if (v13 >= v12)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(a5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a5 + 4 * v13) = v8;
  v14 = *(_DWORD *)(a5 + 12);
  v15 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v15;
  if (v15 >= v14)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = *(_DWORD *)(a5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a5 + 4 * v15) = HIDWORD(v8);
  ++*(_DWORD *)(a5 + 8);
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22EF77EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  int v17;

  if (a2)
    v4 = (uint64_t *)(a2 - 16);
  else
    v4 = 0;
  v5 = *v4;
  v6 = v4[3];
  v7 = *(_DWORD *)(a3 + 8);
  if (v7 >= *(_DWORD *)(a3 + 12))
  {
    v16 = v5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v16;
    v7 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a3 + 4 * v7) = v5;
  v8 = *(_DWORD *)(a3 + 12);
  v9 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v9;
  if (v9 >= v8)
  {
    v17 = HIDWORD(v5);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(v5) = v17;
    v9 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a3 + 4 * v9) = HIDWORD(v5);
  v10 = *(_DWORD *)(a3 + 12);
  v11 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v11;
  if (v11 >= v10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a3 + 4 * v11) = v6;
  v12 = *(_DWORD *)(a3 + 12);
  v13 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v13;
  if (v13 >= v12)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a3 + 4 * v13) = HIDWORD(v6);
  v14 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v14;
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * v14);
}

_QWORD *sub_22EF78004(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F370820(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = 0;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

void sub_22EF780C4()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22EF780D8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24FABA428;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_22EF78118(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FABA428;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_22EF78140(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = (uint64_t *)(*a2 & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_22F10D774(*v5);
  if (!v6)
  {
    v7 = **(_QWORD **)(a1 + 24);
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v8 & 8) != 0)
    {
      v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      v9 = HIDWORD(*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 0x18));
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
    v11 = v10 | (v8 | v7) & 7;
    v12 = sub_22F10ACF8(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
    v13 = sub_22EF5B848(v4, v12, **(_DWORD **)(a1 + 32));
    if (v11)
      v14 = 0;
    else
      v14 = (v9 & 0xC) == 0;
    if (v14)
      return v13;
    v33 = v11 | (v9 << 32);
    v26 = &v33;
    return sub_22F40A8A8((uint64_t)v26, v4, v13);
  }
  v16 = v6;
  v17 = *(_QWORD *)(a1 + 8);
  v33 = *(_QWORD *)(v6 + 32);
  v18 = *(_QWORD *)(v17 + 24);
  if (v18)
  {
    v19 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)v18 + 48))(v18, &v33);
    v20 = *(_QWORD *)(a1 + 8);
    v33 = *(_QWORD *)(v16 + 40);
    v21 = *(_QWORD *)(v20 + 24);
    if (v21)
    {
      v22 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)v21 + 48))(v21, &v33);
      v23 = v5[1];
      if ((v23 & 8) != 0)
      {
        v25 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
      }
      else
      {
        v24 = 0;
        v25 = 0;
      }
      v33 = v24 | v25 | (v23 | v3) & 7;
      v27 = *(_QWORD *)(v16 + 32);
      v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v28 & 8) != 0)
      {
        v30 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        v29 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
      }
      else
      {
        v29 = 0;
        v30 = 0;
      }
      v32 = v29 | v30 | (v28 | v27) & 7;
      v13 = sub_22F369798(v4, *(_DWORD *)(v16 + 16) >> 19, v19, v22);
      sub_22F257E74((unsigned int *)&v33, (unsigned int *)&v32);
      if (!(v33 | BYTE4(v33) & 0xC))
        return v13;
      v31 = v33;
      v26 = &v31;
      return sub_22F40A8A8((uint64_t)v26, v4, v13);
    }
  }
  sub_22E4A06C4();
  return sub_22EF78330();
}

uint64_t sub_22EF78330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  sub_22EF5F720(a5, *(_QWORD *)(v5 + 32), *(_DWORD *)(v5 + 40));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22EF78374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  sub_22EF5F720(a3, *(_QWORD *)(v4 + 32), *(_DWORD *)(v4 + 40));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22EF783BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  sub_22E547B70(a5, *(_QWORD *)(v5 + 32), (*(_DWORD *)(v5 + 16) >> 19) & 1);
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22EF78404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  sub_22E547B70(a3, *(_QWORD *)(v4 + 32), (*(_DWORD *)(v4 + 16) >> 19) & 1);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22EF78450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  sub_22E547B70(a5, *(_QWORD *)(v5 + 32), (*(_DWORD *)(v5 + 16) >> 19) & 1);
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22EF78498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  sub_22E547B70(a3, *(_QWORD *)(v4 + 32), (*(_DWORD *)(v4 + 16) >> 19) & 1);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22EF784E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  sub_22EF78570(v5, a5, *(_QWORD *)(a1 + 16));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22EF78528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  sub_22EF78570(v4, a3, *(_QWORD *)(a1 + 16));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

void sub_22EF78570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned __int8 *v4;

  v3 = *(_DWORD *)(a1 + 16);
  if ((v3 & 0x2000000) != 0)
    v4 = *(unsigned __int8 **)(a1 + 56);
  else
    v4 = 0;
  sub_22F10B35C(a2, a3, *(_QWORD *)(a1 + 32), a1 + 40, v4, (v3 >> 22) & 7, (v3 >> 19) & 7);
}

uint64_t sub_22EF785A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  sub_22F10B5A4(a5, *(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 32), (*(_DWORD *)(v5 + 16) >> 22) & 7, (*(_DWORD *)(v5 + 16) >> 19) & 7, *(unsigned __int8 **)(v5 + 48));
  return llvm::FoldingSetNodeID::operator==();
}

uint64_t sub_22EF785F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  sub_22EF6356C(a5, *(_QWORD *)(v5 + 32), *(_DWORD *)(v5 + 20), *(_DWORD *)(v5 + 16), (*(_DWORD *)(v5 + 16) >> 19) & 0xF);
  return llvm::FoldingSetNodeID::operator==();
}

uint64_t sub_22EF78640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  sub_22F10B7B0(a5, *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 48), *(unsigned __int8 **)(v5 + 40), *(_DWORD *)(v5 + 56));
  return llvm::FoldingSetNodeID::operator==();
}

uint64_t sub_22EF78688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 32;
  if (!a2)
    v5 = 0;
  sub_22F113F68(v5, a5, *(_QWORD *)(a1 + 16));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22EF786CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 32;
  if (!a2)
    v4 = 0;
  sub_22F113F68(v4, a3, *(_QWORD *)(a1 + 16));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22EF78714(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_22F408B6C(a4, a1, (a2 >> 1) & 1, (unsigned __int8 *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22EF78754(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_22F408B6C(a3, a1, (a2 >> 1) & 1, (unsigned __int8 *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22EF78798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;
  int v18;

  if (a2)
    v6 = a2 - 24;
  else
    v6 = 0;
  v7 = *(_QWORD *)(v6 + 32);
  v8 = *(_QWORD *)(v6 + 8);
  v9 = *(_DWORD *)(a5 + 8);
  if (v9 >= *(_DWORD *)(a5 + 12))
  {
    v17 = v7;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = v17;
    v9 = *(_DWORD *)(a5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a5 + 4 * v9) = v7;
  v10 = *(_DWORD *)(a5 + 12);
  v11 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v11;
  if (v11 >= v10)
  {
    v18 = HIDWORD(v7);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(v7) = v18;
    v11 = *(_DWORD *)(a5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a5 + 4 * v11) = HIDWORD(v7);
  v12 = *(_DWORD *)(a5 + 12);
  v13 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v13;
  if (v13 >= v12)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(a5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a5 + 4 * v13) = v8;
  v14 = *(_DWORD *)(a5 + 12);
  v15 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v15;
  if (v15 >= v14)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = *(_DWORD *)(a5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a5 + 4 * v15) = HIDWORD(v8);
  ++*(_DWORD *)(a5 + 8);
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22EF788E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  int v17;

  if (a2)
    v4 = a2 - 24;
  else
    v4 = 0;
  v5 = *(_QWORD *)(v4 + 32);
  v6 = *(_QWORD *)(v4 + 8);
  v7 = *(_DWORD *)(a3 + 8);
  if (v7 >= *(_DWORD *)(a3 + 12))
  {
    v16 = v5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v16;
    v7 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a3 + 4 * v7) = v5;
  v8 = *(_DWORD *)(a3 + 12);
  v9 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v9;
  if (v9 >= v8)
  {
    v17 = HIDWORD(v5);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(v5) = v17;
    v9 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a3 + 4 * v9) = HIDWORD(v5);
  v10 = *(_DWORD *)(a3 + 12);
  v11 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v11;
  if (v11 >= v10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a3 + 4 * v11) = v6;
  v12 = *(_DWORD *)(a3 + 12);
  v13 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v13;
  if (v13 >= v12)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a3 + 4 * v13) = HIDWORD(v6);
  v14 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v14;
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * v14);
}

uint64_t sub_22EF78A20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if (a2)
    v5 = a2 - 24;
  else
    v5 = 0;
  sub_22EF78A9C(v5, a5);
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22EF78A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (a2)
    v4 = a2 - 24;
  else
    v4 = 0;
  sub_22EF78A9C(v4, a3);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22EF78A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == (a1 & 0xFFFFFFFFFFFFFFF0))
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 32);
  return sub_22EF64DA8(a2, v3 & 0x7FFF, HIWORD(v3), (v3 >> 15) & 1, v4);
}

uint64_t sub_22EF78AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  sub_22EF78B74(v5, a5, *(_QWORD *)(a1 + 16));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22EF78B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  sub_22EF78B74(v4, a3, *(_QWORD *)(a1 + 16));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

void sub_22EF78B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = a1 + 40;
  sub_22F114774(a2, *(_QWORD *)(a1 + 32), a1 + 40, *(unsigned int *)(a1 + 20), a3);
  if ((*(_BYTE *)(a1 + 18) & 8) != 0)
    sub_22E3CF554(a2, *(_QWORD *)(v5 + 24 * *(unsigned int *)(a1 + 20)));
}

uint64_t sub_22EF78BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v6 = 0;
  if (a2)
    v7 = a2 - 24;
  else
    v7 = 0;
  v8 = *(_DWORD *)(v7 + 16);
  if ((v8 & 0x8000000) != 0)
    v6 = *(_QWORD *)(v7 + 48);
  sub_22EF65834(a5, (v8 >> 19), *(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40), v6);
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22EF78C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v4 = 0;
  if (a2)
    v5 = a2 - 24;
  else
    v5 = 0;
  v6 = *(_DWORD *)(v5 + 16);
  if ((v6 & 0x8000000) != 0)
    v4 = *(_QWORD *)(v5 + 48);
  sub_22EF65834(a3, (v6 >> 19), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), v4);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22EF78C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;
  int v13;
  uint64_t v15;

  v5 = a5;
  v6 = a2 - 24;
  if (!a2)
    v6 = 0;
  v7 = *(_QWORD *)(v6 + 32);
  v8 = *(_DWORD *)(a5 + 8);
  if (v8 >= *(_DWORD *)(a5 + 12))
  {
    v12 = v7;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = v12;
    v5 = a5;
    v8 = *(_DWORD *)(a5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v5 + 4 * v8) = v7;
  v9 = *(_DWORD *)(v5 + 12);
  v10 = *(_DWORD *)(v5 + 8) + 1;
  *(_DWORD *)(v5 + 8) = v10;
  if (v10 >= v9)
  {
    v15 = v5;
    v13 = HIDWORD(v7);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(v7) = v13;
    v5 = v15;
    v10 = *(_DWORD *)(v15 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v5 + 4 * v10) = HIDWORD(v7);
  ++*(_DWORD *)(v5 + 8);
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22EF78D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  v4 = *(_QWORD *)(v3 + 32);
  v5 = *(_DWORD *)(a3 + 8);
  if (v5 >= *(_DWORD *)(a3 + 12))
  {
    v10 = a3;
    v12 = v4;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a3 = v10;
    v4 = v12;
    v5 = *(_DWORD *)(v10 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a3 + 4 * v5) = v4;
  v6 = *(_DWORD *)(a3 + 12);
  v7 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v7;
  if (v7 >= v6)
  {
    v11 = a3;
    v13 = HIDWORD(v4);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a3 = v11;
    HIDWORD(v4) = v13;
    v7 = *(_DWORD *)(v11 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a3 + 4 * v7) = HIDWORD(v4);
  v8 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v8;
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * v8);
}

uint64_t sub_22EF78E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  sub_22EF65DE8(a5, (*(_DWORD *)(v5 + 16) >> 19), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22EF78E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  sub_22EF65DE8(a3, (*(_DWORD *)(v4 + 16) >> 19), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22EF78EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  BOOL v7;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  v4 = *(_QWORD *)(v3 + 32);
  v5 = *(_DWORD *)(v3 + 20);
  v6 = v5 != 0;
  v7 = v5 != 0;
  LODWORD(v3) = v5 - 1;
  if (v7)
    v3 = v3;
  else
    v3 = 0;
  return sub_22EF6666C(a3, v4, v3 | (v6 << 32));
}

uint64_t sub_22EF78EE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  BOOL v9;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  v6 = *(_QWORD *)(v5 + 32);
  v7 = *(_DWORD *)(v5 + 20);
  v8 = v7 != 0;
  v9 = v7 != 0;
  LODWORD(v5) = v7 - 1;
  if (v9)
    v5 = v5;
  else
    v5 = 0;
  sub_22EF6666C(a5, v6, v5 | (v8 << 32));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22EF78F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  BOOL v8;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  v5 = *(_QWORD *)(v4 + 32);
  v6 = *(_DWORD *)(v4 + 20);
  v7 = v6 != 0;
  v8 = v6 != 0;
  LODWORD(v4) = v6 - 1;
  if (v8)
    v4 = v4;
  else
    v4 = 0;
  sub_22EF6666C(a3, v5, v4 | (v7 << 32));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22EF78F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = a2 - 32;
  if (!a2)
    v5 = 0;
  v6 = *(_QWORD *)(v5 + 40);
  v7 = *(unsigned __int8 **)(v5 + 24);
  v10 = 1;
  v9[0] = &off_24FAC6E70;
  v9[1] = a5;
  v11 = v6;
  sub_22F0E9FEC(v9, v7);
  return llvm::FoldingSetNodeID::operator==();
}

uint64_t sub_22EF78FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = a2 - 40;
  if (!a2)
    v5 = 0;
  v6 = *(_QWORD *)(v5 + 48);
  v7 = *(unsigned __int8 **)(v5 + 24);
  v10 = 1;
  v9[0] = &off_24FAC6E70;
  v9[1] = a5;
  v11 = v6;
  sub_22F0E9FEC(v9, v7);
  return llvm::FoldingSetNodeID::operator==();
}

uint64_t sub_22EF79060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 32;
  if (!a2)
    v5 = 0;
  sub_22F115380(a5, *(_QWORD *)(a1 + 16), *(_QWORD *)(v5 + 24), (*(_DWORD *)(v5 + 16) >> 19) & 3, (*(_DWORD *)(v5 + 16) >> 10) & 1, *(_QWORD *)(v5 + 40), v5 + 48, *(unsigned int *)(v5 + 20));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22EF790B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22F115380(a2, a3, *(_QWORD *)(a1 + 24), (*(_DWORD *)(a1 + 16) >> 19) & 3, (*(_DWORD *)(a1 + 16) >> 10) & 1, *(_QWORD *)(a1 + 40), a1 + 48, *(unsigned int *)(a1 + 20));
  return sub_22E3D0BF8(*(_QWORD **)a2, *(_QWORD *)a2 + 4 * *(unsigned int *)(a2 + 8));
}

_QWORD *sub_22EF7910C(_QWORD *a1, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *result;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;

  result = a1 + 1;
  if (result != a2 && a2[4] < a4)
  {
    while (1)
    {
      v6 = (_QWORD *)*result;
      if (!*result)
        break;
      while (1)
      {
        result = v6;
        if (v6[4] >= a4)
          break;
        v6 = (_QWORD *)v6[1];
        if (!v6)
          goto LABEL_19;
      }
    }
LABEL_22:
    *a3 = result;
    return result;
  }
  v7 = (_QWORD *)*a1;
  v8 = *a2;
  if (v7 == a2)
  {
    v10 = a2;
  }
  else
  {
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v11 = a2;
      do
      {
        v10 = (_QWORD *)v11[2];
        v12 = *v10 == (_QWORD)v11;
        v11 = v10;
      }
      while (v12);
    }
    if (v10[4] > a4)
    {
      while (1)
      {
        v13 = (_QWORD *)*result;
        if (!*result)
          break;
        while (1)
        {
          result = v13;
          if (v13[4] > a4)
            break;
          v13 = (_QWORD *)v13[1];
          if (!v13)
          {
LABEL_19:
            *a3 = result++;
            return result;
          }
        }
      }
      goto LABEL_22;
    }
  }
  if (v8)
  {
    *a3 = v10;
    return v10 + 1;
  }
  else
  {
    *a3 = a2;
    return a2;
  }
}

uint64_t sub_22EF791F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if (a2)
    v5 = a2 - 8;
  else
    v5 = 0;
  sub_22F0F05E4(v5, a5);
  return llvm::FoldingSetNodeID::operator==();
}

uint64_t sub_22EF7922C(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v6 = *a1;
    v7 = v3 - 1;
    v8 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v4 = (_QWORD *)(*a1 + 16 * v8);
    v9 = *v4;
    if (*a2 == *v4)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v9 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v9 == -8192;
        if (v12)
          v10 = v4;
        v13 = v8 + v11++;
        v8 = v13 & v7;
        v4 = (_QWORD *)(v6 + 16 * (v13 & v7));
        v9 = *v4;
        if (*a2 == *v4)
          goto LABEL_3;
      }
      result = 0;
      if (v10)
        v4 = v10;
    }
  }
  else
  {
    v4 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v4;
  return result;
}

_QWORD *sub_22EF792C8(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F37243C(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22EF79388(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F372600(a1, v4, &v4[2 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22EF79448(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F3727E8(a1, v4, &v4[2 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22EF79508(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 48 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 48 * v10;
      do
      {
        *result = 0;
        result[1] = 0;
        result += 6;
        v11 -= 48;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 48 * v3;
      v13 = (uint64_t)v4 + 16;
      do
      {
        if ((unint64_t)(*(_QWORD *)(v13 - 16) + 1) > 1 || *(_DWORD *)(v13 - 8) != 0)
        {
          v19 = 0;
          sub_22F372A24(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v13 - 16, &v19);
          v15 = v19;
          v16 = *(_QWORD *)(v13 - 16);
          *(_DWORD *)(v19 + 8) = *(_DWORD *)(v13 - 8);
          *(_QWORD *)v15 = v16;
          *(_QWORD *)(v15 + 16) = *(_QWORD *)v13;
          *(_OWORD *)(v15 + 24) = *(_OWORD *)(v13 + 8);
          *(_QWORD *)v13 = 0;
          *(_QWORD *)(v13 + 8) = 0;
          *(_DWORD *)(v13 + 16) = 0;
          ++*(_DWORD *)(a1 + 8);
          sub_22E3B3AD0(v13);
        }
        v13 += 48;
        v12 -= 48;
      }
      while (v12);
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(48 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v17 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v17)
    {
      v18 = 48 * v17;
      do
      {
        *result = 0;
        result[1] = 0;
        result += 6;
        v18 -= 48;
      }
      while (v18);
    }
  }
  return result;
}

unint64_t sub_22EF7968C(uint64_t a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int16 v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  uint64_t **v46;
  uint64_t v47;
  uint64_t **v48;
  unint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unsigned int v55;
  unsigned __int8 *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  _BYTE *v75;
  unsigned __int16 v76;
  unsigned __int8 v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  __int128 v81;
  _BYTE v82[96];
  uint64_t *v83;
  uint64_t v84;
  _QWORD v85[6];

  v85[4] = *MEMORY[0x24BDAC8D0];
  v80 = 0;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              while (1)
              {
                v6 = a2;
                v7 = sub_22E491354((unsigned int *)&v80, a2);
                v8 = v7;
                v9 = *(_DWORD *)(v7 + 16);
                if (v7 && v9 == 24)
                  goto LABEL_4;
                if (!v7 || v9 != 53)
                  break;
                a2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 64) + 48) & 0xFFFFFFFFFFFFFFF0;
              }
              if (!v7 || v9 != 37)
                break;
              a2 = *(_QWORD *)(v7 + 32);
            }
            if (!v7 || v9 != 28)
              break;
            a2 = *(_QWORD *)(v7 + 24);
          }
          if (!v7 || v9 != 43)
            break;
          a2 = *(_QWORD *)(v7 + 8);
        }
        if ((!v7 || v9 != 7) && (!v7 || (v9 & 0xFE) != 0))
          break;
LABEL_4:
        a2 = *(_QWORD *)(v7 + 40);
      }
      if (!v7 || v9 != 14)
        break;
      a2 = *(_QWORD *)(v7 + 24);
      if (a2 <= 0xF)
        goto LABEL_133;
    }
    if (v7 && v9 - 27 >= 0xFFFFFFFE)
    {
      v79 = 0;
      v78 = *(_QWORD *)(v7 + 24);
      v10 = sub_22EF7968C(a1);
      v11 = sub_22F114F34(&v78);
      if (v11 >= 0x100u)
        v10 = sub_22F369798(a1, dword_22F46A4D0[(char)v11], v10, v10);
      v77 = 0;
      v83 = v85;
      v84 = 0x400000000;
      if (*(_BYTE *)(v8 + 16) == 26)
      {
        v12 = (unsigned __int16)(*(_QWORD *)(v8 + 16) >> 38);
        if ((unsigned __int16)(*(_QWORD *)(v8 + 16) >> 38))
        {
          v75 = a3;
          v15 = (_QWORD *)(v8 + 40);
          v16 = 8 * v12;
          do
          {
            *(_QWORD *)&v81 = *v15;
            v17 = sub_22EF7968C(a1);
            v18 = sub_22F114F34(&v81);
            if (v18 >= 0x100u)
              v17 = sub_22F369798(a1, dword_22F46A4D0[(char)v18], v17, v17);
            v12 = v84;
            if (v84 >= (unint64_t)HIDWORD(v84))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v12 = v84;
            }
            v83[v12] = v17;
            LODWORD(v12) = v84 + 1;
            LODWORD(v84) = v84 + 1;
            ++v15;
            v16 -= 8;
          }
          while (v16);
          v13 = v77;
          v14 = v83;
          a3 = v75;
        }
        else
        {
          v13 = 0;
          v14 = v85;
        }
        if (v79 || v13)
        {
          *a3 = 1;
          v58 = v12;
          sub_22E4913B4(v8, (uint64_t)&v81);
          v57 = sub_22EF63D8C(a1, v10, v14, v58, &v81, 0);
          goto LABEL_121;
        }
        if (v14 != v85)
          free(v14);
      }
      else if (v79)
      {
        *a3 = 1;
        v76 = *(_DWORD *)(v8 + 16) >> 19;
        v57 = sub_22F369930(a1, v10, &v76);
LABEL_121:
        v6 = v57;
        v59 = v83;
        if (v83 == v85)
          goto LABEL_133;
LABEL_126:
        free(v59);
        goto LABEL_133;
      }
      v9 = *(_DWORD *)(v8 + 16);
    }
    if (v8 && (v9 & 0x800FF) == 0x2E)
      break;
    if (v8 && (v9 & 0xFEu) - 6 >= 0xFFFFFFFC)
    {
      v54 = sub_22EF7968C(a1);
      v55 = *(_DWORD *)(v8 + 16);
      switch(v55)
      {
        case 5u:
          v60 = sub_22EF60740(a1, v54, *(_DWORD **)(v8 + 40), (v55 >> 22) & 7, (v55 >> 19) & 7, *(_QWORD *)(v8 + 48));
          break;
        case 3u:
          v60 = sub_22EF6042C(a1, v54, *(unsigned __int8 **)(v8 + 48), (v55 >> 22) & 7, (v55 >> 19) & 7, *(_QWORD *)(v8 + 56));
          break;
        case 2u:
          if ((v55 & 0x2000000) != 0)
            v56 = *(unsigned __int8 **)(v8 + 56);
          else
            v56 = 0;
          v60 = sub_22EF5FE30(a1, v54, (const llvm::APInt *)(v8 + 40), v56, (v55 >> 22) & 7, (v55 >> 19) & 7);
          break;
        default:
          v60 = sub_22EF6096C(a1, v54, (v55 >> 22) & 7, (v55 >> 19) & 7, 0, 0, 0);
          break;
      }
      v6 = v60;
      goto LABEL_133;
    }
    v19 = sub_22F36E1B8(a1);
    v20 = *(_QWORD *)(v19 + 48);
    if (v20)
      v21 = v20 & 0xFFFFFFFFFFFFFFF0;
    else
      v21 = sub_22EF6462C(a1, v19);
    v22 = v8 & 0xFFFFFFFFFFFFFFF0;
    if ((v8 & 0xFFFFFFFFFFFFFFF0) == v21)
      goto LABEL_133;
    v23 = sub_22F36E27C(a1);
    v24 = *(_QWORD *)(v23 + 48);
    v25 = v24 ? v24 & 0xFFFFFFFFFFFFFFF0 : sub_22EF6462C(a1, v23);
    if (v22 == v25)
      goto LABEL_133;
    v26 = sub_22F36E228(a1);
    v27 = *(_QWORD *)(v26 + 48);
    v28 = v27 ? v27 & 0xFFFFFFFFFFFFFFF0 : sub_22EF6462C(a1, v26);
    if (v22 == v28)
      goto LABEL_133;
    v29 = sub_22F36E2EC(a1);
    if (v22 == sub_22F36D148(a1, v29, 0))
      goto LABEL_133;
    v30 = sub_22EF6D84C(a1);
    v31 = *(_QWORD *)(v30 + 48);
    v32 = v31 ? v31 & 0xFFFFFFFFFFFFFFF0 : sub_22EF6462C(a1, v30);
    if (v22 == v32)
      goto LABEL_133;
    v33 = sub_22F36E36C(a1);
    v34 = *(_QWORD *)(v33 + 48);
    v35 = v34 ? v34 & 0xFFFFFFFFFFFFFFF0 : sub_22EF6462C(a1, v33);
    if (v22 == v35)
      goto LABEL_133;
    v36 = *(_DWORD *)(v8 + 16);
    switch((char)v36)
    {
      case 28:
      case 49:
        a2 = *(_QWORD *)(v8 + 24);
        goto LABEL_86;
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 36:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 44:
      case 45:
      case 47:
      case 52:
        goto LABEL_133;
      case 35:
      case 43:
        a2 = *(_QWORD *)(v8 + 8);
        goto LABEL_86;
      case 37:
      case 54:
        goto LABEL_85;
      case 46:
        if ((v36 & 0x400) != 0)
        {
          v37 = v36 & 0x80000;
          if ((v36 & 0x80000) == 0 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 27)
            goto LABEL_133;
        }
        else
        {
          v37 = v36 & 0x80000;
        }
        if (v37)
          v44 = (unint64_t *)(v8 + 24 * *(unsigned int *)(v8 + 20) + 40);
        else
          v44 = (unint64_t *)(v8 + 8);
        a2 = *v44;
LABEL_86:
        v39 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
        v40 = *(unsigned __int8 *)(v39 + 16);
        if ((v40 - 55) < 2)
          goto LABEL_133;
        if ((v40 & 0xFE) == 0x2C
          || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C
          && (v39 = sub_22F10CF48(v39)) != 0)
        {
          v41 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
          if (v41 && *(_BYTE *)(v41 + 16) == 50)
          {
            v42 = *(_QWORD *)(sub_22F114198(*(_QWORD *)(v39 + 24)) + 120);
            v43 = (v42 & 4) != 0 ? 0 : v42 & 0xFFFFFFFFFFFFFFF8;
            if (v43 == *(_QWORD *)(v41 + 24))
              goto LABEL_133;
          }
        }
        *a3 = 1;
        break;
      case 48:
        v38 = *(_QWORD *)(v8 + 24);
        if ((*(_BYTE *)(v38 + 1) & 0x80) != 0)
          goto LABEL_133;
        a2 = *(_QWORD *)(v38 + 8);
        goto LABEL_86;
      case 50:
        a2 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v8 + 24) + 80) & 0xFFFFFFFFFFFFFFF8)
                       + ((2 * *(_QWORD *)(*(_QWORD *)(v8 + 24) + 80)) & 8));
        goto LABEL_86;
      case 51:
        if ((v36 & 0x400) != 0)
          goto LABEL_133;
LABEL_85:
        a2 = *(_QWORD *)(v8 + 32);
        goto LABEL_86;
      case 53:
        a2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 64) + 48) & 0xFFFFFFFFFFFFFFF0;
        goto LABEL_86;
      default:
        switch(*(_DWORD *)(v8 + 16))
        {
          case 0u:
          case 1u:
          case 7u:
          case 0x18u:
            a2 = *(_QWORD *)(v8 + 40);
            goto LABEL_86;
          case 8u:
          case 0x16u:
          case 0x17u:
            goto LABEL_85;
          case 0xDu:
            if ((*(_BYTE *)(*(_QWORD *)(v8 + 24) + 1) & 0x40) == 0)
              goto LABEL_85;
            break;
          case 0xEu:
            a2 = *(_QWORD *)(v8 + 24);
            if (a2 > 0xF)
              goto LABEL_86;
            break;
          case 0xFu:
            a2 = *(_QWORD *)(v8 + 24);
            if (a2 >= 0x10)
              goto LABEL_86;
            break;
          default:
            goto LABEL_133;
        }
        goto LABEL_133;
    }
  }
  LOBYTE(v78) = 0;
  *(_QWORD *)&v81 = v82;
  *((_QWORD *)&v81 + 1) = 0x400000000;
  v45 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v45)
  {
    v46 = (uint64_t **)(v8 + 40);
    do
    {
      if (*(_DWORD *)v46 == 1)
      {
        v47 = sub_22EF7968C(a1);
        LODWORD(v83) = 1;
        v84 = v47;
        v48 = &v83;
      }
      else
      {
        v48 = v46;
      }
      v49 = sub_22E4EF088((uint64_t)&v81, (unint64_t)v48, 1);
      v50 = v81 + 24 * DWORD2(v81);
      v51 = *(_OWORD *)v49;
      *(_QWORD *)(v50 + 16) = *(_QWORD *)(v49 + 16);
      *(_OWORD *)v50 = v51;
      v52 = ++DWORD2(v81);
      v46 += 3;
      --v45;
    }
    while (v45);
    v53 = (uint64_t *)v81;
    if ((_BYTE)v78)
    {
      *a3 = 1;
      v6 = sub_22EF6512C(a1, *(_QWORD *)(v8 + 32), (uint64_t)v53, v52, v6);
      v53 = (uint64_t *)v81;
    }
    if (v53 != (uint64_t *)v82)
    {
      v59 = v53;
      goto LABEL_126;
    }
  }
LABEL_133:
  v61 = v6 & 0xFFFFFFFFFFFFFFF0;
  v62 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  v63 = *(unsigned __int8 *)(v62 + 16);
  if (v62 && v63 == 39)
    goto LABEL_154;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v62 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
    goto LABEL_138;
  v62 = sub_22F10CF48(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0));
  if (v62)
  {
LABEL_154:
    v68 = sub_22EF7968C(a1);
    v67 = sub_22EF5B848(a1, v68, *(_DWORD *)(v62 + 40));
    goto LABEL_170;
  }
  v62 = *(_QWORD *)v61;
  v63 = *(unsigned __int8 *)(*(_QWORD *)v61 + 16);
LABEL_138:
  if (v63 == 32)
    goto LABEL_155;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v62 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
    goto LABEL_142;
  if (sub_22F10CF48(v62))
  {
LABEL_155:
    v69 = sub_22EF7968C(a1);
    v67 = sub_22F36CC4C(a1, v69);
    goto LABEL_170;
  }
  v62 = *(_QWORD *)v61;
  v63 = *(unsigned __int8 *)(*(_QWORD *)v61 + 16);
LABEL_142:
  if (v63 == 40)
    goto LABEL_156;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v62 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 40)
    goto LABEL_146;
  v62 = sub_22F10CF48(v62);
  if (v62)
  {
LABEL_156:
    if ((*(_BYTE *)(v62 + 18) & 0x10) != 0)
    {
      do
      {
        while (1)
        {
          v62 = *(_QWORD *)(*(_QWORD *)(v62 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (!v62)
            break;
          v70 = *(_DWORD *)(v62 + 16);
          if ((v70 & 0xFE) != 0x28)
            break;
          if ((v70 & 0x100000) == 0)
            goto LABEL_162;
        }
        v62 = sub_22F10CF48(v62);
      }
      while ((*(_DWORD *)(v62 + 16) & 0x100000) != 0);
    }
LABEL_162:
    v71 = sub_22EF7968C(a1);
    v67 = sub_22EF5F8C4(a1, v71, 1);
    goto LABEL_170;
  }
  v62 = *(_QWORD *)v61;
  v63 = *(unsigned __int8 *)(*(_QWORD *)v61 + 16);
LABEL_146:
  if (v63 == 41)
    goto LABEL_163;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v62 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 41)
  {
    v62 = sub_22F10CF48(v62);
    if (!v62)
    {
      v62 = *(_QWORD *)v61;
      goto LABEL_150;
    }
LABEL_163:
    if ((*(_BYTE *)(v62 + 18) & 0x10) != 0)
    {
      do
      {
        while (1)
        {
          v62 = *(_QWORD *)(*(_QWORD *)(v62 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (!v62)
            break;
          v72 = *(_DWORD *)(v62 + 16);
          if ((v72 & 0xFE) != 0x28)
            break;
          if ((v72 & 0x100000) == 0)
            goto LABEL_169;
        }
        v62 = sub_22F10CF48(v62);
      }
      while ((*(_DWORD *)(v62 + 16) & 0x100000) != 0);
    }
LABEL_169:
    v73 = sub_22EF7968C(a1);
    v67 = sub_22EF5FB8C(a1, v73);
LABEL_170:
    v6 = v67;
  }
  else
  {
LABEL_150:
    v64 = sub_22E4EBB74(v62);
    if (v64)
    {
      v65 = v64;
      if (*(_QWORD *)(*(_QWORD *)(v64 + 24) & 0xFFFFFFFFFFFFFFF0) != v64 && !*a3)
      {
        v66 = sub_22EF7968C(a1);
        v67 = sub_22EF667E8(a1, v66, (uint64_t *)(v65 + 48), (*(_QWORD *)(v65 + 16) >> 19) & 0x7FLL, (uint64_t *)(v65 + 48 + 8 * ((*(_QWORD *)(v65 + 16) >> 19) & 0x7FLL)), *(_QWORD *)(v65 + 16) >> 26, HIDWORD(*(_QWORD *)(v65 + 16)) & 1);
        goto LABEL_170;
      }
    }
  }
  return sub_22F40A8A8((uint64_t)&v80, a1, v6);
}

void sub_22EF7A0B8(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _BYTE v10[72];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  sub_22F242C48((uint64_t)v10, a9);
  __asm { BR              X10 }
}

void sub_22EF7A14C()
{
  std::string *v0;
  uint64_t v1;
  void *v2;
  _QWORD *v3;
  _WORD *v4;
  llvm::raw_ostream *v5;
  const char *v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  _QWORD *v12;
  void *v13;
  _BYTE v14[24];
  uint64_t v15;
  _QWORD *v16;
  void *v17[2];
  char v18;

  sub_22F118CD0(v0, (uint64_t)v17);
  v2 = (void *)(v18 & 0x7F);
  if (v18 < 0)
    v2 = v17[1];
  if (v2)
  {
    v3 = v16;
    if ((unint64_t)(v15 - (_QWORD)v16) > 0xC)
    {
      *v16 = *(_QWORD *)"address space";
      *(_QWORD *)((char *)v3 + 5) = *(_QWORD *)"ss space";
      v4 = (_WORD *)((char *)v16 + 13);
      v16 = (_QWORD *)((char *)v16 + 13);
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v14, "address space");
      v4 = v16;
    }
    if ((unint64_t)(v15 - (_QWORD)v4) > 1)
    {
      *v4 = 10016;
      v16 = (_QWORD *)((char *)v16 + 2);
      v5 = (llvm::raw_ostream *)v14;
    }
    else
    {
      v5 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)v14, " '");
    }
    if (v18 >= 0)
      v6 = (const char *)v17;
    else
      v6 = (const char *)v17[0];
    v7 = (llvm::raw_ostream *)llvm::raw_ostream::write(v5, v6);
    v8 = (_BYTE *)*((_QWORD *)v7 + 4);
    if (*((_BYTE **)v7 + 3) == v8)
    {
      v9 = "'";
LABEL_20:
      llvm::raw_ostream::write(v7, v9);
      goto LABEL_21;
    }
    *v8 = 39;
    ++*((_QWORD *)v7 + 4);
  }
  else
  {
    v10 = *(_QWORD *)(v1 + 2000);
    v11 = "default";
    if ((*(_DWORD *)(v10 + 52) & 0x40000000) == 0 && (*(_BYTE *)(v10 + 104) & 0x20) == 0)
      v11 = "generic";
    v12 = v16;
    if ((unint64_t)(v15 - (_QWORD)v16) > 6)
    {
      *(_DWORD *)v16 = *(_DWORD *)v11;
      *(_DWORD *)((char *)v12 + 3) = *(_DWORD *)(v11 + 3);
      v13 = (char *)v16 + 7;
      v16 = (_QWORD *)((char *)v16 + 7);
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v14, v11);
      v13 = v16;
    }
    if ((unint64_t)(v15 - (_QWORD)v13) <= 0xD)
    {
      v9 = " address space";
      v7 = (llvm::raw_ostream *)v14;
      goto LABEL_20;
    }
    qmemcpy(v13, " address space", 14);
    v16 = (_QWORD *)((char *)v16 + 14);
  }
LABEL_21:
  if (v18 < 0)
    operator delete(v17[0]);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v14);
}

void sub_22EF7AF5C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  std::string::size_type size;
  int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  std::string *p_s1;
  uint64_t v24;
  std::string::size_type v25;
  unsigned __int8 *v26;
  std::string *v27;
  int v28;
  void *v29;
  uint64_t v30;
  std::string::size_type v31;
  uint64_t v32;
  __int128 *p_p;
  std::string *v34;
  void *v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  std::string::size_type v41;
  uint64_t v42;
  unsigned __int8 *v43;
  std::string *v44;
  void *v45;
  std::string *v46;
  std::string::size_type v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  std::string::size_type v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  const char *v58;
  llvm::raw_ostream *v59;
  const char *v60;
  llvm::raw_ostream *v61;
  uint64_t v62;
  _BYTE *v63;
  llvm::raw_ostream *v64;
  llvm::raw_ostream *v65;
  _WORD *v66;
  std::string *v67;
  llvm::raw_ostream *v68;
  llvm::raw_ostream *v69;
  _WORD *v70;
  void *v71;
  size_t v72;
  _BYTE *v73;
  std::string *v74;
  std::string::size_type v75;
  char v76;
  unint64_t v77;
  uint64_t *v79;
  std::string __s1;
  _BYTE *v82;
  _BYTE *v83;
  char v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  std::string v88;
  std::string v89;
  unint64_t v90;
  char v91;
  __int128 __p;
  uint64_t v93;
  _BYTE v94[24];
  uint64_t v95;
  unint64_t v96;
  uint64_t v97[2];
  std::string v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v79 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v77 = a3 & 7;
  v12 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) | v77;
  v95 = v12;
  v96 = a3;
  v13 = a2 + 15104;
  memset(v94, 0, sizeof(v94));
  sub_22F119374((uint64_t *)&v96, (__int128 *)v94, a2 + 15104);
  __p = 0uLL;
  v93 = 0;
  sub_22F119374(&v95, &__p, v13);
  v14 = 0;
  if (a7)
  {
    v15 = &a6[a7];
    while (1)
    {
      v16 = *a6;
      v88.__r_.__value_.__r.__words[0] = v16;
      if (v16 < 0x10 || v16 == a3)
        goto LABEL_71;
      v97[0] = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFF0) + 8) | v16 & 7;
      if (v97[0] == v12)
        goto LABEL_71;
      memset(&__s1, 0, sizeof(__s1));
      sub_22F119374((uint64_t *)&v88, (__int128 *)&__s1, v13);
      v91 = 0;
      v90 = sub_22EF7968C(a2, v16, &v91);
      memset(&v98, 0, sizeof(v98));
      sub_22F119374((uint64_t *)&v90, (__int128 *)&v98, v13);
      v18 = *((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x7F;
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x7F;
      else
        size = __s1.__r_.__value_.__l.__size_;
      v20 = v94[23];
      if (v94[23] >= 0)
        v21 = v94[23] & 0x7F;
      else
        v21 = *(_QWORD *)&v94[8];
      if (size == v21)
      {
        if (v94[23] >= 0)
          v22 = v94;
        else
          v22 = *(unsigned __int8 **)v94;
        if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (!memcmp(__s1.__r_.__value_.__l.__data_, v22, __s1.__r_.__value_.__l.__size_))
            goto LABEL_42;
        }
        else
        {
          if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x7F) == 0)
            goto LABEL_42;
          p_s1 = &__s1;
          while (p_s1->__r_.__value_.__s.__data_[0] == *v22)
          {
            p_s1 = (std::string *)((char *)p_s1 + 1);
            ++v22;
            if (!--v18)
              goto LABEL_42;
          }
        }
      }
      v24 = *((_BYTE *)&v98.__r_.__value_.__s + 23) & 0x7F;
      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = *((_BYTE *)&v98.__r_.__value_.__s + 23) & 0x7F;
      else
        v25 = v98.__r_.__value_.__l.__size_;
      if (v25 != v21)
        goto LABEL_38;
      v26 = v20 >= 0 ? v94 : *(unsigned __int8 **)v94;
      if ((*((_BYTE *)&v98.__r_.__value_.__s + 23) & 0x80) == 0)
        break;
      v29 = (void *)v98.__r_.__value_.__r.__words[0];
      if (!memcmp(v98.__r_.__value_.__l.__data_, v26, v98.__r_.__value_.__l.__size_))
        goto LABEL_42;
      v28 = 3;
LABEL_67:
      operator delete(v29);
LABEL_68:
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      if (v28 != 3)
        goto LABEL_72;
LABEL_71:
      if (++a6 == v15)
        goto LABEL_72;
    }
    if ((*((_BYTE *)&v98.__r_.__value_.__s + 23) & 0x7F) != 0)
    {
      v27 = &v98;
      while (v27->__r_.__value_.__s.__data_[0] == *v26)
      {
        v27 = (std::string *)((char *)v27 + 1);
        ++v26;
        if (!--v24)
          goto LABEL_42;
      }
LABEL_38:
      v28 = 3;
      if ((*((_BYTE *)&v98.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_68;
LABEL_66:
      v29 = (void *)v98.__r_.__value_.__r.__words[0];
      goto LABEL_67;
    }
LABEL_42:
    memset(&v89, 0, sizeof(v89));
    sub_22F119374(v97, (__int128 *)&v89, v13);
    v30 = *((_BYTE *)&v89.__r_.__value_.__s + 23) & 0x7F;
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = *((_BYTE *)&v89.__r_.__value_.__s + 23) & 0x7F;
    else
      v31 = v89.__r_.__value_.__l.__size_;
    v32 = HIBYTE(v93) & 0x7F;
    if (v93 < 0)
      v32 = *((_QWORD *)&__p + 1);
    if (v31 == v32)
    {
      if (v93 >= 0)
        p_p = &__p;
      else
        p_p = (__int128 *)__p;
      if ((*((_BYTE *)&v89.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v35 = (void *)v89.__r_.__value_.__r.__words[0];
        v36 = memcmp(v89.__r_.__value_.__l.__data_, p_p, v89.__r_.__value_.__l.__size_);
        v14 |= v36 != 0;
        if (v36)
          v28 = 2;
        else
          v28 = 3;
LABEL_63:
        operator delete(v35);
        goto LABEL_65;
      }
      if ((*((_BYTE *)&v89.__r_.__value_.__s + 23) & 0x7F) == 0)
      {
        v28 = 3;
LABEL_65:
        if ((*((_BYTE *)&v98.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_68;
        goto LABEL_66;
      }
      v34 = &v89;
      while (v34->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)p_p)
      {
        v34 = (std::string *)((char *)v34 + 1);
        p_p = (__int128 *)((char *)p_p + 1);
        if (!--v30)
        {
          v28 = 3;
          if ((*((_BYTE *)&v89.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_65;
          goto LABEL_59;
        }
      }
    }
    v28 = 2;
    v14 = 1;
    if ((*((_BYTE *)&v89.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_65;
LABEL_59:
    v35 = (void *)v89.__r_.__value_.__r.__words[0];
    goto LABEL_63;
  }
LABEL_72:
  if (a5)
  {
    v37 = 16 * a5;
    v38 = (_QWORD *)(a4 + 8);
    while (*((_DWORD *)v38 - 2) != 9 || *v38 != a3)
    {
      v38 += 2;
      v37 -= 16;
      if (!v37)
        goto LABEL_77;
    }
LABEL_146:
    std::operator+<char>();
    v74 = std::string::append(&__s1, "'");
    v75 = v74->__r_.__value_.__r.__words[0];
    v98.__r_.__value_.__r.__words[0] = v74->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v98.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v74->__r_.__value_.__r.__words[1] + 7);
    v76 = HIBYTE(v74->__r_.__value_.__r.__words[2]);
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    if ((v94[23] & 0x80000000) != 0)
      operator delete(*(void **)v94);
    *(_QWORD *)v94 = v75;
    *(_QWORD *)&v94[8] = v98.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v94[15] = *(std::string::size_type *)((char *)v98.__r_.__value_.__r.__words + 7);
    v94[23] = v76;
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s1.__r_.__value_.__l.__data_);
    *(_OWORD *)a1 = *(_OWORD *)v94;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)&v94[16];
    memset(v94, 0, sizeof(v94));
    goto LABEL_151;
  }
LABEL_77:
  v91 = 0;
  v39 = sub_22EF7968C(a2, a3, &v91);
  v90 = v39;
  if (!((v91 != 0) | v14 & 1))
    goto LABEL_113;
  if (v39 == a3)
    v90 = v79[1] | v77;
  memset(&__s1, 0, sizeof(__s1));
  sub_22F119374((uint64_t *)&v90, (__int128 *)&__s1, v13);
  v40 = *((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x7F;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = *((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x7F;
  else
    v41 = __s1.__r_.__value_.__l.__size_;
  v42 = v94[23] & 0x7F;
  if (v94[23] < 0)
    v42 = *(_QWORD *)&v94[8];
  if (v41 == v42)
  {
    if (v94[23] >= 0)
      v43 = v94;
    else
      v43 = *(unsigned __int8 **)v94;
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x7F) != 0)
      {
        v44 = &__s1;
        while (v44->__r_.__value_.__s.__data_[0] == *v43)
        {
          v44 = (std::string *)((char *)v44 + 1);
          ++v43;
          if (!--v40)
            goto LABEL_113;
        }
        goto LABEL_96;
      }
LABEL_113:
      v55 = sub_22E3E4B64(*v79);
      if (v55)
      {
        v56 = v55;
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        LODWORD(__s1.__r_.__value_.__r.__words[1]) = 0;
        v84 = 0;
        v85 = 0;
        v86 = 1;
        v82 = 0;
        v83 = 0;
        __s1.__r_.__value_.__r.__words[2] = 0;
        __s1.__r_.__value_.__r.__words[0] = MEMORY[0x24BED83D8] + 16;
        v87 = a1;
        llvm::raw_ostream::SetBufferAndMode();
        v57 = *(_DWORD *)(v56 + 20);
        if (v57 <= 1)
          v58 = "value";
        else
          v58 = "values";
        if (v82 == v83)
        {
          v59 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)&__s1, "'");
        }
        else
        {
          *v83++ = 39;
          v59 = (llvm::raw_ostream *)&__s1;
        }
        if (v94[23] >= 0)
          v60 = v94;
        else
          v60 = *(const char **)v94;
        v61 = (llvm::raw_ostream *)llvm::raw_ostream::write(v59, v60);
        v62 = *((_QWORD *)v61 + 4);
        if ((unint64_t)(*((_QWORD *)v61 + 3) - v62) > 2)
        {
          *(_BYTE *)(v62 + 2) = 40;
          *(_WORD *)v62 = 8231;
          *((_QWORD *)v61 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v61, "' (");
        }
        v63 = v83;
        if ((*(_DWORD *)(v56 + 16) & 0x780000) == 0x80000)
        {
          if ((unint64_t)(v82 - v83) > 6)
          {
            *(_DWORD *)(v83 + 3) = 543450475;
            *(_DWORD *)v63 = 1801675120;
            v63 = v83 + 7;
            v83 += 7;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__s1, "packed ");
            v63 = v83;
          }
        }
        if ((unint64_t)(v82 - v63) > 9)
        {
          *((_WORD *)v63 + 4) = 8294;
          *(_QWORD *)v63 = *(_QWORD *)"vector of ";
          v83 += 10;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__s1, "vector of ");
        }
        v64 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
        v65 = v64;
        v66 = (_WORD *)*((_QWORD *)v64 + 4);
        if (*((_QWORD *)v64 + 3) - (_QWORD)v66 > 1uLL)
        {
          *v66 = 10016;
          *((_QWORD *)v64 + 4) += 2;
        }
        else
        {
          v65 = (llvm::raw_ostream *)llvm::raw_ostream::write(v64, " '");
        }
        v89.__r_.__value_.__r.__words[0] = *(_QWORD *)(v56 + 32);
        memset(&v98, 0, sizeof(v98));
        sub_22F119374((uint64_t *)&v89, (__int128 *)&v98, v13);
        if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v67 = &v98;
        else
          v67 = (std::string *)v98.__r_.__value_.__r.__words[0];
        v68 = (llvm::raw_ostream *)llvm::raw_ostream::write(v65, (const char *)v67);
        v69 = v68;
        v70 = (_WORD *)*((_QWORD *)v68 + 4);
        if (*((_QWORD *)v68 + 3) - (_QWORD)v70 > 1uLL)
        {
          *v70 = 8231;
          v71 = (void *)(*((_QWORD *)v68 + 4) + 2);
          *((_QWORD *)v69 + 4) = v71;
        }
        else
        {
          v69 = (llvm::raw_ostream *)llvm::raw_ostream::write(v68, "' ");
          v71 = (void *)*((_QWORD *)v69 + 4);
        }
        if (v57 <= 1)
          v72 = 5;
        else
          v72 = 6;
        if (v72 <= *((_QWORD *)v69 + 3) - (_QWORD)v71)
        {
          memcpy(v71, v58, v72);
          v73 = (_BYTE *)(*((_QWORD *)v69 + 4) + v72);
          *((_QWORD *)v69 + 4) = v73;
        }
        else
        {
          v69 = (llvm::raw_ostream *)llvm::raw_ostream::write(v69, v58);
          v73 = (_BYTE *)*((_QWORD *)v69 + 4);
        }
        if (*((_BYTE **)v69 + 3) == v73)
        {
          llvm::raw_ostream::write(v69, ")");
        }
        else
        {
          *v73 = 41;
          ++*((_QWORD *)v69 + 4);
        }
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v98.__r_.__value_.__l.__data_);
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__s1);
        goto LABEL_151;
      }
      goto LABEL_146;
    }
    v45 = (void *)__s1.__r_.__value_.__r.__words[0];
    if (!memcmp(__s1.__r_.__value_.__l.__data_, v43, __s1.__r_.__value_.__l.__size_))
    {
      operator delete(v45);
      goto LABEL_113;
    }
  }
LABEL_96:
  std::operator+<char>();
  v46 = std::string::append(&v88, "' (aka '");
  v47 = v46->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v89.__r_.__value_.__l.__data_ = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  v89.__r_.__value_.__r.__words[2] = v47;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = &__s1;
  else
    v48 = (std::string *)__s1.__r_.__value_.__r.__words[0];
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = *((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x7F;
  else
    v49 = __s1.__r_.__value_.__l.__size_;
  v50 = std::string::append(&v89, (const std::string::value_type *)v48, v49);
  v51 = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v98.__r_.__value_.__l.__data_ = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v98.__r_.__value_.__r.__words[2] = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  v52 = std::string::append(&v98, "')");
  v53 = v52->__r_.__value_.__r.__words[0];
  v97[0] = v52->__r_.__value_.__l.__size_;
  *(uint64_t *)((char *)v97 + 7) = *(std::string::size_type *)((char *)&v52->__r_.__value_.__r.__words[1] + 7);
  v54 = HIBYTE(v52->__r_.__value_.__r.__words[2]);
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  if ((v94[23] & 0x80000000) != 0)
    operator delete(*(void **)v94);
  *(_QWORD *)v94 = v53;
  *(_QWORD *)&v94[8] = v97[0];
  *(_QWORD *)&v94[15] = *(uint64_t *)((char *)v97 + 7);
  v94[23] = v54;
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  *(_OWORD *)a1 = *(_OWORD *)v94;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)&v94[16];
  memset(v94, 0, sizeof(v94));
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
LABEL_151:
  if (SHIBYTE(v93) < 0)
    operator delete((void *)__p);
  if ((v94[23] & 0x80000000) != 0)
    operator delete(*(void **)v94);
}

__n128 sub_22EF7B938(char **a1, unint64_t a2)
{
  char *v2;
  unsigned int v4;
  char *v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  char *v11;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v2 = (char *)a2;
  v4 = *((_DWORD *)a1 + 2);
  v5 = *a1;
  if (v4 >= *((_DWORD *)a1 + 3))
  {
    v11 = &v5[168 * v4];
    v13 = (unint64_t)v5 <= a2 && (unint64_t)v11 > a2;
    if (v13)
      v14 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a2 - (_QWORD)v5) >> 3);
    else
      v14 = -1;
    v15 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
    v5 = (char *)v15;
    v16 = *a1;
    v17 = *((_DWORD *)a1 + 2);
    if (v17)
    {
      v18 = &v16[168 * v17];
      v19 = v15;
      do
      {
        *(_OWORD *)v19 = *(_OWORD *)v16;
        *(_OWORD *)(v19 + 16) = *((_OWORD *)v16 + 1);
        *(_DWORD *)(v19 + 40) = *((_DWORD *)v16 + 10);
        *(_QWORD *)(v19 + 32) = *((_QWORD *)v16 + 4);
        *((_DWORD *)v16 + 10) = 0;
        *(_BYTE *)(v19 + 44) = v16[44];
        v20 = *((_OWORD *)v16 + 3);
        v21 = *((_OWORD *)v16 + 4);
        *(_DWORD *)(v19 + 79) = *(_DWORD *)(v16 + 79);
        *(_OWORD *)(v19 + 48) = v20;
        *(_OWORD *)(v19 + 64) = v21;
        *(_OWORD *)(v19 + 88) = *(_OWORD *)(v16 + 88);
        *(_DWORD *)(v19 + 112) = *((_DWORD *)v16 + 28);
        *(_QWORD *)(v19 + 104) = *((_QWORD *)v16 + 13);
        *((_DWORD *)v16 + 28) = 0;
        *(_BYTE *)(v19 + 116) = v16[116];
        v22 = *(_OWORD *)(v16 + 120);
        v23 = *(_OWORD *)(v16 + 136);
        *(_DWORD *)(v19 + 151) = *(_DWORD *)(v16 + 151);
        *(_OWORD *)(v19 + 136) = v23;
        *(_OWORD *)(v19 + 120) = v22;
        *(_BYTE *)(v19 + 160) = v16[160];
        v16 += 168;
        v19 += 168;
      }
      while (v16 != v18);
      v16 = *a1;
      v24 = *((_DWORD *)a1 + 2);
      if (v24)
      {
        v25 = 168 * v24;
        do
        {
          v26 = &v16[v25];
          if (*(_DWORD *)&v16[v25 - 56] >= 0x41u)
          {
            v27 = *((_QWORD *)v26 - 8);
            if (v27)
              MEMORY[0x2348A0E84](v27, 0x1000C8000313F17);
          }
          if (*((_DWORD *)v26 - 32) >= 0x41u)
          {
            v28 = *(_QWORD *)&v16[v25 - 136];
            if (v28)
              MEMORY[0x2348A0E84](v28, 0x1000C8000313F17);
          }
          v25 -= 168;
        }
        while (v25);
        v16 = *a1;
      }
    }
    if (v16 != (char *)(a1 + 2))
      free(v16);
    *a1 = v5;
    *((_DWORD *)a1 + 3) = 0;
    if (v13)
      v2 = &v5[168 * v14];
    v4 = *((_DWORD *)a1 + 2);
  }
  v6 = &v5[168 * v4];
  *(_OWORD *)v6 = *(_OWORD *)v2;
  *((_OWORD *)v6 + 1) = *((_OWORD *)v2 + 1);
  *((_DWORD *)v6 + 10) = *((_DWORD *)v2 + 10);
  *((_QWORD *)v6 + 4) = *((_QWORD *)v2 + 4);
  *((_DWORD *)v2 + 10) = 0;
  v6[44] = v2[44];
  v7 = *((_OWORD *)v2 + 3);
  v8 = *((_OWORD *)v2 + 4);
  *(_DWORD *)(v6 + 79) = *(_DWORD *)(v2 + 79);
  *((_OWORD *)v6 + 3) = v7;
  *((_OWORD *)v6 + 4) = v8;
  *(_OWORD *)(v6 + 88) = *(_OWORD *)(v2 + 88);
  *((_DWORD *)v6 + 28) = *((_DWORD *)v2 + 28);
  *((_QWORD *)v6 + 13) = *((_QWORD *)v2 + 13);
  *((_DWORD *)v2 + 28) = 0;
  v6[116] = v2[116];
  result = *(__n128 *)(v2 + 120);
  v10 = *(_OWORD *)(v2 + 136);
  *(_DWORD *)(v6 + 151) = *(_DWORD *)(v2 + 151);
  *(_OWORD *)(v6 + 136) = v10;
  *(__n128 *)(v6 + 120) = result;
  v6[160] = v2[160];
  ++*((_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_22EF7BBD0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = a2 & 0xFFFFFFFFFFFFFFF0;
  v4 = sub_22F10D628(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (v4)
    return v4;
  v6 = *(_QWORD *)v3;
  if (*(_QWORD *)v3 && *(_BYTE *)(v6 + 16) == 43
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 43 && (v6 = sub_22F10CF48(v6)) != 0)
  {
    v3 = *(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0;
  }
  v4 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v7)
    return v4;
  if (*(_BYTE *)(v7 + 16) != 45)
    return v4;
  v8 = sub_22F114198(*(_QWORD *)(v7 + 24));
  v4 = 0;
  if (!v8 || (*(_DWORD *)(v8 + 28) & 0x7E) != 0x24)
    return v4;
  v9 = *(_QWORD *)(v8 + 152);
  v10 = v9 & 0xFFFFFFFFFFFFFFF8;
  if ((v9 & 4) != 0 && v10)
  {
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)v10 + 152);
      v10 = v11 & 0xFFFFFFFFFFFFFFF8;
    }
    while ((v11 & 4) != 0 && v10);
  }
  v12 = sub_22EF6512C(a1, v10, **(_QWORD **)(v8 + 168), *(unsigned int *)(*(_QWORD *)(v8 + 168) + 8), *(_QWORD *)((*(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF0) + 8));
  return sub_22F10D628(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0));
}

uint64_t sub_22EF7BCDC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _QWORD v37[2];

  v37[1] = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v35 = *(void **)(*a1 + 32);
  v5 = sub_22F0F08CC((uint64_t *)&v35);
  v6 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 32))(v5);
  v32 = *(void **)(v4 + 32);
  v7 = sub_22F0F08CC((uint64_t *)&v32);
  if (v6 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 32))(v7))
    return 1;
  v35 = v37;
  v36 = 0x100000000;
  v32 = &v34;
  v33 = 0x100000000;
  sub_22EF7CE24((uint64_t)&v35, *a1);
  sub_22EF7CE24((uint64_t)&v32, *a2);
  v8 = (char *)v35;
  v9 = v36;
  v10 = (char *)v32;
  v11 = v33;
  v12 = *((_QWORD *)v32 + v33 - 1);
  v31 = *(_QWORD *)(*((_QWORD *)v35 + v36 - 1) + 32);
  v13 = sub_22F0F08CC(&v31);
  v14 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v13 + 32))(v13);
  v30 = *(_QWORD *)(v12 + 32);
  v15 = sub_22F0F08CC(&v30);
  v16 = v14 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)v15 + 32))(v15);
  v17 = v16;
  if (v16)
  {
    v18 = 8 * v9;
    v19 = 8 * v11;
    v29 = v8;
    v20 = v8 - 8;
    do
    {
      v21 = v18;
      v22 = v19;
      if (!v19)
        break;
      if (!v18)
        break;
      v23 = *(_QWORD *)&v10[v19 - 8];
      v31 = *(_QWORD *)(*(_QWORD *)&v20[v18] + 32);
      v24 = sub_22F0F08CC(&v31);
      v25 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v24 + 32))(v24);
      v30 = *(_QWORD *)(v23 + 32);
      v26 = sub_22F0F08CC(&v30);
      v27 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v26 + 32))(v26);
      v18 = v21 - 8;
      v19 = v22 - 8;
    }
    while (v25 == v27);
    *a1 = *(_QWORD *)&v29[v21];
    *a2 = *(_QWORD *)&v10[v22];
  }
  if (v32 != &v34)
    free(v32);
  if (v35 != v37)
    free(v35);
  return v17;
}

void sub_22EF7BF04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  BOOL v34;
  char v35;
  BOOL v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  BOOL v45;
  int v46;
  int v47;
  uint64_t v48;
  char v49;
  BOOL v50;
  int v51;
  BOOL v52;
  int v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  llvm::APInt *v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  _DWORD *v69;
  llvm::APInt *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  BOOL v80;
  BOOL v82;
  BOOL v83;
  char v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  void *v88;
  char v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  BOOL v100;
  int v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char v109;
  uint64_t v110;
  BOOL v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unsigned int v117;
  uint64_t v118;
  _DWORD *v119;
  llvm::APInt *v120;
  BOOL v121;
  unsigned __int8 *v122;
  unsigned __int8 *v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  llvm::APInt *v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t (**v150)();
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  BOOL v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  BOOL v183;
  BOOL v184;
  uint64_t v185;
  unsigned int v186;
  unsigned int v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int v201;
  uint64_t v202;
  uint64_t v203;
  __int16 v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int v211;
  char v212;
  unint64_t v213;
  unsigned int v214;
  char v215;
  unint64_t v216;
  unsigned __int8 *v217;
  uint64_t (**v218)();
  void **v219;
  char v220;
  uint64_t v221;
  void *v222;
  uint64_t v223;
  _QWORD v224[2];
  uint64_t v225;
  unsigned int v226;
  char v227;
  char v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD v231[4];
  uint64_t v232;
  unsigned int v233;
  char v234;
  char v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD v238[2];
  char v239;
  void *v240[2];
  _QWORD v241[18];

  v241[16] = *MEMORY[0x24BDAC8D0];
  v222 = *(void **)(a2 + 32);
  v6 = *(_QWORD *)(sub_22F0F08CC((uint64_t *)&v222) + 56);
  v222 = *(void **)(a3 + 32);
  v7 = *(_QWORD *)(sub_22F0F08CC((uint64_t *)&v222) + 56);
  sub_22EF7CEC0((uint64_t)&v196, *(_QWORD *)a1, a2);
  sub_22EF7CEC0((uint64_t)&v188, *(_QWORD *)a1, a3);
  v185 = v6 + 16;
  v181 = v7;
  v180 = v7 + 16;
  v8 = 0;
  v9 = v197;
  v10 = v196;
  v182 = v6;
  while (v9 < *(_DWORD *)(v10 + 20) || v189 < *(_DWORD *)(v188 + 20))
  {
    v11 = *(_DWORD *)(a1 + 2768);
    v222 = 0;
    LODWORD(v223) = 0;
    HIDWORD(v223) = v11;
    v224[0] = 0;
    v224[1] = 0;
    v226 = 1;
    v225 = 0;
    v227 = 0;
    v228 = 0;
    v230 = 0;
    v231[0] = 0;
    v229 = 0;
    *(_DWORD *)((char *)v231 + 7) = 0;
    v231[2] = 0;
    v231[3] = 0;
    v233 = 1;
    v232 = 0;
    v234 = 0;
    v235 = 0;
    v239 = 0;
    v236 = 0;
    v237 = 0;
    *(_DWORD *)((char *)v238 + 7) = 0;
    v238[0] = 0;
    v12 = sub_22EF7B938((char **)(a1 + 64), (unint64_t)&v222);
    if (v233 >= 0x41 && v232)
      MEMORY[0x2348A0E84](v232, 0x1000C8000313F17, v12);
    if (v226 >= 0x41 && v225)
      MEMORY[0x2348A0E84](v225, 0x1000C8000313F17, v12);
    v13 = *(_QWORD *)(a1 + 64);
    v14 = v13 + 168 * *(unsigned int *)(a1 + 2768);
    v17 = *(_DWORD *)(v14 + 8);
    v16 = (unsigned int *)(v14 + 8);
    v15 = v17;
    if (v17)
    {
      do
      {
        v18 = v13 + 168 * v15;
        v19 = *(_DWORD *)(v18 + 4);
        v16 = (unsigned int *)(v18 + 4);
        v15 = v19;
      }
      while (v19);
    }
    v20 = *(_DWORD *)(a1 + 2772);
    *v16 = v20;
    *(_DWORD *)(a1 + 2768) = v20;
    *(_DWORD *)(a1 + 2772) = v20 + 1;
    v21 = (*(_DWORD *)(v6 + 12) & 0x1FFFFFFF) - 1;
    if (v21 >= v8)
      v21 = v8;
    v22 = *(_QWORD *)(v185 + 8 * v21);
    if ((*(_DWORD *)(v22 + 28) & 0x7F) != 0x20)
    {
      if ((*(_DWORD *)(v22 + 28) & 0x7F) == 0x26)
      {
        v23 = v196;
        v24 = *(unsigned int *)(v196 + 20);
        v26 = &v199;
        v25 = &v198;
        v27 = v197;
        if (v197 < v24
          || (v23 = v200) != 0
          && (v27 = v201, v26 = &v203, v25 = &v202, v201 < (unint64_t)*(unsigned int *)(v200 + 20)))
        {
          v28 = *v25;
          v29 = v23 + 24 * v27 + 40;
          if (v28 != *v26)
            v29 = v28;
          v30 = *(_QWORD *)(v29 + 8);
        }
        else
        {
          v30 = 0;
        }
        v71 = v188;
        v72 = *(unsigned int *)(v188 + 20);
        v74 = &v191;
        v73 = &v190;
        v75 = v189;
        v187 = v8;
        if (v189 < v72
          || (v71 = v192) != 0
          && (v75 = v193, v74 = &v195, v73 = &v194, v193 < (unint64_t)*(unsigned int *)(v192 + 20)))
        {
          v76 = *v73;
          v77 = v71 + 24 * v75 + 40;
          if (v76 != *v74)
            v77 = v76;
          v78 = *(_QWORD *)(v77 + 8);
        }
        else
        {
          v78 = 0;
        }
        v80 = v197 >= v24 && v30 > 0xF;
        v82 = v189 >= v72 && v78 > 0xF;
        v83 = v30 >= 0x10 && v78 >= 0x10;
        v84 = !v83;
        if (!v83)
          goto LABEL_107;
        if ((*(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF0) + 8) | v30 & 7) == (*(_QWORD *)((v78 & 0xFFFFFFFFFFFFFFF0) + 8) | v78 & 7))
          goto LABEL_107;
        v177 = v80;
        v85 = *(_QWORD *)a1;
        v184 = v82;
        v86 = (void *)sub_22EF7BBD0(*(_QWORD *)a1, v30);
        v222 = v86;
        v87 = v85;
        v80 = v177;
        v88 = (void *)sub_22EF7BBD0(v87, v78);
        v82 = v184;
        v240[0] = v88;
        if (!v86)
          goto LABEL_107;
        if (v88 && (v89 = sub_22EF7BCDC((uint64_t *)&v222, (uint64_t *)v240), v82 = v184, (v89 & 1) != 0))
        {
          v90 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF0) + 8);
          if ((v90 & 8) != 0)
          {
            v92 = *(_QWORD *)((v90 & 0xFFFFFFFFFFFFFFF0) + 0x18);
            v91 = *(_QWORD *)((v90 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
          }
          else
          {
            v91 = 0;
            v92 = 0;
          }
          v218 = (uint64_t (**)())(v91 | v92 | (v90 | v30) & 7);
          v137 = *(_QWORD *)((v78 & 0xFFFFFFFFFFFFFFF0) + 8);
          v6 = v182;
          if ((v137 & 8) != 0)
          {
            v139 = *(_QWORD *)((v137 & 0xFFFFFFFFFFFFFFF0) + 0x18);
            v138 = *(_QWORD *)((v137 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
          }
          else
          {
            v138 = 0;
            v139 = 0;
          }
          v8 = v187;
          v213 = v138 | v139 | (v137 | v78) & 7;
          v140 = v222;
          v141 = *(_QWORD *)(((unint64_t)v222 & 0xFFFFFFFFFFFFFFF0) + 8);
          if ((v141 & 8) != 0)
          {
            v143 = *(_QWORD *)((v141 & 0xFFFFFFFFFFFFFFF0) + 0x18);
            v142 = *(_QWORD *)((v141 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
          }
          else
          {
            v142 = 0;
            v143 = 0;
          }
          sub_22E96251C((unsigned int *)&v218, v142 | v143 | *(_QWORD *)(((unint64_t)v222 & 0xFFFFFFFFFFFFFFF0) + 8) & 7);
          v144 = v240[0];
          v145 = *(_QWORD *)(((unint64_t)v240[0] & 0xFFFFFFFFFFFFFFF0) + 8);
          if ((v145 & 8) != 0)
          {
            v147 = *(_QWORD *)((v145 & 0xFFFFFFFFFFFFFFF0) + 0x18);
            v146 = *(_QWORD *)((v145 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
          }
          else
          {
            v146 = 0;
            v147 = 0;
          }
          sub_22E96251C((unsigned int *)&v213, v146 | v147 | *(_QWORD *)(((unint64_t)v240[0] & 0xFFFFFFFFFFFFFFF0) + 8) & 7);
          v210 = v140[4];
          v148 = sub_22F0F08CC(&v210);
          v217 = (unsigned __int8 *)v144[4];
          v149 = sub_22F0F08CC((uint64_t *)&v217);
          v150 = v218;
          v151 = v213;
          v152 = *(_QWORD *)(a1 + 64) + 168 * *(unsigned int *)(a1 + 2768);
          *(_DWORD *)v152 = 1;
          *(_QWORD *)(v152 + 64) = v148;
          *(_QWORD *)(v152 + 136) = v149;
          *(_QWORD *)(v152 + 24) = v150;
          *(_QWORD *)(*(_QWORD *)(a1 + 64) + 168 * *(unsigned int *)(a1 + 2768) + 96) = v151;
          v153 = *(_QWORD *)(a1 + 64) + 168 * *(unsigned int *)(a1 + 2768);
          *(_BYTE *)(v153 + 82) = v177;
          *(_BYTE *)(v153 + 154) = v184;
          sub_22EF7BF04(a1, v140, v144);
        }
        else
        {
LABEL_107:
          v93 = *(_DWORD *)(a1 + 2768);
          v94 = *(_QWORD *)(a1 + 64);
          v95 = v94 + 168 * v93;
          *(_DWORD *)v95 = 2;
          *(_QWORD *)(v95 + 16) = v30;
          *(_QWORD *)(v95 + 88) = v78;
          *(_BYTE *)(v95 + 82) = v80;
          *(_BYTE *)(v95 + 154) = v82;
          v96 = (v84 & 1) == 0
             && (*(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF0) + 8) | v30 & 7) == (*(_QWORD *)((v78 & 0xFFFFFFFFFFFFFFF0)
                                                                                        + 8) | v78 & 7);
          v6 = v182;
          v8 = v187;
          *(_BYTE *)(v94 + 168 * v93 + 160) = v96;
        }
        goto LABEL_166;
      }
      v42 = (*(_DWORD *)(v181 + 12) & 0x1FFFFFFF) - 1;
      if (v42 >= v8)
        v42 = v8;
      v43 = *(_QWORD *)(v180 + 8 * v42);
      v216 = 0;
      v217 = 0;
      v214 = 1;
      v213 = 0;
      v215 = 0;
      v211 = 1;
      v209 = 0;
      v210 = 0;
      v212 = 0;
      v207 = 0;
      v208 = 0;
      v206 = 0;
      v205 = 0;
      v204 = 0;
      sub_22EF7D060((uint64_t)&v196, v22, (uint64_t)&v213, (uint64_t)&v205 + 3, (uint64_t)&v209, (uint64_t)&v205 + 1, (unint64_t *)&v217);
      sub_22EF7D060((uint64_t)&v188, v43, (uint64_t)&v210, (uint64_t)&v205 + 2, (uint64_t)&v208, (uint64_t)&v205, &v216);
      v183 = 0;
      if (v197 >= *(_DWORD *)(v196 + 20))
      {
        v183 = 1;
        if (!v217 && !v207 && !HIBYTE(v205))
          v183 = BYTE1(v205) != 0;
      }
      v44 = v206;
      if (v189 >= *(_DWORD *)(v188 + 20))
      {
        v46 = v205;
        if ((v216 | v206) == 0 && BYTE2(v205) == 0)
          v47 = 0;
        else
          v47 = BYTE2(v205);
        v45 = (v216 | v206) != 0 || BYTE2(v205) != 0 || (_BYTE)v205 != 0;
      }
      else
      {
        v45 = 0;
        v46 = v205;
        v47 = BYTE2(v205);
      }
      v48 = v207;
      v49 = BYTE1(v205);
      if (v207)
        v50 = 0;
      else
        v50 = BYTE1(v205) == 0;
      v51 = !v50;
      if (v206)
        v52 = 0;
      else
        v52 = v46 == 0;
      v53 = !v52;
      if (v51 == 1 && v47)
      {
        v186 = v8;
        v54 = HIBYTE(v204);
        v56 = v216;
        v55 = (uint64_t)v217;
        v57 = v208;
        v58 = *(_DWORD *)(a1 + 2768);
        v59 = *(_QWORD *)(a1 + 64);
        v60 = v59 + 168 * v58;
        *(_DWORD *)v60 = 8;
        *(_QWORD *)(v60 + 72) = v48;
        *(_BYTE *)(v60 + 80) = v54;
        *(_BYTE *)(v60 + 81) = v49;
        *(_QWORD *)(v60 + 56) = v55;
        v61 = (llvm::APInt *)(v60 + 104);
        if (*(_DWORD *)(v60 + 112) > 0x40u || v211 > 0x40)
        {
          v97 = v6;
          v98 = v45;
          llvm::APInt::assignSlowCase(v61, (const llvm::APInt *)&v210);
          v45 = v98;
          v6 = v97;
        }
        else
        {
          *(_QWORD *)v61 = v210;
          *(_DWORD *)(v60 + 112) = v211;
        }
        *(_BYTE *)(v59 + 168 * v58 + 116) = v212;
        v99 = *(_QWORD *)(a1 + 64) + 168 * *(unsigned int *)(a1 + 2768);
        *(_BYTE *)(v99 + 120) = 1;
        *(_QWORD *)(v99 + 88) = v57;
        *(_QWORD *)(v99 + 128) = v56;
        *(_BYTE *)(v99 + 82) = v183;
        *(_BYTE *)(v99 + 154) = v45;
        *(_BYTE *)(v99 + 160) = 0;
        goto LABEL_128;
      }
      v62 = HIBYTE(v205);
      if (!HIBYTE(v205) || ((v53 ^ 1) & 1) != 0)
      {
        if (HIBYTE(v205) | v47)
        {
          v113 = v208;
          v114 = v209;
          v116 = v216;
          v115 = (uint64_t)v217;
          v117 = *(_DWORD *)(a1 + 2768);
          v118 = *(_QWORD *)(a1 + 64);
          v119 = (_DWORD *)(v118 + 168 * v117);
          *v119 = 5;
          v120 = (llvm::APInt *)(v119 + 8);
          v179 = v113;
          v174 = v115;
          v176 = v114;
          v173 = v116;
          if (v119[10] > 0x40u || v214 > 0x40)
          {
            v121 = v45;
            llvm::APInt::assignSlowCase(v120, (const llvm::APInt *)&v213);
          }
          else
          {
            v121 = v45;
            *(_QWORD *)v120 = v213;
            v119[10] = v214;
          }
          *(_BYTE *)(v118 + 168 * v117 + 44) = v215;
          v129 = *(_DWORD *)(a1 + 2768);
          v130 = *(_QWORD *)(a1 + 64);
          v131 = v130 + 168 * v129;
          v132 = (llvm::APInt *)(v131 + 104);
          if (*(_DWORD *)(v131 + 112) > 0x40u || v211 > 0x40)
          {
            llvm::APInt::assignSlowCase(v132, (const llvm::APInt *)&v210);
          }
          else
          {
            *(_QWORD *)v132 = v210;
            *(_DWORD *)(v131 + 112) = v211;
          }
          *(_BYTE *)(v130 + 168 * v129 + 116) = v212;
          v133 = *(_DWORD *)(a1 + 2768);
          v134 = *(_QWORD *)(a1 + 64);
          v135 = v134 + 168 * v133;
          *(_BYTE *)(v135 + 48) = v62;
          *(_BYTE *)(v135 + 120) = v47;
          *(_QWORD *)(v135 + 16) = v176;
          *(_QWORD *)(v135 + 88) = v179;
          *(_QWORD *)(v135 + 56) = v174;
          *(_QWORD *)(v135 + 128) = v173;
          *(_BYTE *)(v135 + 82) = v183;
          *(_BYTE *)(v135 + 154) = v121;
          v6 = v182;
          if (v62 && v47)
          {
            if ((*(_QWORD *)((v176 & 0xFFFFFFFFFFFFFFF0) + 8) | v176 & 7) == (*(_QWORD *)((v179 & 0xFFFFFFFFFFFFFFF0)
                                                                                           + 8) | v179 & 7))
            {
              if (v214 > 0x40)
                v136 = llvm::APInt::equalSlowCase((llvm::APInt *)&v213, (const llvm::APInt *)&v210);
              else
                v136 = v213 == v210;
            }
            else
            {
              v136 = 0;
            }
            *(_BYTE *)(v134 + 168 * v133 + 160) = v136;
          }
        }
        else if ((v51 | v53) == 1)
        {
          v100 = 0;
          v36 = BYTE1(v205) == 0;
          v101 = HIBYTE(v204);
          v102 = v204;
          v103 = *(_DWORD *)(a1 + 2768);
          v104 = *(_QWORD *)(a1 + 64);
          v105 = v104 + 168 * v103;
          *(_BYTE *)(v105 + 81) = BYTE1(v205);
          v106 = v216;
          v107 = (uint64_t)v217;
          *(_DWORD *)v105 = 6;
          *(_QWORD *)(v105 + 72) = v48;
          *(_QWORD *)(v105 + 144) = v44;
          *(_BYTE *)(v105 + 80) = v101;
          *(_BYTE *)(v105 + 152) = v102;
          *(_BYTE *)(v105 + 153) = v46;
          *(_QWORD *)(v105 + 56) = v107;
          *(_QWORD *)(v105 + 128) = v106;
          *(_BYTE *)(v105 + 82) = v183;
          *(_BYTE *)(v105 + 154) = v45;
          v109 = !v36 && v46 != 0;
          if (v48 && v44 && v101 == v102)
          {
            v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 32))(v48);
            v100 = v110 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 32))(v44);
            v103 = *(_DWORD *)(a1 + 2768);
            v104 = *(_QWORD *)(a1 + 64);
          }
          *(_BYTE *)(v104 + 168 * v103 + 160) = v109 | v100;
        }
        else
        {
          v123 = (unsigned __int8 *)v216;
          v122 = v217;
          v124 = *(_DWORD *)(a1 + 2768);
          v125 = *(_QWORD *)(a1 + 64);
          v126 = v125 + 168 * v124;
          *(_DWORD *)v126 = 3;
          *(_QWORD *)(v126 + 56) = v122;
          *(_QWORD *)(v126 + 128) = v123;
          *(_BYTE *)(v126 + 82) = v183;
          *(_BYTE *)(v126 + 154) = v45;
          if (v122 == v123)
          {
            v127 = 1;
          }
          else
          {
            v127 = 0;
            if (v122 && v123)
            {
              v221 = *(_QWORD *)a1;
              v128 = v221;
              v222 = v224;
              v223 = 0x2000000000;
              v240[0] = v241;
              v240[1] = (void *)0x2000000000;
              v220 = 1;
              v218 = &off_24FAC6E70;
              v219 = &v222;
              sub_22F0E9FEC(&v218, v122);
              v220 = 1;
              v218 = &off_24FAC6E70;
              v219 = v240;
              v221 = v128;
              sub_22F0E9FEC(&v218, v123);
              v127 = llvm::FoldingSetNodeID::operator==();
              if (v240[0] != v241)
                free(v240[0]);
              if (v222 != v224)
                free(v222);
              v124 = *(_DWORD *)(a1 + 2768);
              v125 = *(_QWORD *)(a1 + 64);
            }
          }
          *(_BYTE *)(v125 + 168 * v124 + 160) = v127;
        }
      }
      else
      {
        v186 = v8;
        v63 = v209;
        v64 = v216;
        v65 = (uint64_t)v217;
        v66 = v204;
        v67 = *(_DWORD *)(a1 + 2768);
        v68 = *(_QWORD *)(a1 + 64);
        v69 = (_DWORD *)(v68 + 168 * v67);
        *v69 = 7;
        v70 = (llvm::APInt *)(v69 + 8);
        if (v69[10] > 0x40u || v214 > 0x40)
        {
          v111 = v45;
          v175 = v64;
          v178 = v63;
          llvm::APInt::assignSlowCase(v70, (const llvm::APInt *)&v213);
          v63 = v178;
          v64 = v175;
          v45 = v111;
        }
        else
        {
          *(_QWORD *)v70 = v213;
          v69[10] = v214;
        }
        *(_BYTE *)(v68 + 168 * v67 + 44) = v215;
        v112 = *(_QWORD *)(a1 + 64) + 168 * *(unsigned int *)(a1 + 2768);
        *(_BYTE *)(v112 + 48) = 1;
        *(_QWORD *)(v112 + 16) = v63;
        *(_QWORD *)(v112 + 56) = v65;
        *(_QWORD *)(v112 + 144) = v44;
        *(_BYTE *)(v112 + 152) = v66;
        *(_BYTE *)(v112 + 153) = v46;
        *(_QWORD *)(v112 + 128) = v64;
        *(_BYTE *)(v112 + 82) = v183;
        *(_BYTE *)(v112 + 154) = v45;
        *(_BYTE *)(v112 + 160) = 0;
        v6 = v182;
LABEL_128:
        v8 = v186;
      }
      if (v211 >= 0x41 && v210)
        MEMORY[0x2348A0E84](v210, 0x1000C8000313F17);
      if (v214 >= 0x41 && v213)
        MEMORY[0x2348A0E84](v213, 0x1000C8000313F17);
      goto LABEL_166;
    }
    v31 = sub_22EF7CFDC((uint64_t)&v196);
    v32 = sub_22EF7CFDC((uint64_t)&v188);
    v33 = 0;
    if (v31)
      v34 = v197 >= *(_DWORD *)(v196 + 20);
    else
      v34 = 0;
    v35 = v34;
    v36 = v189 < *(_DWORD *)(v188 + 20) || v32 == 0;
    v37 = v13 + 168 * v20;
    *(_BYTE *)(v37 + 82) = v35;
    v38 = !v36;
    v39 = v20;
    *(_DWORD *)v37 = 4;
    *(_QWORD *)(v37 + 64) = v31;
    *(_QWORD *)(v37 + 136) = v32;
    *(_BYTE *)(v37 + 154) = v38;
    if (v31)
    {
      v40 = v32;
      if (v32)
      {
        v41 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v31 + 32))(v31);
        v33 = v41 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)v40 + 32))(v40);
        v39 = *(_DWORD *)(a1 + 2768);
        v13 = *(_QWORD *)(a1 + 64);
      }
    }
    *(_BYTE *)(v13 + 168 * v39 + 160) = v33;
LABEL_166:
    v9 = v197;
    v10 = v196;
    if (v197 < *(_DWORD *)(v196 + 20))
    {
      v154 = v198;
      if (v198 == v199 || (v198 += 24, v154 + 24 == v199))
      {
        v155 = v197 + 1;
        do
        {
          v9 = v155;
          v197 = v155;
          if (v155 == *(_DWORD *)(v196 + 20))
            break;
          v156 = v196 + 40 + 24 * v155;
          if (*(_DWORD *)v156 != 8)
            break;
          v157 = *(_DWORD *)(v156 + 4);
          v198 = *(_QWORD *)(v156 + 8);
          v199 = v198 + 24 * v157;
          v155 = v9 + 1;
        }
        while (!v157);
      }
    }
    if (v200)
    {
      if (v201 < *(_DWORD *)(v200 + 20))
      {
        v158 = v202;
        if (v202 == v203 || (v202 += 24, v158 + 24 == v203))
        {
          v159 = v201 + 1;
          do
          {
            v201 = v159;
            if (v159 == *(_DWORD *)(v200 + 20))
              break;
            v160 = v200 + 40 + 24 * v159;
            if (*(_DWORD *)v160 != 8)
              break;
            v161 = *(_QWORD *)(v160 + 8);
            v162 = *(_DWORD *)(v160 + 4);
            v202 = v161;
            v203 = v161 + 24 * v162;
            ++v159;
          }
          while (!v162);
        }
      }
    }
    if (v189 < *(_DWORD *)(v188 + 20))
    {
      v163 = v190;
      if (v190 == v191 || (v190 += 24, v163 + 24 == v191))
      {
        v164 = v189 + 1;
        do
        {
          v189 = v164;
          if (v164 == *(_DWORD *)(v188 + 20))
            break;
          v165 = v188 + 40 + 24 * v164;
          if (*(_DWORD *)v165 != 8)
            break;
          v166 = *(_QWORD *)(v165 + 8);
          v167 = *(_DWORD *)(v165 + 4);
          v190 = v166;
          v191 = v166 + 24 * v167;
          ++v164;
        }
        while (!v167);
      }
    }
    if (v192)
    {
      if (v193 < *(_DWORD *)(v192 + 20))
      {
        v168 = v194;
        if (v194 == v195 || (v194 += 24, v168 + 24 == v195))
        {
          v169 = v193 + 1;
          do
          {
            v193 = v169;
            if (v169 == *(_DWORD *)(v192 + 20))
              break;
            v170 = v192 + 40 + 24 * v169;
            if (*(_DWORD *)v170 != 8)
              break;
            v171 = *(_QWORD *)(v170 + 8);
            v172 = *(_DWORD *)(v170 + 4);
            v194 = v171;
            v195 = v171 + 24 * v172;
            ++v169;
          }
          while (!v172);
        }
      }
    }
    *(_DWORD *)(a1 + 2768) = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 168 * *(unsigned int *)(a1 + 2768) + 12);
    ++v8;
  }
}

uint64_t sub_22EF7CE24(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    do
    {
      v4 = *(unsigned int *)(v3 + 8);
      if (v4 >= *(unsigned int *)(v3 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v4 = *(unsigned int *)(v3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = v2;
      ++*(_DWORD *)(v3 + 8);
      if ((*(_BYTE *)(v2 + 18) & 8) == 0)
        break;
      result = sub_22F10D628(*(_QWORD *)(*(_QWORD *)(v2 + 24 * *(unsigned int *)(v2 + 20) + 40) & 0xFFFFFFFFFFFFFFF0));
      v2 = result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_22EF7CEC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;

  sub_22EF7CF4C(a1, a3);
  v6 = *(_DWORD *)(a3 + 16);
  if ((v6 & 0x400) == 0)
  {
    if ((v6 & 0x80000) != 0)
    {
      v8 = 0;
      goto LABEL_8;
    }
    v7 = *(_QWORD *)(a3 + 8);
    goto LABEL_6;
  }
  v8 = 0;
  if ((v6 & 0x80000) == 0)
  {
    v7 = *(_QWORD *)(a3 + 8);
    if (*(_BYTE *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 16) == 27)
LABEL_6:
      v8 = sub_22EF7BBD0(a2, v7);
  }
LABEL_8:
  sub_22EF7CF4C(a1 + 32, v8);
  return a1;
}

uint64_t sub_22EF7CF4C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  if (a2)
  {
    if (*(_DWORD *)(a2 + 20))
    {
      if (*(_DWORD *)(a2 + 40) == 8)
      {
        v2 = *(_QWORD *)(a2 + 48);
        v3 = *(_DWORD *)(a2 + 44);
        *(_QWORD *)(result + 16) = v2;
        *(_QWORD *)(result + 24) = v2 + 24 * v3;
        if (!v3)
        {
          if (*(_DWORD *)(a2 + 20))
          {
            v4 = 1;
            do
            {
              *(_DWORD *)(result + 8) = v4;
              if (v4 == *(_DWORD *)(a2 + 20))
                break;
              v5 = a2 + 40 + 24 * v4;
              if (*(_DWORD *)v5 != 8)
                break;
              v6 = *(_QWORD *)(v5 + 8);
              v7 = *(_DWORD *)(v5 + 4);
              *(_QWORD *)(result + 16) = v6;
              *(_QWORD *)(result + 24) = v6 + 24 * v7;
              ++v4;
            }
            while (!v7);
          }
        }
      }
    }
  }
  return result;
}

unint64_t sub_22EF7CFDC(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= *(_DWORD *)(*(_QWORD *)a1 + 20))
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      return 0;
    v6 = *(_DWORD *)(a1 + 40);
    if (v6 >= *(_DWORD *)(v5 + 20))
      return 0;
    v2 = *(_QWORD *)(a1 + 48);
    v3 = *(_QWORD *)(a1 + 56);
    v4 = v5 + 24 * v6;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 16);
    v3 = *(_QWORD *)(a1 + 24);
    v4 = *(_QWORD *)a1 + 24 * v1;
  }
  v7 = v4 + 40;
  if (v2 != v3)
    v7 = v2;
  v9 = *(_QWORD *)(v7 + 8);
  return sub_22F0F08CC(&v9);
}

uint64_t sub_22EF7D060(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t *a7)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;

  v7 = *(_DWORD *)(result + 8);
  if (v7 < *(_DWORD *)(*(_QWORD *)result + 20))
  {
    v8 = *(_QWORD *)result + 24 * v7 + 40;
    if (*(_QWORD *)(result + 16) == *(_QWORD *)(result + 24))
      v9 = v8;
    else
      v9 = *(_QWORD *)(result + 16);
    __asm { BR              X10 }
  }
  if (!*(_BYTE *)(a2 + 80))
  {
    v10 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
    if ((*(_QWORD *)(a2 + 72) & 3) != 1)
      v10 = 0;
    if (!v10)
      v10 = a2;
    v11 = *(_QWORD *)(v10 + 72);
    v12 = v11 & 3;
    v13 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    if (v12 == 2 && v13 != 0)
      v13 = *(_QWORD *)(v13 + 8);
    *a7 = v13;
  }
  v15 = *(_QWORD *)(result + 32);
  if (v15)
  {
    v16 = *(_DWORD *)(result + 40);
    if (v16 < *(_DWORD *)(v15 + 20))
    {
      v17 = v15 + 24 * v16 + 40;
      if (*(_QWORD *)(result + 48) == *(_QWORD *)(result + 56))
        v18 = v17;
      else
        v18 = *(_QWORD *)(result + 48);
      __asm { BR              X10 }
    }
  }
  return result;
}

void sub_22EF7D31C(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  uint64_t v13;
  const llvm::APInt *v14;
  uint64_t v15;
  const llvm::APInt *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  std::string::size_type v27;
  std::string *v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  int v32;
  _DWORD *v33;
  const llvm::APInt *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  llvm::raw_ostream *v42;
  std::string *p_dst;
  uint64_t v44;
  _DWORD *v45;
  int v46;
  int v47;
  _DWORD *v48;
  uint64_t v49;
  const llvm::APInt *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  llvm::raw_ostream *v60;
  BOOL v61;
  std::string::size_type v62;
  const void *v63;
  std::string *v64;
  uint64_t v65;
  uint64_t v66;
  _WORD *v67;
  size_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  int v71;
  const char *v72;
  size_t v73;
  llvm::raw_ostream *v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 *v78;
  _DWORD *v79;
  int v80;
  int v81;
  _DWORD *v82;
  int v83;
  uint64_t v84;
  const char *v85;
  size_t v86;
  void *v87;
  llvm::raw_ostream *v88;
  _DWORD *v89;
  uint64_t v90;
  unint64_t v91;
  const char *v92;
  llvm::raw_ostream *v93;
  _BYTE *v94;
  _BOOL4 v95;
  int v96;
  int v97;
  uint64_t v98;
  unsigned __int8 *v99;
  llvm::raw_ostream *v100;
  _WORD *v101;
  size_t v102;
  int v103;
  const char *v104;
  size_t v105;
  llvm::raw_ostream *v106;
  _DWORD *v107;
  uint64_t v108;
  unint64_t v109;
  const char *v110;
  llvm::raw_ostream *v111;
  _BYTE *v112;
  uint64_t v113;
  _WORD *v114;
  size_t v115;
  _DWORD *v116;
  int v117;
  const char *v118;
  size_t v119;
  llvm::raw_ostream *v120;
  _BYTE *v121;
  const char *v122;
  unint64_t v123;
  const char *v124;
  llvm::raw_ostream *v125;
  _BYTE *v126;
  _WORD *v127;
  const char *v128;
  llvm::raw_ostream *v130;
  _WORD *v131;
  size_t v132;
  int v133;
  int v134;
  int v135;
  const char *v136;
  size_t v137;
  llvm::raw_ostream *v138;
  _BYTE *v139;
  llvm::raw_ostream *v140;
  unint64_t v141;
  uint64_t v142;
  const char *v143;
  _BOOL4 v144;
  const char *v145;
  size_t v146;
  void *v147;
  _DWORD *v148;
  unsigned int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  llvm::raw_ostream *v154;
  _WORD *v155;
  llvm::raw_ostream *v156;
  _WORD *v157;
  llvm::raw_ostream *v158;
  uint64_t v159;
  llvm::raw_ostream *v160;
  _BYTE *v161;
  llvm::raw_ostream *v162;
  _DWORD *v163;
  uint64_t v164;
  unint64_t v165;
  const char *v166;
  _BYTE *v167;
  llvm::raw_ostream *v168;
  _BYTE *v169;
  llvm::raw_ostream *v170;
  char *v171;
  char v172;
  std::string::size_type v173;
  unint64_t v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  unint64_t v178;
  std::string::size_type v180;
  std::string *v181;
  const char *v182;
  _DWORD *v183;
  unsigned int v184;
  uint64_t v185;
  BOOL v186;
  uint64_t v187;
  std::string::size_type v188;
  int v189;
  std::string::size_type v190;
  void *v191;
  std::string *v192;
  std::string *v193;
  std::string::size_type v194;
  std::string::size_type v195;
  std::string *v196;
  unint64_t v197;
  const char *v198;
  unint64_t v199;
  const char *v200;
  llvm::raw_ostream *v201;
  _BYTE *v202;
  uint64_t v203;
  std::string::size_type size;
  int v205;
  std::string::size_type v206;
  std::string *p_p;
  std::string *v208;
  unint64_t v209;
  const char *v210;
  llvm::raw_ostream *v211;
  _BYTE *v212;
  llvm::raw_ostream *v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  size_t v217;
  const char *v218;
  size_t v219;
  llvm::raw_ostream *v220;
  _BYTE *v221;
  const char *v222;
  size_t v223;
  llvm::raw_ostream *v224;
  _BYTE *v225;
  llvm::raw_ostream *v226;
  _BYTE *v227;
  llvm::raw_ostream *v228;
  _DWORD *v229;
  uint64_t v230;
  unint64_t v231;
  const char *v232;
  llvm::raw_ostream *v233;
  _BYTE *v234;
  std::string *v235;
  llvm::raw_ostream *v236;
  _BYTE *v237;
  llvm::raw_ostream *v238;
  _DWORD *v239;
  void *v240;
  const char *v241;
  size_t v242;
  llvm::raw_ostream *v243;
  _BYTE *v244;
  std::string *v245;
  llvm::raw_ostream *v246;
  _BYTE *v247;
  llvm::raw_ostream *v248;
  char *v249;
  char v250;
  llvm::raw_ostream *v251;
  _BYTE *v252;
  llvm::raw_ostream *v253;
  _DWORD *v254;
  uint64_t v255;
  unint64_t v256;
  const char *v257;
  llvm::raw_ostream *v258;
  _BYTE *v259;
  llvm::raw_ostream *v260;
  _BYTE *v261;
  llvm::raw_ostream *v262;
  char *v263;
  char v264;
  uint64_t v265;
  std::string::size_type v266;
  char v267;
  std::string::size_type v268;
  std::string *p_str;
  std::string *p_s1;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t **v274;
  std::string *v275;
  llvm::raw_ostream *v276;
  _BYTE *v277;
  llvm::raw_ostream *v278;
  unint64_t v279;
  uint64_t v280;
  const char *v281;
  llvm::raw_ostream *v282;
  _BYTE *v283;
  std::string *v284;
  llvm::raw_ostream *v285;
  _BYTE *v286;
  llvm::raw_ostream *v287;
  _DWORD *v288;
  uint64_t v289;
  unint64_t v290;
  const char *v291;
  llvm::raw_ostream *v292;
  _BYTE *v293;
  std::string *v294;
  llvm::raw_ostream *v295;
  _BYTE *v296;
  llvm::raw_ostream *v297;
  _BYTE *v298;
  uint64_t v299;
  _DWORD *v300;
  unsigned __int8 *v301;
  _DWORD *v302;
  unint64_t v303;
  std::string __str;
  unint64_t v305;
  unint64_t v306;
  std::string __s1;
  std::string __p;
  std::string __dst;
  _WORD v310[20];
  uint64_t v311;

  v311 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 25))
  {
    v4 = *(llvm::raw_ostream **)(a1 + 48);
    v5 = (_BYTE *)*((_QWORD *)v4 + 4);
    if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
    {
      llvm::raw_ostream::write(v4);
    }
    else
    {
      *((_QWORD *)v4 + 4) = v5 + 1;
      *v5 = 10;
    }
    llvm::raw_ostream::indent(*(llvm::raw_ostream **)(a1 + 48));
    a2 = (a2 + 1);
  }
  v6 = *(_DWORD *)(a1 + 2776);
  v7 = *(_QWORD *)(a1 + 64);
  switch(*(_DWORD *)(v7 + 168 * v6))
  {
    case 1:
      v8 = (uint64_t *)(v7 + 168 * v6);
      v9 = v8[8];
      sub_22EF7F540(a1, v8[3], v8[12]);
      v10 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 168 * *(unsigned int *)(a1 + 2776) + 8);
      v11 = (llvm::raw_ostream *)sub_22EFC6724(*(_QWORD *)(a1 + 48), *(_QWORD *)(v9 + 40));
      if (v10)
      {
        v12 = (_BYTE *)*((_QWORD *)v11 + 4);
        if ((unint64_t)v12 >= *((_QWORD *)v11 + 3))
        {
          llvm::raw_ostream::write(v11);
        }
        else
        {
          *((_QWORD *)v11 + 4) = v12 + 1;
          *v12 = 60;
        }
        v150 = 0;
        v151 = *(_QWORD *)(a1 + 64);
        v152 = *(unsigned int *)(v151 + 168 * *(unsigned int *)(a1 + 2776) + 8);
        v153 = 1;
        while (1)
        {
          *(_DWORD *)(a1 + 2776) = v152;
          if (!*(_BYTE *)(a1 + 24))
            goto LABEL_178;
          if (!*(_BYTE *)(v151 + 168 * v152 + 160))
            break;
          ++v150;
LABEL_181:
          v151 = *(_QWORD *)(a1 + 64);
          v152 = *(unsigned int *)(v151 + 168 * *(unsigned int *)(a1 + 2776) + 4);
          if (!(_DWORD)v152)
          {
            if (v150)
            {
              if ((v153 & 1) != 0)
              {
                v158 = *(llvm::raw_ostream **)(a1 + 48);
                v159 = *((_QWORD *)v158 + 4);
                if ((unint64_t)(*((_QWORD *)v158 + 3) - v159) > 2)
                {
                  *(_BYTE *)(v159 + 2) = 46;
                  *(_WORD *)v159 = 11822;
                  *((_QWORD *)v158 + 4) += 3;
                }
                else
                {
                  llvm::raw_ostream::write(v158, "...");
                }
              }
              else
              {
                sub_22EF7F8FC(a1, v150, a2);
              }
            }
            *(_DWORD *)(a1 + 2776) = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 168 * *(unsigned int *)(a1 + 2776) + 12);
            v11 = *(llvm::raw_ostream **)(a1 + 48);
            v167 = (_BYTE *)*((_QWORD *)v11 + 4);
            if (*((_BYTE **)v11 + 3) == v167)
            {
              v128 = ">";
              goto LABEL_208;
            }
            *v167 = 62;
            v299 = *((_QWORD *)v11 + 4) + 1;
            goto LABEL_559;
          }
        }
        if (v150)
        {
          sub_22EF7F8FC(a1, v150, a2);
          v154 = *(llvm::raw_ostream **)(a1 + 48);
          v155 = (_WORD *)*((_QWORD *)v154 + 4);
          if (*((_QWORD *)v154 + 3) - (_QWORD)v155 > 1uLL)
          {
            v150 = 0;
            v153 = 0;
            *v155 = 8236;
            *((_QWORD *)v154 + 4) += 2;
LABEL_178:
            sub_22EF7D31C(a1, a2);
            if (*(_DWORD *)(*(_QWORD *)(a1 + 64) + 168 * *(unsigned int *)(a1 + 2776) + 4))
            {
              v156 = *(llvm::raw_ostream **)(a1 + 48);
              v157 = (_WORD *)*((_QWORD *)v156 + 4);
              if (*((_QWORD *)v156 + 3) - (_QWORD)v157 > 1uLL)
              {
                *v157 = 8236;
                *((_QWORD *)v156 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v156, ", ");
              }
            }
            goto LABEL_181;
          }
          llvm::raw_ostream::write(v154, ", ");
          v150 = 0;
        }
        v153 = 0;
        goto LABEL_178;
      }
      v127 = (_WORD *)*((_QWORD *)v11 + 4);
      if (*((_QWORD *)v11 + 3) - (_QWORD)v127 <= 1uLL)
      {
        v128 = "<>";
LABEL_208:
        llvm::raw_ostream::write(v11, v128);
        return;
      }
      *v127 = 15932;
      v299 = *((_QWORD *)v11 + 4) + 2;
LABEL_559:
      *((_QWORD *)v11 + 4) = v299;
      return;
    case 2:
      v37 = v7 + 168 * v6;
      v38 = *(_QWORD *)(v37 + 16);
      v39 = *(_QWORD *)(v37 + 88);
      v40 = *(unsigned __int8 *)(v37 + 82);
      v41 = *(unsigned __int8 *)(v37 + 154);
      LODWORD(v37) = *(unsigned __int8 *)(v37 + 160);
      v305 = v39;
      v306 = v38;
      if ((_DWORD)v37)
      {
        v42 = *(llvm::raw_ostream **)(a1 + 48);
        memset(&__dst, 0, sizeof(__dst));
        sub_22F119374((uint64_t *)&v306, (__int128 *)&__dst, a1 + 8);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_dst = &__dst;
        else
          p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
        llvm::raw_ostream::write(v42, (const char *)p_dst);
        goto LABEL_543;
      }
      if (v38 < 0x10 || v39 < 0x10)
      {
        if (v38 <= 0xF)
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 13;
          strcpy((char *)&__dst, "(no argument)");
          goto LABEL_225;
        }
LABEL_224:
        memset(&__dst, 0, sizeof(__dst));
        sub_22F119374((uint64_t *)&v306, (__int128 *)&__dst, a1 + 8);
LABEL_225:
        if (v39 > 0xF)
        {
          memset(&__p, 0, sizeof(__p));
          sub_22F119374((uint64_t *)&v305, (__int128 *)&__p, a1 + 8);
          v176 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else
        {
          v176 = 13;
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 13;
          strcpy((char *)&__p, "(no argument)");
        }
        v203 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
        else
          size = __dst.__r_.__value_.__l.__size_;
        v205 = v176;
        v206 = v176 & 0x7F;
        if (v205 < 0)
          v206 = __p.__r_.__value_.__l.__size_;
        if (size != v206)
          goto LABEL_494;
        if (v205 >= 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (memcmp(__dst.__r_.__value_.__l.__data_, p_p, __dst.__r_.__value_.__l.__size_))
            goto LABEL_494;
        }
        else if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F) != 0)
        {
          v208 = &__dst;
          while (v208->__r_.__value_.__s.__data_[0] == p_p->__r_.__value_.__s.__data_[0])
          {
            v208 = (std::string *)((char *)v208 + 1);
            p_p = (std::string *)((char *)p_p + 1);
            if (!--v203)
              goto LABEL_450;
          }
LABEL_494:
          if (*(_BYTE *)(a1 + 25))
          {
            v276 = *(llvm::raw_ostream **)(a1 + 48);
            v277 = (_BYTE *)*((_QWORD *)v276 + 4);
            if ((unint64_t)v277 >= *((_QWORD *)v276 + 3))
            {
              llvm::raw_ostream::write(v276);
            }
            else
            {
              *((_QWORD *)v276 + 4) = v277 + 1;
              *v277 = 91;
            }
          }
          v278 = *(llvm::raw_ostream **)(a1 + 48);
          if (v40)
            v279 = 10;
          else
            v279 = 0;
          v280 = *((_QWORD *)v278 + 4);
          if (v279 <= *((_QWORD *)v278 + 3) - v280)
          {
            if (v40)
            {
              *(_WORD *)(v280 + 8) = 8233;
              *(_QWORD *)v280 = *(_QWORD *)"(default) ";
              *((_QWORD *)v278 + 4) += 10;
            }
          }
          else
          {
            if (v40)
              v281 = "(default) ";
            else
              v281 = "";
            llvm::raw_ostream::write(v278, v281);
          }
          *(_BYTE *)(a1 + 56) = 1;
          if (*(_BYTE *)(a1 + 26))
          {
            v282 = *(llvm::raw_ostream **)(a1 + 48);
            v283 = (_BYTE *)*((_QWORD *)v282 + 4);
            if ((unint64_t)v283 >= *((_QWORD *)v282 + 3))
            {
              llvm::raw_ostream::write(v282);
            }
            else
            {
              *((_QWORD *)v282 + 4) = v283 + 1;
              *v283 = 127;
            }
          }
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v284 = &__dst;
          else
            v284 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 48), (const char *)v284);
          *(_BYTE *)(a1 + 56) = 0;
          if (*(_BYTE *)(a1 + 26))
          {
            v285 = *(llvm::raw_ostream **)(a1 + 48);
            v286 = (_BYTE *)*((_QWORD *)v285 + 4);
            if ((unint64_t)v286 >= *((_QWORD *)v285 + 3))
            {
              llvm::raw_ostream::write(v285);
            }
            else
            {
              *((_QWORD *)v285 + 4) = v286 + 1;
              *v286 = 127;
            }
          }
          if (*(_BYTE *)(a1 + 25))
          {
            v287 = *(llvm::raw_ostream **)(a1 + 48);
            v288 = (_DWORD *)*((_QWORD *)v287 + 4);
            if (*((_QWORD *)v287 + 3) - (_QWORD)v288 > 3uLL)
            {
              *v288 = 540877088;
              v289 = *((_QWORD *)v287 + 4) + 4;
              *((_QWORD *)v287 + 4) = v289;
            }
            else
            {
              v287 = (llvm::raw_ostream *)llvm::raw_ostream::write(v287, " != ");
              v289 = *((_QWORD *)v287 + 4);
            }
            if (v41)
              v290 = 10;
            else
              v290 = 0;
            if (v290 <= *((_QWORD *)v287 + 3) - v289)
            {
              if (v41)
              {
                *(_WORD *)(v289 + 8) = 8233;
                *(_QWORD *)v289 = *(_QWORD *)"(default) ";
                *((_QWORD *)v287 + 4) += 10;
              }
            }
            else
            {
              if (v41)
                v291 = "(default) ";
              else
                v291 = "";
              llvm::raw_ostream::write(v287, v291);
            }
            *(_BYTE *)(a1 + 56) = 1;
            if (*(_BYTE *)(a1 + 26))
            {
              v292 = *(llvm::raw_ostream **)(a1 + 48);
              v293 = (_BYTE *)*((_QWORD *)v292 + 4);
              if ((unint64_t)v293 >= *((_QWORD *)v292 + 3))
              {
                llvm::raw_ostream::write(v292);
              }
              else
              {
                *((_QWORD *)v292 + 4) = v293 + 1;
                *v293 = 127;
              }
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v294 = &__p;
            else
              v294 = (std::string *)__p.__r_.__value_.__r.__words[0];
            llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 48), (const char *)v294);
            *(_BYTE *)(a1 + 56) = 0;
            if (*(_BYTE *)(a1 + 26))
            {
              v295 = *(llvm::raw_ostream **)(a1 + 48);
              v296 = (_BYTE *)*((_QWORD *)v295 + 4);
              if ((unint64_t)v296 >= *((_QWORD *)v295 + 3))
              {
                llvm::raw_ostream::write(v295);
              }
              else
              {
                *((_QWORD *)v295 + 4) = v296 + 1;
                *v296 = 127;
              }
            }
            v297 = *(llvm::raw_ostream **)(a1 + 48);
            v298 = (_BYTE *)*((_QWORD *)v297 + 4);
            if (*((_BYTE **)v297 + 3) == v298)
            {
              llvm::raw_ostream::write(v297, "]");
            }
            else
            {
              *v298 = 93;
              ++*((_QWORD *)v297 + 4);
            }
          }
          goto LABEL_541;
        }
LABEL_450:
        __str.__r_.__value_.__r.__words[0] = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFFF0) + 8) | v38 & 7;
        memset(&__s1, 0, sizeof(__s1));
        sub_22F119374((uint64_t *)&__str, (__int128 *)&__s1, a1 + 8);
        v303 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFFF0) + 8) | v39 & 7;
        memset(&__str, 0, sizeof(__str));
        sub_22F119374((uint64_t *)&v303, (__int128 *)&__str, a1 + 8);
        v265 = *((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x7F;
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v266 = *((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x7F;
        else
          v266 = __s1.__r_.__value_.__l.__size_;
        v267 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        v268 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v268 = __str.__r_.__value_.__l.__size_;
        if (v266 != v268)
          goto LABEL_489;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (memcmp(__s1.__r_.__value_.__l.__data_, p_str, __s1.__r_.__value_.__l.__size_))
          {
LABEL_489:
            std::string::operator=(&__dst, &__s1);
            std::string::operator=(&__p, &__str);
            v267 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          }
        }
        else if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x7F) != 0)
        {
          p_s1 = &__s1;
          while (p_s1->__r_.__value_.__s.__data_[0] == p_str->__r_.__value_.__s.__data_[0])
          {
            p_s1 = (std::string *)((char *)p_s1 + 1);
            p_str = (std::string *)((char *)p_str + 1);
            if (!--v265)
              goto LABEL_490;
          }
          goto LABEL_489;
        }
LABEL_490:
        if (v267 < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s1.__r_.__value_.__l.__data_);
        goto LABEL_494;
      }
      if ((*(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF0) ^ *(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF0)) >= 16)
        goto LABEL_224;
      if ((v38 & 8) != 0)
      {
        v174 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
        v175 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      }
      else
      {
        v174 = 0;
        v175 = 0;
      }
      v271 = v174 | v175 | v38 & 7;
      if ((v39 & 8) != 0)
      {
        v272 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
        v273 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      }
      else
      {
        v272 = 0;
        v273 = 0;
      }
      sub_22EF7F540(a1, v271, v272 | v273 | v39 & 7);
      __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0;
      v274 = *(uint64_t ***)(a1 + 48);
      v310[4] = 257;
      sub_22F119558((uint64_t *)&__p, v274, a1 + 8, (const void ***)&__dst, 0);
      return;
    case 3:
      v17 = v7 + 168 * v6;
      v18 = *(_DWORD **)(v17 + 56);
      if (*(_BYTE *)(v17 + 160))
      {
        sub_22EF7FA90(a1, v18);
        return;
      }
      v113 = *(_QWORD *)(a1 + 48);
      v114 = *(_WORD **)(v113 + 32);
      v115 = *(_QWORD *)(v113 + 24) - (_QWORD)v114;
      if (*(_BYTE *)(a1 + 25))
      {
        v116 = *(_DWORD **)(v17 + 128);
        v117 = *(unsigned __int8 *)(v17 + 154);
        if (*(_BYTE *)(v17 + 82))
          v118 = "[(default) ";
        else
          v118 = "[";
        if (*(_BYTE *)(v17 + 82))
          v119 = 11;
        else
          v119 = 1;
        if (v119 <= v115)
        {
          memcpy(v114, v118, v119);
          *(_QWORD *)(v113 + 32) += v119;
        }
        else
        {
          llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 48), v118);
        }
        *(_BYTE *)(a1 + 56) = 1;
        if (*(_BYTE *)(a1 + 26))
        {
          v120 = *(llvm::raw_ostream **)(a1 + 48);
          v121 = (_BYTE *)*((_QWORD *)v120 + 4);
          if ((unint64_t)v121 >= *((_QWORD *)v120 + 3))
          {
            llvm::raw_ostream::write(v120);
          }
          else
          {
            *((_QWORD *)v120 + 4) = v121 + 1;
            *v121 = 127;
          }
        }
        sub_22EF7FA90(a1, v18);
        *(_BYTE *)(a1 + 56) = 0;
        if (*(_BYTE *)(a1 + 26))
        {
          v226 = *(llvm::raw_ostream **)(a1 + 48);
          v227 = (_BYTE *)*((_QWORD *)v226 + 4);
          if ((unint64_t)v227 >= *((_QWORD *)v226 + 3))
          {
            llvm::raw_ostream::write(v226);
          }
          else
          {
            *((_QWORD *)v226 + 4) = v227 + 1;
            *v227 = 127;
          }
        }
        v228 = *(llvm::raw_ostream **)(a1 + 48);
        v229 = (_DWORD *)*((_QWORD *)v228 + 4);
        if (*((_QWORD *)v228 + 3) - (_QWORD)v229 > 3uLL)
        {
          *v229 = 540877088;
          v230 = *((_QWORD *)v228 + 4) + 4;
          *((_QWORD *)v228 + 4) = v230;
        }
        else
        {
          v228 = (llvm::raw_ostream *)llvm::raw_ostream::write(v228, " != ");
          v230 = *((_QWORD *)v228 + 4);
        }
        if (v117)
          v231 = 10;
        else
          v231 = 0;
        if (v231 <= *((_QWORD *)v228 + 3) - v230)
        {
          if (v117)
          {
            *(_WORD *)(v230 + 8) = 8233;
            *(_QWORD *)v230 = *(_QWORD *)"(default) ";
            *((_QWORD *)v228 + 4) += 10;
          }
        }
        else
        {
          if (v117)
            v232 = "(default) ";
          else
            v232 = "";
          llvm::raw_ostream::write(v228, v232);
        }
        *(_BYTE *)(a1 + 56) = 1;
        if (*(_BYTE *)(a1 + 26))
        {
          v233 = *(llvm::raw_ostream **)(a1 + 48);
          v234 = (_BYTE *)*((_QWORD *)v233 + 4);
          if ((unint64_t)v234 >= *((_QWORD *)v233 + 3))
          {
            llvm::raw_ostream::write(v233);
          }
          else
          {
            *((_QWORD *)v233 + 4) = v234 + 1;
            *v234 = 127;
          }
        }
        sub_22EF7FA90(a1, v116);
        goto LABEL_442;
      }
      if (*(_BYTE *)(v17 + 82))
        v199 = 10;
      else
        v199 = 0;
      if (v199 <= v115)
      {
        if (*(_BYTE *)(v17 + 82))
        {
          v114[4] = 8233;
          *(_QWORD *)v114 = *(_QWORD *)"(default) ";
          *(_QWORD *)(v113 + 32) += 10;
        }
      }
      else
      {
        if (*(_BYTE *)(v17 + 82))
          v200 = "(default) ";
        else
          v200 = "";
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 48), v200);
      }
      *(_BYTE *)(a1 + 56) = 1;
      if (*(_BYTE *)(a1 + 26))
      {
        v201 = *(llvm::raw_ostream **)(a1 + 48);
        v202 = (_BYTE *)*((_QWORD *)v201 + 4);
        if ((unint64_t)v202 >= *((_QWORD *)v201 + 3))
        {
          llvm::raw_ostream::write(v201);
        }
        else
        {
          *((_QWORD *)v201 + 4) = v202 + 1;
          *v202 = 127;
        }
      }
      sub_22EF7FA90(a1, v18);
      goto LABEL_483;
    case 4:
      v19 = v7 + 168 * v6;
      v20 = *(_QWORD *)(v19 + 64);
      v21 = *(_QWORD *)(v19 + 136);
      v22 = *(unsigned __int8 *)(v19 + 82);
      v23 = *(unsigned __int8 *)(v19 + 154);
      v24 = *(unsigned __int8 *)(v19 + 160);
      if (v20)
      {
        v25 = *(_QWORD *)(v20 + 40) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_QWORD *)(v20 + 40) & 7) != 0 || v25 == 0)
        {
          v27 = 0;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
          v28 = &__dst;
          goto LABEL_232;
        }
        v148 = *(_DWORD **)(v25 + 16);
        v149 = *v148;
        v122 = (const char *)(v148 + 4);
        v27 = v149;
        if (v149 >= 0x17uLL)
        {
          if ((v27 | 7) == 0x17)
            v177 = (v27 & 0xFFFFFFF8) + 8;
          else
            v177 = v27 | 7;
          v28 = (std::string *)operator new(v177 + 1);
          __dst.__r_.__value_.__l.__size_ = v27;
          __dst.__r_.__value_.__r.__words[2] = v177 - 0x7FFFFFFFFFFFFFFFLL;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v27;
          v28 = &__dst;
          if (!v27)
            goto LABEL_232;
        }
      }
      else
      {
        v27 = 13;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 13;
        v28 = &__dst;
        v122 = "(no argument)";
      }
      memmove(v28, v122, v27);
LABEL_232:
      v28->__r_.__value_.__s.__data_[v27] = 0;
      if (v21)
      {
        v178 = *(_QWORD *)(v21 + 40) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_QWORD *)(v21 + 40) & 7) != 0 || v178 == 0)
        {
          v180 = 0;
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
          v181 = &__p;
          goto LABEL_248;
        }
        v183 = *(_DWORD **)(v178 + 16);
        v184 = *v183;
        v182 = (const char *)(v183 + 4);
        v180 = v184;
        if (v184 >= 0x17uLL)
        {
          if ((v180 | 7) == 0x17)
            v185 = (v180 & 0xFFFFFFF8) + 8;
          else
            v185 = v180 | 7;
          v181 = (std::string *)operator new(v185 + 1);
          __p.__r_.__value_.__l.__size_ = v180;
          __p.__r_.__value_.__r.__words[2] = v185 - 0x7FFFFFFFFFFFFFFFLL;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v181;
        }
        else
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = v180;
          v181 = &__p;
          if (!v180)
            goto LABEL_248;
        }
      }
      else
      {
        v180 = 13;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 13;
        v181 = &__p;
        v182 = "(no argument)";
      }
      memmove(v181, v182, v180);
LABEL_248:
      v181->__r_.__value_.__s.__data_[v180] = 0;
      if (v20)
        v186 = v21 == 0;
      else
        v186 = 1;
      if (v186)
        goto LABEL_343;
      v187 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v188 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
      else
        v188 = __dst.__r_.__value_.__l.__size_;
      v189 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      v190 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v190 = __p.__r_.__value_.__l.__size_;
      if (v188 != v190)
        goto LABEL_343;
      v191 = (void *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v192 = &__p;
      else
        v192 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (memcmp(__dst.__r_.__value_.__l.__data_, v192, __dst.__r_.__value_.__l.__size_))
          goto LABEL_343;
      }
      else if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F) != 0)
      {
        v193 = &__dst;
        do
        {
          if (v193->__r_.__value_.__s.__data_[0] != v192->__r_.__value_.__s.__data_[0])
            goto LABEL_343;
          v193 = (std::string *)((char *)v193 + 1);
          v192 = (std::string *)((char *)v192 + 1);
          --v187;
        }
        while (v187);
      }
      sub_22EFB9E74(v20, &__s1);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      __dst = __s1;
      sub_22EFB9E74(v21, &__s1);
      if (v189 < 0)
        operator delete(v191);
      __p = __s1;
LABEL_343:
      if (v24)
      {
        v213 = *(llvm::raw_ostream **)(a1 + 48);
        v214 = *((_QWORD *)v213 + 4);
        if ((unint64_t)(*((_QWORD *)v213 + 3) - v214) > 8)
        {
          *(_BYTE *)(v214 + 8) = 32;
          *(_QWORD *)v214 = *(_QWORD *)"template ";
          *((_QWORD *)v213 + 4) += 9;
        }
        else
        {
          v213 = (llvm::raw_ostream *)llvm::raw_ostream::write(v213, "template ");
        }
        sub_22EFC6724((uint64_t)v213, *(_QWORD *)(v20 + 40));
        goto LABEL_541;
      }
      v215 = *(_QWORD *)(a1 + 48);
      v216 = *(void **)(v215 + 32);
      v217 = *(_QWORD *)(v215 + 24) - (_QWORD)v216;
      if (*(_BYTE *)(a1 + 25))
      {
        if (v22)
          v218 = "[(default) template ";
        else
          v218 = "[template ";
        if (v22)
          v219 = 20;
        else
          v219 = 10;
        if (v219 <= v217)
        {
          memcpy(v216, v218, v219);
          *(_QWORD *)(v215 + 32) += v219;
        }
        else
        {
          llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 48), v218);
        }
        *(_BYTE *)(a1 + 56) = 1;
        if (*(_BYTE *)(a1 + 26))
        {
          v220 = *(llvm::raw_ostream **)(a1 + 48);
          v221 = (_BYTE *)*((_QWORD *)v220 + 4);
          if ((unint64_t)v221 >= *((_QWORD *)v220 + 3))
          {
            llvm::raw_ostream::write(v220);
          }
          else
          {
            *((_QWORD *)v220 + 4) = v221 + 1;
            *v221 = 127;
          }
        }
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v235 = &__dst;
        else
          v235 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 48), (const char *)v235);
        *(_BYTE *)(a1 + 56) = 0;
        if (*(_BYTE *)(a1 + 26))
        {
          v236 = *(llvm::raw_ostream **)(a1 + 48);
          v237 = (_BYTE *)*((_QWORD *)v236 + 4);
          if ((unint64_t)v237 >= *((_QWORD *)v236 + 3))
          {
            llvm::raw_ostream::write(v236);
          }
          else
          {
            *((_QWORD *)v236 + 4) = v237 + 1;
            *v237 = 127;
          }
        }
        v238 = *(llvm::raw_ostream **)(a1 + 48);
        v239 = (_DWORD *)*((_QWORD *)v238 + 4);
        if (*((_QWORD *)v238 + 3) - (_QWORD)v239 > 3uLL)
        {
          *v239 = 540877088;
          v240 = (void *)(*((_QWORD *)v238 + 4) + 4);
          *((_QWORD *)v238 + 4) = v240;
        }
        else
        {
          v238 = (llvm::raw_ostream *)llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 48), " != ");
          v240 = (void *)*((_QWORD *)v238 + 4);
        }
        if (v23)
          v241 = "(default) template ";
        else
          v241 = "template ";
        if (v23)
          v242 = 19;
        else
          v242 = 9;
        if (v242 <= *((_QWORD *)v238 + 3) - (_QWORD)v240)
        {
          memcpy(v240, v241, v242);
          *((_QWORD *)v238 + 4) += v242;
        }
        else
        {
          llvm::raw_ostream::write(v238, v241);
        }
        *(_BYTE *)(a1 + 56) = 1;
        if (*(_BYTE *)(a1 + 26))
        {
          v243 = *(llvm::raw_ostream **)(a1 + 48);
          v244 = (_BYTE *)*((_QWORD *)v243 + 4);
          if ((unint64_t)v244 >= *((_QWORD *)v243 + 3))
          {
            llvm::raw_ostream::write(v243);
          }
          else
          {
            *((_QWORD *)v243 + 4) = v244 + 1;
            *v244 = 127;
          }
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v245 = &__p;
        else
          v245 = (std::string *)__p.__r_.__value_.__r.__words[0];
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 48), (const char *)v245);
        *(_BYTE *)(a1 + 56) = 0;
        if (*(_BYTE *)(a1 + 26))
        {
          v246 = *(llvm::raw_ostream **)(a1 + 48);
          v247 = (_BYTE *)*((_QWORD *)v246 + 4);
          if ((unint64_t)v247 >= *((_QWORD *)v246 + 3))
          {
            llvm::raw_ostream::write(v246);
          }
          else
          {
            *((_QWORD *)v246 + 4) = v247 + 1;
            *v247 = 127;
          }
        }
        v248 = *(llvm::raw_ostream **)(a1 + 48);
        v249 = (char *)*((_QWORD *)v248 + 4);
        if ((unint64_t)v249 < *((_QWORD *)v248 + 3))
        {
          *((_QWORD *)v248 + 4) = v249 + 1;
          v250 = 93;
LABEL_479:
          *v249 = v250;
          goto LABEL_541;
        }
      }
      else
      {
        if (v22)
          v222 = "(default) template ";
        else
          v222 = "template ";
        if (v22)
          v223 = 19;
        else
          v223 = 9;
        if (v223 <= v217)
        {
          memcpy(v216, v222, v223);
          *(_QWORD *)(v215 + 32) += v223;
        }
        else
        {
          llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 48), v222);
        }
        *(_BYTE *)(a1 + 56) = 1;
        if (*(_BYTE *)(a1 + 26))
        {
          v224 = *(llvm::raw_ostream **)(a1 + 48);
          v225 = (_BYTE *)*((_QWORD *)v224 + 4);
          if ((unint64_t)v225 >= *((_QWORD *)v224 + 3))
          {
            llvm::raw_ostream::write(v224);
          }
          else
          {
            *((_QWORD *)v224 + 4) = v225 + 1;
            *v225 = 127;
          }
        }
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v275 = &__dst;
        else
          v275 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 48), (const char *)v275);
        *(_BYTE *)(a1 + 56) = 0;
        if (!*(_BYTE *)(a1 + 26))
        {
LABEL_541:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
LABEL_543:
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          return;
        }
        v248 = *(llvm::raw_ostream **)(a1 + 48);
        v249 = (char *)*((_QWORD *)v248 + 4);
        if ((unint64_t)v249 < *((_QWORD *)v248 + 3))
        {
          *((_QWORD *)v248 + 4) = v249 + 1;
          v250 = 127;
          goto LABEL_479;
        }
      }
      llvm::raw_ostream::write(v248);
      goto LABEL_541;
    case 5:
      LODWORD(__s1.__r_.__value_.__r.__words[1]) = 1;
      __s1.__r_.__value_.__r.__words[0] = 0;
      __s1.__r_.__value_.__s.__data_[12] = 0;
      LODWORD(__str.__r_.__value_.__r.__words[1]) = 1;
      __str.__r_.__value_.__r.__words[0] = 0;
      __str.__r_.__value_.__s.__data_[12] = 0;
      v13 = v7 + 168 * v6;
      v14 = (const llvm::APInt *)(v13 + 32);
      if (*(_DWORD *)(v13 + 40) > 0x40u)
      {
        llvm::APInt::assignSlowCase((llvm::APInt *)&__s1, v14);
        v53 = v7 + 168 * v6;
        v6 = *(_DWORD *)(a1 + 2776);
        v7 = *(_QWORD *)(a1 + 64);
        __s1.__r_.__value_.__s.__data_[12] = *(_BYTE *)(v53 + 44);
        v16 = (const llvm::APInt *)(v7 + 168 * v6 + 104);
      }
      else
      {
        __s1.__r_.__value_.__r.__words[0] = *(_QWORD *)v14;
        LODWORD(__s1.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v13 + 40);
        v15 = v7 + 168 * v6;
        __s1.__r_.__value_.__s.__data_[12] = *(_BYTE *)(v15 + 44);
        v16 = (const llvm::APInt *)(v15 + 104);
      }
      v54 = *((_DWORD *)v16 + 2);
      if (v54 > 0x40)
      {
        llvm::APInt::assignSlowCase((llvm::APInt *)&__str, v16);
        v55 = *(_DWORD *)(a1 + 2776);
        v56 = *(_QWORD *)(a1 + 64);
      }
      else
      {
        __str.__r_.__value_.__r.__words[0] = *(_QWORD *)v16;
        LODWORD(__str.__r_.__value_.__r.__words[1]) = v54;
        v55 = v6;
        v56 = v7;
      }
      __str.__r_.__value_.__s.__data_[12] = *(_BYTE *)(v7 + 168 * v6 + 116);
      v57 = v56 + 168 * v55;
      v58 = *(_QWORD *)(v57 + 16);
      if (*(_BYTE *)(v57 + 160))
      {
        v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v60 = *(llvm::raw_ostream **)(a1 + 48);
        if (v59)
          v61 = (*(_DWORD *)(v59 + 16) & 0xFF800FF) == 87031819;
        else
          v61 = 0;
        if (v61)
        {
          v144 = sub_22E42E5EC((uint64_t)&__s1, 0);
          if (v144)
            v145 = "false";
          else
            v145 = "true";
          if (v144)
            v146 = 5;
          else
            v146 = 4;
          v147 = (void *)*((_QWORD *)v60 + 4);
          if (v146 <= *((_QWORD *)v60 + 3) - (_QWORD)v147)
          {
            memcpy(v147, v145, v146);
            *((_QWORD *)v60 + 4) += v146;
          }
          else
          {
            llvm::raw_ostream::write(v60, v145);
          }
          goto LABEL_326;
        }
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v310;
        *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_22F455490;
        llvm::APInt::toString();
        v62 = __dst.__r_.__value_.__l.__size_;
        if (__dst.__r_.__value_.__l.__size_ >= 0x7FFFFFFFFFFFFFF8)
          abort();
        v63 = (const void *)__dst.__r_.__value_.__r.__words[0];
        if (__dst.__r_.__value_.__l.__size_ >= 0x17)
        {
          v194 = (__dst.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((__dst.__r_.__value_.__l.__size_ | 7) != 0x17)
            v194 = __dst.__r_.__value_.__l.__size_ | 7;
          v195 = v194 + 1;
          v64 = (std::string *)operator new(v194 + 1);
          __p.__r_.__value_.__l.__size_ = v62;
          __p.__r_.__value_.__r.__words[2] = v195 | 0x8000000000000000;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
        }
        else
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = __dst.__r_.__value_.__s.__data_[8];
          v64 = &__p;
          if (!__dst.__r_.__value_.__l.__size_)
            goto LABEL_271;
        }
        memmove(v64, v63, v62);
LABEL_271:
        v64->__r_.__value_.__s.__data_[v62] = 0;
        if (__dst.__r_.__value_.__l.__data_ != (std::string::pointer)v310)
          free(__dst.__r_.__value_.__l.__data_);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v196 = &__p;
        else
          v196 = (std::string *)__p.__r_.__value_.__r.__words[0];
        llvm::raw_ostream::write(v60, (const char *)v196);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_326;
      }
      v95 = 0;
      v96 = *(unsigned __int8 *)(v57 + 48);
      v97 = *(unsigned __int8 *)(v57 + 120);
      v98 = *(_QWORD *)(v57 + 88);
      v99 = *(unsigned __int8 **)(v57 + 56);
      if (*(_BYTE *)(v57 + 48) && *(_BYTE *)(v57 + 120))
        v95 = (*(_QWORD *)((*(_QWORD *)(v57 + 16) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(v57 + 16) & 7) != (*(_QWORD *)((*(_QWORD *)(v57 + 88) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(v57 + 88) & 7);
      v100 = *(llvm::raw_ostream **)(a1 + 48);
      v101 = (_WORD *)*((_QWORD *)v100 + 4);
      v102 = *((_QWORD *)v100 + 3) - (_QWORD)v101;
      if (*(_BYTE *)(a1 + 25))
      {
        v301 = *(unsigned __int8 **)(v57 + 128);
        v103 = *(unsigned __int8 *)(v57 + 154);
        if (*(_BYTE *)(v57 + 82))
          v104 = "[(default) ";
        else
          v104 = "[";
        if (*(_BYTE *)(v57 + 82))
          v105 = 11;
        else
          v105 = 1;
        if (v105 <= v102)
        {
          memcpy(v101, v104, v105);
          *((_QWORD *)v100 + 4) += v105;
        }
        else
        {
          llvm::raw_ostream::write(v100, v104);
        }
        sub_22EF7FB10(a1, (uint64_t)&__s1, v99, v96 != 0, v58, v95);
        v106 = *(llvm::raw_ostream **)(a1 + 48);
        v107 = (_DWORD *)*((_QWORD *)v106 + 4);
        if (*((_QWORD *)v106 + 3) - (_QWORD)v107 > 3uLL)
        {
          *v107 = 540877088;
          v108 = *((_QWORD *)v106 + 4) + 4;
          *((_QWORD *)v106 + 4) = v108;
        }
        else
        {
          v106 = (llvm::raw_ostream *)llvm::raw_ostream::write(v106, " != ");
          v108 = *((_QWORD *)v106 + 4);
        }
        if (v103)
          v109 = 10;
        else
          v109 = 0;
        if (v109 <= *((_QWORD *)v106 + 3) - v108)
        {
          if (v103)
          {
            *(_WORD *)(v108 + 8) = 8233;
            *(_QWORD *)v108 = *(_QWORD *)"(default) ";
            *((_QWORD *)v106 + 4) += 10;
          }
        }
        else
        {
          if (v103)
            v110 = "(default) ";
          else
            v110 = "";
          llvm::raw_ostream::write(v106, v110);
        }
        sub_22EF7FB10(a1, (uint64_t)&__str, v301, v97 != 0, v98, v95);
        v111 = *(llvm::raw_ostream **)(a1 + 48);
        v112 = (_BYTE *)*((_QWORD *)v111 + 4);
        if ((unint64_t)v112 >= *((_QWORD *)v111 + 3))
        {
          llvm::raw_ostream::write(v111);
        }
        else
        {
          *((_QWORD *)v111 + 4) = v112 + 1;
          *v112 = 93;
        }
      }
      else
      {
        if (*(_BYTE *)(v57 + 82))
          v197 = 10;
        else
          v197 = 0;
        if (v197 <= v102)
        {
          if (*(_BYTE *)(v57 + 82))
          {
            v101[4] = 8233;
            *(_QWORD *)v101 = *(_QWORD *)"(default) ";
            *((_QWORD *)v100 + 4) += 10;
          }
        }
        else
        {
          if (*(_BYTE *)(v57 + 82))
            v198 = "(default) ";
          else
            v198 = "";
          llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 48), v198);
        }
        sub_22EF7FB10(a1, (uint64_t)&__s1, v99, v96 != 0, v58, v95);
      }
LABEL_326:
      if (LODWORD(__str.__r_.__value_.__r.__words[1]) >= 0x41 && __str.__r_.__value_.__r.__words[0])
        MEMORY[0x2348A0E84](__str.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
      if (LODWORD(__s1.__r_.__value_.__r.__words[1]) >= 0x41)
      {
        v173 = __s1.__r_.__value_.__r.__words[0];
        if (__s1.__r_.__value_.__r.__words[0])
          goto LABEL_331;
      }
      return;
    case 6:
      v44 = v7 + 168 * v6;
      v45 = *(_DWORD **)(v44 + 72);
      v46 = *(unsigned __int8 *)(v44 + 80);
      v47 = *(unsigned __int8 *)(v44 + 81);
      v48 = *(_DWORD **)(v44 + 56);
      if (*(_BYTE *)(v44 + 160))
      {
        sub_22EF800D4(a1, v45, v46 != 0, v48, v47 != 0);
        return;
      }
      v130 = *(llvm::raw_ostream **)(a1 + 48);
      v131 = (_WORD *)*((_QWORD *)v130 + 4);
      v132 = *((_QWORD *)v130 + 3) - (_QWORD)v131;
      if (*(_BYTE *)(a1 + 25))
      {
        v302 = *(_DWORD **)(v44 + 144);
        v133 = *(unsigned __int8 *)(v44 + 152);
        v134 = *(unsigned __int8 *)(v44 + 153);
        v300 = *(_DWORD **)(v44 + 128);
        v135 = *(unsigned __int8 *)(v44 + 154);
        if (*(_BYTE *)(v44 + 82))
          v136 = "[(default) ";
        else
          v136 = "[";
        if (*(_BYTE *)(v44 + 82))
          v137 = 11;
        else
          v137 = 1;
        if (v137 <= v132)
        {
          memcpy(v131, v136, v137);
          *((_QWORD *)v130 + 4) += v137;
        }
        else
        {
          llvm::raw_ostream::write(v130, v136);
        }
        *(_BYTE *)(a1 + 56) = 1;
        if (*(_BYTE *)(a1 + 26))
        {
          v138 = *(llvm::raw_ostream **)(a1 + 48);
          v139 = (_BYTE *)*((_QWORD *)v138 + 4);
          if ((unint64_t)v139 >= *((_QWORD *)v138 + 3))
          {
            llvm::raw_ostream::write(v138);
          }
          else
          {
            *((_QWORD *)v138 + 4) = v139 + 1;
            *v139 = 127;
          }
        }
        sub_22EF800D4(a1, v45, v46 != 0, v48, v47 != 0);
        *(_BYTE *)(a1 + 56) = 0;
        if (*(_BYTE *)(a1 + 26))
        {
          v251 = *(llvm::raw_ostream **)(a1 + 48);
          v252 = (_BYTE *)*((_QWORD *)v251 + 4);
          if ((unint64_t)v252 >= *((_QWORD *)v251 + 3))
          {
            llvm::raw_ostream::write(v251);
          }
          else
          {
            *((_QWORD *)v251 + 4) = v252 + 1;
            *v252 = 127;
          }
        }
        v253 = *(llvm::raw_ostream **)(a1 + 48);
        v254 = (_DWORD *)*((_QWORD *)v253 + 4);
        if (*((_QWORD *)v253 + 3) - (_QWORD)v254 > 3uLL)
        {
          *v254 = 540877088;
          v255 = *((_QWORD *)v253 + 4) + 4;
          *((_QWORD *)v253 + 4) = v255;
        }
        else
        {
          v253 = (llvm::raw_ostream *)llvm::raw_ostream::write(v253, " != ");
          v255 = *((_QWORD *)v253 + 4);
        }
        if (v135)
          v256 = 10;
        else
          v256 = 0;
        if (v256 <= *((_QWORD *)v253 + 3) - v255)
        {
          if (v135)
          {
            *(_WORD *)(v255 + 8) = 8233;
            *(_QWORD *)v255 = *(_QWORD *)"(default) ";
            *((_QWORD *)v253 + 4) += 10;
          }
        }
        else
        {
          if (v135)
            v257 = "(default) ";
          else
            v257 = "";
          llvm::raw_ostream::write(v253, v257);
        }
        *(_BYTE *)(a1 + 56) = 1;
        if (*(_BYTE *)(a1 + 26))
        {
          v258 = *(llvm::raw_ostream **)(a1 + 48);
          v259 = (_BYTE *)*((_QWORD *)v258 + 4);
          if ((unint64_t)v259 >= *((_QWORD *)v258 + 3))
          {
            llvm::raw_ostream::write(v258);
          }
          else
          {
            *((_QWORD *)v258 + 4) = v259 + 1;
            *v259 = 127;
          }
        }
        sub_22EF800D4(a1, v302, v133 != 0, v300, v134 != 0);
LABEL_442:
        *(_BYTE *)(a1 + 56) = 0;
        if (*(_BYTE *)(a1 + 26))
        {
          v260 = *(llvm::raw_ostream **)(a1 + 48);
          v261 = (_BYTE *)*((_QWORD *)v260 + 4);
          if ((unint64_t)v261 >= *((_QWORD *)v260 + 3))
          {
            llvm::raw_ostream::write(v260);
          }
          else
          {
            *((_QWORD *)v260 + 4) = v261 + 1;
            *v261 = 127;
          }
        }
        v262 = *(llvm::raw_ostream **)(a1 + 48);
        v263 = (char *)*((_QWORD *)v262 + 4);
        if ((unint64_t)v263 < *((_QWORD *)v262 + 3))
        {
          *((_QWORD *)v262 + 4) = v263 + 1;
          v264 = 93;
LABEL_486:
          *v263 = v264;
          return;
        }
        goto LABEL_487;
      }
      if (*(_BYTE *)(v44 + 82))
        v209 = 10;
      else
        v209 = 0;
      if (v209 <= v132)
      {
        if (*(_BYTE *)(v44 + 82))
        {
          v131[4] = 8233;
          *(_QWORD *)v131 = *(_QWORD *)"(default) ";
          *((_QWORD *)v130 + 4) += 10;
        }
      }
      else
      {
        if (*(_BYTE *)(v44 + 82))
          v210 = "(default) ";
        else
          v210 = "";
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 48), v210);
      }
      *(_BYTE *)(a1 + 56) = 1;
      if (*(_BYTE *)(a1 + 26))
      {
        v211 = *(llvm::raw_ostream **)(a1 + 48);
        v212 = (_BYTE *)*((_QWORD *)v211 + 4);
        if ((unint64_t)v212 >= *((_QWORD *)v211 + 3))
        {
          llvm::raw_ostream::write(v211);
        }
        else
        {
          *((_QWORD *)v211 + 4) = v212 + 1;
          *v212 = 127;
        }
      }
      sub_22EF800D4(a1, v45, v46 != 0, v48, v47 != 0);
LABEL_483:
      *(_BYTE *)(a1 + 56) = 0;
      if (*(_BYTE *)(a1 + 26))
      {
        v262 = *(llvm::raw_ostream **)(a1 + 48);
        v263 = (char *)*((_QWORD *)v262 + 4);
        if ((unint64_t)v263 < *((_QWORD *)v262 + 3))
        {
          *((_QWORD *)v262 + 4) = v263 + 1;
          v264 = 127;
          goto LABEL_486;
        }
LABEL_487:
        llvm::raw_ostream::write(v262);
      }
      return;
    case 7:
      LODWORD(__dst.__r_.__value_.__r.__words[1]) = 1;
      __dst.__r_.__value_.__r.__words[0] = 0;
      __dst.__r_.__value_.__s.__data_[12] = 0;
      v49 = v7 + 168 * v6;
      v50 = (const llvm::APInt *)(v49 + 32);
      if (*(_DWORD *)(v49 + 40) > 0x40u)
      {
        llvm::APInt::assignSlowCase((llvm::APInt *)&__dst, v50);
        v51 = *(_DWORD *)(a1 + 2776);
        v52 = *(_QWORD *)(a1 + 64);
      }
      else
      {
        __dst.__r_.__value_.__r.__words[0] = *(_QWORD *)v50;
        LODWORD(__dst.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v49 + 40);
        v51 = v6;
        v52 = v7;
      }
      __dst.__r_.__value_.__s.__data_[12] = *(_BYTE *)(v7 + 168 * v6 + 44);
      v76 = v52 + 168 * v51;
      v77 = *(_QWORD *)(v76 + 16);
      v78 = *(unsigned __int8 **)(v76 + 56);
      if (*(_BYTE *)(a1 + 25))
      {
        v79 = *(_DWORD **)(v76 + 144);
        v80 = *(unsigned __int8 *)(v76 + 152);
        v81 = *(unsigned __int8 *)(v76 + 153);
        v82 = *(_DWORD **)(v76 + 128);
        v83 = *(unsigned __int8 *)(v52 + 168 * v51 + 154);
        v84 = *(_QWORD *)(a1 + 48);
        if (*(_BYTE *)(v76 + 82))
          v85 = "[(default) ";
        else
          v85 = "[";
        if (*(_BYTE *)(v76 + 82))
          v86 = 11;
        else
          v86 = 1;
        v87 = *(void **)(v84 + 32);
        if (v86 <= *(_QWORD *)(v84 + 24) - (_QWORD)v87)
        {
          memcpy(v87, v85, v86);
          *(_QWORD *)(v84 + 32) += v86;
        }
        else
        {
          llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 48), v85);
        }
        sub_22EF7FB10(a1, (uint64_t)&__dst, v78, 1, v77, 0);
        v88 = *(llvm::raw_ostream **)(a1 + 48);
        v89 = (_DWORD *)*((_QWORD *)v88 + 4);
        if (*((_QWORD *)v88 + 3) - (_QWORD)v89 > 3uLL)
        {
          *v89 = 540877088;
          v90 = *((_QWORD *)v88 + 4) + 4;
          *((_QWORD *)v88 + 4) = v90;
        }
        else
        {
          v88 = (llvm::raw_ostream *)llvm::raw_ostream::write(v88, " != ");
          v90 = *((_QWORD *)v88 + 4);
        }
        if (v83)
          v91 = 10;
        else
          v91 = 0;
        if (v91 <= *((_QWORD *)v88 + 3) - v90)
        {
          if (v83)
          {
            *(_WORD *)(v90 + 8) = 8233;
            *(_QWORD *)v90 = *(_QWORD *)"(default) ";
            *((_QWORD *)v88 + 4) += 10;
          }
        }
        else
        {
          if (v83)
            v92 = "(default) ";
          else
            v92 = "";
          llvm::raw_ostream::write(v88, v92);
        }
        *(_BYTE *)(a1 + 56) = 1;
        if (*(_BYTE *)(a1 + 26))
        {
          v93 = *(llvm::raw_ostream **)(a1 + 48);
          v94 = (_BYTE *)*((_QWORD *)v93 + 4);
          if ((unint64_t)v94 >= *((_QWORD *)v93 + 3))
          {
            llvm::raw_ostream::write(v93);
          }
          else
          {
            *((_QWORD *)v93 + 4) = v94 + 1;
            *v94 = 127;
          }
        }
        sub_22EF800D4(a1, v79, v80 != 0, v82, v81 != 0);
        *(_BYTE *)(a1 + 56) = 0;
        if (*(_BYTE *)(a1 + 26))
        {
          v168 = *(llvm::raw_ostream **)(a1 + 48);
          v169 = (_BYTE *)*((_QWORD *)v168 + 4);
          if ((unint64_t)v169 >= *((_QWORD *)v168 + 3))
          {
            llvm::raw_ostream::write(v168);
          }
          else
          {
            *((_QWORD *)v168 + 4) = v169 + 1;
            *v169 = 127;
          }
        }
        goto LABEL_214;
      }
      v140 = *(llvm::raw_ostream **)(a1 + 48);
      if (*(_BYTE *)(v76 + 82))
        v141 = 10;
      else
        v141 = 0;
      v142 = *((_QWORD *)v140 + 4);
      if (v141 <= *((_QWORD *)v140 + 3) - v142)
      {
        if (*(_BYTE *)(v76 + 82))
        {
          *(_WORD *)(v142 + 8) = 8233;
          *(_QWORD *)v142 = *(_QWORD *)"(default) ";
          *((_QWORD *)v140 + 4) += 10;
        }
      }
      else
      {
        if (*(_BYTE *)(v76 + 82))
          v143 = "(default) ";
        else
          v143 = "";
        llvm::raw_ostream::write(v140, v143);
      }
      sub_22EF7FB10(a1, (uint64_t)&__dst, v78, 1, v77, 0);
      goto LABEL_218;
    case 8:
      LODWORD(__dst.__r_.__value_.__r.__words[1]) = 1;
      __dst.__r_.__value_.__r.__words[0] = 0;
      __dst.__r_.__value_.__s.__data_[12] = 0;
      v29 = v7 + 168 * v6;
      v30 = *(_DWORD **)(v29 + 72);
      v31 = *(unsigned __int8 *)(v29 + 80);
      v32 = *(unsigned __int8 *)(v29 + 81);
      v33 = *(_DWORD **)(v29 + 56);
      v34 = (const llvm::APInt *)(v29 + 104);
      if (*(_DWORD *)(v29 + 112) > 0x40u)
      {
        llvm::APInt::assignSlowCase((llvm::APInt *)&__dst, v34);
        v35 = *(_DWORD *)(a1 + 2776);
        v36 = *(_QWORD *)(a1 + 64);
      }
      else
      {
        __dst.__r_.__value_.__r.__words[0] = *(_QWORD *)v34;
        LODWORD(__dst.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v29 + 112);
        v35 = v6;
        v36 = v7;
      }
      __dst.__r_.__value_.__s.__data_[12] = *(_BYTE *)(v7 + 168 * v6 + 116);
      v65 = v36 + 168 * v35;
      v66 = *(_QWORD *)(a1 + 48);
      v67 = *(_WORD **)(v66 + 32);
      v68 = *(_QWORD *)(v66 + 24) - (_QWORD)v67;
      if (*(_BYTE *)(a1 + 25))
      {
        v69 = *(_QWORD *)(v65 + 88);
        v70 = *(unsigned __int8 **)(v65 + 128);
        v71 = *(unsigned __int8 *)(v65 + 154);
        if (*(_BYTE *)(v65 + 82))
          v72 = "[(default) ";
        else
          v72 = "[";
        if (*(_BYTE *)(v65 + 82))
          v73 = 11;
        else
          v73 = 1;
        if (v73 <= v68)
        {
          memcpy(v67, v72, v73);
          *(_QWORD *)(v66 + 32) += v73;
        }
        else
        {
          llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 48), v72);
        }
        *(_BYTE *)(a1 + 56) = 1;
        if (*(_BYTE *)(a1 + 26))
        {
          v74 = *(llvm::raw_ostream **)(a1 + 48);
          v75 = (_BYTE *)*((_QWORD *)v74 + 4);
          if ((unint64_t)v75 >= *((_QWORD *)v74 + 3))
          {
            llvm::raw_ostream::write(v74);
          }
          else
          {
            *((_QWORD *)v74 + 4) = v75 + 1;
            *v75 = 127;
          }
        }
        sub_22EF800D4(a1, v30, v31 != 0, v33, v32 != 0);
        *(_BYTE *)(a1 + 56) = 0;
        if (*(_BYTE *)(a1 + 26))
        {
          v160 = *(llvm::raw_ostream **)(a1 + 48);
          v161 = (_BYTE *)*((_QWORD *)v160 + 4);
          if ((unint64_t)v161 >= *((_QWORD *)v160 + 3))
          {
            llvm::raw_ostream::write(v160);
          }
          else
          {
            *((_QWORD *)v160 + 4) = v161 + 1;
            *v161 = 127;
          }
        }
        v162 = *(llvm::raw_ostream **)(a1 + 48);
        v163 = (_DWORD *)*((_QWORD *)v162 + 4);
        if (*((_QWORD *)v162 + 3) - (_QWORD)v163 > 3uLL)
        {
          *v163 = 540877088;
          v164 = *((_QWORD *)v162 + 4) + 4;
          *((_QWORD *)v162 + 4) = v164;
        }
        else
        {
          v162 = (llvm::raw_ostream *)llvm::raw_ostream::write(v162, " != ");
          v164 = *((_QWORD *)v162 + 4);
        }
        if (v71)
          v165 = 10;
        else
          v165 = 0;
        if (v165 <= *((_QWORD *)v162 + 3) - v164)
        {
          if (v71)
          {
            *(_WORD *)(v164 + 8) = 8233;
            *(_QWORD *)v164 = *(_QWORD *)"(default) ";
            *((_QWORD *)v162 + 4) += 10;
          }
        }
        else
        {
          if (v71)
            v166 = "(default) ";
          else
            v166 = "";
          llvm::raw_ostream::write(v162, v166);
        }
        sub_22EF7FB10(a1, (uint64_t)&__dst, v70, 1, v69, 0);
LABEL_214:
        v170 = *(llvm::raw_ostream **)(a1 + 48);
        v171 = (char *)*((_QWORD *)v170 + 4);
        if ((unint64_t)v171 < *((_QWORD *)v170 + 3))
        {
          *((_QWORD *)v170 + 4) = v171 + 1;
          v172 = 93;
LABEL_216:
          *v171 = v172;
          goto LABEL_218;
        }
      }
      else
      {
        if (*(_BYTE *)(v65 + 82))
          v123 = 10;
        else
          v123 = 0;
        if (v123 <= v68)
        {
          if (*(_BYTE *)(v65 + 82))
          {
            v67[4] = 8233;
            *(_QWORD *)v67 = *(_QWORD *)"(default) ";
            *(_QWORD *)(v66 + 32) += 10;
          }
        }
        else
        {
          if (*(_BYTE *)(v65 + 82))
            v124 = "(default) ";
          else
            v124 = "";
          llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 48), v124);
        }
        *(_BYTE *)(a1 + 56) = 1;
        if (*(_BYTE *)(a1 + 26))
        {
          v125 = *(llvm::raw_ostream **)(a1 + 48);
          v126 = (_BYTE *)*((_QWORD *)v125 + 4);
          if ((unint64_t)v126 >= *((_QWORD *)v125 + 3))
          {
            llvm::raw_ostream::write(v125);
          }
          else
          {
            *((_QWORD *)v125 + 4) = v126 + 1;
            *v126 = 127;
          }
        }
        sub_22EF800D4(a1, v30, v31 != 0, v33, v32 != 0);
        *(_BYTE *)(a1 + 56) = 0;
        if (!*(_BYTE *)(a1 + 26))
        {
LABEL_218:
          if (LODWORD(__dst.__r_.__value_.__r.__words[1]) < 0x41)
            return;
          v173 = __dst.__r_.__value_.__r.__words[0];
          if (!__dst.__r_.__value_.__r.__words[0])
            return;
LABEL_331:
          MEMORY[0x2348A0E84](v173, 0x1000C8000313F17);
          return;
        }
        v170 = *(llvm::raw_ostream **)(a1 + 48);
        v171 = (char *)*((_QWORD *)v170 + 4);
        if ((unint64_t)v171 < *((_QWORD *)v170 + 3))
        {
          *((_QWORD *)v170 + 4) = v171 + 1;
          v172 = 127;
          goto LABEL_216;
        }
      }
      llvm::raw_ostream::write(v170);
      goto LABEL_218;
    default:
      return;
  }
}

void sub_22EF7F540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  _WORD *v15;
  llvm::raw_ostream *v16;
  _OWORD *v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  llvm::raw_ostream *v20;
  void *v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v24 = a3;
  v25 = a2;
  if (BYTE4(a2) & 0xC | a2)
  {
    if (a2 == a3)
    {
      v26 = a2;
      sub_22F1186E0(&v26, *(llvm::raw_ostream **)(a1 + 48), (_QWORD *)(a1 + 8), 1);
      return;
    }
  }
  else if (!(a3 | BYTE4(a3) & 0xC) || a2 == a3)
  {
    return;
  }
  v4 = sub_22F257E74((unsigned int *)&v25, (unsigned int *)&v24);
  v5 = v4;
  if (*(_BYTE *)(a1 + 25))
  {
    v6 = *(llvm::raw_ostream **)(a1 + 48);
    v7 = (_BYTE *)*((_QWORD *)v6 + 4);
    if (*((_BYTE **)v6 + 3) == v7)
    {
      llvm::raw_ostream::write(v6, "[");
    }
    else
    {
      *v7 = 91;
      ++*((_QWORD *)v6 + 4);
    }
    if ((v5 & 0xCFFFFFFFFLL) != 0)
    {
      v26 = v5;
      sub_22F1186E0(&v26, *(llvm::raw_ostream **)(a1 + 48), (_QWORD *)(a1 + 8), 1);
    }
    else if (!(v25 | BYTE4(v25) & 0xC))
    {
      *(_BYTE *)(a1 + 56) = 1;
      if (*(_BYTE *)(a1 + 26))
      {
        v8 = *(llvm::raw_ostream **)(a1 + 48);
        v9 = (_BYTE *)*((_QWORD *)v8 + 4);
        if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
        {
          llvm::raw_ostream::write(v8);
        }
        else
        {
          *((_QWORD *)v8 + 4) = v9 + 1;
          *v9 = 127;
        }
      }
      v16 = *(llvm::raw_ostream **)(a1 + 48);
      v17 = (_OWORD *)*((_QWORD *)v16 + 4);
      if (*((_QWORD *)v16 + 3) - (_QWORD)v17 > 0xFuLL)
      {
        *v17 = *(_OWORD *)"(no qualifiers) ";
        *((_QWORD *)v16 + 4) += 16;
      }
      else
      {
        llvm::raw_ostream::write(v16, "(no qualifiers) ");
      }
      *(_BYTE *)(a1 + 56) = 0;
      if (*(_BYTE *)(a1 + 26))
      {
        v18 = *(llvm::raw_ostream **)(a1 + 48);
        v19 = (_BYTE *)*((_QWORD *)v18 + 4);
        if ((unint64_t)v19 >= *((_QWORD *)v18 + 3))
        {
          llvm::raw_ostream::write(v18);
        }
        else
        {
          *((_QWORD *)v18 + 4) = v19 + 1;
          *v19 = 127;
        }
      }
LABEL_20:
      v10 = *(llvm::raw_ostream **)(a1 + 48);
      v11 = *((_QWORD *)v10 + 4);
      if ((unint64_t)(*((_QWORD *)v10 + 3) - v11) > 2)
      {
        *(_BYTE *)(v11 + 2) = 32;
        *(_WORD *)v11 = 15649;
        *((_QWORD *)v10 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v10, "!= ");
      }
      if ((v5 & 0xCFFFFFFFFLL) != 0)
      {
        v26 = v5;
        sub_22F1186E0(&v26, *(llvm::raw_ostream **)(a1 + 48), (_QWORD *)(a1 + 8), (v24 | BYTE4(v24) & 0xC) != 0);
      }
      else if (!(v24 | BYTE4(v24) & 0xC))
      {
        *(_BYTE *)(a1 + 56) = 1;
        if (*(_BYTE *)(a1 + 26))
        {
          v12 = *(llvm::raw_ostream **)(a1 + 48);
          v13 = (_BYTE *)*((_QWORD *)v12 + 4);
          if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
          {
            llvm::raw_ostream::write(v12);
          }
          else
          {
            *((_QWORD *)v12 + 4) = v13 + 1;
            *v13 = 127;
          }
        }
        v20 = *(llvm::raw_ostream **)(a1 + 48);
        v21 = (void *)*((_QWORD *)v20 + 4);
        if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 0xEuLL)
        {
          qmemcpy(v21, "(no qualifiers)", 15);
          *((_QWORD *)v20 + 4) += 15;
        }
        else
        {
          llvm::raw_ostream::write(v20, "(no qualifiers)");
        }
        *(_BYTE *)(a1 + 56) = 0;
        if (*(_BYTE *)(a1 + 26))
        {
          v22 = *(llvm::raw_ostream **)(a1 + 48);
          v23 = (_BYTE *)*((_QWORD *)v22 + 4);
          if ((unint64_t)v23 >= *((_QWORD *)v22 + 3))
          {
            llvm::raw_ostream::write(v22);
          }
          else
          {
            *((_QWORD *)v22 + 4) = v23 + 1;
            *v23 = 127;
          }
        }
        goto LABEL_29;
      }
      sub_22EF80364(a1, v24, 0);
LABEL_29:
      v14 = *(llvm::raw_ostream **)(a1 + 48);
      v15 = (_WORD *)*((_QWORD *)v14 + 4);
      if (*((_QWORD *)v14 + 3) - (_QWORD)v15 > 1uLL)
      {
        *v15 = 8285;
        *((_QWORD *)v14 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v14, "] ");
      }
      return;
    }
    sub_22EF80364(a1, v25, 1);
    goto LABEL_20;
  }
  v26 = v4;
  if ((v4 & 0xCFFFFFFFFLL) != 0)
    sub_22F1186E0(&v26, *(llvm::raw_ostream **)(a1 + 48), (_QWORD *)(a1 + 8), 1);
  sub_22EF80364(a1, v25, 1);
}

llvm::raw_ostream *sub_22EF7F8FC(uint64_t a1, int a2, int a3)
{
  int v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _WORD *v9;
  llvm::raw_ostream *result;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  _DWORD *v14;
  uint64_t v15;

  if (*(_BYTE *)(a1 + 25))
  {
    v5 = a3;
    v6 = *(llvm::raw_ostream **)(a1 + 48);
    v7 = (_BYTE *)*((_QWORD *)v6 + 4);
    if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
    {
      llvm::raw_ostream::write(v6);
      if (!v5)
        goto LABEL_11;
    }
    else
    {
      *((_QWORD *)v6 + 4) = v7 + 1;
      *v7 = 10;
      if (!a3)
        goto LABEL_11;
    }
    do
    {
      v8 = *(llvm::raw_ostream **)(a1 + 48);
      v9 = (_WORD *)*((_QWORD *)v8 + 4);
      if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
      {
        *v9 = 8224;
        *((_QWORD *)v8 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v8, "  ");
      }
      --v5;
    }
    while (v5);
  }
LABEL_11:
  result = *(llvm::raw_ostream **)(a1 + 48);
  v12 = *((_QWORD *)result + 3);
  v11 = *((_QWORD *)result + 4);
  if (a2 == 1)
  {
    if ((unint64_t)(v12 - v11) <= 4)
    {
      v13 = "[...]";
      return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v13);
    }
    *(_BYTE *)(v11 + 4) = 93;
    *(_DWORD *)v11 = 774778459;
    v15 = *((_QWORD *)result + 4) + 5;
  }
  else
  {
    if (v12 == v11)
    {
      llvm::raw_ostream::write(result, "[");
    }
    else
    {
      *(_BYTE *)v11 = 91;
      ++*((_QWORD *)result + 4);
    }
    result = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v14 = (_DWORD *)*((_QWORD *)result + 4);
    if (*((_QWORD *)result + 3) - (_QWORD)v14 <= 6uLL)
    {
      v13 = " * ...]";
      return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v13);
    }
    *(_DWORD *)((char *)v14 + 3) = 1563307566;
    *v14 = 773859872;
    v15 = *((_QWORD *)result + 4) + 7;
  }
  *((_QWORD *)result + 4) = v15;
  return result;
}

void sub_22EF7FA90(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 48);
  if (a2)
  {
    sub_22F0D9044(a2, v3, 0, (__int128 *)(a1 + 8), 0, "\n", 1uLL, 0);
  }
  else
  {
    v4 = *(void **)(v3 + 32);
    if (*(_QWORD *)(v3 + 24) - (_QWORD)v4 > 0xCuLL)
    {
      qmemcpy(v4, "(no argument)", 13);
      *(_QWORD *)(v3 + 32) += 13;
    }
    else
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 48), "(no argument)");
    }
  }
}

void sub_22EF7FB10(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4, uint64_t a5, int a6)
{
  llvm::raw_ostream *v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  int v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  uint64_t v18;
  void *v19;
  llvm::raw_ostream *v20;
  const char *v21;
  llvm::raw_ostream *v22;
  uint64_t v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  llvm::raw_ostream *v28;
  _BYTE *v29;
  llvm::raw_ostream *v30;
  _BYTE *v31;
  uint64_t **v32;
  uint64_t v33;
  llvm::raw_ostream *v34;
  _BYTE *v35;
  llvm::raw_ostream *v36;
  _WORD *v37;
  llvm::raw_ostream *v38;
  _BYTE *v39;
  uint64_t v40;
  llvm::raw_ostream *v41;
  BOOL v42;
  void *v43;
  void *v44;
  void **v45;
  _BOOL4 v46;
  size_t v47;
  void *v48;
  size_t v49;
  size_t v50;
  const char *v51;
  llvm::raw_ostream *v52;
  _BYTE *v53;
  void *__dst[2];
  int64_t v55;
  uint64_t v56;
  void *__src;
  size_t __len[2];
  _WORD v59[20];
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v56 = a5;
  *(_BYTE *)(a1 + 56) = 1;
  if (!*(_BYTE *)(a1 + 26))
  {
LABEL_4:
    if (a4)
      goto LABEL_5;
LABEL_15:
    v18 = *(_QWORD *)(a1 + 48);
    if (a3)
    {
      sub_22F0D9044(a3, v18, 0, (__int128 *)(a1 + 8), 0, "\n", 1uLL, 0);
      goto LABEL_75;
    }
    v19 = *(void **)(v18 + 32);
    if (*(_QWORD *)(v18 + 24) - (_QWORD)v19 > 0xCuLL)
    {
      qmemcpy(v19, "(no argument)", 13);
      *(_QWORD *)(v18 + 32) += 13;
      goto LABEL_75;
    }
    v20 = *(llvm::raw_ostream **)(a1 + 48);
    v21 = "(no argument)";
LABEL_63:
    llvm::raw_ostream::write(v20, v21);
    goto LABEL_75;
  }
  v12 = *(llvm::raw_ostream **)(a1 + 48);
  v13 = (_BYTE *)*((_QWORD *)v12 + 4);
  if ((unint64_t)v13 < *((_QWORD *)v12 + 3))
  {
    *((_QWORD *)v12 + 4) = v13 + 1;
    *v13 = 127;
    goto LABEL_4;
  }
  llvm::raw_ostream::write(v12);
  if (!a4)
    goto LABEL_15;
LABEL_5:
  if (a3)
  {
    v14 = sub_22EFFEB40(a3);
    v15 = *v14;
    if (v15 != 117
      && v15 != 181
      && (v15 != 233 || (*(_DWORD *)v14 & 0x7C0000) != 0x1C0000 || **((unsigned __int8 **)v14 + 2) != 181))
    {
      sub_22F0D9044(a3, *(_QWORD *)(a1 + 48), 0, (__int128 *)(a1 + 8), 0, "\n", 1uLL, 0);
      *(_BYTE *)(a1 + 56) = 0;
      if (*(_BYTE *)(a1 + 26))
      {
        v16 = *(llvm::raw_ostream **)(a1 + 48);
        v17 = (_BYTE *)*((_QWORD *)v16 + 4);
        if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
        {
          llvm::raw_ostream::write(v16);
        }
        else
        {
          *((_QWORD *)v16 + 4) = v17 + 1;
          *v17 = 127;
        }
      }
      v22 = *(llvm::raw_ostream **)(a1 + 48);
      v23 = *((_QWORD *)v22 + 4);
      if ((unint64_t)(*((_QWORD *)v22 + 3) - v23) > 4)
      {
        *(_BYTE *)(v23 + 4) = 32;
        *(_DWORD *)v23 = 1634427168;
        *((_QWORD *)v22 + 4) += 5;
      }
      else
      {
        llvm::raw_ostream::write(v22, " aka ");
      }
      *(_BYTE *)(a1 + 56) = 1;
      if (*(_BYTE *)(a1 + 26))
      {
        v24 = *(llvm::raw_ostream **)(a1 + 48);
        v25 = (_BYTE *)*((_QWORD *)v24 + 4);
        if ((unint64_t)v25 >= *((_QWORD *)v24 + 3))
        {
          llvm::raw_ostream::write(v24);
          if (!a6)
            goto LABEL_47;
          goto LABEL_26;
        }
        *((_QWORD *)v24 + 4) = v25 + 1;
        *v25 = 127;
      }
    }
  }
  if (!a6)
    goto LABEL_47;
LABEL_26:
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a1 + 26))
  {
    v26 = *(llvm::raw_ostream **)(a1 + 48);
    v27 = (_BYTE *)*((_QWORD *)v26 + 4);
    if ((unint64_t)v27 >= *((_QWORD *)v26 + 3))
    {
      llvm::raw_ostream::write(v26);
    }
    else
    {
      *((_QWORD *)v26 + 4) = v27 + 1;
      *v27 = 127;
    }
  }
  v28 = *(llvm::raw_ostream **)(a1 + 48);
  v29 = (_BYTE *)*((_QWORD *)v28 + 4);
  if (*((_BYTE **)v28 + 3) == v29)
  {
    llvm::raw_ostream::write(v28, "(");
  }
  else
  {
    *v29 = 40;
    ++*((_QWORD *)v28 + 4);
  }
  *(_BYTE *)(a1 + 56) = 1;
  if (*(_BYTE *)(a1 + 26))
  {
    v30 = *(llvm::raw_ostream **)(a1 + 48);
    v31 = (_BYTE *)*((_QWORD *)v30 + 4);
    if ((unint64_t)v31 >= *((_QWORD *)v30 + 3))
    {
      llvm::raw_ostream::write(v30);
    }
    else
    {
      *((_QWORD *)v30 + 4) = v31 + 1;
      *v31 = 127;
    }
  }
  v32 = *(uint64_t ***)(a1 + 48);
  v33 = *(_QWORD *)a1 + 15104;
  v59[4] = 257;
  sub_22F119558(&v56, v32, v33, (const void ***)&__src, 0);
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a1 + 26))
  {
    v34 = *(llvm::raw_ostream **)(a1 + 48);
    v35 = (_BYTE *)*((_QWORD *)v34 + 4);
    if ((unint64_t)v35 >= *((_QWORD *)v34 + 3))
    {
      llvm::raw_ostream::write(v34);
    }
    else
    {
      *((_QWORD *)v34 + 4) = v35 + 1;
      *v35 = 127;
    }
  }
  v36 = *(llvm::raw_ostream **)(a1 + 48);
  v37 = (_WORD *)*((_QWORD *)v36 + 4);
  if (*((_QWORD *)v36 + 3) - (_QWORD)v37 > 1uLL)
  {
    *v37 = 8233;
    *((_QWORD *)v36 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v36, ") ");
  }
  *(_BYTE *)(a1 + 56) = 1;
  if (*(_BYTE *)(a1 + 26))
  {
    v38 = *(llvm::raw_ostream **)(a1 + 48);
    v39 = (_BYTE *)*((_QWORD *)v38 + 4);
    if ((unint64_t)v39 >= *((_QWORD *)v38 + 3))
    {
      llvm::raw_ostream::write(v38);
    }
    else
    {
      *((_QWORD *)v38 + 4) = v39 + 1;
      *v39 = 127;
    }
  }
LABEL_47:
  v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v41 = *(llvm::raw_ostream **)(a1 + 48);
  if (v40)
    v42 = (*(_DWORD *)(v40 + 16) & 0xFF800FF) == 87031819;
  else
    v42 = 0;
  if (v42)
  {
    v46 = sub_22E42E5EC(a2, 0);
    if (v46)
      v21 = "false";
    else
      v21 = "true";
    if (v46)
      v47 = 5;
    else
      v47 = 4;
    v48 = (void *)*((_QWORD *)v41 + 4);
    if (v47 <= *((_QWORD *)v41 + 3) - (_QWORD)v48)
    {
      memcpy(v48, v21, v47);
      *((_QWORD *)v41 + 4) += v47;
      goto LABEL_75;
    }
    v20 = v41;
    goto LABEL_63;
  }
  __src = v59;
  *(_OWORD *)__len = xmmword_22F455490;
  llvm::APInt::toString();
  v43 = (void *)__len[0];
  if (__len[0] >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v44 = __src;
  if (__len[0] >= 0x17)
  {
    v49 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len[0] | 7) != 0x17)
      v49 = __len[0] | 7;
    v50 = v49 + 1;
    v45 = (void **)operator new(v49 + 1);
    __dst[1] = v43;
    v55 = v50 | 0x8000000000000000;
    __dst[0] = v45;
  }
  else
  {
    HIBYTE(v55) = __len[0];
    v45 = __dst;
    if (!__len[0])
      goto LABEL_68;
  }
  memmove(v45, v44, (size_t)v43);
LABEL_68:
  *((_BYTE *)v43 + (_QWORD)v45) = 0;
  if (__src != v59)
    free(__src);
  if (v55 >= 0)
    v51 = (const char *)__dst;
  else
    v51 = (const char *)__dst[0];
  llvm::raw_ostream::write(v41, v51);
  if (SHIBYTE(v55) < 0)
    operator delete(__dst[0]);
LABEL_75:
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a1 + 26))
  {
    v52 = *(llvm::raw_ostream **)(a1 + 48);
    v53 = (_BYTE *)*((_QWORD *)v52 + 4);
    if ((unint64_t)v53 >= *((_QWORD *)v52 + 3))
    {
      llvm::raw_ostream::write(v52);
    }
    else
    {
      *((_QWORD *)v52 + 4) = v53 + 1;
      *v53 = 127;
    }
  }
}

llvm::raw_ostream *sub_22EF800D4(uint64_t a1, _DWORD *a2, int a3, _DWORD *a4, int a5)
{
  llvm::raw_ostream *v7;
  _BYTE *v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  llvm::raw_ostream *result;
  void *v12;
  const char *v13;
  llvm::raw_ostream *v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  _DWORD *v20;
  uint64_t v21;

  if (!a2)
  {
    if (a5)
    {
      if (a4 && *(unsigned __int8 *)a4 != 128)
      {
        sub_22F0D9044(a4, *(_QWORD *)(a1 + 48), 0, (__int128 *)(a1 + 8), 0, "\n", 1uLL, 0);
        if (*(_BYTE *)(a1 + 56))
        {
          *(_BYTE *)(a1 + 56) = 0;
          if (*(_BYTE *)(a1 + 26))
          {
            v9 = *(llvm::raw_ostream **)(a1 + 48);
            v10 = (_BYTE *)*((_QWORD *)v9 + 4);
            if ((unint64_t)v10 >= *((_QWORD *)v9 + 3))
            {
              llvm::raw_ostream::write(v9);
            }
            else
            {
              *((_QWORD *)v9 + 4) = v10 + 1;
              *v10 = 127;
            }
          }
          v16 = *(llvm::raw_ostream **)(a1 + 48);
          v17 = *((_QWORD *)v16 + 4);
          if ((unint64_t)(*((_QWORD *)v16 + 3) - v17) > 4)
          {
            *(_BYTE *)(v17 + 4) = 32;
            *(_DWORD *)v17 = 1634427168;
            *((_QWORD *)v16 + 4) += 5;
          }
          else
          {
            llvm::raw_ostream::write(v16, " aka ");
          }
          *(_BYTE *)(a1 + 56) = 1;
          if (*(_BYTE *)(a1 + 26))
          {
            v18 = *(llvm::raw_ostream **)(a1 + 48);
            v19 = (_BYTE *)*((_QWORD *)v18 + 4);
            if ((unint64_t)v19 >= *((_QWORD *)v18 + 3))
            {
              llvm::raw_ostream::write(v18);
            }
            else
            {
              *((_QWORD *)v18 + 4) = v19 + 1;
              *v19 = 127;
            }
          }
        }
        else
        {
          v14 = *(llvm::raw_ostream **)(a1 + 48);
          v15 = *((_QWORD *)v14 + 4);
          if ((unint64_t)(*((_QWORD *)v14 + 3) - v15) > 4)
          {
            *(_BYTE *)(v15 + 4) = 32;
            *(_DWORD *)v15 = 1634427168;
            *((_QWORD *)v14 + 4) += 5;
          }
          else
          {
            llvm::raw_ostream::write(v14, " aka ");
          }
        }
      }
      result = *(llvm::raw_ostream **)(a1 + 48);
      v20 = (_DWORD *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v20 <= 6uLL)
      {
        v13 = "nullptr";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v13);
      }
      *(_DWORD *)((char *)v20 + 3) = 1920233580;
      *v20 = 1819047278;
      v21 = *((_QWORD *)result + 4) + 7;
    }
    else
    {
      result = *(llvm::raw_ostream **)(a1 + 48);
      v12 = (void *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v12 <= 0xCuLL)
      {
        v13 = "(no argument)";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v13);
      }
      qmemcpy(v12, "(no argument)", 13);
      v21 = *((_QWORD *)result + 4) + 13;
    }
    *((_QWORD *)result + 4) = v21;
    return result;
  }
  if (a3)
  {
    v7 = *(llvm::raw_ostream **)(a1 + 48);
    v8 = (_BYTE *)*((_QWORD *)v7 + 4);
    if (*((_BYTE **)v7 + 3) == v8)
    {
      llvm::raw_ostream::write(v7, "&");
    }
    else
    {
      *v8 = 38;
      ++*((_QWORD *)v7 + 4);
    }
    return (llvm::raw_ostream *)(*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 88))(a2, *(_QWORD *)(a1 + 48));
  }
  if ((a2[7] & 0x7F) != 0x48)
    return (llvm::raw_ostream *)(*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 88))(a2, *(_QWORD *)(a1 + 48));
  return (llvm::raw_ostream *)sub_22F3B9EC8((unint64_t)a2, *(llvm::raw_ostream **)(a1 + 48), a1 + 8);
}

void sub_22EF80364(uint64_t a1, uint64_t a2, int a3)
{
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  uint64_t v9;

  v9 = a2;
  if ((a2 & 0xCFFFFFFFFLL) != 0)
  {
    *(_BYTE *)(a1 + 56) = 1;
    if (*(_BYTE *)(a1 + 26))
    {
      v5 = *(llvm::raw_ostream **)(a1 + 48);
      v6 = (_BYTE *)*((_QWORD *)v5 + 4);
      if ((unint64_t)v6 >= *((_QWORD *)v5 + 3))
      {
        llvm::raw_ostream::write(v5);
      }
      else
      {
        *((_QWORD *)v5 + 4) = v6 + 1;
        *v6 = 127;
      }
    }
    sub_22F1186E0(&v9, *(llvm::raw_ostream **)(a1 + 48), (_QWORD *)(a1 + 8), a3);
    *(_BYTE *)(a1 + 56) = 0;
    if (*(_BYTE *)(a1 + 26))
    {
      v7 = *(llvm::raw_ostream **)(a1 + 48);
      v8 = (_BYTE *)*((_QWORD *)v7 + 4);
      if ((unint64_t)v8 >= *((_QWORD *)v7 + 3))
      {
        llvm::raw_ostream::write(v7);
      }
      else
      {
        *((_QWORD *)v7 + 4) = v8 + 1;
        *v8 = 127;
      }
    }
  }
}

char **sub_22EF80428(llvm *a1)
{
  uint64_t v2;
  _BYTE v4[4];
  int v5;
  uint64_t v6;
  char *v7[133];
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = llvm::errs(a1);
  v4[0] = 0;
  v5 = 0;
  sub_22F0F0CE8((uint64_t)&v6, v2, 0);
  v9 = v2;
  v10 = 0;
  sub_22F372F24((uint64_t)v4, *(_QWORD *)a1);
  if (v8 < 0)
    operator delete(v7[131]);
  return sub_22F271CAC(v7);
}

char **sub_22EF804D0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  _BYTE v6[4];
  int v7;
  uint64_t v8;
  char v9;
  char *v10[2];
  _WORD v11[516];
  void *__p;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a3 + 1992);
  v4 = *(_BYTE *)(*(_QWORD *)(v3 + 8) + 9);
  v6[0] = 0;
  v7 = 0;
  v8 = a2;
  v9 = v4;
  v10[0] = (char *)v11;
  v10[1] = (char *)0x2000000000;
  v11[512] = 257;
  __p = 0;
  v14 = 0;
  v13 = 0;
  v15 = a2;
  v16 = v4;
  v17 = &unk_22F5CABC9;
  v18 = -1;
  v19 = a3;
  v20 = v3;
  v21 = *(_OWORD *)(a3 + 15104);
  v22 = a3 + 16328;
  v23 = a2;
  v24 = v4;
  sub_22F372F24((uint64_t)v6, *a1);
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
  return sub_22F271CAC(v10);
}

char **sub_22EF805D0(uint64_t a1, uint64_t a2, char a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int i;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  _BYTE v23[4];
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[128];
  uint64_t v30;
  void *__p[2];
  uint64_t v32;
  uint64_t v33;
  char v34;
  void *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  if (!a1 || (v9 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = v10 & 0xFFFFFFFFFFFFFFF8;
    if ((v10 & 4) != 0)
      v11 = *(_QWORD *)v11;
    for (i = *(_WORD *)(v11 + 8) & 0x7F; i != 83; i = *(_WORD *)(v11 + 8) & 0x7F)
    {
      v13 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v13 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_16;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_15;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_22;
        if (i == 24)
        {
LABEL_9:
          v13 = -48;
        }
        else
        {
LABEL_15:
          if (i != 70)
          {
LABEL_16:
            v14 = i - 52;
            if ((i - 33) >= 5)
              v15 = -48;
            else
              v15 = -64;
            if (v14 >= 6)
              v13 = v15;
            else
              v13 = -72;
            goto LABEL_22;
          }
          v13 = -64;
        }
      }
LABEL_22:
      v16 = *(_QWORD *)(v11 + v13 + 16);
      v11 = v16 & 0xFFFFFFFFFFFFFFF8;
      if ((v16 & 4) != 0)
        v11 = *(_QWORD *)v11;
    }
    v9 = v11 - 40;
  }
  v17 = *(_QWORD *)(v9 + 88);
  if (a4 == 1)
  {
    v18 = *(_QWORD *)(v17 + 1992);
    v23[0] = 0;
    v24 = 0;
    LOWORD(v25) = 257;
    v26 = &v28;
    v27 = 0x2000000000;
    v29[127] = __p;
    v44 = 0;
    v43 = 0;
    v45 = a2;
    v46 = 2;
    v47 = 0;
    __p[0] = 0;
    v30 = 0x1000000001;
    v48 = v18;
    v49 = v17;
    v19 = operator new();
    v50 = sub_22F097B80(v19, v17);
    v51 = *(_OWORD *)(v17 + 15104);
    v52 = v17 + 16328;
    v53 = 0u;
    v54 = 0u;
    v55 = 0;
    sub_22EF8622C((char *)&v25, (uint64_t)v23, a1);
    return (char **)sub_22F3730AC((uint64_t)&v25);
  }
  else
  {
    v21 = *(_QWORD *)(v17 + 1992);
    v22 = *(_BYTE *)(*(_QWORD *)(v21 + 8) + 9);
    v24 = 0;
    v25 = a2;
    LOBYTE(v26) = v22;
    v27 = (uint64_t)v29;
    v28 = 0x2000000000;
    LOWORD(v30) = 257;
    __p[0] = 0;
    v32 = 0;
    __p[1] = 0;
    v33 = a2;
    v34 = v22;
    v35 = &unk_22F5CABC9;
    v36 = -1;
    v37 = v17;
    v38 = v21;
    v39 = *(_OWORD *)(v17 + 15104);
    v40 = v17 + 16328;
    v41 = a2;
    v42 = v22;
    v23[0] = a3;
    sub_22EF814B0(&v25, (uint64_t)v23, a1, a4, a5, a6, a7, a8);
    if (SHIBYTE(v32) < 0)
      operator delete(__p[0]);
    return sub_22F271CAC((char **)&v27);
  }
}

char **sub_22EF808DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int i;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  _BYTE v17[4];
  int v18;
  uint64_t v19;
  char v20;
  char *v21[2];
  _WORD v22[516];
  void *__p;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (!a1 || (v2 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 4) != 0)
      v4 = *(_QWORD *)v4;
    for (i = *(_WORD *)(v4 + 8) & 0x7F; i != 83; i = *(_WORD *)(v4 + 8) & 0x7F)
    {
      v6 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v6 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_16;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_15;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_22;
        if (i == 24)
        {
LABEL_9:
          v6 = -48;
        }
        else
        {
LABEL_15:
          if (i != 70)
          {
LABEL_16:
            v7 = i - 52;
            if ((i - 33) >= 5)
              v8 = -48;
            else
              v8 = -64;
            if (v7 >= 6)
              v6 = v8;
            else
              v6 = -72;
            goto LABEL_22;
          }
          v6 = -64;
        }
      }
LABEL_22:
      v9 = *(_QWORD *)(v4 + v6 + 16);
      v4 = v9 & 0xFFFFFFFFFFFFFFF8;
      if ((v9 & 4) != 0)
        v4 = *(_QWORD *)v4;
    }
    v2 = v4 - 40;
  }
  v10 = *(_QWORD *)(v2 + 88);
  v17[0] = 0;
  v18 = 0;
  v19 = llvm::errs((llvm *)a1);
  v20 = 1;
  v21[0] = (char *)v22;
  v21[1] = (char *)0x2000000000;
  v22[512] = 257;
  __p = 0;
  v25 = 0;
  v24 = 0;
  v26 = v19;
  v27 = 1;
  v28 = &unk_22F5CABC9;
  v29 = -1;
  v30 = v10;
  v31 = *(_QWORD *)(v10 + 1992);
  v32 = *(_OWORD *)(v10 + 15104);
  v33 = v10 + 16328;
  v34 = v19;
  v35 = 1;
  sub_22EF814B0(&v19, (uint64_t)v17, a1, v11, v12, v13, v14, v15);
  if (SHIBYTE(v25) < 0)
    operator delete(__p);
  return sub_22F271CAC(v21);
}

char **sub_22EF80AF4(uint64_t a1, llvm::raw_ostream *a2, char a3, char a4)
{
  __int16 v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  uint64_t v22[2];
  char v23;
  char v24;
  char v25;
  int v26;
  llvm::raw_ostream *v27;
  char v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  void *__p;
  uint64_t v35;
  uint64_t v36;
  llvm::raw_ostream *v37;
  char v38;
  void *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  llvm::raw_ostream *v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v4 = *(_WORD *)(a1 + 8);
  v5 = a1;
  if ((v4 & 0x7F) != 0x53)
  {
    v5 = a1;
    do
    {
      v14 = v4 & 0x7F;
      v15 = -40;
      if (v14 > 70)
      {
        if (v14 != 83)
        {
          if (v14 == 71)
          {
            v15 = -56;
          }
          else if (v14 != 81)
          {
            goto LABEL_24;
          }
        }
      }
      else
      {
        if (v14 > 0x18)
          goto LABEL_23;
        if (v14 == 16)
          goto LABEL_16;
        if (((1 << v14) & 0x1066) != 0)
          goto LABEL_30;
        if (v14 == 24)
        {
LABEL_16:
          v15 = -48;
        }
        else
        {
LABEL_23:
          if (v14 != 70)
          {
LABEL_24:
            v16 = v14 - 52;
            if ((v14 - 33) >= 5)
              v17 = -48;
            else
              v17 = -64;
            if (v16 >= 6)
              v15 = v17;
            else
              v15 = -72;
            goto LABEL_30;
          }
          v15 = -64;
        }
      }
LABEL_30:
      v18 = *(_QWORD *)(v5 + v15 + 16);
      v5 = v18 & 0xFFFFFFFFFFFFFFF8;
      if ((v18 & 4) != 0)
        v5 = *(_QWORD *)v5;
      v4 = *(_WORD *)(v5 + 8);
    }
    while ((v4 & 0x7F) != 0x53);
  }
  v6 = *(_QWORD *)(v5 + 48);
  v7 = *(_QWORD *)(v6 + 1992);
  v8 = *(_BYTE *)(*(_QWORD *)(v7 + 8) + 9);
  v26 = 0;
  v27 = a2;
  v28 = v8;
  v29 = (char *)&v31;
  v30 = 0x2000000000;
  v33 = 1;
  __p = 0;
  v36 = 0;
  v35 = 0;
  v37 = a2;
  v38 = v8;
  v39 = &unk_22F5CABC9;
  v40 = -1;
  v41 = v6;
  v42 = v7;
  v43 = *(_OWORD *)(v6 + 15104);
  v44 = v6 + 16328;
  v45 = a2;
  v46 = v8;
  v25 = a4;
  v22[0] = (uint64_t)&v25;
  v22[1] = a1;
  v23 = a3;
  v32 = 0;
  sub_22EF8429C(v22);
  v9 = v30;
  if ((_DWORD)v30)
  {
    while (1)
    {
      v24 = 1;
      v10 = *(_QWORD *)&v29[32 * v9 - 8];
      if (!v10)
        sub_22E4A06C4();
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v10 + 48))(v10, &v24);
      LODWORD(v30) = v30 - 1;
      v9 = v30;
      v11 = &v29[32 * v30];
      v12 = (char *)*((_QWORD *)v11 + 3);
      if (v12 == v11)
        break;
      if (v12)
      {
        v13 = 5;
LABEL_8:
        (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
        v9 = v30;
      }
      if (!v9)
        goto LABEL_10;
    }
    v12 = &v29[32 * v30];
    v13 = 4;
    goto LABEL_8;
  }
LABEL_10:
  if (SHIBYTE(v36) < 0)
  {
    *(_BYTE *)__p = 0;
    v35 = 0;
  }
  else
  {
    LOBYTE(__p) = 0;
    HIBYTE(v36) = 0;
  }
  v19 = v27;
  v20 = (_BYTE *)*((_QWORD *)v27 + 4);
  if (*((_BYTE **)v27 + 3) == v20)
  {
    llvm::raw_ostream::write(v27, "\n");
  }
  else
  {
    *v20 = 10;
    ++*((_QWORD *)v19 + 4);
  }
  v32 = 1;
  if (SHIBYTE(v36) < 0)
    operator delete(__p);
  return sub_22F271CAC(&v29);
}

char **sub_22EF80DC0(llvm *a1)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE v5[4];
  int v6;
  uint64_t v7;
  char *v8[133];
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = llvm::errs(a1);
  v5[0] = 0;
  v6 = 0;
  v3 = (_BYTE *)sub_22F0F0CE8((uint64_t)&v7, v2, 0);
  v10 = v2;
  v11 = 0;
  sub_22EF8CE48(v3, 0, 0, (uint64_t)a1, (uint64_t)v5);
  if (v9 < 0)
    operator delete(v8[131]);
  return sub_22F271CAC(v8);
}

char **sub_22EF80E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  _BYTE v6[4];
  int v7;
  uint64_t v8;
  char v9;
  char *v10[2];
  _WORD v11[516];
  void *__p;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a3 + 1992);
  v4 = *(_BYTE *)(*(_QWORD *)(v3 + 8) + 9);
  v6[0] = 0;
  v7 = 0;
  v8 = a2;
  v9 = v4;
  v10[0] = (char *)v11;
  v10[1] = (char *)0x2000000000;
  v11[512] = 257;
  __p = 0;
  v14 = 0;
  v13 = 0;
  v15 = a2;
  v16 = v4;
  v17 = &unk_22F5CABC9;
  v18 = -1;
  v19 = a3;
  v20 = v3;
  v21 = *(_OWORD *)(a3 + 15104);
  v22 = a3 + 16328;
  v23 = a2;
  v24 = v4;
  sub_22EF8CE48(&v8, 0, 0, a1, (uint64_t)v6);
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
  return sub_22F271CAC(v10);
}

char **sub_22EF80F78(llvm *a1)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE v5[4];
  int v6;
  uint64_t v7;
  char *v8[133];
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = llvm::errs(a1);
  v5[0] = 0;
  v6 = 0;
  v3 = (_BYTE *)sub_22F0F0CE8((uint64_t)&v7, v2, 1);
  v10 = v2;
  v11 = 1;
  sub_22EF8CE48(v3, 0, 0, (uint64_t)a1, (uint64_t)v5);
  if (v9 < 0)
    operator delete(v8[131]);
  return sub_22F271CAC(v8);
}

char **sub_22EF81034(char **result)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4[3];
  char v5;
  int v6;
  uint64_t v7;
  char *v8[133];
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v1 = (uint64_t)result;
    if (*((_BYTE *)result + 12) == 7)
    {
      v2 = llvm::errs((llvm *)result);
      v5 = 0;
      v6 = 0;
      v3 = (_BYTE *)sub_22F0F0CE8((uint64_t)&v7, v2, 0);
      v10 = v2;
      v11 = 0;
      v4[0] = (uint64_t)&v5;
      v4[1] = v1;
      v4[2] = v1;
      sub_22EF8EE14(v3, v4);
      if (v9 < 0)
        operator delete(v8[131]);
      return sub_22F271CAC(v8);
    }
  }
  return result;
}

char **sub_22EF810F4(char **result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  uint64_t v5[3];
  char v6;
  int v7;
  uint64_t v8;
  char v9;
  char *v10[2];
  _WORD v11[516];
  void *__p;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (result && *((_BYTE *)result + 12) == 7)
  {
    v3 = *(_QWORD *)(a3 + 1992);
    v4 = *(_BYTE *)(*(_QWORD *)(v3 + 8) + 9);
    v6 = 0;
    v7 = 0;
    v8 = a2;
    v9 = v4;
    v10[0] = (char *)v11;
    v10[1] = (char *)0x2000000000;
    v11[512] = 257;
    __p = 0;
    v14 = 0;
    v13 = 0;
    v15 = a2;
    v16 = v4;
    v17 = &unk_22F5CABC9;
    v18 = -1;
    v19 = a3;
    v20 = v3;
    v21 = *(_OWORD *)(a3 + 15104);
    v22 = a3 + 16328;
    v23 = a2;
    v24 = v4;
    v5[0] = (uint64_t)&v6;
    v5[1] = (uint64_t)result;
    v5[2] = (uint64_t)result;
    sub_22EF8EE14(&v8, v5);
    if (SHIBYTE(v14) < 0)
      operator delete(__p);
    return sub_22F271CAC(v10);
  }
  return result;
}

char **sub_22EF81210(char **result)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4[3];
  char v5;
  int v6;
  uint64_t v7;
  char *v8[133];
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v1 = (uint64_t)result;
    if (*((_BYTE *)result + 12) == 7)
    {
      v2 = llvm::errs((llvm *)result);
      v5 = 0;
      v6 = 0;
      v3 = (_BYTE *)sub_22F0F0CE8((uint64_t)&v7, v2, 1);
      v10 = v2;
      v11 = 1;
      v4[0] = (uint64_t)&v5;
      v4[1] = v1;
      v4[2] = v1;
      sub_22EF8EE14(v3, v4);
      if (v9 < 0)
        operator delete(v8[131]);
      return sub_22F271CAC(v8);
    }
  }
  return result;
}

char **sub_22EF812DC(llvm *a1)
{
  uint64_t v2;
  _BYTE v4[4];
  int v5;
  uint64_t v6;
  char *v7[133];
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = llvm::errs(a1);
  v4[0] = 0;
  v5 = 0;
  sub_22F0F0CE8((uint64_t)&v6, v2, 0);
  v9 = v2;
  v10 = 0;
  sub_22F373018((uint64_t)v4, (uint64_t)a1, 0);
  if (v8 < 0)
    operator delete(v7[131]);
  return sub_22F271CAC(v7);
}

char **sub_22EF81388(llvm *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  _BYTE v10[4];
  int v11;
  uint64_t v12;
  char v13;
  char *v14[2];
  _WORD v15[516];
  void *__p;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v5 = llvm::errs(a1);
  v6 = *(_QWORD *)(a3 + 1992);
  v7 = *(_BYTE *)(*(_QWORD *)(v6 + 8) + 9);
  v10[0] = 0;
  v11 = 0;
  v12 = v5;
  v13 = v7;
  v14[0] = (char *)v15;
  v14[1] = (char *)0x2000000000;
  v15[512] = 257;
  __p = 0;
  v18 = 0;
  v17 = 0;
  v19 = v5;
  v20 = v7;
  v21 = &unk_22F5CABC9;
  v22 = -1;
  v23 = a3;
  v24 = v6;
  v25 = *(_OWORD *)(a3 + 15104);
  v26 = a3 + 16328;
  v27 = v5;
  v28 = v7;
  v8 = sub_22EF5B848(a3, *(_QWORD *)(a3 + 16408), 0);
  sub_22F373018((uint64_t)v10, (uint64_t)a1, v8);
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  return sub_22F271CAC(v14);
}

llvm::raw_ostream *sub_22EF814B0(_BYTE *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  llvm::raw_ostream *result;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t (**v22)(void);
  __int128 v23;
  _QWORD v24[3];
  llvm::raw_ostream *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v23 = a2;
  *((_QWORD *)&v23 + 1) = a3;
  if (!a1[1056])
  {
    if (a1[1057])
    {
      v15 = operator new(0x38uLL);
      *v15 = off_24FABAA88;
      v15[1] = a1;
      *((_OWORD *)v15 + 1) = v23;
      v15[4] = 0;
      *((_BYTE *)v15 + 55) = 0;
      v25 = (llvm::raw_ostream *)v15;
      sub_22E536AAC((uint64_t)(a1 + 16), (unint64_t)v24);
    }
    else
    {
      v18 = *((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6);
      LOBYTE(v24[0]) = 0;
      v19 = *(_QWORD *)(v18 - 8);
      if (!v19)
LABEL_28:
        sub_22E4A06C4();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v19 + 48))(v19, v24);
      v20 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6) - 32);
      v21 = operator new(0x38uLL);
      *v21 = off_24FABAA88;
      v21[1] = a1;
      *((_OWORD *)v21 + 1) = v23;
      v21[4] = 0;
      *((_BYTE *)v21 + 55) = 0;
      v25 = (llvm::raw_ostream *)v21;
      sub_22E63BEA4(v24, v20);
    }
    result = v25;
    if (v25 == (llvm::raw_ostream *)v24)
    {
      v22 = (uint64_t (**)(void))(v24[0] + 32);
    }
    else
    {
      if (!v25)
      {
LABEL_25:
        a1[1057] = 0;
        return result;
      }
      v22 = (uint64_t (**)(void))(*(_QWORD *)v25 + 40);
    }
    result = (llvm::raw_ostream *)(*v22)();
    goto LABEL_25;
  }
  a1[1056] = 0;
  sub_22EF816F0(&v23, a2, a3, a4, a5, a6, a7, a8);
  LODWORD(v9) = *((_DWORD *)a1 + 6);
  if ((_DWORD)v9)
  {
    while (1)
    {
      v10 = *((_QWORD *)a1 + 2) + 32 * v9;
      LOBYTE(v24[0]) = 1;
      v11 = *(_QWORD *)(v10 - 8);
      if (!v11)
        goto LABEL_28;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 48))(v11, v24);
      v9 = (*((_DWORD *)a1 + 6) - 1);
      *((_DWORD *)a1 + 6) = v9;
      v12 = *((_QWORD *)a1 + 2) + 32 * v9;
      v13 = *(_QWORD **)(v12 + 24);
      if (v13 == (_QWORD *)v12)
        break;
      if (v13)
      {
        v14 = 5;
LABEL_8:
        (*(void (**)(void))(*v13 + 8 * v14))();
        LODWORD(v9) = *((_DWORD *)a1 + 6);
      }
      if (!(_DWORD)v9)
        goto LABEL_10;
    }
    v13 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * v9);
    v14 = 4;
    goto LABEL_8;
  }
LABEL_10:
  if ((char)a1[1087] < 0)
  {
    **((_BYTE **)a1 + 133) = 0;
    *((_QWORD *)a1 + 134) = 0;
  }
  else
  {
    a1[1064] = 0;
    a1[1087] = 0;
  }
  result = *(llvm::raw_ostream **)a1;
  v17 = *(_BYTE **)(*(_QWORD *)a1 + 32);
  if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v17)
  {
    result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, "\n");
  }
  else
  {
    *v17 = 10;
    ++*((_QWORD *)result + 4);
  }
  a1[1056] = 1;
  return result;
}

llvm::raw_ostream *sub_22EF816F0(_QWORD *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  llvm::raw_ostream *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = sub_22F0FB680(*a1 + 8, a1[1], a3, a4, a5, a6, a7, a8, v11, v12, v13, v14, v15, v16, SWORD2(v16), SBYTE6(v16), SHIBYTE(v16), v17);
  if (a1[1])
    __asm { BR              X10 }
  return result;
}

_BYTE *sub_22EF8176C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int i;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  BOOL v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[15];

  v3 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v3 + 29) & 1) != 0)
  {
    sub_22EFC8E88(*(_QWORD *)(v1 + 8));
    v23 = *v22;
    if ((*(_BYTE *)(v3 + 29) & 1) != 0)
    {
      sub_22EFC8E88(v3);
      v25 = *(_QWORD *)v24 + 8 * *(unsigned int *)(v24 + 8);
    }
    else
    {
      v25 = 0;
    }
    while (v23 != (uint64_t *)v25)
    {
      v26 = *v23++;
      sub_22EF83998(v2, v0, v26);
    }
  }
  v4 = *(_QWORD *)(v1 + 8);
  if (!v4 || (v5 = *(_QWORD *)(v1 + 8), (*(_DWORD *)(v4 + 28) & 0x7F) != 0x53))
  {
    v6 = *(_QWORD *)(v4 + 16);
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    if ((v6 & 4) != 0)
      v7 = *(_QWORD *)v7;
    for (i = *(_WORD *)(v7 + 8) & 0x7F; i != 83; i = *(_WORD *)(v7 + 8) & 0x7F)
    {
      v9 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v9 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_17;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_16;
        if (i == 16)
          goto LABEL_10;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_23;
        if (i == 24)
        {
LABEL_10:
          v9 = -48;
        }
        else
        {
LABEL_16:
          if (i != 70)
          {
LABEL_17:
            v10 = i - 52;
            if ((i - 33) >= 5)
              v11 = -48;
            else
              v11 = -64;
            if (v10 >= 6)
              v9 = v11;
            else
              v9 = -72;
            goto LABEL_23;
          }
          v9 = -64;
        }
      }
LABEL_23:
      v12 = *(_QWORD *)(v7 + v9 + 16);
      v7 = v12 & 0xFFFFFFFFFFFFFFF8;
      if ((v12 & 4) != 0)
        v7 = *(_QWORD *)v7;
    }
    v5 = v7 - 40;
  }
  v13 = sub_22F365440(*(_QWORD *)(v5 + 88), v4);
  if (v13)
  {
    v27[0] = v0;
    v27[1] = (uint64_t)v13;
    v27[2] = (uint64_t)v13;
    sub_22EF8EE14(v2, v27);
  }
  v14 = *(_QWORD *)(v1 + 8);
  v15 = *(_DWORD *)(v14 + 28) & 0x7F;
  v16 = v15 != 24 && (*(_DWORD *)(v14 + 28) & 0x7Eu) - 52 >= 6;
  if (!v16
    || ((*(_DWORD *)(v14 + 28) & 0x7E) == 0x24 ? (v17 = *(_DWORD *)(v0 + 4) == 0) : (v17 = 1),
        !v17 && (*(_BYTE *)(v14 + 180) & 7u) - 5 > 0xFFFFFFFD
     || (v15 <= 0x39 ? (v18 = ((1 << v15) & 0x3F0003E01011066) == 0) : (v18 = 1),
         v18 && (v15 - 70 <= 0xD ? (v21 = ((1 << (v15 - 70)) & 0x2803) == 0) : (v21 = 1), v21 && v15 - 19 > 4))))
  {
    JUMPOUT(0x22EF8172CLL);
  }
  v19 = sub_22EFCAE04(v14);
  return sub_22F3730F0((_BYTE *)v0, v19);
}

llvm::raw_ostream *sub_22EF81F34(llvm::raw_ostream *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;

  v2 = (uint64_t)result;
  v3 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (v3 <= 0x2F && ((1 << v3) & 0xC00000060000) != 0)
  {
    result = (llvm::raw_ostream *)sub_22EFBAEA4(a2);
    a2 = (uint64_t)result;
    v3 = *((_DWORD *)result + 7) & 0x7F;
  }
  if (v3 - 43 >= 0xFFFFFFF6)
    return sub_22EF83028((_BYTE *)(v2 + 8), v2, *(_QWORD *)(a2 + 48));
  return result;
}

llvm::raw_ostream *sub_22EF81FAC(llvm::raw_ostream *result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;

  v3 = (uint64_t)result;
  if ((*(_BYTE *)(a2 + 68) & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
    v5 = *(_QWORD *)(a2 + 72) & 3;
    if ((_DWORD)v5)
      v6 = (_DWORD)v5 == 3;
    else
      v6 = 1;
    if (!v6)
      v4 = *(_QWORD *)(v4 + 8);
    result = sub_22EF8CE48((_BYTE *)result + 8, 0, 0, v4, (uint64_t)result);
  }
  v7 = *(_QWORD *)(a2 + 72) & 3;
  if ((_DWORD)v7)
    v8 = (_DWORD)v7 == 3;
  else
    v8 = 1;
  if (!v8)
  {
    v9 = (_QWORD *)(*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL);
    if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      v9 = (_QWORD *)*v9;
    if (v9)
      return sub_22EF8CE48((_BYTE *)(v3 + 8), 0, 0, (uint64_t)v9, v3);
  }
  return result;
}

llvm::raw_ostream *sub_22EF82048(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v6;
  llvm::raw_ostream *result;
  BOOL v8;
  uint64_t *v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(a2 + 144) & 6) == 4 && v4 != 0)
    sub_22F374094((llvm::raw_ostream *)a1, *(_QWORD *)(v4 + 24));
  v6 = *(_QWORD *)(a2 + 120);
  result = *(llvm::raw_ostream **)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (result)
    v8 = *((_BYTE *)result + 16) == 26;
  else
    v8 = 0;
  if (!v8 && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)result + 1) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
    result = (llvm::raw_ostream *)sub_22F10CF48((uint64_t)result);
  if (v6)
  {
    v9 = *(uint64_t **)(a2 + 120);
    result = *(llvm::raw_ostream **)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
    v10 = result && *((_BYTE *)result + 16) == 26;
    if (v10
      || *(_BYTE *)(*(_QWORD *)(*((_QWORD *)result + 1) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
      && (result = (llvm::raw_ostream *)sub_22F10CF48((uint64_t)result)) != 0)
    {
      v11 = *((_QWORD *)result + 2);
      if ((v11 & 0x3FFFC000000000) != 0)
      {
        v12 = 8 * (unsigned __int16)(v11 >> 38);
        do
        {
          v13 = *v9;
          if (*(_DWORD *)(a1 + 4) != 1 || (*(_BYTE *)(v13 + 29) & 2) == 0)
            result = (llvm::raw_ostream *)sub_22EF814B0(a1 + 8, a1, v13);
          ++v9;
          v12 -= 8;
        }
        while (v12);
      }
    }
  }
  v14 = *(_QWORD *)(a2 + 56);
  if ((v14 & 4) != 0)
  {
    v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 40);
    if (v15)
      result = sub_22EF8CE48((_BYTE *)(a1 + 8), 0, 0, v15, a1);
  }
  if (*(_DWORD *)(a1 + 4) != 1 || (*(_BYTE *)(a2 + 83) & 2) == 0)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x37)
    {
      v16 = (uint64_t *)sub_22EFD7ED0(a2);
      result = (llvm::raw_ostream *)sub_22EFD7ED0(a2);
      for (i = (uint64_t *)((char *)result + 8 * ((*(_QWORD *)(a2 + 80) >> 40) & 0x1FFFFFLL)); v16 != i; ++v16)
      {
        v18 = *v16;
        if (*(_DWORD *)(a1 + 4) != 1 || (*(_WORD *)(v18 + 28) & 4) != 0)
          result = sub_22EF82B78((_BYTE *)(a1 + 8), a1, (uint64_t *)v18);
      }
    }
    v19 = *(_QWORD *)(a2 + 80);
    if ((v19 & 0x8000000) != 0)
    {
      if ((v19 & 0x20000000) != 0)
        goto LABEL_36;
    }
    else if (*(_QWORD *)(a2 + 128) | *(_QWORD *)(a2 + 80) & 0x20000000)
    {
LABEL_36:
      v20 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
      return sub_22EF8CE48((_BYTE *)(a1 + 8), 0, 0, v20, a1);
    }
  }
  return result;
}

llvm::raw_ostream *sub_22EF8226C(_BYTE *a1, _QWORD *a2)
{
  _QWORD *v4;
  llvm::raw_ostream *result;
  uint64_t (**v6)(llvm::raw_ostream *);
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _BYTE *v17;
  __int128 v18;
  uint64_t v19;
  _QWORD v20[3];
  llvm::raw_ostream *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (!a1[1056])
  {
    v18 = *(_OWORD *)a2;
    v19 = a2[2];
    if (a1[1057])
    {
      v4 = operator new(0x40uLL);
      *v4 = off_24FABA8D8;
      v4[1] = a1;
      *((_OWORD *)v4 + 1) = *(_OWORD *)a2;
      v4[4] = a2[2];
      v4[5] = 0;
      *((_BYTE *)v4 + 63) = 0;
      v21 = (llvm::raw_ostream *)v4;
      sub_22E536AAC((uint64_t)(a1 + 16), (unint64_t)v20);
      result = v21;
      if (v21 != (llvm::raw_ostream *)v20)
      {
LABEL_4:
        if (!result)
        {
LABEL_10:
          a1[1057] = 0;
          return result;
        }
        v6 = (uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)result + 40);
LABEL_9:
        result = (llvm::raw_ostream *)(*v6)(result);
        goto LABEL_10;
      }
    }
    else
    {
      v7 = *((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6);
      LOBYTE(v20[0]) = 0;
      v8 = *(_QWORD *)(v7 - 8);
      if (!v8)
LABEL_27:
        sub_22E4A06C4();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 48))(v8, v20);
      v9 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6) - 32);
      v10 = operator new(0x40uLL);
      *v10 = off_24FABA8D8;
      v10[1] = a1;
      *((_OWORD *)v10 + 1) = v18;
      v10[4] = v19;
      v10[5] = 0;
      *((_BYTE *)v10 + 63) = 0;
      v21 = (llvm::raw_ostream *)v10;
      sub_22E63BEA4(v20, v9);
      result = v21;
      if (v21 != (llvm::raw_ostream *)v20)
        goto LABEL_4;
    }
    v6 = (uint64_t (**)(llvm::raw_ostream *))(v20[0] + 32);
    result = (llvm::raw_ostream *)v20;
    goto LABEL_9;
  }
  a1[1056] = 0;
  sub_22F3737F8(a2);
  LODWORD(v11) = *((_DWORD *)a1 + 6);
  if ((_DWORD)v11)
  {
    while (1)
    {
      v12 = *((_QWORD *)a1 + 2) + 32 * v11;
      LOBYTE(v20[0]) = 1;
      v13 = *(_QWORD *)(v12 - 8);
      if (!v13)
        goto LABEL_27;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 48))(v13, v20);
      v11 = (*((_DWORD *)a1 + 6) - 1);
      *((_DWORD *)a1 + 6) = v11;
      v14 = *((_QWORD *)a1 + 2) + 32 * v11;
      v15 = *(_QWORD **)(v14 + 24);
      if (v15 == (_QWORD *)v14)
        break;
      if (v15)
      {
        v16 = 5;
LABEL_18:
        (*(void (**)(void))(*v15 + 8 * v16))();
        LODWORD(v11) = *((_DWORD *)a1 + 6);
      }
      if (!(_DWORD)v11)
        goto LABEL_20;
    }
    v15 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * v11);
    v16 = 4;
    goto LABEL_18;
  }
LABEL_20:
  if ((char)a1[1087] < 0)
  {
    **((_BYTE **)a1 + 133) = 0;
    *((_QWORD *)a1 + 134) = 0;
  }
  else
  {
    a1[1064] = 0;
    a1[1087] = 0;
  }
  result = *(llvm::raw_ostream **)a1;
  v17 = *(_BYTE **)(*(_QWORD *)a1 + 32);
  if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v17)
  {
    result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, "\n");
  }
  else
  {
    *v17 = 10;
    ++*((_QWORD *)result + 4);
  }
  a1[1056] = 1;
  return result;
}

uint64_t sub_22EF824CC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABA8D8;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  return a1;
}

void sub_22EF82508(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABA8D8;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF82554(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = off_24FABA8D8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  v3 = v2 + 40;
  if (*(char *)(a1 + 63) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 40);
    *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  }
  return v2;
}

char *sub_22EF825C8(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_24FABA8D8;
  v2 = *(_OWORD *)(result + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (_BYTE *)(a2 + 40);
  if (result[63] < 0)
    return (char *)sub_22E3BB2B4(v3, *((void **)result + 5), *((_QWORD *)result + 6));
  v4 = *(_OWORD *)(result + 40);
  *(_QWORD *)(a2 + 56) = *((_QWORD *)result + 7);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22EF82614(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void sub_22EF82628(void **__p)
{
  if (*((char *)__p + 63) < 0)
    operator delete(__p[5]);
  operator delete(__p);
}

llvm::raw_ostream *sub_22EF82658(_BYTE *a1, uint64_t a2)
{
  __int128 v4;
  _QWORD *v5;
  __int128 v6;
  llvm::raw_ostream *result;
  uint64_t (**v8)(llvm::raw_ostream *);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _BYTE *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _QWORD v25[3];
  llvm::raw_ostream *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (!a1[1056])
  {
    v4 = *(_OWORD *)(a2 + 16);
    v21 = *(_OWORD *)a2;
    v22 = v4;
    v23 = *(_OWORD *)(a2 + 32);
    v24 = *(_QWORD *)(a2 + 48);
    if (a1[1057])
    {
      v5 = operator new(0x60uLL);
      *v5 = off_24FABA920;
      v5[1] = a1;
      v6 = *(_OWORD *)(a2 + 16);
      *((_OWORD *)v5 + 1) = *(_OWORD *)a2;
      *((_OWORD *)v5 + 2) = v6;
      *((_OWORD *)v5 + 3) = *(_OWORD *)(a2 + 32);
      v5[8] = *(_QWORD *)(a2 + 48);
      v5[9] = 0;
      *((_BYTE *)v5 + 95) = 0;
      v26 = (llvm::raw_ostream *)v5;
      sub_22E536AAC((uint64_t)(a1 + 16), (unint64_t)v25);
      result = v26;
      if (v26 != (llvm::raw_ostream *)v25)
      {
LABEL_4:
        if (!result)
        {
LABEL_10:
          a1[1057] = 0;
          return result;
        }
        v8 = (uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)result + 40);
LABEL_9:
        result = (llvm::raw_ostream *)(*v8)(result);
        goto LABEL_10;
      }
    }
    else
    {
      v9 = *((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6);
      LOBYTE(v25[0]) = 0;
      v10 = *(_QWORD *)(v9 - 8);
      if (!v10)
LABEL_27:
        sub_22E4A06C4();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 48))(v10, v25);
      v11 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6) - 32);
      v12 = operator new(0x60uLL);
      *v12 = off_24FABA920;
      v12[1] = a1;
      v13 = v22;
      *((_OWORD *)v12 + 1) = v21;
      *((_OWORD *)v12 + 2) = v13;
      *((_OWORD *)v12 + 3) = v23;
      v12[8] = v24;
      v12[9] = 0;
      *((_BYTE *)v12 + 95) = 0;
      v26 = (llvm::raw_ostream *)v12;
      sub_22E63BEA4(v25, v11);
      result = v26;
      if (v26 != (llvm::raw_ostream *)v25)
        goto LABEL_4;
    }
    v8 = (uint64_t (**)(llvm::raw_ostream *))(v25[0] + 32);
    result = (llvm::raw_ostream *)v25;
    goto LABEL_9;
  }
  a1[1056] = 0;
  sub_22F373B44(a2);
  LODWORD(v14) = *((_DWORD *)a1 + 6);
  if ((_DWORD)v14)
  {
    while (1)
    {
      v15 = *((_QWORD *)a1 + 2) + 32 * v14;
      LOBYTE(v21) = 1;
      v16 = *(_QWORD *)(v15 - 8);
      if (!v16)
        goto LABEL_27;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v16 + 48))(v16, &v21);
      v14 = (*((_DWORD *)a1 + 6) - 1);
      *((_DWORD *)a1 + 6) = v14;
      v17 = *((_QWORD *)a1 + 2) + 32 * v14;
      v18 = *(_QWORD **)(v17 + 24);
      if (v18 == (_QWORD *)v17)
        break;
      if (v18)
      {
        v19 = 5;
LABEL_18:
        (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
        LODWORD(v14) = *((_DWORD *)a1 + 6);
      }
      if (!(_DWORD)v14)
        goto LABEL_20;
    }
    v18 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * v14);
    v19 = 4;
    goto LABEL_18;
  }
LABEL_20:
  if ((char)a1[1087] < 0)
  {
    **((_BYTE **)a1 + 133) = 0;
    *((_QWORD *)a1 + 134) = 0;
  }
  else
  {
    a1[1064] = 0;
    a1[1087] = 0;
  }
  result = *(llvm::raw_ostream **)a1;
  v20 = *(_BYTE **)(*(_QWORD *)a1 + 32);
  if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v20)
  {
    result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, "\n");
  }
  else
  {
    *v20 = 10;
    ++*((_QWORD *)result + 4);
  }
  a1[1056] = 1;
  return result;
}

void sub_22EF828D0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

llvm::raw_ostream *sub_22EF82920(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_22EF8CE48((_BYTE *)(v2 + 8), 0, 0, *(_QWORD *)(a2 + 8), v2);
}

void sub_22EF8294C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;

  v18 = *(unsigned int *)(a2 + 4);
  if ((_DWORD)v18)
  {
    v19 = *(__int128 **)(a2 + 8);
    v20 = 24 * v18;
    do
    {
      v22 = *v19;
      v21 = *((_QWORD *)v19 + 2);
      a12 = v17;
      a13 = v22;
      a14 = v21;
      a16 = 0;
      a17 = 0;
      a15 = 0;
      sub_22EF82658((_BYTE *)(v17 + 8), (uint64_t)&a12);
      v19 = (__int128 *)((char *)v19 + 24);
      v20 -= 24;
    }
    while (v20);
  }
  sub_22EF82908();
}

llvm::raw_ostream *sub_22EF829AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_22F372F24(v2, *(_QWORD *)(a2 + 8));
}

uint64_t sub_22EF829CC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABA920;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  return a1;
}

void sub_22EF82A08(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABA920;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF82A54(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x60uLL);
  *(_QWORD *)v2 = off_24FABA920;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  v3 = v2 + 72;
  if (*(char *)(a1 + 95) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 72);
    *((_QWORD *)v2 + 11) = *(_QWORD *)(a1 + 88);
  }
  return v2;
}

char *sub_22EF82AD8(char *result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  *(_QWORD *)a2 = off_24FABA920;
  v2 = *(_OWORD *)(result + 8);
  v3 = *(_OWORD *)(result + 24);
  v4 = *(_OWORD *)(result + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(result + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  v5 = (_BYTE *)(a2 + 72);
  if (result[95] < 0)
    return (char *)sub_22E3BB2B4(v5, *((void **)result + 9), *((_QWORD *)result + 10));
  v6 = *(_OWORD *)(result + 72);
  *(_QWORD *)(a2 + 88) = *((_QWORD *)result + 11);
  *(_OWORD *)v5 = v6;
  return result;
}

void sub_22EF82B34(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
}

void sub_22EF82B48(void **__p)
{
  if (*((char *)__p + 95) < 0)
    operator delete(__p[9]);
  operator delete(__p);
}

llvm::raw_ostream *sub_22EF82B78(_BYTE *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  llvm::raw_ostream *result;
  uint64_t (**v14)(llvm::raw_ostream *);
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD v20[3];
  llvm::raw_ostream *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (!a1[1056])
  {
    if (a1[1057])
    {
      v12 = operator new(0x38uLL);
      *v12 = off_24FABA968;
      v12[1] = a1;
      v12[2] = a2;
      v12[3] = a3;
      v12[4] = 0;
      *((_BYTE *)v12 + 55) = 0;
      v21 = (llvm::raw_ostream *)v12;
      sub_22E536AAC((uint64_t)(a1 + 16), (unint64_t)v20);
      result = v21;
      if (v21 != (llvm::raw_ostream *)v20)
      {
LABEL_14:
        if (!result)
        {
LABEL_24:
          a1[1057] = 0;
          return result;
        }
        v14 = (uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)result + 40);
LABEL_23:
        result = (llvm::raw_ostream *)(*v14)(result);
        goto LABEL_24;
      }
    }
    else
    {
      v16 = *((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6);
      LOBYTE(v20[0]) = 0;
      v17 = *(_QWORD *)(v16 - 8);
      if (!v17)
LABEL_27:
        sub_22E4A06C4();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v17 + 48))(v17, v20);
      v18 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6) - 32);
      v19 = operator new(0x38uLL);
      *v19 = off_24FABA968;
      v19[1] = a1;
      v19[2] = a2;
      v19[3] = a3;
      v19[4] = 0;
      *((_BYTE *)v19 + 55) = 0;
      v21 = (llvm::raw_ostream *)v19;
      sub_22E63BEA4(v20, v18);
      result = v21;
      if (v21 != (llvm::raw_ostream *)v20)
        goto LABEL_14;
    }
    v14 = (uint64_t (**)(llvm::raw_ostream *))(v20[0] + 32);
    result = (llvm::raw_ostream *)v20;
    goto LABEL_23;
  }
  a1[1056] = 0;
  sub_22F0FD344(a2 + 8, a3);
  sub_22EF8CE48((_BYTE *)(a2 + 8), 0, 0, a3[1], a2);
  LODWORD(v6) = *((_DWORD *)a1 + 6);
  if ((_DWORD)v6)
  {
    while (1)
    {
      v7 = *((_QWORD *)a1 + 2) + 32 * v6;
      LOBYTE(v20[0]) = 1;
      v8 = *(_QWORD *)(v7 - 8);
      if (!v8)
        goto LABEL_27;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 48))(v8, v20);
      v6 = (*((_DWORD *)a1 + 6) - 1);
      *((_DWORD *)a1 + 6) = v6;
      v9 = *((_QWORD *)a1 + 2) + 32 * v6;
      v10 = *(_QWORD **)(v9 + 24);
      if (v10 == (_QWORD *)v9)
        break;
      if (v10)
      {
        v11 = 5;
LABEL_8:
        (*(void (**)(void))(*v10 + 8 * v11))();
        LODWORD(v6) = *((_DWORD *)a1 + 6);
      }
      if (!(_DWORD)v6)
        goto LABEL_10;
    }
    v10 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * v6);
    v11 = 4;
    goto LABEL_8;
  }
LABEL_10:
  if ((char)a1[1087] < 0)
  {
    **((_BYTE **)a1 + 133) = 0;
    *((_QWORD *)a1 + 134) = 0;
  }
  else
  {
    a1[1064] = 0;
    a1[1087] = 0;
  }
  result = *(llvm::raw_ostream **)a1;
  v15 = *(_BYTE **)(*(_QWORD *)a1 + 32);
  if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v15)
  {
    result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, "\n");
  }
  else
  {
    *v15 = 10;
    ++*((_QWORD *)result + 4);
  }
  a1[1056] = 1;
  return result;
}

uint64_t sub_22EF82DE4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABA968;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_22EF82E20(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABA968;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF82E6C(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_24FABA968;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  v3 = v2 + 32;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  }
  return v2;
}

char *sub_22EF82EE0(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_24FABA968;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *((_QWORD *)result + 3);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (_BYTE *)(a2 + 32);
  if (result[55] < 0)
    return (char *)sub_22E3BB2B4(v3, *((void **)result + 4), *((_QWORD *)result + 5));
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)result + 6);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22EF82F2C(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_22EF82F40(void **__p)
{
  if (*((char *)__p + 55) < 0)
    operator delete(__p[4]);
  operator delete(__p);
}

uint64_t sub_22EF82F70(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  if (a2)
  {
    v3 = result;
    v4 = a2 + 16;
    v5 = *(_DWORD *)(a2 + 12);
    if ((v5 & 0x1FFFFFFF) != 0)
    {
      v6 = 8 * (v5 & 0x1FFFFFFF);
      v7 = (uint64_t *)(a2 + 16);
      do
      {
        v8 = *v7;
        if (*(_DWORD *)(v3 + 4) != 1 || (*(_BYTE *)(v8 + 29) & 2) == 0)
          result = sub_22EF814B0(v3 + 8, v3, v8);
        ++v7;
        v6 -= 8;
      }
      while (v6);
      v5 = *(_DWORD *)(a2 + 12);
    }
    if ((v5 & 0x40000000) != 0)
    {
      if (*(_QWORD *)(v4 + 8 * (v5 & 0x1FFFFFFF)))
        return sub_22EF8CE48((int)v3 + 8, 0, 0);
    }
  }
  return result;
}

llvm::raw_ostream *sub_22EF83028(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  llvm::raw_ostream *result;
  uint64_t (**v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _BYTE *v17;
  __int128 v18;
  _QWORD v19[3];
  llvm::raw_ostream *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v18 = a2;
  *((_QWORD *)&v18 + 1) = a3;
  if (!a1[1056])
  {
    if (a1[1057])
    {
      v4 = operator new(0x38uLL);
      *v4 = off_24FABA9B0;
      v4[1] = a1;
      *((_OWORD *)v4 + 1) = v18;
      v4[4] = 0;
      *((_BYTE *)v4 + 55) = 0;
      v20 = (llvm::raw_ostream *)v4;
      sub_22E536AAC((uint64_t)(a1 + 16), (unint64_t)v19);
    }
    else
    {
      v5 = *((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6);
      LOBYTE(v19[0]) = 0;
      v6 = *(_QWORD *)(v5 - 8);
      if (!v6)
LABEL_28:
        sub_22E4A06C4();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 48))(v6, v19);
      v7 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6) - 32);
      v8 = operator new(0x38uLL);
      *v8 = off_24FABA9B0;
      v8[1] = a1;
      *((_OWORD *)v8 + 1) = v18;
      v8[4] = 0;
      *((_BYTE *)v8 + 55) = 0;
      v20 = (llvm::raw_ostream *)v8;
      sub_22E63BEA4(v19, v7);
    }
    result = v20;
    if (v20 == (llvm::raw_ostream *)v19)
    {
      v10 = (uint64_t (**)(void))(v19[0] + 32);
    }
    else
    {
      if (!v20)
      {
LABEL_11:
        a1[1057] = 0;
        return result;
      }
      v10 = (uint64_t (**)(void))(*(_QWORD *)v20 + 40);
    }
    result = (llvm::raw_ostream *)(*v10)();
    goto LABEL_11;
  }
  a1[1056] = 0;
  sub_22F374138((uint64_t *)&v18);
  LODWORD(v11) = *((_DWORD *)a1 + 6);
  if ((_DWORD)v11)
  {
    while (1)
    {
      v12 = *((_QWORD *)a1 + 2) + 32 * v11;
      LOBYTE(v19[0]) = 1;
      v13 = *(_QWORD *)(v12 - 8);
      if (!v13)
        goto LABEL_28;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 48))(v13, v19);
      v11 = (*((_DWORD *)a1 + 6) - 1);
      *((_DWORD *)a1 + 6) = v11;
      v14 = *((_QWORD *)a1 + 2) + 32 * v11;
      v15 = *(_QWORD **)(v14 + 24);
      if (v15 == (_QWORD *)v14)
        break;
      if (v15)
      {
        v16 = 5;
LABEL_19:
        (*(void (**)(void))(*v15 + 8 * v16))();
        LODWORD(v11) = *((_DWORD *)a1 + 6);
      }
      if (!(_DWORD)v11)
        goto LABEL_21;
    }
    v15 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * v11);
    v16 = 4;
    goto LABEL_19;
  }
LABEL_21:
  if ((char)a1[1087] < 0)
  {
    **((_BYTE **)a1 + 133) = 0;
    *((_QWORD *)a1 + 134) = 0;
  }
  else
  {
    a1[1064] = 0;
    a1[1087] = 0;
  }
  result = *(llvm::raw_ostream **)a1;
  v17 = *(_BYTE **)(*(_QWORD *)a1 + 32);
  if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v17)
  {
    result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, "\n");
  }
  else
  {
    *v17 = 10;
    ++*((_QWORD *)result + 4);
  }
  a1[1056] = 1;
  return result;
}

uint64_t sub_22EF83268(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABA9B0;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_22EF832A4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABA9B0;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF832F0(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_24FABA9B0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  v3 = v2 + 32;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  }
  return v2;
}

char *sub_22EF83364(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_24FABA9B0;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *((_QWORD *)result + 3);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (_BYTE *)(a2 + 32);
  if (result[55] < 0)
    return (char *)sub_22E3BB2B4(v3, *((void **)result + 4), *((_QWORD *)result + 5));
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)result + 6);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22EF833B0(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_22EF833C4(void **__p)
{
  if (*((char *)__p + 55) < 0)
    operator delete(__p[4]);
  operator delete(__p);
}

llvm::raw_ostream *sub_22EF833F4(_BYTE *a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  llvm::raw_ostream *result;
  uint64_t (**v12)(llvm::raw_ostream *);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _BYTE *v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!a1[1056])
  {
    if (a1[1057])
    {
      v10 = operator new(0x38uLL);
      *v10 = off_24FABA9F8;
      v10[1] = a1;
      v10[2] = a2;
      v10[3] = a3;
      v10[4] = 0;
      *((_BYTE *)v10 + 55) = 0;
      *(_QWORD *)&v29 = v10;
      sub_22E536AAC((uint64_t)(a1 + 16), (unint64_t)&v27);
      result = (llvm::raw_ostream *)v29;
      if ((__int128 *)v29 != &v27)
      {
LABEL_6:
        if (!result)
        {
LABEL_12:
          a1[1057] = 0;
          return result;
        }
        v12 = (uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)result + 40);
LABEL_11:
        result = (llvm::raw_ostream *)(*v12)(result);
        goto LABEL_12;
      }
    }
    else
    {
      v13 = *((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6);
      LOBYTE(v27) = 0;
      v14 = *(_QWORD *)(v13 - 8);
      if (!v14)
LABEL_41:
        sub_22E4A06C4();
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v14 + 48))(v14, &v27);
      v15 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6) - 32);
      v16 = operator new(0x38uLL);
      *v16 = off_24FABA9F8;
      v16[1] = a1;
      v16[2] = a2;
      v16[3] = a3;
      v16[4] = 0;
      *((_BYTE *)v16 + 55) = 0;
      *(_QWORD *)&v29 = v16;
      sub_22E63BEA4(&v27, v15);
      result = (llvm::raw_ostream *)v29;
      if ((__int128 *)v29 != &v27)
        goto LABEL_6;
    }
    v12 = (uint64_t (**)(llvm::raw_ostream *))(v27 + 32);
    result = (llvm::raw_ostream *)&v27;
    goto LABEL_11;
  }
  a1[1056] = 0;
  sub_22F0FD6D4(a2 + 8, a3);
  sub_22F3E9FA4((uint64_t)a3);
  v25 = v27;
  v6 = v29;
  v26 = v28;
  v7 = *((_QWORD *)&v29 + 1);
  v8 = *((_QWORD *)&v27 + 1);
  v9 = (uint64_t *)v27;
  if (v27 != v29)
  {
    do
    {
      if ((v8 & 3) != 0)
      {
        if ((v8 & 0xFFFFFFFFFFFFFFFCLL) == 0)
          sub_22F3AC1A8(*v9);
        sub_22EF8CE48(a2 + 8, 0, 0);
        if (v8 >= 4)
          sub_22F0D8720((uint64_t)&v25);
        else
          sub_22F3F2FE0((uint64_t)&v25, 1);
      }
      else
      {
        sub_22EF8CE48(a2 + 8, 0, 0);
        *(_QWORD *)&v25 = v9 + 1;
      }
      v8 = *((_QWORD *)&v25 + 1);
      v9 = (uint64_t *)v25;
    }
    while ((_QWORD)v25 != v6 || *((_QWORD *)&v25 + 1) != v7);
  }
  LODWORD(v18) = *((_DWORD *)a1 + 6);
  if ((_DWORD)v18)
  {
    while (1)
    {
      v19 = *((_QWORD *)a1 + 2) + 32 * v18;
      LOBYTE(v27) = 1;
      v20 = *(_QWORD *)(v19 - 8);
      if (!v20)
        goto LABEL_41;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v20 + 48))(v20, &v27);
      v18 = (*((_DWORD *)a1 + 6) - 1);
      *((_DWORD *)a1 + 6) = v18;
      v21 = *((_QWORD *)a1 + 2) + 32 * v18;
      v22 = *(_QWORD **)(v21 + 24);
      if (v22 == (_QWORD *)v21)
        break;
      if (v22)
      {
        v23 = 5;
LABEL_32:
        (*(void (**)(void))(*v22 + 8 * v23))();
        LODWORD(v18) = *((_DWORD *)a1 + 6);
      }
      if (!(_DWORD)v18)
        goto LABEL_34;
    }
    v22 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * v18);
    v23 = 4;
    goto LABEL_32;
  }
LABEL_34:
  if ((char)a1[1087] < 0)
  {
    **((_BYTE **)a1 + 133) = 0;
    *((_QWORD *)a1 + 134) = 0;
  }
  else
  {
    a1[1064] = 0;
    a1[1087] = 0;
  }
  result = *(llvm::raw_ostream **)a1;
  v24 = *(_BYTE **)(*(_QWORD *)a1 + 32);
  if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v24)
  {
    result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, "\n");
  }
  else
  {
    *v24 = 10;
    ++*((_QWORD *)result + 4);
  }
  a1[1056] = 1;
  return result;
}

uint64_t sub_22EF8370C(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)a1;
  v3 = (_BYTE *)(*(_QWORD *)a1 + 8);
  sub_22F0FD6D4((uint64_t)v3, *(unint64_t **)(a1 + 8));
  result = sub_22F3E9FA4(*(_QWORD *)(a1 + 8));
  v11 = v13;
  v5 = v15;
  v12 = v14;
  v6 = *((_QWORD *)&v15 + 1);
  v7 = *((_QWORD *)&v13 + 1);
  v8 = (uint64_t *)v13;
  if (v13 != v15)
  {
    do
    {
      if ((v7 & 3) != 0)
      {
        if ((v7 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v9 = (uint64_t *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v9 = (uint64_t *)sub_22F3AC1A8(*v8);
        sub_22EF8CE48(v3, 0, 0, *v9, v2);
        if (v7 >= 4)
          result = sub_22F0D8720((uint64_t)&v11);
        else
          result = sub_22F3F2FE0((uint64_t)&v11, 1);
      }
      else
      {
        result = (uint64_t)sub_22EF8CE48(v3, 0, 0, *v8, v2);
        *(_QWORD *)&v11 = v8 + 1;
      }
      v7 = *((_QWORD *)&v11 + 1);
      v8 = (uint64_t *)v11;
    }
    while ((_QWORD)v11 != v5 || *((_QWORD *)&v11 + 1) != v6);
  }
  return result;
}

uint64_t sub_22EF8380C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABA9F8;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_22EF83848(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABA9F8;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF83894(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_24FABA9F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  v3 = v2 + 32;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  }
  return v2;
}

char *sub_22EF83908(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_24FABA9F8;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *((_QWORD *)result + 3);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (_BYTE *)(a2 + 32);
  if (result[55] < 0)
    return (char *)sub_22E3BB2B4(v3, *((void **)result + 4), *((_QWORD *)result + 5));
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)result + 6);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22EF83954(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_22EF83968(void **__p)
{
  if (*((char *)__p + 55) < 0)
    operator delete(__p[4]);
  operator delete(__p);
}

llvm::raw_ostream *sub_22EF83998(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  llvm::raw_ostream *result;
  uint64_t (**v15)(llvm::raw_ostream *);
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD v21[3];
  llvm::raw_ostream *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 16;
  if (!a1[1056])
  {
    if (a1[1057])
    {
      v13 = operator new(0x38uLL);
      *v13 = off_24FABAA40;
      v13[1] = a1;
      v13[2] = a2;
      v13[3] = a3;
      v13[4] = 0;
      *((_BYTE *)v13 + 55) = 0;
      v22 = (llvm::raw_ostream *)v13;
      sub_22E536AAC((uint64_t)v6, (unint64_t)v21);
      result = v22;
      if (v22 != (llvm::raw_ostream *)v21)
      {
LABEL_14:
        if (!result)
        {
LABEL_24:
          a1[1057] = 0;
          return result;
        }
        v15 = (uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)result + 40);
LABEL_23:
        result = (llvm::raw_ostream *)(*v15)(result);
        goto LABEL_24;
      }
    }
    else
    {
      v17 = *((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6);
      LOBYTE(v21[0]) = 0;
      v18 = *(_QWORD *)(v17 - 8);
      if (!v18)
LABEL_27:
        sub_22E4A06C4();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v18 + 48))(v18, v21);
      v19 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6) - 32);
      v20 = operator new(0x38uLL);
      *v20 = off_24FABAA40;
      v20[1] = a1;
      v20[2] = a2;
      v20[3] = a3;
      v20[4] = 0;
      *((_BYTE *)v20 + 55) = 0;
      v22 = (llvm::raw_ostream *)v20;
      sub_22E63BEA4(v21, v19);
      result = v22;
      if (v22 != (llvm::raw_ostream *)v21)
        goto LABEL_14;
    }
    v15 = (uint64_t (**)(llvm::raw_ostream *))(v21[0] + 32);
    result = (llvm::raw_ostream *)v21;
    goto LABEL_23;
  }
  a1[1056] = 0;
  sub_22F0F0DB8(a2 + 8, a3);
  sub_22EF83BF4(a2, a3);
  LODWORD(v7) = *((_DWORD *)a1 + 6);
  if ((_DWORD)v7)
  {
    while (1)
    {
      v8 = *v6 + 32 * v7;
      LOBYTE(v21[0]) = 1;
      v9 = *(_QWORD *)(v8 - 8);
      if (!v9)
        goto LABEL_27;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 48))(v9, v21);
      v7 = (*((_DWORD *)a1 + 6) - 1);
      *((_DWORD *)a1 + 6) = v7;
      v10 = *((_QWORD *)a1 + 2) + 32 * v7;
      v11 = *(_QWORD **)(v10 + 24);
      if (v11 == (_QWORD *)v10)
        break;
      if (v11)
      {
        v12 = 5;
LABEL_8:
        (*(void (**)(void))(*v11 + 8 * v12))();
        LODWORD(v7) = *((_DWORD *)a1 + 6);
      }
      if (!(_DWORD)v7)
        goto LABEL_10;
    }
    v11 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * v7);
    v12 = 4;
    goto LABEL_8;
  }
LABEL_10:
  if ((char)a1[1087] < 0)
  {
    **((_BYTE **)a1 + 133) = 0;
    *((_QWORD *)a1 + 134) = 0;
  }
  else
  {
    a1[1064] = 0;
    a1[1087] = 0;
  }
  result = *(llvm::raw_ostream **)a1;
  v16 = *(_BYTE **)(*(_QWORD *)a1 + 32);
  if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v16)
  {
    result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, "\n");
  }
  else
  {
    *v16 = 10;
    ++*((_QWORD *)result + 4);
  }
  a1[1056] = 1;
  return result;
}

void sub_22EF83BF4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

llvm::raw_ostream *sub_22EF83C34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_22EF8CE48((_BYTE *)(v2 + 8), 0, 0, *(_QWORD *)(a2 + 48), v2);
}

void sub_22EF83D10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a2 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      sub_22EF8CE48((_BYTE *)(v2 + 8), 0, 0, v6, v2);
      v5 -= 8;
    }
    while (v5);
  }
  sub_22EF83C24();
}

void sub_22EF83D48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a2 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      sub_22EF8CE48((_BYTE *)(v2 + 8), 0, 0, v6, v2);
      v5 -= 8;
    }
    while (v5);
  }
  sub_22EF83C24();
}

void sub_22EF83D80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a2 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      sub_22EF8CE48((_BYTE *)(v2 + 8), 0, 0, v6, v2);
      v5 -= 8;
    }
    while (v5);
  }
  sub_22EF83C24();
}

void sub_22EF83DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a2 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      sub_22EF8CE48((_BYTE *)(v2 + 8), 0, 0, v6, v2);
      v5 -= 8;
    }
    while (v5);
  }
  sub_22EF83C24();
}

void sub_22EF83DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a2 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      sub_22EF8CE48((_BYTE *)(v2 + 8), 0, 0, v6, v2);
      v5 -= 8;
    }
    while (v5);
  }
  sub_22EF83C24();
}

void sub_22EF83E28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a2 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      sub_22EF8CE48((_BYTE *)(v2 + 8), 0, 0, v6, v2);
      v5 -= 8;
    }
    while (v5);
  }
  sub_22EF83C24();
}

void sub_22EF83E60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t *v6;

  v3 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t ***)(a2 + 48);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      sub_22F372F24(v2, *v6);
      v5 -= 8;
    }
    while (v5);
  }
  sub_22EF83C24();
}

llvm::raw_ostream *sub_22EF83E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_22EF83998((_BYTE *)(v2 + 8), v2, *(_QWORD *)(a2 + 56));
}

llvm::raw_ostream *sub_22EF83EA8(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v2;

  return sub_22F374948(v2, a2);
}

llvm::raw_ostream *sub_22EF83EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_22F3749E0(v2, a2);
}

llvm::raw_ostream *sub_22EF83ED0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_22F3749E0(v2, a2);
}

llvm::raw_ostream *sub_22EF83EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_22F3749E0(v2, a2);
}

llvm::raw_ostream *sub_22EF83EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_22F3749E0(v2, a2);
}

llvm::raw_ostream *sub_22EF83F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_22F374A38(v2, a2);
}

llvm::raw_ostream *sub_22EF83F20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_22F3749E0(v2, a2);
}

llvm::raw_ostream *sub_22EF83F34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_22F374AAC(v2, a2);
}

llvm::raw_ostream *sub_22EF83F48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_22F374A38(v2, a2);
}

llvm::raw_ostream *sub_22EF83F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_22F374A38(v2, a2);
}

llvm::raw_ostream *sub_22EF83F70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_22F374B58(v2, a2);
}

uint64_t sub_22EF83F84(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAA40;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_22EF83FC0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAA40;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF8400C(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_24FABAA40;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  v3 = v2 + 32;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  }
  return v2;
}

char *sub_22EF84080(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_24FABAA40;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *((_QWORD *)result + 3);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (_BYTE *)(a2 + 32);
  if (result[55] < 0)
    return (char *)sub_22E3BB2B4(v3, *((void **)result + 4), *((_QWORD *)result + 5));
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)result + 6);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22EF840CC(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_22EF840E0(void **__p)
{
  if (*((char *)__p + 55) < 0)
    operator delete(__p[4]);
  operator delete(__p);
}

uint64_t sub_22EF84110(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAA88;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_22EF8414C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAA88;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF84198(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_24FABAA88;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  v3 = v2 + 32;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  }
  return v2;
}

char *sub_22EF8420C(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_24FABAA88;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *((_QWORD *)result + 3);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (_BYTE *)(a2 + 32);
  if (result[55] < 0)
    return (char *)sub_22E3BB2B4(v3, *((void **)result + 4), *((_QWORD *)result + 5));
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)result + 6);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22EF84258(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_22EF8426C(void **__p)
{
  if (*((char *)__p + 55) < 0)
    operator delete(__p[4]);
  operator delete(__p);
}

void sub_22EF8429C(uint64_t *a1)
{
  uint64_t v2;
  llvm::raw_ostream *v3;
  void *v4;
  llvm::raw_ostream **v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  llvm::raw_ostream *v10;
  _QWORD *v11;
  int *v12;
  int *v13;
  int *v14;
  int *v15;
  _BYTE *v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  void (**v32)(void);
  int *v33;
  _BYTE *v34;
  llvm::raw_ostream *v35;
  int v36;
  llvm::raw_ostream *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  void (**v47)(_QWORD *);
  llvm::raw_ostream *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  __int16 v54;
  int *v55[4];
  int *v56;
  _BYTE v57[25];
  _QWORD v58[3];
  _QWORD *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(llvm::raw_ostream **)(*a1 + 1168);
  v4 = (void *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v4 > 0xEuLL)
  {
    qmemcpy(v4, "StoredDeclsMap ", 15);
    *((_QWORD *)v3 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v3, "StoredDeclsMap ");
  }
  v5 = (llvm::raw_ostream **)(v2 + 8);
  v6 = a1[1];
  v7 = *(_WORD *)(v6 + 8) & 0x7F;
  v8 = -40;
  if (v7 > 0x46)
  {
    if (v7 == 83)
      goto LABEL_19;
    if (v7 == 71)
    {
      v8 = -56;
      goto LABEL_19;
    }
    if (v7 != 81)
    {
LABEL_14:
      if (v7 - 52 < 6)
      {
        v8 = -72;
      }
      else
      {
        v8 = -48;
        if (v7 - 33 < 5)
          v8 = -64;
      }
    }
  }
  else
  {
    if (v7 > 0x18)
      goto LABEL_13;
    if (v7 == 16)
    {
LABEL_6:
      v8 = -48;
      goto LABEL_19;
    }
    if (((1 << v7) & 0x1066) == 0)
    {
      if (v7 == 24)
        goto LABEL_6;
LABEL_13:
      if (v7 == 70)
      {
        v8 = -64;
        goto LABEL_19;
      }
      goto LABEL_14;
    }
  }
LABEL_19:
  sub_22F0FD464(v2 + 8, v6 + v8);
  v9 = sub_22EFCC008(a1[1]);
  if (v9 != a1[1])
  {
    v10 = *(llvm::raw_ostream **)(v2 + 1168);
    v11 = (_QWORD *)*((_QWORD *)v10 + 4);
    if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 7uLL)
    {
      *v11 = 0x7972616D69727020;
      *((_QWORD *)v10 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v10, " primary");
    }
    sub_22F402544(v2 + 8);
  }
  v54 = *(_WORD *)(v9 + 8);
  if (*(_BYTE *)v2)
    sub_22F3398CC(v9, v55);
  else
    sub_22F339980(v9, 1, v55);
  v12 = v55[0];
  v13 = v56;
  if (v55[0] != v56)
  {
    v15 = v55[1];
    v14 = v55[2];
    do
    {
      v16 = *(_BYTE **)v12;
      v17 = *((_QWORD *)v12 + 1) & 0xFFFFFFFFFFFFFFFCLL;
      v18 = *((_BYTE *)a1 + 16);
      *(_QWORD *)v57 = v2;
      *(_QWORD *)&v57[8] = v16;
      *(_QWORD *)&v57[16] = v17;
      v57[24] = v18;
      if (*(_BYTE *)(v2 + 1064))
      {
        *(_BYTE *)(v2 + 1064) = 0;
        sub_22EF84A14((uint64_t *)v57);
        LODWORD(v19) = *(_DWORD *)(v2 + 32);
        if (!(_DWORD)v19)
        {
LABEL_37:
          if (*(char *)(v2 + 1095) < 0)
          {
            **(_BYTE **)(v2 + 1072) = 0;
            *(_QWORD *)(v2 + 1080) = 0;
          }
          else
          {
            *(_BYTE *)(v2 + 1072) = 0;
            *(_BYTE *)(v2 + 1095) = 0;
          }
          v26 = *v5;
          v27 = (_BYTE *)*((_QWORD *)*v5 + 4);
          if (*((_BYTE **)*v5 + 3) == v27)
          {
            llvm::raw_ostream::write(v26, "\n");
          }
          else
          {
            *v27 = 10;
            ++*((_QWORD *)v26 + 4);
          }
          *(_BYTE *)(v2 + 1064) = 1;
          goto LABEL_53;
        }
        while (2)
        {
          v20 = *(_QWORD *)(v2 + 24) + 32 * v19;
          LOBYTE(v58[0]) = 1;
          v21 = *(_QWORD *)(v20 - 8);
          if (!v21)
            goto LABEL_98;
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v21 + 48))(v21, v58);
          v19 = (*(_DWORD *)(v2 + 32) - 1);
          *(_DWORD *)(v2 + 32) = v19;
          v22 = *(_QWORD *)(v2 + 24) + 32 * v19;
          v23 = *(_QWORD **)(v22 + 24);
          if (v23 == (_QWORD *)v22)
          {
            v23 = (_QWORD *)(*(_QWORD *)(v2 + 24) + 32 * v19);
            v24 = 4;
LABEL_35:
            (*(void (**)(void))(*v23 + 8 * v24))();
            LODWORD(v19) = *(_DWORD *)(v2 + 32);
          }
          else if (v23)
          {
            v24 = 5;
            goto LABEL_35;
          }
          if (!(_DWORD)v19)
            goto LABEL_37;
          continue;
        }
      }
      if (*(_BYTE *)(v2 + 1065))
      {
        v25 = (char *)operator new(0x48uLL);
        *(_QWORD *)v25 = off_24FABAB60;
        *((_QWORD *)v25 + 1) = v5;
        *((_OWORD *)v25 + 1) = *(_OWORD *)v57;
        *(_OWORD *)(v25 + 25) = *(_OWORD *)&v57[9];
        *((_QWORD *)v25 + 6) = 0;
        v25[71] = 0;
        v59 = v25;
        sub_22E536AAC(v2 + 24, (unint64_t)v58);
      }
      else
      {
        v28 = *(_QWORD *)(v2 + 24) + 32 * *(unsigned int *)(v2 + 32);
        LOBYTE(v58[0]) = 0;
        v29 = *(_QWORD *)(v28 - 8);
        if (!v29)
          goto LABEL_98;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v29 + 48))(v29, v58);
        v30 = (_QWORD *)(*(_QWORD *)(v2 + 24) + 32 * *(unsigned int *)(v2 + 32) - 32);
        v31 = (char *)operator new(0x48uLL);
        *(_QWORD *)v31 = off_24FABAB60;
        *((_QWORD *)v31 + 1) = v5;
        *((_OWORD *)v31 + 1) = *(_OWORD *)v57;
        *(_OWORD *)(v31 + 25) = *(_OWORD *)&v57[9];
        *((_QWORD *)v31 + 6) = 0;
        v31[71] = 0;
        v59 = v31;
        sub_22E63BEA4(v58, v30);
      }
      if (v59 == v58)
      {
        v32 = (void (**)(void))(v58[0] + 32);
      }
      else
      {
        if (!v59)
          goto LABEL_52;
        v32 = (void (**)(void))(*v59 + 40);
      }
      (*v32)();
LABEL_52:
      *(_BYTE *)(v2 + 1065) = 0;
      while (1)
      {
        do
        {
LABEL_53:
          v33 = v12 + 4;
          v12 = v15;
          if (v33 == v15)
            break;
          v12 = v33;
        }
        while (*(_QWORD *)v33 > 0xFFFFFFFFFFFFFFFDLL);
        if (v12 == v14)
          break;
        v34 = *(_BYTE **)v12;
        if (v34 != sub_22E79390C())
          goto LABEL_59;
      }
      v12 = v14;
LABEL_59:
      ;
    }
    while (v12 != v13);
  }
  if ((v54 & 0x100) == 0)
    return;
  if (!*(_BYTE *)(v2 + 1064))
  {
    if (*(_BYTE *)(v2 + 1065))
    {
      v45 = operator new(0x30uLL);
      *v45 = off_24FABABA8;
      v45[1] = v5;
      v45[2] = v2;
      v45[3] = 0;
      *((_BYTE *)v45 + 47) = 0;
      v59 = v45;
      sub_22E536AAC(v2 + 24, (unint64_t)v58);
      v46 = v59;
      if (v59 != v58)
      {
LABEL_81:
        if (!v46)
        {
LABEL_91:
          *(_BYTE *)(v2 + 1065) = 0;
          return;
        }
        v47 = (void (**)(_QWORD *))(*v46 + 40);
LABEL_90:
        (*v47)(v46);
        goto LABEL_91;
      }
    }
    else
    {
      v50 = *(_QWORD *)(v2 + 24) + 32 * *(unsigned int *)(v2 + 32);
      LOBYTE(v58[0]) = 0;
      v51 = *(_QWORD *)(v50 - 8);
      if (!v51)
LABEL_98:
        sub_22E4A06C4();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v51 + 48))(v51, v58);
      v52 = (_QWORD *)(*(_QWORD *)(v2 + 24) + 32 * *(unsigned int *)(v2 + 32) - 32);
      v53 = operator new(0x30uLL);
      *v53 = off_24FABABA8;
      v53[1] = v5;
      v53[2] = v2;
      v53[3] = 0;
      *((_BYTE *)v53 + 47) = 0;
      v59 = v53;
      sub_22E63BEA4(v58, v52);
      v46 = v59;
      if (v59 != v58)
        goto LABEL_81;
    }
    v47 = (void (**)(_QWORD *))(v58[0] + 32);
    v46 = v58;
    goto LABEL_90;
  }
  *(_BYTE *)(v2 + 1064) = 0;
  v35 = *(llvm::raw_ostream **)(v2 + 1168);
  v36 = *(unsigned __int8 *)(v2 + 1176);
  v37 = v35;
  if (*(_BYTE *)(v2 + 1176))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v35 + 24))(*(_QWORD *)(v2 + 1168), 2, 1, 0);
    v37 = *(llvm::raw_ostream **)(v2 + 1168);
  }
  v38 = (void *)*((_QWORD *)v37 + 4);
  if (*((_QWORD *)v37 + 3) - (_QWORD)v38 > 0x17uLL)
  {
    qmemcpy(v38, "<undeserialized lookups>", 24);
    *((_QWORD *)v37 + 4) += 24;
    if (!v36)
      goto LABEL_69;
    goto LABEL_68;
  }
  llvm::raw_ostream::write(v37, "<undeserialized lookups>");
  if (v36)
LABEL_68:
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v35 + 32))(v35);
LABEL_69:
  LODWORD(v39) = *(_DWORD *)(v2 + 32);
  if ((_DWORD)v39)
  {
    while (1)
    {
      v40 = *(_QWORD *)(v2 + 24) + 32 * v39;
      LOBYTE(v58[0]) = 1;
      v41 = *(_QWORD *)(v40 - 8);
      if (!v41)
        goto LABEL_98;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v41 + 48))(v41, v58);
      v39 = (*(_DWORD *)(v2 + 32) - 1);
      *(_DWORD *)(v2 + 32) = v39;
      v42 = *(_QWORD *)(v2 + 24) + 32 * v39;
      v43 = *(_QWORD **)(v42 + 24);
      if (v43 == (_QWORD *)v42)
        break;
      if (v43)
      {
        v44 = 5;
LABEL_75:
        (*(void (**)(void))(*v43 + 8 * v44))();
        LODWORD(v39) = *(_DWORD *)(v2 + 32);
      }
      if (!(_DWORD)v39)
        goto LABEL_77;
    }
    v43 = (_QWORD *)(*(_QWORD *)(v2 + 24) + 32 * v39);
    v44 = 4;
    goto LABEL_75;
  }
LABEL_77:
  if (*(char *)(v2 + 1095) < 0)
  {
    **(_BYTE **)(v2 + 1072) = 0;
    *(_QWORD *)(v2 + 1080) = 0;
  }
  else
  {
    *(_BYTE *)(v2 + 1072) = 0;
    *(_BYTE *)(v2 + 1095) = 0;
  }
  v48 = *v5;
  v49 = (_BYTE *)*((_QWORD *)*v5 + 4);
  if (*((_BYTE **)*v5 + 3) == v49)
  {
    llvm::raw_ostream::write(v48, "\n");
  }
  else
  {
    *v49 = 10;
    ++*((_QWORD *)v48 + 4);
  }
  *(_BYTE *)(v2 + 1064) = 1;
}

llvm::raw_ostream *sub_22EF84A14(uint64_t *a1)
{
  uint64_t v2;
  llvm::raw_ostream *v3;
  _OWORD *v4;
  llvm::raw_ostream *v5;
  int v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  llvm::raw_ostream *result;
  _BYTE *v10;
  uint64_t v11;
  llvm::raw_ostream **v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t (**v26)(void);
  __int128 v27;
  char v28;
  _QWORD v29[3];
  llvm::raw_ostream *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(llvm::raw_ostream **)(*a1 + 1168);
  v4 = (_OWORD *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v4 > 0xFuLL)
  {
    *v4 = *(_OWORD *)"DeclarationName ";
    *((_QWORD *)v3 + 4) += 16;
  }
  else
  {
    llvm::raw_ostream::write(v3, "DeclarationName ");
  }
  v5 = *(llvm::raw_ostream **)(v2 + 1168);
  v6 = *(unsigned __int8 *)(v2 + 1176);
  v7 = v5;
  if (*(_BYTE *)(v2 + 1176))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 24))(*(_QWORD *)(v2 + 1168), 6, 1, 0);
    v7 = *(llvm::raw_ostream **)(v2 + 1168);
  }
  v8 = (_BYTE *)*((_QWORD *)v7 + 4);
  if ((unint64_t)v8 >= *((_QWORD *)v7 + 3))
  {
    v7 = (llvm::raw_ostream *)llvm::raw_ostream::write(v7);
  }
  else
  {
    *((_QWORD *)v7 + 4) = v8 + 1;
    *v8 = 39;
  }
  result = (llvm::raw_ostream *)sub_22EFC6724((uint64_t)v7, a1[1]);
  v10 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v10 >= *((_QWORD *)result + 3))
  {
    result = (llvm::raw_ostream *)llvm::raw_ostream::write(result);
    if (!v6)
      goto LABEL_13;
    goto LABEL_12;
  }
  *((_QWORD *)result + 4) = v10 + 1;
  *v10 = 39;
  if (v6)
LABEL_12:
    result = (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)v5 + 32))(v5);
LABEL_13:
  v11 = a1[2];
  if (v11)
  {
    v12 = (llvm::raw_ostream **)(v2 + 8);
    while (1)
    {
      v13 = *((_BYTE *)a1 + 24);
      *(_QWORD *)&v27 = v2;
      *((_QWORD *)&v27 + 1) = v11;
      v28 = v13;
      if (!*(_BYTE *)(v2 + 1064))
        break;
      *(_BYTE *)(v2 + 1064) = 0;
      sub_22EF84D88((uint64_t *)&v27);
      LODWORD(v14) = *(_DWORD *)(v2 + 32);
      if ((_DWORD)v14)
      {
        while (1)
        {
          v15 = *(_QWORD *)(v2 + 24) + 32 * v14;
          LOBYTE(v29[0]) = 1;
          v16 = *(_QWORD *)(v15 - 8);
          if (!v16)
            goto LABEL_47;
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v16 + 48))(v16, v29);
          v14 = (*(_DWORD *)(v2 + 32) - 1);
          *(_DWORD *)(v2 + 32) = v14;
          v17 = *(_QWORD *)(v2 + 24) + 32 * v14;
          v18 = *(_QWORD **)(v17 + 24);
          if (v18 == (_QWORD *)v17)
            break;
          if (v18)
          {
            v19 = 5;
LABEL_22:
            (*(void (**)(void))(*v18 + 8 * v19))();
            LODWORD(v14) = *(_DWORD *)(v2 + 32);
          }
          if (!(_DWORD)v14)
            goto LABEL_24;
        }
        v18 = (_QWORD *)(*(_QWORD *)(v2 + 24) + 32 * v14);
        v19 = 4;
        goto LABEL_22;
      }
LABEL_24:
      if (*(char *)(v2 + 1095) < 0)
      {
        **(_BYTE **)(v2 + 1072) = 0;
        *(_QWORD *)(v2 + 1080) = 0;
      }
      else
      {
        *(_BYTE *)(v2 + 1072) = 0;
        *(_BYTE *)(v2 + 1095) = 0;
      }
      result = *v12;
      v21 = (_BYTE *)*((_QWORD *)*v12 + 4);
      if (*((_BYTE **)*v12 + 3) == v21)
      {
        result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, "\n");
      }
      else
      {
        *v21 = 10;
        ++*((_QWORD *)result + 4);
      }
      *(_BYTE *)(v2 + 1064) = 1;
      if ((v11 & 4) == 0)
        return result;
LABEL_41:
      if ((v11 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v11 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 8);
        if (v11)
          continue;
      }
      return result;
    }
    if (*(_BYTE *)(v2 + 1065))
    {
      v20 = operator new(0x40uLL);
      *v20 = off_24FABAB18;
      v20[1] = v12;
      *((_OWORD *)v20 + 1) = v27;
      *((_BYTE *)v20 + 32) = v28;
      v20[5] = 0;
      *((_BYTE *)v20 + 63) = 0;
      v30 = (llvm::raw_ostream *)v20;
      sub_22E536AAC(v2 + 24, (unint64_t)v29);
    }
    else
    {
      v22 = *(_QWORD *)(v2 + 24) + 32 * *(unsigned int *)(v2 + 32);
      LOBYTE(v29[0]) = 0;
      v23 = *(_QWORD *)(v22 - 8);
      if (!v23)
LABEL_47:
        sub_22E4A06C4();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v23 + 48))(v23, v29);
      v24 = (_QWORD *)(*(_QWORD *)(v2 + 24) + 32 * *(unsigned int *)(v2 + 32) - 32);
      v25 = operator new(0x40uLL);
      *v25 = off_24FABAB18;
      v25[1] = v12;
      *((_OWORD *)v25 + 1) = v27;
      *((_BYTE *)v25 + 32) = v28;
      v25[5] = 0;
      *((_BYTE *)v25 + 63) = 0;
      v30 = (llvm::raw_ostream *)v25;
      sub_22E63BEA4(v29, v24);
    }
    result = v30;
    if (v30 == (llvm::raw_ostream *)v29)
    {
      v26 = (uint64_t (**)(void))(v29[0] + 32);
    }
    else
    {
      if (!v30)
        goto LABEL_40;
      v26 = (uint64_t (**)(void))(*(_QWORD *)v30 + 40);
    }
    result = (llvm::raw_ostream *)(*v26)();
LABEL_40:
    *(_BYTE *)(v2 + 1065) = 0;
    if ((v11 & 4) == 0)
      return result;
    goto LABEL_41;
  }
  return result;
}

void sub_22EF84D88(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  llvm::raw_ostream *v8;
  _DWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  void (**v12)(void);
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v2 = a1[1];
  v4 = *a1 + 8;
  v5 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
  if ((v2 & 4) != 0 && v5)
    v5 = (_QWORD *)*v5;
  sub_22F0FD464(v4, (uint64_t)v5);
  v6 = a1[1];
  v7 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 4) != 0 && v7)
    v7 = *(_QWORD *)v7;
  if ((*(_BYTE *)(v7 + 8) & 4) != 0)
  {
    v8 = *(llvm::raw_ostream **)(v3 + 1168);
    v9 = (_DWORD *)*((_QWORD *)v8 + 4);
    if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 6uLL)
    {
      *(_DWORD *)((char *)v9 + 3) = 1852138596;
      *v9 = 1684629536;
      *((_QWORD *)v8 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v8, " hidden");
    }
  }
  if (*((_BYTE *)a1 + 16))
  {
    v14[0] = &off_24FABAAD0;
    v14[1] = v14;
    v14[2] = v3;
    v15 = v14;
    v10 = a1[1];
    v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
    if ((v10 & 4) != 0)
    {
      if (v11)
        v11 = (_QWORD *)*v11;
    }
    v13 = v11;
    sub_22EF84F44((uint64_t)v14, (uint64_t *)&v13);
    if (v15 == v14)
    {
      v12 = (void (**)(void))(v14[0] + 32);
    }
    else
    {
      if (!v15)
        return;
      v12 = (void (**)(void))(*v15 + 40);
    }
    (*v12)();
  }
}

void sub_22EF84ED8()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22EF84EEC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FABAAD0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_22EF84F24(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FABAAD0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

llvm::raw_ostream *sub_22EF84F44(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  llvm::raw_ostream *result;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::raw_ostream *v14;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 16);
  result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 48))(*a2);
  if (result)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v14 = result;
    v12 = *(_QWORD *)(v11 + 24);
    if (!v12)
    {
      sub_22E4A06C4();
      return (llvm::raw_ostream *)sub_22EF84FD4(v13);
    }
    result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t, llvm::raw_ostream **))(*(_QWORD *)v12 + 48))(v12, &v14);
  }
  if (*(_DWORD *)(v4 + 4) != 1 || (*(_BYTE *)(v3 + 29) & 2) == 0)
    return sub_22EF814B0((_BYTE *)(v4 + 8), v4, v3, v6, v7, v8, v9, v10);
  return result;
}

uint64_t sub_22EF84FD4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAB18;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  return a1;
}

void sub_22EF85010(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAB18;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF8505C(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = off_24FABAB18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 17) = *(_OWORD *)(a1 + 17);
  v3 = v2 + 40;
  if (*(char *)(a1 + 63) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 40);
    *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  }
  return v2;
}

char *sub_22EF850D0(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_24FABAB18;
  v2 = *(_OWORD *)(result + 8);
  *(_OWORD *)(a2 + 17) = *(_OWORD *)(result + 17);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (_BYTE *)(a2 + 40);
  if (result[63] < 0)
    return (char *)sub_22E3BB2B4(v3, *((void **)result + 5), *((_QWORD *)result + 6));
  v4 = *(_OWORD *)(result + 40);
  *(_QWORD *)(a2 + 56) = *((_QWORD *)result + 7);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22EF8511C(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void sub_22EF85130(void **__p)
{
  if (*((char *)__p + 63) < 0)
    operator delete(__p[5]);
  operator delete(__p);
}

void sub_22EF85160(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  std::string::value_type v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = (llvm::raw_ostream *)*v4;
  v6 = *(_BYTE **)(*v4 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(*v4 + 24))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = (llvm::raw_ostream *)*v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = (llvm::raw_ostream *)*v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = (llvm::raw_ostream *)*v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (v3)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  v15 = *(_BYTE *)(a1 + 63);
  v16 = v15;
  v17 = v15 & 0x7F;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(_QWORD *)(a1 + 48);
  if (v18)
  {
    if (v16 >= 0)
      v19 = (const char *)(a1 + 40);
    else
      v19 = *(const char **)(a1 + 40);
    v20 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)*v4, v19);
    v21 = (_WORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 1uLL)
    {
      *v21 = 8250;
      *((_QWORD *)v20 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, ": ");
    }
  }
  if (v3)
    v22 = 32;
  else
    v22 = 124;
  std::string::push_back((std::string *)(v4 + 133), v22);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v23 = *((_DWORD *)v4 + 6);
  sub_22EF84D88((uint64_t *)(a1 + 16));
LABEL_33:
  LODWORD(v24) = *((_DWORD *)v4 + 6);
  while (v23 < v24)
  {
    v25 = v4[2] + 32 * v24;
    v31 = 1;
    v26 = *(_QWORD *)(v25 - 8);
    if (!v26)
    {
      sub_22E4A06C4();
      sub_22EF853D0();
      return;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v26 + 48))(v26, &v31);
    v24 = (*((_DWORD *)v4 + 6) - 1);
    *((_DWORD *)v4 + 6) = v24;
    v27 = v4[2] + 32 * v24;
    v28 = *(_QWORD **)(v27 + 24);
    if (v28 == (_QWORD *)v27)
    {
      v28 = (_QWORD *)(v4[2] + 32 * v24);
      v29 = 4;
      goto LABEL_40;
    }
    if (v28)
    {
      v29 = 5;
LABEL_40:
      (*(void (**)(void))(*v28 + 8 * v29))();
      goto LABEL_33;
    }
  }
  if (*((char *)v4 + 1087) < 0)
    v30 = v4[134];
  else
    v30 = *((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), v30 - 2, 0);
}

uint64_t sub_22EF853D0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAB60;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  return a1;
}

void sub_22EF8540C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAB60;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF85458(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = off_24FABAB60;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  v2[40] = *(_BYTE *)(a1 + 40);
  v3 = v2 + 48;
  if (*(char *)(a1 + 71) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 48), *(_QWORD *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 48);
    *((_QWORD *)v2 + 8) = *(_QWORD *)(a1 + 64);
  }
  return v2;
}

char *sub_22EF854D4(char *result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _BYTE *v4;
  __int128 v5;

  *(_QWORD *)a2 = off_24FABAB60;
  v2 = *(_OWORD *)(result + 8);
  v3 = *(_OWORD *)(result + 24);
  *(_BYTE *)(a2 + 40) = result[40];
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  v4 = (_BYTE *)(a2 + 48);
  if (result[71] < 0)
    return (char *)sub_22E3BB2B4(v4, *((void **)result + 6), *((_QWORD *)result + 7));
  v5 = *((_OWORD *)result + 3);
  *(_QWORD *)(a2 + 64) = *((_QWORD *)result + 8);
  *(_OWORD *)v4 = v5;
  return result;
}

void sub_22EF85528(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void sub_22EF8553C(void **__p)
{
  if (*((char *)__p + 71) < 0)
    operator delete(__p[6]);
  operator delete(__p);
}

void sub_22EF8556C(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  std::string::value_type v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = (llvm::raw_ostream *)*v4;
  v6 = *(_BYTE **)(*v4 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(*v4 + 24))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = (llvm::raw_ostream *)*v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = (llvm::raw_ostream *)*v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = (llvm::raw_ostream *)*v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (v3)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  v15 = *(_BYTE *)(a1 + 71);
  v16 = v15;
  v17 = v15 & 0x7F;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(_QWORD *)(a1 + 56);
  if (v18)
  {
    if (v16 >= 0)
      v19 = (const char *)(a1 + 48);
    else
      v19 = *(const char **)(a1 + 48);
    v20 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)*v4, v19);
    v21 = (_WORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 1uLL)
    {
      *v21 = 8250;
      *((_QWORD *)v20 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, ": ");
    }
  }
  if (v3)
    v22 = 32;
  else
    v22 = 124;
  std::string::push_back((std::string *)(v4 + 133), v22);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v23 = *((_DWORD *)v4 + 6);
  sub_22EF84A14((uint64_t *)(a1 + 16));
LABEL_33:
  LODWORD(v24) = *((_DWORD *)v4 + 6);
  while (v23 < v24)
  {
    v25 = v4[2] + 32 * v24;
    v31 = 1;
    v26 = *(_QWORD *)(v25 - 8);
    if (!v26)
    {
      sub_22E4A06C4();
      sub_22EF857DC();
      return;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v26 + 48))(v26, &v31);
    v24 = (*((_DWORD *)v4 + 6) - 1);
    *((_DWORD *)v4 + 6) = v24;
    v27 = v4[2] + 32 * v24;
    v28 = *(_QWORD **)(v27 + 24);
    if (v28 == (_QWORD *)v27)
    {
      v28 = (_QWORD *)(v4[2] + 32 * v24);
      v29 = 4;
      goto LABEL_40;
    }
    if (v28)
    {
      v29 = 5;
LABEL_40:
      (*(void (**)(void))(*v28 + 8 * v29))();
      goto LABEL_33;
    }
  }
  if (*((char *)v4 + 1087) < 0)
    v30 = v4[134];
  else
    v30 = *((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), v30 - 2, 0);
}

uint64_t sub_22EF857DC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABABA8;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_22EF85818(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABABA8;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF85864(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = off_24FABABA8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = v2 + 24;
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 24);
    *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  }
  return v2;
}

char *sub_22EF858D0(char *result, uint64_t a2)
{
  _BYTE *v2;
  __int128 v3;

  *(_QWORD *)a2 = off_24FABABA8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = (_BYTE *)(a2 + 24);
  if (result[47] < 0)
    return (char *)sub_22E3BB2B4(v2, *((void **)result + 3), *((_QWORD *)result + 4));
  v3 = *(_OWORD *)(result + 24);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)result + 5);
  *(_OWORD *)v2 = v3;
  return result;
}

void sub_22EF85914(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_22EF85928(void **__p)
{
  if (*((char *)__p + 47) < 0)
    operator delete(__p[3]);
  operator delete(__p);
}

void sub_22EF85958(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  std::string::value_type v22;
  unsigned int v23;
  uint64_t v24;
  llvm::raw_ostream *v25;
  int v26;
  llvm::raw_ostream *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;

  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = (llvm::raw_ostream *)*v4;
  v6 = *(_BYTE **)(*v4 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(*v4 + 24))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = (llvm::raw_ostream *)*v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = (llvm::raw_ostream *)*v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = (llvm::raw_ostream *)*v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (v3)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  v15 = *(_BYTE *)(a1 + 47);
  v16 = v15;
  v17 = v15 & 0x7F;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(_QWORD *)(a1 + 32);
  if (v18)
  {
    if (v16 >= 0)
      v19 = (const char *)(a1 + 24);
    else
      v19 = *(const char **)(a1 + 24);
    v20 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)*v4, v19);
    v21 = (_WORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 1uLL)
    {
      *v21 = 8250;
      *((_QWORD *)v20 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, ": ");
    }
  }
  if (v3)
    v22 = 32;
  else
    v22 = 124;
  std::string::push_back((std::string *)(v4 + 133), v22);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v23 = *((_DWORD *)v4 + 6);
  v24 = *(_QWORD *)(a1 + 16);
  v25 = *(llvm::raw_ostream **)(v24 + 1168);
  v26 = *(unsigned __int8 *)(v24 + 1176);
  v27 = v25;
  if (*(_BYTE *)(v24 + 1176))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v25 + 24))(*(_QWORD *)(v24 + 1168), 2, 1, 0);
    v27 = *(llvm::raw_ostream **)(v24 + 1168);
  }
  v28 = (void *)*((_QWORD *)v27 + 4);
  if (*((_QWORD *)v27 + 3) - (_QWORD)v28 <= 0x17uLL)
  {
    llvm::raw_ostream::write(v27, "<undeserialized lookups>");
    if (!v26)
      goto LABEL_37;
    goto LABEL_36;
  }
  qmemcpy(v28, "<undeserialized lookups>", 24);
  *((_QWORD *)v27 + 4) += 24;
  if (v26)
LABEL_36:
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v25 + 32))(v25);
LABEL_37:
  LODWORD(v29) = *((_DWORD *)v4 + 6);
  if (v23 < v29)
  {
    while (1)
    {
      v30 = v4[2] + 32 * v29;
      v39 = 1;
      v31 = *(_QWORD *)(v30 - 8);
      if (!v31)
      {
        sub_22E4A06C4();
        sub_22EF85C60(v36, v37, v38);
        return;
      }
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v31 + 48))(v31, &v39);
      v29 = (*((_DWORD *)v4 + 6) - 1);
      *((_DWORD *)v4 + 6) = v29;
      v32 = v4[2] + 32 * v29;
      v33 = *(_QWORD **)(v32 + 24);
      if (v33 == (_QWORD *)v32)
        break;
      if (v33)
      {
        v34 = 5;
LABEL_43:
        (*(void (**)(void))(*v33 + 8 * v34))();
        LODWORD(v29) = *((_DWORD *)v4 + 6);
      }
      if (v23 >= v29)
        goto LABEL_45;
    }
    v33 = (_QWORD *)(v4[2] + 32 * v29);
    v34 = 4;
    goto LABEL_43;
  }
LABEL_45:
  if (*((char *)v4 + 1087) < 0)
    v35 = v4[134];
  else
    v35 = *((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), v35 - 2, 0);
}

uint64_t *sub_22EF85C60(uint64_t a1, uint64_t a2, int a3)
{
  char v6;
  int v7;
  uint64_t v8;
  uint64_t *result;

  if (!a2)
    return sub_22F0F8AA0((_QWORD *)(a1 + 8), a2, 0, 0);
  v6 = 0;
  v7 = 0;
  v8 = a2;
  do
  {
    if (sub_22EFD5760(v8) <= 1)
    {
      if (a3)
      {
        sub_22F0F8AA0((_QWORD *)(a1 + 8), v8, 0, 0);
      }
      else if (*(_DWORD *)(a1 + 4) != 1 || (*(_BYTE *)(v8 + 29) & 2) == 0)
      {
        sub_22EF814B0(a1 + 8, a1, v8);
      }
      v6 = 1;
    }
    result = (uint64_t *)(v8 + 96);
    if ((*(_BYTE *)(v8 + 96) & 3) != 0)
    {
      if (v7)
        break;
      v7 = 1;
    }
    result = (uint64_t *)sub_22E3CD31C(result, v8);
    if (result == (uint64_t *)a2)
      break;
    v8 = (uint64_t)result;
  }
  while (result);
  if ((v6 & 1) == 0)
    return sub_22F0F8AA0((_QWORD *)(a1 + 8), a2, 0, 0);
  return result;
}

uint64_t *sub_22EF85D60(uint64_t a1, uint64_t a2, int a3)
{
  char v6;
  int v7;
  unint64_t v8;
  uint64_t *result;

  if (!a2)
    return sub_22F0F8AA0((_QWORD *)(a1 + 8), a2, 0, 0);
  v6 = 0;
  v7 = 0;
  v8 = a2;
  do
  {
    if (sub_22EFBC2B0(v8) <= 1)
    {
      if (a3)
      {
        sub_22F0F8AA0((_QWORD *)(a1 + 8), v8, 0, 0);
      }
      else if (*(_DWORD *)(a1 + 4) != 1 || (*(_BYTE *)(v8 + 29) & 2) == 0)
      {
        sub_22EF814B0(a1 + 8, a1, v8);
      }
      v6 = 1;
    }
    result = (uint64_t *)(v8 + 72);
    if ((*(_BYTE *)(v8 + 72) & 3) != 0)
    {
      if (v7)
        break;
      v7 = 1;
    }
    result = (uint64_t *)sub_22E3CD31C(result, v8);
    if (result == (uint64_t *)a2)
      break;
    v8 = (unint64_t)result;
  }
  while (result);
  if ((v6 & 1) == 0)
    return sub_22F0F8AA0((_QWORD *)(a1 + 8), a2, 0, 0);
  return result;
}

llvm::raw_ostream *sub_22EF85E60(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  llvm::raw_ostream *result;
  uint64_t (**v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _BYTE *v17;
  __int128 v18;
  _QWORD v19[3];
  llvm::raw_ostream *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v18 = a2;
  *((_QWORD *)&v18 + 1) = a3;
  if (!a1[1056])
  {
    if (a1[1057])
    {
      v4 = operator new(0x38uLL);
      *v4 = off_24FABABF0;
      v4[1] = a1;
      *((_OWORD *)v4 + 1) = v18;
      v4[4] = 0;
      *((_BYTE *)v4 + 55) = 0;
      v20 = (llvm::raw_ostream *)v4;
      sub_22E536AAC((uint64_t)(a1 + 16), (unint64_t)v19);
    }
    else
    {
      v5 = *((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6);
      LOBYTE(v19[0]) = 0;
      v6 = *(_QWORD *)(v5 - 8);
      if (!v6)
LABEL_28:
        sub_22E4A06C4();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 48))(v6, v19);
      v7 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6) - 32);
      v8 = operator new(0x38uLL);
      *v8 = off_24FABABF0;
      v8[1] = a1;
      *((_OWORD *)v8 + 1) = v18;
      v8[4] = 0;
      *((_BYTE *)v8 + 55) = 0;
      v20 = (llvm::raw_ostream *)v8;
      sub_22E63BEA4(v19, v7);
    }
    result = v20;
    if (v20 == (llvm::raw_ostream *)v19)
    {
      v10 = (uint64_t (**)(void))(v19[0] + 32);
    }
    else
    {
      if (!v20)
      {
LABEL_11:
        a1[1057] = 0;
        return result;
      }
      v10 = (uint64_t (**)(void))(*(_QWORD *)v20 + 40);
    }
    result = (llvm::raw_ostream *)(*v10)();
    goto LABEL_11;
  }
  a1[1056] = 0;
  sub_22F375154((uint64_t)&v18);
  LODWORD(v11) = *((_DWORD *)a1 + 6);
  if ((_DWORD)v11)
  {
    while (1)
    {
      v12 = *((_QWORD *)a1 + 2) + 32 * v11;
      LOBYTE(v19[0]) = 1;
      v13 = *(_QWORD *)(v12 - 8);
      if (!v13)
        goto LABEL_28;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 48))(v13, v19);
      v11 = (*((_DWORD *)a1 + 6) - 1);
      *((_DWORD *)a1 + 6) = v11;
      v14 = *((_QWORD *)a1 + 2) + 32 * v11;
      v15 = *(_QWORD **)(v14 + 24);
      if (v15 == (_QWORD *)v14)
        break;
      if (v15)
      {
        v16 = 5;
LABEL_19:
        (*(void (**)(void))(*v15 + 8 * v16))();
        LODWORD(v11) = *((_DWORD *)a1 + 6);
      }
      if (!(_DWORD)v11)
        goto LABEL_21;
    }
    v15 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * v11);
    v16 = 4;
    goto LABEL_19;
  }
LABEL_21:
  if ((char)a1[1087] < 0)
  {
    **((_BYTE **)a1 + 133) = 0;
    *((_QWORD *)a1 + 134) = 0;
  }
  else
  {
    a1[1064] = 0;
    a1[1087] = 0;
  }
  result = *(llvm::raw_ostream **)a1;
  v17 = *(_BYTE **)(*(_QWORD *)a1 + 32);
  if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v17)
  {
    result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, "\n");
  }
  else
  {
    *v17 = 10;
    ++*((_QWORD *)result + 4);
  }
  a1[1056] = 1;
  return result;
}

uint64_t sub_22EF860A0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABABF0;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_22EF860DC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABABF0;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF86128(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_24FABABF0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  v3 = v2 + 32;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  }
  return v2;
}

char *sub_22EF8619C(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_24FABABF0;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *((_QWORD *)result + 3);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (_BYTE *)(a2 + 32);
  if (result[55] < 0)
    return (char *)sub_22E3BB2B4(v3, *((void **)result + 4), *((_QWORD *)result + 5));
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)result + 6);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22EF861E8(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_22EF861FC(void **__p)
{
  if (*((char *)__p + 55) < 0)
    operator delete(__p[4]);
  operator delete(__p);
}

uint64_t sub_22EF8622C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _BYTE *v16;
  uint64_t (**v17)(void);
  __int128 v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v18 = a2;
  *((_QWORD *)&v18 + 1) = a3;
  if (!a1[1])
  {
    v11 = *a1;
    if (*a1)
    {
      v12 = operator new(0x40uLL);
      *(_QWORD *)v12 = off_24FABB100;
      v12[8] = v11;
      *((_QWORD *)v12 + 2) = a1;
      *((_QWORD *)v12 + 3) = 0x72656E6E69;
      v12[47] = 5;
      *((_OWORD *)v12 + 3) = v18;
      v20 = v12;
      sub_22E536AAC((uint64_t)(a1 + 8), (unint64_t)v19);
    }
    else
    {
      v13 = *((_QWORD *)a1 + 1) + 32 * *((unsigned int *)a1 + 4);
      LOBYTE(v19[0]) = 0;
      v14 = *(_QWORD *)(v13 - 8);
      if (!v14)
LABEL_22:
        sub_22E4A06C4();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 48))(v14, v19);
      v15 = (_QWORD *)(*((_QWORD *)a1 + 1) + 32 * *((unsigned int *)a1 + 4) - 32);
      v16 = operator new(0x40uLL);
      *(_QWORD *)v16 = off_24FABB100;
      v16[8] = 0;
      *((_QWORD *)v16 + 2) = a1;
      *((_QWORD *)v16 + 3) = 0x72656E6E69;
      v16[47] = 5;
      *((_OWORD *)v16 + 3) = v18;
      v20 = v16;
      sub_22E63BEA4(v19, v15);
    }
    result = (uint64_t)v20;
    if (v20 == v19)
    {
      v17 = (uint64_t (**)(void))(v19[0] + 32);
    }
    else
    {
      if (!v20)
      {
LABEL_20:
        *a1 = 0;
        return result;
      }
      v17 = (uint64_t (**)(void))(*v20 + 40);
    }
    result = (*v17)();
    goto LABEL_20;
  }
  a1[1] = 0;
  llvm::json::OStream::objectBegin((llvm::json::OStream *)(a1 + 1048));
  sub_22EF86450(&v18);
  LODWORD(v4) = *((_DWORD *)a1 + 4);
  if ((_DWORD)v4)
  {
    while (1)
    {
      v5 = *((_QWORD *)a1 + 1) + 32 * v4;
      LOBYTE(v19[0]) = 1;
      v6 = *(_QWORD *)(v5 - 8);
      if (!v6)
        goto LABEL_22;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 48))(v6, v19);
      v4 = (*((_DWORD *)a1 + 4) - 1);
      *((_DWORD *)a1 + 4) = v4;
      v7 = *((_QWORD *)a1 + 1) + 32 * v4;
      v8 = *(_QWORD **)(v7 + 24);
      if (v8 == (_QWORD *)v7)
        break;
      if (v8)
      {
        v9 = 5;
LABEL_8:
        (*(void (**)(void))(*v8 + 8 * v9))();
        LODWORD(v4) = *((_DWORD *)a1 + 4);
      }
      if (!(_DWORD)v4)
        goto LABEL_10;
    }
    v8 = (_QWORD *)(*((_QWORD *)a1 + 1) + 32 * v4);
    v9 = 4;
    goto LABEL_8;
  }
LABEL_10:
  result = llvm::json::OStream::objectEnd((llvm::json::OStream *)(a1 + 1048));
  a1[1] = 1;
  return result;
}

void sub_22EF86450(_QWORD *a1)
{
  sub_22F08ED54(*a1 + 8, a1[1]);
  if (a1[1])
    __asm { BR              X10 }
}

_BYTE *sub_22EF864BC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int i;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  BOOL v21;
  unint64_t **v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27[11];

  v3 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v3 + 29) & 1) != 0)
  {
    sub_22EFC8E88(*(_QWORD *)(v1 + 8));
    v23 = *v22;
    if ((*(_BYTE *)(v3 + 29) & 1) != 0)
    {
      sub_22EFC8E88(v3);
      v25 = *(_QWORD *)v24 + 8 * *(unsigned int *)(v24 + 8);
    }
    else
    {
      v25 = 0;
    }
    while (v23 != (unint64_t *)v25)
    {
      v26 = *v23++;
      sub_22EF8C12C(v2, v0, v26);
    }
  }
  v4 = *(_QWORD *)(v1 + 8);
  if (!v4 || (v5 = *(_QWORD *)(v1 + 8), (*(_DWORD *)(v4 + 28) & 0x7F) != 0x53))
  {
    v6 = *(_QWORD *)(v4 + 16);
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    if ((v6 & 4) != 0)
      v7 = *(_QWORD *)v7;
    for (i = *(_WORD *)(v7 + 8) & 0x7F; i != 83; i = *(_WORD *)(v7 + 8) & 0x7F)
    {
      v9 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v9 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_17;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_16;
        if (i == 16)
          goto LABEL_10;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_23;
        if (i == 24)
        {
LABEL_10:
          v9 = -48;
        }
        else
        {
LABEL_16:
          if (i != 70)
          {
LABEL_17:
            v10 = i - 52;
            if ((i - 33) >= 5)
              v11 = -48;
            else
              v11 = -64;
            if (v10 >= 6)
              v9 = v11;
            else
              v9 = -72;
            goto LABEL_23;
          }
          v9 = -64;
        }
      }
LABEL_23:
      v12 = *(_QWORD *)(v7 + v9 + 16);
      v7 = v12 & 0xFFFFFFFFFFFFFFF8;
      if ((v12 & 4) != 0)
        v7 = *(_QWORD *)v7;
    }
    v5 = v7 - 40;
  }
  v13 = sub_22F365440(*(_QWORD *)(v5 + 88), v4);
  if (v13)
  {
    v27[0] = v0;
    v27[1] = (uint64_t)v13;
    v27[2] = (uint64_t)v13;
    sub_22EF8C8A4(v2, v27);
  }
  v14 = *(_QWORD *)(v1 + 8);
  v15 = *(_DWORD *)(v14 + 28) & 0x7F;
  v16 = v15 != 24 && (*(_DWORD *)(v14 + 28) & 0x7Eu) - 52 >= 6;
  if (!v16
    || ((*(_DWORD *)(v14 + 28) & 0x7E) == 0x24 ? (v17 = *(_DWORD *)(v0 + 4) == 0) : (v17 = 1),
        !v17 && (*(_BYTE *)(v14 + 180) & 7u) - 5 > 0xFFFFFFFD
     || (v15 <= 0x39 ? (v18 = ((1 << v15) & 0x3F0003E01011066) == 0) : (v18 = 1),
         v18 && (v15 - 70 <= 0xD ? (v21 = ((1 << (v15 - 70)) & 0x2803) == 0) : (v21 = 1), v21 && v15 - 19 > 4))))
  {
    JUMPOUT(0x22EF86484);
  }
  v19 = sub_22EFCAE04(v14);
  return sub_22F3753F8((_BYTE *)v0, v19);
}

uint64_t sub_22EF86AFC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;

  v2 = result;
  v3 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (v3 <= 0x2F && ((1 << v3) & 0xC00000060000) != 0)
  {
    result = sub_22EFBAEA4(a2);
    a2 = result;
    v3 = *(_DWORD *)(result + 28) & 0x7F;
  }
  if (v3 - 43 >= 0xFFFFFFF6)
    return sub_22EF89198((char *)(v2 + 8), v2, *(_QWORD *)(a2 + 48));
  return result;
}

void sub_22EF86B74(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;

  if ((*(_BYTE *)(a2 + 68) & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
    v5 = *(_QWORD *)(a2 + 72) & 3;
    if ((_DWORD)v5)
      v6 = (_DWORD)v5 == 3;
    else
      v6 = 1;
    if (!v6)
      v4 = *(_QWORD *)(v4 + 8);
    sub_22EF87230((unsigned __int8 *)(a1 + 8), 0, 0, v4, a1);
  }
  v7 = *(_QWORD *)(a2 + 72) & 3;
  if ((_DWORD)v7)
    v8 = (_DWORD)v7 == 3;
  else
    v8 = 1;
  if (!v8)
  {
    v9 = (_QWORD *)(*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL);
    if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      v9 = (_QWORD *)*v9;
    if (v9)
      sub_22EF87230((unsigned __int8 *)(a1 + 8), 0, 0, (uint64_t)v9, a1);
  }
}

void sub_22EF86C10(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(a2 + 144) & 6) == 4 && v4 != 0)
    sub_22F37776C(a1, *(_QWORD *)(v4 + 24));
  v6 = *(_QWORD *)(a2 + 120);
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v7)
    v8 = *(_BYTE *)(v7 + 16) == 26;
  else
    v8 = 0;
  if (!v8 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
    sub_22F10CF48(v7);
  if (v6)
  {
    v9 = *(uint64_t **)(a2 + 120);
    v10 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
    v11 = v10 && *(_BYTE *)(v10 + 16) == 26;
    if (v11
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
      && (v10 = sub_22F10CF48(v10)) != 0)
    {
      v12 = *(_QWORD *)(v10 + 16);
      if ((v12 & 0x3FFFC000000000) != 0)
      {
        v13 = 8 * (unsigned __int16)(v12 >> 38);
        do
        {
          v14 = *v9;
          if (*(_DWORD *)(a1 + 4) != 1 || (*(_BYTE *)(v14 + 29) & 2) == 0)
            sub_22EF8622C(a1 + 8, a1, v14);
          ++v9;
          v13 -= 8;
        }
        while (v13);
      }
    }
  }
  v15 = *(_QWORD *)(a2 + 56);
  if ((v15 & 4) != 0)
  {
    v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 40);
    if (v16)
      sub_22EF87230((unsigned __int8 *)(a1 + 8), 0, 0, v16, a1);
  }
  if (*(_DWORD *)(a1 + 4) != 1 || (*(_BYTE *)(a2 + 83) & 2) == 0)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x37)
    {
      v17 = (uint64_t *)sub_22EFD7ED0(a2);
      for (i = sub_22EFD7ED0(a2) + 8 * ((*(_QWORD *)(a2 + 80) >> 40) & 0x1FFFFFLL); v17 != (uint64_t *)i; ++v17)
      {
        v19 = *v17;
        if (*(_DWORD *)(a1 + 4) != 1 || (*(_WORD *)(v19 + 28) & 4) != 0)
          sub_22EF8A54C((char *)(a1 + 8), a1, (uint64_t *)v19);
      }
    }
    v20 = *(_QWORD *)(a2 + 80);
    if ((v20 & 0x8000000) != 0)
    {
      if ((v20 & 0x20000000) != 0)
        goto LABEL_36;
    }
    else if (*(_QWORD *)(a2 + 128) | *(_QWORD *)(a2 + 80) & 0x20000000)
    {
LABEL_36:
      v21 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
      sub_22EF87230((unsigned __int8 *)(a1 + 8), 0, 0, v21, a1);
    }
  }
}

uint64_t sub_22EF86E34(char *a1, uint64_t *a2)
{
  _QWORD *v4;
  char v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  uint64_t result;
  uint64_t (**v12)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 8;
  if (a1[1])
  {
    a1[1] = 0;
    llvm::json::OStream::objectBegin((llvm::json::OStream *)(a1 + 1048));
    sub_22F375B00(a2);
    LODWORD(v13) = *((_DWORD *)a1 + 4);
    if (!(_DWORD)v13)
    {
LABEL_21:
      result = llvm::json::OStream::objectEnd((llvm::json::OStream *)(a1 + 1048));
      a1[1] = 1;
      return result;
    }
    while (1)
    {
      v14 = *v4 + 32 * v13;
      LOBYTE(v21[0]) = 1;
      v15 = *(_QWORD *)(v14 - 8);
      if (!v15)
        goto LABEL_22;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v15 + 48))(v15, v21);
      v13 = (*((_DWORD *)a1 + 4) - 1);
      *((_DWORD *)a1 + 4) = v13;
      v16 = *((_QWORD *)a1 + 1) + 32 * v13;
      v17 = *(_QWORD **)(v16 + 24);
      if (v17 == (_QWORD *)v16)
        break;
      if (v17)
      {
        v18 = 5;
LABEL_19:
        (*(void (**)(void))(*v17 + 8 * v18))();
        LODWORD(v13) = *((_DWORD *)a1 + 4);
      }
      if (!(_DWORD)v13)
        goto LABEL_21;
    }
    v17 = (_QWORD *)(*((_QWORD *)a1 + 1) + 32 * v13);
    v18 = 4;
    goto LABEL_19;
  }
  v5 = *a1;
  v19 = *(_OWORD *)a2;
  v20 = a2[2];
  if (*a1)
  {
    v6 = operator new(0x48uLL);
    *(_QWORD *)v6 = off_24FABAC38;
    v6[8] = v5;
    *((_QWORD *)v6 + 2) = a1;
    *((_QWORD *)v6 + 3) = 0x72656E6E69;
    v6[47] = 5;
    *((_OWORD *)v6 + 3) = *(_OWORD *)a2;
    *((_QWORD *)v6 + 8) = a2[2];
    v22 = v6;
    sub_22E536AAC((uint64_t)v4, (unint64_t)v21);
  }
  else
  {
    v7 = *((_QWORD *)a1 + 1) + 32 * *((unsigned int *)a1 + 4);
    LOBYTE(v21[0]) = 0;
    v8 = *(_QWORD *)(v7 - 8);
    if (!v8)
LABEL_22:
      sub_22E4A06C4();
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 48))(v8, v21);
    v9 = (_QWORD *)(*((_QWORD *)a1 + 1) + 32 * *((unsigned int *)a1 + 4) - 32);
    v10 = operator new(0x48uLL);
    *(_QWORD *)v10 = off_24FABAC38;
    v10[8] = 0;
    *((_QWORD *)v10 + 2) = a1;
    *((_QWORD *)v10 + 3) = 0x72656E6E69;
    v10[47] = 5;
    *((_OWORD *)v10 + 3) = v19;
    *((_QWORD *)v10 + 8) = v20;
    v22 = v10;
    sub_22E63BEA4(v21, v9);
  }
  result = (uint64_t)v22;
  if (v22 == v21)
  {
    v12 = (uint64_t (**)(void))(v21[0] + 32);
    goto LABEL_10;
  }
  if (v22)
  {
    v12 = (uint64_t (**)(void))(*v22 + 40);
LABEL_10:
    result = (*v12)();
  }
  *a1 = 0;
  return result;
}

uint64_t sub_22EF87078(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAC38;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_22EF870B4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAC38;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF87100(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = off_24FABAC38;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = v2 + 24;
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 24);
    *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  }
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  *((_QWORD *)v2 + 8) = *(_QWORD *)(a1 + 64);
  return v2;
}

__n128 sub_22EF8717C(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = off_24FABAC38;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = (_BYTE *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v4, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    *(_OWORD *)v4 = v5;
  }
  result = *(__n128 *)(a1 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

void sub_22EF871EC(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_22EF87200(void **__p)
{
  if (*((char *)__p + 47) < 0)
    operator delete(__p[3]);
  operator delete(__p);
}

void sub_22EF87230(unsigned __int8 *a1, const char *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  size_t v12;
  const char *v13;
  __int128 *p_dst;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  void *v19;
  char v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  void (**v24)(_QWORD *);
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  char v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  void *__p[3];
  __int128 v34;
  __int128 __dst;
  void *v36;
  __int128 v37;
  _QWORD v38[2];
  _QWORD v39[2];
  _QWORD v40[3];
  _QWORD *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v37 = a4;
  *((_QWORD *)&v37 + 1) = a5;
  if (!a1[1])
  {
    if (a3)
      v12 = a3;
    else
      v12 = 5;
    if (a3)
      v13 = a2;
    else
      v13 = "inner";
    if (v12 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v12 >= 0x17)
    {
      v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v15 = v12 | 7;
      v16 = v15 + 1;
      p_dst = (__int128 *)operator new(v15 + 1);
      *((_QWORD *)&__dst + 1) = v12;
      v36 = (void *)(v16 | 0x8000000000000000);
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v36) = v12;
      p_dst = &__dst;
    }
    memmove(p_dst, v13, v12);
    *((_BYTE *)p_dst + v12) = 0;
    v17 = *a1;
    LOBYTE(v32) = *a1;
    *((_QWORD *)&v32 + 1) = a1;
    v18 = SHIBYTE(v36);
    if (SHIBYTE(v36) < 0)
    {
      sub_22E3BB2B4(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
      v17 = *a1;
    }
    else
    {
      *(_OWORD *)__p = __dst;
      __p[2] = v36;
    }
    v34 = v37;
    if (v17)
    {
      v19 = __p[0];
      v38[0] = __p[1];
      *(void **)((char *)v38 + 7) = *(void **)((char *)&__p[1] + 7);
      v20 = HIBYTE(__p[2]);
      memset(__p, 0, sizeof(__p));
      v21 = (char *)operator new(0x40uLL);
      *(_QWORD *)v21 = off_24FABAE30;
      *(_OWORD *)(v21 + 8) = v32;
      v22 = v38[0];
      *((_QWORD *)v21 + 3) = v19;
      *((_QWORD *)v21 + 4) = v22;
      *(_QWORD *)(v21 + 39) = *(_QWORD *)((char *)v38 + 7);
      v21[47] = v20;
      *((_OWORD *)v21 + 3) = v37;
      v41 = v21;
      sub_22E536AAC((uint64_t)(a1 + 8), (unint64_t)v40);
      v23 = v41;
      if (v41 != v40)
      {
LABEL_28:
        if (!v23)
          goto LABEL_34;
        v24 = (void (**)(_QWORD *))(*v23 + 40);
LABEL_33:
        (*v24)(v23);
LABEL_34:
        *a1 = 0;
        if (SHIBYTE(__p[2]) < 0)
        {
          operator delete(__p[0]);
          if ((v18 & 0x80000000) == 0)
            return;
        }
        else if ((v18 & 0x80000000) == 0)
        {
          return;
        }
        operator delete((void *)__dst);
        return;
      }
    }
    else
    {
      v25 = *((_QWORD *)a1 + 1) + 32 * *((unsigned int *)a1 + 4);
      LOBYTE(v40[0]) = 0;
      v26 = *(_QWORD *)(v25 - 8);
      if (!v26)
LABEL_39:
        sub_22E4A06C4();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v26 + 48))(v26, v40);
      v27 = (_QWORD *)(*((_QWORD *)a1 + 1) + 32 * *((unsigned int *)a1 + 4) - 32);
      v28 = __p[0];
      v39[0] = __p[1];
      *(void **)((char *)v39 + 7) = *(void **)((char *)&__p[1] + 7);
      v29 = HIBYTE(__p[2]);
      memset(__p, 0, sizeof(__p));
      v30 = (char *)operator new(0x40uLL);
      *(_QWORD *)v30 = off_24FABAE30;
      *(_OWORD *)(v30 + 8) = v32;
      v31 = v39[0];
      *((_QWORD *)v30 + 3) = v28;
      *((_QWORD *)v30 + 4) = v31;
      *(_QWORD *)(v30 + 39) = *(_QWORD *)((char *)v39 + 7);
      v30[47] = v29;
      *((_OWORD *)v30 + 3) = v34;
      v41 = v30;
      sub_22E63BEA4(v40, v27);
      v23 = v41;
      if (v41 != v40)
        goto LABEL_28;
    }
    v24 = (void (**)(_QWORD *))(v40[0] + 32);
    v23 = v40;
    goto LABEL_33;
  }
  a1[1] = 0;
  llvm::json::OStream::objectBegin((llvm::json::OStream *)(a1 + 1048));
  sub_22EF8759C((uint64_t)&v37);
  LODWORD(v6) = *((_DWORD *)a1 + 4);
  if ((_DWORD)v6)
  {
    while (1)
    {
      v7 = *((_QWORD *)a1 + 1) + 32 * v6;
      LOBYTE(v32) = 1;
      v8 = *(_QWORD *)(v7 - 8);
      if (!v8)
        goto LABEL_39;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v8 + 48))(v8, &v32);
      v6 = (*((_DWORD *)a1 + 4) - 1);
      *((_DWORD *)a1 + 4) = v6;
      v9 = *((_QWORD *)a1 + 1) + 32 * v6;
      v10 = *(_QWORD **)(v9 + 24);
      if (v10 == (_QWORD *)v9)
        break;
      if (v10)
      {
        v11 = 5;
LABEL_8:
        (*(void (**)(void))(*v10 + 8 * v11))();
        LODWORD(v6) = *((_DWORD *)a1 + 4);
      }
      if (!(_DWORD)v6)
        goto LABEL_10;
    }
    v10 = (_QWORD *)(*((_QWORD *)a1 + 1) + 32 * v6);
    v11 = 4;
    goto LABEL_8;
  }
LABEL_10:
  llvm::json::OStream::objectEnd((llvm::json::OStream *)(a1 + 1048));
  a1[1] = 1;
}

void sub_22EF8759C(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(unsigned __int8 **)a1;
  v1 = *(_QWORD *)(a1 + 8);
  if (!*(_QWORD *)a1)
  {
    sub_22F08CB28(v1 + 8, 0);
    return;
  }
  if (*v2 - 102 <= 0x84 && *(_DWORD *)(v1 + 4) == 1)
  {
    v2 = sub_22EFFF5EC(*(unsigned __int8 **)a1);
    v3 = v1 + 8;
    sub_22F08CB28(v1 + 8, v2);
    if (!v2)
      return;
  }
  else
  {
    v3 = v1 + 8;
    sub_22F08CB28(v1 + 8, v2);
  }
  v4 = *v2;
  if ((v4 & 0xFE) == 0x70)
  {
    if ((*(_DWORD *)v2 & 0xFC0000u) < 0x840000)
    {
      v4 = *v2;
      if (v4 == 12 || v4 == 176 || v4 == 219)
        return;
      goto LABEL_16;
    }
LABEL_12:
    __asm { BR              X10 }
  }
  if (v4 != 233)
    goto LABEL_12;
LABEL_16:
  if (*(_DWORD *)(v1 + 4) != 1
    || ((v4 - 130) > 0x34 || ((1 << (v4 + 126)) & 0x10000000001F01) == 0) && v4 != 5)
  {
    sub_22F0D492C((uint64_t)v2);
    v11 = v13;
    v5 = v15;
    v12 = v14;
    v6 = *((_QWORD *)&v15 + 1);
    v7 = *((_QWORD *)&v13 + 1);
    v8 = (uint64_t *)v13;
    if (v13 != v15)
    {
      do
      {
        if ((v7 & 3) != 0)
        {
          if ((v7 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            v9 = (_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + 40);
          else
            v9 = (_QWORD *)sub_22F3AC1A8(*v8);
          sub_22EF87230(v3, 0, 0, *v9, v1);
          if (v7 >= 4)
            sub_22F0D8720((uint64_t)&v11);
          else
            sub_22F3F2FE0((uint64_t)&v11, 1);
        }
        else
        {
          sub_22EF87230(v3, 0, 0, *v8, v1);
          *(_QWORD *)&v11 = v8 + 1;
        }
        v7 = *((_QWORD *)&v11 + 1);
        v8 = (uint64_t *)v11;
      }
      while ((_QWORD)v11 != v5 || *((_QWORD *)&v11 + 1) != v6);
    }
  }
}

void sub_22EF886C0(uint64_t a1, unsigned int *a2)
{
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _OWORD v16[3];
  uint64_t v17;
  __int128 v18;

  v3 = *a2;
  v4 = (char *)a2 + (v3 >> 24);
  v5 = a2[4];
  v12 = (unint64_t)v4;
  *((_QWORD *)&v13 + 1) = &v4[8 * ((v3 >> 18) & 1) + 8 + 8 * v5];
  *(_QWORD *)&v14 = 0;
  sub_22F3763E8((uint64_t)v16, &v12, a1);
  v12 = v16[0];
  v13 = v16[1];
  v14 = v16[2];
  v6 = v18;
  v15 = v17;
  v7 = *((_QWORD *)&v18 + 1);
  v8 = *((_QWORD *)&v16[0] + 1);
  v9 = *(uint64_t **)&v16[0];
  if (v16[0] != v18)
  {
    do
    {
      if ((v8 & 3) != 0)
      {
        if ((v8 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v10 = (_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v10 = (_QWORD *)sub_22F3AC1A8(*v9);
        sub_22EF87230(a1 + 8, 0, 0, *v10, a1);
        if (v8 >= 4)
          sub_22F0D8720((uint64_t)&v12);
        else
          sub_22F3F2FE0((uint64_t)&v12, 1);
      }
      else
      {
        sub_22EF87230(a1 + 8, 0, 0, *v9, a1);
        *(_QWORD *)&v12 = v9 + 1;
      }
      sub_22EF88D74((uint64_t **)&v12);
      v8 = *((_QWORD *)&v12 + 1);
      v9 = (uint64_t *)v12;
    }
    while ((_QWORD)v12 != v6 || *((_QWORD *)&v12 + 1) != v7);
  }
}

__int128 *sub_22EF887EC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 *result;
  char v17;
  _BYTE *v18;
  uint64_t (**v19)(__int128 *);
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _BYTE *v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (!a1[1])
  {
    v17 = *a1;
    if (*a1)
    {
      v18 = operator new(0x40uLL);
      *(_QWORD *)v18 = off_24FABAC80;
      v18[8] = v17;
      *((_QWORD *)v18 + 2) = a1;
      *((_QWORD *)v18 + 3) = 0x72656E6E69;
      v18[47] = 5;
      *((_QWORD *)v18 + 6) = a2;
      *((_QWORD *)v18 + 7) = a3;
      *(_QWORD *)&v30 = v18;
      sub_22E536AAC((uint64_t)(a1 + 8), (unint64_t)&v28);
      result = (__int128 *)v30;
      if ((__int128 *)v30 != &v28)
      {
LABEL_14:
        if (!result)
        {
LABEL_34:
          *a1 = 0;
          return result;
        }
        v19 = (uint64_t (**)(__int128 *))(*(_QWORD *)result + 40);
LABEL_33:
        result = (__int128 *)(*v19)(result);
        goto LABEL_34;
      }
    }
    else
    {
      v22 = *((_QWORD *)a1 + 1) + 32 * *((unsigned int *)a1 + 4);
      LOBYTE(v28) = 0;
      v23 = *(_QWORD *)(v22 - 8);
      if (!v23)
LABEL_35:
        sub_22E4A06C4();
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v23 + 48))(v23, &v28);
      v24 = (_QWORD *)(*((_QWORD *)a1 + 1) + 32 * *((unsigned int *)a1 + 4) - 32);
      v25 = operator new(0x40uLL);
      *(_QWORD *)v25 = off_24FABAC80;
      v25[8] = 0;
      *((_QWORD *)v25 + 2) = a1;
      *((_QWORD *)v25 + 3) = 0x72656E6E69;
      v25[47] = 5;
      *((_QWORD *)v25 + 6) = a2;
      *((_QWORD *)v25 + 7) = a3;
      *(_QWORD *)&v30 = v25;
      sub_22E63BEA4(&v28, v24);
      result = (__int128 *)v30;
      if ((__int128 *)v30 != &v28)
        goto LABEL_14;
    }
    v19 = (uint64_t (**)(__int128 *))(v28 + 32);
    result = &v28;
    goto LABEL_33;
  }
  a1[1] = 0;
  llvm::json::OStream::objectBegin((llvm::json::OStream *)(a1 + 1048));
  sub_22F3E9FA4(a3);
  v26 = v28;
  v6 = v30;
  v27 = v29;
  v7 = *((_QWORD *)&v30 + 1);
  v8 = *((_QWORD *)&v28 + 1);
  v9 = (uint64_t *)v28;
  if (v28 != v30)
  {
    do
    {
      if ((v8 & 3) != 0)
      {
        if ((v8 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v20 = (_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v20 = (_QWORD *)sub_22F3AC1A8(*v9);
        sub_22EF87230(a2 + 8, 0, 0, *v20, a2);
        if (v8 >= 4)
          sub_22F0D8720((uint64_t)&v26);
        else
          sub_22F3F2FE0((uint64_t)&v26, 1);
      }
      else
      {
        sub_22EF87230(a2 + 8, 0, 0, *v9, a2);
        *(_QWORD *)&v26 = v9 + 1;
      }
      v8 = *((_QWORD *)&v26 + 1);
      v9 = (uint64_t *)v26;
    }
    while ((_QWORD)v26 != v6 || *((_QWORD *)&v26 + 1) != v7);
  }
  LODWORD(v10) = *((_DWORD *)a1 + 4);
  if ((_DWORD)v10)
  {
    while (1)
    {
      v11 = *((_QWORD *)a1 + 1) + 32 * v10;
      LOBYTE(v28) = 1;
      v12 = *(_QWORD *)(v11 - 8);
      if (!v12)
        goto LABEL_35;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v12 + 48))(v12, &v28);
      v10 = (*((_DWORD *)a1 + 4) - 1);
      *((_DWORD *)a1 + 4) = v10;
      v13 = *((_QWORD *)a1 + 1) + 32 * v10;
      v14 = *(_QWORD **)(v13 + 24);
      if (v14 == (_QWORD *)v13)
        break;
      if (v14)
      {
        v15 = 5;
LABEL_9:
        (*(void (**)(void))(*v14 + 8 * v15))();
        LODWORD(v10) = *((_DWORD *)a1 + 4);
      }
      if (!(_DWORD)v10)
        goto LABEL_11;
    }
    v14 = (_QWORD *)(*((_QWORD *)a1 + 1) + 32 * v10);
    v15 = 4;
    goto LABEL_9;
  }
LABEL_11:
  result = (__int128 *)llvm::json::OStream::objectEnd((llvm::json::OStream *)(a1 + 1048));
  a1[1] = 1;
  return result;
}

void sub_22EF88ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v8;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_22F3E9FA4(a2);
  v10 = v12;
  v3 = v14;
  v11 = v13;
  v4 = v15;
  v5 = *((_QWORD *)&v12 + 1);
  v6 = (uint64_t *)v12;
  if ((_QWORD)v12 != v14 || *((_QWORD *)&v12 + 1) != v15)
  {
    do
    {
      if ((v5 & 3) != 0)
      {
        if ((v5 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v8 = (uint64_t *)((v5 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v8 = (uint64_t *)sub_22F3AC1A8(*v6);
        sub_22EF87230((unsigned __int8 *)(a1 + 8), 0, 0, *v8, a1);
        if (v5 >= 4)
          sub_22F0D8720((uint64_t)&v10);
        else
          sub_22F3F2FE0((uint64_t)&v10, 1);
      }
      else
      {
        sub_22EF87230((unsigned __int8 *)(a1 + 8), 0, 0, *v6, a1);
        *(_QWORD *)&v10 = v6 + 1;
      }
      v5 = *((_QWORD *)&v10 + 1);
      v6 = (uint64_t *)v10;
    }
    while ((_QWORD)v10 != v3 || *((_QWORD *)&v10 + 1) != v4);
  }
}

uint64_t sub_22EF88BCC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAC80;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_22EF88C08(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAC80;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF88C54(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = off_24FABAC80;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = v2 + 24;
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 24);
    *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  }
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  return v2;
}

__n128 sub_22EF88CC8(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = off_24FABAC80;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = (_BYTE *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v4, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    *(_OWORD *)v4 = v5;
  }
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

void sub_22EF88D30(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_22EF88D44(void **__p)
{
  if (*((char *)__p + 47) < 0)
    operator delete(__p[3]);
  operator delete(__p);
}

uint64_t *sub_22EF88D74(uint64_t **a1)
{
  uint64_t *result;
  uint64_t *v3;
  unint64_t v5;
  unint64_t v6;

  result = *a1;
  v3 = a1[1];
  if (result != a1[3] || v3 != a1[4])
  {
    do
    {
      if ((v3 & 3) != 0)
      {
        v5 = (unint64_t)v3 & 0xFFFFFFFFFFFFFFFCLL;
        if (v5)
          result = (uint64_t *)(v5 + 40);
        else
          result = (uint64_t *)sub_22F3AC1A8(*result);
      }
      if (*((_DWORD *)a1[6] + 1) == 1 && *(_BYTE *)*result != 120)
        break;
      v6 = (unint64_t)a1[1];
      if ((v6 & 3) != 0)
      {
        if (v6 >= 4)
          sub_22F0D8720((uint64_t)a1);
        else
          sub_22F3F2FE0((uint64_t)a1, 1);
      }
      else
      {
        ++*a1;
      }
      result = *a1;
      v3 = a1[1];
    }
    while (*a1 != a1[3] || v3 != a1[4]);
  }
  return result;
}

uint64_t sub_22EF88E40(unsigned __int8 *a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  __int128 v13;
  uint64_t result;
  uint64_t (**v15)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 8;
  if (a1[1])
  {
    a1[1] = 0;
    llvm::json::OStream::objectBegin((llvm::json::OStream *)(a1 + 1048));
    sub_22F376498(a2);
    LODWORD(v16) = *((_DWORD *)a1 + 4);
    if (!(_DWORD)v16)
    {
LABEL_21:
      result = llvm::json::OStream::objectEnd((llvm::json::OStream *)(a1 + 1048));
      a1[1] = 1;
      return result;
    }
    while (1)
    {
      v17 = *v4 + 32 * v16;
      LOBYTE(v22) = 1;
      v18 = *(_QWORD *)(v17 - 8);
      if (!v18)
        goto LABEL_22;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v18 + 48))(v18, &v22);
      v16 = (*((_DWORD *)a1 + 4) - 1);
      *((_DWORD *)a1 + 4) = v16;
      v19 = *((_QWORD *)a1 + 1) + 32 * v16;
      v20 = *(_QWORD **)(v19 + 24);
      if (v20 == (_QWORD *)v19)
        break;
      if (v20)
      {
        v21 = 5;
LABEL_19:
        (*(void (**)(_QWORD *))(*v20 + 8 * v21))(v20);
        LODWORD(v16) = *((_DWORD *)a1 + 4);
      }
      if (!(_DWORD)v16)
        goto LABEL_21;
    }
    v20 = (_QWORD *)(*((_QWORD *)a1 + 1) + 32 * v16);
    v21 = 4;
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = *(_OWORD *)(a2 + 16);
  v22 = *(_OWORD *)a2;
  v23 = v6;
  v24 = *(_OWORD *)(a2 + 32);
  v25 = *(_QWORD *)(a2 + 48);
  if (v5)
  {
    v7 = operator new(0x68uLL);
    *(_QWORD *)v7 = off_24FABAD58;
    v7[8] = v5;
    *((_QWORD *)v7 + 2) = a1;
    *((_QWORD *)v7 + 3) = 0x72656E6E69;
    v7[47] = 5;
    v8 = *(_OWORD *)(a2 + 16);
    *((_OWORD *)v7 + 3) = *(_OWORD *)a2;
    *((_OWORD *)v7 + 4) = v8;
    *((_OWORD *)v7 + 5) = *(_OWORD *)(a2 + 32);
    *((_QWORD *)v7 + 12) = *(_QWORD *)(a2 + 48);
    v27 = v7;
    sub_22E536AAC((uint64_t)v4, (unint64_t)v26);
  }
  else
  {
    v9 = *((_QWORD *)a1 + 1) + 32 * *((unsigned int *)a1 + 4);
    LOBYTE(v26[0]) = 0;
    v10 = *(_QWORD *)(v9 - 8);
    if (!v10)
LABEL_22:
      sub_22E4A06C4();
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 48))(v10, v26);
    v11 = (_QWORD *)(*((_QWORD *)a1 + 1) + 32 * *((unsigned int *)a1 + 4) - 32);
    v12 = operator new(0x68uLL);
    *(_QWORD *)v12 = off_24FABAD58;
    v12[8] = 0;
    *((_QWORD *)v12 + 2) = a1;
    *((_QWORD *)v12 + 3) = 0x72656E6E69;
    v12[47] = 5;
    v13 = v23;
    *((_OWORD *)v12 + 3) = v22;
    *((_OWORD *)v12 + 4) = v13;
    *((_OWORD *)v12 + 5) = v24;
    *((_QWORD *)v12 + 12) = v25;
    v27 = v12;
    sub_22E63BEA4(v26, v11);
  }
  result = (uint64_t)v27;
  if (v27 == v26)
  {
    v15 = (uint64_t (**)(void))(v26[0] + 32);
    goto LABEL_10;
  }
  if (v27)
  {
    v15 = (uint64_t (**)(void))(*v27 + 40);
LABEL_10:
    result = (*v15)();
  }
  *a1 = 0;
  return result;
}

void sub_22EF8909C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_22EF890EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_22EF87230((unsigned __int8 *)(v2 + 8), 0, 0, *(_QWORD *)(a2 + 8), v2);
}

void sub_22EF89118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;

  v18 = *(unsigned int *)(a2 + 4);
  if ((_DWORD)v18)
  {
    v19 = *(__int128 **)(a2 + 8);
    v20 = 24 * v18;
    do
    {
      v22 = *v19;
      v21 = *((_QWORD *)v19 + 2);
      a12 = v17;
      a13 = v22;
      a14 = v21;
      a16 = 0;
      a17 = 0;
      a15 = 0;
      sub_22EF88E40((unsigned __int8 *)(v17 + 8), (uint64_t)&a12);
      v19 = (__int128 *)((char *)v19 + 24);
      v20 -= 24;
    }
    while (v20);
  }
  sub_22EF890D4();
}

uint64_t sub_22EF89178(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_22F37650C(v2, *(_QWORD *)(a2 + 8));
}

uint64_t sub_22EF89198(char *a1, uint64_t a2, uint64_t a3)
{
  char v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _BYTE *v9;
  uint64_t result;
  uint64_t (**v11)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v18 = a2;
  *((_QWORD *)&v18 + 1) = a3;
  if (a1[1])
  {
    a1[1] = 0;
    llvm::json::OStream::objectBegin((llvm::json::OStream *)(a1 + 1048));
    sub_22F376550((uint64_t)&v18);
    LODWORD(v12) = *((_DWORD *)a1 + 4);
    if (!(_DWORD)v12)
    {
LABEL_21:
      result = llvm::json::OStream::objectEnd((llvm::json::OStream *)(a1 + 1048));
      a1[1] = 1;
      return result;
    }
    while (1)
    {
      v13 = *((_QWORD *)a1 + 1) + 32 * v12;
      LOBYTE(v19[0]) = 1;
      v14 = *(_QWORD *)(v13 - 8);
      if (!v14)
        goto LABEL_22;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 48))(v14, v19);
      v12 = (*((_DWORD *)a1 + 4) - 1);
      *((_DWORD *)a1 + 4) = v12;
      v15 = *((_QWORD *)a1 + 1) + 32 * v12;
      v16 = *(_QWORD **)(v15 + 24);
      if (v16 == (_QWORD *)v15)
        break;
      if (v16)
      {
        v17 = 5;
LABEL_19:
        (*(void (**)(void))(*v16 + 8 * v17))();
        LODWORD(v12) = *((_DWORD *)a1 + 4);
      }
      if (!(_DWORD)v12)
        goto LABEL_21;
    }
    v16 = (_QWORD *)(*((_QWORD *)a1 + 1) + 32 * v12);
    v17 = 4;
    goto LABEL_19;
  }
  v4 = *a1;
  if (*a1)
  {
    v5 = operator new(0x40uLL);
    *(_QWORD *)v5 = off_24FABACC8;
    v5[8] = v4;
    *((_QWORD *)v5 + 2) = a1;
    *((_QWORD *)v5 + 3) = 0x72656E6E69;
    v5[47] = 5;
    *((_OWORD *)v5 + 3) = v18;
    v20 = v5;
    sub_22E536AAC((uint64_t)(a1 + 8), (unint64_t)v19);
  }
  else
  {
    v6 = *((_QWORD *)a1 + 1) + 32 * *((unsigned int *)a1 + 4);
    LOBYTE(v19[0]) = 0;
    v7 = *(_QWORD *)(v6 - 8);
    if (!v7)
LABEL_22:
      sub_22E4A06C4();
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v19);
    v8 = (_QWORD *)(*((_QWORD *)a1 + 1) + 32 * *((unsigned int *)a1 + 4) - 32);
    v9 = operator new(0x40uLL);
    *(_QWORD *)v9 = off_24FABACC8;
    v9[8] = 0;
    *((_QWORD *)v9 + 2) = a1;
    *((_QWORD *)v9 + 3) = 0x72656E6E69;
    v9[47] = 5;
    *((_OWORD *)v9 + 3) = v18;
    v20 = v9;
    sub_22E63BEA4(v19, v8);
  }
  result = (uint64_t)v20;
  if (v20 == v19)
  {
    v11 = (uint64_t (**)(void))(v19[0] + 32);
    goto LABEL_10;
  }
  if (v20)
  {
    v11 = (uint64_t (**)(void))(*v20 + 40);
LABEL_10:
    result = (*v11)();
  }
  *a1 = 0;
  return result;
}

uint64_t sub_22EF893BC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABACC8;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_22EF893F8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABACC8;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF89444(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = off_24FABACC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = v2 + 24;
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 24);
    *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  }
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  return v2;
}

__n128 sub_22EF894B8(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = off_24FABACC8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = (_BYTE *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v4, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    *(_OWORD *)v4 = v5;
  }
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

void sub_22EF89520(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_22EF89534(void **__p)
{
  if (*((char *)__p + 47) < 0)
    operator delete(__p[3]);
  operator delete(__p);
}

uint64_t sub_22EF89564(char *a1, uint64_t a2, uint64_t a3)
{
  char v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _BYTE *v9;
  uint64_t result;
  uint64_t (**v11)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v18 = a2;
  *((_QWORD *)&v18 + 1) = a3;
  if (a1[1])
  {
    a1[1] = 0;
    llvm::json::OStream::objectBegin((llvm::json::OStream *)(a1 + 1048));
    sub_22F3769F0((uint64_t *)&v18);
    LODWORD(v12) = *((_DWORD *)a1 + 4);
    if (!(_DWORD)v12)
    {
LABEL_21:
      result = llvm::json::OStream::objectEnd((llvm::json::OStream *)(a1 + 1048));
      a1[1] = 1;
      return result;
    }
    while (1)
    {
      v13 = *((_QWORD *)a1 + 1) + 32 * v12;
      LOBYTE(v19[0]) = 1;
      v14 = *(_QWORD *)(v13 - 8);
      if (!v14)
        goto LABEL_22;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 48))(v14, v19);
      v12 = (*((_DWORD *)a1 + 4) - 1);
      *((_DWORD *)a1 + 4) = v12;
      v15 = *((_QWORD *)a1 + 1) + 32 * v12;
      v16 = *(_QWORD **)(v15 + 24);
      if (v16 == (_QWORD *)v15)
        break;
      if (v16)
      {
        v17 = 5;
LABEL_19:
        (*(void (**)(void))(*v16 + 8 * v17))();
        LODWORD(v12) = *((_DWORD *)a1 + 4);
      }
      if (!(_DWORD)v12)
        goto LABEL_21;
    }
    v16 = (_QWORD *)(*((_QWORD *)a1 + 1) + 32 * v12);
    v17 = 4;
    goto LABEL_19;
  }
  v4 = *a1;
  if (*a1)
  {
    v5 = operator new(0x40uLL);
    *(_QWORD *)v5 = off_24FABAD10;
    v5[8] = v4;
    *((_QWORD *)v5 + 2) = a1;
    *((_QWORD *)v5 + 3) = 0x72656E6E69;
    v5[47] = 5;
    *((_OWORD *)v5 + 3) = v18;
    v20 = v5;
    sub_22E536AAC((uint64_t)(a1 + 8), (unint64_t)v19);
  }
  else
  {
    v6 = *((_QWORD *)a1 + 1) + 32 * *((unsigned int *)a1 + 4);
    LOBYTE(v19[0]) = 0;
    v7 = *(_QWORD *)(v6 - 8);
    if (!v7)
LABEL_22:
      sub_22E4A06C4();
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v19);
    v8 = (_QWORD *)(*((_QWORD *)a1 + 1) + 32 * *((unsigned int *)a1 + 4) - 32);
    v9 = operator new(0x40uLL);
    *(_QWORD *)v9 = off_24FABAD10;
    v9[8] = 0;
    *((_QWORD *)v9 + 2) = a1;
    *((_QWORD *)v9 + 3) = 0x72656E6E69;
    v9[47] = 5;
    *((_OWORD *)v9 + 3) = v18;
    v20 = v9;
    sub_22E63BEA4(v19, v8);
  }
  result = (uint64_t)v20;
  if (v20 == v19)
  {
    v11 = (uint64_t (**)(void))(v19[0] + 32);
    goto LABEL_10;
  }
  if (v20)
  {
    v11 = (uint64_t (**)(void))(*v20 + 40);
LABEL_10:
    result = (*v11)();
  }
  *a1 = 0;
  return result;
}

uint64_t sub_22EF89788(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAD10;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_22EF897C4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAD10;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF89810(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = off_24FABAD10;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = v2 + 24;
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 24);
    *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  }
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  return v2;
}

__n128 sub_22EF89884(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = off_24FABAD10;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = (_BYTE *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v4, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    *(_OWORD *)v4 = v5;
  }
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

void sub_22EF898EC(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_22EF89900(void **__p)
{
  if (*((char *)__p + 47) < 0)
    operator delete(__p[3]);
  operator delete(__p);
}

uint64_t sub_22EF89930(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAD58;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_22EF8996C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAD58;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF899B8(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  __int128 v4;

  v2 = (char *)operator new(0x68uLL);
  *(_QWORD *)v2 = off_24FABAD58;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = v2 + 24;
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 24);
    *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  }
  v4 = *(_OWORD *)(a1 + 64);
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 4) = v4;
  *((_OWORD *)v2 + 5) = *(_OWORD *)(a1 + 80);
  *((_QWORD *)v2 + 12) = *(_QWORD *)(a1 + 96);
  return v2;
}

__n128 sub_22EF89A3C(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)a2 = off_24FABAD58;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = (_BYTE *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v4, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    *(_OWORD *)v4 = v5;
  }
  result = *(__n128 *)(a1 + 48);
  v7 = *(_OWORD *)(a1 + 64);
  v8 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 64) = v7;
  *(_OWORD *)(a2 + 80) = v8;
  *(__n128 *)(a2 + 48) = result;
  return result;
}

void sub_22EF89AB4(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_22EF89AC8(void **__p)
{
  if (*((char *)__p + 47) < 0)
    operator delete(__p[3]);
  operator delete(__p);
}

uint64_t sub_22EF89AF8(char *a1, uint64_t *a2)
{
  _QWORD *v4;
  char v5;
  _BYTE *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _BYTE *v11;
  uint64_t result;
  uint64_t (**v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 8;
  if (a1[1])
  {
    a1[1] = 0;
    llvm::json::OStream::objectBegin((llvm::json::OStream *)(a1 + 1048));
    sub_22F376CBC(a2);
    LODWORD(v14) = *((_DWORD *)a1 + 4);
    if (!(_DWORD)v14)
    {
LABEL_21:
      result = llvm::json::OStream::objectEnd((llvm::json::OStream *)(a1 + 1048));
      a1[1] = 1;
      return result;
    }
    while (1)
    {
      v15 = *v4 + 32 * v14;
      LOBYTE(v22[0]) = 1;
      v16 = *(_QWORD *)(v15 - 8);
      if (!v16)
        goto LABEL_22;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v16 + 48))(v16, v22);
      v14 = (*((_DWORD *)a1 + 4) - 1);
      *((_DWORD *)a1 + 4) = v14;
      v17 = *((_QWORD *)a1 + 1) + 32 * v14;
      v18 = *(_QWORD **)(v17 + 24);
      if (v18 == (_QWORD *)v17)
        break;
      if (v18)
      {
        v19 = 5;
LABEL_19:
        (*(void (**)(void))(*v18 + 8 * v19))();
        LODWORD(v14) = *((_DWORD *)a1 + 4);
      }
      if (!(_DWORD)v14)
        goto LABEL_21;
    }
    v18 = (_QWORD *)(*((_QWORD *)a1 + 1) + 32 * v14);
    v19 = 4;
    goto LABEL_19;
  }
  v5 = *a1;
  v20 = *(_OWORD *)a2;
  v21 = *((_OWORD *)a2 + 1);
  if (*a1)
  {
    v6 = operator new(0x50uLL);
    *(_QWORD *)v6 = off_24FABADA0;
    v6[8] = v5;
    *((_QWORD *)v6 + 2) = a1;
    *((_QWORD *)v6 + 3) = 0x72656E6E69;
    v6[47] = 5;
    v7 = *((_OWORD *)a2 + 1);
    *((_OWORD *)v6 + 3) = *(_OWORD *)a2;
    *((_OWORD *)v6 + 4) = v7;
    v23 = v6;
    sub_22E536AAC((uint64_t)v4, (unint64_t)v22);
  }
  else
  {
    v8 = *((_QWORD *)a1 + 1) + 32 * *((unsigned int *)a1 + 4);
    LOBYTE(v22[0]) = 0;
    v9 = *(_QWORD *)(v8 - 8);
    if (!v9)
LABEL_22:
      sub_22E4A06C4();
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 48))(v9, v22);
    v10 = (_QWORD *)(*((_QWORD *)a1 + 1) + 32 * *((unsigned int *)a1 + 4) - 32);
    v11 = operator new(0x50uLL);
    *(_QWORD *)v11 = off_24FABADA0;
    v11[8] = 0;
    *((_QWORD *)v11 + 2) = a1;
    *((_QWORD *)v11 + 3) = 0x72656E6E69;
    v11[47] = 5;
    *((_OWORD *)v11 + 3) = v20;
    *((_OWORD *)v11 + 4) = v21;
    v23 = v11;
    sub_22E63BEA4(v22, v10);
  }
  result = (uint64_t)v23;
  if (v23 == v22)
  {
    v13 = (uint64_t (**)(void))(v22[0] + 32);
    goto LABEL_10;
  }
  if (v23)
  {
    v13 = (uint64_t (**)(void))(*v23 + 40);
LABEL_10:
    result = (*v13)();
  }
  *a1 = 0;
  return result;
}

uint64_t sub_22EF89D24(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABADA0;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_22EF89D60(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABADA0;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF89DAC(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  __int128 v4;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = off_24FABADA0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = v2 + 24;
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 24);
    *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  }
  v4 = *(_OWORD *)(a1 + 64);
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 4) = v4;
  return v2;
}

__n128 sub_22EF89E20(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  *(_QWORD *)a2 = off_24FABADA0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = (_BYTE *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v4, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    *(_OWORD *)v4 = v5;
  }
  result = *(__n128 *)(a1 + 48);
  v7 = *(_OWORD *)(a1 + 64);
  *(__n128 *)(a2 + 48) = result;
  *(_OWORD *)(a2 + 64) = v7;
  return result;
}

void sub_22EF89E88(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_22EF89E9C(void **__p)
{
  if (*((char *)__p + 47) < 0)
    operator delete(__p[3]);
  operator delete(__p);
}

uint64_t sub_22EF89ECC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _BYTE *v16;
  uint64_t (**v17)(void);
  __int128 v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v18 = a2;
  *((_QWORD *)&v18 + 1) = a3;
  if (!a1[1])
  {
    v11 = *a1;
    if (*a1)
    {
      v12 = operator new(0x40uLL);
      *(_QWORD *)v12 = off_24FABADE8;
      v12[8] = v11;
      *((_QWORD *)v12 + 2) = a1;
      *((_QWORD *)v12 + 3) = 0x72656E6E69;
      v12[47] = 5;
      *((_OWORD *)v12 + 3) = v18;
      v20 = v12;
      sub_22E536AAC((uint64_t)(a1 + 8), (unint64_t)v19);
    }
    else
    {
      v13 = *((_QWORD *)a1 + 1) + 32 * *((unsigned int *)a1 + 4);
      LOBYTE(v19[0]) = 0;
      v14 = *(_QWORD *)(v13 - 8);
      if (!v14)
LABEL_22:
        sub_22E4A06C4();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 48))(v14, v19);
      v15 = (_QWORD *)(*((_QWORD *)a1 + 1) + 32 * *((unsigned int *)a1 + 4) - 32);
      v16 = operator new(0x40uLL);
      *(_QWORD *)v16 = off_24FABADE8;
      v16[8] = 0;
      *((_QWORD *)v16 + 2) = a1;
      *((_QWORD *)v16 + 3) = 0x72656E6E69;
      v16[47] = 5;
      *((_OWORD *)v16 + 3) = v18;
      v20 = v16;
      sub_22E63BEA4(v19, v15);
    }
    result = (uint64_t)v20;
    if (v20 == v19)
    {
      v17 = (uint64_t (**)(void))(v19[0] + 32);
    }
    else
    {
      if (!v20)
      {
LABEL_20:
        *a1 = 0;
        return result;
      }
      v17 = (uint64_t (**)(void))(*v20 + 40);
    }
    result = (*v17)();
    goto LABEL_20;
  }
  a1[1] = 0;
  llvm::json::OStream::objectBegin((llvm::json::OStream *)(a1 + 1048));
  sub_22EF8A0F0((uint64_t *)&v18);
  LODWORD(v4) = *((_DWORD *)a1 + 4);
  if ((_DWORD)v4)
  {
    while (1)
    {
      v5 = *((_QWORD *)a1 + 1) + 32 * v4;
      LOBYTE(v19[0]) = 1;
      v6 = *(_QWORD *)(v5 - 8);
      if (!v6)
        goto LABEL_22;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 48))(v6, v19);
      v4 = (*((_DWORD *)a1 + 4) - 1);
      *((_DWORD *)a1 + 4) = v4;
      v7 = *((_QWORD *)a1 + 1) + 32 * v4;
      v8 = *(_QWORD **)(v7 + 24);
      if (v8 == (_QWORD *)v7)
        break;
      if (v8)
      {
        v9 = 5;
LABEL_8:
        (*(void (**)(void))(*v8 + 8 * v9))();
        LODWORD(v4) = *((_DWORD *)a1 + 4);
      }
      if (!(_DWORD)v4)
        goto LABEL_10;
    }
    v8 = (_QWORD *)(*((_QWORD *)a1 + 1) + 32 * v4);
    v9 = 4;
    goto LABEL_8;
  }
LABEL_10:
  result = llvm::json::OStream::objectEnd((llvm::json::OStream *)(a1 + 1048));
  a1[1] = 1;
  return result;
}

uint64_t sub_22EF8A0F0(uint64_t *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v2 = *a1;
  v3 = (char *)(*a1 + 8);
  result = sub_22F08F9D0((uint64_t)v3, a1[1]);
  v5 = a1[1];
  if (v5)
  {
    v6 = *(_DWORD *)v5;
    if (*(_DWORD *)v5)
    {
      if (v6 <= 2)
      {
        if (*(_DWORD *)(v5 + 40) != 1)
          result = sub_22EF87230(v3, 0, 0, *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFFCLL, v2);
        v9 = *(_QWORD *)(v5 + 24);
        if (v9 >= 8)
        {
          v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 16);
          v11 = *(_BYTE *)(v10 + 60);
          v12 = v10 + 80;
          if ((v11 & 4) == 0)
            v12 = 0;
          v8 = *(_QWORD *)(v12 + 72);
          return sub_22EF87230(v3, 0, 0, v8, v2);
        }
      }
      else if (v6 == 3)
      {
        v7 = *(_QWORD *)(v5 + 8);
        if ((v7 & 2) == 0)
        {
          v8 = v7 & 0xFFFFFFFFFFFFFFFCLL;
          return sub_22EF87230(v3, 0, 0, v8, v2);
        }
      }
    }
    else if (*(_DWORD *)(v5 + 16) != 1)
    {
      return sub_22EF89198(v3, v2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFF0));
    }
  }
  return result;
}

uint64_t sub_22EF8A1FC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABADE8;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_22EF8A238(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABADE8;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF8A284(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = off_24FABADE8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = v2 + 24;
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 24);
    *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  }
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  return v2;
}

__n128 sub_22EF8A2F8(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = off_24FABADE8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = (_BYTE *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v4, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    *(_OWORD *)v4 = v5;
  }
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

void sub_22EF8A360(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_22EF8A374(void **__p)
{
  if (*((char *)__p + 47) < 0)
    operator delete(__p[3]);
  operator delete(__p);
}

uint64_t sub_22EF8A3A4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAE30;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_22EF8A3E0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAE30;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF8A42C(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = off_24FABAE30;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = v2 + 24;
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 24);
    *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  }
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  return v2;
}

__n128 sub_22EF8A4A0(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = off_24FABAE30;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = (_BYTE *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v4, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    *(_OWORD *)v4 = v5;
  }
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

void sub_22EF8A508(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_22EF8A51C(void **__p)
{
  if (*((char *)__p + 47) < 0)
    operator delete(__p[3]);
  operator delete(__p);
}

_QWORD *sub_22EF8A54C(char *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *result;
  char v13;
  _BYTE *v14;
  uint64_t (**v15)(_QWORD *);
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (!a1[1])
  {
    v13 = *a1;
    if (*a1)
    {
      v14 = operator new(0x40uLL);
      *(_QWORD *)v14 = off_24FABAE78;
      v14[8] = v13;
      *((_QWORD *)v14 + 2) = a1;
      *((_QWORD *)v14 + 3) = 0x72656E6E69;
      v14[47] = 5;
      *((_QWORD *)v14 + 6) = a2;
      *((_QWORD *)v14 + 7) = a3;
      v21 = v14;
      sub_22E536AAC((uint64_t)(a1 + 8), (unint64_t)v20);
      result = v21;
      if (v21 != v20)
      {
LABEL_13:
        if (!result)
        {
LABEL_19:
          *a1 = 0;
          return result;
        }
        v15 = (uint64_t (**)(_QWORD *))(*result + 40);
LABEL_18:
        result = (_QWORD *)(*v15)(result);
        goto LABEL_19;
      }
    }
    else
    {
      v16 = *((_QWORD *)a1 + 1) + 32 * *((unsigned int *)a1 + 4);
      LOBYTE(v20[0]) = 0;
      v17 = *(_QWORD *)(v16 - 8);
      if (!v17)
LABEL_21:
        sub_22E4A06C4();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v17 + 48))(v17, v20);
      v18 = (_QWORD *)(*((_QWORD *)a1 + 1) + 32 * *((unsigned int *)a1 + 4) - 32);
      v19 = operator new(0x40uLL);
      *(_QWORD *)v19 = off_24FABAE78;
      v19[8] = 0;
      *((_QWORD *)v19 + 2) = a1;
      *((_QWORD *)v19 + 3) = 0x72656E6E69;
      v19[47] = 5;
      *((_QWORD *)v19 + 6) = a2;
      *((_QWORD *)v19 + 7) = a3;
      v21 = v19;
      sub_22E63BEA4(v20, v18);
      result = v21;
      if (v21 != v20)
        goto LABEL_13;
    }
    v15 = (uint64_t (**)(_QWORD *))(v20[0] + 32);
    result = v20;
    goto LABEL_18;
  }
  a1[1] = 0;
  llvm::json::OStream::objectBegin((llvm::json::OStream *)(a1 + 1048));
  sub_22F08F7A8(a2 + 8, a3);
  sub_22EF87230((unsigned __int8 *)(a2 + 8), 0, 0, a3[1], a2);
  LODWORD(v6) = *((_DWORD *)a1 + 4);
  if ((_DWORD)v6)
  {
    while (1)
    {
      v7 = *((_QWORD *)a1 + 1) + 32 * v6;
      LOBYTE(v20[0]) = 1;
      v8 = *(_QWORD *)(v7 - 8);
      if (!v8)
        goto LABEL_21;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 48))(v8, v20);
      v6 = (*((_DWORD *)a1 + 4) - 1);
      *((_DWORD *)a1 + 4) = v6;
      v9 = *((_QWORD *)a1 + 1) + 32 * v6;
      v10 = *(_QWORD **)(v9 + 24);
      if (v10 == (_QWORD *)v9)
        break;
      if (v10)
      {
        v11 = 5;
LABEL_8:
        (*(void (**)(void))(*v10 + 8 * v11))();
        LODWORD(v6) = *((_DWORD *)a1 + 4);
      }
      if (!(_DWORD)v6)
        goto LABEL_10;
    }
    v10 = (_QWORD *)(*((_QWORD *)a1 + 1) + 32 * v6);
    v11 = 4;
    goto LABEL_8;
  }
LABEL_10:
  result = (_QWORD *)llvm::json::OStream::objectEnd((llvm::json::OStream *)(a1 + 1048));
  a1[1] = 1;
  return result;
}

uint64_t sub_22EF8A79C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAE78;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_22EF8A7D8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAE78;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF8A824(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = off_24FABAE78;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = v2 + 24;
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 24);
    *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  }
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  return v2;
}

__n128 sub_22EF8A898(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = off_24FABAE78;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = (_BYTE *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v4, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    *(_OWORD *)v4 = v5;
  }
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

void sub_22EF8A900(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_22EF8A914(void **__p)
{
  if (*((char *)__p + 47) < 0)
    operator delete(__p[3]);
  operator delete(__p);
}

uint64_t *sub_22EF8A944(uint64_t a1, unint64_t a2, int a3)
{
  char v6;
  int v7;
  char *v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _BYTE *v23;
  void (**v24)(void);
  uint64_t *result;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char v33;
  _BYTE *v34;
  uint64_t (**v35)(uint64_t *);
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _BYTE *v39;
  llvm::json::OStream *v40;
  _QWORD v41[3];
  uint64_t *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
LABEL_36:
    v26 = (_BYTE *)(a1 + 8);
    if (*(_BYTE *)(a1 + 9))
    {
      *(_BYTE *)(a1 + 9) = 0;
      llvm::json::OStream::objectBegin((llvm::json::OStream *)(a1 + 1056));
      sub_22F08FCF4(a1 + 8, a2);
      LODWORD(v27) = *(_DWORD *)(a1 + 24);
      if (!(_DWORD)v27)
      {
LABEL_45:
        result = (uint64_t *)llvm::json::OStream::objectEnd((llvm::json::OStream *)(a1 + 1056));
        *(_BYTE *)(a1 + 9) = 1;
        return result;
      }
      while (1)
      {
        v28 = *(_QWORD *)(a1 + 16) + 32 * v27;
        LOBYTE(v41[0]) = 1;
        v29 = *(_QWORD *)(v28 - 8);
        if (!v29)
          goto LABEL_56;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v29 + 48))(v29, v41);
        v27 = (*(_DWORD *)(a1 + 24) - 1);
        *(_DWORD *)(a1 + 24) = v27;
        v30 = *(_QWORD *)(a1 + 16) + 32 * v27;
        v31 = *(_QWORD **)(v30 + 24);
        if (v31 == (_QWORD *)v30)
          break;
        if (v31)
        {
          v32 = 5;
LABEL_43:
          (*(void (**)(void))(*v31 + 8 * v32))();
          LODWORD(v27) = *(_DWORD *)(a1 + 24);
        }
        if (!(_DWORD)v27)
          goto LABEL_45;
      }
      v31 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v27);
      v32 = 4;
      goto LABEL_43;
    }
    v33 = *(_BYTE *)(a1 + 8);
    if (v33)
    {
      v34 = operator new(0x40uLL);
      *(_QWORD *)v34 = off_24FABAF08;
      v34[8] = v33;
      *((_QWORD *)v34 + 2) = v26;
      *((_QWORD *)v34 + 3) = 0x72656E6E69;
      v34[47] = 5;
      *((_QWORD *)v34 + 6) = a1;
      *((_QWORD *)v34 + 7) = a2;
      v42 = (uint64_t *)v34;
      sub_22E536AAC(a1 + 16, (unint64_t)v41);
      result = v42;
      if (v42 != v41)
      {
LABEL_48:
        if (!result)
        {
LABEL_54:
          *v26 = 0;
          return result;
        }
        v35 = (uint64_t (**)(uint64_t *))(*result + 40);
LABEL_53:
        result = (uint64_t *)(*v35)(result);
        goto LABEL_54;
      }
    }
    else
    {
      v36 = *(_QWORD *)(a1 + 16) + 32 * *(unsigned int *)(a1 + 24);
      LOBYTE(v41[0]) = 0;
      v37 = *(_QWORD *)(v36 - 8);
      if (!v37)
LABEL_56:
        sub_22E4A06C4();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v37 + 48))(v37, v41);
      v38 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * *(unsigned int *)(a1 + 24) - 32);
      v39 = operator new(0x40uLL);
      *(_QWORD *)v39 = off_24FABAF08;
      v39[8] = 0;
      *((_QWORD *)v39 + 2) = v26;
      *((_QWORD *)v39 + 3) = 0x72656E6E69;
      v39[47] = 5;
      *((_QWORD *)v39 + 6) = a1;
      *((_QWORD *)v39 + 7) = a2;
      v42 = (uint64_t *)v39;
      sub_22E63BEA4(v41, v38);
      result = v42;
      if (v42 != v41)
        goto LABEL_48;
    }
    v35 = (uint64_t (**)(uint64_t *))(v41[0] + 32);
    result = v41;
    goto LABEL_53;
  }
  v6 = 0;
  v7 = 0;
  v8 = (char *)(a1 + 8);
  v40 = (llvm::json::OStream *)(a1 + 1056);
  v9 = (_QWORD *)(a1 + 16);
  v10 = a2;
  do
  {
    v11 = *(_DWORD *)(v10 + 28);
    if ((v11 & 0x7E) != 0x24 || sub_22EFD5760(v10) > 1)
      goto LABEL_30;
    if (!a3)
    {
      if ((v11 & 0x200) == 0 || *(_DWORD *)(a1 + 4) != 1)
        sub_22EF8622C(a1 + 8, a1, v10);
      goto LABEL_29;
    }
    if (!*(_BYTE *)(a1 + 9))
    {
      v18 = *v8;
      if (*v8)
      {
        v19 = operator new(0x40uLL);
        *(_QWORD *)v19 = off_24FABAEC0;
        v19[8] = v18;
        *((_QWORD *)v19 + 2) = v8;
        *((_QWORD *)v19 + 3) = 0x72656E6E69;
        v19[47] = 5;
        *((_QWORD *)v19 + 6) = a1;
        *((_QWORD *)v19 + 7) = v10;
        v42 = (uint64_t *)v19;
        sub_22E536AAC(a1 + 16, (unint64_t)v41);
      }
      else
      {
        v20 = *(_QWORD *)(a1 + 16) + 32 * *(unsigned int *)(a1 + 24);
        LOBYTE(v41[0]) = 0;
        v21 = *(_QWORD *)(v20 - 8);
        if (!v21)
          goto LABEL_56;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v21 + 48))(v21, v41);
        v22 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * *(unsigned int *)(a1 + 24) - 32);
        v23 = operator new(0x40uLL);
        *(_QWORD *)v23 = off_24FABAEC0;
        v23[8] = 0;
        *((_QWORD *)v23 + 2) = v8;
        *((_QWORD *)v23 + 3) = 0x72656E6E69;
        v23[47] = 5;
        *((_QWORD *)v23 + 6) = a1;
        *((_QWORD *)v23 + 7) = v10;
        v42 = (uint64_t *)v23;
        sub_22E63BEA4(v41, v22);
      }
      if (v42 == v41)
      {
        v24 = (void (**)(void))(v41[0] + 32);
      }
      else
      {
        if (!v42)
        {
LABEL_28:
          *v8 = 0;
LABEL_29:
          v6 = 1;
          goto LABEL_30;
        }
        v24 = (void (**)(void))(*v42 + 40);
      }
      (*v24)();
      goto LABEL_28;
    }
    *(_BYTE *)(a1 + 9) = 0;
    llvm::json::OStream::objectBegin(v40);
    sub_22F08FCF4(a1 + 8, v10);
    LODWORD(v12) = *(_DWORD *)(a1 + 24);
    if ((_DWORD)v12)
    {
      while (1)
      {
        v13 = *v9 + 32 * v12;
        LOBYTE(v41[0]) = 1;
        v14 = *(_QWORD *)(v13 - 8);
        if (!v14)
          goto LABEL_56;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 48))(v14, v41);
        v12 = (*(_DWORD *)(a1 + 24) - 1);
        *(_DWORD *)(a1 + 24) = v12;
        v15 = *(_QWORD *)(a1 + 16) + 32 * v12;
        v16 = *(_QWORD **)(v15 + 24);
        if (v16 == (_QWORD *)v15)
          break;
        if (v16)
        {
          v17 = 5;
LABEL_13:
          (*(void (**)(void))(*v16 + 8 * v17))();
          LODWORD(v12) = *(_DWORD *)(a1 + 24);
        }
        if (!(_DWORD)v12)
          goto LABEL_15;
      }
      v16 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v12);
      v17 = 4;
      goto LABEL_13;
    }
LABEL_15:
    llvm::json::OStream::objectEnd(v40);
    v6 = 1;
    *(_BYTE *)(a1 + 9) = 1;
LABEL_30:
    result = (uint64_t *)(v10 + 96);
    if ((*(_BYTE *)(v10 + 96) & 3) != 0)
    {
      if (v7)
        break;
      v7 = 1;
    }
    result = (uint64_t *)sub_22E3CD31C(result, v10);
    if (result == (uint64_t *)a2)
      break;
    v10 = (unint64_t)result;
  }
  while (result);
  if ((v6 & 1) == 0)
    goto LABEL_36;
  return result;
}

uint64_t sub_22EF8ADE0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAEC0;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_22EF8AE1C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAEC0;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF8AE68(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = off_24FABAEC0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = v2 + 24;
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 24);
    *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  }
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  return v2;
}

__n128 sub_22EF8AEDC(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = off_24FABAEC0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = (_BYTE *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v4, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    *(_OWORD *)v4 = v5;
  }
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

void sub_22EF8AF44(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_22EF8AF58(void **__p)
{
  if (*((char *)__p + 47) < 0)
    operator delete(__p[3]);
  operator delete(__p);
}

uint64_t sub_22EF8AF88(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAF08;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_22EF8AFC4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAF08;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF8B010(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = off_24FABAF08;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = v2 + 24;
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 24);
    *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  }
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  return v2;
}

__n128 sub_22EF8B084(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = off_24FABAF08;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = (_BYTE *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v4, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    *(_OWORD *)v4 = v5;
  }
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

void sub_22EF8B0EC(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_22EF8B100(void **__p)
{
  if (*((char *)__p + 47) < 0)
    operator delete(__p[3]);
  operator delete(__p);
}

uint64_t *sub_22EF8B130(uint64_t a1, unint64_t a2, int a3)
{
  char v6;
  int v7;
  char *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _BYTE *v26;
  void (**v27)(void);
  uint64_t *result;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char v36;
  _BYTE *v37;
  uint64_t (**v38)(uint64_t *);
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _BYTE *v42;
  _QWORD v43[3];
  uint64_t *v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
LABEL_44:
    v29 = (_BYTE *)(a1 + 8);
    if (*(_BYTE *)(a1 + 9))
    {
      *(_BYTE *)(a1 + 9) = 0;
      llvm::json::OStream::objectBegin((llvm::json::OStream *)(a1 + 1056));
      sub_22F08FCF4(a1 + 8, a2);
      LODWORD(v30) = *(_DWORD *)(a1 + 24);
      if (!(_DWORD)v30)
      {
LABEL_53:
        result = (uint64_t *)llvm::json::OStream::objectEnd((llvm::json::OStream *)(a1 + 1056));
        *(_BYTE *)(a1 + 9) = 1;
        return result;
      }
      while (1)
      {
        v31 = *(_QWORD *)(a1 + 16) + 32 * v30;
        LOBYTE(v43[0]) = 1;
        v32 = *(_QWORD *)(v31 - 8);
        if (!v32)
          goto LABEL_64;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v32 + 48))(v32, v43);
        v30 = (*(_DWORD *)(a1 + 24) - 1);
        *(_DWORD *)(a1 + 24) = v30;
        v33 = *(_QWORD *)(a1 + 16) + 32 * v30;
        v34 = *(_QWORD **)(v33 + 24);
        if (v34 == (_QWORD *)v33)
          break;
        if (v34)
        {
          v35 = 5;
LABEL_51:
          (*(void (**)(void))(*v34 + 8 * v35))();
          LODWORD(v30) = *(_DWORD *)(a1 + 24);
        }
        if (!(_DWORD)v30)
          goto LABEL_53;
      }
      v34 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v30);
      v35 = 4;
      goto LABEL_51;
    }
    v36 = *(_BYTE *)(a1 + 8);
    if (v36)
    {
      v37 = operator new(0x40uLL);
      *(_QWORD *)v37 = off_24FABAF98;
      v37[8] = v36;
      *((_QWORD *)v37 + 2) = v29;
      *((_QWORD *)v37 + 3) = 0x72656E6E69;
      v37[47] = 5;
      *((_QWORD *)v37 + 6) = a1;
      *((_QWORD *)v37 + 7) = a2;
      v44 = (uint64_t *)v37;
      sub_22E536AAC(a1 + 16, (unint64_t)v43);
      result = v44;
      if (v44 != v43)
      {
LABEL_56:
        if (!result)
        {
LABEL_62:
          *v29 = 0;
          return result;
        }
        v38 = (uint64_t (**)(uint64_t *))(*result + 40);
LABEL_61:
        result = (uint64_t *)(*v38)(result);
        goto LABEL_62;
      }
    }
    else
    {
      v39 = *(_QWORD *)(a1 + 16) + 32 * *(unsigned int *)(a1 + 24);
      LOBYTE(v43[0]) = 0;
      v40 = *(_QWORD *)(v39 - 8);
      if (!v40)
LABEL_64:
        sub_22E4A06C4();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v40 + 48))(v40, v43);
      v41 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * *(unsigned int *)(a1 + 24) - 32);
      v42 = operator new(0x40uLL);
      *(_QWORD *)v42 = off_24FABAF98;
      v42[8] = 0;
      *((_QWORD *)v42 + 2) = v29;
      *((_QWORD *)v42 + 3) = 0x72656E6E69;
      v42[47] = 5;
      *((_QWORD *)v42 + 6) = a1;
      *((_QWORD *)v42 + 7) = a2;
      v44 = (uint64_t *)v42;
      sub_22E63BEA4(v43, v41);
      result = v44;
      if (v44 != v43)
        goto LABEL_56;
    }
    v38 = (uint64_t (**)(uint64_t *))(v43[0] + 32);
    result = v43;
    goto LABEL_61;
  }
  v6 = 0;
  v7 = 0;
  v8 = (char *)(a1 + 8);
  v9 = (_QWORD *)(a1 + 16);
  v10 = a2;
  do
  {
    v11 = *(_QWORD *)(v10 + 144) & 6;
    v12 = (_DWORD *)(*(_QWORD *)(v10 + 144) & 0xFFFFFFFFFFFFFFF8);
    if (v11 != 4 || v12 == 0)
    {
      if (v11 != 2 || v12 == 0)
        goto LABEL_13;
    }
    else
    {
      v12 += 4;
    }
    if (((*v12 >> 1) & 3) == 1)
      goto LABEL_38;
LABEL_13:
    if (!a3)
    {
      if (*(_DWORD *)(a1 + 4) != 1 || (*(_BYTE *)(v10 + 29) & 2) == 0)
        sub_22EF8622C(a1 + 8, a1, v10);
      goto LABEL_37;
    }
    if (!*(_BYTE *)(a1 + 9))
    {
      v21 = *v8;
      if (*v8)
      {
        v22 = operator new(0x40uLL);
        *(_QWORD *)v22 = off_24FABAF50;
        v22[8] = v21;
        *((_QWORD *)v22 + 2) = v8;
        *((_QWORD *)v22 + 3) = 0x72656E6E69;
        v22[47] = 5;
        *((_QWORD *)v22 + 6) = a1;
        *((_QWORD *)v22 + 7) = v10;
        v44 = (uint64_t *)v22;
        sub_22E536AAC(a1 + 16, (unint64_t)v43);
      }
      else
      {
        v23 = *(_QWORD *)(a1 + 16) + 32 * *(unsigned int *)(a1 + 24);
        LOBYTE(v43[0]) = 0;
        v24 = *(_QWORD *)(v23 - 8);
        if (!v24)
          goto LABEL_64;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v24 + 48))(v24, v43);
        v25 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * *(unsigned int *)(a1 + 24) - 32);
        v26 = operator new(0x40uLL);
        *(_QWORD *)v26 = off_24FABAF50;
        v26[8] = 0;
        *((_QWORD *)v26 + 2) = v8;
        *((_QWORD *)v26 + 3) = 0x72656E6E69;
        v26[47] = 5;
        *((_QWORD *)v26 + 6) = a1;
        *((_QWORD *)v26 + 7) = v10;
        v44 = (uint64_t *)v26;
        sub_22E63BEA4(v43, v25);
      }
      if (v44 == v43)
      {
        v27 = (void (**)(void))(v43[0] + 32);
LABEL_35:
        (*v27)();
      }
      else if (v44)
      {
        v27 = (void (**)(void))(*v44 + 40);
        goto LABEL_35;
      }
      *v8 = 0;
LABEL_37:
      v6 = 1;
      goto LABEL_38;
    }
    *(_BYTE *)(a1 + 9) = 0;
    llvm::json::OStream::objectBegin((llvm::json::OStream *)(a1 + 1056));
    sub_22F08FCF4(a1 + 8, v10);
    LODWORD(v15) = *(_DWORD *)(a1 + 24);
    if ((_DWORD)v15)
    {
      while (1)
      {
        v16 = *v9 + 32 * v15;
        LOBYTE(v43[0]) = 1;
        v17 = *(_QWORD *)(v16 - 8);
        if (!v17)
          goto LABEL_64;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v17 + 48))(v17, v43);
        v15 = (*(_DWORD *)(a1 + 24) - 1);
        *(_DWORD *)(a1 + 24) = v15;
        v18 = *(_QWORD *)(a1 + 16) + 32 * v15;
        v19 = *(_QWORD **)(v18 + 24);
        if (v19 == (_QWORD *)v18)
          break;
        if (v19)
        {
          v20 = 5;
LABEL_21:
          (*(void (**)(void))(*v19 + 8 * v20))();
          LODWORD(v15) = *(_DWORD *)(a1 + 24);
        }
        if (!(_DWORD)v15)
          goto LABEL_23;
      }
      v19 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v15);
      v20 = 4;
      goto LABEL_21;
    }
LABEL_23:
    llvm::json::OStream::objectEnd((llvm::json::OStream *)(a1 + 1056));
    v6 = 1;
    *(_BYTE *)(a1 + 9) = 1;
LABEL_38:
    result = (uint64_t *)(v10 + 104);
    if ((*(_BYTE *)(v10 + 104) & 3) != 0)
    {
      if (v7)
        break;
      v7 = 1;
    }
    result = (uint64_t *)sub_22E3CD31C(result, v10);
    if (result == (uint64_t *)a2)
      break;
    v10 = (unint64_t)result;
  }
  while (result);
  if ((v6 & 1) == 0)
    goto LABEL_44;
  return result;
}

uint64_t sub_22EF8B5EC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAF50;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_22EF8B628(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAF50;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF8B674(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = off_24FABAF50;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = v2 + 24;
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 24);
    *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  }
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  return v2;
}

__n128 sub_22EF8B6E8(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = off_24FABAF50;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = (_BYTE *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v4, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    *(_OWORD *)v4 = v5;
  }
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

void sub_22EF8B750(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_22EF8B764(void **__p)
{
  if (*((char *)__p + 47) < 0)
    operator delete(__p[3]);
  operator delete(__p);
}

uint64_t sub_22EF8B794(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAF98;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_22EF8B7D0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAF98;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF8B81C(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = off_24FABAF98;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = v2 + 24;
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 24);
    *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  }
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  return v2;
}

__n128 sub_22EF8B890(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = off_24FABAF98;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = (_BYTE *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v4, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    *(_OWORD *)v4 = v5;
  }
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

void sub_22EF8B8F8(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_22EF8B90C(void **__p)
{
  if (*((char *)__p + 47) < 0)
    operator delete(__p[3]);
  operator delete(__p);
}

uint64_t *sub_22EF8B93C(uint64_t a1, unint64_t a2, int a3)
{
  char v6;
  int v7;
  char *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _BYTE *v22;
  void (**v23)(void);
  uint64_t *result;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;
  _BYTE *v33;
  uint64_t (**v34)(uint64_t *);
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _BYTE *v38;
  _QWORD v39[3];
  uint64_t *v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
LABEL_36:
    v25 = (_BYTE *)(a1 + 8);
    if (*(_BYTE *)(a1 + 9))
    {
      *(_BYTE *)(a1 + 9) = 0;
      llvm::json::OStream::objectBegin((llvm::json::OStream *)(a1 + 1056));
      sub_22F08FCF4(a1 + 8, a2);
      LODWORD(v26) = *(_DWORD *)(a1 + 24);
      if (!(_DWORD)v26)
      {
LABEL_45:
        result = (uint64_t *)llvm::json::OStream::objectEnd((llvm::json::OStream *)(a1 + 1056));
        *(_BYTE *)(a1 + 9) = 1;
        return result;
      }
      while (1)
      {
        v27 = *(_QWORD *)(a1 + 16) + 32 * v26;
        LOBYTE(v39[0]) = 1;
        v28 = *(_QWORD *)(v27 - 8);
        if (!v28)
          goto LABEL_56;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v28 + 48))(v28, v39);
        v26 = (*(_DWORD *)(a1 + 24) - 1);
        *(_DWORD *)(a1 + 24) = v26;
        v29 = *(_QWORD *)(a1 + 16) + 32 * v26;
        v30 = *(_QWORD **)(v29 + 24);
        if (v30 == (_QWORD *)v29)
          break;
        if (v30)
        {
          v31 = 5;
LABEL_43:
          (*(void (**)(void))(*v30 + 8 * v31))();
          LODWORD(v26) = *(_DWORD *)(a1 + 24);
        }
        if (!(_DWORD)v26)
          goto LABEL_45;
      }
      v30 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v26);
      v31 = 4;
      goto LABEL_43;
    }
    v32 = *(_BYTE *)(a1 + 8);
    if (v32)
    {
      v33 = operator new(0x40uLL);
      *(_QWORD *)v33 = off_24FABB028;
      v33[8] = v32;
      *((_QWORD *)v33 + 2) = v25;
      *((_QWORD *)v33 + 3) = 0x72656E6E69;
      v33[47] = 5;
      *((_QWORD *)v33 + 6) = a1;
      *((_QWORD *)v33 + 7) = a2;
      v40 = (uint64_t *)v33;
      sub_22E536AAC(a1 + 16, (unint64_t)v39);
      result = v40;
      if (v40 != v39)
      {
LABEL_48:
        if (!result)
        {
LABEL_54:
          *v25 = 0;
          return result;
        }
        v34 = (uint64_t (**)(uint64_t *))(*result + 40);
LABEL_53:
        result = (uint64_t *)(*v34)(result);
        goto LABEL_54;
      }
    }
    else
    {
      v35 = *(_QWORD *)(a1 + 16) + 32 * *(unsigned int *)(a1 + 24);
      LOBYTE(v39[0]) = 0;
      v36 = *(_QWORD *)(v35 - 8);
      if (!v36)
LABEL_56:
        sub_22E4A06C4();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v36 + 48))(v36, v39);
      v37 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * *(unsigned int *)(a1 + 24) - 32);
      v38 = operator new(0x40uLL);
      *(_QWORD *)v38 = off_24FABB028;
      v38[8] = 0;
      *((_QWORD *)v38 + 2) = v25;
      *((_QWORD *)v38 + 3) = 0x72656E6E69;
      v38[47] = 5;
      *((_QWORD *)v38 + 6) = a1;
      *((_QWORD *)v38 + 7) = a2;
      v40 = (uint64_t *)v38;
      sub_22E63BEA4(v39, v37);
      result = v40;
      if (v40 != v39)
        goto LABEL_48;
    }
    v34 = (uint64_t (**)(uint64_t *))(v39[0] + 32);
    result = v39;
    goto LABEL_53;
  }
  v6 = 0;
  v7 = 0;
  v8 = (char *)(a1 + 8);
  v9 = (_QWORD *)(a1 + 16);
  v10 = a2;
  do
  {
    if ((*(_DWORD *)(v10 + 28) & 0x7Fu) - 67 < 0xFFFFFFFE || sub_22EFBC2B0(v10) > 1)
      goto LABEL_30;
    if (!a3)
    {
      if (*(_DWORD *)(a1 + 4) != 1 || (*(_BYTE *)(v10 + 29) & 2) == 0)
        sub_22EF8622C(a1 + 8, a1, v10);
      goto LABEL_29;
    }
    if (!*(_BYTE *)(a1 + 9))
    {
      v17 = *v8;
      if (*v8)
      {
        v18 = operator new(0x40uLL);
        *(_QWORD *)v18 = off_24FABAFE0;
        v18[8] = v17;
        *((_QWORD *)v18 + 2) = v8;
        *((_QWORD *)v18 + 3) = 0x72656E6E69;
        v18[47] = 5;
        *((_QWORD *)v18 + 6) = a1;
        *((_QWORD *)v18 + 7) = v10;
        v40 = (uint64_t *)v18;
        sub_22E536AAC(a1 + 16, (unint64_t)v39);
      }
      else
      {
        v19 = *(_QWORD *)(a1 + 16) + 32 * *(unsigned int *)(a1 + 24);
        LOBYTE(v39[0]) = 0;
        v20 = *(_QWORD *)(v19 - 8);
        if (!v20)
          goto LABEL_56;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v20 + 48))(v20, v39);
        v21 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * *(unsigned int *)(a1 + 24) - 32);
        v22 = operator new(0x40uLL);
        *(_QWORD *)v22 = off_24FABAFE0;
        v22[8] = 0;
        *((_QWORD *)v22 + 2) = v8;
        *((_QWORD *)v22 + 3) = 0x72656E6E69;
        v22[47] = 5;
        *((_QWORD *)v22 + 6) = a1;
        *((_QWORD *)v22 + 7) = v10;
        v40 = (uint64_t *)v22;
        sub_22E63BEA4(v39, v21);
      }
      if (v40 == v39)
      {
        v23 = (void (**)(void))(v39[0] + 32);
      }
      else
      {
        if (!v40)
        {
LABEL_28:
          *v8 = 0;
LABEL_29:
          v6 = 1;
          goto LABEL_30;
        }
        v23 = (void (**)(void))(*v40 + 40);
      }
      (*v23)();
      goto LABEL_28;
    }
    *(_BYTE *)(a1 + 9) = 0;
    llvm::json::OStream::objectBegin((llvm::json::OStream *)(a1 + 1056));
    sub_22F08FCF4(a1 + 8, v10);
    LODWORD(v11) = *(_DWORD *)(a1 + 24);
    if ((_DWORD)v11)
    {
      while (1)
      {
        v12 = *v9 + 32 * v11;
        LOBYTE(v39[0]) = 1;
        v13 = *(_QWORD *)(v12 - 8);
        if (!v13)
          goto LABEL_56;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 48))(v13, v39);
        v11 = (*(_DWORD *)(a1 + 24) - 1);
        *(_DWORD *)(a1 + 24) = v11;
        v14 = *(_QWORD *)(a1 + 16) + 32 * v11;
        v15 = *(_QWORD **)(v14 + 24);
        if (v15 == (_QWORD *)v14)
          break;
        if (v15)
        {
          v16 = 5;
LABEL_13:
          (*(void (**)(void))(*v15 + 8 * v16))();
          LODWORD(v11) = *(_DWORD *)(a1 + 24);
        }
        if (!(_DWORD)v11)
          goto LABEL_15;
      }
      v15 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11);
      v16 = 4;
      goto LABEL_13;
    }
LABEL_15:
    llvm::json::OStream::objectEnd((llvm::json::OStream *)(a1 + 1056));
    v6 = 1;
    *(_BYTE *)(a1 + 9) = 1;
LABEL_30:
    result = (uint64_t *)(v10 + 72);
    if ((*(_BYTE *)(v10 + 72) & 3) != 0)
    {
      if (v7)
        break;
      v7 = 1;
    }
    result = (uint64_t *)sub_22E3CD31C(result, v10);
    if (result == (uint64_t *)a2)
      break;
    v10 = (unint64_t)result;
  }
  while (result);
  if ((v6 & 1) == 0)
    goto LABEL_36;
  return result;
}

uint64_t sub_22EF8BDDC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAFE0;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_22EF8BE18(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABAFE0;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF8BE64(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = off_24FABAFE0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = v2 + 24;
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 24);
    *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  }
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  return v2;
}

__n128 sub_22EF8BED8(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = off_24FABAFE0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = (_BYTE *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v4, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    *(_OWORD *)v4 = v5;
  }
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

void sub_22EF8BF40(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_22EF8BF54(void **__p)
{
  if (*((char *)__p + 47) < 0)
    operator delete(__p[3]);
  operator delete(__p);
}

uint64_t sub_22EF8BF84(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABB028;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_22EF8BFC0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABB028;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF8C00C(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = off_24FABB028;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = v2 + 24;
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 24);
    *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  }
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  return v2;
}

__n128 sub_22EF8C080(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = off_24FABB028;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = (_BYTE *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v4, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    *(_OWORD *)v4 = v5;
  }
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

void sub_22EF8C0E8(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_22EF8C0FC(void **__p)
{
  if (*((char *)__p + 47) < 0)
    operator delete(__p[3]);
  operator delete(__p);
}

_QWORD *sub_22EF8C12C(char *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *result;
  char v14;
  _BYTE *v15;
  uint64_t (**v16)(_QWORD *);
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _BYTE *v20;
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 8;
  if (!a1[1])
  {
    v14 = *a1;
    if (*a1)
    {
      v15 = operator new(0x40uLL);
      *(_QWORD *)v15 = off_24FABB070;
      v15[8] = v14;
      *((_QWORD *)v15 + 2) = a1;
      *((_QWORD *)v15 + 3) = 0x72656E6E69;
      v15[47] = 5;
      *((_QWORD *)v15 + 6) = a2;
      *((_QWORD *)v15 + 7) = a3;
      v22 = v15;
      sub_22E536AAC((uint64_t)v6, (unint64_t)v21);
      result = v22;
      if (v22 != v21)
      {
LABEL_13:
        if (!result)
        {
LABEL_19:
          *a1 = 0;
          return result;
        }
        v16 = (uint64_t (**)(_QWORD *))(*result + 40);
LABEL_18:
        result = (_QWORD *)(*v16)(result);
        goto LABEL_19;
      }
    }
    else
    {
      v17 = *((_QWORD *)a1 + 1) + 32 * *((unsigned int *)a1 + 4);
      LOBYTE(v21[0]) = 0;
      v18 = *(_QWORD *)(v17 - 8);
      if (!v18)
LABEL_21:
        sub_22E4A06C4();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v18 + 48))(v18, v21);
      v19 = (_QWORD *)(*((_QWORD *)a1 + 1) + 32 * *((unsigned int *)a1 + 4) - 32);
      v20 = operator new(0x40uLL);
      *(_QWORD *)v20 = off_24FABB070;
      v20[8] = 0;
      *((_QWORD *)v20 + 2) = a1;
      *((_QWORD *)v20 + 3) = 0x72656E6E69;
      v20[47] = 5;
      *((_QWORD *)v20 + 6) = a2;
      *((_QWORD *)v20 + 7) = a3;
      v22 = v20;
      sub_22E63BEA4(v21, v19);
      result = v22;
      if (v22 != v21)
        goto LABEL_13;
    }
    v16 = (uint64_t (**)(_QWORD *))(v21[0] + 32);
    result = v21;
    goto LABEL_18;
  }
  a1[1] = 0;
  llvm::json::OStream::objectBegin((llvm::json::OStream *)(a1 + 1048));
  sub_22F08A974(a2 + 8, a3);
  sub_22EF8C36C(a2, a3);
  LODWORD(v7) = *((_DWORD *)a1 + 4);
  if ((_DWORD)v7)
  {
    while (1)
    {
      v8 = *v6 + 32 * v7;
      LOBYTE(v21[0]) = 1;
      v9 = *(_QWORD *)(v8 - 8);
      if (!v9)
        goto LABEL_21;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 48))(v9, v21);
      v7 = (*((_DWORD *)a1 + 4) - 1);
      *((_DWORD *)a1 + 4) = v7;
      v10 = *((_QWORD *)a1 + 1) + 32 * v7;
      v11 = *(_QWORD **)(v10 + 24);
      if (v11 == (_QWORD *)v10)
        break;
      if (v11)
      {
        v12 = 5;
LABEL_8:
        (*(void (**)(void))(*v11 + 8 * v12))();
        LODWORD(v7) = *((_DWORD *)a1 + 4);
      }
      if (!(_DWORD)v7)
        goto LABEL_10;
    }
    v11 = (_QWORD *)(*((_QWORD *)a1 + 1) + 32 * v7);
    v12 = 4;
    goto LABEL_8;
  }
LABEL_10:
  result = (_QWORD *)llvm::json::OStream::objectEnd((llvm::json::OStream *)(a1 + 1048));
  a1[1] = 1;
  return result;
}

void sub_22EF8C36C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_22EF8C3AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_22EF87230((unsigned __int8 *)(v2 + 8), 0, 0, *(_QWORD *)(a2 + 48), v2);
}

void sub_22EF8C488(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a2 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      sub_22EF87230((unsigned __int8 *)(v2 + 8), 0, 0, v6, v2);
      v5 -= 8;
    }
    while (v5);
  }
  sub_22EF8C39C();
}

void sub_22EF8C4C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a2 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      sub_22EF87230((unsigned __int8 *)(v2 + 8), 0, 0, v6, v2);
      v5 -= 8;
    }
    while (v5);
  }
  sub_22EF8C39C();
}

void sub_22EF8C4F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a2 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      sub_22EF87230((unsigned __int8 *)(v2 + 8), 0, 0, v6, v2);
      v5 -= 8;
    }
    while (v5);
  }
  sub_22EF8C39C();
}

void sub_22EF8C530(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a2 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      sub_22EF87230((unsigned __int8 *)(v2 + 8), 0, 0, v6, v2);
      v5 -= 8;
    }
    while (v5);
  }
  sub_22EF8C39C();
}

void sub_22EF8C568(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a2 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      sub_22EF87230((unsigned __int8 *)(v2 + 8), 0, 0, v6, v2);
      v5 -= 8;
    }
    while (v5);
  }
  sub_22EF8C39C();
}

void sub_22EF8C5A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a2 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      sub_22EF87230((unsigned __int8 *)(v2 + 8), 0, 0, v6, v2);
      v5 -= 8;
    }
    while (v5);
  }
  sub_22EF8C39C();
}

void sub_22EF8C5D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t *v6;

  v3 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t ***)(a2 + 48);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      sub_22F37650C(v2, *v6);
      v5 -= 8;
    }
    while (v5);
  }
  sub_22EF8C39C();
}

_QWORD *sub_22EF8C604(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_22EF8C12C((char *)(v2 + 8), v2, *(_QWORD *)(a2 + 56));
}

void sub_22EF8C620(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_22F377810(v2, a2);
}

void sub_22EF8C634(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_22F3778A8(v2, a2);
}

void sub_22EF8C648(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_22F3778A8(v2, a2);
}

void sub_22EF8C65C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_22F3778A8(v2, a2);
}

void sub_22EF8C670(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_22F3778A8(v2, a2);
}

void sub_22EF8C684(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_22F377900(v2, a2);
}

void sub_22EF8C698(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_22F3778A8(v2, a2);
}

void sub_22EF8C6AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_22F377974(v2, a2);
}

void sub_22EF8C6C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_22F377900(v2, a2);
}

void sub_22EF8C6D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_22F377900(v2, a2);
}

void sub_22EF8C6E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_22F377A20(v2, a2);
}

uint64_t sub_22EF8C6FC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABB070;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_22EF8C738(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABB070;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF8C784(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = off_24FABB070;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = v2 + 24;
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 24);
    *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  }
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  return v2;
}

__n128 sub_22EF8C7F8(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = off_24FABB070;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = (_BYTE *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v4, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    *(_OWORD *)v4 = v5;
  }
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

void sub_22EF8C860(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_22EF8C874(void **__p)
{
  if (*((char *)__p + 47) < 0)
    operator delete(__p[3]);
  operator delete(__p);
}

uint64_t sub_22EF8C8A4(char *a1, uint64_t *a2)
{
  _QWORD *v4;
  char v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  uint64_t result;
  uint64_t (**v12)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 8;
  if (a1[1])
  {
    a1[1] = 0;
    llvm::json::OStream::objectBegin((llvm::json::OStream *)(a1 + 1048));
    sub_22F377CB4(a2);
    LODWORD(v13) = *((_DWORD *)a1 + 4);
    if (!(_DWORD)v13)
    {
LABEL_21:
      result = llvm::json::OStream::objectEnd((llvm::json::OStream *)(a1 + 1048));
      a1[1] = 1;
      return result;
    }
    while (1)
    {
      v14 = *v4 + 32 * v13;
      LOBYTE(v21[0]) = 1;
      v15 = *(_QWORD *)(v14 - 8);
      if (!v15)
        goto LABEL_22;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v15 + 48))(v15, v21);
      v13 = (*((_DWORD *)a1 + 4) - 1);
      *((_DWORD *)a1 + 4) = v13;
      v16 = *((_QWORD *)a1 + 1) + 32 * v13;
      v17 = *(_QWORD **)(v16 + 24);
      if (v17 == (_QWORD *)v16)
        break;
      if (v17)
      {
        v18 = 5;
LABEL_19:
        (*(void (**)(void))(*v17 + 8 * v18))();
        LODWORD(v13) = *((_DWORD *)a1 + 4);
      }
      if (!(_DWORD)v13)
        goto LABEL_21;
    }
    v17 = (_QWORD *)(*((_QWORD *)a1 + 1) + 32 * v13);
    v18 = 4;
    goto LABEL_19;
  }
  v5 = *a1;
  v19 = *(_OWORD *)a2;
  v20 = a2[2];
  if (*a1)
  {
    v6 = operator new(0x48uLL);
    *(_QWORD *)v6 = off_24FABB0B8;
    v6[8] = v5;
    *((_QWORD *)v6 + 2) = a1;
    *((_QWORD *)v6 + 3) = 0x72656E6E69;
    v6[47] = 5;
    *((_OWORD *)v6 + 3) = *(_OWORD *)a2;
    *((_QWORD *)v6 + 8) = a2[2];
    v22 = v6;
    sub_22E536AAC((uint64_t)v4, (unint64_t)v21);
  }
  else
  {
    v7 = *((_QWORD *)a1 + 1) + 32 * *((unsigned int *)a1 + 4);
    LOBYTE(v21[0]) = 0;
    v8 = *(_QWORD *)(v7 - 8);
    if (!v8)
LABEL_22:
      sub_22E4A06C4();
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 48))(v8, v21);
    v9 = (_QWORD *)(*((_QWORD *)a1 + 1) + 32 * *((unsigned int *)a1 + 4) - 32);
    v10 = operator new(0x48uLL);
    *(_QWORD *)v10 = off_24FABB0B8;
    v10[8] = 0;
    *((_QWORD *)v10 + 2) = a1;
    *((_QWORD *)v10 + 3) = 0x72656E6E69;
    v10[47] = 5;
    *((_OWORD *)v10 + 3) = v19;
    *((_QWORD *)v10 + 8) = v20;
    v22 = v10;
    sub_22E63BEA4(v21, v9);
  }
  result = (uint64_t)v22;
  if (v22 == v21)
  {
    v12 = (uint64_t (**)(void))(v21[0] + 32);
    goto LABEL_10;
  }
  if (v22)
  {
    v12 = (uint64_t (**)(void))(*v22 + 40);
LABEL_10:
    result = (*v12)();
  }
  *a1 = 0;
  return result;
}

uint64_t sub_22EF8CAE8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABB0B8;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_22EF8CB24(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABB0B8;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF8CB70(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = off_24FABB0B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = v2 + 24;
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 24);
    *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  }
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  *((_QWORD *)v2 + 8) = *(_QWORD *)(a1 + 64);
  return v2;
}

__n128 sub_22EF8CBEC(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = off_24FABB0B8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = (_BYTE *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v4, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    *(_OWORD *)v4 = v5;
  }
  result = *(__n128 *)(a1 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

void sub_22EF8CC5C(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_22EF8CC70(void **__p)
{
  if (*((char *)__p + 47) < 0)
    operator delete(__p[3]);
  operator delete(__p);
}

uint64_t sub_22EF8CCA0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABB100;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_22EF8CCDC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABB100;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF8CD28(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = off_24FABB100;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = v2 + 24;
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 24);
    *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  }
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  return v2;
}

__n128 sub_22EF8CD9C(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = off_24FABB100;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = (_BYTE *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_22E3BB2B4(v4, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    *(_OWORD *)v4 = v5;
  }
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

void sub_22EF8CE04(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_22EF8CE18(void **__p)
{
  if (*((char *)__p + 47) < 0)
    operator delete(__p[3]);
  operator delete(__p);
}

llvm::raw_ostream *sub_22EF8CE48(_BYTE *a1, void *__src, size_t __len, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v13;
  llvm::raw_ostream *result;
  _BYTE *v16;
  size_t v17;
  size_t v18;
  _QWORD *v19;
  char v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char v26;
  char *v27;
  uint64_t (**v28)(void);
  _BYTE v29[24];
  _QWORD *v30;
  __int128 v31;
  __int128 v32;
  _QWORD v33[2];
  _QWORD v34[2];
  _QWORD v35[3];
  llvm::raw_ostream *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v32 = a4;
  *((_QWORD *)&v32 + 1) = a5;
  if (!a1[1056])
  {
    *(_QWORD *)v29 = a1;
    *(_OWORD *)&v29[8] = v32;
    v13 = &v30;
    if (!__src)
    {
      v30 = 0;
      v31 = 0uLL;
      goto LABEL_27;
    }
    if (__len >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (__len >= 0x17)
    {
      v17 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17)
        v17 = __len | 7;
      v18 = v17 + 1;
      v13 = operator new(v17 + 1);
      *(_QWORD *)&v31 = __len;
      *((_QWORD *)&v31 + 1) = v18 | 0x8000000000000000;
      v30 = v13;
    }
    else
    {
      HIBYTE(v31) = __len;
      if (!__len)
        goto LABEL_26;
    }
    memmove(v13, __src, __len);
LABEL_26:
    *((_BYTE *)v13 + __len) = 0;
LABEL_27:
    if (a1[1057])
    {
      v19 = v30;
      v33[0] = v31;
      *(_QWORD *)((char *)v33 + 7) = *(_QWORD *)((char *)&v31 + 7);
      v20 = HIBYTE(v31);
      v21 = (char *)operator new(0x38uLL);
      *(_QWORD *)v21 = off_24FABB1D8;
      *(_OWORD *)(v21 + 8) = *(_OWORD *)v29;
      *((_QWORD *)v21 + 3) = *(_QWORD *)&v29[16];
      *((_QWORD *)v21 + 4) = v19;
      *((_QWORD *)v21 + 5) = v33[0];
      *(_QWORD *)(v21 + 47) = *(_QWORD *)((char *)v33 + 7);
      v21[55] = v20;
      v36 = (llvm::raw_ostream *)v21;
      sub_22E536AAC((uint64_t)(a1 + 16), (unint64_t)v35);
    }
    else
    {
      v22 = *((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6);
      LOBYTE(v35[0]) = 0;
      v23 = *(_QWORD *)(v22 - 8);
      if (!v23)
LABEL_38:
        sub_22E4A06C4();
      (*(void (**)(uint64_t, _QWORD *, size_t))(*(_QWORD *)v23 + 48))(v23, v35, __len);
      v24 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6) - 32);
      v25 = v30;
      v34[0] = v31;
      *(_QWORD *)((char *)v34 + 7) = *(_QWORD *)((char *)&v31 + 7);
      v26 = HIBYTE(v31);
      v27 = (char *)operator new(0x38uLL);
      *(_QWORD *)v27 = off_24FABB1D8;
      *(_OWORD *)(v27 + 8) = *(_OWORD *)v29;
      *((_QWORD *)v27 + 3) = *(_QWORD *)&v29[16];
      *((_QWORD *)v27 + 4) = v25;
      *((_QWORD *)v27 + 5) = v34[0];
      *(_QWORD *)(v27 + 47) = *(_QWORD *)((char *)v34 + 7);
      v27[55] = v26;
      v36 = (llvm::raw_ostream *)v27;
      sub_22E63BEA4(v35, v24);
    }
    result = v36;
    if (v36 == (llvm::raw_ostream *)v35)
    {
      v28 = (uint64_t (**)(void))(v35[0] + 32);
    }
    else
    {
      if (!v36)
      {
LABEL_36:
        a1[1057] = 0;
        return result;
      }
      v28 = (uint64_t (**)(void))(*(_QWORD *)v36 + 40);
    }
    result = (llvm::raw_ostream *)(*v28)();
    goto LABEL_36;
  }
  a1[1056] = 0;
  sub_22EF8D174((uint64_t)&v32);
  LODWORD(v6) = *((_DWORD *)a1 + 6);
  if ((_DWORD)v6)
  {
    while (1)
    {
      v7 = *((_QWORD *)a1 + 2) + 32 * v6;
      v29[0] = 1;
      v8 = *(_QWORD *)(v7 - 8);
      if (!v8)
        goto LABEL_38;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 48))(v8, v29);
      v6 = (*((_DWORD *)a1 + 6) - 1);
      *((_DWORD *)a1 + 6) = v6;
      v9 = *((_QWORD *)a1 + 2) + 32 * v6;
      v10 = *(_QWORD **)(v9 + 24);
      if (v10 == (_QWORD *)v9)
        break;
      if (v10)
      {
        v11 = 5;
LABEL_8:
        (*(void (**)(void))(*v10 + 8 * v11))();
        LODWORD(v6) = *((_DWORD *)a1 + 6);
      }
      if (!(_DWORD)v6)
        goto LABEL_10;
    }
    v10 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * v6);
    v11 = 4;
    goto LABEL_8;
  }
LABEL_10:
  if ((char)a1[1087] < 0)
  {
    **((_BYTE **)a1 + 133) = 0;
    *((_QWORD *)a1 + 134) = 0;
  }
  else
  {
    a1[1064] = 0;
    a1[1087] = 0;
  }
  result = *(llvm::raw_ostream **)a1;
  v16 = *(_BYTE **)(*(_QWORD *)a1 + 32);
  if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v16)
  {
    result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, "\n");
  }
  else
  {
    *v16 = 10;
    ++*((_QWORD *)result + 4);
  }
  a1[1056] = 1;
  return result;
}

void sub_22EF8D174(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;

  v2 = *(unsigned __int8 **)a1;
  v1 = *(_QWORD *)(a1 + 8);
  if (!*(_QWORD *)a1)
  {
    sub_22F0F8D78(v1 + 8, 0);
    return;
  }
  if (*v2 - 102 <= 0x84 && *(_DWORD *)(v1 + 4) == 1)
  {
    v2 = sub_22EFFF5EC(*(unsigned __int8 **)a1);
    v3 = v1 + 8;
    sub_22F0F8D78(v1 + 8, v2);
    if (!v2)
      return;
  }
  else
  {
    v3 = v1 + 8;
    sub_22F0F8D78(v1 + 8, v2);
  }
  v4 = *v2;
  if ((v4 & 0xFE) == 0x70)
  {
    if ((*(_DWORD *)v2 & 0xFC0000u) < 0x840000)
    {
      v4 = *v2;
      if (v4 == 12 || v4 == 176 || v4 == 219)
        return;
      goto LABEL_16;
    }
LABEL_12:
    __asm { BR              X10 }
  }
  if (v4 != 233)
    goto LABEL_12;
LABEL_16:
  if (*(_DWORD *)(v1 + 4) != 1
    || ((v4 - 130) > 0x34 || ((1 << (v4 + 126)) & 0x10000000001F01) == 0) && v4 != 5)
  {
    sub_22F0D492C((uint64_t)v2);
    v10 = v12;
    v5 = v14;
    v11 = v13;
    v6 = *((_QWORD *)&v14 + 1);
    v7 = *((_QWORD *)&v12 + 1);
    v8 = (uint64_t *)v12;
    if (v12 != v14)
    {
      do
      {
        if ((v7 & 3) != 0)
        {
          if ((v7 & 0xFFFFFFFFFFFFFFFCLL) == 0)
            sub_22F3AC1A8(*v8);
          sub_22EF8CE48(v3, 0, 0);
          if (v7 >= 4)
            sub_22F0D8720((uint64_t)&v10);
          else
            sub_22F3F2FE0((uint64_t)&v10, 1);
        }
        else
        {
          sub_22EF8CE48(v3, 0, 0);
          *(_QWORD *)&v10 = v8 + 1;
        }
        v7 = *((_QWORD *)&v10 + 1);
        v8 = (uint64_t *)v10;
      }
      while ((_QWORD)v10 != v5 || *((_QWORD *)&v10 + 1) != v6);
    }
  }
}

void sub_22EF8E298(uint64_t a1, unsigned int *a2)
{
  int v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v15[3];
  uint64_t v16;
  __int128 v17;

  v2 = a1;
  v3 = *a2;
  v4 = (char *)a2 + (v3 >> 24);
  v5 = a2[4];
  v11 = (unint64_t)v4;
  *((_QWORD *)&v12 + 1) = &v4[8 * ((v3 >> 18) & 1) + 8 + 8 * v5];
  *(_QWORD *)&v13 = 0;
  sub_22F3763E8((uint64_t)v15, &v11, a1);
  v11 = v15[0];
  v12 = v15[1];
  v13 = v15[2];
  v6 = v17;
  v14 = v16;
  v7 = *((_QWORD *)&v17 + 1);
  v8 = *((_QWORD *)&v15[0] + 1);
  v9 = *(uint64_t **)&v15[0];
  if (v15[0] != v17)
  {
    do
    {
      if ((v8 & 3) != 0)
      {
        if ((v8 & 0xFFFFFFFFFFFFFFFCLL) == 0)
          sub_22F3AC1A8(*v9);
        sub_22EF8CE48(v2 + 8, 0, 0);
        if (v8 >= 4)
          sub_22F0D8720((uint64_t)&v11);
        else
          sub_22F3F2FE0((uint64_t)&v11, 1);
      }
      else
      {
        sub_22EF8CE48(v2 + 8, 0, 0);
        *(_QWORD *)&v11 = v9 + 1;
      }
      sub_22EF88D74((uint64_t **)&v11);
      v8 = *((_QWORD *)&v11 + 1);
      v9 = (uint64_t *)v11;
    }
    while ((_QWORD)v11 != v6 || *((_QWORD *)&v11 + 1) != v7);
  }
}

llvm::raw_ostream *sub_22EF8E3C4(_BYTE *a1, uint64_t *a2)
{
  _QWORD *v4;
  __int128 v5;
  llvm::raw_ostream *result;
  uint64_t (**v7)(llvm::raw_ostream *);
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _BYTE *v18;
  __int128 v19;
  __int128 v20;
  _QWORD v21[3];
  llvm::raw_ostream *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (!a1[1056])
  {
    v19 = *(_OWORD *)a2;
    v20 = *((_OWORD *)a2 + 1);
    if (a1[1057])
    {
      v4 = operator new(0x48uLL);
      *v4 = off_24FABB148;
      v4[1] = a1;
      v5 = *((_OWORD *)a2 + 1);
      *((_OWORD *)v4 + 1) = *(_OWORD *)a2;
      *((_OWORD *)v4 + 2) = v5;
      v4[6] = 0;
      *((_BYTE *)v4 + 71) = 0;
      v22 = (llvm::raw_ostream *)v4;
      sub_22E536AAC((uint64_t)(a1 + 16), (unint64_t)v21);
      result = v22;
      if (v22 != (llvm::raw_ostream *)v21)
      {
LABEL_4:
        if (!result)
        {
LABEL_10:
          a1[1057] = 0;
          return result;
        }
        v7 = (uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)result + 40);
LABEL_9:
        result = (llvm::raw_ostream *)(*v7)(result);
        goto LABEL_10;
      }
    }
    else
    {
      v8 = *((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6);
      LOBYTE(v21[0]) = 0;
      v9 = *(_QWORD *)(v8 - 8);
      if (!v9)
LABEL_27:
        sub_22E4A06C4();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 48))(v9, v21);
      v10 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6) - 32);
      v11 = operator new(0x48uLL);
      *v11 = off_24FABB148;
      v11[1] = a1;
      *((_OWORD *)v11 + 1) = v19;
      *((_OWORD *)v11 + 2) = v20;
      v11[6] = 0;
      *((_BYTE *)v11 + 71) = 0;
      v22 = (llvm::raw_ostream *)v11;
      sub_22E63BEA4(v21, v10);
      result = v22;
      if (v22 != (llvm::raw_ostream *)v21)
        goto LABEL_4;
    }
    v7 = (uint64_t (**)(llvm::raw_ostream *))(v21[0] + 32);
    result = (llvm::raw_ostream *)v21;
    goto LABEL_9;
  }
  a1[1056] = 0;
  sub_22F3785CC(a2);
  LODWORD(v12) = *((_DWORD *)a1 + 6);
  if ((_DWORD)v12)
  {
    while (1)
    {
      v13 = *((_QWORD *)a1 + 2) + 32 * v12;
      LOBYTE(v21[0]) = 1;
      v14 = *(_QWORD *)(v13 - 8);
      if (!v14)
        goto LABEL_27;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 48))(v14, v21);
      v12 = (*((_DWORD *)a1 + 6) - 1);
      *((_DWORD *)a1 + 6) = v12;
      v15 = *((_QWORD *)a1 + 2) + 32 * v12;
      v16 = *(_QWORD **)(v15 + 24);
      if (v16 == (_QWORD *)v15)
        break;
      if (v16)
      {
        v17 = 5;
LABEL_18:
        (*(void (**)(void))(*v16 + 8 * v17))();
        LODWORD(v12) = *((_DWORD *)a1 + 6);
      }
      if (!(_DWORD)v12)
        goto LABEL_20;
    }
    v16 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * v12);
    v17 = 4;
    goto LABEL_18;
  }
LABEL_20:
  if ((char)a1[1087] < 0)
  {
    **((_BYTE **)a1 + 133) = 0;
    *((_QWORD *)a1 + 134) = 0;
  }
  else
  {
    a1[1064] = 0;
    a1[1087] = 0;
  }
  result = *(llvm::raw_ostream **)a1;
  v18 = *(_BYTE **)(*(_QWORD *)a1 + 32);
  if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v18)
  {
    result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, "\n");
  }
  else
  {
    *v18 = 10;
    ++*((_QWORD *)result + 4);
  }
  a1[1056] = 1;
  return result;
}

uint64_t sub_22EF8E614(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABB148;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  return a1;
}

void sub_22EF8E650(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABB148;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF8E69C(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = off_24FABB148;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  v3 = v2 + 48;
  if (*(char *)(a1 + 71) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 48), *(_QWORD *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 48);
    *((_QWORD *)v2 + 8) = *(_QWORD *)(a1 + 64);
  }
  return v2;
}

char *sub_22EF8E718(char *result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _BYTE *v4;
  __int128 v5;

  *(_QWORD *)a2 = off_24FABB148;
  v2 = *(_OWORD *)(result + 8);
  v3 = *(_OWORD *)(result + 24);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)result + 5);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  v4 = (_BYTE *)(a2 + 48);
  if (result[71] < 0)
    return (char *)sub_22E3BB2B4(v4, *((void **)result + 6), *((_QWORD *)result + 7));
  v5 = *((_OWORD *)result + 3);
  *(_QWORD *)(a2 + 64) = *((_QWORD *)result + 8);
  *(_OWORD *)v4 = v5;
  return result;
}

void sub_22EF8E76C(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void sub_22EF8E780(void **__p)
{
  if (*((char *)__p + 71) < 0)
    operator delete(__p[6]);
  operator delete(__p);
}

llvm::raw_ostream *sub_22EF8E7B0(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  llvm::raw_ostream *result;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t (**v17)(void);
  __int128 v18;
  _QWORD v19[3];
  llvm::raw_ostream *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v18 = a2;
  *((_QWORD *)&v18 + 1) = a3;
  if (!a1[1056])
  {
    if (a1[1057])
    {
      v10 = operator new(0x38uLL);
      *v10 = off_24FABB190;
      v10[1] = a1;
      *((_OWORD *)v10 + 1) = v18;
      v10[4] = 0;
      *((_BYTE *)v10 + 55) = 0;
      v20 = (llvm::raw_ostream *)v10;
      sub_22E536AAC((uint64_t)(a1 + 16), (unint64_t)v19);
    }
    else
    {
      v13 = *((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6);
      LOBYTE(v19[0]) = 0;
      v14 = *(_QWORD *)(v13 - 8);
      if (!v14)
LABEL_28:
        sub_22E4A06C4();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 48))(v14, v19);
      v15 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6) - 32);
      v16 = operator new(0x38uLL);
      *v16 = off_24FABB190;
      v16[1] = a1;
      *((_OWORD *)v16 + 1) = v18;
      v16[4] = 0;
      *((_BYTE *)v16 + 55) = 0;
      v20 = (llvm::raw_ostream *)v16;
      sub_22E63BEA4(v19, v15);
    }
    result = v20;
    if (v20 == (llvm::raw_ostream *)v19)
    {
      v17 = (uint64_t (**)(void))(v19[0] + 32);
    }
    else
    {
      if (!v20)
      {
LABEL_25:
        a1[1057] = 0;
        return result;
      }
      v17 = (uint64_t (**)(void))(*(_QWORD *)v20 + 40);
    }
    result = (llvm::raw_ostream *)(*v17)();
    goto LABEL_25;
  }
  a1[1056] = 0;
  sub_22EF8E9F0((uint64_t *)&v18);
  LODWORD(v4) = *((_DWORD *)a1 + 6);
  if ((_DWORD)v4)
  {
    while (1)
    {
      v5 = *((_QWORD *)a1 + 2) + 32 * v4;
      LOBYTE(v19[0]) = 1;
      v6 = *(_QWORD *)(v5 - 8);
      if (!v6)
        goto LABEL_28;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 48))(v6, v19);
      v4 = (*((_DWORD *)a1 + 6) - 1);
      *((_DWORD *)a1 + 6) = v4;
      v7 = *((_QWORD *)a1 + 2) + 32 * v4;
      v8 = *(_QWORD **)(v7 + 24);
      if (v8 == (_QWORD *)v7)
        break;
      if (v8)
      {
        v9 = 5;
LABEL_8:
        (*(void (**)(void))(*v8 + 8 * v9))();
        LODWORD(v4) = *((_DWORD *)a1 + 6);
      }
      if (!(_DWORD)v4)
        goto LABEL_10;
    }
    v8 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * v4);
    v9 = 4;
    goto LABEL_8;
  }
LABEL_10:
  if ((char)a1[1087] < 0)
  {
    **((_BYTE **)a1 + 133) = 0;
    *((_QWORD *)a1 + 134) = 0;
  }
  else
  {
    a1[1064] = 0;
    a1[1087] = 0;
  }
  result = *(llvm::raw_ostream **)a1;
  v12 = *(_BYTE **)(*(_QWORD *)a1 + 32);
  if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v12)
  {
    result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, "\n");
  }
  else
  {
    *v12 = 10;
    ++*((_QWORD *)result + 4);
  }
  a1[1056] = 1;
  return result;
}

llvm::raw_ostream *sub_22EF8E9F0(uint64_t *a1)
{
  uint64_t v2;
  _BYTE *v3;
  llvm::raw_ostream *result;
  uint64_t v5;
  unsigned int v6;

  v2 = *a1;
  v3 = (_BYTE *)(*a1 + 8);
  result = sub_22F0FD9C0((uint64_t)v3, a1[1]);
  v5 = a1[1];
  if (v5)
  {
    v6 = *(_DWORD *)v5;
    if (*(_DWORD *)v5)
    {
      if (v6 <= 2)
      {
        if (*(_DWORD *)(v5 + 40) != 1)
          result = (llvm::raw_ostream *)sub_22EF8CE48((int)v3, 0, 0);
        if (*(_QWORD *)(v5 + 24) >= 8uLL)
          return (llvm::raw_ostream *)sub_22EF8CE48((int)v3, 0, 0);
      }
      else if (v6 == 3 && (*(_QWORD *)(v5 + 8) & 2) == 0)
      {
        return (llvm::raw_ostream *)sub_22EF8CE48((int)v3, 0, 0);
      }
    }
    else if (*(_DWORD *)(v5 + 16) != 1)
    {
      return sub_22EF83028(v3, v2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFF0));
    }
  }
  return result;
}

uint64_t sub_22EF8EAFC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABB190;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_22EF8EB38(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABB190;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF8EB84(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_24FABB190;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  v3 = v2 + 32;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  }
  return v2;
}

char *sub_22EF8EBF8(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_24FABB190;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *((_QWORD *)result + 3);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (_BYTE *)(a2 + 32);
  if (result[55] < 0)
    return (char *)sub_22E3BB2B4(v3, *((void **)result + 4), *((_QWORD *)result + 5));
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)result + 6);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22EF8EC44(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_22EF8EC58(void **__p)
{
  if (*((char *)__p + 55) < 0)
    operator delete(__p[4]);
  operator delete(__p);
}

uint64_t sub_22EF8EC88(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABB1D8;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_22EF8ECC4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABB1D8;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF8ED10(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_24FABB1D8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  v3 = v2 + 32;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  }
  return v2;
}

char *sub_22EF8ED84(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_24FABB1D8;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *((_QWORD *)result + 3);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (_BYTE *)(a2 + 32);
  if (result[55] < 0)
    return (char *)sub_22E3BB2B4(v3, *((void **)result + 4), *((_QWORD *)result + 5));
  v4 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)result + 6);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22EF8EDD0(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_22EF8EDE4(void **__p)
{
  if (*((char *)__p + 55) < 0)
    operator delete(__p[4]);
  operator delete(__p);
}

llvm::raw_ostream *sub_22EF8EE14(_BYTE *a1, uint64_t *a2)
{
  _QWORD *v4;
  llvm::raw_ostream *result;
  uint64_t (**v6)(llvm::raw_ostream *);
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _BYTE *v17;
  __int128 v18;
  uint64_t v19;
  _QWORD v20[3];
  llvm::raw_ostream *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (!a1[1056])
  {
    v18 = *(_OWORD *)a2;
    v19 = a2[2];
    if (a1[1057])
    {
      v4 = operator new(0x40uLL);
      *v4 = off_24FABB220;
      v4[1] = a1;
      *((_OWORD *)v4 + 1) = *(_OWORD *)a2;
      v4[4] = a2[2];
      v4[5] = 0;
      *((_BYTE *)v4 + 63) = 0;
      v21 = (llvm::raw_ostream *)v4;
      sub_22E536AAC((uint64_t)(a1 + 16), (unint64_t)v20);
      result = v21;
      if (v21 != (llvm::raw_ostream *)v20)
      {
LABEL_4:
        if (!result)
        {
LABEL_10:
          a1[1057] = 0;
          return result;
        }
        v6 = (uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)result + 40);
LABEL_9:
        result = (llvm::raw_ostream *)(*v6)(result);
        goto LABEL_10;
      }
    }
    else
    {
      v7 = *((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6);
      LOBYTE(v20[0]) = 0;
      v8 = *(_QWORD *)(v7 - 8);
      if (!v8)
LABEL_27:
        sub_22E4A06C4();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 48))(v8, v20);
      v9 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6) - 32);
      v10 = operator new(0x40uLL);
      *v10 = off_24FABB220;
      v10[1] = a1;
      *((_OWORD *)v10 + 1) = v18;
      v10[4] = v19;
      v10[5] = 0;
      *((_BYTE *)v10 + 63) = 0;
      v21 = (llvm::raw_ostream *)v10;
      sub_22E63BEA4(v20, v9);
      result = v21;
      if (v21 != (llvm::raw_ostream *)v20)
        goto LABEL_4;
    }
    v6 = (uint64_t (**)(llvm::raw_ostream *))(v20[0] + 32);
    result = (llvm::raw_ostream *)v20;
    goto LABEL_9;
  }
  a1[1056] = 0;
  sub_22F378D3C(a2);
  LODWORD(v11) = *((_DWORD *)a1 + 6);
  if ((_DWORD)v11)
  {
    while (1)
    {
      v12 = *((_QWORD *)a1 + 2) + 32 * v11;
      LOBYTE(v20[0]) = 1;
      v13 = *(_QWORD *)(v12 - 8);
      if (!v13)
        goto LABEL_27;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 48))(v13, v20);
      v11 = (*((_DWORD *)a1 + 6) - 1);
      *((_DWORD *)a1 + 6) = v11;
      v14 = *((_QWORD *)a1 + 2) + 32 * v11;
      v15 = *(_QWORD **)(v14 + 24);
      if (v15 == (_QWORD *)v14)
        break;
      if (v15)
      {
        v16 = 5;
LABEL_18:
        (*(void (**)(void))(*v15 + 8 * v16))();
        LODWORD(v11) = *((_DWORD *)a1 + 6);
      }
      if (!(_DWORD)v11)
        goto LABEL_20;
    }
    v15 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * v11);
    v16 = 4;
    goto LABEL_18;
  }
LABEL_20:
  if ((char)a1[1087] < 0)
  {
    **((_BYTE **)a1 + 133) = 0;
    *((_QWORD *)a1 + 134) = 0;
  }
  else
  {
    a1[1064] = 0;
    a1[1087] = 0;
  }
  result = *(llvm::raw_ostream **)a1;
  v17 = *(_BYTE **)(*(_QWORD *)a1 + 32);
  if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v17)
  {
    result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, "\n");
  }
  else
  {
    *v17 = 10;
    ++*((_QWORD *)result + 4);
  }
  a1[1056] = 1;
  return result;
}

uint64_t sub_22EF8F074(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABB220;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  return a1;
}

void sub_22EF8F0B0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FABB220;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EF8F0FC(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = off_24FABB220;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  v3 = v2 + 40;
  if (*(char *)(a1 + 63) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 40);
    *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  }
  return v2;
}

char *sub_22EF8F170(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_24FABB220;
  v2 = *(_OWORD *)(result + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (_BYTE *)(a2 + 40);
  if (result[63] < 0)
    return (char *)sub_22E3BB2B4(v3, *((void **)result + 5), *((_QWORD *)result + 6));
  v4 = *(_OWORD *)(result + 40);
  *(_QWORD *)(a2 + 56) = *((_QWORD *)result + 7);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22EF8F1BC(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void sub_22EF8F1D0(void **__p)
{
  if (*((char *)__p + 63) < 0)
    operator delete(__p[5]);
  operator delete(__p);
}

void sub_22EF8F200(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  void (**v13)(void);
  llvm::raw_ostream *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  void (**v20)(void);
  unsigned int v21;
  __int128 v22;
  _DWORD v23[18];
  uint64_t v24;
  void *__p[2];
  uint64_t v26;
  __int128 v27;
  uint64_t v28[9];
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  _QWORD v38[3];
  _QWORD *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (!a1[1056])
  {
    v10 = *a2;
    *(_QWORD *)&v27 = a1;
    *((_QWORD *)&v27 + 1) = v10;
    sub_22EF530AC((uint64_t)v28, (uint64_t)(a2 + 1));
    v29 = a2[10];
    HIBYTE(v31) = 0;
    LOBYTE(v30) = 0;
    if (a1[1057])
    {
      v22 = v27;
      v11 = (uint64_t *)v23;
      sub_22EF530AC((uint64_t)v23, (uint64_t)v28);
      v24 = v29;
      *(_OWORD *)__p = v30;
      v26 = v31;
      v30 = 0uLL;
      v31 = 0;
      v12 = (char *)operator new(0x80uLL);
      *(_QWORD *)v12 = &off_24FABB268;
      *(_OWORD *)(v12 + 8) = v22;
      sub_22EF530AC((uint64_t)(v12 + 24), (uint64_t)v23);
      *((_QWORD *)v12 + 12) = v24;
      *(_OWORD *)(v12 + 104) = *(_OWORD *)__p;
      *((_QWORD *)v12 + 15) = v26;
      __p[0] = 0;
      __p[1] = 0;
      v26 = 0;
      v34 = (__int128 *)v12;
      sub_22E536AAC((uint64_t)(a1 + 16), (unint64_t)&v32);
      if (v34 == &v32)
      {
        v13 = (void (**)(void))(v32 + 32);
      }
      else
      {
        if (!v34)
        {
LABEL_26:
          if (SHIBYTE(v26) < 0)
            operator delete(__p[0]);
          v21 = v23[0];
LABEL_34:
          if (v21 >= 2)
            sub_22EF53BC0(v11);
          a1[1057] = 0;
          if (SHIBYTE(v31) < 0)
            operator delete((void *)v30);
          if (LODWORD(v28[0]) >= 2)
            sub_22EF53BC0(v28);
          return;
        }
        v13 = (void (**)(void))(*(_QWORD *)v34 + 40);
      }
      (*v13)();
      goto LABEL_26;
    }
    v16 = *((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6);
    LOBYTE(v32) = 0;
    v17 = *(_QWORD *)(v16 - 8);
    if (!v17)
LABEL_42:
      sub_22E4A06C4();
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v17 + 48))(v17, &v32);
    v18 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * *((unsigned int *)a1 + 6) - 32);
    v32 = v27;
    v11 = (uint64_t *)&v33;
    sub_22EF530AC((uint64_t)&v33, (uint64_t)v28);
    v35 = v29;
    v36 = v30;
    v37 = v31;
    v30 = 0uLL;
    v31 = 0;
    v19 = (char *)operator new(0x80uLL);
    *(_QWORD *)v19 = &off_24FABB268;
    *(_OWORD *)(v19 + 8) = v32;
    sub_22EF530AC((uint64_t)(v19 + 24), (uint64_t)&v33);
    *((_QWORD *)v19 + 12) = v35;
    *(_OWORD *)(v19 + 104) = v36;
    *((_QWORD *)v19 + 15) = v37;
    v36 = 0uLL;
    v37 = 0;
    v39 = v19;
    sub_22E63BEA4(v38, v18);
    if (v39 == v38)
    {
      v20 = (void (**)(void))(v38[0] + 32);
    }
    else
    {
      if (!v39)
      {
LABEL_31:
        if (SHIBYTE(v37) < 0)
          operator delete((void *)v36);
        v21 = v33;
        goto LABEL_34;
      }
      v20 = (void (**)(void))(*v39 + 40);
    }
    (*v20)();
    goto LABEL_31;
  }
  a1[1056] = 0;
  sub_22F0FE404(*a2 + 8, (uint64_t)(a2 + 1));
  LODWORD(v4) = *((_DWORD *)a1 + 6);
  if ((_DWORD)v4)
  {
    while (1)
    {
      v5 = *((_QWORD *)a1 + 2) + 32 * v4;
      LOBYTE(v32) = 1;
      v6 = *(_QWORD *)(v5 - 8);
      if (!v6)
        goto LABEL_42;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v6 + 48))(v6, &v32);
      v4 = (*((_DWORD *)a1 + 6) - 1);
      *((_DWORD *)a1 + 6) = v4;
      v7 = *((_QWORD *)a1 + 2) + 32 * v4;
      v8 = *(_QWORD **)(v7 + 24);
      if (v8 == (_QWORD *)v7)
        break;
      if (v8)
      {
        v9 = 5;
LABEL_8:
        (*(void (**)(void))(*v8 + 8 * v9))();
        LODWORD(v4) = *((_DWORD *)a1 + 6);
      }
      if (!(_DWORD)v4)
        goto LABEL_10;
    }
    v8 = (_QWORD *)(*((_QWORD *)a1 + 2) + 32 * v4);
    v9 = 4;
    goto LABEL_8;
  }
LABEL_10:
  if ((char)a1[1087] < 0)
  {
    **((_BYTE **)a1 + 133) = 0;
    *((_QWORD *)a1 + 134) = 0;
  }
  else
  {
    a1[1064] = 0;
    a1[1087] = 0;
  }
  v14 = *(llvm::raw_ostream **)a1;
  v15 = *(_BYTE **)(*(_QWORD *)a1 + 32);
  if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v15)
  {
    llvm::raw_ostream::write(v14, "\n");
  }
  else
  {
    *v15 = 10;
    ++*((_QWORD *)v14 + 4);
  }
  a1[1056] = 1;
}

void sub_22EF8F5D8(uint64_t a1)
{
  uint64_t *v2;
  unsigned int v3;

  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  v3 = *(_DWORD *)(a1 + 24);
  v2 = (uint64_t *)(a1 + 24);
  if (v3 >= 2)
    sub_22EF53BC0(v2);
}

void sub_22EF8F620(char *__p)
{
  if (__p[127] < 0)
    operator delete(*((void **)__p + 13));
  if (*((_DWORD *)__p + 6) >= 2u)
    sub_22EF53BC0((uint64_t *)__p + 3);
  operator delete(__p);
}

uint64_t sub_22EF8F664(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24FABB268;
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(_DWORD *)(a1 + 24) >= 2u)
    sub_22EF53BC0((uint64_t *)(a1 + 24));
  return a1;
}

uint64_t sub_22EF8F6B4(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_22EF530AC(a1 + 16, a2 + 16);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v4 = (_BYTE *)(a1 + 96);
  if (*(char *)(a2 + 119) < 0)
  {
    sub_22E3BB2B4(v4, *(void **)(a2 + 96), *(_QWORD *)(a2 + 104));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_OWORD *)v4 = v5;
  }
  return a1;
}

uint64_t sub_22EF8F718(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int i;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  if (!a1 || (v2 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 4) != 0)
      v4 = *(_QWORD *)v4;
    for (i = *(_WORD *)(v4 + 8) & 0x7F; i != 83; i = *(_WORD *)(v4 + 8) & 0x7F)
    {
      v6 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v6 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_16;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_15;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_22;
        if (i == 24)
        {
LABEL_9:
          v6 = -48;
        }
        else
        {
LABEL_15:
          if (i != 70)
          {
LABEL_16:
            v7 = i - 52;
            if ((i - 33) >= 5)
              v8 = -48;
            else
              v8 = -64;
            if (v7 >= 6)
              v6 = v8;
            else
              v6 = -72;
            goto LABEL_22;
          }
          v6 = -64;
        }
      }
LABEL_22:
      v9 = *(_QWORD *)(v4 + v6 + 16);
      v4 = v9 & 0xFFFFFFFFFFFFFFF8;
      if ((v9 & 4) != 0)
        v4 = *(_QWORD *)v4;
    }
    v2 = v4 - 40;
  }
  v10 = sub_22EF6477C(*(_QWORD *)(v2 + 88), a1);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = v11 & 0xFFFFFFFFFFFFFFF8;
  if ((v11 & 4) != 0)
    v12 = *(_QWORD *)v12;
  v13 = 0;
  v14 = 0;
  if (v12 && (*(_WORD *)(v12 + 8) & 0x7Eu) - 38 >= 0xFFFFFFFC)
  {
    v15 = *(_QWORD *)(v12 + 16);
    if (v15)
    {
      v13 = 0;
      v16 = v10 & 0xFFFFFFFFFFFFFFF0;
      v17 = v10 & 7;
      while (1)
      {
        if ((*(_DWORD *)(v15 + 28) & 0x7Fu) - 52 >= 0xFFFFFFFD)
        {
          v18 = sub_22EFC2E8C(v15);
          v19 = (uint64_t *)(v15 + 48);
          if ((v18 & 1) != 0)
          {
            v20 = *v19;
            v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 8);
            v22 = v20 & 7;
LABEL_38:
            if ((v22 | v21) == (*(_QWORD *)(v16 + 8) | v17))
              goto LABEL_57;
            ++v13;
            goto LABEL_54;
          }
          do
          {
            v23 = *v19;
            v24 = (_QWORD *)(*v19 & 0xFFFFFFFFFFFFFFF0);
            v25 = *(unsigned __int8 *)(*v24 + 16);
            v19 = (uint64_t *)(*v24 + 40);
            if (*v24)
              v26 = v25 == 24;
            else
              v26 = 0;
          }
          while (v26);
          if (v25 == 45)
          {
            v27 = sub_22F114198(*(_QWORD *)(*v24 + 24));
            v28 = *(_QWORD *)(v27 + 16);
            v29 = (_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF8);
            if ((v28 & 4) != 0)
              v29 = (_QWORD *)*v29;
            if (v29 == (_QWORD *)v12 && (*(_QWORD *)(v27 + 40) < 8uLL || (*(_QWORD *)(v27 + 40) & 7) != 0))
            {
              v22 = v24[1];
              v21 = v23 & 7;
              goto LABEL_38;
            }
          }
        }
LABEL_54:
        v15 = *(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v15)
          goto LABEL_57;
      }
    }
    v13 = 0;
LABEL_57:
    v14 = 0x100000000;
  }
  return v14 | v13;
}

uint64_t sub_22EF8F978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  size_t v48;
  unint64_t v49;
  _QWORD *i;
  void *v51;
  __int128 v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  void *v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  *(_QWORD *)&v60 = v5;
  *((_QWORD *)&v60 + 1) = v6;
  v7 = sub_22F379584(**(_QWORD **)(a1 + 88), *(_DWORD *)(*(_QWORD *)(a1 + 88) + 16), v5, v6, &v62);
  if ((v7 & 1) == 0)
  {
    sub_22F37966C((uint64_t)&v62, a1 + 64, (uint64_t *)&v60);
    if ((_BYTE)v63)
    {
      v9 = *(char **)(a1 + 32);
      v10 = *(char **)(a1 + 24);
      v11 = v9 - v10;
      if (v9 == v10)
        v12 = 0;
      else
        v12 = 32 * (v9 - v10) - 1;
      v13 = *(_QWORD *)(a1 + 48);
      v14 = *(_QWORD *)(a1 + 56) + v13;
      if (v12 != v14)
        goto LABEL_29;
      v15 = (void **)(a1 + 16);
      if (v13 < 0x100)
      {
        v35 = *(char **)(a1 + 40);
        v36 = *(char **)(a1 + 16);
        if (v11 < v35 - v36)
        {
          if (v35 != v9)
          {
            *(_QWORD *)&v62 = operator new(0x1000uLL);
            sub_22F2D2D80(a1 + 16, &v62);
            goto LABEL_28;
          }
          *(_QWORD *)&v62 = operator new(0x1000uLL);
          sub_22F2D2EA4((void **)(a1 + 16), &v62);
          v37 = *(_QWORD **)(a1 + 24);
          v38 = *(char **)(a1 + 32);
          v41 = *v37;
          v39 = (char *)(v37 + 1);
          v40 = v41;
          *(_QWORD *)(a1 + 24) = v39;
          if (v38 == *(char **)(a1 + 40))
          {
            v42 = (char *)*v15;
            if (v39 <= v42)
            {
              if (v38 == v42)
                v53 = 1;
              else
                v53 = (v38 - v42) >> 2;
              if (v53 >> 61)
                goto LABEL_60;
              v54 = (char *)operator new(8 * v53);
              v55 = &v54[8 * (v53 >> 2)];
              v56 = v38 - v39;
              v30 = v38 == v39;
              v38 = v55;
              if (!v30)
              {
                v38 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
                v57 = 8 * (v56 >> 3);
                v58 = &v54[8 * (v53 >> 2)];
                do
                {
                  v59 = *(_QWORD *)v39;
                  v39 += 8;
                  *(_QWORD *)v58 = v59;
                  v58 += 8;
                  v57 -= 8;
                }
                while (v57);
              }
              *(_QWORD *)(a1 + 16) = v54;
              *(_QWORD *)(a1 + 24) = v55;
              *(_QWORD *)(a1 + 32) = v38;
              *(_QWORD *)(a1 + 40) = &v54[8 * v53];
              if (v42)
              {
                operator delete(v42);
                v38 = *(char **)(a1 + 32);
              }
            }
            else
            {
              v43 = (v39 - v42) >> 3;
              if (v43 >= -1)
                v44 = v43 + 1;
              else
                v44 = v43 + 2;
              v45 = -(v44 >> 1);
              v46 = v44 >> 1;
              v47 = &v39[-8 * v46];
              v48 = v38 - v39;
              if (v48)
              {
                memmove(&v39[-8 * v46], v39, v48);
                v39 = *(char **)(a1 + 24);
              }
              v38 = &v47[v48];
              *(_QWORD *)(a1 + 24) = &v39[8 * v45];
              *(_QWORD *)(a1 + 32) = v38;
            }
          }
          *(_QWORD *)v38 = v40;
          goto LABEL_27;
        }
        if (v35 == v36)
          v49 = 1;
        else
          v49 = (v35 - v36) >> 2;
        v64 = a1 + 40;
        if (!(v49 >> 61))
        {
          *(_QWORD *)&v62 = operator new(8 * v49);
          *((_QWORD *)&v62 + 1) = v62 + v11;
          *(_QWORD *)&v63 = v62 + v11;
          *((_QWORD *)&v63 + 1) = v62 + 8 * v49;
          v61 = operator new(0x1000uLL);
          sub_22F2D2D80((uint64_t)&v62, &v61);
          for (i = *(_QWORD **)(a1 + 32); i != *(_QWORD **)(a1 + 24); sub_22F2D2EA4((void **)&v62, i))
            --i;
          v51 = *(void **)(a1 + 16);
          v52 = v63;
          *(_OWORD *)(a1 + 16) = v62;
          *(_OWORD *)(a1 + 32) = v52;
          if (v51)
            operator delete(v51);
          goto LABEL_28;
        }
      }
      else
      {
        *(_QWORD *)(a1 + 48) = v13 - 256;
        v18 = *(_QWORD *)v10;
        v16 = v10 + 8;
        v17 = v18;
        *(_QWORD *)(a1 + 24) = v16;
        if (v9 != *(char **)(a1 + 40))
        {
LABEL_26:
          *(_QWORD *)v9 = v17;
LABEL_27:
          *(_QWORD *)(a1 + 32) += 8;
LABEL_28:
          v10 = *(char **)(a1 + 24);
          v14 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
LABEL_29:
          *(_OWORD *)(*(_QWORD *)&v10[(v14 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v14) = v60;
          ++*(_QWORD *)(a1 + 56);
          return v7 ^ 1u;
        }
        v19 = (char *)*v15;
        if (v16 > v19)
        {
          v20 = (v16 - v19) >> 3;
          if (v20 >= -1)
            v21 = v20 + 1;
          else
            v21 = v20 + 2;
          v22 = -(v21 >> 1);
          v23 = v21 >> 1;
          v24 = &v16[-8 * v23];
          v25 = v9 - v16;
          if (v9 != v16)
          {
            memmove(&v16[-8 * v23], v16, v9 - v16);
            v9 = *(char **)(a1 + 24);
          }
          v26 = &v9[8 * v22];
          v9 = &v24[v25];
          *(_QWORD *)(a1 + 24) = v26;
          *(_QWORD *)(a1 + 32) = &v24[v25];
          goto LABEL_26;
        }
        if (v9 == v19)
          v27 = 1;
        else
          v27 = (v9 - v19) >> 2;
        if (!(v27 >> 61))
        {
          v28 = (char *)operator new(8 * v27);
          v29 = &v28[8 * (v27 >> 2)];
          v31 = v9 - v16;
          v30 = v9 == v16;
          v9 = v29;
          if (!v30)
          {
            v9 = &v29[v31 & 0xFFFFFFFFFFFFFFF8];
            v32 = 8 * (v31 >> 3);
            v33 = &v28[8 * (v27 >> 2)];
            do
            {
              v34 = *(_QWORD *)v16;
              v16 += 8;
              *(_QWORD *)v33 = v34;
              v33 += 8;
              v32 -= 8;
            }
            while (v32);
          }
          *(_QWORD *)(a1 + 16) = v28;
          *(_QWORD *)(a1 + 24) = v29;
          *(_QWORD *)(a1 + 32) = v9;
          *(_QWORD *)(a1 + 40) = &v28[8 * v27];
          if (v19)
          {
            operator delete(v19);
            v9 = *(char **)(a1 + 32);
          }
          goto LABEL_26;
        }
      }
LABEL_60:
      sub_22E3B3F8C();
    }
  }
  return v7 ^ 1u;
}

uint64_t sub_22EF8FD38(uint64_t a1)
{
  uint64_t v1;
  void **v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  int v21;
  unsigned int v22;
  unsigned int v24;
  llvm::APInt *v25;
  const llvm::APInt *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t i;
  unint64_t v81;
  unint64_t j;
  unint64_t v83;
  int v84;
  unint64_t v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  uint64_t v93;
  int v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  unint64_t v100;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 *v105;
  unsigned __int8 *v106;
  uint64_t v107;
  size_t v108;
  unsigned __int8 *v109;
  void **v110;
  uint64_t v111;
  uint64_t v112;
  void **v113;
  size_t v114;
  uint64_t v115;
  unsigned __int8 *v116;
  unsigned __int8 *v117;
  uint64_t v118;
  size_t v119;
  unsigned __int8 *v120;
  void **v121;
  uint64_t v122;
  uint64_t v123;
  void **v124;
  size_t v125;
  unsigned __int8 *v126;
  unsigned __int8 *v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int8 *v130;
  unsigned __int8 *v131;
  uint64_t v132;
  size_t v133;
  unsigned __int8 *v134;
  void **p_dst;
  uint64_t v136;
  uint64_t v137;
  void **v138;
  size_t v139;
  void **v140;
  int v141;
  uint64_t v142;
  unsigned __int8 *v143;
  char v144;
  unsigned __int8 *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  unsigned __int8 *v151;
  unsigned __int8 *v152;
  uint64_t v153;
  unsigned __int8 v154;
  uint64_t v155;
  unsigned __int8 *v156;
  uint64_t v157;
  uint64_t v158;
  unsigned __int8 *v159;
  unsigned __int8 *v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  unint64_t v164;
  unsigned __int8 *v165;
  unsigned __int8 *v166;
  uint64_t v167;
  uint64_t v168;
  unsigned __int8 *v169;
  unsigned __int8 *v170;
  uint64_t v171;
  size_t v172;
  unsigned __int8 *v173;
  void **v174;
  uint64_t v175;
  uint64_t v176;
  void **v177;
  size_t v178;
  uint64_t v179;
  uint64_t v180;
  __int128 v181;
  _BYTE v182[32];
  uint64_t v183;
  unsigned int v184;
  char v185;
  uint64_t v186;
  unsigned int v187;
  char v188;
  _BYTE v189[32];
  void **__dst;
  size_t v191;
  int64_t v192;
  unsigned __int8 *v193;
  uint64_t v194;
  unsigned __int8 *v195;
  __int128 v196;
  _QWORD v197[8];

  v197[5] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    return 0;
  while (2)
  {
    v3 = *(void ***)(a1 + 24);
    v4 = *(_QWORD *)(a1 + 48);
    v181 = (*(_OWORD **)((char *)v3 + ((v4 >> 5) & 0x7FFFFFFFFFFFFF8)))[v4];
    *(_QWORD *)(a1 + 48) = ++v4;
    *(_QWORD *)(a1 + 56) = v1 - 1;
    if (v4 >= 0x200)
    {
      operator delete(*v3);
      *(_QWORD *)(a1 + 24) += 8;
      *(_QWORD *)(a1 + 48) -= 256;
    }
    v5 = v181;
    if (!sub_22F37950C(a1, v181, *((unint64_t *)&v181 + 1))
      || (*(_DWORD *)(v181 + 28) & 0x7F) != (*(_DWORD *)(*((_QWORD *)&v181 + 1) + 28) & 0x7F))
    {
      goto LABEL_314;
    }
    switch(*(_DWORD *)(v181 + 28) & 0x7F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x19:
      case 0x1A:
      case 0x1E:
      case 0x1F:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x3A:
      case 0x3C:
      case 0x3D:
      case 0x3E:
      case 0x3F:
      case 0x40:
      case 0x41:
      case 0x42:
      case 0x44:
      case 0x45:
      case 0x46:
      case 0x47:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4B:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x4F:
      case 0x50:
      case 0x51:
      case 0x52:
      case 0x53:
        v6 = a1;
        v8 = *((_QWORD *)&v181 + 1);
        v7 = (unint64_t *)v181;
        goto LABEL_8;
      case 8:
        v16 = *(_QWORD *)(v181 + 40);
        if (v16 < 8 || (v16 & 4) == 0)
        {
          v18 = (v16 >> 2) & 1;
          if (v16 >= 8 && (v16 & 4) == 0)
          {
            v19 = *(_QWORD *)(*((_QWORD *)&v181 + 1) + 40);
            if (v19 >= 8 && (v19 & 4) != 0)
              goto LABEL_314;
            LOBYTE(v18) = 0;
            v7 = (unint64_t *)(v16 & 0xFFFFFFFFFFFFFFF8);
            v20 = (v16 & 0xFFFFFFFFFFFFFFF8) == 0;
LABEL_116:
            if (v20)
              goto LABEL_314;
            if ((v18 & 1) != 0)
              goto LABEL_314;
            v50 = *(_QWORD *)(*((_QWORD *)&v181 + 1) + 40);
            if ((v50 & 4) != 0)
              goto LABEL_314;
            v8 = v50 & 0xFFFFFFFFFFFFFFF8;
            if ((v50 & 0xFFFFFFFFFFFFFFF8) == 0)
              goto LABEL_314;
            v6 = a1;
LABEL_8:
            if ((sub_22EF8F978(v6, (uint64_t)v7, v8) & 1) == 0)
              goto LABEL_314;
            goto LABEL_9;
          }
        }
        else
        {
          v47 = *(_QWORD *)(*((_QWORD *)&v181 + 1) + 40);
          LOBYTE(v18) = 1;
          if (v47 >= 8 && (v47 & 4) == 0)
            goto LABEL_314;
        }
        v7 = (unint64_t *)(v16 & 0xFFFFFFFFFFFFFFF8);
        v20 = (v16 & 0xFFFFFFFFFFFFFFF8) == 0;
        if ((v16 & 4) == 0)
          goto LABEL_116;
        if (!v7)
          goto LABEL_116;
        v20 = 0;
        v48 = *(_QWORD *)(*((_QWORD *)&v181 + 1) + 40);
        if ((v48 & 4) == 0)
          goto LABEL_116;
        v49 = (unint64_t *)(v48 & 0xFFFFFFFFFFFFFFF8);
        if (!v49)
          goto LABEL_116;
        v12 = *v7;
        v13 = *v49;
LABEL_30:
        if ((sub_22EF910D0(a1, v12, v13) & 1) == 0)
          goto LABEL_314;
        goto LABEL_9;
      case 0x13:
        v58 = *(_QWORD *)(v181 + 40);
        if ((v58 & 7) != 0)
          v59 = 0;
        else
          v59 = v58 & 0xFFFFFFFFFFFFFFF8;
        v60 = *(_QWORD *)(*((_QWORD *)&v181 + 1) + 40);
        if ((v60 & 7) != 0)
          v61 = 0;
        else
          v61 = v60 & 0xFFFFFFFFFFFFFFF8;
        if (!sub_22EF94918(v59, v61))
          goto LABEL_314;
        v62 = *(_QWORD *)(*(_QWORD *)(v181 + 104) + 40);
        v63 = (v62 & 7) != 0 ? 0 : v62 & 0xFFFFFFFFFFFFFFF8;
        v64 = *(uint64_t **)(*((_QWORD *)&v181 + 1) + 104);
        v65 = v64[5];
        v66 = (v65 & 7) != 0 ? 0 : v65 & 0xFFFFFFFFFFFFFFF8;
        if (!sub_22EF94918(v63, v66))
          goto LABEL_314;
        v67 = *(_QWORD *)(*((_QWORD *)&v181 + 1) + 120) & 0xFFFFFFFFFFFFFFF8;
        v68 = *(_QWORD *)(v67 + 16);
        v69 = *(unsigned int *)(v67 + 24);
        v70 = *(_QWORD *)(v181 + 120) & 0xFFFFFFFFFFFFFFF8;
        v71 = *(unsigned int *)(v70 + 24);
        v179 = v69;
        v180 = v68;
        if (!(_DWORD)v71)
          goto LABEL_160;
        v72 = *(_QWORD *)(v70 + 16);
        v73 = 8 * v69;
        v74 = 8 * v71;
        do
        {
          if (!v73)
            goto LABEL_314;
          v75 = *(_QWORD *)(*(_QWORD *)v72 + 40);
          v76 = (v75 & 7) != 0 ? 0 : v75 & 0xFFFFFFFFFFFFFFF8;
          v77 = *(_QWORD *)(*(_QWORD *)v68 + 40);
          v78 = (v77 & 7) != 0 ? 0 : v77 & 0xFFFFFFFFFFFFFFF8;
          if (!sub_22EF94918(v76, v78))
            goto LABEL_314;
          v72 += 8;
          v68 += 8;
          v73 -= 8;
          v74 -= 8;
        }
        while (v74);
LABEL_160:
        if (v68 != v180 + 8 * v179)
          goto LABEL_314;
        v79 = sub_22F36D148(*(_QWORD *)(a1 + 8), v64, 0);
        if ((*(_WORD *)(*((_QWORD *)&v181 + 1) + 56) & 0x80) != 0)
          sub_22EFCC320(*((_QWORD *)&v181 + 1) + 48);
        for (i = *(_QWORD *)(*((_QWORD *)&v181 + 1) + 64); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
        {
          if ((*(_DWORD *)(i + 28) & 0x7F) == 0x33)
            break;
        }
        if ((*(_WORD *)(v181 + 56) & 0x80) != 0)
          sub_22EFCC320(v181 + 48);
        v81 = *(_QWORD *)(v181 + 64);
        if (v81)
        {
          while ((*(_DWORD *)(v81 + 28) & 0x7F) != 0x33)
          {
            v81 = *(_QWORD *)(v81 + 8) & 0xFFFFFFFFFFFFFFF8;
            if (!v81)
              goto LABEL_180;
          }
          while (i
               && ((*(_BYTE *)(i + 88) ^ *(_BYTE *)(v81 + 88)) & 7) == 0
               && sub_22EF94D28(a1, v81, i, v79))
          {
            do
              v81 = *(_QWORD *)(v81 + 8) & 0xFFFFFFFFFFFFFFF8;
            while (v81 && (*(_DWORD *)(v81 + 28) & 0x7F) != 0x33);
            do
              i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8;
            while (i && (*(_DWORD *)(i + 28) & 0x7F) != 0x33);
            if (!v81)
              goto LABEL_180;
          }
          goto LABEL_314;
        }
LABEL_180:
        if (i)
          goto LABEL_314;
        if ((*(_WORD *)(*((_QWORD *)&v181 + 1) + 56) & 0x80) != 0)
          sub_22EFCC320(*((_QWORD *)&v181 + 1) + 48);
        for (j = *(_QWORD *)(*((_QWORD *)&v181 + 1) + 64); j; j = *(_QWORD *)(j + 8) & 0xFFFFFFFFFFFFFFF8)
        {
          if ((*(_DWORD *)(j + 28) & 0x7F) == 0x18)
            break;
        }
        if ((*(_WORD *)(v181 + 56) & 0x80) != 0)
          sub_22EFCC320(v181 + 48);
        v83 = *(_QWORD *)(v181 + 64);
        if (v83)
        {
          while ((*(_DWORD *)(v83 + 28) & 0x7F) != 0x18)
          {
            v83 = *(_QWORD *)(v83 + 8) & 0xFFFFFFFFFFFFFFF8;
            if (!v83)
              goto LABEL_199;
          }
          while (j && sub_22EF924FC(a1, v83, j))
          {
            do
              v83 = *(_QWORD *)(v83 + 8) & 0xFFFFFFFFFFFFFFF8;
            while (v83 && (*(_DWORD *)(v83 + 28) & 0x7F) != 0x18);
            do
              j = *(_QWORD *)(j + 8) & 0xFFFFFFFFFFFFFFF8;
            while (j && (*(_DWORD *)(j + 28) & 0x7F) != 0x18);
            if (!v83)
              goto LABEL_199;
          }
          goto LABEL_314;
        }
LABEL_199:
        if (j)
          goto LABEL_314;
        goto LABEL_9;
      case 0x18:
        if ((sub_22EF924FC(a1, v181, *((uint64_t *)&v181 + 1)) & 1) == 0)
          goto LABEL_314;
        goto LABEL_9;
      case 0x1B:
        if (!sub_22EF951DC(a1, v181, *((uint64_t *)&v181 + 1)))
          goto LABEL_314;
        v14 = *(unsigned __int8 **)(v181 + 64);
        v15 = *(unsigned __int8 **)(*((_QWORD *)&v181 + 1) + 64);
        goto LABEL_130;
      case 0x1C:
        if (!sub_22EF951DC(a1, v181, *((uint64_t *)&v181 + 1)))
          goto LABEL_314;
        v10 = *(_QWORD *)(v181 + 48);
        v11 = *(_QWORD *)(*((_QWORD *)&v181 + 1) + 48);
        v9 = a1;
LABEL_14:
        if ((sub_22EF926C4(v9, v10, v11) & 1) == 0)
          goto LABEL_314;
        goto LABEL_9;
      case 0x1D:
        if (!sub_22EF951DC(a1, v181, *((uint64_t *)&v181 + 1)))
          goto LABEL_314;
        v12 = *(_QWORD *)(*(_QWORD *)(v181 + 48) + 48);
        v13 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v181 + 1) + 48) + 48);
        goto LABEL_30;
      case 0x20:
        if ((*(_BYTE *)(v181 + 80) != 0) != (*(_BYTE *)(*((_QWORD *)&v181 + 1) + 80) != 0))
          goto LABEL_296;
        if ((sub_22EF95354(a1, *(int **)(v181 + 56), *(int **)(*((_QWORD *)&v181 + 1) + 56)) & 1) == 0)
          goto LABEL_314;
        goto LABEL_9;
      case 0x21:
        v27 = *(_QWORD *)(v181 + 40);
        v28 = v27 & 0xFFFFFFFFFFFFFFF8;
        if ((v27 & 7) != 0 || v28 == 0)
        {
          v28 = 0;
          v30 = *(_QWORD *)(v181 + 120);
          if ((v30 & 4) == 0)
          {
            v31 = v30 & 0xFFFFFFFFFFFFFFF8;
            if (v31)
            {
              v32 = *(_QWORD *)(v31 + 40);
              if ((v32 & 7) != 0)
                v28 = 0;
              else
                v28 = v32 & 0xFFFFFFFFFFFFFFF8;
            }
          }
        }
        v33 = *(_QWORD *)(*((_QWORD *)&v181 + 1) + 40);
        if ((v33 & 7) != 0 || (v34 = v33 & 0xFFFFFFFFFFFFFFF8, (v33 & 0xFFFFFFFFFFFFFFF8) == 0))
        {
          v34 = 0;
          v35 = *(_QWORD *)(*((_QWORD *)&v181 + 1) + 120);
          if ((v35 & 4) == 0)
          {
            v36 = v35 & 0xFFFFFFFFFFFFFFF8;
            if (v36)
            {
              v37 = *(_QWORD *)(v36 + 40);
              if ((v37 & 7) != 0)
                v34 = 0;
              else
                v34 = v37 & 0xFFFFFFFFFFFFFFF8;
            }
          }
        }
        if (!sub_22EF94918(v28, v34))
          goto LABEL_314;
        v38 = sub_22EFC3500(v181);
        v39 = sub_22EFC3500(*((unint64_t *)&v181 + 1));
        if (!v38)
          goto LABEL_9;
        v40 = v39;
        if (!v39)
          goto LABEL_9;
        v41 = sub_22E49F9AC(v39);
        sub_22EFC3500(v40);
        v42 = sub_22E49F9AC(v38);
        sub_22EFC3500(v38);
        if (!v42)
          goto LABEL_107;
        break;
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
        v9 = a1;
        v11 = *((_QWORD *)&v181 + 1);
        v10 = v181;
        goto LABEL_14;
      case 0x26:
        v21 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v181 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                                 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                         + 8) & 0xFFFFFFFFFFFFFFF0)
                                 + 33) >> 7;
        v22 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v181 + 1) + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                                 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                         + 8) & 0xFFFFFFFFFFFFFFF0)
                                 + 33);
        if (v21 != v22 >> 7 && *(_BYTE *)(a1 + 102) != 0)
        {
          if (*(_BYTE *)(a1 + 101))
            v84 = 2161;
          else
            v84 = 2354;
          sub_22F379440((uint64_t)&v195, a1, *(_DWORD *)(*((_QWORD *)&v181 + 1) + 24), v84);
          v85 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v181 + 1) + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                                        + 8) & 0xFFFFFFFFFFFFFFF0)
                                + 32);
          v86 = v195;
          if (!v195)
          {
            v86 = (unsigned __int8 *)sub_22E3B8AAC(v196);
            v195 = v86;
          }
          v86[*v86 + 1] = 2;
          v87 = v195;
          v88 = *v195;
          *v195 = v88 + 1;
          *(_QWORD *)&v87[8 * v88 + 16] = (v85 >> 15) & 1;
          v89 = sub_22E3BB0B8((uint64_t)&v195);
          sub_22F3793A8(v89, a1, *(_DWORD *)(v5 + 24), 2326);
          v90 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                                        + 8) & 0xFFFFFFFFFFFFFFF0)
                                + 32);
          v91 = v195;
          if (!v195)
          {
            v91 = (unsigned __int8 *)sub_22E3B8AAC(v196);
            v195 = v91;
          }
          v91[*v91 + 1] = 2;
          v92 = v195;
          v93 = *v195;
          *v195 = v93 + 1;
          *(_QWORD *)&v92[8 * v93 + 16] = (v90 >> 15) & 1;
          sub_22E3BB0B8((uint64_t)&v195);
        }
        if (((v21 ^ (v22 >> 7)) & 1) != 0)
          goto LABEL_314;
        goto LABEL_9;
      case 0x27:
      case 0x28:
      case 0x29:
        if ((sub_22EF93C20(a1, v181, *((uint64_t *)&v181 + 1)) & 1) == 0)
          goto LABEL_314;
        goto LABEL_9;
      case 0x31:
      case 0x32:
        if ((sub_22EF93CB0(a1, v181, *((uint64_t *)&v181 + 1)) & 1) == 0)
          goto LABEL_314;
        goto LABEL_9;
      case 0x33:
        v55 = *(_QWORD *)(a1 + 8);
        v56 = sub_22EFDE1AC(*((uint64_t *)&v181 + 1));
        v57 = sub_22F36D148(v55, v56, 0);
        if (((*(_BYTE *)(*((_QWORD *)&v181 + 1) + 88) ^ *(_BYTE *)(v181 + 88)) & 7) != 0
          || (sub_22EF94D28(a1, v181, *((uint64_t *)&v181 + 1), v57) & 1) == 0)
        {
          goto LABEL_314;
        }
        goto LABEL_9;
      case 0x34:
      case 0x35:
        if ((sub_22EF93D20(a1, v181, *((uint64_t *)&v181 + 1)) & 1) == 0)
          goto LABEL_314;
        goto LABEL_9;
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
        if ((sub_22EF93DD4(a1, v181, *((uint64_t *)&v181 + 1)) & 1) == 0)
          goto LABEL_314;
        goto LABEL_9;
      case 0x3B:
        if ((*(_BYTE *)(v181 + 80) != 0) != (*(_BYTE *)(*((_QWORD *)&v181 + 1) + 80) != 0))
        {
LABEL_296:
          if (!*(_BYTE *)(a1 + 102))
            goto LABEL_314;
          if (*(_BYTE *)(a1 + 101))
            v141 = 2161;
          else
            v141 = 2354;
          sub_22F379440((uint64_t)&v195, a1, *(_DWORD *)(*((_QWORD *)&v181 + 1) + 24), v141);
          v142 = *(unsigned __int8 *)(*((_QWORD *)&v181 + 1) + 80);
          v143 = v195;
          if (!v195)
          {
            v143 = (unsigned __int8 *)sub_22E3B8AAC(v196);
            v195 = v143;
          }
          v144 = 2;
          v143[*v143 + 1] = 2;
          v145 = v195;
          v146 = *v195;
          *v195 = v146 + 1;
          *(_QWORD *)&v145[8 * v146 + 16] = v142;
          v147 = sub_22E3BB0B8((uint64_t)&v195);
          sub_22F3793A8(v147, a1, *(_DWORD *)(v5 + 24), 2326);
          v148 = *(unsigned __int8 *)(v5 + 80);
          goto LABEL_310;
        }
        if ((sub_22EF910D0(a1, *(_QWORD *)(v181 + 48), *(_QWORD *)(*((_QWORD *)&v181 + 1) + 48)) & 1) == 0)
        {
          if (!*(_BYTE *)(a1 + 102))
            goto LABEL_314;
          if (*(_BYTE *)(a1 + 101))
            v149 = 2152;
          else
            v149 = 2345;
          sub_22F379440((uint64_t)&v195, a1, *(_DWORD *)(*((_QWORD *)&v181 + 1) + 24), v149);
          v150 = *(_QWORD *)(*((_QWORD *)&v181 + 1) + 48);
          v151 = v195;
          if (!v195)
          {
            v151 = (unsigned __int8 *)sub_22E3B8AAC(v196);
            v195 = v151;
          }
          v144 = 9;
          v151[*v151 + 1] = 9;
          v152 = v195;
          v153 = *v195;
          v154 = v153 + 1;
          *v195 = v153 + 1;
          *(_QWORD *)&v152[8 * v153 + 16] = v150;
          v155 = *(_QWORD *)(v5 + 48);
          v152[v154 + 1] = 9;
          v156 = v195;
          v157 = *v195;
          *v195 = v157 + 1;
          *(_QWORD *)&v156[8 * v157 + 16] = v155;
          v158 = sub_22E3BB0B8((uint64_t)&v195);
          sub_22F3793A8(v158, a1, *(_DWORD *)(v5 + 24), 2330);
          v148 = *(_QWORD *)(v5 + 48);
LABEL_310:
          v159 = v195;
          if (!v195)
          {
            v159 = (unsigned __int8 *)sub_22E3B8AAC(v196);
            v195 = v159;
          }
          v159[*v159 + 1] = v144;
          v160 = v195;
          v161 = *v195;
          *v195 = v161 + 1;
          *(_QWORD *)&v160[8 * v161 + 16] = v148;
          v140 = (void **)&v195;
          goto LABEL_313;
        }
LABEL_9:
        v1 = *(_QWORD *)(a1 + 56);
        if (!v1)
          return 0;
        continue;
      case 0x43:
        if ((*(_BYTE *)(v181 + 76) == 0) != (*(_BYTE *)(*((_QWORD *)&v181 + 1) + 76) == 0))
          goto LABEL_314;
        v24 = *(_DWORD *)(v181 + 72);
        if (v24 != *(_DWORD *)(*((_QWORD *)&v181 + 1) + 72))
          goto LABEL_314;
        v25 = (llvm::APInt *)(v181 + 64);
        v26 = (const llvm::APInt *)(*((_QWORD *)&v181 + 1) + 64);
        if (v24 > 0x40)
        {
          if (!llvm::APInt::equalSlowCase(v25, v26))
            goto LABEL_314;
        }
        else if (*(_QWORD *)v25 != *(_QWORD *)v26)
        {
          goto LABEL_314;
        }
        v51 = *(_QWORD *)(v181 + 40);
        if ((v51 & 7) != 0)
          v52 = 0;
        else
          v52 = v51 & 0xFFFFFFFFFFFFFFF8;
        v53 = *(_QWORD *)(*((_QWORD *)&v181 + 1) + 40);
        if ((v53 & 7) != 0)
          v54 = 0;
        else
          v54 = v53 & 0xFFFFFFFFFFFFFFF8;
        if ((sub_22EF94918(v52, v54) & 1) == 0)
          goto LABEL_314;
        v14 = *(unsigned __int8 **)(v181 + 56);
        v15 = *(unsigned __int8 **)(*((_QWORD *)&v181 + 1) + 56);
LABEL_130:
        if (!sub_22EF91C18(a1, v14, v15))
          goto LABEL_314;
        goto LABEL_9;
      default:
        goto LABEL_9;
    }
    break;
  }
  do
  {
    if (!v41)
    {
      if (!*(_BYTE *)(a1 + 102))
        goto LABEL_314;
      if (*(_BYTE *)(a1 + 101))
        v98 = 2162;
      else
        v98 = 2355;
      sub_22F379440((uint64_t)&v195, a1, *(_DWORD *)(v40 + 24), v98);
      v99 = *(_QWORD *)(v40 + 48);
      if (v99)
        v100 = v99 & 0xFFFFFFFFFFFFFFF0;
      else
        v100 = sub_22EF6462C(*(_QWORD *)(a1 + 8), v40);
      v126 = v195;
      if (!v195)
      {
        v126 = (unsigned __int8 *)sub_22E3B8AAC(v196);
        v195 = v126;
      }
      v126[*v126 + 1] = 9;
      v127 = v195;
      v128 = *v195;
      *v195 = v128 + 1;
      *(_QWORD *)&v127[8 * v128 + 16] = v100;
      sub_22E3BB0B8((uint64_t)&v195);
      sub_22F3793A8((uint64_t)&v193, a1, *(_DWORD *)(v42 + 24), 2312);
      v129 = *(_QWORD *)(v42 + 40);
      v130 = v193;
      if (!v193)
      {
        v130 = (unsigned __int8 *)sub_22E3B8AAC(v194);
        v193 = v130;
      }
      v130[*v130 + 1] = 10;
      v131 = v193;
      v132 = *v193;
      *v193 = v132 + 1;
      *(_QWORD *)&v131[8 * v132 + 16] = v129;
      v195 = (unsigned __int8 *)v197;
      v196 = xmmword_22F455490;
      llvm::APInt::toString();
      v133 = v196;
      if ((unint64_t)v196 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_345;
      v134 = v195;
      if ((unint64_t)v196 >= 0x17)
      {
        v136 = (v196 & 0xFFFFFFFFFFFFFFF8) + 8;
        if (((unint64_t)v196 | 7) != 0x17)
          v136 = v196 | 7;
        v137 = v136 + 1;
        p_dst = (void **)operator new(v136 + 1);
        v191 = v133;
        v192 = v137 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v192) = v196;
        p_dst = (void **)&__dst;
        if (!(_QWORD)v196)
        {
LABEL_285:
          *((_BYTE *)p_dst + v133) = 0;
          if (v195 != (unsigned __int8 *)v197)
            free(v195);
          if (v192 >= 0)
            v138 = (void **)&__dst;
          else
            v138 = __dst;
          if (v192 >= 0)
            v139 = HIBYTE(v192) & 0x7F;
          else
            v139 = v191;
          sub_22E3B89A8(&v193, v138, v139);
          if (SHIBYTE(v192) < 0)
            operator delete(__dst);
          sub_22E3BB0B8((uint64_t)&v193);
          sub_22F379440((uint64_t)v189, a1, *(_DWORD *)(v40 + 24), 2317);
          v140 = (void **)v189;
LABEL_313:
          sub_22E3BB0B8((uint64_t)v140);
          goto LABEL_314;
        }
      }
      memmove(p_dst, v134, v133);
      goto LABEL_285;
    }
    v187 = *(_DWORD *)(v42 + 72);
    if (v187 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v186, (const llvm::APInt *)(v42 + 64));
    else
      v186 = *(_QWORD *)(v42 + 64);
    v188 = *(_BYTE *)(v42 + 76);
    v184 = *(_DWORD *)(v41 + 72);
    if (v184 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v183, (const llvm::APInt *)(v41 + 64));
    else
      v183 = *(_QWORD *)(v41 + 64);
    v185 = *(_BYTE *)(v41 + 76);
    if (sub_22E4634B4((uint64_t)&v186, (uint64_t)&v183)
      || ((v43 = *(_QWORD *)(v42 + 40), (v43 & 7) != 0) ? (v44 = 0) : (v44 = v43 & 0xFFFFFFFFFFFFFFF8),
          (v45 = *(_QWORD *)(v41 + 40), (v45 & 7) != 0) ? (v46 = 0) : (v46 = v45 & 0xFFFFFFFFFFFFFFF8),
          (sub_22EF94918(v44, v46) & 1) == 0))
    {
      if (*(_BYTE *)(a1 + 102))
      {
        if (*(_BYTE *)(a1 + 101))
          v95 = 2162;
        else
          v95 = 2355;
        sub_22F379440((uint64_t)&v195, a1, *(_DWORD *)(v40 + 24), v95);
        v96 = *(_QWORD *)(v40 + 48);
        if (v96)
          v97 = v96 & 0xFFFFFFFFFFFFFFF0;
        else
          v97 = sub_22EF6462C(*(_QWORD *)(a1 + 8), v40);
        v101 = v195;
        if (!v195)
        {
          v101 = (unsigned __int8 *)sub_22E3B8AAC(v196);
          v195 = v101;
        }
        v101[*v101 + 1] = 9;
        v102 = v195;
        v103 = *v195;
        *v195 = v103 + 1;
        *(_QWORD *)&v102[8 * v103 + 16] = v97;
        sub_22E3BB0B8((uint64_t)&v195);
        sub_22F379440((uint64_t)&v193, a1, *(_DWORD *)(v41 + 24), 2312);
        v104 = *(_QWORD *)(v41 + 40);
        v105 = v193;
        if (!v193)
        {
          v105 = (unsigned __int8 *)sub_22E3B8AAC(v194);
          v193 = v105;
        }
        v105[*v105 + 1] = 10;
        v106 = v193;
        v107 = *v193;
        *v193 = v107 + 1;
        *(_QWORD *)&v106[8 * v107 + 16] = v104;
        v195 = (unsigned __int8 *)v197;
        v196 = xmmword_22F455490;
        llvm::APInt::toString();
        v108 = v196;
        if ((unint64_t)v196 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_345;
        v109 = v195;
        if ((unint64_t)v196 >= 0x17)
        {
          v111 = (v196 & 0xFFFFFFFFFFFFFFF8) + 8;
          if (((unint64_t)v196 | 7) != 0x17)
            v111 = v196 | 7;
          v112 = v111 + 1;
          v110 = (void **)operator new(v111 + 1);
          v191 = v108;
          v192 = v112 | 0x8000000000000000;
          __dst = v110;
        }
        else
        {
          HIBYTE(v192) = v196;
          v110 = (void **)&__dst;
          if (!(_QWORD)v196)
          {
LABEL_235:
            *((_BYTE *)v110 + v108) = 0;
            if (v195 != (unsigned __int8 *)v197)
              free(v195);
            if (v192 >= 0)
              v113 = (void **)&__dst;
            else
              v113 = __dst;
            if (v192 >= 0)
              v114 = HIBYTE(v192) & 0x7F;
            else
              v114 = v191;
            sub_22E3B89A8(&v193, v113, v114);
            if (SHIBYTE(v192) < 0)
              operator delete(__dst);
            sub_22E3BB0B8((uint64_t)&v193);
            sub_22F3793A8((uint64_t)&v193, a1, *(_DWORD *)(v42 + 24), 2312);
            v115 = *(_QWORD *)(v42 + 40);
            v116 = v193;
            if (!v193)
            {
              v116 = (unsigned __int8 *)sub_22E3B8AAC(v194);
              v193 = v116;
            }
            v116[*v116 + 1] = 10;
            v117 = v193;
            v118 = *v193;
            *v193 = v118 + 1;
            *(_QWORD *)&v117[8 * v118 + 16] = v115;
            v195 = (unsigned __int8 *)v197;
            v196 = xmmword_22F455490;
            llvm::APInt::toString();
            v119 = v196;
            if ((unint64_t)v196 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_345;
            v120 = v195;
            if ((unint64_t)v196 >= 0x17)
            {
              v122 = (v196 & 0xFFFFFFFFFFFFFFF8) + 8;
              if (((unint64_t)v196 | 7) != 0x17)
                v122 = v196 | 7;
              v123 = v122 + 1;
              v121 = (void **)operator new(v122 + 1);
              v191 = v119;
              v192 = v123 | 0x8000000000000000;
              __dst = v121;
            }
            else
            {
              HIBYTE(v192) = v196;
              v121 = (void **)&__dst;
              if (!(_QWORD)v196)
              {
LABEL_255:
                *((_BYTE *)v121 + v119) = 0;
                if (v195 != (unsigned __int8 *)v197)
                  free(v195);
                if (v192 >= 0)
                  v124 = (void **)&__dst;
                else
                  v124 = __dst;
                if (v192 >= 0)
                  v125 = HIBYTE(v192) & 0x7F;
                else
                  v125 = v191;
                sub_22E3B89A8(&v193, v124, v125);
                if (SHIBYTE(v192) < 0)
                  operator delete(__dst);
                sub_22E3BB0B8((uint64_t)&v193);
                goto LABEL_266;
              }
            }
            memmove(v121, v120, v119);
            goto LABEL_255;
          }
        }
        memmove(v110, v109, v108);
        goto LABEL_235;
      }
LABEL_266:
      if (v184 >= 0x41 && v183)
        MEMORY[0x2348A0E84](v183, 0x1000C8000313F17);
      if (v187 >= 0x41 && v186)
        MEMORY[0x2348A0E84](v186, 0x1000C8000313F17);
      goto LABEL_314;
    }
    if (v184 >= 0x41 && v183)
      MEMORY[0x2348A0E84](v183, 0x1000C8000313F17);
    if (v187 >= 0x41 && v186)
      MEMORY[0x2348A0E84](v186, 0x1000C8000313F17);
    do
      v42 = *(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF8;
    while (v42 && (*(_DWORD *)(v42 + 28) & 0x7F) != 0x43);
    do
      v41 = *(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF8;
    while (v41 && (*(_DWORD *)(v41 + 28) & 0x7F) != 0x43);
  }
  while (v42);
LABEL_107:
  if (!v41)
    goto LABEL_9;
  if (*(_BYTE *)(a1 + 102))
  {
    if (*(_BYTE *)(a1 + 101))
      v162 = 2162;
    else
      v162 = 2355;
    sub_22F379440((uint64_t)&v195, a1, *(_DWORD *)(v40 + 24), v162);
    v163 = *(_QWORD *)(v40 + 48);
    if (v163)
      v164 = v163 & 0xFFFFFFFFFFFFFFF0;
    else
      v164 = sub_22EF6462C(*(_QWORD *)(a1 + 8), v40);
    v165 = v195;
    if (!v195)
    {
      v165 = (unsigned __int8 *)sub_22E3B8AAC(v196);
      v195 = v165;
    }
    v165[*v165 + 1] = 9;
    v166 = v195;
    v167 = *v195;
    *v195 = v167 + 1;
    *(_QWORD *)&v166[8 * v167 + 16] = v164;
    sub_22E3BB0B8((uint64_t)&v195);
    sub_22F379440((uint64_t)&v193, a1, *(_DWORD *)(v41 + 24), 2312);
    v168 = *(_QWORD *)(v41 + 40);
    v169 = v193;
    if (!v193)
    {
      v169 = (unsigned __int8 *)sub_22E3B8AAC(v194);
      v193 = v169;
    }
    v169[*v169 + 1] = 10;
    v170 = v193;
    v171 = *v193;
    *v193 = v171 + 1;
    *(_QWORD *)&v170[8 * v171 + 16] = v168;
    v195 = (unsigned __int8 *)v197;
    v196 = xmmword_22F455490;
    llvm::APInt::toString();
    v172 = v196;
    if ((unint64_t)v196 <= 0x7FFFFFFFFFFFFFF7)
    {
      v173 = v195;
      if ((unint64_t)v196 >= 0x17)
      {
        v175 = (v196 & 0xFFFFFFFFFFFFFFF8) + 8;
        if (((unint64_t)v196 | 7) != 0x17)
          v175 = v196 | 7;
        v176 = v175 + 1;
        v174 = (void **)operator new(v175 + 1);
        v191 = v172;
        v192 = v176 | 0x8000000000000000;
        __dst = v174;
      }
      else
      {
        HIBYTE(v192) = v196;
        v174 = (void **)&__dst;
        if (!(_QWORD)v196)
        {
LABEL_334:
          *((_BYTE *)v174 + v172) = 0;
          if (v195 != (unsigned __int8 *)v197)
            free(v195);
          if (v192 >= 0)
            v177 = (void **)&__dst;
          else
            v177 = __dst;
          if (v192 >= 0)
            v178 = HIBYTE(v192) & 0x7F;
          else
            v178 = v191;
          sub_22E3B89A8(&v193, v177, v178);
          if (SHIBYTE(v192) < 0)
            operator delete(__dst);
          sub_22E3BB0B8((uint64_t)&v193);
          sub_22F3793A8((uint64_t)v182, a1, *(_DWORD *)(v38 + 24), 2317);
          v140 = (void **)v182;
          goto LABEL_313;
        }
      }
      memmove(v174, v173, v172);
      goto LABEL_334;
    }
LABEL_345:
    abort();
  }
LABEL_314:
  sub_22F37966C((uint64_t)&v195, *(_QWORD *)(a1 + 88), (uint64_t *)&v181);
  return 1;
}

uint64_t sub_22EF910D0(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t result;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  _DWORD *i;
  unint64_t v52;
  unint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  unsigned int *v57;
  _DWORD *j;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t k;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *m;
  int v82;
  unsigned int v83;
  int v84;
  int v85;
  uint64_t v86;
  unsigned int *v87;
  _DWORD *v88;
  uint64_t v89;
  char v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97[3];
  uint64_t v98[3];

  if (a2 < 0x10 || a3 <= 0xF)
    return a2 < 0x10 && a3 < 0x10;
  v5 = (uint64_t *)a1;
  v6 = a3;
  v7 = a2;
  if (!*(_BYTE *)(a1 + 100))
  {
    v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7;
    v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) | a3 & 7;
  }
  v8 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v9 & 8) != 0)
  {
    v11 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v14 = v11 | (v9 | v7) & 7;
  v15 = HIDWORD(v10);
  v16 = v6 & 0xFFFFFFFFFFFFFFF0;
  v17 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v17 & 8) != 0)
  {
    v19 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    HIDWORD(v18) = 0;
    v19 = 0;
  }
  if (v14 != (v19 | (v17 | v6) & 7) || (_DWORD)v15 != HIDWORD(v18))
    return 0;
  v21 = *v8;
  v22 = *(_DWORD *)(*v8 + 16);
  v23 = v22;
  v24 = *(_QWORD *)v16;
  v25 = *(_DWORD *)(*(_QWORD *)v16 + 16);
  if (v22 == v25)
  {
    switch(*(_DWORD *)(*v8 + 16))
    {
      case 0u:
      case 1u:
      case 6u:
      case 8u:
      case 0xAu:
      case 0xCu:
      case 0x16u:
      case 0x17u:
      case 0x1Bu:
      case 0x20u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x33u:
      case 0x36u:
        goto LABEL_25;
      case 2u:
        result = sub_22EF71DC4((llvm::APInt *)(v21 + 40), (llvm::APInt *)(v24 + 40));
        if ((_DWORD)result)
          goto LABEL_66;
        return result;
      case 3u:
        v43 = *(unsigned __int8 **)(v21 + 48);
        v44 = *(unsigned __int8 **)(v24 + 48);
        goto LABEL_65;
      case 4u:
        goto LABEL_66;
      case 5u:
        v43 = *(unsigned __int8 **)(v21 + 40);
        v44 = *(unsigned __int8 **)(v24 + 40);
LABEL_65:
        result = sub_22EF91C18(a1, v43, v44);
        if (!(_DWORD)result)
          return result;
LABEL_66:
        result = sub_22EF910D0(v5, *(_QWORD *)(v21 + 32), *(_QWORD *)(v24 + 32));
        if (!(_DWORD)result)
          return result;
        return ((*(_DWORD *)(v24 + 16) ^ *(_DWORD *)(v21 + 16)) & 0x1F80000) == 0;
      case 7u:
        result = sub_22EF910D0(a1, *(_QWORD *)(v21 + 32), *(_QWORD *)(v24 + 32));
        if (!(_DWORD)result)
          return result;
        v26 = *(_QWORD *)(*v8 + 40);
        v27 = *(_QWORD *)(*(_QWORD *)v16 + 40);
        return (sub_22EF910D0(v5, v26, v27) & 1) != 0;
      case 9u:
        v45 = *(_DWORD *)(v21 + 32);
        v46 = *(_DWORD *)(v24 + 32);
        return ((v45 ^ v46) & 1) == 0 && ((v46 ^ v45) & 0x1FFFFFE) == 0;
      case 0xBu:
        return ((v25 ^ v22) & 0xFF80000) == 0;
      case 0xDu:
      case 0x30u:
        return sub_22EF91C18(a1, *(unsigned __int8 **)(v21 + 24), *(unsigned __int8 **)(v24 + 24));
      case 0xEu:
        result = sub_22EF910D0(a1, *(_QWORD *)(v21 + 24), *(_QWORD *)(v24 + 24));
        if (!(_DWORD)result)
          return result;
        v47 = *(_QWORD *)(v21 + 40);
        v48 = *(_QWORD *)(v24 + 40);
        if ((v47 != 0) != (v48 != 0))
          return 0;
        if (!v47)
          return 1;
        if (v47 != v48)
          return 0;
        v49 = *(unsigned int *)(v21 + 20);
        if ((_DWORD)v49 != *(_DWORD *)(v24 + 20))
          return 0;
        if (!(_DWORD)v49)
          return 1;
        v50 = (unsigned int *)(v21 + 48);
        for (i = (_DWORD *)(v24 + 48); (sub_22EF941D0((uint64_t)v5, v50, i) & 1) != 0; i += 6)
        {
          v50 += 6;
          if (!--v49)
            return 1;
        }
        return 0;
      case 0xFu:
        v98[0] = *(_QWORD *)(v21 + 40);
        v97[0] = *(_QWORD *)(v24 + 40);
        result = sub_22EF943BC(a1, v98, v97);
        if ((_DWORD)result)
          goto LABEL_87;
        return result;
      case 0x10u:
        result = sub_22EF91C18(a1, *(unsigned __int8 **)(v21 + 40), *(unsigned __int8 **)(v24 + 40));
        if (!(_DWORD)result)
          return result;
        v26 = *(_QWORD *)(v21 + 48);
        v27 = *(_QWORD *)(v24 + 48);
        return (sub_22EF910D0(v5, v26, v27) & 1) != 0;
      case 0x11u:
        v52 = *(_QWORD *)(v21 + 40);
        v53 = *(_QWORD *)(v24 + 40);
        if (((v52 >> 1) & 1) != ((v53 >> 1) & 1))
          return 0;
        result = sub_22EF91C18(a1, (unsigned __int8 *)(v52 & 0xFFFFFFFFFFFFFFFCLL), (unsigned __int8 *)(v53 & 0xFFFFFFFFFFFFFFFCLL));
        if ((_DWORD)result)
          return 1;
        return result;
      case 0x12u:
        result = sub_22EF9469C(a1, *(_QWORD *)(v21 + 32), *(_QWORD *)(v24 + 32));
        if (!(_DWORD)result)
          return result;
        return (sub_22EF94918(*(_QWORD *)(v21 + 40), *(_QWORD *)(v24 + 40)) & 1) != 0;
      case 0x13u:
        result = sub_22EF91C18(a1, *(unsigned __int8 **)(v21 + 40), *(unsigned __int8 **)(v24 + 40));
        if (!(_DWORD)result)
          return result;
        result = sub_22EF910D0(v5, *(_QWORD *)(v21 + 48), *(_QWORD *)(v24 + 48));
        if (!(_DWORD)result)
          return result;
        v54 = *(_DWORD *)(v21 + 56);
        v55 = *(_DWORD *)(v24 + 56);
        goto LABEL_133;
      case 0x14u:
        result = sub_22EF9469C(a1, *(_QWORD *)(v21 + 32), *(_QWORD *)(v24 + 32));
        if (!(_DWORD)result)
          return result;
        result = sub_22EF94918(*(_QWORD *)(v21 + 40), *(_QWORD *)(v24 + 40));
        if (!(_DWORD)result)
          return result;
        v56 = *(unsigned int *)(v21 + 20);
        if ((_DWORD)v56 != *(_DWORD *)(v24 + 20))
          return 0;
        if (!(_DWORD)v56)
          return 1;
        v57 = (unsigned int *)(v21 + 48);
        for (j = (_DWORD *)(v24 + 48); (sub_22EF941D0((uint64_t)v5, v57, j) & 1) != 0; j += 6)
        {
          v57 += 6;
          if (!--v56)
            return 1;
        }
        return 0;
      case 0x15u:
        if (((v25 ^ v22) & 0x780000) != 0)
          return 0;
        result = sub_22EF91C18(a1, *(unsigned __int8 **)(v21 + 48), *(unsigned __int8 **)(v24 + 48));
        if ((_DWORD)result)
          goto LABEL_112;
        return result;
      case 0x18u:
        if (((v25 ^ v22) & 0x7F80000) != 0)
          return 0;
        result = sub_22EF9469C(a1, *(_QWORD *)(v21 + 32), *(_QWORD *)(v24 + 32));
        if (!(_DWORD)result)
          return result;
LABEL_112:
        v26 = *(_QWORD *)(v21 + 40);
        v27 = *(_QWORD *)(v24 + 40);
        return (sub_22EF910D0(v5, v26, v27) & 1) != 0;
      case 0x19u:
        goto LABEL_37;
      case 0x1Au:
        v59 = *(_QWORD *)(v21 + 16);
        v60 = (unsigned __int16)(v59 >> 38);
        v61 = *(_QWORD *)(v24 + 16);
        if ((_DWORD)v60 != (unsigned __int16)(v61 >> 38))
          return 0;
        if (!(unsigned __int16)(v59 >> 38))
          goto LABEL_119;
        v62 = (uint64_t *)(v21 + 40);
        v63 = (uint64_t *)(v24 + 40);
        while (1)
        {
          v65 = *v62++;
          v64 = v65;
          v66 = *v63++;
          if ((sub_22EF910D0(v5, v64, v66) & 1) == 0)
            return 0;
          if (!--v60)
          {
            v59 = *(_QWORD *)(v21 + 16);
            v61 = *(_QWORD *)(v24 + 16);
LABEL_119:
            if (((v61 & 0x800000000000000) != 0) != ((v59 & 0x800000000000000) != 0))
              return 0;
            v67 = sub_22E47E1B0(v21);
            if (v67 != sub_22E47E1B0(v24))
              return 0;
            v68 = *(_QWORD *)(sub_22F40989C(a2, *v5) & 0xFFFFFFFFFFFFFFF0);
            v69 = *(_QWORD *)(sub_22F40989C(a3, v5[1]) & 0xFFFFFFFFFFFFFFF0);
            v70 = *(_QWORD *)(v68 + 16);
            v71 = (v70 >> 54) & 0xF;
            v72 = *(_QWORD *)(v69 + 16);
            v73 = (v72 >> 54) & 0xF;
            if ((v71 - 9) < 2 || (v73 - 9) < 2)
              goto LABEL_37;
            if ((_DWORD)v71 != (_DWORD)v73)
              return 0;
            if ((_DWORD)v71 == 2)
            {
              if ((v70 & 0x3C0000000000000) == 0x80000000000000)
                v75 = *(_DWORD *)((v68 + 8 * (unsigned __int16)(v70 >> 38) + 4 * ((v70 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8);
              else
                v75 = 0;
              if ((v72 & 0x3C0000000000000) == 0x80000000000000)
                v93 = *(_DWORD *)((v69 + 8 * (unsigned __int16)(v72 >> 38) + 4 * ((v72 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8);
              else
                v93 = 0;
              if (v75 == v93)
              {
                if ((v70 & 0x3C0000000000000) != 0x80000000000000)
                  goto LABEL_37;
                v94 = *(unsigned int *)((v68 + 40 + 8 * (unsigned __int16)(v70 >> 38) + 4 * ((v70 >> 59) & 1) + 7) & 0xFFFFFFFFFFFFFFF8);
                if (!(_DWORD)v94)
                  goto LABEL_37;
                v95 = 0;
                v96 = 8 * v94;
                while ((sub_22EF910D0(v5, *(_QWORD *)(((v68+ 40+ 8 * (unsigned __int16)(*(_QWORD *)(v68 + 16) >> 38)+ 4 * ((*(_QWORD *)(v68 + 16) >> 59) & 1)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 8 * ((*(_QWORD *)(v68 + 16) & 0x3C0000000000000) == 0x80000000000000)+ v95), *(_QWORD *)(((v69+ 40+ 8 * (unsigned __int16)(*(_QWORD *)(v69 + 16) >> 38)+ 4 * ((*(_QWORD *)(v69 + 16) >> 59) & 1)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 8 * ((*(_QWORD *)(v69 + 16) & 0x3C0000000000000) == 0x80000000000000)+ v95)) & 1) != 0)
                {
                  v95 += 8;
                  if (v96 == v95)
                    goto LABEL_37;
                }
              }
              return 0;
            }
            if ((v71 - 6) <= 2)
            {
              v91 = (unsigned __int8 *)sub_22F257D3C(v68);
              v92 = (unsigned __int8 *)sub_22F257D3C(v69);
              result = sub_22EF91C18((uint64_t)v5, v91, v92);
              if (!(_DWORD)result)
                return result;
            }
            goto LABEL_37;
          }
        }
      case 0x1Cu:
      case 0x31u:
LABEL_87:
        v26 = *(_QWORD *)(v21 + 24);
        v27 = *(_QWORD *)(v24 + 24);
        return (sub_22EF910D0(v5, v26, v27) & 1) != 0;
      case 0x1Du:
        result = sub_22EF910D0(a1, *(_QWORD *)(v21 + 32), *(_QWORD *)(v24 + 32));
        if (!(_DWORD)result)
          return result;
        if (*(_DWORD *)(v21 + 40) == *(_DWORD *)(v24 + 40))
        {
          v54 = *(_DWORD *)(v21 + 44);
          v55 = *(_DWORD *)(v24 + 44);
LABEL_133:
          if (v54 == v55)
            return 1;
        }
        return 0;
      case 0x1Eu:
        result = sub_22EF91C18(a1, *(unsigned __int8 **)(v21 + 48), *(unsigned __int8 **)(v24 + 48));
        if ((_DWORD)result)
        {
          result = sub_22EF91C18((uint64_t)v5, *(unsigned __int8 **)(v21 + 56), *(unsigned __int8 **)(v24 + 56));
          if ((_DWORD)result)
            goto LABEL_25;
        }
        return result;
      case 0x1Fu:
        result = sub_22EF910D0(a1, *(_QWORD *)(v21 + 32), *(_QWORD *)(v24 + 32));
        if (!(_DWORD)result)
          return result;
        v26 = *(_QWORD *)(v21 + 40) & 0xFFFFFFFFFFFFFFF0;
        v27 = *(_QWORD *)(v24 + 40) & 0xFFFFFFFFFFFFFFF0;
        return (sub_22EF910D0(v5, v26, v27) & 1) != 0;
      case 0x21u:
        result = sub_22EF910D0(a1, *(_QWORD *)(v21 + 24), *(_QWORD *)(v24 + 24));
        if (!(_DWORD)result)
          return result;
        v76 = *(_DWORD *)(v21 + 16) >> 26;
        if (v76 != *(_DWORD *)(v24 + 16) >> 26)
          return 0;
        if (!v76)
          return 1;
        v77 = v21 + 48;
        for (k = v24 + 48;
              (sub_22EF8F978((uint64_t)v5, *(_QWORD *)(v77 + 8 * ((*(_QWORD *)(v21 + 16) >> 19) & 0x7FLL)), *(_QWORD *)(k + 8 * ((*(_QWORD *)(v24 + 16) >> 19) & 0x7FLL))) & 1) != 0;
              k += 8)
        {
          v77 += 8;
          if (!--v76)
            return 1;
        }
        return 0;
      case 0x22u:
        v89 = sub_22F409D88(*v8);
        v41 = sub_22F409D88(v24);
        a1 = (uint64_t)v5;
        v42 = v89;
        return (sub_22EF8F978(a1, v42, v41) & 1) != 0;
      case 0x23u:
        result = sub_22EF8F978(a1, *(_QWORD *)(v21 + 40), *(_QWORD *)(v24 + 40));
        if (!(_DWORD)result)
          return result;
        v79 = *(_BYTE *)(v21 + 32) & 0x3F;
        if ((_DWORD)v79 != (*(_BYTE *)(v24 + 32) & 0x3F))
          return 0;
        if ((*(_BYTE *)(v21 + 32) & 0x3F) == 0)
          return 1;
        v80 = (uint64_t *)(v21 + 48);
        for (m = (uint64_t *)(v24 + 48); (sub_22EF8F978((uint64_t)v5, *v80, *m) & 1) != 0; ++m)
        {
          ++v80;
          if (!--v79)
            return 1;
        }
        return 0;
      case 0x27u:
        result = sub_22EF910D0(a1, *(_QWORD *)(v21 + 32), *(_QWORD *)(v24 + 32));
        if (!(_DWORD)result)
          return result;
        v82 = *(_DWORD *)(v24 + 40);
        if (((v82 ^ *(_DWORD *)(v21 + 40)) & 0x1F) == 0)
          return 1;
        if (((v82 ^ *(_DWORD *)(v21 + 40)) & 0x18) != 0)
          return 0;
        if ((*(_DWORD *)(v21 + 40) & 6) == 0)
        {
          v90 = v82 & 7;
          if ((*(_DWORD *)(v24 + 40) & 7u) <= 4 && ((1 << v90) & 0x13) != 0)
            return 1;
        }
        result = 0;
        v83 = *(_DWORD *)(v21 + 40) & 7;
        if (v83 > 4 || ((1 << v83) & 0x13) == 0)
          return result;
        return (*(_DWORD *)(v24 + 40) & 6) == 0;
      case 0x28u:
      case 0x29u:
        v39 = v22 ^ v25;
        if ((v39 & 0x80000) != 0 || (v39 & 0x100000) != 0)
          return 0;
LABEL_25:
        v26 = *(_QWORD *)(v21 + 32);
        v27 = *(_QWORD *)(v24 + 32);
        return (sub_22EF910D0(v5, v26, v27) & 1) != 0;
      case 0x2Au:
        result = sub_22EF910D0(a1, *(_QWORD *)(v21 + 32) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v24 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!(_DWORD)result)
          return result;
        v84 = *(_DWORD *)(v21 + 20);
        v98[1] = *(_QWORD *)(v21 + 40);
        LODWORD(v98[0]) = 8;
        HIDWORD(v98[0]) = v84;
        v85 = *(_DWORD *)(v24 + 20);
        v97[1] = *(_QWORD *)(v24 + 40);
        LODWORD(v97[0]) = 8;
        HIDWORD(v97[0]) = v85;
        return (sub_22EF941D0((uint64_t)v5, (unsigned int *)v98, v97) & 1) != 0;
      case 0x2Bu:
        result = sub_22EF910D0(a1, *(_QWORD *)(v21 + 32) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v24 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!(_DWORD)result)
          return result;
        v26 = *(_QWORD *)(v21 + 8);
        v27 = *(_QWORD *)(v24 + 8);
        return (sub_22EF910D0(v5, v26, v27) & 1) != 0;
      case 0x2Cu:
      case 0x2Du:
        v40 = sub_22F114198(*(_QWORD *)(v21 + 24));
        v41 = sub_22F114198(*(_QWORD *)(*(_QWORD *)v16 + 24));
        a1 = (uint64_t)v5;
        v42 = v40;
        return (sub_22EF8F978(a1, v42, v41) & 1) != 0;
      case 0x2Eu:
        v98[0] = *(_QWORD *)(v21 + 32);
        v97[0] = *(_QWORD *)(v24 + 32);
        result = sub_22EF943BC(a1, v98, v97);
        if (!(_DWORD)result)
          return result;
        v86 = *(unsigned int *)(v21 + 20);
        if ((_DWORD)v86 != *(_DWORD *)(v24 + 20))
          return 0;
        if (!(_DWORD)v86)
          return 1;
        v87 = (unsigned int *)(v21 + 40);
        v88 = (_DWORD *)(v24 + 40);
        break;
      case 0x2Fu:
        return ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                           + 32) ^ *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                       + 8) & 0xFFFFFFFFFFFFFFF0)
                                               + 32)) & 0xFFFF7FFF) == 0
            && ((((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 32) & 0x8000) == 0) ^ ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                                           + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                   + 32) & 0x8000u) >> 15)) & 1) != 0;
      case 0x32u:
      case 0x34u:
        v42 = *(_QWORD *)(v21 + 24);
        v41 = *(_QWORD *)(v24 + 24);
        return (sub_22EF8F978(a1, v42, v41) & 1) != 0;
      case 0x35u:
        v42 = *(_QWORD *)(v21 + 32);
        v41 = *(_QWORD *)(v24 + 32);
        return (sub_22EF8F978(a1, v42, v41) & 1) != 0;
      case 0x37u:
      case 0x38u:
        result = sub_22EF910D0(a1, *(_QWORD *)(v21 + 32), *(_QWORD *)(v24 + 32));
        if (!(_DWORD)result)
          return result;
        return *(_DWORD *)(v21 + 20) == *(_DWORD *)(v24 + 20)
            && ((*(_DWORD *)(v24 + 16) ^ *(_DWORD *)(v21 + 16)) & 0x780000) == 0;
      default:
        return 1;
    }
    while ((sub_22EF941D0((uint64_t)v5, v87, v88) & 1) != 0)
    {
      v88 += 6;
      v87 += 6;
      if (!--v86)
        return 1;
    }
    return 0;
  }
  v28 = *(_DWORD *)(*(_QWORD *)v16 + 16);
  if ((v23 != 26 || v28 != 25) && (v23 != 25 || v28 != 26))
    return 0;
LABEL_37:
  v31 = *v8;
  v32 = *(_QWORD *)v16;
  result = sub_22EF910D0(v5, *(_QWORD *)(*v8 + 24), *(_QWORD *)(*(_QWORD *)v16 + 24));
  if ((_DWORD)result)
  {
    v33 = *(_QWORD *)(v31 + 16);
    v34 = *(_QWORD *)(v32 + 16);
    if ((((v34 >> 19) ^ (v33 >> 19)) & 0x1F) != 0)
      return 0;
    v35 = (unsigned __int16)(v33 >> 19);
    v36 = (unsigned __int16)(v34 >> 19);
    if (((v35 & 0x700) != 0) != ((v36 & 0x700) != 0))
      return 0;
    result = 0;
    v37 = ((v36 >> 8) & 7) - 1;
    if (((v36 >> 8) & 7) == 0)
      v37 = 0;
    if (((v35 >> 8) & 7) != 0)
      v38 = ((v35 >> 8) & 7) - 1;
    else
      v38 = 0;
    if (v38 == v37)
      return ((v35 ^ v36) & 0x40) == 0
          && ((v35 ^ v36) & 0x80) == 0
          && ((((v35 & 0x800) == 0) ^ ((unsigned __int16)(v36 & 0x800) >> 11)) & 1) != 0;
  }
  return result;
}

BOOL sub_22EF91C18(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v3;

  if (!a2 || !a3)
    return a2 == a3;
  v3 = *a2;
  if (v3 == *a3)
    __asm { BR              X10 }
  return 0;
}

uint64_t sub_22EF924FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(_QWORD *)(a3 + 56);
  if (((v3 >> 17) & 1) == ((v4 >> 17) & 1) && ((v3 >> 18) & 1) == ((v4 >> 18) & 1))
  {
    v8 = sub_22EFDBD9C(a2);
    if (v8 == sub_22EFDBD9C(a3))
    {
      v9 = *(_QWORD *)(a2 + 40);
      v10 = *(_QWORD *)(a3 + 40);
      if ((v9 & 7u) >= 2)
        LODWORD(v11) = (v9 & 7) == 2 ? 1 : *(_DWORD *)(v9 & 0xFFFFFFFFFFFFFFF8) - 3;
      else
        LODWORD(v11) = 0;
      if ((v10 & 7u) >= 2)
        v12 = (v10 & 7) == 2 ? 1 : *(_DWORD *)(v10 & 0xFFFFFFFFFFFFFFF8) - 3;
      else
        v12 = 0;
      if ((_DWORD)v11 == v12)
      {
        if (v11 <= 1)
          v11 = 1;
        else
          v11 = v11;
        v13 = v9 & 7;
        v14 = v9 & 0xFFFFFFFFFFFFFFF8;
        v15 = *(_QWORD *)(a3 + 40) & 7;
        v16 = v10 & 0xFFFFFFFFFFFFFFF8;
        v17 = -v11;
        v18 = 2;
        while (1)
        {
          v19 = v14;
          if (v13 == 7)
            v19 = *(_QWORD *)(v14 + 8 * v18);
          v20 = v16;
          if (v15 == 7)
            v20 = *(_QWORD *)(v16 + 8 * v18);
          if ((sub_22EF94918(v19, v20) & 1) == 0)
            break;
          ++v18;
          if (v17 + v18 == 2)
          {
            result = sub_22EF910D0(a1, *(_QWORD *)(a2 + 80), *(_QWORD *)(a3 + 80));
            if ((_DWORD)result)
            {
              v22 = *(unsigned int *)(a2 + 104);
              result = 1;
              if ((_DWORD)v22)
              {
                v23 = *(unsigned int *)(a3 + 104);
                if ((_DWORD)v23)
                {
                  v24 = *(_QWORD *)(a2 + 96);
                  v25 = *(_QWORD *)(a3 + 96);
                  v26 = 8 * v22 - 8;
                  v27 = 8 * v23 - 8;
                  do
                  {
                    result = sub_22EF910D0(a1, *(_QWORD *)(*(_QWORD *)v24 + 48), *(_QWORD *)(*(_QWORD *)v25 + 48));
                    if (!(_DWORD)result)
                      break;
                    if (!v26)
                      break;
                    v24 += 8;
                    v25 += 8;
                    v26 -= 8;
                    v28 = v27;
                    v27 -= 8;
                  }
                  while (v28);
                }
              }
            }
            return result;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_22EF926C4(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  BOOL v28;
  __int16 v29;
  unsigned int v30;
  unint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  BOOL v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  uint64_t v76;
  unsigned __int8 v77;
  uint64_t v78;
  unsigned __int8 *v79;
  uint64_t v80;
  unsigned __int8 **v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int i;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  int v123;
  uint64_t v124;
  unint64_t v125;
  unsigned __int8 *v126;
  unsigned __int8 *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned __int8 *v131;
  unsigned __int8 *v132;
  uint64_t v133;
  unsigned __int8 v134;
  uint64_t v135;
  unsigned __int8 *v136;
  uint64_t v137;
  unsigned __int8 *v138;
  unsigned __int8 *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unsigned __int8 *v145;
  unsigned __int8 *v146;
  uint64_t v147;
  unsigned __int8 *v148;
  unsigned __int8 *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned __int8 *v153;
  unsigned __int8 *v154;
  uint64_t v155;
  unsigned __int8 v156;
  uint64_t v157;
  unsigned __int8 *v158;
  uint64_t v159;
  unsigned __int8 *v160;
  unsigned __int8 *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned __int8 *v165;
  unsigned __int8 *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned __int8 *v170;
  unsigned __int8 *v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  unint64_t v175;
  int v176;
  uint64_t v177;
  unint64_t v178;
  int v179;
  uint64_t v180;
  unint64_t v181;
  int v182;
  uint64_t v183;
  unint64_t v184;
  unsigned __int8 *v185;
  unsigned __int8 *v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unsigned __int8 *v191;
  unsigned __int8 *v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unsigned __int8 *v197;
  unsigned __int8 *v198;
  unsigned __int8 *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unsigned __int8 *v203;
  unsigned __int8 *v204;
  uint64_t v205;
  uint64_t v206;
  unsigned __int8 *v207;
  unsigned __int8 *v208;
  uint64_t v209;
  unsigned __int8 *v210;
  unsigned __int8 *v211;
  uint64_t v212;
  unsigned __int8 *v213;
  unsigned __int8 *v214;
  uint64_t v215;
  unsigned __int8 *v216;
  unsigned __int8 *v217;
  uint64_t v218;
  _BYTE v219[32];
  _BYTE v220[32];
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  _BYTE v225[32];
  _BYTE v226[32];
  _BYTE v227[32];
  unsigned __int8 *v228;
  uint64_t v229;

  v6 = *(_QWORD *)(a2 + 40);
  v7 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 7) != 0 || v7 == 0)
  {
    v7 = 0;
    v9 = *(_QWORD *)(a2 + 120);
    if ((v9 & 4) == 0)
    {
      v10 = v9 & 0xFFFFFFFFFFFFFFF8;
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 40);
        if ((v11 & 7) != 0)
          v7 = 0;
        else
          v7 = v11 & 0xFFFFFFFFFFFFFFF8;
      }
    }
  }
  v12 = *(_QWORD *)(a3 + 40);
  v13 = v12 & 0xFFFFFFFFFFFFFFF8;
  if ((v12 & 7) != 0 || v13 == 0)
  {
    v13 = 0;
    v15 = *(_QWORD *)(a3 + 120);
    if ((v15 & 4) == 0)
    {
      v16 = v15 & 0xFFFFFFFFFFFFFFF8;
      if (v16)
      {
        v17 = *(_QWORD *)(v16 + 40);
        if ((v17 & 7) != 0)
          v13 = 0;
        else
          v13 = v17 & 0xFFFFFFFFFFFFFFF8;
      }
    }
  }
  result = sub_22EF94918(v7, v13);
  if (!(_DWORD)result)
    return result;
  if (((*(_DWORD *)(a2 + 72) & 0xE000) == 0x4000) != ((*(_DWORD *)(a3 + 72) & 0xE000) == 0x4000))
  {
    if (!*(_BYTE *)(a1 + 102))
      return 0;
    if (*(_BYTE *)(a1 + 101))
      v66 = 2162;
    else
      v66 = 2355;
    sub_22F379440((uint64_t)&v228, a1, *(_DWORD *)(a3 + 24), v66);
    v67 = *(_QWORD *)(a3 + 48);
    if (v67)
      v68 = v67 & 0xFFFFFFFFFFFFFFF0;
    else
      v68 = sub_22EF6462C(*(_QWORD *)(a1 + 8), a3);
    v69 = v228;
    if (!v228)
    {
      v69 = (unsigned __int8 *)sub_22E3B8AAC(v229);
      v228 = v69;
    }
    v69[*v69 + 1] = 9;
    v70 = v228;
    v71 = *v228;
    *v228 = v71 + 1;
    *(_QWORD *)&v70[8 * v71 + 16] = v68;
    v72 = sub_22E3BB0B8((uint64_t)&v228);
    sub_22F3793A8(v72, a1, *(_DWORD *)(a2 + 24), 2327);
    v73 = *(_QWORD *)(a2 + 40);
    v74 = v228;
    if (!v228)
    {
      v74 = (unsigned __int8 *)sub_22E3B8AAC(v229);
      v228 = v74;
    }
    v74[*v74 + 1] = 10;
    v75 = v228;
    v76 = *v228;
    v77 = v76 + 1;
    *v228 = v76 + 1;
    *(_QWORD *)&v75[8 * v76 + 16] = v73;
    v78 = (unsigned __int16)*(_DWORD *)(a2 + 72) >> 13;
    v75[v77 + 1] = 3;
    v79 = v228;
    v80 = *v228;
    *v228 = v80 + 1;
    *(_QWORD *)&v79[8 * v80 + 16] = v78;
LABEL_178:
    v81 = &v228;
    goto LABEL_179;
  }
  if (!(v12 | v6))
  {
    v19 = sub_22EF8F718(a2);
    if (HIDWORD(v19))
    {
      v64 = v19;
      v65 = sub_22EF8F718(a3);
      if (HIDWORD(v65))
      {
        if (v64 != (_DWORD)v65)
          return 0;
      }
    }
  }
  v20 = *(_QWORD *)(a2 + 16);
  v21 = (_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
  if ((v20 & 4) != 0)
    v21 = (_QWORD *)*v21;
  v22 = sub_22EFCBFBC((unint64_t)v21);
  v23 = *(_QWORD *)(a3 + 16);
  v24 = (_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF8);
  if ((v23 & 4) != 0)
  {
LABEL_31:
    v24 = (_QWORD *)*v24;
    goto LABEL_32;
  }
  while (1)
  {
LABEL_32:
    v25 = sub_22EFCBFBC((unint64_t)v24);
    v26 = v25;
    v27 = *(_WORD *)(v22 + 8) & 0x7F;
    v28 = v27 > 0x18 || ((1 << v27) & 0x1000006) == 0;
    if (v28 && (v27 - 52) >= 6)
    {
      v29 = *(_WORD *)(v25 + 8);
      v30 = v29 & 0x7F;
    }
    else
    {
      v29 = *(_WORD *)(v25 + 8);
      v30 = v29 & 0x7F;
      if (v30 == 83)
        break;
    }
    if (v30 > 0x18 || ((1 << v30) & 0x1000006) == 0)
    {
      if (v27 == 83 && v30 - 52 < 6)
        break;
    }
    else if (v27 == 83)
    {
      break;
    }
    if (v27 != v30)
      return 0;
    if (v27 == 83)
      break;
    if (v27 == 16)
    {
      v32 = *(_QWORD *)(v22 + 56);
      v33 = v29 & 0x7F;
      if (v33 == 16)
      {
        if (((v32 >> 2) & 1) != (*(_BYTE *)(v25 + 56) & 4) >> 2)
          return 0;
        v34 = v22 - 48;
        v33 = 16;
LABEL_48:
        v35 = -48;
        goto LABEL_82;
      }
      if ((v32 & 4) != 0)
        return 0;
LABEL_61:
      v36 = -48;
      goto LABEL_68;
    }
    v33 = v29 & 0x7F;
    if (v33 == 16 && (*(_BYTE *)(v25 + 56) & 4) != 0)
      return 0;
    if ((v27 - 13) > 0x3D)
      goto LABEL_91;
    if ((*(_WORD *)(v22 + 8) & 0x7Fu) > 0x45)
    {
      if (v27 == 71)
      {
        v36 = -56;
        goto LABEL_68;
      }
      if (v27 == 70)
        goto LABEL_66;
    }
    else
    {
      v36 = -48;
      if (v27 == 24)
        goto LABEL_68;
    }
    if ((v27 - 52) >= 6)
    {
      if ((v27 - 33) >= 5)
        goto LABEL_61;
LABEL_66:
      v36 = -64;
      goto LABEL_68;
    }
    v36 = -72;
LABEL_68:
    v34 = v22 + v36;
    v35 = -40;
    if (v33 > 70)
    {
      if (v33 == 81 || v33 == 83)
        goto LABEL_82;
      if (v33 == 71)
      {
        v35 = -56;
        goto LABEL_82;
      }
    }
    else
    {
      if (v33 <= 0x18)
      {
        if (v33 == 16)
          goto LABEL_48;
        if (((1 << v33) & 0x1066) != 0)
          goto LABEL_82;
        if (v33 == 24)
          goto LABEL_48;
      }
      if (v33 == 70)
        goto LABEL_80;
    }
    if ((v33 - 52) >= 6)
    {
      if ((v33 - 33) >= 5)
        goto LABEL_48;
LABEL_80:
      v35 = -64;
      goto LABEL_82;
    }
    v35 = -72;
LABEL_82:
    if (v27 == 16 && (*(_BYTE *)(v22 + 56) & 4) != 0)
    {
LABEL_94:
      v42 = -48;
      goto LABEL_105;
    }
    v37 = v25 + v35;
    v38 = *(_QWORD *)(v34 + 40);
    if ((v38 & 7) != 0)
      v39 = 0;
    else
      v39 = v38 & 0xFFFFFFFFFFFFFFF8;
    v40 = *(_QWORD *)(v37 + 40);
    if ((v40 & 7) != 0)
      v41 = 0;
    else
      v41 = v40 & 0xFFFFFFFFFFFFFFF8;
    result = sub_22EF94918(v39, v41);
    if (!(_DWORD)result)
      return result;
LABEL_91:
    v42 = -40;
    if (v27 > 70)
    {
      if (v27 == 81)
        goto LABEL_105;
      if (v27 == 71)
      {
        v42 = -56;
        goto LABEL_105;
      }
    }
    else
    {
      if (v27 <= 0x18)
      {
        if (v27 == 16)
          goto LABEL_94;
        if (((1 << v27) & 0x1066) != 0)
          goto LABEL_105;
        if (v27 == 24)
          goto LABEL_94;
      }
      if (v27 == 70)
        goto LABEL_103;
    }
    if ((v27 - 52) >= 6)
    {
      if ((v27 - 33) >= 5)
        goto LABEL_94;
LABEL_103:
      v42 = -64;
      goto LABEL_105;
    }
    v42 = -72;
LABEL_105:
    v43 = *(_QWORD *)(v22 + v42 + 16);
    v44 = (_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF8);
    if ((v43 & 4) != 0)
      v44 = (_QWORD *)*v44;
    v22 = sub_22EFCBFBC((unint64_t)v44);
    v45 = -40;
    if (v33 > 70)
    {
      switch(v33)
      {
        case 'S':
          goto LABEL_122;
        case 'G':
          v45 = -56;
          goto LABEL_122;
        case 'Q':
          goto LABEL_122;
      }
    }
    else
    {
      if (v33 <= 0x18)
      {
        if (v33 == 16)
          goto LABEL_110;
        if (((1 << v33) & 0x1066) != 0)
          goto LABEL_122;
        if (v33 == 24)
          goto LABEL_110;
      }
      if (v33 == 70)
        goto LABEL_120;
    }
    if ((v33 - 52) < 6)
    {
      v45 = -72;
      goto LABEL_122;
    }
    if ((v33 - 33) < 5)
    {
LABEL_120:
      v45 = -64;
      goto LABEL_122;
    }
LABEL_110:
    v45 = -48;
LABEL_122:
    v46 = *(_QWORD *)(v26 + v45 + 16);
    v24 = (_QWORD *)(v46 & 0xFFFFFFFFFFFFFFF8);
    if ((v46 & 4) != 0)
      goto LABEL_31;
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7E) == 0x24)
    v47 = a2;
  else
    v47 = 0;
  if ((*(_DWORD *)(a3 + 28) & 0x7E) == 0x24)
    v48 = a3;
  else
    v48 = 0;
  if (v47)
    v49 = v48 == 0;
  else
    v49 = 1;
  if (v49)
  {
    if (v47 | v48)
      return 0;
    goto LABEL_139;
  }
  v55 = *(_QWORD *)(v47 + 152);
  v56 = v55 & 0xFFFFFFFFFFFFFFF8;
  if ((v55 & 4) != 0 && v56)
  {
    do
    {
      v57 = *(_QWORD *)(*(_QWORD *)v56 + 152);
      v56 = v57 & 0xFFFFFFFFFFFFFFF8;
    }
    while ((v57 & 4) != 0 && v56);
  }
  v58 = *(_QWORD *)(v48 + 152);
  v59 = v58 & 0xFFFFFFFFFFFFFFF8;
  if ((v58 & 4) != 0 && v59)
  {
    do
    {
      v60 = *(_QWORD *)(*(_QWORD *)v59 + 152);
      v59 = v60 & 0xFFFFFFFFFFFFFFF8;
    }
    while ((v60 & 4) != 0 && v59);
  }
  result = sub_22EF8F978(a1, v56, v59);
  if (!(_DWORD)result)
    return result;
  v61 = *(unsigned int *)(*(_QWORD *)(v47 + 168) + 8);
  if ((_DWORD)v61 != *(_DWORD *)(*(_QWORD *)(v48 + 168) + 8))
    return 0;
  if (!(_DWORD)v61)
  {
LABEL_139:
    v50 = sub_22EFC3500(a2);
    v51 = sub_22EFC3500(a3);
    result = 1;
    if (!v50
      || !v51
      || *(_DWORD *)(a1 + 96) == 1 && ((*(_WORD *)(v50 + 72) & 0x80) != 0 || (*(_WORD *)(v51 + 72) & 0x80) != 0))
    {
      return result;
    }
    v52 = *(_DWORD *)(v50 + 72);
    if ((v52 & 0x20000) != 0 || (*(_BYTE *)(v51 + 74) & 2) != 0)
      return result;
    if ((*(_DWORD *)(v50 + 28) & 0x7Fu) - 38 < 0xFFFFFFFD)
    {
LABEL_147:
      v53 = *(_QWORD *)(v51 + 48);
      if (v53)
        v54 = v53 & 0xFFFFFFFFFFFFFFF0;
      else
        v54 = sub_22EF6462C(*(_QWORD *)(a1 + 8), v51);
      v92 = sub_22EFC3B90(v51);
      v93 = sub_22EFC3B90(v50);
      if (v93)
      {
        v94 = v93;
        while (v92)
        {
          result = sub_22EF94D28(a1, v94, v92, v54);
          if (!(_DWORD)result)
            return result;
          do
            v94 = *(_QWORD *)(v94 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v94 && (*(_DWORD *)(v94 + 28) & 0x7Fu) - 49 > 2);
          do
            v92 = *(_QWORD *)(v92 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v92 && (*(_DWORD *)(v92 + 28) & 0x7Fu) - 49 > 2);
          if (!v94)
            goto LABEL_224;
        }
        if (!*(_BYTE *)(a1 + 102))
          return 0;
        if (*(_BYTE *)(a1 + 101))
          v98 = 2162;
        else
          v98 = 2355;
        sub_22F379440((uint64_t)&v228, a1, *(_DWORD *)(v51 + 24), v98);
        v99 = *(_QWORD *)(v51 + 48);
        if (v99)
          v100 = v99 & 0xFFFFFFFFFFFFFFF0;
        else
          v100 = sub_22EF6462C(*(_QWORD *)(a1 + 8), v51);
        v148 = v228;
        if (!v228)
        {
          v148 = (unsigned __int8 *)sub_22E3B8AAC(v229);
          v228 = v148;
        }
        v148[*v148 + 1] = 9;
        v149 = v228;
        v150 = *v228;
        *v228 = v150 + 1;
        *(_QWORD *)&v149[8 * v150 + 16] = v100;
        v151 = sub_22E3BB0B8((uint64_t)&v228);
        sub_22F3793A8(v151, a1, *(_DWORD *)(v94 + 24), 2313);
        v152 = *(_QWORD *)(v94 + 40);
        v153 = v228;
        if (!v228)
        {
          v153 = (unsigned __int8 *)sub_22E3B8AAC(v229);
          v228 = v153;
        }
        v153[*v153 + 1] = 10;
        v154 = v228;
        v155 = *v228;
        v156 = v155 + 1;
        *v228 = v155 + 1;
        *(_QWORD *)&v154[8 * v155 + 16] = v152;
        v157 = *(_QWORD *)(v94 + 48);
        v154[v156 + 1] = 9;
        v158 = v228;
        v159 = *v228;
        *v228 = v159 + 1;
        *(_QWORD *)&v158[8 * v159 + 16] = v157;
        sub_22E3BB0B8((uint64_t)&v228);
        sub_22F379440((uint64_t)v220, a1, *(_DWORD *)(v51 + 24), 2318);
        v81 = (unsigned __int8 **)v220;
      }
      else
      {
LABEL_224:
        if (!v92)
          return 1;
        if (!*(_BYTE *)(a1 + 102))
          return 0;
        if (*(_BYTE *)(a1 + 101))
          v95 = 2162;
        else
          v95 = 2355;
        sub_22F379440((uint64_t)&v228, a1, *(_DWORD *)(v51 + 24), v95);
        v96 = *(_QWORD *)(v51 + 48);
        if (v96)
          v97 = v96 & 0xFFFFFFFFFFFFFFF0;
        else
          v97 = sub_22EF6462C(*(_QWORD *)(a1 + 8), v51);
        v126 = v228;
        if (!v228)
        {
          v126 = (unsigned __int8 *)sub_22E3B8AAC(v229);
          v228 = v126;
        }
        v126[*v126 + 1] = 9;
        v127 = v228;
        v128 = *v228;
        *v228 = v128 + 1;
        *(_QWORD *)&v127[8 * v128 + 16] = v97;
        v129 = sub_22E3BB0B8((uint64_t)&v228);
        sub_22F379440(v129, a1, *(_DWORD *)(v92 + 24), 2313);
        v130 = *(_QWORD *)(v92 + 40);
        v131 = v228;
        if (!v228)
        {
          v131 = (unsigned __int8 *)sub_22E3B8AAC(v229);
          v228 = v131;
        }
        v131[*v131 + 1] = 10;
        v132 = v228;
        v133 = *v228;
        v134 = v133 + 1;
        *v228 = v133 + 1;
        *(_QWORD *)&v132[8 * v133 + 16] = v130;
        v135 = *(_QWORD *)(v92 + 48);
        v132[v134 + 1] = 9;
        v136 = v228;
        v137 = *v228;
        *v228 = v137 + 1;
        *(_QWORD *)&v136[8 * v137 + 16] = v135;
        sub_22E3BB0B8((uint64_t)&v228);
        sub_22F3793A8((uint64_t)v219, a1, *(_DWORD *)(v50 + 24), 2318);
        v81 = (unsigned __int8 **)v219;
      }
      goto LABEL_179;
    }
    if ((*(_DWORD *)(v51 + 28) & 0x7Fu) - 38 < 0xFFFFFFFD)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v50 + 104) + 96), *(_QWORD *)(v50 + 104));
      if (*(_DWORD *)(*(_QWORD *)(v50 + 128) + 16))
      {
        if (!*(_BYTE *)(a1 + 102))
          return 0;
        if (*(_BYTE *)(a1 + 101))
          v82 = 2162;
        else
          v82 = 2355;
        sub_22F379440((uint64_t)&v228, a1, *(_DWORD *)(v51 + 24), v82);
        v83 = *(_QWORD *)(v51 + 48);
        if (v83)
          v84 = v83 & 0xFFFFFFFFFFFFFFF0;
        else
          v84 = sub_22EF6462C(*(_QWORD *)(a1 + 8), v51);
        v138 = v228;
        if (!v228)
        {
          v138 = (unsigned __int8 *)sub_22E3B8AAC(v229);
          v228 = v138;
        }
        v138[*v138 + 1] = 9;
        v139 = v228;
        v140 = *v228;
        *v228 = v140 + 1;
        *(_QWORD *)&v139[8 * v140 + 16] = v84;
        sub_22E3BB0B8((uint64_t)&v228);
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v50 + 104) + 96), *(_QWORD *)(v50 + 104));
        v141 = *(_QWORD *)(v50 + 128);
        v142 = *(_QWORD *)(v141 + 24);
        if ((v142 & 1) != 0)
          v142 = sub_22EFCF510(v141);
        sub_22F3793A8((uint64_t)&v228, a1, *(_DWORD *)v142, 2311);
        v143 = *(_QWORD *)(**(_QWORD **)(v142 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v143 + 8) & 0xF) != 0)
          v143 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v142 + 16));
        v144 = v143 & 0xFFFFFFFFFFFFFFF0;
        v145 = v228;
        if (!v228)
        {
          v145 = (unsigned __int8 *)sub_22E3B8AAC(v229);
          v228 = v145;
        }
        v145[*v145 + 1] = 9;
        v146 = v228;
        v147 = *v228;
        *v228 = v147 + 1;
        *(_QWORD *)&v146[8 * v147 + 16] = v144;
        sub_22E4D6448((uint64_t)(v146 + 336), *(_QWORD *)v142, 1);
        sub_22E3BB0B8((uint64_t)&v228);
        sub_22F379440((uint64_t)v221, a1, *(_DWORD *)(v51 + 24), 2316);
        v81 = (unsigned __int8 **)v221;
        goto LABEL_179;
      }
      goto LABEL_147;
    }
    if ((v52 & 0x10080) == 0x80)
    {
      v85 = *(_QWORD *)(v50 + 16);
      v86 = v85 & 0xFFFFFFFFFFFFFFF8;
      if ((v85 & 4) != 0)
        v86 = *(_QWORD *)v86;
      for (i = *(_WORD *)(v86 + 8) & 0x7F; i != 83; i = *(_WORD *)(v86 + 8) & 0x7F)
      {
        v88 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v88 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_202;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_201;
          if (i == 16)
            goto LABEL_195;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_208;
          if (i == 24)
          {
LABEL_195:
            v88 = -48;
          }
          else
          {
LABEL_201:
            if (i != 70)
            {
LABEL_202:
              v89 = i - 52;
              if ((i - 33) >= 5)
                v90 = -48;
              else
                v90 = -64;
              if (v89 >= 6)
                v88 = v90;
              else
                v88 = -72;
              goto LABEL_208;
            }
            v88 = -64;
          }
        }
LABEL_208:
        v91 = *(_QWORD *)(v86 + v88 + 16);
        v86 = v91 & 0xFFFFFFFFFFFFFFF8;
        if ((v91 & 4) != 0)
          v86 = *(_QWORD *)v86;
      }
      (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v86 + 48) + 16048) + 136))(*(_QWORD *)(*(_QWORD *)(v86 + 48) + 16048), v50);
    }
    v101 = *(_QWORD *)(v50 + 128);
    if (v101)
    {
      v102 = *(unsigned __int16 *)(v101 + 8) | ((unint64_t)*(unsigned __int8 *)(v101 + 10) << 16);
      v103 = *(_QWORD *)(v51 + 128);
      if (v103)
      {
        if (((v102 >> 20) & 1) != ((*(unsigned __int8 *)(v103 + 10) >> 4) & 1))
          return 0;
        if ((v102 & 0x100000) != 0)
        {
          v104 = sub_22EFD462C(v50);
          v105 = v104;
          if (v104 && (*(_DWORD *)(v104 + 28) & 0x7F) == 0x1D)
            v105 = *(_QWORD *)(v104 + 48);
          v106 = sub_22EFD462C(v51);
          v107 = v106;
          if (v106 && (*(_DWORD *)(v106 + 28) & 0x7F) == 0x1D)
            v107 = *(_QWORD *)(v106 + 48);
          result = sub_22EF93DD4(a1, v105, v107);
          if (!(_DWORD)result)
            return result;
        }
        goto LABEL_254;
      }
    }
    else
    {
      v102 = *(_QWORD *)(v51 + 128);
      if (!v102)
      {
LABEL_254:
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v50 + 104) + 96), *(_QWORD *)(v50 + 104));
        v108 = *(_DWORD *)(*(_QWORD *)(v50 + 128) + 16);
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v51 + 104) + 96), *(_QWORD *)(v51 + 104));
        if (v108 != *(_DWORD *)(*(_QWORD *)(v51 + 128) + 16))
        {
          if (!*(_BYTE *)(a1 + 102))
            return 0;
          if (*(_BYTE *)(a1 + 101))
            v109 = 2162;
          else
            v109 = 2355;
          sub_22F379440((uint64_t)&v228, a1, *(_DWORD *)(v51 + 24), v109);
          v110 = *(_QWORD *)(v51 + 48);
          if (v110)
            v111 = v110 & 0xFFFFFFFFFFFFFFF0;
          else
            v111 = sub_22EF6462C(*(_QWORD *)(a1 + 8), v51);
          v160 = v228;
          if (!v228)
          {
            v160 = (unsigned __int8 *)sub_22E3B8AAC(v229);
            v228 = v160;
          }
          v160[*v160 + 1] = 9;
          v161 = v228;
          v162 = *v228;
          *v228 = v162 + 1;
          *(_QWORD *)&v161[8 * v162 + 16] = v111;
          v163 = sub_22E3BB0B8((uint64_t)&v228);
          sub_22F379440(v163, a1, *(_DWORD *)(v51 + 24), 2320);
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v51 + 104) + 96), *(_QWORD *)(v51 + 104));
          v164 = *(unsigned int *)(*(_QWORD *)(v51 + 128) + 16);
          v165 = v228;
          if (!v228)
          {
            v165 = (unsigned __int8 *)sub_22E3B8AAC(v229);
            v228 = v165;
          }
          v165[*v165 + 1] = 3;
          v166 = v228;
          v167 = *v228;
          *v228 = v167 + 1;
          *(_QWORD *)&v166[8 * v167 + 16] = v164;
          v168 = sub_22E3BB0B8((uint64_t)&v228);
          sub_22F3793A8(v168, a1, *(_DWORD *)(v50 + 24), 2320);
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v50 + 104) + 96), *(_QWORD *)(v50 + 104));
          v169 = *(unsigned int *)(*(_QWORD *)(v50 + 128) + 16);
          v170 = v228;
          if (!v228)
          {
            v170 = (unsigned __int8 *)sub_22E3B8AAC(v229);
            v228 = v170;
          }
          v170[*v170 + 1] = 3;
          v171 = v228;
          v172 = *v228;
          *v228 = v172 + 1;
          *(_QWORD *)&v171[8 * v172 + 16] = v169;
          goto LABEL_178;
        }
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v50 + 104) + 96), *(_QWORD *)(v50 + 104));
        v112 = *(_QWORD *)(v50 + 128);
        v113 = *(_QWORD *)(v112 + 24);
        if ((v113 & 1) != 0)
          v113 = sub_22EFCF510(v112);
        v114 = sub_22F24CD30(v50);
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v51 + 104) + 96), *(_QWORD *)(v51 + 104));
        v115 = *(_QWORD *)(v51 + 128);
        v116 = *(_QWORD *)(v115 + 24);
        if ((v116 & 1) != 0)
          v116 = sub_22EFCF510(v115);
        while (v113 != v114)
        {
          v117 = **(_QWORD **)(v113 + 16);
          v118 = *(_QWORD *)(v117 & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v118 + 8) & 0xF) != 0)
            v118 = (unint64_t)sub_22F10D2BC(v117);
          v119 = *(_QWORD *)(**(_QWORD **)(v116 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v119 + 8) & 0xF) != 0)
            v119 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v116 + 16));
          if ((sub_22EF910D0(a1, v118 & 0xFFFFFFFFFFFFFFF0, v119 & 0xFFFFFFFFFFFFFFF0) & 1) == 0)
          {
            if (!*(_BYTE *)(a1 + 102))
              return 0;
            if (*(_BYTE *)(a1 + 101))
              v173 = 2162;
            else
              v173 = 2355;
            sub_22F379440((uint64_t)&v228, a1, *(_DWORD *)(v51 + 24), v173);
            v174 = *(_QWORD *)(v51 + 48);
            if (v174)
              v175 = v174 & 0xFFFFFFFFFFFFFFF0;
            else
              v175 = sub_22EF6462C(*(_QWORD *)(a1 + 8), v51);
            v185 = v228;
            if (!v228)
            {
              v185 = (unsigned __int8 *)sub_22E3B8AAC(v229);
              v228 = v185;
            }
            v185[*v185 + 1] = 9;
            v186 = v228;
            v187 = *v228;
            *v228 = v187 + 1;
            *(_QWORD *)&v186[8 * v187 + 16] = v175;
            v188 = sub_22E3BB0B8((uint64_t)&v228);
            sub_22F379440(v188, a1, *(_DWORD *)v116, 2311);
            v189 = *(_QWORD *)(**(_QWORD **)(v116 + 16) & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v189 + 8) & 0xF) != 0)
              v189 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v116 + 16));
            v190 = v189 & 0xFFFFFFFFFFFFFFF0;
            v191 = v228;
            if (!v228)
            {
              v191 = (unsigned __int8 *)sub_22E3B8AAC(v229);
              v228 = v191;
            }
            v191[*v191 + 1] = 9;
            v192 = v228;
            v193 = *v228;
            *v228 = v193 + 1;
            *(_QWORD *)&v192[8 * v193 + 16] = v190;
            sub_22E4D6448((uint64_t)(v192 + 336), *(_QWORD *)v116, 1);
            v194 = sub_22E3BB0B8((uint64_t)&v228);
            sub_22F3793A8(v194, a1, *(_DWORD *)v113, 2311);
            v195 = *(_QWORD *)(**(_QWORD **)(v113 + 16) & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v195 + 8) & 0xF) != 0)
              v195 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v113 + 16));
            v196 = v195 & 0xFFFFFFFFFFFFFFF0;
            v197 = v228;
            if (!v228)
            {
              v197 = (unsigned __int8 *)sub_22E3B8AAC(v229);
              v228 = v197;
            }
            v197[*v197 + 1] = 9;
LABEL_365:
            v208 = v228;
            v209 = *v228;
            *v228 = v209 + 1;
            *(_QWORD *)&v208[8 * v209 + 16] = v196;
            sub_22E4D6448((uint64_t)(v208 + 336), *(_QWORD *)v113, 1);
            goto LABEL_178;
          }
          if ((*(_BYTE *)(v113 + 12) & 1) != (*(_BYTE *)(v116 + 12) & 1))
          {
            if (!*(_BYTE *)(a1 + 102))
              return 0;
            if (*(_BYTE *)(a1 + 101))
              v176 = 2162;
            else
              v176 = 2355;
            sub_22F379440((uint64_t)&v228, a1, *(_DWORD *)(v51 + 24), v176);
            v177 = *(_QWORD *)(v51 + 48);
            if (v177)
              v178 = v177 & 0xFFFFFFFFFFFFFFF0;
            else
              v178 = sub_22EF6462C(*(_QWORD *)(a1 + 8), v51);
            v198 = v228;
            if (!v228)
            {
              v198 = (unsigned __int8 *)sub_22E3B8AAC(v229);
              v228 = v198;
            }
            v198[*v198 + 1] = 9;
            v199 = v228;
            v200 = *v228;
            *v228 = v200 + 1;
            *(_QWORD *)&v199[8 * v200 + 16] = v178;
            v201 = sub_22E3BB0B8((uint64_t)&v228);
            sub_22F379440(v201, a1, *(_DWORD *)v116, 2331);
            v202 = *(_BYTE *)(v116 + 12) & 1;
            v203 = v228;
            if (!v228)
            {
              v203 = (unsigned __int8 *)sub_22E3B8AAC(v229);
              v228 = v203;
            }
            v203[*v203 + 1] = 2;
            v204 = v228;
            v205 = *v228;
            *v228 = v205 + 1;
            *(_QWORD *)&v204[8 * v205 + 16] = v202;
            sub_22E4D6448((uint64_t)(v204 + 336), *(_QWORD *)v116, 1);
            v206 = sub_22E3BB0B8((uint64_t)&v228);
            sub_22F3793A8(v206, a1, *(_DWORD *)v113, 2311);
            v196 = *(_BYTE *)(v113 + 12) & 1;
            v207 = v228;
            if (!v228)
            {
              v207 = (unsigned __int8 *)sub_22E3B8AAC(v229);
              v228 = v207;
            }
            v207[*v207 + 1] = 2;
            goto LABEL_365;
          }
          v113 += 24;
          v116 += 24;
        }
        v120 = sub_22EFD9E18(v51);
        v121 = sub_22EFD9E18(v50);
        if (v121)
        {
          v122 = v121;
          while (1)
          {
            if (!v120)
            {
              if (!*(_BYTE *)(a1 + 102))
                return 0;
              if (*(_BYTE *)(a1 + 101))
                v179 = 2162;
              else
                v179 = 2355;
              sub_22F379440((uint64_t)&v228, a1, *(_DWORD *)(v51 + 24), v179);
              v180 = *(_QWORD *)(v51 + 48);
              if (v180)
                v181 = v180 & 0xFFFFFFFFFFFFFFF0;
              else
                v181 = sub_22EF6462C(*(_QWORD *)(a1 + 8), v51);
              v213 = v228;
              if (!v228)
              {
                v213 = (unsigned __int8 *)sub_22E3B8AAC(v229);
                v228 = v213;
              }
              v213[*v213 + 1] = 9;
              v214 = v228;
              v215 = *v228;
              *v228 = v215 + 1;
              *(_QWORD *)&v214[8 * v215 + 16] = v181;
              sub_22E3BB0B8((uint64_t)&v228);
              sub_22F3793A8((uint64_t)v227, a1, *(_DWORD *)(v122 + 56), 2315);
              sub_22E3BB0B8((uint64_t)v227);
              sub_22F379440((uint64_t)v226, a1, *(_DWORD *)(v51 + 24), 2319);
              v81 = (unsigned __int8 **)v226;
              goto LABEL_179;
            }
            if ((sub_22EF8F978(a1, v122, v120) & 1) == 0)
              break;
            if ((*(_QWORD *)(v122 + 48) & 1) != 0)
              v122 = sub_22F3B44EC(v122);
            else
              v122 = *(_QWORD *)(v122 + 48);
            if ((*(_QWORD *)(v120 + 48) & 1) != 0)
            {
              v120 = sub_22F3B44EC(v120);
              if (!v122)
                goto LABEL_284;
            }
            else
            {
              v120 = *(_QWORD *)(v120 + 48);
              if (!v122)
                goto LABEL_284;
            }
          }
          if (!*(_BYTE *)(a1 + 102))
            return 0;
          if (*(_BYTE *)(a1 + 101))
            v182 = 2162;
          else
            v182 = 2355;
          sub_22F379440((uint64_t)&v228, a1, *(_DWORD *)(v51 + 24), v182);
          v183 = *(_QWORD *)(v51 + 48);
          if (v183)
            v184 = v183 & 0xFFFFFFFFFFFFFFF0;
          else
            v184 = sub_22EF6462C(*(_QWORD *)(a1 + 8), v51);
          v216 = v228;
          if (!v228)
          {
            v216 = (unsigned __int8 *)sub_22E3B8AAC(v229);
            v228 = v216;
          }
          v216[*v216 + 1] = 9;
          v217 = v228;
          v218 = *v228;
          *v228 = v218 + 1;
          *(_QWORD *)&v217[8 * v218 + 16] = v184;
          sub_22E3BB0B8((uint64_t)&v228);
          sub_22F3793A8((uint64_t)v225, a1, *(_DWORD *)(v122 + 56), 2315);
          sub_22E3BB0B8((uint64_t)v225);
          sub_22F379440((uint64_t)v224, a1, *(_DWORD *)(v120 + 56), 2315);
          v81 = (unsigned __int8 **)v224;
        }
        else
        {
LABEL_284:
          if (!v120)
            goto LABEL_147;
          if (!*(_BYTE *)(a1 + 102))
            return 0;
          if (*(_BYTE *)(a1 + 101))
            v123 = 2162;
          else
            v123 = 2355;
          sub_22F379440((uint64_t)&v228, a1, *(_DWORD *)(v51 + 24), v123);
          v124 = *(_QWORD *)(v51 + 48);
          if (v124)
            v125 = v124 & 0xFFFFFFFFFFFFFFF0;
          else
            v125 = sub_22EF6462C(*(_QWORD *)(a1 + 8), v51);
          v210 = v228;
          if (!v228)
          {
            v210 = (unsigned __int8 *)sub_22E3B8AAC(v229);
            v228 = v210;
          }
          v210[*v210 + 1] = 9;
          v211 = v228;
          v212 = *v228;
          *v228 = v212 + 1;
          *(_QWORD *)&v211[8 * v212 + 16] = v125;
          sub_22E3BB0B8((uint64_t)&v228);
          sub_22F379440((uint64_t)v223, a1, *(_DWORD *)(v120 + 56), 2315);
          sub_22E3BB0B8((uint64_t)v223);
          sub_22F3793A8((uint64_t)v222, a1, *(_DWORD *)(v50 + 24), 2319);
          v81 = (unsigned __int8 **)v222;
        }
LABEL_179:
        sub_22E3BB0B8((uint64_t)v81);
        return 0;
      }
      LODWORD(v102) = *(unsigned __int16 *)(v102 + 8) | (*(unsigned __int8 *)(v102 + 10) << 16);
    }
    if ((v102 & 0x100000) != 0)
      return 0;
    goto LABEL_254;
  }
  v62 = 0;
  v63 = 24 * v61;
  while ((sub_22EF941D0(a1, (unsigned int *)(**(_QWORD **)(v47 + 168) + v62), (_DWORD *)(**(_QWORD **)(v48 + 168) + v62)) & 1) != 0)
  {
    v62 += 24;
    if (v63 == v62)
      goto LABEL_139;
  }
  return 0;
}

uint64_t sub_22EF93C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;

  v6 = *(_QWORD *)(a2 + 40);
  if ((v6 & 7) != 0)
    v7 = 0;
  else
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(a3 + 40);
  if ((v8 & 7) != 0)
    v9 = 0;
  else
    v9 = v8 & 0xFFFFFFFFFFFFFFF8;
  result = sub_22EF94918(v7, v9);
  if ((_DWORD)result)
    return sub_22EF910D0(a1, *(_QWORD *)((*(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8) + ((2 * *(_QWORD *)(a2 + 80)) & 8)), *(_QWORD *)((*(_QWORD *)(a3 + 80) & 0xFFFFFFFFFFFFFFF8)+ ((2 * *(_QWORD *)(a3 + 80)) & 8)));
  return result;
}

uint64_t sub_22EF93CB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 4) != 0)
    v7 = (_QWORD *)*v7;
  if (v7)
    v8 = (unint64_t)(v7 - 8);
  else
    v8 = 0;
  v9 = *(_QWORD *)(v8 + 48);
  if (v9)
    v10 = v9 & 0xFFFFFFFFFFFFFFF0;
  else
    v10 = sub_22EF6462C(*(_QWORD *)(a1 + 8), v8);
  return sub_22EF94D28(a1, a2, a3, v10);
}

uint64_t sub_22EF93D20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  BOOL v14;

  v6 = *(_QWORD *)(a2 + 40);
  v7 = v6 & 7;
  v8 = (_DWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 7) != 0)
    v9 = 0;
  else
    v9 = v6 & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(a3 + 40);
  v11 = v10 & 7;
  v12 = (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 7) != 0)
    v13 = 0;
  else
    v13 = v10 & 0xFFFFFFFFFFFFFFF8;
  if (sub_22EF94918(v9, v13)
    && (v7 != 6 || !*v8 || v11 == 6 && (*v12 ? (v14 = *v8 == *v12) : (v14 = 0), v14)))
  {
    return sub_22EF910D0(a1, *(_QWORD *)(a2 + 48), *(_QWORD *)(a3 + 48));
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22EF93DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  int v12;
  _BOOL4 v13;
  int v14;
  int v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (((*(_WORD *)(a3 + 80) ^ *(_WORD *)(a2 + 80)) & 0x7F) != 0)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v6)
    v7 = *(_BYTE *)(v6 + 16) == 26;
  else
    v7 = 0;
  if (!v7)
    v6 = sub_22F10CF48(v6);
  v8 = *(_QWORD *)(v6 + 16);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v9)
    v10 = *(_BYTE *)(v9 + 16) == 26;
  else
    v10 = 0;
  if (!v10)
    v9 = sub_22F10CF48(v9);
  if (((*(_QWORD *)(v9 + 16) ^ v8) & 0x300000000) != 0
    || ((*(_DWORD *)(a3 + 28) ^ *(_DWORD *)(a2 + 28)) & 0x6000) != 0)
  {
    return 0;
  }
  v11 = (*(_QWORD *)(a2 + 40) & 7) == 6 ? *(_DWORD *)(*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8) : 0;
  v12 = (*(_QWORD *)(a3 + 40) & 7) == 6 ? *(_DWORD *)(*(_QWORD *)(a3 + 40) & 0xFFFFFFFFFFFFFFF8) : 0;
  if (v11 != v12)
    return 0;
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) + 80) & 0xE000) == 0x4000)
    v13 = 1;
  else
    v13 = (*(_QWORD *)(a2 + 40) & 7) == 6
       && (*(_DWORD *)(*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4;
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3) + 80) & 0xE000) == 0x4000)
  {
    if (!v13)
      return 0;
  }
  else if ((*(_QWORD *)(a3 + 40) & 7) == 6)
  {
    if (((v13 ^ ((*(_DWORD *)(*(_QWORD *)(a3 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4)) & 1) != 0)
      return 0;
  }
  else if (v13)
  {
    return 0;
  }
  v14 = sub_22E8FB7BC(a2);
  if (v14 != sub_22E8FB7BC(a3))
    return 0;
  v15 = sub_22EF9550C(a2);
  if (v15 != sub_22EF9550C(a3))
    return 0;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v17 = (*(_BYTE *)(v16 + 82) & 0xC) != 0 || sub_22EFD7260(v16) != 0;
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  if ((*(_BYTE *)(v18 + 82) & 0xC) == 0)
  {
    if (((v17 ^ (sub_22EFD7260(v18) != 0)) & 1) == 0)
      goto LABEL_39;
    return 0;
  }
  if (!v17)
    return 0;
LABEL_39:
  v19 = *(_QWORD *)(a2 + 80);
  v20 = *(_QWORD *)(a3 + 80);
  if (((v19 >> 19) & 1) != ((v20 >> 19) & 1))
    return 0;
  if (((v19 >> 25) & 1) != ((v20 >> 25) & 1))
    return 0;
  v21 = (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) + 80) & 0x400000) == 0;
  if (v21 == (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3) + 82) & 0x40) >> 6)
    return 0;
  v22 = *(_DWORD *)(a2 + 28);
  if ((v22 & 0x7F) == 0x37)
  {
    v23 = *(_QWORD *)(a2 + 112);
    v24 = *(_QWORD *)(v23 + 80);
    if ((v24 & 0x4000000000000000) != 0)
      v25 = *(_QWORD *)(v23 + 16 * ((v24 >> 61) & 1) + 168);
    else
      v25 = v24 >> 63;
    v38 = v25;
    v27 = *(_QWORD *)(a3 + 112);
    v28 = *(_QWORD *)(v27 + 80);
    if ((v28 & 0x4000000000000000) != 0)
      v29 = *(_QWORD *)(v27 + 16 * ((v28 >> 61) & 1) + 168);
    else
      v29 = v28 >> 63;
    if (!sub_22EFD627C(&v38, v29))
      return 0;
    v22 = *(_DWORD *)(a2 + 28);
  }
  if ((v22 & 0x7F) == 0x38)
  {
    v38 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) + 160);
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
    if (!sub_22EFD627C(&v38, *(_QWORD *)(v30 + 160)))
      return 0;
    v31 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (!v31 || *(unsigned __int8 *)(v31 + 16) - 27 <= 0xFFFFFFFD)
      v31 = sub_22F10CF48(v31);
    v32 = *(_QWORD *)(v31 + 24);
    v33 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (!v33 || *(unsigned __int8 *)(v33 + 16) - 27 <= 0xFFFFFFFD)
      v33 = sub_22F10CF48(v33);
    if (!sub_22EF910D0(a1, v32, *(_QWORD *)(v33 + 24)))
      return 0;
  }
  v34 = *(_QWORD *)(a2 + 40);
  v35 = (v34 & 7) != 0 ? 0 : v34 & 0xFFFFFFFFFFFFFFF8;
  v36 = *(_QWORD *)(a3 + 40);
  v37 = (v36 & 7) != 0 ? 0 : v36 & 0xFFFFFFFFFFFFFFF8;
  if (!sub_22EF94918(v35, v37))
    return 0;
  return sub_22EF910D0(a1, *(_QWORD *)(a2 + 48), *(_QWORD *)(a3 + 48));
}

uint64_t sub_22EF941D0(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v3;

  v3 = *a2;
  if ((_DWORD)v3 == *a3)
    __asm { BR              X10 }
  return 0;
}

uint64_t sub_22EF943BC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  int v9;
  int v10;
  int v11;
  _DWORD *v12;
  _BYTE *v13;
  unsigned int *v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _DWORD v37[2];
  uint64_t v38;
  _DWORD v39[2];
  uint64_t v40;

  v6 = sub_22F0F08CC(a2);
  v7 = sub_22F0F08CC(a3);
  if (v6 && v7)
  {
    result = sub_22EF8F978(a1, v6, v7);
    if (!(_DWORD)result)
      return result;
    v9 = sub_22F0F084C(a2);
    if (v9 != sub_22F0F084C(a3))
      return 1;
  }
  else
  {
    if (v6 | v7)
      return 0;
    v10 = sub_22F0F084C(a2);
    if (v10 != sub_22F0F084C(a3))
      return 0;
  }
  v11 = sub_22F0F084C(a2);
  if (v11 == 6)
  {
    if ((~*(_DWORD *)(*a2 & 0xFFFFFFFFFFFFFFF8) & 3) != 0)
      v29 = 0;
    else
      v29 = *a2 & 0xFFFFFFFFFFFFFFF8;
    if ((~*(_DWORD *)(*a3 & 0xFFFFFFFFFFFFFFF8) & 3) != 0)
      v30 = 0;
    else
      v30 = *a3 & 0xFFFFFFFFFFFFFFF8;
    v31 = *(_DWORD *)v29 >> 2;
    v40 = *(_QWORD *)(v29 + 24);
    v39[0] = 8;
    v39[1] = v31;
    v32 = *(_DWORD *)v30 >> 2;
    v38 = *(_QWORD *)(v30 + 24);
    v37[0] = 8;
    v37[1] = v32;
    result = sub_22EF941D0(a1, v39, v37);
    if ((_DWORD)result)
      return sub_22EF8F978(a1, *(_QWORD *)(v29 + 16), *(_QWORD *)(v30 + 16));
    return result;
  }
  if (v11 == 4)
  {
    if ((~*(_DWORD *)a2 & 6) != 0)
      v33 = 0;
    else
      v33 = *a2 & 0xFFFFFFFFFFFFFFF8;
    if ((~*(_DWORD *)a3 & 6) != 0)
      v34 = 0;
    else
      v34 = *a3 & 0xFFFFFFFFFFFFFFF8;
    result = sub_22EF9469C(a1, *(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!(_DWORD)result)
      return result;
    v35 = *(_QWORD *)(v34 + 8);
    if ((*(_BYTE *)(v33 + 8) & 4) != 0)
    {
      if ((v35 & 4) != 0)
        return *(_DWORD *)(v33 + 16) == *(_DWORD *)(v34 + 16);
    }
    else if ((v35 & 4) == 0)
    {
      return sub_22EF94918(*(_QWORD *)(v33 + 16), *(_QWORD *)(v34 + 16));
    }
    return 0;
  }
  if (v11 != 1)
    return 1;
  v12 = 0;
  if ((*a2 & 6) == 2)
  {
    v13 = (_BYTE *)(*a2 & 0xFFFFFFFFFFFFFFF8);
    if (v13)
    {
      if ((*v13 & 3) != 0)
        v12 = 0;
      else
        v12 = (_DWORD *)(*a2 & 0xFFFFFFFFFFFFFFF8);
    }
  }
  v14 = 0;
  if ((*a3 & 6) == 2)
  {
    v15 = (_BYTE *)(*a3 & 0xFFFFFFFFFFFFFFF8);
    if (v15)
    {
      if ((*v15 & 3) != 0)
        v14 = 0;
      else
        v14 = (unsigned int *)(*a3 & 0xFFFFFFFFFFFFFFF8);
    }
  }
  v18 = *v12;
  v17 = (uint64_t *)(v12 + 2);
  v16 = v18;
  v21 = *v14;
  v20 = (uint64_t *)(v14 + 2);
  v19 = v21;
  v22 = v16 >> 2;
  v23 = (unint64_t)v21 >> 2;
  if (v16 < 4 || v19 < 4)
  {
    v27 = v17;
    v26 = v20;
    return v27 == &v17[v22] && v26 == &v20[v23];
  }
  v24 = 8 * v23 - 8;
  v25 = 8 * v22 - 8;
  v26 = v20;
  v27 = v17;
  while (1)
  {
    result = sub_22EF8F978(a1, *v27, *v26);
    if (!(_DWORD)result)
      break;
    ++v27;
    ++v26;
    if (v25)
    {
      v28 = v24;
      v24 -= 8;
      v25 -= 8;
      if (v28)
        continue;
    }
    return v27 == &v17[v22] && v26 == &v20[v23];
  }
  return result;
}

uint64_t sub_22EF9469C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = (*(_DWORD *)(a2 + 8) >> 1) & 3;
    if (v7 == 2)
    {
      v8 = 3;
    }
    else if (v7 == 1)
    {
      v18 = *(_DWORD *)(v6 + 28) & 0x7F;
      v19 = v18 - 35;
      if (v18 == 16)
        v8 = 1;
      else
        v8 = 2;
      if (v19 < 3)
        v8 = 6;
    }
    else if (v7)
    {
      v8 = 4;
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    v8 = 5;
  }
  v9 = *(_QWORD *)(a3 + 16);
  if (v9)
  {
    v10 = (*(_DWORD *)(a3 + 8) >> 1) & 3;
    if (v10 == 2)
    {
      v11 = 3;
    }
    else if (v10 == 1)
    {
      v20 = *(_DWORD *)(v9 + 28) & 0x7F;
      v21 = v20 - 35;
      if (v20 == 16)
        v11 = 1;
      else
        v11 = 2;
      if (v21 < 3)
        v11 = 6;
    }
    else if (v10)
    {
      v11 = 4;
    }
    else
    {
      v11 = 0;
    }
  }
  else
  {
    v11 = 5;
  }
  if (v8 != v11)
    return 0;
  v12 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (((*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8) != 0) == (v13 == 0))
    return 0;
  if (v12)
  {
    result = sub_22EF9469C(a1, v12, v13);
    if (!(_DWORD)result)
      return result;
    v6 = *(_QWORD *)(a2 + 16);
  }
  if (!v6)
    return 1;
  v15 = *(_QWORD *)(a2 + 8);
  v16 = (v15 >> 1) & 3;
  if (v16 - 2 < 2)
  {
    if ((*(_BYTE *)(a3 + 8) & 4) != 0)
      v17 = *(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFFFF0;
    else
      v17 = 0;
    return sub_22EF910D0(a1, v6 & (v15 << 61 >> 63) & 0xFFFFFFFFFFFFFFF0, v17);
  }
  if (v16 == 1)
  {
    v22 = *(_DWORD *)(v6 + 28) & 0x7F;
    if ((v22 - 35) < 3)
    {
      v32 = sub_22F0AABF8(a2);
      v28 = sub_22F0AABF8(a3);
      v29 = a1;
      v24 = v32;
      return sub_22EF8F978(v29, v24, v28);
    }
    v23 = *(_QWORD *)(a2 + 8) & 6;
    if (v22 == 16)
    {
      if (v23 == 2)
        v24 = v6;
      else
        v24 = 0;
      if ((*(_QWORD *)(a3 + 8) & 6) == 2)
      {
        v25 = *(_QWORD *)(a3 + 16);
        v26 = (*(_DWORD *)(v25 + 28) & 0x7F) == 16;
        goto LABEL_53;
      }
    }
    else
    {
      if (v22 == 17 && v23 == 2)
        v24 = v6;
      else
        v24 = 0;
      if ((*(_QWORD *)(a3 + 8) & 6) == 2)
      {
        v25 = *(_QWORD *)(a3 + 16);
        v26 = (*(_DWORD *)(v25 + 28) & 0x7F) == 17;
LABEL_53:
        if (v26)
          v28 = v25;
        else
          v28 = 0;
        goto LABEL_56;
      }
    }
    v28 = 0;
LABEL_56:
    v29 = a1;
    return sub_22EF8F978(v29, v24, v28);
  }
  v30 = 0;
  if ((v15 & 6) != 0)
    v31 = 0;
  else
    v31 = v6;
  if ((*(_BYTE *)(a3 + 8) & 6) == 0)
    v30 = *(_QWORD *)(a3 + 16);
  return sub_22EF94918(v31, v30);
}

uint64_t sub_22EF94918(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  const void *v3;
  size_t v4;
  unsigned int v5;
  int *v6;
  const void *v7;
  int v8;

  if (!a1 || !a2)
    return a1 == a2;
  v2 = *(unsigned int **)(a1 + 16);
  v5 = *v2;
  v3 = v2 + 4;
  v4 = v5;
  v6 = *(int **)(a2 + 16);
  v8 = *v6;
  v7 = v6 + 4;
  if (v4 != v8)
    return 0;
  if (v4)
    return memcmp(v3, v7, v4) == 0;
  return 1;
}

uint64_t sub_22EF94974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  v5 = sub_22EFFA604(*(unsigned __int8 **)(a2 + *(unsigned __int8 *)(a2 + 3)));
  v6 = sub_22EFFA604(*(unsigned __int8 **)(a3 + *(unsigned __int8 *)(a3 + 3)));
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
    return (v5 != 0) == (v6 != 0);
  else
    return sub_22EF8F978(a1, v5, v6);
}

uint64_t sub_22EF949F8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  if (sub_22EF910D0(*a1, *(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8))
    && sub_22EF910D0(*a1, *(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8)))
  {
    return sub_22EF910D0(*a1, *(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8));
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22EF94A6C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = sub_22EF910D0(*a1, *(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8));
  if ((_DWORD)result)
    return sub_22EF910D0(*a1, *(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8));
  return result;
}

uint64_t sub_22EF94AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;

  v3 = a2 & 7;
  v4 = v3;
  if (v3 == 7)
  {
    v5 = *(_DWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
    if (v5 >= 3)
      v5 = 3;
    v4 = v5 | 8;
  }
  v6 = a3 & 7;
  if (v6 == 7)
  {
    v7 = *(_DWORD *)(a3 & 0xFFFFFFFFFFFFFFF8);
    if (v7 >= 3)
      v7 = 3;
    v6 = v7 | 8;
  }
  if (v4 == v6)
  {
    if ((a2 & 7) == 7)
    {
      v8 = *(_DWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
      if (v8 >= 3)
        v8 = 3;
      v3 = v8 | 8;
    }
    __asm { BR              X12 }
  }
  return 0;
}

uint64_t sub_22EF94D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;

  v8 = *(_QWORD *)(a3 + 16);
  v9 = v8 & 0xFFFFFFFFFFFFFFF8;
  if ((v8 & 4) != 0)
    v9 = *(_QWORD *)v9;
  v10 = *(_WORD *)(v9 + 8) & 0x7F;
  v11 = -40;
  if (v10 > 0x46)
  {
    switch(v10)
    {
      case 'S':
        goto LABEL_18;
      case 'G':
        v11 = -56;
        goto LABEL_18;
      case 'Q':
        goto LABEL_18;
    }
    goto LABEL_14;
  }
  if (v10 > 0x18)
    goto LABEL_13;
  if (v10 != 16)
  {
    if (((1 << v10) & 0x1066) != 0)
      goto LABEL_18;
    if (v10 != 24)
    {
LABEL_13:
      if (v10 == 70)
      {
LABEL_16:
        v11 = -64;
        goto LABEL_18;
      }
LABEL_14:
      if (v10 - 52 < 6)
      {
        v11 = -72;
        goto LABEL_18;
      }
      if (v10 - 33 < 5)
        goto LABEL_16;
    }
  }
  v11 = -48;
LABEL_18:
  if (sub_22EFC2E8C(a2) && sub_22EFC2E8C(a3))
  {
    v12 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0)
                                                          + 8) & 0xFFFFFFFFFFFFFFF0)
                                  + 24));
    v13 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0)
                                                          + 8) & 0xFFFFFFFFFFFFFFF0)
                                  + 24));
    return sub_22EF8F978(a1, v12, v13);
  }
  v15 = v9 + v11;
  v16 = *(_QWORD *)(a2 + 40);
  if ((v16 & 7) != 0)
    v17 = 0;
  else
    v17 = v16 & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_QWORD *)(a3 + 40);
  if ((v18 & 7) != 0)
    v19 = 0;
  else
    v19 = v18 & 0xFFFFFFFFFFFFFFF8;
  if ((sub_22EF94918(v17, v19) & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 102))
      return 0;
    if (*(_BYTE *)(a1 + 101))
      v20 = 2162;
    else
      v20 = 2355;
    sub_22F379440((uint64_t)&v54, a1, *(_DWORD *)(v15 + 24), v20);
    v21 = v54;
    if (!v54)
    {
      v21 = (unsigned __int8 *)sub_22E3B8AAC(v55);
      v54 = v21;
    }
    v21[*v21 + 1] = 9;
    v22 = v54;
    v23 = *v54;
    *v54 = v23 + 1;
    *(_QWORD *)&v22[8 * v23 + 16] = a4;
    sub_22E3BB0B8((uint64_t)&v54);
    sub_22F379440((uint64_t)&v54, a1, *(_DWORD *)(a3 + 24), 2314);
    v24 = *(_QWORD *)(a3 + 40);
    v25 = v54;
    if (!v54)
    {
      v25 = (unsigned __int8 *)sub_22E3B8AAC(v55);
      v54 = v25;
    }
    v25[*v25 + 1] = 10;
    v26 = v54;
    v27 = *v54;
    *v54 = v27 + 1;
    *(_QWORD *)&v26[8 * v27 + 16] = v24;
    sub_22E3BB0B8((uint64_t)&v54);
    sub_22F3793A8((uint64_t)&v54, a1, *(_DWORD *)(a2 + 24), 2314);
    v28 = *(_QWORD *)(a2 + 40);
    v29 = v54;
    if (!v54)
    {
      v29 = (unsigned __int8 *)sub_22E3B8AAC(v55);
      v54 = v29;
    }
    v29[*v29 + 1] = 10;
    v30 = v54;
    v31 = *v54;
    *v54 = v31 + 1;
    *(_QWORD *)&v30[8 * v31 + 16] = v28;
LABEL_63:
    sub_22E3BB0B8((uint64_t)&v54);
    return 0;
  }
  if ((sub_22EF910D0(a1, *(_QWORD *)(a2 + 48), *(_QWORD *)(a3 + 48)) & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 102))
      return 0;
    if (*(_BYTE *)(a1 + 101))
      v34 = 2162;
    else
      v34 = 2355;
    sub_22F379440((uint64_t)&v54, a1, *(_DWORD *)(v15 + 24), v34);
    v35 = v54;
    if (!v54)
    {
      v35 = (unsigned __int8 *)sub_22E3B8AAC(v55);
      v54 = v35;
    }
    v35[*v35 + 1] = 9;
    v36 = v54;
    v37 = *v54;
    *v54 = v37 + 1;
    *(_QWORD *)&v36[8 * v37 + 16] = a4;
    sub_22E3BB0B8((uint64_t)&v54);
    sub_22F379440((uint64_t)&v54, a1, *(_DWORD *)(a3 + 24), 2313);
    v38 = *(_QWORD *)(a3 + 40);
    v39 = v54;
    if (!v54)
    {
      v39 = (unsigned __int8 *)sub_22E3B8AAC(v55);
      v54 = v39;
    }
    v39[*v39 + 1] = 10;
    v40 = v54;
    v41 = *v54;
    v42 = v41 + 1;
    *v54 = v41 + 1;
    *(_QWORD *)&v40[8 * v41 + 16] = v38;
    v43 = *(_QWORD *)(a3 + 48);
    v40[v42 + 1] = 9;
    v44 = v54;
    v45 = *v54;
    *v54 = v45 + 1;
    *(_QWORD *)&v44[8 * v45 + 16] = v43;
    sub_22E3BB0B8((uint64_t)&v54);
    sub_22F3793A8((uint64_t)&v54, a1, *(_DWORD *)(a2 + 24), 2313);
    v46 = *(_QWORD *)(a2 + 40);
    v47 = v54;
    if (!v54)
    {
      v47 = (unsigned __int8 *)sub_22E3B8AAC(v55);
      v54 = v47;
    }
    v47[*v47 + 1] = 10;
    v48 = v54;
    v49 = *v54;
    v50 = v49 + 1;
    *v54 = v49 + 1;
    *(_QWORD *)&v48[8 * v49 + 16] = v46;
    v51 = *(_QWORD *)(a2 + 48);
    v48[v50 + 1] = 9;
    v52 = v54;
    v53 = *v54;
    *v54 = v53 + 1;
    *(_QWORD *)&v52[8 * v53 + 16] = v51;
    goto LABEL_63;
  }
  if ((*(_BYTE *)(a2 + 68) & 1) == 0)
    return 1;
  v32 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
  if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
    v32 = *(_QWORD *)(v32 + 8);
  if ((*(_BYTE *)(a3 + 68) & 1) != 0)
  {
    v33 = *(_QWORD *)(a3 + 72) & 0xFFFFFFFFFFFFFFFCLL;
    if ((*(_DWORD *)(a3 + 72) & 3) != 0 && (*(_DWORD *)(a3 + 72) & 3) != 3)
      v33 = *(_QWORD *)(v33 + 8);
  }
  else
  {
    v33 = 0;
  }
  return sub_22EF91C18(a1, (unsigned __int8 *)v32, (unsigned __int8 *)v33);
}

uint64_t sub_22EF951DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t result;
  char v14;
  size_t v15;
  int v16;
  void *v17;
  void **v18;
  uint64_t v19;
  void **p_s1;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v26;
  _BOOL4 v27;
  void *__p[2];
  char v29;
  void *__s1;
  size_t __n;
  char v32;

  v6 = (uint64_t *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 40);
  if ((v7 & 7) != 0)
    v8 = 0;
  else
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  v10 = (uint64_t *)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 40);
  if ((v9 & 7) != 0)
    v11 = 0;
  else
    v11 = v9 & 0xFFFFFFFFFFFFFFF8;
  result = sub_22EF94918(v8, v11);
  if ((_DWORD)result)
  {
    if (v7 >= 8 && (v7 & 7) == 0)
      return sub_22EF95354(a1, *(int **)(a2 + 56), *(int **)(a3 + 56));
    sub_22EFC683C(v6, &__s1);
    sub_22EFC683C(v10, __p);
    v14 = v32;
    if (v32 >= 0)
      v15 = v32 & 0x7F;
    else
      v15 = __n;
    v16 = v29;
    v17 = (void *)(v29 & 0x7F);
    if (v29 < 0)
      v17 = __p[1];
    if ((void *)v15 != v17)
    {
      v27 = 0;
      if ((v29 & 0x80000000) == 0)
        goto LABEL_34;
      goto LABEL_38;
    }
    if (v29 >= 0)
      v18 = __p;
    else
      v18 = (void **)__p[0];
    if (v32 < 0)
    {
      v27 = memcmp(__s1, v18, __n) == 0;
    }
    else
    {
      if ((v32 & 0x7F) == 0)
      {
        v27 = 1;
        if ((v29 & 0x80000000) == 0)
        {
LABEL_34:
          if ((v14 & 0x80) == 0)
            goto LABEL_35;
          goto LABEL_39;
        }
LABEL_38:
        operator delete(__p[0]);
        if ((v32 & 0x80) == 0)
        {
LABEL_35:
          if (v27)
            return sub_22EF95354(a1, *(int **)(a2 + 56), *(int **)(a3 + 56));
          return 0;
        }
LABEL_39:
        operator delete(__s1);
        if (v27)
          return sub_22EF95354(a1, *(int **)(a2 + 56), *(int **)(a3 + 56));
        return 0;
      }
      v19 = (v32 & 0x7F) - 1;
      p_s1 = &__s1;
      do
      {
        v22 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        v21 = v22;
        v24 = *(unsigned __int8 *)v18;
        v18 = (void **)((char *)v18 + 1);
        v23 = v24;
        v26 = v19-- != 0;
        v27 = v21 == v23;
      }
      while (v21 == v23 && v26);
    }
    if ((v16 & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_38;
  }
  return result;
}

uint64_t sub_22EF95354(uint64_t a1, int *a2, int *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  BOOL v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  _BYTE v31[32];
  _BYTE v32[32];
  _BYTE v33[32];
  _QWORD v34[4];

  v6 = a2[3] & 0x1FFFFFFF;
  if ((_DWORD)v6 == (a3[3] & 0x1FFFFFFF))
  {
    if (!(_DWORD)v6)
      return 1;
    v7 = (uint64_t *)(a2 + 4);
    v8 = (uint64_t *)(a3 + 4);
    v9 = v6 - 1;
    while (1)
    {
      v10 = *v8;
      if (((*(_DWORD *)(*v8 + 28) ^ *(_DWORD *)(*v7 + 28)) & 0x7F) != 0)
        break;
      result = sub_22EF8F978(a1, *v7, v10);
      v13 = v9-- != 0;
      if ((_DWORD)result)
      {
        ++v7;
        ++v8;
        if (v13)
          continue;
      }
      return result;
    }
    if (*(_BYTE *)(a1 + 102))
    {
      v29 = *(_DWORD *)(v10 + 24);
      if (*(_BYTE *)(a1 + 101))
        v30 = 2148;
      else
        v30 = 2341;
      sub_22F379440((uint64_t)v32, a1, v29, v30);
      sub_22E3BB0B8((uint64_t)v32);
      v24 = *(_DWORD *)(*v7 + 24);
      v25 = v31;
      v26 = v31;
      v27 = a1;
      v28 = 2328;
LABEL_24:
      sub_22F3793A8((uint64_t)v26, v27, v24, v28);
      sub_22E3BB0B8((uint64_t)v25);
    }
  }
  else if (*(_BYTE *)(a1 + 102))
  {
    v14 = *a3;
    if (*(_BYTE *)(a1 + 101))
      v15 = 2147;
    else
      v15 = 2340;
    sub_22F379440((uint64_t)v34, a1, v14, v15);
    v16 = a2[3] & 0x1FFFFFFF;
    v17 = (unsigned __int8 *)v34[0];
    if (!v34[0])
    {
      v17 = (unsigned __int8 *)sub_22E3B8AAC(v34[1]);
      v34[0] = v17;
    }
    v17[*v17 + 1] = 3;
    v18 = v34[0];
    v19 = *(unsigned __int8 *)v34[0];
    v20 = v19 + 1;
    *(_BYTE *)v34[0] = v19 + 1;
    *(_QWORD *)(v18 + 8 * v19 + 16) = v16;
    v21 = a3[3] & 0x1FFFFFFF;
    *(_BYTE *)(v18 + v20 + 1) = 3;
    v22 = v34[0];
    v23 = *(unsigned __int8 *)v34[0];
    *(_BYTE *)v34[0] = v23 + 1;
    *(_QWORD *)(v22 + 8 * v23 + 16) = v21;
    sub_22E3BB0B8((uint64_t)v34);
    v24 = *a2;
    v25 = v33;
    v26 = v33;
    v27 = a1;
    v28 = 2329;
    goto LABEL_24;
  }
  return 0;
}

unint64_t sub_22EF9550C(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v1)
    v2 = *(unsigned __int8 *)(v1 + 16) - 27 > 0xFFFFFFFD;
  else
    v2 = 0;
  if (!v2)
    v1 = sub_22F10CF48(v1);
  return ((unint64_t)sub_22E47E20C(v1) >> 2) & 1;
}

void sub_22EF9554C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  v9 = (void *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = v9;
  if (v4)
  {
    sub_22F3797B8(a1, v4, &v4[2 * v3]);
    llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
      memset_pattern16(v9, &unk_22F49F970, 16 * v10);
  }
}

uint64_t sub_22EF95614(unsigned int a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v6;

  result = 0;
  if (a1 && a2)
  {
    if (a2 == (unint64_t)a1)
    {
      return a1;
    }
    else
    {
      v4 = a2;
      do
        v4 = dword_24FABB2A0[4 * v4];
      while (v4 != a1 && v4 != 0);
      result = a2;
      if (v4 != a1)
      {
        v6 = a1;
        do
          v6 = dword_24FABB2A0[4 * v6];
        while (v6 != a2 && v6 != 0);
        if (v6 == a2)
          return a1;
        else
          return 0;
      }
    }
  }
  return result;
}

uint64_t sub_22EF9568C(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 32) + 573;
}

void sub_22EF95698(uint64_t a1, llvm::raw_ostream *a2, int a3)
{
  int v6;
  int v7;
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  void *v14;
  const char *p_p;
  void *__p;
  char v17;

  v6 = *(unsigned __int8 *)(a1 + 30);
  if ((~(v6 << 16) & 0x780000) != 0)
    v7 = ((*(unsigned __int16 *)(a1 + 28) | (v6 << 16)) >> 19) & 0xF;
  else
    v7 = sub_22F1BFAD0(a1);
  if (v7 == 2 || v7 == 4)
    return;
  v10 = *((_QWORD *)a2 + 3);
  v9 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((v7 & 0xFFFFFFFD) != 1)
  {
    if ((unint64_t)v9 >= v10)
    {
      a2 = (llvm::raw_ostream *)llvm::raw_ostream::write(a2);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v9 + 1;
      *v9 = 32;
    }
    v12 = off_24FABF5A0[*(int *)(a1 + 36)];
    v13 = strlen(v12);
    v14 = (void *)*((_QWORD *)a2 + 4);
    if (v13 <= *((_QWORD *)a2 + 3) - (_QWORD)v14)
    {
      if (v13)
      {
        memcpy(v14, v12, v13);
        *((_QWORD *)a2 + 4) += v13;
      }
      goto LABEL_18;
    }
    v11 = llvm::raw_ostream::write(a2, v12);
    goto LABEL_17;
  }
  if ((unint64_t)v9 >= v10)
  {
    v11 = llvm::raw_ostream::write(a2);
LABEL_17:
    a2 = (llvm::raw_ostream *)v11;
    goto LABEL_18;
  }
  *((_QWORD *)a2 + 4) = v9 + 1;
  *v9 = 32;
LABEL_18:
  sub_22EF95818(&__p, a1, a3);
  if (v17 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  llvm::raw_ostream::write(a2, p_p);
  if (v17 < 0)
    operator delete(__p);
}

void sub_22EF95818(_QWORD *a1, uint64_t a2, int a3)
{
  int v5;
  uint64_t v6;
  _QWORD *v7;
  const char *v8;
  _DWORD *v9;
  _DWORD *v10;
  _BYTE *v11;
  _DWORD *v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  char v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v16 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 1;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v15 = MEMORY[0x24BED83D8] + 16;
  v23 = a1;
  llvm::raw_ostream::SetBufferAndMode();
  llvm::raw_ostream::write((llvm::raw_ostream *)&v15, "(");
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 0:
      v9 = v19;
      if ((unint64_t)(v18 - v19) <= 5)
      {
        v8 = "enable";
        goto LABEL_20;
      }
      *((_WORD *)v19 + 2) = 25964;
      *v9 = 1650552421;
      v14 = v19 + 6;
      goto LABEL_32;
    case 2:
      sub_22F0D9044(*(_QWORD *)(a2 + 48), (int)&v15, 0, a3, 0, "\n", 1uLL);
      goto LABEL_21;
    case 3:
    case 4:
      v6 = *(_QWORD *)(a2 + 48);
      if (v6)
      {
        sub_22F0D9044(v6, (int)&v15, 0, a3, 0, "\n", 1uLL);
        if (*(_DWORD *)(a2 + 40) != 4)
          goto LABEL_21;
        v7 = v19;
        if ((unint64_t)(v18 - v19) <= 9)
        {
          v8 = ", scalable";
          goto LABEL_20;
        }
        *((_WORD *)v19 + 4) = 25964;
        *v7 = *(_QWORD *)", scalable";
        v14 = v19 + 10;
      }
      else
      {
        v12 = v19;
        v13 = v18 - v19;
        if (v5 == 4)
        {
          if (v13 <= 7)
          {
            v8 = "scalable";
            goto LABEL_20;
          }
          *(_QWORD *)v19 = 0x656C62616C616373;
          v14 = v19 + 8;
        }
        else
        {
          if (v13 <= 4)
          {
            v8 = "fixed";
            goto LABEL_20;
          }
          v19[4] = 100;
          *v12 = 1702390118;
          v14 = v19 + 5;
        }
      }
      goto LABEL_32;
    case 5:
      v11 = v19;
      if ((unint64_t)(v18 - v19) <= 0xC)
      {
        v8 = "assume_safety";
        goto LABEL_20;
      }
      *(_QWORD *)v19 = *(_QWORD *)"assume_safety";
      *(_QWORD *)(v11 + 5) = *(_QWORD *)"e_safety";
      v14 = v19 + 13;
      goto LABEL_32;
    case 6:
      if ((unint64_t)(v18 - v19) <= 3)
      {
        v8 = "full";
        goto LABEL_20;
      }
      *(_DWORD *)v19 = 1819047270;
      v14 = v19 + 4;
      goto LABEL_32;
    default:
      v10 = v19;
      if ((unint64_t)(v18 - v19) > 6)
      {
        *(_DWORD *)(v19 + 3) = 1701601889;
        *v10 = 1634953572;
        v14 = v19 + 7;
LABEL_32:
        v19 = v14;
      }
      else
      {
        v8 = "disable";
LABEL_20:
        llvm::raw_ostream::write((llvm::raw_ostream *)&v15, v8);
      }
LABEL_21:
      if (v18 == v19)
        llvm::raw_ostream::write((llvm::raw_ostream *)&v15, ")");
      else
        *v19++ = 41;
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v15);
      return;
  }
}

void sub_22EF95B70(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  char *v8;
  char *v9;
  const std::string::value_type *v10;
  std::string *v11;
  std::string v12;

  v6 = *(unsigned __int8 *)(a1 + 30);
  if ((~(v6 << 16) & 0x780000) != 0)
    v7 = ((*(unsigned __int16 *)(a1 + 28) | (v6 << 16)) >> 19) & 0xF;
  else
    v7 = sub_22F1BFAD0(a1);
  switch(v7)
  {
    case 1:
      if (*(_DWORD *)(a1 + 36) == 5)
      {
        sub_22EF95818(&v12, a1, a2);
      }
      else
      {
        *((_BYTE *)&v12.__r_.__value_.__s + 23) = 0;
        v12.__r_.__value_.__s.__data_[0] = 0;
      }
      v10 = "#pragma unroll";
      goto LABEL_16;
    case 2:
      *(_BYTE *)(a3 + 23) = 16;
      strcpy((char *)a3, "#pragma nounroll");
      return;
    case 3:
      if (*(_DWORD *)(a1 + 36) == 7)
      {
        sub_22EF95818(&v12, a1, a2);
      }
      else
      {
        *((_BYTE *)&v12.__r_.__value_.__s + 23) = 0;
        v12.__r_.__value_.__s.__data_[0] = 0;
      }
      v10 = "#pragma unroll_and_jam";
      goto LABEL_16;
    case 4:
      v8 = (char *)operator new(0x20uLL);
      *(_QWORD *)a3 = v8;
      *(_OWORD *)(a3 + 8) = xmmword_22F45E220;
      strcpy(v8, "#pragma nounroll_and_jam");
      return;
    default:
      v9 = off_24FABF5A0[*(int *)(a1 + 36)];
      sub_22EF95818(&v12, a1, a2);
      v10 = v9;
LABEL_16:
      v11 = std::string::insert(&v12, 0, v10);
      *(std::string *)a3 = *v11;
      v11->__r_.__value_.__r.__words[0] = 0;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v12.__r_.__value_.__l.__data_);
      return;
  }
}

uint64_t sub_22EF95D10(uint64_t a1)
{
  uint64_t result;
  uint64_t *v2;
  uint64_t *v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  v3 = (uint64_t *)sub_22F255ABC(a1);
  result = 0;
  v4 = 0;
  while (1)
  {
    v5 = v3;
    if (v3 >= v2)
    {
      if (v3 == v2)
        return result;
      v6 = v2;
      while (*(_WORD *)(*v6 + 32) != 245)
      {
        if (++v6 == v3)
          return result;
      }
      v5 = v3;
    }
    else
    {
      while (*(_WORD *)(*v5 + 32) != 245)
      {
        if (++v5 == v2)
          return result;
      }
      v6 = v2;
    }
    if (v5 == v6)
      break;
    do
    {
      v8 = *v3++;
      v7 = v8;
    }
    while (*(_WORD *)(v8 + 32) != 245);
    if (v4 <= *(_DWORD *)(v7 + 60))
    {
      result = v7;
      v4 = *(_DWORD *)(v7 + 60);
    }
  }
  return result;
}

uint64_t sub_22EF95DD8(uint64_t result, uint64_t a2, uint64_t a3)
{
  llvm::raw_ostream **v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;

  if (a2 != a3)
  {
    v5 = (llvm::raw_ostream **)result;
    v6 = 0;
    do
    {
      if (v6)
      {
        v7 = *v5;
        v8 = (_BYTE *)*((_QWORD *)*v5 + 4);
        if (*((_BYTE **)*v5 + 3) == v8)
        {
          llvm::raw_ostream::write(v7, ",");
        }
        else
        {
          *v8 = 44;
          ++*((_QWORD *)v7 + 4);
        }
      }
      result = sub_22F0D9044(*(_QWORD *)(a2 + v6), (int)*v5, 0, (int)v5[1], 0, "\n", 1uLL);
      v6 += 8;
    }
    while (a2 + v6 != a3);
  }
  return result;
}

BOOL sub_22EF95E9C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;

  if (a2 == 5)
  {
    if (*(_DWORD *)a1 == 1380926017 && *(_BYTE *)(a1 + 4) == 84)
    {
      v9 = 0;
      v7 = 0x100000000;
      v6 = 1;
      v8 = 3;
    }
    else
    {
      v12 = *(_DWORD *)a1 != 1162104405 || *(_BYTE *)(a1 + 4) != 70;
      v7 = 0x100000000;
      v6 = !v12;
      v9 = v12;
      if (v12)
      {
        v7 = 0;
        v8 = 0;
      }
      else
      {
        v8 = 4;
      }
    }
  }
  else
  {
    if (a2 != 3)
    {
LABEL_15:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 1;
      goto LABEL_34;
    }
    if (*(_WORD *)a1 == 21065 && *(_BYTE *)(a1 + 2) == 81)
    {
      v8 = 0;
    }
    else if (*(_WORD *)a1 == 18758 && *(_BYTE *)(a1 + 2) == 81)
    {
      v8 = 1;
    }
    else
    {
      if (*(_WORD *)a1 != 22355 || *(_BYTE *)(a1 + 2) != 73)
        goto LABEL_15;
      v8 = 2;
    }
    v9 = 0;
    v7 = 0x100000000;
    v6 = 1;
  }
LABEL_34:
  if (a2)
    v6 = 1;
  v13 = v8 | v7;
  if (!v6)
    v13 = 0x100000005;
  if (a2 != 0 && v9)
    v14 = 0;
  else
    v14 = v13;
  if ((v14 & 0x100000000) != 0)
    *a3 = v14;
  return (v14 & 0x100000000) != 0;
}

__n128 sub_22EF95FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  int v8;

  v3 = sub_22E3CD3D4(a2 + 2032, 48, 3);
  v4 = *(_BYTE *)(a1 + 35);
  v5 = *(_QWORD *)(a1 + 40);
  result = *(__n128 *)a1;
  v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v3 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 16) = v7;
  *(_BYTE *)(v3 + 35) = v4;
  *(_WORD *)(v3 + 32) = 98;
  *(_QWORD *)(v3 + 40) = v5;
  LODWORD(v5) = (*(unsigned __int8 *)(v3 + 34) << 16) & 0xFFE00000;
  *(_BYTE *)(v3 + 34) = BYTE2(v5);
  LODWORD(v5) = v5 & 0xFFFEFFFF | ((*(_BYTE *)(a1 + 34) & 1) << 16);
  *(_WORD *)(v3 + 32) = 98;
  *(_BYTE *)(v3 + 34) = BYTE2(v5);
  LODWORD(v5) = v5 & 0xFFFDFFFF | (((*(unsigned __int8 *)(a1 + 34) >> 1) & 1) << 17);
  *(_WORD *)(v3 + 32) = 98;
  *(_BYTE *)(v3 + 34) = BYTE2(v5);
  v8 = *(unsigned __int8 *)(a1 + 34) >> 2;
  *(_WORD *)(v3 + 32) = 98;
  *(_BYTE *)(v3 + 34) = (unint64_t)(v5 & 0xFFFBFFFF | ((v8 & 1) << 18)) >> 16;
  return result;
}

__n128 sub_22EF96094(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  v3 = sub_22E3CD3D4(a2 + 2032, 40, 3);
  result = *(__n128 *)a1;
  v5 = *(_OWORD *)(a1 + 16);
  *(_WORD *)(v3 + 32) = 45;
  *(__n128 *)v3 = result;
  *(_OWORD *)(v3 + 16) = v5;
  v6 = (*(unsigned __int8 *)(v3 + 34) << 16) & 0xFFE00000;
  *(_BYTE *)(v3 + 34) = BYTE2(v6);
  v7 = v6 & 0xFFFEFFFF | ((*(_BYTE *)(a1 + 34) & 1) << 16);
  *(_WORD *)(v3 + 32) = 45;
  *(_BYTE *)(v3 + 34) = BYTE2(v7);
  v8 = v7 & 0xFFFDFFFF | (((*(unsigned __int8 *)(a1 + 34) >> 1) & 1) << 17);
  *(_WORD *)(v3 + 32) = 45;
  *(_BYTE *)(v3 + 34) = BYTE2(v8);
  v9 = v8 & 0xFFFBFFFF | (((*(unsigned __int8 *)(a1 + 34) >> 2) & 1) << 18);
  *(_WORD *)(v3 + 32) = 45;
  *(_BYTE *)(v3 + 34) = BYTE2(v9);
  return result;
}

uint64_t sub_22EF9612C(uint64_t a1, int a2, _OWORD *a3)
{
  uint64_t result;
  __int128 v6;
  int v7;
  int v8;
  unsigned int v9;

  result = sub_22E3CD3D4(a1 + 2032, 40, 3);
  v6 = a3[1];
  *(_OWORD *)result = *a3;
  *(_OWORD *)(result + 16) = v6;
  v7 = (*(unsigned __int8 *)(result + 34) << 16) & 0xE00000;
  *(_DWORD *)(result + 36) = a2;
  *(_WORD *)(result + 32) = 119;
  *(_BYTE *)(result + 34) = (v7 | 0x40000u) >> 16;
  v8 = *(unsigned __int8 *)(result + 30);
  if ((~(v8 << 16) & 0x780000) == 0 && !*(_QWORD *)result)
  {
    v9 = (*(unsigned __int16 *)(result + 28) | (v8 << 16)) & 0xFF87FFFF;
    *(_WORD *)(result + 28) = v9;
    *(_BYTE *)(result + 30) = BYTE2(v9);
  }
  return result;
}

uint64_t sub_22EF961B8(int *a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v5;
  int v6;
  int v9;

  if (a2 == 10)
  {
    if (*(_QWORD *)a1 == 0x6D75736E6F636E75 && *((_WORD *)a1 + 4) == 25701)
    {
      v9 = 2;
LABEL_19:
      *a3 = v9;
      return 1;
    }
    return 0;
  }
  if (a2 == 8)
  {
    if (*(_QWORD *)a1 == 0x64656D75736E6F63)
    {
      v9 = 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (a2 != 7)
    return 0;
  result = 0;
  v5 = *a1;
  v6 = *(int *)((char *)a1 + 3);
  if (v5 == 1852534389 && v6 == 1853321070)
  {
    v9 = 0;
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_22EF9626C(int *a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v5;
  int v6;
  int v9;

  if (a2 == 7)
  {
    if (*a1 == 1852989815 && *(int *)((char *)a1 + 3) == 1735289198)
    {
      v9 = 1;
      goto LABEL_15;
    }
    return 0;
  }
  if (a2 != 5)
    return 0;
  result = 0;
  v5 = *a1;
  v6 = *((unsigned __int8 *)a1 + 4);
  if (v5 == 1869771365 && v6 == 114)
  {
    v9 = 0;
LABEL_15:
    *a3 = v9;
    return 1;
  }
  return result;
}

uint64_t sub_22EF962EC(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, const void *a5, uint64_t a6)
{
  __int128 v9;
  char v10;
  void *v11;

  v9 = a3[1];
  *(_OWORD *)a1 = *a3;
  *(_OWORD *)(a1 + 16) = v9;
  v10 = *(_BYTE *)(a1 + 34);
  *(_WORD *)(a1 + 32) = 167;
  *(_BYTE *)(a1 + 34) = v10 & 0xE0;
  *(_QWORD *)(a1 + 40) = a4;
  *(_DWORD *)(a1 + 48) = a6;
  v11 = (void *)sub_22E3CD3D4(a2 + 2032, a6, 0);
  *(_QWORD *)(a1 + 56) = v11;
  if (a6)
    memcpy(v11, a5, *(unsigned int *)(a1 + 48));
  return a1;
}

uint64_t sub_22EF96368(int *a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v5;
  int v6;
  int v8;

  if (a2 == 4)
  {
    if (*a1 == 1852141679)
    {
      v8 = 1;
      goto LABEL_12;
    }
    return 0;
  }
  if (a2 != 6)
    return 0;
  result = 0;
  v5 = *a1;
  v6 = *((unsigned __int16 *)a1 + 2);
  if (v5 == 1936682083 && v6 == 25701)
  {
    v8 = 0;
LABEL_12:
    *a3 = v8;
    return 1;
  }
  return result;
}

uint64_t sub_22EF963D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int v4;

  v3 = 0;
  switch(a2)
  {
    case 4:
      switch(*(_DWORD *)a1)
      {
        case 0x6C6C7568:
          v4 = 3;
          break;
        case 0x7373696D:
          v4 = 10;
          break;
        case 0x6873656D:
          v4 = 12;
          break;
        default:
          return 0;
      }
      goto LABEL_63;
    case 5:
      v3 = 0;
      if (*(_DWORD *)a1 != 1702390128 || *(_BYTE *)(a1 + 4) != 108)
        return v3;
      v4 = 0;
      goto LABEL_63;
    case 6:
      if (*(_DWORD *)a1 == 1953654134 && *(_WORD *)(a1 + 4) == 30821)
      {
        v4 = 1;
        goto LABEL_63;
      }
      if (*(_DWORD *)a1 == 1634561892 && *(_WORD *)(a1 + 4) == 28265)
      {
        v4 = 4;
        goto LABEL_63;
      }
      if (*(_DWORD *)a1 == 1752788577 && *(_WORD *)(a1 + 4) == 29801)
      {
        v4 = 8;
        goto LABEL_63;
      }
      return 0;
    case 7:
      if (*(_DWORD *)a1 != 1886220131 || *(_DWORD *)(a1 + 3) != 1702131056)
        return 0;
      v4 = 5;
      goto LABEL_63;
    case 8:
      if (*(_QWORD *)a1 == 0x797274656D6F6567)
      {
        v4 = 2;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x656C62616C6C6163)
          return 0;
        v4 = 11;
      }
      goto LABEL_63;
    case 10:
      if (*(_QWORD *)a1 != 0x68747365736F6C63 || *(_WORD *)(a1 + 8) != 29801)
        return 0;
      v4 = 9;
      goto LABEL_63;
    case 12:
      if (*(_QWORD *)a1 != 0x6365737265746E69 || *(_DWORD *)(a1 + 8) != 1852795252)
        return 0;
      v4 = 7;
      goto LABEL_63;
    case 13:
      if (*(_QWORD *)a1 == 0x72656E6567796172 && *(_QWORD *)(a1 + 5) == 0x6E6F69746172656ELL)
      {
        v4 = 6;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x636966696C706D61 || *(_QWORD *)(a1 + 5) != 0x6E6F697461636966)
          return 0;
        v4 = 13;
      }
LABEL_63:
      *a3 = v4;
      return 1;
    default:
      return v3;
  }
}

uint64_t sub_22EF9665C(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + 30);
  if ((~(v1 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a1 + 28) | (v1 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a1);
}

unint64_t sub_22EF96680(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t result;

  if (a2 == 7)
  {
    if (*(_DWORD *)a1 != 1634038375 || *(_DWORD *)(a1 + 3) != 1919251553)
    {
LABEL_14:
      v7 = 0;
      v6 = 0;
      v5 = 0;
      v4 = 1;
      goto LABEL_19;
    }
    v4 = 0;
    v6 = 0x100000000;
    v7 = 1;
    v5 = 1;
  }
  else
  {
    if (a2 != 4)
    {
      if (a2 == 3 && *(_WORD *)a1 == 28257 && *(_BYTE *)(a1 + 2) == 121)
      {
        v4 = 0;
        v5 = 0;
        v6 = 0x100000000;
        v7 = 1;
        goto LABEL_19;
      }
      goto LABEL_14;
    }
    v6 = 0x100000000;
    v5 = 2;
    v7 = *(_DWORD *)a1 == 1936942444;
    v4 = *(_DWORD *)a1 != 1936942444;
    if (*(_DWORD *)a1 != 1936942444)
    {
      v6 = 0;
      v5 = 0;
    }
  }
LABEL_19:
  if (a2)
    v7 = 1;
  v9 = v5 | v6;
  if (!v7)
    v9 = 0x100000003;
  if (a2 != 0 && v4)
    v10 = 0;
  else
    v10 = v9;
  result = HIDWORD(v10);
  if (HIDWORD(v10))
    *a3 = v10;
  return result;
}

uint64_t sub_22EF9677C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v6;

  if (a2 == 5)
  {
    if (*(_DWORD *)a1 == 1987212643 && *(_BYTE *)(a1 + 4) == 101)
    {
      v6 = 1;
LABEL_19:
      *a3 = v6;
      return 1;
    }
    return 0;
  }
  if (a2 == 12)
  {
    if (*(_QWORD *)a1 == 0x676E69646E756F62 && *(_DWORD *)(a1 + 8) == 2020565599)
    {
      v6 = 2;
      goto LABEL_19;
    }
    return 0;
  }
  if (a2 != 8)
    return 0;
  result = 0;
  if (*(_QWORD *)a1 == 0x656C676E61697274)
  {
    v6 = 0;
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_22EF96830(_QWORD *a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v5;

  if (a2 == 8)
  {
    if (*a1 == 0x656C676E61697274)
    {
      v5 = 1;
      goto LABEL_9;
    }
    return 0;
  }
  if (a2 != 4)
    return 0;
  result = 0;
  if (*(_DWORD *)a1 == 1684108657)
  {
    v5 = 0;
LABEL_9:
    *a3 = v5;
    return 1;
  }
  return result;
}

unint64_t sub_22EF9689C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  _BOOL4 v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t result;

  if (a2 == 3)
  {
    v16 = *(_WORD *)a1 != 26981 || *(_BYTE *)(a1 + 2) != 99;
    v17 = !v16;
    v11 = !v16;
    v14 = v16;
    if (v17)
      v12 = 0x100000000;
    else
      v12 = 0;
    if (v17)
      v13 = 8;
    else
      v13 = 0;
  }
  else
  {
    if (a2 != 10)
    {
LABEL_35:
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 1;
      goto LABEL_56;
    }
    if (*(_QWORD *)a1 == 0x733D726F74636576 && *(_WORD *)(a1 + 8) == 12407)
    {
      v14 = 0;
      v13 = 0;
      v12 = 0x100000000;
      v11 = 1;
    }
    else if (*(_QWORD *)a1 == 0x733D726F74636576 && *(_WORD *)(a1 + 8) == 12663)
    {
      v14 = 0;
      v12 = 0x100000000;
      v11 = 1;
      v13 = 1;
    }
    else if (*(_QWORD *)a1 == 0x683D726F74636576 && *(_WORD *)(a1 + 8) == 12407)
    {
      v14 = 0;
      v12 = 0x100000000;
      v11 = 1;
      v13 = 2;
    }
    else if (*(_QWORD *)a1 == 0x683D726F74636576 && *(_WORD *)(a1 + 8) == 12663)
    {
      v14 = 0;
      v12 = 0x100000000;
      v11 = 1;
      v13 = 3;
    }
    else if (*(_QWORD *)a1 == 0x683D726F74636576 && *(_WORD *)(a1 + 8) == 12919)
    {
      v14 = 0;
      v12 = 0x100000000;
      v11 = 1;
      v13 = 4;
    }
    else if (*(_QWORD *)a1 == 0x683D726F74636576 && *(_WORD *)(a1 + 8) == 13175)
    {
      v14 = 0;
      v12 = 0x100000000;
      v11 = 1;
      v13 = 5;
    }
    else if (*(_QWORD *)a1 == 0x683D726F74636576 && *(_WORD *)(a1 + 8) == 13431)
    {
      v14 = 0;
      v12 = 0x100000000;
      v11 = 1;
      v13 = 6;
    }
    else
    {
      if (*(_QWORD *)a1 != 0x683D726F74636576 || *(_WORD *)(a1 + 8) != 13687)
        goto LABEL_35;
      v14 = 0;
      v12 = 0x100000000;
      v11 = 1;
      v13 = 7;
    }
  }
LABEL_56:
  if (a2)
    v11 = 1;
  v18 = v13 | v12;
  if (!v11)
    v18 = 0x100000008;
  if (a2 != 0 && v14)
    v19 = 0;
  else
    v19 = v18;
  result = HIDWORD(v19);
  if (HIDWORD(v19))
    *a3 = v19;
  return result;
}

uint64_t sub_22EF96AB8(uint64_t a1, _OWORD *a2)
{
  uint64_t result;
  __int128 v4;
  int v5;
  int v6;
  unsigned int v7;

  result = sub_22E3CD3D4(a1 + 2032, 40, 3);
  v4 = a2[1];
  *(_OWORD *)result = *a2;
  *(_OWORD *)(result + 16) = v4;
  v5 = (*(unsigned __int8 *)(result + 34) << 16) & 0xE00000 | 0x40000;
  *(_WORD *)(result + 32) = 239;
  *(_BYTE *)(result + 34) = BYTE2(v5);
  v6 = *(unsigned __int8 *)(result + 30);
  if ((~(v6 << 16) & 0x780000) == 0 && !*(_QWORD *)result)
  {
    v7 = (*(unsigned __int16 *)(result + 28) | (v6 << 16)) & 0xFF87FFFF;
    *(_WORD *)(result + 28) = v7;
    *(_BYTE *)(result + 30) = BYTE2(v7);
  }
  return result;
}

uint64_t sub_22EF96B3C(_QWORD *a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int v4;

  if (!a2)
  {
    v4 = 0;
    goto LABEL_13;
  }
  if (a2 == 11)
  {
    if (*a1 == 0x6172626E69746F6ELL && *(_QWORD *)((char *)a1 + 3) == 0x68636E6172626E69)
    {
      v4 = 2;
      goto LABEL_13;
    }
    return 0;
  }
  v3 = 0;
  if (a2 == 8)
  {
    if (*a1 == 0x68636E6172626E69)
    {
      v4 = 1;
LABEL_13:
      *a3 = v4;
      return 1;
    }
    return 0;
  }
  return v3;
}

uint64_t sub_22EF96BD0(_DWORD *a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v5;

  if (a2 == 4)
  {
    if (*a1 == 1802398060)
    {
      v5 = 1;
      goto LABEL_9;
    }
    return 0;
  }
  if (a2 != 2)
    return 0;
  result = 0;
  if (*(_WORD *)a1 == 28532)
  {
    v5 = 0;
LABEL_9:
    *a3 = v5;
    return 1;
  }
  return result;
}

uint64_t sub_22EF96C30(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int v5;

  v3 = 0;
  switch(a2)
  {
    case 3:
      if (*(_WORD *)a1 != 25966 || *(_BYTE *)(a1 + 2) != 119)
        return 0;
      v5 = 5;
      goto LABEL_26;
    case 4:
      switch(*(_DWORD *)a1)
      {
        case 0x656E6F6E:
          v5 = 0;
          break;
        case 0x79706F63:
          v5 = 2;
          break;
        case 0x74696E69:
          v5 = 3;
          break;
        default:
          return 0;
      }
LABEL_26:
      *a3 = v5;
      return 1;
    case 5:
      if (*(_DWORD *)a1 != 1869376609 || *(_BYTE *)(a1 + 4) != 99)
        return 0;
      v5 = 1;
      goto LABEL_26;
    case 11:
      if (*(_QWORD *)a1 != 0x43656C626174756DLL || *(_QWORD *)(a1 + 3) != 0x79706F43656C6261)
        return 0;
      v5 = 4;
      goto LABEL_26;
    default:
      return v3;
  }
}

uint64_t sub_22EF96D48(int *a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v5;
  int v6;
  int v9;

  if (a2 == 9)
  {
    if (*(_QWORD *)a1 == 0x66762D7363706161 && *((_BYTE *)a1 + 8) == 112)
    {
      v9 = 1;
      goto LABEL_15;
    }
    return 0;
  }
  if (a2 != 5)
    return 0;
  result = 0;
  v5 = *a1;
  v6 = *((unsigned __int8 *)a1 + 4);
  if (v5 == 1668309345 && v6 == 115)
  {
    v9 = 0;
LABEL_15:
    *a3 = v9;
    return 1;
  }
  return result;
}

uint64_t sub_22EF96DCC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v6;

  if (a2 == 10)
  {
    if (*(_QWORD *)a1 == 0x7369767265707573 && *(_WORD *)(a1 + 8) == 29295)
    {
      v6 = 1;
LABEL_19:
      *a3 = v6;
      return 1;
    }
    return 0;
  }
  if (a2 == 7)
  {
    if (*(_DWORD *)a1 == 1751343469 && *(_DWORD *)(a1 + 3) == 1701734760)
    {
      v6 = 2;
      goto LABEL_19;
    }
    return 0;
  }
  if (a2 != 4)
    return 0;
  result = 0;
  if (*(_DWORD *)a1 == 1919251317)
  {
    v6 = 0;
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_22EF96E78(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int v4;

  if (a2 == 17)
  {
    if (*(_QWORD *)a1 == 0x666977735F746F6ELL
      && *(_QWORD *)(a1 + 8) == 0x7461766972705F74
      && *(_BYTE *)(a1 + 16) == 101)
    {
      v4 = 2;
      goto LABEL_21;
    }
    return 0;
  }
  if (a2 == 13)
  {
    if (*(_QWORD *)a1 == 0x72705F7466697773 && *(_QWORD *)(a1 + 5) == 0x657461766972705FLL)
    {
      v4 = 1;
      goto LABEL_21;
    }
    return 0;
  }
  if (a2 != 4)
    return 0;
  v3 = 0;
  if (*(_DWORD *)a1 == 1701736302)
  {
    v4 = 0;
LABEL_21:
    *a3 = v4;
    return 1;
  }
  return v3;
}

uint64_t sub_22EF96F44(_QWORD *a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int v4;

  if (a2 == 16)
  {
    if (*a1 == 0x5F6F72657A6E6F6ELL && a1[1] == 0x746E656D75677261)
    {
      v4 = 3;
      goto LABEL_23;
    }
    return 0;
  }
  if (a2 == 13)
  {
    if (*a1 == 0x5F6C6C756E6E6F6ELL && *(_QWORD *)((char *)a1 + 5) == 0x726F7272655F6C6CLL)
    {
      v4 = 1;
      goto LABEL_23;
    }
    if (*a1 == 0x6772615F6F72657ALL && *(_QWORD *)((char *)a1 + 5) == 0x746E656D75677261)
    {
      v4 = 2;
      goto LABEL_23;
    }
    return 0;
  }
  if (a2 != 4)
    return 0;
  v3 = 0;
  if (*(_DWORD *)a1 == 1701736302)
  {
    v4 = 0;
LABEL_23:
    *a3 = v4;
    return 1;
  }
  return v3;
}

uint64_t sub_22EF97040(_QWORD *a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int v6;

  v3 = 0;
  if (a2 > 12)
  {
    if (a2 == 13)
    {
      if (*a1 != 0x5F6C6C756E6E6F6ELL || *(_QWORD *)((char *)a1 + 5) != 0x726F7272655F6C6CLL)
        return 0;
      v6 = 1;
      goto LABEL_31;
    }
    if (a2 == 14)
    {
      if (*a1 != 0x5F6F72657A6E6F6ELL || *(_QWORD *)((char *)a1 + 6) != 0x746C757365725F6FLL)
        return 0;
      v6 = 4;
      goto LABEL_31;
    }
  }
  else if (a2 == 4)
  {
    v3 = 0;
    if (*(_DWORD *)a1 == 1701736302)
    {
      v6 = 0;
      goto LABEL_31;
    }
  }
  else if (a2 == 11)
  {
    if (*a1 == 0x7365725F6C6C756ELL && *(_QWORD *)((char *)a1 + 3) == 0x746C757365725F6CLL)
    {
      v6 = 2;
    }
    else
    {
      if (*a1 != 0x7365725F6F72657ALL || *(_QWORD *)((char *)a1 + 3) != 0x746C757365725F6FLL)
        return 0;
      v6 = 3;
    }
LABEL_31:
    *a3 = v6;
    return 1;
  }
  return v3;
}

uint64_t sub_22EF97184(int *a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v5;
  int v6;
  int v8;

  if (a2 == 4)
  {
    if (*a1 == 1836412517)
    {
      v8 = 1;
      goto LABEL_12;
    }
    return 0;
  }
  if (a2 != 6)
    return 0;
  result = 0;
  v5 = *a1;
  v6 = *((unsigned __int16 *)a1 + 2);
  if (v5 == 1970435187 && v6 == 29795)
  {
    v8 = 0;
LABEL_12:
    *a3 = v8;
    return 1;
  }
  return result;
}

uint64_t sub_22EF971F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v6;

  if (a2 == 10)
  {
    if (*(_QWORD *)a1 == 0x6D75736E6F636E75 && *(_WORD *)(a1 + 8) == 25701)
    {
      v6 = 1;
      goto LABEL_12;
    }
    return 0;
  }
  if (a2 != 8)
    return 0;
  result = 0;
  if (*(_QWORD *)a1 == 0x64656D75736E6F63)
  {
    v6 = 0;
LABEL_12:
    *a3 = v6;
    return 1;
  }
  return result;
}

uint64_t sub_22EF97274(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int v5;

  if (a2 == 19)
  {
    if (*(_QWORD *)a1 == 0x5F737365636F7270
      && *(_QWORD *)(a1 + 8) == 0x646E657065646E69
      && *(_QWORD *)(a1 + 11) == 0x746E65646E657065)
    {
      v5 = 3;
      goto LABEL_36;
    }
    return 0;
  }
  if (a2 == 17)
  {
    if (*(_QWORD *)a1 == 0x65687475615F6F6ELL
      && *(_QWORD *)(a1 + 8) == 0x6F6974616369746ELL
      && *(_BYTE *)(a1 + 16) == 110)
    {
      v5 = 1;
      goto LABEL_36;
    }
    if (*(_QWORD *)a1 == 0x5F737365636F7270
      && *(_QWORD *)(a1 + 8) == 0x6E65646E65706564
      && *(_BYTE *)(a1 + 16) == 116)
    {
      v5 = 2;
      goto LABEL_36;
    }
    return 0;
  }
  if (a2 != 11)
    return 0;
  v3 = 0;
  if (*(_QWORD *)a1 == 0x5F746C7561666564 && *(_QWORD *)(a1 + 3) == 0x79656B5F746C7561)
  {
    v5 = 0;
LABEL_36:
    *a3 = v5;
    return 1;
  }
  return v3;
}

uint64_t sub_22EF973B8(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v14;

  if (a2 == 22)
  {
    if (*a1 == 0x5F73736572646461
      && a1[1] == 0x696D697263736964
      && *(uint64_t *)((char *)a1 + 14) == 0x6E6F6974616E696DLL)
    {
      v14 = 2;
LABEL_37:
      *a3 = v14;
      return 1;
    }
    return 0;
  }
  if (a2 == 25)
  {
    if (*a1 == 0x65726464615F6F6ELL
      && a1[1] == 0x72637369645F7373
      && a1[2] == 0x6F6974616E696D69
      && *((_BYTE *)a1 + 24) == 110)
    {
      v14 = 1;
      goto LABEL_37;
    }
    return 0;
  }
  if (a2 != 30)
    return 0;
  result = 0;
  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v8 = *(uint64_t *)((char *)a1 + 22);
  if (v5 == 0x5F746C7561666564
    && v6 == 0x5F73736572646461
    && v7 == 0x696D697263736964
    && v8 == 0x6E6F6974616E696DLL)
  {
    v14 = 0;
    goto LABEL_37;
  }
  return result;
}

uint64_t sub_22EF97500(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  result = 0;
  switch(a2)
  {
    case 19:
      v5 = *a1;
      v6 = a1[1];
      v7 = *(uint64_t *)((char *)a1 + 11);
      if (v5 != 0x7369645F65707974 || v6 != 0x74616E696D697263 || v7 != 0x6E6F6974616E696DLL)
        return 0;
      v10 = 2;
      goto LABEL_41;
    case 21:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(uint64_t *)((char *)a1 + 13);
      if (v11 != 0x645F6D6F74737563 || v12 != 0x6E696D6972637369 || v13 != 0x6E6F6974616E696DLL)
        return 0;
      v10 = 3;
      goto LABEL_41;
    case 23:
      v16 = *a1;
      v17 = a1[1];
      v18 = *(uint64_t *)((char *)a1 + 15);
      if (v16 != 0x61727478655F6F6ELL || v17 != 0x6D6972637369645FLL || v18 != 0x6E6F6974616E696DLL)
        return 0;
      v10 = 1;
LABEL_41:
      *a3 = v10;
      return 1;
    case 28:
      result = 0;
      v21 = *a1;
      v22 = a1[1];
      v23 = a1[2];
      v24 = *((_DWORD *)a1 + 6);
      if (v21 != 0x5F746C7561666564
        || v22 != 0x69645F6172747865
        || v23 != 0x616E696D69726373
        || v24 != 1852795252)
      {
        return result;
      }
      v10 = 0;
      goto LABEL_41;
    default:
      return result;
  }
}

uint64_t sub_22EF97694(int *a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v6;
  int v7;
  int v9;

  switch(a2)
  {
    case 6:
      if (*a1 == 1684302184 && *((_WORD *)a1 + 2) == 28261)
        goto LABEL_14;
      goto LABEL_19;
    case 7:
      result = 0;
      v6 = *a1;
      v7 = *(int *)((char *)a1 + 3);
      if (v6 != 1634100580 || v7 != 1953264993)
        return result;
      v9 = 0;
      goto LABEL_22;
    case 8:
      if (*(_QWORD *)a1 != 0x6C616E7265746E69)
        goto LABEL_19;
LABEL_14:
      v9 = 1;
      goto LABEL_22;
    case 9:
      if (*(_QWORD *)a1 != 0x65746365746F7270 || *((_BYTE *)a1 + 8) != 100)
        goto LABEL_19;
      v9 = 2;
LABEL_22:
      *a3 = v9;
      result = 1;
      break;
    default:
LABEL_19:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_22EF97778(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int v5;

  v3 = 0;
  switch(a2)
  {
    case 3:
      if (*(_WORD *)a1 != 27745 || *(_BYTE *)(a1 + 2) != 108)
        return 0;
      v5 = 8;
      goto LABEL_39;
    case 4:
      if (*(_DWORD *)a1 == 1885956979)
      {
        v5 = 0;
      }
      else
      {
        if (*(_DWORD *)a1 != 1684370293)
          return 0;
        v5 = 4;
      }
      goto LABEL_39;
    case 7:
      if (*(_DWORD *)a1 == 762080353 && *(_DWORD *)(a1 + 3) == 1919969069)
      {
        v5 = 6;
        goto LABEL_39;
      }
      if (*(_DWORD *)a1 == 762080353 && *(_DWORD *)(a1 + 3) == 1735549229)
      {
        v5 = 7;
        goto LABEL_39;
      }
      return 0;
    case 8:
      if (*(_QWORD *)a1 == 0x7270672D64657375)
      {
        v5 = 2;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x6772612D64657375)
          return 0;
        v5 = 3;
      }
LABEL_39:
      *a3 = v5;
      return 1;
    case 11:
      if (*(_QWORD *)a1 != 0x2D7270672D6C6C61 || *(_QWORD *)(a1 + 3) != 0x6772612D7270672DLL)
        return 0;
      v5 = 5;
      goto LABEL_39;
    case 12:
      if (*(_QWORD *)a1 != 0x7270672D64657375 || *(_DWORD *)(a1 + 8) != 1735549229)
        return 0;
      v5 = 1;
      goto LABEL_39;
    default:
      return v3;
  }
}

void sub_22EF97918(uint64_t a1)
{
  __asm { BR              X11 }
}

const char *sub_22EF97944(uint64_t a1)
{
  if ((~(*(unsigned __int8 *)(a1 + 30) << 16) & 0x780000) == 0)
    sub_22F1BFAD0(a1);
  return "interrupt";
}

char *sub_22EF9C4AC(uint64_t a1)
{
  return sub_22F399A04(a1);
}

char *sub_22EF9C4B4(uint64_t a1)
{
  return sub_22F399B44(a1);
}

char *sub_22EF9C4BC(uint64_t a1)
{
  return sub_22F399C84(a1);
}

char *sub_22EF9C4C4(uint64_t a1)
{
  return sub_22F39A598(a1);
}

char *sub_22EF9C4CC(uint64_t a1)
{
  return sub_22F39A6D8(a1);
}

char *sub_22EF9C4D4(uint64_t a1)
{
  return sub_22F380B60(a1);
}

char *sub_22EF9C4DC(uint64_t a1)
{
  return sub_22F386BC8(a1);
}

char *sub_22EF9C4E4(uint64_t a1)
{
  return sub_22F39BC44(a1);
}

char *sub_22EF9C4EC(uint64_t a1)
{
  return sub_22F3A0748(a1);
}

char *sub_22EF9C4F4(uint64_t a1)
{
  return sub_22F3A3698(a1);
}

char *sub_22EF9C4FC(uint64_t a1)
{
  return sub_22F3A5DC0(a1);
}

char *sub_22EF9C504(uint64_t a1)
{
  return sub_22F39BDE0(a1);
}

char *sub_22EF9C50C(uint64_t a1)
{
  return sub_22F37BA68(a1);
}

char *sub_22EF9C514(uint64_t a1)
{
  return sub_22F37CF04(a1);
}

char *sub_22EF9C51C(uint64_t a1)
{
  return sub_22F37E5D0(a1);
}

char *sub_22EF9C524(uint64_t a1)
{
  return sub_22F37F248(a1);
}

char *sub_22EF9C52C(uint64_t a1)
{
  return sub_22F3832B8(a1);
}

char *sub_22EF9C534(uint64_t a1)
{
  return sub_22F383D58(a1);
}

char *sub_22EF9C53C(uint64_t a1)
{
  return sub_22F386370(a1);
}

char *sub_22EF9C544(uint64_t a1)
{
  return sub_22F389AF8(a1);
}

char *sub_22EF9C54C(uint64_t a1)
{
  return sub_22F3928C8(a1);
}

char *sub_22EF9C554(uint64_t a1)
{
  return sub_22F392A08(a1);
}

char *sub_22EF9C55C(uint64_t a1)
{
  return sub_22F39B7FC(a1);
}

char *sub_22EF9C564(uint64_t a1)
{
  return sub_22F39E3C0(a1);
}

char *sub_22EF9C56C(uint64_t a1)
{
  return sub_22F39EED4(a1);
}

char *sub_22EF9C574(uint64_t a1)
{
  return sub_22F39F014(a1);
}

char *sub_22EF9C57C(uint64_t a1)
{
  return sub_22F3A3FF0(a1);
}

char *sub_22EF9C584(uint64_t a1)
{
  return sub_22F3A5008(a1);
}

char *sub_22EF9C58C(uint64_t a1)
{
  return sub_22F3A6434(a1);
}

char *sub_22EF9C594(uint64_t a1)
{
  return sub_22F3A7574(a1);
}

char *sub_22EF9C59C(uint64_t a1)
{
  return sub_22F389508(a1);
}

char *sub_22EF9C5A4(uint64_t a1)
{
  return sub_22F3998C4(a1);
}

uint64_t sub_22EF9C5AC(uint64_t a1)
{
  return ((uint64_t (*)())((char *)sub_22EF9C5C8 + 4 * word_22F4A05F2[*(unsigned __int16 *)(a1 + 32)]))();
}

void sub_22EF9CD90(uint64_t a1)
{
  __asm { BR              X10 }
}

_BYTE *sub_22EF9CDD0()
{
  llvm::raw_ostream *v0;
  uint64_t v1;
  int v2;
  int v3;
  _WORD *v4;
  unint64_t v5;
  const char *v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  _WORD *v9;
  _WORD *v10;
  _WORD *v11;
  _BYTE *v12;
  llvm::raw_ostream *v13;
  _BYTE *result;
  const void *v15;
  size_t v16;
  _BYTE *v17;

  v2 = *(unsigned __int8 *)(v1 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    v3 = ((*(unsigned __int16 *)(v1 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    v3 = sub_22F1BFAD0(v1);
  v4 = (_WORD *)*((_QWORD *)v0 + 4);
  v5 = *((_QWORD *)v0 + 3) - (_QWORD)v4;
  if (v3)
  {
    if (v5 <= 0x1B)
    {
      v6 = " __ptrauth_restricted_intptr";
      v7 = v0;
LABEL_9:
      llvm::raw_ostream::write(v7, v6);
      v8 = (_BYTE *)*((_QWORD *)v0 + 4);
      goto LABEL_10;
    }
    qmemcpy(v4, " __ptrauth_restricted_intptr", 28);
    v8 = (_BYTE *)(*((_QWORD *)v0 + 4) + 28);
  }
  else
  {
    if (v5 <= 9)
    {
      v6 = " __ptrauth";
      v7 = v0;
      goto LABEL_9;
    }
    v4[4] = 26740;
    *(_QWORD *)v4 = *(_QWORD *)" __ptrauth";
    v8 = (_BYTE *)(*((_QWORD *)v0 + 4) + 10);
  }
  *((_QWORD *)v0 + 4) = v8;
LABEL_10:
  if (*((_BYTE **)v0 + 3) == v8)
  {
    llvm::raw_ostream::write(v0, "(");
  }
  else
  {
    *v8 = 40;
    ++*((_QWORD *)v0 + 4);
  }
  llvm::raw_ostream::operator<<();
  v9 = (_WORD *)*((_QWORD *)v0 + 4);
  if (*((_QWORD *)v0 + 3) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 8236;
    *((_QWORD *)v0 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v0, ", ");
  }
  llvm::raw_ostream::operator<<();
  v10 = (_WORD *)*((_QWORD *)v0 + 4);
  if (*((_QWORD *)v0 + 3) - (_QWORD)v10 > 1uLL)
  {
    *v10 = 8236;
    *((_QWORD *)v0 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v0, ", ");
  }
  llvm::raw_ostream::operator<<();
  v11 = (_WORD *)*((_QWORD *)v0 + 4);
  if (*((_QWORD *)v0 + 3) - (_QWORD)v11 > 1uLL)
  {
    *v11 = 8236;
    v12 = (_BYTE *)(*((_QWORD *)v0 + 4) + 2);
    *((_QWORD *)v0 + 4) = v12;
  }
  else
  {
    llvm::raw_ostream::write(v0, ", ");
    v12 = (_BYTE *)*((_QWORD *)v0 + 4);
  }
  if (*((_BYTE **)v0 + 3) == v12)
  {
    v13 = (llvm::raw_ostream *)llvm::raw_ostream::write(v0, "\"");
    result = (_BYTE *)*((_QWORD *)v13 + 4);
  }
  else
  {
    *v12 = 34;
    result = (_BYTE *)(*((_QWORD *)v0 + 4) + 1);
    *((_QWORD *)v0 + 4) = result;
    v13 = v0;
  }
  v15 = *(const void **)(v1 + 56);
  v16 = *(unsigned int *)(v1 + 48);
  if (*((_QWORD *)v13 + 3) - (_QWORD)result >= v16)
  {
    if ((_DWORD)v16)
    {
      memcpy(result, v15, v16);
      result = (_BYTE *)(*((_QWORD *)v13 + 4) + v16);
      *((_QWORD *)v13 + 4) = result;
    }
  }
  else
  {
    v13 = (llvm::raw_ostream *)llvm::raw_ostream::write(v13, (const char *)v15);
    result = (_BYTE *)*((_QWORD *)v13 + 4);
  }
  if (*((_BYTE **)v13 + 3) == result)
  {
    result = (_BYTE *)llvm::raw_ostream::write(v13, "\"");
  }
  else
  {
    *result = 34;
    ++*((_QWORD *)v13 + 4);
  }
  v17 = (_BYTE *)*((_QWORD *)v0 + 4);
  if (*((_BYTE **)v0 + 3) == v17)
    return (_BYTE *)llvm::raw_ostream::write(v0, ")");
  *v17 = 41;
  ++*((_QWORD *)v0 + 4);
  return result;
}

uint64_t sub_22EFA54B8(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unint64_t v7;
  unsigned int *v8;
  unint64_t v9;
  size_t v10;
  int v11;
  int v12;

  v2 = *(unsigned __int16 *)(a1 + 32);
  v3 = *(unsigned __int16 *)(a2 + 32);
  if (v2 != v3)
    return v2 < v3;
  v4 = *(_QWORD *)(a1 + 40);
  if (!v4)
    return 1;
  v5 = *(_QWORD *)(a2 + 40);
  if (!v5)
    return 0;
  v6 = *(unsigned int **)(v4 + 16);
  v7 = *v6;
  v8 = *(unsigned int **)(v5 + 16);
  v9 = *v8;
  if (v9 >= v7)
    v10 = *v6;
  else
    v10 = *v8;
  if (v10 && (v11 = memcmp(v6 + 4, v8 + 4, v10)) != 0)
  {
    v12 = (v11 >> 31) | 1;
  }
  else
  {
    if (v7 < v9)
      v12 = -1;
    else
      v12 = 1;
    if (v7 == v9)
      v12 = 0;
  }
  return v12 == -1;
}

uint64_t sub_22EFA555C(uint64_t a1)
{
  int v1;
  uint64_t result;

  v1 = *(unsigned __int16 *)(a1 + 32) - 370;
  result = 1;
  switch(v1)
  {
    case 0:
    case 1:
    case 2:
    case 5:
    case 6:
    case 7:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 27:
    case 29:
    case 30:
    case 35:
    case 36:
    case 40:
    case 42:
    case 46:
    case 47:
    case 48:
    case 51:
    case 52:
    case 53:
    case 55:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 80:
    case 81:
    case 82:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 98:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_22EFA5594(uint64_t a1)
{
  int v1;
  uint64_t result;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;

  v1 = *(unsigned __int16 *)(a1 + 32);
  result = 1;
  if ((v1 - 380) >= 4)
  {
    v3 = v1 - 395;
    v4 = v3 > 0x33;
    v5 = (1 << v3) & 0xC000000000001;
    if (v4 || v5 == 0)
      return 0;
  }
  return result;
}

BOOL sub_22EFA55D0(uint64_t a1)
{
  int v1;
  _BOOL8 result;

  v1 = *(unsigned __int16 *)(a1 + 32);
  result = 1;
  if (v1 != 11
    && ((v1 - 407) > 0x3E || ((1 << (v1 + 105)) & 0x4000000000002105) == 0))
  {
    return v1 == 396;
  }
  return result;
}

uint64_t sub_22EFA5610(uint64_t a1)
{
  int v1;
  uint64_t result;

  v1 = *(unsigned __int16 *)(a1 + 32);
  result = 1;
  switch(v1)
  {
    case 370:
    case 371:
    case 372:
    case 373:
    case 374:
    case 375:
    case 376:
    case 377:
    case 378:
    case 379:
    case 380:
    case 381:
    case 382:
    case 383:
    case 384:
    case 385:
    case 386:
    case 387:
    case 388:
    case 389:
    case 390:
    case 391:
    case 392:
    case 393:
    case 394:
    case 395:
    case 397:
    case 399:
    case 400:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 408:
    case 410:
    case 411:
    case 412:
    case 413:
    case 414:
    case 416:
    case 417:
    case 418:
    case 419:
    case 421:
    case 422:
    case 423:
    case 424:
    case 425:
    case 426:
    case 427:
    case 428:
    case 429:
    case 430:
    case 431:
    case 432:
    case 433:
    case 434:
    case 435:
    case 436:
    case 437:
    case 438:
    case 439:
    case 440:
    case 441:
    case 442:
    case 443:
    case 444:
    case 445:
    case 446:
    case 447:
    case 448:
    case 449:
    case 450:
    case 451:
    case 452:
    case 453:
    case 454:
    case 455:
    case 456:
    case 457:
    case 458:
    case 459:
    case 460:
    case 461:
    case 462:
    case 463:
    case 464:
    case 465:
    case 466:
    case 467:
    case 468:
    case 470:
    case 471:
    case 472:
    case 473:
    case 474:
      return result;
    case 396:
    case 398:
    case 401:
    case 407:
    case 409:
    case 415:
    case 420:
    case 469:
      goto LABEL_4;
    default:
      if (v1 != 210)
LABEL_4:
        result = 0;
      break;
  }
  return result;
}

uint64_t sub_22EFA5650(uint64_t a1)
{
  uint64_t v1;
  _QWORD **v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(unsigned int *)(a1 + 40);
  if (!(_DWORD)v1)
    return 0;
  v2 = *(_QWORD ***)(a1 + 48);
  v3 = 8 * v1 - 8;
  do
  {
    v4 = *v2++;
    result = sub_22F408D68(*(_QWORD *)(*v4 & 0xFFFFFFFFFFFFFFF0));
    if ((result & 1) != 0)
      break;
    v6 = v3;
    v3 -= 8;
  }
  while (v6);
  return result;
}

uint64_t sub_22EFA56A8(uint64_t a1)
{
  uint64_t v1;
  _QWORD **v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(unsigned int *)(a1 + 40);
  if (!(_DWORD)v1)
    return 0;
  v2 = *(_QWORD ***)(a1 + 48);
  v3 = 8 * v1 - 8;
  do
  {
    v4 = *v2++;
    result = sub_22F408E0C(*(_QWORD *)(*v4 & 0xFFFFFFFFFFFFFFF0));
    if ((result & 1) != 0)
      break;
    v6 = v3;
    v3 -= 8;
  }
  while (v6);
  return result;
}

uint64_t sub_22EFA5700(uint64_t a1)
{
  uint64_t v1;
  _QWORD **v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(unsigned int *)(a1 + 40);
  if (!(_DWORD)v1)
    return 0;
  v2 = *(_QWORD ***)(a1 + 48);
  v3 = 8 * v1 - 8;
  do
  {
    v4 = *v2++;
    result = sub_22F408EBC(*(_QWORD *)(*v4 & 0xFFFFFFFFFFFFFFF0));
    if ((result & 1) != 0)
      break;
    v6 = v3;
    v3 -= 8;
  }
  while (v6);
  return result;
}

uint64_t sub_22EFA5758(uint64_t a1)
{
  uint64_t v1;
  _QWORD **v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(unsigned int *)(a1 + 40);
  if (!(_DWORD)v1)
    return 0;
  v2 = *(_QWORD ***)(a1 + 48);
  v3 = 8 * v1 - 8;
  do
  {
    v4 = *v2++;
    result = sub_22F408F60(*(_QWORD *)(*v4 & 0xFFFFFFFFFFFFFFF0));
    if ((result & 1) != 0)
      break;
    v6 = v3;
    v3 -= 8;
  }
  while (v6);
  return result;
}

uint64_t sub_22EFA57B0(uint64_t a1)
{
  uint64_t v1;
  _QWORD **v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(unsigned int *)(a1 + 40);
  if (!(_DWORD)v1)
    return 0;
  v2 = *(_QWORD ***)(a1 + 48);
  v3 = 8 * v1 - 8;
  do
  {
    v4 = *v2++;
    result = sub_22F40900C(*(_QWORD *)(*v4 & 0xFFFFFFFFFFFFFFF0));
    if ((result & 1) != 0)
      break;
    v6 = v3;
    v3 -= 8;
  }
  while (v6);
  return result;
}

uint64_t sub_22EFA5808(uint64_t a1)
{
  uint64_t v1;
  _QWORD **v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(unsigned int *)(a1 + 40);
  if (!(_DWORD)v1)
    return 0;
  v2 = *(_QWORD ***)(a1 + 48);
  v3 = 8 * v1 - 8;
  do
  {
    v4 = *v2++;
    result = sub_22F4090B8(*(_QWORD *)(*v4 & 0xFFFFFFFFFFFFFFF0));
    if ((result & 1) != 0)
      break;
    v6 = v3;
    v3 -= 8;
  }
  while (v6);
  return result;
}

uint64_t sub_22EFA5860(uint64_t a1)
{
  uint64_t v1;
  _QWORD **v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(unsigned int *)(a1 + 40);
  if (!(_DWORD)v1)
    return 0;
  v2 = *(_QWORD ***)(a1 + 48);
  v3 = 8 * v1 - 8;
  do
  {
    v4 = *v2++;
    result = sub_22F409168(*(_QWORD *)(*v4 & 0xFFFFFFFFFFFFFFF0));
    if ((result & 1) != 0)
      break;
    v6 = v3;
    v3 -= 8;
  }
  while (v6);
  return result;
}

uint64_t sub_22EFA58B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  BOOL v5;
  __int16 v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
    return 1;
  v2 = *(uint64_t **)(a1 + 16);
  v3 = &v2[v1];
  while (1)
  {
    v4 = *v2;
    if (*v2)
      v5 = *(_BYTE *)(*v2 + 12) == 11;
    else
      v5 = 0;
    if (!v5)
      return 0;
    v6 = *(_WORD *)(v4 + 12);
    if ((v6 & 0x200) == 0)
      break;
    if ((*(_WORD *)(v4 + 12) & 0x400) == 0)
      return 0;
LABEL_15:
    if (++v2 == v3)
      return 1;
  }
  v7 = *(_QWORD *)(v4 + 24);
  if (!v7)
  {
LABEL_13:
    *(_WORD *)(v4 + 12) = v6 | 0x600;
    goto LABEL_15;
  }
  v8 = *(unsigned __int8 **)(v4 + 16);
  while ((word_22F4ADB24[*v8] & 7) != 0)
  {
    ++v8;
    if (!--v7)
      goto LABEL_13;
  }
  result = 0;
  *(_WORD *)(v4 + 12) = v6 & 0xF9FF | 0x200;
  return result;
}

unint64_t sub_22EFA5954(unint64_t result)
{
  _QWORD *v1;
  unsigned int v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  __int16 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;

  v1 = (_QWORD *)result;
  v2 = *(_WORD *)(result + 48) & 0xFC01;
  *(_WORD *)(result + 48) &= 0xFC01u;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    *(_QWORD *)(result + 8) = v3;
    v4 = *(_DWORD *)(v3 + 28) & 0x7F;
    switch(v4)
    {
      case 16:
        LOWORD(v2) = v2 | 8;
        goto LABEL_116;
      case 24:
        *(_WORD *)(result + 48) = v2 | 2;
        v45 = *(unsigned int *)(v3 + 104);
        *(_QWORD *)(result + 16) = *(_QWORD *)(v3 + 96);
        *(_QWORD *)(result + 24) = v45;
        *(_QWORD *)(result + 32) = *(_QWORD *)(v3 + 80);
        v46 = v2 | 0x42;
        *(_WORD *)(result + 48) = v46;
        v47 = (v46 | ((*(_DWORD *)(v3 + 56) & 0x20000u) >> 10) | ((*(_DWORD *)(v3 + 56) & 0x20000u) >> 9)) ^ 0x100;
        *(_WORD *)(result + 48) = v47;
        v2 = v47 & 0xFFFFFDFF | (((*(_DWORD *)(v3 + 56) >> 18) & 1) << 9);
        goto LABEL_159;
      case 25:
      case 49:
      case 50:
      case 51:
      case 67:
        goto LABEL_3;
      case 28:
        LOWORD(v2) = v2 | 0x14;
        *(_WORD *)(result + 48) = v2;
        v48 = *(_QWORD *)(v3 + 56);
        goto LABEL_120;
      case 29:
        *(_WORD *)(result + 48) = v2 | 0x12;
        v35 = *(_QWORD *)(v3 + 48);
        v36 = *(_QWORD *)(v35 + 120);
        v37 = *(_QWORD *)(*(_QWORD *)(v35 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (v37)
          v38 = *(_BYTE *)(v37 + 16) == 26;
        else
          v38 = 0;
        if (v38
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
          && (v37 = sub_22F10CF48(v37)) != 0)
        {
          v39 = (unsigned __int16)(*(_QWORD *)(v37 + 16) >> 38);
        }
        else
        {
          v39 = 0;
        }
        v1[2] = v36;
        v1[3] = v39;
        v40 = *(_QWORD *)(*(_QWORD *)(v35 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (v40)
          v41 = *(unsigned __int8 *)(v40 + 16) - 27 > 0xFFFFFFFD;
        else
          v41 = 0;
        if (!v41)
          v40 = sub_22F10CF48(v40);
        v1[4] = *(_QWORD *)(v40 + 24);
        v1[5] = *(_QWORD *)(v3 + 56);
        v42 = v35;
        goto LABEL_154;
      case 30:
        LOWORD(v2) = v2 | 0x1A;
        *(_WORD *)(result + 48) = v2;
        *(_QWORD *)(result + 40) = *(_QWORD *)(v3 + 56);
        v50 = *(_QWORD *)(v3 + 48);
        if (!v50)
          goto LABEL_159;
        v34 = *(_QWORD *)(v50 + 80);
        goto LABEL_123;
      case 31:
        LOWORD(v2) = v2 | 0x16;
        *(_WORD *)(result + 48) = v2;
        *(_QWORD *)(result + 40) = *(_QWORD *)(v3 + 56);
        v43 = *(_QWORD *)(v3 + 48);
        if (!v43)
          goto LABEL_159;
        v44 = *(_QWORD *)(v43 + 56);
        v8 = (unint64_t *)(v44 & 0xFFFFFFFFFFFFFFF8);
        if ((v44 & 4) != 0)
          v8 = (unint64_t *)v8[4];
        goto LABEL_31;
      case 33:
        LOWORD(v2) = v2 | 0xC;
LABEL_116:
        *(_WORD *)(result + 48) = v2;
        goto LABEL_159;
      case 34:
      case 35:
        LOWORD(v2) = v2 | 4;
        goto LABEL_159;
      case 36:
        v49 = 36;
        goto LABEL_158;
      case 37:
        LOWORD(v2) = v2 | 0x34;
        *(_WORD *)(result + 48) = v2;
        v48 = *(_QWORD *)(v3 + 184);
LABEL_120:
        *(_QWORD *)(result + 40) = v48;
        goto LABEL_159;
      case 40:
      case 41:
        LOWORD(v2) = v2 | 0xA;
        *(_WORD *)(result + 48) = v2;
        v34 = *(_QWORD *)(v3 + 80);
LABEL_123:
        v8 = (unint64_t *)(v34 & 0xFFFFFFFFFFFFFFF8);
        if ((v34 & 4) != 0)
          v8 = (unint64_t *)*v8;
        goto LABEL_31;
      case 52:
      case 54:
      case 55:
      case 56:
      case 57:
        *(_WORD *)(result + 48) = v2 | 2;
        v10 = *(_QWORD *)(v3 + 120);
        v11 = *(_QWORD *)(*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (v11)
          v12 = *(_BYTE *)(v11 + 16) == 26;
        else
          v12 = 0;
        if (v12
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
          && (v11 = sub_22F10CF48(v11)) != 0)
        {
          v13 = (unsigned __int16)(*(_QWORD *)(v11 + 16) >> 38);
        }
        else
        {
          v13 = 0;
        }
        v1[2] = v10;
        v1[3] = v13;
        v14 = *(_QWORD *)(*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (v14)
          v15 = *(unsigned __int8 *)(v14 + 16) - 27 > 0xFFFFFFFD;
        else
          v15 = 0;
        if (!v15)
          v14 = sub_22F10CF48(v14);
        v1[4] = *(_QWORD *)(v14 + 24);
        v16 = *(_QWORD *)(v3 + 56);
        if ((v16 & 4) != 0)
        {
          v17 = *(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 16);
          if (v17)
          {
            *((_WORD *)v1 + 24) = v1[6] & 0xFFCF | 0x20;
            v1[5] = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v3 + 56) & 0xFFFFFFFFFFFFFFF8) + 24)
                              + 8 * (v17 - 1));
          }
        }
        if ((v4 - 54) > 3)
          goto LABEL_153;
        v18 = *v1;
        if ((*(_QWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 32))(*v1) + 80) & 0xE000) == 0x4000)
        {
          v19 = v1[6] & 0xFE7F;
          goto LABEL_25;
        }
        if ((*(_QWORD *)(v18 + 40) & 7) == 6)
        {
          v19 = v1[6] & 0xFE7F;
          if ((*(_DWORD *)(*(_QWORD *)(v18 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) <= 3)
          {
LABEL_25:
            v20 = 256;
            goto LABEL_152;
          }
        }
        else
        {
          v19 = v1[6] & 0xFE7F;
        }
        v20 = 128;
LABEL_152:
        *((_WORD *)v1 + 24) = v20 | v19;
LABEL_153:
        v42 = v3;
LABEL_154:
        result = sub_22EFBF68C(v42);
        if ((_DWORD)result)
          v49 = 512;
        else
          v49 = 0;
        LOWORD(v2) = v1[6] & 0xFDFF;
LABEL_158:
        LOWORD(v2) = v2 | v49;
        goto LABEL_159;
      case 60:
        result = sub_22EFB6870(v3);
        if (result)
        {
          *((_WORD *)v1 + 24) = v1[6] & 0xFFCF | 0x20;
          v1[5] = *(_QWORD *)(result + 56);
        }
LABEL_3:
        v5 = *v1;
        v6 = *(_DWORD *)(*v1 + 28) & 0x7F;
        if (*v1 && (v6 - 67) >= 0xFFFFFFEE)
        {
          v7 = *(_QWORD *)(v5 + 56);
          v8 = (unint64_t *)(v7 & 0xFFFFFFFFFFFFFFF8);
          if ((v7 & 4) == 0)
            goto LABEL_30;
          v9 = (unint64_t **)(v8 + 4);
          goto LABEL_29;
        }
        v8 = 0;
        if (v5 && v6 == 25)
        {
          v9 = (unint64_t **)(v5 + 64);
LABEL_29:
          v8 = *v9;
        }
LABEL_30:
        LOWORD(v2) = v1[6] & 0xFFF1 | 6;
        *((_WORD *)v1 + 24) = v2;
LABEL_31:
        if (!v8)
          goto LABEL_159;
        v22 = *v8;
        v21 = (uint64_t)(v8 + 1);
        result = v22;
        if ((v22 & 0xF) == 0)
        {
          v59 = 0;
LABEL_34:
          v23 = v21;
          v24 = v21;
          while (1)
          {
            v21 = v24;
            v25 = result;
            if ((result & 0xF) == 0 && *(_BYTE *)(*(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0) + 16) == 37)
              result = sub_22F1169C8(result, v23);
            v26 = *(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0);
            if ((result & 0xF) != 0)
            {
              if ((v26 & 0xFFFFFFFFFFFFFFF0) != 0)
                v27 = *(_QWORD *)((char *)&unk_22F4A0F30
                                + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0)
                                                                               + 16) << 56) >> 53));
              else
                v27 = 1;
              v23 = (v23 + v27 - 1) & -v27;
              result = *(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0);
              goto LABEL_58;
            }
            v28 = *(unsigned __int8 *)(v26 + 16);
            if (result && v28 == 7)
            {
              result = *(_QWORD *)(result + 32);
              v29 = 1;
              if (result >= 0x10 && (result & 0xF) == 0)
                v29 = *(_QWORD *)((char *)&unk_22F4A0F30
                                + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0)
                                                                               + 16) << 56) >> 53));
              v30 = v23 + v29 + 7;
              goto LABEL_57;
            }
            if (result && v28 == 39 || result && (v28 & 0xFE) == 0x28)
              break;
            if (result && (v28 & 0xFE) == 0)
            {
              result = *(_QWORD *)(result + 32);
              v29 = 1;
              if (result >= 0x10 && (result & 0xF) == 0)
                v29 = *(_QWORD *)((char *)&unk_22F4A0F30
                                + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0)
                                                                               + 16) << 56) >> 53));
              v30 = v23 + v29 - 1;
              goto LABEL_57;
            }
            if (result && v28 == 10)
              break;
            if (result && v28 == 31)
            {
              result = *(_QWORD *)(result + 32);
              if (result < 0x10 || (result & 0xF) != 0)
              {
                if ((result & 0xF) == 0)
                {
                  v23 += 16;
                  goto LABEL_58;
                }
                result = *(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0);
                v33 = result & 0xFFFFFFFFFFFFFFF0;
                if ((result & 0xFFFFFFFFFFFFFFF0) == 0)
                {
                  v29 = 1;
                  goto LABEL_86;
                }
LABEL_85:
                v29 = *(_QWORD *)((char *)&unk_22F4A0F30
                                + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)v33 + 16) << 56) >> 53));
LABEL_86:
                v30 = v23 + v29 + 15;
LABEL_57:
                v23 = v30 & -v29;
                goto LABEL_58;
              }
LABEL_84:
              v33 = result & 0xFFFFFFFFFFFFFFF0;
              goto LABEL_85;
            }
            if (result && v28 == 24)
            {
              result = *(_QWORD *)(result + 40);
              v29 = 1;
              if (result < 0x10 || (result & 0xF) != 0)
                goto LABEL_86;
              goto LABEL_84;
            }
LABEL_58:
            v32 = v25 == result && v21 == v23;
            v24 = v23;
            if (v32)
            {
              if ((result & 0xF) != 0)
                goto LABEL_93;
              goto LABEL_133;
            }
          }
          result = *(_QWORD *)(result + 32);
          if (result < 0x10 || (result & 0xF) != 0)
          {
            if ((result & 0xF) == 0)
            {
              v23 += 4;
              goto LABEL_58;
            }
            result = *(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0);
            v31 = result & 0xFFFFFFFFFFFFFFF0;
            if ((result & 0xFFFFFFFFFFFFFFF0) == 0)
            {
              v29 = 1;
              goto LABEL_56;
            }
          }
          else
          {
            v31 = result & 0xFFFFFFFFFFFFFFF0;
          }
          v29 = *(_QWORD *)((char *)&unk_22F4A0F30
                          + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)v31 + 16) << 56) >> 53));
LABEL_56:
          v30 = v23 + v29 + 3;
          goto LABEL_57;
        }
        result = *(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0);
        if ((result & 0xFFFFFFFFFFFFFFF0) != 0)
          v51 = *(_QWORD *)((char *)&unk_22F4A0F30
                          + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0)
                                                                         + 16) << 56) >> 53));
        else
          v51 = 1;
        v21 = (v21 + v51 - 1) & -v51;
        v59 = 0;
        if (result)
          v52 = 0;
        else
          v52 = v21 == 0;
        if (!v52)
          goto LABEL_34;
        v25 = 0;
        v23 = 0;
        result = 0;
LABEL_133:
        v53 = *(unsigned __int8 *)(*(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0) + 16);
        if (result && (v53 - 27) > 0xFFFFFFFD)
          goto LABEL_135;
        if (result && v53 == 46 && *(_DWORD *)(v25 + 20) == 1 && *(_DWORD *)(v25 + 40) == 1)
        {
          v55 = *(_QWORD *)(v21 + 16);
          v23 = (v55 & 0xFFFFFFFFFFFFFFFCLL) + 8;
          v25 = *(_QWORD *)(v55 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v25 & 0xF) != 0)
          {
            v25 = *(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF0);
            if ((v25 & 0xFFFFFFFFFFFFFFF0) != 0)
              v57 = *(_QWORD *)((char *)&unk_22F4A0F30
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v57 = 1;
            v23 = (v23 + v57 - 1) & -v57;
          }
          if ((v25 & 0xF) == 0
            && v25
            && *(unsigned __int8 *)(*(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF0) + 16) - 27 >= 0xFFFFFFFE)
          {
LABEL_135:
            v58 = v25;
            v59 = v23;
            if (*(_BYTE *)(v25 + 16) == 25)
              v54 = 0;
            else
              v54 = (unsigned __int16)(*(_QWORD *)(v25 + 16) >> 38);
            v1[2] = v23 + 16;
            v1[3] = v54;
            v56 = *(_QWORD *)(v25 + 24);
            result = sub_22E47EE80(&v58);
            v1[4] = v56;
            if (v58 && *(_BYTE *)(v58 + 16) == 26)
              *((_WORD *)v1 + 24) = (*(_QWORD *)(v58 + 16) >> 50) & 0x200 | v1[6] & 0xFDFF;
          }
        }
LABEL_93:
        LOWORD(v2) = *((_WORD *)v1 + 24);
LABEL_159:
        LOWORD(v2) = v2 & 0xFFFE;
        break;
      default:
        goto LABEL_159;
    }
  }
  *((_WORD *)v1 + 24) = v2 | 1;
  return result;
}

void *sub_22EFA613C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v4 = *(_QWORD *)(a2 + 32);
  if ((*(_WORD *)(v4 + 48) & 1) == 0)
    sub_22EFA5954(v4);
  v5 = *(_QWORD *)(a1 + 48);
  if (!(_DWORD)v5)
    return &unk_22F5C097E;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40);
  v7 = (v5 - 1);
  if ((_DWORD)v7)
  {
    v8 = *(unsigned int **)(a1 + 40);
    v9 = v7;
    do
    {
      v10 = *v8++;
      v11 = *(_QWORD *)(v6 + 8 * v10 + 16);
      if (v11 && (*(_DWORD *)(v11 + 28) & 0x7F) == 0x20)
        v6 = *(_QWORD *)(v11 + 56);
      --v9;
    }
    while (v9);
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v6 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * v7) + 16) + 40);
  v13 = v12 & 7;
  v14 = v12 & 0xFFFFFFFFFFFFFFF8;
  if (v13 || v14 == 0)
    return &unk_22F5C097E;
  else
    return (void *)(*(_QWORD *)(v14 + 16) + 16);
}

void sub_22EFA61F8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _BOOL8 v7;
  std::string *v8;
  int v9;
  uint64_t v10;
  char **v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  void **v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  BOOL v21;
  void *v22;
  std::string v24;
  void *__p[2];
  uint64_t v26;

  memset(&v24, 0, sizeof(v24));
  v3 = 0;
  LODWORD(v4) = 0;
  __p[0] = 0;
  __p[1] = 0;
  v26 = 0;
  v5 = (int *)(a1 + 16);
  v6 = 1;
LABEL_2:
  v7 = v6;
  do
  {
LABEL_3:
    v6 = v7;
    while (1)
    {
      v8 = ((v4 | v6) & 1) != 0 ? (std::string *)__p : &v24;
      while (1)
      {
        v9 = *(_DWORD *)(a1 + 20);
        if (v9 != 2)
          break;
        if ((((v4 | v6) | v3) & 1) != 0)
          std::string::append(v8, *(const std::string::value_type **)(a1 + 32), *(unsigned int *)(a1 + 24));
        sub_22EFA92B0(*(_QWORD *)a1, v5);
      }
      if ((v9 - 4) >= 2)
        break;
      v10 = *(unsigned int *)(a1 + 24);
      if (v10 < 0xC6)
        v11 = &(&off_24FAC12E8)[3 * v10];
      else
        v11 = *(char ***)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 8 * v10 - 1584);
      v12 = (unint64_t)v11[2];
      if ((v12 & 0x4000000) != 0)
      {
        if (SHIBYTE(v26) < 0)
        {
          *(_BYTE *)__p[0] = 0;
          __p[1] = 0;
        }
        else
        {
          LOBYTE(__p[0]) = 0;
          HIBYTE(v26) = 0;
        }
        goto LABEL_48;
      }
      if ((v12 & 0x8000000) != 0)
      {
        std::string::append(&v24, "Returns ");
        v6 = 0;
        v3 = 1;
LABEL_48:
        v4 = (v12 >> 26) & 1;
        sub_22EFA92B0(*(_QWORD *)a1, v5);
        goto LABEL_2;
      }
      if (((((unint64_t)v11[2] & 0x2000000) != 0) & v4) != 0)
        goto LABEL_49;
      v6 = (((unint64_t)v11[2] & 0x2000000) == 0) & v6;
LABEL_22:
      sub_22EFA92B0(*(_QWORD *)a1, v5);
    }
    if (!v9)
      goto LABEL_49;
    if (v9 != 1)
      goto LABEL_22;
    if ((((v4 | v6) | v3) & 1) != 0)
      std::string::push_back(v8, 32);
    sub_22EFA92B0(*(_QWORD *)a1, v5);
    v13 = *(_DWORD *)(a1 + 20);
    if (v13 == 2)
    {
      v14 = *(unsigned int *)(a1 + 24);
      if ((_DWORD)v14)
      {
        v15 = *(unsigned __int8 **)(a1 + 32);
        while ((word_22F4ADB24[*v15] & 7) != 0)
        {
          ++v15;
          if (!--v14)
            goto LABEL_30;
        }
        goto LABEL_2;
      }
LABEL_30:
      sub_22EFA92B0(*(_QWORD *)a1, v5);
      v13 = *(_DWORD *)(a1 + 20);
    }
    v7 = v6;
  }
  while (v13 != 1);
  sub_22EFA92B0(*(_QWORD *)a1, v5);
  if ((v4 & 1) == 0)
  {
    v3 = 0;
    v7 = 0;
    if ((v6 & 1) != 0)
    {
      v3 = 0;
      v16 = (void **)__p[0];
      v17 = (char *)__p[1];
      if (v26 >= 0)
      {
        v16 = __p;
        v17 = (char *)(HIBYTE(v26) & 0x7F);
      }
      v7 = 1;
      if (v17)
      {
        v18 = v17 - 1;
        do
        {
          v19 = *(unsigned __int8 *)v16;
          v16 = (void **)((char *)v16 + 1);
          v20 = word_22F4ADB24[v19] & 7;
          v7 = v20 != 0;
          if (v20)
            v21 = v18 == 0;
          else
            v21 = 1;
          --v18;
        }
        while (!v21);
        v3 = 0;
      }
    }
    goto LABEL_3;
  }
LABEL_49:
  sub_22EFA64EC((uint64_t)__p);
  v22 = (void *)(HIBYTE(v26) & 0x7F);
  if (v26 < 0)
    v22 = __p[1];
  if (v22)
  {
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 16) = v26;
    __p[1] = 0;
    v26 = 0;
    __p[0] = 0;
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_22EFA64EC((uint64_t)&v24);
    *(std::string *)a2 = v24;
  }
  if (SHIBYTE(v26) < 0)
    operator delete(__p[0]);
}

void sub_22EFA64EC(uint64_t a1)
{
  char v1;
  int v2;
  char *v3;
  char *v4;
  uint64_t v5;
  BOOL v6;
  char *v7;
  int v8;
  char v9;
  char *v10;

  v1 = *(_BYTE *)(a1 + 23);
  v2 = v1;
  v3 = *(char **)a1;
  if (v1 >= 0)
    v4 = (char *)a1;
  else
    v4 = *(char **)a1;
  v5 = v1 & 0x7F;
  if (v2 < 0)
    v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v6 = 1;
    v7 = v4;
    do
    {
      v8 = word_22F4ADB24[*v7] & 7;
      if (!v6 || !v8)
      {
        if (v8)
          v9 = 32;
        else
          v9 = *v7;
        *v4++ = v9;
      }
      ++v7;
      v6 = v8 != 0;
      --v5;
    }
    while (v5);
    LOBYTE(v2) = *(_BYTE *)(a1 + 23);
    v3 = *(char **)a1;
  }
  if ((v2 & 0x80u) == 0)
    v10 = (char *)a1;
  else
    v10 = v3;
  if (v4 != v10 && *(v4 - 1) == 32)
    --v4;
  std::string::resize((std::string *)a1, v4 - v10, 0);
}

char **sub_22EFA658C(char *a1, uint64_t a2)
{
  int v2;
  char **result;
  int v4;
  int v6;
  int v9;
  int v11;
  int v13;
  int v14;
  int v15;
  int v17;
  int v19;
  int v21;
  int v24;
  int v32;
  int v39;
  int v40;
  int v44;
  int v46;
  int v48;
  int v49;
  int v50;
  int v52;
  int v57;
  int v60;
  char **v62;
  int v63;
  void *v64;
  BOOL v65;
  int v66;
  int v67;
  int v69;
  int v70;
  int v71;
  int v73;
  int v79;
  int v80;
  int v82;
  int v84;
  int v86;
  int v88;
  int v89;
  int v91;
  int v93;
  int v96;
  int v97;
  int v99;
  int v101;
  int v102;
  int v103;
  int v106;
  int v107;
  int v109;
  int v110;
  int v111;
  int v116;
  int v117;
  int v121;
  int v124;
  int v127;
  int v129;
  int v134;
  int v137;
  int v138;
  int v140;
  int v148;
  int v149;
  int v153;
  int v159;
  int v168;

  switch(a2)
  {
    case 1:
      v2 = *a1;
      result = &off_24FAC12E8;
      switch(v2)
      {
        case 'a':
          return result;
        case 'b':
          result = &off_24FAC13C0;
          break;
        case 'c':
          result = &off_24FAC1408;
          break;
        case 'd':
          return 0;
        case 'e':
          result = &off_24FAC1750;
          break;
        default:
          if (v2 != 112)
            return 0;
          result = &off_24FAC1DE0;
          break;
      }
      return result;
    case 2:
      switch(*a1)
      {
        case 'e':
          if (a1[1] != 109)
            return 0;
          return &off_24FAC1798;
        case 'f':
          v32 = a1[1];
          if (v32 > 92)
          {
            if (v32 > 122)
            {
              if (v32 == 123)
              {
                result = off_24FAC1858;
              }
              else
              {
                if (v32 != 125)
                  return 0;
                result = &off_24FAC1870;
              }
            }
            else if (v32 == 93)
            {
              result = &off_24FAC18A0;
            }
            else
            {
              if (v32 != 110)
                return 0;
              result = &off_24FAC1918;
            }
          }
          else if (v32 > 40)
          {
            if (v32 == 41)
            {
              result = &off_24FAC18E8;
            }
            else
            {
              if (v32 != 91)
                return 0;
              result = off_24FAC1888;
            }
          }
          else if (v32 == 36)
          {
            result = off_24FAC18B8;
          }
          else
          {
            if (v32 != 40)
              return 0;
            result = off_24FAC18D0;
          }
          break;
        case 'g':
        case 'h':
        case 'j':
        case 'k':
          return 0;
        case 'i':
          if (a1[1] != 102)
            return 0;
          return &off_24FAC1A98;
        case 'l':
          if (a1[1] != 105)
            return 0;
          return &off_24FAC1BE8;
        default:
          if (*a1 != 115 || a1[1] != 97)
            return 0;
          return &off_24FAC2110;
      }
      return result;
    case 3:
      v13 = *a1;
      if (v13 <= 108)
      {
        switch(v13)
        {
          case 'a':
            if (*(_WORD *)(a1 + 1) != 26482)
              return 0;
            return &off_24FAC1360;
          case 'b':
            if (*(_WORD *)(a1 + 1) != 26485)
              return 0;
            return &off_24FAC13F0;
          case 'd':
            v24 = a1[1];
            if (v24 == 111)
            {
              if (a1[2] != 116)
                return 0;
              return off_24FAC1708;
            }
            else if (v24 == 105)
            {
              if (a1[2] != 114)
                return 0;
              return &off_24FAC1678;
            }
            else
            {
              if (v24 != 101 || a1[2] != 102)
                return 0;
              return &off_24FAC15E8;
            }
          default:
            return 0;
        }
      }
      else
      {
        switch(*a1)
        {
          case 'm':
            if (*(_WORD *)(a1 + 1) != 25459)
              return 0;
            return off_24FAC1CF0;
          case 'p':
            v39 = a1[1];
            if (v39 != 114)
            {
              if (v39 == 97 && a1[2] == 114)
                return &off_24FAC1E10;
              return 0;
            }
            if (a1[2] != 101)
              return 0;
            result = &off_24FAC1EB8;
            break;
          case 'r':
            if (*(_WORD *)(a1 + 1) != 26213)
              return 0;
            return &off_24FAC1FA8;
          case 's':
            if (*(_WORD *)(a1 + 1) != 25957)
              return 0;
            return &off_24FAC2188;
          case 'v':
            if (*(_WORD *)(a1 + 1) != 29281)
              return 0;
            return &off_24FAC2470;
          default:
            return 0;
        }
      }
      return result;
    case 4:
      switch(*a1)
      {
        case 'c':
          v14 = a1[1];
          if (v14 != 111)
          {
            if (v14 == 105 && *((_WORD *)a1 + 1) == 25972)
              return &off_24FAC1480;
            return 0;
          }
          v137 = a1[2];
          if (v137 != 110)
          {
            if (v137 == 100 && a1[3] == 101)
              return off_24FAC14E0;
            return 0;
          }
          if (a1[3] != 100)
            return 0;
          return &off_24FAC1528;
        case 'd':
          if (*(_WORD *)(a1 + 1) != 29793 || a1[3] != 101)
            return 0;
          return &off_24FAC15D0;
        case 'e':
          v60 = a1[1];
          if (v60 != 110)
          {
            if (v60 == 108 && *((_WORD *)a1 + 1) == 25971)
              return &off_24FAC1768;
            return 0;
          }
          if (*((_WORD *)a1 + 1) != 28021)
            return 0;
          return &off_24FAC17F8;
        case 'f':
          if (*(_WORD *)(a1 + 1) != 27753 || a1[3] != 101)
            return 0;
          return &off_24FAC1900;
        case 'l':
          if (*(_WORD *)(a1 + 1) != 28265)
            return 0;
          v62 = &off_24FAC1C00;
          v63 = a1[3];
          v64 = &unk_24FAC1C18;
          if (v63 != 107)
            v64 = 0;
          v65 = v63 == 101;
          goto LABEL_343;
        case 'n':
          v66 = a1[1];
          if (v66 != 111)
          {
            if (v66 == 97 && *((_WORD *)a1 + 1) == 25965)
              return &off_24FAC1D38;
            return 0;
          }
          v138 = a1[2];
          if (v138 != 116)
          {
            if (v138 == 111 && a1[3] == 112)
              return &off_24FAC1D68;
            return 0;
          }
          if (a1[3] != 101)
            return 0;
          return &off_24FAC1D98;
        case 'p':
          v67 = a1[1];
          if (v67 == 117)
          {
            if (*((_WORD *)a1 + 1) != 25970)
              return 0;
            return &off_24FAC1F90;
          }
          else
          {
            if (v67 != 111)
            {
              if (v67 == 97 && *((_WORD *)a1 + 1) == 25959)
                return &off_24FAC1DF8;
              return 0;
            }
            if (*((_WORD *)a1 + 1) != 29811)
              return 0;
            return &off_24FAC1EA0;
          }
        case 's':
          if (*(_WORD *)(a1 + 1) != 26987 || a1[3] != 112)
            return 0;
          return &off_24FAC2230;
        case 't':
          v69 = a1[1];
          if (v69 != 111)
          {
            if (v69 == 101 && *((_WORD *)a1 + 1) == 29811)
              return &off_24FAC2350;
            return 0;
          }
          if (*((_WORD *)a1 + 1) != 28516)
            return 0;
          result = &off_24FAC23C8;
          break;
        default:
          return 0;
      }
      return result;
    case 5:
      switch(*a1)
      {
        case 'b':
          if (*(_DWORD *)(a1 + 1) != 1717922162)
            return 0;
          return &off_24FAC13D8;
        case 'c':
          v80 = a1[1];
          if (v80 == 111)
          {
            if (*((_WORD *)a1 + 1) == 29550 && a1[4] == 116)
              return &off_24FAC1540;
          }
          else if (v80 == 108 && *((_WORD *)a1 + 1) == 29537 && a1[4] == 115)
          {
            return &off_24FAC1498;
          }
          return 0;
        case 'd':
        case 'f':
        case 'g':
        case 'j':
        case 'k':
        case 'l':
        case 'm':
        case 'n':
        case 'o':
        case 'q':
        case 'r':
          return 0;
        case 'e':
          v82 = a1[1];
          if (v82 == 110)
          {
            if (*((_WORD *)a1 + 1) == 26980 && a1[4] == 102)
              return &off_24FAC17E0;
          }
          else if (v82 == 109 && *((_WORD *)a1 + 1) == 27247 && a1[4] == 105)
          {
            return &off_24FAC17B0;
          }
          return 0;
        case 'h':
          if (*(_DWORD *)(a1 + 1) != 1936747621)
            return 0;
          return &off_24FAC19A8;
        case 'i':
          v84 = a1[1];
          if (v84 == 109)
          {
            if (*((_WORD *)a1 + 1) == 26465 && a1[4] == 101)
              return &off_24FAC1AC8;
          }
          else if (v84 == 102 && *((_WORD *)a1 + 1) == 28526 && a1[4] == 116)
          {
            return &off_24FAC1AB0;
          }
          return 0;
        case 'p':
          if (*(_DWORD *)(a1 + 1) != 1835102817)
            return 0;
          return &off_24FAC1E70;
        case 's':
          v86 = a1[1];
          if (v86 == 105)
          {
            if (*((_WORD *)a1 + 1) == 25454 && a1[4] == 101)
              return &off_24FAC2218;
          }
          else if (v86 == 104 && *((_WORD *)a1 + 1) == 29295 && a1[4] == 116)
          {
            return &off_24FAC21B8;
          }
          return 0;
        case 't':
          if (*(_DWORD *)(a1 + 1) != 2003792488)
            return 0;
          return &off_24FAC2398;
        case 'u':
          if (a1[1] != 110)
            return 0;
          v88 = a1[2];
          if (v88 != 116)
          {
            if (v88 == 105 && *(_WORD *)(a1 + 3) == 28271)
              return &off_24FAC2440;
            return 0;
          }
          if (*(_WORD *)(a1 + 3) != 27753)
            return 0;
          result = &off_24FAC2458;
          break;
        default:
          if (*a1 != 47 || *(_DWORD *)(a1 + 1) != 1802398060)
            return 0;
          return &off_24FAC1C30;
      }
      return result;
    case 6:
      switch(*a1)
      {
        case 'a':
          v15 = a1[1];
          if (v15 != 117)
          {
            if (v15 == 110 && *(_DWORD *)(a1 + 2) == 1919903843)
              return &off_24FAC1348;
            return 0;
          }
          if (*(_DWORD *)(a1 + 2) != 1919903860)
            return 0;
          return &off_24FAC1390;
        case 'e':
          v40 = a1[1];
          if (v40 != 110)
          {
            if (v40 == 108 && *(_DWORD *)(a1 + 2) == 1718183283)
              return &off_24FAC1780;
            return 0;
          }
          if (a1[2] != 100)
            return 0;
          v134 = a1[3];
          if (v134 == 117)
          {
            if (*((_WORD *)a1 + 2) != 27757)
              return 0;
            return &off_24FAC2428;
          }
          else
          {
            if (v134 != 109)
            {
              if (v134 == 100 && *((_WORD *)a1 + 2) == 29807)
                return &off_24FAC1720;
              return 0;
            }
            if (*((_WORD *)a1 + 2) != 25459)
              return 0;
            return &off_24FAC1D08;
          }
        case 'h':
          if (*(_DWORD *)(a1 + 1) != 1701866597 || a1[5] != 114)
            return 0;
          return &off_24FAC1978;
        case 'm':
          if (*(_DWORD *)(a1 + 1) != 1869116517 || a1[5] != 100)
            return 0;
          return &off_24FAC1CC0;
        case 'p':
          if (*(_DWORD *)(a1 + 1) != 1768710773 || a1[5] != 99)
            return 0;
          return &off_24FAC1F60;
        case 'r':
          if (a1[1] != 101)
            return 0;
          v44 = a1[2];
          if (v44 != 116)
          {
            if (v44 == 115)
            {
              if (*(_WORD *)(a1 + 3) == 27765 && a1[5] == 116)
                return &off_24FAC2068;
            }
            else if (v44 == 109 && *(_WORD *)(a1 + 3) == 29281 && a1[5] == 107)
            {
              return &off_24FAC2038;
            }
            return 0;
          }
          v168 = a1[3];
          if (v168 != 118)
          {
            if (v168 == 117 && *((_WORD *)a1 + 2) == 28274)
              return &off_24FAC2080;
            return 0;
          }
          if (*((_WORD *)a1 + 2) != 27745)
            return 0;
          return &off_24FAC20B0;
        case 's':
          if (a1[1] != 116)
            return 0;
          v46 = a1[2];
          if (v46 == 114)
          {
            if (*(_WORD *)(a1 + 3) == 25461 && a1[5] == 116)
              return &off_24FAC2290;
          }
          else if (v46 == 97 && *(_WORD *)(a1 + 3) == 26996 && a1[5] == 99)
          {
            return &off_24FAC2278;
          }
          return 0;
        case 't':
          v48 = a1[1];
          if (v48 != 112)
          {
            if (v48 == 104 && *(_DWORD *)(a1 + 2) == 1937207154)
              return &off_24FAC23B0;
            return 0;
          }
          if (*(_DWORD *)(a1 + 2) != 1835102817)
            return 0;
          result = &off_24FAC23E0;
          break;
        default:
          return 0;
      }
      return result;
    case 7:
      switch(*a1)
      {
        case 'a':
          if (*(_DWORD *)(a1 + 1) != 1869116533 || *(_WORD *)(a1 + 5) != 29554)
            return 0;
          return &off_24FAC13A8;
        case 'c':
          if (a1[1] != 111)
            return 0;
          v96 = a1[2];
          if (v96 == 112)
          {
            if (*(_DWORD *)(a1 + 3) != 1668244601)
              return 0;
            return &off_24FAC15A0;
          }
          else
          {
            if (v96 != 110)
            {
              if (v96 == 99 && *(_DWORD *)(a1 + 3) == 1936941420)
                return &off_24FAC14C8;
              return 0;
            }
            if (*(_DWORD *)(a1 + 3) != 1953523043)
              return 0;
            return &off_24FAC1510;
          }
        case 'd':
          v97 = a1[1];
          if (v97 == 111)
          {
            if (*(_DWORD *)(a1 + 2) == 1818846836 && a1[6] == 101)
              return &off_24FAC1738;
          }
          else if (v97 == 105)
          {
            if (*(_DWORD *)(a1 + 2) == 1818846817 && a1[6] == 101)
              return &off_24FAC1660;
          }
          else if (v97 == 101 && *(_DWORD *)(a1 + 2) == 1818845556 && a1[6] == 115)
          {
            return &off_24FAC1648;
          }
          return 0;
        case 'e':
          v99 = a1[1];
          if (v99 == 120)
          {
            v153 = a1[2];
            if (v153 != 116)
            {
              if (v153 == 97 && *(_DWORD *)(a1 + 3) == 1701605485)
                return &off_24FAC1810;
              return 0;
            }
            if (*(_DWORD *)(a1 + 3) != 1935961701)
              return 0;
            return &off_24FAC1840;
          }
          else
          {
            if (v99 != 110)
              return 0;
            if (*((_WORD *)a1 + 1) != 25444 || a1[4] != 111)
              return 0;
            v101 = a1[5];
            if (v101 != 110)
            {
              if (v101 == 100 && a1[6] == 101)
                return &off_24FAC14F8;
              return 0;
            }
            if (a1[6] != 100)
              return 0;
            return &off_24FAC17C8;
          }
        case 'i':
          if (a1[1] != 110)
            return 0;
          v102 = a1[2];
          if (v102 != 103)
          {
            if (v102 == 99 && *(_DWORD *)(a1 + 3) == 1701082476)
              return &off_24FAC1AF8;
            return 0;
          }
          if (*(_DWORD *)(a1 + 3) != 1886744434)
            return 0;
          return &off_24FAC1B10;
        case 'm':
          v103 = a1[1];
          if (v103 == 115)
          {
            if (*(_DWORD *)(a1 + 2) == 1818846819 && a1[6] == 101)
              return &off_24FAC1D20;
          }
          else if (v103 == 97 && *(_DWORD *)(a1 + 2) == 1819176814 && a1[6] == 121)
          {
            return off_24FAC1C78;
          }
          return 0;
        case 'p':
          if (*(_DWORD *)(a1 + 1) != 1635150194 || *(_WORD *)(a1 + 5) != 25972)
            return 0;
          return &off_24FAC1ED0;
        case 'r':
          v106 = a1[1];
          if (v106 == 116)
          {
            if (*(_DWORD *)(a1 + 2) == 1819176806 && a1[6] == 121)
              return off_24FAC20E0;
            return 0;
          }
          if (v106 != 101)
            return 0;
          v107 = a1[2];
          if (v107 > 108)
          {
            if (v107 != 109)
            {
              if (v107 == 116 && *(_DWORD *)(a1 + 3) == 1936618101)
                return &off_24FAC2098;
              return 0;
            }
            if (*(_DWORD *)(a1 + 3) != 1936421473)
              return 0;
            return &off_24FAC2050;
          }
          else if (v107 == 102)
          {
            if (*(_DWORD *)(a1 + 3) != 1835365481)
              return 0;
            return &off_24FAC1FC0;
          }
          else
          {
            if (v107 != 108)
              return 0;
            if (*(_WORD *)(a1 + 3) != 29793 || a1[5] != 101)
              return 0;
            v62 = &off_24FAC1FD8;
            v109 = a1[6];
            v64 = &unk_24FAC2008;
            if (v109 != 115)
              v64 = 0;
            v65 = v109 == 100;
LABEL_343:
            if (v65)
              return v62;
            else
              return (char **)v64;
          }
        case 's':
          v110 = a1[1];
          if (v110 == 117)
          {
            if (*(_DWORD *)(a1 + 2) == 1734439010 && a1[6] == 101)
              return &off_24FAC22A8;
            return 0;
          }
          if (v110 == 110)
          {
            if (*(_DWORD *)(a1 + 2) == 1701867625 && a1[6] == 116)
              return &off_24FAC2260;
            return 0;
          }
          if (v110 != 101)
            return 0;
          v111 = a1[2];
          if (v111 != 101)
          {
            if (v111 == 99 && *(_DWORD *)(a1 + 3) == 1852795252)
              return &off_24FAC2158;
            return 0;
          }
          if (*(_DWORD *)(a1 + 3) != 1869835361)
            return 0;
          result = &off_24FAC21A0;
          break;
        case 't':
          if (*(_DWORD *)(a1 + 1) != 1684369529 || *(_WORD *)(a1 + 5) != 26213)
            return 0;
          return &off_24FAC23F8;
        case 'v':
          if (*(_DWORD *)(a1 + 1) != 1769173605 || *(_WORD *)(a1 + 5) != 28271)
            return 0;
          return &off_24FAC24D0;
        case 'w':
          if (*(_DWORD *)(a1 + 1) != 1768845921 || *(_WORD *)(a1 + 5) != 26478)
            return 0;
          return &off_24FAC24E8;
        case 'x':
          if (*(_DWORD *)(a1 + 1) != 1852796013 || *(_WORD *)(a1 + 5) != 31084)
            return 0;
          return off_24FAC2548;
        default:
          return 0;
      }
      return result;
    case 8:
      switch(*a1)
      {
        case 'a':
          v17 = a1[1];
          if (v17 == 100)
          {
            if (*(_DWORD *)(a1 + 2) == 1684957540 && *((_WORD *)a1 + 3) == 30821)
              return &off_24FAC1318;
          }
          else if (v17 == 98 && *(_DWORD *)(a1 + 2) == 1634890867 && *((_WORD *)a1 + 3) == 29795)
          {
            return &off_24FAC1300;
          }
          return 0;
        case 'c':
          v116 = a1[1];
          if (v116 == 111)
          {
            if (*(_DWORD *)(a1 + 2) == 1635021678 && *((_WORD *)a1 + 3) == 29806)
              return &off_24FAC1558;
          }
          else
          {
            if (v116 != 97)
              return 0;
            v117 = a1[2];
            if (v117 == 116)
            {
              if (*(_DWORD *)(a1 + 3) == 1919903589 && a1[7] == 121)
                return &off_24FAC1468;
            }
            else if (v117 == 108 && *(_DWORD *)(a1 + 3) == 1667326572 && a1[7] == 107)
            {
              return &off_24FAC1438;
            }
          }
          return 0;
        case 'd':
          if (*(_DWORD *)(a1 + 1) != 1919379045 || *((_DWORD *)a1 + 1) != 1886744434)
            return 0;
          return &off_24FAC1600;
        case 'f':
          if (*(_DWORD *)(a1 + 1) != 1952673397 || *((_DWORD *)a1 + 1) != 1852795252)
            return 0;
          return &off_24FAC1930;
        case 'h':
          v121 = a1[1];
          if (v121 == 116)
          {
            if (*(_DWORD *)(a1 + 2) == 1852796013 && *((_WORD *)a1 + 3) == 31084)
              return off_24FAC1A50;
          }
          else if (v121 == 105 && *(_DWORD *)(a1 + 2) == 1701995876 && *((_WORD *)a1 + 3) == 29542)
          {
            return &off_24FAC1A20;
          }
          return 0;
        case 'i':
          if (*(_DWORD *)(a1 + 1) != 1919251566 || *((_DWORD *)a1 + 1) != 1818324594)
            return 0;
          return off_24FAC1B58;
        case 'm':
          v124 = a1[1];
          if (v124 == 101)
          {
            if (*(_DWORD *)(a1 + 2) == 1919246957 && *((_WORD *)a1 + 3) == 26223)
              return &off_24FAC1CA8;
          }
          else if (v124 == 97 && *(_DWORD *)(a1 + 2) == 1634758249 && *((_WORD *)a1 + 3) == 25959)
          {
            return &off_24FAC1C48;
          }
          return 0;
        case 'o':
          if (*(_DWORD *)(a1 + 1) != 1819436406 || *((_DWORD *)a1 + 1) != 1684107116)
            return 0;
          return &off_24FAC1DB0;
        case 'p':
          v127 = a1[1];
          if (v127 != 114)
          {
            if (v127 == 97 && *(_DWORD *)(a1 + 2) == 1869374066 && *((_WORD *)a1 + 3) == 27491)
              return off_24FAC1E28;
            return 0;
          }
          if (a1[2] != 111)
            return 0;
          v159 = a1[3];
          if (v159 != 116)
          {
            if (v159 == 112 && *((_DWORD *)a1 + 1) == 2037674597)
              return &off_24FAC1F00;
            return 0;
          }
          if (*((_DWORD *)a1 + 1) != 1819239279)
            return 0;
          return &off_24FAC1F48;
        case 's':
          v129 = a1[1];
          if (v129 > 106)
          {
            if (v129 == 107)
            {
              if (*(_DWORD *)(a1 + 2) == 1768714345 && *((_WORD *)a1 + 3) == 25966)
                return &off_24FAC2248;
            }
            else if (v129 == 116 && *(_DWORD *)(a1 + 2) == 1970565729 && *((_WORD *)a1 + 3) == 27757)
            {
              return off_24FAC2410;
            }
          }
          else if (v129 == 101)
          {
            if (*(_DWORD *)(a1 + 2) == 1769108835 && *((_WORD *)a1 + 3) == 31092)
              return &off_24FAC2170;
          }
          else if (v129 == 104 && *(_DWORD *)(a1 + 2) == 1702000495 && *((_WORD *)a1 + 3) == 29542)
          {
            return &off_24FAC2200;
          }
          break;
        case 't':
          if (*(_DWORD *)(a1 + 1) != 1819307365 || *((_DWORD *)a1 + 1) != 1702125932)
            return 0;
          return &off_24FAC2320;
        case 'v':
          if (*(_DWORD *)(a1 + 1) != 1633841765 || *((_DWORD *)a1 + 1) != 1835627617)
            return 0;
          return off_24FAC24A0;
        case 'x':
          if (*(_DWORD *)(a1 + 1) != 1768318322 || *((_DWORD *)a1 + 1) != 1835365481)
            return 0;
          return &off_24FAC2518;
        default:
          return 0;
      }
      return 0;
    case 9:
      switch(*a1)
      {
        case 'a':
          if (*(_QWORD *)(a1 + 1) != 0x6E6F69746E657474)
            return 0;
          return &off_24FAC1378;
        case 'c':
          v89 = a1[1];
          if (v89 != 111)
          {
            if (v89 == 97 && *(_DWORD *)(a1 + 2) == 1919380588 && *(_DWORD *)(a1 + 5) == 1752195442)
              return &off_24FAC1420;
            return 0;
          }
          if (*((_WORD *)a1 + 1) != 31088)
            return 0;
          v148 = a1[4];
          if (v148 != 114)
          {
            if (v148 == 98 && *(_DWORD *)(a1 + 5) == 1717922162)
              return &off_24FAC1570;
            return 0;
          }
          if (*(_DWORD *)(a1 + 5) != 1952999273)
            return 0;
          return &off_24FAC15B8;
        case 'e':
          if (*(_QWORD *)(a1 + 1) != 0x6E6F697470656378)
            return 0;
          return &off_24FAC1828;
        case 'h':
          if (*(_QWORD *)(a1 + 1) != 0x7962666572656469)
            return 0;
          return &off_24FAC1A08;
        case 'i':
          v91 = a1[1];
          if (v91 == 110)
          {
            v149 = a1[2];
            if (v149 == 118)
            {
              if (*(_DWORD *)(a1 + 3) == 1634300513 && *(_WORD *)(a1 + 7) == 29806)
                return &off_24FAC1B88;
            }
            else if (v149 == 116 && *(_DWORD *)(a1 + 3) == 1634103909 && *(_WORD *)(a1 + 7) == 25955)
            {
              return &off_24FAC1B40;
            }
          }
          else if (v91 == 100 && *(_DWORD *)(a1 + 2) == 1668834668 && *(_DWORD *)(a1 + 5) == 1953523043)
          {
            return &off_24FAC1A80;
          }
          return 0;
        case 'l':
          if (*(_QWORD *)(a1 + 1) != 0x796C6E6F78657461)
            return 0;
          return off_24FAC1BB8;
        case 'n':
          if (*(_QWORD *)(a1 + 1) != 0x6563617073656D61)
            return 0;
          return &off_24FAC1D50;
        case 'o':
          if (*(_QWORD *)(a1 + 1) != 0x7069687372656E77)
            return 0;
          return &off_24FAC1DC8;
        case 'p':
          v93 = a1[1];
          if (v93 == 114)
          {
            if (*(_DWORD *)(a1 + 2) == 1667593327 && *(_DWORD *)(a1 + 5) == 1684370531)
              return &off_24FAC1F18;
          }
          else if (v93 == 97 && *(_DWORD *)(a1 + 2) == 1919377778 && *(_DWORD *)(a1 + 5) == 1752195442)
          {
            return &off_24FAC1E58;
          }
          break;
        case 's':
          if (*(_QWORD *)(a1 + 1) != 0x7962666572776F68)
            return 0;
          return &off_24FAC21E8;
        case 't':
          if (*(_QWORD *)(a1 + 1) != 0x6B636F6C62747865)
            return 0;
          return off_24FAC2368;
        case 'w':
          if (*(_QWORD *)(a1 + 1) != 0x70756F72676B6165)
            return 0;
          return &off_24FAC2500;
        default:
          return 0;
      }
      return 0;
    case 10:
      v4 = *a1;
      switch(*a1)
      {
        case 'a':
          if (*(_QWORD *)(a1 + 1) != 0x756F72676F746464 || a1[9] != 112)
            return 0;
          return &off_24FAC1330;
        case 'b':
        case 'c':
        case 'f':
        case 'g':
        case 'j':
        case 'k':
        case 'l':
        case 'n':
        case 'o':
        case 'p':
        case 'q':
          return 0;
        case 'd':
          v70 = a1[1];
          if (v70 == 105)
          {
            if (*(_QWORD *)(a1 + 2) != 0x6E6F697373756373)
              return 0;
            return &off_24FAC1690;
          }
          if (v70 == 101 && a1[2] == 112)
          {
            v71 = a1[3];
            if (v71 == 114)
            {
              if (*((_DWORD *)a1 + 1) == 1952539493 && *((_WORD *)a1 + 4) == 25701)
                return &off_24FAC1630;
            }
            else if (v71 == 101 && *((_DWORD *)a1 + 1) == 1852138606 && *((_WORD *)a1 + 4) == 31075)
            {
              return &off_24FAC1618;
            }
          }
          return 0;
        case 'e':
          if (*(_WORD *)(a1 + 1) != 25710)
            return 0;
          v73 = a1[3];
          if (v73 == 120)
          {
            if (*((_DWORD *)a1 + 1) == 1852796013 && *((_WORD *)a1 + 4) == 31084)
              return &off_24FAC2560;
          }
          else if (v73 == 114)
          {
            if (*((_DWORD *)a1 + 1) == 1852794484 && *((_WORD *)a1 + 4) == 31084)
              return &off_24FAC20F8;
          }
          else if (v73 == 109 && *((_DWORD *)a1 + 1) == 1852796513 && *((_WORD *)a1 + 4) == 31084)
          {
            return &off_24FAC1C90;
          }
          return 0;
        case 'h':
          if (*(_QWORD *)(a1 + 1) != 0x6C69667265646165 || a1[9] != 101)
            return 0;
          return &off_24FAC1960;
        case 'i':
          if (*(_QWORD *)(a1 + 1) != 0x746E656D656C706DLL || a1[9] != 115)
            return 0;
          return &off_24FAC1AE0;
        case 'm':
          if (*(_QWORD *)(a1 + 1) != 0x64756C636E696E61 || a1[9] != 101)
            return 0;
          return &off_24FAC1C60;
        case 'r':
          if (*(_QWORD *)(a1 + 1) != 0x64756C636E696674 || a1[9] != 101)
            return 0;
          return &off_24FAC20C8;
        case 's':
          v79 = a1[1];
          if (v79 == 117)
          {
            v140 = a1[2];
            if (v140 == 112)
            {
              if (*(_DWORD *)(a1 + 3) == 1818456677 && *(_DWORD *)(a1 + 6) == 1936941420)
                return &off_24FAC22F0;
            }
            else if (v140 == 98 && *(_DWORD *)(a1 + 3) == 1952671091 && *(_DWORD *)(a1 + 6) == 1852795252)
            {
              return &off_24FAC22C0;
            }
          }
          else if (v79 == 101 && *(_QWORD *)(a1 + 2) == 0x7473696C66657263)
          {
            return off_24FAC2128;
          }
          return 0;
        default:
          if (v4 == 120)
          {
            if (*(_QWORD *)(a1 + 1) == 0x64756C636E696C6DLL && a1[9] == 101)
              return &off_24FAC2530;
          }
          else if (v4 == 47 && *(_QWORD *)(a1 + 1) == 0x636F6C6274786574 && a1[9] == 107)
          {
            return &off_24FAC2380;
          }
          break;
      }
      return 0;
    case 11:
      switch(*a1)
      {
        case 'c':
          v19 = a1[1];
          if (v19 == 111)
          {
            if (*(_QWORD *)(a1 + 2) == 0x6C69617465647970 && a1[10] == 115)
              return &off_24FAC1588;
          }
          else if (v19 == 108)
          {
            if (*(_QWORD *)(a1 + 2) == 0x6769736564737361 && a1[10] == 110)
              return &off_24FAC14B0;
          }
          else if (v19 == 97 && *(_QWORD *)(a1 + 2) == 0x7061726772656C6CLL && a1[10] == 104)
          {
            return &off_24FAC1450;
          }
          return 0;
        case 'd':
          if (a1[1] != 111)
            return 0;
          v49 = a1[2];
          if (v49 != 110)
          {
            if (v49 == 99 && *(_QWORD *)(a1 + 3) == 0x796C6E6F6B6F6F62)
              return off_24FAC16C0;
            return 0;
          }
          if (*(_QWORD *)(a1 + 3) != 0x6564756C636E6974)
            return 0;
          return &off_24FAC16F0;
        case 'e':
          if (*(_WORD *)(a1 + 1) != 25710)
            return 0;
          v50 = a1[3];
          if (v50 > 111)
          {
            if (v50 == 112)
            {
              if (*((_DWORD *)a1 + 1) == 1818391137 && *(_DWORD *)(a1 + 7) == 1801678700)
                return &off_24FAC1E40;
            }
            else if (v50 == 118 && *((_DWORD *)a1 + 1) == 1633841765 && *(_DWORD *)(a1 + 7) == 1835627617)
            {
              return &off_24FAC24B8;
            }
          }
          else if (v50 == 104)
          {
            if (*((_DWORD *)a1 + 1) == 1869376884 && *(_DWORD *)(a1 + 7) == 2037149295)
              return &off_24FAC1A68;
          }
          else if (v50 == 105 && *((_DWORD *)a1 + 1) == 1919251566 && *(_DWORD *)(a1 + 7) == 1818324594)
          {
            return &off_24FAC1B70;
          }
          return 0;
        case 'h':
          v52 = a1[1];
          if (v52 == 116)
          {
            if (*(_QWORD *)(a1 + 2) == 0x64756C636E696C6DLL && a1[10] == 101)
              return &off_24FAC1A38;
          }
          else if (v52 == 101 && *(_QWORD *)(a1 + 2) == 0x73616C637265706CLL && a1[10] == 115)
          {
            return &off_24FAC1990;
          }
          return 0;
        case 'm':
          if (*(_QWORD *)(a1 + 1) != 0x6F7267646F687465 || *(_WORD *)(a1 + 9) != 28789)
            return 0;
          return &off_24FAC1CD8;
        case 'p':
          if (*(_QWORD *)(a1 + 1) != 0x6E616D726F667265 || *(_WORD *)(a1 + 9) != 25955)
            return 0;
          return &off_24FAC1E88;
        case 'r':
          if (*(_DWORD *)(a1 + 1) != 1952541797 || a1[5] != 101)
            return 0;
          v57 = a1[6];
          if (v57 != 115)
          {
            if (v57 == 100 && *(_DWORD *)(a1 + 7) == 1869835361)
              return &off_24FAC1FF0;
            return 0;
          }
          if (*(_DWORD *)(a1 + 7) != 1869835361)
            return 0;
          result = &off_24FAC2020;
          break;
        case 'v':
          if (*(_QWORD *)(a1 + 1) != 0x756C636E69627265 || *(_WORD *)(a1 + 9) != 25956)
            return 0;
          return &off_24FAC2488;
        default:
          return 0;
      }
      return result;
    case 12:
      v6 = *a1;
      if (v6 == 108)
      {
        if (*(_QWORD *)(a1 + 1) == 0x6C636E6978657461 && *(_QWORD *)(a1 + 4) == 0x6564756C636E6978)
          return &off_24FAC1BA0;
      }
      else if (v6 == 105)
      {
        if (*(_QWORD *)(a1 + 1) == 0x7365636E6174736ELL && *(_QWORD *)(a1 + 4) == 0x657A697365636E61)
          return &off_24FAC1B28;
      }
      else if (v6 == 101 && *(_QWORD *)(a1 + 1) == 0x6F786574616C646ELL && *(_QWORD *)(a1 + 4) == 0x796C6E6F78657461)
      {
        return &off_24FAC1BD0;
      }
      return 0;
    case 13:
      switch(*a1)
      {
        case 'e':
          if (*(_QWORD *)(a1 + 1) != 0x666572636573646ELL || *(_DWORD *)(a1 + 9) != 1953720684)
            return 0;
          result = &off_24FAC2140;
          break;
        case 'f':
          if (*(_QWORD *)(a1 + 1) != 0x676E6F6974636E75 || *(_DWORD *)(a1 + 9) != 1886744434)
            return 0;
          result = &off_24FAC1948;
          break;
        case 'h':
          if (*(_QWORD *)(a1 + 1) != 0x676C6C6163656469 || *(_DWORD *)(a1 + 9) != 1752195442)
            return 0;
          result = &off_24FAC19C0;
          break;
        case 'n':
          if (*(_QWORD *)(a1 + 1) != 0x756F72676275736FLL || *(_DWORD *)(a1 + 9) != 1735289200)
            return 0;
          result = &off_24FAC1D80;
          break;
        case 'p':
          if (*(_QWORD *)(a1 + 1) != 0x63657363696C6275 || *(_DWORD *)(a1 + 9) != 1852795252)
            return 0;
          result = &off_24FAC1F78;
          break;
        case 's':
          if (*(_QWORD *)(a1 + 1) != 0x6365736275736275 || *(_DWORD *)(a1 + 9) != 1852795252)
            return 0;
          result = &off_24FAC22D8;
          break;
        case 't':
          if (*(_QWORD *)(a1 + 1) != 0x666574616C706D65 || *(_DWORD *)(a1 + 9) != 1684825449)
            return 0;
          result = &off_24FAC2338;
          break;
        default:
          return 0;
      }
      return result;
    case 14:
      v21 = *a1;
      if (v21 == 112)
      {
        if (*(_QWORD *)(a1 + 1) == 0x6573657461766972 && *(_QWORD *)(a1 + 6) == 0x6E6F697463657365)
          return &off_24FAC1EE8;
      }
      else if (v21 == 101)
      {
        if (*(_QWORD *)(a1 + 1) == 0x6F6F62636F64646ELL && *(_QWORD *)(a1 + 6) == 0x796C6E6F6B6F6F62)
          return &off_24FAC16D8;
      }
      else if (v21 == 100 && *(_QWORD *)(a1 + 1) == 0x6E696B6F6F62636FLL && *(_QWORD *)(a1 + 6) == 0x6564756C636E696BLL)
      {
        return &off_24FAC16A8;
      }
      return 0;
    case 15:
      v9 = *a1;
      if (v9 == 116)
      {
        if (*(_QWORD *)(a1 + 1) == 0x6F63666F656C6261 && *(_QWORD *)(a1 + 7) == 0x73746E65746E6F63)
          return &off_24FAC2308;
      }
      else if (v9 == 115)
      {
        if (*(_QWORD *)(a1 + 1) == 0x6974696E69776F68 && *(_QWORD *)(a1 + 7) == 0x72657A696C616974)
          return &off_24FAC21D0;
      }
      else if (v9 == 104 && *(_WORD *)(a1 + 1) == 25705 && a1[3] == 101)
      {
        v11 = a1[4];
        if (v11 == 105)
        {
          if (*(_QWORD *)(a1 + 5) == 0x7A696C616974696ELL && *(_WORD *)(a1 + 13) == 29285)
            return &off_24FAC19F0;
        }
        else if (v11 == 99 && *(_QWORD *)(a1 + 5) == 0x61726772656C6C61 && *(_WORD *)(a1 + 13) == 26736)
        {
          return &off_24FAC19D8;
        }
      }
      return 0;
    case 16:
      if (*(_QWORD *)a1 != 0x65746365746F7270 || *((_QWORD *)a1 + 1) != 0x6E6F697463657364)
        return 0;
      return &off_24FAC1F30;
    default:
      return 0;
  }
}

uint64_t sub_22EFA8C84(uint64_t *a1, const char **a2)
{
  int v4;
  uint64_t result;
  int v6;
  int *v7;
  int v8;
  uint64_t v9;
  unsigned int v10;

  if (*a2)
    v4 = strlen(*a2);
  else
    v4 = 0;
  result = *a1;
  v6 = v4 - *(_DWORD *)(*a1 + 8);
  if (v6 < 0)
    v6 = *(_DWORD *)(*a1 + 8) - v4;
  if (v6 <= *(_DWORD *)a1[1])
  {
    result = llvm::StringRef::edit_distance();
    v7 = (int *)a1[1];
    v8 = *v7;
    if (result < *v7)
    {
      *v7 = result;
      *(_DWORD *)(a1[2] + 8) = 0;
      v8 = *v7;
    }
    if ((_DWORD)result == v8)
    {
      v9 = a1[2];
      v10 = *(_DWORD *)(v9 + 8);
      if (v10 >= *(_DWORD *)(v9 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = *(_DWORD *)(v9 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = a2;
      ++*(_DWORD *)(v9 + 8);
    }
  }
  return result;
}

uint64_t sub_22EFA8D58(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t result;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(unsigned __int8 **)(a1 + 40);
LABEL_2:
  v5 = *(unsigned __int8 **)(a1 + 48);
  v6 = v4;
  if (v4 != v5)
  {
    v6 = v4;
    while ((word_22F4ADB24[*v6] & 2) == 0)
    {
      if (++v6 == v5)
      {
        v6 = *(unsigned __int8 **)(a1 + 48);
        break;
      }
    }
  }
  result = llvm::StringRef::find();
  if (result == -1)
  {
    v9 = *(unsigned __int8 **)(a1 + 48);
    if (v6 == v9)
    {
      LODWORD(v4) = (_DWORD)v6;
    }
    else if (*v6 == 10)
    {
      LODWORD(v4) = (_DWORD)v6++;
    }
    else if (v6 + 1 == v9)
    {
      LODWORD(v4) = (_DWORD)v6;
      v6 = *(unsigned __int8 **)(a1 + 48);
    }
    else
    {
      LODWORD(v4) = (_DWORD)v6;
      if (v6[1] == 10)
        v6 += 2;
      else
        ++v6;
    }
  }
  else
  {
    if (!result)
    {
      v13 = *(_QWORD *)(a1 + 40);
      v14 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)a2 = *(_DWORD *)(a1 + 56) + v13 - *(_DWORD *)(a1 + 24);
      *(_DWORD *)(a2 + 4) = 8;
      *(_DWORD *)(a2 + 12) = v14;
      *(_QWORD *)(a1 + 40) = v13 + v14;
      result = (uint64_t)sub_22F3A7F5C(*(_QWORD *)(a1 + 16), (char *)(v13 + 1), v14 - 1);
      v12 = 0;
      v11 = *(_DWORD *)(result + 16) & 0xFFFFF;
      goto LABEL_24;
    }
    v8 = *(unsigned __int8 **)(a1 + 40);
    v4 = &v8[result];
    while ((word_22F4ADB24[*v8] & 7) != 0)
    {
      ++v8;
      if (!--result)
      {
        *(_QWORD *)(a1 + 40) = v4;
        goto LABEL_2;
      }
    }
    v6 = v4;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = (_DWORD)v4 - v10;
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 56) + v10 - *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a2 + 4) = 7;
  *(_DWORD *)(a2 + 12) = (_DWORD)v6 - v10;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a2 + 16) = v10;
  v12 = 2;
LABEL_24:
  *(_DWORD *)(a2 + 8) = v11;
  *(_BYTE *)(a1 + 62) = v12;
  return result;
}

BOOL sub_22EFA8F04(char *a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  _BOOL8 result;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  int v20;
  int v21;
  int v22;
  int v23;
  unint64_t v24;
  int v25;

  switch(a2)
  {
    case 1:
      v2 = *a1 - 97;
      if (v2 >= 0x15)
        return 0;
      v3 = 1343747;
      return (v3 >> v2) & 1;
    case 2:
      switch(*a1)
      {
        case 'b':
          return a1[1] == 114;
        case 'd':
          v2 = a1[1] - 100;
          if (v2 >= 0x11)
            return 0;
          v3 = 65793;
          return (v3 >> v2) & 1;
        case 'e':
          return a1[1] == 109;
        case 'h':
          v25 = a1[1];
          result = 1;
          if ((v25 - 49) >= 6 && v25 != 114)
            return 0;
          return result;
        case 'l':
          return a1[1] == 105;
        case 'o':
        case 'u':
          v5 = a1[1];
          goto LABEL_8;
        case 't':
          HIDWORD(v24) = a1[1];
          LODWORD(v24) = HIDWORD(v24) - 100;
          v2 = v24 >> 1;
          if (v2 >= 9)
            return 0;
          v3 = 389;
          return (v3 >> v2) & 1;
        default:
          return 0;
      }
    case 3:
      v6 = *a1;
      switch(*a1)
      {
        case 'b':
          v7 = *(unsigned __int16 *)(a1 + 1);
          v8 = 26473;
          return v7 == v8;
        case 'c':
          v7 = *(unsigned __int16 *)(a1 + 1);
          v8 = 27759;
          return v7 == v8;
        case 'd':
          v22 = a1[1];
          if (v22 == 105)
          {
            if (a1[2] == 118)
              return 1;
          }
          else if (v22 == 101)
          {
            v5 = a1[2];
LABEL_8:
            if (v5 == 108)
              return 1;
          }
          return 0;
        case 'e':
        case 'f':
        case 'g':
        case 'h':
          return 0;
        case 'i':
          v23 = a1[1];
          if (v23 == 110)
          {
            if (a1[2] == 115)
              return 1;
          }
          else if (v23 == 109 && a1[2] == 103)
          {
            return 1;
          }
          return 0;
        default:
          if (v6 == 112)
          {
            v7 = *(unsigned __int16 *)(a1 + 1);
            v8 = 25970;
            return v7 == v8;
          }
          if (v6 != 115 || a1[1] != 117)
            return 0;
          v18 = a1[2];
          result = v18 == 98 || v18 == 112;
          break;
      }
      return result;
    case 4:
      v9 = *a1;
      switch(v9)
      {
        case 's':
          v11 = a1[3];
          v15 = *(unsigned __int16 *)(a1 + 1) == 24944;
          v16 = 110;
          break;
        case 'f':
          v20 = *(unsigned __int16 *)(a1 + 1);
          v11 = a1[3];
          v21 = 28271;
LABEL_72:
          v15 = v20 == v21;
          v16 = 116;
          break;
        case 'c':
          v10 = *(unsigned __int16 *)(a1 + 1);
          v11 = a1[3];
          v12 = 25711;
LABEL_42:
          v15 = v10 == v12;
          v16 = 101;
          break;
        default:
          return 0;
      }
      return v15 && v11 == v16;
    case 5:
      v17 = *a1;
      if (v17 == 116)
      {
        switch(a1[1])
        {
          case 'a':
            v10 = *((unsigned __int16 *)a1 + 1);
            v11 = a1[4];
            v12 = 27746;
            goto LABEL_42;
          case 'b':
            v11 = a1[4];
            v15 = *((unsigned __int16 *)a1 + 1) == 25711;
            v16 = 121;
            return v15 && v11 == v16;
          case 'f':
            v20 = *((unsigned __int16 *)a1 + 1);
            v11 = a1[4];
            v21 = 28527;
            goto LABEL_72;
          case 'h':
            v11 = a1[4];
            v15 = *((unsigned __int16 *)a1 + 1) == 24933;
            v16 = 100;
            return v15 && v11 == v16;
          default:
            return 0;
        }
      }
      if (v17 != 115)
        return 0;
      v7 = *(_DWORD *)(a1 + 1);
      v8 = 1819042157;
      return v7 == v8;
    case 6:
      if (*(_WORD *)a1 != 29811 || a1[2] != 114)
        return 0;
      v14 = a1[3];
      if (v14 == 111)
      {
        v7 = *((unsigned __int16 *)a1 + 2);
        v8 = 26478;
      }
      else
      {
        if (v14 != 105)
          return 0;
        v7 = *((unsigned __int16 *)a1 + 2);
        v8 = 25963;
      }
      return v7 == v8;
    case 7:
      v11 = *(_DWORD *)(a1 + 3);
      v15 = *(_DWORD *)a1 == 1953522019;
      v16 = 1852795252;
      return v15 && v11 == v16;
    case 8:
      return *(_QWORD *)a1 == 0x70756F72676C6F63;
    case 10:
      v11 = *((unsigned __int16 *)a1 + 4);
      v15 = *(_QWORD *)a1 == 0x6F75716B636F6C62;
      v16 = 25972;
      return v15 && v11 == v16;
    default:
      return 0;
  }
}

void sub_22EFA92B0(uint64_t a1, int *a2)
{
  int v4;
  unsigned __int8 *v5;
  char *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  __int16 v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  int v25;
  unsigned __int8 *v27;
  uint64_t v28;
  int v29;
  int v30;
  int v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  char *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  int v42;
  unsigned __int8 *v43;
  int v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int64_t v53;
  unsigned __int8 *v54;
  const char *v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  _BOOL4 v60;
  _BOOL4 v61;
  const char *v62;
  BOOL v63;
  int v64;
  const char *v65;
  int v66;
  int v67;
  int v68;
  int v69;
  BOOL v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  unsigned int v77;
  int v78;
  size_t v79;
  uint64_t v80;
  char **v81;
  unint64_t v82;
  int v83;
  unsigned int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  BOOL v89;
  const char *v90;
  BOOL v91;
  uint64_t v92;
  BOOL v93;
  int v94;
  int v95;
  int v96;
  int v97;
  BOOL v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  char **v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  int v140;
  unsigned int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __int128 *p_dst;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  unsigned int v154;
  uint64_t v155;
  char *__s;
  size_t v157;
  char *__src;
  unint64_t v159;
  __int128 v160;
  __int128 __p;
  unint64_t v162;
  char v163;
  unsigned __int8 *v164[3];
  __int16 v165;
  __int128 __dst;
  unint64_t v167;

  v4 = *(unsigned __int8 *)(a1 + 61);
  while (1)
  {
    while ((v4 - 1) < 2)
    {
      v5 = *(unsigned __int8 **)(a1 + 40);
      v6 = *(char **)(a1 + 48);
      if (v5 != (unsigned __int8 *)v6)
      {
        if (!*(_BYTE *)(a1 + 60))
        {
          v25 = (char)*v5;
          if (v25 != 13 && v25 != 10)
            goto LABEL_127;
          v27 = v5 + 1;
          if (*v5 != 10)
          {
            v27 = *(unsigned __int8 **)(a1 + 48);
            if (v5 + 1 != (unsigned __int8 *)v6)
            {
              if (v5[1] == 10)
                v27 = v5 + 2;
              else
                v27 = v5 + 1;
            }
          }
          *a2 = *(_DWORD *)(a1 + 56) + (_DWORD)v5 - *(_DWORD *)(a1 + 24);
          a2[1] = 1;
          a2[3] = (_DWORD)v27 - (_DWORD)v5;
          *(_QWORD *)(a1 + 40) = v27;
          if (v4 != 2 || v27 == (unsigned __int8 *)v6)
            return;
          while (1)
          {
            v28 = *v27;
            if ((word_22F4ADB24[v28] & 5) == 0)
              break;
            if (++v27 == (unsigned __int8 *)v6)
              return;
          }
          goto LABEL_96;
        }
        switch(*(_BYTE *)(a1 + 62))
        {
          case 1:
            sub_22EFA8D58(a1, (uint64_t)a2);
            return;
          case 2:
            sub_22F3A84B0(a1, (uint64_t)a2);
            return;
          case 3:
            sub_22F3A854C(a1, (uint64_t)a2);
            return;
          case 4:
            sub_22F3A85B4(a1, (uint64_t)a2);
            return;
          case 5:
            *a2 = *(_DWORD *)(a1 + 56) + (_DWORD)v5 - *(_DWORD *)(a1 + 24);
            a2[1] = 15;
            a2[3] = 1;
            *(_QWORD *)(a1 + 40) = v5 + 1;
            *(_BYTE *)(a1 + 62) = 0;
            return;
          default:
            v29 = (char)*v5;
            v30 = *v5;
            if (v29 <= 59)
            {
              if (v29 != 10 && v29 != 13)
              {
                if (v29 == 38)
                {
                  v40 = v5 + 1;
                  if (v5 + 1 == (unsigned __int8 *)v6)
                  {
                    *a2 = *(_DWORD *)(a1 + 56) + (_DWORD)v5 - *(_DWORD *)(a1 + 24);
                    a2[1] = 2;
                    LODWORD(v49) = 1;
LABEL_152:
                    a2[3] = v49;
                    *(_QWORD *)(a1 + 40) = v6;
                    goto LABEL_153;
                  }
                  v41 = *v40;
                  v42 = word_22F4ADB24[v41] & 0x60;
                  if ((word_22F4ADB24[v41] & 0x60) != 0)
                  {
                    v43 = v5 + 1;
                    while (1)
                    {
                      v44 = *v43;
                      if ((word_22F4ADB24[*v43] & 0x60) == 0)
                        break;
                      if (++v43 == (unsigned __int8 *)v6)
                        goto LABEL_151;
                    }
LABEL_141:
                    v50 = 0;
LABEL_142:
                    if (v44 == 59 && v40 != v43 && v43 != (unsigned __int8 *)v6)
                    {
                      v53 = v43 - v40;
                      v54 = v43 + 1;
                      if (v42)
                      {
                        switch(v53)
                        {
                          case 2:
                            if (*(_WORD *)v40 == 29804)
                            {
                              v55 = "<";
                            }
                            else
                            {
                              if (*(_WORD *)v40 != 29799)
                              {
                                LOBYTE(v55) = 0;
                                v56 = 0;
                                v57 = 0;
                                v58 = 0;
                                goto LABEL_231;
                              }
                              v55 = ">";
                            }
                            v56 = (unint64_t)v55 >> 8;
                            v57 = 1;
                            v58 = 1;
LABEL_231:
                            v59 = 0;
                            v85 = (char)*v40;
                            if (v85 <= 87)
                            {
                              switch(v85)
                              {
                                case 'G':
                                  v87 = (char)v40[1];
                                  v65 = ">";
                                  v88 = 1;
                                  v89 = v87 == 84;
                                  v90 = ">";
                                  break;
                                case 'L':
                                  v87 = (char)v40[1];
                                  v65 = "<";
                                  v88 = 1;
                                  v89 = v87 == 84;
                                  v90 = "<";
                                  break;
                                case 'P':
                                  v91 = v40[1] == 105;
                                  v59 = 2 * v91;
                                  v65 = "Π";
                                  goto LABEL_455;
                                default:
                                  goto LABEL_244;
                              }
                              v92 = 1;
                            }
                            else
                            {
                              v86 = v85 - 103;
                              v65 = 0;
                              switch(v86)
                              {
                                case 0:
                                  v87 = (char)v40[1];
                                  v65 = ">";
                                  v88 = 1;
                                  v89 = v87 == 101;
                                  v90 = "≥";
                                  goto LABEL_252;
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 8:
                                  goto LABEL_551;
                                case 5:
                                  v87 = (char)v40[1];
                                  v65 = "<";
                                  v88 = 1;
                                  v89 = v87 == 101;
                                  v90 = "≤";
LABEL_252:
                                  v92 = 3;
                                  break;
                                case 6:
                                  v91 = v40[1] == 117;
                                  v59 = 2 * v91;
                                  v65 = "μ";
                                  goto LABEL_455;
                                case 7:
                                  v94 = (char)v40[1];
                                  v65 = "ν";
                                  v88 = 2;
                                  v90 = "≠";
                                  v92 = 3;
                                  if (v94 != 101)
                                  {
                                    v92 = 0;
                                    v90 = 0;
                                  }
                                  v93 = v94 == 117;
                                  goto LABEL_256;
                                case 9:
                                  v91 = v40[1] == 105;
                                  v59 = 2 * v91;
                                  v65 = "π";
                                  goto LABEL_455;
                                default:
                                  goto LABEL_244;
                              }
                            }
                            if (!v89)
                            {
                              v92 = 0;
                              v90 = 0;
                            }
                            v93 = v87 == 116;
LABEL_256:
                            if (v93)
                              v59 = v88;
                            else
                              v59 = v92;
                            if (!v93)
                              v65 = v90;
                            goto LABEL_551;
                          case 3:
                            v59 = 0;
                            v60 = *(unsigned __int16 *)v40 == 28001;
                            v61 = v40[2] == 112;
                            v62 = "&";
                            v57 = v60 & v61;
                            v63 = !v60 || !v61;
                            if (v60 && v61)
                              LOBYTE(v55) = "&";
                            else
                              LOBYTE(v55) = 0;
                            v56 = (unint64_t)"&" >> 8;
                            if (v63)
                              v56 = 0;
                            v58 = v57;
                            v64 = (char)*v40;
                            if (v64 > 96)
                            {
                              v66 = v64 - 97;
                              v65 = 0;
                              switch(v66)
                              {
                                case 0:
                                  v67 = *(unsigned __int16 *)(v40 + 1);
                                  v68 = 28781;
                                  goto LABEL_286;
                                case 1:
                                case 5:
                                case 6:
                                case 7:
                                case 9:
                                case 10:
                                case 11:
                                case 12:
                                case 13:
                                case 14:
                                case 16:
                                  goto LABEL_551;
                                case 2:
                                  v70 = *(unsigned __int16 *)(v40 + 1) == 26984;
                                  v59 = 2 * v70;
                                  v65 = "χ";
                                  goto LABEL_549;
                                case 3:
                                  v70 = *(unsigned __int16 *)(v40 + 1) == 26469;
                                  v59 = 2 * v70;
                                  v65 = "°";
                                  goto LABEL_549;
                                case 4:
                                  v70 = *(unsigned __int16 *)(v40 + 1) == 24948;
                                  v59 = 2 * v70;
                                  v65 = "η";
                                  goto LABEL_549;
                                case 8:
                                  v70 = *(unsigned __int16 *)(v40 + 1) == 29806;
                                  v59 = 3;
                                  if (*(_WORD *)(v40 + 1) != 29806)
                                    v59 = 0;
                                  v65 = "∫";
                                  goto LABEL_549;
                                case 15:
                                  v95 = (char)v40[1];
                                  if (v95 == 115)
                                  {
                                    v91 = v40[2] == 105;
                                    v59 = 2 * v91;
                                    v65 = "ψ";
                                  }
                                  else
                                  {
                                    if (v95 != 104)
                                      goto LABEL_445;
                                    v91 = v40[2] == 105;
                                    v59 = 2 * v91;
                                    v65 = "φ";
                                  }
                                  break;
                                case 17:
                                  v96 = (char)v40[1];
                                  if (v96 == 104)
                                  {
                                    v91 = v40[2] == 111;
                                    v59 = 2 * v91;
                                    v65 = "ρ";
                                  }
                                  else
                                  {
                                    if (v96 != 101)
                                      goto LABEL_445;
                                    v91 = v40[2] == 103;
                                    v59 = 2 * v91;
                                    v65 = "®";
                                  }
                                  break;
                                case 18:
                                  v97 = (char)v40[1];
                                  if (v97 == 117)
                                  {
                                    v91 = v40[2] == 109;
                                    v59 = 3;
                                    if (v40[2] != 109)
                                      v59 = 0;
                                    v65 = "∑";
                                  }
                                  else
                                  {
                                    if (v97 != 105)
                                      goto LABEL_445;
                                    v91 = v40[2] == 109;
                                    v59 = 3;
                                    if (v40[2] != 109)
                                      v59 = 0;
                                    v65 = "∼";
                                  }
                                  break;
                                case 19:
                                  v70 = *(unsigned __int16 *)(v40 + 1) == 30049;
                                  v59 = 2 * v70;
                                  v65 = "τ";
                                  goto LABEL_549;
                                default:
                                  goto LABEL_244;
                              }
LABEL_455:
                              if (!v91)
                                v65 = 0;
                              goto LABEL_551;
                            }
                            switch(v64)
                            {
                              case 'A':
                                v67 = *(unsigned __int16 *)(v40 + 1);
                                v68 = 20557;
LABEL_286:
                                v98 = v67 == v68;
LABEL_355:
                                v59 = v98;
                                if (v98)
                                  v65 = v62;
                                else
                                  v65 = 0;
                                break;
                              case 'P':
                                v99 = (char)v40[1];
                                if (v99 == 115)
                                {
                                  v91 = v40[2] == 105;
                                  v59 = 2 * v91;
                                  v65 = "Ψ";
                                }
                                else
                                {
                                  if (v99 != 104)
                                    goto LABEL_445;
                                  v91 = v40[2] == 105;
                                  v59 = 2 * v91;
                                  v65 = "Φ";
                                }
                                goto LABEL_455;
                              case 'R':
                                v70 = *(unsigned __int16 *)(v40 + 1) == 18245;
                                v59 = 2 * v70;
                                v65 = "®";
                                goto LABEL_549;
                              default:
LABEL_244:
                                v65 = 0;
                                break;
                            }
                            goto LABEL_551;
                          case 4:
                            v62 = "\"";
                            if (*(_DWORD *)v40 == 1953461617)
                            {
                              v56 = (unint64_t)"\"" >> 8;
                              v58 = 1;
                              v57 = 1;
                              v55 = "\"";
                            }
                            else if (*(_DWORD *)v40 == 1936683105)
                            {
                              v55 = "'";
                              v56 = (unint64_t)"'" >> 8;
                              v57 = 1;
                              v58 = 1;
                            }
                            else
                            {
                              v58 = 0;
                              v57 = 0;
                              v56 = 0;
                              LOBYTE(v55) = 0;
                            }
                            v59 = 0;
                            v65 = 0;
                            switch(*v40)
                            {
                              case 'O':
                                v70 = (*(unsigned __int16 *)(v40 + 1) ^ 0x6D75 | v40[3] ^ 0x6C) == 0;
                                v59 = 2 * v70;
                                v65 = "Ö";
                                goto LABEL_549;
                              case 'P':
                              case 'R':
                              case 'S':
                              case 'T':
                              case 'V':
                              case 'W':
                              case 'X':
                              case 'Z':
                              case '[':
                              case '\\':
                              case ']':
                              case '^':
                              case '_':
                              case 'd':
                              case 'f':
                              case 'g':
                              case 'h':
                              case 'j':
                              case 'k':
                              case 'm':
                              case 't':
                              case 'v':
                              case 'w':
                              case 'x':
                                goto LABEL_551;
                              case 'Q':
                                v109 = *(unsigned __int16 *)(v40 + 1) ^ 0x4F55;
                                v110 = v40[3];
                                v111 = 84;
                                goto LABEL_354;
                              case 'U':
                                v70 = (*(unsigned __int16 *)(v40 + 1) ^ 0x6D75 | v40[3] ^ 0x6C) == 0;
                                v59 = 2 * v70;
                                v65 = "Ü";
                                goto LABEL_549;
                              case 'Y':
                                v70 = (*(unsigned __int16 *)(v40 + 1) ^ 0x6D75 | v40[3] ^ 0x6C) == 0;
                                v59 = 2 * v70;
                                v65 = "Ÿ";
                                goto LABEL_549;
                              case 'a':
                                v112 = (char)v40[1];
                                if (v112 == 117)
                                {
                                  v70 = *((unsigned __int16 *)v40 + 1) == 27757;
                                  v59 = 2 * v70;
                                  v65 = "ä";
                                }
                                else
                                {
                                  if (v112 != 112)
                                    goto LABEL_445;
                                  v70 = *((unsigned __int16 *)v40 + 1) == 29551;
                                  v59 = v70;
                                  v65 = "'";
                                }
                                goto LABEL_549;
                              case 'b':
                                v70 = (*(unsigned __int16 *)(v40 + 1) ^ 0x7465 | v40[3] ^ 0x61) == 0;
                                v59 = 2 * v70;
                                v65 = "β";
                                goto LABEL_549;
                              case 'c':
                                v70 = (*(unsigned __int16 *)(v40 + 1) ^ 0x706F | v40[3] ^ 0x79) == 0;
                                v59 = 2 * v70;
                                v65 = "©";
                                goto LABEL_549;
                              case 'e':
                                v70 = (*(unsigned __int16 *)(v40 + 1) ^ 0x6D75 | v40[3] ^ 0x6C) == 0;
                                v59 = 2 * v70;
                                v65 = "ë";
                                goto LABEL_549;
                              case 'i':
                                v113 = (char)v40[1];
                                switch(v113)
                                {
                                  case 'u':
                                    v70 = *((unsigned __int16 *)v40 + 1) == 27757;
                                    v59 = 2 * v70;
                                    v65 = "ï";
                                    break;
                                  case 's':
                                    v70 = *((unsigned __int16 *)v40 + 1) == 28265;
                                    v59 = 3;
                                    if (*((_WORD *)v40 + 1) != 28265)
                                      v59 = 0;
                                    v65 = "∈";
                                    break;
                                  case 'o':
                                    v70 = *((unsigned __int16 *)v40 + 1) == 24948;
                                    v59 = 2 * v70;
                                    v65 = "ι";
                                    break;
                                  default:
                                    goto LABEL_445;
                                }
                                goto LABEL_549;
                              case 'l':
                                v70 = (*(unsigned __int16 *)(v40 + 1) ^ 0x7261 | v40[3] ^ 0x72) == 0;
                                v59 = 3;
                                if (*(unsigned __int16 *)(v40 + 1) ^ 0x7261 | v40[3] ^ 0x72)
                                  v59 = 0;
                                v65 = "←";
                                goto LABEL_549;
                              case 'n':
                                v70 = (*(unsigned __int16 *)(v40 + 1) ^ 0x7362 | v40[3] ^ 0x70) == 0;
                                v59 = 2 * v70;
                                v65 = " ";
                                goto LABEL_549;
                              case 'o':
                                v70 = (*(unsigned __int16 *)(v40 + 1) ^ 0x6D75 | v40[3] ^ 0x6C) == 0;
                                v59 = 2 * v70;
                                v65 = "ö";
                                goto LABEL_549;
                              case 'p':
                                v114 = (char)v40[1];
                                if (v114 != 114)
                                {
                                  if (v114 == 101)
                                  {
                                    v70 = *((unsigned __int16 *)v40 + 1) == 28786;
                                    v59 = 3;
                                    if (*((_WORD *)v40 + 1) != 28786)
                                      v59 = 0;
                                    v65 = "⊥";
                                  }
                                  else
                                  {
                                    if (v114 != 97)
                                      goto LABEL_445;
                                    v70 = *((unsigned __int16 *)v40 + 1) == 29810;
                                    v59 = 3;
                                    if (*((_WORD *)v40 + 1) != 29810)
                                      v59 = 0;
                                    v65 = "∂";
                                  }
                                  goto LABEL_549;
                                }
                                if (v40[2] != 111)
                                  goto LABEL_445;
                                v133 = (char)v40[3];
                                if (v133 == 112)
                                {
                                  v65 = "∝";
                                }
                                else
                                {
                                  if (v133 != 100)
                                    goto LABEL_445;
                                  v65 = "∏";
                                }
                                v59 = 3;
                                goto LABEL_551;
                              case 'q':
                                v109 = *(unsigned __int16 *)(v40 + 1) ^ 0x6F75;
                                v110 = v40[3];
                                v111 = 116;
LABEL_354:
                                v98 = (v109 | v110 ^ v111) == 0;
                                goto LABEL_355;
                              case 'r':
                                v70 = (*(unsigned __int16 *)(v40 + 1) ^ 0x7261 | v40[3] ^ 0x72) == 0;
                                v59 = 3;
                                if (*(unsigned __int16 *)(v40 + 1) ^ 0x7261 | v40[3] ^ 0x72)
                                  v59 = 0;
                                v65 = "→";
                                goto LABEL_549;
                              case 's':
                                v115 = (char)v40[1];
                                if (v115 == 101)
                                {
                                  v70 = *((unsigned __int16 *)v40 + 1) == 29795;
                                  v59 = 2 * v70;
                                  v65 = "§";
                                }
                                else
                                {
                                  if (v115 != 100)
                                    goto LABEL_445;
                                  v70 = *((unsigned __int16 *)v40 + 1) == 29807;
                                  v59 = 3;
                                  if (*((_WORD *)v40 + 1) != 29807)
                                    v59 = 0;
                                  v65 = "⋅";
                                }
                                break;
                              case 'u':
                                v70 = (*(unsigned __int16 *)(v40 + 1) ^ 0x6D75 | v40[3] ^ 0x6C) == 0;
                                v59 = 2 * v70;
                                v65 = "ü";
                                goto LABEL_549;
                              case 'y':
                                v70 = (*(unsigned __int16 *)(v40 + 1) ^ 0x6D75 | v40[3] ^ 0x6C) == 0;
                                v59 = 2 * v70;
                                v65 = "\xFF";
                                goto LABEL_549;
                              case 'z':
                                v70 = (*(unsigned __int16 *)(v40 + 1) ^ 0x7465 | v40[3] ^ 0x61) == 0;
                                v59 = 2 * v70;
                                v65 = "ζ";
                                goto LABEL_549;
                              default:
                                goto LABEL_244;
                            }
                            goto LABEL_549;
                          case 5:
                            v56 = 0;
                            LOBYTE(v55) = 0;
                            v57 = 0;
                            v58 = 0;
                            v59 = 0;
                            v65 = 0;
                            switch(*v40)
                            {
                              case 'A':
                                v69 = (char)v40[1];
                                if (v69 == 114)
                                {
                                  LOBYTE(v55) = 0;
                                  v56 = 0;
                                  v57 = 0;
                                  v58 = 0;
                                  v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x6E69 | v40[4] ^ 0x67) == 0;
                                  v59 = 2 * v70;
                                  v65 = "Å";
                                }
                                else
                                {
                                  if (v69 != 99)
                                    goto LABEL_444;
                                  LOBYTE(v55) = 0;
                                  v56 = 0;
                                  v57 = 0;
                                  v58 = 0;
                                  v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x7269 | v40[4] ^ 0x63) == 0;
                                  v59 = 2 * v70;
                                  v65 = "Â";
                                }
                                goto LABEL_549;
                              case 'B':
                              case 'C':
                              case 'F':
                              case 'H':
                              case 'J':
                              case 'K':
                              case 'L':
                              case 'M':
                              case 'N':
                              case 'Q':
                              case 'R':
                              case 'V':
                              case 'W':
                              case 'X':
                              case 'Z':
                              case '[':
                              case '\\':
                              case ']':
                              case '^':
                              case '_':
                              case 'b':
                              case 'c':
                              case 'f':
                              case 'h':
                              case 'j':
                              case 'q':
                              case 'v':
                              case 'w':
                              case 'x':
                                goto LABEL_551;
                              case 'D':
                                LOBYTE(v55) = 0;
                                v56 = 0;
                                v57 = 0;
                                v58 = 0;
                                v70 = *(_DWORD *)(v40 + 1) == 1635019877;
                                v59 = 2 * v70;
                                v65 = "Δ";
                                goto LABEL_549;
                              case 'E':
                                LOBYTE(v55) = 0;
                                v56 = 0;
                                v57 = 0;
                                v58 = 0;
                                v70 = *(_DWORD *)(v40 + 1) == 1668442467;
                                v59 = 2 * v70;
                                v65 = "Ê";
                                goto LABEL_549;
                              case 'G':
                                LOBYTE(v55) = 0;
                                v56 = 0;
                                v57 = 0;
                                v58 = 0;
                                v70 = *(_DWORD *)(v40 + 1) == 1634561377;
                                v59 = 2 * v70;
                                v65 = "Γ";
                                goto LABEL_549;
                              case 'I':
                                LOBYTE(v55) = 0;
                                v56 = 0;
                                v57 = 0;
                                v58 = 0;
                                v70 = *(_DWORD *)(v40 + 1) == 1668442467;
                                v59 = 2 * v70;
                                v65 = "Î";
                                goto LABEL_549;
                              case 'O':
                                v117 = (char)v40[1];
                                if (v117 == 109)
                                {
                                  LOBYTE(v55) = 0;
                                  v56 = 0;
                                  v57 = 0;
                                  v58 = 0;
                                  v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x6765 | v40[4] ^ 0x61) == 0;
                                  v59 = 2 * v70;
                                  v65 = "Ω";
                                }
                                else
                                {
                                  if (v117 != 99)
                                    goto LABEL_444;
                                  LOBYTE(v55) = 0;
                                  v56 = 0;
                                  v57 = 0;
                                  v58 = 0;
                                  v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x7269 | v40[4] ^ 0x63) == 0;
                                  v59 = 2 * v70;
                                  v65 = "Ô";
                                }
                                goto LABEL_549;
                              case 'P':
                                LOBYTE(v55) = 0;
                                v56 = 0;
                                v57 = 0;
                                v58 = 0;
                                v70 = *(_DWORD *)(v40 + 1) == 1701669234;
                                v59 = 3;
                                if (*(_DWORD *)(v40 + 1) != 1701669234)
                                  v59 = 0;
                                v65 = "″";
                                goto LABEL_549;
                              case 'S':
                                LOBYTE(v55) = 0;
                                v56 = 0;
                                v57 = 0;
                                v58 = 0;
                                v70 = *(_DWORD *)(v40 + 1) == 1634559849;
                                v59 = 2 * v70;
                                v65 = "Σ";
                                goto LABEL_549;
                              case 'T':
                                v118 = (char)v40[1];
                                if (v118 == 104)
                                {
                                  LOBYTE(v55) = 0;
                                  v56 = 0;
                                  v57 = 0;
                                  v58 = 0;
                                  v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x7465 | v40[4] ^ 0x61) == 0;
                                  v59 = 2 * v70;
                                  v65 = "Θ";
                                  goto LABEL_549;
                                }
                                if (v118 != 82)
                                  goto LABEL_444;
                                LOBYTE(v55) = 0;
                                v56 = 0;
                                v57 = 0;
                                v58 = 0;
                                v119 = *((unsigned __int16 *)v40 + 1) ^ 0x4441;
                                v120 = v40[4];
                                v121 = 69;
                                goto LABEL_537;
                              case 'U':
                                LOBYTE(v55) = 0;
                                v56 = 0;
                                v57 = 0;
                                v58 = 0;
                                v70 = *(_DWORD *)(v40 + 1) == 1668442467;
                                v59 = 2 * v70;
                                v65 = "Û";
                                goto LABEL_549;
                              case 'Y':
                                LOBYTE(v55) = 0;
                                v56 = 0;
                                v57 = 0;
                                v58 = 0;
                                v70 = *(_DWORD *)(v40 + 1) == 1668442467;
                                v59 = 2 * v70;
                                v65 = "Ŷ";
                                goto LABEL_549;
                              case 'a':
                                v56 = 0;
                                LOBYTE(v55) = 0;
                                v122 = (char)v40[1];
                                if (v122 > 113)
                                {
                                  if (v122 == 114)
                                  {
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x6E69 | v40[4] ^ 0x67) == 0;
                                    v59 = 2 * v70;
                                    v65 = "å";
                                  }
                                  else
                                  {
                                    v57 = 0;
                                    v58 = 0;
                                    v59 = 0;
                                    v65 = 0;
                                    if (v122 != 115)
                                      goto LABEL_551;
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x6D79 | v40[4] ^ 0x70) == 0;
                                    v59 = 3;
                                    if (*((unsigned __int16 *)v40 + 1) ^ 0x6D79 | v40[4] ^ 0x70)
                                      v59 = 0;
                                    v65 = "≈";
                                  }
                                }
                                else if (v122 == 99)
                                {
                                  LOBYTE(v55) = 0;
                                  v56 = 0;
                                  v57 = 0;
                                  v58 = 0;
                                  v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x7269 | v40[4] ^ 0x63) == 0;
                                  v59 = 2 * v70;
                                  v65 = "â";
                                }
                                else
                                {
                                  v57 = 0;
                                  v58 = 0;
                                  v59 = 0;
                                  v65 = 0;
                                  if (v122 != 108)
                                    goto LABEL_551;
                                  LOBYTE(v55) = 0;
                                  v56 = 0;
                                  v57 = 0;
                                  v58 = 0;
                                  v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x6870 | v40[4] ^ 0x61) == 0;
                                  v59 = 2 * v70;
                                  v65 = "α";
                                }
                                goto LABEL_549;
                              case 'd':
                                LOBYTE(v55) = 0;
                                v56 = 0;
                                v57 = 0;
                                v58 = 0;
                                v70 = *(_DWORD *)(v40 + 1) == 1635019877;
                                v59 = 2 * v70;
                                v65 = "δ";
                                goto LABEL_549;
                              case 'e':
                                v123 = (char)v40[1];
                                switch(v123)
                                {
                                  case 'q':
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x6975 | v40[4] ^ 0x76) == 0;
                                    v59 = 3;
                                    if (*((unsigned __int16 *)v40 + 1) ^ 0x6975 | v40[4] ^ 0x76)
                                      v59 = 0;
                                    v65 = "≡";
                                    break;
                                  case 'm':
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x7470 | v40[4] ^ 0x79) == 0;
                                    v59 = 3;
                                    if (*((unsigned __int16 *)v40 + 1) ^ 0x7470 | v40[4] ^ 0x79)
                                      v59 = 0;
                                    v65 = "∅";
                                    break;
                                  case 'c':
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x7269 | v40[4] ^ 0x63) == 0;
                                    v59 = 2 * v70;
                                    v65 = "ê";
                                    break;
                                  default:
                                    goto LABEL_444;
                                }
                                goto LABEL_549;
                              case 'g':
                                LOBYTE(v55) = 0;
                                v56 = 0;
                                v57 = 0;
                                v58 = 0;
                                v70 = *(_DWORD *)(v40 + 1) == 1634561377;
                                v59 = 2 * v70;
                                v65 = "γ";
                                goto LABEL_549;
                              case 'i':
                                v124 = (char)v40[1];
                                if (v124 == 110)
                                {
                                  LOBYTE(v55) = 0;
                                  v56 = 0;
                                  v57 = 0;
                                  v58 = 0;
                                  v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x6966 | v40[4] ^ 0x6E) == 0;
                                  v59 = 3;
                                  if (*((unsigned __int16 *)v40 + 1) ^ 0x6966 | v40[4] ^ 0x6E)
                                    v59 = 0;
                                  v65 = "∞";
                                }
                                else
                                {
                                  if (v124 != 99)
                                    goto LABEL_444;
                                  LOBYTE(v55) = 0;
                                  v56 = 0;
                                  v57 = 0;
                                  v58 = 0;
                                  v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x7269 | v40[4] ^ 0x63) == 0;
                                  v59 = 2 * v70;
                                  v65 = "î";
                                }
                                goto LABEL_549;
                              case 'k':
                                LOBYTE(v55) = 0;
                                v56 = 0;
                                v57 = 0;
                                v58 = 0;
                                v70 = *(_DWORD *)(v40 + 1) == 1634758753;
                                v59 = 2 * v70;
                                v65 = "κ";
                                goto LABEL_549;
                              case 'l':
                                v125 = (char)v40[1];
                                switch(v125)
                                {
                                  case 's':
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x7571 | v40[4] ^ 0x6F) == 0;
                                    v59 = 3;
                                    if (*((unsigned __int16 *)v40 + 1) ^ 0x7571 | v40[4] ^ 0x6F)
                                      v59 = 0;
                                    v65 = "‘";
                                    break;
                                  case 'd':
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x7571 | v40[4] ^ 0x6F) == 0;
                                    v59 = 3;
                                    if (*((unsigned __int16 *)v40 + 1) ^ 0x7571 | v40[4] ^ 0x6F)
                                      v59 = 0;
                                    v65 = "“";
                                    break;
                                  case 'c':
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x6965 | v40[4] ^ 0x6C) == 0;
                                    v59 = 3;
                                    if (*((unsigned __int16 *)v40 + 1) ^ 0x6965 | v40[4] ^ 0x6C)
                                      v59 = 0;
                                    v65 = "⌈";
                                    break;
                                  default:
                                    goto LABEL_444;
                                }
                                goto LABEL_549;
                              case 'm':
                                v126 = (char)v40[1];
                                if (v126 == 105)
                                {
                                  LOBYTE(v55) = 0;
                                  v56 = 0;
                                  v57 = 0;
                                  v58 = 0;
                                  v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x756E | v40[4] ^ 0x73) == 0;
                                  v59 = 3;
                                  if (*((unsigned __int16 *)v40 + 1) ^ 0x756E | v40[4] ^ 0x73)
                                    v59 = 0;
                                  v65 = "−";
                                }
                                else
                                {
                                  if (v126 != 100)
                                    goto LABEL_444;
                                  LOBYTE(v55) = 0;
                                  v56 = 0;
                                  v57 = 0;
                                  v58 = 0;
                                  v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x7361 | v40[4] ^ 0x68) == 0;
                                  v59 = 3;
                                  if (*((unsigned __int16 *)v40 + 1) ^ 0x7361 | v40[4] ^ 0x68)
                                    v59 = 0;
                                  v65 = "—";
                                }
                                goto LABEL_549;
                              case 'n':
                                v127 = (char)v40[1];
                                switch(v127)
                                {
                                  case 'o':
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x6974 | v40[4] ^ 0x6E) == 0;
                                    v59 = 3;
                                    if (*((unsigned __int16 *)v40 + 1) ^ 0x6974 | v40[4] ^ 0x6E)
                                      v59 = 0;
                                    v65 = "∉";
                                    break;
                                  case 'd':
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x7361 | v40[4] ^ 0x68) == 0;
                                    v59 = 3;
                                    if (*((unsigned __int16 *)v40 + 1) ^ 0x7361 | v40[4] ^ 0x68)
                                      v59 = 0;
                                    v65 = "–";
                                    break;
                                  case 'a':
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x6C62 | v40[4] ^ 0x61) == 0;
                                    v59 = 3;
                                    if (*((unsigned __int16 *)v40 + 1) ^ 0x6C62 | v40[4] ^ 0x61)
                                      v59 = 0;
                                    v65 = "∇";
                                    break;
                                  default:
                                    goto LABEL_444;
                                }
                                goto LABEL_549;
                              case 'o':
                                v128 = (char)v40[1];
                                if (v128 == 109)
                                {
                                  LOBYTE(v55) = 0;
                                  v56 = 0;
                                  v57 = 0;
                                  v58 = 0;
                                  v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x6765 | v40[4] ^ 0x61) == 0;
                                  v59 = 2 * v70;
                                  v65 = "ω";
                                }
                                else
                                {
                                  if (v128 != 99)
                                    goto LABEL_444;
                                  LOBYTE(v55) = 0;
                                  v56 = 0;
                                  v57 = 0;
                                  v58 = 0;
                                  v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x7269 | v40[4] ^ 0x63) == 0;
                                  v59 = 2 * v70;
                                  v65 = "ô";
                                }
                                goto LABEL_549;
                              case 'p':
                                LOBYTE(v55) = 0;
                                v56 = 0;
                                v57 = 0;
                                v58 = 0;
                                v70 = *(_DWORD *)(v40 + 1) == 1701669234;
                                v59 = 3;
                                if (*(_DWORD *)(v40 + 1) != 1701669234)
                                  v59 = 0;
                                v65 = "′";
                                goto LABEL_549;
                              case 'r':
                                v56 = 0;
                                LOBYTE(v55) = 0;
                                v129 = (char)v40[1];
                                if (v129 > 99)
                                {
                                  if (v129 == 100)
                                  {
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x7571 | v40[4] ^ 0x6F) == 0;
                                    v59 = 3;
                                    if (*((unsigned __int16 *)v40 + 1) ^ 0x7571 | v40[4] ^ 0x6F)
                                      v59 = 0;
                                    v65 = "”";
                                  }
                                  else
                                  {
                                    v57 = 0;
                                    v58 = 0;
                                    v59 = 0;
                                    v65 = 0;
                                    if (v129 != 115)
                                      goto LABEL_551;
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x7571 | v40[4] ^ 0x6F) == 0;
                                    v59 = 3;
                                    if (*((unsigned __int16 *)v40 + 1) ^ 0x7571 | v40[4] ^ 0x6F)
                                      v59 = 0;
                                    v65 = "’";
                                  }
                                }
                                else if (v129 == 97)
                                {
                                  LOBYTE(v55) = 0;
                                  v56 = 0;
                                  v57 = 0;
                                  v58 = 0;
                                  v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x6964 | v40[4] ^ 0x63) == 0;
                                  v59 = 3;
                                  if (*((unsigned __int16 *)v40 + 1) ^ 0x6964 | v40[4] ^ 0x63)
                                    v59 = 0;
                                  v65 = "√";
                                }
                                else
                                {
                                  v57 = 0;
                                  v58 = 0;
                                  v59 = 0;
                                  v65 = 0;
                                  if (v129 != 99)
                                    goto LABEL_551;
                                  LOBYTE(v55) = 0;
                                  v56 = 0;
                                  v57 = 0;
                                  v58 = 0;
                                  v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x6965 | v40[4] ^ 0x6C) == 0;
                                  v59 = 3;
                                  if (*((unsigned __int16 *)v40 + 1) ^ 0x6965 | v40[4] ^ 0x6C)
                                    v59 = 0;
                                  v65 = "⌉";
                                }
                                goto LABEL_549;
                              case 's':
                                v130 = (char)v40[1];
                                if (v130 == 122)
                                {
                                  LOBYTE(v55) = 0;
                                  v56 = 0;
                                  v57 = 0;
                                  v58 = 0;
                                  v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x696C | v40[4] ^ 0x67) == 0;
                                  v59 = 2 * v70;
                                  v65 = "ß";
                                }
                                else
                                {
                                  if (v130 != 105)
                                    goto LABEL_444;
                                  LOBYTE(v55) = 0;
                                  v56 = 0;
                                  v57 = 0;
                                  v58 = 0;
                                  v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x6D67 | v40[4] ^ 0x61) == 0;
                                  v59 = 2 * v70;
                                  v65 = "σ";
                                }
                                goto LABEL_549;
                              case 't':
                                v131 = (char)v40[1];
                                switch(v131)
                                {
                                  case 'r':
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v119 = *((unsigned __int16 *)v40 + 1) ^ 0x6461;
                                    v120 = v40[4];
                                    v121 = 101;
LABEL_537:
                                    v70 = (v119 | v120 ^ v121) == 0;
                                    v59 = 3;
                                    if (!v70)
                                      v59 = 0;
                                    v65 = "™";
                                    break;
                                  case 'i':
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x656D | v40[4] ^ 0x73) == 0;
                                    v59 = 2 * v70;
                                    v65 = "×";
                                    break;
                                  case 'h':
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = (*((unsigned __int16 *)v40 + 1) ^ 0x7465 | v40[4] ^ 0x61) == 0;
                                    v59 = 2 * v70;
                                    v65 = "θ";
                                    break;
                                  default:
                                    goto LABEL_444;
                                }
                                break;
                              case 'u':
                                LOBYTE(v55) = 0;
                                v56 = 0;
                                v57 = 0;
                                v58 = 0;
                                v70 = *(_DWORD *)(v40 + 1) == 1668442467;
                                v59 = 2 * v70;
                                v65 = "û";
                                goto LABEL_549;
                              case 'y':
                                LOBYTE(v55) = 0;
                                v56 = 0;
                                v57 = 0;
                                v58 = 0;
                                v70 = *(_DWORD *)(v40 + 1) == 1668442467;
                                v59 = 2 * v70;
                                v65 = "ŷ";
                                goto LABEL_549;
                              default:
                                goto LABEL_448;
                            }
                            goto LABEL_549;
                          case 6:
                            v56 = 0;
                            LOBYTE(v55) = 0;
                            v71 = (char)*v40;
                            if (v71 <= 96)
                            {
                              v57 = 0;
                              v58 = 0;
                              v59 = 0;
                              v65 = 0;
                              switch(*v40)
                              {
                                case 'A':
                                  v76 = (char)v40[1];
                                  switch(v76)
                                  {
                                    case 't':
                                      LOBYTE(v55) = 0;
                                      v56 = 0;
                                      v57 = 0;
                                      v58 = 0;
                                      v70 = *(_DWORD *)(v40 + 2) == 1701080169;
                                      v59 = 2 * v70;
                                      v65 = "Ã";
                                      break;
                                    case 'g':
                                      LOBYTE(v55) = 0;
                                      v56 = 0;
                                      v57 = 0;
                                      v58 = 0;
                                      v70 = *(_DWORD *)(v40 + 2) == 1702257010;
                                      v59 = 2 * v70;
                                      v65 = "À";
                                      break;
                                    case 'a':
                                      LOBYTE(v55) = 0;
                                      v56 = 0;
                                      v57 = 0;
                                      v58 = 0;
                                      v70 = *(_DWORD *)(v40 + 2) == 1702131043;
                                      v59 = 2 * v70;
                                      v65 = "Á";
                                      break;
                                    default:
                                      goto LABEL_444;
                                  }
                                  goto LABEL_549;
                                case 'B':
                                case 'D':
                                case 'F':
                                case 'G':
                                case 'H':
                                case 'J':
                                case 'K':
                                case 'M':
                                  goto LABEL_551;
                                case 'C':
                                  LOBYTE(v55) = 0;
                                  v56 = 0;
                                  v57 = 0;
                                  v58 = 0;
                                  v70 = (*(_DWORD *)(v40 + 1) ^ 0x69646563 | v40[5] ^ 0x6C) == 0;
                                  v59 = 2 * v70;
                                  v65 = "Ç";
                                  goto LABEL_549;
                                case 'E':
                                  v100 = (char)v40[1];
                                  if (v100 == 103)
                                  {
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = *(_DWORD *)(v40 + 2) == 1702257010;
                                    v59 = 2 * v70;
                                    v65 = "È";
                                  }
                                  else
                                  {
                                    if (v100 != 97)
                                      goto LABEL_444;
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = *(_DWORD *)(v40 + 2) == 1702131043;
                                    v59 = 2 * v70;
                                    v65 = "É";
                                  }
                                  goto LABEL_549;
                                case 'I':
                                  v101 = (char)v40[1];
                                  if (v101 == 103)
                                  {
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = *(_DWORD *)(v40 + 2) == 1702257010;
                                    v59 = 2 * v70;
                                    v65 = "Ì";
                                  }
                                  else
                                  {
                                    if (v101 != 97)
                                      goto LABEL_444;
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = *(_DWORD *)(v40 + 2) == 1702131043;
                                    v59 = 2 * v70;
                                    v65 = "Í";
                                  }
                                  goto LABEL_549;
                                case 'L':
                                  LOBYTE(v55) = 0;
                                  v56 = 0;
                                  v57 = 0;
                                  v58 = 0;
                                  v70 = (*(_DWORD *)(v40 + 1) ^ 0x64626D61 | v40[5] ^ 0x61) == 0;
                                  v59 = 2 * v70;
                                  v65 = "Λ";
                                  goto LABEL_549;
                                case 'N':
                                  LOBYTE(v55) = 0;
                                  v56 = 0;
                                  v57 = 0;
                                  v58 = 0;
                                  v70 = (*(_DWORD *)(v40 + 1) ^ 0x646C6974 | v40[5] ^ 0x65) == 0;
                                  v59 = 2 * v70;
                                  v65 = "Ñ";
                                  goto LABEL_549;
                                case 'O':
                                  v102 = (char)v40[1];
                                  switch(v102)
                                  {
                                    case 't':
                                      LOBYTE(v55) = 0;
                                      v56 = 0;
                                      v57 = 0;
                                      v58 = 0;
                                      v70 = *(_DWORD *)(v40 + 2) == 1701080169;
                                      v59 = 2 * v70;
                                      v65 = "Õ";
                                      break;
                                    case 'g':
                                      LOBYTE(v55) = 0;
                                      v56 = 0;
                                      v57 = 0;
                                      v58 = 0;
                                      v70 = *(_DWORD *)(v40 + 2) == 1702257010;
                                      v59 = 2 * v70;
                                      v65 = "Ò";
                                      break;
                                    case 'a':
                                      LOBYTE(v55) = 0;
                                      v56 = 0;
                                      v57 = 0;
                                      v58 = 0;
                                      v70 = *(_DWORD *)(v40 + 2) == 1702131043;
                                      v59 = 2 * v70;
                                      v65 = "Ó";
                                      break;
                                    default:
                                      goto LABEL_444;
                                  }
                                  goto LABEL_549;
                                default:
                                  if (v71 == 85)
                                  {
                                    v116 = (char)v40[1];
                                    if (v116 == 103)
                                    {
                                      LOBYTE(v55) = 0;
                                      v56 = 0;
                                      v57 = 0;
                                      v58 = 0;
                                      v70 = *(_DWORD *)(v40 + 2) == 1702257010;
                                      v59 = 2 * v70;
                                      v65 = "Ù";
                                    }
                                    else
                                    {
                                      if (v116 != 97)
                                        goto LABEL_444;
                                      LOBYTE(v55) = 0;
                                      v56 = 0;
                                      v57 = 0;
                                      v58 = 0;
                                      v70 = *(_DWORD *)(v40 + 2) == 1702131043;
                                      v59 = 2 * v70;
                                      v65 = "Ú";
                                    }
                                  }
                                  else
                                  {
                                    v57 = 0;
                                    v58 = 0;
                                    v59 = 0;
                                    v65 = 0;
                                    if (v71 != 89)
                                      goto LABEL_551;
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = (*(_DWORD *)(v40 + 1) ^ 0x74756361 | v40[5] ^ 0x65) == 0;
                                    v59 = 2 * v70;
                                    v65 = "Ý";
                                  }
                                  break;
                              }
                            }
                            else
                            {
                              v57 = 0;
                              v58 = 0;
                              v59 = 0;
                              v65 = 0;
                              switch(*v40)
                              {
                                case 'a':
                                  v72 = (char)v40[1];
                                  switch(v72)
                                  {
                                    case 't':
                                      LOBYTE(v55) = 0;
                                      v56 = 0;
                                      v57 = 0;
                                      v58 = 0;
                                      v70 = *(_DWORD *)(v40 + 2) == 1701080169;
                                      v59 = 2 * v70;
                                      v65 = "ã";
                                      break;
                                    case 'g':
                                      LOBYTE(v55) = 0;
                                      v56 = 0;
                                      v57 = 0;
                                      v58 = 0;
                                      v70 = *(_DWORD *)(v40 + 2) == 1702257010;
                                      v59 = 2 * v70;
                                      v65 = "à";
                                      break;
                                    case 'a':
                                      LOBYTE(v55) = 0;
                                      v56 = 0;
                                      v57 = 0;
                                      v58 = 0;
                                      v70 = *(_DWORD *)(v40 + 2) == 1702131043;
                                      v59 = 2 * v70;
                                      v65 = "á";
                                      break;
                                    default:
                                      goto LABEL_444;
                                  }
                                  goto LABEL_549;
                                case 'b':
                                case 'd':
                                case 'f':
                                case 'g':
                                case 'h':
                                case 'j':
                                case 'k':
                                case 'm':
                                case 'q':
                                case 't':
                                case 'v':
                                case 'w':
                                case 'x':
                                  goto LABEL_551;
                                case 'c':
                                  LOBYTE(v55) = 0;
                                  v56 = 0;
                                  v57 = 0;
                                  v58 = 0;
                                  v70 = (*(_DWORD *)(v40 + 1) ^ 0x69646563 | v40[5] ^ 0x6C) == 0;
                                  v59 = 2 * v70;
                                  v65 = "ç";
                                  goto LABEL_549;
                                case 'e':
                                  v103 = (char)v40[1];
                                  if (v103 == 103)
                                  {
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = *(_DWORD *)(v40 + 2) == 1702257010;
                                    v59 = 2 * v70;
                                    v65 = "è";
                                  }
                                  else
                                  {
                                    if (v103 != 97)
                                      goto LABEL_444;
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = *(_DWORD *)(v40 + 2) == 1702131043;
                                    v59 = 2 * v70;
                                    v65 = "é";
                                  }
                                  goto LABEL_549;
                                case 'i':
                                  v104 = (char)v40[1];
                                  if (v104 == 103)
                                  {
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = *(_DWORD *)(v40 + 2) == 1702257010;
                                    v59 = 2 * v70;
                                    v65 = "ì";
                                  }
                                  else
                                  {
                                    if (v104 != 97)
                                      goto LABEL_444;
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = *(_DWORD *)(v40 + 2) == 1702131043;
                                    v59 = 2 * v70;
                                    v65 = "í";
                                  }
                                  goto LABEL_549;
                                case 'l':
                                  v105 = (char)v40[1];
                                  if (v105 == 102)
                                  {
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = *(_DWORD *)(v40 + 2) == 1919905644;
                                    v59 = 3;
                                    if (*(_DWORD *)(v40 + 2) != 1919905644)
                                      v59 = 0;
                                    v65 = "⌊";
                                  }
                                  else
                                  {
                                    if (v105 != 97)
                                      goto LABEL_444;
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = *(_DWORD *)(v40 + 2) == 1633968749;
                                    v59 = 2 * v70;
                                    v65 = "λ";
                                  }
                                  goto LABEL_549;
                                case 'n':
                                  LOBYTE(v55) = 0;
                                  v56 = 0;
                                  v57 = 0;
                                  v58 = 0;
                                  v70 = (*(_DWORD *)(v40 + 1) ^ 0x646C6974 | v40[5] ^ 0x65) == 0;
                                  v59 = 2 * v70;
                                  v65 = "ñ";
                                  goto LABEL_549;
                                case 'o':
                                  v106 = (char)v40[1];
                                  switch(v106)
                                  {
                                    case 't':
                                      LOBYTE(v55) = 0;
                                      v56 = 0;
                                      v57 = 0;
                                      v58 = 0;
                                      v70 = *(_DWORD *)(v40 + 2) == 1701080169;
                                      v59 = 2 * v70;
                                      v65 = "õ";
                                      break;
                                    case 'g':
                                      LOBYTE(v55) = 0;
                                      v56 = 0;
                                      v57 = 0;
                                      v58 = 0;
                                      v70 = *(_DWORD *)(v40 + 2) == 1702257010;
                                      v59 = 2 * v70;
                                      v65 = "ò";
                                      break;
                                    case 'a':
                                      LOBYTE(v55) = 0;
                                      v56 = 0;
                                      v57 = 0;
                                      v58 = 0;
                                      v70 = *(_DWORD *)(v40 + 2) == 1702131043;
                                      v59 = 2 * v70;
                                      v65 = "ó";
                                      break;
                                    default:
                                      goto LABEL_444;
                                  }
                                  goto LABEL_549;
                                case 'p':
                                  LOBYTE(v55) = 0;
                                  v56 = 0;
                                  v57 = 0;
                                  v58 = 0;
                                  v70 = (*(_DWORD *)(v40 + 1) ^ 0x6D73756C | v40[5] ^ 0x6E) == 0;
                                  v59 = 2 * v70;
                                  v65 = "±";
                                  goto LABEL_549;
                                case 'r':
                                  LOBYTE(v55) = 0;
                                  v56 = 0;
                                  v57 = 0;
                                  v58 = 0;
                                  v70 = (*(_DWORD *)(v40 + 1) ^ 0x6F6F6C66 | v40[5] ^ 0x72) == 0;
                                  v59 = 3;
                                  if (*(_DWORD *)(v40 + 1) ^ 0x6F6F6C66 | v40[5] ^ 0x72)
                                    v59 = 0;
                                  v65 = "⌋";
                                  goto LABEL_549;
                                case 's':
                                  LOBYTE(v55) = 0;
                                  v56 = 0;
                                  v57 = 0;
                                  v58 = 0;
                                  v70 = (*(_DWORD *)(v40 + 1) ^ 0x616D6769 | v40[5] ^ 0x66) == 0;
                                  v59 = 2 * v70;
                                  v65 = "ς";
                                  goto LABEL_549;
                                case 'u':
                                  v107 = (char)v40[1];
                                  if (v107 == 103)
                                  {
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = *(_DWORD *)(v40 + 2) == 1702257010;
                                    v59 = 2 * v70;
                                    v65 = "ù";
                                  }
                                  else
                                  {
                                    if (v107 != 97)
                                      goto LABEL_444;
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = *(_DWORD *)(v40 + 2) == 1702131043;
                                    v59 = 2 * v70;
                                    v65 = "ú";
                                  }
                                  goto LABEL_549;
                                case 'y':
                                  v108 = (char)v40[1];
                                  if (v108 == 103)
                                  {
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = *(_DWORD *)(v40 + 2) == 1702257010;
                                    v59 = 3;
                                    if (*(_DWORD *)(v40 + 2) != 1702257010)
                                      v59 = 0;
                                    v65 = "ỳ";
                                  }
                                  else
                                  {
                                    if (v108 != 97)
                                      goto LABEL_444;
                                    LOBYTE(v55) = 0;
                                    v56 = 0;
                                    v57 = 0;
                                    v58 = 0;
                                    v70 = *(_DWORD *)(v40 + 2) == 1702131043;
                                    v59 = 2 * v70;
                                    v65 = "ý";
                                  }
                                  break;
                                default:
LABEL_448:
                                  v57 = 0;
                                  v58 = 0;
                                  v59 = 0;
                                  v65 = 0;
                                  goto LABEL_551;
                              }
                            }
                            goto LABEL_549;
                          case 7:
                            v73 = (char)*v40;
                            switch(v73)
                            {
                              case 'u':
                                LOBYTE(v55) = 0;
                                v56 = 0;
                                v57 = 0;
                                v58 = 0;
                                v70 = (*(_DWORD *)(v40 + 1) ^ 0x6C697370 | *(unsigned __int16 *)(v40 + 5) ^ 0x6E6F) == 0;
                                v59 = 2 * v70;
                                v65 = "υ";
                                break;
                              case 'e':
                                LOBYTE(v55) = 0;
                                v56 = 0;
                                v57 = 0;
                                v58 = 0;
                                v70 = (*(_DWORD *)(v40 + 1) ^ 0x6C697370 | *(unsigned __int16 *)(v40 + 5) ^ 0x6E6F) == 0;
                                v59 = 2 * v70;
                                v65 = "ε";
                                break;
                              case 'U':
                                LOBYTE(v55) = 0;
                                v56 = 0;
                                v57 = 0;
                                v58 = 0;
                                v70 = (*(_DWORD *)(v40 + 1) ^ 0x6C697370 | *(unsigned __int16 *)(v40 + 5) ^ 0x6E6F) == 0;
                                v59 = 2 * v70;
                                v65 = "Υ";
                                break;
                              default:
LABEL_444:
                                LOBYTE(v55) = 0;
                                v56 = 0;
                                v57 = 0;
                                v58 = 0;
LABEL_445:
                                v59 = 0;
                                v65 = 0;
LABEL_551:
                                v137 = v55 | (v56 << 8);
                                if (v58)
                                  v74 = v137;
                                else
                                  v74 = (uint64_t)v65;
                                if (v58)
                                  v49 = v57;
                                else
                                  v49 = v59;
                                goto LABEL_557;
                            }
LABEL_549:
                            if (!v70)
                              v65 = 0;
                            goto LABEL_551;
                          default:
                            goto LABEL_444;
                        }
                      }
                      if (v50)
                        v74 = sub_22F3A8294((uint64_t *)a1, (char *)v40, v53);
                      else
                        v74 = sub_22F3A8310((uint64_t *)a1, v40, v53);
                      v49 = v75;
LABEL_557:
                      if (v49)
                      {
                        v138 = *(_DWORD *)(a1 + 40);
                        *a2 = *(_DWORD *)(a1 + 56) + v138 - *(_DWORD *)(a1 + 24);
                        a2[1] = 2;
                        a2[3] = (_DWORD)v54 - v138;
                        *(_QWORD *)(a1 + 40) = v54;
                        *((_QWORD *)a2 + 2) = v74;
                        goto LABEL_154;
                      }
                      v5 = *(unsigned __int8 **)(a1 + 40);
                      LODWORD(v49) = (_DWORD)v54 - (_DWORD)v5;
                      *a2 = *(_DWORD *)(a1 + 56) + (_DWORD)v5 - *(_DWORD *)(a1 + 24);
                      a2[1] = 2;
                      a2[3] = (_DWORD)v54 - (_DWORD)v5;
                      *(_QWORD *)(a1 + 40) = v54;
LABEL_153:
                      *((_QWORD *)a2 + 2) = v5;
LABEL_154:
                      a2[2] = v49;
                      return;
                    }
                    v6 = (char *)v43;
                    goto LABEL_151;
                  }
                  if ((_DWORD)v41 == 35)
                  {
                    v40 = v5 + 2;
                    if (v5 + 2 == (unsigned __int8 *)v6)
                    {
                      LODWORD(v49) = 2;
                      *a2 = *(_DWORD *)(a1 + 56) + (_DWORD)v5 - *(_DWORD *)(a1 + 24);
                      a2[1] = 2;
                      goto LABEL_152;
                    }
                    if ((word_22F4ADB24[*v40] & 8) != 0)
                    {
                      v43 = v5 + 2;
                      while (1)
                      {
                        v44 = *v43;
                        if ((word_22F4ADB24[*v43] & 8) == 0)
                          break;
                        if (++v43 == (unsigned __int8 *)v6)
                          goto LABEL_151;
                      }
                      v50 = 1;
                      goto LABEL_142;
                    }
                    if ((*v40 & 0xDF) == 0x58)
                    {
                      v40 = v5 + 3;
                      if (v5 + 3 == (unsigned __int8 *)v6)
                      {
LABEL_151:
                        LODWORD(v49) = (_DWORD)v6 - (_DWORD)v5;
                        *a2 = *(_DWORD *)(a1 + 56) + (_DWORD)v5 - *(_DWORD *)(a1 + 24);
                        a2[1] = 2;
                        goto LABEL_152;
                      }
                      v43 = v5 + 3;
                      while (1)
                      {
                        v44 = *v43;
                        if ((word_22F4ADB24[*v43] & 0x18) == 0)
                          goto LABEL_141;
                        if (++v43 == (unsigned __int8 *)v6)
                          goto LABEL_151;
                      }
                    }
                    LODWORD(v49) = 2;
                    *a2 = *(_DWORD *)(a1 + 56) + (_DWORD)v5 - *(_DWORD *)(a1 + 24);
                    a2[1] = 2;
                  }
                  else
                  {
                    *a2 = *(_DWORD *)(a1 + 56) + (_DWORD)v5 - *(_DWORD *)(a1 + 24);
                    a2[1] = 2;
                    LODWORD(v49) = 1;
                  }
                  a2[3] = v49;
                  *(_QWORD *)(a1 + 40) = v40;
                  goto LABEL_153;
                }
LABEL_127:
                v47 = sub_22F3A8390(a1);
                v48 = *(_QWORD *)(a1 + 40);
                *a2 = *(_DWORD *)(a1 + 56) + v48 - *(_DWORD *)(a1 + 24);
                a2[1] = 2;
                a2[3] = v47 - v48;
                *(_QWORD *)(a1 + 40) = v47;
                *((_QWORD *)a2 + 2) = v48;
                a2[2] = v47 - v48;
                return;
              }
              v27 = v5 + 1;
              if (v30 != 10)
              {
                v27 = *(unsigned __int8 **)(a1 + 48);
                if (v5 + 1 != (unsigned __int8 *)v6)
                {
                  if (v5[1] == 10)
                    v27 = v5 + 2;
                  else
                    v27 = v5 + 1;
                }
              }
              *a2 = *(_DWORD *)(a1 + 56) + (_DWORD)v5 - *(_DWORD *)(a1 + 24);
              a2[1] = 1;
              a2[3] = (_DWORD)v27 - (_DWORD)v5;
              *(_QWORD *)(a1 + 40) = v27;
              if (v4 != 2 || v27 == (unsigned __int8 *)v6)
                return;
              while (1)
              {
                v28 = *v27;
                if ((word_22F4ADB24[v28] & 5) == 0)
                  break;
                if (++v27 == (unsigned __int8 *)v6)
                  return;
              }
LABEL_96:
              if ((_DWORD)v28 == 42)
                *(_QWORD *)(a1 + 40) = v27 + 1;
              return;
            }
            if (v29 == 60)
            {
              v45 = v5 + 1;
              if (v5 + 1 != (unsigned __int8 *)v6)
              {
                v46 = *v45;
                if ((word_22F4ADB24[v46] & 0x60) != 0)
                {
                  sub_22F3A894C(a1, (uint64_t)a2);
                  return;
                }
                if ((_DWORD)v46 == 47)
                {
                  sub_22F3A8A84(a1, (uint64_t)a2);
                  return;
                }
                *a2 = *(_DWORD *)(a1 + 56) + (_DWORD)v5 - *(_DWORD *)(a1 + 24);
                a2[3] = 1;
                *(_QWORD *)(a1 + 40) = v45;
LABEL_126:
                *((_QWORD *)a2 + 2) = v5;
                *(_QWORD *)(a2 + 1) = 0x100000002;
                return;
              }
            }
            else
            {
              if (v29 != 92 && v29 != 64)
                goto LABEL_127;
              if (v30 == 64)
                v32 = 5;
              else
                v32 = 4;
              v33 = v5 + 1;
              if (v5 + 1 != (unsigned __int8 *)v6)
              {
                v34 = *v33;
                v35 = (char)*v33 - 34;
                v36 = v35 > 0x3A;
                v37 = (1 << v35) & 0x40000005500101FLL;
                if (!v36 && v37 != 0)
                {
                  v39 = (char *)(v5 + 2);
                  if ((_DWORD)v34 == 58 && v39 != v6 && v5[2] == 58)
                    v39 = (char *)(v5 + 3);
                  *a2 = *(_DWORD *)(a1 + 56) + (_DWORD)v5 - *(_DWORD *)(a1 + 24);
                  a2[1] = 2;
                  a2[3] = (_DWORD)v39 - (_DWORD)v5;
                  *(_QWORD *)(a1 + 40) = v39;
                  *((_QWORD *)a2 + 2) = v33;
                  a2[2] = (_DWORD)v39 - (_DWORD)v33;
                  return;
                }
                if ((word_22F4ADB24[v34] & 0x60) == 0)
                {
                  *a2 = *(_DWORD *)(a1 + 56) + (_DWORD)v5 - *(_DWORD *)(a1 + 24);
                  a2[3] = 1;
                  *(_QWORD *)(a1 + 40) = v33;
                  goto LABEL_126;
                }
                __src = (char *)(v5 + 1);
                while ((word_22F4ADB24[*v33] & 0x68) != 0)
                {
                  if (++v33 == (unsigned __int8 *)v6)
                  {
                    v33 = *(unsigned __int8 **)(a1 + 48);
                    break;
                  }
                }
                v77 = (_DWORD)v33 - (_DWORD)__src;
                if ((_DWORD)v33 - (_DWORD)__src == 1)
                {
                  v77 = 1;
                  if (v33 != (unsigned __int8 *)v6 && *(v33 - 1) == 102)
                  {
                    v78 = *v33;
                    if ((v78 - 36) <= 0x39
                      && ((1 << (v78 - 36)) & 0x280000000000031) != 0
                      || v78 == 125
                      || v78 == 123)
                    {
                      ++v33;
                      v77 = 2;
                    }
                    else
                    {
                      v77 = 1;
                    }
                  }
                }
                v79 = v77;
                v80 = *(_QWORD *)(a1 + 16);
                v81 = sub_22F3A7F5C(v80, __src, v77);
                if (v81)
                {
LABEL_218:
                  v82 = (unint64_t)v81[2];
                  if ((v82 & 0x400000000) != 0)
                  {
                    sub_22F3A8824(a1, a2, v33, **(char **)(a1 + 40), (uint64_t)v81);
                  }
                  else
                  {
                    v83 = *(_DWORD *)(a1 + 40);
                    v84 = (_DWORD)v33 - v83;
                    *a2 = *(_DWORD *)(a1 + 56) + v83 - *(_DWORD *)(a1 + 24);
                    if ((v82 & 0x1000000000) != 0)
                    {
                      a2[1] = 9;
                      a2[3] = v84;
                      *(_QWORD *)(a1 + 40) = v33;
                      a2[2] = (_DWORD)v81[2] & 0xFFFFF;
                      *(_BYTE *)(a1 + 62) = 3;
                    }
                    else
                    {
                      a2[1] = v32;
                      a2[3] = v84;
                      *(_QWORD *)(a1 + 40) = v33;
                      a2[2] = (_DWORD)v81[2] & 0xFFFFF;
                    }
                  }
                  return;
                }
                v132 = (char **)sub_22F3A8094(v80, (uint64_t)__src, v77);
                if (!v132)
                {
                  v134 = *(_DWORD *)(a1 + 40);
                  v135 = *(_DWORD *)(a1 + 56) + v134 - *(_DWORD *)(a1 + 24);
                  *a2 = v135;
                  a2[1] = 3;
                  a2[3] = (_DWORD)v33 - v134;
                  *(_QWORD *)(a1 + 40) = v33;
                  *((_QWORD *)a2 + 2) = __src;
                  a2[2] = v77;
                  v136 = *(_QWORD *)(a1 + 8);
                  *(_DWORD *)(v136 + 312) = v135;
                  *(_DWORD *)(v136 + 316) = 2407;
                  if (*(char *)(v136 + 311) < 0)
                  {
                    **(_BYTE **)(v136 + 288) = 0;
                    *(_QWORD *)(v136 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v136 + 288) = 0;
                    *(_BYTE *)(v136 + 311) = 0;
                  }
                  v159 = v136 + 320;
                  *(_QWORD *)&v160 = 0;
                  *((_QWORD *)&v160 + 1) = v136;
                  LOWORD(__p) = 1;
                  *(_BYTE *)(v136 + 320) = 0;
                  *(_DWORD *)(v136 + 664) = 0;
                  v150 = *(unsigned int *)(v136 + 776);
                  if ((_DWORD)v150)
                  {
                    v151 = *(_QWORD *)(v136 + 768);
                    v152 = 56 * v150;
                    do
                    {
                      if (*(char *)(v151 + v152 - 9) < 0)
                        operator delete(*(void **)(v151 + v152 - 32));
                      v152 -= 56;
                    }
                    while (v152);
                  }
                  *(_DWORD *)(v136 + 776) = 0;
                  v153 = a2[3];
                  if (v153 >= 2)
                    v154 = v153 - 1;
                  else
                    v154 = 0;
                  sub_22E4D6448(v136 + 656, *a2 | ((unint64_t)(v154 + *a2) << 32), 1);
                  sub_22E3BB0B8((uint64_t)&v159);
                  return;
                }
                v81 = v132;
                __s = *v132;
                if (*v132)
                  v157 = strlen(__s);
                else
                  v157 = 0;
                v139 = *(_DWORD *)(a1 + 24);
                v140 = *(_DWORD *)(a1 + 56);
                v141 = v140 + *(_DWORD *)(a1 + 40) - v139;
                v142 = (_DWORD)v33 - v139;
                v143 = *(_QWORD *)(a1 + 8);
                *(_DWORD *)(v143 + 312) = v141;
                *(_DWORD *)(v143 + 316) = 2383;
                if (*(char *)(v143 + 311) < 0)
                {
                  **(_BYTE **)(v143 + 288) = 0;
                  *(_QWORD *)(v143 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v143 + 288) = 0;
                  *(_BYTE *)(v143 + 311) = 0;
                }
                v155 = (v140 + v142);
                v164[0] = (unsigned __int8 *)(v143 + 320);
                v164[1] = 0;
                v164[2] = (unsigned __int8 *)v143;
                v165 = 1;
                *(_BYTE *)(v143 + 320) = 0;
                *(_DWORD *)(v143 + 664) = 0;
                v144 = *(unsigned int *)(v143 + 776);
                if ((_DWORD)v144)
                {
                  v145 = *(_QWORD *)(v143 + 768);
                  v146 = 56 * v144;
                  do
                  {
                    if (*(char *)(v145 + v146 - 9) < 0)
                      operator delete(*(void **)(v145 + v146 - 32));
                    v146 -= 56;
                  }
                  while (v146);
                }
                *(_DWORD *)(v143 + 776) = 0;
                sub_22E4D6448(v143 + 656, v141 | ((unint64_t)v155 << 32), 1);
                sub_22E3B89A8(v164, __src, v79);
                sub_22E3B89A8(v164, __s, v157);
                BYTE12(v160) = 0;
                *(_QWORD *)((char *)&v160 + 4) = 0;
                v163 = 0;
                v159 = (v141 + 1) | (unint64_t)(v155 << 32);
                LOBYTE(v160) = 1;
                if (v157 >= 0x7FFFFFFFFFFFFFF8)
                  abort();
                if (v157 >= 0x17)
                {
                  v148 = (v157 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v157 | 7) != 0x17)
                    v148 = v157 | 7;
                  v149 = v148 + 1;
                  p_dst = (__int128 *)operator new(v148 + 1);
                  *((_QWORD *)&__dst + 1) = v157;
                  v167 = v149 | 0x8000000000000000;
                  *(_QWORD *)&__dst = p_dst;
                }
                else
                {
                  HIBYTE(v167) = v157;
                  p_dst = &__dst;
                  if (!v157)
                    goto LABEL_577;
                }
                memmove(p_dst, __s, v157);
LABEL_577:
                *((_BYTE *)p_dst + v157) = 0;
                __p = __dst;
                v162 = v167;
                sub_22E6D82D0((uint64_t *)v164, &v159);
                if (SHIBYTE(v162) < 0)
                  operator delete((void *)__p);
                sub_22E3BB0B8((uint64_t)v164);
                goto LABEL_218;
              }
            }
            *a2 = *(_DWORD *)(a1 + 56) + (_DWORD)v5 - *(_DWORD *)(a1 + 24);
            a2[3] = 1;
            *(_QWORD *)(a1 + 40) = v6;
            goto LABEL_126;
        }
      }
      if (v4 == 2)
      {
        *a2 = *(_DWORD *)(a1 + 56) + (_DWORD)v5 + 2 - *(_DWORD *)(a1 + 24);
        a2[1] = 1;
        a2[3] = 0;
        *(_QWORD *)(a1 + 40) = v5 + 2;
        *(_BYTE *)(a1 + 61) = 3;
        return;
      }
      v4 = 3;
      *(_BYTE *)(a1 + 61) = 3;
    }
    if (v4)
      break;
    v7 = *(unsigned __int8 **)(a1 + 32);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (v8 == v7)
    {
      *(_QWORD *)a2 = (*(_DWORD *)(a1 + 56) + (_DWORD)v8 - *(_DWORD *)(a1 + 24));
      a2[3] = 0;
      return;
    }
    *(_QWORD *)(a1 + 40) = v8 + 1;
    v9 = v8[1];
    v10 = v8 + 2;
    *(_QWORD *)(a1 + 40) = v8 + 2;
    if (v9 == 47)
    {
      v11 = v7;
      if (v10 != v7)
      {
        v12 = *v10;
        if (v12 == 47 || v12 == 33)
        {
          v10 = v8 + 3;
          *(_QWORD *)(a1 + 40) = v8 + 3;
        }
        v11 = v7;
        if (v10 != v7)
        {
          if (*v10 == 60)
          {
            v11 = v10 + 1;
            *(_QWORD *)(a1 + 40) = v10 + 1;
          }
          else
          {
            v11 = v10;
          }
        }
      }
      *(_BYTE *)(a1 + 61) = 1;
      if (*(unsigned __int8 *)(a1 + 62) - 1 >= 2)
        *(_BYTE *)(a1 + 62) = 0;
      if (v11 != v7)
      {
        v14 = v11;
        while (1)
        {
          while (1)
          {
            v15 = *v14;
            if ((word_22F4ADB24[v15] & 2) != 0)
              break;
            if (++v14 == v7)
              goto LABEL_52;
          }
          v16 = v14 - 2;
          do
          {
            v17 = v16[1];
            v18 = word_22F4ADB24[(v16--)[1]];
          }
          while ((v18 & 5) != 0);
          if (v17 != 92 && (v16 < v11 || v17 != 47 || v16[1] != 63 || *v16 != 63))
            break;
          if (v14 == v7)
            goto LABEL_52;
          v19 = v14 + 1;
          if ((_DWORD)v15 != 10)
          {
            if (v19 == v7)
              goto LABEL_52;
            v20 = v14[1];
            v21 = v14 + 2;
            if (v20 == 10)
              v19 = v21;
          }
          v14 = v19;
          if (v19 == v7)
            goto LABEL_52;
        }
        v7 = v14;
      }
LABEL_52:
      *(_QWORD *)(a1 + 48) = v7;
      v4 = 1;
    }
    else
    {
      v13 = *v10;
      if (v13 == 33 || v13 == 42 && v8[3] != 47)
      {
        v10 = v8 + 3;
        *(_QWORD *)(a1 + 40) = v8 + 3;
      }
      if (v10 != v7)
      {
        if (*v10 == 60)
        {
          v7 = v10 + 1;
          *(_QWORD *)(a1 + 40) = v10 + 1;
        }
        else
        {
          v7 = v10;
        }
      }
      *(_WORD *)(a1 + 61) = 2;
      while (*v7 != 42 || v7[1] != 47)
        ++v7;
      *(_QWORD *)(a1 + 48) = v7;
      v4 = 2;
    }
  }
  if (v4 == 3)
  {
    v23 = *(_BYTE **)(a1 + 32);
    v22 = *(_BYTE **)(a1 + 40);
    v24 = v22;
    if (v22 != v23)
    {
      while (*v24 != 47)
      {
        if (++v24 == v23)
        {
          v24 = *(_BYTE **)(a1 + 32);
          break;
        }
      }
    }
    *a2 = *(_DWORD *)(a1 + 56) + (_DWORD)v22 - *(_DWORD *)(a1 + 24);
    a2[1] = 1;
    a2[3] = (_DWORD)v24 - (_DWORD)v22;
    *(_QWORD *)(a1 + 40) = v24;
    *(_BYTE *)(a1 + 61) = 0;
  }
}

uint64_t sub_22EFAC3C8(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  _OWORD *v6;
  _BYTE *v7;
  uint64_t i;
  int v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  void *v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _BYTE v24[32];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a1 + 452);
  v3 = *(_DWORD *)(a1 + 32);
  if (v3 <= v2)
    return 0;
  v6 = (_OWORD *)(a1 + 424);
  v21 = *(_OWORD *)(a1 + 424);
  v22 = *(_OWORD *)(a1 + 440);
  v7 = *(_BYTE **)(a1 + 440);
  for (i = *v7; ; i = *v7)
  {
    v9 = word_22F4ADB24[i] & 7;
    v10 = v9 == 0;
    if (!v9)
      break;
    sub_22F3A9574(a1);
    v2 = *(_DWORD *)(a1 + 452);
    v3 = *(_DWORD *)(a1 + 32);
    v7 = *(_BYTE **)(a1 + 440);
    if (v3 <= v2)
      break;
  }
  v23 = 0;
  v12 = *(_DWORD *)(a1 + 424);
  v13 = *(_DWORD *)(a1 + 448);
  if (v10)
  {
    if (*v7 != 91)
    {
LABEL_16:
      v11 = 0;
      *v6 = v21;
      v6[1] = v22;
      return v11;
    }
    v24[0] = 91;
    v23 = 1;
    sub_22F3A9574(a1);
    v2 = *(_DWORD *)(a1 + 452);
    v3 = *(_DWORD *)(a1 + 32);
  }
  if (v3 <= v2)
    goto LABEL_16;
  v14 = v13 + (_DWORD)v7 - v12;
  while (1)
  {
    v15 = **(unsigned __int8 **)(a1 + 440);
    v16 = v23;
    if ((unint64_t)(v23 + 1) > 0x20)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v16 = v23;
    }
    v24[v16] = v15;
    ++v23;
    sub_22F3A9574(a1);
    if (v15 == 93)
      break;
    if (*(_DWORD *)(a1 + 32) <= *(_DWORD *)(a1 + 452))
      goto LABEL_16;
  }
  v18 = (void *)sub_22E3CD3D4(*(_QWORD *)a1, (v23 + 1), 0);
  v19 = v23;
  if ((unint64_t)(v23 + 1) > 0x20)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v19 = v23;
  }
  v24[v19] = 0;
  memcpy(v18, v24, (v23 + 1));
  v20 = *(_DWORD *)(a1 + 440) - (_DWORD)v7;
  *(_DWORD *)a2 = v14;
  *(_DWORD *)(a2 + 4) = 2;
  *(_QWORD *)(a2 + 16) = v18;
  *(_DWORD *)(a2 + 8) = v23;
  *(_DWORD *)(a2 + 12) = v20;
  return 1;
}

uint64_t sub_22EFAC5FC(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  _OWORD *v6;
  unsigned __int8 *v7;
  uint64_t i;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[32];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a1 + 452);
  v3 = *(_DWORD *)(a1 + 32);
  if (v3 <= v2)
    return 0;
  v6 = (_OWORD *)(a1 + 424);
  v16 = *(_OWORD *)(a1 + 424);
  v17 = *(_OWORD *)(a1 + 440);
  v7 = *(unsigned __int8 **)(a1 + 440);
  for (i = *v7; (word_22F4ADB24[i] & 7) != 0; i = *v7)
  {
    sub_22F3A9574(a1);
    v2 = *(_DWORD *)(a1 + 452);
    v3 = *(_DWORD *)(a1 + 32);
    v7 = *(unsigned __int8 **)(a1 + 440);
    if (v3 <= v2)
      break;
  }
  v18 = 0;
  if (v3 <= v2)
    goto LABEL_18;
  v10 = *(_DWORD *)(a1 + 448) + (_DWORD)v7 - *(_DWORD *)(a1 + 424);
  while (1)
  {
    v11 = **(unsigned __int8 **)(a1 + 440);
    v12 = v18;
    if ((word_22F4ADB24[v11] & 7) != 0)
      break;
    if ((unint64_t)(v18 + 1) > 0x20)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v12 = v18;
    }
    v19[v12] = v11;
    ++v18;
    sub_22F3A9574(a1);
    if (*(_DWORD *)(a1 + 32) <= *(_DWORD *)(a1 + 452))
    {
      LODWORD(v12) = v18;
      break;
    }
  }
  if ((_DWORD)v12)
  {
    v13 = (void *)sub_22E3CD3D4(*(_QWORD *)a1, (v12 + 1), 0);
    v14 = v18;
    if ((unint64_t)(v18 + 1) > 0x20)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v14 = v18;
    }
    v19[v14] = 0;
    memcpy(v13, v19, (v12 + 1));
    *(_DWORD *)a2 = v10;
    *(_DWORD *)(a2 + 4) = 2;
    *(_QWORD *)(a2 + 16) = v13;
    v9 = 1;
    *(_DWORD *)(a2 + 8) = v12;
    *(_DWORD *)(a2 + 12) = v12;
  }
  else
  {
LABEL_18:
    v9 = 0;
    *v6 = v16;
    v6[1] = v17;
  }
  return v9;
}

uint64_t sub_22EFAC804(uint64_t a1)
{
  unint64_t v2;
  int v3;
  uint64_t v4;
  char **v5;
  char **v6;
  char *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  unsigned int v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  int v60;
  uint64_t *v61;
  unsigned int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  BOOL v82;
  int v83;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  unint64_t v90;
  char *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  _OWORD *v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  int v143;
  unsigned __int8 *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  int v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  _OWORD *v163;
  uint64_t v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  int v170;
  int v171;
  uint64_t v172;
  _OWORD *v173;
  uint64_t v174;
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD v212[3];
  __int16 v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  __int16 v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD v221[2];
  uint64_t v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  _BYTE v226[64];
  void *v227[2];
  uint64_t v228;
  void *v229;
  uint64_t v230;
  _QWORD v231[55];

  v231[53] = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 48;
  v211 = a1 + 72;
  v224 = v226;
  v225 = 0x800000000;
  while (2)
  {
    v3 = *(_DWORD *)(a1 + 52);
    switch(v3)
    {
      case 1:
        v9 = *(_DWORD *)(a1 + 80);
        if (v9)
        {
          v10 = *(_QWORD *)(a1 + 72) + 24 * v9;
          v11 = *(_QWORD *)(v10 - 8);
          v12 = *(_OWORD *)(v10 - 24);
          *(_DWORD *)(a1 + 80) = v9 - 1;
          *(_OWORD *)v2 = v12;
          *(_QWORD *)(v2 + 16) = v11;
        }
        else
        {
          sub_22EFA92B0(*(_QWORD *)a1, (int *)v2);
        }
        v29 = *(_DWORD *)(a1 + 52);
        if (v29 == 2)
        {
          v30 = *(unsigned int *)(a1 + 56);
          if ((_DWORD)v30)
          {
            v31 = *(unsigned __int8 **)(a1 + 64);
            while ((word_22F4ADB24[*v31] & 7) != 0)
            {
              ++v31;
              if (!--v30)
                goto LABEL_35;
            }
          }
          else
          {
LABEL_35:
            *(_OWORD *)v227 = *(_OWORD *)v2;
            v228 = *(_QWORD *)(v2 + 16);
            v32 = *(_DWORD *)(a1 + 80);
            if (v32)
            {
              v33 = *(_QWORD *)(a1 + 72) + 24 * v32;
              v34 = *(_QWORD *)(v33 - 8);
              v35 = *(_OWORD *)(v33 - 24);
              *(_DWORD *)(a1 + 80) = v32 - 1;
              *(_OWORD *)v2 = v35;
              *(_QWORD *)(v2 + 16) = v34;
            }
            else
            {
              sub_22EFA92B0(*(_QWORD *)a1, (int *)v2);
            }
            if (*(_DWORD *)(a1 + 52) <= 1u)
            {
LABEL_209:
              v193 = *(_DWORD *)(a1 + 80);
              if (v193)
              {
                v195 = *(_QWORD *)(a1 + 72) + 24 * v193;
                v196 = *(_QWORD *)(v195 - 8);
                v197 = *(_OWORD *)(v195 - 24);
                *(_DWORD *)(a1 + 80) = v193 - 1;
                *(_OWORD *)v2 = v197;
                *(_QWORD *)(v2 + 16) = v196;
              }
              else
              {
                sub_22EFA92B0(*(_QWORD *)a1, (int *)v2);
              }
              goto LABEL_213;
            }
            v36 = sub_22E5BBF6C(v211, v2);
            v37 = *(_QWORD *)(a1 + 72) + 24 * *(unsigned int *)(a1 + 80);
            v38 = *(_OWORD *)v36;
            *(_QWORD *)(v37 + 16) = *(_QWORD *)(v36 + 16);
            *(_OWORD *)v37 = v38;
            ++*(_DWORD *)(a1 + 80);
            *(_QWORD *)(v2 + 16) = v228;
            *(_OWORD *)v2 = *(_OWORD *)v227;
          }
        }
        else if (v29 <= 1)
        {
          goto LABEL_209;
        }
        if ((_DWORD)v225)
        {
          v39 = *((_QWORD *)v224 + v225 - 1);
          *(_WORD *)(v39 + 12) |= 0x100u;
        }
        continue;
      case 2:
        v47 = *(_DWORD *)(a1 + 60);
        if (v47 >= 2)
          v48 = v47 - 1;
        else
          v48 = 0;
        v45 = sub_22F3A9F18(*(uint64_t **)(a1 + 8), *(_DWORD *)(a1 + 48), v48 + *(_DWORD *)(a1 + 48), *(_QWORD *)(a1 + 64), *(unsigned int *)(a1 + 56));
        goto LABEL_60;
      case 3:
        v43 = *(_DWORD *)(a1 + 60);
        if (v43 >= 2)
          v44 = v43 - 1;
        else
          v44 = 0;
        v45 = sub_22F3A9E34(*(uint64_t **)(a1 + 8), *(_DWORD *)(a1 + 48), v44 + *(_DWORD *)(a1 + 48), *(const void **)(a1 + 64), *(unsigned int *)(a1 + 56));
        goto LABEL_60;
      case 4:
      case 5:
        v4 = *(unsigned int *)(a1 + 56);
        v5 = &(&off_24FAC12E8)[3 * v4];
        v6 = v5;
        if (v4 >= 0xC6)
          v6 = *(char ***)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) + 8 * v4 - 1584);
        v7 = v6[2];
        if ((v7 & 0x2000000) == 0)
        {
          if (((unint64_t)v7 & 0x800000000) != 0)
          {
            v8 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)(v8 + 312) = *(_DWORD *)(a1 + 48);
            *(_DWORD *)(v8 + 316) = 2408;
            if (*(char *)(v8 + 311) < 0)
            {
              **(_BYTE **)(v8 + 288) = 0;
              *(_QWORD *)(v8 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v8 + 288) = 0;
              *(_BYTE *)(v8 + 311) = 0;
            }
            v13 = (unsigned __int8 *)(v8 + 320);
            v227[0] = (void *)(v8 + 320);
            v227[1] = 0;
            v228 = v8;
            LOWORD(v229) = 1;
            *(_BYTE *)(v8 + 320) = 0;
            *(_DWORD *)(v8 + 664) = 0;
            v14 = *(unsigned int *)(v8 + 776);
            if ((_DWORD)v14)
            {
              v15 = *(_QWORD *)(v8 + 768);
              v16 = 56 * v14;
              do
              {
                if (*(char *)(v15 + v16 - 9) < 0)
                  operator delete(*(void **)(v15 + v16 - 32));
                v16 -= 56;
              }
              while (v16);
              v13 = (unsigned __int8 *)v227[0];
              *(_DWORD *)(v8 + 776) = 0;
              v17 = *(_DWORD *)(a1 + 52);
              if (!v13)
              {
                v13 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v227[1]);
                v227[0] = v13;
              }
            }
            else
            {
              *(_DWORD *)(v8 + 776) = 0;
              v17 = *(_DWORD *)(a1 + 52);
            }
            v13[*v13 + 1] = 2;
            v18 = v227[0];
            v19 = *(unsigned __int8 *)v227[0];
            *(_BYTE *)v227[0] = v19 + 1;
            v18[v19 + 2] = v17 == 5;
            v20 = *v6;
            *((_BYTE *)v18 + (v19 + 1) + 1) = 1;
            v21 = v227[0];
            v22 = *(unsigned __int8 *)v227[0];
            *(_BYTE *)v227[0] = v22 + 1;
            v21[v22 + 2] = v20;
            v23 = *(_DWORD *)(a1 + 60);
            if (v23 >= 2)
              v24 = v23 - 1;
            else
              v24 = 0;
            sub_22E4D6448((uint64_t)(v21 + 42), *(unsigned int *)(a1 + 48) | ((unint64_t)(v24 + *(_DWORD *)(a1 + 48)) << 32), 1);
            sub_22E3BB0B8((uint64_t)v227);
            goto LABEL_24;
          }
          if (((unint64_t)v7 & 0x20000000000) != 0)
          {
            v53 = *(_DWORD *)(a1 + 60);
            if (v53 >= 2)
              v54 = v53 - 1;
            else
              v54 = 0;
            v45 = sub_22F3A9EB0(*(uint64_t **)(a1 + 8), *(_DWORD *)(a1 + 48), v54 + *(_DWORD *)(a1 + 48), (_DWORD)v6[2] & 0xFFFFF);
LABEL_60:
            v55 = v45;
            v56 = v225;
            if (v225 >= (unint64_t)HIDWORD(v225))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v56 = v225;
            }
            *((_QWORD *)v224 + v56) = v55;
            LODWORD(v225) = v225 + 1;
LABEL_24:
            v25 = *(_DWORD *)(a1 + 80);
            if (v25)
            {
              v26 = *(_QWORD *)(a1 + 72) + 24 * v25;
              v27 = *(_QWORD *)(v26 - 8);
              v28 = *(_OWORD *)(v26 - 24);
              *(_DWORD *)(a1 + 80) = v25 - 1;
              *(_OWORD *)v2 = v28;
              *(_QWORD *)(v2 + 16) = v27;
            }
            else
            {
              sub_22EFA92B0(*(_QWORD *)a1, (int *)v2);
            }
          }
          else
          {
            v40 = *(unsigned int *)(a1 + 48);
            v41 = *(_DWORD *)(a1 + 60);
            v42 = *(_DWORD *)(a1 + 80);
            if (v42)
            {
              v57 = *(_QWORD *)(a1 + 72) + 24 * v42;
              v58 = *(_QWORD *)(v57 - 8);
              v59 = *(_OWORD *)(v57 - 24);
              *(_DWORD *)(a1 + 80) = v42 - 1;
              *(_OWORD *)v2 = v59;
              *(_QWORD *)(v2 + 16) = v58;
            }
            else
            {
              sub_22EFA92B0(*(_QWORD *)a1, (int *)v2);
            }
            v227[0] = *(void **)(a1 + 16);
            v227[1] = (void *)a1;
            LOBYTE(v228) = 0;
            v229 = v231;
            v230 = 0x1000000000;
            v231[51] = 0;
            sub_22EFADEC8((uint64_t)v227);
            LODWORD(v214) = 0;
            v60 = sub_22EFAC5FC((uint64_t)v227, (uint64_t)&v214);
            v61 = *(uint64_t **)(a1 + 8);
            v62 = v41 - 1;
            if (v41 < 2)
              v62 = 0;
            v63 = v62 + v40;
            if (v60)
            {
              if (HIDWORD(v215) >= 2)
                v64 = HIDWORD(v215) - 1;
              else
                v64 = 0;
              v46 = sub_22F3A9D18(v61, v40, v63, v4, v214, v64 + (int)v214, v216, v215);
            }
            else
            {
              v207 = v62 + v40;
              v208 = sub_22F3A9C40(v61, v40, v62 + v40, v4);
              v65 = *(_QWORD *)(a1 + 32);
              *(_DWORD *)(v65 + 312) = v63 + 1;
              *(_DWORD *)(v65 + 316) = 2396;
              if (*(char *)(v65 + 311) < 0)
              {
                **(_BYTE **)(v65 + 288) = 0;
                *(_QWORD *)(v65 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v65 + 288) = 0;
                *(_BYTE *)(v65 + 311) = 0;
              }
              v143 = 0;
              v144 = (unsigned __int8 *)(v65 + 320);
              v218 = v65 + 320;
              v219 = 0;
              v220 = v65;
              LOWORD(v221[0]) = 1;
              *(_BYTE *)(v65 + 320) = 0;
              *(_DWORD *)(v65 + 664) = 0;
              v145 = v65;
              v146 = *(unsigned int *)(v65 + 776);
              v210 = v145;
              if ((_DWORD)v146)
              {
                v206 = v40;
                v147 = *(_QWORD *)(v145 + 768);
                v148 = 56 * v146;
                do
                {
                  if (*(char *)(v147 + v148 - 9) < 0)
                    operator delete(*(void **)(v147 + v148 - 32));
                  v148 -= 56;
                }
                while (v148);
                v143 = *v144;
                v40 = v206;
                v145 = v210;
              }
              *(_DWORD *)(v145 + 776) = 0;
              v144[v143 + 1] = 2;
              *(_QWORD *)&v144[8 * v143 + 16] = v3 == 5;
              if (v4 >= 0xC6)
                v5 = *(char ***)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) + 8 * v4 - 1584);
              v149 = *v5;
              *(_BYTE *)(v210 + 320 + (v143 + 1) + 1) = 1;
              *(_BYTE *)(v210 + 320) = v143 + 2;
              *(_QWORD *)(v210 + 320 + 8 * (v143 + 1) + 16) = v149;
              sub_22E4D6448(v210 + 656, v40 | (v207 << 32), 1);
              sub_22E3BB0B8((uint64_t)&v218);
              v46 = v208;
            }
            sub_22F3A9268((uint64_t)v227);
            if (v229 != v231)
              free(v229);
LABEL_149:
            v150 = v225;
            if (v225 >= (unint64_t)HIDWORD(v225))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v150 = v225;
            }
            *((_QWORD *)v224 + v150) = v46;
LABEL_162:
            LODWORD(v225) = v225 + 1;
          }
          continue;
        }
        v191 = v225;
        if ((_DWORD)v225)
        {
          v194 = *(uint64_t **)(a1 + 8);
LABEL_215:
          v200 = (uint64_t *)v224;
          v201 = 8 * v191;
          v199 = v191;
          v198 = sub_22E3CD3D4(*v194, v201, 3);
          v202 = (_QWORD *)v198;
          do
          {
            v203 = *v200++;
            *v202++ = v203;
            v201 -= 8;
          }
          while (v201);
LABEL_217:
          v192 = sub_22F3A97BC(v194, v198, v199);
        }
        else
        {
          v192 = (uint64_t)sub_22F3A8E64(a1);
        }
        v204 = v192;
        if (v224 != v226)
          free(v224);
        return v204;
      case 11:
        v209 = sub_22F3AA0F4(*(uint64_t **)(a1 + 8), *(_DWORD *)(a1 + 48), *(_QWORD *)(a1 + 64), *(unsigned int *)(a1 + 56));
        v49 = *(_DWORD *)(a1 + 80);
        if (v49)
        {
          v50 = *(_QWORD *)(a1 + 72) + 24 * v49;
          v51 = *(_QWORD *)(v50 - 8);
          v52 = *(_OWORD *)(v50 - 24);
          *(_DWORD *)(a1 + 80) = v49 - 1;
          *(_OWORD *)v2 = v52;
          *(_QWORD *)(v2 + 16) = v51;
        }
        else
        {
          sub_22EFA92B0(*(_QWORD *)a1, (int *)v2);
        }
        v227[0] = &v228;
        v227[1] = (void *)0x200000000;
        while (2)
        {
          switch(*(_DWORD *)(a1 + 52))
          {
            case 0xC:
              v67 = *(_DWORD *)(a1 + 48);
              v68 = *(unsigned int *)(a1 + 56);
              v69 = *(_QWORD *)(a1 + 64);
              v70 = *(_DWORD *)(a1 + 80);
              if (v70)
              {
                v71 = *(_QWORD *)(a1 + 72) + 24 * v70;
                v72 = *(_QWORD *)(v71 - 8);
                v73 = *(_OWORD *)(v71 - 24);
                *(_DWORD *)(a1 + 80) = v70 - 1;
                *(_OWORD *)v2 = v73;
                *(_QWORD *)(v2 + 16) = v72;
              }
              else
              {
                sub_22EFA92B0(*(_QWORD *)a1, (int *)v2);
              }
              if (*(_DWORD *)(a1 + 52) == 13)
              {
                v85 = *(unsigned int *)(a1 + 48);
                v86 = *(_DWORD *)(a1 + 80);
                if (v86)
                {
                  v87 = *(_QWORD *)(a1 + 72) + 24 * v86;
                  v88 = *(_QWORD *)(v87 - 8);
                  v89 = *(_OWORD *)(v87 - 24);
                  *(_DWORD *)(a1 + 80) = v86 - 1;
                  *(_OWORD *)v2 = v89;
                  *(_QWORD *)(v2 + 16) = v88;
                }
                else
                {
                  sub_22EFA92B0(*(_QWORD *)a1, (int *)v2);
                }
                if (*(_DWORD *)(a1 + 52) == 14)
                {
                  v96 = *(unsigned int *)(a1 + 56);
                  v95 = *(_DWORD *)(a1 + 60);
                  if (v95 >= 2)
                    v97 = v95 - 1;
                  else
                    v97 = 0;
                  v98 = *(_QWORD *)(a1 + 64);
                  v99 = *(unsigned int *)(a1 + 48) | ((unint64_t)(v97 + *(_DWORD *)(a1 + 48)) << 32);
                  LODWORD(v218) = v67;
                  v219 = v69;
                  v220 = v68;
                  LODWORD(v221[0]) = v85;
                  *(_QWORD *)((char *)v221 + 4) = v99;
                  v222 = v98;
                  v223 = v96;
                  v100 = sub_22E47F7A8((uint64_t)v227, (unint64_t)&v218);
                  v101 = (char *)v227[0] + 56 * LODWORD(v227[1]);
                  v102 = *(_OWORD *)v100;
                  v103 = *(_OWORD *)(v100 + 16);
                  v104 = *(_OWORD *)(v100 + 32);
                  *((_QWORD *)v101 + 6) = *(_QWORD *)(v100 + 48);
                  *((_OWORD *)v101 + 1) = v103;
                  *((_OWORD *)v101 + 2) = v104;
                  *(_OWORD *)v101 = v102;
                  ++LODWORD(v227[1]);
                  v105 = *(_DWORD *)(a1 + 80);
                  if (v105)
                  {
                    v106 = *(_QWORD *)(a1 + 72) + 24 * v105;
                    v107 = *(_QWORD *)(v106 - 8);
                    v108 = *(_OWORD *)(v106 - 24);
                    *(_DWORD *)(a1 + 80) = v105 - 1;
                    *(_OWORD *)v2 = v108;
                    *(_QWORD *)(v2 + 16) = v107;
                  }
                  else
                  {
                    sub_22EFA92B0(*(_QWORD *)a1, (int *)v2);
                  }
                }
                else
                {
                  v109 = *(_QWORD *)(a1 + 32);
                  *(_DWORD *)(v109 + 312) = *(_DWORD *)(a1 + 48);
                  *(_DWORD *)(v109 + 316) = 2395;
                  if (*(char *)(v109 + 311) < 0)
                  {
                    **(_BYTE **)(v109 + 288) = 0;
                    *(_QWORD *)(v109 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v109 + 288) = 0;
                    *(_BYTE *)(v109 + 311) = 0;
                  }
                  v110 = v109 + 320;
                  v218 = v109 + 320;
                  v219 = 0;
                  v220 = v109;
                  LOWORD(v221[0]) = 1;
                  *(_BYTE *)(v109 + 320) = 0;
                  *(_DWORD *)(v109 + 664) = 0;
                  v111 = *(unsigned int *)(v109 + 776);
                  if ((_DWORD)v111)
                  {
                    v112 = *(_QWORD *)(v109 + 768);
                    v113 = 56 * v111;
                    do
                    {
                      if (*(char *)(v112 + v113 - 9) < 0)
                        operator delete(*(void **)(v112 + v113 - 32));
                      v113 -= 56;
                    }
                    while (v113);
                    v110 = v218;
                    *(_DWORD *)(v109 + 776) = 0;
                    v114 = v85 | (v85 << 32);
                    if (!v110)
                    {
                      v110 = sub_22E3B8AAC(v219);
                      v218 = v110;
                    }
                  }
                  else
                  {
                    *(_DWORD *)(v109 + 776) = 0;
                    v114 = v85 | (v85 << 32);
                  }
                  sub_22E4D6448(v110 + 336, v114, 1);
                  sub_22E3BB0B8((uint64_t)&v218);
                  LODWORD(v218) = v67;
                  v219 = v69;
                  v220 = v68;
                  memset(v221, 0, 12);
                  v222 = 0;
                  v223 = 0;
                  v115 = sub_22E47F7A8((uint64_t)v227, (unint64_t)&v218);
                  v116 = (char *)v227[0] + 56 * LODWORD(v227[1]);
                  v117 = *(_OWORD *)v115;
                  v118 = *(_OWORD *)(v115 + 16);
                  v119 = *(_OWORD *)(v115 + 32);
                  *((_QWORD *)v116 + 6) = *(_QWORD *)(v115 + 48);
                  *((_OWORD *)v116 + 1) = v118;
                  *((_OWORD *)v116 + 2) = v119;
                  *(_OWORD *)v116 = v117;
                  ++LODWORD(v227[1]);
                  if ((*(_DWORD *)(a1 + 52) - 13) <= 1)
                  {
                    do
                    {
                      v120 = *(_DWORD *)(a1 + 80);
                      if (v120)
                      {
                        v121 = *(_QWORD *)(a1 + 72) + 24 * v120;
                        v122 = *(_QWORD *)(v121 - 8);
                        v123 = *(_OWORD *)(v121 - 24);
                        *(_DWORD *)(a1 + 80) = v120 - 1;
                        *(_OWORD *)v2 = v123;
                        *(_QWORD *)(v2 + 16) = v122;
                      }
                      else
                      {
                        sub_22EFA92B0(*(_QWORD *)a1, (int *)v2);
                      }
                    }
                    while ((*(_DWORD *)(a1 + 52) - 13) < 2);
                  }
                }
              }
              else
              {
                LODWORD(v218) = v67;
                v219 = v69;
                v220 = v68;
                memset(v221, 0, 12);
                v222 = 0;
                v223 = 0;
                v90 = sub_22E47F7A8((uint64_t)v227, (unint64_t)&v218);
                v91 = (char *)v227[0] + 56 * LODWORD(v227[1]);
                v92 = *(_OWORD *)v90;
                v93 = *(_OWORD *)(v90 + 16);
                v94 = *(_OWORD *)(v90 + 32);
                *((_QWORD *)v91 + 6) = *(_QWORD *)(v90 + 48);
                *((_OWORD *)v91 + 1) = v93;
                *((_OWORD *)v91 + 2) = v94;
                *(_OWORD *)v91 = v92;
                ++LODWORD(v227[1]);
              }
              continue;
            case 0xD:
            case 0xE:
              v66 = *(_QWORD *)(a1 + 32);
              *(_DWORD *)(v66 + 312) = *(_DWORD *)(a1 + 48);
              *(_DWORD *)(v66 + 316) = 2394;
              if (*(char *)(v66 + 311) < 0)
              {
                **(_BYTE **)(v66 + 288) = 0;
                *(_QWORD *)(v66 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v66 + 288) = 0;
                *(_BYTE *)(v66 + 311) = 0;
              }
              v214 = v66 + 320;
              v215 = 0;
              v216 = v66;
              v217 = 1;
              *(_BYTE *)(v66 + 320) = 0;
              *(_DWORD *)(v66 + 664) = 0;
              v74 = *(unsigned int *)(v66 + 776);
              if ((_DWORD)v74)
              {
                v75 = *(_QWORD *)(v66 + 768);
                v76 = 56 * v74;
                do
                {
                  if (*(char *)(v75 + v76 - 9) < 0)
                    operator delete(*(void **)(v75 + v76 - 32));
                  v76 -= 56;
                }
                while (v76);
              }
              *(_DWORD *)(v66 + 776) = 0;
              sub_22E3BB0B8((uint64_t)&v214);
              while (1)
              {
                v77 = *(_DWORD *)(a1 + 52);
                if (v77 - 13 >= 2)
                  break;
                v78 = *(_DWORD *)(a1 + 80);
                if (v78)
                {
                  v79 = *(_QWORD *)(a1 + 72) + 24 * v78;
                  v80 = *(_QWORD *)(v79 - 8);
                  v81 = *(_OWORD *)(v79 - 24);
                  *(_DWORD *)(a1 + 80) = v78 - 1;
                  *(_OWORD *)v2 = v81;
                  *(_QWORD *)(v2 + 16) = v80;
                }
                else
                {
                  sub_22EFA92B0(*(_QWORD *)a1, (int *)v2);
                }
              }
              v82 = v77 > 0x10;
              v83 = (1 << v77) & 0x19000;
              if (!v82 && v83 != 0)
                continue;
              v124 = *(uint64_t **)(a1 + 8);
              v125 = LODWORD(v227[1]);
              if (LODWORD(v227[1]))
              {
                v137 = v227[0];
                v138 = 56 * LODWORD(v227[1]);
                v126 = sub_22E3CD3D4(*v124, v138, 3);
                v139 = v126;
                v127 = v209;
                do
                {
                  v140 = *v137;
                  v141 = v137[1];
                  v142 = v137[2];
                  *(_QWORD *)(v139 + 48) = *((_QWORD *)v137 + 6);
                  *(_OWORD *)(v139 + 16) = v141;
                  *(_OWORD *)(v139 + 32) = v142;
                  *(_OWORD *)v139 = v140;
                  v139 += 56;
                  v137 = (_OWORD *)((char *)v137 + 56);
                  v138 -= 56;
                }
                while (v138);
              }
              else
              {
                v126 = 0;
                v127 = v209;
              }
              sub_22F3AA160((uint64_t)v124, v127, v126, v125, 0, 0);
              goto LABEL_157;
            case 0xF:
              v160 = *(uint64_t **)(a1 + 8);
              v161 = LODWORD(v227[1]);
              if (LODWORD(v227[1]))
              {
                v173 = v227[0];
                v174 = 56 * LODWORD(v227[1]);
                v162 = sub_22E3CD3D4(*v160, v174, 3);
                v175 = v162;
                v127 = v209;
                do
                {
                  v176 = *v173;
                  v177 = v173[1];
                  v178 = v173[2];
                  *(_QWORD *)(v175 + 48) = *((_QWORD *)v173 + 6);
                  *(_OWORD *)(v175 + 16) = v177;
                  *(_OWORD *)(v175 + 32) = v178;
                  *(_OWORD *)v175 = v176;
                  v175 += 56;
                  v173 = (_OWORD *)((char *)v173 + 56);
                  v174 -= 56;
                }
                while (v174);
              }
              else
              {
                v162 = 0;
                v127 = v209;
              }
              sub_22F3AA160((uint64_t)v160, v127, v162, v161, *(_DWORD *)(a1 + 48), 0);
              goto LABEL_154;
            case 0x10:
              v128 = LODWORD(v227[1]);
              if (LODWORD(v227[1]))
              {
                v129 = (char *)v227[0];
                v130 = 56 * LODWORD(v227[1]);
                v131 = sub_22E3CD3D4(**(_QWORD **)(a1 + 8), v130, 3);
                v132 = 0;
                v127 = v209;
                do
                {
                  v133 = v131 + v132;
                  v134 = *(_OWORD *)&v129[v132];
                  v135 = *(_OWORD *)&v129[v132 + 16];
                  v136 = *(_OWORD *)&v129[v132 + 32];
                  *(_QWORD *)(v133 + 48) = *(_QWORD *)&v129[v132 + 48];
                  *(_OWORD *)(v133 + 16) = v135;
                  *(_OWORD *)(v133 + 32) = v136;
                  *(_OWORD *)v133 = v134;
                  v132 += 56;
                }
                while (v130 != v132);
              }
              else
              {
                v131 = 0;
                v127 = v209;
              }
              v151 = *(_DWORD *)(a1 + 48);
              *(_QWORD *)(v127 + 40) = v131;
              *(_QWORD *)(v127 + 48) = v128;
              *(_DWORD *)(v127 + 8) = v151;
              *(_WORD *)(v127 + 12) |= 0x400u;
LABEL_154:
              v152 = *(_DWORD *)(a1 + 80);
              if (v152)
              {
                v153 = *(_QWORD *)(a1 + 72) + 24 * v152;
                v154 = *(_QWORD *)(v153 - 8);
                v155 = *(_OWORD *)(v153 - 24);
                *(_DWORD *)(a1 + 80) = v152 - 1;
                *(_OWORD *)v2 = v155;
                *(_QWORD *)(v2 + 16) = v154;
              }
              else
              {
                sub_22EFA92B0(*(_QWORD *)a1, (int *)v2);
              }
              break;
            default:
              v157 = *(uint64_t **)(a1 + 8);
              v158 = LODWORD(v227[1]);
              if (LODWORD(v227[1]))
              {
                v163 = v227[0];
                v164 = 56 * LODWORD(v227[1]);
                v159 = sub_22E3CD3D4(*v157, v164, 3);
                v165 = v159;
                do
                {
                  v166 = *v163;
                  v167 = v163[1];
                  v168 = v163[2];
                  *(_QWORD *)(v165 + 48) = *((_QWORD *)v163 + 6);
                  *(_OWORD *)(v165 + 16) = v167;
                  *(_OWORD *)(v165 + 32) = v168;
                  *(_OWORD *)v165 = v166;
                  v165 += 56;
                  v163 = (_OWORD *)((char *)v163 + 56);
                  v164 -= 56;
                }
                while (v164);
              }
              else
              {
                v159 = 0;
              }
              sub_22F3AA160((uint64_t)v157, v209, v159, v158, 0, 0);
              sub_22F1E2F68(*(_QWORD *)(a1 + 24), *(_DWORD *)v209, 1, (uint64_t)&v218);
              v169 = v218;
              if (v218)
                v170 = HIDWORD(v219);
              else
                v170 = 0;
              sub_22F1E2F68(*(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 48), 1, (uint64_t)&v218);
              v171 = HIDWORD(v219);
              if (!v218)
                v171 = 0;
              if (v169 && v218 && v170 != v171)
              {
                v172 = *(_QWORD *)(a1 + 32);
                *(_DWORD *)(v172 + 312) = *(_DWORD *)(a1 + 48);
                *(_DWORD *)(v172 + 316) = 2394;
                if (*(char *)(v172 + 311) < 0)
                {
                  **(_BYTE **)(v172 + 288) = 0;
                  *(_QWORD *)(v172 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v172 + 288) = 0;
                  *(_BYTE *)(v172 + 311) = 0;
                }
                v127 = v209;
                v218 = v172 + 320;
                v219 = 0;
                v220 = v172;
                LOWORD(v221[0]) = 1;
                *(_BYTE *)(v172 + 320) = 0;
                *(_DWORD *)(v172 + 664) = 0;
                v180 = *(unsigned int *)(v172 + 776);
                if ((_DWORD)v180)
                {
                  v181 = *(_QWORD *)(v172 + 768);
                  v182 = 56 * v180;
                  do
                  {
                    if (*(char *)(v181 + v182 - 9) < 0)
                      operator delete(*(void **)(v181 + v182 - 32));
                    v182 -= 56;
                  }
                  while (v182);
                }
                *(_DWORD *)(v172 + 776) = 0;
                sub_22E3BB0B8((uint64_t)&v218);
                v183 = *(_QWORD *)(a1 + 32);
                *(_DWORD *)(v183 + 312) = *(_DWORD *)v209;
                *(_DWORD *)(v183 + 316) = 2378;
                if (*(char *)(v183 + 311) < 0)
                {
                  **(_BYTE **)(v183 + 288) = 0;
                  *(_QWORD *)(v183 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v183 + 288) = 0;
                  *(_BYTE *)(v183 + 311) = 0;
                }
                v212[0] = v183 + 320;
                v212[1] = 0;
                v212[2] = v183;
                v213 = 1;
                *(_BYTE *)(v183 + 320) = 0;
                *(_DWORD *)(v183 + 664) = 0;
                v188 = *(unsigned int *)(v183 + 776);
                if ((_DWORD)v188)
                {
                  v189 = *(_QWORD *)(v183 + 768);
                  v190 = 56 * v188;
                  do
                  {
                    if (*(char *)(v189 + v190 - 9) < 0)
                      operator delete(*(void **)(v189 + v190 - 32));
                    v190 -= 56;
                  }
                  while (v190);
                }
                *(_DWORD *)(v183 + 776) = 0;
                sub_22E4D6448(v183 + 656, *(_QWORD *)(v209 + 4), 1);
                v187 = v212;
              }
              else
              {
                v179 = *(_QWORD *)(a1 + 32);
                *(_DWORD *)(v179 + 312) = *(_DWORD *)(a1 + 48);
                *(_DWORD *)(v179 + 316) = 2394;
                if (*(char *)(v179 + 311) < 0)
                {
                  **(_BYTE **)(v179 + 288) = 0;
                  *(_QWORD *)(v179 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v179 + 288) = 0;
                  *(_BYTE *)(v179 + 311) = 0;
                }
                v127 = v209;
                v218 = v179 + 320;
                v219 = 0;
                v220 = v179;
                LOWORD(v221[0]) = 1;
                *(_BYTE *)(v179 + 320) = 0;
                *(_DWORD *)(v179 + 664) = 0;
                v184 = *(unsigned int *)(v179 + 776);
                if ((_DWORD)v184)
                {
                  v185 = *(_QWORD *)(v179 + 768);
                  v186 = 56 * v184;
                  do
                  {
                    if (*(char *)(v185 + v186 - 9) < 0)
                      operator delete(*(void **)(v185 + v186 - 32));
                    v186 -= 56;
                  }
                  while (v186);
                }
                *(_DWORD *)(v179 + 776) = 0;
                sub_22E4D6448(v179 + 656, *(_QWORD *)(v209 + 4), 1);
                v187 = &v218;
              }
              sub_22E3BB0B8((uint64_t)v187);
              break;
          }
          break;
        }
LABEL_157:
        if (v227[0] != &v228)
          free(v227[0]);
        v156 = v225;
        if (v225 >= (unint64_t)HIDWORD(v225))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v156 = v225;
        }
        *((_QWORD *)v224 + v156) = v127;
        goto LABEL_162;
      case 17:
        v46 = sub_22F3A9350(a1);
        goto LABEL_149;
      default:
LABEL_213:
        v191 = v225;
        v194 = *(uint64_t **)(a1 + 8);
        if ((_DWORD)v225)
          goto LABEL_215;
        v198 = 0;
        v199 = 0;
        goto LABEL_217;
    }
  }
}

uint64_t sub_22EFAD91C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  const char **v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  const char *v37;
  size_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  unsigned int i;
  _QWORD v51[10];

  v51[8] = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 48;
  v3 = sub_22F3A9F78(*(uint64_t **)(a1 + 8), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 56));
  v4 = *(_DWORD *)(v2 + 32);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 72) + 24 * v4;
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_OWORD *)(v5 - 24);
    *(_DWORD *)(a1 + 80) = v4 - 1;
    *(_OWORD *)v2 = v7;
    *(_QWORD *)(v2 + 16) = v6;
  }
  else
  {
    sub_22EFA92B0(*(_QWORD *)a1, (int *)v2);
  }
  if (*(_DWORD *)(a1 + 52) == 1)
  {
    v8 = *(_DWORD *)(a1 + 80);
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 72) + 24 * v8;
      v10 = *(_QWORD *)(v9 - 8);
      v11 = *(_OWORD *)(v9 - 24);
      *(_DWORD *)(a1 + 80) = v8 - 1;
      *(_OWORD *)v2 = v11;
      *(_QWORD *)(v2 + 16) = v10;
    }
    else
    {
      sub_22EFA92B0(*(_QWORD *)a1, (int *)v2);
    }
  }
  v12 = 0;
  for (i = 0; ; ++i)
  {
    v13 = *(_DWORD *)(a1 + 52);
    if (v13 == 1)
    {
      v22 = *(_DWORD *)(a1 + 48);
      v17 = sub_22E3CD3D4(**(_QWORD **)(a1 + 8), 32, 3);
      *(_DWORD *)v17 = v22;
      *(_DWORD *)(v17 + 4) = v22;
      *(_DWORD *)(v17 + 8) = v22;
      *(_BYTE *)(v17 + 12) = 12;
      *(_QWORD *)(v17 + 16) = "";
      *(_QWORD *)(v17 + 24) = 0;
LABEL_16:
      v23 = *(_DWORD *)(a1 + 80);
      if (v23)
      {
        v24 = *(_QWORD *)(a1 + 72) + 24 * v23;
        v25 = *(_QWORD *)(v24 - 8);
        v26 = *(_OWORD *)(v24 - 24);
        *(_DWORD *)(a1 + 80) = v23 - 1;
        *(_OWORD *)v2 = v26;
        *(_QWORD *)(v2 + 16) = v25;
      }
      else
      {
        sub_22EFA92B0(*(_QWORD *)a1, (int *)v2);
      }
      goto LABEL_19;
    }
    if (v13 != 7)
      break;
    v14 = *(_DWORD *)(a1 + 48);
    v15 = *(_QWORD *)(a1 + 64);
    v16 = *(unsigned int *)(a1 + 56);
    v17 = sub_22E3CD3D4(**(_QWORD **)(a1 + 8), 32, 3);
    *(_DWORD *)v17 = v14;
    *(_DWORD *)(v17 + 4) = v14;
    *(_DWORD *)(v17 + 8) = v16 + v14;
    *(_BYTE *)(v17 + 12) = 12;
    *(_QWORD *)(v17 + 16) = v15;
    *(_QWORD *)(v17 + 24) = v16;
    v18 = *(_DWORD *)(a1 + 80);
    if (v18)
    {
      v19 = *(_QWORD *)(a1 + 72) + 24 * v18;
      v20 = *(_QWORD *)(v19 - 8);
      v21 = *(_OWORD *)(v19 - 24);
      *(_DWORD *)(a1 + 80) = v18 - 1;
      *(_OWORD *)v2 = v21;
      *(_QWORD *)(v2 + 16) = v20;
    }
    else
    {
      sub_22EFA92B0(*(_QWORD *)a1, (int *)v2);
    }
    if (*(_DWORD *)(a1 + 52) == 1)
      goto LABEL_16;
LABEL_19:
    v27 = i;
    if (i >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v27 = i;
    }
    v51[v27] = v17;
    v12 = i + 1;
  }
  if (v13 == 8)
  {
    v28 = *(unsigned int *)(a1 + 56);
    if (v28 < 0xC6)
      v29 = (const char **)&(&off_24FAC12E8)[3 * v28];
    else
      v29 = *(const char ***)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) + 8 * v28 - 1584);
    v36 = *(_DWORD *)(a1 + 48);
    v37 = *v29;
    if (*v29)
      v38 = strlen(*v29);
    else
      v38 = 0;
    v39 = v12;
    if (v12)
    {
      v40 = v51;
      v41 = 8 * v39;
      v42 = sub_22E3CD3D4(**(_QWORD **)(a1 + 8), 8 * v39, 3);
      v43 = (_QWORD *)v42;
      do
      {
        v44 = *v40++;
        *v43++ = v44;
        v41 -= 8;
      }
      while (v41);
    }
    else
    {
      v42 = 0;
    }
    *(_QWORD *)(v3 + 40) = v37;
    *(_QWORD *)(v3 + 48) = v38;
    *(_DWORD *)(v3 + 56) = v36;
    *(_QWORD *)(v3 + 64) = v42;
    *(_QWORD *)(v3 + 72) = v39;
    v45 = *(_DWORD *)(a1 + 80);
    if (v45)
    {
      v46 = *(_QWORD *)(a1 + 72) + 24 * v45;
      v47 = *(_QWORD *)(v46 - 8);
      v48 = *(_OWORD *)(v46 - 24);
      *(_DWORD *)(a1 + 80) = v45 - 1;
      *(_OWORD *)v2 = v48;
      *(_QWORD *)(v2 + 16) = v47;
    }
    else
    {
      sub_22EFA92B0(*(_QWORD *)a1, (int *)v2);
    }
  }
  else
  {
    if (v12)
    {
      v30 = v51;
      v31 = **(_QWORD **)(a1 + 8);
      v32 = 8 * v12;
      v33 = sub_22E3CD3D4(v31, v32, 3);
      v34 = (_QWORD *)v33;
      do
      {
        v35 = *v30++;
        *v34++ = v35;
        v32 -= 8;
      }
      while (v32);
    }
    else
    {
      v33 = 0;
    }
    *(_QWORD *)(v3 + 40) = "";
    *(_QWORD *)(v3 + 48) = 0;
    *(_DWORD *)(v3 + 56) = 0;
    *(_QWORD *)(v3 + 64) = v33;
    *(_QWORD *)(v3 + 72) = v12;
  }
  return v3;
}

uint64_t sub_22EFADCDC(uint64_t a1)
{
  uint64_t v2;
  int i;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v23;
  _QWORD v24[9];

  v24[8] = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 48;
  for (i = *(_DWORD *)(a1 + 52); i == 1; i = *(_DWORD *)(a1 + 52))
  {
    v4 = *(_DWORD *)(a1 + 80);
    if (v4)
    {
      v5 = *(_QWORD *)(a1 + 72) + 24 * v4;
      v6 = *(_QWORD *)(v5 - 8);
      v7 = *(_OWORD *)(v5 - 24);
      *(_DWORD *)(a1 + 80) = v4 - 1;
      *(_OWORD *)v2 = v7;
      *(_QWORD *)(v2 + 16) = v6;
    }
    else
    {
      sub_22EFA92B0(*(_QWORD *)a1, (int *)v2);
    }
  }
  v23 = 0;
  if (i)
  {
    do
    {
      v8 = sub_22F3A9544(a1);
      v9 = v23;
      if (v23 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v9 = v23;
      }
      v24[v9] = v8;
      ++v23;
      while (1)
      {
        v10 = *(_DWORD *)(a1 + 52);
        if (v10 != 1)
          break;
        v11 = *(_DWORD *)(a1 + 80);
        if (v11)
        {
          v12 = *(_QWORD *)(a1 + 72) + 24 * v11;
          v13 = *(_QWORD *)(v12 - 8);
          v14 = *(_OWORD *)(v12 - 24);
          *(_DWORD *)(a1 + 80) = v11 - 1;
          *(_OWORD *)v2 = v14;
          *(_QWORD *)(v2 + 16) = v13;
        }
        else
        {
          sub_22EFA92B0(*(_QWORD *)a1, (int *)v2);
        }
      }
    }
    while (v10);
    v15 = v23;
    v16 = *(uint64_t **)(a1 + 8);
    if (v23)
    {
      v17 = v24;
      v18 = 8 * v23;
      v19 = sub_22E3CD3D4(*v16, v18, 3);
      v20 = (_QWORD *)v19;
      do
      {
        v21 = *v17++;
        *v20++ = v21;
        v18 -= 8;
      }
      while (v18);
    }
    else
    {
      v15 = 0;
      v19 = 0;
    }
  }
  else
  {
    v15 = 0;
    v19 = 0;
    v16 = *(uint64_t **)(a1 + 8);
  }
  return sub_22EFB0BF0((uint64_t)v16, v19, v15);
}

uint64_t sub_22EFADEC8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  if (*(_BYTE *)(a1 + 16))
    return 0;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_DWORD *)(v3 + 52);
  if (v4 == 2)
    goto LABEL_10;
  if (v4 != 1)
  {
    result = 0;
LABEL_17:
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  v5 = (int *)(v3 + 48);
  v23 = *(_OWORD *)(v3 + 48);
  v24 = *(_QWORD *)(v3 + 64);
  v6 = *(_DWORD *)(v3 + 80);
  if (v6)
  {
    v7 = *(_QWORD *)(v3 + 72) + 24 * v6;
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(_OWORD *)(v7 - 24);
    *(_DWORD *)(v3 + 80) = v6 - 1;
    *(_OWORD *)v5 = v9;
    *(_QWORD *)(v3 + 64) = v8;
  }
  else
  {
    sub_22EFA92B0(*(_QWORD *)v3, v5);
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v3 + 52) != 2)
  {
    v20 = sub_22E5BBF6C(v3 + 72, v3 + 48);
    result = 0;
    v21 = *(_QWORD *)(v3 + 72) + 24 * *(unsigned int *)(v3 + 80);
    v22 = *(_OWORD *)v20;
    *(_QWORD *)(v21 + 16) = *(_QWORD *)(v20 + 16);
    *(_OWORD *)v21 = v22;
    ++*(_DWORD *)(v3 + 80);
    *(_QWORD *)(v3 + 64) = v24;
    *(_OWORD *)(v3 + 48) = v23;
    goto LABEL_17;
  }
LABEL_10:
  v10 = sub_22E5BBF6C(a1 + 24, v3 + 48);
  v11 = *(_QWORD *)(a1 + 24) + 24 * *(unsigned int *)(a1 + 32);
  v12 = *(_OWORD *)v10;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v10 + 16);
  *(_OWORD *)v11 = v12;
  ++*(_DWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_DWORD *)(v13 + 80);
  if (v14)
  {
    v15 = *(_QWORD *)(v13 + 72) + 24 * v14;
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(_OWORD *)(v15 - 24);
    *(_DWORD *)(v13 + 80) = v14 - 1;
    *(_OWORD *)(v13 + 48) = v17;
    *(_QWORD *)(v13 + 64) = v16;
  }
  else
  {
    sub_22EFA92B0(*(_QWORD *)v13, (int *)(v13 + 48));
  }
  if (*(_DWORD *)(a1 + 32) == 1)
  {
    v18 = *(_QWORD *)(a1 + 24) + 24 * *(unsigned int *)(a1 + 452);
    v19 = *(_QWORD *)(v18 + 16);
    *(_QWORD *)(a1 + 424) = v19;
    *(_QWORD *)(a1 + 432) = v19 + *(unsigned int *)(v18 + 8);
    *(_QWORD *)(a1 + 440) = v19;
    *(_DWORD *)(a1 + 448) = *(_DWORD *)v18;
  }
  return 1;
}

unint64_t sub_22EFAE084(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  char **v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  __int16 v15;

  v3 = result;
  v4 = ((unint64_t)*(unsigned int *)(a2 + 12) >> 8) & 0xFFFFF;
  if (v4 < 0xC6)
    v5 = &(&off_24FAC12E8)[3 * v4];
  else
    v5 = *(char ***)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 8 * v4 - 1584);
  if ((*((_BYTE *)v5 + 20) & 0x80) != 0)
  {
    result = sub_22F3A9A70(result);
    if ((result & 1) == 0)
    {
      v6 = (*(_DWORD *)(a2 + 12) >> 8) & 0xFFFFF;
      if (v6 <= 0x47)
      {
        if (((*(_DWORD *)(a2 + 12) >> 8) & 0xFFFFFu) <= 0x21)
        {
          if (v6 == 19)
          {
            v7 = 0;
          }
          else
          {
            if (v6 != 20)
              return result;
            v7 = 1;
          }
        }
        else
        {
          switch(v6)
          {
            case '"':
              v7 = 2;
              break;
            case 'F':
              v7 = 3;
              break;
            case 'G':
              v7 = 4;
              break;
            default:
              return result;
          }
        }
      }
      else if (((*(_DWORD *)(a2 + 12) >> 8) & 0xFFFFFu) > 0x7B)
      {
        switch(v6)
        {
          case 0x7Cu:
            v7 = 8;
            break;
          case 0x9Bu:
            v7 = 9;
            break;
          case 0xABu:
            v7 = 10;
            break;
          default:
            return result;
        }
      }
      else
      {
        switch(v6)
        {
          case 'H':
            v7 = 5;
            break;
          case 'X':
            v7 = 6;
            break;
          case 't':
            v7 = 7;
            break;
          default:
            return result;
        }
      }
      v8 = *(_QWORD *)(v3 + 16);
      *(_DWORD *)(v8 + 312) = *(_DWORD *)a2;
      *(_DWORD *)(v8 + 316) = 2387;
      if (*(char *)(v8 + 311) < 0)
      {
        **(_BYTE **)(v8 + 288) = 0;
        *(_QWORD *)(v8 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v8 + 288) = 0;
        *(_BYTE *)(v8 + 311) = 0;
      }
      v14[0] = v8 + 320;
      v14[1] = 0;
      v14[2] = v8;
      v15 = 1;
      *(_BYTE *)(v8 + 320) = 0;
      *(_DWORD *)(v8 + 664) = 0;
      v9 = *(unsigned int *)(v8 + 776);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)(v8 + 768);
        v11 = 56 * v9;
        do
        {
          if (*(char *)(v10 + v11 - 9) < 0)
            operator delete(*(void **)(v10 + v11 - 32));
          v11 -= 56;
        }
        while (v11);
        LODWORD(v9) = *(unsigned __int8 *)(v8 + 320);
      }
      *(_DWORD *)(v8 + 776) = 0;
      v12 = ((unint64_t)*(unsigned int *)(a2 + 12) >> 28) & 1;
      *(_BYTE *)(v8 + 321 + v9) = 2;
      *(_QWORD *)(v8 + 336 + 8 * v9) = v12;
      v13 = (v9 + 1);
      *(_BYTE *)(v8 + 321 + v13) = 3;
      *(_BYTE *)(v8 + 320) = v9 + 2;
      *(_QWORD *)(v8 + 336 + 8 * v13) = v7;
      sub_22E4D6448(v8 + 656, *(_QWORD *)(a2 + 4), 1);
      return sub_22E3BB0B8((uint64_t)v14);
    }
  }
  return result;
}

uint64_t sub_22EFAE2B0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char **v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  size_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;

  v3 = result;
  v4 = ((unint64_t)*(unsigned int *)(a2 + 12) >> 8) & 0xFFFFF;
  if (v4 < 0xC6)
    v5 = &(&off_24FAC12E8)[3 * v4];
  else
    v5 = *(char ***)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 8 * v4 - 1584);
  if ((*((_BYTE *)v5 + 20) & 2) != 0)
    return result;
  v6 = *(_QWORD *)(a2 + 32);
  if ((*(_WORD *)(v6 + 12) & 0x100) != 0)
  {
    if ((*(_WORD *)(v6 + 12) & 0x200) == 0)
      return result;
  }
  else
  {
    result = sub_22EFA58B8(*(_QWORD *)(a2 + 32));
    if ((_DWORD)result)
      v7 = 768;
    else
      v7 = 256;
    *(_WORD *)(v6 + 12) = *(_WORD *)(v6 + 12) & 0xFDFF | v7;
    if (!(_DWORD)result)
      return result;
  }
  v8 = *(_QWORD *)(a2 + 24);
  if (!(_DWORD)v8 || (v9 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 24 * (v8 - 1) + 4)) == 0)
  {
    sub_22F3AA1E4(*(_DWORD *)(a2 + 12), *(_QWORD *)(*(_QWORD *)(v3 + 24) + 16));
    v9 = *(_DWORD *)(a2 + 4) + v10 + 1;
  }
  v11 = *(_QWORD *)(v3 + 16);
  *(_DWORD *)(v11 + 312) = v9;
  *(_DWORD *)(v11 + 316) = 2386;
  if (*(char *)(v11 + 311) < 0)
  {
    **(_BYTE **)(v11 + 288) = 0;
    *(_QWORD *)(v11 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v11 + 288) = 0;
    *(_BYTE *)(v11 + 311) = 0;
  }
  v12 = 0;
  v13 = (unsigned __int8 *)(v11 + 320);
  v22 = (unsigned __int8 *)(v11 + 320);
  v23 = 0;
  v24 = v11;
  v25 = 1;
  *(_BYTE *)(v11 + 320) = 0;
  *(_DWORD *)(v11 + 664) = 0;
  v14 = *(unsigned int *)(v11 + 776);
  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(v11 + 768);
    v16 = 56 * v14;
    do
    {
      if (*(char *)(v15 + v16 - 9) < 0)
        operator delete(*(void **)(v15 + v16 - 32));
      v16 -= 56;
    }
    while (v16);
    v12 = *v13;
  }
  *(_DWORD *)(v11 + 776) = 0;
  v17 = ((unint64_t)*(unsigned int *)(a2 + 12) >> 28) & 1;
  v13[v12 + 1] = 2;
  *(_BYTE *)(v11 + 320) = v12 + 1;
  *(_QWORD *)&v13[8 * v12 + 16] = v17;
  v18 = (char *)sub_22F3AA1E4(*(_DWORD *)(a2 + 12), *(_QWORD *)(*(_QWORD *)(v3 + 24) + 16));
  sub_22E3B89A8(&v22, v18, v19);
  v20 = *(_QWORD *)(a2 + 4);
  v21 = v22;
  if (!v22)
  {
    v21 = (unsigned __int8 *)sub_22E3B8AAC(v23);
    v22 = v21;
  }
  sub_22E4D6448((uint64_t)(v21 + 336), v20, 1);
  return sub_22E3BB0B8((uint64_t)&v22);
}

unint64_t sub_22EFAE4AC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char **v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  size_t v13;
  const char *v14;
  size_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  char *v21;
  size_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  size_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;

  v4 = a1[3];
  result = *(unsigned int *)(a2 + 12);
  v6 = (result >> 8) & 0xFFFFF;
  if (v6 < 0xC6)
    v7 = &(&off_24FAC12E8)[3 * ((result >> 8) & 0xFFFFF)];
  else
    v7 = *(char ***)(*(_QWORD *)(v4 + 16) + 8 * v6 - 1584);
  v8 = (unint64_t)v7[2];
  if ((v8 & 0x4000000) != 0)
  {
    v9 = a1[10];
    if (!v9)
    {
      a1[10] = a2;
      return result;
    }
  }
  else
  {
    if ((v8 & 0x100000000) == 0)
      return result;
    v9 = a1[11];
    if (!v9)
    {
      a1[11] = a2;
      return result;
    }
  }
  v10 = *(_QWORD *)(v4 + 16);
  v11 = (char *)sub_22F3AA1E4(result, v10);
  v13 = v12;
  v14 = sub_22F3AA1E4(*(_DWORD *)(v9 + 12), v10);
  v16 = (char *)v14;
  v17 = v15;
  v18 = a1[2];
  *(_DWORD *)(v18 + 312) = *(_DWORD *)a2;
  *(_DWORD *)(v18 + 316) = 2385;
  if (*(char *)(v18 + 311) < 0)
  {
    **(_BYTE **)(v18 + 288) = 0;
    *(_QWORD *)(v18 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v18 + 288) = 0;
    *(_BYTE *)(v18 + 311) = 0;
  }
  v19 = (unsigned __int8 *)(v18 + 320);
  v44 = (unsigned __int8 *)(v18 + 320);
  v45 = 0;
  v46 = v18;
  v47 = 1;
  *(_BYTE *)(v18 + 320) = 0;
  *(_DWORD *)(v18 + 664) = 0;
  v20 = *(unsigned int *)(v18 + 776);
  if ((_DWORD)v20)
  {
    v43 = v13;
    v21 = v11;
    v22 = v15;
    v23 = v14;
    v24 = *(_QWORD *)(v18 + 768);
    v25 = 56 * v20;
    do
    {
      if (*(char *)(v24 + v25 - 9) < 0)
        operator delete(*(void **)(v24 + v25 - 32));
      v25 -= 56;
    }
    while (v25);
    LODWORD(v20) = *v19;
    v16 = (char *)v23;
    v17 = v22;
    v11 = v21;
    v13 = v43;
  }
  *(_DWORD *)(v18 + 776) = 0;
  v26 = ((unint64_t)*(unsigned int *)(a2 + 12) >> 28) & 1;
  v19[v20 + 1] = 2;
  *(_BYTE *)(v18 + 320) = v20 + 1;
  *(_QWORD *)&v19[8 * v20 + 16] = v26;
  sub_22E3B89A8(&v44, v11, v13);
  v27 = *(_QWORD *)(a2 + 4);
  v28 = v44;
  if (!v44)
  {
    v28 = (unsigned __int8 *)sub_22E3B8AAC(v45);
    v44 = v28;
  }
  sub_22E4D6448((uint64_t)(v28 + 336), v27, 1);
  sub_22E3BB0B8((uint64_t)&v44);
  if (v13 == v17 && (!v13 || !memcmp(v11, v16, v13)))
  {
    v30 = a1[2];
    *(_DWORD *)(v30 + 312) = *(_DWORD *)v9;
    *(_DWORD *)(v30 + 316) = 2375;
    if (*(char *)(v30 + 311) < 0)
    {
      **(_BYTE **)(v30 + 288) = 0;
      *(_QWORD *)(v30 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v30 + 288) = 0;
      *(_BYTE *)(v30 + 311) = 0;
    }
    v36 = (unsigned __int8 *)(v30 + 320);
    v44 = (unsigned __int8 *)(v30 + 320);
    v45 = 0;
    v46 = v30;
    v47 = 1;
    *(_BYTE *)(v30 + 320) = 0;
    *(_DWORD *)(v30 + 664) = 0;
    v37 = *(unsigned int *)(v30 + 776);
    if ((_DWORD)v37)
    {
      v38 = *(_QWORD *)(v30 + 768);
      v39 = 56 * v37;
      do
      {
        if (*(char *)(v38 + v39 - 9) < 0)
          operator delete(*(void **)(v38 + v39 - 32));
        v39 -= 56;
      }
      while (v39);
      LODWORD(v37) = *v36;
    }
    *(_DWORD *)(v30 + 776) = 0;
    v40 = ((unint64_t)*(unsigned int *)(v9 + 12) >> 28) & 1;
    v36[v37 + 1] = 2;
    *(_BYTE *)(v30 + 320) = v37 + 1;
    *(_QWORD *)&v36[8 * v37 + 16] = v40;
    sub_22E3B89A8(&v44, v16, v17);
    v41 = *(_QWORD *)(v9 + 4);
    v42 = v44;
    if (!v44)
    {
      v42 = (unsigned __int8 *)sub_22E3B8AAC(v45);
      v44 = v42;
    }
    sub_22E4D6448((uint64_t)(v42 + 336), v41, 1);
  }
  else
  {
    v29 = a1[2];
    *(_DWORD *)(v29 + 312) = *(_DWORD *)v9;
    *(_DWORD *)(v29 + 316) = 2376;
    if (*(char *)(v29 + 311) < 0)
    {
      **(_BYTE **)(v29 + 288) = 0;
      *(_QWORD *)(v29 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v29 + 288) = 0;
      *(_BYTE *)(v29 + 311) = 0;
    }
    v31 = (unsigned __int8 *)(v29 + 320);
    v44 = (unsigned __int8 *)(v29 + 320);
    v45 = 0;
    v46 = v29;
    v47 = 1;
    *(_BYTE *)(v29 + 320) = 0;
    *(_DWORD *)(v29 + 664) = 0;
    v32 = *(unsigned int *)(v29 + 776);
    if ((_DWORD)v32)
    {
      v33 = *(_QWORD *)(v29 + 768);
      v34 = 56 * v32;
      do
      {
        if (*(char *)(v33 + v34 - 9) < 0)
          operator delete(*(void **)(v33 + v34 - 32));
        v34 -= 56;
      }
      while (v34);
      LODWORD(v32) = *v31;
    }
    *(_DWORD *)(v29 + 776) = 0;
    v35 = ((unint64_t)*(unsigned int *)(v9 + 12) >> 28) & 1;
    v31[v32 + 1] = 2;
    *(_BYTE *)(v29 + 320) = v32 + 1;
    *(_QWORD *)&v31[8 * v32 + 16] = v35;
    sub_22E3B89A8(&v44, v16, v17);
    sub_22E3B89A8(&v44, v11, v13);
  }
  return sub_22E3BB0B8((uint64_t)&v44);
}

unint64_t sub_22EFAE868(unint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  char **v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  size_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  size_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;

  v3 = (_QWORD *)result;
  v4 = ((unint64_t)*(unsigned int *)(a2 + 12) >> 8) & 0xFFFFF;
  if (v4 < 0xC6)
    v5 = &(&off_24FAC12E8)[3 * v4];
  else
    v5 = *(char ***)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 8 * v4 - 1584);
  if ((*((_BYTE *)v5 + 19) & 8) == 0)
    return result;
  result = *(_QWORD *)(result + 40);
  if (!result)
    goto LABEL_20;
  if ((*(_WORD *)(result + 48) & 1) == 0)
  {
    sub_22EFA5954(result);
    result = v3[5];
  }
  if ((*(_DWORD *)(*(_QWORD *)(result + 8) + 28) & 0x7F) != 0x19)
  {
    if ((*(_WORD *)(result + 48) & 1) == 0)
    {
      sub_22EFA5954(result);
      result = v3[5];
    }
    v6 = *(_QWORD *)(result + 32);
    if (v6 >= 0x10)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v7)
        v8 = (*(_DWORD *)(v7 + 16) & 0xFF800FF) == 86507531;
      else
        v8 = 0;
      if (!v8)
        return result;
      if ((*(_DWORD *)(*(_QWORD *)result + 28) & 0x7F) == 0x37)
      {
        v9 = 1;
      }
      else if ((*(_DWORD *)(*(_QWORD *)result + 28) & 0x7F) == 0x39)
      {
        v9 = 2;
      }
      else if ((*(_WORD *)(result + 48) & 0x40) != 0)
      {
        v9 = 3;
      }
      else
      {
        v9 = 0;
      }
      v23 = v3[2];
      *(_DWORD *)(v23 + 312) = *(_DWORD *)a2;
      *(_DWORD *)(v23 + 316) = 2402;
      if (*(char *)(v23 + 311) < 0)
      {
        **(_BYTE **)(v23 + 288) = 0;
        *(_QWORD *)(v23 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v23 + 288) = 0;
        *(_BYTE *)(v23 + 311) = 0;
      }
      v24 = 0;
      v25 = (unsigned __int8 *)(v23 + 320);
      v35 = (unsigned __int8 *)(v23 + 320);
      v36 = 0;
      v37 = v23;
      v38 = 1;
      *(_BYTE *)(v23 + 320) = 0;
      *(_DWORD *)(v23 + 664) = 0;
      v26 = *(unsigned int *)(v23 + 776);
      if ((_DWORD)v26)
      {
        v27 = *(_QWORD *)(v23 + 768);
        v28 = 56 * v26;
        do
        {
          if (*(char *)(v27 + v28 - 9) < 0)
            operator delete(*(void **)(v27 + v28 - 32));
          v28 -= 56;
        }
        while (v28);
        v24 = *v25;
      }
      *(_DWORD *)(v23 + 776) = 0;
      v29 = ((unint64_t)*(unsigned int *)(a2 + 12) >> 28) & 1;
      v25[v24 + 1] = 2;
      *(_BYTE *)(v23 + 320) = v24 + 1;
      *(_QWORD *)&v25[8 * v24 + 16] = v29;
      v30 = (char *)sub_22F3AA1E4(*(_DWORD *)(a2 + 12), *(_QWORD *)(v3[3] + 16));
      sub_22E3B89A8(&v35, v30, v31);
      v32 = v35;
      if (!v35)
      {
        v32 = (unsigned __int8 *)sub_22E3B8AAC(v36);
        v35 = v32;
      }
      v32[*v32 + 1] = 3;
      v33 = v35;
      v34 = *v35;
      *v35 = v34 + 1;
      *(_QWORD *)&v33[8 * v34 + 16] = v9;
      v22 = *(_QWORD *)(a2 + 4);
      v21 = (uint64_t)(v33 + 336);
LABEL_48:
      sub_22E4D6448(v21, v22, 1);
      return sub_22E3BB0B8((uint64_t)&v35);
    }
LABEL_20:
    v10 = v3[2];
    *(_DWORD *)(v10 + 312) = *(_DWORD *)a2;
    *(_DWORD *)(v10 + 316) = 2403;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    v11 = 0;
    v12 = (unsigned __int8 *)(v10 + 320);
    v35 = (unsigned __int8 *)(v10 + 320);
    v36 = 0;
    v37 = v10;
    v38 = 1;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 664) = 0;
    v13 = *(unsigned int *)(v10 + 776);
    if ((_DWORD)v13)
    {
      v14 = *(_QWORD *)(v10 + 768);
      v15 = 56 * v13;
      do
      {
        if (*(char *)(v14 + v15 - 9) < 0)
          operator delete(*(void **)(v14 + v15 - 32));
        v15 -= 56;
      }
      while (v15);
      v11 = *v12;
    }
    *(_DWORD *)(v10 + 776) = 0;
    v16 = ((unint64_t)*(unsigned int *)(a2 + 12) >> 28) & 1;
    v12[v11 + 1] = 2;
    *(_BYTE *)(v10 + 320) = v11 + 1;
    *(_QWORD *)&v12[8 * v11 + 16] = v16;
    v17 = (char *)sub_22F3AA1E4(*(_DWORD *)(a2 + 12), *(_QWORD *)(v3[3] + 16));
    sub_22E3B89A8(&v35, v17, v18);
    v19 = *(_QWORD *)(a2 + 4);
    v20 = v35;
    if (!v35)
    {
      v20 = (unsigned __int8 *)sub_22E3B8AAC(v36);
      v35 = v20;
    }
    v21 = (uint64_t)(v20 + 336);
    v22 = v19;
    goto LABEL_48;
  }
  return result;
}

void sub_22EFAEBC8(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char **v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  const char *v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD v34[6];
  void *__p;
  char v36;
  uint64_t v37[3];
  __int16 v38;
  void *v39;
  __int128 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v4 = ((unint64_t)*(unsigned int *)(a2 + 12) >> 8) & 0xFFFFF;
  if (v4 < 0xC6)
    v5 = &(&off_24FAC12E8)[3 * v4];
  else
    v5 = *(char ***)(*(_QWORD *)(a1[3] + 16) + 8 * v4 - 1584);
  if ((*((_BYTE *)v5 + 19) & 0x80) != 0)
  {
    v6 = (uint64_t *)a1[5];
    v7 = *v6;
    if (*v6)
    {
      if (!sub_22EAF8CC0(*v6) && !sub_22E91DE80(v7) && !sub_22F3089DC(v7))
      {
        v8 = a1[2];
        *(_DWORD *)(v8 + 312) = *(_DWORD *)a2;
        *(_DWORD *)(v8 + 316) = 2388;
        if (*(char *)(v8 + 311) < 0)
        {
          **(_BYTE **)(v8 + 288) = 0;
          *(_QWORD *)(v8 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v8 + 288) = 0;
          *(_BYTE *)(v8 + 311) = 0;
        }
        v39 = (void *)(v8 + 320);
        *(_QWORD *)&v40 = 0;
        *((_QWORD *)&v40 + 1) = v8;
        LOWORD(v41) = 1;
        *(_BYTE *)(v8 + 320) = 0;
        *(_DWORD *)(v8 + 664) = 0;
        v9 = *(unsigned int *)(v8 + 776);
        if ((_DWORD)v9)
        {
          v10 = *(_QWORD *)(v8 + 768);
          v11 = 56 * v9;
          do
          {
            if (*(char *)(v10 + v11 - 9) < 0)
              operator delete(*(void **)(v10 + v11 - 32));
            v11 -= 56;
          }
          while (v11);
        }
        *(_DWORD *)(v8 + 776) = 0;
        sub_22E4D6448(v8 + 656, *(_QWORD *)(a2 + 4), 1);
        v12 = ((unint64_t)*(unsigned int *)(a2 + 12) >> 28) & 1;
        *(_BYTE *)(v8 + 320 + *(unsigned __int8 *)(v8 + 320) + 1) = 2;
        v13 = v39;
        v14 = *(unsigned __int8 *)v39;
        *(_BYTE *)v39 = v14 + 1;
        v13[v14 + 2] = v12;
        sub_22E3BB0B8((uint64_t)&v39);
        if ((*(_DWORD *)(v7 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
        {
          v15 = *(_QWORD *)(v7 + 16);
          v16 = v15 & 0xFFFFFFFFFFFFFFF8;
          if ((v15 & 4) != 0)
            v16 = *(_QWORD *)v16;
          if (!v16 || (*(_WORD *)(v16 + 8) & 0x7Eu) - 34 >= 4)
          {
            v17 = *(_QWORD *)(v7 + 80);
            if ((v17 & 0x8000000) != 0)
            {
              if ((v17 & 0x20000000) != 0)
                return;
            }
            else if (*(_QWORD *)(v7 + 128) | *(_QWORD *)(v7 + 80) & 0x20000000)
            {
              return;
            }
          }
          v18 = (_QWORD *)sub_22EFC8868(v7);
          if ((*v18 & 0x408) != 0)
            v19 = "[[deprecated]]";
          else
            v19 = "__attribute__((deprecated))";
          if ((*v18 & 0x408) != 0)
            v20 = 14;
          else
            v20 = 27;
          v21 = a1[4];
          if (v21)
          {
            if ((*v18 & 0x408) != 0)
            {
              LOWORD(v39) = 19;
              *(_QWORD *)&v40 = 0;
              WORD4(v40) = 19;
              v41 = 0;
              v22 = sub_22E3CB704((llvm::StringMapImpl *)(v21 + 544), "deprecated", 0xAuLL);
              v42 = 5;
              v43 = v22;
              v44 = 20;
              v45 = 0;
              v46 = 20;
              v47 = 0;
              v23 = sub_22F18DFA4(a1[4], *(_DWORD *)(v7 + 24), (unsigned __int16 *)&v39, 5);
              if (v24)
                goto LABEL_39;
              v21 = a1[4];
              v19 = "[[deprecated]]";
              v20 = 14;
            }
            else
            {
              v19 = "__attribute__((deprecated))";
              v20 = 27;
            }
            LOWORD(v39) = 186;
            *(_QWORD *)&v40 = 0;
            WORD4(v40) = 21;
            v41 = 0;
            v42 = 21;
            v43 = 0;
            v25 = sub_22E3CB704((llvm::StringMapImpl *)(v21 + 544), "deprecated", 0xAuLL);
            v44 = 5;
            v45 = v25;
            v46 = 22;
            v47 = 0;
            v48 = 22;
            v49 = 0;
            v23 = sub_22F18DFA4(a1[4], *(_DWORD *)(v7 + 24), (unsigned __int16 *)&v39, 6);
            if (v24)
            {
LABEL_39:
              v20 = v24;
              v39 = &v41;
              v40 = xmmword_22F44E300;
              if (v24 >= 0x41)
              {
                v19 = (const char *)v23;
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
                v27 = (uint64_t *)v39;
                v26 = v40;
              }
              else
              {
                v26 = 0;
                v27 = &v41;
                v19 = (const char *)v23;
              }
              goto LABEL_42;
            }
          }
          v26 = 0;
          v27 = &v41;
          v39 = &v41;
          v40 = xmmword_22F44E300;
LABEL_42:
          memcpy((char *)v27 + v26, v19, v20);
          v28 = v40 + v20;
          *(_QWORD *)&v40 = v28;
          if (*((_QWORD *)&v40 + 1) < (unint64_t)(v28 + 1))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v28 = v40;
          }
          *((_BYTE *)v39 + v28) = 32;
          *(_QWORD *)&v40 = v40 + 1;
          v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
          v30 = a1[2];
          *(_DWORD *)(v30 + 312) = v29;
          *(_DWORD *)(v30 + 316) = 2374;
          if (*(char *)(v30 + 311) < 0)
          {
            **(_BYTE **)(v30 + 288) = 0;
            *(_QWORD *)(v30 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v30 + 288) = 0;
            *(_BYTE *)(v30 + 311) = 0;
          }
          v37[0] = v30 + 320;
          v37[1] = 0;
          v37[2] = v30;
          v38 = 1;
          *(_BYTE *)(v30 + 320) = 0;
          *(_DWORD *)(v30 + 664) = 0;
          v31 = *(unsigned int *)(v30 + 776);
          if ((_DWORD)v31)
          {
            v32 = *(_QWORD *)(v30 + 768);
            v33 = 56 * v31;
            do
            {
              if (*(char *)(v32 + v33 - 9) < 0)
                operator delete(*(void **)(v32 + v33 - 32));
              v33 -= 56;
            }
            while (v33);
          }
          *(_DWORD *)(v30 + 776) = 0;
          sub_22E729148(v39, v40, v29, 0, (uint64_t)v34);
          sub_22E6D82D0(v37, v34);
          if (v36 < 0)
            operator delete(__p);
          sub_22E3BB0B8((uint64_t)v37);
          if (v39 != &v41)
            free(v39);
        }
      }
    }
  }
}

uint64_t sub_22EFAF0A4(uint64_t *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD v21[3];
  __int16 v22;

  v10 = sub_22E3CD3D4(*a1, 48, 3);
  *(_DWORD *)(v10 + 40) = -1;
  v11 = a2 + 1;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_DWORD *)v10 = a2 + 1;
  *(_DWORD *)(v10 + 4) = a2;
  *(_DWORD *)(v10 + 8) = a3;
  *(_DWORD *)(v10 + 12) = ((a4 & 0xFFFFF) << 8) & 0xEFFFFFFF | ((a5 & 1) << 28) | 2;
  v12 = a1[5];
  if (!v12)
  {
LABEL_7:
    v14 = a1[2];
    *(_DWORD *)(v14 + 312) = v11;
    *(_DWORD *)(v14 + 316) = 2399;
    if (*(char *)(v14 + 311) < 0)
    {
      **(_BYTE **)(v14 + 288) = 0;
      *(_QWORD *)(v14 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v14 + 288) = 0;
      *(_BYTE *)(v14 + 311) = 0;
    }
    v15 = 0;
    v16 = (unsigned __int8 *)(v14 + 320);
    v21[0] = v14 + 320;
    v21[1] = 0;
    v21[2] = v14;
    v22 = 1;
    *(_BYTE *)(v14 + 320) = 0;
    *(_DWORD *)(v14 + 664) = 0;
    v17 = *(unsigned int *)(v14 + 776);
    if ((_DWORD)v17)
    {
      v18 = *(_QWORD *)(v14 + 768);
      v19 = 56 * v17;
      do
      {
        if (*(char *)(v18 + v19 - 9) < 0)
          operator delete(*(void **)(v18 + v19 - 32));
        v19 -= 56;
      }
      while (v19);
      v15 = *v16;
    }
    *(_DWORD *)(v14 + 776) = 0;
    v16[v15 + 1] = 2;
    *(_BYTE *)(v14 + 320) = v15 + 1;
    *(_QWORD *)&v16[8 * v15 + 16] = a5;
    sub_22F3AA1E4(*(_DWORD *)(v10 + 12), *(_QWORD *)(a1[3] + 16));
    sub_22E4D6448(v14 + 656, (*(_DWORD *)(v10 + 4) + 1) | ((unint64_t)(*(_DWORD *)(v10 + 4) + 1 + v20) << 32), 1);
    sub_22E3BB0B8((uint64_t)v21);
    return v10;
  }
  if ((*(_WORD *)(v12 + 48) & 1) == 0)
  {
    sub_22EFA5954(v12);
    v12 = a1[5];
  }
  if (*(_QWORD *)(v12 + 32) <= 0xFuLL)
  {
    v11 = *(_DWORD *)v10;
    goto LABEL_7;
  }
  return v10;
}

uint64_t sub_22EFAF238(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  __int16 v18;

  v3 = result;
  v4 = ((unint64_t)*(unsigned int *)(a2 + 12) >> 8) & 0xFFFFF;
  if (v4 < 0xC6)
    v5 = &(&off_24FAC12E8)[3 * v4];
  else
    v5 = *(char ***)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 8 * v4 - 1584);
  if ((*((_BYTE *)v5 + 20) & 0x40) == 0)
    return result;
  if (((*(_DWORD *)(a2 + 12) >> 8) & 0xFFFFFu) <= 0x43)
  {
    if ((_DWORD)v4 == 14)
    {
      result = sub_22F3A99F4(result);
      if ((result & 1) != 0)
        return result;
      v6 = 4;
      goto LABEL_31;
    }
    if ((_DWORD)v4 == 67)
    {
      result = sub_22F3A9928(result);
      if ((result & 1) == 0)
      {
        result = *(_QWORD *)(v3 + 40);
        if (!result)
          goto LABEL_19;
        if ((*(_WORD *)(result + 48) & 1) == 0)
        {
          sub_22EFA5954(result);
          result = *(_QWORD *)(v3 + 40);
        }
        v7 = *(_QWORD *)(result + 8);
        if (!v7 || (*(_DWORD *)(v7 + 28) & 0x7F) != 0x1D)
        {
LABEL_19:
          v6 = 0;
LABEL_31:
          v9 = *(_QWORD *)(v3 + 16);
          *(_DWORD *)(v9 + 312) = *(_DWORD *)a2;
          *(_DWORD *)(v9 + 316) = 2389;
          if (*(char *)(v9 + 311) < 0)
          {
            **(_BYTE **)(v9 + 288) = 0;
            *(_QWORD *)(v9 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v9 + 288) = 0;
            *(_BYTE *)(v9 + 311) = 0;
          }
          v17[0] = v9 + 320;
          v17[1] = 0;
          v17[2] = v9;
          v18 = 1;
          *(_BYTE *)(v9 + 320) = 0;
          *(_DWORD *)(v9 + 664) = 0;
          v10 = *(unsigned int *)(v9 + 776);
          if ((_DWORD)v10)
          {
            v11 = *(_QWORD *)(v9 + 768);
            v12 = 56 * v10;
            do
            {
              if (*(char *)(v11 + v12 - 9) < 0)
                operator delete(*(void **)(v11 + v12 - 32));
              v12 -= 56;
            }
            while (v12);
            LODWORD(v10) = *(unsigned __int8 *)(v9 + 320);
          }
          *(_DWORD *)(v9 + 776) = 0;
          v13 = ((unint64_t)*(unsigned int *)(a2 + 12) >> 28) & 1;
          v14 = v9 + 321;
          *(_BYTE *)(v9 + 321 + v10) = 2;
          *(_QWORD *)(v9 + 336 + 8 * v10) = v13;
          v15 = (v10 + 1);
          *(_BYTE *)(v14 + v15) = 3;
          *(_QWORD *)(v9 + 336 + 8 * v15) = v6;
          v16 = (v10 + 2);
          *(_BYTE *)(v14 + v16) = 3;
          *(_BYTE *)(v9 + 320) = v10 + 3;
          *(_QWORD *)(v9 + 336 + 8 * v16) = v6;
          sub_22E4D6448(v9 + 656, *(_QWORD *)(a2 + 4), 1);
          return sub_22E3BB0B8((uint64_t)v17);
        }
      }
    }
  }
  else
  {
    if ((_DWORD)v4 != 68)
    {
      if ((_DWORD)v4 == 105)
      {
        result = sub_22F3A9990(result);
        if ((result & 1) != 0)
          return result;
        v6 = 2;
      }
      else
      {
        if ((_DWORD)v4 != 106)
          return result;
        result = sub_22F3A9990(result);
        if ((result & 1) != 0)
          return result;
        v6 = 3;
      }
      goto LABEL_31;
    }
    result = sub_22F3A9928(result);
    if ((result & 1) == 0)
    {
      result = *(_QWORD *)(v3 + 40);
      if (!result)
        goto LABEL_26;
      if ((*(_WORD *)(result + 48) & 1) == 0)
      {
        sub_22EFA5954(result);
        result = *(_QWORD *)(v3 + 40);
      }
      v8 = *(_QWORD *)(result + 8);
      if (!v8 || (*(_DWORD *)(v8 + 28) & 0x7F) != 0x1D)
      {
LABEL_26:
        v6 = 1;
        goto LABEL_31;
      }
    }
  }
  return result;
}

uint64_t sub_22EFAF488(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  __int16 v19;

  v3 = result;
  v4 = ((unint64_t)*(unsigned int *)(a2 + 12) >> 8) & 0xFFFFF;
  if (v4 < 0xC6)
    v5 = &(&off_24FAC12E8)[3 * v4];
  else
    v5 = *(char ***)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 8 * v4 - 1584);
  if ((*((_BYTE *)v5 + 21) & 1) == 0)
    return result;
  if (((*(_DWORD *)(a2 + 12) >> 8) & 0xFFFFFu) <= 0x83)
  {
    if ((_DWORD)v4 == 18)
    {
      result = sub_22EFAF720(result);
      if ((result & 1) == 0)
      {
        result = *(_QWORD *)(v3 + 40);
        if (!result)
          goto LABEL_38;
        if ((*(_WORD *)(result + 48) & 1) == 0)
        {
          sub_22EFA5954(result);
          result = *(_QWORD *)(v3 + 40);
        }
        v9 = *(_QWORD *)(result + 8);
        if (!v9 || (*(_DWORD *)(v9 + 28) & 0x7F) != 0x1C)
        {
          if ((*(_BYTE *)(a2 + 15) & 0x10) == 0)
            goto LABEL_38;
          if ((*(_WORD *)(result + 48) & 1) == 0)
          {
            result = sub_22EFA5954(result);
            v9 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
          }
          if (!v9 || (*(_DWORD *)(v9 + 28) & 0x7F) != 0x16)
          {
LABEL_38:
            v6 = 0;
            goto LABEL_39;
          }
        }
      }
    }
    else if ((_DWORD)v4 == 89)
    {
      result = *(_QWORD *)(result + 40);
      if (!result)
        goto LABEL_18;
      if ((*(_WORD *)(result + 48) & 1) == 0)
      {
        sub_22EFA5954(result);
        result = *(_QWORD *)(v3 + 40);
      }
      v7 = *(_QWORD *)(result + 8);
      if (!v7 || (*(_DWORD *)(v7 + 28) & 0x7F) != 0x16)
      {
LABEL_18:
        v6 = 1;
LABEL_39:
        v10 = *(_QWORD *)(v3 + 16);
        *(_DWORD *)(v10 + 312) = *(_DWORD *)a2;
        *(_DWORD *)(v10 + 316) = 2384;
        if (*(char *)(v10 + 311) < 0)
        {
          **(_BYTE **)(v10 + 288) = 0;
          *(_QWORD *)(v10 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v10 + 288) = 0;
          *(_BYTE *)(v10 + 311) = 0;
        }
        v18[0] = v10 + 320;
        v18[1] = 0;
        v18[2] = v10;
        v19 = 1;
        *(_BYTE *)(v10 + 320) = 0;
        *(_DWORD *)(v10 + 664) = 0;
        v11 = *(unsigned int *)(v10 + 776);
        if ((_DWORD)v11)
        {
          v12 = *(_QWORD *)(v10 + 768);
          v13 = 56 * v11;
          do
          {
            if (*(char *)(v12 + v13 - 9) < 0)
              operator delete(*(void **)(v12 + v13 - 32));
            v13 -= 56;
          }
          while (v13);
          LODWORD(v11) = *(unsigned __int8 *)(v10 + 320);
        }
        *(_DWORD *)(v10 + 776) = 0;
        v14 = ((unint64_t)*(unsigned int *)(a2 + 12) >> 28) & 1;
        v15 = v10 + 321;
        *(_BYTE *)(v10 + 321 + v11) = 2;
        *(_QWORD *)(v10 + 336 + 8 * v11) = v14;
        v16 = (v11 + 1);
        *(_BYTE *)(v15 + v16) = 3;
        *(_QWORD *)(v10 + 336 + 8 * v16) = v6;
        v17 = (v11 + 2);
        *(_BYTE *)(v15 + v17) = 3;
        *(_BYTE *)(v10 + 320) = v11 + 3;
        *(_QWORD *)(v10 + 336 + 8 * v17) = v6;
        sub_22E4D6448(v10 + 656, *(_QWORD *)(a2 + 4), 1);
        return sub_22E3BB0B8((uint64_t)v18);
      }
    }
  }
  else
  {
    if ((_DWORD)v4 != 132)
    {
      if ((_DWORD)v4 == 167)
      {
        result = sub_22EFAF720(result);
        if ((result & 1) != 0)
          return result;
        v6 = 3;
      }
      else
      {
        if ((_DWORD)v4 != 185)
          return result;
        result = sub_22EFAF818(result);
        if ((result & 1) != 0)
          return result;
        v6 = 4;
      }
      goto LABEL_39;
    }
    result = *(_QWORD *)(result + 40);
    if (!result)
      goto LABEL_24;
    if ((*(_WORD *)(result + 48) & 1) == 0)
    {
      sub_22EFA5954(result);
      result = *(_QWORD *)(v3 + 40);
    }
    v8 = *(_QWORD *)(result + 8);
    if (!v8 || (*(_DWORD *)(v8 + 28) & 0x7F) != 0x17)
    {
LABEL_24:
      v6 = 2;
      goto LABEL_39;
    }
  }
  return result;
}

uint64_t sub_22EFAF720(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v7;

  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    if ((*(_WORD *)(result + 48) & 1) == 0)
    {
      sub_22EFA5954(result);
      result = *(_QWORD *)(a1 + 40);
    }
    v3 = *(_QWORD *)(result + 8);
    if (v3)
    {
      v4 = *(_DWORD *)(v3 + 28);
      if ((v4 & 0x7Eu) - 38 >= 0xFFFFFFFC && (*(_DWORD *)(v3 + 72) & 0xE000) != 0x4000)
        return 1;
      if ((v4 & 0x7F) == 0x29)
      {
        v5 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v3 + 80) & 0xFFFFFFFFFFFFFFF8)
                                   + ((2 * *(_QWORD *)(v3 + 80)) & 8)) & 0xFFFFFFFFFFFFFFF0);
        if (v5 && *(_BYTE *)(v5 + 16) == 24)
        {
          v7 = *(_QWORD *)(v5 + 40);
          if (v7 >= 0x10)
          {
            result = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
            if (!result)
              return result;
            if (*(_BYTE *)(result + 16) == 45)
            {
              result = sub_22F10C2A4(result);
              if (!result)
                return result;
              if ((*(_DWORD *)(result + 28) & 0x7Eu) - 34 <= 3)
                return (*(_DWORD *)(result + 72) & 0xE000) != 0x4000;
            }
          }
        }
      }
    }
    return 0;
  }
  return result;
}

unint64_t sub_22EFAF818(uint64_t a1)
{
  unint64_t result;
  uint64_t v3;

  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    if ((*(_WORD *)(result + 48) & 1) == 0)
    {
      sub_22EFA5954(result);
      result = *(_QWORD *)(a1 + 40);
    }
    v3 = *(_QWORD *)(result + 8);
    return v3 && (*(_DWORD *)(v3 + 28) & 0x7Eu) - 34 <= 3 && (*(_DWORD *)(v3 + 72) & 0xE000) == 0x4000;
  }
  return result;
}

void sub_22EFAF880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v7;
  std::string::size_type v8;
  std::string::size_type size;
  std::string *v10;
  std::string::size_type v11;
  uint64_t v12;
  int v13;
  std::string *v14;
  uint64_t v15;
  std::string *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  uint64_t v23;
  char *v24;
  std::string v25;
  _QWORD v26[2];

  v26[0] = a5;
  v26[1] = a6;
  llvm::StringRef::lower((llvm::StringRef *)v26);
  v7 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  size = v25.__r_.__value_.__l.__size_;
  v8 = v25.__r_.__value_.__r.__words[0];
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v25;
  else
    v10 = (std::string *)v25.__r_.__value_.__r.__words[0];
  v11 = *((_BYTE *)&v25.__r_.__value_.__s + 23) & 0x7F;
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = *((_BYTE *)&v25.__r_.__value_.__s + 23) & 0x7F;
  else
    v12 = v25.__r_.__value_.__l.__size_;
  v13 = sub_22EFAFC5C((uint64_t)v10, v12);
  if (v13 == -1)
  {
    if (!v12)
      goto LABEL_19;
    v14 = (std::string *)((char *)v10 + v12);
    v15 = v12 - 1;
    v16 = v10;
    do
    {
      v17 = v16->__r_.__value_.__s.__data_[0];
      v16 = (std::string *)((char *)v16 + 1);
      if ((word_22F4ADB24[v17] & 7) != 0)
        break;
      --v15;
      v10 = v16;
    }
    while (v16 != v14);
    if (v16 == v14)
    {
LABEL_19:
      v14 = v10;
    }
    else
    {
      v18 = 1;
      v14 = v10;
      do
      {
        v19 = v10->__r_.__value_.__s.__data_[v18];
        if ((word_22F4ADB24[v19] & 7) == 0)
        {
          v14->__r_.__value_.__s.__data_[0] = v19;
          v14 = (std::string *)((char *)v14 + 1);
        }
        ++v18;
        --v15;
      }
      while (v15);
      v7 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
      size = v25.__r_.__value_.__l.__size_;
      v8 = v25.__r_.__value_.__r.__words[0];
      v11 = *((_BYTE *)&v25.__r_.__value_.__s + 23) & 0x7F;
    }
    if (v7 >= 0)
      v20 = &v25;
    else
      v20 = (std::string *)v8;
    if (v7 >= 0)
      v21 = v11;
    else
      v21 = size;
    std::string::erase(&v25, (char *)v14 - (char *)v20, (char *)v20 + v21 - (char *)v14);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v25;
    else
      v22 = (std::string *)v25.__r_.__value_.__r.__words[0];
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = *((_BYTE *)&v25.__r_.__value_.__s + 23) & 0x7F;
    else
      v23 = v25.__r_.__value_.__l.__size_;
    v24 = (char *)&loc_22EFAF9EC + 4 * byte_22F4A1690[sub_22EFAFC5C((uint64_t)v22, v23) + 1];
    __asm { BR              X10 }
  }
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0x1FFFFFFF | (v13 << 29) | 0x80000000;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

uint64_t sub_22EFAFC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a2 == 8)
  {
    v2 = 0x100000002;
    if (*(_QWORD *)a1 != 0x5D74756F2C6E695BLL && *(_QWORD *)a1 != 0x5D6E692C74756F5BLL)
      v2 = 0;
  }
  else
  {
    if (a2 != 5)
    {
      if (a2 == 4 && *(_DWORD *)a1 == 1567517019)
      {
        v2 = 0x100000000;
        goto LABEL_15;
      }
      goto LABEL_14;
    }
    if (*(_DWORD *)a1 != 1953853275 || *(_BYTE *)(a1 + 4) != 93)
    {
LABEL_14:
      v2 = 0;
      goto LABEL_15;
    }
    v2 = 0x100000001;
  }
LABEL_15:
  if ((v2 & 0x100000000) != 0)
    return v2;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_22EFAFD0C(uint64_t *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v10;
  int v11;
  unint64_t v12;
  __int16 v13;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD v22[3];
  __int16 v23;

  v10 = sub_22E3CD3D4(*a1, 56, 3);
  *(_DWORD *)(v10 + 4) = a2;
  *(_DWORD *)(v10 + 8) = a3;
  *(_BYTE *)(v10 + 12) = 3;
  v11 = a2 + 1;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_DWORD *)v10 = a2 + 1;
  *(_DWORD *)(v10 + 12) = ((a4 & 0xFFFFF) << 8) & 0xEFFFFFFF | ((a5 & 1) << 28) | *(_DWORD *)(v10 + 12) & 0xE00000FF;
  *(_QWORD *)(v10 + 40) = 0;
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  v12 = a1[5];
  if (!v12)
  {
LABEL_7:
    v15 = a1[2];
    *(_DWORD *)(v15 + 312) = v11;
    *(_DWORD *)(v15 + 316) = 2405;
    if (*(char *)(v15 + 311) < 0)
    {
      **(_BYTE **)(v15 + 288) = 0;
      *(_QWORD *)(v15 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v15 + 288) = 0;
      *(_BYTE *)(v15 + 311) = 0;
    }
    v16 = 0;
    v17 = (unsigned __int8 *)(v15 + 320);
    v22[0] = v15 + 320;
    v22[1] = 0;
    v22[2] = v15;
    v23 = 1;
    *(_BYTE *)(v15 + 320) = 0;
    *(_DWORD *)(v15 + 664) = 0;
    v18 = *(unsigned int *)(v15 + 776);
    if ((_DWORD)v18)
    {
      v19 = *(_QWORD *)(v15 + 768);
      v20 = 56 * v18;
      do
      {
        if (*(char *)(v19 + v20 - 9) < 0)
          operator delete(*(void **)(v19 + v20 - 32));
        v20 -= 56;
      }
      while (v20);
      v16 = *v17;
    }
    *(_DWORD *)(v15 + 776) = 0;
    v17[v16 + 1] = 2;
    *(_BYTE *)(v15 + 320) = v16 + 1;
    *(_QWORD *)&v17[8 * v16 + 16] = a5;
    sub_22F3AA1E4(*(_DWORD *)(v10 + 12), *(_QWORD *)(a1[3] + 16));
    sub_22E4D6448(v15 + 656, (*(_DWORD *)(v10 + 4) + 1) | ((unint64_t)(*(_DWORD *)(v10 + 4) + 1 + v21) << 32), 1);
    sub_22E3BB0B8((uint64_t)v22);
    return v10;
  }
  v13 = *(_WORD *)(v12 + 48);
  if ((v13 & 1) == 0)
  {
    sub_22EFA5954(v12);
    v13 = *(_WORD *)(a1[5] + 48);
  }
  if ((v13 & 0x30) == 0)
  {
    v11 = *(_DWORD *)v10;
    goto LABEL_7;
  }
  return v10;
}

void sub_22EFAFEB0(uint64_t *a1, _QWORD *a2, unsigned int a3, uint64_t a4, void *a5, size_t a6)
{
  _QWORD *v12;
  unsigned __int8 *v13;
  unint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  size_t v25;
  void *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *p_dst;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  _DWORD *v39;
  int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  __int128 v54;
  __int128 __p;
  unint64_t v56;
  char v57;
  unsigned __int8 *v58[3];
  __int16 v59;
  __int128 __dst;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  _QWORD v64[2];

  v64[1] = *MEMORY[0x24BDAC8D0];
  v12 = (_QWORD *)sub_22E3CD3D4(*a1, 24, 3);
  v13 = (unsigned __int8 *)(a3 | ((unint64_t)a4 << 32));
  *v12 = v13;
  v12[1] = a5;
  v12[2] = a6;
  a2[2] = v12;
  a2[3] = 1;
  if ((_DWORD)a4)
    *(_QWORD *)((char *)a2 + 4) = (a4 << 32) | *((unsigned int *)a2 + 1);
  v14 = a1[5];
  if (v14)
  {
    v15 = *(_WORD *)(v14 + 48);
    if ((v15 & 1) == 0)
    {
      sub_22EFA5954(v14);
      v14 = a1[5];
      v15 = *(_WORD *)(v14 + 48);
    }
    if ((v15 & 0x30) != 0)
    {
      v16 = *(_QWORD *)(v14 + 40);
      v62 = v64;
      v63 = 0x200000000;
      if (v16 && sub_22EFB154C(a5, a6, v16, (uint64_t)&v62))
      {
        v35 = v63;
        if ((_DWORD)v63)
        {
          v37 = (int *)v62;
          v38 = 4 * v63;
          v36 = sub_22E3CD3D4(*a1, v38, 2);
          v39 = (_DWORD *)v36;
          do
          {
            v40 = *v37++;
            *v39++ = v40;
            v38 -= 4;
          }
          while (v38);
        }
        else
        {
          v36 = 0;
        }
        a2[5] = v36;
        a2[6] = v35;
        v41 = sub_22E3B4314((llvm::StringMapImpl *)(a1 + 6), a5, a6);
        v42 = *v41;
        if (*(_QWORD *)(*v41 + 8))
        {
          v43 = a1[2];
          *(_DWORD *)(v43 + 312) = a3;
          *(_DWORD *)(v43 + 316) = 2404;
          if (*(char *)(v43 + 311) < 0)
          {
            **(_BYTE **)(v43 + 288) = 0;
            *(_QWORD *)(v43 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v43 + 288) = 0;
            *(_BYTE *)(v43 + 311) = 0;
          }
          v53 = (unsigned __int8 *)(v43 + 320);
          *(_QWORD *)&v54 = 0;
          *((_QWORD *)&v54 + 1) = v43;
          LOWORD(__p) = 1;
          *(_BYTE *)(v43 + 320) = 0;
          *(_DWORD *)(v43 + 664) = 0;
          v45 = *(unsigned int *)(v43 + 776);
          if ((_DWORD)v45)
          {
            v46 = *(_QWORD *)(v43 + 768);
            v47 = 56 * v45;
            do
            {
              if (*(char *)(v46 + v47 - 9) < 0)
                operator delete(*(void **)(v46 + v47 - 32));
              v47 -= 56;
            }
            while (v47);
          }
          *(_DWORD *)(v43 + 776) = 0;
          sub_22E3B89A8(&v53, a5, a6);
          v48 = v53;
          if (!v53)
          {
            v48 = (unsigned __int8 *)sub_22E3B8AAC(v54);
            v53 = v48;
          }
          sub_22E4D6448((uint64_t)(v48 + 336), (uint64_t)v13, 1);
          sub_22E3BB0B8((uint64_t)&v53);
          v49 = a1[2];
          *(_DWORD *)(v49 + 312) = **(_DWORD **)(v42 + 8);
          *(_DWORD *)(v49 + 316) = 2382;
          if (*(char *)(v49 + 311) < 0)
          {
            **(_BYTE **)(v49 + 288) = 0;
            *(_QWORD *)(v49 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v49 + 288) = 0;
            *(_BYTE *)(v49 + 311) = 0;
          }
          v53 = (unsigned __int8 *)(v49 + 320);
          *(_QWORD *)&v54 = 0;
          *((_QWORD *)&v54 + 1) = v49;
          LOWORD(__p) = 1;
          *(_BYTE *)(v49 + 320) = 0;
          *(_DWORD *)(v49 + 664) = 0;
          v50 = *(unsigned int *)(v49 + 776);
          if ((_DWORD)v50)
          {
            v51 = *(_QWORD *)(v49 + 768);
            v52 = 56 * v50;
            do
            {
              if (*(char *)(v51 + v52 - 9) < 0)
                operator delete(*(void **)(v51 + v52 - 32));
              v52 -= 56;
            }
            while (v52);
          }
          *(_DWORD *)(v49 + 776) = 0;
          sub_22E4D6448(v49 + 656, **(_QWORD **)(*(_QWORD *)(v42 + 8) + 16), 1);
          sub_22E3BB0B8((uint64_t)&v53);
        }
        *(_QWORD *)(v42 + 8) = a2;
        goto LABEL_69;
      }
      v17 = a1[2];
      *(_DWORD *)(v17 + 312) = a3;
      *(_DWORD *)(v17 + 316) = 2406;
      if (*(char *)(v17 + 311) < 0)
      {
        **(_BYTE **)(v17 + 288) = 0;
        *(_QWORD *)(v17 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v17 + 288) = 0;
        *(_BYTE *)(v17 + 311) = 0;
      }
      v53 = (unsigned __int8 *)(v17 + 320);
      *(_QWORD *)&v54 = 0;
      *((_QWORD *)&v54 + 1) = v17;
      LOWORD(__p) = 1;
      *(_BYTE *)(v17 + 320) = 0;
      *(_DWORD *)(v17 + 664) = 0;
      v18 = *(unsigned int *)(v17 + 776);
      if ((_DWORD)v18)
      {
        v19 = *(_QWORD *)(v17 + 768);
        v20 = 56 * v18;
        do
        {
          if (*(char *)(v19 + v20 - 9) < 0)
            operator delete(*(void **)(v19 + v20 - 32));
          v20 -= 56;
        }
        while (v20);
      }
      *(_DWORD *)(v17 + 776) = 0;
      sub_22E3B89A8(&v53, a5, a6);
      v21 = v53;
      if (!v53)
      {
        v21 = (unsigned __int8 *)sub_22E3B8AAC(v54);
        v53 = v21;
      }
      sub_22E4D6448((uint64_t)(v21 + 336), (uint64_t)v13, 1);
      sub_22E3BB0B8((uint64_t)&v53);
      if (v16 && (*(_DWORD *)(v16 + 12) & 0x1FFFFFFF) != 0)
      {
        if ((*(_DWORD *)(v16 + 12) & 0x1FFFFFFF) == 1)
        {
          v22 = *(_QWORD *)(*(_QWORD *)(v16 + 16) + 40);
          if ((v22 & 7) == 0)
          {
            v23 = v22 & 0xFFFFFFFFFFFFFFF8;
            if (v23)
            {
              v24 = *(unsigned int **)(v23 + 16);
              v27 = *v24;
              v26 = v24 + 4;
              v25 = v27;
              if (v27)
              {
LABEL_25:
                v28 = a1[2];
                *(_DWORD *)(v28 + 312) = a3;
                *(_DWORD *)(v28 + 316) = 2381;
                if (*(char *)(v28 + 311) < 0)
                {
                  **(_BYTE **)(v28 + 288) = 0;
                  *(_QWORD *)(v28 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v28 + 288) = 0;
                  *(_BYTE *)(v28 + 311) = 0;
                }
                v58[0] = (unsigned __int8 *)(v28 + 320);
                v58[1] = 0;
                v58[2] = (unsigned __int8 *)v28;
                v59 = 1;
                *(_BYTE *)(v28 + 320) = 0;
                *(_DWORD *)(v28 + 664) = 0;
                v29 = *(unsigned int *)(v28 + 776);
                if ((_DWORD)v29)
                {
                  v30 = *(_QWORD *)(v28 + 768);
                  v31 = 56 * v29;
                  do
                  {
                    if (*(char *)(v30 + v31 - 9) < 0)
                      operator delete(*(void **)(v30 + v31 - 32));
                    v31 -= 56;
                  }
                  while (v31);
                }
                *(_DWORD *)(v28 + 776) = 0;
                sub_22E3B89A8(v58, v26, v25);
                BYTE12(v54) = 0;
                *(_QWORD *)((char *)&v54 + 4) = 0;
                v57 = 0;
                v53 = v13;
                LOBYTE(v54) = 1;
                if (v25 >= 0x7FFFFFFFFFFFFFF8)
                  abort();
                if (v25 >= 0x17)
                {
                  v33 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v25 | 7) != 0x17)
                    v33 = v25 | 7;
                  v34 = v33 + 1;
                  p_dst = (__int128 *)operator new(v33 + 1);
                  *((_QWORD *)&__dst + 1) = v25;
                  v61 = v34 | 0x8000000000000000;
                  *(_QWORD *)&__dst = p_dst;
                }
                else
                {
                  HIBYTE(v61) = v25;
                  p_dst = &__dst;
                }
                memmove(p_dst, v26, v25);
                *((_BYTE *)p_dst + v25) = 0;
                __p = __dst;
                v56 = v61;
                sub_22E6D82D0((uint64_t *)v58, &v53);
                if (SHIBYTE(v56) < 0)
                  operator delete((void *)__p);
                sub_22E3BB0B8((uint64_t)v58);
              }
            }
          }
        }
        else
        {
          v26 = (void *)sub_22F3A9BC0((uint64_t)a5, a6, v16);
          v25 = v44;
          if (v44)
            goto LABEL_25;
        }
      }
LABEL_69:
      if (v62 != v64)
        free(v62);
    }
  }
}

uint64_t sub_22EFB0404(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned int v3;
  unint64_t v4;
  BOOL v5;

  switch(a3)
  {
    case 6:
      if (*(_DWORD *)a2 ^ 0x68636E61 | *((unsigned __int16 *)a2 + 2) ^ 0x726F)
        v4 = 0;
      else
        v4 = 0x100000004;
      break;
    case 2:
      v4 = 0x100000003;
      if (*(_WORD *)a2 != 28005)
        v4 = 0;
      break;
    case 1:
      v3 = *a2;
      if (v3 > 0x62)
      {
        if (v3 == 99 || v3 == 112)
        {
          v4 = 0x100000002;
          break;
        }
      }
      else
      {
        if (v3 == 97)
        {
          v4 = 0x100000003;
          break;
        }
        if (v3 == 98)
        {
          v4 = 0x100000001;
          break;
        }
      }
      v5 = v3 == 101;
      v4 = 0x100000003;
      if (!v5)
        v4 = 0;
      break;
    default:
      v4 = 0;
      break;
  }
  if (v4 <= 0x100000000)
    return 0x100000000;
  else
    return v4;
}

BOOL sub_22EFB04E4(char *a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;

  if (a2 != 3)
  {
    if (a2 == 2)
    {
      v2 = *a1;
      if ((v2 == 104 || v2 == 98) && a1[1] == 114)
        return 1;
    }
    return 0;
  }
  v3 = *a1;
  if (v3 == 105)
  {
    v4 = *(unsigned __int16 *)(a1 + 1);
    v5 = 26477;
  }
  else
  {
    if (v3 != 99)
      return 0;
    v4 = *(unsigned __int16 *)(a1 + 1);
    v5 = 27759;
  }
  return v4 == v5;
}

uint64_t sub_22EFB0558(uint64_t a1, int a2, int a3, void *a4, size_t a5)
{
  uint64_t v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;

  v10 = sub_22E3CD3D4(*(_QWORD *)a1, 40, 3);
  v11 = a2 + 2;
  *(_DWORD *)(v10 + 4) = a2;
  *(_DWORD *)(v10 + 8) = a3;
  *(_BYTE *)(v10 + 12) = 8;
  v12 = *(_WORD *)(v10 + 12);
  *(_QWORD *)(v10 + 16) = a4;
  *(_QWORD *)(v10 + 24) = a5;
  *(_DWORD *)(v10 + 32) = a2 + 2;
  *(_DWORD *)(v10 + 36) = a2 + 2 + a5;
  *(_DWORD *)v10 = a2 + 2;
  *(_WORD *)(v10 + 12) = v12 & 0xFCFF;
  if (!sub_22EFB04E4((char *)a4, a5))
  {
    v14 = *(unsigned int *)(a1 + 104);
    if (!(_DWORD)v14)
    {
LABEL_10:
      v18 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)(v18 + 312) = v11;
      *(_DWORD *)(v18 + 316) = 2391;
      if (*(char *)(v18 + 311) < 0)
      {
        **(_BYTE **)(v18 + 288) = 0;
        *(_QWORD *)(v18 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v18 + 288) = 0;
        *(_BYTE *)(v18 + 311) = 0;
      }
      v54 = (unsigned __int8 *)(v18 + 320);
      v55 = 0;
      v56 = v18;
      v57 = 1;
      *(_BYTE *)(v18 + 320) = 0;
      *(_DWORD *)(v18 + 664) = 0;
      v50 = *(unsigned int *)(v18 + 776);
      if ((_DWORD)v50)
      {
        v51 = *(_QWORD *)(v18 + 768);
        v52 = 56 * v50;
        do
        {
          if (*(char *)(v51 + v52 - 9) < 0)
            operator delete(*(void **)(v51 + v52 - 32));
          v52 -= 56;
        }
        while (v52);
      }
      *(_DWORD *)(v18 + 776) = 0;
      v49 = *(_QWORD *)(v10 + 4);
      v48 = v18 + 656;
      goto LABEL_76;
    }
    v15 = 8 * v14;
    v16 = *(_QWORD *)(a1 + 96) - 8;
    while (1)
    {
      v17 = *(_QWORD *)(v16 + v15);
      if (*(_QWORD *)(v17 + 24) == a5 && (!a5 || !memcmp(*(const void **)(v17 + 16), a4, a5)))
        break;
      v15 -= 8;
      if (!v15)
        goto LABEL_10;
    }
    while (1)
    {
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v14 - 8);
      LODWORD(v14) = v14 - 1;
      *(_DWORD *)(a1 + 104) = v14;
      v20 = *(char **)(v19 + 16);
      v21 = *(_QWORD *)(v19 + 24);
      if (v21 == a5 && (!a5 || !memcmp(*(const void **)(v19 + 16), a4, a5)))
      {
        if ((*(_WORD *)(v19 + 12) & 0x200) == 0)
          return v10;
        goto LABEL_77;
      }
      if (!sub_22EFB0AB8(v20, v21))
        break;
LABEL_58:
      if (!(_DWORD)v14)
        return v10;
    }
    sub_22F1E2F68(*(_QWORD *)(a1 + 8), *(_DWORD *)v19, 1, (uint64_t)&v54);
    v22 = v54;
    if (v54)
      v23 = HIDWORD(v55);
    else
      v23 = 0;
    sub_22F1E2F68(*(_QWORD *)(a1 + 8), *(_DWORD *)v10, 1, (uint64_t)&v54);
    v24 = HIDWORD(v55);
    if (!v54)
      v24 = 0;
    if (v22 && v54 && v23 != v24)
    {
      v25 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)(v25 + 312) = *(_DWORD *)v19;
      *(_DWORD *)(v25 + 316) = 2393;
      if (*(char *)(v25 + 311) < 0)
      {
        **(_BYTE **)(v25 + 288) = 0;
        *(_QWORD *)(v25 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v25 + 288) = 0;
        *(_BYTE *)(v25 + 311) = 0;
      }
      v54 = (unsigned __int8 *)(v25 + 320);
      v55 = 0;
      v56 = v25;
      v57 = 1;
      *(_BYTE *)(v25 + 320) = 0;
      *(_DWORD *)(v25 + 664) = 0;
      v27 = *(unsigned int *)(v25 + 776);
      if ((_DWORD)v27)
      {
        v28 = *(_QWORD *)(v25 + 768);
        v29 = 56 * v27;
        do
        {
          if (*(char *)(v28 + v29 - 9) < 0)
            operator delete(*(void **)(v28 + v29 - 32));
          v29 -= 56;
        }
        while (v29);
      }
      *(_DWORD *)(v25 + 776) = 0;
      sub_22E3B89A8(&v54, *(void **)(v19 + 16), *(_QWORD *)(v19 + 24));
      sub_22E3B89A8(&v54, *(void **)(v10 + 16), *(_QWORD *)(v10 + 24));
      v30 = *(_QWORD *)(v19 + 4);
      v31 = v54;
      if (!v54)
      {
        v31 = (unsigned __int8 *)sub_22E3B8AAC(v55);
        v54 = v31;
      }
      sub_22E4D6448((uint64_t)(v31 + 336), v30, 1);
      sub_22E3BB0B8((uint64_t)&v54);
      v32 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)(v32 + 312) = *(_DWORD *)v10;
      *(_DWORD *)(v32 + 316) = 2377;
      if (*(char *)(v32 + 311) < 0)
      {
        **(_BYTE **)(v32 + 288) = 0;
        *(_QWORD *)(v32 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v32 + 288) = 0;
        *(_BYTE *)(v32 + 311) = 0;
      }
      v39 = (unsigned __int8 *)(v32 + 320);
      v54 = (unsigned __int8 *)(v32 + 320);
      v55 = 0;
      v56 = v32;
      v57 = 1;
      *(_BYTE *)(v32 + 320) = 0;
      *(_DWORD *)(v32 + 664) = 0;
      v40 = *(unsigned int *)(v32 + 776);
      if (!(_DWORD)v40)
      {
        *(_DWORD *)(v32 + 776) = 0;
        v38 = *(_QWORD *)(v10 + 4);
        goto LABEL_57;
      }
      v41 = *(_QWORD *)(v32 + 768);
      v42 = 56 * v40;
      do
      {
        if (*(char *)(v41 + v42 - 9) < 0)
          operator delete(*(void **)(v41 + v42 - 32));
        v42 -= 56;
      }
      while (v42);
      v39 = v54;
      *(_DWORD *)(v32 + 776) = 0;
      v38 = *(_QWORD *)(v10 + 4);
      if (v39)
        goto LABEL_57;
    }
    else
    {
      v26 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)(v26 + 312) = *(_DWORD *)v19;
      *(_DWORD *)(v26 + 316) = 2393;
      if (*(char *)(v26 + 311) < 0)
      {
        **(_BYTE **)(v26 + 288) = 0;
        *(_QWORD *)(v26 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v26 + 288) = 0;
        *(_BYTE *)(v26 + 311) = 0;
      }
      v54 = (unsigned __int8 *)(v26 + 320);
      v55 = 0;
      v56 = v26;
      v57 = 1;
      *(_BYTE *)(v26 + 320) = 0;
      *(_DWORD *)(v26 + 664) = 0;
      v33 = *(unsigned int *)(v26 + 776);
      if ((_DWORD)v33)
      {
        v34 = *(_QWORD *)(v26 + 768);
        v35 = 56 * v33;
        do
        {
          if (*(char *)(v34 + v35 - 9) < 0)
            operator delete(*(void **)(v34 + v35 - 32));
          v35 -= 56;
        }
        while (v35);
      }
      *(_DWORD *)(v26 + 776) = 0;
      sub_22E3B89A8(&v54, *(void **)(v19 + 16), *(_QWORD *)(v19 + 24));
      sub_22E3B89A8(&v54, *(void **)(v10 + 16), *(_QWORD *)(v10 + 24));
      v36 = *(_QWORD *)(v19 + 4);
      v37 = v54;
      if (!v54)
      {
        v37 = (unsigned __int8 *)sub_22E3B8AAC(v55);
        v54 = v37;
      }
      sub_22E4D6448((uint64_t)(v37 + 336), v36, 1);
      v38 = *(_QWORD *)(v10 + 4);
      v39 = v54;
      if (v54)
        goto LABEL_57;
    }
    v39 = (unsigned __int8 *)sub_22E3B8AAC(v55);
    v54 = v39;
LABEL_57:
    sub_22E4D6448((uint64_t)(v39 + 336), v38, 1);
    sub_22E3BB0B8((uint64_t)&v54);
    *(_WORD *)(v19 + 12) |= 0x200u;
    LODWORD(v14) = *(_DWORD *)(a1 + 104);
    goto LABEL_58;
  }
  v13 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(v13 + 312) = v11;
  *(_DWORD *)(v13 + 316) = 2390;
  if (*(char *)(v13 + 311) < 0)
  {
    **(_BYTE **)(v13 + 288) = 0;
    *(_QWORD *)(v13 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v13 + 288) = 0;
    *(_BYTE *)(v13 + 311) = 0;
  }
  v54 = (unsigned __int8 *)(v13 + 320);
  v55 = 0;
  v56 = v13;
  v57 = 1;
  *(_BYTE *)(v13 + 320) = 0;
  *(_DWORD *)(v13 + 664) = 0;
  v43 = *(unsigned int *)(v13 + 776);
  if ((_DWORD)v43)
  {
    v44 = *(_QWORD *)(v13 + 768);
    v45 = 56 * v43;
    do
    {
      if (*(char *)(v44 + v45 - 9) < 0)
        operator delete(*(void **)(v44 + v45 - 32));
      v45 -= 56;
    }
    while (v45);
  }
  *(_DWORD *)(v13 + 776) = 0;
  sub_22E3B89A8(&v54, a4, a5);
  v46 = *(_QWORD *)(v10 + 4);
  v47 = v54;
  if (!v54)
  {
    v47 = (unsigned __int8 *)sub_22E3B8AAC(v55);
    v54 = v47;
  }
  v48 = (uint64_t)(v47 + 336);
  v49 = v46;
LABEL_76:
  sub_22E4D6448(v48, v49, 1);
  sub_22E3BB0B8((uint64_t)&v54);
LABEL_77:
  *(_WORD *)(v10 + 12) |= 0x200u;
  return v10;
}

BOOL sub_22EFB0AB8(char *a1, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  int v5;
  int v6;
  unsigned int v8;

  switch(a2)
  {
    case 1:
      return *a1 == 112;
    case 2:
      v6 = *a1;
      if (v6 == 116)
      {
        v8 = a1[1] - 100;
        if (v8 >= 0xF)
          return 0;
        return (0x4011u >> v8) & 1;
      }
      if (v6 != 108)
      {
        if (v6 != 100)
          return 0;
        return ((a1[1] - 100) & 0xFFFFFFEF) == 0;
      }
      return a1[1] == 105;
    case 5:
      if (*a1 != 116)
        return 0;
      v2 = a1[1];
      switch(v2)
      {
        case 'h':
          v3 = a1[4];
          v4 = *((unsigned __int16 *)a1 + 1) == 24933;
          v5 = 100;
          break;
        case 'f':
          v3 = a1[4];
          v4 = *((unsigned __int16 *)a1 + 1) == 28527;
          v5 = 116;
          break;
        case 'b':
          v3 = a1[4];
          v4 = *((unsigned __int16 *)a1 + 1) == 25711;
          v5 = 121;
          break;
        default:
          return 0;
      }
      return v4 && v3 == v5;
    case 8:
      return *(_QWORD *)a1 == 0x70756F72676C6F63;
    default:
      return 0;
  }
}

uint64_t sub_22EFB0BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _WORD *v19;
  size_t v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t i;
  uint64_t v43;
  unsigned __int8 *v44;
  void *v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  size_t v61;
  const void *v62;
  unsigned int v63;
  __int128 *p_dst;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 *v79;
  __int128 v80;
  __int128 __p;
  uint64_t v82;
  char v83;
  unsigned __int8 *v84[3];
  __int16 v85;
  __int128 __dst;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  __int16 v91;
  void *v92;
  uint64_t v93;
  _BYTE v94[64];
  unsigned __int8 *v95;
  uint64_t v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v6 = sub_22E3CD3D4(*(_QWORD *)a1, 40, 3);
  v7 = v6;
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v6 = 0;
  *(_DWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 12) = 7;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  *(_QWORD *)(v6 + 32) = v8;
  if (a3)
  {
    *(_QWORD *)(v6 + 4) = *(unsigned int *)(*(_QWORD *)a2 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 + 8 * a3 - 8) + 8) << 32);
    *(_DWORD *)v6 = *(_DWORD *)(*(_QWORD *)a2 + 4);
  }
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    if ((*(_WORD *)(v9 + 48) & 1) == 0)
    {
      sub_22EFA5954(v9);
      v9 = *(_QWORD *)(a1 + 40);
    }
    if (*(_QWORD *)(v9 + 32) >= 0x10uLL)
    {
      v95 = (unsigned __int8 *)&v97;
      v96 = 0x800000000;
      v92 = v94;
      v93 = 0x800000000;
      if ((*(_BYTE *)(v9 + 48) & 1) != 0)
      {
        v10 = 0;
      }
      else
      {
        sub_22EFA5954(v9);
        v9 = *(_QWORD *)(a1 + 40);
        v10 = v93;
      }
      v12 = *(_QWORD *)(v9 + 16);
      v11 = *(_QWORD *)(v9 + 24);
      if (v11 != v10)
        sub_22F3AA420((uint64_t)&v92, v11 - v10);
      v13 = *(_QWORD *)(v7 + 24);
      v77 = v7;
      if (v13)
      {
        v14 = *(uint64_t **)(v7 + 16);
        v15 = &v14[v13];
        do
        {
          v16 = *v14;
          if (*v14)
            v17 = *(_BYTE *)(*v14 + 12) == 2;
          else
            v17 = 0;
          if (v17 && *(_DWORD *)(v16 + 24))
          {
            v18 = *(_QWORD *)(v16 + 16);
            v19 = *(_WORD **)(v18 + 8);
            v20 = *(_QWORD *)(v18 + 16);
            v21 = sub_22F3AA248(a1, v19, v20, v12, v11);
            if (v21 == -1)
            {
              v22 = v96;
              if (v96 >= (unint64_t)HIDWORD(v96))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v22 = v96;
              }
              *(_QWORD *)&v95[8 * v22] = v16;
              LODWORD(v96) = v96 + 1;
            }
            else if (v21 == -2)
            {
              *(_DWORD *)(v16 + 40) = -2;
            }
            else
            {
              *(_DWORD *)(v16 + 40) = v21;
              v78 = v21;
              v23 = v92;
              if (*((_QWORD *)v92 + v21))
              {
                v24 = **(_QWORD **)(v16 + 16);
                v25 = *(_QWORD *)(a1 + 16);
                *(_DWORD *)(v25 + 312) = v24;
                *(_DWORD *)(v25 + 316) = 2397;
                v75 = v24;
                v76 = v11;
                if (*(char *)(v25 + 311) < 0)
                {
                  **(_BYTE **)(v25 + 288) = 0;
                  *(_QWORD *)(v25 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v25 + 288) = 0;
                  *(_BYTE *)(v25 + 311) = 0;
                }
                v88 = (void *)(v25 + 320);
                v89 = 0;
                v90 = v25;
                v91 = 1;
                *(_BYTE *)(v25 + 320) = 0;
                *(_DWORD *)(v25 + 664) = 0;
                v26 = *(unsigned int *)(v25 + 776);
                if ((_DWORD)v26)
                {
                  v27 = *(_QWORD *)(v25 + 768);
                  v28 = 56 * v26;
                  do
                  {
                    if (*(char *)(v27 + v28 - 9) < 0)
                      operator delete(*(void **)(v27 + v28 - 32));
                    v28 -= 56;
                  }
                  while (v28);
                }
                *(_DWORD *)(v25 + 776) = 0;
                sub_22E3B89A8((unsigned __int8 **)&v88, v19, v20);
                v29 = v88;
                if (!v88)
                {
                  v29 = (void *)sub_22E3B8AAC(v89);
                  v88 = v29;
                }
                sub_22E4D6448((uint64_t)v29 + 336, v75, 1);
                sub_22E3BB0B8((uint64_t)&v88);
                v30 = *((_QWORD *)v92 + v78);
                v31 = *(_QWORD *)(a1 + 16);
                *(_DWORD *)(v31 + 312) = *(_DWORD *)v30;
                *(_DWORD *)(v31 + 316) = 2380;
                v11 = v76;
                if (*(char *)(v31 + 311) < 0)
                {
                  **(_BYTE **)(v31 + 288) = 0;
                  *(_QWORD *)(v31 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v31 + 288) = 0;
                  *(_BYTE *)(v31 + 311) = 0;
                }
                v32 = (void *)(v31 + 320);
                v88 = (void *)(v31 + 320);
                v89 = 0;
                v90 = v31;
                v91 = 1;
                *(_BYTE *)(v31 + 320) = 0;
                *(_DWORD *)(v31 + 664) = 0;
                v33 = *(unsigned int *)(v31 + 776);
                if ((_DWORD)v33)
                {
                  v34 = *(_QWORD *)(v31 + 768);
                  v35 = 56 * v33;
                  do
                  {
                    if (*(char *)(v34 + v35 - 9) < 0)
                      operator delete(*(void **)(v34 + v35 - 32));
                    v35 -= 56;
                  }
                  while (v35);
                  v32 = v88;
                  *(_DWORD *)(v31 + 776) = 0;
                  v36 = **(_QWORD **)(v30 + 16);
                  v11 = v76;
                  if (!v32)
                  {
                    v32 = (void *)sub_22E3B8AAC(v89);
                    v88 = v32;
                  }
                }
                else
                {
                  *(_DWORD *)(v31 + 776) = 0;
                  v36 = **(_QWORD **)(v30 + 16);
                }
                sub_22E4D6448((uint64_t)v32 + 336, v36, 1);
                sub_22E3BB0B8((uint64_t)&v88);
                v23 = v92;
              }
              v23[v78] = v16;
            }
          }
          ++v14;
        }
        while (v14 != v15);
      }
      v88 = &v90;
      v89 = 0x800000000;
      if ((_DWORD)v93)
      {
        v37 = 0;
        v38 = 0;
        v39 = 8 * v93;
        do
        {
          if (!*(_QWORD *)((char *)v92 + v37))
          {
            v40 = *(_QWORD *)(v12 + v37);
            if (v38 >= HIDWORD(v89))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v38 = v89;
            }
            *((_QWORD *)v88 + v38) = v40;
            v38 = v89 + 1;
            LODWORD(v89) = v89 + 1;
          }
          v37 += 8;
        }
        while (v39 != v37);
      }
      v41 = v96;
      if ((_DWORD)v96)
      {
        for (i = 0; i != v41; ++i)
        {
          v43 = *(_QWORD *)(*(_QWORD *)&v95[8 * i] + 16);
          v44 = *(unsigned __int8 **)v43;
          v45 = *(void **)(v43 + 8);
          v46 = *(_QWORD *)(v43 + 16);
          v47 = *(_QWORD *)(a1 + 16);
          *(_DWORD *)(v47 + 312) = *(_QWORD *)v43;
          *(_DWORD *)(v47 + 316) = 2400;
          if (*(char *)(v47 + 311) < 0)
          {
            **(_BYTE **)(v47 + 288) = 0;
            *(_QWORD *)(v47 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v47 + 288) = 0;
            *(_BYTE *)(v47 + 311) = 0;
          }
          v79 = (unsigned __int8 *)(v47 + 320);
          *(_QWORD *)&v80 = 0;
          *((_QWORD *)&v80 + 1) = v47;
          LOWORD(__p) = 1;
          *(_BYTE *)(v47 + 320) = 0;
          *(_DWORD *)(v47 + 664) = 0;
          v48 = *(unsigned int *)(v47 + 776);
          if ((_DWORD)v48)
          {
            v49 = *(_QWORD *)(v47 + 768);
            v50 = 56 * v48;
            do
            {
              if (*(char *)(v49 + v50 - 9) < 0)
                operator delete(*(void **)(v49 + v50 - 32));
              v50 -= 56;
            }
            while (v50);
          }
          *(_DWORD *)(v47 + 776) = 0;
          sub_22E3B89A8(&v79, v45, v46);
          v51 = v79;
          if (!v79)
          {
            v51 = (unsigned __int8 *)sub_22E3B8AAC(v80);
            v79 = v51;
          }
          sub_22E4D6448((uint64_t)(v51 + 336), (uint64_t)v44, 1);
          sub_22E3BB0B8((uint64_t)&v79);
          if (!(_DWORD)v89)
            continue;
          if ((_DWORD)v89 == 1)
          {
            v52 = 0;
          }
          else
          {
            v52 = sub_22F3AA32C((uint64_t)v45, v46, (uint64_t *)v88, v89);
            if (v52 == -1)
              continue;
          }
          v53 = *(_QWORD *)(*((_QWORD *)v88 + v52) + 40);
          v54 = v53 & 0xFFFFFFFFFFFFFFF8;
          if ((v53 & 7) == 0 && v54 != 0)
          {
            v56 = *(_QWORD *)(a1 + 16);
            *(_DWORD *)(v56 + 312) = (_DWORD)v44;
            *(_DWORD *)(v56 + 316) = 2379;
            if (*(char *)(v56 + 311) < 0)
            {
              **(_BYTE **)(v56 + 288) = 0;
              *(_QWORD *)(v56 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v56 + 288) = 0;
              *(_BYTE *)(v56 + 311) = 0;
            }
            v84[0] = (unsigned __int8 *)(v56 + 320);
            v84[1] = 0;
            v84[2] = (unsigned __int8 *)v56;
            v85 = 1;
            *(_BYTE *)(v56 + 320) = 0;
            *(_DWORD *)(v56 + 664) = 0;
            v57 = *(unsigned int *)(v56 + 776);
            if ((_DWORD)v57)
            {
              v58 = *(_QWORD *)(v56 + 768);
              v59 = 56 * v57;
              do
              {
                if (*(char *)(v58 + v59 - 9) < 0)
                  operator delete(*(void **)(v58 + v59 - 32));
                v59 -= 56;
              }
              while (v59);
            }
            *(_DWORD *)(v56 + 776) = 0;
            sub_22E3B89A8(v84, (void *)(*(_QWORD *)(v54 + 16) + 16), **(unsigned int **)(v54 + 16));
            v60 = *(unsigned int **)(v54 + 16);
            v63 = *v60;
            v62 = v60 + 4;
            v61 = v63;
            BYTE12(v80) = 0;
            *(_QWORD *)((char *)&v80 + 4) = 0;
            v82 = 0;
            __p = 0uLL;
            v83 = 0;
            v79 = v44;
            LOBYTE(v80) = 1;
            if (v63 >= 0x17uLL)
            {
              if ((v61 | 7) == 0x17)
                v65 = (v61 & 0xFFFFFFF8) + 8;
              else
                v65 = v61 | 7;
              p_dst = (__int128 *)operator new(v65 + 1);
              *((_QWORD *)&__dst + 1) = v61;
              v87 = v65 - 0x7FFFFFFFFFFFFFFFLL;
              *(_QWORD *)&__dst = p_dst;
            }
            else
            {
              HIBYTE(v87) = v61;
              p_dst = &__dst;
              if (!v61)
                goto LABEL_94;
            }
            memmove(p_dst, v62, v61);
LABEL_94:
            *((_BYTE *)p_dst + v61) = 0;
            __p = __dst;
            v82 = v87;
            sub_22E6D82D0((uint64_t *)v84, &v79);
            if (SHIBYTE(v82) < 0)
              operator delete((void *)__p);
            sub_22E3BB0B8((uint64_t)v84);
          }
        }
      }
      if (v88 != &v90)
        free(v88);
      v7 = v77;
      if (v92 != v94)
        free(v92);
      if (v95 != (unsigned __int8 *)&v97)
        free(v95);
    }
  }
  v66 = *(_DWORD *)(a1 + 104);
  while (v66)
  {
    v67 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v66-- - 8);
    *(_DWORD *)(a1 + 104) = v66;
    if (!sub_22EFB0AB8(*(char **)(v67 + 16), *(_QWORD *)(v67 + 24)))
    {
      v68 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)(v68 + 312) = *(_DWORD *)v67;
      *(_DWORD *)(v68 + 316) = 2392;
      if (*(char *)(v68 + 311) < 0)
      {
        **(_BYTE **)(v68 + 288) = 0;
        *(_QWORD *)(v68 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v68 + 288) = 0;
        *(_BYTE *)(v68 + 311) = 0;
      }
      v95 = (unsigned __int8 *)(v68 + 320);
      v96 = 0;
      v97 = v68;
      v98 = 1;
      *(_BYTE *)(v68 + 320) = 0;
      *(_DWORD *)(v68 + 664) = 0;
      v69 = *(unsigned int *)(v68 + 776);
      if ((_DWORD)v69)
      {
        v70 = *(_QWORD *)(v68 + 768);
        v71 = 56 * v69;
        do
        {
          if (*(char *)(v70 + v71 - 9) < 0)
            operator delete(*(void **)(v70 + v71 - 32));
          v71 -= 56;
        }
        while (v71);
      }
      *(_DWORD *)(v68 + 776) = 0;
      sub_22E3B89A8(&v95, *(void **)(v67 + 16), *(_QWORD *)(v67 + 24));
      v72 = *(_QWORD *)(v67 + 4);
      v73 = v95;
      if (!v95)
      {
        v73 = (unsigned __int8 *)sub_22E3B8AAC(v96);
        v95 = v73;
      }
      sub_22E4D6448((uint64_t)(v73 + 336), v72, 1);
      sub_22E3BB0B8((uint64_t)&v95);
      *(_WORD *)(v67 + 12) |= 0x200u;
      v66 = *(_DWORD *)(a1 + 104);
    }
  }
  return v7;
}

unint64_t sub_22EFB1448(uint64_t a1)
{
  unint64_t result;
  uint64_t v3;

  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    if ((*(_WORD *)(result + 48) & 1) == 0)
    {
      sub_22EFA5954(result);
      result = *(_QWORD *)(a1 + 40);
    }
    v3 = *(_QWORD *)(result + 8);
    return v3 && (*(_DWORD *)(v3 + 28) & 0x7Eu) - 38 >= 0xFFFFFFFC && (*(_DWORD *)(v3 + 72) & 0xE000) != 0x4000;
  }
  return result;
}

uint64_t sub_22EFB14B0(uint64_t result, uint64_t a2)
{
  int v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v2 = *(_DWORD *)(result + 36);
  *(_DWORD *)(result + 36) = v2 + 1;
  v3 = *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(a2 + 40) & 7) == 0 && v3 != 0)
  {
    v6 = result;
    v7 = **(_QWORD **)(v3 + 16);
    v8 = *(_QWORD *)(result + 16);
    LODWORD(v9) = v7 - v8;
    if ((_DWORD)v7 == (_DWORD)v8
      || ((v9 & 0x80000000) == 0 ? (v9 = v9) : (v9 = -(int)v9), v8 / v9 >= 3))
    {
      result = llvm::StringRef::edit_distance();
      if (result < *(_DWORD *)(v6 + 28))
      {
        *(_QWORD *)v6 = a2;
        *(_DWORD *)(v6 + 28) = result;
        *(_DWORD *)(v6 + 32) = v2;
      }
    }
  }
  return result;
}

uint64_t sub_22EFB154C(const void *a1, size_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int *v14;
  const void *v15;
  int v16;
  unint64_t v17;
  unsigned int v19;

  v4 = *(_DWORD *)(a3 + 12);
  v5 = v4 & 0x1FFFFFFF;
  if ((v4 & 0x1FFFFFFF) == 0)
    return 0;
  v9 = 0;
  v10 = a3 + 16;
  while (1)
  {
    v11 = *(_QWORD *)(v10 + 8 * v9);
    v12 = *(_QWORD *)(v11 + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(v11 + 40) & 7) == 0 && v12 != 0)
    {
      v14 = *(int **)(v12 + 16);
      v16 = *v14;
      v15 = v14 + 4;
      if (v16 == a2 && (!a2 || !memcmp(v15, a1, a2)))
        break;
    }
    if ((*(_DWORD *)(v11 + 28) & 0x7F) == 0x20)
    {
      v17 = *(unsigned int *)(a4 + 8);
      if (v17 >= *(unsigned int *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v17 = *(unsigned int *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v17) = v9;
      ++*(_DWORD *)(a4 + 8);
      if ((sub_22EFB154C(a1, a2, *(_QWORD *)(v11 + 56), a4) & 1) != 0)
        return 1;
      --*(_DWORD *)(a4 + 8);
    }
    if (v5 == ++v9)
      return 0;
  }
  v19 = *(_DWORD *)(a4 + 8);
  if (v19 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v19 = *(_DWORD *)(a4 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a4 + 4 * v19) = v9;
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

uint64_t sub_22EFB16A8(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;

  v2 = *(_DWORD *)(result + 12);
  v3 = v2 & 0x1FFFFFFF;
  if ((v2 & 0x1FFFFFFF) != 0)
  {
    v5 = (uint64_t *)(result + 16);
    do
    {
      v6 = *v5;
      result = sub_22EFB14B0(a2, *v5);
      if (v6)
      {
        if ((*(_DWORD *)(v6 + 28) & 0x7F) == 0x20)
          result = sub_22EFB16A8(*(_QWORD *)(v6 + 56), a2);
      }
      ++v5;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_22EFB1718(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;

  v1 = a1 & 0xFFFFFFFFFFFFFFF0;
  v2 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
  v3 = *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0;
  v4 = *(_QWORD *)v3;
  v5 = *(_DWORD *)(*(_QWORD *)v3 + 16);
  if (*(_QWORD *)v3)
    v6 = v5 == 11;
  else
    v6 = 0;
  if (v6)
  {
    if (((*(_DWORD *)(*(_QWORD *)v3 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_13;
LABEL_11:
    v8 = 1;
    v9 = 2;
    return v9 | (v8 << 8);
  }
  if (!v4 || v5 != 44)
  {
    if (v5 != 9)
      goto LABEL_13;
    goto LABEL_11;
  }
  v7 = sub_22F114198(*(_QWORD *)(v4 + 24));
  if ((*(_BYTE *)(v7 + 74) & 1) != 0 || *(_QWORD *)(v7 + 128) > 7uLL)
    goto LABEL_11;
  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 8) & 0xFFFFFFFFFFFFFFF0;
LABEL_13:
  v10 = *(_QWORD *)v3;
  v11 = *(_DWORD *)(*(_QWORD *)v3 + 16);
  if (v10)
    v12 = v11 == 11;
  else
    v12 = 0;
  if (v12 && ((v11 >> 19) & 0x1FE) - 210 < 8)
  {
    v9 = 0;
    v8 = 1;
  }
  else
  {
    v8 = sub_22F33320C(v2);
    if (v8)
      v9 = 2;
    else
      v9 = 0;
  }
  return v9 | (v8 << 8);
}

unsigned __int8 *sub_22EFB1804(uint64_t *a1, int a2)
{
  signed __int8 v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  int v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  signed __int8 v23;
  _QWORD v24[3];
  unint64_t v25;
  unsigned __int8 v26;

  v2 = a2;
  v26 = a2;
  v5 = (uint64_t)(a1 + 1);
  v4 = a1[1];
  v6 = *((unsigned int *)a1 + 6);
  if ((_DWORD)v6)
  {
    v7 = ((_DWORD)v6 - 1) & (37 * (char)a2);
    v8 = (unsigned __int8 *)(v4 + (v7 << 7));
    v9 = *v8;
    if (v9 == a2)
      goto LABEL_8;
    v10 = 1;
    while ((_BYTE)v9 != 0xFF)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v9 = *(unsigned __int8 *)(v4 + (v7 << 7));
      if (v9 == a2)
      {
        v8 = (unsigned __int8 *)(v4 + (v7 << 7));
        goto LABEL_8;
      }
    }
  }
  v8 = (unsigned __int8 *)(v4 + (v6 << 7));
LABEL_8:
  if ((unsigned __int8 *)(v4 + (v6 << 7)) != v8)
    return v8 + 8;
  v13 = a1[4];
  if (!v13)
  {
    v14 = *a1;
    v15 = *(_QWORD *)(*(_QWORD *)(*a1 + 1960) + 80);
    v16 = sub_22E3CD31C((uint64_t *)(v15 + 72), v15) + 40;
    v17 = sub_22E3CB704(*(llvm::StringMapImpl **)(v14 + 15192), "std", 3uLL);
    v18 = sub_22EFCE144(v16, v17);
    if (v18 >= 8)
    {
      v13 = v18 & 0xFFFFFFFFFFFFFFF8;
      if ((v18 & 4) != 0 && v13)
        v13 = *(_QWORD *)v13;
      if ((*(_DWORD *)(v13 + 28) & 0x7F) != 0x10)
        v13 = 0;
      a1[4] = v13;
      if (!v13)
        return 0;
    }
    else
    {
      v13 = a1[4];
      if (!v13)
        return 0;
    }
  }
  v19 = v13 + 48;
  v20 = sub_22E3CB704(*(llvm::StringMapImpl **)(*a1 + 15192), off_24FAC25A0[v2], qword_22F4A16C8[v2]);
  v21 = sub_22EFCE144(v19, v20);
  if (v21 < 8)
    return 0;
  v22 = v21 & 0xFFFFFFFFFFFFFFF8;
  if ((v21 & 4) != 0 && v22)
    v22 = *(_QWORD *)v22;
  if (!v22 || (*(_DWORD *)(v22 + 28) & 0x7Fu) - 38 <= 0xFFFFFFFC)
    return 0;
  v25 = v22;
  v23 = v2;
  sub_22EFB19D8(v24, v5, (unsigned __int8 *)&v23, *a1, (uint64_t *)&v25, &v26);
  return (unsigned __int8 *)(v24[0] + 8);
}

_BYTE *sub_22EFB19D8(_BYTE *result, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t *a5, unsigned __int8 *a6)
{
  _BYTE *v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  char v18;
  int v19;
  uint64_t v20;
  unsigned __int8 v21;
  unsigned __int8 *v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  unsigned __int8 *v31;
  int v32;
  BOOL v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  int v40;
  BOOL v41;
  int v42;

  v11 = result;
  v12 = *(_DWORD *)(a2 + 16);
  if (v12)
  {
    v13 = *(_QWORD *)a2;
    v14 = *a3;
    v15 = (37 * (char)*a3) & (v12 - 1);
    v16 = (unsigned __int8 *)(*(_QWORD *)a2 + (v15 << 7));
    v17 = *v16;
    if (v14 == v17)
    {
LABEL_3:
      v18 = 0;
      goto LABEL_10;
    }
    v22 = 0;
    v23 = 1;
    while ((_BYTE)v17 != 0xFF)
    {
      if (v22)
        v24 = 0;
      else
        v24 = v17 == 254;
      if (v24)
        v22 = v16;
      v25 = v15 + v23++;
      v15 = v25 & (v12 - 1);
      v16 = (unsigned __int8 *)(v13 + (v15 << 7));
      v17 = *v16;
      if (v14 == v17)
        goto LABEL_3;
    }
    if (v22)
      v16 = v22;
  }
  else
  {
    v16 = 0;
  }
  v19 = *(_DWORD *)(a2 + 8);
  if (4 * v19 + 4 >= 3 * v12)
  {
    result = sub_22EFB1F50(a2, 2 * v12);
    v26 = *(_DWORD *)(a2 + 16);
    if (v26)
    {
      v27 = *a3;
      v28 = v26 - 1;
      v29 = (37 * (char)*a3) & (v26 - 1);
      v16 = (unsigned __int8 *)(*(_QWORD *)a2 + (v29 << 7));
      v30 = *v16;
      if (v27 == v30)
        goto LABEL_7;
      v31 = 0;
      v32 = 1;
      while ((_BYTE)v30 != 0xFF)
      {
        if (v31)
          v33 = 0;
        else
          v33 = v30 == 254;
        if (v33)
          v31 = v16;
        v34 = v29 + v32++;
        v29 = v34 & v28;
        v16 = (unsigned __int8 *)(*(_QWORD *)a2 + (v29 << 7));
        v30 = *v16;
        if (v27 == v30)
          goto LABEL_7;
      }
LABEL_46:
      if (v31)
        v16 = v31;
      goto LABEL_7;
    }
LABEL_45:
    v16 = 0;
    goto LABEL_7;
  }
  if (v12 + ~v19 - *(_DWORD *)(a2 + 12) <= v12 >> 3)
  {
    result = sub_22EFB1F50(a2, v12);
    v35 = *(_DWORD *)(a2 + 16);
    if (v35)
    {
      v36 = *a3;
      v37 = v35 - 1;
      v38 = (37 * (char)*a3) & (v35 - 1);
      v16 = (unsigned __int8 *)(*(_QWORD *)a2 + (v38 << 7));
      v39 = *v16;
      if (v36 == v39)
        goto LABEL_7;
      v31 = 0;
      v40 = 1;
      while ((_BYTE)v39 != 0xFF)
      {
        if (v31)
          v41 = 0;
        else
          v41 = v39 == 254;
        if (v41)
          v31 = v16;
        v42 = v38 + v40++;
        v38 = v42 & v37;
        v16 = (unsigned __int8 *)(*(_QWORD *)a2 + (v38 << 7));
        v39 = *v16;
        if (v36 == v39)
          goto LABEL_7;
      }
      goto LABEL_46;
    }
    goto LABEL_45;
  }
LABEL_7:
  ++*(_DWORD *)(a2 + 8);
  if (*v16 != 255)
    --*(_DWORD *)(a2 + 12);
  *v16 = *a3;
  v20 = *a5;
  v21 = *a6;
  *((_QWORD *)v16 + 1) = a4;
  *((_QWORD *)v16 + 2) = v16 + 32;
  *((_QWORD *)v16 + 3) = 0x500000000;
  *((_QWORD *)v16 + 14) = v20;
  v16[120] = v21;
  v13 = *(_QWORD *)a2;
  v12 = *(_DWORD *)(a2 + 16);
  v18 = 1;
LABEL_10:
  *(_QWORD *)v11 = v16;
  *((_QWORD *)v11 + 1) = v13 + ((unint64_t)v12 << 7);
  v11[16] = v18;
  return result;
}

unsigned __int8 *sub_22EFB1C68(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *result;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  size_t v19;
  _DWORD *v20;
  unsigned __int8 v21;
  _QWORD v22[3];
  unsigned __int8 v23;
  unsigned __int8 *v24;

  result = (unsigned __int8 *)sub_22F10C2A4(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (result)
  {
    v4 = result;
    if ((*((_DWORD *)result + 7) & 0x7Fu) - 35 > 2)
      return 0;
    v24 = result;
    v5 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 32))(result);
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 24);
    v8 = (unsigned __int8 *)(v6 + (v7 << 7));
    if (*(_DWORD *)(a1 + 16))
    {
      if ((_DWORD)v7)
      {
        v9 = v7 << 7;
        v10 = *(unsigned __int8 **)(a1 + 8);
        while (*v10 >= 0xFEu)
        {
          v10 += 128;
          v9 -= 128;
          if (!v9)
            goto LABEL_8;
        }
      }
      else
      {
        v10 = *(unsigned __int8 **)(a1 + 8);
      }
    }
    else
    {
LABEL_8:
      v10 = (unsigned __int8 *)(v6 + (v7 << 7));
    }
    v11 = (unsigned __int8 *)(v6 + ((unint64_t)v7 << 7));
LABEL_11:
    while (v10 != v11)
    {
      if (v5 == (*(uint64_t (**)(_QWORD))(**((_QWORD **)v10 + 14) + 32))(*((_QWORD *)v10 + 14)))
        return v10 + 8;
      v12 = v10 + 128;
      while (v12 != v8)
      {
        v13 = *v12;
        v12 += 128;
        if (v13 <= 0xFD)
        {
          v10 = v12 - 128;
          goto LABEL_11;
        }
      }
      v10 = v8;
    }
    v14 = sub_22F3B16C0((unint64_t)(v4 + 64));
    if (sub_22EFC84D4(v14))
    {
      v15 = 0;
      v16 = *((_QWORD *)v4 + 5);
      v17 = v16 & 0xFFFFFFFFFFFFFFF8;
      v18 = (v16 & 0xFFFFFFFFFFFFFFF8) == 0 || (v16 & 7) != 0;
      while (1)
      {
        v23 = v15;
        if (!v18)
        {
          v19 = qword_22F4A16C8[(char)v15];
          v20 = *(_DWORD **)(v17 + 16);
          if (v19 == *v20 && !memcmp(off_24FAC25A0[(char)v15], v20 + 4, v19))
            break;
        }
        result = 0;
        if (++v15 == 3)
          return result;
      }
      v21 = v15;
      sub_22EFB19D8(v22, a1 + 8, &v21, *(_QWORD *)a1, (uint64_t *)&v24, &v23);
      return (unsigned __int8 *)(v22[0] + 8);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_22EFB1E30(unint64_t *a1, size_t __sz)
{
  unint64_t v2;
  char *v5;
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  char v10;

  v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      abort();
    v5 = (char *)a1[1];
    v6 = operator new(__sz);
    v7 = &v5[(_QWORD)v6 - v2];
    v8 = v7;
    if (v5 != (char *)v2)
    {
      v9 = &v5[~v2];
      do
      {
        v10 = *--v5;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (v5 != (char *)v2);
      v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
      operator delete((void *)v2);
  }
}

uint64_t sub_22EFB1ED4(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  unsigned int v6;
  _QWORD *v7;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 8);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6);
  *v7 = a2;
  v7[1] = a3;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v7;
  return *(_QWORD *)a1 + 16 * v7 - 16;
}

_BYTE *sub_22EFB1F50(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _BYTE *result;
  uint64_t v10;
  uint64_t v11;
  llvm *v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_BYTE *)MEMORY[0x23489D23C]((unint64_t)v8 << 7, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = v10 << 7;
      do
      {
        *result = -1;
        result += 128;
        v11 -= 128;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      do
      {
        v13 = *(char *)v12;
        if (v13 <= 0xFFFFFFFD)
        {
          v14 = *(unsigned __int8 *)v12;
          v15 = *(_DWORD *)(a1 + 16);
          if (v15)
          {
            v16 = 37 * v13;
            v17 = v15 - 1;
            v18 = (v15 - 1) & v16;
            v19 = (unsigned __int8 *)(*(_QWORD *)a1 + (v18 << 7));
            v20 = *v19;
            if (v14 != v20)
            {
              v21 = 0;
              v22 = 1;
              while ((_BYTE)v20 != 0xFF)
              {
                if (v21)
                  v23 = 0;
                else
                  v23 = v20 == 254;
                if (v23)
                  v21 = v19;
                v24 = v18 + v22++;
                v18 = v24 & v17;
                v19 = (unsigned __int8 *)(*(_QWORD *)a1 + (v18 << 7));
                v20 = *v19;
                if (v14 == v20)
                  goto LABEL_23;
              }
              if (v21)
                v19 = v21;
            }
          }
          else
          {
            v19 = 0;
          }
LABEL_23:
          *v19 = v14;
          *((_QWORD *)v19 + 1) = *((_QWORD *)v12 + 1);
          *((_QWORD *)v19 + 2) = v19 + 32;
          *((_QWORD *)v19 + 3) = 0x500000000;
          if (*((_DWORD *)v12 + 6))
            sub_22F2528D0((uint64_t)(v19 + 16), (uint64_t)v12 + 16);
          v25 = *((_QWORD *)v12 + 14);
          v19[120] = *((_BYTE *)v12 + 120);
          *((_QWORD *)v19 + 14) = v25;
          ++*(_DWORD *)(a1 + 8);
          v26 = (char *)*((_QWORD *)v12 + 2);
          if (v26 != (char *)v12 + 32)
            free(v26);
        }
        v12 = (llvm *)((char *)v12 + 128);
      }
      while (v12 != (llvm *)((char *)v4 + 128 * v3));
    }
    return (_BYTE *)llvm::deallocate_buffer(v4, (void *)(v3 << 7));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v27 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v27)
    {
      v28 = v27 << 7;
      do
      {
        *result = -1;
        result += 128;
        v28 -= 128;
      }
      while (v28);
    }
  }
  return result;
}

uint64_t sub_22EFB2164(unint64_t *a1, char *a2)
{
  unint64_t v2;
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char v14;

  v2 = *a1;
  v3 = (char *)a1[1];
  v4 = &v3[-*a1];
  v5 = (unint64_t)(v4 + 1);
  if ((uint64_t)(v4 + 1) < 0)
    abort();
  v8 = a1[2] - v2;
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
    v9 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
    v10 = (unint64_t)operator new(v9);
  else
    v10 = 0;
  v11 = (char *)(v10 + v9);
  v4[v10] = *a2;
  v12 = (uint64_t)&v4[v10 + 1];
  if (v3 == (char *)v2)
  {
    v10 += (unint64_t)v4;
  }
  else
  {
    v13 = &v3[~v2];
    do
    {
      v14 = *--v3;
      (v13--)[v10] = v14;
    }
    while (v3 != (char *)v2);
  }
  *a1 = v10;
  a1[1] = v12;
  a1[2] = (unint64_t)v11;
  if (v2)
    operator delete((void *)v2);
  return v12;
}

uint64_t sub_22EFB2238(uint64_t a1)
{
  _DWORD *v1;
  int v2;
  uint64_t result;

  v1 = *(_DWORD **)(a1 + 16);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 17);
  result = (v2 << 29 >> 31) & 0xC | v2 & 0x12u;
  if (v1)
    return (*v1 >> 13) & 0x1F | result;
  return result;
}

uint64_t sub_22EFB2274(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v8;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  char **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD **)(a1 + 16);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 17);
  v6 = (v5 << 29 >> 31) & 0xC | v5 & 0x12 | (*v3 >> 13) & 0x1Fu;
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 2000) + 1) & 1) != 0
    && (*(_DWORD *)a1 & 0x7C0000) == 0x100000
    && ((v5 << 29 >> 31) & 8 | (*v3 >> 13) & 8) == 0)
  {
    v13 = 0;
    LODWORD(v15) = 0;
    v10 = (char *)&v12;
    v11 = 0x800000000;
    v14 = &v10;
    if (sub_22F006900((unint64_t)v3, (uint64_t)&v13, a2, 0))
    {
      if (!(_DWORD)v11 && (_DWORD)v15 == 7 && (v16 & 3) == 0)
      {
        v8 = v16 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v16 & 0xFFFFFFFFFFFFFFFCLL) != 0
          && sub_22EFC79C8(v16 & 0xFFFFFFFFFFFFFFFCLL)
          && ((*(_DWORD *)(v8 + 28) & 0x7Fu) - 67 < 0xFFFFFFF9 || !sub_22E3CB5E0(v8)))
        {
          v6 = v6 | 8;
        }
      }
    }
    sub_22E89277C(&v10);
    if (v15 >= 2)
      sub_22EF53BC0(&v15);
  }
  return v6;
}

uint64_t sub_22EFB23D4(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  int v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;

  v1 = *(unsigned __int8 **)(a1 + 16);
  if ((*(_DWORD *)a1 & 0x400000) != 0)
  {
    v8 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v1 & 0xFFFFFFFFFFFFFFF0) + 17);
    return (v8 & 0x13 | (8 * ((v8 >> 2) & 1)));
  }
  v2 = (*(_DWORD *)v1 >> 12) & 8;
  v3 = v2 | (*(_DWORD *)v1 >> 13) & 0x13;
  if (((*(_DWORD *)a1 >> 18) & 0xFu) - 3 >= 0xFFFFFFFE && ((*(_DWORD *)v1 & 0x4000) == 0 || !v2))
  {
    do
    {
      v4 = v1;
      LODWORD(v5) = *v1;
      if (v5 > 0xD5)
      {
        if ((_DWORD)v5 == 233)
        {
          LODWORD(v5) = *(_DWORD *)v1;
          if ((*(_DWORD *)v1 & 0x7C0000) != 0x300000)
            return v3;
          v6 = v1 + 16;
        }
        else
        {
          if ((_DWORD)v5 != 214)
            break;
          v6 = v1 + 24;
        }
      }
      else if ((_DWORD)v5 == 155)
      {
        if ((**((_DWORD **)v1 + 2) & 0x18000) != 0)
          return v3;
        v6 = v1 + 24;
        if (!v4[48])
          v6 = v4 + 32;
        LOBYTE(v5) = -101;
      }
      else
      {
        if ((_DWORD)v5 != 176)
          break;
        v5 = *((unsigned int *)v1 + 5);
        if ((_DWORD)v5 == -1)
          return v3;
        v6 = &v1[8 * v5 + 40];
        LOBYTE(v5) = -80;
      }
      v1 = *(unsigned __int8 **)v6;
    }
    while (v1 != v4);
    if (v5 == 188)
    {
      v7 = (uint64_t *)(v4 + 24);
    }
    else
    {
      if (v5 != 161)
        return v3;
      v7 = (uint64_t *)(v4 + 16);
    }
    if (*v7)
    {
      v10 = (uint64_t *)sub_22E47E5E0(*v7);
      v12 = v11;
      while (1)
      {
        v13 = v10;
        if (v10 >= v12)
        {
          if (v10 == v12)
            return v3;
          v14 = v12;
          while (*(_WORD *)(*v14 + 32) != 98)
          {
            if (++v14 == v10)
              return v3;
          }
          v13 = v10;
        }
        else
        {
          while (*(_WORD *)(*v13 + 32) != 98)
          {
            if (++v13 == v12)
              return v3;
          }
          v14 = v12;
        }
        if (v13 == v14)
          return v3;
        do
        {
          v16 = *v10++;
          v15 = v16;
        }
        while (*(_WORD *)(v16 + 32) != 98);
        v17 = *(_QWORD **)(v15 + 40);
        if (*(_BYTE *)(v15 + 35))
        {
          if (!v17)
            goto LABEL_46;
          v18 = 0x20000;
        }
        else
        {
          v17 = (_QWORD *)(*(_QWORD *)(*v17 & 0xFFFFFFFFFFFFFFF0) + 16);
          v18 = 4096;
        }
        if ((*(_DWORD *)v17 & v18) != 0)
          v3 |= 0x10u;
LABEL_46:
        if (sub_22F37CC2C(v15))
          v3 |= 0xAu;
      }
    }
  }
  return v3;
}

uint64_t sub_22EFB25F4(uint64_t a1)
{
  _DWORD *v1;
  int v2;
  uint64_t result;

  v1 = *(_DWORD **)(a1 + 16);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 17);
  result = (v2 << 29 >> 31) & 0xC | v2 & 0x12u;
  if (v1)
    return (*v1 >> 13) & 0x1B | result;
  return result;
}

uint64_t sub_22EFB2630(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  _DWORD *v4;
  int v5;
  uint64_t result;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(**(_QWORD **)(a1 + 24) & 0xFFFFFFFFFFFFFFF0) + 17);
  v2 = (v1 << 29 >> 31) & 0xC;
  v3 = v1 & 0x13;
  v4 = *(_DWORD **)(a1 + 16);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 17);
  result = v2 | v3 | v5 & 0x12 | (v5 << 29 >> 31) & 0xCu;
  if (v4)
    return (*v4 >> 13) & 0x1B | result;
  return result;
}

uint64_t sub_22EFB2698(uint64_t a1)
{
  _QWORD *v1;
  int v2;
  uint64_t result;
  int v4;

  v1 = *(_QWORD **)(a1 + 16);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 17);
  result = (v2 << 29 >> 31) & 0xC | v2 & 0x12u;
  if (v1)
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(*v1 & 0xFFFFFFFFFFFFFFF0) + 17);
    return v4 & 0x13 | result | (v4 << 29 >> 31) & 0xC;
  }
  return result;
}

uint64_t sub_22EFB26EC(int *a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  BOOL v37;
  uint64_t v38;
  _QWORD *v39;

  v4 = *a1;
  if ((*a1 & 0x40000) != 0)
  {
    v5 = *((_QWORD *)a1 + 4);
    if (v5)
    {
      v6 = sub_22F0AAC5C(v5);
      v7 = v6 & 3 | (16 * ((v6 >> 3) & 1));
      v4 = *a1;
      if ((*a1 & 0x80000) == 0)
        goto LABEL_10;
LABEL_6:
      v8 = (uint64_t)&a1[4 * ((v4 >> 18) & 1) + 2 * ((v4 >> 20) & 1)];
      v10 = *(_DWORD *)(v8 + 32);
      v9 = v8 + 32;
      if (v10)
      {
        v11 = *(unsigned int *)(v9 + 12);
        if ((_DWORD)v11)
        {
          v12 = v9 + 16 * ((v4 >> 19) & 1);
          v13 = v12 + 32 * v11;
          do
          {
            v14 = sub_22F0EEB00(v12);
            v7 |= v14 & 3 | (2 * v14) & 0x10 | ((char)(32 * v14) >> 7) & 0xC;
            v12 += 32;
          }
          while (v12 < v13);
        }
      }
      goto LABEL_10;
    }
  }
  v7 = 0;
  if ((v4 & 0x80000) != 0)
    goto LABEL_6;
LABEL_10:
  v17 = a1 + 2;
  v16 = *((_QWORD *)a1 + 1);
  v15 = *((_QWORD *)v17 + 1);
  v18 = sub_22EFC78D8(v15);
  v19 = *(_DWORD *)(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0) + 16);
  v20 = v7 | v18 | (v19 >> 8) & 0x10;
  if ((v19 & 0x400) != 0)
    goto LABEL_17;
  v21 = v20 | (v19 >> 8) & 2;
  if ((*(_QWORD *)(v15 + 40) & 7) != 5)
    goto LABEL_15;
  v22 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v15 + 40) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16);
  if ((v22 & 0x400) != 0)
  {
LABEL_17:
    LOBYTE(v21) = v20 | 0xE;
    return v21;
  }
  v23 = v20 | 2;
  if ((v22 & 0x200) != 0)
    v21 = v23;
LABEL_15:
  v24 = *(_DWORD *)(v15 + 28);
  if ((v24 & 0x7F) == 0x3B)
  {
LABEL_16:
    LOBYTE(v21) = v21 | 0xA;
    return v21;
  }
  if ((v24 & 0x7Fu) - 67 >= 0xFFFFFFF9)
  {
    if (sub_22EFBCA2C(v15, a2))
    {
      v28 = 0;
      v29 = v15;
      while (1)
      {
        v30 = (_DWORD *)sub_22EFBC5B4(v29);
        if (v30)
          break;
        if ((*(_BYTE *)(v29 + 72) & 3) != 0)
        {
          if (v28)
            goto LABEL_41;
          v28 = 1;
        }
        v31 = sub_22E3CD31C((uint64_t *)(v29 + 72), v29);
        if (v31 != v15)
        {
          v29 = v31;
          if (v31)
            continue;
        }
        goto LABEL_41;
      }
      v32 = v21 | 0xA;
      if ((*v30 & 0x10000) == 0)
        v32 = v21;
      v21 = (*v30 >> 13) & 0x10 | v32;
    }
LABEL_41:
    if ((*(_DWORD *)(v15 + 28) & 0x7F) != 0x40)
    {
      v33 = *(_QWORD *)(v15 + 16);
      v34 = v33 & 0xFFFFFFFFFFFFFFF8;
      if ((v33 & 4) != 0)
      {
        v34 = *(_QWORD *)v34;
        if ((*(_WORD *)(v34 + 8) & 0x7Eu) - 34 > 3)
          return v21;
      }
      else if ((*(_WORD *)(v34 + 8) & 0x7Eu) - 34 >= 4)
      {
        return v21;
      }
      if (sub_22EFC7ADC(v34))
      {
        v35 = *(_QWORD *)(v15 + 80);
        v36 = v35 && (*(_DWORD *)(v35 + 28) & 0x7F) == 64;
        v37 = !v36;
        if (v36 && (*(_DWORD *)(v35 + 96) & 0x600u) - 1536 > 0xFFFFFBFF || *(_QWORD *)(v35 + 88) <= 7uLL)
        {
          v38 = *(_QWORD *)(v35 + 56);
          v39 = (_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF8);
          if ((v38 & 4) != 0)
            v39 = (_QWORD *)v39[4];
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v39 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) == 4)
          {
            LOBYTE(v21) = v21 | 0xE;
            return v21;
          }
          if (!v37 && (*(_DWORD *)(v35 + 96) & 0x600u) - 1536 >= 0xFFFFFC00)
            goto LABEL_16;
          if (*(_QWORD *)(v35 + 88) <= 7uLL)
            LOBYTE(v21) = v21 | 0xA;
        }
      }
    }
  }
  else if ((v24 & 0x7Eu) - 58 >= 0xFFFFFFFC
         && ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v15 + 32))(v15) + 80) & 0xE000) == 0x4000
          || (*(_QWORD *)(v15 + 40) & 7) == 6
          && (*(_DWORD *)(*(_QWORD *)(v15 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) <= 3))
  {
    v26 = *(_QWORD *)(v15 + 16);
    v27 = (_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF8);
    if ((v26 & 4) != 0)
      v27 = (_QWORD *)*v27;
    if (sub_22EFC7ADC((unint64_t)v27))
      LOBYTE(v21) = v21 | 0xA;
  }
  return v21;
}

uint64_t sub_22EFB2A44(unsigned int *a1, _DWORD **a2, uint64_t a3)
{
  unint64_t v3;
  _DWORD **v4;
  int v5;
  uint64_t v6;
  _DWORD **v7;
  uint64_t v8;
  uint64_t v10;
  _DWORD *v11;

  v3 = *a1;
  v4 = (_DWORD **)((char *)a1 + (v3 >> 24));
  v5 = (**v4 >> 13) & 0x1F;
  v6 = a1[4];
  if ((_DWORD)v6)
  {
    v7 = &v4[((v3 >> 18) & 1) + 1];
    v8 = 8 * v6;
    do
    {
      if (*v7)
        v5 |= (**v7 >> 13) & 0x1F;
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  if (a3)
  {
    v10 = 8 * a3;
    do
    {
      v11 = *a2++;
      v5 |= (*v11 >> 13) & 0x1F;
      v10 -= 8;
    }
    while (v10);
  }
  return v5;
}

uint64_t sub_22EFB2ABC(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int i;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = **(_DWORD **)(a1 + 16);
  v3 = (v2 >> 13) & 0x1F;
  if (v1)
    v4 = (*(_DWORD *)(v1 + 28) & 0x7Fu) - 52 >= 0xFFFFFFFD;
  else
    v4 = 0;
  if (!v4)
    return v3;
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 4) != 0)
    v7 = *(_QWORD *)v7;
  if (v7)
  {
    if ((*(_WORD *)(v7 + 8) & 0x7Fu) - 35 <= 2)
    {
      if (sub_22EFC7ADC(v7))
      {
        v8 = v7 - 64;
        if (sub_22EFB3CF0(v7 - 64, v7)
          && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
        {
          if ((*(_DWORD *)(v7 - 36) & 0x7F) != 0x53)
          {
            v9 = *(_QWORD *)(v7 - 48);
            v10 = v9 & 0xFFFFFFFFFFFFFFF8;
            if ((v9 & 4) != 0)
              v10 = *(_QWORD *)v10;
            for (i = *(_WORD *)(v10 + 8) & 0x7F; i != 83; i = *(_WORD *)(v10 + 8) & 0x7F)
            {
              v12 = -40;
              if (i > 70)
              {
                if (i == 71)
                {
                  v12 = -56;
                }
                else if (i != 81)
                {
                  goto LABEL_27;
                }
              }
              else
              {
                if (i > 0x18)
                  goto LABEL_26;
                if (i == 16)
                  goto LABEL_20;
                if (((1 << i) & 0x1066) != 0)
                  goto LABEL_33;
                if (i == 24)
                {
LABEL_20:
                  v12 = -48;
                }
                else
                {
LABEL_26:
                  if (i != 70)
                  {
LABEL_27:
                    v13 = i - 52;
                    if ((i - 33) >= 5)
                      v14 = -48;
                    else
                      v14 = -64;
                    if (v13 >= 6)
                      v12 = v14;
                    else
                      v12 = -72;
                    goto LABEL_33;
                  }
                  v12 = -64;
                }
              }
LABEL_33:
              v15 = *(_QWORD *)(v10 + v12 + 16);
              v10 = v15 & 0xFFFFFFFFFFFFFFF8;
              if ((v15 & 4) != 0)
                v10 = *(_QWORD *)v10;
            }
            v8 = v10 - 40;
          }
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 88) + 2000) + 237) & 8) != 0)
            v3 = v3;
          else
            v3 = (v2 >> 13) & 0x1B;
        }
      }
    }
  }
  if ((*(_BYTE *)(v1 + 68) & 1) != 0)
  {
    v16 = *(_QWORD *)(v1 + 72) & 0xFFFFFFFFFFFFFFFCLL;
    v17 = *(_QWORD *)(v1 + 72) & 3;
    if ((_DWORD)v17)
      v18 = (_DWORD)v17 == 3;
    else
      v18 = 1;
    if (!v18)
      v16 = *(_QWORD *)(v16 + 8);
    return (*(_DWORD *)v16 >> 14) & 4 | v3;
  }
  return v3;
}

uint64_t sub_22EFB2CB8(uint64_t a1)
{
  int v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  __int128 v10;
  uint64_t v11;

  v2 = (*(_DWORD *)sub_22E487828(a1) >> 13) & 0x1F;
  if ((unsigned __int16)*(_DWORD *)(a1 + 20) >> 1)
  {
    v4 = *(__int128 **)(a1 + 24);
    v5 = 24 * ((unsigned __int16)*(_DWORD *)(a1 + 20) >> 1);
    while (1)
    {
      v6 = *((_QWORD *)v4 + 2);
      v10 = *v4;
      v11 = v6;
      if ((_DWORD)v10 == 1)
        break;
      if ((_DWORD)v10 == 2)
      {
        v9 = *(_DWORD *)sub_22F3C2AA4(a1, (uint64_t)&v10);
        v8 = *(_DWORD *)sub_22F3C2AB8(a1, (uint64_t)&v10) | v9;
        goto LABEL_13;
      }
      v7 = 0;
LABEL_7:
      if ((v7 & 0xC) != 0)
        v2 |= v7 | 0xE;
      else
        v2 |= v7;
      v4 = (__int128 *)((char *)v4 + 24);
      v5 -= 24;
      if (!v5)
        return v2;
    }
    v8 = *(_DWORD *)sub_22F3C2AA4(a1, (uint64_t)&v10);
LABEL_13:
    v7 = (v8 >> 13) & 0x1F;
    goto LABEL_7;
  }
  return v2;
}

uint64_t sub_22EFB2D9C(unsigned int *a1)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  int v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  _DWORD *v16;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(**((_QWORD **)a1 + 4) & 0xFFFFFFFFFFFFFFF0) + 17);
  v3 = (v2 << 29 >> 31) & 0xC;
  v4 = v2 & 0x13;
  v5 = *(_QWORD *)(*((_QWORD *)a1 + 1) & 0xFFFFFFFFFFFFFFF0);
  if (!v5 || *(_BYTE *)(v5 + 16) != 39)
    v5 = sub_22F10CF48(v5);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v5 + 32) & 0xFFFFFFFFFFFFFFF0) + 17);
  v7 = v3 | v4 | v6 & 0x12 | (v6 << 29 >> 31) & 0xC;
  v8 = *a1;
  if ((v8 & 0x80000) != 0)
  {
    v9 = (_DWORD *)*((_QWORD *)a1 + 7);
    if (v9)
      v7 |= (*v9 >> 13) & 0x1B;
  }
  v10 = v8 & 0x1800000;
  if ((v8 & 0x1800000) != 0)
  {
    v8 = (v8 >> 19) & 1;
    v11 = *(_DWORD **)&a1[2 * v8 + 14];
    if (v11)
      v7 |= (*v11 >> 13) & 0x1B;
  }
  else
  {
    LODWORD(v8) = (v8 >> 19) & 1;
  }
  if (v10)
    v12 = v8 + 1;
  else
    v12 = v8;
  v13 = a1[1];
  if ((_DWORD)v13)
  {
    v14 = &a1[2 * v12 + 14];
    v15 = 8 * v13;
    do
    {
      v16 = *(_DWORD **)v14;
      v14 += 2;
      v7 |= (*v16 >> 13) & 0x1B;
      v15 -= 8;
    }
    while (v15);
  }
  return v7;
}

uint64_t sub_22EFB2EBC(unsigned __int8 *a1, int a2, int a3, int a4)
{
  int v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  int v11;
  BOOL v12;
  unsigned __int8 *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  int v28;
  int v29;
  _OWORD v30[2];
  __int128 v31;
  uint64_t v32;

  if (a2)
    v6 = 12;
  else
    v6 = 0;
  if (a3)
    v7 = v6 | 2;
  else
    v7 = v6;
  v31 = *((_OWORD *)a1 + 1);
  v32 = *((_QWORD *)a1 + 4);
  if (sub_22EFC6E30((uint64_t *)&v31))
    v8 = 2;
  else
    v8 = 0;
  v9 = v7 | a4 | v8 | sub_22EFC6DC8((uint64_t *)&v31);
  v10 = *((_QWORD *)a1 + 5);
  if (v10)
  {
    v29 = sub_22F0AAC5C(v10);
    v9 |= (2 * v29) & 0x10 | v29 & 3;
  }
  v11 = *a1;
  v12 = v11 == 211;
  if (v11 == 211)
    v13 = a1;
  else
    v13 = 0;
  v14 = v13 + 64;
  if (v12)
    v15 = v14;
  else
    v15 = a1 + 80;
  v16 = *((unsigned int *)a1 + 1);
  if ((_DWORD)v16)
  {
    v17 = 8 * v16;
    do
    {
      v18 = *v15 & 0xFFFFFFFFFFFFFFFCLL;
      v19 = *(_QWORD *)(v18 + 16);
      v20 = (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF8);
      if ((v19 & 4) != 0)
        v20 = (_QWORD *)*v20;
      if ((sub_22EFC7ADC((unint64_t)v20) & 1) != 0 || (*(_DWORD *)(v18 + 28) & 0x7F) == 0x4A)
        v9 |= 0xEu;
      ++v15;
      v17 -= 8;
    }
    while (v17);
  }
  v21 = sub_22EFB3030((unsigned int *)a1);
  if (v22)
  {
    v24 = (__int128 *)v21;
    v25 = 32 * v22;
    do
    {
      v26 = *v24;
      v27 = v24[1];
      v24 += 2;
      v30[0] = v26;
      v30[1] = v27;
      v28 = sub_22F0EEB00((uint64_t)v30);
      v9 |= v28 & 3 | (2 * v28) & 0x10 | ((char)(32 * v28) >> 7) & 0xC;
      v25 -= 32;
    }
    while (v25);
  }
  return v9;
}

uint64_t sub_22EFB3030(unsigned int *a1)
{
  unint64_t v1;
  uint64_t v2;
  unsigned int *v3;

  v1 = *a1;
  if ((v1 & 0x40000) != 0 && ((v2 = a1[1], *a1 != 211) ? (v3 = a1 + 20) : (v3 = a1 + 16), v3[2 * v2]))
    return (uint64_t)&v3[4 * ((v1 >> 18) & 1) + 2 * v2];
  else
    return 0;
}

uint64_t sub_22EFB3080(unsigned int *a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  int v15;
  _OWORD v16[2];
  __int128 v17;
  uint64_t v18;

  v17 = *((_OWORD *)a1 + 2);
  v18 = *((_QWORD *)a1 + 6);
  v2 = sub_22EFC6E30((uint64_t *)&v17);
  v3 = sub_22EFC6DC8((uint64_t *)&v17);
  if (v2)
    v4 = 14;
  else
    v4 = 12;
  v5 = v4 | v3;
  v6 = *((_QWORD *)a1 + 2);
  if (v6)
  {
    v7 = sub_22F0AAC5C(v6);
    v5 |= (2 * v7) & 0x10 | v7 & 3;
  }
  v8 = *a1;
  if ((v8 & 0x40000) != 0)
  {
    if (a1[14])
    {
      v10 = a1[17];
      if ((_DWORD)v10)
      {
        v11 = &a1[4 * ((v8 >> 18) & 1) + 14];
        v12 = 32 * v10;
        do
        {
          v13 = *(_OWORD *)v11;
          v14 = *((_OWORD *)v11 + 1);
          v11 += 8;
          v16[0] = v13;
          v16[1] = v14;
          v15 = sub_22F0EEB00((uint64_t)v16);
          v5 |= v15 & 3 | (2 * v15) & 0x10 | ((char)(32 * v15) >> 7) & 0xC;
          v12 -= 32;
        }
        while (v12);
      }
    }
  }
  return v5;
}

uint64_t sub_22EFB3170(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 17);
  v2 = (v1 << 29 >> 31) & 0xC | v1 & 0x12;
  v3 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD ***)(a1 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      v2 |= (*v6 >> 13) & 0x1B;
      v5 -= 8;
    }
    while (v5);
  }
  return v2;
}

uint64_t sub_22EFB31C8(unsigned __int8 *a1)
{
  int v1;
  int v2;
  int v3;
  BOOL v4;
  unsigned __int8 *v5;
  _DWORD **v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a1 + 1) & 0xFFFFFFFFFFFFFFF0) + 17);
  v2 = (v1 << 29 >> 31) & 0xC | v1 & 0x12;
  v3 = *a1;
  v4 = v3 == 119;
  if (v3 == 119)
    v5 = a1;
  else
    v5 = 0;
  v6 = (_DWORD **)(v5 + 48);
  if (!v4)
    v6 = (_DWORD **)(a1 + 40);
  v7 = *((unsigned int *)a1 + 8);
  if ((_DWORD)v7)
  {
    v8 = 8 * v7;
    do
    {
      v9 = *v6++;
      v2 |= (*v9 >> 13) & 0x1B;
      v8 -= 8;
    }
    while (v8);
  }
  return v2;
}

uint64_t sub_22EFB3234(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = (_QWORD *)(*(_QWORD *)(v1 + 72) & 0xFFFFFFFFFFFFFFFCLL);
  if ((*(_BYTE *)(v1 + 68) & 1) != 0)
    v2 = (_QWORD *)*v2;
  return (*(_DWORD *)v2 >> 13) & 0x1F;
}

uint64_t sub_22EFB3258(uint64_t a1)
{
  int v1;
  uint64_t v2;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;

  v1 = *(_BYTE *)(*(_QWORD *)(**(_QWORD **)(a1 + 16) & 0xFFFFFFFFFFFFFFF0) + 17) & 0x1F | *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 17) & 0x1C | 0xA;
  v2 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v2)
  {
    v4 = (_DWORD **)(a1 + 32);
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v1 |= (*v6 >> 13) & 0x11;
      v5 -= 8;
    }
    while (v5);
  }
  return v1;
}

uint64_t sub_22EFB32C4(unsigned int *a1)
{
  _DWORD *v2;
  int v3;
  unint64_t v4;
  int v5;
  int v6;
  unint64_t v7;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  int v15;
  _OWORD v16[2];
  __int128 v17;
  uint64_t v18;

  v2 = (_DWORD *)*((_QWORD *)a1 + 2);
  if (!v2 || (sub_22EFFFB48(*((unsigned __int8 **)a1 + 2)) & 1) != 0)
    v3 = 14;
  else
    v3 = (*v2 >> 13) & 0x11 | 0xE;
  v4 = *((_QWORD *)a1 + 4);
  if (v4)
  {
    v9 = sub_22F0AAC5C(v4);
    v3 |= (2 * v9) & 0x10 | v9 & 1;
  }
  v17 = *((_OWORD *)a1 + 3);
  v18 = *((_QWORD *)a1 + 8);
  if (sub_22EFC6E30((uint64_t *)&v17))
    v5 = 2;
  else
    v5 = 0;
  v6 = v5 | v3 | sub_22EFC6DC8((uint64_t *)&v17);
  v7 = *a1;
  if ((v7 & 0x80000) != 0)
  {
    if (a1[18])
    {
      v10 = a1[21];
      if ((_DWORD)v10)
      {
        v11 = &a1[4 * ((v7 >> 19) & 1) + 18];
        v12 = 32 * v10;
        do
        {
          v13 = *(_OWORD *)v11;
          v14 = *((_OWORD *)v11 + 1);
          v11 += 8;
          v16[0] = v13;
          v16[1] = v14;
          v15 = sub_22F0EEB00((uint64_t)v16);
          v6 |= v15 & 3 | (2 * v15) & 0x10 | ((char)(32 * v15) >> 7) & 0xC;
          v12 -= 32;
        }
        while (v12);
      }
    }
  }
  return v6;
}

uint64_t sub_22EFB33E0(uint64_t a1)
{
  int v1;
  unsigned __int8 v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD **v5;
  _DWORD *v6;
  _DWORD *v7;
  unsigned int v8;
  char v9;

  v1 = *(_DWORD *)(a1 + 16);
  v2 = 0;
  v3 = v1 & 0x7FFFFFFF;
  if ((v1 & 0x7FFFFFFF) != 0)
  {
    v4 = (_DWORD *)(a1 + 16 * v3 + 40);
    v5 = (_DWORD **)(a1 + 48);
    do
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      if (v1 < 0)
      {
        v8 = (*v7 | *v6) >> 13;
        if (*v4)
        {
          v9 = 26;
          goto LABEL_8;
        }
      }
      else
      {
        v8 = (*v7 | *v6) >> 13;
      }
      v9 = 27;
LABEL_8:
      v2 |= v9 & v8;
      v4 += 2;
      v5 += 2;
      --v3;
    }
    while (v3);
  }
  return v2;
}

unsigned int *sub_22EFB3458(unsigned int *result, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int *v16;
  int *v17;
  int v18;
  __int128 v19;

  v2 = *a2;
  *a2 = *result & 0xFFFFFFFE | *a2 & 1;
  v3 = result[1];
  *result = v2 & 0xFFFFFFFE | *result & 1;
  result[1] = a2[1];
  a2[1] = v3;
  v4 = *a2;
  if ((*result & 1) != 0)
  {
    if ((v4 & 1) == 0)
    {
      v6 = a2;
      goto LABEL_7;
    }
    v9 = 0;
    while (1)
    {
      v10 = (int *)&result[v9];
      v11 = (int *)&a2[v9];
      v12 = *(_QWORD *)&result[v9 + 2];
      v13 = *(_QWORD *)&a2[v9 + 2];
      v14 = v13 + 1;
      if ((unint64_t)(v12 + 1) >= 2 && v14 >= 2)
      {
        v18 = v10[4];
        *((_QWORD *)v10 + 1) = v13;
        v10[4] = v11[4];
        *((_QWORD *)v11 + 1) = v12;
        v11[4] = v18;
      }
      else
      {
        *((_QWORD *)v10 + 1) = v13;
        *((_QWORD *)v11 + 1) = v12;
        if ((unint64_t)(v12 + 1) >= 2)
        {
          v16 = (int *)&a2[v9];
          v17 = (int *)&result[v9];
          goto LABEL_22;
        }
        if (v14 >= 2)
        {
          v16 = (int *)&result[v9];
          v17 = (int *)&a2[v9];
LABEL_22:
          v16[4] = v17[4];
        }
      }
      v9 += 4;
      if (v9 == 32)
        return result;
    }
  }
  if ((v4 & 1) == 0)
  {
    v5 = *((_QWORD *)result + 1);
    *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v5;
    LODWORD(v5) = result[4];
    result[4] = a2[4];
    a2[4] = v5;
    return result;
  }
  v4 = *result;
  v6 = result;
  result = a2;
LABEL_7:
  v7 = 0;
  v19 = *(_OWORD *)(v6 + 2);
  *v6 = v4 | 1;
  do
  {
    v8 = *(_QWORD *)&result[v7 + 2];
    *(_QWORD *)&v6[v7 + 2] = v8;
    if ((unint64_t)(v8 + 1) >= 2)
      v6[v7 + 4] = result[v7 + 4];
    v7 += 4;
  }
  while (v7 != 32);
  *result &= ~1u;
  *(_OWORD *)(result + 2) = v19;
  return result;
}

uint64_t sub_22EFB35BC(unint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6[3];
  uint64_t v7;
  llvm *v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  _QWORD v14[5];
  void *v15;
  uint64_t v16;
  _DWORD v17[26];
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  v6[0] = (uint64_t)v6;
  v6[1] = (uint64_t)v6;
  v6[2] = 0;
  v7 = 1;
  for (i = 5; i != 21; i += 2)
    v6[i - 1] = 0;
  v10 = v14;
  v11 = v14;
  v12 = 4;
  v13 = 0;
  v14[4] = 0;
  v15 = v17;
  v16 = 0x400000000;
  v17[24] = 0;
  *(_DWORD *)((char *)v18 + 7) = 0;
  v18[0] = 0;
  v3 = sub_22EFB36DC(a1, a2, &v5);
  if (v15 != v17)
    free(v15);
  if (v11 != v10)
    free(v11);
  if ((v7 & 1) == 0)
    llvm::deallocate_buffer(v8, (void *)(16 * v9));
  sub_22E687D9C(v6);
  return v3;
}

uint64_t sub_22EFB36DC(unint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v6;
  uint64_t v8;

  v6 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1 + 32))(a1);
  if (v6 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2))
    return 0;
  *a3 = a1;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  return sub_22EFB3774(a1, (unsigned int (*)(uint64_t, unint64_t, uint64_t))sub_22EFB55A4, (uint64_t)&v8, (uint64_t)a3, 0);
}

uint64_t sub_22EFB3774(unint64_t a1, unsigned int (*a2)(uint64_t, unint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int i;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  _QWORD *v20;
  uint64_t v22[3];
  uint64_t v23;

  if (!a1 || (v6 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
    if ((v7 & 4) != 0)
      v8 = *(_QWORD *)v8;
    for (i = *(_WORD *)(v8 + 8) & 0x7F; i != 83; i = *(_WORD *)(v8 + 8) & 0x7F)
    {
      v10 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v10 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_16;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_15;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_22;
        if (i == 24)
        {
LABEL_9:
          v10 = -48;
        }
        else
        {
LABEL_15:
          if (i != 70)
          {
LABEL_16:
            v11 = i - 52;
            if ((i - 33) >= 5)
              v12 = -48;
            else
              v12 = -64;
            if (v11 >= 6)
              v10 = v12;
            else
              v10 = -72;
            goto LABEL_22;
          }
          v10 = -64;
        }
      }
LABEL_22:
      v13 = *(_QWORD *)(v8 + v10 + 16);
      v8 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0)
        v8 = *(_QWORD *)v8;
    }
    v6 = v8 - 40;
  }
  v14 = sub_22EFB3D74(a4, *(_QWORD *)(v6 + 88), (_QWORD *)a1, a2, a3, a5);
  if ((_DWORD)v14)
    v15 = *(_BYTE *)(a4 + 369) == 0;
  else
    v15 = 1;
  if (!v15 && *(_BYTE *)(a4 + 368) != 0)
  {
    v17 = (_QWORD *)(a4 + 8);
    v22[2] = 0;
    v23 = a4;
    v22[0] = (uint64_t)v22;
    v22[1] = (uint64_t)v22;
    v18 = *(_QWORD **)(a4 + 16);
    if (v18 != v17)
    {
      while (1)
      {
        v19 = sub_22EFB56CC((uint64_t)&v23, v18 + 2);
        v20 = (_QWORD *)v18[1];
        if (v19)
          break;
LABEL_42:
        v18 = v20;
        if (v20 == v17)
          goto LABEL_45;
      }
      while (v20 != v17)
      {
        if (!sub_22EFB56CC((uint64_t)&v23, v20 + 2))
        {
          sub_22EFB5828((uint64_t)v22, v22, (uint64_t)v17, v18, v20);
          v20 = (_QWORD *)v20[1];
          goto LABEL_42;
        }
        v20 = (_QWORD *)v20[1];
      }
      sub_22EFB5828((uint64_t)v22, v22, (uint64_t)v17, v18, v17);
    }
LABEL_45:
    sub_22E687D9C(v22);
  }
  return v14;
}

uint64_t sub_22EFB397C(uint64_t *a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10[3];
  uint64_t v11;
  llvm *v12;
  unsigned int v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  _QWORD v18[5];
  void *v19;
  uint64_t v20;
  _DWORD v21[26];
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  sub_22E3CD31C((uint64_t *)(a1[13] + 96), a1[13]);
  if (!*(_DWORD *)(a1[16] + 20))
    return 0;
  v9 = 0;
  v10[0] = (uint64_t)v10;
  v10[1] = (uint64_t)v10;
  v10[2] = 0;
  v11 = 1;
  for (i = 5; i != 21; i += 2)
    v10[i - 1] = 0;
  v14 = v18;
  v15 = v18;
  v16 = 4;
  v17 = 0;
  v18[4] = 0;
  v19 = v21;
  v20 = 0x400000000;
  v21[24] = 0;
  *(_DWORD *)((char *)v22 + 7) = 0;
  v22[0] = 0;
  v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
  if (v5 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2))
  {
    v6 = 0;
  }
  else
  {
    v9 = a1;
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v6 = sub_22EFB3774(a1, sub_22EFB5614, &v8, &v9, 0);
  }
  if (v19 != v21)
    free(v19);
  if (v15 != v14)
    free(v15);
  if ((v11 & 1) == 0)
    llvm::deallocate_buffer(v12, (void *)(16 * v13));
  sub_22E687D9C(v10);
  return v6;
}

uint64_t sub_22EFB3B2C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t i;
  _QWORD v19[9];

  v19[8] = *MEMORY[0x24BDAC8D0];
  for (i = 0x800000000; ; LODWORD(i) = i - 1)
  {
    v6 = sub_22E46A3A0(a1);
    if (v6 != v7)
      break;
LABEL_17:
    if (!(_DWORD)i)
      return 1;
    a1 = v19[i - 1];
  }
  v8 = v6;
  v9 = v7;
  if (a1)
    v10 = a1 + 64;
  else
    v10 = 0;
  while (1)
  {
    v11 = *(_QWORD *)(**(_QWORD **)(v8 + 16) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v11 + 8) & 0xF) != 0)
      v11 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v8 + 16));
    v12 = 0;
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v13)
      return v12;
    if (*(_BYTE *)(v13 + 16) != 45)
      return v12;
    v14 = sub_22F114198(*(_QWORD *)(v13 + 24));
    v15 = sub_22EFC3500(v14);
    v12 = v15;
    if (!v15)
      return v12;
    if (sub_22EFC7ADC(v15 + 64) && !sub_22EFB3CF0(v12, v10))
      return 0;
    v16 = i;
    if (i >= (unint64_t)HIDWORD(i))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v16 = i;
    }
    v19[v16] = v12;
    LODWORD(i) = i + 1;
    if ((a2(a3, v12) & 1) == 0)
      return 0;
    v8 += 24;
    if (v8 == v9)
      goto LABEL_17;
  }
}

BOOL sub_22EFB3CF0(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v8;

  v3 = a1 + 64;
  while (1)
  {
    v4 = *(_WORD *)(a2 + 8) & 0x7F;
    if (v4 == 16)
      break;
    if (v4 == 83)
      break;
    v5 = sub_22EFCC008(a2);
    if (v5 == sub_22EFCC008(v3))
      break;
    v8 = *(_QWORD *)(sub_22EFCAD5C(a2) + 16);
    a2 = v8 & 0xFFFFFFFFFFFFFFF8;
    if ((v8 & 4) != 0)
      a2 = *(_QWORD *)a2;
  }
  return v4 != 83 && v4 != 16;
}

uint64_t sub_22EFB3D74(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int (*a4)(uint64_t, unint64_t, uint64_t), uint64_t a5, uint64_t a6)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  const void **v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  _QWORD *v17;
  int v18;
  _BOOL4 v19;
  int v20;
  int v21;
  unsigned int v22;
  _BYTE *v23;
  char *v24;
  char *v25;
  __int128 v26;
  unsigned int v27;
  int v28;
  int v29;
  _QWORD *v30;
  void *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  BOOL v47;
  char *v48;
  _OWORD *v51;
  uint64_t v52;
  int v53;
  int v55;
  uint64_t v57;
  _QWORD *v58[2];
  int v59;
  unint64_t v60;

  v51 = (_OWORD *)(a1 + 352);
  v55 = *(_DWORD *)(a1 + 352);
  v53 = *(_DWORD *)(a1 + 248);
  v9 = sub_22E46A3A0((uint64_t)a3);
  v57 = v10;
  if (v9 != v10)
  {
    v11 = v9;
    v12 = 0;
    v13 = (const void **)(a1 + 240);
    v52 = a5;
    while (1)
    {
      v14 = *(_QWORD *)(**(_QWORD **)(v11 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v14 + 8) & 0xF) != 0)
        v14 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v11 + 16));
      v15 = *(_QWORD *)(*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0;
      v60 = v15;
      if ((a6 & 1) == 0 && (*(_BYTE *)(*(_QWORD *)v15 + 17) & 4) != 0)
        goto LABEL_78;
      v58[0] = 0;
      v16 = sub_22EFB5144(a1 + 32, &v60, v58);
      v17 = v58[0];
      if (v16)
      {
        v18 = *((_DWORD *)v58[0] + 2);
      }
      else
      {
        v17 = sub_22EFB51E8((_DWORD *)(a1 + 32), (uint64_t)&v60, &v60, v58[0]);
        v18 = 0;
        *v17 = v60;
        *((_DWORD *)v17 + 2) = 0;
      }
      if ((*(_BYTE *)(v11 + 12) & 1) == 0)
        break;
      v19 = (v18 & 1) == 0;
      *((_DWORD *)v17 + 2) = v18 | 1;
      if (!*(_BYTE *)(a1 + 370) || *(_QWORD *)(a1 + 232))
        goto LABEL_13;
      v20 = 0;
      v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v60 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (*(_BYTE *)(v40 + 16) != 45)
        v40 = 0;
      *(_QWORD *)(a1 + 232) = v40;
LABEL_14:
      if (!*(_BYTE *)(a1 + 369))
        goto LABEL_29;
      v58[0] = (_QWORD *)v11;
      v58[1] = a3;
      if ((*(_BYTE *)(v11 + 12) & 1) != 0)
        v21 = 0;
      else
        v21 = *((_DWORD *)v17 + 2) >> 1;
      v59 = v21;
      v22 = *(_DWORD *)(a1 + 248);
      v23 = *(_BYTE **)(a1 + 240);
      if (v22 >= *(_DWORD *)(a1 + 252))
      {
        v47 = &v23[24 * v22] > (_BYTE *)v58;
        if (v23 <= (_BYTE *)v58 && v47)
        {
          v48 = (char *)((char *)v58 - v23);
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v23 = *v13;
          v24 = &v48[(_QWORD)*v13];
          a5 = v52;
          goto LABEL_20;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v23 = *v13;
      }
      v24 = (char *)v58;
LABEL_20:
      v25 = &v23[24 * *(unsigned int *)(a1 + 248)];
      v26 = *(_OWORD *)v24;
      *((_QWORD *)v25 + 2) = *((_QWORD *)v24 + 2);
      *(_OWORD *)v25 = v26;
      ++*(_DWORD *)(a1 + 248);
      LODWORD(v25) = *(unsigned __int8 *)(v11 + 12);
      v27 = (v25 >> 2) & 3;
      v28 = v25 & 2;
      if (v27 != 3)
        v28 = v27;
      v29 = v55;
      if (v55 <= v28)
        v29 = v28;
      if (v28 == 2)
        v29 = 3;
      if (v53)
        v28 = v29;
      *(_DWORD *)(a1 + 352) = v28;
LABEL_29:
      if (!a4(a5, v11, a1 + 240))
      {
        if (v19)
        {
          v35 = *(_QWORD *)(**(_QWORD **)(v11 + 16) & 0xFFFFFFFFFFFFFFF0);
          v36 = *(_QWORD *)(v35 + 8) & 0xFLL;
          if ((_DWORD)a6)
          {
            if (v36)
              v35 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v11 + 16));
            v37 = sub_22F10D628(*(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0));
            if (!v37)
            {
              v41 = *(_QWORD *)(**(_QWORD **)(v11 + 16) & 0xFFFFFFFFFFFFFFF0);
              if ((*(_BYTE *)(v41 + 8) & 0xF) != 0)
                v41 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v11 + 16));
              LODWORD(v34) = 0;
              v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
              if (!v42 || *(_BYTE *)(v42 + 16) != 45)
                goto LABEL_74;
              v39 = (uint64_t *)sub_22F114198(*(_QWORD *)(v42 + 24));
              if (v39)
                goto LABEL_62;
              goto LABEL_67;
            }
            v58[0] = *(_QWORD **)(v37 + 32);
            v38 = sub_22F0F08CC((uint64_t *)v58);
            if (!v38)
              goto LABEL_67;
            if ((*(_DWORD *)(v38 + 28) & 0x7F) != 0x1C)
              goto LABEL_67;
            v39 = *(uint64_t **)(v38 + 48);
            if (!v39)
              goto LABEL_67;
LABEL_62:
            if (!v39[16])
            {
              sub_22E3CD31C((uint64_t *)(v39[13] + 96), v39[13]);
              v34 = v39[16];
              if (!v34)
                goto LABEL_68;
            }
            v43 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 168), v39);
            v44 = *(_QWORD *)(a1 + 176);
            v45 = 184;
            if (v44 == *(_QWORD *)(a1 + 168))
              v45 = 188;
            if (v43 != (void **)(v44 + 8 * *(unsigned int *)(a1 + v45)))
            {
LABEL_67:
              LODWORD(v34) = 0;
              goto LABEL_68;
            }
            sub_22E3BA850(a1 + 168, v39);
          }
          else
          {
            if (v36)
              v35 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v11 + 16));
            v39 = (uint64_t *)sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 8) & 0xFFFFFFFFFFFFFFF0)
                                                     + 24));
            if (!v39)
              goto LABEL_67;
          }
          v46 = v39;
          a5 = v52;
          if (sub_22EFB3D74(a1, a2, v46, a4, v52, a6))
          {
            if (!*(_BYTE *)(a1 + 368))
            {
LABEL_90:
              v12 = 1;
              return v12 & 1;
            }
            LODWORD(v34) = 1;
            v12 = 1;
            goto LABEL_74;
          }
        }
        LODWORD(v34) = 0;
        goto LABEL_74;
      }
      if (*(_BYTE *)(a1 + 369))
      {
        v30 = operator new(0x90uLL);
        v31 = v30 + 4;
        v30[2] = v30 + 4;
        *v30 = 0;
        v30[1] = 0;
        v30[3] = 0x400000000;
        if (v30 + 2 != v13)
        {
          v32 = *(_DWORD *)(a1 + 248);
          if (v32)
          {
            if (v32 < 5)
            {
              v33 = *(unsigned int *)(a1 + 248);
              goto LABEL_35;
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v33 = *(unsigned int *)(a1 + 248);
            if ((_DWORD)v33)
            {
              v31 = (void *)v30[2];
LABEL_35:
              memcpy(v31, *v13, 24 * v33);
            }
            *((_DWORD *)v30 + 6) = v32;
          }
        }
        *((_OWORD *)v30 + 8) = *v51;
        v34 = *(_QWORD *)(a1 + 8);
        *v30 = v34;
        v30[1] = a1 + 8;
        *(_QWORD *)(v34 + 8) = v30;
        *(_QWORD *)(a1 + 8) = v30;
        ++*(_QWORD *)(a1 + 24);
        LODWORD(v34) = 1;
        v12 = 1;
LABEL_68:
        a5 = v52;
LABEL_74:
        if (*(_BYTE *)(a1 + 369))
          --*(_DWORD *)(a1 + 248);
        if (((v20 | v34) & 1) == 0)
          *(_QWORD *)(a1 + 232) = 0;
        goto LABEL_78;
      }
      if (!*(_BYTE *)(a1 + 368))
        goto LABEL_90;
      v12 = 1;
LABEL_78:
      v11 += 24;
      if (v11 == v57)
        goto LABEL_88;
    }
    *((_DWORD *)v17 + 2) = v18 + 2;
    v19 = 1;
LABEL_13:
    v20 = 1;
    goto LABEL_14;
  }
  v12 = 0;
LABEL_88:
  *(_DWORD *)v51 = v55;
  return v12 & 1;
}

unint64_t sub_22EFB4308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;

  result = sub_22EFCE144(a1 + 64, a3);
  *(_QWORD *)(a2 + 120) = result;
  if (result)
  {
    v5 = result;
    while (1)
    {
      v6 = v5 & 0xFFFFFFFFFFFFFFF8;
      if ((v5 & 4) == 0 || !v6)
        break;
      result = (*(_DWORD *)(*(_QWORD *)v6 + 28) & 0x2A0000) != 0;
      if ((*(_DWORD *)(*(_QWORD *)v6 + 28) & 0x2A0000) == 0)
      {
        v5 = *(_QWORD *)(v6 + 8);
        if (v5)
          continue;
      }
      return result;
    }
    return (*(_BYTE *)(v6 + 30) & 0x2A) != 0;
  }
  return result;
}

void sub_22EFB437C(unint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int (*a3)(_QWORD, _QWORD)@<X2>, uint64_t a4@<X3>, unint64_t **a5@<X8>)
{
  unint64_t v7;
  unint64_t v9;
  unint64_t *v10;
  char v11;
  unint64_t *v12;
  BOOL v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t i;
  uint64_t v27;
  unint64_t v28;
  _BOOL4 v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int (*v42)(_QWORD, _QWORD);
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  llvm *v51;
  unsigned int v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  int v56;
  _QWORD v57[5];
  void *v58;
  uint64_t v59;
  _DWORD v60[26];
  uint64_t v61;
  __int16 v62;
  char v63;
  uint64_t v64;

  v7 = a1;
  v64 = *MEMORY[0x24BDAC8D0];
  v45 = a2;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  v9 = sub_22EFCE144(a1 + 64, a2);
  v42 = a3;
  v43 = a4;
  if (!v9)
  {
    v10 = 0;
    goto LABEL_33;
  }
  v41 = v7;
  v10 = 0;
  v11 = 0;
  do
  {
    v12 = (unint64_t *)(v9 & 0xFFFFFFFFFFFFFFF8);
    v13 = (v9 & 0xFFFFFFFFFFFFFFF8) == 0 || (v9 & 4) == 0;
    v14 = v9 & 0xFFFFFFFFFFFFFFF8;
    if (!v13)
      v14 = *v12;
    v15 = (*(_DWORD *)(v14 + 28) & 0x2A0000) != 0;
    if (a3(a4, v14))
    {
      v16 = (unint64_t)a5[2];
      if ((unint64_t)v10 >= v16)
      {
        v18 = *a5;
        v19 = v10 - *a5;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 61)
LABEL_74:
          abort();
        v21 = v16 - (_QWORD)v18;
        if (v21 >> 2 > v20)
          v20 = v21 >> 2;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          if (v22 >> 61)
LABEL_75:
            sub_22E3B3F8C();
          v23 = (char *)operator new(8 * v22);
        }
        else
        {
          v23 = 0;
        }
        v24 = (unint64_t *)&v23[8 * v19];
        *v24 = v14;
        v17 = v24 + 1;
        if (v10 != v18)
        {
          do
          {
            v25 = *--v10;
            *--v24 = v25;
          }
          while (v10 != v18);
          v10 = *a5;
        }
        *a5 = v24;
        a5[1] = v17;
        a5[2] = (unint64_t *)&v23[8 * v22];
        a4 = v43;
        if (v10)
          operator delete(v10);
        a3 = v42;
      }
      else
      {
        *v10 = v14;
        v17 = v10 + 1;
      }
      a5[1] = v17;
      v10 = v17;
    }
    v11 |= v15;
    if (v13)
      break;
    v9 = v12[1];
  }
  while (v9);
  v7 = v41;
  if ((v11 & 1) == 0)
  {
LABEL_33:
    v47 = (uint64_t)&v47;
    v48 = &v47;
    v49 = 0;
    v50 = 1;
    for (i = 40; i != 168; i += 16)
      *(unint64_t *)((char *)&v46 + i) = 0;
    v53 = v57;
    v54 = v57;
    v55 = 4;
    v56 = 0;
    v57[4] = 0;
    v58 = v60;
    v59 = 0x400000000;
    v60[24] = 0;
    v61 = 0;
    v62 = 257;
    v63 = 1;
    v44 = &v45;
    v46 = v7;
    if (!sub_22EFB3774(v7, (unsigned int (*)(uint64_t, unint64_t, uint64_t))sub_22EFB58A0, (uint64_t)&v44, (uint64_t)&v46, 1)|| (v27 = v48[17]) == 0)
    {
LABEL_67:
      if (v58 != v60)
        free(v58);
      if (v54 != v53)
        free(v54);
      if ((v50 & 1) == 0)
        llvm::deallocate_buffer(v51, (void *)(16 * v52));
      sub_22E687D9C(&v47);
      return;
    }
    while (1)
    {
      v28 = v27 & 0xFFFFFFFFFFFFFFF8;
      v29 = (v27 & 0xFFFFFFFFFFFFFFF8) == 0 || (v27 & 4) == 0;
      if (v29)
      {
        if ((*(_BYTE *)(v28 + 30) & 0x2A) == 0)
          goto LABEL_67;
        v30 = v27 & 0xFFFFFFFFFFFFFFF8;
        if ((((uint64_t (*)(uint64_t, unint64_t))a3)(a4, v28) & 1) == 0)
          goto LABEL_67;
      }
      else
      {
        if ((*(_BYTE *)(*(_QWORD *)v28 + 30) & 0x2A) == 0 || !((unsigned int (*)(uint64_t))a3)(a4))
          goto LABEL_66;
        v30 = *(_QWORD *)v28;
      }
      v31 = (unint64_t)a5[2];
      if ((unint64_t)v10 >= v31)
      {
        v33 = *a5;
        v34 = v10 - *a5;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 61)
          goto LABEL_74;
        v36 = v31 - (_QWORD)v33;
        if (v36 >> 2 > v35)
          v35 = v36 >> 2;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
          v37 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (v37)
        {
          if (v37 >> 61)
            goto LABEL_75;
          v38 = (char *)operator new(8 * v37);
        }
        else
        {
          v38 = 0;
        }
        v39 = (unint64_t *)&v38[8 * v34];
        *v39 = v30;
        v32 = v39 + 1;
        if (v10 != v33)
        {
          do
          {
            v40 = *--v10;
            *--v39 = v40;
          }
          while (v10 != v33);
          v10 = *a5;
        }
        *a5 = v39;
        a5[1] = v32;
        a5[2] = (unint64_t *)&v38[8 * v37];
        a4 = v43;
        if (v10)
          operator delete(v10);
        a3 = v42;
      }
      else
      {
        *v10 = v30;
        v32 = v10 + 1;
      }
      a5[1] = v32;
      v10 = v32;
      if (v29)
        goto LABEL_67;
LABEL_66:
      v27 = *(_QWORD *)(v28 + 8);
      if (!v27)
        goto LABEL_67;
    }
  }
}

void sub_22EFB476C(uint64_t *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  uint64_t v32;
  int v33;
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  char *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD v88[8];

  v7 = a2;
  v88[6] = *MEMORY[0x24BDAC8D0];
  if ((a3 & 1) != 0)
  {
    v9 = 0;
  }
  else
  {
    v84 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v64 = sub_22F283EC0(a1, &v84);
    v9 = *((_DWORD *)v64 + 2) + 1;
    *((_DWORD *)v64 + 2) = v9;
  }
  v10 = sub_22E46A3A0(v7);
  if (v10 != v11)
  {
    v12 = v10;
    v13 = v11;
    v14 = &v87;
    v65 = (uint64_t)(a1 + 3);
    do
    {
      v15 = *(_QWORD *)(**(_QWORD **)(v12 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v15 + 8) & 0xF) != 0)
        v15 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v12 + 16));
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v16)
      {
        if (*(_BYTE *)(v16 + 16) == 45)
        {
          v17 = sub_22F114198(*(_QWORD *)(v16 + 24));
          v81 = v17;
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v17 + 104) + 96), *(_QWORD *)(v17 + 104));
          if ((**(_QWORD **)(v17 + 128) & 0x400) != 0)
          {
            if (*(_QWORD *)(a5 + 24) != *(_QWORD *)(a5 + 32) || (*(_BYTE *)(v12 + 12) & 1) != 0)
            {
              LODWORD(v86) = 0;
              v84 = 0;
              v85 = 0;
              v14[1] = 0;
              v14[2] = 0;
              *v14 = 0;
              v68 = a1;
              v69 = v7;
              v66 = v14;
              v67 = v13;
              if ((*(_BYTE *)(v12 + 12) & 1) != 0)
              {
                v20 = sub_22F24C2B0(v65, &v81);
                v21 = v20[1];
                if (v21)
                {
                  v19 = (_QWORD *)(v21 + 32);
                  v18 = (uint64_t *)(v21 + 24);
                }
                else
                {
                  v22 = v20;
                  v23 = operator new();
                  *(_QWORD *)(v23 + 32) = 0;
                  v19 = (_QWORD *)(v23 + 32);
                  *(_QWORD *)(v23 + 24) = 0;
                  v18 = (uint64_t *)(v23 + 24);
                  *(_QWORD *)v23 = 0;
                  *(_QWORD *)(v23 + 8) = 0;
                  *(_DWORD *)(v23 + 16) = 0;
                  *(_QWORD *)(v23 + 40) = 0;
                  v22[1] = v23;
                  sub_22EFB476C(a1, v17, 1, v17, v23);
                }
              }
              else
              {
                sub_22EFB476C(a1, v17, 0, a4, &v84);
                v18 = v14;
                v19 = v88;
              }
              v24 = (_QWORD *)*v18;
              v25 = (_QWORD *)*v19;
              v70 = (_QWORD *)*v19;
              while (v24 != v25)
              {
                v80 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v24 + 32))(*v24);
                v26 = sub_22F3ABA0C(a5, &v80);
                v27 = v24[4];
                v28 = v24[5];
                if (v27 != v28)
                {
                  v29 = v26;
                  do
                  {
                    v30 = *(unsigned int *)(v27 + 16);
                    if ((_DWORD)v30)
                    {
                      v31 = *(__int128 **)(v27 + 8);
                      v32 = 24 * v30;
                      do
                      {
                        v33 = *(_DWORD *)v27;
                        v34 = *v31;
                        v83 = *((_QWORD *)v31 + 2);
                        v82 = v34;
                        sub_22F3AB534(v29, v33, (unint64_t)&v82);
                        v31 = (__int128 *)((char *)v31 + 24);
                        v32 -= 24;
                      }
                      while (v32);
                    }
                    v27 += 120;
                  }
                  while (v27 != v28);
                }
                v24 += 7;
                v25 = v70;
              }
              sub_22F31EB90((uint64_t)&v84);
              a1 = v68;
              v7 = v69;
              v14 = v66;
              v13 = v67;
            }
            else
            {
              sub_22EFB476C(a1, v17, 0, a4, a5);
            }
          }
        }
      }
      v12 += 24;
    }
    while (v12 != v13);
  }
  v35 = sub_22E488FF8(v7);
  if (v35 != v36)
  {
    v37 = v35;
    v38 = v36;
    do
    {
      v39 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v37 + 32))(v37);
      if ((*(_BYTE *)(v39 + 82) & 0xC) != 0 || sub_22EFD7260(v39))
      {
        v40 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v37 + 32))(v37);
        *(_QWORD *)&v82 = v40;
        v41 = sub_22EFD7394(v40);
        if (v41 == v42)
        {
          v43 = sub_22F3ABA0C(a5, (uint64_t *)&v82);
          v77 = v40;
          v78 = v9;
          v79 = a4;
          sub_22F3AB534(v43, v9, (unint64_t)&v77);
        }
        else
        {
          v84 = &v86;
          HIDWORD(v85) = 4;
          v44 = 1;
          v86 = v41;
          v87 = v42;
          do
          {
            v45 = (char *)v84 + 16 * v44;
            v47 = (_QWORD *)*((_QWORD *)v45 - 2);
            v46 = (_QWORD *)*((_QWORD *)v45 - 1);
            LODWORD(v85) = --v44;
            if (v47 != v46)
            {
              do
              {
                v48 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v47 + 32))(*v47);
                v81 = v48;
                v49 = sub_22F3ABA0C(a5, &v81);
                v74 = v82;
                v75 = v9;
                v76 = a4;
                v50 = *(_QWORD *)(v49 + 24);
                v51 = *(_QWORD *)(v49 + 32);
                if (v50 != v51)
                {
                  v52 = v50 + 8;
                  do
                  {
                    *(_DWORD *)(v52 + 8) = 0;
                    v53 = sub_22E5BBF6C(v52, (unint64_t)&v74);
                    v54 = *(_QWORD *)v52 + 24 * *(unsigned int *)(v52 + 8);
                    v55 = *(_OWORD *)v53;
                    *(_QWORD *)(v54 + 16) = *(_QWORD *)(v53 + 16);
                    *(_OWORD *)v54 = v55;
                    ++*(_DWORD *)(v52 + 8);
                    v56 = v52 + 112;
                    v52 += 120;
                  }
                  while (v56 != v51);
                  v48 = v81;
                }
                v57 = sub_22EFD7394(v48);
                if (v57 != v58)
                {
                  v59 = v57;
                  v60 = v58;
                  v61 = v85;
                  if (v85 >= (unint64_t)HIDWORD(v85))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v61 = v85;
                  }
                  v62 = (uint64_t *)((char *)v84 + 16 * v61);
                  *v62 = v59;
                  v62[1] = v60;
                  LODWORD(v85) = v85 + 1;
                }
                ++v47;
              }
              while (v47 != v46);
              v44 = v85;
            }
          }
          while (v44);
          v63 = sub_22F3ABA0C(a5, (uint64_t *)&v82);
          v71 = v82;
          v72 = v9;
          v73 = a4;
          sub_22F3AB534(v63, v9, (unint64_t)&v71);
          if (v84 != &v86)
            free(v84);
        }
      }
      do
        v37 = *(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v37 && (*(_DWORD *)(v37 + 28) & 0x7Eu) - 54 > 3);
    }
    while (v37 != v38);
  }
}

unint64_t sub_22EFB4C94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int i;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  if (!a1 || (v4 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 4) != 0)
      v6 = *(_QWORD *)v6;
    for (i = *(_WORD *)(v6 + 8) & 0x7F; i != 83; i = *(_WORD *)(v6 + 8) & 0x7F)
    {
      v8 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v8 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_16;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_15;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_22;
        if (i == 24)
        {
LABEL_9:
          v8 = -48;
        }
        else
        {
LABEL_15:
          if (i != 70)
          {
LABEL_16:
            v9 = i - 52;
            if ((i - 33) >= 5)
              v10 = -48;
            else
              v10 = -64;
            if (v9 >= 6)
              v8 = v10;
            else
              v8 = -72;
            goto LABEL_22;
          }
          v8 = -64;
        }
      }
LABEL_22:
      v11 = *(_QWORD *)(v6 + v8 + 16);
      v6 = v11 & 0xFFFFFFFFFFFFFFF8;
      if ((v11 & 4) != 0)
        v6 = *(_QWORD *)v6;
    }
    v4 = v6 - 40;
  }
  v12 = *(_QWORD *)(v4 + 88);
  result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if (*(_DWORD *)(*(_QWORD *)(a1 + 128) + 20))
  {
    result = sub_22E46A3A0(a1);
    if (result != v14)
    {
      v15 = result;
      v16 = v14;
      do
      {
        v17 = *(_QWORD *)(**(_QWORD **)(v15 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v17 + 8) & 0xF) != 0)
          v17 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v15 + 16));
        v18 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                      + 24));
        result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v18 + 104) + 96), *(_QWORD *)(v18 + 104));
        if (*(_DWORD *)(*(_QWORD *)(v18 + 128) + 20))
          result = sub_22EFB4E74(v18, v12, a2);
        v15 += 24;
      }
      while (v15 != v16);
    }
  }
  return result;
}

unint64_t sub_22EFB4E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(sub_22F0C975C(a2, a1) + 72) + 48);
  if ((v6 & 4) != 0)
    sub_22E3BA850(a3, (const void *)(v6 & 0xFFFFFFFFFFFFFFF8));
  result = sub_22E46A3A0(a1);
  if (result != v8)
  {
    v9 = result;
    v10 = v8;
    do
    {
      v11 = *(_QWORD *)(**(_QWORD **)(v9 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v11 + 8) & 0xF) != 0)
        v11 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v9 + 16));
      v12 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                    + 24));
      result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v12 + 104) + 96), *(_QWORD *)(v12 + 104));
      if (*(_DWORD *)(*(_QWORD *)(v12 + 128) + 20))
        result = sub_22EFB4E74(v12, a2, a3);
      v9 += 24;
    }
    while (v9 != v10);
  }
  return result;
}

void sub_22EFB4F5C(void **a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *v5 = *a2;
    v6 = v5 + 7;
    sub_22F287114((uint64_t)(v5 + 1), (uint64_t)(a2 + 1));
    goto LABEL_19;
  }
  v7 = 0x6DB6DB6DB6DB6DB7 * (((char *)v5 - (_BYTE *)*a1) >> 3);
  v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) > 0x492492492492492)
    abort();
  v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - (_QWORD)*a1) >> 3);
  if (2 * v9 > v8)
    v8 = 2 * v9;
  if (v9 >= 0x249249249249249)
    v10 = 0x492492492492492;
  else
    v10 = v8;
  if (v10)
  {
    if (v10 > 0x492492492492492)
      sub_22E3B3F8C();
    v11 = (char *)operator new(56 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[56 * v7];
  v13 = &v11[56 * v10];
  *(_QWORD *)v12 = *a2;
  v6 = v12 + 56;
  sub_22F287114((uint64_t)(v12 + 8), (uint64_t)(a2 + 1));
  v15 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v12;
    a1[1] = v6;
    a1[2] = v13;
    if (!v14)
      goto LABEL_19;
    goto LABEL_18;
  }
  do
  {
    v16 = *((_QWORD *)v14 - 7);
    v14 -= 56;
    *((_QWORD *)v12 - 7) = v16;
    v12 -= 56;
    sub_22F287114((uint64_t)(v12 + 8), (uint64_t)(v14 + 8));
  }
  while (v14 != v15);
  v14 = (char *)*a1;
  v17 = (char *)a1[1];
  *a1 = v12;
  a1[1] = v6;
  a1[2] = v13;
  if (v17 != v14)
  {
    do
    {
      v18 = v17 - 56;
      sub_22F31EBDC((uint64_t)(v17 - 48));
      v17 = v18;
    }
    while (v18 != v14);
  }
  if (v14)
LABEL_18:
    operator delete(v14);
LABEL_19:
  a1[1] = v6;
}

_QWORD *sub_22EFB50E0(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22EFB5144((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22EFB51E8(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

uint64_t sub_22EFB5144(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_15;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((*a2 >> 9) ^ *a2);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_12:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -1;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_12;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_15:
  *a3 = v7;
  return result;
}

_QWORD *sub_22EFB51E8(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 8;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_22EFB52A4((uint64_t)a1, v7);
  v9 = 0;
  sub_22EFB5144((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4)
    --a1[1];
  return a4;
}

uint64_t sub_22EFB52A4(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v14;
    do
    {
      v10 = *(_QWORD *)(a1 + v8 + 8);
      if ((unint64_t)(v10 + 1) >= 2)
      {
        *(_QWORD *)v9 = v10;
        *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
        v9 += 16;
      }
      v8 += 16;
    }
    while (v8 != 128);
    if (a2 > 8)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22EFB5420(a1, (uint64_t)v14, (uint64_t)v9);
  }
  else
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22EFB5420(a1, (uint64_t)v6, (uint64_t)v6 + 16 * v7);
    return llvm::deallocate_buffer(v6, (void *)(16 * v7));
  }
}

uint64_t sub_22EFB5420(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 136);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = 0;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    if ((unint64_t)(*(_QWORD *)a2 + 1) >= 2)
    {
      v11 = 0;
      result = sub_22EFB5144((uint64_t)v5, (_QWORD *)a2, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

_QWORD *sub_22EFB54E0(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  char v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if ((v3 & 0x3E) == 0x1C)
    v4 = 64;
  else
    v4 = 1 << (33 - v3);
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 9)
  {
    v6 = result + 1;
    *result = 1;
    v7 = result + 17;
    goto LABEL_14;
  }
  if ((v2 & 1) != 0)
    return sub_22F3AB990(v1, v5);
  v8 = *((unsigned int *)result + 4);
  if (v5 != (_DWORD)v8)
  {
    llvm::deallocate_buffer((llvm *)result[1], (void *)(16 * v8));
    return sub_22F3AB990(v1, v5);
  }
  *result = 0;
  if (!v5)
    return result;
  v6 = (_QWORD *)result[1];
  v7 = &v6[2 * v5];
  do
  {
LABEL_14:
    *v6 = 0;
    v6 += 2;
  }
  while (v6 != v7);
  return result;
}

BOOL sub_22EFB55A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *(_QWORD *)(**(_QWORD **)(a2 + 16) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v3 + 8) & 0xF) != 0)
    v3 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(a2 + 16));
  v4 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 24));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4) == v2;
}

BOOL sub_22EFB5614(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a2 + 12) & 1) == 0)
    return 0;
  v3 = *a1;
  v4 = *(_QWORD *)(**(_QWORD **)(a2 + 16) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v4 + 8) & 0xF) != 0)
    v4 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(a2 + 16));
  v5 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 24));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5) == v3;
}

BOOL sub_22EFB5694(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) != *a1;
}

uint64_t sub_22EFB56CC(uint64_t a1, uint64_t *a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  v2 = *((_DWORD *)a2 + 2);
  if (v2)
  {
    v4 = *a2;
    v5 = *a2 + 24 * v2;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)v4 + 12) & 1) != 0)
      {
        v6 = **(_QWORD **)(*(_QWORD *)v4 + 16);
        v7 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v7 + 8) & 0xF) != 0)
          v7 = (unint64_t)sub_22F10D2BC(v6);
        result = 0;
        v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (!v9)
          return result;
        if (*(_BYTE *)(v9 + 16) != 45)
          return result;
        result = sub_22F114198(*(_QWORD *)(v9 + 24));
        if (!result)
          return result;
        v10 = *(_QWORD *)a1 + 8;
        v11 = *(_QWORD *)(*(_QWORD *)a1 + 16);
        if (v11 != v10)
        {
          v12 = result;
          do
          {
            v13 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 24 * *(unsigned int *)(v11 + 24) - 24)
                                          + 16) & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v13 + 8) & 0xF) != 0)
              v13 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v11 + 16)
                                                                            + 24 * *(unsigned int *)(v11 + 24)
                                                                            - 24)
                                                                + 16));
            v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            if (!v14)
              break;
            if (*(_BYTE *)(v14 + 16) != 45)
              break;
            v15 = (uint64_t *)sub_22F114198(*(_QWORD *)(v14 + 24));
            if (!v15)
              break;
            if ((sub_22EFB397C(v15, v12) & 1) != 0)
              return 1;
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
        }
      }
      v4 += 24;
    }
    while (v4 != v5);
  }
  return 0;
}

uint64_t sub_22EFB5828(uint64_t result, uint64_t *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (a4 != a5)
  {
    v5 = (_QWORD *)*a5;
    if (result != a3)
    {
      v6 = 1;
      if (v5 != a4)
      {
        v7 = a4;
        do
        {
          v7 = (_QWORD *)v7[1];
          ++v6;
        }
        while (v7 != v5);
      }
      *(_QWORD *)(a3 + 16) -= v6;
      *(_QWORD *)(result + 16) += v6;
    }
    v8 = *a4;
    *(_QWORD *)(v8 + 8) = v5[1];
    *(_QWORD *)v5[1] = v8;
    v9 = *a2;
    *(_QWORD *)(v9 + 8) = a4;
    *a4 = v9;
    *a2 = (uint64_t)v5;
    v5[1] = a2;
  }
  return result;
}

uint64_t sub_22EFB58A0(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = **a1;
  v6 = *(_QWORD *)(**(_QWORD **)(a2 + 16) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v6 + 8) & 0xF) != 0)
    v6 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(a2 + 16));
  v7 = sub_22F10D628(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0));
  if (v7)
  {
    v13 = *(_QWORD *)(v7 + 32);
    result = sub_22F0F08CC(&v13);
    if (result)
    {
      if ((*(_DWORD *)(result + 28) & 0x7F) == 0x1C)
      {
        result = *(_QWORD *)(result + 48);
        if (result)
          return sub_22EFB4308(result, a3, v5);
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    v9 = **(_QWORD **)(a2 + 16);
    v10 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v10 + 8) & 0xF) != 0)
      v10 = (unint64_t)sub_22F10D2BC(v9);
    result = 0;
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v11 && *(_BYTE *)(v11 + 16) == 45)
    {
      v12 = sub_22F114198(*(_QWORD *)(v11 + 24));
      return sub_22EFB4308(v12, a3, v5);
    }
  }
  return result;
}

void sub_22EFB59BC(uint64_t *a1, _DWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *i;
  char *v16;
  void *__p;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v4 = a1[2];
  v5 = a1[1];
  if (v5 >= v4)
  {
    v7 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v5 - *a1) >> 3);
    if (v7 + 1 > 0x222222222222222)
      abort();
    v8 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v4 - *a1) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0x111111111111111)
      v10 = 0x222222222222222;
    else
      v10 = v9;
    v21 = a1 + 2;
    if (v10 > 0x222222222222222)
      sub_22E3B3F8C();
    v11 = 120 * v10;
    v12 = (char *)operator new(120 * v10);
    v13 = &v12[120 * v7];
    __p = v12;
    v18 = v13;
    v20 = &v12[v11];
    *(_DWORD *)v13 = *a2;
    *((_QWORD *)v13 + 1) = v13 + 24;
    *((_QWORD *)v13 + 2) = 0x400000000;
    if (a2[4])
      sub_22F2A39AC((uint64_t)(v13 + 8), (uint64_t)(a2 + 2));
    v19 = v13 + 120;
    sub_22F3ABB68(a1, &__p);
    v6 = a1[1];
    v14 = v18;
    for (i = v19; i != v14; i -= 120)
    {
      v16 = (char *)*((_QWORD *)i - 14);
      if (i - 96 != v16)
        free(v16);
    }
    if (__p)
      operator delete(__p);
  }
  else
  {
    *(_DWORD *)v5 = *a2;
    *(_QWORD *)(v5 + 8) = v5 + 24;
    *(_QWORD *)(v5 + 16) = 0x400000000;
    if (a2[4])
      sub_22F2A39AC(v5 + 8, (uint64_t)(a2 + 2));
    v6 = v5 + 120;
  }
  a1[1] = v6;
}

_DWORD *sub_22EFB5B48(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  _DWORD *result;
  int v12;
  _DWORD *v13;
  int v14;
  _DWORD *v15;
  char v16;
  BOOL v17;
  unsigned int v18;

  v8 = *(_DWORD *)(a2 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)a2;
    v10 = (37 * *a3) & (v8 - 1);
    result = (_DWORD *)(*(_QWORD *)a2 + 8 * v10);
    v12 = *result;
    if (*a3 == *result)
    {
LABEL_17:
      v16 = 0;
      goto LABEL_9;
    }
    v13 = 0;
    v14 = 1;
    while (v12 != -1)
    {
      if (v13)
        v17 = 0;
      else
        v17 = v12 == -2;
      if (v17)
        v13 = result;
      v18 = v10 + v14++;
      v10 = v18 & (v8 - 1);
      result = (_DWORD *)(v9 + 8 * v10);
      v12 = *result;
      if (*a3 == *result)
        goto LABEL_17;
    }
    if (v13)
      v15 = v13;
    else
      v15 = result;
  }
  else
  {
    v15 = 0;
  }
  result = sub_22E742DA8(a2, (uint64_t)a3, a3, v15);
  *result = *a3;
  result[1] = *a4;
  v9 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 16);
  v16 = 1;
LABEL_9:
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v9 + 8 * v8;
  *(_BYTE *)(a1 + 16) = v16;
  return result;
}

uint64_t sub_22EFB5C34(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t i;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v2 = *((unsigned int *)a1 + 2);
  if (!(_DWORD)v2)
    return 0;
  v4 = 24 * v2;
  for (i = *a1; i == a2; i += 24)
  {
LABEL_28:
    v4 -= 24;
    if (!v4)
      return 0;
  }
  v6 = *(_WORD *)(*(_QWORD *)i + 80) & 0x7F;
  v7 = -40;
  if (v6 > 0x46)
  {
    if (v6 == 83)
      goto LABEL_22;
    if (v6 == 71)
    {
      v7 = -56;
      goto LABEL_22;
    }
    if (v6 != 81)
      goto LABEL_16;
  }
  else
  {
    if (v6 > 0x18)
      goto LABEL_15;
    if (v6 == 16)
    {
LABEL_8:
      v7 = -48;
      goto LABEL_22;
    }
    if (((1 << v6) & 0x1066) == 0)
    {
      if (v6 == 24)
        goto LABEL_8;
LABEL_15:
      if (v6 == 70)
      {
        v7 = -64;
        goto LABEL_22;
      }
LABEL_16:
      v8 = v6 - 52;
      if (v6 - 33 >= 5)
        v9 = -48;
      else
        v9 = -64;
      if (v8 >= 6)
        v7 = v9;
      else
        v7 = -72;
    }
  }
LABEL_22:
  v10 = *(_QWORD *)(*(_QWORD *)i + 72 + v7 + 16);
  v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (_QWORD *)*v11;
  if (v11)
    v12 = v11 - 8;
  else
    v12 = 0;
  if ((sub_22EFB397C(v12, *(_QWORD *)(a2 + 16)) & 1) == 0)
    goto LABEL_28;
  return 1;
}

unint64_t sub_22EFB5D7C(unint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int i;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;

  if (!a1 || (v2 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 4) != 0)
      v4 = *(_QWORD *)v4;
    for (i = *(_WORD *)(v4 + 8) & 0x7F; i != 83; i = *(_WORD *)(v4 + 8) & 0x7F)
    {
      v6 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v6 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_20;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_19;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_10;
        if (i == 24)
        {
LABEL_9:
          v6 = -48;
        }
        else
        {
LABEL_19:
          if (i != 70)
          {
LABEL_20:
            v8 = i - 52;
            if ((i - 33) >= 5)
              v9 = -48;
            else
              v9 = -64;
            if (v8 >= 6)
              v6 = v9;
            else
              v6 = -72;
            goto LABEL_10;
          }
          v6 = -64;
        }
      }
LABEL_10:
      v7 = *(_QWORD *)(v4 + v6 + 16);
      v4 = v7 & 0xFFFFFFFFFFFFFFF8;
      if ((v7 & 4) != 0)
        v4 = *(_QWORD *)v4;
    }
    v2 = v4 - 40;
  }
  v10 = (uint64_t *)(*(_QWORD *)(v2 + 88) + 1512);
  v14 = 0;
  v15 = a1;
  v11 = sub_22E793870(v10, &v15, &v14);
  v12 = 0;
  if (v11)
    v12 = *(_QWORD *)(v14 + 8);
  if (v12)
    return v12;
  else
    return a1;
}

BOOL sub_22EFB5ED8(uint64_t a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = (unint64_t *)(v1 & 0xFFFFFFFFFFFFFFF8);
  v3 = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) != 0)
  {
    v3 = *v2;
    v2 = (unint64_t *)v2[1];
  }
  if (!v3)
    return 1;
  v4 = sub_22EFCC008((uint64_t)v2);
  return v4 != sub_22EFCC008(v3);
}

uint64_t sub_22EFB5F2C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  int v23;
  unsigned __int8 v24;

  result = 22;
  v24 = 22;
  v7 = *(_DWORD *)(a2 + 12) & 0x1FFFFFFF;
  if ((_DWORD)v7)
  {
    v8 = a3;
    v9 = (uint64_t *)(a2 + 16);
    v10 = a2 + 16 + 8 * v7;
    v11 = a3;
    while (1)
    {
      v12 = *v9;
      if ((*(_DWORD *)(*v9 + 28) & 0x7F) != 0x26)
      {
        if ((*(_DWORD *)(*v9 + 28) & 0x7F) != 0x3B)
        {
          if (*(_BYTE *)(v12 + 81))
          {
            v18 = *(unsigned int *)(v12 + 84);
            if ((_DWORD)v18)
            {
              v19 = (uint64_t *)(v12 + 88);
              do
              {
                v20 = *v19++;
                v3 = v3 & 0xFFFFFFFF00000000 | v11;
                v21 = sub_22EFB5F2C(a1, v20, v3);
                sub_22EF55F74(&v24, v21);
                --v18;
              }
              while (v18);
            }
            goto LABEL_22;
          }
          v4 = v4 & 0xFFFFFFFF00000000 | v11;
          LOBYTE(v23) = sub_22EFB5F2C(a1, *(_QWORD *)(v12 + 56), v4);
          goto LABEL_21;
        }
        if (*(_BYTE *)(v12 + 81))
        {
          v13 = *(unsigned int *)(v12 + 84);
          if ((_DWORD)v13)
          {
            v14 = (uint64_t *)(v12 + 88);
            do
            {
              v15 = *v14;
              v14 += 2;
              v16 = *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0);
              if ((*(_BYTE *)(v16 + 17) & 4) == 0)
              {
                v17 = sub_22F114CF4(a1, v16);
                sub_22EF55F74(&v24, v17);
              }
              --v13;
            }
            while (v13);
          }
          goto LABEL_22;
        }
        v22 = *(_QWORD *)(*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v22 + 17) & 4) == 0)
        {
          if ((v8 & 4) != 0)
          {
            sub_22F114870(v22);
            v23 = (*(_DWORD *)(v22 + 16) >> 14) & 7 | 0x30;
          }
          else
          {
            LOBYTE(v23) = sub_22F114CF4(a1, v22);
          }
LABEL_21:
          sub_22EF55F74(&v24, v23);
        }
      }
LABEL_22:
      if (++v9 == (uint64_t *)v10)
        return v24;
    }
  }
  return result;
}

uint64_t sub_22EFB60B4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unsigned __int8 v13[9];

  result = 22;
  v13[0] = 22;
  if (a3)
  {
    v7 = 24 * a3;
    v8 = (_QWORD *)(a2 + 8);
    do
    {
      v9 = *((unsigned int *)v8 - 2);
      if ((_DWORD)v9 != 1)
        __asm { BR              X9 }
      v10 = (uint64_t *)(*v8 & 0xFFFFFFFFFFFFFFF0);
      v11 = *v10;
      if ((a4 & 4) != 0)
      {
        sub_22F114870(*v10);
        v12 = (*(_DWORD *)(v11 + 16) >> 14) & 7 | 0x30;
      }
      else
      {
        LOBYTE(v12) = sub_22F114CF4(a1, *v10);
      }
      sub_22EF55F74(v13, v12);
      v8 += 3;
      v7 -= 24;
    }
    while (v7);
    return v13[0];
  }
  return result;
}

void sub_22EFB618C()
{
  char v0;
  uint64_t v1;
  uint64_t *v2;

  sub_22EFB60B4(v1, *v2, *((unsigned int *)v2 - 1), v0);
  JUMPOUT(0x22EFB6124);
}

void sub_22EFB61A8(uint64_t a1, ...)
{
  unsigned int v1;
  _DWORD *v2;
  uint64_t *v3;
  unint64_t v4;
  va_list va;

  va_start(va, a1);
  sub_22F0F0834((uint64_t *)va, *v3);
  v4 = sub_22F0F08CC((uint64_t *)va);
  if (v4)
  {
    sub_22EFB620C(v2, v4, v1);
    JUMPOUT(0x22EFB6124);
  }
  JUMPOUT(0x22EFB6130);
}

void sub_22EFB61E0()
{
  JUMPOUT(0x22EFB61D8);
}

void sub_22EFB61F4()
{
  JUMPOUT(0x22EFB6120);
}

uint64_t sub_22EFB620C(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int i;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v4 = a2;
  if ((*(_BYTE *)(a2 + 29) & 1) == 0)
    goto LABEL_2;
  sub_22EFC8E88(a2);
  v10 = *((unsigned int *)v9 + 2);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    v12 = *v9;
    while (*(_WORD *)(*(_QWORD *)v12 + 32) != 193)
    {
      v12 += 8;
      v11 -= 8;
      if (!v11)
        goto LABEL_2;
    }
  }
  else
  {
    v12 = *v9;
  }
  if (v12 == *v9 + 8 * v10)
  {
LABEL_2:
    if ((a3 & 4) != 0 && (v6 = *(unsigned __int8 *)(v4 + 32), (v6 & 7) != 0))
    {
      return (v6 - 1) & 7 | 0x10u;
    }
    else
    {
      v7 = sub_22EFB9D04((uint64_t)a1, v4, a3);
      if ((unsigned __int16)v7 <= 0xFFu)
      {
        v7 = sub_22EFB6E40((uint64_t)a1, v4, a3, 0);
        *(_BYTE *)(v4 + 32) = *(_BYTE *)(v4 + 32) & 0xF8 | (v7 + 1) & 7;
        v20 = v4 & 0xFFFFFFFFFFFFFFF8 | (__rbit32(a3) >> 29);
        *((_BYTE *)sub_22EFC4FB4(a1, &v20) + 8) = v7;
      }
    }
  }
  else
  {
    if (!sub_22EFC4A94(v4))
      return 17;
    if (!v4 || (*(_DWORD *)(v4 + 28) & 0x7F) != 0x53)
    {
      v13 = *(_QWORD *)(v4 + 16);
      v14 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0)
        v14 = *(_QWORD *)v14;
      for (i = *(_WORD *)(v14 + 8) & 0x7F; i != 83; i = *(_WORD *)(v14 + 8) & 0x7F)
      {
        v16 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v16 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_31;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_30;
          if (i == 16)
            goto LABEL_24;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_37;
          if (i == 24)
          {
LABEL_24:
            v16 = -48;
          }
          else
          {
LABEL_30:
            if (i != 70)
            {
LABEL_31:
              v17 = i - 52;
              if ((i - 33) >= 5)
                v18 = -48;
              else
                v18 = -64;
              if (v17 >= 6)
                v16 = v18;
              else
                v16 = -72;
              goto LABEL_37;
            }
            v16 = -64;
          }
        }
LABEL_37:
        v19 = *(_QWORD *)(v14 + v16 + 16);
        v14 = v19 & 0xFFFFFFFFFFFFFFF8;
        if ((v19 & 4) != 0)
          v14 = *(_QWORD *)v14;
      }
      v4 = v14 - 40;
    }
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 2000) + 20) & 0x400000000000) != 0)
      return 20;
    else
      return 17;
  }
  return v7;
}

_BYTE *sub_22EFB645C(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9;
  _BOOL4 v10;
  unint64_t v11;
  unsigned __int8 v12;
  unsigned int v13;

  v9 = *(_QWORD *)(a4 + 16);
  if (((v9 >> 1) & 3) - 1 <= 2)
  {
    v10 = !sub_22EAC1F50(a3);
    v9 = *(_QWORD *)(a4 + 16);
  }
  else
  {
    v10 = 1;
  }
  v11 = v9 & 0xFFFFFFFFFFFFFFF8;
  *a2 = *a2 & 0xF8 | sub_22EFB620C(a1) & 7;
  v12 = sub_22EFB5F2C(a1, *(_QWORD *)(v11 + 56), a5);
  sub_22EFB6528(a2, v12, v10);
  v13 = sub_22EFB60B4(a1, **(_QWORD **)(a4 + 24), *(unsigned int *)(*(_QWORD *)(a4 + 24) + 8), a5);
  return sub_22EFB6528(a2, v13, v10);
}

_BYTE *sub_22EFB6528(_BYTE *result, unsigned int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  char v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  int v12;

  v3 = a2 & 7;
  v4 = *result;
  if (v3 == 3)
    v5 = 3;
  else
    v5 = v4 & 7;
  if (v3 == 3)
    v3 = v4 & 7;
  v6 = v3 - 1;
  if (v5 < v3)
    LOBYTE(v3) = v5;
  if (v6 < 2 && v5 == 3)
    LOBYTE(v3) = 0;
  v8 = v3 | v4 & 0xF8;
  *result = v8;
  if (a3)
  {
    v9 = (a2 >> 3) & 3;
    v10 = (v4 >> 3) & 3;
    v11 = v10 >= v9;
    if (v10 == v9)
      v12 = (a2 >> 5) & 1;
    else
      v12 = 1;
    if (v11)
    {
      if (v12)
        *result = v8 & 0xC7 | (8 * v9) | a2 & 0x20;
    }
  }
  return result;
}

uint64_t sub_22EFB659C(uint64_t a1, char *a2, uint64_t a3, unsigned int a4)
{
  char v4;
  uint64_t v9;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned __int8 v15;
  int v16;
  uint64_t result;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  char v23;
  int v24;
  char v25;

  v4 = a4;
  if (sub_22EFD5760(a3) - 2 >= 3)
  {
    v9 = v4 & 2;
    goto LABEL_12;
  }
  v9 = v4 & 2;
  if ((*(_BYTE *)(a3 + 180) & 7) != 2 || v9 == 0)
  {
    if ((v4 & 4) == 0)
    {
      if ((v4 & 1) != 0 || !sub_22EFC4AFC(a3))
      {
        v11 = !sub_22EAC1F50(a3);
        goto LABEL_13;
      }
      goto LABEL_10;
    }
LABEL_12:
    v11 = 1;
    goto LABEL_13;
  }
LABEL_10:
  v11 = 0;
LABEL_13:
  v12 = *(_QWORD *)(a3 + 152);
  v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 4) != 0 && v13)
  {
    do
    {
      v14 = *(_QWORD *)(*v13 + 152);
      v13 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFF8);
    }
    while ((v14 & 4) != 0 && v13);
  }
  v15 = sub_22EFB5F2C(a1, v13[7], a4);
  if (v9)
    v16 = 0;
  else
    v16 = v11;
  sub_22EFB6528(a2, v15, v16);
  result = sub_22EFB60B4(a1, **(_QWORD **)(a3 + 168), *(unsigned int *)(*(_QWORD *)(a3 + 168) + 8), a4);
  v18 = *a2;
  v19 = (result >> 3) & 3;
  v20 = (result >> 5) & 1;
  v21 = (v18 >> 3) & 3;
  if (v21 != v19)
    v20 = 1;
  v22 = v21 < v19 || v20 == 0;
  v23 = v18 & 0xC7 | (8 * v19) | result & 0x20;
  if (v22)
    v23 = *a2;
  if (v11)
    LOBYTE(v18) = v23;
  v24 = v18 & 7;
  if (v24 == 6)
    v25 = 2;
  else
    v25 = v18 & 7;
  if (v24 == 3)
    v25 = 0;
  if ((result & 7u) <= 2)
    LOBYTE(v24) = v25;
  *a2 = v24 | v18 & 0xF8;
  return result;
}

uint64_t sub_22EFB6704(uint64_t a1, char *a2, unint64_t a3, unsigned int a4)
{
  char v4;
  uint64_t v9;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 v14;
  int v15;
  uint64_t result;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  char v22;
  int v23;
  char v24;
  uint64_t v25;

  v4 = a4;
  if (sub_22EFBC2B0(a3) - 2 >= 3)
  {
    v9 = v4 & 2;
    goto LABEL_12;
  }
  v9 = v4 & 2;
  if ((*(_BYTE *)(a3 + 420) & 7) != 2 || v9 == 0)
  {
    if ((v4 & 4) == 0)
    {
      if ((v4 & 1) != 0 || !sub_22EFC4AFC(a3))
      {
        v11 = !sub_22EAC1F50(a3);
        goto LABEL_13;
      }
      goto LABEL_10;
    }
LABEL_12:
    v11 = 1;
    goto LABEL_13;
  }
LABEL_10:
  v11 = 0;
LABEL_13:
  v12 = *(_QWORD *)(a3 + 112);
  v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 4) != 0 && v13)
  {
    do
    {
      v25 = *(_QWORD *)(*v13 + 112);
      v13 = (uint64_t *)(v25 & 0xFFFFFFFFFFFFFFF8);
    }
    while ((v25 & 4) != 0 && v13);
  }
  v14 = sub_22EFB5F2C(a1, v13[7], a4);
  if (v9)
    v15 = 0;
  else
    v15 = v11;
  sub_22EFB6528(a2, v14, v15);
  result = sub_22EFB60B4(a1, **(_QWORD **)(a3 + 128), *(unsigned int *)(*(_QWORD *)(a3 + 128) + 8), a4);
  v17 = *a2;
  v18 = (result >> 3) & 3;
  v19 = (result >> 5) & 1;
  v20 = (v17 >> 3) & 3;
  if (v20 != v18)
    v19 = 1;
  v21 = v20 < v18 || v19 == 0;
  v22 = v17 & 0xC7 | (8 * v18) | result & 0x20;
  if (v21)
    v22 = *a2;
  if (v11)
    LOBYTE(v17) = v22;
  v23 = v17 & 7;
  if (v23 == 6)
    v24 = 2;
  else
    v24 = v17 & 7;
  if (v23 == 3)
    v24 = 0;
  if ((result & 7u) <= 2)
    LOBYTE(v23) = v24;
  *a2 = v23 | v17 & 0xF8;
  return result;
}

unint64_t sub_22EFB6870(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;

  if (!a1 || (v1 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v2 = *(_QWORD *)(a1 + 16);
    v3 = v2 & 0xFFFFFFFFFFFFFFF8;
    if ((v2 & 4) != 0)
      v3 = *(_QWORD *)v3;
    for (i = *(_WORD *)(v3 + 8) & 0x7F; i != 83; i = *(_WORD *)(v3 + 8) & 0x7F)
    {
      v5 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v5 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_20;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_19;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_10;
        if (i == 24)
        {
LABEL_9:
          v5 = -48;
        }
        else
        {
LABEL_19:
          if (i != 70)
          {
LABEL_20:
            v7 = i - 52;
            if ((i - 33) >= 5)
              v8 = -48;
            else
              v8 = -64;
            if (v7 >= 6)
              v5 = v8;
            else
              v5 = -72;
            goto LABEL_10;
          }
          v5 = -64;
        }
      }
LABEL_10:
      v6 = *(_QWORD *)(v3 + v5 + 16);
      v3 = v6 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 4) != 0)
        v3 = *(_QWORD *)v3;
    }
    v1 = v3 - 40;
  }
  v9 = *(_QWORD *)(v1 + 88);
  v10 = *(_QWORD *)(v9 + 1608);
  v11 = *(unsigned int *)(v9 + 1624);
  if ((_DWORD)v11)
  {
    LODWORD(v12) = (v11 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    v13 = (uint64_t *)(v10 + 16 * v12);
    v14 = *v13;
    if (*v13 == a1)
      goto LABEL_34;
    v15 = 1;
    while (v14 != -4096)
    {
      v16 = v12 + v15++;
      v12 = v16 & (v11 - 1);
      v14 = *(_QWORD *)(v10 + 16 * v12);
      if (v14 == a1)
      {
        v13 = (uint64_t *)(v10 + 16 * v12);
        goto LABEL_34;
      }
    }
  }
  v13 = (uint64_t *)(v10 + 16 * v11);
LABEL_34:
  if (v13 == (uint64_t *)(v10 + 16 * v11))
    v17 = 0;
  else
    v17 = v13[1];
  if ((v17 & 4) != 0)
    return 0;
  else
    return v17 & 0xFFFFFFFFFFFFFFF8;
}

uint64_t sub_22EFB6A00(_DWORD *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int i;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _BOOL4 v13;
  unsigned int v14;

  v2 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (!a2 || (v3 = a2, v2 != 83))
  {
    v4 = *(_QWORD *)(a2 + 16);
    v5 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 4) != 0)
      v5 = *(_QWORD *)v5;
    for (i = *(_WORD *)(v5 + 8) & 0x7F; i != 83; i = *(_WORD *)(v5 + 8) & 0x7F)
    {
      v7 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v7 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_20;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_19;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_10;
        if (i == 24)
        {
LABEL_9:
          v7 = -48;
        }
        else
        {
LABEL_19:
          if (i != 70)
          {
LABEL_20:
            v9 = i - 52;
            if ((i - 33) >= 5)
              v10 = -48;
            else
              v10 = -64;
            if (v9 >= 6)
              v7 = v10;
            else
              v7 = -72;
            goto LABEL_10;
          }
          v7 = -64;
        }
      }
LABEL_10:
      v8 = *(_QWORD *)(v5 + v7 + 16);
      v5 = v8 & 0xFFFFFFFFFFFFFFF8;
      if ((v8 & 4) != 0)
        v5 = *(_QWORD *)v5;
    }
    v3 = v5 - 40;
  }
  v13 = v2 != 28 && (v2 - 33) > 9 && v2 != 22;
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 2000) + 140) & 0x800000000000) != 0)
    v14 = 7;
  else
    v14 = v13;
  return sub_22EFB620C(a1, a2, v14);
}

uint64_t sub_22EFB6B34(_DWORD *a1)
{
  unint64_t v2;

  if (!sub_22EFC4A94((unint64_t)a1))
    return 22;
  v2 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 32))(a1);
  if (((*(_DWORD *)(v2 + 8) >> 1) & 3u) - 1 <= 1 && (sub_22EFC4A94(v2) & 1) != 0)
    return 22;
  if ((a1[7] & 0x7F) == 0x10)
    return 22;
  else
    return 21;
}

BOOL sub_22EFB6BA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;

  if (!a1 || (v1 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v2 = *(_QWORD *)(a1 + 16);
    v3 = v2 & 0xFFFFFFFFFFFFFFF8;
    if ((v2 & 4) != 0)
      v3 = *(_QWORD *)v3;
    for (i = *(_WORD *)(v3 + 8) & 0x7F; i != 83; i = *(_WORD *)(v3 + 8) & 0x7F)
    {
      v5 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v5 = -56;
          goto LABEL_22;
        }
        if (i == 81)
          goto LABEL_22;
      }
      else
      {
        if (i <= 0x18)
        {
          if (i == 16)
            goto LABEL_9;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_22;
          if (i == 24)
          {
LABEL_9:
            v5 = -48;
            goto LABEL_22;
          }
        }
        if (i == 70)
        {
          v5 = -64;
          goto LABEL_22;
        }
      }
      v6 = i - 52;
      if ((i - 33) >= 5)
        v7 = -48;
      else
        v7 = -64;
      if (v6 >= 6)
        v5 = v7;
      else
        v5 = -72;
LABEL_22:
      v8 = *(_QWORD *)(v3 + v5 + 16);
      v3 = v8 & 0xFFFFFFFFFFFFFFF8;
      if ((v8 & 4) != 0)
        v3 = *(_QWORD *)v3;
    }
    v1 = v3 - 40;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v1 + 88) + 2000);
  if ((*(_BYTE *)(v9 + 1) & 1) == 0 || (*(_QWORD *)(v9 + 140) & 0x400000000000) == 0)
    return 0;
  v10 = 0;
  if (a1 && (*(_DWORD *)(a1 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    v12 = *(_QWORD *)(a1 + 144) & 6;
    v13 = (_DWORD *)(*(_QWORD *)(a1 + 144) & 0xFFFFFFFFFFFFFFF8);
    if (v12 == 4 && v13)
    {
      v13 += 4;
    }
    else if (v12 != 2 || !v13)
    {
      v15 = 0;
      goto LABEL_43;
    }
    v14 = *v13 >> 1;
    v15 = 0;
    if ((v14 | 0xFFFFFFFC) > 0xFFFFFFFD)
      return 0;
LABEL_43:
    if (sub_22EFBF6E8(a1, &v15) && (*(_BYTE *)(v15 + 82) & 1) != 0)
      return !sub_22EA0E0E4(v15);
    return 0;
  }
  return v10;
}

uint64_t sub_22EFB6D64(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;

  v3 = a1;
  v4 = *(_QWORD *)(a1 + 80);
  v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (_QWORD *)*v5;
  v6 = *(_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFF0);
  if (!v6 || (*(_DWORD *)(v6 + 16) & 0xFE) != 0x2C)
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
      return 0;
    v6 = sub_22F10CF48(v6);
    if (!v6)
      return 0;
  }
  v8 = *(_QWORD *)(sub_22F114198(*(_QWORD *)(v6 + 24)) + 120);
  v9 = (v8 & 4) != 0 ? 0 : v8 & 0xFFFFFFFFFFFFFFF8;
  if (a2)
  {
    if (v9)
    {
      v9 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v9 + 32))(v9);
      v3 = *(_QWORD *)(v3 + 72);
    }
  }
  if (v9 == v3)
    return sub_22F114198(*(_QWORD *)(v6 + 24));
  else
    return 0;
}

uint64_t sub_22EFB6E40(uint64_t a1, uint64_t a2, unsigned int a3, char a4)
{
  unint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  int v35;
  __int16 v36;
  unsigned int v37;
  BOOL v38;
  int v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  int i;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  unsigned __int8 v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  unsigned __int8 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  int k;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  int v117;
  int v118;
  int v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  unsigned int v127;
  unint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  _BOOL4 v132;
  unsigned __int8 v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  __int16 v138;
  int v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unsigned int v151;
  int v152;
  unsigned int v153;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  int v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  unsigned __int8 v169;
  uint64_t v171;
  int v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  unint64_t v185;
  int v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  unint64_t v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  int v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  unsigned int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  int v223;
  unsigned int v224;
  _BOOL4 v225;
  uint64_t v226;
  _QWORD *v227;
  unint64_t v228;
  unint64_t v229;
  unsigned __int8 v231;
  unsigned int v232;
  int v233;
  unsigned int v234;
  int v235;
  unsigned __int8 v236;
  uint64_t v237;
  _DWORD *v238;
  int v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  int j;
  uint64_t v245;
  unsigned int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t v254;
  int v255;
  int v256;
  char v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  unsigned int v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int v264;
  unsigned __int8 v265;
  unsigned __int8 v266;
  unsigned __int8 v267;

  v6 = a2;
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v12 = *((unsigned int *)v11 + 2);
    if ((_DWORD)v12)
    {
      v13 = 8 * v12;
      v14 = *v11;
      while (*(_WORD *)(*(_QWORD *)v14 + 32) != 193)
      {
        v14 += 8;
        v13 -= 8;
        if (!v13)
          goto LABEL_2;
      }
    }
    else
    {
      v14 = *v11;
    }
    if (v14 != *v11 + 8 * v12)
    {
      if (sub_22EFC4A94(v6))
      {
        if (!v6 || (*(_DWORD *)(v6 + 28) & 0x7F) != 0x53)
        {
          v258 = *(_QWORD *)(v6 + 16);
          v74 = v258 & 0xFFFFFFFFFFFFFFF8;
          if ((v258 & 4) != 0)
            v74 = *(_QWORD *)v74;
          v259 = *(_WORD *)(v74 + 8) & 0x7F;
          if (v259 != 83)
          {
            while (1)
            {
              v260 = -40;
              if (v259 > 70)
              {
                if (v259 == 71)
                {
                  v260 = -56;
                }
                else if (v259 != 81)
                {
                  goto LABEL_828;
                }
              }
              else
              {
                if (v259 > 0x18)
                  goto LABEL_827;
                if (v259 == 16)
                  goto LABEL_821;
                if (((1 << v259) & 0x1066) != 0)
                  goto LABEL_834;
                if (v259 == 24)
                {
LABEL_821:
                  v260 = -48;
                }
                else
                {
LABEL_827:
                  if (v259 != 70)
                  {
LABEL_828:
                    v261 = v259 - 52;
                    if ((v259 - 33) >= 5)
                      v262 = -48;
                    else
                      v262 = -64;
                    if (v261 >= 6)
                      v260 = v262;
                    else
                      v260 = -72;
                    goto LABEL_834;
                  }
                  v260 = -64;
                }
              }
LABEL_834:
              v263 = *(_QWORD *)(v74 + v260 + 16);
              v74 = v263 & 0xFFFFFFFFFFFFFFF8;
              if ((v263 & 4) != 0)
                v74 = *(_QWORD *)v74;
              v259 = *(_WORD *)(v74 + 8) & 0x7F;
              if (v259 == 83)
                goto LABEL_840;
            }
          }
          goto LABEL_840;
        }
        goto LABEL_841;
      }
      return 17;
    }
  }
LABEL_2:
  v8 = *(_DWORD *)(v6 + 28) & 0x7F;
  v9 = 16;
  switch(v8)
  {
    case 13:
    case 14:
    case 15:
    case 17:
    case 44:
    case 46:
    case 62:
    case 64:
      return v9;
    case 16:
    case 22:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 36:
    case 37:
    case 38:
    case 39:
    case 42:
    case 43:
    case 45:
    case 47:
    case 48:
    case 49:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 60:
    case 61:
    case 63:
    case 65:
    case 66:
      goto LABEL_16;
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
    case 24:
    case 25:
    case 32:
    case 50:
    case 59:
      return sub_22EFB6B34((_DWORD *)v6);
    case 35:
      v15 = *(_QWORD *)(v6 + 128);
      if (!v15 || ((*(unsigned __int16 *)(v15 + 8) | (*(unsigned __int8 *)(v15 + 10) << 16)) & 0x100000) == 0)
        goto LABEL_16;
      if ((*(_WORD *)(v15 + 108) & 0x2000) == 0 && (*(_DWORD *)(v15 + 112) & 0x7FFFFFFF) != 0)
      {
        v226 = *(_QWORD *)(v6 + 16);
        v227 = (_QWORD *)(v226 & 0xFFFFFFFFFFFFFFF8);
        if ((v226 & 4) != 0)
          v227 = (_QWORD *)*v227;
        v228 = sub_22EFCBB30((unint64_t)v227);
        v229 = sub_22F3B1CF4(v6);
        return sub_22EFB9B24(a1, v228, v229, a3);
      }
      if (!sub_22EFC4A94(v6))
        return 17;
      if ((*(_DWORD *)(v6 + 28) & 0x7F) == 0x53)
        goto LABEL_841;
      v91 = *(_QWORD *)(v6 + 16);
      v74 = v91 & 0xFFFFFFFFFFFFFFF8;
      if ((v91 & 4) != 0)
        v74 = *(_QWORD *)v74;
      v92 = *(_WORD *)(v74 + 8) & 0x7F;
      if (v92 == 83)
        goto LABEL_840;
      while (1)
      {
        v93 = -40;
        if (v92 > 70)
        {
          if (v92 == 71)
          {
            v93 = -56;
          }
          else if (v92 != 81)
          {
            goto LABEL_265;
          }
        }
        else
        {
          if (v92 > 0x18)
            goto LABEL_264;
          if (v92 == 16)
            goto LABEL_258;
          if (((1 << v92) & 0x1066) != 0)
            goto LABEL_271;
          if (v92 == 24)
          {
LABEL_258:
            v93 = -48;
          }
          else
          {
LABEL_264:
            if (v92 != 70)
            {
LABEL_265:
              v94 = v92 - 52;
              if ((v92 - 33) >= 5)
                v95 = -48;
              else
                v95 = -64;
              if (v94 >= 6)
                v93 = v95;
              else
                v93 = -72;
              goto LABEL_271;
            }
            v93 = -64;
          }
        }
LABEL_271:
        v96 = *(_QWORD *)(v74 + v93 + 16);
        v74 = v96 & 0xFFFFFFFFFFFFFFF8;
        if ((v96 & 4) != 0)
          v74 = *(_QWORD *)v74;
        v92 = *(_WORD *)(v74 + 8) & 0x7F;
        if (v92 == 83)
          goto LABEL_840;
      }
    case 40:
    case 41:
      if (!sub_22EFB6D64(v6, 1))
        return 16;
      goto LABEL_16;
    case 67:
      v48 = *(_QWORD *)(v6 + 16);
      v49 = v48 & 0xFFFFFFFFFFFFFFF8;
      if ((v48 & 4) != 0)
        v49 = *(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF8);
      v50 = *(_WORD *)(v49 + 8) & 0x7F;
      if (v50 == 83)
        goto LABEL_127;
      do
      {
        v51 = -40;
        if (v50 > 70)
        {
          if (v50 == 71)
          {
            v51 = -56;
            goto LABEL_121;
          }
          if (v50 != 81)
            goto LABEL_115;
        }
        else
        {
          if (v50 > 0x18)
            goto LABEL_114;
          if (v50 == 16)
            goto LABEL_108;
          if (((1 << v50) & 0x1066) == 0)
          {
            if (v50 == 24)
            {
LABEL_108:
              v51 = -48;
              goto LABEL_121;
            }
LABEL_114:
            if (v50 == 70)
            {
              v51 = -64;
              goto LABEL_121;
            }
LABEL_115:
            v52 = v50 - 52;
            if ((v50 - 33) >= 5)
              v53 = -48;
            else
              v53 = -64;
            if (v52 >= 6)
              v51 = v53;
            else
              v51 = -72;
          }
        }
LABEL_121:
        v54 = *(_QWORD *)(v49 + v51 + 16);
        v49 = v54 & 0xFFFFFFFFFFFFFFF8;
        if ((v54 & 4) != 0)
          v49 = *(_QWORD *)v49;
        v50 = *(_WORD *)(v49 + 8) & 0x7F;
      }
      while (v50 != 83);
LABEL_127:
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v49 + 48) + 2000) + 1) & 1) == 0)
        return 19;
      v80 = a1;
      return sub_22EFB620C(v80);
    default:
      if (v8 == 72)
      {
        v55 = (uint64_t *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF0);
        v56 = *v55;
        if ((a3 & 4) != 0)
        {
          sub_22F114870(*v55);
          v57 = (*(_DWORD *)(v56 + 16) >> 14) & 7 | 0x30;
        }
        else
        {
          LOBYTE(v57) = sub_22F114CF4(a1, *v55);
        }
        v265 = v57;
        v82 = sub_22EF55CB8(a1, v6 + 64, a3);
        sub_22EF55F74(&v265, v82);
        return v265;
      }
      if (v8 == 78)
        return sub_22EFB6B34((_DWORD *)v6);
LABEL_16:
      v16 = *(_QWORD *)(v6 + 16);
      v17 = (unint64_t *)(v16 & 0xFFFFFFFFFFFFFFF8);
      v18 = v16 & 0xFFFFFFFFFFFFFFF8;
      if ((v16 & 4) != 0)
        v18 = *v17;
      v19 = *(_WORD *)(sub_22EFCBB30(v18) + 8) & 0x7F;
      v20 = v19 == 83 || v19 == 16;
      if (!v20)
      {
        if ((v16 & 4) != 0)
        {
          v36 = *(_WORD *)(*v17 + 8);
          if ((v36 & 0x7Eu) - 34 > 3)
            goto LABEL_70;
        }
        else
        {
          v36 = *((_WORD *)v17 + 4);
          if ((v36 & 0x7Eu) - 34 >= 4)
          {
LABEL_70:
            v37 = v36 & 0x7F;
            v38 = v37 > 0x18 || ((1 << v37) & 0x1000006) == 0;
            if (v38 && v37 - 52 > 5)
              return 16;
            v39 = *(_DWORD *)(v6 + 28);
            if ((v39 & 0x7Eu) - 58 < 0xFFFFFFFA)
            {
              v40 = v39 & 0x7F;
              if ((v40 - 67) < 0xFFFFFFF9)
              {
                v41 = v6;
                if (v40 == 83)
                {
LABEL_410:
                  v137 = *(_QWORD *)(v41 + 88);
                  if ((*(_BYTE *)(*(_QWORD *)(v137 + 2000) + 1) & 1) == 0)
                    return 16;
                  if ((v16 & 4) != 0)
                    v17 = (unint64_t *)*v17;
                  v138 = *((_WORD *)v17 + 4);
                  v139 = v138 & 0x7F;
                  if (v139 == 83)
                    return 16;
                  v140 = 0;
                  while (1)
                  {
                    v141 = v138 & 0x7F;
                    if (v139 == 1 || (v138 & 0x7Eu) - 52 <= 5)
                      break;
LABEL_433:
                    v143 = -40;
                    if (v141 > 70)
                    {
                      if (v141 != 83)
                      {
                        if (v141 == 71)
                        {
                          v143 = -56;
                        }
                        else if (v141 != 81)
                        {
                          goto LABEL_444;
                        }
                      }
                    }
                    else
                    {
                      if (v141 > 0x18)
                        goto LABEL_443;
                      if (v141 == 16)
                        goto LABEL_436;
                      if (((1 << v141) & 0x1066) != 0)
                        goto LABEL_450;
                      if (v141 == 24)
                      {
LABEL_436:
                        v143 = -48;
                      }
                      else
                      {
LABEL_443:
                        if (v141 != 70)
                        {
LABEL_444:
                          v144 = v141 - 52;
                          if ((v141 - 33) >= 5)
                            v145 = -48;
                          else
                            v145 = -64;
                          if (v144 >= 6)
                            v143 = v145;
                          else
                            v143 = -72;
                          goto LABEL_450;
                        }
                        v143 = -64;
                      }
                    }
LABEL_450:
                    v146 = *(unint64_t *)((char *)v17 + v143 + 16);
                    v17 = (unint64_t *)(v146 & 0xFFFFFFFFFFFFFFF8);
                    if ((v146 & 4) != 0)
                      v17 = (unint64_t *)*v17;
                    v138 = *((_WORD *)v17 + 4);
                    v139 = v138 & 0x7F;
                    if (v139 == 83)
                    {
                      if (!v140 || (*(_DWORD *)(v140 + 28) & 0x80) != 0)
                        return 16;
                      if ((*(_DWORD *)(v140 + 28) & 0x7F) == 1)
                      {
                        if (*(_DWORD *)(v140 + 116))
                        {
                          v191 = *(_QWORD *)(v140 + 16);
                          v192 = (_QWORD *)(v191 & 0xFFFFFFFFFFFFFFF8);
                          if ((v191 & 4) != 0)
                            v192 = (_QWORD *)*v192;
                          v193 = sub_22EFCBB30((unint64_t)v192);
                          v194 = sub_22EFB9B24(a1, v193, *(_QWORD *)(v140 + 120), a3);
                          goto LABEL_808;
                        }
                        return 16;
                      }
                      if ((*(_BYTE *)(v140 + 82) & 1) == 0)
                      {
                        v237 = *(_QWORD *)(v140 + 144) & 6;
                        v238 = (_DWORD *)(*(_QWORD *)(v140 + 144) & 0xFFFFFFFFFFFFFFF8);
                        if (v237 != 4 || !v238)
                        {
                          v9 = 16;
                          if (v237 == 2 && v238)
                            goto LABEL_796;
                          return v9;
                        }
                        v238 += 4;
LABEL_796:
                        if (((((*v238 >> 1) & 3) + 1) & 0xFFFFFFFD) == 0)
                          return 16;
                      }
                      v194 = sub_22EFB620C(a1);
                      if ((*(_DWORD *)(v6 + 28) & 0x7Fu) - 60 > 6
                        || !sub_22EFB6BA0(v140)
                        || (v194 & 0x20) != 0
                        || (*(_QWORD *)(*(_QWORD *)(v137 + 2000) + 140) & 0x1000000000000) != 0)
                      {
                        goto LABEL_808;
                      }
                      if ((*(_DWORD *)(v140 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC)
                        v194 = sub_22EFB620C(a1);
                      if ((v194 & 0x20) != 0)
                      {
LABEL_808:
                        if ((v194 & 7u) < 3)
                          return 16;
                        return v194 & 0x38 | 3u;
                      }
                      else
                      {
                        if ((a3 & 1) != 0)
                          v257 = 19;
                        else
                          v257 = 22;
                        return (8 * ((*(_DWORD *)(*(_QWORD *)(v137 + 2000) + 244) >> v257) & 3)) | 3u;
                      }
                    }
                  }
                  v142 = 0x1FFFFFFFFFFFFFFBLL;
                  if (v141 > 70)
                  {
                    switch(v141)
                    {
                      case 'S':
                        goto LABEL_432;
                      case 'G':
                        v142 = 0x1FFFFFFFFFFFFFF9;
                        goto LABEL_432;
                      case 'Q':
                        goto LABEL_432;
                    }
                  }
                  else
                  {
                    if (v141 <= 0x18)
                    {
                      if (v141 == 16)
                        goto LABEL_420;
                      if (((1 << v141) & 0x1066) != 0)
                        goto LABEL_432;
                      if (v141 == 24)
                      {
LABEL_420:
                        v142 = 0x1FFFFFFFFFFFFFFALL;
LABEL_432:
                        v140 = (uint64_t)&v17[v142];
                        goto LABEL_433;
                      }
                    }
                    if (v141 == 70)
                    {
LABEL_430:
                      v142 = 0x1FFFFFFFFFFFFFF8;
                      goto LABEL_432;
                    }
                  }
                  if ((v141 - 52) < 6)
                  {
                    v142 = 0x1FFFFFFFFFFFFFF7;
                    goto LABEL_432;
                  }
                  if ((v141 - 33) < 5)
                    goto LABEL_430;
                  goto LABEL_420;
                }
LABEL_77:
                v42 = v16 & 0xFFFFFFFFFFFFFFF8;
                if ((v16 & 4) != 0)
                  v42 = *v17;
                for (i = *(_WORD *)(v42 + 8) & 0x7F; i != 83; i = *(_WORD *)(v42 + 8) & 0x7F)
                {
                  v44 = -40;
                  if (i > 70)
                  {
                    if (i == 71)
                    {
                      v44 = -56;
                    }
                    else if (i != 81)
                    {
                      goto LABEL_90;
                    }
                  }
                  else
                  {
                    if (i > 0x18)
                      goto LABEL_89;
                    if (i == 16)
                      goto LABEL_83;
                    if (((1 << i) & 0x1066) != 0)
                      goto LABEL_96;
                    if (i == 24)
                    {
LABEL_83:
                      v44 = -48;
                    }
                    else
                    {
LABEL_89:
                      if (i != 70)
                      {
LABEL_90:
                        v45 = i - 52;
                        if ((i - 33) >= 5)
                          v46 = -48;
                        else
                          v46 = -64;
                        if (v45 >= 6)
                          v44 = v46;
                        else
                          v44 = -72;
                        goto LABEL_96;
                      }
                      v44 = -64;
                    }
                  }
LABEL_96:
                  v47 = *(_QWORD *)(v42 + v44 + 16);
                  v42 = v47 & 0xFFFFFFFFFFFFFFF8;
                  if ((v47 & 4) != 0)
                    v42 = *(_QWORD *)v42;
                }
                v41 = v42 - 40;
                goto LABEL_410;
              }
              v147 = *(_BYTE *)(v6 + 96);
              if ((v147 & 5) != 1)
              {
                if ((v147 & 7) != 2 && ((*(_BYTE *)(v6 + 96) & 7) != 0 || (v147 & 0x18) != 0x10))
                  return 16;
                if (v40 != 64 && v40 != 62)
                {
                  v163 = v16 & 0xFFFFFFFFFFFFFFF8;
                  if ((v16 & 4) != 0)
                    v163 = v17[1];
                  v164 = *(_WORD *)(sub_22EFCBB30(v163) + 8) & 0x7F;
                  v9 = 16;
                  if (v164 == 16 || v164 == 83)
                    return v9;
                  v165 = v16 & 0xFFFFFFFFFFFFFFF8;
                  if ((v16 & 4) != 0)
                    v165 = *v17;
                  if ((*(_WORD *)(v165 + 8) & 0x7Eu) - 38 >= 0xFFFFFFFC)
                    return 16;
                }
                goto LABEL_77;
              }
              if (!sub_22EFC83D8(v6))
                goto LABEL_462;
              v148 = *(_QWORD *)(*(_QWORD *)(v6 + 80) + 16);
              v149 = v148 & 0xFFFFFFFFFFFFFFF8;
              if ((v148 & 4) != 0)
                v149 = *(_QWORD *)(v149 + 8);
              if (sub_22EFCBD94(v149, 1))
              {
LABEL_462:
                if ((v147 & 7) == 3)
                {
                  v9 = 38;
                }
                else if ((a3 & 2) != 0)
                {
                  v9 = 22;
                }
                else
                {
                  v205 = sub_22EFB9750(v6, a3 & 1, 0);
                  v9 = 22;
                  if (HIDWORD(v205) && (int)v205 <= 2)
                    v9 = (8 * (v205 & 3)) | 0x26;
                }
                if ((*(_BYTE *)(v6 + 72) & 3) == 0 && sub_22E3CD31C((uint64_t *)(v6 + 72), v6))
                {
                  v220 = sub_22EFB620C(a1);
                  v221 = v220 & 7 | v9 & 0x38;
                  if ((v220 & 7) == 0)
                    v221 = v9;
                  v222 = (v220 >> 3) & 3;
                  v223 = (v220 >> 5) & 1;
                  v224 = (v221 >> 3) & 3;
                  v20 = v224 == v222;
                  v225 = v224 >= v222;
                  if (!v20)
                    v223 = 1;
                  if ((v225 & v223) != 0)
                    return v221 & 7 | (8 * ((v220 >> 3) & 3)) | v220 & 0x20;
                  else
                    return v221;
                }
                return v9;
              }
              if (!sub_22EFC4A94(v6))
                return 17;
              if ((*(_DWORD *)(v6 + 28) & 0x7F) == 0x53)
                goto LABEL_841;
              v214 = *(_QWORD *)(v6 + 16);
              v74 = v214 & 0xFFFFFFFFFFFFFFF8;
              if ((v214 & 4) != 0)
                v74 = *(_QWORD *)v74;
              v215 = *(_WORD *)(v74 + 8) & 0x7F;
              if (v215 == 83)
                goto LABEL_840;
              while (1)
              {
                v216 = -40;
                if (v215 > 70)
                {
                  if (v215 == 71)
                  {
                    v216 = -56;
                  }
                  else if (v215 != 81)
                  {
                    goto LABEL_695;
                  }
                }
                else
                {
                  if (v215 > 0x18)
                    goto LABEL_694;
                  if (v215 == 16)
                    goto LABEL_688;
                  if (((1 << v215) & 0x1066) != 0)
                    goto LABEL_701;
                  if (v215 == 24)
                  {
LABEL_688:
                    v216 = -48;
                  }
                  else
                  {
LABEL_694:
                    if (v215 != 70)
                    {
LABEL_695:
                      v217 = v215 - 52;
                      if ((v215 - 33) >= 5)
                        v218 = -48;
                      else
                        v218 = -64;
                      if (v217 >= 6)
                        v216 = v218;
                      else
                        v216 = -72;
                      goto LABEL_701;
                    }
                    v216 = -64;
                  }
                }
LABEL_701:
                v219 = *(_QWORD *)(v74 + v216 + 16);
                v74 = v219 & 0xFFFFFFFFFFFFFFF8;
                if ((v219 & 4) != 0)
                  v74 = *(_QWORD *)v74;
                v215 = *(_WORD *)(v74 + 8) & 0x7F;
                if (v215 == 83)
                  goto LABEL_840;
              }
            }
            if (!sub_22EFC83D8(v6) || sub_22EFC09D4(*(_QWORD *)(v6 + 112)))
            {
              if ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 32))(v6) + 80) & 0xE000) != 0x4000)
              {
                if ((a3 & 2) != 0)
                  return 22;
                v150 = sub_22EFB9750(v6, a3 & 1, 0);
                v9 = 22;
                if (HIDWORD(v150))
                {
                  if ((int)v150 <= 2)
                    return (8 * (v150 & 3)) | 0x26;
                  else
                    return 22;
                }
                return v9;
              }
              if (!sub_22EFC4A94(v6))
                return 17;
              if ((*(_DWORD *)(v6 + 28) & 0x7F) == 0x53)
                goto LABEL_841;
              v100 = *(_QWORD *)(v6 + 16);
              v74 = v100 & 0xFFFFFFFFFFFFFFF8;
              if ((v100 & 4) != 0)
                v74 = *(_QWORD *)v74;
              v101 = *(_WORD *)(v74 + 8) & 0x7F;
              if (v101 == 83)
                goto LABEL_840;
              while (1)
              {
                v102 = -40;
                if (v101 > 70)
                {
                  if (v101 == 71)
                  {
                    v102 = -56;
                  }
                  else if (v101 != 81)
                  {
                    goto LABEL_304;
                  }
                }
                else
                {
                  if (v101 > 0x18)
                    goto LABEL_303;
                  if (v101 == 16)
                    goto LABEL_297;
                  if (((1 << v101) & 0x1066) != 0)
                    goto LABEL_310;
                  if (v101 == 24)
                  {
LABEL_297:
                    v102 = -48;
                  }
                  else
                  {
LABEL_303:
                    if (v101 != 70)
                    {
LABEL_304:
                      v103 = v101 - 52;
                      if ((v101 - 33) >= 5)
                        v104 = -48;
                      else
                        v104 = -64;
                      if (v103 >= 6)
                        v102 = v104;
                      else
                        v102 = -72;
                      goto LABEL_310;
                    }
                    v102 = -64;
                  }
                }
LABEL_310:
                v105 = *(_QWORD *)(v74 + v102 + 16);
                v74 = v105 & 0xFFFFFFFFFFFFFFF8;
                if ((v105 & 4) != 0)
                  v74 = *(_QWORD *)v74;
                v101 = *(_WORD *)(v74 + 8) & 0x7F;
                if (v101 == 83)
                  goto LABEL_840;
              }
            }
            if (!sub_22EFC4A94(v6))
              return 17;
            if ((*(_DWORD *)(v6 + 28) & 0x7F) == 0x53)
              goto LABEL_841;
            v157 = *(_QWORD *)(v6 + 16);
            v74 = v157 & 0xFFFFFFFFFFFFFFF8;
            if ((v157 & 4) != 0)
              v74 = *(_QWORD *)v74;
            v158 = *(_WORD *)(v74 + 8) & 0x7F;
            if (v158 == 83)
              goto LABEL_840;
            while (1)
            {
              v159 = -40;
              if (v158 > 70)
              {
                if (v158 == 71)
                {
                  v159 = -56;
                }
                else if (v158 != 81)
                {
                  goto LABEL_508;
                }
              }
              else
              {
                if (v158 > 0x18)
                  goto LABEL_507;
                if (v158 == 16)
                  goto LABEL_501;
                if (((1 << v158) & 0x1066) != 0)
                  goto LABEL_514;
                if (v158 == 24)
                {
LABEL_501:
                  v159 = -48;
                }
                else
                {
LABEL_507:
                  if (v158 != 70)
                  {
LABEL_508:
                    v160 = v158 - 52;
                    if ((v158 - 33) >= 5)
                      v161 = -48;
                    else
                      v161 = -64;
                    if (v160 >= 6)
                      v159 = v161;
                    else
                      v159 = -72;
                    goto LABEL_514;
                  }
                  v159 = -64;
                }
              }
LABEL_514:
              v162 = *(_QWORD *)(v74 + v159 + 16);
              v74 = v162 & 0xFFFFFFFFFFFFFFF8;
              if ((v162 & 4) != 0)
                v74 = *(_QWORD *)v74;
              v158 = *(_WORD *)(v74 + 8) & 0x7F;
              if (v158 == 83)
                goto LABEL_840;
            }
          }
        }
        v69 = *(_DWORD *)(v6 + 28);
        if ((v69 & 0x7Eu) - 54 >= 4)
        {
          v9 = 16;
          v70 = (v69 & 0x7F) - 26;
          if (v70 > 0x2A || ((1 << v70) & 0x5FC03800FFFLL) == 0)
            return v9;
        }
        v71 = 22;
        v267 = 22;
        if ((a3 & 2) == 0)
        {
          v72 = sub_22EFB9750(v6, a3 & 1, 0);
          if (HIDWORD(v72) && (int)v72 <= 2)
          {
            v71 = (8 * (v72 & 3)) | 0x26;
          }
          else
          {
            if (!sub_22EFB6BA0(v6))
              goto LABEL_395;
            v71 = 6;
          }
          v267 = v71;
        }
LABEL_395:
        v129 = sub_22EFB620C(a1);
        v9 = v129;
        if ((v129 & 7u) < 3)
          return v9;
        v130 = *(_DWORD *)(v6 + 28);
        if ((v130 & 0x7Eu) - 58 >= 0xFFFFFFFC)
        {
          v134 = *(_QWORD *)(v6 + 56);
          v135 = (uint64_t *)(v134 & 0xFFFFFFFFFFFFFFF8);
          if ((v134 & 4) != 0)
            v135 = (uint64_t *)v135[4];
          if (v135)
            v136 = *v135;
          else
            v136 = *(_QWORD *)(v6 + 48);
          v166 = *(_QWORD *)(v136 & 0xFFFFFFFFFFFFFFF0);
          sub_22F114870(v166);
          if ((*(_DWORD *)(v166 + 16) & 0x1C000u) <= 0x8000)
            return 18;
          v167 = *(_QWORD *)(v6 + 144);
          v168 = (uint64_t *)(v167 & 0xFFFFFFFFFFFFFFF8);
          if ((v167 & 6) == 4 && v168)
          {
            sub_22EFB645C(a1, &v267, v6, v167 & 0xFFFFFFFFFFFFFFF8, a3);
            if ((v168[2] & 6) == 2)
              goto LABEL_585;
            if ((*(_BYTE *)sub_22EFE9368(v168[2] & 0xFFFFFFFFFFFFFFF8) & 4) == 0)
            {
LABEL_757:
              v177 = 1;
              goto LABEL_758;
            }
            v6 = v168[2] & 0xFFFFFFFFFFFFFFF8;
            goto LABEL_540;
          }
          v177 = 1;
          if ((v167 & 6) != 2 || !v168)
            goto LABEL_758;
          v178 = *v168;
        }
        else
        {
          v131 = v130 & 0x7F;
          if ((v131 - 38) >= 0xFFFFFFFD)
          {
            if ((*(_DWORD *)(v6 + 28) & 0x7E) == 0x24)
            {
              sub_22EFB659C(a1, (char *)&v267, v6, a3);
              if ((*(_BYTE *)(v6 + 180) & 7) == 2)
                goto LABEL_585;
              v155 = *(_QWORD *)(v6 + 152);
              v6 = v155 & 0xFFFFFFFFFFFFFFF8;
              if ((v155 & 4) != 0 && v6)
              {
                do
                {
                  v156 = *(_QWORD *)(*(_QWORD *)v6 + 152);
                  v6 = v156 & 0xFFFFFFFFFFFFFFF8;
                }
                while ((v156 & 4) != 0 && v6);
              }
              goto LABEL_491;
            }
            v182 = *(_QWORD *)(v6 + 136);
          }
          else
          {
            if ((v131 - 67) < 0xFFFFFFF9)
            {
              if ((v131 - 33) < 0xFFFFFFF9)
                goto LABEL_757;
              v132 = ((v129 | v71) & 0x20) == 0 && (a3 & 2) == 0;
              v133 = sub_22EFB5F2C(a1, *(_QWORD *)(v6 + 56), a3);
              sub_22EFB6528(&v267, v133, v132);
              if ((*(_DWORD *)(v6 + 28) & 0x7C) != 0x1C)
                goto LABEL_757;
LABEL_491:
              if ((*(_BYTE *)sub_22EFE9368(v6) & 4) == 0)
                goto LABEL_757;
LABEL_540:
              v6 = *(_QWORD *)(v6 + 48);
              if (!v6)
                goto LABEL_757;
LABEL_585:
              v177 = 1;
              if ((v9 & 0x18) != 0x10 && (v267 & 0x20) != 0 && (a3 & 4) == 0)
                v177 = ((a3 & 1) != 0 || !sub_22EFC4AFC(v6)) && !sub_22EAC1F50(v6);
              goto LABEL_758;
            }
            if ((v131 - 67) >= 0xFFFFFFFE)
              sub_22EFB6704(a1, (char *)&v267, v6, a3);
            if ((a4 & 1) == 0)
            {
              v179 = (uint64_t *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF0);
              v180 = *v179;
              if ((a3 & 4) != 0)
              {
                sub_22F114870(*v179);
                v181 = (*(_DWORD *)(v180 + 16) >> 14) & 7 | 0x30;
              }
              else
              {
                v181 = sub_22F114CF4(a1, *v179);
              }
              v231 = v267;
              if (((v267 | v9) & 0x20) == 0)
              {
                v232 = (v181 >> 3) & 3;
                v233 = (v181 >> 5) & 1;
                v234 = (v267 >> 3) & 3;
                if (v234 != v232)
                  v233 = 1;
                if (v234 >= v232 && v233)
                  v231 = v267 & 0xC7 | (8 * v232) | v181 & 0x20;
              }
              v235 = v231 & 7;
              if ((v181 & 7) <= 2)
              {
                if (v235 == 3)
                {
                  LOBYTE(v235) = 0;
                }
                else if (v235 == 6)
                {
                  LOBYTE(v235) = 2;
                }
              }
              v267 = v235 | v231 & 0xF8;
            }
            v239 = *(_DWORD *)(v6 + 28) & 0x7F;
            if (v239 == 64)
              goto LABEL_757;
            v240 = *(_QWORD *)(v6 + 16);
            v241 = v240 & 0xFFFFFFFFFFFFFFF8;
            v242 = v240 & 0xFFFFFFFFFFFFFFF8;
            if ((v240 & 4) != 0)
              v242 = *(_QWORD *)v241;
            if ((*(_WORD *)(v242 + 8) & 0x7Eu) - 34 > 3)
              goto LABEL_757;
            v243 = v6;
            if (v239 != 83)
            {
              if ((v240 & 4) != 0)
                v241 = *(_QWORD *)v241;
              for (j = *(_WORD *)(v241 + 8) & 0x7F; j != 83; j = *(_WORD *)(v241 + 8) & 0x7F)
              {
                v245 = -40;
                if (j > 70)
                {
                  if (j == 71)
                  {
                    v245 = -56;
                  }
                  else if (j != 81)
                  {
                    goto LABEL_773;
                  }
                }
                else
                {
                  if (j > 0x18)
                    goto LABEL_772;
                  if (j == 16)
                    goto LABEL_766;
                  if (((1 << j) & 0x1066) != 0)
                    goto LABEL_779;
                  if (j == 24)
                  {
LABEL_766:
                    v245 = -48;
                  }
                  else
                  {
LABEL_772:
                    if (j != 70)
                    {
LABEL_773:
                      v246 = j - 52;
                      if ((j - 33) >= 5)
                        v247 = -48;
                      else
                        v247 = -64;
                      if (v246 >= 6)
                        v245 = v247;
                      else
                        v245 = -72;
                      goto LABEL_779;
                    }
                    v245 = -64;
                  }
                }
LABEL_779:
                v248 = *(_QWORD *)(v241 + v245 + 16);
                v241 = v248 & 0xFFFFFFFFFFFFFFF8;
                if ((v248 & 4) != 0)
                  v241 = *(_QWORD *)v241;
              }
              v243 = v241 - 40;
            }
            v249 = *(_QWORD *)(v243 + 88);
            v250 = *(_QWORD *)(v249 + 1608);
            v251 = *(unsigned int *)(v249 + 1624);
            if ((_DWORD)v251)
            {
              LODWORD(v252) = (v251 - 1) & ((v6 >> 4) ^ (v6 >> 9));
              v253 = (uint64_t *)(v250 + 16 * v252);
              v254 = *v253;
              if (*v253 != v6)
              {
                v255 = 1;
                do
                {
                  if (v254 == -4096)
                    goto LABEL_792;
                  v256 = v252 + v255++;
                  v252 = v256 & (v251 - 1);
                  v254 = *(_QWORD *)(v250 + 16 * v252);
                }
                while (v254 != v6);
                v253 = (uint64_t *)(v250 + 16 * v252);
              }
            }
            else
            {
LABEL_792:
              v253 = (uint64_t *)(v250 + 16 * v251);
            }
            if (v253 == (uint64_t *)(v250 + 16 * v251))
              goto LABEL_757;
            v182 = v253[1];
          }
          v177 = 1;
          if ((v182 & 4) == 0)
            goto LABEL_758;
          v183 = (uint64_t *)(v182 & 0xFFFFFFFFFFFFFFF8);
          if (!v183)
            goto LABEL_758;
          v178 = *v183;
        }
        if ((v178 & 6) != 2)
        {
LABEL_758:
          sub_22EFB6528(&v267, v9, v177);
          return v267;
        }
        goto LABEL_585;
      }
      if (!v6)
        goto LABEL_25;
LABEL_24:
      v21 = v6;
      if ((*(_DWORD *)(v6 + 28) & 0x7F) == 0x53)
        goto LABEL_49;
LABEL_25:
      v22 = *(_QWORD *)(v6 + 16);
      break;
  }
  while (1)
  {
    v23 = v22 & 0xFFFFFFFFFFFFFFF8;
    if ((v22 & 4) != 0)
      v23 = *(_QWORD *)v23;
    v24 = *(_WORD *)(v23 + 8) & 0x7F;
    if (v24 == 83)
      break;
    v25 = -40;
    if ((*(_WORD *)(v23 + 8) & 0x7Fu) > 0x46)
    {
      if (v24 == 71)
      {
        v25 = -56;
        goto LABEL_45;
      }
      if (v24 != 81)
        goto LABEL_39;
    }
    else
    {
      if (v24 > 0x18)
        goto LABEL_38;
      if (v24 == 16)
        goto LABEL_32;
      if (((1 << v24) & 0x1066) == 0)
      {
        if (v24 == 24)
        {
LABEL_32:
          v25 = -48;
          goto LABEL_45;
        }
LABEL_38:
        if (v24 == 70)
        {
          v25 = -64;
          goto LABEL_45;
        }
LABEL_39:
        v26 = v24 - 52;
        if (v24 - 33 >= 5)
          v27 = -48;
        else
          v27 = -64;
        if (v26 >= 6)
          v25 = v27;
        else
          v25 = -72;
      }
    }
LABEL_45:
    v22 = *(_QWORD *)(v23 + v25 + 16);
  }
  v21 = v23 - 40;
LABEL_49:
  v28 = *(_QWORD *)(v21 + 88);
  v29 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 32))(v6);
  v30 = *(_DWORD *)(v29 + 28);
  v31 = v30 & 0x7F;
  if (v29)
    v32 = (v30 & 0x7Fu) - 33 >= 0xFFFFFFF9;
  else
    v32 = 0;
  if (v32)
  {
    v29 = *(_QWORD *)(v29 + 48);
    if (v29)
    {
      v30 = *(_DWORD *)(v29 + 28);
      v31 = v30 & 0x7F;
      goto LABEL_56;
    }
    goto LABEL_61;
  }
LABEL_56:
  if ((v31 - 67) < 0xFFFFFFF9)
  {
    if ((v30 & 0x7Eu) - 58 >= 0xFFFFFFFA)
    {
      v33 = (unsigned __int16)*(_DWORD *)(v29 + 80) >> 13;
      goto LABEL_60;
    }
    goto LABEL_61;
  }
  v33 = *(_BYTE *)(v29 + 96) & 7;
LABEL_60:
  if (v33 != 2)
  {
LABEL_61:
    v34 = *(_DWORD *)(v6 + 28);
    v35 = v34 & 0x7F;
    if ((v35 - 67) < 0xFFFFFFF9)
    {
      if (v35 == 68)
      {
        if ((*(_DWORD *)(**(_QWORD **)(v6 + 56) + 28) & 0x7Fu) - 60 >= 7)
          v6 = 0;
        else
          v6 = **(_QWORD **)(v6 + 56);
        if (!v6)
          goto LABEL_25;
        goto LABEL_24;
      }
LABEL_133:
      v264 = a3;
      if (!sub_22EFC83D8(v6))
        goto LABEL_143;
      v58 = (*(_DWORD *)(v6 + 28) & 0x7Eu) - 52 >= 6 ? 0 : v6;
      if ((*(_DWORD *)(v6 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
      {
        v59 = *(_QWORD *)(*(_QWORD *)(v6 + 80) + 16);
        v60 = v59 & 0xFFFFFFFFFFFFFFF8;
        if ((v59 & 4) != 0)
          v60 = *(_QWORD *)(v60 + 8);
        if (sub_22EFCBD94(v60, 1))
          goto LABEL_143;
      }
      if (v58 && sub_22EFC09D4(*(_QWORD *)(v58 + 112)))
      {
LABEL_143:
        v9 = sub_22EFB6B34((_DWORD *)v6);
        v266 = v9;
        if ((a3 & 2) != 0)
        {
          v115 = a1;
        }
        else
        {
          v61 = sub_22EFB9750(v6, a3 & 1, 0);
          if (!HIDWORD(v61))
          {
            v62 = *(_QWORD *)(v6 + 16);
            v63 = v62 & 0xFFFFFFFFFFFFFFF8;
            if ((v62 & 4) == 0)
              goto LABEL_147;
            while (2)
            {
              v63 = *(_QWORD *)v63;
LABEL_147:
              v64 = *(_WORD *)(v63 + 8) & 0x7F;
              if (v64 == 16)
              {
                v61 = sub_22EFB9750(v63 - 48, a3 & 1, 0);
                if (HIDWORD(v61))
                  break;
                v64 = *(_WORD *)(v63 + 8) & 0x7F;
              }
              else if (v64 == 83)
              {
                v115 = a1;
                goto LABEL_352;
              }
              v65 = -40;
              if (v64 > 70)
              {
                if (v64 != 83)
                {
                  if (v64 == 71)
                  {
                    v65 = -56;
                  }
                  else if (v64 != 81)
                  {
                    goto LABEL_163;
                  }
                }
              }
              else
              {
                if (v64 > 0x18)
                  goto LABEL_162;
                if (v64 == 16)
                  goto LABEL_155;
                if (((1 << v64) & 0x1066) == 0)
                {
                  if (v64 == 24)
                  {
LABEL_155:
                    v65 = -48;
                  }
                  else
                  {
LABEL_162:
                    if (v64 == 70)
                    {
                      v65 = -64;
                    }
                    else
                    {
LABEL_163:
                      v66 = v64 - 52;
                      if ((v64 - 33) >= 5)
                        v67 = -48;
                      else
                        v67 = -64;
                      if (v66 >= 6)
                        v65 = v67;
                      else
                        v65 = -72;
                    }
                  }
                }
              }
              v68 = *(_QWORD *)(v63 + v65 + 16);
              v63 = v68 & 0xFFFFFFFFFFFFFFF8;
              if ((v68 & 4) != 0)
                continue;
              goto LABEL_147;
            }
          }
          v115 = a1;
          if ((int)v61 <= 2)
          {
            v81 = v9 & 7 | (8 * (v61 & 3));
            v9 = v81 | 0x20u;
            v266 = v81 | 0x20;
          }
LABEL_352:
          if ((v9 & 0x20) == 0)
          {
            if ((a3 & 1) != 0)
              v116 = 19;
            else
              v116 = 22;
            if (((*(_DWORD *)(*(_QWORD *)(v28 + 2000) + 244) >> v116) & 7u) < ((v9 >> 3) & 3))
            {
              v9 = v9 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)(*(_QWORD *)(v28 + 2000) + 244) >> v116) & 3u));
              v266 = v9;
            }
            if (sub_22EFB6BA0(v6) && (v9 & 0x18) != 0)
            {
              v9 = v9 & 0xFFFFFFC7;
              v266 = v9;
            }
          }
        }
        v117 = *(_DWORD *)(v6 + 28);
        v118 = v117 & 0x7F;
        if ((v118 - 67) < 0xFFFFFFF9)
        {
          v119 = v117 & 0x7E;
          if ((v119 - 58) < 0xFFFFFFFA)
          {
            if ((v118 - 38) >= 0xFFFFFFFB)
            {
              if (!*(_QWORD *)(v6 + 40))
              {
                v128 = *(_QWORD *)(v6 + 120);
                v9 = 16;
                if (v128 < 8 || (v128 & 4) != 0)
                  return v9;
              }
              if (v119 == 36)
                sub_22EFB659C(v115, (char *)&v266, v6, a3);
            }
            else if (v118 == 67)
            {
              v236 = sub_22EFB620C(v115);
              if ((v236 & 3 | 4) != 6)
                return 16;
              sub_22EF55F74(&v266, v236);
            }
            else if ((v118 - 33) >= 0xFFFFFFF9)
            {
              v169 = sub_22EFB5F2C(v115, *(_QWORD *)(v6 + 56), a3);
              sub_22EFB6528(&v266, v169, (a3 & 2) == 0);
            }
            else
            {
              if (v118 == 16)
                return v9;
              if (v118 != 22)
              {
                if ((v118 - 42) >= 0xFFFFFFFD)
                {
                  if (!sub_22EFB6D64(v6, 1))
                    return 16;
                }
                else if (v118 != 69)
                {
                  return 16;
                }
              }
            }
LABEL_741:
            if ((v266 & 7u) <= 2)
              return v266 & 7 | 0x10u;
            else
              return v266;
          }
          if ((*(_QWORD *)(v6 + 80) & 0xE000) == 0x6000)
            v266 = v9 & 0xC7 | 0x20;
          if ((*(_BYTE *)(*(_QWORD *)(v28 + 2000) + 1) & 1) == 0 || sub_22EFC09D4(*(_QWORD *)(v6 + 112)))
            goto LABEL_634;
          v120 = *(_QWORD *)(v6 + 56);
          v121 = (_QWORD *)(v120 & 0xFFFFFFFFFFFFFFF8);
          if ((v120 & 4) != 0)
            v121 = (_QWORD *)v121[4];
          v122 = v121 ? *v121 : *(_QWORD *)(v6 + 48);
          v203 = *(_QWORD *)(v122 & 0xFFFFFFFFFFFFFFF0);
          sub_22F114870(v203);
          if ((*(_DWORD *)(v203 + 16) & 0x1C000u) > 0x8000)
          {
LABEL_634:
            v204 = *(_QWORD *)(v6 + 144);
            if ((v204 & 6) == 4 && (v204 & 0xFFFFFFFFFFFFFFF8) != 0)
              sub_22EFB645C(v115, &v266, v6, v204 & 0xFFFFFFFFFFFFFFF8, v264);
            goto LABEL_741;
          }
          return 18;
        }
        if ((*(_BYTE *)(*(_QWORD *)(v28 + 2000) + 1) & 1) != 0)
        {
          v123 = *(_QWORD *)(*(_QWORD *)(v6 + 80) + 16);
          v124 = v123 & 0xFFFFFFFFFFFFFFF8;
          if ((v123 & 4) != 0)
            v124 = *(_QWORD *)(v124 + 8);
          if (!sub_22EFCBD94(v124, 1) && (a4 & 1) == 0)
          {
            v125 = (uint64_t *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF0);
            v126 = *v125;
            if ((a3 & 4) != 0)
            {
              sub_22F114870(*v125);
              v127 = (*(_DWORD *)(v126 + 16) >> 14) & 7 | 0x30;
            }
            else
            {
              v127 = sub_22F114CF4(v115, *v125);
            }
            if ((v127 & 7) < 3)
              return 18;
            if ((v9 & 0x20) == 0)
            {
              v151 = (v127 >> 3) & 3;
              v152 = (v127 >> 5) & 1;
              v153 = (v9 >> 3) & 3;
              if (v153 != v151)
                v152 = 1;
              if (v153 >= v151 && v152 != 0)
              {
                LOBYTE(v9) = v9 & 0xC7 | (8 * v151) | v127 & 0x20;
                v266 = v9;
              }
            }
          }
        }
        if ((*(_BYTE *)(v6 + 96) & 7) == 3)
          v266 = v9 & 0xC7 | 0x20;
        if ((*(_DWORD *)(v6 + 28) & 0x7Fu) - 67 >= 0xFFFFFFFE)
          sub_22EFB6704(v115, (char *)&v266, v6, a3);
        goto LABEL_741;
      }
      if (sub_22EFC4A94(v6))
      {
        if (v6 && (*(_DWORD *)(v6 + 28) & 0x7F) == 0x53)
          goto LABEL_841;
        v85 = *(_QWORD *)(v6 + 16);
        v74 = v85 & 0xFFFFFFFFFFFFFFF8;
        if ((v85 & 4) != 0)
          v74 = *(_QWORD *)v74;
        v86 = *(_WORD *)(v74 + 8) & 0x7F;
        if (v86 != 83)
        {
          while (2)
          {
            v87 = -40;
            if (v86 > 70)
            {
              if (v86 == 71)
              {
                v87 = -56;
              }
              else if (v86 != 81)
              {
                goto LABEL_236;
              }
            }
            else
            {
              if (v86 > 0x18)
                goto LABEL_235;
              if (v86 == 16)
                goto LABEL_229;
              if (((1 << v86) & 0x1066) == 0)
              {
                if (v86 == 24)
                {
LABEL_229:
                  v87 = -48;
                }
                else
                {
LABEL_235:
                  if (v86 == 70)
                  {
                    v87 = -64;
                  }
                  else
                  {
LABEL_236:
                    v88 = v86 - 52;
                    if ((v86 - 33) >= 5)
                      v89 = -48;
                    else
                      v89 = -64;
                    if (v88 >= 6)
                      v87 = v89;
                    else
                      v87 = -72;
                  }
                }
              }
            }
            v90 = *(_QWORD *)(v74 + v87 + 16);
            v74 = v90 & 0xFFFFFFFFFFFFFFF8;
            if ((v90 & 4) != 0)
              v74 = *(_QWORD *)v74;
            v86 = *(_WORD *)(v74 + 8) & 0x7F;
            if (v86 == 83)
              break;
            continue;
          }
        }
LABEL_840:
        v6 = v74 - 40;
        goto LABEL_841;
      }
      return 17;
    }
    if ((*(_BYTE *)(*(_QWORD *)(v28 + 2000) + 1) & 1) == 0)
      goto LABEL_132;
    v83 = *(_QWORD *)(v6 + 48);
    if ((v83 & 1) != 0)
    {
      if ((v83 & 4) == 0)
      {
        v84 = *(_QWORD *)((v83 & 0xFFFFFFFFFFFFFFF0) + 8);
        goto LABEL_318;
      }
    }
    else
    {
      if ((v83 & 4) != 0)
        goto LABEL_132;
      v84 = *(_QWORD *)((v83 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v84 & 1) == 0)
        goto LABEL_132;
LABEL_318:
      if ((v84 & 4) == 0 && (v35 == 64 || (*(_BYTE *)(v6 + 97) & 0x20) == 0))
      {
        if (((*(_DWORD *)(v6 + 8) >> 1) & 3u) - 1 > 1)
          goto LABEL_324;
        if ((sub_22EFC4A94(v6) & 1) == 0)
        {
          v34 = *(_DWORD *)(v6 + 28);
          v35 = v34 & 0x7F;
LABEL_324:
          if ((v35 - 65) >= 2)
          {
            if (!v6 || (v106 = v34 & 0x7F, v107 = v6, v106 != 83))
            {
              v108 = *(_QWORD *)(v6 + 16);
              v109 = v108 & 0xFFFFFFFFFFFFFFF8;
              if ((v108 & 4) != 0)
                v109 = *(_QWORD *)v109;
              for (k = *(_WORD *)(v109 + 8) & 0x7F; k != 83; k = *(_WORD *)(v109 + 8) & 0x7F)
              {
                v111 = -40;
                if (k > 70)
                {
                  if (k == 71)
                  {
                    v111 = -56;
                  }
                  else if (k != 81)
                  {
                    goto LABEL_340;
                  }
                }
                else
                {
                  if (k > 0x18)
                    goto LABEL_339;
                  if (k == 16)
                    goto LABEL_333;
                  if (((1 << k) & 0x1066) != 0)
                    goto LABEL_346;
                  if (k == 24)
                  {
LABEL_333:
                    v111 = -48;
                  }
                  else
                  {
LABEL_339:
                    if (k != 70)
                    {
LABEL_340:
                      v112 = k - 52;
                      if ((k - 33) >= 5)
                        v113 = -48;
                      else
                        v113 = -64;
                      if (v112 >= 6)
                        v111 = v113;
                      else
                        v111 = -72;
                      goto LABEL_346;
                    }
                    v111 = -64;
                  }
                }
LABEL_346:
                v114 = *(_QWORD *)(v109 + v111 + 16);
                v109 = v114 & 0xFFFFFFFFFFFFFFF8;
                if ((v114 & 4) != 0)
                  v109 = *(_QWORD *)v109;
              }
              v107 = v109 - 40;
            }
            v195 = *(_QWORD *)(v107 + 88);
            v196 = *(_QWORD *)(v195 + 1608);
            v197 = *(unsigned int *)(v195 + 1624);
            if ((_DWORD)v197)
            {
              LODWORD(v198) = (v197 - 1) & ((v6 >> 4) ^ (v6 >> 9));
              v199 = (uint64_t *)(v196 + 16 * v198);
              v200 = *v199;
              if (*v199 != v6)
              {
                v201 = 1;
                do
                {
                  if (v200 == -4096)
                    goto LABEL_643;
                  v202 = v198 + v201++;
                  v198 = v202 & (v197 - 1);
                  v200 = *(_QWORD *)(v196 + 16 * v198);
                }
                while (v200 != v6);
                v199 = (uint64_t *)(v196 + 16 * v198);
              }
            }
            else
            {
LABEL_643:
              v199 = (uint64_t *)(v196 + 16 * v197);
            }
            if (v199 != (uint64_t *)(v196 + 16 * v197) && (unint64_t)v199[1] >= 8 && (v199[1] & 4) == 0)
              goto LABEL_132;
            if ((*(_BYTE *)(v6 + 72) & 3) == 0 && sub_22E3CD31C((uint64_t *)(v6 + 72), v6))
              return sub_22EFB620C(a1);
            if ((*(_BYTE *)(v6 + 96) & 5 | 2) == 3)
              goto LABEL_132;
            v206 = *(_QWORD *)(v6 + 16);
            v207 = v206 & 0xFFFFFFFFFFFFFFF8;
            if ((v206 & 4) != 0)
              v207 = *(_QWORD *)v207;
            if (v207 && (*(_WORD *)(v207 + 8) & 0x7F) == 0xC && (*(_BYTE *)(v207 + 10) & 1) == 0)
              goto LABEL_132;
            if (!sub_22EFC4A94(v6))
              return 17;
            if (v6 && (*(_DWORD *)(v6 + 28) & 0x7F) == 0x53)
              goto LABEL_841;
            v208 = *(_QWORD *)(v6 + 16);
            v74 = v208 & 0xFFFFFFFFFFFFFFF8;
            if ((v208 & 4) != 0)
              v74 = *(_QWORD *)v74;
            v209 = *(_WORD *)(v74 + 8) & 0x7F;
            if (v209 == 83)
              goto LABEL_840;
            while (1)
            {
              v210 = -40;
              if (v209 > 70)
              {
                if (v209 == 71)
                {
                  v210 = -56;
                }
                else if (v209 != 81)
                {
                  goto LABEL_668;
                }
              }
              else
              {
                if (v209 > 0x18)
                  goto LABEL_667;
                if (v209 == 16)
                  goto LABEL_661;
                if (((1 << v209) & 0x1066) != 0)
                  goto LABEL_674;
                if (v209 == 24)
                {
LABEL_661:
                  v210 = -48;
                }
                else
                {
LABEL_667:
                  if (v209 != 70)
                  {
LABEL_668:
                    v211 = v209 - 52;
                    if ((v209 - 33) >= 5)
                      v212 = -48;
                    else
                      v212 = -64;
                    if (v211 >= 6)
                      v210 = v212;
                    else
                      v210 = -72;
                    goto LABEL_674;
                  }
                  v210 = -64;
                }
              }
LABEL_674:
              v213 = *(_QWORD *)(v74 + v210 + 16);
              v74 = v213 & 0xFFFFFFFFFFFFFFF8;
              if ((v213 & 4) != 0)
                v74 = *(_QWORD *)v74;
              v209 = *(_WORD *)(v74 + 8) & 0x7F;
              if (v209 == 83)
                goto LABEL_840;
            }
          }
        }
      }
    }
LABEL_132:
    if ((*(_BYTE *)(v6 + 72) & 3) != 0)
      goto LABEL_133;
    v97 = sub_22E3CD31C((uint64_t *)(v6 + 72), v6);
    if (!v97)
      goto LABEL_133;
    v98 = v97;
    while (1)
    {
      v99 = *(_BYTE *)(v98 + 96) & 7;
      if (v99 == 3)
      {
        if ((*(_BYTE *)(v6 + 96) & 7) == 0)
        {
          v80 = a1;
          if ((*(_DWORD *)(v98 + 28) & 0x7F) == 0x53)
            return sub_22EFB620C(v80);
          v184 = *(_QWORD *)(v98 + 16);
          v185 = v184 & 0xFFFFFFFFFFFFFFF8;
          if ((v184 & 4) != 0)
            v185 = *(_QWORD *)v185;
          v186 = *(_WORD *)(v185 + 8) & 0x7F;
          if (v186 == 83)
            return sub_22EFB620C(v80);
          while (2)
          {
            v187 = -40;
            if (v186 > 70)
            {
              if (v186 == 71)
              {
                v187 = -56;
              }
              else if (v186 != 81)
              {
                goto LABEL_605;
              }
            }
            else
            {
              if (v186 > 0x18)
                goto LABEL_604;
              if (v186 == 16)
                goto LABEL_598;
              if (((1 << v186) & 0x1066) == 0)
              {
                if (v186 == 24)
                {
LABEL_598:
                  v187 = -48;
                }
                else
                {
LABEL_604:
                  if (v186 == 70)
                  {
                    v187 = -64;
                  }
                  else
                  {
LABEL_605:
                    v188 = v186 - 52;
                    if ((v186 - 33) >= 5)
                      v189 = -48;
                    else
                      v189 = -64;
                    if (v188 >= 6)
                      v187 = v189;
                    else
                      v187 = -72;
                  }
                }
              }
            }
            v190 = *(_QWORD *)(v185 + v187 + 16);
            v185 = v190 & 0xFFFFFFFFFFFFFFF8;
            if ((v190 & 4) != 0)
              v185 = *(_QWORD *)v185;
            v186 = *(_WORD *)(v185 + 8) & 0x7F;
            if (v186 == 83)
              return sub_22EFB620C(v80);
            continue;
          }
        }
      }
      else if (v99 == 2)
      {
        if (sub_22EFC4A94(v6))
        {
          if (!v6 || (*(_DWORD *)(v6 + 28) & 0x7F) != 0x53)
          {
            v171 = *(_QWORD *)(v6 + 16);
            v74 = v171 & 0xFFFFFFFFFFFFFFF8;
            if ((v171 & 4) != 0)
              v74 = *(_QWORD *)v74;
            v172 = *(_WORD *)(v74 + 8) & 0x7F;
            if (v172 == 83)
              goto LABEL_840;
            while (2)
            {
              v173 = -40;
              if (v172 > 70)
              {
                if (v172 == 71)
                {
                  v173 = -56;
                }
                else if (v172 != 81)
                {
                  goto LABEL_560;
                }
              }
              else
              {
                if (v172 > 0x18)
                  goto LABEL_559;
                if (v172 == 16)
                  goto LABEL_553;
                if (((1 << v172) & 0x1066) == 0)
                {
                  if (v172 == 24)
                  {
LABEL_553:
                    v173 = -48;
                  }
                  else
                  {
LABEL_559:
                    if (v172 == 70)
                    {
                      v173 = -64;
                    }
                    else
                    {
LABEL_560:
                      v174 = v172 - 52;
                      if ((v172 - 33) >= 5)
                        v175 = -48;
                      else
                        v175 = -64;
                      if (v174 >= 6)
                        v173 = v175;
                      else
                        v173 = -72;
                    }
                  }
                }
              }
              v176 = *(_QWORD *)(v74 + v173 + 16);
              v74 = v176 & 0xFFFFFFFFFFFFFFF8;
              if ((v176 & 4) != 0)
                v74 = *(_QWORD *)v74;
              v172 = *(_WORD *)(v74 + 8) & 0x7F;
              if (v172 == 83)
                goto LABEL_840;
              continue;
            }
          }
LABEL_841:
          if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 88) + 2000) + 20) & 0x400000000000) != 0)
            return 20;
        }
        return 17;
      }
      if ((*(_BYTE *)(v98 + 72) & 3) == 0)
      {
        v98 = sub_22E3CD31C((uint64_t *)(v98 + 72), v98);
        if (v98)
          continue;
      }
      goto LABEL_133;
    }
  }
  if (!sub_22EFC4A94(v6))
    return 17;
  if (v6 && (*(_DWORD *)(v6 + 28) & 0x7F) == 0x53)
    goto LABEL_841;
  v73 = *(_QWORD *)(v6 + 16);
  v74 = v73 & 0xFFFFFFFFFFFFFFF8;
  if ((v73 & 4) != 0)
    v74 = *(_QWORD *)v74;
  v75 = *(_WORD *)(v74 + 8) & 0x7F;
  if (v75 == 83)
    goto LABEL_840;
  while (1)
  {
    v76 = -40;
    if (v75 > 70)
    {
      if (v75 == 71)
      {
        v76 = -56;
      }
      else if (v75 != 81)
      {
        goto LABEL_198;
      }
    }
    else
    {
      if (v75 > 0x18)
        goto LABEL_197;
      if (v75 == 16)
        goto LABEL_191;
      if (((1 << v75) & 0x1066) != 0)
        goto LABEL_204;
      if (v75 == 24)
      {
LABEL_191:
        v76 = -48;
      }
      else
      {
LABEL_197:
        if (v75 != 70)
        {
LABEL_198:
          v77 = v75 - 52;
          if ((v75 - 33) >= 5)
            v78 = -48;
          else
            v78 = -64;
          if (v77 >= 6)
            v76 = v78;
          else
            v76 = -72;
          goto LABEL_204;
        }
        v76 = -64;
      }
    }
LABEL_204:
    v79 = *(_QWORD *)(v74 + v76 + 16);
    v74 = v79 & 0xFFFFFFFFFFFFFFF8;
    if ((v79 & 4) != 0)
      v74 = *(_QWORD *)v74;
    v75 = *(_WORD *)(v74 + 8) & 0x7F;
    if (v75 == 83)
      goto LABEL_840;
  }
}

uint64_t sub_22EFB92BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  if ((v3 & 7) != 0 || v4 == 0)
    return 0;
  v6 = sub_22F1D31A0(v4, a2);
  if ((v6 - 3) >= 0xFFFFFFFE)
  {
    v7 = *(_DWORD *)(a1 + 28);
    if ((v7 & 0x7Fu) - 32 <= 0x20 && ((1 << ((v7 & 0x7Fu) - 32)) & 0x108000041) != 0)
      return 0;
    v10 = *(_QWORD *)(a1 + 16);
    v11 = v10 & 0xFFFFFFFFFFFFFFF8;
    v12 = v10 & 0xFFFFFFFFFFFFFFF8;
    if ((v10 & 4) != 0)
      v12 = *(_QWORD *)v11;
    if ((*(_WORD *)(sub_22EFCBB30(v12) + 8) & 0x7F) != 0x53)
    {
      if ((v7 & 0x7Fu) - 67 >= 0xFFFFFFF9)
      {
        if ((v10 & 4) != 0)
          v11 = *(_QWORD *)v11;
        if ((*(_WORD *)(v11 + 8) & 0x7Eu) - 34 >= 4)
        {
          if (!sub_22EFBBDAC(a1))
            return 2;
          v7 = *(_DWORD *)(a1 + 28);
        }
      }
      if ((v7 & 0x7Eu) - 58 < 0xFFFFFFFA)
        return 0;
      v13 = *(_QWORD *)(a1 + 16);
      v14 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0)
        v14 = *(_QWORD *)v14;
      if ((*(_WORD *)(v14 + 8) & 0x7Eu) - 34 < 4 || sub_22EFC0844(a1))
        return 0;
      return 2;
    }
  }
  return v6;
}

BOOL sub_22EFB93F4(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) != 0)
    v2 = *(_QWORD *)v2;
  return (*(_WORD *)(v2 + 8) & 0x7Eu) - 34 >= 4 && sub_22EFBBDAC(a1) == 0;
}

BOOL sub_22EFB9440(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) != 0)
    v2 = *(_QWORD *)v2;
  return (*(_WORD *)(v2 + 8) & 0x7Eu) - 34 >= 4 && sub_22EFC0844(a1) == 0;
}

uint64_t sub_22EFB948C(uint64_t a1)
{
  uint64_t i;
  char v2;
  uint64_t v4;
  llvm *v5[2];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = 0u;
  v11 = 0u;
  v10 = 0u;
  v9 = 0u;
  v8 = 0u;
  v7 = 0u;
  v6 = 0u;
  *(_OWORD *)v5 = 0u;
  v4 = 1;
  for (i = 1; i != 17; i += 2)
    v5[i - 1] = (llvm *)-1;
  v2 = sub_22EFB620C(&v4, a1, 7u);
  if ((v4 & 1) == 0)
    llvm::deallocate_buffer(v5[0], (void *)(16 * LODWORD(v5[1])));
  return v2 & 7;
}

uint64_t sub_22EFB9558(uint64_t a1)
{
  uint64_t i;
  int v2;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int j;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v17;
  llvm *v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v25 = 0u;
  v24 = 0u;
  v23 = 0u;
  v22 = 0u;
  v21 = 0u;
  v20 = 0u;
  v19 = 0u;
  *(_OWORD *)v18 = 0u;
  v17 = 1;
  for (i = 1; i != 17; i += 2)
    v18[i - 1] = (llvm *)-1;
  v2 = *(_DWORD *)(a1 + 28) & 0x7F;
  v5 = v2 != 28 && (*(_DWORD *)(a1 + 28) & 0x7Fu) - 33 > 9 && v2 != 22;
  if (!a1 || (v6 = a1, v2 != 83))
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
    if ((v7 & 4) != 0)
      v8 = *(_QWORD *)v8;
    for (j = *(_WORD *)(v8 + 8) & 0x7F; j != 83; j = *(_WORD *)(v8 + 8) & 0x7F)
    {
      v10 = -40;
      if (j > 70)
      {
        if (j == 71)
        {
          v10 = -56;
        }
        else if (j != 81)
        {
          goto LABEL_31;
        }
      }
      else
      {
        if (j > 0x18)
          goto LABEL_30;
        if (j == 16)
          goto LABEL_20;
        if (((1 << j) & 0x1066) != 0)
          goto LABEL_21;
        if (j == 24)
        {
LABEL_20:
          v10 = -48;
        }
        else
        {
LABEL_30:
          if (j != 70)
          {
LABEL_31:
            v12 = j - 52;
            if ((j - 33) >= 5)
              v13 = -48;
            else
              v13 = -64;
            if (v12 >= 6)
              v10 = v13;
            else
              v10 = -72;
            goto LABEL_21;
          }
          v10 = -64;
        }
      }
LABEL_21:
      v11 = *(_QWORD *)(v8 + v10 + 16);
      v8 = v11 & 0xFFFFFFFFFFFFFFF8;
      if ((v11 & 4) != 0)
        v8 = *(_QWORD *)v8;
    }
    v6 = v8 - 40;
  }
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 88) + 2000) + 140) & 0x800000000000) != 0)
    v14 = 7;
  else
    v14 = v5;
  v15 = sub_22EFB620C(&v17, a1, v14);
  if ((v17 & 1) == 0)
    llvm::deallocate_buffer(v18[0], (void *)(16 * LODWORD(v18[1])));
  return v15;
}

unint64_t sub_22EFB9750(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  __int16 v22;
  _QWORD *v23;
  _QWORD *v24;
  unsigned int v25;
  unint64_t v26;
  int i;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;

  v6 = sub_22EFC4B5C(a1, a2);
  if (!HIDWORD(v6))
  {
    v7 = *(_DWORD *)(a1 + 28);
    v8 = v7 & 0x7F;
    if (a1)
    {
      if ((v8 - 38) >= 0xFFFFFFFD)
      {
        v9 = *(_QWORD *)(a1 + 136);
        if ((v9 & 4) != 0)
        {
          v10 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
          if (v10)
          {
            v26 = *v10 & 0xFFFFFFFFFFFFFFF8;
            if (v26)
              goto LABEL_82;
          }
        }
      }
    }
    if (a1 && (v7 & 0x7E) == 0x24)
    {
      v11 = *(_QWORD *)(a1 + 152);
      v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
      if ((v11 & 4) != 0 && v12)
      {
        do
        {
          v13 = *(_QWORD *)(*v12 + 152);
          v12 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
        }
        while ((v13 & 4) != 0 && v12);
      }
      v14 = v12[6];
      if (v14)
      {
        while (1)
        {
          v6 = sub_22EFC4B5C(v14, a2);
          if (HIDWORD(v6))
            break;
          if ((*(_BYTE *)(v14 + 96) & 3) == 0)
          {
            v14 = sub_22E3CD31C((uint64_t *)(v14 + 96), v14);
            if (v14)
              continue;
          }
          goto LABEL_78;
        }
        v15 = 0x100000000;
        goto LABEL_18;
      }
LABEL_78:
      v15 = 0;
      v16 = 0;
      return v6 & 0xFFFFFF00 | (unint64_t)v15 | v16;
    }
    if (v8 != 16 && (a3 & 1) == 0)
    {
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      if (v17 != a1)
      {
        v18 = sub_22EFB9750(v17, a2, 1);
LABEL_83:
        LODWORD(v6) = v18;
        v15 = v18 & 0x100000000;
        v16 = v18;
        return v6 & 0xFFFFFF00 | (unint64_t)v15 | v16;
      }
      v7 = *(_DWORD *)(a1 + 28);
      v8 = v7 & 0x7F;
    }
    if (!a1 || (v19 = v8 - 67, (v8 - 67) < 0xFFFFFFF9))
    {
      if (a1 && (v7 & 0x7Eu) - 58 >= 0xFFFFFFFA)
      {
        v23 = (_QWORD *)(*(_QWORD *)(a1 + 144) & 0xFFFFFFFFFFFFFFF8);
        if ((*(_QWORD *)(a1 + 144) & 6) == 4 && v23)
        {
          v24 = (_QWORD *)(v23[2] & 0xFFFFFFFFFFFFFFF8);
LABEL_81:
          v26 = v24[6];
LABEL_82:
          v18 = sub_22EFC4B5C(v26, a2);
          goto LABEL_83;
        }
        v15 = 0;
        if ((*(_QWORD *)(a1 + 144) & 6) == 2 && v23)
        {
          v26 = *v23 & 0xFFFFFFFFFFFFFFF8;
          if (!v26)
            goto LABEL_78;
          goto LABEL_82;
        }
      }
      else
      {
        v15 = 0;
        if (a1)
        {
          v25 = v8 - 33;
          v16 = 0;
          if (v25 < 0xFFFFFFF9)
            return v6 & 0xFFFFFF00 | (unint64_t)v15 | v16;
          v26 = *(_QWORD *)(a1 + 48);
          goto LABEL_82;
        }
      }
      v16 = 0;
      return v6 & 0xFFFFFF00 | (unint64_t)v15 | v16;
    }
    if (v8 == 64)
      goto LABEL_78;
    v20 = *(_QWORD *)(a1 + 16);
    v21 = v20 & 0xFFFFFFFFFFFFFFF8;
    if ((v20 & 4) != 0)
    {
      v21 = *(_QWORD *)v21;
      v22 = *(_WORD *)(v21 + 8);
      if ((v22 & 0x7Eu) - 34 > 3)
      {
LABEL_77:
        if (v19 < 0xFFFFFFFE)
          goto LABEL_78;
        v40 = *(_QWORD *)(a1 + 112);
        v24 = (_QWORD *)(v40 & 0xFFFFFFFFFFFFFFF8);
        if ((v40 & 4) != 0 && v24)
        {
          do
          {
            v44 = *(_QWORD *)(*v24 + 112);
            v24 = (_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF8);
          }
          while ((v44 & 4) != 0 && v24);
        }
        goto LABEL_81;
      }
    }
    else
    {
      v22 = *(_WORD *)(v21 + 8);
      if ((v22 & 0x7Eu) - 34 >= 4)
        goto LABEL_77;
    }
    for (i = v22 & 0x7F; i != 83; i = *(_WORD *)(v21 + 8) & 0x7F)
    {
      v28 = -40;
      if (i > 70)
      {
        if (i != 83)
        {
          if (i == 71)
          {
            v28 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_57;
          }
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_56;
        if (i == 16)
          goto LABEL_49;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_63;
        if (i == 24)
        {
LABEL_49:
          v28 = -48;
        }
        else
        {
LABEL_56:
          if (i != 70)
          {
LABEL_57:
            v29 = i - 52;
            if ((i - 33) >= 5)
              v30 = -48;
            else
              v30 = -64;
            if (v29 >= 6)
              v28 = v30;
            else
              v28 = -72;
            goto LABEL_63;
          }
          v28 = -64;
        }
      }
LABEL_63:
      v31 = *(_QWORD *)(v21 + v28 + 16);
      v21 = v31 & 0xFFFFFFFFFFFFFFF8;
      if ((v31 & 4) != 0)
        v21 = *(_QWORD *)v21;
    }
    v32 = *(_QWORD *)(v21 + 48);
    v33 = *(_QWORD *)(v32 + 1608);
    v34 = *(unsigned int *)(v32 + 1624);
    if ((_DWORD)v34)
    {
      LODWORD(v35) = (v34 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      v36 = (uint64_t *)(v33 + 16 * v35);
      v37 = *v36;
      if (*v36 == a1)
      {
LABEL_76:
        if (v36 != (uint64_t *)(v33 + 16 * v34))
        {
          v42 = v36[1];
          if ((v42 & 4) != 0)
          {
            v43 = (_QWORD *)(v42 & 0xFFFFFFFFFFFFFFF8);
            if (v43)
            {
              v26 = *v43 & 0xFFFFFFFFFFFFFFF8;
              if (v26)
                goto LABEL_82;
            }
          }
        }
        goto LABEL_77;
      }
      v38 = 1;
      while (v37 != -4096)
      {
        v39 = v35 + v38++;
        v35 = v39 & (v34 - 1);
        v37 = *(_QWORD *)(v33 + 16 * v35);
        if (v37 == a1)
        {
          v36 = (uint64_t *)(v33 + 16 * v35);
          goto LABEL_76;
        }
      }
    }
    v36 = (uint64_t *)(v33 + 16 * v34);
    goto LABEL_76;
  }
  v15 = v6 & 0x100000000;
LABEL_18:
  v16 = v6;
  return v6 & 0xFFFFFF00 | (unint64_t)v15 | v16;
}

uint64_t sub_22EFB9B24(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  if (a3)
  {
    v6 = a3;
    v7 = *(_DWORD *)(a3 + 28) & 0x7F;
    if (v7 != 64)
      goto LABEL_26;
    v8 = *(_QWORD *)(a3 + 16);
    v9 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
    if ((v8 & 4) != 0)
      v9 = (_QWORD *)*v9;
    v10 = sub_22EFCBB30((unint64_t)v9);
    v11 = *(_WORD *)(v10 + 8) & 0x7F;
    if ((v11 - 13) <= 0x3D)
    {
      a2 = v10;
      goto LABEL_8;
    }
    return 16;
  }
  v11 = *(_WORD *)(a2 + 8) & 0x7F;
  if ((v11 - 13) >= 0x3E)
    return 16;
LABEL_8:
  v12 = -40;
  if (v11 > 70)
  {
    if (v11 != 83)
    {
      if (v11 == 71)
      {
        v12 = -56;
        goto LABEL_25;
      }
      if (v11 == 81)
        goto LABEL_25;
LABEL_20:
      v14 = v11 - 52;
      v15 = (v11 - 33) >= 5;
      v16 = -48;
      if (!v15)
        v16 = -64;
      if (v14 >= 6)
        v12 = v16;
      else
        v12 = -72;
    }
  }
  else
  {
    if (v11 > 0x18)
      goto LABEL_19;
    if (v11 != 16)
    {
      if (((1 << v11) & 0x1066) != 0)
        goto LABEL_25;
      if (v11 != 24)
      {
LABEL_19:
        if (v11 == 70)
        {
          v12 = -64;
          goto LABEL_25;
        }
        goto LABEL_20;
      }
    }
    v12 = -48;
  }
LABEL_25:
  v6 = a2 + v12;
  v7 = *(_DWORD *)(a2 + v12 + 28) & 0x7F;
LABEL_26:
  if ((v7 - 67) >= 0xFFFFFFF9
    && (v17 = *(_QWORD *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF0), v19 = 0, sub_22F110500((uint64_t)&v19, v17)))
  {
    v18 = sub_22EFB6E40(a1, v6, a4, 1);
  }
  else
  {
    v18 = sub_22EFB620C(a1);
  }
  if ((v18 & 7u) >= 3)
    return v18 & 0x38 | 3u;
  else
    return 16;
}

uint64_t sub_22EFB9CC4(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;

  v1 = *(_QWORD *)(a1 + 144) & 6;
  v2 = (_DWORD *)(*(_QWORD *)(a1 + 144) & 0xFFFFFFFFFFFFFFF8);
  if (v1 != 4 || v2 == 0)
  {
    if (v1 != 2 || v2 == 0)
      return 0;
  }
  else
  {
    v2 += 4;
  }
  return ((*v2 >> 1) & 3u) + 1;
}

uint64_t sub_22EFB9D04(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v10;

  v10 = a2 & 0xFFFFFFFFFFFFFFF8 | (__rbit32(a3) >> 29);
  v4 = sub_22EFC4E8C(a1, &v10);
  v5 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v6 = 8;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(unsigned int *)(a1 + 16);
  }
  if (v5 + 16 * v6 == v4)
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v7 = *(unsigned __int8 *)(v4 + 8);
    v8 = 1;
  }
  return v7 | (v8 << 8);
}

uint64_t sub_22EFB9D84(unint64_t a1)
{
  int v1;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_DWORD *)(a1 + 28);
  if ((v1 & 0x7F) != 0x10)
  {
    v3 = *(_QWORD *)(a1 + 8) & 6;
    if ((v1 & 0x8000) != 0)
    {
      if (!v3)
        return 0;
      v4 = sub_22EFC7594(a1);
      if (!v4)
        return 0;
    }
    else
    {
      if (!v3)
        return 0;
      v4 = *(_QWORD *)(a1 - 8);
      if (!v4)
        return 0;
    }
    __asm { BR              X9 }
  }
  return 0;
}

void sub_22EFB9E10()
{
  JUMPOUT(0x22EFB9DA8);
}

void sub_22EFB9E18()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  int v3;

  if ((v2 & 1) != 0)
    goto LABEL_10;
  if ((*(_DWORD *)(v1 + 28) & 0x7Fu) - 75 >= 0xFFFFFFC2)
  {
    if ((sub_22EFB948C(v1) | 4) != 6)
    {
      v3 = *(_DWORD *)(v0 + 28);
      goto LABEL_7;
    }
LABEL_10:
    JUMPOUT(0x22EFB9DA4);
  }
  if (!sub_22EFC83D8(v1))
    goto LABEL_10;
LABEL_7:
  if (v3 != 2)
    JUMPOUT(0x22EFB9DA8);
  sub_22EFB9E10();
}

uint64_t sub_22EFB9E64(uint64_t a1, uint64_t a2)
{
  return sub_22EFC6724(a2, *(_QWORD *)(a1 + 40));
}

void sub_22EFB9E74(unint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int i;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v12 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 1;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  v11 = MEMORY[0x24BED83D8] + 16;
  v19 = a2;
  llvm::raw_ostream::SetBufferAndMode();
  if (!a1 || (v3 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v4 = *(_QWORD *)(a1 + 16);
    v5 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 4) != 0)
      v5 = *(_QWORD *)v5;
    for (i = *(_WORD *)(v5 + 8) & 0x7F; i != 83; i = *(_WORD *)(v5 + 8) & 0x7F)
    {
      v7 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v7 = -56;
          goto LABEL_22;
        }
        if (i == 81)
          goto LABEL_22;
      }
      else
      {
        if (i <= 0x18)
        {
          if (i == 16)
            goto LABEL_9;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_22;
          if (i == 24)
          {
LABEL_9:
            v7 = -48;
            goto LABEL_22;
          }
        }
        if (i == 70)
        {
          v7 = -64;
          goto LABEL_22;
        }
      }
      v8 = i - 52;
      if ((i - 33) >= 5)
        v9 = -48;
      else
        v9 = -64;
      if (v8 >= 6)
        v7 = v9;
      else
        v7 = -72;
LABEL_22:
      v10 = *(_QWORD *)(v5 + v7 + 16);
      v5 = v10 & 0xFFFFFFFFFFFFFFF8;
      if ((v10 & 4) != 0)
        v5 = *(_QWORD *)v5;
    }
    v3 = v5 - 40;
  }
  sub_22EFBA008((_QWORD *)a1, (llvm::raw_ostream *)&v11, *(_QWORD *)(v3 + 88) + 15104);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v11);
}

void sub_22EFBA008(_QWORD *a1, llvm::raw_ostream *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  BOOL v8;
  const char *v9;
  llvm::raw_ostream *v10;
  uint64_t v11;
  _BYTE v12[72];
  void *v13;
  __int128 v14;
  _QWORD v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v5 = a1[2];
  v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  if ((v5 & 4) != 0)
    v6 = *(_QWORD *)v6;
  v7 = *(_WORD *)(v6 + 8) & 0x7F;
  v8 = v7 > 0x18 || ((1 << v7) & 0x1000006) == 0;
  if (!v8 || v7 - 52 <= 5 || (sub_22EFBA1A8((uint64_t)a1, a2, a3), a1[5]))
  {
    (*(void (**)(_QWORD *, llvm::raw_ostream *))(*a1 + 88))(a1, a2);
    return;
  }
  v13 = v15;
  v14 = xmmword_22F44E300;
  sub_22F242C48((uint64_t)v12, (uint64_t)&v13);
  (*(void (**)(_QWORD *, _BYTE *))(*a1 + 88))(a1, v12);
  if ((_QWORD)v14)
  {
    v9 = (const char *)v13;
    v10 = a2;
LABEL_14:
    llvm::raw_ostream::write(v10, v9);
    goto LABEL_15;
  }
  v11 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v11) <= 0xA)
  {
    v9 = "(anonymous)";
    v10 = a2;
    goto LABEL_14;
  }
  *(_DWORD *)(v11 + 7) = 695432559;
  *(_QWORD *)v11 = *(_QWORD *)"(anonymous)";
  *((_QWORD *)a2 + 4) += 11;
LABEL_15:
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v12);
  if (v13 != v15)
    free(v13);
}

void sub_22EFBA1A8(uint64_t a1, llvm::raw_ostream *this, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  unsigned int *v35;
  const void *v36;
  size_t v37;
  unsigned int v38;
  void *v39;
  int v40;
  _QWORD *v42;
  uint64_t v44;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  BOOL v59;
  _BYTE *v60;
  uint64_t v61;
  BOOL v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _WORD *v66;
  _WORD *v67;
  uint64_t v68;
  _BYTE *v69;
  _WORD *v70;
  const void **v71;
  __int16 v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  _QWORD v76[9];

  v5 = a1;
  v76[8] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 4) != 0)
    v7 = *(_QWORD *)v7;
  v8 = *(_DWORD *)(a1 + 28) & 0x7F;
  switch(v8)
  {
    case 51:
      v9 = (unint64_t)sub_22EFDE1AC(a1);
LABEL_10:
      if (v9)
        v7 = v9 + 48;
      break;
    case 25:
      a1 = *(_QWORD *)(a1 + 104);
      if (a1)
      {
LABEL_8:
        v9 = sub_22EFDC9F0(a1);
        goto LABEL_10;
      }
      break;
    case 24:
      goto LABEL_8;
  }
  v10 = *(_WORD *)(v7 + 8) & 0x7F;
  v11 = v10 > 0x18 || ((1 << v10) & 0x1000006) == 0;
  if (!v11 || v10 - 52 < 6)
    return;
  v74 = v76;
  v75 = 0x800000000;
  v12 = *(_QWORD *)(v5 + 40);
  do
  {
    if ((*(_QWORD *)a3 & 0x2000) == 0
      || (*(_WORD *)(v7 + 8) & 0x7F) != 0x10
      || (*(_QWORD *)(v7 - 8) >= 8uLL ? (v13 = (*(_QWORD *)(v7 - 8) & 7) == 0) : (v13 = 0), v13))
    {
      if ((*(_QWORD *)a3 & 0x4000) == 0
        || (*(_WORD *)(v7 + 8) & 0x7F) != 0x10
        || (*(_BYTE *)(v7 + 56) & 4) == 0
        || !v12
        || !sub_22F3ABF5C(v7 - 48, v12))
      {
        v14 = *(_WORD *)(v7 + 8) & 0x7F;
        if ((v14 - 13) <= 0x3D)
        {
          switch(v14)
          {
            case 16:
            case 24:
              v16 = -48;
              break;
            case 71:
              v16 = -56;
              break;
            case 70:
              v16 = -64;
              break;
            default:
              v17 = v14 - 52;
              if ((v14 - 33) >= 5)
                v18 = -48;
              else
                v18 = -64;
              if (v17 >= 6)
                v16 = v18;
              else
                v16 = -72;
              break;
          }
          v19 = v75;
          if (v75 >= (unint64_t)HIDWORD(v75))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v19 = v75;
          }
          *((_QWORD *)v74 + v19) = v7;
          LODWORD(v75) = v75 + 1;
          v12 = *(_QWORD *)(v7 + v16 + 40);
        }
      }
    }
    v20 = *(_WORD *)(v7 + 8) & 0x7F;
    v21 = -40;
    if (v20 > 0x46)
    {
      if (v20 == 83)
        goto LABEL_65;
      if (v20 == 71)
      {
        v21 = -56;
        goto LABEL_65;
      }
      if (v20 != 81)
        goto LABEL_59;
    }
    else
    {
      if (v20 > 0x18)
        goto LABEL_58;
      if (v20 == 16)
        goto LABEL_51;
      if (((1 << v20) & 0x1066) == 0)
      {
        if (v20 == 24)
        {
LABEL_51:
          v21 = -48;
          goto LABEL_65;
        }
LABEL_58:
        if (v20 == 70)
        {
          v21 = -64;
          goto LABEL_65;
        }
LABEL_59:
        v22 = v20 - 52;
        if (v20 - 33 >= 5)
          v23 = -48;
        else
          v23 = -64;
        if (v22 >= 6)
          v21 = v23;
        else
          v21 = -72;
      }
    }
LABEL_65:
    v24 = *(_QWORD *)(v7 + v21 + 16);
    v7 = v24 & 0xFFFFFFFFFFFFFFF8;
    if ((v24 & 4) != 0)
      v7 = *(_QWORD *)v7;
  }
  while (v7);
  v25 = (char *)v74;
  if ((_DWORD)v75)
  {
    v26 = (char *)v74 + 8 * v75;
    while (1)
    {
      v28 = *((_QWORD *)v26 - 1);
      v26 -= 8;
      v27 = v28;
      v29 = *(_WORD *)(v28 + 8);
      v30 = v29 & 0x7E;
      v31 = (_QWORD *)(v28 - 64);
      if (!v28)
        v31 = 0;
      if (v30 == 36)
        v32 = v31;
      else
        v32 = 0;
      if (v27 && v30 == 36)
      {
        v33 = v32[5] & 0xFFFFFFFFFFFFFFF8;
        if ((v32[5] & 7) == 0 && v33 != 0)
        {
          v35 = *(unsigned int **)(v33 + 16);
          v38 = *v35;
          v36 = v35 + 4;
          v37 = v38;
          v39 = (void *)*((_QWORD *)this + 4);
          if ((unint64_t)v38 <= *((_QWORD *)this + 3) - (_QWORD)v39)
          {
            if (v37)
            {
              memcpy(v39, v36, v37);
              *((_QWORD *)this + 4) += v37;
            }
          }
          else
          {
            llvm::raw_ostream::write(this, (const char *)v36);
          }
        }
        v50 = v32[21];
        v51 = *(_QWORD *)v50;
        v52 = *(unsigned int *)(v50 + 8);
        v53 = v32[19];
        v54 = (uint64_t *)(v53 & 0xFFFFFFFFFFFFFFF8);
        if ((v53 & 4) != 0 && v54)
        {
          do
          {
            v55 = *(_QWORD *)(*v54 + 152);
            v54 = (uint64_t *)(v55 & 0xFFFFFFFFFFFFFFF8);
          }
          while ((v55 & 4) != 0 && v54);
        }
        sub_22F117B8C(this, v51, v52, a3, v54[7], 0, 0);
        goto LABEL_193;
      }
      v40 = v29 & 0x7F;
      if (v27 && v40 == 16)
        break;
      if ((v30 - 38) >= 0xFFFFFFFC)
        v42 = v31;
      else
        v42 = 0;
      if (v27 && (v30 - 38) >= 0xFFFFFFFC)
      {
        if (v42[5] < 8uLL || (v42[5] & 7) != 0)
        {
          v44 = *((_QWORD *)this + 4);
          if ((unint64_t)(*((_QWORD *)this + 3) - v44) > 0xA)
          {
            *(_DWORD *)(v44 + 7) = 544437615;
            *(_QWORD *)v44 = *(_QWORD *)"(anonymous ";
            *((_QWORD *)this + 4) += 11;
          }
          else
          {
            llvm::raw_ostream::write(this, "(anonymous ");
          }
          __asm { BR              X9 }
        }
        (*(void (**)(_QWORD *, llvm::raw_ostream *))(*v42 + 88))(v42, this);
        goto LABEL_193;
      }
      if (v27 && (v30 - 58) >= 0xFFFFFFFA)
      {
        if ((*(_BYTE *)(v27 + 10) & 0x20) != 0)
        {
          v57 = *(_QWORD *)(*(_QWORD *)(v27 - 24) & 0xFFFFFFFFFFFFFFF0);
          v58 = *(unsigned __int8 *)(v57 + 16);
          if (v57)
            v59 = (v58 - 27) > 0xFFFFFFFD;
          else
            v59 = 0;
          if (!v59)
          {
            v57 = sub_22F10CF48(v57);
            v58 = *(unsigned __int8 *)(v57 + 16);
          }
          if (v58 == 26)
            v48 = v57;
          else
            v48 = 0;
        }
        else
        {
          v48 = 0;
        }
        (*(void (**)(uint64_t, llvm::raw_ostream *))(*(_QWORD *)(v27 - 72) + 88))(v27 - 72, this);
        v60 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v60 >= *((_QWORD *)this + 3))
        {
          llvm::raw_ostream::write(this);
          if (v48)
            goto LABEL_152;
        }
        else
        {
          *((_QWORD *)this + 4) = v60 + 1;
          *v60 = 40;
          if (!v48)
            goto LABEL_190;
LABEL_152:
          v61 = *(_QWORD *)(*(_QWORD *)(v27 - 24) & 0xFFFFFFFFFFFFFFF0);
          if (v61)
            v62 = *(_BYTE *)(v61 + 16) == 26;
          else
            v62 = 0;
          if ((v62
             || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v61 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
             && (v61 = sub_22F10CF48(v61)) != 0)
            && (v63 = *(_QWORD *)(v61 + 16), (v63 & 0x3FFFC000000000) != 0))
          {
            v64 = 0;
            v65 = (unsigned __int16)(v63 >> 38);
            do
            {
              if (v64)
              {
                v66 = (_WORD *)*((_QWORD *)this + 4);
                if (*((_QWORD *)this + 3) - (_QWORD)v66 > 1uLL)
                {
                  *v66 = 8236;
                  *((_QWORD *)this + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(this, ", ");
                }
              }
              v73 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 48) + 8 * v64) + 48);
              v72 = 257;
              sub_22F119558(&v73, (uint64_t **)this, a3, &v71, 0);
              ++v64;
            }
            while (v65 != v64);
            if ((*(_BYTE *)(v48 + 23) & 8) != 0)
            {
              v67 = (_WORD *)*((_QWORD *)this + 4);
              if (*((_QWORD *)this + 3) - (_QWORD)v67 <= 1uLL)
              {
                llvm::raw_ostream::write(this, ", ");
                goto LABEL_187;
              }
              *v67 = 8236;
              v68 = *((_QWORD *)this + 4) + 2;
              *((_QWORD *)this + 4) = v68;
LABEL_188:
              if ((unint64_t)(*((_QWORD *)this + 3) - v68) > 2)
              {
                *(_BYTE *)(v68 + 2) = 46;
                *(_WORD *)v68 = 11822;
                *((_QWORD *)this + 4) += 3;
              }
              else
              {
                llvm::raw_ostream::write(this, "...");
              }
            }
          }
          else if ((*(_BYTE *)(v48 + 23) & 8) != 0)
          {
LABEL_187:
            v68 = *((_QWORD *)this + 4);
            goto LABEL_188;
          }
        }
LABEL_190:
        v69 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v69 >= *((_QWORD *)this + 3))
        {
          llvm::raw_ostream::write(this);
        }
        else
        {
          *((_QWORD *)this + 4) = v69 + 1;
          *v69 = 41;
        }
LABEL_193:
        v70 = (_WORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v70 > 1uLL)
        {
          *v70 = 14906;
          *((_QWORD *)this + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(this, "::");
        }
        goto LABEL_195;
      }
      if (v40 == 33)
        v49 = v31;
      else
        v49 = 0;
      if (!v27 || v40 != 33)
      {
        v56 = -40;
        if (v40 > 70)
        {
          if (v40 != 83)
          {
            if (v40 == 71)
            {
              v56 = -56;
            }
            else if (v40 != 81)
            {
LABEL_175:
              if ((v40 - 52) < 6)
              {
                v56 = -72;
              }
              else
              {
                v56 = -48;
                if ((v40 - 33) < 5)
                  v56 = -64;
              }
            }
          }
        }
        else
        {
          if (v40 > 0x18)
            goto LABEL_174;
          if (v40 == 16)
            goto LABEL_139;
          if (((1 << v40) & 0x1066) == 0)
          {
            if (v40 == 24)
            {
LABEL_139:
              v56 = -48;
            }
            else
            {
LABEL_174:
              if (v40 != 70)
                goto LABEL_175;
              v56 = -64;
            }
          }
        }
        v49 = (_BYTE *)(v27 + v56);
LABEL_120:
        (*(void (**)(_BYTE *, llvm::raw_ostream *))(*(_QWORD *)v49 + 88))(v49, this);
        goto LABEL_193;
      }
      if ((v49[76] & 0x80) != 0)
        goto LABEL_120;
LABEL_195:
      if (v26 == v25)
      {
        v25 = (char *)v74;
        goto LABEL_201;
      }
    }
    if (*(_QWORD *)(v27 - 8) < 8uLL || (*(_QWORD *)(v27 - 8) & 7) != 0)
    {
      if ((*(_BYTE *)(a3 + 4) & 0x10) != 0)
      else
        v46 = "(anonymous namespace)";
      v47 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v47) > 0x14)
      {
        *(_OWORD *)v47 = *(_OWORD *)v46;
        *(_QWORD *)(v47 + 13) = *(_QWORD *)(v46 + 13);
        *((_QWORD *)this + 4) += 21;
      }
      else
      {
        llvm::raw_ostream::write(this, v46);
      }
      goto LABEL_193;
    }
    v49 = (_BYTE *)(v27 - 48);
    goto LABEL_120;
  }
LABEL_201:
  if (v25 != (char *)v76)
    free(v25);
}

uint64_t sub_22EFBAACC(uint64_t a1)
{
  uint64_t result;
  BOOL v2;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (result)
    v2 = *(_BYTE *)(result + 16) == 26;
  else
    v2 = 0;
  if (v2)
    return (unsigned __int16)(*(_QWORD *)(result + 16) >> 38);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
    return 0;
  result = sub_22F10CF48(result);
  if (result)
    return (unsigned __int16)(*(_QWORD *)(result + 16) >> 38);
  return result;
}

BOOL sub_22EFBAB2C(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int i;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if ((*(_DWORD *)(a2 + 28) & 0x8000) == 0 || (*(_DWORD *)(a1 + 28) & 0x8000) == 0)
  {
    v4 = *(_DWORD *)(a2 + 28) & 0x7F;
    v5 = *(_DWORD *)(a1 + 28) & 0x7F;
    if (v4 == v5 && v5 != 24)
    {
      if (v4 == 64)
        return 1;
      v9 = *(_QWORD *)(a1 + 16);
      v10 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
      if ((v9 & 4) != 0)
        v10 = (_QWORD *)*v10;
      v11 = sub_22EFCBB30((unint64_t)v10);
      v12 = *(_QWORD *)(a2 + 16);
      v13 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
      if ((v12 & 4) != 0)
        v13 = (_QWORD *)*v13;
      v14 = sub_22EFCBB30((unint64_t)v13);
      if (v14)
      {
        v15 = v14;
        v16 = sub_22EFCC008(v11);
        if (v16 == sub_22EFCC008(v15))
        {
          if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x4A)
          {
            if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0xD)
              __asm { BR              X10 }
            v17 = *(_QWORD *)(a1 + 16);
            v18 = v17 & 0xFFFFFFFFFFFFFFF8;
            if ((v17 & 4) != 0)
              v18 = *(_QWORD *)v18;
            for (i = *(_WORD *)(v18 + 8) & 0x7F; i != 83; i = *(_WORD *)(v18 + 8) & 0x7F)
            {
              v20 = -40;
              if (i > 70)
              {
                if (i == 71)
                {
                  v20 = -56;
                  goto LABEL_39;
                }
                if (i == 81)
                  goto LABEL_39;
              }
              else
              {
                if (i <= 0x18)
                {
                  if (i == 16)
                    goto LABEL_26;
                  if (((1 << i) & 0x1066) != 0)
                    goto LABEL_39;
                  if (i == 24)
                  {
LABEL_26:
                    v20 = -48;
                    goto LABEL_39;
                  }
                }
                if (i == 70)
                {
                  v20 = -64;
                  goto LABEL_39;
                }
              }
              v21 = i - 52;
              if ((i - 33) >= 5)
                v22 = -48;
              else
                v22 = -64;
              if (v21 >= 6)
                v20 = v22;
              else
                v20 = -72;
LABEL_39:
              v23 = *(_QWORD *)(v18 + v20 + 16);
              v18 = v23 & 0xFFFFFFFFFFFFFFF8;
              if ((v23 & 4) != 0)
                v18 = *(_QWORD *)v18;
            }
LABEL_70:
            v30 = *(_QWORD *)(v18 + 48);
            v31 = sub_22EF65C10(v30, *(_QWORD *)(a1 + 64));
            return v31 == sub_22EF65C10(v30, *(_QWORD *)(a2 + 64));
          }
          v24 = *(_QWORD *)(a1 + 16);
          v18 = v24 & 0xFFFFFFFFFFFFFFF8;
          if ((v24 & 4) != 0)
            v18 = *(_QWORD *)v18;
          v25 = *(_WORD *)(v18 + 8) & 0x7F;
          if (v25 == 83)
            goto LABEL_70;
          while (1)
          {
            v26 = -40;
            if (v25 > 70)
            {
              if (v25 == 71)
              {
                v26 = -56;
              }
              else if (v25 != 81)
              {
                goto LABEL_58;
              }
            }
            else
            {
              if (v25 > 0x18)
                goto LABEL_57;
              if (v25 == 16)
                goto LABEL_51;
              if (((1 << v25) & 0x1066) != 0)
                goto LABEL_64;
              if (v25 == 24)
              {
LABEL_51:
                v26 = -48;
              }
              else
              {
LABEL_57:
                if (v25 != 70)
                {
LABEL_58:
                  v27 = v25 - 52;
                  if ((v25 - 33) >= 5)
                    v28 = -48;
                  else
                    v28 = -64;
                  if (v27 >= 6)
                    v26 = v28;
                  else
                    v26 = -72;
                  goto LABEL_64;
                }
                v26 = -64;
              }
            }
LABEL_64:
            v29 = *(_QWORD *)(v18 + v26 + 16);
            v18 = v29 & 0xFFFFFFFFFFFFFFF8;
            if ((v29 & 4) != 0)
              v18 = *(_QWORD *)v18;
            v25 = *(_WORD *)(v18 + 8) & 0x7F;
            if (v25 == 83)
              goto LABEL_70;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_22EFBAEA4(uint64_t result)
{
  int v1;
  BOOL v2;

  while (result && (*(_DWORD *)(result + 28) & 0x7E) == 0x2E)
    result = *(_QWORD *)(result + 64);
  v1 = *(_DWORD *)(result + 28) & 0x7F;
  if (v1 == 18)
    return *(_QWORD *)(result + 48);
  if (v1 == 17)
  {
    do
    {
      result = *(_QWORD *)(result + 88);
      if (result)
        v2 = (*(_DWORD *)(result + 28) & 0x7F) == 17;
      else
        v2 = 0;
    }
    while (v2);
  }
  return result;
}

BOOL sub_22EFBAEF8(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 result;
  int v3;
  int v4;
  int v5;

  v1 = a1;
  result = sub_22E8BB0E8(a1);
  if (result)
  {
    v3 = *(_DWORD *)(v1 + 28);
    if ((v3 & 0x7E) == 0x2E)
    {
      v1 = *(_QWORD *)(v1 + 64);
      v3 = *(_DWORD *)(v1 + 28);
    }
    v4 = v3 & 0x7F;
    if ((v4 - 49) < 0x14 && ((0x80207u >> (v4 - 49)) & 1) != 0)
      return 1;
    v5 = v3 & 0x7E;
    if ((v5 - 58) <= 0xFFFFFFF9)
    {
      if (v4 != 29)
        return 0;
      v1 = *(_QWORD *)(v1 + 48);
      if (!v1)
        return 0;
      v5 = *(_DWORD *)(v1 + 28) & 0x7E;
    }
    if ((v5 - 54) <= 3
      && (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1) + 80) & 0xE000) != 0x4000)
    {
      if ((*(_QWORD *)(v1 + 40) & 7) == 6)
        return (*(_DWORD *)(*(_QWORD *)(v1 + 40) & 0xFFFFFFFFFFFFFFF8) - 5) < 0xFFFFFFFC;
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_22EFBAFDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = (uint64_t *)(v1 & 0xFFFFFFFFFFFFFFF8);
  if ((v1 & 4) != 0)
    v2 = (uint64_t *)v2[4];
  if (!v2)
    return 0;
  v3 = *v2;
  for (i = *v2; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_15;
      v5 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v5 <= 0x39)
        break;
LABEL_10:
      if (sub_22F115668(i))
        v3 = i;
      i = sub_22F115B7C(i);
      if (!i)
        return sub_22F115668(v3);
    }
    if (v5 == 24)
      goto LABEL_16;
    if (v5 == 26)
      break;
    if (((1 << v5) & 0x20000000200003CLL) == 0)
      goto LABEL_10;
LABEL_15:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_15;
LABEL_16:
  v3 = i;
  return sub_22F115668(v3);
}

uint64_t sub_22EFBB0DC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;

  v5 = *(_QWORD *)(result + 56);
  if (a2)
  {
    if ((v5 & 4) == 0)
    {
      v6 = result;
      v7 = v5 & 0xFFFFFFFFFFFFFFF8;
      v8 = result;
      if ((*(_DWORD *)(result + 28) & 0x7F) != 0x53)
      {
        v9 = *(_QWORD *)(result + 16);
        v10 = v9 & 0xFFFFFFFFFFFFFFF8;
        if ((v9 & 4) != 0)
          v10 = *(_QWORD *)v10;
        for (i = *(_WORD *)(v10 + 8) & 0x7F; i != 83; i = *(_WORD *)(v10 + 8) & 0x7F)
        {
          v12 = -40;
          if (i > 70)
          {
            if (i == 71)
            {
              v12 = -56;
            }
            else if (i != 81)
            {
              goto LABEL_21;
            }
          }
          else
          {
            if (i > 0x18)
              goto LABEL_20;
            if (i == 16)
              goto LABEL_10;
            if (((1 << i) & 0x1066) != 0)
              goto LABEL_11;
            if (i == 24)
            {
LABEL_10:
              v12 = -48;
            }
            else
            {
LABEL_20:
              if (i != 70)
              {
LABEL_21:
                v14 = i - 52;
                if ((i - 33) >= 5)
                  v15 = -48;
                else
                  v15 = -64;
                if (v14 >= 6)
                  v12 = v15;
                else
                  v12 = -72;
                goto LABEL_11;
              }
              v12 = -64;
            }
          }
LABEL_11:
          v13 = *(_QWORD *)(v10 + v12 + 16);
          v10 = v13 & 0xFFFFFFFFFFFFFFF8;
          if ((v13 & 4) != 0)
            v10 = *(_QWORD *)v10;
        }
        v8 = v10 - 40;
      }
      result = sub_22E3CD3D4(*(_QWORD *)(v8 + 88) + 2032, 48, 3);
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 40) = 0;
      v5 = result | 4;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_DWORD *)(result + 16) = 0;
      *(_QWORD *)(v6 + 56) = result | 4;
      *(_QWORD *)((result & 0xFFFFFFFFFFFFFFF8) + 32) = v7;
    }
    goto LABEL_29;
  }
  if ((v5 & 4) != 0)
  {
LABEL_29:
    v16 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
    *v16 = a2;
    v16[1] = a3;
  }
  return result;
}

_QWORD *sub_22EFBB25C(unint64_t a1, uint64_t a2, const void *a3, unint64_t a4)
{
  uint64_t v7;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int i;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v7 = *(_QWORD *)(a1 + 56);
  if ((v7 & 4) == 0)
  {
    v9 = v7 & 0xFFFFFFFFFFFFFFF8;
    v10 = a1;
    if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
    {
      v11 = *(_QWORD *)(a1 + 16);
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
      if ((v11 & 4) != 0)
        v12 = *(_QWORD *)v12;
      for (i = *(_WORD *)(v12 + 8) & 0x7F; i != 83; i = *(_WORD *)(v12 + 8) & 0x7F)
      {
        v14 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v14 = -56;
            goto LABEL_22;
          }
          if (i == 81)
            goto LABEL_22;
        }
        else
        {
          if (i <= 0x18)
          {
            if (i == 16)
              goto LABEL_9;
            if (((1 << i) & 0x1066) != 0)
              goto LABEL_22;
            if (i == 24)
            {
LABEL_9:
              v14 = -48;
              goto LABEL_22;
            }
          }
          if (i == 70)
          {
            v14 = -64;
            goto LABEL_22;
          }
        }
        v15 = i - 52;
        if ((i - 33) >= 5)
          v16 = -48;
        else
          v16 = -64;
        if (v15 >= 6)
          v14 = v16;
        else
          v14 = -72;
LABEL_22:
        v17 = *(_QWORD *)(v12 + v14 + 16);
        v12 = v17 & 0xFFFFFFFFFFFFFFF8;
        if ((v17 & 4) != 0)
          v12 = *(_QWORD *)v12;
      }
      v10 = v12 - 40;
    }
    v18 = sub_22E3CD3D4(*(_QWORD *)(v10 + 88) + 2032, 48, 3);
    *(_QWORD *)(v18 + 24) = 0;
    *(_QWORD *)(v18 + 40) = 0;
    v7 = v18 | 4;
    *(_QWORD *)v18 = 0;
    *(_QWORD *)(v18 + 8) = 0;
    *(_DWORD *)(v18 + 16) = 0;
    *(_QWORD *)(a1 + 56) = v18 | 4;
    *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 32) = v9;
  }
  return sub_22EFBB3E4((_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8), a2, a3, a4);
}

_QWORD *sub_22EFBB3E4(_QWORD *result, uint64_t a2, const void *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  void *v8;

  v6 = result;
  if (*((_DWORD *)result + 4))
  {
    result[3] = 0;
    *((_DWORD *)result + 4) = 0;
  }
  if (a4)
  {
    if (a4 >> 61)
      v7 = -1;
    else
      v7 = 8 * a4;
    v8 = (void *)sub_22E3CD3D4(a2 + 2032, v7, 3);
    v6[3] = v8;
    *((_DWORD *)v6 + 4) = a4;
    return memmove(v8, a3, 8 * a4);
  }
  return result;
}

uint64_t sub_22EFBB464(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 56);
  if ((v1 & 4) != 0 && (v4 = v1 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v4 + 16)))
    v2 = **(unsigned int ***)(v4 + 24);
  else
    v2 = (unsigned int *)(a1 + 64);
  return *v2;
}

unint64_t sub_22EFBB490(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  unint64_t v8;
  uint64_t v9[2];

  v2 = *(unsigned int *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = (uint64_t *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)v4[4];
  if (v4 && (!*(_QWORD *)(a1 + 40) || sub_22EFBB538(*v4)))
  {
    v9[0] = *v4;
    v9[1] = (uint64_t)(v4 + 1);
    sub_22F116708(v9);
    v2 = sub_22F1167E8(v9);
  }
  v5 = *(_QWORD *)(a1 + 56);
  if ((v5 & 4) != 0 && (v8 = v5 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v8 + 16)))
    v6 = **(unsigned int ***)(v8 + 24);
  else
    v6 = (unsigned int *)(a1 + 64);
  return *v6 | (v2 << 32);
}

BOOL sub_22EFBB538(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;

  while (1)
  {
    v1 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
    v2 = *(_DWORD *)(v1 + 16);
    switch((char)v2)
    {
      case 25:
      case 26:
      case 37:
        return 1;
      case 27:
      case 28:
      case 29:
      case 30:
      case 32:
      case 33:
      case 34:
      case 35:
      case 38:
        return 0;
      case 31:
      case 36:
      case 39:
        goto LABEL_10;
      case 40:
      case 41:
        if ((v2 & 0x100000) == 0)
          goto LABEL_10;
        break;
      default:
        if (v2 == 10)
          goto LABEL_10;
        return v2 - 2 < 4;
    }
    do
    {
      while (1)
      {
        v1 = *(_QWORD *)(*(_QWORD *)(v1 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v1)
          break;
        v3 = *(_DWORD *)(v1 + 16);
        if ((v3 & 0xFE) != 0x28)
          break;
        if ((v3 & 0x100000) == 0)
          goto LABEL_10;
      }
      v1 = sub_22F10CF48(v1);
    }
    while ((*(_DWORD *)(v1 + 16) & 0x100000) != 0);
LABEL_10:
    a1 = *(_QWORD *)(v1 + 32);
  }
}

uint64_t sub_22EFBB5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t result;

  result = sub_22EA41AB8(a1, a2, a4, a6);
  *(_QWORD *)(result + 40) = a7;
  *(_QWORD *)(result + 48) = a8;
  *(_QWORD *)(result + 56) = a9 & 0xFFFFFFFFFFFFFFFBLL;
  *(_DWORD *)(result + 64) = a5;
  *(_QWORD *)(result + 72) = a3 | 2;
  *(_QWORD *)(result + 80) = result;
  *(_QWORD *)result = &off_24FAC3080;
  *(_QWORD *)(result + 88) = 0;
  *(_DWORD *)(result + 96) = 0;
  *(_BYTE *)(result + 96) = a10 & 7;
  return result;
}

uint64_t sub_22EFBB670(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v16;
  uint64_t result;

  v16 = sub_22EFC7430(104, a1, a2, 0);
  result = sub_22EA41AB8(v16, 60, a2, a4);
  *(_QWORD *)(result + 40) = a5;
  *(_QWORD *)(result + 48) = a6;
  *(_QWORD *)(result + 56) = a7 & 0xFFFFFFFFFFFFFFFBLL;
  *(_DWORD *)(result + 64) = a3;
  *(_QWORD *)(result + 72) = a1 | 2;
  *(_QWORD *)(result + 80) = result;
  *(_QWORD *)result = &off_24FAC3080;
  *(_QWORD *)(result + 88) = 0;
  *(_DWORD *)(result + 96) = 0;
  *(_BYTE *)(result + 96) = a8 & 7;
  return result;
}

uint64_t sub_22EFBB718(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_22E3CD3D4(a1 + 2032, 112, 3);
  *(_DWORD *)v4 = 0;
  *(_DWORD *)(v4 + 4) = a2;
  result = sub_22EA41AB8(v4 + 8, 60, 0, 0);
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_DWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 80) = a1 | 2;
  *(_QWORD *)(v4 + 88) = result;
  *(_QWORD *)(v4 + 8) = &off_24FAC3080;
  *(_QWORD *)(v4 + 96) = 0;
  *(_DWORD *)(v4 + 104) = 0;
  return result;
}

void sub_22EFBB794(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_22EFBB7C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int k;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int i;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int j;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int m;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if (sub_22EFBBCD0(v0))
    goto LABEL_2;
  v10 = *(_DWORD *)(v0 + 28) & 0x7F;
  v11 = v0;
  if (v10 != 83)
  {
    v12 = *(_QWORD *)(v0 + 16);
    v13 = v12 & 0xFFFFFFFFFFFFFFF8;
    if ((v12 & 4) != 0)
      v13 = *(_QWORD *)v13;
    for (i = *(_WORD *)(v13 + 8) & 0x7F; i != 83; i = *(_WORD *)(v13 + 8) & 0x7F)
    {
      v15 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v15 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_46;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_45;
        if (i == 16)
          goto LABEL_39;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_52;
        if (i == 24)
        {
LABEL_39:
          v15 = -48;
        }
        else
        {
LABEL_45:
          if (i != 70)
          {
LABEL_46:
            v16 = i - 52;
            if ((i - 33) >= 5)
              v17 = -48;
            else
              v17 = -64;
            if (v16 >= 6)
              v15 = v17;
            else
              v15 = -72;
            goto LABEL_52;
          }
          v15 = -64;
        }
      }
LABEL_52:
      v18 = *(_QWORD *)(v13 + v15 + 16);
      v13 = v18 & 0xFFFFFFFFFFFFFFF8;
      if ((v18 & 4) != 0)
        v13 = *(_QWORD *)v13;
    }
    v11 = v13 - 40;
  }
  v19 = *(_QWORD *)(v11 + 88);
  if ((*(_BYTE *)(*(_QWORD *)(v19 + 2000) + 76) & 4) == 0 || !*(_BYTE *)(*(_QWORD *)(v19 + 15088) + 81))
  {
LABEL_61:
    v20 = v0;
    if (v10 != 83)
    {
      v21 = *(_QWORD *)(v0 + 16);
      v22 = v21 & 0xFFFFFFFFFFFFFFF8;
      if ((v21 & 4) != 0)
        v22 = *(_QWORD *)v22;
      for (j = *(_WORD *)(v22 + 8) & 0x7F; j != 83; j = *(_WORD *)(v22 + 8) & 0x7F)
      {
        v24 = -40;
        if (j > 70)
        {
          if (j == 71)
          {
            v24 = -56;
          }
          else if (j != 81)
          {
            goto LABEL_75;
          }
        }
        else
        {
          if (j > 0x18)
            goto LABEL_74;
          if (j == 16)
            goto LABEL_68;
          if (((1 << j) & 0x1066) != 0)
            goto LABEL_81;
          if (j == 24)
          {
LABEL_68:
            v24 = -48;
          }
          else
          {
LABEL_74:
            if (j != 70)
            {
LABEL_75:
              v25 = j - 52;
              if ((j - 33) >= 5)
                v26 = -48;
              else
                v26 = -64;
              if (v25 >= 6)
                v24 = v26;
              else
                v24 = -72;
              goto LABEL_81;
            }
            v24 = -64;
          }
        }
LABEL_81:
        v27 = *(_QWORD *)(v22 + v24 + 16);
        v22 = v27 & 0xFFFFFFFFFFFFFFF8;
        if ((v27 & 4) != 0)
          v22 = *(_QWORD *)v22;
      }
      v20 = v22 - 40;
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 88) + 2000) + 132) & 4) == 0)
      return 0;
    if (sub_22E3CB5E0(v0))
      return 0;
    v28 = *(_QWORD *)((*(_QWORD *)(v0 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v28 & 8) != 0 && (*(_DWORD *)((v28 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0)
      return 0;
    goto LABEL_2;
  }
  if (!sub_22F25B62C(v0))
  {
    v10 = *(_DWORD *)(v0 + 28) & 0x7F;
    goto LABEL_61;
  }
LABEL_2:
  if (!v0 || (v1 = v0, (*(_DWORD *)(v0 + 28) & 0x7F) != 0x53))
  {
    v2 = *(_QWORD *)(v0 + 16);
    v3 = v2 & 0xFFFFFFFFFFFFFFF8;
    if ((v2 & 4) != 0)
      v3 = *(_QWORD *)v3;
    for (k = *(_WORD *)(v3 + 8) & 0x7F; k != 83; k = *(_WORD *)(v3 + 8) & 0x7F)
    {
      v5 = -40;
      if (k > 70)
      {
        if (k == 71)
        {
          v5 = -56;
        }
        else if (k != 81)
        {
          goto LABEL_17;
        }
      }
      else
      {
        if (k > 0x18)
          goto LABEL_16;
        if (k == 16)
          goto LABEL_10;
        if (((1 << k) & 0x1066) != 0)
          goto LABEL_23;
        if (k == 24)
        {
LABEL_10:
          v5 = -48;
        }
        else
        {
LABEL_16:
          if (k != 70)
          {
LABEL_17:
            v6 = k - 52;
            if ((k - 33) >= 5)
              v7 = -48;
            else
              v7 = -64;
            if (v6 >= 6)
              v5 = v7;
            else
              v5 = -72;
            goto LABEL_23;
          }
          v5 = -64;
        }
      }
LABEL_23:
      v8 = *(_QWORD *)(v3 + v5 + 16);
      v3 = v8 & 0xFFFFFFFFFFFFFFF8;
      if ((v8 & 4) != 0)
        v3 = *(_QWORD *)v3;
    }
    v1 = v3 - 40;
  }
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 88) + 2000) + 192) > 0xB532B7Fu || sub_22F25B62C(v0))
    return 2;
  if (!v0 || (v29 = v0, (*(_DWORD *)(v0 + 28) & 0x7F) != 0x53))
  {
    v30 = *(_QWORD *)(v0 + 16);
    v31 = v30 & 0xFFFFFFFFFFFFFFF8;
    if ((v30 & 4) != 0)
      v31 = *(_QWORD *)v31;
    for (m = *(_WORD *)(v31 + 8) & 0x7F; m != 83; m = *(_WORD *)(v31 + 8) & 0x7F)
    {
      v33 = -40;
      if (m > 70)
      {
        if (m == 71)
        {
          v33 = -56;
          goto LABEL_115;
        }
        if (m == 81)
          goto LABEL_115;
      }
      else
      {
        if (m <= 0x18)
        {
          if (m == 16)
            goto LABEL_102;
          if (((1 << m) & 0x1066) != 0)
            goto LABEL_115;
          if (m == 24)
          {
LABEL_102:
            v33 = -48;
            goto LABEL_115;
          }
        }
        if (m == 70)
        {
          v33 = -64;
          goto LABEL_115;
        }
      }
      v34 = m - 52;
      if ((m - 33) >= 5)
        v35 = -48;
      else
        v35 = -64;
      if (v34 >= 6)
        v33 = v35;
      else
        v33 = -72;
LABEL_115:
      v36 = *(_QWORD *)(v31 + v33 + 16);
      v31 = v36 & 0xFFFFFFFFFFFFFFF8;
      if ((v36 & 4) != 0)
        v31 = *(_QWORD *)v31;
    }
    v29 = v31 - 40;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v29 + 88) + 2000) + 132) & 4) == 0 || sub_22E3CB5E0(v0))
    return 1;
  v37 = *(_QWORD *)((*(_QWORD *)(v0 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v37 & 8) == 0)
    return 2;
  if ((*(_DWORD *)((v37 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0)
    return 1;
  else
    return 2;
}

BOOL sub_22EFBBCD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 497)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

unint64_t sub_22EFBBD30(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;

  v2 = sub_22EFBC5B4(a1);
  if (v2 && (sub_22F0D60E4(v2), (_DWORD)v3) && (_DWORD)v3 != *(_DWORD *)(a1 + 24))
  {
    v7 = *(_QWORD *)(a1 + 56);
    if ((v7 & 4) != 0 && (v8 = v7 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v8 + 16)))
      v9 = **(unsigned int ***)(v8 + 24);
    else
      v9 = (unsigned int *)(a1 + 64);
    v5 = *v9;
  }
  else
  {
    v4 = sub_22EFBB490(a1);
    v5 = v4;
    v3 = HIDWORD(v4);
  }
  return v5 | (v3 << 32);
}

uint64_t sub_22EFBBDAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int i;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  if ((sub_22EFB948C(a1) | 4) != 6)
    return 2;
  if (!a1 || (v2 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 4) != 0)
      v4 = *(_QWORD *)v4;
    for (i = *(_WORD *)(v4 + 8) & 0x7F; i != 83; i = *(_WORD *)(v4 + 8) & 0x7F)
    {
      v6 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v6 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_21;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_20;
        if (i == 16)
          goto LABEL_10;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_11;
        if (i == 24)
        {
LABEL_10:
          v6 = -48;
        }
        else
        {
LABEL_20:
          if (i != 70)
          {
LABEL_21:
            v8 = i - 52;
            if ((i - 33) >= 5)
              v9 = -48;
            else
              v9 = -64;
            if (v8 >= 6)
              v6 = v9;
            else
              v6 = -72;
            goto LABEL_11;
          }
          v6 = -64;
        }
      }
LABEL_11:
      v7 = *(_QWORD *)(v4 + v6 + 16);
      v4 = v7 & 0xFFFFFFFFFFFFFFF8;
      if ((v7 & 4) != 0)
        v4 = *(_QWORD *)v4;
    }
    v2 = v4 - 40;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + 2000) + 1) & 1) == 0)
    return 0;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = v10 & 0xFFFFFFFFFFFFFFF8;
  if ((v10 & 4) != 0)
    v11 = *(_QWORD *)v11;
  if ((*(_WORD *)(v11 + 8) & 0x7Eu) - 34 < 4)
    return 1;
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 16);
  v13 = v12 & 0xFFFFFFFFFFFFFFF8;
  if ((v12 & 4) != 0)
    v13 = *(_QWORD *)(v13 + 8);
  return !sub_22EFCBD94(v13, 1);
}

BOOL sub_22EFBBF50(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) != 0)
    v2 = *(_QWORD *)(v2 + 8);
  return sub_22EFCBD94(v2, 1);
}

uint64_t sub_22EFBBF6C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

uint64_t sub_22EFBBF74(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  int v25;

  if ((*(_DWORD *)(a1 + 28) & 0x7F) == 0x40)
  {
    if ((*(_DWORD *)(a1 + 96) & 0x600u) - 1536 > 0xFFFFFBFF)
      goto LABEL_20;
  }
  else
  {
    if ((*(_DWORD *)(a1 + 96) & 0x100) != 0)
      return 0;
    v4 = *(_QWORD *)(a1 + 16);
    v5 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 4) != 0)
      v5 = *(_QWORD *)v5;
    if ((*(_WORD *)(v5 + 8) & 0x7Eu) - 34 <= 3)
    {
      if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a1 + 24))(a1))
      {
        v6 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1 + 32))(a1);
        if ((*(_DWORD *)(v6 + 28) & 0x7F) == 0x40
          || (*(_BYTE *)(v6 + 97) & 0x20) == 0
          || (v7 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1 + 32))(a1),
              (*(_DWORD *)(v7 + 28) & 0x7F) == 0x40)
          || (*(_BYTE *)(v7 + 97) & 0x80) == 0)
        {
          if (((*(_DWORD *)(a1 + 28) & 0x7F) != 0x40 || (*(_DWORD *)(a1 + 96) & 0x600u) - 1536 <= 0xFFFFFBFF)
            && *(_QWORD *)(a1 + 88) > 7uLL)
          {
            return 2;
          }
          v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80));
          v9 = sub_22EFBC2B0(a1);
          if (v8)
          {
            if (!v9)
              return 2;
          }
          else if (v9 != 2)
          {
            return 2;
          }
          if ((*(_DWORD *)(a1 + 28) & 0x7F) == 0x42)
            return 2;
        }
      }
      if (((*(uint64_t (**)(unint64_t))(*(_QWORD *)a1 + 24))(a1) & 1) != 0
        || (*(_DWORD *)(a1 + 28) & 0x7F) == 0x40
        || (*(_BYTE *)(a1 + 97) & 0x20) == 0)
      {
        return 0;
      }
      return 2;
    }
  }
  if (*(_QWORD *)(a1 + 88) > 7uLL)
    return 2;
LABEL_20:
  if (sub_22EFC91E8(a1))
    return 2;
  if ((*(_BYTE *)(a1 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a1);
    v12 = *(uint64_t **)v11;
    v13 = *(unsigned int *)(v11 + 8);
    v14 = *(uint64_t **)v11;
    if ((_DWORD)v13)
    {
      v15 = 8 * v13;
      v14 = *(uint64_t **)v11;
      while (*(_WORD *)(*v14 + 32) != 306)
      {
        ++v14;
        v15 -= 8;
        if (!v15)
          goto LABEL_31;
      }
    }
    if (v14 != &v12[v13])
    {
      do
      {
        v16 = *v12++;
        v17 = *(unsigned __int16 *)(v16 + 32) | (*(unsigned __int8 *)(v16 + 34) << 16);
      }
      while (*(_WORD *)(v16 + 32) != 306);
      if ((v17 & 0x10000) == 0)
        return 2;
    }
  }
LABEL_31:
  v18 = *(_DWORD *)(a1 + 28) & 0x7F;
  if ((v18 - 67) >= 0xFFFFFFFE)
  {
    v19 = sub_22EFBC2B0(a1);
    v20 = v18 == 66 || v19 == 2;
    if (!v20 && (*(_BYTE *)(a1 + 420) & 8) == 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 96) & 5) == 1)
    return 0;
  v21 = *(_QWORD *)(a1 + 16);
  v22 = (unint64_t *)(v21 & 0xFFFFFFFFFFFFFFF8);
  v23 = v21 & 0xFFFFFFFFFFFFFFF8;
  if ((v21 & 4) != 0)
    v23 = *v22;
  if (v23 && (*(_WORD *)(v23 + 8) & 0x7F) == 0xC && (*(_BYTE *)(v23 + 10) & 1) == 0)
    return 0;
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 2000) + 1) & 1) != 0 || v18 == 64 || v18 == 62)
    return 2;
  v24 = v21 & 0xFFFFFFFFFFFFFFF8;
  if ((v21 & 4) != 0)
    v24 = v22[1];
  v25 = *(_WORD *)(sub_22EFCBB30(v24) + 8) & 0x7F;
  result = 1;
  if (v25 != 16 && v25 != 83)
  {
    if ((v21 & 4) != 0)
      v22 = (unint64_t *)*v22;
    if ((v22[1] & 0x7E) - 34 >= 4)
      return 2;
  }
  return result;
}

BOOL sub_22EFBC270(uint64_t a1)
{
  return (!a1 || (*(_DWORD *)(a1 + 28) & 0x7F) != 0x40 || (*(_DWORD *)(a1 + 96) & 0x600u) - 1536 <= 0xFFFFFBFF)
      && *(_QWORD *)(a1 + 88) > 7uLL;
}

uint64_t sub_22EFBC2B0(unint64_t a1)
{
  int v1;
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int i;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;

  v1 = *(_DWORD *)(a1 + 28) & 0x7F;
  if (a1 && (v1 - 67) >= 0xFFFFFFFE)
    return *(_BYTE *)(a1 + 420) & 7;
  if (v1 == 64)
    return 0;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  v5 = v3 & 0xFFFFFFFFFFFFFFF8;
  if ((v3 & 4) != 0)
    v5 = *(_QWORD *)v4;
  if ((*(_WORD *)(v5 + 8) & 0x7Eu) - 34 > 3)
    return 0;
  if (!a1 || (v6 = a1, v1 != 83))
  {
    if ((v3 & 4) != 0)
      v4 = *(_QWORD *)v4;
    for (i = *(_WORD *)(v4 + 8) & 0x7F; i != 83; i = *(_WORD *)(v4 + 8) & 0x7F)
    {
      v8 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v8 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_24;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_23;
        if (i == 16)
          goto LABEL_17;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_30;
        if (i == 24)
        {
LABEL_17:
          v8 = -48;
        }
        else
        {
LABEL_23:
          if (i != 70)
          {
LABEL_24:
            v9 = i - 52;
            if ((i - 33) >= 5)
              v10 = -48;
            else
              v10 = -64;
            if (v9 >= 6)
              v8 = v10;
            else
              v8 = -72;
            goto LABEL_30;
          }
          v8 = -64;
        }
      }
LABEL_30:
      v11 = *(_QWORD *)(v4 + v8 + 16);
      v4 = v11 & 0xFFFFFFFFFFFFFFF8;
      if ((v11 & 4) != 0)
        v4 = *(_QWORD *)v4;
    }
    v6 = v4 - 40;
  }
  v12 = *(_QWORD *)(v6 + 88);
  v13 = *(_QWORD *)(v12 + 1608);
  v14 = *(unsigned int *)(v12 + 1624);
  if ((_DWORD)v14)
  {
    LODWORD(v15) = (v14 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    v16 = (uint64_t *)(v13 + 16 * v15);
    v17 = *v16;
    if (*v16 == a1)
      goto LABEL_44;
    v18 = 1;
    while (v17 != -4096)
    {
      v19 = v15 + v18++;
      v15 = v19 & (v14 - 1);
      v17 = *(_QWORD *)(v13 + 16 * v15);
      if (v17 == a1)
      {
        v16 = (uint64_t *)(v13 + 16 * v15);
        goto LABEL_44;
      }
    }
  }
  v16 = (uint64_t *)(v13 + 16 * v14);
LABEL_44:
  if (v16 == (uint64_t *)(v13 + 16 * v14))
    return 0;
  result = 0;
  v20 = v16[1];
  if ((v20 & 4) != 0)
  {
    v21 = (_DWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
    if (v21)
      return ((*v21 >> 1) & 3u) + 1;
  }
  return result;
}

uint64_t sub_22EFBC498(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;

  v2 = *(_QWORD *)(a1 + 80);
  if (!v2)
    return 0;
  LODWORD(v4) = 0;
  v5 = 0;
  v6 = *(_QWORD *)(a1 + 80);
  do
  {
    v7 = sub_22EFBBF74(v6, a2);
    if ((int)v4 <= v7)
      v4 = v7;
    else
      v4 = v4;
    if ((_DWORD)v4 == 2)
      break;
    if ((*(_BYTE *)(v6 + 72) & 3) != 0)
    {
      if (v5)
        return v4;
      v5 = 1;
    }
    v8 = sub_22E3CD31C((uint64_t *)(v6 + 72), v6);
    if (v8 == v2)
      break;
    v6 = v8;
  }
  while (v8);
  return v4;
}

unint64_t sub_22EFBC530(unint64_t result, uint64_t *a2)
{
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;

  if (result)
  {
    v3 = result;
    v4 = 0;
    v5 = result;
    while (1)
    {
      result = sub_22EFBC5B4(v5);
      if (result)
      {
        *a2 = v5;
        return result;
      }
      if ((*(_BYTE *)(v5 + 72) & 3) != 0)
      {
        if (v4)
          return 0;
        v4 = 1;
      }
      v6 = sub_22E3CD31C((uint64_t *)(v5 + 72), v5);
      if (v6 == v3)
        break;
      v5 = v6;
      result = 0;
      if (!v5)
        return result;
    }
    return 0;
  }
  return result;
}

unint64_t sub_22EFBC5B4(uint64_t a1)
{
  unint64_t v1;
  unint64_t result;

  if (a1 && (*(_DWORD *)(a1 + 28) & 0x7F) == 0x40 && (*(_DWORD *)(a1 + 96) & 0x600u) - 1536 > 0xFFFFFBFF)
    return 0;
  v1 = *(_QWORD *)(a1 + 88);
  if (v1 < 8)
    return 0;
  result = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) != 0 || !result)
    return *(_QWORD *)(result + 8);
  return result;
}

unint64_t sub_22EFBC608(unint64_t a1)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t i;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (!a1)
    return 0;
  v2 = 0;
  v3 = 0;
  v4 = a1;
  while (2)
  {
    if ((*(_DWORD *)(v4 + 28) & 0x7F) == 0x40)
    {
      if ((*(_DWORD *)(v4 + 96) & 0x600u) - 1536 < 0xFFFFFC00 && *(_QWORD *)(v4 + 88) > 7uLL)
        return v4;
    }
    else
    {
      if (*(_QWORD *)(v4 + 88) > 7uLL)
        return v4;
      v5 = v4;
      if ((*(_DWORD *)(v4 + 28) & 0x7F) == 0x53)
        goto LABEL_33;
    }
    for (i = *(_QWORD *)(v4 + 16); ; i = *(_QWORD *)(v7 + v9 + 16))
    {
      v7 = i & 0xFFFFFFFFFFFFFFF8;
      if ((i & 4) != 0)
        v7 = *(_QWORD *)v7;
      v8 = *(_WORD *)(v7 + 8) & 0x7F;
      if (v8 == 83)
        break;
      v9 = -40;
      if ((*(_WORD *)(v7 + 8) & 0x7Fu) > 0x46)
      {
        if (v8 == 71)
        {
          v9 = -56;
          continue;
        }
        if (v8 != 81)
          goto LABEL_23;
      }
      else
      {
        if (v8 > 0x18)
          goto LABEL_22;
        if (v8 == 16)
          goto LABEL_16;
        if (((1 << v8) & 0x1066) == 0)
        {
          if (v8 == 24)
          {
LABEL_16:
            v9 = -48;
            continue;
          }
LABEL_22:
          if (v8 == 70)
          {
            v9 = -64;
            continue;
          }
LABEL_23:
          v10 = v8 - 52;
          if (v8 - 33 >= 5)
            v11 = -48;
          else
            v11 = -64;
          if (v10 >= 6)
            v9 = v11;
          else
            v9 = -72;
          continue;
        }
      }
    }
    v5 = v7 - 40;
LABEL_33:
    if (sub_22EFBBF74(v4, *(_QWORD *)(v5 + 88)))
    {
      v2 = v4;
      if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x40)
      {
        v12 = *(_QWORD *)(a1 + 16);
        v13 = v12 & 0xFFFFFFFFFFFFFFF8;
        if ((v12 & 4) != 0)
          v13 = *(_QWORD *)v13;
        v2 = v4;
        if ((*(_WORD *)(v13 + 8) & 0x7Eu) - 34 < 4)
          return v4;
      }
    }
    if ((*(_BYTE *)(v4 + 72) & 3) == 0)
    {
LABEL_41:
      v14 = sub_22E3CD31C((uint64_t *)(v4 + 72), v4);
      if (v14 == a1)
        return v2;
      v4 = v14;
      if (!v14)
        return v2;
      continue;
    }
    break;
  }
  if (!v3)
  {
    v3 = 1;
    goto LABEL_41;
  }
  return v2;
}

unint64_t sub_22EFBC7FC(uint64_t a1)
{
  unint64_t result;
  int v3;
  uint64_t v4;
  unint64_t v5;
  __int16 v6;
  uint64_t v7;
  int i;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;

  if (sub_22EFB5ED8(a1))
    return 1;
  v3 = *(_DWORD *)(a1 + 28) & 0x7F;
  if (v3 == 64)
    return 0;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) != 0)
    v5 = *(_QWORD *)v5;
  v6 = *(_WORD *)(v5 + 8);
  if ((v6 & 0x7Eu) - 34 >= 4)
    return 0;
  v7 = a1;
  if (v3 != 83)
  {
    for (i = v6 & 0x7F; i != 83; i = *(_WORD *)(v5 + 8) & 0x7F)
    {
      v9 = -40;
      if (i > 70)
      {
        if (i != 83)
        {
          if (i == 71)
          {
            v9 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_20;
          }
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_19;
        if (i == 16)
          goto LABEL_12;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_26;
        if (i == 24)
        {
LABEL_12:
          v9 = -48;
        }
        else
        {
LABEL_19:
          if (i != 70)
          {
LABEL_20:
            v10 = i - 52;
            if ((i - 33) >= 5)
              v11 = -48;
            else
              v11 = -64;
            if (v10 >= 6)
              v9 = v11;
            else
              v9 = -72;
            goto LABEL_26;
          }
          v9 = -64;
        }
      }
LABEL_26:
      v12 = *(_QWORD *)(v5 + v9 + 16);
      v5 = v12 & 0xFFFFFFFFFFFFFFF8;
      if ((v12 & 4) != 0)
        v5 = *(_QWORD *)v5;
    }
    v7 = v5 - 40;
  }
  v13 = *(_QWORD *)(v7 + 88);
  v14 = *(_QWORD *)(v13 + 1608);
  v15 = *(unsigned int *)(v13 + 1624);
  if ((_DWORD)v15)
  {
    LODWORD(v16) = (v15 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    v17 = (uint64_t *)(v14 + 16 * v16);
    v18 = *v17;
    if (*v17 == a1)
      goto LABEL_40;
    v19 = 1;
    while (v18 != -4096)
    {
      v20 = v16 + v19++;
      v16 = v20 & (v15 - 1);
      v18 = *(_QWORD *)(v14 + 16 * v16);
      if (v18 == a1)
      {
        v17 = (uint64_t *)(v14 + 16 * v16);
        goto LABEL_40;
      }
    }
  }
  v17 = (uint64_t *)(v14 + 16 * v15);
LABEL_40:
  if (v17 == (uint64_t *)(v14 + 16 * v15))
    return 0;
  result = 0;
  v21 = v17[1];
  if ((v21 & 4) != 0)
  {
    v22 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
    if (v22)
    {
      result = *v22 & 0xFFFFFFFFFFFFFFF8;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 24))(result);
    }
  }
  return result;
}

void sub_22EFBC9E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unsigned int v7;

  v4 = *(_QWORD *)(a1 + 88);
  if ((v4 & 4) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v7 = *(_DWORD *)(v5 + 16);
      v6 = (uint64_t *)(v5 + 16);
      if (v7 >= 2)
        sub_22EF53BC0(v6);
    }
  }
  *(_QWORD *)(a1 + 88) = a2 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t sub_22EFBCA2C(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 2000);
  if ((*(_BYTE *)(v4 + 1) & 1) == 0 && (*(_DWORD *)(v4 + 52) & 0x40000000) == 0
    || (*(_DWORD *)(a1 + 28) & 0x7F) == 0x40
    || (sub_22EFBCB70(a1) & 1) != 0)
  {
    return 0;
  }
  v5 = *(_QWORD *)(a1 + 48);
  if ((*(_BYTE *)(v4 + 1) & 2) == 0
    || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
  {
    result = sub_22F10AFE4(v5, a2);
    if (!(_DWORD)result)
      return result;
    v7 = *(_QWORD *)(a1 + 48);
    if ((v7 & 4) == 0)
    {
      v8 = (_BYTE *)(v7 & 0xFFFFFFFFFFFFFFF0);
      if ((v8[8] & 4) == 0)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFFFF0);
        v10 = *(_DWORD *)(v9 + 16);
        if (v9)
          v11 = v10 == 11;
        else
          v11 = 0;
        if (v11)
        {
          if (((*(_DWORD *)(v9 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
            goto LABEL_22;
        }
        else if (v9 && v10 == 44)
        {
          v12 = sub_22F114198(*(_QWORD *)(v9 + 24));
          if ((*(_BYTE *)(v12 + 74) & 1) == 0 && *(_QWORD *)(v12 + 128) <= 7uLL)
          {
LABEL_22:
            if ((*(_BYTE *)(v4 + 1) & 2) != 0 && (*(_DWORD *)(a1 + 28) & 0x7F) != 0x40)
              return *(unsigned __int8 *)(a1 + 97) >> 7;
            return 0;
          }
        }
        else if (v10 != 9)
        {
          goto LABEL_22;
        }
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t sub_22EFBCB70(unint64_t a1)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1 + 56))(a1);
  if (sub_22E6339A4(v2) || sub_22E4E9AA8(v2))
    return 1;
  else
    return sub_22EFCA55C(a1);
}

uint64_t sub_22EFBCBC4(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;

  if (result)
  {
    v3 = result;
    v4 = 0;
    v5 = result;
    while (1)
    {
      v6 = sub_22EFBC5B4(v5);
      if (v6)
        break;
      if ((*(_BYTE *)(v5 + 72) & 3) != 0)
      {
        if (v4)
          return 0;
        v4 = 1;
      }
      v9 = sub_22E3CD31C((uint64_t *)(v5 + 72), v5);
      if (v9 == v3)
        return 0;
      v5 = v9;
      result = 0;
      if (!v5)
        return result;
    }
    if ((*(_BYTE *)(v6 + 2) & 1) != 0
      || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
    {
      return 0;
    }
    else
    {
      result = sub_22EFBCA2C(v5, a2);
      if (!(_DWORD)result)
        return result;
      v7 = *(uint64_t **)(a2 + 2000);
      v8 = *v7;
      if ((*v7 & 0x100) != 0)
      {
        result = sub_22EFBCCBC(v5);
        if (!(_DWORD)result)
          return result;
        v7 = *(uint64_t **)(a2 + 2000);
        v8 = *v7;
      }
      if ((v8 & 0x100) != 0)
      {
        if ((v8 & 0x200) != 0)
          return 1;
      }
      else if ((v8 & 0x200) != 0 || (*((_DWORD *)v7 + 13) & 0x40000000) == 0)
      {
        return 1;
      }
      result = sub_22F3AC1C4(v5, a2);
      if ((_DWORD)result)
        return 1;
    }
  }
  return result;
}

uint64_t sub_22EFBCCBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int i;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unsigned __int8 *v12;

  if (!sub_22E3CB5E0(a1))
  {
    if (!a1 || (v2 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
    {
      v3 = *(_QWORD *)(a1 + 16);
      v4 = v3 & 0xFFFFFFFFFFFFFFF8;
      if ((v3 & 4) != 0)
        v4 = *(_QWORD *)v4;
      for (i = *(_WORD *)(v4 + 8) & 0x7F; i != 83; i = *(_WORD *)(v4 + 8) & 0x7F)
      {
        v6 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v6 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_17;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_16;
          if (i == 16)
            goto LABEL_10;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_23;
          if (i == 24)
          {
LABEL_10:
            v6 = -48;
          }
          else
          {
LABEL_16:
            if (i != 70)
            {
LABEL_17:
              v7 = i - 52;
              if ((i - 33) >= 5)
                v8 = -48;
              else
                v8 = -64;
              if (v7 >= 6)
                v6 = v8;
              else
                v6 = -72;
              goto LABEL_23;
            }
            v6 = -64;
          }
        }
LABEL_23:
        v9 = *(_QWORD *)(v4 + v6 + 16);
        v4 = v9 & 0xFFFFFFFFFFFFFFF8;
        if ((v9 & 4) != 0)
          v4 = *(_QWORD *)v4;
      }
      v2 = v4 - 40;
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + 2000) + 1) & 1) == 0)
      return 1;
  }
  result = 0;
  v11 = *(_QWORD *)(a1 + 88);
  if ((v11 & 4) != 0)
  {
    v12 = (unsigned __int8 *)(v11 & 0xFFFFFFFFFFFFFFF8);
    if (v12)
      return (*v12 >> 2) & 1;
  }
  return result;
}

unint64_t sub_22EFBCE18(unint64_t a1)
{
  uint64_t v2;
  unint64_t result;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int i;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 88);
  if ((v2 & 4) == 0 || (result = v2 & 0xFFFFFFFFFFFFFFF8, (v2 & 0xFFFFFFFFFFFFFFF8) == 0))
  {
    v4 = a1;
    if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = v5 & 0xFFFFFFFFFFFFFFF8;
      if ((v5 & 4) != 0)
        v6 = *(_QWORD *)v6;
      for (i = *(_WORD *)(v6 + 8) & 0x7F; i != 83; i = *(_WORD *)(v6 + 8) & 0x7F)
      {
        v8 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v8 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_21;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_20;
          if (i == 16)
            goto LABEL_10;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_11;
          if (i == 24)
          {
LABEL_10:
            v8 = -48;
          }
          else
          {
LABEL_20:
            if (i != 70)
            {
LABEL_21:
              v10 = i - 52;
              if ((i - 33) >= 5)
                v11 = -48;
              else
                v11 = -64;
              if (v10 >= 6)
                v8 = v11;
              else
                v8 = -72;
              goto LABEL_11;
            }
            v8 = -64;
          }
        }
LABEL_11:
        v9 = *(_QWORD *)(v6 + v8 + 16);
        v6 = v9 & 0xFFFFFFFFFFFFFFF8;
        if ((v9 & 4) != 0)
          v6 = *(_QWORD *)v6;
      }
      v4 = v6 - 40;
    }
    result = sub_22E3CD3D4(*(_QWORD *)(v4 + 88) + 2032, 88, 3);
    *(_BYTE *)result &= 0xC0u;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 8) = *(_QWORD *)(a1 + 88) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a1 + 88) = result | 4;
  }
  return result;
}

_DWORD *sub_22EFBCF80(unint64_t a1)
{
  int v2;
  _DWORD *v3;
  char *v5[2];
  _QWORD v6[33];

  v6[32] = *MEMORY[0x24BDAC8D0];
  v5[0] = (char *)v6;
  v5[1] = (char *)0x800000000;
  v2 = sub_22EFBCCBC(a1);
  v3 = sub_22EFBD00C(a1, (uint64_t)v5, v2);
  sub_22E89277C(v5);
  return v3;
}

_DWORD *sub_22EFBD00C(unint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  _DWORD *v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int i;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;

  v6 = sub_22EFBCE18(a1);
  v7 = v6;
  v8 = *(_BYTE *)v6;
  if ((*(_BYTE *)v6 & 1) == 0)
  {
    if ((*(_BYTE *)v6 & 2) != 0)
      return 0;
    v11 = *(_QWORD *)(v6 + 8);
    *(_BYTE *)v7 = v8 | 2;
    if (!a1 || (v12 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
    {
      v13 = *(_QWORD *)(a1 + 16);
      v14 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0)
        v14 = *(_QWORD *)v14;
      for (i = *(_WORD *)(v14 + 8) & 0x7F; i != 83; i = *(_WORD *)(v14 + 8) & 0x7F)
      {
        v16 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v16 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_26;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_25;
          if (i == 16)
            goto LABEL_15;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_16;
          if (i == 24)
          {
LABEL_15:
            v16 = -48;
          }
          else
          {
LABEL_25:
            if (i != 70)
            {
LABEL_26:
              v18 = i - 52;
              if ((i - 33) >= 5)
                v19 = -48;
              else
                v19 = -64;
              if (v18 >= 6)
                v16 = v19;
              else
                v16 = -72;
              goto LABEL_16;
            }
            v16 = -64;
          }
        }
LABEL_16:
        v17 = *(_QWORD *)(v14 + v16 + 16);
        v14 = v17 & 0xFFFFFFFFFFFFFFF8;
        if ((v17 & 4) != 0)
          v14 = *(_QWORD *)v14;
      }
      v12 = v14 - 40;
    }
    v20 = *(_QWORD *)(v12 + 88);
    v9 = (_DWORD *)(v7 + 16);
    v21 = sub_22F007158(v11, v7 + 16, v20, a1, a2, a3);
    if (a3 && (*(_BYTE *)(*(_QWORD *)(v20 + 2000) + 1) & 2) != 0)
    {
      if (*(_DWORD *)(a2 + 8))
        v22 = 0;
      else
        v22 = v21;
      if ((v22 & 1) == 0)
      {
LABEL_39:
        if (*v9 >= 2u)
          sub_22EF53BC0((uint64_t *)(v7 + 16));
        *v9 = 0;
        v9 = 0;
LABEL_42:
        *(_BYTE *)v7 = *(_BYTE *)v7 & 0xFC | 1;
        return v9;
      }
    }
    else if ((v21 & 1) == 0)
    {
      goto LABEL_39;
    }
    if (sub_22EF53D60((unsigned int *)(v7 + 16)))
      sub_22EF5908C(v20, (uint64_t)sub_22E7B7544, v7 + 16);
    goto LABEL_42;
  }
  if (*(_DWORD *)(v6 + 16))
    return (_DWORD *)(v6 + 16);
  else
    return 0;
}

uint64_t sub_22EFBD218(unint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _DWORD *v5;
  int v6;
  unsigned int v7;

  v4 = (_BYTE *)sub_22EFBCE18(a1);
  v5 = sub_22EFBD00C(a1, a2, 1);
  v6 = 4 * (*(_DWORD *)(a2 + 8) == 0);
  if (!v5)
    v6 = 0;
  if (v6)
    v7 = v6 | *v4 & 0xFB;
  else
    v7 = v6 & 0xFFFFFFFE | *v4 & 0xFA;
  *v4 = v7;
  return (v7 >> 2) & 1;
}

BOOL sub_22EFBD290(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) == 36;
}

uint64_t sub_22EFBD2AC(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v1 + 17) & 4) != 0
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 14)
  {
    return 1;
  }
  v3 = sub_22E47E5E0(a1);
  while (1)
  {
    v4 = v3;
    if (v3 < v2)
    {
      while (1)
      {
        v9 = v2;
        v10 = (uint64_t *)v3;
        if (*(_WORD *)(*(_QWORD *)v4 + 32) == 98)
          break;
        result = 0;
        v4 += 8;
        if (v4 == v2)
          return result;
      }
      v8 = v2;
    }
    else
    {
      if (v3 == v2)
        return 0;
      v8 = v2;
      while (1)
      {
        v9 = v2;
        v10 = (uint64_t *)v3;
        if (*(_WORD *)(*(_QWORD *)v8 + 32) == 98)
          break;
        result = 0;
        v8 += 8;
        if (v8 == v3)
          return result;
      }
      v4 = v3;
    }
    if (v4 == v8)
      break;
    do
      v6 = *v10++;
    while (*(_WORD *)(v6 + 32) != 98);
    v7 = sub_22F37CC2C(v6);
    result = 1;
    v2 = v9;
    v3 = (unint64_t)v10;
    if (v7)
      return result;
  }
  return 0;
}

unint64_t sub_22EFBD3B0(unint64_t a1)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int i;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int k;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int m;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  int n;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  int ii;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int jj;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  int v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  int j;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  int v137;
  int v138;
  uint64_t v139;
  _QWORD *v140;

  v2 = *(_DWORD *)(a1 + 28) & 0x7F;
  v3 = a1;
  if (v2 == 64)
    goto LABEL_168;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  v6 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) != 0)
    v6 = *(_QWORD *)v5;
  if ((*(_WORD *)(v6 + 8) & 0x7Eu) - 34 > 3)
    goto LABEL_5;
  v11 = a1;
  if (v2 != 83)
  {
    v12 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 4) != 0)
      v12 = *(_QWORD *)v5;
    for (i = *(_WORD *)(v12 + 8) & 0x7F; i != 83; i = *(_WORD *)(v12 + 8) & 0x7F)
    {
      v14 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v14 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_28;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_27;
        if (i == 16)
          goto LABEL_21;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_34;
        if (i == 24)
        {
LABEL_21:
          v14 = -48;
        }
        else
        {
LABEL_27:
          if (i != 70)
          {
LABEL_28:
            v15 = i - 52;
            if ((i - 33) >= 5)
              v16 = -48;
            else
              v16 = -64;
            if (v15 >= 6)
              v14 = v16;
            else
              v14 = -72;
            goto LABEL_34;
          }
          v14 = -64;
        }
      }
LABEL_34:
      v17 = *(_QWORD *)(v12 + v14 + 16);
      v12 = v17 & 0xFFFFFFFFFFFFFFF8;
      if ((v17 & 4) != 0)
        v12 = *(_QWORD *)v12;
    }
    v11 = v12 - 40;
  }
  v18 = *(_QWORD *)(v11 + 88);
  v19 = *(_QWORD *)(v18 + 1608);
  v20 = *(unsigned int *)(v18 + 1624);
  v21 = a1 >> 4;
  if (!(_DWORD)v20)
    goto LABEL_119;
  LODWORD(v22) = (v20 - 1) & (v21 ^ (a1 >> 9));
  v23 = (uint64_t *)(v19 + 16 * v22);
  v24 = *v23;
  if (*v23 != a1)
  {
    v25 = 1;
    while (v24 != -4096)
    {
      v26 = v22 + v25++;
      v22 = v26 & (v20 - 1);
      v24 = *(_QWORD *)(v19 + 16 * v22);
      if (v24 == a1)
      {
        v23 = (uint64_t *)(v19 + 16 * v22);
        goto LABEL_120;
      }
    }
LABEL_119:
    v23 = (uint64_t *)(v19 + 16 * v20);
  }
LABEL_120:
  if (v23 == (uint64_t *)(v19 + 16 * v20)
    || (v54 = v23[1], (v54 & 4) == 0)
    || (v55 = (_DWORD *)(v54 & 0xFFFFFFFFFFFFFFF8)) == 0)
  {
LABEL_5:
    v3 = a1;
    goto LABEL_6;
  }
  v3 = a1;
  if (((((*v55 >> 1) & 3) + 1) & 0xFFFFFFFD) != 0)
  {
    v56 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 4) != 0)
      v56 = *(_QWORD *)v5;
    if ((*(_WORD *)(v56 + 8) & 0x7Eu) - 34 > 3)
      goto LABEL_127;
    v125 = a1;
    if (v2 != 83)
    {
      if ((v4 & 4) != 0)
        v5 = *(_QWORD *)v5;
      for (j = *(_WORD *)(v5 + 8) & 0x7F; j != 83; j = *(_WORD *)(v5 + 8) & 0x7F)
      {
        v127 = -40;
        if (j > 70)
        {
          if (j == 71)
          {
            v127 = -56;
          }
          else if (j != 81)
          {
            goto LABEL_314;
          }
        }
        else
        {
          if (j > 0x18)
            goto LABEL_313;
          if (j == 16)
            goto LABEL_307;
          if (((1 << j) & 0x1066) != 0)
            goto LABEL_320;
          if (j == 24)
          {
LABEL_307:
            v127 = -48;
          }
          else
          {
LABEL_313:
            if (j != 70)
            {
LABEL_314:
              v128 = j - 52;
              if ((j - 33) >= 5)
                v129 = -48;
              else
                v129 = -64;
              if (v128 >= 6)
                v127 = v129;
              else
                v127 = -72;
              goto LABEL_320;
            }
            v127 = -64;
          }
        }
LABEL_320:
        v130 = *(_QWORD *)(v5 + v127 + 16);
        v5 = v130 & 0xFFFFFFFFFFFFFFF8;
        if ((v130 & 4) != 0)
          v5 = *(_QWORD *)v5;
      }
      v125 = v5 - 40;
    }
    v131 = *(_QWORD *)(v125 + 88);
    v132 = *(_QWORD *)(v131 + 1608);
    v133 = *(unsigned int *)(v131 + 1624);
    if ((_DWORD)v133)
    {
      LODWORD(v134) = (v133 - 1) & (v21 ^ (a1 >> 9));
      v135 = (uint64_t *)(v132 + 16 * v134);
      v136 = *v135;
      if (*v135 != a1)
      {
        v137 = 1;
        do
        {
          if (v136 == -4096)
            goto LABEL_333;
          v138 = v134 + v137++;
          v134 = v138 & (v133 - 1);
          v136 = *(_QWORD *)(v132 + 16 * v134);
        }
        while (v136 != a1);
        v135 = (uint64_t *)(v132 + 16 * v134);
      }
    }
    else
    {
LABEL_333:
      v135 = (uint64_t *)(v132 + 16 * v133);
    }
    if (v135 == (uint64_t *)(v132 + 16 * v133))
    {
LABEL_127:
      v57 = 0;
      goto LABEL_128;
    }
    v57 = 0;
    v139 = v135[1];
    if ((v139 & 4) != 0)
    {
      v140 = (_QWORD *)(v139 & 0xFFFFFFFFFFFFFFF8);
      if (v140)
        v57 = *v140 & 0xFFFFFFFFFFFFFFF8;
    }
    while (1)
    {
LABEL_128:
      v3 = v57;
      v2 = *(_DWORD *)(v57 + 28) & 0x7F;
      if (v2 == 64)
        goto LABEL_168;
      v58 = *(_QWORD *)(v57 + 16);
      v59 = v58 & 0xFFFFFFFFFFFFFFF8;
      v60 = v58 & 0xFFFFFFFFFFFFFFF8;
      if ((v58 & 4) != 0)
        v60 = *(_QWORD *)v59;
      if ((*(_WORD *)(v60 + 8) & 0x7Eu) - 34 > 3)
        break;
      v61 = v3;
      if (v2 != 83)
      {
        if ((v58 & 4) != 0)
          goto LABEL_152;
        while (1)
        {
          v62 = *(_WORD *)(v59 + 8) & 0x7F;
          if (v62 == 83)
          {
            v61 = v59 - 40;
            break;
          }
          v63 = -40;
          if ((*(_WORD *)(v59 + 8) & 0x7Fu) > 0x46)
          {
            if (v62 == 71)
            {
              v63 = -56;
            }
            else if (v62 != 81)
            {
              goto LABEL_145;
            }
          }
          else
          {
            if (v62 > 0x18)
              goto LABEL_144;
            if (v62 == 16)
              goto LABEL_138;
            if (((1 << v62) & 0x1066) != 0)
              goto LABEL_151;
            if (v62 == 24)
            {
LABEL_138:
              v63 = -48;
            }
            else
            {
LABEL_144:
              if (v62 != 70)
              {
LABEL_145:
                v64 = v62 - 52;
                if (v62 - 33 >= 5)
                  v65 = -48;
                else
                  v65 = -64;
                if (v64 >= 6)
                  v63 = v65;
                else
                  v63 = -72;
                goto LABEL_151;
              }
              v63 = -64;
            }
          }
LABEL_151:
          v66 = *(_QWORD *)(v59 + v63 + 16);
          v59 = v66 & 0xFFFFFFFFFFFFFFF8;
          if ((v66 & 4) != 0)
LABEL_152:
            v59 = *(_QWORD *)v59;
        }
      }
      v67 = *(_QWORD *)(v61 + 88);
      v68 = *(_QWORD *)(v67 + 1608);
      v69 = *(unsigned int *)(v67 + 1624);
      if ((_DWORD)v69)
      {
        LODWORD(v70) = (v69 - 1) & ((v3 >> 4) ^ (v3 >> 9));
        v71 = (uint64_t *)(v68 + 16 * v70);
        v72 = *v71;
        if (*v71 == v3)
          goto LABEL_163;
        v73 = 1;
        while (v72 != -4096)
        {
          v74 = v70 + v73++;
          v70 = v74 & (v69 - 1);
          v72 = *(_QWORD *)(v68 + 16 * v70);
          if (v72 == v3)
          {
            v71 = (uint64_t *)(v68 + 16 * v70);
            goto LABEL_163;
          }
        }
      }
      v71 = (uint64_t *)(v68 + 16 * v69);
LABEL_163:
      if (v71 != (uint64_t *)(v68 + 16 * v69))
      {
        v75 = v71[1];
        if ((v75 & 4) != 0)
        {
          v76 = (_QWORD *)(v75 & 0xFFFFFFFFFFFFFFF8);
          if (v76)
          {
            v57 = *v76 & 0xFFFFFFFFFFFFFFF8;
            if (v57)
              continue;
          }
        }
      }
      break;
    }
  }
LABEL_6:
  if ((v2 - 67) >= 0xFFFFFFFE)
  {
    if ((sub_22EFBC2B0(v3) & 5) == 0)
      goto LABEL_168;
    if ((*(_BYTE *)(v3 + 420) & 5) != 0)
    {
      v9 = *(_QWORD *)(v3 + 112);
      v10 = v9 & 0xFFFFFFFFFFFFFFF8;
      if ((v9 & 4) != 0 && v10)
        v10 = *(_QWORD *)v10 | 4;
    }
    else
    {
      v10 = 0;
    }
    v27 = v10 & 0xFFFFFFFFFFFFFFF8;
    if ((v10 & 4) == 0 && v27)
    {
      do
      {
        v28 = v27;
        if ((*(_BYTE *)sub_22EFE9368(v27) & 4) != 0)
          break;
        v27 = *(_QWORD *)sub_22EFE9368(v28) & 0xFFFFFFFFFFFFFFF8;
      }
      while (v27);
      v29 = *(_QWORD *)(v28 + 48);
      if (!v29 || (v30 = *(_QWORD *)(v28 + 48), (*(_DWORD *)(v29 + 28) & 0x7F) != 0x53))
      {
        v31 = *(_QWORD *)(v29 + 16);
        v32 = v31 & 0xFFFFFFFFFFFFFFF8;
        if ((v31 & 4) != 0)
          v32 = *(_QWORD *)v32;
        for (k = *(_WORD *)(v32 + 8) & 0x7F; k != 83; k = *(_WORD *)(v32 + 8) & 0x7F)
        {
          v34 = -40;
          if (k > 70)
          {
            if (k == 71)
            {
              v34 = -56;
            }
            else if (k != 81)
            {
              goto LABEL_67;
            }
          }
          else
          {
            if (k > 0x18)
              goto LABEL_66;
            if (k == 16)
              goto LABEL_60;
            if (((1 << k) & 0x1066) != 0)
              goto LABEL_73;
            if (k == 24)
            {
LABEL_60:
              v34 = -48;
            }
            else
            {
LABEL_66:
              if (k != 70)
              {
LABEL_67:
                v35 = k - 52;
                if ((k - 33) >= 5)
                  v36 = -48;
                else
                  v36 = -64;
                if (v35 >= 6)
                  v34 = v36;
                else
                  v34 = -72;
                goto LABEL_73;
              }
              v34 = -64;
            }
          }
LABEL_73:
          v37 = *(_QWORD *)(v32 + v34 + 16);
          v32 = v37 & 0xFFFFFFFFFFFFFFF8;
          if ((v37 & 4) != 0)
            v32 = *(_QWORD *)v32;
        }
        v30 = v32 - 40;
      }
      v48 = *(_QWORD *)(v29 + 80);
      if (v48)
      {
        v49 = 0;
        v50 = *(_QWORD *)(v30 + 88);
        v51 = *(_QWORD *)(v29 + 80);
        while (sub_22EFBBF74(v51, v50) != 2)
        {
          if ((*(_BYTE *)(v51 + 72) & 3) != 0)
          {
            if (v49)
              goto LABEL_299;
            v49 = 1;
          }
          v52 = sub_22E3CD31C((uint64_t *)(v51 + 72), v51);
          v53 = 0;
          if (v52 != v48)
          {
            v51 = v52;
            if (v52)
              continue;
          }
          goto LABEL_296;
        }
        goto LABEL_295;
      }
LABEL_299:
      v53 = 0;
LABEL_296:
      if (v53)
        return v53;
      else
        return v29;
    }
    if (!v27 || (v10 & 4) == 0)
      goto LABEL_168;
    do
    {
      v29 = v27;
      v38 = *(_QWORD *)(v27 + 80);
      v39 = *(_QWORD *)(v38 + 440);
      if ((v39 & 4) != 0)
        break;
      v27 = v39 & 0xFFFFFFFFFFFFFFF8;
    }
    while (v27);
    v40 = v29;
    if ((*(_DWORD *)(v29 + 28) & 0x7F) != 0x53)
    {
      v41 = *(_QWORD *)(v29 + 16);
      v42 = v41 & 0xFFFFFFFFFFFFFFF8;
      if ((v41 & 4) != 0)
        v42 = *(_QWORD *)v42;
      for (m = *(_WORD *)(v42 + 8) & 0x7F; m != 83; m = *(_WORD *)(v42 + 8) & 0x7F)
      {
        v44 = -40;
        if (m > 70)
        {
          if (m == 71)
          {
            v44 = -56;
          }
          else if (m != 81)
          {
            goto LABEL_97;
          }
        }
        else
        {
          if (m > 0x18)
            goto LABEL_96;
          if (m == 16)
            goto LABEL_90;
          if (((1 << m) & 0x1066) != 0)
            goto LABEL_103;
          if (m == 24)
          {
LABEL_90:
            v44 = -48;
          }
          else
          {
LABEL_96:
            if (m != 70)
            {
LABEL_97:
              v45 = m - 52;
              if ((m - 33) >= 5)
                v46 = -48;
              else
                v46 = -64;
              if (v45 >= 6)
                v44 = v46;
              else
                v44 = -72;
              goto LABEL_103;
            }
            v44 = -64;
          }
        }
LABEL_103:
        v47 = *(_QWORD *)(v42 + v44 + 16);
        v42 = v47 & 0xFFFFFFFFFFFFFFF8;
        if ((v47 & 4) != 0)
          v42 = *(_QWORD *)v42;
      }
      v40 = v42 - 40;
    }
    v122 = 0;
    v123 = *(_QWORD *)(v40 + 88);
    v51 = v38;
    while (sub_22EFBBF74(v51, v123) != 2)
    {
      if ((*(_BYTE *)(v51 + 72) & 3) != 0)
      {
        if (v122)
          goto LABEL_299;
        v122 = 1;
      }
      v124 = sub_22E3CD31C((uint64_t *)(v51 + 72), v51);
      v53 = 0;
      if (v124 != v38)
      {
        v51 = v124;
        if (v124)
          continue;
      }
      goto LABEL_296;
    }
    goto LABEL_295;
  }
  if (v2 == 83)
  {
    v7 = 0;
    v8 = v3;
    goto LABEL_194;
  }
LABEL_168:
  v77 = *(_QWORD *)(v3 + 16);
  v78 = v77 & 0xFFFFFFFFFFFFFFF8;
  if ((v77 & 4) != 0)
    v78 = *(_QWORD *)v78;
  for (n = *(_WORD *)(v78 + 8) & 0x7F; n != 83; n = *(_WORD *)(v78 + 8) & 0x7F)
  {
    v80 = -40;
    if (n > 70)
    {
      if (n == 71)
      {
        v80 = -56;
      }
      else if (n != 81)
      {
        goto LABEL_181;
      }
    }
    else
    {
      if (n > 0x18)
        goto LABEL_180;
      if (n == 16)
        goto LABEL_174;
      if (((1 << n) & 0x1066) != 0)
        goto LABEL_187;
      if (n == 24)
      {
LABEL_174:
        v80 = -48;
      }
      else
      {
LABEL_180:
        if (n != 70)
        {
LABEL_181:
          v81 = n - 52;
          if ((n - 33) >= 5)
            v82 = -48;
          else
            v82 = -64;
          if (v81 >= 6)
            v80 = v82;
          else
            v80 = -72;
          goto LABEL_187;
        }
        v80 = -64;
      }
    }
LABEL_187:
    v83 = *(_QWORD *)(v78 + v80 + 16);
    v78 = v83 & 0xFFFFFFFFFFFFFFF8;
    if ((v83 & 4) != 0)
      v78 = *(_QWORD *)v78;
  }
  v8 = v78 - 40;
  v7 = 1;
LABEL_194:
  v84 = *(_QWORD *)(v8 + 88);
  v85 = *(_QWORD *)(v84 + 1608);
  v86 = *(unsigned int *)(v84 + 1624);
  if ((_DWORD)v86)
  {
    LODWORD(v87) = (v86 - 1) & ((v3 >> 4) ^ (v3 >> 9));
    v88 = (uint64_t *)(v85 + 16 * v87);
    v89 = *v88;
    if (*v88 == v3)
      goto LABEL_201;
    v90 = 1;
    while (v89 != -4096)
    {
      v91 = v87 + v90++;
      v87 = v91 & (v86 - 1);
      v89 = *(_QWORD *)(v85 + 16 * v87);
      if (v89 == v3)
      {
        v88 = (uint64_t *)(v85 + 16 * v87);
        goto LABEL_201;
      }
    }
  }
  v88 = (uint64_t *)(v85 + 16 * v86);
LABEL_201:
  if (v88 == (uint64_t *)(v85 + 16 * v86))
  {
    v92 = 0;
  }
  else
  {
    v92 = v88[1];
    if ((v92 & 4) != 0)
      goto LABEL_234;
  }
  v93 = v92 & 0xFFFFFFFFFFFFFFF8;
  if (v93)
  {
    do
    {
      v94 = v93;
      if ((*(_BYTE *)sub_22EFE9368(v93) & 4) != 0)
        break;
      v93 = *(_QWORD *)sub_22EFE9368(v94) & 0xFFFFFFFFFFFFFFF8;
    }
    while (v93);
    v29 = *(_QWORD *)(v94 + 48);
    if (!v29 || (v95 = *(_QWORD *)(v94 + 48), (*(_DWORD *)(v29 + 28) & 0x7F) != 0x53))
    {
      v96 = *(_QWORD *)(v29 + 16);
      v97 = v96 & 0xFFFFFFFFFFFFFFF8;
      if ((v96 & 4) != 0)
        v97 = *(_QWORD *)v97;
      for (ii = *(_WORD *)(v97 + 8) & 0x7F; ii != 83; ii = *(_WORD *)(v97 + 8) & 0x7F)
      {
        v99 = -40;
        if (ii > 70)
        {
          if (ii == 71)
          {
            v99 = -56;
            goto LABEL_228;
          }
          if (ii == 81)
            goto LABEL_228;
        }
        else
        {
          if (ii <= 0x18)
          {
            if (ii == 16)
              goto LABEL_215;
            if (((1 << ii) & 0x1066) != 0)
              goto LABEL_228;
            if (ii == 24)
            {
LABEL_215:
              v99 = -48;
              goto LABEL_228;
            }
          }
          if (ii == 70)
          {
            v99 = -64;
            goto LABEL_228;
          }
        }
        v100 = ii - 52;
        if ((ii - 33) >= 5)
          v101 = -48;
        else
          v101 = -64;
        if (v100 >= 6)
          v99 = v101;
        else
          v99 = -72;
LABEL_228:
        v102 = *(_QWORD *)(v97 + v99 + 16);
        v97 = v102 & 0xFFFFFFFFFFFFFFF8;
        if ((v102 & 4) != 0)
          v97 = *(_QWORD *)v97;
      }
      v95 = v97 - 40;
    }
    v111 = *(_QWORD *)(v29 + 80);
    if (v111)
    {
      v112 = 0;
      v113 = *(_QWORD *)(v95 + 88);
      v51 = *(_QWORD *)(v29 + 80);
      while (sub_22EFBBF74(v51, v113) != 2)
      {
        if ((*(_BYTE *)(v51 + 72) & 3) != 0)
        {
          if (v112)
            goto LABEL_299;
          v112 = 1;
        }
        v114 = sub_22E3CD31C((uint64_t *)(v51 + 72), v51);
        v53 = 0;
        if (v114 != v111)
        {
          v51 = v114;
          if (v114)
            continue;
        }
        goto LABEL_296;
      }
LABEL_295:
      v53 = v51;
      goto LABEL_296;
    }
    goto LABEL_299;
  }
LABEL_234:
  if (v3 == a1)
    return 0;
  v103 = v3;
  if (v7)
  {
    v104 = *(_QWORD *)(v3 + 16);
    v105 = v104 & 0xFFFFFFFFFFFFFFF8;
    if ((v104 & 4) != 0)
      v105 = *(_QWORD *)v105;
    for (jj = *(_WORD *)(v105 + 8) & 0x7F; jj != 83; jj = *(_WORD *)(v105 + 8) & 0x7F)
    {
      v107 = -40;
      if (jj > 70)
      {
        if (jj == 71)
        {
          v107 = -56;
        }
        else if (jj != 81)
        {
          goto LABEL_249;
        }
      }
      else
      {
        if (jj > 0x18)
          goto LABEL_248;
        if (jj == 16)
          goto LABEL_242;
        if (((1 << jj) & 0x1066) != 0)
          goto LABEL_255;
        if (jj == 24)
        {
LABEL_242:
          v107 = -48;
        }
        else
        {
LABEL_248:
          if (jj != 70)
          {
LABEL_249:
            v108 = jj - 52;
            if ((jj - 33) >= 5)
              v109 = -48;
            else
              v109 = -64;
            if (v108 >= 6)
              v107 = v109;
            else
              v107 = -72;
            goto LABEL_255;
          }
          v107 = -64;
        }
      }
LABEL_255:
      v110 = *(_QWORD *)(v105 + v107 + 16);
      v105 = v110 & 0xFFFFFFFFFFFFFFF8;
      if ((v110 & 4) != 0)
        v105 = *(_QWORD *)v105;
    }
    v103 = v105 - 40;
  }
  v115 = *(_QWORD *)(v3 + 80);
  if (v115)
  {
    v116 = 0;
    v117 = *(_QWORD *)(v103 + 88);
    v118 = *(_QWORD *)(v3 + 80);
    while (sub_22EFBBF74(v118, v117) != 2)
    {
      if ((*(_BYTE *)(v118 + 72) & 3) != 0)
      {
        if (v116)
          goto LABEL_338;
        v116 = 1;
      }
      v119 = sub_22E3CD31C((uint64_t *)(v118 + 72), v118);
      v120 = 0;
      if (v119 != v115)
      {
        v118 = v119;
        if (v119)
          continue;
      }
      goto LABEL_282;
    }
    v120 = v118;
  }
  else
  {
LABEL_338:
    v120 = 0;
  }
LABEL_282:
  if (v120)
    return v120;
  else
    return v3;
}

unint64_t sub_22EFBE104(unint64_t a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  int i;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;

  v1 = *(_DWORD *)(a1 + 28) & 0x7F;
  if (v1 == 64)
    return 0;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 & 0xFFFFFFFFFFFFFFF8;
  v4 = v2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 4) != 0)
    v4 = *(_QWORD *)v3;
  if ((*(_WORD *)(v4 + 8) & 0x7Eu) - 34 > 3)
    return 0;
  v6 = a1;
  if (v1 != 83)
  {
    if ((v2 & 4) != 0)
      v3 = *(_QWORD *)v3;
    for (i = *(_WORD *)(v3 + 8) & 0x7F; i != 83; i = *(_WORD *)(v3 + 8) & 0x7F)
    {
      v8 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v8 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_24;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_23;
        if (i == 16)
          goto LABEL_13;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_14;
        if (i == 24)
        {
LABEL_13:
          v8 = -48;
        }
        else
        {
LABEL_23:
          if (i != 70)
          {
LABEL_24:
            v10 = i - 52;
            if ((i - 33) >= 5)
              v11 = -48;
            else
              v11 = -64;
            if (v10 >= 6)
              v8 = v11;
            else
              v8 = -72;
            goto LABEL_14;
          }
          v8 = -64;
        }
      }
LABEL_14:
      v9 = *(_QWORD *)(v3 + v8 + 16);
      v3 = v9 & 0xFFFFFFFFFFFFFFF8;
      if ((v9 & 4) != 0)
        v3 = *(_QWORD *)v3;
    }
    v6 = v3 - 40;
  }
  v12 = *(_QWORD *)(v6 + 88);
  v13 = *(_QWORD *)(v12 + 1608);
  v14 = *(unsigned int *)(v12 + 1624);
  if (!(_DWORD)v14)
    goto LABEL_37;
  LODWORD(v15) = (v14 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  v16 = (uint64_t *)(v13 + 16 * v15);
  v17 = *v16;
  if (*v16 != a1)
  {
    v18 = 1;
    while (v17 != -4096)
    {
      v19 = v15 + v18++;
      v15 = v19 & (v14 - 1);
      v17 = *(_QWORD *)(v13 + 16 * v15);
      if (v17 == a1)
      {
        v16 = (uint64_t *)(v13 + 16 * v15);
        goto LABEL_38;
      }
    }
LABEL_37:
    v16 = (uint64_t *)(v13 + 16 * v14);
  }
LABEL_38:
  if (v16 == (uint64_t *)(v13 + 16 * v14))
    v20 = 0;
  else
    v20 = v16[1];
  return v20 & (v20 << 61 >> 63) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t sub_22EFBE2C4(unint64_t a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  int i;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;

  v1 = *(_DWORD *)(a1 + 28) & 0x7F;
  if (v1 == 64)
    return 0;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 & 0xFFFFFFFFFFFFFFF8;
  v4 = v2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 4) != 0)
    v4 = *(_QWORD *)v3;
  if ((*(_WORD *)(v4 + 8) & 0x7Eu) - 34 > 3)
    goto LABEL_5;
  v6 = a1;
  if (v1 != 83)
  {
    if ((v2 & 4) != 0)
      v3 = *(_QWORD *)v3;
    for (i = *(_WORD *)(v3 + 8) & 0x7F; i != 83; i = *(_WORD *)(v3 + 8) & 0x7F)
    {
      v8 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v8 = -56;
          goto LABEL_28;
        }
        if (i == 81)
          goto LABEL_28;
      }
      else
      {
        if (i <= 0x18)
        {
          if (i == 16)
            goto LABEL_15;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_28;
          if (i == 24)
          {
LABEL_15:
            v8 = -48;
            goto LABEL_28;
          }
        }
        if (i == 70)
        {
          v8 = -64;
          goto LABEL_28;
        }
      }
      v9 = i - 52;
      if ((i - 33) >= 5)
        v10 = -48;
      else
        v10 = -64;
      if (v9 >= 6)
        v8 = v10;
      else
        v8 = -72;
LABEL_28:
      v11 = *(_QWORD *)(v3 + v8 + 16);
      v3 = v11 & 0xFFFFFFFFFFFFFFF8;
      if ((v11 & 4) != 0)
        v3 = *(_QWORD *)v3;
    }
    v6 = v3 - 40;
  }
  v12 = *(_QWORD *)(v6 + 88);
  v13 = *(_QWORD *)(v12 + 1608);
  v14 = *(unsigned int *)(v12 + 1624);
  if (!(_DWORD)v14)
    goto LABEL_41;
  LODWORD(v15) = (v14 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  v16 = (uint64_t *)(v13 + 16 * v15);
  v17 = *v16;
  if (*v16 != a1)
  {
    v18 = 1;
    while (v17 != -4096)
    {
      v19 = v15 + v18++;
      v15 = v19 & (v14 - 1);
      v17 = *(_QWORD *)(v13 + 16 * v15);
      if (v17 == a1)
      {
        v16 = (uint64_t *)(v13 + 16 * v15);
        goto LABEL_42;
      }
    }
LABEL_41:
    v16 = (uint64_t *)(v13 + 16 * v14);
  }
LABEL_42:
  if (v16 != (uint64_t *)(v13 + 16 * v14))
  {
    v20 = v16[1];
    if ((v20 & 4) != 0)
    {
      v21 = (_DWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
      if (v21)
        return ((*v21 >> 1) & 3u) + 1;
    }
  }
LABEL_5:
  if ((v1 - 67) < 0xFFFFFFFE)
    return 0;
  return *(_BYTE *)(a1 + 420) & 7;
}

uint64_t sub_22EFBE4A0(unint64_t a1)
{
  int v1;
  unsigned int *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int i;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;

  v1 = *(_DWORD *)(a1 + 28) & 0x7F;
  if (a1 && (v1 - 67) >= 0xFFFFFFFE)
  {
    v2 = (unsigned int *)(a1 + 416);
    return *v2;
  }
  if (v1 == 64)
    return 0;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  v6 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) != 0)
    v6 = *(_QWORD *)v5;
  if ((*(_WORD *)(v6 + 8) & 0x7Eu) - 34 > 3)
    return 0;
  if (!a1 || (v7 = a1, v1 != 83))
  {
    if ((v4 & 4) != 0)
      v5 = *(_QWORD *)v5;
    for (i = *(_WORD *)(v5 + 8) & 0x7F; i != 83; i = *(_WORD *)(v5 + 8) & 0x7F)
    {
      v9 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v9 = -56;
          goto LABEL_32;
        }
        if (i == 81)
          goto LABEL_32;
      }
      else
      {
        if (i <= 0x18)
        {
          if (i == 16)
            goto LABEL_19;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_32;
          if (i == 24)
          {
LABEL_19:
            v9 = -48;
            goto LABEL_32;
          }
        }
        if (i == 70)
        {
          v9 = -64;
          goto LABEL_32;
        }
      }
      v10 = i - 52;
      if ((i - 33) >= 5)
        v11 = -48;
      else
        v11 = -64;
      if (v10 >= 6)
        v9 = v11;
      else
        v9 = -72;
LABEL_32:
      v12 = *(_QWORD *)(v5 + v9 + 16);
      v5 = v12 & 0xFFFFFFFFFFFFFFF8;
      if ((v12 & 4) != 0)
        v5 = *(_QWORD *)v5;
    }
    v7 = v5 - 40;
  }
  v13 = *(_QWORD *)(v7 + 88);
  v14 = *(_QWORD *)(v13 + 1608);
  v15 = *(unsigned int *)(v13 + 1624);
  if ((_DWORD)v15)
  {
    LODWORD(v16) = (v15 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    v17 = (uint64_t *)(v14 + 16 * v16);
    v18 = *v17;
    if (*v17 == a1)
      goto LABEL_46;
    v19 = 1;
    while (v18 != -4096)
    {
      v20 = v16 + v19++;
      v16 = v20 & (v15 - 1);
      v18 = *(_QWORD *)(v14 + 16 * v16);
      if (v18 == a1)
      {
        v17 = (uint64_t *)(v14 + 16 * v16);
        goto LABEL_46;
      }
    }
  }
  v17 = (uint64_t *)(v14 + 16 * v15);
LABEL_46:
  if (v17 == (uint64_t *)(v14 + 16 * v15))
    return 0;
  result = 0;
  v21 = v17[1];
  if ((v21 & 4) != 0)
  {
    v22 = v21 & 0xFFFFFFFFFFFFFFF8;
    if (v22)
    {
      v2 = (unsigned int *)(v22 + 8);
      return *v2;
    }
  }
  return result;
}

BOOL sub_22EFBE680(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int i;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int j;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;

  if (!a1 || (v2 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 4) != 0)
      v4 = *(_QWORD *)v4;
    for (i = *(_WORD *)(v4 + 8) & 0x7F; i != 83; i = *(_WORD *)(v4 + 8) & 0x7F)
    {
      v6 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v6 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_16;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_15;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_22;
        if (i == 24)
        {
LABEL_9:
          v6 = -48;
        }
        else
        {
LABEL_15:
          if (i != 70)
          {
LABEL_16:
            v7 = i - 52;
            if ((i - 33) >= 5)
              v8 = -48;
            else
              v8 = -64;
            if (v7 >= 6)
              v6 = v8;
            else
              v6 = -72;
            goto LABEL_22;
          }
          v6 = -64;
        }
      }
LABEL_22:
      v9 = *(_QWORD *)(v4 + v6 + 16);
      v4 = v9 & 0xFFFFFFFFFFFFFFF8;
      if ((v9 & 4) != 0)
        v4 = *(_QWORD *)v4;
    }
    v2 = v4 - 40;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + 2000);
  if ((*(_BYTE *)(v10 + 68) & 0x20) != 0
    && (*(_WORD *)(v10 + 96) & 0x800) == 0
    && (*(_BYTE *)(a1 + 96) & 5) == 1
    && sub_22E469D10(a1)
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) == 4)
  {
    return 1;
  }
  if (!a1 || (v12 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v13 = *(_QWORD *)(a1 + 16);
    v14 = v13 & 0xFFFFFFFFFFFFFFF8;
    if ((v13 & 4) != 0)
      v14 = *(_QWORD *)v14;
    for (j = *(_WORD *)(v14 + 8) & 0x7F; j != 83; j = *(_WORD *)(v14 + 8) & 0x7F)
    {
      v16 = -40;
      if (j > 70)
      {
        if (j == 71)
        {
          v16 = -56;
        }
        else if (j != 81)
        {
          goto LABEL_50;
        }
      }
      else
      {
        if (j > 0x18)
          goto LABEL_49;
        if (j == 16)
          goto LABEL_43;
        if (((1 << j) & 0x1066) != 0)
          goto LABEL_56;
        if (j == 24)
        {
LABEL_43:
          v16 = -48;
        }
        else
        {
LABEL_49:
          if (j != 70)
          {
LABEL_50:
            v17 = j - 52;
            if ((j - 33) >= 5)
              v18 = -48;
            else
              v18 = -64;
            if (v17 >= 6)
              v16 = v18;
            else
              v16 = -72;
            goto LABEL_56;
          }
          v16 = -64;
        }
      }
LABEL_56:
      v19 = *(_QWORD *)(v14 + v16 + 16);
      v14 = v19 & 0xFFFFFFFFFFFFFFF8;
      if ((v19 & 4) != 0)
        v14 = *(_QWORD *)v14;
    }
    v12 = v14 - 40;
  }
  return sub_22EFBC498(a1, *(_QWORD *)(v12 + 88)) != 0;
}

BOOL sub_22EFBE910(uint64_t a1, uint64_t a2)
{
  if (sub_22E3CB5E0(a1))
    return 0;
  if (sub_22EFBE96C(a1))
    return 1;
  return (*(_BYTE *)(*(_QWORD *)(a2 + 2000) + 204) & 4) == 0 && !sub_22EFBE9CC(a1);
}

BOOL sub_22EFBE96C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 226)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22EFBE9CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 101)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22EFBEA2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;

  v3 = *(_QWORD *)(a1 + 88);
  if ((v3 & 4) != 0)
  {
    v4 = (_BYTE *)(v3 & 0xFFFFFFFFFFFFFFF8);
    if (v4)
    {
      if ((*v4 & 8) != 0)
        return 0;
    }
  }
  if (sub_22EFBE910(a1, a2))
    return 0;
  else
    return sub_22F115260(*(_QWORD *)(a1 + 48));
}

unint64_t sub_22EFBEA80(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  _QWORD *v11;
  unsigned int v12;

  result = 0;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v4 && *(_BYTE *)(v4 + 16) == 45)
  {
    if ((*(_BYTE *)(sub_22F114198(*(_QWORD *)(v4 + 24)) + 74) & 0x80) == 0)
      return 0;
    v6 = (unsigned __int8 *)sub_22EFBC5B4(a1);
    do
    {
      v7 = v6;
      v8 = *v6;
      if (v8 > 0xD5)
      {
        if (v8 == 233)
        {
          if ((*(_DWORD *)v6 & 0x7C0000) != 0x300000)
            return 0;
          v8 = *(_DWORD *)v6;
          v10 = v6 + 16;
        }
        else
        {
          if (v8 != 214)
            break;
          v10 = v6 + 24;
        }
      }
      else if (v8 == 155)
      {
        if ((**((_DWORD **)v6 + 2) & 0x18000) != 0)
          return 0;
        v10 = v6 + 24;
        if (!v6[48])
          v10 = v6 + 32;
        v8 = 155;
      }
      else
      {
        if (v8 != 176)
          break;
        v9 = *((unsigned int *)v6 + 5);
        if ((_DWORD)v9 == -1)
          return 0;
        v10 = &v6[8 * v9 + 40];
        v8 = 176;
      }
      v6 = *(unsigned __int8 **)v10;
    }
    while (*(unsigned __int8 **)v10 != v7);
    if (v8 != 180)
      return 0;
    result = sub_22EF5C728(a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 2)+ 8 * (((*((_QWORD *)v7 + 3) - *((_QWORD *)v7 + 2)) >> 3) - 1))+ 8));
    if (!result)
      return result;
    if (*(_BYTE *)(result + 16) == 2)
    {
      v11 = (_QWORD *)(result + 40);
      v12 = *(_DWORD *)(result + 48);
      if (v12 < 0x41)
        return *v11 != 0;
      if (v12 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(result + 40)) <= 0x40)
      {
        v11 = (_QWORD *)*v11;
        return *v11 != 0;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_22EFBEC04(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int k;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int i;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int j;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;

  v3 = result;
  v4 = *(_DWORD *)(result + 28) & 0x7F;
  if (!result || (v4 - 67) < 0xFFFFFFFE)
  {
    if (v4 == 64)
      return result;
    v12 = *(_QWORD *)(result + 16);
    v13 = v12 & 0xFFFFFFFFFFFFFFF8;
    v14 = v12 & 0xFFFFFFFFFFFFFFF8;
    if ((v12 & 4) != 0)
      v14 = *(_QWORD *)v13;
    if ((*(_WORD *)(v14 + 8) & 0x7Eu) - 34 > 3)
      return result;
    if (!result || (v16 = result, v4 != 83))
    {
      v17 = v12 & 0xFFFFFFFFFFFFFFF8;
      if ((v12 & 4) != 0)
        v17 = *(_QWORD *)v13;
      for (i = *(_WORD *)(v17 + 8) & 0x7F; i != 83; i = *(_WORD *)(v17 + 8) & 0x7F)
      {
        result = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            result = -56;
          }
          else if (i != 81)
          {
            goto LABEL_54;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_53;
          if (i == 16)
            goto LABEL_47;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_60;
          if (i == 24)
          {
LABEL_47:
            result = -48;
          }
          else
          {
LABEL_53:
            if (i != 70)
            {
LABEL_54:
              v19 = i - 52;
              if ((i - 33) >= 5)
                v20 = -48;
              else
                v20 = -64;
              if (v19 >= 6)
                result = v20;
              else
                result = -72;
              goto LABEL_60;
            }
            result = -64;
          }
        }
LABEL_60:
        v21 = *(_QWORD *)(v17 + result + 16);
        v17 = v21 & 0xFFFFFFFFFFFFFFF8;
        if ((v21 & 4) != 0)
          v17 = *(_QWORD *)v17;
      }
      v16 = v17 - 40;
    }
    v22 = *(_QWORD *)(v16 + 88);
    v23 = *(_QWORD *)(v22 + 1608);
    v24 = *(unsigned int *)(v22 + 1624);
    if ((_DWORD)v24)
    {
      LODWORD(v25) = (v24 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      v26 = (uint64_t *)(v23 + 16 * v25);
      v27 = *v26;
      if (*v26 == v3)
      {
LABEL_74:
        if (v26 == (uint64_t *)(v23 + 16 * v24))
          return result;
        v30 = v26[1];
        if ((v30 & 4) == 0)
          return result;
        v31 = v30 & 0xFFFFFFFFFFFFFFF8;
        if (!v31)
          return result;
        *(_QWORD *)v31 = *(_QWORD *)v31 & 0xFFFFFFFFFFFFFFF9 | (2 * (a2 - 1));
        if (a2 == 2 || !a3 || *(_DWORD *)(v31 + 8))
          return result;
        *(_DWORD *)(v31 + 8) = a3;
        if (!v3 || (v32 = v3, (*(_DWORD *)(v3 + 28) & 0x7F) != 0x53))
        {
          if ((v12 & 4) != 0)
            v13 = *(_QWORD *)v13;
          for (j = *(_WORD *)(v13 + 8) & 0x7F; j != 83; j = *(_WORD *)(v13 + 8) & 0x7F)
          {
            v34 = -40;
            if (j > 70)
            {
              if (j == 71)
              {
                v34 = -56;
              }
              else if (j != 81)
              {
                goto LABEL_95;
              }
            }
            else
            {
              if (j > 0x18)
                goto LABEL_94;
              if (j == 16)
                goto LABEL_88;
              if (((1 << j) & 0x1066) != 0)
                goto LABEL_101;
              if (j == 24)
              {
LABEL_88:
                v34 = -48;
              }
              else
              {
LABEL_94:
                if (j != 70)
                {
LABEL_95:
                  v35 = j - 52;
                  if ((j - 33) >= 5)
                    v36 = -48;
                  else
                    v36 = -64;
                  if (v35 >= 6)
                    v34 = v36;
                  else
                    v34 = -72;
                  goto LABEL_101;
                }
                v34 = -64;
              }
            }
LABEL_101:
            v37 = *(_QWORD *)(v13 + v34 + 16);
            v13 = v37 & 0xFFFFFFFFFFFFFFF8;
            if ((v37 & 4) != 0)
              v13 = *(_QWORD *)v13;
          }
          v32 = v13 - 40;
        }
        v15 = *(_QWORD *)(v32 + 88);
LABEL_37:
        result = *(_QWORD *)(v15 + 16056);
        if (result)
          return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 96))(result, v3);
        return result;
      }
      v28 = 1;
      while (v27 != -4096)
      {
        v29 = v25 + v28++;
        v25 = v29 & (v24 - 1);
        v27 = *(_QWORD *)(v23 + 16 * v25);
        if (v27 == v3)
        {
          v26 = (uint64_t *)(v23 + 16 * v25);
          goto LABEL_74;
        }
      }
    }
    v26 = (uint64_t *)(v23 + 16 * v24);
    goto LABEL_74;
  }
  *(_BYTE *)(result + 420) = *(_BYTE *)(result + 420) & 0xF8 | a2 & 7;
  if (a2 != 2 && a3 && !*(_DWORD *)(result + 416))
  {
    *(_DWORD *)(result + 416) = a3;
    v5 = *(_QWORD *)(result + 16);
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 4) != 0)
      v6 = *(_QWORD *)v6;
    for (k = *(_WORD *)(v6 + 8) & 0x7F; k != 83; k = *(_WORD *)(v6 + 8) & 0x7F)
    {
      v8 = -40;
      if (k > 70)
      {
        if (k == 71)
        {
          v8 = -56;
          goto LABEL_25;
        }
        if (k == 81)
          goto LABEL_25;
      }
      else
      {
        if (k <= 0x18)
        {
          if (k == 16)
            goto LABEL_12;
          if (((1 << k) & 0x1066) != 0)
            goto LABEL_25;
          if (k == 24)
          {
LABEL_12:
            v8 = -48;
            goto LABEL_25;
          }
        }
        if (k == 70)
        {
          v8 = -64;
          goto LABEL_25;
        }
      }
      v9 = k - 52;
      if ((k - 33) >= 5)
        v10 = -48;
      else
        v10 = -64;
      if (v9 >= 6)
        v8 = v10;
      else
        v8 = -72;
LABEL_25:
      v11 = *(_QWORD *)(v6 + v8 + 16);
      v6 = v11 & 0xFFFFFFFFFFFFFFF8;
      if ((v11 & 4) != 0)
        v6 = *(_QWORD *)v6;
    }
    v15 = *(_QWORD *)(v6 + 48);
    goto LABEL_37;
  }
  return result;
}

uint64_t sub_22EFBF028(uint64_t a1)
{
  uint64_t v2;

  if (sub_22E3CB5E0(a1))
    return 0;
  v2 = *(_QWORD *)((*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v2 & 8) != 0 && (*(_DWORD *)((v2 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0)
    return 0;
  else
    return sub_22F26A504(a1);
}

uint64_t sub_22EFBF080(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  uint64_t v17;
  uint64_t result;

  v17 = sub_22EFC7430(104, a1, a2, 0);
  result = sub_22EA41AB8(v17, 64, a2, a4);
  *(_QWORD *)(result + 40) = a5;
  *(_QWORD *)(result + 48) = a6;
  *(_QWORD *)(result + 56) = a7 & 0xFFFFFFFFFFFFFFFBLL;
  *(_DWORD *)(result + 64) = a3;
  *(_QWORD *)(result + 72) = a1 | 2;
  *(_QWORD *)(result + 80) = result;
  *(_DWORD *)(result + 96) = 0;
  *(_BYTE *)(result + 96) = a8 & 7;
  *(_QWORD *)result = &off_24FAC2B60;
  *(_DWORD *)(result + 96) |= 0x600u;
  *(_QWORD *)(result + 88) = a9 & 0xFFFFFFFFFFFFFFFBLL;
  return result;
}

uint64_t sub_22EFBF144(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  BOOL v5;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = (uint64_t *)(v1 & 0xFFFFFFFFFFFFFFF8);
  if ((v1 & 4) != 0)
    v2 = (uint64_t *)v2[4];
  if (!v2)
    v2 = (uint64_t *)(a1 + 48);
  result = *v2;
  v4 = *(_QWORD *)(*v2 & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(_BYTE *)(v4 + 16) == 1;
  else
    v5 = 0;
  if (v5)
    return *(_QWORD *)(v4 + 32);
  return result;
}

uint64_t sub_22EFBF184(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_22E3CD3D4(a1 + 2032, 112, 3);
  *(_DWORD *)v4 = 0;
  *(_DWORD *)(v4 + 4) = a2;
  result = sub_22EA41AB8(v4 + 8, 64, 0, 0);
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_DWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 80) = a1 | 2;
  *(_QWORD *)(v4 + 88) = result;
  *(_QWORD *)(v4 + 8) = &off_24FAC2B60;
  *(_DWORD *)(v4 + 104) = 1536;
  *(_QWORD *)(v4 + 96) = 0;
  return result;
}

unint64_t sub_22EFBF204(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  unint64_t v12;

  if ((*(_BYTE *)(a1 + 97) & 1) == 0 && (v2 = sub_22EFBF2CC(a1), (_DWORD)v2) && (v3 = HIDWORD(v2), HIDWORD(v2)))
  {
    v4 = *(_QWORD *)(a1 + 56);
    if ((v4 & 4) != 0 && (v5 = v4 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v5 + 16)))
      v6 = **(_DWORD ***)(v5 + 24);
    else
      v6 = (_DWORD *)(a1 + 64);
    LODWORD(v12) = *v6;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
    if ((v7 & 4) != 0)
      v8 = *(_QWORD *)v8;
    if ((*(_WORD *)(v8 + 8) & 0x7F) == 0x18)
    {
      v9 = *(_QWORD *)(a1 + 56);
      if ((v9 & 4) != 0 && (v10 = v9 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v10 + 16)))
        v11 = **(_DWORD ***)(v10 + 24);
      else
        v11 = (_DWORD *)(a1 + 64);
      LODWORD(v12) = *v11;
      v3 = *(unsigned int *)(a1 + 24);
    }
    else
    {
      v12 = sub_22EFBB490(a1);
      v3 = HIDWORD(v12);
    }
  }
  return v12 | (v3 << 32);
}

unint64_t sub_22EFBF2CC(uint64_t a1)
{
  unsigned int v1;
  unint64_t v2;
  unint64_t v3;

  v1 = (*(_DWORD *)(a1 + 96) >> 9) & 3;
  if (v1 >= 2)
  {
    if (v1 == 3)
    {
      v3 = sub_22EFBC5B4(a1);
      if (!v3)
      {
        v2 = 0;
        return v3 | v2;
      }
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 88) & 0xFFFFFFFFFFFFFFF8;
    }
    sub_22F0D4E74(v3);
    v2 = v3 & 0xFFFFFFFF00000000;
    return v3 | v2;
  }
  v2 = 0;
  LODWORD(v3) = 0;
  return v3 | v2;
}

unint64_t sub_22EFBF328(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  if (sub_22F24EBE4(a1))
  {
    if (!v1 || (*(_DWORD *)(v1 + 28) & 0x7F) != 0x53)
    {
      v2 = *(_QWORD *)(v1 + 16);
      v3 = v2 & 0xFFFFFFFFFFFFFFF8;
      if ((v2 & 4) != 0)
        v3 = *(_QWORD *)v3;
      for (i = *(_WORD *)(v3 + 8) & 0x7F; i != 83; i = *(_WORD *)(v3 + 8) & 0x7F)
      {
        v5 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v5 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_17;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_16;
          if (i == 16)
            goto LABEL_10;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_23;
          if (i == 24)
          {
LABEL_10:
            v5 = -48;
          }
          else
          {
LABEL_16:
            if (i != 70)
            {
LABEL_17:
              v6 = i - 52;
              if ((i - 33) >= 5)
                v7 = -48;
              else
                v7 = -64;
              if (v6 >= 6)
                v5 = v7;
              else
                v5 = -72;
              goto LABEL_23;
            }
            v5 = -64;
          }
        }
LABEL_23:
        v8 = *(_QWORD *)(v3 + v5 + 16);
        v3 = v8 & 0xFFFFFFFFFFFFFFF8;
        if ((v8 & 4) != 0)
          v3 = *(_QWORD *)v3;
      }
      v1 = v3 - 40;
    }
    return ((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v1 + 88) + 2000) + 148) >> 1) & 1;
  }
  else
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    return v9
        && *(_BYTE *)(v9 + 16) == 45
        && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v9 + 24)) + 76) & 4) != 0
        && sub_22F115260(*(_QWORD *)(v1 + 48));
  }
}

uint64_t sub_22EFBF4B0(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 96) = *(_DWORD *)(result + 96) & 0xFFFFF9FF | 0x400;
  *(_QWORD *)(result + 88) = a2 & 0xFFFFFFFFFFFFFFFBLL;
  return result;
}

BOOL sub_22EFBF4CC(uint64_t a1)
{
  int v2;
  _BOOL8 result;

  v2 = *(_DWORD *)(a1 + 96) & 0x600;
  result = 1;
  if (v2 != 1024 && v2 != 512)
    return *(_QWORD *)(a1 + 88) > 7uLL;
  return result;
}

unint64_t sub_22EFBF4FC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6, uint64_t a7, uint64_t a8, char a9, __int16 a10, char a11, char a12, int a13, uint64_t a14)
{
  char v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v19 = a2;
  v21 = *a6;
  v22 = sub_22EA41AB8(a1, a2, a4, *((_DWORD *)a6 + 2));
  *(_QWORD *)(v22 + 40) = v21;
  *(_QWORD *)(v22 + 48) = a7;
  *(_QWORD *)(v22 + 56) = a8 & 0xFFFFFFFFFFFFFFFBLL;
  *(_DWORD *)(v22 + 64) = a5;
  *(_QWORD *)(v22 + 72) = 0;
  *(_QWORD *)(v22 + 88) = 0;
  *(_QWORD *)(v22 + 96) = 0;
  *(_WORD *)(v22 + 80) = *(_WORD *)(v22 + 80) & 0xE000 | v19 & 0x7F;
  *(_QWORD *)(v22 + 104) = a3 | 2;
  *(_QWORD *)(v22 + 112) = v22;
  *(_QWORD *)v22 = &off_24FAC2EA0;
  *(_QWORD *)(v22 + 120) = 0;
  *(_QWORD *)(v22 + 128) = 0;
  *(_DWORD *)(v22 + 136) = 0;
  sub_22EFC70E8(a6);
  v24 = *((_DWORD *)a6 + 2);
  if (v23)
    v24 = v23;
  *(_DWORD *)(a1 + 140) = v24;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = a6[2];
  v25 = 0x10000;
  if (!a12)
    v25 = 0;
  v26 = 0x20000;
  if (!a12)
    v26 = 0;
  v27 = 0x200000;
  if (a11)
    v27 = 0x8000200000;
  *(_QWORD *)(a1 + 80) = v27 | v25 | ((a9 & 7) << 13) | v26 | (a13 << 30) | *(_QWORD *)(a1 + 80) & 0xFFFFFF0000001FFFLL;
  if (a14)
    sub_22F3AC084(a1, a14);
  return a1;
}

uint64_t sub_22EFBF664(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 144) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(a1 + 144) & 6) != 4 || v1 == 0)
    return 0;
  else
    return *(_QWORD *)(v1 + 24);
}

uint64_t sub_22EFBF68C(uint64_t a1)
{
  uint64_t result;
  BOOL v2;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (result)
    v2 = *(_BYTE *)(result + 16) == 26;
  else
    v2 = 0;
  if (v2)
    return (*(unsigned __int8 *)(result + 23) >> 3) & 1;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
  {
    result = sub_22F10CF48(result);
    if (!result)
      return result;
    return (*(unsigned __int8 *)(result + 23) >> 3) & 1;
  }
  return 0;
}

uint64_t sub_22EFBF6E8(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    v4 = 0;
    v5 = (_QWORD *)result;
    do
    {
      v6 = v5[10];
      if ((v6 & 0x8000000) != 0)
      {
        if ((v6 & 0x20000000) != 0)
        {
LABEL_13:
          *a2 = v5;
          return 1;
        }
      }
      else if (v5[16] | v5[10] & 0x20000000)
      {
        goto LABEL_13;
      }
      if ((v5[13] & 3) != 0)
      {
        if (v4)
          return 0;
        v4 = 1;
      }
      v5 = (_QWORD *)sub_22E3CD31C(v5 + 13, (uint64_t)v5);
      result = 0;
    }
    while (v5 != v3 && v5);
  }
  return result;
}

BOOL sub_22EFBF780(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;

  if ((*(_WORD *)(a1 + 30) & 0x180) == 0)
    return 0;
  v2 = *(_QWORD *)(a1 + 144);
  v3 = v2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 6) == 2 && v3 != 0)
  {
LABEL_22:
    v8 = *(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8;
    if (v8 && (*(_WORD *)(v8 + 30) & 0x180) != 0)
      return sub_22E49F868(v8);
    return 0;
  }
  if ((v2 & 6) == 4 && v3 != 0)
  {
    if ((*(_BYTE *)(v3 + 8) & 4) == 0)
      return 0;
    v3 = *(_QWORD *)(v3 + 48);
    if (!v3)
      return 0;
    goto LABEL_22;
  }
  if ((v2 & 6) != 0 || v3 == 0)
    return 0;
  v7 = *(_QWORD *)sub_22EFE9368(v3) & 0xFFFFFFFFFFFFFFF8;
  if (!v7 || (*(_WORD *)(v7 + 30) & 0x180) == 0)
    return 0;
  return sub_22E49F868(*(_QWORD *)(v7 + 48));
}

unint64_t sub_22EFBF824(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  BOOL v3;
  BOOL v4;

  v1 = *(_QWORD *)(a1 + 144) & 6;
  v2 = *(_QWORD *)(a1 + 144) & 0xFFFFFFFFFFFFFFF8;
  v3 = v1 != 2 || v2 == 0;
  if (v3
    && (v1 == 4 ? (v4 = v2 == 0) : (v4 = 1), v4 || (*(_BYTE *)(v2 + 8) & 4) == 0 || (v2 = *(_QWORD *)(v2 + 48)) == 0))
  {
    return 0;
  }
  else
  {
    return *(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8;
  }
}

uint64_t sub_22EFBF86C(uint64_t result, unint64_t *a2, int a3)
{
  uint64_t v5;
  int v6;
  unint64_t v7;

  if (result)
  {
    v5 = result;
    v6 = 0;
    v7 = result;
    do
    {
      if (sub_22E49F868(v7) || a3 && sub_22EFBF780(v7))
      {
        *a2 = v7;
        return 1;
      }
      if ((*(_BYTE *)(v7 + 104) & 3) != 0)
      {
        if (v6)
          return 0;
        v6 = 1;
      }
      v7 = sub_22E3CD31C((uint64_t *)(v7 + 104), v7);
      result = 0;
    }
    while (v7 != v5 && v7);
  }
  return result;
}

unint64_t sub_22EFBF910(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  int i;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v3 = a1;
  if (!sub_22EFBF6E8(a1, a2))
    return 0;
  v4 = *a2;
  result = *(_QWORD *)(v4 + 128);
  if (result && (result & 1) != 0)
  {
    if (!v3 || (*(_DWORD *)(v3 + 28) & 0x7F) != 0x53)
    {
      v6 = *(_QWORD *)(v3 + 16);
      v7 = v6 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 4) != 0)
        v7 = *(_QWORD *)v7;
      for (i = *(_WORD *)(v7 + 8) & 0x7F; i != 83; i = *(_WORD *)(v7 + 8) & 0x7F)
      {
        v9 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v9 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_25;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_24;
          if (i == 16)
            goto LABEL_14;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_15;
          if (i == 24)
          {
LABEL_14:
            v9 = -48;
          }
          else
          {
LABEL_24:
            if (i != 70)
            {
LABEL_25:
              v11 = i - 52;
              if ((i - 33) >= 5)
                v12 = -48;
              else
                v12 = -64;
              if (v11 >= 6)
                v9 = v12;
              else
                v9 = -72;
              goto LABEL_15;
            }
            v9 = -64;
          }
        }
LABEL_15:
        v10 = *(_QWORD *)(v7 + v9 + 16);
        v7 = v10 & 0xFFFFFFFFFFFFFFF8;
        if ((v10 & 4) != 0)
          v7 = *(_QWORD *)v7;
      }
      v3 = v7 - 40;
    }
    result = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v3 + 88) + 16048) + 40))(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 16048), result >> 1);
    *(_QWORD *)(v4 + 128) = result;
  }
  return result;
}

unint64_t sub_22EFBFA74(unint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;

  v2 = 0x80000;
  if (!a2)
    v2 = 0;
  *(_QWORD *)(result + 80) = *(_QWORD *)(result + 80) & 0xFFFFFFFFFFF7FFFFLL | v2;
  if (a2)
  {
    v3 = *(_QWORD *)(result + 16);
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 4) != 0)
      v4 = *(_QWORD *)v4;
    if (v4)
      v5 = (*(_WORD *)(v4 + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD;
    else
      v5 = 0;
    if (v5)
    {
      result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v4 + 40) + 96), *(_QWORD *)(v4 + 40));
      **(_QWORD **)(v4 + 64) |= 0x800uLL;
    }
  }
  return result;
}

BOOL sub_22EFBFAF0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
  if ((v2 & 4) != 0)
    v3 = (_QWORD *)*v3;
  v4 = sub_22EFCBB30((unint64_t)v3);
  result = 0;
  if (v4 && (*(_WORD *)(v4 + 8) & 0x7F) == 0x53)
  {
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 2000) + 8) & 0x40000000000000) != 0)
      return 0;
    result = 0;
    v6 = *(_QWORD *)(a1 + 40);
    if ((v6 & 7) == 0)
    {
      v7 = v6 & 0xFFFFFFFFFFFFFFF8;
      if (v7)
      {
        v8 = *(_DWORD **)(v7 + 16);
        if (*v8 == 4)
          return v8[4] == 1852399981;
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_22EFBFB90(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  _DWORD *v15;
  unsigned int v16;
  uint64_t v17;
  BOOL v18;
  void *v19;
  uint64_t v20;
  __int16 v21;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
  if ((v2 & 4) != 0)
    v3 = (_QWORD *)*v3;
  v5 = sub_22EFCBB30((unint64_t)v3);
  result = 0;
  if (v5 && (*(_WORD *)(v5 + 8) & 0x7F) == 0x53)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 15088);
    if (*(_DWORD *)(v7 + 68) != 15)
      return 0;
    v8 = *(_DWORD *)(v7 + 72);
    v9 = v8 > 0x11;
    v10 = (1 << v8) & 0x30003;
    if (v9 || v10 == 0)
    {
      return 0;
    }
    else
    {
      result = 0;
      v12 = *(_QWORD *)(a1 + 40);
      if (v12 >= 8 && (v12 & 7) == 0)
      {
        v13 = v12 & 0xFFFFFFFFFFFFFFF8;
        if (v13)
        {
          v14 = *(unsigned int **)(v13 + 16);
          v16 = *v14;
          v15 = v14 + 4;
          v19 = v15;
          v20 = v16;
          v21 = 0;
          if (v16 == 4 && *v15 == 1852399981)
            v21 = 257;
        }
        else
        {
          v19 = &unk_22F5C131D;
          v20 = 0;
          v21 = 0;
        }
        v17 = sub_22E72DCE4((uint64_t)&v19, "wmain", 5, "WinMain", 7, "wWinMain", 8, v4, "DllMain", 7, 1);
        if (*(_BYTE *)(v17 + 17))
          v18 = *(_BYTE *)(v17 + 16) == 0;
        else
          v18 = 1;
        return !v18;
      }
    }
  }
  return result;
}

BOOL sub_22EFBFCDC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;

  if ((a1[5] & 7) != 6 || (*(_DWORD *)(a1[5] & 0xFFFFFFFFFFFFFFF8) - 1) > 3)
    return 0;
  v2 = a1[2];
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
  if ((v2 & 4) != 0)
    v3 = (_QWORD *)*v3;
  if ((*(_WORD *)(sub_22EFCBB30((unint64_t)v3) + 8) & 0x7F) != 0x53)
    return 0;
  v4 = *(_QWORD *)(a1[6] & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(_BYTE *)(v4 + 16) == 26;
  else
    v5 = 0;
  if (!v5)
    v4 = sub_22F10CF48(*(_QWORD *)(a1[6] & 0xFFFFFFFFFFFFFFF0));
  if ((*(_QWORD *)(v4 + 16) & 0x83FFFC000000000) != 0x8000000000)
    return 0;
  v6 = a1[2];
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 4) != 0)
    v7 = (_QWORD *)*v7;
  v8 = sub_22EFCBB30((unint64_t)v7);
  v9 = v8 - 40;
  if (!v8)
    v9 = 0;
  return (*(_QWORD *)(v4 + 48) & 7 | *(_QWORD *)((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFFFF0) + 8)) == *(_QWORD *)(*(_QWORD *)(v9 + 88) + 16816);
}

uint64_t sub_22EFBFDCC(unint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t result;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int i;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;

  if ((*(_QWORD *)(a1 + 40) & 7) != 6
    || (*(_DWORD *)(*(_QWORD *)(a1 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) > 3)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 16);
  v7 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 4) != 0)
    v7 = *(_QWORD *)v7;
  if ((*(_WORD *)(v7 + 8) & 0x7Fu) - 35 < 3 || (*(_WORD *)(sub_22EFCBB30(v7) + 8) & 0x7F) != 0x53)
    return 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v8)
    v9 = *(_BYTE *)(v8 + 16) == 26;
  else
    v9 = 0;
  if (!v9)
    v8 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0));
  result = 0;
  v11 = *(_QWORD *)(v8 + 16);
  if ((v11 & 0x800000000000000) == 0)
  {
    v12 = (unsigned __int16)(v11 >> 38);
    if ((v12 - 5) >= 0xFFFFFFFC)
    {
      if (v12 == 1)
        return 1;
      v13 = *(_QWORD *)(v8 + 48);
      v14 = a1;
      if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
      {
        v15 = *(_QWORD *)(a1 + 16);
        v16 = v15 & 0xFFFFFFFFFFFFFFF8;
        if ((v15 & 4) != 0)
          v16 = *(_QWORD *)v16;
        for (i = *(_WORD *)(v16 + 8) & 0x7F; i != 83; i = *(_WORD *)(v16 + 8) & 0x7F)
        {
          v18 = -40;
          if (i > 70)
          {
            if (i == 71)
            {
              v18 = -56;
            }
            else if (i != 81)
            {
              goto LABEL_30;
            }
          }
          else
          {
            if (i > 0x18)
              goto LABEL_29;
            if (i == 16)
              goto LABEL_23;
            if (((1 << i) & 0x1066) != 0)
              goto LABEL_36;
            if (i == 24)
            {
LABEL_23:
              v18 = -48;
            }
            else
            {
LABEL_29:
              if (i != 70)
              {
LABEL_30:
                v19 = i - 52;
                if ((i - 33) >= 5)
                  v20 = -48;
                else
                  v20 = -64;
                if (v19 >= 6)
                  v18 = v20;
                else
                  v18 = -72;
                goto LABEL_36;
              }
              v18 = -64;
            }
          }
LABEL_36:
          v21 = *(_QWORD *)(v16 + v18 + 16);
          v16 = v21 & 0xFFFFFFFFFFFFFFF8;
          if ((v21 & 4) != 0)
            v16 = *(_QWORD *)v16;
        }
        v14 = v16 - 40;
      }
      v22 = *(_QWORD *)(v14 + 88);
      v23 = *(_QWORD *)(*(_QWORD *)(v22 + 2000) + 132);
      if ((v23 & 0x1000000000) != 0
        && (*(_QWORD *)(a1 + 40) & 7) == 6
        && ((v24 = *(_DWORD *)(*(_QWORD *)(a1 + 40) & 0xFFFFFFFFFFFFFFF8), v24 != 4) ? (v25 = v24 == 2) : (v25 = 1),
            v25
         && (v26 = sub_22EF67C8C(v22),
             (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 8) | v13 & 7) == (*(_QWORD *)((v26 & 0xFFFFFFFFFFFFFFF0) + 8) | v26 & 7))))
      {
        if ((v11 & 0x3FFFC000000000) < 0x8000000001)
        {
          v28 = 2;
          return v28 == (unsigned __int16)(*(_QWORD *)(v8 + 16) >> 38);
        }
        v13 = *(_QWORD *)(v8 + 56);
        v27 = 1;
        v28 = 2;
      }
      else
      {
        v27 = 0;
        v28 = 1;
      }
      v29 = v8 + 40;
      if ((v23 & 0x2000000000) != 0
        && v13 >= 0x10
        && sub_22F112268(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0)))
      {
        v13 = ++v28 >= (unsigned __int16)(*(_QWORD *)(v8 + 16) >> 38) ? 0 : *(_QWORD *)(v29 + 8 * v28);
        if (a2)
        {
          v30 = *(unsigned __int8 *)(a2 + 4);
          *(_DWORD *)a2 = v28;
          if (!v30)
            *(_BYTE *)(a2 + 4) = 1;
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(v22 + 2000) + 236) & 2) != 0
        && v13 >= 0x10
        && sub_22F11233C(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0)))
      {
        if (++v28 >= (unsigned __int16)(*(_QWORD *)(v8 + 16) >> 38))
          return v28 == (unsigned __int16)(*(_QWORD *)(v8 + 16) >> 38);
        v13 = *(_QWORD *)(v29 + 8 * v28);
      }
      if (v13 < 0x10)
        v31 = 1;
      else
        v31 = v27;
      if ((v31 & 1) == 0)
      {
        v32 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
        {
          v33 = sub_22F10ACF8(v32);
          if (((*(_DWORD *)((v33 & 0xFFFFFFFFFFFFFFF0) + 8) | v33) & 7) != 1)
            return 0;
          if (sub_22F40A2D0(*(_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF0)))
          {
            if (a3)
              *a3 = 1;
            ++v28;
          }
        }
      }
      return v28 == (unsigned __int16)(*(_QWORD *)(v8 + 16) >> 38);
    }
  }
  return result;
}

uint64_t sub_22EFC0170(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = sub_22EFC01DC(a1, 0);
  if ((_DWORD)result)
  {
    v4 = 0;
    result = sub_22EFBF6E8(a1, &v4);
    if ((_DWORD)result)
    {
      v3 = v4;
      if ((*(_BYTE *)(v4 + 82) & 2) != 0)
      {
        result = sub_22E46A45C(v4);
        if ((_DWORD)result)
          return sub_22EA0E0E4(v3);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_22EFC01DC(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t j;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int k;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  char **v46;
  uint64_t v47;
  char **v48;
  char **v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    goto LABEL_10;
  sub_22EFC8E88(a1);
  v5 = *(uint64_t **)v4;
  v6 = *(unsigned int *)(v4 + 8);
  v7 = *(uint64_t **)v4;
  if ((_DWORD)v6)
  {
    v8 = 8 * v6;
    v7 = *(uint64_t **)v4;
    while (*(_WORD *)(*v7 + 32) != 107)
    {
      ++v7;
      v8 -= 8;
      if (!v8)
        goto LABEL_10;
    }
  }
  if (v7 == &v5[v6])
  {
LABEL_10:
    if ((*(_BYTE *)(a1 + 29) & 1) == 0)
      goto LABEL_21;
    sub_22EFC8E88(a1);
    v12 = *(uint64_t **)v11;
    v13 = *(unsigned int *)(v11 + 8);
    v14 = *(uint64_t **)v11;
    if ((_DWORD)v13)
    {
      v15 = 8 * v13;
      v14 = *(uint64_t **)v11;
      while (*(_WORD *)(*v14 + 32) != 364)
      {
        ++v14;
        v15 -= 8;
        if (!v15)
          goto LABEL_21;
      }
    }
    if (v14 == &v12[v13])
    {
LABEL_21:
      if ((*(_BYTE *)(a1 + 29) & 1) == 0)
        return 0;
      sub_22EFC8E88(a1);
      v20 = *(uint64_t **)v19;
      v21 = *(unsigned int *)(v19 + 8);
      i = *(uint64_t **)v19;
      if ((_DWORD)v21)
      {
        v23 = 8 * v21;
        for (i = *(uint64_t **)v19; *(_WORD *)(*i + 32) != 119; ++i)
        {
          v23 -= 8;
          if (!v23)
            return 0;
        }
      }
      if (i == &v20[v21])
        return 0;
      do
      {
        v25 = *v20++;
        v24 = v25;
      }
      while (*(_WORD *)(v25 + 32) != 119);
      v18 = *(unsigned int *)(v24 + 36);
      if (!(_DWORD)v18)
        return 0;
      goto LABEL_30;
    }
    do
    {
      v16 = *v12++;
      v9 = v16;
    }
    while (*(_WORD *)(v16 + 32) != 364);
  }
  else
  {
    do
    {
      v10 = *v5++;
      v9 = v10;
    }
    while (*(_WORD *)(v10 + 32) != 107);
  }
  v17 = (unsigned __int16)(**(_DWORD **)(v9 + 40) >> 9);
  if (v17 <= 0x1A)
    return 0;
  v18 = v17 - 27;
  if (v17 == 27)
    return 0;
LABEL_30:
  if ((a2 & 1) == 0 && sub_22EA0E084(a1))
  {
    if ((*(_BYTE *)(a1 + 29) & 1) == 0)
      goto LABEL_40;
    sub_22EFC8E88(a1);
    v27 = *((unsigned int *)v26 + 2);
    if ((_DWORD)v27)
    {
      v28 = 8 * v27;
      v29 = *v26;
      while (*(_WORD *)(*(_QWORD *)v29 + 32) != 107)
      {
        v29 += 8;
        v28 -= 8;
        if (!v28)
          goto LABEL_40;
      }
    }
    else
    {
      v29 = *v26;
    }
    if (v29 == *v26 + 8 * v27)
    {
LABEL_40:
      if ((*(_BYTE *)(a1 + 29) & 1) == 0)
        return 0;
      sub_22EFC8E88(a1);
      v31 = *v30;
      v32 = *((unsigned int *)v30 + 2);
      if ((_DWORD)v32)
      {
        v33 = 8 * v32;
        for (j = *v30; *(_WORD *)(*(_QWORD *)j + 32) != 364; j += 8)
        {
          result = 0;
          v33 -= 8;
          if (!v33)
            return result;
        }
      }
      else
      {
        j = *v30;
      }
      if (j == v31 + 8 * v32)
        return 0;
    }
  }
  if (!a1 || (v36 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v37 = *(_QWORD *)(a1 + 16);
    v38 = v37 & 0xFFFFFFFFFFFFFFF8;
    if ((v37 & 4) != 0)
      v38 = *(_QWORD *)v38;
    for (k = *(_WORD *)(v38 + 8) & 0x7F; k != 83; k = *(_WORD *)(v38 + 8) & 0x7F)
    {
      v40 = -40;
      if (k > 70)
      {
        if (k == 71)
        {
          v40 = -56;
        }
        else if (k != 81)
        {
          goto LABEL_63;
        }
      }
      else
      {
        if (k > 0x18)
          goto LABEL_62;
        if (k == 16)
          goto LABEL_56;
        if (((1 << k) & 0x1066) != 0)
          goto LABEL_69;
        if (k == 24)
        {
LABEL_56:
          v40 = -48;
        }
        else
        {
LABEL_62:
          if (k != 70)
          {
LABEL_63:
            v41 = k - 52;
            if ((k - 33) >= 5)
              v42 = -48;
            else
              v42 = -64;
            if (v41 >= 6)
              v40 = v42;
            else
              v40 = -72;
            goto LABEL_69;
          }
          v40 = -64;
        }
      }
LABEL_69:
      v43 = *(_QWORD *)(v38 + v40 + 16);
      v38 = v43 & 0xFFFFFFFFFFFFFFF8;
      if ((v43 & 4) != 0)
        v38 = *(_QWORD *)v38;
    }
    v36 = v38 - 40;
  }
  v44 = *(_QWORD **)(v36 + 88);
  v45 = (uint64_t *)v44[1901];
  if (v18 > 0x7E7)
  {
    v51 = v45[1];
    if (v51 + 2024 <= (unint64_t)v18)
    {
      v52 = v18 - v51 - 2024;
      v53 = v45[2];
    }
    else
    {
      v52 = v18 - 2024;
      v53 = *v45;
    }
    v46 = (char **)(v53 + 48 * v52);
  }
  else
  {
    v46 = &(&off_24FAC8C40)[6 * v18];
  }
  if (!strchr(v46[2], 102))
    return v18;
  if ((a2 & 1) == 0 && (*(_QWORD *)(a1 + 80) & 0xE000) == 0x4000)
    return 0;
  v47 = v44[250];
  if ((*(_DWORD *)(v47 + 52) & 0x40000000) != 0)
  {
    if (v18 > 0x7E7)
    {
      v54 = v45[1];
      if (v54 + 2024 <= (unint64_t)v18)
      {
        v55 = v18 - v54 - 2024;
        v56 = v45[2];
      }
      else
      {
        v55 = v18 - 2024;
        v56 = *v45;
      }
      v48 = (char **)(v56 + 48 * v55);
    }
    else
    {
      v48 = &(&off_24FAC8C40)[6 * v18];
    }
    if (strchr(v48[2], 102))
      return 0;
  }
  if ((*(_BYTE *)(v47 + 68) & 0x20) != 0
    && sub_22E466E5C(a1)
    && !sub_22F295B40(a1)
    && (_DWORD)v18 != 841
    && (_DWORD)v18 != 809)
  {
    return 0;
  }
  if (*(_DWORD *)(v44[1886] + 56) != 30 || (*(_BYTE *)(v44[250] + 76) & 8) == 0)
    return v18;
  if (v18 > 0x7E7)
  {
    v57 = (uint64_t *)v44[1901];
    v58 = v57[1];
    if (v58 + 2024 <= (unint64_t)v18)
    {
      v59 = v18 - v58 - 2024;
      v60 = v57[2];
    }
    else
    {
      v59 = v18 - 2024;
      v60 = *v57;
    }
    v49 = (char **)(v60 + 48 * v59);
  }
  else
  {
    v49 = &(&off_24FAC8C40)[6 * v18];
  }
  if (!strchr(v49[2], 102))
    return v18;
  if ((_DWORD)v18 == 809)
    v50 = 809;
  else
    v50 = 0;
  if ((_DWORD)v18 == 841)
    return 841;
  else
    return v50;
}

unint64_t sub_22EFC06D0(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;

  if ((*(_DWORD *)(a1 + 28) & 0x7Eu) - 54 > 3
    || (*(_QWORD *)(a1 + 40) & 7) != 6
    || *(_DWORD *)(*(_QWORD *)(a1 + 40) & 0xFFFFFFFFFFFFFFF8) != 2)
  {
    return 0;
  }
  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v1 || *(_BYTE *)(v1 + 16) != 26)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
      return 0;
    v14 = a1;
    v1 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0));
    a1 = v14;
    if (!v1)
      return 0;
  }
  if ((*(_DWORD *)(v1 + 20) & 0x3FFF80) == 0)
    return 0;
  result = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 48) & 0xFFFFFFFFFFFFFFF0));
  if (!result)
    return result;
  v4 = result;
  if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 > 2)
    return 0;
  v5 = *(_QWORD *)(result + 16);
  result = v5 & 0xFFFFFFFFFFFFFFF8;
  if ((v5 & 4) != 0)
  {
    result = *(_QWORD *)result;
    if (!result)
      return result;
  }
  else if (!result)
  {
    return result;
  }
  result = sub_22EFC84D4(result);
  if (!(_DWORD)result)
    return result;
  v6 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(v4 + 40) & 7) != 0 || v6 == 0)
    return 0;
  v8 = *(_QWORD *)(v6 + 16);
  if (*(_DWORD *)v8 != 19)
    return 0;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(_QWORD *)(v8 + 24);
  v11 = *(_QWORD *)(v8 + 27);
  return v9 == 0x69796F7274736564 && v10 == 0x74656C65645F676ELL && v11 == 0x745F6574656C6564;
}

uint64_t sub_22EFC0844(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int i;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v2 = sub_22EFB948C(a1);
  if (v2 != 6 && v2 != 2)
    return 2;
  if (!a1 || (v3 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v4 = *(_QWORD *)(a1 + 16);
    v5 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 4) != 0)
      v5 = *(_QWORD *)v5;
    for (i = *(_WORD *)(v5 + 8) & 0x7F; i != 83; i = *(_WORD *)(v5 + 8) & 0x7F)
    {
      v7 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v7 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_21;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_20;
        if (i == 16)
          goto LABEL_10;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_11;
        if (i == 24)
        {
LABEL_10:
          v7 = -48;
        }
        else
        {
LABEL_20:
          if (i != 70)
          {
LABEL_21:
            v9 = i - 52;
            if ((i - 33) >= 5)
              v10 = -48;
            else
              v10 = -64;
            if (v9 >= 6)
              v7 = v10;
            else
              v7 = -72;
            goto LABEL_11;
          }
          v7 = -64;
        }
      }
LABEL_11:
      v8 = *(_QWORD *)(v5 + v7 + 16);
      v5 = v8 & 0xFFFFFFFFFFFFFFF8;
      if ((v8 & 4) != 0)
        v5 = *(_QWORD *)v5;
    }
    v3 = v5 - 40;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 2000) + 1) & 1) == 0)
    return 0;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = v11 & 0xFFFFFFFFFFFFFFF8;
  if ((v11 & 4) != 0)
    v12 = *(_QWORD *)v12;
  return (*(_WORD *)(v12 + 8) & 0x7Eu) - 34 < 4 || !sub_22EFC09D4(*(_QWORD *)(a1 + 112));
}

BOOL sub_22EFC09D4(uint64_t a1)
{
  uint64_t v3;
  unint64_t v4;

  if (sub_22E47290C(a1))
    return 1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  if ((v3 & 4) != 0)
    v4 = *(_QWORD *)(v4 + 8);
  return sub_22EFCBD94(v4, 1);
}

BOOL sub_22EFC0A1C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v5;
  unint64_t v6;
  __int16 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_DWORD *)(a1 + 28);
  v3 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) + 80) & 0xE000;
  if (a1 && (v2 & 0x7Eu) - 58 >= 0xFFFFFFFC)
  {
    if (v3 != 0x4000)
    {
      if ((*(_QWORD *)(a1 + 40) & 7) == 6)
        return (*(_DWORD *)(*(_QWORD *)(a1 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4;
      return 0;
    }
    return 1;
  }
  if (v3 == 0x4000)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  if ((v5 & 4) != 0)
    v6 = *(_QWORD *)v6;
  v7 = *(_WORD *)(v6 + 8);
  for (result = 1; (v7 & 0x7F) == 0x10; v7 = *(_WORD *)(v6 + 8))
  {
    v8 = *(_QWORD *)(v6 - 8);
    result = v8 != 0;
    if (!v8)
      return result;
    v9 = v7 & 0x7F;
    v10 = -40;
    if (v9 > 70)
    {
      if (v9 != 83)
      {
        if (v9 == 71)
        {
          v10 = -56;
        }
        else if (v9 != 81)
        {
          goto LABEL_23;
        }
      }
    }
    else
    {
      if (v9 > 0x18)
        goto LABEL_22;
      if (v9 == 16)
        goto LABEL_15;
      if (((1 << v9) & 0x1066) != 0)
        goto LABEL_29;
      if (v9 == 24)
      {
LABEL_15:
        v10 = -48;
      }
      else
      {
LABEL_22:
        if (v9 != 70)
        {
LABEL_23:
          v11 = v9 - 52;
          if ((v9 - 33) >= 5)
            v12 = -48;
          else
            v12 = -64;
          if (v11 >= 6)
            v10 = v12;
          else
            v10 = -72;
          goto LABEL_29;
        }
        v10 = -64;
      }
    }
LABEL_29:
    v13 = *(_QWORD *)(v6 + v10 + 16);
    v6 = v13 & 0xFFFFFFFFFFFFFFF8;
    if ((v13 & 4) != 0)
      v6 = *(_QWORD *)v6;
  }
  return result;
}

uint64_t sub_22EFC0BA0(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  if (sub_22E47260C(a1) || sub_22EA0E1A0(a1) || sub_22EFC0C3C(a1))
    return 1;
  result = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (result)
    v3 = *(unsigned __int8 *)(result + 16) - 27 > 0xFFFFFFFD;
  else
    v3 = 0;
  if (v3)
    return *(_BYTE *)(result + 19) & 1;
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 > 1)
    return 0;
  result = sub_22F10CF48(result);
  if (result)
    return *(_BYTE *)(result + 19) & 1;
  return result;
}

BOOL sub_22EFC0C3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 120)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22EFC0C9C(uint64_t a1)
{
  if (sub_22E47DA60(a1))
    return 1;
  if (sub_22E631558(a1))
    return 3;
  if (sub_22EFC0D04(a1))
    return 2;
  if (sub_22EFC0D64(a1))
    return 4;
  return 0;
}

BOOL sub_22EFC0D04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 128)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22EFC0D64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 328)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22EFC0DC4(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;

  result = sub_22EFC0E48(a1 + 13, a2);
  v5 = a1[18] & 0xFFFFFFFFFFFFFFF8;
  if ((a1[18] & 6) == 0 && v5 != 0)
  {
    if (a2)
    {
      v7 = *(_QWORD *)(a2 + 144);
      if ((v7 & 6) != 0)
        v8 = 0;
      else
        v8 = v7 & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      v8 = 0;
    }
    result = sub_22EA0F280((unint64_t *)(v5 + 64), v8);
  }
  if (a2)
  {
    if ((*(_BYTE *)(a2 + 82) & 1) != 0)
      a1[10] |= 0x10000uLL;
  }
  return result;
}

uint64_t sub_22EFC0E48(unint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 112);
    a1[1] = v3;
    v4 = sub_22E3CD31C((uint64_t *)(v3 + 104), v3);
    *a1 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    *((_DWORD *)a1 - 19) |= *(_DWORD *)(v4 + 28) & 0x260000;
    v5 = (unint64_t *)a1[1];
  }
  else
  {
    v5 = a1 - 13;
    a1[1] = (unint64_t)(a1 - 13);
  }
  return sub_22E7B7A74((uint64_t)(v5 + 13), (uint64_t)(a1 - 13));
}

uint64_t sub_22EFC0EB0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

uint64_t sub_22EFC0EB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t result;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  if (!a1 || (v1 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v2 = *(_QWORD *)(a1 + 16);
    v3 = v2 & 0xFFFFFFFFFFFFFFF8;
    if ((v2 & 4) != 0)
      v3 = *(_QWORD *)v3;
    for (i = *(_WORD *)(v3 + 8) & 0x7F; i != 83; i = *(_WORD *)(v3 + 8) & 0x7F)
    {
      v5 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v5 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_20;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_19;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_10;
        if (i == 24)
        {
LABEL_9:
          v5 = -48;
        }
        else
        {
LABEL_19:
          if (i != 70)
          {
LABEL_20:
            v7 = i - 52;
            if ((i - 33) >= 5)
              v8 = -48;
            else
              v8 = -64;
            if (v7 >= 6)
              v5 = v8;
            else
              v5 = -72;
            goto LABEL_10;
          }
          v5 = -64;
        }
      }
LABEL_10:
      v6 = *(_QWORD *)(v3 + v5 + 16);
      v3 = v6 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 4) != 0)
        v3 = *(_QWORD *)v3;
    }
    v1 = v3 - 40;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 88) + 2000) + 1) & 1) == 0)
    return sub_22EFBAACC(a1);
  v9 = *(uint64_t **)(a1 + 120);
  result = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (result)
    v11 = *(_BYTE *)(result + 16) == 26;
  else
    v11 = 0;
  if (!v11)
  {
    v17 = v9;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
      return 0;
    result = sub_22F10CF48(result);
    v9 = v17;
    if (!result)
      return result;
  }
  v12 = *(_QWORD *)(result + 16);
  v13 = (unsigned __int16)(v12 >> 38);
  if (!(unsigned __int16)(v12 >> 38))
    return 0;
  result = 0;
  LODWORD(v14) = 0;
  v15 = 8 * v13;
  do
  {
    v16 = *v9;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v9 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
    {
      v14 = (v14 + 1);
      if ((*(_DWORD *)(v16 + 96) & 0x600) != 0x400
        && (*(_DWORD *)(v16 + 96) & 0x600) != 0x200
        && *(_QWORD *)(v16 + 88) < 8uLL)
      {
        result = v14;
      }
    }
    ++v9;
    v15 -= 8;
  }
  while (v15);
  return result;
}

uint64_t sub_22EFC10B0(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  uint64_t result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v1)
    v2 = *(_BYTE *)(v1 + 16) == 26;
  else
    v2 = 0;
  if (v2
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v15 = a1, v1 = sub_22F10CF48(v1), a1 = v15, v1))
  {
    if ((*(_QWORD *)(v1 + 16) & 0x3FFFC000000000) == 0x4000000000)
      return 1;
  }
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(_BYTE *)(v4 + 16) == 26;
  else
    v5 = 0;
  if (!v5)
  {
    v16 = a1;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
      return 0;
    v4 = sub_22F10CF48(v4);
    a1 = v16;
    if (!v4)
      return 0;
  }
  if ((*(_DWORD *)(v4 + 20) & 0x3FFF80) == 0)
    return 0;
  v6 = *(_QWORD *)(a1 + 120);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(unsigned __int8 *)(v7 + 16);
  if (v7)
    v9 = v8 == 26;
  else
    v9 = 0;
  if (v9)
  {
    v8 = 26;
LABEL_23:
    v10 = v6;
    goto LABEL_24;
  }
  v13 = *(_QWORD *)(a1 + 120);
  v17 = a1;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
  {
    v6 = *(_QWORD *)(a1 + 120);
    goto LABEL_23;
  }
  sub_22F10CF48(v7);
  v6 = v13;
  v10 = *(_QWORD *)(v17 + 120);
  v7 = *(_QWORD *)(*(_QWORD *)(v17 + 48) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(unsigned __int8 *)(v7 + 16);
LABEL_24:
  if (v8 != 26)
  {
    v14 = v6;
    v18 = v10;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
    {
      v7 = 0;
      goto LABEL_26;
    }
    v7 = sub_22F10CF48(v7);
    v6 = v14;
    v10 = v18;
    if (!v7)
      goto LABEL_26;
  }
  v7 = (unsigned __int16)(*(_QWORD *)(v7 + 16) >> 38);
LABEL_26:
  v11 = v10 + 8 * v7;
  v12 = v6 + 8;
  if (v12 == v11)
    return 1;
  result = 1;
  while ((*(_DWORD *)(*(_QWORD *)v12 + 96) & 0x600) == 0x200
       || (*(_DWORD *)(*(_QWORD *)v12 + 96) & 0x600) == 0x400
       || *(_QWORD *)(*(_QWORD *)v12 + 88) >= 8uLL)
  {
    v12 += 8;
    if (v12 == v11)
      return result;
  }
  return 0;
}

unint64_t sub_22EFC129C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int i;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;

  if (!a1 || (v2 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 4) != 0)
      v4 = *(_QWORD *)v4;
    for (i = *(_WORD *)(v4 + 8) & 0x7F; i != 83; i = *(_WORD *)(v4 + 8) & 0x7F)
    {
      v6 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v6 = -56;
          goto LABEL_22;
        }
        if (i == 81)
          goto LABEL_22;
      }
      else
      {
        if (i <= 0x18)
        {
          if (i == 16)
            goto LABEL_9;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_22;
          if (i == 24)
          {
LABEL_9:
            v6 = -48;
            goto LABEL_22;
          }
        }
        if (i == 70)
        {
          v6 = -64;
          goto LABEL_22;
        }
      }
      v7 = i - 52;
      if ((i - 33) >= 5)
        v8 = -48;
      else
        v8 = -64;
      if (v7 >= 6)
        v6 = v8;
      else
        v6 = -72;
LABEL_22:
      v9 = *(_QWORD *)(v4 + v6 + 16);
      v4 = v9 & 0xFFFFFFFFFFFFFFF8;
      if ((v9 & 4) != 0)
        v4 = *(_QWORD *)v4;
    }
    v2 = v4 - 40;
  }
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + 15088) + 148) == 11)
    goto LABEL_30;
  if ((*(_DWORD *)(a1 + 28) & 0x100) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v13 = *v12;
  v14 = *((unsigned int *)v12 + 2);
  if ((_DWORD)v14)
  {
    v15 = 8 * v14;
    for (j = *v12; *(_WORD *)(*(_QWORD *)j + 32) != 155; j += 8)
    {
      result = 0;
      v15 -= 8;
      if (!v15)
        return result;
    }
  }
  else
  {
    j = *v12;
  }
  if (j == v13 + 8 * v14)
    return 0;
LABEL_30:
  result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 112) + 104), *(_QWORD *)(a1 + 112));
  if (result)
  {
    v11 = result;
    while ((*(_BYTE *)(v11 + 29) & 2) != 0 || (*(_QWORD *)(v11 + 80) & 0xE000) != 0x2000)
    {
      if ((*(_BYTE *)(v11 + 104) & 3) != 0)
        return 0;
      result = sub_22E3CD31C((uint64_t *)(v11 + 104), v11);
      v11 = result;
      if (!result)
        return result;
    }
    return 1;
  }
  return result;
}

uint64_t sub_22EFC1480(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int i;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  char v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v1 = a1;
  if (!a1 || (v2 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 4) != 0)
      v4 = *(_QWORD *)v4;
    for (i = *(_WORD *)(v4 + 8) & 0x7F; i != 83; i = *(_WORD *)(v4 + 8) & 0x7F)
    {
      v6 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v6 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_16;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_15;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_22;
        if (i == 24)
        {
LABEL_9:
          v6 = -48;
        }
        else
        {
LABEL_15:
          if (i != 70)
          {
LABEL_16:
            v7 = i - 52;
            if ((i - 33) >= 5)
              v8 = -48;
            else
              v8 = -64;
            if (v7 >= 6)
              v6 = v8;
            else
              v6 = -72;
            goto LABEL_22;
          }
          v6 = -64;
        }
      }
LABEL_22:
      v9 = *(_QWORD *)(v4 + v6 + 16);
      v4 = v9 & 0xFFFFFFFFFFFFFFF8;
      if ((v9 & 4) != 0)
        v4 = *(_QWORD *)v4;
    }
    v2 = v4 - 40;
  }
  v10 = *(_QWORD *)(v2 + 88);
  v11 = *(uint64_t **)(v10 + 2000);
  v12 = *v11;
  if ((*v11 & 0x10) != 0)
  {
    v27 = 0;
    if (sub_22EFBF6E8(a1, &v27)
      && (*(_BYTE *)(v27 + 82) & 1) != 0
      && (*(_QWORD *)(v1 + 80) & 0xE000) == 0x2000)
    {
      if ((*(_BYTE *)(v1 + 104) & 3) != 0 || (v14 = sub_22E3CD31C((uint64_t *)(v1 + 104), v1)) == 0)
      {
LABEL_34:
        LOBYTE(v13) = 1;
        return v13 & 1;
      }
      v15 = v14;
      while ((*(_BYTE *)(v15 + 29) & 2) != 0 || (*(_QWORD *)(v15 + 80) & 0xE000) != 0x2000)
      {
        if ((*(_BYTE *)(v15 + 104) & 3) == 0)
        {
          v15 = sub_22E3CD31C((uint64_t *)(v15 + 104), v15);
          if (v15)
            continue;
        }
        goto LABEL_34;
      }
    }
    v11 = *(uint64_t **)(v10 + 2000);
    v12 = *v11;
  }
  if ((v12 & 0x100) != 0)
    goto LABEL_64;
  if ((*((_DWORD *)v11 + 13) & 0x80) == 0 && !sub_22EA0E0E4(v1))
  {
    if ((*(_QWORD *)(v1 + 80) & 0x20000) == 0 || (*(_QWORD *)(v1 + 80) & 0xE000) == 0x2000)
    {
      v19 = (uint64_t *)(v1 + 104);
      if ((*(_BYTE *)(v1 + 104) & 3) == 0)
      {
        v21 = 0;
        while (1)
        {
          v22 = sub_22E3CD31C(v19, v1);
          if (!v22)
            break;
          v1 = v22;
          v23 = *(_QWORD *)(v22 + 80);
          if ((v23 & 0x8000000) != 0 || !*(_QWORD *)(v22 + 128))
            v24 = (v23 >> 29) & 1;
          else
            LOBYTE(v24) = 1;
          v25 = *(_QWORD *)(v22 + 16);
          v26 = v25 & 0xFFFFFFFFFFFFFFF8;
          if ((v25 & 4) != 0)
            v26 = *(_QWORD *)(v26 + 8);
          if ((*(_WORD *)(v26 + 8) & 0x7F) != 0x53
            || (*(_BYTE *)(v22 + 29) & 2) != 0
            || (LOBYTE(v13) = 0, (v23 & 0x20000) != 0) && (*(_QWORD *)(v22 + 80) & 0xE000) != 0x2000)
          {
            v21 |= v24;
            v19 = (uint64_t *)(v22 + 104);
            LOBYTE(v13) = v21;
            if ((*(_BYTE *)(v1 + 104) & 3) == 0)
              continue;
          }
          return v13 & 1;
        }
        LOBYTE(v13) = v21;
        return v13 & 1;
      }
    }
LABEL_64:
    LOBYTE(v13) = 0;
    return v13 & 1;
  }
  LOBYTE(v13) = 0;
  if ((*(_QWORD *)(v1 + 80) & 0x20000) != 0 && (*(_QWORD *)(v1 + 80) & 0xE000) != 0x2000)
  {
    v16 = (uint64_t *)(v1 + 104);
    if ((*(_BYTE *)(v1 + 104) & 3) == 0)
    {
      v13 = 0;
      while (1)
      {
        v17 = sub_22E3CD31C(v16, v1);
        if (!v17)
          return v13 & 1;
        v1 = v17;
        v18 = *(_QWORD *)(v17 + 80);
        if ((v18 & 0x8000000) == 0)
        {
          if (*(_QWORD *)(v17 + 128))
            break;
        }
        v13 |= (v18 >> 29) & 1;
        if ((v18 & 0x20000000) != 0)
          goto LABEL_58;
        if ((v18 & 0x20000) != 0 && (*(_QWORD *)(v17 + 80) & 0xE000) != 0x2000)
          goto LABEL_64;
LABEL_59:
        v16 = (uint64_t *)(v17 + 104);
        if ((*(_BYTE *)(v1 + 104) & 3) != 0)
          return v13 & 1;
      }
      v13 = 1;
LABEL_58:
      if ((v18 & 0x2E000) != 0x22000)
        goto LABEL_64;
      goto LABEL_59;
    }
    goto LABEL_64;
  }
  return v13 & 1;
}

unint64_t sub_22EFC17CC(uint64_t a1)
{
  unint64_t result;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  result = sub_22F3AC3F0(a1);
  if (result)
  {
    if (*(_BYTE *)(result + 16) == 26 && (v3 = *(_QWORD *)(result + 16), (v3 & 0x3C0000000000000) != 0))
    {
      v4 = (unsigned __int16)(v3 >> 38);
      if (*(_QWORD *)(result + 16) == 25)
        v4 = 0;
      v6 = *(_QWORD *)(v2 + 8 * v4 + 16);
      v5 = v6 & 0xFFFFFFFF00000000;
      v6 = v6;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    return v6 | v5;
  }
  return result;
}

uint64_t sub_22EFC182C(uint64_t a1)
{
  unint64_t v1;
  int v2;

  if ((~*(_DWORD *)(a1 + 40) & 7) != 0)
    return 0;
  v1 = *(_QWORD *)(a1 + 40) & 0xFFFFFFFFFFFFFFF8;
  v2 = *(_DWORD *)v1;
  if (*(_DWORD *)v1 >= 3u)
    v2 = 3;
  if (v2 != 1)
    return 0;
  else
    return *(_QWORD *)(v1 + 16);
}

uint64_t sub_22EFC1868(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;

  if (*(_QWORD *)(a1 + 144) < 8uLL)
    return 0;
  v2 = *(_QWORD *)(a1 + 144) & 6;
  if (v2 == 4)
    return 3;
  if (v2 == 2)
    v3 = 2;
  else
    v3 = 4;
  if (v2)
    return v3;
  else
    return 1;
}

uint64_t sub_22EFC18B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int i;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int j;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  int v42;
  _BYTE v43[32];
  int v44;

  if (sub_22E9A9E30(a1))
    return 0;
  if (!a1 || (v2 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 4) != 0)
      v4 = *(_QWORD *)v4;
    for (i = *(_WORD *)(v4 + 8) & 0x7F; i != 83; i = *(_WORD *)(v4 + 8) & 0x7F)
    {
      v6 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v6 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_17;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_16;
        if (i == 16)
          goto LABEL_10;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_23;
        if (i == 24)
        {
LABEL_10:
          v6 = -48;
        }
        else
        {
LABEL_16:
          if (i != 70)
          {
LABEL_17:
            v7 = i - 52;
            if ((i - 33) >= 5)
              v8 = -48;
            else
              v8 = -64;
            if (v7 >= 6)
              v6 = v8;
            else
              v6 = -72;
            goto LABEL_23;
          }
          v6 = -64;
        }
      }
LABEL_23:
      v9 = *(_QWORD *)(v4 + v6 + 16);
      v4 = v9 & 0xFFFFFFFFFFFFFFF8;
      if ((v9 & 4) != 0)
        v4 = *(_QWORD *)v4;
    }
    v2 = v4 - 40;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + 2000) + 123) & 0x20) == 0)
    return 0;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = v10 & 0xFFFFFFFFFFFFFFF8;
  if ((v10 & 4) != 0)
    v11 = *(_QWORD *)v11;
  if ((*(_WORD *)(v11 + 8) & 0x7Eu) - 34 < 4 || sub_22EFC0844(a1) || (*(_BYTE *)(a1 + 82) & 2) != 0)
    return 0;
  if (!a1 || (v12 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v13 = *(_QWORD *)(a1 + 16);
    v14 = v13 & 0xFFFFFFFFFFFFFFF8;
    if ((v13 & 4) != 0)
      v14 = *(_QWORD *)v14;
    for (j = *(_WORD *)(v14 + 8) & 0x7F; j != 83; j = *(_WORD *)(v14 + 8) & 0x7F)
    {
      v16 = -40;
      if (j > 70)
      {
        if (j == 71)
        {
          v16 = -56;
        }
        else if (j != 81)
        {
          goto LABEL_51;
        }
      }
      else
      {
        if (j > 0x18)
          goto LABEL_50;
        if (j == 16)
          goto LABEL_44;
        if (((1 << j) & 0x1066) != 0)
          goto LABEL_57;
        if (j == 24)
        {
LABEL_44:
          v16 = -48;
        }
        else
        {
LABEL_50:
          if (j != 70)
          {
LABEL_51:
            v17 = j - 52;
            if ((j - 33) >= 5)
              v18 = -48;
            else
              v18 = -64;
            if (v17 >= 6)
              v16 = v18;
            else
              v16 = -72;
            goto LABEL_57;
          }
          v16 = -64;
        }
      }
LABEL_57:
      v19 = *(_QWORD *)(v14 + v16 + 16);
      v14 = v19 & 0xFFFFFFFFFFFFFFF8;
      if ((v19 & 4) != 0)
        v14 = *(_QWORD *)v14;
    }
    v12 = v14 - 40;
  }
  v38 = *(_QWORD *)(v12 + 88);
  v39 = v43;
  v40 = v43;
  v41 = 4;
  v42 = 0;
  v22 = *(_QWORD *)(a1 + 48);
  v23 = *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0);
  if (v23)
    v24 = *(unsigned __int8 *)(v23 + 16) - 27 > 0xFFFFFFFD;
  else
    v24 = 0;
  if (!v24)
  {
    v23 = sub_22F10CF48(v23);
    v22 = *(_QWORD *)(a1 + 48);
  }
  v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v25)
    v26 = (*(_DWORD *)(v25 + 16) & 0xFF800FF) == 86507531;
  else
    v26 = 0;
  if (v26)
    goto LABEL_82;
  v27 = *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0);
  if (!v27 || *(unsigned __int8 *)(v27 + 16) - 27 <= 0xFFFFFFFD)
    v27 = sub_22F10CF48(v27);
  v28 = *(_QWORD *)(v27 + 24);
  if (v40 != v39)
    memset(v40, 255, 8 * v41);
  HIDWORD(v41) = 0;
  v42 = 0;
  v44 = -1;
  sub_22EFC525C((uint64_t)&v38, v28);
  if (v29)
  {
    v22 = *(_QWORD *)(a1 + 48);
LABEL_82:
    v30 = *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0);
    if ((v30 && *(_BYTE *)(v30 + 16) == 26
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
       && (v30 = sub_22F10CF48(v30)) != 0)
      && (*(_DWORD *)(v30 + 20) & 0x3FC000) != 0)
    {
      goto LABEL_85;
    }
    v31 = *(_QWORD *)(a1 + 120);
    v32 = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
    if ((!v32 || *(_BYTE *)(v32 + 16) != 26)
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v32 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26
       || (v32 = sub_22F10CF48(v32)) == 0)
      || !(unsigned __int16)(*(_QWORD *)(v32 + 16) >> 38))
    {
      v20 = 1;
      goto LABEL_86;
    }
    v33 = 8 * (unsigned __int16)(*(_QWORD *)(v32 + 16) >> 38) - 8;
    while (1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)v31 + 48);
      if (v40 != v39)
      {
        if (v41 >= 0x21 && 4 * (HIDWORD(v41) - v42) < v41)
        {
          llvm::SmallPtrSetImplBase::shrink_and_clear((llvm::SmallPtrSetImplBase *)&v39);
          goto LABEL_96;
        }
        memset(v40, 255, 8 * v41);
      }
      HIDWORD(v41) = 0;
      v42 = 0;
LABEL_96:
      v44 = -1;
      sub_22EFC525C((uint64_t)&v38, v34);
      v31 += 8;
      if ((_DWORD)v35)
        v36 = v33 == 0;
      else
        v36 = 1;
      v33 -= 8;
      if (v36)
      {
        v20 = v35;
        goto LABEL_86;
      }
    }
  }
LABEL_85:
  v20 = 0;
LABEL_86:
  if (v40 != v39)
    free(v40);
  return v20;
}

BOOL sub_22EFC1D94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 407)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22EFC1DF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(uint64_t **)v1;
  v3 = *(unsigned int *)(v1 + 8);
  i = *(uint64_t **)v1;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    for (i = *(uint64_t **)v1; *(_WORD *)(*i + 32) != 407; ++i)
    {
      v5 -= 8;
      if (!v5)
        return 0;
    }
  }
  if (i == &v2[v3])
    return 0;
  do
  {
    v7 = *v2++;
    v6 = v7;
  }
  while (*(_WORD *)(v7 + 32) != 407);
  return *(_DWORD *)(v6 + 36) == 2;
}

BOOL sub_22EFC1E78(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(uint64_t **)v1;
  v3 = *(unsigned int *)(v1 + 8);
  i = *(uint64_t **)v1;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    for (i = *(uint64_t **)v1; *(_WORD *)(*i + 32) != 407; ++i)
    {
      v5 -= 8;
      if (!v5)
        return 0;
    }
  }
  if (i == &v2[v3])
    return 0;
  do
  {
    v7 = *v2++;
    v6 = v7;
  }
  while (*(_WORD *)(v7 + 32) != 407);
  return *(_DWORD *)(v6 + 36) == 0;
}

BOOL sub_22EFC1EFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(uint64_t **)v1;
  v3 = *(unsigned int *)(v1 + 8);
  i = *(uint64_t **)v1;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    for (i = *(uint64_t **)v1; *(_WORD *)(*i + 32) != 407; ++i)
    {
      v5 -= 8;
      if (!v5)
        return 0;
    }
  }
  if (i == &v2[v3])
    return 0;
  do
  {
    v7 = *v2++;
    v6 = v7;
  }
  while (*(_WORD *)(v7 + 32) != 407);
  return *(_DWORD *)(v6 + 36) == 1;
}

BOOL sub_22EFC1F80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 11)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

unint64_t sub_22EFC1FE0(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;
  BOOL v4;

  v1 = *(_QWORD *)(a1 + 144);
  result = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 6) != 2 || result == 0)
  {
    v4 = (v1 & 6) != 4 || result == 0;
    if (v4 || (*(_BYTE *)(result + 8) & 4) == 0)
      return 0;
    else
      return *(_QWORD *)(result + 48);
  }
  return result;
}

BOOL sub_22EFC201C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;

  if ((*(_BYTE *)(a1 + 28) & 0x80) != 0)
    return 0;
  v2 = sub_22EFC20A4(a1);
  if (((0x17u >> v2) & 1) != 0)
    return v2 == 1;
  v3 = 1;
  v4 = sub_22EFC20FC(a1, 1);
  v6 = v4;
  if (v4 && sub_22EFBF6E8(v4, &v6) && v6)
    return *(_BYTE *)(v6 + 82) & 1;
  return v3;
}

uint64_t sub_22EFC20A4(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  BOOL v4;
  _DWORD *v5;

  v1 = *(_QWORD *)(a1 + 144) & 6;
  v2 = *(_QWORD *)(a1 + 144) & 0xFFFFFFFFFFFFFFF8;
  if (v1 != 4 || v2 == 0)
  {
    v4 = v1 != 2 || v2 == 0;
    v5 = (_DWORD *)(*(_QWORD *)(a1 + 144) & 0xFFFFFFFFFFFFFFF8);
    if (v4)
      return 0;
  }
  else if ((*(_BYTE *)(v2 + 8) & 4) == 0 || (v5 = *(_DWORD **)(v2 + 48)) == 0)
  {
    v5 = (_DWORD *)(v2 + 16);
  }
  return ((*v5 >> 1) & 3u) + 1;
}

unint64_t sub_22EFC20FC(uint64_t a1, int a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t result;
  _DWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;

  if (!a1 || (*(_DWORD *)(a1 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
    goto LABEL_12;
  v4 = *(_WORD *)(a1 + 80) & 0x7F;
  v5 = -40;
  if (v4 > 0x46)
  {
    if (v4 == 83)
      goto LABEL_7;
    if (v4 == 71)
    {
      v5 = -56;
      goto LABEL_7;
    }
    if (v4 != 81)
    {
LABEL_52:
      v26 = v4 - 52;
      v27 = v4 - 33 >= 5;
      v28 = -48;
      if (!v27)
        v28 = -64;
      if (v26 >= 6)
        v5 = v28;
      else
        v5 = -72;
    }
  }
  else
  {
    if (v4 > 0x18)
      goto LABEL_51;
    if (v4 == 16)
    {
LABEL_6:
      v5 = -48;
      goto LABEL_7;
    }
    if (((1 << v4) & 0x1066) == 0)
    {
      if (v4 == 24)
        goto LABEL_6;
LABEL_51:
      if (v4 == 70)
      {
        v5 = -64;
        goto LABEL_7;
      }
      goto LABEL_52;
    }
  }
LABEL_7:
  v6 = *(_QWORD *)(a1 + 72 + v5 + 16);
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 4) != 0)
    v7 = (_QWORD *)*v7;
  if (v7)
  {
    v8 = v7[8];
    if (v8)
    {
      if (((*(unsigned __int16 *)(v8 + 8) | (*(unsigned __int8 *)(v8 + 10) << 16)) & 0x100000) != 0
        && (*(_BYTE *)(v8 + 104) & 4) != 0
        && sub_22EA3D8FC(a1)
        && (*(_QWORD *)(a1 + 144) & 6) == 4)
      {
        v30 = *(_QWORD *)(a1 + 144) & 0xFFFFFFFFFFFFFFF8;
        if (v30)
        {
          v31 = *(_QWORD *)(v30 + 16);
          if (v31 >= 8)
          {
            v23 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 48);
            goto LABEL_39;
          }
        }
      }
    }
  }
LABEL_12:
  v32 = 0;
  v9 = sub_22EFBF86C(a1, &v32, 1);
  v10 = v32;
  if (!v9)
    v10 = a1;
  v11 = *(_QWORD *)(v10 + 144);
  v12 = v11 & 6;
  v13 = v11 & 0xFFFFFFFFFFFFFFF8;
  if (v12 != 2 || v13 == 0)
  {
    v15 = v12 != 4 || v13 == 0;
    if (v15 || (*(_BYTE *)(v13 + 8) & 4) == 0 || (v13 = *(_QWORD *)(v13 + 48)) == 0)
    {
      v16 = *(_QWORD *)(a1 + 144);
      if ((a2 & 1) != 0)
      {
        v17 = *(_QWORD *)(a1 + 144) & 6;
        v18 = v16 & 0xFFFFFFFFFFFFFFF8;
        if (v17 == 4 && v18)
        {
          v20 = (_DWORD *)(v18 + 16);
        }
        else
        {
          result = 0;
          if (v17 != 2 || !v18)
            return result;
          v20 = (_DWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
        }
        if (((((*v20 >> 1) & 3) + 1) & 0xFFFFFFFD) == 0)
          return 0;
      }
      else
      {
        v18 = v16 & 0xFFFFFFFFFFFFFFF8;
        v17 = *(_QWORD *)(a1 + 144) & 6;
      }
      result = 0;
      if (v17 != 4 || !v18)
        return result;
      v21 = *(_QWORD *)(v18 + 16) & 0xFFFFFFFFFFFFFFF8;
      if (v21)
      {
        do
        {
          v22 = v21;
          if (a2 && (*(_BYTE *)sub_22EFE9368(v21) & 4) != 0)
            break;
          v21 = *(_QWORD *)sub_22EFE9368(v22) & 0xFFFFFFFFFFFFFFF8;
        }
        while (v21);
        v23 = *(_QWORD *)(v22 + 48);
        goto LABEL_39;
      }
      return 0;
    }
  }
  v29 = *(_QWORD *)v13;
  if (a2 && ((((v29 >> 1) & 3) + 1) & 0xFFFFFFFD) == 0)
    return 0;
  v23 = v29 & 0xFFFFFFFFFFFFFFF8;
LABEL_39:
  v33 = 0;
  v24 = sub_22EFBF86C(v23, &v33, 0);
  v25 = v33;
  if (!v24)
    v25 = 0;
  if (v25)
    return v25;
  else
    return v23;
}

uint64_t sub_22EFC23A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  unint64_t v11;
  uint64_t v12;

  v11 = *(_QWORD *)(a1 + 144) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(a1 + 144) & 6) != 2)
    v11 = 0;
  v12 = sub_22EFEB5C0(a2, a1, a3, a6, a4, a7, a8, v11);
  *(_QWORD *)(a1 + 144) = v12 & 0xFFFFFFFFFFFFFFF9 | 4;
  return sub_22EFE9B38(a3, v12, a5);
}

unint64_t sub_22EFC2420(uint64_t a1)
{
  if ((~*(_DWORD *)(a1 + 144) & 6) != 0)
    return 0;
  else
    return *(_QWORD *)(a1 + 144) & 0xFFFFFFFFFFFFFFF8;
}

__n128 sub_22EFC2438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  result.n128_u64[0] = *(_QWORD *)(a3 + 272);
  *(_QWORD *)(a1 + 8) = result.n128_u64[0];
  v4 = *(unsigned int *)(a2 + 8);
  v5 = *(unsigned int *)(a3 + 8);
  *(_DWORD *)a1 = v4;
  *(_DWORD *)(a1 + 4) = v5;
  v6 = a1 + 16;
  if ((_DWORD)v4)
  {
    v7 = 0;
    v8 = 8 * v4;
    v9 = v6 + 32 * v5;
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)a2 + v7) & 0xFFFFFFFFFFFFFFFCLL;
      v11 = *(_DWORD *)(v10 + 28) & 0x7F;
      v12 = v11 > 0x2F;
      v13 = (1 << v11) & 0xC00000060000;
      if (!v12 && v13 != 0)
      {
        v28 = a1;
        v26 = a3;
        v22 = v5;
        v23 = a2;
        v24 = v7;
        v25 = v6;
        v21 = v8;
        v27 = v9;
        v20 = sub_22EFBAEA4(v10);
        a3 = v26;
        v9 = v27;
        v8 = v21;
        v5 = v22;
        v7 = v24;
        v6 = v25;
        a2 = v23;
        v10 = v20;
        a1 = v28;
      }
      *(_QWORD *)(v9 + v7) = v10;
      v7 += 8;
    }
    while (v8 != v7);
  }
  if ((_DWORD)v5)
  {
    v15 = 0;
    v16 = 32 * v5;
    do
    {
      v17 = (_OWORD *)(v6 + v15);
      v18 = *(_QWORD *)a3 + v15;
      result = *(__n128 *)v18;
      v19 = *(_OWORD *)(v18 + 16);
      *v17 = *(_OWORD *)v18;
      v17[1] = v19;
      v15 += 32;
    }
    while (v16 != v15);
  }
  return result;
}

unint64_t sub_22EFC2530(unint64_t result, int a2, int a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int i;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v3 = result;
  v4 = *(_QWORD *)(result + 144) & 6;
  v5 = *(_QWORD *)(result + 144) & 0xFFFFFFFFFFFFFFF8;
  if (v4 != 4 || v5 == 0)
  {
    if (v4 != 2)
      v5 = 0;
    *(_QWORD *)v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF9 | (2 * (a2 - 1));
    if (a2 == 2)
      return result;
    if (!a3)
      return result;
    if (*(_DWORD *)(v5 + 8))
      return result;
    *(_DWORD *)(v5 + 8) = a3;
    v16 = result;
    v15 = sub_22EFC72E8(result);
    v3 = v16;
    result = *(_QWORD *)(v15 + 16056);
    if (!result)
      return result;
    return (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 96))(result, v3);
  }
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v5 + 16) & 0xFFFFFFFFFFFFFFF9 | (2 * (a2 - 1));
  if (a2 != 2 && a3 && !*(_DWORD *)(v5 + 40))
  {
    *(_DWORD *)(v5 + 40) = a3;
    v7 = result;
    if ((*(_DWORD *)(result + 28) & 0x7F) != 0x53)
    {
      v8 = *(_QWORD *)(result + 16);
      v9 = v8 & 0xFFFFFFFFFFFFFFF8;
      if ((v8 & 4) != 0)
        v9 = *(_QWORD *)v9;
      for (i = *(_WORD *)(v9 + 8) & 0x7F; i != 83; i = *(_WORD *)(v9 + 8) & 0x7F)
      {
        v11 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v11 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_26;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_25;
          if (i == 16)
            goto LABEL_15;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_16;
          if (i == 24)
          {
LABEL_15:
            v11 = -48;
          }
          else
          {
LABEL_25:
            if (i != 70)
            {
LABEL_26:
              v13 = i - 52;
              if ((i - 33) >= 5)
                v14 = -48;
              else
                v14 = -64;
              if (v13 >= 6)
                v11 = v14;
              else
                v11 = -72;
              goto LABEL_16;
            }
            v11 = -64;
          }
        }
LABEL_16:
        v12 = *(_QWORD *)(v9 + v11 + 16);
        v9 = v12 & 0xFFFFFFFFFFFFFFF8;
        if ((v12 & 4) != 0)
          v9 = *(_QWORD *)v9;
      }
      v7 = v9 - 40;
    }
    result = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 16056);
    if (result)
      return (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 96))(result, v3);
  }
  return result;
}

uint64_t sub_22EFC2700(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (sub_22EFB5ED8(a1))
    return 1;
  v2 = *(_QWORD *)(a1 + 144);
  v3 = v2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 6) == 2 && v3 != 0)
  {
    v7 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_15;
  }
  if ((v2 & 6) == 4 && v3 != 0 && (*(_BYTE *)(v3 + 8) & 4) != 0)
  {
    v7 = *(_QWORD **)(v3 + 48);
    if (v7)
    {
LABEL_15:
      v8 = *v7 & 0xFFFFFFFFFFFFFFF8;
      if (v8)
      {
        v10 = 0;
        if ((sub_22EFBF6E8(v8, &v10) & 1) != 0)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
        v2 = *(_QWORD *)(a1 + 144);
        v3 = v2 & 0xFFFFFFFFFFFFFFF8;
      }
    }
  }
  result = 0;
  if (v3 && (v2 & 6) == 4)
  {
    v9 = *(_QWORD *)(v3 + 16) & 0xFFFFFFFFFFFFFFF8;
    if (v9)
    {
      v10 = 0;
      result = sub_22EFBF6E8(*(_QWORD *)(v9 + 48), &v10);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t sub_22EFC27F4(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 56);
  if ((v1 & 4) != 0 && (v4 = v1 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v4 + 16)))
    v2 = **(unsigned int ***)(v4 + 24);
  else
    v2 = (unsigned int *)(a1 + 64);
  return *v2 | ((unint64_t)*(unsigned int *)(a1 + 140) << 32);
}

uint64_t sub_22EFC2828(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  int v5;
  uint64_t result;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v19;
  int v20;
  uint64_t v27;
  uint64_t v28;
  int v30;
  int v31;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 7) != 0 || v2 == 0)
    return 0;
  v5 = sub_22EFC01DC(a1, 0);
  result = 838;
  if (v5 <= 476)
  {
    switch(v5)
    {
      case 411:
        goto LABEL_37;
      case 413:
        goto LABEL_47;
      case 418:
        goto LABEL_67;
      case 419:
        goto LABEL_66;
      case 421:
        goto LABEL_91;
      case 422:
        goto LABEL_90;
      case 423:
        return result;
      case 434:
        return 840;
      case 435:
        goto LABEL_99;
      case 436:
        goto LABEL_89;
      case 437:
        goto LABEL_93;
      case 438:
        goto LABEL_92;
      case 439:
        goto LABEL_106;
      default:
        goto LABEL_7;
    }
    return result;
  }
  if (v5 <= 839)
  {
    if (v5 > 819)
    {
      switch(v5)
      {
        case 820:
LABEL_66:
          result = 820;
          break;
        case 821:
LABEL_67:
          result = 821;
          break;
        case 822:
LABEL_91:
          result = 822;
          break;
        case 823:
        case 825:
        case 827:
          goto LABEL_7;
        case 824:
LABEL_92:
          result = 824;
          break;
        case 826:
LABEL_93:
          result = 826;
          break;
        case 828:
LABEL_89:
          result = 828;
          break;
        default:
          if (v5 != 838)
            goto LABEL_7;
          break;
      }
    }
    else
    {
      switch(v5)
      {
        case 477:
          goto LABEL_66;
        case 478:
        case 482:
        case 483:
        case 484:
          goto LABEL_7;
        case 479:
          goto LABEL_91;
        case 480:
          goto LABEL_90;
        case 481:
          return result;
        case 485:
          return 907;
        case 486:
          return 906;
        case 487:
          goto LABEL_89;
        case 488:
          goto LABEL_92;
        default:
          if (v5 == 811)
            return 811;
          goto LABEL_7;
      }
    }
    return result;
  }
  if (v5 > 905)
  {
    if (v5 == 906)
      return 906;
    if (v5 == 907)
      return 907;
LABEL_7:
    v7 = *(_QWORD *)(a1 + 16);
    v8 = (unint64_t *)(v7 & 0xFFFFFFFFFFFFFFF8);
    v9 = v7 & 0xFFFFFFFFFFFFFFF8;
    if ((v7 & 4) != 0)
      v9 = *v8;
    if ((*(_WORD *)(v9 + 8) & 0x7Eu) - 34 < 4)
    {
      v10 = *(_QWORD *)(a1 + 16) & 4;
    }
    else
    {
      if (!sub_22EFC0844(a1))
      {
        v11 = *(_QWORD *)(v2 + 16);
        switch(*(_DWORD *)v11)
        {
          case 4:
            if (*(_DWORD *)(v11 + 16) == 1886217058)
              goto LABEL_37;
            return 0;
          case 5:
            v13 = *(_DWORD *)(v11 + 16);
            v14 = *(unsigned __int8 *)(v11 + 20);
            if (v13 != 1919253090 || v14 != 111)
              return 0;
            goto LABEL_47;
          case 6:
            if (*(_DWORD *)(v11 + 16) == 1936549229 && *(_WORD *)(v11 + 20) == 29797)
              return 838;
            if (*(_DWORD *)(v11 + 16) == 1668113773 && *(_WORD *)(v11 + 20) == 31088)
              goto LABEL_66;
            if (*(_DWORD *)(v11 + 16) == 1668113773 && *(_WORD *)(v11 + 20) == 28781)
              goto LABEL_67;
            v19 = *(_DWORD *)(v11 + 16);
            v20 = *(unsigned __int16 *)(v11 + 20);
            if (v19 != 1819440243 || v20 != 28261)
              return 0;
            return 840;
          case 7:
            if (*(_DWORD *)(v11 + 16) == 1886217581 && *(_DWORD *)(v11 + 19) == 2037408624)
              goto LABEL_90;
            if (*(_DWORD *)(v11 + 16) == 1835885933 && *(_DWORD *)(v11 + 19) == 1702260589)
              goto LABEL_91;
            if (*(_DWORD *)(v11 + 16) == 1852994675 && *(_DWORD *)(v11 + 19) == 2037408622)
              goto LABEL_92;
            if (*(_DWORD *)(v11 + 16) == 1852994675 && *(_DWORD *)(v11 + 19) == 1886217070)
              goto LABEL_93;
            if (*(_DWORD *)(v11 + 16) == 1852994675 && *(_DWORD *)(v11 + 19) == 1952539502)
              goto LABEL_89;
            v30 = *(_DWORD *)(v11 + 16);
            v31 = *(_DWORD *)(v11 + 19);
            if (v30 != 1852994675 || v31 != 1886741614)
              return 0;
            goto LABEL_106;
          case 0xB:
            v27 = *(_QWORD *)(v11 + 16);
            v28 = *(_QWORD *)(v11 + 19);
            if (v27 != 0x657361636E727473 || v28 != 0x706D63657361636ELL)
              return 0;
            goto LABEL_99;
          default:
            return 0;
        }
      }
      v10 = *(_QWORD *)(a1 + 16) & 4;
      v8 = (unint64_t *)(*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8);
    }
    if (v10)
      v8 = (unint64_t *)*v8;
    if (v8)
    {
      if (sub_22EFC84D4((unint64_t)v8))
      {
        v12 = *(_DWORD **)(v2 + 16);
        if (*v12 == 4 && v12[4] == 1701147238)
          return 811;
      }
    }
    return 0;
  }
  if (v5 == 840)
    return 840;
  switch(v5)
  {
    case 885:
LABEL_90:
      result = 885;
      break;
    case 889:
LABEL_106:
      result = 889;
      break;
    case 892:
LABEL_47:
      result = 892;
      break;
    case 893:
LABEL_37:
      result = 893;
      break;
    case 895:
LABEL_99:
      result = 895;
      break;
    default:
      goto LABEL_7;
  }
  return result;
}

unint64_t sub_22EFC2C24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v9;
  llvm *v10[2];
  unsigned int v11;
  void *v12;
  __int128 v13;
  _BYTE v14[128];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 80);
  if ((v2 & 0x4000000000) != 0)
    return *(unsigned int *)(a1 + 136);
  v3 = *(_QWORD *)(a1 + 144) & 6;
  v4 = *(_QWORD *)(a1 + 144) & 0xFFFFFFFFFFFFFFF8;
  v5 = v3 != 2 || v4 == 0;
  if ((!v5
     || (v3 == 4 ? (v6 = v4 == 0) : (v6 = 1), !v6 && (*(_BYTE *)(v4 + 8) & 4) != 0 && (v4 = *(_QWORD *)(v4 + 48)) != 0))
    && (v9 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    *(_QWORD *)(a1 + 80) = v2 | 0x4000000000;
    v7 = sub_22EFC2C24(v9);
    *(_DWORD *)(a1 + 136) = v7;
  }
  else
  {
    v10[0] = 0;
    v10[1] = 0;
    v11 = 0;
    v12 = v14;
    v13 = xmmword_22F44E310;
    v15 = v17;
    v16 = 0x2000000000;
    sub_22F0BEC9C((uint64_t)v10, a1, 0);
    *(_QWORD *)(a1 + 80) |= 0x4000000000uLL;
    v7 = sub_22F0BCA28((uint64_t)v10);
    *(_DWORD *)(a1 + 136) = v7;
    if (v15 != v17)
      free(v15);
    if (v12 != v14)
      free(v12);
    llvm::deallocate_buffer(v10[0], (void *)(16 * v11));
  }
  return v7;
}

unint64_t sub_22EFC2D88(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, unsigned int a10)
{
  unint64_t v17;

  v17 = sub_22EFC7430(80, a1, a2, 0);
  return sub_22EFC5A18(v17, 49, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_22EFC2E2C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_22E3CD3D4(a1 + 2032, 88, 3);
  *(_DWORD *)v3 = 0;
  *(_DWORD *)(v3 + 4) = a2;
  result = sub_22EA41AB8(v3 + 8, 49, 0, 0);
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 8) = &off_24FAC2F90;
  *(_QWORD *)(v3 + 80) = 0;
  return result;
}

uint64_t sub_22EFC2E8C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  if ((*(_BYTE *)(a1 + 29) & 2) == 0 || *(_QWORD *)(a1 + 40))
    return 0;
  result = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 16) == 45)
      return *(_BYTE *)(sub_22F114198(*(_QWORD *)(v3 + 24)) + 75) & 1;
  }
  return result;
}

uint64_t sub_22EFC2EF4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v10;
  unsigned int v11;

  if ((*(_BYTE *)(a1 + 68) & 1) != 0)
  {
    v3 = *(_QWORD *)(a1 + 72);
    v2 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    v4 = v3 & 3;
    if (v4)
      v5 = v4 == 3;
    else
      v5 = 1;
    if (!v5)
      v2 = *(_QWORD *)(v2 + 8);
  }
  else
  {
    v2 = 0;
  }
  sub_22F007D7C((unsigned __int8 *)v2, a2, 0, (uint64_t)&v10);
  if (v11 >= 0x41)
    v6 = v10;
  else
    v6 = (uint64_t *)&v10;
  v7 = *v6;
  if (v11 >= 0x41 && v10 != 0)
    MEMORY[0x2348A0E84]();
  return v7;
}

BOOL sub_22EFC2F84(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  if ((*(_BYTE *)(a1 + 68) & 1) == 0 || *(_QWORD *)(a1 + 40))
    return 0;
  v2 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFCLL;
  v3 = *(_QWORD *)(a1 + 72) & 3;
  if ((_DWORD)v3 && (_DWORD)v3 != 3)
    v2 = *(_QWORD *)(v2 + 8);
  return (*(_BYTE *)(v2 + 2) & 1) == 0 && sub_22EFC2EF4(a1, a2) == 0;
}

uint64_t sub_22EFC2FDC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (sub_22EFC2F84(a1, a2))
    return 1;
  result = sub_22E4EF458(a1);
  if ((_DWORD)result)
  {
    result = 0;
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v4)
    {
      if (*(_BYTE *)(v4 + 16) == 45)
      {
        v5 = sub_22F114198(*(_QWORD *)(v4 + 24));
        result = sub_22EFC3500(v5);
        if (result)
        {
          v6 = result;
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(result + 104) + 96), *(_QWORD *)(result + 104));
          return (**(_QWORD **)(v6 + 128) >> 9) & 1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_22EFC306C(unint64_t a1)
{
  unint64_t v1;
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;

  do
  {
    v1 = a1;
    if ((*(_BYTE *)(a1 + 29) & 0x80) == 0)
      break;
    a1 = sub_22EFB5D7C(a1);
  }
  while (a1 != v1);
  v2 = *(_DWORD *)(v1 + 68);
  if (v2 <= 3)
  {
    v3 = *(_QWORD *)(v1 + 16);
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 4) != 0)
      v4 = *(_QWORD *)v4;
    v5 = (*(_WORD *)(v4 + 8) & 0x7E) - 34;
    if (v4)
      v6 = v4 - 64;
    else
      v6 = 0;
    if (v5 >= 4)
      v7 = 0;
    else
      v7 = v6;
    v8 = sub_22EFC3500(v7);
    v9 = sub_22EFC3B90(v8);
    if (v9)
    {
      v10 = v9;
      v11 = 0;
LABEL_14:
      ++v11;
      v12 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v10 + 32))(v10);
      *(_DWORD *)(v12 + 68) = *(_DWORD *)(v12 + 68) & 3 | (4 * v11);
      while (1)
      {
        v10 = *(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v10)
          break;
        if ((*(_DWORD *)(v10 + 28) & 0x7Fu) - 49 < 3)
          goto LABEL_14;
      }
    }
    v2 = *(_DWORD *)(v1 + 68);
  }
  return (v2 >> 2) - 1;
}

unint64_t sub_22EFC3148(uint64_t a1)
{
  uint64_t v1;
  int v2;
  _QWORD *v4;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(a1 + 72);
  v2 = v1 & 3;
  if ((v1 & 3) != 0 && v2 != 3)
  {
    v4 = (_QWORD *)(v1 & 0xFFFFFFFFFFFFFFFCLL);
    if ((*(_BYTE *)(a1 + 68) & 1) != 0)
      v4 = (_QWORD *)*v4;
    if (v4)
      goto LABEL_19;
  }
  if ((*(_BYTE *)(a1 + 68) & 1) == 0)
    goto LABEL_20;
  v4 = (_QWORD *)(v1 & 0xFFFFFFFFFFFFFFFCLL);
  if ((v1 & 3) != 0 && v2 != 3)
  {
    v4 = (_QWORD *)v4[1];
    if (v4)
      goto LABEL_19;
LABEL_20:
    v8 = sub_22EFBB490(a1);
    v6 = v8;
    v7 = HIDWORD(v8);
    return v6 | (v7 << 32);
  }
  if (!v4)
    goto LABEL_20;
LABEL_19:
  v6 = *(_DWORD *)(a1 + 64);
  sub_22F0D60E4((uint64_t)v4);
  return v6 | (v7 << 32);
}

uint64_t sub_22EFC31D8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, int a9)
{
  char v13;
  uint64_t v15;

  v13 = a2;
  v15 = sub_22EA41AB8(a1, a2, a5, a6);
  *(_QWORD *)(v15 + 40) = a7;
  *(_QWORD *)(v15 + 48) = 0;
  *(_DWORD *)(v15 + 56) = a9;
  *(_QWORD *)(v15 + 64) = 0;
  *(_QWORD *)(v15 + 80) = 0;
  *(_QWORD *)(v15 + 88) = 0;
  *(_WORD *)(v15 + 72) = *(_WORD *)(v15 + 72) & 0xE000 | v13 & 0x7F;
  *(_QWORD *)(v15 + 96) = a4 | 2;
  *(_QWORD *)a1 = &off_24FAC2630;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = a1;
  sub_22EFC3290((unint64_t *)(v15 + 96), a8);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 72) & 0xFF901FFF | ((a3 & 7) << 13);
  return a1;
}

uint64_t sub_22EFC3290(unint64_t *a1, uint64_t a2)
{
  unint64_t *v3;
  uint64_t v5;
  unint64_t v6;

  if (a2)
  {
    v5 = *(_QWORD *)(a2 + 104);
    a1[1] = v5;
    v6 = sub_22E3CD31C((uint64_t *)(v5 + 96), v5);
    *a1 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    *((_DWORD *)a1 - 17) |= *(_DWORD *)(v6 + 28) & 0x260000;
    v3 = (unint64_t *)a1[1];
  }
  else
  {
    v3 = a1 - 12;
    a1[1] = (unint64_t)(a1 - 12);
  }
  return sub_22E7B7A74((uint64_t)(v3 + 12), (uint64_t)(a1 - 12));
}

unint64_t sub_22EFC32F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unint64_t v5;

  v1 = *(unsigned int *)(a1 + 116);
  if (!(_DWORD)v1)
    v1 = *(unsigned int *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 120);
  if ((v2 & 4) != 0 && (v5 = v2 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v5 + 16)))
    v3 = **(unsigned int ***)(v5 + 24);
  else
    v3 = (unsigned int *)(a1 + 56);
  return *v3 | (unint64_t)(v1 << 32);
}

uint64_t sub_22EFC3338(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104);
}

unint64_t sub_22EFC3340(unint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;

  *(_DWORD *)(result + 72) |= 0x20000u;
  if (result)
  {
    v1 = result;
    if ((*(_DWORD *)(result + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
    {
      v2 = *(_QWORD *)(result + 16);
      v3 = v2 & 0xFFFFFFFFFFFFFFF8;
      if ((v2 & 4) != 0)
        v3 = *(_QWORD *)v3;
      for (i = *(_WORD *)(v3 + 8) & 0x7F; i != 83; i = *(_WORD *)(v3 + 8) & 0x7F)
      {
        v5 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v5 = -56;
            goto LABEL_22;
          }
          if (i == 81)
            goto LABEL_22;
        }
        else
        {
          if (i <= 0x18)
          {
            if (i == 16)
              goto LABEL_9;
            if (((1 << i) & 0x1066) != 0)
              goto LABEL_22;
            if (i == 24)
            {
LABEL_9:
              v5 = -48;
              goto LABEL_22;
            }
          }
          if (i == 70)
          {
            v5 = -64;
            goto LABEL_22;
          }
        }
        v6 = i - 52;
        if ((i - 33) >= 5)
          v7 = -48;
        else
          v7 = -64;
        if (v6 >= 6)
          v5 = v7;
        else
          v5 = -72;
LABEL_22:
        v8 = *(_QWORD *)(v3 + v5 + 16);
        v3 = v8 & 0xFFFFFFFFFFFFFFF8;
        if ((v8 & 4) != 0)
          v3 = *(_QWORD *)v3;
      }
      v9 = sub_22E3CD3D4(*(_QWORD *)(v3 + 48) + 2032, 104, 3);
      v10 = 0;
      *(_BYTE *)(v9 + 10) = 1;
      *(_WORD *)(v9 + 8) = -16300;
      *(_QWORD *)v9 = 0x8007FF8000203380;
      *(_OWORD *)(v9 + 12) = 0u;
      *(_OWORD *)(v9 + 28) = 0u;
      *(_OWORD *)(v9 + 44) = 0u;
      *(_OWORD *)(v9 + 60) = 0u;
      *(_OWORD *)(v9 + 72) = 0u;
      v11 = v1;
      *(_QWORD *)(v9 + 88) = v1;
      *(_QWORD *)(v9 + 96) = 0;
      do
      {
        result = v11 + 96;
        v12 = *(_BYTE *)(v11 + 96);
        *(_QWORD *)(v11 + 128) = v9;
        if ((v12 & 3) != 0)
        {
          if (v10)
            return result;
          v10 = 1;
        }
        result = sub_22E3CD31C((uint64_t *)result, v11);
        if (result == v1)
          break;
        v11 = result;
      }
      while (result);
    }
  }
  return result;
}

unint64_t sub_22EFC3500(unint64_t result)
{
  unint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v1 = result;
  v2 = *(_DWORD *)(result + 72);
  if ((v2 & 0x10000) == 0)
  {
    if ((v2 & 0x100000) != 0)
    {
      v3 = *(_QWORD *)(result + 40);
      v4 = v3 & 0xFFFFFFFFFFFFFFF8;
      v5 = (v3 & 7) != 0 || v4 == 0;
      if (!v5 && (*(_BYTE *)(v4 + 4) & 8) != 0)
      {
        v6 = sub_22EFC8764(result);
        (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 88) + 16048) + 64))(*(_QWORD *)(*(_QWORD *)(v6 + 88) + 16048), v4);
      }
    }
    if ((*(_DWORD *)(v1 + 28) & 0x7Fu) - 38 > 0xFFFFFFFC)
    {
      v9 = *(_QWORD *)(v1 + 128);
      if (v9)
        return *(_QWORD *)(v9 + 88);
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v1 + 104) + 96), *(_QWORD *)(v1 + 104));
      v9 = *(_QWORD *)(v1 + 128);
      if (v9)
        return *(_QWORD *)(v9 + 88);
      else
        return 0;
    }
    else
    {
      v7 = 0;
      v8 = v1;
      while ((*(_BYTE *)(v8 + 74) & 1) == 0)
      {
        if ((*(_BYTE *)(v8 + 96) & 3) != 0)
        {
          if (v7)
            return 0;
          v7 = 1;
        }
        v8 = sub_22E3CD31C((uint64_t *)(v8 + 96), v8);
        result = 0;
        if (v8 == v1 || !v8)
          return result;
      }
      return v8;
    }
  }
  return result;
}

_QWORD *sub_22EFC35F8(unint64_t a1, uint64_t a2, const void *a3, unint64_t a4)
{
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int i;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = *(_QWORD *)(a1 + 120);
  if ((v7 & 4) == 0)
  {
    v9 = a1;
    if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
    {
      v10 = *(_QWORD *)(a1 + 16);
      v11 = v10 & 0xFFFFFFFFFFFFFFF8;
      if ((v10 & 4) != 0)
        v11 = *(_QWORD *)v11;
      for (i = *(_WORD *)(v11 + 8) & 0x7F; i != 83; i = *(_WORD *)(v11 + 8) & 0x7F)
      {
        v13 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v13 = -56;
            goto LABEL_22;
          }
          if (i == 81)
            goto LABEL_22;
        }
        else
        {
          if (i <= 0x18)
          {
            if (i == 16)
              goto LABEL_9;
            if (((1 << i) & 0x1066) != 0)
              goto LABEL_22;
            if (i == 24)
            {
LABEL_9:
              v13 = -48;
              goto LABEL_22;
            }
          }
          if (i == 70)
          {
            v13 = -64;
            goto LABEL_22;
          }
        }
        v14 = i - 52;
        if ((i - 33) >= 5)
          v15 = -48;
        else
          v15 = -64;
        if (v14 >= 6)
          v13 = v15;
        else
          v13 = -72;
LABEL_22:
        v16 = *(_QWORD *)(v11 + v13 + 16);
        v11 = v16 & 0xFFFFFFFFFFFFFFF8;
        if ((v16 & 4) != 0)
          v11 = *(_QWORD *)v11;
      }
      v9 = v11 - 40;
    }
    v17 = sub_22E3CD3D4(*(_QWORD *)(v9 + 88) + 2032, 32, 3);
    *(_QWORD *)(v17 + 24) = 0;
    v7 = v17 | 4;
    *(_QWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = 0;
    *(_DWORD *)(v17 + 16) = 0;
    *(_QWORD *)(a1 + 120) = v17 | 4;
  }
  return sub_22EFBB3E4((_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8), a2, a3, a4);
}

