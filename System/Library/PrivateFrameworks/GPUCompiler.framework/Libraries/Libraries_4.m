uint64_t sub_22E5F1D68(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, __int128 *, _QWORD *), uint64_t a6)
{
  uint64_t v9;
  BOOL v10;
  uint64_t *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm::PHINode *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  llvm::PHINode *v28;
  uint64_t v29;
  uint64_t v30;
  llvm::LLVMContext *v31;
  uint64_t *v32;
  llvm::LLVMContext *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  __int128 v44[3];
  uint64_t v45;
  _QWORD v46[3];
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v45 = 0;
  v9 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
  if (v9)
    v10 = (*(_DWORD *)(v9 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
  else
    v10 = 0;
  if (!v10)
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
      v9 = sub_22F10CF48(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0));
    else
      v9 = 0;
  }
  v11 = (uint64_t *)sub_22E620E9C((uint64_t)a1, (llvm::LLVMContext *)v9, &v45, a2);
  v12 = *(_OWORD *)(a3 + 16);
  v44[0] = *(_OWORD *)a3;
  v44[1] = v12;
  v44[2] = *(_OWORD *)(a3 + 32);
  v13 = *(_QWORD *)(a2 + 8);
  LOWORD(v48) = 257;
  sub_22E3BEE6C(a1 + 34, v44, v13, (uint64_t)v46, (uint64_t)&v50);
  v14 = v51;
  *(_OWORD *)a3 = v50;
  *(_OWORD *)(a3 + 16) = v14;
  *(_OWORD *)(a3 + 32) = v52;
  if ((*(_BYTE *)(a3 + 24) & 3) != 0)
    v15 = (uint64_t *)sub_22F28ABCC(a3, a1);
  else
    v15 = *(uint64_t **)a3;
  if ((*(_BYTE *)(a2 + 24) & 3) != 0)
    v16 = (uint64_t *)sub_22F28ABCC(a2, a1);
  else
    v16 = *(uint64_t **)a2;
  v17 = *(_QWORD *)(a2 + 8);
  LOWORD(v52) = 257;
  v41 = sub_22E42129C(a1 + 34, v17, v16, v11, (uint64_t)&v50);
  *(_QWORD *)&v50 = "omp.arraycpy.body";
  LOWORD(v52) = 259;
  v38 = a2;
  v18 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v50 = "omp.arraycpy.done";
  LOWORD(v52) = 259;
  v40 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v50 = "omp.arraycpy.isempty";
  LOWORD(v52) = 259;
  v19 = sub_22E3C18F4((uint64_t)(a1 + 34), 32, v16, v41, (uint64_t)&v50);
  v20 = llvm::User::operator new((llvm::User *)0x40);
  v39 = v18;
  MEMORY[0x23489C09C](v20, v40, v18, v19, 0);
  LOWORD(v52) = 257;
  sub_22E3C12C8(a1 + 34, v20, (uint64_t)&v50);
  v21 = a1[40];
  sub_22E5ED9B4(a1, v18, 0);
  sub_22EF5CCD0(*(_QWORD *)(a1[18] + 144), *(_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v50);
  v22 = v50;
  v23 = *v15;
  *(_QWORD *)&v50 = "omp.arraycpy.srcElementPast";
  LOWORD(v52) = 259;
  v24 = (llvm::PHINode *)sub_22E3C4B80(a1 + 34, v23, 2, (uint64_t)&v50);
  sub_22E3C4C50(v24, (uint64_t)v15, v21);
  v25 = *(_QWORD *)(a3 + 8);
  v26 = (*(_QWORD *)(a3 + 16) | v22) & -(*(_QWORD *)(a3 + 16) | v22);
  v27 = *v16;
  *(_QWORD *)&v50 = "omp.arraycpy.destElementPast";
  LOWORD(v52) = 259;
  v28 = (llvm::PHINode *)sub_22E3C4B80(a1 + 34, v27, 2, (uint64_t)&v50);
  sub_22E3C4C50(v28, (uint64_t)v16, v21);
  v29 = *(_QWORD *)(v38 + 8);
  v30 = *(_QWORD *)(v38 + 16) | v22;
  *(_QWORD *)&v50 = v28;
  *((_QWORD *)&v50 + 1) = v29;
  *(_QWORD *)&v51 = v30 & -v30;
  DWORD2(v51) = 0;
  v52 = 0uLL;
  v46[0] = v24;
  v46[1] = v25;
  v46[2] = v26;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  a5(a6, &v50, v46);
  v31 = *(llvm::LLVMContext **)(v38 + 8);
  *(_QWORD *)&v50 = "omp.arraycpy.dest.element";
  LOWORD(v52) = 259;
  v32 = (uint64_t *)sub_22E4363E4(a1 + 34, v31, (uint64_t *)v28, 1, (uint64_t)&v50);
  v33 = *(llvm::LLVMContext **)(a3 + 8);
  *(_QWORD *)&v50 = "omp.arraycpy.src.element";
  LOWORD(v52) = 259;
  v34 = sub_22E4363E4(a1 + 34, v33, (uint64_t *)v24, 1, (uint64_t)&v50);
  *(_QWORD *)&v50 = "omp.arraycpy.done";
  LOWORD(v52) = 259;
  v35 = sub_22E3C18F4((uint64_t)(a1 + 34), 32, v32, v41, (uint64_t)&v50);
  v36 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v36, v40, v39, v35, 0);
  LOWORD(v52) = 257;
  sub_22E3C12C8(a1 + 34, v36, (uint64_t)&v50);
  sub_22E3C4C50(v28, (uint64_t)v32, a1[40]);
  sub_22E3C4C50(v24, v34, a1[40]);
  return sub_22E5ED9B4(a1, v40, 1);
}

unint64_t sub_22E5F21E0(uint64_t a1, unint64_t a2, __int128 *a3, __int128 *a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[3];
  _OWORD v24[3];
  _OWORD v25[8];
  uint64_t v26;
  _OWORD v27[8];
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _OWORD v47[2];
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;

  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu)
     - 2 > 3)
  {
    BYTE9(v39) = 1;
    v19 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
    *(_QWORD *)&v39 = *(_QWORD *)(a1 + 2312);
    BYTE8(v39) = *(_BYTE *)(a1 + 2893);
    *(_BYTE *)(a1 + 2893) = 0;
    v20 = *(_QWORD *)(a1 + 2872);
    *(_QWORD *)&v38 = v19;
    *((_QWORD *)&v38 + 1) = v20;
    *(_QWORD *)(a1 + 2872) = v19;
    *(_QWORD *)&v41 = 0;
    v40 = (unint64_t)a1;
    DWORD2(v41) = 0;
    v42 = 0uLL;
    LODWORD(v43) = 0;
    v21 = a4[1];
    v29 = *a4;
    v30 = v21;
    v31 = a4[2];
    sub_22E5BC134((uint64_t *)&v40 + 1, a1, a6, (uint64_t)&v29);
    v22 = a3[1];
    v29 = *a3;
    v30 = v22;
    v31 = a3[2];
    sub_22E5BC134((uint64_t *)&v40 + 1, v40, a5, (uint64_t)&v29);
    sub_22E5BC320((uint64_t)&v42, v40 + 2904);
    sub_22F2840EC((uint64_t)&v42);
    sub_22E4D89CC(a1);
    return sub_22F283FC4((uint64_t)&v38);
  }
  else if ((*a7 & 0xFE) == 0x70 && (*(_DWORD *)a7 & 0xFC0000) == 0x540000)
  {
    v12 = a3[1];
    v55 = *a3;
    v56 = v12;
    v57 = a3[2];
    sub_22E6281E0(*(_QWORD **)(a1 + 144), a2, (uint64_t)&v52);
    v29 = v55;
    v30 = v56;
    v31 = v57;
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
    v49 = v52;
    v50 = v53;
    *(_QWORD *)&v51 = v54;
    LODWORD(v40) = 0;
    *((_QWORD *)&v38 + 1) = 0;
    v39 = 0uLL;
    *(_QWORD *)&v41 = 0;
    *((_QWORD *)&v40 + 1) = 0;
    v42 = 0uLL;
    *(_QWORD *)((char *)&v43 + 4) = 2;
    LODWORD(v38) = 0;
    v44 = 0u;
    v45 = 0u;
    sub_22E3C113C((uint64_t)&v38, &v29, a2, 2, &v49, v13);
    v14 = a4[1];
    v49 = *a4;
    v50 = v14;
    v51 = a4[2];
    sub_22E6281E0(*(_QWORD **)(a1 + 144), a2, (uint64_t)v47);
    v55 = v49;
    v56 = v50;
    v57 = v51;
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
    v52 = v47[0];
    v53 = v47[1];
    v54 = v48;
    v30 = 0uLL;
    LODWORD(v31) = 0;
    *((_QWORD *)&v29 + 1) = 0;
    *((_QWORD *)&v31 + 1) = 0;
    *(_QWORD *)&v32 = 0;
    v33 = 0uLL;
    *(_QWORD *)((char *)&v34 + 4) = 2;
    LODWORD(v29) = 0;
    v35 = 0u;
    v36 = 0u;
    sub_22E3C113C((uint64_t)&v29, &v55, a2, 2, &v52, v15);
    v27[6] = v44;
    v27[7] = v45;
    v28 = v46;
    v27[2] = v40;
    v27[3] = v41;
    v27[4] = v42;
    v27[5] = v43;
    v27[0] = v38;
    v27[1] = v39;
    v25[6] = v35;
    v25[7] = v36;
    v26 = v37;
    v25[2] = v31;
    v25[3] = v32;
    v25[4] = v33;
    v25[5] = v34;
    v25[0] = v29;
    v25[1] = v30;
    return sub_22E4FC06C((_QWORD *)a1, (uint64_t)v27, (uint64_t)v25, a2);
  }
  else
  {
    v17 = a3[1];
    v24[0] = *a3;
    v24[1] = v17;
    v24[2] = a3[2];
    v18 = a4[1];
    v23[0] = *a4;
    v23[1] = v18;
    v23[2] = a4[2];
    *(_QWORD *)&v38 = a1;
    *((_QWORD *)&v38 + 1) = a7;
    *(_QWORD *)&v39 = a6;
    *((_QWORD *)&v39 + 1) = a5;
    return sub_22E5F1D68((_QWORD *)a1, (uint64_t)v24, (uint64_t)v23, a2, (void (*)(uint64_t, __int128 *, _QWORD *))sub_22E6011A0, (uint64_t)&v38);
  }
}

uint64_t sub_22E5F2534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  unint64_t v9;
  unsigned int *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _BOOL4 v25;
  unsigned int *v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t *v31;
  unsigned __int8 v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _BOOL4 v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL4 v47;
  _BOOL4 v48;
  _BOOL4 v49;
  BOOL v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  uint64_t v62;
  BOOL v63;
  int v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  unsigned int v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  _BOOL4 v94;
  __int128 v95;
  unint64_t v96;
  uint64_t *v97;
  _BOOL4 v98;
  int v99;
  unsigned __int8 v100;
  uint64_t *v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  _OWORD v130[3];
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _OWORD v144[8];
  uint64_t v145;
  _BYTE v146[56];
  _BYTE v147[64];
  _BYTE v148[32];
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  char v152[8];
  unint64_t v153;
  llvm *v154;
  uint64_t v155;
  unsigned int v156;
  llvm *v157[2];
  unsigned int v158;
  _OWORD v159[2];
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  _DWORD *v170;
  uint64_t v171;
  _QWORD v172[5];

  v172[2] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 320))
    return 0;
  v5 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 76) & 8) != 0)
  {
    v7 = *(_DWORD *)(a2 + 8) - 56;
    v8 = v7 > 0x2A;
    v9 = (0x6000001CF91uLL >> v7) & 1;
    if (v8)
      LODWORD(v9) = 0;
    v99 = v9;
  }
  else
  {
    v99 = 0;
  }
  v157[1] = 0;
  v157[0] = 0;
  v158 = 0;
  v10 = *(unsigned int **)(a2 + 24);
  if (v10)
  {
    v13 = *v10;
    v11 = (uint64_t *)(v10 + 4);
    v12 = v13;
    if (v13)
    {
      v14 = 8 * v12;
      v15 = v11;
      while (*(_DWORD *)(*v15 + 8) != 43)
      {
        ++v15;
        v14 -= 8;
        if (!v14)
          goto LABEL_24;
      }
    }
    else
    {
      v15 = v11;
    }
    v16 = &v11[v12];
    if (v15 != v16)
    {
      v18 = *v15;
LABEL_17:
      v19 = *(unsigned int *)(v18 + 16);
      if ((_DWORD)v19)
      {
        v20 = (uint64_t *)(v18 + 64);
        v21 = 8 * v19;
        do
        {
          v22 = *v20++;
          *(_QWORD *)v146 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v22 + 16) + 32))(*(_QWORD *)(v22 + 16));
          LODWORD(v167) = *(_DWORD *)(v18 + 48);
          sub_22F28430C((uint64_t)v147, (uint64_t)v157, (uint64_t *)v146, &v167);
          v21 -= 8;
        }
        while (v21);
      }
      v23 = v15 + 1;
      v5 = a1;
      while (v23 != v16)
      {
        v24 = *v23++;
        v18 = v24;
        if (*(_DWORD *)(v24 + 8) == 43)
        {
          v15 = v23 - 1;
          goto LABEL_17;
        }
      }
    }
  }
LABEL_24:
  v155 = 0;
  v154 = 0;
  v156 = 0;
  v170 = v172;
  v171 = 0x400000000;
  sub_22F421BB4((uint64_t)&v170, *(_DWORD *)(a2 + 8));
  v25 = 0;
  if ((_DWORD)v171 == 1)
    v25 = *v170 == 89;
  v26 = *(unsigned int **)(a2 + 24);
  if (v26)
  {
    v29 = *v26;
    v27 = (uint64_t *)(v26 + 4);
    v28 = v29;
    if (v29)
    {
      v30 = 8 * v28;
      v31 = v27;
      while (*(_DWORD *)(*v31 + 8) != 29)
      {
        ++v31;
        v30 -= 8;
        if (!v30)
          goto LABEL_31;
      }
      v98 = v25;
    }
    else
    {
      v98 = v25;
      v31 = v27;
    }
    v33 = &v27[v28];
    if (v31 == v33)
    {
      v32 = 0;
    }
    else
    {
      v100 = 0;
      v92 = (uint64_t *)(v5 + 2904);
      v90 = (uint64_t *)(a3 + 40);
      v34 = *v31;
      v91 = a3;
LABEL_36:
      v35 = *(unsigned int *)(v34 + 16);
      if ((_DWORD)v35)
      {
        v36 = (uint64_t *)(v34 + 40);
        v37 = (uint64_t *)(v34 + 40 + 8 * v35);
        v97 = &v37[v35];
        v101 = v97;
        do
        {
          v38 = *v37;
          v39 = *(_QWORD **)(*v36 + 16);
          v40 = (*(uint64_t (**)(_QWORD *))(*v39 + 32))(v39);
          if (v158)
          {
            v42 = ((v40 >> 4) ^ (v40 >> 9)) & (v158 - 1);
            v43 = *((_QWORD *)v157[0] + 2 * v42);
            if (v40 == v43)
            {
              v41 = 1;
            }
            else
            {
              v76 = 1;
              do
              {
                v41 = v43 != -4096;
                if (v43 == -4096)
                  break;
                v77 = v42 + v76++;
                v42 = v77 & (v158 - 1);
                v43 = *((_QWORD *)v157[0] + 2 * v42);
              }
              while (v40 != v43);
            }
          }
          else
          {
            v41 = 0;
          }
          v44 = (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(v5 + 1856) + 32))(*(_QWORD *)(v5 + 1856), v39);
          v45 = v44;
          v46 = *(_QWORD *)(v38 + 16);
          v47 = v41;
          if (!v98 && !v41)
          {
            if (v44)
            {
              if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                              + 16) & 0xFE) != 0x28)
              {
                if (!v46)
                  goto LABEL_62;
                v63 = sub_22F282498(v46);
                v47 = v41;
                if (!v63)
                  goto LABEL_62;
              }
            }
          }
          if (!v99
            || ((v48 = v47, v49 = sub_22F10AFE4(v39[6], *(_QWORD *)(*(_QWORD *)(v5 + 144) + 144)), v47 = v48, v49)
              ? (v50 = v45 == 0)
              : (v50 = 1),
                v50
             || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                           + 16) & 0xFE) != 0x28
             || v46 && (v51 = sub_22F282498(v46), v47 = v48, v51)))
          {
            v94 = v47;
            v100 |= v47;
            *(_QWORD *)v146 = (*(uint64_t (**)(_QWORD *))(*v39 + 32))(v39);
            sub_22F294270((uint64_t)v147, (uint64_t)&v154, v146);
            if (v147[16])
            {
              v96 = v46;
              v93 = *(_QWORD *)(*v101 + 16);
              v52 = *(_QWORD *)(*(_QWORD *)(v5 + 144) + 144);
              v53 = *(_QWORD *)(*v36 + 8);
              sub_22EFF605C(*v36);
              *(_QWORD *)v147 = 0;
              sub_22EFF69F0((uint64_t)v152, v52, (uint64_t)v39, v45 != 0, v53, 1, v54, v147, 0);
              if (v45)
                goto LABEL_55;
              v69 = sub_22E4E6434(v5, (uint64_t)v152);
              if (!v69 || (v69 & 4) != 0)
              {
                if ((v69 & 4) != 0)
                {
                  v55 = v5;
                  sub_22E619C24(v69 & 0xFFFFFFFFFFFFFFF8, v153, 0, 1, v5, (uint64_t)v147);
                }
                else
                {
LABEL_55:
                  v55 = v5;
                  sub_22E4D8D7C(v147);
                }
                v56 = *(_QWORD *)&v147[24];
                v57 = *(_QWORD *)&v147[32];
                v58 = *(_QWORD *)&v148[24];
                v59 = *(_QWORD *)(v96 + 48);
                if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v59 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                + 16) & 0xFEu)
                   - 2 > 3)
                {
                  *(_QWORD *)v147 = v93;
                  sub_22E3CEC9C((uint64_t)v92, v147, (__int128 *)&v147[8], (uint64_t)v146);
                  v5 = v55;
                  sub_22E4C6274(v55, v96);
                  *(_QWORD *)v146 = v93;
                  *(_QWORD *)v147 = 0;
                  if (sub_22E3CED3C(v92, v146, v147))
                  {
                    **(_QWORD **)v147 = -8192;
                    *(int32x2_t *)(v55 + 2912) = vadd_s32(*(int32x2_t *)(v55 + 2912), (int32x2_t)0x1FFFFFFFFLL);
                  }
                  *(_QWORD *)v146 = v96;
                  *(_QWORD *)v147 = 0;
                  v64 = sub_22E3CED3C(v92, v146, v147);
                  v65 = *(_QWORD *)v147;
                  if (!v64)
                    v65 = *(_QWORD *)(v55 + 2904) + 56 * *(unsigned int *)(v55 + 2920);
                  v66 = *(_OWORD *)(v65 + 8);
                  v67 = *(_OWORD *)(v65 + 40);
                  v168 = *(_OWORD *)(v65 + 24);
                  v169 = v67;
                  v167 = v66;
                  v68 = v91;
                  if (v94)
                  {
                    *(_QWORD *)v147 = (*(uint64_t (**)(_QWORD *))(*v39 + 32))(v39);
                    if (!*((_DWORD *)sub_22F29449C((uint64_t)v157, (uint64_t *)v147) + 2))
                    {
                      v70 = *(_QWORD *)(*v36 + 8);
                      sub_22E6281E0(*(_QWORD **)(v55 + 144), v70, (uint64_t)&v161);
                      *(_OWORD *)v147 = v167;
                      *(_OWORD *)&v147[16] = v168;
                      *(_OWORD *)&v147[32] = v169;
                      v71 = *(_QWORD *)(*(_QWORD *)(v55 + 144) + 144);
                      *(_OWORD *)v146 = v161;
                      *(_OWORD *)&v146[16] = v162;
                      *(_QWORD *)&v146[32] = v163;
                      v116 = 0;
                      v117 = 0;
                      v115 = 0;
                      v118 = 0;
                      v119 = 0;
                      v120 = 0;
                      v121 = 0;
                      v122 = 0;
                      v123 = 2;
                      v114 = 0;
                      v124 = 0u;
                      v125 = 0u;
                      sub_22E3C113C((uint64_t)&v114, (__int128 *)v147, v70, 0, (__int128 *)v146, v71);
                      sub_22EFF605C(*v36);
                      v73 = sub_22F25F748(v55, (uint64_t)&v114, v72);
                      sub_22E5B9A78(*(_QWORD *)(*(_QWORD *)(v55 + 144) + 808), v55, v39, &v167);
                      *(_OWORD *)v146 = v167;
                      *(_OWORD *)&v146[16] = v168;
                      *(_OWORD *)&v146[32] = v169;
                      v74 = *(_QWORD *)(*v36 + 8);
                      sub_22E6281E0(*(_QWORD **)(v55 + 144), v74, (uint64_t)&v164);
                      *(_OWORD *)v147 = *(_OWORD *)v146;
                      *(_OWORD *)&v147[16] = *(_OWORD *)&v146[16];
                      *(_OWORD *)&v147[32] = *(_OWORD *)&v146[32];
                      v75 = *(_QWORD *)(*(_QWORD *)(v55 + 144) + 144);
                      v161 = v164;
                      v162 = v165;
                      *(_QWORD *)&v163 = v166;
                      v104 = 0;
                      v105 = 0;
                      v103 = 0;
                      v106 = 0;
                      v107 = 0;
                      v108 = 0;
                      v109 = 0;
                      v110 = 0;
                      v111 = 2;
                      v102 = 0;
                      v112 = 0u;
                      v113 = 0u;
                      sub_22E3C113C((uint64_t)&v102, (__int128 *)v147, v74, 0, &v161, v75);
                      sub_22E4E87FC(v55, v73, &v102, 0);
                      *(_QWORD *)v146 = v96;
                      *(_QWORD *)v147 = 0;
                      if (sub_22E3CED3C(v92, v146, v147))
                      {
                        **(_QWORD **)v147 = -8192;
                        *(int32x2_t *)(v55 + 2912) = vadd_s32(*(int32x2_t *)(v55 + 2912), (int32x2_t)0x1FFFFFFFFLL);
                      }
                      *(_OWORD *)&v147[8] = v167;
                      *(_OWORD *)&v147[24] = v168;
                      *(_OWORD *)&v147[40] = v169;
                      *(_QWORD *)v147 = v96;
                      sub_22E3CEC9C((uint64_t)v92, v147, (__int128 *)&v147[8], (uint64_t)v146);
                    }
                  }
                  *(_OWORD *)v147 = v167;
                  *(_OWORD *)&v147[16] = v168;
                  *(_OWORD *)&v147[32] = v169;
                }
                else
                {
                  v81 = v151;
                  v82 = *((_QWORD *)&v150 + 1);
                  v83 = v150;
                  v84 = v149;
                  v85 = *(_OWORD *)&v148[8];
                  v86 = *(_QWORD *)v148;
                  v87 = *(_QWORD *)&v147[56];
                  v88 = *(_QWORD *)v147;
                  v89 = *(_OWORD *)&v147[40];
                  v95 = *(_OWORD *)&v147[8];
                  v5 = v55;
                  sub_22E4C8440(v55, v96, (uint64_t)v146);
                  v60 = (_BYTE *)sub_22EFBC5B4(v96);
                  if ((*v60 & 0xFE) == 0x76 && (v61 = v60, !sub_22E4C9FC8(v5, (uint64_t)v60)))
                  {
                    v130[0] = *(_OWORD *)&v146[8];
                    v130[1] = *(_OWORD *)&v146[24];
                    v130[2] = *(_OWORD *)&v146[40];
                    v126 = v95;
                    v127 = v56;
                    v128 = v57;
                    v129 = v89;
                    *(_QWORD *)v147 = v5;
                    *(_QWORD *)&v147[8] = v93;
                    *(_QWORD *)&v147[16] = v61;
                    sub_22E5F1D68((_QWORD *)v5, (uint64_t)v130, (uint64_t)&v126, v59, (void (*)(uint64_t, __int128 *, _QWORD *))sub_22E6012C0, (uint64_t)v147);
                  }
                  else
                  {
                    v161 = *(_OWORD *)&v146[8];
                    v162 = *(_OWORD *)&v146[24];
                    v163 = *(_OWORD *)&v146[40];
                    sub_22E6281E0(*(_QWORD **)(v5 + 144), v59, (uint64_t)v159);
                    v167 = v161;
                    v168 = v162;
                    v169 = v163;
                    v62 = *(_QWORD *)(*(_QWORD *)(v5 + 144) + 144);
                    v164 = v159[0];
                    v165 = v159[1];
                    v166 = v160;
                    memset(&v147[8], 0, 28);
                    *(_QWORD *)&v147[40] = 0;
                    *(_QWORD *)&v147[48] = 0;
                    *(_OWORD *)v148 = 0uLL;
                    *(_QWORD *)&v148[20] = 2;
                    *(_DWORD *)v147 = 0;
                    v149 = 0u;
                    v150 = 0u;
                    sub_22E3C113C((uint64_t)v147, &v167, v59, 2, &v164, v62);
                    v144[6] = v149;
                    v144[7] = v150;
                    v145 = v151;
                    v144[2] = *(_OWORD *)&v147[32];
                    v144[3] = *(_OWORD *)&v147[48];
                    v144[4] = *(_OWORD *)v148;
                    v144[5] = *(_OWORD *)&v148[16];
                    v144[0] = *(_OWORD *)v147;
                    v144[1] = *(_OWORD *)&v147[16];
                    v132 = v95;
                    v131 = v88;
                    v133 = v56;
                    v134 = v57;
                    v135 = v89;
                    v136 = v87;
                    v137 = v86;
                    v138 = v85;
                    v139 = v58;
                    v140 = v84;
                    v141 = v83;
                    v142 = v82;
                    v143 = v81;
                    sub_22E4FC06C((_QWORD *)v5, (uint64_t)v144, (uint64_t)&v131, v59);
                  }
                  sub_22E4C9A74(v5, (uint64_t)v146);
                  *(_OWORD *)v147 = *(_OWORD *)&v146[8];
                  *(_OWORD *)&v147[16] = *(_OWORD *)&v146[24];
                  *(_OWORD *)&v147[32] = *(_OWORD *)&v146[40];
                  v68 = v91;
                }
                sub_22E5BC134(v90, *(_QWORD *)(v68 + 32), (uint64_t)v39, (uint64_t)v147);
              }
            }
          }
          else
          {
LABEL_62:
            *(_QWORD *)v146 = (*(uint64_t (**)(_QWORD *))(*v39 + 32))(v39);
            sub_22F294270((uint64_t)v147, (uint64_t)&v154, v146);
          }
          ++v36;
          ++v101;
          ++v37;
        }
        while (v37 != v97);
      }
      v78 = v31 + 1;
      while (v78 != v33)
      {
        v79 = *v78++;
        v34 = v79;
        if (*(_DWORD *)(v79 + 8) == 29)
        {
          v31 = v78 - 1;
          goto LABEL_36;
        }
      }
      v32 = v100;
    }
  }
  else
  {
LABEL_31:
    v32 = 0;
  }
  v6 = v32 & ((_DWORD)v155 != 0);
  if (v170 != (_DWORD *)v172)
    free(v170);
  llvm::deallocate_buffer(v154, (void *)(8 * v156));
  llvm::deallocate_buffer(v157[0], (void *)(16 * v158));
  return v6;
}

uint64_t sub_22E5F310C(uint64_t result, unsigned int *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  llvm *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  __int128 v28;
  __int128 v29;
  llvm *v30[2];
  unsigned int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _QWORD v35[2];

  if (*(_QWORD *)(result + 320))
  {
    v30[0] = 0;
    v30[1] = 0;
    v31 = 0;
    if (a2)
    {
      v4 = result;
      v7 = *a2;
      v5 = (uint64_t *)(a2 + 4);
      v6 = v7;
      if (v7)
      {
        v8 = 8 * v6;
        v9 = v5;
        while (*(_DWORD *)(*v9 + 8) != 63)
        {
          ++v9;
          v8 -= 8;
          if (!v8)
            goto LABEL_23;
        }
      }
      else
      {
        v9 = v5;
      }
      v11 = &v5[v6];
      if (v9 == v11)
      {
LABEL_23:
        v10 = 0;
        a2 = 0;
      }
      else
      {
        v26 = (uint64_t *)(a3 + 40);
        v27 = (uint64_t *)(result + 2904);
        v12 = *v9;
LABEL_12:
        v13 = *(unsigned int *)(v12 + 16);
        if ((_DWORD)v13)
        {
          v14 = 0;
          v15 = v12 + 24;
          v16 = 8 * v13;
          v17 = v12 + 24 + 8 * v13;
          do
          {
            v18 = *(_QWORD *)(v17 + v14);
            v19 = *(_QWORD *)(*(_QWORD *)(v15 + v14) + 16);
            v35[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
            sub_22F294270((uint64_t)&v32, (uint64_t)v30, v35);
            if ((_BYTE)v33)
            {
              v20 = *(_QWORD *)(v18 + 16);
              sub_22E4C6274(v4, v20);
              v35[0] = v20;
              *(_QWORD *)&v32 = 0;
              v21 = sub_22E3CED3C(v27, v35, &v32);
              v22 = v32;
              if (!v21)
                v22 = *(_QWORD *)(v4 + 2904) + 56 * *(unsigned int *)(v4 + 2920);
              v28 = *(_OWORD *)(v22 + 24);
              v29 = *(_OWORD *)(v22 + 40);
              v23 = *(_QWORD *)(a3 + 32);
              v32 = *(_OWORD *)(v22 + 8);
              v33 = v28;
              v34 = v29;
              sub_22E5BC134(v26, v23, v19, (uint64_t)&v32);
            }
            v14 += 8;
          }
          while (v16 != v14);
        }
        v24 = v9 + 1;
        while (v24 != v11)
        {
          v25 = *v24++;
          v12 = v25;
          if (*(_DWORD *)(v25 + 8) == 63)
          {
            v9 = v24 - 1;
            goto LABEL_12;
          }
        }
        a2 = (unsigned int *)(8 * v31);
        v10 = v30[0];
      }
    }
    else
    {
      v10 = 0;
    }
    return llvm::deallocate_buffer(v10, a2);
  }
  return result;
}

uint64_t sub_22E5F32D4(int32x2_t *a1, unsigned int *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  int v22;
  int v23;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  unint64_t v55;
  __int128 v56[3];
  __int128 v57[3];
  _QWORD v58[4];
  __int16 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  llvm *v70;
  uint64_t v71;
  unsigned int v72;

  if (!*(_QWORD *)&a1[40])
    return 0;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  if (!a2)
    goto LABEL_54;
  v5 = *a2;
  v3 = (uint64_t *)(a2 + 4);
  v4 = v5;
  if (v5)
  {
    v6 = 8 * v4;
    v7 = v3;
    while (*(_DWORD *)(*v7 + 8) != 15)
    {
      ++v7;
      v6 -= 8;
      if (!v6)
        goto LABEL_54;
    }
  }
  else
  {
    v7 = v3;
  }
  v9 = &v3[v4];
  if (v7 == v9)
    goto LABEL_54;
  v51 = 0;
  v47 = (uint64_t *)&a1[363];
  v48 = (uint64_t *)&a1[34];
  v10 = *v7;
LABEL_12:
  v11 = *(unsigned int *)(v10 + 16);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = v10 + 24;
    v52 = v10 + 24 + 24 * v11;
    v53 = 8 * v11;
    v49 = v10 + 24 + 16 * v11;
    v50 = v10 + 24 + 8 * v11;
    do
    {
      v14 = *(_BYTE **)(v52 + v12);
      v15 = *(_QWORD *)(*(_QWORD *)(v13 + v12) + 16);
      v55 = *(_QWORD *)(v15 + 48);
      *(_QWORD *)&v67 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v15 + 32))(v15);
      sub_22F294270((uint64_t)&v63, (uint64_t)&v70, &v67);
      if (BYTE8(v64))
      {
        v67 = 0uLL;
        DWORD2(v68) = 0;
        *(_QWORD *)&v68 = 0;
        v16 = (_QWORD *)a1[18];
        v54 = v14;
        if ((*(_BYTE *)(v16[19] + 76) & 4) != 0 && (v17 = v16[18], *(_BYTE *)(*(_QWORD *)(v17 + 15088) + 81)))
        {
          v18 = *(_QWORD *)(v13 + v12);
          v19 = *(_QWORD *)(v18 + 8);
          sub_22EFF605C(v18);
          v63 = 0;
          sub_22EFF69F0((uint64_t)&v60, v17, v15, 1, v19, 1, v20, &v63, 0);
          sub_22E4D8D7C(&v63);
          v67 = v64;
          v68 = v65;
          v69 = v66;
          v58[0] = v15;
          v63 = 0;
          if (sub_22E3CED3C(v47, v58, &v63))
          {
            *(_QWORD *)v63 = -8192;
            a1[364] = vadd_s32(a1[364], (int32x2_t)0x1FFFFFFFFLL);
          }
        }
        else
        {
          v21 = *(_BYTE *)(v15 + 96);
          v22 = v21 & 7;
          if (v22 != 2)
          {
            v23 = v21 & 0x18;
            if (v22 || v23 != 16)
              goto LABEL_30;
          }
          v25 = *(_DWORD *)(v15 + 28) & 0x7F;
          if (v25 == 64 || v25 == 62)
            goto LABEL_45;
          v26 = *(_QWORD *)(v15 + 16);
          v27 = (_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF8);
          v28 = v26 & 0xFFFFFFFFFFFFFFF8;
          if ((v26 & 4) != 0)
            v28 = v27[1];
          v29 = *(_WORD *)(sub_22EFCBB30(v28) + 8) & 0x7F;
          if (v29 == 16 || v29 == 83)
            goto LABEL_30;
          if ((v26 & 4) != 0)
            v27 = (_QWORD *)*v27;
          if (((_WORD)v27[1] & 0x7Eu) - 34 >= 4)
          {
LABEL_45:
            v63 = (char *)v15;
            v30 = sub_22F25AD1C(v16 + 233, &v63)[1];
          }
          else
          {
LABEL_30:
            v30 = sub_22E6280CC((uint64_t)v16, v15, 0, 0);
          }
          v31 = sub_22E66C868(*(_QWORD *)&a1[18] + 280, *(_QWORD *)(v15 + 48), 0);
          v32 = sub_22EF5B404(*(_QWORD *)(*(_QWORD *)&a1[18] + 144), v15, 0);
          *(_QWORD *)&v67 = v30;
          *((_QWORD *)&v67 + 1) = v31;
          *(_QWORD *)&v68 = v32;
          DWORD2(v68) = 0;
          v69 = 0uLL;
          v14 = v54;
        }
        sub_22E4D8D7C(&v63);
        v60 = v64;
        v61 = v65;
        v62 = v66;
        if ((_DWORD)v71 == 1)
        {
          v63 = "copyin.not.master";
          WORD4(v65) = 259;
          v33 = (_QWORD *)operator new();
          llvm::BasicBlock::BasicBlock();
          v63 = "copyin.not.master.end";
          WORD4(v65) = 259;
          v51 = (_QWORD *)operator new();
          llvm::BasicBlock::BasicBlock();
          if ((BYTE8(v68) & 3) != 0)
            v34 = sub_22F28ABCC(&v67, a1);
          else
            v34 = v67;
          v35 = *(_QWORD *)(*(_QWORD *)&a1[18] + 88);
          WORD4(v65) = 257;
          v36 = (uint64_t *)sub_22E3C1740(v48, 47, v34, v35, (uint64_t)&v63);
          if ((BYTE8(v61) & 3) != 0)
            v37 = sub_22F28ABCC(&v60, a1);
          else
            v37 = v60;
          v38 = *(_QWORD *)(*(_QWORD *)&a1[18] + 88);
          WORD4(v65) = 257;
          v39 = sub_22E3C1740(v48, 47, v37, v38, (uint64_t)&v63);
          v59 = 257;
          v40 = sub_22E3C18F4((uint64_t)v48, 33, v36, v39, (uint64_t)v58);
          v41 = llvm::User::operator new((llvm::User *)0x40);
          MEMORY[0x23489C09C](v41, v33, v51, v40, 0);
          WORD4(v65) = 257;
          sub_22E3C12C8(v48, v41, (uint64_t)&v63);
          sub_22E5ED9B4(a1, v33, 0);
          v14 = v54;
        }
        v42 = *(_QWORD *)(*(_QWORD *)(v50 + v12) + 16);
        v43 = *(_QWORD *)(*(_QWORD *)(v49 + v12) + 16);
        v57[0] = v60;
        v57[1] = v61;
        v57[2] = v62;
        v56[0] = v67;
        v56[1] = v68;
        v56[2] = v69;
        sub_22E5F21E0((uint64_t)a1, v55, v57, v56, v43, v42, v14);
      }
      v12 += 8;
    }
    while (v53 != v12);
  }
  v44 = v7 + 1;
  while (v44 != v9)
  {
    v45 = *v44++;
    v10 = v45;
    if (*(_DWORD *)(v45 + 8) == 15)
    {
      v7 = v44 - 1;
      goto LABEL_12;
    }
  }
  if (v51)
  {
    v8 = 1;
    sub_22E5ED9B4(a1, v51, 1);
  }
  else
  {
LABEL_54:
    v8 = 0;
  }
  llvm::deallocate_buffer(v70, (void *)(8 * v72));
  return v8;
}

uint64_t sub_22E5F386C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v8;
  unsigned int *v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD *v25;
  _BOOL4 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  llvm *v49;
  void *v50;
  unsigned int *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  char v75[32];
  _QWORD v76[2];
  unsigned int v77;
  llvm *v78[2];
  unsigned int v79;
  _OWORD v80[4];

  if (*(_QWORD *)(a1 + 320))
  {
    v78[0] = 0;
    v78[1] = 0;
    v79 = 0;
    v8 = *(_DWORD *)(a2 + 8);
    if (sub_22F421AC0(v8))
    {
      v51 = *(unsigned int **)(a2 + 24);
      v52 = *v51;
      v53 = sub_22F293A28(v8);
      v54 = *(unsigned int *)(a2 + 32);
      if ((_DWORD)v54)
      {
        v55 = &v51[2 * v52 + 4 + 2 * v53];
        v56 = 8 * v54;
        do
        {
          v57 = *(_QWORD *)v55;
          v55 += 2;
          *(_QWORD *)&v80[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v57 + 16) + 32))(*(_QWORD *)(v57 + 16));
          sub_22F294270((uint64_t)&v71, (uint64_t)v78, v80);
          v56 -= 8;
        }
        while (v56);
      }
    }
    v76[0] = 0;
    v76[1] = 0;
    v77 = 0;
    v9 = *(unsigned int **)(a2 + 24);
    if (!v9)
      goto LABEL_41;
    v12 = *v9;
    v10 = (uint64_t *)(v9 + 4);
    v11 = v12;
    if (v12)
    {
      v13 = 8 * v11;
      v14 = v10;
      while (*(_DWORD *)(*v14 + 8) != 43)
      {
        ++v14;
        v13 -= 8;
        if (!v13)
          goto LABEL_41;
      }
    }
    else
    {
      v14 = v10;
    }
    if (v14 == &v10[v11])
    {
LABEL_41:
      v49 = 0;
      v50 = 0;
      v3 = 0;
    }
    else
    {
      v63 = (uint64_t *)(a3 + 40);
      v60 = (uint64_t *)(a1 + 2904);
      v61 = &v10[v11];
      v15 = *v14;
LABEL_14:
      v16 = *(_DWORD *)(a2 + 8) - 36;
      v17 = v16 > 0x29;
      v18 = (1 << v16) & 0x30000000C03;
      v19 = v17 || v18 == 0;
      if (v19 || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 76) & 2) != 0)
      {
        v20 = *(unsigned int *)(v15 + 16);
        if ((_DWORD)v20)
        {
          v21 = (uint64_t *)(v15 + 64);
          v22 = (uint64_t *)(v15 + 64 + 8 * v20);
          v23 = &v22[v20];
          v24 = &v23[v20];
          v62 = v23;
          while (1)
          {
            v69 = *v22;
            v25 = *(_QWORD **)(*v21 + 16);
            *(_QWORD *)&v80[0] = (*(uint64_t (**)(_QWORD *))(*v25 + 32))(v25);
            sub_22F294270((uint64_t)&v71, (uint64_t)v76, v80);
            if (BYTE8(v72))
              break;
LABEL_36:
            ++v21;
            ++v24;
            if (++v22 == v23)
              goto LABEL_37;
          }
          v66 = *(_QWORD *)(*v24 + 16);
          v68 = v24;
          v64 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
          v26 = (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 1856) + 32))(*(_QWORD *)(a1 + 1856), v25) != 0;
          v27 = *(_QWORD *)(*v21 + 8);
          sub_22EFF605C(*v21);
          v71 = 0;
          sub_22EFF69F0((uint64_t)v75, v64, (uint64_t)v25, v26, v27, 1, v28, &v71, 0);
          sub_22E4D8D7C(&v71);
          v80[0] = v72;
          v80[1] = v73;
          v80[2] = v74;
          sub_22E5BC134(v63, *(_QWORD *)(a3 + 32), v66, (uint64_t)v80);
          if (v69)
          {
            v29 = (*(uint64_t (**)(_QWORD *))(*v25 + 32))(v25);
            if (!v79)
            {
LABEL_29:
              v34 = *(_QWORD *)(v69 + 16);
              if (*(_DWORD *)(v15 + 48))
              {
                sub_22E4C6274(a1, *(_QWORD *)(v69 + 16));
                *(_QWORD *)&v80[0] = v34;
                v71 = 0;
                v35 = sub_22E3CED3C(v60, v80, &v71);
                v36 = v71;
                if (!v35)
                  v36 = *(_QWORD *)(a1 + 2904) + 56 * *(unsigned int *)(a1 + 2920);
                v38 = *(_QWORD *)(v36 + 8);
                v37 = *(_QWORD *)(v36 + 16);
                v39 = *(_QWORD *)(v36 + 24);
                v40 = *(_DWORD *)(v36 + 32);
                v41 = *(_DWORD *)(v36 + 36);
                v42 = (uint64_t)v25;
                v43 = *(_QWORD *)(v36 + 40);
                v44 = *(_QWORD *)(v36 + 48);
              }
              else
              {
                sub_22E5B9A78(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808), a1, v25, &v71);
                v45 = v71;
                v65 = *((_QWORD *)&v72 + 1);
                v67 = v72;
                v58 = DWORD1(v73);
                v59 = v73;
                v70 = v25;
                v71 = v34;
                v43 = *((_QWORD *)&v73 + 1);
                v44 = v74;
                v38 = v45;
                *(_QWORD *)&v72 = v45;
                *((_QWORD *)&v72 + 1) = v67;
                *(_QWORD *)&v73 = v65;
                *((_QWORD *)&v73 + 1) = __PAIR64__(v58, v59);
                *(_QWORD *)&v74 = v43;
                *((_QWORD *)&v74 + 1) = v44;
                sub_22E3CEC9C((uint64_t)v60, &v71, &v72, (uint64_t)v80);
                v42 = (uint64_t)v70;
                v41 = v58;
                v40 = v59;
                v39 = v65;
                v37 = v67;
              }
              v46 = *(_QWORD *)(a3 + 32);
              v71 = v38;
              *(_QWORD *)&v72 = v37;
              *((_QWORD *)&v72 + 1) = v39;
              *(_QWORD *)&v73 = __PAIR64__(v41, v40);
              *((_QWORD *)&v73 + 1) = v43;
              *(_QWORD *)&v74 = v44;
              sub_22E5BC134(v63, v46, v42, (uint64_t)&v71);
              goto LABEL_35;
            }
            v30 = ((v29 >> 4) ^ (v29 >> 9)) & (v79 - 1);
            v31 = *((_QWORD *)v78[0] + v30);
            if (v29 != v31)
            {
              v32 = 1;
              while (v31 != -4096)
              {
                v33 = v30 + v32++;
                v30 = v33 & (v79 - 1);
                v31 = *((_QWORD *)v78[0] + v30);
                if (v29 == v31)
                  goto LABEL_35;
              }
              goto LABEL_29;
            }
          }
LABEL_35:
          v23 = v62;
          v24 = v68;
          goto LABEL_36;
        }
LABEL_37:
        v47 = v14 + 1;
        while (v47 != v61)
        {
          v48 = *v47++;
          v15 = v48;
          if (*(_DWORD *)(v48 + 8) == 43)
          {
            v14 = v47 - 1;
            goto LABEL_14;
          }
        }
      }
      v50 = (void *)(8 * v77);
      v3 = 1;
      v49 = (llvm *)v76[0];
    }
    llvm::deallocate_buffer(v49, v50);
    llvm::deallocate_buffer(v78[0], (void *)(8 * v79));
    return v3;
  }
  return 0;
}

uint64_t sub_22E5F3CC4(uint64_t result, unsigned __int8 *a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  _DWORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *i;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE **v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  __int128 v66;
  int v67;
  int v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  llvm *v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE **v78;
  uint64_t *v79;
  unint64_t v80;
  _BYTE *v81;
  _QWORD *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  unint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98[3];
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  _QWORD v111[3];
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  llvm *v117[2];
  unsigned int v118;
  llvm *v119[2];
  unsigned int v120;
  _OWORD v121[2];
  uint64_t v122;
  __int128 v123[2];
  uint64_t v124;
  __int128 v125;
  unint64_t v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;

  if (*(_QWORD *)(result + 320))
  {
    v4 = a4;
    v7 = result;
    if (a4)
    {
      v8 = *(_QWORD *)(result + 144);
      if ((*(_BYTE *)(*(_QWORD *)(v8 + 152) + 76) & 2) == 0)
      {
        v9 = (unsigned int *)*((_QWORD *)a2 + 3);
        if (v9)
        {
          v12 = *v9;
          v10 = v9 + 4;
          v11 = v12;
          if (v12)
          {
            v13 = 8 * v11;
            v14 = v10;
            while (*(_DWORD *)(*(_QWORD *)v14 + 8) != 43)
            {
              v14 += 2;
              v13 -= 8;
              if (!v13)
                goto LABEL_20;
            }
          }
          else
          {
            v14 = v10;
          }
          v15 = &v10[2 * v11];
          if (v14 != v15)
          {
            if (*(_DWORD *)(*(_QWORD *)v14 + 48))
            {
              for (i = v14 + 2; i != v15; i += 2)
              {
                if (*(_DWORD *)(*(_QWORD *)i + 8) == 43 && !*(_DWORD *)(*(_QWORD *)i + 48))
                  goto LABEL_19;
              }
            }
            else
            {
LABEL_19:
              (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(v8 + 808) + 184))(*(_QWORD *)(v8 + 808), result, *((unsigned int *)a2 + 3), 89, 0, 1);
            }
          }
        }
      }
LABEL_20:
      v17 = (_QWORD *)operator new();
      llvm::BasicBlock::BasicBlock();
      *(_QWORD *)&v125 = ".omp.lastprivate.done";
      v18 = operator new();
      llvm::BasicBlock::BasicBlock();
      v19 = llvm::User::operator new((llvm::User *)0x40);
      v82 = (_QWORD *)v18;
      MEMORY[0x23489C09C](v19, v17, v18, v4, 0);
      LOWORD(v129) = 257;
      sub_22E3C12C8((uint64_t *)(v7 + 272), v19, (uint64_t)&v125);
      sub_22E5ED9B4((_QWORD *)v7, v17, 0);
    }
    else
    {
      v82 = 0;
    }
    v119[1] = 0;
    v119[0] = 0;
    v120 = 0;
    v117[0] = 0;
    v117[1] = 0;
    v118 = 0;
    v20 = *a2 - 30;
    if (v20 <= 0x30 && ((1 << v20) & 0x100003FFFFFFFLL) != 0)
    {
      v21 = (unsigned int *)*((_QWORD *)a2 + 3);
      v22 = *v21;
      v23 = sub_22F293A28(*((_DWORD *)a2 + 2));
      v24 = (unsigned int *)*((_QWORD *)a2 + 3);
      v25 = *v24;
      v26 = sub_22F293A28(*((_DWORD *)a2 + 2));
      v27 = *((unsigned int *)a2 + 8);
      if ((_DWORD)v27)
      {
        v28 = &v24[2 * v25 + 4 + 2 * (v26 + 4 * v27)];
        v29 = (uint64_t)&v21[2 * v22 + 4 + 2 * v23];
        v30 = 8 * v27;
        do
        {
          v31 = *(_QWORD *)v28;
          *(_QWORD *)&v123[0] = 0;
          *(_QWORD *)&v123[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v29 + 16) + 32))(*(_QWORD *)(*(_QWORD *)v29 + 16));
          if (a3)
            sub_22F294508((uint64_t)v119, v123, (uint64_t)&v125);
          else
            sub_22F24C2B0((uint64_t)v117, (uint64_t *)v123)[1] = v31;
          v29 += 8;
          v28 += 2;
          v30 -= 8;
        }
        while (v30);
      }
    }
    v32 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v32)
    {
      v35 = *v32;
      v33 = (uint64_t *)(v32 + 4);
      v34 = v35;
      if (v35)
      {
        v36 = 8 * v34;
        v37 = v33;
        while (*(_DWORD *)(*v37 + 8) != 43)
        {
          ++v37;
          v36 -= 8;
          if (!v36)
            goto LABEL_82;
        }
      }
      else
      {
        v37 = v33;
      }
      v38 = &v33[v34];
      if (v37 != v38)
      {
        v79 = (uint64_t *)(v7 + 2904);
        v73 = v4;
        v39 = *v37;
        v75 = v117[0];
        v74 = v118;
        v72 = v118 - 1;
LABEL_38:
        v40 = *(unsigned int *)(v39 + 16);
        if ((_DWORD)v40)
        {
          v41 = (uint64_t *)(v39 + 64);
          v42 = v39 + 64 + 8 * v40 + 8 * v40;
          v43 = v42 + 8 * v40;
          v44 = (_BYTE **)(v43 + 8 * v40);
          v78 = &v44[v40];
          do
          {
            v45 = *(_QWORD **)(*v41 + 16);
            v80 = v45[6];
            v81 = *v44;
            v116 = 0;
            v116 = (*(uint64_t (**)(_QWORD *))(*v45 + 32))(v45);
            sub_22F294508((uint64_t)v119, &v116, (uint64_t)&v125);
            if ((_BYTE)v126)
            {
              if (v74)
              {
                v46 = ((v116 >> 4) ^ (v116 >> 9)) & v72;
                v47 = *((_QWORD *)v75 + 2 * v46);
                if (v116 == v47)
                {
LABEL_43:
                  if (*((_QWORD *)v75 + 2 * v46 + 1))
                    sub_22E4D89CC(v7);
                }
                else
                {
                  v67 = 1;
                  while (v47 != -4096)
                  {
                    v68 = v46 + v67++;
                    v46 = v68 & v72;
                    v47 = *((_QWORD *)v75 + 2 * v46);
                    if (v116 == v47)
                      goto LABEL_43;
                  }
                }
              }
              v76 = *(_QWORD *)(*(_QWORD *)v43 + 16);
              v77 = *(_QWORD *)(*(_QWORD *)v42 + 16);
              *(_QWORD *)&v123[0] = v45;
              *(_QWORD *)&v125 = 0;
              v48 = sub_22E3CED3C(v79, v123, &v125);
              v49 = v125;
              if (!v48)
                v49 = *(_QWORD *)(v7 + 2904) + 56 * *(unsigned int *)(v7 + 2920);
              v50 = *(_QWORD *)(v49 + 8);
              v90 = *(_QWORD *)(v49 + 16);
              v51 = *(_QWORD *)(v49 + 24);
              v52 = *(_DWORD *)(v49 + 32);
              v89 = *(_DWORD *)(v49 + 36);
              v53 = *(_QWORD *)(v49 + 40);
              v54 = *(_QWORD *)(v49 + 48);
              v55 = *(_QWORD *)(v45[6] & 0xFFFFFFFFFFFFFFF0);
              if (v55 && (*(_DWORD *)(v55 + 16) & 0xFE) == 0x28)
                goto LABEL_51;
              v86 = *(_QWORD *)(v49 + 24);
              v88 = *(_QWORD *)(v49 + 8);
              v84 = *(_QWORD *)(v49 + 48);
              v85 = *(_QWORD *)(v49 + 40);
              v83 = *(_DWORD *)(v49 + 32);
              if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v55 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
              {
                v56 = sub_22F10CF48(v55);
                v52 = v83;
                v54 = v84;
                v53 = v85;
                v55 = v56;
                v51 = v86;
                v50 = v88;
                if (v56)
                {
LABEL_51:
                  v111[0] = v50;
                  v111[1] = v90;
                  v111[2] = v51;
                  v112 = v52;
                  v113 = v89;
                  v114 = v53;
                  v115 = v54;
                  LOWORD(v129) = 257;
                  v88 = sub_22E3C2A7C((uint64_t *)(v7 + 272), (uint64_t)v111, (uint64_t)&v125);
                  v91 = *(_QWORD *)(v7 + 144);
                  v57 = v55;
                  if ((*(_BYTE *)(v55 + 18) & 0x10) != 0)
                  {
                    v57 = v55;
                    do
                    {
                      while (1)
                      {
                        v57 = *(_QWORD *)(*(_QWORD *)(v57 + 32) & 0xFFFFFFFFFFFFFFF0);
                        if (!v57)
                          break;
                        v58 = *(_DWORD *)(v57 + 16);
                        if ((v58 & 0xFE) != 0x28)
                          break;
                        if ((v58 & 0x100000) == 0)
                          goto LABEL_58;
                      }
                      v57 = sub_22F10CF48(v57);
                    }
                    while ((*(_DWORD *)(v57 + 16) & 0x100000) != 0);
                  }
LABEL_58:
                  v90 = sub_22E66C868(v91 + 280, *(_QWORD *)(v57 + 32), 0);
                  v87 = *(_QWORD **)(v7 + 144);
                  if ((*(_BYTE *)(v55 + 18) & 0x10) != 0)
                  {
                    do
                    {
                      while (1)
                      {
                        v55 = *(_QWORD *)(*(_QWORD *)(v55 + 32) & 0xFFFFFFFFFFFFFFF0);
                        if (!v55)
                          break;
                        v59 = *(_DWORD *)(v55 + 16);
                        if ((v59 & 0xFE) != 0x28)
                          break;
                        if ((v59 & 0x100000) == 0)
                          goto LABEL_64;
                      }
                      v55 = sub_22F10CF48(v55);
                    }
                    while ((*(_DWORD *)(v55 + 16) & 0x100000) != 0);
                  }
LABEL_64:
                  v85 = 0;
                  v86 = sub_22E62D754(v87, *(_QWORD *)(v55 + 32), 0, 0, 0);
                  v83 = 0;
                  v84 = 0;
                }
              }
              if (!*(_DWORD *)(v39 + 48))
              {
                v60 = *(_QWORD **)(v7 + 144);
                v71 = v60[101];
                v61 = *(_QWORD *)(*v41 + 8);
                sub_22E6281E0(v60, v61, (uint64_t)v121);
                *(_QWORD *)&v125 = v88;
                *((_QWORD *)&v125 + 1) = v90;
                v126 = v86;
                v127 = v83;
                v128 = v89;
                v129 = v85;
                v130 = v84;
                v62 = *(_QWORD *)(*(_QWORD *)(v7 + 144) + 144);
                v123[0] = v121[0];
                v123[1] = v121[1];
                v124 = v122;
                v101 = 0;
                v102 = 0;
                v100 = 0;
                v103 = 0;
                v104 = 0;
                v105 = 0;
                v106 = 0;
                v107 = 0;
                v108 = 2;
                v99 = 0;
                v109 = 0u;
                v110 = 0u;
                sub_22E3C113C((uint64_t)&v99, &v125, v61, 2, v123, v62);
                sub_22EFF605C(*v41);
                (*(void (**)(uint64_t, uint64_t, int *, _QWORD *, _QWORD))(*(_QWORD *)v71 + 632))(v71, v7, &v99, v45, v63);
              }
              *(_QWORD *)&v123[0] = v76;
              *(_QWORD *)&v125 = 0;
              v64 = sub_22E3CED3C(v79, v123, &v125);
              v65 = v125;
              if (!v64)
                v65 = *(_QWORD *)(v7 + 2904) + 56 * *(unsigned int *)(v7 + 2920);
              v66 = *(_OWORD *)(v65 + 24);
              v98[0] = *(_OWORD *)(v65 + 8);
              v98[1] = v66;
              v98[2] = *(_OWORD *)(v65 + 40);
              *(_QWORD *)&v92 = v88;
              *((_QWORD *)&v92 + 1) = v90;
              v93 = v86;
              v94 = v83;
              v95 = v89;
              v96 = v85;
              v97 = v84;
              sub_22E5F21E0(v7, v80, v98, &v92, v76, v77, v81);
            }
            ++v41;
            v42 += 8;
            v43 += 8;
            ++v44;
          }
          while (v44 != v78);
        }
        if (*(_QWORD *)(v39 + 40))
          sub_22E4D89CC(v7);
        v69 = v37 + 1;
        v4 = v73;
        while (v69 != v38)
        {
          v70 = *v69++;
          v39 = v70;
          if (*(_DWORD *)(v70 + 8) == 43)
          {
            v37 = v69 - 1;
            goto LABEL_38;
          }
        }
      }
    }
LABEL_82:
    if (v4)
      sub_22E5ED9B4((_QWORD *)v7, v82, 1);
    llvm::deallocate_buffer(v117[0], (void *)(16 * v118));
    return llvm::deallocate_buffer(v119[0], (void *)(8 * v120));
  }
  return result;
}

void sub_22E5F4508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  const char *v103;
  __int16 v104;
  __int128 v105[3];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109[3];
  __int128 v110[3];
  _OWORD v111[4];
  __int128 v112;
  __int128 v113;
  _OWORD v114[3];
  _OWORD v115[3];
  _BYTE v116[64];
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122[3];
  __int128 v123[3];
  unint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  unint64_t v131;
  uint64_t v132[18];
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  _BYTE v137[32];
  void *v138;
  uint64_t v139;
  _BYTE v140[32];
  _QWORD v141[2];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD v152[2];
  uint64_t v153;
  _QWORD v154[2];
  uint64_t v155;
  _QWORD v156[2];
  _QWORD v157[6];
  _QWORD v158[6];
  _BYTE v159[288];
  int v160;
  int v161;
  void *v162[2];
  _BYTE v163[32];
  void *v164[2];
  _BYTE v165[32];
  void *v166[2];
  _BYTE v167[32];
  uint64_t *v168;
  uint64_t v169;
  _BYTE v170[32];
  uint64_t *v171;
  uint64_t v172;
  _QWORD v173[7];

  v0 = MEMORY[0x24BDAC7A8]();
  v173[4] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(v0 + 320))
    return;
  v5 = v0;
  v99 = v2;
  v171 = v173;
  v172 = 0x400000000;
  v168 = (uint64_t *)v170;
  v169 = 0x400000000;
  v166[0] = v167;
  v166[1] = (void *)0x400000000;
  v164[0] = v165;
  v164[1] = (void *)0x400000000;
  v162[0] = v163;
  v162[1] = (void *)0x400000000;
  v141[0] = v142;
  v141[1] = 0x400000000;
  v142[4] = v143;
  v142[5] = 0x400000000;
  v143[4] = v144;
  v143[5] = 0x400000000;
  v144[4] = v145;
  v144[5] = 0x400000000;
  v145[4] = v146;
  v145[5] = 0x400000000;
  v146[4] = v147;
  v146[5] = 0x400000000;
  v147[4] = &v148;
  v147[5] = 0x400000000;
  v149 = &v151;
  v150 = 0x400000000;
  v152[0] = &v153;
  v152[1] = 0x400000000;
  v154[0] = &v155;
  v154[1] = 0x400000000;
  v156[0] = v157;
  v156[1] = 0x400000000;
  v157[4] = v158;
  v157[5] = 0x400000000;
  v158[4] = v159;
  v158[5] = 0x400000000;
  v160 = 0;
  memset(&v159[256], 0, 32);
  v161 = 1;
  v138 = v140;
  v139 = 0x400000000;
  v91 = v1;
  v135 = v137;
  v136 = 0x400000000;
  v6 = *(unsigned int **)(v1 + 24);
  if (v6)
  {
    v7 = v3;
    v10 = *v6;
    v8 = (uint64_t *)(v6 + 4);
    v9 = v10;
    if (v10)
    {
      v11 = 8 * v9;
      v12 = v8;
      while (*(_DWORD *)(*v12 + 8) != 66)
      {
        ++v12;
        v11 -= 8;
        if (!v11)
          goto LABEL_19;
      }
    }
    else
    {
      v12 = v8;
    }
    v13 = &v8[v9];
    if (v12 != v13)
    {
      v14 = *v12;
LABEL_12:
      if ((*(_DWORD *)(v14 + 48) != 1) != v7)
      {
        v17 = v14 + 104;
        sub_22F2633B0((uint64_t)&v171, (_BYTE *)(v14 + 104), (_BYTE *)(v14 + 104 + 8 * *(unsigned int *)(v14 + 16)));
        sub_22F2633B0((uint64_t)&v168, (_BYTE *)(v17 + 8 * *(unsigned int *)(v14 + 16)), (_BYTE *)(v17 + 8 * *(unsigned int *)(v14 + 16) + 8 * *(unsigned int *)(v14 + 16)));
        v18 = *(unsigned int *)(v14 + 16);
        v19 = (_BYTE *)(v14 + 104 + 8 * v18 + 8 * v18 + 8 * v18 + 8 * v18);
        sub_22F2633B0((uint64_t)v166, v19, &v19[8 * v18]);
        v20 = *(unsigned int *)(v14 + 16);
        sub_22F2633B0((uint64_t)v164, (_BYTE *)(v17 + 8 * v20 + 8 * v20), (_BYTE *)(v17 + 8 * v20 + 8 * v20 + 8 * v20));
        v21 = *(unsigned int *)(v14 + 16);
        v22 = (_BYTE *)(v14 + 104 + 8 * v21 + 8 * v21 + 8 * v21);
        sub_22F2633B0((uint64_t)v162, v22, &v22[8 * v21]);
        if (*(_DWORD *)(v14 + 48) == 2)
        {
          sub_22F2633B0((uint64_t)&v149, (_BYTE *)(v17 + 8 * *(unsigned int *)(v14 + 16)), (_BYTE *)(v17 + 8 * *(unsigned int *)(v14 + 16) + 8 * *(unsigned int *)(v14 + 16)));
          sub_22F2633B0((uint64_t)v152, (_BYTE *)(v14 + 104), (_BYTE *)(v17 + 8 * *(unsigned int *)(v14 + 16)));
          sub_22F2633B0((uint64_t)v154, (_BYTE *)(v17 + 8 * *(unsigned int *)(v14 + 16)), (_BYTE *)(v17 + 8 * *(unsigned int *)(v14 + 16) + 8 * *(unsigned int *)(v14 + 16)));
          v23 = *(unsigned int *)(v14 + 16);
          v24 = (_BYTE *)(v17 + 8 * v23 + 8 * v23 + 8 * v23 + 8 * v23);
          sub_22F2633B0((uint64_t)v156, v24, &v24[8 * v23]);
          v25 = *(unsigned int *)(v14 + 16);
          sub_22F2633B0((uint64_t)&v138, (_BYTE *)(v17 + 8 * v25 + 8 * v25), (_BYTE *)(v17 + 8 * v25 + 8 * v25 + 8 * v25));
          v26 = *(unsigned int *)(v14 + 16);
          v27 = (_BYTE *)(v17 + 8 * v26 + 8 * v26 + 8 * v26);
          sub_22F2633B0((uint64_t)&v135, v27, &v27[8 * v26]);
        }
      }
      v15 = v12 + 1;
      while (v15 != v13)
      {
        v16 = *v15++;
        v14 = v16;
        if (*(_DWORD *)(v16 + 8) == 66)
        {
          v12 = v15 - 1;
          goto LABEL_12;
        }
      }
    }
  }
LABEL_19:
  sub_22F27B534((unint64_t)v132, v171, v172, v171, v172, v168, v169, v4, (uint64_t *)v166[0]);
  v28 = v99;
  if ((_DWORD)v172)
  {
    v34 = 0;
    v35 = 0;
    v97 = v168;
    v98 = v171;
    v95 = v164[0];
    v96 = v162[0];
    v36 = (uint64_t *)(v99 + 40);
    v93 = (uint64_t *)(v5 + 272);
    v94 = (uint64_t *)(v5 + 2904);
    v37 = 272 * v172;
    v92 = v37;
    do
    {
      v38 = (unsigned __int8 *)v98[v35];
      v39 = *(_QWORD *)(v97[v35] + 16);
      sub_22F27B6EC(v132, (_QWORD *)v5, v35);
      sub_22E59D1E0((uint64_t)v132, v5, v35);
      sub_22E4C8440(v5, v39, (uint64_t)&v124);
      v123[0] = v125;
      v123[1] = v126;
      v123[2] = v127;
      v117 = *(_OWORD *)(v133 + v34 + 64);
      *(_OWORD *)&v116[48] = *(_OWORD *)(v133 + v34 + 48);
      *(_OWORD *)&v116[32] = *(_OWORD *)(v133 + v34 + 32);
      *(_OWORD *)&v116[16] = *(_OWORD *)(v133 + v34 + 16);
      v121 = *(_QWORD *)(v133 + v34 + 128);
      v120 = *(_OWORD *)(v133 + v34 + 112);
      v119 = *(_OWORD *)(v133 + v34 + 96);
      v118 = *(_OWORD *)(v133 + v34 + 80);
      *(_OWORD *)v116 = *(_OWORD *)(v133 + v34);
      v122[0] = *(_OWORD *)&v116[8];
      v122[1] = *(_OWORD *)&v116[24];
      v122[2] = *(_OWORD *)&v116[40];
      *(_QWORD *)&v128 = &v124;
      sub_22F27BA58(v132, v5, v35, v123, v122, (void (*)(uint64_t, uint64_t))sub_22E601430, (uint64_t)&v128);
      sub_22E4C9A74(v5, (uint64_t)&v124);
      v114[0] = v125;
      v114[1] = v126;
      v114[2] = v127;
      sub_22E59DB9C((uint64_t)v132, v5, v35, v114, v115);
      v40 = *(_QWORD *)(v134 + 8 * v35);
      *(_OWORD *)v116 = v115[0];
      *(_OWORD *)&v116[16] = v115[1];
      *(_OWORD *)&v116[32] = v115[2];
      sub_22E5BC134(v36, *(_QWORD *)(v28 + 32), v40, (uint64_t)v116);
      v41 = *(_QWORD *)(v95[v35] + 16);
      v100 = *(_QWORD *)(v96[v35] + 16);
      v42 = *v38;
      if (v42 != 191)
        goto LABEL_39;
      v43 = *(_QWORD *)(v39 + 48);
      v44 = *(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v44 + 17) & 8) != 0)
      {
        v118 = *(_OWORD *)(v133 + v34 + 80);
        v119 = *(_OWORD *)(v133 + v34 + 96);
        v120 = *(_OWORD *)(v133 + v34 + 112);
        v121 = *(_QWORD *)(v133 + v34 + 128);
        *(_OWORD *)&v116[16] = *(_OWORD *)(v133 + v34 + 16);
        *(_OWORD *)&v116[32] = *(_OWORD *)(v133 + v34 + 32);
        *(_OWORD *)&v116[48] = *(_OWORD *)(v133 + v34 + 48);
        v117 = *(_OWORD *)(v133 + v34 + 64);
        *(_OWORD *)v116 = *(_OWORD *)(v133 + v34);
        v128 = *(_OWORD *)&v116[8];
        v129 = *(_OWORD *)&v116[24];
        v130 = *(_OWORD *)&v116[40];
        v47 = v41;
        v28 = v99;
        sub_22E5BC134(v36, *(_QWORD *)(v99 + 32), v47, (uint64_t)&v128);
        *(_QWORD *)&v128 = v39;
        *(_QWORD *)v116 = 0;
        v48 = sub_22E3CED3C(v94, &v128, v116);
        v49 = *(_QWORD *)v116;
        if (!v48)
          v49 = *(_QWORD *)(v5 + 2904) + 56 * *(unsigned int *)(v5 + 2920);
        v50 = *(_OWORD *)(v49 + 40);
        v51 = *(_OWORD *)(v49 + 8);
        v112 = *(_OWORD *)(v49 + 24);
        v113 = v50;
        v111[3] = v51;
        v52 = *(_QWORD *)(v99 + 32);
        *(_OWORD *)v116 = v51;
        *(_OWORD *)&v116[16] = v112;
        *(_OWORD *)&v116[32] = v50;
        v53 = (uint64_t *)(v99 + 40);
        v54 = v100;
        goto LABEL_43;
      }
      v45 = *(_QWORD *)(*(_QWORD *)(v44 + 8) & 0xFFFFFFFFFFFFFFF0);
      v46 = *(_DWORD *)(v45 + 16);
      if (v45 && v46 == 11)
      {
        if (((v46 >> 19) & 0x1FF) - 166 >= 0x35)
          goto LABEL_45;
      }
      else if (v45 && v46 == 44)
      {
        v55 = sub_22F114198(*(_QWORD *)(v45 + 24));
        if ((*(_BYTE *)(v55 + 74) & 1) == 0 && *(_QWORD *)(v55 + 128) <= 7uLL)
        {
          v42 = *v38;
LABEL_39:
          if (v42 != 107)
          {
            v43 = *(_QWORD *)(v39 + 48);
LABEL_45:
            v62 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(v5 + 144) + 144), v43);
            v117 = *(_OWORD *)(v133 + v34 + 64);
            *(_OWORD *)&v116[48] = *(_OWORD *)(v133 + v34 + 48);
            *(_OWORD *)&v116[32] = *(_OWORD *)(v133 + v34 + 32);
            *(_OWORD *)&v116[16] = *(_OWORD *)(v133 + v34 + 16);
            v121 = *(_QWORD *)(v133 + v34 + 128);
            v120 = *(_OWORD *)(v133 + v34 + 112);
            v119 = *(_OWORD *)(v133 + v34 + 96);
            v118 = *(_OWORD *)(v133 + v34 + 80);
            *(_OWORD *)v116 = *(_OWORD *)(v133 + v34);
            v129 = *(_OWORD *)&v116[24];
            v130 = *(_OWORD *)&v116[40];
            v128 = *(_OWORD *)&v116[8];
            if (v62)
            {
              v109[0] = v128;
              v109[1] = v129;
              v109[2] = v130;
              v70 = sub_22E66C868(*(_QWORD *)(v5 + 144) + 280, *(_QWORD *)(v41 + 48), 0);
              *(_QWORD *)v116 = "lhs.begin";
              *(_WORD *)&v116[32] = 259;
              sub_22E3BEE6C(v93, v109, v70, (uint64_t)v116, (uint64_t)&v128);
              v63 = v99;
              v71 = *(_QWORD *)(v99 + 32);
              *(_OWORD *)v116 = v128;
              *(_OWORD *)&v116[16] = v129;
              *(_OWORD *)&v116[32] = v130;
              sub_22E5BC134(v36, v71, v41, (uint64_t)v116);
              v131 = v39;
              *(_QWORD *)v116 = 0;
              v72 = sub_22E3CED3C(v94, &v131, v116);
              v73 = *(_QWORD *)v116;
              if (!v72)
                v73 = *(_QWORD *)(v5 + 2904) + 56 * *(unsigned int *)(v5 + 2920);
              v74 = *(_OWORD *)(v73 + 8);
              v75 = *(_OWORD *)(v73 + 40);
              v105[1] = *(_OWORD *)(v73 + 24);
              v105[2] = v75;
              v105[0] = v74;
              v69 = v100;
              v76 = sub_22E66C868(*(_QWORD *)(v5 + 144) + 280, *(_QWORD *)(v100 + 48), 0);
              v103 = "rhs.begin";
              v104 = 259;
              v37 = v92;
              sub_22E3BEE6C(v93, v105, v76, (uint64_t)&v103, (uint64_t)&v106);
            }
            else
            {
              v63 = v99;
              v64 = *(_QWORD *)(v99 + 32);
              *(_OWORD *)v116 = v128;
              *(_OWORD *)&v116[16] = v129;
              *(_OWORD *)&v116[32] = v130;
              sub_22E5BC134(v36, v64, v41, (uint64_t)v116);
              v131 = v39;
              *(_QWORD *)v116 = 0;
              v65 = sub_22E3CED3C(v94, &v131, v116);
              v66 = *(_QWORD *)v116;
              if (!v65)
                v66 = *(_QWORD *)(v5 + 2904) + 56 * *(unsigned int *)(v5 + 2920);
              v67 = *(_OWORD *)(v66 + 8);
              v68 = *(_OWORD *)(v66 + 40);
              v107 = *(_OWORD *)(v66 + 24);
              v108 = v68;
              v106 = v67;
              v69 = v100;
            }
            v77 = *(_QWORD *)(v63 + 32);
            *(_OWORD *)v116 = v106;
            *(_OWORD *)&v116[16] = v107;
            *(_OWORD *)&v116[32] = v108;
            sub_22E5BC134(v36, v77, v69, (uint64_t)v116);
            v28 = v63;
            goto LABEL_53;
          }
        }
      }
      else
      {
        v78 = v46 > 0x27u;
        v79 = (1 << v46) & 0x8180001600;
        if (v78 || v79 == 0)
          goto LABEL_45;
      }
      v118 = *(_OWORD *)(v133 + v34 + 80);
      v119 = *(_OWORD *)(v133 + v34 + 96);
      v120 = *(_OWORD *)(v133 + v34 + 112);
      v121 = *(_QWORD *)(v133 + v34 + 128);
      *(_OWORD *)&v116[16] = *(_OWORD *)(v133 + v34 + 16);
      *(_OWORD *)&v116[32] = *(_OWORD *)(v133 + v34 + 32);
      *(_OWORD *)&v116[48] = *(_OWORD *)(v133 + v34 + 48);
      v117 = *(_OWORD *)(v133 + v34 + 64);
      *(_OWORD *)v116 = *(_OWORD *)(v133 + v34);
      v128 = *(_OWORD *)&v116[8];
      v129 = *(_OWORD *)&v116[24];
      v130 = *(_OWORD *)&v116[40];
      v56 = v41;
      v28 = v99;
      sub_22E5BC134(v36, *(_QWORD *)(v99 + 32), v56, (uint64_t)&v128);
      *(_QWORD *)&v128 = v39;
      *(_QWORD *)v116 = 0;
      v57 = sub_22E3CED3C(v94, &v128, v116);
      v58 = *(_QWORD *)v116;
      if (!v57)
        v58 = *(_QWORD *)(v5 + 2904) + 56 * *(unsigned int *)(v5 + 2920);
      v59 = *(_OWORD *)(v58 + 8);
      v60 = *(_OWORD *)(v58 + 40);
      v110[1] = *(_OWORD *)(v58 + 24);
      v110[2] = v60;
      v110[0] = v59;
      v61 = sub_22E66C868(*(_QWORD *)(v5 + 144) + 280, *(_QWORD *)(v100 + 48), 0);
      *(_QWORD *)&v128 = "rhs.begin";
      LOWORD(v130) = 259;
      sub_22E3BEE6C(v93, v110, v61, (uint64_t)&v128, (uint64_t)v111);
      v52 = *(_QWORD *)(v99 + 32);
      *(_OWORD *)v116 = v111[0];
      *(_OWORD *)&v116[16] = v111[1];
      *(_OWORD *)&v116[32] = v111[2];
      v53 = (uint64_t *)(v99 + 40);
      v54 = v100;
LABEL_43:
      sub_22E5BC134(v53, v52, v54, (uint64_t)v116);
LABEL_53:
      ++v35;
      v34 += 272;
    }
    while (v37 != v34);
  }
  if (!(_DWORD)v150)
  {
LABEL_75:
    sub_22F284140((uint64_t)v132);
    if (v135 != v137)
      free(v135);
    if (v138 != v140)
      free(v138);
    sub_22F293AB4((uint64_t)v141);
    if (v162[0] != v163)
      free(v162[0]);
    if (v164[0] != v165)
      free(v164[0]);
    if (v166[0] != v167)
      free(v166[0]);
    if (v168 != (uint64_t *)v170)
      free(v168);
    if (v171 != v173)
      free(v171);
    return;
  }
  BYTE2(v161) = 1;
  HIBYTE(v161) = sub_22F421A30(*(_DWORD *)(v91 + 8));
  v29 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, void *, _QWORD, void *, _QWORD, _QWORD *))(**(_QWORD **)(*(_QWORD *)(v5 + 144) + 808) + 376))(*(_QWORD *)(*(_QWORD *)(v5 + 144) + 808), v5, *(unsigned int *)(v91 + 12), v138, v139, v135, v136, v141);
  v30 = *(_DWORD *)(v91 + 8);
  if (v30 > 52)
  {
    if (v30 <= 62)
    {
LABEL_67:
      v81 = *(unsigned int **)(v91 + 24);
      v83 = *v81;
      v31 = (uint64_t)(v81 + 4);
      v82 = v83;
    }
    else
    {
      if (v30 == 63)
      {
        v31 = *(_QWORD *)(v91 + 24) + 8 * **(unsigned int **)(v91 + 24) + 16;
        v32 = *(_DWORD *)(v91 + 32);
        v33 = 63;
      }
      else
      {
        v31 = *(_QWORD *)(v91 + 24) + 8 * **(unsigned int **)(v91 + 24) + 16;
        v32 = *(_DWORD *)(v91 + 32);
        if (v30 == 70)
          v33 = 70;
        else
          v33 = 84;
      }
LABEL_71:
      v82 = sub_22F293A28(v33) + 8 * v32;
    }
    v84 = *(_QWORD *)(v31 + 8 * v82);
    v85 = *(_QWORD *)(v84 + 16);
    sub_22E4C652C((_QWORD *)v5, v85);
    v124 = v85;
    *(_QWORD *)v116 = 0;
    v86 = sub_22E3CED3C((uint64_t *)(v5 + 2904), &v124, v116);
    v87 = *(_QWORD *)v116;
    if (!v86)
      v87 = *(_QWORD *)(v5 + 2904) + 56 * *(unsigned int *)(v5 + 2920);
    v101 = *(_OWORD *)(v87 + 24);
    v102 = *(_OWORD *)(v87 + 40);
    v88 = *(_QWORD *)(v84 + 8);
    *(_OWORD *)v116 = *(_OWORD *)(v87 + 8);
    *(_OWORD *)&v116[16] = v101;
    *(_OWORD *)&v116[32] = v102;
    v89 = sub_22E6281E0(*(_QWORD **)(v5 + 144), v88, (uint64_t)&v124);
    LOBYTE(v90) = 0;
    sub_22E4E8134(v5, v29, v116, 0, v88, 2, &v124, 0, v89, v90);
    goto LABEL_75;
  }
  switch(v30)
  {
    case '(':
    case '-':
    case '0':
      goto LABEL_67;
    case ')':
    case '*':
    case ',':
    case '.':
    case '/':
      __break(1u);
      break;
    case '+':
      v31 = *(_QWORD *)(v91 + 24) + 8 * **(unsigned int **)(v91 + 24) + 16;
      v32 = *(_DWORD *)(v91 + 32);
      v33 = 43;
      goto LABEL_71;
    default:
      v31 = *(_QWORD *)(v91 + 24) + 8 * **(unsigned int **)(v91 + 24) + 16;
      v32 = *(_DWORD *)(v91 + 32);
      if (v30 == 19)
        v33 = 19;
      else
        v33 = 33;
      goto LABEL_71;
  }
}

void sub_22E5F523C(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  char v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  unsigned int *v21;
  _DWORD *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  BOOL v30;
  void *v31[2];
  _BYTE v32[64];
  void *v33[2];
  _BYTE v34[64];
  void *v35;
  uint64_t v36;
  _BYTE v37[64];
  _QWORD *v38;
  uint64_t v39;
  _QWORD v40[10];

  v40[8] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 320))
  {
    v38 = v40;
    v39 = 0x800000000;
    v35 = v37;
    v36 = 0x800000000;
    v33[0] = v34;
    v33[1] = (void *)0x800000000;
    v31[0] = v32;
    v31[1] = (void *)0x800000000;
    v3 = *(unsigned int **)(a2 + 24);
    if (v3)
    {
      v7 = *v3;
      v5 = (uint64_t *)(v3 + 4);
      v6 = v7;
      if (v7)
      {
        v8 = 8 * v6;
        v9 = v5;
        while (*(_DWORD *)(*v9 + 8) != 66)
        {
          ++v9;
          v8 -= 8;
          if (!v8)
            goto LABEL_33;
        }
      }
      else
      {
        v9 = v5;
      }
      v10 = &v5[v6];
      if (v9 != v10)
      {
        v11 = 0;
        v12 = 0;
        v13 = *v9;
LABEL_11:
        if (*(_DWORD *)(v13 + 48) != 1)
        {
          v30 = v12;
          sub_22F2633B0((uint64_t)&v38, (_BYTE *)(v13 + 104 + 8 * *(unsigned int *)(v13 + 16)), (_BYTE *)(v13 + 104 + 8 * *(unsigned int *)(v13 + 16) + 8 * *(unsigned int *)(v13 + 16)));
          v16 = *(unsigned int *)(v13 + 16);
          sub_22F2633B0((uint64_t)&v35, (_BYTE *)(v13 + 104 + 8 * v16 + 8 * v16), (_BYTE *)(v13 + 104 + 8 * v16 + 8 * v16 + 8 * v16));
          v17 = *(unsigned int *)(v13 + 16);
          v18 = (_BYTE *)(v13 + 104 + 8 * v17 + 8 * v17 + 8 * v17);
          sub_22F2633B0((uint64_t)v33, v18, &v18[8 * v17]);
          v19 = *(unsigned int *)(v13 + 16);
          v20 = (_BYTE *)(v13 + 104 + 8 * v19 + 8 * v19 + 8 * v19 + 8 * v19);
          sub_22F2633B0((uint64_t)v31, v20, &v20[8 * v19]);
          v12 = v30 || *(_DWORD *)(v13 + 48) == 2;
          v11 = 1;
        }
        v14 = v9 + 1;
        while (v14 != v10)
        {
          v15 = *v14++;
          v13 = v15;
          if (*(_DWORD *)(v15 + 8) == 66)
          {
            v9 = v14 - 1;
            goto LABEL_11;
          }
        }
        if ((v11 & 1) != 0)
        {
          if (v12)
          {
            v27 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
            v28 = *(unsigned int *)(a2 + 12);
            v29 = sub_22F421A30(*(_DWORD *)(a2 + 8));
            (*(void (**)(uint64_t, uint64_t, uint64_t, _BOOL8))(*(_QWORD *)v27 + 384))(v27, a1, v28, v29);
          }
          v21 = *(unsigned int **)(a2 + 24);
          if (!v21)
            goto LABEL_42;
          v24 = *v21;
          v22 = v21 + 4;
          v23 = v24;
          if (v24)
          {
            v25 = 8 * v23;
            v26 = v22;
            while (*(_DWORD *)(*(_QWORD *)v26 + 8) != 51)
            {
              v26 += 2;
              v25 -= 8;
              if (!v25)
                goto LABEL_42;
            }
          }
          else
          {
            v26 = v22;
          }
          if (v26 == &v22[2 * v23] || !*(_QWORD *)v26)
LABEL_42:
            sub_22F421A78(*(_DWORD *)(a2 + 8));
          (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD *, _QWORD, void *, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 808)
                                                                                            + 368))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808), a1, *(unsigned int *)(a2 + 16), v38, v39, v35, v36);
        }
      }
    }
LABEL_33:
    if (v31[0] != v32)
      free(v31[0]);
    if (v33[0] != v34)
      free(v33[0]);
    if (v35 != v37)
      free(v35);
    if (v38 != v40)
      free(v38);
  }
}

uint64_t sub_22E5F5574@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t **v9;
  __n128 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  unint64_t v26;
  _DWORD *v27;
  unsigned int v28;
  uint64_t OMPAlloc;
  llvm::Instruction *OMPFree;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  unint64_t v37;
  _DWORD *v38;
  unsigned int v39;
  uint64_t v40;
  llvm::Instruction *v41;
  uint64_t v42;
  llvm::Instruction *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47[2];
  char v48;
  void *v49;
  char v50;
  void *__p;
  char v52;
  __int128 v53;
  const char *v54;
  uint64_t v55;
  __int128 v56;
  const char *v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  if (a2
    && (v4 = result,
        v5 = *(_QWORD *)(result + 144),
        v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2),
        result = sub_22E5F59F4(v6),
        (result & 1) != 0))
  {
    v7 = sub_22EF5B404(*(_QWORD *)(v5 + 144), v6, 0);
    v8 = *(_QWORD *)(v6 + 48);
    if ((*(_BYTE *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 17) & 8) != 0)
    {
      v41 = sub_22F28CE84(v4, v8);
      v42 = llvm::ConstantInt::get();
      v59 = 257;
      v43 = sub_22F26180C(v4 + 272, (uint64_t)v41, v42, (uint64_t)&v56);
      v44 = llvm::ConstantInt::get();
      v59 = 257;
      v45 = sub_22E4DF3BC(v4 + 272, (uint64_t)v43, v44, (uint64_t)&v56, 0);
      v46 = llvm::ConstantInt::get();
      v59 = 257;
      sub_22E3BDEA8(v4 + 272, v45, v46, (uint64_t)&v56, 1, 0);
    }
    else
    {
      sub_22EF5CCD0(*(_QWORD *)(v5 + 144), *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v56);
      llvm::ConstantInt::get();
    }
    v10.n128_f64[0] = sub_22EFC8E88(v6);
    v11 = *v9;
    v12 = *((unsigned int *)v9 + 2);
    if ((_DWORD)v12 && *(_WORD *)(*v11 + 32) != 243)
    {
      v13 = 8 * v12 - 8;
      v14 = *v9;
      do
      {
        v15 = v14[1];
        ++v14;
        v13 -= 8;
      }
      while (*(_WORD *)(v15 + 32) != 243);
    }
    do
    {
      v17 = *v11++;
      v16 = v17;
    }
    while (*(_WORD *)(v17 + 32) != 243);
    v18 = *(_QWORD *)(v16 + 40);
    *(_QWORD *)&v56 = v4;
    *((_QWORD *)&v56 + 1) = v4 + 272;
    LOBYTE(v57) = 0;
    v58 = *(_QWORD *)(*(_QWORD *)(v4 + 144) + 232);
    v19 = sub_22E50E974(&v56, v18, v10);
    v20 = *(unsigned __int8 *)(*(_QWORD *)v19 + 8);
    if (v20 == 15)
    {
      v22 = *(_QWORD *)(v5 + 96);
      v59 = 257;
      sub_22E3C1338((uint64_t *)(v4 + 272), v19, v22, (uint64_t)&v56);
    }
    else if (v20 == 13)
    {
      v21 = *(_QWORD *)(v5 + 96);
      v59 = 257;
      sub_22E3C1740((uint64_t *)(v4 + 272), 48, v19, v21, (uint64_t)&v56);
    }
    v53 = *(_OWORD *)(v4 + 320);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v4 + 272));
    v23 = 0;
    v24 = *(_QWORD *)(v6 + 40);
    v25 = "";
    if ((v24 & 7) == 0)
    {
      v26 = v24 & 0xFFFFFFFFFFFFFFF8;
      if (v26)
      {
        v27 = *(_DWORD **)(v26 + 16);
        v28 = *v27;
        v25 = (const char *)(v27 + 4);
        v23 = v28;
      }
    }
    *(_QWORD *)&v56 = v25;
    *((_QWORD *)&v56 + 1) = v23;
    v57 = ".void.addr";
    v58 = 10;
    sub_22E5F5AB0(&__p, (uint64_t)&v56, 2);
    OMPAlloc = llvm::OpenMPIRBuilder::createOMPAlloc();
    if (v52 < 0)
      operator delete(__p);
    if (v54)
      llvm::MetadataTracking::untrack();
    v56 = *(_OWORD *)(v4 + 320);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v4 + 272));
    v50 = 0;
    LOBYTE(v49) = 0;
    OMPFree = (llvm::Instruction *)llvm::OpenMPIRBuilder::createOMPFree();
    if (v57)
      llvm::MetadataTracking::untrack();
    v31 = (_QWORD *)sub_22E4899EC(v4 + 1984, 3, 16);
    *v31 = off_24FA666C8;
    v31[1] = OMPFree;
    llvm::Instruction::removeFromParent(OMPFree);
    v32 = sub_22EF5B848(*(_QWORD *)(v5 + 144), *(_QWORD *)(v6 + 48), 0);
    v33 = sub_22E66C868(*(_QWORD *)(v4 + 144) + 280, v32, 0);
    v34 = 0;
    v35 = *(_QWORD *)(v6 + 40);
    v36 = "";
    if ((v35 & 7) == 0)
    {
      v37 = v35 & 0xFFFFFFFFFFFFFFF8;
      if (v37)
      {
        v38 = *(_DWORD **)(v37 + 16);
        v39 = *v38;
        v36 = (const char *)(v38 + 4);
        v34 = v39;
      }
    }
    *(_QWORD *)&v53 = v36;
    *((_QWORD *)&v53 + 1) = v34;
    v54 = ".addr";
    v55 = 5;
    sub_22E5F5AB0(v47, (uint64_t)&v53, 2);
    v59 = 260;
    *(_QWORD *)&v56 = v47;
    v40 = sub_22E3C1338((uint64_t *)(v4 + 272), OMPAlloc, v33, (uint64_t)&v56);
    if (v48 < 0)
      operator delete(v47[0]);
    result = sub_22E66C868(*(_QWORD *)(v4 + 144) + 280, *(_QWORD *)(v6 + 48), 0);
    *(_QWORD *)a3 = v40;
    *(_QWORD *)(a3 + 8) = result;
    *(_QWORD *)(a3 + 16) = v7;
    *(_DWORD *)(a3 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  return result;
}

BOOL sub_22E5F59F4(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  result = sub_22F282498(v1);
  if (result)
  {
    if ((*(_BYTE *)(v1 + 29) & 1) == 0)
      goto LABEL_11;
    sub_22EFC8E88(v1);
    v4 = *(uint64_t **)v3;
    v5 = *(unsigned int *)(v3 + 8);
    v6 = *(uint64_t **)v3;
    if ((_DWORD)v5)
    {
      v7 = 8 * v5;
      v6 = *(uint64_t **)v3;
      while (*(_WORD *)(*v6 + 32) != 243)
      {
        ++v6;
        v7 -= 8;
        if (!v7)
          goto LABEL_11;
      }
    }
    if (v6 == &v4[v5])
    {
LABEL_11:
      v8 = 0;
    }
    else
    {
      do
      {
        v9 = *v4++;
        v8 = v9;
      }
      while (*(_WORD *)(v9 + 32) != 243);
    }
    return *(_DWORD *)(v8 + 36) > 1u || *(_QWORD *)(v8 + 40) != 0;
  }
  return result;
}

void sub_22E5F5AB0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  size_t v7;
  const void *v8;
  _BYTE *v9;
  _QWORD *v10;
  _QWORD *v11;
  const void *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v17[4];
  _BYTE *v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  _QWORD v22[18];

  v22[16] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = xmmword_22F44E310;
  sub_22F242C48((uint64_t)v17, (uint64_t)&v20);
  if (a3)
  {
    v6 = a2 + 16 * a3;
    do
    {
      v8 = *(const void **)a2;
      v7 = *(_QWORD *)(a2 + 8);
      if ((_BYTE *)v17[3] == v18)
      {
        v10 = (_QWORD *)llvm::raw_ostream::write((llvm::raw_ostream *)v17, ".");
        v11 = v10 + 4;
        v9 = (_BYTE *)v10[4];
      }
      else
      {
        *v18 = 46;
        v9 = ++v18;
        v10 = v17;
        v11 = &v18;
      }
      if (v7 <= v10[3] - (_QWORD)v9)
      {
        if (v7)
        {
          memcpy(v9, v8, v7);
          *v11 += v7;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v10, (const char *)v8);
      }
      a2 += 16;
    }
    while (a2 != v6);
  }
  v12 = *(const void **)v19;
  if (!*(_QWORD *)v19)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    goto LABEL_22;
  }
  v13 = *(_QWORD *)(v19 + 8);
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v13 >= 0x17)
  {
    v14 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v14 = v13 | 7;
    v15 = v14 + 1;
    v16 = operator new(v14 + 1);
    a1[1] = v13;
    a1[2] = v15 | 0x8000000000000000;
    *a1 = v16;
    a1 = v16;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v13;
    if (!v13)
      goto LABEL_21;
  }
  memmove(a1, v12, v13);
LABEL_21:
  *((_BYTE *)a1 + v13) = 0;
LABEL_22:
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v17);
  if (v20 != v22)
    free(v20);
}

void sub_22E5F5C98(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  llvm::IRBuilderBase *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t CachedThreadPrivate;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  char v20;
  __int128 v21;
  __int128 v22;
  __int16 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD **)(a1 + 144);
  if ((*(_BYTE *)(v8[19] + 76) & 4) != 0 && *(_BYTE *)(*(_QWORD *)(v8[18] + 15088) + 81))
  {
    v9 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a3;
    *(_OWORD *)(a4 + 16) = v9;
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a3 + 32);
  }
  else
  {
    v10 = *(_QWORD *)(a3 + 8);
    v11 = (llvm::IRBuilderBase *)(a1 + 272);
    if ((*(_BYTE *)(a3 + 24) & 3) != 0)
      v12 = sub_22F28ABCC(a3, a1);
    else
      v12 = *(_QWORD *)a3;
    v13 = v8[12];
    v23 = 257;
    sub_22E3CA9BC((uint64_t *)(a1 + 272), v12, v13, (uint64_t)&v21);
    sub_22F29B798((uint64_t)v8, v10);
    llvm::ConstantInt::get();
    v21 = xmmword_24FA66648;
    v22 = off_24FA66658;
    sub_22E5F5AB0(__p, (uint64_t)&v21, 2);
    *(_QWORD *)&v21 = sub_22E624994((uint64_t)v8, a2, 0);
    *((_QWORD *)&v21 + 1) = v14;
    *(_QWORD *)&v22 = __p;
    v23 = 1029;
    llvm::IRBuilderBase::getCurrentDebugLocation(v11);
    CachedThreadPrivate = llvm::OpenMPIRBuilder::createCachedThreadPrivate();
    if (v18)
      llvm::MetadataTracking::untrack();
    v16 = v8[1];
    v17 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a4 = CachedThreadPrivate;
    *(_QWORD *)(a4 + 8) = v16;
    *(_QWORD *)(a4 + 16) = v17;
    *(_DWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 40) = 0;
    if (v20 < 0)
      operator delete(__p[0]);
  }
}

uint64_t sub_22E5F5E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int **v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int *v37;
  uint64_t v38;
  int v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _BYTE v50[128];
  _QWORD v51[2];
  char v52;
  uint64_t v53;
  _QWORD v54[13];

  v54[11] = *MEMORY[0x24BDAC8D0];
  v10 = sub_22E59F470(a2, 40);
  v11 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144)
                                                                                           + 808)
                                                                             + 88))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808), a2, *(_QWORD *)((*(_QWORD *)(v10 + 16) & 0xFFFFFFFFFFFFFFF8) + 88), a3, a4);
  v13 = *(unsigned int **)(a2 + 24);
  if (!v13)
  {
    v14 = 0;
LABEL_39:
    v43 = 0;
    goto LABEL_40;
  }
  v15 = v13 + 4;
  v16 = *v13;
  if ((_DWORD)v16)
  {
    v18 = 0;
    while (*(_DWORD *)(*(_QWORD *)&v15[v18] + 8) != 58)
    {
      v18 += 2;
      if (2 * v16 == v18)
        goto LABEL_12;
    }
    v17 = (unsigned int **)&v15[v18];
  }
  else
  {
    v17 = (unsigned int **)(v13 + 4);
  }
  if (v17 != (unsigned int **)&v15[2 * v16] && (v19 = *v17) != 0)
  {
    v24 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
    v25 = *(_QWORD *)(a1 + 2312);
    v26 = *(_BYTE *)(a1 + 2893);
    *(_BYTE *)(a1 + 2893) = 0;
    v47 = *(_QWORD *)(a1 + 2872);
    *(_QWORD *)(a1 + 2872) = v24;
    v27 = *((_QWORD *)v19 + 4);
    v51[0] = a1;
    v51[1] = a1 + 272;
    v52 = 1;
    v53 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
    v14 = sub_22E50E974(v51, v27, v12);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 808) + 280))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808), a1, v14, *v19);
    *(_BYTE *)(a1 + 2893) = v26;
    sub_22E48B274(a1, v24, v25, 0, 0);
    *(_QWORD *)(a1 + 2872) = v47;
    v13 = *(unsigned int **)(a2 + 24);
    if (!v13)
      goto LABEL_39;
  }
  else
  {
LABEL_12:
    v14 = 0;
  }
  v20 = v13 + 4;
  v21 = *v13;
  if ((_DWORD)v21)
  {
    v23 = 0;
    while (*(_DWORD *)(*(_QWORD *)&v20[v23] + 8) != 64)
    {
      v23 += 2;
      if (2 * v21 == v23)
        goto LABEL_25;
    }
    v22 = (unsigned int **)&v20[v23];
  }
  else
  {
    v22 = (unsigned int **)(v13 + 4);
  }
  if (v22 != (unsigned int **)&v20[2 * v21])
  {
    v28 = *v22;
    if (*v22)
    {
      v29 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
      v30 = *(_QWORD *)(a1 + 2312);
      v31 = *(_BYTE *)(a1 + 2893);
      *(_BYTE *)(a1 + 2893) = 0;
      v32 = *(_QWORD *)(a1 + 2872);
      *(_QWORD *)(a1 + 2872) = v29;
      (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 808) + 288))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808), a1, v28[4], *v28);
      *(_BYTE *)(a1 + 2893) = v31;
      sub_22E48B274(a1, v29, v30, 0, 0);
      *(_QWORD *)(a1 + 2872) = v32;
      v13 = *(unsigned int **)(a2 + 24);
    }
  }
LABEL_25:
  if (!v13)
    goto LABEL_39;
  v35 = *v13;
  v33 = v13 + 4;
  v34 = v35;
  if (v35)
  {
    v42 = 8 * v34;
    v36 = v33;
    while (*(_DWORD *)(*(_QWORD *)v36 + 8) != 36)
    {
      v36 += 2;
      v42 -= 8;
      if (!v42)
        goto LABEL_39;
    }
  }
  else
  {
    v36 = v33;
  }
  v37 = &v33[2 * v34];
  if (v36 == v37)
    goto LABEL_39;
  v38 = *(_QWORD *)v36;
LABEL_30:
  v39 = *(_DWORD *)(v38 + 44);
  if (v39 != 40 && v39 != 89)
  {
    v40 = v36 + 2;
    while (v40 != v37)
    {
      v41 = *(_QWORD *)v40;
      v40 += 2;
      v38 = v41;
      if (*(_DWORD *)(v41 + 8) == 36)
      {
        v36 = v40 - 2;
        goto LABEL_30;
      }
    }
    goto LABEL_39;
  }
  v43 = *(_QWORD *)(v38 + 32);
LABEL_40:
  v44 = *(_DWORD *)(a2 + 8);
  v45 = ((v44 - 56) >= 0x2B || ((0x6000001CF91uLL >> (v44 - 56)) & 1) == 0)
     && !sub_22F421B7C(*(_DWORD *)(a2 + 8))
     && sub_22F421A78(v44);
  sub_22E600354((uint64_t)v51, a1, a2, 0, v45);
  v48 = v50;
  v49 = 0x1000000000;
  (*(void (**)(_QWORD, uint64_t, uint64_t, void **))a5)(*(_QWORD *)(a5 + 8), a1, a2, &v48);
  sub_22E5F01E0((_QWORD *)a1, v10, (uint64_t)&v48);
  (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, void *, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 808)
                                                                                             + 120))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808), a1, *(unsigned int *)(a2 + 12), v11, v48, v49, v43, v14);
  if (v48 != v50)
    free(v48);
  sub_22F283FC4((uint64_t)v54);
  return sub_22E488B4C((uint64_t)v51);
}

uint64_t sub_22E5F6264(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD *), uint64_t a4)
{
  unsigned int *v4;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *i;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  const char *v24;
  __int16 v25;

  if (*(_QWORD *)(result + 320))
  {
    v4 = *(unsigned int **)(a2 + 24);
    if (v4)
    {
      v7 = (_QWORD *)result;
      v10 = *v4;
      v8 = (uint64_t *)(v4 + 4);
      v9 = v10;
      if (v10)
      {
        v11 = 8 * v9;
        for (i = v8; *(_DWORD *)(*i + 8) != 66; ++i)
        {
          v11 -= 8;
          if (!v11)
            return result;
        }
      }
      else
      {
        i = v8;
      }
      v13 = &v8[v9];
      if (i != v13)
      {
        v14 = 0;
        v15 = (uint64_t *)(result + 272);
        v16 = *i;
LABEL_11:
        if (*(_QWORD *)(v16 + 40))
        {
          if (!v14)
          {
            v23 = v15;
            v17 = a3(a4, v7);
            if (v17)
            {
              v18 = v17;
              v24 = ".omp.reduction.pu";
              v25 = 259;
              v19 = (_QWORD *)operator new();
              llvm::BasicBlock::BasicBlock();
              v24 = ".omp.reduction.pu.done";
              v25 = 259;
              v14 = (_QWORD *)operator new();
              llvm::BasicBlock::BasicBlock();
              v20 = llvm::User::operator new((llvm::User *)0x40);
              MEMORY[0x23489C09C](v20, v19, v14, v18, 0);
              v25 = 257;
              v15 = v23;
              sub_22E3C12C8(v23, v20, (uint64_t)&v24);
              sub_22E5ED9B4(v7, v19, 0);
            }
            else
            {
              v14 = 0;
            }
          }
          result = sub_22E4D89CC(v7);
        }
        v21 = i + 1;
        while (v21 != v13)
        {
          v22 = *v21++;
          v16 = v22;
          if (*(_DWORD *)(v22 + 8) == 66)
          {
            i = v21 - 1;
            goto LABEL_11;
          }
        }
        if (v14)
          return sub_22E5ED9B4(v7, v14, 1);
      }
    }
  }
  return result;
}

uint64_t sub_22E5F6470(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 **v12;
  uint64_t i;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 **v33;
  uint64_t j;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 **v54;
  uint64_t k;
  unsigned __int8 *v56;
  uint64_t v57;
  unsigned int v58;
  BOOL v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unsigned __int8 *v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 **v76;
  uint64_t m;
  unsigned __int8 *v78;
  uint64_t v79;
  unsigned int v80;
  BOOL v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unsigned __int8 *v86;
  uint64_t v87;
  unsigned int *v88;
  uint64_t v89;
  uint64_t v90;
  llvm *v91[2];
  unsigned int v92;
  _BYTE v93[24];

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 144) + 152) + 72) >= 0x32u)
  {
    v3 = result;
    v91[0] = 0;
    v91[1] = 0;
    v92 = 0;
    v4 = *(unsigned int **)(a2 + 24);
    if (v4)
    {
      v5 = v4 + 4;
      v6 = *v4;
      if ((_DWORD)v6)
      {
        v7 = 0;
        while (*(_DWORD *)(*(_QWORD *)&v5[v7] + 8) != 66)
        {
          v7 += 2;
          if (2 * v6 == v7)
            goto LABEL_40;
        }
        v8 = &v5[v7];
      }
      else
      {
        v8 = v4 + 4;
      }
      v9 = &v5[2 * v6];
      if (v8 != v9)
      {
        v10 = *(_QWORD *)v8;
LABEL_12:
        v11 = *(unsigned int *)(v10 + 16);
        if ((_DWORD)v11)
        {
          v12 = (unsigned __int8 **)(v10 + 104);
          for (i = 8 * v11; i; i -= 8)
          {
            v14 = *v12;
            v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v12 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            v16 = *(_DWORD *)(v15 + 16);
            if (v15)
              v17 = v16 == 11;
            else
              v17 = 0;
            if (v17)
            {
              if (((v16 >> 19) & 0x1FF) - 166 < 0x35)
                goto LABEL_29;
            }
            else if (v15 && v16 == 44)
            {
              v18 = sub_22F114198(*(_QWORD *)(v15 + 24));
              if ((*(_BYTE *)(v18 + 74) & 1) != 0 || *(_QWORD *)(v18 + 128) >= 8uLL)
                goto LABEL_29;
            }
            else
            {
              v19 = v16;
              v20 = (1 << v16) & 0x8180001600;
              if (v19 <= 0x27 && v20 != 0)
              {
LABEL_29:
                v22 = sub_22EFFA6B0(v14);
                if (*v22 == 161)
                {
                  v23 = *((_QWORD *)v22 + 2);
                  if (v23)
                    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
                  v90 = v23;
                  sub_22F293CAC((uint64_t)v93, (uint64_t)v91, &v90);
                  (*(void (**)(_QWORD, uint64_t, unsigned __int8 *))(**(_QWORD **)(*(_QWORD *)(v3 + 144)
                                                                                           + 808)
                                                                             + 616))(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 808), v3, v14);
                }
              }
            }
            ++v12;
          }
        }
        v24 = v8 + 2;
        while (v24 != v9)
        {
          v25 = *(_QWORD *)v24;
          v24 += 2;
          v10 = v25;
          if (*(_DWORD *)(v25 + 8) == 66)
          {
            v8 = v24 - 2;
            goto LABEL_12;
          }
        }
        v4 = *(unsigned int **)(a2 + 24);
      }
LABEL_40:
      if (v4)
      {
        v26 = v4 + 4;
        v27 = *v4;
        if ((_DWORD)v27)
        {
          v28 = 0;
          while (*(_DWORD *)(*(_QWORD *)&v26[v28] + 8) != 43)
          {
            v28 += 2;
            if (2 * v27 == v28)
              goto LABEL_78;
          }
          v29 = &v26[v28];
        }
        else
        {
          v29 = v4 + 4;
        }
        v30 = &v26[2 * v27];
        if (v29 != v30)
        {
          v31 = *(_QWORD *)v29;
LABEL_50:
          v32 = *(unsigned int *)(v31 + 16);
          if ((_DWORD)v32)
          {
            v33 = (unsigned __int8 **)(v31 + 64);
            for (j = 8 * v32; j; j -= 8)
            {
              v35 = *v33;
              v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v33 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
              v37 = *(_DWORD *)(v36 + 16);
              if (v36)
                v38 = v37 == 11;
              else
                v38 = 0;
              if (v38)
              {
                if (((v37 >> 19) & 0x1FF) - 166 < 0x35)
                  goto LABEL_67;
              }
              else if (v36 && v37 == 44)
              {
                v39 = sub_22F114198(*(_QWORD *)(v36 + 24));
                if ((*(_BYTE *)(v39 + 74) & 1) != 0 || *(_QWORD *)(v39 + 128) >= 8uLL)
                  goto LABEL_67;
              }
              else
              {
                v40 = v37;
                v41 = (1 << v37) & 0x8180001600;
                if (v40 <= 0x27 && v41 != 0)
                {
LABEL_67:
                  v43 = sub_22EFFA6B0(v35);
                  if (*v43 == 161)
                  {
                    v44 = *((_QWORD *)v43 + 2);
                    if (v44)
                      v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 32))(v44);
                    v90 = v44;
                    sub_22F293CAC((uint64_t)v93, (uint64_t)v91, &v90);
                    (*(void (**)(_QWORD, uint64_t, unsigned __int8 *))(**(_QWORD **)(*(_QWORD *)(v3 + 144)
                                                                                             + 808)
                                                                               + 616))(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 808), v3, v35);
                  }
                }
              }
              ++v33;
            }
          }
          v45 = v29 + 2;
          while (v45 != v30)
          {
            v46 = *(_QWORD *)v45;
            v45 += 2;
            v31 = v46;
            if (*(_DWORD *)(v46 + 8) == 43)
            {
              v29 = v45 - 2;
              goto LABEL_50;
            }
          }
          v4 = *(unsigned int **)(a2 + 24);
        }
LABEL_78:
        if (v4)
        {
          v47 = v4 + 4;
          v48 = *v4;
          if ((_DWORD)v48)
          {
            v49 = 0;
            while (*(_DWORD *)(*(_QWORD *)&v47[v49] + 8) != 44)
            {
              v49 += 2;
              if (2 * v48 == v49)
                goto LABEL_116;
            }
            v50 = &v47[v49];
          }
          else
          {
            v50 = v4 + 4;
          }
          v51 = &v47[2 * v48];
          if (v50 != v51)
          {
            v52 = *(_QWORD *)v50;
LABEL_88:
            v53 = *(unsigned int *)(v52 + 16);
            if ((_DWORD)v53)
            {
              v54 = (unsigned __int8 **)(v52 + 64);
              for (k = 8 * v53; k; k -= 8)
              {
                v56 = *v54;
                v57 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v54 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                v58 = *(_DWORD *)(v57 + 16);
                if (v57)
                  v59 = v58 == 11;
                else
                  v59 = 0;
                if (v59)
                {
                  if (((v58 >> 19) & 0x1FF) - 166 < 0x35)
                    goto LABEL_105;
                }
                else if (v57 && v58 == 44)
                {
                  v60 = sub_22F114198(*(_QWORD *)(v57 + 24));
                  if ((*(_BYTE *)(v60 + 74) & 1) != 0 || *(_QWORD *)(v60 + 128) >= 8uLL)
                    goto LABEL_105;
                }
                else
                {
                  v61 = v58;
                  v62 = (1 << v58) & 0x8180001600;
                  if (v61 <= 0x27 && v62 != 0)
                  {
LABEL_105:
                    v64 = sub_22EFFA6B0(v56);
                    if (*v64 == 161)
                    {
                      v65 = *((_QWORD *)v64 + 2);
                      if (v65)
                        v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 32))(v65);
                      v90 = v65;
                      sub_22F293CAC((uint64_t)v93, (uint64_t)v91, &v90);
                      (*(void (**)(_QWORD, uint64_t, unsigned __int8 *))(**(_QWORD **)(*(_QWORD *)(v3 + 144)
                                                                                               + 808)
                                                                                 + 616))(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 808), v3, v56);
                    }
                  }
                }
                ++v54;
              }
            }
            v66 = v50 + 2;
            while (v66 != v51)
            {
              v67 = *(_QWORD *)v66;
              v66 += 2;
              v52 = v67;
              if (*(_DWORD *)(v67 + 8) == 44)
              {
                v50 = v66 - 2;
                goto LABEL_88;
              }
            }
            v4 = *(unsigned int **)(a2 + 24);
          }
LABEL_116:
          if (v4)
          {
            v70 = *v4;
            v68 = v4 + 4;
            v69 = v70;
            if (v70)
            {
              v71 = 8 * v69;
              v72 = v68;
              while (*(_DWORD *)(*(_QWORD *)v72 + 8) != 29)
              {
                v72 += 2;
                v71 -= 8;
                if (!v71)
                  goto LABEL_152;
              }
            }
            else
            {
              v72 = v68;
            }
            v73 = &v68[2 * v69];
            if (v72 != v73)
            {
              v74 = *(_QWORD *)v72;
LABEL_125:
              v75 = *(unsigned int *)(v74 + 16);
              if ((_DWORD)v75)
              {
                v76 = (unsigned __int8 **)(v74 + 40);
                for (m = 8 * v75; m; m -= 8)
                {
                  v78 = *v76;
                  v79 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v76 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                  v80 = *(_DWORD *)(v79 + 16);
                  if (v79)
                    v81 = v80 == 11;
                  else
                    v81 = 0;
                  if (v81)
                  {
                    if (((v80 >> 19) & 0x1FF) - 166 < 0x35)
                      goto LABEL_142;
                  }
                  else if (v79 && v80 == 44)
                  {
                    v82 = sub_22F114198(*(_QWORD *)(v79 + 24));
                    if ((*(_BYTE *)(v82 + 74) & 1) != 0 || *(_QWORD *)(v82 + 128) >= 8uLL)
                      goto LABEL_142;
                  }
                  else
                  {
                    v83 = v80;
                    v84 = (1 << v80) & 0x8180001600;
                    if (v83 <= 0x27 && v84 != 0)
                    {
LABEL_142:
                      v86 = sub_22EFFA6B0(v78);
                      if (*v86 == 161)
                      {
                        v87 = *((_QWORD *)v86 + 2);
                        if (v87)
                          v87 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 32))(v87);
                        v90 = v87;
                        sub_22F293CAC((uint64_t)v93, (uint64_t)v91, &v90);
                      }
                    }
                  }
                  ++v76;
                }
              }
              v88 = v72 + 2;
              while (v88 != v73)
              {
                v89 = *(_QWORD *)v88;
                v88 += 2;
                v74 = v89;
                if (*(_DWORD *)(v89 + 8) == 29)
                {
                  v72 = v88 - 2;
                  goto LABEL_125;
                }
              }
            }
          }
        }
      }
    }
LABEL_152:
    (*(void (**)(_QWORD, uint64_t, uint64_t, llvm **))(**(_QWORD **)(*(_QWORD *)(v3 + 144) + 808) + 624))(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 808), v3, a2, v91);
    return llvm::deallocate_buffer(v91[0], (void *)(8 * v92));
  }
  return result;
}

void sub_22E5F6B30(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _DWORD *i;
  int v11;
  _DWORD **v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[4];
  int v23;
  const char *v24;
  _BYTE v25[104];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  while (2)
  {
    for (i = (_DWORD *)a2; ; i = *v12)
    {
      v11 = *(unsigned __int8 *)i;
      if (v11 != 8)
        break;
      if ((*i & 0xFFFFFF00) != 0x100)
      {
        v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 1992);
        v16 = i[1];
        llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
        v22[0] = &unk_24FAE1B70;
        v22[3] = v15;
        v23 = v16;
        v24 = "LLVM IR generation of compound statement ('{}')";
        sub_22F0D4E74(a2);
        sub_22E4889F4((uint64_t)v25, a1, v17);
        v18 = *i;
        if (v18 >= 0x100)
        {
          v19 = (uint64_t *)(i + 4);
          v20 = 8 * (v18 >> 8);
          do
          {
            v21 = *v19++;
            sub_22E5F6B30(a1, v21, a3, a4, a5);
            v20 -= 8;
          }
          while (v20);
        }
        sub_22E488B4C((uint64_t)v25);
        llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v22);
        return;
      }
      v12 = (_DWORD **)(i + 4);
LABEL_8:
      ;
    }
    if (v11 == 101)
    {
      v12 = (_DWORD **)(i + 2);
      goto LABEL_8;
    }
    if (i == (_DWORD *)a3)
    {
      if ((v11 & 0xFE) == 0x3C)
        a3 = *(_QWORD **)(a3[3] + 8 * *(unsigned int *)a3[3] + 24);
      v13 = *(unsigned __int8 *)a3;
      if (v13 == 20)
      {
        a3 = (_QWORD *)a3[1];
        v13 = *(unsigned __int8 *)a3;
      }
      if (v13 == 14)
      {
        v14 = a3 + 5;
      }
      else
      {
        sub_22E5E5158(a1, a3[8], 0, 0);
        v14 = a3 + 9;
      }
      a2 = *v14;
      a5 = (a5 + 1);
      if ((int)a5 < (int)a4)
      {
        a3 = (_QWORD *)sub_22F0D8AD8((_DWORD *)*v14, 1);
        continue;
      }
    }
    break;
  }
  sub_22E5E5158(a1, a2, 0, 0);
}

uint64_t sub_22E5F6D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Value *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t CanonicalLoop;
  uint64_t SingleSuccessor;
  unsigned int v29;
  int v30;
  uint64_t v31;
  _QWORD v32[3];
  int v33;
  uint64_t v34;
  uint64_t v35;
  llvm::Value *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[4];
  __int16 v41;
  _BYTE v42[104];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v39 = a2;
  v3 = *(_QWORD *)(a2 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 76) & 0x20) == 0)
    return sub_22E5E5158(a1, *(_QWORD *)(a2 + 8), 0, 0);
  sub_22F0D4E74(a2);
  sub_22E4889F4((uint64_t)v42, a1, v6);
  if (*(_BYTE *)v3 == 14)
  {
    v7 = *(_QWORD *)(v3 + 8);
    if (v7)
      sub_22E5E5158(a1, v7, 0, 0);
    v8 = (uint64_t *)(v3 + 40);
  }
  else
  {
    v9 = *(_QWORD *)(v3 + 24);
    if (v9)
      sub_22E5E5158(a1, v9, 0, 0);
    v10 = *(_QWORD *)(v3 + 32);
    if (v10)
      sub_22E5E5158(a1, v10, 0, 0);
    v11 = *(_QWORD *)(v3 + 40);
    if (v11)
      sub_22E5E5158(a1, v11, 0, 0);
    v12 = *(_QWORD *)(v3 + 64);
    if (v12)
      sub_22E5E5158(a1, v12, 0, 0);
    v8 = (uint64_t *)(v3 + 72);
  }
  v38 = *v8;
  v13 = *(_QWORD *)(a2 + 16);
  v14 = sub_22E5F7118();
  v16 = v15;
  v36 = sub_22E5F7118();
  v37 = v17;
  v18 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v13 + 16) & 0xFFFFFFFFFFFFFFF8) + 88) + 48);
  v19 = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0);
  if (v19)
  {
    v20 = *(_DWORD *)(v19 + 16);
    if ((v20 & 0xFE) == 0x28)
      goto LABEL_36;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v19 = sub_22F10CF48(v19);
    if (v19)
    {
      v20 = *(_DWORD *)(v19 + 16);
LABEL_36:
      if ((v20 & 0x100000) != 0)
      {
        do
        {
          v19 = *(_QWORD *)(*(_QWORD *)(v19 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v19)
          {
            v30 = *(_DWORD *)(v19 + 16);
            if ((v30 & 0xFE) == 0x28)
              continue;
          }
          v19 = sub_22F10CF48(v19);
          v30 = *(_DWORD *)(v19 + 16);
        }
        while ((v30 & 0x100000) != 0);
      }
      v18 = *(_QWORD *)(v19 + 32);
    }
  }
  v40[0] = (uint64_t)".count.addr";
  v41 = 259;
  v21 = sub_22F25E4D4(a1, v18, (uint64_t)v40, 0);
  v23 = v22;
  v40[0] = v21 & 0xFFFFFFFFFFFFFFF8;
  sub_22E5F723C(a1, (uint64_t)v14, v16, v40, 1);
  if (v21 <= 7)
    v24 = 0;
  else
    v24 = v21 & 0xFFFFFFFFFFFFFFF8;
  v25 = v23 & 0xFFFFFFFFFFFFFFF8;
  if (v21 <= 7)
    v25 = 0;
  v32[0] = v24;
  v32[1] = v25;
  v26 = 1 << (v23 & 7 | (8 * (v21 & 7)));
  if (v21 < 8)
    v26 = 0;
  v32[2] = v26;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  sub_22E3C43AC((uint64_t *)(a1 + 272), (uint64_t)v32, ".count");
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 272));
  v40[0] = (uint64_t)"loop";
  v41 = 259;
  CanonicalLoop = llvm::OpenMPIRBuilder::createCanonicalLoop();
  if (v31)
    llvm::MetadataTracking::untrack();
  SingleSuccessor = llvm::BasicBlock::getSingleSuccessor(*(llvm::BasicBlock **)(CanonicalLoop + 24));
  if (SingleSuccessor)
  {
    sub_22E3CB840(a1 + 272, SingleSuccessor, *(_QWORD *)(SingleSuccessor + 48));
  }
  else
  {
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 328) = 0;
  }
  sub_22E488BE4((uint64_t)v42);
  v29 = *(_DWORD *)(a1 + 1544);
  if (v29 >= *(_DWORD *)(a1 + 1548))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v29 = *(_DWORD *)(a1 + 1544);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 1536) + 8 * v29) = CanonicalLoop;
  ++*(_DWORD *)(a1 + 1544);
  return sub_22E488B4C((uint64_t)v42);
}

llvm::Value *sub_22E5F7118()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::Value *v7;
  char v9[8];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  _OWORD v14[3];
  uint64_t v15[6];
  _BYTE v16[1856];
  uint64_t v17;
  uint64_t v18;

  v0 = (_QWORD *)MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = (uint64_t)v0;
  v18 = *MEMORY[0x24BDAC8D0];
  sub_22E5EEEDC(v0, v1, (uint64_t)v9);
  sub_22E618EBC((uint64_t)v16, *(_QWORD *)(v3 + 144), 1);
  v4 = operator new();
  v5 = sub_22E5BB2A4(v4, v2, 0);
  v6 = v17;
  v17 = v5;
  v7 = sub_22E5EF124((uint64_t)v16, v2);
  v14[0] = v10;
  v14[1] = v11;
  v14[2] = v12;
  sub_22E5E0440(v3, (uint64_t)v14, v13, v15);
  v17 = v6;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_22E619434((uint64_t)v16);
  return v7;
}

void sub_22E5F723C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _WORD v15[20];
  void *v16;
  uint64_t v17;
  _QWORD v18[7];

  v18[6] = *MEMORY[0x24BDAC8D0];
  v16 = v18;
  v17 = 0x600000000;
  if ((unint64_t)(a5 + 1) < 7)
  {
    v11 = 0;
    v10 = v18;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = v16;
    v11 = v17;
  }
  sub_22F293DE0((unsigned int *)&v16, (uint64_t)&v10[v11], a4, &a4[a5]);
  v12 = v17;
  if (v17 >= HIDWORD(v17))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = v17;
  }
  *((_QWORD *)v16 + v12) = a3;
  v13 = (v17 + 1);
  LODWORD(v17) = v17 + 1;
  if (a2)
    v14 = *(_QWORD *)(a2 + 24);
  else
    v14 = 0;
  v15[16] = 257;
  sub_22E462B78((uint64_t *)(a1 + 272), v14, a2, (uint64_t)v16, v13, (uint64_t)v15, 0);
  if (v16 != v18)
    free(v16);
}

uint64_t sub_22E5F7384(uint64_t a1, unsigned int *a2)
{
  BOOL v2;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  unsigned __int8 v47[32];
  char v48[8];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _OWORD v52[2];
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57[2];
  uint64_t v58;
  __int128 v59[4];

  if (*(_QWORD *)(a1 + 320))
    v2 = a2 == 0;
  else
    v2 = 1;
  if (v2)
    goto LABEL_28;
  v6 = *a2;
  v4 = (uint64_t *)(a2 + 4);
  v5 = v6;
  if (v6)
  {
    v7 = 8 * v5;
    v8 = v4;
    while (*(_DWORD *)(*v8 + 8) != 44)
    {
      ++v8;
      v7 -= 8;
      if (!v7)
        goto LABEL_28;
    }
  }
  else
  {
    v8 = v4;
  }
  v9 = &v4[v5];
  if (v8 == v9)
  {
LABEL_28:
    v10 = 0;
  }
  else
  {
    v10 = 0;
    v11 = *v8;
    v35 = &v4[v5];
LABEL_13:
    v12 = v11 + 64;
    v13 = *(unsigned int *)(v11 + 16);
    if ((_DWORD)v13)
    {
      v14 = v12 + 8 * v13 + 8 * v13;
      v15 = 8 * v13;
      do
      {
        v16 = *(_QWORD *)(*(_QWORD *)v14 + 16);
        v17 = (unsigned __int8 *)sub_22EFBC5B4(v16);
        v18 = sub_22EFFEB40(v17);
        if (*v18 == 161)
        {
          v19 = v18;
          v20 = sub_22E4C8440(a1, v16, (uint64_t)v48);
          v21 = *((_QWORD *)v19 + 2);
          v22 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
          v23 = (*(uint64_t (**)(_QWORD, uint64_t, double))(**(_QWORD **)(a1 + 1856) + 32))(*(_QWORD *)(a1 + 1856), v21, v20) != 0;
          v24 = sub_22EFBC5B4(v16);
          v25 = *(_QWORD *)(v24 + 8);
          sub_22EFF605C(v24);
          *(_QWORD *)&v59[0] = 0;
          sub_22EFF69F0((uint64_t)v47, v22, v21, v23, v25, 1, v26, v59, 0);
          v54 = v49;
          v55 = v50;
          v56 = v51;
          v27 = *(_QWORD *)(v16 + 48);
          sub_22E6281E0(*(_QWORD **)(a1 + 144), v27, (uint64_t)v52);
          v59[0] = v54;
          v59[1] = v55;
          v59[2] = v56;
          v28 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
          v57[0] = v52[0];
          v57[1] = v52[1];
          v58 = v53;
          v37 = 0;
          v38 = 0;
          *((_QWORD *)&v36 + 1) = 0;
          v39 = 0;
          v40 = 0;
          v41 = 0;
          v42 = 0;
          v43 = 0;
          v44 = 2;
          LODWORD(v36) = 0;
          v45 = 0u;
          v46 = 0u;
          sub_22E3C113C((uint64_t)&v36, v59, v27, 2, v57, v28);
          sub_22E4CB220(a1, v47, v16, &v36, 0);
          sub_22E4C9A74(a1, (uint64_t)v48);
        }
        else
        {
          sub_22E4C652C((_QWORD *)a1, v16);
        }
        v14 += 8;
        v15 -= 8;
      }
      while (v15);
      v29 = *(unsigned int *)(v11 + 16);
      v10 = 1;
      v9 = v35;
      v12 = v11 + 64;
    }
    else
    {
      v29 = 0;
    }
    v30 = *(_QWORD *)(v12 + 8 * v29 + 8 * v29 + 8 * v29 + 8 * v29 + 8 * v29 + 8);
    if (v30)
    {
      v31 = *(_QWORD *)(v30 + 16);
      if (v31)
      {
        sub_22E4C652C((_QWORD *)a1, *(_QWORD *)(v31 + 16));
        sub_22E4D89CC(a1);
      }
    }
    v32 = v8 + 1;
    while (v32 != v9)
    {
      v33 = *v32++;
      v11 = v33;
      if (*(_DWORD *)(v33 + 8) == 44)
      {
        v8 = v32 - 1;
        goto LABEL_13;
      }
    }
  }
  return v10 & 1;
}

uint64_t sub_22E5F766C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  unsigned int *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *i;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  llvm *v40[2];
  unsigned int v41;
  _OWORD v42[3];
  _QWORD v43[2];

  if (*(_QWORD *)(result + 320))
  {
    v5 = result;
    v40[0] = 0;
    v40[1] = 0;
    v41 = 0;
    v6 = *(_DWORD *)(a2 + 8);
    if (sub_22F421AC0(v6))
    {
      v31 = *(unsigned int **)(a2 + 24);
      v32 = *v31;
      v33 = sub_22F293A28(v6);
      v34 = *(unsigned int *)(a2 + 32);
      if ((_DWORD)v34)
      {
        v35 = &v31[2 * v32 + 4 + 2 * v33];
        v36 = 8 * v34;
        do
        {
          v37 = *(_QWORD *)v35;
          v35 += 2;
          v43[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v37 + 16) + 32))(*(_QWORD *)(v37 + 16));
          sub_22F294270((uint64_t)v42, (uint64_t)v40, v43);
          v36 -= 8;
        }
        while (v36);
      }
    }
    v7 = *(unsigned int **)(a2 + 24);
    if (v7)
    {
      v10 = *v7;
      v8 = (uint64_t *)(v7 + 4);
      v9 = v10;
      if (v10)
      {
        v11 = 8 * v9;
        for (i = v8; *(_DWORD *)(*i + 8) != 44; ++i)
        {
          v11 -= 8;
          if (!v11)
            return llvm::deallocate_buffer(v40[0], (void *)(8 * v41));
        }
      }
      else
      {
        i = v8;
      }
      v13 = &v8[v9];
      if (i != v13)
      {
        v14 = *i;
LABEL_12:
        v15 = *(unsigned int *)(v14 + 16);
        if ((_DWORD)v15)
        {
          v16 = v14 + 64;
          v17 = v14 + 64 + 8 * v15;
          v18 = v17;
          while (1)
          {
            v19 = *(_QWORD *)(*(_QWORD *)v16 + 16);
            v20 = *(_QWORD *)(*(_QWORD *)v18 + 16);
            v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
            if (!v41)
              goto LABEL_21;
            v22 = ((v21 >> 4) ^ (v21 >> 9)) & (v41 - 1);
            v23 = *((_QWORD *)v40[0] + v22);
            if (v21 != v23)
              break;
LABEL_16:
            sub_22E4C652C((_QWORD *)v5, v20);
LABEL_24:
            v18 += 8;
            v16 += 8;
            if (v16 == v17)
              goto LABEL_25;
          }
          v24 = 1;
          while (v23 != -4096)
          {
            v25 = v22 + v24++;
            v22 = v25 & (v41 - 1);
            v23 = *((_QWORD *)v40[0] + v22);
            if (v21 == v23)
              goto LABEL_16;
          }
LABEL_21:
          sub_22E4C652C((_QWORD *)v5, v20);
          v43[0] = v20;
          *(_QWORD *)&v42[0] = 0;
          v26 = sub_22E3CED3C((uint64_t *)(v5 + 2904), v43, v42);
          v27 = *(_QWORD *)&v42[0];
          if (!v26)
            v27 = *(_QWORD *)(v5 + 2904) + 56 * *(unsigned int *)(v5 + 2920);
          v38 = *(_OWORD *)(v27 + 24);
          v39 = *(_OWORD *)(v27 + 40);
          v28 = *(_QWORD *)(a3 + 32);
          v42[0] = *(_OWORD *)(v27 + 8);
          v42[1] = v38;
          v42[2] = v39;
          sub_22E5BC134((uint64_t *)(a3 + 40), v28, v19, (uint64_t)v42);
          goto LABEL_24;
        }
LABEL_25:
        v29 = i + 1;
        while (v29 != v13)
        {
          v30 = *v29++;
          v14 = v30;
          if (*(_DWORD *)(v30 + 8) == 44)
          {
            i = v29 - 1;
            goto LABEL_12;
          }
        }
      }
    }
    return llvm::deallocate_buffer(v40[0], (void *)(8 * v41));
  }
  return result;
}

uint64_t sub_22E5F78DC(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  _DWORD *v5;
  unsigned int v6;
  unsigned int v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int *v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t result;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int *i;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  _QWORD v45[7];

  *(_BYTE *)(a1 + 168) = 1;
  *(_DWORD *)(a1 + 172) = 1;
  if (*(_QWORD *)(a1 + 320))
  {
    v4 = *(unsigned int **)(a2 + 24);
    if (v4)
    {
      v7 = *v4;
      v5 = v4 + 4;
      v6 = v7;
      v8 = &v5[2 * v7];
      v9 = 8 * v7;
      v10 = v5;
      if (v7)
      {
        v11 = v9;
        v10 = v5;
        while (*(_DWORD *)(*(_QWORD *)v10 + 8) != 75)
        {
          v10 += 2;
          v11 -= 8;
          if (!v11)
            goto LABEL_18;
        }
      }
      if (v10 == v8 || (v12 = *(_QWORD *)v10) == 0)
      {
LABEL_18:
        if (v6)
        {
          while (*(_DWORD *)(*(_QWORD *)v5 + 8) != 70)
          {
            v5 += 2;
            v9 -= 8;
            if (!v9)
              goto LABEL_32;
          }
        }
        if (v5 != v8)
        {
          v21 = *(_QWORD *)v5;
          if (v21)
          {
            v22 = *(_QWORD *)(v21 + 16);
            v38 = 0;
            v39 = 0;
            v37 = 0;
            v40 = 0;
            v42 = 0;
            v43 = 0;
            v41 = 0;
            v44 = 0;
            sub_22E4D79C0(v45, a1, v22, &v37, 1);
            v23 = (_QWORD *)(v45[0] + 24);
            if (*(_DWORD *)(v45[0] + 32) >= 0x41u)
              v23 = (_QWORD *)*v23;
            *(_DWORD *)(a1 + 188) = *v23;
            *(_BYTE *)(a1 + 168) = 0;
          }
        }
      }
      else
      {
        v13 = *(_QWORD *)(v12 + 16);
        v38 = 0;
        v39 = 0;
        v37 = 0;
        v40 = 0;
        v42 = 0;
        v43 = 0;
        v41 = 0;
        v44 = 0;
        sub_22E4D79C0(v45, a1, v13, &v37, 1);
        v14 = (_QWORD *)(v45[0] + 24);
        if (*(_DWORD *)(v45[0] + 32) >= 0x41u)
          v14 = (_QWORD *)*v14;
        *(_DWORD *)(a1 + 188) = *v14;
        v15 = *(unsigned int **)(a2 + 24);
        if (!v15)
          goto LABEL_30;
        v18 = *v15;
        v16 = v15 + 4;
        v17 = v18;
        if (v18)
        {
          v19 = 8 * v17;
          v20 = v16;
          while (*(_DWORD *)(*(_QWORD *)v20 + 8) != 70)
          {
            v20 += 2;
            v19 -= 8;
            if (!v19)
              goto LABEL_30;
          }
        }
        else
        {
          v20 = v16;
        }
        if (v20 == &v16[2 * v17])
LABEL_30:
          v24 = 1;
        else
          v24 = *(_QWORD *)v20 == 0;
        *(_BYTE *)(a1 + 168) = v24;
      }
    }
  }
LABEL_32:
  v25 = *(unsigned int **)(a2 + 24);
  if (!v25)
  {
    result = *(unsigned int *)(a2 + 8);
    if ((_DWORD)result == 54)
      return result;
LABEL_51:
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 76) & 2) == 0)
      return result;
    result = sub_22F421AC0(result);
    if (!v25 || !(_DWORD)result)
      return result;
    goto LABEL_46;
  }
  v26 = *v25;
  if ((_DWORD)v26)
  {
    v27 = 8 * v26;
    v28 = v25 + 4;
    while (*(_DWORD *)(*(_QWORD *)v28 + 8) != 59)
    {
      v28 += 2;
      v27 -= 8;
      if (!v27)
        goto LABEL_45;
    }
  }
  else
  {
    v28 = v25 + 4;
  }
  if (v28 != &v25[2 * v26 + 4] && *(_QWORD *)v28 && !*(_DWORD *)(*(_QWORD *)v28 + 16))
    *(_BYTE *)(a1 + 168) = 1;
LABEL_45:
  result = *(unsigned int *)(a2 + 8);
  if ((_DWORD)result != 54)
    goto LABEL_51;
LABEL_46:
  v32 = *v25;
  v31 = v25 + 4;
  v30 = v32;
  if (v32)
  {
    v33 = 8 * v30;
    for (i = v31; *(_DWORD *)(*(_QWORD *)i + 8) != 66; i += 2)
    {
      v33 -= 8;
      if (!v33)
        return result;
    }
  }
  else
  {
    i = v31;
  }
  v35 = &v31[2 * v30];
  if (i != v35)
  {
    v36 = *(_QWORD *)i;
LABEL_56:
    if (*(_DWORD *)(v36 + 48) == 1)
    {
      *(_BYTE *)(a1 + 168) = 0;
    }
    else
    {
      while (1)
      {
        i += 2;
        if (i == v35)
          break;
        v36 = *(_QWORD *)i;
        if (*(_DWORD *)(*(_QWORD *)i + 8) == 66)
          goto LABEL_56;
      }
    }
  }
  return result;
}

uint64_t sub_22E5F7BC8(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned __int8 *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  const char *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  int v52;
  _QWORD v53[2];
  int v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;

  if (*(_QWORD *)(result + 320))
  {
    v5 = result;
    v6 = *(unsigned int **)(a2 + 24);
    v44 = *v6;
    v7 = sub_22F293A28(*(_DWORD *)(a2 + 8));
    v8 = *(unsigned int **)(a2 + 24);
    v9 = *v8;
    v10 = sub_22F293A28(*(_DWORD *)(a2 + 8));
    v11 = *(_DWORD *)(a2 + 32);
    v12 = *(unsigned int **)(a2 + 24);
    v13 = *v12;
    result = sub_22F293A28(*(_DWORD *)(a2 + 8));
    v14 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v14)
    {
      v15 = (uint64_t)&v12[2 * v13 + 4 + 2 * (result + 4 * v14)];
      v16 = (uint64_t *)&v8[2 * v9 + 4 + 2 * (v11 + v10)];
      v17 = (uint64_t)&v6[2 * v44 + 4 + 2 * v7];
      v18 = (uint64_t *)(v5 + 2904);
      v45 = 0;
      v19 = 8 * v14;
      do
      {
        v20 = *(_QWORD *)(*(_QWORD *)v17 + 16);
        v21 = *(_QWORD *)(*v16 + 16);
        if ((*(_DWORD *)(v20 + 28) & 0x7F) == 0x3F)
          v22 = *(_QWORD *)(*(_QWORD *)v17 + 16);
        else
          v22 = 0;
        v47 = *(const char **)(*(_QWORD *)v17 + 16);
        *(_QWORD *)&v55 = 0;
        if ((sub_22E3CED3C(v18, &v47, &v55) & 1) != 0
          || (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 1856) + 32))(*(_QWORD *)(v5 + 1856), v20)
          || ((result = sub_22E3CB5E0(v20), (_DWORD)result) ? (v23 = v22 == 0) : (v23 = 0), !v23))
        {
          v24 = v45;
          if (!v45)
          {
            v25 = a3(a4, v5);
            if (v25)
            {
              LOWORD(v50) = 259;
              v47 = ".omp.final.then";
              v40 = v25;
              v41 = (_QWORD *)operator new();
              llvm::BasicBlock::BasicBlock();
              v47 = ".omp.final.done";
              LOWORD(v50) = 259;
              v46 = operator new();
              llvm::BasicBlock::BasicBlock();
              v26 = llvm::User::operator new((llvm::User *)0x40);
              MEMORY[0x23489C09C](v26, v41, v46, v40, 0);
              LOWORD(v50) = 257;
              v27 = v26;
              v18 = (uint64_t *)(v5 + 2904);
              sub_22E3C12C8((uint64_t *)(v5 + 272), v27, (uint64_t)&v47);
              sub_22E5ED9B4((_QWORD *)v5, v41, 0);
              v24 = (_QWORD *)v46;
            }
            else
            {
              v24 = 0;
            }
          }
          v45 = v24;
          if (v22)
          {
            v32 = (unsigned __int8 *)sub_22EFBC5B4(v22);
            sub_22EFFEB40(v32);
          }
          else
          {
            v28 = *(_QWORD *)(*(_QWORD *)(v5 + 144) + 144);
            v29 = *(_QWORD *)(*v16 + 8);
            sub_22EFF605C(*v16);
            v47 = 0;
            v30 = v29;
            v18 = (uint64_t *)(v5 + 2904);
            sub_22EFF69F0((uint64_t)&v55, v28, v21, 0, v30, 1, v31, &v47, 0);
          }
          sub_22E4D8D7C(&v47);
          v33 = v48;
          v34 = v49;
          v35 = v50;
          v36 = v51;
          BYTE1(v49) = 1;
          v50 = v5;
          v37 = (const char *)(*(_QWORD *)(v5 + 1992) - *(_QWORD *)(v5 + 2000));
          v38 = *(_QWORD *)(v5 + 2312);
          LOBYTE(v49) = *(_BYTE *)(v5 + 2893);
          *(_BYTE *)(v5 + 2893) = 0;
          v39 = *(_QWORD *)(v5 + 2872);
          v47 = v37;
          *(_QWORD *)&v48 = v39;
          *((_QWORD *)&v48 + 1) = v38;
          *(_QWORD *)(v5 + 2872) = v37;
          v51 = 0uLL;
          v52 = 0;
          v53[0] = 0;
          v53[1] = 0;
          v54 = 0;
          v55 = v33;
          v56 = v34;
          v57 = v35;
          v58 = v36;
          sub_22E5BC134((uint64_t *)&v51, v5, v20, (uint64_t)&v55);
          sub_22E5BC320((uint64_t)v53, v50 + 2904);
          sub_22F2840EC((uint64_t)v53);
          sub_22E4D89CC(v5);
          result = sub_22F283FC4((uint64_t)&v47);
        }
        v17 += 8;
        ++v16;
        v15 += 8;
        v19 -= 8;
      }
      while (v19);
      if (v45)
        return sub_22E5ED9B4((_QWORD *)v5, v45, 1);
    }
  }
  return result;
}

_DWORD *sub_22E5F7F80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v4;
  unsigned __int8 *i;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  _QWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  uint64_t *v14;
  unsigned int v15;
  unint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  _DWORD *result;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[3];
  _QWORD v25[2];
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD v32[13];

  v2 = a2;
  v32[11] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 76) & 0x20) != 0)
  {
    v4 = *(_DWORD **)(a2 + 24);
    if (!*v4)
    {
      for (i = *(unsigned __int8 **)&v4[2 * v4[1] + 4]; ; i = *(unsigned __int8 **)&i[8 * *((unsigned int *)i + 2) + 32])
      {
        v6 = *i;
        if (v6 != 7)
          break;
      }
      if (v6 != 20 || (v7 = *((_QWORD *)i + 1)) == 0)
      {
LABEL_37:
        *(_QWORD *)&v26 = a1;
        *((_QWORD *)&v26 + 1) = v2;
        LOBYTE(v27) = 1;
        sub_22E5B8E78(v25, a1, v2);
        sub_22E600354((uint64_t)&v28, a1, v2, 0x100000059, 1);
        v19 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
        v24[0] = &v26;
        v24[1] = sub_22E601860;
        v24[2] = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v19 + 360))(v19, a1, 54, v24, 0);
        sub_22F283FC4((uint64_t)v32);
        sub_22E488B4C((uint64_t)&v28);
        return sub_22F283234(v25);
      }
      sub_22F0D492C(v7);
      v26 = v28;
      v8 = v30;
      v27 = v29;
      v9 = v31;
      while (1)
      {
        v10 = v26;
        if (v26 == __PAIR128__(v9, v8))
        {
          v2 = a2;
          goto LABEL_37;
        }
        v11 = (_QWORD *)v26;
        if ((BYTE8(v26) & 3) != 0)
        {
          if ((*((_QWORD *)&v26 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0)
            v11 = (_QWORD *)((*((_QWORD *)&v26 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40);
          else
            v11 = (_QWORD *)sub_22F3AC1A8(*(_QWORD *)v26);
        }
        v12 = (_DWORD *)*v11;
        if (*v11)
        {
          if (*(_BYTE *)v12 == 8)
          {
            v15 = *v12;
            v14 = (uint64_t *)(v12 + 4);
            v13 = v15;
            v28 = (unint64_t)v14;
            if (v15 >= 0x100)
              break;
          }
        }
LABEL_31:
        if ((BYTE8(v10) & 3) != 0)
        {
          if (*((_QWORD *)&v10 + 1) >= 4uLL)
            sub_22F0D8720((uint64_t)&v26);
          else
            sub_22F3F2FE0((uint64_t)&v26, 1);
        }
        else
        {
          *(_QWORD *)&v26 = v10 + 8;
        }
      }
      v16 = 0;
      v17 = (char *)v14 + ((v13 >> 5) & 0x7FFFFF8);
      while (1)
      {
        v18 = v14;
        if ((v16 & 3) != 0)
        {
          if ((v16 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            v18 = (_QWORD *)((v16 & 0xFFFFFFFFFFFFFFFCLL) + 40);
          else
            v18 = (_QWORD *)sub_22F3AC1A8(*v14);
        }
        if (*v18 && *(_BYTE *)*v18 == 65)
          break;
        if ((v16 & 3) != 0)
        {
          if (v16 >= 4)
            sub_22F0D8720((uint64_t)&v28);
          else
            sub_22F3F2FE0((uint64_t)&v28, 1);
        }
        else
        {
          *(_QWORD *)&v28 = v14 + 1;
        }
        v16 = *((_QWORD *)&v28 + 1);
        v14 = (uint64_t *)v28;
        if (v28 == (unint64_t)v17)
          goto LABEL_31;
      }
      v2 = a2;
    }
  }
  v21 = *(_QWORD *)(a1 + 2744);
  *(_QWORD *)(a1 + 2744) = v2;
  *(_BYTE *)(a1 + 2784) = 1;
  v25[0] = v2;
  sub_22E5B8E78(v24, a1, v2);
  sub_22E600354((uint64_t)&v28, a1, v2, 0x100000059, 1);
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
  *(_QWORD *)&v26 = v25;
  *((_QWORD *)&v26 + 1) = sub_22E60197C;
  v27 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, __int128 *, _QWORD))(*(_QWORD *)v22 + 360))(v22, a1, 54, &v26, 0);
  sub_22F283FC4((uint64_t)v32);
  sub_22E488B4C((uint64_t)&v28);
  sub_22F283234(v24);
  result = (_DWORD *)sub_22E5F6470(a1, v2);
  *(_QWORD *)(a1 + 2744) = v21;
  return result;
}

uint64_t sub_22E5F82B8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;

  if (*a2 - 21 <= 0x40 && sub_22F4219DC(*((_DWORD *)a2 + 2)))
  {
    v4 = operator new();
    sub_22E5F9AA8(v4, a1, a2);
    v8 = operator new();
    v5 = v8;
    *(_QWORD *)v8 = &off_24FA66C98;
    *(_DWORD *)(v8 + 8) = 2;
    *(_QWORD *)(v8 + 16) = 1;
    for (i = 24; i != 88; i += 16)
      *(_QWORD *)(v8 + i) = -4096;
    *(_QWORD *)(v8 + 88) = 0;
    *(_QWORD *)(v8 + 96) = 0;
    v6 = (_QWORD *)operator new();
    v10 = *(_QWORD *)(a1 + 1856);
    *v6 = a1;
    v6[1] = v10;
    *(_QWORD *)(a1 + 1856) = v5;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
  }
  result = sub_22E5E5158(a1, *(_QWORD *)(*((_QWORD *)a2 + 3) + 8 * **((unsigned int **)a2 + 3) + 24), 0, 0);
  if (v4)
  {
    if (v6)
    {
      *(_QWORD *)(*v6 + 1856) = v6[1];
      MEMORY[0x2348A0E9C](v6, 0x20C40A4A59CD2);
    }
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    sub_22E487560(v4);
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

uint64_t sub_22E5F844C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  int v13;
  uint64_t v14;
  unsigned int *v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = *(_QWORD *)(a1 + 144);
  if ((*(_BYTE *)(*(_QWORD *)(v4 + 152) + 76) & 0x20) != 0)
  {
    if (!*(_BYTE *)(a1 + 2892) && (v11 = *(_QWORD *)(a1 + 2880)) != 0)
      sub_22F257BAC(v11, *(_DWORD *)(a2 + 12), &v39);
    else
      v39 = 0;
    for (i = *(_QWORD *)(*(_QWORD *)(a2 + 24)
                        + 8 * **(unsigned int **)(a2 + 24)
                        + 8 * *(unsigned int *)(*(_QWORD *)(a2 + 24) + 4)
                        + 16); *(_BYTE *)i == 7; i = *(_QWORD *)(i + 8 * *(unsigned int *)(i + 8) + 32))
      ;
    v13 = *(_DWORD *)(a1 + 1584);
    *(_DWORD *)(a1 + 1584) = 1;
    sub_22E5E5158(a1, i, 0, 0);
    *(_DWORD *)(a1 + 1584) = v13;
    *(_DWORD *)(a1 + 1544) = 0;
    v14 = *(_QWORD *)(a1 + 144);
    v38 = 0;
    v15 = *(unsigned int **)(a2 + 24);
    if (v15)
    {
      v18 = *v15;
      v16 = v15 + 4;
      v17 = v18;
      v19 = &v16[2 * v18];
      v20 = v16;
      if (v18)
      {
        v21 = 8 * v17;
        v20 = v16;
        while (*(_DWORD *)(*(_QWORD *)v20 + 8) != 32)
        {
          v20 += 2;
          v21 -= 8;
          if (!v21)
            goto LABEL_31;
        }
      }
      if (v20 != v19)
      {
        v37 = v39;
        if (v39)
          llvm::MetadataTracking::track();
        result = llvm::OpenMPIRBuilder::unrollLoopFull();
        if (!v37)
          goto LABEL_46;
LABEL_45:
        result = llvm::MetadataTracking::untrack();
LABEL_46:
        v27 = v38;
        if (v38)
        {
          v28 = *(_DWORD *)(a1 + 1544);
          if (v28 >= *(_DWORD *)(a1 + 1548))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod();
            v28 = *(_DWORD *)(a1 + 1544);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 1536) + 8 * v28) = v27;
          ++*(_DWORD *)(a1 + 1544);
        }
        if (v39)
          return llvm::MetadataTracking::untrack();
        return result;
      }
LABEL_31:
      if ((_DWORD)v17)
      {
        v24 = 8 * v17;
        while (*(_DWORD *)(*(_QWORD *)v16 + 8) != 61)
        {
          v16 += 2;
          v24 -= 8;
          if (!v24)
            goto LABEL_42;
        }
      }
      if (v16 != v19)
      {
        v25 = *(_QWORD *)v16;
        if (v25)
        {
          v26 = *(unsigned __int8 **)(v25 + 16);
          if (v26)
          {
            sub_22F007D7C(v26, *(_QWORD *)(v14 + 144), 0, (uint64_t)&v35);
            if (v36 >= 0x41)
            {
              if (v35)
                MEMORY[0x2348A0E84]();
            }
          }
          v34 = v39;
          if (v39)
            llvm::MetadataTracking::track();
          result = llvm::OpenMPIRBuilder::unrollLoopPartial();
          if (!v34)
            goto LABEL_46;
          goto LABEL_45;
        }
      }
    }
LABEL_42:
    v33 = v39;
    if (v39)
      llvm::MetadataTracking::track();
    result = llvm::OpenMPIRBuilder::unrollLoopHeuristic();
    if (!v33)
      goto LABEL_46;
    goto LABEL_45;
  }
  *(_DWORD *)(a1 + 176) = 1;
  v5 = *(unsigned int **)(a2 + 24);
  v7 = (uint64_t *)(v5 + 4);
  v6 = *v5;
  v8 = (uint64_t)&v5[2 * v6 + 4];
  v9 = v5 + 4;
  if (*v5)
  {
    v10 = 8 * v6;
    v9 = v5 + 4;
    while (*(_DWORD *)(*(_QWORD *)v9 + 8) != 32)
    {
      v9 += 2;
      v10 -= 8;
      if (!v10)
        goto LABEL_21;
    }
  }
  if (v9 == (unsigned int *)v8)
  {
LABEL_21:
    if ((_DWORD)v6)
    {
      v22 = 0;
      while (*(_DWORD *)(v7[v22] + 8) != 61)
      {
        if (v6 == ++v22)
          return sub_22E5E5158(a1, *(_QWORD *)&v5[2 * v6 + 4 + 2 * v5[1]], 0, 0);
      }
      v7 = (uint64_t *)((char *)v7 + v22 * 8);
    }
    if (v7 != (uint64_t *)v8)
    {
      v29 = *v7;
      if (v29)
      {
        v30 = *(unsigned __int8 **)(v29 + 16);
        if (v30)
        {
          sub_22F007D7C(v30, *(_QWORD *)(v4 + 144), 0, (uint64_t)&v35);
          if (v36 >= 0x41)
            v31 = v35;
          else
            v31 = (uint64_t *)&v35;
          v32 = *v31;
          if (v36 >= 0x41)
          {
            if (v35)
              MEMORY[0x2348A0E84]();
          }
          *(_DWORD *)(a1 + 200) = v32;
          v5 = *(unsigned int **)(a2 + 24);
          v6 = *v5;
        }
      }
    }
  }
  else
  {
    *(_DWORD *)(a1 + 176) = 3;
  }
  return sub_22E5E5158(a1, *(_QWORD *)&v5[2 * v6 + 4 + 2 * v5[1]], 0, 0);
}

uint64_t sub_22E5F8828(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v18;
  uint64_t v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t *(*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];

  v25[0] = a2;
  v25[1] = a3;
  v25[2] = a4;
  v24 = a4;
  if (!sub_22F421AC0(*(_DWORD *)(a2 + 8)))
    goto LABEL_17;
  v6 = *(unsigned int **)(a2 + 24);
  if (!v6)
    goto LABEL_17;
  v9 = *v6;
  v7 = (uint64_t *)(v6 + 4);
  v8 = v9;
  if (v9)
  {
    v16 = 8 * v8;
    v10 = v7;
    while (*(_DWORD *)(*v10 + 8) != 36)
    {
      ++v10;
      v16 -= 8;
      if (!v16)
        goto LABEL_17;
    }
  }
  else
  {
    v10 = v7;
  }
  v11 = &v7[v8];
  if (v10 == v11)
    goto LABEL_17;
  v12 = a1[18];
LABEL_7:
  if (*(_DWORD *)(*(_QWORD *)(v12 + 152) + 72) < 0x32u || (v13 = *(_DWORD *)(*v10 + 44), v13 != 54) && v13 != 89)
  {
    v14 = v10 + 1;
    while (v14 != v11)
    {
      v15 = *v14++;
      if (*(_DWORD *)(v15 + 8) == 36)
      {
        v10 = v14 - 1;
        goto LABEL_7;
      }
    }
    goto LABEL_17;
  }
  v18 = *(unsigned __int8 **)(*v10 + 32);
  if (!v18)
  {
LABEL_17:
    v21 = v25;
    v22 = sub_22E60072C;
    v23 = 0;
    return sub_22F27B464(&v21, (uint64_t)a1);
  }
  v19 = *(_QWORD *)(v12 + 808);
  v21 = v25;
  v22 = sub_22E60072C;
  v23 = 0;
  v20[0] = &v24;
  v20[1] = sub_22E600850;
  v20[2] = 0;
  return sub_22F27D618(v19, a1, v18, &v21, v20);
}

uint64_t sub_22E5F8964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;

  v6 = *(_OWORD *)a3;
  v7 = *(_QWORD *)(a3 + 16);
  sub_22F28D424(a1, a2, &v6);
  return sub_22E5E5100(a1, a2);
}

_DWORD *sub_22E5F89B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD v36[3];
  __int16 v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];
  _BYTE v41[104];
  _QWORD v42[13];

  v42[11] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD **)(a1 + 144);
  if ((*(_BYTE *)(v5[19] + 76) & 8) != 0)
  {
    sub_22E600354((uint64_t)v41, a1, a2, 0x100000038, 1);
    v11 = v5[101];
    v39 = a2;
    v40[0] = &v39;
    v40[1] = sub_22E600E0C;
    v40[2] = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v11 + 360))(v11, a1, 56, v40, 0);
    sub_22F283FC4((uint64_t)v42);
    return (_DWORD *)sub_22E488B4C((uint64_t)v41);
  }
  sub_22E5B8E78(v40, a1, a2);
  v38 = 0;
  v39 = 0;
  v7 = *(unsigned int **)(a2 + 24);
  if (v7)
  {
    v15 = *v7;
    v13 = (uint64_t *)(v7 + 4);
    v14 = v15;
    v16 = &v13[v15];
    v17 = 8 * v15;
    v18 = v13;
    if (v15)
    {
      v23 = v17;
      v18 = v13;
      while (*(_DWORD *)(*v18 + 8) != 36)
      {
        ++v18;
        v23 -= 8;
        if (!v23)
          goto LABEL_17;
      }
    }
    if (v18 != v16)
    {
      v19 = *v18;
LABEL_8:
      v20 = *(_DWORD *)(v19 + 44);
      if (v20 == 56 || v20 == 89)
      {
        v8 = *(_QWORD *)(v19 + 32);
        if (!v14)
        {
LABEL_18:
          if (v13 != v16 && (v24 = *v13) != 0)
            v10 = *(_QWORD *)(v24 + 40) & 0xFFFFFFFFFFFFFFFCLL | *(unsigned int *)(v24 + 32);
          else
            v10 = 2;
LABEL_26:
          if (v8)
          {
            v41[0] = 0;
            v9 = sub_22E61F3B0(a1, v8, v41, 0) ^ 1;
            if (v41[0])
              v9 = 1;
          }
          else
          {
            v9 = 1;
          }
          goto LABEL_30;
        }
LABEL_23:
        v10 = 2;
        while (*(_DWORD *)(*v13 + 8) != 22)
        {
          ++v13;
          v17 -= 8;
          if (!v17)
            goto LABEL_26;
        }
        goto LABEL_18;
      }
      v21 = v18 + 1;
      while (v21 != v16)
      {
        v22 = *v21++;
        v19 = v22;
        if (*(_DWORD *)(v22 + 8) == 36)
        {
          v18 = v21 - 1;
          goto LABEL_8;
        }
      }
    }
LABEL_17:
    v8 = 0;
    if (!v14)
      goto LABEL_18;
    goto LABEL_23;
  }
  v8 = 0;
  v9 = 1;
  v10 = 2;
LABEL_30:
  v25 = v5[19];
  if (*(_QWORD *)(v25 + 624) == *(_QWORD *)(v25 + 632))
    v26 = 0;
  else
    v26 = v9;
  if ((*(_WORD *)(v25 + 96) & 0x10) != 0 && (v26 & 1) == 0)
  {
    v27 = sub_22F41A810(*(_QWORD *)(v5[26] + 32), 4, "No offloading entry generated while offloading is mandatory.", 0x3CuLL);
    v28 = v5[26];
    *(_DWORD *)(v28 + 312) = 0;
    *(_DWORD *)(v28 + 316) = v27;
    if (*(char *)(v28 + 311) < 0)
    {
      **(_BYTE **)(v28 + 288) = 0;
      *(_QWORD *)(v28 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v28 + 288) = 0;
      *(_BYTE *)(v28 + 311) = 0;
    }
    v36[0] = v28 + 320;
    v36[1] = 0;
    v36[2] = v28;
    v37 = 1;
    *(_BYTE *)(v28 + 320) = 0;
    *(_DWORD *)(v28 + 664) = 0;
    v29 = *(unsigned int *)(v28 + 776);
    if ((_DWORD)v29)
    {
      v30 = *(_QWORD *)(v28 + 768);
      v31 = 56 * v29;
      do
      {
        if (*(char *)(v30 + v31 - 9) < 0)
          operator delete(*(void **)(v30 + v31 - 32));
        v31 -= 56;
      }
      while (v31);
    }
    *(_DWORD *)(v28 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v36);
  }
  v32 = *(_QWORD *)(a1 + 1592);
  v33 = *(_DWORD *)(v32 + 28) & 0x7F;
  if (v32 && v33 == 55)
  {
    v32 &= 0xFFFFFFFFFFFFFFF8;
  }
  else if (v32 && v33 == 57)
  {
    v32 = v32 & 0xFFFFFFFFFFFFFFF8 | 1;
  }
  else if (sub_22E462B18(*(_QWORD *)(a1 + 1592)))
  {
    v32 = v32 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v32) + 96) & 0x80) == 0);
  }
  v34 = sub_22E624994((uint64_t)v5, v32, 0);
  (*(void (**)(_QWORD, uint64_t, _QWORD *, uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v5[101] + 432))(v5[101], a2, v34, v35, &v39, &v38, v26, a3);
  sub_22E600354((uint64_t)v41, a1, a2, 0x10000004ALL, 1);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)v5[101]
                                                                                                + 440))(v5[101], a1, a2, v39, v38, v8, v10);
  sub_22F283FC4((uint64_t)v42);
  sub_22E488B4C((uint64_t)v41);
  return sub_22F283234(v40);
}

uint64_t sub_22E5F8DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  unsigned int v38;
  unsigned int *v39;
  _DWORD *v40;
  uint64_t v41;
  unsigned int v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL4 v47;
  llvm::Value *v48;
  llvm::Value *v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  BOOL v53;
  BOOL v54;
  _BOOL4 v55;
  char v56;
  BOOL v57;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  _BOOL4 v65;
  llvm::Constant **v66;
  llvm::Type *v67;
  uint64_t NullValue;
  uint64_t v69;
  uint64_t v70;
  int v71;
  _QWORD *v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  _OWORD v78[8];
  uint64_t v79;
  _QWORD v80[3];
  uint64_t v81;
  uint64_t **v82;
  uint64_t (*v83)(uint64_t *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  _QWORD v88[17];
  _DWORD v89[4];
  _QWORD v90[3];
  char v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  _QWORD v97[2];
  int v98;
  _BYTE v99[64];
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  _OWORD v105[8];
  uint64_t v106;
  _BYTE v107[64];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  _BYTE v113[64];
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  _OWORD v119[8];
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  char v130;
  _QWORD v131[3];
  char v132;
  char v133;
  uint64_t v134;
  _BYTE v135[144];
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  BOOL v163;
  llvm::Value *v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  _QWORD *v171;
  uint64_t v172;

  v172 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 16);
  sub_22E4C652C((_QWORD *)a1, *(_QWORD *)(v10 + 16));
  v11 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 24);
  if (*v11 == 161)
  {
    sub_22E4C652C((_QWORD *)a1, *((_QWORD *)v11 + 2));
    sub_22E4D89CC(a1);
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
  sub_22E5F9AA8((uint64_t)v131, a1, (unsigned __int8 *)a2);
  v130 = 0;
  if (sub_22E61F3B0(a1, *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 40), &v130, 0))
  {
    if (!v130)
    {
      v14 = 0;
      goto LABEL_6;
    }
    v70 = a5;
    v72 = 0;
  }
  else
  {
    v70 = a5;
    *(_QWORD *)v135 = "omp.precond.then";
    *(_WORD *)&v135[32] = 259;
    v17 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)v135 = "omp.precond.end";
    *(_WORD *)&v135[32] = 259;
    v18 = operator new();
    llvm::BasicBlock::BasicBlock();
    v19 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 40);
    v20 = sub_22E3CF180(a1 + 3904, a2);
    if (v21)
      v22 = v20;
    else
      v22 = 0;
    v72 = (_QWORD *)v18;
    sub_22E5F9FF4(a1, a2, v19, (uint64_t)v17, v18, v22);
    sub_22E5ED9B4((_QWORD *)a1, v17, 0);
    sub_22E3CB7B0((_QWORD *)a1, a2, 0);
  }
  v23 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
  v24 = *(_QWORD *)(a1 + 2312);
  v25 = *(_BYTE *)(a1 + 2893);
  *(_BYTE *)(a1 + 2893) = 0;
  v26 = *(_QWORD *)(a1 + 2872);
  *(_QWORD *)(a1 + 2872) = v23;
  v27 = *(unsigned int **)(a2 + 24);
  v75 = v23;
  v76 = v26;
  v74 = v24;
  v73 = v25;
  if (!v27)
    goto LABEL_24;
  v28 = v27 + 4;
  v29 = *v27;
  if ((_DWORD)v29)
  {
    v31 = 0;
    while (*(_DWORD *)(*(_QWORD *)&v28[v31] + 8) != 60)
    {
      v31 += 2;
      if (2 * v29 == v31)
        goto LABEL_24;
    }
    v30 = &v28[v31];
  }
  else
  {
    v30 = v27 + 4;
  }
  if (v30 != &v28[2 * v29] && (v32 = *(_QWORD *)v30) != 0)
  {
    if (*(_QWORD *)(v32 + 16))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v12 + 520))(v12, a1, a2, v32 + 32, *(unsigned int *)(v32 + 24));
      v77 = 0;
      v27 = *(unsigned int **)(a2 + 24);
    }
    else
    {
      v77 = 1;
    }
  }
  else
  {
LABEL_24:
    v77 = 0;
  }
  sub_22E5FA32C(a1, v27, v13);
  v33 = sub_22E5F7384(a1, *(unsigned int **)(a2 + 24));
  (*(void (**)(_OWORD *__return_ptr, _QWORD, uint64_t, uint64_t))a4)(v119, *(_QWORD *)(a4 + 8), a1, a2);
  v118 = v120;
  v116 = v119[6];
  v117 = v119[7];
  *(_OWORD *)&v113[32] = v119[2];
  *(_OWORD *)&v113[48] = v119[3];
  v114 = v119[4];
  v115 = v119[5];
  *(_OWORD *)v113 = v119[0];
  *(_OWORD *)&v113[16] = v119[1];
  v110 = v127;
  v111 = v128;
  v112 = v129;
  *(_OWORD *)&v107[32] = v123;
  *(_OWORD *)&v107[48] = v124;
  v108 = v125;
  v109 = v126;
  *(_OWORD *)v107 = v121;
  *(_OWORD *)&v107[16] = v122;
  sub_22E4C652C((_QWORD *)a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 104) + 16));
  sub_22E4D8D7C(v105);
  sub_22E4C652C((_QWORD *)a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 80) + 16));
  sub_22E4D8D7C(v99);
  v92 = 1;
  v34 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
  v35 = *(_QWORD *)(a1 + 2312);
  v91 = *(_BYTE *)(a1 + 2893);
  *(_BYTE *)(a1 + 2893) = 0;
  v36 = *(_QWORD *)(a1 + 2872);
  v90[0] = v34;
  v90[1] = v36;
  v90[2] = v35;
  *(_QWORD *)(a1 + 2872) = v34;
  v94 = 0;
  v95 = 0;
  v93 = a1;
  v96 = 0;
  v97[0] = 0;
  v97[1] = 0;
  v98 = 0;
  if ((sub_22E5F2534(a1, a2, (uint64_t)v90) & 1) != 0 || v33)
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144)
                                                                                            + 808)
                                                                              + 184))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808), a1, *(unsigned int *)(a2 + 12), 89, 0, 1);
  sub_22E5F310C(a1, *(unsigned int **)(a2 + 24), (uint64_t)v90);
  sub_22E4D8D7C(v88);
  sub_22E5B8ABC((uint64_t)v89, a1, a2, (uint64_t)v88);
  v14 = sub_22E5F386C(a1, a2, (uint64_t)v90);
  sub_22E5F4508();
  sub_22F28E264(a1, a2, (uint64_t)v90);
  sub_22E5F766C(a1, a2, (uint64_t)v90);
  sub_22E5BC320((uint64_t)v97, v93 + 2904);
  sub_22F2840EC((uint64_t)v97);
  v38 = *(_DWORD *)(a2 + 8) - 56;
  if (v38 <= 0x2A && ((1 << v38) & 0x6000001CF91) != 0)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 808) + 592))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808), a1, a2);
  v87 = 0;
  v85 = 0x500000005;
  v86 = 5;
  v39 = *(unsigned int **)(a2 + 24);
  if (!v39)
    goto LABEL_40;
  v42 = *v39;
  v40 = v39 + 4;
  v41 = v42;
  if (v42)
  {
    v46 = 8 * v41;
    v43 = v40;
    while (*(_DWORD *)(*(_QWORD *)v43 + 8) != 71)
    {
      v43 += 2;
      v46 -= 8;
      if (!v46)
        goto LABEL_40;
    }
  }
  else
  {
    v43 = v40;
  }
  if (v43 != &v40[2 * v41] && (v44 = *(_QWORD *)v43) != 0)
  {
    v37.n128_u64[0] = *(_QWORD *)(v44 + 32);
    v85 = v37.n128_u64[0];
    v86 = *(_DWORD *)(v44 + 40);
    v45 = *(_QWORD *)(v44 + 64);
    v87 = v45;
  }
  else
  {
LABEL_40:
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t *, uint64_t *))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 808)
                                                                           + 560))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808), a1, a2, &v85, &v87);
    v45 = v87;
  }
  if (v45)
  {
    *(_QWORD *)v135 = a1;
    *(_QWORD *)&v135[8] = a1 + 272;
    v135[16] = 0;
    *(_QWORD *)&v135[24] = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
    v49 = (llvm::Value *)sub_22E50E974(v135, v45, v37);
    v50 = *(_QWORD *)(v87 + 8);
    v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 16) + 8);
    v52 = *(_DWORD *)(a2 + 12);
    *(_QWORD *)v135 = a1;
    *(_QWORD *)&v135[8] = a1 + 272;
    v135[16] = 0;
    *(_QWORD *)&v135[24] = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
    v48 = sub_22E50EA80((uint64_t *)v135, v49, v50, v51, v52, 0);
    *(_WORD *)v135 = 0;
    *(_QWORD *)&v135[8] = 0;
    *(_DWORD *)&v135[16] = 0;
    v47 = 0;
    if (sub_22F00554C(v87, (uint64_t)v135, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), 0, 0))
    {
      LODWORD(v83) = *(_DWORD *)&v135[32];
      if (*(_DWORD *)&v135[32] > 0x40u)
        llvm::APInt::initSlowCase((llvm::APInt *)&v82, (const llvm::APInt *)&v135[24]);
      else
        v82 = *(uint64_t ***)&v135[24];
      BYTE4(v83) = v135[36];
      v47 = sub_22E5FA634(&v82, 0xFFFFFFFFFFFFFFFFLL) == (uint64_t *)1;
      if (v83 >= 0x41)
      {
        if (v82)
          MEMORY[0x2348A0E84](v82, 0x1000C8000313F17);
      }
    }
    if (*(_DWORD *)&v135[16] >= 2u)
      sub_22EF53BC0((uint64_t *)&v135[16]);
  }
  else
  {
    v47 = 0;
    v48 = 0;
  }
  v71 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0));
  v53 = sub_22F110B20(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0));
  if ((*(unsigned int (**)(uint64_t, _QWORD, BOOL))(*(_QWORD *)v12 + 208))(v12, v85, v48 != 0))
  {
    v54 = !v47;
  }
  else
  {
    v54 = 1;
  }
  v55 = !v54 && sub_22F421B7C(*(_DWORD *)(a2 + 8));
  if ((v77 & 1) != 0)
  {
    v56 = 1;
  }
  else
  {
    if ((_DWORD)v85)
      v57 = 1;
    else
      v57 = HIDWORD(v85) == 7;
    v56 = !v57 && v86 != 7 || HIDWORD(v85) == 6 || v86 == 6;
  }
  if (((v77 | ((*(unsigned int (**)(uint64_t, _QWORD, BOOL))(*(_QWORD *)v12 + 192))(v12, v85, v48 != 0) | v55) ^ 1) & 1) != 0)
  {
    *(_OWORD *)v135 = *(_OWORD *)&v113[8];
    *(_OWORD *)&v135[16] = *(_OWORD *)&v113[24];
    *(_OWORD *)&v135[32] = *(_OWORD *)&v113[40];
    *(_OWORD *)&v135[48] = *(_OWORD *)&v107[8];
    *(_OWORD *)&v135[64] = *(_OWORD *)&v107[24];
    *(_OWORD *)&v135[80] = *(_OWORD *)&v107[40];
    *(_OWORD *)&v135[112] = *(_OWORD *)((char *)&v105[1] + 8);
    *(_OWORD *)&v135[96] = *(_OWORD *)((char *)v105 + 8);
    v138 = *(_OWORD *)&v99[40];
    v137 = *(_OWORD *)&v99[24];
    *(_OWORD *)&v135[128] = *(_OWORD *)((char *)&v105[2] + 8);
    v136 = *(_OWORD *)&v99[8];
    *(_QWORD *)&v139 = v48;
    *((_QWORD *)&v139 + 1) = a3;
    v140 = 0u;
    v141 = 0u;
    *(_QWORD *)&v142 = 0;
    sub_22F28ED18(a1, (unsigned int *)&v85, v56, a2, v90, v77, (uint64_t)v135, v70);
  }
  else
  {
    *(_QWORD *)v135 = "omp.loop.exit";
    *(_WORD *)&v135[32] = 259;
    v61 = (_QWORD *)operator new();
    v62 = llvm::BasicBlock::BasicBlock();
    v63 = *(_QWORD *)(a1 + 2008);
    v64 = *(_DWORD *)(a1 + 2640);
    *(_DWORD *)(a1 + 2640) = v64 + 1;
    v81 = a2;
    v82 = (uint64_t **)&v81;
    v83 = sub_22E60297C;
    v84 = 0;
    *(_DWORD *)v135 = v71;
    *(_WORD *)&v135[4] = v53;
    *(_OWORD *)&v135[88] = v101;
    *(_OWORD *)&v135[104] = v102;
    *(_OWORD *)&v135[120] = v103;
    *(_QWORD *)&v135[136] = v104;
    *(_OWORD *)&v135[24] = *(_OWORD *)&v99[16];
    *(_OWORD *)&v135[40] = *(_OWORD *)&v99[32];
    *(_OWORD *)&v135[56] = *(_OWORD *)&v99[48];
    *(_OWORD *)&v135[72] = v100;
    *(_OWORD *)&v135[8] = *(_OWORD *)v99;
    v142 = v116;
    v143 = v117;
    v138 = *(_OWORD *)&v113[32];
    v139 = *(_OWORD *)&v113[48];
    v141 = v115;
    v140 = v114;
    v137 = *(_OWORD *)&v113[16];
    v136 = *(_OWORD *)v113;
    v151 = v110;
    v152 = v111;
    v147 = *(_OWORD *)&v107[32];
    v148 = *(_OWORD *)&v107[48];
    v149 = v108;
    v150 = v109;
    v145 = *(_OWORD *)v107;
    v146 = *(_OWORD *)&v107[16];
    v144 = v118;
    v153 = v112;
    v160 = v105[6];
    v161 = v105[7];
    v162 = v106;
    v156 = v105[2];
    v157 = v105[3];
    v159 = v105[5];
    v158 = v105[4];
    v155 = v105[1];
    v154 = v105[0];
    v163 = v55;
    v164 = v48;
    v165 = a2;
    v166 = v85;
    v167 = v86;
    v168 = v62;
    v169 = v63;
    v170 = v64;
    v171 = v90;
    v80[0] = v135;
    v80[1] = sub_22E602A1C;
    v80[2] = 0;
    sub_22E5F8828((_QWORD *)a1, a2, (uint64_t)&v82, (uint64_t)v80);
    sub_22E5ED9B4((_QWORD *)a1, v61, 0);
    *(_QWORD *)v135 = a2;
    sub_22F28EC20(a1 + 3440, (_QWORD *)a1, *(_DWORD *)(a2 + 8), (void (*)(uint64_t, _QWORD *))sub_22E602C30, (uint64_t)v135);
  }
  if (sub_22F421AC0(*(_DWORD *)(a2 + 8)))
  {
    *(_OWORD *)&v135[96] = v102;
    *(_OWORD *)&v135[112] = v103;
    *(_OWORD *)&v135[32] = *(_OWORD *)&v99[32];
    *(_OWORD *)&v135[48] = *(_OWORD *)&v99[48];
    *(_OWORD *)&v135[80] = v101;
    *(_OWORD *)&v135[64] = v100;
    *(_OWORD *)&v135[16] = *(_OWORD *)&v99[16];
    *(_OWORD *)v135 = *(_OWORD *)v99;
    *(_QWORD *)&v135[128] = v104;
    *(_QWORD *)&v135[136] = a2;
    sub_22E5F7BC8(a1, a2, sub_22E602C54, (uint64_t)v135);
    sub_22F421AC0(*(_DWORD *)(a2 + 8));
  }
  sub_22E5F523C(a1, a2);
  *(_OWORD *)&v135[96] = v102;
  *(_OWORD *)&v135[112] = v103;
  *(_OWORD *)&v135[32] = *(_OWORD *)&v99[32];
  *(_OWORD *)&v135[48] = *(_OWORD *)&v99[48];
  *(_OWORD *)&v135[80] = v101;
  *(_OWORD *)&v135[64] = v100;
  *(_OWORD *)&v135[16] = *(_OWORD *)&v99[16];
  *(_OWORD *)v135 = *(_OWORD *)v99;
  *(_QWORD *)&v135[128] = v104;
  *(_QWORD *)&v135[136] = a2;
  sub_22E5F6264(a1, a2, (uint64_t (*)(uint64_t, _QWORD *))sub_22E602CE4, (uint64_t)v135);
  if ((_DWORD)v14)
  {
    v65 = sub_22F421AC0(*(_DWORD *)(a2 + 8));
    v78[6] = v102;
    v78[7] = v103;
    v79 = v104;
    v78[2] = *(_OWORD *)&v99[32];
    v78[3] = *(_OWORD *)&v99[48];
    v78[4] = v100;
    v78[5] = v101;
    v78[0] = *(_OWORD *)v99;
    v78[1] = *(_OWORD *)&v99[16];
    v66 = (llvm::Constant **)sub_22F25F748(a1, (uint64_t)v78, *(_DWORD *)(a2 + 12));
    *(_WORD *)&v135[32] = 257;
    NullValue = llvm::Constant::getNullValue(*v66, v67);
    v69 = sub_22E3C18F4(a1 + 272, 33, (uint64_t *)v66, NullValue, (uint64_t)v135);
    sub_22E5F3CC4(a1, (unsigned __int8 *)a2, v65, v69);
  }
  sub_22F283234(v89);
  sub_22F283FC4((uint64_t)v90);
  *(_OWORD *)&v135[96] = v102;
  *(_OWORD *)&v135[112] = v103;
  *(_OWORD *)&v135[32] = *(_OWORD *)&v99[32];
  *(_OWORD *)&v135[48] = *(_OWORD *)&v99[48];
  *(_OWORD *)&v135[80] = v101;
  *(_OWORD *)&v135[64] = v100;
  *(_OWORD *)&v135[16] = *(_OWORD *)&v99[16];
  *(_OWORD *)v135 = *(_OWORD *)v99;
  *(_QWORD *)&v135[128] = v104;
  *(_QWORD *)&v135[136] = a2;
  sub_22F28DF10(a1, *(unsigned int **)(a2 + 24), sub_22E602D74, (uint64_t)v135);
  *(_BYTE *)(a1 + 2893) = v73;
  sub_22E48B274(a1, v75, v74, 0, 0);
  *(_QWORD *)(a1 + 2872) = v76;
  if (v72)
  {
    sub_22E5EDA70(a1);
    sub_22E5ED9B4((_QWORD *)a1, v72, 1);
  }
  llvm::deallocate_buffer(0, 0);
LABEL_6:
  if (v133)
  {
    v15 = v134;
    *(_BYTE *)(v134 + 2893) = v132;
    sub_22E48B274(v15, v131[0], v131[2], 0, 0);
    *(_QWORD *)(v134 + 2872) = v131[1];
  }
  return v14;
}

uint64_t sub_22E5F9AA8(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t v3;
  int v4;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v57;
  _QWORD v59[3];
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[3];
  int v65;
  uint64_t v66;
  uint64_t v67;
  llvm *v68[2];
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  _QWORD v73[2];
  int v74;
  char v75;
  _QWORD v76[2];
  char v77;

  v7 = a1;
  *(_QWORD *)a1 = -1;
  *(_QWORD *)(a1 + 8) = -1;
  *(_BYTE *)(a1 + 25) = 1;
  *(_QWORD *)(a1 + 32) = a2;
  v8 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 2312);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 2893);
  *(_BYTE *)(a2 + 2893) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 2872);
  *(_QWORD *)(a2 + 2872) = v8;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v73[0] = 0;
  v73[1] = 0;
  v74 = 0;
  v9 = *a3;
  if ((v9 - 30) >= 0x1E && v9 != 78)
  {
    v51 = *(_QWORD *)(*((_QWORD *)a3 + 3) + 8 * **((unsigned int **)a3 + 3) + 16);
    if (!v51)
      goto LABEL_66;
    goto LABEL_56;
  }
  v68[0] = 0;
  v68[1] = 0;
  v69 = 0;
  v10 = (unsigned int *)*((_QWORD *)a3 + 3);
  v11 = *v10;
  v12 = sub_22F293A28(*((_DWORD *)a3 + 2));
  v13 = *((unsigned int *)a3 + 8);
  if ((_DWORD)v13)
  {
    v20 = (uint64_t)&v10[2 * v11 + 4 + 2 * v12];
    v21 = v20 + 8 * v13;
    v4 = 259;
    while (1)
    {
      v3 = *(_QWORD *)(*(_QWORD *)v20 + 16);
      v76[0] = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v3 + 32))(v3);
      sub_22F294270((uint64_t)v59, (uint64_t)v68, v76);
      v22 = *(_QWORD *)(v3 + 48);
      v23 = *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0);
      if (v23)
      {
        v24 = *(_DWORD *)(v23 + 16);
        if ((v24 & 0xFE) == 0x28)
          goto LABEL_23;
      }
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
      {
        v23 = sub_22F10CF48(v23);
        if (v23)
          break;
      }
LABEL_13:
      v59[0] = "tmp";
      LOWORD(v61) = 259;
      v25 = sub_22F25E4D4(a2, v22, (uint64_t)v59, 0);
      v27 = 0;
      v28 = v25 & 0xFFFFFFFFFFFFFFF8;
      if (v25 <= 7)
        v28 = 0;
      v29 = v26 & 0xFFFFFFFFFFFFFFF8;
      if (v25 <= 7)
        v29 = 0;
      v64[0] = v28;
      v64[1] = v29;
      if (v25 >= 8)
        v27 = 1 << (v26 & 7 | (8 * (v25 & 7)));
      v64[2] = v27;
      v65 = 0;
      v66 = 0;
      v67 = 0;
      sub_22E5BC134(&v70, a2, v3, (uint64_t)v64);
      v20 += 8;
      if (v20 == v21)
        goto LABEL_3;
    }
    v24 = *(_DWORD *)(v23 + 16);
LABEL_23:
    if ((v24 & 0x100000) != 0)
    {
      do
      {
        v23 = *(_QWORD *)(*(_QWORD *)(v23 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v23)
        {
          v30 = *(_DWORD *)(v23 + 16);
          if ((v30 & 0xFE) == 0x28)
            continue;
        }
        v23 = sub_22F10CF48(v23);
        v30 = *(_DWORD *)(v23 + 16);
      }
      while ((v30 & 0x100000) != 0);
    }
    v22 = *(_QWORD *)(v23 + 32);
    goto LABEL_13;
  }
LABEL_3:
  v57 = (uint64_t)a3;
  v14 = (unsigned int *)*((_QWORD *)a3 + 3);
  if (v14)
  {
    v17 = *v14;
    v15 = (uint64_t *)(v14 + 4);
    v16 = v17;
    if (v17)
    {
      v18 = 8 * v16;
      v19 = v15;
      while (*(_DWORD *)(*v19 + 8) != 63)
      {
        ++v19;
        v18 -= 8;
        if (!v18)
          goto LABEL_55;
      }
    }
    else
    {
      v19 = v15;
    }
    v31 = &v15[v16];
    if (v19 != v31)
    {
      v32 = *v19;
LABEL_33:
      v33 = *(unsigned int *)(v32 + 16);
      if ((_DWORD)v33)
      {
        v34 = v32 + 24;
        v35 = v32 + 24 + 8 * v33;
        while (1)
        {
          v36 = *(_QWORD **)(*(_QWORD *)v34 + 16);
          v63 = (*(uint64_t (**)(_QWORD *))(*v36 + 32))(v36);
          sub_22F294270((uint64_t)v76, (uint64_t)v68, &v63);
          if (v77)
            break;
LABEL_40:
          v34 += 8;
          if (v34 == v35)
            goto LABEL_51;
        }
        v37 = v36[6];
        v38 = *(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0);
        if (!v38 || (v39 = *(_DWORD *)(v38 + 16), (v39 & 0xFE) != 0x28))
        {
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
            || (v38 = sub_22F10CF48(v38)) == 0)
          {
LABEL_39:
            v40 = v4 & 0xFFFFFFE0;
            v3 = v3 & 0xFFFFFFFF00000000 | v4 & 0xE0;
            v41 = sub_22EF5B848(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), v37, v3);
            sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, v41, 0);
            v42 = llvm::UndefValue::get();
            v43 = sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, v37, 0);
            v44 = sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), (unint64_t)v36, 0);
            v59[0] = v42;
            v59[1] = v43;
            v59[2] = v44;
            v60 = 0;
            v61 = 0;
            v62 = 0;
            sub_22E5BC134(&v70, a2, (uint64_t)v36, (uint64_t)v59);
            v4 = v40;
            goto LABEL_40;
          }
          v39 = *(_DWORD *)(v38 + 16);
        }
        if ((v39 & 0x100000) != 0)
        {
          do
          {
            v38 = *(_QWORD *)(*(_QWORD *)(v38 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (v38)
            {
              v45 = *(_DWORD *)(v38 + 16);
              if ((v45 & 0xFE) == 0x28)
                continue;
            }
            v38 = sub_22F10CF48(v38);
            v45 = *(_DWORD *)(v38 + 16);
          }
          while ((v45 & 0x100000) != 0);
        }
        v37 = *(_QWORD *)(v38 + 32);
        goto LABEL_39;
      }
LABEL_51:
      v46 = v19 + 1;
      while (v46 != v31)
      {
        v47 = *v46++;
        v32 = v47;
        if (*(_DWORD *)(v47 + 8) == 63)
        {
          v19 = v46 - 1;
          goto LABEL_33;
        }
      }
    }
  }
LABEL_55:
  sub_22E5BC320((uint64_t)v73, a2 + 2904);
  sub_22F2840EC((uint64_t)v73);
  v48 = sub_22F28423C(v57);
  v49 = *(_DWORD **)(v48 + 8 * *(unsigned int *)(v48 + 8) + 32);
  v50 = *(_DWORD *)(v57 + 32);
  v63 = a2;
  v76[0] = sub_22E6008B0;
  v76[1] = &v63;
  sub_22F0D8EB0(v49, 1, v50, (uint64_t (*)(uint64_t, uint64_t, unsigned __int8 *))sub_22F293FE8, (uint64_t)v76, (void (*)(uint64_t, _DWORD *))nullsub_817, (uint64_t)&v75);
  v51 = *(_QWORD *)(*(_QWORD *)(v57 + 24) + 8 * **(unsigned int **)(v57 + 24) + 72);
  llvm::deallocate_buffer(v68[0], (void *)(8 * v69));
  v7 = a1;
  if (!v51)
    goto LABEL_66;
LABEL_56:
  v52 = *(_QWORD *)(v51 + 8);
  if ((v52 & 1) != 0)
  {
    v53 = (unint64_t *)((v52 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v54 = &v53[*(unsigned int *)(v52 & 0xFFFFFFFFFFFFFFFELL)];
  }
  else
  {
    if (v52)
      v53 = (unint64_t *)(v51 + 8);
    else
      v53 = 0;
    if (v52)
      v54 = (unint64_t *)(v51 + 16);
    else
      v54 = 0;
  }
  while (v53 != v54)
  {
    v55 = *v53++;
    sub_22E4C652C((_QWORD *)a2, v55);
  }
LABEL_66:
  if ((_DWORD)v71)
  {
    sub_22E5BC320((uint64_t)&v70, a2 + 2904);
    sub_22F2840EC((uint64_t)&v70);
  }
  sub_22F283FFC((uint64_t)&v70);
  return v7;
}

uint64_t sub_22E5F9FF4(uint64_t result, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  _QWORD v44[3];
  int v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  _QWORD v58[2];
  int v59;

  if (!*(_QWORD *)(result + 320))
    return result;
  v11 = (_QWORD *)result;
  BYTE1(v53) = 1;
  v12 = *(_QWORD *)(result + 1992) - *(_QWORD *)(result + 2000);
  v13 = *(_QWORD *)(result + 2312);
  LOBYTE(v53) = *(_BYTE *)(result + 2893);
  *(_BYTE *)(result + 2893) = 0;
  v14 = *(_QWORD *)(result + 2872);
  v50 = v12;
  v51 = v14;
  v52 = v13;
  *(_QWORD *)(result + 2872) = v12;
  v55 = 0;
  v56 = 0;
  v54 = result;
  v57 = 0;
  v58[0] = 0;
  v58[1] = 0;
  v59 = 0;
  sub_22F28E264(result, a2, (uint64_t)&v50);
  sub_22E5BC320((uint64_t)v58, v54 + 2904);
  sub_22F2840EC((uint64_t)v58);
  v15 = *(unsigned int **)(a2 + 24);
  v16 = *v15;
  v17 = sub_22F293A28(*(_DWORD *)(a2 + 8));
  v18 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v18)
  {
    v19 = (uint64_t)&v15[2 * v16 + 4 + 2 * (v17 + 2 * v18)];
    v20 = 8 * v18;
    do
    {
      v19 += 8;
      sub_22E4D89CC(v11);
      v20 -= 8;
    }
    while (v20);
  }
  sub_22F283FC4((uint64_t)&v50);
  v50 = 0;
  v51 = 0;
  LODWORD(v52) = 0;
  v53 = 0;
  v54 = 0;
  LODWORD(v55) = 0;
  v21 = *(unsigned int **)(a2 + 24);
  v22 = *v21;
  v23 = sub_22F293A28(*(_DWORD *)(a2 + 8));
  v24 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v24)
  {
    v31 = (uint64_t)&v21[2 * v22 + 4 + 2 * (5 * v24 + v23)];
    v32 = v31 + 8 * v24;
    while (!*(_QWORD *)v31)
    {
LABEL_16:
      v31 += 8;
      if (v31 == v32)
        goto LABEL_6;
    }
    v33 = *(_QWORD *)(*(_QWORD *)v31 + 16);
    v34 = *(_QWORD *)(v33 + 48);
    v35 = *(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0);
    if (!v35 || (v36 = *(_DWORD *)(v35 + 16), (v36 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
        || (v43 = *(_QWORD *)(v33 + 48), v35 = sub_22F10CF48(v35), v34 = v43, !v35))
      {
LABEL_21:
        v48 = "tmp";
        v49 = 259;
        v37 = sub_22F25E4D4((uint64_t)v11, v34, (uint64_t)&v48, 0);
        v39 = v37 & 0xFFFFFFFFFFFFFFF8;
        if (v37 <= 7)
          v39 = 0;
        v40 = v38 & 0xFFFFFFFFFFFFFFF8;
        if (v37 <= 7)
          v40 = 0;
        v44[0] = v39;
        v44[1] = v40;
        v41 = 1 << (v38 & 7 | (8 * (v37 & 7)));
        if (v37 < 8)
          v41 = 0;
        v44[2] = v41;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        sub_22E5BC134(&v50, (uint64_t)v11, v33, (uint64_t)v44);
        goto LABEL_16;
      }
      v36 = *(_DWORD *)(v35 + 16);
    }
    if ((v36 & 0x100000) != 0)
    {
      do
      {
        v35 = *(_QWORD *)(*(_QWORD *)(v35 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v35)
        {
          v42 = *(_DWORD *)(v35 + 16);
          if ((v42 & 0xFE) == 0x28)
            continue;
        }
        v35 = sub_22F10CF48(v35);
        v42 = *(_DWORD *)(v35 + 16);
      }
      while ((v42 & 0x100000) != 0);
    }
    v34 = *(_QWORD *)(v35 + 32);
    goto LABEL_21;
  }
LABEL_6:
  sub_22E5BC320((uint64_t)&v53, (uint64_t)(v11 + 363));
  sub_22F2840EC((uint64_t)&v53);
  v25 = *(unsigned int **)(a2 + 24);
  v26 = *v25;
  v27 = sub_22F293A28(*(_DWORD *)(a2 + 8));
  v28 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v28)
  {
    v29 = &v25[2 * v26 + 4 + 2 * (v27 + 6 * v28)];
    v30 = 8 * v28;
    do
    {
      if (*(_QWORD *)v29)
        sub_22E4D89CC(v11);
      v29 += 2;
      v30 -= 8;
    }
    while (v30);
  }
  sub_22E61F8F8(v11, a3, a4, a5, a6, 0);
  if ((_DWORD)v51)
  {
    sub_22E5BC320((uint64_t)&v50, (uint64_t)(v11 + 363));
    sub_22F2840EC((uint64_t)&v50);
  }
  return sub_22F283FFC((uint64_t)&v50);
}

void sub_22E5FA32C(uint64_t a1, unsigned int *a2, __n128 a3)
{
  BOOL v3;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const llvm::APInt *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Type **v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  llvm::Type **v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  _QWORD *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;

  if (*(_QWORD *)(a1 + 320))
    v3 = a2 == 0;
  else
    v3 = 1;
  if (!v3)
  {
    v7 = *a2;
    v5 = (uint64_t *)(a2 + 4);
    v6 = v7;
    if (v7)
    {
      v8 = 8 * v6;
      for (i = v5; *(_DWORD *)(*i + 8) != 5; ++i)
      {
        v8 -= 8;
        if (!v8)
          return;
      }
    }
    else
    {
      i = v5;
    }
    v10 = &v5[v6];
    if (i != v10)
    {
      v11 = *i;
LABEL_13:
      v34 = 64;
      v33 = 0;
      v12 = (uint64_t *)(v11 + 24);
      v13 = *(unsigned int *)(v11 + 16);
      v14 = *(_QWORD *)(v11 + 24 + 8 * v13);
      if (v14)
      {
        v35 = a1;
        v36 = a1 + 272;
        v37 = 0;
        v38 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
        v15 = sub_22E50E974(&v35, v14, a3);
        v16 = (const llvm::APInt *)(v15 + 24);
        if (v34 > 0x40 || (v17 = *(_DWORD *)(v15 + 32), v17 > 0x40))
        {
          llvm::APInt::assignSlowCase((llvm::APInt *)&v33, v16);
        }
        else
        {
          v33 = *(_QWORD **)v16;
          v34 = v17;
        }
        v13 = *(unsigned int *)(v11 + 16);
      }
      if ((_DWORD)v13)
      {
        v18 = 8 * v13;
        while (1)
        {
          v19 = *v12;
          LODWORD(v20) = v34;
          v32 = v34;
          if (v34 <= 0x40)
            break;
          v21 = &v31;
          llvm::APInt::initSlowCase((llvm::APInt *)&v31, (const llvm::APInt *)&v33);
          LODWORD(v20) = v32;
          if (v32 < 0x41)
            goto LABEL_27;
          if (v20 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v31) <= 0x40)
          {
            v21 = v31;
LABEL_27:
            if (!*v21)
            {
LABEL_28:
              v22 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
              sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0));
              v23 = *(unsigned __int16 *)(*(_QWORD *)(v22 + 15088) + 96);
              v24 = sub_22EF5CDF0(v22, *(_QWORD *)(*(_QWORD *)(v22 + 16408) & 0xFFFFFFFFFFFFFFF0));
              v20 = (llvm::Type **)v32;
              v25 = v23 / v24;
              if (v32 <= 0x40)
              {
                v26 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v32;
                if (!v32)
                  v26 = 0;
                v31 = (_QWORD *)(v26 & v25);
                if ((v26 & v25) == 0)
                  goto LABEL_40;
                goto LABEL_39;
              }
              *v31 = v25;
              bzero(v31 + 1, ((((unint64_t)v20 + 63) >> 3) - 8) & 0xFFFFFFF8);
              LODWORD(v20) = v32;
            }
LABEL_34:
            if (v20 < 0x41)
            {
              v27 = &v31;
              goto LABEL_38;
            }
          }
          if (v20 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v31) <= 0x40)
          {
            v27 = v31;
LABEL_38:
            if (!*v27)
              goto LABEL_40;
          }
LABEL_39:
          v35 = a1;
          v36 = a1 + 272;
          v37 = 0;
          v38 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
          v20 = (llvm::Type **)sub_22E50E974(&v35, v19, a3);
          v28 = (llvm::Type **)llvm::ConstantInt::get();
          sub_22E621528(a1, v20, (unsigned __int8 *)v19, 0, v28, 0);
          LODWORD(v20) = v32;
LABEL_40:
          if (v20 >= 0x41 && v31)
            MEMORY[0x2348A0E84](v31, 0x1000C8000313F17);
          ++v12;
          v18 -= 8;
          if (!v18)
            goto LABEL_44;
        }
        v31 = v33;
        if (!v33)
          goto LABEL_28;
        goto LABEL_34;
      }
LABEL_44:
      if (v34 >= 0x41)
      {
        if (v33)
          MEMORY[0x2348A0E84](v33, 0x1000C8000313F17);
      }
      v29 = i + 1;
      while (v29 != v10)
      {
        v30 = *v29++;
        v11 = v30;
        if (*(_DWORD *)(v30 + 8) == 5)
        {
          i = v29 - 1;
          goto LABEL_13;
        }
      }
    }
  }
}

uint64_t *sub_22E5FA634(uint64_t ***this, unint64_t a2)
{
  unsigned int v4;
  uint64_t *v5;

  v4 = *((_DWORD *)this + 2);
  if (v4 >= 0x41)
  {
    if (v4 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) > 0x40)
      return (uint64_t *)a2;
    v5 = **this;
  }
  else
  {
    v5 = (uint64_t *)*this;
  }
  if ((unint64_t)v5 <= a2)
    return v5;
  return (uint64_t *)a2;
}

uint64_t sub_22E5FA69C(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int *v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  _DWORD *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _DWORD *v18;
  BOOL v19;
  _QWORD v21[3];
  _DWORD v22[4];
  _QWORD v23[3];
  char v24;
  char v25;
  _BYTE v26[104];
  _QWORD v27[12];

  v4 = 0;
  v27[11] = *MEMORY[0x24BDAC8D0];
  v25 = 0;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 76) & 0x20) != 0 && !*(_BYTE *)(a2 + 36))
  {
    v5 = *(unsigned int **)(a2 + 24);
    if (v5 && (v8 = *v5, v6 = v5 + 4, (v7 = v8) != 0))
    {
      v9 = 8 * v7;
      while (1)
      {
        v10 = *(_DWORD **)v6;
        v11 = *(_DWORD *)(*(_QWORD *)v6 + 8);
        if (v11 != 51 && (v11 != 71 || v10[9] != 5 || v10[10] != 5 || v10[8] > 4u))
          break;
        v6 += 2;
        v9 -= 8;
        if (!v9)
          goto LABEL_12;
      }
      v4 = 0;
    }
    else
    {
LABEL_12:
      v4 = 1;
    }
  }
  v23[0] = a1;
  v23[1] = a2;
  v23[2] = &v25;
  v24 = v4;
  sub_22E5B8E78(v22, a1, a2);
  sub_22E600354((uint64_t)v26, a1, a2, 0x100000059, 1);
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
  v21[0] = v23;
  v21[1] = sub_22E602E04;
  v21[2] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v12 + 360))(v12, a1, 33, v21, *(unsigned __int8 *)(a2 + 36));
  sub_22F283FC4((uint64_t)v27);
  sub_22E488B4C((uint64_t)v26);
  sub_22F283234(v22);
  if ((v4 & 1) == 0)
  {
    v13 = *(unsigned int **)(a2 + 24);
    if (!v13)
      goto LABEL_26;
    v16 = *v13;
    v14 = v13 + 4;
    v15 = v16;
    if (v16)
    {
      v17 = 8 * v15;
      v18 = v14;
      while (*(_DWORD *)(*(_QWORD *)v18 + 8) != 51)
      {
        v18 += 2;
        v17 -= 8;
        if (!v17)
          goto LABEL_26;
      }
    }
    else
    {
      v18 = v14;
    }
    if (v18 == &v14[2 * v15] || (*(_QWORD *)v18 ? (v19 = v25 == 0) : (v19 = 0), !v19))
LABEL_26:
      (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 144)
                                                                                              + 808)
                                                                                + 184))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808), a1, *(unsigned int *)(a2 + 12), 33, 1, 0);
  }
  return sub_22E5F6470(a1, a2);
}

char **sub_22E5FA8AC(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  _DWORD *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  unint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  unint64_t v17;
  char *v18;
  unsigned __int8 **v19;
  unsigned __int8 *v20;
  uint64_t (***v21)();
  void (**v22)(uint64_t (***)());
  uint64_t (***v23)();
  void (**v24)(uint64_t (***)());
  uint64_t v25;
  unsigned int *v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t Sections;
  uint64_t v33;
  _QWORD *v34;
  void (**v35)(_QWORD *);
  __int128 v37;
  uint64_t v38;
  char *v39[2];
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[3];
  _QWORD *v43;
  uint64_t (**v44)();
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t (***v47)();
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 76) & 0x20) != 0)
  {
    v10 = sub_22F28423C(a2);
    v11 = sub_22F28423C(a2);
    v12 = *(unsigned __int8 **)(v11 + 8 * *(unsigned int *)(v11 + 8) + 32);
    v13 = *v12;
    v39[0] = (char *)&v40;
    v39[1] = (char *)0x400000000;
    if (v13 == 8)
    {
      v16 = *(_DWORD *)v12;
      v15 = (uint64_t *)(v12 + 16);
      v14 = v16;
      v37 = (unint64_t)v15;
      if (v16 >= 0x100)
      {
        v17 = 0;
        v18 = (char *)v15 + ((v14 >> 5) & 0x7FFFFF8);
        while (1)
        {
          v19 = (unsigned __int8 **)v15;
          if ((v17 & 3) != 0)
          {
            if ((v17 & 0xFFFFFFFFFFFFFFFCLL) != 0)
              v19 = (unsigned __int8 **)((v17 & 0xFFFFFFFFFFFFFFFCLL) + 40);
            else
              v19 = (unsigned __int8 **)sub_22F3AC1A8(*v15);
          }
          v20 = *v19;
          v44 = &off_24FA66738;
          v45 = a1;
          v46 = v20;
          v47 = &v44;
          sub_22E536AAC((uint64_t)v39, (unint64_t)&v44);
          v21 = v47;
          if (v47 == &v44)
            break;
          if (v47)
          {
            v22 = (void (**)(uint64_t (***)()))(*v47 + 5);
LABEL_18:
            (*v22)(v21);
          }
          if ((v17 & 3) != 0)
          {
            if (v17 >= 4)
              sub_22F0D8720((uint64_t)&v37);
            else
              sub_22F3F2FE0((uint64_t)&v37, 1);
          }
          else
          {
            *(_QWORD *)&v37 = v15 + 1;
          }
          v17 = *((_QWORD *)&v37 + 1);
          v15 = (uint64_t *)v37;
          if (v37 == (unint64_t)v18)
            goto LABEL_33;
        }
        v22 = (void (**)(uint64_t (***)()))(v44 + 4);
        v21 = &v44;
        goto LABEL_18;
      }
LABEL_33:
      sub_22E5BB2A4((uint64_t)&v44, v10, 2);
      v25 = *(_QWORD *)(a1 + 1856);
      *(_QWORD *)(a1 + 1856) = &v44;
      v37 = *(_OWORD *)(a1 + 320);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 272));
      v42[0] = &off_24FA667C8;
      v42[1] = a1;
      v43 = v42;
      v26 = *(unsigned int **)(a2 + 24);
      if (v26)
      {
        v29 = *v26;
        v27 = v26 + 4;
        v28 = v29;
        if (v29)
        {
          v30 = 8 * v28;
          v31 = v27;
          do
          {
            if (*(_DWORD *)(*(_QWORD *)v31 + 8) == 51)
              break;
            v31 += 2;
            v30 -= 8;
          }
          while (v30);
        }
      }
      Sections = llvm::OpenMPIRBuilder::createSections();
      if (Sections)
      {
        sub_22E3CB840(a1 + 272, Sections, v33);
      }
      else
      {
        *(_QWORD *)(a1 + 320) = 0;
        *(_QWORD *)(a1 + 328) = 0;
      }
      v34 = v43;
      if (v43 == v42)
      {
        v35 = (void (**)(_QWORD *))(v42[0] + 32);
        v34 = v42;
      }
      else
      {
        if (!v43)
        {
LABEL_47:
          if (v38)
            llvm::MetadataTracking::untrack();
          *(_QWORD *)(a1 + 1856) = v25;
          v44 = &off_24FA66C98;
          sub_22E49FAE8((uint64_t)&v46);
          return sub_22F271CAC(v39);
        }
        v35 = (void (**)(_QWORD *))(*v43 + 40);
      }
      (*v35)(v34);
      goto LABEL_47;
    }
    v44 = &off_24FA66780;
    v45 = a1;
    v46 = v12;
    v47 = &v44;
    sub_22E536AAC((uint64_t)v39, (unint64_t)&v44);
    v23 = v47;
    if (v47 == &v44)
    {
      v24 = (void (**)(uint64_t (***)()))(v44 + 4);
      v23 = &v44;
    }
    else
    {
      if (!v47)
        goto LABEL_33;
      v24 = (void (**)(uint64_t (***)()))(*v47 + 5);
    }
    (*v24)(v23);
    goto LABEL_33;
  }
  sub_22E5B8E78(&v44, a1, a2);
  sub_22E600354((uint64_t)v39, a1, a2, 0x100000059, 1);
  sub_22F28F5CC((_QWORD *)a1, (unsigned __int8 *)a2);
  sub_22F283FC4((uint64_t)&v41);
  sub_22E488B4C((uint64_t)v39);
  sub_22F283234(&v44);
  v4 = *(unsigned int **)(a2 + 24);
  if (!v4)
    goto LABEL_53;
  v7 = *v4;
  v5 = v4 + 4;
  v6 = v7;
  if (v7)
  {
    v8 = 8 * v6;
    v9 = v5;
    while (*(_DWORD *)(*(_QWORD *)v9 + 8) != 51)
    {
      v9 += 2;
      v8 -= 8;
      if (!v8)
        goto LABEL_53;
    }
  }
  else
  {
    v9 = v5;
  }
  if (v9 == &v5[2 * v6] || !*(_QWORD *)v9)
LABEL_53:
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 144)
                                                                                            + 808)
                                                                              + 184))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808), a1, *(unsigned int *)(a2 + 12), 53, 1, 0);
  return (char **)sub_22E5F6470(a1, a2);
}

void sub_22E5FAD14(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  _DWORD *v20;
  uint64_t v21;
  unsigned int v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  _DWORD v31[4];
  uint64_t v32;
  _BYTE v33[104];
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _BYTE v37[64];
  void *v38;
  uint64_t v39;
  _BYTE v40[64];
  _BYTE *v41;
  uint64_t v42;
  _BYTE v43[64];
  _QWORD *v44;
  uint64_t v45;
  _QWORD v46[10];

  v46[8] = *MEMORY[0x24BDAC8D0];
  v44 = v46;
  v45 = 0x800000000;
  v41 = v43;
  v42 = 0x800000000;
  v38 = v40;
  v39 = 0x800000000;
  v35 = v37;
  v36 = 0x800000000;
  v4 = *(unsigned int **)(a2 + 24);
  if (v4)
  {
    v7 = *v4;
    v5 = (uint64_t *)(v4 + 4);
    v6 = v7;
    if (v7)
    {
      v8 = 8 * v6;
      v9 = v5;
      while (*(_DWORD *)(*v9 + 8) != 14)
      {
        ++v9;
        v8 -= 8;
        if (!v8)
          goto LABEL_14;
      }
    }
    else
    {
      v9 = v5;
    }
    v10 = &v5[v6];
    if (v9 != v10)
    {
      v11 = *v9;
LABEL_10:
      v12 = v11 + 24;
      sub_22F2633B0((uint64_t)&v44, (_BYTE *)(v11 + 24), (_BYTE *)(v11 + 24 + 8 * *(unsigned int *)(v11 + 16)));
      v13 = *(unsigned int *)(v11 + 16);
      sub_22F2633B0((uint64_t)&v41, (_BYTE *)(v12 + 8 * v13 + 8 * v13), (_BYTE *)(v12 + 8 * v13 + 8 * v13 + 8 * v13));
      sub_22F2633B0((uint64_t)&v38, (_BYTE *)(v12 + 8 * *(unsigned int *)(v11 + 16)), (_BYTE *)(v12 + 8 * *(unsigned int *)(v11 + 16) + 8 * *(unsigned int *)(v11 + 16)));
      v14 = *(unsigned int *)(v11 + 16);
      v15 = (_BYTE *)(v11 + 24 + 8 * v14 + 8 * v14 + 8 * v14);
      sub_22F2633B0((uint64_t)&v35, v15, &v15[8 * v14]);
      v16 = v9 + 1;
      while (v16 != v10)
      {
        v17 = *v16++;
        v11 = v17;
        if (*(_DWORD *)(v17 + 8) == 14)
        {
          v9 = v16 - 1;
          goto LABEL_10;
        }
      }
    }
  }
LABEL_14:
  v32 = a2;
  sub_22E5B8E78(v31, a1, a2);
  sub_22E600354((uint64_t)v33, a1, a2, 0x100000059, 1);
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
  v30[0] = &v32;
  v30[1] = sub_22E605478;
  v30[2] = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD *, _QWORD, _BYTE *, _QWORD, void *, _QWORD, void *, _QWORD))(*(_QWORD *)v18 + 168))(v18, a1, v30, *(unsigned int *)(a2 + 12), v44, v45, v41, v42, v38, v39, v35, v36);
  sub_22F283FC4((uint64_t)&v34);
  sub_22E488B4C((uint64_t)v33);
  sub_22F283234(v31);
  v19 = *(unsigned int **)(a2 + 24);
  if (!v19)
  {
    if ((_DWORD)v45)
      goto LABEL_36;
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
    v27 = *(_DWORD *)(a2 + 12);
LABEL_30:
    v29 = 55;
LABEL_35:
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v26 + 184))(v26, a1, v27, v29, 1, 0);
    goto LABEL_36;
  }
  v22 = *v19;
  v20 = v19 + 4;
  v21 = v22;
  v23 = &v20[2 * v22];
  v24 = v20;
  if (v22)
  {
    v25 = 8 * v21;
    v24 = v20;
    while (*(_DWORD *)(*(_QWORD *)v24 + 8) != 51)
    {
      v24 += 2;
      v25 -= 8;
      if (!v25)
        goto LABEL_25;
    }
  }
  if (v24 == v23 || !*(_QWORD *)v24)
  {
LABEL_25:
    if ((_DWORD)v45)
      goto LABEL_36;
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
    v27 = *(_DWORD *)(a2 + 12);
    if ((_DWORD)v21)
    {
      v28 = 8 * v21;
      while (*(_DWORD *)(*(_QWORD *)v20 + 8) != 51)
      {
        v20 += 2;
        v28 -= 8;
        if (!v28)
          goto LABEL_30;
      }
    }
    v29 = 55;
    if (v20 != v23)
    {
      if (*(_QWORD *)v20)
        v29 = 89;
      else
        v29 = 55;
    }
    goto LABEL_35;
  }
LABEL_36:
  sub_22E5F6470(a1, a2);
  if (v35 != v37)
    free(v35);
  if (v38 != v40)
    free(v38);
  if (v41 != v43)
    free(v41);
  if (v44 != v46)
    free(v44);
}

uint64_t sub_22E5FB088(uint64_t a1, uint64_t a2, __n128 a3)
{
  _QWORD *v5;
  uint64_t v6;
  unsigned int *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t Masked;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void (**v29)(_QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[2];
  __int128 v34;
  uint64_t v35;
  _QWORD v36[3];
  _QWORD *v37;
  _QWORD v38[2];
  BOOL v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD **)(a1 + 144);
  if ((*(_BYTE *)(v5[19] + 76) & 0x20) != 0)
  {
    v13 = *(unsigned int **)(a2 + 24);
    v14 = v13 + 4;
    v15 = *v13;
    v16 = v13[1];
    v17 = (uint64_t)&v13[2 * v15 + 4];
    v18 = *(_QWORD *)(v17 + 8 * v16);
    if ((_DWORD)v15)
    {
      v19 = 8 * v15;
      while (*(_DWORD *)(*(_QWORD *)v14 + 8) != 27)
      {
        v14 += 2;
        v19 -= 8;
        if (!v19)
          goto LABEL_17;
      }
    }
    if (v14 != (unsigned int *)v17 && (v20 = *(_QWORD *)v14) != 0 && (v21 = *(_QWORD *)(v20 + 32)) != 0)
    {
      v22 = v5[3] != 0;
      v38[0] = a1;
      v38[1] = a1 + 272;
      v39 = v22;
      v40 = v5[29];
      sub_22E50E974(v38, v21, a3);
    }
    else
    {
LABEL_17:
      llvm::ConstantInt::get();
    }
    v33[0] = v18;
    v33[1] = a1;
    sub_22F0D4E74(a2);
    sub_22E4889F4((uint64_t)v38, a1, v23);
    sub_22E5E5100(a1, a2);
    v34 = *(_OWORD *)(a1 + 320);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 272));
    v36[0] = &off_24FA668A0;
    v36[1] = a1;
    v37 = v36;
    Masked = llvm::OpenMPIRBuilder::createMasked();
    if (Masked)
    {
      sub_22E3CB840(a1 + 272, Masked, v25);
    }
    else
    {
      *(_QWORD *)(a1 + 320) = 0;
      *(_QWORD *)(a1 + 328) = 0;
    }
    v28 = v37;
    if (v37 == v36)
    {
      v29 = (void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v36[0] + 32);
      v28 = v36;
    }
    else
    {
      if (!v37)
        goto LABEL_26;
      v29 = (void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v37 + 40);
    }
    (*v29)(v28, v25, v26, v27);
LABEL_26:
    if (v35)
      llvm::MetadataTracking::untrack();
    return sub_22E488B4C((uint64_t)v38);
  }
  sub_22F0D4E74(a2);
  sub_22E4889F4((uint64_t)v38, a1, v6);
  sub_22E5E5100(a1, a2);
  v33[0] = a2;
  v7 = *(unsigned int **)(a2 + 24);
  if (!v7)
    goto LABEL_32;
  v10 = *v7;
  v8 = v7 + 4;
  v9 = v10;
  if (v10)
  {
    v11 = 8 * v9;
    v12 = v8;
    while (*(_DWORD *)(*(_QWORD *)v12 + 8) != 27)
    {
      v12 += 2;
      v11 -= 8;
      if (!v11)
        goto LABEL_32;
    }
  }
  else
  {
    v12 = v8;
  }
  if (v12 != &v8[2 * v9] && *(_QWORD *)v12)
    v30 = *(_QWORD *)(*(_QWORD *)v12 + 32);
  else
LABEL_32:
    v30 = 0;
  v31 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
  *(_QWORD *)&v34 = v33;
  *((_QWORD *)&v34 + 1) = sub_22E600990;
  v35 = 0;
  (*(void (**)(uint64_t, uint64_t, __int128 *, _QWORD, uint64_t))(*(_QWORD *)v31 + 144))(v31, a1, &v34, *(unsigned int *)(a2 + 12), v30);
  return sub_22E488B4C((uint64_t)v38);
}

uint64_t sub_22E5FB340(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  unsigned int *v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _DWORD *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Critical;
  uint64_t v25;
  void (**v26)(void);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  void *v31;
  __int128 v33;
  uint64_t v34;
  void *__p[2];
  uint64_t v36;
  void *v37[2];
  uint64_t v38;
  _QWORD v39[2];
  _QWORD v40[3];
  _QWORD *v41;
  _QWORD v42[2];
  char v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 144);
  if ((*(_BYTE *)(*(_QWORD *)(v5 + 152) + 76) & 0x20) != 0)
  {
    v12 = *(unsigned int **)(a2 + 24);
    v13 = v12 + 4;
    v14 = *v12;
    v15 = v12[1];
    v16 = (uint64_t)&v12[2 * v14 + 4];
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if ((_DWORD)v14)
    {
      v18 = 8 * v14;
      while (*(_DWORD *)(*(_QWORD *)v13 + 8) != 35)
      {
        v13 += 2;
        v18 -= 8;
        if (!v18)
          goto LABEL_17;
      }
    }
    if (v13 != (unsigned int *)v16)
    {
      v19 = *(_QWORD *)v13;
      if (v19)
      {
        v20 = *(_QWORD *)(v19 + 16);
        if (v20)
        {
          v42[0] = a1;
          v42[1] = a1 + 272;
          v43 = 0;
          v44 = *(_QWORD *)(v5 + 232);
          v21 = sub_22E50E974(v42, v20, a3);
          v22 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 24);
          v45 = 257;
          sub_22E3BF45C((uint64_t *)(a1 + 272), v21, v22, 0, (uint64_t)v42);
        }
      }
    }
LABEL_17:
    v39[0] = v17;
    v39[1] = a1;
    sub_22F0D4E74(a2);
    sub_22E4889F4((uint64_t)v42, a1, v23);
    sub_22E5E5100(a1, a2);
    *(_OWORD *)v37 = *(_OWORD *)(a1 + 320);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 272));
    v40[0] = &off_24FA668E8;
    v40[1] = a1;
    v41 = v40;
    v33 = *(_OWORD *)(a2 + 32);
    v34 = *(_QWORD *)(a2 + 48);
    sub_22EFC6E98(&v33, __p);
    Critical = llvm::OpenMPIRBuilder::createCritical();
    if (Critical)
    {
      sub_22E3CB840(a1 + 272, Critical, v25);
    }
    else
    {
      *(_QWORD *)(a1 + 320) = 0;
      *(_QWORD *)(a1 + 328) = 0;
    }
    if (SHIBYTE(v36) < 0)
      operator delete(__p[0]);
    if (v41 == v40)
    {
      v26 = (void (**)(void))(v40[0] + 32);
    }
    else
    {
      if (!v41)
        goto LABEL_27;
      v26 = (void (**)(void))(*v41 + 40);
    }
    (*v26)();
LABEL_27:
    if (v38)
      llvm::MetadataTracking::untrack();
    return sub_22E488B4C((uint64_t)v42);
  }
  v39[0] = a2;
  v6 = *(unsigned int **)(a2 + 24);
  if (!v6)
    goto LABEL_33;
  v9 = *v6;
  v7 = v6 + 4;
  v8 = v9;
  if (v9)
  {
    v10 = 8 * v8;
    v11 = v7;
    while (*(_DWORD *)(*(_QWORD *)v11 + 8) != 35)
    {
      v11 += 2;
      v10 -= 8;
      if (!v10)
        goto LABEL_33;
    }
  }
  else
  {
    v11 = v7;
  }
  if (v11 != &v7[2 * v8] && *(_QWORD *)v11)
    v27 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  else
LABEL_33:
    v27 = 0;
  sub_22F0D4E74(a2);
  sub_22E4889F4((uint64_t)v42, a1, v28);
  sub_22E5E5100(a1, a2);
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
  *(_OWORD *)__p = *(_OWORD *)(a2 + 32);
  v36 = *(_QWORD *)(a2 + 48);
  sub_22EFC6E98((__int128 *)__p, v37);
  if (v38 >= 0)
    v30 = v37;
  else
    v30 = (void **)v37[0];
  if (v38 >= 0)
    v31 = (void *)(HIBYTE(v38) & 0x7F);
  else
    v31 = v37[1];
  *(_QWORD *)&v33 = v39;
  *((_QWORD *)&v33 + 1) = sub_22E6057EC;
  v34 = 0;
  (*(void (**)(uint64_t, uint64_t, void **, void *, __int128 *, _QWORD, uint64_t))(*(_QWORD *)v29 + 128))(v29, a1, v30, v31, &v33, *(unsigned int *)(a2 + 12), v27);
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
  return sub_22E488B4C((uint64_t)v42);
}

void sub_22E5FB6AC(_QWORD *a1, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD *), uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unsigned int *v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  _BYTE v37[7];
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  _QWORD v43[2];
  __int128 v44;
  __int128 v45;
  char v46;
  _BYTE v47[7];
  char v48[24];
  uint64_t v49;
  __int128 v50[3];
  char v51;
  _BYTE v52[7];
  _QWORD v53[4];
  __int16 v54;
  void *v55[2];
  _BYTE v56[32];
  void *v57[2];
  _BYTE v58[32];
  uint64_t *v59;
  uint64_t v60;
  _BYTE v61[32];
  uint64_t *v62;
  uint64_t v63;
  _QWORD v64[6];

  v64[4] = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 34;
  v7 = a3(a4, a1);
  v8 = a1[11];
  v54 = 257;
  v36 = sub_22E3BF45C(v6, v7, v8, 0, (uint64_t)v53);
  v10 = v64;
  v62 = v64;
  v63 = 0x400000000;
  v11 = (uint64_t *)v61;
  v59 = (uint64_t *)v61;
  v60 = 0x400000000;
  v57[0] = v58;
  v57[1] = (void *)0x400000000;
  v55[0] = v56;
  v55[1] = (void *)0x400000000;
  v12 = *(unsigned int **)(a2 + 24);
  if (!v12)
    goto LABEL_13;
  v15 = *v12;
  v13 = (uint64_t *)(v12 + 4);
  v14 = v15;
  if (v15)
  {
    v25 = 8 * v14;
    v16 = v13;
    while (*(_DWORD *)(*v16 + 8) != 66)
    {
      ++v16;
      v25 -= 8;
      if (!v25)
        goto LABEL_13;
    }
  }
  else
  {
    v16 = v13;
  }
  v17 = &v13[v14];
  if (v16 == v17)
  {
LABEL_13:
    v26 = 0;
    v27 = 0;
    v28 = (uint64_t *)v58;
  }
  else
  {
    v18 = *v16;
LABEL_6:
    sub_22F2633B0((uint64_t)&v62, (_BYTE *)(v18 + 104), (_BYTE *)(v18 + 104 + 8 * *(unsigned int *)(v18 + 16)));
    sub_22F2633B0((uint64_t)&v59, (_BYTE *)(v18 + 104 + 8 * *(unsigned int *)(v18 + 16)), (_BYTE *)(v18 + 104 + 8 * *(unsigned int *)(v18 + 16) + 8 * *(unsigned int *)(v18 + 16)));
    v19 = *(unsigned int *)(v18 + 16);
    v20 = (_BYTE *)(v18 + 104 + 8 * v19 + 8 * v19 + 8 * v19 + 8 * v19);
    sub_22F2633B0((uint64_t)v57, v20, &v20[8 * v19]);
    v21 = *(unsigned int *)(v18 + 16);
    v22 = (_BYTE *)(v18 + 104 + 8 * v21 + 8 * v21 + 8 * v21 + 8 * v21 + 8 * v21 + 8 * v21);
    sub_22F2633B0((uint64_t)v55, v22, &v22[8 * v21]);
    v23 = v16 + 1;
    while (v23 != v17)
    {
      v24 = *v23++;
      v18 = v24;
      if (*(_DWORD *)(v24 + 8) == 66)
      {
        v16 = v23 - 1;
        goto LABEL_6;
      }
    }
    v10 = v62;
    v27 = v63;
    v11 = v59;
    v26 = v60;
    v28 = (uint64_t *)v57[0];
  }
  sub_22F27B534((unint64_t)v53, v10, v27, v10, v27, v11, v26, v9, v28);
  if ((_DWORD)v60)
  {
    v29 = 0;
    v35 = v59;
    v30 = v55[0];
    v31 = 8 * v60;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35[v29] + 16) + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 8) != 0)
      {
        sub_22F27B6EC(v53, a1, v29);
        sub_22E59D1E0((uint64_t)v53, (uint64_t)a1, v29);
      }
      v32 = *(_QWORD *)(*(_QWORD *)(v30[v29] + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v32)
        v33 = (*(_DWORD *)(v32 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
      else
        v33 = 0;
      if (!v33)
        v32 = sub_22F10CF48(v32);
      v49 = *(_QWORD *)(v32 + 40);
      v34 = v49;
      v50[0] = (unint64_t)v36;
      v50[1] = v38;
      v50[2] = v39;
      v51 = 0;
      *(_DWORD *)v52 = *(_DWORD *)v37;
      *(_DWORD *)&v52[3] = *(_DWORD *)&v37[3];
      sub_22F25406C((uint64_t)(a1 + 511), &v49, v50, (uint64_t)v48);
      v40 = v34;
      v41 = 0;
      v43[0] = v36;
      v43[1] = 0;
      v44 = v38;
      v45 = v39;
      v46 = 0;
      *(_DWORD *)v47 = *(_DWORD *)v37;
      *(_DWORD *)&v47[3] = *(_DWORD *)&v37[3];
      v42 = sub_22F297CB8((uint64_t)a1, v43);
      sub_22E4C652C(a1, *(_QWORD *)(v30[v29] + 16));
      if (v40)
        sub_22F254324((uint64_t)&v40, (uint64_t)a1);
      ++v29;
      v31 -= 8;
    }
    while (v31);
  }
  sub_22F284140((uint64_t)v53);
  if (v55[0] != v56)
    free(v55[0]);
  if (v57[0] != v58)
    free(v57[0]);
  if (v59 != (uint64_t *)v61)
    free(v59);
  if (v62 != v64)
    free(v62);
}

void sub_22E5FBAA0(uint64_t a1, _DWORD *a2)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v3 = *(unsigned __int8 *)a2;
  if ((v3 & 0xFE) != 0x70)
  {
    if (v3 == 233)
      goto LABEL_6;
LABEL_5:
    __asm { BR              X10 }
  }
  if ((*a2 & 0xFC0000u) >= 0x840000)
    goto LABEL_5;
LABEL_6:
  sub_22F0D492C((uint64_t)a2);
  v10 = v12;
  v4 = v14;
  v11 = v13;
  v5 = v15;
  v7 = *((_QWORD *)&v12 + 1);
  v6 = (uint64_t *)v12;
  if ((_QWORD)v12 != v14 || *((_QWORD *)&v12 + 1) != v15)
  {
    do
    {
      v9 = v6;
      if ((v7 & 3) != 0)
      {
        if ((v7 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v9 = (_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v9 = (_QWORD *)sub_22F3AC1A8(*v6);
      }
      if (*v9)
        sub_22E5FBAA0(a1);
      if ((v7 & 3) != 0)
      {
        if (v7 >= 4)
          sub_22F0D8720((uint64_t)&v10);
        else
          sub_22F3F2FE0((uint64_t)&v10, 1);
      }
      else
      {
        *(_QWORD *)&v10 = v6 + 1;
      }
      v7 = *((_QWORD *)&v10 + 1);
      v6 = (uint64_t *)v10;
    }
    while (v10 != __PAIR128__(v5, v4));
  }
}

uint64_t sub_22E5FBC78(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
  return a1;
}

uint64_t sub_22E5FBCAC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  if (a4)
    v9 = a4 + 40;
  else
    v9 = 0;
  v11 = sub_22EFC4364(a1, v9, a5, 0, a3, 5);
  v24 = *(_QWORD *)(v11 + 40);
  v25 = a5;
  sub_22EFC6D6C((uint64_t)&v26, v24);
  v22 = sub_22E3CD3D4(a1 + 2032, 32, 3);
  v23 = v11;
  sub_22EFF6AE4(v22, a1, 0, 0, 0, v11, 0, (uint64_t)&v24, 0, 0, a3, 1, 0, 0);
  v12 = sub_22EFC4364(a1, v9, a5, 0, a3, 5);
  v24 = *(_QWORD *)(v12 + 40);
  v25 = a5;
  sub_22EFC6D6C((uint64_t)&v26, v24);
  v13 = sub_22E3CD3D4(a1 + 2032, 32, 3);
  sub_22EFF6AE4(v13, a1, 0, 0, 0, v12, 0, (uint64_t)&v24, 0, 0, a3, 1, 0, 0);
  v14 = sub_22EF5BA38(a1, a3);
  v15 = sub_22EFC4364(a1, v9, a5, 0, v14, 5);
  v24 = *(_QWORD *)(v15 + 40);
  v25 = a5;
  sub_22EFC6D6C((uint64_t)&v26, v24);
  v16 = sub_22E3CD3D4(a1 + 2032, 32, 3);
  sub_22EFF6AE4(v16, a1, 0, 0, 0, v15, 0, (uint64_t)&v24, 0, 0, v14, 1, 0, 0);
  *(_BYTE *)(v12 + 96) &= 0x9Fu;
  v17 = (unsigned int *)sub_22E3CD3D4(a1 + 2032, 24, 3);
  sub_22F003694(v17, v14, 4, v16, 0, 0, 0);
  sub_22EFBC9E4(v12, (uint64_t)v17);
  v18 = *(unsigned int *)(a2 + 104);
  if (v18 >= *(_DWORD *)(a2 + 108))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    *(_QWORD *)(*(_QWORD *)(a2 + 96) + 8 * *(unsigned int *)(a2 + 104)) = v22;
    LODWORD(v18) = *(_DWORD *)(a2 + 104);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a2 + 96) + 8 * v18) = v22;
  }
  *(_DWORD *)(a2 + 104) = v18 + 1;
  v19 = *(unsigned int *)(a2 + 152);
  if (v19 >= *(_DWORD *)(a2 + 156))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    *(_QWORD *)(*(_QWORD *)(a2 + 144) + 8 * *(unsigned int *)(a2 + 152)) = v13;
    LODWORD(v19) = *(_DWORD *)(a2 + 152);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a2 + 144) + 8 * v19) = v13;
  }
  *(_DWORD *)(a2 + 152) = v19 + 1;
  v20 = *(unsigned int *)(a2 + 200);
  if (v20 >= *(_DWORD *)(a2 + 204))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    *(_QWORD *)(*(_QWORD *)(a2 + 192) + 8 * *(unsigned int *)(a2 + 200)) = v16;
    LODWORD(v20) = *(_DWORD *)(a2 + 200);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a2 + 192) + 8 * v20) = v16;
  }
  *(_DWORD *)(a2 + 200) = v20 + 1;
  return v23;
}

void sub_22E5FBFA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int *v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  _BYTE *v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int8 *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  const char **v52;
  uint64_t v53;
  unsigned int v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  unint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  llvm::Constant **v64;
  _QWORD *v65;
  uint64_t v66;
  llvm::Type *v67;
  uint64_t NullValue;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  llvm::Constant **v73;
  _QWORD *v74;
  uint64_t v75;
  const char **v76;
  uint64_t v77;
  unsigned int v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94[3];
  __int128 v95[3];
  _BYTE v96[7];
  __int128 v97;
  __int128 v98;
  _OWORD v99[8];
  uint64_t v100;
  __int128 v101[3];
  __int128 v102[3];
  _BYTE v103[7];
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  const char *v107;
  char v108;
  uint64_t v109;
  _OWORD v110[8];
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120[3];
  __int128 v121[3];
  const char *v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  char v126;
  _DWORD v127[19];
  _BYTE v128[64];
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  _BYTE v134[24];
  uint64_t v135;
  _BYTE v136[48];
  void *v137;
  uint64_t v138;
  _BYTE v139[32];
  void *v140[2];
  _BYTE v141[32];
  void *v142[2];
  _BYTE v143[32];
  void *v144[2];
  _BYTE v145[32];
  void *v146[2];
  _BYTE v147[32];
  void *v148;
  uint64_t v149;
  _BYTE v150[32];
  char *v151;
  uint64_t v152;
  _BYTE v153[32];
  void *v154[2];
  _QWORD v155[7];

  v155[4] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 2744);
  if (!v2)
    return;
  v5 = *(unsigned int **)(a2 + 24);
  if (v5)
  {
    v7 = *v5;
    v5 += 4;
    v6 = v7;
    v8 = (int *)&v5[2 * v7];
    if (v7)
    {
      v9 = 8 * v6;
      while (*(_DWORD *)(*(_QWORD *)v5 + 8) != 39)
      {
        v5 += 2;
        v9 -= 8;
        if (!v9)
        {
          v5 = (unsigned int *)v8;
          break;
        }
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v10 = v155;
  v154[0] = v155;
  v154[1] = (void *)0x400000000;
  v151 = v153;
  v152 = 0x400000000;
  v148 = v150;
  v149 = 0x400000000;
  v146[0] = v147;
  v146[1] = (void *)0x400000000;
  v144[0] = v145;
  v144[1] = (void *)0x400000000;
  v142[0] = v143;
  v142[1] = (void *)0x400000000;
  v140[0] = v141;
  v140[1] = (void *)0x400000000;
  v137 = v139;
  v138 = 0x400000000;
  v11 = *(unsigned int **)(v2 + 24);
  if (v11)
  {
    v14 = *v11;
    v12 = (uint64_t *)(v11 + 4);
    v13 = v14;
    if (v14)
    {
      v15 = 8 * v13;
      v16 = v12;
      while (*(_DWORD *)(*v16 + 8) != 66)
      {
        ++v16;
        v15 -= 8;
        if (!v15)
          goto LABEL_24;
      }
    }
    else
    {
      v16 = v12;
    }
    v17 = &v12[v13];
    if (v16 != v17)
    {
      v18 = *v16;
LABEL_18:
      if (*(_DWORD *)(v18 + 48) == 1)
      {
        v21 = v18 + 104;
        sub_22F2633B0((uint64_t)v154, (_BYTE *)(v18 + 104), (_BYTE *)(v18 + 104 + 8 * *(unsigned int *)(v18 + 16)));
        sub_22F2633B0((uint64_t)&v151, (_BYTE *)(v21 + 8 * *(unsigned int *)(v18 + 16)), (_BYTE *)(v21 + 8 * *(unsigned int *)(v18 + 16) + 8 * *(unsigned int *)(v18 + 16)));
        v22 = *(unsigned int *)(v18 + 16);
        sub_22F2633B0((uint64_t)&v148, (_BYTE *)(v21 + 8 * v22 + 8 * v22), (_BYTE *)(v21 + 8 * v22 + 8 * v22 + 8 * v22));
        v23 = *(unsigned int *)(v18 + 16);
        v24 = (_BYTE *)(v18 + 104 + 8 * v23 + 8 * v23 + 8 * v23);
        sub_22F2633B0((uint64_t)v146, v24, &v24[8 * v23]);
        v25 = *(unsigned int *)(v18 + 16);
        v26 = (_BYTE *)(v18 + 104 + 8 * v25 + 8 * v25 + 8 * v25 + 8 * v25);
        sub_22F2633B0((uint64_t)v144, v26, &v26[8 * v25]);
        v27 = *(unsigned int *)(v18 + 16);
        v28 = (_BYTE *)(v18 + 104 + 8 * v27 + 8 * v27 + 8 * v27 + 8 * v27 + 8 * v27);
        sub_22F2633B0((uint64_t)v142, v28, &v28[8 * v27]);
        v29 = *(unsigned int *)(v18 + 16);
        v30 = (_BYTE *)(v18 + 104 + 8 * v29 + 8 * v29 + 8 * v29 + 8 * v29 + 8 * v29 + 8 * v29);
        sub_22F2633B0((uint64_t)v140, v30, &v30[8 * v29]);
        v31 = *(unsigned int *)(v18 + 16);
        v32 = (_BYTE *)(v18 + 104 + 8 * v31 + 8 * v31 + 8 * v31 + 8 * v31 + 8 * v31 + 8 * v31 + 8 * v31);
        sub_22F2633B0((uint64_t)&v137, v32, &v32[8 * v31]);
      }
      v19 = v16 + 1;
      while (v19 != v17)
      {
        v20 = *v19++;
        v18 = v20;
        if (*(_DWORD *)(v20 + 8) == 66)
        {
          v16 = v19 - 1;
          goto LABEL_18;
        }
      }
    }
  }
LABEL_24:
  v33 = *(_DWORD *)(v2 + 8);
  if (v33 == 54 || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 76) & 2) != 0 && sub_22F421AC0(v33))
  {
    *(_QWORD *)v128 = "omp.inscan.reduce";
    *(_WORD *)&v128[32] = 259;
    v34 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    sub_22E5EDA70(a1);
    sub_22E5ED9B4((_QWORD *)a1, *(_QWORD **)(a1 + 2776), 0);
    sub_22F0D4E74(a2);
    sub_22E4889F4((uint64_t)&v135, a1, v35);
    sub_22E5EDA70(a1);
    sub_22E5ED9B4((_QWORD *)a1, v34, 0);
    if (v5 == (unsigned int *)v8 && (_DWORD)v138)
    {
      v36 = 0;
      v90 = 8 * v138;
      do
      {
        v37 = *(_QWORD *)&v151[v36];
        sub_22F2596F0((_QWORD *)a1, *(_QWORD *)(*(_QWORD *)((char *)v140[0] + v36) + 16));
        sub_22E4D8D7C(v128);
        sub_22E4D8D7C(&v122);
        v38 = *(_QWORD *)(v37 + 8);
        v121[0] = *(_OWORD *)&v128[8];
        v121[1] = *(_OWORD *)&v128[24];
        v121[2] = *(_OWORD *)&v128[40];
        v120[0] = v123;
        v120[1] = v124;
        v120[2] = v125;
        sub_22E5F21E0(a1, v38, v121, v120, *(_QWORD *)(*(_QWORD *)((char *)v148 + v36) + 16), *(_QWORD *)(*(_QWORD *)((char *)v146[0] + v36) + 16), *(_BYTE **)((char *)v142[0] + v36));
        v36 += 8;
      }
      while (v90 != v36);
    }
    (*(void (**)(_QWORD, uint64_t, _QWORD, char *, _QWORD, void *, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 144)
                                                                                                  + 808)
                                                                                    + 368))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808), a1, *(unsigned int *)(v2 + 16), v151, v152, v148, v149);
    if ((_DWORD)v138)
    {
      v39 = 0;
      v40 = 8 * v138;
      do
      {
        v41 = *(_QWORD *)&v151[v39];
        sub_22E4D8D7C(v128);
        v42 = *(_QWORD *)&v128[24];
        v43 = *(_QWORD *)&v128[32];
        v88 = *(_OWORD *)&v128[40];
        v91 = *(_OWORD *)&v128[8];
        sub_22E4D8D7C(v128);
        v44 = *(_QWORD *)(v41 + 8);
        v115 = *(_OWORD *)&v128[40];
        v116 = v91;
        v117 = v42;
        v118 = v43;
        v119 = v88;
        v112 = *(_OWORD *)&v128[8];
        v113 = *(_QWORD *)&v128[24];
        v114 = *(_QWORD *)&v128[32];
        sub_22E5F21E0(a1, v44, &v116, &v112, *(_QWORD *)(*(_QWORD *)((char *)v148 + v39) + 16), *(_QWORD *)(*(_QWORD *)((char *)v146[0] + v39) + 16), *(_BYTE **)((char *)v142[0] + v39));
        v39 += 8;
      }
      while (v40 != v39);
    }
    sub_22E488B4C((uint64_t)&v135);
    sub_22E5EDA70(a1);
    if (v5 != (unsigned int *)v8)
      v34 = *(_QWORD **)(*(_QWORD *)(a1 + 3040) + 48 * *(unsigned int *)(a1 + 3048) - 24);
    *(_QWORD *)(a1 + 2768) = v34;
    sub_22E5ED9B4((_QWORD *)a1, *(_QWORD **)(a1 + 2760), 0);
    v10 = v155;
    goto LABEL_44;
  }
  if (v5 == (unsigned int *)v8)
  {
    sub_22E5EDA70(a1);
    sub_22E5ED9B4((_QWORD *)a1, *(_QWORD **)(a1 + 2768), 0);
  }
  if (*(_BYTE *)(a1 + 2784))
  {
    v45 = sub_22EFFA6B0(*(unsigned __int8 **)(*(_QWORD *)(v2 + 24) + 8 * **(unsigned int **)(v2 + 24) + 16));
    sub_22E4D8D7C(v128);
    v110[6] = v131;
    v110[7] = v132;
    v111 = v133;
    v110[2] = *(_OWORD *)&v128[32];
    v110[3] = *(_OWORD *)&v128[48];
    v110[4] = v129;
    v110[5] = v130;
    v110[0] = *(_OWORD *)v128;
    v110[1] = *(_OWORD *)&v128[16];
    sub_22EFF605C((uint64_t)v45);
    v47 = sub_22F25F748(a1, (uint64_t)v110, v46);
    v48 = *(_QWORD *)(a1 + 88);
    WORD4(v124) = 257;
    v87 = sub_22E3BF45C((uint64_t *)(a1 + 272), v47, v48, 0, (uint64_t)&v122);
    if ((_DWORD)v138)
    {
      v49 = 0;
      v84 = 8 * v138;
      while (1)
      {
        v50 = v10;
        v51 = *(_QWORD *)((char *)v137 + v49);
        v52 = (const char **)(v51 + 24);
        v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v51 + 24) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v54 = *(_DWORD *)(v53 + 16);
        v55 = v53 && v54 == 11;
        v89 = *(_QWORD *)&v151[v49];
        v92 = *(_QWORD *)((char *)v137 + v49);
        if (v55)
          break;
        if (v53 && v54 == 44)
        {
          v56 = sub_22F114198(*(_QWORD *)(v53 + 24));
          if ((*(_BYTE *)(v56 + 74) & 1) == 0 && *(_QWORD *)(v56 + 128) <= 7uLL)
          {
            v52 = (const char **)(v92 + 16);
            v10 = v50;
            goto LABEL_79;
          }
          v57 = sub_22F114198(*(_QWORD *)(v53 + 24));
          v10 = v50;
          v51 = v92;
          if ((*(_QWORD *)(v57 + 72) & 0x8000000000) == 0)
            goto LABEL_79;
          goto LABEL_78;
        }
        v10 = v50;
        if (v54 != 9)
          goto LABEL_78;
LABEL_79:
        v58 = *v52;
        v106 = a1;
        v122 = v58;
        v123 = (unint64_t)v87;
        v124 = v104;
        v125 = v105;
        v126 = 0;
        v127[0] = *(_DWORD *)v103;
        *(_DWORD *)((char *)v127 + 3) = *(_DWORD *)&v103[3];
        sub_22F25406C(a1 + 4088, &v122, &v123, (uint64_t)v134);
        v107 = v58;
        v108 = 0;
        v135 = v87;
        *(_QWORD *)v136 = 0;
        *(_OWORD *)&v136[8] = v104;
        *(_OWORD *)&v136[24] = v105;
        v136[40] = 0;
        *(_DWORD *)&v136[41] = *(_DWORD *)v103;
        *(_DWORD *)&v136[44] = *(_DWORD *)&v103[3];
        v109 = sub_22F297CB8(a1, &v135);
        sub_22E4D8D7C(&v122);
        sub_22E4D8D7C(&v135);
        v59 = *(_QWORD *)(v89 + 8);
        v102[0] = v123;
        v102[1] = v124;
        v102[2] = v125;
        v101[0] = *(_OWORD *)v136;
        v101[1] = *(_OWORD *)&v136[16];
        v101[2] = *(_OWORD *)&v136[32];
        sub_22E5F21E0(a1, v59, v102, v101, *(_QWORD *)(*(_QWORD *)((char *)v148 + v49) + 16), *(_QWORD *)(*(_QWORD *)((char *)v146[0] + v49) + 16), *(_BYTE **)((char *)v142[0] + v49));
        if (v107)
          sub_22F254324((uint64_t)&v107, v106);
        v49 += 8;
        if (v84 == v49)
          goto LABEL_30;
      }
      v10 = v50;
      if (((v54 >> 19) & 0x1FE) - 166 < 0x14)
        goto LABEL_79;
LABEL_78:
      v52 = (const char **)(v51 + 16);
      goto LABEL_79;
    }
  }
LABEL_30:
  sub_22E5EDA70(a1);
  if (v5 != (unsigned int *)v8)
  {
    sub_22E5ED9B4((_QWORD *)a1, *(_QWORD **)(a1 + 2768), 0);
    sub_22E5EDA70(a1);
  }
  sub_22E5ED9B4((_QWORD *)a1, *(_QWORD **)(a1 + 2776), 0);
  if (!*(_BYTE *)(a1 + 2784))
  {
    v60 = sub_22EFFA6B0(*(unsigned __int8 **)(*(_QWORD *)(v2 + 24) + 8 * **(unsigned int **)(v2 + 24) + 16));
    sub_22E4D8D7C(v128);
    v99[6] = v131;
    v99[7] = v132;
    v100 = v133;
    v99[2] = *(_OWORD *)&v128[32];
    v99[3] = *(_OWORD *)&v128[48];
    v99[4] = v129;
    v99[5] = v130;
    v99[0] = *(_OWORD *)v128;
    v99[1] = *(_OWORD *)&v128[16];
    sub_22EFF605C((uint64_t)v60);
    v62 = sub_22F25F748(a1, (uint64_t)v99, v61);
    v63 = *(_QWORD *)(a1 + 88);
    WORD4(v124) = 257;
    v64 = (llvm::Constant **)sub_22E3BF45C((uint64_t *)(a1 + 272), v62, v63, 0, (uint64_t)&v122);
    if (v5 == (unsigned int *)v8)
    {
      v122 = "omp.exclusive.dec";
      WORD4(v124) = 259;
      v65 = (_QWORD *)operator new();
      llvm::BasicBlock::BasicBlock();
      v122 = "omp.exclusive.copy.exit";
      WORD4(v124) = 259;
      v66 = operator new();
      llvm::BasicBlock::BasicBlock();
      WORD4(v124) = 257;
      NullValue = llvm::Constant::getNullValue(*v64, v67);
      v69 = sub_22E3C18F4(a1 + 272, 32, (uint64_t *)v64, NullValue, (uint64_t)&v122);
      v70 = llvm::User::operator new((llvm::User *)0x40);
      v85 = (_QWORD *)v66;
      MEMORY[0x23489C09C](v70, v66, v65, v69, 0);
      WORD4(v124) = 257;
      sub_22E3C12C8((uint64_t *)(a1 + 272), v70, (uint64_t)&v122);
      sub_22E5ED9B4((_QWORD *)a1, v65, 0);
      v71 = llvm::ConstantInt::get();
      WORD4(v124) = 257;
      v64 = (llvm::Constant **)sub_22E3E48CC(a1 + 272, (uint64_t)v64, v71, (uint64_t)&v122, 1, 0);
    }
    else
    {
      v85 = 0;
    }
    if (!(_DWORD)v138)
    {
LABEL_108:
      if (v5 == (unsigned int *)v8)
        sub_22E5ED9B4((_QWORD *)a1, v85, 0);
      goto LABEL_33;
    }
    v72 = 0;
    v86 = 8 * v138;
    while (1)
    {
      v73 = v64;
      v74 = v10;
      v75 = *(_QWORD *)((char *)v137 + v72);
      v76 = (const char **)(v75 + 24);
      v77 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v75 + 24) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v78 = *(_DWORD *)(v77 + 16);
      v79 = v77 && v78 == 11;
      v93 = *(_QWORD *)&v151[v72];
      if (v79)
        break;
      if (v77 && v78 == 44)
      {
        v80 = sub_22F114198(*(_QWORD *)(v77 + 24));
        if ((*(_BYTE *)(v80 + 74) & 1) == 0 && *(_QWORD *)(v80 + 128) <= 7uLL)
        {
          v76 = (const char **)(v75 + 16);
          v10 = v74;
          goto LABEL_103;
        }
        v81 = sub_22F114198(*(_QWORD *)(v77 + 24));
        v10 = v74;
        if ((*(_QWORD *)(v81 + 72) & 0x8000000000) == 0)
          goto LABEL_103;
        goto LABEL_102;
      }
      v10 = v74;
      if (v78 != 9)
        goto LABEL_102;
LABEL_103:
      v64 = v73;
      v82 = *v76;
      v106 = a1;
      v122 = v82;
      v123 = (unint64_t)v73;
      v124 = v97;
      v125 = v98;
      v126 = 0;
      v127[0] = *(_DWORD *)v96;
      *(_DWORD *)((char *)v127 + 3) = *(_DWORD *)&v96[3];
      sub_22F25406C(a1 + 4088, &v122, &v123, (uint64_t)v134);
      v107 = v82;
      v108 = 0;
      v135 = (uint64_t)v73;
      *(_QWORD *)v136 = 0;
      *(_OWORD *)&v136[8] = v97;
      *(_OWORD *)&v136[24] = v98;
      v136[40] = 0;
      *(_DWORD *)&v136[41] = *(_DWORD *)v96;
      *(_DWORD *)&v136[44] = *(_DWORD *)&v96[3];
      v109 = sub_22F297CB8(a1, &v135);
      sub_22E4D8D7C(&v122);
      sub_22E4D8D7C(&v135);
      v83 = *(_QWORD *)(v93 + 8);
      v95[0] = *(_OWORD *)v136;
      v95[1] = *(_OWORD *)&v136[16];
      v95[2] = *(_OWORD *)&v136[32];
      v94[0] = v123;
      v94[1] = v124;
      v94[2] = v125;
      sub_22E5F21E0(a1, v83, v95, v94, *(_QWORD *)(*(_QWORD *)((char *)v148 + v72) + 16), *(_QWORD *)(*(_QWORD *)((char *)v146[0] + v72) + 16), *(_BYTE **)((char *)v142[0] + v72));
      if (v107)
        sub_22F254324((uint64_t)&v107, v106);
      v72 += 8;
      if (v86 == v72)
        goto LABEL_108;
    }
    v10 = v74;
    if (((v78 >> 19) & 0x1FE) - 166 < 0x14)
      goto LABEL_103;
LABEL_102:
    v76 = (const char **)(v75 + 16);
    goto LABEL_103;
  }
LABEL_33:
  sub_22E5EDA70(a1);
  sub_22E5ED9B4((_QWORD *)a1, *(_QWORD **)(a1 + 2760), 0);
LABEL_44:
  if (v137 != v139)
    free(v137);
  if (v140[0] != v141)
    free(v140[0]);
  if (v142[0] != v143)
    free(v142[0]);
  if (v144[0] != v145)
    free(v144[0]);
  if (v146[0] != v147)
    free(v146[0]);
  if (v148 != v150)
    free(v148);
  if (v151 != v153)
    free(v151);
  if (v154[0] != v10)
    free(v154[0]);
}

uint64_t sub_22E5FCF20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t result;
  __n128 v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  __n128 v28;
  unsigned int v29;
  unsigned int *v30;
  _DWORD *v31;
  uint64_t v32;
  unsigned int v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  llvm::Value *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  _BOOL4 v44;
  llvm::Value *v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  llvm::Constant **v53;
  llvm::Type *v54;
  uint64_t NullValue;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _OWORD v59[8];
  uint64_t v60;
  _BYTE v61[200];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _QWORD v65[4];
  _QWORD *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  BOOL v70;
  _QWORD v71[3];
  uint64_t v72;
  _QWORD v73[3];
  unsigned int v74;
  llvm::Value *v75;
  _QWORD v76[3];
  char v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  _QWORD v83[2];
  int v84;
  _BYTE v85[64];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  char v103;
  _QWORD v104[3];
  char v105;
  char v106;
  uint64_t v107;

  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 16);
  sub_22E4C652C((_QWORD *)a1, *(_QWORD *)(v8 + 16));
  v9 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 24);
  if (*v9 == 161)
  {
    sub_22E4C652C((_QWORD *)a1, *((_QWORD *)v9 + 2));
    sub_22E4D89CC(a1);
  }
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
  sub_22E5F9AA8((uint64_t)v104, a1, (unsigned __int8 *)a2);
  v103 = 0;
  result = sub_22E61F3B0(a1, *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 40), &v103, 0);
  if ((_DWORD)result)
  {
    if (!v103)
      goto LABEL_5;
    v57 = a3;
    v58 = 0;
  }
  else
  {
    v57 = a3;
    v14 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)v61 = "omp.precond.end";
    *(_WORD *)&v61[32] = 259;
    v15 = operator new();
    llvm::BasicBlock::BasicBlock();
    v16 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 40);
    v17 = sub_22E3CF180(a1 + 3904, a2);
    if (v18)
      v19 = v17;
    else
      v19 = 0;
    v58 = (_QWORD *)v15;
    sub_22E5F9FF4(a1, a2, v16, (uint64_t)v14, v15, v19);
    sub_22E5ED9B4((_QWORD *)a1, v14, 0);
    sub_22E3CB7B0((_QWORD *)a1, a2, 0);
  }
  sub_22E5FA32C(a1, *(unsigned int **)(a2 + 24), v12);
  v20 = sub_22F421B7C(*(_DWORD *)(a2 + 8));
  v21 = 72;
  if (v20)
    v21 = 160;
  sub_22E4C652C((_QWORD *)a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + v21 + 16) + 16));
  sub_22E4D8D7C(&v99);
  v22 = sub_22F421B7C(*(_DWORD *)(a2 + 8));
  v23 = 80;
  if (v22)
    v23 = 168;
  sub_22E4C652C((_QWORD *)a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + v23 + 16) + 16));
  sub_22E4D8D7C(&v95);
  sub_22E4C652C((_QWORD *)a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 104) + 16));
  sub_22E4D8D7C(&v91);
  sub_22E4C652C((_QWORD *)a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 80) + 16));
  sub_22E4D8D7C(v85);
  v78 = 1;
  v24 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
  v76[2] = *(_QWORD *)(a1 + 2312);
  v77 = *(_BYTE *)(a1 + 2893);
  *(_BYTE *)(a1 + 2893) = 0;
  v25 = *(_QWORD *)(a1 + 2872);
  v76[0] = v24;
  v76[1] = v25;
  *(_QWORD *)(a1 + 2872) = v24;
  v81 = 0;
  v79 = a1;
  v80 = 0;
  v82 = 0;
  v83[1] = 0;
  v83[0] = 0;
  v84 = 0;
  if (sub_22E5F2534(a1, a2, (uint64_t)v76))
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144)
                                                                                            + 808)
                                                                              + 184))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808), a1, *(unsigned int *)(a2 + 12), 89, 0, 1);
  sub_22E5F310C(a1, *(unsigned int **)(a2 + 24), (uint64_t)v76);
  v26 = *(_DWORD *)(a2 + 8);
  if (sub_22F421AC0(v26)
    && !sub_22F421A78(v26)
    && ((v26 - 66) > 0x21 || ((1 << (v26 - 66)) & 0x3001CC073) == 0))
  {
    sub_22E5F4508();
  }
  v27 = sub_22E5F386C(a1, a2, (uint64_t)v76);
  sub_22F28E264(a1, a2, (uint64_t)v76);
  sub_22E5BC320((uint64_t)v83, v79 + 2904);
  sub_22F2840EC((uint64_t)v83);
  v29 = *(_DWORD *)(a2 + 8) - 56;
  if (v29 <= 0x2A && ((1 << v29) & 0x6000001CF91) != 0)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 808) + 592))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808), a1, a2);
  v75 = 0;
  v74 = 1;
  v30 = *(unsigned int **)(a2 + 24);
  if (!v30)
    goto LABEL_36;
  v33 = *v30;
  v31 = v30 + 4;
  v32 = v33;
  if (v33)
  {
    v41 = 8 * v32;
    v34 = v31;
    while (*(_DWORD *)(*(_QWORD *)v34 + 8) != 24)
    {
      v34 += 2;
      v41 -= 8;
      if (!v41)
        goto LABEL_36;
    }
  }
  else
  {
    v34 = v31;
  }
  if (v34 != &v31[2 * v32] && (v35 = *(_QWORD *)v34) != 0)
  {
    v74 = *(_DWORD *)(v35 + 32);
    v36 = *(_QWORD *)(v35 + 48);
    if (v36)
    {
      *(_QWORD *)v61 = a1;
      *(_QWORD *)&v61[8] = a1 + 272;
      v61[16] = 0;
      *(_QWORD *)&v61[24] = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
      v37 = (llvm::Value *)sub_22E50E974(v61, v36, v28);
      v38 = *(_QWORD *)(v36 + 8);
      v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 16) + 8);
      v40 = *(_DWORD *)(a2 + 12);
      *(_QWORD *)v61 = a1;
      *(_QWORD *)&v61[8] = a1 + 272;
      v61[16] = 0;
      *(_QWORD *)&v61[24] = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
      v75 = sub_22E50EA80((uint64_t *)v61, v37, v38, v39, v40, 0);
    }
  }
  else
  {
LABEL_36:
    (*(void (**)(_QWORD, uint64_t, uint64_t, unsigned int *, llvm::Value **))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 808)
                                                                                     + 552))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808), a1, a2, &v74, &v75);
  }
  v42 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0));
  v43 = sub_22F110B20(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0));
  if ((*(unsigned int (**)(uint64_t, _QWORD, BOOL))(*(_QWORD *)v10 + 216))(v10, v74, v75 != 0))
    v44 = sub_22F421B7C(*(_DWORD *)(a2 + 8));
  else
    v44 = 0;
  if (((*(uint64_t (**)(uint64_t, _QWORD, BOOL))(*(_QWORD *)v10 + 200))(v10, v74, v75 != 0) & 1) != 0
    || v44)
  {
    *(_OWORD *)&v61[8] = *(_OWORD *)&v85[8];
    *(_OWORD *)&v61[24] = *(_OWORD *)&v85[24];
    *(_OWORD *)&v61[40] = *(_OWORD *)&v85[40];
    *(_OWORD *)&v61[56] = v100;
    *(_OWORD *)&v61[72] = v101;
    *(_OWORD *)&v61[88] = v102;
    *(_OWORD *)&v61[136] = v98;
    *(_OWORD *)&v61[120] = v97;
    *(_OWORD *)&v61[104] = v96;
    *(_OWORD *)&v61[152] = v92;
    *(_OWORD *)&v61[168] = v93;
    *(_OWORD *)&v61[184] = v94;
    v45 = v75;
    if (!v44)
      v45 = 0;
    *(_DWORD *)v61 = v42;
    *(_WORD *)&v61[4] = v43;
    *(_QWORD *)&v62 = v45;
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _BYTE *))(*(_QWORD *)v10 + 248))(v10, a1, *(unsigned int *)(a2 + 12), v74, v61);
    v65[0] = "omp.loop.exit";
    LOWORD(v66) = 259;
    v46 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v47 = *(_QWORD *)(a1 + 2008);
    v48 = *(_DWORD *)(a1 + 2640);
    *(_DWORD *)(a1 + 2640) = v48 + 1;
    sub_22F421B7C(*(_DWORD *)(a2 + 8));
    sub_22E4D89CC(a1);
    sub_22F421B7C(*(_DWORD *)(a2 + 8));
    sub_22E4D89CC(a1);
    v49 = sub_22F421B7C(*(_DWORD *)(a2 + 8));
    v50 = 4;
    if (v49)
      v50 = 24;
    if (v44)
      v50 = 27;
    v51 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 8 * v50 + 16);
    v72 = a2;
    v73[0] = &v72;
    v73[1] = sub_22E6089B0;
    v73[2] = 0;
    v65[0] = a2;
    v65[1] = v76;
    v65[2] = v51;
    v65[3] = a4;
    v66 = v46;
    v67 = v47;
    v68 = v48;
    v69 = v57;
    v70 = v44;
    v71[0] = v65;
    v71[1] = sub_22E6089F0;
    v71[2] = 0;
    sub_22E5F8828((_QWORD *)a1, a2, (uint64_t)v73, (uint64_t)v71);
    sub_22E5ED9B4((_QWORD *)a1, v46, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 264))(v10, a1, *(unsigned int *)(a2 + 16), *(unsigned int *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v61 = v100;
    *(_OWORD *)&v61[16] = v101;
    *(_OWORD *)&v61[32] = v102;
    *(_OWORD *)&v61[48] = v96;
    *(_OWORD *)&v61[64] = v97;
    *(_OWORD *)&v61[80] = v98;
    *(_OWORD *)&v61[96] = v92;
    *(_OWORD *)&v61[112] = v93;
    *(_OWORD *)&v61[160] = *(_OWORD *)&v85[24];
    *(_OWORD *)&v61[176] = *(_OWORD *)&v85[40];
    *(_OWORD *)&v61[128] = v94;
    *(_OWORD *)&v61[144] = *(_OWORD *)&v85[8];
    *(_QWORD *)&v61[192] = v75;
    v64 = 0u;
    v63 = 0u;
    v62 = 0u;
    sub_22F28EF90(a1, v74, a2, v76, (__int128 *)v61, v57);
  }
  v52 = *(_DWORD *)(a2 + 8);
  if (sub_22F421AC0(v52))
  {
    *(_OWORD *)&v61[96] = v88;
    *(_OWORD *)&v61[112] = v89;
    *(_OWORD *)&v61[32] = *(_OWORD *)&v85[32];
    *(_OWORD *)&v61[48] = *(_OWORD *)&v85[48];
    *(_OWORD *)&v61[64] = v86;
    *(_OWORD *)&v61[80] = v87;
    *(_OWORD *)v61 = *(_OWORD *)v85;
    *(_OWORD *)&v61[16] = *(_OWORD *)&v85[16];
    *(_QWORD *)&v61[128] = v90;
    *(_QWORD *)&v61[136] = a2;
    sub_22E5F7BC8(a1, a2, sub_22E608B5C, (uint64_t)v61);
    v52 = *(_DWORD *)(a2 + 8);
  }
  if (!sub_22F421AC0(v52)
    || sub_22F421A78(v52)
    || (v52 - 66) <= 0x21 && ((1 << (v52 - 66)) & 0x3001CC073) != 0)
  {
    if (!v27)
      goto LABEL_58;
    goto LABEL_57;
  }
  sub_22E5F523C(a1, a2);
  *(_OWORD *)&v61[96] = v88;
  *(_OWORD *)&v61[112] = v89;
  *(_OWORD *)&v61[32] = *(_OWORD *)&v85[32];
  *(_OWORD *)&v61[48] = *(_OWORD *)&v85[48];
  *(_OWORD *)&v61[64] = v86;
  *(_OWORD *)&v61[80] = v87;
  *(_OWORD *)v61 = *(_OWORD *)v85;
  *(_OWORD *)&v61[16] = *(_OWORD *)&v85[16];
  *(_QWORD *)&v61[128] = v90;
  *(_QWORD *)&v61[136] = a2;
  sub_22E5F6264(a1, a2, (uint64_t (*)(uint64_t, _QWORD *))sub_22E608BEC, (uint64_t)v61);
  if (v27)
  {
LABEL_57:
    v59[6] = v88;
    v59[7] = v89;
    v60 = v90;
    v59[2] = *(_OWORD *)&v85[32];
    v59[3] = *(_OWORD *)&v85[48];
    v59[4] = v86;
    v59[5] = v87;
    v59[0] = *(_OWORD *)v85;
    v59[1] = *(_OWORD *)&v85[16];
    v53 = (llvm::Constant **)sub_22F25F748(a1, (uint64_t)v59, *(_DWORD *)(a2 + 12));
    *(_WORD *)&v61[32] = 257;
    NullValue = llvm::Constant::getNullValue(*v53, v54);
    v56 = sub_22E3C18F4(a1 + 272, 33, (uint64_t *)v53, NullValue, (uint64_t)v61);
    sub_22E5F3CC4(a1, (unsigned __int8 *)a2, 0, v56);
  }
LABEL_58:
  result = sub_22F283FC4((uint64_t)v76);
  if (v58)
  {
    sub_22E5EDA70(a1);
    result = sub_22E5ED9B4((_QWORD *)a1, v58, 1);
  }
LABEL_5:
  if (v106)
  {
    v13 = v107;
    *(_BYTE *)(v107 + 2893) = v105;
    result = sub_22E48B274(v13, v104[0], v104[2], 0, 0);
    *(_QWORD *)(v107 + 2872) = v104[1];
  }
  return result;
}

uint64_t sub_22E5FD990(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, int a5)
{
  unint64_t v10;
  uint64_t result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  llvm::Constant **v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _OWORD v24[3];
  uint64_t v25;
  _OWORD v26[8];
  uint64_t v27;
  _OWORD v28[3];
  uint64_t v29;
  _QWORD v30[6];
  char v31;
  _OWORD v32[8];
  uint64_t v33;
  uint64_t v34[2];
  __int16 v35;

  v10 = *(_QWORD *)(a2 + 64);
  result = sub_22E619D68(v10);
  if ((_DWORD)result == 1)
  {
    v17 = *(_OWORD *)(a3 + 16);
    v24[0] = *(_OWORD *)a3;
    v24[1] = v17;
    v24[2] = *(_OWORD *)(a3 + 32);
    v25 = *(_QWORD *)(a3 + 48);
    v18 = sub_22E5FDB84(a1, (uint64_t)v24, a4, v10, a5);
    v19 = *(_OWORD *)(a2 + 112);
    v32[6] = *(_OWORD *)(a2 + 96);
    v32[7] = v19;
    v33 = *(_QWORD *)(a2 + 128);
    v34[0] = a1;
    v20 = *(_OWORD *)(a2 + 48);
    v32[2] = *(_OWORD *)(a2 + 32);
    v32[3] = v20;
    v21 = *(_OWORD *)(a2 + 80);
    v32[4] = *(_OWORD *)(a2 + 64);
    v32[5] = v21;
    v22 = *(_OWORD *)(a2 + 16);
    v32[0] = *(_OWORD *)a2;
    v32[1] = v22;
    v34[1] = a1 + 272;
    v35 = 0;
    return sub_22E5025C8(v34, (uint64_t)v18, v23, (uint64_t)v32, 0);
  }
  else if (!(_DWORD)result)
  {
    v12 = *(_OWORD *)(a3 + 16);
    v28[0] = *(_OWORD *)a3;
    v28[1] = v12;
    v28[2] = *(_OWORD *)(a3 + 32);
    v29 = *(_QWORD *)(a3 + 48);
    v30[0] = sub_22E5FDAF0(a1, (uint64_t)v28, a4, v10, a5);
    v30[1] = 0;
    v31 = 0;
    v13 = *(_OWORD *)(a2 + 112);
    v26[6] = *(_OWORD *)(a2 + 96);
    v26[7] = v13;
    v27 = *(_QWORD *)(a2 + 128);
    v14 = *(_OWORD *)(a2 + 48);
    v26[2] = *(_OWORD *)(a2 + 32);
    v26[3] = v14;
    v15 = *(_OWORD *)(a2 + 80);
    v26[4] = *(_OWORD *)(a2 + 64);
    v26[5] = v15;
    v16 = *(_OWORD *)(a2 + 16);
    v26[0] = *(_OWORD *)a2;
    v26[1] = v16;
    return sub_22E4DAAE0(a1, v30, v26, 0, *(double *)&v16);
  }
  return result;
}

llvm::Value *sub_22E5FDAF0(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, int a5)
{
  llvm::Value *v7;
  llvm::Value *v8;
  llvm::Value *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  if ((*(_BYTE *)(a2 + 48) & 6) != 0)
  {
    v8 = *(llvm::Value **)a2;
    v7 = *(llvm::Value **)(a2 + 8);
    v11 = a1;
    v12 = a1 + 272;
    v13 = 0;
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
    return sub_22E50FC50(&v11, v8, v7, a3, a4, a5);
  }
  else
  {
    v10 = *(llvm::Value **)a2;
    v11 = a1;
    v12 = a1 + 272;
    v13 = 0;
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
    return sub_22E50EA80(&v11, v10, a3, a4, a5, 0);
  }
}

llvm::Constant **sub_22E5FDB84(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  llvm::Value *v16;
  int v17;
  llvm::Constant **v18;
  llvm::Value *v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  llvm::Value *v23;
  llvm::Type *v24;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  if ((*(_BYTE *)(a2 + 48) & 6) != 0)
  {
    v10 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
    if (v10)
      v11 = *(_BYTE *)(v10 + 16) == 12;
    else
      v11 = 0;
    if (!v11)
      v10 = sub_22F10CF48(v10);
    v12 = *(_QWORD *)(v10 + 32);
    v13 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
    if (v13)
      v14 = *(_BYTE *)(v13 + 16) == 12;
    else
      v14 = 0;
    if (!v14)
      v13 = sub_22F10CF48(v13);
    v15 = *(_QWORD *)(v13 + 32);
    v16 = *(llvm::Value **)a2;
    v17 = a5;
    v26 = a1;
    v27 = a1 + 272;
    v28 = 0;
    v29 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
    v18 = (llvm::Constant **)sub_22E50EA80(&v26, v16, v12, v15, a5, 0);
    v19 = *(llvm::Value **)(a2 + 8);
    v26 = a1;
    v27 = a1 + 272;
    v28 = 0;
    v29 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
    sub_22E50EA80(&v26, v19, v12, v15, v17, 0);
  }
  else
  {
    v20 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
    if (v20)
      v21 = *(_BYTE *)(v20 + 16) == 12;
    else
      v21 = 0;
    if (!v21)
      v20 = sub_22F10CF48(v20);
    v22 = *(_QWORD *)(v20 + 32);
    v23 = *(llvm::Value **)a2;
    v26 = a1;
    v27 = a1 + 272;
    v28 = 0;
    v29 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
    v18 = (llvm::Constant **)sub_22E50EA80(&v26, v23, a3, v22, a5, 0);
    llvm::Constant::getNullValue(*v18, v24);
  }
  return v18;
}

uint64_t sub_22E5FDCF0@<X0>(_QWORD *a1@<X0>, int *a2@<X1>, _BYTE *a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X8>, void (*a9)(_QWORD *__return_ptr, uint64_t, _OWORD *), uint64_t a10)
{
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t result;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  _BOOL4 v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t *v51;
  _BOOL8 v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  _OWORD v62[8];
  uint64_t v63;
  _OWORD v64[8];
  uint64_t v65;
  _OWORD v66[8];
  uint64_t v67;
  _OWORD v68[3];
  uint64_t v69;
  _QWORD v70[7];
  _QWORD v71[2];
  _OWORD v72[2];
  __int128 v73;
  uint64_t v74;
  _QWORD v75[3];
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  v71[0] = a9;
  v71[1] = a10;
  v14 = *a2;
  v15 = *((_QWORD *)a2 + 1);
  v16 = *((_QWORD *)a2 + 2);
  v17 = *((_QWORD *)a2 + 3);
  v18 = *((_OWORD *)a2 + 3);
  v78 = *((_OWORD *)a2 + 2);
  v79 = v18;
  if (a4 == 32 || (a3[48] & 6) != 0)
    goto LABEL_13;
  v19 = **(_QWORD **)a3;
  if (*(_BYTE *)(v19 + 8) != 13 || v14 != 0)
    goto LABEL_13;
  v23 = *((_QWORD *)a2 + 8);
  v24 = *(_QWORD *)(a1[18] + 144);
  if (*(_BYTE *)(*(_QWORD *)a3 + 16) != 16 && v19 != v16)
    goto LABEL_13;
  if (*(_BYTE *)(v16 + 8) != 13)
    goto LABEL_13;
  v56 = *(_QWORD *)(v24 + 15088);
  v57 = *(uint64_t **)a3;
  v54 = (uint64_t *)(v23 & 0xFFFFFFFFFFFFFFF0);
  v60 = a6;
  v61 = v17;
  v58 = *((_QWORD *)a2 + 8);
  v59 = v15;
  v55 = sub_22EF5CDF0(v24, *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0));
  v25 = sub_22EF5CDF0(v24, *(_QWORD *)(*(_QWORD *)(v24 + 16408) & 0xFFFFFFFFFFFFFFF0));
  v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v56 + 216))(v56, v55, v25 * v61);
  v27 = v58;
  v28 = v59;
  v29 = v61;
  v30 = v57;
  a6 = v60;
  if (v26)
  {
    v31 = 0;
    switch(a4)
    {
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 19:
      case 20:
        goto LABEL_13;
      case 5:
        v31 = 1;
        break;
      case 6:
        if ((a5 & 1) == 0)
          goto LABEL_13;
        v31 = 2;
        break;
      case 10:
        v47 = sub_22F110B20(*v54);
        v27 = v58;
        v28 = v59;
        v29 = v61;
        v30 = v57;
        if (a5)
          v48 = 8;
        else
          v48 = 7;
        if (a5)
          v49 = 10;
        else
          v49 = 9;
        goto LABEL_34;
      case 11:
        v47 = sub_22F110B20(*v54);
        v27 = v58;
        v28 = v59;
        v29 = v61;
        v30 = v57;
        if (a5)
          v48 = 7;
        else
          v48 = 8;
        if (a5)
          v49 = 9;
        else
          v49 = 10;
LABEL_34:
        if (v47)
          v31 = v48;
        else
          v31 = v49;
        break;
      case 16:
        v31 = 3;
        break;
      case 17:
        v31 = 6;
        break;
      case 18:
        v31 = 5;
        break;
      default:
        break;
    }
    v50 = v31;
    v51 = v30;
    if (*((_BYTE *)v30 + 16) == 16)
    {
      v52 = sub_22F110B20(*v54);
      LOWORD(v73) = 257;
      v53 = sub_22E3BF45C(a1 + 34, (uint64_t)v51, v16, v52, (uint64_t)v72);
      v27 = v58;
      v28 = v59;
      v29 = v61;
      v51 = (uint64_t *)v53;
    }
    v75[0] = v28;
    v75[1] = v16;
    v75[2] = v29;
    v76 = v78;
    v77 = v79;
    sub_22E5E0440((uint64_t)a1, (uint64_t)v75, v27, v72);
    result = sub_22F245AA0((uint64_t)(a1 + 34), v50, *(uint64_t *)&v72[0], v51, 0);
    *(_BYTE *)a8 = 1;
    *(_QWORD *)(a8 + 8) = result;
    *(_QWORD *)(a8 + 16) = 0;
    *(_BYTE *)(a8 + 56) = 0;
  }
  else
  {
LABEL_13:
    *(_BYTE *)a8 = 0;
    *(_QWORD *)(a8 + 8) = 0;
    *(_QWORD *)(a8 + 16) = 0;
    *(_BYTE *)(a8 + 56) = 0;
    if (*a2 == 4)
    {
      v32 = *((_OWORD *)a2 + 7);
      v66[6] = *((_OWORD *)a2 + 6);
      v66[7] = v32;
      v67 = *((_QWORD *)a2 + 16);
      v33 = *((_OWORD *)a2 + 3);
      v66[2] = *((_OWORD *)a2 + 2);
      v66[3] = v33;
      v34 = *((_OWORD *)a2 + 5);
      v66[4] = *((_OWORD *)a2 + 4);
      v66[5] = v34;
      v35 = *((_OWORD *)a2 + 1);
      v66[0] = *(_OWORD *)a2;
      v66[1] = v35;
      sub_22E4D7B28(a1, (uint64_t)v66, a7, (uint64_t)v68);
      v72[0] = v68[0];
      v72[1] = v68[1];
      v73 = v68[2];
      v74 = v69;
      a9(v70, a10, v72);
      v36 = *((_OWORD *)a2 + 7);
      v64[6] = *((_OWORD *)a2 + 6);
      v64[7] = v36;
      v65 = *((_QWORD *)a2 + 16);
      v37 = *((_OWORD *)a2 + 3);
      v64[2] = *((_OWORD *)a2 + 2);
      v64[3] = v37;
      v38 = *((_OWORD *)a2 + 5);
      v64[4] = *((_OWORD *)a2 + 4);
      v64[5] = v38;
      v39 = *((_OWORD *)a2 + 1);
      v64[0] = *(_OWORD *)a2;
      v64[1] = v39;
      return sub_22E4DAAE0(a1, v70, v64, 0, *(double *)&v39);
    }
    else
    {
      v41 = *((_OWORD *)a2 + 5);
      v42 = *((_OWORD *)a2 + 7);
      v62[6] = *((_OWORD *)a2 + 6);
      v62[7] = v42;
      v63 = *((_QWORD *)a2 + 16);
      v43 = *((_OWORD *)a2 + 3);
      v62[2] = *((_OWORD *)a2 + 2);
      v62[3] = v43;
      v62[4] = *((_OWORD *)a2 + 4);
      v62[5] = v41;
      v44 = *((_OWORD *)a2 + 1);
      v62[0] = *(_OWORD *)a2;
      v62[1] = v44;
      v45 = *((_QWORD *)a2 + 8);
      if ((v45 & 4) != 0)
        v46 = 1;
      else
        v46 = (*(unsigned __int8 *)((v45 & 0xFFFFFFFFFFFFFFF0) + 8) >> 2) & 1;
      return sub_22E3C08B0((uint64_t)a1, (int *)v62, a6, (uint64_t)v71, v46);
    }
  }
  return result;
}

void sub_22E5FE0DC(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  BOOL v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  int v20;
  _BOOL4 v21;
  _QWORD *v22;
  int v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  void *v56;
  uint64_t v57;
  char v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  void (*v68)(void);
  unsigned int v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  int v73;
  int v74;
  unsigned __int8 *v75;
  unint64_t v76;
  unsigned __int8 *v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  __int128 *v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __n128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  int v90;
  uint64_t AtomicCompare;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  unsigned __int8 *v96;
  unint64_t v97;
  uint64_t v98;
  unsigned int v99;
  _BYTE v101[80];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 *v111;
  char v112;
  uint64_t v113;
  _OWORD v114[3];
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  _BYTE v125[56];
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  char v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  _BYTE v136[136];
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  _BYTE v145[56];
  uint64_t v146;
  _BYTE v147[136];
  _BYTE v148[104];
  void *v149[2];
  uint64_t v150;
  _QWORD **v151;
  _QWORD *v152[5];

  v152[2] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  v3 = *(unsigned int **)(a2 + 24);
  if (!v3)
    goto LABEL_2;
  v7 = v3 + 4;
  v8 = *v3;
  v9 = (uint64_t)&v3[2 * v8 + 4];
  v10 = v3 + 4;
  if ((_DWORD)v8)
  {
    v11 = 8 * v8;
    v10 = v3 + 4;
    while (*(_DWORD *)(*(_QWORD *)v10 + 8) != 72)
    {
      v10 += 2;
      v11 -= 8;
      if (!v11)
        goto LABEL_11;
    }
  }
  if (v10 != (unsigned int *)v9 && *(_QWORD *)v10)
  {
    v6 = 7;
LABEL_29:
    v5 = 1;
    goto LABEL_30;
  }
LABEL_11:
  v12 = v3 + 4;
  if ((_DWORD)v8)
  {
    v13 = 8 * v8;
    v12 = v3 + 4;
    while (*(_DWORD *)(*(_QWORD *)v12 + 8))
    {
      v12 += 2;
      v13 -= 8;
      if (!v13)
        goto LABEL_18;
    }
  }
  if (v12 != (unsigned int *)v9 && *(_QWORD *)v12)
  {
    v6 = 6;
    goto LABEL_29;
  }
LABEL_18:
  v14 = v3 + 4;
  if ((_DWORD)v8)
  {
    v15 = 8 * v8;
    v14 = v3 + 4;
    while (*(_DWORD *)(*(_QWORD *)v14 + 8) != 1)
    {
      v14 += 2;
      v15 -= 8;
      if (!v15)
        goto LABEL_25;
    }
  }
  if (v14 != (unsigned int *)v9 && *(_QWORD *)v14)
  {
    v6 = 4;
    goto LABEL_29;
  }
LABEL_25:
  v16 = v3 + 4;
  if ((_DWORD)v8)
  {
    v61 = 8 * v8;
    v16 = v3 + 4;
    while (*(_DWORD *)(*(_QWORD *)v16 + 8) != 68)
    {
      v16 += 2;
      v61 -= 8;
      if (!v61)
        goto LABEL_98;
    }
  }
  if (v16 != (unsigned int *)v9 && *(_QWORD *)v16)
  {
    v6 = 5;
    goto LABEL_29;
  }
LABEL_98:
  if ((_DWORD)v8)
  {
    v62 = 8 * v8;
    while (*(_DWORD *)(*(_QWORD *)v7 + 8) != 67)
    {
      v7 += 2;
      v62 -= 8;
      if (!v62)
        goto LABEL_2;
    }
  }
  if (v7 != (unsigned int *)v9)
  {
    v4 = *(_QWORD *)v7;
    goto LABEL_3;
  }
LABEL_2:
  v4 = 0;
LABEL_3:
  v5 = v4 != 0;
  v6 = 2;
LABEL_30:
  v149[0] = &v150;
  v149[1] = (void *)0x200000000;
  v152[0] = 0;
  v152[1] = 0;
  v151 = v152;
  if (v3 && (v19 = *v3, v18 = v3 + 4, (v17 = v19) != 0))
  {
    v44 = 8 * v17;
    v20 = 85;
    do
    {
      v45 = *(_DWORD *)(*(_QWORD *)v18 + 8);
      *(_DWORD *)v147 = v45;
      if ((v45 - 35 > 0x25 || ((1 << (v45 - 35)) & 0x2300000001) == 0) && v45 >= 2)
      {
        sub_22E5FF2E4((uint64_t)v149, (int *)v147);
        v20 = v45;
      }
      v18 += 2;
      v44 -= 8;
    }
    while (v44);
  }
  else
  {
    v20 = 85;
  }
  if (sub_22E5FF3F8((uint64_t)v149, &dword_22F45B60C))
  {
    v21 = sub_22E5FF3F8((uint64_t)v149, &dword_22F45B610);
    if (v21)
      v20 = 13;
  }
  else
  {
    v21 = 0;
  }
  v22 = (_QWORD *)a1;
  if (v5)
    goto LABEL_39;
  v24 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808) + 4252);
  v25 = v24 == 2 || v24 == 7;
  v23 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808) + 4252);
  if (!v25)
  {
    v23 = v24 == 6 && v20 == 11 ? *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808) + 4252) : v6;
    if ((v24 != 6 || v20 != 11) && v24 == 6)
    {
      v23 = 5;
      if (v20 > 86)
      {
        if (v20 != 87 && v20 != 93)
          goto LABEL_39;
      }
      else if (v20 == 65)
      {
        v23 = 4;
      }
      else if (v20 != 85)
      {
LABEL_39:
        v23 = v6;
      }
    }
  }
  v99 = v23;
  sub_22F0D4E74(a2);
  sub_22E4889F4((uint64_t)v148, a1, v26);
  sub_22E5E5100(a1, *(_QWORD *)(*(_QWORD *)(a2 + 24)+ 8 * **(unsigned int **)(a2 + 24)+ 8 * *(unsigned int *)(*(_QWORD *)(a2 + 24) + 4)+ 16));
  v27 = *(_BYTE *)(a2 + 32);
  v28 = *(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24);
  v29 = *(_QWORD *)(v28 + 16);
  v31 = *(_QWORD *)(v28 + 32);
  v30 = *(unsigned __int8 **)(v28 + 40);
  v32 = *(unsigned int *)(a2 + 12);
  if (v20 > 84)
  {
    if (v20 == 85 || v20 == 87)
    {
      v38 = sub_22EFFEB40(*(unsigned __int8 **)(v28 + 40));
      sub_22E4D8D7C(v147);
      memset(v101, 0, 28);
      memset(&v101[32], 0, 25);
      sub_22E4D79C0(&v127, a1, v31, v101, 0);
      v39 = sub_22EFFEB40(*((unsigned __int8 **)v38 + 2));
      v40 = sub_22EFFEB40(*((unsigned __int8 **)v38 + 3));
      if ((v27 & 1) != 0)
        v41 = v39;
      else
        v41 = v40;
      *(_QWORD *)&v116 = a1;
      *((_QWORD *)&v116 + 1) = v30;
      if ((v27 & 1) != 0)
        v42 = v40;
      else
        v42 = v39;
      v117 = v127;
      v118 = v128;
      v119 = v129;
      LOBYTE(v120) = v130;
      *((_QWORD *)&v120 + 1) = v41;
      *(_QWORD *)&v121 = v42;
      *(_OWORD *)&v136[32] = *(_OWORD *)&v147[32];
      *(_OWORD *)&v136[48] = *(_OWORD *)&v147[48];
      *(_OWORD *)v136 = *(_OWORD *)v147;
      *(_OWORD *)&v136[16] = *(_OWORD *)&v147[16];
      *(_QWORD *)&v136[128] = *(_QWORD *)&v147[128];
      *(_OWORD *)&v136[96] = *(_OWORD *)&v147[96];
      *(_OWORD *)&v136[112] = *(_OWORD *)&v147[112];
      *(_OWORD *)&v136[64] = *(_OWORD *)&v147[64];
      *(_OWORD *)&v136[80] = *(_OWORD *)&v147[80];
      *(_OWORD *)v125 = v127;
      *(_OWORD *)&v125[16] = v128;
      *(_OWORD *)&v125[32] = v129;
      v43 = (*(_DWORD *)v38 >> 18) & 0x3F;
      *(_QWORD *)&v125[48] = v130;
      v37 = v99;
      sub_22E5FDCF0((_QWORD *)a1, (int *)v136, v125, v43, v27 & 1, v99, v32, (uint64_t)v145, (void (*)(_QWORD *__return_ptr, uint64_t, _OWORD *))sub_22E600A44, (uint64_t)&v116);
    }
    else
    {
      if (v20 != 93)
        goto LABEL_164;
      sub_22E4D8D7C(v136);
      v116 = 0uLL;
      DWORD2(v117) = 0;
      *(_QWORD *)&v117 = 0;
      *(_QWORD *)&v119 = 0;
      v118 = 0uLL;
      BYTE8(v119) = 0;
      sub_22E4D79C0(v145, a1, v31, &v116, 0);
      *(_OWORD *)v101 = *(_OWORD *)v145;
      *(_OWORD *)&v101[16] = *(_OWORD *)&v145[16];
      *(_OWORD *)&v101[32] = *(_OWORD *)&v145[32];
      *(_QWORD *)&v101[48] = *(_QWORD *)&v145[48];
      *(_OWORD *)&v147[96] = *(_OWORD *)&v136[96];
      *(_OWORD *)&v147[112] = *(_OWORD *)&v136[112];
      *(_QWORD *)&v147[128] = *(_QWORD *)&v136[128];
      *(_OWORD *)&v147[32] = *(_OWORD *)&v136[32];
      *(_OWORD *)&v147[48] = *(_OWORD *)&v136[48];
      *(_OWORD *)&v147[80] = *(_OWORD *)&v136[80];
      *(_OWORD *)&v147[64] = *(_OWORD *)&v136[64];
      *(_OWORD *)&v147[16] = *(_OWORD *)&v136[16];
      *(_OWORD *)v147 = *(_OWORD *)v136;
      if (*(_DWORD *)v136 == 4)
      {
        sub_22F25F9A4(a1, (uint64_t *)v101, (uint64_t)v147);
        v37 = v99;
      }
      else
      {
        v37 = v99;
        sub_22E3BF7BC(a1, v101, v147, v99, (*(_DWORD *)&v136[72] >> 2) & 1, 0);
      }
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 808) + 616))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808), a1, v29);
    if (v37 - 5 > 2)
      goto LABEL_164;
    v67 = *(_QWORD *)(a1 + 144);
    goto LABEL_116;
  }
  v33 = *(_QWORD *)(v28 + 24);
  if (v20 == 11)
  {
    v48 = v27 & 2;
    v137 = 0uLL;
    LOBYTE(v140) = v140 & 0xF9;
    v98 = v33;
    sub_22E4D8D7C(v147);
    sub_22E4D8D7C(v136);
    *(_QWORD *)&v128 = 0;
    v127 = 0uLL;
    DWORD2(v128) = 0;
    v130 = 0;
    v129 = 0uLL;
    v131 = 0;
    sub_22E4D79C0(&v132, a1, v31, &v127, 0);
    if (v30)
    {
      v69 = v48 >> 1;
      v70 = sub_22EFFEB40(v30);
      v71 = sub_22EFFEB40(*((unsigned __int8 **)v70 + 2));
      v72 = sub_22EFFEB40(*((unsigned __int8 **)v70 + 3));
      v73 = v27 & 1;
      v74 = v27 & 2;
      if (v73)
        v75 = v71;
      else
        v75 = v72;
      v76 = *((_QWORD *)v75 + 1);
      if (v73)
        v77 = v72;
      else
        v77 = v71;
      v22 = (_QWORD *)a1;
      *(_QWORD *)v101 = a1;
      *(_QWORD *)&v101[8] = &v137;
      *(_QWORD *)&v101[16] = v30;
      *(_OWORD *)&v101[24] = v132;
      *(_OWORD *)&v101[40] = v133;
      *(_OWORD *)&v101[56] = v134;
      v101[72] = v135;
      *(_QWORD *)&v102 = v75;
      *((_QWORD *)&v102 + 1) = v77;
      v96 = v77;
      v97 = v76;
      LOBYTE(v103) = v69;
      v118 = *(_OWORD *)&v136[32];
      v119 = *(_OWORD *)&v136[48];
      v116 = *(_OWORD *)v136;
      v117 = *(_OWORD *)&v136[16];
      v124 = *(_QWORD *)&v136[128];
      v122 = *(_OWORD *)&v136[96];
      v123 = *(_OWORD *)&v136[112];
      v120 = *(_OWORD *)&v136[64];
      v121 = *(_OWORD *)&v136[80];
      v114[0] = v132;
      v114[1] = v133;
      v114[2] = v134;
      v78 = (*(_DWORD *)v70 >> 18) & 0x3F;
      v115 = v135;
      v79 = v99;
      sub_22E5FDCF0((_QWORD *)a1, (int *)&v116, v114, v78, v73, v99, v32, (uint64_t)v125, (void (*)(_QWORD *__return_ptr, uint64_t, _OWORD *))sub_22E600BF0, (uint64_t)v101);
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v22[18] + 808) + 616))(*(_QWORD *)(v22[18] + 808), v22, v29);
      if (v125[0])
      {
        if (v74)
        {
          v137 = *(_OWORD *)&v125[8];
          v138 = *(_OWORD *)&v125[24];
          v139 = *(_OWORD *)&v125[40];
          LOBYTE(v140) = v126;
        }
        else
        {
          v141 = v132;
          v142 = v133;
          v143 = v134;
          v144 = v135;
          v110 = a1;
          *(_OWORD *)&v145[8] = v132;
          *(_OWORD *)&v145[24] = v133;
          *(_OWORD *)&v145[40] = v134;
          *(_QWORD *)v145 = v96;
          v146 = v135;
          sub_22F25406C(a1 + 4088, v145, (__int128 *)&v145[8], (uint64_t)&v106);
          v111 = v96;
          v112 = 0;
          v113 = sub_22F297CB8(a1, &v141);
          v106 = a1;
          *(_OWORD *)&v145[8] = *(_OWORD *)&v125[8];
          *(_OWORD *)&v145[24] = *(_OWORD *)&v125[24];
          *(_OWORD *)&v145[40] = *(_OWORD *)&v125[40];
          *(_QWORD *)v145 = v75;
          v146 = v126;
          v22 = (_QWORD *)a1;
          sub_22F25406C(a1 + 4088, v145, (__int128 *)&v145[8], (uint64_t)&v141);
          v107 = v75;
          v108 = 0;
          *(_OWORD *)v145 = *(_OWORD *)&v125[8];
          *(_OWORD *)&v145[16] = *(_OWORD *)&v125[24];
          *(_OWORD *)&v145[32] = *(_OWORD *)&v125[40];
          *(_QWORD *)&v145[48] = v126;
          v109 = sub_22F297CB8(a1, v145);
          memset(v145, 0, 28);
          memset(&v145[32], 0, 24);
          LOBYTE(v146) = 0;
          sub_22E4D79C0(&v141, a1, v30, v145, 0);
          v137 = v141;
          v138 = v142;
          v139 = v143;
          LOBYTE(v140) = v144;
          sub_22F254324((uint64_t)&v107, a1);
          if (v96)
            sub_22F254324((uint64_t)&v111, a1);
          v79 = v99;
        }
      }
      v49 = v97;
      goto LABEL_160;
    }
    v49 = *(_QWORD *)(v29 + 8);
    v50 = *(_QWORD *)(v49 & 0xFFFFFFFFFFFFFFF0);
    if (!v50 || (v51 = *(_DWORD *)(v50 + 16), (v51 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        goto LABEL_87;
      v50 = sub_22F10CF48(v50);
      if (!v50)
        goto LABEL_87;
      v51 = *(_DWORD *)(v50 + 16);
    }
    if ((v51 & 0x100000) != 0)
    {
      v22 = (_QWORD *)a1;
      do
      {
        v50 = *(_QWORD *)(*(_QWORD *)(v50 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v50)
        {
          v94 = *(_DWORD *)(v50 + 16);
          if ((v94 & 0xFE) == 0x28)
            continue;
        }
        v50 = sub_22F10CF48(v50);
        v94 = *(_DWORD *)(v50 + 16);
      }
      while ((v94 & 0x100000) != 0);
    }
    v49 = *(_QWORD *)(v50 + 32);
LABEL_87:
    v52 = *(_QWORD *)(v31 + 8);
    v53 = *(_QWORD *)(v29 + 8);
    v54 = *(_QWORD *)(v53 & 0xFFFFFFFFFFFFFFF0);
    if (!v54 || (v55 = *(_DWORD *)(v54 + 16), (v55 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
        || (v54 = sub_22F10CF48(v54)) == 0)
      {
LABEL_90:
        if (sub_22E619D68(v53))
        {
          v116 = v132;
          v117 = v133;
          v118 = v134;
          *(_QWORD *)&v119 = v135;
          v56 = sub_22E5FDB84((uint64_t)v22, (uint64_t)&v116, v52, v53, v32);
          v58 = 2;
        }
        else
        {
          v116 = v132;
          v117 = v133;
          v118 = v134;
          *(_QWORD *)&v119 = v135;
          v56 = sub_22E5FDAF0((uint64_t)v22, (uint64_t)&v116, v52, v53, v32);
          v57 = 0;
          v58 = 0;
        }
        *(_QWORD *)&v132 = v56;
        *((_QWORD *)&v132 + 1) = v57;
        LOBYTE(v135) = v58;
        *(_QWORD *)v101 = &v137;
        *(_OWORD *)&v101[8] = v132;
        *(_OWORD *)&v101[24] = v133;
        *(_OWORD *)&v101[40] = v134;
        v101[56] = v58;
        v118 = *(_OWORD *)&v136[32];
        v119 = *(_OWORD *)&v136[48];
        v116 = *(_OWORD *)v136;
        v117 = *(_OWORD *)&v136[16];
        v124 = *(_QWORD *)&v136[128];
        v122 = *(_OWORD *)&v136[96];
        v123 = *(_OWORD *)&v136[112];
        v120 = *(_OWORD *)&v136[64];
        v121 = *(_OWORD *)&v136[80];
        *(_OWORD *)v125 = v132;
        *(_OWORD *)&v125[16] = v133;
        *(_OWORD *)&v125[32] = v134;
        *(_QWORD *)&v125[48] = v135;
        v79 = v99;
        sub_22E5FDCF0(v22, (int *)&v116, v125, 21, 0, v99, v32, (uint64_t)v145, (void (*)(_QWORD *__return_ptr, uint64_t, _OWORD *))sub_22E600DD0, (uint64_t)v101);
        (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v22[18] + 808) + 616))(*(_QWORD *)(v22[18] + 808), v22, v29);
        if (v145[0])
        {
          v81 = (__int128 *)&v145[8];
          if (!v48)
            v81 = &v132;
          v82 = v81[1];
          v137 = *v81;
          v138 = v82;
          v139 = v81[2];
          LOBYTE(v140) = *((_BYTE *)v81 + 48);
        }
LABEL_160:
        v103 = *(_OWORD *)&v147[96];
        v104 = *(_OWORD *)&v147[112];
        v105 = *(_QWORD *)&v147[128];
        *(_OWORD *)&v101[32] = *(_OWORD *)&v147[32];
        *(_OWORD *)&v101[48] = *(_OWORD *)&v147[48];
        *(_OWORD *)&v101[64] = *(_OWORD *)&v147[64];
        v102 = *(_OWORD *)&v147[80];
        *(_OWORD *)v101 = *(_OWORD *)v147;
        *(_OWORD *)&v101[16] = *(_OWORD *)&v147[16];
        v141 = v137;
        v142 = v138;
        v143 = v139;
        v144 = v140;
        sub_22E5FD990((uint64_t)v22, (uint64_t)v101, (uint64_t)&v141, v49, v32);
        (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v22[18] + 808) + 616))(*(_QWORD *)(v22[18] + 808), v22, v98);
        v67 = v22[18];
        if (*(_DWORD *)(*(_QWORD *)(v67 + 152) + 72) > 0x32u)
          goto LABEL_164;
        if (v79 - 6 < 2)
        {
          v68 = *(void (**)(void))(**(_QWORD **)(v67 + 808) + 336);
          goto LABEL_117;
        }
        if (v79 == 4)
        {
          v68 = *(void (**)(void))(**(_QWORD **)(v67 + 808) + 336);
          goto LABEL_117;
        }
        if (v79 != 5)
          goto LABEL_164;
LABEL_116:
        v68 = *(void (**)(void))(**(_QWORD **)(v67 + 808) + 336);
LABEL_117:
        v68();
        goto LABEL_164;
      }
      v55 = *(_DWORD *)(v54 + 16);
    }
    if ((v55 & 0x100000) != 0)
    {
      v22 = (_QWORD *)a1;
      do
      {
        v54 = *(_QWORD *)(*(_QWORD *)(v54 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v54)
        {
          v95 = *(_DWORD *)(v54 + 16);
          if ((v95 & 0xFE) == 0x28)
            continue;
        }
        v54 = sub_22F10CF48(v54);
        v95 = *(_DWORD *)(v54 + 16);
      }
      while ((v95 & 0x100000) != 0);
    }
    v53 = *(_QWORD *)(v54 + 32);
    goto LABEL_90;
  }
  if (v20 != 13)
  {
    if (v20 != 65)
      goto LABEL_164;
    v34 = *(_QWORD *)(v28 + 24);
    sub_22E4D8D7C(v136);
    v35 = v34;
    sub_22E4D8D7C(&v116);
    *(_OWORD *)&v147[20] = *(_OWORD *)&v136[20];
    *(_OWORD *)&v147[36] = *(_OWORD *)&v136[36];
    *(_OWORD *)&v147[52] = *(_OWORD *)&v136[52];
    *(_OWORD *)&v147[4] = *(_OWORD *)&v136[4];
    *(_OWORD *)&v147[76] = *(_OWORD *)&v136[76];
    if (*(_DWORD *)v136 == 4)
    {
      *(_DWORD *)v147 = 4;
      *(_DWORD *)&v147[68] = *(_DWORD *)&v136[68];
      *(_DWORD *)&v147[72] = *(_DWORD *)&v136[72];
      *(_OWORD *)&v147[92] = *(_OWORD *)&v136[92];
      *(_OWORD *)&v147[108] = *(_OWORD *)&v136[108];
      *(_OWORD *)&v147[120] = *(_OWORD *)&v136[120];
      sub_22E4D7B28((_QWORD *)a1, (uint64_t)v147, v32, (uint64_t)v145);
      v36 = v99;
    }
    else
    {
      *(_DWORD *)v147 = *(_DWORD *)v136;
      *(_DWORD *)&v147[68] = *(_DWORD *)&v136[68];
      *(_DWORD *)&v147[72] = *(_DWORD *)&v136[72];
      *(_OWORD *)&v147[92] = *(_OWORD *)&v136[92];
      *(_OWORD *)&v147[108] = *(_OWORD *)&v136[108];
      *(_OWORD *)&v147[120] = *(_OWORD *)&v136[120];
      v36 = v99;
      v63 = dword_22F45B614[v99 - 2];
      memset(v101, 0, 28);
      memset(&v101[32], 0, 25);
      sub_22F2451CC(a1, (int *)v147, v32, v63, (*(_DWORD *)&v136[72] >> 2) & 1, (uint64_t)v101, (uint64_t)v145);
    }
    if (v36 <= 7 && ((1 << v36) & 0xD0) != 0)
      (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144)
                                                                                              + 808)
                                                                                + 336))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808), a1, 0, 0, v32, 4);
    *(_OWORD *)&v147[96] = v122;
    *(_OWORD *)&v147[112] = v123;
    *(_QWORD *)&v147[128] = v124;
    *(_OWORD *)&v147[32] = v118;
    *(_OWORD *)&v147[48] = v119;
    *(_OWORD *)&v147[80] = v121;
    *(_OWORD *)&v147[64] = v120;
    *(_OWORD *)&v147[16] = v117;
    *(_OWORD *)v147 = v116;
    *(_OWORD *)v101 = *(_OWORD *)v145;
    *(_OWORD *)&v101[16] = *(_OWORD *)&v145[16];
    *(_OWORD *)&v101[32] = *(_OWORD *)&v145[32];
    *(_QWORD *)&v101[48] = *(_QWORD *)&v145[48];
    v64 = *(_QWORD *)(v29 + 8);
    v65 = *(_QWORD *)(v64 & 0xFFFFFFFFFFFFFFF0);
    if (!v65 || (v66 = *(_DWORD *)(v65 + 16), (v66 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v65 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
        || (v65 = sub_22F10CF48(v65)) == 0)
      {
LABEL_112:
        sub_22E5FD990((uint64_t)v22, (uint64_t)v147, (uint64_t)v101, v64, v32);
        (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v22[18] + 808) + 616))(*(_QWORD *)(v22[18] + 808), v22, v35);
        goto LABEL_164;
      }
      v66 = *(_DWORD *)(v65 + 16);
    }
    if ((v66 & 0x100000) != 0)
    {
      v22 = (_QWORD *)a1;
      do
      {
        v65 = *(_QWORD *)(*(_QWORD *)(v65 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v65)
        {
          v93 = *(_DWORD *)(v65 + 16);
          if ((v93 & 0xFE) == 0x28)
            continue;
        }
        v65 = sub_22F10CF48(v65);
        v93 = *(_DWORD *)(v65 + 16);
      }
      while ((v93 & 0x100000) != 0);
    }
    v64 = *(_QWORD *)(v65 + 32);
    goto LABEL_112;
  }
  if (v21)
  {
    v59 = sub_22F41A810(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 208) + 32), 4, "'atomic compare capture' is not supported for now", 0x31uLL);
    v60 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 208);
    *(_DWORD *)(v60 + 312) = 0;
    *(_DWORD *)(v60 + 316) = v59;
    if (*(char *)(v60 + 311) < 0)
    {
      **(_BYTE **)(v60 + 288) = 0;
      *(_QWORD *)(v60 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v60 + 288) = 0;
      *(_BYTE *)(v60 + 311) = 0;
    }
    *(_OWORD *)v147 = (unint64_t)(v60 + 320);
    *(_QWORD *)&v147[16] = v60;
    *(_WORD *)&v147[24] = 1;
    *(_BYTE *)(v60 + 320) = 0;
    *(_DWORD *)(v60 + 664) = 0;
    v83 = *(unsigned int *)(v60 + 776);
    if ((_DWORD)v83)
    {
      v84 = *(_QWORD *)(v60 + 768);
      v85 = 56 * v83;
      do
      {
        if (*(char *)(v84 + v85 - 9) < 0)
          operator delete(*(void **)(v84 + v85 - 32));
        v85 -= 56;
      }
      while (v85);
    }
    *(_DWORD *)(v60 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v147);
  }
  else
  {
    v80 = *(_QWORD *)(v28 + 48);
    sub_22E4D8D7C(v147);
    *(_OWORD *)v136 = *(_OWORD *)&v147[8];
    *(_OWORD *)&v136[16] = *(_OWORD *)&v147[24];
    *(_OWORD *)&v136[32] = *(_OWORD *)&v147[40];
    *(_QWORD *)&v116 = a1;
    *((_QWORD *)&v116 + 1) = a1 + 272;
    LOBYTE(v117) = 0;
    *((_QWORD *)&v117 + 1) = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
    sub_22E50E974(&v116, v31, *(__n128 *)&v147[40]);
    if (v80)
    {
      *(_QWORD *)&v116 = a1;
      *((_QWORD *)&v116 + 1) = a1 + 272;
      LOBYTE(v117) = 0;
      *((_QWORD *)&v117 + 1) = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
      sub_22E50E974(&v116, v80, v86);
    }
    if ((v136[24] & 3) != 0)
      v87 = sub_22F28ABCC(v136, a1);
    else
      v87 = *(_QWORD *)v136;
    *(_QWORD *)&v116 = v87;
    *((_QWORD *)&v116 + 1) = *(_QWORD *)&v136[8];
    v88 = *(_QWORD *)(v29 + 8);
    v89 = (uint64_t *)(v88 & 0xFFFFFFFFFFFFFFF0);
    if ((v88 & 4) != 0)
      LOBYTE(v90) = 1;
    else
      v90 = (*(unsigned __int8 *)((v88 & 0xFFFFFFFFFFFFFFF0) + 8) >> 2) & 1;
    LOBYTE(v117) = v90;
    BYTE1(v117) = sub_22F110B20(*v89);
    *(_OWORD *)v101 = *(_OWORD *)(a1 + 320);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 272));
    AtomicCompare = llvm::OpenMPIRBuilder::createAtomicCompare();
    if (AtomicCompare)
    {
      sub_22E3CB840(a1 + 272, AtomicCompare, v92);
    }
    else
    {
      *(_QWORD *)(a1 + 320) = 0;
      *(_QWORD *)(a1 + 328) = 0;
    }
    if (*(_QWORD *)&v101[16])
      llvm::MetadataTracking::untrack();
  }
LABEL_164:
  sub_22E488B4C((uint64_t)v148);
  sub_22E3B4AB8((uint64_t)&v151, v152[0]);
  if (v149[0] != &v150)
    free(v149[0]);
}

unint64_t sub_22E5FF2E4(uint64_t a1, int *a2)
{
  unsigned __int8 v4;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  int *v11;

  if (*(_QWORD *)(a1 + 40))
  {
    sub_22E609134((uint64_t **)(a1 + 24), a2, a2);
    return ((unint64_t)v4 << 32) | 1;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = *(unsigned int *)(a1 + 8);
    v8 = *a2;
    if (!(_DWORD)v7)
      goto LABEL_11;
    v9 = 4 * v7;
    v10 = *(_DWORD **)a1;
    while (*v10 != v8)
    {
      ++v10;
      v9 -= 4;
      if (!v9)
        goto LABEL_10;
    }
    if (v9)
      return 1;
LABEL_10:
    if (v7 > 1)
    {
      do
      {
        v11 = (int *)(*(_QWORD *)a1 + 4 * v7 - 4);
        sub_22E609134((uint64_t **)(a1 + 24), v11, v11);
        LODWORD(v7) = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v7;
      }
      while ((_DWORD)v7);
      sub_22E609134((uint64_t **)(a1 + 24), a2, a2);
    }
    else
    {
LABEL_11:
      if (v7 >= *(_DWORD *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v6 = *(_DWORD **)a1;
        v7 = *(unsigned int *)(a1 + 8);
      }
      v6[v7] = v8;
      ++*(_DWORD *)(a1 + 8);
    }
    return 0x100000001;
  }
}

BOOL sub_22E5FF3F8(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  BOOL v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v2 = a1 + 32;
    v3 = v4;
    if (!v4)
      goto LABEL_12;
    v5 = *a2;
    v6 = v2;
    do
    {
      v7 = *(_DWORD *)(v3 + 28);
      v8 = v7 < v5;
      if (v7 >= v5)
        v9 = (uint64_t *)v3;
      else
        v9 = (uint64_t *)(v3 + 8);
      if (!v8)
        v6 = v3;
      v3 = *v9;
    }
    while (*v9);
    if (v6 == v2 || v5 < *(_DWORD *)(v6 + 28))
LABEL_12:
      v6 = v2;
    v10 = v6 == v2;
  }
  else
  {
    v11 = *(_DWORD **)a1;
    v12 = *(unsigned int *)(a1 + 8);
    v13 = *(_QWORD *)a1 + 4 * v12;
    if ((_DWORD)v12)
    {
      v14 = 4 * v12;
      while (*v11 != *a2)
      {
        ++v11;
        v14 -= 4;
        if (!v14)
          goto LABEL_18;
      }
    }
    else
    {
LABEL_18:
      v11 = (_DWORD *)v13;
    }
    v10 = v11 == (_DWORD *)v13;
  }
  return !v10;
}

uint64_t sub_22E5FF48C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v22;
  uint64_t v23;
  _BYTE v24[128];
  _BYTE v25[104];
  _QWORD v26[12];

  v26[11] = *MEMORY[0x24BDAC8D0];
  v8 = sub_22E59F470(a2, 80);
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1[18] + 808) + 96))(*(_QWORD *)(a1[18] + 808), a2, *(_QWORD *)((*(_QWORD *)(v8 + 16) & 0xFFFFFFFFFFFFFFF8) + 88), a3, a4);
  v10 = *(_QWORD *)(a2 + 24);
  if (v10)
  {
    v14 = *(_DWORD *)v10;
    v12 = (uint64_t *)(v10 + 16);
    v13 = v14;
    v15 = &v12[v14];
    v16 = 8 * v14;
    v17 = v12;
    if (v14)
    {
      v18 = v16;
      v17 = v12;
      while (*(_DWORD *)(*v17 + 8) != 57)
      {
        ++v17;
        v18 -= 8;
        if (!v18)
          goto LABEL_10;
      }
    }
    if (v17 == v15)
    {
LABEL_10:
      v11 = 0;
      if (v13)
      {
LABEL_13:
        while (*(_DWORD *)(*v12 + 8) != 78)
        {
          ++v12;
          v16 -= 8;
          if (!v16)
            goto LABEL_15;
        }
      }
    }
    else
    {
      v11 = *v17;
      if (v13)
        goto LABEL_13;
    }
    if (v12 == v15)
LABEL_15:
      v10 = 0;
    else
      v10 = *v12;
  }
  else
  {
    v11 = 0;
  }
  if (v11 | v10)
  {
    if (v11)
    {
      v19 = *(_QWORD *)(v11 + 32);
      if (!v10)
      {
LABEL_19:
        v20 = 0;
LABEL_22:
        (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1[18] + 808) + 488))(*(_QWORD *)(a1[18] + 808), a1, v19, v20, *(unsigned int *)(a2 + 12));
        goto LABEL_23;
      }
    }
    else
    {
      v19 = 0;
      if (!v10)
        goto LABEL_19;
    }
    v20 = *(_QWORD *)(v10 + 32);
    goto LABEL_22;
  }
LABEL_23:
  sub_22E600354((uint64_t)v25, (uint64_t)a1, a2, 0, ((*(_DWORD *)(a2 + 8) - 80) < 0x14) & (0x80073u >> (*(_BYTE *)(a2 + 8) - 80)));
  v22 = v24;
  v23 = 0x1000000000;
  sub_22E5F01E0(a1, v8, (uint64_t)&v22);
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD, uint64_t, void *, _QWORD))(**(_QWORD **)(a1[18] + 808)
                                                                                     + 480))(*(_QWORD *)(a1[18] + 808), a1, a2, *(unsigned int *)(a2 + 12), v9, v22, v23);
  if (v22 != v24)
    free(v22);
  sub_22F283FC4((uint64_t)v26);
  return sub_22E488B4C((uint64_t)v25);
}

uint64_t sub_22E5FF6C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 0;
  v5 = a2;
  if (sub_22F286AB0((uint64_t *)a1, &v5, &v4))
    return v4;
  else
    return *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 16);
}

uint64_t sub_22E5FF714(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  int v3;
  unsigned __int8 **v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v8;

  while (1)
  {
    v1 = sub_22EFFA6B0(a1);
    v2 = v1;
    v3 = *v1;
    if (v3 != 191)
      break;
    a1 = (unsigned __int8 *)*((_QWORD *)v1 + 2);
  }
  while (v3 == 107)
  {
    v4 = (unsigned __int8 **)(v2 + 24);
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v6 = *(_DWORD *)(v5 + 16);
    if (v5)
      v7 = v6 == 11;
    else
      v7 = 0;
    if (v7)
    {
      if (((*(_DWORD *)(v5 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
        goto LABEL_15;
LABEL_14:
      v4 = (unsigned __int8 **)(v2 + 16);
      goto LABEL_15;
    }
    if (v5 && v6 == 44)
    {
      v8 = sub_22F114198(*(_QWORD *)(v5 + 24));
      if (((*(_BYTE *)(v8 + 74) & 1) != 0 || *(_QWORD *)(v8 + 128) > 7uLL)
        && (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v5 + 24)) + 72) & 0x8000000000) == 0)
      {
        goto LABEL_14;
      }
    }
    else if (v6 == 9)
    {
      goto LABEL_14;
    }
LABEL_15:
    v2 = sub_22EFFA6B0(*v4);
    v3 = *v2;
  }
  return *((_QWORD *)v2 + 2);
}

void sub_22E5FF808(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned __int8 **v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  _DWORD v76[4];
  uint64_t v77;
  uint64_t *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  char v82[32];
  llvm *v83[2];
  unsigned int v84;
  _OWORD v85[3];
  _BYTE v86[104];
  _QWORD v87[3];
  char v88;
  char v89;
  uint64_t v90;
  uint64_t v91[2];
  int v92;
  _QWORD v93[2];
  int v94;
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)a2 == 69)
  {
    sub_22E5FBFA0(a1, a2);
    return;
  }
  v4 = *(unsigned int **)(a2 + 24);
  if (v4)
  {
    if (*((_BYTE *)v4 + 8))
    {
      v5 = *(_QWORD *)&v4[2 * *v4 + 4 + 2 * v4[1]];
      if (v5)
      {
        v77 = a2;
        v6 = *(_DWORD *)(a2 + 8);
        if (v6 <= 0x34 && ((1 << v6) & 0x10000800000204) != 0 || v6 == 95)
        {
          sub_22E5E5158(a1, v5, 0, 0);
        }
        else
        {
          sub_22E5B8E78(v76, a1, a2);
          sub_22F0D4E74(a2);
          sub_22E4889F4((uint64_t)v86, a1, v7);
          v8 = 0;
          v89 = 1;
          v9 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
          v10 = *(_QWORD *)(a1 + 2312);
          v88 = *(_BYTE *)(a1 + 2893);
          v11 = *(_QWORD *)(a1 + 2872);
          v87[0] = v9;
          v87[1] = v11;
          v87[2] = v10;
          *(_BYTE *)(a1 + 2893) = 0;
          *(_QWORD *)(a1 + 2872) = v9;
          v91[0] = 0;
          v91[1] = 0;
          v90 = a1;
          v92 = 0;
          v93[0] = 0;
          v93[1] = 0;
          v94 = 0;
          v12 = *(unsigned int **)(a2 + 24);
          if (v12)
          {
            v14 = (uint64_t *)(v12 + 4);
            v13 = *v12;
            v8 = *(unsigned int **)(a2 + 24);
            if ((_DWORD)v13)
            {
              v15 = &v14[v13];
              do
              {
                v16 = *v14;
                v17 = (uint64_t *)sub_22F3EA1B4(*v14);
                if (v17)
                {
                  v23 = *v17;
                  if (*v17)
                  {
                    v24 = *(_QWORD *)(v23 + 8);
                    if ((v24 & 1) != 0)
                    {
                      v25 = (uint64_t *)((v24 & 0xFFFFFFFFFFFFFFFELL) + 8);
                      v27 = &v25[*(unsigned int *)(v24 & 0xFFFFFFFFFFFFFFFELL)];
                    }
                    else
                    {
                      if (v24)
                        v25 = (uint64_t *)(v23 + 8);
                      else
                        v25 = 0;
                      v26 = (uint64_t *)(v23 + 16);
                      if (v24)
                        v27 = v26;
                      else
                        v27 = 0;
                    }
                    while (v25 != v27)
                    {
                      v32 = *v25;
                      if (sub_22F281CA0(*v25))
                      {
                        sub_22E4C8440(a1, v32, (uint64_t)&v78);
                        sub_22E4C9A74(a1, (uint64_t)&v78);
                      }
                      else
                      {
                        sub_22E4C652C((_QWORD *)a1, v32);
                      }
                      ++v25;
                    }
                  }
                }
                else
                {
                  v18 = *(_DWORD *)(v16 + 8);
                  if (v16 && v18 == 90)
                  {
                    v19 = *(unsigned int *)(v16 + 16);
                    if ((_DWORD)v19)
                    {
                      v20 = v16 + 80;
                      v21 = 8 * v19;
                      do
                      {
                        v22 = *(_QWORD *)(*(_QWORD *)v20 + 16);
                        if (v22 && (*(_DWORD *)(v22 + 28) & 0x7F) == 0x3F)
                          sub_22E4C652C((_QWORD *)a1, v22);
                        v20 += 8;
                        v21 -= 8;
                      }
                      while (v21);
                    }
                  }
                  else if (v16)
                  {
                    if (v18 == 89)
                    {
                      v28 = *(unsigned int *)(v16 + 16);
                      if ((_DWORD)v28)
                      {
                        v29 = (unsigned __int8 **)(v16 + 80);
                        v30 = 8 * v28;
                        do
                        {
                          v31 = sub_22E5FF714(*v29);
                          if (v31 && (*(_DWORD *)(v31 + 28) & 0x7F) == 0x3F)
                            sub_22E4C652C((_QWORD *)a1, v31);
                          ++v29;
                          v30 -= 8;
                        }
                        while (v30);
                      }
                    }
                  }
                }
                ++v14;
              }
              while (v14 != v15);
              v8 = *(unsigned int **)(a2 + 24);
            }
          }
          if (!sub_22F421AC0(*(_DWORD *)(a2 + 8)))
          {
            sub_22E5F310C(a1, v8, (uint64_t)v87);
            v8 = *(unsigned int **)(a2 + 24);
          }
          if (*(_BYTE *)a2 == 82)
          {
            v33 = *(_QWORD *)&v8[2 * *v8 + 4];
            if (v33)
            {
              sub_22E4C652C((_QWORD *)a1, *(_QWORD *)(v33 + 16));
              v8 = *(unsigned int **)(a2 + 24);
            }
          }
          v83[0] = 0;
          v83[1] = 0;
          v84 = 0;
          v35 = v8 + 4;
          v34 = *v8;
          if ((_DWORD)v34)
          {
            v37 = 0;
            while (*(_DWORD *)(*(_QWORD *)&v35[v37] + 8) != 66)
            {
              v37 += 2;
              if (2 * v34 == v37)
                goto LABEL_75;
            }
            v36 = &v35[v37];
          }
          else
          {
            v36 = v8 + 4;
          }
          v38 = &v35[2 * v34];
          if (v36 != v38)
          {
            v39 = *(_QWORD *)v36;
LABEL_64:
            if (*(_DWORD *)(v39 + 48) == 1)
            {
              v40 = *(unsigned int *)(v39 + 16);
              if ((_DWORD)v40)
              {
                v41 = v39 + 8 * v40 + 8 * v40 + 8 * v40 + 8 * v40 + 8 * v40 + 8 * v40 + 104;
                v42 = 8 * v40;
                do
                {
                  v43 = *(_QWORD *)(*(_QWORD *)v41 + 16);
                  if (v43)
                    v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 32))(v43);
                  *(_QWORD *)&v85[0] = v43;
                  sub_22F275184((uint64_t)v83, v85, (uint64_t)&v78);
                  v41 += 8;
                  v42 -= 8;
                }
                while (v42);
              }
            }
            v44 = v36 + 2;
            while (v44 != v38)
            {
              v45 = *(_QWORD *)v44;
              v44 += 2;
              v39 = v45;
              if (*(_DWORD *)(v45 + 8) == 66)
              {
                v36 = v44 - 2;
                goto LABEL_64;
              }
            }
            v8 = *(unsigned int **)(a2 + 24);
            v34 = *v8;
          }
LABEL_75:
          v46 = *(_QWORD *)&v8[2 * v34 + 4 + 2 * v8[1]];
          if (v46)
          {
            while (1)
            {
              v47 = *(unsigned int *)(v46 + 8);
              if ((_DWORD)v47)
                break;
              v69 = 0;
LABEL_120:
              v46 = *(_QWORD *)(v46 + 8 * v69 + 32);
              if (*(_BYTE *)v46 != 7)
                goto LABEL_121;
            }
            v48 = (uint64_t *)(v46 + (8 * v47 + 40));
            v49 = &v48[2 * v47];
            while (1)
            {
              v50 = *v48;
              if (((*v48 >> 1) & 3) - 1 <= 1)
              {
                v51 = (uint64_t *)(v50 & 0xFFFFFFFFFFFFFFF8);
                if ((v50 & 0xFFFFFFFFFFFFFFF8) != 0)
                  v52 = (*(uint64_t (**)(uint64_t *))(*v51 + 32))(v51);
                else
                  v52 = 0;
                if (!v84)
                  goto LABEL_91;
                v53 = ((v52 >> 4) ^ (v52 >> 9)) & (v84 - 1);
                v54 = *((_QWORD *)v83[0] + v53);
                if (v52 != v54)
                {
                  v55 = 1;
                  while (v54 != -4096)
                  {
                    v56 = v53 + v55++;
                    v53 = v56 & (v84 - 1);
                    v54 = *((_QWORD *)v83[0] + v53);
                    if (v52 == v54)
                      goto LABEL_84;
                  }
LABEL_91:
                  v57 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
                  v78 = v51;
                  *(_QWORD *)&v85[0] = 0;
                  if (sub_22F246C54((uint64_t *)(a1 + 1928), &v78, v85)
                    && *(_QWORD *)(*(_QWORD *)&v85[0] + 8)
                    || (v58 = *(_QWORD *)(a1 + 1856)) != 0
                    && (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v58 + 32))(v58, v51))
                  {
LABEL_95:
                    v59 = 1;
                  }
                  else
                  {
                    v60 = *(_QWORD *)(a1 + 1600);
                    if (v60)
                    {
                      if ((*(_DWORD *)(v60 + 28) & 0x7F) == 1)
                      {
                        v61 = *(unsigned int *)(v60 + 112);
                        if ((_DWORD)v61)
                        {
                          v62 = *(_QWORD **)(v60 + 104);
                          v63 = 16 * v61;
                          while ((uint64_t *)(*v62 & 0xFFFFFFFFFFFFFFF8) != v51)
                          {
                            v62 += 2;
                            v63 -= 16;
                            if (!v63)
                              goto LABEL_102;
                          }
                          goto LABEL_95;
                        }
                      }
                    }
LABEL_102:
                    if (*(_QWORD *)(a1 + 1856))
                      v59 = sub_22F293C3C((uint64_t)v87, (uint64_t)v51);
                    else
                      v59 = 0;
                  }
                  v64 = v51[6];
                  v65 = *(_QWORD *)(v64 & 0xFFFFFFFFFFFFFFF0);
                  if (v65 && (v66 = *(_DWORD *)(v65 + 16), (v66 & 0xFE) == 0x28))
                  {
LABEL_111:
                    if ((v66 & 0x100000) != 0)
                    {
                      v75 = v59;
                      do
                      {
                        v65 = *(_QWORD *)(*(_QWORD *)(v65 + 32) & 0xFFFFFFFFFFFFFFF0);
                        if (!v65 || (v68 = *(_DWORD *)(v65 + 16), (v68 & 0xFE) != 0x28))
                        {
                          v65 = sub_22F10CF48(v65);
                          v68 = *(_DWORD *)(v65 + 16);
                        }
                        v59 = v75;
                      }
                      while ((v68 & 0x100000) != 0);
                    }
                    v64 = *(_QWORD *)(v65 + 32);
                  }
                  else if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v65 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
                  {
                    v74 = v59;
                    v73 = v51[6];
                    v65 = sub_22F10CF48(v65);
                    v64 = v73;
                    v59 = v74;
                    if (v65)
                    {
                      v66 = *(_DWORD *)(v65 + 16);
                      goto LABEL_111;
                    }
                  }
                  v67 = *((_DWORD *)v48 + 2);
                  v78 = 0;
                  sub_22EFF69F0((uint64_t)v82, v57, (uint64_t)v51, v59, v64, 1, v67, &v78, 0);
                  sub_22E4D8D7C(&v78);
                  v85[0] = v79;
                  v85[1] = v80;
                  v85[2] = v81;
                  sub_22E5BC134(v91, v90, (uint64_t)v51, (uint64_t)v85);
                  goto LABEL_85;
                }
LABEL_84:
                if (v53 == v84)
                  goto LABEL_91;
              }
LABEL_85:
              v48 += 2;
              if (v48 == v49)
              {
                v69 = *(unsigned int *)(v46 + 8);
                goto LABEL_120;
              }
            }
          }
LABEL_121:
          sub_22E5BC320((uint64_t)v93, v90 + 2904);
          sub_22F2840EC((uint64_t)v93);
          llvm::deallocate_buffer(v83[0], (void *)(8 * v84));
          v70 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
          v71 = *(_DWORD *)(a2 + 8);
          if (sub_22F421AC0(v71))
            v72 = 54;
          else
            v72 = v71;
          v78 = &v77;
          *(_QWORD *)&v79 = sub_22E60C020;
          *((_QWORD *)&v79 + 1) = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t **, _QWORD))(*(_QWORD *)v70 + 360))(v70, a1, v72, &v78, 0);
          sub_22F283FC4((uint64_t)v87);
          sub_22E488B4C((uint64_t)v86);
          sub_22F283234(v76);
        }
        sub_22E5F6470(a1, a2);
      }
    }
  }
}

uint64_t sub_22E5FFFB4(uint64_t result, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *(_DWORD *)(result + 16) = v4;
    result = MEMORY[0x23489D23C](16 * v4, 8);
    *(_QWORD *)v2 = result;
    *(_QWORD *)(v2 + 8) = 0;
    v5 = *(unsigned int *)(v2 + 16);
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      do
      {
        *(_QWORD *)result = -4096;
        result += 16;
        v6 -= 16;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
  }
  return result;
}

unint64_t sub_22E600044(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  while (1)
  {
    v3 = a2 & 0xFFFFFFFFFFFFFFF0;
    v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v5 == 39)
    {
      v7 = sub_22F10ACF8(v4);
      v8 = sub_22E600044(a1, v7);
      return sub_22EF5B848(a1, v8, 0);
    }
    if (v5 == 40)
    {
      v10 = *(_DWORD *)(v4 + 16);
      if ((v10 & 0xFE) != 0x28)
      {
        if ((v5 & 0xFE) != 0x28 || (v15 = a2, v4 = sub_22F10CF48(v4), a2 = v15, !v4))
        {
LABEL_12:
          v11 = sub_22E600044(a1, a2);
          return sub_22EF5F8C4(a1, v11, 0);
        }
        v10 = *(_DWORD *)(v4 + 16);
      }
      if ((v10 & 0x100000) != 0)
      {
        do
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v4)
          {
            v12 = *(_DWORD *)(v4 + 16);
            if ((v12 & 0xFE) == 0x28)
              continue;
          }
          v4 = sub_22F10CF48(v4);
          v12 = *(_DWORD *)(v4 + 16);
        }
        while ((v12 & 0x100000) != 0);
      }
      a2 = *(_QWORD *)(v4 + 32);
      goto LABEL_12;
    }
    v6 = *(_DWORD *)(v4 + 16);
    if ((v6 & 0xFEu) - 6 <= 0xFFFFFFFB)
    {
      if ((v5 & 0xFEu) - 2 > 3)
        return sub_22EF64498(a1, a2);
      v13 = a2 & 0xFFFFFFFFFFFFFFF0;
      v14 = a2;
      v4 = sub_22F10CF48(v4);
      v3 = v13;
      a2 = v14;
      if (!v4)
        return sub_22EF64498(a1, a2);
      v6 = *(_DWORD *)(v4 + 16);
    }
    if (v6 != 5)
      break;
    a2 = *(_QWORD *)(v4 + 32);
  }
  if ((v6 & 0x800) != 0)
    return sub_22EF64498(a1, a2);
  else
    return *(_QWORD *)(v3 + 8) | a2 & 7;
}

double sub_22E6001C0(_OWORD *a1, uint64_t a2, int a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  __int128 v10;
  llvm::Value *v11;
  unint64_t v12;
  unint64_t v13;
  llvm::Value *v14;
  __int128 v15;
  double result;
  _BYTE v17[112];
  uint64_t v18[2];
  char v19;
  uint64_t v20;

  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
  v10 = *(_OWORD *)(a5 + 24);
  *(_OWORD *)v17 = *(_OWORD *)(a5 + 8);
  *(_OWORD *)&v17[16] = v10;
  *(_OWORD *)&v17[32] = *(_OWORD *)(a5 + 40);
  if ((BYTE8(v10) & 3) != 0)
    v11 = (llvm::Value *)sub_22F28ABCC(v17, a2);
  else
    v11 = *(llvm::Value **)v17;
  v12 = sub_22F36D7FC(v9);
  v13 = sub_22EF5B848(v9, a4, 0);
  v18[0] = a2;
  v18[1] = a2 + 272;
  v19 = 0;
  v20 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
  v14 = sub_22E50EA80(v18, v11, v12, v13, a3, 0);
  sub_22E619C24((uint64_t)v14, a4, 0, 1, a2, (uint64_t)v17);
  v15 = *(_OWORD *)&v17[24];
  *a1 = *(_OWORD *)&v17[8];
  a1[1] = v15;
  result = *(double *)&v17[40];
  a1[2] = *(_OWORD *)&v17[40];
  return result;
}

uint64_t sub_22E6002C4(uint64_t result, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *(_DWORD *)(result + 16) = v4;
    result = MEMORY[0x23489D23C](8 * v4, 8);
    *(_QWORD *)v2 = result;
    *(_QWORD *)(v2 + 8) = 0;
    v5 = *(unsigned int *)(v2 + 16);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      do
      {
        *(_QWORD *)result = -4096;
        result += 8;
        v6 -= 8;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
  }
  return result;
}

uint64_t sub_22E600354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char v51[32];
  _OWORD v52[4];

  sub_22F0D4E74(a3);
  sub_22E4889F4(a1, a2, v10);
  *(_QWORD *)(a1 + 104) = -1;
  *(_QWORD *)(a1 + 112) = -1;
  *(_QWORD *)(a1 + 136) = a2;
  v11 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
  *(_QWORD *)(a1 + 104) = v11;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 2312);
  v12 = *(_BYTE *)(a2 + 2893);
  *(_BYTE *)(a2 + 2893) = 0;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 2872);
  *(_QWORD *)(a2 + 2872) = v11;
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 129) = 1;
  *(_BYTE *)(a1 + 128) = v12;
  *(_QWORD *)(a1 + 168) = 0;
  v46 = a1 + 168;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  if (a5)
  {
    v13 = *(_DWORD **)(a3 + 24);
    if (v13)
    {
      v16 = *v13;
      v15 = (uint64_t *)(v13 + 4);
      v14 = v16;
      if (v16)
      {
        v45 = &v15[v14];
        do
        {
          v17 = (uint64_t *)sub_22F3EA1B4(*v15);
          if (v17)
          {
            v18 = *v17;
            if (*v17)
            {
              v19 = *(_QWORD *)(v18 + 8);
              if ((v19 & 1) != 0)
              {
                v20 = (uint64_t *)((v19 & 0xFFFFFFFFFFFFFFFELL) + 8);
                v22 = &v20[*(unsigned int *)(v19 & 0xFFFFFFFFFFFFFFFELL)];
              }
              else
              {
                if (v19)
                  v20 = (uint64_t *)(v18 + 8);
                else
                  v20 = 0;
                v21 = (uint64_t *)(v18 + 16);
                if (v19)
                  v22 = v21;
                else
                  v22 = 0;
              }
              while (v20 != v22)
              {
                v23 = *v20;
                if (sub_22F281CA0(*v20))
                {
                  sub_22E4C8440(a2, v23, (uint64_t)&v47);
                  sub_22E4C9A74(a2, (uint64_t)&v47);
                }
                else
                {
                  sub_22E4C652C((_QWORD *)a2, v23);
                }
                ++v20;
              }
            }
          }
          ++v15;
        }
        while (v15 != v45);
      }
    }
  }
  if ((a4 & 0xFF00000000) != 0)
  {
    v25 = sub_22E59F470(a3, a4);
    v26 = *(unsigned int *)(v25 + 8);
    if (!(_DWORD)v26)
    {
LABEL_24:
      sub_22E5BC320(v46, *(_QWORD *)(a1 + 136) + 2904);
      sub_22F2840EC(v46);
      return a1;
    }
    v27 = v25 + (8 * v26 + 40);
    v28 = v27 + 16 * v26;
    while (((*(_QWORD *)v27 >> 1) & 3) - 1 > 1)
    {
LABEL_27:
      v27 += 16;
      if (v27 == v28)
        goto LABEL_24;
    }
    v29 = *(_QWORD *)v27 & 0xFFFFFFFFFFFFFFF8;
    v30 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
    v47 = v29;
    *(_QWORD *)&v52[0] = 0;
    if (!sub_22F246C54((uint64_t *)(a2 + 1928), &v47, v52) || !*(_QWORD *)(*(_QWORD *)&v52[0] + 8))
    {
      v31 = *(_QWORD *)(a2 + 1856);
      if (!v31 || !(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v31 + 32))(v31, v29))
      {
        v33 = *(_QWORD *)(a2 + 1600);
        if (!v33 || (*(_DWORD *)(v33 + 28) & 0x7F) != 1 || (v34 = *(unsigned int *)(v33 + 112), !(_DWORD)v34))
        {
LABEL_40:
          if (*(_QWORD *)(a2 + 1856))
            v32 = sub_22F293C3C(a1 + 104, v29);
          else
            v32 = 0;
LABEL_42:
          v37 = *(_QWORD *)(v29 + 48);
          v38 = *(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0);
          if (!v38 || (v39 = *(_DWORD *)(v38 + 16), (v39 & 0xFE) != 0x28))
          {
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
              || (v44 = v32, v41 = *(_QWORD *)(v29 + 48), v38 = sub_22F10CF48(v38), v37 = v41, v32 = v44, !v38))
            {
LABEL_45:
              v40 = *(_DWORD *)(v27 + 8);
              v47 = 0;
              sub_22EFF69F0((uint64_t)v51, v30, v29, v32, v37, 1, v40, &v47, 0);
              sub_22E4D8D7C(&v47);
              v52[0] = v48;
              v52[1] = v49;
              v52[2] = v50;
              sub_22E5BC134((uint64_t *)(a1 + 144), *(_QWORD *)(a1 + 136), v29, (uint64_t)v52);
              goto LABEL_27;
            }
            v39 = *(_DWORD *)(v38 + 16);
          }
          if ((v39 & 0x100000) != 0)
          {
            do
            {
              v42 = v32;
              v38 = *(_QWORD *)(*(_QWORD *)(v38 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (!v38 || (v43 = *(_DWORD *)(v38 + 16), (v43 & 0xFE) != 0x28))
              {
                v38 = sub_22F10CF48(v38);
                v43 = *(_DWORD *)(v38 + 16);
              }
              v32 = v42;
            }
            while ((v43 & 0x100000) != 0);
          }
          v37 = *(_QWORD *)(v38 + 32);
          goto LABEL_45;
        }
        v35 = *(_QWORD **)(v33 + 104);
        v36 = 16 * v34;
        while ((*v35 & 0xFFFFFFFFFFFFFFF8) != v29)
        {
          v35 += 2;
          v36 -= 16;
          if (!v36)
            goto LABEL_40;
        }
      }
    }
    v32 = 1;
    goto LABEL_42;
  }
  return a1;
}

uint64_t *sub_22E60072C(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD v8[2];
  int v9;
  uint64_t v10;
  char v11;

  sub_22E5B8788((uint64_t)&v10, *(_QWORD *)(a2 + 144), *(_QWORD *)a1);
  v8[0] = 0;
  v8[1] = 0;
  v7 = a2;
  v9 = 0;
  sub_22E6007D0((uint64_t)v8, a2 + 2904);
  sub_22F27B464(*(_QWORD **)(a1 + 8), a2);
  sub_22F27B464(*(_QWORD **)(a1 + 16), a2);
  result = sub_22F293F6C(&v7);
  if (v11)
  {
    v5 = *(_QWORD *)(v10 + 808);
    v6 = *(_DWORD *)(v5 + 3056) - 1;
    *(_DWORD *)(v5 + 3056) = v6;
    return (uint64_t *)sub_22F2847D8(*(_QWORD *)(v5 + 3048) + 40 * v6);
  }
  return result;
}

void *sub_22E6007D0(uint64_t a1, uint64_t a2)
{
  void *result;
  uint64_t v5;
  void *v6;

  result = (void *)llvm::deallocate_buffer(*(llvm **)a1, (void *)(56 * *(unsigned int *)(a1 + 16)));
  v5 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v5;
  if ((_DWORD)v5)
  {
    v6 = (void *)MEMORY[0x23489D23C](56 * v5, 8);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    return memcpy(v6, *(const void **)a2, 56 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

uint64_t *sub_22E600850(_QWORD **a1, uint64_t a2)
{
  uint64_t v5;
  _QWORD v6[2];
  int v7;

  v6[0] = 0;
  v6[1] = 0;
  v5 = a2;
  v7 = 0;
  sub_22E6007D0((uint64_t)v6, a2 + 2904);
  *(_DWORD *)(a2 + 172) = 2;
  sub_22F27B464(*a1, a2);
  return sub_22F293F6C(&v5);
}

uint64_t sub_22E6008B0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (*(_BYTE *)a3 == 5)
  {
    v5 = *(_QWORD *)(a3 + 16);
    if (v5)
      sub_22E5E5158(*a1, v5, 0, 0);
    sub_22E5E5158(*a1, *(_QWORD *)(a3 + 24), 0, 0);
    sub_22E5E5158(*a1, *(_QWORD *)(a3 + 40), 0, 0);
  }
  return 0;
}

uint64_t sub_22E600920(uint64_t a1, uint64_t a2, void (***a3)(_QWORD))
{
  uint64_t i;

  (**a3)(a3);
  for (i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24)
                      + 8 * **(unsigned int **)(*(_QWORD *)a1 + 24)
                      + 8 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 4)
                      + 16); *(_BYTE *)i == 7; i = *(_QWORD *)(i + 8 * *(unsigned int *)(i + 8) + 32))
    ;
  return sub_22E5E5158(a2, i, 0, 0);
}

uint64_t sub_22E600990(uint64_t a1, uint64_t a2, void (***a3)(_QWORD))
{
  uint64_t i;

  (**a3)(a3);
  for (i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24)
                      + 8 * **(unsigned int **)(*(_QWORD *)a1 + 24)
                      + 8 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 4)
                      + 16); *(_BYTE *)i == 7; i = *(_QWORD *)(i + 8 * *(unsigned int *)(i + 8) + 32))
    ;
  return sub_22E5E5158(a2, i, 0, 0);
}

void sub_22E600A00(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
  JUMPOUT(0x2348A0E9CLL);
}

int32x2_t sub_22E600A44@<D0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int32x2_t result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _BYTE v29[24];
  _BYTE v30[56];
  uint64_t v31;

  v13 = *a2;
  v14 = a2[1];
  v15 = a2[2];
  v16 = *((_QWORD *)a2 + 6);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_OWORD *)(a1 + 32);
  v21 = *(_OWORD *)(a1 + 16);
  v22 = v7;
  v23 = *(_OWORD *)(a1 + 48);
  v24 = *(_QWORD *)(a1 + 64);
  v25 = v5;
  *(_OWORD *)&v30[8] = v21;
  *(_OWORD *)&v30[24] = v7;
  *(_OWORD *)&v30[40] = v23;
  *(_QWORD *)v30 = v6;
  v31 = v24;
  sub_22F25406C(v5 + 4088, v30, (__int128 *)&v30[8], (uint64_t)&v17);
  v26 = v6;
  v27 = 0;
  *(_OWORD *)v30 = v21;
  *(_OWORD *)&v30[16] = v22;
  *(_OWORD *)&v30[32] = v23;
  *(_QWORD *)&v30[48] = v24;
  v28 = sub_22F297CB8(v5, v30);
  v8 = *(_QWORD *)a1;
  *(_OWORD *)&v30[8] = v13;
  v9 = *(_QWORD *)(a1 + 72);
  v17 = v8;
  *(_OWORD *)&v30[24] = v14;
  *(_OWORD *)&v30[40] = v15;
  *(_QWORD *)v30 = v9;
  v31 = v16;
  sub_22F25406C(v8 + 4088, v30, (__int128 *)&v30[8], (uint64_t)v29);
  v18 = v9;
  v19 = 0;
  *(_OWORD *)v30 = v13;
  *(_OWORD *)&v30[16] = v14;
  *(_OWORD *)&v30[32] = v15;
  *(_QWORD *)&v30[48] = v16;
  v20 = sub_22F297CB8(v8, v30);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  memset(v30, 0, 28);
  memset(&v30[32], 0, 24);
  LOBYTE(v31) = 0;
  sub_22E4D79C0(a3, v10, v11, v30, 0);
  if (!v9)
  {
    if (!v6)
      return result;
    return sub_22F254324((uint64_t)&v26, v5);
  }
  result = sub_22F254324((uint64_t)&v18, v8);
  if (v6)
    return sub_22F254324((uint64_t)&v26, v5);
  return result;
}

double sub_22E600BF0@<D0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  _BYTE v34[24];
  _BYTE v35[56];
  uint64_t v36;

  v5 = a2[1];
  v18 = *a2;
  v19 = v5;
  v20 = a2[2];
  v21 = *((_QWORD *)a2 + 6);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(_OWORD *)(a1 + 40);
  v26 = *(_OWORD *)(a1 + 24);
  v27 = v8;
  v28 = *(_OWORD *)(a1 + 56);
  v29 = *(_QWORD *)(a1 + 72);
  v30 = v6;
  *(_OWORD *)&v35[8] = v26;
  *(_OWORD *)&v35[24] = v8;
  *(_OWORD *)&v35[40] = v28;
  *(_QWORD *)v35 = v7;
  v36 = v29;
  sub_22F25406C(v6 + 4088, v35, (__int128 *)&v35[8], (uint64_t)&v22);
  v31 = v7;
  v32 = 0;
  *(_OWORD *)v35 = v26;
  *(_OWORD *)&v35[16] = v27;
  *(_OWORD *)&v35[32] = v28;
  *(_QWORD *)&v35[48] = v29;
  v33 = sub_22F297CB8(v6, v35);
  v9 = *(_QWORD *)a1;
  *(_OWORD *)&v35[8] = v18;
  v10 = *(_QWORD *)(a1 + 80);
  v22 = v9;
  *(_OWORD *)&v35[24] = v19;
  *(_OWORD *)&v35[40] = v20;
  *(_QWORD *)v35 = v10;
  v36 = v21;
  sub_22F25406C(v9 + 4088, v35, (__int128 *)&v35[8], (uint64_t)v34);
  v23 = v10;
  v24 = 0;
  *(_OWORD *)v35 = v18;
  *(_OWORD *)&v35[16] = v19;
  *(_OWORD *)&v35[32] = v20;
  *(_QWORD *)&v35[48] = v21;
  v25 = sub_22F297CB8(v9, v35);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 16);
  memset(v35, 0, 28);
  memset(&v35[32], 0, 24);
  LOBYTE(v36) = 0;
  sub_22E4D79C0(a3, v11, v12, v35, 0);
  v13 = &v18;
  if (!*(_BYTE *)(a1 + 96))
    v13 = a3;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = v13[1];
  *(_OWORD *)v14 = *v13;
  *(_OWORD *)(v14 + 16) = v15;
  v16 = v13[2];
  *(_OWORD *)(v14 + 32) = v16;
  *(_BYTE *)(v14 + 48) = *((_BYTE *)v13 + 48);
  if (v10)
  {
    *(int32x2_t *)&v16 = sub_22F254324((uint64_t)&v23, v9);
    if (!v7)
      return *(double *)&v16;
  }
  else if (!v7)
  {
    return *(double *)&v16;
  }
  *(int32x2_t *)&v16 = sub_22F254324((uint64_t)&v31, v6);
  return *(double *)&v16;
}

__n128 sub_22E600DD0@<Q0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;

  v3 = *a1;
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  *(_BYTE *)(v3 + 48) = *((_BYTE *)a2 + 48);
  *(_OWORD *)(v3 + 16) = v5;
  *(_OWORD *)(v3 + 32) = v6;
  *(_OWORD *)v3 = v4;
  v7 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a3 = *(_OWORD *)(a1 + 1);
  *(_OWORD *)(a3 + 16) = v7;
  result = *(__n128 *)(a1 + 5);
  *(__n128 *)(a3 + 32) = result;
  *(_QWORD *)(a3 + 48) = a1[7];
  return result;
}

uint64_t sub_22E600E0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_22F28423C(*a1);
  return sub_22E5E5158(a2, *(_QWORD *)(v3 + 8 * *(unsigned int *)(v3 + 8) + 32), 0, 0);
}

uint64_t sub_22E600E48(_BYTE *a1, _QWORD *a2, uint64_t a3)
{
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;
  __int16 v14;
  _QWORD v15[3];
  char v16;
  char v17;
  uint64_t v18;

  if (!*a1)
    return 0;
  sub_22E5F9AA8((uint64_t)v15, (uint64_t)a2, (unsigned __int8 *)a3);
  if (v17)
  {
    v6 = v18;
    *(_BYTE *)(v18 + 2893) = v16;
    sub_22E48B274(v6, v15[0], v15[2], 0, 0);
    v17 = 0;
    *(_QWORD *)(v18 + 2872) = v15[1];
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * **(unsigned int **)(a3 + 24) + 136);
  v11[0] = a2;
  v11[1] = a2 + 34;
  v12 = 0;
  v13 = *(_QWORD *)(a2[18] + 232);
  v8 = sub_22E50E974(v11, v7, v5);
  v9 = a2[4];
  v14 = 257;
  return sub_22E3BF45C(a2 + 34, v8, v9, 0, (uint64_t)v11);
}

uint64_t sub_22E600F10(uint64_t result)
{
  **(_BYTE **)(result + 8) = 1;
  return result;
}

void sub_22E600F20()
{
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22E600F34(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](8 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2943A8(a1, v4, (_QWORD *)v4 + v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E600FF4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  llvm *v6;
  uint64_t v7;

  v1 = result;
  v2 = *(unsigned int *)(result + 16);
  v3 = *(_DWORD *)(result + 8);
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(llvm **)result;
      v7 = 16 * v2;
      do
      {
        *(_QWORD *)v6 = -4096;
        v6 = (llvm *)((char *)v6 + 16);
        v7 -= 16;
      }
      while (v7);
    }
  }
  else
  {
    llvm::deallocate_buffer(*(llvm **)result, (void *)(16 * v2));
    return sub_22E5FFFB4(v1, v5);
  }
  return result;
}

uint64_t sub_22E601090(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = *(unsigned int *)(result + 16);
  v3 = *(_DWORD *)(result + 8);
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(llvm **)result;
      v7 = 24 * v2;
      do
      {
        *(_QWORD *)v6 = -4096;
        v6 = (llvm *)((char *)v6 + 24);
        v7 -= 24;
      }
      while (v7);
    }
  }
  else
  {
    result = llvm::deallocate_buffer(*(llvm **)result, (void *)(24 * v2));
    if (v5)
    {
      v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      *(_DWORD *)(v1 + 16) = v9;
      result = MEMORY[0x23489D23C](24 * v9, 8);
      *(_QWORD *)v1 = result;
      *(_QWORD *)(v1 + 8) = 0;
      v10 = *(unsigned int *)(v1 + 16);
      if ((_DWORD)v10)
      {
        v11 = 24 * v10;
        do
        {
          *(_QWORD *)result = -4096;
          result += 24;
          v11 -= 24;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
      *(_DWORD *)(v1 + 16) = 0;
    }
  }
  return result;
}

uint64_t sub_22E6011A0(uint64_t *a1, __int128 *a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[3];
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21[2];
  int v22;
  _QWORD v23[2];
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v14 = *a2;
  v15 = a2[1];
  v16 = a2[2];
  v11 = *a3;
  v12 = a3[1];
  v13 = a3[2];
  v4 = *a1;
  v19 = 1;
  v5 = *(_QWORD *)(v4 + 1992) - *(_QWORD *)(v4 + 2000);
  v6 = *(_QWORD *)(v4 + 2312);
  v18 = *(_BYTE *)(v4 + 2893);
  *(_BYTE *)(v4 + 2893) = 0;
  v7 = *(_QWORD *)(v4 + 2872);
  v17[0] = v5;
  v17[1] = v7;
  v17[2] = v6;
  *(_QWORD *)(v4 + 2872) = v5;
  v21[0] = 0;
  v21[1] = 0;
  v20 = v4;
  v22 = 0;
  v23[0] = 0;
  v23[1] = 0;
  v24 = 0;
  v8 = a1[3];
  v25 = v14;
  v26 = v15;
  v27 = v16;
  sub_22E5BC134(v21, v4, v8, (uint64_t)&v25);
  v9 = a1[2];
  v25 = v11;
  v26 = v12;
  v27 = v13;
  sub_22E5BC134(v21, v4, v9, (uint64_t)&v25);
  sub_22E5BC320((uint64_t)v23, v4 + 2904);
  sub_22F2840EC((uint64_t)v23);
  sub_22E4D89CC(v4);
  return sub_22F283FC4((uint64_t)v17);
}

uint64_t sub_22E6012C0(_QWORD *a1, __int128 *a2, __int128 *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _QWORD v25[3];
  _BYTE v26[56];

  v18 = *a2;
  v19 = a2[1];
  v20 = a2[2];
  v5 = a3[1];
  v22 = *a3;
  v4 = v22;
  v23 = v5;
  v24 = a3[2];
  v6 = v24;
  v7 = *a1;
  v8 = *(_QWORD *)(*a1 + 1992) - *(_QWORD *)(*a1 + 2000);
  v9 = *(_QWORD *)(*a1 + 2312);
  v10 = *(_BYTE *)(*a1 + 2893);
  *(_BYTE *)(v7 + 2893) = 0;
  v11 = *(_QWORD *)(v7 + 2872);
  *(_QWORD *)(v7 + 2872) = v8;
  *(_QWORD *)v26 = a1[1];
  *(_OWORD *)&v26[8] = v4;
  *(_OWORD *)&v26[24] = v5;
  *(_OWORD *)&v26[40] = v6;
  sub_22E3CEC9C(v7 + 2904, v26, (__int128 *)&v26[8], (uint64_t)v25);
  v12 = a1[2];
  *(_OWORD *)&v26[16] = v19;
  *(_OWORD *)&v26[32] = v20;
  *(_OWORD *)v26 = v18;
  v13 = *(_QWORD *)(v12 + 8);
  v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v14 & 8) != 0)
  {
    v16 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  sub_22E4DA890(v7, v12, v26, v15 | v16 | (v14 | v13) & 7, 0);
  v21 = a1[1];
  v25[0] = 0;
  if (sub_22E3CED3C((uint64_t *)(v7 + 2904), &v21, v25))
  {
    *(_QWORD *)v25[0] = -8192;
    *(int32x2_t *)(v7 + 2912) = vadd_s32(*(int32x2_t *)(v7 + 2912), (int32x2_t)0x1FFFFFFFFLL);
  }
  *(_BYTE *)(v7 + 2893) = v10;
  result = sub_22E48B274(v7, v8, v9, 0, 0);
  *(_QWORD *)(v7 + 2872) = v11;
  return result;
}

uint64_t sub_22E601430(_BYTE **a1, _QWORD *a2)
{
  sub_22E4C9320(a2, *a1);
  return 1;
}

uint64_t sub_22E601454(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t result;

  v6 = a1[1];
  v7 = *(_QWORD *)(v6 + 1840);
  v8 = a3 - 24;
  if (!a3)
    v8 = 0;
  *(_QWORD *)(v6 + 1840) = v8;
  v9 = *(_QWORD *)(v6 + 320);
  v10 = *(_QWORD *)(v6 + 328);
  v11 = *(_QWORD *)(v6 + 1712);
  v12 = *(_QWORD *)(v6 + 1720);
  v13 = *(_DWORD *)(v6 + 1728);
  v14 = *(_QWORD *)(v6 + 2008);
  v15 = *(_DWORD *)(v6 + 2640);
  *(_DWORD *)(v6 + 2640) = v15 + 1;
  *(_QWORD *)(v6 + 1712) = a6;
  *(_QWORD *)(v6 + 1720) = v14;
  *(_DWORD *)(v6 + 1728) = v15;
  result = sub_22F2945C8((uint64_t *)v6, *a1, a4);
  *(_QWORD *)(v6 + 1840) = v7;
  *(_QWORD *)(v6 + 1712) = v11;
  *(_QWORD *)(v6 + 1720) = v12;
  *(_DWORD *)(v6 + 1728) = v13;
  if (v9)
    return sub_22E3CB840(v6 + 272, v9, v10);
  *(_QWORD *)(v6 + 320) = 0;
  *(_QWORD *)(v6 + 328) = 0;
  return result;
}

uint64_t sub_22E601520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t result;

  result = a4;
  *a8 = a7;
  return result;
}

void sub_22E601534()
{
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22E601548(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FA666F0;
  result[1] = v3;
  return result;
}

uint64_t sub_22E60157C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FA666F0;
  a2[1] = v2;
  return result;
}

uint64_t *sub_22E601598(uint64_t a1, llvm::BasicBlock **a2)
{
  return sub_22F294690(*(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_22E6015A8(uint64_t *a1, int32x2_t *a2, void (***a3)(_QWORD))
{
  int32x2_t v5;
  int32x2_t v6;
  int32x2_t v7;
  int v8;
  uint64_t v9;
  _QWORD v11[3];
  __int8 v12;
  char v13;
  int32x2_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD v18[2];
  int v19;

  (**a3)(a3);
  v13 = 1;
  v5 = (int32x2_t)(*(_QWORD *)&a2[249] - *(_QWORD *)&a2[250]);
  v6 = a2[289];
  v12 = a2[361].i8[5];
  a2[361].i8[5] = 0;
  v7 = a2[359];
  v11[0] = v5;
  v11[1] = v7;
  v11[2] = v6;
  a2[359] = v5;
  v15 = 0;
  v16 = 0;
  v14 = a2;
  v17 = 0;
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  v8 = sub_22E5F32D4(a2, *(unsigned int **)(*a1 + 24));
  sub_22E5F2534((uint64_t)a2, *a1, (uint64_t)v11);
  if (v8)
    (*(void (**)(_QWORD, int32x2_t *, _QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)&a2[18]
                                                                                                + 808)
                                                                                  + 184))(*(_QWORD *)(*(_QWORD *)&a2[18] + 808), a2, *(unsigned int *)(*a1 + 12), 89, 0, 1);
  sub_22E5F310C((uint64_t)a2, *(unsigned int **)(*a1 + 24), (uint64_t)v11);
  sub_22E5F4508();
  sub_22E5BC320((uint64_t)v18, (uint64_t)&v14[363]);
  sub_22F2840EC((uint64_t)v18);
  v9 = sub_22E59F470(*a1, 40);
  sub_22E5E5158(a2, *(_QWORD *)(v9 + 8 * *(unsigned int *)(v9 + 8) + 32), 0, 0);
  sub_22E5F523C((uint64_t)a2, *a1);
  return sub_22F283FC4((uint64_t)v11);
}

uint64_t sub_22E60170C()
{
  return 0;
}

uint64_t sub_22E601714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  _OWORD v16[3];
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)a1;
  if (a2)
  {
    sub_22E3CB840(v6 + 272, a2, a3);
  }
  else
  {
    *(_QWORD *)(v6 + 320) = 0;
    *(_QWORD *)(v6 + 328) = 0;
  }
  sub_22E4D8D7C(&v17);
  v16[0] = v18;
  v16[1] = v19;
  v16[2] = v20;
  v7 = *(uint64_t **)(a1 + 16);
  v8 = *v7;
  v9 = v7[1];
  if ((BYTE8(v19) & 3) != 0)
    v10 = sub_22F28ABCC(v16, v6);
  else
    v10 = *(_QWORD *)&v16[0];
  v21[0] = v10;
  v21[1] = a4;
  sub_22E5F723C(v6, v8, v9, v21, 2);
  v11 = *(_QWORD *)(v6 + 1992) - *(_QWORD *)(v6 + 2000);
  v12 = *(_QWORD *)(v6 + 2312);
  v13 = *(_BYTE *)(v6 + 2893);
  *(_BYTE *)(v6 + 2893) = 0;
  v14 = *(_QWORD *)(v6 + 2872);
  *(_QWORD *)(v6 + 2872) = v11;
  sub_22E5E5158(v6, **(_QWORD **)(a1 + 24), 0, 0);
  *(_BYTE *)(v6 + 2893) = v13;
  result = sub_22E48B274(v6, v11, v12, 0, 0);
  *(_QWORD *)(v6 + 2872) = v14;
  return result;
}

uint64_t sub_22E601860(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  int v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(result + 16))
  {
    v1 = result;
    v3 = *(_QWORD *)result;
    v2 = *(_QWORD *)(result + 8);
    if (!*(_BYTE *)(*(_QWORD *)result + 2892) && (v4 = *(_QWORD *)(v3 + 2880)) != 0)
    {
      sub_22F257BAC(v4, *(_DWORD *)(v2 + 12), &v8);
      v2 = *(_QWORD *)(v1 + 8);
    }
    else
    {
      v8 = 0;
    }
    for (i = *(_QWORD *)(*(_QWORD *)(v2 + 24)
                        + 8 * **(unsigned int **)(v2 + 24)
                        + 8 * *(unsigned int *)(*(_QWORD *)(v2 + 24) + 4)
                        + 16); *(_BYTE *)i == 7; i = *(_QWORD *)(i + 8 * *(unsigned int *)(i + 8) + 32))
      ;
    v6 = *(_DWORD *)(v3 + 1584);
    *(_DWORD *)(v3 + 1584) = 1;
    sub_22E5E5158(v3, i, 0, 0);
    --*(_DWORD *)(v3 + 1544);
    *(_DWORD *)(v3 + 1584) = v6;
    v7 = v8;
    if (v8)
      llvm::MetadataTracking::track();
    result = llvm::OpenMPIRBuilder::applySimd();
    if (v7)
      result = llvm::MetadataTracking::untrack();
    if (v8)
      return llvm::MetadataTracking::untrack();
  }
  return result;
}

uint64_t sub_22E60197C(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD, uint64_t))
{
  return sub_22E60198C(a2, *a1, a3);
}

uint64_t sub_22E60198C(uint64_t a1, uint64_t a2, void (***a3)(_QWORD, uint64_t))
{
  int v5;
  uint64_t result;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  __n128 v15;
  unsigned int *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  _QWORD v23[2];
  _QWORD v24[3];
  uint64_t v25;
  _QWORD v26[3];
  _QWORD v27[17];
  _DWORD v28[5];
  char v29;
  _QWORD v30[3];
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _QWORD v37[2];
  int v38;
  _QWORD v39[3];
  char v40;
  char v41;
  uint64_t v42;

  (**a3)(a3, a1);
  sub_22E5F9AA8((uint64_t)v39, a1, (unsigned __int8 *)a2);
  v5 = *(_DWORD *)(a2 + 8);
  if ((sub_22F421B08(v5) & 1) != 0
    || sub_22F421A30(v5)
    || ((v5 - 36) <= 0x29 ? (v8 = ((1 << (v5 - 36)) & 0x30000000C03) == 0) : (v8 = 1),
        !v8))
  {
    sub_22E4C652C((_QWORD *)a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 88) + 16));
    sub_22E4D8D7C(v30);
    sub_22E4C652C((_QWORD *)a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 96) + 16));
    sub_22E4D8D7C(v30);
  }
  v29 = 0;
  result = sub_22E61F3B0(a1, *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 40), &v29, 0);
  if ((_DWORD)result)
  {
    if (!v29)
      goto LABEL_5;
    v10 = 0;
  }
  else
  {
    v30[0] = "simd.if.then";
    LOWORD(v33) = 259;
    v9 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v30[0] = "simd.if.end";
    LOWORD(v33) = 259;
    v10 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v11 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 40);
    v12 = sub_22E3CF180(a1 + 3904, a2);
    if (v13)
      v14 = v12;
    else
      v14 = 0;
    sub_22E5F9FF4(a1, a2, v11, (uint64_t)v9, (uint64_t)v10, v14);
    sub_22E5ED9B4((_QWORD *)a1, v9, 0);
    sub_22E3CB7B0((_QWORD *)a1, a2, 0);
  }
  sub_22E4C652C((_QWORD *)a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 16) + 16));
  sub_22E4D89CC(a1);
  v16 = *(unsigned int **)(a2 + 24);
  v17 = *(unsigned __int8 **)&v16[2 * *v16 + 6];
  if (*v17 == 161)
  {
    sub_22E4C652C((_QWORD *)a1, *((_QWORD *)v17 + 2));
    sub_22E4D89CC(a1);
    v16 = *(unsigned int **)(a2 + 24);
  }
  sub_22E5FA32C(a1, v16, v15);
  sub_22E5F7384(a1, *(unsigned int **)(a2 + 24));
  v32 = 1;
  v18 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
  v19 = *(_QWORD *)(a1 + 2312);
  v31 = *(_BYTE *)(a1 + 2893);
  *(_BYTE *)(a1 + 2893) = 0;
  v20 = *(_QWORD *)(a1 + 2872);
  v30[0] = v18;
  v30[1] = v20;
  v30[2] = v19;
  *(_QWORD *)(a1 + 2872) = v18;
  v34 = 0;
  v35 = 0;
  v33 = a1;
  v36 = 0;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  sub_22F28E264(a1, a2, (uint64_t)v30);
  sub_22E5F766C(a1, a2, (uint64_t)v30);
  sub_22E5F310C(a1, *(unsigned int **)(a2 + 24), (uint64_t)v30);
  sub_22E5F4508();
  sub_22E4D8D7C(v27);
  sub_22E5B8ABC((uint64_t)v28, a1, a2, (uint64_t)v27);
  v21 = sub_22E5F386C(a1, a2, (uint64_t)v30);
  sub_22E5BC320((uint64_t)v37, v33 + 2904);
  sub_22F2840EC((uint64_t)v37);
  v22 = *(_DWORD *)(a2 + 8) - 56;
  if (v22 <= 0x2A && ((1 << v22) & 0x6000001CF91) != 0)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 808) + 592))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808), a1, a2);
  v25 = a2;
  v26[0] = &v25;
  v26[1] = sub_22E601E90;
  v26[2] = 0;
  v23[0] = a2;
  v23[1] = v30;
  v24[0] = v23;
  v24[1] = sub_22E601EA0;
  v24[2] = 0;
  sub_22E5F8828((_QWORD *)a1, a2, (uint64_t)v26, (uint64_t)v24);
  sub_22E5F7BC8(a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_22E601F68, (uint64_t)v26);
  if (v21)
    sub_22E5F3CC4(a1, (unsigned __int8 *)a2, 1, 0);
  sub_22E5F523C(a1, a2);
  sub_22E5F6264(a1, a2, (uint64_t (*)(uint64_t, _QWORD *))sub_22E601F70, (uint64_t)v26);
  sub_22F283234(v28);
  sub_22F283FC4((uint64_t)v30);
  result = sub_22F28DF10(a1, *(unsigned int **)(a2 + 24), (uint64_t (*)(uint64_t, uint64_t))sub_22E601F78, (uint64_t)v30);
  if (v10)
  {
    sub_22E5EDA70(a1);
    result = sub_22E5ED9B4((_QWORD *)a1, v10, 1);
  }
LABEL_5:
  if (v41)
  {
    v7 = v42;
    *(_BYTE *)(v42 + 2893) = v40;
    result = sub_22E48B274(v7, v39[0], v39[2], 0, 0);
    *(_QWORD *)(v42 + 2872) = v39[1];
  }
  return result;
}

uint64_t sub_22E601E90(uint64_t *a1, uint64_t a2)
{
  return sub_22E5F78DC(a2, *a1);
}

uint64_t sub_22E601EA0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  char v15;
  uint64_t v16;

  v9 = *a1;
  v10 = *(_QWORD *)(*(_QWORD *)(a1[1] + 32) + 1992) - *(_QWORD *)(*(_QWORD *)(a1[1] + 32) + 2000) != *(_QWORD *)a1[1];
  v11 = *(_QWORD *)(v9 + 24) + 8 * **(unsigned int **)(v9 + 24);
  v12 = *(unsigned __int8 **)(v11 + 48);
  v13 = *(_QWORD *)(v11 + 64);
  v16 = *a1;
  return sub_22F28DA58(a2, v9, v10, v12, v13, (void (*)(uint64_t, uint64_t))sub_22E601F18, (uint64_t)&v16, a8, (void (*)(uint64_t, uint64_t))nullsub_68, (uint64_t)&v15);
}

uint64_t sub_22E601F18(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v5;
  int v6;

  v3 = *a1;
  *(_QWORD *)&v5 = 0;
  *((_QWORD *)&v5 + 1) = -1;
  v6 = 0;
  sub_22F28D424(a2, v3, &v5);
  return sub_22E5E5100(a2, v3);
}

uint64_t sub_22E601F68()
{
  return 0;
}

uint64_t sub_22E601F70()
{
  return 0;
}

uint64_t sub_22E601F78()
{
  return 0;
}

uint64_t sub_22E601F80(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _DWORD *i;

  v4 = *(_QWORD *)a1;
  result = sub_22F421AC0(*(_DWORD *)(*(_QWORD *)a1 + 8));
  if ((result & 1) != 0)
    return sub_22E5F78DC(a2, v4);
  *(_BYTE *)(a2 + 168) = a1[8] ^ 1;
  v6 = *(unsigned int **)(v4 + 24);
  if (v6)
  {
    v9 = *v6;
    v7 = v6 + 4;
    v8 = v9;
    if (v9)
    {
      v10 = 8 * v8;
      for (i = v7; *(_DWORD *)(*(_QWORD *)i + 8) != 59; i += 2)
      {
        v10 -= 8;
        if (!v10)
          return result;
      }
    }
    else
    {
      i = v7;
    }
    if (i != &v7[2 * v8] && *(_QWORD *)i && !*(_DWORD *)(*(_QWORD *)i + 16))
      *(_BYTE *)(a2 + 168) = 1;
  }
  return result;
}

uint64_t sub_22E60203C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _BOOL4 v13;
  __int128 v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  uint64_t v25;

  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_DWORD *)(*(_QWORD *)a1 + 12);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 32) + 1992)
      - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 32) + 2000) != **(_QWORD **)(a1 + 64);
  v14 = *(_OWORD *)(a1 + 16);
  v24 = *(_DWORD *)(a1 + 32);
  v25 = *(_QWORD *)(a1 + 40);
  v18 = *(_DWORD *)(a1 + 48);
  v15 = *(unsigned __int8 **)(v11 + 224);
  v16 = *(_QWORD *)(v11 + 208);
  v21 = v9;
  v22 = v10;
  v23 = v14;
  v19 = *(_BYTE *)(a1 + 52);
  v20 = v12;
  return sub_22F28DA58(a2, v10, v13, v15, v16, (void (*)(uint64_t, uint64_t))sub_22E6020DC, (uint64_t)&v22, a8, (void (*)(uint64_t, uint64_t))sub_22E60211C, (uint64_t)&v18);
}

uint64_t sub_22E6020DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, __int128 *);
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v2 = *a1;
  v7 = *(_OWORD *)(a1 + 1);
  v3 = a1[4];
  v8 = a1[3];
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __int128 *))v3;
  v4 = *(_QWORD *)(v3 + 8);
  v9 = v7;
  v10 = v8;
  return v5(v4, a2, v2, &v9);
}

uint64_t sub_22E60211C(unsigned int *a1, uint64_t a2)
{
  return (**((uint64_t (***)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))a1 + 2))(*(_QWORD *)(*((_QWORD *)a1 + 2) + 8), a2, a1[2], *a1, *((unsigned __int8 *)a1 + 4));
}

_BYTE *sub_22E602134(_BYTE *result, uint64_t a2)
{
  if (!*result)
    return (_BYTE *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 144) + 808) + 264))(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 808));
  return result;
}

_BYTE *sub_22E602164(_BYTE *result, uint64_t a2)
{
  if (*result)
    return (_BYTE *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 144) + 808) + 256))(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 808));
  return result;
}

uint64_t sub_22E602188(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[2];

  v3 = *a1;
  v5[0] = sub_22F294764;
  v5[1] = sub_22E6021D8;
  return sub_22E5FCF20(a2, v3, (uint64_t)v5, *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * **(unsigned int **)(v3 + 24) + 160));
}

uint64_t sub_22E6021D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[3];
  uint64_t v8;

  v8 = a2;
  if (sub_22F421AC0(*(_DWORD *)(a2 + 8)))
    v4 = 34;
  else
    v4 = 33;
  v7[0] = &v8;
  v7[1] = sub_22E6023E4;
  v7[2] = 0;
  v6[0] = sub_22F294750;
  v6[1] = sub_22E602254;
  return sub_22E5F5E6C(a1, a2, v4, (uint64_t)v7, (uint64_t)v6);
}

uint64_t sub_22E602254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  _BYTE v14[32];
  __int16 v15;
  _OWORD v16[3];
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[32];
  __int16 v22;
  _OWORD v23[3];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  sub_22E4D8D7C(&v24);
  v23[0] = v25;
  v23[1] = v26;
  v23[2] = v27;
  WORD4(v19) = 257;
  v5 = sub_22E3C2A7C((uint64_t *)(a1 + 272), (uint64_t)v23, (uint64_t)&v17);
  v6 = *(_QWORD *)(a1 + 88);
  v22 = 257;
  v7 = sub_22E3BF45C((uint64_t *)(a1 + 272), v5, v6, 0, (uint64_t)v21);
  v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v8) = v7;
  ++*(_DWORD *)(a3 + 8);
  sub_22E4D8D7C(&v17);
  v16[0] = v18;
  v16[1] = v19;
  v16[2] = v20;
  v22 = 257;
  v9 = sub_22E3C2A7C((uint64_t *)(a1 + 272), (uint64_t)v16, (uint64_t)v21);
  v10 = *(_QWORD *)(a1 + 88);
  v15 = 257;
  result = sub_22E3BF45C((uint64_t *)(a1 + 272), v9, v10, 0, (uint64_t)v14);
  v12 = result;
  v13 = *(_DWORD *)(a3 + 8);
  if (v13 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v13) = v12;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

uint64_t sub_22E6023E4(uint64_t *a1, _QWORD *a2, void (***a3)(_QWORD))
{
  unsigned __int8 *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];

  (**a3)(a3);
  v5 = (unsigned __int8 *)*a1;
  v6 = *(_DWORD *)(*a1 + 8);
  v8 = !sub_22F421AC0(v6) && ((v7 = *v5, v7 == 31) || v7 == 49 || v7 == 56) && v5[36] != 0;
  sub_22F293FF0((uint64_t)(a2 + 430), (uint64_t)a2, v6, v8);
  v9 = *a1;
  v10 = *(_QWORD *)(*(_QWORD *)(*a1 + 24) + 8 * **(unsigned int **)(*a1 + 24) + 168);
  v13[0] = sub_22F2947C0;
  v13[1] = sub_22E6024D0;
  v12[0] = sub_22F2947D0;
  v12[1] = sub_22E6027D0;
  sub_22E5F8DA8((uint64_t)a2, v9, v10, (uint64_t)v13, (uint64_t)v12);
  return sub_22F294168((uint64_t)(a2 + 430), a2);
}

double sub_22E6024D0@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  llvm::Value *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  llvm::Value *v13;
  unsigned int v14;
  llvm::Value *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  llvm::Value *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  double result;
  __int128 v30;
  _OWORD v31[8];
  uint64_t v32;
  _OWORD v33[8];
  uint64_t v34;
  _OWORD v35[8];
  uint64_t v36;
  _OWORD v37[8];
  uint64_t v38;
  _OWORD v39[8];
  uint64_t v40;
  _OWORD v41[8];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  char v63;
  uint64_t v64;

  sub_22E4C652C(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 88) + 16));
  sub_22E4D8D7C(&v52);
  sub_22E4C652C(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 96) + 16));
  sub_22E4D8D7C(&v43);
  sub_22E4D8D7C(v41);
  sub_22E4D8D7C(v39);
  v37[6] = v41[6];
  v37[7] = v41[7];
  v38 = v42;
  v37[2] = v41[2];
  v37[3] = v41[3];
  v37[4] = v41[4];
  v37[5] = v41[5];
  v37[0] = v41[0];
  v37[1] = v41[1];
  sub_22EFF605C(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 144));
  v7 = (llvm::Value *)sub_22F25F748((uint64_t)a1, (uint64_t)v37, v6);
  v8 = *(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24);
  v9 = *(_QWORD *)(v8 + 144);
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 8);
  sub_22EFF605C(v9);
  v61 = a1;
  v62 = a1 + 34;
  v63 = 0;
  v64 = *(_QWORD *)(a1[18] + 232);
  v13 = sub_22E50EA80((uint64_t *)&v61, v7, v10, v11, v12, 0);
  v35[6] = v39[6];
  v35[7] = v39[7];
  v36 = v40;
  v35[2] = v39[2];
  v35[3] = v39[3];
  v35[4] = v39[4];
  v35[5] = v39[5];
  v35[0] = v39[0];
  v35[1] = v39[1];
  sub_22EFF605C(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 152));
  v15 = (llvm::Value *)sub_22F25F748((uint64_t)a1, (uint64_t)v35, v14);
  v16 = *(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24);
  v17 = *(_QWORD *)(v16 + 152);
  v18 = *(_QWORD *)(v17 + 8);
  v19 = *(_QWORD *)(*(_QWORD *)(v16 + 16) + 8);
  sub_22EFF605C(v17);
  v61 = a1;
  v62 = a1 + 34;
  v63 = 0;
  v64 = *(_QWORD *)(a1[18] + 232);
  v21 = sub_22E50EA80((uint64_t *)&v61, v15, v18, v19, v20, 0);
  v33[6] = v58;
  v33[7] = v59;
  v34 = v60;
  v33[2] = v54;
  v33[3] = v55;
  v33[4] = v56;
  v33[5] = v57;
  v33[0] = v52;
  v33[1] = v53;
  sub_22E4E87FC(a1, v13, v33, 0);
  v31[6] = v49;
  v31[7] = v50;
  v32 = v51;
  v31[2] = v45;
  v31[3] = v46;
  v31[4] = v47;
  v31[5] = v48;
  v31[0] = v43;
  v31[1] = v44;
  sub_22E4E87FC(a1, v21, v31, 0);
  v22 = v59;
  *(_OWORD *)(a3 + 96) = v58;
  *(_OWORD *)(a3 + 112) = v22;
  v23 = v55;
  *(_OWORD *)(a3 + 32) = v54;
  *(_OWORD *)(a3 + 48) = v23;
  v24 = v57;
  *(_OWORD *)(a3 + 64) = v56;
  *(_OWORD *)(a3 + 80) = v24;
  v25 = v53;
  *(_OWORD *)a3 = v52;
  *(_OWORD *)(a3 + 16) = v25;
  v26 = v47;
  *(_OWORD *)(a3 + 216) = v48;
  v27 = v50;
  *(_OWORD *)(a3 + 232) = v49;
  *(_OWORD *)(a3 + 248) = v27;
  v28 = v43;
  *(_OWORD *)(a3 + 152) = v44;
  result = *(double *)&v45;
  v30 = v46;
  *(_OWORD *)(a3 + 168) = v45;
  *(_OWORD *)(a3 + 184) = v30;
  *(_OWORD *)(a3 + 200) = v26;
  *(_QWORD *)(a3 + 128) = v60;
  *(_QWORD *)(a3 + 264) = v51;
  *(_OWORD *)(a3 + 136) = v28;
  return result;
}

uint64_t sub_22E6027D0(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  unint64_t v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v13[40];
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 16) + 8);
  v8 = a3[1];
  v14 = *a3;
  v15 = v8;
  v16 = a3[2];
  v9 = *(_DWORD *)(a2 + 12);
  sub_22E6281E0(*(_QWORD **)(a1 + 144), v7, (uint64_t)v13);
  v10 = sub_22E4E6994(a1, (uint64_t)&v14, 0, v7, v9, 2, (uint64_t)v13, 0);
  v11 = a4[1];
  v14 = *a4;
  v15 = v11;
  v16 = a4[2];
  LODWORD(a4) = *(_DWORD *)(a2 + 12);
  sub_22E6281E0(*(_QWORD **)(a1 + 144), v7, (uint64_t)v13);
  sub_22E4E6994(a1, (uint64_t)&v14, 0, v7, a4, 2, (uint64_t)v13, 0);
  return v10;
}

uint64_t sub_22E6028BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[2];

  v3 = *a1;
  v5[0] = sub_22F294764;
  v5[1] = sub_22E6021D8;
  return sub_22E5FCF20(a2, v3, (uint64_t)v5, *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * **(unsigned int **)(v3 + 24) + 160));
}

uint64_t sub_22E60290C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[2];

  v3 = *a1;
  v5[0] = sub_22F294764;
  v5[1] = sub_22E5F8964;
  return sub_22E5FCF20(a2, v3, (uint64_t)v5, *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * **(unsigned int **)(v3 + 24) + 64));
}

uint64_t sub_22E60295C(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD, uint64_t))
{
  return sub_22E60198C(a2, *a1, a3);
}

uint64_t sub_22E60296C(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD, uint64_t))
{
  return sub_22E60198C(a2, *a1, a3);
}

uint64_t sub_22E60297C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  unsigned int *v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *i;

  v3 = *a1;
  result = sub_22F421AC0(*(_DWORD *)(*a1 + 8));
  if ((_DWORD)result)
    return sub_22E5F78DC(a2, v3);
  v5 = *(unsigned int **)(v3 + 24);
  if (v5)
  {
    v8 = *v5;
    v6 = v5 + 4;
    v7 = v8;
    if (v8)
    {
      v9 = 8 * v7;
      for (i = v6; *(_DWORD *)(*(_QWORD *)i + 8) != 59; i += 2)
      {
        v9 -= 8;
        if (!v9)
          return result;
      }
    }
    else
    {
      i = v6;
    }
    if (i != &v6[2 * v7] && *(_QWORD *)i && !*(_DWORD *)(*(_QWORD *)i + 16))
      *(_BYTE *)(a2 + 168) = 1;
  }
  return result;
}

uint64_t sub_22E602A1C(int *a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  int v29;
  char v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v4 = *((_BYTE *)a1 + 4);
  v5 = *((_BYTE *)a1 + 5);
  if (*((_BYTE *)a1 + 552))
    v6 = *((_QWORD *)a1 + 70);
  else
    v6 = 0;
  v29 = *a1;
  v30 = v4;
  v31 = v5;
  v7 = *((_OWORD *)a1 + 1);
  v8 = *((_OWORD *)a1 + 2);
  v34 = *((_OWORD *)a1 + 3);
  v33 = v8;
  v32 = v7;
  v37 = *(_OWORD *)(a1 + 46);
  v9 = *(_OWORD *)(a1 + 38);
  v36 = *(_OWORD *)(a1 + 42);
  v35 = v9;
  v40 = *((_OWORD *)a1 + 20);
  v10 = *((_OWORD *)a1 + 18);
  v39 = *((_OWORD *)a1 + 19);
  v38 = v10;
  v11 = *(_OWORD *)(a1 + 110);
  v41 = *(_OWORD *)(a1 + 106);
  v42 = v11;
  v43 = *(_OWORD *)(a1 + 114);
  v44 = v6;
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, int *, int *))(**(_QWORD **)(*(_QWORD *)(a2 + 144) + 808)
                                                                        + 240))(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 808), a2, *(unsigned int *)(*((_QWORD *)a1 + 71) + 12), *(unsigned int *)(*((_QWORD *)a1 + 71) + 8), a1 + 144, &v29);
  if (!*((_BYTE *)a1 + 552))
    sub_22E4D89CC(a2);
  sub_22E4D89CC(a2);
  v13 = *((_QWORD *)a1 + 71);
  v14 = (uint64_t *)*((_QWORD *)a1 + 77);
  v15 = v14[4];
  v16 = *(_QWORD *)(v15 + 1992);
  v17 = *(_QWORD *)(v15 + 2000);
  v18 = *(_QWORD *)(v13 + 24) + 8 * **(unsigned int **)(v13 + 24) + 16;
  v19 = 224;
  if (!*((_BYTE *)a1 + 552))
    v19 = 32;
  v20 = *(unsigned __int8 **)(v18 + v19);
  v21 = *v14;
  v22 = 144;
  if (!*((_BYTE *)a1 + 552))
    v22 = 48;
  v23 = *(_QWORD *)(v18 + v22);
  v26 = *((_QWORD *)a1 + 71);
  v27 = *((_OWORD *)a1 + 37);
  v28 = a1[152];
  return sub_22F28DA58(a2, v13, v16 - v17 != v21, v20, v23, (void (*)(uint64_t, uint64_t))sub_22E602BDC, (uint64_t)&v26, v12, (void (*)(uint64_t, uint64_t))nullsub_69, (uint64_t)&v25);
}

uint64_t sub_22E602BDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v5;
  uint64_t v6;

  v3 = *(_QWORD *)a1;
  v5 = *(_OWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 24);
  sub_22F28D424(a2, v3, &v5);
  return sub_22E5E5100(a2, v3);
}

uint64_t sub_22E602C30(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 144) + 808) + 264))(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 808));
}

uint64_t sub_22E602C54(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  llvm::Constant **v8;
  llvm::Type *v9;
  uint64_t NullValue;
  _BYTE v12[32];
  __int16 v13;
  _OWORD v14[8];
  uint64_t v15;

  v2 = *(_OWORD *)(a1 + 112);
  v14[6] = *(_OWORD *)(a1 + 96);
  v14[7] = v2;
  v3 = *(_QWORD *)(a1 + 136);
  v15 = *(_QWORD *)(a1 + 128);
  v4 = a2 + 272;
  v5 = *(_OWORD *)(a1 + 48);
  v14[2] = *(_OWORD *)(a1 + 32);
  v14[3] = v5;
  v6 = *(_OWORD *)(a1 + 80);
  v14[4] = *(_OWORD *)(a1 + 64);
  v14[5] = v6;
  v7 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v7;
  v8 = (llvm::Constant **)sub_22F25F748(a2, (uint64_t)v14, *(_DWORD *)(v3 + 12));
  v13 = 257;
  NullValue = llvm::Constant::getNullValue(*v8, v9);
  return sub_22E3C18F4(v4, 33, (uint64_t *)v8, NullValue, (uint64_t)v12);
}

uint64_t sub_22E602CE4(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  llvm::Constant **v8;
  llvm::Type *v9;
  uint64_t NullValue;
  _BYTE v12[32];
  __int16 v13;
  _OWORD v14[8];
  uint64_t v15;

  v2 = *(_OWORD *)(a1 + 112);
  v14[6] = *(_OWORD *)(a1 + 96);
  v14[7] = v2;
  v3 = *(_QWORD *)(a1 + 136);
  v15 = *(_QWORD *)(a1 + 128);
  v4 = a2 + 272;
  v5 = *(_OWORD *)(a1 + 48);
  v14[2] = *(_OWORD *)(a1 + 32);
  v14[3] = v5;
  v6 = *(_OWORD *)(a1 + 80);
  v14[4] = *(_OWORD *)(a1 + 64);
  v14[5] = v6;
  v7 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v7;
  v8 = (llvm::Constant **)sub_22F25F748(a2, (uint64_t)v14, *(_DWORD *)(v3 + 12));
  v13 = 257;
  NullValue = llvm::Constant::getNullValue(*v8, v9);
  return sub_22E3C18F4(v4, 33, (uint64_t *)v8, NullValue, (uint64_t)v12);
}

uint64_t sub_22E602D74(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  llvm::Constant **v8;
  llvm::Type *v9;
  uint64_t NullValue;
  _BYTE v12[32];
  __int16 v13;
  _OWORD v14[8];
  uint64_t v15;

  v2 = *(_OWORD *)(a1 + 112);
  v14[6] = *(_OWORD *)(a1 + 96);
  v14[7] = v2;
  v3 = *(_QWORD *)(a1 + 136);
  v15 = *(_QWORD *)(a1 + 128);
  v4 = a2 + 272;
  v5 = *(_OWORD *)(a1 + 48);
  v14[2] = *(_OWORD *)(a1 + 32);
  v14[3] = v5;
  v6 = *(_OWORD *)(a1 + 80);
  v14[4] = *(_OWORD *)(a1 + 64);
  v14[5] = v6;
  v7 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v7;
  v8 = (llvm::Constant **)sub_22F25F748(a2, (uint64_t)v14, *(_DWORD *)(v3 + 12));
  v13 = 257;
  NullValue = llvm::Constant::getNullValue(*v8, v9);
  return sub_22E3C18F4(v4, 33, (uint64_t *)v8, NullValue, (uint64_t)v12);
}

uint64_t sub_22E602E04(uint64_t *a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  int v18;
  _QWORD v19[2];
  char v20;
  uint64_t v21;

  v5 = a1[1];
  if (!*((_BYTE *)a1 + 24))
  {
    result = sub_22E603020(a2, v5, *(unsigned __int8 *)(v5 + 36));
    *(_BYTE *)a1[2] = result;
    return result;
  }
  v6 = *a1;
  v7 = *(unsigned int **)(v5 + 24);
  v9 = (uint64_t *)(v7 + 4);
  v8 = *v7;
  v10 = (uint64_t)&v7[2 * v8 + 4];
  v11 = v7 + 4;
  if (*v7)
  {
    v12 = 8 * *v7;
    v11 = v7 + 4;
    while (*(_DWORD *)(*(_QWORD *)v11 + 8) != 51)
    {
      v11 += 2;
      v12 -= 8;
      if (!v12)
        goto LABEL_11;
    }
  }
  if (v11 == (unsigned int *)v10)
  {
LABEL_11:
    if (!(_DWORD)v8)
      goto LABEL_17;
LABEL_12:
    v14 = 0;
    while (*(_DWORD *)(v9[v14] + 8) != 71)
    {
      if (*v7 == ++v14)
        goto LABEL_21;
    }
    v9 = (uint64_t *)((char *)v9 + v14 * 8);
    goto LABEL_17;
  }
  if ((_DWORD)v8)
    goto LABEL_12;
LABEL_17:
  if (v9 != (uint64_t *)v10)
  {
    v15 = *v9;
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 64);
      if (v16)
      {
        v19[0] = *a1;
        v19[1] = v6 + 272;
        v20 = 0;
        v21 = *(_QWORD *)(*(_QWORD *)(v6 + 144) + 232);
        sub_22E50E974(v19, v16, a3);
        v7 = *(unsigned int **)(a1[1] + 24);
        v8 = *v7;
      }
    }
  }
LABEL_21:
  for (i = *(_QWORD *)&v7[2 * v8 + 4 + 2 * v7[1]];
        *(_BYTE *)i == 7;
  v18 = *(_DWORD *)(v6 + 1584);
  *(_DWORD *)(v6 + 1584) = 1;
  sub_22E5E5158(v6, i, 0, 0);
  --*(_DWORD *)(v6 + 1544);
  *(_DWORD *)(v6 + 1584) = v18;
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v6 + 272));
  result = llvm::OpenMPIRBuilder::applyWorkshareLoop();
  if (v19[0])
    return llvm::MetadataTracking::untrack();
  return result;
}

uint64_t sub_22E603020(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int *v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t (*v42)(uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t);
  void *v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t);
  __n128 (*v46)@<Q0>(_QWORD *@<X0>, uint64_t@<X1>, uint64_t@<X8>);
  void **v47;
  void **v48;
  void **v49;
  void **v50;
  void **v51;
  uint64_t (*v52)(uint64_t (*)(uint64_t, uint64_t, _OWORD *, _OWORD *), uint64_t, uint64_t, _OWORD *, _OWORD *);
  uint64_t (*v53)(uint64_t, uint64_t);
  void *v54[2];
  _BYTE v55[32];
  void *v56[2];
  _BYTE v57[32];
  void *v58[2];
  _BYTE v59[32];
  void *v60[2];
  _BYTE v61[32];
  _QWORD *v62;
  uint64_t v63;
  _QWORD v64[6];

  v64[4] = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned int **)(a2 + 24);
  if (!v6)
    goto LABEL_13;
  v9 = *v6;
  v7 = v6 + 4;
  v8 = v9;
  if (v9)
  {
    v13 = 8 * v8;
    v10 = v7;
    while (*(_DWORD *)(*(_QWORD *)v10 + 8) != 66)
    {
      v10 += 2;
      v13 -= 8;
      if (!v13)
        goto LABEL_13;
    }
  }
  else
  {
    v10 = v7;
  }
  v11 = &v7[2 * v8];
  if (v10 == v11)
    goto LABEL_13;
  v12 = *(_QWORD *)v10;
LABEL_6:
  if (*(_DWORD *)(v12 + 48) != 1)
  {
    while (1)
    {
      v10 += 2;
      if (v10 == v11)
        break;
      v12 = *(_QWORD *)v10;
      if (*(_DWORD *)(*(_QWORD *)v10 + 8) == 66)
        goto LABEL_6;
    }
LABEL_13:
    sub_22F293FF0(a1 + 3440, a1, *(_DWORD *)(a2 + 8), a3);
    v14 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 112);
    v45 = sub_22F2947C0;
    v46 = sub_22E603594;
    v62 = sub_22F2947D0;
    v63 = (uint64_t)sub_22E603654;
    v15 = sub_22E5F8DA8(a1, a2, v14, (uint64_t)&v45, (uint64_t)&v62);
    sub_22F294168(a1 + 3440, (_QWORD *)a1);
    return v15;
  }
  v41 = (unsigned __int8 *)a2;
  if (!sub_22F421A78(*(_DWORD *)(a2 + 8)))
    sub_22E5FB6AC((_QWORD *)a1, a2, (uint64_t (*)(uint64_t, _QWORD *))sub_22E603700, (uint64_t)&v41);
  v17 = sub_22E603700(&v41, a1);
  v18 = *(_QWORD *)(a1 + 88);
  LOWORD(v49) = 257;
  v40 = sub_22E3BF45C((uint64_t *)(a1 + 272), v17, v18, 0, (uint64_t)&v45);
  v62 = v64;
  v63 = 0x400000000;
  v60[0] = v61;
  v60[1] = (void *)0x400000000;
  v58[0] = v59;
  v58[1] = (void *)0x400000000;
  v56[0] = v57;
  v56[1] = (void *)0x400000000;
  v54[0] = v55;
  v54[1] = (void *)0x400000000;
  v19 = *(unsigned int **)(a2 + 24);
  if (v19)
  {
    v22 = *v19;
    v20 = (uint64_t *)(v19 + 4);
    v21 = v22;
    if (v22)
    {
      v23 = 8 * v21;
      v24 = v20;
      while (*(_DWORD *)(*v24 + 8) != 66)
      {
        ++v24;
        v23 -= 8;
        if (!v23)
          goto LABEL_30;
      }
    }
    else
    {
      v24 = v20;
    }
    v25 = &v20[v21];
    if (v24 != v25)
    {
      v26 = *v24;
LABEL_26:
      sub_22F2633B0((uint64_t)&v62, (_BYTE *)(v26 + 104 + 8 * *(unsigned int *)(v26 + 16)), (_BYTE *)(v26 + 104 + 8 * *(unsigned int *)(v26 + 16) + 8 * *(unsigned int *)(v26 + 16)));
      v27 = *(unsigned int *)(v26 + 16);
      v28 = (_BYTE *)(v26 + 104 + 8 * v27 + 8 * v27 + 8 * v27 + 8 * v27);
      sub_22F2633B0((uint64_t)v60, v28, &v28[8 * v27]);
      v29 = *(unsigned int *)(v26 + 16);
      sub_22F2633B0((uint64_t)v58, (_BYTE *)(v26 + 104 + 8 * v29 + 8 * v29), (_BYTE *)(v26 + 104 + 8 * v29 + 8 * v29 + 8 * v29));
      v30 = *(unsigned int *)(v26 + 16);
      v31 = (_BYTE *)(v26 + 104 + 8 * v30 + 8 * v30 + 8 * v30);
      sub_22F2633B0((uint64_t)v56, v31, &v31[8 * v30]);
      v32 = *(unsigned int *)(v26 + 16);
      v33 = (_BYTE *)(v26 + 104 + 8 * v32 + 8 * v32 + 8 * v32 + 8 * v32 + 8 * v32 + 8 * v32 + 8 * v32);
      sub_22F2633B0((uint64_t)v54, v33, &v33[8 * v32]);
      v34 = v24 + 1;
      while (v34 != v25)
      {
        v35 = *v34++;
        v26 = v35;
        if (*(_DWORD *)(v35 + 8) == 66)
        {
          v24 = v34 - 1;
          goto LABEL_26;
        }
      }
    }
  }
LABEL_30:
  v36 = *(_QWORD *)(a1 + 2744);
  *(_QWORD *)(a1 + 2744) = a2;
  *(_BYTE *)(a1 + 2784) = 1;
  v46 = 0;
  v47 = 0;
  v45 = (uint64_t (*)(uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t))a1;
  LODWORD(v48) = 0;
  sub_22E6007D0((uint64_t)&v46, a1 + 2904);
  sub_22F293FF0(a1 + 3440, a1, *(_DWORD *)(a2 + 8), a3);
  v37 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 112);
  v42 = sub_22F2947C0;
  v43 = sub_22E603594;
  v52 = sub_22F2947D0;
  v53 = sub_22E603654;
  sub_22E5F8DA8(a1, a2, v37, (uint64_t)&v42, (uint64_t)&v52);
  (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 808)
                                                                            + 184))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808), a1, *(unsigned int *)(a2 + 12), 33, 1, 0);
  sub_22F294168(a1 + 3440, (_QWORD *)a1);
  sub_22F293F6C((uint64_t *)&v45);
  v45 = (uint64_t (*)(uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t))a2;
  v46 = (__n128 (*)@<Q0>(_QWORD *@<X0>, uint64_t@<X1>, uint64_t@<X8>))v40;
  v47 = v58;
  v48 = v56;
  v49 = v54;
  v50 = v60;
  v51 = (void **)&v62;
  if (sub_22F421A78(*(_DWORD *)(a2 + 8)))
  {
    v38 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
    v42 = (uint64_t (*)(uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t))&v45;
    v43 = sub_22E6037D0;
    v44 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t (**)(uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t), _QWORD))(*(_QWORD *)v38 + 136))(v38, a1, &v42, *(unsigned int *)(a2 + 12));
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144)
                                                                                            + 808)
                                                                              + 184))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808), a1, *(unsigned int *)(a2 + 12), 89, 0, 1);
  }
  else
  {
    v42 = (uint64_t (*)(uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t))&v45;
    v43 = sub_22E6037D0;
    v44 = 0;
    sub_22F27B464(&v42, a1);
  }
  *(_BYTE *)(a1 + 2784) = 0;
  sub_22F293FF0(a1 + 3440, a1, *(_DWORD *)(a2 + 8), a3);
  v39 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 112);
  v42 = sub_22F2947C0;
  v43 = sub_22E603594;
  v52 = sub_22F2947D0;
  v53 = sub_22E603654;
  v15 = sub_22E5F8DA8(a1, a2, v39, (uint64_t)&v42, (uint64_t)&v52);
  sub_22F294168(a1 + 3440, (_QWORD *)a1);
  *(_QWORD *)(a1 + 2744) = v36;
  if (v54[0] != v55)
    free(v54[0]);
  if (v56[0] != v57)
    free(v56[0]);
  if (v58[0] != v59)
    free(v58[0]);
  if (v60[0] != v61)
    free(v60[0]);
  if (v62 != v64)
    free(v62);
  return v15;
}

__n128 sub_22E603594@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  _OWORD v10[8];
  uint64_t v11;

  sub_22E4C652C(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 88) + 16));
  sub_22E4D8D7C(v10);
  sub_22E4C652C(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 96) + 16));
  sub_22E4D8D7C((_QWORD *)(a3 + 136));
  v6 = v10[7];
  *(_OWORD *)(a3 + 96) = v10[6];
  *(_OWORD *)(a3 + 112) = v6;
  *(_QWORD *)(a3 + 128) = v11;
  v7 = v10[3];
  *(_OWORD *)(a3 + 32) = v10[2];
  *(_OWORD *)(a3 + 48) = v7;
  v8 = v10[5];
  *(_OWORD *)(a3 + 64) = v10[4];
  *(_OWORD *)(a3 + 80) = v8;
  result = (__n128)v10[1];
  *(_OWORD *)a3 = v10[0];
  *(__n128 *)(a3 + 16) = result;
  return result;
}

uint64_t sub_22E603654(uint64_t a1, uint64_t a2)
{
  llvm::LLVMContext *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v4 = (llvm::LLVMContext *)sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24)+ 8 * **(unsigned int **)(a2 + 24)+ 16)+ 8) & 0xFFFFFFFFFFFFFFF0));
  llvm::Type::getIntNTy(*(llvm::Type **)(a1 + 336), v4);
  v5 = llvm::ConstantInt::get();
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 24);
  v9[0] = a1;
  v9[1] = a1 + 272;
  v10 = 0;
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
  sub_22E50E974(v9, v6, v7);
  return v5;
}

uint64_t sub_22E603700(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  int v15;
  _QWORD v16[2];
  char v17;
  uint64_t v18;

  v14[0] = 0;
  v14[1] = 0;
  v13 = a2;
  v15 = 0;
  sub_22E6007D0((uint64_t)v14, a2 + 2904);
  sub_22E5F9AA8((uint64_t)v9, a2, *a1);
  v4 = *(_QWORD *)(*((_QWORD *)*a1 + 3) + 8 * **((unsigned int **)*a1 + 3) + 136);
  v16[0] = a2;
  v16[1] = a2 + 272;
  v17 = 0;
  v18 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
  v6 = sub_22E50E974(v16, v4, v5);
  if (v11)
  {
    v7 = v12;
    *(_BYTE *)(v12 + 2893) = v10;
    sub_22E48B274(v7, v9[0], v9[2], 0, 0);
    v11 = 0;
    *(_QWORD *)(v12 + 2872) = v9[1];
  }
  sub_22F293F6C(&v13);
  return v6;
}

_QWORD *sub_22E6037D0(uint64_t a1, uint64_t a2, void (***a3)(_QWORD))
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  llvm::Value *Declaration;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Value *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  llvm::PHINode *v20;
  uint64_t v21;
  llvm::PHINode *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  llvm::Instruction *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  llvm::Instruction *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  llvm::PHINode *v76;
  _QWORD *v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  llvm::PHINode *v81;
  uint64_t *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  llvm::PHINode *v91;
  _BYTE v92[7];
  __int128 v93;
  __int128 v94;
  _BYTE v95[24];
  _BYTE v96[32];
  char v97;
  _DWORD v98[22];
  _BYTE v99[7];
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  _QWORD v106[3];
  char v107;
  char v108;
  uint64_t v109;
  uint64_t v110[2];
  int v111;
  _QWORD v112[2];
  int v113;
  uint64_t v114[2];
  uint64_t v115;
  uint64_t v116;
  llvm::PHINode *v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  char v121;
  _BYTE v122[7];
  _BYTE v123[40];

  (**a3)(a3);
  v5 = *(_QWORD *)(a2 + 320);
  v6 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)v95 = "omp.outer.log.scan.exit";
  *(_WORD *)&v96[8] = 259;
  v7 = operator new();
  llvm::BasicBlock::BasicBlock();
  Declaration = (llvm::Value *)llvm::Intrinsic::getDeclaration();
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a2 + 64);
  *(_WORD *)&v96[8] = 257;
  v82 = (uint64_t *)(a2 + 272);
  v11 = sub_22E3ED228(a2 + 272, v9, v10, (uint64_t)v95);
  v12 = 0;
  v116 = v11;
  if (Declaration)
    v12 = *((_QWORD *)Declaration + 3);
  *(_WORD *)&v96[8] = 257;
  v115 = (uint64_t)sub_22F24EEDC(a2, v12, Declaration, (uint64_t)&v116, 1, (uint64_t)v95);
  v13 = (llvm::Value *)llvm::Intrinsic::getDeclaration();
  v77 = (_QWORD *)v7;
  if (v13)
    v14 = *((_QWORD *)v13 + 3);
  else
    v14 = 0;
  *(_WORD *)&v96[8] = 257;
  v115 = (uint64_t)sub_22F24EEDC(a2, v14, v13, (uint64_t)&v115, 1, (uint64_t)v95);
  v15 = *(_QWORD *)(a2 + 72);
  *(_WORD *)&v96[8] = 257;
  v115 = sub_22E3ED31C((uint64_t)v82, v115, v15, (uint64_t)v95);
  v16 = *(_QWORD *)(a1 + 8);
  v17 = llvm::ConstantInt::get();
  *(_WORD *)&v96[8] = 257;
  v89 = (uint64_t *)sub_22E3E48CC((uint64_t)v82, v16, v17, (uint64_t)v95, 1, 0);
  v18 = *(_DWORD *)(*(_QWORD *)a1 + 12);
  v114[0] = 0;
  v114[1] = a2;
  sub_22E48EE24(v114, v18, 0);
  sub_22E5ED9B4((_QWORD *)a2, v6, 0);
  v19 = *(_QWORD *)(a2 + 72);
  *(_WORD *)&v96[8] = 257;
  v20 = (llvm::PHINode *)sub_22E3C4B80(v82, v19, 2, (uint64_t)v95);
  v21 = *(_QWORD *)(a2 + 88);
  *(_WORD *)&v96[8] = 257;
  v22 = (llvm::PHINode *)sub_22E3C4B80(v82, v21, 2, (uint64_t)v95);
  v23 = llvm::ConstantInt::get();
  v76 = v20;
  sub_22E3C4C50(v20, v23, v5);
  v24 = llvm::ConstantInt::get();
  sub_22E3C4C50(v22, v24, v5);
  *(_QWORD *)v95 = "omp.inner.log.scan.body";
  *(_WORD *)&v96[8] = 259;
  v78 = (uint64_t)v6;
  v25 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)v95 = "omp.inner.log.scan.exit";
  *(_WORD *)&v96[8] = 259;
  v26 = operator new();
  llvm::BasicBlock::BasicBlock();
  *(_WORD *)&v96[8] = 257;
  v81 = v22;
  v27 = sub_22E3C18F4((uint64_t)v82, 35, v89, (uint64_t)v22, (uint64_t)v95);
  v28 = llvm::User::operator new((llvm::User *)0x40);
  v74 = (_QWORD *)v26;
  MEMORY[0x23489C09C](v28, v25, v26, v27, 0);
  *(_WORD *)&v96[8] = 257;
  sub_22E3C12C8(v82, v28, (uint64_t)v95);
  v75 = v25;
  sub_22E5ED9B4((_QWORD *)a2, v25, 0);
  v29 = *(_QWORD *)(a2 + 88);
  *(_WORD *)&v96[8] = 257;
  v91 = (llvm::PHINode *)sub_22E3C4B80(v82, v29, 2, (uint64_t)v95);
  sub_22E3C4C50(v91, (uint64_t)v89, v78);
  v108 = 1;
  v109 = a2;
  v106[0] = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
  v30 = v106[0];
  v106[2] = *(_QWORD *)(a2 + 2312);
  v107 = *(_BYTE *)(a2 + 2893);
  *(_BYTE *)(a2 + 2893) = 0;
  v106[1] = *(_QWORD *)(a2 + 2872);
  *(_QWORD *)(a2 + 2872) = v30;
  v110[1] = 0;
  v110[0] = 0;
  v111 = 0;
  v112[1] = 0;
  v112[0] = 0;
  v113 = 0;
  v31 = *(uint64_t ***)(a1 + 32);
  v32 = *((unsigned int *)v31 + 2);
  v33 = a2;
  v34 = v77;
  if ((_DWORD)v32)
  {
    v73 = a1;
    v35 = *v31;
    v36 = **(_QWORD **)(a1 + 24);
    v37 = **(_QWORD **)(a1 + 16);
    v88 = a2 + 4088;
    v38 = 8 * v32;
    v90 = a2;
    while (1)
    {
      v85 = v38;
      v39 = *v35;
      v83 = *(_QWORD *)(*(_QWORD *)v37 + 16);
      v87 = *(_QWORD *)(*(_QWORD *)v36 + 16);
      v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v35 + 24) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v41 = *(_DWORD *)(v40 + 16);
      if (v40)
        v42 = v41 == 11;
      else
        v42 = 0;
      if (v42)
      {
        v45 = (uint64_t *)(v39 + 16);
        v46 = (uint64_t *)(v39 + 16);
        if (((*(_DWORD *)(v40 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
          goto LABEL_21;
      }
      else
      {
        if (!v40 || v41 != 44)
        {
          v45 = (uint64_t *)(v39 + 16);
          v46 = (uint64_t *)(v39 + 16);
          if (v41 != 9)
            goto LABEL_22;
LABEL_21:
          v46 = (uint64_t *)(v39 + 24);
          goto LABEL_22;
        }
        v43 = sub_22F114198(*(_QWORD *)(v40 + 24));
        if ((*(_BYTE *)(v43 + 74) & 1) != 0 || *(_QWORD *)(v43 + 128) > 7uLL)
        {
          v44 = sub_22F114198(*(_QWORD *)(v40 + 24));
          v45 = (uint64_t *)(v39 + 16);
          v46 = (uint64_t *)(v39 + 16);
          if ((*(_QWORD *)(v44 + 72) & 0x8000000000) == 0)
            goto LABEL_21;
        }
        else
        {
          v45 = (uint64_t *)(v39 + 16);
          v46 = (uint64_t *)(v39 + 16);
        }
      }
LABEL_22:
      v47 = *v46;
      v102 = v90;
      *(_QWORD *)v95 = v47;
      *(_QWORD *)&v95[8] = v91;
      *(_QWORD *)&v95[16] = 0;
      *(_OWORD *)v96 = v100;
      *(_OWORD *)&v96[16] = v101;
      v97 = 0;
      v98[0] = *(_DWORD *)v99;
      *(_DWORD *)((char *)v98 + 3) = *(_DWORD *)&v99[3];
      sub_22F25406C(v88, v95, (__int128 *)&v95[8], (uint64_t)v123);
      v103 = v47;
      v104 = 0;
      v117 = v91;
      v118 = 0;
      v119 = v100;
      v120 = v101;
      v121 = 0;
      *(_DWORD *)v122 = *(_DWORD *)v99;
      *(_DWORD *)&v122[3] = *(_DWORD *)&v99[3];
      v105 = sub_22F297CB8(v90, &v117);
      sub_22E4D8D7C(v95);
      v48 = *(_OWORD *)&v95[8];
      v49 = *(_QWORD *)v96;
      v50 = *(_QWORD *)&v96[8];
      v51 = *(_OWORD *)&v96[16];
      if (v103)
      {
        v79 = *(_OWORD *)&v96[16];
        v80 = *(_OWORD *)&v95[8];
        sub_22F254324((uint64_t)&v103, v102);
        v51 = v79;
        v48 = v80;
      }
      *(_OWORD *)v95 = v48;
      *(_QWORD *)&v95[16] = v49;
      *(_QWORD *)v96 = v50;
      *(_OWORD *)&v96[8] = v51;
      sub_22E5BC134(v110, v109, v83, (uint64_t)v95);
      *(_WORD *)&v96[8] = 257;
      v52 = sub_22E3E48CC((uint64_t)v82, (uint64_t)v91, (uint64_t)v81, (uint64_t)v95, 1, 0);
      v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 24) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v54 = *(_DWORD *)(v53 + 16);
      if (v53 && v54 == 11)
      {
        if (((*(_DWORD *)(v53 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
          goto LABEL_36;
LABEL_35:
        v45 = (uint64_t *)(v39 + 24);
        goto LABEL_36;
      }
      if (v53 && v54 == 44)
      {
        v55 = sub_22F114198(*(_QWORD *)(v53 + 24));
        if (((*(_BYTE *)(v55 + 74) & 1) != 0 || *(_QWORD *)(v55 + 128) > 7uLL)
          && (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v53 + 24)) + 72) & 0x8000000000) == 0)
        {
          goto LABEL_35;
        }
      }
      else if (v54 == 9)
      {
        goto LABEL_35;
      }
LABEL_36:
      v56 = *v45;
      a2 = v90;
      v102 = v90;
      *(_QWORD *)v95 = v56;
      *(_QWORD *)&v95[8] = v52;
      *(_QWORD *)&v95[16] = 0;
      *(_OWORD *)v96 = v93;
      *(_OWORD *)&v96[16] = v94;
      v97 = 0;
      v98[0] = *(_DWORD *)v92;
      *(_DWORD *)((char *)v98 + 3) = *(_DWORD *)&v92[3];
      sub_22F25406C(v88, v95, (__int128 *)&v95[8], (uint64_t)v123);
      v103 = v56;
      v104 = 0;
      v117 = v52;
      v118 = 0;
      v119 = v93;
      v120 = v94;
      v121 = 0;
      *(_DWORD *)v122 = *(_DWORD *)v92;
      *(_DWORD *)&v122[3] = *(_DWORD *)&v92[3];
      v105 = sub_22F297CB8(v90, &v117);
      sub_22E4D8D7C(v95);
      v57 = *(_OWORD *)&v95[8];
      v58 = *(_QWORD *)v96;
      v59 = *(_QWORD *)&v96[8];
      v60 = *(_OWORD *)&v96[16];
      if (v103)
      {
        v86 = *(_OWORD *)&v95[8];
        v84 = *(_OWORD *)&v96[16];
        sub_22F254324((uint64_t)&v103, v102);
        v60 = v84;
        v57 = v86;
      }
      *(_OWORD *)v95 = v57;
      *(_QWORD *)&v95[16] = v58;
      *(_QWORD *)v96 = v59;
      *(_OWORD *)&v96[8] = v60;
      sub_22E5BC134(v110, v109, v87, (uint64_t)v95);
      v37 += 8;
      v36 += 8;
      ++v35;
      v38 = v85 - 8;
      if (v85 == 8)
      {
        v33 = v109;
        a1 = v73;
        v34 = v77;
        break;
      }
    }
  }
  sub_22E5BC320((uint64_t)v112, v33 + 2904);
  sub_22F2840EC((uint64_t)v112);
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 144)
                                                                                                + 808)
                                                                                  + 368))(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 808), a2, *(unsigned int *)(*(_QWORD *)a1 + 16), **(_QWORD **)(a1 + 48), *(unsigned int *)(*(_QWORD *)(a1 + 48) + 8), **(_QWORD **)(a1 + 16), *(unsigned int *)(*(_QWORD *)(a1 + 16) + 8));
  sub_22F283FC4((uint64_t)v106);
  v61 = llvm::ConstantInt::get();
  *(_WORD *)&v96[8] = 257;
  v62 = (uint64_t *)sub_22E3E48CC((uint64_t)v82, (uint64_t)v91, v61, (uint64_t)v95, 1, 0);
  sub_22E3C4C50(v91, (uint64_t)v62, *(_QWORD *)(a2 + 320));
  *(_WORD *)&v96[8] = 257;
  v63 = sub_22E3C18F4((uint64_t)v82, 35, v62, (uint64_t)v81, (uint64_t)v95);
  v64 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v64, v75, v74, v63, 0);
  *(_WORD *)&v96[8] = 257;
  sub_22E3C12C8(v82, v64, (uint64_t)v95);
  sub_22E5ED9B4((_QWORD *)a2, v74, 0);
  v65 = llvm::ConstantInt::get();
  *(_WORD *)&v96[8] = 257;
  v66 = (uint64_t *)sub_22F26180C((uint64_t)v82, (uint64_t)v76, v65, (uint64_t)v95);
  sub_22E3C4C50(v76, (uint64_t)v66, *(_QWORD *)(a2 + 320));
  *(_WORD *)&v96[8] = 257;
  v67 = llvm::ConstantInt::get();
  v68 = sub_22E3ED744((uint64_t)v82, (uint64_t)v81, v67, (uint64_t)v95, 1, 0);
  sub_22E3C4C50(v81, (uint64_t)v68, *(_QWORD *)(a2 + 320));
  *(_WORD *)&v96[8] = 257;
  v69 = sub_22E3C18F4((uint64_t)v82, 33, v66, v115, (uint64_t)v95);
  v70 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v70, v78, v34, v69, 0);
  *(_WORD *)&v96[8] = 257;
  sub_22E3C12C8(v82, v70, (uint64_t)v95);
  v71 = *(_DWORD *)(*(_QWORD *)a1 + 16);
  *(_QWORD *)v95 = 0;
  *(_QWORD *)&v95[8] = a2;
  sub_22E48EE24((uint64_t *)v95, v71, 0);
  sub_22E5ED9B4((_QWORD *)a2, v34, 0);
  sub_22E48F084(v95);
  return sub_22E48F084(v114);
}

uint64_t sub_22E6042A8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_22E603020(a2, *(_QWORD *)a1, 0);
  **(_BYTE **)(a1 + 8) = result;
  return result;
}

int32x2_t sub_22E6042E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  llvm::LLVMContext *v6;
  uint64_t v7;
  llvm::LLVMContext *v8;
  uint64_t v9;
  llvm::LLVMContext *v10;
  uint64_t v11;
  llvm::LLVMContext *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t Select;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::Constant **v34;
  llvm::Type *v35;
  uint64_t NullValue;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[32];
  __int16 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD v54[8];
  uint64_t v55;
  _OWORD v56[8];
  uint64_t v57;
  _OWORD v58[2];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  _OWORD v66[8];
  uint64_t v67;
  const char *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  _OWORD v84[8];
  uint64_t v85;
  _DWORD v86[4];
  _QWORD v87[3];
  char v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  _QWORD v94[2];
  int v95;
  __int128 v96;
  uint64_t v97;
  __int128 *v98;
  uint64_t v99;
  _DWORD *v100;
  char v101;
  uint64_t v102;
  _DWORD v103[6];
  uint64_t v104;
  _DWORD *v105;
  char v106;
  uint64_t v107;
  _DWORD v108[6];
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  _OWORD v118[4];
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  _BYTE v124[8];
  __int128 v125;
  __int128 v126;
  __int128 v127;
  _OWORD v128[4];
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  _BYTE v134[64];
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
  v5 = sub_22EF60A6C(v4, 32, 1);
  v68 = ".omp.sections.lb.";
  WORD4(v70) = 259;
  llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v6);
  v7 = llvm::ConstantInt::get();
  sub_22E604C10((uint64_t)v134, a2, v5, (uint64_t)&v68, v7);
  llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v8);
  v9 = llvm::ConstantInt::get();
  v68 = ".omp.sections.ub.";
  WORD4(v70) = 259;
  v40 = v9;
  sub_22E604C10((uint64_t)v128, a2, v5, (uint64_t)&v68, v9);
  v68 = ".omp.sections.st.";
  WORD4(v70) = 259;
  llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v10);
  v11 = llvm::ConstantInt::get();
  sub_22E604C10((uint64_t)v124, a2, v5, (uint64_t)&v68, v11);
  v68 = ".omp.sections.il.";
  WORD4(v70) = 259;
  llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v12);
  v13 = llvm::ConstantInt::get();
  sub_22E604C10((uint64_t)v118, a2, v5, (uint64_t)&v68, v13);
  v68 = ".omp.sections.iv.";
  WORD4(v70) = 259;
  sub_22E604C10((uint64_t)&v109, a2, v5, (uint64_t)&v68, 0);
  sub_22E5BBE34((uint64_t)v108, *(_DWORD *)(*(_QWORD *)a1 + 12), v5, 1, 0, 0);
  v74 = v114;
  v75 = v115;
  v76 = v116;
  v70 = v110;
  v71 = v111;
  v72 = v112;
  v73 = v113;
  v69 = v109;
  v104 = a2;
  *(_QWORD *)&v77 = v117;
  v68 = (const char *)v108;
  sub_22F253D5C(a2 + 4064, &v68, (uint64_t)&v69, (uint64_t)&v43);
  v105 = v108;
  v106 = 1;
  v107 = 0;
  sub_22E5BBE34((uint64_t)v103, *(_DWORD *)(*(_QWORD *)a1 + 12), v5, 1, 0, 0);
  v74 = v130;
  v75 = v131;
  v76 = v132;
  v70 = v128[1];
  v71 = v128[2];
  v72 = v128[3];
  v73 = v129;
  v69 = v128[0];
  v99 = a2;
  *(_QWORD *)&v77 = v133;
  v68 = (const char *)v103;
  sub_22F253D5C(a2 + 4064, &v68, (uint64_t)&v69, (uint64_t)&v43);
  v100 = v103;
  v101 = 1;
  v102 = 0;
  v14 = *(_QWORD *)(v4 + 16400);
  v15 = *(_DWORD *)(*(_QWORD *)a1 + 12);
  v16 = v4;
  v17 = v4 + 2032;
  v18 = sub_22E3CD3D4(v17, 32, 3);
  *(_BYTE *)v18 = 112;
  if (byte_255E04EB3)
    sub_22F3F189C(112);
  v19 = *(_DWORD *)v18 & 0xFE0000FF;
  *(_QWORD *)(v18 + 8) = v14;
  *(_QWORD *)(v18 + 16) = v108;
  *(_QWORD *)(v18 + 24) = v103;
  v19 |= 0x300000u;
  *(_DWORD *)v18 = v19;
  *(_DWORD *)(v18 + 4) = v15;
  *(_DWORD *)v18 = (v103[0] | v108[0]) & 0x3E000 | v19;
  v20 = *(_DWORD *)(*(_QWORD *)a1 + 12);
  v39 = sub_22E3CD3D4(v17, 24, 3);
  sub_22F0031D0(v39, v16, (uint64_t)v108, 2, v5, 0, 0, v20, 1u, 0);
  v96 = *(_OWORD *)(a1 + 8);
  v97 = *(_QWORD *)a1;
  v21 = v97;
  v98 = &v109;
  v89 = 1;
  v22 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
  v87[2] = *(_QWORD *)(a2 + 2312);
  v88 = *(_BYTE *)(a2 + 2893);
  *(_BYTE *)(a2 + 2893) = 0;
  v23 = *(_QWORD *)(a2 + 2872);
  v87[0] = v22;
  v87[1] = v23;
  *(_QWORD *)(a2 + 2872) = v22;
  v92 = 0;
  v90 = a2;
  v91 = 0;
  v93 = 0;
  v94[1] = 0;
  v94[0] = 0;
  v95 = 0;
  if (sub_22E5F2534(a2, v21, (uint64_t)v87))
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 144)
                                                                                            + 808)
                                                                              + 184))(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 808), a2, *(unsigned int *)(*(_QWORD *)a1 + 12), 89, 0, 1);
  sub_22E5F310C(a2, *(unsigned int **)(*(_QWORD *)a1 + 24), (uint64_t)v87);
  v24 = *(_QWORD *)a1;
  v84[6] = v115;
  v84[7] = v116;
  v85 = v117;
  v84[2] = v111;
  v84[3] = v112;
  v84[4] = v113;
  v84[5] = v114;
  v84[0] = v109;
  v84[1] = v110;
  sub_22E5B8ABC((uint64_t)v86, a2, v24, (uint64_t)v84);
  **(_BYTE **)(a1 + 24) = sub_22E5F386C(a2, *(_QWORD *)a1, (uint64_t)v87);
  sub_22E5F4508();
  sub_22E5BC320((uint64_t)v94, v90 + 2904);
  sub_22F2840EC((uint64_t)v94);
  v25 = *(_QWORD *)a1;
  v26 = *(unsigned int *)(*(_QWORD *)a1 + 8);
  if ((v26 - 56) > 0x2A)
  {
    v27 = a2 + 272;
  }
  else
  {
    v27 = a2 + 272;
    if (((1 << (v26 - 56)) & 0x6000001CF91) != 0)
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 144) + 808) + 592))(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 808), a2);
      v25 = *(_QWORD *)a1;
      v26 = *(unsigned int *)(*(_QWORD *)a1 + 8);
    }
  }
  v82 = 0x500000000;
  v69 = *(_OWORD *)((char *)v118 + 8);
  v70 = *(_OWORD *)((char *)&v118[1] + 8);
  v71 = *(_OWORD *)((char *)&v118[2] + 8);
  v72 = *(_OWORD *)&v134[8];
  v73 = *(_OWORD *)&v134[24];
  v74 = *(_OWORD *)&v134[40];
  v77 = *(_OWORD *)((char *)&v128[2] + 8);
  v75 = *(_OWORD *)((char *)v128 + 8);
  v76 = *(_OWORD *)((char *)&v128[1] + 8);
  v80 = v127;
  v79 = v126;
  v83 = 5;
  v78 = v125;
  LODWORD(v68) = 32;
  WORD2(v68) = 1;
  v81 = 0;
  (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t *, const char **))(**(_QWORD **)(*(_QWORD *)(a2 + 144) + 808)
                                                                                     + 240))(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 808), a2, *(unsigned int *)(v25 + 12), v26, &v82, &v68);
  v66[6] = v131;
  v66[7] = v132;
  v67 = v133;
  v66[2] = v128[2];
  v66[3] = v128[3];
  v66[4] = v129;
  v66[5] = v130;
  v66[0] = v128[0];
  v66[1] = v128[1];
  v28 = (uint64_t *)sub_22F25F748(a2, (uint64_t)v66, *(_DWORD *)(*(_QWORD *)a1 + 12));
  LOWORD(v45) = 257;
  sub_22E3C18F4(v27, 40, v28, v40, (uint64_t)&v43);
  LOWORD(v59) = 257;
  Select = llvm::IRBuilderBase::CreateSelect();
  v63 = v131;
  v64 = v132;
  v65 = v133;
  v59 = v128[2];
  v60 = v128[3];
  v61 = v129;
  v62 = v130;
  v58[0] = v128[0];
  v58[1] = v128[1];
  sub_22E4E87FC(a2, Select, v58, 0);
  v56[6] = v137;
  v56[7] = v138;
  v57 = v139;
  v56[2] = *(_OWORD *)&v134[32];
  v56[3] = *(_OWORD *)&v134[48];
  v56[4] = v135;
  v56[5] = v136;
  v56[0] = *(_OWORD *)v134;
  v56[1] = *(_OWORD *)&v134[16];
  v30 = sub_22F25F748(a2, (uint64_t)v56, *(_DWORD *)(*(_QWORD *)a1 + 12));
  v54[6] = v115;
  v54[7] = v116;
  v55 = v117;
  v54[2] = v111;
  v54[3] = v112;
  v54[4] = v113;
  v54[5] = v114;
  v54[0] = v109;
  v54[1] = v110;
  sub_22E4E87FC(a2, v30, v54, 0);
  sub_22F28DA58(a2, *(_QWORD *)a1, 0, (unsigned __int8 *)v18, v39, (void (*)(uint64_t, uint64_t))sub_22E604D6C, (uint64_t)&v96, v31, (void (*)(uint64_t, uint64_t))nullsub_70, (uint64_t)&v43);
  v53 = *(_QWORD *)a1;
  sub_22F28EC20(a2 + 3440, (_QWORD *)a2, *(_DWORD *)(v53 + 8), (void (*)(uint64_t, _QWORD *))sub_22E6050B8, (uint64_t)&v53);
  sub_22E5F523C(a2, *(_QWORD *)a1);
  v32 = *(_QWORD *)a1;
  v49 = v121;
  v50 = v122;
  v45 = v118[2];
  v46 = v118[3];
  v47 = v119;
  v48 = v120;
  v43 = v118[0];
  v44 = v118[1];
  v51 = v123;
  v52 = v32;
  sub_22E5F6264(a2, v32, (uint64_t (*)(uint64_t, _QWORD *))sub_22E6050DC, (uint64_t)&v43);
  if (**(_BYTE **)(a1 + 24))
  {
    v33 = *(_QWORD *)a1;
    v49 = v121;
    v50 = v122;
    v51 = v123;
    v45 = v118[2];
    v46 = v118[3];
    v47 = v119;
    v48 = v120;
    v43 = v118[0];
    v44 = v118[1];
    v34 = (llvm::Constant **)sub_22F25F748(a2, (uint64_t)&v43, *(_DWORD *)(v33 + 12));
    v42 = 257;
    NullValue = llvm::Constant::getNullValue(*v34, v35);
    v37 = sub_22E3C18F4(v27, 33, (uint64_t *)v34, NullValue, (uint64_t)v41);
    sub_22E5F3CC4(a2, (unsigned __int8 *)v33, 0, v37);
  }
  sub_22F283234(v86);
  sub_22F283FC4((uint64_t)v87);
  sub_22F254324((uint64_t)&v100, a2);
  return sub_22F254324((uint64_t)&v105, a2);
}

void sub_22E604C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[8];
  uint64_t v20;
  _QWORD v21[6];
  char v22;
  _OWORD v23[2];
  uint64_t v24;
  __int128 v25[2];
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  v9 = sub_22F25E4D4(a2, a3, a4, 0);
  v11 = 0;
  if (v9 <= 7)
    v12 = 0;
  else
    v12 = v9 & 0xFFFFFFFFFFFFFFF8;
  if (v9 <= 7)
    v13 = 0;
  else
    v13 = v10 & 0xFFFFFFFFFFFFFFF8;
  if (v9 >= 8)
    v11 = 1 << (v10 & 7 | (8 * (v9 & 7)));
  sub_22E6281E0(*(_QWORD **)(a2 + 144), a3, (uint64_t)v23);
  *(_QWORD *)&v27 = v12;
  *((_QWORD *)&v27 + 1) = v13;
  v28 = v11;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v14 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
  v25[0] = v23[0];
  v25[1] = v23[1];
  v26 = v24;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 84) = 2;
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  sub_22E3C113C(a1, &v27, a3, 2, v25, v14);
  if (a5)
  {
    v21[0] = a5;
    v21[1] = 0;
    v22 = 0;
    v15 = *(_OWORD *)(a1 + 112);
    v19[6] = *(_OWORD *)(a1 + 96);
    v19[7] = v15;
    v20 = *(_QWORD *)(a1 + 128);
    v16 = *(_OWORD *)(a1 + 48);
    v19[2] = *(_OWORD *)(a1 + 32);
    v19[3] = v16;
    v17 = *(_OWORD *)(a1 + 80);
    v19[4] = *(_OWORD *)(a1 + 64);
    v19[5] = v17;
    v18 = *(_OWORD *)(a1 + 16);
    v19[0] = *(_OWORD *)a1;
    v19[1] = v18;
    sub_22E4DAAE0(a2, v21, v19, 1, *(double *)&v18);
  }
}

uint64_t sub_22E604D6C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  llvm::LLVMContext *v20;
  _QWORD *v21;
  llvm::LLVMContext *v22;
  uint64_t *v24;
  unint64_t v25;
  _OWORD v26[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  const char *v34;
  __int16 v35;

  *(_QWORD *)&v26[0] = ".omp.sections.exit";
  LOWORD(v27) = 259;
  v4 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v5 = a1[3];
  v30 = *(_OWORD *)(v5 + 80);
  v31 = *(_OWORD *)(v5 + 96);
  v32 = *(_OWORD *)(v5 + 112);
  v33 = *(_QWORD *)(v5 + 128);
  v26[1] = *(_OWORD *)(v5 + 16);
  v27 = *(_OWORD *)(v5 + 32);
  v28 = *(_OWORD *)(v5 + 48);
  v29 = *(_OWORD *)(v5 + 64);
  v26[0] = *(_OWORD *)v5;
  v6 = sub_22F25F748(a2, (uint64_t)v26, *(_DWORD *)(a1[2] + 12));
  v7 = (_DWORD *)a1[1];
  if (v7)
    v8 = *v7 >> 8;
  else
    v8 = 1;
  v9 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C204](v9, v6, v4, v8, 0);
  v35 = 257;
  sub_22E3C12C8((uint64_t *)(a2 + 272), v9, (uint64_t)&v34);
  v10 = (_DWORD *)a1[1];
  if (v10)
  {
    v13 = *v10;
    v12 = (uint64_t *)(v10 + 4);
    v11 = v13;
    v24 = v12;
    v25 = 0;
    if (v13 >= 0x100)
    {
      v14 = 0;
      v15 = 0;
      v16 = (uint64_t *)((char *)v12 + ((v11 >> 5) & 0x7FFFFF8));
      do
      {
        v17 = v12;
        if ((v14 & 3) != 0)
        {
          if ((v14 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            v17 = (uint64_t *)((v14 & 0xFFFFFFFFFFFFFFFCLL) + 40);
          else
            v17 = (uint64_t *)sub_22F3AC1A8(*v12);
        }
        v18 = *v17;
        v34 = ".omp.sections.case";
        v35 = 259;
        v19 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        sub_22E5ED9B4((_QWORD *)a2, v19, 0);
        llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v20);
        llvm::ConstantInt::get();
        llvm::SwitchInst::addCase();
        sub_22E5E5158(a2, v18, 0, 0);
        sub_22E5EDA70(a2);
        if ((v14 & 3) != 0)
        {
          if (v14 >= 4)
            sub_22F0D8720((uint64_t)&v24);
          else
            sub_22F3F2FE0((uint64_t)&v24, 1);
        }
        else
        {
          v24 = v12 + 1;
        }
        v12 = v24;
        v14 = v25;
        ++v15;
      }
      while (v24 != v16 || v25);
    }
  }
  else
  {
    v34 = ".omp.sections.case";
    v35 = 259;
    v21 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    sub_22E5ED9B4((_QWORD *)a2, v21, 0);
    llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v22);
    llvm::ConstantInt::get();
    llvm::SwitchInst::addCase();
    sub_22E5E5158(a2, *a1, 0, 0);
    sub_22E5EDA70(a2);
  }
  return sub_22E5ED9B4((_QWORD *)a2, v4, 1);
}

uint64_t sub_22E6050B8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 144) + 808) + 264))(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 808));
}

uint64_t sub_22E6050DC(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  llvm::Constant **v8;
  llvm::Type *v9;
  uint64_t NullValue;
  _BYTE v12[32];
  __int16 v13;
  _OWORD v14[8];
  uint64_t v15;

  v2 = *(_OWORD *)(a1 + 112);
  v14[6] = *(_OWORD *)(a1 + 96);
  v14[7] = v2;
  v3 = *(_QWORD *)(a1 + 136);
  v15 = *(_QWORD *)(a1 + 128);
  v4 = a2 + 272;
  v5 = *(_OWORD *)(a1 + 48);
  v14[2] = *(_OWORD *)(a1 + 32);
  v14[3] = v5;
  v6 = *(_OWORD *)(a1 + 80);
  v14[4] = *(_OWORD *)(a1 + 64);
  v14[5] = v6;
  v7 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v7;
  v8 = (llvm::Constant **)sub_22F25F748(a2, (uint64_t)v14, *(_DWORD *)(v3 + 12));
  v13 = 257;
  NullValue = llvm::Constant::getNullValue(*v8, v9);
  return sub_22E3C18F4(v4, 33, (uint64_t *)v8, NullValue, (uint64_t)v12);
}

void sub_22E605170()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22E605184(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FA66738;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_22E6051BC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FA66738;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_22E6051DC(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a3;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 1840);
  if (*a2)
  {
    v6 = a2[1];
    if (v6)
      v7 = v6 - 24;
    else
      v7 = 0;
    *(_QWORD *)(v4 + 1840) = v7;
  }
  ++*(_DWORD *)(v4 + 2640);
  result = sub_22F2945C8((uint64_t *)v4, *(_QWORD *)(a1 + 16), v3);
  *(_QWORD *)(v4 + 1840) = v5;
  return result;
}

void sub_22E605248()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22E60525C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FA66780;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_22E605294(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FA66780;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_22E6052B4(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a3;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 1840);
  if (*a2)
  {
    v6 = a2[1];
    if (v6)
      v7 = v6 - 24;
    else
      v7 = 0;
    *(_QWORD *)(v4 + 1840) = v7;
  }
  ++*(_DWORD *)(v4 + 2640);
  result = sub_22F2945C8((uint64_t *)v4, *(_QWORD *)(a1 + 16), v3);
  *(_QWORD *)(v4 + 1840) = v5;
  return result;
}

uint64_t sub_22E60531C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t result;

  result = a4;
  *a8 = a7;
  return result;
}

void sub_22E605330()
{
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22E605344(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FA667C8;
  result[1] = v3;
  return result;
}

uint64_t sub_22E605378(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FA667C8;
  a2[1] = v2;
  return result;
}

uint64_t *sub_22E605394(uint64_t a1, llvm::BasicBlock **a2)
{
  return sub_22F294690(*(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_22E6053A4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 1840);
  if (a2)
  {
    v6 = a3 - 24;
    if (!a3)
      v6 = 0;
    *(_QWORD *)(v4 + 1840) = v6;
  }
  ++*(_DWORD *)(v4 + 2640);
  result = sub_22F2945C8((uint64_t *)v4, *a1, a4);
  *(_QWORD *)(v4 + 1840) = v5;
  return result;
}

void sub_22E605404()
{
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22E605418(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FA66810;
  result[1] = v3;
  return result;
}

uint64_t sub_22E60544C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FA66810;
  a2[1] = v2;
  return result;
}

uint64_t *sub_22E605468(uint64_t a1, llvm::BasicBlock **a2)
{
  return sub_22F294690(*(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_22E605478(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD v17[2];
  int v18;

  (**a3)(a3);
  v12 = 1;
  v5 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
  v6 = *(_QWORD *)(a2 + 2312);
  v11 = *(_BYTE *)(a2 + 2893);
  *(_BYTE *)(a2 + 2893) = 0;
  v7 = *(_QWORD *)(a2 + 2872);
  v10[0] = v5;
  v10[1] = v7;
  v10[2] = v6;
  *(_QWORD *)(a2 + 2872) = v5;
  v14 = 0;
  v15 = 0;
  v13 = a2;
  v16 = 0;
  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  sub_22E5F2534(a2, *a1, (uint64_t)v10);
  sub_22E5F310C(a2, *(unsigned int **)(*a1 + 24), (uint64_t)v10);
  sub_22E5BC320((uint64_t)v17, v13 + 2904);
  sub_22F2840EC((uint64_t)v17);
  v8 = sub_22F28423C(*a1);
  sub_22E5E5158(a2, *(_QWORD *)(v8 + 8 * *(unsigned int *)(v8 + 8) + 32), 0, 0);
  return sub_22F283FC4((uint64_t)v10);
}

uint64_t sub_22E605570(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 1840);
  if (a2)
  {
    v6 = a3 - 24;
    if (!a3)
      v6 = 0;
    *(_QWORD *)(v4 + 1840) = v6;
  }
  ++*(_DWORD *)(v4 + 2640);
  result = sub_22F2945C8((uint64_t *)v4, *a1, a4);
  *(_QWORD *)(v4 + 1840) = v5;
  return result;
}

void sub_22E6055D0()
{
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22E6055E4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FA66858;
  result[1] = v3;
  return result;
}

uint64_t sub_22E605618(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FA66858;
  a2[1] = v2;
  return result;
}

uint64_t *sub_22E605634(uint64_t a1, llvm::BasicBlock **a2)
{
  return sub_22F294690(*(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_22E605644(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 1840);
  if (a2)
  {
    v6 = a3 - 24;
    if (!a3)
      v6 = 0;
    *(_QWORD *)(v4 + 1840) = v6;
  }
  ++*(_DWORD *)(v4 + 2640);
  result = sub_22F2945C8((uint64_t *)v4, *a1, a4);
  *(_QWORD *)(v4 + 1840) = v5;
  return result;
}

void sub_22E6056A4()
{
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22E6056B8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FA668A0;
  result[1] = v3;
  return result;
}

uint64_t sub_22E6056EC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FA668A0;
  a2[1] = v2;
  return result;
}

uint64_t *sub_22E605708(uint64_t a1, llvm::BasicBlock **a2)
{
  return sub_22F294690(*(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_22E605718(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 1840);
  if (a2)
  {
    v6 = a3 - 24;
    if (!a3)
      v6 = 0;
    *(_QWORD *)(v4 + 1840) = v6;
  }
  ++*(_DWORD *)(v4 + 2640);
  result = sub_22F2945C8((uint64_t *)v4, *a1, a4);
  *(_QWORD *)(v4 + 1840) = v5;
  return result;
}

void sub_22E605778()
{
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22E60578C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FA668E8;
  result[1] = v3;
  return result;
}

uint64_t sub_22E6057C0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FA668E8;
  a2[1] = v2;
  return result;
}

uint64_t *sub_22E6057DC(uint64_t a1, llvm::BasicBlock **a2)
{
  return sub_22F294690(*(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_22E6057EC(uint64_t a1, uint64_t a2, void (***a3)(_QWORD))
{
  (**a3)(a3);
  return sub_22E5E5158(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24)+ 8 * **(unsigned int **)(*(_QWORD *)a1 + 24)+ 8 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 4)+ 16), 0, 0);
}

uint64_t sub_22E605840(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  int v17;
  _QWORD v18[2];
  char v19;
  uint64_t v20;
  uint64_t (**v21)();
  int v22;
  _QWORD v23[12];

  v23[11] = *MEMORY[0x24BDAC8D0];
  v16[0] = 0;
  v16[1] = 0;
  v15 = a2;
  v17 = 0;
  sub_22E6007D0((uint64_t)v16, a2 + 2904);
  v21 = &off_24FA66C98;
  v22 = 2;
  v23[0] = 1;
  for (i = 3; i != 11; i += 2)
    (&v21)[i] = (uint64_t (**)())-4096;
  v23[9] = 0;
  v23[10] = 0;
  v5 = *(_QWORD *)(a2 + 1856);
  *(_QWORD *)(a2 + 1856) = &v21;
  sub_22E5F9AA8((uint64_t)v11, a2, *a1);
  v6 = *(_QWORD *)(*((_QWORD *)*a1 + 3) + 8 * **((unsigned int **)*a1 + 3) + 136);
  v18[0] = a2;
  v18[1] = a2 + 272;
  v19 = 0;
  v20 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
  v8 = sub_22E50E974(v18, v6, v7);
  if (v13)
  {
    v9 = v14;
    *(_BYTE *)(v14 + 2893) = v12;
    sub_22E48B274(v9, v11[0], v11[2], 0, 0);
    v13 = 0;
    *(_QWORD *)(v14 + 2872) = v11[1];
  }
  *(_QWORD *)(a2 + 1856) = v5;
  v21 = &off_24FA66C98;
  sub_22E49FAE8((uint64_t)v23);
  sub_22F293F6C(&v15);
  return v8;
}

uint64_t sub_22E6059B8(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD))
{
  (**a3)(a3);
  return sub_22E603020(a2, *a1, *(unsigned __int8 *)(*a1 + 36));
}

uint64_t sub_22E6059F4(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  int v17;
  _QWORD v18[2];
  char v19;
  uint64_t v20;
  uint64_t (**v21)();
  int v22;
  _QWORD v23[12];

  v23[11] = *MEMORY[0x24BDAC8D0];
  v16[0] = 0;
  v16[1] = 0;
  v15 = a2;
  v17 = 0;
  sub_22E6007D0((uint64_t)v16, a2 + 2904);
  v21 = &off_24FA66C98;
  v22 = 2;
  v23[0] = 1;
  for (i = 3; i != 11; i += 2)
    (&v21)[i] = (uint64_t (**)())-4096;
  v23[9] = 0;
  v23[10] = 0;
  v5 = *(_QWORD *)(a2 + 1856);
  *(_QWORD *)(a2 + 1856) = &v21;
  sub_22E5F9AA8((uint64_t)v11, a2, *a1);
  v6 = *(_QWORD *)(*((_QWORD *)*a1 + 3) + 8 * **((unsigned int **)*a1 + 3) + 136);
  v18[0] = a2;
  v18[1] = a2 + 272;
  v19 = 0;
  v20 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
  v8 = sub_22E50E974(v18, v6, v7);
  if (v13)
  {
    v9 = v14;
    *(_BYTE *)(v14 + 2893) = v12;
    sub_22E48B274(v9, v11[0], v11[2], 0, 0);
    v13 = 0;
    *(_QWORD *)(v14 + 2872) = v11[1];
  }
  *(_QWORD *)(a2 + 1856) = v5;
  v21 = &off_24FA66C98;
  sub_22E49FAE8((uint64_t)v23);
  sub_22F293F6C(&v15);
  return v8;
}

uint64_t sub_22E605B6C(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD))
{
  (**a3)(a3);
  return sub_22E603020(a2, *a1, 0);
}

uint64_t sub_22E605BA8(uint64_t *a1, int32x2_t *a2, void (***a3)(_QWORD))
{
  int32x2_t v5;
  int32x2_t v6;
  int32x2_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  __int8 v13;
  char v14;
  int32x2_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v19[2];
  int v20;
  _QWORD v21[3];
  uint64_t v22;

  (**a3)(a3);
  v14 = 1;
  v5 = (int32x2_t)(*(_QWORD *)&a2[249] - *(_QWORD *)&a2[250]);
  v6 = a2[289];
  v13 = a2[361].i8[5];
  a2[361].i8[5] = 0;
  v7 = a2[359];
  v12[0] = v5;
  v12[1] = v7;
  v12[2] = v6;
  a2[359] = v5;
  v16 = 0;
  v17 = 0;
  v15 = a2;
  v18 = 0;
  v19[0] = 0;
  v19[1] = 0;
  v20 = 0;
  v8 = sub_22E5F32D4(a2, *(unsigned int **)(*a1 + 24));
  sub_22E5F2534((uint64_t)a2, *a1, (uint64_t)v12);
  if (v8)
    (*(void (**)(_QWORD, int32x2_t *, _QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)&a2[18]
                                                                                                + 808)
                                                                                  + 184))(*(_QWORD *)(*(_QWORD *)&a2[18] + 808), a2, *(unsigned int *)(*a1 + 12), 89, 0, 1);
  sub_22E5F310C((uint64_t)a2, *(unsigned int **)(*a1 + 24), (uint64_t)v12);
  sub_22E5F4508();
  sub_22E5BC320((uint64_t)v19, (uint64_t)&v15[363]);
  sub_22F2840EC((uint64_t)v19);
  v9 = *a1;
  v21[2] = 0;
  v22 = v9;
  v10 = *(_QWORD *)(*(_QWORD *)&a2[18] + 808);
  v21[0] = &v22;
  v21[1] = sub_22E600920;
  (*(void (**)(uint64_t, int32x2_t *, _QWORD *, _QWORD))(*(_QWORD *)v10 + 136))(v10, a2, v21, *(unsigned int *)(v9 + 12));
  sub_22E5F523C((uint64_t)a2, *a1);
  return sub_22F283FC4((uint64_t)v12);
}

uint64_t sub_22E605D1C()
{
  return 0;
}

uint64_t sub_22E605D24(unsigned __int8 **a1, _QWORD *a2, void (***a3)(_QWORD))
{
  (**a3)(a3);
  return sub_22F28F5CC(a2, *a1);
}

uint64_t sub_22E605D5C(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*(_QWORD *)(result + 8))
  {
    v1 = *(unsigned int *)(result + 16);
    if (v1 <= 4 * *(_DWORD *)(result + 8) || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 8 * v1;
        do
        {
          *v2++ = -4096;
          v3 -= 8;
        }
        while (v3);
      }
      *(_QWORD *)(result + 8) = 0;
    }
    else
    {
      return sub_22E605DAC(result);
    }
  }
  return result;
}

uint64_t sub_22E605DAC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  llvm *v6;
  uint64_t v7;

  v1 = result;
  v2 = *(unsigned int *)(result + 16);
  v3 = *(_DWORD *)(result + 8);
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(llvm **)result;
      v7 = 8 * v2;
      do
      {
        *(_QWORD *)v6 = -4096;
        v6 = (llvm *)((char *)v6 + 8);
        v7 -= 8;
      }
      while (v7);
    }
  }
  else
  {
    llvm::deallocate_buffer(*(llvm **)result, (void *)(8 * v2));
    return sub_22E6002C4(v1, v5);
  }
  return result;
}

uint64_t sub_22E605E48()
{
  uint64_t v0;
  uint64_t v1;
  void (***v2)(_QWORD, uint64_t);
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t i;
  int v9;
  int v10;
  uint64_t v11;
  llvm *v12;
  char v13;
  int v14;
  int v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unsigned int v21;
  int *v22;
  unint64_t *v23;
  char *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  llvm::Value *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t **v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unsigned int v50;
  uint64_t *v51;
  int v52;
  int v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  int v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  _QWORD *v61;
  llvm::LLVMContext *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  _BOOL4 v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t *v117;
  __int128 v118;
  __int128 v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  _QWORD *v129;
  unint64_t v130;
  uint64_t v131;
  int v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  uint64_t v145;
  unint64_t v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  char *v152;
  char *v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  __int128 *v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  _QWORD *v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  int v184;
  _QWORD *v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t j;
  double v196;
  uint64_t v197;
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  llvm::Value *v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  int v209;
  llvm::Value *v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int *v213;
  uint64_t *v214;
  uint64_t v215;
  unsigned int v216;
  uint64_t *v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  int v229;
  int v230;
  int v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  void *v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  double v241;
  llvm::PointerType *v242;
  uint64_t v243;
  uint64_t v244;
  unsigned int v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  llvm::Value *v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  int v259;
  llvm::Value *v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int v263;
  uint64_t v265;
  void (***v266)(_QWORD, uint64_t);
  unint64_t v267;
  unint64_t v268;
  _BYTE *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t *v273;
  _OWORD v274[3];
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  uint64_t v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  _OWORD v287[3];
  _OWORD v288[3];
  _OWORD v289[3];
  _OWORD v290[3];
  _QWORD v291[3];
  int v292;
  uint64_t v293;
  uint64_t v294;
  _OWORD v295[3];
  _OWORD v296[3];
  _BYTE v297[96];
  __int128 v298;
  __int128 v299;
  uint64_t v300;
  _OWORD v301[3];
  _OWORD v302[3];
  _QWORD v303[3];
  char v304;
  char v305;
  uint64_t v306;
  uint64_t v307[2];
  int v308;
  _QWORD v309[2];
  int v310;
  _QWORD v311[2];
  int v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  void *v319[2];
  __int128 v320;
  __int128 v321;
  uint64_t v322;
  int v323;
  _QWORD v324[2];
  int v325;
  void *v326;
  uint64_t v327;
  _BYTE v328[32];
  void *v329;
  uint64_t v330;
  _BYTE v331[32];
  void *v332;
  uint64_t v333;
  _BYTE v334[32];
  void *v335;
  uint64_t v336;
  _BYTE v337[32];
  void *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  void *v346;
  uint64_t v347;
  _QWORD v348[11];
  uint64_t v349;
  void *v350;
  llvm *v351;
  _QWORD v352[114];

  v0 = MEMORY[0x24BDAC7A8]();
  v266 = v2;
  v3 = v1;
  v4 = (_QWORD *)v0;
  v352[112] = *MEMORY[0x24BDAC8D0];
  v311[1] = 0;
  v311[0] = 0;
  v312 = 0;
  v315 = 0;
  v313 = 0;
  v314 = 0;
  v305 = 1;
  v5 = *(_QWORD *)(v1 + 1992) - *(_QWORD *)(v1 + 2000);
  v303[2] = *(_QWORD *)(v1 + 2312);
  v304 = *(_BYTE *)(v1 + 2893);
  *(_BYTE *)(v1 + 2893) = 0;
  v6 = *(_QWORD *)(v1 + 2872);
  v303[0] = v5;
  v303[1] = v6;
  *(_QWORD *)(v1 + 2872) = v5;
  v307[1] = 0;
  v306 = v1;
  v307[0] = 0;
  v308 = 0;
  v309[1] = 0;
  v309[0] = 0;
  v310 = 0;
  v270 = v0;
  if (!*(_BYTE *)(v1 + 2892))
  {
    v272 = *(_QWORD *)(v1 + 2880);
    if (v272)
    {
      v7 = *(_DWORD **)(v1 + 1856);
      v350 = (void *)1;
      for (i = 8; i != 72; i += 16)
        *(void **)((char *)&v350 + i) = (void *)-4096;
      v9 = (int)v350;
      if ((v350 & 1) == 0)
      {
        llvm::deallocate_buffer(v351, (void *)(16 * LODWORD(v352[0])));
        v9 = (int)v350;
      }
      v10 = v7[4];
      if ((v10 & 1) != 0 || (v11 = v7[8], v11 <= 4))
      {
        v13 = v9 | 1;
        v12 = v351;
      }
      else
      {
        LODWORD(v350) = v9 & 0xFFFFFFFE;
        v12 = (llvm *)MEMORY[0x23489D23C](16 * v11, 8);
        v351 = v12;
        v352[0] = v11;
        v10 = v7[4];
        v13 = (char)v350;
      }
      v14 = v13 & 1;
      v15 = v7[5];
      LODWORD(v350) = v14 | v10 & 0xFFFFFFFE;
      HIDWORD(v350) = v15;
      if (v14)
        v12 = (llvm *)&v351;
      v16 = v7 + 6;
      if ((v10 & 1) == 0)
        v16 = (_QWORD *)*v16;
      if (v14)
        v17 = 64;
      else
        v17 = 16 * LODWORD(v352[0]);
      memcpy(v12, v16, v17);
      v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 1856) + 24))(*(_QWORD *)(v3 + 1856));
      v19 = (char)v350;
      if (v350 >= 2)
      {
        v20 = v18;
        if (v18)
        {
          v21 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
          v22 = sub_22F2893E4((int *)&v350);
          v19 = (char)v350;
          v24 = (char *)v351;
          if ((v350 & 1) != 0)
            v24 = (char *)&v351;
          v25 = v352[0];
          if ((v350 & 1) != 0)
            v25 = 4;
          if (&v24[16 * v25] != (char *)v22)
          {
            v26 = (unint64_t *)v22;
            v27 = v23;
            do
            {
              v28 = *(_QWORD *)(v26[1] + 16);
              v29 = v28 & 0xFFFFFFFFFFFFFFF8;
              if ((v28 & 4) != 0)
                v29 = *(_QWORD *)v29;
              v30 = *v26;
              v31 = (*(_WORD *)(v29 + 8) & 0x7E) - 34;
              if (v29)
                v32 = v29 - 64;
              else
                v32 = 0;
              if (v31 >= 4)
                v33 = 0;
              else
                v33 = v32;
              v34 = sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 144), v33);
              v35 = *(_QWORD *)(*(_QWORD *)(v34 + 48) + 8 * sub_22EFC306C(v26[1]));
              if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 184) + 96) & 0x1800000000000000) != 0)
                sub_22E49CDF8(v272, v30, v20, v3 + 272, 0);
              v36 = *(_QWORD *)(*(_QWORD *)(v3 + 320) + 40);
              if (v36)
                v37 = v36 - 24;
              else
                v37 = 0;
              v38 = sub_22E607BD8(v37);
              if (v38)
                v39 = (llvm::Value *)v37;
              else
                v39 = 0;
              if (v36 && v38)
              {
                v338 = &v340;
                HIDWORD(v339) = 8;
                v40 = (v35 / v21);
                if ((v35 / v21))
                {
                  v340 = 35;
                  v341 = (v35 / v21);
                  v40 = 2;
                }
                *(&v340 + v40) = 6;
                LODWORD(v339) = v40 | 1;
                llvm::Value::getContext(v39);
                llvm::DIExpression::getImpl();
                v41 = llvm::MetadataAsValue::get();
                v42 = *(_DWORD *)(v37 + 20);
                if ((v42 & 0x40000000) != 0)
                  v43 = *(_QWORD *)(v37 - 8);
                else
                  v43 = v37 - 32 * (v42 & 0x7FFFFFF);
                v44 = (uint64_t *)(v43 + 64);
                if (*(_QWORD *)(v43 + 64))
                {
                  **(_QWORD **)(v43 + 80) = *(_QWORD *)(v43 + 72);
                  v45 = *(_QWORD *)(v43 + 72);
                  if (v45)
                    *(_QWORD *)(v45 + 16) = *(_QWORD *)(v43 + 80);
                }
                *v44 = v41;
                if (v41)
                {
                  v48 = *(_QWORD *)(v41 + 8);
                  v46 = (uint64_t **)(v41 + 8);
                  v47 = v48;
                  *(_QWORD *)(v43 + 72) = v48;
                  if (v48)
                    *(_QWORD *)(v47 + 16) = v43 + 72;
                  *(_QWORD *)(v43 + 80) = v46;
                  *v46 = v44;
                }
                if (v338 != &v340)
                  free(v338);
              }
              while (1)
              {
                v26 += 2;
                if (v26 == v27)
                  break;
                if ((*v26 | 0x1000) != 0xFFFFFFFFFFFFF000)
                  goto LABEL_61;
              }
              v26 = v27;
LABEL_61:
              v19 = (char)v350;
              v49 = (char *)v351;
              if ((v350 & 1) != 0)
                v49 = (char *)&v351;
              v50 = v352[0];
              if ((v350 & 1) != 0)
                v50 = 4;
            }
            while (v26 != (unint64_t *)&v49[16 * v50]);
          }
        }
      }
      if ((v19 & 1) == 0)
        llvm::deallocate_buffer(v351, (void *)(16 * LODWORD(v352[0])));
      v4 = (_QWORD *)v270;
    }
  }
  v350 = v352;
  v351 = (llvm *)0x1000000000;
  v51 = (uint64_t *)*v4;
  if (!*(_DWORD *)(*v4 + 8) && !*((_DWORD *)v51 + 26) && !*((_DWORD *)v51 + 62) && !*((_DWORD *)v51 + 134))
    goto LABEL_115;
  v52 = v3 + 272;
  v346 = *(void **)((*(_QWORD *)(v4[2] + 16) & 0xFFFFFFFFFFFFFFF8) + 112);
  v338 = 0;
  v53 = sub_22E3CED3C((uint64_t *)(v3 + 2904), &v346, &v338);
  v54 = (char *)v338;
  if (!v53)
    v54 = (char *)(*(_QWORD *)(v3 + 2904) + 56 * *(unsigned int *)(v3 + 2920));
  v55 = *(_OWORD *)(v54 + 8);
  v56 = *(_OWORD *)(v54 + 40);
  v302[1] = *(_OWORD *)(v54 + 24);
  v302[2] = v56;
  v302[0] = v55;
  LOWORD(v342) = 257;
  v265 = sub_22E3C2A7C((uint64_t *)(v3 + 272), (uint64_t)v302, (uint64_t)&v338);
  v346 = *(void **)((*(_QWORD *)(*(_QWORD *)(v270 + 16) + 16) & 0xFFFFFFFFFFFFFFF8) + 104);
  v338 = 0;
  v57 = sub_22E3CED3C((uint64_t *)(v3 + 2904), &v346, &v338);
  v58 = (char *)v338;
  if (!v57)
    v58 = (char *)(*(_QWORD *)(v3 + 2904) + 56 * *(unsigned int *)(v3 + 2920));
  v59 = *(_OWORD *)(v58 + 8);
  v60 = *(_OWORD *)(v58 + 40);
  v301[1] = *(_OWORD *)(v58 + 24);
  v301[2] = v60;
  v301[0] = v59;
  LOWORD(v342) = 257;
  v61 = (_QWORD *)sub_22E3C2A7C((uint64_t *)(v3 + 272), (uint64_t)v301, (uint64_t)&v338);
  v338 = &v340;
  v339 = 0x1000000000;
  v346 = v348;
  v319[0] = &v320;
  v348[0] = v61;
  v347 = 0x1000000001;
  v63 = *(uint64_t **)v270;
  *(_QWORD *)&v320 = *v61;
  v319[1] = (void *)0x400000001;
  v64 = *((unsigned int *)v63 + 2);
  if ((_DWORD)v64)
  {
    v65 = *v63;
    v66 = 8 * v64;
    do
    {
      v67 = *(_QWORD *)(*(_QWORD *)v65 + 16);
      v68 = sub_22EF5B848(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 144), *(_QWORD *)(*(_QWORD *)v65 + 8), 0);
      *(_QWORD *)v297 = ".priv.ptr.addr";
      *(_WORD *)&v297[32] = 259;
      v69 = sub_22F25E4D4(v3, v68, (uint64_t)v297, 0);
      sub_22E607A80((uint64_t)&v338, v67, v69, v70);
      v71 = v347;
      if (v347 >= (unint64_t)HIDWORD(v347))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v71 = v347;
      }
      *((_QWORD *)v346 + v71) = v69 & 0xFFFFFFFFFFFFFFF8;
      LODWORD(v347) = v347 + 1;
      v72 = *(_QWORD *)(v69 & 0xFFFFFFFFFFFFFFF8);
      v73 = LODWORD(v319[1]);
      if (LODWORD(v319[1]) >= (unint64_t)HIDWORD(v319[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v73 = LODWORD(v319[1]);
      }
      *((_QWORD *)v319[0] + v73) = v72;
      ++LODWORD(v319[1]);
      v65 += 8;
      v66 -= 8;
    }
    while (v66);
    v63 = *(uint64_t **)v270;
  }
  v74 = *((unsigned int *)v63 + 26);
  if ((_DWORD)v74)
  {
    v75 = v63[12];
    v76 = 8 * v74;
    do
    {
      v77 = *(_QWORD *)(*(_QWORD *)v75 + 16);
      v78 = sub_22EF5B848(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 144), *(_QWORD *)(*(_QWORD *)v75 + 8), 0);
      *(_QWORD *)v297 = ".firstpriv.ptr.addr";
      *(_WORD *)&v297[32] = 259;
      v79 = sub_22F25E4D4(v3, v78, (uint64_t)v297, 0);
      v81 = v80;
      sub_22E607A80((uint64_t)&v338, v77, v79, v80);
      sub_22E607A80((uint64_t)&v350, v77, v79, v81);
      v82 = v347;
      if (v347 >= (unint64_t)HIDWORD(v347))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v82 = v347;
      }
      *((_QWORD *)v346 + v82) = v79 & 0xFFFFFFFFFFFFFFF8;
      LODWORD(v347) = v347 + 1;
      v83 = *(_QWORD *)(v79 & 0xFFFFFFFFFFFFFFF8);
      v84 = LODWORD(v319[1]);
      if (LODWORD(v319[1]) >= (unint64_t)HIDWORD(v319[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v84 = LODWORD(v319[1]);
      }
      *((_QWORD *)v319[0] + v84) = v83;
      ++LODWORD(v319[1]);
      v75 += 8;
      v76 -= 8;
    }
    while (v76);
    v63 = *(uint64_t **)v270;
  }
  v85 = *((unsigned int *)v63 + 62);
  v273 = (uint64_t *)(v3 + 272);
  if ((_DWORD)v85)
  {
    v86 = v63[30];
    v87 = 8 * v85;
    do
    {
      v88 = *(_QWORD *)(*(_QWORD *)v86 + 16);
      v89 = sub_22EF5B848(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 144), *(_QWORD *)(*(_QWORD *)v86 + 8), 0);
      *(_QWORD *)v297 = ".lastpriv.ptr.addr";
      *(_WORD *)&v297[32] = 259;
      v90 = sub_22F25E4D4(v3, v89, (uint64_t)v297, 0);
      sub_22E607A80((uint64_t)&v338, v88, v90, v91);
      v92 = v347;
      if (v347 >= (unint64_t)HIDWORD(v347))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v92 = v347;
      }
      *((_QWORD *)v346 + v92) = v90 & 0xFFFFFFFFFFFFFFF8;
      LODWORD(v347) = v347 + 1;
      v93 = *(_QWORD *)(v90 & 0xFFFFFFFFFFFFFFF8);
      v94 = LODWORD(v319[1]);
      if (LODWORD(v319[1]) >= (unint64_t)HIDWORD(v319[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v94 = LODWORD(v319[1]);
      }
      *((_QWORD *)v319[0] + v94) = v93;
      ++LODWORD(v319[1]);
      v86 += 8;
      v87 -= 8;
    }
    while (v87);
    v63 = *(uint64_t **)v270;
  }
  v95 = *((unsigned int *)v63 + 134);
  if ((_DWORD)v95)
  {
    v128 = v63[66];
    v271 = v128 + 8 * v95;
    v269 = &v297[32];
    while (1)
    {
      v129 = *(_QWORD **)v128;
      v130 = *(_QWORD *)(*(_QWORD *)v128 + 48);
      v131 = *(_QWORD *)(v130 & 0xFFFFFFFFFFFFFFF0);
      if (v131)
      {
        v132 = *(_DWORD *)(v131 + 16);
        if ((v132 & 0xFE) == 0x28)
          goto LABEL_161;
      }
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v131 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
      {
        v131 = sub_22F10CF48(v131);
        if (v131)
          break;
      }
LABEL_136:
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v129[6] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) == 40)
      {
        v268 = v268 & 0xFFFFFFFF00000000 | v52 & 0xE0;
        v130 = sub_22EF5B848(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 144), v130, v52 & 0xE0);
        v52 &= 0xFFFFFFE0;
      }
      if (sub_22E5F59F4((uint64_t)v129))
      {
        v267 = v267 & 0xFFFFFFFF00000000 | v269 & 0xE0;
        v130 = sub_22EF5B848(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 144), v130, v269 & 0xE0);
        LODWORD(v269) = v269 & 0xFFFFFFE0;
      }
      v133 = sub_22EF5B848(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 144), v130, 0);
      *(_QWORD *)v297 = ".local.ptr.addr";
      *(_WORD *)&v297[32] = 259;
      v134 = sub_22F25E4D4(v3, v133, (uint64_t)v297, 0);
      v136 = v135;
      v137 = (*(uint64_t (**)(_QWORD *))(*v129 + 32))(v129);
      v138 = 0;
      v139 = (uint64_t *)(v134 & 0xFFFFFFFFFFFFFFF8);
      if (v134 <= 7)
        v140 = 0;
      else
        v140 = v134 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v297 = v137;
      *(_QWORD *)&v297[8] = v140;
      v141 = v136 & 0xFFFFFFFFFFFFFFF8;
      if (v134 <= 7)
        v142 = 0;
      else
        v142 = v136 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)&v297[16] = v142;
      if (v134 >= 8)
        v138 = 1 << (v136 & 7 | (8 * (v134 & 7)));
      *(_QWORD *)&v297[24] = v138;
      *(_DWORD *)&v297[32] = 0;
      memset(&v297[40], 0, 44);
      *(_QWORD *)&v297[88] = 0;
      *(_QWORD *)&v298 = 0;
      v143 = (_QWORD *)sub_22F294994(v311, (uint64_t)v297);
      if (!(_BYTE)v62)
      {
        v144 = v143;
        memset(v297, 0, 28);
        *(_OWORD *)&v297[32] = 0uLL;
        *v143 = (*(uint64_t (**)(_QWORD *))(*v129 + 32))(v129);
        if (v134 < 8)
        {
          v141 = 0;
          v146 = 0;
          v145 = 0;
        }
        else
        {
          v145 = 1 << (v136 & 7 | (8 * (v134 & 7)));
          v146 = v134 & 0xFFFFFFFFFFFFFFF8;
        }
        v144[1] = v146;
        v144[2] = v141;
        v144[3] = v145;
        *((_DWORD *)v144 + 8) = 0;
        v144[5] = 0;
        v144[6] = 0;
        v147 = *(_OWORD *)&v297[16];
        *(_OWORD *)(v144 + 7) = *(_OWORD *)v297;
        *(_OWORD *)(v144 + 9) = v147;
        *(_OWORD *)(v144 + 11) = *(_OWORD *)&v297[32];
      }
      v148 = v347;
      if (v347 >= (unint64_t)HIDWORD(v347))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v148 = v347;
      }
      *((_QWORD *)v346 + v148) = v139;
      LODWORD(v347) = v347 + 1;
      v149 = *v139;
      v150 = LODWORD(v319[1]);
      if (LODWORD(v319[1]) >= (unint64_t)HIDWORD(v319[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v150 = LODWORD(v319[1]);
      }
      *((_QWORD *)v319[0] + v150) = v149;
      ++LODWORD(v319[1]);
      v128 += 8;
      if (v128 == v271)
        goto LABEL_104;
    }
    v132 = *(_DWORD *)(v131 + 16);
LABEL_161:
    if ((v132 & 0x100000) != 0)
    {
      do
      {
        v131 = *(_QWORD *)(*(_QWORD *)(v131 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v131)
        {
          v151 = *(_DWORD *)(v131 + 16);
          if ((v151 & 0xFE) == 0x28)
            continue;
        }
        v131 = sub_22F10CF48(v131);
        v151 = *(_DWORD *)(v131 + 16);
      }
      while ((v151 & 0x100000) != 0);
    }
    v130 = *(_QWORD *)(v131 + 32);
    goto LABEL_136;
  }
LABEL_104:
  llvm::Type::getVoidTy(*(llvm::Type **)(v3 + 336), v62);
  v96 = llvm::FunctionType::get();
  v97 = llvm::PointerType::get();
  *(_WORD *)&v297[32] = 257;
  v98 = (uint64_t *)(v3 + 272);
  v99 = sub_22E3C1338(v273, v265, v97, (uint64_t)v297);
  (*(void (**)(_QWORD, uint64_t, _QWORD, unint64_t, uint64_t, void *, _QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 144) + 808)
                                                                                             + 568))(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 808), v3, *(unsigned int *)(*(_QWORD *)(v270 + 8) + 12), v96, v99, v346, v347);
  v100 = *(_QWORD *)(v270 + 32);
  v101 = *(uint64_t **)(v100 + 24);
  v102 = *(uint64_t **)(v100 + 32);
  while (v101 != v102)
  {
    v103 = *(_QWORD *)(v101[1] + 16);
    v104 = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 144);
    v105 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 1856) + 32))(*(_QWORD *)(v3 + 1856), v103) != 0;
    v106 = v101[1];
    v107 = *(_QWORD *)(v106 + 8);
    sub_22EFF605C(v106);
    *(_QWORD *)v297 = 0;
    sub_22EFF69F0((uint64_t)&v316, v104, v103, v105, v107, 1, v108, v297, 0);
    v109 = *v101;
    v101 += 2;
    v96 = v109;
    sub_22E4D8D7C(v297);
    v275 = *(_OWORD *)&v297[8];
    v276 = *(_OWORD *)&v297[24];
    v277 = *(_OWORD *)&v297[40];
    sub_22E5BC134(v307, v306, v109, (uint64_t)&v275);
  }
  if ((_DWORD)v339)
  {
    v152 = (char *)v338;
    v153 = (char *)v338 + 56 * v339;
    while (1)
    {
      v154 = *(_OWORD *)(v152 + 8);
      v155 = *(_OWORD *)(v152 + 40);
      v296[1] = *(_OWORD *)(v152 + 24);
      v296[2] = v155;
      v296[0] = v154;
      *(_WORD *)&v297[32] = 257;
      v96 = sub_22E3C2A7C(v98, (uint64_t)v296, (uint64_t)v297);
      v156 = *(_QWORD *)(*(_QWORD *)v152 + 48);
      v157 = *(_QWORD *)(v156 & 0xFFFFFFFFFFFFFFF0);
      if (v157)
      {
        v158 = *(_DWORD *)(v157 + 16);
        if ((v158 & 0xFE) == 0x28)
          goto LABEL_183;
      }
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v157 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
      {
        v157 = sub_22F10CF48(v157);
        if (v157)
          break;
      }
LABEL_172:
      v159 = sub_22E66C868(*(_QWORD *)(v3 + 144) + 280, v156, 0);
      v160 = sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 144), *(_QWORD *)v152, 0);
      v161 = *(_QWORD *)v152;
      *(_QWORD *)v297 = v96;
      *(_QWORD *)&v297[8] = v159;
      *(_QWORD *)&v297[16] = v160;
      *(_DWORD *)&v297[24] = 0;
      *(_OWORD *)&v297[32] = 0uLL;
      sub_22E5BC134(v307, v306, v161, (uint64_t)v297);
      if (!*(_BYTE *)(v3 + 2892))
      {
        v162 = *(_QWORD *)(v3 + 2880);
        if (v162)
        {
          if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 184) + 96) & 0x1800000000000000) != 0)
          {
            if ((v152[32] & 3) != 0)
              v163 = 0;
            else
              v163 = *((_QWORD *)v152 + 1);
            sub_22E49CDF8(v162, *(_QWORD *)v152, v163, (uint64_t)v98, 1);
          }
        }
      }
      v152 += 56;
      if (v152 == v153)
        goto LABEL_107;
    }
    v158 = *(_DWORD *)(v157 + 16);
LABEL_183:
    if ((v158 & 0x100000) != 0)
    {
      do
      {
        v157 = *(_QWORD *)(*(_QWORD *)(v157 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v157 || (v164 = *(_DWORD *)(v157 + 16), (v164 & 0xFE) != 0x28))
        {
          v157 = sub_22F10CF48(v157);
          v164 = *(_DWORD *)(v157 + 16);
        }
        v98 = (uint64_t *)(v3 + 272);
      }
      while ((v164 & 0x100000) != 0);
    }
    v156 = *(_QWORD *)(v157 + 32);
    goto LABEL_172;
  }
LABEL_107:
  v110 = v313;
  v111 = v314;
  if (v313 != v314)
  {
    while (1)
    {
      v165 = *(_QWORD *)(*(_QWORD *)v110 + 48);
      v166 = *(_QWORD *)(v165 & 0xFFFFFFFFFFFFFFF0);
      if (v166)
      {
        v167 = *(_DWORD *)(v166 + 16);
        if ((v167 & 0xFE) == 0x28)
          goto LABEL_200;
      }
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v166 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
      {
        v166 = sub_22F10CF48(v166);
        if (v166)
          break;
      }
LABEL_193:
      v168 = (__int128 *)(v110 + 8);
      if (sub_22E5F59F4(*(_QWORD *)v110))
      {
        v169 = *v168;
        v170 = *(_OWORD *)(v110 + 40);
        v295[1] = *(_OWORD *)(v110 + 24);
        v295[2] = v170;
        v295[0] = v169;
        *(_WORD *)&v297[32] = 257;
        v171 = sub_22E3C2A7C(v273, (uint64_t)v295, (uint64_t)v297);
        v96 = v96 & 0xFFFFFFFF00000000 | v102 & 0xE0;
        v172 = sub_22EF5B848(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 144), v165, v96);
        v173 = sub_22E66C868(*(_QWORD *)(v3 + 144) + 280, v172, 0);
        v174 = *(unsigned __int8 *)(v3 + 130);
        *(_QWORD *)(v110 + 8) = v171;
        *(_QWORD *)(v110 + 16) = v173;
        *(_QWORD *)(v110 + 24) = v174;
        *(_DWORD *)(v110 + 32) = 0;
        *(_QWORD *)(v110 + 40) = 0;
        *(_QWORD *)(v110 + 48) = 0;
        v291[0] = v171;
        v291[1] = v173;
        v291[2] = v174;
        v292 = 0;
        v293 = 0;
        v294 = 0;
        *(_WORD *)&v297[32] = 257;
        v175 = sub_22E3C2A7C(v273, (uint64_t)v291, (uint64_t)v297);
        v176 = sub_22E66C868(*(_QWORD *)(v3 + 144) + 280, v165, 0);
        v177 = sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 144), *(_QWORD *)v110, 0);
        *(_QWORD *)(v110 + 56) = v175;
        *(_QWORD *)(v110 + 64) = v176;
        *(_QWORD *)(v110 + 72) = v177;
        *(_DWORD *)(v110 + 80) = 0;
        v178 = (_QWORD *)(v110 + 88);
        LODWORD(v102) = v102 & 0xFFFFFFE0;
      }
      else
      {
        v179 = *v168;
        v180 = *(_OWORD *)(v110 + 40);
        v290[1] = *(_OWORD *)(v110 + 24);
        v290[2] = v180;
        v290[0] = v179;
        *(_WORD *)&v297[32] = 257;
        v181 = sub_22E3C2A7C(v273, (uint64_t)v290, (uint64_t)v297);
        v182 = sub_22E66C868(*(_QWORD *)(v3 + 144) + 280, v165, 0);
        v183 = sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 144), *(_QWORD *)v110, 0);
        *(_QWORD *)(v110 + 8) = v181;
        *(_QWORD *)(v110 + 16) = v182;
        *(_QWORD *)(v110 + 24) = v183;
        *(_DWORD *)(v110 + 32) = 0;
        v178 = (_QWORD *)(v110 + 40);
      }
      *v178 = 0;
      v178[1] = 0;
      v110 += 104;
      if (v110 == v111)
        goto LABEL_108;
    }
    v167 = *(_DWORD *)(v166 + 16);
LABEL_200:
    if ((v167 & 0x100000) != 0)
    {
      do
      {
        v166 = *(_QWORD *)(*(_QWORD *)(v166 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v166)
        {
          v184 = *(_DWORD *)(v166 + 16);
          if ((v184 & 0xFE) == 0x28)
            continue;
        }
        v166 = sub_22F10CF48(v166);
        v184 = *(_DWORD *)(v166 + 16);
      }
      while ((v184 & 0x100000) != 0);
    }
    v165 = *(_QWORD *)(v166 + 32);
    goto LABEL_193;
  }
LABEL_108:
  if (v319[0] != &v320)
    free(v319[0]);
  v4 = (_QWORD *)v270;
  if (v346 != v348)
    free(v346);
  if (v338 != &v340)
    free(v338);
  v51 = *(uint64_t **)v270;
LABEL_115:
  if (!v51[109])
    goto LABEL_216;
  BYTE9(v276) = 1;
  v112 = *(_QWORD *)(v3 + 1992) - *(_QWORD *)(v3 + 2000);
  v113 = *(_QWORD *)(v3 + 2312);
  BYTE8(v276) = *(_BYTE *)(v3 + 2893);
  *(_BYTE *)(v3 + 2893) = 0;
  v114 = *(_QWORD *)(v3 + 2872);
  *(_QWORD *)&v275 = v112;
  *((_QWORD *)&v275 + 1) = v114;
  *(_QWORD *)&v276 = v113;
  *(_QWORD *)(v3 + 2872) = v112;
  *(_QWORD *)&v278 = 0;
  v277 = (unint64_t)v3;
  DWORD2(v278) = 0;
  v279 = 0uLL;
  LODWORD(v280) = 0;
  v115 = v3;
  if (!(_DWORD)v351)
    goto LABEL_207;
  v116 = (unint64_t *)v350;
  v117 = (unint64_t *)((char *)v350 + 56 * v351);
  do
  {
    v118 = *(_OWORD *)(v116 + 1);
    v119 = *(_OWORD *)(v116 + 5);
    v289[1] = *(_OWORD *)(v116 + 3);
    v289[2] = v119;
    v289[0] = v118;
    LOWORD(v342) = 257;
    v120 = (void *)sub_22E3C2A7C((uint64_t *)(v3 + 272), (uint64_t)v289, (uint64_t)&v338);
    v121 = *(_QWORD *)(*v116 + 48);
    v122 = *(_QWORD *)(v121 & 0xFFFFFFFFFFFFFFF0);
    if (!v122 || (v123 = *(_DWORD *)(v122 + 16), (v123 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v122 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        goto LABEL_121;
      v122 = sub_22F10CF48(v122);
      if (!v122)
        goto LABEL_121;
      v123 = *(_DWORD *)(v122 + 16);
    }
    if ((v123 & 0x100000) != 0)
    {
      do
      {
        v122 = *(_QWORD *)(*(_QWORD *)(v122 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v122)
        {
          v127 = *(_DWORD *)(v122 + 16);
          if ((v127 & 0xFE) == 0x28)
            continue;
        }
        v122 = sub_22F10CF48(v122);
        v127 = *(_DWORD *)(v122 + 16);
      }
      while ((v127 & 0x100000) != 0);
    }
    v121 = *(_QWORD *)(v122 + 32);
LABEL_121:
    v124 = sub_22E66C868(*(_QWORD *)(v3 + 144) + 280, v121, 0);
    v125 = sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 144), *v116, 0);
    v126 = *v116;
    v116 += 7;
    v338 = v120;
    v339 = v124;
    v340 = v125;
    LODWORD(v341) = 0;
    v342 = 0;
    v343 = 0;
    sub_22E5BC134((uint64_t *)&v277 + 1, v277, v126, (uint64_t)&v338);
  }
  while (v116 != v117);
  v115 = v277;
LABEL_207:
  sub_22E5BC320((uint64_t)&v279, v115 + 2904);
  sub_22F2840EC((uint64_t)&v279);
  v185 = (_QWORD *)v270;
  sub_22E600354((uint64_t)&v346, v3, *(_QWORD *)(v270 + 8), *(unsigned int *)(v270 + 40) | 0x100000000, 1);
  sub_22F27B534((unint64_t)&v338, *(uint64_t **)(*v185 + 336), *(unsigned int *)(*v185 + 344), *(uint64_t **)(*v185 + 336), *(unsigned int *)(*v185 + 344), *(uint64_t **)(*v185 + 432), *(unsigned int *)(*v185 + 440), v186, *(uint64_t **)(*v185 + 480));
  v319[0] = *(void **)((*(_QWORD *)(*(_QWORD *)(v270 + 16) + 16) & 0xFFFFFFFFFFFFFFF8) + 160);
  *(_QWORD *)v297 = 0;
  v187 = sub_22E3CED3C((uint64_t *)(v3 + 2904), v319, v297);
  v188 = *(_QWORD *)v297;
  if (!v187)
    v188 = *(_QWORD *)(v3 + 2904) + 56 * *(unsigned int *)(v3 + 2920);
  v189 = *(_OWORD *)(v188 + 8);
  v190 = *(_OWORD *)(v188 + 40);
  v288[1] = *(_OWORD *)(v188 + 24);
  v288[2] = v190;
  v288[0] = v189;
  *(_WORD *)&v297[32] = 257;
  v191 = sub_22E3C2A7C((uint64_t *)(v3 + 272), (uint64_t)v288, (uint64_t)v297);
  v192 = *(unsigned int *)(*(_QWORD *)v270 + 344);
  if ((_DWORD)v192)
  {
    v193 = v191;
    v194 = 0;
    for (j = 0; j != v192; ++j)
    {
      sub_22F27B6EC(&v338, (_QWORD *)v3, j);
      *(int32x2_t *)&v196 = sub_22E59D1E0((uint64_t)&v338, v3, j);
      (*(void (**)(_QWORD, uint64_t, _QWORD, void **, uint64_t, double))(**(_QWORD **)(*(_QWORD *)(v3 + 144)
                                                                                              + 808)
                                                                                + 392))(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 808), v3, *(unsigned int *)(v185[1] + 12), &v338, j, v196);
      v197 = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 808);
      v198 = *(unsigned int *)(v185[1] + 12);
      *(_OWORD *)v297 = *(_OWORD *)(v344 + v194);
      v199 = *(_OWORD *)(v344 + v194 + 64);
      v201 = *(_OWORD *)(v344 + v194 + 16);
      v200 = *(_OWORD *)(v344 + v194 + 32);
      *(_OWORD *)&v297[48] = *(_OWORD *)(v344 + v194 + 48);
      *(_OWORD *)&v297[64] = v199;
      *(_OWORD *)&v297[16] = v201;
      *(_OWORD *)&v297[32] = v200;
      v203 = *(_OWORD *)(v344 + v194 + 96);
      v202 = *(_OWORD *)(v344 + v194 + 112);
      v204 = *(_OWORD *)(v344 + v194 + 80);
      v300 = *(_QWORD *)(v344 + v194 + 128);
      v298 = v203;
      v299 = v202;
      *(_OWORD *)&v297[80] = v204;
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v197
                                                                                                  + 400))(&v316, v197, v3, v198, v193, v297);
      if ((BYTE8(v317) & 3) != 0)
        v205 = (llvm::Value *)sub_22F28ABCC(&v316, v3);
      else
        v205 = (llvm::Value *)v316;
      v206 = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 144);
      v207 = *(_QWORD *)(v206 + 16816);
      v185 = (_QWORD *)v270;
      v208 = sub_22EF5B848(v206, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v270 + 432) + 8 * j) + 8), 0);
      sub_22EFF605C(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v270 + 432) + 8 * j));
      v319[0] = (void *)v3;
      v319[1] = (void *)(v3 + 272);
      LOBYTE(v320) = 0;
      *((_QWORD *)&v320 + 1) = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 232);
      v210 = sub_22E50EA80((uint64_t *)v319, v205, v207, v208, v209, 0);
      v211 = sub_22E66C868(*(_QWORD *)(v3 + 144) + 280, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v270 + 432) + 8 * j) + 8), 0);
      *(_QWORD *)&v316 = v210;
      *((_QWORD *)&v316 + 1) = v211;
      DWORD2(v317) = 0;
      v318 = 0uLL;
      v287[0] = v316;
      v287[1] = v317;
      v287[2] = 0uLL;
      sub_22E59DB9C((uint64_t)&v338, v3, j, v287, v319);
      v318 = v321;
      v317 = v320;
      v316 = *(_OWORD *)v319;
      sub_22E5BC134(v307, v306, *(_QWORD *)(v345 + 8 * j), (uint64_t)v319);
      v194 += 272;
    }
  }
  sub_22F284140((uint64_t)&v338);
  sub_22F283FC4((uint64_t)&v349);
  sub_22E488B4C((uint64_t)&v346);
  sub_22F283FC4((uint64_t)&v275);
  v4 = v185;
LABEL_216:
  sub_22E5BC320((uint64_t)v309, v306 + 2904);
  sub_22F2840EC((uint64_t)v309);
  v335 = v337;
  v336 = 0x400000000;
  v332 = v334;
  v333 = 0x400000000;
  v329 = v331;
  v330 = 0x400000000;
  v326 = v328;
  v327 = 0x400000000;
  v213 = *(unsigned int **)(v4[1] + 24);
  if (v213)
  {
    v216 = *v213;
    v214 = (uint64_t *)(v213 + 4);
    v215 = v216;
    if (v216)
    {
      v234 = 8 * v215;
      v217 = v214;
      while (*(_DWORD *)(*v217 + 8) != 37)
      {
        ++v217;
        v234 -= 8;
        if (!v234)
          goto LABEL_244;
      }
    }
    else
    {
      v217 = v214;
    }
    v218 = &v214[v215];
    if (v217 == v218)
    {
LABEL_244:
      LODWORD(v213) = 0;
    }
    else
    {
      v219 = *v217;
LABEL_221:
      v220 = *(unsigned int *)(v219 + 16);
      if ((_DWORD)v220)
      {
        v221 = 0;
        v222 = v219 + 96;
        v223 = 8 * v220;
        v224 = v219 + 96 + 8 * v220;
        v225 = v219 + 96 + 40 * v220;
        v226 = v219 + 96 + 32 * v220;
        do
        {
          v227 = *(_QWORD *)(v222 + v221);
          v228 = v336;
          if (v336 >= HIDWORD(v336))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            *((_QWORD *)v335 + v336) = v227;
            v228 = v336;
          }
          else
          {
            *((_QWORD *)v335 + v336) = v227;
          }
          LODWORD(v336) = v228 + 1;
          v229 = v333;
          if (v333 >= HIDWORD(v333))
          {
            sub_22F24BF64((uint64_t)&v332, *(_QWORD *)(v224 + v221));
          }
          else
          {
            *((_QWORD *)v332 + v333) = *(_QWORD *)(v224 + v221);
            LODWORD(v333) = v229 + 1;
          }
          v230 = v330;
          if (v330 >= HIDWORD(v330))
          {
            sub_22F24BF64((uint64_t)&v329, *(_QWORD *)(v226 + v221));
          }
          else
          {
            *((_QWORD *)v329 + v330) = *(_QWORD *)(v226 + v221);
            LODWORD(v330) = v230 + 1;
          }
          v231 = v327;
          if (v327 >= HIDWORD(v327))
          {
            sub_22F24BF64((uint64_t)&v326, *(_QWORD *)(v225 + v221));
          }
          else
          {
            *((_QWORD *)v326 + v327) = *(_QWORD *)(v225 + v221);
            LODWORD(v327) = v231 + 1;
          }
          v221 += 8;
        }
        while (v223 != v221);
      }
      v232 = v217 + 1;
      while (v232 != v218)
      {
        v233 = *v232++;
        v219 = v233;
        if (*(_DWORD *)(v233 + 8) == 37)
        {
          v217 = v232 - 1;
          goto LABEL_221;
        }
      }
      LODWORD(v213) = v336;
    }
  }
  BYTE9(v320) = 1;
  v235 = (void *)(*(_QWORD *)(v3 + 1992) - *(_QWORD *)(v3 + 2000));
  *(_QWORD *)&v320 = *(_QWORD *)(v3 + 2312);
  BYTE8(v320) = *(_BYTE *)(v3 + 2893);
  *(_BYTE *)(v3 + 2893) = 0;
  v236 = *(void **)(v3 + 2872);
  v319[0] = v235;
  v319[1] = v236;
  *(_QWORD *)(v3 + 2872) = v235;
  v322 = 0;
  v321 = (unint64_t)v3;
  v323 = 0;
  v324[1] = 0;
  v324[0] = 0;
  v237 = v3;
  v325 = 0;
  if ((_DWORD)v213)
  {
    sub_22F27B534((unint64_t)&v338, (uint64_t *)v335, v213, (uint64_t *)v335, v213, (uint64_t *)v332, v333, v212, (uint64_t *)v329);
    v238 = v336;
    if ((_DWORD)v336)
    {
      v239 = 0;
      v240 = 0;
      do
      {
        sub_22F27B6EC(&v338, (_QWORD *)v3, v240);
        *(int32x2_t *)&v241 = sub_22E59D1E0((uint64_t)&v338, v3, v240);
        (*(void (**)(_QWORD, uint64_t, _QWORD, void **, uint64_t, double))(**(_QWORD **)(*(_QWORD *)(v3 + 144)
                                                                                                + 808)
                                                                                  + 392))(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 808), v3, *(unsigned int *)(*(_QWORD *)(v270 + 8) + 12), &v338, v240, v241);
        v243 = *((_QWORD *)v326 + v240);
        if (v243)
        {
          sub_22E4D8D7C(&v346);
          sub_22EFF605C(v243);
          v244 = sub_22F25F748(v3, (uint64_t)&v346, v245);
        }
        else
        {
          v244 = llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(v3 + 96), v242);
        }
        v246 = v244;
        v247 = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 808);
        v248 = *(unsigned int *)(*(_QWORD *)(v270 + 8) + 12);
        v275 = *(_OWORD *)(v344 + v239);
        v249 = *(_OWORD *)(v344 + v239 + 64);
        v251 = *(_OWORD *)(v344 + v239 + 16);
        v250 = *(_OWORD *)(v344 + v239 + 32);
        v278 = *(_OWORD *)(v344 + v239 + 48);
        v279 = v249;
        v276 = v251;
        v277 = v250;
        v253 = *(_OWORD *)(v344 + v239 + 96);
        v252 = *(_OWORD *)(v344 + v239 + 112);
        v254 = *(_OWORD *)(v344 + v239 + 80);
        v283 = *(_QWORD *)(v344 + v239 + 128);
        v281 = v253;
        v282 = v252;
        v280 = v254;
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)v247 + 400))(&v284, v247, v3, v248, v246, &v275);
        if ((BYTE8(v285) & 3) != 0)
          v255 = (llvm::Value *)sub_22F28ABCC(&v284, v3);
        else
          v255 = (llvm::Value *)v284;
        v256 = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 144);
        v257 = *(_QWORD *)(v256 + 16816);
        v258 = sub_22EF5B848(v256, *(_QWORD *)(*((_QWORD *)v332 + v240) + 8), 0);
        sub_22EFF605C(*((_QWORD *)v332 + v240));
        *(_QWORD *)&v316 = v3;
        *((_QWORD *)&v316 + 1) = v3 + 272;
        LOBYTE(v317) = 0;
        *((_QWORD *)&v317 + 1) = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 232);
        v260 = sub_22E50EA80((uint64_t *)&v316, v255, v257, v258, v259, 0);
        v261 = sub_22E66C868(*(_QWORD *)(v3 + 144) + 280, *(_QWORD *)(*((_QWORD *)v332 + v240) + 8), 0);
        *(_QWORD *)&v284 = v260;
        *((_QWORD *)&v284 + 1) = v261;
        DWORD2(v285) = 0;
        v286 = 0uLL;
        v274[0] = v284;
        v274[1] = v285;
        v274[2] = 0uLL;
        sub_22E59DB9C((uint64_t)&v338, v3, v240, v274, &v316);
        v285 = v317;
        v286 = v318;
        v284 = v316;
        sub_22E5BC134((uint64_t *)&v321 + 1, v321, *(_QWORD *)(v345 + 8 * v240++), (uint64_t)&v316);
        v239 += 272;
      }
      while (v238 != v240);
    }
    sub_22F284140((uint64_t)&v338);
    v237 = v321;
  }
  sub_22E5BC320((uint64_t)v324, v237 + 2904);
  sub_22F2840EC((uint64_t)v324);
  sub_22E5B8974(&v338, v3, (unint64_t)v311);
  (**v266)(v266, v3);
  sub_22F27B464(*(_QWORD **)(v270 + 24), v3);
  if ((_BYTE)v339)
  {
    v262 = *((_QWORD *)v338 + 101);
    v263 = *(_DWORD *)(v262 + 3232) - 1;
    *(_DWORD *)(v262 + 3232) = v263;
    sub_22F244D40(*(_QWORD *)(v262 + 3224) + 48 * v263);
  }
  sub_22F283FC4((uint64_t)v319);
  if (v326 != v328)
    free(v326);
  if (v329 != v331)
    free(v329);
  if (v332 != v334)
    free(v332);
  if (v335 != v337)
    free(v335);
  if (v350 != v352)
    free(v350);
  sub_22F283FC4((uint64_t)v303);
  return sub_22F244D40((uint64_t)v311);
}

uint64_t sub_22E607A80(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  _QWORD v23[4];
  int v24;
  uint64_t v25;
  uint64_t v26;

  v4 = result;
  v5 = *(_DWORD *)(result + 8);
  if (v5 >= *(_DWORD *)(result + 12))
  {
    v12 = a3 & 0xFFFFFFFFFFFFFFF8;
    if (a3 <= 7)
      v12 = 0;
    v23[0] = a2;
    v23[1] = v12;
    v13 = a4 & 0xFFFFFFFFFFFFFFF8;
    if (a3 <= 7)
      v13 = 0;
    v14 = 1 << (a4 & 7 | (8 * (a3 & 7)));
    if (a3 < 8)
      v14 = 0;
    v23[2] = v13;
    v23[3] = v14;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v15 = *(_QWORD *)result + 56 * (unint64_t)v5 > (unint64_t)v23;
    if (*(_QWORD *)result <= (unint64_t)v23 && v15)
    {
      v22 = (char *)v23 - *(_QWORD *)result;
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v16 = *(_QWORD *)v4;
      v17 = &v22[*(_QWORD *)v4];
    }
    else
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v16 = *(_QWORD *)v4;
      v17 = (char *)v23;
    }
    v18 = v16 + 56 * *(unsigned int *)(v4 + 8);
    v19 = *(_OWORD *)v17;
    v20 = *((_OWORD *)v17 + 1);
    v21 = *((_OWORD *)v17 + 2);
    *(_QWORD *)(v18 + 48) = *((_QWORD *)v17 + 6);
    *(_OWORD *)(v18 + 16) = v20;
    *(_OWORD *)(v18 + 32) = v21;
    *(_OWORD *)v18 = v19;
  }
  else
  {
    v6 = *(_QWORD *)result;
    v7 = (_QWORD *)(*(_QWORD *)result + 56 * v5);
    v8 = a3 & 0xFFFFFFFFFFFFFFF8;
    if (a3 <= 7)
      v8 = 0;
    *v7 = a2;
    v7[1] = v8;
    v9 = a4 & 0xFFFFFFFFFFFFFFF8;
    if (a3 <= 7)
      v9 = 0;
    v7[2] = v9;
    v10 = 1 << (a4 & 7 | (8 * (a3 & 7)));
    if (a3 < 8)
      v10 = 0;
    v11 = v6 + 56 * v5;
    *(_QWORD *)(v11 + 24) = v10;
    *(_DWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 40) = 0;
    *(_QWORD *)(v11 + 48) = 0;
  }
  ++*(_DWORD *)(v4 + 8);
  return result;
}

unint64_t sub_22E607BD8(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  if (*(_BYTE *)(a1 + 16) == 84
    && (v1 = *(_QWORD *)(a1 - 32)) != 0
    && !*(_BYTE *)(v1 + 16)
    && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
    && (*(_BYTE *)(v1 + 33) & 0x20) != 0
    && (v2 = *(_DWORD *)(v1 + 36), v2 <= 0x3A))
  {
    return (0x580000000000000uLL >> v2) & 1;
  }
  else
  {
    return 0;
  }
}

char *sub_22E607C30(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  __int128 v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0x4EC4EC4EC4EC4EC5 * ((v2 - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x276276276276276)
    abort();
  if (0x9D89D89D89D89D8ALL * (((_BYTE *)a1[2] - v3) >> 3) > v5)
    v5 = 0x9D89D89D89D89D8ALL * (((_BYTE *)a1[2] - v3) >> 3);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (((_BYTE *)a1[2] - v3) >> 3)) >= 0x13B13B13B13B13BLL)
    v8 = 0x276276276276276;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x276276276276276)
      sub_22E3B3F8C();
    v9 = (char *)operator new(104 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *(_OWORD *)(a2 + 80);
  v11 = &v9[104 * v4];
  *((_OWORD *)v11 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v11 + 5) = v10;
  *((_QWORD *)v11 + 12) = *(_QWORD *)(a2 + 96);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  v13 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v11 + 3) = v13;
  v14 = v11 + 104;
  if (v2 != v3)
  {
    do
    {
      v15 = *(_OWORD *)(v2 - 104);
      v16 = *(_OWORD *)(v2 - 88);
      *(_OWORD *)(v11 - 72) = *(_OWORD *)(v2 - 72);
      *(_OWORD *)(v11 - 88) = v16;
      *(_OWORD *)(v11 - 104) = v15;
      v17 = *(_OWORD *)(v2 - 56);
      v18 = *(_OWORD *)(v2 - 40);
      v19 = *(_OWORD *)(v2 - 24);
      *((_QWORD *)v11 - 1) = *((_QWORD *)v2 - 1);
      *(_OWORD *)(v11 - 24) = v19;
      *(_OWORD *)(v11 - 40) = v18;
      *(_OWORD *)(v11 - 56) = v17;
      v11 -= 104;
      v2 -= 104;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v14;
  a1[2] = &v9[104 * v8];
  if (v2)
    operator delete(v2);
  return v14;
}

uint64_t sub_22E607D98(_QWORD *a1, uint64_t a2, void (***a3)(_QWORD, uint64_t))
{
  void (***v3)(_QWORD, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  llvm::LLVMContext *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  _OWORD *v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  _OWORD *v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  _OWORD *v49;
  __int128 v50;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  char v74[32];
  __int16 v75;
  _OWORD v76[2];
  __int128 v77;
  _OWORD v78[3];
  _OWORD v79[3];
  _OWORD v80[3];
  _QWORD v81[3];
  char v82;
  char v83;
  uint64_t v84;
  uint64_t v85[2];
  int v86;
  _QWORD v87[2];
  int v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _OWORD v96[8];
  __int128 v97;
  __int128 v98;
  __int128 v99;
  _QWORD v100[104];

  v3 = a3;
  v100[101] = *MEMORY[0x24BDAC8D0];
  v83 = 1;
  v6 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
  v7 = *(_QWORD *)(a2 + 2312);
  v82 = *(_BYTE *)(a2 + 2893);
  *(_BYTE *)(a2 + 2893) = 0;
  v8 = *(_QWORD *)(a2 + 2872);
  v81[0] = v6;
  v81[1] = v8;
  v81[2] = v7;
  *(_QWORD *)(a2 + 2872) = v6;
  v85[0] = 0;
  v85[1] = 0;
  v84 = a2;
  v86 = 0;
  v87[0] = 0;
  v87[1] = 0;
  v88 = 0;
  v9 = a2;
  if (!*(_DWORD *)(*a1 + 104))
    goto LABEL_15;
  *(_QWORD *)&v95 = *(_QWORD *)((*(_QWORD *)(a1[2] + 16) & 0xFFFFFFFFFFFFFFF8) + 112);
  *(_QWORD *)&v97 = 0;
  v10 = sub_22E3CED3C((uint64_t *)(a2 + 2904), &v95, &v97);
  v11 = v97;
  if (!v10)
    v11 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
  v12 = *(_OWORD *)(v11 + 8);
  v13 = *(_OWORD *)(v11 + 40);
  v80[1] = *(_OWORD *)(v11 + 24);
  v80[2] = v13;
  v80[0] = v12;
  LOWORD(v99) = 257;
  v14 = sub_22E3C2A7C((uint64_t *)(a2 + 272), (uint64_t)v80, (uint64_t)&v97);
  *(_QWORD *)&v95 = *(_QWORD *)((*(_QWORD *)(a1[2] + 16) & 0xFFFFFFFFFFFFFFF8) + 104);
  *(_QWORD *)&v97 = 0;
  v15 = sub_22E3CED3C((uint64_t *)(a2 + 2904), &v95, &v97);
  v16 = v97;
  if (!v15)
    v16 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
  v17 = *(_OWORD *)(v16 + 8);
  v18 = *(_OWORD *)(v16 + 40);
  v79[1] = *(_OWORD *)(v16 + 24);
  v79[2] = v18;
  v79[0] = v17;
  LOWORD(v99) = 257;
  v19 = (_QWORD *)sub_22E3C2A7C((uint64_t *)(a2 + 272), (uint64_t)v79, (uint64_t)&v97);
  *(_QWORD *)&v97 = &v98;
  *((_QWORD *)&v97 + 1) = 0x1000000000;
  *(_QWORD *)&v95 = v96;
  *(_QWORD *)&v92 = &v93;
  *(_QWORD *)&v96[0] = v19;
  *((_QWORD *)&v95 + 1) = 0x1000000001;
  v21 = *(_QWORD *)(*a1 + 96);
  v22 = *(unsigned int *)(*a1 + 104);
  *(_QWORD *)&v93 = *v19;
  *((_QWORD *)&v92 + 1) = 0x400000001;
  if ((_DWORD)v22)
  {
    v52 = 8 * v22;
    do
    {
      v53 = *(_QWORD *)(*(_QWORD *)v21 + 16);
      v54 = sub_22EF5B848(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), *(_QWORD *)(*(_QWORD *)v21 + 8), 0);
      *(_QWORD *)&v89 = ".firstpriv.ptr.addr";
      LOWORD(v91) = 259;
      v55 = sub_22F25E4D4(a2, v54, (uint64_t)&v89, 0);
      sub_22E607A80((uint64_t)&v97, v53, v55, v56);
      v57 = DWORD2(v95);
      if (DWORD2(v95) >= (unint64_t)HIDWORD(v95))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v57 = DWORD2(v95);
      }
      *(_QWORD *)(v95 + 8 * v57) = v55 & 0xFFFFFFFFFFFFFFF8;
      ++DWORD2(v95);
      v58 = *(_QWORD *)(v55 & 0xFFFFFFFFFFFFFFF8);
      v59 = DWORD2(v92);
      if (DWORD2(v92) >= (unint64_t)HIDWORD(v92))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v59 = DWORD2(v92);
      }
      *(_QWORD *)(v92 + 8 * v59) = v58;
      ++DWORD2(v92);
      v21 += 8;
      v52 -= 8;
    }
    while (v52);
  }
  llvm::Type::getVoidTy(*(llvm::Type **)(a2 + 336), v20);
  v23 = llvm::FunctionType::get();
  v24 = llvm::PointerType::get();
  LOWORD(v91) = 257;
  v25 = sub_22E3C1338((uint64_t *)(a2 + 272), v14, v24, (uint64_t)&v89);
  (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 144)
                                                                                                  + 808)
                                                                                    + 568))(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 808), a2, *(unsigned int *)(a1[1] + 12), v23, v25, v95, DWORD2(v95));
  if (DWORD2(v97))
  {
    v60 = (unint64_t *)v97;
    v61 = v97 + 56 * DWORD2(v97);
    while (1)
    {
      v62 = *(_OWORD *)(v60 + 1);
      v63 = *(_OWORD *)(v60 + 5);
      v78[1] = *(_OWORD *)(v60 + 3);
      v78[2] = v63;
      v78[0] = v62;
      LOWORD(v91) = 257;
      v64 = sub_22E3C2A7C((uint64_t *)(a2 + 272), (uint64_t)v78, (uint64_t)&v89);
      v65 = *(_QWORD *)(*v60 + 48);
      v66 = *(_QWORD *)(v65 & 0xFFFFFFFFFFFFFFF0);
      if (v66)
      {
        v67 = *(_DWORD *)(v66 + 16);
        if ((v67 & 0xFE) == 0x28)
          goto LABEL_42;
      }
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v66 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
      {
        v71 = *(_QWORD *)(*v60 + 48);
        v66 = sub_22F10CF48(v66);
        v65 = v71;
        if (v66)
          break;
      }
LABEL_38:
      v68 = sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, v65, 0);
      v69 = sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), *v60, 0);
      v70 = *v60;
      v60 += 7;
      *(_QWORD *)&v89 = v64;
      *((_QWORD *)&v89 + 1) = v68;
      *(_QWORD *)&v90 = v69;
      DWORD2(v90) = 0;
      v91 = 0uLL;
      sub_22E5BC134(v85, v84, v70, (uint64_t)&v89);
      if (v60 == (unint64_t *)v61)
        goto LABEL_8;
    }
    v67 = *(_DWORD *)(v66 + 16);
LABEL_42:
    if ((v67 & 0x100000) != 0)
    {
      do
      {
        v66 = *(_QWORD *)(*(_QWORD *)(v66 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v66)
        {
          v72 = *(_DWORD *)(v66 + 16);
          if ((v72 & 0xFE) == 0x28)
            continue;
        }
        v66 = sub_22F10CF48(v66);
        v72 = *(_DWORD *)(v66 + 16);
      }
      while ((v72 & 0x100000) != 0);
    }
    v65 = *(_QWORD *)(v66 + 32);
    goto LABEL_38;
  }
LABEL_8:
  if ((__int128 *)v92 != &v93)
    free((void *)v92);
  v3 = a3;
  if ((_OWORD *)v95 != v96)
    free((void *)v95);
  if ((__int128 *)v97 != &v98)
    free((void *)v97);
  v9 = v84;
LABEL_15:
  sub_22E5BC320((uint64_t)v87, v9 + 2904);
  sub_22F2840EC((uint64_t)v87);
  if (*(_DWORD *)(a1[8] + 192))
  {
    *(_QWORD *)&v95 = a1[4];
    *(_QWORD *)&v97 = 0;
    v26 = sub_22E3CED3C((uint64_t *)(a2 + 2904), &v95, &v97);
    v27 = v97;
    if (!v26)
      v27 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
    v28 = *(_OWORD *)(v27 + 8);
    v29 = *(_OWORD *)(v27 + 40);
    v96[0] = *(_OWORD *)(v27 + 24);
    v96[1] = v29;
    v95 = v28;
    LOWORD(v91) = 257;
    sub_22E486A58((uint64_t *)(a2 + 272), (uint64_t)&v95, 0, (uint64_t)&v89, (uint64_t)&v97);
    v30 = (_OWORD *)a1[8];
    v31 = v97;
    v32 = v99;
    v30[1] = v98;
    v30[2] = v32;
    *v30 = v31;
    *(_QWORD *)&v89 = a1[5];
    *(_QWORD *)&v97 = 0;
    v33 = sub_22E3CED3C((uint64_t *)(a2 + 2904), &v89, &v97);
    v34 = v97;
    if (!v33)
      v34 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
    v35 = *(_OWORD *)(v34 + 8);
    v36 = *(_OWORD *)(v34 + 40);
    v90 = *(_OWORD *)(v34 + 24);
    v91 = v36;
    v89 = v35;
    LOWORD(v94) = 257;
    sub_22E486A58((uint64_t *)(a2 + 272), (uint64_t)&v89, 0, (uint64_t)&v92, (uint64_t)&v97);
    v37 = (_OWORD *)a1[8];
    v38 = v98;
    v37[3] = v97;
    v37[4] = v38;
    v37[5] = v99;
    *(_QWORD *)&v92 = a1[6];
    *(_QWORD *)&v97 = 0;
    v39 = sub_22E3CED3C((uint64_t *)(a2 + 2904), &v92, &v97);
    v40 = v97;
    if (!v39)
      v40 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
    v41 = *(_OWORD *)(v40 + 8);
    v42 = *(_OWORD *)(v40 + 40);
    v93 = *(_OWORD *)(v40 + 24);
    v94 = v42;
    v92 = v41;
    LOWORD(v77) = 257;
    sub_22E486A58((uint64_t *)(a2 + 272), (uint64_t)&v92, 0, (uint64_t)v76, (uint64_t)&v97);
    v43 = (_OWORD *)a1[8];
    v44 = v98;
    v43[6] = v97;
    v43[7] = v44;
    v43[8] = v99;
    if (a1[7])
    {
      *(_QWORD *)&v76[0] = a1[7];
      *(_QWORD *)&v97 = 0;
      v45 = sub_22E3CED3C((uint64_t *)(a2 + 2904), v76, &v97);
      v46 = v97;
      if (!v45)
        v46 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
      v47 = *(_OWORD *)(v46 + 8);
      v48 = *(_OWORD *)(v46 + 40);
      v76[1] = *(_OWORD *)(v46 + 24);
      v77 = v48;
      v76[0] = v47;
      v75 = 257;
      sub_22E486A58((uint64_t *)(a2 + 272), (uint64_t)v76, 0, (uint64_t)v74, (uint64_t)&v97);
      v49 = (_OWORD *)a1[8];
      v50 = v98;
      v49[9] = v97;
      v49[10] = v50;
      v49[11] = v99;
    }
  }
  (**v3)(v3, a2);
  sub_22E600354((uint64_t)&v97, a2, a1[1], 0x10000004ALL, 0);
  sub_22F27B464((_QWORD *)a1[3], a2);
  sub_22F283FC4((uint64_t)v100);
  sub_22E488B4C((uint64_t)&v97);
  return sub_22F283FC4((uint64_t)v81);
}

uint64_t sub_22E608564(uint64_t a1, uint64_t a2)
{
  return sub_22E5E5158(a2, *(_QWORD *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(*(_QWORD *)a1 + 8) + 32), 0, 0);
}

uint64_t sub_22E608588(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 144) + 808) + 344))(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 808));
}

uint64_t sub_22E6085E4(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[40];
  _OWORD v36[3];
  _QWORD v37[2];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  uint64_t v44;
  _QWORD v45[2];
  uint64_t v46;
  _QWORD v47[2];
  uint64_t v48;
  _QWORD v49[2];
  uint64_t v50;
  _QWORD v51[2];
  _QWORD v52[6];
  _QWORD v53[6];
  _BYTE v54[288];
  int v55;
  int v56;
  _BYTE *v57;
  uint64_t v58;
  _BYTE v59[32];
  _QWORD *v60;
  uint64_t v61;
  _QWORD v62[6];

  v62[4] = *MEMORY[0x24BDAC8D0];
  (**a3)(a3);
  v5 = *a1;
  v6 = *(_QWORD *)(*(_QWORD *)(*a1 + 24) + 8 * **(unsigned int **)(*a1 + 24) + 16);
  if (v6)
  {
    v60 = v62;
    v61 = 0x400000000;
    v57 = v59;
    v58 = 0x400000000;
    v37[0] = v38;
    v37[1] = 0x400000000;
    v38[4] = v39;
    v38[5] = 0x400000000;
    v39[4] = v40;
    v39[5] = 0x400000000;
    v40[4] = v41;
    v40[5] = 0x400000000;
    v41[4] = v42;
    v41[5] = 0x400000000;
    v42[4] = v43;
    v42[5] = 0x400000000;
    v43[4] = &v44;
    v43[5] = 0x400000000;
    v45[0] = &v46;
    v45[1] = 0x400000000;
    v47[0] = &v48;
    v47[1] = 0x400000000;
    v49[0] = &v50;
    v49[1] = 0x400000000;
    v51[0] = v52;
    v51[1] = 0x400000000;
    v52[4] = v53;
    v52[5] = 0x400000000;
    v53[4] = v54;
    v53[5] = 0x400000000;
    v55 = 0;
    memset(&v54[256], 0, 32);
    v56 = 1;
    v7 = *a1;
    v8 = *(unsigned int **)(*a1 + 24);
    if (v8)
    {
      v11 = *v8;
      v9 = (uint64_t *)(v8 + 4);
      v10 = v11;
      if (v11)
      {
        v23 = 8 * v10;
        v12 = v9;
        while (*(_DWORD *)(*v12 + 8) != 77)
        {
          ++v12;
          v23 -= 8;
          if (!v23)
            goto LABEL_16;
        }
      }
      else
      {
        v12 = v9;
      }
      v13 = &v9[v10];
      if (v12 != v13)
      {
        v14 = *v12;
LABEL_7:
        v15 = v14 + 96;
        sub_22F2633B0((uint64_t)v45, (_BYTE *)(v14 + 96), (_BYTE *)(v14 + 96 + 8 * *(unsigned int *)(v14 + 16)));
        sub_22F2633B0((uint64_t)v47, (_BYTE *)(v14 + 96), (_BYTE *)(v14 + 96 + 8 * *(unsigned int *)(v14 + 16)));
        sub_22F2633B0((uint64_t)v49, (_BYTE *)(v15 + 8 * *(unsigned int *)(v14 + 16)), (_BYTE *)(v15 + 8 * *(unsigned int *)(v14 + 16) + 8 * *(unsigned int *)(v14 + 16)));
        v16 = *(unsigned int *)(v14 + 16);
        v17 = (_BYTE *)(v14 + 96 + 8 * v16 + 8 * v16 + 8 * v16 + 8 * v16);
        sub_22F2633B0((uint64_t)v51, v17, &v17[8 * v16]);
        v18 = *(unsigned int *)(v14 + 16);
        sub_22F2633B0((uint64_t)&v60, (_BYTE *)(v15 + 8 * v18 + 8 * v18), (_BYTE *)(v15 + 8 * v18 + 8 * v18 + 8 * v18));
        v19 = *(unsigned int *)(v14 + 16);
        v20 = (_BYTE *)(v14 + 96 + 8 * v19 + 8 * v19 + 8 * v19);
        sub_22F2633B0((uint64_t)&v57, v20, &v20[8 * v19]);
        v21 = v12 + 1;
        while (v21 != v13)
        {
          v22 = *v21++;
          v14 = v22;
          if (*(_DWORD *)(v22 + 8) == 77)
          {
            v12 = v21 - 1;
            goto LABEL_7;
          }
        }
        v7 = *a1;
      }
    }
LABEL_16:
    v24 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD *, _QWORD, _BYTE *, _QWORD, _QWORD *))(**(_QWORD **)(*(_QWORD *)(a2 + 144) + 808) + 376))(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 808), a2, *(unsigned int *)(v7 + 12), v60, v61, v57, v58, v37);
    v25 = *(_QWORD *)(v6 + 16);
    sub_22E4C652C((_QWORD *)a2, v25);
    *(_QWORD *)&v32 = v25;
    *(_QWORD *)&v36[0] = 0;
    v26 = sub_22E3CED3C((uint64_t *)(a2 + 2904), &v32, v36);
    v27 = *(_QWORD *)&v36[0];
    if (!v26)
      v27 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
    v34 = *(_OWORD *)(v27 + 40);
    v33 = *(_OWORD *)(v27 + 24);
    v32 = *(_OWORD *)(v27 + 8);
    v28 = *(_QWORD *)(v6 + 8);
    v36[0] = v32;
    v36[1] = v33;
    v36[2] = v34;
    v29 = sub_22E6281E0(*(_QWORD **)(a2 + 144), v28, (uint64_t)v35);
    sub_22E4E8134(a2, v24, v36, 0, v28, 2, v35, 0, v29, 0);
    sub_22F293AB4((uint64_t)v37);
    if (v57 != v59)
      free(v57);
    if (v60 != v62)
      free(v60);
    v5 = *a1;
  }
  v30 = sub_22F28423C(v5);
  return sub_22E5E5158(a2, *(_QWORD *)(v30 + 8 * *(unsigned int *)(v30 + 8) + 32), 0, 0);
}

uint64_t sub_22E6089B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = sub_22F421AC0(*(_DWORD *)(*a1 + 8));
  if ((_DWORD)result)
    return sub_22E5F78DC(a2, v3);
  return result;
}

uint64_t sub_22E6089F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  uint64_t v17;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 1992)
     - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 2000) != **(_QWORD **)(a1 + 8);
  v9 = *(unsigned __int8 **)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)a1;
  v15 = *(_OWORD *)(a1 + 32);
  v16 = *(_DWORD *)(a1 + 48);
  v17 = *(_QWORD *)(a1 + 56);
  v12 = v14;
  v13 = *(_BYTE *)(a1 + 64);
  return sub_22F28DA58(a2, v14, v8, v9, v10, (void (*)(uint64_t, uint64_t))sub_22E608A7C, (uint64_t)&v14, a8, (void (*)(uint64_t, uint64_t))sub_22E608ABC, (uint64_t)&v12);
}

uint64_t sub_22E608A7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, __int128 *);
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v2 = *a1;
  v7 = *(_OWORD *)(a1 + 1);
  v3 = a1[4];
  v8 = a1[3];
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __int128 *))v3;
  v4 = *(_QWORD *)(v3 + 8);
  v9 = v7;
  v10 = v8;
  return v5(v4, a2, v2, &v9);
}

uint64_t sub_22E608ABC(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(result + 8))
  {
    sub_22E4D89CC(a2);
    sub_22E4D89CC(a2);
    sub_22E4D89CC(a2);
    return sub_22E4D89CC(a2);
  }
  return result;
}

uint64_t sub_22E608B5C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  llvm::Constant **v8;
  llvm::Type *v9;
  uint64_t NullValue;
  _BYTE v12[32];
  __int16 v13;
  _OWORD v14[8];
  uint64_t v15;

  v2 = *(_OWORD *)(a1 + 112);
  v14[6] = *(_OWORD *)(a1 + 96);
  v14[7] = v2;
  v3 = *(_QWORD *)(a1 + 136);
  v15 = *(_QWORD *)(a1 + 128);
  v4 = a2 + 272;
  v5 = *(_OWORD *)(a1 + 48);
  v14[2] = *(_OWORD *)(a1 + 32);
  v14[3] = v5;
  v6 = *(_OWORD *)(a1 + 80);
  v14[4] = *(_OWORD *)(a1 + 64);
  v14[5] = v6;
  v7 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v7;
  v8 = (llvm::Constant **)sub_22F25F748(a2, (uint64_t)v14, *(_DWORD *)(v3 + 12));
  v13 = 257;
  NullValue = llvm::Constant::getNullValue(*v8, v9);
  return sub_22E3C18F4(v4, 33, (uint64_t *)v8, NullValue, (uint64_t)v12);
}

uint64_t sub_22E608BEC(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  llvm::Constant **v8;
  llvm::Type *v9;
  uint64_t NullValue;
  _BYTE v12[32];
  __int16 v13;
  _OWORD v14[8];
  uint64_t v15;

  v2 = *(_OWORD *)(a1 + 112);
  v14[6] = *(_OWORD *)(a1 + 96);
  v14[7] = v2;
  v3 = *(_QWORD *)(a1 + 136);
  v15 = *(_QWORD *)(a1 + 128);
  v4 = a2 + 272;
  v5 = *(_OWORD *)(a1 + 48);
  v14[2] = *(_OWORD *)(a1 + 32);
  v14[3] = v5;
  v6 = *(_OWORD *)(a1 + 80);
  v14[4] = *(_OWORD *)(a1 + 64);
  v14[5] = v6;
  v7 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v7;
  v8 = (llvm::Constant **)sub_22F25F748(a2, (uint64_t)v14, *(_DWORD *)(v3 + 12));
  v13 = 257;
  NullValue = llvm::Constant::getNullValue(*v8, v9);
  return sub_22E3C18F4(v4, 33, (uint64_t *)v8, NullValue, (uint64_t)v12);
}

uint64_t sub_22E608C7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[2];

  v3 = *a1;
  v5[0] = sub_22F294764;
  v5[1] = sub_22E5F8964;
  return sub_22E5FCF20(a2, v3, (uint64_t)v5, *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * **(unsigned int **)(v3 + 24) + 64));
}

void sub_22E608CCC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Value *v16;
  int v17;
  uint64_t v18[2];
  void *v19;
  uint64_t v20;
  _QWORD v21[17];

  v21[16] = *MEMORY[0x24BDAC8D0];
  v12 = a1[2];
  v13 = sub_22F28423C(*a1);
  if (a1[1])
  {
    v19 = v21;
    v20 = 0x1000000000;
    sub_22E5F01E0((_QWORD *)v12, v13, (uint64_t)&v19);
    v16 = sub_22E608E44();
    v17 = *(_DWORD *)(*a1 + 12);
    v18[0] = 0;
    v18[1] = v12;
    sub_22E48EE24(v18, v17, 0);
    sub_22E48F084(v18);
    sub_22F294B18((uint64_t *)v12, a4, a5, a6, v16, (uint64_t)v19, v20);
    if (v19 != v21)
      free(v19);
  }
  else
  {
    v14 = *(_QWORD *)(v12 + 1840);
    if (a2)
    {
      v15 = a3 - 24;
      if (!a3)
        v15 = 0;
      *(_QWORD *)(v12 + 1840) = v15;
    }
    ++*(_DWORD *)(v12 + 2640);
    sub_22F2945C8((uint64_t *)v12, *(_QWORD *)(v13 + 8 * *(unsigned int *)(v13 + 8) + 32), a4);
    *(_QWORD *)(v12 + 1840) = v14;
  }
}

llvm::Value *sub_22E608E44()
{
  uint64_t v0;
  uint64_t i;
  llvm::Value *v2;
  uint64_t (**v4)();
  int v5;
  _QWORD v6[11];
  _BYTE v7[1856];
  uint64_t (***v8)();
  uint64_t v9;

  v0 = MEMORY[0x24BDAC7A8]();
  v9 = *MEMORY[0x24BDAC8D0];
  sub_22E618EBC((uint64_t)v7, v0, 1);
  v4 = &off_24FA66C98;
  v5 = 0;
  v6[0] = 1;
  for (i = 3; i != 11; i += 2)
    (&v4)[i] = (uint64_t (**)())-4096;
  v6[9] = 0;
  v6[10] = 0;
  v8 = &v4;
  v2 = sub_22E5F06DC();
  llvm::Function::addFnAttr();
  v4 = &off_24FA66C98;
  sub_22E49FAE8((uint64_t)v6);
  sub_22E619434((uint64_t)v7);
  return v2;
}

void sub_22E608F5C()
{
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22E608F70(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FA66930;
  result[1] = v3;
  return result;
}

uint64_t sub_22E608FA4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FA66930;
  a2[1] = v2;
  return result;
}

uint64_t *sub_22E608FC0(uint64_t a1, llvm::BasicBlock **a2)
{
  return sub_22F294690(*(_QWORD *)(a1 + 8), *a2);
}

void sub_22E608FD0(uint64_t *a1, _QWORD *a2, void (***a3)(_QWORD, _QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  llvm::Value *v8;
  uint64_t v9;
  void *v10[2];
  _QWORD v11[17];

  v11[16] = *MEMORY[0x24BDAC8D0];
  v6 = a1[2];
  v7 = sub_22F28423C(*a1);
  if (a1[1])
  {
    v10[0] = v11;
    v10[1] = (void *)0x1000000000;
    sub_22E5F01E0(a2, v7, (uint64_t)v10);
    v8 = sub_22E608E44();
    if (v8)
      v9 = *((_QWORD *)v8 + 3);
    else
      v9 = 0;
    (*(void (**)(_QWORD, _QWORD *, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 144) + 808) + 568))(*(_QWORD *)(*(_QWORD *)(v6 + 144) + 808), a2, *(unsigned int *)(*a1 + 12), v9);
    if (v10[0] != v11)
      free(v10[0]);
  }
  else
  {
    (**a3)(a3, a2);
    sub_22E5E5158(a2, *(_QWORD *)(v7 + 8 * *(unsigned int *)(v7 + 8) + 32), 0, 0);
  }
}

uint64_t **sub_22E609134(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)v8;
    v8 = (uint64_t **)operator new(0x20uLL);
    *((_DWORD *)v8 + 7) = *a3;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v10;
    *v6 = (uint64_t *)v8;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    sub_22E49FD00(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v8;
}

uint64_t sub_22E609210(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD, uint64_t))
{
  return sub_22E609220(a2, *a1, a3);
}

uint64_t sub_22E609220(uint64_t a1, uint64_t a2, void (***a3)(_QWORD, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD v18[2];
  int v19;

  (**a3)(a3, a1);
  v13 = 1;
  v5 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
  v6 = *(_QWORD *)(a1 + 2312);
  v12 = *(_BYTE *)(a1 + 2893);
  *(_BYTE *)(a1 + 2893) = 0;
  v7 = *(_QWORD *)(a1 + 2872);
  v11[0] = v5;
  v11[1] = v7;
  v11[2] = v6;
  *(_QWORD *)(a1 + 2872) = v5;
  v15 = 0;
  v16 = 0;
  v14 = a1;
  v17 = 0;
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  sub_22E5F2534(a1, a2, (uint64_t)v11);
  sub_22E5F310C(a1, *(unsigned int **)(a2 + 24), (uint64_t)v11);
  sub_22E5BC320((uint64_t)v18, v14 + 2904);
  sub_22F2840EC((uint64_t)v18);
  v8 = *(_DWORD *)(a2 + 8) - 56;
  if (v8 <= 0x2A && ((1 << v8) & 0x6000001CF91) != 0)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 808) + 592))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808), a1, a2);
  v9 = sub_22E59F470(a2, 56);
  sub_22E5E5158(a1, *(_QWORD *)(v9 + 8 * *(unsigned int *)(v9 + 8) + 32), 0, 0);
  sub_22E47E098(a1);
  return sub_22F283FC4((uint64_t)v11);
}

uint64_t sub_22E60936C(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD, uint64_t))
{
  return sub_22E609220(a2, *a1, a3);
}

uint64_t sub_22E60937C(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD v17[2];
  int v18;

  (**a3)(a3);
  v12 = 1;
  v5 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
  v6 = *(_QWORD *)(a2 + 2312);
  v11 = *(_BYTE *)(a2 + 2893);
  *(_BYTE *)(a2 + 2893) = 0;
  v7 = *(_QWORD *)(a2 + 2872);
  v10[0] = v5;
  v10[1] = v7;
  v10[2] = v6;
  *(_QWORD *)(a2 + 2872) = v5;
  v14 = 0;
  v15 = 0;
  v13 = a2;
  v16 = 0;
  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  sub_22E5F2534(a2, *a1, (uint64_t)v10);
  sub_22E5F310C(a2, *(unsigned int **)(*a1 + 24), (uint64_t)v10);
  sub_22E5F4508();
  sub_22E5BC320((uint64_t)v17, v13 + 2904);
  sub_22F2840EC((uint64_t)v17);
  v8 = sub_22E59F470(*a1, 80);
  sub_22E5E5158(a2, *(_QWORD *)(v8 + 8 * *(unsigned int *)(v8 + 8) + 32), 0, 0);
  sub_22E5F523C(a2, *a1);
  return sub_22F283FC4((uint64_t)v10);
}

uint64_t sub_22E60949C()
{
  return 0;
}

uint64_t sub_22E6094A4(uint64_t *a1, _QWORD *a2, void (***a3)(_QWORD, _QWORD *))
{
  return sub_22E6094B8(a2, a3, *a1);
}

uint64_t sub_22E6094B8(_QWORD *a1, void (***a2)(_QWORD, _QWORD *), uint64_t a3)
{
  uint64_t v6;
  _QWORD v8[3];
  _QWORD v9[2];

  v6 = sub_22E59F470(a3, 80);
  (**a2)(a2, a1);
  v9[0] = a3;
  v9[1] = v6;
  v8[0] = v9;
  v8[1] = sub_22E609554;
  v8[2] = 0;
  sub_22E5FF48C(a1, a3, 80, (uint64_t)v8);
  return sub_22E5F6264((uint64_t)a1, a3, (uint64_t (*)(uint64_t, _QWORD *))sub_22E6096B4, (uint64_t)v8);
}

uint64_t sub_22E609554(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD v10[3];
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD v17[2];
  int v18;

  (**a3)(a3);
  v12 = 1;
  v5 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
  v6 = *(_QWORD *)(a2 + 2312);
  v11 = *(_BYTE *)(a2 + 2893);
  *(_BYTE *)(a2 + 2893) = 0;
  v7 = *(_QWORD *)(a2 + 2872);
  v10[0] = v5;
  v10[1] = v7;
  v10[2] = v6;
  *(_QWORD *)(a2 + 2872) = v5;
  v14 = 0;
  v15 = 0;
  v13 = a2;
  v16 = 0;
  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  sub_22E5F2534(a2, *a1, (uint64_t)v10);
  sub_22E5F310C(a2, *(unsigned int **)(*a1 + 24), (uint64_t)v10);
  sub_22E5F4508();
  sub_22E5BC320((uint64_t)v17, v13 + 2904);
  sub_22F2840EC((uint64_t)v17);
  v8 = *(_DWORD *)(*a1 + 8) - 56;
  if (v8 <= 0x2A && ((1 << v8) & 0x6000001CF91) != 0)
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 144) + 808) + 592))(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 808), a2);
  sub_22E5E5158(a2, *(_QWORD *)(a1[1] + 8 * *(unsigned int *)(a1[1] + 8) + 32), 0, 0);
  sub_22E5F523C(a2, *a1);
  return sub_22F283FC4((uint64_t)v10);
}

uint64_t sub_22E6096B4()
{
  return 0;
}

uint64_t sub_22E6096BC(uint64_t *a1, _QWORD *a2, void (***a3)(_QWORD, _QWORD *))
{
  return sub_22E6094B8(a2, a3, *a1);
}

uint64_t sub_22E6096D0(uint64_t *a1, _QWORD *a2, void (***a3)(_QWORD, _QWORD *))
{
  return sub_22E6096E4(a2, a3, *a1);
}

uint64_t sub_22E6096E4(_QWORD *a1, void (***a2)(_QWORD, _QWORD *), uint64_t a3)
{
  _QWORD v6[3];
  _QWORD v7[2];
  uint64_t v8;

  (**a2)(a2, a1);
  v8 = a3;
  v7[0] = a3;
  v7[1] = &v8;
  v6[0] = v7;
  v6[1] = sub_22E60976C;
  v6[2] = 0;
  sub_22E5FF48C(a1, a3, 16, (uint64_t)v6);
  return sub_22E5F6264((uint64_t)a1, a3, (uint64_t (*)(uint64_t, _QWORD *))sub_22E6098C8, (uint64_t)v6);
}

uint64_t sub_22E60976C(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD v11[3];
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD v18[2];
  int v19;

  (**a3)(a3);
  v13 = 1;
  v5 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
  v6 = *(_QWORD *)(a2 + 2312);
  v12 = *(_BYTE *)(a2 + 2893);
  *(_BYTE *)(a2 + 2893) = 0;
  v7 = *(_QWORD *)(a2 + 2872);
  v11[0] = v5;
  v11[1] = v7;
  v11[2] = v6;
  *(_QWORD *)(a2 + 2872) = v5;
  v15 = 0;
  v16 = 0;
  v14 = a2;
  v17 = 0;
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  sub_22E5F4508();
  sub_22E5BC320((uint64_t)v18, a2 + 2904);
  sub_22F2840EC((uint64_t)v18);
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 808);
  v10[0] = a1[1];
  v10[1] = sub_22E609878;
  v10[2] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v8 + 360))(v8, a2, 16, v10, 0);
  sub_22E5F523C(a2, *a1);
  return sub_22F283FC4((uint64_t)v11);
}

uint64_t sub_22E609878(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[2];

  v3 = *a1;
  v5[0] = sub_22F294764;
  v5[1] = sub_22E5F8964;
  return sub_22E5FCF20(a2, v3, (uint64_t)v5, *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * **(unsigned int **)(v3 + 24) + 64));
}

uint64_t sub_22E6098C8()
{
  return 0;
}

uint64_t sub_22E6098D0(uint64_t *a1, _QWORD *a2, void (***a3)(_QWORD, _QWORD *))
{
  return sub_22E6096E4(a2, a3, *a1);
}

uint64_t sub_22E6098E4(uint64_t *a1, _QWORD *a2, void (***a3)(_QWORD, _QWORD *))
{
  return sub_22E6098F8(a2, a3, *a1);
}

uint64_t sub_22E6098F8(_QWORD *a1, void (***a2)(_QWORD, _QWORD *), uint64_t a3)
{
  _QWORD v6[3];
  _QWORD v7[2];
  uint64_t v8;

  (**a2)(a2, a1);
  v8 = a3;
  v7[0] = a3;
  v7[1] = &v8;
  v6[0] = v7;
  v6[1] = sub_22E609980;
  v6[2] = 0;
  sub_22E5FF48C(a1, a3, 21, (uint64_t)v6);
  return sub_22E5F6264((uint64_t)a1, a3, (uint64_t (*)(uint64_t, _QWORD *))sub_22E609ADC, (uint64_t)v6);
}

uint64_t sub_22E609980(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD v11[3];
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD v18[2];
  int v19;

  (**a3)(a3);
  v13 = 1;
  v5 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
  v6 = *(_QWORD *)(a2 + 2312);
  v12 = *(_BYTE *)(a2 + 2893);
  *(_BYTE *)(a2 + 2893) = 0;
  v7 = *(_QWORD *)(a2 + 2872);
  v11[0] = v5;
  v11[1] = v7;
  v11[2] = v6;
  *(_QWORD *)(a2 + 2872) = v5;
  v15 = 0;
  v16 = 0;
  v14 = a2;
  v17 = 0;
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  sub_22E5F4508();
  sub_22E5BC320((uint64_t)v18, a2 + 2904);
  sub_22F2840EC((uint64_t)v18);
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 808);
  v10[0] = a1[1];
  v10[1] = sub_22E609A8C;
  v10[2] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v8 + 360))(v8, a2, 16, v10, 0);
  sub_22E5F523C(a2, *a1);
  return sub_22F283FC4((uint64_t)v11);
}

uint64_t sub_22E609A8C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[2];

  v3 = *a1;
  v5[0] = sub_22F294764;
  v5[1] = sub_22E5F8964;
  return sub_22E5FCF20(a2, v3, (uint64_t)v5, *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * **(unsigned int **)(v3 + 24) + 64));
}

uint64_t sub_22E609ADC()
{
  return 0;
}

uint64_t sub_22E609AE4(uint64_t *a1, _QWORD *a2, void (***a3)(_QWORD, _QWORD *))
{
  return sub_22E6098F8(a2, a3, *a1);
}

uint64_t sub_22E609AF8(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD v11[3];
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD v18[2];
  int v19;

  (**a3)(a3);
  v13 = 1;
  v5 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
  v6 = *(_QWORD *)(a2 + 2312);
  v12 = *(_BYTE *)(a2 + 2893);
  *(_BYTE *)(a2 + 2893) = 0;
  v7 = *(_QWORD *)(a2 + 2872);
  v11[0] = v5;
  v11[1] = v7;
  v11[2] = v6;
  *(_QWORD *)(a2 + 2872) = v5;
  v15 = 0;
  v16 = 0;
  v14 = a2;
  v17 = 0;
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  sub_22E5F4508();
  sub_22E5BC320((uint64_t)v18, a2 + 2904);
  sub_22F2840EC((uint64_t)v18);
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 808);
  v10[0] = a1[1];
  v10[1] = sub_22E609C04;
  v10[2] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v8 + 360))(v8, a2, 16, v10, 0);
  sub_22E5F523C(a2, *a1);
  return sub_22F283FC4((uint64_t)v11);
}

uint64_t sub_22E609C04(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[2];

  v3 = *a1;
  v5[0] = sub_22F294764;
  v5[1] = sub_22E5F8964;
  return sub_22E5FCF20(a2, v3, (uint64_t)v5, *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * **(unsigned int **)(v3 + 24) + 64));
}

uint64_t sub_22E609C54()
{
  return 0;
}

uint64_t sub_22E609C5C(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD v11[3];
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD v18[2];
  int v19;

  (**a3)(a3);
  v13 = 1;
  v5 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
  v6 = *(_QWORD *)(a2 + 2312);
  v12 = *(_BYTE *)(a2 + 2893);
  *(_BYTE *)(a2 + 2893) = 0;
  v7 = *(_QWORD *)(a2 + 2872);
  v11[0] = v5;
  v11[1] = v7;
  v11[2] = v6;
  *(_QWORD *)(a2 + 2872) = v5;
  v15 = 0;
  v16 = 0;
  v14 = a2;
  v17 = 0;
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  sub_22E5F4508();
  sub_22E5BC320((uint64_t)v18, a2 + 2904);
  sub_22F2840EC((uint64_t)v18);
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 808);
  v10[0] = a1[1];
  v10[1] = sub_22E609D68;
  v10[2] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v8 + 360))(v8, a2, 54, v10, 0);
  sub_22E5F523C(a2, *a1);
  return sub_22F283FC4((uint64_t)v11);
}

uint64_t sub_22E609D68(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[2];

  v3 = *a1;
  v5[0] = sub_22F294764;
  v5[1] = sub_22E5F8964;
  return sub_22E5FCF20(a2, v3, (uint64_t)v5, *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * **(unsigned int **)(v3 + 24) + 64));
}

uint64_t sub_22E609DB8()
{
  return 0;
}

uint64_t sub_22E609DC0(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD v11[3];
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD v18[2];
  int v19;

  (**a3)(a3);
  v13 = 1;
  v5 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
  v6 = *(_QWORD *)(a2 + 2312);
  v12 = *(_BYTE *)(a2 + 2893);
  *(_BYTE *)(a2 + 2893) = 0;
  v7 = *(_QWORD *)(a2 + 2872);
  v11[0] = v5;
  v11[1] = v7;
  v11[2] = v6;
  *(_QWORD *)(a2 + 2872) = v5;
  v15 = 0;
  v16 = 0;
  v14 = a2;
  v17 = 0;
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  sub_22E5F4508();
  sub_22E5BC320((uint64_t)v18, a2 + 2904);
  sub_22F2840EC((uint64_t)v18);
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 808);
  v10[0] = a1[1];
  v10[1] = sub_22E609ECC;
  v10[2] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v8 + 360))(v8, a2, 16, v10, 0);
  sub_22E5F523C(a2, *a1);
  return sub_22F283FC4((uint64_t)v11);
}

uint64_t sub_22E609ECC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[2];

  v3 = *a1;
  v5[0] = sub_22F294764;
  v5[1] = sub_22E6021D8;
  return sub_22E5FCF20(a2, v3, (uint64_t)v5, *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * **(unsigned int **)(v3 + 24) + 160));
}

uint64_t sub_22E609F1C()
{
  return 0;
}

uint64_t sub_22E609F24(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD v11[3];
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD v18[2];
  int v19;

  (**a3)(a3);
  v13 = 1;
  v5 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
  v6 = *(_QWORD *)(a2 + 2312);
  v12 = *(_BYTE *)(a2 + 2893);
  *(_BYTE *)(a2 + 2893) = 0;
  v7 = *(_QWORD *)(a2 + 2872);
  v11[0] = v5;
  v11[1] = v7;
  v11[2] = v6;
  *(_QWORD *)(a2 + 2872) = v5;
  v15 = 0;
  v16 = 0;
  v14 = a2;
  v17 = 0;
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  sub_22E5F4508();
  sub_22E5BC320((uint64_t)v18, a2 + 2904);
  sub_22F2840EC((uint64_t)v18);
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 808);
  v10[0] = a1[1];
  v10[1] = sub_22E60A030;
  v10[2] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v8 + 360))(v8, a2, 16, v10, 0);
  sub_22E5F523C(a2, *a1);
  return sub_22F283FC4((uint64_t)v11);
}

uint64_t sub_22E60A030(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[2];

  v3 = *a1;
  v5[0] = sub_22F294764;
  v5[1] = sub_22E6021D8;
  return sub_22E5FCF20(a2, v3, (uint64_t)v5, *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * **(unsigned int **)(v3 + 24) + 160));
}

uint64_t sub_22E60A080()
{
  return 0;
}

uint64_t sub_22E60A088(uint64_t *a1, _QWORD *a2, void (***a3)(_QWORD, _QWORD *))
{
  return sub_22E60A098(a2, *a1, a3);
}

uint64_t sub_22E60A098(_QWORD *a1, uint64_t a2, void (***a3)(_QWORD, _QWORD *))
{
  _QWORD v6[3];
  _QWORD v7[2];
  uint64_t v8;

  (**a3)(a3, a1);
  v8 = a2;
  v7[0] = a2;
  v7[1] = &v8;
  v6[0] = v7;
  v6[1] = sub_22E60A120;
  v6[2] = 0;
  sub_22E5FF48C(a1, a2, 19, (uint64_t)v6);
  return sub_22E5F6264((uint64_t)a1, a2, (uint64_t (*)(uint64_t, _QWORD *))sub_22E60A27C, (uint64_t)v6);
}

uint64_t sub_22E60A120(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD v11[3];
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD v18[2];
  int v19;

  (**a3)(a3);
  v13 = 1;
  v5 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
  v6 = *(_QWORD *)(a2 + 2312);
  v12 = *(_BYTE *)(a2 + 2893);
  *(_BYTE *)(a2 + 2893) = 0;
  v7 = *(_QWORD *)(a2 + 2872);
  v11[0] = v5;
  v11[1] = v7;
  v11[2] = v6;
  *(_QWORD *)(a2 + 2872) = v5;
  v15 = 0;
  v16 = 0;
  v14 = a2;
  v17 = 0;
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  sub_22E5F4508();
  sub_22E5BC320((uint64_t)v18, a2 + 2904);
  sub_22F2840EC((uint64_t)v18);
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 808);
  v10[0] = a1[1];
  v10[1] = sub_22E60A22C;
  v10[2] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v8 + 360))(v8, a2, 16, v10, 0);
  sub_22E5F523C(a2, *a1);
  return sub_22F283FC4((uint64_t)v11);
}

uint64_t sub_22E60A22C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[2];

  v3 = *a1;
  v5[0] = sub_22F294764;
  v5[1] = sub_22E6021D8;
  return sub_22E5FCF20(a2, v3, (uint64_t)v5, *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * **(unsigned int **)(v3 + 24) + 160));
}

uint64_t sub_22E60A27C()
{
  return 0;
}

uint64_t sub_22E60A284(uint64_t *a1, _QWORD *a2, void (***a3)(_QWORD, _QWORD *))
{
  return sub_22E60A098(a2, *a1, a3);
}

uint64_t sub_22E60A294(uint64_t *a1, _QWORD *a2, void (***a3)(_QWORD, _QWORD *))
{
  return sub_22E60A2A4(a2, *a1, a3);
}

uint64_t sub_22E60A2A4(_QWORD *a1, uint64_t a2, void (***a3)(_QWORD, _QWORD *))
{
  _QWORD v6[3];
  _QWORD v7[2];
  uint64_t v8;

  (**a3)(a3, a1);
  v8 = a2;
  v7[0] = a2;
  v7[1] = &v8;
  v6[0] = v7;
  v6[1] = sub_22E60A32C;
  v6[2] = 0;
  sub_22E5FF48C(a1, a2, 20, (uint64_t)v6);
  return sub_22E5F6264((uint64_t)a1, a2, (uint64_t (*)(uint64_t, _QWORD *))sub_22E60A488, (uint64_t)v6);
}

uint64_t sub_22E60A32C(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD v11[3];
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD v18[2];
  int v19;

  (**a3)(a3);
  v13 = 1;
  v5 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
  v6 = *(_QWORD *)(a2 + 2312);
  v12 = *(_BYTE *)(a2 + 2893);
  *(_BYTE *)(a2 + 2893) = 0;
  v7 = *(_QWORD *)(a2 + 2872);
  v11[0] = v5;
  v11[1] = v7;
  v11[2] = v6;
  *(_QWORD *)(a2 + 2872) = v5;
  v15 = 0;
  v16 = 0;
  v14 = a2;
  v17 = 0;
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  sub_22E5F4508();
  sub_22E5BC320((uint64_t)v18, a2 + 2904);
  sub_22F2840EC((uint64_t)v18);
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 808);
  v10[0] = a1[1];
  v10[1] = sub_22E60A438;
  v10[2] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v8 + 360))(v8, a2, 16, v10, 0);
  sub_22E5F523C(a2, *a1);
  return sub_22F283FC4((uint64_t)v11);
}

uint64_t sub_22E60A438(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[2];

  v3 = *a1;
  v5[0] = sub_22F294764;
  v5[1] = sub_22E6021D8;
  return sub_22E5FCF20(a2, v3, (uint64_t)v5, *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * **(unsigned int **)(v3 + 24) + 160));
}

uint64_t sub_22E60A488()
{
  return 0;
}

uint64_t sub_22E60A490(uint64_t *a1, _QWORD *a2, void (***a3)(_QWORD, _QWORD *))
{
  return sub_22E60A2A4(a2, *a1, a3);
}

uint64_t sub_22E60A4A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  __int128 v8;
  uint64_t *v9;
  uint64_t v10;
  _BYTE v11[104];
  _QWORD v12[12];

  v12[11] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)a1;
  v8 = *(_OWORD *)(a1 + 8);
  v9 = &v10;
  v10 = v4;
  v6[0] = &v7;
  v6[1] = sub_22E60A56C;
  v6[2] = a3;
  v7 = v4;
  sub_22E600354((uint64_t)v11, a2, v4, 0, 1);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD *, _QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 144) + 808)
                                                                     + 360))(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 808), a2, 57, v6, 0);
  sub_22F283FC4((uint64_t)v12);
  return sub_22E488B4C((uint64_t)v11);
}

uint64_t sub_22E60A56C(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD))
{
  uint64_t *v4;
  _BYTE *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 **v49;
  uint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  int64x2_t v76;
  unint64_t v77;
  int32x2_t *v78;
  uint64_t v79;
  unsigned __int8 v80;
  _QWORD v81[3];
  _BYTE v82[56];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86[3];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _QWORD v90[3];
  char v91;
  char v92;
  uint64_t v93;
  uint64_t v94[2];
  int v95;
  _QWORD v96[2];
  int v97;
  uint64_t v98;
  uint64_t v99;
  int64x2_t v100;
  int64x2_t v101;
  uint64_t v102;

  v4 = a1;
  v102 = *MEMORY[0x24BDAC8D0];
  v5 = (_BYTE *)a1[2];
  v81[0] = a1[3];
  v81[1] = sub_22E60AD50;
  v81[2] = 0;
  *v5 = 0;
  (**a3)(a3);
  if (!*(_BYTE *)v4[2])
  {
    sub_22E600354((uint64_t)v90, a2, *v4, 0x100000059, 1);
    sub_22F27B464(v81, a2);
    sub_22F283FC4((uint64_t)&v98);
    return sub_22E488B4C((uint64_t)v90);
  }
  v92 = 1;
  v7 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
  v8 = *(_QWORD *)(a2 + 2312);
  v91 = *(_BYTE *)(a2 + 2893);
  *(_BYTE *)(a2 + 2893) = 0;
  v9 = *(_QWORD *)(a2 + 2872);
  v90[0] = v7;
  v90[1] = v9;
  v90[2] = v8;
  *(_QWORD *)(a2 + 2872) = v7;
  v94[0] = 0;
  v94[1] = 0;
  v93 = a2;
  v95 = 0;
  v96[0] = 0;
  v96[1] = 0;
  v97 = 0;
  v10 = *(unsigned int **)(*v4 + 24);
  if (v10)
  {
    v78 = (int32x2_t *)a2;
    v11 = v10 + 4;
    v12 = *v10;
    v73 = v4;
    if ((_DWORD)v12)
    {
      v13 = 0;
      while (*(_DWORD *)(*(_QWORD *)&v11[v13] + 8) != 90)
      {
        v13 += 2;
        if (2 * v12 == v13)
          goto LABEL_44;
      }
      v14 = &v11[v13];
    }
    else
    {
      v14 = v10 + 4;
    }
    v15 = &v11[2 * v12];
    if (v14 != v15)
    {
      v71 = v15;
      v72 = v14;
      v16 = (uint64_t *)(a2 + 2904);
      v75 = (uint64_t *)(a2 + 272);
      v17 = *(_QWORD *)v14;
LABEL_13:
      v18 = *(unsigned int *)(v17 + 16);
      if ((_DWORD)v18)
      {
        v79 = v73[1];
        v19 = v17 + 80;
        v20 = v17 + 80 + 8 * v18;
        v21 = v20 + 8 * v18;
        v77 = v21;
        while (1)
        {
          v22 = *(_QWORD *)(*(_QWORD *)v19 + 16);
          v23 = *(_QWORD *)(*(_QWORD *)v21 + 16);
          v24 = *(_QWORD *)(*(_QWORD *)v20 + 16);
          v25 = v22;
          if (v22)
          {
            v25 = *(_QWORD *)(*(_QWORD *)v19 + 16);
            if ((*(_DWORD *)(v22 + 28) & 0x7F) == 0x3F)
              v25 = *(_QWORD *)(sub_22EFBC5B4(*(_QWORD *)(*(_QWORD *)v19 + 16)) + 24);
          }
          v26 = sub_22E5FF6C4(v79 + 72, v25);
          if (*(_QWORD *)(v79 + 72) + 56 * *(unsigned int *)(v79 + 88) != v26)
            break;
          a2 = (uint64_t)v78;
LABEL_28:
          v20 += 8;
          if (v20 == v77)
            goto LABEL_39;
        }
        v27 = v26;
        v28 = v16;
        v29 = *(_QWORD *)(v22 + 48);
        v30 = *(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0);
        if (!v30 || (v31 = *(_DWORD *)(v30 + 16), (v31 & 0xFE) != 0x28))
        {
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
            || (v30 = sub_22F10CF48(v30)) == 0)
          {
LABEL_22:
            a2 = (uint64_t)v78;
            v32 = sub_22E66C868(*(_QWORD *)&v78[18] + 280, v29, 0);
            v33 = *(_OWORD *)(v27 + 8);
            v34 = *(_OWORD *)(v27 + 40);
            v86[1] = *(_OWORD *)(v27 + 24);
            v86[2] = v34;
            v86[0] = v33;
            *(_WORD *)&v82[32] = 257;
            sub_22E3BEE6C(v75, v86, v32, (uint64_t)v82, (uint64_t)&v87);
            *(_OWORD *)&v82[8] = v87;
            *(_OWORD *)&v82[24] = v88;
            *(_OWORD *)&v82[40] = v89;
            *(_QWORD *)v82 = v23;
            v16 = v28;
            sub_22E3CEC9C((uint64_t)v28, v82, (__int128 *)&v82[8], (uint64_t)&v99);
            sub_22E4C6274((uint64_t)v78, v24);
            v99 = v23;
            *(_QWORD *)v82 = 0;
            if (sub_22E3CED3C(v28, &v99, v82))
            {
              **(_QWORD **)v82 = -8192;
              v78[364] = vadd_s32(v78[364], (int32x2_t)0x1FFFFFFFFLL);
            }
            v99 = v24;
            *(_QWORD *)v82 = 0;
            v35 = sub_22E3CED3C(v28, &v99, v82);
            v36 = *(_QWORD *)v82;
            if (!v35)
              v36 = *(_QWORD *)&v78[363] + 56 * v78[365].u32[0];
            v85 = *(_OWORD *)(v36 + 40);
            v84 = *(_OWORD *)(v36 + 24);
            v83 = *(_OWORD *)(v36 + 8);
            *(_OWORD *)v82 = v83;
            *(_OWORD *)&v82[16] = v84;
            *(_OWORD *)&v82[32] = v85;
            sub_22E5BC134(v94, v93, v22, (uint64_t)v82);
            v19 += 8;
            v21 += 8;
            goto LABEL_28;
          }
          v31 = *(_DWORD *)(v30 + 16);
        }
        if ((v31 & 0x100000) != 0)
        {
          do
          {
            v30 = *(_QWORD *)(*(_QWORD *)(v30 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (v30)
            {
              v37 = *(_DWORD *)(v30 + 16);
              if ((v37 & 0xFE) == 0x28)
                continue;
            }
            v30 = sub_22F10CF48(v30);
            v37 = *(_DWORD *)(v30 + 16);
          }
          while ((v37 & 0x100000) != 0);
        }
        v29 = *(_QWORD *)(v30 + 32);
        goto LABEL_22;
      }
LABEL_39:
      v38 = (uint64_t *)(v72 + 2);
      v4 = v73;
      while (v38 != (uint64_t *)v71)
      {
        v39 = *v38++;
        v17 = v39;
        if (*(_DWORD *)(v39 + 8) == 90)
        {
          v72 = (unsigned int *)(v38 - 1);
          goto LABEL_13;
        }
      }
      v10 = *(unsigned int **)(*v73 + 24);
    }
LABEL_44:
    if (v10)
    {
      v42 = *v10;
      v40 = v10 + 4;
      v41 = v42;
      if (v42)
      {
        v43 = 8 * v41;
        v44 = v40;
        while (*(_DWORD *)(*(_QWORD *)v44 + 8) != 89)
        {
          v44 += 2;
          v43 -= 8;
          if (!v43)
            goto LABEL_90;
        }
      }
      else
      {
        v44 = v40;
      }
      v45 = &v40[2 * v41];
      if (v44 != v45)
      {
        v74 = (uint64_t *)(a2 + 272);
        v46 = *(_QWORD *)v44;
        v76 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
LABEL_53:
        v47 = v4[1];
        v99 = 1;
        v100 = v76;
        v101 = v76;
        v48 = *(unsigned int *)(v46 + 16);
        if ((_DWORD)v48)
        {
          v49 = (unsigned __int8 **)(v46 + 80);
          v50 = v46 + 80 + 8 * v48;
          v80 = v46;
          while (1)
          {
            v51 = *v49;
            v52 = sub_22E5FF714(*v49);
            v53 = v52;
            if (v52)
              v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 32))(v52);
            *(_QWORD *)&v87 = v52;
            sub_22F285E70((uint64_t)&v99, &v87, (uint64_t)v82);
            if (!v82[16])
              goto LABEL_74;
            v54 = v53;
            if (v53)
            {
              v54 = v53;
              if ((*(_DWORD *)(v53 + 28) & 0x7F) == 0x3F)
                v54 = *(_QWORD *)(sub_22EFBC5B4(v53) + 24);
            }
            v55 = sub_22E5FF6C4(v47 + 72, v54);
            if (*(_QWORD *)(v47 + 72) + 56 * *(unsigned int *)(v47 + 88) == v55)
              goto LABEL_74;
            v56 = *(_OWORD *)(v55 + 8);
            v57 = *(_OWORD *)(v55 + 40);
            v88 = *(_OWORD *)(v55 + 24);
            v89 = v57;
            v87 = v56;
            if (*sub_22EFFA6B0(v51) == 161
              || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 16) & 0xFEu)
               - 2 <= 3)
            {
              break;
            }
LABEL_73:
            *(_OWORD *)v82 = v87;
            *(_OWORD *)&v82[16] = v88;
            *(_OWORD *)&v82[32] = v89;
            sub_22E5BC134(v94, v93, v53, (uint64_t)v82);
LABEL_74:
            if (++v49 == (unsigned __int8 **)v50)
              goto LABEL_84;
          }
          v58 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
          v59 = *(_QWORD *)(v53 + 48);
          v60 = *(_QWORD *)(v59 & 0xFFFFFFFFFFFFFFF0);
          if (!v60 || (v61 = *(_DWORD *)(v60 + 16), (v61 & 0xFE) != 0x28))
          {
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v60 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
            {
              v62 = v77;
LABEL_68:
              v63 = v80;
              goto LABEL_69;
            }
            v60 = sub_22F10CF48(v60);
            v62 = v77;
            v63 = v80;
            if (!v60)
            {
LABEL_69:
              v64 = v63 & 0xE0;
              v65 = v62 & 0xFFFFFFFF00000000;
              v77 = v65 | v64;
              v66 = sub_22EF5B848(v58, v59, v65 | v64);
              v83 = v87;
              v84 = v88;
              v85 = v89;
              v67 = sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, v66, 0);
              *(_WORD *)&v82[32] = 257;
              sub_22E3BEE6C(v74, &v83, v67, (uint64_t)v82, (uint64_t)v86);
              v68 = *(_QWORD *)(v66 & 0xFFFFFFFFFFFFFFF0);
              if (!v68 || *(_BYTE *)(v68 + 16) != 39)
                v68 = sub_22F10CF48(*(_QWORD *)(v66 & 0xFFFFFFFFFFFFFFF0));
              v4 = v73;
              v80 &= 0xE0u;
              sub_22E4E98F8(a2, v86, v68, 0, 0, &v87);
              goto LABEL_73;
            }
            v61 = *(_DWORD *)(v60 + 16);
          }
          while (1)
          {
            v62 = v77;
            if ((v61 & 0x100000) == 0)
              break;
            v60 = *(_QWORD *)(*(_QWORD *)(v60 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v60 || (v61 = *(_DWORD *)(v60 + 16), (v61 & 0xFE) != 0x28))
            {
              v60 = sub_22F10CF48(v60);
              v61 = *(_DWORD *)(v60 + 16);
            }
            a2 = (uint64_t)v78;
          }
          v59 = *(_QWORD *)(v60 + 32);
          goto LABEL_68;
        }
LABEL_84:
        if ((v99 & 1) == 0)
          llvm::deallocate_buffer((llvm *)v100.i64[0], (void *)(8 * v100.u32[2]));
        v69 = v44 + 2;
        while (v69 != v45)
        {
          v70 = *(_QWORD *)v69;
          v69 += 2;
          v46 = v70;
          if (*(_DWORD *)(v70 + 8) == 89)
          {
            v44 = v69 - 2;
            goto LABEL_53;
          }
        }
      }
    }
  }
LABEL_90:
  sub_22E5BC320((uint64_t)v96, v93 + 2904);
  sub_22F2840EC((uint64_t)v96);
  sub_22F27B464(v81, a2);
  return sub_22F283FC4((uint64_t)v90);
}

uint64_t sub_22E60AD50(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_22F28423C(*a1);
  return sub_22E5E5158(a2, *(_QWORD *)(v3 + 8 * *(unsigned int *)(v3 + 8) + 32), 0, 0);
}

uint64_t sub_22E60AD8C(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD, uint64_t))
{
  return sub_22E60AD9C(a2, *a1, a3);
}

uint64_t sub_22E60AD9C(uint64_t a1, uint64_t a2, void (***a3)(_QWORD, uint64_t))
{
  uint64_t v6;
  _QWORD v8[2];
  _QWORD v9[3];
  _QWORD v10[2];

  v6 = sub_22E59F470(a2, 40);
  (**a3)(a3, a1);
  v10[0] = a2;
  v10[1] = v6;
  v9[0] = v10;
  v9[1] = sub_22E60AE50;
  v9[2] = 0;
  v8[0] = sub_22F294750;
  v8[1] = nullsub_63;
  sub_22E5F5E6C(a1, a2, 40, (uint64_t)v9, (uint64_t)v8);
  return sub_22E5F6264(a1, a2, (uint64_t (*)(uint64_t, _QWORD *))sub_22E60AFB0, (uint64_t)v9);
}

uint64_t sub_22E60AE50(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD v10[3];
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD v17[2];
  int v18;

  (**a3)(a3);
  v12 = 1;
  v5 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
  v6 = *(_QWORD *)(a2 + 2312);
  v11 = *(_BYTE *)(a2 + 2893);
  *(_BYTE *)(a2 + 2893) = 0;
  v7 = *(_QWORD *)(a2 + 2872);
  v10[0] = v5;
  v10[1] = v7;
  v10[2] = v6;
  *(_QWORD *)(a2 + 2872) = v5;
  v14 = 0;
  v15 = 0;
  v13 = a2;
  v16 = 0;
  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  sub_22E5F2534(a2, *a1, (uint64_t)v10);
  sub_22E5F310C(a2, *(unsigned int **)(*a1 + 24), (uint64_t)v10);
  sub_22E5F4508();
  sub_22E5BC320((uint64_t)v17, v13 + 2904);
  sub_22F2840EC((uint64_t)v17);
  v8 = *(_DWORD *)(*a1 + 8) - 56;
  if (v8 <= 0x2A && ((1 << v8) & 0x6000001CF91) != 0)
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 144) + 808) + 592))(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 808), a2);
  sub_22E5E5158(a2, *(_QWORD *)(a1[1] + 8 * *(unsigned int *)(a1[1] + 8) + 32), 0, 0);
  sub_22E5F523C(a2, *a1);
  return sub_22F283FC4((uint64_t)v10);
}

uint64_t sub_22E60AFB0()
{
  return 0;
}

uint64_t sub_22E60AFB8(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD, uint64_t))
{
  return sub_22E60AD9C(a2, *a1, a3);
}

uint64_t sub_22E60AFC8(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD))
{
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[3];
  uint64_t v8;

  v4 = *a1;
  (**a3)(a3);
  v8 = v4;
  v7[0] = &v8;
  v7[1] = sub_22E60B044;
  v7[2] = 0;
  v6[0] = sub_22F294750;
  v6[1] = nullsub_63;
  return sub_22E5F5E6C(a2, v4, 33, (uint64_t)v7, (uint64_t)v6);
}

uint64_t sub_22E60B044(uint64_t *a1, _QWORD *a2, void (***a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  _QWORD v9[2];

  (**a3)(a3);
  sub_22F293FF0((uint64_t)(a2 + 430), (uint64_t)a2, 63, *(unsigned __int8 *)(*a1 + 36));
  v5 = *a1;
  v6 = *(_QWORD *)(*(_QWORD *)(*a1 + 24) + 8 * **(unsigned int **)(*a1 + 24) + 112);
  v9[0] = sub_22F2947C0;
  v9[1] = sub_22E603594;
  v8[0] = sub_22F2947D0;
  v8[1] = sub_22E603654;
  sub_22E5F8DA8((uint64_t)a2, v5, v6, (uint64_t)v9, (uint64_t)v8);
  return sub_22F294168((uint64_t)(a2 + 430), a2);
}

uint64_t sub_22E60B0F4(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD))
{
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[3];
  uint64_t v8;

  v4 = *a1;
  (**a3)(a3);
  v8 = v4;
  v7[0] = &v8;
  v7[1] = sub_22E60B044;
  v7[2] = 0;
  v6[0] = sub_22F294750;
  v6[1] = nullsub_63;
  return sub_22E5F5E6C(a2, v4, 33, (uint64_t)v7, (uint64_t)v6);
}

uint64_t sub_22E60B170(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD))
{
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[3];
  uint64_t v8;

  v4 = *a1;
  (**a3)(a3);
  v8 = v4;
  v7[0] = &v8;
  v7[1] = sub_22E60B1EC;
  v7[2] = 0;
  v6[0] = sub_22F294750;
  v6[1] = nullsub_63;
  return sub_22E5F5E6C(a2, v4, 54, (uint64_t)v7, (uint64_t)v6);
}

uint64_t sub_22E60B1EC(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  _QWORD v9[2];

  (**a3)(a3);
  v5 = *a1;
  v6 = *(_QWORD *)(*(_QWORD *)(*a1 + 24) + 8 * **(unsigned int **)(*a1 + 24) + 112);
  v9[0] = sub_22F2947C0;
  v9[1] = sub_22E603594;
  v8[0] = sub_22F2947D0;
  v8[1] = sub_22E603654;
  return sub_22E5F8DA8(a2, v5, v6, (uint64_t)v9, (uint64_t)v8);
}

uint64_t sub_22E60B270(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD))
{
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[3];
  uint64_t v8;

  v4 = *a1;
  (**a3)(a3);
  v8 = v4;
  v7[0] = &v8;
  v7[1] = sub_22E60B1EC;
  v7[2] = 0;
  v6[0] = sub_22F294750;
  v6[1] = nullsub_63;
  return sub_22E5F5E6C(a2, v4, 54, (uint64_t)v7, (uint64_t)v6);
}

uint64_t sub_22E60B2EC(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  _BOOL4 v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  llvm::Constant **v41;
  llvm::Type *v42;
  uint64_t NullValue;
  uint64_t v44;
  unsigned __int8 *v45;
  _QWORD v46[2];
  uint64_t v47;
  _QWORD v48[3];
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52[2];
  int v53;
  _QWORD v54[2];
  int v55;
  _QWORD v56[3];
  char v57;
  char v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _QWORD v64[5];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _QWORD v68[13];

  v68[11] = *MEMORY[0x24BDAC8D0];
  v60 = 0;
  sub_22E5F9AA8((uint64_t)v56, a2, a1[1]);
  result = sub_22E61F3B0(a2, *(_QWORD *)(*((_QWORD *)a1[1] + 3) + 8 * **((unsigned int **)a1[1] + 3) + 40), &v60, 0);
  if ((_DWORD)result)
  {
    if (!v60)
      goto LABEL_3;
    v7 = 0;
  }
  else
  {
    *(_QWORD *)&v65 = "taskloop.if.then";
    LOWORD(v67) = 259;
    v6 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v65 = "taskloop.if.end";
    LOWORD(v67) = 259;
    v7 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v8 = (uint64_t)a1[1];
    v9 = *(unsigned __int8 **)(*(_QWORD *)(v8 + 24) + 8 * **(unsigned int **)(v8 + 24) + 40);
    v10 = sub_22E3CF180(a2 + 3904, v8);
    if (v11)
      v12 = v10;
    else
      v12 = 0;
    sub_22E5F9FF4(a2, v8, v9, (uint64_t)v6, (uint64_t)v7, v12);
    sub_22E5ED9B4((_QWORD *)a2, v6, 0);
    sub_22E3CB7B0((_QWORD *)a2, (uint64_t)a1[1], 0);
  }
  sub_22E5F7384(a2, *((unsigned int **)a1[1] + 3));
  v50 = 1;
  v13 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
  v14 = *(_QWORD *)(a2 + 2312);
  v49 = *(_BYTE *)(a2 + 2893);
  *(_BYTE *)(a2 + 2893) = 0;
  v15 = *(_QWORD *)(a2 + 2872);
  v48[0] = v13;
  v48[1] = v15;
  v48[2] = v14;
  *(_QWORD *)(a2 + 2872) = v13;
  v52[0] = 0;
  v52[1] = 0;
  v51 = a2;
  v53 = 0;
  v54[0] = 0;
  v54[1] = 0;
  v55 = 0;
  v16 = (_QWORD *)(*((_QWORD *)*a1 + 2) & 0xFFFFFFFFFFFFFFF8);
  v17 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[1] + 3) + 8 * **((unsigned int **)a1[1] + 3) + 88) + 16);
  *(_QWORD *)&v61 = v16[16];
  *(_QWORD *)&v65 = 0;
  v18 = sub_22E3CED3C((uint64_t *)(a2 + 2904), &v61, &v65);
  v19 = v65;
  if (!v18)
    v19 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
  v63 = *(_OWORD *)(v19 + 40);
  v62 = *(_OWORD *)(v19 + 24);
  v61 = *(_OWORD *)(v19 + 8);
  v65 = v61;
  v66 = v62;
  v67 = v63;
  sub_22E5BC134(v52, a2, v17, (uint64_t)&v65);
  v20 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[1] + 3) + 8 * **((unsigned int **)a1[1] + 3) + 96) + 16);
  *(_QWORD *)&v61 = v16[17];
  *(_QWORD *)&v65 = 0;
  v21 = sub_22E3CED3C((uint64_t *)(a2 + 2904), &v61, &v65);
  v22 = v65;
  if (!v21)
    v22 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
  v63 = *(_OWORD *)(v22 + 40);
  v62 = *(_OWORD *)(v22 + 24);
  v61 = *(_OWORD *)(v22 + 8);
  v65 = v61;
  v66 = v62;
  v67 = v63;
  sub_22E5BC134(v52, v51, v20, (uint64_t)&v65);
  v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[1] + 3) + 8 * **((unsigned int **)a1[1] + 3) + 104) + 16);
  *(_QWORD *)&v61 = v16[18];
  *(_QWORD *)&v65 = 0;
  v24 = sub_22E3CED3C((uint64_t *)(a2 + 2904), &v61, &v65);
  v25 = v65;
  if (!v24)
    v25 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
  v63 = *(_OWORD *)(v25 + 40);
  v62 = *(_OWORD *)(v25 + 24);
  v61 = *(_OWORD *)(v25 + 8);
  v65 = v61;
  v66 = v62;
  v67 = v63;
  sub_22E5BC134(v52, v51, v23, (uint64_t)&v65);
  v27 = v16[19];
  v26 = v16 + 19;
  v28 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[1] + 3) + 8 * **((unsigned int **)a1[1] + 3) + 80) + 16);
  *(_QWORD *)&v61 = v27;
  *(_QWORD *)&v65 = 0;
  v29 = sub_22E3CED3C((uint64_t *)(a2 + 2904), &v61, &v65);
  v30 = v65;
  if (!v29)
    v30 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
  v63 = *(_OWORD *)(v30 + 40);
  v62 = *(_OWORD *)(v30 + 24);
  v61 = *(_OWORD *)(v30 + 8);
  v65 = v61;
  v66 = v62;
  v67 = v63;
  sub_22E5BC134(v52, v51, v28, (uint64_t)&v65);
  sub_22F28E264(a2, (uint64_t)a1[1], (uint64_t)v48);
  sub_22E5F766C(a2, (uint64_t)a1[1], (uint64_t)v48);
  v31 = sub_22E5F386C(a2, (uint64_t)a1[1], (uint64_t)v48);
  sub_22E5BC320((uint64_t)v54, v51 + 2904);
  sub_22F2840EC((uint64_t)v54);
  sub_22E4C652C((_QWORD *)a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[1] + 3) + 8 * **((unsigned int **)a1[1] + 3) + 16) + 16));
  sub_22E4D89CC(a2);
  v32 = (uint64_t)a1[1];
  v33 = *(unsigned __int8 **)(*(_QWORD *)(v32 + 24) + 8 * **(unsigned int **)(v32 + 24) + 24);
  if (*v33 == 161)
  {
    sub_22E4C652C((_QWORD *)a2, *((_QWORD *)v33 + 2));
    sub_22E4D89CC(a2);
    v32 = (uint64_t)a1[1];
  }
  sub_22E600354((uint64_t)&v65, a2, v32, 0x10000004CLL, 0);
  v34 = (uint64_t)a1[1];
  v46[1] = v48;
  v47 = v34;
  *(_QWORD *)&v61 = &v47;
  *((_QWORD *)&v61 + 1) = sub_22E60B9D0;
  *(_QWORD *)&v62 = 0;
  v46[0] = v34;
  v64[0] = v46;
  v64[1] = sub_22E60BA10;
  v64[2] = 0;
  sub_22E5F8828((_QWORD *)a2, v34, (uint64_t)&v61, (uint64_t)v64);
  sub_22F283FC4((uint64_t)v68);
  sub_22E488B4C((uint64_t)&v65);
  if (v7)
  {
    sub_22E5EDA70(a2);
    sub_22E5ED9B4((_QWORD *)a2, v7, 1);
  }
  if (v31)
  {
    v35 = a1[1];
    v36 = sub_22F421AC0(*((_DWORD *)v35 + 2));
    *(_QWORD *)&v61 = *v26;
    *(_QWORD *)&v65 = 0;
    v37 = sub_22E3CED3C((uint64_t *)(a2 + 2904), &v61, &v65);
    v38 = v65;
    if (!v37)
      v38 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
    v61 = *(_OWORD *)(v38 + 8);
    v62 = *(_OWORD *)(v38 + 24);
    v63 = *(_OWORD *)(v38 + 40);
    v39 = *(_QWORD *)(*v26 + 48);
    v40 = *((_DWORD *)a1[1] + 3);
    v65 = v61;
    v66 = v62;
    v67 = v63;
    sub_22E6281E0(*(_QWORD **)(a2 + 144), v39, (uint64_t)v64);
    v41 = (llvm::Constant **)sub_22E4E6994(a2, (uint64_t)&v65, 0, v39, v40, 2, (uint64_t)v64, 0);
    LOWORD(v67) = 257;
    NullValue = llvm::Constant::getNullValue(*v41, v42);
    v44 = sub_22E3C18F4(a2 + 272, 33, (uint64_t *)v41, NullValue, (uint64_t)&v65);
    sub_22E5F3CC4(a2, v35, v36, v44);
  }
  v45 = a1[1];
  *(_QWORD *)&v65 = v26;
  *((_QWORD *)&v65 + 1) = v45;
  sub_22F28DF10(a2, *((unsigned int **)v45 + 3), sub_22E60BAD8, (uint64_t)&v65);
  result = sub_22F283FC4((uint64_t)v48);
LABEL_3:
  if (v58)
  {
    v5 = v59;
    *(_BYTE *)(v59 + 2893) = v57;
    result = sub_22E48B274(v5, v56[0], v56[2], 0, 0);
    *(_QWORD *)(v59 + 2872) = v56[1];
  }
  return result;
}

uint64_t sub_22E60B9D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = sub_22F421AC0(*(_DWORD *)(*a1 + 8));
  if ((_DWORD)result)
    return sub_22E5F78DC(a2, v3);
  return result;
}

uint64_t sub_22E60BA10(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  char v15;
  uint64_t v16;

  v9 = *a1;
  v10 = *(_QWORD *)(*(_QWORD *)(a1[1] + 32) + 1992) - *(_QWORD *)(*(_QWORD *)(a1[1] + 32) + 2000) != *(_QWORD *)a1[1];
  v11 = *(_QWORD *)(v9 + 24) + 8 * **(unsigned int **)(v9 + 24);
  v12 = *(unsigned __int8 **)(v11 + 48);
  v13 = *(_QWORD *)(v11 + 64);
  v16 = *a1;
  return sub_22F28DA58(a2, v9, v10, v12, v13, (void (*)(uint64_t, uint64_t))sub_22E60BA88, (uint64_t)&v16, a8, (void (*)(uint64_t, uint64_t))nullsub_87, (uint64_t)&v15);
}

uint64_t sub_22E60BA88(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v5;
  int v6;

  v3 = *a1;
  *(_QWORD *)&v5 = 0;
  *((_QWORD *)&v5 + 1) = -1;
  v6 = 0;
  sub_22F28D424(a2, v3, &v5);
  return sub_22E5E5100(a2, v3);
}

uint64_t sub_22E60BAD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  llvm::Constant **v10;
  llvm::Type *v11;
  uint64_t NullValue;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[40];
  _OWORD v18[2];
  __int128 v19;

  v4 = a2 + 272;
  *(_QWORD *)&v14 = **(_QWORD **)a1;
  *(_QWORD *)&v18[0] = 0;
  v5 = sub_22E3CED3C((uint64_t *)(a2 + 2904), &v14, v18);
  v6 = *(_QWORD *)&v18[0];
  if (!v5)
    v6 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
  v14 = *(_OWORD *)(v6 + 8);
  v15 = *(_OWORD *)(v6 + 24);
  v16 = *(_OWORD *)(v6 + 40);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(**(_QWORD **)a1 + 48);
  v9 = *(_DWORD *)(v7 + 12);
  v18[0] = v14;
  v18[1] = v15;
  v19 = v16;
  sub_22E6281E0(*(_QWORD **)(a2 + 144), v8, (uint64_t)v17);
  v10 = (llvm::Constant **)sub_22E4E6994(a2, (uint64_t)v18, 0, v8, v9, 2, (uint64_t)v17, 0);
  LOWORD(v19) = 257;
  NullValue = llvm::Constant::getNullValue(*v10, v11);
  return sub_22E3C18F4(v4, 33, (uint64_t *)v10, NullValue, (uint64_t)v18);
}

uint64_t sub_22E60BBE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  _QWORD v11[3];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v11[0] = *(_QWORD *)a1;
  v11[1] = a3;
  v11[2] = *(_QWORD *)(a1 + 8);
  v4 = *(_OWORD *)(a1 + 16);
  v5 = *(_OWORD *)(a1 + 48);
  v13 = *(_OWORD *)(a1 + 32);
  v14 = v5;
  v12 = v4;
  v15 = *(_QWORD *)(a1 + 64);
  v16 = a4;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 808);
  v8 = v11;
  v9 = sub_22E60BC54;
  v10 = 0;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 360))(v6);
}

uint64_t sub_22E60BC54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t result;
  uint64_t v12;
  _OWORD v13[3];
  _QWORD v14[3];
  char v15;
  char v16;
  uint64_t v17;

  sub_22E5F9AA8((uint64_t)v14, a2, *(unsigned __int8 **)a1);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 808);
  v5 = *(unsigned __int8 **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(*(_QWORD *)a1 + 12);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_OWORD *)(a1 + 24);
  v10 = *(_OWORD *)(a1 + 56);
  v13[1] = *(_OWORD *)(a1 + 40);
  v13[2] = v10;
  v13[0] = v9;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t, uint64_t, _OWORD *, _QWORD, _QWORD))(*(_QWORD *)v4 + 352))(v4, a2, v7, v5, v6, v8, v13, *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
  if (v16)
  {
    v12 = v17;
    *(_BYTE *)(v17 + 2893) = v15;
    result = sub_22E48B274(v12, v14[0], v14[2], 0, 0);
    *(_QWORD *)(v17 + 2872) = v14[1];
  }
  return result;
}

uint64_t sub_22E60BD00(uint64_t *a1, _QWORD *a2, void (***a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[3];

  (**a3)(a3);
  v5 = *a1;
  v10[0] = a1[1];
  v10[1] = sub_22E60B2EC;
  v10[2] = 0;
  v7 = a1[2];
  v6 = a1[3];
  v9[0] = sub_22E60BBE0;
  v9[1] = v7;
  return sub_22F28FE44(a2, v5, 76, (uint64_t)v10, (uint64_t)v9, v6);
}

uint64_t sub_22E60BD70(uint64_t a1, uint64_t a2, void (***a3)(_QWORD))
{
  _QWORD *v4;

  v4 = *(_QWORD **)a1;
  (**a3)(a3);
  return sub_22F293198(v4, *(_QWORD *)(a1 + 8));
}

uint64_t sub_22E60BDA8(uint64_t a1, uint64_t a2, void (***a3)(_QWORD))
{
  _QWORD *v4;

  v4 = *(_QWORD **)a1;
  (**a3)(a3);
  return sub_22F293198(v4, *(_QWORD *)(a1 + 8));
}

uint64_t sub_22E60BDE0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  _BYTE v9[104];
  _QWORD v10[12];

  v10[11] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v8 = a1[1];
  sub_22E600354((uint64_t)v9, a2, v8, 0x100000028, 0);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 144) + 808);
  v7[0] = &v8;
  v7[1] = sub_22E60BEAC;
  v7[2] = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v5 + 136))(v5, a2, v7, *(unsigned int *)(a1[1] + 12));
  sub_22F283FC4((uint64_t)v10);
  return sub_22E488B4C((uint64_t)v9);
}

uint64_t sub_22E60BEAC(uint64_t *a1, _QWORD *a2, void (***a3)(_QWORD))
{
  (**a3)(a3);
  return sub_22F293198(a2, *a1);
}

uint64_t sub_22E60BEE4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  _BYTE v9[104];
  _QWORD v10[12];

  v10[11] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v8 = a1[1];
  sub_22E600354((uint64_t)v9, a2, v8, 0x100000028, 0);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 144) + 808);
  v7[0] = &v8;
  v7[1] = sub_22E60BFB0;
  v7[2] = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v5 + 136))(v5, a2, v7, *(unsigned int *)(a1[1] + 12));
  sub_22F283FC4((uint64_t)v10);
  return sub_22E488B4C((uint64_t)v9);
}

uint64_t sub_22E60BFB0(uint64_t *a1, _QWORD *a2, void (***a3)(_QWORD))
{
  (**a3)(a3);
  return sub_22F293198(a2, *a1);
}

uint64_t sub_22E60BFE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24)
                 + 8 * **(unsigned int **)(*(_QWORD *)a1 + 24)
                 + 8 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 4)
                 + 16);
  return sub_22E5E5158(a2, *(_QWORD *)(v2 + 8 * *(unsigned int *)(v2 + 8) + 32), 0, 0);
}

uint64_t sub_22E60C020(uint64_t *a1, uint64_t a2, void (***a3)(_QWORD, uint64_t))
{
  void (***v3)(_QWORD, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  unsigned int *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 **v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int *v36;
  uint64_t *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _QWORD v57[3];
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61[2];
  int v62;
  _QWORD v63[2];
  int v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;

  v3 = a3;
  v59 = 1;
  v5 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
  v6 = *(_QWORD *)(a2 + 2312);
  v58 = *(_BYTE *)(a2 + 2893);
  *(_BYTE *)(a2 + 2893) = 0;
  v7 = *(_QWORD *)(a2 + 2872);
  v57[0] = v5;
  v57[1] = v7;
  v57[2] = v6;
  *(_QWORD *)(a2 + 2872) = v5;
  v61[0] = 0;
  v61[1] = 0;
  v60 = a2;
  v62 = 0;
  v63[0] = 0;
  v63[1] = 0;
  v64 = 0;
  v8 = (unsigned __int8 *)*a1;
  v9 = *(_DWORD *)(*a1 + 8);
  if ((v9 - 36) <= 0x29 && ((1 << (v9 - 36)) & 0x34000000C03) != 0)
  {
    v10 = (unsigned int *)*((_QWORD *)v8 + 3);
    if (v10)
    {
      v13 = *v10;
      v11 = (uint64_t *)(v10 + 4);
      v12 = v13;
      if (v13)
      {
        v25 = 8 * v12;
        v14 = v11;
        while (*(_DWORD *)(*v14 + 8) != 29)
        {
          ++v14;
          v25 -= 8;
          if (!v25)
            goto LABEL_29;
        }
      }
      else
      {
        v14 = v11;
      }
      v15 = &v11[v12];
      if (v14 != v15)
      {
        v16 = *v14;
LABEL_8:
        v17 = *(unsigned int *)(v16 + 16);
        if ((_DWORD)v17)
        {
          v18 = (unsigned __int8 **)(v16 + 40);
          v19 = 8 * v17;
          do
          {
            v20 = sub_22EFFA6B0(*v18);
            if (v20)
            {
              v21 = *((_QWORD *)v20 + 2);
              if (v21 && (*(_DWORD *)(v21 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9 && !sub_22E3CB5E0(*((_QWORD *)v20 + 2)))
              {
                v53 = v21;
                *(_QWORD *)&v65 = 0;
                if ((sub_22E3CED3C((uint64_t *)(a2 + 2904), &v53, &v65) & 1) == 0)
                {
                  sub_22E4D8D7C(&v53);
                  v65 = v54;
                  v66 = v55;
                  v67 = v56;
                  sub_22E5BC134(v61, v60, v21, (uint64_t)&v65);
                }
              }
            }
            ++v18;
            v19 -= 8;
          }
          while (v19);
        }
        v23 = v14 + 1;
        while (v23 != v15)
        {
          v24 = *v23++;
          v16 = v24;
          if (*(_DWORD *)(v24 + 8) == 29)
          {
            v14 = v23 - 1;
            goto LABEL_8;
          }
        }
        v8 = (unsigned __int8 *)*a1;
        v9 = *(_DWORD *)(*a1 + 8);
        v3 = a3;
      }
    }
  }
LABEL_29:
  if (sub_22F421AC0(v9))
  {
    sub_22E5BC320((uint64_t)v63, v60 + 2904);
    sub_22F2840EC((uint64_t)v63);
    v26 = *a1;
    v27 = *(_QWORD *)(a2 + 2744);
    *(_QWORD *)(a2 + 2744) = *a1;
    sub_22E60198C(a2, v26, v3);
    *(_QWORD *)(a2 + 2744) = v27;
  }
  else
  {
    v28 = *v8;
    if ((v28 - 30) < 0x1E || v28 == 78)
    {
      v29 = (unsigned int *)*((_QWORD *)v8 + 3);
      v30 = *v29;
      v31 = sub_22F293A28(v9);
      v32 = *((unsigned int *)v8 + 8);
      if ((_DWORD)v32)
      {
        v33 = (uint64_t)&v29[2 * v30 + 4 + 2 * v31];
        v34 = 8 * v32;
        do
        {
          v35 = *(_QWORD *)(*(_QWORD *)v33 + 16);
          if (!sub_22E3CB5E0(v35))
          {
            v53 = v35;
            *(_QWORD *)&v65 = 0;
            if ((sub_22E3CED3C((uint64_t *)(a2 + 2904), &v53, &v65) & 1) == 0)
            {
              sub_22E4D8D7C(&v53);
              v65 = v54;
              v66 = v55;
              v67 = v56;
              sub_22E5BC134(v61, v60, v35, (uint64_t)&v65);
            }
          }
          if ((*(_DWORD *)(v35 + 28) & 0x7F) == 0x3F)
          {
            v53 = v35;
            *(_QWORD *)&v65 = 0;
            if ((sub_22E3CED3C((uint64_t *)(a2 + 2904), &v53, &v65) & 1) == 0)
              sub_22E4C652C((_QWORD *)a2, v35);
          }
          v33 += 8;
          v34 -= 8;
        }
        while (v34);
      }
      v36 = *(unsigned int **)(*a1 + 24);
      if (v36)
      {
        v39 = *v36;
        v37 = (uint64_t *)(v36 + 4);
        v38 = v39;
        if (v39)
        {
          v40 = 8 * v38;
          v41 = v37;
          while (*(_DWORD *)(*v41 + 8) != 60)
          {
            ++v41;
            v40 -= 8;
            if (!v40)
              goto LABEL_62;
          }
        }
        else
        {
          v41 = v37;
        }
        v42 = &v37[v38];
        if (v41 != v42)
        {
          v43 = *v41;
LABEL_50:
          if (*(_QWORD *)(v43 + 16))
          {
            v44 = *((_DWORD *)v8 + 8);
            v45 = *(_DWORD *)(v43 + 24);
            if (v44 < v45)
            {
              do
              {
                v46 = *(_QWORD *)(*(_QWORD *)(v43 + 32 + 8 * (v44 + *(_DWORD *)(v43 + 24))) + 16);
                if (v46)
                {
                  if ((*(_DWORD *)(v46 + 28) & 0x7F) == 0x3F)
                  {
                    v53 = *(_QWORD *)(*(_QWORD *)(v43 + 32 + 8 * (v44 + *(_DWORD *)(v43 + 24))) + 16);
                    *(_QWORD *)&v65 = 0;
                    if ((sub_22E3CED3C((uint64_t *)(a2 + 2904), &v53, &v65) & 1) == 0)
                      sub_22E4C652C((_QWORD *)a2, v46);
                  }
                }
                ++v44;
              }
              while (v45 != v44);
            }
          }
          v47 = v41 + 1;
          while (v47 != v42)
          {
            v48 = *v47++;
            v43 = v48;
            if (*(_DWORD *)(v48 + 8) == 60)
            {
              v41 = v47 - 1;
              goto LABEL_50;
            }
          }
        }
      }
    }
LABEL_62:
    sub_22E5BC320((uint64_t)v63, v60 + 2904);
    sub_22F2840EC((uint64_t)v63);
    v49 = sub_22F28423C(*a1);
    sub_22E5E5158(a2, *(_QWORD *)(v49 + 8 * *(unsigned int *)(v49 + 8) + 32), 0, 0);
  }
  return sub_22F283FC4((uint64_t)v57);
}

void sub_22E60C49C(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  llvm::Value **v29;
  uint64_t v30;
  int v31;
  llvm::Value *v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  unint64_t v42;
  _OWORD v43[3];
  uint64_t v44;
  uint64_t v45;
  llvm::Value *v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  __int16 v51;
  char v52;
  __int16 v53;
  unint64_t v54;
  _BYTE v55[88];
  void *v56[2];
  _BYTE v57[1216];
  void *v58;
  uint64_t v59;
  _BYTE v60[192];
  void *v61;
  uint64_t v62;
  _BYTE v63[16];
  void *v64;
  uint64_t v65;
  _QWORD v66[7];

  v66[5] = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a3 + 40);
  v11 = sub_22EFCB008(v10, 1);
  v12 = sub_22EFFA604(*(unsigned __int8 **)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if ((*(_DWORD *)(v12 + 28) & 0x7Eu) - 52 >= 6)
    v13 = 0;
  else
    v13 = v12;
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v14)
    v15 = *(_BYTE *)(v14 + 16) == 26;
  else
    v15 = 0;
  if (!v15)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
      v14 = sub_22F10CF48(v14);
    else
      v14 = 0;
  }
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  sub_22F260BC4(a1, v10, (uint64_t)v55);
  v42 = sub_22F36C2DC(v16, 1, 64);
  v56[0] = v57;
  v56[1] = (void *)0x800000000;
  v58 = v60;
  v59 = 0x100000000;
  v61 = v63;
  v62 = 0x100000000;
  v64 = v66;
  v65 = 0x200000000;
  v66[4] = 0;
  v17 = (uint64_t)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24);
  sub_22E477B1C(a1, (uint64_t)v56, v14 & 0xFFFFFFFFFFFFFFFBLL, v17, (unint64_t *)(v17 + 8 * a2[4]), 0, 0, 0);
  v18 = *(_DWORD *)(a3 + 48) & 0x3FFFFFFF;
  v41 = v18 - 1;
  v19 = *(_DWORD **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2 + 2 * (v18 - 1)]
                   + ((unint64_t)*a2 >> 24));
  v20 = sub_22F40B920((uint64_t)&v46, v19);
  if (v21)
  {
    sub_22F368F30(v16, v20);
  }
  else
  {
    v22 = v11;
    v23 = a4;
    v24 = a5;
    v25 = v10;
    v26 = -2078137563;
    v27 = *(_QWORD *)(a1 + 144);
    sub_22EFF605C((uint64_t)a2);
    LODWORD(v45) = v28;
    sub_22F1DFAA8((int *)&v45, *(_QWORD **)(*(_QWORD *)(v27 + 144) + 1992), &v46);
    v29 = &v46;
    if (v49 < 0)
      v29 = (llvm::Value **)v46;
    v30 = v49 & 0x7F;
    if (v49 < 0)
      v30 = v47;
    for (; v30; --v30)
    {
      v31 = *(unsigned __int8 *)v29;
      v29 = (llvm::Value **)((char *)v29 + 1);
      v26 = 435 * (v26 ^ v31);
    }
    v10 = v25;
    if (v49 < 0)
      operator delete(v46);
    a5 = v24;
    a4 = v23;
    v11 = v22;
  }
  v32 = (llvm::Value *)llvm::ConstantInt::get();
  v46 = (llvm::Value *)"Type descriptor";
  v51 = 259;
  llvm::Value::setName();
  v33 = *(_QWORD *)(v11 + 8 * v18 + 40);
  sub_22EFF605C((uint64_t)v19);
  v46 = (llvm::Value *)a1;
  v47 = a1 + 272;
  v48 = 0;
  v50 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
  v46 = sub_22E50EA80((uint64_t *)&v46, v32, v42, v33, v34, 0);
  v47 = 0;
  v52 = 0;
  v53 = 0;
  v54 = v42;
  sub_22E46B884((uint64_t)v56, (uint64_t)v56[0] + 152 * v41 + 152, (unint64_t)&v46);
  v37 = sub_22E46D9A0(*(_QWORD *)(a1 + 144) + 280, *(_QWORD **)(*(_QWORD *)(a1 + 144) + 280), (unsigned int *)v56, v11, 0, 0, v35, v36);
  v45 = 0;
  v38 = *(_OWORD *)(a4 + 16);
  v43[0] = *(_OWORD *)a4;
  v43[1] = v38;
  v43[2] = *(_OWORD *)(a4 + 32);
  v44 = *(_QWORD *)(a4 + 48);
  sub_22EFF605C((uint64_t)a2);
  sub_22E47A004(a5, a1, v37, v55, v43, v56, &v45, 0, v39, 0);
  if (!*(_BYTE *)(a1 + 2892))
  {
    if (v10)
    {
      v40 = *(_QWORD *)(a1 + 2880);
      if (v40)
        sub_22E49B804(v40, v45, *(_QWORD *)(v10 + 48), v10);
    }
  }
  if (v64 != v66)
    free(v64);
  if (v61 != v63)
    free(v61);
  if (v58 != v60)
    free(v58);
  if (v56[0] != v57)
    free(v56[0]);
}

llvm::Value *sub_22E60C93C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  llvm::DataLayout *DataLayout;
  llvm::Value *v9;
  _BYTE v11[72];
  _BYTE v12[1064];
  llvm::Type *v13;
  void *v14;
  __int128 v15;
  _QWORD v16[33];

  v16[32] = *MEMORY[0x24BDAC8D0];
  v14 = v16;
  v15 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v11, (uint64_t)&v14);
  v4 = *(_QWORD *)(*(_QWORD *)(*a1 + 224) + 16);
  (*(void (**)(uint64_t, unint64_t, _BYTE *))(*(_QWORD *)v4 + 232))(v4, a2, v11);
  v5 = v14;
  v6 = v15;
  (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 520))(*(_QWORD *)(*a1 + 224), a2, 0);
  sub_22F40E610((uint64_t)v12, *(_QWORD *)(*a1 + 144), a2, 0);
  v7 = llvm::ArrayType::get(*(llvm::ArrayType **)(*a1 + 96), (llvm::Type *)v13);
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*a1 + 200));
  llvm::DataLayout::getABITypeAlignment(DataLayout, *(llvm::Type **)(*a1 + 96));
  v9 = sub_22E63402C(*a1, (uint64_t)v5, v6, v7);
  *((_DWORD *)v9 + 8) = *((_DWORD *)v9 + 8) & 0xFFFFFF3F | 0x80;
  sub_22F295170((uint64_t)v12);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v11);
  if (v14 != v16)
    free(v14);
  return v9;
}

uint64_t sub_22E60CAA4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v22;
  _BYTE v23[24];
  uint64_t *v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  _QWORD v28[3];
  uint64_t *v29[327];
  _QWORD *v30;
  int v31;
  unsigned int v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v28[0] = a2;
  v28[1] = a3;
  v28[2] = a4;
  v29[0] = 0;
  v6 = a1 + 16;
  if (sub_22F295380(*(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 32), (uint64_t)v28, v29))
    v7 = v29[0] == (uint64_t *)(*(_QWORD *)v6 + 32 * *(unsigned int *)(v6 + 16));
  else
    v7 = 1;
  if (!v7)
    return v29[0][3];
  sub_22F40E610((uint64_t)v29, *(_QWORD *)(*(_QWORD *)a1 + 144), (unint64_t)a2, 0);
  v10 = &v30[3 * v32];
  if (v31)
  {
    if (v32)
    {
      v12 = 24 * v32;
      v11 = v30;
      while (1)
      {
        v13 = v11[1];
        if ((*v11 != -4096 || v13 != 0x7FFFFFFFFFFFFFFFLL) && (*v11 != -8192 || v13 != 0x8000000000000000))
          break;
        v11 += 3;
        v12 -= 24;
        if (!v12)
          goto LABEL_21;
      }
    }
    else
    {
      v11 = v30;
    }
  }
  else
  {
LABEL_21:
    v11 = &v30[3 * v32];
  }
  v16 = &v30[3 * v32];
  while (v11 != v16)
  {
    v27 = *(_OWORD *)v11;
    v25 = v27;
    v17 = v11[2];
    v24 = a2;
    v26 = v17;
    sub_22F29550C((uint64_t)v23, v6, (uint64_t)&v24, &v26);
    v18 = v11 + 3;
    v11 = v10;
    if (v18 != v10)
    {
      v11 = v18;
      while (1)
      {
        v19 = v11[1];
        if ((*v11 != -4096 || v19 != 0x7FFFFFFFFFFFFFFFLL) && (*v11 != -8192 || v19 != 0x8000000000000000))
          break;
        v11 += 3;
        if (v11 == v10)
        {
          v11 = v10;
          break;
        }
      }
    }
  }
  v24 = 0;
  if ((sub_22F295380(*(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 32), (uint64_t)v28, &v24) & 1) != 0)
    v22 = v24;
  else
    v22 = (uint64_t *)(*(_QWORD *)(a1 + 16) + 32 * *(unsigned int *)(a1 + 32));
  v8 = v22[3];
  sub_22F295170((uint64_t)v29);
  return v8;
}

uint64_t sub_22E60CCAC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v25;
  uint64_t *v26[3];
  uint64_t *v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  _QWORD v31[330];
  _QWORD *v32;
  int v33;
  unsigned int v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v31[0] = a2;
  v31[1] = a3;
  v31[2] = a4;
  v9 = a1 + 40;
  v8 = *(_QWORD *)(a1 + 40);
  v27 = 0;
  if (sub_22F295380(v8, *(_DWORD *)(v9 + 16), (uint64_t)v31, &v27))
    v10 = v27 == (uint64_t *)(*(_QWORD *)v9 + 32 * *(unsigned int *)(v9 + 16));
  else
    v10 = 1;
  if (!v10)
    return v27[3];
  sub_22F40E610((uint64_t)v31, *(_QWORD *)(*(_QWORD *)a1 + 144), (unint64_t)a2, 0);
  v13 = &v32[3 * v34];
  if (v33)
  {
    if (v34)
    {
      v15 = 24 * v34;
      v14 = v32;
      while (1)
      {
        v16 = v14[1];
        if ((*v14 != -4096 || v16 != 0x7FFFFFFFFFFFFFFFLL) && (*v14 != -8192 || v16 != 0x8000000000000000))
          break;
        v14 += 3;
        v15 -= 24;
        if (!v15)
          goto LABEL_21;
      }
    }
    else
    {
      v14 = v32;
    }
  }
  else
  {
LABEL_21:
    v14 = &v32[3 * v34];
  }
  v19 = &v32[3 * v34];
  while (v14 != v19)
  {
    v30 = *(_OWORD *)v14;
    v28 = v30;
    v20 = v14[2];
    v27 = a2;
    v29 = v20;
    sub_22F29550C((uint64_t)v26, v9, (uint64_t)&v27, &v29);
    v21 = v14 + 3;
    v14 = v13;
    if (v21 != v13)
    {
      v14 = v21;
      while (1)
      {
        v22 = v14[1];
        if ((*v14 != -4096 || v22 != 0x7FFFFFFFFFFFFFFFLL) && (*v14 != -8192 || v22 != 0x8000000000000000))
          break;
        v14 += 3;
        if (v14 == v13)
        {
          v14 = v13;
          break;
        }
      }
    }
  }
  v27 = a2;
  *(_QWORD *)&v28 = a3;
  *((_QWORD *)&v28 + 1) = a4;
  v26[0] = 0;
  if ((sub_22F295380(*(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 56), (uint64_t)&v27, v26) & 1) != 0)
    v25 = v26[0];
  else
    v25 = (uint64_t *)(*(_QWORD *)(a1 + 40) + 32 * *(unsigned int *)(a1 + 56));
  v11 = v25[3];
  sub_22F295170((uint64_t)v31);
  return v11;
}

unint64_t sub_22E60CED4(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 24 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      sub_22F295260(a1);
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      sub_22F295260(a1);
    }
  }
  return v2;
}

uint64_t sub_22E60CF3C(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C](32 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F295670(a1, v4, (_QWORD *)v4 + 4 * v3);
    return llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = result + 32 * v10;
      do
      {
        *(_QWORD *)result = -4096;
        *(_OWORD *)(result + 8) = xmmword_22F45B630;
        result += 32;
      }
      while (result != v11);
    }
  }
  return result;
}

uint64_t sub_22E60D00C(uint64_t a1, _QWORD *a2, uint64_t a3, llvm::Constant **a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  llvm::Type *v14;
  uint64_t NullValue;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  llvm::Constant **v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Constant *v30;
  llvm::PHINode *v31;
  llvm::Type *v32;
  uint64_t v33;
  char v34;
  _QWORD *v36;
  uint64_t v37;
  _QWORD v38[3];
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[4];
  __int16 v43;

  v5 = a5;
  v9 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE;
  if (v11 == 40)
  {
    v12 = 0;
    v36 = 0;
    v37 = 0;
  }
  else
  {
    v36 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v13 = operator new();
    llvm::BasicBlock::BasicBlock();
    v42[0] = "adjust.end";
    v12 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v43 = 257;
    NullValue = llvm::Constant::getNullValue(*a4, v14);
    v16 = sub_22E3C18F4((uint64_t)(a2 + 34), 32, (uint64_t *)a4, NullValue, (uint64_t)v42);
    v17 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v17, v36, v13, v16, 0);
    v43 = 257;
    sub_22E3C12C8(a2 + 34, v17, (uint64_t)v42);
    v37 = v13;
    v18 = (_QWORD *)v13;
    v5 = a5;
    sub_22E5ED9B4(a2, v18, 0);
    v10 = *v9;
  }
  v19 = sub_22F10ACF8(v10);
  v20 = sub_22F10C2A4(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0));
  if (v20)
  {
    if ((*(_DWORD *)(v20 + 28) & 0x7Fu) - 35 >= 3)
      v21 = 0;
    else
      v21 = v20;
  }
  else
  {
    v21 = 0;
  }
  v22 = sub_22E47FE60(a2[18], v21);
  v23 = *(_QWORD *)(a2[18] + 224);
  v24 = sub_22F10ACF8(*v9);
  v25 = sub_22E66C868(a2[18] + 280, v24, 0);
  v38[0] = a4;
  v38[1] = v25;
  v38[2] = v22;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, uint64_t))(*(_QWORD *)v23 + 584))(v23, a2, v38, v21, v5 + 24);
  v27 = (llvm::Constant **)result;
  if (v11 != 40)
  {
    v28 = llvm::User::operator new((llvm::User *)0x40);
    llvm::BranchInst::BranchInst();
    v43 = 257;
    sub_22E3C12C8(a2 + 34, v28, (uint64_t)v42);
    sub_22E5ED9B4(a2, v36, 0);
    v29 = llvm::User::operator new((llvm::User *)0x40);
    llvm::BranchInst::BranchInst();
    v43 = 257;
    sub_22E3C12C8(a2 + 34, v29, (uint64_t)v42);
    sub_22E5ED9B4(a2, v12, 0);
    v30 = *v27;
    v43 = 257;
    v31 = (llvm::PHINode *)sub_22E3C4B80(a2 + 34, (uint64_t)v30, 2, (uint64_t)v42);
    sub_22E3C4C50(v31, (uint64_t)v27, v37);
    v33 = llvm::Constant::getNullValue(*v27, v32);
    result = sub_22E3C4C50(v31, v33, (uint64_t)v36);
    v27 = (llvm::Constant **)v31;
  }
  v34 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = v27;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v34 & 0xF8;
  return result;
}

void sub_22E60D380(unint64_t a1, uint64_t a2, llvm::Value *a3, _QWORD *a4, int a5)
{
  unint64_t v10;
  unint64_t v11;
  llvm::Type **v12;
  uint64_t v13;
  BOOL v14;
  const char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  int v40;
  char v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  uint64_t v48;
  uint64_t v49;
  _OWORD v50[3];
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[7];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char v61;
  __int16 v62;
  unint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  char v68;
  void *v69;
  uint64_t v70;
  _BYTE v71[1216];
  void *v72;
  uint64_t v73;
  _BYTE v74[192];
  void *v75;
  uint64_t v76;
  _BYTE v77[16];
  void *v78;
  uint64_t v79;
  _QWORD v80[8];

  v80[5] = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a1 + 1688) & 0xFFFFFFFFFFFFFFF8;
  v11 = sub_22EFD7558(v10);
  sub_22F10AEAC(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0));
  if (a4)
  {
    v34 = sub_22F10AEAC(a4[6]);
    v35 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 224);
    sub_22F24FFF8((_QWORD *)a1, v57);
    v12 = (llvm::Type **)(*(uint64_t (**)(uint64_t, unint64_t, _QWORD *, uint64_t, _QWORD *))(*(_QWORD *)v35 + 576))(v35, a1, v57, v34, a4);
  }
  else
  {
    v12 = *(llvm::Type ***)(a1 + 4208);
  }
  v13 = *(_QWORD *)(a1 + 1608);
  if (*(_QWORD *)(v13 + 24) || (*(_DWORD *)(v13 + 16) == -1 ? (v14 = a5 == 0) : (v14 = 0), !v14))
  {
    if (a4 && (a4[3] || a4[4]))
    {
      if (a5)
        v15 = "return-adjusting thunk with incomplete parameter type";
      else
        v15 = "non-trivial argument copy for return-adjusting thunk";
      sub_22E6285D0(*(_QWORD *)(a1 + 144), v10, v15);
    }
    sub_22E60D934(a1, *(_QWORD *)(a1 + 1688), *(_QWORD *)(a1 + 1696), v12, a2, a3);
    return;
  }
  v69 = v71;
  v70 = 0x800000000;
  v72 = v74;
  v73 = 0x100000000;
  v75 = v77;
  v76 = 0x100000000;
  v78 = v80;
  v79 = 0x200000000;
  v80[4] = 0;
  v16 = sub_22EFD7558(v10);
  v58 = (unint64_t)v12;
  v61 = 0;
  v62 = 0;
  v63 = v16;
  v17 = sub_22E3C187C((uint64_t)&v69, (unint64_t)&v58, 1);
  v18 = (char *)v69 + 152 * v70;
  v19 = *(_OWORD *)(v17 + 16);
  *(_OWORD *)v18 = *(_OWORD *)v17;
  *((_OWORD *)v18 + 1) = v19;
  v20 = *(_QWORD *)(v17 + 144);
  v21 = *(_OWORD *)(v17 + 128);
  v22 = *(_OWORD *)(v17 + 96);
  *((_OWORD *)v18 + 7) = *(_OWORD *)(v17 + 112);
  *((_OWORD *)v18 + 8) = v21;
  *((_QWORD *)v18 + 18) = v20;
  *((_OWORD *)v18 + 6) = v22;
  v23 = *(_OWORD *)(v17 + 80);
  v24 = *(_OWORD *)(v17 + 32);
  v25 = *(_OWORD *)(v17 + 48);
  *((_OWORD *)v18 + 4) = *(_OWORD *)(v17 + 64);
  *((_OWORD *)v18 + 5) = v23;
  *((_OWORD *)v18 + 2) = v24;
  *((_OWORD *)v18 + 3) = v25;
  LODWORD(v70) = v70 + 1;
  if ((*(_DWORD *)(v10 + 28) & 0x7F) == 0x39)
    (*(void (**)(_QWORD, unint64_t, _QWORD, _QWORD, void **))(**(_QWORD **)(*(_QWORD *)(a1 + 144)
                                                                                            + 224)
                                                                              + 544))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 224), a1, *(_QWORD *)(a1 + 1688), *(_QWORD *)(a1 + 1696), &v69);
  v26 = *(uint64_t **)(v10 + 120);
  v27 = *(_QWORD *)(*(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v27 && *(_BYTE *)(v27 + 16) == 26
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v27 = sub_22F10CF48(v27)) != 0)
  {
    v28 = *(_QWORD *)(v27 + 16);
    if ((v28 & 0x3FFFC000000000) != 0)
    {
      v29 = 8 * (unsigned __int16)(v28 >> 38);
      do
      {
        v30 = *v26++;
        sub_22E477344(a1, (uint64_t)&v69, v30, 0);
        v29 -= 8;
      }
      while (v29);
    }
  }
  v31 = *(_QWORD *)(*(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v31)
    v32 = *(_BYTE *)(v31 + 16) == 26;
  else
    v32 = 0;
  if (!v32)
    v31 = sub_22F10CF48(v31);
  if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 224) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 224), *(_QWORD *)(a1 + 1688), *(_QWORD *)(a1 + 1696)) & 1) == 0)
  {
    if ((*(unsigned int (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 224) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 224), *(_QWORD *)(a1 + 1688), *(_QWORD *)(a1 + 1696)))
    {
      v33 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 16816);
    }
    else
    {
      v33 = (unint64_t *)(v31 + 24);
    }
    v16 = *v33;
  }
  v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v37 = *(_QWORD *)(a1 + 1608);
  if (v36)
    v38 = (*(_DWORD *)(v36 + 16) & 0xFF800FF) == 86507531;
  else
    v38 = 0;
  if (!v38 && (*(_BYTE *)(v37 + 72) == 2 || sub_22E619D68(v16) == 2))
  {
    v39 = *(_QWORD *)(a1 + 1752);
    if ((v16 & 4) != 0)
      LOBYTE(v40) = 1;
    else
      v40 = (*(unsigned __int8 *)((v16 & 0xFFFFFFFFFFFFFFF0) + 8) >> 2) & 1;
    v43 = *(_OWORD *)(a1 + 1736);
    v42 = *(_QWORD *)(a1 + 1760);
    v41 = v40 | 4;
    v44 = *(_OWORD *)(a1 + 1768);
  }
  else
  {
    v39 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0uLL;
    v44 = 0uLL;
  }
  v56 = 0;
  v58 = (unint64_t)a3;
  v59 = *(_OWORD *)(a1 + 1688);
  LODWORD(v60) = 0;
  *((_QWORD *)&v60 + 1) = 0;
  v49 = v43;
  v64 = v43;
  v65 = v39;
  v66 = v42;
  v67 = v44;
  v68 = v41;
  sub_22E47A004(a1, v37, (uint64_t)&v58, (uint64_t)&v64, (uint64_t)&v69, &v56, 0, 0, (uint64_t)&v52, 0);
  if (a4 && (a4[3] || a4[4]))
  {
    sub_22E60D00C((uint64_t)&v58, (_QWORD *)a1, v16, (llvm::Constant **)v52, (uint64_t)a4);
    v52 = v58;
    v53 = v59;
    v54 = v60;
    LOBYTE(v55) = v61;
  }
  else if (v56 && *(_BYTE *)(v56 + 16) == 84)
  {
    *(_WORD *)(v56 + 18) = *(_WORD *)(v56 + 18) & 0xFFFC | 1;
  }
  v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v45 && (v46 = *(_DWORD *)(v45 + 16), v46 == 11))
  {
    if ((v46 & 0xFF80000) == 0x5280000 || v49 != 0)
      goto LABEL_61;
  }
  else if (v49)
  {
    goto LABEL_61;
  }
  v48 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 224);
  v50[0] = v52;
  v50[1] = v53;
  v50[2] = v54;
  v51 = v55;
  (*(void (**)(uint64_t, unint64_t, _OWORD *, unint64_t))(*(_QWORD *)v48 + 592))(v48, a1, v50, v16);
LABEL_61:
  *(_BYTE *)(a1 + 1882) = 0;
  *(_OWORD *)(a1 + 1592) = 0u;
  sub_22E619DE8(a1, 0);
  if (v78 != v80)
    free(v78);
  if (v75 != v77)
    free(v75);
  if (v72 != v74)
    free(v72);
  if (v69 != v71)
    free(v69);
}

void sub_22E60D934(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Type **a4, uint64_t a5, llvm::Value *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _BOOL8 v22;
  _QWORD *v23;
  uint64_t v24;
  llvm::Value *v25;
  uint64_t v26;
  void *Name;
  uint64_t v28;
  size_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33[3];
  int v34;
  _QWORD v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[4];
  __int16 v41;
  void *v42;
  uint64_t v43;
  _QWORD v44[9];

  v44[8] = *MEMORY[0x24BDAC8D0];
  v12 = *(_QWORD *)(a1 + 1624);
  if ((*(_WORD *)(v12 + 18) & 1) == 0)
  {
    v13 = *(_QWORD *)(v12 + 88);
LABEL_3:
    v14 = v13;
    goto LABEL_4;
  }
  llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 1624));
  v13 = *(_QWORD *)(v12 + 88);
  if ((*(_WORD *)(v12 + 18) & 1) == 0)
    goto LABEL_3;
  v32 = *(_QWORD *)(v12 + 88);
  llvm::Function::BuildLazyArguments((llvm::Function *)v12);
  v13 = v32;
  v14 = *(_QWORD *)(v12 + 88);
LABEL_4:
  v15 = v14 + 40 * *(_QWORD *)(v12 + 96);
  v42 = v44;
  v43 = 0x800000000;
  sub_22E611290((uint64_t)&v42, v13, a3, v15);
  v16 = *(_QWORD *)(a1 + 1608);
  if (*(_BYTE *)(v16 + 112))
  {
    *(_QWORD *)&v38 = *(_QWORD *)(a1 + 4192);
    v40[0] = 0;
    v17 = sub_22E3CED3C((uint64_t *)(a1 + 2904), &v38, v40);
    v18 = v40[0];
    if (!v17)
      v18 = *(_QWORD *)(a1 + 2904) + 56 * *(unsigned int *)(a1 + 2920);
    v20 = *(_QWORD *)(v18 + 8);
    v19 = *(_QWORD *)(v18 + 16);
    v21 = *(_OWORD *)(v18 + 40);
    v38 = *(_OWORD *)(v18 + 24);
    v39 = v21;
    if ((llvm::Type *)v19 != *a4)
    {
      v41 = 257;
      a4 = (llvm::Type **)sub_22E3C1740((uint64_t *)(a1 + 272), 49, (uint64_t)a4, v19, (uint64_t)v40);
    }
    v35[0] = v20;
    v35[1] = v19;
    v36 = v38;
    v37 = v39;
    sub_22E3BEDDC(a1 + 272, a4, (uint64_t)v35);
  }
  else
  {
    v22 = *(_BYTE *)(v16 + 72) == 2 && (*(_WORD *)(v16 + 73) & 0x20) == 0;
    v23 = v42;
    v24 = **((_QWORD **)v42 + v22);
    if ((llvm::Type *)v24 != *a4)
    {
      v41 = 257;
      a4 = (llvm::Type **)sub_22E3C1740((uint64_t *)(a1 + 272), 49, (uint64_t)a4, v24, (uint64_t)v40);
      v23 = v42;
    }
    v23[v22] = a4;
  }
  v41 = 257;
  v25 = sub_22E462B78((uint64_t *)(a1 + 272), a5, (uint64_t)a6, (uint64_t)v42, v43, (uint64_t)v40, 0);
  *((_WORD *)v25 + 9) = *((_WORD *)v25 + 9) & 0xFFFC | 2;
  v34 = 0;
  *(_QWORD *)&v38 = 0;
  v26 = *(_QWORD *)(a1 + 144);
  Name = (void *)llvm::Value::getName(a6);
  v28 = *(_QWORD *)(a1 + 1608);
  v33[0] = 0;
  v33[1] = a2;
  v33[2] = a3;
  sub_22E4706AC(v26, Name, v29, v28, v33, (uint64_t *)&v38, &v34, 1, 0);
  *((_QWORD *)v25 + 8) = v38;
  *((_WORD *)v25 + 9) = *((_WORD *)v25 + 9) & 0xF003 | (4 * v34);
  v30 = (uint64_t *)(a1 + 272);
  if (*(_BYTE *)(*(_QWORD *)v25 + 8) == 7)
    sub_22E3CF118(v30);
  else
    sub_22E4772D4(v30, (uint64_t)v25);
  v41 = 257;
  v31 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  sub_22E5ED9B4((_QWORD *)a1, v31, 0);
  *(_OWORD *)(a1 + 1592) = 0u;
  sub_22E619DE8(a1, 0);
  if (v42 != v44)
    free(v42);
}

uint64_t sub_22E60DC70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t *v19;
  char v20;
  _QWORD **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  llvm::GlobalValue *v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  llvm::Function *v39;
  llvm *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t Subprogram;
  uint64_t v44;
  int v45;
  unsigned int v46;
  char v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  BOOL v53;
  uint64_t v55;
  uint64_t v56;
  llvm::MDString *v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  llvm::MDString *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  llvm::MDNode *Impl;
  uint64_t v68;
  uint64_t v69;
  _QWORD *i;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *j;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t k;
  uint64_t v95;
  int v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t **v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t m;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  llvm::Constant ***v119;
  llvm::Constant **v120;
  llvm *v121;
  llvm::ValueHandleBase *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v127;
  llvm::MDString *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _BYTE v137[72];
  uint64_t v138[4];
  __int16 v139;
  _OWORD v140[3];
  _OWORD v141[3];
  llvm *v142[2];
  unsigned int v143;
  llvm *v144;
  uint64_t v145;
  unsigned int v146;
  char v147;
  void *v148;
  uint64_t v149;
  __int16 v150;
  uint64_t v151;
  uint64_t v152[6];
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  __int128 v157;
  _QWORD v158[34];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = (uint64_t **)v0;
  v158[32] = *MEMORY[0x24BDAC8D0];
  v10 = v7 & 0xFFFFFFFFFFFFFFF8;
  v156 = v158;
  v157 = xmmword_22F44E320;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 224) + 16);
  sub_22F242C48((uint64_t)v137, (uint64_t)&v156);
  if ((*(_DWORD *)(v10 + 28) & 0x7F) != 0x39 || v10 == 0)
    (*(void (**)(uint64_t, unint64_t, uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v11 + 80))(v11, v10, v4, 0, v137);
  else
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v11 + 88))(v11, v10, v8 & 7, v4, 0, v137);
  if (sub_22EF74EAC((*v9)[18], v8, v6, v156, v157))
  {
    *(_QWORD *)&v157 = 0;
    if ((*(_DWORD *)(v10 + 28) & 0x7F) == 0x39 && v10)
      (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v11 + 88))(v11, v10, v8 & 7, v4, 1, v137);
    else
      (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v11 + 80))(v11, v10, v4, 1, v137);
  }
  v13 = sub_22F24E4D4((_QWORD **)*v9 + 35, v8, v6);
  v14 = sub_22E62D908(*v9, v156, v157, v13, v8, v6, 1, 1, 1, 0, 0);
  v15 = (uint64_t)(*v9 + 35);
  v16 = *(_QWORD *)(*(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v16 || *(unsigned __int8 *)(v16 + 16) - 27 <= 0xFFFFFFFD)
    v16 = sub_22F10CF48(v16);
  v17 = sub_22E66D770(v15, v16);
  v18 = v17;
  v19 = *v9;
  if (*(_DWORD *)((*v9)[27] + 148) == 11 || !(_DWORD)v2)
    goto LABEL_20;
  v20 = v17 ^ 1;
  if ((*(_BYTE *)(v19[23] + 33) & 0x18) == 0)
    v20 = 1;
  if ((v20 & 1) == 0)
  {
LABEL_20:
    v135 = v4;
    v136 = v6;
    v21 = (_QWORD **)(v19 + 35);
    v22 = v2;
    if ((v18 & 1) != 0)
      v23 = sub_22E46D978(v21, v8, v136);
    else
      v23 = sub_22F24DD70((uint64_t)v21, v10);
    v134 = v23;
    v24 = sub_22E46F2EC((uint64_t)(*v9 + 35), v23);
    v25 = llvm::Value::stripPointerCasts((llvm::Value *)v14);
    v26 = (llvm::GlobalValue *)v25;
    if (*(_QWORD *)(v25 + 24) == v24)
    {
      v14 = v25;
    }
    else
    {
      v150 = 261;
      v149 = 0;
      v148 = 0;
      llvm::Value::setName();
      v150 = 261;
      v148 = v156;
      v149 = v157;
      v27 = (*v9)[25];
      v14 = llvm::User::operator new((llvm::User *)0x78);
      MEMORY[0x23489F6FC](v14, v24, 0, 0xFFFFFFFFLL, &v148, v27);
      v28 = (uint64_t)*v9;
      v29 = sub_22E462B18(v10);
      v30 = v10;
      if (v29)
        v30 = v10 | ((*(_WORD *)(sub_22EFC8868(v10) + 96) & 0x80) == 0);
      sub_22E62A548(v28, v30, 0, v134, (llvm::Value *)v14, 0);
      if (*((_QWORD *)v26 + 1))
      {
        llvm::ConstantExpr::getBitCast();
        llvm::Value::replaceAllUsesWith();
      }
      llvm::GlobalValue::eraseFromParent(v26);
    }
    v31 = *(_DWORD *)((*v9)[27] + 148);
    v32 = v22;
    if (v31 < 0xB)
      v33 = v22;
    else
      v33 = 0;
    if ((llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v14) & 1) == 0)
    {
      if (v31 > 0xA)
        v47 = 1;
      else
        v47 = v33;
      v34 = v135;
      if ((v47 & 1) != 0)
        goto LABEL_71;
LABEL_60:
      v48 = (uint64_t)*v9;
      v49 = sub_22E629EF0(v48, v8);
      v50 = *(_DWORD *)(v14 + 32);
      if ((v49 - 7) < 2)
        v50 &= 0xFFFFFFCF;
      v51 = v50 & 0xFFFFFFF0 | v49 & 0xF;
      *(_DWORD *)(v14 + 32) = v51;
      if ((v49 & 0xFu) - 7 >= 2)
      {
        if ((v50 & 0x30) == 0 || (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v14) & 1) != 0)
          goto LABEL_64;
        v51 = *(_DWORD *)(v14 + 32);
      }
      *(_DWORD *)(v14 + 32) = v51 | 0x4000;
LABEL_64:
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, BOOL))(**(_QWORD **)(v48 + 224) + 568))(*(_QWORD *)(v48 + 224), v14, v32, v8, v136, *(_OWORD *)(v34 + 24) != 0);
      sub_22F29961C(v48, (unsigned int *)v14, v8);
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v48 + 224) + 560))(*(_QWORD *)(v48 + 224)) & 1) == 0)
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 32) & 0xFFFFBCFF | 0x4000;
      v52 = *(_DWORD *)(*(_QWORD *)(v48 + 216) + 76);
      v53 = (v52 - 8) < 2 || v52 == 5;
      if (!v53 && (*(_DWORD *)(v14 + 32) & 0xFu) <= 0xA && ((1 << (*(_DWORD *)(v14 + 32) & 0xF)) & 0x63C) != 0)
      {
        llvm::Value::getName((llvm::Value *)v14);
        llvm::Module::getOrInsertComdat();
        llvm::GlobalObject::setComdat();
      }
      goto LABEL_71;
    }
    v34 = v135;
    if ((v18 & 1) != 0)
    {
      sub_22E62A5F4(*v9, v10, (llvm::Function *)v14);
      if (*(_DWORD *)(*(_QWORD *)(v14 + 24) + 8) >= 0x100u)
      {
        if (*(_OWORD *)(v135 + 24) != 0
          || (v35 = *(_DWORD *)((*v9)[27] + 56), v35 > 0x2A)
          || ((1 << v35) & 0x60000000008) == 0)
        {
          if ((v33 & 1) != 0)
            goto LABEL_71;
          sub_22E618EBC((uint64_t)&v148, (uint64_t)*v9, 0);
          v36 = *(_QWORD *)(*(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFF0);
          if (!v36 || *(_BYTE *)(v36 + 16) != 26)
            v36 = sub_22F10CF48(v36);
          v37 = *(_QWORD *)(v36 + 24);
          v38 = sub_22E46F2EC(v151 + 280, v134);
          v39 = (llvm::Function *)sub_22E6336F0(v151, v8, v136, v38, 1, 0, 0);
          if ((sub_22EFBF86C(v10, (unint64_t *)v142, 0) & 1) != 0)
          {
            v132 = v37;
            v133 = v32;
            v143 = 128;
            v40 = (llvm *)MEMORY[0x23489D23C](0x2000, 8);
            v41 = 0;
            v142[0] = v40;
            v142[1] = 0;
            do
            {
              v42 = (_QWORD *)((char *)v40 + v41);
              v42[2] = 0;
              v42[3] = -4096;
              *v42 = &unk_24FA66978;
              v42[1] = 2;
              v41 += 64;
              v42[4] = 0;
            }
            while (v41 != 0x2000);
            LOBYTE(v144) = 0;
            v147 = 0;
            Subprogram = llvm::Function::getSubprogram(v39);
            if (Subprogram)
            {
              v55 = Subprogram;
              v56 = *(unsigned int *)(Subprogram + 8);
              v57 = *(llvm::MDString **)(Subprogram - 8 * v56 + 16);
              if (v57)
              {
                llvm::MDString::getString(v57);
                v58 = v62;
                v56 = *(unsigned int *)(v55 + 8);
              }
              else
              {
                v58 = 0;
              }
              v63 = *(llvm::MDString **)(v55 - 8 * v56 + 24);
              if (v63)
              {
                llvm::MDString::getString(v63);
                v64 = v65;
                LODWORD(v56) = *(_DWORD *)(v55 + 8);
              }
              else
              {
                v64 = 0;
              }
              if (v56 > 9)
              {
                if (v56 >= 0xC)
                {
                  if (v56 >= 0xD
                    && (v128 = *(llvm::MDString **)(v55 - 8 * v56 + 96)) != 0)
                  {
                    v130 = v64;
                    llvm::MDString::getString(v128);
                    v64 = v130;
                    v131 = v129;
                  }
                  else
                  {
                    v131 = 0;
                  }
                }
                else
                {
                  v131 = 0;
                }
              }
              else
              {
                v131 = 0;
              }
              if (v58)
              {
                v66 = v64;
                llvm::MDString::get();
                v64 = v66;
              }
              if (v64)
                llvm::MDString::get();
              if (v131)
                llvm::MDString::get();
              Impl = (llvm::MDNode *)llvm::DISubprogram::getImpl();
              v68 = llvm::MDNode::replaceWithDistinctImpl(Impl);
              v144 = 0;
              v145 = 0;
              v146 = 0;
              v147 = 1;
              sub_22E6105A4((uint64_t)&v144, 0);
              v138[0] = 0;
              sub_22E610528((uint64_t)v144, v146, v55, v138);
              v69 = v138[0];
              LODWORD(v145) = v145 + 1;
              if (*(_QWORD *)v138[0] != -4096)
                --HIDWORD(v145);
              *(_QWORD *)v138[0] = v55;
              *(_QWORD *)(v69 + 8) = 0;
              sub_22E4911C0((_QWORD *)(v69 + 8), v68);
              for (i = (_QWORD *)*((_QWORD *)v39 + 10); i != (_QWORD *)((char *)v39 + 72); i = (_QWORD *)i[1])
              {
                v71 = i - 3;
                if (!i)
                  v71 = 0;
                v72 = v71 + 5;
                for (j = (_QWORD *)v71[6]; j != v72; j = (_QWORD *)j[1])
                {
                  if (j)
                    v74 = (uint64_t)(j - 3);
                  else
                    v74 = 0;
                  v75 = sub_22E607BD8(v74);
                  if (j)
                  {
                    if (v75)
                    {
                      v76 = *(_QWORD *)(*(_QWORD *)(v74 - 32 * (*(_DWORD *)(v74 + 20) & 0x7FFFFFF) + 32) + 24);
                      if ((*(_BYTE *)(v76 + 1) & 0x7F) == 2 || *(_DWORD *)(v76 + 12))
                        llvm::MDNode::resolve((llvm::MDNode *)v76);
                    }
                  }
                }
              }
            }
            v44 = llvm::CloneFunction();
            llvm::Value::replaceAllUsesWith();
            llvm::Value::takeName();
            llvm::Function::eraseFromParent((llvm::Function *)v14);
            v155 = v44;
            if ((*(_WORD *)(v44 + 18) & 1) != 0)
              llvm::Function::BuildLazyArguments((llvm::Function *)v44);
            v45 = *(unsigned __int8 *)(v134 + 72);
            if (v45 == 2)
            {
              v46 = 1;
            }
            else if (v45 == 8)
            {
              v46 = (*(unsigned __int16 *)(v134 + 73) >> 1) & 1;
            }
            else
            {
              v46 = 0;
            }
            v34 = v135;
            v59 = v10 + 72;
            v60 = *(_WORD *)(v10 + 80) & 0x7F;
            v61 = -40;
            if (v60 > 0x46)
            {
              if (v60 == 83)
                goto LABEL_127;
              if (v60 == 71)
              {
                v61 = -56;
                goto LABEL_127;
              }
              if (v60 != 81)
              {
LABEL_122:
                v77 = v60 - 52;
                v78 = v60 - 33 >= 5;
                v79 = -48;
                if (!v78)
                  v79 = -64;
                if (v77 >= 6)
                  v61 = v79;
                else
                  v61 = -72;
              }
            }
            else
            {
              if (v60 > 0x18)
                goto LABEL_121;
              if (v60 == 16)
              {
LABEL_82:
                v61 = -48;
                goto LABEL_127;
              }
              if (((1 << v60) & 0x1066) == 0)
              {
                if (v60 == 24)
                  goto LABEL_82;
LABEL_121:
                if (v60 == 70)
                {
                  v61 = -64;
                  goto LABEL_127;
                }
                goto LABEL_122;
              }
            }
LABEL_127:
            v80 = *(_QWORD *)(v59 + v61 + 16);
            v81 = (_QWORD *)(v80 & 0xFFFFFFFFFFFFFFF8);
            if ((v80 & 4) != 0)
              v81 = (_QWORD *)*v81;
            v82 = *(_QWORD *)(v44 + 88) + 40 * v46;
            if (v81)
              v83 = (uint64_t)(v81 - 8);
            else
              v83 = 0;
            v84 = sub_22EF6477C(*(_QWORD *)(v151 + 144), v83);
            v85 = *(_WORD *)(v10 + 80) & 0x7F;
            v86 = -40;
            if (v85 > 0x46)
            {
              switch(v85)
              {
                case 'S':
                  goto LABEL_147;
                case 'G':
                  v86 = -56;
                  goto LABEL_147;
                case 'Q':
LABEL_147:
                  v87 = *(_QWORD *)(v59 + v86 + 16);
                  v88 = (_QWORD *)(v87 & 0xFFFFFFFFFFFFFFF8);
                  if ((v87 & 4) != 0)
                    v88 = (_QWORD *)*v88;
                  if (v88)
                    v89 = (unint64_t)(v88 - 8);
                  else
                    v89 = 0;
                  v90 = sub_22E47FE60(v151, v89);
                  sub_22E3D2FA0((uint64_t)&v148, v82, v84, v90, 0, 0, 0, v141);
                  v91 = *(_QWORD *)(v44 + 80);
                  v92 = v91 - 24;
                  if (!v91)
                    v92 = 0;
                  v93 = v92 + 40;
                  for (k = *(_QWORD *)(v92 + 48); k != v93; k = *(_QWORD *)(k + 8))
                  {
                    v95 = k - 24;
                    if (!k)
                      v95 = 0;
                    if (*(_BYTE *)(v95 + 16) == 61)
                    {
                      v96 = *(_DWORD *)(v95 + 20);
                      v97 = (v96 & 0x40000000) != 0 ? *(_QWORD **)(v95 - 8) : (_QWORD *)(v95 - 32 * (v96 & 0x7FFFFFF));
                      if (*v97 == v82)
                      {
                        v93 = k;
                        break;
                      }
                    }
                  }
                  v98 = 0;
                  if (v93)
                    v99 = v93 - 24;
                  else
                    v99 = 0;
                  v153 = *(_QWORD *)(v99 + 40);
                  v154 = v99 + 24;
                  v138[0] = *(_QWORD *)(v99 + 48);
                  if (v138[0])
                  {
                    llvm::MetadataTracking::track();
                    v98 = v138[0];
                  }
                  sub_22E3CF21C((uint64_t)v152, 0, v98);
                  if (v138[0])
                    llvm::MetadataTracking::untrack();
                  v100 = sub_22F10AEAC(*(_QWORD *)(v135 + 48));
                  v101 = *(_QWORD *)(v151 + 224);
                  v140[0] = v141[0];
                  v140[1] = v141[1];
                  v140[2] = v141[2];
                  v102 = (*(uint64_t (**)(uint64_t, void **, _OWORD *, uint64_t, uint64_t))(*(_QWORD *)v101
                                                                                                 + 576))(v101, &v148, v140, v100, v135);
                  v103 = *(_DWORD *)(v99 + 20);
                  if ((v103 & 0x40000000) != 0)
                    v104 = *(uint64_t ***)(v99 - 8);
                  else
                    v104 = (uint64_t **)(v99 - 32 * (v103 & 0x7FFFFFF));
                  v105 = **v104;
                  v139 = 257;
                  v106 = sub_22E3C1740(v152, 49, v102, v105, (uint64_t)v138);
                  v107 = *(_DWORD *)(v99 + 20);
                  if ((v107 & 0x40000000) != 0)
                    v108 = *(_QWORD *)(v99 - 8);
                  else
                    v108 = v99 - 32 * (v107 & 0x7FFFFFF);
                  if (*(_QWORD *)v108)
                  {
                    **(_QWORD **)(v108 + 16) = *(_QWORD *)(v108 + 8);
                    v109 = *(_QWORD *)(v108 + 8);
                    if (v109)
                      *(_QWORD *)(v109 + 16) = *(_QWORD *)(v108 + 16);
                  }
                  *(_QWORD *)v108 = v106;
                  if (v106)
                  {
                    v112 = *(_QWORD *)(v106 + 8);
                    v110 = (_QWORD *)(v106 + 8);
                    v111 = v112;
                    *(_QWORD *)(v108 + 8) = v112;
                    if (v112)
                      *(_QWORD *)(v111 + 16) = v108 + 8;
                    *(_QWORD *)(v108 + 16) = v110;
                    *v110 = v108;
                  }
                  if (*(_OWORD *)(v135 + 24) != 0)
                  {
                    for (m = *(_QWORD *)(v44 + 80); m != v44 + 72; m = *(_QWORD *)(m + 8))
                    {
                      if (m)
                        v114 = m - 24;
                      else
                        v114 = 0;
                      v115 = *(_QWORD *)(v114 + 40);
                      if (v115 == v114 + 40)
                      {
                        v117 = 0;
                      }
                      else
                      {
                        if (v115)
                          v116 = v115 - 24;
                        else
                          v116 = 0;
                        if (*(unsigned __int8 *)(v116 + 16) - 29 >= 0xB)
                          v117 = 0;
                        else
                          v117 = v116;
                      }
                      if (*(_BYTE *)(v117 + 16) == 29)
                      {
                        v118 = *(_DWORD *)(v117 + 20);
                        if ((v118 & 0x40000000) != 0)
                          v119 = *(llvm::Constant ****)(v117 - 8);
                        else
                          v119 = (llvm::Constant ***)(v117 - 32 * (v118 & 0x7FFFFFF));
                        v120 = *v119;
                        llvm::Instruction::eraseFromParent((llvm::Instruction *)v117);
                        v153 = v114;
                        v154 = v114 + 40;
                        sub_22E60D00C((uint64_t)v138, &v148, v132, v120, v135);
                        sub_22E4772D4(v152, v138[0]);
                        break;
                      }
                    }
                  }
                  if (v147)
                  {
                    sub_22E5E0E84((uint64_t)&v144);
                    llvm::deallocate_buffer(v144, (void *)(16 * v146));
                    v147 = 0;
                  }
                  v121 = v142[0];
                  v32 = v133;
                  if (v143)
                  {
                    v122 = (llvm *)((char *)v142[0] + 40);
                    v123 = (unint64_t)v143 << 6;
                    do
                    {
                      v124 = *((_QWORD *)v122 - 2);
                      if ((v124 | 0x1000) != 0xFFFFFFFFFFFFF000)
                      {
                        v125 = *((_QWORD *)v122 + 2);
                        if (v125)
                        {
                          if (v125 != -8192 && v125 != -4096)
                          {
                            llvm::ValueHandleBase::RemoveFromUseList(v122);
                            v124 = *((_QWORD *)v122 - 2);
                          }
                        }
                      }
                      if (v124 != -4096 && v124 != -8192 && v124 != 0)
                        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)((char *)v122 - 32));
                      v122 = (llvm::ValueHandleBase *)((char *)v122 + 64);
                      v123 -= 64;
                    }
                    while (v123);
                    v121 = v142[0];
                    v127 = (void *)((unint64_t)v143 << 6);
                  }
                  else
                  {
                    v127 = 0;
                  }
                  llvm::deallocate_buffer(v121, v127);
                  v14 = v44;
                  goto LABEL_59;
              }
            }
            else
            {
              if (v85 <= 0x18)
              {
                if (v85 == 16)
                {
LABEL_135:
                  v86 = -48;
                  goto LABEL_147;
                }
                if (((1 << v85) & 0x1066) != 0)
                  goto LABEL_147;
                if (v85 == 24)
                  goto LABEL_135;
              }
              if (v85 == 70)
              {
LABEL_145:
                v86 = -64;
                goto LABEL_147;
              }
            }
            if (v85 - 52 >= 6)
            {
              if (v85 - 33 >= 5)
                goto LABEL_135;
              goto LABEL_145;
            }
            v86 = -72;
            goto LABEL_147;
          }
          sub_22E6285D0(v151, v10, "return-adjusting thunk with variadic arguments");
LABEL_59:
          sub_22E619434((uint64_t)&v148);
          goto LABEL_60;
        }
      }
    }
    else
    {
      llvm::Function::addFnAttr();
      sub_22E62A5F4(*v9, v10, (llvm::Function *)v14);
    }
    sub_22E618EBC((uint64_t)&v148, (uint64_t)*v9, 0);
    sub_22F2959D0((unint64_t)&v148, (uint64_t *)v14, v134, v8, v136, (_QWORD *)v135, v18 ^ 1);
    goto LABEL_59;
  }
LABEL_71:
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v137);
  if (v156 != v158)
    free(v156);
  return v14;
}

uint64_t sub_22E60ECA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF8) + 32))(a2 & 0xFFFFFFFFFFFFFFF8);
  if ((a2 & 7) != 2 || (*(_DWORD *)(result + 28) & 0x7F) != 0x39)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2, a3);
    if (result)
    {
      v7 = *(unsigned int *)(result + 8);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)result;
        v9 = 56 * v7;
        do
        {
          result = sub_22E60DC70();
          v8 += 56;
          v9 -= 56;
        }
        while (v9);
      }
    }
  }
  return result;
}

uint64_t sub_22E60ED54(uint64_t a1, uint64_t *a2, llvm::Constant *this)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  llvm::DSOLocalEquivalent *v10;
  llvm::GlobalValue *v11;
  unint64_t v12;
  const void *Name;
  size_t v14;
  size_t v15;
  _BYTE *v16;
  llvm::GlobalValue *v17;
  uint64_t v18;
  int v19;
  const void *v20;
  _BYTE v21[16];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (!llvm::Constant::isNullValue(this))
  {
    v10 = (llvm::DSOLocalEquivalent *)llvm::Value::stripPointerCastsAndAliases(this);
    if (v10 && !*((_BYTE *)v10 + 16))
    {
      llvm::DSOLocalEquivalent::get(v10, v11);
      return sub_22F295ADC(a2, *(_QWORD *)(*(_QWORD *)a1 + 24));
    }
    Name = (const void *)llvm::Value::getName(v10);
    v14 = v12;
    if (v12 >= 0x11)
    {
      v20 = Name;
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      Name = v20;
      if (!v14)
        goto LABEL_11;
    }
    else if (!v12)
    {
LABEL_11:
      v15 = v14;
      if (v14 + 11 > 0x10)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v15 = v14;
      }
      v16 = &v21[v15];
      *(_QWORD *)v16 = *(_QWORD *)".rtti_proxy";
      *(_DWORD *)(v16 + 7) = 2037935986;
      if (!llvm::Module::getGlobalVariable())
      {
        v17 = (llvm::GlobalValue *)llvm::User::operator new((llvm::User *)0x58);
        v18 = llvm::GlobalVariable::GlobalVariable();
        v19 = *(_DWORD *)(v18 + 32);
        *(_DWORD *)(v18 + 32) = v19 & 0xFFFFBF3F | 0x4080;
        if ((v19 & 0xFu) - 7 >= 2)
        {
          *((_DWORD *)v17 + 8) = v19 & 0xFFFFBF0F | 0x4090;
          if ((llvm::GlobalValue::hasExternalWeakLinkage(v17) & 1) == 0)
            *((_DWORD *)v17 + 8) |= 0x4000u;
          llvm::Module::getOrInsertComdat();
          llvm::GlobalObject::setComdat();
        }
      }
      return sub_22F295ADC(a2, *(_QWORD *)(*(_QWORD *)a1 + 24));
    }
    memcpy(v21, Name, v14);
    goto LABEL_11;
  }
  result = llvm::ConstantInt::get();
  v7 = result;
  v8 = *a2;
  v9 = *(_DWORD *)(v8 + 16);
  if (v9 >= *(_DWORD *)(v8 + 20))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 16);
  return result;
}

void sub_22E60F030(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __asm { BR              X13 }
}

uint64_t sub_22E60F0C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  return a4(a1, v5, v4 >> 3);
}

llvm::Value *sub_22E60F0E8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  llvm::Type *v12;
  unint64_t v13;
  llvm::Constant *v14;
  llvm::PointerType *v15;
  size_t v16;
  llvm::PointerType *v17;
  size_t v18;
  llvm::Value *result;
  llvm::Value *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;

  v6 = sub_22E60F538(a1);
  v7 = v6;
  v9 = v8;
  v10 = *(_QWORD *)(*v2 + 152);
  v11 = (_BYTE *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((*(_BYTE *)(v10 + 68) & 0x20) != 0)
  {
    if ((*(_WORD *)(v10 + 96) & 0x80) != 0)
    {
      if (sub_22E466E5C(v6 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_4;
LABEL_20:
      result = (llvm::Value *)llvm::Constant::getNullValue(*(llvm::Constant **)(*v2 + 96), v12);
      v20 = result;
      goto LABEL_21;
    }
    if (!sub_22F295B40(v6 & 0xFFFFFFFFFFFFFFF8) && sub_22E466E5C((uint64_t)v11))
      goto LABEL_20;
  }
LABEL_4:
  if ((v11[82] & 8) != 0)
  {
    v14 = (llvm::Constant *)v2[8];
    if (!v14)
    {
      v15 = (llvm::PointerType *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v2 + 224) + 616))(*(_QWORD *)(*v2 + 224));
      v14 = (llvm::Constant *)sub_22E60F5B8(v2, v15, v16);
      v2[8] = (uint64_t)v14;
    }
  }
  else if ((*(_BYTE *)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v11 + 32))(v11) + 82) & 0x40) != 0)
  {
    v14 = (llvm::Constant *)v2[9];
    if (!v14)
    {
      v17 = (llvm::PointerType *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v2 + 224) + 624))(*(_QWORD *)(*v2 + 224));
      v14 = (llvm::Constant *)sub_22E60F5B8(v2, v17, v18);
      v2[9] = (uint64_t)v14;
    }
  }
  else
  {
    v13 = *v3;
    if (*(_QWORD *)(v4 + 40) > v13 && *(_QWORD *)(*(_QWORD *)(v4 + 32) + (v13 << 6)) == v5)
    {
      *v3 = v13 + 1;
      v14 = (llvm::Constant *)sub_22E60DC70();
    }
    else
    {
      v24 = sub_22F24E4D4((_QWORD **)(*v2 + 280), v7, v9);
      v14 = (llvm::Constant *)sub_22E6336F0(*v2, v7, v9, v24, 1, 0, 0);
      if ((*(_BYTE *)(*(_QWORD *)(*v2 + 184) + 1392) & 3) != 0)
        sub_22F122FA4(v2[1], v7);
    }
  }
  if (*(_DWORD *)(*(_QWORD *)(*v2 + 216) + 148) <= 0xAu && *(_DWORD *)(*(_QWORD *)(*v2 + 712) + 136) == 1)
    return (llvm::Value *)sub_22E60ED54((uint64_t)v2, v1, v14);
  result = (llvm::Value *)llvm::ConstantExpr::getBitCast();
  v20 = result;
  v21 = *(_QWORD *)(*v2 + 184);
  if ((*(_BYTE *)(v21 + 1392) & 3) != 0)
    return (llvm::Value *)sub_22F28A5C0((uint64_t)v1, result, (_DWORD *)(v21 + 1392));
LABEL_21:
  v22 = *v1;
  v23 = *(_DWORD *)(v22 + 16);
  if (v23 >= *(_DWORD *)(v22 + 20))
  {
    result = (llvm::Value *)llvm::SmallVectorBase<unsigned int>::grow_pod();
    v23 = *(_DWORD *)(v22 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v22 + 8) + 8 * v23) = v20;
  ++*(_DWORD *)(v22 + 16);
  return result;
}

uint64_t sub_22E60F448(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  result = llvm::ConstantInt::get();
  v4 = result;
  v5 = *a2;
  v6 = *(_DWORD *)(v5 + 16);
  if (v6 >= *(_DWORD *)(v5 + 20))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 16);
  return result;
}

uint64_t sub_22E60F4B8(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  llvm::ConstantInt::get();
  result = llvm::ConstantExpr::getIntToPtr();
  v4 = result;
  v5 = *a2;
  v6 = *(_DWORD *)(v5 + 16);
  if (v6 >= *(_DWORD *)(v5 + 20))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 16);
  return result;
}

uint64_t sub_22E60F538(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  int v3;

  v1 = *a1 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_DWORD *)(v1 + 28) & 0x7F) == 0x39)
    v2 = *a1 & 0xFFFFFFFFFFFFFFF8;
  else
    v2 = 0;
  v3 = *a1 & 7;
  if (v3 == 6)
    return v2;
  if (v3 == 5)
    return v2 | 1;
  if (sub_22E462B18(*a1 & 0xFFFFFFFFFFFFFFF8))
    v1 |= (*(_WORD *)(sub_22EFC8868(v1) + 96) & 0x80) == 0;
  return v1;
}

uint64_t sub_22E60F5B8(uint64_t *a1, llvm::PointerType *a2, size_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 216);
  if (*(_DWORD *)(v7 + 148) <= 0xAu && *(_DWORD *)(*(_QWORD *)(v6 + 712) + 136) == 1)
    return llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(v6 + 96), a2);
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 152) + 72);
  v9 = !(_DWORD)v8 || (v8 & 0x800000000) == 0;
  if (!v9 && (*(_DWORD *)(v7 + 56) & 0xFFFFFFFE) == 0x2C)
    return llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(v6 + 96), a2);
  v11 = llvm::FunctionType::get();
  sub_22E633A04(*a1, v11, (const char *)a2, a3, 0, 0, 0);
  if (*(_BYTE *)(v12 + 16))
    v13 = 1;
  else
    v13 = v12 == 0;
  if (!v13)
    *(_DWORD *)(v12 + 32) = *(_DWORD *)(v12 + 32) & 0xFFFFFF3F | 0x80;
  return llvm::ConstantExpr::getBitCast();
}

uint64_t sub_22E60F6A0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  llvm::ArrayType **v4;
  unint64_t v5;
  uint64_t v6;
  llvm::ArrayType *v7;
  llvm::Type **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  llvm::Type *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  v3 = *a1;
  if (*(_DWORD *)(*(_QWORD *)(*a1 + 216) + 148) <= 0xAu && *(_DWORD *)(*(_QWORD *)(v3 + 712) + 136) == 1)
    v4 = (llvm::ArrayType **)(v3 + 24);
  else
    v4 = (llvm::ArrayType **)(v3 + 96);
  v5 = a2[1];
  if (v5 <= 1)
    LODWORD(v5) = 1;
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *v4;
    v8 = (llvm::Type **)(a2 + 3);
    v9 = 8 * v5;
    v10 = 1;
    do
    {
      v11 = a2[1];
      if (v11)
      {
        v12 = (uint64_t *)(*a2 + v6);
        v15 = *v12;
        v13 = v12 + 1;
        v14 = v15;
        if (v10 == v11)
          v16 = a2 + 3;
        else
          v16 = v13;
        v17 = (llvm::Type *)(*v16 - v14);
      }
      else
      {
        v17 = *v8;
      }
      v18 = llvm::ArrayType::get(v7, v17);
      v19 = v21;
      if (v21 >= 4uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v19 = v21;
      }
      v22[v19] = v18;
      ++v21;
      v6 += 8;
      ++v10;
    }
    while (v9 != v6);
  }
  return llvm::StructType::get();
}

uint64_t sub_22E60F844(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD v18[3];
  _QWORD v19[4];
  int v20;

  v5 = result;
  v6 = *(_QWORD **)result;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)result + 216) + 148) <= 0xAu && *(_DWORD *)(v6[89] + 136) == 1)
    v7 = v6 + 3;
  else
    v7 = v6 + 12;
  v17 = *v7;
  v20 = 0;
  v8 = a3[1];
  if (v8 <= 1)
    LODWORD(v8) = 1;
  v9 = v8;
  if ((_DWORD)v8)
  {
    v10 = 0;
    v16 = a3 + 3;
    do
    {
      v18[0] = *(_QWORD *)a2;
      v18[1] = a2;
      v18[2] = *(unsigned int *)(v18[0] + 16);
      v19[0] = 0;
      *(_DWORD *)((char *)v19 + 7) = 0;
      *(_BYTE *)(a2 + 33) = 1;
      v19[2] = 0;
      v19[3] = v17;
      v11 = a3[1];
      if (v11)
      {
        v12 = *(_QWORD *)(*a3 + 8 * v10);
        v14 = v10 + 1 == v11;
        v15 = v16;
        if (!v14)
          v15 = (_QWORD *)(*a3 + 8 * (v10 + 1));
        v13 = *v15 - v12;
      }
      else
      {
        v12 = 0;
        v13 = *v16;
      }
      if (v12 < v13 + v12)
      {
        do
        {
          sub_22E60F030(v5, (uint64_t)v18, (uint64_t)a3, v12);
          LODWORD(v12) = v12 + 1;
          --v13;
        }
        while (v13);
      }
      result = sub_22F2758B8((uint64_t)v18, (uint64_t *)a2);
      ++v10;
    }
    while (v10 != v9);
  }
  return result;
}

llvm::Value *sub_22E60F9B8(uint64_t *a1, uint64_t a2, unint64_t *a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char *v16;
  llvm::Type *v17;
  llvm::DataLayout *DataLayout;
  llvm::Value *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  llvm::Type *v23;
  void **v24;
  uint64_t v25;
  uint64_t v27;
  void **v28[6];
  uint64_t v29;
  _BYTE v30[17];
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _BYTE v35[128];
  _QWORD v36[3];
  char v37;
  void *v38;
  __int128 v39;
  _BYTE v40[9];
  void *v41;
  __int128 v42;
  _QWORD v43[34];

  v43[32] = *MEMORY[0x24BDAC8D0];
  v11 = *(_QWORD *)(*a1 + 824);
  if (v11)
    sub_22E4947E0(v11, *a3);
  sub_22F40C1C4(a1[1], *a3, a3[1], a4, a2, (uint64_t *)&v31);
  v12 = v31;
  if (v31 + 6 != (_QWORD *)a6)
    sub_22E6113B4(a6, (uint64_t)(v31 + 6));
  v41 = v43;
  v42 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v30, (uint64_t)&v41);
  v13 = *(_QWORD *)(*(_QWORD *)(*a1 + 224) + 16);
  (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t, _BYTE *))(*(_QWORD *)v13 + 240))(v13, a2, a3[1], *a3, v30);
  v38 = v40;
  v39 = xmmword_22F44E320;
  if ((_QWORD)v42)
    sub_22E3B3B4C((uint64_t)&v38, (uint64_t)&v41);
  v14 = *(_DWORD *)(a1[1] + 136);
  if (v14 == 1 && llvm::Module::getNamedAlias())
  {
    v15 = v39;
    if (*((_QWORD *)&v39 + 1) < (unint64_t)(v39 + 6))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v15 = v39;
    }
    v16 = (char *)v38 + v15;
    *((_WORD *)v16 + 2) = 27745;
    *(_DWORD *)v16 = 1668246574;
    *(_QWORD *)&v39 = v39 + 6;
  }
  v17 = (llvm::Type *)sub_22E60F6A0(a1, v12);
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*a1 + 200));
  llvm::DataLayout::getABITypeAlignment(DataLayout, v17);
  v19 = sub_22E63402C(*a1, (uint64_t)v38, v39, (uint64_t)v17);
  *((_DWORD *)v19 + 8) = *((_DWORD *)v19 + 8) & 0xFFFFFF3F | 0x80;
  v20 = *a1;
  v21 = *a3;
  v22 = *(_QWORD *)(*a3 + 48);
  if (v22)
  {
    v23 = (llvm::Type *)(v22 & 0xFFFFFFFFFFFFFFF0);
  }
  else
  {
    v27 = *a1;
    v23 = (llvm::Type *)sub_22EF6462C(*(_QWORD *)(v20 + 144), v21);
    v20 = v27;
  }
  sub_22F29C578(v20, v23, 0);
  v32 = *a1;
  v33 = v35;
  v34 = 0x1000000000;
  memset(v36, 0, sizeof(v36));
  v28[5] = 0;
  v29 = 0;
  v28[0] = (void **)&v32;
  memset(&v28[1], 0, 27);
  v37 = 1;
  sub_22E60F844((uint64_t)a1, (uint64_t)v28, v12);
  v24 = v28[0];
  sub_22E670C54((uint64_t *)v28, v29);
  sub_22F29F5C8((uint64_t)v24);
  sub_22F29966C(*a1, (unsigned int *)v19, a2);
  sub_22F295BA0((llvm *)*a1, a2, (uint64_t)v19, (uint64_t)v12);
  if (v14 == 1 && (*((_BYTE *)v19 + 33) & 0x40) == 0)
    sub_22F295E54((uint64_t)a1, (uint64_t)v19, v41, v42);
  v28[0] = (void **)v36;
  sub_22E3CEB30(v28);
  if (v33 != v35)
    free(v33);
  if (v38 != v40)
    free(v38);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v30);
  if (v41 != v43)
    free(v41);
  v25 = sub_22F40BE28((uint64_t)v12);
  MEMORY[0x2348A0E9C](v25, 0x10F0C40DF88B1A7);
  return v19;
}

BOOL sub_22E60FD38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 155)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

void sub_22E60FD98(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;

  v2 = *(uint64_t **)(a1 + 1368);
  v3 = *(uint64_t **)(a1 + 1376);
  if (v2 != v3)
  {
    while (1)
    {
      v4 = *v2;
      if (!sub_22F296234((uint64_t *)(a1 + 704), *v2))
        goto LABEL_17;
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 184) + 33) & 0x18) != 0)
        break;
LABEL_25:
      if (++v2 == v3)
      {
        v2 = *(uint64_t **)(a1 + 1368);
        goto LABEL_27;
      }
    }
    if (!(*(unsigned int (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 224) + 240))(*(_QWORD *)(a1 + 224), v4))
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 184) + 33) & 0x18) != 0)
      {
        v5 = *(unint64_t **)(a1 + 1400);
        v6 = *(_QWORD *)(a1 + 1408);
        if ((unint64_t)v5 >= v6)
        {
          v8 = *(_QWORD **)(a1 + 1392);
          v9 = v5 - v8;
          v10 = v9 + 1;
          if ((unint64_t)(v9 + 1) >> 61)
            abort();
          v11 = v6 - (_QWORD)v8;
          if (v11 >> 2 > v10)
            v10 = v11 >> 2;
          if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
            v12 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v12 = v10;
          if (v12)
          {
            if (v12 >> 61)
              sub_22E3B3F8C();
            v13 = (char *)operator new(8 * v12);
          }
          else
          {
            v13 = 0;
          }
          v14 = (unint64_t *)&v13[8 * v9];
          *v14 = v4;
          v7 = v14 + 1;
          if (v5 != v8)
          {
            do
            {
              v15 = *--v5;
              *--v14 = v15;
            }
            while (v5 != v8);
            v5 = *(unint64_t **)(a1 + 1392);
          }
          *(_QWORD *)(a1 + 1392) = v14;
          *(_QWORD *)(a1 + 1400) = v7;
          *(_QWORD *)(a1 + 1408) = &v13[8 * v12];
          if (v5)
            operator delete(v5);
        }
        else
        {
          *v5 = v4;
          v7 = v5 + 1;
        }
        *(_QWORD *)(a1 + 1400) = v7;
      }
      goto LABEL_25;
    }
LABEL_17:
    sub_22F2961B8(a1 + 704, v4);
    goto LABEL_25;
  }
LABEL_27:
  *(_QWORD *)(a1 + 1376) = v2;
}

BOOL sub_22E60FF1C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _BOOL8 result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;

  if ((*(_WORD *)(*(_QWORD *)(a1 + 184) + 64) & 0x800) == 0)
    return 0;
  if (a2)
    v2 = a2 + 64;
  else
    v2 = 0;
  do
  {
    v3 = *(_WORD *)(v2 + 8) & 0x7F;
    v4 = -40;
    if (v3 > 0x46)
    {
      if (v3 != 83)
      {
        if (v3 == 71)
        {
          v5 = v2 - 56;
          v6 = -56;
          goto LABEL_26;
        }
        if (v3 != 81)
          goto LABEL_17;
      }
    }
    else
    {
      if (v3 > 0x18)
        goto LABEL_16;
      if (v3 == 16)
        goto LABEL_8;
      if (((1 << v3) & 0x1066) == 0)
      {
        if (v3 == 24)
        {
LABEL_8:
          v5 = v2 - 48;
LABEL_9:
          v6 = -48;
          goto LABEL_26;
        }
LABEL_16:
        if (v3 == 70)
        {
          v5 = v2 - 64;
          v6 = -64;
          goto LABEL_26;
        }
LABEL_17:
        if (v3 - 33 >= 5)
          v7 = -48;
        else
          v7 = -64;
        if (v3 - 52 >= 6)
          v4 = v7;
        else
          v4 = -72;
      }
    }
    v5 = v2 + v4;
    v6 = -40;
    if ((*(_WORD *)(v2 + 8) & 0x7Fu) > 0x46)
    {
      if (v3 == 81 || v3 == 83)
        goto LABEL_26;
    }
    else if (v3 <= 0x18)
    {
      if (((1 << v3) & 0x1066) != 0)
        goto LABEL_26;
      if (v3 == 24)
        goto LABEL_9;
    }
    v9 = v3 - 52;
    if (v3 - 33 >= 5)
      v10 = -48;
    else
      v10 = -64;
    if (v9 >= 6)
      v6 = v10;
    else
      v6 = -72;
LABEL_26:
    v8 = *(_QWORD *)(v2 + v6 + 16);
    v2 = v8 & 0xFFFFFFFFFFFFFFF8;
    if ((v8 & 4) != 0)
      v2 = *(_QWORD *)v2;
  }
  while ((*(_WORD *)(sub_22EFCBB30(v2) + 8) & 0x7F) != 0x53);
  if ((*(_DWORD *)(v5 + 28) & 0x7F) != 0x10)
    return 0;
  result = 0;
  v12 = *(_QWORD *)(v5 + 40);
  if ((v12 & 7) == 0)
  {
    v13 = v12 & 0xFFFFFFFFFFFFFFF8;
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 16);
      if (*(_DWORD *)v14 != 6)
      {
        if (*(_DWORD *)v14 == 3)
        {
          v15 = *(unsigned __int16 *)(v14 + 16);
          v16 = *(unsigned __int8 *)(v14 + 18);
          v17 = v15 == 29811;
          v18 = 100;
          return v17 && v16 == v18;
        }
        return 0;
      }
      v19 = *(_DWORD *)(v14 + 16);
      v16 = *(unsigned __int16 *)(v14 + 20);
      v17 = v19 == 1701082227;
      v18 = 29816;
      return v17 && v16 == v18;
    }
  }
  return result;
}

uint64_t sub_22E610138(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_22EFB9558(a2);
  if ((v4 & 7u) < 3)
    return 1;
  v5 = v4;
  if (sub_22E610230(a2) || sub_22E610290(a2))
    return 0;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 216) + 76) == 1)
  {
    if ((*(_BYTE *)(a2 + 29) & 1) == 0)
      goto LABEL_6;
    sub_22EFC8E88(a2);
    v8 = *((unsigned int *)v7 + 2);
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      v10 = *v7;
      while (*(_WORD *)(*(_QWORD *)v10 + 32) != 155)
      {
        v10 += 8;
        v9 -= 8;
        if (!v9)
          goto LABEL_6;
      }
    }
    else
    {
      v10 = *v7;
    }
    if (v10 == *v7 + 8 * v8)
    {
LABEL_6:
      if (!sub_22E49F808(a2))
        return !sub_22E60FF1C(a1, a2);
    }
    return 0;
  }
  if ((v5 & 0x18) != 0)
    return 0;
  return !sub_22E60FF1C(a1, a2);
}

BOOL sub_22E610230(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 194)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E610290(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 342)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22E6102F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v29;
  _BYTE v30[31];

  v29 = a2;
  sub_22F275184(a3, &v29, (uint64_t)v30);
  if (!v30[16])
    return 2;
  if ((sub_22EFB9558(v29) & 7u) < 3)
    v5 = 2;
  else
    v5 = sub_22E610138(a1, v29);
  v6 = sub_22E46A3A0(v29);
  if (v6 != v7)
  {
    v8 = v6;
    v9 = v7;
    do
    {
      v10 = *(uint64_t **)(v8 + 16);
      v11 = *(_QWORD *)(*v10 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v11 + 8) & 0xF) != 0)
        v11 = (unint64_t)sub_22F10D2BC(*v10);
      v12 = sub_22F10C2A4(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0));
      if (v12 && (*(_DWORD *)(v12 + 28) & 0x7Fu) - 35 >= 3)
        v12 = 0;
      if (sub_22E463414(v12))
      {
        v13 = *(_QWORD *)(*v10 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v13 + 8) & 0xF) != 0)
          v13 = (unint64_t)sub_22F10D2BC(*v10);
        v14 = sub_22F10C2A4(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0));
        if (v14)
        {
          if ((*(_DWORD *)(v14 + 28) & 0x7Fu) - 35 >= 3)
            v15 = 0;
          else
            v15 = v14;
        }
        else
        {
          v15 = 0;
        }
        v16 = sub_22E6102F0(a1, v15, a3);
        if (v16 >= (int)v5)
          v5 = v5;
        else
          v5 = v16;
      }
      v8 += 24;
    }
    while (v8 != v9);
  }
  v17 = sub_22E483108(v29);
  if (v17 != v18)
  {
    v19 = v17;
    v20 = v18;
    do
    {
      v21 = *(uint64_t **)(v19 + 16);
      v22 = *(_QWORD *)(*v21 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v22 + 8) & 0xF) != 0)
        v22 = (unint64_t)sub_22F10D2BC(*v21);
      v23 = sub_22F10C2A4(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0));
      if (v23 && (*(_DWORD *)(v23 + 28) & 0x7Fu) - 35 >= 3)
        v23 = 0;
      if (sub_22E463414(v23))
      {
        v24 = *(_QWORD *)(*v21 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v24 + 8) & 0xF) != 0)
          v24 = (unint64_t)sub_22F10D2BC(*v21);
        v25 = sub_22F10C2A4(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0));
        if (v25)
        {
          if ((*(_DWORD *)(v25 + 28) & 0x7Fu) - 35 >= 3)
            v26 = 0;
          else
            v26 = v25;
        }
        else
        {
          v26 = 0;
        }
        v27 = sub_22E6102F0(a1, v26, a3);
        if (v27 >= (int)v5)
          v5 = v5;
        else
          v5 = v27;
      }
      v19 += 24;
    }
    while (v19 != v20);
  }
  return v5;
}

uint64_t sub_22E610528(uint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(result + 16 * v5);
    v7 = *v6;
    if (*v6 != a3)
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(result + 16 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_14;
      }
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_14:
  *a4 = v6;
  return result;
}

_QWORD *sub_22E6105A4(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    v12 = (char *)(16 * v3);
    if ((_DWORD)v3)
    {
      v13 = (_QWORD *)((char *)v4 + 8);
      v14 = v12;
      do
      {
        v15 = *(v13 - 1);
        if ((v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v19 = 0;
          sub_22E610528(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v15, &v19);
          v16 = v19;
          *v19 = *(v13 - 1);
          v16[1] = *v13;
          if (*v13)
          {
            llvm::MetadataTracking::retrack();
            *v13 = 0;
          }
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v14 -= 16;
      }
      while (v14);
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, v12);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v17 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v17)
    {
      v18 = 16 * v17;
      do
      {
        *result = -4096;
        result += 2;
        v18 -= 16;
      }
      while (v18);
    }
  }
  return result;
}

uint64_t sub_22E6106FC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int32x2_t *v5;
  __int32 v6;
  __int32 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  int32x2_t *v16;

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  v14[0] = v2 & 6;
  v14[1] = 0;
  v3 = *(_QWORD *)(result + 24);
  v15 = v3;
  if (v3 != -8192 && v3 != -4096 && v3 != 0)
  {
    result = llvm::ValueHandleBase::AddToExistingUseList((llvm::ValueHandleBase *)v14, (llvm::ValueHandleBase **)(v2 & 0xFFFFFFFFFFFFFFF8));
    v3 = v15;
  }
  v5 = *(int32x2_t **)(v1 + 32);
  v16 = v5;
  v6 = v5[2].i32[0];
  if (v6)
  {
    v7 = v6 - 1;
    v8 = v7 & ((v3 >> 4) ^ (v3 >> 9));
    v9 = (_QWORD *)(*(_QWORD *)v5 + (v8 << 6));
    v10 = v9[3];
    if (v3 == v10)
    {
LABEL_12:
      v13 = v9[7];
      if (v13 && v13 != -8192 && v13 != -4096)
      {
        result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 + 5));
        v3 = v9[3];
      }
      if (v3 != -8192)
      {
        if (v3 != -4096 && v3)
          result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 + 1));
        v9[3] = -8192;
      }
      v9[4] = 0;
      v5[1] = vadd_s32(v5[1], (int32x2_t)0x1FFFFFFFFLL);
      v3 = v15;
    }
    else
    {
      v11 = 1;
      while (v10 != -4096)
      {
        v12 = v8 + v11++;
        v8 = v12 & v7;
        v9 = (_QWORD *)(*(_QWORD *)v5 + (v8 << 6));
        v10 = v9[3];
        if (v3 == v10)
          goto LABEL_12;
      }
    }
  }
  if (v3 != -8192 && v3 != -4096)
  {
    if (v3)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v14);
  }
  return result;
}

uint64_t sub_22E61085C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int32x2_t *v7;
  int32x2_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _BYTE v19[24];
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD v23[2];
  uint64_t v24;
  void *v25;
  _QWORD v26[2];
  uint64_t v27;
  int32x2_t *v28;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  v26[0] = v4 & 6;
  v26[1] = 0;
  v5 = *(_QWORD *)(result + 24);
  v27 = v5;
  if (v5 != -8192 && v5 != -4096 && v5 != 0)
    result = llvm::ValueHandleBase::AddToExistingUseList((llvm::ValueHandleBase *)v26, (llvm::ValueHandleBase **)(v4 & 0xFFFFFFFFFFFFFFF8));
  v7 = *(int32x2_t **)(v3 + 32);
  v25 = &unk_24FA66978;
  v28 = v7;
  v8 = *v7;
  v9 = v7[2].u32[0];
  if ((_DWORD)v9)
  {
    v10 = ((v27 >> 4) ^ (v27 >> 9)) & ((_DWORD)v9 - 1);
    v11 = (_QWORD *)(*(_QWORD *)&v8 + (v10 << 6));
    v12 = v11[3];
    if (v27 == v12)
      goto LABEL_14;
    v13 = 1;
    while (v12 != -4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v11 = (_QWORD *)(*(_QWORD *)&v8 + (v10 << 6));
      v12 = v11[3];
      if (v27 == v12)
        goto LABEL_14;
    }
  }
  v11 = (_QWORD *)(*(_QWORD *)&v8 + (v9 << 6));
LABEL_14:
  if ((_QWORD *)(*(_QWORD *)&v8 + (v9 << 6)) != v11)
  {
    v23[0] = 6;
    v23[1] = 0;
    v15 = v11[7];
    v24 = v15;
    if (v15 && v15 != -8192 && v15 != -4096)
    {
      llvm::ValueHandleBase::AddToExistingUseList((llvm::ValueHandleBase *)v23, (llvm::ValueHandleBase **)(v11[5] & 0xFFFFFFFFFFFFFFF8));
      v7 = v28;
      v15 = v11[7];
    }
    if (v15 && v15 != -8192 && v15 != -4096)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v11 + 5));
    v16 = v11[3];
    if (v16 != -8192)
    {
      if (v16 != -4096 && v16 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v11 + 1));
      v11[3] = -8192;
    }
    v11[4] = 0;
    v7[1] = vadd_s32(v7[1], (int32x2_t)0x1FFFFFFFFLL);
    v18 = (uint64_t)v28;
    v20 = a2;
    v21[0] = 6;
    v21[1] = 0;
    v22 = v24;
    if (v24 && v24 != -8192 && v24 != -4096)
      llvm::ValueHandleBase::AddToExistingUseList((llvm::ValueHandleBase *)v21, (llvm::ValueHandleBase **)(v23[0] & 0xFFFFFFFFFFFFFFF8));
    result = sub_22E610B2C(v18, &v20, (uint64_t)v19);
    if (v22 && v22 != -8192 && v22 != -4096)
      result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v21);
    if (v24 && v24 != -8192 && v24 != -4096)
      result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v23);
  }
  if (v27 != -8192 && v27 != -4096)
  {
    if (v27)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v26);
  }
  return result;
}

uint64_t sub_22E610A98(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 24);
    v5 = v3 - 1;
    v6 = ((v4 >> 4) ^ (v4 >> 9)) & (v3 - 1);
    v7 = *(_QWORD *)a1 + (v6 << 6);
    v8 = *(_QWORD *)(v7 + 24);
    if (v4 == v8)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v8 != -4096)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v8 == -8192;
        if (v11)
          v9 = v7;
        v12 = v6 + v10++;
        v6 = v12 & v5;
        v7 = *(_QWORD *)a1 + (v6 << 6);
        v8 = *(_QWORD *)(v7 + 24);
        if (v4 == v8)
          goto LABEL_11;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
  *a3 = v7;
  return result;
}

uint64_t sub_22E610B2C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  int v17;
  char v18;
  uint64_t v19;
  void *v20;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  uint64_t v28;

  v6 = *a2;
  v21[0] = 2;
  v21[1] = 0;
  v22 = v6;
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v21);
  v20 = &unk_24FA66978;
  v23 = a1;
  result = (uint64_t)sub_22E6111E0(&v24, &v20, a2 + 1);
  v9 = *(_DWORD *)(a1 + 16);
  if (!v9)
  {
    v19 = 0;
LABEL_21:
    result = (uint64_t)sub_22E610CE8(a1, v19, &v24, v27);
    v12 = result;
    v10 = *(_QWORD *)a1;
    v9 = *(_DWORD *)(a1 + 16);
    v18 = 1;
    goto LABEL_22;
  }
  v10 = *(_QWORD *)a1;
  v11 = ((v26 >> 4) ^ (v26 >> 9)) & (v9 - 1);
  v12 = *(_QWORD *)a1 + (v11 << 6);
  v13 = *(_QWORD *)(v12 + 24);
  if (v26 != v13)
  {
    v14 = 0;
    v15 = 1;
    while (v13 != -4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v13 == -8192;
      if (v16)
        v14 = v12;
      v17 = v11 + v15++;
      v11 = v17 & (v9 - 1);
      v12 = v10 + (v11 << 6);
      v13 = *(_QWORD *)(v12 + 24);
      if (v26 == v13)
        goto LABEL_17;
    }
    if (v14)
      v19 = v14;
    else
      v19 = v12;
    goto LABEL_21;
  }
LABEL_17:
  v18 = 0;
LABEL_22:
  if (v28 && v28 != -8192 && v28 != -4096)
    result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v27);
  if (v26 != -8192 && v26 != -4096 && v26)
    result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v25);
  if (v22 != -8192 && v22 != -4096 && v22)
    result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v21);
  *(_QWORD *)a3 = v12;
  *(_QWORD *)(a3 + 8) = v10 + ((unint64_t)v9 << 6);
  *(_BYTE *)(a3 + 16) = v18;
  return result;
}

_QWORD *sub_22E610CE8(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;

  v6 = (_QWORD *)sub_22E610DC0(a1, (uint64_t)a3, (uint64_t)a3, a2);
  v7 = v6[3];
  v8 = a3[3];
  if (v7 != v8)
  {
    v9 = v7 == -4096 || v7 == 0;
    if (!v9 && v7 != -8192)
    {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v6 + 1));
      v8 = a3[3];
    }
    v6[3] = v8;
    if (v8 != -4096 && v8 != -8192 && v8)
      llvm::ValueHandleBase::AddToExistingUseList((llvm::ValueHandleBase *)(v6 + 1), (llvm::ValueHandleBase **)(a3[1] & 0xFFFFFFFFFFFFFFF8));
  }
  v10 = a3[4];
  v6[5] = 6;
  v6[4] = v10;
  v11 = a4[2];
  v6[6] = 0;
  v6[7] = v11;
  if (v11 && v11 != -8192 && v11 != -4096)
    llvm::ValueHandleBase::AddToExistingUseList((llvm::ValueHandleBase *)(v6 + 5), (llvm::ValueHandleBase **)(*a4 & 0xFFFFFFFFFFFFFFF8));
  return v6;
}

uint64_t sub_22E610DC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t v18;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_22E610EFC(a1, 2 * v7);
    v9 = *(_DWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(_QWORD *)(a3 + 24);
      v11 = v9 - 1;
      v12 = ((v10 >> 4) ^ (v10 >> 9)) & v11;
      a4 = *(_QWORD *)a1 + (v12 << 6);
      v13 = *(_QWORD *)(a4 + 24);
      if (v10 != v13)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = a4;
          v17 = v12 + v15++;
          v12 = v17 & v11;
          a4 = *(_QWORD *)a1 + (v12 << 6);
          v13 = *(_QWORD *)(a4 + 24);
          if (v10 == v13)
            goto LABEL_4;
        }
        if (v14)
          a4 = v14;
      }
    }
    else
    {
      a4 = 0;
    }
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
    sub_22E610EFC(a1, v7);
    v18 = 0;
    sub_22E610A98(a1, a3, &v18);
    a4 = v18;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)(a4 + 24) != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_22E610EFC(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((unint64_t)v8 << 6, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E610FDC(a1, v4, (_QWORD *)v4 + 8 * v3);
    return llvm::deallocate_buffer(v4, (void *)(v3 << 6));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = v10 << 6;
      v12 = (_QWORD *)(result + 16);
      do
      {
        *v12 = 0;
        v12[1] = -4096;
        *(v12 - 2) = &unk_24FA66978;
        *(v12 - 1) = 2;
        v12[2] = 0;
        v12 += 8;
        v11 -= 64;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E610FDC(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  BOOL v21;
  llvm::ValueHandleBase *v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = v6 << 6;
    v8 = (_QWORD *)(*(_QWORD *)result + 16);
    do
    {
      *v8 = 0;
      v8[1] = -4096;
      *(v8 - 2) = &unk_24FA66978;
      *(v8 - 1) = 2;
      v8[2] = 0;
      v8 += 8;
      v7 -= 64;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = v4[3];
      if ((v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v12 = *(_DWORD *)(v5 + 16) - 1;
        v13 = v12 & ((v9 >> 4) ^ (v9 >> 9));
        v14 = (_QWORD *)(*(_QWORD *)v5 + (v13 << 6));
        v15 = v14[3];
        if (v9 != v15)
        {
          v16 = 0;
          v17 = 1;
          while (v15 != -4096)
          {
            if (v16)
              v18 = 0;
            else
              v18 = v15 == -8192;
            if (v18)
              v16 = v14;
            v19 = v13 + v17++;
            v13 = v19 & v12;
            v14 = (_QWORD *)(*(_QWORD *)v5 + (v13 << 6));
            v15 = v14[3];
            if (v9 == v15)
              goto LABEL_36;
          }
          if (v16)
            v14 = v16;
          v20 = v14[3];
          if (v20 != v9)
          {
            v21 = v20 == -4096 || v20 == 0;
            if (!v21 && v20 != -8192)
            {
              result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v14 + 1));
              v9 = v4[3];
            }
            v14[3] = v9;
            if (v9 != -4096 && v9 != -8192 && v9)
              result = llvm::ValueHandleBase::AddToExistingUseList((llvm::ValueHandleBase *)(v14 + 1), (llvm::ValueHandleBase **)(v4[1] & 0xFFFFFFFFFFFFFFF8));
          }
        }
LABEL_36:
        v14[5] = 6;
        v22 = (llvm::ValueHandleBase *)(v14 + 5);
        *((_QWORD *)v22 - 1) = v4[4];
        v23 = v4[7];
        *((_QWORD *)v22 + 1) = 0;
        *((_QWORD *)v22 + 2) = v23;
        if (v23 && v23 != -8192 && v23 != -4096)
          result = llvm::ValueHandleBase::AddToExistingUseList(v22, (llvm::ValueHandleBase **)(v4[5] & 0xFFFFFFFFFFFFFFF8));
        ++*(_DWORD *)(v5 + 8);
        v24 = v4[7];
        if (v24 && v24 != -8192 && v24 != -4096)
          result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v4 + 5));
      }
      v10 = v4[3];
      if (v10 != -4096 && v10 != -8192 && v10 != 0)
        result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v4 + 1));
      v4 += 8;
    }
    while (v4 != a3);
  }
  return result;
}

_QWORD *sub_22E6111E0(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  llvm::ValueHandleBase *v6;
  uint64_t v7;
  uint64_t v9;

  a1[1] = a2[1] & 6;
  v6 = (llvm::ValueHandleBase *)(a1 + 1);
  v7 = a2[3];
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = v7;
  if (v7 != -8192 && v7 != -4096 && v7 != 0)
    llvm::ValueHandleBase::AddToExistingUseList(v6, (llvm::ValueHandleBase **)(a2[1] & 0xFFFFFFFFFFFFFFF8));
  *a1 = &unk_24FA66978;
  a1[4] = a2[4];
  a1[5] = 6;
  v9 = a3[2];
  a1[6] = 0;
  a1[7] = v9;
  if (v9 != -8192 && v9 != -4096 && v9)
    llvm::ValueHandleBase::AddToExistingUseList((llvm::ValueHandleBase *)(a1 + 5), (llvm::ValueHandleBase **)(*a3 & 0xFFFFFFFFFFFFFFF8));
  return a1;
}

uint64_t sub_22E611290(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = a2;
  v6 = result;
  v7 = 0xCCCCCCCCCCCCCCCDLL * ((a4 - a2) >> 3);
  v8 = *(unsigned int *)(result + 8);
  if (v7 + v8 > *(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(unsigned int *)(v6 + 8);
  }
  if (v5 != a4)
  {
    v9 = (_QWORD *)(*(_QWORD *)v6 + 8 * v8);
    do
    {
      *v9++ = v5;
      v5 += 40;
    }
    while (v5 != a4);
  }
  *(_DWORD *)(v6 + 8) = v8 + v7;
  return result;
}

uint64_t sub_22E61131C(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;

  v3 = (_QWORD *)result;
  v4 = a3 - a2;
  v5 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)(result + 16) >= (unint64_t)(v5 + a3 - a2) && a2 != a3)
    goto LABEL_3;
  if (*(_QWORD *)(result + 16) < (unint64_t)(v5 + a3 - a2))
  {
    v6 = a3;
    v7 = a2;
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod();
    a3 = v6;
    a2 = v7;
    v5 = v3[1];
  }
  if (a2 != a3)
  {
LABEL_3:
    result = (uint64_t)memcpy((void *)(*v3 + v5), a2, v4);
    v5 = v3[1];
  }
  v3[1] = v5 + v4;
  return result;
}

void *sub_22E6113B4(uint64_t a1, uint64_t a2)
{
  void *result;
  uint64_t v5;
  void *v6;

  result = (void *)llvm::deallocate_buffer(*(llvm **)a1, (void *)(24 * *(unsigned int *)(a1 + 16)));
  v5 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v5;
  if ((_DWORD)v5)
  {
    v6 = (void *)MEMORY[0x23489D23C](24 * v5, 8);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    return memcpy(v6, *(const void **)a2, 24 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

uint64_t sub_22E611434(uint64_t result, char *a2, uint64_t *a3, uint64_t a4, char a5)
{
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  int v61;
  char *v62;
  uint64_t v63;
  __int128 v64;

  v9 = (char *)result;
LABEL_2:
  v10 = a2 - 16;
  v59 = a2 - 48;
  v60 = a2 - 32;
  v11 = v9;
  v62 = a2;
  while (2)
  {
    v9 = v11;
    v12 = a2 - v11;
    v13 = (a2 - v11) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = sub_22E611C40(*a3, v10, v9);
        if ((_DWORD)result)
        {
          v27 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 2) = v27;
          LODWORD(v27) = *((_DWORD *)v9 + 2);
          *((_DWORD *)v9 + 2) = *((_DWORD *)a2 - 2);
          *((_DWORD *)a2 - 2) = v27;
        }
        return result;
      case 3uLL:
        return sub_22E611FC0(v9, (_DWORD *)v9 + 4, v10, a3);
      case 4uLL:
        return sub_22E6122BC(v9, (_DWORD *)v9 + 4, (_DWORD *)v9 + 8, v10, a3);
      case 5uLL:
        return sub_22E611EA8(v9, (_DWORD *)v9 + 4, (_DWORD *)v9 + 8, (_DWORD *)v9 + 12, v10, a3);
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
          {
            if (v9 != a2)
            {
              v28 = v9 + 16;
              if (v9 + 16 != a2)
              {
                v29 = 0;
                v30 = v9;
                do
                {
                  v31 = v30;
                  v30 = v28;
                  result = sub_22E611C40(*a3, v28, v31);
                  if ((_DWORD)result)
                  {
                    v64 = *(_OWORD *)v30;
                    v32 = v29;
                    while (1)
                    {
                      v33 = &v9[v32];
                      *((_QWORD *)v33 + 2) = *(_QWORD *)&v9[v32];
                      *((_DWORD *)v33 + 6) = *(_DWORD *)&v9[v32 + 8];
                      if (!v32)
                        break;
                      v32 -= 16;
                      result = sub_22E611C40(*a3, &v64, &v9[v32]);
                      if ((result & 1) == 0)
                      {
                        v34 = (uint64_t)&v9[v32 + 16];
                        goto LABEL_68;
                      }
                    }
                    v34 = (uint64_t)v9;
LABEL_68:
                    *(_QWORD *)v34 = v64;
                    *(_DWORD *)(v34 + 8) = DWORD2(v64);
                  }
                  v28 = v30 + 16;
                  v29 += 16;
                }
                while (v30 + 16 != a2);
              }
            }
          }
          else if (v9 != a2)
          {
            v55 = v9 + 16;
            if (v9 + 16 != a2)
            {
              v56 = v9 - 16;
              do
              {
                v57 = v9;
                v9 = v55;
                result = sub_22E611C40(*a3, v55, v57);
                if ((_DWORD)result)
                {
                  v64 = *(_OWORD *)v9;
                  v58 = v56;
                  do
                  {
                    *((_QWORD *)v58 + 4) = *((_QWORD *)v58 + 2);
                    *((_DWORD *)v58 + 10) = *((_DWORD *)v58 + 6);
                    result = sub_22E611C40(*a3, &v64, v58);
                    v58 -= 16;
                  }
                  while ((result & 1) != 0);
                  *((_QWORD *)v58 + 4) = v64;
                  *((_DWORD *)v58 + 10) = DWORD2(v64);
                }
                v55 = v9 + 16;
                v56 += 16;
              }
              while (v9 + 16 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v35 = (v13 - 2) >> 1;
            v36 = v35;
            do
            {
              v37 = v36;
              if (v35 >= v36)
              {
                v38 = (2 * v36) | 1;
                v39 = &v9[16 * v38];
                if (2 * v36 + 2 < (uint64_t)v13 && sub_22E611C40(*a3, &v9[16 * v38], (_DWORD *)v39 + 4))
                {
                  v39 += 16;
                  v38 = 2 * v37 + 2;
                }
                v40 = &v9[16 * v37];
                result = sub_22E611C40(*a3, v39, v40);
                if ((result & 1) == 0)
                {
                  v64 = *(_OWORD *)v40;
                  do
                  {
                    v41 = v39;
                    *(_QWORD *)v40 = *(_QWORD *)v39;
                    *((_DWORD *)v40 + 2) = *((_DWORD *)v39 + 2);
                    if (v35 < v38)
                      break;
                    v42 = (2 * v38) | 1;
                    v39 = &v9[16 * v42];
                    v43 = 2 * v38 + 2;
                    if (v43 < (uint64_t)v13 && sub_22E611C40(*a3, &v9[16 * v42], (_DWORD *)v39 + 4))
                    {
                      v39 += 16;
                      v42 = v43;
                    }
                    result = sub_22E611C40(*a3, v39, &v64);
                    v40 = v41;
                    v38 = v42;
                  }
                  while (!(_DWORD)result);
                  *(_QWORD *)v41 = v64;
                  *((_DWORD *)v41 + 2) = DWORD2(v64);
                }
              }
              v36 = v37 - 1;
            }
            while (v37);
            v44 = v62;
            do
            {
              v45 = 0;
              v63 = *(_QWORD *)v9;
              v61 = *((_DWORD *)v9 + 2);
              v46 = v9;
              do
              {
                v47 = &v46[16 * v45 + 16];
                v48 = (2 * v45) | 1;
                v49 = 2 * v45 + 2;
                if (v49 < (uint64_t)v13)
                {
                  result = sub_22E611C40(*a3, &v46[16 * v45 + 16], &v46[16 * v45 + 32]);
                  if ((_DWORD)result)
                  {
                    v47 += 16;
                    v48 = v49;
                  }
                }
                *(_QWORD *)v46 = *(_QWORD *)v47;
                *((_DWORD *)v46 + 2) = *((_DWORD *)v47 + 2);
                v46 = v47;
                v45 = v48;
              }
              while (v48 <= (uint64_t)((v13 - 2) >> 1));
              if (v47 == v44 - 16)
              {
                *(_QWORD *)v47 = v63;
                *((_DWORD *)v47 + 2) = v61;
              }
              else
              {
                *(_QWORD *)v47 = *((_QWORD *)v44 - 2);
                *((_DWORD *)v47 + 2) = *((_DWORD *)v44 - 2);
                *((_QWORD *)v44 - 2) = v63;
                *((_DWORD *)v44 - 2) = v61;
                v50 = v47 - v9 + 16;
                if (v50 >= 17)
                {
                  v51 = (((unint64_t)v50 >> 4) - 2) >> 1;
                  v52 = &v9[16 * v51];
                  result = sub_22E611C40(*a3, v52, v47);
                  if ((_DWORD)result)
                  {
                    v64 = *(_OWORD *)v47;
                    do
                    {
                      v53 = v52;
                      *(_QWORD *)v47 = *(_QWORD *)v52;
                      *((_DWORD *)v47 + 2) = *((_DWORD *)v52 + 2);
                      if (!v51)
                        break;
                      v51 = (v51 - 1) >> 1;
                      v52 = &v9[16 * v51];
                      result = sub_22E611C40(*a3, v52, &v64);
                      v47 = v53;
                    }
                    while ((result & 1) != 0);
                    *(_QWORD *)v53 = v64;
                    *((_DWORD *)v53 + 2) = DWORD2(v64);
                  }
                }
              }
              v44 -= 16;
            }
            while ((uint64_t)v13-- > 2);
          }
          return result;
        }
        v14 = v13 >> 1;
        v15 = &v9[16 * (v13 >> 1)];
        if ((unint64_t)v12 < 0x801)
        {
          sub_22E611FC0(&v9[16 * (v13 >> 1)], v9, v10, a3);
        }
        else
        {
          sub_22E611FC0(v9, &v9[16 * (v13 >> 1)], v10, a3);
          sub_22E611FC0((_DWORD *)v9 + 4, (_DWORD *)v15 - 4, v60, a3);
          sub_22E611FC0((_DWORD *)v9 + 8, &v9[16 * v14 + 16], v59, a3);
          sub_22E611FC0((_DWORD *)v15 - 4, &v9[16 * (v13 >> 1)], &v9[16 * v14 + 16], a3);
          v16 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *(_QWORD *)v15;
          *(_QWORD *)v15 = v16;
          LODWORD(v16) = *((_DWORD *)v9 + 2);
          *((_DWORD *)v9 + 2) = *((_DWORD *)v15 + 2);
          *((_DWORD *)v15 + 2) = v16;
        }
        --a4;
        if ((a5 & 1) == 0 && !sub_22E611C40(*a3, (_DWORD *)v9 - 4, v9))
        {
          v64 = *(_OWORD *)v9;
          result = sub_22E611C40(*a3, &v64, v10);
          if ((result & 1) != 0)
          {
            v11 = v9;
            do
            {
              v11 += 16;
              result = sub_22E611C40(*a3, &v64, v11);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v24 = v9 + 16;
            do
            {
              v11 = v24;
              if (v24 >= a2)
                break;
              result = sub_22E611C40(*a3, &v64, v24);
              v24 = v11 + 16;
            }
            while (!(_DWORD)result);
          }
          v25 = a2;
          if (v11 < a2)
          {
            v25 = a2;
            do
            {
              v25 -= 16;
              result = sub_22E611C40(*a3, &v64, v25);
            }
            while ((result & 1) != 0);
          }
          while (v11 < v25)
          {
            v26 = *(_QWORD *)v11;
            *(_QWORD *)v11 = *(_QWORD *)v25;
            *(_QWORD *)v25 = v26;
            LODWORD(v26) = *((_DWORD *)v11 + 2);
            *((_DWORD *)v11 + 2) = *((_DWORD *)v25 + 2);
            *((_DWORD *)v25 + 2) = v26;
            do
              v11 += 16;
            while (!sub_22E611C40(*a3, &v64, v11));
            do
            {
              v25 -= 16;
              result = sub_22E611C40(*a3, &v64, v25);
            }
            while ((result & 1) != 0);
          }
          if (v11 - 16 != v9)
          {
            *(_QWORD *)v9 = *((_QWORD *)v11 - 2);
            *((_DWORD *)v9 + 2) = *((_DWORD *)v11 - 2);
          }
          a5 = 0;
          *((_QWORD *)v11 - 2) = v64;
          *((_DWORD *)v11 - 2) = DWORD2(v64);
          continue;
        }
        v17 = 0;
        v64 = *(_OWORD *)v9;
        do
          v17 += 16;
        while (sub_22E611C40(*a3, &v9[v17], &v64));
        v18 = &v9[v17];
        v19 = v62;
        if (v17 == 16)
        {
          v19 = v62;
          do
          {
            if (v18 >= v19)
              break;
            v19 -= 16;
          }
          while (!sub_22E611C40(*a3, v19, &v64));
        }
        else
        {
          do
            v19 -= 16;
          while (!sub_22E611C40(*a3, v19, &v64));
        }
        v11 = &v9[v17];
        if (v18 < v19)
        {
          v20 = v19;
          do
          {
            v21 = *(_QWORD *)v11;
            *(_QWORD *)v11 = *(_QWORD *)v20;
            *(_QWORD *)v20 = v21;
            LODWORD(v21) = *((_DWORD *)v11 + 2);
            *((_DWORD *)v11 + 2) = *((_DWORD *)v20 + 2);
            *((_DWORD *)v20 + 2) = v21;
            do
              v11 += 16;
            while (sub_22E611C40(*a3, v11, &v64));
            do
              v20 -= 16;
            while (!sub_22E611C40(*a3, v20, &v64));
          }
          while (v11 < v20);
        }
        if (v11 - 16 != v9)
        {
          *(_QWORD *)v9 = *((_QWORD *)v11 - 2);
          *((_DWORD *)v9 + 2) = *((_DWORD *)v11 - 2);
        }
        *((_QWORD *)v11 - 2) = v64;
        *((_DWORD *)v11 - 2) = DWORD2(v64);
        v22 = v18 >= v19;
        a2 = v62;
        if (!v22)
        {
LABEL_31:
          result = sub_22E611434(v9, v11 - 16, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v23 = sub_22E6120E8(v9, v11 - 16, a3);
        result = sub_22E6120E8(v11, v62, a3);
        if (!(_DWORD)result)
        {
          if (v23)
            continue;
          goto LABEL_31;
        }
        a2 = v11 - 16;
        if (!v23)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_22E611C40(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  size_t v8;
  char v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  size_t v13;
  void **v14;
  size_t v15;
  int v16;
  BOOL v17;
  _BOOL8 v18;
  void **v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  int v28;
  void **p_p;
  void *__p;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  int v40;
  void **v41;
  void *v42;
  size_t v43;
  uint64_t v44;

  if (a2 == a3)
    return 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v34 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 1;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  v6 = MEMORY[0x24BED83D8] + 16;
  v33 = MEMORY[0x24BED83D8] + 16;
  v41 = &v42;
  llvm::raw_ostream::SetBufferAndMode();
  (*(void (**)(_QWORD, unint64_t, uint64_t *))(**(_QWORD **)(*(_QWORD *)(a1 + 224) + 16) + 184))(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 16), *(_QWORD *)(*(_QWORD *)a2 + 48) & 0xFFFFFFFFFFFFFFF0, &v33);
  if (v37 != v35)
    llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v33);
  __p = 0;
  v31 = 0;
  v32 = 0;
  v22 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 1;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  v21 = v6;
  p_p = &__p;
  llvm::raw_ostream::SetBufferAndMode();
  (*(void (**)(_QWORD, unint64_t, uint64_t *))(**(_QWORD **)(*(_QWORD *)(a1 + 224) + 16) + 184))(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 16), *(_QWORD *)(*(_QWORD *)a3 + 48) & 0xFFFFFFFFFFFFFFF0, &v21);
  if (v25 != v23)
    llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v21);
  if (v32 >= 0)
    v7 = (unsigned __int8 *)&__p;
  else
    v7 = (unsigned __int8 *)__p;
  if (v32 >= 0)
    v8 = HIBYTE(v32) & 0x7F;
  else
    v8 = v31;
  v9 = HIBYTE(v44);
  v10 = HIBYTE(v44) & 0x7F;
  v12 = v42;
  v11 = v43;
  if (v44 >= 0)
    v13 = HIBYTE(v44) & 0x7F;
  else
    v13 = v43;
  if (v44 >= 0)
    v14 = &v42;
  else
    v14 = (void **)v42;
  if (v8 >= v13)
    v15 = v13;
  else
    v15 = v8;
  v16 = memcmp(v14, v7, v15);
  v17 = v13 < v8;
  if (v16)
    v17 = v16 < 0;
  if (!v17)
  {
    if (v13 == v8)
    {
      if ((v9 & 0x80) == 0)
      {
        if ((_DWORD)v10)
        {
          v19 = &v42;
          while (*(unsigned __int8 *)v19 == *v7)
          {
            v19 = (void **)((char *)v19 + 1);
            ++v7;
            if (!--v10)
              goto LABEL_35;
          }
          goto LABEL_34;
        }
LABEL_35:
        v18 = a2[2] < a3[2];
        goto LABEL_36;
      }
      if (!memcmp(v12, v7, v11))
        goto LABEL_35;
    }
LABEL_34:
    v18 = 0;
    goto LABEL_36;
  }
  v18 = 1;
LABEL_36:
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v21);
  if (SHIBYTE(v32) < 0)
    operator delete(__p);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v33);
  if (SHIBYTE(v44) < 0)
    operator delete(v42);
  return v18;
}

BOOL sub_22E611EA8(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, uint64_t *a6)
{
  _BOOL8 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_22E6122BC(a1, a2, a3, a4, a6);
  result = sub_22E611C40(*a6, a5, a4);
  if (result)
  {
    v13 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v13;
    LODWORD(v13) = a4[2];
    a4[2] = a5[2];
    a5[2] = v13;
    result = sub_22E611C40(*a6, a4, a3);
    if (result)
    {
      v14 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v14;
      LODWORD(v14) = a3[2];
      a3[2] = a4[2];
      a4[2] = v14;
      result = sub_22E611C40(*a6, a3, a2);
      if (result)
      {
        v15 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v15;
        LODWORD(v15) = a2[2];
        a2[2] = a3[2];
        a3[2] = v15;
        result = sub_22E611C40(*a6, a2, a1);
        if (result)
        {
          v16 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v16;
          LODWORD(v16) = a1[2];
          a1[2] = a2[2];
          a2[2] = v16;
        }
      }
    }
  }
  return result;
}

BOOL sub_22E611FC0(_DWORD *a1, _DWORD *a2, _DWORD *a3, uint64_t *a4)
{
  BOOL v8;
  _BOOL8 result;
  uint64_t v10;
  int *v11;
  int *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  v8 = sub_22E611C40(*a4, a2, a1);
  result = sub_22E611C40(*a4, a3, a2);
  if (v8)
  {
    v10 = *(_QWORD *)a1;
    if (result)
    {
      *(_QWORD *)a1 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v10;
      v11 = a3 + 2;
      v12 = a1 + 2;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v10;
      v16 = a1[2];
      a1[2] = a2[2];
      a2[2] = v16;
      result = sub_22E611C40(*a4, a3, a2);
      if (!result)
        return result;
      v17 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v17;
      v11 = a3 + 2;
      v12 = a2 + 2;
    }
    v14 = v11;
    goto LABEL_10;
  }
  if (result)
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v13;
    v14 = a2 + 2;
    LODWORD(v13) = a2[2];
    a2[2] = a3[2];
    a3[2] = v13;
    result = sub_22E611C40(*a4, a2, a1);
    if (result)
    {
      v15 = *(_QWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v12 = a1 + 2;
      *(_QWORD *)a2 = v15;
LABEL_10:
      v18 = *v12;
      *v12 = *v14;
      *v14 = v18;
    }
  }
  return result;
}

BOOL sub_22E6120E8(char *a1, char *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 v16;

  v6 = (a2 - a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_22E611C40(*a3, (_DWORD *)a2 - 4, a1))
      {
        v8 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *((_QWORD *)a2 - 2);
        *((_QWORD *)a2 - 2) = v8;
        LODWORD(v8) = *((_DWORD *)a1 + 2);
        *((_DWORD *)a1 + 2) = *((_DWORD *)a2 - 2);
        *((_DWORD *)a2 - 2) = v8;
      }
      return 1;
    case 3:
      sub_22E611FC0(a1, (_DWORD *)a1 + 4, (_DWORD *)a2 - 4, a3);
      return 1;
    case 4:
      sub_22E6122BC(a1, (_DWORD *)a1 + 4, (_DWORD *)a1 + 8, (_DWORD *)a2 - 4, a3);
      return 1;
    case 5:
      sub_22E611EA8(a1, (_DWORD *)a1 + 4, (_DWORD *)a1 + 8, (_DWORD *)a1 + 12, (_DWORD *)a2 - 4, a3);
      return 1;
    default:
      v9 = a1 + 32;
      sub_22E611FC0(a1, (_DWORD *)a1 + 4, (_DWORD *)a1 + 8, a3);
      v10 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (sub_22E611C40(*a3, v10, v9))
    {
      v16 = *(_OWORD *)v10;
      v13 = v11;
      while (1)
      {
        v14 = &a1[v13];
        *((_QWORD *)v14 + 6) = *(_QWORD *)&a1[v13 + 32];
        *((_DWORD *)v14 + 14) = *(_DWORD *)&a1[v13 + 40];
        if (v13 == -32)
          break;
        v13 -= 16;
        if (!sub_22E611C40(*a3, &v16, (_DWORD *)v14 + 4))
        {
          v15 = (uint64_t)&a1[v13 + 48];
          goto LABEL_12;
        }
      }
      v15 = (uint64_t)a1;
LABEL_12:
      *(_QWORD *)v15 = v16;
      *(_DWORD *)(v15 + 8) = DWORD2(v16);
      if (++v12 == 8)
        return v10 + 16 == a2;
    }
    v9 = v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2)
      return 1;
  }
}

BOOL sub_22E6122BC(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t *a5)
{
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_22E611FC0(a1, a2, a3, a5);
  result = sub_22E611C40(*a5, a4, a3);
  if (result)
  {
    v11 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v11;
    LODWORD(v11) = a3[2];
    a3[2] = a4[2];
    a4[2] = v11;
    result = sub_22E611C40(*a5, a3, a2);
    if (result)
    {
      v12 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v12;
      LODWORD(v12) = a2[2];
      a2[2] = a3[2];
      a3[2] = v12;
      result = sub_22E611C40(*a5, a2, a1);
      if (result)
      {
        v13 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v13;
        LODWORD(v13) = a1[2];
        a1[2] = a2[2];
        a2[2] = v13;
      }
    }
  }
  return result;
}

void sub_22E61239C(llvm *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  llvm::Value *v7;
  uint64_t v8;
  const Function *v9;
  uint64_t j;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  llvm::Value *v28;
  uint64_t v29;
  const Function *v30;
  uint64_t m;
  uint64_t v32;
  char v33;
  _DWORD *v34;
  size_t v35;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  size_t v54;
  uint64_t v55;
  llvm::raw_ostream *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  void *v62;
  size_t v63;
  uint64_t v64;
  llvm::Value *v65;
  uint64_t v66;
  const Function *v67;
  uint64_t ii;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const void *v72;
  size_t v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 *v83;
  unsigned __int8 *v84;
  uint64_t v85;
  unsigned __int8 v86;
  uint64_t v87;
  unsigned __int8 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 *v94;
  _QWORD *v95;
  uint64_t v96;
  unsigned __int8 v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  size_t v105;
  void *p_p;
  size_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  size_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  void *v131;
  char v132;
  void *v133;
  size_t v134;
  size_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  size_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  unsigned __int8 *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  size_t v154;
  const void *v155;
  void **v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t Name;
  unint64_t v164;
  size_t v165;
  const void *v166;
  void **p_dst;
  unsigned __int8 *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int *v172;
  int *i;
  int v174;
  int v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  size_t v180;
  uint64_t v181;
  llvm::Value **v182;
  llvm::Value **v183;
  llvm::Value *v184;
  uint64_t v185;
  uint64_t k;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  size_t v194;
  const void *v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  size_t v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  size_t v207;
  const void *v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  size_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  unsigned __int8 *v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  size_t v227;
  const void *v228;
  void **v229;
  uint64_t v230;
  uint64_t v231;
  void *v232;
  size_t v233;
  uint64_t v234;
  unsigned __int8 *v235;
  unsigned __int8 *v236;
  uint64_t v237;
  uint64_t v238;
  llvm::Value **v239;
  llvm::Value **v240;
  llvm::Value *v241;
  uint64_t v242;
  uint64_t n;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  size_t v251;
  const void *v252;
  _QWORD *v253;
  uint64_t v254;
  uint64_t v255;
  void *v256;
  size_t v257;
  void *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  size_t v264;
  const void *v265;
  void *v266;
  uint64_t v267;
  uint64_t v268;
  void *v269;
  size_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unsigned __int8 *v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  size_t v280;
  const void *v281;
  void **v282;
  uint64_t v283;
  uint64_t v284;
  void *v285;
  size_t v286;
  uint64_t v287;
  llvm::Value **v288;
  llvm::Value **v289;
  llvm::Value *v290;
  uint64_t v291;
  uint64_t jj;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  size_t v300;
  const void *v301;
  _QWORD *v302;
  uint64_t v303;
  uint64_t v304;
  void *v305;
  size_t v306;
  unsigned __int8 *v307;
  unsigned __int8 *v308;
  uint64_t v309;
  void *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  size_t v316;
  const void *v317;
  void *v318;
  uint64_t v319;
  uint64_t v320;
  void *v321;
  size_t v322;
  unsigned __int8 *v323;
  unsigned __int8 *v324;
  uint64_t v325;
  void *__p;
  unsigned __int8 **v327;
  uint64_t v328;
  __int16 v329;
  unsigned __int8 *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  char v335;
  uint64_t v336;
  int v337;
  void **v338;
  BOOL v339;
  unsigned int v340;
  _QWORD *v341;
  size_t v342;
  unint64_t v343;
  void *v344;
  size_t v345;
  unint64_t v346;
  void **__dst;
  unsigned __int8 **v348;
  unint64_t v349;

  v4 = *(char *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 8);
  switch(v5)
  {
    case 0:
      if (v4 > 3)
        v6 = 0;
      else
        v6 = dword_22F45B6E0[v4];
      llvm::Twine::str(*(llvm::Twine **)(a2 + 24));
      v26 = *(_DWORD *)(a2 + 16);
      if (v26)
      {
        v27 = *((_QWORD *)a1 + 2);
        *(_DWORD *)(v27 + 312) = v26;
        *(_DWORD *)(v27 + 316) = v6;
        if (*(char *)(v27 + 311) < 0)
        {
          **(_BYTE **)(v27 + 288) = 0;
          *(_QWORD *)(v27 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v27 + 288) = 0;
          *(_BYTE *)(v27 + 311) = 0;
        }
        v330 = (unsigned __int8 *)(v27 + 320);
        v331 = 0;
        v332 = v27;
        LOWORD(v333) = 1;
        *(_BYTE *)(v27 + 320) = 0;
        *(_DWORD *)(v27 + 664) = 0;
        v75 = *(unsigned int *)(v27 + 776);
        if ((_DWORD)v75)
        {
          v76 = *(_QWORD *)(v27 + 768);
          v77 = 56 * v75;
          do
          {
            if (*(char *)(v76 + v77 - 9) < 0)
              operator delete(*(void **)(v76 + v77 - 32));
            v77 -= 56;
          }
          while (v77);
        }
      }
      else
      {
        v27 = *((_QWORD *)a1 + 2);
        *(_DWORD *)(v27 + 312) = 0;
        *(_DWORD *)(v27 + 316) = v6;
        if (*(char *)(v27 + 311) < 0)
        {
          **(_BYTE **)(v27 + 288) = 0;
          *(_QWORD *)(v27 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v27 + 288) = 0;
          *(_BYTE *)(v27 + 311) = 0;
        }
        v330 = (unsigned __int8 *)(v27 + 320);
        v331 = 0;
        v332 = v27;
        LOWORD(v333) = 1;
        *(_BYTE *)(v27 + 320) = 0;
        *(_DWORD *)(v27 + 664) = 0;
        v118 = *(unsigned int *)(v27 + 776);
        if ((_DWORD)v118)
        {
          v119 = *(_QWORD *)(v27 + 768);
          v120 = 56 * v118;
          do
          {
            if (*(char *)(v119 + v120 - 9) < 0)
              operator delete(*(void **)(v119 + v120 - 32));
            v120 -= 56;
          }
          while (v120);
        }
      }
      goto LABEL_226;
    case 2:
      if ((_DWORD)v4 != 1)
        goto LABEL_13;
      llvm::Value::getName(*(llvm::Value **)(a2 + 16));
      v11 = llvm::hash_value();
      v12 = *((_QWORD *)a1 + 43);
      v13 = *((_QWORD *)a1 + 44);
      if (v12 == v13)
      {
        v15 = 867;
        goto LABEL_202;
      }
      while (*(_QWORD *)v12 != v11)
      {
        v12 += 24;
        if (v12 == v13)
        {
LABEL_13:
          if (v4 < 4)
          {
            v14 = &unk_22F45B700;
            goto LABEL_17;
          }
LABEL_201:
          v15 = 771;
          goto LABEL_202;
        }
      }
      v109 = *((_QWORD *)a1 + 2);
      *(_DWORD *)(v109 + 312) = *(_DWORD *)(v12 + 8);
      *(_DWORD *)(v109 + 316) = 877;
      if (*(char *)(v109 + 311) < 0)
      {
        **(_BYTE **)(v109 + 288) = 0;
        *(_QWORD *)(v109 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v109 + 288) = 0;
        *(_BYTE *)(v109 + 311) = 0;
      }
      v330 = (unsigned __int8 *)(v109 + 320);
      v331 = 0;
      v332 = v109;
      LOWORD(v333) = 1;
      *(_BYTE *)(v109 + 320) = 0;
      *(_DWORD *)(v109 + 664) = 0;
      v157 = *(unsigned int *)(v109 + 776);
      if ((_DWORD)v157)
      {
        v158 = *(_QWORD *)(v109 + 768);
        v159 = 56 * v157;
        do
        {
          if (*(char *)(v158 + v159 - 9) < 0)
            operator delete(*(void **)(v158 + v159 - 32));
          v159 -= 56;
        }
        while (v159);
        LODWORD(v157) = *(unsigned __int8 *)(v109 + 320);
      }
      *(_DWORD *)(v109 + 776) = 0;
      v160 = *(unsigned int *)(a2 + 32);
      *(_BYTE *)(v109 + 321 + v157) = 3;
      *(_QWORD *)(v109 + 336 + 8 * v157) = v160;
      v161 = *(unsigned int *)(a2 + 40);
      v162 = (v157 + 1);
      *(_BYTE *)(v109 + 321 + v162) = 3;
      *(_BYTE *)(v109 + 320) = v157 + 2;
      *(_QWORD *)(v109 + 336 + 8 * v162) = v161;
      Name = llvm::Value::getName(*(llvm::Value **)(a2 + 16));
      if (!Name)
      {
        __dst = 0;
        v348 = 0;
        v349 = 0;
        goto LABEL_372;
      }
      v165 = v164;
      if (v164 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_586;
      v166 = (const void *)Name;
      if (v164 >= 0x17)
      {
        v214 = (v164 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v164 | 7) != 0x17)
          v214 = v164 | 7;
        v215 = v214 + 1;
        p_dst = (void **)operator new(v214 + 1);
        v348 = (unsigned __int8 **)v165;
        v349 = v215 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v349) = v164;
        p_dst = (void **)&__dst;
        if (!v164)
          goto LABEL_371;
      }
      memmove(p_dst, v166, v165);
LABEL_371:
      *((_BYTE *)p_dst + v165) = 0;
LABEL_372:
      llvm::demangle();
      if (v328 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v328 >= 0)
        v107 = HIBYTE(v328) & 0x7F;
      else
        v107 = (size_t)v327;
LABEL_378:
      sub_22E3B89A8(&v330, p_p, v107);
      if (SHIBYTE(v328) < 0)
        operator delete(__p);
      if (SHIBYTE(v349) < 0)
        operator delete(__dst);
      goto LABEL_382;
    case 3:
      if (v4 >= 4)
        goto LABEL_201;
      v14 = &unk_22F45B710;
      goto LABEL_17;
    case 9:
    case 10:
    case 11:
    case 15:
    case 16:
    case 17:
      sub_22F296390(a1, a2);
      return;
    case 12:
      sub_22F296590(a1, a2);
      return;
    case 13:
      sub_22F29661C(a1, a2);
      return;
    case 14:
      sub_22E614720(a1, a2, 868);
      return;
    case 21:
      v344 = 0;
      v345 = 0;
      v340 = 0;
      LODWORD(v341) = 0;
      v339 = 0;
      __dst = 0;
      v348 = 0;
      v349 = 0;
      LODWORD(v331) = 0;
      v335 = 0;
      v336 = 0;
      v337 = 1;
      v333 = 0;
      v334 = 0;
      v332 = 0;
      v330 = (unsigned __int8 *)(MEMORY[0x24BED83D8] + 16);
      v338 = (void **)&__dst;
      llvm::raw_ostream::SetBufferAndMode();
      if (*((_QWORD *)a1 + 9))
      {
        v16 = sub_22E614424(a1, a2, &v339, (uint64_t)&v344, (unsigned int *)&v341, (int *)&v340);
        llvm::Twine::print((llvm::Twine *)(a2 + 40), (llvm::raw_ostream *)&v330);
      }
      else
      {
        __p = (void *)(MEMORY[0x24BED83F8] + 16);
        v327 = &v330;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, &__p);
        v16 = 0;
      }
      if (*(_BYTE *)(a2 + 12))
        v48 = 870;
      else
        v48 = 761;
      v49 = *((_QWORD *)a1 + 2);
      *(_DWORD *)(v49 + 312) = v16;
      *(_DWORD *)(v49 + 316) = v48;
      if (*(char *)(v49 + 311) < 0)
      {
        **(_BYTE **)(v49 + 288) = 0;
        *(_QWORD *)(v49 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v49 + 288) = 0;
        *(_BYTE *)(v49 + 311) = 0;
      }
      __p = (void *)(v49 + 320);
      v327 = 0;
      v328 = v49;
      v329 = 1;
      *(_BYTE *)(v49 + 320) = 0;
      *(_DWORD *)(v49 + 664) = 0;
      v58 = *(unsigned int *)(v49 + 776);
      if ((_DWORD)v58)
      {
        v59 = *(_QWORD *)(v49 + 768);
        v60 = 56 * v58;
        do
        {
          if (*(char *)(v59 + v60 - 9) < 0)
            operator delete(*(void **)(v59 + v60 - 32));
          v60 -= 56;
        }
        while (v60);
      }
      *(_DWORD *)(v49 + 776) = 0;
      v61 = *((_BYTE *)v338 + 23);
      if (v61 >= 0)
        v62 = v338;
      else
        v62 = *v338;
      if (v61 >= 0)
        v63 = v61 & 0x7F;
      else
        v63 = (size_t)v338[1];
      sub_22E3B89A8((unsigned __int8 **)&__p, v62, v63);
      sub_22E3BB0B8((uint64_t)&__p);
      if (v339)
      {
        v64 = *((_QWORD *)a1 + 2);
        *(_DWORD *)(v64 + 312) = v16;
        *(_DWORD *)(v64 + 316) = 832;
        if (*(char *)(v64 + 311) < 0)
        {
          **(_BYTE **)(v64 + 288) = 0;
          *(_QWORD *)(v64 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v64 + 288) = 0;
          *(_BYTE *)(v64 + 311) = 0;
        }
        __p = (void *)(v64 + 320);
        v327 = 0;
        v328 = v64;
        v329 = 1;
        *(_BYTE *)(v64 + 320) = 0;
        *(_DWORD *)(v64 + 664) = 0;
        v90 = *(unsigned int *)(v64 + 776);
        if ((_DWORD)v90)
        {
          v91 = *(_QWORD *)(v64 + 768);
          v92 = 56 * v90;
          do
          {
            if (*(char *)(v91 + v92 - 9) < 0)
              operator delete(*(void **)(v91 + v92 - 32));
            v92 -= 56;
          }
          while (v92);
        }
        *(_DWORD *)(v64 + 776) = 0;
        sub_22E3B89A8((unsigned __int8 **)&__p, v344, v345);
        v93 = v341;
        v94 = (unsigned __int8 *)__p;
        if (!__p)
        {
          v94 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v327);
          __p = v94;
        }
        v94[*v94 + 1] = 3;
        v95 = __p;
        v96 = *(unsigned __int8 *)__p;
        v97 = v96 + 1;
        *(_BYTE *)__p = v96 + 1;
        v95[v96 + 2] = v93;
        v98 = v340;
        *((_BYTE *)v95 + v97 + 1) = 3;
        v99 = __p;
        v100 = *(unsigned __int8 *)__p;
        *(_BYTE *)__p = v100 + 1;
        v99[v100 + 2] = v98;
        sub_22E3BB0B8((uint64_t)&__p);
      }
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v330);
      if ((SHIBYTE(v349) & 0x80000000) == 0)
        return;
      v101 = __dst;
      goto LABEL_235;
    case 23:
      v17 = *(_QWORD *)(a2 + 16);
      v18 = *(unsigned __int8 *)(a2 + 40);
      if (v4 > 3)
      {
        v20 = 0;
      }
      else
      {
        v19 = dword_22F45B6E0;
        if (!*(_BYTE *)(a2 + 40))
          v19 = &unk_22F45B6F0;
        v20 = v19[v4];
      }
      v32 = *((_QWORD *)a1 + 9);
      if (!v32)
      {
        v56 = (llvm::raw_ostream *)llvm::errs(a1);
        llvm::SMDiagnostic::print((llvm::SMDiagnostic *)v17, 0, v56);
        v57 = *((_QWORD *)a1 + 2);
        *(_DWORD *)(v57 + 312) = 0;
        *(_DWORD *)(v57 + 316) = v20;
        if (*(char *)(v57 + 311) < 0)
        {
          **(_BYTE **)(v57 + 288) = 0;
          *(_QWORD *)(v57 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v57 + 288) = 0;
          *(_BYTE *)(v57 + 311) = 0;
        }
        v330 = (unsigned __int8 *)(v57 + 320);
        v331 = 0;
        v332 = v57;
        LOWORD(v333) = 1;
        *(_BYTE *)(v57 + 320) = 0;
        *(_DWORD *)(v57 + 664) = 0;
        v121 = *(unsigned int *)(v57 + 776);
        if ((_DWORD)v121)
        {
          v122 = *(_QWORD *)(v57 + 768);
          v123 = 56 * v121;
          do
          {
            if (*(char *)(v122 + v123 - 9) < 0)
              operator delete(*(void **)(v122 + v123 - 32));
            v123 -= 56;
          }
          while (v123);
        }
        *(_DWORD *)(v57 + 776) = 0;
        v116 = "cannot compile inline asm";
        v117 = 25;
        goto LABEL_198;
      }
      v33 = *(_BYTE *)(v17 + 79);
      if (v33 >= 0)
        v34 = (_DWORD *)(v17 + 56);
      else
        v34 = *(_DWORD **)(v17 + 56);
      if (v33 >= 0)
        v35 = v33 & 0x7F;
      else
        v35 = *(_QWORD *)(v17 + 64);
      if (v35 >= 7 && *v34 == 1869771365 && *(_DWORD *)((char *)v34 + 3) == 540701295)
      {
        v34 = (_DWORD *)((char *)v34 + 7);
        v35 -= 7;
      }
      if (*(_QWORD *)(v17 + 8))
      {
        v38 = *(_QWORD **)(v32 + 1992);
        v39 = *(_QWORD **)v17;
        v40 = *(_QWORD **)(*v39 + 24 * (llvm::SourceMgr::FindBufferContainingLoc() - 1));
        (*(void (**)(_QWORD *))(*v40 + 16))(v40);
        LOWORD(v334) = 261;
        v331 = v41;
        llvm::MemoryBuffer::getMemBufferCopy();
        v42 = (unsigned __int8 *)__p;
        __p = 0;
        v330 = v42;
        v43 = sub_22F1E1980(v38, (uint64_t *)&v330, 0, 0, 0, 0);
        if (v330)
          (*(void (**)(unsigned __int8 *))(*(_QWORD *)v330 + 8))(v330);
        v44 = *(_QWORD *)(v17 + 8);
        v45 = v40[1];
        v46 = sub_22E49F3DC(v38, v43);
        if (v46)
          v47 = *v46 & 0x7FFFFFFF;
        else
          v47 = 0;
        __p = 0;
        v78 = v47 + v44 - v45;
        v18 = *(unsigned __int8 *)(a2 + 40);
      }
      else
      {
        v78 = 0;
      }
      if (!v18 || (v110 = *(_DWORD *)(a2 + 44)) == 0)
      {
        v112 = *((_QWORD *)a1 + 2);
        *(_DWORD *)(v112 + 312) = v78;
        *(_DWORD *)(v112 + 316) = v20;
        if (*(char *)(v112 + 311) < 0)
        {
          **(_BYTE **)(v112 + 288) = 0;
          *(_QWORD *)(v112 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v112 + 288) = 0;
          *(_BYTE *)(v112 + 311) = 0;
        }
        v330 = (unsigned __int8 *)(v112 + 320);
        v331 = 0;
        v332 = v112;
        LOWORD(v333) = 1;
        *(_BYTE *)(v112 + 320) = 0;
        *(_DWORD *)(v112 + 664) = 0;
        v113 = *(unsigned int *)(v112 + 776);
        if ((_DWORD)v113)
        {
          v114 = *(_QWORD *)(v112 + 768);
          v115 = 56 * v113;
          do
          {
            if (*(char *)(v114 + v115 - 9) < 0)
              operator delete(*(void **)(v114 + v115 - 32));
            v115 -= 56;
          }
          while (v115);
        }
        *(_DWORD *)(v112 + 776) = 0;
        v116 = (char *)v34;
        v117 = v35;
LABEL_198:
        sub_22E3B89A8(&v330, v116, v117);
        goto LABEL_382;
      }
      v111 = *((_QWORD *)a1 + 2);
      *(_DWORD *)(v111 + 312) = v110;
      *(_DWORD *)(v111 + 316) = v20;
      if (*(char *)(v111 + 311) < 0)
      {
        **(_BYTE **)(v111 + 288) = 0;
        *(_QWORD *)(v111 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v111 + 288) = 0;
        *(_BYTE *)(v111 + 311) = 0;
      }
      v330 = (unsigned __int8 *)(v111 + 320);
      v331 = 0;
      v332 = v111;
      LOWORD(v333) = 1;
      *(_BYTE *)(v111 + 320) = 0;
      *(_DWORD *)(v111 + 664) = 0;
      v141 = *(unsigned int *)(v111 + 776);
      if ((_DWORD)v141)
      {
        v142 = *(_QWORD *)(v111 + 768);
        v143 = 56 * v141;
        do
        {
          if (*(char *)(v142 + v143 - 9) < 0)
            operator delete(*(void **)(v142 + v143 - 32));
          v143 -= 56;
        }
        while (v143);
      }
      *(_DWORD *)(v111 + 776) = 0;
      sub_22E3B89A8(&v330, v34, v35);
      sub_22E3BB0B8((uint64_t)&v330);
      if (*(_QWORD *)(v17 + 8))
      {
        v144 = *((_QWORD *)a1 + 2);
        *(_DWORD *)(v144 + 312) = v78;
        *(_DWORD *)(v144 + 316) = 835;
        if (*(char *)(v144 + 311) < 0)
        {
          **(_BYTE **)(v144 + 288) = 0;
          *(_QWORD *)(v144 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v144 + 288) = 0;
          *(_BYTE *)(v144 + 311) = 0;
        }
        v168 = (unsigned __int8 *)(v144 + 320);
        v330 = (unsigned __int8 *)(v144 + 320);
        v331 = 0;
        v332 = v144;
        LOWORD(v333) = 1;
        *(_BYTE *)(v144 + 320) = 0;
        *(_DWORD *)(v144 + 664) = 0;
        v169 = *(unsigned int *)(v144 + 776);
        if ((_DWORD)v169)
        {
          v170 = *(_QWORD *)(v144 + 768);
          v171 = 56 * v169;
          do
          {
            if (*(char *)(v170 + v171 - 9) < 0)
              operator delete(*(void **)(v170 + v171 - 32));
            v171 -= 56;
          }
          while (v171);
        }
        *(_DWORD *)(v144 + 776) = 0;
        v172 = *(int **)(v17 + 104);
        for (i = *(int **)(v17 + 112); v172 != i; v172 += 2)
        {
          v174 = *(_DWORD *)(v17 + 44);
          v175 = *v172;
          v176 = v172[1];
          if (!v168)
          {
            v168 = (unsigned __int8 *)sub_22E3B8AAC(0);
            v330 = v168;
          }
          sub_22E4D6448((uint64_t)(v168 + 336), (v78 - v174 + v175) | ((unint64_t)(v176 + v78 - v174) << 32), 1);
        }
LABEL_382:
        sub_22E3BB0B8((uint64_t)&v330);
      }
      return;
    case 24:
      v21 = *(_DWORD *)(a2 + 48);
      if (!v21)
        return;
      v22 = *((_QWORD *)a1 + 2);
      if (*(_BYTE *)(a2 + 12))
        v23 = 873;
      else
        v23 = 758;
      *(_DWORD *)(v22 + 312) = v21;
      *(_DWORD *)(v22 + 316) = v23;
      if (*(char *)(v22 + 311) < 0)
      {
        **(_BYTE **)(v22 + 288) = 0;
        *(_QWORD *)(v22 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v22 + 288) = 0;
        *(_BYTE *)(v22 + 311) = 0;
      }
      v330 = (unsigned __int8 *)(v22 + 320);
      v331 = 0;
      v332 = v22;
      LOWORD(v333) = 1;
      *(_BYTE *)(v22 + 320) = 0;
      *(_DWORD *)(v22 + 664) = 0;
      v69 = *(unsigned int *)(v22 + 776);
      if ((_DWORD)v69)
      {
        v70 = *(_QWORD *)(v22 + 768);
        v71 = 56 * v69;
        do
        {
          if (*(char *)(v70 + v71 - 9) < 0)
            operator delete(*(void **)(v70 + v71 - 32));
          v71 -= 56;
        }
        while (v71);
      }
      *(_DWORD *)(v22 + 776) = 0;
      v72 = *(const void **)(a2 + 16);
      if (!v72)
      {
        __dst = 0;
        v348 = 0;
        v349 = 0;
        goto LABEL_157;
      }
      v73 = *(_QWORD *)(a2 + 24);
      if (v73 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_586;
      if (v73 >= 0x17)
      {
        v102 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v73 | 7) != 0x17)
          v102 = v73 | 7;
        v103 = v102 + 1;
        v74 = (void **)operator new(v102 + 1);
        v348 = (unsigned __int8 **)v73;
        v349 = v103 | 0x8000000000000000;
        __dst = v74;
      }
      else
      {
        HIBYTE(v349) = *(_QWORD *)(a2 + 24);
        v74 = (void **)&__dst;
        if (!v73)
          goto LABEL_156;
      }
      memmove(v74, v72, v73);
LABEL_156:
      *((_BYTE *)v74 + v73) = 0;
LABEL_157:
      llvm::demangle();
      if (v328 >= 0)
        v104 = &__p;
      else
        v104 = __p;
      if (v328 >= 0)
        v105 = HIBYTE(v328) & 0x7F;
      else
        v105 = (size_t)v327;
      sub_22E3B89A8(&v330, v104, v105);
      p_p = *(void **)(a2 + 32);
      v107 = *(_QWORD *)(a2 + 40);
      goto LABEL_378;
    case 25:
      __dst = 0;
      v348 = 0;
      LODWORD(v344) = 0;
      LODWORD(v341) = 0;
      LOBYTE(v340) = 0;
      v24 = sub_22E614424(a1, a2, (BOOL *)&v340, (uint64_t)&__dst, (unsigned int *)&v344, (int *)&v341);
      v25 = *((_QWORD *)a1 + 2);
      *(_DWORD *)(v25 + 312) = v24;
      *(_DWORD *)(v25 + 316) = 896;
      if (*(char *)(v25 + 311) < 0)
      {
        **(_BYTE **)(v25 + 288) = 0;
        *(_QWORD *)(v25 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v25 + 288) = 0;
        *(_BYTE *)(v25 + 311) = 0;
      }
      v330 = (unsigned __int8 *)(v25 + 320);
      v331 = 0;
      v332 = v25;
      LOWORD(v333) = 1;
      *(_BYTE *)(v25 + 320) = 0;
      *(_DWORD *)(v25 + 664) = 0;
      v50 = *(unsigned int *)(v25 + 776);
      if ((_DWORD)v50)
      {
        v51 = *(_QWORD *)(v25 + 768);
        v52 = 56 * v50;
        do
        {
          if (*(char *)(v51 + v52 - 9) < 0)
            operator delete(*(void **)(v51 + v52 - 32));
          v52 -= 56;
        }
        while (v52);
      }
      *(_DWORD *)(v25 + 776) = 0;
      llvm::Twine::str(*(llvm::Twine **)(a2 + 40));
      if (v328 >= 0)
        v53 = &__p;
      else
        v53 = __p;
      if (v328 >= 0)
        v54 = HIBYTE(v328) & 0x7F;
      else
        v54 = (size_t)v327;
      sub_22E3B89A8(&v330, v53, v54);
      if (SHIBYTE(v328) < 0)
        operator delete(__p);
      sub_22E3BB0B8((uint64_t)&v330);
      if (!(_BYTE)v340)
        return;
      v55 = *((_QWORD *)a1 + 2);
      *(_DWORD *)(v55 + 312) = v24;
      *(_DWORD *)(v55 + 316) = 832;
      if (*(char *)(v55 + 311) < 0)
      {
        **(_BYTE **)(v55 + 288) = 0;
        *(_QWORD *)(v55 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v55 + 288) = 0;
        *(_BYTE *)(v55 + 311) = 0;
      }
      v330 = (unsigned __int8 *)(v55 + 320);
      v331 = 0;
      v332 = v55;
      LOWORD(v333) = 1;
      *(_BYTE *)(v55 + 320) = 0;
      *(_DWORD *)(v55 + 664) = 0;
      v79 = *(unsigned int *)(v55 + 776);
      if ((_DWORD)v79)
      {
        v80 = *(_QWORD *)(v55 + 768);
        v81 = 56 * v79;
        do
        {
          if (*(char *)(v80 + v81 - 9) < 0)
            operator delete(*(void **)(v80 + v81 - 32));
          v81 -= 56;
        }
        while (v81);
      }
      *(_DWORD *)(v55 + 776) = 0;
      sub_22E3B89A8(&v330, __dst, (size_t)v348);
      v82 = v344;
      v83 = v330;
      if (!v330)
      {
        v83 = (unsigned __int8 *)sub_22E3B8AAC(v331);
        v330 = v83;
      }
      v83[*v83 + 1] = 3;
      v84 = v330;
      v85 = *v330;
      v86 = v85 + 1;
      *v330 = v85 + 1;
      *(_QWORD *)&v84[8 * v85 + 16] = v82;
      v87 = v341;
      v84[v86 + 1] = 3;
      v88 = v330;
      v89 = *v330;
      *v330 = v89 + 1;
      *(_QWORD *)&v88[8 * v89 + 16] = v87;
      goto LABEL_382;
    default:
      if (v5 == *MEMORY[0x24BE38E40])
      {
        v7 = *(llvm::Value **)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8 * *(unsigned int *)(*(_QWORD *)(a2 + 16) + 8))
                             + 128);
        llvm::Value::getName(v7);
        v8 = llvm::hash_value();
        for (j = *((_QWORD *)a1 + 43); ; j += 24)
        {
          if (j == *((_QWORD *)a1 + 44))
            goto LABEL_201;
          if (*(_QWORD *)j == v8)
            break;
        }
        v108 = *((_QWORD *)a1 + 2);
        *(_DWORD *)(v108 + 312) = *(_DWORD *)(j + 8);
        *(_DWORD *)(v108 + 316) = 778;
        if (*(char *)(v108 + 311) < 0)
        {
          **(_BYTE **)(v108 + 288) = 0;
          *(_QWORD *)(v108 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v108 + 288) = 0;
          *(_BYTE *)(v108 + 311) = 0;
        }
        v330 = (unsigned __int8 *)(v108 + 320);
        v331 = 0;
        v332 = v108;
        LOWORD(v333) = 1;
        *(_BYTE *)(v108 + 320) = 0;
        *(_DWORD *)(v108 + 664) = 0;
        v146 = *(unsigned int *)(v108 + 776);
        if ((_DWORD)v146)
        {
          v147 = *(_QWORD *)(v108 + 768);
          v148 = 56 * v146;
          do
          {
            if (*(char *)(v147 + v148 - 9) < 0)
              operator delete(*(void **)(v147 + v148 - 32));
            v148 -= 56;
          }
          while (v148);
        }
        *(_DWORD *)(v108 + 776) = 0;
        v149 = sub_22E614AD8(v7, v9);
        *(_BYTE *)(v108 + 320 + *(unsigned __int8 *)(v108 + 320) + 1) = 3;
        v150 = v330;
        v151 = *v330;
        *v330 = v151 + 1;
        *(_QWORD *)&v150[8 * v151 + 16] = v149;
        v152 = llvm::Value::getName(v7);
        if (!v152)
        {
          __dst = 0;
          v348 = 0;
          v349 = 0;
LABEL_290:
          sub_22E614CA8((uint64_t)&__p, (uint64_t)&__dst);
          if (v328 >= 0)
            v179 = &__p;
          else
            v179 = __p;
          if (v328 >= 0)
            v180 = HIBYTE(v328) & 0x7F;
          else
            v180 = (size_t)v327;
          sub_22E3B89A8(&v330, v179, v180);
          if (SHIBYTE(v328) < 0)
            operator delete(__p);
          if (SHIBYTE(v349) < 0)
            operator delete(__dst);
          sub_22E3BB0B8((uint64_t)&v330);
          v181 = *(_QWORD *)(a2 + 32);
          if (!v181)
            return;
          v182 = *(llvm::Value ***)(a2 + 24);
          v183 = &v182[v181];
          while (1)
          {
            v184 = *v182;
            llvm::Value::getName(*v182);
            v185 = llvm::hash_value();
            for (k = *((_QWORD *)a1 + 43); k != *((_QWORD *)a1 + 44); k += 24)
            {
              if (*(_QWORD *)k == v185)
              {
                v188 = *((_QWORD *)a1 + 2);
                *(_DWORD *)(v188 + 312) = *(_DWORD *)(k + 8);
                *(_DWORD *)(v188 + 316) = 837;
                if (*(char *)(v188 + 311) < 0)
                {
                  **(_BYTE **)(v188 + 288) = 0;
                  *(_QWORD *)(v188 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v188 + 288) = 0;
                  *(_BYTE *)(v188 + 311) = 0;
                }
                v330 = (unsigned __int8 *)(v188 + 320);
                v331 = 0;
                v332 = v188;
                LOWORD(v333) = 1;
                *(_BYTE *)(v188 + 320) = 0;
                *(_DWORD *)(v188 + 664) = 0;
                v202 = *(unsigned int *)(v188 + 776);
                if ((_DWORD)v202)
                {
                  v203 = *(_QWORD *)(v188 + 768);
                  v204 = 56 * v202;
                  do
                  {
                    if (*(char *)(v203 + v204 - 9) < 0)
                      operator delete(*(void **)(v203 + v204 - 32));
                    v204 -= 56;
                  }
                  while (v204);
                }
                *(_DWORD *)(v188 + 776) = 0;
                v205 = llvm::Value::getName(v184);
                if (!v205)
                {
                  v344 = 0;
                  v345 = 0;
                  v346 = 0;
                  goto LABEL_354;
                }
                v207 = v206;
                if (v206 <= 0x7FFFFFFFFFFFFFF7)
                {
                  v208 = (const void *)v205;
                  if (v206 >= 0x17)
                  {
                    v210 = (v206 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v206 | 7) != 0x17)
                      v210 = v206 | 7;
                    v211 = v210 + 1;
                    v209 = operator new(v210 + 1);
                    v345 = v207;
                    v346 = v211 | 0x8000000000000000;
                    v344 = v209;
                  }
                  else
                  {
                    HIBYTE(v346) = v206;
                    v209 = &v344;
                    if (!v206)
                    {
LABEL_353:
                      *((_BYTE *)v209 + v207) = 0;
LABEL_354:
                      sub_22E614CA8((uint64_t)&__p, (uint64_t)&v344);
                      if (v328 >= 0)
                        v212 = &__p;
                      else
                        v212 = __p;
                      if (v328 >= 0)
                        v213 = HIBYTE(v328) & 0x7F;
                      else
                        v213 = (size_t)v327;
                      sub_22E3B89A8(&v330, v212, v213);
                      if (SHIBYTE(v328) < 0)
                        operator delete(__p);
                      if (SHIBYTE(v346) < 0)
                      {
                        v201 = v344;
LABEL_364:
                        operator delete(v201);
                      }
                      goto LABEL_365;
                    }
                  }
                  memmove(v209, v208, v207);
                  goto LABEL_353;
                }
LABEL_586:
                abort();
              }
            }
            v187 = *((_QWORD *)a1 + 2);
            *(_QWORD *)(v187 + 312) = 0x34500000000;
            if (*(char *)(v187 + 311) < 0)
            {
              **(_BYTE **)(v187 + 288) = 0;
              *(_QWORD *)(v187 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v187 + 288) = 0;
              *(_BYTE *)(v187 + 311) = 0;
            }
            v330 = (unsigned __int8 *)(v187 + 320);
            v331 = 0;
            v332 = v187;
            LOWORD(v333) = 1;
            *(_BYTE *)(v187 + 320) = 0;
            *(_DWORD *)(v187 + 664) = 0;
            v189 = *(unsigned int *)(v187 + 776);
            if ((_DWORD)v189)
            {
              v190 = *(_QWORD *)(v187 + 768);
              v191 = 56 * v189;
              do
              {
                if (*(char *)(v190 + v191 - 9) < 0)
                  operator delete(*(void **)(v190 + v191 - 32));
                v191 -= 56;
              }
              while (v191);
            }
            *(_DWORD *)(v187 + 776) = 0;
            v192 = llvm::Value::getName(v184);
            if (v192)
              break;
            v341 = 0;
            v342 = 0;
            v343 = 0;
LABEL_327:
            sub_22E614CA8((uint64_t)&__p, (uint64_t)&v341);
            if (v328 >= 0)
              v199 = &__p;
            else
              v199 = __p;
            if (v328 >= 0)
              v200 = HIBYTE(v328) & 0x7F;
            else
              v200 = (size_t)v327;
            sub_22E3B89A8(&v330, v199, v200);
            if (SHIBYTE(v328) < 0)
              operator delete(__p);
            if (SHIBYTE(v343) < 0)
            {
              v201 = v341;
              goto LABEL_364;
            }
LABEL_365:
            sub_22E3BB0B8((uint64_t)&v330);
            if (++v182 == v183)
              return;
          }
          v194 = v193;
          if (v193 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_586;
          v195 = (const void *)v192;
          if (v193 >= 0x17)
          {
            v197 = (v193 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v193 | 7) != 0x17)
              v197 = v193 | 7;
            v198 = v197 + 1;
            v196 = operator new(v197 + 1);
            v342 = v194;
            v343 = v198 | 0x8000000000000000;
            v341 = v196;
          }
          else
          {
            HIBYTE(v343) = v193;
            v196 = &v341;
            if (!v193)
              goto LABEL_326;
          }
          memmove(v196, v195, v194);
LABEL_326:
          *((_BYTE *)v196 + v194) = 0;
          goto LABEL_327;
        }
        v154 = v153;
        if (v153 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_586;
        v155 = (const void *)v152;
        if (v153 >= 0x17)
        {
          v177 = (v153 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v153 | 7) != 0x17)
            v177 = v153 | 7;
          v178 = v177 + 1;
          v156 = (void **)operator new(v177 + 1);
          v348 = (unsigned __int8 **)v154;
          v349 = v178 | 0x8000000000000000;
          __dst = v156;
        }
        else
        {
          HIBYTE(v349) = v153;
          v156 = (void **)&__dst;
          if (!v153)
            goto LABEL_289;
        }
        memmove(v156, v155, v154);
LABEL_289:
        *((_BYTE *)v156 + v154) = 0;
        goto LABEL_290;
      }
      if (v5 == *MEMORY[0x24BE38E28])
      {
        v28 = *(llvm::Value **)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8 * *(unsigned int *)(*(_QWORD *)(a2 + 16) + 8))
                              + 128);
        llvm::Value::getName(v28);
        v29 = llvm::hash_value();
        for (m = *((_QWORD *)a1 + 43); ; m += 24)
        {
          if (m == *((_QWORD *)a1 + 44))
            goto LABEL_201;
          if (*(_QWORD *)m == v29)
            break;
        }
        v145 = *((_QWORD *)a1 + 2);
        *(_DWORD *)(v145 + 312) = *(_DWORD *)(m + 8);
        *(_DWORD *)(v145 + 316) = 782;
        if (*(char *)(v145 + 311) < 0)
        {
          **(_BYTE **)(v145 + 288) = 0;
          *(_QWORD *)(v145 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v145 + 288) = 0;
          *(_BYTE *)(v145 + 311) = 0;
        }
        v330 = (unsigned __int8 *)(v145 + 320);
        v331 = 0;
        v332 = v145;
        LOWORD(v333) = 1;
        *(_BYTE *)(v145 + 320) = 0;
        *(_DWORD *)(v145 + 664) = 0;
        v219 = *(unsigned int *)(v145 + 776);
        if ((_DWORD)v219)
        {
          v220 = *(_QWORD *)(v145 + 768);
          v221 = 56 * v219;
          do
          {
            if (*(char *)(v220 + v221 - 9) < 0)
              operator delete(*(void **)(v220 + v221 - 32));
            v221 -= 56;
          }
          while (v221);
        }
        *(_DWORD *)(v145 + 776) = 0;
        v222 = sub_22E614AD8(v28, v30);
        *(_BYTE *)(v145 + 320 + *(unsigned __int8 *)(v145 + 320) + 1) = 3;
        v223 = v330;
        v224 = *v330;
        *v330 = v224 + 1;
        *(_QWORD *)&v223[8 * v224 + 16] = v222;
        v225 = llvm::Value::getName(v28);
        if (!v225)
        {
          __dst = 0;
          v348 = 0;
          v349 = 0;
LABEL_403:
          llvm::demangle();
          if (v328 >= 0)
            v232 = &__p;
          else
            v232 = __p;
          if (v328 >= 0)
            v233 = HIBYTE(v328) & 0x7F;
          else
            v233 = (size_t)v327;
          sub_22E3B89A8(&v330, v232, v233);
          v234 = *(unsigned int *)(a2 + 24);
          v235 = v330;
          if (!v330)
          {
            v235 = (unsigned __int8 *)sub_22E3B8AAC(v331);
            v330 = v235;
          }
          v235[*v235 + 1] = 3;
          v236 = v330;
          v237 = *v330;
          *v330 = v237 + 1;
          *(_QWORD *)&v236[8 * v237 + 16] = v234;
          if (SHIBYTE(v328) < 0)
            operator delete(__p);
          if (SHIBYTE(v349) < 0)
            operator delete(__dst);
          sub_22E3BB0B8((uint64_t)&v330);
          v238 = *(_QWORD *)(a2 + 40);
          if (!v238)
            return;
          v239 = *(llvm::Value ***)(a2 + 32);
          v240 = &v239[v238];
          while (1)
          {
            v241 = *v239;
            if (*v239 == v28)
              goto LABEL_482;
            llvm::Value::getName(*v239);
            v242 = llvm::hash_value();
            for (n = *((_QWORD *)a1 + 43); n != *((_QWORD *)a1 + 44); n += 24)
            {
              if (*(_QWORD *)n == v242)
              {
                v245 = *((_QWORD *)a1 + 2);
                *(_DWORD *)(v245 + 312) = *(_DWORD *)(n + 8);
                *(_DWORD *)(v245 + 316) = 839;
                if (*(char *)(v245 + 311) < 0)
                {
                  **(_BYTE **)(v245 + 288) = 0;
                  *(_QWORD *)(v245 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v245 + 288) = 0;
                  *(_BYTE *)(v245 + 311) = 0;
                }
                v330 = (unsigned __int8 *)(v245 + 320);
                v331 = 0;
                v332 = v245;
                LOWORD(v333) = 1;
                *(_BYTE *)(v245 + 320) = 0;
                *(_DWORD *)(v245 + 664) = 0;
                v259 = *(unsigned int *)(v245 + 776);
                if ((_DWORD)v259)
                {
                  v260 = *(_QWORD *)(v245 + 768);
                  v261 = 56 * v259;
                  do
                  {
                    if (*(char *)(v260 + v261 - 9) < 0)
                      operator delete(*(void **)(v260 + v261 - 32));
                    v261 -= 56;
                  }
                  while (v261);
                }
                *(_DWORD *)(v245 + 776) = 0;
                v262 = llvm::Value::getName(v241);
                if (!v262)
                {
                  v344 = 0;
                  v345 = 0;
                  v346 = 0;
                  goto LABEL_470;
                }
                v264 = v263;
                if (v263 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_586;
                v265 = (const void *)v262;
                if (v263 >= 0x17)
                {
                  v267 = (v263 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v263 | 7) != 0x17)
                    v267 = v263 | 7;
                  v268 = v267 + 1;
                  v266 = operator new(v267 + 1);
                  v345 = v264;
                  v346 = v268 | 0x8000000000000000;
                  v344 = v266;
                }
                else
                {
                  HIBYTE(v346) = v263;
                  v266 = &v344;
                  if (!v263)
                  {
LABEL_469:
                    *((_BYTE *)v266 + v264) = 0;
LABEL_470:
                    sub_22E614CA8((uint64_t)&__p, (uint64_t)&v344);
                    if (v328 >= 0)
                      v269 = &__p;
                    else
                      v269 = __p;
                    if (v328 >= 0)
                      v270 = HIBYTE(v328) & 0x7F;
                    else
                      v270 = (size_t)v327;
                    sub_22E3B89A8(&v330, v269, v270);
                    if (SHIBYTE(v328) < 0)
                      operator delete(__p);
                    if (SHIBYTE(v346) < 0)
                    {
                      v258 = v344;
LABEL_480:
                      operator delete(v258);
                    }
                    goto LABEL_481;
                  }
                }
                memmove(v266, v265, v264);
                goto LABEL_469;
              }
            }
            v244 = *((_QWORD *)a1 + 2);
            *(_QWORD *)(v244 + 312) = 0x34700000000;
            if (*(char *)(v244 + 311) < 0)
            {
              **(_BYTE **)(v244 + 288) = 0;
              *(_QWORD *)(v244 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v244 + 288) = 0;
              *(_BYTE *)(v244 + 311) = 0;
            }
            v330 = (unsigned __int8 *)(v244 + 320);
            v331 = 0;
            v332 = v244;
            LOWORD(v333) = 1;
            *(_BYTE *)(v244 + 320) = 0;
            *(_DWORD *)(v244 + 664) = 0;
            v246 = *(unsigned int *)(v244 + 776);
            if ((_DWORD)v246)
            {
              v247 = *(_QWORD *)(v244 + 768);
              v248 = 56 * v246;
              do
              {
                if (*(char *)(v247 + v248 - 9) < 0)
                  operator delete(*(void **)(v247 + v248 - 32));
                v248 -= 56;
              }
              while (v248);
            }
            *(_DWORD *)(v244 + 776) = 0;
            v249 = llvm::Value::getName(v241);
            if (v249)
              break;
            v341 = 0;
            v342 = 0;
            v343 = 0;
LABEL_443:
            sub_22E614CA8((uint64_t)&__p, (uint64_t)&v341);
            if (v328 >= 0)
              v256 = &__p;
            else
              v256 = __p;
            if (v328 >= 0)
              v257 = HIBYTE(v328) & 0x7F;
            else
              v257 = (size_t)v327;
            sub_22E3B89A8(&v330, v256, v257);
            if (SHIBYTE(v328) < 0)
              operator delete(__p);
            if (SHIBYTE(v343) < 0)
            {
              v258 = v341;
              goto LABEL_480;
            }
LABEL_481:
            sub_22E3BB0B8((uint64_t)&v330);
LABEL_482:
            if (++v239 == v240)
              return;
          }
          v251 = v250;
          if (v250 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_586;
          v252 = (const void *)v249;
          if (v250 >= 0x17)
          {
            v254 = (v250 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v250 | 7) != 0x17)
              v254 = v250 | 7;
            v255 = v254 + 1;
            v253 = operator new(v254 + 1);
            v342 = v251;
            v343 = v255 | 0x8000000000000000;
            v341 = v253;
          }
          else
          {
            HIBYTE(v343) = v250;
            v253 = &v341;
            if (!v250)
              goto LABEL_442;
          }
          memmove(v253, v252, v251);
LABEL_442:
          *((_BYTE *)v253 + v251) = 0;
          goto LABEL_443;
        }
        v227 = v226;
        if (v226 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_586;
        v228 = (const void *)v225;
        if (v226 >= 0x17)
        {
          v230 = (v226 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v226 | 7) != 0x17)
            v230 = v226 | 7;
          v231 = v230 + 1;
          v229 = (void **)operator new(v230 + 1);
          v348 = (unsigned __int8 **)v227;
          v349 = v231 | 0x8000000000000000;
          __dst = v229;
        }
        else
        {
          HIBYTE(v349) = v226;
          v229 = (void **)&__dst;
          if (!v226)
            goto LABEL_402;
        }
        memmove(v229, v228, v227);
LABEL_402:
        *((_BYTE *)v229 + v227) = 0;
        goto LABEL_403;
      }
      if (v5 != *MEMORY[0x24BE38E48])
      {
        if (v4 >= 4)
          goto LABEL_201;
        v14 = &unk_22F45B720;
LABEL_17:
        v15 = v14[v4];
LABEL_202:
        __p = 0;
        v327 = 0;
        v328 = 0;
        LODWORD(v331) = 0;
        v335 = 0;
        v336 = 0;
        v337 = 1;
        v333 = 0;
        v334 = 0;
        v332 = 0;
        v330 = (unsigned __int8 *)(MEMORY[0x24BED83D8] + 16);
        v338 = &__p;
        llvm::raw_ostream::SetBufferAndMode();
        __dst = (void **)(MEMORY[0x24BED83F8] + 16);
        v348 = &v330;
        (*(void (**)(uint64_t, void ***))(*(_QWORD *)a2 + 24))(a2, &__dst);
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v330);
        if (*(_DWORD *)(a2 + 8) == 3)
        {
          v124 = *((_QWORD *)a1 + 2);
          *(_DWORD *)(v124 + 312) = 0;
          *(_DWORD *)(v124 + 316) = v15;
          if (*(char *)(v124 + 311) < 0)
          {
            **(_BYTE **)(v124 + 288) = 0;
            *(_QWORD *)(v124 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v124 + 288) = 0;
            *(_BYTE *)(v124 + 311) = 0;
          }
          v330 = (unsigned __int8 *)(v124 + 320);
          v331 = 0;
          v332 = v124;
          LOWORD(v333) = 1;
          *(_BYTE *)(v124 + 320) = 0;
          *(_DWORD *)(v124 + 664) = 0;
          v125 = *(unsigned int *)(v124 + 776);
          if ((_DWORD)v125)
          {
            v126 = *(_QWORD *)(v124 + 768);
            v127 = 56 * v125;
            do
            {
              if (*(char *)(v126 + v127 - 9) < 0)
                operator delete(*(void **)(v126 + v127 - 32));
              v127 -= 56;
            }
            while (v127);
          }
          *(_DWORD *)(v124 + 776) = 0;
          v128 = *((_QWORD *)a1 + 46);
          v131 = *(void **)(v128 + 168);
          v129 = v128 + 168;
          v130 = v131;
          v132 = *(_BYTE *)(v129 + 23);
          if (v132 >= 0)
            v133 = (void *)v129;
          else
            v133 = v130;
          v134 = *(_QWORD *)(v129 + 8);
          if (v132 >= 0)
            v135 = v132 & 0x7F;
          else
            v135 = v134;
          sub_22E3B89A8(&v330, v133, v135);
        }
        else
        {
          v27 = *((_QWORD *)a1 + 2);
          *(_DWORD *)(v27 + 312) = 0;
          *(_DWORD *)(v27 + 316) = v15;
          if (*(char *)(v27 + 311) < 0)
          {
            **(_BYTE **)(v27 + 288) = 0;
            *(_QWORD *)(v27 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v27 + 288) = 0;
            *(_BYTE *)(v27 + 311) = 0;
          }
          v330 = (unsigned __int8 *)(v27 + 320);
          v331 = 0;
          v332 = v27;
          LOWORD(v333) = 1;
          *(_BYTE *)(v27 + 320) = 0;
          *(_DWORD *)(v27 + 664) = 0;
          v136 = *(unsigned int *)(v27 + 776);
          if ((_DWORD)v136)
          {
            v137 = *(_QWORD *)(v27 + 768);
            v138 = 56 * v136;
            do
            {
              if (*(char *)(v137 + v138 - 9) < 0)
                operator delete(*(void **)(v137 + v138 - 32));
              v138 -= 56;
            }
            while (v138);
          }
LABEL_226:
          *(_DWORD *)(v27 + 776) = 0;
        }
        if (v328 >= 0)
          v139 = &__p;
        else
          v139 = __p;
        if (v328 >= 0)
          v140 = HIBYTE(v328) & 0x7F;
        else
          v140 = (size_t)v327;
        sub_22E3B89A8(&v330, v139, v140);
        sub_22E3BB0B8((uint64_t)&v330);
        if (SHIBYTE(v328) < 0)
        {
          v101 = __p;
LABEL_235:
          operator delete(v101);
        }
        return;
      }
      v65 = *(llvm::Value **)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8 * *(unsigned int *)(*(_QWORD *)(a2 + 16) + 8))
                            + 128);
      llvm::Value::getName(v65);
      v66 = llvm::hash_value();
      for (ii = *((_QWORD *)a1 + 43); ; ii += 24)
      {
        if (ii == *((_QWORD *)a1 + 44))
          goto LABEL_201;
        if (*(_QWORD *)ii == v66)
          break;
      }
      v216 = *(_DWORD *)(ii + 8);
      v217 = sub_22E614AD8(v65, v67);
      v218 = *((_QWORD *)a1 + 2);
      *(_DWORD *)(v218 + 312) = v216;
      *(_DWORD *)(v218 + 316) = 790;
      if (*(char *)(v218 + 311) < 0)
      {
        **(_BYTE **)(v218 + 288) = 0;
        *(_QWORD *)(v218 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v218 + 288) = 0;
        *(_BYTE *)(v218 + 311) = 0;
      }
      v330 = (unsigned __int8 *)(v218 + 320);
      v331 = 0;
      v332 = v218;
      LOWORD(v333) = 1;
      *(_BYTE *)(v218 + 320) = 0;
      *(_DWORD *)(v218 + 664) = 0;
      v271 = *(unsigned int *)(v218 + 776);
      if ((_DWORD)v271)
      {
        v272 = *(_QWORD *)(v218 + 768);
        v273 = 56 * v271;
        do
        {
          if (*(char *)(v272 + v273 - 9) < 0)
            operator delete(*(void **)(v272 + v273 - 32));
          v273 -= 56;
        }
        while (v273);
        v274 = *(unsigned __int8 *)(v218 + 320);
      }
      else
      {
        v274 = 0;
      }
      *(_DWORD *)(v218 + 776) = 0;
      v275 = v217;
      *(_BYTE *)(v218 + v274 + 321) = 3;
      v276 = v330;
      v277 = *v330;
      *v330 = v277 + 1;
      *(_QWORD *)&v276[8 * v277 + 16] = v217;
      v278 = llvm::Value::getName(v65);
      if (!v278)
      {
        __dst = 0;
        v348 = 0;
        v349 = 0;
LABEL_503:
        sub_22E614CA8((uint64_t)&__p, (uint64_t)&__dst);
        if (v328 >= 0)
          v285 = &__p;
        else
          v285 = __p;
        if (v328 >= 0)
          v286 = HIBYTE(v328) & 0x7F;
        else
          v286 = (size_t)v327;
        sub_22E3B89A8(&v330, v285, v286);
        if (SHIBYTE(v328) < 0)
          operator delete(__p);
        if (SHIBYTE(v349) < 0)
          operator delete(__dst);
        sub_22E3BB0B8((uint64_t)&v330);
        v287 = *(_QWORD *)(a2 + 32);
        if (!v287)
          return;
        v288 = *(llvm::Value ***)(a2 + 24);
        v289 = &v288[v287];
        while (1)
        {
          v290 = *v288;
          if (*v288 != v65)
            break;
LABEL_584:
          if (++v288 == v289)
            return;
        }
        llvm::Value::getName(*v288);
        v291 = llvm::hash_value();
        for (jj = *((_QWORD *)a1 + 43); jj != *((_QWORD *)a1 + 44); jj += 24)
        {
          if (*(_QWORD *)jj == v291)
          {
            v294 = *((_QWORD *)a1 + 2);
            *(_DWORD *)(v294 + 312) = *(_DWORD *)(jj + 8);
            *(_DWORD *)(v294 + 316) = 840;
            if (*(char *)(v294 + 311) < 0)
            {
              **(_BYTE **)(v294 + 288) = 0;
              *(_QWORD *)(v294 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v294 + 288) = 0;
              *(_BYTE *)(v294 + 311) = 0;
            }
            v330 = (unsigned __int8 *)(v294 + 320);
            v331 = 0;
            v332 = v294;
            LOWORD(v333) = 1;
            *(_BYTE *)(v294 + 320) = 0;
            *(_DWORD *)(v294 + 664) = 0;
            v311 = *(unsigned int *)(v294 + 776);
            if ((_DWORD)v311)
            {
              v312 = *(_QWORD *)(v294 + 768);
              v313 = 56 * v311;
              do
              {
                if (*(char *)(v312 + v313 - 9) < 0)
                  operator delete(*(void **)(v312 + v313 - 32));
                v313 -= 56;
              }
              while (v313);
            }
            *(_DWORD *)(v294 + 776) = 0;
            v314 = llvm::Value::getName(v290);
            if (!v314)
            {
              v344 = 0;
              v345 = 0;
              v346 = 0;
              goto LABEL_570;
            }
            v316 = v315;
            if (v315 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_586;
            v317 = (const void *)v314;
            if (v315 >= 0x17)
            {
              v319 = (v315 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v315 | 7) != 0x17)
                v319 = v315 | 7;
              v320 = v319 + 1;
              v318 = operator new(v319 + 1);
              v345 = v316;
              v346 = v320 | 0x8000000000000000;
              v344 = v318;
            }
            else
            {
              HIBYTE(v346) = v315;
              v318 = &v344;
              if (!v315)
              {
LABEL_569:
                *((_BYTE *)v318 + v316) = 0;
LABEL_570:
                sub_22E614CA8((uint64_t)&__p, (uint64_t)&v344);
                if (v328 >= 0)
                  v321 = &__p;
                else
                  v321 = __p;
                if (v328 >= 0)
                  v322 = HIBYTE(v328) & 0x7F;
                else
                  v322 = (size_t)v327;
                sub_22E3B89A8(&v330, v321, v322);
                v323 = v330;
                if (!v330)
                {
                  v323 = (unsigned __int8 *)sub_22E3B8AAC(v331);
                  v330 = v323;
                }
                v323[*v323 + 1] = 3;
                v324 = v330;
                v325 = *v330;
                *v330 = v325 + 1;
                *(_QWORD *)&v324[8 * v325 + 16] = v275;
                if (SHIBYTE(v328) < 0)
                  operator delete(__p);
                if (SHIBYTE(v346) < 0)
                {
                  v310 = v344;
                  goto LABEL_582;
                }
                goto LABEL_583;
              }
            }
            memmove(v318, v317, v316);
            goto LABEL_569;
          }
        }
        v293 = *((_QWORD *)a1 + 2);
        *(_QWORD *)(v293 + 312) = 0x34800000000;
        if (*(char *)(v293 + 311) < 0)
        {
          **(_BYTE **)(v293 + 288) = 0;
          *(_QWORD *)(v293 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v293 + 288) = 0;
          *(_BYTE *)(v293 + 311) = 0;
        }
        v330 = (unsigned __int8 *)(v293 + 320);
        v331 = 0;
        v332 = v293;
        LOWORD(v333) = 1;
        *(_BYTE *)(v293 + 320) = 0;
        *(_DWORD *)(v293 + 664) = 0;
        v295 = *(unsigned int *)(v293 + 776);
        if ((_DWORD)v295)
        {
          v296 = *(_QWORD *)(v293 + 768);
          v297 = 56 * v295;
          do
          {
            if (*(char *)(v296 + v297 - 9) < 0)
              operator delete(*(void **)(v296 + v297 - 32));
            v297 -= 56;
          }
          while (v297);
        }
        *(_DWORD *)(v293 + 776) = 0;
        v298 = llvm::Value::getName(v290);
        if (!v298)
        {
          v341 = 0;
          v342 = 0;
          v343 = 0;
LABEL_541:
          sub_22E614CA8((uint64_t)&__p, (uint64_t)&v341);
          if (v328 >= 0)
            v305 = &__p;
          else
            v305 = __p;
          if (v328 >= 0)
            v306 = HIBYTE(v328) & 0x7F;
          else
            v306 = (size_t)v327;
          sub_22E3B89A8(&v330, v305, v306);
          v307 = v330;
          if (!v330)
          {
            v307 = (unsigned __int8 *)sub_22E3B8AAC(v331);
            v330 = v307;
          }
          v307[*v307 + 1] = 3;
          v308 = v330;
          v309 = *v330;
          *v330 = v309 + 1;
          *(_QWORD *)&v308[8 * v309 + 16] = v275;
          if (SHIBYTE(v328) < 0)
            operator delete(__p);
          if (SHIBYTE(v343) < 0)
          {
            v310 = v341;
LABEL_582:
            operator delete(v310);
          }
LABEL_583:
          sub_22E3BB0B8((uint64_t)&v330);
          goto LABEL_584;
        }
        v300 = v299;
        if (v299 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_586;
        v301 = (const void *)v298;
        if (v299 >= 0x17)
        {
          v303 = (v299 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v299 | 7) != 0x17)
            v303 = v299 | 7;
          v304 = v303 + 1;
          v302 = operator new(v303 + 1);
          v342 = v300;
          v343 = v304 | 0x8000000000000000;
          v341 = v302;
        }
        else
        {
          HIBYTE(v343) = v299;
          v302 = &v341;
          if (!v299)
            goto LABEL_540;
        }
        memmove(v302, v301, v300);
LABEL_540:
        *((_BYTE *)v302 + v300) = 0;
        goto LABEL_541;
      }
      v280 = v279;
      if (v279 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_586;
      v281 = (const void *)v278;
      if (v279 >= 0x17)
      {
        v283 = (v279 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v279 | 7) != 0x17)
          v283 = v279 | 7;
        v284 = v283 + 1;
        v282 = (void **)operator new(v283 + 1);
        v348 = (unsigned __int8 **)v280;
        v349 = v284 | 0x8000000000000000;
        __dst = v282;
      }
      else
      {
        HIBYTE(v349) = v279;
        v282 = (void **)&__dst;
        if (!v279)
          goto LABEL_502;
      }
      memmove(v282, v281, v280);
LABEL_502:
      *((_BYTE *)v282 + v280) = 0;
      goto LABEL_503;
  }
}

uint64_t sub_22E614424(_QWORD *a1, uint64_t a2, BOOL *a3, uint64_t a4, unsigned int *a5, int *a6)
{
  uint64_t *v12;
  uint64_t v13;
  char v14;
  void **v15;
  size_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  void *__p[2];
  char v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  unsigned __int8 *v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a2 + 24))
  {
    v21 = 0;
    goto LABEL_20;
  }
  v12 = *(uint64_t **)(a1[9] + 1992);
  v13 = v12[2];
  llvm::DiagnosticInfoWithLocationBase::getLocation();
  if (!*a5)
    goto LABEL_19;
  sub_22F1D07D8(v13, *(const void **)a4, *(_QWORD *)(a4 + 8), 0, 1, (uint64_t)&v40);
  v14 = v42;
  if ((v42 & 1) == 0
    || ((llvm::DiagnosticInfoWithLocationBase::getAbsolutePath((llvm::DiagnosticInfoWithLocationBase *)a2), v39 >= 0)
      ? (v15 = __p)
      : (v15 = (void **)__p[0]),
        v39 >= 0 ? (v16 = v39 & 0x7F) : (v16 = (size_t)__p[1]),
        sub_22F1D07D8(v13, v15, v16, 0, 1, (uint64_t)&v44),
        v14 = v14 & 0xFE | v45 & 1,
        v40 = v44,
        (v39 & 0x80000000) == 0))
  {
    if ((v14 & 1) == 0)
      goto LABEL_12;
LABEL_19:
    v21 = 0;
    *a3 = 1;
    goto LABEL_20;
  }
  operator delete(__p[0]);
  if ((v14 & 1) != 0)
    goto LABEL_19;
LABEL_12:
  v17 = *a5;
  if (*a6 <= 1)
    v18 = 1;
  else
    v18 = *a6;
  v19 = sub_22F1E1A48((uint64_t)v12, (uint64_t)v40);
  v20 = sub_22F1E38E8(v12, v19, v17, v18);
  *a3 = v20 == 0;
  v21 = v20 >> 8;
  if (v20)
  {
    LOBYTE(v22) = v20;
    return v22 | ((*(_QWORD *)&v21 & 0xFFFFFFLL) << 8) | ((_QWORD)a3 << 32);
  }
LABEL_20:
  llvm::Value::getName(*(llvm::Value **)(a2 + 16));
  v23 = llvm::hash_value();
  for (i = a1[43]; ; i += 24)
  {
    if (i == a1[44])
    {
      v22 = 0;
      a3 = 0;
      goto LABEL_26;
    }
    if (*(_QWORD *)i == v23)
      break;
  }
  v22 = *(unsigned __int8 *)(i + 8);
  v21 = *(unsigned __int16 *)(i + 9) | (*(unsigned __int8 *)(i + 11) << 16);
  a3 = (BOOL *)*(unsigned int *)(i + 12);
LABEL_26:
  if (*(_QWORD *)(a2 + 24))
  {
    v25 = a1[2];
    *(_DWORD *)(v25 + 312) = v22 | (v21 << 8);
    *(_DWORD *)(v25 + 316) = 832;
    if (*(char *)(v25 + 311) < 0)
    {
      **(_BYTE **)(v25 + 288) = 0;
      *(_QWORD *)(v25 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v25 + 288) = 0;
      *(_BYTE *)(v25 + 311) = 0;
    }
    v40 = (unsigned __int8 *)(v25 + 320);
    v41 = 0;
    v42 = v25;
    v43 = 1;
    *(_BYTE *)(v25 + 320) = 0;
    *(_DWORD *)(v25 + 664) = 0;
    v26 = *(unsigned int *)(v25 + 776);
    if ((_DWORD)v26)
    {
      v27 = *(_QWORD *)(v25 + 768);
      v28 = 56 * v26;
      do
      {
        if (*(char *)(v27 + v28 - 9) < 0)
          operator delete(*(void **)(v27 + v28 - 32));
        v28 -= 56;
      }
      while (v28);
    }
    *(_DWORD *)(v25 + 776) = 0;
    sub_22E3B89A8(&v40, *(void **)a4, *(_QWORD *)(a4 + 8));
    v29 = *a5;
    v30 = v40;
    if (!v40)
    {
      v30 = (unsigned __int8 *)sub_22E3B8AAC(v41);
      v40 = v30;
    }
    v30[*v30 + 1] = 3;
    v31 = v40;
    v32 = *v40;
    v33 = v32 + 1;
    *v40 = v32 + 1;
    *(_QWORD *)&v31[8 * v32 + 16] = v29;
    v34 = *a6;
    v31[v33 + 1] = 3;
    v35 = v40;
    v36 = *v40;
    *v40 = v36 + 1;
    *(_QWORD *)&v35[8 * v36 + 16] = v34;
    sub_22E3BB0B8((uint64_t)&v40);
  }
  return v22 | ((*(_QWORD *)&v21 & 0xFFFFFFLL) << 8) | ((_QWORD)a3 << 32);
}

void sub_22E614720(_QWORD *a1, uint64_t a2, int a3)
{
  int v6;
  const char *p_p;
  _QWORD *v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  char v17;
  void *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void *__p;
  uint64_t *v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  int v43;
  void **v44;
  void *v45[2];
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  void *v49;
  size_t v50;

  v49 = 0;
  v50 = 0;
  v48 = 0;
  v47 = 0;
  v45[0] = 0;
  v45[1] = 0;
  v46 = 0;
  v37 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 1;
  v39 = 0;
  v40 = 0;
  v38 = 0;
  v36 = MEMORY[0x24BED83D8] + 16;
  v44 = v45;
  llvm::raw_ostream::SetBufferAndMode();
  if (a1[9])
  {
    v6 = sub_22E614424(a1, a2, &v47, (uint64_t)&v49, (unsigned int *)&v48 + 1, (int *)&v48);
    llvm::DiagnosticInfoOptimizationBase::getMsg((llvm::DiagnosticInfoOptimizationBase *)a2);
    if (v34 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    llvm::raw_ostream::write((llvm::raw_ostream *)&v36, p_p);
    if (SHIBYTE(v34) < 0)
      operator delete(__p);
  }
  else
  {
    __p = (void *)(MEMORY[0x24BED83F8] + 16);
    v33 = &v36;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, &__p);
    v6 = 0;
  }
  if (*(_BYTE *)(a2 + 72))
  {
    v8 = (_QWORD *)v40;
    if ((unint64_t)(v39 - v40) > 0xA)
    {
      *(_DWORD *)(v40 + 7) = 540701555;
      *v8 = *(_QWORD *)" (hotness: ";
      v40 += 11;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v36, " (hotness: ");
    }
    v9 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v10 = (_BYTE *)*((_QWORD *)v9 + 4);
    if (*((_BYTE **)v9 + 3) == v10)
    {
      llvm::raw_ostream::write(v9, ")");
    }
    else
    {
      *v10 = 41;
      ++*((_QWORD *)v9 + 4);
    }
  }
  v11 = a1[2];
  *(_DWORD *)(v11 + 312) = v6;
  *(_DWORD *)(v11 + 316) = a3;
  if (*(char *)(v11 + 311) < 0)
  {
    **(_BYTE **)(v11 + 288) = 0;
    *(_QWORD *)(v11 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v11 + 288) = 0;
    *(_BYTE *)(v11 + 311) = 0;
  }
  __p = (void *)(v11 + 320);
  v33 = 0;
  v34 = v11;
  v35 = 1;
  *(_BYTE *)(v11 + 320) = 0;
  *(_DWORD *)(v11 + 664) = 0;
  v12 = *(unsigned int *)(v11 + 776);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD *)(v11 + 768);
    v14 = 56 * v12;
    do
    {
      if (*(char *)(v13 + v14 - 9) < 0)
        operator delete(*(void **)(v13 + v14 - 32));
      v14 -= 56;
    }
    while (v14);
  }
  *(_DWORD *)(v11 + 776) = 0;
  v15 = *(char **)(a2 + 40);
  if (v15)
    v16 = strlen(v15);
  else
    v16 = 0;
  sub_22E616D98((uint64_t)&__p, v15, v16);
  v17 = *((_BYTE *)v44 + 23);
  if (v17 >= 0)
    v18 = v44;
  else
    v18 = *v44;
  if (v17 >= 0)
    v19 = v17 & 0x7F;
  else
    v19 = (size_t)v44[1];
  sub_22E3B89A8((unsigned __int8 **)&__p, v18, v19);
  sub_22E3BB0B8((uint64_t)&__p);
  if (v47)
  {
    v20 = a1[2];
    *(_DWORD *)(v20 + 312) = v6;
    *(_DWORD *)(v20 + 316) = 832;
    if (*(char *)(v20 + 311) < 0)
    {
      **(_BYTE **)(v20 + 288) = 0;
      *(_QWORD *)(v20 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v20 + 288) = 0;
      *(_BYTE *)(v20 + 311) = 0;
    }
    __p = (void *)(v20 + 320);
    v33 = 0;
    v34 = v20;
    v35 = 1;
    *(_BYTE *)(v20 + 320) = 0;
    *(_DWORD *)(v20 + 664) = 0;
    v21 = *(unsigned int *)(v20 + 776);
    if ((_DWORD)v21)
    {
      v22 = *(_QWORD *)(v20 + 768);
      v23 = 56 * v21;
      do
      {
        if (*(char *)(v22 + v23 - 9) < 0)
          operator delete(*(void **)(v22 + v23 - 32));
        v23 -= 56;
      }
      while (v23);
    }
    *(_DWORD *)(v20 + 776) = 0;
    sub_22E3B89A8((unsigned __int8 **)&__p, v49, v50);
    v24 = HIDWORD(v48);
    v25 = (unsigned __int8 *)__p;
    if (!__p)
    {
      v25 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v33);
      __p = v25;
    }
    v25[*v25 + 1] = 3;
    v26 = __p;
    v27 = *(unsigned __int8 *)__p;
    v28 = v27 + 1;
    *(_BYTE *)__p = v27 + 1;
    v26[v27 + 2] = v24;
    v29 = v48;
    *((_BYTE *)v26 + v28 + 1) = 3;
    v30 = __p;
    v31 = *(unsigned __int8 *)__p;
    *(_BYTE *)__p = v31 + 1;
    v30[v31 + 2] = v29;
    sub_22E3BB0B8((uint64_t)&__p);
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v36);
  if (SHIBYTE(v46) < 0)
    operator delete(v45[0]);
}

uint64_t sub_22E614AD8(llvm::air *a1, const Function *a2)
{
  const Function *v3;
  const Function *v5;
  uint64_t AIIntersectionFunction;
  const Function *v7;
  uint64_t String;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  const Function *v12;
  const Function *v13;
  const Function *v14;
  uint64_t AIVertexFunction;
  const Function *v16;
  uint64_t AIVisibleFunction;

  if (llvm::air::getAICIFunction(a1, a2))
    return 0;
  if (llvm::air::getAIFragmentFunction(a1, v3))
    return 1;
  AIIntersectionFunction = llvm::air::getAIIntersectionFunction(a1, v5);
  if (!AIIntersectionFunction)
  {
    if (llvm::air::getAIKernelFunction(a1, v7))
      return 5;
    if (llvm::air::getAIMeshFunction(a1, v12))
      return 6;
    if (llvm::air::getAIObjectFunction(a1, v13))
      return 7;
    AIVertexFunction = llvm::air::getAIVertexFunction(a1, v14);
    if (AIVertexFunction)
    {
      if (*(_DWORD *)(AIVertexFunction + 8) == 4)
        return 9;
      else
        return 10;
    }
    else
    {
      AIVisibleFunction = llvm::air::getAIVisibleFunction(a1, v16);
      if (AIVisibleFunction)
      {
        if (*(_DWORD *)(AIVisibleFunction + 8) == 4)
          return 8;
        else
          return 11;
      }
      else
      {
        return 12;
      }
    }
  }
  String = llvm::MDString::getString(*(llvm::MDString **)(AIIntersectionFunction
                                                        - 8 * *(unsigned int *)(AIIntersectionFunction + 8)
                                                        + 24));
  switch(v9)
  {
    case 9:
      v10 = (*(_QWORD *)String ^ 0x767275632E726961 | *(unsigned __int8 *)(String + 8) ^ 0x65) == 0;
      v11 = 0x100000002;
LABEL_13:
      if (!v10)
        v11 = 0;
      break;
    case 16:
      if (*(_QWORD *)String ^ 0x6E756F622E726961 | *(_QWORD *)(String + 8) ^ 0x786F625F676E6964)
        v11 = 0;
      else
        v11 = 0x100000003;
      break;
    case 12:
      v10 = (*(_QWORD *)String ^ 0x616972742E726961 | *(unsigned int *)(String + 8) ^ 0x656C676ELL) == 0;
      v11 = 0x100000001;
      goto LABEL_13;
    default:
      v11 = 0;
      break;
  }
  if (v11 <= 0x100000000)
    LODWORD(v11) = 0;
  return (5 - v11);
}

void sub_22E614CA8(uint64_t a1, uint64_t a2)
{
  const char *v4;
  char *v5;
  uint64_t FunctionName;
  char *v7;
  unint64_t v8;
  _BYTE v9[16];

  MEMORY[0x23489D8D8](v9);
  v4 = (const char *)a2;
  if (*(char *)(a2 + 23) < 0)
    v4 = *(const char **)a2;
  if ((llvm::ItaniumPartialDemangler::partialDemangle((llvm::ItaniumPartialDemangler *)v9, v4) & 1) == 0)
  {
    v5 = (char *)malloc_type_malloc(0x80uLL, 0x100004077774924uLL);
    v8 = 0;
    FunctionName = llvm::ItaniumPartialDemangler::getFunctionName((llvm::ItaniumPartialDemangler *)v9, v5, &v8);
    if (FunctionName)
    {
      v7 = (char *)FunctionName;
      MEMORY[0x2348A0C20](a2, FunctionName, v8 - 1);
      v5 = v7;
    }
    free(v5);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  llvm::ItaniumPartialDemangler::~ItaniumPartialDemangler((llvm::ItaniumPartialDemangler *)v9);
}

void sub_22E614D74(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  int v10;
  unsigned __int8 *v11;
  unint64_t *v13;
  uint64_t v14;
  std::string::size_type v15;
  uint64_t v16;
  char v17;
  BOOL v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unint64_t v24;
  std::string *v25;
  std::string::size_type *v26;
  std::string::size_type v27;
  std::string::size_type v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  BOOL v39;
  _BYTE *v40;
  size_t v41;
  size_t v42;
  const std::error_category *v43;
  uint64_t v44;
  std::string *v45;
  size_t size;
  uint64_t *v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  char *v54;
  uint64_t v55;
  size_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t *v61;
  uint64_t v62;
  unsigned __int8 *p_dst;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *__src;
  int v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  unsigned __int8 *v89;
  uint64_t v90;
  std::error_code v91;
  std::string v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  void *v97[2];
  uint64_t v98;
  unsigned __int8 *__dst;
  unint64_t v100;
  unint64_t v101;
  __int16 v102;
  uint64_t v103;
  const std::error_category *v104;
  char v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v10 = *(_DWORD *)(a1 + 112);
  v11 = (unsigned __int8 *)a2[57];
  a2[57] = 0;
  if (!v11)
  {
    sub_22E6154DC((uint64_t)&__dst, (uint64_t)a2, a3, a4, v10);
    v11 = __dst;
    if (v10 != 3 && __dst == 0)
    {
      *a5 = 0;
      return;
    }
  }
  __src = (void *)a3;
  v86 = a4;
  v85 = v10;
  llvm::LLVMContext::setOpaquePointers(*(llvm::LLVMContext **)(a1 + 208));
  v13 = (unint64_t *)(a1 + 128);
  v14 = a2[2];
  if (*(_DWORD *)(a1 + 136) || (v15 = *(_QWORD *)(v14 + 832), v16 = *(_QWORD *)(v14 + 840), v15 == v16))
  {
LABEL_78:
    if ((*(_BYTE *)(v14 + 330) & 1) != 0)
    {
      v55 = sub_22E670E44(a2[24]);
      v14 = a2[2];
    }
    else
    {
      v55 = 0;
    }
    v56 = v86;
    if ((*(_DWORD *)(v14 + 388) & 0x400) != 0)
      v57 = sub_22F2A0CC0(a2[24]);
    else
      v57 = 0;
    v83 = operator new();
    v58 = a2[4];
    v90 = *(_QWORD *)(a2[20] + 8);
    v59 = (unsigned int *)(v90 + 8);
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
    v87 = a5;
    if (v86 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v61 = (uint64_t *)a2[2];
    v81 = v61[7];
    v82 = v61[5];
    v79 = v61[2];
    v80 = (uint64_t)(v61 + 37);
    v62 = *v61;
    if (v86 >= 0x17)
    {
      v64 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v86 | 7) != 0x17)
        v64 = v86 | 7;
      v65 = v55;
      v66 = v64 + 1;
      p_dst = (unsigned __int8 *)operator new(v64 + 1);
      v67 = v66 | 0x8000000000000000;
      v55 = v65;
      v56 = v86;
      v100 = v86;
      v101 = v67;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v101) = v86;
      p_dst = (unsigned __int8 *)&__dst;
      if (!v86)
        goto LABEL_94;
    }
    memmove(p_dst, __src, v56);
LABEL_94:
    p_dst[v56] = 0;
    v97[0] = &v98;
    v97[1] = (void *)0x400000000;
    if (*(_DWORD *)(a1 + 136))
      sub_22E618B48((uint64_t)v97, (uint64_t)v13);
    v89 = v11;
    sub_22F296AF8(v83, v85, v58, &v90, v82, v81, v80, v79, v62, (uint64_t)&__dst, (uint64_t)v97, (uint64_t *)&v89, *(llvm::LLVMContext **)(a1 + 208), v55, v57);
    v68 = (uint64_t)v89;
    v89 = 0;
    if (v68)
      (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
    sub_22F297394(v97);
    if (SHIBYTE(v101) < 0)
      operator delete(__dst);
    v69 = v90;
    if (v90)
    {
      v70 = (unsigned int *)(v90 + 8);
      do
      {
        v71 = __ldaxr(v70);
        v72 = v71 - 1;
      }
      while (__stlxr(v72, v70));
      if (!v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
    }
    *(_QWORD *)(a1 + 224) = v83;
    v73 = a2[2];
    if ((*(_QWORD *)(v73 + 392) & 0x1E00000000000000) != 0 && (*(_BYTE *)(v73 + 376) & 2) != 0)
    {
      v74 = *(_QWORD *)(v83 + 256);
      v75 = a2[24];
      v76 = operator new();
      *(_QWORD *)v76 = &off_24FA68698;
      *(_QWORD *)(v76 + 8) = v74;
      *(_QWORD *)(v76 + 16) = v75;
      *(_QWORD *)(v76 + 24) = 0;
      *(_DWORD *)(v76 + 32) = 0;
      *(_QWORD *)(v76 + 40) = v76 + 56;
      *(_QWORD *)(v76 + 48) = 0x400000000;
      v77 = a2[24];
      v88 = v76;
      sub_22F2968D4(v77, &v88);
      v78 = v88;
      v88 = 0;
      if (v78)
        (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
    }
    *v87 = v83;
    return;
  }
  while (1)
  {
    v17 = *(_BYTE *)(v15 + 23);
    v18 = v17 < 0;
    if (v17 >= 0)
      v19 = (_BYTE *)v15;
    else
      v19 = *(_BYTE **)v15;
    v20 = v17 & 0x7F;
    if (v18)
      v21 = *(_QWORD *)(v15 + 8);
    else
      v21 = v20;
    sub_22F1D1B6C(a2[20], v19, v21);
    if ((v105 & 1) == 0)
    {
      llvm::getOwningLazyBitcodeModule();
      if ((v100 & 1) != 0)
      {
        v33 = a5;
        v34 = __dst;
        __dst = 0;
        v92.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
        v92.__r_.__value_.__l.__size_ = v15;
        if (v34)
        {
          if ((*(unsigned int (**)(unsigned __int8 *, _QWORD))(*(_QWORD *)v34 + 48))(v34, MEMORY[0x24BED7780]))
          {
            v47 = (uint64_t *)*((_QWORD *)v34 + 1);
            v48 = (uint64_t *)*((_QWORD *)v34 + 2);
            if (v47 == v48)
            {
              v49 = 0;
            }
            else
            {
              v49 = 0;
              do
              {
                v96 = v49;
                v51 = *v47;
                *v47 = 0;
                v94 = v51;
                sub_22E618D34(&v95, &v94, &v92);
                sub_22F2436E4(&v96, &v95, &v91);
                v49 = *(char **)&v91.__val_;
                *(_QWORD *)&v91.__val_ = 0;
                if (v95)
                  (*(void (**)(char *))(*(_QWORD *)v95 + 8))(v95);
                v52 = v94;
                v94 = 0;
                if (v52)
                  (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
                if (v96)
                  (*(void (**)(char *))(*(_QWORD *)v96 + 8))(v96);
                ++v47;
              }
              while (v47 != v48);
            }
            v93 = v49;
            (*(void (**)(unsigned __int8 *))(*(_QWORD *)v34 + 8))(v34);
            v13 = (unint64_t *)(a1 + 128);
          }
          else
          {
            *(_QWORD *)&v91.__val_ = v34;
            sub_22E618D34(&v93, &v91, &v92);
            v50 = *(_QWORD *)&v91.__val_;
            *(_QWORD *)&v91.__val_ = 0;
            if (v50)
              (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
          }
        }
        else
        {
          v93 = 0;
        }
        sub_22F29686C((uint64_t)v13);
        a5 = v33;
        *v33 = 0;
        v30 = 1;
        goto LABEL_21;
      }
      v22 = __dst;
      __dst = 0;
      v92.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
      LOWORD(v92.__r_.__value_.__r.__words[1]) = *(_WORD *)(v15 + 24);
      HIDWORD(v92.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v15 + 28);
      v23 = *(unsigned int *)(a1 + 136);
      v24 = *(_QWORD *)(a1 + 128);
      if (v23 >= *(_DWORD *)(a1 + 140))
      {
        v53 = v24 + 16 * v23 > (unint64_t)&v92;
        if (v24 <= (unint64_t)&v92 && v53)
        {
          v54 = (char *)&v92 - v24;
          sub_22F29729C((uint64_t)v13);
          v24 = *v13;
          v25 = (std::string *)&v54[*v13];
          goto LABEL_18;
        }
        sub_22F29729C((uint64_t)v13);
        v24 = *v13;
      }
      v25 = &v92;
LABEL_18:
      v26 = (std::string::size_type *)(v24 + 16 * *(unsigned int *)(a1 + 136));
      v27 = v25->__r_.__value_.__r.__words[0];
      v25->__r_.__value_.__r.__words[0] = 0;
      *v26 = v27;
      v26[1] = v25->__r_.__value_.__l.__size_;
      ++*(_DWORD *)(a1 + 136);
      v28 = v92.__r_.__value_.__r.__words[0];
      v92.__r_.__value_.__r.__words[0] = 0;
      if (v28)
      {
        v29 = MEMORY[0x23489F15C]();
        MEMORY[0x2348A0E9C](v29, 0x10B2C407FF26C1CLL);
      }
      v30 = 0;
LABEL_21:
      sub_22E5C536C((uint64_t *)&__dst);
      goto LABEL_22;
    }
    v32 = a2[4];
    *(_QWORD *)(v32 + 312) = 0x800000000;
    if (*(char *)(v32 + 311) < 0)
    {
      **(_BYTE **)(v32 + 288) = 0;
      *(_QWORD *)(v32 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v32 + 288) = 0;
      *(_BYTE *)(v32 + 311) = 0;
    }
    __dst = (unsigned __int8 *)(v32 + 320);
    v100 = 0;
    v101 = v32;
    v102 = 1;
    *(_BYTE *)(v32 + 320) = 0;
    *(_DWORD *)(v32 + 664) = 0;
    v35 = *(unsigned int *)(v32 + 776);
    if ((_DWORD)v35)
    {
      v36 = *(_QWORD *)(v32 + 768);
      v37 = 56 * v35;
      do
      {
        if (*(char *)(v36 + v37 - 9) < 0)
          operator delete(*(void **)(v36 + v37 - 32));
        v37 -= 56;
      }
      while (v37);
    }
    *(_DWORD *)(v32 + 776) = 0;
    v38 = *(_BYTE *)(v15 + 23);
    v39 = v38 < 0;
    if (v38 >= 0)
      v40 = (_BYTE *)v15;
    else
      v40 = *(_BYTE **)v15;
    v41 = v38 & 0x7F;
    if (v39)
      v42 = *(_QWORD *)(v15 + 8);
    else
      v42 = v41;
    sub_22E3B89A8(&__dst, v40, v42);
    if ((v105 & 1) != 0)
    {
      v44 = v103;
      v43 = v104;
    }
    else
    {
      v43 = std::system_category();
      v44 = 0;
    }
    v13 = (unint64_t *)(a1 + 128);
    *(_QWORD *)&v91.__val_ = v44;
    v91.__cat_ = v43;
    std::error_code::message(&v92, &v91);
    if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = &v92;
    else
      v45 = (std::string *)v92.__r_.__value_.__r.__words[0];
    if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v92.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v92.__r_.__value_.__l.__size_;
    sub_22E3B89A8(&__dst, v45, size);
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v92.__r_.__value_.__l.__data_);
    sub_22E3BB0B8((uint64_t)&__dst);
    sub_22F29686C(a1 + 128);
    *a5 = 0;
    v30 = 1;
LABEL_22:
    if ((v105 & 1) == 0)
    {
      v31 = v103;
      v103 = 0;
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    }
    if (v30)
      break;
    v15 += 32;
    if (v15 == v16)
    {
      v14 = a2[2];
      goto LABEL_78;
    }
  }
  if (v11)
    (*(void (**)(unsigned __int8 *))(*(_QWORD *)v11 + 8))(v11);
}

void sub_22E6154DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  __asm { BR              X10 }
}

void sub_22E61550C(uint64_t a1, _QWORD *a2, _BYTE *a3, uint64_t a4)
{
  _QWORD *v4;

  sub_22E6CE29C(a2, a3, a4, 1, v4);
}

unint64_t sub_22E6155EC(_QWORD *a1, unsigned int a2)
{
  unint64_t result;
  uint64_t v3;

  result = (unint64_t)sub_22E49F3DC(a1, a2);
  if (result)
  {
    result = *(_QWORD *)((*(_QWORD *)(result + 16) & 0xFFFFFFFFFFFFFFF8) + 8);
    if (result)
    {
      do
      {
        v3 = *(_QWORD *)(result + 8);
        result = v3 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v3 & 2) != 0 && result);
    }
  }
  return result;
}

void sub_22E61562C(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  size_t v29;
  size_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  __int128 *v33;
  size_t v34;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  BOOL v48;
  void *v49;
  size_t v50;
  size_t v51;
  void *v52;
  size_t v53;
  uint64_t v54;
  llvm::Module *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  size_t v84;
  uint64_t v85;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int v88;
  llvm *v89;
  llvm *v90;
  unsigned int *v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  llvm::LLVMContext *v101;
  __int128 *v102;
  void **__src;
  __int128 *__srca;
  llvm *v105;
  unsigned int *v106;
  unsigned __int8 *v107;
  uint64_t v108;
  _QWORD v109[3];
  __int16 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  int v115[2];
  __int128 v116;
  __int128 v117;
  char v118;
  llvm *v119;
  __int128 v120;
  __int128 v121;
  _BYTE v122[1728];
  void *v123[2];
  uint64_t v124;
  __int128 v125;
  void *v126[2];
  __int128 v127;
  int v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 __p;
  uint64_t v133;
  char *v134[2];
  uint64_t v135;
  unsigned __int8 *v136;
  uint64_t v137;
  uint64_t v138;
  __int16 v139;
  uint64_t v140;

  v140 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 88) != 2)
  {
    sub_22F2ABD40((_QWORD *)a1);
    return;
  }
  v2 = *(_DWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 104);
  if (*(_BYTE *)(a1 + 64))
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v6 = *(_BYTE *)(a1 + 31);
    if (v6 >= 0)
      v4 = a1 + 8;
    else
      v4 = *(_QWORD *)(a1 + 8);
    if (v6 >= 0)
      v5 = v6 & 0x7F;
    else
      v5 = *(_QWORD *)(a1 + 16);
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = *(_QWORD *)(v3 + 32);
  sub_22E6154DC((uint64_t)&v119, *(_QWORD *)(a1 + 104), v4, v5, *(_DWORD *)(a1 + 112));
  if (v2 == 3 || v119 != 0)
  {
    sub_22E490D40(*(_QWORD **)(v3 + 176), *(_DWORD *)(*(_QWORD *)(v3 + 176) + 344), 0, &v116);
    if (!v118)
      goto LABEL_29;
    v113 = v116;
    v114 = v117;
    v10 = *(_QWORD *)(a1 + 104);
    v11 = *(_QWORD *)(v10 + 176);
    llvm::LLVMContext::setOpaquePointers(*(llvm::LLVMContext **)(a1 + 208));
    v128 = 0;
    v127 = 0u;
    *(_OWORD *)v126 = 0u;
    v125 = 0u;
    v129 = 0u;
    v130 = 0u;
    v131 = 0u;
    __p = 0u;
    v133 = 0;
    v134[0] = (char *)&v135;
    v134[1] = (char *)0x400000000;
    v120 = v113;
    v121 = v114;
    llvm::parseIR();
    if (!*(_QWORD *)v115)
    {
      *(_QWORD *)v115 = 0;
      if (SDWORD2(v127) < 1)
      {
        v21 = 0;
      }
      else
      {
        v17 = sub_22E6155EC((_QWORD *)v11, *(_DWORD *)(v11 + 344));
        v18 = DWORD2(v127);
        v19 = HIDWORD(v127) + 1;
        v20 = sub_22F1E1A48(v11, v17);
        v21 = sub_22F1E38E8((uint64_t *)v11, v20, v18, v19);
      }
      if ((SBYTE7(v130) & 0x80u) == 0)
        v33 = &v129;
      else
        v33 = (__int128 *)v129;
      if ((SBYTE7(v130) & 0x80u) == 0)
        v34 = BYTE7(v130) & 0x7F;
      else
        v34 = *((_QWORD *)&v129 + 1);
      if (v34 >= 7 && *(_DWORD *)v33 == 1869771365 && *(_DWORD *)((char *)v33 + 3) == 540701295)
      {
        if ((SBYTE7(v130) & 0x80u) == 0)
          v33 = (__int128 *)((char *)&v129 + 7);
        else
          v33 = (__int128 *)(v129 + 7);
        v34 -= 7;
      }
      __srca = v33;
      v36 = sub_22F41A810(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 32), 4, "%0", 2uLL);
      v37 = *(_QWORD *)(v10 + 32);
      *(_DWORD *)(v37 + 312) = v21;
      *(_DWORD *)(v37 + 316) = v36;
      if (*(char *)(v37 + 311) < 0)
      {
        **(_BYTE **)(v37 + 288) = 0;
        *(_QWORD *)(v37 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v37 + 288) = 0;
        *(_BYTE *)(v37 + 311) = 0;
      }
      v136 = (unsigned __int8 *)(v37 + 320);
      v137 = 0;
      v138 = v37;
      v139 = 1;
      *(_BYTE *)(v37 + 320) = 0;
      *(_DWORD *)(v37 + 664) = 0;
      v38 = *(unsigned int *)(v37 + 776);
      if ((_DWORD)v38)
      {
        v39 = *(_QWORD *)(v37 + 768);
        v40 = 56 * v38;
        do
        {
          if (*(char *)(v39 + v40 - 9) < 0)
            operator delete(*(void **)(v39 + v40 - 32));
          v40 -= 56;
        }
        while (v40);
      }
      *(_DWORD *)(v37 + 776) = 0;
      sub_22E3B89A8(&v136, __srca, v34);
      sub_22E3BB0B8((uint64_t)&v136);
      *(_QWORD *)v115 = 0;
    }
    sub_22E616E68(v134);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    if (SHIBYTE(v131) < 0)
      operator delete(*((void **)&v130 + 1));
    if (SBYTE7(v130) < 0)
      operator delete((void *)v129);
    if (SBYTE7(v127) < 0)
      operator delete(v126[0]);
    v12 = *(_QWORD *)v115;
    *(_QWORD *)v115 = 0;
    v13 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v12;
    if (v13)
    {
      v14 = MEMORY[0x23489F15C]();
      MEMORY[0x2348A0E9C](v14, 0x10B2C407FF26C1CLL);
      v15 = *(_QWORD *)v115;
      *(_QWORD *)v115 = 0;
      if (v15)
      {
        v16 = MEMORY[0x23489F15C]();
        MEMORY[0x2348A0E9C](v16, 0x10B2C407FF26C1CLL);
      }
      v12 = *(_QWORD *)(a1 + 120);
    }
    if (!v12)
      goto LABEL_29;
    v102 = (__int128 *)(v7 + 296);
    v22 = *(_QWORD *)(v3 + 16);
    v23 = *(_QWORD *)(v22 + 16);
    v24 = *(_BYTE *)(v12 + 239);
    v25 = v24 & 0x7F;
    if (v24 >= 0)
      v26 = v24 & 0x7F;
    else
      v26 = *(_QWORD *)(v12 + 224);
    v27 = *(_BYTE *)(v23 + 23);
    v28 = v27;
    __src = *(void ***)(v22 + 16);
    v29 = *(_QWORD *)(v23 + 8);
    v30 = v27 & 0x7F;
    if (v27 >= 0)
      v31 = v27 & 0x7F;
    else
      v31 = *(_QWORD *)(v23 + 8);
    if (v26 != v31)
      goto LABEL_47;
    if (v28 >= 0)
      v32 = *(unsigned __int8 **)(v22 + 16);
    else
      v32 = (unsigned __int8 *)*__src;
    if ((*(_BYTE *)(v12 + 239) & 0x80) != 0)
    {
      if (memcmp(*(const void **)(v12 + 216), v32, *(_QWORD *)(v12 + 224)))
      {
LABEL_47:
        if ((*(_BYTE *)(v22 + 329) & 1) != 0)
        {
          v42 = v7 + 296;
          v41 = __src;
        }
        else
        {
          *(_QWORD *)(v8 + 312) = 0x37100000000;
          if (*(char *)(v8 + 311) < 0)
          {
            **(_BYTE **)(v8 + 288) = 0;
            *(_QWORD *)(v8 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v8 + 288) = 0;
            *(_BYTE *)(v8 + 311) = 0;
          }
          v125 = (unint64_t)(v8 + 320);
          v126[0] = (void *)v8;
          LOWORD(v126[1]) = 1;
          *(_BYTE *)(v8 + 320) = 0;
          *(_DWORD *)(v8 + 664) = 0;
          v44 = *(unsigned int *)(v8 + 776);
          if ((_DWORD)v44)
          {
            v45 = *(_QWORD *)(v8 + 768);
            v46 = 56 * v44;
            do
            {
              if (*(char *)(v45 + v46 - 9) < 0)
                operator delete(*(void **)(v45 + v46 - 32));
              v46 -= 56;
            }
            while (v46);
          }
          *(_DWORD *)(v8 + 776) = 0;
          v47 = *((_BYTE *)__src + 23);
          v48 = v47 < 0;
          if (v47 >= 0)
            v49 = __src;
          else
            v49 = *__src;
          v50 = v47 & 0x7F;
          if (v48)
            v51 = (size_t)__src[1];
          else
            v51 = v50;
          sub_22E3B89A8((unsigned __int8 **)&v125, v49, v51);
          sub_22E3BB0B8((uint64_t)&v125);
          v12 = *(_QWORD *)(a1 + 120);
          LOBYTE(v28) = *((_BYTE *)__src + 23);
          v41 = __src;
          v29 = (size_t)__src[1];
          v30 = v28 & 0x7F;
          v42 = v7 + 296;
        }
        if ((v28 & 0x80u) == 0)
          v52 = v41;
        else
          v52 = *v41;
        if ((v28 & 0x80u) == 0)
          v53 = v30;
        else
          v53 = v29;
        sub_22E616030(v12, v52, v53);
        v12 = *(_QWORD *)(a1 + 120);
LABEL_102:
        sub_22E3B733C(v12, v42, v8);
        v54 = *(_QWORD *)(a1 + 120);
        v111 = v116;
        v112 = v117;
        sub_22F243214(v54, v42);
        if ((*(_BYTE *)(*(_QWORD *)(v3 + 16) + 300) & 0x80) != 0
          && llvm::InlineAsm::containArchDependentInlineAsm(*(llvm::InlineAsm **)(a1 + 120), v55))
        {
          v56 = *(_QWORD *)(v3 + 32);
          *(_QWORD *)(v56 + 312) = 0x31C00000000;
          if (*(char *)(v56 + 311) < 0)
          {
            **(_BYTE **)(v56 + 288) = 0;
            *(_QWORD *)(v56 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v56 + 288) = 0;
            *(_BYTE *)(v56 + 311) = 0;
          }
          v109[0] = v56 + 320;
          v109[1] = 0;
          v109[2] = v56;
          v110 = 1;
          *(_BYTE *)(v56 + 320) = 0;
          *(_DWORD *)(v56 + 664) = 0;
          v57 = *(unsigned int *)(v56 + 776);
          if ((_DWORD)v57)
          {
            v58 = *(_QWORD *)(v56 + 768);
            v59 = 56 * v57;
            do
            {
              if (*(char *)(v58 + v59 - 9) < 0)
                operator delete(*(void **)(v58 + v59 - 32));
              v59 -= 56;
            }
            while (v59);
          }
          *(_DWORD *)(v56 + 776) = 0;
          sub_22E3BB0B8((uint64_t)v109);
LABEL_29:
          if (v119)
            (*(void (**)(llvm *))(*(_QWORD *)v119 + 8))(v119);
          return;
        }
        *(_QWORD *)&v120 = **(_QWORD **)(a1 + 120);
        v101 = (llvm::LLVMContext *)v120;
        llvm::LLVMContext::getDiagnosticHandler((llvm::LLVMContext *)v120);
        v60 = *(_QWORD *)(v3 + 32);
        v61 = *(_QWORD *)(*(_QWORD *)(v3 + 160) + 8);
        v108 = v61;
        v62 = (unsigned int *)(v61 + 8);
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
        v64 = *(uint64_t **)(v3 + 16);
        v65 = v64[5];
        v66 = v64[7];
        v67 = (uint64_t)(v64 + 37);
        v68 = v64[2];
        v69 = *v64;
        v70 = *(_QWORD *)(a1 + 120);
        v123[0] = &v124;
        v123[1] = (void *)0x400000000;
        if (*(_DWORD *)(a1 + 136))
        {
          v99 = v68;
          v100 = v60;
          v71 = v65;
          v97 = v70;
          v98 = v66;
          v72 = v64 + 37;
          sub_22E618B48((uint64_t)v123, a1 + 128);
          v70 = v97;
          v66 = v98;
          v68 = v99;
          v60 = v100;
          v67 = (uint64_t)v72;
          v65 = v71;
        }
        sub_22F296CFC((uint64_t)&v125, v2, v60, &v108, v65, v66, v67, v68, v69, v70, (uint64_t)v123, *(llvm::LLVMContext **)(a1 + 208));
        sub_22F297394(v123);
        if (v61)
        {
          do
          {
            v73 = __ldaxr(v62);
            v74 = v73 - 1;
          }
          while (__stlxr(v74, v62));
          if (!v74)
            (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
        }
        llvm::LLVMContext::setDiscardValueNames(v101);
        v75 = operator new();
        *(_QWORD *)v75 = &off_24FA66AD8;
        *(_QWORD *)(v75 + 8) = 0;
        *(_QWORD *)(v75 + 16) = 0;
        *(_QWORD *)(v75 + 24) = v102;
        *(_QWORD *)(v75 + 32) = &v125;
        v136 = (unsigned __int8 *)v75;
        llvm::LLVMContext::setDiagnosticHandler();
        v76 = v136;
        v136 = 0;
        if (v76)
          (*(void (**)(unsigned __int8 *))(*(_QWORD *)v76 + 8))(v76);
        llvm::setupLLVMOptimizationRemarks();
        v77 = v136;
        if ((v137 & 1) != 0)
        {
          v78 = 0;
          v136 = 0;
          if (v77)
          {
            v107 = v77;
            sub_22E617234((uint64_t)v122, v102);
            sub_22E6160FC((char *)&v107, v8, (uint64_t)v122);
            sub_22E618378((uint64_t)v122);
            if (v107)
              (*(void (**)(unsigned __int8 *))(*(_QWORD *)v107 + 8))(v107);
            goto LABEL_144;
          }
        }
        else
        {
          v78 = v136;
        }
        v136 = 0;
        *(_QWORD *)v115 = v78;
        v79 = *(uint64_t **)(v3 + 16);
        v80 = v79[5];
        v81 = *v79;
        v82 = *(_QWORD *)(v3 + 40);
        v83 = (const char *)(v82 + 104);
        if ((*(char *)(v82 + 127) & 0x80000000) == 0 || (v83 = *(const char **)v83) != 0)
          v84 = strlen(v83);
        else
          v84 = 0;
        v85 = *(_QWORD *)(a1 + 120);
        v86 = *(unsigned int **)(*(_QWORD *)(v3 + 160) + 8);
        v106 = v86;
        if (v86)
        {
          v87 = v86 + 2;
          do
            v88 = __ldxr(v87);
          while (__stxr(v88 + 1, v87));
        }
        v89 = v119;
        v119 = 0;
        v105 = v89;
        sub_22E3B4FC0(v8, v80, (uint64_t)v102, (uint64_t)__src, v81, (uint64_t)v83, v84, v85, v2, &v106, &v105);
        v90 = v105;
        v105 = 0;
        if (v90)
          (*(void (**)(llvm *))(*(_QWORD *)v90 + 8))(v90);
        v91 = v106;
        if (v106)
        {
          v92 = v106 + 2;
          do
          {
            v93 = __ldaxr(v92);
            v94 = v93 - 1;
          }
          while (__stlxr(v94, v92));
          if (!v94)
            (*(void (**)(unsigned int *))(*(_QWORD *)v91 + 8))(v91);
        }
        v95 = *(_QWORD *)v115;
        if (*(_QWORD *)v115)
        {
          *(_BYTE *)(*(_QWORD *)v115 + 24) = 1;
          *(_QWORD *)v115 = 0;
          sub_22E3B4CBC((uint64_t)v115, v95);
        }
LABEL_144:
        sub_22F297424((uint64_t)&v136);
        sub_22E618844((uint64_t)&v125);
        llvm::LLVMContext::setDiagnosticHandler();
        v96 = *((_QWORD *)&v120 + 1);
        *((_QWORD *)&v120 + 1) = 0;
        if (v96)
          (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
        goto LABEL_29;
      }
    }
    else if ((v24 & 0x7F) != 0)
    {
      v43 = 0;
      while (*(unsigned __int8 *)(v12 + v43 + 216) == v32[v43])
      {
        if (v25 == ++v43)
          goto LABEL_81;
      }
      goto LABEL_47;
    }
LABEL_81:
    v42 = v7 + 296;
    goto LABEL_102;
  }
}

double sub_22E616030(uint64_t a1, void *__src, size_t __len)
{
  __int128 *p_dst;
  size_t v7;
  size_t v8;
  void **v9;
  double result;
  __int128 __dst;
  unint64_t v12;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v12 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v12) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  v9 = (void **)(a1 + 216);
  if (*(char *)(a1 + 239) < 0)
    operator delete(*v9);
  result = *(double *)&__dst;
  *(_OWORD *)v9 = __dst;
  *(_QWORD *)(a1 + 232) = v12;
  return result;
}

char *sub_22E6160FC(char *result, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t *v4;
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9[2];
  uint64_t v10[2];
  uint64_t v11[2];
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;

  v3 = *(char **)result;
  *(_QWORD *)result = 0;
  v11[0] = a2;
  v11[1] = a3;
  v10[0] = a2;
  v10[1] = a3;
  v9[0] = a2;
  v9[1] = a3;
  if (v3)
  {
    if ((*(unsigned int (**)(char *, _QWORD))(*(_QWORD *)v3 + 48))(v3, MEMORY[0x24BED7780]))
    {
      v4 = (uint64_t *)*((_QWORD *)v3 + 1);
      v5 = (uint64_t *)*((_QWORD *)v3 + 2);
      if (v4 == v5)
      {
        v6 = 0;
      }
      else
      {
        v6 = 0;
        do
        {
          v15 = v6;
          v7 = *v4;
          *v4 = 0;
          v13 = v7;
          sub_22E616ED8(&v14, &v13, v11, v10, v9);
          sub_22F2436E4(&v15, &v14, &v16);
          v6 = v16;
          v16 = 0;
          if (v14)
            (*(void (**)(char *))(*(_QWORD *)v14 + 8))(v14);
          v8 = v13;
          v13 = 0;
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          if (v15)
            (*(void (**)(char *))(*(_QWORD *)v15 + 8))(v15);
          ++v4;
        }
        while (v4 != v5);
      }
      v12 = v6;
      return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v3 + 8))(v3);
    }
    else
    {
      v16 = v3;
      sub_22E616ED8(&v12, &v16, v11, v10, v9);
      result = v16;
      if (v16)
        return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v16 + 8))(v16);
    }
  }
  else
  {
    v12 = 0;
  }
  return result;
}

uint64_t sub_22E616258(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 1200);
  if (result)
    return llvm::Regex::match();
  return result;
}

uint64_t sub_22E616274(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 1152);
  if (result)
    return llvm::Regex::match();
  return result;
}

uint64_t sub_22E616290(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 1104);
  if (result)
    return llvm::Regex::match();
  return result;
}

BOOL sub_22E6162AC(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 24);
  return v1[150] || v1[144] || v1[138] != 0;
}

uint64_t sub_22E6162D8(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  int v9;
  _QWORD v10[4];
  int v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;

  v14 = a2;
  v4 = &v14;
  if (!a2)
    v4 = 0;
  if ((a2 & 1) != 0)
    v4 = (uint64_t *)((a2 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v5 = *v4;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 1992);
  llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
  v10[0] = &unk_24FAC3168;
  v10[3] = v5;
  v11 = 0;
  v12 = v6;
  v13 = "LLVM IR generation of declaration";
  if (*(_BYTE *)(a1 + 253))
  {
    v8 = *(_DWORD *)(a1 + 248);
    *(_DWORD *)(a1 + 248) = v8 + 1;
    if (!v8)
      llvm::Timer::startTimer((llvm::Timer *)(a1 + 88));
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 256) + 24))(*(_QWORD *)(a1 + 256), a2);
  if (*(_BYTE *)(a1 + 253))
  {
    v9 = *(_DWORD *)(a1 + 248) - 1;
    *(_DWORD *)(a1 + 248) = v9;
    if (!v9)
      llvm::Timer::stopTimer((llvm::Timer *)(a1 + 88));
  }
  llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v10);
  return 1;
}

void sub_22E6163CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[4];
  int v6;
  uint64_t v7;
  const char *v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 1992);
  llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
  v5[0] = &unk_24FAC3168;
  v5[3] = a2;
  v6 = 0;
  v7 = v4;
  v8 = "LLVM IR generation of inline function";
  if (*(_BYTE *)(a1 + 253))
    llvm::Timer::startTimer((llvm::Timer *)(a1 + 88));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 256) + 32))(*(_QWORD *)(a1 + 256), a2);
  if (*(_BYTE *)(a1 + 253))
    llvm::Timer::stopTimer((llvm::Timer *)(a1 + 88));
  llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v5);
}

_BYTE *sub_22E616478(_BYTE *result)
{
  if (!result[252])
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 24))(result);
  return result;
}

llvm *sub_22E616490(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  llvm *v6;
  llvm *result;
  llvm::LLVMContext **v8;
  llvm::LLVMContext *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  llvm::Value *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t j;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t *v44;
  __int128 v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  size_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int v61;
  llvm *v62;
  llvm *v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  llvm::Function *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  const char *v78;
  void (**v79)(const char *, uint64_t);
  _QWORD *v80;
  void (**v81)(_QWORD *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  llvm *v86;
  unsigned int *v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  llvm *v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE v95[1728];
  uint64_t v96;
  char v97;
  _QWORD v98[3];
  _QWORD *v99;
  _QWORD v100[3];
  const char *v101;
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  if (llvm::getTimeTraceProfilerInstance((llvm *)a1))
    llvm::timeTraceProfilerBegin();
  llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
  v100[0] = MEMORY[0x24BED83E8] + 16;
  v101 = "Per-file LLVM IR generation";
  if (*(_BYTE *)(a1 + 253))
  {
    v4 = *(_DWORD *)(a1 + 248);
    *(_DWORD *)(a1 + 248) = v4 + 1;
    if (!v4)
      llvm::Timer::startTimer((llvm::Timer *)(a1 + 88));
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 256) + 48))(*(_QWORD *)(a1 + 256), a2);
  if (*(_BYTE *)(a1 + 253))
  {
    v5 = *(_DWORD *)(a1 + 248) - 1;
    *(_DWORD *)(a1 + 248) = v5;
    if (!v5)
      llvm::Timer::stopTimer((llvm::Timer *)(a1 + 88));
  }
  *(_BYTE *)(a1 + 252) = 1;
  llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v100);
  result = (llvm *)llvm::getTimeTraceProfilerInstance(v6);
  if (result)
    result = (llvm *)llvm::timeTraceProfilerEnd(result);
  v8 = *(llvm::LLVMContext ***)(*(_QWORD *)(a1 + 256) + 1808);
  if (!v8)
    return result;
  v9 = *v8;
  llvm::LLVMContext::getDiagnosticHandler(*v8);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = (_QWORD *)operator new();
  *v11 = &off_24FA66AD8;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v10;
  v11[4] = a1;
  v100[0] = v11;
  llvm::LLVMContext::setDiagnosticHandler();
  v12 = v100[0];
  v100[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  llvm::setupLLVMOptimizationRemarks();
  v13 = v96;
  if ((v97 & 1) != 0)
  {
    v96 = 0;
    if (v13)
    {
      v91 = v13;
      v84 = *(_QWORD *)(a1 + 16);
      sub_22E617234((uint64_t)v95, *(__int128 **)(a1 + 40));
      sub_22E6160FC((char *)&v91, v84, (uint64_t)v95);
      sub_22E618378((uint64_t)v95);
      if (v91)
        (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
      goto LABEL_127;
    }
    v85 = a2;
    v14 = 0;
    v96 = 0;
    v90 = 0;
  }
  else
  {
    v85 = a2;
    v14 = 0;
    v96 = 0;
    v90 = v13;
    if (v13)
    {
      if ((*(_QWORD *)(*(_QWORD *)(a1 + 40) + 96) & 0x600000000000) != 0)
        llvm::LLVMContext::setDiagnosticsHotnessRequested(v9);
      v14 = v13;
    }
  }
  v15 = *(_QWORD *)(a1 + 40);
  if ((*(_BYTE *)(v15 + 30) & 0x40) != 0)
  {
    llvm::LLVMContext::setMisExpectWarningRequested(v9);
    v15 = *(_QWORD *)(a1 + 40);
  }
  if (*(_BYTE *)(v15 + 1696))
    llvm::LLVMContext::setDiagnosticsMisExpectTolerance();
  v16 = *(unsigned int *)(a1 + 272);
  if (!(_DWORD)v16)
  {
LABEL_27:
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 256) + 1808);
    v18 = v17 + 24;
    for (i = *(_QWORD *)(v17 + 32); ; i = *(_QWORD *)(i + 8))
    {
      if (i == v18)
      {
        v47 = *(_QWORD *)(a1 + 40);
        if ((*(_BYTE *)(v47 + 3) & 1) != 0)
        {
          sub_22EF581A4(v85);
          sub_22E6188F4(v85 + 2032);
          v47 = *(_QWORD *)(a1 + 40);
        }
        v48 = *(_QWORD *)(*(_QWORD *)(a1 + 256) + 1808);
        v88 = 0u;
        v89 = 0u;
        sub_22F243214(v48, v47);
        v49 = *(_QWORD *)(a1 + 16);
        v50 = *(_QWORD *)(a1 + 32);
        v51 = *(_QWORD *)(a1 + 40);
        v52 = *(_QWORD *)(a1 + 48);
        v53 = *(_QWORD *)(a1 + 56);
        v54 = *(_QWORD *)(v85 + 15088);
        v55 = (const char *)(v54 + 104);
        if ((*(char *)(v54 + 127) & 0x80000000) == 0 || (v55 = *(const char **)v55) != 0)
          v56 = strlen(v55);
        else
          v56 = 0;
        v57 = *(_QWORD *)(*(_QWORD *)(a1 + 256) + 1808);
        v58 = *(_DWORD *)(a1 + 24);
        v59 = *(unsigned int **)(a1 + 80);
        v87 = v59;
        if (v59)
        {
          v60 = v59 + 2;
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
        }
        v62 = *(llvm **)(a1 + 64);
        *(_QWORD *)(a1 + 64) = 0;
        v86 = v62;
        sub_22E3B4FC0(v49, v50, v51, v52, v53, (uint64_t)v55, v56, v57, v58, &v87, &v86);
        v63 = v86;
        v86 = 0;
        if (v63)
          (*(void (**)(llvm *))(*(_QWORD *)v63 + 8))(v63);
        v64 = v87;
        if (v87)
        {
          v65 = v87 + 2;
          do
          {
            v66 = __ldaxr(v65);
            v67 = v66 - 1;
          }
          while (__stlxr(v67, v65));
          if (!v67)
            (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 8))(v64);
        }
        llvm::LLVMContext::setDiagnosticHandler();
        v14 = v90;
        if (v90)
        {
          *(_BYTE *)(v90 + 24) = 1;
          v90 = 0;
          goto LABEL_126;
        }
        goto LABEL_127;
      }
      if (i)
        v20 = (llvm::Value *)(i - 56);
      else
        v20 = 0;
      v21 = *(_QWORD *)(a1 + 256);
      llvm::Value::getName(v20);
      v22 = sub_22E69736C(v21);
      if (!v22)
        continue;
      v23 = v22;
      if ((*(_DWORD *)(v22 + 28) & 0x7F) == 0x53)
        goto LABEL_58;
      for (j = *(_QWORD *)(v22 + 16); ; j = *(_QWORD *)(v25 + v27 + 16))
      {
        v25 = j & 0xFFFFFFFFFFFFFFF8;
        if ((j & 4) != 0)
          v25 = *(_QWORD *)v25;
        v26 = *(_WORD *)(v25 + 8) & 0x7F;
        if (v26 == 83)
          break;
        v27 = -40;
        if ((*(_WORD *)(v25 + 8) & 0x7Fu) > 0x46)
        {
          if (v26 == 71)
          {
            v27 = -56;
            continue;
          }
          if (v26 != 81)
            goto LABEL_48;
        }
        else
        {
          if (v26 > 0x18)
            goto LABEL_47;
          if (v26 == 16)
            goto LABEL_41;
          if (((1 << v26) & 0x1066) == 0)
          {
            if (v26 == 24)
            {
LABEL_41:
              v27 = -48;
              continue;
            }
LABEL_47:
            if (v26 == 70)
            {
              v27 = -64;
              continue;
            }
LABEL_48:
            v28 = v26 - 52;
            v29 = v26 - 33 >= 5;
            v30 = -64;
            if (v29)
              v30 = -48;
            v29 = v28 >= 6;
            v27 = -72;
            if (v29)
              v27 = v30;
            continue;
          }
        }
      }
      v23 = v25 - 40;
LABEL_58:
      v31 = *(unsigned int *)(v22 + 24);
      v32 = *(_QWORD *)(*(_QWORD *)(v23 + 88) + 1992);
      llvm::Value::getName(v20);
      v33 = llvm::hash_value();
      v34 = v33;
      v36 = *(uint64_t **)(a1 + 352);
      v35 = *(_QWORD *)(a1 + 360);
      if ((unint64_t)v36 >= v35)
      {
        v38 = *(_QWORD **)(a1 + 344);
        v39 = 0xAAAAAAAAAAAAAAABLL * (v36 - v38) + 1;
        if (v39 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v38) >> 3);
        if (2 * v40 > v39)
          v39 = 2 * v40;
        if (v40 >= 0x555555555555555)
          v41 = 0xAAAAAAAAAAAAAAALL;
        else
          v41 = v39;
        if (v41)
        {
          if (v41 > 0xAAAAAAAAAAAAAAALL)
            sub_22E3B3F8C();
          v42 = (char *)operator new(24 * v41);
        }
        else
        {
          v42 = 0;
        }
        v43 = (uint64_t *)&v42[8 * (v36 - v38)];
        *v43 = v34;
        v43[1] = v31;
        v43[2] = v32;
        v44 = v43;
        if (v36 != v38)
        {
          do
          {
            v45 = *(_OWORD *)(v36 - 3);
            *(v44 - 1) = *(v36 - 1);
            *(_OWORD *)(v44 - 3) = v45;
            v44 -= 3;
            v36 -= 3;
          }
          while (v36 != v38);
          v36 = *(uint64_t **)(a1 + 344);
        }
        v46 = &v42[24 * v41];
        v37 = v43 + 3;
        *(_QWORD *)(a1 + 344) = v44;
        *(_QWORD *)(a1 + 352) = v43 + 3;
        *(_QWORD *)(a1 + 360) = v46;
        if (v36)
          operator delete(v36);
      }
      else
      {
        *v36 = v33;
        v36[1] = v31;
        v37 = v36 + 3;
        v36[2] = v32;
      }
      *(_QWORD *)(a1 + 352) = v37;
    }
  }
  v68 = *(uint64_t **)(a1 + 264);
  v69 = &v68[2 * v16];
  while (1)
  {
    v70 = *v68;
    if (*((_BYTE *)v68 + 8))
    {
      v71 = v70 + 24;
      v72 = *(_QWORD *)(v70 + 32);
      if (v72 != v70 + 24)
      {
        do
        {
          if (v72)
            v73 = (llvm::Function *)(v72 - 56);
          else
            v73 = 0;
          if ((*((_BYTE *)v73 + 33) & 0x20) == 0)
            sub_22F24E58C(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 1816), v73);
          v72 = *(_QWORD *)(v72 + 8);
        }
        while (v72 != v71);
        v70 = *v68;
      }
    }
    *(_QWORD *)(a1 + 368) = v70;
    v74 = *((unsigned __int8 *)v68 + 9);
    v75 = *v68;
    *v68 = 0;
    if (v74)
    {
      v94 = v75;
      v100[0] = &off_24FA66BE0;
      v101 = (const char *)v100;
      v77 = llvm::Linker::linkModules();
      v78 = v101;
      if (v101 == (const char *)v100)
      {
        v79 = (void (**)(const char *, uint64_t))(v100[0] + 32);
        v78 = (const char *)v100;
      }
      else
      {
        if (!v101)
          goto LABEL_114;
        v79 = (void (**)(const char *, uint64_t))(*(_QWORD *)v101 + 40);
      }
      (*v79)(v78, v76);
LABEL_114:
      v82 = v94;
      v94 = 0;
      if (!v82)
        goto LABEL_116;
LABEL_115:
      v83 = MEMORY[0x23489F15C](v82, v76);
      MEMORY[0x2348A0E9C](v83, 0x10B2C407FF26C1CLL);
      goto LABEL_116;
    }
    v93 = v75;
    v99 = 0;
    v77 = llvm::Linker::linkModules();
    v80 = v99;
    if (v99 == v98)
    {
      v81 = (void (**)(_QWORD *, uint64_t))(v98[0] + 32);
      v80 = v98;
    }
    else
    {
      if (!v99)
        goto LABEL_121;
      v81 = (void (**)(_QWORD *, uint64_t))(*v99 + 40);
    }
    (*v81)(v80, v76);
LABEL_121:
    v82 = v93;
    v93 = 0;
    if (v82)
      goto LABEL_115;
LABEL_116:
    if ((v77 & 1) != 0)
      break;
    v68 += 2;
    if (v68 == v69)
      goto LABEL_27;
  }
  v90 = 0;
  if (v14)
LABEL_126:
    sub_22E3B4CBC((uint64_t)&v90, v14);
LABEL_127:
  sub_22F297424((uint64_t)&v96);
  result = v92;
  v92 = 0;
  if (result)
    return (llvm *)(*(uint64_t (**)(llvm *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_22E616CE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[4];
  int v6;
  uint64_t v7;
  const char *v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 1992);
  llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
  v5[0] = &unk_24FAC3168;
  v5[3] = a2;
  v6 = 0;
  v7 = v4;
  v8 = "LLVM IR generation of declaration";
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 256) + 56))(*(_QWORD *)(a1 + 256), a2);
  llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v5);
}

uint64_t sub_22E616D6C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 256) + 64))(*(_QWORD *)(a1 + 256));
}

uint64_t sub_22E616D80(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 256) + 120))(*(_QWORD *)(a1 + 256));
}

uint64_t sub_22E616D90()
{
  return 0;
}

double sub_22E616D98(uint64_t a1, void *__src, size_t __len)
{
  __int128 *p_dst;
  size_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  __int128 __dst;
  unint64_t v13;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v13 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v13) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = v9 + 288;
  if (*(char *)(v9 + 311) < 0)
    operator delete(*(void **)v10);
  result = *(double *)&__dst;
  *(_OWORD *)v10 = __dst;
  *(_QWORD *)(v10 + 16) = v13;
  return result;
}

char **sub_22E616E68(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 40 * v3;
    do
    {
      if (v2[v4 - 1] < 0)
        operator delete(*(void **)&v2[v4 - 24]);
      v4 -= 40;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22E616ED8(_QWORD *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  size_t v22;
  size_t v23;
  double v24;
  void *p_p;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  size_t v31;
  uint64_t v32;
  char v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void *v40;
  size_t v41;
  size_t v42;
  void *__p;
  size_t v44;
  char v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;

  v10 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 48))(*a2, MEMORY[0x24BED64E8]);
  v11 = *a2;
  *a2 = 0;
  if (v10)
  {
    v12 = *a3;
    *(_QWORD *)(v12 + 312) = 0x800000000;
    if (*(char *)(v12 + 311) < 0)
    {
      **(_BYTE **)(v12 + 288) = 0;
      *(_QWORD *)(v12 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v12 + 288) = 0;
      *(_BYTE *)(v12 + 311) = 0;
    }
    v46 = (unsigned __int8 *)(v12 + 320);
    v47 = 0;
    v48 = v12;
    v49 = 1;
    *(_BYTE *)(v12 + 320) = 0;
    *(_DWORD *)(v12 + 664) = 0;
    v16 = *(unsigned int *)(v12 + 776);
    if ((_DWORD)v16)
    {
      v17 = *(_QWORD *)(v12 + 768);
      v18 = 56 * v16;
      do
      {
        if (*(char *)(v17 + v18 - 9) < 0)
          operator delete(*(void **)(v17 + v18 - 32));
        v18 -= 56;
      }
      while (v18);
    }
    *(_DWORD *)(v12 + 776) = 0;
    v19 = a3[1];
    v20 = *(_BYTE *)(v19 + 999);
    if (v20 >= 0)
      v21 = (void *)(v19 + 976);
    else
      v21 = *(void **)(v19 + 976);
    v22 = *(_QWORD *)(v19 + 984);
    if (v20 >= 0)
      v23 = v20 & 0x7F;
    else
      v23 = v22;
    v24 = sub_22E3B89A8(&v46, v21, v23);
    (*(void (**)(void **__return_ptr, uint64_t, double))(*(_QWORD *)v11 + 24))(&__p, v11, v24);
    if (v45 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v45 >= 0)
      v26 = v45 & 0x7F;
    else
      v26 = v44;
LABEL_47:
    sub_22E3B89A8(&v46, p_p, v26);
    if (v45 < 0)
      operator delete(__p);
    goto LABEL_62;
  }
  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 48))(v11, MEMORY[0x24BED6598]))
  {
    v13 = *a4;
    *(_QWORD *)(v13 + 312) = 0x1AE00000000;
    if (*(char *)(v13 + 311) < 0)
    {
      **(_BYTE **)(v13 + 288) = 0;
      *(_QWORD *)(v13 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v13 + 288) = 0;
      *(_BYTE *)(v13 + 311) = 0;
    }
    v46 = (unsigned __int8 *)(v13 + 320);
    v47 = 0;
    v48 = v13;
    v49 = 1;
    *(_BYTE *)(v13 + 320) = 0;
    *(_DWORD *)(v13 + 664) = 0;
    v27 = *(unsigned int *)(v13 + 776);
    if ((_DWORD)v27)
    {
      v28 = *(_QWORD *)(v13 + 768);
      v29 = 56 * v27;
      do
      {
        if (*(char *)(v28 + v29 - 9) < 0)
          operator delete(*(void **)(v28 + v29 - 32));
        v29 -= 56;
      }
      while (v29);
    }
    *(_DWORD *)(v13 + 776) = 0;
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v11 + 24))(&__p, v11);
    if (v45 >= 0)
      v30 = &__p;
    else
      v30 = __p;
    if (v45 >= 0)
      v31 = v45 & 0x7F;
    else
      v31 = v44;
    sub_22E3B89A8(&v46, v30, v31);
    v32 = a4[1];
    v33 = *(_BYTE *)(v32 + 1023);
    if (v33 >= 0)
      p_p = (void *)(v32 + 1000);
    else
      p_p = *(void **)(v32 + 1000);
    v34 = *(_QWORD *)(v32 + 1008);
    if (v33 >= 0)
      v26 = v33 & 0x7F;
    else
      v26 = v34;
    goto LABEL_47;
  }
  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 48))(v11, MEMORY[0x24BED6558]);
  if (!(_DWORD)result)
  {
    *a1 = v11;
    return result;
  }
  v15 = *a5;
  *(_QWORD *)(v15 + 312) = 0x1AD00000000;
  if (*(char *)(v15 + 311) < 0)
  {
    **(_BYTE **)(v15 + 288) = 0;
    *(_QWORD *)(v15 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v15 + 288) = 0;
    *(_BYTE *)(v15 + 311) = 0;
  }
  v46 = (unsigned __int8 *)(v15 + 320);
  v47 = 0;
  v48 = v15;
  v49 = 1;
  *(_BYTE *)(v15 + 320) = 0;
  *(_DWORD *)(v15 + 664) = 0;
  v35 = *(unsigned int *)(v15 + 776);
  if ((_DWORD)v35)
  {
    v36 = *(_QWORD *)(v15 + 768);
    v37 = 56 * v35;
    do
    {
      if (*(char *)(v36 + v37 - 9) < 0)
        operator delete(*(void **)(v36 + v37 - 32));
      v37 -= 56;
    }
    while (v37);
  }
  *(_DWORD *)(v15 + 776) = 0;
  v38 = a5[1];
  v39 = *(_BYTE *)(v38 + 1047);
  if (v39 >= 0)
    v40 = (void *)(v38 + 1024);
  else
    v40 = *(void **)(v38 + 1024);
  v41 = *(_QWORD *)(v38 + 1032);
  if (v39 >= 0)
    v42 = v39 & 0x7F;
  else
    v42 = v41;
  sub_22E3B89A8(&v46, v40, v42);
LABEL_62:
  sub_22E3BB0B8((uint64_t)&v46);
  *a1 = 0;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

uint64_t sub_22E617234(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  _BYTE *v11;
  __int128 v12;
  _BYTE *v13;
  __int128 v14;
  _BYTE *v15;
  __int128 v16;
  _BYTE *v17;
  __int128 v18;
  _BYTE *v19;
  __int128 v20;
  _BYTE *v21;
  __int128 v22;
  _BYTE *v23;
  __int128 v24;
  _BYTE *v25;
  __int128 v26;
  _BYTE *v27;
  __int128 v28;
  _BYTE *v29;
  __int128 v30;
  _BYTE *v31;
  __int128 v32;
  _BYTE *v33;
  __int128 v34;
  _BYTE *v35;
  __int128 v36;
  _BYTE *v37;
  __int128 v38;
  _BYTE *v39;
  __int128 v40;
  _BYTE *v41;
  __int128 v42;
  _BYTE *v43;
  __int128 v44;
  _BYTE *v45;
  __int128 v46;
  _BYTE *v47;
  __int128 v48;
  _BYTE *v49;
  __int128 v50;
  _BYTE *v51;
  __int128 v52;
  _BYTE *v53;
  __int128 v54;
  _BYTE *v55;
  __int128 v56;
  _BYTE *v57;
  __int128 v58;
  _BYTE *v59;
  __int128 v60;
  _BYTE *v61;
  __int128 v62;
  _BYTE *v63;
  __int128 v64;
  _BYTE *v65;
  __int128 v66;
  _BYTE *v67;
  __int128 v68;
  _BYTE *v69;
  __int128 v70;
  _BYTE *v71;
  __int128 v72;
  _BYTE *v73;
  __int128 v74;
  _BYTE *v75;
  __int128 v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  _BYTE *v80;
  __int128 v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  _BYTE *v85;
  __int128 v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _BYTE *v94;
  __int128 v95;
  _BYTE *v96;
  __int128 v97;
  _BYTE *v98;
  __int128 v99;
  _BYTE *v100;
  __int128 v101;
  __int128 v102;
  _BYTE *v103;
  __int128 v104;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  *(_OWORD *)(a1 + 92) = *(__int128 *)((char *)a2 + 92);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  v9 = a1 + 112;
  if (*((char *)a2 + 135) < 0)
  {
    sub_22E3BB2B4((_BYTE *)v9, *((void **)a2 + 14), *((_QWORD *)a2 + 15));
  }
  else
  {
    v10 = a2[7];
    *(_QWORD *)(v9 + 16) = *((_QWORD *)a2 + 16);
    *(_OWORD *)v9 = v10;
  }
  v11 = (_BYTE *)(a1 + 136);
  if (*((char *)a2 + 159) < 0)
  {
    sub_22E3BB2B4(v11, *((void **)a2 + 17), *((_QWORD *)a2 + 18));
  }
  else
  {
    v12 = *(__int128 *)((char *)a2 + 136);
    *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
    *(_OWORD *)v11 = v12;
  }
  v13 = (_BYTE *)(a1 + 160);
  if (*((char *)a2 + 183) < 0)
  {
    sub_22E3BB2B4(v13, *((void **)a2 + 20), *((_QWORD *)a2 + 21));
  }
  else
  {
    v14 = a2[10];
    *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
    *(_OWORD *)v13 = v14;
  }
  v15 = (_BYTE *)(a1 + 184);
  if (*((char *)a2 + 207) < 0)
  {
    sub_22E3BB2B4(v15, *((void **)a2 + 23), *((_QWORD *)a2 + 24));
  }
  else
  {
    v16 = *(__int128 *)((char *)a2 + 184);
    *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
    *(_OWORD *)v15 = v16;
  }
  v17 = (_BYTE *)(a1 + 208);
  if (*((char *)a2 + 231) < 0)
  {
    sub_22E3BB2B4(v17, *((void **)a2 + 26), *((_QWORD *)a2 + 27));
  }
  else
  {
    v18 = a2[13];
    *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
    *(_OWORD *)v17 = v18;
  }
  v19 = (_BYTE *)(a1 + 232);
  if (*((char *)a2 + 255) < 0)
  {
    sub_22E3BB2B4(v19, *((void **)a2 + 29), *((_QWORD *)a2 + 30));
  }
  else
  {
    v20 = *(__int128 *)((char *)a2 + 232);
    *(_QWORD *)(a1 + 248) = *((_QWORD *)a2 + 31);
    *(_OWORD *)v19 = v20;
  }
  v21 = (_BYTE *)(a1 + 256);
  if (*((char *)a2 + 279) < 0)
  {
    sub_22E3BB2B4(v21, *((void **)a2 + 32), *((_QWORD *)a2 + 33));
  }
  else
  {
    v22 = a2[16];
    *(_QWORD *)(a1 + 272) = *((_QWORD *)a2 + 34);
    *(_OWORD *)v21 = v22;
  }
  *(_DWORD *)(a1 + 280) = *((_DWORD *)a2 + 70);
  v23 = (_BYTE *)(a1 + 288);
  if (*((char *)a2 + 311) < 0)
  {
    sub_22E3BB2B4(v23, *((void **)a2 + 36), *((_QWORD *)a2 + 37));
  }
  else
  {
    v24 = a2[18];
    *(_QWORD *)(a1 + 304) = *((_QWORD *)a2 + 38);
    *(_OWORD *)v23 = v24;
  }
  v25 = (_BYTE *)(a1 + 312);
  if (*((char *)a2 + 335) < 0)
  {
    sub_22E3BB2B4(v25, *((void **)a2 + 39), *((_QWORD *)a2 + 40));
  }
  else
  {
    v26 = *(__int128 *)((char *)a2 + 312);
    *(_QWORD *)(a1 + 328) = *((_QWORD *)a2 + 41);
    *(_OWORD *)v25 = v26;
  }
  v27 = (_BYTE *)(a1 + 336);
  if (*((char *)a2 + 359) < 0)
  {
    sub_22E3BB2B4(v27, *((void **)a2 + 42), *((_QWORD *)a2 + 43));
  }
  else
  {
    v28 = a2[21];
    *(_QWORD *)(a1 + 352) = *((_QWORD *)a2 + 44);
    *(_OWORD *)v27 = v28;
  }
  v29 = (_BYTE *)(a1 + 360);
  if (*((char *)a2 + 383) < 0)
  {
    sub_22E3BB2B4(v29, *((void **)a2 + 45), *((_QWORD *)a2 + 46));
  }
  else
  {
    v30 = *(__int128 *)((char *)a2 + 360);
    *(_QWORD *)(a1 + 376) = *((_QWORD *)a2 + 47);
    *(_OWORD *)v29 = v30;
  }
  v31 = (_BYTE *)(a1 + 384);
  if (*((char *)a2 + 407) < 0)
  {
    sub_22E3BB2B4(v31, *((void **)a2 + 48), *((_QWORD *)a2 + 49));
  }
  else
  {
    v32 = a2[24];
    *(_QWORD *)(a1 + 400) = *((_QWORD *)a2 + 50);
    *(_OWORD *)v31 = v32;
  }
  sub_22E617D48(a1 + 408, (const void ***)a2 + 51);
  sub_22E617D48(a1 + 432, (const void ***)a2 + 54);
  v33 = (_BYTE *)(a1 + 456);
  if (*((char *)a2 + 479) < 0)
  {
    sub_22E3BB2B4(v33, *((void **)a2 + 57), *((_QWORD *)a2 + 58));
  }
  else
  {
    v34 = *(__int128 *)((char *)a2 + 456);
    *(_QWORD *)(a1 + 472) = *((_QWORD *)a2 + 59);
    *(_OWORD *)v33 = v34;
  }
  v35 = (_BYTE *)(a1 + 480);
  if (*((char *)a2 + 503) < 0)
  {
    sub_22E3BB2B4(v35, *((void **)a2 + 60), *((_QWORD *)a2 + 61));
  }
  else
  {
    v36 = a2[30];
    *(_QWORD *)(a1 + 496) = *((_QWORD *)a2 + 62);
    *(_OWORD *)v35 = v36;
  }
  *(_DWORD *)(a1 + 504) = *((_DWORD *)a2 + 126);
  v37 = (_BYTE *)(a1 + 512);
  if (*((char *)a2 + 535) < 0)
  {
    sub_22E3BB2B4(v37, *((void **)a2 + 64), *((_QWORD *)a2 + 65));
  }
  else
  {
    v38 = a2[32];
    *(_QWORD *)(a1 + 528) = *((_QWORD *)a2 + 66);
    *(_OWORD *)v37 = v38;
  }
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  sub_22E6180A0((_QWORD *)(a1 + 536), *((_QWORD *)a2 + 67), *((_QWORD *)a2 + 68), (uint64_t)(*((_QWORD *)a2 + 68) - *((_QWORD *)a2 + 67)) >> 5);
  v39 = (_BYTE *)(a1 + 560);
  if (*((char *)a2 + 583) < 0)
  {
    sub_22E3BB2B4(v39, *((void **)a2 + 70), *((_QWORD *)a2 + 71));
  }
  else
  {
    v40 = a2[35];
    *(_QWORD *)(a1 + 576) = *((_QWORD *)a2 + 72);
    *(_OWORD *)v39 = v40;
  }
  v41 = (_BYTE *)(a1 + 584);
  if (*((char *)a2 + 607) < 0)
  {
    sub_22E3BB2B4(v41, *((void **)a2 + 73), *((_QWORD *)a2 + 74));
  }
  else
  {
    v42 = *(__int128 *)((char *)a2 + 584);
    *(_QWORD *)(a1 + 600) = *((_QWORD *)a2 + 75);
    *(_OWORD *)v41 = v42;
  }
  v43 = (_BYTE *)(a1 + 608);
  if (*((char *)a2 + 631) < 0)
  {
    sub_22E3BB2B4(v43, *((void **)a2 + 76), *((_QWORD *)a2 + 77));
  }
  else
  {
    v44 = a2[38];
    *(_QWORD *)(a1 + 624) = *((_QWORD *)a2 + 78);
    *(_OWORD *)v43 = v44;
  }
  v45 = (_BYTE *)(a1 + 632);
  if (*((char *)a2 + 655) < 0)
  {
    sub_22E3BB2B4(v45, *((void **)a2 + 79), *((_QWORD *)a2 + 80));
  }
  else
  {
    v46 = *(__int128 *)((char *)a2 + 632);
    *(_QWORD *)(a1 + 648) = *((_QWORD *)a2 + 81);
    *(_OWORD *)v45 = v46;
  }
  *(_DWORD *)(a1 + 656) = *((_DWORD *)a2 + 164);
  v47 = (_BYTE *)(a1 + 664);
  if (*((char *)a2 + 687) < 0)
  {
    sub_22E3BB2B4(v47, *((void **)a2 + 83), *((_QWORD *)a2 + 84));
  }
  else
  {
    v48 = *(__int128 *)((char *)a2 + 664);
    *(_QWORD *)(a1 + 680) = *((_QWORD *)a2 + 85);
    *(_OWORD *)v47 = v48;
  }
  *(_QWORD *)(a1 + 704) = 0;
  *(_OWORD *)(a1 + 688) = 0u;
  sub_22E618148((_QWORD *)(a1 + 688), *((_QWORD *)a2 + 86), *((_QWORD *)a2 + 87), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 87) - *((_QWORD *)a2 + 86)) >> 3));
  *(_QWORD *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  sub_22E618148((_QWORD *)(a1 + 712), *((_QWORD *)a2 + 89), *((_QWORD *)a2 + 90), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 90) - *((_QWORD *)a2 + 89)) >> 3));
  v49 = (_BYTE *)(a1 + 736);
  if (*((char *)a2 + 759) < 0)
  {
    sub_22E3BB2B4(v49, *((void **)a2 + 92), *((_QWORD *)a2 + 93));
  }
  else
  {
    v50 = a2[46];
    *(_QWORD *)(a1 + 752) = *((_QWORD *)a2 + 94);
    *(_OWORD *)v49 = v50;
  }
  v51 = (_BYTE *)(a1 + 760);
  if (*((char *)a2 + 783) < 0)
  {
    sub_22E3BB2B4(v51, *((void **)a2 + 95), *((_QWORD *)a2 + 96));
  }
  else
  {
    v52 = *(__int128 *)((char *)a2 + 760);
    *(_QWORD *)(a1 + 776) = *((_QWORD *)a2 + 97);
    *(_OWORD *)v51 = v52;
  }
  v53 = (_BYTE *)(a1 + 784);
  if (*((char *)a2 + 807) < 0)
  {
    sub_22E3BB2B4(v53, *((void **)a2 + 98), *((_QWORD *)a2 + 99));
  }
  else
  {
    v54 = a2[49];
    *(_QWORD *)(a1 + 800) = *((_QWORD *)a2 + 100);
    *(_OWORD *)v53 = v54;
  }
  v55 = (_BYTE *)(a1 + 808);
  if (*((char *)a2 + 831) < 0)
  {
    sub_22E3BB2B4(v55, *((void **)a2 + 101), *((_QWORD *)a2 + 102));
  }
  else
  {
    v56 = *(__int128 *)((char *)a2 + 808);
    *(_QWORD *)(a1 + 824) = *((_QWORD *)a2 + 103);
    *(_OWORD *)v55 = v56;
  }
  v57 = (_BYTE *)(a1 + 832);
  if (*((char *)a2 + 855) < 0)
  {
    sub_22E3BB2B4(v57, *((void **)a2 + 104), *((_QWORD *)a2 + 105));
  }
  else
  {
    v58 = a2[52];
    *(_QWORD *)(a1 + 848) = *((_QWORD *)a2 + 106);
    *(_OWORD *)v57 = v58;
  }
  v59 = (_BYTE *)(a1 + 856);
  if (*((char *)a2 + 879) < 0)
  {
    sub_22E3BB2B4(v59, *((void **)a2 + 107), *((_QWORD *)a2 + 108));
  }
  else
  {
    v60 = *(__int128 *)((char *)a2 + 856);
    *(_QWORD *)(a1 + 872) = *((_QWORD *)a2 + 109);
    *(_OWORD *)v59 = v60;
  }
  v61 = (_BYTE *)(a1 + 880);
  if (*((char *)a2 + 903) < 0)
  {
    sub_22E3BB2B4(v61, *((void **)a2 + 110), *((_QWORD *)a2 + 111));
  }
  else
  {
    v62 = a2[55];
    *(_QWORD *)(a1 + 896) = *((_QWORD *)a2 + 112);
    *(_OWORD *)v61 = v62;
  }
  v63 = (_BYTE *)(a1 + 904);
  if (*((char *)a2 + 927) < 0)
  {
    sub_22E3BB2B4(v63, *((void **)a2 + 113), *((_QWORD *)a2 + 114));
  }
  else
  {
    v64 = *(__int128 *)((char *)a2 + 904);
    *(_QWORD *)(a1 + 920) = *((_QWORD *)a2 + 115);
    *(_OWORD *)v63 = v64;
  }
  v65 = (_BYTE *)(a1 + 928);
  if (*((char *)a2 + 951) < 0)
  {
    sub_22E3BB2B4(v65, *((void **)a2 + 116), *((_QWORD *)a2 + 117));
  }
  else
  {
    v66 = a2[58];
    *(_QWORD *)(a1 + 944) = *((_QWORD *)a2 + 118);
    *(_OWORD *)v65 = v66;
  }
  *(_QWORD *)(a1 + 968) = 0;
  *(_OWORD *)(a1 + 952) = 0u;
  sub_22E618148((_QWORD *)(a1 + 952), *((_QWORD *)a2 + 119), *((_QWORD *)a2 + 120), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 120) - *((_QWORD *)a2 + 119)) >> 3));
  v67 = (_BYTE *)(a1 + 976);
  if (*((char *)a2 + 999) < 0)
  {
    sub_22E3BB2B4(v67, *((void **)a2 + 122), *((_QWORD *)a2 + 123));
  }
  else
  {
    v68 = a2[61];
    *(_QWORD *)(a1 + 992) = *((_QWORD *)a2 + 124);
    *(_OWORD *)v67 = v68;
  }
  v69 = (_BYTE *)(a1 + 1000);
  if (*((char *)a2 + 1023) < 0)
  {
    sub_22E3BB2B4(v69, *((void **)a2 + 125), *((_QWORD *)a2 + 126));
  }
  else
  {
    v70 = *(__int128 *)((char *)a2 + 1000);
    *(_QWORD *)(a1 + 1016) = *((_QWORD *)a2 + 127);
    *(_OWORD *)v69 = v70;
  }
  v71 = (_BYTE *)(a1 + 1024);
  if (*((char *)a2 + 1047) < 0)
  {
    sub_22E3BB2B4(v71, *((void **)a2 + 128), *((_QWORD *)a2 + 129));
  }
  else
  {
    v72 = a2[64];
    *(_QWORD *)(a1 + 1040) = *((_QWORD *)a2 + 130);
    *(_OWORD *)v71 = v72;
  }
  v73 = (_BYTE *)(a1 + 1048);
  if (*((char *)a2 + 1071) < 0)
  {
    sub_22E3BB2B4(v73, *((void **)a2 + 131), *((_QWORD *)a2 + 132));
  }
  else
  {
    v74 = *(__int128 *)((char *)a2 + 1048);
    *(_QWORD *)(a1 + 1064) = *((_QWORD *)a2 + 133);
    *(_OWORD *)v73 = v74;
  }
  *(_DWORD *)(a1 + 1072) = *((_DWORD *)a2 + 268);
  v75 = (_BYTE *)(a1 + 1080);
  if (*((char *)a2 + 1103) < 0)
  {
    sub_22E3BB2B4(v75, *((void **)a2 + 135), *((_QWORD *)a2 + 136));
  }
  else
  {
    v76 = *(__int128 *)((char *)a2 + 1080);
    *(_QWORD *)(a1 + 1096) = *((_QWORD *)a2 + 137);
    *(_OWORD *)v75 = v76;
  }
  *(_QWORD *)(a1 + 1104) = *((_QWORD *)a2 + 138);
  v77 = *((_QWORD *)a2 + 139);
  *(_QWORD *)(a1 + 1112) = v77;
  if (v77)
  {
    v78 = (unint64_t *)(v77 + 8);
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
  }
  *(_DWORD *)(a1 + 1120) = *((_DWORD *)a2 + 280);
  v80 = (_BYTE *)(a1 + 1128);
  if (*((char *)a2 + 1151) < 0)
  {
    sub_22E3BB2B4(v80, *((void **)a2 + 141), *((_QWORD *)a2 + 142));
  }
  else
  {
    v81 = *(__int128 *)((char *)a2 + 1128);
    *(_QWORD *)(a1 + 1144) = *((_QWORD *)a2 + 143);
    *(_OWORD *)v80 = v81;
  }
  *(_QWORD *)(a1 + 1152) = *((_QWORD *)a2 + 144);
  v82 = *((_QWORD *)a2 + 145);
  *(_QWORD *)(a1 + 1160) = v82;
  if (v82)
  {
    v83 = (unint64_t *)(v82 + 8);
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
  }
  *(_DWORD *)(a1 + 1168) = *((_DWORD *)a2 + 292);
  v85 = (_BYTE *)(a1 + 1176);
  if (*((char *)a2 + 1199) < 0)
  {
    sub_22E3BB2B4(v85, *((void **)a2 + 147), *((_QWORD *)a2 + 148));
  }
  else
  {
    v86 = *(__int128 *)((char *)a2 + 1176);
    *(_QWORD *)(a1 + 1192) = *((_QWORD *)a2 + 149);
    *(_OWORD *)v85 = v86;
  }
  *(_QWORD *)(a1 + 1200) = *((_QWORD *)a2 + 150);
  v87 = *((_QWORD *)a2 + 151);
  *(_QWORD *)(a1 + 1208) = v87;
  if (v87)
  {
    v88 = (unint64_t *)(v87 + 8);
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
  }
  *(_QWORD *)(a1 + 1232) = 0;
  *(_OWORD *)(a1 + 1216) = 0u;
  sub_22E618148((_QWORD *)(a1 + 1216), *((_QWORD *)a2 + 152), *((_QWORD *)a2 + 153), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 153) - *((_QWORD *)a2 + 152)) >> 3));
  v90 = *(__int128 *)((char *)a2 + 1256);
  *(_OWORD *)(a1 + 1240) = *(__int128 *)((char *)a2 + 1240);
  *(_OWORD *)(a1 + 1256) = v90;
  *(_QWORD *)(a1 + 1272) = 0;
  *(_OWORD *)(a1 + 1280) = 0u;
  sub_22E6181F4((_QWORD *)(a1 + 1272), *((const void **)a2 + 159), *((_QWORD *)a2 + 160), *((_QWORD *)a2 + 160) - *((_QWORD *)a2 + 159));
  *(_QWORD *)(a1 + 1312) = 0;
  *(_OWORD *)(a1 + 1296) = 0u;
  sub_22E618148((_QWORD *)(a1 + 1296), *((_QWORD *)a2 + 162), *((_QWORD *)a2 + 163), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 163) - *((_QWORD *)a2 + 162)) >> 3));
  *(_QWORD *)(a1 + 1336) = 0;
  *(_OWORD *)(a1 + 1320) = 0u;
  sub_22E618148((_QWORD *)(a1 + 1320), *((_QWORD *)a2 + 165), *((_QWORD *)a2 + 166), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 166) - *((_QWORD *)a2 + 165)) >> 3));
  *(_OWORD *)(a1 + 1344) = a2[84];
  v91 = a2[85];
  v92 = a2[86];
  v93 = a2[87];
  *(_DWORD *)(a1 + 1408) = *((_DWORD *)a2 + 352);
  *(_OWORD *)(a1 + 1392) = v93;
  *(_OWORD *)(a1 + 1376) = v92;
  *(_OWORD *)(a1 + 1360) = v91;
  v94 = (_BYTE *)(a1 + 1416);
  if (*((char *)a2 + 1439) < 0)
  {
    sub_22E3BB2B4(v94, *((void **)a2 + 177), *((_QWORD *)a2 + 178));
  }
  else
  {
    v95 = *(__int128 *)((char *)a2 + 1416);
    *(_QWORD *)(a1 + 1432) = *((_QWORD *)a2 + 179);
    *(_OWORD *)v94 = v95;
  }
  *(_DWORD *)(a1 + 1440) = *((_DWORD *)a2 + 360);
  sub_22E618270(a1 + 1448, (const void ***)a2 + 181);
  *(_QWORD *)(a1 + 1488) = 0;
  *(_OWORD *)(a1 + 1472) = 0u;
  sub_22E618148((_QWORD *)(a1 + 1472), *((_QWORD *)a2 + 184), *((_QWORD *)a2 + 185), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 185) - *((_QWORD *)a2 + 184)) >> 3));
  *(_QWORD *)(a1 + 1512) = 0;
  *(_OWORD *)(a1 + 1496) = 0u;
  sub_22E618148((_QWORD *)(a1 + 1496), *((_QWORD *)a2 + 187), *((_QWORD *)a2 + 188), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 188) - *((_QWORD *)a2 + 187)) >> 3));
  *(_QWORD *)(a1 + 1536) = 0;
  *(_OWORD *)(a1 + 1520) = 0u;
  sub_22E618148((_QWORD *)(a1 + 1520), *((_QWORD *)a2 + 190), *((_QWORD *)a2 + 191), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 191) - *((_QWORD *)a2 + 190)) >> 3));
  v96 = (_BYTE *)(a1 + 1544);
  if (*((char *)a2 + 1567) < 0)
  {
    sub_22E3BB2B4(v96, *((void **)a2 + 193), *((_QWORD *)a2 + 194));
  }
  else
  {
    v97 = *(__int128 *)((char *)a2 + 1544);
    *(_QWORD *)(a1 + 1560) = *((_QWORD *)a2 + 195);
    *(_OWORD *)v96 = v97;
  }
  v98 = (_BYTE *)(a1 + 1568);
  if (*((char *)a2 + 1591) < 0)
  {
    sub_22E3BB2B4(v98, *((void **)a2 + 196), *((_QWORD *)a2 + 197));
  }
  else
  {
    v99 = a2[98];
    *(_QWORD *)(a1 + 1584) = *((_QWORD *)a2 + 198);
    *(_OWORD *)v98 = v99;
  }
  *(_QWORD *)(a1 + 1608) = 0;
  *(_OWORD *)(a1 + 1592) = 0u;
  sub_22E618148((_QWORD *)(a1 + 1592), *((_QWORD *)a2 + 199), *((_QWORD *)a2 + 200), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 200) - *((_QWORD *)a2 + 199)) >> 3));
  v100 = (_BYTE *)(a1 + 1616);
  if (*((char *)a2 + 1639) < 0)
  {
    sub_22E3BB2B4(v100, *((void **)a2 + 202), *((_QWORD *)a2 + 203));
  }
  else
  {
    v101 = a2[101];
    *(_QWORD *)(a1 + 1632) = *((_QWORD *)a2 + 204);
    *(_OWORD *)v100 = v101;
  }
  *(_QWORD *)(a1 + 1640) = *((_QWORD *)a2 + 205);
  *(_QWORD *)(a1 + 1648) = 0;
  *(_QWORD *)(a1 + 1664) = 0;
  *(_QWORD *)(a1 + 1656) = 0;
  sub_22E618148((_QWORD *)(a1 + 1648), *((_QWORD *)a2 + 206), *((_QWORD *)a2 + 207), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 207) - *((_QWORD *)a2 + 206)) >> 3));
  v102 = *(__int128 *)((char *)a2 + 1688);
  *(_OWORD *)(a1 + 1672) = *(__int128 *)((char *)a2 + 1672);
  *(_OWORD *)(a1 + 1688) = v102;
  v103 = (_BYTE *)(a1 + 1704);
  if (*((char *)a2 + 1727) < 0)
  {
    sub_22E3BB2B4(v103, *((void **)a2 + 213), *((_QWORD *)a2 + 214));
  }
  else
  {
    v104 = *(__int128 *)((char *)a2 + 1704);
    *(_QWORD *)(a1 + 1720) = *((_QWORD *)a2 + 215);
    *(_OWORD *)v103 = v104;
  }
  return a1;
}

uint64_t sub_22E617D48(uint64_t a1, const void ***a2)
{
  uint64_t *v3;
  const void ***v4;
  const void **v5;
  const void **v6;
  const void ***v7;
  BOOL v8;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      sub_22F296ED8((uint64_t **)a1, v3, v5 + 4, (__int128 *)v5 + 2);
      v6 = (const void **)v5[1];
      if (v6)
      {
        do
        {
          v7 = (const void ***)v6;
          v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const void ***)v5[2];
          v8 = *v7 == v5;
          v5 = (const void **)v7;
        }
        while (!v8);
      }
      v5 = (const void **)v7;
    }
    while (v7 != v4);
  }
  return a1;
}

uint64_t *sub_22E617DDC(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  uint64_t **v6;
  size_t v9;
  const void *v10;
  size_t v11;
  size_t v13;
  int v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  BOOL v19;
  _BOOL4 v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  size_t v24;
  int v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t *v30;
  BOOL v31;
  char v32;
  BOOL v33;
  const void *v34;
  size_t v35;
  size_t v36;
  const void *v37;
  size_t v38;
  size_t v39;
  int v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t *v44;
  char v45;
  uint64_t *v46;
  size_t v47;
  size_t v48;
  int v49;
  _BOOL4 v50;
  uint64_t **v51;

  v6 = a3;
  v51 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_23;
  v9 = *((unsigned __int8 *)a2 + 55);
  if ((v9 & 0x80u) == 0)
    v10 = a2 + 4;
  else
    v10 = (const void *)a2[4];
  v11 = a2[5];
  if ((v9 & 0x80u) == 0)
    v13 = v9 & 0x7F;
  else
    v13 = a2[5];
  v14 = *((char *)a5 + 23);
  if (v14 >= 0)
    v15 = *((unsigned __int8 *)a5 + 23);
  else
    v15 = (size_t)a5[1];
  if (v14 >= 0)
    v16 = a5;
  else
    v16 = *a5;
  if (v13 >= v15)
    v17 = v15;
  else
    v17 = v13;
  v18 = memcmp(v16, v10, v17);
  v19 = v15 >= v13;
  v6 = a3;
  v20 = !v19;
  if (v18)
    v20 = v18 < 0;
  if (v20)
  {
LABEL_23:
    v21 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      v23 = a2;
LABEL_59:
      if (v21)
      {
        *v6 = v23;
        return v23 + 1;
      }
      else
      {
        *v6 = a2;
        return a2;
      }
    }
    if (v21)
    {
      v22 = (uint64_t *)*a2;
      do
      {
        v23 = v22;
        v22 = (uint64_t *)v22[1];
      }
      while (v22);
    }
    else
    {
      v30 = a2;
      do
      {
        v23 = (uint64_t *)v30[2];
        v31 = *v23 == (_QWORD)v30;
        v30 = v23;
      }
      while (v31);
    }
    v32 = *((_BYTE *)a5 + 23);
    v33 = v32 < 0;
    if (v32 >= 0)
      v34 = a5;
    else
      v34 = *a5;
    v35 = v32 & 0x7F;
    if (v33)
      v36 = (size_t)a5[1];
    else
      v36 = v35;
    if (*((char *)v23 + 55) < 0)
    {
      v37 = (const void *)v23[4];
      v38 = v23[5];
    }
    else
    {
      v37 = v23 + 4;
      v38 = *((unsigned __int8 *)v23 + 55);
    }
    if (v36 >= v38)
      v39 = v38;
    else
      v39 = v36;
    v40 = memcmp(v37, v34, v39);
    v41 = v38 < v36;
    if (v40)
      v41 = v40 < 0;
    if (v41)
      goto LABEL_59;
    v42 = (uint64_t)a1;
    return sub_22E5EFEFC(v42, v6, a5);
  }
  if ((v9 & 0x80u) == 0)
    v11 = v9;
  if (v15 >= v11)
    v24 = v11;
  else
    v24 = v15;
  v25 = memcmp(v10, v16, v24);
  v26 = v11 < v15;
  if (v25)
    v26 = v25 < 0;
  if (v26)
  {
    v27 = a2[1];
    if (v27)
    {
      v28 = (uint64_t *)a2[1];
      v29 = v51;
      do
      {
        a4 = (uint64_t **)v28;
        v28 = (uint64_t *)*v28;
      }
      while (v28);
    }
    else
    {
      v44 = a2;
      v29 = v51;
      do
      {
        a4 = (uint64_t **)v44[2];
        v31 = *a4 == v44;
        v44 = (uint64_t *)a4;
      }
      while (!v31);
    }
    if (a4 == v29)
      goto LABEL_80;
    v45 = *((_BYTE *)a4 + 55);
    if (v45 >= 0)
      v46 = (uint64_t *)(a4 + 4);
    else
      v46 = a4[4];
    if (v45 >= 0)
      v47 = v45 & 0x7F;
    else
      v47 = (size_t)a4[5];
    if (v47 >= v15)
      v48 = v15;
    else
      v48 = v47;
    v49 = memcmp(v16, v46, v48);
    v50 = v15 < v47;
    if (v49)
      v50 = v49 < 0;
    if (v50)
    {
LABEL_80:
      if (v27)
      {
        *a3 = (uint64_t *)a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return (uint64_t *)a4;
    }
    v42 = (uint64_t)a1;
    return sub_22E5EFEFC(v42, v6, a5);
  }
  *a3 = a2;
  *a4 = a2;
  return (uint64_t *)a4;
}

_QWORD *sub_22E6180A0(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;

  if (a4)
  {
    if (a4 >> 59)
      abort();
    v7 = result;
    result = operator new(32 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[4 * a4];
    while (a2 != a3)
    {
      if (*(char *)(a2 + 23) < 0)
      {
        result = sub_22E3BB2B4(v8, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)v8 = *(_OWORD *)a2;
        v8[2] = *(_QWORD *)(a2 + 16);
      }
      v8[3] = *(_QWORD *)(a2 + 24);
      a2 += 32;
      v8 += 4;
    }
    v7[1] = v8;
  }
  return result;
}

_QWORD *sub_22E618148(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v6 = result;
    v7 = 3 * a4;
    result = operator new(24 * a4);
    v8 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    while (a2 != a3)
    {
      if (*(char *)(a2 + 23) < 0)
      {
        result = sub_22E3BB2B4(v8, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)v8 = *(_OWORD *)a2;
        v8[2] = *(_QWORD *)(a2 + 16);
      }
      a2 += 24;
      v8 += 3;
    }
    v6[1] = v8;
  }
  return result;
}

_QWORD *sub_22E6181F4(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v7;
  char *v8;
  size_t v9;

  if (__sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      abort();
    v7 = result;
    result = operator new(__sz);
    v8 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + __sz;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = &v8[v9];
  }
  return result;
}

uint64_t sub_22E618270(uint64_t a1, const void ***a2)
{
  uint64_t *v3;
  const void ***v4;
  const void **v5;
  const void **v6;
  const void ***v7;
  BOOL v8;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      sub_22F296F88((uint64_t **)a1, v3, v5 + 4, (uint64_t)(v5 + 4));
      v6 = (const void **)v5[1];
      if (v6)
      {
        do
        {
          v7 = (const void ***)v6;
          v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const void ***)v5[2];
          v8 = *v7 == v5;
          v5 = (const void **)v7;
        }
        while (!v8);
      }
      v5 = (const void **)v7;
    }
    while (v7 != v4);
  }
  return a1;
}

_BYTE *sub_22E618304@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_22E3BB2B4(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  v6[56] = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_22E618378(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void **v13;

  if (*(char *)(a1 + 1727) < 0)
    operator delete(*(void **)(a1 + 1704));
  v13 = (void **)(a1 + 1648);
  sub_22E3B3CC8(&v13);
  if (*(char *)(a1 + 1639) < 0)
    operator delete(*(void **)(a1 + 1616));
  v13 = (void **)(a1 + 1592);
  sub_22E3B3CC8(&v13);
  if (*(char *)(a1 + 1591) < 0)
    operator delete(*(void **)(a1 + 1568));
  if (*(char *)(a1 + 1567) < 0)
    operator delete(*(void **)(a1 + 1544));
  v13 = (void **)(a1 + 1520);
  sub_22E3B3CC8(&v13);
  v13 = (void **)(a1 + 1496);
  sub_22E3B3CC8(&v13);
  v13 = (void **)(a1 + 1472);
  sub_22E3B3CC8(&v13);
  sub_22E5EFB0C(a1 + 1448, *(char **)(a1 + 1456));
  if (*(char *)(a1 + 1439) < 0)
    operator delete(*(void **)(a1 + 1416));
  v13 = (void **)(a1 + 1320);
  sub_22E3B3CC8(&v13);
  v13 = (void **)(a1 + 1296);
  sub_22E3B3CC8(&v13);
  v2 = *(void **)(a1 + 1272);
  if (v2)
  {
    *(_QWORD *)(a1 + 1280) = v2;
    operator delete(v2);
  }
  v13 = (void **)(a1 + 1216);
  sub_22E3B3CC8(&v13);
  v3 = *(std::__shared_weak_count **)(a1 + 1208);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (*(char *)(a1 + 1199) < 0)
    operator delete(*(void **)(a1 + 1176));
  v6 = *(std::__shared_weak_count **)(a1 + 1160);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (*(char *)(a1 + 1151) < 0)
    operator delete(*(void **)(a1 + 1128));
  v9 = *(std::__shared_weak_count **)(a1 + 1112);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (*(char *)(a1 + 1103) < 0)
    operator delete(*(void **)(a1 + 1080));
  if (*(char *)(a1 + 1071) < 0)
    operator delete(*(void **)(a1 + 1048));
  if (*(char *)(a1 + 1047) < 0)
    operator delete(*(void **)(a1 + 1024));
  if (*(char *)(a1 + 1023) < 0)
    operator delete(*(void **)(a1 + 1000));
  if (*(char *)(a1 + 999) < 0)
    operator delete(*(void **)(a1 + 976));
  v13 = (void **)(a1 + 952);
  sub_22E3B3CC8(&v13);
  if (*(char *)(a1 + 951) < 0)
    operator delete(*(void **)(a1 + 928));
  if (*(char *)(a1 + 927) < 0)
    operator delete(*(void **)(a1 + 904));
  if (*(char *)(a1 + 903) < 0)
    operator delete(*(void **)(a1 + 880));
  if (*(char *)(a1 + 879) < 0)
    operator delete(*(void **)(a1 + 856));
  if (*(char *)(a1 + 855) < 0)
    operator delete(*(void **)(a1 + 832));
  if (*(char *)(a1 + 831) < 0)
    operator delete(*(void **)(a1 + 808));
  if (*(char *)(a1 + 807) < 0)
    operator delete(*(void **)(a1 + 784));
  if (*(char *)(a1 + 783) < 0)
    operator delete(*(void **)(a1 + 760));
  if (*(char *)(a1 + 759) < 0)
    operator delete(*(void **)(a1 + 736));
  v13 = (void **)(a1 + 712);
  sub_22E3B3CC8(&v13);
  v13 = (void **)(a1 + 688);
  sub_22E3B3CC8(&v13);
  if (*(char *)(a1 + 687) < 0)
    operator delete(*(void **)(a1 + 664));
  if (*(char *)(a1 + 655) < 0)
    operator delete(*(void **)(a1 + 632));
  if (*(char *)(a1 + 631) < 0)
    operator delete(*(void **)(a1 + 608));
  if (*(char *)(a1 + 607) < 0)
    operator delete(*(void **)(a1 + 584));
  if (*(char *)(a1 + 583) < 0)
    operator delete(*(void **)(a1 + 560));
  v13 = (void **)(a1 + 536);
  sub_22E6187CC(&v13);
  if (*(char *)(a1 + 535) < 0)
    operator delete(*(void **)(a1 + 512));
  if (*(char *)(a1 + 503) < 0)
    operator delete(*(void **)(a1 + 480));
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  sub_22E54B6D0(a1 + 432, *(_QWORD **)(a1 + 440));
  sub_22E54B6D0(a1 + 408, *(_QWORD **)(a1 + 416));
  if (*(char *)(a1 + 407) < 0)
    operator delete(*(void **)(a1 + 384));
  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  if (*(char *)(a1 + 359) < 0)
    operator delete(*(void **)(a1 + 336));
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  if (*(char *)(a1 + 311) < 0)
    operator delete(*(void **)(a1 + 288));
  if (*(char *)(a1 + 279) < 0)
    operator delete(*(void **)(a1 + 256));
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  if (*(char *)(a1 + 207) < 0)
    operator delete(*(void **)(a1 + 184));
  if (*(char *)(a1 + 183) < 0)
    operator delete(*(void **)(a1 + 160));
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  return a1;
}

void sub_22E6187CC(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0)
          operator delete(*(v4 - 4));
        v4 -= 4;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_22E618844(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_24FA66B20;
  v2 = *(void **)(a1 + 344);
  if (v2)
  {
    *(_QWORD *)(a1 + 352) = v2;
    operator delete(v2);
  }
  sub_22F297394((void **)(a1 + 264));
  v3 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  MEMORY[0x23489EEC8](a1 + 88);
  v4 = *(unsigned int **)(a1 + 80);
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  }
  v8 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

uint64_t sub_22E6188F4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  llvm **v12;
  uint64_t v13;
  llvm *v14;

  v1 = result;
  v2 = *(unsigned int *)(result + 72);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)(result + 64);
    v4 = v3 + 16 * v2;
    do
    {
      v5 = *(llvm **)v3;
      v6 = *(void **)(v3 + 8);
      v3 += 16;
      result = llvm::deallocate_buffer(v5, v6);
    }
    while (v3 != v4);
  }
  *(_DWORD *)(v1 + 72) = 0;
  v7 = *(unsigned int *)(v1 + 24);
  if ((_DWORD)v7)
  {
    *(_QWORD *)(v1 + 80) = 0;
    v8 = *(_QWORD **)(v1 + 16);
    v9 = *v8 + 4096;
    *(_QWORD *)v1 = *v8;
    *(_QWORD *)(v1 + 8) = v9;
    if ((_DWORD)v7 != 1)
    {
      v10 = v8 + 1;
      v11 = 8 * v7 - 8;
      v12 = (llvm **)(v8 + 1);
      do
      {
        v13 = (((unint64_t)v10 - *(_QWORD *)(v1 + 16)) >> 10) & 0x1FFFFFF;
        if (v13 >= 0x1E)
          LOBYTE(v13) = 30;
        v14 = *v12++;
        result = llvm::deallocate_buffer(v14, (void *)(4096 << v13));
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
    *(_DWORD *)(v1 + 24) = 1;
  }
  return result;
}

_QWORD *sub_22E6189BC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t (**v6)(_QWORD *);
  _QWORD v7[3];
  _QWORD *v8;
  char v9;
  _BYTE v10[24];
  _BYTE *v11;
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)a2[3];
  if (!v2)
  {
    v8 = 0;
    v9 = 0;
    v3 = v10;
    goto LABEL_14;
  }
  if (v2 == a2)
  {
    v8 = v7;
    (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v7);
    v2 = v8;
    v9 = 0;
    v3 = v10;
    if (v8)
      goto LABEL_4;
LABEL_14:
    v11 = 0;
    goto LABEL_6;
  }
  v8 = (_QWORD *)a2[3];
  a2[3] = 0;
  v9 = 0;
  v3 = v10;
LABEL_4:
  if (v2 == v7)
  {
    v11 = v10;
    (*(void (**)(_QWORD *, _BYTE *))(v7[0] + 24))(v7, v10);
  }
  else
  {
    v11 = v2;
    v8 = 0;
  }
LABEL_6:
  v12[0] = 0;
  v12[1] = 0;
  v12[2] = 0x800000000;
  llvm::InternalizePass::internalizeModule();
  sub_22E3B3AD0((uint64_t)v12);
  if (v11 == v10)
  {
    v4 = 4;
LABEL_8:
    (*(void (**)(_QWORD *))(*v3 + 8 * v4))(v3);
    goto LABEL_9;
  }
  if (v11)
  {
    v4 = 5;
    v3 = v11;
    goto LABEL_8;
  }
LABEL_9:
  result = v8;
  if (v8 == v7)
  {
    v6 = (uint64_t (**)(_QWORD *))(v7[0] + 32);
    result = v7;
    return (_QWORD *)(*v6)(result);
  }
  if (v8)
  {
    v6 = (uint64_t (**)(_QWORD *))(*v8 + 40);
    return (_QWORD *)(*v6)(result);
  }
  return result;
}

uint64_t sub_22E618B48(uint64_t a1, uint64_t a2)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;

  if (a1 != a2)
  {
    v5 = *(char **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      sub_22F297208((char **)a1, (char **)a2);
      return a1;
    }
    v6 = *(unsigned int *)(a2 + 8);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v6)
    {
      v8 = *(char **)a1;
      v9 = *(char **)a1;
      if ((_DWORD)v6)
      {
        v10 = 0;
        do
        {
          v11 = &v5[v10];
          v12 = *(_QWORD *)&v5[v10];
          *(_QWORD *)&v5[v10] = 0;
          v13 = *(_QWORD *)&v8[v10];
          *(_QWORD *)&v8[v10] = v12;
          if (v13)
          {
            v14 = MEMORY[0x23489F15C]();
            MEMORY[0x2348A0E9C](v14, 0x10B2C407FF26C1CLL);
          }
          *(_QWORD *)&v8[v10 + 8] = *((_QWORD *)v11 + 1);
          v10 += 16;
        }
        while (v11 + 16 != &v5[16 * v6]);
        v7 = *(unsigned int *)(a1 + 8);
        v9 = &v8[v10];
        v8 = *(char **)a1;
      }
      v15 = &v8[16 * v7];
      while (v15 != v9)
      {
        v16 = *((_QWORD *)v15 - 2);
        v15 -= 16;
        *(_QWORD *)v15 = 0;
        if (v16)
        {
          v17 = MEMORY[0x23489F15C]();
          MEMORY[0x2348A0E9C](v17, 0x10B2C407FF26C1CLL);
        }
      }
      goto LABEL_27;
    }
    if (*(_DWORD *)(a1 + 12) >= v6)
    {
      if ((_DWORD)v7)
      {
        v18 = &v5[16 * v7];
        v19 = *(char **)a1;
        do
        {
          v20 = *(_QWORD *)v5;
          *(_QWORD *)v5 = 0;
          v21 = *(_QWORD *)v19;
          *(_QWORD *)v19 = v20;
          if (v21)
          {
            v22 = MEMORY[0x23489F15C]();
            MEMORY[0x2348A0E9C](v22, 0x10B2C407FF26C1CLL);
          }
          *((_QWORD *)v19 + 1) = *((_QWORD *)v5 + 1);
          v5 += 16;
          v19 += 16;
        }
        while (v5 != v18);
        goto LABEL_24;
      }
    }
    else
    {
      sub_22F29686C(a1);
      sub_22F29729C(a1);
    }
    v7 = 0;
LABEL_24:
    v23 = *(unsigned int *)(a2 + 8);
    if (v7 != v23)
    {
      v24 = *(_QWORD *)a2 + 16 * v23;
      v25 = (_QWORD *)(*(_QWORD *)a1 + 16 * v7);
      v26 = (uint64_t *)(*(_QWORD *)a2 + 16 * v7);
      do
      {
        v27 = *v26;
        *v26 = 0;
        *v25 = v27;
        v25[1] = v26[1];
        v26 += 2;
        v25 += 2;
      }
      while (v26 != (uint64_t *)v24);
    }
LABEL_27:
    *(_DWORD *)(a1 + 8) = v6;
    sub_22F29686C(a2);
  }
  return a1;
}

uint64_t sub_22E618D34(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  size_t v15;
  double v16;
  void **v17;
  size_t v18;
  void *__p[2];
  char v20;
  unsigned __int8 *v21[3];
  __int16 v22;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 48))(*a2, MEMORY[0x24BED5A38]);
  v7 = *a2;
  *a2 = 0;
  if ((_DWORD)result)
  {
    v8 = *(_QWORD *)(*a3 + 32);
    *(_QWORD *)(v8 + 312) = 0x800000000;
    if (*(char *)(v8 + 311) < 0)
    {
      **(_BYTE **)(v8 + 288) = 0;
      *(_QWORD *)(v8 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v8 + 288) = 0;
      *(_BYTE *)(v8 + 311) = 0;
    }
    v21[0] = (unsigned __int8 *)(v8 + 320);
    v21[1] = 0;
    v21[2] = (unsigned __int8 *)v8;
    v22 = 1;
    *(_BYTE *)(v8 + 320) = 0;
    *(_DWORD *)(v8 + 664) = 0;
    v9 = *(unsigned int *)(v8 + 776);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)(v8 + 768);
      v11 = 56 * v9;
      do
      {
        if (*(char *)(v10 + v11 - 9) < 0)
          operator delete(*(void **)(v10 + v11 - 32));
        v11 -= 56;
      }
      while (v11);
    }
    *(_DWORD *)(v8 + 776) = 0;
    v12 = a3[1];
    v13 = *(_BYTE *)(v12 + 23);
    if (v13 >= 0)
      v14 = (void *)a3[1];
    else
      v14 = *(void **)v12;
    if (v13 >= 0)
      v15 = v13 & 0x7F;
    else
      v15 = *(_QWORD *)(v12 + 8);
    v16 = sub_22E3B89A8(v21, v14, v15);
    (*(void (**)(void **__return_ptr, uint64_t, double))(*(_QWORD *)v7 + 24))(__p, v7, v16);
    if (v20 >= 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    if (v20 >= 0)
      v18 = v20 & 0x7F;
    else
      v18 = (size_t)__p[1];
    sub_22E3B89A8(v21, v17, v18);
    if (v20 < 0)
      operator delete(__p[0]);
    sub_22E3BB0B8((uint64_t)v21);
    *a1 = 0;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    *a1 = v7;
  }
  return result;
}

void sub_22E618EB0(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t sub_22E618EBC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  BOOL v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  int v23;
  int v24;
  int v25;
  _QWORD v27[2];
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = a1 + 3448;
  v7 = *(_OWORD *)(a2 + 16);
  v8 = *(_OWORD *)(a2 + 32);
  v9 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v9;
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = v8;
  v10 = *(_OWORD *)(a2 + 80);
  v11 = *(_OWORD *)(a2 + 96);
  v12 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v12;
  *(_OWORD *)(a1 + 80) = v10;
  *(_OWORD *)(a1 + 96) = v11;
  *(_QWORD *)(a1 + 144) = a2;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 220) = 0;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 197) = 0u;
  *(_QWORD *)(a1 + 224) = a1 + 240;
  *(_QWORD *)(a1 + 232) = 0x400000000;
  v13 = **(_QWORD **)(a2 + 200);
  v14 = MEMORY[0x24BED83B8] + 16;
  v27[1] = a1;
  v28 = MEMORY[0x24BED83B8] + 16;
  v27[0] = &off_24FA66C70;
  v29[1] = a1;
  v30 = MEMORY[0x24BED83B8] + 16;
  v29[0] = &off_24FA66C70;
  *(_QWORD *)(a1 + 272) = a1 + 288;
  *(_QWORD *)(a1 + 280) = 0x200000000;
  *(_QWORD *)(a1 + 336) = v13;
  *(_QWORD *)(a1 + 344) = a1 + 392;
  *(_QWORD *)(a1 + 352) = a1 + 400;
  *(_QWORD *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(_WORD *)(a1 + 372) = 512;
  *(_BYTE *)(a1 + 374) = 7;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_QWORD *)(a1 + 392) = v14;
  *(_QWORD *)(a1 + 400) = &off_24FA66C70;
  *(_QWORD *)(a1 + 408) = a1;
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v29);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v30);
  *(_QWORD *)(a1 + 416) = a2;
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v27);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v28);
  *(_QWORD *)(a1 + 424) = a1 + 440;
  *(_QWORD *)(a1 + 432) = 0x3000000000;
  *(_QWORD *)(a1 + 1208) = a1 + 1224;
  *(_QWORD *)(a1 + 1216) = 0x1000000000;
  *(_BYTE *)(a1 + 1528) = 0;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_DWORD *)(a1 + 1496) = 0;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_DWORD *)(a1 + 1520) = 0;
  *(_QWORD *)(a1 + 1536) = a1 + 1552;
  *(_QWORD *)(a1 + 1544) = 0x400000000;
  *(_DWORD *)(a1 + 1584) = 0;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_QWORD *)(a1 + 1632) = a1 + 1648;
  *(_QWORD *)(a1 + 1640) = 0x400000000;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_DWORD *)(a1 + 1696) = 0;
  *(_QWORD *)(a1 + 1704) = -1;
  *(_QWORD *)(a1 + 1712) = 0;
  *(_QWORD *)(a1 + 1720) = -1;
  *(_DWORD *)(a1 + 1728) = 0;
  *(_DWORD *)(a1 + 1760) = 0;
  *(_QWORD *)(a1 + 1752) = 0;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1784) = 0u;
  *(_OWORD *)(a1 + 1796) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_OWORD *)(a1 + 1848) = 0u;
  v15 = *(_QWORD *)(a1 + 144);
  *(_OWORD *)(a1 + 1864) = *(_OWORD *)(*(_QWORD *)(v15 + 152) + 256);
  *(_DWORD *)(a1 + 1880) = 0;
  *(_QWORD *)(a1 + 1893) = 0;
  *(_QWORD *)(a1 + 1888) = 0;
  *(_OWORD *)(a1 + 1932) = 0u;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_OWORD *)(a1 + 1904) = 0u;
  *(_DWORD *)(a1 + 1976) = 0;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_QWORD *)(a1 + 1952) = 0;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_QWORD *)(a1 + 2032) = a1 + 2048;
  *(_QWORD *)(a1 + 2040) = 0x800000000;
  *(_QWORD *)(a1 + 2304) = a1 + 2328;
  *(_QWORD *)(a1 + 2312) = 0;
  *(_QWORD *)(a1 + 2320) = 256;
  *(_QWORD *)(a1 + 2584) = a1 + 2600;
  *(_QWORD *)(a1 + 2592) = 0x200000000;
  *(_QWORD *)(a1 + 2632) = 0;
  *(_OWORD *)(a1 + 2616) = 0u;
  *(_DWORD *)(a1 + 2640) = 1;
  *(_QWORD *)(a1 + 2664) = 0;
  *(_OWORD *)(a1 + 2648) = 0u;
  *(_QWORD *)(a1 + 2672) = a1 + 2688;
  *(_QWORD *)(a1 + 2680) = 0x100000000;
  *(_OWORD *)(a1 + 2736) = 0u;
  *(_OWORD *)(a1 + 2752) = 0u;
  *(_OWORD *)(a1 + 2768) = 0u;
  *(_BYTE *)(a1 + 2784) = 0;
  sub_22E51A8D0((_DWORD *)(a1 + 2788), *(_QWORD *)(v15 + 152));
  *(_QWORD *)(a1 + 2792) = a1 + 2808;
  *(_QWORD *)(a1 + 2800) = 0x800000000;
  *(_QWORD *)(a1 + 2872) = 0;
  *(_QWORD *)(a1 + 2880) = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 824);
  *(_DWORD *)(a1 + 2888) = 0;
  *(_WORD *)(a1 + 2892) = 0;
  *(_DWORD *)(a1 + 2920) = 0;
  *(_OWORD *)(a1 + 2904) = 0u;
  *(_QWORD *)(a1 + 2896) = 0;
  *(_DWORD *)(a1 + 2944) = 0;
  *(_OWORD *)(a1 + 2928) = 0u;
  *(_QWORD *)(a1 + 2952) = 1;
  for (i = 2960; i != 2992; i += 16)
    *(_QWORD *)(a1 + i) = -4096;
  v17 = 0;
  *(_DWORD *)(a1 + 3008) = 0;
  *(_OWORD *)(a1 + 2992) = 0u;
  *(_DWORD *)(a1 + 3032) = 0;
  *(_OWORD *)(a1 + 3016) = 0u;
  *(_QWORD *)(a1 + 3040) = a1 + 3056;
  *(_QWORD *)(a1 + 3048) = 0x800000000;
  *(_QWORD *)(a1 + 3440) = a1 + 3456;
  *(_QWORD *)(a1 + 3464) = 0;
  *(_QWORD *)(a1 + 3472) = -1;
  *(_OWORD *)(a1 + 3480) = 0u;
  *(_QWORD *)(a1 + 3496) = -1;
  *(_QWORD *)(a1 + 3504) = 0;
  *(_OWORD *)v6 = xmmword_22F45B750;
  *(_QWORD *)(a1 + 3904) = a2;
  *(_OWORD *)(a1 + 3940) = 0u;
  *(_OWORD *)(a1 + 3928) = 0u;
  *(_OWORD *)(a1 + 3912) = 0u;
  *(_OWORD *)(a1 + 4068) = 0u;
  *(_OWORD *)(a1 + 4056) = 0u;
  *(_OWORD *)(a1 + 4040) = 0u;
  *(_OWORD *)(a1 + 4024) = 0u;
  *(_OWORD *)(a1 + 4008) = 0u;
  *(_OWORD *)(a1 + 3992) = 0u;
  *(_OWORD *)(a1 + 3976) = 0u;
  *(_OWORD *)(a1 + 3960) = 0u;
  *(_DWORD *)(a1 + 4104) = 0;
  *(_OWORD *)(a1 + 4088) = 0u;
  *(_DWORD *)(a1 + 4128) = 0;
  *(_OWORD *)(a1 + 4112) = 0u;
  *(_OWORD *)(a1 + 4136) = 0u;
  *(_DWORD *)(a1 + 4152) = 0;
  *(_DWORD *)(a1 + 4176) = 0;
  *(_OWORD *)(a1 + 4160) = 0u;
  *(_OWORD *)(a1 + 4244) = 0u;
  *(_OWORD *)(a1 + 4216) = 0u;
  *(_OWORD *)(a1 + 4232) = 0u;
  *(_OWORD *)(a1 + 4264) = 0u;
  *(_OWORD *)(a1 + 4184) = 0u;
  *(_OWORD *)(a1 + 4200) = 0u;
  *(_QWORD *)(a1 + 4280) = 0;
  *(_QWORD *)(a1 + 4288) = a1 + 4304;
  *(_QWORD *)(a1 + 4296) = 0x800000000;
  *(_QWORD *)(a1 + 5520) = a1 + 5536;
  *(_QWORD *)(a1 + 5528) = 0x100000000;
  *(_QWORD *)(a1 + 5728) = a1 + 5744;
  *(_QWORD *)(a1 + 5736) = 0x100000000;
  *(_QWORD *)(a1 + 5760) = a1 + 5776;
  *(_QWORD *)(a1 + 5768) = 0x200000000;
  *(_OWORD *)(a1 + 5824) = 0u;
  *(_OWORD *)(a1 + 5836) = 0u;
  *(_OWORD *)(a1 + 5808) = 0u;
  *(_OWORD *)(a1 + 5884) = 0u;
  *(_OWORD *)(a1 + 5872) = 0u;
  *(_OWORD *)(a1 + 5856) = 0u;
  *(_OWORD *)(a1 + 5904) = 0u;
  *(_OWORD *)(a1 + 5920) = 0u;
  *(_DWORD *)(a1 + 5936) = 0;
  *(_OWORD *)(a1 + 5944) = 0u;
  *(_OWORD *)(a1 + 5960) = 0u;
  *(_QWORD *)(a1 + 5976) = a1 + 5992;
  *(_QWORD *)(a1 + 5984) = 0x200000000;
  *(_OWORD *)(a1 + 6008) = 0u;
  *(_DWORD *)(a1 + 6024) = 0;
  *(_QWORD *)(a1 + 6040) = 0;
  *(_QWORD *)(a1 + 6032) = 0;
  *(_DWORD *)(a1 + 6056) = 0;
  *(_QWORD *)(a1 + 6048) = 0;
  v18 = *(_QWORD **)(a1 + 144);
  v19 = v18[23];
  if ((*(_BYTE *)(v19 + 3) & 0x10) == 0)
    v17 = (*(_QWORD *)(v19 + 32) & 0x800000) != 0
       || (*(_WORD *)(v18[19] + 256) & 0x210) != 0
       || (*(_QWORD *)(v19 + 32) & 0x1800) != 0;
  *(_BYTE *)(v6 + 2612) = v17;
  *(_QWORD *)(a1 + 6064) = a1 + 6080;
  *(_QWORD *)(a1 + 6072) = 0x400000000;
  if ((a3 & 1) == 0)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v18[28] + 16) + 24))(*(_QWORD *)(v18[28] + 16));
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 184);
  }
  *(_QWORD *)(a1 + 2024) = a1;
  v20 = *(_DWORD *)(a1 + 2788);
  v21 = (*(_QWORD *)(v19 + 32) & 2) == 0;
  v22 = (v20 >> 8) & 1;
  if (!v21)
    v22 = 0;
  v23 = (v20 >> 8) & 0x1E;
  v24 = (v20 >> 7) & 0x40;
  if (v21 && (*(_DWORD *)(a1 + 2788) & 3) == 2)
    v25 = 32;
  else
    v25 = 0;
  *(_DWORD *)(a1 + 368) = v24 | v23 | v22 | v25;
  return a1;
}

uint64_t sub_22E619434(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void **v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  char *v28;
  uint64_t v29;
  Function *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  v2 = *(_QWORD *)(a1 + 144);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 152) + 72);
  if ((_DWORD)v3 && *(_QWORD *)(a1 + 1624))
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 808) + 112))(*(_QWORD *)(v2 + 808), a1);
    v2 = *(_QWORD *)(a1 + 144);
    v3 = *(_QWORD *)(*(_QWORD *)(v2 + 152) + 72);
  }
  if ((v3 & 0x2000000000) != 0)
  {
    v31 = *(Function **)(a1 + 1624);
    if (v31)
      llvm::OpenMPIRBuilder::finalize((llvm::OpenMPIRBuilder *)(*(_QWORD *)(v2 + 808) + 48), v31);
  }
  v4 = *(void **)(a1 + 6064);
  v5 = *(unsigned int *)(a1 + 6072);
  if ((_DWORD)v5)
  {
    v32 = *(_QWORD *)(a1 + 6064);
    v33 = 32 * v5;
    do
    {
      v34 = *(_QWORD *)(v32 + v33 - 16);
      if (v34 != -8192 && v34 != -4096 && v34 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v32 + v33 - 32));
      v33 -= 32;
    }
    while (v33);
    v4 = *(void **)(a1 + 6064);
  }
  if (v4 != (void *)(a1 + 6080))
    free(v4);
  v6 = *(void **)(a1 + 6032);
  if (v6)
  {
    *(_QWORD *)(a1 + 6040) = v6;
    operator delete(v6);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 6008), (void *)(16 * *(unsigned int *)(a1 + 6024)));
  v7 = *(void **)(a1 + 5976);
  if (v7 != (void *)(a1 + 5992))
    free(v7);
  llvm::deallocate_buffer(*(llvm **)(a1 + 5880), (void *)(40 * *(unsigned int *)(a1 + 5896)));
  v8 = *(void **)(a1 + 5856);
  if (v8)
  {
    *(_QWORD *)(a1 + 5864) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 5760);
  if (v9 != (void *)(a1 + 5776))
    free(v9);
  v10 = *(void **)(a1 + 5728);
  if (v10 != (void *)(a1 + 5744))
    free(v10);
  v11 = *(void **)(a1 + 5520);
  if (v11 != (void *)(a1 + 5536))
    free(v11);
  v12 = *(void **)(a1 + 4288);
  if (v12 != (void *)(a1 + 4304))
    free(v12);
  llvm::deallocate_buffer(*(llvm **)(a1 + 4136), (void *)(16 * *(unsigned int *)(a1 + 4152)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 4112), (void *)(16 * *(unsigned int *)(a1 + 4128)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 4088), (void *)((unint64_t)*(unsigned int *)(a1 + 4104) << 6));
  llvm::deallocate_buffer(*(llvm **)(a1 + 4064), (void *)(144 * *(unsigned int *)(a1 + 4080)));
  v13 = *(void ***)(a1 + 4024);
  *(_QWORD *)(a1 + 4024) = 0;
  if (v13)
  {
    v36 = sub_22E5222DC(v13);
    MEMORY[0x2348A0E9C](v36, 0x10E0C40270CC477);
  }
  sub_22E6228BC(a1 + 3904);
  v14 = *(void **)(a1 + 3440);
  if (v14 != (void *)(a1 + 3456))
    free(v14);
  v15 = *(void **)(a1 + 3040);
  if (v15 != (void *)(a1 + 3056))
    free(v15);
  llvm::deallocate_buffer(*(llvm **)(a1 + 3016), (void *)(32 * *(unsigned int *)(a1 + 3032)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 2992), (void *)(16 * *(unsigned int *)(a1 + 3008)));
  if ((*(_BYTE *)(a1 + 2952) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 2960), (void *)(16 * *(unsigned int *)(a1 + 2968)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 2928), (void *)(16 * *(unsigned int *)(a1 + 2944)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 2904), (void *)(56 * *(unsigned int *)(a1 + 2920)));
  v16 = *(void **)(a1 + 2792);
  if (v16 != (void *)(a1 + 2808))
    free(v16);
  v17 = *(void **)(a1 + 2672);
  if (v17 != (void *)(a1 + 2688))
    free(v17);
  v18 = *(void **)(a1 + 2584);
  if (v18 != (void *)(a1 + 2600))
    free(v18);
  v19 = *(void **)(a1 + 2304);
  if (v19 != (void *)(a1 + 2328))
    free(v19);
  v20 = *(_QWORD *)(a1 + 1984);
  if (v20)
    MEMORY[0x2348A0E84](v20, 0x1000C8077774924);
  v21 = *(void **)(a1 + 2032);
  if (v21 != (void *)(a1 + 2048))
    free(v21);
  llvm::deallocate_buffer(*(llvm **)(a1 + 1960), (void *)(16 * *(unsigned int *)(a1 + 1976)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1928), (void *)(16 * *(unsigned int *)(a1 + 1944)));
  v22 = *(_QWORD *)(a1 + 1680);
  *(_QWORD *)(a1 + 1680) = 0;
  if (v22)
    MEMORY[0x2348A0E9C](v22, 0x1060C40B35DCDADLL);
  v23 = *(void **)(a1 + 1632);
  if (v23 != (void *)(a1 + 1648))
    free(v23);
  v24 = *(void **)(a1 + 1536);
  if (v24 != (void *)(a1 + 1552))
    free(v24);
  llvm::deallocate_buffer(*(llvm **)(a1 + 1504), (void *)(8 * *(unsigned int *)(a1 + 1520)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1480), (void *)(16 * *(unsigned int *)(a1 + 1496)));
  v25 = *(void **)(a1 + 1208);
  if (v25 != (void *)(a1 + 1224))
    free(v25);
  v26 = *(void **)(a1 + 424);
  if (v26 != (void *)(a1 + 440))
    free(v26);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)(a1 + 400));
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)(a1 + 392));
  v27 = *(void **)(a1 + 272);
  if (v27 != (void *)(a1 + 288))
    free(v27);
  v28 = *(char **)(a1 + 224);
  v29 = *(unsigned int *)(a1 + 232);
  if ((_DWORD)v29)
  {
    v37 = 8 * v29;
    v38 = v28 - 8;
    do
    {
      v39 = *(_QWORD *)&v38[v37];
      *(_QWORD *)&v38[v37] = 0;
      if (v39)
      {
        v40 = sub_22E524758(v39);
        MEMORY[0x2348A0E9C](v40, 0x1020C40A35F0548);
      }
      v37 -= 8;
    }
    while (v37);
    v28 = *(char **)(a1 + 224);
  }
  if (v28 != (char *)(a1 + 240))
    free(v28);
  return a1;
}

uint64_t sub_22E61990C(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  int v7;
  int v8;
  int ValueAsBool;
  int v10;
  int v11;
  int v12;
  int hasFnAttribute;
  int v14;
  uint64_t FnAttribute;

  v3 = *(_QWORD *)result;
  *(_DWORD *)(result + 8) = *(_DWORD *)(*(_QWORD *)result + 2788);
  *(_DWORD *)(v3 + 2788) = a2;
  *(_WORD *)(result + 12) = *(_WORD *)(v3 + 373);
  if (*(_DWORD *)(result + 8) != a2)
  {
    v4 = result;
    sub_22F298B04((uint64_t *)(result + 16), v3 + 272);
    v5 = *(_QWORD *)v4;
    *(_BYTE *)(v5 + 374) = (a2 >> 2) & 7;
    *(_BYTE *)(v5 + 373) = (a2 >> 5) & 3;
    v6 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 144) + 184) + 32) & 2) == 0;
    v7 = v6 & (a2 >> 8);
    if ((a2 & 3) == 2 && v6)
      v8 = 32;
    else
      v8 = 0;
    *(_DWORD *)(v5 + 368) = (a2 >> 7) & 0x40 | (a2 >> 8) & 0x1E | v7 | v8;
    FnAttribute = llvm::Function::getFnAttribute();
    ValueAsBool = llvm::Attribute::getValueAsBool((llvm::Attribute *)&FnAttribute);
    if (ValueAsBool != (ValueAsBool & (a2 >> 10)))
      llvm::Function::addFnAttr();
    FnAttribute = llvm::Function::getFnAttribute();
    v10 = llvm::Attribute::getValueAsBool((llvm::Attribute *)&FnAttribute);
    if (v10 != (v10 & (a2 >> 9)))
      llvm::Function::addFnAttr();
    FnAttribute = llvm::Function::getFnAttribute();
    v11 = llvm::Attribute::getValueAsBool((llvm::Attribute *)&FnAttribute);
    if (v11 != (v11 & (a2 >> 11)))
      llvm::Function::addFnAttr();
    FnAttribute = llvm::Function::getFnAttribute();
    result = llvm::Attribute::getValueAsBool((llvm::Attribute *)&FnAttribute);
    if ((a2 & 0x3900) == 0x3900)
      v12 = result;
    else
      v12 = 0;
    if ((_DWORD)result != v12)
      result = llvm::Function::addFnAttr();
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 144) + 184) + 32) & 2) != 0)
    {
      hasFnAttribute = llvm::Function::hasFnAttribute();
      if ((a2 & 0x100) == 0 && hasFnAttribute)
        llvm::Function::removeFnAttr();
      v14 = llvm::Function::hasFnAttribute();
      if ((a2 & 3) != 2 && v14)
        llvm::Function::removeFnAttr();
      result = llvm::Function::hasFnAttribute();
      if ((a2 & 0x3900) != 0x3900)
      {
        if ((_DWORD)result)
          return llvm::Function::removeFnAttr();
      }
    }
  }
  return result;
}

double sub_22E619C24@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  double result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[40];
  int v20;
  __int128 v21[2];
  uint64_t v22;
  __int128 v23[3];

  v20 = 2;
  *(_DWORD *)v19 = 0;
  memset(&v19[8], 0, 32);
  v11 = sub_22E62D754(*(_QWORD **)(a5 + 144), a2, &v20, (uint64_t)v19, a3);
  if (a4)
  {
    sub_22E3D2FA0(a5, a1, a2, v11, 0, 0, 0, &v16);
  }
  else
  {
    v12 = sub_22E66C868(*(_QWORD *)(a5 + 144) + 280, a2, 0);
    *(_QWORD *)&v16 = a1;
    *((_QWORD *)&v16 + 1) = v12;
    *(_QWORD *)&v17 = v11;
    DWORD2(v17) = 0;
    v18 = 0uLL;
  }
  v23[0] = v16;
  v23[1] = v17;
  v23[2] = v18;
  v13 = v20;
  v21[0] = *(_OWORD *)v19;
  v21[1] = *(_OWORD *)&v19[16];
  v22 = *(_QWORD *)&v19[32];
  v14 = *(_QWORD *)(*(_QWORD *)(a5 + 144) + 144);
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)(a6 + 24) = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_DWORD *)(a6 + 32) = 0;
  *(_QWORD *)(a6 + 40) = 0;
  *(_QWORD *)(a6 + 48) = 0;
  *(_QWORD *)(a6 + 64) = 0;
  *(_QWORD *)(a6 + 72) = 0;
  *(_QWORD *)(a6 + 84) = 2;
  *(_DWORD *)a6 = 0;
  *(_OWORD *)(a6 + 96) = 0u;
  *(_OWORD *)(a6 + 112) = 0u;
  *(_QWORD *)&result = sub_22E3C113C(a6, v23, a2, v13, v21, v14).n128_u64[0];
  return result;
}

uint64_t sub_22E619D5C(uint64_t a1, llvm::LLVMContext *a2)
{
  return sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), a2);
}

uint64_t sub_22E619D68(uint64_t a1)
{
  return ((uint64_t (*)(void))((char *)sub_22E619D9C
                            + 4
                            * byte_22F45B760[*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0 | 8) & 0xFFFFFFFFFFFFFFF0)
                                                                + 16)
                                           - 2]))();
}

void sub_22E619D9C()
{
  JUMPOUT(0x22E619D78);
}

uint64_t sub_22E619DA4()
{
  return 0;
}

uint64_t sub_22E619DAC()
{
  return 1;
}

uint64_t sub_22E619DB4()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  if (v1 == 39)
    v2 = v0;
  else
    v2 = 0;
  v3 = *(_BYTE *)(v2 + 40) & 7;
  if (v3 >= 5)
    return 2;
  else
    return dword_22F45B7F0[v3];
}

_QWORD *sub_22E619DE8(uint64_t a1, unsigned int a2)
{
  int v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  llvm::Instruction *v22;
  llvm::Instruction *v23;
  uint64_t v24;
  int v25;
  llvm::Instruction **v26;
  llvm::Instruction *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::Instruction *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  llvm *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  llvm::Type **v47;
  llvm::Type **v48;
  llvm::Type **v49;
  BOOL v50;
  unint64_t v51;
  unint64_t PrimitiveSizeInBits;
  int v53;
  llvm::Type *v54;
  unint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  char *v61;
  unint64_t v62;
  BOOL v63;
  llvm::BasicBlock *v64;
  uint64_t v65;
  _QWORD *result;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t Declaration;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE v80[32];
  __int16 v81;
  uint64_t v82;
  _QWORD v83[2];
  uint64_t v84;
  void *__p;
  uint64_t v86;
  _BYTE v87[8];
  llvm *v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  int v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _BYTE v98[4];
  char v99;
  char v100[27];
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 4172);
  v5 = v4 && v4 == *(_DWORD *)(a1 + 4168) && *(_QWORD *)(*(_QWORD *)(a1 + 1712) + 8) == 0;
  if (!*(_BYTE *)(a1 + 2892))
  {
    v6 = *(_QWORD *)(a1 + 2880);
    if (v6)
    {
      if (v5)
        v72 = *(_DWORD *)(a1 + 4176);
      else
        v72 = a2;
      sub_22F254674(v6, a1 + 272, v72);
    }
  }
  v7 = *(_QWORD *)(a1 + 1704);
  if (*(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000) == v7)
  {
    v8 = 1;
  }
  else
  {
    v8 = sub_22E489930(a1 + 1984, v7);
    LOBYTE(__p) = 0;
    v87[0] = 0;
    if (!*(_BYTE *)(a1 + 2892))
    {
      v9 = *(_QWORD *)(a1 + 2880);
      if (v9)
      {
        if (v5)
        {
          sub_22F254674(v9, a1 + 272, a2);
        }
        else
        {
          v96 = 0;
          v97 = a1;
          sub_22E48EE24((uint64_t *)&v96, a2, 0);
          __p = 0;
          v86 = v97;
          v97 = 0;
          v87[0] = 1;
          sub_22E48F084(&v96);
        }
      }
    }
    sub_22E489F30(a1, *(_QWORD *)(a1 + 1704), 0, 0);
    if (v87[0])
      sub_22E48F084(&__p);
  }
  v10 = *(_QWORD *)(a1 + 320);
  if (v10)
  {
    if (*(_QWORD *)(v10 + 40) == v10 + 40 || !*(_QWORD *)(*(_QWORD *)(a1 + 1712) + 8))
    {
      llvm::Value::replaceAllUsesWith();
      if (*(_QWORD *)(a1 + 1712))
      {
        v13 = MEMORY[0x23489C078]();
        MEMORY[0x2348A0E9C](v13, 0x1020C4012B667A0);
      }
      *(_QWORD *)(a1 + 1712) = 0;
      *(_QWORD *)(a1 + 1720) = -1;
      *(_DWORD *)(a1 + 1728) = 0;
      goto LABEL_33;
    }
    v11 = (_QWORD *)a1;
    v12 = *(_QWORD **)(a1 + 1712);
LABEL_32:
    sub_22E5ED9B4(v11, v12, 0);
LABEL_33:
    v84 = 0;
    goto LABEL_34;
  }
  v12 = *(_QWORD **)(a1 + 1712);
  v14 = v12[1];
  if (!v14
    || *(_QWORD *)(v14 + 8)
    || ((v15 = *(_QWORD *)(v14 + 24)) != 0 ? (v16 = *(_BYTE *)(v15 + 16) == 30) : (v16 = 0),
        !v16 || (*(_DWORD *)(v15 + 20) & 0x7FFFFFF) != 1 || *(_QWORD **)(v15 - 32) != v12))
  {
    v11 = (_QWORD *)a1;
    goto LABEL_32;
  }
  v84 = *(_QWORD *)(v15 + 48);
  if (v84)
    llvm::MetadataTracking::track();
  v78 = *(_QWORD *)(v15 + 40);
  *(_QWORD *)(a1 + 320) = v78;
  *(_QWORD *)(a1 + 328) = v78 + 40;
  llvm::Instruction::eraseFromParent((llvm::Instruction *)v15);
  if (*(_QWORD *)(a1 + 1712))
  {
    v79 = MEMORY[0x23489C078]();
    MEMORY[0x2348A0E9C](v79, 0x1020C4012B667A0);
  }
  *(_QWORD *)(a1 + 1712) = 0;
  *(_QWORD *)(a1 + 1720) = -1;
  *(_DWORD *)(a1 + 1728) = 0;
LABEL_34:
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 6) & 0x1C) != 0)
  {
    v17 = *(_QWORD *)(a1 + 1592);
    if (v17)
    {
      if (!sub_22F297498(v17))
      {
        v71 = **(_QWORD **)(*(_QWORD *)(a1 + 144) + 184);
        if ((v71 & 0x4000000000000) != 0)
        {
          llvm::Function::addFnAttr();
          v71 = **(_QWORD **)(*(_QWORD *)(a1 + 144) + 184);
        }
        if ((v71 & 0x8000000000000) != 0)
          llvm::Function::addFnAttr();
      }
    }
  }
  if (!*(_BYTE *)(a1 + 2892))
  {
    v18 = *(_QWORD **)(a1 + 2880);
    if (v18)
      sub_22F256A70(v18, a1 + 272, *(llvm::Function **)(a1 + 1624));
  }
  v82 = v84;
  if (v84)
    llvm::MetadataTracking::track();
  sub_22E48EFBC(v83, a1, &v82);
  if (v82)
    llvm::MetadataTracking::untrack();
  v19 = (_QWORD *)(a1 + 320);
  sub_22E475C50(a1, *(_QWORD *)(a1 + 1608), v8, a2);
  sub_22E4D28A4(a1, *(_QWORD *)(a1 + 1600));
  v20 = *(_QWORD *)(a1 + 2896);
  if (v20)
  {
    sub_22E5ED9B4((_QWORD *)a1, *(_QWORD **)(v20 + 40), 0);
    *v19 = 0;
    *(_QWORD *)(a1 + 328) = 0;
  }
  v21 = *(unsigned int *)(a1 + 3000);
  if ((_DWORD)v21)
  {
    v96 = v98;
    v97 = 0x400000000;
    sub_22F24C010((uint64_t)&v96, v21);
    v67 = *(_QWORD *)(a1 + 2992);
    v68 = *(unsigned int *)(a1 + 3008);
    v69 = v67 + 16 * v68;
    if (*(_DWORD *)(a1 + 3000))
    {
      if ((_DWORD)v68)
      {
        v73 = 16 * v68;
        v70 = *(_QWORD *)(a1 + 2992);
        while ((*(_QWORD *)v70 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v70 += 16;
          v73 -= 16;
          if (!v73)
            goto LABEL_149;
        }
      }
      else
      {
        v70 = *(_QWORD *)(a1 + 2992);
      }
    }
    else
    {
LABEL_149:
      v70 = v67 + 16 * v68;
    }
    v74 = v67 + 16 * v68;
LABEL_151:
    while (v70 != v74)
    {
      v96[*(int *)(v70 + 8)] = *(_QWORD *)v70;
      v75 = v70 + 16;
      v70 = v69;
      if (v75 != v69)
      {
        v70 = v75;
        while ((*(_QWORD *)v70 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v70 += 16;
          if (v70 == v69)
          {
            v70 = v69;
            goto LABEL_151;
          }
        }
      }
    }
    Declaration = llvm::Intrinsic::getDeclaration();
    sub_22F253558((uint64_t)&__p, *(llvm::Value **)(a1 + 1840), 0, 0, 0);
    v95 = a1;
    if (Declaration)
      v77 = *(_QWORD *)(Declaration + 24);
    else
      v77 = 0;
    v81 = 257;
    sub_22E462B78((uint64_t *)&__p, v77, Declaration, (uint64_t)v96, v97, (uint64_t)v80, 0);
    sub_22E4D6138(&__p);
    if (v96 != (_QWORD *)v98)
      free(v96);
  }
  v22 = *(llvm::Instruction **)(a1 + 1840);
  *(_QWORD *)(a1 + 1840) = 0;
  llvm::Instruction::eraseFromParent(v22);
  v23 = *(llvm::Instruction **)(a1 + 1848);
  if (v23)
  {
    *(_QWORD *)(a1 + 1848) = 0;
    llvm::Instruction::eraseFromParent(v23);
  }
  v24 = *(_QWORD *)(a1 + 2896);
  if (v24)
  {
    v25 = *(_DWORD *)(v24 + 20);
    v26 = (v25 & 0x40000000) != 0
        ? *(llvm::Instruction ***)(v24 - 8)
        : (llvm::Instruction **)(v24 - 32 * (v25 & 0x7FFFFFF));
    v27 = *v26;
    if ((*((_DWORD *)*v26 + 5) & 0x7FFFFFF) == 0)
    {
      llvm::UndefValue::get();
      llvm::Value::replaceAllUsesWith();
      llvm::Instruction::eraseFromParent(v27);
    }
  }
  sub_22E61A7D0(*(_QWORD *)(a1 + 1624), *(_QWORD **)(a1 + 2648));
  sub_22E61A7D0(*(_QWORD *)(a1 + 1624), *(_QWORD **)(a1 + 5960));
  sub_22E61A7D0(*(_QWORD *)(a1 + 1624), *(_QWORD **)(a1 + 5968));
  sub_22E61A7D0(*(_QWORD *)(a1 + 1624), *(_QWORD **)(a1 + 4160));
  v28 = *(_QWORD *)(a1 + 6032);
  v29 = *(_QWORD *)(a1 + 6040);
  while (v28 != v29)
  {
    sub_22E61A7D0(*(_QWORD *)(a1 + 1624), *(_QWORD **)(v28 + 8));
    v28 += 16;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 5) & 2) != 0)
    sub_22E637008(a1);
  v30 = *(unsigned int *)(a1 + 6072);
  if ((_DWORD)v30)
  {
    v31 = 32 * v30;
    v32 = *(_QWORD *)(a1 + 6064) + 24;
    do
    {
      v33 = *(llvm::Instruction **)(v32 - 8);
      if (v33)
      {
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v33);
      }
      v32 += 32;
      v31 -= 32;
    }
    while (v31);
    v34 = *(unsigned int *)(a1 + 6072);
    if ((_DWORD)v34)
    {
      v35 = *(_QWORD *)(a1 + 6064);
      v36 = 32 * v34;
      do
      {
        v37 = *(_QWORD *)(v35 + v36 - 16);
        if (v37 != -8192 && v37 != -4096 && v37 != 0)
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v35 + v36 - 32));
        v36 -= 32;
      }
      while (v36);
    }
  }
  *(_DWORD *)(a1 + 6072) = 0;
  if (*(_QWORD *)(a1 + 2624) > 7uLL && *(_QWORD *)(a1 + 1680))
  {
    v39 = *(_QWORD *)(a1 + 1624);
    __p = v87;
    v86 = 0x100000000;
    v94 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v93 = 0;
    v91 = 0;
    v92 = v39;
    llvm::DomTreeBuilder::Calculate<llvm::DominatorTreeBase<llvm::BasicBlock,false>>();
    v96 = (_QWORD *)(*(_QWORD *)(a1 + 2624) & 0xFFFFFFFFFFFFFFF8);
    llvm::PromoteMemToReg();
    *(_QWORD *)(a1 + 2624) = 0;
    *(_QWORD *)(a1 + 2632) = 0;
    v40 = v88;
    if (v90)
    {
      v41 = (uint64_t *)((char *)v88 + 8);
      v42 = 16 * v90;
      do
      {
        if ((*(v41 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v43 = *v41;
          *v41 = 0;
          if (v43)
          {
            v44 = *(void **)(v43 + 24);
            if (v44 != (void *)(v43 + 40))
              free(v44);
            MEMORY[0x2348A0E9C](v43, 0x10A0C40528A66C4);
          }
        }
        v41 += 2;
        v42 -= 16;
      }
      while (v42);
      v40 = v88;
      v45 = (void *)(16 * v90);
    }
    else
    {
      v45 = 0;
    }
    llvm::deallocate_buffer(v40, v45);
    if (__p != v87)
      free(__p);
  }
  v46 = *(_QWORD *)(a1 + 1624);
  if ((*(_WORD *)(v46 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 1624));
    v47 = *(llvm::Type ***)(v46 + 88);
    if ((*(_WORD *)(v46 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v46);
      v48 = *(llvm::Type ***)(v46 + 88);
      goto LABEL_90;
    }
  }
  else
  {
    v47 = *(llvm::Type ***)(v46 + 88);
  }
  v48 = v47;
LABEL_90:
  v49 = &v48[5 * *(_QWORD *)(v46 + 96)];
  while (v47 != v49)
  {
    if (*v47)
      v50 = (*((_DWORD *)*v47 + 2) & 0xFE) == 18;
    else
      v50 = 0;
    if (v50)
    {
      v51 = *(unsigned int *)(a1 + 6056);
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*v47);
      if (PrimitiveSizeInBits <= v51)
        v53 = v51;
      else
        v53 = PrimitiveSizeInBits;
      *(_DWORD *)(a1 + 6056) = v53;
    }
    v47 += 5;
  }
  v54 = **(llvm::Type ***)(*(_QWORD *)(*(_QWORD *)(a1 + 1624) + 24) + 16);
  v55 = *(unsigned int *)(a1 + 6056);
  if (v54)
    v56 = (*((_DWORD *)v54 + 2) & 0xFE) == 18;
  else
    v56 = 0;
  if (v56)
  {
    v57 = llvm::Type::getPrimitiveSizeInBits(v54);
    if (v57 > v55)
      LODWORD(v55) = v57;
    *(_DWORD *)(a1 + 6056) = v55;
  }
  v58 = *(_QWORD *)(*(_QWORD *)(a1 + 1608) + 8) >> 33;
  v16 = (v58 & 0xF) == 0;
  v59 = 1 << ((v58 & 0xF) - 1);
  if (v16)
    v60 = 0;
  else
    v60 = v59;
  if (v60 <= v55)
  {
    if (!(_DWORD)v55)
    {
      v61 = &v99;
      v99 = 48;
      goto LABEL_118;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 6056) = v60;
    LODWORD(v55) = v59;
  }
  v61 = v100;
  v62 = v55;
  do
  {
    *--v61 = (v62 % 0xA) | 0x30;
    v63 = v62 > 9;
    v62 /= 0xAuLL;
  }
  while (v63);
LABEL_118:
  sub_22E3B4274(&__p, v61, v100, v100 - v61);
  llvm::Function::addFnAttr();
  if ((v87[7] & 0x80000000) != 0)
    operator delete(__p);
  (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144)
                                                                            + 15088)
                                                              + 272))(&__p, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 15088), *(_QWORD *)(*(_QWORD *)(a1 + 144) + 152));
  if ((_BYTE)v86)
  {
    llvm::Attribute::getWithVScaleRangeArgs(*(llvm::Attribute **)(*(_QWORD *)(a1 + 144) + 232), (llvm::LLVMContext *)__p);
    llvm::Function::addFnAttr();
  }
  v64 = *(llvm::BasicBlock **)(a1 + 1712);
  if (v64 && !*((_QWORD *)v64 + 1))
  {
    *v19 = 0;
    *(_QWORD *)(a1 + 328) = 0;
    llvm::BasicBlock::eraseFromParent(v64);
  }
  v65 = *(_QWORD *)(a1 + 1736);
  if (v65 && (*(_BYTE *)(a1 + 1760) & 3) == 0 && *(_BYTE *)(v65 + 16) == 59 && !*(_QWORD *)(v65 + 8))
  {
    llvm::Instruction::eraseFromParent((llvm::Instruction *)v65);
    *(_QWORD *)(a1 + 1744) = 0;
    *(_QWORD *)(a1 + 1752) = 0;
    *(_QWORD *)(a1 + 1736) = 0;
    *(_DWORD *)(a1 + 1760) = 0;
    *(_QWORD *)(a1 + 1776) = 0;
    *(_QWORD *)(a1 + 1768) = 0;
  }
  result = sub_22E48F084(v83);
  if (v84)
    return (_QWORD *)llvm::MetadataTracking::untrack();
  return result;
}

uint64_t sub_22E61A7D0(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    if (!a2[1])
    {
      MEMORY[0x23489C078](a2);
      JUMPOUT(0x2348A0E9CLL);
    }
    v3 = result;
    v4 = result + 72;
    result = llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList();
    v5 = *(_QWORD *)(v3 + 72);
    a2[3] = v5;
    a2[4] = v4;
    v6 = a2 + 3;
    *(_QWORD *)(v5 + 8) = v6;
    *(_QWORD *)(v3 + 72) = v6;
  }
  return result;
}

BOOL sub_22E61A84C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 164)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22E61A8AC(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  if (*(_QWORD *)(a1 + 5904))
    return 1;
  if ((*(_BYTE *)(a1 + 1868) & 2) == 0)
    return 0;
  result = *(_QWORD *)(a1 + 1600);
  if (result)
  {
    if ((*(_BYTE *)(result + 29) & 1) != 0)
    {
      sub_22EFC8E88(result);
      return sub_22E622BFC(v2) != 0;
    }
    return 0;
  }
  return result;
}

void sub_22E61A8FC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, llvm::Value *this, uint64_t a6, uint64_t *a7, unsigned int a8, int8x16_t a9, uint64_t a10)
{
  _QWORD *v14;
  unsigned int v15;
  _BOOL4 v16;
  unint64_t v17;
  unint64_t v18;
  int8x16_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  int8x16_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t *v87;
  char i;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int8x16_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  char v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  unsigned int v123;
  unsigned int v124;
  char v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t v135;
  BOOL v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char *v159;
  BOOL v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  Function *v165;
  uint64_t v166;
  uint64_t v167;
  void **v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  _QWORD *v173;
  unint64_t v174;
  unint64_t v175;
  __int16 v176;
  unint64_t v177;
  int v178;
  uint64_t v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  int8x16_t *v183;
  uint64_t Name;
  unint64_t v185;
  size_t v186;
  const void *v187;
  _BYTE *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _BOOL4 v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  char *v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t j;
  uint64_t v218;
  unsigned int v219;
  int v220;
  int v221;
  unsigned int v222;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  llvm::Type *v228;
  unint64_t v229;
  llvm::PointerType *v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  BOOL v242;
  uint64_t v243;
  BOOL v244;
  uint64_t v245;
  uint64_t v246;
  unsigned __int8 *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unsigned __int8 *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unsigned __int8 *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unsigned int v272;
  uint64_t *v273;
  uint64_t v274;
  BOOL v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  __int128 v280;
  _BOOL4 v281;
  llvm::Type *v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  __int128 v291;
  int v292;
  _BYTE *v293;
  unint64_t v294;
  uint64_t v295;
  _QWORD *v296;
  unsigned int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t *v301;
  llvm::LLVMContext *v302;
  llvm::GetElementPtrInst *v303;
  llvm::Type *v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  unint64_t v313;
  int v314;
  unint64_t v315;
  uint64_t v316;
  _QWORD *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  unsigned int v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  uint64_t v328;
  unsigned int v329;
  uint64_t v330;
  uint64_t *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t *v338;
  uint64_t v339;
  uint64_t *k;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  llvm::Type *v347;
  uint64_t v348;
  llvm::Constant *v349;
  uint64_t v350;
  _QWORD *v351;
  uint64_t v352;
  unint64_t v353;
  unsigned int v354;
  uint64_t v355;
  uint64_t v356;
  _QWORD *v357;
  uint64_t v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t v361;
  unint64_t v362;
  int v363;
  _QWORD *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unsigned int v371;
  uint64_t v372;
  uint64_t v373;
  _QWORD *v374;
  _QWORD *v375;
  _QWORD *v378;
  uint64_t v379;
  unsigned int v380;
  uint64_t v382;
  _BOOL4 v383;
  _BYTE v385[136];
  _OWORD v386[8];
  uint64_t v387;
  _OWORD v388[3];
  _OWORD v389[3];
  _OWORD v390[3];
  _QWORD v391[2];
  char v392;
  char v393[35];
  _BYTE __dst[64];
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  uint64_t v399;
  uint64_t v400;

  v400 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 2893) = 0;
  v14 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)(a1 + 1600) = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v15 = (*((_DWORD *)v14 + 7) & 0x7E) - 52;
    v16 = v15 < 6;
    if (v15 > 5)
    {
      v17 = 0;
    }
    else
    {
      v17 = a2 & 0xFFFFFFFFFFFFFFF8;
      if ((*((_BYTE *)v14 + 84) & 2) != 0)
      {
        *(_QWORD *)(a1 + 1888) = v14;
        v17 = a2 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    v18 = sub_22EFCB24C(a2 & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    v17 = 0;
    v16 = 0;
    v18 = 0;
  }
  *(_QWORD *)(a1 + 1592) = v18;
  *(_QWORD *)(a1 + 1616) = a4;
  *(_QWORD *)(a1 + 1624) = this;
  *(_QWORD *)(a1 + 1608) = a6;
  v19 = (int8x16_t *)(a1 + 1864);
  v20 = *(_QWORD *)(a1 + 1864);
  v380 = a8;
  v383 = v16;
  v382 = v17;
  if (!v20)
    goto LABEL_225;
  if ((v20 & 1) != 0)
  {
    v21 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 1, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v21)
    {
      v20 &= ~1uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 2) != 0)
  {
    v22 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 2, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v22)
    {
      v20 &= ~2uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 4) != 0)
  {
    v23 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 4, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v23)
    {
      v20 &= ~4uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 8) != 0)
  {
    v24 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 8, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v24)
    {
      v20 &= ~8uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x10) != 0)
  {
    v25 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 16, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v25)
    {
      v20 &= ~0x10uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x20) != 0)
  {
    v26 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 32, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v26)
    {
      v20 &= ~0x20uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x40) != 0)
  {
    v27 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 64, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v27)
    {
      v20 &= ~0x40uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x80) != 0)
  {
    v28 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 128, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v28)
    {
      v20 &= ~0x80uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x200) != 0)
  {
    v29 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 512, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v29)
    {
      v20 &= ~0x200uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x400) != 0)
  {
    v30 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 1024, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v30)
    {
      v20 &= ~0x400uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x800) != 0)
  {
    v31 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 2048, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v31)
    {
      v20 &= ~0x800uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x1000) != 0)
  {
    v32 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 4096, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v32)
    {
      v20 &= ~0x1000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x2000) != 0)
  {
    v33 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x2000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v33)
    {
      v20 &= ~0x2000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x4000) != 0)
  {
    v34 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x4000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v34)
    {
      v20 &= ~0x4000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x8000) != 0)
  {
    v35 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x8000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v35)
    {
      v20 &= ~0x8000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x10000) != 0)
  {
    v36 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x10000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v36)
    {
      v20 &= ~0x10000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x20000) != 0)
  {
    v37 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x20000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v37)
    {
      v20 &= ~0x20000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x40000) != 0)
  {
    v38 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x40000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v38)
    {
      v20 &= ~0x40000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x80000) != 0)
  {
    v39 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x80000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v39)
    {
      v20 &= ~0x80000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x100000) != 0)
  {
    v40 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x100000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v40)
    {
      v20 &= ~0x100000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x200000) != 0)
  {
    v41 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x200000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v41)
    {
      v20 &= ~0x200000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x400000) != 0)
  {
    v42 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x400000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v42)
    {
      v20 &= ~0x400000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x800000) != 0)
  {
    v43 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x800000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v43)
    {
      v20 &= ~0x800000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x1000000) != 0)
  {
    v44 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x1000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v44)
    {
      v20 &= ~0x1000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x2000000) != 0)
  {
    v45 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x2000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v45)
    {
      v20 &= ~0x2000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x4000000) != 0)
  {
    v46 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x4000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v46)
    {
      v20 &= ~0x4000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x8000000) != 0)
  {
    v47 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x8000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v47)
    {
      v20 &= ~0x8000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x10000000) != 0)
  {
    v48 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x10000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v48)
    {
      v20 &= ~0x10000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x40000000) != 0)
  {
    v49 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x40000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v49)
    {
      v20 &= ~0x40000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x80000000) != 0)
  {
    v50 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x80000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v50)
    {
      v20 &= ~0x80000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x100000000) != 0)
  {
    v51 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x100000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v51)
    {
      v20 &= ~0x100000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x200000000) != 0)
  {
    v52 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x200000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v52)
    {
      v20 &= ~0x200000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x400000000) != 0)
  {
    v53 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x400000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v53)
    {
      v20 &= ~0x400000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x800000000) != 0)
  {
    v54 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x800000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v54)
    {
      v20 &= ~0x800000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x2000000000) != 0)
  {
    v55 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x2000000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v55)
    {
      v20 &= ~0x2000000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x4000000000) != 0)
  {
    v56 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x4000000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v56)
    {
      v20 &= ~0x4000000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x8000000000) != 0)
  {
    v57 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x8000000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v57)
    {
      v20 &= ~0x8000000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x10000000000) != 0)
  {
    v58 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x10000000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v58)
    {
      v20 &= ~0x10000000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x20000000000) != 0)
  {
    v59 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x20000000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v59)
    {
      v20 &= ~0x20000000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x40000000000) != 0)
  {
    v60 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x40000000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v60)
    {
      v20 &= ~0x40000000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x80000000000) != 0)
  {
    v61 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x80000000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v61)
    {
      v20 &= ~0x80000000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x100000000000) != 0)
  {
    v62 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x100000000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v62)
    {
      v20 &= ~0x100000000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_225;
  }
  if ((v20 & 0x200000000000) != 0)
  {
    v63 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x200000000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v63)
    {
      v20 &= ~0x200000000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_942;
  }
  if ((v20 & 0x400000000000) != 0)
  {
    v64 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x400000000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v64)
    {
      v20 &= ~0x400000000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
    {
LABEL_942:
      if (!*(_QWORD *)(a1 + 1872))
        goto LABEL_235;
      goto LABEL_226;
    }
  }
  if ((v20 & 0x800000000000) != 0)
  {
    v65 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x800000000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v65)
    {
      v20 &= ~0x800000000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_943;
  }
  if ((v20 & 0x1000000000000) != 0)
  {
    v66 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x1000000000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v66)
    {
      v20 &= ~0x1000000000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_943;
  }
  if ((v20 & 0x2000000000000) != 0)
  {
    v67 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x2000000000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v67)
    {
      v20 &= ~0x2000000000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_943;
  }
  if ((v20 & 0x4000000000000) != 0)
  {
    v68 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x4000000000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v68)
    {
      v20 &= ~0x4000000000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_943;
  }
  if ((v20 & 0x10000000000000) != 0)
  {
    v69 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x10000000000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v69)
    {
      v20 &= ~0x10000000000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_943;
  }
  if ((v20 & 0x20000000000000) != 0)
  {
    v70 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x20000000000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v70)
    {
      v20 &= ~0x20000000000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_943;
  }
  if ((v20 & 0x100000000000000) != 0)
  {
    v71 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x100000000000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v71)
    {
      v20 &= ~0x100000000000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_943;
  }
  if ((v20 & 0x200000000000000) != 0)
  {
    v72 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x200000000000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v72)
    {
      v20 &= ~0x200000000000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
      goto LABEL_943;
  }
  if ((v20 & 0x800000000000000) != 0)
  {
    v73 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x800000000000000, 0, this, a8);
    v20 = *(_QWORD *)(a1 + 1864);
    if (v73)
    {
      v20 &= ~0x800000000000000uLL;
      v19->i64[0] = v20;
    }
    if (!v20)
    {
LABEL_943:
      if (!*(_QWORD *)(a1 + 1872))
        goto LABEL_235;
      goto LABEL_226;
    }
  }
  if ((v20 & 0x2000000000000000) != 0)
  {
    v74 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0x2000000000000000, 0, this, a8);
    v75 = *(_QWORD *)(a1 + 1864);
    if (v74)
    {
      v75 &= ~0x2000000000000000uLL;
      *(_QWORD *)(a1 + 1864) = v75;
    }
    v19 = (int8x16_t *)(a1 + 1864);
    if (!v75)
    {
LABEL_225:
      if (!*(_QWORD *)(a1 + 1872))
        goto LABEL_235;
    }
  }
LABEL_226:
  v76 = *(_QWORD *)(a1 + 1872);
  if ((v76 & 1) != 0)
  {
    v77 = sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0, 1, this, a8);
    v76 = *(_QWORD *)(a1 + 1872);
    if (v77)
    {
      v76 &= ~1uLL;
      *(_QWORD *)(a1 + 1872) = v76;
    }
  }
  v78 = v19->i64[0] | v76;
  v79 = v76 & 4;
  if (v78)
    v80 = v79 == 0;
  else
    v80 = 1;
  if (!v80 && sub_22E62D1E8(*(_QWORD *)(a1 + 144), 0, 4, this, a8))
    *(_QWORD *)(a1 + 1872) &= ~4uLL;
LABEL_235:
  if (v14)
  {
    v81 = (uint64_t)v14;
    v82 = v19;
    v83 = *(_QWORD *)(a1 + 1864);
    v84 = *(_QWORD *)(a1 + 1872);
    v378 = (_QWORD *)v81;
    v85 = (uint64_t *)sub_22E61DF6C(v81);
    v87 = v86;
    for (i = 0; ; i |= v98 != (v100 - v97) >> 4)
    {
      v89 = v85;
      if (v85 >= v87)
      {
        if (v85 == v87)
          break;
        v90 = v87;
        while (*(_WORD *)(*v90 + 32) != 234)
        {
          if (++v90 == v85)
            goto LABEL_268;
        }
        v89 = v85;
      }
      else
      {
        while (*(_WORD *)(*v89 + 32) != 234)
        {
          if (++v89 == v87)
            goto LABEL_268;
        }
        v90 = v87;
      }
      if (v89 == v90)
        break;
      do
      {
        v92 = *v85++;
        v91 = v92;
      }
      while (*(_WORD *)(v92 + 32) != 234);
      v93 = sub_22F297754(v91);
      v94.i64[0] = v93;
      v94.i64[1] = v95;
      a9 = vbicq_s8(*v82, v94);
      *v82 = a9;
      if ((v93 & 0x39) != 0)
      {
        v96 = a9.i64[0];
        if ((v93 & 1) != 0)
          v96 = a9.i64[0] & 0xFFFFFFFFFFFFFFF7;
        if ((v93 & 8) != 0)
          v96 &= ~1uLL;
        if ((v93 & 0x10) != 0)
          v96 &= ~0x20uLL;
        if ((v93 & 0x20) != 0)
          v96 &= ~0x10uLL;
        v82->i64[0] = v96;
      }
      v97 = *(_QWORD *)(v91 + 40);
      v98 = *(unsigned int *)(v91 + 36);
      if ((_DWORD)v98)
      {
        v99 = 16 * v98;
        v100 = *(_QWORD *)(v91 + 40);
        while (*(_QWORD *)(v100 + 8) != 8 || **(_QWORD **)v100 != 0x6567617265766F63)
        {
          v100 += 16;
          v99 -= 16;
          if (!v99)
          {
            v100 = v97 + 16 * v98;
            break;
          }
        }
      }
      else
      {
        v100 = *(_QWORD *)(v91 + 40);
      }
    }
LABEL_268:
    if (v83 & 0x10000 | v84 & 1 && !(*(_QWORD *)(a1 + 1864) & 0x10000 | *(_QWORD *)(a1 + 1872) & 1))
      llvm::Function::addFnAttr();
    v16 = v383;
    v17 = v382;
    v19 = v82;
    v14 = v378;
    a8 = v380;
    if ((i & 1) != 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 36) & 0xC00B8) != 0)
      llvm::Function::addFnAttr();
  }
  v101 = *(_QWORD *)(a1 + 1592);
  if (v101 && sub_22E61A84C(v101))
    goto LABEL_285;
  v102 = v19->i64[0];
  if ((v19->i64[0] & 9) != 0)
  {
    llvm::Function::addFnAttr();
    v102 = v19->i64[0];
  }
  if ((v102 & 0x30) != 0)
  {
    llvm::Function::addFnAttr();
    v102 = v19->i64[0];
  }
  if ((v102 & 0x40) != 0)
  {
    llvm::Function::addFnAttr();
    v102 = v19->i64[0];
  }
  if ((v102 & 0x2000) != 0)
  {
    llvm::Function::addFnAttr();
    v102 = v19->i64[0];
  }
  if ((v102 & 0x600) != 0)
LABEL_285:
    llvm::Function::addFnAttr();
  v103 = v19->i64[0];
  if ((v19->i64[0] & 0x10000000000000) != 0)
  {
    llvm::Function::addFnAttr();
    v103 = v19->i64[0];
  }
  if ((v103 & 0x20000000000000) != 0)
  {
    llvm::Function::addFnAttr();
    v103 = v19->i64[0];
  }
  if ((v103 & 0x1800) != 0)
  {
    llvm::Function::addFnAttr();
    v103 = v19->i64[0];
  }
  if ((v103 & 0x2000) == 0)
  {
    if (!v14)
      goto LABEL_317;
LABEL_309:
    if ((v19->i8[6] & 1) != 0 && (*((_DWORD *)v14 + 7) & 0x7Eu) - 58 >= 0xFFFFFFFC)
    {
      v144 = v14[5];
      if ((v144 & 7) == 0)
      {
        v145 = v144 & 0xFFFFFFFFFFFFFFF8;
        if (v145)
        {
          v146 = *(_QWORD *)(v145 + 16);
          if (*(_DWORD *)v146 == 8 && *(_QWORD *)(v146 + 16) == 0x657461636F6C6C61)
          {
            if (((v147 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144),
                   (v148 = *(_QWORD *)(v14[6] & 0xFFFFFFFFFFFFFFF0)) != 0)
               && *(_BYTE *)(v148 + 16) == 26
               || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v148 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
               && (v148 = sub_22F10CF48(v148)) != 0)
              && (*(_QWORD *)(v148 + 16) & 0x3FFFC000000000) == 0x4000000000
              || ((v149 = *(_QWORD *)(v14[6] & 0xFFFFFFFFFFFFFFF0)) != 0 && *(_BYTE *)(v149 + 16) == 26
               || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v149 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
               && (v149 = sub_22F10CF48(v149)) != 0)
              && (*(_QWORD *)(v149 + 16) & 0x3FFFC000000000) == 0x8000000000)
            {
              v150 = v14[15];
              v151 = *(_QWORD *)(v14[6] & 0xFFFFFFFFFFFFFFF0);
              if ((!v151 || *(_BYTE *)(v151 + 16) != 26)
                && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v151 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
              {
                sub_22F10CF48(v151);
              }
              v152 = *(_QWORD *)(*(_QWORD *)v150 + 48) & 7 | *(_QWORD *)((*(_QWORD *)(*(_QWORD *)v150 + 48) & 0xFFFFFFFFFFFFFFF0)
                                                                           + 8);
              if (v152 == sub_22EF67C8C(v147))
              {
                v153 = *(_QWORD *)(v14[6] & 0xFFFFFFFFFFFFFFF0);
                if (!v153 || *(_BYTE *)(v153 + 16) != 26)
                {
                  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v153 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
                    goto LABEL_414;
                  v153 = sub_22F10CF48(v153);
                  if (!v153)
                    goto LABEL_414;
                }
                if ((*(_QWORD *)(v153 + 16) & 0x3FFFC000000000) != 0x8000000000)
                  goto LABEL_414;
                v154 = v14[15];
                v155 = *(_QWORD *)(v14[6] & 0xFFFFFFFFFFFFFFF0);
                if ((!v155 || *(_BYTE *)(v155 + 16) != 26)
                  && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v155 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
                {
                  sub_22F10CF48(v155);
                }
                if ((v156 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v154 + 8) + 48) & 0xFFFFFFFFFFFFFFF0)) != 0
                  && *(_BYTE *)(v156 + 16) == 39
                  || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v156 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
                  && (v156 = sub_22F10CF48(v156)) != 0)
                {
                  if (sub_22F10DFD8(v156))
                  {
                    v157 = *(_QWORD *)(v156 + 32);
                    if ((v157 & 1) != 0 || (*(_BYTE *)((v157 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) != 0)
LABEL_414:
                      v19->i64[0] &= ~0x1000000000000uLL;
                  }
                }
              }
            }
          }
        }
      }
    }
    v109 = !v16;
    if ((v19->i8[3] & 2) == 0)
      v109 = 1;
    if ((v109 & 1) == 0
      && (*(uint64_t (**)(unint64_t))(*(_QWORD *)v17 + 64))(v17)
      && *(_BYTE *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v17 + 64))(v17) == 11)
    {
      v19->i64[0] &= ~0x2000000uLL;
    }
    goto LABEL_317;
  }
  if (v14)
  {
    if ((*((_DWORD *)v14 + 7) & 0x7F) == 0x18)
    {
      v104 = v14[5] & 0xFFFFFFFFFFFFFFF8;
      if ((~*((_DWORD *)v14 + 10) & 7) == 0)
        v104 = *(_QWORD *)(v104 + 16);
      if (sub_22EFDBF50((uint64_t)v14) == 7
        || sub_22EFDBF50((uint64_t)v14) == 13
        || (v14[5] & 7) == 1
        && (v105 = *(_QWORD *)(v104 + 16), *(_DWORD *)v105 == 13)
        && ((v106 = *(_QWORD *)(v105 + 16), v107 = *(_QWORD *)(v105 + 21), v106 == 0x7365645F7878632ELL)
          ? (v108 = v107 == 0x7463757274736564)
          : (v108 = 0),
            v108))
      {
        if ((v19->i8[1] & 0x20) != 0)
        {
          llvm::Function::addFnAttr();
          llvm::Function::removeFnAttr();
        }
      }
    }
    goto LABEL_309;
  }
LABEL_317:
  v110 = *(_BYTE **)(*(_QWORD *)(a1 + 144) + 184);
  if (v110[1344])
    llvm::Function::addFnAttr();
  if ((v110[1348] & 3) != 0)
    llvm::Function::addFnAttr();
  if (v110[1345])
    llvm::Function::addFnAttr();
  if (v110[1346])
    llvm::Function::addFnAttr();
  if (!v14 || (*((_BYTE *)v14 + 29) & 1) == 0)
    goto LABEL_338;
  *(double *)a9.i64 = sub_22EFC8E88((uint64_t)v14);
  v112 = *(uint64_t **)v111;
  v113 = *(unsigned int *)(v111 + 8);
  v114 = *(uint64_t **)v111;
  if ((_DWORD)v113)
  {
    v115 = 8 * v113;
    v114 = *(uint64_t **)v111;
    while (*(_WORD *)(*v114 + 32) != 357)
    {
      ++v114;
      v115 -= 8;
      if (!v115)
        goto LABEL_338;
    }
  }
  if (v114 == &v112[v113])
  {
LABEL_338:
    v119 = *(_QWORD *)(a1 + 144);
    if ((*(_BYTE *)(*(_QWORD *)(v119 + 184) + 7) & 1) != 0 && (sub_22F29A70C(v119, this, a8) & 1) == 0)
    {
      v158 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 8);
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 8))
      {
        v159 = v393;
        do
        {
          *--v159 = (v158 % 0xA) | 0x30;
          v160 = v158 > 9;
          v158 /= 0xAuLL;
        }
        while (v160);
      }
      else
      {
        v159 = &v392;
        v392 = 48;
      }
      sub_22E3B4274(__dst, v159, v393, v393 - v159);
      llvm::Function::addFnAttr();
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
    }
    goto LABEL_339;
  }
  do
  {
    v117 = *v112++;
    v116 = v117;
  }
  while (*(_WORD *)(v117 + 32) != 357);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 1440) & 3) == 0)
  {
LABEL_339:
    v118 = 0;
    goto LABEL_340;
  }
  if (sub_22F2977C0(v116) && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 7) & 1) != 0)
  {
    llvm::Function::addFnAttr();
    v118 = 1;
  }
  else
  {
    v118 = 0;
  }
  if (sub_22F248BA8(v116))
    llvm::Function::addFnAttr();
  if ((*((_BYTE *)v14 + 29) & 1) != 0)
  {
    *(double *)a9.i64 = sub_22EFC8E88((uint64_t)v14);
    v205 = *(uint64_t **)v204;
    v206 = *(unsigned int *)(v204 + 8);
    v207 = *(uint64_t **)v204;
    if ((_DWORD)v206)
    {
      v208 = 8 * v206;
      v207 = *(uint64_t **)v204;
      while (*(_WORD *)(*v207 + 32) != 358)
      {
        ++v207;
        v208 -= 8;
        if (!v208)
          goto LABEL_340;
      }
    }
    if (v207 != &v205[v206])
    {
      do
      {
        v210 = *v205++;
        v209 = v210;
      }
      while (*(_WORD *)(v210 + 32) != 358);
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 7) & 1) != 0)
      {
        v211 = *(unsigned int *)(v209 + 36);
        if ((_DWORD)v211)
        {
          v212 = v393;
          do
          {
            *--v212 = (v211 % 0xA) | 0x30;
            v160 = v211 > 9;
            v211 /= 0xAuLL;
          }
          while (v160);
        }
        else
        {
          v212 = &v392;
          v392 = 48;
        }
        sub_22E3B4274(__dst, v212, v393, v393 - v212);
        llvm::Function::addFnAttr();
        if ((__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
      }
    }
  }
LABEL_340:
  v120 = *(_QWORD *)(a1 + 144);
  v121 = *(_QWORD *)(v120 + 184);
  if ((*(_QWORD *)v121 & 0x100000000000000) != 0)
  {
    if ((*(_QWORD *)v121 & 0x2000000000000000) != 0)
    {
      llvm::Function::addFnAttr();
      v120 = *(_QWORD *)(a1 + 144);
      v121 = *(_QWORD *)(v120 + 184);
    }
    v122 = *(_DWORD *)(v121 + 1440);
    if ((v122 & 2) == 0)
    {
      llvm::Function::addFnAttr();
      v120 = *(_QWORD *)(a1 + 144);
      v121 = *(_QWORD *)(v120 + 184);
      v122 = *(_DWORD *)(v121 + 1440);
    }
    if ((v122 & 1) == 0)
    {
      llvm::Function::addFnAttr();
      v120 = *(_QWORD *)(a1 + 144);
      v121 = *(_QWORD *)(v120 + 184);
    }
    v123 = *(_DWORD *)(v121 + 12);
    if (v123 >= 2)
    {
      llvm::Value::getName(*(llvm::Value **)(a1 + 1624));
      llvm::Value::getName(*(llvm::Value **)(a1 + 1624));
      v124 = llvm::crc32() % v123;
      v120 = *(_QWORD *)(a1 + 144);
      v121 = *(_QWORD *)(v120 + 184);
      v125 = v124 == *(_DWORD *)(v121 + 16) ? 1 : v118;
      if ((v125 & 1) == 0)
      {
        llvm::Function::addFnAttr();
        v120 = *(_QWORD *)(a1 + 144);
        v121 = *(_QWORD *)(v120 + 184);
      }
    }
  }
  if ((*(_QWORD *)(v121 + 96) & 0x180000000000) != 0 && sub_22E62D4C4(v120, this, a8))
    llvm::Function::addFnAttr();
  if (!v14 || (*((_BYTE *)v14 + 29) & 1) == 0)
    goto LABEL_366;
  *(double *)a9.i64 = sub_22EFC8E88((uint64_t)v14);
  v127 = *(uint64_t **)v126;
  v128 = *(unsigned int *)(v126 + 8);
  v129 = *(uint64_t **)v126;
  if ((_DWORD)v128)
  {
    v130 = 8 * v128;
    v129 = *(uint64_t **)v126;
    while (*(_WORD *)(*v129 + 32) != 278)
    {
      ++v129;
      v130 -= 8;
      if (!v130)
        goto LABEL_366;
    }
  }
  if (v129 != &v127[v128])
  {
    do
    {
      v132 = *v127++;
      v131 = v132;
    }
    while (*(_WORD *)(v132 + 32) != 278);
    v133 = *(_DWORD *)(v131 + 36);
    v134 = *(_DWORD *)(v131 + 40);
  }
  else
  {
LABEL_366:
    v135 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 184);
    v133 = *(_DWORD *)(v135 + 20);
    v134 = *(_DWORD *)(v135 + 24);
  }
  if (v133)
    v136 = v133 >= v134;
  else
    v136 = 0;
  if (v136)
  {
    std::to_string((std::string *)__dst, v133 - v134);
    llvm::Function::addFnAttr();
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    if (v134)
    {
      std::to_string((std::string *)__dst, v134);
      llvm::Function::addFnAttr();
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
    }
  }
  v137 = *(_QWORD *)(a1 + 144);
  v138 = *(_QWORD *)(v137 + 184);
  if ((*(_BYTE *)(v138 + 28) & 1) != 0
    && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v137 + 144) + 15088) + 56) - 41) <= 1)
  {
    llvm::Function::addFnAttr();
    v138 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 184);
  }
  if (!v14)
    goto LABEL_499;
  if ((*(_DWORD *)(v138 + 92) & 0x200000) == 0)
    goto LABEL_499;
  v139 = *((_DWORD *)v14 + 7);
  if ((v139 & 0x7Eu) - 52 > 5)
    goto LABEL_499;
  if ((v139 & 0x100) != 0)
  {
    *(double *)a9.i64 = sub_22EFC8E88((uint64_t)v14);
    v141 = *((unsigned int *)v140 + 2);
    if ((_DWORD)v141)
    {
      v142 = 8 * v141;
      v143 = *v140;
      while (*(_WORD *)(*(_QWORD *)v143 + 32) != 240)
      {
        v143 += 8;
        v142 -= 8;
        if (!v142)
          goto LABEL_422;
      }
    }
    else
    {
      v143 = *v140;
    }
    if (v143 != *v140 + 8 * v141)
      goto LABEL_499;
  }
LABEL_422:
  if ((*((_BYTE *)v14 + 29) & 1) != 0)
  {
    sub_22EFC8E88((uint64_t)v14);
    v162 = *((unsigned int *)v161 + 2);
    if ((_DWORD)v162)
    {
      v163 = 8 * v162;
      v164 = *v161;
      while (*(_WORD *)(*(_QWORD *)v164 + 32) != 330)
      {
        v164 += 8;
        v163 -= 8;
        if (!v163)
          goto LABEL_447;
      }
    }
    else
    {
      v164 = *v161;
    }
    if (v164 != *v161 + 8 * v162)
    {
LABEL_430:
      llvm::setTracepointInstrumentFunction(this, (Function *)1);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 92) & 0x800000) != 0)
      {
        v166 = operator new();
        v167 = MEMORY[0x23489D440](v166, this);
        v168 = *(void ***)(a1 + 4024);
        *(_QWORD *)(a1 + 4024) = v167;
        if (v168)
        {
          llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)(v168 + 16));
          llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)(v168 + 15));
          if (*v168 != v168 + 2)
            free(*v168);
          MEMORY[0x2348A0E9C](v168, 0x10E0C40270CC477);
        }
      }
      v169 = *(_QWORD *)(a1 + 144);
      if ((*(_DWORD *)(*(_QWORD *)(v169 + 184) + 92) & 0x4000000) != 0)
      {
        llvm::setTracepointResources(this, v165);
        v169 = *(_QWORD *)(a1 + 144);
      }
      v170 = *(_QWORD *)(v169 + 152);
      if ((*(_BYTE *)(v170 + 126) & 4) != 0 && (*(_DWORD *)(*(_QWORD *)(v169 + 184) + 92) & 0x8000000) != 0)
      {
        llvm::setTracepointArgumentBuffers(this, v165);
        v170 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 152);
      }
      if ((*(_BYTE *)(v170 + 104) & 0x20) != 0)
      {
        if (sub_22EA1DB60((uint64_t)v14)
          || sub_22F3AC76C((uint64_t)v14)
          || sub_22E88FFC4((uint64_t)v14)
          || sub_22E6A2F54((uint64_t)v14) && sub_22EAA34D4((uint64_t)v14)
          || sub_22EA1DBC0((uint64_t)v14)
          || sub_22E4752A8((uint64_t)v14))
        {
          llvm::setTracepointThread();
        }
        v171 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 92);
        if ((v171 & 0x1000000) != 0)
        {
          llvm::setTracepointAddressSpace(this, (Function *)1);
          v171 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 92);
        }
        if ((v171 & 0x2000000) != 0)
        {
          llvm::setTracepointAddressSpace(this, (Function *)3);
          llvm::setTracepointAddressSpace(this, (Function *)4);
          llvm::setTracepointAddressSpace(this, (Function *)6);
        }
      }
      goto LABEL_499;
    }
  }
LABEL_447:
  if ((*(_DWORD *)(v138 + 92) & 0x10000000) != 0)
    goto LABEL_477;
  v172 = v14[2];
  v173 = (_QWORD *)(v172 & 0xFFFFFFFFFFFFFFF8);
  if ((v172 & 4) != 0)
    v173 = (_QWORD *)*v173;
  v174 = sub_22F3B16C0((unint64_t)v173);
  if (!v174 || (v175 = v174, v176 = *(_WORD *)(v174 + 8), (v176 & 0x7F) != 0x10))
  {
LABEL_477:
    v183 = v19;
    Name = llvm::Value::getName(*(llvm::Value **)(a1 + 1624));
    if (!Name)
    {
      memset(__dst, 0, 24);
      goto LABEL_493;
    }
    v186 = v185;
    if (v185 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v187 = (const void *)Name;
    if (v185 >= 0x17)
    {
      v189 = (v185 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v185 | 7) != 0x17)
        v189 = v185 | 7;
      v379 = v189 + 1;
      v188 = operator new(v189 + 1);
      *(_QWORD *)&__dst[8] = v186;
      *(_QWORD *)&__dst[16] = v379 | 0x8000000000000000;
      *(_QWORD *)__dst = v188;
    }
    else
    {
      __dst[23] = v185;
      v188 = __dst;
      if (!v185)
        goto LABEL_492;
    }
    memmove(v188, v187, v186);
LABEL_492:
    v188[v186] = 0;
    v17 = v382;
LABEL_493:
    v190 = sub_22F298B64(v138 + 1448, __dst);
    v19 = v183;
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    if (v138 + 1456 == v190)
    {
      if ((*(_DWORD *)(v138 + 92) & 0x400000) == 0)
        goto LABEL_499;
    }
    else if (!*(_BYTE *)(v190 + 56))
    {
      goto LABEL_499;
    }
    goto LABEL_430;
  }
  do
  {
    v177 = v175;
    v178 = v176 & 0x7F;
    v179 = -40;
    if (v178 > 70)
    {
      if (v178 == 83)
        goto LABEL_469;
      if (v178 == 71)
      {
        v179 = -56;
        goto LABEL_469;
      }
      if (v178 != 81)
        goto LABEL_463;
    }
    else
    {
      if (v178 > 0x18)
        goto LABEL_462;
      if (v178 == 16)
        goto LABEL_455;
      if (((1 << v178) & 0x1066) == 0)
      {
        if (v178 == 24)
        {
LABEL_455:
          v179 = -48;
          goto LABEL_469;
        }
LABEL_462:
        if (v178 == 70)
        {
          v179 = -64;
          goto LABEL_469;
        }
LABEL_463:
        v180 = v178 - 52;
        if ((v178 - 33) >= 5)
          v181 = -48;
        else
          v181 = -64;
        if (v180 >= 6)
          v179 = v181;
        else
          v179 = -72;
      }
    }
LABEL_469:
    v182 = *(_QWORD *)(v177 + v179 + 16);
    v175 = v182 & 0xFFFFFFFFFFFFFFF8;
    if ((v182 & 4) != 0)
      v175 = *(_QWORD *)v175;
    if (!v175)
      break;
    v176 = *(_WORD *)(v175 + 8);
  }
  while ((v176 & 0x7F) == 0x10);
  if (!sub_22EFC85AC(v177))
    goto LABEL_477;
LABEL_499:
  v191 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 184);
  if ((*(_BYTE *)(v191 + 44) & 4) != 0)
  {
    llvm::Function::addFnAttr();
    v191 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 184);
  }
  if ((*(_BYTE *)(v191 + 31) & 1) != 0)
  {
    llvm::Function::addFnAttr();
    v191 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 184);
  }
  if ((*(_BYTE *)(v191 + 44) & 0x80) != 0)
  {
    llvm::Function::addFnAttr();
    v191 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 184);
  }
  if (*(char *)(v191 + 783) < 0)
  {
    if (*(_QWORD *)(v191 + 768))
LABEL_507:
      llvm::Function::addFnAttr();
  }
  else if (*(_BYTE *)(v191 + 783))
  {
    goto LABEL_507;
  }
  if (v14)
  {
    if ((*((_BYTE *)v14 + 29) & 1) != 0)
    {
      *(double *)a9.i64 = sub_22EFC8E88((uint64_t)v14);
      v193 = *((unsigned int *)v192 + 2);
      if ((_DWORD)v193)
      {
        v194 = 8 * v193;
        v195 = *v192;
        while (*(_WORD *)(*(_QWORD *)v195 + 32) != 123)
        {
          v195 += 8;
          v194 -= 8;
          if (!v194)
            goto LABEL_520;
        }
      }
      else
      {
        v195 = *v192;
      }
      if (v195 != *v192 + 8 * v193)
        llvm::Function::addFnAttr();
    }
LABEL_520:
    if ((*((_BYTE *)v14 + 29) & 1) != 0)
    {
      *(double *)a9.i64 = sub_22EFC8E88((uint64_t)v14);
      v197 = *((unsigned int *)v196 + 2);
      if ((_DWORD)v197)
      {
        v198 = 8 * v197;
        v199 = *v196;
        while (*(_WORD *)(*(_QWORD *)v199 + 32) != 231)
        {
          v199 += 8;
          v198 -= 8;
          if (!v198)
            goto LABEL_529;
        }
      }
      else
      {
        v199 = *v196;
      }
      if (v199 != *v196 + 8 * v197)
        llvm::Function::addFnAttr();
    }
  }
LABEL_529:
  if (v16)
  {
    v200 = *(_QWORD *)(a1 + 144);
    if ((*(_DWORD *)(*(_QWORD *)(v200 + 152) + 52) & 0x40000000) != 0)
    {
      v201 = sub_22E47290C(v17);
      v200 = *(_QWORD *)(a1 + 144);
      if (v201)
      {
        v202 = (*(uint64_t (**)(_QWORD, unint64_t, llvm::Value *))(**(_QWORD **)(v200 + 792) + 48))(*(_QWORD *)(v200 + 792), v17, this);
        (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 792)
                                                                           + 56))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 792), a1, v17, v202);
        v200 = *(_QWORD *)(a1 + 144);
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v200 + 152) + 104) & 0x20) != 0)
    {
      if (sub_22E6A2F54(v17))
      {
        v203 = 20;
        goto LABEL_568;
      }
      if (sub_22E88FFC4(v17))
      {
        v203 = 21;
        goto LABEL_568;
      }
      if (sub_22EA1DB60(v17))
      {
        v203 = 22;
        goto LABEL_568;
      }
      if (sub_22EFC1F80(v17))
      {
        v203 = 23;
        goto LABEL_568;
      }
      if (sub_22EFC1D94(v17))
      {
        v203 = 24;
        goto LABEL_568;
      }
      if (sub_22E4752A8(v17))
      {
        v203 = 25;
        goto LABEL_568;
      }
      if (sub_22EA1DBC0(v17))
      {
        v203 = 26;
        goto LABEL_568;
      }
      if (sub_22EFC18B0(v17))
      {
        v203 = 27;
LABEL_568:
        (*(void (**)(void))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 800) + 8 * v203))();
      }
    }
    v213 = *(_QWORD **)(a1 + 144);
    if ((*(_BYTE *)(v213[19] + 1) & 1) != 0
      && (v19->i8[2] & 0x40) != 0
      && ((*(_DWORD *)(v17 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC
       || (*(_QWORD *)((*(uint64_t (**)(unint64_t, int8x16_t))(*(_QWORD *)v17 + 32))(v17, a9) + 80) & 0xE000) == 0x4000
       || (*(_QWORD *)(v17 + 40) & 7) == 6
       && (*(_DWORD *)(*(_QWORD *)(v17 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) <= 3))
    {
      v214 = sub_22E699F3C(v213);
      v215 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v214 + 152))(v214, v213);
      if (v215)
      {
        v344 = v215;
        v345 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
        v346 = *(_QWORD *)(v17 + 48);
        *(_DWORD *)__dst = 0;
        memset(&__dst[8], 0, 40);
        v347 = (llvm::Type *)sub_22EF5F294(v345, v346, (__int128 *)__dst);
        sub_22F29C578(*(_QWORD *)(a1 + 144), v347, 1);
        v348 = sub_22F2974F8(a1);
        *(_QWORD *)__dst = v344;
        *(_QWORD *)&__dst[8] = v348;
        llvm::ConstantStruct::getTypeForElements();
        v349 = (llvm::Constant *)llvm::ConstantStruct::get();
        llvm::Function::setPrologueData(this, v349);
      }
    }
  }
  v216 = v19->i64[0];
  if ((v19->i64[0] & 0x10000000) != 0)
  {
    for (j = sub_22F10D774(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1616) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0));
          j;
          v17 = v382)
    {
      v363 = *(_DWORD *)(j + 16) >> 19;
      if ((v363 - 34) < 3)
        break;
      v364 = v14;
      if (v363 == 33)
      {
        a8 = v380;
        v16 = v383;
        v17 = v382;
        if ((v216 & 0x200000000) == 0)
          goto LABEL_937;
        v366 = *(_QWORD *)(a1 + 1600);
        if (!v366 || (*(_BYTE *)(v366 + 29) & 1) == 0)
          goto LABEL_937;
        sub_22EFC8E88(v366);
        v368 = *((unsigned int *)v367 + 2);
        if ((_DWORD)v368)
        {
          v369 = 8 * v368;
          v370 = *v367;
          a8 = v380;
          v16 = v383;
          v17 = v382;
          while (*(_WORD *)(*(_QWORD *)v370 + 32) != 300)
          {
            v370 += 8;
            v369 -= 8;
            v14 = v364;
            if (!v369)
              goto LABEL_937;
          }
        }
        else
        {
          v370 = *v367;
        }
        a8 = v380;
        v16 = v383;
        v17 = v382;
        v14 = v364;
        if (v370 == *v367 + 8 * v368)
LABEL_937:
          *(_QWORD *)(a1 + 5904) = llvm::ConstantInt::getTrue();
        break;
      }
      j = sub_22F10D774(*(_QWORD *)(*(_QWORD *)(j + 40) & 0xFFFFFFFFFFFFFFF0));
      a8 = v380;
      v16 = v383;
    }
  }
  if (v16)
  {
    v218 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 152);
    if ((*(_BYTE *)(v218 + 1) & 1) != 0)
    {
      if (!sub_22EFBFAF0(v17))
      {
        v218 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 152);
        goto LABEL_583;
      }
LABEL_587:
      llvm::Function::addFnAttr();
    }
    else
    {
LABEL_583:
      if ((*(_DWORD *)(v218 + 52) & 0x40000000) != 0
        || (*(_BYTE *)(v218 + 104) & 4) != 0
        || (*(_BYTE *)(v218 + 68) & 0x20) != 0 && sub_22E462B18(v17))
      {
        goto LABEL_587;
      }
    }
  }
  v219 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 244);
  v220 = (v219 >> 4) & 7;
  v221 = (v219 >> 7) & 3;
  *(_BYTE *)(a1 + 374) = v220;
  *(_BYTE *)(a1 + 373) = v221;
  if (v16)
  {
    if ((*(_BYTE *)(v17 + 84) & 0x80) != 0 || sub_22E47DCC4(v17))
    {
      *(_BYTE *)(a1 + 372) = 1;
      llvm::Function::addFnAttr();
    }
    if ((sub_22EFBFAF0(v17) || sub_22EFBFB90(v17)) && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 52))
      llvm::Function::addFnAttr();
    if (sub_22EFBFAF0(v17))
      llvm::Function::removeFnAttr();
  }
  else
  {
    v222 = (6u >> v221) & 1;
    if (v220 != 1 || v222 != 0)
    {
      *(_BYTE *)(a1 + 372) = 1;
      llvm::Function::addFnAttr();
    }
  }
  *(_QWORD *)__dst = "entry";
  *(_WORD *)&__dst[32] = 259;
  v224 = operator new();
  llvm::BasicBlock::BasicBlock();
  llvm::UndefValue::get();
  llvm::User::operator new((llvm::User *)0x40);
  *(_QWORD *)__dst = "allocapt";
  *(_WORD *)&__dst[32] = 259;
  *(_QWORD *)(a1 + 1840) = llvm::BitCastInst::BitCastInst();
  *(_WORD *)&__dst[32] = 261;
  *(_QWORD *)__dst = "return";
  *(_QWORD *)&__dst[8] = 6;
  operator new();
  v225 = llvm::BasicBlock::BasicBlock();
  v226 = *(_QWORD *)(a1 + 2008);
  v227 = *(_DWORD *)(a1 + 2640);
  *(_DWORD *)(a1 + 2640) = v227 + 1;
  *(_QWORD *)(a1 + 1712) = v225;
  *(_QWORD *)(a1 + 1720) = v226;
  *(_DWORD *)(a1 + 1728) = v227;
  *(_QWORD *)(a1 + 320) = v224;
  *(_QWORD *)(a1 + 328) = v224 + 40;
  if (sub_22E61A8AC(a1))
  {
    v228 = *(llvm::Type **)(a1 + 96);
    *(_QWORD *)__dst = "return.sloc.ptr";
    *(_WORD *)&__dst[32] = 259;
    v229 = sub_22E4D84FC(a1, v228, (uint64_t)__dst);
    v231 = 0;
    v232 = v229 & 0xFFFFFFFFFFFFFFF8;
    if (v229 <= 7)
      v232 = 0;
    v233 = (unint64_t)v230 & 0xFFFFFFFFFFFFFFF8;
    if (v229 <= 7)
      v233 = 0;
    if (v229 >= 8)
      v231 = 1 << (v230 & 7 | (8 * (v229 & 7u)));
    *(_QWORD *)(a1 + 5912) = v232;
    *(_QWORD *)(a1 + 5920) = v233;
    *(_QWORD *)(a1 + 5928) = v231;
    *(_DWORD *)(a1 + 5936) = 0;
    *(_QWORD *)(a1 + 5952) = 0;
    *(_QWORD *)(a1 + 5944) = 0;
    v234 = llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(a1 + 96), v230);
    v235 = *(_OWORD *)(a1 + 5928);
    v389[0] = *(_OWORD *)(a1 + 5912);
    v389[1] = v235;
    v389[2] = *(_OWORD *)(a1 + 5944);
    sub_22E3BEDDC(a1 + 272, v234, v389, 0);
  }
  if (!*(_BYTE *)(a1 + 2892))
  {
    v236 = *(_QWORD *)(a1 + 2880);
    if (v236)
    {
      v315 = sub_22F2568F8(*(_QWORD *)(a1 + 2880), v382, a4, a7);
      sub_22E49A954(v236, a2, a3, a8, a10, v315, *(llvm::Value **)(a1 + 1624), *(unsigned __int8 *)(a1 + 1881));
    }
  }
  v237 = *(_QWORD *)(a1 + 144);
  if ((*(_BYTE *)(*(_QWORD *)(v237 + 184) + 6) & 0x1C) != 0)
  {
    v238 = *(_QWORD *)(a1 + 1592);
    if (v238)
    {
      v242 = sub_22F297498(v238);
      v237 = *(_QWORD *)(a1 + 144);
      if (!v242)
      {
        v243 = **(_QWORD **)(v237 + 184);
        if ((v243 & 0x4000000000000) != 0)
        {
          llvm::Function::addFnAttr();
          v237 = *(_QWORD *)(a1 + 144);
          v243 = **(_QWORD **)(v237 + 184);
          if ((v243 & 0x8000000000000) != 0)
            goto LABEL_773;
LABEL_625:
          if ((v243 & 0x10000000000000) != 0)
          {
LABEL_774:
            llvm::Function::addFnAttr();
            v237 = *(_QWORD *)(a1 + 144);
          }
        }
        else
        {
          if ((v243 & 0x8000000000000) == 0)
            goto LABEL_625;
LABEL_773:
          llvm::Function::addFnAttr();
          v237 = *(_QWORD *)(a1 + 144);
          if ((**(_QWORD **)(v237 + 184) & 0x10000000000000) != 0)
            goto LABEL_774;
        }
      }
    }
  }
  v239 = *(_QWORD *)(*(_QWORD *)(v237 + 184) + 24);
  if ((v239 & 0x400000000) != 0)
  {
    v240 = *(_QWORD *)(a1 + 1592);
    if (v240)
    {
      v244 = sub_22F297498(v240);
      v237 = *(_QWORD *)(a1 + 144);
      if (!v244)
      {
        if ((*(_QWORD *)(*(_QWORD *)(v237 + 184) + 24) & 0x800000000) == 0)
          goto LABEL_619;
        goto LABEL_629;
      }
    }
    else
    {
      if ((v239 & 0x800000000) == 0)
      {
LABEL_619:
        v241 = *(_QWORD *)(a1 + 152);
        if (*(_QWORD *)(v241 + 136))
          strlen(*(const char **)(v241 + 136));
      }
LABEL_629:
      llvm::Function::addFnAttr();
      v237 = *(_QWORD *)(a1 + 144);
      v245 = *(_QWORD *)(*(_QWORD *)(v237 + 184) + 24);
      if ((v245 & 0x1000000000) != 0)
      {
        if ((v245 & 0x800000000) == 0)
        {
          v246 = *(_QWORD *)(v237 + 208);
          *(_QWORD *)(v246 + 312) = 0x3900000000;
          if (*(char *)(v246 + 311) < 0)
          {
            **(_BYTE **)(v246 + 288) = 0;
            *(_QWORD *)(v246 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v246 + 288) = 0;
            *(_BYTE *)(v246 + 311) = 0;
          }
          v247 = (unsigned __int8 *)(v246 + 320);
          *(_OWORD *)__dst = (unint64_t)(v246 + 320);
          *(_QWORD *)&__dst[16] = v246;
          *(_WORD *)&__dst[24] = 1;
          *(_BYTE *)(v246 + 320) = 0;
          *(_DWORD *)(v246 + 664) = 0;
          v248 = *(unsigned int *)(v246 + 776);
          if ((_DWORD)v248)
          {
            v249 = *(_QWORD *)(v246 + 768);
            v250 = 56 * v248;
            do
            {
              if (*(char *)(v249 + v250 - 9) < 0)
                operator delete(*(void **)(v249 + v250 - 32));
              v250 -= 56;
            }
            while (v250);
            v247 = *(unsigned __int8 **)__dst;
            *(_DWORD *)(v246 + 776) = 0;
            a8 = v380;
            if (!v247)
            {
              v247 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&__dst[8]);
              *(_QWORD *)__dst = v247;
            }
          }
          else
          {
            *(_DWORD *)(v246 + 776) = 0;
          }
          v247[*v247 + 1] = 1;
          v251 = *(_QWORD *)__dst;
          v252 = **(_BYTE **)__dst;
          **(_BYTE **)__dst = v252 + 1;
          *(_QWORD *)(v251 + 8 * v252 + 16) = "-mnop-mcount";
          *(_BYTE *)(v251 + (v252 + 1) + 1) = 1;
          v253 = *(_QWORD *)__dst;
          v254 = **(_BYTE **)__dst;
          **(_BYTE **)__dst = v254 + 1;
          *(_QWORD *)(v253 + 8 * v254 + 16) = "-mfentry";
          sub_22E3BB0B8((uint64_t)__dst);
        }
        llvm::Function::addFnAttr();
        v237 = *(_QWORD *)(a1 + 144);
        v245 = *(_QWORD *)(*(_QWORD *)(v237 + 184) + 24);
      }
      if ((v245 & 0x2000000000) != 0)
      {
        if ((v245 & 0x800000000) == 0)
        {
          v255 = *(_QWORD *)(v237 + 208);
          *(_QWORD *)(v255 + 312) = 0x3900000000;
          if (*(char *)(v255 + 311) < 0)
          {
            **(_BYTE **)(v255 + 288) = 0;
            *(_QWORD *)(v255 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v255 + 288) = 0;
            *(_BYTE *)(v255 + 311) = 0;
          }
          v256 = (unsigned __int8 *)(v255 + 320);
          *(_OWORD *)__dst = (unint64_t)(v255 + 320);
          *(_QWORD *)&__dst[16] = v255;
          *(_WORD *)&__dst[24] = 1;
          *(_BYTE *)(v255 + 320) = 0;
          *(_DWORD *)(v255 + 664) = 0;
          v257 = *(unsigned int *)(v255 + 776);
          if ((_DWORD)v257)
          {
            v258 = *(_QWORD *)(v255 + 768);
            v259 = 56 * v257;
            do
            {
              if (*(char *)(v258 + v259 - 9) < 0)
                operator delete(*(void **)(v258 + v259 - 32));
              v259 -= 56;
            }
            while (v259);
            v256 = *(unsigned __int8 **)__dst;
            *(_DWORD *)(v255 + 776) = 0;
            a8 = v380;
            if (!v256)
            {
              v256 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&__dst[8]);
              *(_QWORD *)__dst = v256;
            }
          }
          else
          {
            *(_DWORD *)(v255 + 776) = 0;
          }
          v256[*v256 + 1] = 1;
          v260 = *(_QWORD *)__dst;
          v261 = **(_BYTE **)__dst;
          **(_BYTE **)__dst = v261 + 1;
          *(_QWORD *)(v260 + 8 * v261 + 16) = "-mrecord-mcount";
          *(_BYTE *)(v260 + (v261 + 1) + 1) = 1;
          v262 = *(_QWORD *)__dst;
          v263 = **(_BYTE **)__dst;
          **(_BYTE **)__dst = v263 + 1;
          *(_QWORD *)(v262 + 8 * v263 + 16) = "-mfentry";
          sub_22E3BB0B8((uint64_t)__dst);
        }
        llvm::Function::addFnAttr();
        v237 = *(_QWORD *)(a1 + 144);
      }
    }
  }
  v264 = *(_QWORD *)(v237 + 184);
  if ((*(_BYTE *)(v264 + 28) & 0x40) != 0)
  {
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v237 + 144) + 15088) + 56) != 36)
    {
      v265 = *(_QWORD *)(v237 + 208);
      *(_QWORD *)(v265 + 312) = 0x3700000000;
      if (*(char *)(v265 + 311) < 0)
      {
        **(_BYTE **)(v265 + 288) = 0;
        *(_QWORD *)(v265 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v265 + 288) = 0;
        *(_BYTE *)(v265 + 311) = 0;
      }
      v266 = (unsigned __int8 *)(v265 + 320);
      *(_OWORD *)__dst = (unint64_t)(v265 + 320);
      *(_QWORD *)&__dst[16] = v265;
      *(_WORD *)&__dst[24] = 1;
      *(_BYTE *)(v265 + 320) = 0;
      *(_DWORD *)(v265 + 664) = 0;
      v267 = *(unsigned int *)(v265 + 776);
      if ((_DWORD)v267)
      {
        v268 = *(_QWORD *)(v265 + 768);
        v269 = 56 * v267;
        do
        {
          if (*(char *)(v268 + v269 - 9) < 0)
            operator delete(*(void **)(v268 + v269 - 32));
          v269 -= 56;
        }
        while (v269);
        v266 = *(unsigned __int8 **)__dst;
        *(_DWORD *)(v265 + 776) = 0;
        a8 = v380;
        if (!v266)
        {
          v266 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&__dst[8]);
          *(_QWORD *)__dst = v266;
        }
      }
      else
      {
        *(_DWORD *)(v265 + 776) = 0;
      }
      v266[*v266 + 1] = 1;
      v270 = *(_QWORD *)__dst;
      v271 = **(_BYTE **)__dst;
      **(_BYTE **)__dst = v271 + 1;
      *(_QWORD *)(v270 + 8 * v271 + 16) = "-mpacked-stack";
      sub_22E3BB0B8((uint64_t)__dst);
    }
    llvm::Function::addFnAttr();
    v237 = *(_QWORD *)(a1 + 144);
    v264 = *(_QWORD *)(v237 + 184);
  }
  v272 = *(_DWORD *)(v264 + 60);
  if (v272 != -1
    && sub_22F1CF68C(*(_QWORD *)(*(_QWORD *)(v237 + 208) + 32), 0x363u, a8, *(_QWORD *)(v237 + 208)) != 1)
  {
    std::to_string((std::string *)__dst, v272);
    llvm::Function::addFnAttr();
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
  }
  v273 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFF0);
  v274 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v274)
    v275 = (*(_DWORD *)(v274 + 16) & 0xFF800FF) == 86507531;
  else
    v275 = 0;
  if (v275)
  {
    *(_DWORD *)(a1 + 1760) = 0;
    *(_QWORD *)(a1 + 1752) = 0;
    *(_OWORD *)(a1 + 1736) = 0u;
    *(_OWORD *)(a1 + 1768) = 0u;
    v278 = (uint64_t)a7;
    v281 = v383;
    if (!v14
      || (v292 = *((_DWORD *)v14 + 7), (v292 & 0x7F) != 0x18) && (v292 & 0x7Eu) - 52 > 5
      || (v293 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v14 + 64))(v14)) == 0
      || *v293 != 8
      || (v294 = *(unsigned int *)v293, v294 < 0x100)
      || **(_BYTE **)&v293[((v294 >> 5) & 0x7FFFFF8) + 8] != 93)
    {
      ++*(_DWORD *)(a1 + 4168);
    }
  }
  else
  {
    v276 = *(_QWORD *)(a1 + 1608);
    v277 = *(unsigned __int8 *)(v276 + 72);
    v278 = (uint64_t)a7;
    if (v277 == 8)
    {
      if (!sub_22E619D68(*(_QWORD *)(v276 + 40)))
        goto LABEL_720;
      v299 = *(unsigned int *)(v276 + 64);
      v300 = *(_QWORD *)(a1 + 1624);
      if ((*(_WORD *)(v300 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 1624));
        v276 = *(_QWORD *)(a1 + 1608);
      }
      v301 = (uint64_t *)(*(_QWORD *)(v300 + 88) + 40 * *(_QWORD *)(v300 + 96) - 40);
      v302 = *(llvm::LLVMContext **)(v276 + 24);
      *(_WORD *)&__dst[32] = 257;
      v303 = sub_22E3C4170((uint64_t *)(a1 + 272), v302, v301, 0, v299, (uint64_t)__dst);
      v304 = (llvm::Type *)*((_QWORD *)v303 + 9);
      v305 = *(unsigned __int8 *)(a1 + 130);
      *(_QWORD *)(a1 + 1784) = v303;
      *(_QWORD *)(a1 + 1792) = v304;
      *(_QWORD *)(a1 + 1800) = v305;
      *(_DWORD *)(a1 + 1808) = 0;
      *(_QWORD *)(a1 + 1824) = 0;
      *(_QWORD *)(a1 + 1816) = 0;
      *(_QWORD *)__dst = "agg.result";
      *(_WORD *)&__dst[32] = 259;
      v306 = sub_22E3C3200((uint64_t *)(a1 + 272), v304, (uint64_t)v303, (63 - __clz(v305)) | 0x100u, 0, (uint64_t)__dst);
      v307 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), (llvm::LLVMContext *)a4);
      v308 = sub_22E62D754(*(_QWORD **)(a1 + 144), a4, 0, 0, 0);
      *(_QWORD *)(a1 + 1736) = v306;
      *(_QWORD *)(a1 + 1744) = v307;
      *(_QWORD *)(a1 + 1752) = v308;
      *(_DWORD *)(a1 + 1760) = 0;
      *(_QWORD *)(a1 + 1776) = 0;
      *(_QWORD *)(a1 + 1768) = 0;
      v278 = (uint64_t)a7;
      v281 = v383;
    }
    else
    {
      if (v277 == 2)
      {
        v279 = *(_QWORD *)(a1 + 1624);
        if ((*(_WORD *)(v279 + 18) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 1624));
          v276 = *(_QWORD *)(a1 + 1608);
        }
        sub_22E3D2FA0(a1, *(_QWORD *)(v279 + 88) + 40 * (((unint64_t)*(unsigned __int16 *)(v276 + 73) >> 5) & 1), a4, *(unsigned int *)(v276 + 64), 0, 0, 0, __dst);
        v280 = *(_OWORD *)&__dst[16];
        *(_OWORD *)(a1 + 1736) = *(_OWORD *)__dst;
        *(_OWORD *)(a1 + 1752) = v280;
        *(_OWORD *)(a1 + 1768) = *(_OWORD *)&__dst[32];
        v281 = v383;
        if ((*(_WORD *)(*(_QWORD *)(a1 + 1608) + 73) & 8) == 0)
        {
          v282 = *(llvm::Type **)(a1 + 96);
          *(_QWORD *)__dst = "result.ptr";
          *(_WORD *)&__dst[32] = 259;
          v283 = sub_22E4D84FC(a1, v282, (uint64_t)__dst);
          v285 = 0;
          v286 = v283 & 0xFFFFFFFFFFFFFFF8;
          if (v283 <= 7)
            v286 = 0;
          v287 = v284 & 0xFFFFFFFFFFFFFFF8;
          if (v283 <= 7)
            v287 = 0;
          if (v283 >= 8)
            v285 = 1 << (v284 & 7 | (8 * (v283 & 7)));
          *(_QWORD *)(a1 + 1784) = v286;
          *(_QWORD *)(a1 + 1792) = v287;
          *(_QWORD *)(a1 + 1800) = v285;
          *(_DWORD *)(a1 + 1808) = 0;
          *(_QWORD *)(a1 + 1824) = 0;
          *(_QWORD *)(a1 + 1816) = 0;
          if ((*(_BYTE *)(a1 + 1760) & 3) != 0)
            v288 = sub_22F28ABCC(a1 + 1736, a1);
          else
            v288 = *(_QWORD *)(a1 + 1736);
          v289 = *(_QWORD *)(a1 + 96);
          *(_WORD *)&__dst[32] = 257;
          v290 = sub_22E3C1338((uint64_t *)(a1 + 272), v288, v289, (uint64_t)__dst);
          v291 = *(_OWORD *)(a1 + 1800);
          v388[0] = *(_OWORD *)(a1 + 1784);
          v388[1] = v291;
          v388[2] = *(_OWORD *)(a1 + 1816);
          sub_22E3BEDDC(a1 + 272, v290, v388, 0);
        }
        goto LABEL_704;
      }
LABEL_720:
      *(_QWORD *)__dst = "retval";
      *(_WORD *)&__dst[32] = 259;
      v309 = sub_22E4D8554(a1, (llvm::LLVMContext *)a4, (uint64_t)__dst);
      v311 = 0;
      v312 = v309 & 0xFFFFFFFFFFFFFFF8;
      if (v309 <= 7)
        v312 = 0;
      v313 = v310 & 0xFFFFFFFFFFFFFFF8;
      if (v309 <= 7)
        v313 = 0;
      if (v309 >= 8)
        v311 = 1 << (v310 & 7 | (8 * (v309 & 7)));
      *(_QWORD *)(a1 + 1736) = v312;
      *(_QWORD *)(a1 + 1744) = v313;
      *(_QWORD *)(a1 + 1752) = v311;
      *(_DWORD *)(a1 + 1760) = 0;
      *(_QWORD *)(a1 + 1776) = 0;
      *(_QWORD *)(a1 + 1768) = 0;
      v281 = v383;
      if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 148) & 2) != 0
        && (*(_BYTE *)(*(_QWORD *)(a1 + 1608) + 11) & 4) == 0)
      {
        v314 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v273 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v314 == 10 || v314 == 32 || sub_22F115064(*v273))
          *(_BYTE *)(a1 + 1882) = 1;
      }
    }
  }
LABEL_704:
  sub_22E4D23EC((char *)a1, *(_QWORD *)(a1 + 1600));
  *(_QWORD *)(a1 + 1704) = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
  v295 = *(_QWORD *)(a1 + 144);
  if (*(_DWORD *)(*(_QWORD *)(v295 + 152) + 72) && *(_QWORD *)(a1 + 1600))
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v295 + 808) + 576))(*(_QWORD *)(v295 + 808), a1);
  sub_22E472CF8(a1, *(_QWORD *)(a1 + 1608), *(llvm::Function **)(a1 + 1624), v278);
  if (v14
    && (*((_DWORD *)v14 + 7) & 0x7Eu) - 54 <= 3
    && (*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v14 + 32))(v14) + 80) & 0xE000) != 0x4000
    && ((v14[5] & 7) != 6 || (*(_DWORD *)(v14[5] & 0xFFFFFFFFFFFFFFF8) - 1) >= 4))
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 224) + 448))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 224), a1);
    v296 = v14 + 9;
    v297 = v14[10] & 0x7F;
    v298 = 0x1FFFFFFFFFFFFFFBLL;
    if (v297 > 0x46)
    {
      if (v297 != 83)
      {
        if (v297 == 71)
        {
          v298 = 0x1FFFFFFFFFFFFFF9;
        }
        else if (v297 != 81)
        {
          goto LABEL_739;
        }
      }
    }
    else
    {
      if (v297 > 0x18)
        goto LABEL_738;
      if (v297 == 16)
        goto LABEL_715;
      if (((1 << v297) & 0x1066) == 0)
      {
        if (v297 == 24)
          goto LABEL_715;
LABEL_738:
        if (v297 == 70)
          goto LABEL_741;
LABEL_739:
        if (v297 - 52 >= 6)
        {
          if (v297 - 33 < 5)
          {
LABEL_741:
            v298 = 0x1FFFFFFFFFFFFFF8;
            goto LABEL_743;
          }
LABEL_715:
          v298 = 0x1FFFFFFFFFFFFFFALL;
          goto LABEL_743;
        }
        v298 = 0x1FFFFFFFFFFFFFF7;
      }
    }
LABEL_743:
    v316 = v296[v298 + 2];
    v317 = (_QWORD *)(v316 & 0xFFFFFFFFFFFFFFF8);
    if ((v316 & 4) != 0)
      v317 = (_QWORD *)*v317;
    v318 = v317 ? (uint64_t)(v317 - 8) : 0;
    v319 = *(_QWORD *)(v318 + 128);
    if (v319
      && ((*(unsigned __int16 *)(v319 + 8) | (*(unsigned __int8 *)(v319 + 10) << 16)) & 0x100000) != 0
      && (v14[5] & 7) == 6
      && *(_DWORD *)(v14[5] & 0xFFFFFFFFFFFFFFF8) == 42)
    {
      v320 = 0x1FFFFFFFFFFFFFFBLL;
      if (((_WORD)v14[10] & 0x7Fu) > 0x46)
      {
        if (v297 != 83)
        {
          if (v297 == 71)
          {
            v320 = 0x1FFFFFFFFFFFFFF9;
          }
          else if (v297 != 81)
          {
            goto LABEL_823;
          }
        }
      }
      else
      {
        if (v297 > 0x18)
          goto LABEL_822;
        if (v297 == 16)
          goto LABEL_755;
        if (((1 << v297) & 0x1066) == 0)
        {
          if (v297 == 24)
            goto LABEL_755;
LABEL_822:
          if (v297 == 70)
            goto LABEL_825;
LABEL_823:
          if (v297 - 52 >= 6)
          {
            if (v297 - 33 < 5)
            {
LABEL_825:
              v320 = 0x1FFFFFFFFFFFFFF8;
              goto LABEL_827;
            }
LABEL_755:
            v320 = 0x1FFFFFFFFFFFFFFALL;
            goto LABEL_827;
          }
          v320 = 0x1FFFFFFFFFFFFFF7;
        }
      }
LABEL_827:
      v350 = v296[v320 + 2];
      v351 = (_QWORD *)(v350 & 0xFFFFFFFFFFFFFFF8);
      if ((v350 & 4) != 0)
        v351 = (_QWORD *)*v351;
      if (v351)
        v352 = (uint64_t)(v351 - 8);
      else
        v352 = 0;
      sub_22EFD4A20(v352, (uint64_t *)(a1 + 1928), (unint64_t *)(a1 + 1952));
      v353 = *(_QWORD *)(a1 + 1952);
      if (v353)
      {
        sub_22F2605EC(a1, v353, (uint64_t)__dst);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1952) + 48) & 0xFFFFFFFFFFFFFFF0)
                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) == 39)
        {
          v386[6] = v397;
          v386[7] = v398;
          v387 = v399;
          v386[2] = *(_OWORD *)&__dst[32];
          v386[3] = *(_OWORD *)&__dst[48];
          v386[4] = v395;
          v386[5] = v396;
          v386[0] = *(_OWORD *)__dst;
          v386[1] = *(_OWORD *)&__dst[16];
          sub_22E4D7B28((_QWORD *)a1, (uint64_t)v386, 0, (uint64_t)v391);
        }
        else
        {
          v390[0] = *(_OWORD *)&__dst[8];
          v390[1] = *(_OWORD *)&__dst[24];
          v390[2] = *(_OWORD *)&__dst[40];
          sub_22E5E0440(a1, (uint64_t)v390, v395, v391);
        }
        *(_QWORD *)(a1 + 4208) = v391[0];
      }
      v354 = v14[10] & 0x7F;
      v355 = 0x1FFFFFFFFFFFFFFBLL;
      if (v354 > 0x46)
      {
        if (v354 != 83)
        {
          if (v354 == 71)
          {
            v355 = 0x1FFFFFFFFFFFFFF9;
          }
          else if (v354 != 81)
          {
            goto LABEL_844;
          }
        }
      }
      else
      {
        if (v354 > 0x18)
          goto LABEL_843;
        if (v354 == 16)
          goto LABEL_836;
        if (((1 << v354) & 0x1066) == 0)
        {
          if (v354 != 24)
          {
LABEL_843:
            if (v354 == 70)
              goto LABEL_846;
LABEL_844:
            if (v354 - 52 < 6)
            {
              v355 = 0x1FFFFFFFFFFFFFF7;
              goto LABEL_848;
            }
            if (v354 - 33 < 5)
            {
LABEL_846:
              v355 = 0x1FFFFFFFFFFFFFF8;
              goto LABEL_848;
            }
          }
LABEL_836:
          v355 = 0x1FFFFFFFFFFFFFFALL;
        }
      }
LABEL_848:
      v356 = v296[v355 + 2];
      v357 = (_QWORD *)(v356 & 0xFFFFFFFFFFFFFFF8);
      if ((v356 & 4) != 0)
        v357 = (_QWORD *)*v357;
      if (v357)
        v358 = (uint64_t)(v357 - 8);
      else
        v358 = 0;
      v359 = sub_22EFC3B90(v358);
      if (v359)
      {
        v360 = v359;
LABEL_855:
        if ((~*(_DWORD *)(v360 + 72) & 3) == 0)
        {
          sub_22F2605EC(a1, v360, (uint64_t)v385);
          sub_22E4D7B28((_QWORD *)a1, (uint64_t)v385, 0, (uint64_t)__dst);
          v361 = *(_QWORD *)__dst;
          v362 = *(_QWORD *)(v360 + 72) & 0xFFFFFFFFFFFFFFFCLL;
          if ((~*(_DWORD *)(v360 + 72) & 3) != 0)
            v362 = 0;
          *(_QWORD *)__dst = *(_QWORD *)(v362 + 40);
          sub_22F25E108((uint64_t *)(a1 + 4112), __dst)[1] = v361;
        }
        while (1)
        {
          v360 = *(_QWORD *)(v360 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!v360)
            break;
          if ((*(_DWORD *)(v360 + 28) & 0x7Fu) - 49 < 3)
            goto LABEL_855;
        }
      }
    }
    else
    {
      *(_QWORD *)(a1 + 4208) = *(_QWORD *)(a1 + 4200);
    }
    if (*(_QWORD *)(a1 + 4200))
    {
      v321 = sub_22EFD7558((uint64_t)v14);
      v322 = v14[10] & 0x7F;
      v323 = 0x1FFFFFFFFFFFFFFBLL;
      if (v322 > 0x46)
      {
        v324 = v380;
        if (v322 != 83)
        {
          if (v322 == 71)
          {
            v323 = 0x1FFFFFFFFFFFFFF9;
          }
          else if (v322 != 81)
          {
            goto LABEL_769;
          }
        }
      }
      else
      {
        v324 = v380;
        if (v322 > 0x18)
          goto LABEL_768;
        if (v322 == 16)
          goto LABEL_761;
        if (((1 << v322) & 0x1066) == 0)
        {
          if (v322 == 24)
            goto LABEL_761;
LABEL_768:
          if (v322 == 70)
            goto LABEL_771;
LABEL_769:
          if (v322 - 52 >= 6)
          {
            if (v322 - 33 < 5)
            {
LABEL_771:
              v323 = 0x1FFFFFFFFFFFFFF8;
              goto LABEL_776;
            }
LABEL_761:
            v323 = 0x1FFFFFFFFFFFFFFALL;
            goto LABEL_776;
          }
          v323 = 0x1FFFFFFFFFFFFFF7;
        }
      }
LABEL_776:
      v325 = v296[v323 + 2];
      v326 = (_QWORD *)(v325 & 0xFFFFFFFFFFFFFFF8);
      if ((v325 & 4) != 0)
      {
        v326 = (_QWORD *)*v326;
        if (v326)
          goto LABEL_778;
        goto LABEL_780;
      }
      if (!v326)
        goto LABEL_780;
LABEL_778:
      v327 = v326[8];
      if (!v327 || ((*(unsigned __int16 *)(v327 + 8) | (*(unsigned __int8 *)(v327 + 10) << 16)) & 0x100000) == 0)
      {
LABEL_780:
        v328 = 0x40000000;
        goto LABEL_781;
      }
      if ((v14[5] & 7) == 6 && *(_DWORD *)(v14[5] & 0xFFFFFFFFFFFFFFF8) == 42)
      {
        v365 = -40;
        if (((_WORD)v14[10] & 0x7Fu) > 0x46)
        {
          if (v322 != 83)
          {
            if (v322 == 71)
            {
              v365 = -56;
            }
            else if (v322 != 81)
            {
              goto LABEL_919;
            }
          }
        }
        else
        {
          if (v322 > 0x18)
            goto LABEL_918;
          if (v322 == 16)
            goto LABEL_887;
          if (((1 << v322) & 0x1066) == 0)
          {
            if (v322 == 24)
            {
LABEL_887:
              v365 = -48;
            }
            else
            {
LABEL_918:
              if (v322 == 70)
              {
                v365 = -64;
              }
              else
              {
LABEL_919:
                v371 = v322 - 52;
                v136 = v322 - 33 >= 5;
                v372 = -48;
                if (!v136)
                  v372 = -64;
                if (v371 >= 6)
                  v365 = v372;
                else
                  v365 = -72;
              }
            }
          }
        }
        v373 = *(_QWORD *)((char *)v296 + v365 + 16);
        v374 = (_QWORD *)(v373 & 0xFFFFFFFFFFFFFFF8);
        if ((v373 & 4) != 0)
          v374 = (_QWORD *)*v374;
        if (v374)
          v375 = v374 - 8;
        else
          v375 = 0;
        if ((*(_BYTE *)(v375[16] + 104) & 0x18) != 0)
          v328 = 0x40000000;
        else
          v328 = 1107296256;
      }
      else
      {
        v328 = 0x40000000;
      }
      v324 = v380;
      v278 = (uint64_t)a7;
      v281 = v383;
LABEL_781:
      if ((*((_DWORD *)v14 + 7) & 0x7F) == 0x37)
        v329 = 5;
      else
        v329 = 4;
      sub_22E4DDC84(a1, v329, v324, *(llvm::Constant ***)(a1 + 4200), v321, *(_QWORD *)(a1 + 4216), v328, 0, 0);
    }
  }
  if (!v281 || !sub_22E474EBC(v382))
  {
    v330 = *(unsigned int *)(v278 + 8);
    if ((_DWORD)v330)
    {
      v331 = *(uint64_t **)v278;
      v332 = 8 * v330;
      do
      {
        v333 = *v331;
        if (*v331 && (*(_DWORD *)(v333 + 28) & 0x7F) == 0x40)
          v334 = sub_22EFBF144(v333);
        else
          v334 = *(_QWORD *)(v333 + 48);
        if ((*(_BYTE *)(*(_QWORD *)(v334 & 0xFFFFFFFFFFFFFFF0) + 17) & 8) != 0)
          sub_22E61DFC4(a1);
        ++v331;
        v332 -= 8;
      }
      while (v332);
    }
  }
  if (!*(_BYTE *)(a1 + 2892))
  {
    v335 = *(_QWORD *)(a1 + 2880);
    if (v335)
      sub_22F254674(v335, a1 + 272, a10);
  }
  v336 = *(_QWORD *)(a1 + 1592);
  if (v336 && (*(_BYTE *)(v336 + 29) & 1) != 0)
  {
    sub_22EFC8E88(v336);
    v338 = *(uint64_t **)v337;
    v339 = *(unsigned int *)(v337 + 8);
    k = *(uint64_t **)v337;
    if ((_DWORD)v339)
    {
      v341 = 8 * v339;
      for (k = *(uint64_t **)v337; *(_WORD *)(*k + 32) != 213; ++k)
      {
        v341 -= 8;
        if (!v341)
          return;
      }
    }
    if (k != &v338[v339])
    {
      do
      {
        v343 = *v338++;
        v342 = v343;
      }
      while (*(_WORD *)(v343 + 32) != 213);
      *(_DWORD *)(a1 + 6056) = *(_DWORD *)(v342 + 36);
    }
  }
}

uint64_t sub_22E61DF6C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *v2;
  if ((*(_BYTE *)(a1 + 29) & 1) != 0)
    sub_22EFC8E88(a1);
  return v3;
}

void sub_22E61DFC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  llvm::Type **v9;
  llvm::Type **v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t NullValue;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int16 v22;
  llvm::Type **v23;
  unsigned __int8 *v24;
  uint64_t v25;
  llvm::Value *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  sub_22E47E098(a1);
  do
  {
    v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    v5 = *(_DWORD *)(v4 + 16);
    switch((char)v5)
    {
      case 0:
        a2 = *(_QWORD *)(v4 + 40);
        continue;
      case 1:
        v19 = *(_QWORD *)(v4 + 40);
        sub_22F114F34(&v19);
        a2 = *(_QWORD *)(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0) + 32);
        continue;
      case 2:
      case 4:
      case 6:
      case 10:
      case 31:
      case 38:
      case 39:
        goto LABEL_3;
      case 5:
        v24 = *(unsigned __int8 **)(v4 + 40);
        if (v24)
        {
          v7 = sub_22F25E108((uint64_t *)(a1 + 4112), &v24);
          if (!v7[1])
          {
            v8 = v7;
            v23 = 0;
            v19 = a1;
            *(_QWORD *)&v20 = a1 + 272;
            BYTE8(v20) = 0;
            v21 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
            v9 = (llvm::Type **)sub_22E50E974(&v19, v24);
            v10 = v9;
            v23 = v9;
            if ((*(_BYTE *)(a1 + 1868) & 0x80) != 0)
            {
              *(_BYTE *)(a1 + 1880) = 1;
              NullValue = llvm::Constant::getNullValue(*v9, (llvm::Type *)v9);
              v18 = *((_QWORD *)v24 + 1);
              v11 = sub_22F110930(*(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0));
              v22 = 257;
              if (v11)
              {
                v12 = a1 + 272;
                v13 = 38;
              }
              else
              {
                v12 = a1 + 272;
                v13 = 34;
              }
              v17 = sub_22E3C18F4(v12, v13, (uint64_t *)v23, NullValue, (uint64_t)&v19);
              v25 = 0;
              v26 = 0;
              sub_22F0D5A50((uint64_t)v24);
              v25 = sub_22E4DE978(a1, v14);
              v26 = sub_22F25E758(a1, v18);
              v19 = v17;
              v20 = xmmword_22F45B7E0;
              sub_22E4DEC4C((_QWORD *)a1, (uint64_t)&v19, 1, 0x18u, (uint64_t)&v25, 2, &v23, 1);
              *(_BYTE *)(a1 + 1880) = 0;
              v10 = v23;
            }
            v15 = *(_QWORD *)(a1 + 88);
            v22 = 257;
            v8[1] = sub_22E3BF45C((uint64_t *)(a1 + 272), (uint64_t)v10, v15, 0, (uint64_t)&v19);
          }
        }
        goto LABEL_3;
      case 7:
      case 8:
      case 22:
      case 23:
      case 28:
      case 37:
      case 43:
      case 49:
      case 51:
      case 54:
        a2 = sub_22F4098F0(a2, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144));
        continue;
      case 13:
      case 14:
      case 15:
      case 50:
        return;
      case 25:
      case 26:
        a2 = *(_QWORD *)(v4 + 24);
        continue;
      case 40:
      case 41:
        if ((v5 & 0x100000) == 0)
          goto LABEL_3;
        break;
      case 48:
        sub_22E4D89CC((_QWORD *)a1, *(unsigned __int8 **)(v4 + 24));
        return;
      default:
        continue;
    }
    do
    {
      while (1)
      {
        v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v4)
          break;
        v6 = *(_DWORD *)(v4 + 16);
        if ((v6 & 0xFE) != 0x28)
          break;
        if ((v6 & 0x100000) == 0)
          goto LABEL_3;
      }
      v4 = sub_22F10CF48(v4);
    }
    while ((*(_DWORD *)(v4 + 16) & 0x100000) != 0);
LABEL_3:
    a2 = *(_QWORD *)(v4 + 32);
  }
  while ((*(_BYTE *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 17) & 8) != 0);
}

unint64_t sub_22E61E284(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t result;
  _QWORD *v8;

  if (a1[40] && (*(_QWORD *)(*(_QWORD *)(a1[18] + 184) + 96) & 0x180000000000) == 0x80000000000)
  {
    v8 = a2;
    v5 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    sub_22E5EDA70((uint64_t)a1);
    a2 = v8;
  }
  else
  {
    v5 = 0;
  }
  sub_22E5ED9B4(a1, a2, 0);
  v6 = a1[502];
  result = sub_22E3CB7B0(a1, a3, 0);
  a1[502] += v6;
  if (v5)
    return sub_22E5ED9B4(a1, v5, 0);
  return result;
}

unint64_t sub_22E61E37C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v9)
    v10 = *(unsigned __int8 *)(v9 + 16) - 27 > 0xFFFFFFFD;
  else
    v10 = 0;
  if (!v10)
    v9 = sub_22F10CF48(v9);
  v11 = *(_QWORD *)(v9 + 24);
  v37 = v11;
  if ((*(_DWORD *)(v8 + 28) & 0x7Eu) - 54 >= 4)
    v12 = 0;
  else
    v12 = v8;
  if (v12
    && (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12) + 80) & 0xE000) != 0x4000
    && ((*(_QWORD *)(v12 + 40) & 7) != 6
     || (*(_DWORD *)(*(_QWORD *)(v12 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) >= 4))
  {
    if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 224) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 224), a2, a3))
    {
      v11 = sub_22EFD7558(v12);
      v37 = v11;
      v13 = *(_QWORD *)(a1 + 144);
    }
    else
    {
      v14 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 224) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 224), a2, a3);
      v13 = *(_QWORD *)(a1 + 144);
      if (v14)
      {
        v11 = *(_QWORD *)(*(_QWORD *)(v13 + 144) + 16816);
        v37 = v11;
      }
    }
    sub_22E46AE60(*(_QWORD **)(v13 + 224), (_QWORD *)a1, a4);
  }
  if (v8)
  {
    if ((*(_DWORD *)(v8 + 28) & 0x7F) == 0x37 && (*(_BYTE *)(v8 + 87) & 0x20) != 0)
    {
      v15 = *(_QWORD *)(v8 + 168);
      if (v15)
      {
        if ((a2 & 7) != 0
          && (*(_BYTE *)(v15 + 96) & 1) != 0
          && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 304) + 148) < 0xBu)
        {
          goto LABEL_45;
        }
      }
    }
  }
  v35 = v11;
  v16 = *(uint64_t **)(v8 + 120);
  v17 = *(_QWORD *)(*(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v17)
    v18 = *(_BYTE *)(v17 + 16) == 26;
  else
    v18 = 0;
  if (v18
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v17 = sub_22F10CF48(v17)) != 0)
  {
    v19 = *(_QWORD *)(v17 + 16);
    if ((v19 & 0x3FFFC000000000) != 0)
    {
      v20 = 8 * (unsigned __int16)(v19 >> 38);
      do
      {
        v21 = *v16;
        v36 = *v16;
        v22 = *(unsigned int *)(a4 + 8);
        if (v22 >= *(unsigned int *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v22 = *(unsigned int *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v22) = v21;
        ++*(_DWORD *)(a4 + 8);
        if (sub_22E484F44(v36))
        {
          v23 = *(_QWORD *)(v36 + 16);
          v24 = (_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF8);
          if ((v23 & 4) != 0)
            v24 = (_QWORD *)*v24;
          v25 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
          v26 = *(_DWORD *)(v36 + 24);
          v27 = sub_22EF67C8C(v25);
          v28 = sub_22EFC4364(v25, (uint64_t)v24, v26, 0, v27, 5);
          sub_22F252AD0((_DWORD *)(a1 + 2952), &v36)[1] = v28;
          v29 = *(unsigned int *)(a4 + 8);
          if (v29 >= *(unsigned int *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v29 = *(unsigned int *)(a4 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a4 + 8 * v29) = v28;
          ++*(_DWORD *)(a4 + 8);
        }
        ++v16;
        v20 -= 8;
      }
      while (v20);
    }
  }
  v11 = v35;
  if ((*(_QWORD *)(sub_22EFCB008(v8, 1) + 16) & 0xF80000) != 0xF00000)
  {
LABEL_45:
    if (!v12)
      return v11;
    goto LABEL_46;
  }
  v31 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v32 = sub_22EF67C8C(v31);
  v33 = sub_22F3AD594(v31, v32, 5);
  v34 = *(_DWORD *)(a4 + 8);
  if (v34 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v34 = *(_DWORD *)(a4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a4 + 8 * v34) = v33;
  ++*(_DWORD *)(a4 + 8);
  if (v12)
  {
LABEL_46:
    if ((*(_DWORD *)(v12 + 28) & 0x7F) == 0x39 || (*(_DWORD *)(v12 + 28) & 0x7F) == 0x37)
    {
      (*(void (**)(_QWORD, uint64_t, unint64_t *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 224)
                                                                           + 432))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 224), a1, &v37, a4);
      return v37;
    }
  }
  return v11;
}

void sub_22E61E740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Value *Function;
  uint64_t v14;
  uint64_t AddressSpace;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned __int8 *v25;
  int8x16_t v26;
  unsigned __int8 *v27;
  _BYTE *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int i;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  llvm::Function *v55;
  llvm::GlobalValue *v56;
  _QWORD *j;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *k;
  llvm::Instruction *v61;
  unint64_t v62;
  uint64_t v63;
  void *__p;
  char v65;
  uint64_t Name;
  __int128 v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  void *v73[2];
  _QWORD v74[18];

  v74[16] = *MEMORY[0x24BDAC8D0];
  v10 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(a1 + 1688) = a2;
  *(_DWORD *)(a1 + 1696) = a3;
  v73[0] = v74;
  v73[1] = (void *)0x1000000000;
  v62 = sub_22E61E37C(a1, a2, a3, (uint64_t)v73);
  v63 = a5;
  if (sub_22EFC0170(v10))
  {
    LOWORD(v69) = 773;
    Name = llvm::Value::getName((llvm::Value *)a4);
    *(_QWORD *)&v67 = v11;
    *((_QWORD *)&v67 + 1) = ".inline";
    llvm::Twine::str((llvm::Twine *)&Name);
    v12 = *(_QWORD *)(a4 + 40);
    Function = (llvm::Value *)llvm::Module::getFunction();
    if (!Function)
    {
      v14 = *(_QWORD *)(a4 + 24);
      AddressSpace = llvm::GlobalValue::getAddressSpace((llvm::GlobalValue *)a4);
      LOWORD(v69) = 260;
      Name = (uint64_t)&__p;
      Function = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
      MEMORY[0x23489F6FC](Function, v14, 7, AddressSpace, &Name, v12);
      llvm::Function::addFnAttr();
    }
    v16 = *(_DWORD *)(a4 + 32);
    *(_DWORD *)(a4 + 32) = v16 & 0xFFFFFFF0;
    if ((v16 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)a4) & 1) == 0)
      *(_DWORD *)(a4 + 32) |= 0x4000u;
    if (v65 < 0)
      operator delete(__p);
  }
  else
  {
    if ((*(_BYTE *)(v10 + 104) & 3) == 0)
    {
      v17 = sub_22E3CD31C((uint64_t *)(v10 + 104), v10);
      if (v17)
      {
        v18 = v17;
        while (!sub_22EFC0170(v18))
        {
          if ((*(_BYTE *)(v18 + 104) & 3) == 0)
          {
            v18 = sub_22E3CD31C((uint64_t *)(v18 + 104), v18);
            if (v18)
              continue;
          }
          goto LABEL_15;
        }
        LOWORD(v69) = 773;
        Name = llvm::Value::getName((llvm::Value *)a4);
        *(_QWORD *)&v67 = v53;
        *((_QWORD *)&v67 + 1) = ".inline";
        llvm::Twine::str((llvm::Twine *)&Name);
        v54 = llvm::Module::getFunction();
        if (v54)
        {
          v55 = (llvm::Function *)v54;
          llvm::Value::replaceAllUsesWith();
          llvm::Function::eraseFromParent(v55);
        }
        if (v65 < 0)
          operator delete(__p);
      }
    }
LABEL_15:
    Function = (llvm::Value *)a4;
  }
  if (sub_22F2556D0(v10))
  {
    llvm::Function::setSubprogram();
    *(_QWORD *)(a1 + 2880) = 0;
  }
  v19 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v10 + 64))(v10);
  if (v19)
  {
    sub_22F0D4E74(v19);
    v21 = v20;
  }
  else
  {
    v21 = *(unsigned int *)(v10 + 24) | ((unint64_t)*(unsigned int *)(v10 + 24) << 32);
  }
  v22 = HIDWORD(v21);
  *(_DWORD *)(a1 + 5848) = HIDWORD(v21);
  v23 = *(_DWORD *)(v10 + 24);
  v24 = sub_22EFC20FC(v10, 1);
  Name = v24;
  if (v24 && sub_22EFBF6E8(v24, &Name))
    v23 = *(_DWORD *)(Name + 24);
  v25 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v10 + 64))(v10);
  v27 = v25;
  if (!v25)
  {
    sub_22E61A8FC(a1, a2, a3, v62, Function, v63, (uint64_t *)v73, v23, v26, v21);
    goto LABEL_31;
  }
  v28 = (_BYTE *)(a1 + 6060);
  if (*v25 == 11)
  {
    *v28 = 1;
  }
  else if (!*v28)
  {
    goto LABEL_30;
  }
  sub_22E6C3334(a1 + 424, v25);
LABEL_30:
  sub_22E61A8FC(a1, a2, a3, v62, Function, v63, (uint64_t *)v73, v23, v26, v21);
  if (*v27 == 11)
  {
    v44 = *(char **)(v10 + 120);
    v45 = *(_QWORD *)(*(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v45 && *(_BYTE *)(v45 + 16) == 26
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v45 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
      && (v45 = sub_22F10CF48(v45)) != 0)
    {
      v46 = (unsigned __int16)(*(_QWORD *)(v45 + 16) >> 38);
    }
    else
    {
      v46 = 0;
    }
    sub_22F246808(a1 + 1632, v44, &v44[8 * v46]);
    LODWORD(v22) = HIDWORD(v21);
  }
LABEL_31:
  sub_22E654990((uint64_t *)(a1 + 3904), a2, a3, *(llvm::Value **)(a1 + 1624));
  v29 = *(_DWORD *)(v10 + 28);
  if ((v29 & 0x7F) == 0x37)
  {
    sub_22E4815D4(a1, (uint64_t *)v73);
    goto LABEL_53;
  }
  if ((v29 & 0x7F) == 0x39)
  {
    sub_22F250B44(a1);
    goto LABEL_53;
  }
  v30 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 152);
  if ((*(_BYTE *)(v30 + 68) & 0x20) != 0 && (*(_WORD *)(v30 + 96) & 0x80) == 0)
  {
    if (sub_22E462B18(v10))
    {
      (*(void (**)(_QWORD, uint64_t, void **))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 816) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 816), a1, v73);
      goto LABEL_53;
    }
    v29 = *(_DWORD *)(v10 + 28);
  }
  if ((v29 & 0x7Eu) - 54 <= 3 && sub_22EFD799C(v10))
  {
    sub_22F251E48(a1, v10);
  }
  else if ((*(_BYTE *)(v10 + 83) & 2) != 0
         && (*(_DWORD *)(v10 + 28) & 0x7Eu) - 54 <= 3
         && ((sub_22EFD3B9C(v10) & 1) != 0 || sub_22EFD3F30(v10)))
  {
    sub_22E4828F0((_QWORD *)a1, (uint64_t)v73);
  }
  else
  {
    sub_22E3CB7B0((_QWORD *)a1, (uint64_t)v27, 0);
    if (*v27 == 8)
    {
      Name = 0;
      v67 = 0uLL;
      v68 = 0;
      v70 = 0;
      v71 = 0;
      v69 = 0;
      v72 = 0;
      sub_22E5ED794(a1, v27, 0, &Name, (uint64_t)&__p);
    }
    else
    {
      sub_22E5E5158(a1, v27, 0, 0);
    }
    v31 = *(_QWORD *)(a1 + 144);
    if ((*(_QWORD *)(*(_QWORD *)(v31 + 184) + 96) & 0x60000000000000) != 0x40000000000000
      && (*(_BYTE *)(*(_QWORD *)(v31 + 152) + 1) & 2) != 0)
    {
      llvm::Function::addFnAttr();
    }
  }
LABEL_53:
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 1) & 1) == 0
    || (*(_BYTE *)(v10 + 83) & 0x10) != 0
    || *(_BYTE *)(a1 + 1883))
  {
    goto LABEL_116;
  }
  v32 = *(_QWORD *)(*(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v32 || *(unsigned __int8 *)(v32 + 16) - 27 <= 0xFFFFFFFD)
    v32 = sub_22F10CF48(v32);
  v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v34 = v33 && (*(_DWORD *)(v33 + 16) & 0xFF800FF) == 86507531;
  if (v34 || !*(_QWORD *)(a1 + 320))
    goto LABEL_116;
  v35 = *(_QWORD *)(a1 + 144);
  v36 = *(_QWORD *)(v35 + 184);
  if ((*(_DWORD *)(v36 + 92) & 4) != 0)
  {
    if ((*(_BYTE *)(a1 + 1868) & 1) == 0)
      goto LABEL_106;
    v47 = 1;
    goto LABEL_114;
  }
  if ((*(_DWORD *)(v10 + 28) & 0x7F) == 0x53)
  {
    v48 = v10;
  }
  else
  {
    v37 = *(_QWORD *)(v10 + 16);
    v38 = v37 & 0xFFFFFFFFFFFFFFF8;
    if ((v37 & 4) != 0)
      v38 = *(_QWORD *)v38;
    for (i = *(_WORD *)(v38 + 8) & 0x7F; i != 83; i = *(_WORD *)(v38 + 8) & 0x7F)
    {
      v40 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v40 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_79;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_78;
        if (i == 16)
          goto LABEL_72;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_85;
        if (i == 24)
        {
LABEL_72:
          v40 = -48;
        }
        else
        {
LABEL_78:
          if (i != 70)
          {
LABEL_79:
            v41 = i - 52;
            if ((i - 33) >= 5)
              v42 = -48;
            else
              v42 = -64;
            if (v41 >= 6)
              v40 = v42;
            else
              v40 = -72;
            goto LABEL_85;
          }
          v40 = -64;
        }
      }
LABEL_85:
      v43 = *(_QWORD *)(v38 + v40 + 16);
      v38 = v43 & 0xFFFFFFFFFFFFFFF8;
      if ((v43 & 4) != 0)
        v38 = *(_QWORD *)v38;
    }
    v48 = v38 - 40;
  }
  v49 = *(_QWORD *)(v48 + 88);
  v50 = *(_QWORD *)(*(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v50)
    v51 = *(unsigned __int8 *)(v50 + 16) - 27 > 0xFFFFFFFD;
  else
    v51 = 0;
  if (!v51)
    v50 = sub_22F10CF48(v50);
  v52 = sub_22E46FA1C(v35, v49, *(_QWORD *)(v50 + 24));
  if ((*(_BYTE *)(a1 + 1868) & 1) != 0)
  {
    v47 = v52 ^ 1;
LABEL_114:
    *(_BYTE *)(a1 + 1880) = 1;
    Name = llvm::ConstantInt::getFalse();
    v67 = xmmword_22F45B7D0;
    __p = (void *)sub_22E4DE978(a1, *(_DWORD *)(v10 + 24));
    sub_22E4DEC4C((_QWORD *)a1, (uint64_t)&Name, 1, 0xBu, (uint64_t)&__p, 1, 0, 0);
    *(_BYTE *)(a1 + 1880) = 0;
    if ((*(_BYTE *)(a1 + 1868) & 1) != 0 || v47)
    {
LABEL_134:
      sub_22F24866C(a1 + 272);
      *(_QWORD *)(a1 + 320) = 0;
      *(_QWORD *)(a1 + 328) = 0;
      goto LABEL_116;
    }
    goto LABEL_116;
  }
  if ((v52 & 1) == 0)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 184);
LABEL_106:
    if ((*(_BYTE *)(v36 + 33) & 0x18) == 0)
      sub_22F260198(a1);
    goto LABEL_134;
  }
LABEL_116:
  sub_22E619DE8(a1, v22);
  if ((llvm::Function::hasFnAttribute() & 1) == 0)
  {
    v56 = *(llvm::GlobalValue **)(a1 + 1624);
    if ((llvm::GlobalValue::isInterposable(v56) & 1) == 0)
    {
      for (j = (_QWORD *)*((_QWORD *)v56 + 10); j != (_QWORD *)((char *)v56 + 72); j = (_QWORD *)j[1])
      {
        v58 = j - 3;
        if (!j)
          v58 = 0;
        v59 = v58 + 5;
        for (k = (_QWORD *)v58[6]; k != v59; k = (_QWORD *)k[1])
        {
          if (k)
            v61 = (llvm::Instruction *)(k - 3);
          else
            v61 = 0;
          if ((llvm::Instruction::mayThrow(v61) & 1) != 0)
            goto LABEL_131;
        }
      }
      llvm::Function::addFnAttr();
    }
  }
LABEL_131:
  if (v73[0] != v74)
    free(v73[0]);
}

_QWORD *sub_22E61F030(_QWORD *result, uint64_t a2)
{
  *result = a2;
  *(_BYTE *)(a2 + 1880) = 1;
  return result;
}

uint64_t sub_22E61F040(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)result + 1880) = 0;
  return result;
}

uint64_t sub_22E61F04C(uint64_t result, unsigned int a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;

  if (result)
  {
    v2 = *(unsigned __int8 *)result;
    if (v2 == 235)
      return 1;
    if ((v2 & 0xFE) == 0x62 && a2 == 0)
    {
      return 1;
    }
    else
    {
      if (v2 == 100)
        v4 = 1;
      else
        v4 = a2;
      sub_22F0D492C(result);
      v11 = v13;
      v5 = v15;
      v12 = v14;
      v6 = *((_QWORD *)&v15 + 1);
      v7 = *((_QWORD *)&v13 + 1);
      v8 = (uint64_t *)v13;
      if (v13 != v15)
      {
        do
        {
          if ((v7 & 3) != 0)
          {
            if ((v7 & 0xFFFFFFFFFFFFFFFCLL) != 0)
              v9 = (_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + 40);
            else
              v9 = (_QWORD *)sub_22F3AC1A8(*v8);
            if ((sub_22E61F04C(*v9, v4) & 1) != 0)
              return 1;
            if (v7 >= 4)
              sub_22F0D8720((uint64_t)&v11);
            else
              sub_22F3F2FE0((uint64_t)&v11, 1);
          }
          else
          {
            if ((sub_22E61F04C(*v8, v4) & 1) != 0)
              return 1;
            *(_QWORD *)&v11 = v8 + 1;
          }
          v7 = *((_QWORD *)&v11 + 1);
          v8 = (uint64_t *)v11;
        }
        while ((_QWORD)v11 != v5 || *((_QWORD *)&v11 + 1) != v6);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_22E61F15C(uint64_t result)
{
  unsigned __int8 *v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;

  if (result)
  {
    v1 = (unsigned __int8 *)result;
    result = 0;
    v2 = *v1;
    if (v2 > 0x63)
    {
      if (v2 == 100 || v2 == 236)
        return result;
    }
    else
    {
      if (v2 - 13 < 2)
        return result;
      if (v2 == 3)
        return 1;
    }
    sub_22F0D492C((uint64_t)v1);
    v9 = v11;
    v3 = v13;
    v10 = v12;
    v4 = *((_QWORD *)&v13 + 1);
    v5 = *((_QWORD *)&v11 + 1);
    v6 = (uint64_t *)v11;
    if (v11 != v13)
    {
      do
      {
        if ((v5 & 3) != 0)
        {
          if ((v5 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            v7 = (_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFCLL) + 40);
          else
            v7 = (_QWORD *)sub_22F3AC1A8(*v6);
          if ((sub_22E61F15C(*v7) & 1) != 0)
            return 1;
          if (v5 >= 4)
            sub_22F0D8720((uint64_t)&v9);
          else
            sub_22F3F2FE0((uint64_t)&v9, 1);
        }
        else
        {
          if ((sub_22E61F15C(*v6) & 1) != 0)
            return 1;
          *(_QWORD *)&v9 = v6 + 1;
        }
        v5 = *((_QWORD *)&v9 + 1);
        v6 = (uint64_t *)v9;
      }
      while ((_QWORD)v9 != v3 || *((_QWORD *)&v9 + 1) != v4);
    }
    return 0;
  }
  return result;
}

uint64_t sub_22E61F274(uint64_t result)
{
  unsigned __int8 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;

  if (result)
  {
    v1 = (unsigned __int8 *)result;
    result = 0;
    v2 = *v1;
    if (v2 > 0x10)
      goto LABEL_6;
    if (((1 << v2) & 0x16160) != 0)
      return result;
    if (v2 == 12)
    {
      return 1;
    }
    else
    {
LABEL_6:
      v3 = v2 - 90 > 0xA || ((1 << (v2 - 90)) & 0x405) == 0;
      if (v3 && v2 != 236)
      {
        sub_22F0D492C((uint64_t)v1);
        v10 = v12;
        v4 = v14;
        v11 = v13;
        v5 = *((_QWORD *)&v14 + 1);
        v6 = *((_QWORD *)&v12 + 1);
        v7 = (uint64_t *)v12;
        if (v12 != v14)
        {
          do
          {
            if ((v6 & 3) != 0)
            {
              if ((v6 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                v8 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFCLL) + 40);
              else
                v8 = (_QWORD *)sub_22F3AC1A8(*v7);
              if ((sub_22E61F274(*v8) & 1) != 0)
                return 1;
              if (v6 >= 4)
                sub_22F0D8720((uint64_t)&v10);
              else
                sub_22F3F2FE0((uint64_t)&v10, 1);
            }
            else
            {
              if ((sub_22E61F274(*v7) & 1) != 0)
                return 1;
              *(_QWORD *)&v10 = v7 + 1;
            }
            v6 = *((_QWORD *)&v10 + 1);
            v7 = (uint64_t *)v10;
          }
          while ((_QWORD)v10 != v4 || *((_QWORD *)&v10 + 1) != v5);
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_22E61F3B0(uint64_t a1, uint64_t a2, _BYTE *a3, char a4)
{
  uint64_t result;
  unsigned int v6;
  BOOL v7;
  char v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  char v15;

  v14 = 1;
  v13 = 0;
  v15 = 0;
  result = sub_22E61F468(a1, a2, (uint64_t)&v13, a4);
  v6 = v14;
  if ((_DWORD)result)
  {
    if (v14 > 0x40)
    {
      v11 = result;
      v12 = v14;
      v10 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v13);
      result = v11;
      v7 = v10 == v12;
      v6 = v12;
    }
    else
    {
      v7 = v13 == 0;
    }
    v8 = v7;
    *a3 = v8 ^ 1;
  }
  if (v6 >= 0x41)
  {
    if (v13)
    {
      v9 = result;
      MEMORY[0x2348A0E84](v13, 0x1000C8000313F17);
      return v9;
    }
  }
  return result;
}

uint64_t sub_22E61F468(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  char v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v13 = 0;
  v14 = 0;
  LODWORD(v15) = 0;
  v7 = 0;
  if (sub_22F00554C(a2, (uint64_t)&v13, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), 0, 0))
  {
    v11 = v17;
    if (v17 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v10, (const llvm::APInt *)&v16);
    else
      v10 = v16;
    v12 = v18;
    if ((a4 & 1) == 0 && (sub_22E61F04C(a2, 0) & 1) != 0)
    {
      v7 = 0;
    }
    else
    {
      if (*(_DWORD *)(a3 + 8) > 0x40u || (v9 = v11, v11 > 0x40))
      {
        llvm::APInt::assignSlowCase((llvm::APInt *)a3, (const llvm::APInt *)&v10);
      }
      else
      {
        *(_QWORD *)a3 = v10;
        *(_DWORD *)(a3 + 8) = v9;
      }
      *(_BYTE *)(a3 + 12) = v12;
      v7 = 1;
    }
    if (v11 >= 0x41 && v10)
      MEMORY[0x2348A0E84](v10, 0x1000C8000313F17);
  }
  if (v15 >= 2)
    sub_22EF53BC0(&v15);
  return v7;
}

BOOL sub_22E61F5D8(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;

  v1 = a1;
  do
  {
    v2 = v1;
    v3 = *v1;
    if (v3 > 0xD5)
    {
      if (v3 == 233)
      {
        v6 = *(_DWORD *)v1;
        if ((*(_DWORD *)v1 & 0x7C0000) != 0x300000)
          goto LABEL_19;
        v3 = *(_DWORD *)v1;
        v5 = v1 + 16;
      }
      else
      {
        if (v3 != 214)
          break;
        v5 = v1 + 24;
      }
    }
    else if (v3 == 155)
    {
      if ((**((_DWORD **)v1 + 2) & 0x18000) != 0)
        goto LABEL_21;
      v5 = v1 + 24;
      if (!v2[48])
        v5 = v2 + 32;
      v3 = 155;
    }
    else
    {
      if (v3 != 176)
        break;
      v4 = *((unsigned int *)v1 + 5);
      if ((_DWORD)v4 == -1)
        goto LABEL_21;
      v5 = &v1[8 * v4 + 40];
      v3 = 176;
    }
    v1 = *(unsigned __int8 **)v5;
  }
  while (v1 != v2);
  if (v3 != 233)
    goto LABEL_21;
  v6 = *(_DWORD *)v2;
LABEL_19:
  if ((v6 & 0x7C0000) == 0x240000)
    a1 = (unsigned __int8 *)*((_QWORD *)v2 + 2);
  do
  {
LABEL_21:
    v7 = a1;
    LODWORD(v8) = *a1;
    if (v8 > 0xD5)
    {
      if ((_DWORD)v8 == 233)
      {
        LOBYTE(v8) = *(_DWORD *)a1;
        if ((*(_DWORD *)a1 & 0x7C0000) != 0x300000)
          break;
        v9 = a1 + 16;
      }
      else
      {
        if ((_DWORD)v8 != 214)
          break;
        v9 = a1 + 24;
      }
    }
    else if ((_DWORD)v8 == 155)
    {
      if ((**((_DWORD **)a1 + 2) & 0x18000) != 0)
        return 1;
      v9 = a1 + 24;
      if (!a1[48])
        v9 = a1 + 32;
      LOBYTE(v8) = -101;
    }
    else
    {
      if ((_DWORD)v8 != 176)
        break;
      v8 = *((unsigned int *)a1 + 5);
      if ((_DWORD)v8 == -1)
        return 1;
      v9 = &a1[8 * v8 + 40];
      LOBYTE(v8) = -80;
    }
    a1 = *(unsigned __int8 **)v9;
  }
  while (*(unsigned __int8 **)v9 != v7);
  if ((v8 & 0xFE) == 0x70)
    return ((*(_DWORD *)v7 >> 18) & 0x3Fu) - 21 < 0xFFFFFFFE;
  return 1;
}

uint64_t sub_22E61F76C(_QWORD *a1, unsigned __int8 *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v14;
  BOOL v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v24;

  if ((*(_QWORD *)(*(_QWORD *)(a1[18] + 184) + 96) & 0x180000000000) != 0x80000000000)
    return sub_22E61F8F8(a1, a2, a4, a5, a6, a7);
  v24 = a1;
  v9 = a2;
  v22 = a7;
  v10 = a6;
  v11 = a5;
  v12 = a4;
  v14 = sub_22E61F5D8(a2);
  a4 = v12;
  a5 = v11;
  a6 = v10;
  a7 = v22;
  a2 = v9;
  v15 = v14;
  a1 = v24;
  if (!v15)
    return sub_22E61F8F8(a1, a2, a4, a5, a6, a7);
  v16 = a3;
  v17 = (_QWORD *)operator new();
  v18 = llvm::BasicBlock::BasicBlock();
  if (v16 == 19)
    v19 = v18;
  else
    v19 = v12;
  if (v16 == 19)
    v20 = v11;
  else
    v20 = v18;
  sub_22E61F8F8(v24, v9, v19, v20, v10, v22);
  sub_22E5ED9B4(v24, v17, 0);
  if (a8)
    v21 = a8;
  else
    v21 = (uint64_t)v9;
  sub_22E3CB7B0(v24, v21, 0);
  return sub_22E5EDA70((uint64_t)v24);
}

uint64_t sub_22E61F8F8(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t result;
  int v31;
  llvm::Value *v32;
  unsigned __int8 *v33;
  uint64_t Unpredictable;
  uint64_t v35;
  llvm::Value *v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  unint64_t v60;
  unsigned __int8 *v61;
  _QWORD *v62;
  int v63;
  _QWORD *v64;
  unint64_t v65;
  char v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  unint64_t v72;
  uint64_t v73;
  const char *v74;
  _QWORD *v75;
  __int16 v76;
  char v77;

  v8 = a4;
  v9 = a3;
  if (!a2)
  {
    v13 = 0;
LABEL_28:
    v18 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v74 = "cond.false";
    v76 = 259;
    v19 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v73 = a1[40];
    v20 = *(_QWORD *)(v13 + 24);
    v21 = sub_22E3CF180((uint64_t)(a1 + 488), v13);
    if (v22)
      v23 = v21;
    else
      v23 = 0;
    sub_22E61F8F8(a1, v20, v18, v19, v23, 0);
    if (a5)
    {
      v24 = sub_22E3CF180((uint64_t)(a1 + 488), v13);
      if (v25)
        v26 = v24;
      else
        v26 = 0;
      v27 = (unint64_t)((double)v26 / (double)(unint64_t)a1[502] * (double)a5);
    }
    else
    {
      v27 = 0;
    }
    if (!a1[729])
      a1[729] = &v73;
    sub_22E5ED9B4(a1, v18, 0);
    sub_22E3CB7B0(a1, v13, 0);
    v74 = 0;
    v75 = a1;
    sub_22EFF605C(v13);
    sub_22E48EE24((uint64_t *)&v74, v28, 0);
    sub_22E61F8F8(a1, *(_QWORD *)(v13 + 32), v9, v8, v27, a6);
    sub_22E48F084(&v74);
    v29 = (uint64_t *)a1[729];
    if (v29 == &v73 || !v29)
      a1[729] = &v73;
    sub_22E5ED9B4(a1, v19, 0);
    result = sub_22E61F8F8(a1, *(_QWORD *)(v13 + 40), v9, v8, a5 - v27, a6);
    goto LABEL_43;
  }
  v11 = a4;
  v12 = a3;
  while (2)
  {
    v8 = v12;
    v12 = v11;
    do
    {
      v13 = (uint64_t)a2;
      v14 = *a2;
      if (v14 > 0xD5)
      {
        if (v14 == 233)
        {
          v14 = *(_DWORD *)a2;
          if ((*(_DWORD *)a2 & 0x7C0000) != 0x300000)
            break;
          v16 = a2 + 16;
        }
        else
        {
          if (v14 != 214)
            break;
          v16 = a2 + 24;
        }
      }
      else if (v14 == 155)
      {
        if ((**((_DWORD **)a2 + 2) & 0x18000) != 0)
          goto LABEL_48;
        v16 = a2 + 24;
        if (!a2[48])
          v16 = a2 + 32;
        v14 = 155;
      }
      else
      {
        if (v14 != 176)
          break;
        v15 = *((unsigned int *)a2 + 5);
        if ((_DWORD)v15 == -1)
          goto LABEL_48;
        v16 = &a2[8 * v15 + 40];
        v14 = 176;
      }
      a2 = *(unsigned __int8 **)v16;
    }
    while (*(_QWORD *)v16 != v13);
    if ((v14 & 0xFE) == 0x70)
    {
      v17 = (*(_DWORD *)v13 >> 18) & 0x3F;
      if (v17 == 20)
      {
        v77 = 0;
        if (sub_22E61F3B0((uint64_t)a1, *(_QWORD *)(v13 + 16), &v77, 0) && !v77)
        {
          sub_22E3CB7B0(a1, v13, 0);
          v42 = *(unsigned __int8 **)(v13 + 24);
          v43 = a1;
          v44 = 20;
LABEL_70:
          v45 = v8;
          v46 = v12;
          v47 = a5;
          v48 = a6;
          v49 = 0;
          return sub_22E61F76C(v43, v42, v44, v45, v46, v47, v48, v49);
        }
        if (sub_22E61F3B0((uint64_t)a1, *(_QWORD *)(v13 + 24), &v77, 0) && !v77)
        {
          v42 = *(unsigned __int8 **)(v13 + 16);
          v43 = a1;
          v44 = 20;
LABEL_77:
          v45 = v8;
          v46 = v12;
          v47 = a5;
          v48 = a6;
          v49 = v13;
          return sub_22E61F76C(v43, v42, v44, v45, v46, v47, v48, v49);
        }
        v74 = "lor.lhs.false";
        v76 = 259;
        v50 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        v51 = a1[502];
        v52 = sub_22E3CF180((uint64_t)(a1 + 488), *(_QWORD *)(v13 + 24));
        if (v53)
          v54 = v52;
        else
          v54 = 0;
        v73 = a1[40];
        v74 = 0;
        v55 = v51 - v54;
        a5 -= v55;
        v75 = a1;
        sub_22EFF605C(v13);
        sub_22E48EE24((uint64_t *)&v74, v56, 0);
        if ((_DWORD)a6 == 1)
          v57 = 0;
        else
          v57 = a6;
        sub_22E61F8F8(a1, *(_QWORD *)(v13 + 16), v8, v50, v55, v57);
        sub_22E5ED9B4(a1, v50, 0);
        sub_22E48F084(&v74);
        sub_22E3CB7B0(a1, v13, 0);
        v58 = sub_22E3CF180((uint64_t)(a1 + 488), *(_QWORD *)(v13 + 24));
        if (v59)
          v60 = v58;
        else
          v60 = 0;
        a1[502] = v60;
        if (!a1[729])
          a1[729] = &v73;
        v61 = *(unsigned __int8 **)(v13 + 24);
        v62 = a1;
        v63 = 20;
      }
      else
      {
        if (v17 != 19)
        {
          v14 = *(_DWORD *)v13;
          goto LABEL_23;
        }
        v77 = 0;
        if (sub_22E61F3B0((uint64_t)a1, *(_QWORD *)(v13 + 16), &v77, 0) && v77)
        {
          sub_22E3CB7B0(a1, v13, 0);
          v42 = *(unsigned __int8 **)(v13 + 24);
          v43 = a1;
          v44 = 19;
          goto LABEL_70;
        }
        if (sub_22E61F3B0((uint64_t)a1, *(_QWORD *)(v13 + 24), &v77, 0) && v77)
        {
          v42 = *(unsigned __int8 **)(v13 + 16);
          v43 = a1;
          v44 = 19;
          goto LABEL_77;
        }
        v74 = "land.lhs.true";
        v76 = 259;
        v64 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        v65 = sub_22E3CF180((uint64_t)(a1 + 488), *(_QWORD *)(v13 + 24));
        v73 = a1[40];
        v74 = 0;
        if (v66)
          v67 = v65;
        else
          v67 = 0;
        v75 = a1;
        sub_22EFF605C(v13);
        sub_22E48EE24((uint64_t *)&v74, v68, 0);
        if ((_DWORD)a6 == -1)
          v69 = 0;
        else
          v69 = a6;
        sub_22E61F8F8(a1, *(_QWORD *)(v13 + 16), v64, v12, v67, v69);
        sub_22E5ED9B4(a1, v64, 0);
        sub_22E48F084(&v74);
        sub_22E3CB7B0(a1, v13, 0);
        v70 = sub_22E3CF180((uint64_t)(a1 + 488), *(_QWORD *)(v13 + 24));
        if (v71)
          v72 = v70;
        else
          v72 = 0;
        a1[502] = v72;
        if (!a1[729])
          a1[729] = &v73;
        v61 = *(unsigned __int8 **)(v13 + 24);
        v62 = a1;
        v63 = 19;
      }
      result = sub_22E61F76C(v62, v61, v63, v8, v12, a5, a6, 0);
LABEL_43:
      if ((uint64_t *)a1[729] == &v73)
        a1[729] = 0;
      return result;
    }
LABEL_23:
    if (v14 == 233)
    {
      if ((*(_DWORD *)v13 & 0x7C0000) == 0x240000)
      {
        a5 = a1[502] - a5;
        a6 = -(int)a6;
        a2 = *(unsigned __int8 **)(v13 + 16);
        v11 = v8;
        v9 = v12;
        v13 = 0;
        if (a2)
          continue;
        goto LABEL_28;
      }
      v14 = *(_DWORD *)v13;
    }
    break;
  }
  if (v14 == 103)
  {
    v9 = v8;
    v8 = v11;
    goto LABEL_28;
  }
  if (v14 == 134)
    return sub_22F25C5A0(a1, v13, 0);
LABEL_48:
  v74 = 0;
  v75 = a1;
  sub_22EFF605C(v13);
  sub_22E48EE24((uint64_t *)&v74, v31, 0);
  v32 = sub_22E4D86E0(a1, v13);
  sub_22E48F084(&v74);
  v33 = sub_22EFFEB40((unsigned __int8 *)v13);
  Unpredictable = 0;
  if ((*v33 + 113) >= 0xFBu)
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1[18] + 184) + 33) & 0x18) != 0
      && (v35 = sub_22EFFA604(*(unsigned __int8 **)&v33[v33[3]])) != 0
      && (*(_DWORD *)(v35 + 28) & 0x7Eu) - 52 <= 5
      && sub_22EFC01DC(v35, 0) == 498)
    {
      v74 = *(const char **)(a1[18] + 232);
      Unpredictable = llvm::MDBuilder::createUnpredictable((llvm::MDBuilder *)&v74);
    }
    else
    {
      Unpredictable = 0;
    }
  }
  v36 = sub_22E6200EC((uint64_t)a1, v32, a6);
  if (v32 == v36)
  {
    v38 = a1[502];
    v39 = v38 >= a5;
    v40 = v38 - a5;
    if (v39)
      v41 = v40;
    else
      v41 = 0;
    v37 = sub_22E659CE4((uint64_t)a1, a5, v41);
  }
  else
  {
    v37 = 0;
    v32 = v36;
  }
  return sub_22E3D26FC(a1 + 34, (uint64_t)v32, v8, v12, v37, Unpredictable);
}

llvm::Value *sub_22E6200EC(uint64_t a1, llvm::Value *a2, int a3)
{
  llvm::Value *v5;
  uint64_t Declaration;
  uint64_t Bool;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  __int16 v12;
  uint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v5 = a2;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 33) & 0x18) != 0)
    {
      v13 = *(_QWORD *)a2;
      Declaration = llvm::Intrinsic::getDeclaration();
      Bool = llvm::ConstantInt::getBool();
      v8 = (uint64_t *)(a1 + 272);
      if (Declaration)
        v9 = *(_QWORD *)(Declaration + 24);
      else
        v9 = 0;
      v14[0] = v5;
      v14[1] = Bool;
      v12 = 773;
      v11[0] = llvm::Value::getName(v5);
      v11[1] = v10;
      v11[2] = ".expval";
      return sub_22E462B78(v8, v9, Declaration, (uint64_t)v14, 2, (uint64_t)v11, 0);
    }
  }
  return a2;
}

uint64_t sub_22E620200(_QWORD *a1, __int128 *a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  llvm::GetElementPtrInst *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  llvm::PHINode *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  unsigned int v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  double v55;
  uint64_t v56;
  _OWORD v57[3];
  _OWORD v58[3];
  _OWORD v59[3];
  _OWORD v60[3];
  _OWORD v61[3];
  _QWORD v62[2];
  _QWORD v63[3];
  int v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t *v70[4];
  __int16 v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v6 = sub_22EF5C728(*(_QWORD *)(a1[18] + 144), a3);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 32);
    v8 = *((_QWORD *)a2 + 1);
    sub_22EF5CCD0(*(_QWORD *)(a1[18] + 144), *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v67);
    v9 = (*((_QWORD *)a2 + 2) | v67) & -(uint64_t)(*((_QWORD *)a2 + 2) | v67);
    v70[0] = (uint64_t *)llvm::ConstantInt::get();
    v70[1] = v70[0];
    v10 = (uint64_t *)llvm::ConstantInt::get();
    v11 = (uint64_t *)llvm::ConstantInt::get();
    v56 = v7;
    if ((*((_BYTE *)a2 + 24) & 3) != 0)
      v12 = (uint64_t *)sub_22F28ABCC(a2, a1);
    else
      v12 = *(uint64_t **)a2;
    *(_QWORD *)&v67 = "array_authenticated_null_init.start";
    LOWORD(v69) = 259;
    v13 = (uint64_t *)sub_22E486CB4(a1 + 34, v8, v12, v70, 2, (uint64_t)&v67);
    v14 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)&v67 = "array_authenticated_null_init.end";
    LOWORD(v69) = 259;
    v15 = sub_22E3E5044(a1 + 34, v14, v13, v11, (uint64_t)&v67);
    v16 = a1[40];
    *(_QWORD *)&v67 = "array_authenticated_null_init.body";
    LOWORD(v69) = 259;
    v17 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    sub_22E5ED9B4(a1, v17, 0);
    v18 = *v13;
    *(_QWORD *)&v67 = "array_authenticated_null_init.cur";
    LOWORD(v69) = 259;
    v19 = (llvm::PHINode *)sub_22E3C4B80(a1 + 34, v18, 2, (uint64_t)&v67);
    sub_22E3C4C50(v19, (uint64_t)v13, v16);
    v20 = *(_QWORD *)(v8 + 24);
    v63[0] = v19;
    v63[1] = v20;
    v63[2] = v9;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    sub_22E620200(a1, v63, v56);
    v21 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)&v67 = "array_authenticated_null_init.next";
    LOWORD(v69) = 259;
    v22 = (uint64_t *)sub_22E3E5044(a1 + 34, v21, (uint64_t *)v19, v10, (uint64_t)&v67);
    *(_QWORD *)&v67 = "array_authenticated_null_init.done";
    LOWORD(v69) = 259;
    v23 = sub_22E3C18F4((uint64_t)(a1 + 34), 32, v22, (uint64_t)v15, (uint64_t)&v67);
    *(_QWORD *)&v67 = "array_authenticated_null_init.end";
    LOWORD(v69) = 259;
    v24 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v25 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v25, v24, v17, v23, 0);
    LOWORD(v69) = 257;
    sub_22E3C12C8(a1 + 34, v25, (uint64_t)&v67);
    sub_22E3C4C50(v19, (uint64_t)v22, a1[40]);
    return sub_22E5ED9B4(a1, v24, 0);
  }
  else
  {
    v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v27 && *(_BYTE *)(v27 + 16) == 45)
    {
      v28 = a1[18] + 280;
      v29 = sub_22F114198(*(_QWORD *)(v27 + 24));
      v30 = sub_22E66DD94(v28, v29);
      v31 = sub_22F10C2A4(v27);
      if (v31)
      {
        if ((*(_DWORD *)(v31 + 28) & 0x7Fu) - 35 <= 2)
        {
          v37 = sub_22E46A3A0(v31);
          if (v37 != v38)
          {
            v39 = v37;
            v40 = v38;
            do
            {
              v41 = *(_QWORD *)(**(_QWORD **)(v39 + 16) & 0xFFFFFFFFFFFFFFF0);
              if ((*(_BYTE *)(v41 + 8) & 0xF) != 0)
                v41 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v39 + 16));
              v42 = v41 & 0xFFFFFFFFFFFFFFF0;
              if (sub_22EF5EB64(*(_QWORD *)(a1[18] + 144), v41 & 0xFFFFFFFFFFFFFFF0))
              {
                v43 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v42 + 8) & 0xFFFFFFFFFFFFFFF0)
                                              + 24));
                if ((*(_BYTE *)(v39 + 12) & 1) != 0)
                {
                  *(_QWORD *)&v67 = v43;
                  v70[0] = 0;
                  v44 = (uint64_t *)(v30 + 88);
                }
                else
                {
                  *(_QWORD *)&v67 = v43;
                  v70[0] = 0;
                  v44 = (uint64_t *)(v30 + 64);
                }
                if (sub_22F246C54(v44, &v67, v70))
                  v45 = *((unsigned int *)v70[0] + 2);
                else
                  v45 = 0;
                v46 = a2[1];
                v60[0] = *a2;
                v60[1] = v46;
                v60[2] = a2[2];
                v71 = 257;
                sub_22E3C408C(a1 + 34, (uint64_t)v60, v45, (uint64_t)v70, (uint64_t)&v67);
                v59[0] = v67;
                v59[1] = v68;
                v59[2] = v69;
                sub_22E620200(a1, v59, v42);
              }
              v39 += 24;
            }
            while (v39 != v40);
          }
        }
      }
      v32 = sub_22F114198(*(_QWORD *)(v27 + 24));
      result = sub_22EFC3B90(v32);
      if (result)
      {
        v33 = result;
LABEL_11:
        v34 = *(_QWORD *)(v33 + 48);
        result = sub_22EF5EB64(*(_QWORD *)(a1[18] + 144), v34);
        if ((_BYTE)result)
        {
          v35 = sub_22E4EC264(v30, v33);
          v36 = a2[1];
          v58[0] = *a2;
          v58[1] = v36;
          v58[2] = a2[2];
          v71 = 257;
          sub_22E3C408C(a1 + 34, (uint64_t)v58, v35, (uint64_t)v70, (uint64_t)&v67);
          v57[0] = v67;
          v57[1] = v68;
          v57[2] = v69;
          result = sub_22E620200(a1, v57, v34);
        }
        while (1)
        {
          v33 = *(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!v33)
            break;
          if ((*(_DWORD *)(v33 + 28) & 0x7Fu) - 49 < 3)
            goto LABEL_11;
        }
      }
    }
    else
    {
      v47 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v47 & 8) != 0)
        v48 = *(_DWORD *)((v47 & 0xFFFFFFFFFFFFFFF0) + 0x1C);
      else
        v48 = 0;
      v49 = a2[1];
      v61[0] = *a2;
      v61[1] = v49;
      v61[2] = a2[2];
      v50 = sub_22F289E38((uint64_t)a1, v48, (uint64_t)v61);
      v51 = v50;
      v62[0] = v50;
      v62[1] = v52;
      v53 = sub_22E507208((_QWORD *)a1[18], a3);
      if ((v51 & 2) != 0)
        v53 = sub_22E62243C(a1, v62, v53, 249);
      v54 = a2[1];
      v67 = *a2;
      v68 = v54;
      v69 = a2[2];
      v55 = sub_22E6281E0((_QWORD *)a1[18], a3, (uint64_t)v70);
      return sub_22E4E8134(a1, v53, &v67, 0, a3, 2, v70, 0, v55, 0);
    }
  }
  return result;
}

unint64_t sub_22E620824(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t *v11;
  unint64_t v12;
  llvm::LLVMContext *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Int8PtrTy;
  uint64_t v17;
  llvm::LLVMContext *v18;
  uint64_t Int8Ty;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  llvm::PHINode *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  llvm::GetElementPtrInst *v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD v47[3];
  __int128 v48[3];
  __int128 v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD v54[3];
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58[3];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _QWORD v79[4];
  __int16 v80;

  v3 = a3;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 1) & 1) == 0
    || (v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) == 0
    || *(_BYTE *)(v38 + 16) != 45
    || (v39 = sub_22F114198(*(_QWORD *)(v38 + 24)),
        result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v39 + 104) + 96), *(_QWORD *)(v39 + 104)),
        (**(_QWORD **)(v39 + 128) & 0x200) == 0))
  {
    v6 = *(_OWORD *)(a2 + 16);
    v7 = *(_OWORD *)(a2 + 32);
    v59 = *(_OWORD *)a2;
    v60 = v6;
    v61 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(a2 + 8) != v8)
    {
      v9 = *(_OWORD *)(a2 + 16);
      v58[0] = *(_OWORD *)a2;
      v58[1] = v9;
      v58[2] = *(_OWORD *)(a2 + 32);
      WORD4(v74) = 257;
      sub_22E3BEE6C((uint64_t *)(a1 + 272), v58, v8, (uint64_t)&v72, (uint64_t)&v76);
      v10 = v77;
      *(_OWORD *)a2 = v76;
      *(_OWORD *)(a2 + 16) = v10;
      *(_OWORD *)(a2 + 32) = v78;
    }
    sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v76);
    if ((_QWORD)v76)
    {
      v11 = (uint64_t *)llvm::ConstantInt::get();
      v12 = 0;
    }
    else
    {
      result = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v3);
      if (!result)
        return result;
      v12 = result;
      if (*(_BYTE *)(result + 16) != 5)
        return result;
      v11 = (uint64_t *)sub_22F297878(a1, result);
      sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(v40 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v76);
      if ((_QWORD)v76 != 1)
      {
        v41 = llvm::ConstantInt::get();
        LOWORD(v78) = 257;
        v11 = (uint64_t *)sub_22E3BDEA8(a1 + 272, (uint64_t)v11, v41, (uint64_t)&v76, 1, 0);
      }
    }
    if ((sub_22E66DE5C(*(_QWORD *)(a1 + 144) + 280, v3) & 1) != 0)
    {
      v43 = *(_OWORD *)(a2 + 16);
      v47[0] = *(_OWORD *)a2;
      v47[1] = v43;
      v47[2] = *(_OWORD *)(a2 + 32);
      llvm::Type::getInt8Ty(*(llvm::Type **)(a1 + 336), v13);
      llvm::ConstantInt::get();
      return sub_22F2483D8(a1 + 272, v47);
    }
    else
    {
      if (v12)
        v3 = sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(v12 + 32));
      sub_22E507208(*(_QWORD **)(a1 + 144), v3);
      v14 = llvm::User::operator new((llvm::User *)0x58);
      LOWORD(v78) = 257;
      llvm::GlobalVariable::GlobalVariable();
      v15 = *(_QWORD *)(a2 + 16);
      llvm::GlobalObject::setAlignment();
      Int8PtrTy = llvm::Type::getInt8PtrTy(*(llvm::Type **)(a1 + 336), 0);
      LOWORD(v78) = 257;
      v17 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, v14, Int8PtrTy, (uint64_t)&v76);
      Int8Ty = llvm::Type::getInt8Ty(*(llvm::Type **)(a1 + 336), v18);
      if (v12)
      {
        v45 = Int8Ty;
        v57 = *(_OWORD *)a2;
        v20 = *(_QWORD *)(a2 + 16);
        v55 = *(_OWORD *)(a2 + 24);
        v56 = *(_QWORD *)(a2 + 40);
        sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v76);
        v21 = v76;
        v22 = (uint64_t *)llvm::ConstantInt::get();
        v72 = v57;
        v74 = v55;
        v73 = v20;
        v75 = v56;
        v23 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)&v67 = "vla.begin";
        LOWORD(v70) = 259;
        sub_22E3BEE6C((uint64_t *)(a1 + 272), &v72, v23, (uint64_t)&v67, (uint64_t)&v76);
        v24 = *((_QWORD *)&v76 + 1);
        v46 = v17;
        if ((BYTE8(v77) & 3) != 0)
          v25 = (uint64_t *)sub_22F28ABCC(&v76, a1);
        else
          v25 = (uint64_t *)v76;
        *(_QWORD *)&v67 = "vla.end";
        LOWORD(v70) = 259;
        v44 = sub_22E3E5044((uint64_t *)(a1 + 272), v24, v25, v11, (uint64_t)&v67);
        v26 = *(_QWORD *)(a1 + 320);
        *(_QWORD *)&v67 = "vla-init.loop";
        LOWORD(v70) = 259;
        v27 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        *(_QWORD *)&v67 = "vla-init.cont";
        LOWORD(v70) = 259;
        v28 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        sub_22E5ED9B4((_QWORD *)a1, v27, 0);
        v29 = llvm::PointerType::get();
        *(_QWORD *)&v67 = "vla.cur";
        LOWORD(v70) = 259;
        v30 = (llvm::PHINode *)sub_22E3C4B80((uint64_t *)(a1 + 272), v29, 2, (uint64_t)&v67);
        if ((BYTE8(v77) & 3) != 0)
          v31 = sub_22F28ABCC(&v76, a1);
        else
          v31 = v76;
        sub_22E3C4C50(v30, v31, v26);
        v32 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)&v67 = v30;
        *((_QWORD *)&v67 + 1) = v32;
        v68 = (v21 | v20) & -(v21 | v20);
        v69 = 0;
        v70 = 0;
        v71 = 0;
        *(_QWORD *)&v62 = v46;
        *((_QWORD *)&v62 + 1) = v45;
        v63 = v15;
        v64 = 0;
        v65 = 0;
        v66 = 0;
        sub_22E3E4F38(a1 + 272, &v67, &v62);
        v33 = *(_QWORD *)(a1 + 8);
        v79[0] = "vla.next";
        v80 = 259;
        v34 = (uint64_t *)sub_22E3E5044((uint64_t *)(a1 + 272), v33, (uint64_t *)v30, v22, (uint64_t)v79);
        v79[0] = "vla-init.isdone";
        v80 = 259;
        v35 = sub_22E3C18F4(a1 + 272, 32, v34, (uint64_t)v44, (uint64_t)v79);
        v36 = llvm::User::operator new((llvm::User *)0x40);
        MEMORY[0x23489C09C](v36, v28, v27, v35, 0);
        v80 = 257;
        sub_22E3C12C8((uint64_t *)(a1 + 272), v36, (uint64_t)v79);
        sub_22E3C4C50(v30, (uint64_t)v34, (uint64_t)v27);
        return sub_22E5ED9B4((_QWORD *)a1, v28, 0);
      }
      else
      {
        v42 = *(_OWORD *)(a2 + 16);
        v54[0] = *(_OWORD *)a2;
        v54[1] = v42;
        v54[2] = *(_OWORD *)(a2 + 32);
        *(_QWORD *)&v49 = v17;
        *((_QWORD *)&v49 + 1) = Int8Ty;
        v50 = v15;
        v51 = 0;
        v52 = 0;
        v53 = 0;
        sub_22E3E4F38(a1 + 272, v54, &v49);
        result = sub_22EF5EB64(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v3);
        if ((_BYTE)result)
        {
          v48[0] = v59;
          v48[1] = v60;
          v48[2] = v61;
          return sub_22E620200((_QWORD *)a1, v48, v3);
        }
      }
    }
  }
  return result;
}

llvm::Instruction *sub_22E620E9C(uint64_t a1, llvm::LLVMContext *a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  llvm::Instruction *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Instruction *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::LLVMContext *v15;
  int v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t *v25;
  llvm::GetElementPtrInst *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  const char *v31;
  __int16 v32;
  __int128 v33[3];
  _OWORD v34[2];
  __int128 v35;
  void *v36;
  uint64_t v37;
  _QWORD v38[10];

  v6 = (unint64_t)a2;
  v38[8] = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a2 + 16) != 5)
  {
    v8 = 0;
LABEL_3:
    v36 = v38;
    v37 = 0x800000000;
    llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), a2);
    v9 = llvm::ConstantInt::get();
    v38[0] = v9;
    LODWORD(v37) = 1;
    v10 = *(_QWORD *)(a4 + 8);
    v11 = 1;
    if (v10 && *(_BYTE *)(v10 + 8) == 17)
    {
      v30 = a3;
      v12 = v8;
      v11 = 1;
      do
      {
        v13 = v37;
        if (v37 >= (unint64_t)HIDWORD(v37))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v13 = v37;
        }
        *((_QWORD *)v36 + v13) = v9;
        LODWORD(v37) = v37 + 1;
        v14 = v10 + 24;
        v10 = *(_QWORD *)(v10 + 24);
        v11 *= *(_QWORD *)(v14 + 8);
        v15 = *(llvm::LLVMContext **)(v6 + 32);
        v16 = *(unsigned __int8 *)(v10 + 8);
        v17 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), (unint64_t)v15);
        v6 = v17;
      }
      while (v10 && v16 == 17);
      if (!v17)
      {
        v24 = *(_QWORD *)(a4 + 8);
        v8 = v12;
        if ((*(_BYTE *)(a4 + 24) & 3) != 0)
          v25 = (uint64_t *)sub_22F28ABCC(a4, a1);
        else
          v25 = *(uint64_t **)a4;
        a3 = v30;
        *(_QWORD *)&v34[0] = "array.begin";
        LOWORD(v35) = 259;
        v26 = sub_22E486CB4((uint64_t *)(a1 + 272), v24, v25, (uint64_t **)v36, v37, (uint64_t)v34);
        v27 = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, (uint64_t)v15, 0);
        *(_QWORD *)a4 = v26;
        *(_QWORD *)(a4 + 8) = v27;
        *(_DWORD *)(a4 + 24) = 0;
        *(_QWORD *)(a4 + 32) = 0;
        *(_QWORD *)(a4 + 40) = 0;
LABEL_16:
        *a3 = v15;
        v22 = llvm::ConstantInt::get();
        if (v8)
        {
          LOWORD(v35) = 257;
          v22 = (uint64_t)sub_22E3BDEA8(a1 + 272, (uint64_t)v8, v22, (uint64_t)v34, 1, 0);
        }
        if (v36 != v38)
          free(v36);
        return (llvm::Instruction *)v22;
      }
      v8 = v12;
      a3 = v30;
    }
    do
    {
      v18 = (_QWORD *)(v6 + 40);
      if (*(_DWORD *)(v6 + 48) >= 0x41u)
        v18 = (_QWORD *)*v18;
      v11 *= *v18;
      v15 = *(llvm::LLVMContext **)(v6 + 32);
      v6 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), (unint64_t)v15);
    }
    while (v6);
    v19 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), v15);
    v20 = *(_OWORD *)(a4 + 16);
    v33[0] = *(_OWORD *)a4;
    v33[1] = v20;
    v33[2] = *(_OWORD *)(a4 + 32);
    v31 = "array.begin";
    v32 = 259;
    sub_22E3BEE6C((uint64_t *)(a1 + 272), v33, v19, (uint64_t)&v31, (uint64_t)v34);
    v21 = v34[1];
    *(_OWORD *)a4 = v34[0];
    *(_OWORD *)(a4 + 16) = v21;
    *(_OWORD *)(a4 + 32) = v35;
    goto LABEL_16;
  }
  v8 = sub_22F297878(a1, (unint64_t)a2);
  while (1)
  {
    v28 = *(_QWORD *)(v6 + 32);
    v29 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v28);
    if (!v29)
      break;
    v6 = v29;
    if (*(_BYTE *)(v29 + 16) != 5)
      goto LABEL_3;
  }
  *a3 = v28;
  return v8;
}

uint64_t sub_22E6211F8(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;

  v3 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), a2);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 16) == 5)
      v4 = v3;
    else
      v4 = 0;
  }
  else
  {
    v4 = 0;
  }
  v6 = *(_QWORD *)(v4 + 40);
  return sub_22F25E108((uint64_t *)(a1 + 4112), &v6)[1];
}

uint64_t sub_22E621260(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (!*(_BYTE *)(result + 2892))
  {
    v3 = result;
    result = *(_QWORD *)(result + 2880);
    if (result)
    {
      if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 184) + 96) & 0x1800000000000000) != 0)
        return sub_22E49DF88(result, *(_QWORD *)(a2 + 16), a3);
    }
  }
  return result;
}

llvm::Instruction *sub_22E621294(uint64_t a1, llvm::Type **a2, unint64_t a3, int a4, int a5, llvm::Type **a6, uint64_t a7)
{
  llvm::Type **v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::APInt *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Instruction *v23;
  uint64_t *v24;
  uint64_t DataLayout;
  llvm::Instruction *result;
  _QWORD v27[4];
  __int16 v28;

  v8 = a6;
  v14 = *(_QWORD *)(a1 + 88);
  if (*a6 != (llvm::Type *)v14)
  {
    v27[0] = "casted.align";
    v28 = 259;
    v8 = (llvm::Type **)sub_22E3BF45C((uint64_t *)(a1 + 272), (uint64_t)a6, v14, 0, (uint64_t)v27);
  }
  if (a7)
  {
    v15 = *(_QWORD *)(a1 + 88);
    if (*(_QWORD *)a7 != v15)
    {
      v27[0] = "casted.offset";
      v28 = 259;
      a7 = sub_22E3BF45C((uint64_t *)(a1 + 272), a7, v15, 1, (uint64_t)v27);
    }
  }
  if ((*(_BYTE *)(a1 + 1865) & 0x80) == 0)
  {
    v16 = 0;
    goto LABEL_14;
  }
  v17 = *(_QWORD *)(a1 + 88);
  v27[0] = "ptrint";
  v28 = 259;
  v18 = sub_22E3C1740((uint64_t *)(a1 + 272), 47, (uint64_t)a2, v17, (uint64_t)v27);
  if (a7)
  {
    if (*(_BYTE *)(a7 + 16) != 16)
      goto LABEL_12;
    v19 = (llvm::APInt *)(a7 + 24);
    v20 = *(_DWORD *)(a7 + 32);
    if (v20 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v19) == v20)
        goto LABEL_13;
      goto LABEL_12;
    }
    if (*(_QWORD *)v19)
    {
LABEL_12:
      v27[0] = "offsetptr";
      v28 = 259;
      v18 = (uint64_t)sub_22E3E48CC(a1 + 272, v18, a7, (uint64_t)v27, 0, 0);
    }
  }
LABEL_13:
  v21 = llvm::ConstantInt::get();
  v22 = llvm::ConstantInt::get();
  v28 = 257;
  v23 = sub_22E3E48CC(a1 + 272, (uint64_t)v8, v22, (uint64_t)v27, 0, 0);
  v27[0] = "maskedptr";
  v28 = 259;
  v24 = (uint64_t *)sub_22E3E49C4(a1 + 272, v18, (uint64_t)v23, (uint64_t)v27);
  v27[0] = "maskcond";
  v28 = 259;
  v16 = sub_22E3C18F4(a1 + 272, 32, v24, v21, (uint64_t)v27);
LABEL_14:
  DataLayout = llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 144) + 200));
  result = (llvm::Instruction *)MEMORY[0x23489CB70](a1 + 272, DataLayout, a2, v8, a7);
  if ((*(_BYTE *)(a1 + 1865) & 0x80) != 0)
    return (llvm::Instruction *)sub_22F297D38(a1, a2, a3, a4, a5, v8, (llvm::Type **)a7, v16, result);
  return result;
}

llvm::Instruction *sub_22E621528(uint64_t a1, llvm::Type **a2, unsigned __int8 *a3, int a4, llvm::Type **a5, uint64_t a6)
{
  unint64_t v11;
  int v12;

  if ((*a3 + 102) >= 0xF5u)
    a3 = sub_22EFFB374(a3);
  v11 = *((_QWORD *)a3 + 1);
  sub_22EFF605C((uint64_t)a3);
  return sub_22E621294(a1, a2, v11, v12, a4, a5, a6);
}

uint64_t *sub_22E6215AC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  llvm::LLVMContext *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *result;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  llvm::Value *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t Declaration;
  uint64_t v30;
  _QWORD v31[4];
  __int16 v32;

  if ((*(_BYTE *)(a3 + 24) & 3) != 0)
    v8 = sub_22F28ABCC(a3, a1);
  else
    v8 = *(_QWORD *)a3;
  v9 = *(_QWORD *)v8;
  if (*(_DWORD *)(*(_QWORD *)v8 + 8) != 15 || v9 == 0)
    v11 = 0;
  else
    v11 = (llvm::LLVMContext *)(*(_DWORD *)(*(_QWORD *)v8 + 8) >> 8);
  v12 = *(_QWORD *)(a1[18] + 96);
  if (*(_QWORD *)(v12 + 24))
    v13 = llvm::PointerType::get();
  else
    v13 = llvm::PointerType::get(*(llvm::PointerType **)v12, v11);
  v14 = v13;
  v31[0] = v13;
  Declaration = llvm::Intrinsic::getDeclaration();
  v30 = a2;
  v15 = (uint64_t *)sub_22F255ABC(a2);
  v17 = v16;
  result = a1 + 34;
  while (1)
  {
    v19 = v15;
    if (v15 >= v17)
    {
      if (v15 == v17)
        break;
      v20 = v17;
      while (*(_WORD *)(*v20 + 32) != 77)
      {
        if (++v20 == v15)
          goto LABEL_31;
      }
      v19 = v15;
    }
    else
    {
      while (*(_WORD *)(*v19 + 32) != 77)
      {
        if (++v19 == v17)
          goto LABEL_31;
      }
      v20 = v17;
    }
    if (v19 == v20)
      break;
    do
    {
      v22 = *v15++;
      v21 = v22;
    }
    while (*(_WORD *)(v22 + 32) != 77);
    v28 = v14;
    if (v9 == v14)
    {
      v23 = result;
    }
    else
    {
      v32 = 257;
      v24 = v14;
      v23 = result;
      v8 = sub_22E3C1740(result, 49, v8, v24, (uint64_t)v31);
    }
    v25 = sub_22F297ECC(a1, Declaration, v8, *(const void **)(v21 + 40), *(unsigned int *)(v21 + 36), *(_DWORD *)(v30 + 24), v21);
    v32 = 257;
    v8 = sub_22E3C1740(v23, 49, (uint64_t)v25, v9, (uint64_t)v31);
    result = v23;
    v14 = v28;
  }
LABEL_31:
  v26 = *(_QWORD *)(a3 + 8);
  v27 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v26;
  *(_QWORD *)(a4 + 16) = v27;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  return result;
}

void sub_22E6217B0(uint64_t a1, llvm::Instruction *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList();
    v8 = *a5;
    *((_QWORD *)a2 + 3) = *a5;
    *((_QWORD *)a2 + 4) = a5;
    *(_QWORD *)(v8 + 8) = (char *)a2 + 24;
    *a5 = (uint64_t)a2 + 24;
  }
  llvm::Value::setName();
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    sub_22E52456C(v9 + 168, a2);
    if (*(_BYTE *)(v9 + 1880))
      sub_22F2A2EE0();
  }
}

void sub_22E621848(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v7;
  char **v8;
  char *v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *i;
  unsigned __int8 *v30;
  int Key;
  _BOOL4 v33;
  signed __int8 v34;
  BOOL v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  unsigned __int8 *v40;
  uint64_t v41;
  void **v42;
  uint64_t *j;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void **v51;
  uint64_t v52;
  BOOL v53;
  void **v54;
  void **v55;
  std::string::size_type v56;
  void *v57;
  int v58;
  BOOL v59;
  _BYTE *p_dst;
  uint64_t v61;
  uint64_t v62;
  std::string::size_type v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::string *v70;
  size_t size;
  uint64_t *v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unsigned __int8 *v76;
  std::string __dst;
  __int16 v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 *v82;
  uint64_t v83;
  unint64_t v84;
  __int16 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  std::string v89;
  char v90;
  void **v91;
  uint64_t v92;
  _QWORD v93[3];

  v93[2] = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v4 = *(_QWORD *)(a1 + 1600);
    if (v4)
    {
      if ((*(_DWORD *)(v4 + 28) & 0x7Eu) - 52 <= 5)
      {
        v7 = sub_22EFC01DC(a3, 0);
        memset(&v89, 0, sizeof(v89));
        v86 = 0;
        v87 = 0;
        v88 = 0x1000000000;
        sub_22EF74614(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), &v86, v4, 0);
        if (v7)
        {
          if (v7 > 0x7E7)
          {
            v72 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 15208);
            v73 = v72[1];
            if (v73 + 2024 <= (unint64_t)v7)
            {
              v74 = v7 - v73 - 2024;
              v75 = v72[2];
            }
            else
            {
              v74 = v7 - 2024;
              v75 = *v72;
            }
            v8 = (char **)(v75 + 48 * v74);
          }
          else
          {
            v8 = &(&off_24FAC8C40)[6 * v7];
          }
          v9 = v8[5];
          if (v9)
          {
            v10 = strlen(v8[5]);
            if (v10)
            {
              v11 = v10;
              v91 = (void **)&v86;
              v12 = (uint64_t)v9;
              v13 = v10;
              do
              {
                sub_22E622A1C((uint64_t)&v82, (uint64_t *)&v91, v12, v13);
                v12 = v83;
                v13 = v84;
                if ((_BYTE)v82)
                  v14 = 1;
                else
                  v14 = v84 == 0;
              }
              while (!v14);
              if (!(_BYTE)v82)
              {
                v15 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 208);
                *(_DWORD *)(v15 + 312) = a2;
                *(_DWORD *)(v15 + 316) = 753;
                if (*(char *)(v15 + 311) < 0)
                {
                  **(_BYTE **)(v15 + 288) = 0;
                  *(_QWORD *)(v15 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v15 + 288) = 0;
                  *(_BYTE *)(v15 + 311) = 0;
                }
                v21 = (unsigned __int8 *)(v15 + 320);
                v82 = (unsigned __int8 *)(v15 + 320);
                v83 = 0;
                v84 = v15;
                v85 = 1;
                *(_BYTE *)(v15 + 320) = 0;
                *(_DWORD *)(v15 + 664) = 0;
                v22 = *(unsigned int *)(v15 + 776);
                if ((_DWORD)v22)
                {
                  v23 = *(_QWORD *)(v15 + 768);
                  v24 = 56 * v22;
                  do
                  {
                    if (*(char *)(v23 + v24 - 9) < 0)
                      operator delete(*(void **)(v23 + v24 - 32));
                    v24 -= 56;
                  }
                  while (v24);
                  LODWORD(v22) = *v21;
                }
                *(_DWORD *)(v15 + 776) = 0;
                v25 = *(_QWORD *)(a3 + 40);
                v21[v22 + 1] = 10;
                *(_BYTE *)(v15 + 320) = v22 + 1;
                *(_QWORD *)&v21[8 * v22 + 16] = v25;
                sub_22E3B89A8(&v82, v9, v11);
                sub_22E3BB0B8((uint64_t)&v82);
              }
            }
          }
          goto LABEL_124;
        }
        if ((*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3) + 84) & 0x10) != 0
          || !sub_22E47DA60(a3))
        {
LABEL_124:
          sub_22E622C5C((uint64_t)&v86);
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v89.__r_.__value_.__l.__data_);
          return;
        }
        if ((*(_BYTE *)(a3 + 29) & 1) == 0)
          goto LABEL_37;
        sub_22EFC8E88(a3);
        v17 = *(uint64_t **)v16;
        v18 = *(unsigned int *)(v16 + 8);
        v19 = *(uint64_t **)v16;
        if ((_DWORD)v18)
        {
          v20 = 8 * v18;
          v19 = *(uint64_t **)v16;
          while (*(_WORD *)(*v19 + 32) != 327)
          {
            ++v19;
            v20 -= 8;
            if (!v20)
              goto LABEL_37;
          }
        }
        if (v19 == &v17[v18])
        {
LABEL_37:
          v26 = 0;
        }
        else
        {
          do
          {
            v27 = *v17++;
            v26 = v27;
          }
          while (*(_WORD *)(v27 + 32) != 327);
        }
        sub_22EF744F4(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v26, (uint64_t)&v82);
        v91 = (void **)v93;
        v92 = 0x100000000;
        v79 = 0;
        v80 = 0;
        v81 = 0x1000000000;
        sub_22EF74614(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), (uint64_t *)&v79, a3, 0);
        v28 = v82;
        for (i = (unsigned __int8 *)v83; v28 != i; v28 += 24)
        {
          v30 = v28;
          if ((char)v28[23] < 0)
            v30 = *(unsigned __int8 **)v28;
          if (*v30 == 43)
          {
            std::string::basic_string(&__dst, (const std::string *)v28, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v90);
            Key = llvm::StringMapImpl::FindKey();
            v33 = Key != -1 && Key != (unint64_t)v80 && *(unsigned __int8 *)(v79[Key] + 8) != 0;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            if (v33)
            {
              v34 = v28[23];
              v35 = v34 < 0;
              if (v34 >= 0)
                v36 = v28;
              else
                v36 = *(unsigned __int8 **)v28;
              v37 = v34 & 0x7F;
              if (v35)
                v38 = *((_QWORD *)v28 + 1);
              else
                v38 = v37;
              v39 = v38 != 0;
              if (v38)
                v40 = v36 + 1;
              else
                v40 = v36;
              v41 = v92;
              if (v92 >= (unint64_t)HIDWORD(v92))
              {
                v76 = v40;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v39 = v38 != 0;
                v40 = v76;
                v41 = v92;
              }
              v42 = &v91[2 * v41];
              *v42 = v40;
              v42[1] = (void *)(v38 - v39);
              LODWORD(v92) = v92 + 1;
            }
          }
        }
        if ((_DWORD)v80)
        {
          for (j = v79; !*j || *j == -8; ++j)
            ;
        }
        else
        {
          j = v79;
        }
        v45 = &v79[v80];
        if (j != v45)
        {
          v46 = *j;
          do
          {
            if (*(_BYTE *)(v46 + 8))
            {
              v49 = *(void **)v46;
              v47 = (void *)(v46 + 16);
              v48 = v49;
              v50 = v92;
              if (v92 >= (unint64_t)HIDWORD(v92))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v50 = v92;
              }
              v51 = &v91[2 * v50];
              *v51 = v47;
              v51[1] = v48;
              LODWORD(v92) = v92 + 1;
            }
            do
            {
              v52 = j[1];
              ++j;
              v46 = v52;
              if (v52)
                v53 = v46 == -8;
              else
                v53 = 1;
            }
            while (v53);
          }
          while (j != v45);
        }
        if (!(_DWORD)v92)
        {
LABEL_121:
          sub_22E622C5C((uint64_t)&v79);
          if (v91 != v93)
            free(v91);
          v91 = (void **)&v82;
          sub_22E3B3CC8(&v91);
          goto LABEL_124;
        }
        v54 = v91;
        v55 = &v91[2 * v92];
        while (1)
        {
          v57 = *v54;
          v56 = (std::string::size_type)v54[1];
          v58 = llvm::StringMapImpl::FindKey();
          v59 = v58 == -1 || v58 == (unint64_t)v87;
          if (v59 || !*(_BYTE *)(*(_QWORD *)(v86 + 8 * v58) + 8))
            break;
          v54 += 2;
          if (v54 == v55)
            goto LABEL_121;
        }
        if (!v57)
        {
          memset(&__dst, 0, sizeof(__dst));
LABEL_105:
          v89 = __dst;
          v63 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 208);
          *(_DWORD *)(v63 + 312) = a2;
          *(_DWORD *)(v63 + 316) = 792;
          if (*(char *)(v63 + 311) < 0)
          {
            **(_BYTE **)(v63 + 288) = 0;
            *(_QWORD *)(v63 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v63 + 288) = 0;
            *(_BYTE *)(v63 + 311) = 0;
          }
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v63 + 320;
          __dst.__r_.__value_.__r.__words[2] = v63;
          v78 = 1;
          *(_BYTE *)(v63 + 320) = 0;
          *(_DWORD *)(v63 + 664) = 0;
          v64 = *(unsigned int *)(v63 + 776);
          if ((_DWORD)v64)
          {
            v65 = *(_QWORD *)(v63 + 768);
            v66 = 56 * v64;
            do
            {
              if (*(char *)(v65 + v66 - 9) < 0)
                operator delete(*(void **)(v65 + v66 - 32));
              v66 -= 56;
            }
            while (v66);
            LODWORD(v64) = *(unsigned __int8 *)(v63 + 320);
          }
          *(_DWORD *)(v63 + 776) = 0;
          v67 = *(_QWORD *)(v4 + 40);
          *(_BYTE *)(v63 + 321 + v64) = 10;
          *(_QWORD *)(v63 + 336 + 8 * v64) = v67;
          v68 = *(_QWORD *)(a3 + 40);
          v69 = (v64 + 1);
          *(_BYTE *)(v63 + 321 + v69) = 10;
          *(_BYTE *)(v63 + 320) = v64 + 2;
          *(_QWORD *)(v63 + 336 + 8 * v69) = v68;
          if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v70 = &v89;
          else
            v70 = (std::string *)v89.__r_.__value_.__r.__words[0];
          if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = *((_BYTE *)&v89.__r_.__value_.__s + 23) & 0x7F;
          else
            size = v89.__r_.__value_.__l.__size_;
          sub_22E3B89A8((unsigned __int8 **)&__dst, v70, size);
          sub_22E3BB0B8((uint64_t)&__dst);
          goto LABEL_121;
        }
        if (v56 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        if (v56 >= 0x17)
        {
          v61 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v56 | 7) != 0x17)
            v61 = v56 | 7;
          v62 = v61 + 1;
          p_dst = operator new(v61 + 1);
          __dst.__r_.__value_.__l.__size_ = v56;
          __dst.__r_.__value_.__r.__words[2] = v62 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v56;
          p_dst = &__dst;
          if (!v56)
          {
LABEL_103:
            p_dst[v56] = 0;
            if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v89.__r_.__value_.__l.__data_);
            goto LABEL_105;
          }
        }
        memmove(p_dst, v57, v56);
        goto LABEL_103;
      }
    }
  }
}

void sub_22E621F5C(llvm::Function *this, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Value *v11;
  uint64_t v12;
  _WORD v13[20];
  void *v14;
  uint64_t v15;
  _QWORD v16[11];

  v16[10] = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    sub_22E4772D4(a2, a3);
    return;
  }
  if ((*((_WORD *)this + 9) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(this);
    v7 = *((_QWORD *)this + 11);
    if ((*((_WORD *)this + 9) & 1) != 0)
    {
      v12 = *((_QWORD *)this + 11);
      llvm::Function::BuildLazyArguments(this);
      v7 = v12;
      v8 = *((_QWORD *)this + 11);
      goto LABEL_6;
    }
  }
  else
  {
    v7 = *((_QWORD *)this + 11);
  }
  v8 = v7;
LABEL_6:
  v9 = v8 + 40 * *((_QWORD *)this + 12);
  v14 = v16;
  v15 = 0xA00000000;
  sub_22E611290((uint64_t)&v14, v7, a3, v9);
  if (a3)
    v10 = *(_QWORD *)(a3 + 24);
  else
    v10 = 0;
  v13[16] = 257;
  v11 = sub_22E462B78(a2, v10, a3, (uint64_t)v14, v15, (uint64_t)v13, 0);
  *((_WORD *)v11 + 9) = *((_WORD *)v11 + 9) & 0xFFFC | 2;
  if (*(_BYTE *)(**(_QWORD **)(*((_QWORD *)this + 3) + 16) + 8) == 7)
    sub_22E3CF118(a2);
  else
    sub_22E4772D4(a2, (uint64_t)v11);
  if (v14 != v16)
    free(v14);
}

uint64_t sub_22E6220E0(uint64_t result, llvm::LLVMContext *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)a2 & 3) != 0)
  {
    llvm::Type::getInt32Ty(*(llvm::Type **)(result + 336), a2);
    v4 = llvm::ConstantInt::get();
    v5 = *((_QWORD *)a2 + 1);
    if (!v5)
      v5 = llvm::ConstantInt::get();
    *(_QWORD *)&v7 = v4;
    *((_QWORD *)&v7 + 1) = v5;
    return sub_22E622198(a3, "ptrauth", &v7);
  }
  return result;
}

uint64_t sub_22E622198(uint64_t a1, char *__s, _OWORD *a3)
{
  unsigned int v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  __int128 *p_dst;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v20;
  unsigned int v21;
  size_t v22;
  size_t v23;
  uint64_t v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _OWORD *v29;
  int v30;
  unsigned int v31;
  __int128 __dst;
  unint64_t v33;
  __int128 v34;
  unint64_t v35;
  uint64_t v36;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6 < *(_DWORD *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1;
    v8 = strlen(__s);
    if (v8 <= 0x7FFFFFFFFFFFFFF7)
    {
      v9 = v8;
      v10 = v7 + 48 * v6;
      if (v8 >= 0x17)
      {
        v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17)
          v12 = v8 | 7;
        v13 = v12 + 1;
        p_dst = (__int128 *)operator new(v12 + 1);
        *((_QWORD *)&__dst + 1) = v9;
        v33 = v13 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v33) = v8;
        p_dst = &__dst;
        if (!v8)
          goto LABEL_10;
      }
      memcpy(p_dst, __s, v9);
LABEL_10:
      *((_BYTE *)p_dst + v9) = 0;
      *(_OWORD *)v10 = __dst;
      *(_QWORD *)(v10 + 16) = v33;
      v14 = (_QWORD *)(v7 + 48 * v6);
      v14[4] = 0;
      v14[5] = 0;
      v15 = operator new(0x10uLL);
      v14[3] = v15;
      v14[4] = v15;
      v14[5] = v15 + 1;
      *v15 = *a3;
      v14[4] = v15 + 1;
      v16 = *(_QWORD *)a1;
      v17 = *(_DWORD *)(a1 + 8) + 1;
      *(_DWORD *)(a1 + 8) = v17;
      v18 = v16 + 48 * v17;
      return v18 - 48;
    }
LABEL_23:
    abort();
  }
  v36 = 0;
  v20 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v21 = *(_DWORD *)(a1 + 8);
  v22 = strlen(__s);
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_23;
  v23 = v22;
  v24 = v20 + 48 * v21;
  if (v22 >= 0x17)
  {
    v26 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v26 = v22 | 7;
    v27 = v26 + 1;
    v25 = (__int128 *)operator new(v26 + 1);
    *((_QWORD *)&v34 + 1) = v23;
    v35 = v27 | 0x8000000000000000;
    *(_QWORD *)&v34 = v25;
  }
  else
  {
    HIBYTE(v35) = v22;
    v25 = &v34;
    if (!v22)
      goto LABEL_20;
  }
  memcpy(v25, __s, v23);
LABEL_20:
  *((_BYTE *)v25 + v23) = 0;
  *(_OWORD *)v24 = v34;
  *(_QWORD *)(v24 + 16) = v35;
  v28 = (_QWORD *)(v20 + 48 * v21);
  v28[4] = 0;
  v28[5] = 0;
  v29 = operator new(0x10uLL);
  v28[3] = v29;
  v28[4] = v29;
  v28[5] = v29 + 1;
  *v29 = *a3;
  v28[4] = v29 + 1;
  sub_22E47FCA8((uint64_t *)a1, v20);
  v30 = v36;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v20;
  v31 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v31;
  *(_DWORD *)(a1 + 12) = v30;
  v18 = v20 + 48 * v31;
  return v18 - 48;
}

uint64_t sub_22E6223E4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = sub_22E5DE820(*(_QWORD *)(a1 + 144), a2);
  v7[1] = v5;
  if ((v7[0] & 2) != 0)
    return sub_22E62243C(a1, v7, a3, 249);
  return a3;
}

uint64_t sub_22E62243C(uint64_t a1, llvm::LLVMContext *a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Value *Declaration;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[32];
  __int16 v23;
  _QWORD v24[4];

  v24[3] = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)a2 & 3) != 0)
  {
    v6 = (uint64_t *)(a1 + 272);
    llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), a2);
    v7 = llvm::ConstantInt::get();
    v8 = *((_QWORD *)a2 + 1);
    if (!v8)
      v8 = llvm::ConstantInt::get();
    v9 = *a3;
    v10 = *(_QWORD *)(a1 + 88);
    v23 = 257;
    v11 = sub_22E3C1740(v6, 47, (uint64_t)a3, v10, (uint64_t)v22);
    if ((*(_BYTE *)a2 & 4) != 0
      && (v12 = *(_QWORD *)(a1 + 144),
          ((*(unsigned __int16 *)(*(_QWORD *)(v12 + 152) + 16) | (*(unsigned __int8 *)(*(_QWORD *)(v12 + 152) + 18) << 16)) & 0x400000) != 0))
    {
      v18 = sub_22F29C888(v12);
      v19 = *(_QWORD *)(a1 + 88);
      v23 = 257;
      v20 = sub_22E3C1740(v6, 47, v18, v19, (uint64_t)v22);
      v23 = 257;
      v21 = sub_22E3E49C4((uint64_t)v6, v11, v20, (uint64_t)v22);
      v23 = 257;
      v13 = sub_22E3ED05C(v6, v11, v21, (uint64_t)v22);
      v11 = v21;
    }
    else
    {
      v13 = 0;
    }
    Declaration = (llvm::Value *)llvm::Intrinsic::getDeclaration();
    if (Declaration)
      v15 = *((_QWORD *)Declaration + 3);
    else
      v15 = 0;
    v24[0] = v11;
    v24[1] = v7;
    v24[2] = v8;
    v23 = 257;
    v16 = (uint64_t)sub_22E479C7C(a1, v15, Declaration, (uint64_t)v24, 3, (uint64_t)v22);
    if (v13)
    {
      v23 = 257;
      v16 = sub_22E3E58D4((uint64_t)v6, v16, v13, (uint64_t)v22);
    }
    v23 = 257;
    return sub_22E3C1740(v6, 48, v16, v9, (uint64_t)v22);
  }
  return (uint64_t)a3;
}

uint64_t sub_22E622648(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t *v5;
  llvm::Value *Declaration;
  uint64_t v7;
  llvm::LLVMContext *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Value *v13;
  _BYTE v14[32];
  __int16 v15;
  _BYTE v16[32];
  __int16 v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  if ((*a2 & 3u) - 1 <= 1)
  {
    v5 = a3;
    Declaration = (llvm::Value *)llvm::Intrinsic::getDeclaration();
    v7 = a1;
    llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v8);
    v9 = llvm::ConstantInt::get();
    v10 = *v5;
    if (Declaration)
      v11 = *((_QWORD *)Declaration + 3);
    else
      v11 = 0;
    v12 = *(_QWORD *)(v7 + 88);
    v17 = 257;
    v18[0] = sub_22E3C1740((uint64_t *)(v7 + 272), 47, (uint64_t)v5, v12, (uint64_t)v16);
    v18[1] = v9;
    v15 = 257;
    v13 = sub_22E479C7C(v7, v11, Declaration, (uint64_t)v18, 2, (uint64_t)v14);
    v17 = 257;
    return sub_22E3C1740((uint64_t *)(v7 + 272), 48, (uint64_t)v13, v10, (uint64_t)v16);
  }
  if ((*a2 & 3) != 3)
    return (uint64_t)a3;
  return sub_22E62243C(a1, a2, a3, 246);
}

uint64_t sub_22E6227D8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;

  v4 = a2;
  v5 = *(_DWORD *)(*(_QWORD *)a2 + 32);
  if (v5 != a3)
  {
    if (a3)
    {
      v9 = (char *)operator new(4 * a3);
      memset(v9, 255, 4 * a3);
      v10 = &v9[4 * a3];
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
    if (v5 >= a3)
      v11 = a3;
    else
      v11 = v5;
    if ((_DWORD)v11)
    {
      for (i = 0; i != v11; ++i)
        *(_DWORD *)&v9[4 * i] = i;
    }
    v13 = (v10 - v9) >> 2;
    v14 = llvm::PoisonValue::get();
    v4 = sub_22E3ED3CC(a1 + 272, v4, v14, (uint64_t)v9, v13, a4);
    if (v9)
      operator delete(v9);
  }
  return v4;
}

uint64_t sub_22E6228BC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v3)
  {
    v7 = sub_22F298A58(v3);
    MEMORY[0x2348A0E9C](v7, 0x30C40C0311380);
  }
  v4 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v4)
  {
    llvm::deallocate_buffer(*(llvm **)v4, (void *)(16 * *(unsigned int *)(v4 + 16)));
    MEMORY[0x2348A0E9C](v4, 0x1020C405AF6BDC9);
  }
  v5 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v5)
  {
    llvm::deallocate_buffer(*(llvm **)v5, (void *)(16 * *(unsigned int *)(v5 + 16)));
    MEMORY[0x2348A0E9C](v5, 0x1020C405AF6BDC9);
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_22E622994(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = result;
  v4 = (_QWORD *)result[1];
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 3;
      if (*(v4 - 1))
      {
        v6 = *(v4 - 3);
        result = (_QWORD *)*(v4 - 2);
        v7 = *result;
        *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
        **(_QWORD **)(v6 + 8) = v7;
        *(v4 - 1) = 0;
        if (result != v5)
        {
          do
          {
            v8 = (_QWORD *)result[1];
            operator delete(result);
            result = v8;
          }
          while (v8 != v5);
        }
      }
      v4 = v5;
    }
    while (v5 != a2);
  }
  v3[1] = a2;
  return result;
}

BOOL sub_22E622A1C(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  int v8;
  unint64_t v9;
  unint64_t v10;
  _BOOL8 result;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  int Key;
  uint64_t v17;
  int v18;
  unint64_t v19;

  if (a4)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    result = 1;
    while (1)
    {
      v12 = *(char *)(a3 + v10);
      if (v12 > 43)
      {
        if (v12 != 44 && v12 != 124)
          goto LABEL_28;
      }
      else
      {
        if (v12 == 40)
        {
          if (!v8)
            v9 = v10 + 1;
          ++v8;
          goto LABEL_28;
        }
        if (v12 != 41)
          goto LABEL_28;
        --v8;
      }
      if (!v8)
      {
        v13 = *(unsigned __int8 *)(a3 + v10);
        if (result && v10 != v9)
        {
          if (a4 < v9)
            v9 = a4;
          if (v9 <= v10)
            v14 = v10;
          else
            v14 = v9;
          if (a4 < v14)
            v14 = a4;
          if (v13 == 41)
          {
            result = sub_22F298234((uint64_t)a2, a3 + v9, v14 - v9);
            v8 = 0;
            v9 = v10 + 1;
            goto LABEL_28;
          }
          v15 = *a2;
          Key = llvm::StringMapImpl::FindKey();
          result = Key != -1
                && Key != (unint64_t)*(unsigned int *)(v15 + 8)
                && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v15 + 8 * Key) + 8) != 0;
        }
        v9 = v10 + 1;
        if (v13 == 124)
        {
          *(_BYTE *)a1 = result;
          if (a4 >= v9)
            v19 = v10 + 1;
          else
            v19 = a4;
          *(_QWORD *)(a1 + 8) = a3 + v19;
          *(_QWORD *)(a1 + 16) = a4 - v19;
          return result;
        }
        v8 = 0;
      }
LABEL_28:
      if (a4 == ++v10)
        goto LABEL_32;
    }
  }
  v9 = 0;
  result = 1;
LABEL_32:
  if (result && v9 != a4)
  {
    v17 = *a2;
    v18 = llvm::StringMapImpl::FindKey();
    result = v18 != -1
          && v18 != (unint64_t)*(unsigned int *)(v17 + 8)
          && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v17 + 8 * v18) + 8) != 0;
  }
  *(_BYTE *)a1 = result;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_22E622BFC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(uint64_t **)a1;
  v2 = *(unsigned int *)(a1 + 8);
  i = *(uint64_t **)a1;
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    for (i = *(uint64_t **)a1; *(_WORD *)(*i + 32) != 300; ++i)
    {
      v4 -= 8;
      if (!v4)
        return 0;
    }
  }
  if (i == &v1[v2])
    return 0;
  do
  {
    v6 = *v1++;
    result = v6;
  }
  while (*(_WORD *)(v6 + 32) != 300);
  return result;
}

uint64_t sub_22E622C5C(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm *v6;
  BOOL v7;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8 * v3;
      do
      {
        v6 = *(llvm **)(*(_QWORD *)a1 + v4);
        if (v6)
          v7 = (llvm *)((char *)v6 + 8) == 0;
        else
          v7 = 1;
        if (!v7)
          llvm::deallocate_buffer(v6, (void *)(*(_QWORD *)v6 + 17));
        v4 += 8;
      }
      while (v5 != v4);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22E622CD8(const void **a1, uint64_t a2)
{
  const void *v3;
  size_t v4;
  size_t v5;
  const void **v6;
  size_t v7;
  uint64_t result;
  unsigned int v9;

  v3 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*((char *)a1 + 23) < 0)
  {
    v6 = a1;
    a1 = (const void **)*a1;
    v5 = (size_t)v6[1];
  }
  else
  {
    v5 = *((unsigned __int8 *)a1 + 23);
  }
  if (v4 >= v5)
    v7 = v5;
  else
    v7 = *(_QWORD *)(a2 + 8);
  LODWORD(result) = memcmp(a1, v3, v7);
  if (v5 < v4)
    v9 = -1;
  else
    v9 = v4 < v5;
  if ((_DWORD)result)
    return result;
  else
    return v9;
}

_QWORD *sub_22E622D38(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = (char *)off_24FA2DF38 + 16;
  v2 = a1 + 20;
  v3 = (_QWORD *)a1[23];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      return sub_22E6379A8(a1);
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  return sub_22E6379A8(a1);
}

uint64_t sub_22E622D98(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, llvm::Type **a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  void **v21;
  _QWORD *v22;
  llvm::Type *v23;
  llvm::LLVMContext *v24;
  llvm::LLVMContext *v25;
  llvm::LLVMContext *v26;
  llvm::LLVMContext *v27;
  llvm::LLVMContext *v28;
  llvm::LLVMContext *v29;
  llvm::LLVMContext *v30;
  llvm::LLVMContext *v31;
  llvm::LLVMContext *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  void *v55;
  uint64_t v56;
  void (*v57)(void);
  void *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  std::string::size_type size;
  std::string *p_str;
  char v68;
  unsigned __int8 *v69;
  std::string::size_type v70;
  std::string::size_type v71;
  unsigned __int8 *v72;
  BOOL v73;
  BOOL v74;
  _QWORD *v76;
  _QWORD *v77;
  std::string *v78;
  std::string *v79;
  uint64_t v80;
  unsigned __int8 *v81;
  int v82;
  std::string::size_type v83;
  const std::string::value_type *v84;
  _QWORD *v85;
  const std::string::value_type *v86;
  char v87;
  int v88;
  const std::string::value_type *v89;
  std::string::size_type v90;
  std::string::size_type v91;
  std::string *v92;
  std::string::size_type v93;
  char v94;
  void *v95;
  const void *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char **v101;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  void *__p[2];
  unint64_t v115;
  int v116;
  __int16 v117;
  __int128 v118;
  char *v119[4];
  __int16 v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  std::string __str;
  void *v126;
  __int128 v127;
  _BYTE v128[32];
  int v129;
  std::string v130;
  __int16 v131;
  _BYTE v132[32];
  __int16 v133;
  int v134;
  __int16 v135;
  uint64_t v136;

  v136 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 144) = a2;
  *(_QWORD *)(a1 + 152) = a2[250];
  v13 = *a3;
  *(_QWORD *)(a1 + 160) = *a3;
  v14 = a2;
  if (v13)
  {
    v15 = (unsigned int *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v14 = *(_QWORD **)(a1 + 144);
  }
  *(_QWORD *)(a1 + 168) = a4;
  *(_QWORD *)(a1 + 176) = a5;
  *(_QWORD *)(a1 + 184) = a6;
  *(_DWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = a7;
  *(_QWORD *)(a1 + 208) = a8;
  *(_QWORD *)(a1 + 216) = a2[1886];
  v17 = v14[1886] + 148;
  v18 = v14[250];
  if (*(_BYTE *)(v18 + 700))
    v19 = (_DWORD *)(v18 + 696);
  else
    v19 = (_DWORD *)v17;
  if (*v19 > 0xAu)
    v20 = sub_22F2A1F90(a1);
  else
    v20 = sub_22F2A0DC0(a1);
  *(_QWORD *)(a1 + 224) = v20;
  *(_QWORD *)(a1 + 232) = *a7;
  *(_OWORD *)(a1 + 240) = 0u;
  v21 = (void **)(a1 + 240);
  *(_QWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  sub_22F29E99C(a1 + 280, (_QWORD *)a1);
  *(_QWORD *)(a1 + 704) = a1;
  *(_QWORD *)(a1 + 712) = sub_22F36EF28(*(_QWORD **)(a1 + 144));
  *(_OWORD *)(a1 + 720) = 0u;
  *(_DWORD *)(a1 + 736) = 0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_DWORD *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 860) = 0u;
  *(_QWORD *)(a1 + 888) = a1 + 920;
  *(_QWORD *)(a1 + 896) = a1 + 920;
  *(_QWORD *)(a1 + 904) = 16;
  *(_DWORD *)(a1 + 912) = 0;
  *(_DWORD *)(a1 + 1064) = 0;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1148) = 0u;
  *(_DWORD *)(a1 + 1164) = 32;
  *(_QWORD *)(a1 + 1176) = a1 + 1192;
  *(_QWORD *)(a1 + 1184) = 0x800000000;
  *(_DWORD *)(a1 + 1336) = 0;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_DWORD *)(a1 + 1360) = 0;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_OWORD *)(a1 + 1496) = 0u;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_DWORD *)(a1 + 1528) = 0;
  *(_OWORD *)(a1 + 1564) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_DWORD *)(a1 + 1580) = 24;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_QWORD *)(a1 + 1600) = a1 + 1616;
  *(_QWORD *)(a1 + 1608) = 0x400000000;
  *(_QWORD *)(a1 + 1648) = a1 + 1664;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_QWORD *)(a1 + 1672) = 1;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_QWORD *)(a1 + 1744) = 0x1000000000;
  *(_DWORD *)(a1 + 1776) = 0;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_DWORD *)(a1 + 1800) = 0;
  *(_OWORD *)(a1 + 1784) = 0u;
  *(_DWORD *)(a1 + 1804) = 16;
  *(_DWORD *)(a1 + 1832) = 0;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_DWORD *)(a1 + 1856) = 0;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_DWORD *)(a1 + 1880) = 0;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_DWORD *)(a1 + 1904) = 0;
  *(_OWORD *)(a1 + 1888) = 0u;
  *(_DWORD *)(a1 + 1928) = 0;
  *(_OWORD *)(a1 + 1912) = 0u;
  *(_DWORD *)(a1 + 1952) = 0;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(_DWORD *)(a1 + 1976) = 0;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_DWORD *)(a1 + 2000) = 0;
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_DWORD *)(a1 + 2024) = 0;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_OWORD *)(a1 + 2156) = 0u;
  *(_OWORD *)(a1 + 2144) = 0u;
  *(_OWORD *)(a1 + 2128) = 0u;
  *(_OWORD *)(a1 + 2112) = 0u;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(_OWORD *)(a1 + 2032) = 0u;
  *(_QWORD *)(a1 + 2176) = a1 + 2192;
  *(_QWORD *)(a1 + 2184) = 0x800000000;
  *(_QWORD *)(a1 + 2320) = a1 + 2336;
  *(_QWORD *)(a1 + 2328) = 0x800000000;
  *(_QWORD *)(a1 + 2656) = a1 + 2672;
  *(_QWORD *)(a1 + 2664) = 0x800000000;
  *(_DWORD *)(a1 + 2816) = 0;
  *(_OWORD *)(a1 + 2800) = 0u;
  *(_QWORD *)(a1 + 2840) = 0;
  *(_OWORD *)(a1 + 2824) = 0u;
  *(_QWORD *)(a1 + 2848) = a1 + 2880;
  *(_QWORD *)(a1 + 2856) = a1 + 2880;
  *(_QWORD *)(a1 + 2864) = 16;
  *(_DWORD *)(a1 + 2872) = 0;
  *(_QWORD *)(a1 + 3008) = a1 + 3024;
  *(_QWORD *)(a1 + 3016) = 0x1000000000;
  *(_QWORD *)(a1 + 3152) = a1 + 3168;
  *(_QWORD *)(a1 + 3160) = 0x1000000000;
  *(_QWORD *)(a1 + 3296) = 6;
  *(_QWORD *)(a1 + 3448) = 0;
  *(_DWORD *)(a1 + 3456) = 0;
  *(_OWORD *)(a1 + 3332) = 0u;
  *(_OWORD *)(a1 + 3320) = 0u;
  *(_OWORD *)(a1 + 3304) = 0u;
  *(_DWORD *)(a1 + 3368) = 0;
  *(_OWORD *)(a1 + 3352) = 0u;
  *(_OWORD *)(a1 + 3424) = 0u;
  *(_OWORD *)(a1 + 3408) = 0u;
  *(_OWORD *)(a1 + 3392) = 0u;
  *(_OWORD *)(a1 + 3376) = 0u;
  *(_OWORD *)(a1 + 3464) = 0u;
  v22 = (_QWORD *)operator new();
  *v22 = a1;
  *(_QWORD *)(a1 + 3480) = v22;
  *(_OWORD *)(a1 + 3488) = 0u;
  *(_DWORD *)(a1 + 3504) = 0;
  *(_OWORD *)(a1 + 3512) = 0u;
  *(_OWORD *)(a1 + 3528) = 0u;
  *(_OWORD *)(a1 + 3544) = 0u;
  *(_OWORD *)(a1 + 3556) = 0u;
  *(_OWORD *)(a1 + 3576) = 0u;
  *(_DWORD *)(a1 + 3592) = 0;
  *(_OWORD *)(a1 + 3600) = 0u;
  *(_DWORD *)(a1 + 3616) = 0;
  *(_DWORD *)(a1 + 3640) = 0;
  *(_OWORD *)(a1 + 3624) = 0u;
  *(_OWORD *)(a1 + 3648) = 0u;
  *(_DWORD *)(a1 + 3664) = 0;
  *(_OWORD *)(a1 + 3672) = 0u;
  *(_OWORD *)(a1 + 3688) = 0u;
  *(_DWORD *)(a1 + 3704) = 0;
  *(_DWORD *)(a1 + 3708) = 16;
  *(_DWORD *)(a1 + 3736) = 0;
  *(_OWORD *)(a1 + 3720) = 0u;
  *(_OWORD *)(a1 + 3744) = 0u;
  *(_OWORD *)(a1 + 3760) = 0u;
  *(_OWORD *)(a1 + 3776) = 0u;
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 3792));
  *(_QWORD *)(a1 + 3824) = 0;
  *(_QWORD *)(a1 + 3816) = 0;
  *(_QWORD *)(a1 + 3808) = a1 + 3816;
  v23 = *a7;
  *(_QWORD *)a1 = llvm::Type::getVoidTy(*a7, v24);
  *(_QWORD *)(a1 + 8) = llvm::Type::getInt8Ty(v23, v25);
  *(_QWORD *)(a1 + 16) = llvm::Type::getInt16Ty(v23, v26);
  *(_QWORD *)(a1 + 24) = llvm::Type::getInt32Ty(v23, v27);
  *(_QWORD *)(a1 + 32) = llvm::Type::getInt64Ty(v23, v28);
  *(_QWORD *)(a1 + 40) = llvm::Type::getHalfTy(v23, v29);
  *(_QWORD *)(a1 + 48) = llvm::Type::getBFloatTy(v23, v30);
  *(_QWORD *)(a1 + 56) = llvm::Type::getFloatTy(v23, v31);
  *(_QWORD *)(a1 + 64) = llvm::Type::getDoubleTy(v23, v32);
  v33 = (_QWORD *)a2[1886];
  v34 = *v33;
  *(_BYTE *)(a1 + 129) = *((_BYTE *)v33 + *(_QWORD *)(*v33 - 24));
  v35 = *((unsigned __int8 *)v33 + *(_QWORD *)(v34 - 24) + 1);
  *(_BYTE *)(a1 + 130) = v35 / sub_22EF5CDF0((uint64_t)a2, *(_QWORD *)(a2[2051] & 0xFFFFFFFFFFFFFFF0));
  v36 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[1886] + 32))(a2[1886]);
  *(_BYTE *)(a1 + 131) = v36 / sub_22EF5CDF0((uint64_t)a2, *(_QWORD *)(a2[2051] & 0xFFFFFFFFFFFFFFF0));
  v37 = *(unsigned __int8 *)(a2[1886] + *(_QWORD *)(*(_QWORD *)a2[1886] - 24) + 5);
  *(_BYTE *)(a1 + 128) = v37 / sub_22EF5CDF0((uint64_t)a2, *(_QWORD *)(a2[2051] & 0xFFFFFFFFFFFFFFF0));
  *(_QWORD *)(a1 + 80) = llvm::IntegerType::get();
  *(_QWORD *)(a1 + 72) = llvm::IntegerType::get();
  (*(void (**)(_QWORD))(*(_QWORD *)a2[1886] + 32))(a2[1886]);
  *(_QWORD *)(a1 + 88) = llvm::IntegerType::get();
  *(_QWORD *)(a1 + 96) = llvm::PointerType::get();
  *(_QWORD *)(a1 + 104) = llvm::PointerType::get();
  llvm::Module::getDataLayout((llvm::Module *)a7);
  *(_QWORD *)(a1 + 112) = llvm::PointerType::get();
  *(_QWORD *)(a1 + 120) = llvm::PointerType::get();
  v38 = sub_22E699F3C((_QWORD *)a1);
  *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 208))(v38);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)(sub_22E699F3C((_QWORD *)a1) + 8) + 16);
  v39 = *(_QWORD *)(a1 + 152);
  if ((*(_BYTE *)(v39 + 1) & 0x40) != 0)
  {
    sub_22F298C2C((_QWORD *)a1);
    v39 = *(_QWORD *)(a1 + 152);
  }
  if ((*(_DWORD *)(v39 + 52) & 0x40000000) != 0)
  {
    sub_22F298C8C(a1);
    v39 = *(_QWORD *)(a1 + 152);
  }
  if ((*(_BYTE *)(v39 + 104) & 0x20) != 0)
  {
    sub_22F298D60(a1);
    v39 = *(_QWORD *)(a1 + 152);
  }
  if (*(_DWORD *)(v39 + 72))
  {
    sub_22F298E08((_QWORD *)a1);
    v39 = *(_QWORD *)(a1 + 152);
  }
  if ((*(_BYTE *)(v39 + 68) & 0x20) != 0)
  {
    v103 = sub_22F24C18C(a1);
    v104 = *(_QWORD *)(a1 + 816);
    *(_QWORD *)(a1 + 816) = v103;
    if (v104)
      (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 152) + 257) & 0x20) != 0
    || (v40 = *(_QWORD *)(a1 + 184), v41 = *(_QWORD *)(v40 + 32), (v41 & 0x80000) == 0) && (v41 & 0x1800) != 0)
  {
    v42 = operator new();
    v43 = *(uint64_t **)(a1 + 200);
    v40 = *(_QWORD *)(a1 + 184);
    v44 = *(_QWORD *)(a1 + 152);
    v45 = *(_QWORD *)(*(_QWORD *)(a1 + 224) + 16);
    *(_QWORD *)v42 = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(v42 + 8) = v43;
    *(_QWORD *)(v42 + 16) = v40;
    *(_QWORD *)(v42 + 24) = v44;
    *(_QWORD *)(v42 + 32) = v45;
    v46 = *v43;
    *(_QWORD *)(v42 + 48) = 0;
    *(_QWORD *)(v42 + 56) = 0;
    *(_QWORD *)(v42 + 40) = v46;
    *(_DWORD *)(v42 + 64) = 0;
    *(_QWORD *)(v42 + 72) = 0;
    *(_QWORD *)(v42 + 80) = 0;
    *(_DWORD *)(v42 + 88) = 0;
    *(_QWORD *)(v42 + 96) = 0;
    *(_QWORD *)(v42 + 104) = 0;
    *(_DWORD *)(v42 + 112) = 0;
    *(_QWORD *)(v42 + 120) = 0;
    *(_QWORD *)(v42 + 128) = 0;
    *(_DWORD *)(v42 + 136) = 0;
    *(_QWORD *)(v42 + 144) = 0;
    *(_QWORD *)(v42 + 152) = 0;
    v47 = *(_QWORD *)(a1 + 264);
    *(_QWORD *)(a1 + 264) = v42;
    if (v47)
    {
      v48 = sub_22E66AAD8(v47);
      MEMORY[0x2348A0E9C](v48, 0x1060C40808B2291);
      v40 = *(_QWORD *)(a1 + 184);
    }
  }
  if ((*(_QWORD *)(v40 + 96) & 0x1E00000000000000) != 0 || (*(_BYTE *)(v40 + 5) & 0x18) != 0)
  {
    v49 = (uint64_t *)operator new();
    sub_22E48E12C(v49, a1);
    v50 = *(_QWORD *)(a1 + 824);
    *(_QWORD *)(a1 + 824) = v49;
    if (v50)
    {
      v108 = sub_22F25446C(v50);
      MEMORY[0x2348A0E9C](v108, 0x10F0C4008546EBCLL);
    }
  }
  *(_DWORD *)(a1 + 3440) = 0;
  if ((*(_BYTE *)(a2[250] + 1) & 0x40) != 0)
  {
    v51 = operator new();
    *(_OWORD *)v51 = 0u;
    *(_OWORD *)(v51 + 16) = 0u;
    *(_OWORD *)(v51 + 32) = 0u;
    *(_OWORD *)(v51 + 48) = 0u;
    *(_OWORD *)(v51 + 64) = 0u;
    *(_OWORD *)(v51 + 80) = 0u;
    *(_OWORD *)(v51 + 96) = 0u;
    *(_OWORD *)(v51 + 112) = 0u;
    *(_OWORD *)(v51 + 128) = 0u;
    *(_OWORD *)(v51 + 144) = 0u;
    *(_OWORD *)(v51 + 160) = 0u;
    *(_OWORD *)(v51 + 176) = 0u;
    *(_OWORD *)(v51 + 192) = 0u;
    *(_OWORD *)(v51 + 208) = 0u;
    *(_OWORD *)(v51 + 224) = 0u;
    *(_OWORD *)(v51 + 240) = 0u;
    *(_OWORD *)(v51 + 256) = 0u;
    *(_OWORD *)(v51 + 272) = 0u;
    *(_OWORD *)(v51 + 288) = 0u;
    *(_OWORD *)(v51 + 304) = 0u;
    *(_OWORD *)(v51 + 320) = 0u;
    *(_OWORD *)(v51 + 336) = 0u;
    *(_OWORD *)(v51 + 352) = 0u;
    *(_QWORD *)(v51 + 368) = 0;
    v52 = *(_QWORD *)(a1 + 832);
    *(_QWORD *)(a1 + 832) = v51;
    if (v52)
      MEMORY[0x2348A0E9C](v52, 0x20C405E9339A3);
  }
  v53 = *(_QWORD *)(a1 + 184);
  if ((*(_QWORD *)(v53 + 96) & 0x600000000000) == 0x200000000000)
  {
    v131 = 260;
    v130.__r_.__value_.__r.__words[0] = v53 + 808;
    v133 = 260;
    *(_QWORD *)v132 = v53 + 832;
    llvm::IndexedInstrProfReader::create();
    v54 = v126;
    if ((v127 & 1) != 0)
    {
      v55 = 0;
      v126 = 0;
      if (v54)
      {
        v129 = 0;
        v129 = sub_22F41A810(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 32), 4, "Could not read profile %0: %1", 0x1DuLL);
        v130.__r_.__value_.__r.__words[0] = a1;
        v130.__r_.__value_.__l.__size_ = (std::string::size_type)&v129;
        if ((*(unsigned int (**)(_QWORD *, _QWORD))(*v54 + 48))(v54, MEMORY[0x24BED7780]))
        {
          v109 = (uint64_t *)v54[1];
          v110 = (uint64_t *)v54[2];
          if (v109 == v110)
          {
            v111 = 0;
          }
          else
          {
            v111 = 0;
            do
            {
              v119[0] = v111;
              v112 = *v109;
              *v109 = 0;
              *(_QWORD *)&v121 = v112;
              sub_22E63B62C(&__str, &v121, &v130);
              sub_22F2436E4(v119, &__str.__r_.__value_.__l.__data_, v132);
              v111 = *(char **)v132;
              *(_QWORD *)v132 = 0;
              if (__str.__r_.__value_.__r.__words[0])
                (*(void (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 8))(__str.__r_.__value_.__r.__words[0]);
              v113 = v121;
              *(_QWORD *)&v121 = 0;
              if (v113)
                (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
              if (v119[0])
                (*(void (**)(char *))(*(_QWORD *)v119[0] + 8))(v119[0]);
              ++v109;
            }
            while (v109 != v110);
          }
          __p[0] = v111;
        }
        else
        {
          *(_QWORD *)v132 = v54;
          sub_22E63B62C(__p, v132, &v130);
          v54 = *(_QWORD **)v132;
          if (!*(_QWORD *)v132)
          {
LABEL_39:
            v58 = v126;
            v126 = 0;
            if (v58)
              (*(void (**)(void *))(*(_QWORD *)v58 + 8))(v58);
            goto LABEL_41;
          }
        }
        v57 = *(void (**)(void))(*v54 + 8);
LABEL_38:
        v57();
        goto LABEL_39;
      }
    }
    else
    {
      v55 = v126;
    }
    v126 = 0;
    v56 = *(_QWORD *)(a1 + 848);
    *(_QWORD *)(a1 + 848) = v55;
    if (!v56)
    {
LABEL_41:
      v53 = *(_QWORD *)(a1 + 184);
      goto LABEL_42;
    }
    v57 = *(void (**)(void))(*(_QWORD *)v56 + 8);
    goto LABEL_38;
  }
LABEL_42:
  if ((*(_BYTE *)(v53 + 34) & 1) != 0)
  {
    v105 = (_QWORD *)operator new();
    sub_22F29FCEC(v105, a1, a9);
    v106 = *(_QWORD *)(a1 + 3536);
    *(_QWORD *)(a1 + 3536) = v105;
    if (v106)
    {
      v107 = sub_22F29D044(v106);
      MEMORY[0x2348A0E9C](v107, 0x10A0C405F21A976);
    }
  }
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 92) & 0x400) != 0)
  {
    v59 = (_QWORD *)operator new();
    *v59 = a1;
    v59[1] = a10;
    v60 = *(_QWORD *)(a1 + 3544);
    *(_QWORD *)(a1 + 3544) = v59;
    if (v60)
      MEMORY[0x2348A0E9C](v60, 0x20C40A4A59CD2);
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 184) + 31) & 0x80) != 0)
  {
    v61 = *(_QWORD *)(a1 + 200);
    if (*(char *)(v61 + 215) < 0)
    {
      v62 = *(_QWORD *)(v61 + 200);
      if (!v62)
        return a1;
      sub_22E3BB2B4(&__str, *(void **)(v61 + 192), v62);
    }
    else
    {
      if (!*(_BYTE *)(v61 + 215))
        return a1;
      __str = *(std::string *)(v61 + 192);
    }
    v63 = *(_QWORD *)(a1 + 152);
    v64 = *(_QWORD **)(v63 + 600);
    v65 = (_QWORD *)(v63 + 608);
    if (v64 != v65)
    {
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __str.__r_.__value_.__l.__size_;
      while (1)
      {
        v68 = *((_BYTE *)v64 + 55);
        if (v68 >= 0)
          v69 = (unsigned __int8 *)(v64 + 4);
        else
          v69 = (unsigned __int8 *)v64[4];
        v70 = v68 & 0x7F;
        if (v68 < 0)
          v70 = v64[5];
        v71 = size >= v70 ? v70 : size;
        v72 = (unsigned __int8 *)p_str + v71;
        v73 = !v70 || v71 == 0;
        if (v73)
        {
          v79 = (std::string *)((char *)p_str + v71);
        }
        else
        {
          v78 = p_str;
          v79 = (std::string *)((char *)p_str + v71);
          do
          {
            if (v78->__r_.__value_.__s.__data_[0] == *v69)
            {
              v80 = 1;
              while (v70 != v80)
              {
                v81 = (unsigned __int8 *)v78 + v80;
                if ((unsigned __int8 *)((char *)v78 + v80) == v72)
                  goto LABEL_72;
                v82 = v69[v80++];
                if (*v81 != v82)
                  goto LABEL_88;
              }
              v79 = v78;
            }
LABEL_88:
            v78 = (std::string *)((char *)v78 + 1);
          }
          while (v78 != (std::string *)v72);
        }
LABEL_72:
        v74 = v79 != (std::string *)v72 || v70 == 0;
        if (v74 && (char *)v79 - (char *)p_str != -1)
          break;
        v76 = (_QWORD *)v64[1];
        if (v76)
        {
          do
          {
            v77 = v76;
            v76 = (_QWORD *)*v76;
          }
          while (v76);
        }
        else
        {
          do
          {
            v77 = (_QWORD *)v64[2];
            v73 = *v77 == (_QWORD)v64;
            v64 = v77;
          }
          while (!v73);
        }
        v64 = v77;
        if (v77 == v65)
          goto LABEL_109;
      }
      if (v68 >= 0)
        v83 = *((unsigned __int8 *)v64 + 55);
      else
        v83 = v64[5];
      std::string::basic_string(&v130, &__str, v83, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v132);
      v86 = (const std::string::value_type *)v64[7];
      v85 = v64 + 7;
      v84 = v86;
      v87 = *((_BYTE *)v85 + 23);
      v88 = v87;
      if (v87 >= 0)
        v89 = (const std::string::value_type *)v85;
      else
        v89 = v84;
      v90 = v87 & 0x7F;
      if (v88 >= 0)
        v91 = v90;
      else
        v91 = v85[1];
      v92 = std::string::insert(&v130, 0, v89, v91);
      v93 = v92->__r_.__value_.__r.__words[0];
      *(_QWORD *)v132 = v92->__r_.__value_.__l.__size_;
      *(_QWORD *)&v132[7] = *(std::string::size_type *)((char *)&v92->__r_.__value_.__r.__words[1] + 7);
      v94 = HIBYTE(v92->__r_.__value_.__r.__words[2]);
      v92->__r_.__value_.__l.__size_ = 0;
      v92->__r_.__value_.__r.__words[2] = 0;
      v92->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str.__r_.__value_.__r.__words[0] = v93;
      __str.__r_.__value_.__l.__size_ = *(_QWORD *)v132;
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v132[7];
      *((_BYTE *)&__str.__r_.__value_.__s + 23) = v94;
      if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v130.__r_.__value_.__l.__data_);
    }
LABEL_109:
    llvm::MD5::MD5((llvm::MD5 *)&v130);
    llvm::MD5::update();
    llvm::MD5::final();
    v126 = v128;
    v127 = xmmword_22F44E330;
    llvm::MD5::stringifyResult();
    llvm::APInt::APInt();
    v119[0] = ".__uniq.";
    v120 = 259;
    *(_QWORD *)v132 = &v132[24];
    *(_OWORD *)&v132[8] = xmmword_22F455490;
    llvm::APInt::toString();
    v95 = *(void **)&v132[8];
    if (*(_QWORD *)&v132[8] >= 0x7FFFFFFFFFFFFFF8uLL)
      abort();
    v96 = *(const void **)v132;
    if (*(_QWORD *)&v132[8] >= 0x17uLL)
    {
      v98 = (*(_QWORD *)&v132[8] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((*(_QWORD *)&v132[8] | 7) != 0x17)
        v98 = *(_QWORD *)&v132[8] | 7;
      v99 = v98 + 1;
      v97 = operator new(v98 + 1);
      __p[1] = v95;
      v115 = v99 | 0x8000000000000000;
      __p[0] = v97;
    }
    else
    {
      HIBYTE(v115) = v132[8];
      v97 = __p;
      if (!*(_QWORD *)&v132[8])
        goto LABEL_117;
    }
    memmove(v97, v96, (size_t)v95);
LABEL_117:
    *((_BYTE *)v95 + (_QWORD)v97) = 0;
    if (*(_BYTE **)v132 != &v132[24])
      free(*(void **)v132);
    v100 = v120;
    if (v120 == 1)
    {
      *(_QWORD *)v132 = __p;
      *(_OWORD *)&v132[16] = v118;
      v133 = 260;
      v134 = v116;
      v135 = v117;
    }
    else if ((_BYTE)v120)
    {
      if (HIBYTE(v120) != 1)
        v100 = 2;
      v101 = v119;
      if (HIBYTE(v120) == 1)
        v101 = (char **)v119[0];
      *(_QWORD *)v132 = v101;
      *(char **)&v132[8] = v119[1];
      *(_QWORD *)&v132[16] = __p;
      LOBYTE(v133) = v100;
      HIBYTE(v133) = 4;
    }
    else
    {
      v133 = 256;
    }
    llvm::Twine::str((llvm::Twine *)v132);
    if (*(char *)(a1 + 263) < 0)
      operator delete(*v21);
    *(_OWORD *)v21 = v121;
    *(_QWORD *)(a1 + 256) = v122;
    HIBYTE(v122) = 0;
    LOBYTE(v121) = 0;
    if (SHIBYTE(v115) < 0)
      operator delete(__p[0]);
    if (v124 >= 0x41 && v123)
      MEMORY[0x2348A0E84](v123, 0x1000C8000313F17);
    if (v126 != v128)
      free(v126);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  return a1;
}

uint64_t sub_22E623CA4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t result;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v7;
  const char *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  llvm::Value *v12;
  uint64_t v13;
  llvm::Type *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  const llvm::DataLayout *DataLayout;
  llvm::LLVMContext *v40;
  llvm::ValueHandleBase *v41;
  uint64_t v42;
  _OWORD v43[8];
  uint64_t v44;
  _OWORD v45[8];
  uint64_t v46;
  unint64_t v47;
  _QWORD v48[5];
  llvm::Value *v49;
  void *v50[2];
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  llvm::Type *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[2];
  const char *v61;
  uint64_t v62;
  __int16 v63;
  _QWORD *v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  llvm::Value *v70;
  uint64_t v71;
  uint64_t v72;

  v0 = MEMORY[0x24BDAC7A8]();
  v72 = *MEMORY[0x24BDAC8D0];
  v47 = v1;
  result = sub_22F294508(v0 + 3720, &v47, (uint64_t)v60);
  if ((_BYTE)v61)
  {
    v3 = *(uint64_t **)(v0 + 824);
    (*(void (**)(_OWORD *__return_ptr, _QWORD, unint64_t))(**(_QWORD **)(v0 + 800) + 64))(v45, *(_QWORD *)(v0 + 800), v47);
    v4 = llvm::FunctionType::get();
    v5 = *(_QWORD *)(v47 + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(v47 + 40) & 7) != 0 || v5 == 0)
    {
      v9 = 0;
      v8 = "";
    }
    else
    {
      v7 = *(_DWORD **)(v5 + 16);
      v10 = *v7;
      v8 = (const char *)(v7 + 4);
      v9 = v10;
    }
    v63 = 1283;
    v60[0] = "tracepoint.init_";
    v61 = v8;
    v62 = v9;
    v11 = *(_QWORD *)(v0 + 200);
    v12 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
    MEMORY[0x23489F6FC](v12, v4, 7, 0xFFFFFFFFLL, v60, v11);
    v60[0] = "entry";
    v63 = 259;
    v13 = operator new();
    llvm::BasicBlock::BasicBlock();
    sub_22E618EBC((uint64_t)v60, v0, 0);
    v70 = v12;
    v67 = v13;
    v68 = v13 + 40;
    v14 = *(llvm::Type **)(v0 + 24);
    LOWORD(v53) = 257;
    v71 = sub_22E3E4D88((uint64_t)&v65, v14, 0, (uint64_t)v50);
    sub_22E49A954((uint64_t)v3, 0, 0, *(_DWORD *)(v47 + 24), *(_DWORD *)(v47 + 24), 0, v12, 0);
    if (v46)
    {
      v46 = 0;
      v15 = (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(v0 + 800) + 128))(*(_QWORD *)(v0 + 800), v60);
      v50[0] = "fcp.guarded";
      LOWORD(v53) = 259;
      v16 = operator new();
      llvm::BasicBlock::BasicBlock();
      v50[0] = "fcp.guarded.cont";
      LOWORD(v53) = 259;
      v13 = operator new();
      llvm::BasicBlock::BasicBlock();
      v17 = llvm::User::operator new((llvm::User *)0x40);
      MEMORY[0x23489C09C](v17, v16, v13, v15, 0);
      LOWORD(v53) = 257;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v69 + 16))(v69, v17, v50, v67, v68);
      if (v66)
      {
        v18 = v65;
        v19 = v65 + 16 * v66;
        do
        {
          llvm::Instruction::setMetadata();
          v18 += 16;
        }
        while (v18 != v19);
      }
      v20 = llvm::User::operator new((llvm::User *)0x40);
      v21 = MEMORY[0x23489C090](v20, v13, v16);
      v67 = *(_QWORD *)(v21 + 40);
      v68 = v21 + 24;
      v50[0] = *(void **)(v21 + 48);
      if (v50[0])
      {
        llvm::MetadataTracking::track();
        v22 = v50[0];
      }
      else
      {
        v22 = 0;
      }
      sub_22E3CF21C((uint64_t)&v65, 0, (uint64_t)v22);
      if (v50[0])
        llvm::MetadataTracking::untrack();
    }
    v46 = 0;
    v23 = *(_QWORD *)(v0 + 800);
    v43[2] = v45[2];
    v43[3] = v45[3];
    v43[0] = v45[0];
    v43[1] = v45[1];
    v44 = 0;
    v43[6] = v45[6];
    v43[7] = v45[7];
    v43[4] = v45[4];
    v43[5] = v45[5];
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD *, _OWORD *))(*(_QWORD *)v23 + 72))(v50, v23, v60, v43);
    v24 = v50[0];
    v25 = *(_QWORD *)(v47 + 48);
    v50[0] = "tmp";
    LOWORD(v53) = 259;
    v26 = sub_22F25E4D4((uint64_t)v60, v25, (uint64_t)v50, 0);
    v28 = 0;
    v29 = (uint64_t *)(v26 & 0xFFFFFFFFFFFFFFF8);
    if (v26 <= 7)
      v30 = 0;
    else
      v30 = (void *)(v26 & 0xFFFFFFFFFFFFFFF8);
    v31 = (void *)(v27 & 0xFFFFFFFFFFFFFFF8);
    if (v26 <= 7)
      v31 = 0;
    if (v26 >= 8)
      v28 = 1 << (v27 & 7 | (8 * (v26 & 7)));
    v32 = *(_QWORD *)(v47 + 48);
    v50[0] = v30;
    v50[1] = v31;
    v51 = v28;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v33 = sub_22E6281E0(v64, v32, (uint64_t)v48);
    sub_22E4E8134(v60, v24, v50, 0, v32, 2, v48, 0, v33, 0);
    v34 = sub_22F25E214(v60, v29);
    v67 = v13;
    v68 = v13 + 40;
    sub_22E3CF118(&v65);
    sub_22F256A70(v3, (uint64_t)&v65, v12);
    MEMORY[0x23489D440](v50, v12);
    v35 = 0;
    v36 = *(_QWORD *)(v34 + 32);
    if (v36)
      v37 = v36 == *(_QWORD *)(v34 + 40) + 40;
    else
      v37 = 1;
    if (v37)
      v38 = 0;
    else
      v38 = v36 - 24;
    v55 = *(_QWORD *)(v38 + 40);
    v56 = v38 + 24;
    v48[0] = *(_QWORD *)(v38 + 48);
    if (v48[0])
    {
      llvm::MetadataTracking::track();
      v35 = v48[0];
    }
    sub_22E3CF21C((uint64_t)v50, 0, v35);
    if (v48[0])
      llvm::MetadataTracking::untrack();
    sub_22F257430(v3, v47);
    llvm::TracepointBuilder::CreateGlobalVariableTracepoint();
    DataLayout = (const llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(v0 + 200));
    llvm::AllocaInst::getAllocationSizeInBits((llvm::AllocaInst *)v29, DataLayout);
    llvm::TypeSize::operator unsigned long long();
    llvm::Type::getInt32Ty(v57, v40);
    llvm::ConstantInt::get();
    llvm::TracepointBuilder::CreateDataTracepoint();
    v49 = v12;
    v41 = *(llvm::ValueHandleBase **)(v0 + 1448);
    if ((unint64_t)v41 >= *(_QWORD *)(v0 + 1456))
    {
      v42 = sub_22E63DF64((uint64_t *)(v0 + 1440), (uint64_t *)&v49);
    }
    else
    {
      *(_QWORD *)v41 = 6;
      *((_QWORD *)v41 + 1) = 0;
      *((_QWORD *)v41 + 2) = v12;
      if (v12 != (llvm::Value *)-8192 && v12 != (llvm::Value *)-4096 && v12)
        llvm::ValueHandleBase::AddToUseList(v41);
      v42 = (uint64_t)v41 + 24;
    }
    *(_QWORD *)(v0 + 1448) = v42;
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v59);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v58);
    if (v50[0] != &v51)
      free(v50[0]);
    return sub_22E619434((uint64_t)v60);
  }
  return result;
}

uint64_t sub_22E6242E0(uint64_t *a1, uint64_t a2)
{
  llvm::ValueHandleBase *v3;
  uint64_t result;
  uint64_t v5;

  v5 = a2;
  v3 = (llvm::ValueHandleBase *)a1[181];
  if ((unint64_t)v3 >= a1[182])
  {
    result = sub_22E63DF64(a1 + 180, &v5);
  }
  else
  {
    *(_QWORD *)v3 = 6;
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = a2;
    if (a2 != -8192 && a2 != -4096 && a2)
      llvm::ValueHandleBase::AddToUseList(v3);
    result = (uint64_t)v3 + 24;
  }
  a1[181] = result;
  return result;
}

uint64_t sub_22E624358(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  void **v47;

  sub_22E5DFCD8(a1);
  sub_22F29CFA4(*(_QWORD **)(a1 + 3816));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 3792));
  llvm::deallocate_buffer(*(llvm **)(a1 + 3720), (void *)(8 * *(unsigned int *)(a1 + 3736)));
  sub_22F275768(a1 + 3688);
  v2 = *(_QWORD *)(a1 + 3680);
  *(_QWORD *)(a1 + 3680) = 0;
  if (v2)
  {
    v3 = sub_22F29CF3C(v2);
    MEMORY[0x2348A0E9C](v3, 0x10A0C40ABD8F407);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 3648), (void *)(16 * *(unsigned int *)(a1 + 3664)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 3624), (void *)(24 * *(unsigned int *)(a1 + 3640)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 3600), (void *)(16 * *(unsigned int *)(a1 + 3616)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 3576), (void *)(16 * *(unsigned int *)(a1 + 3592)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 3552), (void *)(16 * *(unsigned int *)(a1 + 3568)));
  v4 = *(_QWORD *)(a1 + 3544);
  *(_QWORD *)(a1 + 3544) = 0;
  if (v4)
    MEMORY[0x2348A0E9C](v4, 0x20C40A4A59CD2);
  v5 = *(_QWORD *)(a1 + 3536);
  *(_QWORD *)(a1 + 3536) = 0;
  if (v5)
  {
    v6 = sub_22F29D044(v5);
    MEMORY[0x2348A0E9C](v6, 0x10A0C405F21A976);
  }
  sub_22F271570(a1 + 3488);
  v7 = *(_QWORD *)(a1 + 3480);
  *(_QWORD *)(a1 + 3480) = 0;
  if (v7)
    MEMORY[0x2348A0E9C](v7, 0x20C4093837F09);
  llvm::deallocate_buffer(*(llvm **)(a1 + 3352), (void *)(16 * *(unsigned int *)(a1 + 3368)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 3328), (void *)(16 * *(unsigned int *)(a1 + 3344)));
  v8 = *(_QWORD *)(a1 + 3312);
  if (v8 != -8192 && v8 != -4096 && v8)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 3296));
  v9 = *(void **)(a1 + 3152);
  if (v9 != (void *)(a1 + 3168))
    free(v9);
  v10 = *(void **)(a1 + 3008);
  if (v10 != (void *)(a1 + 3024))
    free(v10);
  v11 = *(void **)(a1 + 2856);
  if (v11 != *(void **)(a1 + 2848))
    free(v11);
  sub_22F257CF8(a1 + 2800);
  v12 = *(void **)(a1 + 2656);
  if (v12 != (void *)(a1 + 2672))
    free(v12);
  sub_22F25C174((void **)(a1 + 2320));
  v13 = *(void **)(a1 + 2176);
  if (v13 != (void *)(a1 + 2192))
    free(v13);
  llvm::deallocate_buffer(*(llvm **)(a1 + 2152), (void *)(16 * *(unsigned int *)(a1 + 2168)));
  v14 = *(void **)(a1 + 2128);
  if (v14)
  {
    *(_QWORD *)(a1 + 2136) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 2104);
  if (v15)
  {
    *(_QWORD *)(a1 + 2112) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 2080);
  if (v16)
  {
    *(_QWORD *)(a1 + 2088) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 2056);
  if (v17)
  {
    *(_QWORD *)(a1 + 2064) = v17;
    operator delete(v17);
  }
  sub_22F271570(a1 + 2008);
  llvm::deallocate_buffer(*(llvm **)(a1 + 1984), (void *)(16 * *(unsigned int *)(a1 + 2000)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1960), (void *)(16 * *(unsigned int *)(a1 + 1976)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1936), (void *)(16 * *(unsigned int *)(a1 + 1952)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1912), (void *)(16 * *(unsigned int *)(a1 + 1928)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1888), (void *)(16 * *(unsigned int *)(a1 + 1904)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1864), (void *)(16 * *(unsigned int *)(a1 + 1880)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1840), (void *)(16 * *(unsigned int *)(a1 + 1856)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1816), (void *)(16 * *(unsigned int *)(a1 + 1832)));
  sub_22F275768(a1 + 1784);
  llvm::deallocate_buffer(*(llvm **)(a1 + 1760), (void *)(16 * *(unsigned int *)(a1 + 1776)));
  sub_22F275768(a1 + 1728);
  v18 = *(void **)(a1 + 1680);
  if (v18)
  {
    *(_QWORD *)(a1 + 1688) = v18;
    operator delete(v18);
  }
  free(*(void **)(a1 + 1560));
  sub_22E3B4EF4(a1 + 1584);
  sub_22E637A14(a1 + 1512);
  v19 = *(void **)(a1 + 1488);
  if (v19)
  {
    *(_QWORD *)(a1 + 1496) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 1464);
  if (v20)
  {
    *(_QWORD *)(a1 + 1472) = v20;
    operator delete(v20);
  }
  v47 = (void **)(a1 + 1440);
  sub_22E63B4DC(&v47);
  v47 = (void **)(a1 + 1416);
  sub_22E63B4DC(&v47);
  v21 = *(void **)(a1 + 1392);
  if (v21)
  {
    *(_QWORD *)(a1 + 1400) = v21;
    operator delete(v21);
  }
  v22 = *(void **)(a1 + 1368);
  if (v22)
  {
    *(_QWORD *)(a1 + 1376) = v22;
    operator delete(v22);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 1344), (void *)(16 * *(unsigned int *)(a1 + 1360)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1320), (void *)(16 * *(unsigned int *)(a1 + 1336)));
  v23 = *(void **)(a1 + 1176);
  if (v23 != (void *)(a1 + 1192))
    free(v23);
  sub_22F29CEC8(a1 + 1144);
  v24 = *(void **)(a1 + 1120);
  if (v24)
  {
    *(_QWORD *)(a1 + 1128) = v24;
    operator delete(v24);
  }
  v25 = *(void **)(a1 + 1096);
  if (v25)
  {
    *(_QWORD *)(a1 + 1104) = v25;
    operator delete(v25);
  }
  v26 = *(void **)(a1 + 1072);
  if (v26)
  {
    *(_QWORD *)(a1 + 1080) = v26;
    operator delete(v26);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 1048), (void *)(32 * *(unsigned int *)(a1 + 1064)));
  v27 = *(void **)(a1 + 896);
  if (v27 != *(void **)(a1 + 888))
    free(v27);
  v28 = *(_QWORD *)(a1 + 880);
  *(_QWORD *)(a1 + 880) = 0;
  if (v28)
    sub_22E63B49C(v28);
  v29 = *(_QWORD *)(a1 + 848);
  *(_QWORD *)(a1 + 848) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = *(_QWORD *)(a1 + 832);
  *(_QWORD *)(a1 + 832) = 0;
  if (v30)
    MEMORY[0x2348A0E9C](v30, 0x20C405E9339A3);
  v31 = *(_QWORD *)(a1 + 824);
  *(_QWORD *)(a1 + 824) = 0;
  if (v31)
  {
    v32 = sub_22F25446C(v31);
    MEMORY[0x2348A0E9C](v32, 0x10F0C4008546EBCLL);
  }
  v33 = *(_QWORD *)(a1 + 816);
  *(_QWORD *)(a1 + 816) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = *(_QWORD *)(a1 + 808);
  *(_QWORD *)(a1 + 808) = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 56))(v34);
  v35 = *(_QWORD *)(a1 + 800);
  *(_QWORD *)(a1 + 800) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = *(_QWORD *)(a1 + 792);
  *(_QWORD *)(a1 + 792) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
  v37 = *(_QWORD *)(a1 + 784);
  *(_QWORD *)(a1 + 784) = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  sub_22F29CAA0(a1 + 704);
  sub_22E66C360(a1 + 280);
  v38 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  if (v39)
  {
    v40 = sub_22E66AAD8(v39);
    MEMORY[0x2348A0E9C](v40, 0x1060C40808B2291);
  }
  if (*(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  v41 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 32))(v41);
  v42 = *(unsigned int **)(a1 + 160);
  if (v42)
  {
    v43 = v42 + 2;
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
      (*(void (**)(unsigned int *))(*(_QWORD *)v42 + 8))(v42);
  }
  return a1;
}

uint64_t sub_22E62492C()
{
  return llvm::Module::getNamedValue();
}

BOOL sub_22E624934(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 366)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

_QWORD *sub_22E624994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  void **v15;
  size_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  void *__p[2];
  uint64_t v23;
  __int128 v24;
  void **v25;
  size_t v26;
  __int128 v27;
  void *v28[2];
  uint64_t v29;
  __int128 v30;

  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF8) + 32))(a2 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)&v30 = v7 | a2 & 7;
  *((_QWORD *)&v30 + 1) = a3;
  if (v7
    && (*(_DWORD *)(v7 + 28) & 0x7F) == 0x37
    && (a2 & 7) == 1
    && *(_DWORD *)(*(_QWORD *)(a1 + 216) + 148) >= 0xBu)
  {
    *(_QWORD *)&v30 = v7;
    DWORD2(v30) = 0;
  }
  if ((*(_WORD *)(*(_QWORD *)(a1 + 152) + 96) & 0x80) != 0 && (sub_22EF74CB8(*(_QWORD *)(a1 + 144), v6) & 1) != 0)
    goto LABEL_13;
  __p[0] = 0;
  v8 = sub_22E63B934(*(_QWORD *)(a1 + 1512), *(_DWORD *)(a1 + 1528), (uint64_t *)&v30, __p);
  v9 = (unsigned int *)__p[0];
  v10 = *(_QWORD *)(a1 + 1512);
  v11 = *(_DWORD *)(a1 + 1528);
  if ((v8 & 1) == 0)
    v9 = (unsigned int *)(v10 + 24 * v11);
  if (v9 != (unsigned int *)(v10 + 24 * v11))
  {
    v12 = *(_QWORD *)(a1 + 1536) + 32 * v9[4];
    if (*(_QWORD *)(a1 + 1544) != v12)
      return *(_QWORD **)(v12 + 16);
  }
LABEL_13:
  sub_22E6290C8(v28, a1, a2, a3, v6, 0);
  v14 = SHIBYTE(v29);
  if (SHIBYTE(v29) < 0)
  {
    sub_22E3BB2B4(__p, v28[0], (unint64_t)v28[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v28;
    v23 = v29;
  }
  *(_QWORD *)&v24 = a2;
  *((_QWORD *)&v24 + 1) = a3;
  if (v23 >= 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if (v23 >= 0)
    v16 = HIBYTE(v23) & 0x7F;
  else
    v16 = (size_t)__p[1];
  v25 = v15;
  v26 = v16;
  v27 = v24;
  v17 = sub_22E63B828((llvm::StringMapImpl *)(a1 + 1560), v15, v16, &v27);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  v18 = (uint64_t *)*v17;
  v19 = *v18;
  v13 = v18 + 3;
  v20 = (_QWORD *)sub_22E629AD4(a1 + 1512, &v30);
  *v20 = v13;
  v20[1] = v19;
  if (v14 < 0)
    operator delete(v28[0]);
  return v13;
}

void sub_22E624B74()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  llvm::GlobalValue **v3;
  llvm::GlobalValue **v4;
  llvm::GlobalValue *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  llvm::Value *v30;
  llvm::Value *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  _BYTE *v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char v46;
  int v47;
  size_t v48;
  size_t v49;
  int v50;
  char *v51;
  size_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t NamedValue;
  llvm::GlobalValue *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  BOOL v77;
  BOOL v78;
  uint64_t v79;
  void **v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  int v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  llvm::Constant **v90;
  uint64_t v91;
  llvm::Constant *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t Name;
  uint64_t v98;
  unsigned int *v99;
  unsigned int **v100;
  uint64_t v101;
  unsigned int ***v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  _QWORD *v107;
  uint64_t *v108;
  char v109;
  uint64_t v110;
  unint64_t v111;
  _BOOL4 v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  BOOL v116;
  unsigned __int8 *v117;
  BOOL v118;
  uint64_t AliaseeObject;
  BOOL v120;
  uint64_t v121;
  uint64_t *v122;
  BOOL v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  size_t v132;
  const void *Section;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  BOOL v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  size_t v148;
  void *v149;
  size_t v150;
  unsigned __int8 *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t PointerBitCastOrAddrSpaceCast;
  uint64_t v155;
  uint64_t **v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned __int8 *v161;
  _BOOL8 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned __int8 *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void **v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned __int8 *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  llvm::GlobalValue *v187;
  _BYTE *v188;
  _BYTE *v189;
  uint64_t v190;
  _BYTE *v191;
  unint64_t v192;
  unint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  llvm::LLVMContext *v203;
  char **v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t *v212;
  uint64_t v213;
  unint64_t *v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  uint64_t v222;
  void *v223;
  llvm::SanitizerStatReport *v224;
  const void **v225;
  const void **v226;
  const void *v227;
  const void **v228;
  const void **v229;
  char v230;
  const void *v231;
  size_t v232;
  uint64_t v233;
  char v234;
  const void *v235;
  uint64_t v236;
  char v237;
  uint64_t v238;
  unsigned int v239;
  _QWORD *v240;
  const void **v241;
  const void **v242;
  char v243;
  char v244;
  const void *v245;
  uint64_t v246;
  const void **v247;
  const void **v248;
  const void *v249;
  char v250;
  _BYTE *v251;
  uint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  llvm::LLVMContext *v267;
  unsigned int v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int *v277;
  int v280;
  int v281;
  int v283;
  int v284;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  int v298;
  int v299;
  unsigned int v300;
  int v301;
  int v302;
  llvm::GlobalValue *v303;
  int v304;
  llvm::GlobalValue *v305;
  unsigned int v306;
  int isDeclaration;
  int v308;
  unsigned int v309;
  char hasExternalWeakLinkage;
  char v311;
  void *v312;
  void *__p;
  void *__pa[2];
  uint64_t *v315;
  unint64_t v316;
  int64x2_t v317;
  unint64_t v318;
  int64x2_t v319;
  uint64_t v320;
  int64x2_t v321;
  _QWORD v322[2];
  int v323;
  const void **v324;
  const void **v325;
  uint64_t v326;
  _BYTE v327[72];
  _BYTE __b[6144];
  void *__src;
  uint64_t v330;
  _BYTE v331[128];
  void *v332[2];
  int64x2_t v333;
  int64x2_t v334;
  int64x2_t v335;
  uint64_t v336;

  v1 = MEMORY[0x24BDAC7A8]();
  v336 = *MEMORY[0x24BDAC8D0];
  sub_22E62766C(v1);
  sub_22F299054(v1);
  v2 = *(unsigned int *)(v1 + 1184);
  if ((_DWORD)v2)
  {
    v3 = *(llvm::GlobalValue ***)(v1 + 1176);
    v4 = &v3[2 * v2];
    do
    {
      v5 = *v3;
      v3 += 2;
      llvm::Value::replaceAllUsesWith();
      llvm::GlobalValue::eraseFromParent(v5);
    }
    while (v3 != v4);
  }
  sub_22F298EE8(v1);
  sub_22E627814();
  sub_22E4D0AF4();
  sub_22E4D1710();
  sub_22E67A744();
  sub_22F25B94C(v1);
  v6 = *(_QWORD *)(v1 + 784);
  if (v6)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD **)(v1 + 1472);
      v10 = *(_QWORD *)(v1 + 1480);
      if ((unint64_t)v9 >= v10)
      {
        v12 = *(_QWORD **)(v1 + 1464);
        v13 = 0xAAAAAAAAAAAAAAABLL * (v9 - v12) + 1;
        if (v13 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_615;
        v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v12) >> 3);
        if (2 * v14 > v13)
          v13 = 2 * v14;
        if (v14 >= 0x555555555555555)
          v0 = 0xAAAAAAAAAAAAAAALL;
        else
          v0 = v13;
        if (v0)
        {
          if (v0 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_616;
          v15 = (char *)operator new(24 * v0);
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[8 * (v9 - v12)];
        *(_DWORD *)v16 = 0xFFFF;
        *((_QWORD *)v16 + 1) = v8;
        *((_QWORD *)v16 + 2) = 0;
        v11 = v16 + 24;
        if (v9 != v12)
        {
          do
          {
            v17 = *(_OWORD *)(v9 - 3);
            *((_QWORD *)v16 - 1) = *(v9 - 1);
            *(_OWORD *)(v16 - 24) = v17;
            v16 -= 24;
            v9 -= 3;
          }
          while (v9 != v12);
          v9 = *(_QWORD **)(v1 + 1464);
        }
        *(_QWORD *)(v1 + 1464) = v16;
        *(_QWORD *)(v1 + 1472) = v11;
        *(_QWORD *)(v1 + 1480) = &v15[24 * v0];
        if (v9)
          operator delete(v9);
      }
      else
      {
        *(_DWORD *)v9 = 0xFFFF;
        v9[1] = v7;
        v9[2] = 0;
        v11 = v9 + 3;
      }
      *(_QWORD *)(v1 + 1472) = v11;
    }
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 144) + 2000) + 68) & 0x20) != 0)
  {
    v18 = *(_QWORD *)(v1 + 816);
    if (v18)
    {
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
      if (v19)
      {
        v20 = v19;
        v21 = *(_QWORD **)(v1 + 1472);
        v22 = *(_QWORD *)(v1 + 1480);
        if ((unint64_t)v21 >= v22)
        {
          v24 = *(_QWORD **)(v1 + 1464);
          v25 = 0xAAAAAAAAAAAAAAABLL * (v21 - v24) + 1;
          if (v25 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_615;
          v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (_QWORD)v24) >> 3);
          if (2 * v26 > v25)
            v25 = 2 * v26;
          if (v26 >= 0x555555555555555)
            v0 = 0xAAAAAAAAAAAAAAALL;
          else
            v0 = v25;
          if (v0)
          {
            if (v0 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_616;
            v27 = (char *)operator new(24 * v0);
          }
          else
          {
            v27 = 0;
          }
          v28 = &v27[8 * (v21 - v24)];
          *(_DWORD *)v28 = 0xFFFF;
          *((_QWORD *)v28 + 1) = v20;
          *((_QWORD *)v28 + 2) = 0;
          v23 = v28 + 24;
          if (v21 != v24)
          {
            do
            {
              v29 = *(_OWORD *)(v21 - 3);
              *((_QWORD *)v28 - 1) = *(v21 - 1);
              *(_OWORD *)(v28 - 24) = v29;
              v28 -= 24;
              v21 -= 3;
            }
            while (v21 != v24);
            v21 = *(_QWORD **)(v1 + 1464);
          }
          *(_QWORD *)(v1 + 1464) = v28;
          *(_QWORD *)(v1 + 1472) = v23;
          *(_QWORD *)(v1 + 1480) = &v27[24 * v0];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_DWORD *)v21 = 0xFFFF;
          v21[1] = v19;
          v21[2] = 0;
          v23 = v21 + 3;
        }
        *(_QWORD *)(v1 + 1472) = v23;
      }
    }
  }
  if (!*(_QWORD *)(v1 + 808))
    goto LABEL_66;
  v30 = sub_22E5B522C();
  if (v30)
  {
    v31 = v30;
    v32 = *(char **)(v1 + 1472);
    v33 = *(_QWORD *)(v1 + 1480);
    if ((unint64_t)v32 < v33)
    {
      *(_DWORD *)v32 = 0;
      v34 = v32 + 24;
      *((_QWORD *)v32 + 1) = v30;
      *((_QWORD *)v32 + 2) = 0;
LABEL_64:
      *(_QWORD *)(v1 + 1472) = v34;
      goto LABEL_65;
    }
    v35 = *(_BYTE **)(v1 + 1464);
    v36 = 0xAAAAAAAAAAAAAAABLL * ((v32 - v35) >> 3) + 1;
    if (v36 <= 0xAAAAAAAAAAAAAAALL)
    {
      v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (_QWORD)v35) >> 3);
      if (2 * v37 > v36)
        v36 = 2 * v37;
      if (v37 >= 0x555555555555555)
        v0 = 0xAAAAAAAAAAAAAAALL;
      else
        v0 = v36;
      if (!v0)
      {
        v38 = 0;
LABEL_59:
        v39 = &v38[8 * ((v32 - v35) >> 3)];
        *(_DWORD *)v39 = 0;
        *((_QWORD *)v39 + 1) = v31;
        *((_QWORD *)v39 + 2) = 0;
        v34 = v39 + 24;
        if (v32 != v35)
        {
          do
          {
            v40 = *(_OWORD *)(v32 - 24);
            *((_QWORD *)v39 - 1) = *((_QWORD *)v32 - 1);
            *(_OWORD *)(v39 - 24) = v40;
            v39 -= 24;
            v32 -= 24;
          }
          while (v32 != v35);
          v32 = *(char **)(v1 + 1464);
        }
        *(_QWORD *)(v1 + 1464) = v39;
        *(_QWORD *)(v1 + 1472) = v34;
        *(_QWORD *)(v1 + 1480) = &v38[24 * v0];
        if (v32)
          operator delete(v32);
        goto LABEL_64;
      }
      if (v0 <= 0xAAAAAAAAAAAAAAALL)
      {
        v38 = (char *)operator new(24 * v0);
        goto LABEL_59;
      }
LABEL_616:
      sub_22E3B3F8C();
    }
LABEL_615:
    abort();
  }
LABEL_65:
  sub_22E5A3780(*(_QWORD *)(v1 + 808));
  (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 808) + 64))(*(_QWORD *)(v1 + 808));
LABEL_66:
  v41 = *(_QWORD *)(v1 + 848);
  if (!v41)
    goto LABEL_115;
  llvm::ProfileSummary::getMD(*(llvm::ProfileSummary **)(v41 + 80), *(llvm::LLVMContext **)(v1 + 232));
  llvm::Module::setProfileSummary();
  v42 = *(_DWORD *)(v1 + 868);
  if (!v42 && !*(_DWORD *)(v1 + 872))
    goto LABEL_115;
  v43 = *(_QWORD *)(v1 + 208);
  v44 = *(_QWORD *)(v1 + 184);
  v45 = (char *)(v44 + 560);
  v46 = *(_BYTE *)(v44 + 583);
  v47 = v46;
  if (v46 < 0)
    v45 = *(char **)(v44 + 560);
  v48 = *(_QWORD *)(v44 + 568);
  v49 = v46 & 0x7F;
  if (v47 >= 0)
    v48 = v49;
  if (!v42 && !*(_DWORD *)(v1 + 872))
    goto LABEL_115;
  v50 = *(_DWORD *)(v1 + 856);
  if (v50 && v50 == *(_DWORD *)(v1 + 860))
  {
    if (v48)
      v51 = v45;
    else
      v51 = "<stdin>";
    if (v48)
      v52 = v48;
    else
      v52 = 7;
    *(_QWORD *)(v43 + 312) = 0x38300000000;
    if (*(char *)(v43 + 311) < 0)
    {
      **(_BYTE **)(v43 + 288) = 0;
      *(_QWORD *)(v43 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v43 + 288) = 0;
      *(_BYTE *)(v43 + 311) = 0;
    }
    *(_QWORD *)__b = v43 + 320;
    *(_QWORD *)&__b[8] = 0;
    *(_QWORD *)&__b[16] = v43;
    *(_WORD *)&__b[24] = 1;
    *(_BYTE *)(v43 + 320) = 0;
    *(_DWORD *)(v43 + 664) = 0;
    v67 = *(unsigned int *)(v43 + 776);
    if ((_DWORD)v67)
    {
      v68 = *(_QWORD *)(v43 + 768);
      v0 = 56 * v67;
      do
      {
        if (*(char *)(v68 + v0 - 9) < 0)
          operator delete(*(void **)(v68 + v0 - 32));
        v0 -= 56;
      }
      while (v0);
    }
    *(_DWORD *)(v43 + 776) = 0;
    sub_22E3B89A8((unsigned __int8 **)__b, v51, v52);
  }
  else
  {
    if (*(_DWORD *)(v1 + 872))
    {
      *(_QWORD *)(v43 + 312) = 0x38200000000;
      if (*(char *)(v43 + 311) < 0)
      {
        **(_BYTE **)(v43 + 288) = 0;
        *(_QWORD *)(v43 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v43 + 288) = 0;
        *(_BYTE *)(v43 + 311) = 0;
      }
      v53 = 0;
      *(_QWORD *)__b = v43 + 320;
      *(_QWORD *)&__b[8] = 0;
      *(_QWORD *)&__b[16] = v43;
      *(_WORD *)&__b[24] = 1;
      *(_BYTE *)(v43 + 320) = 0;
      *(_DWORD *)(v43 + 664) = 0;
      v54 = *(unsigned int *)(v43 + 776);
      if ((_DWORD)v54)
      {
        v55 = *(_QWORD *)(v43 + 768);
        v56 = 56 * v54;
        do
        {
          if (*(char *)(v55 + v56 - 9) < 0)
            operator delete(*(void **)(v55 + v56 - 32));
          v56 -= 56;
        }
        while (v56);
        v53 = *(unsigned __int8 *)(v43 + 320);
      }
      *(_DWORD *)(v43 + 776) = 0;
      v57 = *(unsigned int *)(v1 + 864);
      *(_BYTE *)(v43 + 321 + v53) = 3;
      *(_QWORD *)(v43 + 336 + 8 * v53) = v57;
      v58 = *(unsigned int *)(v1 + 872);
      v59 = (v53 + 1);
      *(_BYTE *)(v43 + 321 + v59) = 3;
      *(_BYTE *)(v43 + 320) = v53 + 2;
      *(_QWORD *)(v43 + 336 + 8 * v59) = v58;
      sub_22E3BB0B8((uint64_t)__b);
      v42 = *(_DWORD *)(v1 + 868);
    }
    if (!v42)
      goto LABEL_115;
    *(_QWORD *)(v43 + 312) = 0x38100000000;
    if (*(char *)(v43 + 311) < 0)
    {
      **(_BYTE **)(v43 + 288) = 0;
      *(_QWORD *)(v43 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v43 + 288) = 0;
      *(_BYTE *)(v43 + 311) = 0;
    }
    v60 = 0;
    *(_QWORD *)__b = v43 + 320;
    *(_QWORD *)&__b[8] = 0;
    *(_QWORD *)&__b[16] = v43;
    *(_WORD *)&__b[24] = 1;
    *(_BYTE *)(v43 + 320) = 0;
    *(_DWORD *)(v43 + 664) = 0;
    v61 = *(unsigned int *)(v43 + 776);
    if ((_DWORD)v61)
    {
      v62 = *(_QWORD *)(v43 + 768);
      v63 = 56 * v61;
      do
      {
        if (*(char *)(v62 + v63 - 9) < 0)
          operator delete(*(void **)(v62 + v63 - 32));
        v63 -= 56;
      }
      while (v63);
      v60 = *(unsigned __int8 *)(v43 + 320);
    }
    *(_DWORD *)(v43 + 776) = 0;
    v64 = *(unsigned int *)(v1 + 864);
    *(_BYTE *)(v43 + 321 + v60) = 3;
    *(_QWORD *)(v43 + 336 + 8 * v60) = v64;
    v65 = *(unsigned int *)(v1 + 868);
    v66 = (v60 + 1);
    *(_BYTE *)(v43 + 321 + v66) = 3;
    *(_BYTE *)(v43 + 320) = v60 + 2;
    *(_QWORD *)(v43 + 336 + 8 * v66) = v65;
  }
  sub_22E3BB0B8((uint64_t)__b);
LABEL_115:
  sub_22E627E20(v1, (uint64_t *)(v1 + 1464), (void **)"llvm.global_ctors");
  sub_22E627E20(v1, (uint64_t *)(v1 + 1488), (void **)"llvm.global_dtors");
  sub_22F2990E0(v1);
  v69 = sub_22E699F3C((_QWORD *)v1);
  v320 = v1;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v69 + 288))(v69))
    goto LABEL_176;
  v70 = *(uint64_t **)(v1 + 2032);
  v318 = *(_QWORD *)(v1 + 2040);
  if (v70 == (uint64_t *)v318)
    goto LABEL_176;
  v315 = (uint64_t *)(v1 + 1440);
  do
  {
    v0 = v70[1];
    if (!v0)
      break;
    v71 = *v70;
    NamedValue = llvm::Module::getNamedValue();
    if (!NamedValue)
      goto LABEL_174;
    v73 = (llvm::GlobalValue *)NamedValue;
    *(_QWORD *)__b = &__b[16];
    *(_QWORD *)&__b[8] = 0x600000000;
    v332[0] = &v333;
    v332[1] = (void *)0x600000000;
    v74 = *(_QWORD *)(NamedValue + 8);
    if (!v74)
    {
LABEL_158:
      llvm::GlobalValue::eraseFromParent(v73);
      if (*(_DWORD *)&__b[8])
      {
        v93 = *(uint64_t **)__b;
        v94 = 8 * *(unsigned int *)&__b[8];
        do
        {
          v95 = *v93;
          v96 = llvm::FunctionType::get();
          Name = llvm::Value::getName((llvm::Value *)v0);
          v99 = sub_22E62D908(v1, Name, v98, v96, 0, 0, 0, 0, 0, 0, 0);
          v100 = (unsigned int **)(v95 - 32);
          if (*(_QWORD *)(v95 - 32))
          {
            **(_QWORD **)(v95 - 16) = *(_QWORD *)(v95 - 24);
            v101 = *(_QWORD *)(v95 - 24);
            if (v101)
              *(_QWORD *)(v101 + 16) = *(_QWORD *)(v95 - 16);
          }
          *v100 = v99;
          if (v99)
          {
            v104 = *((_QWORD *)v99 + 1);
            v102 = (unsigned int ***)(v99 + 2);
            v103 = v104;
            *(_QWORD *)(v95 - 24) = v104;
            if (v104)
              *(_QWORD *)(v103 + 16) = v95 - 24;
            *(_QWORD *)(v95 - 16) = v102;
            *v102 = v100;
          }
          ++v93;
          v94 -= 8;
        }
        while (v94);
      }
      v85 = 1;
      goto LABEL_169;
    }
    while (1)
    {
      v75 = *(_QWORD *)(v74 + 24);
      v76 = *(unsigned __int8 *)(v75 + 16);
      if (v75)
        v77 = v76 == 5;
      else
        v77 = 0;
      if (!v77)
      {
        if (v75)
          v78 = v76 == 2;
        else
          v78 = 0;
        if (!v78)
        {
LABEL_148:
          v85 = 0;
          goto LABEL_169;
        }
        v79 = *(unsigned int *)&__b[8];
        v80 = (void **)__b;
        if (*(unsigned int *)&__b[8] >= (unint64_t)*(unsigned int *)&__b[12])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v79 = *(unsigned int *)&__b[8];
        }
        goto LABEL_145;
      }
      if (*(_WORD *)(v75 + 18) != 49)
        goto LABEL_148;
      v81 = *(_QWORD *)(v75 + 8);
      if (v81)
        break;
LABEL_142:
      v79 = LODWORD(v332[1]);
      v80 = v332;
      if (LODWORD(v332[1]) >= (unint64_t)HIDWORD(v332[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v79 = LODWORD(v332[1]);
      }
      v1 = v320;
LABEL_145:
      *((_QWORD *)*v80 + v79) = v75;
      ++*((_DWORD *)v80 + 2);
      v74 = *(_QWORD *)(v74 + 8);
      if (!v74)
      {
        if (*(_DWORD *)&__b[8])
        {
          v86 = *(uint64_t **)__b;
          v87 = 8 * *(unsigned int *)&__b[8];
          do
          {
            v88 = *v86;
            if (*(_QWORD *)(*v86 - 32))
            {
              **(_QWORD **)(v88 - 16) = *(_QWORD *)(v88 - 24);
              v89 = *(_QWORD *)(v88 - 24);
              if (v89)
                *(_QWORD *)(v89 + 16) = *(_QWORD *)(v88 - 16);
            }
            *(_QWORD *)(v88 - 32) = 0;
            ++v86;
            v87 -= 8;
          }
          while (v87);
        }
        if (LODWORD(v332[1]))
        {
          v90 = (llvm::Constant **)v332[0];
          v91 = 8 * LODWORD(v332[1]);
          do
          {
            v92 = *v90++;
            llvm::Constant::destroyConstant(v92);
            v91 -= 8;
          }
          while (v91);
        }
        goto LABEL_158;
      }
    }
    while (1)
    {
      v82 = *(_QWORD *)(v81 + 24);
      if (!v82 || *(_BYTE *)(v82 + 16) != 2)
        break;
      v84 = *(unsigned int *)&__b[8];
      if (*(unsigned int *)&__b[8] >= (unint64_t)*(unsigned int *)&__b[12])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v84 = *(unsigned int *)&__b[8];
      }
      *(_QWORD *)(*(_QWORD *)__b + 8 * v84) = v82;
      ++*(_DWORD *)&__b[8];
      v81 = *(_QWORD *)(v81 + 8);
      if (!v81)
        goto LABEL_142;
    }
    v85 = 0;
    v1 = v320;
LABEL_169:
    if (v332[0] != &v333)
      free(v332[0]);
    if (*(_BYTE **)__b != &__b[16])
      free(*(void **)__b);
    if (v85)
    {
LABEL_174:
      v105 = *(unsigned int **)(v71 + 16);
      v106 = *v105;
      *(_WORD *)&__b[32] = 261;
      *(_QWORD *)__b = v105 + 4;
      *(_QWORD *)&__b[8] = v106;
      v332[0] = (void *)llvm::GlobalAlias::create();
      sub_22E62C508(v315, (uint64_t *)v332);
    }
    v70 += 2;
  }
  while (v70 != (uint64_t *)v318);
LABEL_176:
  v107 = (_QWORD *)v1;
  v108 = *(uint64_t **)(v1 + 1096);
  v316 = v107[138];
  if (v108 == (uint64_t *)v316)
    goto LABEL_303;
  v109 = 0;
  v110 = v107[26];
  while (2)
  {
    v311 = v109;
LABEL_179:
    v111 = *v108 & 0xFFFFFFFFFFFFFFF8;
    v112 = sub_22E624934(v111);
    v113 = *(_DWORD *)(sub_22EFC9238(v111) + 16);
    sub_22E624994(v320, *v108, v108[1]);
    v114 = llvm::Module::getNamedValue();
    v115 = v114;
    if (v114)
      v116 = *(unsigned __int8 *)(v114 + 16) - 3 >= 0xFFFFFFFE;
    else
      v116 = 0;
    v0 = v114;
    if (v116)
    {
      v117 = (unsigned __int8 *)llvm::Value::stripPointerCasts(*(llvm::Value **)(v114 - 32));
      v118 = !v117 || v117[16] > 3u;
      if (v118
        || ((AliaseeObject = llvm::GlobalValue::getAliaseeObject((llvm::GlobalValue *)v117),
             v0 = AliaseeObject,
             AliaseeObject != v115)
          ? (v120 = AliaseeObject == 0)
          : (v120 = 1),
            v120))
      {
        *(_DWORD *)(v110 + 312) = v113;
        *(_DWORD *)(v110 + 316) = 754;
        v0 = v110 + 320;
        if (*(char *)(v110 + 311) < 0)
        {
          **(_BYTE **)(v110 + 288) = 0;
          *(_QWORD *)(v110 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v110 + 288) = 0;
          *(_BYTE *)(v110 + 311) = 0;
        }
        *(_QWORD *)__b = v110 + 320;
        *(_QWORD *)&__b[8] = 0;
        *(_QWORD *)&__b[16] = v110;
        *(_WORD *)&__b[24] = 1;
        *(_BYTE *)(v110 + 320) = 0;
        *(_DWORD *)(v110 + 664) = 0;
        v158 = *(unsigned int *)(v110 + 776);
        if ((_DWORD)v158)
        {
          v159 = *(_QWORD *)(v110 + 768);
          v160 = 56 * v158;
          do
          {
            if (*(char *)(v159 + v160 - 9) < 0)
              operator delete(*(void **)(v159 + v160 - 32));
            v160 -= 56;
          }
          while (v160);
          v161 = *(unsigned __int8 **)__b;
          *(_DWORD *)(v110 + 776) = 0;
          if (!v161)
          {
            v161 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&__b[8]);
            *(_QWORD *)__b = v161;
          }
        }
        else
        {
          *(_DWORD *)(v110 + 776) = 0;
          v161 = (unsigned __int8 *)(v110 + 320);
        }
        v162 = v112;
        v161[*v161 + 1] = 2;
        goto LABEL_278;
      }
    }
    if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v0))
    {
      *(_DWORD *)(v110 + 312) = v113;
      *(_DWORD *)(v110 + 316) = 751;
      if (*(char *)(v110 + 311) < 0)
      {
        **(_BYTE **)(v110 + 288) = 0;
        *(_QWORD *)(v110 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v110 + 288) = 0;
        *(_BYTE *)(v110 + 311) = 0;
      }
      v0 = v110 + 320;
      *(_QWORD *)__b = v110 + 320;
      *(_QWORD *)&__b[8] = 0;
      *(_QWORD *)&__b[16] = v110;
      *(_WORD *)&__b[24] = 1;
      *(_BYTE *)(v110 + 320) = 0;
      *(_DWORD *)(v110 + 664) = 0;
      v163 = *(unsigned int *)(v110 + 776);
      if ((_DWORD)v163)
      {
        v164 = *(_QWORD *)(v110 + 768);
        v165 = 56 * v163;
        do
        {
          if (*(char *)(v164 + v165 - 9) < 0)
            operator delete(*(void **)(v164 + v165 - 32));
          v165 -= 56;
        }
        while (v165);
        v166 = *(unsigned __int8 **)__b;
        *(_DWORD *)(v110 + 776) = 0;
        if (!v166)
        {
          v166 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&__b[8]);
          *(_QWORD *)__b = v166;
        }
      }
      else
      {
        *(_DWORD *)(v110 + 776) = 0;
        v166 = (unsigned __int8 *)(v110 + 320);
      }
      v162 = v112;
      v166[*v166 + 1] = 2;
      v167 = *(_QWORD *)__b;
      v168 = **(_BYTE **)__b;
      **(_BYTE **)__b = v168 + 1;
      *(_QWORD *)(v167 + 8 * v168 + 16) = v112;
      *(_BYTE *)(v167 + (v168 + 1) + 1) = 2;
LABEL_278:
      v169 = *(_QWORD *)__b;
      v170 = **(_BYTE **)__b;
      **(_BYTE **)__b = v170 + 1;
      *(_QWORD *)(v169 + 8 * v170 + 16) = v162;
LABEL_279:
      v171 = (void **)__b;
      goto LABEL_280;
    }
    LODWORD(v318) = v112;
    if (!v112)
      break;
    if (*(_BYTE *)(v0 + 16))
    {
      *(_DWORD *)(v110 + 312) = v113;
      *(_DWORD *)(v110 + 316) = 751;
      if (*(char *)(v110 + 311) < 0)
      {
        **(_BYTE **)(v110 + 288) = 0;
        *(_QWORD *)(v110 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v110 + 288) = 0;
        *(_BYTE *)(v110 + 311) = 0;
      }
      v0 = v110 + 320;
      *(_QWORD *)__b = v110 + 320;
      *(_QWORD *)&__b[8] = 0;
      *(_QWORD *)&__b[16] = v110;
      *(_WORD *)&__b[24] = 1;
      *(_BYTE *)(v110 + 320) = 0;
      *(_DWORD *)(v110 + 664) = 0;
      v172 = *(unsigned int *)(v110 + 776);
      if ((_DWORD)v172)
      {
        v173 = *(_QWORD *)(v110 + 768);
        v174 = 56 * v172;
        do
        {
          if (*(char *)(v173 + v174 - 9) < 0)
            operator delete(*(void **)(v173 + v174 - 32));
          v174 -= 56;
        }
        while (v174);
        v175 = *(unsigned __int8 **)__b;
        *(_DWORD *)(v110 + 776) = 0;
        if (!v175)
        {
          v175 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&__b[8]);
          *(_QWORD *)__b = v175;
        }
      }
      else
      {
        *(_DWORD *)(v110 + 776) = 0;
        v175 = (unsigned __int8 *)(v110 + 320);
      }
      v175[*v175 + 1] = 2;
      v176 = *(_QWORD *)__b;
      v177 = **(_BYTE **)__b;
      **(_BYTE **)__b = v177 + 1;
      *(_QWORD *)(v176 + 8 * v177 + 16) = 1;
      *(_BYTE *)(v176 + (v177 + 1) + 1) = 2;
      v178 = *(_QWORD *)__b;
      v179 = **(_BYTE **)__b;
      **(_BYTE **)__b = v179 + 1;
      *(_QWORD *)(v178 + 8 * v179 + 16) = 1;
      goto LABEL_279;
    }
    if (*(_BYTE *)(**(_QWORD **)(*(_QWORD *)(v0 + 24) + 16) + 8) != 15)
    {
      *(_DWORD *)(v110 + 312) = v113;
      *(_DWORD *)(v110 + 316) = 794;
      if (*(char *)(v110 + 311) < 0)
      {
        **(_BYTE **)(v110 + 288) = 0;
        *(_QWORD *)(v110 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v110 + 288) = 0;
        *(_BYTE *)(v110 + 311) = 0;
      }
      v0 = v110 + 320;
      v332[0] = (void *)(v110 + 320);
      v332[1] = 0;
      v333.i64[0] = v110;
      v333.i16[4] = 1;
      *(_BYTE *)(v110 + 320) = 0;
      *(_DWORD *)(v110 + 664) = 0;
      v180 = *(unsigned int *)(v110 + 776);
      if ((_DWORD)v180)
      {
        v181 = *(_QWORD *)(v110 + 768);
        v182 = 56 * v180;
        do
        {
          if (*(char *)(v181 + v182 - 9) < 0)
            operator delete(*(void **)(v181 + v182 - 32));
          v182 -= 56;
        }
        while (v182);
      }
      *(_DWORD *)(v110 + 776) = 0;
      v171 = v332;
LABEL_280:
      sub_22E3BB0B8((uint64_t)v171);
      v108 += 2;
      v109 = 1;
      v107 = (_QWORD *)v320;
      if (v108 != (uint64_t *)v316)
        continue;
      goto LABEL_300;
    }
    break;
  }
  v122 = (uint64_t *)(v115 - 32);
  v121 = *(_QWORD *)(v115 - 32);
  if (v121)
    v123 = *(_BYTE *)(v121 + 16) == 5;
  else
    v123 = 0;
  if (v123)
    v121 = *(_QWORD *)(v121 - 32 * (*(_DWORD *)(v121 + 20) & 0x7FFFFFF));
  if ((*(_BYTE *)(v111 + 29) & 1) != 0)
  {
    sub_22EFC8E88(v111);
    v125 = *(uint64_t **)v124;
    v126 = *(unsigned int *)(v124 + 8);
    v127 = *(uint64_t **)v124;
    if ((_DWORD)v126)
    {
      v128 = 8 * v126;
      v127 = *(uint64_t **)v124;
      while (*(_WORD *)(*v127 + 32) != 305)
      {
        ++v127;
        v128 -= 8;
        if (!v128)
          goto LABEL_224;
      }
    }
    if (v127 != &v125[v126])
    {
      do
      {
        v130 = *v125++;
        v129 = v130;
      }
      while (*(_WORD *)(v130 + 32) != 305);
      v131 = *(void **)(v129 + 40);
      v132 = *(unsigned int *)(v129 + 36);
      Section = (const void *)llvm::GlobalValue::getSection((llvm::GlobalValue *)v121);
      if (v134 != v132 || (_DWORD)v132 && memcmp(v131, Section, v132))
      {
        *(_DWORD *)(v110 + 312) = *(_QWORD *)(v129 + 16);
        *(_DWORD *)(v110 + 316) = 861;
        v312 = v131;
        if (*(char *)(v110 + 311) < 0)
        {
          **(_BYTE **)(v110 + 288) = 0;
          *(_QWORD *)(v110 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v110 + 288) = 0;
          *(_BYTE *)(v110 + 311) = 0;
        }
        *(_QWORD *)__b = v110 + 320;
        *(_QWORD *)&__b[8] = 0;
        *(_QWORD *)&__b[16] = v110;
        *(_WORD *)&__b[24] = 1;
        *(_BYTE *)(v110 + 320) = 0;
        *(_DWORD *)(v110 + 664) = 0;
        v135 = *(unsigned int *)(v110 + 776);
        if ((_DWORD)v135)
        {
          v136 = *(_QWORD *)(v110 + 768);
          v137 = 56 * v135;
          do
          {
            if (*(char *)(v136 + v137 - 9) < 0)
              operator delete(*(void **)(v136 + v137 - 32));
            v137 -= 56;
          }
          while (v137);
        }
        *(_DWORD *)(v110 + 776) = 0;
        sub_22E3B89A8((unsigned __int8 **)__b, v312, v132);
        v138 = *(unsigned __int8 **)__b;
        if (!*(_QWORD *)__b)
        {
          v138 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&__b[8]);
          *(_QWORD *)__b = v138;
        }
        v138[*v138 + 1] = 2;
        v139 = *(_QWORD *)__b;
        v140 = **(_BYTE **)__b;
        **(_BYTE **)__b = v140 + 1;
        *(_QWORD *)(v139 + 8 * v140 + 16) = v318;
        *(_BYTE *)(v139 + (v140 + 1) + 1) = 2;
        v141 = *(_QWORD *)__b;
        v142 = **(_BYTE **)__b;
        **(_BYTE **)__b = v142 + 1;
        *(_QWORD *)(v141 + 8 * v142 + 16) = v318;
        sub_22E3BB0B8((uint64_t)__b);
      }
    }
  }
LABEL_224:
  v143 = *(_BYTE *)(v121 + 16) != 1 || v121 == 0;
  if (!v143 && llvm::GlobalValue::isInterposable((llvm::GlobalValue *)v121))
  {
    *(_DWORD *)(v110 + 312) = v113;
    *(_DWORD *)(v110 + 316) = 860;
    if (*(char *)(v110 + 311) < 0)
    {
      **(_BYTE **)(v110 + 288) = 0;
      *(_QWORD *)(v110 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v110 + 288) = 0;
      *(_BYTE *)(v110 + 311) = 0;
    }
    *(_QWORD *)__b = v110 + 320;
    *(_QWORD *)&__b[8] = 0;
    *(_QWORD *)&__b[16] = v110;
    *(_WORD *)&__b[24] = 1;
    *(_BYTE *)(v110 + 320) = 0;
    *(_DWORD *)(v110 + 664) = 0;
    v144 = *(unsigned int *)(v110 + 776);
    if ((_DWORD)v144)
    {
      v145 = *(_QWORD *)(v110 + 768);
      v146 = 56 * v144;
      do
      {
        if (*(char *)(v145 + v146 - 9) < 0)
          operator delete(*(void **)(v145 + v146 - 32));
        v146 -= 56;
      }
      while (v146);
    }
    *(_DWORD *)(v110 + 776) = 0;
    v147 = (void *)llvm::Value::getName((llvm::Value *)v0);
    sub_22E3B89A8((unsigned __int8 **)__b, v147, v148);
    v149 = (void *)llvm::Value::getName((llvm::Value *)v121);
    sub_22E3B89A8((unsigned __int8 **)__b, v149, v150);
    v151 = *(unsigned __int8 **)__b;
    if (!*(_QWORD *)__b)
    {
      v151 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&__b[8]);
      *(_QWORD *)__b = v151;
    }
    v151[*v151 + 1] = 2;
    v152 = *(_QWORD *)__b;
    v153 = **(_BYTE **)__b;
    **(_BYTE **)__b = v153 + 1;
    *(_QWORD *)(v152 + 8 * v153 + 16) = v318;
    sub_22E3BB0B8((uint64_t)__b);
    PointerBitCastOrAddrSpaceCast = llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast();
    if ((_DWORD)v318)
    {
      if (*v122)
      {
        **(_QWORD **)(v115 - 16) = *(_QWORD *)(v115 - 24);
        v155 = *(_QWORD *)(v115 - 24);
        if (v155)
          *(_QWORD *)(v155 + 16) = *(_QWORD *)(v115 - 16);
      }
      *v122 = PointerBitCastOrAddrSpaceCast;
      if (PointerBitCastOrAddrSpaceCast)
      {
        v156 = (uint64_t **)(PointerBitCastOrAddrSpaceCast + 8);
        v157 = *(_QWORD *)(PointerBitCastOrAddrSpaceCast + 8);
        *(_QWORD *)(v115 - 24) = v157;
        if (v157)
          *(_QWORD *)(v157 + 16) = v115 - 24;
        *(_QWORD *)(v115 - 16) = v156;
        *v156 = v122;
      }
    }
    else
    {
      llvm::GlobalAlias::setAliasee();
    }
  }
  v108 += 2;
  if (v108 != (uint64_t *)v316)
    goto LABEL_179;
  v107 = (_QWORD *)v320;
  if ((v311 & 1) == 0)
    goto LABEL_303;
LABEL_300:
  v183 = (uint64_t *)v107[137];
  v184 = (uint64_t *)v107[138];
  while (v183 != v184)
  {
    v185 = *v183;
    v186 = v183[1];
    v183 += 2;
    sub_22E624994((uint64_t)v107, v185, v186);
    v187 = (llvm::GlobalValue *)llvm::Module::getNamedValue();
    llvm::UndefValue::get();
    llvm::Value::replaceAllUsesWith();
    llvm::GlobalValue::eraseFromParent(v187);
  }
LABEL_303:
  sub_22F29444C((uint64_t)(v107 + 436));
  v188 = (_BYTE *)v107[439];
  v189 = (_BYTE *)v107[440];
  v107[441] = 0;
  v107[439] = 0;
  v107[440] = 0;
  __p = v188;
  v190 = (uint64_t)v107;
  if (v188 != v189)
  {
    v191 = v188;
    do
    {
      if (v191[8])
      {
        v192 = *(_QWORD *)v191;
        switch(*(_DWORD *)(*(_QWORD *)v191 + 28) & 0x7F)
        {
          case '4':
          case '6':
          case '8':
            goto LABEL_307;
          case '5':
            break;
          case '7':
            *(_QWORD *)__b = v190;
            memset(&__b[8], 0, 44);
            memset(&__b[56], 0, 64);
            v194 = sub_22E624994(v190, v192 & 0xFFFFFFFFFFFFFFF8 | 1, v316 & 0xFFFFFFFF00000000);
            v196 = v200;
            v197 = v320;
            v198 = v192 & 0xFFFFFFFFFFFFFFF8 | 1;
            v316 &= 0xFFFFFFFF00000000;
            goto LABEL_315;
          case '9':
            *(_QWORD *)__b = v190;
            memset(&__b[8], 0, 44);
            memset(&__b[56], 0, 64);
            v194 = sub_22E624994(v190, v192 & 0xFFFFFFFFFFFFFFF8 | 2, v318 & 0xFFFFFFFF00000000);
            v196 = v199;
            v197 = v320;
            v198 = v192 & 0xFFFFFFFFFFFFFFF8 | 2;
            v318 &= 0xFFFFFFFF00000000;
            goto LABEL_315;
          default:
            if ((*(_DWORD *)(*(_QWORD *)v191 + 28) & 0x7F) != 0x18)
              break;
LABEL_307:
            *(_QWORD *)__b = v190;
            memset(&__b[8], 0, 44);
            memset(&__b[56], 0, 64);
            if (sub_22E462B18(v192))
              v193 = v192 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v192) + 96) & 0x80) == 0);
            else
              v193 = v192;
            v0 &= 0xFFFFFFFF00000000;
            v194 = sub_22E624994(v190, v193, v0);
            v196 = v195;
            v197 = v320;
            v198 = v193;
LABEL_315:
            v201 = sub_22E629EF0(v197, v198);
            v202 = (uint64_t)v194;
            v190 = v320;
            sub_22E659728((uint64_t)__b, v192, v202, v196, v201);
            sub_22E6228BC((uint64_t)__b);
            break;
        }
      }
      v191 += 16;
    }
    while (v191 != v189);
  }
  if (__p)
    operator delete(__p);
  *(_QWORD *)__b = v190;
  memset(&__b[8], 0, 44);
  memset(&__b[56], 0, 64);
  if ((*(_QWORD *)(*(_QWORD *)(v190 + 184) + 96) & 0x180000000000) == 0x80000000000)
    llvm::Module::addModuleFlag();
  sub_22E6228BC((uint64_t)__b);
  v204 = *(char ***)(v190 + 3536);
  if (v204)
    sub_22E671FF4(v204, v203);
  v205 = *(_QWORD **)(v190 + 3544);
  if (v205)
    sub_22E679EAC(v205);
  if ((*(_BYTE *)(*(_QWORD *)(v190 + 184) + 35) & 0x80) != 0)
  {
    sub_22E618EBC((uint64_t)__b, v190, 0);
    sub_22E4EAD24((uint64_t)__b);
    sub_22E619434((uint64_t)__b);
    sub_22E618EBC((uint64_t)__b, v190, 0);
    sub_22F25FF80(__b);
    sub_22E619434((uint64_t)__b);
  }
  sub_22F2749C4();
  v206 = *(_QWORD *)(*(_QWORD *)(v190 + 144) + 15088);
  if ((*(_DWORD *)(v206 + 56) - 63) <= 1 && *(_DWORD *)(v206 + 68) != 40)
    sub_22F2991A4(v190);
  v207 = *(_QWORD *)(v190 + 216);
  v208 = *(_DWORD *)(v207 + 56);
  if (v208 == 30 || v208 == 25)
  {
    if ((*(_BYTE *)(*(_QWORD *)(v190 + 152) + 256) & 1) != 0)
    {
      llvm::FunctionType::get();
      *(_QWORD *)__b = "__amdgpu_device_library_preserve_asan_functions";
      *(_WORD *)&__b[32] = 259;
      llvm::User::operator new((llvm::User *)0x78);
      MEMORY[0x23489F6FC]();
      v209 = llvm::User::operator new((llvm::User *)0x58);
      llvm::PointerType::get();
      *(_QWORD *)__b = "__amdgpu_device_library_preserve_asan_functions_ptr";
      *(_WORD *)&__b[32] = 259;
      llvm::GlobalVariable::GlobalVariable();
      *(_QWORD *)__b = v209;
      sub_22E62C508((uint64_t *)(v190 + 1440), (uint64_t *)__b);
      v207 = *(_QWORD *)(v190 + 216);
    }
    if (*(_DWORD *)(*(_QWORD *)(v207 + 16) + 316) == 500)
      llvm::Module::addModuleFlag();
  }
  v210 = *(_QWORD *)(v190 + 144);
  v211 = v210 + 18632;
  if (*(_DWORD *)(v210 + 18632))
  {
    *(_QWORD *)__b = &__b[16];
    *(_QWORD *)&__b[8] = 0x800000000;
    v212 = *(unint64_t **)(v210 + 18624);
    v213 = *(unsigned int *)(v211 + 8);
    if ((_DWORD)v213)
    {
      v222 = 8 * v213;
      v214 = v212;
      while ((*v214 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v214;
        v222 -= 8;
        if (!v222)
          goto LABEL_357;
      }
    }
    else
    {
      v214 = v212;
    }
    v215 = &v212[v213];
    if (v214 == v215)
    {
LABEL_357:
      v221 = 0;
    }
    else
    {
      v216 = *v214;
LABEL_341:
      if ((*(_DWORD *)(v216 + 28) & 0x7Eu) - 52 >= 6)
        v217 = 0;
      else
        v217 = v216;
      if (v217)
        v218 = v217 & 0xFFFFFFFFFFFFFFF8;
      else
        v218 = v216;
      sub_22E6280CC(v190, v218, 0, 0);
      v219 = llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast();
      v220 = *(unsigned int *)&__b[8];
      if (*(unsigned int *)&__b[8] >= (unint64_t)*(unsigned int *)&__b[12])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v220 = *(unsigned int *)&__b[8];
      }
      *(_QWORD *)(*(_QWORD *)__b + 8 * v220) = v219;
      v221 = ++*(_DWORD *)&__b[8];
      while (++v214 != v215)
      {
        v216 = *v214;
        if ((*v214 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v214 != v215)
            goto LABEL_341;
          break;
        }
      }
    }
    llvm::ArrayType::get(*(llvm::ArrayType **)(v190 + 96), (llvm::Type *)v221);
    v223 = (void *)llvm::User::operator new((llvm::User *)0x58);
    llvm::ConstantArray::get();
    v332[0] = "__clang_gpu_used_external";
    v334.i16[0] = 259;
    llvm::GlobalVariable::GlobalVariable();
    v332[0] = v223;
    sub_22E62C508((uint64_t *)(v190 + 1440), (uint64_t *)v332);
    if (*(_BYTE **)__b != &__b[16])
      free(*(void **)__b);
  }
  sub_22E62C574(v190, (uint64_t)"llvm.used", 9, (uint64_t *)(v190 + 1416));
  sub_22E62C574(v190, (uint64_t)"llvm.compiler.used", 18, (uint64_t *)(v190 + 1440));
  v224 = *(llvm::SanitizerStatReport **)(v190 + 880);
  if (v224)
    llvm::SanitizerStatReport::finish(v224);
  if ((*(_BYTE *)(*(_QWORD *)(v190 + 184) + 1) & 1) != 0
    && ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v190 + 144) + 2000) + 20) & 0x200000000000) != 0
     || *(_DWORD *)(v190 + 3016)))
  {
    v322[0] = 0;
    v322[1] = 0;
    v323 = 0;
    v325 = 0;
    v326 = 0;
    v324 = 0;
    *(_QWORD *)__b = &__b[32];
    *(_QWORD *)&__b[8] = &__b[32];
    *(_QWORD *)&__b[16] = 16;
    *(_DWORD *)&__b[24] = 0;
    v332[0] = &v333;
    v332[1] = (void *)0x1000000000;
    v225 = *(const void ***)(v190 + 2824);
    v226 = *(const void ***)(v190 + 2832);
    if (v225 != v226)
    {
      do
      {
        v227 = *v225;
        v228 = (const void **)*v225;
        do
        {
          v229 = v228;
          v228 = (const void **)v228[4];
        }
        while (v228);
        v230 = *((_BYTE *)v229 + 23);
        if (v230 >= 0)
          v231 = v229;
        else
          v231 = *v229;
        if (v230 >= 0)
          v232 = v230 & 0x7F;
        else
          v232 = (size_t)v229[1];
        v233 = *(_QWORD *)(v190 + 152);
        v234 = *(_BYTE *)(v233 + 519);
        if (v234 >= 0)
          v235 = (const void *)(v233 + 496);
        else
          v235 = *(const void **)(v233 + 496);
        v236 = v234 & 0x7F;
        if (v234 < 0)
          v236 = *(_QWORD *)(v233 + 504);
        if (v232 != v236 || v232 && memcmp(v231, v235, v232) || (*(_BYTE *)(v233 + 240) & 0xE0) != 0)
        {
          sub_22E3BA850((uint64_t)__b, v227);
          if (v237)
          {
            v238 = LODWORD(v332[1]);
            if (LODWORD(v332[1]) >= (unint64_t)HIDWORD(v332[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v238 = LODWORD(v332[1]);
            }
            *((_QWORD *)v332[0] + v238) = v227;
            ++LODWORD(v332[1]);
          }
        }
        ++v225;
      }
      while (v225 != v226);
      v239 = v332[1];
      while (v239)
      {
        __src = 0;
        v240 = (_QWORD *)*((_QWORD *)v332[0] + v239 - 1);
        LODWORD(v332[1]) = v239 - 1;
        __src = v240;
        v241 = (const void **)v240[25];
        v242 = (const void **)v240[26];
        if (v241 == v242)
          goto LABEL_400;
        v243 = 0;
        do
        {
          while ((*((_WORD *)*v241 + 672) & 0x20) == 0)
          {
            sub_22E3BA850((uint64_t)__b, *v241);
            if (!v244)
              break;
            v245 = *v241;
            v246 = LODWORD(v332[1]);
            if (LODWORD(v332[1]) >= (unint64_t)HIDWORD(v332[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v246 = LODWORD(v332[1]);
            }
            *((_QWORD *)v332[0] + v246) = v245;
            v239 = ++LODWORD(v332[1]);
            ++v241;
            v243 = 1;
            if (v241 == v242)
              goto LABEL_402;
          }
          ++v241;
        }
        while (v241 != v242);
        if ((v243 & 1) == 0)
LABEL_400:
          sub_22E62C70C(v322, &__src);
        v239 = v332[1];
LABEL_402:
        ;
      }
    }
    __src = v331;
    v330 = 0x1000000000;
    if (*(_QWORD *)&__b[8] == *(_QWORD *)__b)
    {
LABEL_404:
      *(_QWORD *)&__b[20] = 0;
    }
    else
    {
      if (*(_DWORD *)&__b[16] < 0x21u
        || (4 * (*(_DWORD *)&__b[20] - *(_DWORD *)&__b[24])) >= *(_DWORD *)&__b[16])
      {
        memset(*(void **)&__b[8], 255, 8 * *(unsigned int *)&__b[16]);
        goto LABEL_404;
      }
      llvm::SmallPtrSetImplBase::shrink_and_clear((llvm::SmallPtrSetImplBase *)__b);
    }
    v247 = v324;
    v248 = v325;
    while (v247 != v248)
    {
      v249 = *v247;
      sub_22E3BA850((uint64_t)__b, *v247);
      if (v250)
        sub_22E62C828((_QWORD *)v190, (uint64_t)v249, (uint64_t)&__src, (uint64_t)__b);
      ++v247;
    }
    v251 = __src;
    v252 = v330;
    if ((_DWORD)v330)
    {
      v253 = (char *)__src + 8 * v330 - 8;
      if (__src < v253)
      {
        v254 = (char *)__src + 8;
        do
        {
          v255 = *((_QWORD *)v254 - 1);
          *((_QWORD *)v254 - 1) = *(_QWORD *)v253;
          *(_QWORD *)v253 = v255;
          v253 -= 8;
          v116 = v254 >= v253;
          v254 += 8;
        }
        while (!v116);
        v251 = __src;
      }
    }
    sub_22F2633B0(v190 + 3008, v251, &v251[8 * v252]);
    llvm::Module::getOrInsertNamedMetadata();
    v256 = *(unsigned int *)(v190 + 3016);
    if ((_DWORD)v256)
    {
      v257 = *(_QWORD *)(v190 + 3008);
      v258 = 8 * v256;
      do
      {
        v257 += 8;
        llvm::NamedMDNode::addOperand();
        v258 -= 8;
      }
      while (v258);
    }
    if (__src != v331)
      free(__src);
    if (v332[0] != &v333)
      free(v332[0]);
    if (*(_QWORD *)&__b[8] != *(_QWORD *)__b)
      free(*(void **)&__b[8]);
    sub_22F257CF8((uint64_t)v322);
  }
  if (*(_DWORD *)(v190 + 3160))
  {
    if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v190 + 144) + 2000) + 96) & 0x80) == 0)
    {
      llvm::Module::getOrInsertNamedMetadata();
      v259 = *(unsigned int *)(v190 + 3160);
      if ((_DWORD)v259)
      {
        v260 = *(_QWORD *)(v190 + 3152);
        v261 = 8 * v259;
        do
        {
          v260 += 8;
          llvm::NamedMDNode::addOperand();
          v261 -= 8;
        }
        while (v261);
      }
    }
  }
  v262 = *(_QWORD *)(v190 + 184);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v190 + 144) + 15088) + 56) == 41)
  {
    llvm::Module::addModuleFlag();
    v262 = *(_QWORD *)(v190 + 184);
  }
  if ((*(_QWORD *)(v262 + 76) & 0x1C00000000) != 0)
  {
    llvm::Module::addModuleFlag();
    v262 = *(_QWORD *)(v190 + 184);
  }
  if ((*(_BYTE *)v262 & 0x10) != 0)
    llvm::Module::addModuleFlag();
  if (((*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v190 + 144) + 2000) + 148) | (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v190 + 144) + 2000) + 150) << 16)) & 0x20000) != 0)
    llvm::Module::setSemanticInterposition(*(llvm::Module **)(v190 + 200));
  v263 = *(uint64_t **)(v190 + 184);
  v264 = *(uint64_t *)((char *)v263 + 76);
  if ((v264 & 0x2000000000) != 0)
  {
    llvm::Module::addModuleFlag();
    v263 = *(uint64_t **)(v190 + 184);
    v264 = *(uint64_t *)((char *)v263 + 76);
  }
  if ((v264 & 0x4000000000) != 0)
  {
    llvm::Module::addModuleFlag();
    v263 = *(uint64_t **)(v190 + 184);
  }
  v265 = *v263;
  if ((*v263 & 0x8000) != 0 || (v265 & 0x4000) != 0)
  {
    llvm::Module::addModuleFlag();
    v263 = *(uint64_t **)(v190 + 184);
    v265 = *v263;
  }
  if ((v265 & 0x10000) != 0)
  {
    llvm::Module::addModuleFlag();
    v263 = *(uint64_t **)(v190 + 184);
  }
  v266 = v263[4];
  if ((v266 & 0x1800) != 0 && (v266 & 0x400000000000000) != 0)
  {
    llvm::Module::addModuleFlag();
    *(_QWORD *)&__b[8] = 0;
    *(_QWORD *)__b = 0;
    *(_QWORD *)__b = llvm::MDString::get();
    llvm::Type::getInt32Ty(*(llvm::Type **)(v190 + 232), v267);
    llvm::ConstantInt::get();
    *(_QWORD *)&__b[8] = llvm::ValueAsMetadata::get();
    llvm::MDTuple::getImpl();
    llvm::Module::addModuleFlag();
  }
  if (*(_QWORD *)(v190 + 824))
    llvm::Module::addModuleFlag();
  sub_22EF5CCD0(*(_QWORD *)(v190 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v190 + 144) + 16424) & 0xFFFFFFFFFFFFFFF0), (uint64_t)__b);
  llvm::Module::addModuleFlag();
  v268 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v190 + 144) + 15088) + 56);
  if (v268 <= 0x28 && ((1 << v268) & 0x18000000006) != 0)
    llvm::Module::addModuleFlag();
  if (v268 - 31 <= 1)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v190 + 216) + 448))(*(_QWORD *)(v190 + 216));
    llvm::MDString::get();
    llvm::Module::addModuleFlag();
  }
  v269 = *(_QWORD *)(v190 + 184);
  if ((*(_BYTE *)(v269 + 35) & 0x80) != 0)
  {
    llvm::Module::addModuleFlag();
    v269 = *(_QWORD *)(v190 + 184);
  }
  if ((*(_WORD *)(v269 + 64) & 0x200) != 0)
  {
    llvm::Module::addModuleFlag();
    v269 = *(_QWORD *)(v190 + 184);
  }
  if ((*(_BYTE *)(*(_QWORD *)(v190 + 152) + 261) & 0x40) != 0)
  {
    llvm::Module::addModuleFlag();
    v269 = *(_QWORD *)(v190 + 184);
  }
  if ((*(_BYTE *)(v269 + 6) & 0x20) != 0
    && (*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(v190 + 216) + 760))(*(_QWORD *)(v190 + 216), *(_QWORD *)(v190 + 208)))
  {
    llvm::Module::addModuleFlag();
  }
  if ((*(_BYTE *)(*(_QWORD *)(v190 + 184) + 6) & 0x40) != 0
    && (*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(v190 + 216) + 752))(*(_QWORD *)(v190 + 216), *(_QWORD *)(v190 + 208)))
  {
    llvm::Module::addModuleFlag();
  }
  if ((*(_BYTE *)(*(_QWORD *)(v190 + 184) + 6) & 0x80) != 0)
    llvm::Module::addModuleFlag();
  v270 = (*(uint64_t (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v190 + 144) + 15088)
                                                                  + 568))(*(_QWORD *)(*(_QWORD *)(v190 + 144) + 15088), "ptrauth", 7);
  v271 = *(_QWORD *)(v190 + 152);
  if (v270 && ((*(unsigned __int8 *)(v271 + 250) << 16) & 0x300000) != 0)
  {
    llvm::Module::addModuleFlag();
    v271 = *(_QWORD *)(v190 + 152);
  }
  if ((*(_BYTE *)(v271 + 256) & 0x40) != 0)
    llvm::Module::addModuleFlag();
  if (v268 <= 0x28 && ((1 << v268) & 0x1800000003ELL) != 0)
  {
    llvm::Module::addModuleFlag();
    llvm::Module::addModuleFlag();
    llvm::Module::addModuleFlag();
    llvm::Module::addModuleFlag();
  }
  v272 = *(_QWORD *)(v190 + 184);
  if (*(char *)(v272 + 807) < 0)
  {
    if (!*(_QWORD *)(v272 + 792))
      goto LABEL_485;
LABEL_484:
    llvm::MDString::get();
    llvm::Module::addModuleFlag();
  }
  else if (*(_BYTE *)(v272 + 807))
  {
    goto LABEL_484;
  }
LABEL_485:
  v273 = *(_QWORD *)(v190 + 152);
  if ((*(_WORD *)(v273 + 96) & 0x80) != 0 && (*(_DWORD *)(*(_QWORD *)(v190 + 216) + 56) & 0xFFFFFFFE) == 0x2C)
  {
    llvm::Module::addModuleFlag();
    v273 = *(_QWORD *)(v190 + 152);
  }
  if ((*(_QWORD *)(v273 + 8) & 0x800000000000) != 0)
  {
    llvm::Module::addModuleFlag();
    v273 = *(_QWORD *)(v190 + 152);
  }
  v274 = *(_QWORD *)(v273 + 72);
  if ((_DWORD)v274 && (v274 & 0x200000000) == 0)
  {
    llvm::Module::addModuleFlag();
    v273 = *(_QWORD *)(v190 + 152);
    v274 = *(_QWORD *)(v273 + 72);
  }
  if ((v274 & 0x800000000) != 0)
  {
    llvm::Module::addModuleFlag();
    v273 = *(_QWORD *)(v190 + 152);
  }
  if ((*(_DWORD *)(v273 + 52) & 0x40000000) != 0
    || (*(_WORD *)(v273 + 96) & 0x80) != 0 && (*(_DWORD *)(*(_QWORD *)(v190 + 216) + 56) & 0xFFFFFFFE) == 0x3A)
  {
    sub_22F299260();
    v273 = *(_QWORD *)(v190 + 152);
    if ((*(_DWORD *)(*(_QWORD *)(v190 + 216) + 56) & 0xFFFFFFFE) == 0x38)
    {
      *(_QWORD *)&__b[8] = 0;
      *(_QWORD *)__b = 0;
      llvm::ConstantInt::get();
      *(_QWORD *)__b = llvm::ValueAsMetadata::get();
      llvm::ConstantInt::get();
      *(_QWORD *)&__b[8] = llvm::ValueAsMetadata::get();
      llvm::Module::getOrInsertNamedMetadata();
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
      v273 = *(_QWORD *)(v190 + 152);
    }
  }
  if ((*(_QWORD *)(v273 + 20) & 0x200000000) != 0)
    llvm::Module::setPtrAuthABIVersion();
  if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v190 + 144) + 2000) + 52) >> 2) & 3) != 0)
  {
    llvm::Module::setPICLevel();
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v190 + 144) + 2000) + 52) & 0x10) != 0)
      llvm::Module::setPIELevel();
  }
  v275 = *(_QWORD *)(v190 + 184);
  v276 = *(unsigned __int8 *)(v275 + 183);
  if (*(char *)(v275 + 183) < 0)
  {
    if (!*(_QWORD *)(v275 + 168))
      goto LABEL_541;
  }
  else if (!*(_BYTE *)(v275 + 183))
  {
    goto LABEL_541;
  }
  v277 = *(int **)(v275 + 160);
  if ((v276 & 0x80u) != 0)
    v276 = *(_QWORD *)(v275 + 168);
  else
    v277 = (int *)(v275 + 160);
  if (v276 == 6)
  {
    if (*v277 == 1852990827 && *((_WORD *)v277 + 2) == 27749)
      goto LABEL_540;
    v283 = *v277;
    v284 = *((unsigned __int16 *)v277 + 2);
    if (v283 == 1768187245 && v284 == 28021)
      goto LABEL_540;
  }
  else if (v276 == 5)
  {
    if (*v277 == 1818324339 && *((_BYTE *)v277 + 4) == 108)
      goto LABEL_540;
    v280 = *v277;
    v281 = *((unsigned __int8 *)v277 + 4);
    if (v280 == 1735549292 && v281 == 101)
      goto LABEL_540;
  }
  else if (v276 == 4 && *v277 == 2037279092)
  {
LABEL_540:
    llvm::Module::setCodeModel();
    v275 = *(_QWORD *)(v190 + 184);
  }
LABEL_541:
  if ((*(_DWORD *)(v275 + 92) & 0x200) != 0)
  {
    llvm::Module::setRtLibUseGOT(*(llvm::Module **)(v190 + 200));
    v275 = *(_QWORD *)(v190 + 184);
  }
  if ((*(_QWORD *)(v275 + 40) & 0x1800000000) != 0)
  {
    llvm::Module::setUwtable();
    v275 = *(_QWORD *)(v190 + 184);
  }
  if (((*(_QWORD *)(v275 + 96) >> 34) & 3) - 1 <= 1)
    llvm::Module::setFramePointer();
  sub_22F25C350((char **)v190);
  v286 = *(_QWORD *)(v190 + 792);
  if (v286)
    (*(void (**)(uint64_t))(*(_QWORD *)v286 + 104))(v286);
  v287 = *(_QWORD *)(v190 + 800);
  if (v287)
    (*(void (**)(uint64_t))(*(_QWORD *)v287 + 240))(v287);
  v288 = **(_QWORD **)(v190 + 184);
  if ((v288 & 0x20000000000) != 0)
  {
    sub_22F29936C(v190);
    v288 = **(_QWORD **)(v190 + 184);
  }
  if ((v288 & 0x180000000000) != 0)
    sub_22F2993DC(v190);
  v289 = *(_QWORD *)(v190 + 824);
  if (v289)
    sub_22E49EB20(v289);
  v290 = *(_QWORD *)(v190 + 184);
  if ((*(_BYTE *)(v290 + 5) & 4) != 0)
  {
    llvm::Module::getOrInsertNamedMetadata();
    sub_22F20D6D4("metal", 5uLL, __b);
    v332[0] = (void *)llvm::MDString::get();
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::addOperand();
    if ((__b[23] & 0x80000000) != 0)
      operator delete(*(void **)__b);
    v290 = *(_QWORD *)(v190 + 184);
  }
  if (*(char *)(v290 + 407) < 0)
  {
    if (!*(_QWORD *)(v290 + 392))
      goto LABEL_571;
  }
  else if (!*(_BYTE *)(v290 + 407))
  {
    goto LABEL_571;
  }
  llvm::Module::getOrInsertNamedMetadata();
  v291 = *(_QWORD *)(v190 + 184);
  if (*(char *)(v291 + 407) < 0)
  {
    sub_22E3BB2B4(__b, *(void **)(v291 + 384), *(_QWORD *)(v291 + 392));
  }
  else
  {
    v292 = v291 + 384;
    *(_OWORD *)__b = *(_OWORD *)v292;
    *(_QWORD *)&__b[16] = *(_QWORD *)(v292 + 16);
  }
  v332[0] = (void *)llvm::MDString::get();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  if ((__b[23] & 0x80000000) != 0)
    operator delete(*(void **)__b);
  v290 = *(_QWORD *)(v190 + 184);
LABEL_571:
  if (*(char *)(v290 + 1567) < 0)
  {
    if (*(_QWORD *)(v290 + 1552))
    {
LABEL_573:
      llvm::Module::setStackProtectorGuard();
      v290 = *(_QWORD *)(v190 + 184);
    }
  }
  else if (*(_BYTE *)(v290 + 1567))
  {
    goto LABEL_573;
  }
  if (*(char *)(v290 + 1591) < 0)
  {
    if (*(_QWORD *)(v290 + 1576))
    {
LABEL_576:
      llvm::Module::setStackProtectorGuardReg();
      v290 = *(_QWORD *)(v190 + 184);
    }
  }
  else if (*(_BYTE *)(v290 + 1591))
  {
    goto LABEL_576;
  }
  if (*(_DWORD *)(v290 + 84) != 0x7FFFFFFF)
  {
    llvm::Module::setStackProtectorGuardOffset(*(llvm::Module **)(v190 + 200));
    v290 = *(_QWORD *)(v190 + 184);
  }
  if (*(_DWORD *)(v290 + 52))
  {
    llvm::Module::setOverrideStackAlignment(*(llvm::Module **)(v190 + 200));
    v290 = *(_QWORD *)(v190 + 184);
  }
  if ((*(_DWORD *)(v290 + 92) & 0x80000) != 0)
    llvm::Module::addModuleFlag();
  v293 = sub_22E699F3C((_QWORD *)v190);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v293 + 24))(v293, v190);
  v294 = sub_22E699F3C((_QWORD *)v190);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v294 + 32))(v294, v190, v190 + 1512);
  sub_22E617234((uint64_t)v327, *(__int128 **)(v190 + 184));
  if ((*(_DWORD *)(*(_QWORD *)(v190 + 216) + 56) - 31) <= 1)
    llvm::Module::addModuleFlag();
  sub_22E618378((uint64_t)v327);
  sub_22E3B733C(*(_QWORD *)(v190 + 200), *(_QWORD *)(v190 + 184), *(_QWORD *)(v190 + 208));
  v295 = *(_QWORD *)(v190 + 3680);
  if (v295)
  {
    *(_BYTE *)(v295 + 184) = 1;
    sub_22E66FA74((unint64_t ***)v295);
  }
  v296 = *(_QWORD *)(v190 + 152);
  if (((*(unsigned __int16 *)(v296 + 148) | (*(unsigned __int8 *)(v296 + 150) << 16)) & 0x10000) != 0)
  {
    v297 = *(unsigned int *)(v296 + 244);
    v298 = dword_22F45C244[(v297 >> 25) & 7];
    v299 = dword_22F45C244[(v297 >> 28) & 7];
    v300 = *(unsigned __int16 *)(v296 + 248);
    v301 = dword_22F45C244[v300 & 7];
    v302 = dword_22F45C244[(v300 >> 3) & 7];
    llvm::Module::global_values(*(llvm::Module **)(v190 + 200));
    *(_OWORD *)v332 = *(_OWORD *)__b;
    v333 = *(int64x2_t *)&__b[16];
    v334 = *(int64x2_t *)&__b[32];
    v335 = *(int64x2_t *)&__b[48];
    v319 = *(int64x2_t *)&__b[64];
    v321 = *(int64x2_t *)&__b[80];
    *(_OWORD *)__pa = *(_OWORD *)&__b[96];
    v317 = *(int64x2_t *)&__b[112];
    while ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(*(int64x2_t *)v332, v319), (int32x4_t)vceqq_s64(v333, v321))), 0xFuLL))) & 1) == 0|| (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v334, *(int64x2_t *)__pa), (int32x4_t)vceqq_s64(v335, v317))), 0xFuLL))) & 1) == 0)
    {
      v303 = (llvm::GlobalValue *)sub_22E637A5C((uint64_t)v332);
      v304 = *((_DWORD *)v303 + 8) & 0xF;
      if ((v304 - 6) >= 3)
      {
        v305 = v303;
        v306 = *((_DWORD *)v303 + 8) & 0xFFFFBFFF;
        *((_DWORD *)v303 + 8) = v306;
        if (v304 == 1
          || (isDeclaration = llvm::GlobalValue::isDeclaration(v303), v306 = *((_DWORD *)v305 + 8), isDeclaration))
        {
          if ((v306 & 0x300) == 0x100)
            v308 = v301;
          else
            v308 = v302;
        }
        else if ((*((_DWORD *)v305 + 8) & 0x300) == 0x200)
        {
          v308 = v298;
        }
        else
        {
          v308 = v299;
        }
        v309 = v308 | v306 & 0xFFFFFFCF;
        *((_DWORD *)v305 + 8) = v309;
        if ((v306 & 0xF) - 7 < 2
          || v308
          && (hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage(v305),
              v309 = *((_DWORD *)v305 + 8),
              (hasExternalWeakLinkage & 1) == 0))
        {
          v309 |= 0x4000u;
        }
        *((_DWORD *)v305 + 8) = v309 & 0xFFFFFCFF;
      }
      sub_22E637B98((uint64_t)v332);
    }
  }
}

void sub_22E62766C(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned __int8 *NamedValue;
  BOOL v9;
  uint64_t v10;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 72);
  if ((_DWORD)v2)
    v3 = (v2 & 0x200000000) == 0;
  else
    v3 = 0;
  if (v3)
    sub_22F28234C(*(_QWORD *)(a1 + 808));
  if (*(_QWORD *)(a1 + 1368) != *(_QWORD *)(a1 + 1376))
    sub_22E60FD98(a1);
  v4 = *(_QWORD *)(a1 + 152);
  if ((*(_BYTE *)(v4 + 68) & 0x20) != 0 && (*(_WORD *)(v4 + 96) & 0x80) != 0)
    sub_22E62CAF8((char **)(a1 + 1072), *(_QWORD *)(a1 + 144) + 18600);
  v5 = *(uint64_t **)(a1 + 1072);
  v6 = *(uint64_t **)(a1 + 1080);
  if (v5 != v6)
  {
    *(_QWORD *)(a1 + 1072) = 0;
    *(_QWORD *)(a1 + 1080) = 0;
    *(_QWORD *)(a1 + 1088) = 0;
    v7 = v5;
    do
    {
      NamedValue = (unsigned __int8 *)sub_22E6280CC(a1, *v7, v7[1], 1);
      if (NamedValue)
        v9 = NamedValue[16] >= 4u;
      else
        v9 = 1;
      if (v9)
      {
        sub_22E624994(a1, *v7, v7[1]);
        NamedValue = (unsigned __int8 *)llvm::Module::getNamedValue();
      }
      if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)NamedValue))
      {
        if (!*(_DWORD *)(*(_QWORD *)(a1 + 152) + 72)
          || (v10 = *(_QWORD *)(a1 + 808)) == 0
          || ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 472))(v10, *v7, v7[1]) & 1) == 0)
        {
          sub_22E62CEB8(a1, *v7, v7[1]);
          if (*(_QWORD *)(a1 + 1368) != *(_QWORD *)(a1 + 1376) || *(_QWORD *)(a1 + 1072) != *(_QWORD *)(a1 + 1080))
            sub_22E62766C(a1);
        }
      }
      v7 += 2;
    }
    while (v7 != v6);
    if (v5)
      operator delete(v5);
  }
}

void sub_22E627814()
{
  _QWORD *v0;
  _OWORD *v1;
  _OWORD *v2;
  _QWORD *v3;
  const std::nothrow_t *v4;
  _OWORD *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  BOOL v18;
  int v19;
  _BOOL4 v20;
  BOOL v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  _DWORD *v26;
  int v27;
  char *v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  void *v33;
  BOOL v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t NamedValue;
  uint64_t v42;
  uint64_t v43;
  _QWORD **v46;
  _OWORD *v47;
  _OWORD *v48;
  _OWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  void *v57;
  uint64_t v58;
  _QWORD v59[774];
  char *v60;
  uint64_t v61;
  _QWORD v62[212];

  v0 = (_QWORD *)MEMORY[0x24BDAC7A8]();
  v62[210] = *MEMORY[0x24BDAC8D0];
  v1 = (_OWORD *)v0[140];
  v2 = (_OWORD *)v0[141];
  *((_OWORD *)v0 + 70) = 0u;
  v0[142] = 0;
  if (v1 == v2)
    goto LABEL_87;
  v3 = v0;
  v46 = (_QWORD **)(v0 + 35);
  v4 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  v5 = v1;
  v52 = (uint64_t)v0;
  v47 = v2;
  v48 = v1;
  do
  {
    v56 = *v5;
    v6 = (_BYTE *)(v56 & 0xFFFFFFFFFFFFFFF8);
    v60 = (char *)v62;
    v61 = 0xA00000000;
    if ((*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)(v56 & 0xFFFFFFFFFFFFFFF8) + 32))(v56 & 0xFFFFFFFFFFFFFFF8)
                   + 84) & 0x10) != 0
      && sub_22E47DA60((uint64_t)v6))
    {
      v49 = v5;
      v7 = v3[18];
      v57 = v3;
      v58 = (uint64_t)&v56;
      v59[0] = &v60;
      sub_22EF73E64(v7, (uint64_t)v6, (uint64_t (*)(uint64_t, uint64_t))sub_22E6519BC, (uint64_t)&v57);
      goto LABEL_18;
    }
    if ((*(_BYTE *)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v6 + 32))(v6) + 84) & 0x10) == 0
      || !sub_22EFC0D64((uint64_t)v6))
    {
      goto LABEL_51;
    }
    if ((v6[29] & 1) == 0)
      goto LABEL_16;
    sub_22EFC8E88((uint64_t)v6);
    v9 = *(uint64_t **)v8;
    v10 = *(unsigned int *)(v8 + 8);
    v11 = *(uint64_t **)v8;
    if ((_DWORD)v10)
    {
      v14 = 8 * v10;
      v11 = *(uint64_t **)v8;
      while (*(_WORD *)(*v11 + 32) != 328)
      {
        ++v11;
        v14 -= 8;
        if (!v14)
          goto LABEL_16;
      }
    }
    if (v11 == &v9[v10])
    {
LABEL_16:
      v12 = 0;
    }
    else
    {
      do
      {
        v13 = *v9++;
        v12 = v13;
      }
      while (*(_WORD *)(v13 + 32) != 328);
    }
    v49 = v5;
    v15 = *(unsigned int *)(v12 + 36);
    if ((_DWORD)v15)
    {
      v36 = 0;
      v37 = 0;
      v50 = (uint64_t)v6;
      while (!sub_22F29B454(*(_QWORD *)(v12 + 40), v37))
      {
LABEL_76:
        ++v37;
        v36 += 16;
        if (v37 >= v15)
          goto LABEL_18;
      }
      v38 = (unint64_t)v6;
      if (sub_22EFBF86C((uint64_t)v6, (unint64_t *)&v57, 0))
      {
        v57 = 0;
        if (sub_22EFBF86C((uint64_t)v6, (unint64_t *)&v57, 0))
          v38 = (unint64_t)v57;
        else
          v38 = 0;
      }
      if (sub_22E462B18(v38))
        v38 = v38 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v38) + 96) & 0x80) == 0);
      v39 = (uint64_t *)(*(_QWORD *)(v12 + 40) + v36);
      v40 = *v39;
      v51 = v39[1];
      v53 = v53 & 0xFFFFFFFF00000000 | v37;
      sub_22E624994(v52, v38, v53);
      NamedValue = llvm::Module::getNamedValue();
      if (!NamedValue)
      {
        if (sub_22EFBF86C(v50, (unint64_t *)&v57, 0))
        {
          sub_22E631870();
          NamedValue = llvm::Module::getNamedValue();
        }
        else
        {
          v42 = sub_22E46D978(v46, v38, v53);
          v43 = sub_22E46F2EC((uint64_t)v46, v42);
          NamedValue = sub_22E6336F0(v52, v38, v53, v43, 0, 0, 1);
        }
      }
      v55 = 0uLL;
      v57 = v59;
      v58 = 0x100000000;
      v6 = (_BYTE *)v50;
      if (v51 >= 5)
      {
        if (*(_DWORD *)v40 == 1751347809 && *(_BYTE *)(v40 + 4) == 61)
        {
          *(_QWORD *)&v55 = v40 + 5;
          *((_QWORD *)&v55 + 1) = v51 - 5;
          goto LABEL_73;
        }
        if (v51 == 7 && *(_DWORD *)v40 == 1634100580 && *(_DWORD *)(v40 + 3) == 1953264993)
          goto LABEL_73;
      }
      v59[0] = v40;
      v59[1] = v51;
      LODWORD(v58) = 1;
LABEL_73:
      v54 = NamedValue;
      sub_22F29B4E4((uint64_t)&v60, &v54, &v55, (uint64_t)&v57);
      if (v57 != v59)
        free(v57);
      v15 = *(unsigned int *)(v12 + 36);
      goto LABEL_76;
    }
LABEL_18:
    v3 = (_QWORD *)v52;
    v16 = sub_22E631D88(v52, v56, *((uint64_t *)&v56 + 1));
    v17 = v16;
    if (v16)
      v18 = *((_BYTE *)v16 + 16) == 2;
    else
      v18 = 0;
    if (v18)
      v17 = (unsigned int *)*((_QWORD *)v16 - 4);
    v19 = sub_22EFB948C(v56 & 0xFFFFFFFFFFFFFFF8);
    v20 = v19 == 1;
    if (v19 == 4)
      v20 = 1;
    v21 = !v20;
    if (v20)
      v22 = 7;
    else
      v22 = 5;
    v23 = v17[8];
    v24 = v23 & 0xFFFFFFC0;
    if (v21)
      v24 = v17[8];
    v25 = v24 & 0xFFFFFFF0 | v22;
    v17[8] = v25;
    if (v19 == 1)
    {
      v1 = v48;
      goto LABEL_38;
    }
    v1 = v48;
    if (v19 == 4)
      goto LABEL_38;
    if ((v23 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v17) & 1) == 0)
    {
      v25 = v17[8];
LABEL_38:
      v17[8] = v25 | 0x4000;
    }
    v26 = *(_DWORD **)(v52 + 216);
    v27 = v26[19];
    if ((v27 - 8) >= 2 && v27 != 5)
    {
      llvm::Value::getName((llvm::Value *)v17);
      llvm::Module::getOrInsertComdat();
      llvm::GlobalObject::setComdat();
      v26 = *(_DWORD **)(v52 + 216);
    }
    v29 = v60;
    v30 = v61;
    v31 = &v60[168 * v61];
    v57 = v26;
    if ((_DWORD)v61)
    {
      v32 = v61;
      while (1)
      {
        v33 = operator new(168 * v32, v4);
        if (v33)
          break;
        v34 = v32 > 1;
        v32 >>= 1;
        if (!v34)
          goto LABEL_48;
      }
      v35 = v33;
      sub_22E651EB0((uint64_t)v29, v31, (uint64_t *)&v57, v30, (uint64_t)v33, v32);
      operator delete(v35);
    }
    else
    {
LABEL_48:
      sub_22E651EB0((uint64_t)v29, v31, (uint64_t *)&v57, v30, 0, 0);
    }
    sub_22E618EBC((uint64_t)&v57, v52, 0);
    sub_22F2983F0(&v57, (llvm::Function *)v17, (uint64_t *)v60, v61);
    sub_22E619434((uint64_t)&v57);
    v2 = v47;
    v5 = v49;
LABEL_51:
    sub_22F29D46C(&v60);
    ++v5;
  }
  while (v5 != v2);
  sub_22E62766C((uint64_t)v3);
  if (v3[140] != v3[141])
    sub_22E627814(v3);
LABEL_87:
  if (v1)
    operator delete(v1);
}

void sub_22E627E20(uint64_t a1, uint64_t *a2, void **a3)
{
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t BitCast;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15[7];
  void **v16[8];
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _BYTE v20[128];
  _QWORD v21[3];
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v16[7] = a3;
  if (*a2 != a2[1])
  {
    llvm::FunctionType::get();
    llvm::Module::getDataLayout(*(llvm::Module **)(a1 + 200));
    llvm::PointerType::get();
    v5 = (void **)llvm::StructType::get();
    v17 = a1;
    v18 = v20;
    v19 = 0x1000000000;
    memset(v21, 0, sizeof(v21));
    v16[0] = (void **)&v17;
    memset(&v16[1], 0, 27);
    v22 = 1;
    v16[5] = 0;
    v16[6] = v5;
    v6 = *a2;
    v7 = a2[1];
    if (*a2 != v7)
    {
      v8 = (uint64_t)v5;
      do
      {
        v15[0] = (uint64_t)v16[0];
        v15[1] = (uint64_t)v16;
        v15[2] = *((unsigned int *)v16[0] + 4);
        v15[5] = 0;
        v15[6] = v8;
        memset(&v15[3], 0, 11);
        BYTE1(v16[4]) = 1;
        if (v8)
          BYTE2(v15[4]) = (*(_DWORD *)(v8 + 8) & 0x200) != 0;
        sub_22F246F08(v15);
        BitCast = llvm::ConstantExpr::getBitCast();
        v10 = v15[0];
        v11 = *(unsigned int *)(v15[0] + 16);
        if (v11 >= *(unsigned int *)(v15[0] + 20))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v11 = *(unsigned int *)(v10 + 16);
        }
        *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v11) = BitCast;
        ++*(_DWORD *)(v10 + 16);
        if (*(_QWORD *)(v6 + 16))
        {
          v12 = llvm::ConstantExpr::getBitCast();
          v13 = v15[0];
          v14 = *(unsigned int *)(v15[0] + 16);
          if (v14 >= *(unsigned int *)(v15[0] + 20))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v14 = *(unsigned int *)(v13 + 16);
          }
          *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8 * v14) = v12;
          ++*(_DWORD *)(v13 + 16);
        }
        else
        {
          sub_22F247080(v15, *(llvm::ConstantPointerNull **)(a1 + 96));
        }
        sub_22F2759F0(v15, (uint64_t *)v16);
        v6 += 24;
      }
      while (v6 != v7);
    }
    v15[0] = *(unsigned __int8 *)(a1 + 130);
    sub_22F2999C8((uint64_t)v16);
    llvm::GlobalObject::setAlignment();
    a2[1] = *a2;
    v16[0] = (void **)v21;
    sub_22E3CEB30(v16);
    if (v18 != v20)
      free(v18);
  }
}

uint64_t sub_22E6280CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  unint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v4 = a4;
  v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_DWORD *)(v8 + 28);
  if ((v9 & 0x7F) == 0x37 || (v9 & 0x7F) == 0x39)
  {
    sub_22E46A4BC(a1, a2, a3, 0, 0, 0, a4);
    return v15;
  }
  else
  {
    v10 = v9 & 0x7E;
    if ((v10 - 54) <= 3)
    {
      v11 = a1 + 280;
      v12 = sub_22E46C3D4((_QWORD **)(a1 + 280), (_QWORD *)v8);
LABEL_5:
      v13 = sub_22E46F2EC(v11, v12);
      return sub_22E6336F0(a1, a2, a3, v13, 0, 0, v4);
    }
    if ((v10 - 52) <= 5)
    {
      v11 = a1 + 280;
      v12 = sub_22E46D978((_QWORD **)(a1 + 280), a2, a3);
      goto LABEL_5;
    }
    return sub_22E6315B8(a1, v8, 0, a4);
  }
}

double sub_22E6281E0@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  if (a1[33])
  {
    if ((*(_WORD *)(a1[19] + 96) & 0x80) == 0)
      return sub_22E66B2C8((uint64_t *)a1[33], a2, a3);
    v12 = a3;
    v13 = a1;
    v11 = a2;
    v4 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
    if (sub_22F1151E0(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0)))
    {
      v5 = sub_22E699F3C(v13);
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 304))(v5);
      a1 = v13;
      a2 = v11;
      a3 = v12;
      if (!v6)
        return sub_22E66B2C8((uint64_t *)a1[33], a2, a3);
    }
    else
    {
      v7 = sub_22F115220(*v4);
      a2 = v11;
      a3 = v12;
      a1 = v13;
      if (!v7)
        return sub_22E66B2C8((uint64_t *)a1[33], a2, a3);
      v8 = sub_22E699F3C(v13);
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 312))(v8);
      a2 = v11;
      a3 = v12;
      v10 = v9;
      a1 = v13;
      if (!v10)
        return sub_22E66B2C8((uint64_t *)a1[33], a2, a3);
    }
  }
  *(_DWORD *)a3 = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  return result;
}

uint64_t sub_22E6282B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;

  result = *(_QWORD *)(a1 + 264);
  if (result)
  {
    v4 = *(_OWORD *)(a3 + 16);
    v5[0] = *(_OWORD *)a3;
    v5[1] = v4;
    v6 = *(_QWORD *)(a3 + 32);
    result = sub_22E66B58C(result, (uint64_t)v5);
    if (result)
      return llvm::Instruction::setMetadata();
  }
  return result;
}

uint64_t sub_22E628310(uint64_t a1, int a2, void *a3, size_t a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v14[3];
  __int16 v15;

  v8 = sub_22F41A810(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 32), 4, "%0", 2uLL);
  v9 = *(_QWORD *)(a1 + 208);
  *(_DWORD *)(v9 + 312) = a2;
  *(_DWORD *)(v9 + 316) = v8;
  if (*(char *)(v9 + 311) < 0)
  {
    **(_BYTE **)(v9 + 288) = 0;
    *(_QWORD *)(v9 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v9 + 288) = 0;
    *(_BYTE *)(v9 + 311) = 0;
  }
  v14[0] = (unsigned __int8 *)(v9 + 320);
  v14[1] = 0;
  v14[2] = (unsigned __int8 *)v9;
  v15 = 1;
  *(_BYTE *)(v9 + 320) = 0;
  *(_DWORD *)(v9 + 664) = 0;
  v10 = *(unsigned int *)(v9 + 776);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(v9 + 768);
    v12 = 56 * v10;
    do
    {
      if (*(char *)(v11 + v12 - 9) < 0)
        operator delete(*(void **)(v11 + v12 - 32));
      v12 -= 56;
    }
    while (v12);
  }
  *(_DWORD *)(v9 + 776) = 0;
  sub_22E3B89A8(v14, a3, a4);
  return sub_22E3BB0B8((uint64_t)v14);
}

void sub_22E628400(uint64_t a1, uint64_t a2, const char *a3)
{
  int v6;
  size_t v7;
  size_t v8;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  void **__dst;
  size_t v27;
  int64_t v28;

  v6 = sub_22F41A810(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 32), 4, "cannot compile this %0 yet", 0x1AuLL);
  v7 = strlen(a3);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    v27 = v8;
    v28 = v11 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v28) = v7;
  p_dst = (void **)&__dst;
  if (v7)
LABEL_8:
    memcpy(p_dst, a3, v8);
  *((_BYTE *)p_dst + v8) = 0;
  v12 = *(_QWORD *)(a1 + 208);
  sub_22F0D5A50(a2);
  *(_DWORD *)(v12 + 312) = v13;
  *(_DWORD *)(v12 + 316) = v6;
  if (*(char *)(v12 + 311) < 0)
  {
    **(_BYTE **)(v12 + 288) = 0;
    *(_QWORD *)(v12 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v12 + 288) = 0;
    *(_BYTE *)(v12 + 311) = 0;
  }
  v22 = (unsigned __int8 *)(v12 + 320);
  v23 = 0;
  v24 = v12;
  v25 = 1;
  *(_BYTE *)(v12 + 320) = 0;
  *(_DWORD *)(v12 + 664) = 0;
  v14 = *(unsigned int *)(v12 + 776);
  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(v12 + 768);
    v16 = 56 * v14;
    do
    {
      if (*(char *)(v15 + v16 - 9) < 0)
        operator delete(*(void **)(v15 + v16 - 32));
      v16 -= 56;
    }
    while (v16);
  }
  *(_DWORD *)(v12 + 776) = 0;
  if (v28 >= 0)
    v17 = (void **)&__dst;
  else
    v17 = __dst;
  if (v28 >= 0)
    v18 = HIBYTE(v28) & 0x7F;
  else
    v18 = v27;
  sub_22E3B89A8(&v22, v17, v18);
  sub_22F0D4E74(a2);
  v20 = v19;
  v21 = v22;
  if (!v22)
  {
    v21 = (unsigned __int8 *)sub_22E3B8AAC(v23);
    v22 = v21;
  }
  sub_22E4D6448((uint64_t)(v21 + 336), v20, 1);
  sub_22E3BB0B8((uint64_t)&v22);
  if (SHIBYTE(v28) < 0)
    operator delete(__dst);
}

void sub_22E6285D0(uint64_t a1, uint64_t a2, const char *a3)
{
  int v6;
  size_t v7;
  size_t v8;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  size_t v17;
  unsigned __int8 *v18[3];
  __int16 v19;
  void **__dst;
  size_t v21;
  int64_t v22;

  v6 = sub_22F41A810(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 32), 4, "cannot compile this %0 yet", 0x1AuLL);
  v7 = strlen(a3);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    v21 = v8;
    v22 = v11 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v22) = v7;
  p_dst = (void **)&__dst;
  if (v7)
LABEL_8:
    memcpy(p_dst, a3, v8);
  *((_BYTE *)p_dst + v8) = 0;
  v12 = *(_QWORD *)(a1 + 208);
  *(_DWORD *)(v12 + 312) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(v12 + 316) = v6;
  if (*(char *)(v12 + 311) < 0)
  {
    **(_BYTE **)(v12 + 288) = 0;
    *(_QWORD *)(v12 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v12 + 288) = 0;
    *(_BYTE *)(v12 + 311) = 0;
  }
  v18[0] = (unsigned __int8 *)(v12 + 320);
  v18[1] = 0;
  v18[2] = (unsigned __int8 *)v12;
  v19 = 1;
  *(_BYTE *)(v12 + 320) = 0;
  *(_DWORD *)(v12 + 664) = 0;
  v13 = *(unsigned int *)(v12 + 776);
  if ((_DWORD)v13)
  {
    v14 = *(_QWORD *)(v12 + 768);
    v15 = 56 * v13;
    do
    {
      if (*(char *)(v14 + v15 - 9) < 0)
        operator delete(*(void **)(v14 + v15 - 32));
      v15 -= 56;
    }
    while (v15);
  }
  *(_DWORD *)(v12 + 776) = 0;
  if (v22 >= 0)
    v16 = (void **)&__dst;
  else
    v16 = __dst;
  if (v22 >= 0)
    v17 = HIBYTE(v22) & 0x7F;
  else
    v17 = v21;
  sub_22E3B89A8(v18, v16, v17);
  sub_22E3BB0B8((uint64_t)v18);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst);
}

uint64_t sub_22E62876C(uint64_t result, llvm::GlobalValue *this)
{
  int v3;
  _QWORD *v4;
  int v5;
  _DWORD *v6;
  int v7;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;

  v3 = *((_DWORD *)this + 8);
  if ((v3 & 0xFu) - 7 < 2)
    goto LABEL_41;
  v4 = (_QWORD *)result;
  if ((v3 & 0x30) != 0)
  {
    result = llvm::GlobalValue::hasExternalWeakLinkage(this);
    if (!(_DWORD)result)
      goto LABEL_41;
    v3 = *((_DWORD *)this + 8);
  }
  if ((v3 & 0x300) == 0x100)
    goto LABEL_6;
  v6 = (_DWORD *)v4[27];
  if (v6[17] == 15 && v6[18] == 1)
  {
    if ((v3 & 0xF) == 1 || (result = llvm::GlobalValue::isDeclaration(this), (_DWORD)result))
    {
      if (*((_BYTE *)this + 16) == 3 && ((*((_BYTE *)this + 33) & 0x1C) == 0 || (*(_BYTE *)(v4[23] + 5) & 0x40) != 0))
        goto LABEL_6;
    }
  }
  v7 = v6[19];
  if (v7 == 1)
  {
    result = llvm::GlobalValue::hasExternalWeakLinkage(this);
    if ((result & 1) != 0)
      goto LABEL_6;
    v7 = v6[19];
    if (v7 == 1)
      goto LABEL_41;
  }
  if (v7 == 5 && v6[17] == 15)
    goto LABEL_41;
  if (v7 != 3)
  {
LABEL_6:
    v5 = 0;
    goto LABEL_42;
  }
  v9 = v4[23];
  v10 = *(_DWORD *)(v9 + 656);
  if (!v10 || (*(_DWORD *)(v4[19] + 52) & 0x10) != 0)
  {
    if ((*((_DWORD *)this + 8) & 0xF) == 1 || (result = llvm::GlobalValue::isDeclaration(this), (_DWORD)result))
    {
      if (v10 == 1)
      {
        result = llvm::GlobalValue::hasExternalWeakLinkage(this);
        if ((result & 1) != 0)
          goto LABEL_6;
      }
      if ((v6[14] - 23) < 2)
        goto LABEL_6;
      v12 = *(_DWORD *)(v9 + 92);
      if ((v12 & 2) == 0)
        goto LABEL_6;
      if (*((_BYTE *)this + 16))
      {
        if (*((_BYTE *)this + 16) != 3 || (*((_BYTE *)this + 33) & 0x1C) != 0)
          goto LABEL_6;
      }
      else if (v10 || (v12 & 0x200) != 0)
      {
        goto LABEL_6;
      }
    }
LABEL_41:
    v5 = 0x4000;
    goto LABEL_42;
  }
  if (*((_BYTE *)this + 16))
    goto LABEL_6;
  result = llvm::GlobalValue::canBenefitFromLocalAlias(this);
  if (!(_DWORD)result)
    goto LABEL_6;
  v11 = *(unsigned __int16 *)(v4[19] + 148) | (*(unsigned __int8 *)(v4[19] + 150) << 16);
  if ((v11 & 0x20000) != 0)
    v5 = 0;
  else
    v5 = ~(v11 >> 4) & 0x4000;
LABEL_42:
  *((_DWORD *)this + 8) = *((_DWORD *)this + 8) & 0xFFFFBFFF | v5;
  return result;
}

void sub_22E628944(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;

  v3 = a3 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu) - 13 >= 0x3E)
    v3 = 0;
  if (v3 && (*(_DWORD *)(v3 + 28) & 0x7F) == 0x39)
    (*(void (**)(_QWORD, unsigned int *, unint64_t, uint64_t))(**(_QWORD **)(a1 + 224) + 392))(*(_QWORD *)(a1 + 224), a2, v3, a3 & 7);
  else
    sub_22E628990(a1, a2, v3);
}

void sub_22E628990(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  unsigned int *v9;
  int v10;

  if (a3 && sub_22EFB948C(a3) >= 3)
  {
    if (sub_22E49F808(a3))
    {
      v9 = a2 + 8;
      v10 = 256;
LABEL_12:
      *v9 = *v9 & 0xFFFFFCFF | v10;
      return;
    }
    if ((*(_BYTE *)(a3 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a3);
      v6 = *((unsigned int *)v5 + 2);
      if ((_DWORD)v6)
      {
        v7 = 8 * v6;
        for (i = *v5; *(_WORD *)(*(_QWORD *)i + 32) != 155; i += 8)
        {
          v7 -= 8;
          if (!v7)
            return;
        }
      }
      else
      {
        i = *v5;
      }
      if (i != *v5 + 8 * v6)
      {
        v9 = a2 + 8;
        if ((a2[8] & 0xF) != 1 && (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)a2) & 1) == 0)
        {
          v10 = 512;
          goto LABEL_12;
        }
      }
    }
  }
}

uint64_t sub_22E628A68(uint64_t a1, llvm::GlobalValue *this, uint64_t a3)
{
  int v5;
  unsigned int v6;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  unsigned int v13;

  v5 = *((_DWORD *)this + 8);
  if ((v5 & 0x300) != 0x100)
  {
    if ((v5 & 0xFu) - 7 <= 1)
    {
      v13 = v5 & 0xFFFFBFCF;
    }
    else
    {
      if (!a3)
        goto LABEL_8;
      v6 = sub_22EFB9558(a3);
      if ((v6 & 0x20) == 0
        && (*(_WORD *)(*(_QWORD *)(a1 + 152) + 148) & 0x8000) == 0
        && ((*((_DWORD *)this + 8) & 0xF) == 1 || (llvm::GlobalValue::isDeclaration(this) & 1) != 0))
      {
        goto LABEL_8;
      }
      v8 = (v6 >> 3) & 3;
      if (v8)
        v9 = 32;
      else
        v9 = 16;
      v10 = v8 == 2;
      if (v8 == 2)
        v11 = 0;
      else
        v11 = v9;
      v12 = *((_DWORD *)this + 8);
      v13 = v12 & 0xFFFFFFCF | v11;
      *((_DWORD *)this + 8) = v13;
      if ((v12 & 0xFu) - 7 >= 2)
      {
        if (v10 || (llvm::GlobalValue::hasExternalWeakLinkage(this) & 1) != 0)
          goto LABEL_8;
        v13 = *((_DWORD *)this + 8);
      }
    }
    *((_DWORD *)this + 8) = v13 | 0x4000;
  }
LABEL_8:
  sub_22E62876C(a1, this);
  return llvm::GlobalValue::setPartition();
}

void sub_22E628BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;

  v4 = ((*(unsigned __int16 *)(*(_QWORD *)(a1 + 184) + 104) >> 5) & 3) + 1;
  if ((*(_BYTE *)(a3 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a3);
    v6 = *(uint64_t **)v5;
    v7 = *(unsigned int *)(v5 + 8);
    v8 = *(uint64_t **)v5;
    if ((_DWORD)v7)
    {
      v9 = 8 * v7;
      v8 = *(uint64_t **)v5;
      while (*(_WORD *)(*v8 + 32) != 326)
      {
        ++v8;
        v9 -= 8;
        if (!v9)
          goto LABEL_33;
      }
    }
    if (v8 != &v6[v7])
    {
      do
      {
        v11 = *v6++;
        v10 = v11;
      }
      while (*(_WORD *)(v11 + 32) != 326);
      LOBYTE(v4) = 0;
      v12 = *(uint64_t **)(v10 + 40);
      switch(*(_DWORD *)(v10 + 36))
      {
        case 0xA:
          v13 = *v12;
          v14 = *((unsigned __int16 *)v12 + 4);
          v16 = v13 == 0x78652D6C61636F6CLL && v14 == 25445;
          LOBYTE(v4) = 4 * v16;
          break;
        case 0xC:
          if (*v12 ^ 0x2D6C616974696E69 | *((unsigned int *)v12 + 2) ^ 0x63657865)
            LOBYTE(v4) = 0;
          else
            LOBYTE(v4) = 3;
          break;
        case 0xD:
          v17 = *v12;
          v18 = *(uint64_t *)((char *)v12 + 5);
          v20 = v17 == 0x79642D6C61636F6CLL && v18 == 0x63696D616E79642DLL;
          LOBYTE(v4) = 2 * v20;
          break;
        case 0xE:
          v21 = *v12;
          v22 = *(uint64_t *)((char *)v12 + 6);
          LOBYTE(v4) = v21 == 0x642D6C61626F6C67 && v22 == 0x63696D616E79642DLL;
          break;
        default:
          break;
      }
    }
  }
LABEL_33:
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a2 + 32) & 0xFFFFE3FF | ((v4 & 7) << 10);
}

void sub_22E628D48(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _OWORD *a5)
{
  int Key;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void **v22;
  void **v23;
  void **v24;
  void *v25;
  int v26;
  void **v27;
  uint64_t v28;
  size_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _OWORD *v35;
  void *__n;
  void *v37;
  __int128 v38;
  void *__p[2];
  uint64_t v40;
  __int128 v41;
  void **v42;
  size_t v43;
  __int128 v44;
  void *__s1[2];
  uint64_t v46;
  void *v47[2];
  char v48;

  if ((*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)a4 + 32))(a4) + 84) & 0x10) != 0)
  {
    sub_22E6290C8(v47, a1, a2, a3, a4, 1);
    Key = llvm::StringMapImpl::FindKey();
    if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 1568))
      goto LABEL_48;
    v35 = a5;
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 1560) + 8 * Key);
    v12 = *(_QWORD *)(v11 + 8);
    v13 = *(unsigned int *)(v11 + 16);
    v14 = v12 & 0xFFFFFFFFFFFFFFF8;
    v15 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8) + 32))(v12 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFF8;
    if (v15)
      v16 = (*(_DWORD *)(v15 + 28) & 0x7Eu) - 58 > 0xFFFFFFF9;
    else
      v16 = 0;
    if (!v16)
      v15 = *(_QWORD *)(v15 + 48);
    v17 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v15 + 112) + 104), *(_QWORD *)(v15 + 112));
    v37 = (void *)v13;
    sub_22E6290C8(__s1, a1, v12, v13, v17, 0);
    v18 = HIBYTE(v46);
    v19 = HIBYTE(v46) & 0x7F;
    __n = __s1[1];
    if (v46 >= 0)
      v20 = (void *)(HIBYTE(v46) & 0x7F);
    else
      v20 = __s1[1];
    if (v48 >= 0)
      v21 = (void *)(v48 & 0x7F);
    else
      v21 = v47[1];
    if (v48 >= 0)
      v22 = v47;
    else
      v22 = (void **)v47[0];
    if (v20 == v21)
    {
      if (v46 < 0)
      {
        v25 = __s1[0];
        if (!memcmp(__s1[0], v22, (size_t)__s1[1]))
        {
LABEL_47:
          operator delete(v25);
LABEL_48:
          if (v48 < 0)
            operator delete(v47[0]);
          return;
        }
      }
      else
      {
        if ((v46 & 0x7F00000000000000) == 0)
          goto LABEL_48;
        v23 = __s1;
        v24 = v22;
        while (*(unsigned __int8 *)v23 == *(unsigned __int8 *)v24)
        {
          v23 = (void **)((char *)v23 + 1);
          v24 = (void **)((char *)v24 + 1);
          if (!--v19)
            goto LABEL_45;
        }
      }
    }
    v26 = llvm::StringMapImpl::FindKey();
    if (v26 != -1 && v26 != (unint64_t)*(unsigned int *)(a1 + 1568))
      llvm::StringMapImpl::RemoveKey();
    if (v18 < 0)
    {
      sub_22E3BB2B4(__p, __s1[0], (unint64_t)__n);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)__s1;
      v40 = v46;
    }
    if (v40 >= 0)
      v27 = __p;
    else
      v27 = (void **)__p[0];
    v28 = v12 & 7;
    *(_QWORD *)&v41 = v12;
    *((_QWORD *)&v41 + 1) = v37;
    if (v40 >= 0)
      v29 = HIBYTE(v40) & 0x7F;
    else
      v29 = (size_t)__p[1];
    v42 = v27;
    v43 = v29;
    v44 = v41;
    v30 = sub_22E63B828((llvm::StringMapImpl *)(a1 + 1560), v27, v29, &v44);
    if (SHIBYTE(v40) < 0)
      operator delete(__p[0]);
    v31 = *v30 + 24;
    v32 = *(_QWORD *)*v30;
    __p[0] = (void *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v14 + 32))(v14) & 0xFFFFFFFFFFFFFFF8 | v28);
    __p[1] = v37;
    v33 = (_QWORD *)sub_22E629AD4(a1 + 1512, (__int128 *)__p);
    *v33 = v31;
    v33[1] = v32;
    v38 = *(_OWORD *)v33;
    v34 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF8) + 32))(a2 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFF8 | a2 & 7;
    if (v34 == ((*(uint64_t (**)(unint64_t))(*(_QWORD *)v14 + 32))(v14) & 0xFFFFFFFFFFFFFFF8 | v28)
      && (_DWORD)v37 == (_DWORD)a3)
    {
      *v35 = v38;
    }
    if (llvm::Module::getNamedValue())
    {
      WORD4(v41) = 260;
      __p[0] = __s1;
      llvm::Value::setName();
      v18 = HIBYTE(v46);
    }
LABEL_45:
    if ((v18 & 0x80) == 0)
      goto LABEL_48;
    v25 = __s1[0];
    goto LABEL_47;
  }
}

void sub_22E6290C8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  void **v12;
  uint64_t *v13;
  char v14;
  int v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  const void *v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  _QWORD *v26;
  const char *v27;
  char *v28;
  _BYTE *v29;
  char *v30;
  void **v31;
  unsigned int *v32;
  size_t v33;
  unsigned int v34;
  unsigned int *v35;
  size_t v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned __int8 v59;
  const char *p_p;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  int v65;
  int v66;
  BOOL v67;
  _BYTE *v68;
  void *v69;
  unint64_t v70;
  uint64_t v71;
  BOOL v72;
  _DWORD *v73;
  void **v74;
  char *v75;
  size_t v76;
  uint64_t *i;
  uint64_t *v78;
  char v79;
  BOOL v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  const void *v86;
  uint64_t v87;
  uint64_t v88;
  size_t v89;
  const void *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  size_t v97;
  _BYTE *v98;
  size_t v99;
  BOOL v100;
  _DWORD *v101;
  _BYTE *v102;
  char *v103;
  _BYTE *v104;
  llvm::raw_ostream *v105;
  _BYTE *v106;
  _BYTE v107[24];
  void *v108;
  void *v109[4];
  uint64_t v110;
  void *__p;
  char v112;
  __int128 v113;
  uint64_t v114;
  const void *v115;
  size_t v116;
  void *v117;
  __int128 v118;
  _QWORD v119[34];

  v119[32] = *MEMORY[0x24BDAC8D0];
  v12 = v109;
  v117 = v119;
  v118 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v107, (uint64_t)&v117);
  v13 = *(uint64_t **)(*(_QWORD *)(a2 + 224) + 16);
  v14 = *(_BYTE *)(a2 + 263);
  v15 = v14;
  v16 = v14 & 0x7F;
  if (v15 < 0)
    v16 = *(_QWORD *)(a2 + 248);
  if (v16)
    (*(void (**)(_QWORD))(*v13 + 64))(*(_QWORD *)(*(_QWORD *)(a2 + 224) + 16));
  if ((sub_22F096440(v13, a5) & 1) == 0)
  {
    v22 = *(_QWORD *)(a5 + 40);
    if ((v22 & 7) != 0)
      v23 = 0;
    else
      v23 = v22 & 0xFFFFFFFFFFFFFFF8;
    if (a5 && (*(_DWORD *)(a5 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
    {
      v24 = *(_QWORD *)(*(_QWORD *)(a5 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v24)
        v25 = *(unsigned __int8 *)(v24 + 16) - 27 > 0xFFFFFFFD;
      else
        v25 = 0;
      if (!v25)
        v24 = sub_22F10CF48(v24);
      if ((*(_QWORD *)(v24 + 16) & 0xF80000) == 0x400000)
      {
        v26 = v109[0];
        if ((unint64_t)v108 - (unint64_t)v109[0] <= 0xB)
        {
          v27 = "__regcall3__";
LABEL_32:
          v29 = (_BYTE *)llvm::raw_ostream::write((llvm::raw_ostream *)v107, v27);
          v31 = (void **)(v29 + 32);
          v30 = (char *)*((_QWORD *)v29 + 4);
LABEL_33:
          v32 = *(unsigned int **)(v23 + 16);
          v34 = *v32;
          v20 = v32 + 4;
          v33 = v34;
          if ((unint64_t)v34 <= *((_QWORD *)v29 + 3) - (_QWORD)v30)
          {
            if (v33)
            {
              memcpy(v30, v20, v33);
              *v31 = (char *)*v31 + v33;
            }
            goto LABEL_42;
          }
          v21 = (llvm::raw_ostream *)v29;
          goto LABEL_37;
        }
        *((_DWORD *)v109[0] + 2) = 1600074604;
        *v26 = *(_QWORD *)"__regcall3__";
        v30 = (char *)v109[0] + 12;
        goto LABEL_137;
      }
      if (sub_22E462B18(a5) && (a3 & 7) == 1)
      {
        v28 = (char *)v109[0];
        if ((unint64_t)v108 - (unint64_t)v109[0] <= 0xE)
        {
          v27 = "__device_stub__";
          goto LABEL_32;
        }
        *(_QWORD *)v109[0] = *(_QWORD *)"__device_stub__";
        *(_QWORD *)(v28 + 7) = *(_QWORD *)"e_stub__";
        v30 = (char *)v109[0] + 15;
LABEL_137:
        v109[0] = v30;
        v29 = v107;
        v31 = v109;
        goto LABEL_33;
      }
    }
    v35 = *(unsigned int **)(v23 + 16);
    v37 = *v35;
    v20 = v35 + 4;
    v36 = v37;
    if (v37 <= (unint64_t)v108 - (unint64_t)v109[0])
    {
      if (v36)
      {
        memcpy(v109[0], v20, v36);
        v109[0] = (char *)v109[0] + v36;
      }
      goto LABEL_42;
    }
    v21 = (llvm::raw_ostream *)v107;
LABEL_37:
    llvm::raw_ostream::write(v21, (const char *)v20);
    goto LABEL_42;
  }
  sub_22F0966E8(v13, a3 & 7 | a5, a4, (llvm::raw_ostream *)v107);
  v17 = *(_BYTE *)(a2 + 263);
  v18 = v17;
  v19 = v17 & 0x7F;
  if (v18 < 0)
    v19 = *(_QWORD *)(a2 + 248);
  if (v19
    && (*(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Eu) - 52 <= 5
    && sub_22E629EF0(a2, a3) == 7)
  {
    if (*(char *)(a2 + 263) >= 0)
      v20 = (const void *)(a2 + 240);
    else
      v20 = *(const void **)(a2 + 240);
    v21 = (llvm::raw_ostream *)v107;
    goto LABEL_37;
  }
LABEL_42:
  if (!a5
    || (*(_DWORD *)(a5 + 28) & 0x7Eu) - 58 < 0xFFFFFFFA
    || (*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)a5 + 32))(a5) + 84) & 0x10) == 0
    || (a6 & 1) != 0)
  {
    goto LABEL_118;
  }
  v38 = sub_22EFC0C9C(a5);
  if ((v38 - 2) < 2)
  {
    if ((*(_BYTE *)(a5 + 29) & 1) == 0)
      goto LABEL_73;
    v46.n128_f64[0] = sub_22EFC8E88(a5);
    v47 = *(uint64_t **)v45;
    v48 = *(unsigned int *)(v45 + 8);
    v49 = *(uint64_t **)v45;
    if ((_DWORD)v48)
    {
      v50 = 8 * v48;
      v49 = *(uint64_t **)v45;
      while (*(_WORD *)(*v49 + 32) != 128)
      {
        ++v49;
        v50 -= 8;
        if (!v50)
          goto LABEL_73;
      }
    }
    if (v49 == &v47[v48])
    {
LABEL_73:
      if (*(_DWORD *)(*(_QWORD *)(a2 + 216) + 76) == 3)
      {
        v61 = v109[0];
        if ((unint64_t)v108 - (unint64_t)v109[0] > 8)
        {
          *((_BYTE *)v109[0] + 8) = 114;
          *v61 = *(_QWORD *)".resolver";
          v109[0] = (char *)v109[0] + 9;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v107, ".resolver");
        }
      }
    }
    else
    {
      do
      {
        v57 = *v47++;
        v56 = v57;
      }
      while (*(_WORD *)(v57 + 32) != 128);
      v58 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(v56 + 40) + 8 * a4) + 16);
      v59 = (*(uint64_t (**)(_QWORD, unsigned int *, _QWORD, __n128))(**(_QWORD **)(a2 + 216) + 608))(*(_QWORD *)(a2 + 216), v58 + 4, *v58, v46);
      *(_QWORD *)&v113 = 46;
      v114 = v59;
      LOWORD(v116) = 1799;
      llvm::Twine::str((llvm::Twine *)&v113);
      if (v112 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      llvm::raw_ostream::write((llvm::raw_ostream *)v107, p_p);
      if (v112 < 0)
        operator delete(__p);
    }
  }
  else
  {
    if (v38 != 1)
    {
      if (v38 != 4)
        goto LABEL_118;
      if ((*(_BYTE *)(a5 + 29) & 1) == 0)
        goto LABEL_141;
      sub_22EFC8E88(a5);
      v40 = *(uint64_t **)v39;
      v41 = *(unsigned int *)(v39 + 8);
      v42 = *(uint64_t **)v39;
      if ((_DWORD)v41)
      {
        v94 = 8 * v41;
        v42 = *(uint64_t **)v39;
        while (*(_WORD *)(*v42 + 32) != 328)
        {
          ++v42;
          v94 -= 8;
          if (!v94)
            goto LABEL_141;
        }
      }
      if (v42 == &v40[v41])
      {
LABEL_141:
        v43 = 0;
      }
      else
      {
        do
        {
          v44 = *v40++;
          v43 = v44;
        }
        while (*(_WORD *)(v44 + 32) != 328);
      }
      v95 = v109[0];
      if (v109[0] >= v108)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v107);
      }
      else
      {
        ++v109[0];
        *v95 = 46;
      }
      v96 = *(_QWORD *)(v43 + 40) + 16 * a4;
      v98 = *(_BYTE **)v96;
      v97 = *(_QWORD *)(v96 + 8);
      v99 = v97 - 5;
      if (v97 >= 5 && (*(_DWORD *)v98 == 1751347809 ? (v100 = v98[4] == 61) : (v100 = 0), v100))
      {
        v101 = v109[0];
        if ((unint64_t)v108 - (unint64_t)v109[0] > 4)
        {
          *((_BYTE *)v109[0] + 4) = 95;
          *v101 = 1751347809;
          v103 = (char *)v109[0] + 5;
          v109[0] = (char *)v109[0] + 5;
          v102 = v107;
        }
        else
        {
          v102 = (_BYTE *)llvm::raw_ostream::write((llvm::raw_ostream *)v107, "arch_");
          v12 = (void **)(v102 + 32);
          v103 = (char *)*((_QWORD *)v102 + 4);
        }
        v104 = v98 + 5;
        if (v99 <= *((_QWORD *)v102 + 3) - (_QWORD)v103)
        {
          if (v97 >= 6)
          {
            memcpy(v103, v104, v97 - 5);
            *v12 = (char *)*v12 + v99;
          }
          goto LABEL_164;
        }
        v105 = (llvm::raw_ostream *)v102;
      }
      else
      {
        if (v97 <= (unint64_t)v108 - (unint64_t)v109[0])
        {
          if (v97)
          {
            memcpy(v109[0], v98, v97);
            v109[0] = (char *)v109[0] + v97;
          }
          goto LABEL_164;
        }
        v105 = (llvm::raw_ostream *)v107;
        v104 = *(_BYTE **)v96;
      }
      llvm::raw_ostream::write(v105, v104);
LABEL_164:
      v106 = v109[0];
      if (v109[0] >= v108)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v107);
      }
      else
      {
        ++v109[0];
        *v106 = 46;
      }
      sub_22F29CAE8(v43, a4);
      llvm::raw_ostream::operator<<();
      goto LABEL_118;
    }
    if ((*(_BYTE *)(a5 + 29) & 1) == 0)
      goto LABEL_79;
    sub_22EFC8E88(a5);
    v52 = *(uint64_t **)v51;
    v53 = *(unsigned int *)(v51 + 8);
    v54 = *(uint64_t **)v51;
    if ((_DWORD)v53)
    {
      v55 = 8 * v53;
      v54 = *(uint64_t **)v51;
      while (*(_WORD *)(*v54 + 32) != 327)
      {
        ++v54;
        v55 -= 8;
        if (!v55)
          goto LABEL_79;
      }
    }
    if (v54 == &v52[v53])
    {
LABEL_79:
      v62 = 0;
    }
    else
    {
      do
      {
        v63 = *v52++;
        v62 = v63;
      }
      while (*(_WORD *)(v63 + 32) != 327);
    }
    if (*(_DWORD *)(v62 + 36) != 7
      || ((v64 = *(int **)(v62 + 40), v65 = *v64, v66 = *(int *)((char *)v64 + 3), v65 == 1634100580)
        ? (v67 = v66 == 1953264993)
        : (v67 = 0),
          !v67))
    {
      v68 = v109[0];
      if (v109[0] >= v108)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v107);
      }
      else
      {
        ++v109[0];
        *v68 = 46;
      }
      v69 = *(void **)(a2 + 216);
      sub_22E639F38(*(_DWORD **)(v62 + 40), *(unsigned int *)(v62 + 36), &v113);
      v70 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v113 + 1) - v113) >> 3));
      __p = v69;
      if (*((_QWORD *)&v113 + 1) == (_QWORD)v113)
        v71 = 0;
      else
        v71 = v70;
      sub_22E637CF4(v113, *((unint64_t *)&v113 + 1), &__p, v71, 1);
      v72 = v116 == 0;
      if (v116)
      {
        v73 = v109[0];
        if ((unint64_t)v108 - (unint64_t)v109[0] > 4)
        {
          *((_BYTE *)v109[0] + 4) = 95;
          *v73 = 1751347809;
          v75 = (char *)v109[0] + 5;
          v109[0] = (char *)v109[0] + 5;
          v74 = (void **)v107;
        }
        else
        {
          v74 = (void **)llvm::raw_ostream::write((llvm::raw_ostream *)v107, "arch_");
          v12 = v74 + 4;
          v75 = (char *)v74[4];
        }
        v76 = v116;
        if (v116 <= (_BYTE *)v74[3] - v75)
        {
          if (v116)
          {
            memcpy(v75, v115, v116);
            *v12 = (char *)*v12 + v76;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v74, (const char *)v115);
        }
      }
      v78 = (uint64_t *)*((_QWORD *)&v113 + 1);
      for (i = (uint64_t *)v113; i != v78; i += 3)
      {
        v79 = *((_BYTE *)i + 23);
        v80 = v79 < 0;
        if (v79 >= 0)
          v81 = i;
        else
          v81 = (uint64_t *)*i;
        v82 = v79 & 0x7F;
        if (v80)
          v83 = i[1];
        else
          v83 = v82;
        if (!v72)
        {
          v84 = v109[0];
          if (v109[0] >= v108)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v107);
          }
          else
          {
            ++v109[0];
            *v84 = 95;
          }
        }
        v85 = v83 != 0;
        if (v83)
          v86 = (char *)v81 + 1;
        else
          v86 = v81;
        v87 = v83 - v85;
        if (v83 - v85 <= (unint64_t)v108 - (unint64_t)v109[0])
        {
          if (v83 != v85)
          {
            memcpy(v109[0], v86, v83 - v85);
            v109[0] = (char *)v109[0] + v87;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v107, (const char *)v86);
        }
        v72 = 0;
      }
      __p = &v113;
      sub_22E3B3CC8((void ***)&__p);
    }
  }
LABEL_118:
  if (sub_22EF74E40(*(_QWORD *)(a2 + 144), a5))
  {
    v88 = *(_QWORD *)(a2 + 152);
    if ((~*(_WORD *)(v88 + 96) & 0x880) == 0)
    {
      if (*(char *)(v88 + 695) < 0)
      {
        if (!*(_QWORD *)(v88 + 680))
          goto LABEL_122;
      }
      else if (!*(_BYTE *)(v88 + 695))
      {
        goto LABEL_122;
      }
      sub_22F29C9FC(a2, (llvm::raw_ostream *)v107, a5);
    }
  }
LABEL_122:
  v89 = *(_QWORD *)(v110 + 8);
  if (v89 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v90 = *(const void **)v110;
  if (v89 >= 0x17)
  {
    v91 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v89 | 7) != 0x17)
      v91 = v89 | 7;
    v92 = v91 + 1;
    v93 = operator new(v91 + 1);
    a1[1] = v89;
    a1[2] = v92 | 0x8000000000000000;
    *a1 = v93;
    a1 = v93;
    goto LABEL_129;
  }
  *((_BYTE *)a1 + 23) = v89;
  if (v89)
LABEL_129:
    memmove(a1, v90, v89);
  *((_BYTE *)a1 + v89) = 0;
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v107);
  if (v117 != v119)
    free(v117);
}

uint64_t sub_22E629AD4(uint64_t a1, __int128 *a2)
{
  char v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  int v23;
  uint64_t v24;

  v22 = *a2;
  v23 = 0;
  v24 = 0;
  v4 = sub_22E63B934(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t *)&v22, &v24);
  v5 = v24;
  if ((v4 & 1) != 0)
  {
    v12 = *(_DWORD *)(v24 + 16);
    v11 = *(_QWORD *)(a1 + 24);
    return v11 + 32 * v12 + 16;
  }
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_25;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_25:
    sub_22E63B9E8(a1, v7);
    v24 = 0;
    sub_22E63B934(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t *)&v22, &v24);
    v5 = v24;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)v5 | *(unsigned int *)(v5 + 8))
    --*(_DWORD *)(a1 + 12);
  *(_DWORD *)(v5 + 8) = DWORD2(v22);
  *(_QWORD *)v5 = v22;
  *(_DWORD *)(v5 + 16) = 0;
  v9 = *(char **)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v9 >= v8)
  {
    v14 = *(char **)(a1 + 24);
    v15 = (v9 - v14) >> 5;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 59)
      abort();
    v17 = v8 - (_QWORD)v14;
    if (v17 >> 4 > v16)
      v16 = v17 >> 4;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
      v18 = 0x7FFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 59)
        sub_22E3B3F8C();
      v19 = (char *)operator new(32 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = &v19[32 * v15];
    *(_OWORD *)v20 = *a2;
    v10 = v20 + 32;
    *((_QWORD *)v20 + 2) = 0;
    *((_QWORD *)v20 + 3) = 0;
    if (v9 != v14)
    {
      do
      {
        v21 = *((_OWORD *)v9 - 1);
        *((_OWORD *)v20 - 2) = *((_OWORD *)v9 - 2);
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 32;
        v9 -= 32;
      }
      while (v9 != v14);
      v9 = *(char **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 24) = v20;
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = &v19[32 * v18];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_OWORD *)v9 = *a2;
    v10 = v9 + 32;
    *((_QWORD *)v9 + 2) = 0;
    *((_QWORD *)v9 + 3) = 0;
  }
  *(_QWORD *)(a1 + 32) = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = (((unint64_t)v10 - v11) >> 5) - 1;
  *(_DWORD *)(v5 + 16) = v12;
  return v11 + 32 * v12 + 16;
}

void sub_22E629CDC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t **v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 184) + 2) & 4) == 0
    || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 15088) + 68) == 21 ? (v7 = a4 == 0) : (v7 = 0), v7))
  {
    v8 = *(_QWORD **)(a1 + 1496);
    v9 = *(_QWORD *)(a1 + 1504);
    if ((unint64_t)v8 >= v9)
    {
      v11 = *(_QWORD **)(a1 + 1488);
      v12 = 0xAAAAAAAAAAAAAAABLL * (v8 - v11) + 1;
      if (v12 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)v11) >> 3);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 > 0xAAAAAAAAAAAAAAALL)
          sub_22E3B3F8C();
        v15 = (char *)operator new(24 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[8 * (v8 - v11)];
      *(_DWORD *)v16 = a3;
      *((_QWORD *)v16 + 1) = a2;
      *((_QWORD *)v16 + 2) = 0;
      v10 = v16 + 24;
      if (v8 != v11)
      {
        do
        {
          v17 = *(_OWORD *)(v8 - 3);
          *((_QWORD *)v16 - 1) = *(v8 - 1);
          *(_OWORD *)(v16 - 24) = v17;
          v16 -= 24;
          v8 -= 3;
        }
        while (v8 != v11);
        v8 = *(_QWORD **)(a1 + 1488);
      }
      *(_QWORD *)(a1 + 1488) = v16;
      *(_QWORD *)(a1 + 1496) = v10;
      *(_QWORD *)(a1 + 1504) = &v15[24 * v14];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *(_DWORD *)v8 = a3;
      v10 = v8 + 3;
      v8[1] = a2;
      v8[2] = 0;
    }
    *(_QWORD *)(a1 + 1496) = v10;
  }
  else
  {
    v18 = *(uint64_t **)(a1 + 3816);
    if (v18)
    {
      while (1)
      {
        while (1)
        {
          v20 = (uint64_t **)v18;
          v21 = *((_DWORD *)v18 + 8);
          if (v21 <= a3)
            break;
          v18 = *v20;
          v19 = v20;
          if (!*v20)
            goto LABEL_33;
        }
        if (v21 >= a3)
          break;
        v18 = v20[1];
        if (!v18)
        {
          v19 = v20 + 1;
          goto LABEL_33;
        }
      }
    }
    else
    {
      v19 = (uint64_t **)(a1 + 3816);
      v20 = (uint64_t **)(a1 + 3816);
LABEL_33:
      v22 = (uint64_t *)v20;
      v20 = (uint64_t **)operator new(0x30uLL);
      *((_DWORD *)v20 + 8) = a3;
      v20[5] = 0;
      *v20 = 0;
      v20[1] = 0;
      v20[2] = v22;
      *v19 = (uint64_t *)v20;
      v23 = **(_QWORD **)(a1 + 3808);
      v24 = (uint64_t *)v20;
      if (v23)
      {
        *(_QWORD *)(a1 + 3808) = v23;
        v24 = *v19;
      }
      sub_22E49FD00(*(uint64_t **)(a1 + 3816), v24);
      ++*(_QWORD *)(a1 + 3824);
    }
    sub_22F2998B8((uint64_t)(v20 + 5), a2);
  }
}

uint64_t sub_22E629EF0(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  uint64_t v5;
  int v6;

  v2 = a2;
  v4 = a2 & 0xFFFFFFFFFFFFFFF8;
  v5 = sub_22EF72FFC(*(_QWORD **)(a1 + 144), a2 & 0xFFFFFFFFFFFFFFF8);
  v6 = *(_DWORD *)(v4 + 28) & 0x7F;
  if (v4 && v6 == 57)
    return (*(uint64_t (**)(_QWORD, uint64_t, unint64_t, _QWORD))(**(_QWORD **)(a1 + 224) + 400))(*(_QWORD *)(a1 + 224), v5, v4, v2 & 7);
  if (v6 == 55
    && (*(_BYTE *)(v4 + 87) & 0x20) != 0
    && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 15088) + 148) == 11)
  {
    return 7;
  }
  return sub_22E629FAC((_QWORD *)a1, v4, v5, 0);
}

uint64_t sub_22E629FAC(_QWORD *a1, unint64_t a2, int a3, int a4)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;

  if (!a3)
    return 7;
  if (sub_22E6339A4(a2))
  {
    if (a4)
      return 5;
    else
      return 4;
  }
  if (a2 && (v9 = a2, (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 > 0xFFFFFFF9)
    || (*(_DWORD *)(a2 + 28) & 0x7F) == 0x1D && (v9 = *(_QWORD *)(a2 + 48)) != 0)
  {
    v10 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v9 + 32))(v9);
    if (a3 == 1 && (*(_QWORD *)(v10 + 80) & 0x1000000000) != 0)
      return 2;
  }
  switch(a3)
  {
    case 4:
      v11 = a1[19];
      if ((*(_QWORD *)(v11 + 8) & 0x2000000000) != 0)
      {
        return 0;
      }
      else if ((*(_BYTE *)(v11 + 68) & 0x20) != 0 && (*(_WORD *)(v11 + 96) & 0x880) == 0x80)
      {
        if (sub_22E462B18(a2))
          return 0;
        else
          return 7;
      }
      else
      {
        return 5;
      }
    case 2:
      if ((*(_QWORD *)(*(_QWORD *)(a1[18] + 2000) + 8) & 0x2000000000) != 0)
        return 7;
      else
        return 3;
    case 1:
      if ((*(_BYTE *)(a1[19] + 136) & 4) != 0)
        return 7;
      else
        return 1;
    default:
      if ((*(_BYTE *)(a1[19] + 1) & 1) != 0)
        goto LABEL_87;
      v12 = *(_DWORD *)(a2 + 28);
      if ((v12 & 0x7Fu) - 60 > 6)
        goto LABEL_87;
      v13 = a1[18];
      if ((*(_BYTE *)(a1[23] + 30) & 2) == 0)
      {
        if ((v12 & 0x100) == 0)
          goto LABEL_51;
        sub_22EFC8E88(a2);
        v15 = *((unsigned int *)v14 + 2);
        if ((_DWORD)v15)
        {
          v16 = 8 * v15;
          v17 = *v14;
          while (*(_WORD *)(*(_QWORD *)v17 + 32) != 224)
          {
            v17 += 8;
            v16 -= 8;
            if (!v16)
              goto LABEL_51;
          }
        }
        else
        {
          v17 = *v14;
        }
        if (v17 == *v14 + 8 * v15)
        {
LABEL_51:
          if (!sub_22EFBC5B4(a2) && (*(_BYTE *)(a2 + 96) & 5) != 1 && !sub_22E63A8A4(a2))
          {
            if ((*(_BYTE *)(a2 + 29) & 1) == 0)
              goto LABEL_62;
            sub_22EFC8E88(a2);
            v23 = *((unsigned int *)v22 + 2);
            if ((_DWORD)v23)
            {
              v24 = 8 * v23;
              v25 = *v22;
              while (*(_WORD *)(*(_QWORD *)v25 + 32) != 281)
              {
                v25 += 8;
                v24 -= 8;
                if (!v24)
                  goto LABEL_62;
              }
            }
            else
            {
              v25 = *v22;
            }
            if (v25 == *v22 + 8 * v23)
            {
LABEL_62:
              if ((*(_BYTE *)(a2 + 29) & 1) == 0)
                goto LABEL_70;
              sub_22EFC8E88(a2);
              v27 = *((unsigned int *)v26 + 2);
              if ((_DWORD)v27)
              {
                v28 = 8 * v27;
                v29 = *v26;
                while (*(_WORD *)(*(_QWORD *)v29 + 32) != 282)
                {
                  v29 += 8;
                  v28 -= 8;
                  if (!v28)
                    goto LABEL_70;
                }
              }
              else
              {
                v29 = *v26;
              }
              if (v29 == *v26 + 8 * v27)
              {
LABEL_70:
                if ((*(_BYTE *)(a2 + 29) & 1) == 0)
                  goto LABEL_78;
                sub_22EFC8E88(a2);
                v31 = *((unsigned int *)v30 + 2);
                if ((_DWORD)v31)
                {
                  v32 = 8 * v31;
                  v33 = *v30;
                  while (*(_WORD *)(*(_QWORD *)v33 + 32) != 283)
                  {
                    v33 += 8;
                    v32 -= 8;
                    if (!v32)
                      goto LABEL_78;
                  }
                }
                else
                {
                  v33 = *v30;
                }
                if (v33 == *v30 + 8 * v31)
                {
LABEL_78:
                  if ((*(_BYTE *)(a2 + 29) & 1) == 0)
                    goto LABEL_86;
                  sub_22EFC8E88(a2);
                  v35 = *((unsigned int *)v34 + 2);
                  if ((_DWORD)v35)
                  {
                    v36 = 8 * v35;
                    v37 = *v34;
                    while (*(_WORD *)(*(_QWORD *)v37 + 32) != 284)
                    {
                      v37 += 8;
                      v36 -= 8;
                      if (!v36)
                        goto LABEL_86;
                    }
                  }
                  else
                  {
                    v37 = *v34;
                  }
                  if (v37 == *v34 + 8 * v35)
                  {
LABEL_86:
                    sub_22EFBB794(a2);
                    if (!v38 && !sub_22F29CC90(a2) && (sub_22E6342C0((uint64_t)a1, a2) & 1) == 0)
                    {
                      if (*(_DWORD *)(*(_QWORD *)(v13 + 15088) + 148) != 11)
                        goto LABEL_105;
                      if (!sub_22E49F7A8(a2))
                      {
                        v39 = (uint64_t *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
                        sub_22EF5CDF0(v13, *v39);
                        if (!HIDWORD(v40))
                        {
                          v41 = *(_QWORD *)(*(_QWORD *)(*v39 + 8) & 0xFFFFFFFFFFFFFFF0);
                          if (!v41)
                            goto LABEL_105;
                          if (*(_BYTE *)(v41 + 16) != 45)
                            goto LABEL_105;
                          v42 = sub_22F114198(*(_QWORD *)(v41 + 24));
                          v43 = sub_22EFC3B90(v42);
                          if (!v43)
                            goto LABEL_105;
                          v44 = v43;
LABEL_99:
                          if ((*(_BYTE *)(v44 + 68) & 1) != 0
                            || !sub_22E49F7A8(v44)
                            && (sub_22EF5CDF0(v13, *(_QWORD *)(*(_QWORD *)(v44 + 48) & 0xFFFFFFFFFFFFFFF0)),
                                !HIDWORD(v45)))
                          {
                            while (1)
                            {
                              v44 = *(_QWORD *)(v44 + 8) & 0xFFFFFFFFFFFFFFF8;
                              if (!v44)
                                break;
                              if ((*(_DWORD *)(v44 + 28) & 0x7Fu) - 49 < 3)
                                goto LABEL_99;
                            }
LABEL_105:
                            v46 = *(_QWORD *)(v13 + 15088);
                            if (*(_DWORD *)(v46 + 68) != 15)
                              return 10;
                            if (*(_DWORD *)(v46 + 72) != 16)
                              return 10;
                            v47 = sub_22F3687D0(v13, *(_QWORD *)(a2 + 48), 0);
                            if (v47 <= 32
                                      * sub_22EF5CDF0(v13, *(_QWORD *)(*(_QWORD *)(v13 + 16408) & 0xFFFFFFFFFFFFFFF0)))
                              return 10;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_87:
          if (sub_22E46B3EC(a2))
            return 5;
          else
            return 0;
        }
        v12 = *(_DWORD *)(a2 + 28);
      }
      if ((v12 & 0x100) == 0)
        goto LABEL_87;
      sub_22EFC8E88(a2);
      v19 = *((unsigned int *)v18 + 2);
      if ((_DWORD)v19)
      {
        v20 = 8 * v19;
        v21 = *v18;
        while (*(_WORD *)(*(_QWORD *)v21 + 32) != 147)
        {
          v21 += 8;
          v20 -= 8;
          if (!v20)
            goto LABEL_87;
        }
      }
      else
      {
        v21 = *v18;
      }
      if (v21 == *v18 + 8 * v19)
        goto LABEL_87;
      goto LABEL_51;
  }
}

uint64_t sub_22E62A49C(int a1, llvm::MDString *this)
{
  _BYTE v3[152];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)this)
    return 0;
  llvm::MDString::getString(this);
  llvm::MD5::MD5((llvm::MD5 *)v3);
  llvm::MD5::update();
  llvm::MD5::final();
  return llvm::ConstantInt::get();
}

void sub_22E62A548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Value *this, char a6)
{
  void *Name;
  size_t v13;
  uint64_t v14[3];
  uint64_t v15;
  int v16;

  v16 = 0;
  v15 = 0;
  Name = (void *)llvm::Value::getName(this);
  v14[0] = 0;
  v14[1] = a2;
  v14[2] = a3;
  sub_22E4706AC(a1, Name, v13, a4, v14, &v15, &v16, 0, a6);
  *((_QWORD *)this + 14) = v15;
  *((_WORD *)this + 9) = *((_WORD *)this + 9) & 0xC00F | (16 * v16);
}

void sub_22E62A5F4(uint64_t *a1, unint64_t a2, llvm::Function *this)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void *__p;
  void *v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  _BYTE v49[7];
  uint64_t Context;
  void *v51;
  uint64_t v52;
  _QWORD v53[10];

  v53[8] = *MEMORY[0x24BDAC8D0];
  Context = llvm::Function::getContext(this);
  v51 = v53;
  v52 = 0x800000000;
  v6 = a1[23];
  if (((*(_QWORD *)(v6 + 40) >> 35) & 3) != 0)
  {
    llvm::AttrBuilder::addUWTableAttr();
    v6 = a1[23];
  }
  if ((*(_BYTE *)(v6 + 31) & 2) != 0)
    llvm::AttrBuilder::addAttribute();
  v7 = a1[19];
  v8 = *(_QWORD *)(v7 + 8);
  if ((v8 & 0x100000000000) == 0 || (v8 & 0x600000000000) == 0x200000000000 && *(_DWORD *)(v7 + 400) == 1)
    llvm::AttrBuilder::addAttribute();
  if (!a2 || (*(_BYTE *)(a2 + 29) & 1) == 0)
    goto LABEL_18;
  sub_22EFC8E88(a2);
  v10 = *((unsigned int *)v9 + 2);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    v12 = *v9;
    while (*(_WORD *)(*(_QWORD *)v12 + 32) != 237)
    {
      v12 += 8;
      v11 -= 8;
      if (!v11)
        goto LABEL_18;
    }
  }
  else
  {
    v12 = *v9;
  }
  if (v12 == *v9 + 8 * v10)
  {
LABEL_18:
    if ((*(_WORD *)(a1[19] + 248) >> 6) - 1 <= 2)
      llvm::AttrBuilder::addAttribute();
    if (!a2)
    {
      if ((llvm::Function::hasFnAttribute() & 1) == 0 && (*(_WORD *)(a1[23] + 104) & 3) == 2)
        llvm::AttrBuilder::addAttribute();
      llvm::Function::addFnAttrs(this, (const llvm::AttrBuilder *)&Context);
      goto LABEL_100;
    }
  }
  v13 = a1[23];
  v14 = (*(_BYTE *)(v13 + 3) & 0x20) == 0 && (*(_BYTE *)(v13 + 33) & 0x18) == 0;
  v15 = sub_22E62AE6C(a2);
  v16 = v14 & ((v15 | sub_22E46A45C(a2)) ^ 1);
  if (((v16 & 1) != 0 || sub_22E4728AC(a2)) && (llvm::Function::hasFnAttribute() & 1) == 0)
  {
    llvm::AttrBuilder::addAttribute();
    llvm::AttrBuilder::addAttribute();
    if (sub_22E474EBC(a2))
      llvm::AttrBuilder::addAttribute();
    llvm::Function::removeFnAttr();
    llvm::Function::removeFnAttr();
  }
  else
  {
    if (sub_22E474EBC(a2))
    {
      llvm::AttrBuilder::addAttribute();
      goto LABEL_38;
    }
    if (sub_22E47272C(a2)
      || sub_22F24F5B4(a2) && (llvm::Function::hasFnAttribute() & 1) == 0
      || sub_22E46A45C(a2) && (llvm::Function::hasFnAttribute() & 1) == 0)
    {
      goto LABEL_38;
    }
    if ((*(_WORD *)(a1[23] + 104) & 3) == 2)
      goto LABEL_108;
    if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
    {
      memset(v49, 0, sizeof(v49));
      v43 = (void *)a2;
      v44 = a2;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      if ((sub_22E639EB4((uint64_t)&v43) & 1) != 0)
        goto LABEL_38;
      v29 = sub_22EFC20FC(a2, 1);
      if (v29)
      {
        memset(v49, 0, sizeof(v49));
        v43 = (void *)v29;
        v44 = v29;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        if (sub_22E639EB4((uint64_t)&v43))
          goto LABEL_38;
      }
      if ((*(_WORD *)(a1[23] + 104) & 3) == 1 && (*(_BYTE *)(a2 + 82) & 1) == 0)
      {
LABEL_108:
        if ((llvm::Function::hasFnAttribute() & 1) == 0)
LABEL_38:
          llvm::AttrBuilder::addAttribute();
      }
    }
  }
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v18 = *((unsigned int *)v17 + 2);
    if ((_DWORD)v18)
    {
      v19 = 8 * v18;
      v20 = *v17;
      while (*(_WORD *)(*(_QWORD *)v20 + 32) != 419)
      {
        v20 += 8;
        v19 -= 8;
        if (!v19)
          goto LABEL_48;
      }
    }
    else
    {
      v20 = *v17;
    }
    if (v20 != *v17 + 8 * v18)
      llvm::AttrBuilder::addAttribute();
  }
LABEL_48:
  if (!sub_22E4728AC(a2))
  {
    if (sub_22E47266C(a2))
    {
      if ((v16 & 1) == 0)
        llvm::AttrBuilder::addAttribute();
      llvm::AttrBuilder::addAttribute();
    }
    if (sub_22E4726CC(a2))
      llvm::AttrBuilder::addAttribute();
    if (sub_22E62AE6C(a2))
      llvm::AttrBuilder::addAttribute();
  }
  llvm::Function::addFnAttrs(this, (const llvm::AttrBuilder *)&Context);
  v21 = sub_22EFC8A80(a2);
  if (sub_22EF5CDF0(a1[18], *(_QWORD *)(*(_QWORD *)(a1[18] + 16408) & 0xFFFFFFFFFFFFFFF0)) <= (unint64_t)v21)
    llvm::GlobalObject::setAlignment();
  if (!sub_22E49F7A8(a2) && (*(_QWORD *)(a1[19] + 192) & 0x7C00000000000) != 0)
    llvm::GlobalObject::setAlignment();
  if (*(_DWORD *)(a1[27] + 148) != 7
    && (*((_WORD *)this + 17) & 0x3Fu) <= 1
    && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 54 <= 3)
  {
    llvm::GlobalObject::setAlignment();
  }
  if ((~*(_QWORD *)(a1[23] + 32) & 0x480000000) == 0
    && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA
    && sub_22EF72FFC((_QWORD *)a1[18], a2) != 1)
  {
    sub_22E62AECC((uint64_t)a1, a2);
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC && (*(_BYTE *)(a1[23] + 29) & 4) != 0)
  {
    v22 = a2 + 72;
    v23 = *(_WORD *)(a2 + 80) & 0x7F;
    v24 = -40;
    if (v23 > 0x46)
    {
      switch(v23)
      {
        case 'S':
          goto LABEL_87;
        case 'G':
          v24 = -56;
          goto LABEL_87;
        case 'Q':
LABEL_87:
          v25 = *(_QWORD *)(v22 + v24 + 16);
          v26 = (_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF8);
          if ((v25 & 4) != 0)
            v26 = (_QWORD *)*v26;
          if (v26)
            v27 = (uint64_t)(v26 - 8);
          else
            v27 = 0;
          if (!sub_22E610138((uint64_t)a1, v27)
            || (*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2) + 80) & 0xE000) == 0x4000
            || (*(_QWORD *)(a2 + 40) & 7) == 6
            && (*(_DWORD *)(*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4)
          {
            goto LABEL_100;
          }
          v28 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2);
          if ((*(_BYTE *)(v28 + 82) & 0xC) != 0
            || sub_22EFD7260(v28)
            || (*(_DWORD *)(a2 + 28) & 0x7F) == 0x37
            || (*(_DWORD *)(a2 + 28) & 0x7F) == 0x39)
          {
            goto LABEL_100;
          }
          v30 = *(_WORD *)(a2 + 80) & 0x7F;
          v31 = -40;
          if (v30 > 0x46)
          {
            switch(v30)
            {
              case 'S':
                goto LABEL_134;
              case 'G':
                v31 = -56;
                goto LABEL_134;
              case 'Q':
                goto LABEL_134;
            }
          }
          else
          {
            if (v30 <= 0x18)
            {
              if (v30 == 16)
                goto LABEL_122;
              if (((1 << v30) & 0x1066) != 0)
                goto LABEL_134;
              if (v30 == 24)
              {
LABEL_122:
                v31 = -48;
LABEL_134:
                v32 = *(_QWORD *)(v22 + v31 + 16);
                v33 = (_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF8);
                if ((v32 & 4) != 0)
                  v33 = (_QWORD *)*v33;
                if (v33)
                  v34 = (uint64_t)(v33 - 8);
                else
                  v34 = 0;
                sub_22F299A54(v34, (uint64_t)&v43);
                v35 = (uint64_t *)v44;
                __p = v43;
                if (v43 != (void *)v44)
                {
                  v36 = (uint64_t *)v43;
                  do
                  {
                    v37 = *v36++;
                    v38 = a1[18];
                    v39 = *(_QWORD *)(a2 + 48);
                    v40 = sub_22EF6477C(v38, v37);
                    v41 = sub_22F36A6C0(v38, v39, *(_QWORD *)(v40 & 0xFFFFFFFFFFFFFFF0));
                    sub_22E6371C0((uint64_t)a1, v41, (uint64_t)(a1 + 444), "", 0);
                    llvm::GlobalObject::addTypeMetadata();
                  }
                  while (v36 != v35);
                }
                if (__p)
                  operator delete(__p);
                goto LABEL_100;
              }
            }
            if (v30 == 70)
            {
LABEL_132:
              v31 = -64;
              goto LABEL_134;
            }
          }
          if (v30 - 52 < 6)
          {
            v31 = -72;
            goto LABEL_134;
          }
          if (v30 - 33 < 5)
            goto LABEL_132;
          goto LABEL_122;
      }
    }
    else
    {
      if (v23 <= 0x18)
      {
        if (v23 == 16)
        {
LABEL_75:
          v24 = -48;
          goto LABEL_87;
        }
        if (((1 << v23) & 0x1066) != 0)
          goto LABEL_87;
        if (v23 == 24)
          goto LABEL_75;
      }
      if (v23 == 70)
      {
LABEL_85:
        v24 = -64;
        goto LABEL_87;
      }
    }
    if (v23 - 52 >= 6)
    {
      if (v23 - 33 >= 5)
        goto LABEL_75;
      goto LABEL_85;
    }
    v24 = -72;
    goto LABEL_87;
  }
LABEL_100:
  if (v51 != v53)
    free(v51);
}

BOOL sub_22E62AE6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 212)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

uint64_t sub_22E62AECC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  llvm::MDString *v7;
  uint64_t v8;

  if ((*(_BYTE *)(*(_QWORD *)(result + 152) + 261) & 0x40) != 0)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 54 > 3
      || (v8 = result, v2 = a2, v3 = sub_22EFD642C((_QWORD *)a2), a2 = v2, v4 = v3, result = v8, v4))
    {
      v5 = result;
      v6 = a2;
      v7 = (llvm::MDString *)sub_22E6371C0(result, *(_QWORD *)(a2 + 48), result + 3552, "", 0);
      llvm::GlobalObject::addTypeMetadata();
      sub_22E62BF98(v5, *(_QWORD *)(v6 + 48));
      result = llvm::GlobalObject::addTypeMetadata();
      if ((*(_BYTE *)(*(_QWORD *)(v5 + 184) + 35) & 0x80) != 0)
      {
        result = sub_22E62A49C(v5, v7);
        if (result)
        {
          llvm::ValueAsMetadata::get();
          return llvm::GlobalObject::addTypeMetadata();
        }
      }
    }
  }
  return result;
}

uint64_t sub_22E62AFD8(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned int *v15;

  v5 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v6 = result;
    if ((*(_DWORD *)(v5 + 28) & 0x7Fu) - 13 > 0x3D)
    {
      v10 = a4[8];
      if ((v10 & 0xF) - 7 >= 2)
        v11 = v10 & 0xFFFFFFCF;
      else
        v11 = v10 & 0xFFFFBFCF | 0x4000;
      a4[8] = v11;
    }
    else
    {
      sub_22E628944(result, a4, a2);
      if ((*(_DWORD *)(v5 + 28) & 0x7Fu) - 13 >= 0x3E)
        v7 = 0;
      else
        v7 = v5;
      sub_22E628A68(v6, (llvm::GlobalValue *)a4, v7);
    }
    result = sub_22E4671B0(v5);
    if ((_DWORD)result)
    {
      v15 = a4;
      if (*(_DWORD *)(*(_QWORD *)(v6 + 216) + 76) == 3)
        v12 = (uint64_t *)(v6 + 1440);
      else
        v12 = (uint64_t *)(v6 + 1416);
      result = sub_22E62C508(v12, (uint64_t *)&v15);
    }
    if ((*(_DWORD *)(*(_QWORD *)(v6 + 184) + 92) & 0x2000) != 0 && (*(_DWORD *)(v5 + 28) & 0x7Fu) - 60 <= 6)
    {
      v13 = *(_QWORD *)(v5 + 48);
      if ((v13 & 1) != 0 || (*(_BYTE *)((v13 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) != 0)
      {
        result = sub_22E3CB5E0(v5);
        if ((result & 1) == 0 && (*(_BYTE *)(v5 + 96) & 0x18) == 0)
        {
          v15 = a4;
          if (*(_DWORD *)(*(_QWORD *)(v6 + 216) + 76) == 3)
            v14 = (uint64_t *)(v6 + 1440);
          else
            v14 = (uint64_t *)(v6 + 1416);
          return sub_22E62C508(v14, (uint64_t *)&v15);
        }
      }
    }
  }
  else
  {
    v8 = a4[8];
    if ((v8 & 0xF) - 7 >= 2)
      v9 = v8 & 0xFFFFFFCF;
    else
      v9 = v8 & 0xFFFFBFCF | 0x4000;
    a4[8] = v9;
  }
  return result;
}

BOOL sub_22E62B140(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v6;
  int v7;
  char **v8;
  char **v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v39;
  uint64_t v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  std::string *p_dst;
  uint64_t v44;
  uint64_t v45;
  std::string *v46;
  std::string::size_type v47;
  char v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  int64x2_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int *v66;
  uint64_t v67;
  _BOOL8 v68;
  __int128 v69;
  std::string::size_type v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  BOOL v74;
  const std::string::value_type *v75;
  uint64_t v76;
  std::string::size_type v77;
  uint64_t i;
  char v79;
  BOOL v80;
  const std::string::value_type *v81;
  std::string::size_type v82;
  std::string::size_type v83;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  std::string v89;
  char *v90;
  char **v91;
  uint64_t v92;
  uint64_t v93;
  std::string __dst;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  char *v99;
  _QWORD v100[5];

  v100[2] = *MEMORY[0x24BDAC8D0];
  v6 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 16) + 71);
  v7 = v6;
  v8 = (char **)(v6 & 0x7F);
  if (v7 >= 0)
    v9 = v8;
  else
    v9 = *(char ***)(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 16) + 56);
  v10 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 16) + 95);
  if (v10 >= 0)
    v11 = v10 & 0x7F;
  else
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 16) + 80);
  v98 = 0uLL;
  v99 = 0;
  v12 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    if ((*(_DWORD *)(v12 + 28) & 0x7Eu) - 52 <= 5
      && (v13 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v12 + 112) + 104), *(_QWORD *)(v12 + 112))) != 0)
    {
      v14 = v13;
      if ((*(_BYTE *)(v13 + 29) & 1) == 0)
        goto LABEL_21;
      sub_22EFC8E88(v13);
      v16 = *(uint64_t **)v15;
      v17 = *(unsigned int *)(v15 + 8);
      v18 = *(uint64_t **)v15;
      if ((_DWORD)v17)
      {
        v19 = 8 * v17;
        v18 = *(uint64_t **)v15;
        while (*(_WORD *)(*v18 + 32) != 327)
        {
          ++v18;
          v19 -= 8;
          if (!v19)
            goto LABEL_21;
        }
      }
      if (v18 == &v16[v17])
      {
LABEL_21:
        v20 = 0;
      }
      else
      {
        do
        {
          v21 = *v16++;
          v20 = v21;
        }
        while (*(_WORD *)(v21 + 32) != 327);
      }
      if ((*(_BYTE *)(v14 + 29) & 1) == 0)
        goto LABEL_31;
      sub_22EFC8E88(v14);
      v23 = *(uint64_t **)v22;
      v24 = *(unsigned int *)(v22 + 8);
      v25 = *(uint64_t **)v22;
      if ((_DWORD)v24)
      {
        v26 = 8 * v24;
        v25 = *(uint64_t **)v22;
        while (*(_WORD *)(*v25 + 32) != 128)
        {
          ++v25;
          v26 -= 8;
          if (!v26)
            goto LABEL_31;
        }
      }
      if (v25 == &v23[v24])
      {
LABEL_31:
        v88 = 0;
      }
      else
      {
        do
        {
          v28 = *v23++;
          v27 = v28;
        }
        while (*(_WORD *)(v28 + 32) != 128);
        v88 = v27;
      }
      if ((*(_BYTE *)(v14 + 29) & 1) == 0)
        goto LABEL_41;
      sub_22EFC8E88(v14);
      v30 = *(uint64_t **)v29;
      v31 = *(unsigned int *)(v29 + 8);
      v32 = *(uint64_t **)v29;
      if ((_DWORD)v31)
      {
        v33 = 8 * v31;
        v32 = *(uint64_t **)v29;
        while (*(_WORD *)(*v32 + 32) != 328)
        {
          ++v32;
          v33 -= 8;
          if (!v33)
            goto LABEL_41;
        }
      }
      if (v32 == &v30[v31])
      {
LABEL_41:
        v34 = 0;
      }
      else
      {
        do
        {
          v35 = *v30++;
          v34 = v35;
        }
        while (*(_WORD *)(v35 + 32) != 328);
      }
      LODWORD(v12) = v34 != 0;
    }
    else
    {
      v88 = 0;
      v20 = 0;
      LODWORD(v12) = 0;
    }
  }
  else
  {
    v88 = 0;
    v20 = 0;
  }
  if (!v20 && !v88 && !(_DWORD)v12)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 16);
    if (&v98 != (__int128 *)(v36 + 200))
      sub_22E63B120((uint64_t)&v98, *(std::string **)(v36 + 200), *(std::string **)(v36 + 208), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v36 + 208) - *(_QWORD *)(v36 + 200)) >> 3));
    goto LABEL_105;
  }
  v95 = 0;
  v96 = 0;
  v97 = 0x1000000000;
  sub_22EF74614(*(_QWORD *)(a1 + 144), (uint64_t *)&v95, a2, a3);
  v86 = a1;
  v87 = v11;
  v85 = a3;
  v37 = v95;
  if ((_DWORD)v96)
  {
    while (!*v37 || *v37 == -8)
      ++v37;
  }
  v39 = &v95[v96];
  if (v37 != v39)
  {
    v40 = *v37;
    do
    {
      if (*(_BYTE *)(v40 + 8))
        v41 = "+";
      else
        v41 = "-";
      v42 = *(_QWORD *)v40;
      if (*(_QWORD *)v40 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_134:
        abort();
      if (v42 >= 0x17)
      {
        v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v42 | 7) != 0x17)
          v44 = v42 | 7;
        v45 = v44 + 1;
        p_dst = (std::string *)operator new(v44 + 1);
        __dst.__r_.__value_.__l.__size_ = v42;
        __dst.__r_.__value_.__r.__words[2] = v45 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)v40;
        p_dst = &__dst;
        if (!v42)
          goto LABEL_68;
      }
      memmove(p_dst, (const void *)(v40 + 16), v42);
LABEL_68:
      p_dst->__r_.__value_.__s.__data_[v42] = 0;
      v46 = std::string::insert(&__dst, 0, v41);
      v47 = v46->__r_.__value_.__r.__words[0];
      v100[0] = v46->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v100 + 7) = *(std::string::size_type *)((char *)&v46->__r_.__value_.__r.__words[1] + 7);
      v48 = HIBYTE(v46->__r_.__value_.__r.__words[2]);
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      v49 = *((_QWORD *)&v98 + 1);
      v50 = v99;
      if (*((_QWORD *)&v98 + 1) >= (unint64_t)v99)
      {
        v53 = v98;
        v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v98 + 1) - v98) >> 3) + 1;
        if (v54 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_134;
        if (0x5555555555555556 * ((uint64_t)&v99[-v98] >> 3) > v54)
          v54 = 0x5555555555555556 * ((uint64_t)&v99[-v98] >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v99[-v98] >> 3) >= 0x555555555555555)
          v55 = 0xAAAAAAAAAAAAAAALL;
        else
          v55 = v54;
        v91 = &v99;
        if (v55)
        {
          if (v55 > 0xAAAAAAAAAAAAAAALL)
            sub_22E3B3F8C();
          v56 = (char *)operator new(24 * v55);
        }
        else
        {
          v56 = 0;
        }
        v57 = &v56[8 * ((uint64_t)(v49 - v53) >> 3)];
        v58 = v100[0];
        *(_QWORD *)v57 = v47;
        *((_QWORD *)v57 + 1) = v58;
        *(_QWORD *)(v57 + 15) = *(_QWORD *)((char *)v100 + 7);
        v57[23] = v48;
        v100[0] = 0;
        *(_QWORD *)((char *)v100 + 7) = 0;
        if (v49 == v53)
        {
          v61 = vdupq_n_s64(v49);
          v59 = &v56[8 * ((uint64_t)(v49 - v53) >> 3)];
        }
        else
        {
          v59 = &v56[8 * ((uint64_t)(v49 - v53) >> 3)];
          do
          {
            v60 = *(_OWORD *)(v49 - 24);
            *((_QWORD *)v59 - 1) = *(_QWORD *)(v49 - 8);
            *(_OWORD *)(v59 - 24) = v60;
            v59 -= 24;
            *(_QWORD *)(v49 - 16) = 0;
            *(_QWORD *)(v49 - 8) = 0;
            *(_QWORD *)(v49 - 24) = 0;
            v49 -= 24;
          }
          while (v49 != v53);
          v61 = (int64x2_t)v98;
          v50 = v99;
        }
        v52 = (unint64_t)(v57 + 24);
        *(_QWORD *)&v98 = v59;
        *((_QWORD *)&v98 + 1) = v57 + 24;
        *(int64x2_t *)&v89.__r_.__value_.__r.__words[1] = v61;
        v99 = &v56[24 * v55];
        v90 = v50;
        v89.__r_.__value_.__r.__words[0] = v61.i64[0];
        sub_22E3B8B94((uint64_t)&v89);
      }
      else
      {
        v51 = v100[0];
        **((_QWORD **)&v98 + 1) = v47;
        *(_QWORD *)(v49 + 8) = v51;
        *(_QWORD *)(v49 + 15) = *(_QWORD *)((char *)v100 + 7);
        *(_BYTE *)(v49 + 23) = v48;
        v52 = v49 + 24;
      }
      *((_QWORD *)&v98 + 1) = v52;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      do
      {
        v62 = v37[1];
        ++v37;
        v40 = v62;
        if (v62)
          v63 = v40 == -8;
        else
          v63 = 1;
      }
      while (v63);
    }
    while (v37 != v39);
  }
  if (v20)
  {
    sub_22E639F38(*(_DWORD **)(v20 + 40), *(unsigned int *)(v20 + 36), &v89);
    v11 = v87;
    v65 = v85;
    v64 = v86;
    if (v91
      && (*(unsigned int (**)(_QWORD, char *))(**(_QWORD **)(v86 + 216) + 480))(*(_QWORD *)(v86 + 216), v90))
    {
      v11 = 0;
      v9 = v91;
    }
    if (v93
      && (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v86 + 216) + 480))(*(_QWORD *)(v86 + 216), v92))
    {
      v11 = v93;
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89;
    sub_22E3B3CC8((void ***)&__dst);
  }
  else
  {
    v11 = v87;
    v65 = v85;
    v64 = v86;
  }
  if (v88)
  {
    v66 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(v88 + 40) + 8 * v65) + 16);
    (*(void (**)(_QWORD, unsigned int *, _QWORD))(**(_QWORD **)(v64 + 216) + 616))(*(_QWORD *)(v64 + 216), v66 + 4, *v66);
    v11 = v67;
  }
  sub_22E622C5C((uint64_t)&v95);
LABEL_105:
  v68 = v9 != 0;
  if (v9)
    llvm::AttrBuilder::addAttribute();
  if (v11)
  {
    llvm::AttrBuilder::addAttribute();
    v68 = 1;
  }
  if ((_QWORD)v98 != *((_QWORD *)&v98 + 1))
  {
    sub_22E63C10C(v98, *((const void ***)&v98 + 1), (uint64_t)&v89, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v98 + 1) - v98) >> 3)), 1);
    v69 = v98;
    memset(&v89, 0, sizeof(v89));
    if ((_QWORD)v98 != *((_QWORD *)&v98 + 1))
    {
      v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v98 + 1) - v98) >> 3) - 1;
      v71 = v98;
      do
      {
        if (*(char *)(v71 + 23) < 0)
          v72 = *(_QWORD *)(v71 + 8);
        else
          v72 = *(unsigned __int8 *)(v71 + 23);
        v70 += v72;
        v71 += 24;
      }
      while (v71 != *((_QWORD *)&v98 + 1));
      std::string::reserve(&v89, v70);
      v73 = *(_BYTE *)(v69 + 23);
      v74 = v73 < 0;
      v75 = v73 >= 0 ? (const std::string::value_type *)v69 : *(const std::string::value_type **)v69;
      v76 = v73 & 0x7F;
      v77 = v74 ? *(_QWORD *)(v69 + 8) : v76;
      std::string::append(&v89, v75, v77);
      for (i = v69 + 24; i != *((_QWORD *)&v69 + 1); i += 24)
      {
        std::string::append(&v89, ",", 1uLL);
        v79 = *(_BYTE *)(i + 23);
        v80 = v79 < 0;
        if (v79 >= 0)
          v81 = (const std::string::value_type *)i;
        else
          v81 = *(const std::string::value_type **)i;
        v82 = v79 & 0x7F;
        if (v80)
          v83 = *(_QWORD *)(i + 8);
        else
          v83 = v82;
        std::string::append(&v89, v81, v83);
      }
    }
    llvm::AttrBuilder::addAttribute();
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
    v68 = 1;
  }
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v98;
  sub_22E3B3CC8((void ***)&v89);
  return v68;
}

uint64_t sub_22E62B944(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v57[3];
  _QWORD *v58[2];
  uint64_t Context;
  void *v60;
  uint64_t v61;
  _QWORD v62[9];

  v5 = a3;
  v62[8] = *MEMORY[0x24BDAC8D0];
  v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  sub_22E62AFD8((uint64_t)a1, a2, a3, (unsigned int *)a4);
  if (v8)
  {
    if (a4 && *(_BYTE *)(a4 + 16) == 3)
    {
      if (sub_22E4C74A4(v8))
      {
        Context = a4;
        sub_22E62C508(a1 + 177, &Context);
      }
      if ((*(_BYTE *)(v8 + 29) & 1) != 0)
      {
        sub_22EFC8E88(v8);
        v10 = *(uint64_t **)v9;
        v11 = *(unsigned int *)(v9 + 8);
        v12 = *(uint64_t **)v9;
        if ((_DWORD)v11)
        {
          v13 = 8 * v11;
          v12 = *(uint64_t **)v9;
          while (*(_WORD *)(*v12 + 32) != 281)
          {
            ++v12;
            v13 -= 8;
            if (!v13)
              goto LABEL_15;
          }
        }
        if (v12 != &v10[v11])
        {
          do
            v14 = *v10++;
          while (*(_WORD *)(v14 + 32) != 281);
          llvm::Value::getContext((llvm::Value *)a4);
          *(_QWORD *)(a4 + 72) = llvm::AttributeSet::addAttribute();
        }
      }
LABEL_15:
      if ((*(_BYTE *)(v8 + 29) & 1) != 0)
      {
        sub_22EFC8E88(v8);
        v16 = *(uint64_t **)v15;
        v17 = *(unsigned int *)(v15 + 8);
        v18 = *(uint64_t **)v15;
        if ((_DWORD)v17)
        {
          v19 = 8 * v17;
          v18 = *(uint64_t **)v15;
          while (*(_WORD *)(*v18 + 32) != 282)
          {
            ++v18;
            v19 -= 8;
            if (!v19)
              goto LABEL_24;
          }
        }
        if (v18 != &v16[v17])
        {
          do
            v20 = *v16++;
          while (*(_WORD *)(v20 + 32) != 282);
          llvm::Value::getContext((llvm::Value *)a4);
          *(_QWORD *)(a4 + 72) = llvm::AttributeSet::addAttribute();
        }
      }
LABEL_24:
      if ((*(_BYTE *)(v8 + 29) & 1) != 0)
      {
        sub_22EFC8E88(v8);
        v22 = *(uint64_t **)v21;
        v23 = *(unsigned int *)(v21 + 8);
        v24 = *(uint64_t **)v21;
        if ((_DWORD)v23)
        {
          v25 = 8 * v23;
          v24 = *(uint64_t **)v21;
          while (*(_WORD *)(*v24 + 32) != 284)
          {
            ++v24;
            v25 -= 8;
            if (!v25)
              goto LABEL_33;
          }
        }
        if (v24 != &v22[v23])
        {
          do
            v26 = *v22++;
          while (*(_WORD *)(v26 + 32) != 284);
          llvm::Value::getContext((llvm::Value *)a4);
          *(_QWORD *)(a4 + 72) = llvm::AttributeSet::addAttribute();
        }
      }
LABEL_33:
      if ((*(_BYTE *)(v8 + 29) & 1) != 0)
      {
        sub_22EFC8E88(v8);
        v28 = *(uint64_t **)v27;
        v29 = *(unsigned int *)(v27 + 8);
        v30 = *(uint64_t **)v27;
        if ((_DWORD)v29)
        {
          v31 = 8 * v29;
          v30 = *(uint64_t **)v27;
          while (*(_WORD *)(*v30 + 32) != 283)
          {
            ++v30;
            v31 -= 8;
            if (!v31)
              goto LABEL_42;
          }
        }
        if (v30 != &v28[v29])
        {
          do
            v32 = *v28++;
          while (*(_WORD *)(v32 + 32) != 283);
          llvm::Value::getContext((llvm::Value *)a4);
          *(_QWORD *)(a4 + 72) = llvm::AttributeSet::addAttribute();
        }
      }
    }
LABEL_42:
    if (a4 && !*(_BYTE *)(a4 + 16))
    {
      if (sub_22E4C74A4(v8))
      {
        Context = a4;
        sub_22E62C508(a1 + 177, &Context);
      }
      if ((*(_BYTE *)(v8 + 29) & 1) != 0)
      {
        sub_22EFC8E88(v8);
        v34 = *(uint64_t **)v33;
        v35 = *(unsigned int *)(v33 + 8);
        v36 = *(uint64_t **)v33;
        if ((_DWORD)v35)
        {
          v37 = 8 * v35;
          v36 = *(uint64_t **)v33;
          while (*(_WORD *)(*v36 + 32) != 285)
          {
            ++v36;
            v37 -= 8;
            if (!v37)
              goto LABEL_63;
          }
        }
        if (v36 != &v34[v35])
        {
          do
            v38 = *v34++;
          while (*(_WORD *)(v38 + 32) != 285);
          if ((*(_BYTE *)(v8 + 29) & 1) == 0)
            goto LABEL_62;
          sub_22EFC8E88(v8);
          v40 = *((unsigned int *)v39 + 2);
          if ((_DWORD)v40)
          {
            v41 = 8 * v40;
            v42 = *v39;
            while (*(_WORD *)(*(_QWORD *)v42 + 32) != 305)
            {
              v42 += 8;
              v41 -= 8;
              if (!v41)
                goto LABEL_62;
            }
          }
          else
          {
            v42 = *v39;
          }
          if (v42 == *v39 + 8 * v40)
LABEL_62:
            llvm::Function::addFnAttr();
        }
      }
LABEL_63:
      Context = llvm::Function::getContext((llvm::Function *)a4);
      v60 = v62;
      v61 = 0x800000000;
      if (sub_22E62B140((uint64_t)a1, a2, v5))
      {
        v57[0] = 0;
        v57[1] = 0;
        v58[0] = 0;
        v58[1] = 0;
        v57[2] = v58;
        sub_22F299B9C((uint64_t)v57, "target-cpu", 10);
        sub_22F299B9C((uint64_t)v57, "target-features", 15);
        sub_22F299B9C((uint64_t)v57, "tune-cpu", 8);
        llvm::Function::removeFnAttrs();
        llvm::Function::addFnAttrs((llvm::Function *)a4, (const llvm::AttrBuilder *)&Context);
        sub_22E63A848(v58[0]);
      }
      if (v60 != v62)
        free(v60);
    }
    if ((*(_BYTE *)(v8 + 29) & 1) != 0)
    {
      sub_22EFC8E88(v8);
      v44 = *(uint64_t **)v43;
      v45 = *(unsigned int *)(v43 + 8);
      v46 = *(uint64_t **)v43;
      if ((_DWORD)v45)
      {
        v47 = 8 * v45;
        v46 = *(uint64_t **)v43;
        while (*(_WORD *)(*v46 + 32) != 145)
        {
          ++v46;
          v47 -= 8;
          if (!v47)
            goto LABEL_76;
        }
      }
      if (v46 != &v44[v45])
      {
        do
          v48 = *v44++;
        while (*(_WORD *)(v48 + 32) != 145);
        goto LABEL_84;
      }
    }
LABEL_76:
    if ((*(_BYTE *)(v8 + 29) & 1) != 0)
    {
      sub_22EFC8E88(v8);
      v50 = *(uint64_t **)v49;
      v51 = *(unsigned int *)(v49 + 8);
      v52 = *(uint64_t **)v49;
      if ((_DWORD)v51)
      {
        v53 = 8 * v51;
        v52 = *(uint64_t **)v49;
        while (*(_WORD *)(*v52 + 32) != 305)
        {
          ++v52;
          v53 -= 8;
          if (!v53)
            goto LABEL_85;
        }
      }
      if (v52 != &v50[v51])
      {
        do
          v54 = *v50++;
        while (*(_WORD *)(v54 + 32) != 305);
LABEL_84:
        llvm::GlobalObject::setSection();
      }
    }
  }
LABEL_85:
  v55 = sub_22E699F3C(a1);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, _QWORD *))(*(_QWORD *)v55 + 16))(v55, v8, a4, a1);
}

uint64_t sub_22E62BF18(uint64_t *a1, uint64_t a2, uint64_t a3, llvm::Value *this, uint64_t a5)
{
  unint64_t v9;

  v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  sub_22E62A548((uint64_t)a1, a2, a3, a5, this, 0);
  sub_22E62A5F4(a1, v9, this);
  *((_DWORD *)this + 8) = *((_DWORD *)this + 8) & 0xFFFFBFC0 | 0x4007;
  return sub_22E62B944(a1, a2, a3, (uint64_t)this);
}

uint64_t sub_22E62BF98(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v18[5];
  void *v19;
  uint64_t v20;
  _QWORD v21[9];

  v21[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 144);
  v5 = a2 & 0xFFFFFFFFFFFFFFF0;
  v6 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v7 = *(unsigned __int8 *)(v6 + 16);
  if (v6)
    v8 = v7 == 26;
  else
    v8 = 0;
  if (v8)
    goto LABEL_7;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
  {
    v6 = sub_22F10CF48(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
    if (v6)
    {
LABEL_7:
      v19 = v21;
      v20 = 0x800000000;
      if ((unsigned __int16)(*(_QWORD *)(v6 + 16) >> 38))
      {
        v9 = (uint64_t *)(v6 + 40);
        v10 = 8 * (unsigned __int16)(*(_QWORD *)(v6 + 16) >> 38);
        do
        {
          v11 = sub_22E63B0B0(v4, *v9);
          v12 = v20;
          if (v20 >= (unint64_t)HIDWORD(v20))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v12 = v20;
          }
          *((_QWORD *)v19 + v12) = v11;
          LODWORD(v20) = v20 + 1;
          ++v9;
          v10 -= 8;
        }
        while (v10);
      }
      v13 = sub_22E63B0B0(v4, *(_QWORD *)(v6 + 24));
      v14 = (uint64_t *)v19;
      v15 = v20;
      sub_22E4913B4(v6, (uint64_t)v18);
      v2 = sub_22EF63D8C(v4, v13, v14, v15, v18, 0);
      if (v19 != v21)
        free(v19);
      return sub_22E6371C0(a1, v2, a1 + 3600, ".generalized", 0xCuLL);
    }
    v6 = *(_QWORD *)v5;
    v7 = *(unsigned __int8 *)(*(_QWORD *)v5 + 16);
  }
  if (v7 == 25
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 25 && (v6 = sub_22F10CF48(v6)) != 0)
  {
    v16 = sub_22E63B0B0(v4, *(_QWORD *)(v6 + 24));
    LOWORD(v19) = 0;
    v2 = sub_22F369930(v4, v16, (unsigned __int16 *)&v19);
  }
  return sub_22E6371C0(a1, v2, a1 + 3600, ".generalized", 0xCuLL);
}

uint64_t sub_22E62C1A0(llvm::GlobalValue *a1, unint64_t a2)
{
  uint64_t result;
  int v5;

  result = sub_22EFB9558(a2);
  if ((result & 7u) >= 3)
  {
    result = sub_22E6339A4(a2);
    if ((result & 1) != 0 || (result = sub_22EFCA55C(a2), (_DWORD)result))
    {
      v5 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 8) = v5 & 0xFFFFFFF0 | 9;
      if ((v5 & 0x30) != 0)
      {
        result = llvm::GlobalValue::hasExternalWeakLinkage(a1);
        if ((result & 1) == 0)
          *((_DWORD *)a1 + 8) |= 0x4000u;
      }
    }
  }
  return result;
}

uint64_t sub_22E62C21C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;

  if (sub_22E629EF0(a1, a2) != 1)
    return 1;
  v4 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 184) + 33) & 0x18) != 0 || (result = sub_22E46A45C(v4), (_DWORD)result))
  {
    if (!sub_22E49F808(v4) || sub_22E46A45C(v4))
      goto LABEL_6;
    v28 = 1;
    sub_22E631704(&v28, v4);
    if (!v28)
      return 0;
    if ((*(_DWORD *)(v4 + 28) & 0x7F) != 0x39 || !v4)
      goto LABEL_6;
    v6 = v4 + 72;
    v7 = *(_WORD *)(v4 + 80) & 0x7F;
    v8 = -40;
    if (v7 > 0x46)
    {
      if (v7 == 83)
        goto LABEL_29;
      if (v7 == 71)
      {
        v8 = -56;
        goto LABEL_29;
      }
      if (v7 != 81)
      {
LABEL_24:
        v9 = v7 - 52;
        v10 = v7 - 33 >= 5;
        v11 = -48;
        if (!v10)
          v11 = -64;
        if (v9 >= 6)
          v8 = v11;
        else
          v8 = -72;
      }
    }
    else
    {
      if (v7 > 0x18)
        goto LABEL_23;
      if (v7 == 16)
      {
LABEL_15:
        v8 = -48;
        goto LABEL_29;
      }
      if (((1 << v7) & 0x1066) == 0)
      {
        if (v7 == 24)
          goto LABEL_15;
LABEL_23:
        if (v7 == 70)
        {
          v8 = -64;
          goto LABEL_29;
        }
        goto LABEL_24;
      }
    }
LABEL_29:
    v12 = *(_QWORD *)(v6 + v8 + 16);
    v13 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
    if ((v12 & 4) != 0)
      v13 = (_QWORD *)*v13;
    if (v13)
      v14 = v13 - 8;
    else
      v14 = 0;
    if ((v14[9] & 0x80) != 0)
      sub_22EFCC320((uint64_t)(v14 + 8));
    v15 = v14[10];
    if (v15)
    {
      while ((*(_DWORD *)(v15 + 28) & 0x7Fu) - 49 > 2 || !sub_22E63179C(*(_QWORD *)(v15 + 48)))
      {
        v15 = *(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v15)
          goto LABEL_40;
      }
      return 0;
    }
LABEL_40:
    v16 = *(_WORD *)(v4 + 80) & 0x7F;
    v17 = -40;
    if (v16 > 0x46)
    {
      if (v16 != 83)
      {
        if (v16 == 71)
        {
          v17 = -56;
          goto LABEL_56;
        }
        if (v16 == 81)
          goto LABEL_56;
LABEL_51:
        v18 = v16 - 52;
        v10 = v16 - 33 >= 5;
        v19 = -48;
        if (!v10)
          v19 = -64;
        if (v18 >= 6)
          v17 = v19;
        else
          v17 = -72;
      }
    }
    else
    {
      if (v16 > 0x18)
        goto LABEL_50;
      if (v16 != 16)
      {
        if (((1 << v16) & 0x1066) != 0)
          goto LABEL_56;
        if (v16 != 24)
        {
LABEL_50:
          if (v16 == 70)
          {
            v17 = -64;
            goto LABEL_56;
          }
          goto LABEL_51;
        }
      }
      v17 = -48;
    }
LABEL_56:
    v20 = *(_QWORD *)(v6 + v17 + 16);
    v21 = (_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
    if ((v20 & 4) != 0)
      v21 = (_QWORD *)*v21;
    if (v21)
      v22 = (uint64_t)(v21 - 8);
    else
      v22 = 0;
    v23 = sub_22E46A3A0(v22);
    if (v23 == v24)
    {
LABEL_6:
      if ((sub_22EFC0170(v4) & 1) == 0)
        return sub_22F29B130(a1, v4) ^ 1;
      return 1;
    }
    v25 = v23;
    v26 = v24;
    while (1)
    {
      v27 = *(_QWORD *)(**(_QWORD **)(v25 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v27 + 8) & 0xF) != 0)
        v27 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v25 + 16));
      if (sub_22E63179C(v27 & 0xFFFFFFFFFFFFFFF0))
        return 0;
      v25 += 24;
      if (v25 == v26)
        goto LABEL_6;
    }
  }
  return result;
}

uint64_t sub_22E62C508(uint64_t *a1, uint64_t *a2)
{
  llvm::ValueHandleBase *v3;
  uint64_t v4;
  uint64_t v6;

  v3 = (llvm::ValueHandleBase *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    v6 = sub_22E63DF64(a1, a2);
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)v3 = 6;
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = v4;
    if (v4 != -8192 && v4 != -4096 && v4 != 0)
      llvm::ValueHandleBase::AddToUseList(v3);
    v6 = (uint64_t)v3 + 24;
  }
  a1[1] = v6;
  return v6 - 24;
}

void sub_22E62C574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  llvm::Type *v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x24BDAC8D0];
  v4 = *a4;
  v5 = a4[1];
  if (*a4 != v5)
  {
    v12 = v14;
    v13 = (llvm::Type *)0x800000000;
    sub_22E50D8F0((uint64_t)&v12, 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3));
    v8 = -1431655765 * ((unint64_t)(a4[1] - *a4) >> 3);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = 8 * v8;
      v11 = 16;
      do
      {
        *(_QWORD *)((char *)v12 + v9) = llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast();
        v9 += 8;
        v11 += 24;
      }
      while (v10 != v9);
    }
    if ((_DWORD)v13)
    {
      llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 96), (llvm::Type *)v13);
      llvm::User::operator new((llvm::User *)0x58);
      llvm::ConstantArray::get();
      llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setSection();
    }
    if (v12 != v14)
      free(v12);
  }
}

BOOL sub_22E62C70C(_QWORD *a1, _QWORD *a2)
{
  int v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  unsigned __int8 v18;

  sub_22F29D1F0((uint64_t)a1, a2, (uint64_t)&v17);
  v4 = v18;
  if (v18)
  {
    v6 = (_QWORD *)a1[4];
    v5 = a1[5];
    if ((unint64_t)v6 >= v5)
    {
      v8 = (_QWORD *)a1[3];
      v9 = v6 - v8;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        abort();
      v11 = v5 - (_QWORD)v8;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 61)
          sub_22E3B3F8C();
        v13 = (char *)operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[8 * v9];
      *(_QWORD *)v14 = *a2;
      v7 = v14 + 8;
      if (v6 != v8)
      {
        do
        {
          v15 = *--v6;
          *((_QWORD *)v14 - 1) = v15;
          v14 -= 8;
        }
        while (v6 != v8);
        v6 = (_QWORD *)a1[3];
      }
      a1[3] = v14;
      a1[4] = v7;
      a1[5] = &v13[8 * v12];
      if (v6)
        operator delete(v6);
    }
    else
    {
      *v6 = *a2;
      v7 = v6 + 1;
    }
    a1[4] = v7;
  }
  return v4 != 0;
}

void sub_22E62C828(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t Impl;
  unint64_t v29;
  void *v30;
  __int128 v31;
  _QWORD v32[4];

  v32[3] = *MEMORY[0x24BDAC8D0];
  v8 = *(const void **)(a2 + 32);
  if (v8)
  {
    sub_22E3BA850(a4, v8);
    if (v9)
      sub_22E62C828(a1, *(_QWORD *)(a2 + 32), a3, a4);
  }
  v10 = *(unsigned int *)(a2 + 1392);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    v12 = *(_QWORD *)(a2 + 1384) - 8;
    do
    {
      v13 = *(const void **)(v12 + v11);
      sub_22E3BA850(a4, v13);
      if (v14)
        sub_22E62C828(a1, v13, a3, a4);
      v11 -= 8;
    }
    while (v11);
  }
  if (!*(_BYTE *)(a2 + 2056))
  {
    v15 = *(unsigned int *)(a2 + 1984);
    if ((_DWORD)v15)
    {
      v16 = *(_DWORD *)(a1[27] + 76);
      v17 = *(_QWORD *)(a2 + 1976);
      for (i = 32 * v15; i; i -= 32)
      {
        v19 = v17 + i;
        if (*(_BYTE *)(v17 + i - 8))
        {
          v30 = 0;
          *(_QWORD *)&v31 = 0;
        }
        else
        {
          if (v16 != 3)
          {
            v30 = v32;
            v31 = xmmword_22F45B820;
            v22 = sub_22E699F3C(a1);
            v23 = *(_BYTE *)(v19 - 9);
            v24 = v23;
            if (v23 >= 0)
              v25 = v17 + i - 32;
            else
              v25 = *(_QWORD *)(v17 + i - 32);
            v26 = v23 & 0x7F;
            if (v24 >= 0)
              v27 = v26;
            else
              v27 = *(_QWORD *)(v19 - 24);
            (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v22 + 168))(v22, v25, v27, &v30);
            llvm::MDString::get();
            Impl = llvm::MDTuple::getImpl();
            v29 = *(unsigned int *)(a3 + 8);
            if (v29 >= *(unsigned int *)(a3 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = *(unsigned int *)(a3 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a3 + 8 * v29) = Impl;
            ++*(_DWORD *)(a3 + 8);
            if (v30 != v32)
              free(v30);
            continue;
          }
          v30 = 0;
          *(_QWORD *)&v31 = 0;
        }
        v30 = (void *)llvm::MDString::get();
        *(_QWORD *)&v31 = llvm::MDString::get();
        v20 = llvm::MDTuple::getImpl();
        v21 = *(unsigned int *)(a3 + 8);
        if (v21 >= *(unsigned int *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v21 = *(unsigned int *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v21) = v20;
        ++*(_DWORD *)(a3 + 8);
      }
    }
  }
}

void sub_22E62CAF8(char **a1, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  int64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  uint64_t *v46;

  if (*(_DWORD *)(a2 + 8))
  {
    v3 = a1[1];
    v4 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v4)
    {
      v5 = 8 * v4;
      for (i = *(uint64_t **)a2; (*i | 0x1000) == 0xFFFFFFFFFFFFF000; ++i)
      {
        v5 -= 8;
        if (!v5)
          return;
      }
    }
    else
    {
      i = *(uint64_t **)a2;
    }
    v7 = *(_QWORD *)a2 + 8 * v4;
    if ((uint64_t *)v7 != i)
    {
      v8 = 0;
      v9 = i;
LABEL_10:
      v10 = v8++;
      while (++v9 != (uint64_t *)v7)
      {
        if ((*v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v9 != (uint64_t *)v7)
            goto LABEL_10;
          break;
        }
      }
      v11 = *a1;
      v12 = v3 - *a1;
      v13 = &(*a1)[v12 & 0xFFFFFFFFFFFFFFF0];
      v14 = a1[2];
      if (v10 >= (v14 - v3) >> 4)
      {
        v22 = v12 >> 4;
        v23 = (v12 >> 4) + v8;
        if (v23 >> 60)
          abort();
        v24 = v14 - v11;
        if (v24 >> 3 > v23)
          v23 = v24 >> 3;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
          v25 = 0xFFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
        {
          if (v25 >> 60)
            sub_22E3B3F8C();
          v26 = (char *)operator new(16 * v25);
        }
        else
        {
          v26 = 0;
        }
        v30 = &v26[16 * v22];
        v31 = &v30[16 * v8];
        v32 = v30;
        do
        {
          v33 = i + 1;
          v34 = *i;
          *((_DWORD *)v32 + 2) = 0;
          *(_QWORD *)v32 = v34;
          i = (uint64_t *)v7;
          if (v33 != (uint64_t *)v7)
          {
            i = v33;
            while ((*i | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              if (++i == (uint64_t *)v7)
              {
                i = (uint64_t *)v7;
                break;
              }
            }
          }
          v32 += 16;
        }
        while (v32 != v31);
        if (v11 != v3)
        {
          v35 = 16 * v22;
          v36 = v11 - 16;
          do
          {
            v37 = &v26[v35];
            v38 = *(_QWORD *)&v36[v35];
            *((_DWORD *)v37 - 2) = *(_DWORD *)&v36[v35 + 8];
            *((_QWORD *)v37 - 2) = v38;
            v35 -= 16;
          }
          while (v35);
          v3 = a1[1];
          v30 = v26;
        }
        v39 = &v26[16 * v25];
        v40 = v3 - v13;
        if (v3 != v13)
          memmove(v31, v13, v40 - 4);
        v41 = *a1;
        *a1 = v30;
        a1[1] = &v31[v40];
        a1[2] = v39;
        if (v41)
          operator delete(v41);
      }
      else
      {
        v15 = v8;
        v16 = i;
        do
        {
          v17 = v16 + 1;
          v16 = (uint64_t *)v7;
          if (v17 != (uint64_t *)v7)
          {
            v16 = v17;
            while ((*v16 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              if (++v16 == (uint64_t *)v7)
              {
                v16 = (uint64_t *)v7;
                break;
              }
            }
          }
          v18 = v15-- <= 1;
        }
        while (!v18);
        v19 = v3 - v13;
        v20 = (v3 - v13) >> 4;
        if (v20 > v10)
        {
          v21 = a1[1];
LABEL_70:
          v42 = &v13[16 * v8];
          v43 = &v21[-16 * v8];
          v44 = v21;
          if (v43 < v3)
          {
            v44 = v21;
            do
            {
              v45 = *(_OWORD *)v43;
              v43 += 16;
              *(_OWORD *)v44 = v45;
              v44 += 16;
            }
            while (v43 < v3);
          }
          a1[1] = v44;
          if (v21 != v42)
            memmove(&v21[-16 * ((v21 - v42) >> 4)], v13, v21 - v42 - 4);
          for (; i != v16; v13 += 16)
          {
            v46 = i + 1;
            *(_QWORD *)v13 = *i;
            *((_DWORD *)v13 + 2) = 0;
            i = (uint64_t *)v7;
            if (v46 != (uint64_t *)v7)
            {
              i = v46;
              while ((*i | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                if (++i == (uint64_t *)v7)
                {
                  i = (uint64_t *)v7;
                  break;
                }
              }
            }
          }
          return;
        }
        v16 = i;
        if (v19 >= 1)
        {
          v16 = i;
          do
          {
            v27 = v16 + 1;
            v16 = (uint64_t *)v7;
            if (v27 != (uint64_t *)v7)
            {
              v16 = v27;
              while ((*v16 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                if (++v16 == (uint64_t *)v7)
                {
                  v16 = (uint64_t *)v7;
                  break;
                }
              }
            }
            v18 = v20-- <= 1;
          }
          while (!v18);
        }
        if (v16 == (uint64_t *)v7)
        {
          v21 = a1[1];
        }
        else
        {
          v28 = v16;
          v21 = a1[1];
          while (2)
          {
            v29 = *v28++;
            *((_DWORD *)v21 + 2) = 0;
            *(_QWORD *)v21 = v29;
            while (1)
            {
              if (v28 == (uint64_t *)v7)
              {
                v21 += 16;
                goto LABEL_69;
              }
              if ((*v28 | 0x1000) != 0xFFFFFFFFFFFFF000)
                break;
              ++v28;
            }
            v21 += 16;
            if (v28 != (uint64_t *)v7)
              continue;
            break;
          }
        }
LABEL_69:
        a1[1] = v21;
        if (v19 >= 1)
          goto LABEL_70;
      }
    }
  }
}

void sub_22E62CEB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  llvm *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int i;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  llvm *v22;
  uint64_t v23;
  llvm *TimeTraceProfilerInstance;
  unint64_t v25;
  _QWORD v26[4];
  int v27;
  uint64_t v28;
  const char *v29;

  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 1992);
  llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
  v26[3] = v6;
  v27 = v7;
  v28 = v8;
  v29 = "Generating code for declaration";
  v9 = *(_DWORD *)(v6 + 28);
  if ((v9 & 0x7Eu) - 52 >= 6)
    v10 = 0;
  else
    v10 = v6;
  v25 = v10;
  v26[0] = &unk_24FAC3168;
  if (!v10)
  {
    if ((v9 & 0x7Fu) - 60 >= 7)
      v14 = 0;
    else
      v14 = v6;
    if (!v14)
      goto LABEL_54;
    if ((*(_DWORD *)(v14 + 28) & 0x7F) != 0x53)
    {
      v15 = *(_QWORD *)(v14 + 16);
      v16 = v15 & 0xFFFFFFFFFFFFFFF8;
      if ((v15 & 4) != 0)
        v16 = *(_QWORD *)v16;
      for (i = *(_WORD *)(v16 + 8) & 0x7F; i != 83; i = *(_WORD *)(v16 + 8) & 0x7F)
      {
        v18 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v18 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_31;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_30;
          if (i == 16)
            goto LABEL_24;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_37;
          if (i == 24)
          {
LABEL_24:
            v18 = -48;
          }
          else
          {
LABEL_30:
            if (i != 70)
            {
LABEL_31:
              v19 = i - 52;
              if ((i - 33) >= 5)
                v20 = -48;
              else
                v20 = -64;
              if (v19 >= 6)
                v18 = v20;
              else
                v18 = -72;
              goto LABEL_37;
            }
            v18 = -64;
          }
        }
LABEL_37:
        v21 = *(_QWORD *)(v16 + v18 + 16);
        v16 = v21 & 0xFFFFFFFFFFFFFFF8;
        if ((v21 & 4) != 0)
          v16 = *(_QWORD *)v16;
      }
      v6 = v16 - 40;
    }
    sub_22EFBC498(v14, *(_QWORD *)(v6 + 88));
    sub_22E632228();
    goto LABEL_54;
  }
  v11 = (llvm *)sub_22E62C21C(a1, a2);
  if ((_DWORD)v11)
  {
    if (llvm::getTimeTraceProfilerInstance(v11))
      llvm::timeTraceProfilerBegin();
    if (v6 && (v12 = *(_DWORD *)(v6 + 28), (v12 & 0x7Eu) - 58 >= 0xFFFFFFFC))
    {
      v13 = v12 & 0x7F;
      if (v13 == 57 || v13 == 55)
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 224) + 720))(*(_QWORD *)(a1 + 224), a2, a3);
      }
      else if ((*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v25 + 32))(v25) + 84) & 0x10) != 0)
      {
        sub_22F29B240(a1, a2, a3);
      }
      else
      {
        sub_22E631870();
      }
      v23 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 32))(v6);
      if ((*(_BYTE *)(v23 + 82) & 0xC) != 0 || (v22 = (llvm *)sub_22EFD7260(v23), (_DWORD)v22))
        v22 = (llvm *)sub_22E60ECA0(a1 + 704, a2, a3);
    }
    else if ((*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v25 + 32))(v25) + 84) & 0x10) != 0)
    {
      sub_22F29B240(a1, a2, a3);
    }
    else
    {
      v22 = (llvm *)sub_22E631870();
    }
    TimeTraceProfilerInstance = (llvm *)llvm::getTimeTraceProfilerInstance(v22);
    if (TimeTraceProfilerInstance)
      llvm::timeTraceProfilerEnd(TimeTraceProfilerInstance);
  }
LABEL_54:
  llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v26);
}

unint64_t sub_22E62D1E8(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Value *this, int a5)
{
  uint64_t *v9;
  unint64_t result;
  unint64_t v11;
  uint64_t v12;

  v9 = *(uint64_t **)(*(_QWORD *)(a1 + 144) + 2008);
  llvm::Value::getName(this);
  if ((sub_22F422AE0(*v9, a2, a3) & 1) != 0)
    return 1;
  if (a5)
    return sub_22F421FF0(v9, a2, a3, a5);
  result = sub_22E6155EC(*(_QWORD **)(*(_QWORD *)(a1 + 144) + 1992), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 1992) + 344));
  if (result)
  {
    v11 = *(_QWORD *)(result + 88);
    do
    {
      v12 = *(_QWORD *)(v11 + 8);
      if ((v12 & 2) == 0)
        break;
      v11 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v11);
    return sub_22F422AE0(*v9, a2, a3);
  }
  return result;
}

BOOL sub_22E62D2F0(uint64_t a1, llvm::Value *this, int a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t *v8;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  __int128 __p;
  uint64_t v18;
  unint64_t v19;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 256) & 0xF9;
  if (!v4)
    return 0;
  v8 = *(uint64_t **)(*(_QWORD *)(a1 + 144) + 2008);
  llvm::Value::getName(this);
  if ((sub_22F422AE0(*v8, v4, 0) & 1) != 0 || (sub_22F421FF0(v8, v4, 0, a3) & 1) != 0)
    return 1;
  if (a4 < 0x10)
    return 0;
  v10 = a4 & 0xFFFFFFFFFFFFFFF0;
  v11 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
  if (v11 && (*(_DWORD *)(v11 + 16) & 0xFEu) - 2 <= 3)
  {
    do
    {
      a4 = *(_QWORD *)(v11 + 32);
      v10 = a4 & 0xFFFFFFFFFFFFFFF0;
      v11 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
      if (v11)
        v12 = (*(_DWORD *)(v11 + 16) & 0xFEu) - 2 >= 4;
      else
        v12 = 1;
    }
    while (!v12);
  }
  v13 = *(_QWORD *)(v10 + 8);
  v14 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v14 + 8) & 0xF) != 0)
    v14 = (unint64_t)sub_22F10D2BC(a4 & 7 | v13);
  v19 = v14 & 0xFFFFFFFFFFFFFFF0;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 45)
    return 0;
  v15 = *(_QWORD *)(a1 + 144) + 15104;
  v18 = 0;
  __p = 0uLL;
  sub_22F119374((uint64_t *)&v19, &__p, v15);
  v16 = sub_22F422AE0(*v8, v4, 0);
  if (SHIBYTE(v18) < 0)
    operator delete((void *)__p);
  return (v16 & 1) != 0;
}

BOOL sub_22E62D4C4(uint64_t a1, llvm::Value *this, int a3)
{
  uint64_t v3;
  _BOOL8 result;
  unsigned __int16 v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  unsigned int v12;
  BOOL v13;
  unsigned __int16 v14;
  unsigned int v15;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 2024);
  if (*(_BYTE *)(v3 + 8))
    return 0;
  llvm::Value::getName(this);
  v7 = sub_22F1DD450();
  if (v7 >= 0x100u)
  {
    v13 = v7 == 0;
    return !v13;
  }
  if (!a3 || (v14 = sub_22F421F48(v3, a3), v15 = v14, result = v14 != 0, v15 <= 0xFF))
  {
    v8 = sub_22E6155EC(*(_QWORD **)(*(_QWORD *)(a1 + 144) + 1992), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 1992) + 344));
    if (!v8)
      goto LABEL_10;
    v9 = *(_QWORD *)(v8 + 88);
    do
    {
      v10 = *(_QWORD *)(v9 + 8);
      if ((v10 & 2) == 0)
        break;
      v9 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v9);
    v11 = sub_22F1DD50C();
    v12 = v11;
    result = v11 != 0;
    if (v12 <= 0xFF)
    {
LABEL_10:
      v13 = *(_BYTE *)(v3 + 9) == 0;
      return !v13;
    }
  }
  return result;
}

uint64_t sub_22E62D5D0(uint64_t a1, unint64_t a2)
{
  uint64_t v5;

  if ((*(_QWORD *)(*(_QWORD *)(a1 + 152) + 20) & 0x40000000000) != 0)
    return 1;
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 92) & 0x2000) != 0
    && a2
    && (*(_DWORD *)(a2 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9
    && ((v5 = *(_QWORD *)(a2 + 48), (v5 & 1) != 0) || (*(_BYTE *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) != 0)
    && !sub_22E3CB5E0(a2)
    && (*(_BYTE *)(a2 + 96) & 0x18) == 0)
  {
    return 1;
  }
  else
  {
    return sub_22EF736B8(*(_QWORD **)(a1 + 144), a2);
  }
}

uint64_t sub_22E62D664(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unsigned int v11;

  if (sub_22F10AFE4(a2, *(_QWORD *)(a1 + 144))
    || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v6 = *(_QWORD *)(a1 + 144);
    if ((*(_BYTE *)(*(_QWORD *)(v6 + 2000) + 1) & 1) == 0)
      return 1;
    v7 = sub_22EF5BA38(v6, a2);
    v8 = sub_22F10C2A4(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
    if (!v8)
      return 1;
    v10 = v8;
    v11 = (*(_DWORD *)(v8 + 28) & 0x7F) - 35;
    if (v11 > 2 || a3 == 0)
    {
      if (v11 >= 3)
        return 1;
    }
    else
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 104) + 96), *(_QWORD *)(v8 + 104));
      if ((**(_QWORD **)(v10 + 128) & 0x80000) == 0)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v10 + 104) + 96), *(_QWORD *)(v10 + 104));
        return (**(_QWORD **)(v10 + 128) >> 44) & 1;
      }
    }
  }
  return 0;
}

unint64_t sub_22E62D754(_QWORD *a1, unint64_t a2, _DWORD *a3, uint64_t a4, int a5)
{
  __int128 v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _OWORD v24[2];
  uint64_t v25;

  if (a4)
  {
    sub_22E6281E0(a1, a2, (uint64_t)v24);
    v10 = v24[1];
    *(_OWORD *)a4 = v24[0];
    *(_OWORD *)(a4 + 16) = v10;
    *(_QWORD *)(a4 + 32) = v25;
  }
  v11 = sub_22F10D4DC(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (v11 && (v12 = sub_22EFC8A80(*(_QWORD *)(v11 + 24))) != 0)
  {
    if (a3)
      *a3 = 1;
    return v12
         / (unint64_t)sub_22EF5CDF0(a1[18], *(_QWORD *)(*(_QWORD *)(a1[18] + 16408) & 0xFFFFFFFFFFFFFFF0));
  }
  else
  {
    v14 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16);
    v15 = sub_22EF5BA38(a1[18], a2);
    v16 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFF0);
    if (sub_22F1110EC(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0), 0))
    {
      if (a3)
        *a3 = 2;
      return 1;
    }
    else
    {
      if (a3)
        *a3 = 2;
      v17 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v17 & 8) != 0 && (*(_BYTE *)((v17 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 8) != 0)
      {
        v13 = 1;
      }
      else
      {
        if (a5
          && (v14 & 0xFEu) - 6 <= 0xFFFFFFFB
          && (v18 = sub_22F10C2A4(*v16)) != 0
          && (*(_DWORD *)(v18 + 28) & 0x7Fu) - 35 <= 2)
        {
          v19 = sub_22E47FE60((uint64_t)a1, v18);
        }
        else
        {
          v19 = sub_22EF5D130(a1[18], v15);
        }
        v13 = v19;
      }
      v20 = *(_QWORD *)(a1[19] + 32);
      v21 = HIDWORD(v20);
      if (HIDWORD(v20))
      {
        if (v13 > (uint64_t)HIDWORD(v20))
        {
          sub_22EF5CDF0(a1[18], *v16);
          if (!HIDWORD(v22))
            return v21;
        }
      }
    }
  }
  return v13;
}

unsigned int *sub_22E62D908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, uint64_t a10, char a11)
{
  unint64_t v16;
  uint64_t v17;
  uint64_t NamedValue;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int Key;
  uint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  BOOL v27;
  char v28;
  uint64_t v29;
  unsigned __int8 *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t BitCast;
  unsigned int v35;
  uint64_t *v36;
  char v37;
  int v38;
  llvm::LLVMContext *v39;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t *v68;
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  _QWORD *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t *v90;
  char *v91;
  uint64_t v92;
  int v93;
  unsigned __int8 *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  _QWORD *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  int v144;
  _QWORD v145[3];
  __int16 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  unsigned __int8 *OSVersion;
  void *v152;
  uint64_t v153;
  _WORD v154[32];
  _QWORD v155[4];

  v155[2] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v150 = a2;
  *((_QWORD *)&v150 + 1) = a3;
  v148 = a5;
  v149 = a6;
  v147 = a10;
  v16 = a5 & 0xFFFFFFFFFFFFFFF8;
  if ((a5 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 152) + 76) & 8) != 0)
    {
      v17 = *(_QWORD *)(a1 + 808);
      if (v17)
      {
        if ((sub_22E5B50EC(v17, a5, a6) & 1) == 0)
        {
          if (sub_22EFBF86C(v16, (unint64_t *)&OSVersion, 0))
          {
            if ((a11 & 1) == 0 && (a8 & 1) == 0)
            {
              OSVersion = 0;
              if (sub_22EFBF86C(v16, (unint64_t *)&OSVersion, 0))
              {
                v52 = OSVersion;
                if (OSVersion)
                {
                  if ((*((_DWORD *)OSVersion + 7) & 0x7F) != 0x39
                    && (*((_DWORD *)OSVersion + 7) & 0x7F) != 0x37
                    && sub_22E462B18((uint64_t)OSVersion))
                  {
                    sub_22EFC8868((unint64_t)v52);
                  }
                  sub_22E62F700();
                }
              }
            }
          }
        }
      }
    }
    if ((*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v16 + 32))(v16) + 84) & 0x10) != 0)
    {
      sub_22E628D48(a1, a5, a6, v16, &v150);
      if ((a11 & 1) == 0)
        return sub_22E631D88(a1, a5, a6);
    }
  }
  v142 = a6;
  NamedValue = llvm::Module::getNamedValue();
  if (NamedValue)
  {
    v19 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 888), (void *)NamedValue);
    v20 = *(_QWORD *)(a1 + 896);
    v21 = 904;
    if (v20 == *(_QWORD *)(a1 + 888))
      v21 = 908;
    if (v19 == (void **)(v20 + 8 * *(unsigned int *)(a1 + v21)))
    {
      if (v16)
      {
LABEL_17:
        if (!sub_22E49F808(v16))
        {
          if ((*(_BYTE *)(v16 + 29) & 1) == 0)
            goto LABEL_19;
          sub_22EFC8E88(v16);
          v127 = *((unsigned int *)v126 + 2);
          if ((_DWORD)v127)
          {
            v128 = 8 * v127;
            v129 = *v126;
            while (*(_WORD *)(*(_QWORD *)v129 + 32) != 155)
            {
              v129 += 8;
              v128 -= 8;
              if (!v128)
                goto LABEL_19;
            }
          }
          else
          {
            v129 = *v126;
          }
          if (v129 == *v126 + 8 * v127)
          {
LABEL_19:
            *(_DWORD *)(NamedValue + 32) &= 0xFFFFFCFF;
            sub_22E62876C(a1, (llvm::GlobalValue *)NamedValue);
          }
        }
      }
    }
    else
    {
      *v19 = (void *)-2;
      ++*(_DWORD *)(a1 + 912);
      if (v16)
      {
        if (!sub_22E6339A4(v16))
        {
          v22 = *(_DWORD *)(NamedValue + 32);
          *(_DWORD *)(NamedValue + 32) = v22 & 0xFFFFFFF0;
          if ((v22 & 0x30) != 0
            && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)NamedValue) & 1) == 0)
          {
            *(_DWORD *)(NamedValue + 32) |= 0x4000u;
          }
        }
        goto LABEL_17;
      }
    }
    if (a11)
    {
      if ((llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)NamedValue) & 1) == 0)
      {
        Key = llvm::StringMapImpl::FindKey();
        if (Key != -1 && Key != (unint64_t)*(unsigned int *)(a1 + 1568))
        {
          v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1560) + 8 * Key) + 8);
          v143 = a8;
          v25 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v16 + 32))(v16) & 0xFFFFFFFFFFFFFFF8;
          v26 = (_DWORD *)(v24 & 0xFFFFFFFFFFFFFFF8);
          v27 = v25 == ((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v26 + 32))(v26) & 0xFFFFFFFFFFFFFFF8);
          a8 = v143;
          if (!v27)
          {
            sub_22F29D710((uint64_t)&OSVersion, a1 + 1344, (uint64_t)&v148);
            if ((_BYTE)v153)
            {
              v130 = *(_QWORD *)(a1 + 208);
              *(_DWORD *)(v130 + 312) = *(_DWORD *)(v16 + 24);
              *(_DWORD *)(v130 + 316) = 755;
              if (*(char *)(v130 + 311) < 0)
              {
                **(_BYTE **)(v130 + 288) = 0;
                *(_QWORD *)(v130 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v130 + 288) = 0;
                *(_BYTE *)(v130 + 311) = 0;
              }
              OSVersion = (unsigned __int8 *)(v130 + 320);
              v152 = 0;
              v153 = v130;
              v154[0] = 1;
              *(_BYTE *)(v130 + 320) = 0;
              *(_DWORD *)(v130 + 664) = 0;
              v141 = v130;
              v134 = *(unsigned int *)(v130 + 776);
              if ((_DWORD)v134)
              {
                v135 = *(_QWORD *)(v130 + 768);
                v136 = 56 * v134;
                do
                {
                  if (*(char *)(v135 + v136 - 9) < 0)
                    operator delete(*(void **)(v135 + v136 - 32));
                  v136 -= 56;
                }
                while (v136);
              }
              *(_DWORD *)(v141 + 776) = 0;
              sub_22E3B89A8(&OSVersion, (void *)v150, *((size_t *)&v150 + 1));
              sub_22E3BB0B8((uint64_t)&OSVersion);
              v137 = *(_QWORD *)(a1 + 208);
              *(_DWORD *)(v137 + 312) = v26[6];
              *(_DWORD *)(v137 + 316) = 109;
              if (*(char *)(v137 + 311) < 0)
              {
                **(_BYTE **)(v137 + 288) = 0;
                *(_QWORD *)(v137 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v137 + 288) = 0;
                *(_BYTE *)(v137 + 311) = 0;
              }
              v145[0] = v137 + 320;
              v145[1] = 0;
              v145[2] = v137;
              v146 = 1;
              *(_BYTE *)(v137 + 320) = 0;
              *(_DWORD *)(v137 + 664) = 0;
              v138 = *(unsigned int *)(v137 + 776);
              if ((_DWORD)v138)
              {
                v139 = *(_QWORD *)(v137 + 768);
                v140 = 56 * v138;
                do
                {
                  if (*(char *)(v139 + v140 - 9) < 0)
                    operator delete(*(void **)(v139 + v140 - 32));
                  v140 -= 56;
                }
                while (v140);
              }
              *(_DWORD *)(v137 + 776) = 0;
              sub_22E3BB0B8((uint64_t)v145);
              a8 = v143;
            }
          }
        }
      }
    }
    if (*(unsigned __int8 *)(NamedValue + 16) <= 1u && *(_QWORD *)(NamedValue + 24) == a4)
      return (unsigned int *)NamedValue;
    if ((a11 & 1) == 0)
      goto LABEL_194;
  }
  v28 = a8;
  v29 = a4;
  v144 = *(unsigned __int8 *)(a4 + 8);
  if (v144 != 14)
    v29 = llvm::FunctionType::get();
  v31 = (void *)*((_QWORD *)&v150 + 1);
  v30 = (unsigned __int8 *)v150;
  if (NamedValue)
  {
    v30 = 0;
    v31 = 0;
  }
  v154[4] = 261;
  OSVersion = v30;
  v152 = v31;
  v32 = *(_QWORD *)(a1 + 200);
  v33 = llvm::User::operator new((llvm::User *)0x78);
  MEMORY[0x23489F6FC](v33, v29, 0, 0xFFFFFFFFLL, &OSVersion, v32);
  if (NamedValue)
  {
    llvm::Value::takeName();
    if (*(_QWORD *)(NamedValue + 8))
    {
      if (!*(_BYTE *)(NamedValue + 16))
        sub_22E63A904(NamedValue, v33);
      llvm::Constant::removeDeadConstantUsers((llvm::Constant *)NamedValue);
    }
    llvm::PointerType::get();
    BitCast = llvm::ConstantExpr::getBitCast();
    v35 = *(_DWORD *)(a1 + 1184);
    if (v35 >= *(_DWORD *)(a1 + 1188))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v35 = *(_DWORD *)(a1 + 1184);
    }
    v36 = (uint64_t *)(*(_QWORD *)(a1 + 1176) + 16 * v35);
    *v36 = NamedValue;
    v36[1] = BitCast;
    ++*(_DWORD *)(a1 + 1184);
  }
  v37 = v28;
  v38 = v144;
  if (!v16)
    goto LABEL_127;
  v39 = (llvm::LLVMContext *)*(unsigned int *)(v33 + 36);
  if (!(_DWORD)v39)
  {
    if (v144 == 14)
    {
      v41 = sub_22E46D978((_QWORD **)(a1 + 280), a5, v142);
      sub_22E62A548(a1, a5, v142, v41, (llvm::Value *)v33, a9);
    }
    if ((a9 & 1) == 0
      && (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 224) + 40))(*(_QWORD *)(a1 + 224), a5, v142))
    {
      if ((v42 = *(_QWORD *)(a1 + 216), v43 = *(_DWORD *)(v42 + 68), v43 != 28) && v43 != 7
        || (OSVersion = (unsigned __int8 *)llvm::Triple::getOSVersion((llvm::Triple *)(v42 + 32)),
            v152 = v44,
            v155[0] = 6,
            v155[1] = 0,
            (sub_22E3B38EC(&OSVersion, v155) & 1) == 0))
      {
        llvm::Function::addParamAttr();
      }
    }
    v45 = sub_22E62C1A0((llvm::GlobalValue *)v33, v16);
    sub_22E628990(v45, (unsigned int *)v33, v16);
    sub_22E628A68(a1, (llvm::GlobalValue *)v33, v16);
    if (v144 == 14 && llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v33))
    {
      v46 = sub_22E699F3C((_QWORD *)a1);
      (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v16, v33, a1);
    }
    if ((*(_BYTE *)(v16 + 29) & 1) == 0)
      goto LABEL_74;
    sub_22EFC8E88(v16);
    v48 = *(uint64_t **)v47;
    v49 = *(unsigned int *)(v47 + 8);
    v50 = *(uint64_t **)v47;
    if ((_DWORD)v49)
    {
      v51 = 8 * v49;
      v50 = *(uint64_t **)v47;
      while (*(_WORD *)(*v50 + 32) != 145)
      {
        ++v50;
        v51 -= 8;
        if (!v51)
          goto LABEL_74;
      }
    }
    if (v50 == &v48[v49])
    {
LABEL_74:
      if ((*(_BYTE *)(v16 + 29) & 1) == 0)
        goto LABEL_83;
      sub_22EFC8E88(v16);
      v55 = *(uint64_t **)v54;
      v56 = *(unsigned int *)(v54 + 8);
      v57 = *(uint64_t **)v54;
      if ((_DWORD)v56)
      {
        v58 = 8 * v56;
        v57 = *(uint64_t **)v54;
        while (*(_WORD *)(*v57 + 32) != 305)
        {
          ++v57;
          v58 -= 8;
          if (!v58)
            goto LABEL_83;
        }
      }
      if (v57 == &v55[v56])
        goto LABEL_83;
      do
        v59 = *v55++;
      while (*(_WORD *)(v59 + 32) != 305);
    }
    else
    {
      do
        v53 = *v48++;
      while (*(_WORD *)(v53 + 32) != 145);
    }
    llvm::GlobalObject::setSection();
LABEL_83:
    if ((*(_BYTE *)(v16 + 29) & 1) != 0)
    {
      sub_22EFC8E88(v16);
      v61 = *(uint64_t **)v60;
      v62 = *(unsigned int *)(v60 + 8);
      v63 = *(uint64_t **)v60;
      if ((_DWORD)v62)
      {
        v64 = 8 * v62;
        v63 = *(uint64_t **)v60;
        while (*(_WORD *)(*v63 + 32) != 171)
        {
          ++v63;
          v64 -= 8;
          if (!v64)
            goto LABEL_90;
        }
      }
      if (v63 != &v61[v62])
      {
        do
        {
          v74 = *v61++;
          v73 = v74;
        }
        while (*(_WORD *)(v74 + 32) != 171);
        if ((sub_22F2977C0(v73) & 1) != 0 || sub_22F248BA8(v73))
          llvm::Function::addFnAttr();
      }
    }
LABEL_90:
    if (sub_22EFC0170(v16))
    {
      OSVersion = 0;
      sub_22EFBF6E8(v16, &OSVersion);
      v65 = (unint64_t)OSVersion;
      if (sub_22E462B18((uint64_t)OSVersion))
        v65 = v65 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v65) + 96) & 0x80) == 0);
      if (sub_22E62C21C(a1, v65))
        llvm::Function::addFnAttr();
    }
    if (sub_22EFBFDCC(v16, 0, 0))
      llvm::Function::addFnAttr();
    v66 = *(_DWORD *)(v16 + 28);
    if ((v66 & 0x7F) == 0x37
      || (v66 & 0x7F) == 0x39
      || (v66 & 0x7Eu) - 58 >= 0xFFFFFFFC
      && ((v67 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v16 + 32))(v16),
           (*(_BYTE *)(v67 + 82) & 0xC) != 0)
       || sub_22EFD7260(v67)))
    {
      *(_DWORD *)(v33 + 32) = *(_DWORD *)(v33 + 32) & 0xFFFFFF3F | 0x80;
    }
    if ((~*(_QWORD *)(*(_QWORD *)(a1 + 184) + 32) & 0x480000000) != 0)
      sub_22E62AECC(a1, v16);
    if (*(_DWORD *)(*(_QWORD *)(a1 + 152) + 72) && (*(_BYTE *)(v16 + 29) & 1) != 0)
    {
      v69.n128_f64[0] = sub_22EFC8E88(v16);
      v70 = *((unsigned int *)v68 + 2);
      if ((_DWORD)v70)
      {
        v71 = 8 * v70;
        v72 = *v68;
        while (*(_WORD *)(*(_QWORD *)v72 + 32) != 479)
        {
          v72 += 8;
          v71 -= 8;
          if (!v71)
            goto LABEL_118;
        }
      }
      else
      {
        v72 = *v68;
      }
      if (v72 != *v68 + 8 * v70)
        (*(void (**)(_QWORD, unint64_t, uint64_t, __n128))(**(_QWORD **)(a1 + 808) + 512))(*(_QWORD *)(a1 + 808), v16, v33, v69);
    }
LABEL_118:
    if ((*(_BYTE *)(v16 + 29) & 1) != 0)
    {
      sub_22EFC8E88(v16);
      v76 = *(uint64_t **)v75;
      v77 = *(unsigned int *)(v75 + 8);
      v78 = *(uint64_t **)v75;
      if ((_DWORD)v77)
      {
        v79 = 8 * v77;
        v78 = *(uint64_t **)v75;
        while (*(_WORD *)(*v78 + 32) != 140)
        {
          ++v78;
          v79 -= 8;
          if (!v79)
            goto LABEL_127;
        }
      }
      if (v78 != &v76[v77])
      {
        do
          v80 = *v76++;
        while (*(_WORD *)(v80 + 32) != 140);
        OSVersion = (unsigned __int8 *)llvm::Function::getContext((llvm::Function *)v33);
        v155[0] = llvm::MDBuilder::createCallbackEncoding();
        llvm::MDTuple::getImpl();
        llvm::Value::addMetadata();
      }
    }
    goto LABEL_127;
  }
  *(_QWORD *)(v33 + 112) = llvm::Intrinsic::getAttributes(*(llvm::Intrinsic **)(a1 + 232), v39);
LABEL_127:
  if (llvm::AttributeList::hasAttributesAtIndex((llvm::AttributeList *)&v147))
  {
    llvm::Function::getContext((llvm::Function *)v33);
    llvm::AttributeList::getFnAttrs((llvm::AttributeList *)&v147);
    llvm::AttrBuilder::AttrBuilder();
    llvm::Function::addFnAttrs((llvm::Function *)v33, (const llvm::AttrBuilder *)&OSVersion);
    if (v152 != v154)
      free(v152);
  }
  if ((v37 & 1) != 0)
    goto LABEL_192;
  if (v16
    && (*(_DWORD *)(v16 + 28) & 0x7F) == 0x39
    && (*(unsigned int (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 224) + 384))(*(_QWORD *)(a1 + 224), v16, a5 & 7))
  {
    v81 = *(char **)(a1 + 1080);
    v82 = *(_QWORD *)(a1 + 1088);
    if ((unint64_t)v81 >= v82)
    {
      v84 = *(char **)(a1 + 1072);
      v85 = (v81 - v84) >> 4;
      v86 = v85 + 1;
      if ((unint64_t)(v85 + 1) >> 60)
        goto LABEL_239;
      v87 = v82 - (_QWORD)v84;
      if (v87 >> 3 > v86)
        v86 = v87 >> 3;
      if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF0)
        v88 = 0xFFFFFFFFFFFFFFFLL;
      else
        v88 = v86;
      if (v88)
      {
        if (v88 >> 60)
          goto LABEL_240;
        v89 = (char *)operator new(16 * v88);
      }
      else
      {
        v89 = 0;
      }
      v90 = (uint64_t *)&v89[16 * v85];
      v91 = &v89[16 * v88];
      *v90 = a5;
      v90[1] = v142;
      v83 = v90 + 2;
      if (v81 == v84)
      {
        v38 = v144;
      }
      else
      {
        v38 = v144;
        do
        {
          v92 = *((_QWORD *)v81 - 2);
          v81 -= 16;
          v93 = *((_DWORD *)v81 + 2);
          *(v90 - 2) = v92;
          v90 -= 2;
          *((_DWORD *)v90 + 2) = v93;
        }
        while (v81 != v84);
        v81 = *(char **)(a1 + 1072);
      }
      *(_QWORD *)(a1 + 1072) = v90;
      *(_QWORD *)(a1 + 1080) = v83;
      *(_QWORD *)(a1 + 1088) = v91;
      if (v81)
        operator delete(v81);
    }
    else
    {
      *(_QWORD *)v81 = a5;
      *((_QWORD *)v81 + 1) = v142;
      v83 = v81 + 16;
    }
    *(_QWORD *)(a1 + 1080) = v83;
  }
  OSVersion = 0;
  if (sub_22E63E32C((uint64_t *)(a1 + 1048), (uint64_t)&v150, &OSVersion))
  {
    v94 = OSVersion;
    if (OSVersion != (unsigned __int8 *)(*(_QWORD *)(a1 + 1048) + 32 * *(unsigned int *)(a1 + 1064)))
    {
      v96 = *((_QWORD *)OSVersion + 2);
      v95 = *((_QWORD *)OSVersion + 3);
      v97 = *(char **)(a1 + 1080);
      v98 = *(_QWORD *)(a1 + 1088);
      if ((unint64_t)v97 < v98)
      {
        *(_QWORD *)v97 = v96;
        *((_QWORD *)v97 + 1) = v95;
        v99 = v97 + 16;
LABEL_191:
        *(_QWORD *)(a1 + 1080) = v99;
        *(_OWORD *)v94 = xmmword_22F45B830;
        *(int32x2_t *)(a1 + 1056) = vadd_s32(*(int32x2_t *)(a1 + 1056), (int32x2_t)0x1FFFFFFFFLL);
        goto LABEL_192;
      }
      v105 = *(char **)(a1 + 1072);
      v106 = (v97 - v105) >> 4;
      v107 = v106 + 1;
      if (!((unint64_t)(v106 + 1) >> 60))
      {
        v108 = v98 - (_QWORD)v105;
        if (v108 >> 3 > v107)
          v107 = v108 >> 3;
        if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF0)
          v109 = 0xFFFFFFFFFFFFFFFLL;
        else
          v109 = v107;
        if (!v109)
        {
          v110 = 0;
          goto LABEL_184;
        }
        if (!(v109 >> 60))
        {
          v110 = (char *)operator new(16 * v109);
LABEL_184:
          v111 = &v110[16 * v106];
          v112 = &v110[16 * v109];
          *(_QWORD *)v111 = v96;
          *((_QWORD *)v111 + 1) = v95;
          v99 = v111 + 16;
          if (v97 == v105)
          {
            v38 = v144;
          }
          else
          {
            v38 = v144;
            do
            {
              v113 = *((_QWORD *)v97 - 2);
              v97 -= 16;
              v114 = *((_DWORD *)v97 + 2);
              *((_QWORD *)v111 - 2) = v113;
              v111 -= 16;
              *((_DWORD *)v111 + 2) = v114;
            }
            while (v97 != v105);
            v97 = *(char **)(a1 + 1072);
          }
          *(_QWORD *)(a1 + 1072) = v111;
          *(_QWORD *)(a1 + 1080) = v99;
          *(_QWORD *)(a1 + 1088) = v112;
          if (v97)
            operator delete(v97);
          goto LABEL_191;
        }
LABEL_240:
        sub_22E3B3F8C();
      }
LABEL_239:
      abort();
    }
  }
  if (!v16)
    goto LABEL_192;
  if ((**(_QWORD **)(a1 + 152) & 0x100) == 0)
    goto LABEL_192;
  v100 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v16 + 112) + 104), *(_QWORD *)(v16 + 112));
  if (!v100)
    goto LABEL_192;
  v101 = v100;
  while (1)
  {
    v102 = *(_QWORD *)(v101 + 16);
    v103 = v102 & 0xFFFFFFFFFFFFFFF8;
    if ((v102 & 4) != 0)
      v103 = *(_QWORD *)(v103 + 8);
    if ((*(_WORD *)(v103 + 8) & 0x7Fu) - 35 <= 2)
    {
      v104 = *(_QWORD *)(v101 + 80);
      if ((v104 & 0x8000000) == 0)
      {
        if (*(_QWORD *)(v101 + 128) | *(_QWORD *)(v101 + 80) & 0x20000000)
          break;
        goto LABEL_171;
      }
      if ((v104 & 0x20000000) != 0)
        break;
    }
LABEL_171:
    if ((*(_BYTE *)(v101 + 104) & 3) == 0)
    {
      v101 = sub_22E3CD31C((uint64_t *)(v101 + 104), v101);
      if (v101)
        continue;
    }
    goto LABEL_192;
  }
  v115 = v149;
  v116 = v148 & 7 | v101;
  v117 = *(unint64_t **)(a1 + 1080);
  v118 = *(_QWORD *)(a1 + 1088);
  if ((unint64_t)v117 < v118)
  {
    *v117 = v116;
    v117[1] = v115;
    v119 = v117 + 2;
    goto LABEL_221;
  }
  v120 = *(char **)(a1 + 1072);
  v121 = ((char *)v117 - v120) >> 4;
  v122 = v121 + 1;
  if ((unint64_t)(v121 + 1) >> 60)
    goto LABEL_239;
  v123 = v118 - (_QWORD)v120;
  if (v123 >> 3 > v122)
    v122 = v123 >> 3;
  if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFF0)
    v124 = 0xFFFFFFFFFFFFFFFLL;
  else
    v124 = v122;
  if (!v124)
  {
    v125 = 0;
    goto LABEL_216;
  }
  if (v124 >> 60)
    goto LABEL_240;
  v125 = (char *)operator new(16 * v124);
LABEL_216:
  v131 = (unint64_t *)&v125[16 * v121];
  *v131 = v116;
  v131[1] = v115;
  v119 = v131 + 2;
  if (v117 != (unint64_t *)v120)
  {
    do
    {
      v132 = *(v117 - 2);
      v117 -= 2;
      v133 = *((_DWORD *)v117 + 2);
      *(v131 - 2) = v132;
      v131 -= 2;
      *((_DWORD *)v131 + 2) = v133;
    }
    while (v117 != (unint64_t *)v120);
    v117 = *(unint64_t **)(a1 + 1072);
  }
  *(_QWORD *)(a1 + 1072) = v131;
  *(_QWORD *)(a1 + 1080) = v119;
  *(_QWORD *)(a1 + 1088) = &v125[16 * v124];
  if (v117)
    operator delete(v117);
LABEL_221:
  *(_QWORD *)(a1 + 1080) = v119;
LABEL_192:
  if (v38 == 14)
    return (unsigned int *)v33;
LABEL_194:
  llvm::PointerType::get();
  return (unsigned int *)llvm::ConstantExpr::getBitCast();
}

uint64_t sub_22E62E820(uint64_t a1, void *a2, size_t a3, uint64_t a4, unsigned int a5, unint64_t a6, uint64_t a7)
{
  _DWORD *NamedValue;
  _DWORD *v13;
  unsigned int v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BOOL4 v19;
  char v20;
  unint64_t v21;
  int Key;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  _QWORD *v35;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  int v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int i;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  llvm::Value *v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  __int16 v121;
  _QWORD v122[3];
  __int16 v123;
  void *v124;
  size_t v125;
  unsigned __int8 *v126;
  __int128 v127;
  __int16 v128;
  void *v129;
  uint64_t v130;
  _QWORD v131[10];

  v131[8] = *MEMORY[0x24BDAC8D0];
  v124 = a2;
  v125 = a3;
  NamedValue = (_DWORD *)llvm::Module::getNamedValue();
  v13 = NamedValue;
  v14 = a5 - 27;
  if (a5 < 0x1B)
    v14 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 15072) + 4 * a5);
  if (NamedValue)
  {
    v15 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 888), NamedValue);
    v16 = *(_QWORD *)(a1 + 896);
    v17 = 904;
    if (v16 == *(_QWORD *)(a1 + 888))
      v17 = 908;
    if (v15 == (void **)(v16 + 8 * *(unsigned int *)(a1 + v17)))
    {
      v19 = a6 != 0;
      if (a6)
      {
LABEL_14:
        if (sub_22E49F808(a6))
          goto LABEL_15;
        if ((*(_BYTE *)(a6 + 29) & 1) == 0)
          goto LABEL_17;
        sub_22EFC8E88(a6);
        v96 = *((unsigned int *)v95 + 2);
        if ((_DWORD)v96)
        {
          v97 = 8 * v96;
          v98 = *v95;
          while (*(_WORD *)(*(_QWORD *)v98 + 32) != 155)
          {
            v98 += 8;
            v97 -= 8;
            if (!v97)
              goto LABEL_17;
          }
        }
        else
        {
          v98 = *v95;
        }
        if (v98 != *v95 + 8 * v96)
        {
LABEL_15:
          v20 = 0;
        }
        else
        {
LABEL_17:
          v20 = 0;
          v13[8] &= 0xFFFFFCFF;
        }
LABEL_20:
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 72);
        if ((_DWORD)v21 && !(!v19 | (v21 >> 33) & 1))
          (*(void (**)(_QWORD, unint64_t, _DWORD *))(**(_QWORD **)(a1 + 808) + 464))(*(_QWORD *)(a1 + 808), a6, v13);
        if (*((_QWORD *)v13 + 3) == a4
          && llvm::GlobalValue::getAddressSpace((llvm::GlobalValue *)v13) == v14)
        {
          return (uint64_t)v13;
        }
        if ((_DWORD)a7)
        {
          if ((llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v13) & 1) == 0 && (v20 & 1) == 0)
          {
            Key = llvm::StringMapImpl::FindKey();
            if (Key != -1 && Key != (unint64_t)*(unsigned int *)(a1 + 1568))
            {
              v23 = a7;
              v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1560) + 8 * Key) + 8);
              v25 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a6 + 32))(a6);
              v26 = v24 & 0xFFFFFFFFFFFFFFF8;
              a7 = v23;
              if (v25 != ((*(uint64_t (**)(unint64_t))(*(_QWORD *)v26 + 32))(v26) & 0xFFFFFFFFFFFFFFF8)
                && (*(_DWORD *)(v26 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9
                && ((*(_DWORD *)(v26 + 28) & 0x7F) != 0x40 || (*(_DWORD *)(v26 + 96) & 0x600u) - 1536 <= 0xFFFFFBFF)
                && *(_QWORD *)(v26 + 88) >= 8uLL)
              {
                LODWORD(v120) = 0;
                v119 = a6;
                sub_22F29D710((uint64_t)&v126, a1 + 1344, (uint64_t)&v119);
                if (BYTE8(v127))
                {
                  v104 = *(_QWORD *)(a1 + 208);
                  *(_DWORD *)(v104 + 312) = *(_DWORD *)(a6 + 24);
                  *(_DWORD *)(v104 + 316) = 755;
                  v105 = v14;
                  if (*(char *)(v104 + 311) < 0)
                  {
                    **(_BYTE **)(v104 + 288) = 0;
                    *(_QWORD *)(v104 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v104 + 288) = 0;
                    *(_BYTE *)(v104 + 311) = 0;
                  }
                  v126 = (unsigned __int8 *)(v104 + 320);
                  *(_QWORD *)&v127 = 0;
                  *((_QWORD *)&v127 + 1) = v104;
                  v128 = 1;
                  *(_BYTE *)(v104 + 320) = 0;
                  *(_DWORD *)(v104 + 664) = 0;
                  v106 = *(unsigned int *)(v104 + 776);
                  if ((_DWORD)v106)
                  {
                    v107 = *(_QWORD *)(v104 + 768);
                    v108 = 56 * v106;
                    do
                    {
                      if (*(char *)(v107 + v108 - 9) < 0)
                        operator delete(*(void **)(v107 + v108 - 32));
                      v108 -= 56;
                    }
                    while (v108);
                  }
                  *(_DWORD *)(v104 + 776) = 0;
                  sub_22E3B89A8(&v126, v124, v125);
                  sub_22E3BB0B8((uint64_t)&v126);
                  v109 = *(_QWORD *)(a1 + 208);
                  *(_DWORD *)(v109 + 312) = *(_DWORD *)(v26 + 24);
                  *(_DWORD *)(v109 + 316) = 109;
                  if (*(char *)(v109 + 311) < 0)
                  {
                    **(_BYTE **)(v109 + 288) = 0;
                    *(_QWORD *)(v109 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v109 + 288) = 0;
                    *(_BYTE *)(v109 + 311) = 0;
                  }
                  v122[0] = v109 + 320;
                  v122[1] = 0;
                  v122[2] = v109;
                  v123 = 1;
                  *(_BYTE *)(v109 + 320) = 0;
                  *(_DWORD *)(v109 + 664) = 0;
                  v110 = *(unsigned int *)(v109 + 776);
                  if ((_DWORD)v110)
                  {
                    v111 = *(_QWORD *)(v109 + 768);
                    v112 = 56 * v110;
                    do
                    {
                      if (*(char *)(v111 + v112 - 9) < 0)
                        operator delete(*(void **)(v111 + v112 - 32));
                      v112 -= 56;
                    }
                    while (v112);
                  }
                  *(_DWORD *)(v109 + 776) = 0;
                  sub_22E3BB0B8((uint64_t)v122);
                  v14 = v105;
                  a7 = v23;
                }
              }
            }
          }
          if (v14 == *(_DWORD *)(*(_QWORD *)v13 + 8) >> 8)
            goto LABEL_36;
        }
        else if (v14 == *(_DWORD *)(*(_QWORD *)v13 + 8) >> 8)
        {
          llvm::PointerType::get();
          return llvm::ConstantExpr::getBitCast();
        }
        llvm::PointerType::get();
        return llvm::ConstantExpr::getAddrSpaceCast();
      }
    }
    else
    {
      *v15 = (void *)-2;
      ++*(_DWORD *)(a1 + 912);
      if (a6)
      {
        if (!sub_22E6339A4(a6))
        {
          v18 = v13[8];
          v13[8] = v18 & 0xFFFFFFF0;
          if ((v18 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v13) & 1) == 0)
            v13[8] |= 0x4000u;
        }
        v19 = 1;
        goto LABEL_14;
      }
      v19 = 0;
    }
    v20 = 1;
    goto LABEL_20;
  }
LABEL_36:
  v27 = sub_22E633E44(a1, a6);
  v28 = llvm::User::operator new((llvm::User *)0x58);
  LOWORD(v129) = 261;
  v126 = (unsigned __int8 *)v124;
  *(_QWORD *)&v127 = v125;
  llvm::GlobalVariable::GlobalVariable();
  if (v13)
  {
    llvm::Value::takeName();
    if (*((_QWORD *)v13 + 1))
    {
      llvm::ConstantExpr::getBitCast();
      llvm::Value::replaceAllUsesWith();
    }
    llvm::GlobalValue::eraseFromParent((llvm::GlobalValue *)v13);
  }
  v126 = 0;
  if (sub_22E63E32C((uint64_t *)(a1 + 1048), (uint64_t)&v124, &v126))
  {
    v29 = v126;
    if (v126 != (unsigned __int8 *)(*(_QWORD *)(a1 + 1048) + 32 * *(unsigned int *)(a1 + 1064)))
    {
      v117 = v28;
      v30 = a7;
      v31 = *((_QWORD *)v126 + 2);
      v32 = *((_QWORD *)v126 + 3);
      v33 = *(char **)(a1 + 1080);
      v34 = *(_QWORD *)(a1 + 1088);
      if ((unint64_t)v33 >= v34)
      {
        v116 = v27;
        v38 = *(char **)(a1 + 1072);
        v39 = (v33 - v38) >> 4;
        v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 60)
          goto LABEL_219;
        v41 = v34 - (_QWORD)v38;
        if (v41 >> 3 > v40)
          v40 = v41 >> 3;
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
          v42 = 0xFFFFFFFFFFFFFFFLL;
        else
          v42 = v40;
        if (v42)
        {
          if (v42 >> 60)
            goto LABEL_220;
          v43 = (char *)operator new(16 * v42);
        }
        else
        {
          v43 = 0;
        }
        v44 = &v43[16 * v39];
        *(_QWORD *)v44 = v31;
        *((_QWORD *)v44 + 1) = v32;
        v35 = v44 + 16;
        if (v33 == v38)
        {
          a7 = v30;
          v27 = v116;
        }
        else
        {
          a7 = v30;
          v27 = v116;
          do
          {
            v45 = *((_QWORD *)v33 - 2);
            v33 -= 16;
            v46 = *((_DWORD *)v33 + 2);
            *((_QWORD *)v44 - 2) = v45;
            v44 -= 16;
            *((_DWORD *)v44 + 2) = v46;
          }
          while (v33 != v38);
          v33 = *(char **)(a1 + 1072);
        }
        v28 = v117;
        *(_QWORD *)(a1 + 1072) = v44;
        *(_QWORD *)(a1 + 1080) = v35;
        *(_QWORD *)(a1 + 1088) = &v43[16 * v42];
        if (v33)
          operator delete(v33);
      }
      else
      {
        *(_QWORD *)v33 = v31;
        *((_QWORD *)v33 + 1) = v32;
        v35 = v33 + 16;
        a7 = v30;
        v28 = v117;
      }
      *(_QWORD *)(a1 + 1080) = v35;
      *(_OWORD *)v29 = xmmword_22F45B830;
      *(int32x2_t *)(a1 + 1056) = vadd_s32(*(int32x2_t *)(a1 + 1056), (int32x2_t)0x1FFFFFFFFLL);
    }
  }
  if (!a6)
    goto LABEL_118;
  v47 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 72);
  if ((_DWORD)v47)
    v48 = (v47 & 0x200000000) == 0;
  else
    v48 = 0;
  if (v48)
    (*(void (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 808) + 464))(*(_QWORD *)(a1 + 808), a6, v28);
  *(_BYTE *)(v28 + 80) = *(_BYTE *)(v28 + 80) & 0xFE | sub_22E62D664(a1, *(_QWORD *)(a6 + 48), 0);
  sub_22EF5B404(*(_QWORD *)(a1 + 144), a6, 0);
  llvm::GlobalObject::setAlignment();
  sub_22E62C1A0((llvm::GlobalValue *)v28, a6);
  sub_22EFBB794(a6);
  if ((_DWORD)v49)
  {
    sub_22EFBB794(a6);
    if (v50 != 2)
    {
LABEL_92:
      sub_22E628BA0(a1, v28, a6);
      goto LABEL_93;
    }
    v51 = *(unint64_t **)(a1 + 2064);
    v52 = *(_QWORD *)(a1 + 2072);
    if ((unint64_t)v51 < v52)
    {
      *v51 = a6;
      v53 = v51 + 1;
LABEL_91:
      *(_QWORD *)(a1 + 2064) = v53;
      goto LABEL_92;
    }
    v118 = v28;
    v54 = a7;
    v55 = *(_QWORD **)(a1 + 2056);
    v56 = v51 - v55;
    v57 = v56 + 1;
    if (!((unint64_t)(v56 + 1) >> 61))
    {
      v58 = v52 - (_QWORD)v55;
      if (v58 >> 2 > v57)
        v57 = v58 >> 2;
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
        v59 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v59 = v57;
      if (!v59)
      {
        v60 = 0;
        goto LABEL_86;
      }
      if (!(v59 >> 61))
      {
        v60 = (char *)operator new(8 * v59);
LABEL_86:
        v61 = (unint64_t *)&v60[8 * v56];
        *v61 = a6;
        v53 = v61 + 1;
        a7 = v54;
        if (v51 != v55)
        {
          do
          {
            v62 = *--v51;
            *--v61 = v62;
          }
          while (v51 != v55);
          v51 = *(unint64_t **)(a1 + 2056);
        }
        v27 = v27;
        v28 = v118;
        *(_QWORD *)(a1 + 2056) = v61;
        *(_QWORD *)(a1 + 2064) = v53;
        *(_QWORD *)(a1 + 2072) = &v60[8 * v59];
        if (v51)
          operator delete(v51);
        goto LABEL_91;
      }
LABEL_220:
      sub_22E3B3F8C();
    }
LABEL_219:
    abort();
  }
LABEL_93:
  sub_22E628990(v49, (unsigned int *)v28, a6);
  sub_22E628A68(a1, (llvm::GlobalValue *)v28, a6);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 15088) + 148) == 11 && (*(_DWORD *)(a6 + 28) & 0x7F) != 0x40)
  {
    v113 = *(_QWORD *)(a6 + 16);
    v114 = v113 & 0xFFFFFFFFFFFFFFF8;
    if ((v113 & 4) != 0)
      v114 = *(_QWORD *)v114;
    if ((*(_WORD *)(v114 + 8) & 0x7Eu) - 34 <= 3
      && sub_22E9D848C(*(_QWORD *)(*(_QWORD *)(a6 + 48) & 0xFFFFFFFFFFFFFFF0))
      && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a6 + 80) + 24))(*(_QWORD *)(a6 + 80)) & 1) == 0)
    {
      v115 = *(_QWORD *)(a6 + 80);
      if ((!v115 || (*(_DWORD *)(v115 + 28) & 0x7F) != 0x40 || (*(_DWORD *)(v115 + 96) & 0x600u) - 1536 <= 0xFFFFFBFF)
        && *(_QWORD *)(v115 + 88) >= 8uLL)
      {
        sub_22E632228();
      }
    }
  }
  if ((*(_BYTE *)(a6 + 96) & 5) == 1 && (*(_BYTE *)(a6 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a6);
    v64 = *(uint64_t **)v63;
    v65 = *(unsigned int *)(v63 + 8);
    v66 = *(uint64_t **)v63;
    if ((_DWORD)v65)
    {
      v67 = 8 * v65;
      v66 = *(uint64_t **)v63;
      while (*(_WORD *)(*v66 + 32) != 305)
      {
        ++v66;
        v67 -= 8;
        if (!v67)
          goto LABEL_104;
      }
    }
    if (v66 != &v64[v65])
    {
      do
        v68 = *v64++;
      while (*(_WORD *)(v68 + 32) != 305);
      llvm::GlobalObject::setSection();
    }
  }
LABEL_104:
  if (*(_DWORD *)(*(_QWORD *)(a1 + 216) + 56) == 43
    && !sub_22EFBBDAC(a6)
    && sub_22F10AFE4(*(_QWORD *)(a6 + 48), *(_QWORD *)(a1 + 144))
    && (sub_22EFB9558(a6) & 7u) >= 3)
  {
    llvm::GlobalObject::setSection();
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 2000) + 1) & 1) != 0 && (*(_BYTE *)(v28 + 32) & 0xF) == 0)
  {
    v79 = *(_QWORD *)(a6 + 48);
    if ((v79 & 1) != 0 || (*(_BYTE *)((v79 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) != 0)
    {
      if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v28))
      {
        v80 = a6;
        if ((*(_DWORD *)(a6 + 28) & 0x7F) != 0x53)
        {
          v81 = *(_QWORD *)(a6 + 16);
          v82 = v81 & 0xFFFFFFFFFFFFFFF8;
          if ((v81 & 4) != 0)
            v82 = *(_QWORD *)v82;
          for (i = *(_WORD *)(v82 + 8) & 0x7F; i != 83; i = *(_WORD *)(v82 + 8) & 0x7F)
          {
            v84 = -40;
            if (i > 70)
            {
              if (i == 71)
              {
                v84 = -56;
              }
              else if (i != 81)
              {
                goto LABEL_153;
              }
            }
            else
            {
              if (i > 0x18)
                goto LABEL_152;
              if (i == 16)
                goto LABEL_146;
              if (((1 << i) & 0x1066) != 0)
                goto LABEL_159;
              if (i == 24)
              {
LABEL_146:
                v84 = -48;
              }
              else
              {
LABEL_152:
                if (i != 70)
                {
LABEL_153:
                  v85 = i - 52;
                  if ((i - 33) >= 5)
                    v86 = -48;
                  else
                    v86 = -64;
                  if (v85 >= 6)
                    v84 = v86;
                  else
                    v84 = -72;
                  goto LABEL_159;
                }
                v84 = -64;
              }
            }
LABEL_159:
            v87 = *(_QWORD *)(v82 + v84 + 16);
            v82 = v87 & 0xFFFFFFFFFFFFFFF8;
            if ((v87 & 4) != 0)
              v82 = *(_QWORD *)v82;
          }
          v80 = v82 - 40;
        }
        if (!sub_22EFBC498(a6, *(_QWORD *)(v80 + 88))
          && ((*(_DWORD *)(a6 + 28) & 0x7F) != 0x40 || (*(_DWORD *)(a6 + 96) & 0x600u) - 1536 <= 0xFFFFFBFF)
          && *(_QWORD *)(a6 + 88) >= 8uLL
          && !sub_22E49F808(a6))
        {
          v88 = sub_22EF5BA38(*(_QWORD *)(a1 + 144), *(_QWORD *)(a6 + 48));
          v89 = sub_22F10C2A4(*(_QWORD *)(v88 & 0xFFFFFFFFFFFFFFF0));
          if (!v89
            || (v90 = v89, (*(_DWORD *)(v89 + 28) & 0x7Fu) - 35 > 2)
            || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v89 + 104) + 96), *(_QWORD *)(v89 + 104)),
                (**(_QWORD **)(v90 + 128) & 0x80000) == 0))
          {
            v91 = a7;
            v92 = 0;
            v93 = a6;
            while (!sub_22EFBC5B4(v93))
            {
              if ((*(_BYTE *)(v93 + 72) & 3) != 0)
              {
                if (v92)
                  goto LABEL_111;
                v92 = 1;
              }
              v94 = sub_22E3CD31C((uint64_t *)(v93 + 72), v93);
              if (v94 != a6)
              {
                v93 = v94;
                if (v94)
                  continue;
              }
              goto LABEL_111;
            }
            v126 = (unsigned __int8 *)a1;
            *(_QWORD *)&v127 = 0;
            *(_QWORD *)((char *)&v127 + 5) = 0;
            v129 = v131;
            v130 = 0x400000000;
            sub_22E5074F8((uint64_t)&v126, v93);
            if (v99)
            {
              v100 = *v99;
              if (*(_QWORD *)(v28 + 24) == *v99)
              {
                llvm::GlobalVariable::setInitializer();
                *(_BYTE *)(v28 + 80) |= 1u;
                v103 = *(_DWORD *)(v28 + 32);
                *(_DWORD *)(v28 + 32) = v103 & 0xFFFFFFF0 | 1;
                if ((v103 & 0x30) != 0
                  && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v28) & 1) == 0)
                {
                  *(_DWORD *)(v28 + 32) |= 0x4000u;
                }
              }
              else
              {
                v121 = 261;
                v119 = 0;
                v120 = 0;
                llvm::Value::setName();
                v101 = (llvm::Value *)sub_22E6315B8(a1, a6, v100, v91);
                v102 = llvm::Value::stripPointerCasts(v101);
                llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v28);
                v28 = v102;
              }
              sub_22E507758((uint64_t)&v126, v28);
            }
            if (v129 != v131)
              free(v129);
          }
        }
      }
    }
  }
LABEL_111:
  v69 = *(_DWORD *)(a6 + 28) & 0x7F;
  if (v69 != 64 && v69 != 62)
  {
    v70 = *(_QWORD *)(a6 + 16);
    v71 = (_QWORD *)(v70 & 0xFFFFFFFFFFFFFFF8);
    v72 = v70 & 0xFFFFFFFFFFFFFFF8;
    if ((v70 & 4) != 0)
      v72 = v71[1];
    v73 = *(_WORD *)(sub_22EFCBB30(v72) + 8) & 0x7F;
    if (v73 == 16 || v73 == 83)
      goto LABEL_237;
    if ((v70 & 4) != 0)
      v71 = (_QWORD *)*v71;
    if (((_WORD)v71[1] & 0x7Eu) - 34 <= 3)
    {
LABEL_237:
      if (sub_22E633F90(a6))
        (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 800) + 232))(*(_QWORD *)(a1 + 800), a1, a6, v28);
    }
  }
LABEL_118:
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v28)
    && (v74 = sub_22E699F3C((_QWORD *)a1),
        (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v74 + 16))(v74, a6, v28, a1),
        a6)
    && (*(_QWORD *)(*(_QWORD *)(a1 + 152) + 64) & 0x2000000000) != 0)
  {
    if (sub_22E466F1C(a6) && (*(_BYTE *)(a6 + 96) & 5) == 1)
      (*(void (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 816) + 32))(*(_QWORD *)(a1 + 816), a6, v28);
  }
  else if (!a6)
  {
    v75 = (*(_DWORD *)(*(_QWORD *)(a1 + 152) + 52) >> 30) & 1;
    goto LABEL_131;
  }
  if (sub_22E633FCC(a6))
  {
    v75 = 28;
  }
  else
  {
    v76 = *(_QWORD *)((*(_QWORD *)(a6 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v76 & 8) != 0)
      v75 = *(_DWORD *)((v76 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
    else
      v75 = 0;
  }
LABEL_131:
  if ((_DWORD)v27 != (_DWORD)v75)
  {
    v77 = sub_22E699F3C((_QWORD *)a1);
    v78 = llvm::PointerType::get();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v77 + 224))(v77, a1, v28, v27, v75, v78);
  }
  return v28;
}

void sub_22E62F700()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  _QWORD *v21;
  size_t v22;
  llvm::GlobalValue *NamedValue;
  llvm::GlobalValue *v24;
  uint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  _QWORD *v40;
  size_t v41;
  llvm::GlobalValue *v42;
  llvm::GlobalValue *v43;
  char *v44;
  unint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int i;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  int Key;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  char *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  void *v80;
  size_t v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  llvm::GlobalValue *v86;
  int v87;
  int v88;
  uint64_t v89;
  llvm::Value *v90;
  unsigned __int8 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  llvm::GlobalValue *v127;
  int v128;
  _BOOL4 v129;
  BOOL v130;
  int v131;
  int v132;
  unsigned int v133;
  unsigned int v134;
  _DWORD *v135;
  int v136;
  _QWORD *v137;
  uint64_t v138;
  unint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  unsigned __int8 v144;
  void **v145;
  std::string::size_type v146;
  std::string *v147;
  std::string::size_type v148;
  void *v149;
  int v150;
  unint64_t v151;
  uint64_t v152;
  void **v153;
  void *v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  int v169;
  uint64_t v170;
  const std::nothrow_t *v171;
  unint64_t v172;
  uint64_t *v173;
  BOOL v174;
  const void *Name;
  size_t v176;
  size_t v177;
  const void *v178;
  size_t v179;
  size_t v180;
  size_t v181;
  int v182;
  BOOL v183;
  int v185;
  unsigned int *v186;
  llvm::GlobalValue *v187;
  unsigned int *v188;
  uint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v203;
  _BYTE *v204;
  uint64_t v205;
  char v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  _QWORD *v210;
  unint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  char *v220;
  char v221;
  char *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  unint64_t v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  char *v235;
  unint64_t v236;
  _QWORD *v237;
  _QWORD *v238;
  char *v239;
  char *v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  char *v250;
  uint64_t v251;
  int v252;
  int v253;
  _BYTE *v254;
  int v255;
  int v256;
  llvm::GlobalValue *v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  _QWORD *v264;
  uint64_t v265;
  unint64_t v266;
  unint64_t v267;
  void *v268[2];
  uint64_t v269;
  __int16 v270;
  void *__p[2];
  char v272;
  std::string v273;
  __int128 v274;
  __int128 v275;
  uint64_t v276;
  __int16 v277;
  __int16 v278;
  __int128 v279;
  _QWORD v280[213];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v280[210] = *MEMORY[0x24BDAC8D0];
  v6 = v3 & 0xFFFFFFFFFFFFFFF8;
  if (sub_22E4E9AA8(v3 & 0xFFFFFFFFFFFFFFF8))
    return;
  if (sub_22E6314F8(v6))
  {
    if ((*(_BYTE *)(v6 + 29) & 1) == 0)
      goto LABEL_26;
    sub_22EFC8E88(v6);
    v8 = *(uint64_t **)v7;
    v9 = *(unsigned int *)(v7 + 8);
    v10 = *(uint64_t **)v7;
    if ((_DWORD)v9)
    {
      v11 = 8 * v9;
      v10 = *(uint64_t **)v7;
      while (*(_WORD *)(*v10 + 32) != 362)
      {
        ++v10;
        v11 -= 8;
        if (!v11)
          goto LABEL_26;
      }
    }
    if (v10 == &v8[v9])
    {
LABEL_26:
      v18 = 0;
    }
    else
    {
      do
      {
        v19 = *v8++;
        v18 = v19;
      }
      while (*(_WORD *)(v19 + 32) != 362);
    }
    v21 = sub_22E624994(v5, v4, v2);
    v22 = v20;
    if (v20 == *(_DWORD *)(v18 + 36) && (!v20 || !memcmp(*(const void **)(v18 + 40), v21, v20)))
    {
      v28 = *(_QWORD *)(v5 + 208);
      *(_DWORD *)(v28 + 312) = *(_QWORD *)(v18 + 16);
      *(_DWORD *)(v28 + 316) = 754;
      if (*(char *)(v28 + 311) < 0)
      {
        **(_BYTE **)(v28 + 288) = 0;
        *(_QWORD *)(v28 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v28 + 288) = 0;
        *(_BYTE *)(v28 + 311) = 0;
      }
      v58 = (unsigned __int8 *)(v28 + 320);
      v275 = (unint64_t)(v28 + 320);
      v276 = v28;
      v277 = 1;
      *(_BYTE *)(v28 + 320) = 0;
      *(_DWORD *)(v28 + 664) = 0;
      v59 = *(unsigned int *)(v28 + 776);
      if (!(_DWORD)v59)
        goto LABEL_201;
      v60 = *(_QWORD *)(v28 + 768);
      v61 = 56 * v59;
      do
      {
        if (*(char *)(v60 + v61 - 9) < 0)
          operator delete(*(void **)(v60 + v61 - 32));
        v61 -= 56;
      }
      while (v61);
LABEL_200:
      LODWORD(v59) = *v58;
LABEL_201:
      *(_DWORD *)(v28 + 776) = 0;
      v58[v59 + 1] = 2;
      *(_BYTE *)(v28 + 320) = v59 + 1;
      *(_QWORD *)&v58[8 * v59 + 16] = 0;
      goto LABEL_215;
    }
    NamedValue = (llvm::GlobalValue *)llvm::Module::getNamedValue();
    v24 = NamedValue;
    if (NamedValue && !llvm::GlobalValue::isDeclaration(NamedValue))
      return;
    v264 = v21;
    v25 = *(uint64_t **)(v5 + 1104);
    v26 = *(_QWORD *)(v5 + 1112);
    if ((unint64_t)v25 < v26)
    {
      *v25 = v4;
      v25[1] = v2;
      v27 = v25 + 2;
      goto LABEL_141;
    }
    v266 = v6;
    v29 = v4;
    v30 = v2;
    v31 = *(uint64_t **)(v5 + 1096);
    v32 = ((char *)v25 - (char *)v31) >> 4;
    v33 = v32 + 1;
    if (!((unint64_t)(v32 + 1) >> 60))
    {
      v34 = v26 - (_QWORD)v31;
      if (v34 >> 3 > v33)
        v33 = v34 >> 3;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
        v35 = 0xFFFFFFFFFFFFFFFLL;
      else
        v35 = v33;
      if (!v35)
      {
        v36 = 0;
        goto LABEL_136;
      }
      if (!(v35 >> 60))
      {
        v36 = (char *)operator new(16 * v35);
LABEL_136:
        v75 = (uint64_t *)&v36[16 * v32];
        v76 = &v36[16 * v35];
        *v75 = v29;
        v75[1] = v30;
        v2 = v30;
        v27 = v75 + 2;
        if (v25 != v31)
        {
          do
          {
            v77 = *(v25 - 2);
            v25 -= 2;
            v78 = *((_DWORD *)v25 + 2);
            *(v75 - 2) = v77;
            v75 -= 2;
            *((_DWORD *)v75 + 2) = v78;
          }
          while (v25 != v31);
          v25 = *(uint64_t **)(v5 + 1096);
        }
        v4 = v29;
        *(_QWORD *)(v5 + 1096) = v75;
        *(_QWORD *)(v5 + 1104) = v27;
        *(_QWORD *)(v5 + 1112) = v76;
        v6 = v266;
        if (v25)
          operator delete(v25);
LABEL_141:
        *(_QWORD *)(v5 + 1104) = v27;
        v79 = sub_22E66C868(v5 + 280, *(_QWORD *)(v6 + 48), 0);
        v80 = *(void **)(v18 + 40);
        v81 = *(unsigned int *)(v18 + 36);
        if (*(_BYTE *)(v79 + 8) == 14)
        {
          sub_22E62D908(v5, v80, v81, v79, v4, v2, 0, 0, 0, 0, 0);
        }
        else
        {
          sub_22E62E820(v5, v80, v81, v79, 0, 0, 0);
          if (v6 && (*(_DWORD *)(v6 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
          {
            v82 = *(_QWORD *)(v6 + 48);
            if ((v82 & 1) != 0)
              v83 = 1;
            else
              v83 = *(_BYTE *)((v82 & 0xFFFFFFFFFFFFFFF0) + 8) & 1;
            v84 = sub_22EF732CC(*(_QWORD **)(v5 + 144), v6);
            sub_22E629FAC((_QWORD *)v5, v6, v84, v83);
            goto LABEL_150;
          }
        }
        sub_22E629EF0(v5, v4);
LABEL_150:
        v278 = 257;
        v85 = llvm::GlobalAlias::create();
        v86 = (llvm::GlobalValue *)v85;
        if (!v24)
        {
          v278 = 261;
          *(_QWORD *)&v275 = v264;
          *((_QWORD *)&v275 + 1) = v22;
          llvm::Value::setName();
          goto LABEL_154;
        }
        if (*(llvm::GlobalValue **)(v85 - 32) != v24)
        {
          llvm::Value::takeName();
          llvm::ConstantExpr::getBitCast();
          llvm::Value::replaceAllUsesWith();
          llvm::GlobalValue::eraseFromParent(v24);
LABEL_154:
          if (sub_22E6339A4(v6) || sub_22E4E9AA8(v6) || sub_22EFCA55C(v6))
          {
            v87 = *((_DWORD *)v86 + 8);
            *((_DWORD *)v86 + 8) = v87 & 0xFFFFFFF0 | 4;
            if ((v87 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v86) & 1) == 0)
              *((_DWORD *)v86 + 8) |= 0x4000u;
          }
          if (v6)
          {
            if ((*(_DWORD *)(v6 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
            {
              sub_22EFBB794(v6);
              if (v88)
                sub_22E628BA0(v5, (uint64_t)v86, v6);
            }
          }
          sub_22E62AFD8(v5, v4, v2, (unsigned int *)v86);
          if ((*(_DWORD *)(v6 + 28) & 0x7Fu) - 60 <= 6)
          {
            v89 = *(_QWORD *)(v5 + 824);
            if (v89)
            {
              v90 = (llvm::Value *)llvm::Value::stripPointerCasts(*((llvm::Value **)v86 - 4));
              sub_22F257650(v89, v90, v4);
            }
          }
          return;
        }
        v28 = *(_QWORD *)(v5 + 208);
        *(_DWORD *)(v28 + 312) = *(_QWORD *)(v18 + 16);
        *(_DWORD *)(v28 + 316) = 754;
        if (*(char *)(v28 + 311) < 0)
        {
          **(_BYTE **)(v28 + 288) = 0;
          *(_QWORD *)(v28 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v28 + 288) = 0;
          *(_BYTE *)(v28 + 311) = 0;
        }
        v58 = (unsigned __int8 *)(v28 + 320);
        v275 = (unint64_t)(v28 + 320);
        v276 = v28;
        v277 = 1;
        *(_BYTE *)(v28 + 320) = 0;
        *(_DWORD *)(v28 + 664) = 0;
        v59 = *(unsigned int *)(v28 + 776);
        if (!(_DWORD)v59)
          goto LABEL_201;
        v108 = *(_QWORD *)(v28 + 768);
        v109 = 56 * v59;
        do
        {
          if (*(char *)(v108 + v109 - 9) < 0)
            operator delete(*(void **)(v108 + v109 - 32));
          v109 -= 56;
        }
        while (v109);
        goto LABEL_200;
      }
LABEL_444:
      sub_22E3B3F8C();
    }
LABEL_443:
    abort();
  }
  if (sub_22E624934(v6))
  {
    *(_QWORD *)&v279 = v4;
    *((_QWORD *)&v279 + 1) = v2;
    if ((*(_BYTE *)(v6 + 29) & 1) == 0)
      goto LABEL_48;
    sub_22EFC8E88(v6);
    v13 = *(uint64_t **)v12;
    v14 = *(unsigned int *)(v12 + 8);
    v15 = *(uint64_t **)v12;
    if ((_DWORD)v14)
    {
      v16 = 8 * v14;
      v15 = *(uint64_t **)v12;
      while (*(_WORD *)(*v15 + 32) != 366)
      {
        ++v15;
        v16 -= 8;
        if (!v16)
          goto LABEL_48;
      }
    }
    if (v15 == &v13[v14])
    {
LABEL_48:
      v37 = 0;
    }
    else
    {
      do
      {
        v38 = *v13++;
        v37 = v38;
      }
      while (*(_WORD *)(v38 + 32) != 366);
    }
    v265 = v4;
    v40 = sub_22E624994(v5, v4, v2);
    v41 = v39;
    if (v39 == *(_DWORD *)(v37 + 36) && (!v39 || !memcmp(*(const void **)(v37 + 40), v40, v39)))
    {
      v47 = *(_QWORD *)(v5 + 208);
      *(_DWORD *)(v47 + 312) = *(_QWORD *)(v37 + 16);
      *(_DWORD *)(v47 + 316) = 754;
      if (*(char *)(v47 + 311) < 0)
      {
        **(_BYTE **)(v47 + 288) = 0;
        *(_QWORD *)(v47 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v47 + 288) = 0;
        *(_BYTE *)(v47 + 311) = 0;
      }
      v91 = (unsigned __int8 *)(v47 + 320);
      v275 = (unint64_t)(v47 + 320);
      v276 = v47;
      v277 = 1;
      *(_BYTE *)(v47 + 320) = 0;
      *(_DWORD *)(v47 + 664) = 0;
      v92 = *(unsigned int *)(v47 + 776);
      if (!(_DWORD)v92)
        goto LABEL_214;
      v93 = *(_QWORD *)(v47 + 768);
      v94 = 56 * v92;
      do
      {
        if (*(char *)(v93 + v94 - 9) < 0)
          operator delete(*(void **)(v93 + v94 - 32));
        v94 -= 56;
      }
      while (v94);
    }
    else
    {
      v42 = (llvm::GlobalValue *)llvm::Module::getNamedValue();
      v43 = v42;
      if (v42 && (llvm::GlobalValue::isDeclaration(v42) & 1) == 0)
      {
        Key = llvm::StringMapImpl::FindKey();
        if (Key == -1)
          return;
        if (Key == (unint64_t)*(unsigned int *)(v5 + 1568))
          return;
        v73 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 1560) + 8 * Key) + 8);
        sub_22F29D710((uint64_t)&v275, v5 + 1344, (uint64_t)&v279);
        if (!(_BYTE)v276)
          return;
        v74 = *(_QWORD *)(v5 + 208);
        *(_DWORD *)(v74 + 312) = *(_DWORD *)(v6 + 24);
        *(_DWORD *)(v74 + 316) = 755;
        if (*(char *)(v74 + 311) < 0)
        {
          **(_BYTE **)(v74 + 288) = 0;
          *(_QWORD *)(v74 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v74 + 288) = 0;
          *(_BYTE *)(v74 + 311) = 0;
        }
        v190 = v73 & 0xFFFFFFFFFFFFFFF8;
        v275 = (unint64_t)(v74 + 320);
        v276 = v74;
        v277 = 1;
        *(_BYTE *)(v74 + 320) = 0;
        *(_DWORD *)(v74 + 664) = 0;
        v191 = *(unsigned int *)(v74 + 776);
        if ((_DWORD)v191)
        {
          v192 = *(_QWORD *)(v74 + 768);
          v193 = 56 * v191;
          do
          {
            if (*(char *)(v192 + v193 - 9) < 0)
              operator delete(*(void **)(v192 + v193 - 32));
            v193 -= 56;
          }
          while (v193);
        }
        *(_DWORD *)(v74 + 776) = 0;
        sub_22E3B89A8((unsigned __int8 **)&v275, v40, v41);
        sub_22E3BB0B8((uint64_t)&v275);
        v194 = *(_QWORD *)(v5 + 208);
        *(_DWORD *)(v194 + 312) = *(_DWORD *)(v190 + 24);
        *(_DWORD *)(v194 + 316) = 109;
        if (*(char *)(v194 + 311) < 0)
        {
          **(_BYTE **)(v194 + 288) = 0;
          *(_QWORD *)(v194 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v194 + 288) = 0;
          *(_BYTE *)(v194 + 311) = 0;
        }
        v275 = (unint64_t)(v194 + 320);
        v276 = v194;
        v277 = 1;
        *(_BYTE *)(v194 + 320) = 0;
        *(_DWORD *)(v194 + 664) = 0;
        v195 = *(unsigned int *)(v194 + 776);
        if ((_DWORD)v195)
        {
          v196 = *(_QWORD *)(v194 + 768);
          v197 = 56 * v195;
          do
          {
            if (*(char *)(v196 + v197 - 9) < 0)
              operator delete(*(void **)(v196 + v197 - 32));
            v197 -= 56;
          }
          while (v197);
        }
        *(_DWORD *)(v194 + 776) = 0;
LABEL_215:
        sub_22E3BB0B8((uint64_t)&v275);
        return;
      }
      v44 = *(char **)(v5 + 1104);
      v45 = *(_QWORD *)(v5 + 1112);
      if ((unint64_t)v44 >= v45)
      {
        v261 = v2;
        v48 = *(char **)(v5 + 1096);
        v49 = (v44 - v48) >> 4;
        v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 60)
          goto LABEL_443;
        v51 = v45 - (_QWORD)v48;
        if (v51 >> 3 > v50)
          v50 = v51 >> 3;
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0)
          v52 = 0xFFFFFFFFFFFFFFFLL;
        else
          v52 = v50;
        if (v52)
        {
          if (v52 >> 60)
            goto LABEL_444;
          v53 = (char *)operator new(16 * v52);
        }
        else
        {
          v53 = 0;
        }
        v101 = &v53[16 * v49];
        v102 = &v53[16 * v52];
        *(_OWORD *)v101 = v279;
        v46 = v101 + 16;
        if (v44 == v48)
        {
          v2 = v261;
        }
        else
        {
          v2 = v261;
          do
          {
            v103 = *((_QWORD *)v44 - 2);
            v44 -= 16;
            v104 = *((_DWORD *)v44 + 2);
            *((_QWORD *)v101 - 2) = v103;
            v101 -= 16;
            *((_DWORD *)v101 + 2) = v104;
          }
          while (v44 != v48);
          v44 = *(char **)(v5 + 1096);
        }
        *(_QWORD *)(v5 + 1096) = v101;
        *(_QWORD *)(v5 + 1104) = v46;
        *(_QWORD *)(v5 + 1112) = v102;
        if (v44)
          operator delete(v44);
      }
      else
      {
        *(_OWORD *)v44 = v279;
        v46 = v44 + 16;
      }
      *(_QWORD *)(v5 + 1104) = v46;
      sub_22E66C868(v5 + 280, *(_QWORD *)(v6 + 48), 0);
      llvm::PointerType::get();
      v105 = llvm::FunctionType::get();
      sub_22E62D908(v5, *(_QWORD *)(v37 + 40), *(unsigned int *)(v37 + 36), v105, 0, 0, 0, 0, 0, 0, 0);
      v278 = 257;
      v106 = llvm::GlobalIFunc::create();
      v107 = (unsigned int *)v106;
      if (!v43)
      {
        v278 = 261;
        *(_QWORD *)&v275 = v40;
        *((_QWORD *)&v275 + 1) = v41;
        llvm::Value::setName();
        goto LABEL_191;
      }
      if (*(llvm::GlobalValue **)(v106 - 32) != v43)
      {
        llvm::Value::takeName();
        llvm::ConstantExpr::getBitCast();
        llvm::Value::replaceAllUsesWith();
        llvm::GlobalValue::eraseFromParent(v43);
LABEL_191:
        sub_22E62AFD8(v5, v265, v2, v107);
        return;
      }
      v47 = *(_QWORD *)(v5 + 208);
      *(_DWORD *)(v47 + 312) = *(_QWORD *)(v37 + 16);
      *(_DWORD *)(v47 + 316) = 754;
      if (*(char *)(v47 + 311) < 0)
      {
        **(_BYTE **)(v47 + 288) = 0;
        *(_QWORD *)(v47 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v47 + 288) = 0;
        *(_BYTE *)(v47 + 311) = 0;
      }
      v91 = (unsigned __int8 *)(v47 + 320);
      v275 = (unint64_t)(v47 + 320);
      v276 = v47;
      v277 = 1;
      *(_BYTE *)(v47 + 320) = 0;
      *(_DWORD *)(v47 + 664) = 0;
      v92 = *(unsigned int *)(v47 + 776);
      if (!(_DWORD)v92)
      {
LABEL_214:
        *(_DWORD *)(v47 + 776) = 0;
        v91[v92 + 1] = 2;
        *(_BYTE *)(v47 + 320) = v92 + 1;
        *(_QWORD *)&v91[8 * v92 + 16] = 1;
        goto LABEL_215;
      }
      v117 = *(_QWORD *)(v47 + 768);
      v118 = 56 * v92;
      do
      {
        if (*(char *)(v117 + v118 - 9) < 0)
          operator delete(*(void **)(v117 + v118 - 32));
        v118 -= 56;
      }
      while (v118);
    }
    LODWORD(v92) = *v91;
    goto LABEL_214;
  }
  if (!sub_22E631558(v6))
  {
    v17 = *(_QWORD *)(v5 + 152);
    if ((*(_BYTE *)(v17 + 68) & 0x20) != 0)
    {
      if ((*(_WORD *)(v17 + 96) & 0x80) != 0)
      {
        if (!sub_22E466E5C(v6)
          && !sub_22E462B18(v6)
          && !sub_22E466EBC(v6)
          && !sub_22E469D10(v6)
          && !sub_22F1151E0(*(_QWORD *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF0))
          && !sub_22F115220(*(_QWORD *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF0)))
        {
          return;
        }
      }
      else if ((*(_DWORD *)(v6 + 28) & 0x7Eu) - 52 <= 5 && !sub_22F295B40(v6) && sub_22E466E5C(v6))
      {
        return;
      }
    }
    if (*(_DWORD *)(*(_QWORD *)(v5 + 152) + 72))
    {
      v54 = *(_QWORD *)(v5 + 808);
      if (v54
        && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v54 + 472))(v54, v4, v2) & 1) != 0)
      {
        return;
      }
      v55 = *(_DWORD *)(v6 + 28);
      v56 = v55 & 0x7F;
      if (v6 && v56 == 71)
      {
        if (sub_22E62D5D0(v5, v6))
          sub_22F259604(v5, v6, 0);
        return;
      }
      if (v6 && v56 == 70)
      {
        if (sub_22E62D5D0(v5, v6))
          sub_22F259678(v5, v6);
        return;
      }
    }
    else
    {
      v55 = *(_DWORD *)(v6 + 28);
    }
    if (v6 && (v55 & 0x7Eu) - 58 >= 0xFFFFFFFA)
    {
      v57 = *(_QWORD *)(v6 + 80);
      if ((v57 & 0x8000000) != 0)
      {
        if ((v57 & 0x20000000) == 0)
          goto LABEL_177;
      }
      else if (!(*(_QWORD *)(v6 + 128) | *(_QWORD *)(v6 + 80) & 0x20000000))
      {
LABEL_177:
        if (sub_22EFC1480(v6))
        {
          v95 = sub_22E624994(v5, v4, v2);
          v96 = v4;
          v98 = v97;
          v99 = sub_22E46D978((_QWORD **)(v5 + 280), v96, v2);
          v100 = sub_22E46F2EC(v5 + 280, v99);
          sub_22E62D908(v5, v95, v98, v100, v96, v2, 0, 0, 0, 0, 0);
        }
        return;
      }
LABEL_357:
      if (!sub_22E62D5D0(v5, v6))
        goto LABEL_377;
      v201 = *(_QWORD *)(*(_QWORD *)(v5 + 152) + 72);
      if (v201 >= 0x32 && (v201 & 0x200000000) == 0)
      {
        v205 = sub_22EF95D10(v6);
        if (!v206 || *(_DWORD *)(v205 + 60) != -1)
          goto LABEL_377;
      }
      if (v6 && (*(_DWORD *)(v6 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
      {
        v203 = *(_QWORD *)(v6 + 144) & 6;
        v204 = (_BYTE *)(*(_QWORD *)(v6 + 144) & 0xFFFFFFFFFFFFFFF8);
        if (v203 == 4 && v204)
        {
          v204 += 16;
          goto LABEL_373;
        }
        if (v203 == 2 && v204)
        {
LABEL_373:
          if ((*v204 & 6) == 0)
            goto LABEL_377;
        }
      }
      if (!v6
        || (*(_DWORD *)(v6 + 28) & 0x7Fu) - 67 < 0xFFFFFFF9
        || sub_22EF6AE34(*(_QWORD *)(v5 + 144), v6) != 2)
      {
        v213 = *(_QWORD *)(*(_QWORD *)(v5 + 152) + 72);
        if (!(_DWORD)v213
          || (v213 & 0x400000000) == 0
          || !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 144) + 15088) + 81)
          || (*(_DWORD *)(v6 + 28) & 0x7Fu) - 60 > 6
          || (sub_22E62D664(v5, *(_QWORD *)(v6 + 48), 0) & 1) != 0
          || (sub_22EF95D10(v6), v221))
        {
          sub_22E62CEB8(v5, v4, v2);
          return;
        }
      }
LABEL_377:
      if ((*(_BYTE *)(*(_QWORD *)(v5 + 152) + 1) & 1) != 0
        && (*(_DWORD *)(v6 + 28) & 0x7Fu) - 60 <= 6
        && ((*(_DWORD *)(v6 + 28) & 0x7F) != 0x40 || (*(_DWORD *)(v6 + 96) & 0x600u) - 1536 <= 0xFFFFFBFF)
        && *(_QWORD *)(v6 + 88) >= 8uLL)
      {
        v207 = v4;
        v208 = (_QWORD *)v5;
        v209 = (*(_QWORD *)(v5 + 2136) - *(_QWORD *)(v5 + 2128)) >> 3;
        *(_QWORD *)&v275 = v6;
        *((_DWORD *)sub_22E4D1AD8(v208 + 269, &v275) + 2) = v209;
        v5 = (uint64_t)v208;
        v210 = (_QWORD *)v208[267];
        v211 = v208[268];
        if ((unint64_t)v210 >= v211)
        {
          v214 = v2;
          v215 = (_QWORD *)v208[266];
          v216 = v210 - v215;
          v217 = v216 + 1;
          if ((unint64_t)(v216 + 1) >> 61)
            goto LABEL_443;
          v218 = v211 - (_QWORD)v215;
          if (v218 >> 2 > v217)
            v217 = v218 >> 2;
          if ((unint64_t)v218 >= 0x7FFFFFFFFFFFFFF8)
            v219 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v219 = v217;
          if (v219)
          {
            if (v219 >> 61)
              goto LABEL_444;
            v220 = (char *)operator new(8 * v219);
          }
          else
          {
            v220 = 0;
          }
          v222 = &v220[8 * v216];
          v223 = &v220[8 * v219];
          *(_QWORD *)v222 = 0;
          v212 = v222 + 8;
          v2 = v214;
          if (v210 != v215)
          {
            do
            {
              v224 = *--v210;
              *((_QWORD *)v222 - 1) = v224;
              v222 -= 8;
            }
            while (v210 != v215);
            v210 = *(_QWORD **)(v5 + 2128);
          }
          *(_QWORD *)(v5 + 2128) = v222;
          *(_QWORD *)(v5 + 2136) = v212;
          *(_QWORD *)(v5 + 2144) = v223;
          if (v210)
            operator delete(v210);
        }
        else
        {
          *v210 = 0;
          v212 = v210 + 1;
        }
        v4 = v207;
        *(_QWORD *)(v5 + 2136) = v212;
      }
      *(_QWORD *)&v275 = sub_22E624994(v5, v4, v2);
      *((_QWORD *)&v275 + 1) = v225;
      if (llvm::Module::getNamedValue())
      {
        v226 = *(char **)(v5 + 1080);
        v227 = *(_QWORD *)(v5 + 1088);
        if ((unint64_t)v226 >= v227)
        {
          v228 = v2;
          v229 = *(char **)(v5 + 1072);
          v230 = (v226 - v229) >> 4;
          v231 = v230 + 1;
          if ((unint64_t)(v230 + 1) >> 60)
            goto LABEL_443;
          v232 = v4;
          v233 = v227 - (_QWORD)v229;
          if (v233 >> 3 > v231)
            v231 = v233 >> 3;
          if ((unint64_t)v233 >= 0x7FFFFFFFFFFFFFF0)
            v234 = 0xFFFFFFFFFFFFFFFLL;
          else
            v234 = v231;
          if (v234)
          {
            if (v234 >> 60)
              goto LABEL_444;
            v235 = (char *)operator new(16 * v234);
          }
          else
          {
            v235 = 0;
          }
          v239 = &v235[16 * v230];
          v240 = &v235[16 * v234];
          *(_QWORD *)v239 = v232;
          *((_QWORD *)v239 + 1) = v228;
          v237 = v239 + 16;
          if (v226 == v229)
            goto LABEL_440;
          do
          {
            v241 = *((_QWORD *)v226 - 2);
            v226 -= 16;
            v242 = *((_DWORD *)v226 + 2);
            *((_QWORD *)v239 - 2) = v241;
            v239 -= 16;
            *((_DWORD *)v239 + 2) = v242;
          }
          while (v226 != v229);
LABEL_439:
          v226 = *(char **)(v5 + 1072);
LABEL_440:
          *(_QWORD *)(v5 + 1072) = v239;
          *(_QWORD *)(v5 + 1080) = v237;
          *(_QWORD *)(v5 + 1088) = v240;
          if (v226)
            operator delete(v226);
          goto LABEL_442;
        }
      }
      else
      {
        if (!sub_22E62D5D0(v5, v6))
        {
          v238 = sub_22E63E2C8((uint64_t *)(v5 + 1048), &v275);
          v238[2] = v4;
          *((_DWORD *)v238 + 6) = v2;
          return;
        }
        v226 = *(char **)(v5 + 1080);
        v236 = *(_QWORD *)(v5 + 1088);
        if ((unint64_t)v226 >= v236)
        {
          v243 = v2;
          v244 = *(char **)(v5 + 1072);
          v245 = (v226 - v244) >> 4;
          v246 = v245 + 1;
          if ((unint64_t)(v245 + 1) >> 60)
            goto LABEL_443;
          v247 = v4;
          v248 = v236 - (_QWORD)v244;
          if (v248 >> 3 > v246)
            v246 = v248 >> 3;
          if ((unint64_t)v248 >= 0x7FFFFFFFFFFFFFF0)
            v249 = 0xFFFFFFFFFFFFFFFLL;
          else
            v249 = v246;
          if (v249)
          {
            if (v249 >> 60)
              goto LABEL_444;
            v250 = (char *)operator new(16 * v249);
          }
          else
          {
            v250 = 0;
          }
          v239 = &v250[16 * v245];
          v240 = &v250[16 * v249];
          *(_QWORD *)v239 = v247;
          *((_QWORD *)v239 + 1) = v243;
          v237 = v239 + 16;
          if (v226 == v244)
            goto LABEL_440;
          do
          {
            v251 = *((_QWORD *)v226 - 2);
            v226 -= 16;
            v252 = *((_DWORD *)v226 + 2);
            *((_QWORD *)v239 - 2) = v251;
            v239 -= 16;
            *((_DWORD *)v239 + 2) = v252;
          }
          while (v226 != v244);
          goto LABEL_439;
        }
      }
      *(_QWORD *)v226 = v4;
      *((_QWORD *)v226 + 1) = v2;
      v237 = v226 + 16;
LABEL_442:
      *(_QWORD *)(v5 + 1080) = v237;
      return;
    }
    if ((v55 & 0x7F) == 0x53)
    {
      v69 = v6;
    }
    else
    {
      v62 = *(_QWORD *)(v6 + 16);
      v63 = v62 & 0xFFFFFFFFFFFFFFF8;
      if ((v62 & 4) != 0)
        v63 = *(_QWORD *)v63;
      for (i = *(_WORD *)(v63 + 8) & 0x7F; i != 83; i = *(_WORD *)(v63 + 8) & 0x7F)
      {
        v65 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v65 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_107;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_106;
          if (i == 16)
            goto LABEL_100;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_113;
          if (i == 24)
          {
LABEL_100:
            v65 = -48;
          }
          else
          {
LABEL_106:
            if (i != 70)
            {
LABEL_107:
              v66 = i - 52;
              if ((i - 33) >= 5)
                v67 = -48;
              else
                v67 = -64;
              if (v66 >= 6)
                v65 = v67;
              else
                v65 = -72;
              goto LABEL_113;
            }
            v65 = -64;
          }
        }
LABEL_113:
        v68 = *(_QWORD *)(v63 + v65 + 16);
        v63 = v68 & 0xFFFFFFFFFFFFFFF8;
        if ((v68 & 4) != 0)
          v63 = *(_QWORD *)v63;
      }
      v69 = v63 - 40;
    }
    if (sub_22EFBBF74(v6, *(_QWORD *)(v69 + 88)) != 2)
    {
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 144) + 15088) + 148) != 11
        || (*(_DWORD *)(v6 + 28) & 0x7F) == 0x40)
      {
        goto LABEL_453;
      }
      v198 = *(_QWORD *)(v6 + 16);
      v199 = v198 & 0xFFFFFFFFFFFFFFF8;
      if ((v198 & 4) != 0)
        v199 = *(_QWORD *)v199;
      if ((*(_WORD *)(v199 + 8) & 0x7Eu) - 34 > 3
        || !sub_22E9D848C(*(_QWORD *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF0))
        || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 80) + 24))(*(_QWORD *)(v6 + 80)) & 1) != 0
        || (v200 = *(_QWORD *)(v6 + 80)) != 0
        && (*(_DWORD *)(v200 + 28) & 0x7F) == 0x40
        && (*(_DWORD *)(v200 + 96) & 0x600u) - 1536 > 0xFFFFFBFF
        || *(_QWORD *)(v200 + 88) <= 7uLL)
      {
LABEL_453:
        if (*(_DWORD *)(*(_QWORD *)(v5 + 152) + 72) && (v70 = sub_22EF95D10(v6), v71))
        {
          v253 = *(_DWORD *)(v70 + 36);
          v254 = *(_BYTE **)(v5 + 808);
          if (v253 || v254[4248])
          {
            (*(void (**)(_BYTE *, unint64_t))(*(_QWORD *)v254 + 304))(v254, v6);
            return;
          }
        }
        else if (sub_22EF6AE34(*(_QWORD *)(v5 + 144), v6) != 3)
        {
          return;
        }
        sub_22E6315B8(v5, v6, 0, 0);
        return;
      }
    }
    goto LABEL_357;
  }
  if ((*(_BYTE *)(v6 + 29) & 1) == 0)
    goto LABEL_220;
  sub_22EFC8E88(v6);
  v111 = *(uint64_t **)v110;
  v112 = *(unsigned int *)(v110 + 8);
  v113 = *(uint64_t **)v110;
  if ((_DWORD)v112)
  {
    v119 = 8 * v112;
    v113 = *(uint64_t **)v110;
    while (*(_WORD *)(*v113 + 32) != 127)
    {
      ++v113;
      v119 -= 8;
      if (!v119)
        goto LABEL_220;
    }
  }
  if (v113 == &v111[v112])
  {
LABEL_220:
    v116 = v4;
    v114 = 0;
  }
  else
  {
    do
    {
      v115 = *v111++;
      v114 = v115;
    }
    while (*(_WORD *)(v115 + 32) != 127);
    v116 = v4;
  }
  v120 = sub_22E46D978((_QWORD **)(v5 + 280), v116, v2);
  v121 = v116;
  v122 = sub_22E46F2EC(v5 + 280, v120);
  *(_QWORD *)&v274 = sub_22E624994(v5, v121, v2);
  *((_QWORD *)&v274 + 1) = v123;
  sub_22E628D48(v5, v121, v2, v6, &v274);
  if (*(_DWORD *)(*(_QWORD *)(v5 + 216) + 76) == 3)
  {
    sub_22EF5CF80(*(_QWORD *)(v5 + 144), *(_QWORD *)(v6 + 48));
    llvm::PointerType::get();
    v124 = llvm::FunctionType::get();
    v125 = 0;
    v126 = 0;
  }
  else
  {
    v126 = v2;
    v125 = v121;
    v124 = v122;
  }
  v127 = (llvm::GlobalValue *)sub_22E62D908(v5, v274, *((_QWORD *)&v274 + 1), v124, v125, v126, 0, 0, 0, 0, 0);
  v128 = sub_22EFB948C(v6);
  v129 = v128 == 1;
  if (v128 == 4)
    v129 = 1;
  v130 = !v129;
  if (v129)
    v131 = 7;
  else
    v131 = 5;
  v132 = *((_DWORD *)v127 + 8);
  v133 = v132 & 0xFFFFFFC0;
  if (v130)
    v133 = *((_DWORD *)v127 + 8);
  v134 = v133 & 0xFFFFFFF0 | v131;
  v257 = v127;
  *((_DWORD *)v127 + 8) = v134;
  if (v128 != 1 && v128 != 4)
  {
    if ((v132 & 0x30) == 0 || (llvm::GlobalValue::hasExternalWeakLinkage(v127) & 1) != 0)
      goto LABEL_236;
    v134 = *((_DWORD *)v127 + 8);
  }
  *((_DWORD *)v127 + 8) = v134 | 0x4000;
LABEL_236:
  v135 = *(_DWORD **)(v5 + 216);
  v136 = v135[19];
  if ((v136 - 8) >= 2 && v136 != 5)
  {
    llvm::Value::getName(v257);
    llvm::Module::getOrInsertComdat();
    llvm::GlobalObject::setComdat();
    v135 = *(_DWORD **)(v5 + 216);
  }
  v137 = v280;
  *(_QWORD *)&v279 = v280;
  *((_QWORD *)&v279 + 1) = 0xA00000000;
  v138 = *(unsigned int *)(v114 + 36);
  if (!(_DWORD)v138)
  {
    v139 = 0;
    v140 = v280;
    goto LABEL_298;
  }
  v258 = v122;
  v141 = 0;
  v142 = *(uint64_t **)(v114 + 40);
  v259 = (_QWORD *)(v5 + 1560);
  v260 = &v142[v138];
  v262 = v2;
  v267 = v6;
  do
  {
    v143 = *v142;
    sub_22E6290C8(&v273, v5, v121, v2, v6, 1);
    v144 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v5 + 216) + 608))(*(_QWORD *)(v5 + 216), *(_QWORD *)(v143 + 16) + 16, **(unsigned int **)(v143 + 16));
    *(_QWORD *)&v275 = 46;
    v276 = v144;
    v278 = 1799;
    llvm::Twine::str((llvm::Twine *)&v275);
    if (v272 >= 0)
      v145 = __p;
    else
      v145 = (void **)__p[0];
    if (v272 >= 0)
      v146 = v272 & 0x7F;
    else
      v146 = (std::string::size_type)__p[1];
    v147 = std::string::append(&v273, (const std::string::value_type *)v145, v146);
    v148 = v147->__r_.__value_.__r.__words[2];
    *(_OWORD *)v268 = *(_OWORD *)&v147->__r_.__value_.__l.__data_;
    v269 = v148;
    v147->__r_.__value_.__l.__size_ = 0;
    v147->__r_.__value_.__r.__words[2] = 0;
    v147->__r_.__value_.__r.__words[0] = 0;
    if (v272 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v273.__r_.__value_.__l.__data_);
    v149 = (void *)llvm::Module::getNamedValue();
    if (!v149)
    {
      v150 = llvm::StringMapImpl::FindKey();
      if (v150 == -1 || v150 == (unint64_t)*(unsigned int *)(v5 + 1568))
      {
        v151 = 0;
      }
      else
      {
        v167 = *(_QWORD *)(*v259 + 8 * v150);
        v152 = *(_QWORD *)(v167 + 8);
        v151 = *(_QWORD *)(v167 + 16);
        v168 = v152 & 0xFFFFFFFFFFFFFFF8;
        if ((v152 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v169 = *(_DWORD *)(v168 + 28);
          if ((v169 & 0x7Eu) - 58 <= 0xFFFFFFF9)
          {
            if ((v169 & 0x7F) == 0x1D)
              v168 = *(_QWORD *)(v168 + 48);
            else
              v168 = 0;
          }
          if (sub_22EFBF86C(v168, (unint64_t *)&v275, 0))
          {
            sub_22E631870();
            v155 = llvm::Module::getNamedValue();
LABEL_262:
            v149 = (void *)v155;
            goto LABEL_263;
          }
LABEL_255:
          if (v269 >= 0)
            v153 = v268;
          else
            v153 = (void **)v268[0];
          if (v269 >= 0)
            v154 = (void *)(HIBYTE(v269) & 0x7F);
          else
            v154 = v268[1];
          LOBYTE(v256) = 1;
          LOBYTE(v255) = 0;
          v155 = sub_22E62D908(v5, v153, v154, v258, v152, v151, 0, 1, v255, 0, v256);
          goto LABEL_262;
        }
      }
      v151 = v151 & 0xFFFFFFFF00000000 | v141;
      v152 = v121;
      goto LABEL_255;
    }
LABEL_263:
    *(_QWORD *)&v275 = &v276;
    *((_QWORD *)&v275 + 1) = 0x2000000000;
    (*(void (**)(_DWORD *, uint64_t, _QWORD, __int128 *))(*(_QWORD *)v135 + 624))(v135, *(_QWORD *)(v143 + 16) + 16, **(unsigned int **)(v143 + 16), &v275);
    v156 = (uint64_t *)v275;
    v157 = DWORD2(v275);
    v263 = v141;
    if (DWORD2(v275))
    {
      v158 = v275 + 16 * DWORD2(v275);
      do
      {
        v159 = *v156;
        v160 = v156[1];
        if (v160)
          ++v159;
        *v156 = v159;
        v156[1] = v160 - (v160 != 0);
        v156 += 2;
      }
      while (v156 != (uint64_t *)v158);
      v161 = (uint64_t *)v275;
      v156 = (uint64_t *)(v275 + 16 * v157);
      v162 = 16 * v157;
      while (((*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)v135 + 576))(v135, *v161, v161[1]) & 1) != 0)
      {
        v161 += 2;
        v162 -= 16;
        if (!v162)
          goto LABEL_271;
      }
      v163 = v121;
      v164 = v5;
      v165 = v162 - 16;
      if (v162 == 16)
      {
        v156 = v161;
      }
      else
      {
        v166 = 0;
        v156 = v161;
        do
        {
          if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)v135 + 576))(v135, v161[v166 / 8 + 2], v161[v166 / 8 + 3]))
          {
            *(_OWORD *)v156 = *(_OWORD *)&v161[v166 / 8 + 2];
            v156 += 2;
          }
          v166 += 16;
        }
        while (v165 != v166);
      }
    }
    else
    {
LABEL_271:
      v163 = v121;
      v164 = v5;
    }
    DWORD2(v275) = (unint64_t)((unint64_t)v156 - v275) >> 4;
    __p[0] = v149;
    *(_OWORD *)&v273.__r_.__value_.__l.__data_ = 0uLL;
    sub_22F29B4E4((uint64_t)&v279, (uint64_t *)__p, (__int128 *)&v273, (uint64_t)&v275);
    if ((uint64_t *)v275 != &v276)
      free((void *)v275);
    v5 = v164;
    v2 = v262;
    if (SHIBYTE(v269) < 0)
      operator delete(v268[0]);
    v141 = v263 + 1;
    ++v142;
    v121 = v163;
    v6 = v267;
  }
  while (v142 != v260);
  v140 = (_QWORD *)v279;
  v139 = DWORD2(v279);
  v137 = (_QWORD *)(v279 + 168 * DWORD2(v279));
  if (DWORD2(v279))
  {
    v170 = v121;
    v171 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v172 = DWORD2(v279);
    while (1)
    {
      v173 = (uint64_t *)operator new(168 * v172, v171);
      if (v173)
        break;
      v174 = v172 > 1;
      v172 >>= 1;
      if (!v174)
      {
        v6 = v267;
        goto LABEL_298;
      }
    }
    v189 = v173;
    sub_22E653220((uint64_t)v140, v137, v139, v173, v172);
    operator delete(v189);
    v121 = v170;
    v6 = v267;
  }
  else
  {
    v139 = 0;
LABEL_298:
    sub_22E653220((uint64_t)v140, v137, v139, 0, 0);
  }
  if (DWORD2(v279) >= 2)
  {
    while (!llvm::X86::getCpuSupportsMask())
    {
      Name = (const void *)llvm::Value::getName(*(llvm::Value **)(v279 + 168 * DWORD2(v279) - 336));
      v177 = v176;
      v178 = (const void *)llvm::Value::getName(*(llvm::Value **)(v279 + 168 * DWORD2(v279) - 168));
      v180 = v179;
      if (v179 >= v177)
        v181 = v177;
      else
        v181 = v179;
      if (v181)
      {
        v182 = memcmp(Name, v178, v181);
        if ((v182 & 0x80000000) == 0)
        {
          v183 = v182 || v177 == v180;
          if (v183 || v177 >= v180)
            goto LABEL_316;
        }
LABEL_317:
        v185 = -2;
      }
      else
      {
        if (v177 < v179)
          goto LABEL_317;
LABEL_316:
        v185 = -1;
      }
      sub_22F29B568((uint64_t *)&v279, v279 + 168 * DWORD2(v279) + 168 * v185);
      if (DWORD2(v279) <= 1)
        break;
      continue;
    }
  }
  sub_22E618EBC((uint64_t)&v275, v5, 0);
  sub_22F2983F0(&v275, v257, (uint64_t *)v279, DWORD2(v279));
  if (*(_DWORD *)(*(_QWORD *)(v5 + 216) + 76) == 3)
  {
    sub_22EFB948C(v6);
    v186 = sub_22E631D88(v5, v121, v2);
    v187 = (llvm::GlobalValue *)v186;
    if (!v186 || *((_BYTE *)v186 + 16) != 2)
    {
      v270 = 257;
      llvm::GlobalIFunc::create();
      llvm::Value::takeName();
      llvm::Value::replaceAllUsesWith();
      llvm::GlobalValue::eraseFromParent(v187);
    }
    sub_22E6290C8(&v273, v5, v121, v2, v6, 1);
    if (!llvm::Module::getNamedValue())
    {
      v270 = 260;
      v268[0] = &v273;
      v188 = (unsigned int *)llvm::GlobalAlias::create();
      sub_22E62AFD8(v5, v121, v2, v188);
    }
    if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v273.__r_.__value_.__l.__data_);
  }
  sub_22E619434((uint64_t)&v275);
  sub_22F29D46C((char **)&v279);
}

BOOL sub_22E6314F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 362)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E631558(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 127)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22E6315B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = a3;
  v8 = *(_QWORD *)(a2 + 48);
  if (!a3)
    v5 = sub_22E66C868(a1 + 280, *(_QWORD *)(a2 + 48), 0);
  v9 = sub_22E624994(a1, a2, 0);
  v11 = v10;
  if (sub_22E633FCC(a2))
  {
    v13 = 28;
  }
  else
  {
    v12 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v12 & 8) != 0)
      v13 = *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
    else
      v13 = 0;
  }
  return sub_22E62E820(a1, v9, v11, v5, v13, a2, a4);
}

uint64_t sub_22E631674(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  uint64_t result;

  v2 = *a2;
  if ((v2 & 0xFE) == 0x70)
  {
    v3 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        goto LABEL_7;
      default:
        goto LABEL_5;
    }
  }
  if (v2 != 233)
    return ((uint64_t (*)(void))((char *)&loc_22E6316FC + 4 * byte_22F45B87E[v2 - 1]))();
  v3 = *(_DWORD *)a2;
  switch((*(_DWORD *)a2 >> 18) & 0x1F)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
LABEL_7:
      result = sub_22E63E810(a1, (uint64_t)a2);
      break;
    default:
LABEL_5:
      v2 = v3;
      return ((uint64_t (*)(void))((char *)&loc_22E6316FC + 4 * byte_22F45B87E[v2 - 1]))();
  }
  return result;
}

uint64_t sub_22E631704(_BYTE *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  result = sub_22E63E8FC(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a2 + 29) & 1) == 0)
      return 1;
    sub_22EFC8E88(a2);
    v6 = *v5;
    if ((*(_BYTE *)(a2 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a2);
      v8 = *(_QWORD *)v7 + 8 * *(unsigned int *)(v7 + 8);
    }
    else
    {
      v8 = 0;
    }
    if (v6 == v8)
    {
      return 1;
    }
    else
    {
      v9 = v6 + 8;
      do
      {
        result = sub_22E63EDA8((uint64_t)a1, *(_QWORD *)(v9 - 8));
        if ((_DWORD)result)
          v10 = v9 == v8;
        else
          v10 = 1;
        v9 += 8;
      }
      while (!v10);
    }
  }
  return result;
}

BOOL sub_22E63179C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  _BOOL8 result;

  while (1)
  {
    v1 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
    if (!v1 || (*(_DWORD *)(v1 + 16) & 0xFEu) - 6 <= 0xFFFFFFFB)
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_DWORD *)(v3 + 16) & 0xFEu) - 2 > 3)
      {
        v5 = *(_DWORD *)(v3 + 16);
        goto LABEL_9;
      }
      v4 = v1;
      v1 = sub_22F10CF48(v1);
      if (!v1)
        break;
    }
    a1 = *(_QWORD *)(v1 + 32);
  }
  v3 = *(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(unsigned __int8 *)(v3 + 16);
LABEL_9:
  result = 0;
  if (v5 == 45)
  {
    v6 = sub_22F114198(*(_QWORD *)(v3 + 24));
    if (v6 && (*(_DWORD *)(v6 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
    {
      v8 = v6;
      if (sub_22EFD10F8(v6))
      {
        v9 = sub_22EFD10F8(v8);
        if (!sub_22E49F808(v9))
          return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22E631870()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  __int128 v51;
  uint64_t v52;
  _QWORD v53[774];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = (uint64_t *)v0;
  v53[773] = *MEMORY[0x24BDAC8D0];
  v8 = v0 + 280;
  v9 = sub_22E46D978((_QWORD **)(v0 + 280), v5, v3);
  v10 = sub_22E46F2EC(v8, v9);
  if (!v2 || *(_QWORD *)(v2 + 24) != v10)
    v2 = sub_22E6336F0((uint64_t)v7, v6, v4, v10, 0, 1, 1);
  result = llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v2);
  if (!(_DWORD)result)
    return result;
  v12 = v6 & 0xFFFFFFFFFFFFFFF8;
  v13 = sub_22E629EF0((uint64_t)v7, v6);
  v14 = *(_DWORD *)(v2 + 32);
  if ((v13 - 7) < 2)
    v14 &= 0xFFFFFFCF;
  v15 = v14 & 0xFFFFFFF0 | v13 & 0xF;
  *(_DWORD *)(v2 + 32) = v15;
  if ((v13 & 0xFu) - 7 < 2)
    goto LABEL_59;
  if ((v14 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v2) & 1) == 0)
  {
    v15 = *(_DWORD *)(v2 + 32);
LABEL_59:
    *(_DWORD *)(v2 + 32) = v15 | 0x4000;
  }
  sub_22E628944((uint64_t)v7, (unsigned int *)v2, v6);
  if ((*(_DWORD *)(v12 + 28) & 0x7Fu) - 13 >= 0x3E)
    v16 = 0;
  else
    v16 = v6 & 0xFFFFFFFFFFFFFFF8;
  sub_22E628A68((uint64_t)v7, (llvm::GlobalValue *)v2, v16);
  if ((*(_BYTE *)(v7[19] + 1) & 1) != 0 && sub_22E4671B0(v6 & 0xFFFFFFFFFFFFFFF8))
  {
    v42 = *(_QWORD *)(v12 + 40);
    if (v42 >= 8 && (v42 & 7) == 0)
    {
      v43 = sub_22EFB948C(v6 & 0xFFFFFFFFFFFFFFF8);
      if (v43 == 4 || v43 == 1)
      {
        v44 = *(_QWORD *)(v12 + 112);
        v45 = *(_QWORD *)(v44 + 16);
        v46 = v45 & 0xFFFFFFFFFFFFFFF8;
        if ((v45 & 4) != 0)
          v46 = *(_QWORD *)v46;
        if ((*(_WORD *)(v46 + 8) & 0x7Eu) - 34 >= 4 && sub_22EFC09D4(v44))
        {
          v47 = *(_QWORD *)(v12 + 40);
          v48 = (v47 & 7) != 0 ? 0 : v47 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)&v51 = v48;
          *((_QWORD *)&v51 + 1) = v2;
          v49 = sub_22F29D904(v7 + 251, &v51);
          if (!v50)
            *(_QWORD *)(v49 + 8) = 0;
        }
      }
    }
  }
  sub_22E634260((uint64_t)v7, v6 & 0xFFFFFFFFFFFFFFF8, (llvm::Value *)v2);
  if (sub_22E47DCC4(v6 & 0xFFFFFFFFFFFFFFF8))
  {
    *(_QWORD *)&v51 = llvm::Function::getContext((llvm::Function *)v2);
    *((_QWORD *)&v51 + 1) = v53;
    v52 = 0x800000000;
    llvm::AttrBuilder::addAttribute();
    llvm::Function::addFnAttrs((llvm::Function *)v2, (const llvm::AttrBuilder *)&v51);
    if (*((_QWORD **)&v51 + 1) != v53)
      free(*((void **)&v51 + 1));
  }
  sub_22E618EBC((uint64_t)&v51, (uint64_t)v7, 0);
  sub_22E61E740((uint64_t)&v51, v6, v4, v2, v9);
  sub_22E619434((uint64_t)&v51);
  sub_22E62B944(v7, v6, v4, v2);
  sub_22E62A5F4(v7, v6 & 0xFFFFFFFFFFFFFFF8, (llvm::Function *)v2);
  if ((*(_BYTE *)(v12 + 29) & 1) != 0)
  {
    sub_22EFC8E88(v6 & 0xFFFFFFFFFFFFFFF8);
    v18 = *(uint64_t **)v17;
    v19 = *(unsigned int *)(v17 + 8);
    v20 = *(uint64_t **)v17;
    if ((_DWORD)v19)
    {
      v21 = 8 * v19;
      v20 = *(uint64_t **)v17;
      while (*(_WORD *)(*v20 + 32) != 150)
      {
        ++v20;
        v21 -= 8;
        if (!v21)
          goto LABEL_43;
      }
    }
    if (v20 != &v18[v19])
    {
      do
      {
        v23 = *v18++;
        v22 = v23;
      }
      while (*(_WORD *)(v23 + 32) != 150);
      v24 = *(_DWORD *)(v22 + 36);
      v25 = (_QWORD *)v7[184];
      v26 = v7[185];
      if ((unint64_t)v25 >= v26)
      {
        v28 = (_QWORD *)v7[183];
        v29 = 0xAAAAAAAAAAAAAAABLL * (v25 - v28) + 1;
        if (v29 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - (_QWORD)v28) >> 3);
        if (2 * v30 > v29)
          v29 = 2 * v30;
        if (v30 >= 0x555555555555555)
          v31 = 0xAAAAAAAAAAAAAAALL;
        else
          v31 = v29;
        if (v31)
        {
          if (v31 > 0xAAAAAAAAAAAAAAALL)
            sub_22E3B3F8C();
          v32 = (char *)operator new(24 * v31);
        }
        else
        {
          v32 = 0;
        }
        v33 = &v32[8 * (v25 - v28)];
        *(_DWORD *)v33 = v24;
        *((_QWORD *)v33 + 1) = v2;
        *((_QWORD *)v33 + 2) = 0;
        v27 = v33 + 24;
        if (v25 != v28)
        {
          do
          {
            v34 = *(_OWORD *)(v25 - 3);
            *((_QWORD *)v33 - 1) = *(v25 - 1);
            *(_OWORD *)(v33 - 24) = v34;
            v33 -= 24;
            v25 -= 3;
          }
          while (v25 != v28);
          v25 = (_QWORD *)v7[183];
        }
        v7[183] = (uint64_t)v33;
        v7[184] = (uint64_t)v27;
        v7[185] = (uint64_t)&v32[24 * v31];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *(_DWORD *)v25 = v24;
        v27 = v25 + 3;
        v25[1] = v2;
        v25[2] = 0;
      }
      v7[184] = (uint64_t)v27;
    }
  }
LABEL_43:
  if ((*(_BYTE *)(v12 + 29) & 1) != 0)
  {
    sub_22EFC8E88(v12);
    v36 = *(uint64_t **)v35;
    v37 = *(unsigned int *)(v35 + 8);
    v38 = *(uint64_t **)v35;
    if ((_DWORD)v37)
    {
      v39 = 8 * v37;
      v38 = *(uint64_t **)v35;
      while (*(_WORD *)(*v38 + 32) != 161)
      {
        ++v38;
        v39 -= 8;
        if (!v39)
          goto LABEL_52;
      }
    }
    if (v38 != &v36[v37])
    {
      do
      {
        v41 = *v36++;
        v40 = v41;
      }
      while (*(_WORD *)(v41 + 32) != 161);
      sub_22E629CDC((uint64_t)v7, v2, *(_DWORD *)(v40 + 36), 1);
    }
  }
LABEL_52:
  if (sub_22E55D960(v12))
    sub_22F29B8D0((const char *)v7, v12, v2);
  result = sub_22E4C7444(v12);
  if ((_DWORD)result)
    return sub_22F29A604((uint64_t)v7, v12, (llvm::GlobalValue *)v2);
  return result;
}

unsigned int *sub_22E631D88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  const std::string::value_type *v7;
  unsigned int *NamedValue;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  size_t v25;
  void **v26;
  std::string *v27;
  void **v28;
  void *v29;
  std::string *p_dst;
  std::string::size_type size;
  void *__p[2];
  char v34;
  __int16 v35;
  std::string __dst;
  std::string v37;

  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  sub_22E6290C8(&v37, a1, a2, a3, a2 & 0xFFFFFFFFFFFFFFF8, 1);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    sub_22E3BB2B4(&__dst, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
  else
    __dst = v37;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 216) + 76) == 3)
  {
    v7 = ".ifunc";
LABEL_6:
    std::string::append(&__dst, v7);
    goto LABEL_10;
  }
  if ((*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 32))(v6) + 84) & 0x10) != 0
    && sub_22E47DA60(v6))
  {
    v7 = ".resolver";
    goto LABEL_6;
  }
LABEL_10:
  NamedValue = (unsigned int *)llvm::Module::getNamedValue();
  if (NamedValue)
    goto LABEL_68;
  v9 = sub_22E46D978((_QWORD **)(a1 + 280), a2, a3);
  v10 = sub_22E46F2EC(a1 + 280, v9);
  if ((*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 32))(v6) + 84) & 0x10) != 0
    && sub_22E47DA60(v6)
    || (*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 32))(v6) + 84) & 0x10) != 0
    && sub_22EFC0D64(v6))
  {
    v11 = *(char **)(a1 + 1128);
    v12 = *(_QWORD *)(a1 + 1136);
    if ((unint64_t)v11 >= v12)
    {
      v14 = *(char **)(a1 + 1120);
      v15 = (v11 - v14) >> 4;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60)
        abort();
      v17 = v12 - (_QWORD)v14;
      if (v17 >> 3 > v16)
        v16 = v17 >> 3;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
        v18 = 0xFFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 60)
          sub_22E3B3F8C();
        v19 = (char *)operator new(16 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = (uint64_t *)&v19[16 * v15];
      *v20 = a2;
      v20[1] = a3;
      v13 = v20 + 2;
      if (v11 != v14)
      {
        do
        {
          v21 = *((_QWORD *)v11 - 2);
          v11 -= 16;
          v22 = *((_DWORD *)v11 + 2);
          *(v20 - 2) = v21;
          v20 -= 2;
          *((_DWORD *)v20 + 2) = v22;
        }
        while (v11 != v14);
        v11 = *(char **)(a1 + 1120);
      }
      *(_QWORD *)(a1 + 1120) = v20;
      *(_QWORD *)(a1 + 1128) = v13;
      *(_QWORD *)(a1 + 1136) = &v19[16 * v18];
      if (v11)
        operator delete(v11);
    }
    else
    {
      *(_QWORD *)v11 = a2;
      *((_QWORD *)v11 + 1) = a3;
      v13 = v11 + 16;
    }
    *(_QWORD *)(a1 + 1128) = v13;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 216) + 76) != 3
    || (*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 32))(v6) + 84) & 0x10) != 0
    && sub_22EFC0D04(v6))
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __dst.__r_.__value_.__l.__size_;
    NamedValue = (unsigned int *)sub_22E62D908(a1, p_dst, size, v10, 0, 0, 0, 0, 0, 0, 0);
    if (!sub_22E462B18(v6))
      goto LABEL_67;
  }
  else
  {
    sub_22EF5CF80(*(_QWORD *)(a1 + 144), *(_QWORD *)(v6 + 48));
    llvm::PointerType::get();
    v23 = llvm::FunctionType::get();
    v24 = SHIBYTE(v37.__r_.__value_.__r.__words[2]);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = *((_BYTE *)&v37.__r_.__value_.__s + 23) & 0x7F;
    else
      v25 = v37.__r_.__value_.__l.__size_;
    sub_22E3B8BF4((uint64_t)__p, v25 + 9);
    if (v34 >= 0)
      v26 = __p;
    else
      v26 = (void **)__p[0];
    if (v25)
    {
      if (v24 >= 0)
        v27 = &v37;
      else
        v27 = (std::string *)v37.__r_.__value_.__r.__words[0];
      memmove(v26, v27, v25);
    }
    strcpy((char *)v26 + v25, ".resolver");
    if (v34 >= 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
    if (v34 >= 0)
      v29 = (void *)(v34 & 0x7F);
    else
      v29 = __p[1];
    sub_22E62D908(a1, v28, v29, v23, 0, 0, 0, 0, 0, 0, 0);
    if (v34 < 0)
      operator delete(__p[0]);
    sub_22EFB948C(v6);
    v35 = 257;
    NamedValue = (unsigned int *)llvm::GlobalIFunc::create();
    v35 = 260;
    __p[0] = &__dst;
    llvm::Value::setName();
    if (!sub_22E462B18(v6))
      goto LABEL_67;
  }
  v6 |= (*(_WORD *)(sub_22EFC8868(v6) + 96) & 0x80) == 0;
LABEL_67:
  sub_22E62AFD8(a1, v6, 0, NamedValue);
LABEL_68:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  return NamedValue;
}

void sub_22E632228()
{
  uint64_t v0;
  unint64_t v1;
  int v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BOOL4 v17;
  __int16 v18;
  _BOOL4 v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  llvm::Value *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  llvm::Value *v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  BOOL v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  int v61;
  int v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  int v69;
  int v70;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  llvm::LLVMContext *v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  unint64_t v95;
  _DWORD *v96;
  unsigned int v97;
  uint64_t v98;
  llvm::Value *v99;
  llvm::BasicBlock *v100;
  llvm::Type *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  llvm::LLVMContext *v113;
  uint64_t v114;
  uint64_t v115;
  llvm::Type *v116;
  uint64_t v117;
  llvm::LLVMContext *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  llvm::LLVMContext *v132;
  llvm::LLVMContext *v133;
  llvm::LLVMContext *v134;
  llvm::LLVMContext *v135;
  unsigned int v136;
  llvm::LLVMContext *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  llvm::Module *v141;
  llvm::DataLayout *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  llvm::Module *Module;
  llvm::DataLayout *DataLayout;
  uint64_t *v150;
  uint64_t v151;
  char *v152;
  char *v153;
  unint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  char v162;
  _QWORD *v163;
  llvm::Function *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  llvm::Type *v168;
  int v169;
  _QWORD v170[2];
  uint64_t *v171;
  _BYTE v172[32];
  __int16 v173;
  uint64_t v174;
  uint64_t v175[4];
  __int16 v176;
  uint64_t v177;
  _QWORD v178[3];
  _BYTE *v179;
  uint64_t v180;
  _BYTE v181[64];
  char v182;
  uint64_t *v183[2];
  uint64_t v184;
  uint64_t v185;
  char *v186;
  int v187;
  _WORD v188[16];
  llvm::BasicBlock *v189;
  char *v190;
  llvm::Type *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  __int128 v195;
  const char *v196;
  uint64_t v197;
  __int16 v198;
  uint64_t v199;
  unsigned int v200;
  llvm::BasicBlock *v201;
  char *v202;
  uint64_t v203;
  llvm::Value *v204;
  uint64_t v205;
  uint64_t v206;

  v0 = MEMORY[0x24BDAC7A8]();
  v3 = v2;
  v4 = v1;
  v5 = v0;
  v206 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(v1 + 48);
  v7 = *(_QWORD *)(v0 + 152);
  if ((*(_DWORD *)(v7 + 52) & 0x40000000) != 0)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v8 && (*(_DWORD *)(v8 + 16) & 0xFF800FF) == 116391947)
      return;
  }
  if ((*(_BYTE *)(v7 + 76) & 8) != 0)
  {
    v10 = *(_QWORD *)(v0 + 808);
    if (v10)
    {
      if (((*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v10 + 456))(v10, v1, 0) & 1) != 0)
        return;
    }
  }
  v170[1] = 0;
  v171 = 0;
  v170[0] = 6;
  v11 = sub_22EFBEA2C(v4, *(_QWORD *)(v5 + 144));
  v12 = 0;
  v13 = v4;
  while (1)
  {
    v14 = sub_22EFBC5B4(v13);
    if (v14)
    {
      v16 = v13;
      goto LABEL_18;
    }
    if ((*(_BYTE *)(v13 + 72) & 3) != 0)
      break;
LABEL_14:
    v15 = sub_22E3CD31C((uint64_t *)(v13 + 72), v13);
    v16 = 0;
    if (v15 != v4)
    {
      v13 = v15;
      if (v15)
        continue;
    }
    goto LABEL_18;
  }
  if (!v12)
  {
    v12 = 1;
    goto LABEL_14;
  }
  v16 = 0;
LABEL_18:
  v17 = 0;
  LOBYTE(v177) = 0;
  v182 = 0;
  v18 = *(_WORD *)(*(_QWORD *)(v5 + 152) + 96);
  if ((v18 & 0x80) != 0)
  {
    v17 = sub_22E469D10(v4);
    v18 = *(_WORD *)(*(_QWORD *)(v5 + 152) + 96);
  }
  if ((v18 & 0x80) != 0 || sub_22E466F1C(v4))
    v19 = 0;
  else
    v19 = sub_22E466EBC(v4) || sub_22E466E5C(v4) || sub_22E469D10(v4);
  if ((*(_WORD *)(*(_QWORD *)(v5 + 152) + 96) & 0x80) != 0 && !sub_22E466F1C(v4))
    v20 = sub_22F1151E0(*(_QWORD *)(*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFFFF0))
       || sub_22F115220(*(_QWORD *)(*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFFFF0));
  else
    v20 = 0;
  v21 = *(_QWORD *)(v5 + 152);
  if ((*(_BYTE *)(v21 + 68) & 0x20) != 0 && (v17 || v19 || v20)
    || (*(_BYTE *)(v21 + 104) & 0x20) != 0
    && ((*(_BYTE *)(v4 + 29) & 1) != 0
     && (sub_22EFC8E88(v4), !sub_22E54E894(*(_QWORD *)v151, *(_QWORD *)v151 + 8 * *(unsigned int *)(v151 + 8)))
     || sub_22E633F90(v4))
    || sub_22E4C7388(v4))
  {
    sub_22E66C868(v5 + 280, v6, 0);
    v22 = llvm::UndefValue::get();
    if (v22)
      goto LABEL_33;
LABEL_35:
    v23 = 0;
    goto LABEL_36;
  }
  if (!v14)
  {
    v66 = *(_QWORD *)(v4 + 48);
    v67 = *(_QWORD *)((v66 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v67 & 8) != 0)
    {
      v68 = *(_DWORD *)((v67 & 0xFFFFFFFFFFFFFFF0) + 0x1C);
      v69 = v68 & 0xC;
      v70 = v68 & 0x20;
      if (v69 && v70 != 0)
        sub_22E6285D0(v5, v4, "static initializer with authenticated null values");
    }
    v22 = sub_22E507208((_QWORD *)v5, v66);
    if (!v22)
      goto LABEL_35;
LABEL_33:
    v171 = (uint64_t *)v22;
    if ((v22 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_35;
    goto LABEL_34;
  }
  *(_QWORD *)(v5 + 3448) = v4;
  *(_DWORD *)(v5 + 3456) = 0;
  v177 = v5;
  v178[0] = 0;
  *(_QWORD *)((char *)v178 + 5) = 0;
  v179 = v181;
  v180 = 0x400000000;
  v182 = 1;
  sub_22E5074F8((uint64_t)&v177, v16);
  if (v55)
  {
    v56 = v55;
    if (v171 != v55)
    {
      if (v171 && v171 != (uint64_t *)-8192 && v171 != (uint64_t *)-4096)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v170);
      v171 = v56;
      if (v56 != (uint64_t *)-8192 && v56 != (uint64_t *)-4096)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v170);
    }
    v23 = 0;
    if ((*(_BYTE *)(*(_QWORD *)(v5 + 152) + 1) & 1) != 0 && v11 != 1)
    {
      v186 = (char *)v4;
      *(_QWORD *)&v195 = 0;
      if (sub_22F25AFD8((uint64_t *)(v5 + 2152), &v186, &v195))
      {
        *(_QWORD *)v195 = -8192;
        *(int32x2_t *)(v5 + 2160) = vadd_s32(*(int32x2_t *)(v5 + 2160), (int32x2_t)0x1FFFFFFFFLL);
      }
      goto LABEL_35;
    }
    goto LABEL_36;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) & 0xFE) == 0x28)
    v78 = *(llvm::LLVMContext **)(v4 + 48);
  else
    v78 = *(llvm::LLVMContext **)(v14 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v5 + 152) + 1) & 1) != 0)
  {
    if (sub_22EFBEA80(v16, *(_QWORD *)(v5 + 144)))
      sub_22E6285D0(v5, v4, "flexible array initializer");
    v88 = sub_22E507208((_QWORD *)v5, (unint64_t)v78);
    if (v171 == (uint64_t *)v88)
    {
      v23 = 1;
    }
    else
    {
      v89 = (uint64_t *)v88;
      if (v171 && v171 != (uint64_t *)-8192 && v171 != (uint64_t *)-4096)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v170);
      v171 = v89;
      v23 = 1;
      if (v89 != (uint64_t *)-8192 && v89 != (uint64_t *)-4096 && v89 != 0)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v170);
    }
    goto LABEL_36;
  }
  sub_22E6285D0(v5, v4, "static initializer");
  sub_22E66CB04((llvm::Type ***)(v5 + 280), v78);
  v79 = llvm::UndefValue::get();
  if (v171 == (uint64_t *)v79)
    goto LABEL_35;
  v80 = (uint64_t *)v79;
  if (v171 && v171 != (uint64_t *)-8192 && v171 != (uint64_t *)-4096)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v170);
  v23 = 0;
  v171 = v80;
  if (v80 != (uint64_t *)-8192 && v80 != (uint64_t *)-4096 && v80 != 0)
  {
LABEL_34:
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v170);
    goto LABEL_35;
  }
LABEL_36:
  v24 = *v171;
  v25 = v3 ^ 1u;
  v26 = (llvm::Value *)sub_22E6315B8(v5, v4, *v171, v25);
  v27 = llvm::Value::stripPointerCasts(v26);
  v28 = v27;
  if (!v27 || *(_BYTE *)(v27 + 16) != 3 || *(_QWORD *)(v27 + 24) != v24)
    goto LABEL_42;
  v29 = *(_DWORD *)(*(_QWORD *)v27 + 8) >> 8;
  v30 = *(_QWORD *)(v5 + 144);
  v31 = sub_22E633E44(v5, v4);
  v32 = v31 - 27;
  if (v31 < 0x1B)
    v32 = *(_DWORD *)(*(_QWORD *)(v30 + 15072) + 4 * v31);
  if (v29 != v32)
  {
LABEL_42:
    v198 = 261;
    v195 = 0uLL;
    llvm::Value::setName();
    v33 = (llvm::Value *)sub_22E6315B8(v5, v4, v24, v25);
    v34 = llvm::Value::stripPointerCasts(v33);
    llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast();
    llvm::Value::replaceAllUsesWith();
    llvm::GlobalValue::eraseFromParent((llvm::GlobalValue *)v28);
    v28 = v34;
  }
  if ((*(_BYTE *)(*(_QWORD *)(v5 + 152) + 1) & 1) != 0 && sub_22E4671B0(v4))
  {
    v154 = *(_QWORD *)(v4 + 40);
    if (v154 >= 8 && (v154 & 7) == 0)
    {
      v155 = sub_22EFB948C(v4);
      if (v155 == 4 || v155 == 1)
      {
        v156 = *(_QWORD *)(v4 + 80);
        v157 = *(_QWORD *)(v156 + 16);
        v158 = v157 & 0xFFFFFFFFFFFFFFF8;
        if ((v157 & 4) != 0)
          v158 = *(_QWORD *)v158;
        if ((*(_WORD *)(v158 + 8) & 0x7Eu) - 34 >= 4 && sub_22EFBBF50(v156))
        {
          v159 = *(_QWORD *)(v4 + 40);
          v160 = (v159 & 7) != 0 ? 0 : v159 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)&v195 = v160;
          *((_QWORD *)&v195 + 1) = v28;
          v161 = sub_22F29D904((_QWORD *)(v5 + 2008), &v195);
          if (!v162)
            *(_QWORD *)(v161 + 8) = 0;
        }
      }
    }
  }
  if (sub_22E4C7444(v4))
    sub_22F29A604(v5, v4, (llvm::GlobalValue *)v28);
  v169 = 0;
  v35 = *(_BYTE *)(v28 + 80) & 1;
  v36 = sub_22EF732CC(*(_QWORD **)(v5 + 144), v4);
  v37 = sub_22E629FAC((_QWORD *)v5, v4, v36, v35);
  v169 = v37;
  v38 = *(_QWORD *)(v5 + 152);
  if ((*(_BYTE *)(v38 + 68) & 0x20) != 0)
  {
    if ((*(_WORD *)(v38 + 96) & 0x80) != 0)
    {
      if (v37 != 7
        && (sub_22E466E5C(v4)
         || sub_22E466EBC(v4)
         || sub_22F1151E0(*(_QWORD *)(*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFFFF0))
         || sub_22F115220(*(_QWORD *)(*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFFFF0))))
      {
        *(_BYTE *)(v28 + 80) |= 2u;
      }
    }
    else
    {
      (*(void (**)(_QWORD, unint64_t, int *))(**(_QWORD **)(v5 + 816) + 72))(*(_QWORD *)(v5 + 816), v4, &v169);
    }
    (*(void (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v5 + 816) + 32))(*(_QWORD *)(v5 + 816), v4, v28);
  }
  llvm::GlobalVariable::setInitializer();
  if (v182)
    sub_22E507758((uint64_t)&v177, v28);
  if (v11 == 1)
    v39 = 1;
  else
    v39 = v23;
  if ((v39 & 1) != 0)
  {
    LOBYTE(v40) = 0;
  }
  else if ((*(_BYTE *)(v4 + 29) & 1) == 0
         || (sub_22EFC8E88(v4),
             (v40 = sub_22E54E894(*(_QWORD *)v146, *(_QWORD *)v146 + 8 * *(unsigned int *)(v146 + 8))) != 0))
  {
    LOBYTE(v40) = sub_22E62D664(v5, *(_QWORD *)(v4 + 48), 1);
  }
  *(_BYTE *)(v28 + 80) = *(_BYTE *)(v28 + 80) & 0xFE | v40;
  if ((*(_BYTE *)(v4 + 29) & 1) != 0)
  {
    sub_22EFC8E88(v4);
    v42 = *(uint64_t **)v41;
    v43 = *(unsigned int *)(v41 + 8);
    v44 = *(uint64_t **)v41;
    if ((_DWORD)v43)
    {
      v45 = 8 * v43;
      v44 = *(uint64_t **)v41;
      while (*(_WORD *)(*v44 + 32) != 305)
      {
        ++v44;
        v45 -= 8;
        if (!v45)
          goto LABEL_78;
      }
    }
    if (v44 != &v42[v43])
    {
      do
      {
        v54 = *v42++;
        v53 = v54;
      }
      while (*(_WORD *)(v54 + 32) != 305);
      if ((*(_BYTE *)(*sub_22F29DA68((llvm::StringMapImpl *)(*(_QWORD *)(v5 + 144) + 19048), *(const void **)(v53 + 40), *(unsigned int *)(v53 + 36))+ 20) & 2) == 0)*(_BYTE *)(v28 + 80) |= 1u;
    }
  }
LABEL_78:
  sub_22EF5B404(*(_QWORD *)(v5 + 144), v4, 0);
  llvm::GlobalObject::setAlignment();
  sub_22EFBB794(v4);
  v46 = v169;
  if (v47 == 2 && !v169)
  {
    v48 = *(_QWORD *)(*(_QWORD *)(v5 + 144) + 15088);
    v49 = *(_DWORD *)(v48 + 68);
    v50 = v49 > 0x21;
    v51 = (1 << v49) & 0x3F0000888;
    v52 = v50 || v51 == 0;
    if (v52 || (*(_DWORD *)(v48 + 56) & 0xFFFFFFFE) == 0x30)
    {
      v46 = 0;
    }
    else if (sub_22E46B38C(v4))
    {
      v46 = v169;
    }
    else
    {
      v46 = 7;
      v169 = 7;
    }
  }
  v57 = *(_DWORD *)(v28 + 32);
  if ((v46 - 7) < 2)
    v57 &= 0xFFFFFFCF;
  v58 = v57 & 0xFFFFFFF0 | v46 & 0xF;
  *(_DWORD *)(v28 + 32) = v58;
  if ((v46 & 0xFu) - 7 < 2)
  {
LABEL_266:
    *(_DWORD *)(v28 + 32) = v58 | 0x4000;
  }
  else if ((v57 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v28) & 1) == 0)
  {
    v58 = *(_DWORD *)(v28 + 32);
    goto LABEL_266;
  }
  if (sub_22E49F808(v4))
  {
    v59 = *(_DWORD *)(v28 + 32) & 0xFFFFFCFF | 0x100;
  }
  else
  {
    if ((*(_BYTE *)(v4 + 29) & 1) == 0)
      goto LABEL_111;
    sub_22EFC8E88(v4);
    v121 = *((unsigned int *)v120 + 2);
    if ((_DWORD)v121)
    {
      v122 = 8 * v121;
      v123 = *v120;
      while (*(_WORD *)(*(_QWORD *)v123 + 32) != 155)
      {
        v123 += 8;
        v122 -= 8;
        if (!v122)
          goto LABEL_111;
      }
    }
    else
    {
      v123 = *v120;
    }
    if (v123 == *v120 + 8 * v121)
LABEL_111:
      v59 = *(_DWORD *)(v28 + 32) & 0xFFFFFCFF;
    else
      v59 = *(_DWORD *)(v28 + 32) & 0xFFFFFCFF | 0x200;
  }
  *(_DWORD *)(v28 + 32) = v59;
  if (v169 == 10)
  {
    *(_BYTE *)(v28 + 80) &= ~1u;
    if ((llvm::Constant::isNullValue(*(llvm::Constant **)(v28 - 32)) & 1) == 0)
    {
      v60 = *(_DWORD *)(v28 + 32);
      *(_DWORD *)(v28 + 32) = v60 & 0xFFFFFFF0 | 4;
      if ((v60 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v28) & 1) == 0)
        *(_DWORD *)(v28 + 32) |= 0x4000u;
    }
  }
  sub_22E62B944((_QWORD *)v5, v4, 0, v28);
  sub_22EFBB794(v4);
  if (v61 && (*(_BYTE *)(v28 + 33) & 0x1C) == 0)
  {
    sub_22EFBB794(v4);
    if (v62 == 2)
    {
      v63 = *(unint64_t **)(v5 + 2064);
      v64 = *(_QWORD *)(v5 + 2072);
      if ((unint64_t)v63 >= v64)
      {
        v72 = *(_QWORD **)(v5 + 2056);
        v73 = v63 - v72;
        v74 = v73 + 1;
        if ((unint64_t)(v73 + 1) >> 61)
          abort();
        v75 = v64 - (_QWORD)v72;
        if (v75 >> 2 > v74)
          v74 = v75 >> 2;
        if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
          v76 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v76 = v74;
        if (v76)
        {
          if (v76 >> 61)
            sub_22E3B3F8C();
          v77 = (char *)operator new(8 * v76);
        }
        else
        {
          v77 = 0;
        }
        v82 = (unint64_t *)&v77[8 * v73];
        *v82 = v4;
        v65 = v82 + 1;
        if (v63 != v72)
        {
          do
          {
            v83 = *--v63;
            *--v82 = v83;
          }
          while (v63 != v72);
          v63 = *(unint64_t **)(v5 + 2056);
        }
        *(_QWORD *)(v5 + 2056) = v82;
        *(_QWORD *)(v5 + 2064) = v65;
        *(_QWORD *)(v5 + 2072) = &v77[8 * v76];
        if (v63)
          operator delete(v63);
      }
      else
      {
        *v63 = v4;
        v65 = v63 + 1;
      }
      *(_QWORD *)(v5 + 2064) = v65;
    }
    sub_22E628BA0(v5, v28, v4);
  }
  sub_22E634260(v5, v4, (llvm::Value *)v28);
  if (v39)
  {
    sub_22E4CFF88();
  }
  else if ((*(_BYTE *)(v4 + 29) & 1) != 0)
  {
    sub_22EFC8E88(v4);
    if (!sub_22E54E894(*(_QWORD *)v147, *(_QWORD *)v147 + 8 * *(unsigned int *)(v147 + 8)))
      sub_22E4D0840(v5, v4, v28);
  }
  if (sub_22E634350(v4) || sub_22E633F90(v4))
    *(_BYTE *)(v28 + 80) |= 2u;
  sub_22E697DB4(*(uint64_t **)(v5 + 3480), (llvm::Value *)v28, v4, v23);
  v84 = *(_QWORD *)(v5 + 824);
  if (v84 && (*(_QWORD *)(*(_QWORD *)(v5 + 184) + 96) & 0x1800000000000000) != 0)
    sub_22E49DBF0(v84, v28, (uint64_t *)v4);
  if ((*(_DWORD *)(*(_QWORD *)(v5 + 184) + 92) & 0x200000) != 0 && sub_22E633F90(v4))
  {
    v85 = *(_QWORD *)(v5 + 824);
    v86 = sub_22E532CBC(v4);
    if (v86)
      v87 = *(_QWORD *)(v86 + 40);
    else
      v87 = 0;
    v91 = llvm::FunctionType::get();
    v92 = 0;
    v93 = *(_QWORD *)(v4 + 40);
    v94 = "";
    if ((v93 & 7) == 0)
    {
      v95 = v93 & 0xFFFFFFFFFFFFFFF8;
      if (v95)
      {
        v96 = *(_DWORD **)(v95 + 16);
        v97 = *v96;
        v94 = (const char *)(v96 + 4);
        v92 = v97;
      }
    }
    v198 = 1283;
    *(_QWORD *)&v195 = "tracepoint.init_";
    v196 = v94;
    v197 = v92;
    v98 = *(_QWORD *)(v5 + 200);
    v99 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
    MEMORY[0x23489F6FC](v99, v91, 7, 0xFFFFFFFFLL, &v195, v98);
    *(_QWORD *)&v195 = "entry";
    v198 = 259;
    v100 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock();
    sub_22E618EBC((uint64_t)&v195, v5, 0);
    v204 = v99;
    v201 = v100;
    v202 = (char *)v100 + 40;
    v101 = *(llvm::Type **)(v5 + 24);
    v188[8] = 257;
    v205 = sub_22E3E4D88((uint64_t)&v199, v101, 0, (uint64_t)&v186);
    sub_22E49A954(v85, 0, 0, *(_DWORD *)(v4 + 24), *(_DWORD *)(v4 + 24), 0, v99, 0);
    v164 = v99;
    MEMORY[0x23489D440](&v186, v99);
    v165 = (uint64_t)v100;
    v189 = v100;
    v190 = (char *)v100 + 40;
    if (v87)
    {
      v102 = v85;
      v103 = (*(uint64_t (**)(_QWORD, __int128 *, uint64_t))(**(_QWORD **)(v5 + 800) + 128))(*(_QWORD *)(v5 + 800), &v195, v87);
      v175[0] = (uint64_t)"fcp.guarded";
      v176 = 259;
      v104 = operator new();
      llvm::BasicBlock::BasicBlock();
      v175[0] = (uint64_t)"fcp.guarded.cont";
      v176 = 259;
      v105 = operator new();
      llvm::BasicBlock::BasicBlock();
      v106 = llvm::User::operator new((llvm::User *)0x40);
      v165 = v105;
      MEMORY[0x23489C09C](v106, v104, v105, v103, 0);
      v176 = 257;
      (*(void (**)(uint64_t, uint64_t, uint64_t *, llvm::BasicBlock *, char *))(*(_QWORD *)v203 + 16))(v203, v106, v175, v201, v202);
      if (v200)
      {
        v107 = v199;
        v108 = v199 + 16 * v200;
        do
        {
          llvm::Instruction::setMetadata();
          v107 += 16;
        }
        while (v107 != v108);
      }
      v109 = llvm::User::operator new((llvm::User *)0x40);
      v110 = MEMORY[0x23489C090](v109, v165, v104);
      v189 = *(llvm::BasicBlock **)(v110 + 40);
      v190 = (char *)(v110 + 24);
      v175[0] = *(_QWORD *)(v110 + 48);
      if (v175[0])
      {
        llvm::MetadataTracking::track();
        v111 = v175[0];
      }
      else
      {
        v111 = 0;
      }
      v85 = v102;
      sub_22E3CF21C((uint64_t)&v186, 0, v111);
      if (v175[0])
        llvm::MetadataTracking::untrack();
    }
    v163 = (_QWORD *)v85;
    llvm::TracepointBuilder::CreateGlobalVariableTracepoint((llvm::TracepointBuilder *)&v186, (llvm::GlobalVariable *)v28);
    v112 = sub_22E5453EC(*(_QWORD *)(*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFFFF0));
    if (!sub_22E475308(*(_QWORD *)(*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFFFF0)))
    {
      if (!v112)
      {
        v114 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFFFF0));
        if (v114 && (*(_DWORD *)(v114 + 28) & 0x7Fu) - 35 >= 3)
          v114 = 0;
        v115 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(sub_22EFC3B90(v114) + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v116 = (llvm::Type *)sub_22E66C868(v5 + 280, v115 & 0xFFFFFFFFFFFFFFF0, 0);
        v117 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 800) + 56))(*(_QWORD *)(v5 + 800), v115);
        v118 = *(llvm::LLVMContext **)(v28 + 24);
        v176 = 257;
        sub_22E3C4170((uint64_t *)&v186, v118, (uint64_t *)v28, 0, 0, (uint64_t)v175);
        if (v117)
          v119 = *(_QWORD *)(v117 + 24);
        else
          v119 = 0;
        v173 = 257;
        Module = (llvm::Module *)llvm::BasicBlock::getModule(v189);
        DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(Module);
        llvm::DataLayout::getABITypeAlign(DataLayout, v116);
        v150 = (uint64_t *)llvm::User::operator new((llvm::User *)0x40);
        v176 = 257;
        llvm::LoadInst::LoadInst();
        (*(void (**)(uint64_t, uint64_t *, _BYTE *, llvm::BasicBlock *, char *))(*(_QWORD *)v192 + 16))(v192, v150, v172, v189, v190);
        if (v187)
        {
          v152 = v186;
          v153 = &v186[16 * v187];
          do
          {
            llvm::Instruction::setMetadata();
            v152 += 16;
          }
          while (v152 != v153);
        }
        v183[0] = v150;
        v176 = 257;
        sub_22E462B78((uint64_t *)&v186, v119, v117, (uint64_t)v183, 1, (uint64_t)v175, 0);
        llvm::TracepointBuilder::CreateDataValueTracepoint();
        goto LABEL_246;
      }
      v124 = sub_22F10C2A4(v112);
      if ((*(_DWORD *)(v124 + 28) & 0x7Fu) - 35 >= 3)
        v125 = 0;
      else
        v125 = v124;
      if (!sub_22E475308(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v125 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)))
      {
        v126 = sub_22F10C2A4(v112);
        if ((*(_DWORD *)(v126 + 28) & 0x7Fu) - 35 >= 3)
          v127 = 0;
        else
          v127 = v126;
        v128 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v127 + 168) + 8) & 0xFFFFFFFFFFFFFFF0));
        v129 = 0;
        if (v128)
        {
          if ((*(_DWORD *)(v128 + 28) & 0x7Fu) - 35 >= 3)
            v129 = 0;
          else
            v129 = v128;
        }
        v130 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(sub_22EFC3B90(v129) + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v168 = (llvm::Type *)sub_22E66C868(v5 + 280, v130 & 0xFFFFFFFFFFFFFFF0, 0);
        v131 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 800) + 56))(*(_QWORD *)(v5 + 800), v130);
        llvm::Type::getInt32Ty(v191, v132);
        v183[0] = (uint64_t *)llvm::ConstantInt::get();
        llvm::Type::getInt32Ty(v191, v133);
        v183[1] = (uint64_t *)llvm::ConstantInt::get();
        llvm::Type::getInt32Ty(v191, v134);
        v184 = llvm::ConstantInt::get();
        llvm::Type::getInt32Ty(v191, v135);
        v185 = llvm::ConstantInt::get();
        v136 = sub_22F409218(v112);
        if (v136)
        {
          v138 = 0;
          v166 = v136;
          v167 = v131;
          do
          {
            llvm::Type::getInt32Ty(v191, v137);
            v184 = llvm::ConstantInt::get();
            v139 = *(_QWORD *)(v28 + 24);
            v176 = 257;
            sub_22E42F314((uint64_t *)&v186, v139, (uint64_t *)v28, v183, 4, (uint64_t)v175);
            if (v131)
              v140 = *(_QWORD *)(v131 + 24);
            else
              v140 = 0;
            v173 = 257;
            v141 = (llvm::Module *)llvm::BasicBlock::getModule(v189);
            v142 = (llvm::DataLayout *)llvm::Module::getDataLayout(v141);
            llvm::DataLayout::getABITypeAlign(v142, v168);
            v143 = llvm::User::operator new((llvm::User *)0x40);
            v176 = 257;
            llvm::LoadInst::LoadInst();
            (*(void (**)(uint64_t, uint64_t, _BYTE *, llvm::BasicBlock *, char *))(*(_QWORD *)v192 + 16))(v192, v143, v172, v189, v190);
            if (v187)
            {
              v144 = v186;
              v145 = &v186[16 * v187];
              do
              {
                llvm::Instruction::setMetadata();
                v144 += 16;
              }
              while (v144 != v145);
            }
            v174 = v143;
            v176 = 257;
            v131 = v167;
            sub_22E462B78((uint64_t *)&v186, v140, v167, (uint64_t)&v174, 1, (uint64_t)v175, 0);
            llvm::TracepointBuilder::CreateDataValueTracepoint();
            ++v138;
          }
          while (v138 != v166);
        }
        goto LABEL_246;
      }
    }
    sub_22EF5CCD0(*(_QWORD *)(v5 + 144), *(_QWORD *)(*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v175);
    llvm::Type::getInt32Ty(v191, v113);
    llvm::ConstantInt::get();
    llvm::TracepointBuilder::CreateDataTracepoint();
LABEL_246:
    v201 = (llvm::BasicBlock *)v165;
    v202 = (char *)(v165 + 40);
    sub_22E3CF118(&v199);
    sub_22F256A70(v163, (uint64_t)&v199, v164);
    v175[0] = (uint64_t)v164;
    sub_22E62C508((uint64_t *)(v5 + 1440), v175);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v194);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v193);
    if (v186 != (char *)v188)
      free(v186);
    sub_22E619434((uint64_t)&v195);
  }
  if (v182 && v179 != v181)
    free(v179);
  if (v171 != (uint64_t *)-8192 && v171 != (uint64_t *)-4096)
  {
    if (v171)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v170);
  }
}

uint64_t sub_22E6336F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v9;
  uint64_t v11;
  unint64_t v13;
  unint64_t v15;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  llvm::Value *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v9 = a4;
  v11 = a2;
  v13 = a2 & 0xFFFFFFFFFFFFFFF8;
  if (a4)
  {
    if ((a7 & 1) != 0)
      goto LABEL_7;
  }
  else
  {
    v9 = sub_22E66CB04((llvm::Type ***)(a1 + 280), *(llvm::LLVMContext **)(v13 + 48));
    if ((a7 & 1) != 0)
      goto LABEL_7;
  }
  if (sub_22EFC1F80(v13))
    return (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 800) + 152))(*(_QWORD *)(a1 + 800), v13, v9);
LABEL_7:
  v15 = a3 & 0xFFFFFFFF00000000;
  if (v13
    && (*(_DWORD *)(v13 + 28) & 0x7F) == 0x39
    && *(_DWORD *)(*(_QWORD *)(a1 + 216) + 148) == 11
    && (v11 & 7) == 1)
  {
    v17 = *(_WORD *)(v13 + 80) & 0x7F;
    v18 = -40;
    if (v17 > 0x46)
    {
      if (v17 != 83)
      {
        if (v17 == 71)
        {
          v18 = -56;
          goto LABEL_30;
        }
        if (v17 == 81)
          goto LABEL_30;
LABEL_25:
        v19 = v17 - 52;
        v20 = v17 - 33 >= 5;
        v21 = -48;
        if (!v20)
          v21 = -64;
        if (v19 >= 6)
          v18 = v21;
        else
          v18 = -72;
      }
    }
    else
    {
      if (v17 > 0x18)
        goto LABEL_24;
      if (v17 != 16)
      {
        if (((1 << v17) & 0x1066) != 0)
          goto LABEL_30;
        if (v17 != 24)
        {
LABEL_24:
          if (v17 == 70)
          {
            v18 = -64;
            goto LABEL_30;
          }
          goto LABEL_25;
        }
      }
      v18 = -48;
    }
LABEL_30:
    v22 = *(_QWORD *)(v13 + 72 + v18 + 16);
    v23 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF8);
    if ((v22 & 4) != 0)
      v23 = (_QWORD *)*v23;
    if (v23)
      v24 = v23 - 8;
    else
      v24 = 0;
    sub_22E3CD31C((uint64_t *)(v24[13] + 96), v24[13]);
    if (!*(_DWORD *)(v24[16] + 20))
    {
      v11 = v13 | 2;
      LODWORD(a3) = 0;
    }
  }
  v25 = a3 | v15;
  v26 = sub_22E624994(a1, v11, v25);
  v28 = (llvm::Value *)sub_22E62D908(a1, v26, v27, v9, v11, v25, 0, a6, 0, 0, a7);
  v29 = *(_QWORD *)(a1 + 152);
  if ((*(_BYTE *)(v29 + 68) & 0x20) == 0)
    return (uint64_t)v28;
  if ((*(_WORD *)(v29 + 96) & 0x80) != 0)
    return (uint64_t)v28;
  if (!sub_22E462B18(v11 & 0xFFFFFFFFFFFFFFF8))
    return (uint64_t)v28;
  v30 = *(_QWORD *)(a1 + 816);
  v31 = llvm::Value::stripPointerCasts(v28);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30 + 56))(v30, v31, v11, v25);
  if ((a7 & 1) != 0)
    return (uint64_t)v28;
  llvm::PointerType::get();
  return llvm::ConstantExpr::getBitCast();
}

BOOL sub_22E6339A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 349)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

uint64_t sub_22E633A04(uint64_t a1, uint64_t a2, const char *a3, size_t a4, uint64_t a5, char a6, int a7)
{
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  const void *v29;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  BOOL v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  unsigned int v42;
  _QWORD v46[3];

  v46[2] = *MEMORY[0x24BDAC8D0];
  if (a7)
    a5 = llvm::AttributeList::addAttributeAtIndex();
  v12 = sub_22E62D908(a1, (uint64_t)a3, a4, a2, 0, 0, 0, 0, 0, a5, 0);
  v13 = v12;
  if (v12 && !*((_BYTE *)v12 + 16) && *((unsigned int **)v12 + 9) == v12 + 18)
  {
    *((_WORD *)v12 + 9) = *((_WORD *)v12 + 9) & 0xC00F | (16 * *(_WORD *)(a1 + 136));
    if ((a6 & 1) == 0)
    {
      v14 = *(_QWORD *)(a1 + 216);
      if (*(_DWORD *)(v14 + 68) == 15
        && *(_DWORD *)(v14 + 72) == 17
        && (*(_WORD *)(*(_QWORD *)(a1 + 184) + 64) & 0x800) == 0)
      {
        v15 = *(_QWORD *)(a1 + 144);
        v16 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v15 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v15 + 1960) + 80));
        if (v16)
          v17 = v16 + 40;
        else
          v17 = 0;
        v18 = sub_22E3CB704(*(llvm::StringMapImpl **)(v15 + 15192), a3, a4);
        v19 = sub_22EFCE144(v17, v18);
        if (!v19)
          goto LABEL_25;
        v20 = v19;
        while (1)
        {
          v21 = v20 & 0xFFFFFFFFFFFFFFF8;
          if ((v20 & 4) == 0 || !v21)
            break;
          v22 = *(_QWORD *)v21;
          if (*(_QWORD *)v21)
            v23 = (*(_DWORD *)(*(_QWORD *)v21 + 28) & 0x7Eu) - 58 > 0xFFFFFFF9;
          else
            v23 = 0;
          if (v23)
          {
LABEL_77:
            v21 = v22;
            goto LABEL_78;
          }
          v20 = *(_QWORD *)(v21 + 8);
          if (!v20)
            goto LABEL_25;
        }
        if (!v21 || (*(_DWORD *)(v21 + 28) & 0x7Eu) - 58 < 0xFFFFFFFA)
        {
LABEL_25:
          if ((*(_BYTE *)(*(_QWORD *)(v15 + 2000) + 1) & 1) != 0)
          {
            if (a4 == 17)
            {
              if (*(_QWORD *)a3 != 0x616E696D7265743FLL || *((_QWORD *)a3 + 1) != 0x5858415940406574 || a3[16] != 90)
              {
LABEL_34:
                v25 = sub_22E3CB704(*(llvm::StringMapImpl **)(v15 + 15192), a3, a4);
                v26 = 0;
                v27 = 0;
                v46[0] = "__cxxabiv1";
                v46[1] = "std";
                while (1)
                {
                  v28 = v26;
                  v29 = (const void *)v46[v27];
                  v30 = v29 ? strlen((const char *)v46[v27]) : 0;
                  v31 = sub_22E3CB704(*(llvm::StringMapImpl **)(v15 + 15192), v29, v30);
                  v32 = sub_22EFCE144(v17, v31);
                  if (v32)
                    break;
LABEL_75:
                  v26 = 1;
                  v27 = 1;
                  if ((v28 & 1) != 0)
                    goto LABEL_79;
                }
                while (1)
                {
                  v33 = (unint64_t *)(v32 & 0xFFFFFFFFFFFFFFF8);
                  v34 = (v32 & 0xFFFFFFFFFFFFFFF8) == 0 || (v32 & 4) == 0;
                  v35 = v32 & 0xFFFFFFFFFFFFFFF8;
                  if (!v34)
                    v35 = *v33;
                  v36 = *(_DWORD *)(v35 + 28) & 0x7F;
                  if (v35 && v36 == 12)
                  {
                    v37 = sub_22EFCE144(v35 + 40, v31);
                    if (!v37)
                      goto LABEL_73;
                    while (1)
                    {
                      v35 = v37 & 0xFFFFFFFFFFFFFFF8;
                      if ((v37 & 4) == 0 || !v35)
                        break;
                      if (*(_QWORD *)v35)
                        v38 = (*(_DWORD *)(*(_QWORD *)v35 + 28) & 0x7F) == 16;
                      else
                        v38 = 0;
                      if (v38)
                      {
                        v35 = *(_QWORD *)v35;
                        goto LABEL_61;
                      }
                      v37 = *(_QWORD *)(v35 + 8);
                      if (!v37)
                        goto LABEL_73;
                    }
                    if (!v35)
                      goto LABEL_73;
                    v36 = *(_DWORD *)(v35 + 28) & 0x7F;
                  }
                  else if (!v35)
                  {
                    goto LABEL_73;
                  }
                  if (v36 == 16)
                  {
LABEL_61:
                    v39 = sub_22EFCE144(v35 + 48, v25);
                    if (v39)
                    {
                      v40 = v39;
                      while (1)
                      {
                        v21 = v40 & 0xFFFFFFFFFFFFFFF8;
                        if ((v40 & 4) == 0 || !v21)
                          break;
                        v22 = *(_QWORD *)v21;
                        if (*(_QWORD *)v21)
                          v41 = (*(_DWORD *)(*(_QWORD *)v21 + 28) & 0x7Eu) - 58 > 0xFFFFFFF9;
                        else
                          v41 = 0;
                        if (v41)
                          goto LABEL_77;
                        v40 = *(_QWORD *)(v21 + 8);
                        if (!v40)
                          goto LABEL_73;
                      }
                      if (v21 && (*(_DWORD *)(v21 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
                        goto LABEL_78;
                    }
                  }
LABEL_73:
                  if (!v34)
                  {
                    v32 = v33[1];
                    if (v32)
                      continue;
                  }
                  goto LABEL_75;
                }
              }
            }
            else
            {
              if (a4 != 15)
                goto LABEL_34;
              if (*(_QWORD *)a3 != 0x7265743974535A5FLL || *(_QWORD *)(a3 + 7) != 0x766574616E696D72)
                goto LABEL_34;
            }
            a3 = "terminate";
            a4 = 9;
            goto LABEL_34;
          }
          goto LABEL_79;
        }
LABEL_78:
        if (sub_22E49F808(v21))
        {
LABEL_79:
          v42 = v13[8];
          v13[8] = v42 & 0xFFFFFCF0 | 0x100;
          if ((v42 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v13) & 1) == 0)
            v13[8] |= 0x4000u;
        }
      }
    }
    sub_22E62876C(a1, (llvm::GlobalValue *)v13);
  }
  return a2;
}

uint64_t sub_22E633E44(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  v3 = *(_QWORD *)(a1 + 152);
  if ((*(_DWORD *)(v3 + 52) & 0x40000000) != 0)
  {
    if (a2)
    {
      v6 = *(_QWORD *)((*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v6 & 8) != 0)
        return *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
      else
        return 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if ((*(_BYTE *)(v3 + 104) & 4) != 0)
    {
      if (!a2)
        return 19;
      v7 = *(_QWORD *)((*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v7 & 8) == 0 || (*(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0)
        return 19;
    }
    if ((*(_BYTE *)(v3 + 68) & 0x20) != 0 && (*(_WORD *)(v3 + 96) & 0x80) != 0)
    {
      if (a2)
      {
        if (sub_22E466EBC(a2))
          return 9;
        if (sub_22E469D10(a2))
          return 10;
        if (!sub_22E466E5C(a2))
        {
          v9 = *(_QWORD *)(a2 + 48);
          if ((v9 & 1) != 0 || (*(_BYTE *)((v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) != 0)
            return 9;
        }
      }
      return 8;
    }
    else if (*(_DWORD *)(v3 + 72)
           && (v10 = 0,
               ((*(uint64_t (**)(_QWORD, uint64_t, unsigned int *))(**(_QWORD **)(a1 + 808) + 608))(*(_QWORD *)(a1 + 808), a2, &v10) & 1) != 0))
    {
      return v10;
    }
    else
    {
      v8 = sub_22E699F3C((_QWORD *)a1);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 200))(v8, a1, a2);
    }
  }
}

BOOL sub_22E633F90(uint64_t a1)
{
  uint64_t v2;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  return !sub_22E6543E4(*(_QWORD *)v2, *(_QWORD *)v2 + 8 * *(unsigned int *)(v2 + 8));
}

BOOL sub_22E633FCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 360)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

llvm::Value *sub_22E63402C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t GlobalVariable;
  llvm::GlobalVariable *v7;
  llvm::Value *v8;
  int v9;
  unsigned int v12;
  BOOL v13;
  int v14;

  GlobalVariable = llvm::Module::getGlobalVariable();
  v7 = (llvm::GlobalVariable *)GlobalVariable;
  if (GlobalVariable && *(_QWORD *)(GlobalVariable + 24) == a4)
    return (llvm::Value *)GlobalVariable;
  v8 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x58);
  llvm::GlobalVariable::GlobalVariable();
  if (v7)
  {
    llvm::Value::takeName();
    if (*((_QWORD *)v7 + 1))
    {
      llvm::ConstantExpr::getBitCast();
      llvm::Value::replaceAllUsesWith();
    }
    llvm::GlobalVariable::eraseFromParent(v7);
  }
  v9 = *(_DWORD *)(*(_QWORD *)(a1 + 216) + 76);
  if ((v9 - 8) >= 2 && v9 != 5)
  {
    v12 = *((_DWORD *)v8 + 8) & 0xF;
    v13 = v12 > 0xA;
    v14 = (1 << v12) & 0x63C;
    if (!v13 && v14 != 0)
    {
      llvm::Value::getName(v8);
      llvm::Module::getOrInsertComdat();
      llvm::GlobalObject::setComdat();
    }
  }
  llvm::GlobalObject::setAlignment();
  return v8;
}

void sub_22E6341BC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  llvm::GlobalValue *NamedValue;
  _QWORD *v6;
  __int128 v7;

  *(_QWORD *)&v7 = sub_22E624994(a1, a2, 0);
  *((_QWORD *)&v7 + 1) = v4;
  NamedValue = (llvm::GlobalValue *)llvm::Module::getNamedValue();
  if (NamedValue)
  {
    if (!llvm::GlobalValue::isDeclaration(NamedValue))
      return;
    sub_22E62D5D0(a1, a2);
    goto LABEL_5;
  }
  if ((sub_22E62D5D0(a1, a2) & 1) != 0)
  {
LABEL_5:
    sub_22E632228();
    return;
  }
  v6 = sub_22E63E2C8((uint64_t *)(a1 + 1048), &v7);
  v6[2] = a2;
  *((_DWORD *)v6 + 6) = 0;
}

uint64_t sub_22E634260(uint64_t a1, unint64_t a2, llvm::Value *a3)
{
  uint64_t result;

  result = sub_22E6342C0(a1, a2);
  if ((_DWORD)result)
  {
    llvm::Value::getName(a3);
    llvm::Module::getOrInsertComdat();
    return llvm::GlobalObject::setComdat();
  }
  return result;
}

uint64_t sub_22E6342C0(uint64_t a1, unint64_t a2)
{
  int v2;
  _QWORD *v5;
  char v6;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 216) + 76);
  if ((v2 - 8) < 2 || v2 == 5)
    return 0;
  if (sub_22E46B3EC(a2))
    return 1;
  v5 = *(_QWORD **)(a1 + 144);
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
    v6 = sub_22EF732CC(v5, a2);
  else
    v6 = sub_22EF72FFC(v5, a2);
  return (0x14u >> v6) & 1;
}

BOOL sub_22E634350(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 175)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

void sub_22E6343B0(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int i;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int j;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;

  if (!a2 || (v4 = a2, (*(_DWORD *)(a2 + 28) & 0x7F) != 0x53))
  {
    v5 = *(_QWORD *)(a2 + 16);
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 4) != 0)
      v6 = *(_QWORD *)v6;
    for (i = *(_WORD *)(v6 + 8) & 0x7F; i != 83; i = *(_WORD *)(v6 + 8) & 0x7F)
    {
      v8 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v8 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_20;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_19;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_10;
        if (i == 24)
        {
LABEL_9:
          v8 = -48;
        }
        else
        {
LABEL_19:
          if (i != 70)
          {
LABEL_20:
            v10 = i - 52;
            if ((i - 33) >= 5)
              v11 = -48;
            else
              v11 = -64;
            if (v10 >= 6)
              v8 = v11;
            else
              v8 = -72;
            goto LABEL_10;
          }
          v8 = -64;
        }
      }
LABEL_10:
      v9 = *(_QWORD *)(v6 + v8 + 16);
      v6 = v9 & 0xFFFFFFFFFFFFFFF8;
      if ((v9 & 4) != 0)
        v6 = *(_QWORD *)v6;
    }
    v4 = v6 - 40;
  }
  if (sub_22EFBBF74(a2, *(_QWORD *)(v4 + 88)) != 2 || !sub_22E49F808(a2))
  {
    v12 = sub_22EFBC2B0(a2);
    if (!a2 || (v13 = a2, (*(_DWORD *)(a2 + 28) & 0x7F) != 0x53))
    {
      v14 = *(_QWORD *)(a2 + 16);
      v15 = v14 & 0xFFFFFFFFFFFFFFF8;
      if ((v14 & 4) != 0)
        v15 = *(_QWORD *)v15;
      for (j = *(_WORD *)(v15 + 8) & 0x7F; j != 83; j = *(_WORD *)(v15 + 8) & 0x7F)
      {
        v17 = -40;
        if (j > 70)
        {
          if (j == 71)
          {
            v17 = -56;
            goto LABEL_38;
          }
          if (j == 81)
            goto LABEL_38;
        }
        else
        {
          if (j <= 0x18)
          {
            if (j == 16)
              goto LABEL_37;
            if (((1 << j) & 0x1066) != 0)
              goto LABEL_38;
            if (j == 24)
            {
LABEL_37:
              v17 = -48;
              goto LABEL_38;
            }
          }
          if (j == 70)
          {
            v17 = -64;
            goto LABEL_38;
          }
        }
        v19 = j - 52;
        if ((j - 33) >= 5)
          v20 = -48;
        else
          v20 = -64;
        if (v19 >= 6)
          v17 = v20;
        else
          v17 = -72;
LABEL_38:
        v18 = *(_QWORD *)(v15 + v17 + 16);
        v15 = v18 & 0xFFFFFFFFFFFFFFF8;
        if ((v18 & 4) != 0)
          v15 = *(_QWORD *)v15;
      }
      v13 = v15 - 40;
    }
    v21 = *(_QWORD *)(a2 + 80);
    if (v21)
    {
      v22 = 0;
      v23 = *(_QWORD *)(v13 + 88);
      v24 = *(_QWORD *)(a2 + 80);
      while (sub_22EFBBF74(v24, v23) != 2)
      {
        if ((*(_BYTE *)(v24 + 72) & 3) != 0)
        {
          if (v22)
            goto LABEL_60;
          v22 = 1;
        }
        v25 = sub_22E3CD31C((uint64_t *)(v24 + 72), v24);
        if (v25 != v21)
        {
          v24 = v25;
          if (v25)
            continue;
        }
        goto LABEL_60;
      }
      if (v12 == 4)
        sub_22E6315B8(a1, a2, 0, 0);
    }
LABEL_60:
    sub_22E6346B8();
  }
}

void sub_22E6346B8()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t *v9;
  unint64_t v10;
  int v11;
  void (*v12)(void);
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t i;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  _BOOL8 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  const void **v90;
  const void **v91;
  char v92;
  const void *v93;
  uint64_t v94;
  uint64_t v95;
  size_t v96;
  const char *v97;
  size_t v98;
  const char *v99;
  size_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[16];
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  int v107;
  _QWORD v108[774];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = v0;
  v108[772] = *MEMORY[0x24BDAC8D0];
  if ((sub_22EFC79C8(v1) & 1) != 0
    || v2 && (*(_DWORD *)(v2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA && (*(_QWORD *)(v2 + 80) & 0xC0000000) == 0x80000000)
  {
    return;
  }
  switch(*(_DWORD *)(v2 + 28) & 0x7F)
  {
    case 5:
      v22 = v2 + 40;
      goto LABEL_54;
    case 7:
      v41 = *(_QWORD *)(v3 + 152);
      if ((*(_BYTE *)(v41 + 68) & 0x20) != 0 && (*(_WORD *)(v41 + 96) & 0x80) != 0
        || (*(_BYTE *)(v41 + 76) & 8) != 0
        || (*(_BYTE *)(v41 + 104) & 4) != 0)
      {
        return;
      }
      v42 = *(_QWORD *)(v3 + 200);
      std::string::append((std::string *)(v42 + 88), (const std::string::value_type *)(*(_QWORD *)(v2 + 40) + 4 * *(unsigned int *)(*(_QWORD *)(v2 + 40) + 4) + 20), ((**(_DWORD **)(v2 + 40) >> 21) & 7u) * *(_DWORD *)(*(_QWORD *)(v2 + 40) + 16));
      if (*(char *)(v42 + 111) < 0)
      {
        v43 = *(_QWORD *)(v42 + 96);
        if (!v43)
          return;
        v44 = *(_QWORD *)(v42 + 88);
      }
      else
      {
        v43 = *(unsigned __int8 *)(v42 + 111);
        if (!*(_BYTE *)(v42 + 111))
          return;
        v44 = v42 + 88;
      }
      if (*(_BYTE *)(v44 + v43 - 1) != 10)
        std::string::push_back((std::string *)(v42 + 88), 10);
      return;
    case 0xA:
      v104 = *(_QWORD **)(v2 + 40);
      if (sub_22E62C70C((_QWORD *)(v3 + 2800), &v104))
      {
        if ((*(_BYTE *)(v2 + 29) & 0x80) == 0 || (*(_BYTE *)(v2 + 8) & 6) == 0 || !sub_22EFC7594(v2))
        {
          v18 = *(_QWORD *)(v3 + 824);
          if (v18)
            sub_22F257A54(v18, v2);
        }
        v104 = v108;
        v105 = v108;
        v106 = 16;
        v107 = 0;
        v102 = 0x1000000000;
        sub_22E3BA850((uint64_t)&v104, *(const void **)(v2 + 40));
        v103[0] = *(_QWORD *)(v2 + 40);
        v19 = 1;
        LODWORD(v102) = 1;
        do
        {
          v83 = (_QWORD *)v103[v19 - 1];
          LODWORD(v102) = v19 - 1;
          sub_22E3BA850(v3 + 2848, v83);
          if (v84)
          {
            v85 = sub_22F367FCC(*(_QWORD *)(v3 + 144), (uint64_t)v83);
            if (v86)
            {
              v87 = (uint64_t *)v85;
              v88 = 8 * v86;
              do
              {
                v89 = *v87++;
                sub_22E6346B8(v3, v89);
                v88 -= 8;
              }
              while (v88);
            }
            v91 = (const void **)v83[25];
            v90 = (const void **)v83[26];
            while (v91 != v90)
            {
              if ((*((_WORD *)*v91 + 672) & 0x20) == 0)
              {
                sub_22E3BA850((uint64_t)&v104, *v91);
                if (v92)
                {
                  v93 = *v91;
                  v94 = v102;
                  if (v102 >= (unint64_t)HIDWORD(v102))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v94 = v102;
                  }
                  v103[v94] = v93;
                  LODWORD(v102) = v102 + 1;
                }
              }
              ++v91;
            }
          }
          v19 = v102;
        }
        while ((_DWORD)v102);
        if (v105 != v104)
          free(v105);
      }
      return;
    case 0xC:
      sub_22F29C430(v3, v2);
      return;
    case 0xD:
      v15 = *(_QWORD *)(v3 + 824);
      if (v15)
        sub_22E49E6C0(v15, v2);
      return;
    case 0xE:
      v21 = *(_QWORD *)(v3 + 824);
      if (v21)
        sub_22F2579F4(v21, v2);
      return;
    case 0x10:
      v22 = v2 + 48;
LABEL_54:
      if (v2)
        v23 = v22;
      else
        v23 = 0;
      sub_22E636C78(v3, v23);
      return;
    case 0x11:
      v82 = *(_QWORD *)(v3 + 824);
      if (v82)
        sub_22E49E7E4(v82, v2);
      return;
    case 0x12:
      v12 = *(void (**)(void))(**(_QWORD **)(v3 + 784) + 128);
      goto LABEL_174;
    case 0x14:
      v12 = *(void (**)(void))(**(_QWORD **)(v3 + 784) + 112);
      goto LABEL_174;
    case 0x15:
      sub_22E63688C();
      sub_22E6369D4();
      (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v3 + 784) + 120))(*(_QWORD *)(v3 + 784), v2);
      v13 = *(_QWORD *)(v3 + 824);
      if (v13 && (*(_QWORD *)(*(_QWORD *)(v3 + 184) + 96) & 0x1800000000000000) != 0)
      {
        v14 = sub_22F36D148(*(_QWORD *)(v3 + 144), *(uint64_t **)(v2 + 88), 0);
        sub_22F255EDC(v13, v14, *(_DWORD *)(v2 + 24));
      }
      return;
    case 0x17:
      v16 = *(_QWORD *)(v2 + 104);
      if (!v16)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v2 + 96) + 88), *(_QWORD *)(v2 + 96));
        v16 = *(_QWORD *)(v2 + 104);
      }
      if (v16 < 8)
        v17 = 0;
      else
        v17 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
      if (v17 != v2)
        return;
      v12 = *(void (**)(void))(**(_QWORD **)(v3 + 784) + 160);
      goto LABEL_174;
    case 0x18:
      if ((*(uint64_t (**)(unint64_t))(*(_QWORD *)v2 + 64))(v2))
      {
        sub_22E618EBC((uint64_t)&v104, v3, 0);
        sub_22F2729BC((uint64_t)&v104, (_DWORD *)v2);
        sub_22E619434((uint64_t)&v104);
      }
      return;
    case 0x21:
      v9 = *(uint64_t **)(v3 + 824);
      if (!v9 || !sub_22EFC3500(v2))
        return;
      v10 = sub_22EF64864(*(_QWORD *)(v3 + 144), v2);
      goto LABEL_170;
    case 0x22:
      v9 = *(uint64_t **)(v3 + 824);
      if (!v9 || !sub_22EFC3500(v2))
        return;
      v10 = sub_22EF6477C(*(_QWORD *)(v3 + 144), v2);
      goto LABEL_170;
    case 0x23:
      goto LABEL_62;
    case 0x24:
      v24 = *(int **)(v3 + 824);
      if (v24)
      {
        if ((*(_BYTE *)(v2 + 180) & 7) == 4)
        {
          if (*(_QWORD *)(v2 + 128)
            || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v2 + 104) + 96), *(_QWORD *)(v2 + 104)), *(_QWORD *)(v2 + 128)))
          {
            sub_22F25589C(v24, v2);
          }
        }
      }
LABEL_62:
      v25 = *(uint64_t **)(v3 + 824);
      if (!v25)
        goto LABEL_97;
      if (*(_QWORD *)(v2 + 128)
        || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v2 + 104) + 96), *(_QWORD *)(v2 + 104)), *(_QWORD *)(v2 + 128)))
      {
        v26 = sub_22EF6477C(*(_QWORD *)(v3 + 144), v2);
        sub_22E49F030(v25, v26);
      }
      if (v2)
      {
        v27 = v2;
        if ((*(_DWORD *)(v2 + 28) & 0x7F) == 0x53)
          goto LABEL_94;
      }
      v28 = *(_QWORD *)(v2 + 16);
      v29 = v28 & 0xFFFFFFFFFFFFFFF8;
      if ((v28 & 4) != 0)
        v29 = *(_QWORD *)v29;
      v30 = *(_WORD *)(v29 + 8) & 0x7F;
      if (v30 == 83)
        goto LABEL_93;
      break;
    case 0x28:
    case 0x29:
      v9 = *(uint64_t **)(v3 + 824);
      if (!v9)
        return;
      v10 = sub_22EF64680(*(_QWORD *)(v3 + 144), v2, 0);
LABEL_170:
      sub_22E49F030(v9, v10);
      return;
    case 0x2C:
      v20 = *(_QWORD **)(v3 + 824);
      if (v20)
        sub_22F2577D0(v20, v2);
      return;
    case 0x34:
    case 0x36:
    case 0x38:
      if (sub_22E462B18(v2))
        sub_22EFC8868(v2);
      sub_22E62F700();
      sub_22E636D30(v3, v2);
      return;
    case 0x37:
      v12 = *(void (**)(void))(**(_QWORD **)(v3 + 224) + 368);
      goto LABEL_174;
    case 0x39:
      v12 = *(void (**)(void))(**(_QWORD **)(v3 + 224) + 408);
      goto LABEL_174;
    case 0x3C:
    case 0x3D:
    case 0x41:
      sub_22E62F700();
      if (v2)
      {
        if ((*(_DWORD *)(v2 + 28) & 0x7F) == 0x3D)
        {
          v4 = *(unsigned int *)(v2 + 100);
          if ((_DWORD)v4)
          {
            v5 = v2 + 104;
            v6 = 8 * v4;
            do
            {
              v7 = *(unsigned __int8 **)(*(_QWORD *)v5 + 64);
              if (v7)
              {
                v8 = sub_22EFFED0C(v7);
                if (*v8 == 161)
                {
                  if (*((_QWORD *)v8 + 2))
                    sub_22E62F700();
                }
              }
              v5 += 8;
              v6 -= 8;
            }
            while (v6);
          }
        }
      }
      return;
    case 0x46:
      sub_22F259678(v3, v2);
      return;
    case 0x47:
      sub_22F259604(v3, v2, 0);
      return;
    case 0x4B:
      sub_22F25A940(v3, v2);
      return;
    case 0x4C:
      v12 = *(void (**)(void))(**(_QWORD **)(v3 + 808) + 600);
LABEL_174:
      v12();
      return;
    case 0x4D:
      v45 = *(_QWORD *)(*(_QWORD *)(v3 + 152) + 72);
      if ((_DWORD)v45)
        v46 = (v45 & 0x200000000) == 0;
      else
        v46 = 1;
      if (!v46)
        return;
      v47 = *(unsigned int **)(v2 + 40);
      v48 = v47[1];
      if (!(_DWORD)v48)
        return;
      v49 = (uint64_t)&v47[2 * *v47 + 4];
      v101 = v49 + 8 * v48;
      while (1)
      {
        v50 = *(_QWORD *)v49;
        v51 = *(_QWORD *)(*(_QWORD *)v49 + 16);
        if (v51)
        {
          v52 = 0;
          v53 = *(_QWORD *)(*(_QWORD *)v49 + 16);
          while (!sub_22EFBC5B4(v53))
          {
            if ((*(_BYTE *)(v53 + 72) & 3) != 0)
            {
              if (v52)
                goto LABEL_163;
              v52 = 1;
            }
            v54 = sub_22E3CD31C((uint64_t *)(v53 + 72), v53);
            if (v54 == v51)
              goto LABEL_163;
            v53 = v54;
            v55 = 0;
            if (!v54)
              goto LABEL_142;
          }
          v56 = 0;
          v57 = v51;
          do
          {
            v62 = sub_22EFBC5B4(v57);
            if (v62)
              break;
            if ((*(_BYTE *)(v57 + 72) & 3) != 0)
            {
              if (v56)
                break;
              v56 = 1;
            }
            v63 = sub_22E3CD31C((uint64_t *)(v57 + 72), v57);
            if (v63 == v51)
              break;
            v57 = v63;
          }
          while (v63);
          v55 = !sub_22EFFFBEC(v62, *(_QWORD *)(v3 + 144), 0, 0, v58, v59, v60, v61);
        }
        else
        {
LABEL_163:
          v55 = 0;
        }
LABEL_142:
        v64 = sub_22E6315B8(v3, v51, 0, 0);
        v65 = (_QWORD *)sub_22E66C868(v3 + 280, *(_QWORD *)(v51 + 48), 0);
        v66 = sub_22EF5B404(*(_QWORD *)(v3 + 144), v51, 0);
        v67 = *(_QWORD *)(v3 + 808);
        v104 = (_QWORD *)v64;
        v105 = v65;
        v106 = v66;
        v107 = 0;
        v108[0] = 0;
        v108[1] = 0;
        sub_22F0D5A50(v50);
        v69 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD **, _QWORD, _BOOL8, _QWORD))(*(_QWORD *)v67 + 312))(v67, v51, &v104, v68, v55, 0);
        if (v69)
        {
          v70 = v69;
          v71 = *(uint64_t **)(v3 + 2136);
          v72 = *(_QWORD *)(v3 + 2144);
          if ((unint64_t)v71 >= v72)
          {
            v74 = *(_QWORD **)(v3 + 2128);
            v75 = v71 - v74;
            v76 = v75 + 1;
            if ((unint64_t)(v75 + 1) >> 61)
              abort();
            v77 = v72 - (_QWORD)v74;
            if (v77 >> 2 > v76)
              v76 = v77 >> 2;
            if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
              v78 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v78 = v76;
            if (v78)
            {
              if (v78 >> 61)
                sub_22E3B3F8C();
              v79 = (char *)operator new(8 * v78);
            }
            else
            {
              v79 = 0;
            }
            v80 = (uint64_t *)&v79[8 * v75];
            *v80 = v70;
            v73 = v80 + 1;
            if (v71 != v74)
            {
              do
              {
                v81 = *--v71;
                *--v80 = v81;
              }
              while (v71 != v74);
              v71 = *(uint64_t **)(v3 + 2128);
            }
            *(_QWORD *)(v3 + 2128) = v80;
            *(_QWORD *)(v3 + 2136) = v73;
            *(_QWORD *)(v3 + 2144) = &v79[8 * v78];
            if (v71)
              operator delete(v71);
          }
          else
          {
            *v71 = v69;
            v73 = v71 + 1;
          }
          *(_QWORD *)(v3 + 2136) = v73;
        }
        v49 += 8;
        if (v49 == v101)
          return;
      }
    case 0x4F:
      v11 = *(_DWORD *)(v2 + 36);
      if (v11 == 2)
      {
        v99 = (const char *)(v2 + 40);
        v100 = strlen(v99);
        sub_22F299E04(v3, (uint64_t)v99, v100);
      }
      else if (v11 == 1)
      {
        strlen((const char *)(v2 + 40));
        sub_22F299C40(v3);
      }
      return;
    case 0x50:
      v95 = v2 + 48;
      v96 = strlen((const char *)(v2 + 48));
      v97 = (const char *)(v2 + 48 + *(_QWORD *)(v2 + 40));
      v98 = strlen(v97);
      sub_22F299CD0(v3, v95, v96, (uint64_t)v97, v98);
      return;
    default:
      return;
  }
  do
  {
    v31 = -40;
    if (v30 > 70)
    {
      if (v30 == 71)
      {
        v31 = -56;
        goto LABEL_87;
      }
      if (v30 != 81)
        goto LABEL_81;
    }
    else
    {
      if (v30 > 0x18)
        goto LABEL_80;
      if (v30 == 16)
        goto LABEL_74;
      if (((1 << v30) & 0x1066) == 0)
      {
        if (v30 == 24)
        {
LABEL_74:
          v31 = -48;
          goto LABEL_87;
        }
LABEL_80:
        if (v30 == 70)
        {
          v31 = -64;
          goto LABEL_87;
        }
LABEL_81:
        v32 = v30 - 52;
        if ((v30 - 33) >= 5)
          v33 = -48;
        else
          v33 = -64;
        if (v32 >= 6)
          v31 = v33;
        else
          v31 = -72;
      }
    }
LABEL_87:
    v34 = *(_QWORD *)(v29 + v31 + 16);
    v29 = v34 & 0xFFFFFFFFFFFFFFF8;
    if ((v34 & 4) != 0)
      v29 = *(_QWORD *)v29;
    v30 = *(_WORD *)(v29 + 8) & 0x7F;
  }
  while (v30 != 83);
LABEL_93:
  v27 = v29 - 40;
LABEL_94:
  v35 = *(_QWORD *)(*(_QWORD *)(v27 + 88) + 16048);
  if (v35 && (*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)v35 + 104))(v35, v2) == 1)
    sub_22F25589C((int *)v25, v2);
LABEL_97:
  if ((*(_WORD *)(v2 + 72) & 0x80) != 0)
    sub_22EFCC320(v2 + 64);
  for (i = *(_QWORD *)(v2 + 80); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    v37 = (*(_DWORD *)(i + 28) & 0x7F) - 35;
    v38 = v37 > 0x1F;
    v39 = (1 << v37) & 0xFE000007;
    if (!v38 && v39 != 0)
      sub_22E6346B8(v3, i);
  }
}

unint64_t sub_22E63559C(uint64_t a1, _DWORD *a2)
{
  llvm::StringMapImpl *v4;
  char *v5;
  int v6;
  int v7;
  size_t v8;
  uint64_t v9;
  char *v10;
  llvm::Type *v11;
  _QWORD *v12;
  int v13;
  void **v14;
  int v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  llvm::ArrayType *v21;
  uint64_t v22;
  unsigned int v23;
  const char *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  size_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  BOOL v31;
  uint64_t v32;
  llvm::StringMapImpl *v33;
  const void *Name;
  size_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  int v44;
  unsigned int v45;
  int v46;
  uint64_t ElementPtr;
  uint64_t v48;
  uint64_t v49;
  llvm::LLVMContext *v50;
  uint64_t v51;
  llvm::Type *v52;
  llvm::ArrayType *IntNTy;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t BitCast;
  void **v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void **v66;
  size_t v67;
  uint64_t v68[5];
  _WORD *NullValue;
  _WORD *v70;
  void *v71;
  void *v72[2];
  _BYTE v73[128];
  _QWORD v74[3];
  char v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::StringMapImpl *)(a1 + 1784);
  llvm::Module::getDataLayout(*(llvm::Module **)(a1 + 200));
  v5 = (char *)&a2[a2[1] + 5];
  v6 = (*a2 >> 21) & 7;
  v7 = a2[4];
  v8 = (v6 * v7);
  if ((_DWORD)v8)
  {
    v9 = (v6 * v7);
    v10 = v5;
    while (*v10 > 0)
    {
      ++v10;
      if (!--v9)
        goto LABEL_5;
    }
    v71 = v73;
    *(_OWORD *)v72 = xmmword_22F44E310;
    sub_22E579B44(&v71, (v8 + 1), 0);
    NullValue = v71;
    llvm::ConvertUTF8toUTF16();
    v14 = (void **)v71;
    v15 = (_DWORD)NullValue - (_DWORD)v71;
    *NullValue = 0;
    v66 = v14;
    v67 = (v15 + 2);
    v68[0] = 0;
    v12 = (_QWORD *)*sub_22F2775A8(v4, v14, v67, v68);
    if (v71 != v73)
      free(v71);
    v13 = 0;
  }
  else
  {
LABEL_5:
    v71 = v5;
    v72[0] = (void *)v8;
    v72[1] = 0;
    v12 = (_QWORD *)*sub_22F2775A8(v4, v5, v8, (uint64_t *)&v72[1]);
    v13 = 1;
  }
  v16 = v12[1];
  if (v16)
  {
    if ((*(_WORD *)(v16 + 34) & 0x3F) != 0)
      return v16 & 0xFFFFFFFFFFFFFFF8 | ((__clz(1 << ((*(_WORD *)(v16 + 34) & 0x3Fu) - 1)) ^ 0x3F) >> 3);
    return v16;
  }
  NullValue = (_WORD *)llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 24), v11);
  v70 = NullValue;
  v18 = *(_QWORD *)(a1 + 216);
  v19 = *(_QWORD *)(a1 + 144);
  v20 = *(_DWORD *)(*(_QWORD *)(a1 + 152) + 420);
  if (!*(_QWORD *)(a1 + 3312))
  {
    v21 = (llvm::ArrayType *)sub_22E66CB04((llvm::Type ***)(a1 + 280), *(llvm::LLVMContext **)(v19 + 16480));
    v22 = llvm::ArrayType::get(v21, 0);
    if (v20 - 3 < 2)
    {
      v25 = *(_DWORD *)(v18 + 68);
      if (v25 <= 0x21 && ((1 << v25) & 0x3F0000888) != 0)
        v24 = "$s15SwiftFoundation19_NSCFConstantStringCN";
      else
        v24 = "$s10Foundation19_NSCFConstantStringCN";
    }
    else if (v20 == 5)
    {
      v26 = *(_DWORD *)(v18 + 68);
      if (v26 <= 0x21 && ((1 << v26) & 0x3F0000888) != 0)
        v24 = "$S15SwiftFoundation19_NSCFConstantStringCN";
      else
        v24 = "$S10Foundation19_NSCFConstantStringCN";
    }
    else
    {
      if (v20 != 6)
      {
        v27 = v22;
        v24 = "__CFConstantStringClassReference";
        goto LABEL_27;
      }
      v23 = *(_DWORD *)(v18 + 68);
      if (v23 <= 0x21 && ((1 << v23) & 0x3F0000888) != 0)
        v24 = "__T015SwiftFoundation19_NSCFConstantStringCN";
      else
        v24 = "__T010Foundation19_NSCFConstantStringCN";
    }
    v27 = *(_QWORD *)(a1 + 88);
LABEL_27:
    v28 = strlen(v24);
    v29 = (unsigned __int8 *)sub_22F29B660(a1, v27, (uint64_t)v24, v28);
    v30 = v29;
    if ((*(_DWORD *)(v18 + 76) | 2) != 3 || (v29[16] <= 3u ? (v31 = v29 == 0) : (v31 = 1), v31))
    {
LABEL_64:
      if (v20 < 3)
        ElementPtr = llvm::ConstantExpr::getGetElementPtr();
      else
        ElementPtr = llvm::ConstantExpr::getPtrToInt();
      v48 = ElementPtr;
      v49 = *(_QWORD *)(a1 + 3312);
      if (v49 != ElementPtr)
      {
        if (v49 && v49 != -8192 && v49 != -4096)
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 3296));
        *(_QWORD *)(a1 + 3312) = v48;
        if (v48 != -8192 && v48 != -4096 && v48)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(a1 + 3296));
      }
      goto LABEL_73;
    }
    v32 = v18;
    v33 = *(llvm::StringMapImpl **)(v19 + 15192);
    Name = (const void *)llvm::Value::getName((llvm::Value *)v29);
    v36 = sub_22E3CB704(v33, Name, v35);
    v37 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v19 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v19 + 1960) + 80));
    if (v37)
      v38 = v37 + 40;
    else
      v38 = 0;
    v39 = sub_22EFCE144(v38, v36);
    v40 = 0;
    if (v39)
    {
      while (1)
      {
        v41 = v39 & 0xFFFFFFFFFFFFFFF8;
        if ((v39 & 4) == 0 || !v41)
          break;
        v40 = *(_QWORD *)v41;
        if (*(_QWORD *)v41)
          v42 = (*(_DWORD *)(*(_QWORD *)v41 + 28) & 0x7Fu) - 67 > 0xFFFFFFF8;
        else
          v42 = 0;
        if (v42)
          goto LABEL_51;
        v39 = *(_QWORD *)(v41 + 8);
        if (!v39)
        {
          v40 = 0;
          goto LABEL_51;
        }
      }
      if ((*(_DWORD *)(v41 + 28) & 0x7Fu) - 67 < 0xFFFFFFF9 || v41 == 0)
        v40 = 0;
      else
        v40 = v39 & 0xFFFFFFFFFFFFFFF8;
    }
LABEL_51:
    if (*(_DWORD *)(v32 + 76) == 3)
    {
      if (v40)
        goto LABEL_63;
      v44 = *((_DWORD *)v30 + 8);
      *((_DWORD *)v30 + 8) = v44 & 0xFFFFFFF0;
      if ((v44 & 0x30) == 0 || (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v30) & 1) != 0)
        goto LABEL_63;
      v45 = *((_DWORD *)v30 + 8) | 0x4000;
    }
    else
    {
      v46 = *((_DWORD *)v30 + 8);
      *((_DWORD *)v30 + 8) = v46 & 0xFFFFFFF0;
      if ((v46 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v30) & 1) == 0)
        *((_DWORD *)v30 + 8) |= 0x4000u;
      if (!v40 || (*(_BYTE *)(v40 + 29) & 1) == 0)
        goto LABEL_61;
      sub_22EFC8E88(v40);
      v62 = *((unsigned int *)v61 + 2);
      if ((_DWORD)v62)
      {
        v63 = 8 * v62;
        v64 = *v61;
        while (*(_WORD *)(*(_QWORD *)v64 + 32) != 155)
        {
          v64 += 8;
          v63 -= 8;
          if (!v63)
            goto LABEL_61;
        }
      }
      else
      {
        v64 = *v61;
      }
      if (v64 != *v61 + 8 * v62)
        v45 = *((_DWORD *)v30 + 8) & 0xFFFFFCFF | 0x200;
      else
LABEL_61:
        v45 = *((_DWORD *)v30 + 8) & 0xFFFFFCFF | 0x100;
    }
    *((_DWORD *)v30 + 8) = v45;
LABEL_63:
    sub_22E62876C(a1, (llvm::GlobalValue *)v30);
    v18 = v32;
    goto LABEL_64;
  }
LABEL_73:
  v50 = (llvm::LLVMContext *)sub_22F36DAE8(v19);
  v51 = sub_22E66CB04((llvm::Type ***)(a1 + 280), v50);
  v71 = (void *)a1;
  v72[0] = v73;
  v72[1] = (void *)0x1000000000;
  memset(v74, 0, sizeof(v74));
  v66 = &v71;
  v67 = 0;
  memset(v68, 0, 19);
  v75 = 1;
  v68[3] = 0;
  v68[4] = v51;
  if (v51)
    BYTE2(v68[2]) = (*(_DWORD *)(v51 + 8) & 0x200) != 0;
  sub_22F28A5C0((uint64_t)&v66, *(llvm::Value **)(a1 + 3312), (_DWORD *)(*(_QWORD *)(a1 + 184) + 1404));
  if (v20 >= 3)
    sub_22F246F08((uint64_t *)&v66);
  sub_22F246F08((uint64_t *)&v66);
  if ((v13 & 1) != 0)
  {
    llvm::ConstantDataArray::getString();
  }
  else
  {
    v52 = (llvm::Type *)(*v12 >> 1);
    IntNTy = (llvm::ArrayType *)llvm::Type::getIntNTy(*(llvm::Type **)(a1 + 232), (llvm::LLVMContext *)0x10);
    llvm::ArrayType::get(IntNTy, v52);
    llvm::ConstantDataSequential::getImpl();
  }
  llvm::User::operator new((llvm::User *)0x58);
  v54 = llvm::GlobalVariable::GlobalVariable();
  *(_DWORD *)(v54 + 32) = *(_DWORD *)(v54 + 32) & 0xFFFFFF3F | 0x80;
  v55 = 16472;
  if (v13)
    v55 = 16408;
  sub_22EF5D130(v19, *(_QWORD *)(v19 + v55));
  llvm::GlobalObject::setAlignment();
  v56 = *(_DWORD *)(v18 + 76);
  if (v56 == 3 || v56 == 5)
    llvm::GlobalObject::setSection();
  BitCast = llvm::ConstantExpr::getGetElementPtr();
  if ((v13 & 1) == 0)
    BitCast = llvm::ConstantExpr::getBitCast();
  v58 = v66;
  v59 = *((_DWORD *)v66 + 4);
  if (v59 >= *((_DWORD *)v66 + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v59 = *((_DWORD *)v58 + 4);
  }
  *((_QWORD *)v58[1] + v59) = BitCast;
  ++*((_DWORD *)v58 + 4);
  llvm::IntegerType::get();
  sub_22F246F08((uint64_t *)&v66);
  if (v20 < 3)
    v60 = *(unsigned __int8 *)(a1 + 130);
  else
    v60 = 0x40uLL / sub_22EF5CDF0(v19, *(_QWORD *)(*(_QWORD *)(v19 + 16408) & 0xFFFFFFFFFFFFFFF0));
  v65 = v60;
  v16 = sub_22F277520((uint64_t *)&v66);
  llvm::Value::getContext((llvm::Value *)v16);
  *(_QWORD *)(v16 + 72) = llvm::AttributeSet::addAttribute();
  switch(*(_DWORD *)(v18 + 76))
  {
    case 1:
    case 3:
    case 5:
    case 7:
      llvm::GlobalObject::setSection();
      break;
    default:
      break;
  }
  v12[1] = v16;
  if (v65)
    v16 = v16 & 0xFFFFFFFFFFFFFFF8 | ((__clz(v65) ^ 0x3F) >> 3);
  v66 = (void **)v74;
  sub_22E3CEB30(&v66);
  if (v72[0] != v73)
    free(v72[0]);
  return v16;
}

uint64_t sub_22E635F24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t Impl;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  llvm::Type *v31;
  uint64_t v32;
  llvm::ArrayType *IntNTy;
  char *v34;
  __int128 v35;
  _BYTE v36[120];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)a2 & 0xE00000) == 0x200000)
  {
    v4 = *(unsigned int *)(a2 + 4);
    v5 = *(_DWORD *)(a2 + 16) * ((*(_DWORD *)a2 >> 21) & 7u);
    v35 = xmmword_22F44E300;
    if (v5 >= 0x41)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v6 = v35;
    }
    else
    {
      v6 = 0;
      v7 = 0;
      if (!(_DWORD)v5)
      {
LABEL_5:
        *(_QWORD *)&v35 = v7 + v5;
        v8 = sub_22EF5C728(*(_QWORD *)(a1 + 144), *(_QWORD *)(a2 + 8));
        if (*(_BYTE *)(v8 + 16) == 2)
          v9 = v8;
        else
          v9 = 0;
        v10 = (unint64_t *)(v9 + 40);
        if (*(_DWORD *)(v9 + 48) >= 0x41u)
          v10 = (unint64_t *)*v10;
        v11 = *v10;
        v12 = v35;
        if ((_QWORD)v35 != v11 && (unint64_t)v35 <= v11)
        {
          if (*((_QWORD *)&v35 + 1) < v11)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v12 = v35;
          }
          if (v11 != v12)
            bzero(&v36[v12], v11 - v12);
        }
        return llvm::ConstantDataArray::getString();
      }
    }
    memcpy(&v36[v6], (const void *)(a2 + 4 * v4 + 20), v5);
    v7 = v35;
    goto LABEL_5;
  }
  v15 = sub_22E66CB04((llvm::Type ***)(a1 + 280), *(llvm::LLVMContext **)(a2 + 8));
  v16 = *(unsigned int *)(v15 + 32);
  llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)(v15 + 24));
  if (llvm::TypeSize::operator unsigned long long() == 16)
  {
    v17 = v36;
    v34 = v36;
    v35 = xmmword_22F44E330;
    if (v16 >= 0x21)
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v18 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v18)
    {
      v19 = 0;
      v20 = a2 + 20;
      do
      {
        v21 = (*(_DWORD *)a2 >> 21) & 7;
        if (v21 == 4)
        {
          v22 = *(_DWORD *)(v20 + 4 * *(unsigned int *)(a2 + 4) + 4 * v19);
        }
        else if (v21 == 2)
        {
          LOWORD(v22) = *(_WORD *)(v20 + 4 * *(unsigned int *)(a2 + 4) + 2 * v19);
        }
        else
        {
          LOWORD(v22) = *(unsigned __int8 *)(v20 + 4 * *(unsigned int *)(a2 + 4) + v19);
        }
        v23 = v35;
        if ((unint64_t)(v35 + 1) > *((_QWORD *)&v35 + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v23 = v35;
        }
        *(_WORD *)&v36[2 * v23] = v22;
        v24 = v35 + 1;
        *(_QWORD *)&v35 = v35 + 1;
        ++v19;
      }
      while (v18 != v19);
    }
    else
    {
      v24 = v35;
    }
    if (v24 != v16 && v24 <= v16)
    {
      if (*((_QWORD *)&v35 + 1) < v16)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v24 = v35;
      }
      if (v16 != v24)
        bzero(&v36[2 * v24], 2 * (v16 - v24));
    }
    v31 = *(llvm::Type **)(a1 + 232);
    v32 = 16;
  }
  else
  {
    v17 = (char *)&v35 + 8;
    v34 = (char *)&v35 + 8;
    LODWORD(v35) = 0;
    if (v16 >= 0x21)
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    v25 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v25)
    {
      v26 = 0;
      v27 = a2 + 20;
      do
      {
        v28 = (*(_DWORD *)a2 >> 21) & 7;
        if (v28 == 4)
        {
          v29 = *(_DWORD *)(v27 + 4 * *(unsigned int *)(a2 + 4) + 4 * v26);
        }
        else if (v28 == 2)
        {
          v29 = *(unsigned __int16 *)(v27 + 4 * *(unsigned int *)(a2 + 4) + 2 * v26);
        }
        else
        {
          v29 = *(unsigned __int8 *)(v27 + 4 * *(unsigned int *)(a2 + 4) + v26);
        }
        v30 = v35;
        if (v35 >= 0x20uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v30 = v35;
        }
        *(_DWORD *)&v36[4 * v30 - 8] = v29;
        LODWORD(v30) = v35 + 1;
        LODWORD(v35) = v35 + 1;
        ++v26;
      }
      while (v25 != v26);
    }
    else
    {
      LODWORD(v30) = 0;
    }
    if (v16 != v30)
    {
      v30 = v30;
      if (v16 >= v30)
      {
        if (v16 > 0x20)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v30 = v35;
        }
        if (v16 != v30)
          bzero(&v36[4 * v30 - 8], 4 * (v16 - v30));
      }
    }
    v31 = *(llvm::Type **)(a1 + 232);
    v32 = 32;
  }
  IntNTy = (llvm::ArrayType *)llvm::Type::getIntNTy(v31, (llvm::LLVMContext *)v32);
  llvm::ArrayType::get(IntNTy, (llvm::Type *)v16);
  Impl = llvm::ConstantDataSequential::getImpl();
  if (v34 != v17)
    free(v34);
  return Impl;
}

unint64_t sub_22E6363A4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  BOOL v8;
  char v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Value *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE v19[72];
  uint64_t v20;
  void *v21;
  __int128 v22;
  _QWORD v23[33];

  v23[32] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EF5D1B0(*(_QWORD *)(a1 + 144), *(_QWORD *)(a2 + 8));
  v20 = sub_22E635F24(a1, a2);
  if ((*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8) & 0x8000000000) != 0)
  {
    v5 = 0;
LABEL_10:
    v21 = v23;
    v22 = xmmword_22F44E320;
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 224) + 16) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 16), a2)|| (*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8) & 0x8000000000) != 0)
    {
      v13 = 8;
    }
    else
    {
      sub_22F242C48((uint64_t)v19, (uint64_t)&v21);
      (*(void (**)(_QWORD, uint64_t, _BYTE *))(**(_QWORD **)(*(_QWORD *)(a1 + 224) + 16) + 128))(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 16), a2, v19);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v19);
      v13 = 3;
    }
    v14 = sub_22E6366B0(v20, v13, a1);
    v15 = (uint64_t)v14;
    if (v5)
      *v5 = (uint64_t)v14;
    sub_22F2A2C10(*(uint64_t **)(a1 + 3480), v14, *(_DWORD *)(a2 + 20), (uint64_t)"<string literal>", 16, 0, 0, 0);
    v16 = sub_22E636614((_QWORD *)a1, v15);
    v17 = v16 & 0xFFFFFFFFFFFFFFF8 | ((__clz(v4) ^ 0x3F) >> 3);
    if (v4)
      v12 = v17;
    else
      v12 = v16;
    if (v21 != v23)
      free(v21);
    return v12;
  }
  v5 = sub_22F25E108((uint64_t *)(a1 + 1816), &v20) + 1;
  v6 = *v5;
  if (!*v5)
    goto LABEL_10;
  v7 = *(_WORD *)(v6 + 34);
  v8 = (v7 & 0x3F) == 0;
  v9 = (v7 & 0x3F) - 1;
  if (v8)
    v9 = 0;
  v10 = 1 << v9;
  if (v8)
    v10 = 0;
  if (v4 > v10)
  {
    v11 = __clz(v4);
    llvm::GlobalObject::setAlignment();
    v12 = sub_22E636614((_QWORD *)a1, v6);
    return v12 & 0xFFFFFFFFFFFFFFF8 | ((v11 ^ 0x3Fu) >> 3);
  }
  v12 = sub_22E636614((_QWORD *)a1, v6);
  if (v4)
  {
    v11 = __clz(v4);
    return v12 & 0xFFFFFFFFFFFFFFF8 | ((v11 ^ 0x3Fu) >> 3);
  }
  return v12;
}

uint64_t sub_22E636614(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1[19];
  if ((*(_DWORD *)(v3 + 52) & 0x40000000) != 0)
    return a2;
  if ((*(_BYTE *)(v3 + 104) & 0x20) != 0)
    return a2;
  v6 = sub_22F29B808((uint64_t)a1);
  if (!(_DWORD)v6)
    return a2;
  v7 = v6;
  v8 = sub_22E699F3C(a1);
  v9 = llvm::PointerType::get();
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 224))(v8, a1, a2, v7, 0, v9);
}

llvm::Value *sub_22E6366B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::Value *v4;
  int v5;
  unsigned int v6;

  sub_22F29B808(a3);
  v4 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x58);
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setAlignment();
  v5 = *((_DWORD *)v4 + 8);
  *((_DWORD *)v4 + 8) = v5 & 0xFFFFFF3F | 0x80;
  v6 = v5 & 0xF;
  if (v6 <= 0xA && ((1 << v6) & 0x63C) != 0)
  {
    llvm::Value::getName(v4);
    llvm::Module::getOrInsertComdat();
    llvm::GlobalObject::setComdat();
  }
  sub_22E62876C(a3, v4);
  return v4;
}

unint64_t sub_22E636808(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *__p[2];
  uint64_t v8;
  int v9;

  __p[0] = 0;
  __p[1] = 0;
  v8 = 0;
  v3 = a1[18];
  v4 = **(_QWORD **)(a2 + 16);
  v9 = 7;
  sub_22EF6B358(v3, v4);
  v5 = sub_22F29BB8C(a1, (uint64_t)__p, 0);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  return v5;
}

unint64_t sub_22E63688C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[6208];
  uint64_t v10;

  v0 = MEMORY[0x24BDAC7A8]();
  v10 = *MEMORY[0x24BDAC8D0];
  result = sub_22F276498(v1);
  if (result != v3)
  {
    v4 = result;
    v5 = v3;
    do
    {
      if (*(_QWORD *)(v4 + 56))
      {
        v6 = *(_QWORD *)(v4 + 48);
        v7 = *(_QWORD *)(v4 + 64);
        if (!v7 || (*(_BYTE *)(v7 + 58) & 0x10) != 0)
        {
          sub_22E618EBC((uint64_t)v9, v0, 0);
          sub_22F272A84();
          result = sub_22E619434((uint64_t)v9);
        }
        if ((*(_BYTE *)(v6 + 72) & 1) == 0)
        {
          v8 = *(_QWORD *)(v4 + 72);
          if (!v8 || (*(_BYTE *)(v8 + 58) & 0x10) != 0)
          {
            sub_22E618EBC((uint64_t)v9, v0, 0);
            sub_22F272B84();
            result = sub_22E619434((uint64_t)v9);
          }
        }
      }
      do
        v4 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v4 && (*(_DWORD *)(v4 + 28) & 0x7F) != 0x4E);
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t sub_22E6369D4()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int16 v19;
  _BYTE v20[6208];
  uint64_t v21;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = v0;
  v21 = *MEMORY[0x24BDAC8D0];
  result = sub_22EFDD1E0(*(_QWORD *)(v1 + 88));
  if (result)
  {
    v5 = result;
    while (1)
    {
      result = sub_22F115260(*(_QWORD *)(v5 + 48));
      if ((_DWORD)result)
        break;
      v5 = *(_QWORD *)(v5 + 80);
      if (!v5)
        goto LABEL_5;
    }
    v8 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(v3 + 144) + 15192), ".cxx_destruct", 0xDuLL);
    if (v2)
      v9 = v2 + 48;
    else
      v9 = 0;
    v10 = sub_22F3B51C0(*(_QWORD *)(v3 + 144), *(_DWORD *)(v2 + 24), *(_DWORD *)(v2 + 24), v8 | 1, *(_QWORD *)(*(_QWORD *)(v3 + 144) + 16392), 0, v9, 1, 0, 1, 0, 1, 0, v19, 1, 0, 0);
    sub_22EFC80C4(v10, v2 + 48);
    sub_22EFCCFA0(v2 + 48, v10);
    sub_22E618EBC((uint64_t)v20, v3, 0);
    sub_22F272C80((uint64_t)v20, v2, v10, 0);
    result = sub_22E619434((uint64_t)v20);
    *(_BYTE *)(v2 + 132) |= 2u;
  }
LABEL_5:
  if (*(_DWORD *)(v2 + 128))
  {
    sub_22E618EBC((uint64_t)v20, v3, 0);
    v6 = sub_22F3B6E50(v2);
    v7 = sub_22F3B6E50(v2) + 8 * *(unsigned int *)(v2 + 128);
    while (1)
    {
      if (v6 == v7)
        return sub_22E619434((uint64_t)v20);
      if ((sub_22E4C9FC8((uint64_t)v20, *(_QWORD *)(*(_QWORD *)v6 + 8)) & 1) == 0)
        break;
      v6 += 8;
    }
    sub_22E619434((uint64_t)v20);
    v11 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(v3 + 144) + 15192), ".cxx_construct", 0xEuLL);
    v12 = *(_QWORD *)(v3 + 144);
    v13 = v11 | 1;
    v14 = *(_DWORD *)(v2 + 24);
    v15 = sub_22F36E1B8(v12);
    v16 = *(_QWORD *)(v15 + 48);
    if (v16)
      v17 = v16 & 0xFFFFFFFFFFFFFFF0;
    else
      v17 = sub_22EF6462C(v12, v15);
    v18 = sub_22F3B51C0(v12, v14, v14, v13, v17, 0, v2 + 48, 1, 0, 1, 0, 1, 0, v19, 1, 0, 0);
    sub_22EFC80C4(v18, v2 + 48);
    sub_22EFCCFA0(v2 + 48, v18);
    sub_22E618EBC((uint64_t)v20, v3, 0);
    sub_22F272C80((uint64_t)v20, v2, v18, 1);
    result = sub_22E619434((uint64_t)v20);
    *(_BYTE *)(v2 + 132) |= 1u;
  }
  return result;
}

uint64_t sub_22E636C78(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t i;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3 = result;
  if ((*(_WORD *)(a2 + 8) & 0x80) != 0)
    result = sub_22EFCC320(a2);
  for (i = *(_QWORD *)(a2 + 16); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    if ((*(_DWORD *)(i + 28) & 0x7E) == 0x14)
    {
      v5 = sub_22F2781C0(i);
      if (v5 != v6)
      {
        v7 = v5;
        v8 = v6;
        do
        {
          sub_22E6346B8(v3, v7);
          do
            v7 = *(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v7 && (*(_DWORD *)(v7 + 28) & 0x7F) != 0x18);
        }
        while (v7 != v8);
      }
    }
    result = sub_22E6346B8(v3, i);
  }
  return result;
}

uint64_t sub_22E636D30(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = a2;
  if ((*(_BYTE *)(*(_QWORD *)(result + 184) + 34) & 1) != 0)
  {
    v2 = *(_DWORD *)(a2 + 28) & 0x7F;
    v3 = v2 > 0x39;
    v4 = (1 << v2) & 0x3D0000001000000;
    if (!v3 && v4 != 0)
    {
      v13 = result;
      v6 = *(_QWORD *)(a2 + 80);
      if ((v6 & 0x8000000) != 0)
      {
        v7 = result;
        if ((v6 & 0x20000000) == 0)
          return result;
      }
      else
      {
        v7 = result;
        if (!(*(_QWORD *)(a2 + 128) | *(_QWORD *)(a2 + 80) & 0x20000000))
          return result;
      }
      if (!byte_253E4D1C8
        || ((v8 = *(_QWORD *)(*(_QWORD *)(v7 + 144) + 1992),
             v9 = *(_DWORD *)(v8 + 344),
             v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) & 0x7FFFFFFF,
             !sub_22E63AF88(v8, *(_DWORD *)(v8 + 304), v10))
          ? (result = sub_22F1E1EE8(v8, v10))
          : (result = *(unsigned int *)(v8 + 304)),
            v7 = v13,
            v9 == (_DWORD)result))
      {
        v11 = v7 + 3488;
        v12 = v7;
        result = sub_22F29C458(v7 + 3488, &v14);
        if (*(_QWORD *)(v12 + 3520) == result)
        {
          result = sub_22F29C4C0(v11, (unint64_t *)&v14);
          *(_BYTE *)result = 1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_22E636E54(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  unint64_t v7;
  uint64_t v8;

  v8 = a2;
  if ((*(_BYTE *)(*(_QWORD *)(result + 184) + 34) & 1) != 0)
  {
    v2 = result;
    if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
    {
      v3 = *(_QWORD *)(a2 + 144) & 6;
      v4 = (_DWORD *)(*(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8);
      if (v3 != 4 || v4 == 0)
      {
        if (v3 != 2 || v4 == 0)
          goto LABEL_14;
      }
      else
      {
        v4 += 4;
      }
      if (((((*v4 >> 1) & 3) + 1) & 0xFFFFFFFD) != 0)
      {
        v7 = sub_22EFC20FC(a2, 1);
        sub_22E636E54(v2, v7);
      }
    }
LABEL_14:
    result = sub_22F29C458(v2 + 3488, &v8);
    if (*(_QWORD *)(v2 + 3520) == result)
    {
      result = sub_22F29C4C0(v2 + 3488, (unint64_t *)&v8);
      *(_BYTE *)result = 0;
    }
    else
    {
      *(_BYTE *)(result + 8) = 0;
    }
  }
  return result;
}

uint64_t sub_22E636F30(uint64_t a1, uint64_t *a2)
{
  llvm::LLVMContext *v3;

  if (!*a2)
    *a2 = llvm::Module::getOrInsertNamedMetadata();
  llvm::ValueAsMetadata::get();
  llvm::Type::getInt64Ty(*(llvm::Type **)(a1 + 232), v3);
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDTuple::getImpl();
  return llvm::NamedMDNode::addOperand();
}

uint64_t sub_22E637008(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  llvm::LLVMContext *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_DWORD *)(result + 2912))
  {
    v2 = result;
    result = llvm::LLVMContext::getMDKindID();
    v13 = 0;
    v4 = *(_QWORD *)(v2 + 2904);
    v5 = *(unsigned int *)(v2 + 2920);
    v6 = v4 + 56 * v5;
    if (*(_DWORD *)(v2 + 2912))
    {
      if ((_DWORD)v5)
      {
        v7 = 56 * v5;
        v8 = *(_QWORD *)(v2 + 2904);
        while ((*(_QWORD *)v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v8 += 56;
          v7 -= 56;
          if (!v7)
            goto LABEL_7;
        }
      }
      else
      {
        v8 = *(_QWORD *)(v2 + 2904);
      }
    }
    else
    {
LABEL_7:
      v8 = v4 + 56 * v5;
    }
    v9 = v4 + 56 * v5;
    while (v8 != v9)
    {
      result = v8 + 8;
      if ((*(_BYTE *)(v8 + 32) & 3) != 0)
      {
        result = sub_22F28ABCC(result, v2);
        v10 = result;
      }
      else
      {
        v10 = *(_QWORD *)result;
      }
      v11 = *(unsigned __int8 *)(v10 + 16);
      if (v10 && v11 == 59)
      {
        llvm::Type::getInt64Ty(*(llvm::Type **)(*(_QWORD *)(v2 + 144) + 232), v3);
        llvm::ConstantInt::get();
        llvm::ValueAsMetadata::get();
        llvm::MDTuple::getImpl();
        result = llvm::Instruction::setMetadata();
      }
      else if (v10)
      {
        if (v11 <= 3)
        {
          v1 &= 0xFFFFFFFF00000000;
          result = sub_22E636F30(*(_QWORD *)(v2 + 144), &v13);
        }
      }
      v12 = v8 + 56;
      v8 = v6;
      if (v12 != v6)
      {
        v8 = v12;
        while ((*(_QWORD *)v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v8 += 56;
          if (v8 == v6)
          {
            v8 = v6;
            break;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_22E6371C0(uint64_t a1, unint64_t a2, uint64_t a3, const void *a4, size_t a5)
{
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t result;
  uint64_t v19;
  void *__p[2];
  __int128 v21;
  __int128 v22;
  _QWORD v23[5];
  __int128 v24;
  uint64_t v25;
  __int128 v26;

  v9 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v10)
    v11 = *(_BYTE *)(v10 + 16) == 26;
  else
    v11 = 0;
  if (v11
    || (v12 = a2, *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
    && (v10 = sub_22F10CF48(v10)) != 0)
  {
    v13 = *(_QWORD *)(a1 + 144);
    v14 = (uint64_t *)(v10 + 40);
    v15 = *(_QWORD *)(v10 + 24);
    v16 = (unsigned __int16)(*(_QWORD *)(v10 + 16) >> 38);
    sub_22E4913B4(v10, (uint64_t)__p);
    v26 = v22;
    *(_OWORD *)v23 = *(_OWORD *)__p;
    HIDWORD(v23[2]) = DWORD1(v21);
    LODWORD(v23[2]) = 0;
    *(_OWORD *)&v23[3] = 0u;
    v25 = 0;
    v24 = 0u;
    v12 = sub_22EF63D8C(v13, v15, v14, v16, (__int128 *)v23, 0);
    v9 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFF0);
  }
  v23[0] = v9[1] | v12 & 7;
  v17 = sub_22F29DB64(a3, v23);
  result = v17[1];
  if (!result)
  {
    v19 = *v9;
    sub_22F114870(v19);
    if ((*(_DWORD *)(v19 + 16) & 0x1C000u) <= 0x8000)
    {
      result = llvm::MDTuple::getImpl();
      v17[1] = result;
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v21 = 0;
      LODWORD(v23[1]) = 0;
      LOBYTE(v24) = 0;
      *((_QWORD *)&v24 + 1) = 0;
      LODWORD(v25) = 1;
      memset(&v23[2], 0, 24);
      v23[0] = MEMORY[0x24BED83D8] + 16;
      *(_QWORD *)&v26 = __p;
      llvm::raw_ostream::SetBufferAndMode();
      (*(void (**)(_QWORD, unint64_t, _QWORD *))(**(_QWORD **)(*(_QWORD *)(a1 + 224) + 16) + 184))(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 16), v12, v23);
      if (a5 <= v23[3] - v23[4])
      {
        if (a5)
        {
          memcpy((void *)v23[4], a4, a5);
          v23[4] += a5;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v23, (const char *)a4);
      }
      v17[1] = llvm::MDString::get();
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v23);
      if (SBYTE7(v21) < 0)
        operator delete(__p[0]);
      return v17[1];
    }
  }
  return result;
}

uint64_t sub_22E637404(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)(a1 + 880);
  if (!result)
  {
    v3 = *(_QWORD *)(a1 + 200);
    v4 = operator new();
    result = MEMORY[0x23489D5F0](v4, v3);
    v5 = *(_QWORD *)(a1 + 880);
    *(_QWORD *)(a1 + 880) = result;
    if (v5)
      sub_22E63B49C(v5);
  }
  return result;
}

unint64_t sub_22E637464(_QWORD *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  unint64_t v7;

  v7 = sub_22F10ACF8(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  return sub_22E62D754(a1, v7, a3, a4, 1);
}

uint64_t sub_22E6374B0(uint64_t a1)
{
  uint64_t v1;
  unsigned int v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  _QWORD v12[3];
  __int16 v13;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 2000) + 152);
  if (!(_DWORD)v1)
    return 0;
  v3 = *(_DWORD *)(a1 + 192);
  if (v3 >= v1)
    return 1;
  if (!v3)
  {
    v5 = sub_22F41A810(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 32), 3, "-ftrivial-auto-var-init-stop-after=%0 has been enabled to limit the number of times ftrivial-auto-var-init=%1 gets applied.", 0x7BuLL);
    v6 = *(_QWORD *)(a1 + 208);
    *(_DWORD *)(v6 + 312) = 0;
    *(_DWORD *)(v6 + 316) = v5;
    if (*(char *)(v6 + 311) < 0)
    {
      **(_BYTE **)(v6 + 288) = 0;
      *(_QWORD *)(v6 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v6 + 288) = 0;
      *(_BYTE *)(v6 + 311) = 0;
    }
    v12[0] = v6 + 320;
    v12[1] = 0;
    v12[2] = v6;
    v13 = 1;
    *(_BYTE *)(v6 + 320) = 0;
    *(_DWORD *)(v6 + 664) = 0;
    v7 = *(unsigned int *)(v6 + 776);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)(v6 + 768);
      v9 = 56 * v7;
      do
      {
        if (*(char *)(v8 + v9 - 9) < 0)
          operator delete(*(void **)(v8 + v9 - 32));
        v9 -= 56;
      }
      while (v9);
      LODWORD(v7) = *(unsigned __int8 *)(v6 + 320);
    }
    *(_DWORD *)(v6 + 776) = 0;
    *(_BYTE *)(v6 + 321 + v7) = 3;
    *(_QWORD *)(v6 + 336 + 8 * v7) = v1;
    *(_BYTE *)(v6 + 320) = v7 + 1;
    if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 2000) + 248) & 0x300) == 0x100)
      v10 = "zero";
    else
      v10 = "pattern";
    v11 = (v7 + 1);
    *(_BYTE *)(v6 + 321 + v11) = 1;
    *(_BYTE *)(v6 + 320) = v7 + 2;
    *(_QWORD *)(v6 + 336 + 8 * v11) = v10;
    sub_22E3BB0B8((uint64_t)v12);
    v3 = *(_DWORD *)(a1 + 192);
  }
  result = 0;
  *(_DWORD *)(a1 + 192) = v3 + 1;
  return result;
}

void sub_22E637630(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  const char *v8;
  const char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t first_not_of;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  char __dst[8];
  unint64_t v26;
  char __str[16];
  uint64_t v28;
  unint64_t v29;
  void **v30[7];
  const char *v31;
  void *v32;
  uint64_t v33;
  _WORD v34[64];
  _QWORD v35[3];
  char v36;
  _QWORD *v37[4];
  _QWORD *v38;
  uint64_t v39;
  _QWORD v40[10];

  v40[8] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a3 + 48);
  v37[0] = a1;
  memset(&v37[1], 0, 13);
  v38 = v40;
  v39 = 0x400000000;
  sub_22F0D5A50(*(_QWORD *)(v5 + 16));
  v7 = v6;
  sub_22EFF68AC((uint64_t *)v5, &v31);
  v8 = (const char *)sub_22F262D70(v37, v7, (int)&v31, *(_QWORD *)(v5 + 8));
  if (v31 >= 2)
    sub_22EF53BC0((uint64_t *)&v31);
  v31 = v8;
  llvm::ConstantStruct::getTypeForElements();
  llvm::ConstantStruct::get();
  v9 = (const char *)llvm::User::operator new((llvm::User *)0x58);
  v31 = ".footnoteMetaArgs";
  v34[4] = 259;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  v31 = v9;
  v10 = (uint64_t *)(a1 + 1440);
  sub_22E62C508((uint64_t *)a1 + 180, (uint64_t *)&v31);
  v31 = a1;
  v32 = v34;
  v33 = 0x1000000000;
  memset(v35, 0, sizeof(v35));
  v36 = 0;
  v11 = llvm::StructType::get();
  v30[0] = (void **)&v31;
  v30[1] = 0;
  v30[2] = (void **)v33;
  memset(&v30[3], 0, 11);
  v36 = 1;
  v30[5] = 0;
  v30[6] = (void **)v11;
  if (v11)
    BYTE2(v30[4]) = (*(_DWORD *)(v11 + 8) & 0x200) != 0;
  sub_22F275848((uint64_t *)v30);
  sub_22F275848((uint64_t *)v30);
  *(_QWORD *)__str = *((unsigned __int8 *)a1 + 130);
  LOBYTE(v24) = 0;
  *(_DWORD *)__dst = 8;
  v12 = sub_22F29C988((uint64_t *)v30);
  v13 = *(unsigned int *)(a3 + 36);
  *(_QWORD *)&v24 = *(_QWORD *)(a3 + 40);
  *((_QWORD *)&v24 + 1) = v13;
  __dst[0] = 44;
  v14 = llvm::StringRef::find();
  if (v14 == -1)
  {
    v17 = 0;
    v18 = 0;
    *(_OWORD *)__str = v24;
  }
  else
  {
    if (*((_QWORD *)&v24 + 1) >= v14)
      v15 = v14;
    else
      v15 = *((_QWORD *)&v24 + 1);
    if (*((_QWORD *)&v24 + 1) >= v14 + 1)
      v16 = v14 + 1;
    else
      v16 = *((_QWORD *)&v24 + 1);
    v17 = v24 + v16;
    v18 = *((_QWORD *)&v24 + 1) - v16;
    *(_QWORD *)__str = v24;
    *(_QWORD *)&__str[8] = v15;
  }
  v28 = v17;
  v29 = v18;
  first_not_of = llvm::StringRef::find_first_not_of();
  if (first_not_of >= v29)
    v20 = v29;
  else
    v20 = first_not_of;
  *(_QWORD *)__dst = v28 + v20;
  v26 = v29 - v20;
  v21 = llvm::StringRef::find_first_not_of((llvm::StringRef *)__dst);
  if (v21 >= v26)
    v22 = v26;
  else
    v22 = v21;
  v23 = v26 - v22;
  strncpy(__dst, (const char *)(*(_QWORD *)__dst + v22), v26 - v22);
  __dst[v23] = 0;
  snprintf(__str, 0x22uLL, "__DATA,__ftnt_%s", __dst);
  strlen(__str);
  llvm::GlobalObject::setSection();
  *(_QWORD *)&v24 = v12;
  sub_22E62C508(v10, (uint64_t *)&v24);
  v30[0] = (void **)v35;
  sub_22E3CEB30(v30);
  if (v32 != v34)
    free(v32);
  if (v38 != v40)
    free(v38);
}

_QWORD *sub_22E6379A8(_QWORD *result)
{
  void *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  *result = MEMORY[0x24BED8400] + 16;
  v1 = (void *)result[12];
  if (v1 != (void *)result[11])
  {
    v3 = result;
    free(v1);
    result = v3;
  }
  v2 = (_QWORD *)result[8];
  if (v2 != result + 10)
  {
    v4 = result;
    free(v2);
    return v4;
  }
  return result;
}

uint64_t sub_22E637A14(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(24 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t sub_22E637A5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *);
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  BOOL v7;
  _QWORD v8[9];

  v2 = 0;
  v8[8] = *MEMORY[0x24BDAC8D0];
  v8[1] = 0;
  v8[3] = 0;
  v8[5] = 0;
  v8[0] = sub_22E637B28;
  v8[2] = sub_22E637B44;
  v8[4] = sub_22E637B60;
  v8[6] = sub_22E637B7C;
  v8[7] = 0;
  do
  {
    v3 = (uint64_t (*)(_QWORD *))v8[v2];
    v4 = v8[v2 + 1];
    v5 = (_QWORD *)(a1 + (v4 >> 1));
    if ((v4 & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v5 + v3);
    result = v3(v5);
    if (result)
      break;
    v7 = v2 == 6;
    v2 += 2;
  }
  while (!v7);
  return result;
}

uint64_t sub_22E637B28(_QWORD *a1)
{
  if (*a1 == a1[4] || *a1 == 0)
    return 0;
  else
    return *a1 - 56;
}

uint64_t sub_22E637B44(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 == *(_QWORD *)(a1 + 40) || v1 == 0)
    return 0;
  else
    return v1 - 56;
}

uint64_t sub_22E637B60(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 == *(_QWORD *)(a1 + 48) || v1 == 0)
    return 0;
  else
    return v1 - 48;
}

uint64_t sub_22E637B7C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 == *(_QWORD *)(a1 + 56) || v1 == 0)
    return 0;
  else
    return v1 - 56;
}

uint64_t sub_22E637B98(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *);
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  BOOL v7;
  _QWORD v8[9];

  v2 = 0;
  v8[8] = *MEMORY[0x24BDAC8D0];
  v8[1] = 0;
  v8[3] = 0;
  v8[5] = 0;
  v8[0] = sub_22E637C64;
  v8[2] = sub_22E637C88;
  v8[4] = sub_22E637CAC;
  v8[6] = sub_22E637CD0;
  v8[7] = 0;
  do
  {
    v3 = (uint64_t (*)(_QWORD *))v8[v2];
    v4 = v8[v2 + 1];
    v5 = (_QWORD *)(a1 + (v4 >> 1));
    if ((v4 & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v5 + v3);
    result = v3(v5);
    if ((result & 1) != 0)
      break;
    v7 = v2 == 6;
    v2 += 2;
  }
  while (!v7);
  return result;
}

BOOL sub_22E637C64(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[4];
  if (*a1 != v2)
    *a1 = *(_QWORD *)(v1 + 8);
  return v1 != v2;
}

BOOL sub_22E637C88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 40);
  if (v1 != v2)
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v1 + 8);
  return v1 != v2;
}

BOOL sub_22E637CAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 48);
  if (v1 != v2)
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v1 + 8);
  return v1 != v2;
}

BOOL sub_22E637CD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 56);
  if (v1 != v2)
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v1 + 8);
  return v1 != v2;
}

void sub_22E637CF4(unint64_t a1, unint64_t a2, _QWORD *a3, uint64_t a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  char v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  char *v44;
  unint64_t v45;
  uint64_t *v46;
  char v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  char *v55;
  unint64_t v56;
  uint64_t *v57;
  char v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  char *v66;
  unint64_t v67;
  __int128 v68;
  __int128 v69;
  unint64_t v70;
  __int128 v71;
  char v72;
  BOOL v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  unsigned int v79;
  char *v80;
  unint64_t v81;
  char v82;
  BOOL v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  unsigned int v89;
  char *v90;
  __int128 *v91;
  __int128 v92;
  __int128 v93;
  BOOL v94;
  BOOL v95;
  __int128 v96;
  char *v97;
  uint64_t v98;
  char v99;
  BOOL v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  unsigned int v105;
  uint64_t *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char v110;
  BOOL v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v118;
  __int128 *v119;
  uint64_t v120;
  char v121;
  BOOL v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int v129;
  unint64_t v130;
  uint64_t *v131;
  char *v132;
  uint64_t v133;
  char v134;
  BOOL v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  unsigned int v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  char v148;
  BOOL v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  unsigned int v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  uint64_t v158;
  char v159;
  BOOL v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  unsigned int v165;
  unint64_t v166;
  __int128 *v167;
  __int128 v168;
  __int128 v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  char v173;
  int v174;
  uint64_t v175;
  char v176;
  BOOL v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unsigned int v182;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  char v191;
  BOOL v192;
  unint64_t v193;
  uint64_t v194;
  char v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unsigned int v199;
  unint64_t v200;
  __int128 v201;
  uint64_t v202;
  uint64_t v203;
  void **v204;
  char *v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  unsigned int v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  __int128 v215;
  int64_t v216;
  int64_t v217;
  int64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char v222;
  BOOL v223;
  uint64_t v224;
  uint64_t v225;
  char v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unsigned int v232;
  uint64_t v233;
  unsigned int v234;
  uint64_t v235;
  char v236;
  BOOL v237;
  uint64_t v238;
  uint64_t v239;
  char v240;
  BOOL v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int v246;
  uint64_t v247;
  __int128 v248;
  uint64_t v249;
  __int128 v250;
  uint64_t v251;
  uint64_t v252;
  char v253;
  BOOL v254;
  uint64_t v255;
  uint64_t v256;
  char v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int v263;
  uint64_t v264;
  char v265;
  BOOL v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  uint64_t v270;
  uint64_t v271;
  unsigned int v272;
  char *v273;
  unsigned int v274;
  __int128 v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  int64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  char v283;
  BOOL v284;
  char *v285;
  uint64_t v286;
  char v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  char *v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v296;
  unsigned int v297;
  __int128 v298;
  __int128 v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t v303;
  char v304;
  BOOL v305;
  unint64_t v306;
  uint64_t v307;
  char v308;
  BOOL v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unsigned int v314;
  uint64_t v315;
  __int128 v316;
  uint64_t v317;
  __int128 v318;
  char v319;
  BOOL v320;
  unint64_t v321;
  uint64_t v322;
  char *v323;
  uint64_t v324;
  unint64_t v325;
  unsigned int v326;
  char *v327;
  __int128 v328;
  uint64_t v329;
  unint64_t v331;
  char *v332;
  uint64_t v333;
  char v334;
  BOOL v335;
  uint64_t v336;
  uint64_t v337;
  char v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unsigned int v342;
  uint64_t v343;
  __int128 v344;
  char *v345;
  void **v346;
  char *v347;
  uint64_t v348;
  char v349;
  int v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  char *v354;
  unsigned int v355;
  char *v356;
  char *v357;
  int v358;
  __int128 v359;
  uint64_t *v360;
  uint64_t *v361;
  void *v362;
  int64_t v364;
  char v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t *v369;
  int64_t v370;
  unint64_t v371;
  __int128 v372;
  uint64_t v373;
  __int128 v374;
  uint64_t v375;
  uint64_t v376;

  v376 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v369 = (uint64_t *)(a2 - 24);
  v360 = (uint64_t *)(a2 - 72);
  v361 = (uint64_t *)(a2 - 48);
  v366 = a2;
  while (2)
  {
    v9 = a1;
    v10 = a2 - a1;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - a1) >> 3);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v172 = *(_QWORD *)(a2 - 24);
        v171 = a2 - 24;
        v170 = v172;
        v173 = *(_BYTE *)(v171 + 23);
        v174 = v173;
        if (v173 >= 0)
          v170 = v171;
        v175 = v173 & 0x7F;
        if (v174 < 0)
          v175 = *(_QWORD *)(v171 + 8);
        v176 = *(_BYTE *)(a1 + 23);
        v177 = v176 < 0;
        if (v176 >= 0)
          v178 = a1;
        else
          v178 = *(_QWORD *)a1;
        v179 = v176 & 0x7F;
        if (v177)
          v180 = *(_QWORD *)(a1 + 8);
        else
          v180 = v179;
        if (v175)
          v181 = v170 + 1;
        else
          v181 = v170;
        v182 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v181, v175 - (v175 != 0));
        if (v180)
          v183 = v178 + 1;
        else
          v183 = v178;
        if (v182 > (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v183, v180 - (v180 != 0)))
        {
          v184 = *(_OWORD *)a1;
          v373 = *(_QWORD *)(a1 + 16);
          v372 = v184;
          v185 = *(_OWORD *)v171;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v171 + 16);
          *(_OWORD *)a1 = v185;
          v186 = v372;
          *(_QWORD *)(v171 + 16) = v373;
          *(_OWORD *)v171 = v186;
        }
        return;
      case 3uLL:
        sub_22E6395D0((uint64_t *)a1, (uint64_t *)(a1 + 24), v369, a3);
        return;
      case 4uLL:
        sub_22E639C74(a1, a1 + 24, a1 + 48, v369, a3);
        return;
      case 5uLL:
        sub_22E6392E0(a1, a1 + 24, a1 + 48, a1 + 72, v369, a3);
        return;
      default:
        if (v10 <= 575)
        {
          if ((a5 & 1) != 0)
          {
            if (a1 != a2)
            {
              v187 = a1 + 24;
              if (a1 + 24 != a2)
              {
                v188 = 0;
                v189 = a1;
                do
                {
                  v190 = v189;
                  v189 = v187;
                  v191 = *(_BYTE *)(v190 + 47);
                  v192 = v191 < 0;
                  v193 = *(_QWORD *)(v190 + 24);
                  if (v191 >= 0)
                    v193 = v189;
                  v194 = v191 & 0x7F;
                  if (v192)
                    v194 = *(_QWORD *)(v190 + 32);
                  v195 = *(_BYTE *)(v190 + 23);
                  if (v195 >= 0)
                    v196 = v190;
                  else
                    v196 = *(_QWORD *)v190;
                  if (v195 >= 0)
                    v197 = v195 & 0x7F;
                  else
                    v197 = *(_QWORD *)(v190 + 8);
                  if (v194)
                    v198 = v193 + 1;
                  else
                    v198 = v193;
                  v199 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v198, v194 - (v194 != 0));
                  if (v197)
                    v200 = v196 + 1;
                  else
                    v200 = v196;
                  if (v199 > (*(unsigned int (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v200, v197 - (v197 != 0)))
                  {
                    v201 = *(_OWORD *)v189;
                    v373 = *(_QWORD *)(v189 + 16);
                    v372 = v201;
                    *(_QWORD *)(v189 + 8) = 0;
                    *(_QWORD *)(v189 + 16) = 0;
                    *(_QWORD *)v189 = 0;
                    v202 = v188;
                    do
                    {
                      v203 = v9 + v202;
                      v204 = (void **)(v9 + v202 + 24);
                      if (*(char *)(v9 + v202 + 47) < 0)
                        operator delete(*v204);
                      *(_OWORD *)v204 = *(_OWORD *)v203;
                      *(_QWORD *)(v9 + v202 + 40) = *(_QWORD *)(v203 + 16);
                      *(_BYTE *)(v203 + 23) = 0;
                      *(_BYTE *)v203 = 0;
                      if (!v202)
                      {
                        v214 = v9;
                        goto LABEL_325;
                      }
                      v205 = (char *)v372;
                      if (v373 >= 0)
                        v205 = (char *)&v372;
                      v206 = HIBYTE(v373) & 0x7F;
                      if (v373 < 0)
                        v206 = *((_QWORD *)&v372 + 1);
                      v207 = *(_BYTE *)(v9 + v202 - 1);
                      if (v207 >= 0)
                        v208 = v9 + v202 - 24;
                      else
                        v208 = *(_QWORD *)(v9 + v202 - 24);
                      if (v207 >= 0)
                        v209 = v207 & 0x7F;
                      else
                        v209 = *(_QWORD *)(v9 + v202 - 16);
                      if (v206)
                        v210 = v205 + 1;
                      else
                        v210 = v205;
                      v211 = (*(uint64_t (**)(_QWORD, char *, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v210, v206 - (v206 != 0));
                      if (v209)
                        v212 = v208 + 1;
                      else
                        v212 = v208;
                      v202 -= 24;
                    }
                    while (v211 > (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v212, v209 - (v209 != 0)));
                    v213 = *(char *)(v9 + v202 + 47);
                    v214 = v9 + v202 + 24;
                    if (v213 < 0)
                      operator delete(*(void **)v214);
LABEL_325:
                    v215 = v372;
                    *(_QWORD *)(v214 + 16) = v373;
                    *(_OWORD *)v214 = v215;
                  }
                  v187 = v189 + 24;
                  v188 += 24;
                }
                while (v189 + 24 != v366);
              }
            }
          }
          else if (a1 != a2)
          {
            v331 = a1 + 24;
            if (a1 + 24 != a2)
            {
              v332 = (char *)(a1 + 47);
              do
              {
                v333 = v9;
                v9 = v331;
                v334 = *(_BYTE *)(v333 + 47);
                v335 = v334 < 0;
                v336 = *(_QWORD *)(v333 + 24);
                if (v334 >= 0)
                  v336 = v9;
                v337 = v334 & 0x7F;
                if (v335)
                  v337 = *(_QWORD *)(v333 + 32);
                v338 = *(_BYTE *)(v333 + 23);
                if (v338 >= 0)
                  v339 = v333;
                else
                  v339 = *(_QWORD *)v333;
                if (v338 >= 0)
                  v340 = v338 & 0x7F;
                else
                  v340 = *(_QWORD *)(v333 + 8);
                if (v337)
                  v341 = v336 + 1;
                else
                  v341 = v336;
                v342 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v341, v337 - (v337 != 0));
                if (v340)
                  v343 = v339 + 1;
                else
                  v343 = v339;
                if (v342 > (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v343, v340 - (v340 != 0)))
                {
                  v344 = *(_OWORD *)v9;
                  v373 = *(_QWORD *)(v9 + 16);
                  v372 = v344;
                  *(_QWORD *)(v9 + 8) = 0;
                  *(_QWORD *)(v9 + 16) = 0;
                  *(_QWORD *)v9 = 0;
                  v345 = v332;
                  do
                  {
                    v346 = (void **)(v345 - 23);
                    if (*v345 < 0)
                      operator delete(*v346);
                    *(_OWORD *)v346 = *(_OWORD *)(v345 - 47);
                    *(_QWORD *)(v345 - 7) = *(_QWORD *)(v345 - 31);
                    *(v345 - 24) = 0;
                    v345 -= 24;
                    *(v345 - 23) = 0;
                    v347 = (char *)v372;
                    if (v373 >= 0)
                      v347 = (char *)&v372;
                    v348 = HIBYTE(v373) & 0x7F;
                    if (v373 < 0)
                      v348 = *((_QWORD *)&v372 + 1);
                    v349 = *(v345 - 24);
                    v350 = v349;
                    if (v349 >= 0)
                      v351 = v345 - 47;
                    else
                      v351 = *(char **)(v345 - 47);
                    v352 = v349 & 0x7F;
                    if (v350 >= 0)
                      v353 = v352;
                    else
                      v353 = *(_QWORD *)(v345 - 39);
                    if (v348)
                      v354 = v347 + 1;
                    else
                      v354 = v347;
                    v355 = (*(uint64_t (**)(_QWORD, char *, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v354, v348 - (v348 != 0));
                    if (v353)
                      v356 = v351 + 1;
                    else
                      v356 = v351;
                  }
                  while (v355 > (*(unsigned int (**)(_QWORD, char *, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v356, v353 - (v353 != 0)));
                  v358 = *v345;
                  v357 = v345 - 23;
                  if (v358 < 0)
                    operator delete(*(void **)v357);
                  v359 = v372;
                  *((_QWORD *)v357 + 2) = v373;
                  *(_OWORD *)v357 = v359;
                  a2 = v366;
                }
                v331 = v9 + 24;
                v332 += 24;
              }
              while (v9 + 24 != a2);
            }
          }
          return;
        }
        v368 = a1;
        if (!a4)
        {
          if (a1 != a2)
          {
            v216 = (v11 - 2) >> 1;
            v217 = v216;
            do
            {
              v218 = v217;
              if (v216 >= v217)
              {
                v219 = (2 * v217) | 1;
                v220 = v368 + 24 * v219;
                v221 = 2 * v217 + 2;
                v364 = v217;
                if (v221 < (uint64_t)v11)
                {
                  v222 = *(_BYTE *)(v220 + 23);
                  v223 = v222 < 0;
                  v224 = *(_QWORD *)v220;
                  if (v222 >= 0)
                    v224 = v368 + 24 * v219;
                  v225 = v222 & 0x7F;
                  if (v223)
                    v225 = *(_QWORD *)(v220 + 8);
                  v226 = *(_BYTE *)(v220 + 47);
                  v227 = v226;
                  if (v226 >= 0)
                    v228 = v220 + 24;
                  else
                    v228 = *(_QWORD *)(v220 + 24);
                  v229 = v226 & 0x7F;
                  if (v227 >= 0)
                    v230 = v229;
                  else
                    v230 = *(_QWORD *)(v220 + 32);
                  if (v225)
                    v231 = v224 + 1;
                  else
                    v231 = v224;
                  v232 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v231, v225 - (v225 != 0));
                  if (v230)
                    v233 = v228 + 1;
                  else
                    v233 = v228;
                  v234 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v233, v230 - (v230 != 0));
                  if (v232 > v234)
                    v220 += 24;
                  v218 = v364;
                  if (v232 > v234)
                    v219 = v221;
                }
                v235 = v368 + 24 * v218;
                v236 = *(_BYTE *)(v220 + 23);
                v237 = v236 < 0;
                v238 = *(_QWORD *)v220;
                if (v236 >= 0)
                  v238 = v220;
                v239 = v236 & 0x7F;
                if (v237)
                  v239 = *(_QWORD *)(v220 + 8);
                v240 = *(_BYTE *)(v235 + 23);
                v241 = v240 < 0;
                v242 = v240 >= 0 ? v368 + 24 * v218 : *(_QWORD *)v235;
                v243 = v240 & 0x7F;
                v244 = v241 ? *(_QWORD *)(v235 + 8) : v243;
                v245 = v239 ? v238 + 1 : v238;
                v246 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v245, v239 - (v239 != 0));
                v247 = v244 ? v242 + 1 : v242;
                v218 = v364;
                if (v246 <= (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v247, v244 - (v244 != 0)))
                {
                  v248 = *(_OWORD *)v235;
                  v373 = *(_QWORD *)(v235 + 16);
                  v372 = v248;
                  *(_QWORD *)(v235 + 8) = 0;
                  *(_QWORD *)(v235 + 16) = 0;
                  *(_QWORD *)v235 = 0;
                  while (1)
                  {
                    v249 = v220;
                    if (*(char *)(v235 + 23) < 0)
                      operator delete(*(void **)v235);
                    v250 = *(_OWORD *)v220;
                    *(_QWORD *)(v235 + 16) = *(_QWORD *)(v220 + 16);
                    *(_OWORD *)v235 = v250;
                    *(_BYTE *)(v220 + 23) = 0;
                    *(_BYTE *)v220 = 0;
                    if (v216 < v219)
                      break;
                    v251 = (2 * v219) | 1;
                    v220 = v368 + 24 * v251;
                    v252 = 2 * v219 + 2;
                    if (v252 < (uint64_t)v11)
                    {
                      v253 = *(_BYTE *)(v220 + 23);
                      v254 = v253 < 0;
                      v255 = *(_QWORD *)v220;
                      if (v253 >= 0)
                        v255 = v368 + 24 * v251;
                      v256 = v253 & 0x7F;
                      if (v254)
                        v256 = *(_QWORD *)(v220 + 8);
                      v257 = *(_BYTE *)(v220 + 47);
                      v258 = v257;
                      if (v257 >= 0)
                        v259 = v220 + 24;
                      else
                        v259 = *(_QWORD *)(v220 + 24);
                      v260 = v257 & 0x7F;
                      if (v258 >= 0)
                        v261 = v260;
                      else
                        v261 = *(_QWORD *)(v220 + 32);
                      if (v256)
                        v262 = v255 + 1;
                      else
                        v262 = v255;
                      v263 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v262, v256 - (v256 != 0));
                      if (v261)
                        v264 = v259 + 1;
                      else
                        v264 = v259;
                      v216 = (v11 - 2) >> 1;
                      if (v263 > (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v264, v261 - (v261 != 0)))
                      {
                        v220 += 24;
                        v251 = v252;
                      }
                    }
                    v265 = *(_BYTE *)(v220 + 23);
                    v266 = v265 < 0;
                    v267 = *(_QWORD *)v220;
                    if (v265 >= 0)
                      v267 = v220;
                    v268 = v265 & 0x7F;
                    if (v266)
                      v268 = *(_QWORD *)(v220 + 8);
                    if (v373 >= 0)
                      v269 = (char *)&v372;
                    else
                      v269 = (char *)v372;
                    if (v373 >= 0)
                      v270 = HIBYTE(v373) & 0x7F;
                    else
                      v270 = *((_QWORD *)&v372 + 1);
                    if (v268)
                      v271 = v267 + 1;
                    else
                      v271 = v267;
                    v272 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v271, v268 - (v268 != 0));
                    if (v270)
                      v273 = v269 + 1;
                    else
                      v273 = v269;
                    v274 = (*(uint64_t (**)(_QWORD, char *, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v273, v270 - (v270 != 0));
                    v235 = v249;
                    v219 = v251;
                    if (v272 > v274)
                    {
                      if (*(char *)(v249 + 23) < 0)
                        operator delete(*(void **)v249);
                      break;
                    }
                  }
                  v275 = v372;
                  *(_QWORD *)(v249 + 16) = v373;
                  *(_OWORD *)v249 = v275;
                  v218 = v364;
                }
              }
              v217 = v218 - 1;
            }
            while (v218);
            v276 = v366;
            v277 = v368;
            do
            {
              v278 = 0;
              v367 = v276;
              v362 = *(void **)v277;
              *(_QWORD *)&v374 = *(_QWORD *)(v368 + 8);
              *(_QWORD *)((char *)&v374 + 7) = *(_QWORD *)(v368 + 15);
              v365 = *(_BYTE *)(v277 + 23);
              *(_QWORD *)(v277 + 8) = 0;
              *(_QWORD *)(v277 + 16) = 0;
              *(_QWORD *)v277 = 0;
              v279 = (v11 - 2) >> 1;
              v370 = v279;
              do
              {
                v280 = v277 + 24 * v278 + 24;
                v281 = 2 * v278;
                v278 = (2 * v278) | 1;
                v282 = v281 + 2;
                if (v281 + 2 < (uint64_t)v11)
                {
                  v283 = *(_BYTE *)(v280 + 23);
                  v284 = v283 < 0;
                  v285 = *(char **)v280;
                  if (v283 >= 0)
                    v285 = (char *)v280;
                  v286 = v283 & 0x7F;
                  if (v284)
                    v286 = *(_QWORD *)(v280 + 8);
                  v287 = *(_BYTE *)(v280 + 47);
                  v288 = v287;
                  if (v287 >= 0)
                    v289 = v280 + 24;
                  else
                    v289 = *(_QWORD *)(v280 + 24);
                  v290 = v287 & 0x7F;
                  v291 = v11;
                  if (v288 >= 0)
                    v292 = v290;
                  else
                    v292 = *(_QWORD *)(v280 + 32);
                  if (v286)
                    v293 = v285 + 1;
                  else
                    v293 = v285;
                  v294 = (*(uint64_t (**)(_QWORD, char *, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v293, v286 - (v286 != 0));
                  if (v292)
                    v295 = v289 + 1;
                  else
                    v295 = v289;
                  v296 = v292 - (v292 != 0);
                  v11 = v291;
                  v297 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v295, v296);
                  if (v294 > v297)
                    v280 += 24;
                  v279 = v370;
                  if (v294 > v297)
                    v278 = v282;
                }
                if (*(char *)(v277 + 23) < 0)
                  operator delete(*(void **)v277);
                v298 = *(_OWORD *)v280;
                *(_QWORD *)(v277 + 16) = *(_QWORD *)(v280 + 16);
                *(_OWORD *)v277 = v298;
                *(_BYTE *)(v280 + 23) = 0;
                *(_BYTE *)v280 = 0;
                v277 = v280;
              }
              while (v278 <= v279);
              if (v280 == v367 - 24)
              {
                v276 = v367 - 24;
                *(_QWORD *)v280 = v362;
                v329 = *(_QWORD *)((char *)&v374 + 7);
                *(_QWORD *)(v280 + 8) = v374;
                *(_QWORD *)(v280 + 15) = v329;
                *(_BYTE *)(v280 + 23) = v365;
                v277 = v368;
              }
              else
              {
                v299 = *(_OWORD *)(v367 - 24);
                v276 = v367 - 24;
                *(_QWORD *)(v280 + 16) = *(_QWORD *)(v367 - 8);
                *(_OWORD *)v280 = v299;
                *(_BYTE *)(v367 - 1) = 0;
                *(_QWORD *)(v367 - 24) = v362;
                v300 = v374;
                *(_QWORD *)(v367 - 9) = *(_QWORD *)((char *)&v374 + 7);
                *(_QWORD *)(v367 - 16) = v300;
                *(_BYTE *)(v367 - 1) = v365;
                v277 = v368;
                v301 = v280 - v368 + 24;
                if (v301 >= 25)
                {
                  v302 = (v301 / 0x18uLL - 2) >> 1;
                  v303 = v368 + 24 * v302;
                  v304 = *(_BYTE *)(v303 + 23);
                  v305 = v304 < 0;
                  v306 = *(_QWORD *)v303;
                  if (v304 >= 0)
                    v306 = v368 + 24 * v302;
                  v307 = v304 & 0x7F;
                  if (v305)
                    v307 = *(_QWORD *)(v303 + 8);
                  v308 = *(_BYTE *)(v280 + 23);
                  v309 = v308 < 0;
                  v310 = v308 >= 0 ? v280 : *(_QWORD *)v280;
                  v311 = v308 & 0x7F;
                  v312 = v309 ? *(_QWORD *)(v280 + 8) : v311;
                  v313 = v307 ? v306 + 1 : v306;
                  v314 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v313, v307 - (v307 != 0));
                  v315 = v312 ? v310 + 1 : v310;
                  if (v314 > (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v315, v312 - (v312 != 0)))
                  {
                    v371 = v11;
                    v316 = *(_OWORD *)v280;
                    v373 = *(_QWORD *)(v280 + 16);
                    v372 = v316;
                    *(_QWORD *)(v280 + 8) = 0;
                    *(_QWORD *)(v280 + 16) = 0;
                    *(_QWORD *)v280 = 0;
                    while (1)
                    {
                      v317 = v303;
                      if (*(char *)(v280 + 23) < 0)
                        operator delete(*(void **)v280);
                      v318 = *(_OWORD *)v303;
                      *(_QWORD *)(v280 + 16) = *(_QWORD *)(v303 + 16);
                      *(_OWORD *)v280 = v318;
                      *(_BYTE *)(v303 + 23) = 0;
                      *(_BYTE *)v303 = 0;
                      if (!v302)
                        break;
                      v302 = (v302 - 1) >> 1;
                      v303 = v368 + 24 * v302;
                      v319 = *(_BYTE *)(v303 + 23);
                      v320 = v319 < 0;
                      v321 = *(_QWORD *)v303;
                      if (v319 >= 0)
                        v321 = v368 + 24 * v302;
                      v322 = v319 & 0x7F;
                      if (v320)
                        v322 = *(_QWORD *)(v303 + 8);
                      if (v373 >= 0)
                        v323 = (char *)&v372;
                      else
                        v323 = (char *)v372;
                      if (v373 >= 0)
                        v324 = HIBYTE(v373) & 0x7F;
                      else
                        v324 = *((_QWORD *)&v372 + 1);
                      if (v322)
                        v325 = v321 + 1;
                      else
                        v325 = v321;
                      v326 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v325, v322 - (v322 != 0));
                      if (v324)
                        v327 = v323 + 1;
                      else
                        v327 = v323;
                      v280 = v317;
                      if (v326 <= (*(unsigned int (**)(_QWORD, char *, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v327, v324 - (v324 != 0)))
                      {
                        if (*(char *)(v317 + 23) < 0)
                          operator delete(*(void **)v317);
                        break;
                      }
                    }
                    v328 = v372;
                    *(_QWORD *)(v317 + 16) = v373;
                    *(_OWORD *)v317 = v328;
                    v11 = v371;
                  }
                }
              }
            }
            while ((uint64_t)v11-- > 2);
          }
          return;
        }
        v12 = v11 >> 1;
        v13 = (uint64_t *)(a1 + 24 * (v11 >> 1));
        if ((unint64_t)v10 < 0xC01)
        {
          sub_22E6395D0((uint64_t *)(v9 + 24 * (v11 >> 1)), (uint64_t *)v9, v369, a3);
        }
        else
        {
          sub_22E6395D0((uint64_t *)v9, (uint64_t *)(v9 + 24 * (v11 >> 1)), v369, a3);
          v14 = (uint64_t *)(v9 + 24);
          v15 = (uint64_t *)(v9 + 24 * v12 - 24);
          sub_22E6395D0(v14, v15, v361, a3);
          v16 = &v14[3 * v12];
          sub_22E6395D0((uint64_t *)(v368 + 48), v16, v360, a3);
          v17 = v15;
          v9 = v368;
          sub_22E6395D0(v17, v13, v16, a3);
          v18 = *(_OWORD *)v368;
          v373 = *(_QWORD *)(v368 + 16);
          v372 = v18;
          v19 = v13[2];
          *(_OWORD *)v368 = *(_OWORD *)v13;
          *(_QWORD *)(v368 + 16) = v19;
          v20 = v372;
          v13[2] = v373;
          *(_OWORD *)v13 = v20;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v21 = *(_BYTE *)(v9 - 1);
          v22 = v21 < 0;
          if (v21 >= 0)
            v23 = v9 - 24;
          else
            v23 = *(_QWORD *)(v9 - 24);
          v24 = v21 & 0x7F;
          if (v22)
            v24 = *(_QWORD *)(v9 - 16);
          v25 = *(_BYTE *)(v9 + 23);
          v26 = v25 < 0;
          v27 = v25 >= 0 ? v9 : *(_QWORD *)v9;
          v28 = v25 & 0x7F;
          v29 = v26 ? *(_QWORD *)(v9 + 8) : v28;
          v30 = v24 ? v23 + 1 : v23;
          v31 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v30, v24 - (v24 != 0));
          v32 = v29 ? v27 + 1 : v27;
          if (v31 <= (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v32, v29 - (v29 != 0)))
          {
            v96 = *(_OWORD *)v9;
            v375 = *(_QWORD *)(v9 + 16);
            v374 = v96;
            *(_QWORD *)(v9 + 8) = 0;
            *(_QWORD *)(v9 + 16) = 0;
            *(_QWORD *)v9 = 0;
            v97 = (char *)v374;
            if (v375 >= 0)
              v97 = (char *)&v374;
            v98 = HIBYTE(v375) & 0x7F;
            if (v375 < 0)
              v98 = *((_QWORD *)&v374 + 1);
            v99 = *(_BYTE *)(a2 - 1);
            v100 = v99 < 0;
            if (v99 >= 0)
              v101 = v369;
            else
              v101 = *(uint64_t **)(a2 - 24);
            v102 = v99 & 0x7F;
            if (v100)
              v103 = *(_QWORD *)(a2 - 16);
            else
              v103 = v102;
            if (v98)
              v104 = v97 + 1;
            else
              v104 = v97;
            v105 = (*(uint64_t (**)(_QWORD, char *, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v104, v98 - (v98 != 0));
            if (v103)
              v106 = (uint64_t *)((char *)v101 + 1);
            else
              v106 = v101;
            if (v105 <= (*(unsigned int (**)(_QWORD, uint64_t *, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v106, v103 - (v103 != 0)))
            {
              v118 = v9 + 24;
              do
              {
                a1 = v118;
                if (v118 >= a2)
                  break;
                v119 = (__int128 *)v374;
                if (v375 >= 0)
                  v119 = &v374;
                v120 = HIBYTE(v375) & 0x7F;
                if (v375 < 0)
                  v120 = *((_QWORD *)&v374 + 1);
                v121 = *(_BYTE *)(a1 + 23);
                v122 = v121 < 0;
                v123 = v121 >= 0 ? a1 : *(_QWORD *)a1;
                v124 = v121 & 0x7F;
                v125 = v122 ? *(_QWORD *)(a1 + 8) : v124;
                v126 = v120 ? (uint64_t)v119 + 1 : (uint64_t)v119;
                v127 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v126, v120 - (v120 != 0));
                v128 = v125 ? v123 + 1 : v123;
                v129 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v128, v125 - (v125 != 0));
                v118 = a1 + 24;
              }
              while (v127 <= v129);
            }
            else
            {
              v107 = v9 + 24;
              do
              {
                v108 = (char *)v374;
                if (v375 >= 0)
                  v108 = (char *)&v374;
                v109 = HIBYTE(v375) & 0x7F;
                if (v375 < 0)
                  v109 = *((_QWORD *)&v374 + 1);
                v110 = *(_BYTE *)(v107 + 23);
                v111 = v110 < 0;
                if (v110 >= 0)
                  v112 = v107;
                else
                  v112 = *(_QWORD *)v107;
                v113 = v110 & 0x7F;
                if (v111)
                  v114 = *(_QWORD *)(v107 + 8);
                else
                  v114 = v113;
                if (v109)
                  v115 = v108 + 1;
                else
                  v115 = v108;
                v116 = (*(uint64_t (**)(_QWORD, char *, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v115, v109 - (v109 != 0));
                if (v114)
                  v117 = v112 + 1;
                else
                  v117 = v112;
                v107 += 24;
              }
              while (v116 <= (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v117, v114 - (v114 != 0)));
              a1 = v107 - 24;
            }
            v130 = a2;
            if (a1 < a2)
            {
              v131 = v369;
              do
              {
                v132 = (char *)v374;
                if (v375 >= 0)
                  v132 = (char *)&v374;
                v133 = HIBYTE(v375) & 0x7F;
                if (v375 < 0)
                  v133 = *((_QWORD *)&v374 + 1);
                v134 = *((_BYTE *)v131 + 23);
                v135 = v134 < 0;
                if (v134 >= 0)
                  v136 = (uint64_t)v131;
                else
                  v136 = *v131;
                v137 = v134 & 0x7F;
                if (v135)
                  v138 = v131[1];
                else
                  v138 = v137;
                if (v133)
                  v139 = v132 + 1;
                else
                  v139 = v132;
                v140 = (*(uint64_t (**)(_QWORD, char *, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v139, v133 - (v133 != 0));
                if (v138)
                  v141 = v136 + 1;
                else
                  v141 = v136;
                v131 -= 3;
              }
              while (v140 > (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v141, v138 - (v138 != 0)));
              v130 = (unint64_t)(v131 + 3);
            }
            if (a1 < v130)
            {
              do
              {
                v142 = *(_OWORD *)a1;
                v373 = *(_QWORD *)(a1 + 16);
                v372 = v142;
                v143 = *(_OWORD *)v130;
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(v130 + 16);
                *(_OWORD *)a1 = v143;
                v144 = v372;
                *(_QWORD *)(v130 + 16) = v373;
                *(_OWORD *)v130 = v144;
                v145 = a1 + 24;
                do
                {
                  v146 = (char *)v374;
                  if (v375 >= 0)
                    v146 = (char *)&v374;
                  v147 = HIBYTE(v375) & 0x7F;
                  if (v375 < 0)
                    v147 = *((_QWORD *)&v374 + 1);
                  v148 = *(_BYTE *)(v145 + 23);
                  v149 = v148 < 0;
                  if (v148 >= 0)
                    v150 = v145;
                  else
                    v150 = *(_QWORD *)v145;
                  v151 = v148 & 0x7F;
                  if (v149)
                    v152 = *(_QWORD *)(v145 + 8);
                  else
                    v152 = v151;
                  if (v147)
                    v153 = v146 + 1;
                  else
                    v153 = v146;
                  v154 = (*(uint64_t (**)(_QWORD, char *, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v153, v147 - (v147 != 0));
                  if (v152)
                    v155 = v150 + 1;
                  else
                    v155 = v150;
                  v145 += 24;
                }
                while (v154 <= (*(unsigned int (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)*a3
                                                                                                  + 584))(*a3, v155, v152 - (v152 != 0)));
                a1 = v145 - 24;
                v156 = v130 - 24;
                do
                {
                  v157 = (char *)v374;
                  if (v375 >= 0)
                    v157 = (char *)&v374;
                  v158 = HIBYTE(v375) & 0x7F;
                  if (v375 < 0)
                    v158 = *((_QWORD *)&v374 + 1);
                  v159 = *(_BYTE *)(v156 + 23);
                  v160 = v159 < 0;
                  if (v159 >= 0)
                    v161 = v156;
                  else
                    v161 = *(_QWORD *)v156;
                  v162 = v159 & 0x7F;
                  if (v160)
                    v163 = *(_QWORD *)(v156 + 8);
                  else
                    v163 = v162;
                  if (v158)
                    v164 = v157 + 1;
                  else
                    v164 = v157;
                  v165 = (*(uint64_t (**)(_QWORD, char *, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v164, v158 - (v158 != 0));
                  if (v163)
                    v166 = v161 + 1;
                  else
                    v166 = v161;
                  v156 -= 24;
                }
                while (v165 > (*(unsigned int (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v166, v163 - (v163 != 0)));
                v130 = v156 + 24;
              }
              while (a1 < v130);
              a2 = v366;
            }
            v167 = (__int128 *)(a1 - 24);
            if (a1 - 24 == v9)
            {
              if (*(char *)(a1 - 1) < 0)
                operator delete(*(void **)v9);
            }
            else
            {
              if (*(char *)(v9 + 23) < 0)
                operator delete(*(void **)v9);
              v168 = *v167;
              *(_QWORD *)(v9 + 16) = *(_QWORD *)(a1 - 8);
              *(_OWORD *)v9 = v168;
              *(_BYTE *)(a1 - 1) = 0;
              *(_BYTE *)(a1 - 24) = 0;
            }
            a5 = 0;
            v169 = v374;
            *(_QWORD *)(a1 - 8) = v375;
            *v167 = v169;
            continue;
          }
        }
        v33 = 0;
        v34 = *(_OWORD *)v9;
        v375 = *(_QWORD *)(v9 + 16);
        v374 = v34;
        *(_QWORD *)(v9 + 8) = 0;
        *(_QWORD *)(v9 + 16) = 0;
        *(_QWORD *)v9 = 0;
        do
        {
          v35 = *(_QWORD *)(v9 + v33 + 24);
          v36 = *(_BYTE *)(v9 + v33 + 47);
          v37 = v36;
          if (v36 >= 0)
            v35 = v9 + v33 + 24;
          v38 = *(_QWORD *)(v9 + v33 + 32);
          v39 = v36 & 0x7F;
          if (v37 >= 0)
            v38 = v39;
          if (v375 >= 0)
            v40 = (char *)&v374;
          else
            v40 = (char *)v374;
          if (v375 >= 0)
            v41 = HIBYTE(v375) & 0x7F;
          else
            v41 = *((_QWORD *)&v374 + 1);
          if (v38)
            v42 = v35 + 1;
          else
            v42 = v35;
          v43 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v42, v38 - (v38 != 0));
          if (v41)
            v44 = v40 + 1;
          else
            v44 = v40;
          v33 += 24;
        }
        while (v43 > (*(unsigned int (**)(_QWORD, char *, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v44, v41 - (v41 != 0)));
        v45 = v9 + v33;
        v46 = v369;
        if (v33 == 24)
        {
          v57 = v369;
          while (1)
          {
            v56 = (unint64_t)(v57 + 3);
            if (v45 >= (unint64_t)(v57 + 3))
              break;
            v58 = *((_BYTE *)v57 + 23);
            v59 = v58 < 0;
            v60 = *v57;
            if (v58 >= 0)
              v60 = (uint64_t)v57;
            v61 = v58 & 0x7F;
            if (v59)
              v61 = v57[1];
            if (v375 >= 0)
              v62 = (char *)&v374;
            else
              v62 = (char *)v374;
            if (v375 >= 0)
              v63 = HIBYTE(v375) & 0x7F;
            else
              v63 = *((_QWORD *)&v374 + 1);
            if (v61)
              v64 = v60 + 1;
            else
              v64 = v60;
            v65 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v64, v61 - (v61 != 0));
            if (v63)
              v66 = v62 + 1;
            else
              v66 = v62;
            v57 -= 3;
            if (v65 > (*(unsigned int (**)(_QWORD, char *, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v66, v63 - (v63 != 0)))
            {
              v56 = (unint64_t)(v57 + 3);
              break;
            }
          }
        }
        else
        {
          do
          {
            v47 = *((_BYTE *)v46 + 23);
            v48 = v47 < 0;
            v49 = *v46;
            if (v47 >= 0)
              v49 = (uint64_t)v46;
            v50 = v47 & 0x7F;
            if (v48)
              v50 = v46[1];
            if (v375 >= 0)
              v51 = (char *)&v374;
            else
              v51 = (char *)v374;
            if (v375 >= 0)
              v52 = HIBYTE(v375) & 0x7F;
            else
              v52 = *((_QWORD *)&v374 + 1);
            if (v50)
              v53 = v49 + 1;
            else
              v53 = v49;
            v54 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v53, v50 - (v50 != 0));
            if (v52)
              v55 = v51 + 1;
            else
              v55 = v51;
            v46 -= 3;
          }
          while (v54 <= (*(unsigned int (**)(_QWORD, char *, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v55, v52 - (v52 != 0)));
          v56 = (unint64_t)(v46 + 3);
        }
        a1 = v45;
        if (v45 < v56)
        {
          v67 = v56;
          do
          {
            v68 = *(_OWORD *)a1;
            v373 = *(_QWORD *)(a1 + 16);
            v372 = v68;
            v69 = *(_OWORD *)v67;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v67 + 16);
            *(_OWORD *)a1 = v69;
            v70 = a1 + 24;
            v71 = v372;
            *(_QWORD *)(v67 + 16) = v373;
            *(_OWORD *)v67 = v71;
            do
            {
              v72 = *(_BYTE *)(v70 + 23);
              v73 = v72 < 0;
              v74 = *(_QWORD *)v70;
              if (v72 >= 0)
                v74 = v70;
              v75 = v72 & 0x7F;
              if (v73)
                v75 = *(_QWORD *)(v70 + 8);
              if (v375 >= 0)
                v76 = (char *)&v374;
              else
                v76 = (char *)v374;
              if (v375 >= 0)
                v77 = HIBYTE(v375) & 0x7F;
              else
                v77 = *((_QWORD *)&v374 + 1);
              if (v75)
                v78 = v74 + 1;
              else
                v78 = v74;
              v79 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v78, v75 - (v75 != 0));
              if (v77)
                v80 = v76 + 1;
              else
                v80 = v76;
              v70 += 24;
            }
            while (v79 > (*(unsigned int (**)(_QWORD, char *, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v80, v77 - (v77 != 0)));
            a1 = v70 - 24;
            v81 = v67 - 24;
            do
            {
              v82 = *(_BYTE *)(v81 + 23);
              v83 = v82 < 0;
              v84 = *(_QWORD *)v81;
              if (v82 >= 0)
                v84 = v81;
              v85 = v82 & 0x7F;
              if (v83)
                v85 = *(_QWORD *)(v81 + 8);
              if (v375 >= 0)
                v86 = (char *)&v374;
              else
                v86 = (char *)v374;
              if (v375 >= 0)
                v87 = HIBYTE(v375) & 0x7F;
              else
                v87 = *((_QWORD *)&v374 + 1);
              if (v85)
                v88 = v84 + 1;
              else
                v88 = v84;
              v89 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v88, v85 - (v85 != 0));
              if (v87)
                v90 = v86 + 1;
              else
                v90 = v86;
              v81 -= 24;
            }
            while (v89 <= (*(unsigned int (**)(_QWORD, char *, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v90, v87 - (v87 != 0)));
            v67 = v81 + 24;
          }
          while (a1 < v67);
        }
        v91 = (__int128 *)(a1 - 24);
        if (a1 - 24 == v368)
        {
          if (*(char *)(a1 - 1) < 0)
            operator delete(*(void **)v368);
        }
        else
        {
          if (*(char *)(v368 + 23) < 0)
            operator delete(*(void **)v368);
          v92 = *v91;
          *(_QWORD *)(v368 + 16) = *(_QWORD *)(a1 - 8);
          *(_OWORD *)v368 = v92;
          *(_BYTE *)(a1 - 1) = 0;
          *(_BYTE *)(a1 - 24) = 0;
        }
        v93 = v374;
        *(_QWORD *)(a1 - 8) = v375;
        *v91 = v93;
        v94 = v45 >= v56;
        a2 = v366;
        if (!v94)
        {
LABEL_134:
          sub_22E637CF4(v368, a1 - 24, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v95 = sub_22E6398DC(v368, a1 - 24, a3);
        if (!sub_22E6398DC(a1, v366, a3))
        {
          if (v95)
            continue;
          goto LABEL_134;
        }
        a2 = a1 - 24;
        a1 = v368;
        if (!v95)
          goto LABEL_2;
        return;
    }
  }
}

__n128 sub_22E6392E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, _QWORD *a6)
{
  __n128 v12;
  char v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  __n128 result;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  char v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v12 = sub_22E639C74(a1, a2, a3, (uint64_t *)a4, a6);
  v13 = *((_BYTE *)a5 + 23);
  v14 = v13 < 0;
  v15 = (uint64_t *)*a5;
  if (v13 >= 0)
    v15 = a5;
  v16 = v13 & 0x7F;
  if (v14)
    v16 = a5[1];
  v17 = *(_BYTE *)(a4 + 23);
  v18 = v17 < 0;
  if (v17 >= 0)
    v19 = a4;
  else
    v19 = *(_QWORD *)a4;
  v20 = v17 & 0x7F;
  if (v18)
    v21 = *(_QWORD *)(a4 + 8);
  else
    v21 = v20;
  if (v16)
    v22 = (uint64_t *)((char *)v15 + 1);
  else
    v22 = v15;
  v23 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, __n128))(*(_QWORD *)*a6 + 584))(*a6, v22, v16 - (v16 != 0), v12);
  if (v21)
    v24 = v19 + 1;
  else
    v24 = v19;
  if (v23 > (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a6 + 584))(*a6, v24, v21 - (v21 != 0)))
  {
    v26 = *(_QWORD *)(a4 + 16);
    v27 = *(_OWORD *)a4;
    v28 = a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)(a4 + 16) = v28;
    *(_OWORD *)a5 = v27;
    a5[2] = v26;
    v29 = *(_BYTE *)(a4 + 23);
    v30 = v29 < 0;
    v31 = *(_QWORD *)a4;
    if (v29 >= 0)
      v31 = a4;
    v32 = v29 & 0x7F;
    if (v30)
      v32 = *(_QWORD *)(a4 + 8);
    v33 = *(_BYTE *)(a3 + 23);
    v34 = v33 < 0;
    if (v33 >= 0)
      v35 = a3;
    else
      v35 = *(_QWORD *)a3;
    v36 = v33 & 0x7F;
    if (v34)
      v37 = *(_QWORD *)(a3 + 8);
    else
      v37 = v36;
    if (v32)
      v38 = v31 + 1;
    else
      v38 = v31;
    v39 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a6 + 584))(*a6, v38, v32 - (v32 != 0));
    if (v37)
      v40 = v35 + 1;
    else
      v40 = v35;
    if (v39 > (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a6 + 584))(*a6, v40, v37 - (v37 != 0)))
    {
      v41 = *(_QWORD *)(a3 + 16);
      v42 = *(_OWORD *)a3;
      v43 = *(_QWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)(a3 + 16) = v43;
      *(_OWORD *)a4 = v42;
      *(_QWORD *)(a4 + 16) = v41;
      v44 = *(_BYTE *)(a3 + 23);
      v45 = v44 < 0;
      v46 = *(_QWORD *)a3;
      if (v44 >= 0)
        v46 = a3;
      v47 = v44 & 0x7F;
      if (v45)
        v47 = *(_QWORD *)(a3 + 8);
      v48 = *(_BYTE *)(a2 + 23);
      v49 = v48 < 0;
      if (v48 >= 0)
        v50 = a2;
      else
        v50 = *(_QWORD *)a2;
      v51 = v48 & 0x7F;
      if (v49)
        v52 = *(_QWORD *)(a2 + 8);
      else
        v52 = v51;
      if (v47)
        v53 = v46 + 1;
      else
        v53 = v46;
      v54 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a6 + 584))(*a6, v53, v47 - (v47 != 0));
      if (v52)
        v55 = v50 + 1;
      else
        v55 = v50;
      if (v54 > (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a6 + 584))(*a6, v55, v52 - (v52 != 0)))
      {
        v56 = *(_QWORD *)(a2 + 16);
        v57 = *(_OWORD *)a2;
        v58 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = v58;
        *(_OWORD *)a3 = v57;
        *(_QWORD *)(a3 + 16) = v56;
        v59 = *(_BYTE *)(a2 + 23);
        v60 = v59 < 0;
        v61 = *(_QWORD *)a2;
        if (v59 >= 0)
          v61 = a2;
        v62 = v59 & 0x7F;
        if (v60)
          v62 = *(_QWORD *)(a2 + 8);
        v63 = *(_BYTE *)(a1 + 23);
        v64 = v63 < 0;
        if (v63 >= 0)
          v65 = a1;
        else
          v65 = *(_QWORD *)a1;
        v66 = v63 & 0x7F;
        if (v64)
          v67 = *(_QWORD *)(a1 + 8);
        else
          v67 = v66;
        if (v62)
          v68 = v61 + 1;
        else
          v68 = v61;
        v69 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a6 + 584))(*a6, v68, v62 - (v62 != 0));
        if (v67)
          v70 = v65 + 1;
        else
          v70 = v65;
        if (v69 > (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a6 + 584))(*a6, v70, v67 - (v67 != 0)))
        {
          v71 = *(_QWORD *)(a1 + 16);
          result = *(__n128 *)a1;
          v72 = *(_QWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v72;
          *(__n128 *)a2 = result;
          *(_QWORD *)(a2 + 16) = v71;
        }
      }
    }
  }
  return result;
}

uint64_t sub_22E6395D0(uint64_t *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  char v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  unsigned int v20;
  char v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  BOOL v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t result;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  BOOL v41;
  uint64_t *v42;
  uint64_t v43;
  char v44;
  BOOL v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  char v58;
  BOOL v59;
  uint64_t *v60;
  uint64_t v61;
  char v62;
  BOOL v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  unsigned int v68;
  uint64_t *v69;
  uint64_t v70;

  v8 = *((_BYTE *)a2 + 23);
  v9 = v8 < 0;
  v10 = (uint64_t *)*a2;
  if (v8 >= 0)
    v10 = a2;
  v11 = v8 & 0x7F;
  if (v9)
    v11 = a2[1];
  v12 = *((_BYTE *)a1 + 23);
  v13 = v12 < 0;
  if (v12 >= 0)
    v14 = a1;
  else
    v14 = (uint64_t *)*a1;
  v15 = v12 & 0x7F;
  if (v13)
    v16 = a1[1];
  else
    v16 = v15;
  if (v11)
    v17 = (uint64_t *)((char *)v10 + 1);
  else
    v17 = v10;
  v18 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(*(_QWORD *)*a4 + 584))(*a4, v17, v11 - (v11 != 0));
  if (v16)
    v19 = (uint64_t *)((char *)v14 + 1);
  else
    v19 = v14;
  v20 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(*(_QWORD *)*a4 + 584))(*a4, v19, v16 - (v16 != 0));
  v21 = *((_BYTE *)a3 + 23);
  v22 = v21 < 0;
  v23 = (uint64_t *)*a3;
  if (v21 >= 0)
    v23 = a3;
  v24 = v21 & 0x7F;
  if (v22)
    v24 = a3[1];
  v25 = *((_BYTE *)a2 + 23);
  v26 = v25 < 0;
  if (v25 >= 0)
    v27 = a2;
  else
    v27 = (uint64_t *)*a2;
  v28 = v25 & 0x7F;
  if (v26)
    v29 = a2[1];
  else
    v29 = v28;
  if (v24)
    v30 = (uint64_t *)((char *)v23 + 1);
  else
    v30 = v23;
  v31 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(*(_QWORD *)*a4 + 584))(*a4, v30, v24 - (v24 != 0));
  if (v29)
    v32 = (uint64_t *)((char *)v27 + 1);
  else
    v32 = v27;
  result = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(*(_QWORD *)*a4 + 584))(*a4, v32, v29 - (v29 != 0));
  if (v18 <= v20)
  {
    if (v31 > result)
    {
      v37 = a2[2];
      v38 = *(_OWORD *)a2;
      v39 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v39;
      *(_OWORD *)a3 = v38;
      a3[2] = v37;
      v40 = *((_BYTE *)a2 + 23);
      v41 = v40 < 0;
      v42 = (uint64_t *)*a2;
      if (v40 >= 0)
        v42 = a2;
      v43 = v40 & 0x7F;
      if (v41)
        v43 = a2[1];
      v44 = *((_BYTE *)a1 + 23);
      v45 = v44 < 0;
      if (v44 >= 0)
        v46 = a1;
      else
        v46 = (uint64_t *)*a1;
      v47 = v44 & 0x7F;
      if (v45)
        v48 = a1[1];
      else
        v48 = v47;
      if (v43)
        v49 = (uint64_t *)((char *)v42 + 1);
      else
        v49 = v42;
      v50 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(*(_QWORD *)*a4 + 584))(*a4, v49, v43 - (v43 != 0));
      if (v48)
        v51 = (uint64_t *)((char *)v46 + 1);
      else
        v51 = v46;
      result = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(*(_QWORD *)*a4 + 584))(*a4, v51, v48 - (v48 != 0));
      if (v50 > result)
      {
        v52 = a1[2];
        v53 = *(_OWORD *)a1;
        v54 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[2] = v54;
        *(_OWORD *)a2 = v53;
        a2[2] = v52;
      }
    }
  }
  else
  {
    if (v31 > result)
    {
      v34 = a1[2];
      v35 = *(_OWORD *)a1;
      v36 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v36;
LABEL_73:
      *(_OWORD *)a3 = v35;
      a3[2] = v34;
      return result;
    }
    v55 = a1[2];
    v56 = *(_OWORD *)a1;
    v57 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v57;
    *(_OWORD *)a2 = v56;
    a2[2] = v55;
    v58 = *((_BYTE *)a3 + 23);
    v59 = v58 < 0;
    v60 = (uint64_t *)*a3;
    if (v58 >= 0)
      v60 = a3;
    v61 = v58 & 0x7F;
    if (v59)
      v61 = a3[1];
    v62 = *((_BYTE *)a2 + 23);
    v63 = v62 < 0;
    if (v62 >= 0)
      v64 = a2;
    else
      v64 = (uint64_t *)*a2;
    v65 = v62 & 0x7F;
    if (v63)
      v66 = a2[1];
    else
      v66 = v65;
    if (v61)
      v67 = (uint64_t *)((char *)v60 + 1);
    else
      v67 = v60;
    v68 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(*(_QWORD *)*a4 + 584))(*a4, v67, v61 - (v61 != 0));
    if (v66)
      v69 = (uint64_t *)((char *)v64 + 1);
    else
      v69 = v64;
    result = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(*(_QWORD *)*a4 + 584))(*a4, v69, v66 - (v66 != 0));
    if (v68 > result)
    {
      v34 = a2[2];
      v35 = *(_OWORD *)a2;
      v70 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v70;
      goto LABEL_73;
    }
  }
  return result;
}

BOOL sub_22E6398DC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  char v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  char *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v9 = a2 - 24;
      v8 = *(_QWORD *)(a2 - 24);
      v10 = *(_BYTE *)(a2 - 1);
      v11 = v10;
      if (v10 >= 0)
        v8 = a2 - 24;
      v12 = v10 & 0x7F;
      if (v11 < 0)
        v12 = *(_QWORD *)(a2 - 16);
      v13 = *(_BYTE *)(a1 + 23);
      v14 = v13 < 0;
      if (v13 >= 0)
        v15 = a1;
      else
        v15 = *(_QWORD *)a1;
      v16 = v13 & 0x7F;
      if (v14)
        v17 = *(_QWORD *)(a1 + 8);
      else
        v17 = v16;
      if (v12)
        v18 = v8 + 1;
      else
        v18 = v8;
      v19 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v18, v12 - (v12 != 0));
      if (v17)
        v20 = v15 + 1;
      else
        v20 = v15;
      if (v19 > (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v20, v17 - (v17 != 0)))
      {
        v21 = *(_QWORD *)(a1 + 16);
        v22 = *(_OWORD *)a1;
        v23 = *(_QWORD *)(v9 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *(_QWORD *)(a1 + 16) = v23;
        *(_OWORD *)v9 = v22;
        *(_QWORD *)(v9 + 16) = v21;
      }
      return 1;
    case 3uLL:
      sub_22E6395D0((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      sub_22E639C74(a1, a1 + 24, a1 + 48, (uint64_t *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      sub_22E6392E0(a1, a1 + 24, a1 + 48, a1 + 72, (uint64_t *)(a2 - 24), a3);
      return 1;
    default:
      v24 = a1 + 48;
      sub_22E6395D0((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48), a3);
      v25 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v26 = 0;
      v27 = 0;
      v53 = a2;
      break;
  }
  while (1)
  {
    v28 = *(_BYTE *)(v25 + 23);
    v29 = v28 < 0;
    v30 = *(_QWORD *)v25;
    if (v28 >= 0)
      v30 = v25;
    v31 = v28 & 0x7F;
    if (v29)
      v31 = *(_QWORD *)(v25 + 8);
    v32 = *(_BYTE *)(v24 + 23);
    v33 = v32 < 0;
    v34 = v32 >= 0 ? v24 : *(_QWORD *)v24;
    v35 = v32 & 0x7F;
    v36 = v33 ? *(_QWORD *)(v24 + 8) : v35;
    v37 = v31 ? v30 + 1 : v30;
    v38 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v37, v31 - (v31 != 0));
    v39 = v36 ? v34 + 1 : v34;
    if (v38 > (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v39, v36 - (v36 != 0)))break;
    v52 = v53;
LABEL_65:
    v24 = v25;
    v26 += 24;
    v25 += 24;
    if (v25 == v52)
      return 1;
  }
  v54 = *(_OWORD *)v25;
  v55 = *(_QWORD *)(v25 + 16);
  *(_QWORD *)(v25 + 8) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  *(_QWORD *)v25 = 0;
  v40 = v26;
  do
  {
    v41 = a1 + v40;
    v42 = (void **)(a1 + v40 + 72);
    if (*(char *)(a1 + v40 + 95) < 0)
      operator delete(*v42);
    *(_OWORD *)v42 = *(_OWORD *)(v41 + 48);
    *(_QWORD *)(a1 + v40 + 88) = *(_QWORD *)(v41 + 64);
    *(_BYTE *)(v41 + 71) = 0;
    *(_BYTE *)(v41 + 48) = 0;
    if (v40 == -48)
    {
      v51 = a1;
      goto LABEL_64;
    }
    v43 = (char *)v54;
    if (v55 >= 0)
      v43 = (char *)&v54;
    v44 = HIBYTE(v55) & 0x7F;
    if (v55 < 0)
      v44 = *((_QWORD *)&v54 + 1);
    v45 = *(_BYTE *)(a1 + v40 + 47);
    if (v45 >= 0)
      v46 = a1 + v40 + 24;
    else
      v46 = *(_QWORD *)(a1 + v40 + 24);
    if (v45 >= 0)
      v47 = v45 & 0x7F;
    else
      v47 = *(_QWORD *)(a1 + v40 + 32);
    if (v44)
      v48 = v43 + 1;
    else
      v48 = v43;
    v49 = (*(uint64_t (**)(_QWORD, char *, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v48, v44 - (v44 != 0));
    if (v47)
      v50 = v46 + 1;
    else
      v50 = v46;
    v40 -= 24;
  }
  while (v49 > (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 584))(*a3, v50, v47 - (v47 != 0)));
  v51 = a1 + v40 + 72;
  if (*(char *)(a1 + v40 + 95) < 0)
    operator delete(*(void **)v51);
LABEL_64:
  v52 = v53;
  *(_OWORD *)v51 = v54;
  *(_QWORD *)(v51 + 16) = v55;
  if (++v27 != 8)
    goto LABEL_65;
  return v25 + 24 == v53;
}

__n128 sub_22E639C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  char v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  __n128 result;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  sub_22E6395D0((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3, a5);
  v10 = *((_BYTE *)a4 + 23);
  v11 = v10 < 0;
  v12 = (uint64_t *)*a4;
  if (v10 >= 0)
    v12 = a4;
  v13 = v10 & 0x7F;
  if (v11)
    v13 = a4[1];
  v14 = *(_BYTE *)(a3 + 23);
  v15 = v14 < 0;
  if (v14 >= 0)
    v16 = a3;
  else
    v16 = *(_QWORD *)a3;
  v17 = v14 & 0x7F;
  if (v15)
    v18 = *(_QWORD *)(a3 + 8);
  else
    v18 = v17;
  if (v13)
    v19 = (uint64_t *)((char *)v12 + 1);
  else
    v19 = v12;
  v20 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(*(_QWORD *)*a5 + 584))(*a5, v19, v13 - (v13 != 0));
  if (v18)
    v21 = v16 + 1;
  else
    v21 = v16;
  if (v20 > (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a5 + 584))(*a5, v21, v18 - (v18 != 0)))
  {
    v23 = *(_QWORD *)(a3 + 16);
    v24 = *(_OWORD *)a3;
    v25 = a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v25;
    *(_OWORD *)a4 = v24;
    a4[2] = v23;
    v26 = *(_BYTE *)(a3 + 23);
    v27 = v26 < 0;
    v28 = *(_QWORD *)a3;
    if (v26 >= 0)
      v28 = a3;
    v29 = v26 & 0x7F;
    if (v27)
      v29 = *(_QWORD *)(a3 + 8);
    v30 = *(_BYTE *)(a2 + 23);
    v31 = v30 < 0;
    if (v30 >= 0)
      v32 = a2;
    else
      v32 = *(_QWORD *)a2;
    v33 = v30 & 0x7F;
    if (v31)
      v34 = *(_QWORD *)(a2 + 8);
    else
      v34 = v33;
    if (v29)
      v35 = v28 + 1;
    else
      v35 = v28;
    v36 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a5 + 584))(*a5, v35, v29 - (v29 != 0));
    if (v34)
      v37 = v32 + 1;
    else
      v37 = v32;
    if (v36 > (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a5 + 584))(*a5, v37, v34 - (v34 != 0)))
    {
      v38 = *(_QWORD *)(a2 + 16);
      v39 = *(_OWORD *)a2;
      v40 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v40;
      *(_OWORD *)a3 = v39;
      *(_QWORD *)(a3 + 16) = v38;
      v41 = *(_BYTE *)(a2 + 23);
      v42 = v41 < 0;
      v43 = *(_QWORD *)a2;
      if (v41 >= 0)
        v43 = a2;
      v44 = v41 & 0x7F;
      if (v42)
        v44 = *(_QWORD *)(a2 + 8);
      v45 = *(_BYTE *)(a1 + 23);
      v46 = v45 < 0;
      if (v45 >= 0)
        v47 = a1;
      else
        v47 = *(_QWORD *)a1;
      v48 = v45 & 0x7F;
      if (v46)
        v49 = *(_QWORD *)(a1 + 8);
      else
        v49 = v48;
      if (v44)
        v50 = v43 + 1;
      else
        v50 = v43;
      v51 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a5 + 584))(*a5, v50, v44 - (v44 != 0));
      if (v49)
        v52 = v47 + 1;
      else
        v52 = v47;
      if (v51 > (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a5 + 584))(*a5, v52, v49 - (v49 != 0)))
      {
        v53 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v54 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v54;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v53;
      }
    }
  }
  return result;
}

uint64_t sub_22E639EB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)a1 != v2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(unsigned __int8 *)(a1 + 16);
    while (1)
    {
      v5 = *(_QWORD *)(v1 + 80);
      v6 = (v5 >> 17) & 1;
      if ((v5 & 0x20000) != 0)
        return v6;
      if ((*(_BYTE *)(v1 + 104) & 3) == 0)
        goto LABEL_8;
      if (!v4)
        break;
      v1 = 0;
LABEL_11:
      if (v1 == v2)
        return v6;
    }
    v4 = 1;
LABEL_8:
    v7 = sub_22E3CD31C((uint64_t *)(v1 + 104), v1);
    if (v7 == v3)
      v1 = 0;
    else
      v1 = v7;
    goto LABEL_11;
  }
  return 0;
}

void sub_22E639F38(_DWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  BOOL v3;

  a3[1] = 0u;
  *a3 = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *(_OWORD *)((char *)a3 + 58) = 0u;
  if (a2 != 7 || (*a1 == 1634100580 ? (v3 = *(_DWORD *)((char *)a1 + 3) == 1953264993) : (v3 = 0), !v3))
    llvm::StringRef::split();
}

unint64_t sub_22E63A6F4(_QWORD *a1)
{
  unint64_t first_not_of;
  unint64_t v3;
  unint64_t v5;

  first_not_of = llvm::StringRef::find_first_not_of();
  if (first_not_of >= a1[1])
    v3 = a1[1];
  else
    v3 = first_not_of;
  v5 = *a1 + v3;
  llvm::StringRef::find_last_not_of();
  return v5;
}

_QWORD *sub_22E63A780(uint64_t a1, _QWORD *a2, char *a3, uint64_t a4)
{
  _QWORD *result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int v14;
  int v15;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;

  v6 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v5 = v6;
  if (v6)
  {
    do
    {
      while (1)
      {
        v7 = v5;
        v8 = (char *)v5[4];
        v9 = v7[5];
        if (v9)
          break;
LABEL_11:
        if (a4)
        {
          v17 = a4 - 1;
          v18 = a3;
          while (v9)
          {
            v19 = *v8;
            v20 = *v18;
            if (v19 < v20)
              break;
            ++v8;
            ++v18;
            --v9;
            if (v20 < v19 || v17-- == 0)
              goto LABEL_26;
          }
          result = v7 + 1;
          v5 = (_QWORD *)v7[1];
          if (v5)
            continue;
        }
        goto LABEL_26;
      }
      v10 = v9 - 1;
      v11 = a4;
      v12 = a3;
      v13 = v8;
      while (v11)
      {
        v14 = *v12;
        v15 = *v13;
        if (v14 < v15)
          break;
        ++v12;
        ++v13;
        --v11;
        if (v15 < v14 || v10-- == 0)
          goto LABEL_11;
      }
      v5 = (_QWORD *)*v7;
      result = v7;
    }
    while (*v7);
  }
  else
  {
    v7 = result;
  }
LABEL_26:
  *a2 = v7;
  return result;
}

void sub_22E63A848(_QWORD *a1)
{
  _QWORD *v2;

  if (a1)
  {
    sub_22E63A848(*a1);
    sub_22E63A848(a1[1]);
    v2 = (_QWORD *)a1[4];
    if (v2 != a1 + 7)
      free(v2);
    operator delete(a1);
  }
}

BOOL sub_22E63A8A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 305)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

void sub_22E63A904(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  BOOL v10;
  unsigned int v11;
  uint64_t NumSubclassExtraOperandsDynamic;
  int v13;
  uint64_t Descriptor;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned int v20;
  uint64_t ParamAttrs;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  int v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  _BYTE v62[48];
  void *v63;
  uint64_t v64;
  _BYTE v65[64];
  char *v66;
  uint64_t v67;
  _QWORD v68[6];

  v68[4] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v4 = **(_QWORD **)(*(_QWORD *)(a2 + 24) + 16);
    v5 = (char *)v68;
    v66 = (char *)v68;
    v67 = 0x400000000;
    v56 = v4;
    while (1)
    {
      v6 = v2;
      v2 = *(_QWORD *)(v2 + 8);
      v7 = *(_QWORD *)(v6 + 24);
      v8 = *(unsigned __int8 *)(v7 + 16);
      if (v7)
        v9 = v8 == 5;
      else
        v9 = 0;
      if (v9)
      {
        if (*(_WORD *)(v7 + 18) == 49)
          sub_22E63A904(*(_QWORD *)(v6 + 24), a2);
        goto LABEL_35;
      }
      if (v8 >= 0x1C)
      {
        v10 = v8 - 33 > 0x33 || ((1 << (v8 - 33)) & 0x8000000000041) == 0;
        if (!v10 && v7 - 32 == v6 && (*(_QWORD *)v7 == v4 || !*(_QWORD *)(v7 + 8)))
          break;
      }
LABEL_35:
      if (!v2)
      {
        if (v66 != v5)
          free(v66);
        return;
      }
    }
    v63 = v65;
    v64 = 0x800000000;
    v59 = *(_QWORD *)(v7 + 64);
    v11 = *(_DWORD *)(a2 + 96);
    if (v8 == 84)
    {
      NumSubclassExtraOperandsDynamic = 0;
    }
    else if (v8 == 39)
    {
      NumSubclassExtraOperandsDynamic = llvm::CallBase::getNumSubclassExtraOperandsDynamic((llvm::CallBase *)v7);
    }
    else
    {
      NumSubclassExtraOperandsDynamic = 2;
    }
    v13 = *(_DWORD *)(v7 + 20);
    if (v13 < 0)
    {
      Descriptor = llvm::User::getDescriptor((llvm::User *)v7);
      v13 = *(_DWORD *)(v7 + 20);
      if (v13 < 0)
      {
        v41 = llvm::User::getDescriptor((llvm::User *)v7);
        v15 = v41 + v42;
        v13 = *(_DWORD *)(v7 + 20);
LABEL_20:
        if (((v15 - Descriptor) & 0xFFFFFFFF0) != 0)
        {
          v43 = *(_DWORD *)(llvm::User::getDescriptor((llvm::User *)v7) + 8);
          v44 = llvm::User::getDescriptor((llvm::User *)v7);
          v16 = *(_DWORD *)(v44 + v45 - 4) - v43;
          v13 = *(_DWORD *)(v7 + 20);
        }
        else
        {
          v16 = 0;
        }
        if (((-32 * NumSubclassExtraOperandsDynamic
                           + 32 * -v16
                           - 32 * (unint64_t)-(v13 & 0x7FFFFFF)
                           - 32) >> 5) < v11)
        {
LABEL_67:
          if (v63 != v65)
            free(v63);
          v4 = v56;
          goto LABEL_35;
        }
        if ((*(_WORD *)(a2 + 18) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments((llvm::Function *)a2);
          v17 = *(_QWORD **)(a2 + 88);
          if ((*(_WORD *)(a2 + 18) & 1) != 0)
          {
            llvm::Function::BuildLazyArguments((llvm::Function *)a2);
            v18 = *(_QWORD **)(a2 + 88);
LABEL_26:
            v19 = &v18[5 * *(_QWORD *)(a2 + 96)];
            if (v17 == v19)
            {
              v20 = 0;
LABEL_38:
              v23 = *(_DWORD *)(v7 + 20);
              v24 = v67;
              if (v67 + (unint64_t)v20 > HIDWORD(v67))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v24 = v67;
              }
              if (v20)
              {
                v25 = (uint64_t *)(v7 - 32 * (v23 & 0x7FFFFFF));
                v26 = &v66[8 * v24];
                v27 = 32 * v20;
                do
                {
                  v28 = *v25;
                  v25 += 4;
                  *(_QWORD *)v26 = v28;
                  v26 += 8;
                  v27 -= 32;
                }
                while (v27);
              }
              LODWORD(v67) = v24 + v20;
              v60 = v62;
              v61 = 0x100000000;
              llvm::CallBase::getOperandBundlesAsDefs();
              if (*(_BYTE *)(v7 + 16) == 84)
              {
                v55 = v5;
                v54 = (char *)v60;
                v29 = v61;
                v58 = 257;
                v30 = 0;
                if ((_DWORD)v61)
                {
                  v46 = 48 * v61;
                  v47 = (char *)v60 + 32;
                  do
                  {
                    v30 += (*v47 - *(v47 - 1)) >> 3;
                    v47 += 6;
                    v46 -= 48;
                  }
                  while (v46);
                }
                v31 = llvm::User::operator new((llvm::User *)0x50);
                if ((_DWORD)v29)
                {
                  v48 = 0;
                  v49 = 48 * v29;
                  v50 = v54 + 32;
                  v51 = v54 + 32;
                  v52 = 48 * v29;
                  do
                  {
                    v48 += (*v51 - *(v51 - 1)) >> 3;
                    v51 += 6;
                    v52 -= 48;
                  }
                  while (v52);
                  v53 = 0;
                  do
                  {
                    v53 += (*v50 - *(v50 - 1)) >> 3;
                    v50 += 6;
                    v49 -= 48;
                  }
                  while (v49);
                }
                llvm::Instruction::Instruction();
                *(_QWORD *)(v31 + 64) = 0;
                llvm::CallInst::init();
                v5 = v55;
              }
              else
              {
                if (a2)
                  v38 = *(_QWORD *)(a2 + 24);
                else
                  v38 = 0;
                v39 = *(_QWORD *)(v7 - 96);
                v40 = *(_QWORD *)(v7 - 64);
                v58 = 257;
                v31 = sub_22F24FA94(v38, a2, v39, v40, (uint64_t)v66, v67, (uint64_t)v60, v61);
              }
              LODWORD(v67) = 0;
              if (*(_BYTE *)(*(_QWORD *)v31 + 8) != 7)
                llvm::Value::takeName();
              llvm::Function::getContext((llvm::Function *)a2);
              llvm::AttributeList::getFnAttrs((llvm::AttributeList *)&v59);
              llvm::AttributeList::getRetAttrs((llvm::AttributeList *)&v59);
              *(_QWORD *)(v31 + 64) = llvm::AttributeList::get();
              *(_WORD *)(v31 + 18) = *(_WORD *)(v31 + 18) & 0xF003 | *(_WORD *)(v7 + 18) & 0xFFC;
              if (*(_QWORD *)(v7 + 8))
                llvm::Value::replaceAllUsesWith();
              if (*(_QWORD *)(v7 + 48))
              {
                v57 = *(_QWORD *)(v7 + 48);
                llvm::MetadataTracking::track();
                v32 = (uint64_t *)(v31 + 48);
                if (&v57 == v32)
                {
                  if (v57)
                    llvm::MetadataTracking::untrack();
                }
                else
                {
                  if (*v32)
                    llvm::MetadataTracking::untrack();
                  v33 = v57;
                  *v32 = v57;
                  if (v33)
                  {
                    llvm::MetadataTracking::retrack();
                    v57 = 0;
                  }
                }
              }
              llvm::Instruction::eraseFromParent((llvm::Instruction *)v7);
              v34 = (char *)v60;
              if ((_DWORD)v61)
              {
                v35 = 48 * v61;
                do
                {
                  v36 = &v34[v35];
                  v37 = *(void **)&v34[v35 - 24];
                  if (v37)
                  {
                    *((_QWORD *)v36 - 2) = v37;
                    operator delete(v37);
                  }
                  if (*(v36 - 25) < 0)
                    operator delete(*((void **)v36 - 6));
                  v35 -= 48;
                }
                while (v35);
                v34 = (char *)v60;
              }
              if (v34 != v62)
                free(v34);
            }
            else
            {
              v20 = 0;
              while (**(_QWORD **)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) + 32 * v20) == *v17)
              {
                ParamAttrs = llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v59);
                v22 = v64;
                if (v64 >= (unint64_t)HIDWORD(v64))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v22 = v64;
                }
                *((_QWORD *)v63 + v22) = ParamAttrs;
                LODWORD(v64) = v64 + 1;
                ++v20;
                v17 += 5;
                if (v17 == v19)
                  goto LABEL_38;
              }
            }
            goto LABEL_67;
          }
        }
        else
        {
          v17 = *(_QWORD **)(a2 + 88);
        }
        v18 = v17;
        goto LABEL_26;
      }
    }
    else
    {
      Descriptor = 0;
    }
    v15 = 0;
    goto LABEL_20;
  }
}

BOOL sub_22E63AF88(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v10;
  _DWORD *v11;
  unsigned int v12;

  v6 = a2 + 1;
  if (a2 + 1 > 1)
  {
    if ((a2 & 0x80000000) != 0)
    {
      v8 = -2 - a2;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-2 - a2) >> 6)) >> (-2 - a2)) & 1) != 0)
        v7 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v8);
      else
        v7 = (_DWORD *)sub_22F1E1134(a1, v8, 0);
    }
    else
    {
      v7 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * a2);
    }
  }
  else
  {
    v7 = *(_DWORD **)(a1 + 184);
  }
  if ((*v7 & 0x7FFFFFFFu) > a3)
    return 0;
  if (a2 == -2)
    return 1;
  if (v6 == *(_DWORD *)(a1 + 192))
  {
    v10 = *(_DWORD *)(a1 + 216);
  }
  else
  {
    if ((v6 & 0x80000000) != 0)
    {
      v12 = -3 - a2;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-3 - a2) >> 6)) >> (-3 - a2)) & 1) != 0)
        v11 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v12);
      else
        v11 = (_DWORD *)sub_22F1E1134(a1, v12, 0);
    }
    else
    {
      v11 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * v6);
    }
    v10 = *v11 & 0x7FFFFFFF;
  }
  return v10 > a3;
}

unint64_t sub_22E63B0B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
    return a2;
  v4 = *(_QWORD *)(a1 + 16392);
  v5 = sub_22F10ACF8(v3);
  return sub_22EF5B848(a1, (*(_DWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8) | v5) & 7 | v4, 0);
}

void sub_22E63B120(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  std::string *v6;
  std::string *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  std::string *v13;
  std::string *v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;

  v6 = __str;
  v8 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= a4)
  {
    v13 = *(std::string **)(a1 + 8);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)v8) >> 3) >= a4)
    {
      if (__str == a3)
      {
        v19 = *(std::string **)a1;
      }
      else
      {
        v19 = *(std::string **)a1;
        do
        {
          std::string::operator=(v8++, v6++);
          ++v19;
        }
        while (v6 != a3);
        v13 = *(std::string **)(a1 + 8);
      }
      while (v13 != v19)
      {
        if (SHIBYTE(v13[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v13[-1].__r_.__value_.__l.__data_);
        --v13;
      }
      *(_QWORD *)(a1 + 8) = v19;
    }
    else
    {
      v14 = (std::string *)((char *)__str + 8 * (((char *)v13 - (char *)v8) >> 3));
      if (v13 != v8)
      {
        v15 = 8 * (((char *)v13 - (char *)v8) >> 3);
        do
        {
          std::string::operator=(v8++, v6++);
          v15 -= 24;
        }
        while (v15);
        v8 = *(std::string **)(a1 + 8);
      }
      v16 = v8;
      if (v14 != a3)
      {
        v16 = v8;
        v17 = v8;
        do
        {
          if (SHIBYTE(v14->__r_.__value_.__r.__words[2]) < 0)
          {
            sub_22E3BB2B4(v17, v14->__r_.__value_.__l.__data_, v14->__r_.__value_.__l.__size_);
          }
          else
          {
            v18 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
            v17->__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
          }
          ++v14;
          ++v17;
          ++v16;
        }
        while (v14 != a3);
      }
      *(_QWORD *)(a1 + 8) = v16;
    }
  }
  else
  {
    sub_22E63B344((void **)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_38;
    v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v9 <= a4)
      v9 = a4;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555
        ? 0xAAAAAAAAAAAAAAALL
        : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_38:
      abort();
    v11 = 3 * v10;
    v12 = operator new(24 * v10);
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = &v12[v11];
    while (v6 != a3)
    {
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_22E3BB2B4(v12, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)v12 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v12[2] = *((_QWORD *)&v6->__r_.__value_.__l + 2);
      }
      ++v6;
      v12 += 3;
    }
    *(_QWORD *)(a1 + 8) = v12;
  }
}

void sub_22E63B344(void **a1)
{
  void **v1;
  void **v3;
  void *v4;

  v1 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_22E63B3B0(uint64_t a1, char a2, char a3)
{
  uint64_t GeneralCategory;
  unsigned int v5;
  uint64_t v7;

  *(_QWORD *)a1 = MEMORY[0x24BED8400] + 16;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) = a2 & 7 | (32 * (a3 & 3)) | *(_WORD *)(a1 + 10) & 0x8000;
  *(_QWORD *)(a1 + 64) = a1 + 80;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v5 = *(_DWORD *)(a1 + 72);
  if (v5 >= *(_DWORD *)(a1 + 76))
  {
    v7 = GeneralCategory;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    GeneralCategory = v7;
    v5 = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v5) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  return a1;
}

void sub_22E63B49C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E63B4DC(void ***a1)
{
  void **v1;
  llvm::ValueHandleBase *v2;
  llvm::ValueHandleBase *v4;
  void *v5;
  uint64_t v6;

  v1 = *a1;
  v2 = (llvm::ValueHandleBase *)**a1;
  if (v2)
  {
    v4 = (llvm::ValueHandleBase *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = *((_QWORD *)v4 - 1);
        v4 = (llvm::ValueHandleBase *)((char *)v4 - 24);
        if (v6 != -8192 && v6 != -4096 && v6 != 0)
          llvm::ValueHandleBase::RemoveFromUseList(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_22E63B564(void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_22E63B5D8(--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_22E63B5D8(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*(char *)(v2 + 47) < 0)
      operator delete(*(void **)(v2 + 24));
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

uint64_t sub_22E63B62C(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void *v16;
  size_t v17;
  size_t v18;
  double v19;
  void **v20;
  size_t v21;
  void *__p[2];
  char v23;
  unsigned __int8 *v24[3];
  __int16 v25;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 48))(*a2, MEMORY[0x24BED5A38]);
  v7 = *a2;
  *a2 = 0;
  if ((_DWORD)result)
  {
    v9 = *a3;
    v8 = (_DWORD *)a3[1];
    v10 = *(_QWORD *)(*a3 + 208);
    LODWORD(v8) = *v8;
    *(_DWORD *)(v10 + 312) = 0;
    *(_DWORD *)(v10 + 316) = (_DWORD)v8;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    v24[0] = (unsigned __int8 *)(v10 + 320);
    v24[1] = 0;
    v24[2] = (unsigned __int8 *)v10;
    v25 = 1;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 664) = 0;
    v11 = *(unsigned int *)(v10 + 776);
    if ((_DWORD)v11)
    {
      v12 = *(_QWORD *)(v10 + 768);
      v13 = 56 * v11;
      do
      {
        if (*(char *)(v12 + v13 - 9) < 0)
          operator delete(*(void **)(v12 + v13 - 32));
        v13 -= 56;
      }
      while (v13);
    }
    *(_DWORD *)(v10 + 776) = 0;
    v14 = *(_QWORD *)(v9 + 184);
    v15 = *(_BYTE *)(v14 + 831);
    if (v15 >= 0)
      v16 = (void *)(v14 + 808);
    else
      v16 = *(void **)(v14 + 808);
    v17 = *(_QWORD *)(v14 + 816);
    if (v15 >= 0)
      v18 = v15 & 0x7F;
    else
      v18 = v17;
    v19 = sub_22E3B89A8(v24, v16, v18);
    (*(void (**)(void **__return_ptr, uint64_t, double))(*(_QWORD *)v7 + 24))(__p, v7, v19);
    if (v23 >= 0)
      v20 = __p;
    else
      v20 = (void **)__p[0];
    if (v23 >= 0)
      v21 = v23 & 0x7F;
    else
      v21 = (size_t)__p[1];
    sub_22E3B89A8(v24, v20, v21);
    if (v23 < 0)
      operator delete(__p[0]);
    sub_22E3BB0B8((uint64_t)v24);
    *a1 = 0;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    *a1 = v7;
  }
  return result;
}

void sub_22E63B7B0(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0)
          operator delete(*(v4 - 4));
        v4 -= 6;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_22E63B828(llvm::StringMapImpl *a1, const void *a2, size_t a3, _OWORD *a4)
{
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v9 = *i;
  if (*i)
  {
    if (v9 != -8)
    {
      while (!v9 || v9 == -8)
      {
        v15 = i[1];
        ++i;
        v9 = v15;
      }
      return i;
    }
    --*((_DWORD *)a1 + 4);
  }
  v10 = sub_22E3CD3D4((uint64_t)a1 + 24, a3 + 25, 3);
  v11 = v10;
  v12 = v10 + 24;
  if (a3)
    memcpy((void *)(v10 + 24), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  *(_QWORD *)v11 = a3;
  *(_OWORD *)(v11 + 8) = *a4;
  *i = v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22E63B934(uint64_t a1, int a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t *v14;
  int v15;
  BOOL v16;
  unsigned int v18;

  if (a2)
  {
    v4 = *a3;
    v5 = a2 - 1;
    v6 = *((_DWORD *)a3 + 2);
    v7 = ((*a3 >> 4) ^ (*a3 >> 9)) & (a2 - 1);
    v8 = (uint64_t *)(a1 + 24 * v7);
    v9 = *v8;
    v10 = *((_DWORD *)v8 + 2);
    if (*a3 == *v8 && v6 == v10)
    {
      v12 = 1;
    }
    else
    {
      v14 = 0;
      v15 = 1;
      while (v9 || v10)
      {
        if (v14)
          v16 = 0;
        else
          v16 = v10 == 0;
        if (v16 && v9 == -1)
          v14 = v8;
        v18 = v7 + v15++;
        v7 = v18 & v5;
        v8 = (uint64_t *)(a1 + 24 * (v18 & v5));
        v9 = *v8;
        v10 = *((_DWORD *)v8 + 2);
        v12 = 1;
        if (v4 == *v8 && v6 == v10)
          goto LABEL_8;
      }
      v12 = 0;
      if (v14)
        v8 = v14;
    }
  }
  else
  {
    v8 = 0;
    v12 = 0;
  }
LABEL_8:
  *a4 = v8;
  return v12;
}

_QWORD *sub_22E63B9E8(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 24 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = 0;
        result[1] = 0;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 24 * v3;
      v13 = v4;
      do
      {
        if ((unint64_t)(*(_QWORD *)v13 + 1) > 1 || *((_DWORD *)v13 + 2) != 0)
        {
          v19 = 0;
          sub_22E63B934(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t *)v13, &v19);
          v15 = v19;
          v16 = *(_QWORD *)v13;
          *(_DWORD *)(v19 + 8) = *((_DWORD *)v13 + 2);
          *(_QWORD *)v15 = v16;
          *(_DWORD *)(v15 + 16) = *((_DWORD *)v13 + 4);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 = (llvm *)((char *)v13 + 24);
        v12 -= 24;
      }
      while (v12);
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(24 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v17 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v17)
    {
      v18 = 24 * v17;
      do
      {
        *result = 0;
        result[1] = 0;
        result += 3;
        v18 -= 24;
      }
      while (v18);
    }
  }
  return result;
}

char *sub_22E63BB48(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v2 - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - v3) >> 3) > v5)
    v5 = 0x5555555555555556 * (((_BYTE *)a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_22E3B3F8C();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v4];
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
  v11 = v10 + 24;
  if (v2 != v3)
  {
    do
    {
      v12 = *(_OWORD *)(v2 - 24);
      *((_QWORD *)v10 - 1) = *((_QWORD *)v2 - 1);
      *(_OWORD *)(v10 - 24) = v12;
      v10 -= 24;
      v2 -= 24;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v10;
  a1[1] = v11;
  a1[2] = &v9[24 * v8];
  if (v2)
    operator delete(v2);
  return v11;
}

void sub_22E63BC64()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22E63BC78(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FA66CE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_22E63BCB0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FA66CE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_22E63BCD0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  char v27;

  v3 = *a2;
  v25 = v3;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
  if (!*(_DWORD *)(*(_QWORD *)(v3 + 128) + 16))
  {
    v13 = *(_QWORD **)(a1 + 8);
    sub_22F275184((uint64_t)v13, &v25, (uint64_t)v26);
    if (v27)
    {
      v15 = (uint64_t *)v13[4];
      v14 = v13[5];
      if ((unint64_t)v15 >= v14)
      {
        v17 = (_QWORD *)v13[3];
        v18 = v15 - v17;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61)
          goto LABEL_35;
        v20 = v14 - (_QWORD)v17;
        if (v20 >> 2 > v19)
          v19 = v20 >> 2;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          if (v21 >> 61)
            sub_22E3B3F8C();
          v22 = (char *)operator new(8 * v21);
        }
        else
        {
          v22 = 0;
        }
        v23 = (uint64_t *)&v22[8 * v18];
        *v23 = v25;
        v16 = v23 + 1;
        if (v15 != v17)
        {
          do
          {
            v24 = *--v15;
            *--v23 = v24;
          }
          while (v15 != v17);
          v15 = (uint64_t *)v13[3];
        }
        v13[3] = v23;
        v13[4] = v16;
        v13[5] = &v22[8 * v21];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v15 = v25;
        v16 = v15 + 1;
      }
      v13[4] = v16;
    }
    v3 = v25;
  }
  result = sub_22E46A3A0(v3);
  if (result != v5)
  {
    v6 = result;
    v7 = v5;
    while (1)
    {
      v8 = *(_QWORD *)(a1 + 16);
      v9 = *(_QWORD *)(**(_QWORD **)(v6 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v9 + 8) & 0xF) != 0)
        v9 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v6 + 16));
      v10 = sub_22F10C2A4(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0));
      if (v10)
        v11 = (*(_DWORD *)(v10 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v10;
      else
        v11 = 0;
      v26[0] = v11;
      v12 = *(_QWORD *)(v8 + 24);
      if (!v12)
        break;
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 48))(v12, v26);
      v6 += 24;
      if (v6 == v7)
        return result;
    }
    sub_22E4A06C4();
LABEL_35:
    abort();
  }
  return result;
}

_QWORD *sub_22E63BEA4(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

uint64_t sub_22E63C00C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = *(unsigned int *)(result + 16);
  v3 = *(_DWORD *)(result + 8);
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(llvm **)result;
      v7 = 8 * v2;
      do
      {
        *(_QWORD *)v6 = -4096;
        v6 = (llvm *)((char *)v6 + 8);
        v7 -= 8;
      }
      while (v7);
    }
  }
  else
  {
    result = llvm::deallocate_buffer(*(llvm **)result, (void *)(8 * v2));
    if (v5)
    {
      v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      *(_DWORD *)(v1 + 16) = v9;
      result = MEMORY[0x23489D23C](8 * v9, 8);
      *(_QWORD *)v1 = result;
      *(_QWORD *)(v1 + 8) = 0;
      v10 = *(unsigned int *)(v1 + 16);
      if ((_DWORD)v10)
      {
        v11 = 8 * v10;
        do
        {
          *(_QWORD *)result = -4096;
          result += 8;
          v11 -= 8;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
      *(_DWORD *)(v1 + 16) = 0;
    }
  }
  return result;
}

void sub_22E63C10C(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5)
{
  const void **v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void **v16;
  uint64_t v17;
  const void **v18;
  const void **v19;
  const void **v20;
  __int128 v21;
  char v22;
  BOOL v23;
  const void *v24;
  size_t v25;
  size_t v26;
  const void *v27;
  size_t v28;
  size_t v29;
  int v30;
  BOOL v31;
  unint64_t v32;
  char v33;
  BOOL v34;
  char v35;
  BOOL v36;
  const void *v37;
  const void *v38;
  const void *v39;
  size_t v40;
  const void **v41;
  size_t v42;
  int v43;
  _BOOL4 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  const void *v48;
  const void *v49;

LABEL_1:
  v9 = a2 - 3;
  v10 = (const void **)a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v35 = *((_BYTE *)v10 + 23);
        v36 = v35 < 0;
        if (v35 >= 0)
          v37 = v10;
        else
          v37 = *v10;
        v38 = (const void *)(v35 & 0x7F);
        if (v36)
          v39 = v10[1];
        else
          v39 = v38;
        if (*((char *)a2 - 1) < 0)
        {
          v41 = (const void **)*(a2 - 3);
          v40 = (size_t)*(a2 - 2);
        }
        else
        {
          v40 = *((unsigned __int8 *)a2 - 1);
          v41 = a2 - 3;
        }
        if ((unint64_t)v39 >= v40)
          v42 = v40;
        else
          v42 = (size_t)v39;
        v43 = memcmp(v41, v37, v42);
        v44 = v40 < (unint64_t)v39;
        if (v43)
          v44 = v43 < 0;
        if (v44)
        {
          v49 = v10[2];
          v47 = *(_OWORD *)v10;
          v45 = *(_OWORD *)v9;
          v10[2] = *(a2 - 1);
          *(_OWORD *)v10 = v45;
          *(_OWORD *)v9 = v47;
          *(a2 - 1) = v49;
        }
        return;
      case 3uLL:
        sub_22E63C85C(v10, v10 + 3, a2 - 3);
        return;
      case 4uLL:
        sub_22E63D3CC((uint64_t)v10, (__int128 *)(v10 + 3), (__int128 *)v10 + 3, (__int128 *)(a2 - 3));
        return;
      case 5uLL:
        sub_22E63D588((uint64_t)v10, (uint64_t)(v10 + 3), (uint64_t)(v10 + 6), (uint64_t)(v10 + 9), (uint64_t)(a2 - 3));
        return;
      default:
        if (v13 <= 575)
        {
          if ((a5 & 1) != 0)
            sub_22E63C53C((uint64_t)v10, a2);
          else
            sub_22E63C6E0(v10, a2);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[3 * (v14 >> 1)];
          if ((unint64_t)v13 < 0xC01)
          {
            sub_22E63C85C(&v10[3 * v15], v10, a2 - 3);
            if ((a5 & 1) != 0)
              goto LABEL_25;
          }
          else
          {
            sub_22E63C85C(v10, &v10[3 * v15], a2 - 3);
            v17 = 3 * v15;
            v18 = &v10[3 * v15 - 3];
            sub_22E63C85C(v10 + 3, v18, a2 - 6);
            v19 = v10 + 6;
            v20 = &v10[v17 + 3];
            sub_22E63C85C(v19, v20, a2 - 9);
            sub_22E63C85C(v18, v16, v20);
            v48 = *(const void **)(a1 + 16);
            v46 = *(_OWORD *)a1;
            v21 = *(_OWORD *)v16;
            *(_QWORD *)(a1 + 16) = v16[2];
            *(_OWORD *)a1 = v21;
            v16[2] = v48;
            *(_OWORD *)v16 = v46;
            if ((a5 & 1) != 0)
              goto LABEL_25;
          }
          v22 = *(_BYTE *)(a1 + 23);
          v23 = v22 < 0;
          if (v22 >= 0)
            v24 = (const void *)a1;
          else
            v24 = *(const void **)a1;
          v25 = v22 & 0x7F;
          if (v23)
            v26 = *(_QWORD *)(a1 + 8);
          else
            v26 = v25;
          if (*(char *)(a1 - 1) < 0)
          {
            v27 = *(const void **)(a1 - 24);
            v28 = *(_QWORD *)(a1 - 16);
          }
          else
          {
            v27 = (const void *)(a1 - 24);
            v28 = *(unsigned __int8 *)(a1 - 1);
          }
          if (v26 >= v28)
            v29 = v28;
          else
            v29 = v26;
          v30 = memcmp(v27, v24, v29);
          v31 = v28 < v26;
          if (v30)
            v31 = v30 < 0;
          if (!v31)
          {
            v10 = sub_22E63CAD8((const void **)a1, a2);
            goto LABEL_30;
          }
LABEL_25:
          v32 = sub_22E63CDFC((__int128 *)a1, (uint64_t)a2);
          if ((v33 & 1) == 0)
            goto LABEL_28;
          v34 = sub_22E63D0EC(a1, v32);
          v10 = (const void **)(v32 + 24);
          if (!sub_22E63D0EC(v32 + 24, (uint64_t)a2))
          {
            v11 = v12 + 1;
            if (v34)
              continue;
LABEL_28:
            sub_22E63C10C(a1, v32, a3, -v12, a5 & 1);
            v10 = (const void **)(v32 + 24);
LABEL_30:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (const void **)v32;
          if (v34)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
          sub_22E63D7CC((uint64_t)v10, (__int128 *)a2, (__int128 *)a2, a3);
        return;
    }
  }
}

  v7 = (uint64_t)(a2 - 1);
  v151 = a2 - 3;
  v152 = a2 - 2;
  v150 = (const void **)a2 - 3;
  v8 = a1;
  v156 = (unint64_t)a2;
  v153 = a2 - 1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v81 = (const void *)*((_QWORD *)a2 - 2);
        v82 = *((_QWORD *)a2 - 1);
        v83 = a2 - 1;
        if (sub_22E71FB18(v81, v82, *(void **)v8, *(_QWORD *)(v8 + 8)))
        {
          v160 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v83;
          *v83 = v160;
        }
        return;
      case 3:
        sub_22E71FB78((__int128 *)v8, (__int128 *)(v8 + 16), (__int128 *)v7);
        return;
      case 4:
        sub_22E71FE58(v8, v8 + 16, v8 + 32, v7);
        return;
      case 5:
        sub_22E71FEF4(v8, v8 + 16, v8 + 32, v8 + 48, v7);
        return;
      default:
        if (v9 <= 383)
        {
          v84 = (_OWORD *)(v8 + 16);
          v86 = (_OWORD *)v8 == a2 || v84 == a2;
          if ((a4 & 1) != 0)
          {
            if (v86)
              return;
            v87 = 0;
            v88 = (_OWORD *)v8;
LABEL_209:
            v89 = v84;
            v90 = (const void *)*((_QWORD *)v88 + 2);
            if (!sub_22E71FB18(v90, *((_QWORD *)v84 + 1), *(void **)v88, *((_QWORD *)v88 + 1)))
              goto LABEL_232;
            v91 = *((_QWORD *)v88 + 3);
            *v89 = *v88;
            v92 = (_QWORD *)a1;
            if (v88 == (_OWORD *)a1)
              goto LABEL_231;
            v93 = v87;
            while (1)
            {
              v94 = (const void **)(a1 + v93 - 16);
              v95 = *(_QWORD *)(a1 + v93 - 8);
              if (v95 >= v91)
                v96 = v91;
              else
                v96 = *(_QWORD *)(a1 + v93 - 8);
              if (v96)
              {
                v97 = memcmp(v90, *v94, v96);
                if ((v97 & 0x80000000) == 0)
                {
                  v98 = v97 || v91 == v95;
                  if (v98 || v91 >= v95)
                  {
                    v92 = v88;
                    goto LABEL_230;
                  }
                }
              }
              else if (v91 >= v95)
              {
                v92 = (_QWORD *)(a1 + v93);
LABEL_230:
                a2 = (_OWORD *)v156;
LABEL_231:
                *v92 = v90;
                v92[1] = v91;
LABEL_232:
                v84 = v89 + 1;
                v87 += 16;
                v88 = v89;
                if (v89 + 1 == a2)
                  return;
                goto LABEL_209;
              }
              --v88;
              *(_OWORD *)(a1 + v93) = *(_OWORD *)v94;
              v93 -= 16;
              if (!v93)
              {
                v92 = (_QWORD *)a1;
                goto LABEL_230;
              }
            }
          }
          if (v86)
            return;
          while (1)
          {
            v141 = (uint64_t)v84;
            v142 = *(const void **)(a1 + 16);
            if (sub_22E71FB18(v142, *((_QWORD *)v84 + 1), *(void **)a1, *(_QWORD *)(a1 + 8)))
            {
              v143 = *(_QWORD *)(a1 + 24);
              while (1)
              {
                while (1)
                {
                  v144 = (_QWORD *)a1;
                  *(_OWORD *)(a1 + 16) = *(_OWORD *)a1;
                  a1 -= 16;
                  v145 = *(v144 - 1);
                  v146 = v145 >= v143 ? v143 : *(v144 - 1);
                  if (v146)
                    break;
                  if (v143 >= v145)
                    goto LABEL_325;
                }
                v147 = memcmp(v142, (const void *)*(v144 - 2), v146);
                if ((v147 & 0x80000000) == 0)
                {
                  v148 = v147 || v143 == v145;
                  if (v148 || v143 >= v145)
                    break;
                }
              }
LABEL_325:
              *v144 = v142;
              v144[1] = v143;
            }
            v84 = (_OWORD *)(v141 + 16);
            a1 = v141;
            if ((_OWORD *)(v141 + 16) == a2)
              return;
          }
        }
        if (!a3)
        {
          if ((_OWORD *)v8 == a2)
            return;
          v100 = (unint64_t)(v10 - 2) >> 1;
          v101 = v100;
          do
          {
            v102 = v101;
            if (v100 >= v101)
            {
              v103 = (2 * v101) | 1;
              v104 = a1 + 16 * v103;
              if (2 * v101 + 2 >= v10)
              {
                v109 = *(const void **)v104;
              }
              else
              {
                v105 = *(const void **)v104;
                v106 = *(void **)(v104 + 16);
                v107 = sub_22E71FB18(*(const void **)v104, *(_QWORD *)(v104 + 8), v106, *(_QWORD *)(v104 + 24));
                v108 = !v107;
                if (v107)
                  v109 = v106;
                else
                  v109 = v105;
                if (!v108)
                  v104 += 16;
                a2 = (_OWORD *)v156;
                if (!v108)
                  v103 = 2 * v102 + 2;
              }
              v110 = a1 + 16 * v102;
              v111 = *(const void **)v110;
              v112 = *(_QWORD *)(v110 + 8);
              if (!sub_22E71FB18(v109, *(_QWORD *)(v104 + 8), *(void **)v110, v112))
              {
                *(_OWORD *)v110 = *(_OWORD *)v104;
                if (v100 >= v103)
                {
                  v155 = v102;
                  while (1)
                  {
                    v114 = 2 * v103;
                    v103 = (2 * v103) | 1;
                    v113 = a1 + 16 * v103;
                    v115 = v114 + 2;
                    if (v114 + 2 < v10)
                    {
                      v116 = sub_22E71FB18(*(const void **)v113, *(_QWORD *)(v113 + 8), *(void **)(v113 + 16), *(_QWORD *)(v113 + 24));
                      if (v116)
                        v113 += 16;
                      v102 = v155;
                      if (v116)
                        v103 = v115;
                    }
                    v117 = *(_QWORD *)(v113 + 8);
                    if (v112 >= v117)
                      v118 = *(_QWORD *)(v113 + 8);
                    else
                      v118 = v112;
                    if (v118)
                    {
                      v119 = memcmp(*(const void **)v113, v111, v118);
                      if (v119 < 0)
                        break;
                      v120 = v119 || v117 == v112;
                      if (!v120 && v117 < v112)
                        break;
                    }
                    else if (v117 < v112)
                    {
                      break;
                    }
                    *(_OWORD *)v104 = *(_OWORD *)v113;
                    v104 = v113;
                    if (v100 < v103)
                      goto LABEL_250;
                  }
                }
                v113 = v104;
LABEL_250:
                *(_QWORD *)v113 = v111;
                *(_QWORD *)(v113 + 8) = v112;
                a2 = (_OWORD *)v156;
              }
            }
            v101 = v102 - 1;
          }
          while (v102);
LABEL_275:
          v122 = 0;
          v161 = *(_OWORD *)a1;
          v123 = (_OWORD *)a1;
          do
          {
            v124 = (uint64_t)&v123[v122 + 1];
            v125 = (2 * v122) | 1;
            v126 = 2 * v122 + 2;
            if (v126 < v10
              && sub_22E71FB18(*(const void **)v124, *((_QWORD *)&v123[v122 + 1] + 1), *(void **)&v123[v122 + 2], *((_QWORD *)&v123[v122 + 2] + 1)))
            {
              v124 += 16;
              v125 = v126;
            }
            *v123 = *(_OWORD *)v124;
            v123 = (_OWORD *)v124;
            v122 = v125;
          }
          while (v125 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
          if ((_OWORD *)v124 == --a2)
          {
            *(_OWORD *)v124 = v161;
            goto LABEL_304;
          }
          *(_OWORD *)v124 = *a2;
          *a2 = v161;
          v127 = v124 - a1 + 16;
          if (v127 < 17)
            goto LABEL_304;
          v128 = ((unint64_t)v127 >> 4) - 2;
          v129 = v128 >> 1;
          v130 = (_OWORD *)(a1 + 16 * (v128 >> 1));
          v131 = *(const void **)v124;
          v132 = *(_QWORD *)(v124 + 8);
          if (!sub_22E71FB18(*(const void **)v130, *((_QWORD *)v130 + 1), *(void **)v124, v132))
            goto LABEL_304;
          *(_OWORD *)v124 = *v130;
          if (v128 < 2)
            goto LABEL_303;
          while (1)
          {
            v133 = v130;
            v134 = v129 - 1;
            v129 = (v129 - 1) >> 1;
            v130 = (_OWORD *)(a1 + 16 * v129);
            v135 = *((_QWORD *)v130 + 1);
            if (v132 >= v135)
              v136 = *((_QWORD *)v130 + 1);
            else
              v136 = v132;
            if (v136)
            {
              v137 = memcmp(*(const void **)v130, v131, v136);
              if ((v137 & 0x80000000) == 0)
              {
                v138 = v137 || v135 == v132;
                if (v138 || v135 >= v132)
                {
LABEL_302:
                  v130 = v133;
LABEL_303:
                  *(_QWORD *)v130 = v131;
                  *((_QWORD *)v130 + 1) = v132;
LABEL_304:
                  if (v10-- <= 2)
                    return;
                  goto LABEL_275;
                }
              }
            }
            else if (v135 >= v132)
            {
              goto LABEL_302;
            }
            *v133 = *v130;
            if (v134 <= 1)
              goto LABEL_303;
          }
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (__int128 *)(v8 + 16 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          sub_22E71FB78(v12, (__int128 *)v8, (__int128 *)v7);
        }
        else
        {
          sub_22E71FB78((__int128 *)v8, v12, (__int128 *)v7);
          sub_22E71FB78((__int128 *)(v8 + 16), v12 - 1, v152);
          sub_22E71FB78((__int128 *)(v8 + 32), (__int128 *)(v8 + 16 + 16 * v11), v151);
          sub_22E71FB78(v12 - 1, v12, (__int128 *)(v8 + 16 + 16 * v11));
          v157 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v12;
          *v12 = v157;
        }
        --a3;
        v13 = *(const void **)v8;
        if ((a4 & 1) == 0)
        {
          v14 = *(_QWORD *)(v8 + 8);
          if (sub_22E71FB18(*(const void **)(v8 - 16), *(_QWORD *)(v8 - 8), *(void **)v8, v14))
            goto LABEL_11;
          v49 = *((_QWORD *)a2 - 1);
          if (v49 >= v14)
            v50 = v14;
          else
            v50 = *((_QWORD *)a2 - 1);
          if (v50 && (v51 = memcmp(v13, *(const void **)v7, v50)) != 0)
          {
            if (v51 < 0)
              goto LABEL_126;
          }
          else if (v14 < v49)
          {
LABEL_126:
            v57 = v8 + 16;
            do
            {
              while (1)
              {
                v8 = v57;
                v58 = *(_QWORD *)(v57 + 8);
                v59 = v58 >= v14 ? v14 : *(_QWORD *)(v57 + 8);
                v57 += 16;
                if (v59)
                  break;
                if (v14 < v58)
                  goto LABEL_141;
              }
              v60 = memcmp(v13, *(const void **)v8, v59);
              if (v60 < 0)
                break;
              v61 = v60 || v14 == v58;
            }
            while (v61 || v14 >= v58);
            goto LABEL_141;
          }
          for (v8 += 16; v8 < (unint64_t)a2; v8 += 16)
          {
            v52 = *(_QWORD *)(v8 + 8);
            if (v52 >= v14)
              v53 = v14;
            else
              v53 = *(_QWORD *)(v8 + 8);
            if (v53)
            {
              v54 = memcmp(v13, *(const void **)v8, v53);
              if (v54 < 0)
                break;
              v55 = v54 || v14 == v52;
              if (!v55 && v14 < v52)
                break;
            }
            else if (v14 < v52)
            {
              break;
            }
          }
LABEL_141:
          v63 = (const void **)a2;
          if (v8 >= (unint64_t)a2)
            goto LABEL_188;
          for (i = v150; ; i -= 2)
          {
            v65 = v49 >= v14 ? v14 : v49;
            if (v65)
              break;
            if (v14 >= v49)
              goto LABEL_159;
LABEL_158:
            v69 = (size_t)*i;
            v49 = v69;
          }
          v66 = memcmp(v13, i[1], v65);
          if (v66 < 0)
            goto LABEL_158;
          v67 = v66 || v14 == v49;
          if (!v67 && v14 < v49)
            goto LABEL_158;
LABEL_159:
          v63 = i + 1;
LABEL_188:
          while (v8 < (unint64_t)v63)
          {
            v159 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v63;
            *(_OWORD *)v63 = v159;
            v70 = v8 + 16;
            do
            {
              v8 = v70;
              v71 = *(_QWORD *)(v70 + 8);
              if (v71 >= v14)
                v72 = v14;
              else
                v72 = *(_QWORD *)(v70 + 8);
              if (v72 && (v73 = memcmp(v13, *(const void **)v70, v72)) != 0)
              {
                v74 = (v73 >> 31) | 1;
              }
              else if (v14 == v71)
              {
                v74 = 0;
              }
              else
              {
                if (v14 < v71)
                  break;
                v74 = 1;
              }
              v70 = v8 + 16;
            }
            while (v74 != -1);
            v75 = v63 - 2;
            while (1)
            {
              while (1)
              {
                v63 = v75;
                v76 = (size_t)v75[1];
                v77 = v76 >= v14 ? v14 : (size_t)v75[1];
                v75 -= 2;
                if (v77)
                  break;
                if (v14 >= v76)
                  goto LABEL_188;
              }
              v78 = memcmp(v13, *v63, v77);
              if ((v78 & 0x80000000) == 0)
              {
                v79 = v78 || v14 == v76;
                if (v79 || v14 >= v76)
                  break;
              }
            }
          }
          if (v8 - 16 != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v14;
          v7 = (uint64_t)v153;
          continue;
        }
        v14 = *(_QWORD *)(v8 + 8);
LABEL_11:
        v15 = 0;
        while (2)
        {
          v16 = *(_QWORD *)(v8 + v15 + 24);
          if (v14 >= v16)
            v17 = *(_QWORD *)(v8 + v15 + 24);
          else
            v17 = v14;
          if (!v17)
          {
            if (v16 >= v14)
              break;
            goto LABEL_27;
          }
          v18 = memcmp(*(const void **)(v8 + v15 + 16), v13, v17);
          if (v18 < 0 || (!v18 ? (v19 = v16 == v14) : (v19 = 1), !v19 ? (v20 = v16 >= v14) : (v20 = 1), !v20))
          {
LABEL_27:
            v15 += 16;
            continue;
          }
          break;
        }
        v21 = v8 + v15 + 16;
        v22 = v7;
        if (v15)
        {
          do
          {
            while (1)
            {
              v23 = (const void **)v22;
              v24 = *(_QWORD *)(v22 + 8);
              v25 = v14 >= v24 ? *(_QWORD *)(v22 + 8) : v14;
              v22 -= 16;
              if (v25)
                break;
              if (v24 < v14)
                goto LABEL_67;
            }
            v26 = memcmp(*v23, v13, v25);
            if (v26 < 0)
              break;
            v27 = v26 || v24 == v14;
          }
          while (v27 || v24 >= v14);
        }
        else
        {
          v23 = (const void **)v156;
          if (v21 < v156)
          {
            do
            {
              while (1)
              {
                v23 = (const void **)v7;
                v29 = *(_QWORD *)(v7 + 8);
                v30 = v14 >= v29 ? *(_QWORD *)(v7 + 8) : v14;
                v7 -= 16;
                if (!v30)
                  break;
                v31 = memcmp(*v23, v13, v30);
                if ((v31 & 0x80000000) == 0)
                {
                  v32 = v29 >= v14 || v29 == v14;
                  v33 = !v32 && v31 == 0;
                  if (!v33 && v21 < (unint64_t)v23)
                    continue;
                }
                goto LABEL_67;
              }
            }
            while (v29 >= v14 && v21 < (unint64_t)v23);
          }
        }
LABEL_67:
        v8 = v21;
        if (v21 < (unint64_t)v23)
        {
          v36 = v23;
          do
          {
            v158 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v36;
            *(_OWORD *)v36 = v158;
            v37 = v8 + 16;
            do
            {
              v8 = v37;
              v38 = *(_QWORD *)(v37 + 8);
              if (v14 >= v38)
                v39 = *(_QWORD *)(v37 + 8);
              else
                v39 = v14;
              if (v39 && (v40 = memcmp(*(const void **)v37, v13, v39)) != 0)
              {
                v41 = (v40 >> 31) | 1;
              }
              else
              {
                if (v38 >= v14)
                  break;
                v41 = -1;
              }
              v37 = v8 + 16;
            }
            while (v41 == -1);
            v42 = v36 - 2;
            do
            {
              while (1)
              {
                v36 = v42;
                v43 = (size_t)v42[1];
                v44 = v14 >= v43 ? (size_t)v42[1] : v14;
                v42 -= 2;
                if (v44)
                  break;
                if (v43 < v14)
                  goto LABEL_94;
              }
              v45 = memcmp(*v36, v13, v44);
              if (v45 < 0)
                break;
              v46 = v45 || v43 == v14;
            }
            while (v46 || v43 >= v14);
LABEL_94:
            ;
          }
          while (v8 < (unint64_t)v36);
        }
        if (v8 - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v14;
        v20 = v21 >= (unint64_t)v23;
        a2 = (_OWORD *)v156;
        v7 = (uint64_t)v153;
        if (!v20)
        {
LABEL_101:
          sub_22E71F090(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v48 = sub_22E71FC5C(a1, v8 - 16);
        if (!sub_22E71FC5C(v8, v156))
        {
          if (v48)
            continue;
          goto LABEL_101;
        }
        a2 = (_OWORD *)(v8 - 16);
        if (!v48)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v33 = *(a2 - 2);
        v32 = (__int128 *)(a2 - 2);
        if (v33 < *(_QWORD *)v8)
        {
          v87 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v32;
          *v32 = v87;
        }
        return;
      case 3:
        sub_22E7F1158((__int128 *)v8, (unint64_t *)(v8 + 16), a2 - 2);
        return;
      case 4:
        sub_22E7F1404((__int128 *)v8, (unint64_t *)(v8 + 16), (unint64_t *)(v8 + 32), (_OWORD *)a2 - 1);
        return;
      case 5:
        v34 = (__int128 *)(v8 + 16);
        v35 = (__int128 *)(v8 + 32);
        v36 = (__int128 *)(v8 + 48);
        sub_22E7F1404((__int128 *)v8, (unint64_t *)(v8 + 16), (unint64_t *)(v8 + 32), (_OWORD *)(v8 + 48));
        v38 = *(a2 - 2);
        v37 = a2 - 2;
        if (v38 < *(_QWORD *)(v8 + 48))
        {
          v39 = *v36;
          *v36 = *(_OWORD *)v37;
          *(_OWORD *)v37 = v39;
          if (*(_QWORD *)v36 < *(_QWORD *)v35)
          {
            v40 = *v35;
            *v35 = *v36;
            *v36 = v40;
            if (*(_QWORD *)v35 < *(_QWORD *)v34)
            {
              v41 = *v34;
              *v34 = *v35;
              *v35 = v41;
              if (*(_QWORD *)(v8 + 16) < *(_QWORD *)v8)
              {
                v88 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *v34;
                *v34 = v88;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 383)
        {
          v42 = (unint64_t *)(v8 + 16);
          v44 = (unint64_t *)v8 == a2 || v42 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v44)
            {
              v45 = 0;
              v46 = (unint64_t *)v8;
              do
              {
                v47 = v42;
                v48 = v46[2];
                if (v48 < *v46)
                {
                  v49 = v46[3];
                  v50 = v45;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v50 + 16) = *(_OWORD *)(v8 + v50);
                    if (!v50)
                      break;
                    v51 = *(_QWORD *)(v8 + v50 - 16);
                    v50 -= 16;
                    if (v48 >= v51)
                    {
                      v52 = (_QWORD *)(v8 + v50 + 16);
                      goto LABEL_76;
                    }
                  }
                  v52 = (_QWORD *)v8;
LABEL_76:
                  *v52 = v48;
                  v52[1] = v49;
                }
                v42 = v47 + 2;
                v45 += 16;
                v46 = v47;
              }
              while (v47 + 2 != a2);
            }
          }
          else if (!v44)
          {
            do
            {
              v79 = (uint64_t)v42;
              v80 = *(_QWORD *)(a1 + 16);
              if (v80 < *(_QWORD *)a1)
              {
                v81 = *(_QWORD *)(a1 + 24);
                v82 = v79;
                do
                {
                  *(_OWORD *)v82 = *(_OWORD *)(v82 - 16);
                  v83 = *(_QWORD *)(v82 - 32);
                  v82 -= 16;
                }
                while (v80 < v83);
                *(_QWORD *)v82 = v80;
                *(_QWORD *)(v82 + 8) = v81;
              }
              v42 = (unint64_t *)(v79 + 16);
              a1 = v79;
            }
            while ((unint64_t *)(v79 + 16) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((unint64_t *)v8 != a2)
          {
            v53 = (unint64_t)(v10 - 2) >> 1;
            v54 = v53;
            do
            {
              v55 = v54;
              if (v53 >= v54)
              {
                v56 = (2 * v54) | 1;
                v57 = (unint64_t *)(v8 + 16 * v56);
                if (2 * v55 + 2 >= v10)
                {
                  v58 = *v57;
                }
                else
                {
                  v58 = v57[2];
                  v59 = *v57 >= v58;
                  if (*v57 > v58)
                    v58 = *v57;
                  if (!v59)
                  {
                    v57 += 2;
                    v56 = 2 * v55 + 2;
                  }
                }
                v60 = (unint64_t *)(v8 + 16 * v55);
                v61 = *v60;
                if (v58 >= *v60)
                {
                  v62 = v60[1];
                  do
                  {
                    v63 = v60;
                    v60 = v57;
                    *(_OWORD *)v63 = *(_OWORD *)v57;
                    if (v53 < v56)
                      break;
                    v64 = (2 * v56) | 1;
                    v57 = (unint64_t *)(v8 + 16 * v64);
                    v56 = 2 * v56 + 2;
                    if (v56 >= v10)
                    {
                      v65 = *v57;
                      v56 = v64;
                    }
                    else
                    {
                      v65 = *v57;
                      v66 = v57[2];
                      if (*v57 <= v66)
                        v65 = v57[2];
                      if (*v57 >= v66)
                        v56 = v64;
                      else
                        v57 += 2;
                    }
                  }
                  while (v65 >= v61);
                  *v60 = v61;
                  v60[1] = v62;
                }
              }
              v54 = v55 - 1;
            }
            while (v55);
            do
            {
              v67 = 0;
              v89 = *(_OWORD *)v8;
              v68 = (_OWORD *)v8;
              do
              {
                v69 = (unint64_t *)&v68[v67 + 1];
                v70 = (2 * v67) | 1;
                v71 = 2 * v67 + 2;
                if (v71 < v10 && *v69 < v69[2])
                {
                  v69 += 2;
                  v70 = v71;
                }
                *v68 = *(_OWORD *)v69;
                v68 = v69;
                v67 = v70;
              }
              while (v70 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              a2 -= 2;
              if (v69 == a2)
              {
                *(_OWORD *)v69 = v89;
              }
              else
              {
                *(_OWORD *)v69 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v89;
                v72 = (uint64_t)v69 - v8 + 16;
                if (v72 >= 17)
                {
                  v73 = (((unint64_t)v72 >> 4) - 2) >> 1;
                  v74 = (unint64_t *)(v8 + 16 * v73);
                  v75 = *v69;
                  if (*v74 < *v69)
                  {
                    v76 = v69[1];
                    do
                    {
                      v77 = v69;
                      v69 = v74;
                      *(_OWORD *)v77 = *(_OWORD *)v74;
                      if (!v73)
                        break;
                      v73 = (v73 - 1) >> 1;
                      v74 = (unint64_t *)(v8 + 16 * v73);
                    }
                    while (*v74 < v75);
                    *v69 = v75;
                    v69[1] = v76;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (unint64_t *)(v8 + 16 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          sub_22E7F1158((__int128 *)(a1 + 16 * ((unint64_t)v10 >> 1)), (unint64_t *)a1, a2 - 2);
        }
        else
        {
          sub_22E7F1158((__int128 *)a1, (unint64_t *)(a1 + 16 * ((unint64_t)v10 >> 1)), a2 - 2);
          sub_22E7F1158((__int128 *)(a1 + 16), v12 - 2, a2 - 4);
          sub_22E7F1158((__int128 *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v11), a2 - 6);
          sub_22E7F1158((__int128 *)v12 - 1, v12, (unint64_t *)(a1 + 16 + 16 * v11));
          v84 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v84;
        }
        --a3;
        v13 = *(_QWORD *)a1;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 16) >= v13)
        {
          if (v13 >= *(a2 - 2))
          {
            v26 = a1 + 16;
            do
            {
              v8 = v26;
              if (v26 >= (unint64_t)a2)
                break;
              v26 += 16;
            }
            while (v13 >= *(_QWORD *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v25 = *(_QWORD *)(v8 + 16);
              v8 += 16;
            }
            while (v13 >= v25);
          }
          v27 = a2;
          if (v8 < (unint64_t)a2)
          {
            v27 = a2;
            do
              v28 = *((_QWORD *)v27-- - 2);
            while (v13 < v28);
          }
          v29 = *(_QWORD *)(a1 + 8);
          while (v8 < (unint64_t)v27)
          {
            v86 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v27;
            *v27 = v86;
            do
            {
              v30 = *(_QWORD *)(v8 + 16);
              v8 += 16;
            }
            while (v13 >= v30);
            do
              v31 = *((_QWORD *)v27-- - 2);
            while (v13 < v31);
          }
          if (v8 - 16 != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v29;
          continue;
        }
        v14 = 0;
        v15 = *(_QWORD *)(a1 + 8);
        do
        {
          v16 = *(_QWORD *)(a1 + v14 + 16);
          v14 += 16;
        }
        while (v16 < v13);
        v17 = a1 + v14;
        v18 = a2;
        if (v14 == 16)
        {
          v18 = a2;
          do
          {
            if (v17 >= (unint64_t)v18)
              break;
            v20 = *(v18 - 2);
            v18 -= 2;
          }
          while (v20 >= v13);
        }
        else
        {
          do
          {
            v19 = *(v18 - 2);
            v18 -= 2;
          }
          while (v19 >= v13);
        }
        v8 = a1 + v14;
        if (v17 < (unint64_t)v18)
        {
          v21 = (__int128 *)v18;
          do
          {
            v85 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v21;
            *v21 = v85;
            do
            {
              v22 = *(_QWORD *)(v8 + 16);
              v8 += 16;
            }
            while (v22 < v13);
            do
              v23 = *((_QWORD *)v21-- - 2);
            while (v23 >= v13);
          }
          while (v8 < (unint64_t)v21);
        }
        if (v8 - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v15;
        if (v17 < (unint64_t)v18)
        {
LABEL_29:
          sub_22E7F0A60(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v24 = sub_22E7F11FC(a1, (unint64_t *)(v8 - 16));
        if (!sub_22E7F11FC(v8, a2))
        {
          if (v24)
            continue;
          goto LABEL_29;
        }
        a2 = (unint64_t *)(v8 - 16);
        if (!v24)
          goto LABEL_1;
        return;
    }
  }
}

  v177 = (uint64_t)(a2 - 6);
  v178 = a2 - 3;
  v176 = (uint64_t)(a2 - 9);
  v9 = a1;
  v185 = (unint64_t)a2;
  while (2)
  {
    v10 = v9;
    v11 = (uint64_t)a2 - v9;
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v9) >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v86 = *a3;
        sub_22F0D5A50(*(a2 - 3));
        v88 = v87;
        sub_22F0D5A50(*(_QWORD *)v9);
        if (sub_22F1E3C34(v86, v88, v89))
        {
          v90 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *(a2 - 3);
          *(a2 - 3) = v90;
          v194 = *(_OWORD *)(v9 + 8);
          *(_OWORD *)(v9 + 8) = *((_OWORD *)a2 - 1);
          *((_OWORD *)a2 - 1) = v194;
        }
        return;
      case 3uLL:
        sub_22E8A8604(v9, v9 + 24, (uint64_t)v178, a3);
        return;
      case 4uLL:
        sub_22E8A89D8(v9, v9 + 24, v9 + 48, (uint64_t)v178, a3);
        return;
      case 5uLL:
        sub_22E8A8470(v9, v9 + 24, v9 + 48, v9 + 72, (uint64_t)v178, a3);
        return;
      default:
        if (v11 <= 575)
        {
          v91 = (uint64_t *)(v9 + 24);
          v93 = (uint64_t *)v9 == a2 || v91 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v93)
            {
              v94 = 0;
              v95 = v9;
              do
              {
                v96 = v91;
                v97 = *a3;
                sub_22F0D5A50(*(_QWORD *)(v95 + 24));
                v99 = v98;
                sub_22F0D5A50(*(_QWORD *)v95);
                if (sub_22F1E3C34(v97, v99, v100))
                {
                  v101 = *v96;
                  v195 = *(_OWORD *)(v95 + 32);
                  v102 = v94;
                  while (1)
                  {
                    v103 = v10 + v102;
                    *(_QWORD *)(v103 + 24) = *(_QWORD *)(v10 + v102);
                    *(_OWORD *)(v103 + 32) = *(_OWORD *)(v10 + v102 + 8);
                    if (!v102)
                      break;
                    v104 = *a3;
                    sub_22F0D5A50(v101);
                    v106 = v105;
                    sub_22F0D5A50(*(_QWORD *)(v103 - 24));
                    v102 -= 24;
                    if (!sub_22F1E3C34(v104, v106, v107))
                    {
                      v108 = (_QWORD *)(v10 + v102 + 24);
                      goto LABEL_72;
                    }
                  }
                  v108 = (_QWORD *)v10;
LABEL_72:
                  *v108 = v101;
                  *(_OWORD *)(v103 + 8) = v195;
                  a2 = (uint64_t *)v185;
                }
                v91 = v96 + 3;
                v94 += 24;
                v95 = (unint64_t)v96;
              }
              while (v96 + 3 != a2);
            }
          }
          else if (!v93)
          {
            v163 = (_OWORD *)(v9 + 32);
            do
            {
              v164 = v91;
              v165 = *a3;
              sub_22F0D5A50(*(_QWORD *)(v10 + 24));
              v167 = v166;
              sub_22F0D5A50(*(_QWORD *)v10);
              if (sub_22F1E3C34(v165, v167, v168))
              {
                v169 = *v164;
                v198 = *(_OWORD *)(v10 + 32);
                v170 = v163;
                do
                {
                  *((_QWORD *)v170 - 1) = *((_QWORD *)v170 - 4);
                  *v170 = *(_OWORD *)((char *)v170 - 24);
                  v172 = *a3;
                  sub_22F0D5A50(v169);
                  v174 = v173;
                  sub_22F0D5A50(*((_QWORD *)v170 - 7));
                  v171 = (_OWORD *)((char *)v170 - 24);
                  v170 = (_OWORD *)((char *)v170 - 24);
                }
                while (sub_22F1E3C34(v172, v174, v175));
                *((_QWORD *)v171 - 1) = v169;
                *v171 = v198;
                a2 = (uint64_t *)v185;
              }
              v91 = v164 + 3;
              v163 = (_OWORD *)((char *)v163 + 24);
              v10 = (uint64_t)v164;
            }
            while (v164 + 3 != a2);
          }
          return;
        }
        v182 = v9;
        if (!a4)
        {
          if ((uint64_t *)v9 != a2)
          {
            v109 = (v12 - 2) >> 1;
            v183 = v109;
            do
            {
              v110 = v109;
              if (v183 >= v109)
              {
                v111 = (2 * v109) | 1;
                v112 = v10 + 24 * v111;
                if (2 * v109 + 2 < (uint64_t)v12)
                {
                  v113 = *a3;
                  sub_22F0D5A50(*(_QWORD *)v112);
                  v115 = v114;
                  sub_22F0D5A50(*(_QWORD *)(v112 + 24));
                  v117 = sub_22F1E3C34(v113, v115, v116);
                  if (v117)
                    v112 += 24;
                  v10 = v182;
                  if (v117)
                    v111 = 2 * v110 + 2;
                }
                v118 = v10 + 24 * v110;
                v119 = *a3;
                sub_22F0D5A50(*(_QWORD *)v112);
                v121 = v120;
                sub_22F0D5A50(*(_QWORD *)v118);
                if (!sub_22F1E3C34(v119, v121, v122))
                {
                  v180 = v110;
                  v123 = *(_QWORD *)v118;
                  v196 = *(_OWORD *)(v118 + 8);
                  do
                  {
                    v124 = v118;
                    v118 = v112;
                    *(_QWORD *)v124 = *(_QWORD *)v112;
                    *(_OWORD *)(v124 + 8) = *(_OWORD *)(v112 + 8);
                    if (v183 < v111)
                      break;
                    v125 = (2 * v111) | 1;
                    v112 = v10 + 24 * v125;
                    v126 = 2 * v111 + 2;
                    if (v126 < (uint64_t)v12)
                    {
                      v127 = *a3;
                      sub_22F0D5A50(*(_QWORD *)v112);
                      v129 = v128;
                      sub_22F0D5A50(*(_QWORD *)(v112 + 24));
                      v131 = sub_22F1E3C34(v127, v129, v130);
                      if (v131)
                        v112 += 24;
                      v10 = v182;
                      if (v131)
                        v125 = v126;
                    }
                    v132 = *a3;
                    sub_22F0D5A50(*(_QWORD *)v112);
                    v134 = v133;
                    sub_22F0D5A50(v123);
                    v136 = sub_22F1E3C34(v132, v134, v135);
                    v111 = v125;
                  }
                  while (!v136);
                  *(_QWORD *)v118 = v123;
                  *(_OWORD *)(v118 + 8) = v196;
                  a2 = (uint64_t *)v185;
                  v110 = v180;
                }
              }
              v109 = v110 - 1;
            }
            while (v110);
            v181 = (__int128 *)(v10 + 8);
            do
            {
              v137 = 0;
              v184 = *(_QWORD *)v10;
              v186 = a2;
              v190 = *v181;
              v138 = v10;
              do
              {
                v139 = v138 + 24 * v137 + 24;
                v140 = (2 * v137) | 1;
                v141 = 2 * v137 + 2;
                if (v141 < (uint64_t)v12)
                {
                  v142 = *a3;
                  sub_22F0D5A50(*(_QWORD *)v139);
                  v144 = v143;
                  sub_22F0D5A50(*(_QWORD *)(v139 + 24));
                  if (sub_22F1E3C34(v142, v144, v145))
                  {
                    v139 += 24;
                    v140 = v141;
                  }
                }
                *(_QWORD *)v138 = *(_QWORD *)v139;
                *(_OWORD *)(v138 + 8) = *(_OWORD *)(v139 + 8);
                v138 = v139;
                v137 = v140;
              }
              while (v140 <= (uint64_t)((v12 - 2) >> 1));
              v146 = (__int128 *)(v139 + 8);
              v147 = a2 - 3;
              if ((uint64_t *)v139 == a2 - 3)
              {
                v10 = v182;
                *(_QWORD *)v139 = v184;
                *v146 = v190;
              }
              else
              {
                *(_QWORD *)v139 = *(a2 - 3);
                *v146 = *((_OWORD *)a2 - 1);
                v10 = v182;
                *(a2 - 3) = v184;
                *((_OWORD *)a2 - 1) = v190;
                v148 = v139 - v182 + 24;
                if (v148 >= 25)
                {
                  v149 = (v148 / 0x18uLL - 2) >> 1;
                  v150 = v182 + 24 * v149;
                  v151 = *a3;
                  v187 = v186 - 3;
                  sub_22F0D5A50(*(_QWORD *)v150);
                  v153 = v152;
                  sub_22F0D5A50(*(_QWORD *)v139);
                  v155 = sub_22F1E3C34(v151, v153, v154);
                  v147 = v187;
                  if (v155)
                  {
                    v156 = *(_QWORD *)v139;
                    v197 = *v146;
                    do
                    {
                      v157 = v139;
                      v139 = v150;
                      *(_QWORD *)v157 = *(_QWORD *)v150;
                      *(_OWORD *)(v157 + 8) = *(_OWORD *)(v150 + 8);
                      if (!v149)
                        break;
                      v149 = (v149 - 1) >> 1;
                      v150 = v182 + 24 * v149;
                      v158 = *a3;
                      sub_22F0D5A50(*(_QWORD *)v150);
                      v160 = v159;
                      sub_22F0D5A50(v156);
                    }
                    while (sub_22F1E3C34(v158, v160, v161));
                    *(_QWORD *)v139 = v156;
                    *(_OWORD *)(v139 + 8) = v197;
                    v147 = v187;
                  }
                }
              }
              a2 = v147;
            }
            while ((uint64_t)v12-- > 2);
          }
          return;
        }
        v13 = v9;
        v14 = (uint64_t *)(v9 + 24 * (v12 >> 1));
        if ((unint64_t)v11 < 0xC01)
        {
          sub_22E8A8604(v10 + 24 * (v12 >> 1), v10, (uint64_t)v178, a3);
        }
        else
        {
          sub_22E8A8604(v10, v10 + 24 * (v12 >> 1), (uint64_t)v178, a3);
          v15 = v13 + 24 * (v12 >> 1);
          sub_22E8A8604(v13 + 24, v15 - 24, v177, a3);
          sub_22E8A8604(v13 + 48, v13 + 24 + 24 * (v12 >> 1), v176, a3);
          sub_22E8A8604(v15 - 24, v15, v13 + 24 + 24 * (v12 >> 1), a3);
          v16 = *(_QWORD *)v13;
          *(_QWORD *)v13 = *v14;
          *v14 = v16;
          v191 = *(_OWORD *)(v13 + 8);
          *(_OWORD *)(v13 + 8) = *(_OWORD *)(v15 + 8);
          *(_OWORD *)(v15 + 8) = v191;
        }
        a1 = v13;
        --a4;
        if ((a5 & 1) == 0)
        {
          v17 = *a3;
          sub_22F0D5A50(*(_QWORD *)(v13 - 24));
          v19 = v18;
          sub_22F0D5A50(*(_QWORD *)v13);
          if (!sub_22F1E3C34(v17, v19, v20))
          {
            v54 = *(_QWORD *)v13;
            v189 = *(_OWORD *)(v13 + 8);
            v55 = *a3;
            sub_22F0D5A50(*(_QWORD *)v13);
            v57 = v56;
            sub_22F0D5A50(*v178);
            if (sub_22F1E3C34(v55, v57, v58))
            {
              v9 = v13;
              do
              {
                v59 = *a3;
                sub_22F0D5A50(v54);
                v61 = v60;
                v62 = *(_QWORD *)(v9 + 24);
                v9 += 24;
                sub_22F0D5A50(v62);
              }
              while (!sub_22F1E3C34(v59, v61, v63));
            }
            else
            {
              v64 = v13 + 24;
              do
              {
                v9 = v64;
                if (v64 >= v185)
                  break;
                v65 = *a3;
                sub_22F0D5A50(v54);
                v67 = v66;
                v64 += 24;
                sub_22F0D5A50(*(_QWORD *)v9);
              }
              while (!sub_22F1E3C34(v65, v67, v68));
            }
            v69 = v185;
            if (v9 < v185)
            {
              v69 = v185;
              do
              {
                v70 = *a3;
                sub_22F0D5A50(v54);
                v72 = v71;
                v73 = *(_QWORD *)(v69 - 24);
                v69 -= 24;
                sub_22F0D5A50(v73);
              }
              while (sub_22F1E3C34(v70, v72, v74));
            }
            while (v9 < v69)
            {
              v75 = *(_QWORD *)v9;
              *(_QWORD *)v9 = *(_QWORD *)v69;
              *(_QWORD *)v69 = v75;
              v193 = *(_OWORD *)(v9 + 8);
              *(_OWORD *)(v9 + 8) = *(_OWORD *)(v69 + 8);
              *(_OWORD *)(v69 + 8) = v193;
              do
              {
                v76 = *a3;
                sub_22F0D5A50(v54);
                v78 = v77;
                v79 = *(_QWORD *)(v9 + 24);
                v9 += 24;
                sub_22F0D5A50(v79);
              }
              while (!sub_22F1E3C34(v76, v78, v80));
              do
              {
                v81 = *a3;
                sub_22F0D5A50(v54);
                v83 = v82;
                v84 = *(_QWORD *)(v69 - 24);
                v69 -= 24;
                sub_22F0D5A50(v84);
              }
              while (sub_22F1E3C34(v81, v83, v85));
            }
            if (v9 - 24 != v182)
            {
              *(_QWORD *)v182 = *(_QWORD *)(v9 - 24);
              *(_OWORD *)(v182 + 8) = *(_OWORD *)(v9 - 16);
            }
            a5 = 0;
            *(_QWORD *)(v9 - 24) = v54;
            *(_OWORD *)(v9 - 16) = v189;
            a2 = (uint64_t *)v185;
            continue;
          }
        }
        v21 = a4;
        v22 = 0;
        v23 = *(_QWORD *)a1;
        v188 = *(_OWORD *)(a1 + 8);
        do
        {
          v24 = *a3;
          sub_22F0D5A50(*(_QWORD *)(a1 + v22 + 24));
          v26 = v25;
          sub_22F0D5A50(v23);
          v22 += 24;
        }
        while (sub_22F1E3C34(v24, v26, v27));
        v28 = a1 + v22;
        v29 = v185;
        if (v22 == 24)
        {
          v29 = v185;
          do
          {
            if (v28 >= v29)
              break;
            v35 = *(_QWORD *)(v29 - 24);
            v29 -= 24;
            v36 = *a3;
            sub_22F0D5A50(v35);
            v38 = v37;
            sub_22F0D5A50(v23);
          }
          while (!sub_22F1E3C34(v36, v38, v39));
        }
        else
        {
          do
          {
            v30 = *(_QWORD *)(v29 - 24);
            v29 -= 24;
            v31 = *a3;
            sub_22F0D5A50(v30);
            v33 = v32;
            sub_22F0D5A50(v23);
          }
          while (!sub_22F1E3C34(v31, v33, v34));
        }
        v9 = a1 + v22;
        if (v28 < v29)
        {
          v40 = v29;
          do
          {
            v41 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v40;
            *(_QWORD *)v40 = v41;
            v192 = *(_OWORD *)(v9 + 8);
            *(_OWORD *)(v9 + 8) = *(_OWORD *)(v40 + 8);
            *(_OWORD *)(v40 + 8) = v192;
            do
            {
              v42 = *(_QWORD *)(v9 + 24);
              v9 += 24;
              v43 = *a3;
              sub_22F0D5A50(v42);
              v45 = v44;
              sub_22F0D5A50(v23);
            }
            while (sub_22F1E3C34(v43, v45, v46));
            do
            {
              v47 = *(_QWORD *)(v40 - 24);
              v40 -= 24;
              v48 = *a3;
              sub_22F0D5A50(v47);
              v50 = v49;
              sub_22F0D5A50(v23);
            }
            while (!sub_22F1E3C34(v48, v50, v51));
          }
          while (v9 < v40);
        }
        if (v9 - 24 != a1)
        {
          *(_QWORD *)a1 = *(_QWORD *)(v9 - 24);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(v9 - 16);
        }
        *(_QWORD *)(v9 - 24) = v23;
        *(_OWORD *)(v9 - 16) = v188;
        v52 = v28 >= v29;
        a2 = (uint64_t *)v185;
        a4 = v21;
        if (!v52)
        {
LABEL_30:
          sub_22E8A790C(a1, v9 - 24, a3, v21, a5 & 1);
          a5 = 0;
          continue;
        }
        v53 = sub_22E8A87A0(a1, v9 - 24, a3);
        if (!sub_22E8A87A0(v9, v185, a3))
        {
          if (v53)
            continue;
          goto LABEL_30;
        }
        a2 = (uint64_t *)(v9 - 24);
        if (!v53)
          goto LABEL_1;
        return;
    }
  }
}

  for (i = a1; ; i = *(_QWORD *)(v2 + 32))
  {
    v2 = *(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0);
    v3 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v3 == 39 || (v4 = v3 & 0xFE, v4 == 40))
    {
      a1 = sub_22F10ACF8(v2);
      goto LABEL_1;
    }
    if ((v4 - 2) > 3)
      break;
    if ((*(_DWORD *)(v2 + 16) & 0xFEu) - 6 <= 0xFFFFFFFB)
      v2 = sub_22F10CF48(v2);
  }
  return i & 0xFFFFFFFFFFFFFFF8;
}

  v126 = (__n128 *)(a2 - 10);
  v127 = (__n128 *)(a2 - 5);
  v125 = (__n128 *)(a2 - 15);
  v7 = a1;
  v131 = (uint64_t)a2;
  while (2)
  {
    a1 = v7;
    v8 = (uint64_t)a2 - v7;
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v7) >> 3);
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        v58 = a2 - 5;
        if (*((_DWORD *)a2 - 10) < *(_DWORD *)v7)
        {
          v141 = *(_DWORD *)(v7 + 8);
          v136 = *(_QWORD *)v7;
          v59 = *(_DWORD *)(v7 + 32);
          v60 = *(_OWORD *)(v7 + 16);
          *(_QWORD *)(v7 + 16) = 0;
          v61 = *((_DWORD *)a2 - 8);
          *(_QWORD *)v7 = *v58;
          *(_DWORD *)(v7 + 8) = v61;
          *(_DWORD *)(v7 + 32) = *((_DWORD *)a2 - 2);
          *(_OWORD *)(v7 + 16) = *(_OWORD *)(a2 - 3);
          *((_DWORD *)a2 - 8) = v141;
          *v58 = v136;
          *((_DWORD *)a2 - 2) = v59;
          *(_OWORD *)(a2 - 3) = v60;
        }
        return;
      case 3:
        sub_22EA45CD0((__n128 *)v7, (__n128 *)(v7 + 40), v127);
        return;
      case 4:
        sub_22EA46074((__n128 *)v7, (__n128 *)(v7 + 40), (__n128 *)(v7 + 80), v127);
        return;
      case 5:
        sub_22EA45B38((__n128 *)v7, (__n128 *)(v7 + 40), (__n128 *)(v7 + 80), (__n128 *)(v7 + 120), v127);
        return;
      default:
        if (v8 <= 959)
        {
          v62 = (_QWORD *)(v7 + 40);
          v64 = (_QWORD *)v7 == a2 || v62 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v64)
            {
              v65 = 0;
              v66 = v7;
              do
              {
                v67 = v62;
                v68 = *(_DWORD *)(v66 + 40);
                if (v68 < *(_DWORD *)v66)
                {
                  v69 = *(_QWORD *)(v66 + 44);
                  v70 = *(_DWORD *)(v66 + 72);
                  v130 = *(_OWORD *)(v66 + 56);
                  *(_QWORD *)(v66 + 56) = 0;
                  v71 = v65;
                  v72 = v62[2];
                  while (1)
                  {
                    v73 = a1 + v71;
                    *(_QWORD *)(v73 + 40) = *(_QWORD *)(a1 + v71);
                    *(_DWORD *)(v73 + 48) = *(_DWORD *)(a1 + v71 + 8);
                    if (v72)
                    {
                      v74 = *(_QWORD *)(v73 + 64);
                      if (v74)
                        sub_22E3BB10C(v74, v72);
                    }
                    *(_DWORD *)(v73 + 72) = *(_DWORD *)(v73 + 32);
                    *(_OWORD *)(v73 + 56) = *(_OWORD *)(v73 + 16);
                    *(_QWORD *)(v73 + 16) = 0;
                    if (!v71)
                      break;
                    v72 = 0;
                    v75 = *(_DWORD *)(a1 + v71 - 40);
                    v71 -= 40;
                    if (v68 >= v75)
                    {
                      v76 = a1 + v71 + 40;
                      goto LABEL_86;
                    }
                  }
                  v76 = a1;
LABEL_86:
                  *(_DWORD *)v76 = v68;
                  *(_QWORD *)(v76 + 4) = v69;
                  *(_DWORD *)(v76 + 32) = v70;
                  *(_OWORD *)(v76 + 16) = v130;
                  a2 = (_QWORD *)v131;
                }
                v62 = v67 + 5;
                v65 += 40;
                v66 = (unint64_t)v67;
              }
              while (v67 + 5 != a2);
            }
          }
          else if (!v64)
          {
            v116 = (_DWORD *)(v7 + 72);
            do
            {
              v117 = (uint64_t)v62;
              v118 = *(_DWORD *)(a1 + 40);
              if (v118 < *(_DWORD *)a1)
              {
                v119 = *(_QWORD *)(a1 + 44);
                v120 = *(_DWORD *)(a1 + 72);
                v132 = *(_OWORD *)(a1 + 56);
                *(_QWORD *)(a1 + 56) = 0;
                v121 = v116;
                v122 = *(_QWORD *)(v117 + 16);
                do
                {
                  v123 = v121;
                  *((_QWORD *)v121 - 4) = *((_QWORD *)v121 - 9);
                  *(v121 - 6) = *(v121 - 16);
                  if (v122)
                  {
                    v124 = *((_QWORD *)v121 - 1);
                    if (v124)
                      sub_22E3BB10C(v124, v122);
                  }
                  v122 = 0;
                  v121 = v123 - 10;
                  *v123 = *(v123 - 10);
                  *((_OWORD *)v123 - 1) = *(_OWORD *)(v123 - 14);
                  *((_QWORD *)v123 - 7) = 0;
                }
                while (v118 < *(v123 - 28));
                *(v123 - 18) = v118;
                *(_QWORD *)(v123 - 17) = v119;
                *v121 = v120;
                *(_OWORD *)(v123 - 14) = v132;
              }
              v62 = (_QWORD *)(v117 + 40);
              v116 += 10;
              a1 = v117;
            }
            while ((_QWORD *)(v117 + 40) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((_QWORD *)v7 != a2)
          {
            v77 = (unint64_t)(v9 - 2) >> 1;
            v78 = v77;
            do
            {
              v79 = v78;
              if (v77 >= v78)
              {
                v80 = (2 * v78) | 1;
                v81 = (unsigned int *)(v7 + 40 * v80);
                if (2 * v79 + 2 >= v9)
                {
                  v82 = *v81;
                }
                else
                {
                  v82 = v81[10];
                  v83 = *v81 >= v82;
                  if (*v81 > v82)
                    v82 = *v81;
                  if (!v83)
                  {
                    v81 += 10;
                    v80 = 2 * v79 + 2;
                  }
                }
                v84 = (unsigned int *)(v7 + 40 * v79);
                v85 = *v84;
                if (v82 >= *v84)
                {
                  v86 = *(_QWORD *)(v84 + 1);
                  v87 = v7 + 40 * v79;
                  v88 = *(_DWORD *)(v87 + 32);
                  v89 = *(_OWORD *)(v87 + 16);
                  *(_QWORD *)(v87 + 16) = 0;
                  do
                  {
                    v90 = v84;
                    v84 = v81;
                    v91 = *(_QWORD *)v81;
                    v90[2] = v84[2];
                    *(_QWORD *)v90 = v91;
                    v90[8] = v84[8];
                    *((_OWORD *)v90 + 1) = *((_OWORD *)v84 + 1);
                    *((_QWORD *)v84 + 2) = 0;
                    if (v77 < v80)
                      break;
                    v92 = (2 * v80) | 1;
                    v81 = (unsigned int *)(v7 + 40 * v92);
                    v80 = 2 * v80 + 2;
                    if (v80 >= v9)
                    {
                      v93 = *v81;
                      v80 = v92;
                    }
                    else
                    {
                      v93 = *v81;
                      v94 = v81[10];
                      if (*v81 <= v94)
                        v93 = v81[10];
                      if (*v81 >= v94)
                        v80 = v92;
                      else
                        v81 += 10;
                    }
                  }
                  while (v93 >= v85);
                  *v84 = v85;
                  *(_QWORD *)(v84 + 1) = v86;
                  v84[8] = v88;
                  *((_OWORD *)v84 + 1) = v89;
                }
              }
              v78 = v79 - 1;
            }
            while (v79);
            do
            {
              v95 = 0;
              v96 = a2;
              v142 = *(_DWORD *)(v7 + 8);
              v137 = *(_QWORD *)v7;
              v97 = *(_DWORD *)(v7 + 32);
              v99 = *(_QWORD *)(v7 + 16);
              v98 = *(_QWORD *)(v7 + 24);
              *(_QWORD *)(v7 + 16) = 0;
              v100 = v7;
              do
              {
                v101 = v100 + 40 * v95 + 40;
                v102 = (2 * v95) | 1;
                v103 = 2 * v95 + 2;
                if (v103 < v9 && *(_DWORD *)v101 < *(_DWORD *)(v101 + 40))
                {
                  v101 += 40;
                  v102 = v103;
                }
                v104 = *(_QWORD *)v101;
                *(_DWORD *)(v100 + 8) = *(_DWORD *)(v101 + 8);
                *(_QWORD *)v100 = v104;
                *(_DWORD *)(v100 + 32) = *(_DWORD *)(v101 + 32);
                *(_OWORD *)(v100 + 16) = *(_OWORD *)(v101 + 16);
                *(_QWORD *)(v101 + 16) = 0;
                v100 = v101;
                v95 = v102;
              }
              while (v102 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
              a2 -= 5;
              if ((_QWORD *)v101 == v96 - 5)
              {
                *(_DWORD *)(v101 + 8) = v142;
                *(_QWORD *)v101 = v137;
                *(_DWORD *)(v101 + 32) = v97;
                *(_QWORD *)(v101 + 16) = v99;
                *(_QWORD *)(v101 + 24) = v98;
              }
              else
              {
                v105 = *a2;
                *(_DWORD *)(v101 + 8) = *((_DWORD *)v96 - 8);
                *(_QWORD *)v101 = v105;
                *(_DWORD *)(v101 + 32) = *((_DWORD *)v96 - 2);
                *(_OWORD *)(v101 + 16) = *(_OWORD *)(v96 - 3);
                *(v96 - 3) = 0;
                *((_DWORD *)v96 - 8) = v142;
                *a2 = v137;
                *((_DWORD *)v96 - 2) = v97;
                *(v96 - 3) = v99;
                *(v96 - 2) = v98;
                v106 = v101 - v7 + 40;
                if (v106 >= 41)
                {
                  v107 = (v106 / 0x28uLL - 2) >> 1;
                  v108 = (uint64_t *)(v7 + 40 * v107);
                  v109 = *(_DWORD *)v101;
                  if (*(_DWORD *)v108 < *(_DWORD *)v101)
                  {
                    v110 = *(_QWORD *)(v101 + 4);
                    v111 = *(_DWORD *)(v101 + 32);
                    v112 = *(_OWORD *)(v101 + 16);
                    *(_QWORD *)(v101 + 16) = 0;
                    do
                    {
                      v113 = v101;
                      v101 = (uint64_t)v108;
                      v114 = *v108;
                      *(_DWORD *)(v113 + 8) = *(_DWORD *)(v101 + 8);
                      *(_QWORD *)v113 = v114;
                      *(_DWORD *)(v113 + 32) = *(_DWORD *)(v101 + 32);
                      *(_OWORD *)(v113 + 16) = *(_OWORD *)(v101 + 16);
                      *(_QWORD *)(v101 + 16) = 0;
                      if (!v107)
                        break;
                      v107 = (v107 - 1) >> 1;
                      v108 = (uint64_t *)(v7 + 40 * v107);
                    }
                    while (*(_DWORD *)v108 < v109);
                    *(_DWORD *)v101 = v109;
                    *(_QWORD *)(v101 + 4) = v110;
                    *(_DWORD *)(v101 + 32) = v111;
                    *(_OWORD *)(v101 + 16) = v112;
                  }
                }
              }
            }
            while (v9-- > 2);
          }
          return;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = (__n128 *)(v7 + 40 * ((unint64_t)v9 >> 1));
        if ((unint64_t)v8 < 0x1401)
        {
          sub_22EA45CD0(v11, (__n128 *)a1, v127);
        }
        else
        {
          sub_22EA45CD0((__n128 *)a1, v11, v127);
          v12 = 5 * v10;
          v13 = a1 + 8 * v12;
          sub_22EA45CD0((__n128 *)(a1 + 40), (__n128 *)(v13 - 40), v126);
          sub_22EA45CD0((__n128 *)(a1 + 80), (__n128 *)(a1 + 40 + 8 * v12), v125);
          sub_22EA45CD0((__n128 *)(v13 - 40), v11, (__n128 *)(a1 + 40 + 8 * v12));
          v138 = *(_DWORD *)(a1 + 8);
          v133 = *(_QWORD *)a1;
          v14 = *(_DWORD *)(a1 + 32);
          v15 = v11->n128_u64[0];
          *(_DWORD *)(a1 + 8) = v11->n128_u32[2];
          *(_QWORD *)a1 = v15;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(v13 + 32);
          v16 = *(_OWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = 0;
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(v13 + 16);
          v11->n128_u32[2] = v138;
          v11->n128_u64[0] = v133;
          *(_DWORD *)(v13 + 32) = v14;
          *(_OWORD *)(v13 + 16) = v16;
        }
        --a3;
        v17 = *(_DWORD *)a1;
        if ((a4 & 1) == 0 && *(_DWORD *)(a1 - 40) >= v17)
        {
          v40 = *(_QWORD *)(a1 + 4);
          v41 = *(_DWORD *)(a1 + 32);
          v43 = *(_QWORD *)(a1 + 16);
          v42 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 16) = 0;
          if (v17 >= v127->n128_u32[0])
          {
            v45 = a1 + 40;
            do
            {
              v7 = v45;
              if (v45 >= (unint64_t)a2)
                break;
              v45 += 40;
            }
            while (v17 >= *(_DWORD *)v7);
          }
          else
          {
            v7 = a1;
            do
            {
              v44 = *(_DWORD *)(v7 + 40);
              v7 += 40;
            }
            while (v17 >= v44);
          }
          v46 = a2;
          if (v7 < (unint64_t)a2)
          {
            v46 = a2;
            do
            {
              v47 = *((_DWORD *)v46 - 10);
              v46 -= 5;
            }
            while (v17 < v47);
          }
          while (v7 < (unint64_t)v46)
          {
            v140 = *(_DWORD *)(v7 + 8);
            v135 = *(_QWORD *)v7;
            v48 = *(_DWORD *)(v7 + 32);
            v49 = *(_OWORD *)(v7 + 16);
            *(_QWORD *)(v7 + 16) = 0;
            v50 = *v46;
            *(_DWORD *)(v7 + 8) = *((_DWORD *)v46 + 2);
            *(_QWORD *)v7 = v50;
            *(_DWORD *)(v7 + 32) = *((_DWORD *)v46 + 8);
            *(_OWORD *)(v7 + 16) = *((_OWORD *)v46 + 1);
            *v46 = v135;
            *((_DWORD *)v46 + 2) = v140;
            *((_DWORD *)v46 + 8) = v48;
            *((_OWORD *)v46 + 1) = v49;
            do
            {
              v51 = *(_DWORD *)(v7 + 40);
              v7 += 40;
            }
            while (v17 >= v51);
            do
            {
              v52 = *((_DWORD *)v46 - 10);
              v46 -= 5;
            }
            while (v17 < v52);
          }
          if (v7 - 40 == a1)
          {
            v56 = *(_QWORD *)(v7 - 24);
            *(_DWORD *)a1 = v17;
            *(_QWORD *)(v7 - 36) = v40;
            if (v56)
            {
              v57 = *(_QWORD *)(v7 - 16);
              if (v57)
              {
                sub_22E3BB10C(v57, v56);
                *(_QWORD *)(v7 - 24) = 0;
              }
            }
          }
          else
          {
            v53 = *(_QWORD *)(v7 - 40);
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(v7 - 32);
            *(_QWORD *)a1 = v53;
            v54 = *(_QWORD *)(a1 + 16);
            if (v54)
            {
              v55 = *(_QWORD *)(a1 + 24);
              if (v55)
              {
                sub_22E3BB10C(v55, v54);
                *(_QWORD *)(a1 + 16) = 0;
              }
            }
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(v7 - 8);
            *(_OWORD *)(a1 + 16) = *(_OWORD *)(v7 - 24);
            *(_QWORD *)(v7 - 24) = 0;
            *(_DWORD *)(v7 - 40) = v17;
            *(_QWORD *)(v7 - 36) = v40;
          }
          a4 = 0;
          *(_DWORD *)(v7 - 8) = v41;
          *(_QWORD *)(v7 - 24) = v43;
          *(_QWORD *)(v7 - 16) = v42;
          continue;
        }
        v129 = a3;
        v18 = 0;
        v19 = *(_QWORD *)(a1 + 4);
        v20 = *(_DWORD *)(a1 + 32);
        v21 = *(_QWORD *)(a1 + 16);
        v22 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 16) = 0;
        do
        {
          v23 = *(_DWORD *)(a1 + v18 + 40);
          v18 += 40;
        }
        while (v23 < v17);
        v24 = a1 + v18;
        v25 = v131;
        if (v18 == 40)
        {
          v25 = v131;
          do
          {
            if (v24 >= v25)
              break;
            v27 = *(_DWORD *)(v25 - 40);
            v25 -= 40;
          }
          while (v27 >= v17);
        }
        else
        {
          do
          {
            v26 = *(_DWORD *)(v25 - 40);
            v25 -= 40;
          }
          while (v26 >= v17);
        }
        v7 = a1 + v18;
        if (v24 < v25)
        {
          v28 = v25;
          do
          {
            v139 = *(_DWORD *)(v7 + 8);
            v134 = *(_QWORD *)v7;
            v29 = *(_DWORD *)(v7 + 32);
            v30 = *(_OWORD *)(v7 + 16);
            *(_QWORD *)(v7 + 16) = 0;
            v31 = *(_QWORD *)v28;
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v28 + 8);
            *(_QWORD *)v7 = v31;
            *(_DWORD *)(v7 + 32) = *(_DWORD *)(v28 + 32);
            *(_OWORD *)(v7 + 16) = *(_OWORD *)(v28 + 16);
            *(_QWORD *)v28 = v134;
            *(_DWORD *)(v28 + 8) = v139;
            *(_DWORD *)(v28 + 32) = v29;
            *(_OWORD *)(v28 + 16) = v30;
            do
            {
              v32 = *(_DWORD *)(v7 + 40);
              v7 += 40;
            }
            while (v32 < v17);
            do
            {
              v33 = *(_DWORD *)(v28 - 40);
              v28 -= 40;
            }
            while (v33 >= v17);
          }
          while (v7 < v28);
        }
        if (v7 - 40 == a1)
        {
          v38 = *(_QWORD *)(v7 - 24);
          *(_DWORD *)a1 = v17;
          *(_QWORD *)(v7 - 36) = v19;
          if (v38)
          {
            v39 = *(_QWORD *)(v7 - 16);
            if (v39)
            {
              sub_22E3BB10C(v39, v38);
              *(_QWORD *)(v7 - 24) = 0;
            }
          }
        }
        else
        {
          v34 = *(_QWORD *)(v7 - 40);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(v7 - 32);
          *(_QWORD *)a1 = v34;
          v35 = *(_QWORD *)(a1 + 16);
          if (v35)
          {
            v36 = *(_QWORD *)(a1 + 24);
            if (v36)
            {
              sub_22E3BB10C(v36, v35);
              *(_QWORD *)(a1 + 16) = 0;
            }
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(v7 - 8);
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(v7 - 24);
          *(_QWORD *)(v7 - 24) = 0;
          *(_DWORD *)(v7 - 40) = v17;
          *(_QWORD *)(v7 - 36) = v19;
        }
        *(_DWORD *)(v7 - 8) = v20;
        *(_QWORD *)(v7 - 24) = v21;
        *(_QWORD *)(v7 - 16) = v22;
        a2 = (_QWORD *)v131;
        a3 = v129;
        if (v24 < v25)
        {
LABEL_32:
          sub_22EA450FC(a1, v7 - 40, v129, a4 & 1);
          a4 = 0;
          continue;
        }
        v37 = sub_22EA45E84(a1, v7 - 40);
        if (!sub_22EA45E84(v7, v131))
        {
          if (v37)
            continue;
          goto LABEL_32;
        }
        a2 = (_QWORD *)(v7 - 40);
        if (!v37)
          goto LABEL_1;
        return;
    }
  }
}

  while (2)
  {
    while (2)
    {
      v2 = a2;
      v3 = *a2;
      if (a2 && (v3 & 0xFE) == 0x70)
      {
        v4 = *(_DWORD *)a2;
        switch((*(_DWORD *)a2 >> 18) & 0x3F)
        {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
            return sub_22EFFBE1C((unint64_t)a2, *a1, 2) != 0;
          case 0x20:
            a2 = 0;
            v5 = (unsigned __int8 *)*((_QWORD *)v2 + 3);
            if (!v5)
              continue;
            break;
          default:
            goto LABEL_41;
        }
        while (1)
        {
          a2 = v5;
          v6 = *v5;
          if (v6 > 213)
          {
            if (v6 == 233)
            {
              if ((*(_DWORD *)a2 & 0x7C0000) != 0x300000)
                goto LABEL_1;
              v8 = a2 + 16;
            }
            else
            {
              if (v6 != 214)
                goto LABEL_1;
              v8 = a2 + 24;
            }
          }
          else if (v6 == 155)
          {
            if ((**((_DWORD **)a2 + 2) & 0x18000) != 0)
              goto LABEL_1;
            if (a2[48])
              v8 = a2 + 24;
            else
              v8 = a2 + 32;
          }
          else
          {
            if (v6 != 176)
              goto LABEL_1;
            v7 = *((unsigned int *)a2 + 5);
            if ((_DWORD)v7 == -1)
              goto LABEL_1;
            v8 = &a2[8 * v7 + 40];
          }
          v5 = *(unsigned __int8 **)v8;
          if (v5 == a2)
            goto LABEL_1;
        }
      }
      break;
    }
    if (!a2 || v3 != 233)
LABEL_42:
      __asm { BR              X12 }
    v4 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x1F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xD:
        return sub_22EFFBE1C((unint64_t)a2, *a1, 2) != 0;
      case 0xC:
        a2 = 0;
        v9 = (unsigned __int8 *)*((_QWORD *)v2 + 2);
        if (!v9)
          continue;
        break;
      default:
LABEL_41:
        v3 = v4;
        goto LABEL_42;
    }
    break;
  }
  while (1)
  {
    a2 = v9;
    v10 = *v9;
    if (v10 > 213)
    {
      if (v10 == 233)
      {
        if ((*(_DWORD *)a2 & 0x7C0000) != 0x300000)
          goto LABEL_1;
        v12 = a2 + 16;
      }
      else
      {
        if (v10 != 214)
          goto LABEL_1;
        v12 = a2 + 24;
      }
    }
    else if (v10 == 155)
    {
      if ((**((_DWORD **)a2 + 2) & 0x18000) != 0)
        goto LABEL_1;
      if (a2[48])
        v12 = a2 + 24;
      else
        v12 = a2 + 32;
    }
    else
    {
      if (v10 != 176)
        goto LABEL_1;
      v11 = *((unsigned int *)a2 + 5);
      if ((_DWORD)v11 == -1)
        goto LABEL_1;
      v12 = &a2[8 * v11 + 40];
    }
    v9 = *(unsigned __int8 **)v12;
    if (v9 == a2)
      goto LABEL_1;
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*((_QWORD *)a2 - 1) < *(_QWORD *)(v8 + 8))
        {
          v90 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(a2 - 1);
          *(a2 - 1) = v90;
        }
        return;
      case 3:
        sub_22EC6FD48((__int128 *)v8, (__int128 *)(v8 + 16), a2 - 1);
        return;
      case 4:
        sub_22EC6FFEC(v8, v8 + 16, v8 + 32, (uint64_t)(a2 - 1));
        return;
      case 5:
        v37 = (__int128 *)(v8 + 16);
        v38 = (__int128 *)(v8 + 32);
        v39 = (__int128 *)(v8 + 48);
        sub_22EC6FFEC(v8, v8 + 16, v8 + 32, v8 + 48);
        if (*((_QWORD *)a2 - 1) < *(_QWORD *)(v8 + 56))
        {
          v40 = *v39;
          *v39 = *(a2 - 1);
          *(a2 - 1) = v40;
          if (*(_QWORD *)(v8 + 56) < *(_QWORD *)(v8 + 40))
          {
            v41 = *v38;
            *v38 = *v39;
            *v39 = v41;
            if (*(_QWORD *)(v8 + 40) < *(_QWORD *)(v8 + 24))
            {
              v42 = *v37;
              *v37 = *v38;
              *v38 = v42;
              if (*(_QWORD *)(v8 + 24) < *(_QWORD *)(v8 + 8))
              {
                v91 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *v37;
                *v37 = v91;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 383)
        {
          v43 = (__int128 *)(v8 + 16);
          v45 = (__int128 *)v8 == a2 || v43 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v45)
            {
              v46 = 0;
              v47 = (_QWORD *)v8;
              do
              {
                v48 = v47[3];
                v49 = v47[1];
                v47 = v43;
                if (v48 < v49)
                {
                  v50 = *(_QWORD *)v43;
                  v51 = v46;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v51 + 16) = *(_OWORD *)(v8 + v51);
                    if (!v51)
                      break;
                    v52 = *(_QWORD *)(v8 + v51 - 8);
                    v51 -= 16;
                    if (v48 >= v52)
                    {
                      v53 = (_QWORD *)(v8 + v51 + 16);
                      goto LABEL_79;
                    }
                  }
                  v53 = (_QWORD *)v8;
LABEL_79:
                  *v53 = v50;
                  v53[1] = v48;
                }
                v43 = (__int128 *)(v47 + 2);
                v46 += 16;
              }
              while (v47 + 2 != (_QWORD *)a2);
            }
          }
          else if (!v45)
          {
            do
            {
              v82 = *(_QWORD *)(a1 + 24);
              v83 = *(_QWORD *)(a1 + 8);
              a1 = (uint64_t)v43;
              if (v82 < v83)
              {
                v84 = *(_QWORD *)v43;
                v85 = a1;
                do
                {
                  *(_OWORD *)v85 = *(_OWORD *)(v85 - 16);
                  v86 = *(_QWORD *)(v85 - 24);
                  v85 -= 16;
                }
                while (v82 < v86);
                *(_QWORD *)v85 = v84;
                *(_QWORD *)(v85 + 8) = v82;
              }
              v43 = (__int128 *)(a1 + 16);
            }
            while ((__int128 *)(a1 + 16) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__int128 *)v8 != a2)
          {
            v54 = (unint64_t)(v10 - 2) >> 1;
            v55 = v54;
            do
            {
              v56 = v55;
              if (v54 >= v55)
              {
                v57 = (2 * v55) | 1;
                v58 = (_QWORD *)(v8 + 16 * v57);
                if (2 * v56 + 2 < v10)
                {
                  v59 = v58[1];
                  v60 = v58[3];
                  v58 += 2 * (v59 < v60);
                  if (v59 < v60)
                    v57 = 2 * v56 + 2;
                }
                v61 = *(_QWORD *)(v8 + 16 * v56 + 8);
                if (v58[1] >= v61)
                {
                  v62 = (_QWORD *)(v8 + 16 * v56);
                  v63 = *v62;
                  do
                  {
                    v64 = v62;
                    v62 = v58;
                    *v64 = *(_OWORD *)v58;
                    if (v54 < v57)
                      break;
                    v65 = (2 * v57) | 1;
                    v58 = (_QWORD *)(v8 + 16 * v65);
                    v66 = 2 * v57 + 2;
                    if (v66 < v10)
                    {
                      v67 = v58[1];
                      v68 = v58[3];
                      v58 += 2 * (v67 < v68);
                      if (v67 < v68)
                        v65 = v66;
                    }
                    v57 = v65;
                  }
                  while (v58[1] >= v61);
                  *v62 = v63;
                  v62[1] = v61;
                }
              }
              v55 = v56 - 1;
            }
            while (v56);
            do
            {
              v69 = 0;
              v92 = *(_OWORD *)v8;
              v70 = (_OWORD *)v8;
              do
              {
                v71 = &v70[v69 + 1];
                v72 = (2 * v69) | 1;
                v73 = 2 * v69 + 2;
                if (v73 < v10)
                {
                  v74 = *((_QWORD *)v71 + 1);
                  v75 = *((_QWORD *)v71 + 3);
                  v71 += v74 < v75;
                  if (v74 < v75)
                    v72 = v73;
                }
                *v70 = *v71;
                v70 = v71;
                v69 = v72;
              }
              while (v72 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v71 == --a2)
              {
                *v71 = v92;
              }
              else
              {
                *v71 = *a2;
                *a2 = v92;
                v76 = (uint64_t)v71 - v8 + 16;
                if (v76 >= 17)
                {
                  v77 = (((unint64_t)v76 >> 4) - 2) >> 1;
                  v78 = *((_QWORD *)v71 + 1);
                  if (*(_QWORD *)(v8 + 16 * v77 + 8) < v78)
                  {
                    v79 = *(_QWORD *)v71;
                    do
                    {
                      v80 = v71;
                      v71 = (__int128 *)(v8 + 16 * v77);
                      *v80 = *v71;
                      if (!v77)
                        break;
                      v77 = (v77 - 1) >> 1;
                    }
                    while (*(_QWORD *)(v8 + 16 * v77 + 8) < v78);
                    *(_QWORD *)v71 = v79;
                    *((_QWORD *)v71 + 1) = v78;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (__int128 *)(v8 + 16 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          sub_22EC6FD48((__int128 *)(a1 + 16 * ((unint64_t)v10 >> 1)), (__int128 *)a1, a2 - 1);
        }
        else
        {
          sub_22EC6FD48((__int128 *)a1, (__int128 *)(a1 + 16 * ((unint64_t)v10 >> 1)), a2 - 1);
          sub_22EC6FD48((__int128 *)(a1 + 16), v12 - 1, a2 - 2);
          sub_22EC6FD48((__int128 *)(a1 + 32), (__int128 *)(a1 + 16 + 16 * v11), a2 - 3);
          sub_22EC6FD48(v12 - 1, v12, (__int128 *)(a1 + 16 + 16 * v11));
          v87 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v12;
          *v12 = v87;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v13 = *(_QWORD *)(a1 + 8);
          if (*(_QWORD *)(a1 - 8) < v13)
            goto LABEL_11;
          if (v13 >= *((_QWORD *)a2 - 1))
          {
            v29 = a1 + 16;
            do
            {
              v8 = v29;
              if (v29 >= (unint64_t)a2)
                break;
              v30 = *(_QWORD *)(v29 + 8);
              v29 += 16;
            }
            while (v13 >= v30);
          }
          else
          {
            v27 = a1;
            do
            {
              v8 = v27 + 16;
              v28 = *(_QWORD *)(v27 + 24);
              v27 += 16;
            }
            while (v13 >= v28);
          }
          v31 = a2;
          if (v8 < (unint64_t)a2)
          {
            v32 = a2;
            do
            {
              v31 = v32 - 1;
              v33 = *((_QWORD *)v32-- - 1);
            }
            while (v13 < v33);
          }
          v34 = *(_QWORD *)a1;
          while (v8 < (unint64_t)v31)
          {
            v89 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v31;
            *v31 = v89;
            do
            {
              v35 = *(_QWORD *)(v8 + 24);
              v8 += 16;
            }
            while (v13 >= v35);
            do
              v36 = *((_QWORD *)v31-- - 1);
            while (v13 < v36);
          }
          if (v8 - 16 != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v34;
          *(_QWORD *)(v8 - 8) = v13;
          continue;
        }
        v13 = *(_QWORD *)(a1 + 8);
LABEL_11:
        v14 = 0;
        v15 = *(_QWORD *)a1;
        do
        {
          v16 = *(_QWORD *)(a1 + v14 + 24);
          v14 += 16;
        }
        while (v16 < v13);
        v17 = a1 + v14;
        v18 = a2;
        if (v14 == 16)
        {
          v21 = a2;
          while (v17 < (unint64_t)v21)
          {
            v19 = v21 - 1;
            v22 = *((_QWORD *)v21-- - 1);
            if (v22 < v13)
              goto LABEL_21;
          }
          v19 = v21;
        }
        else
        {
          do
          {
            v19 = v18 - 1;
            v20 = *((_QWORD *)v18-- - 1);
          }
          while (v20 >= v13);
        }
LABEL_21:
        v8 = v17;
        if (v17 < (unint64_t)v19)
        {
          v23 = v19;
          do
          {
            v88 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v23;
            *v23 = v88;
            do
            {
              v24 = *(_QWORD *)(v8 + 24);
              v8 += 16;
            }
            while (v24 < v13);
            do
              v25 = *((_QWORD *)v23-- - 1);
            while (v25 >= v13);
          }
          while (v8 < (unint64_t)v23);
        }
        if (v8 - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v15;
        *(_QWORD *)(v8 - 8) = v13;
        if (v17 < (unint64_t)v19)
        {
LABEL_32:
          sub_22EC6F624(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = sub_22EC6FDEC(a1, (_QWORD *)(v8 - 16));
        if (!sub_22EC6FDEC(v8, a2))
        {
          if (v26)
            continue;
          goto LABEL_32;
        }
        a2 = (__int128 *)(v8 - 16);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v6 = a2;
  v148 = (_DWORD *)(a2 - 144);
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = v6 - v7;
    v9 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - v7) >> 4);
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (sub_22E3B38EC(v148, (_DWORD *)v7))
        {
          v54 = *(_QWORD *)v7;
          v55 = *(_QWORD *)(v7 + 8);
          *(_OWORD *)v7 = *(_OWORD *)v148;
          *(_QWORD *)(a2 - 144) = v54;
          *(_QWORD *)(a2 - 136) = v55;
          sub_22EF30808(v7 + 16, a2 - 128);
        }
        return;
      case 3uLL:
        sub_22EF30300((uint64_t *)v7, (uint64_t *)(v7 + 144), (uint64_t)v148);
        return;
      case 4uLL:
        sub_22EF30A3C((uint64_t *)v7, (uint64_t *)(v7 + 144), v7 + 288, (uint64_t)v148);
        return;
      case 5uLL:
        sub_22EF301F4((uint64_t *)v7, (uint64_t *)(v7 + 144), v7 + 288, v7 + 432, (uint64_t)v148);
        return;
      default:
        if (v8 > 3455)
        {
          if (!a3)
          {
            if (v7 != v6)
            {
              v150 = (v9 - 2) >> 1;
              v72 = v150;
              do
              {
                v73 = v72;
                if (v150 >= v72)
                {
                  v74 = (2 * v72) | 1;
                  v75 = a1 + 144 * v74;
                  if (2 * v72 + 2 < (uint64_t)v9
                    && sub_22E3B38EC((_DWORD *)(a1 + 144 * v74), (_DWORD *)(v75 + 144)))
                  {
                    v75 += 144;
                    v74 = 2 * v73 + 2;
                  }
                  v76 = a1 + 144 * v73;
                  if ((sub_22E3B38EC((_DWORD *)v75, (_DWORD *)v76) & 1) == 0)
                  {
                    v165 = *(_OWORD *)v76;
                    v77 = a1 + 144 * v73;
                    v78 = *(_OWORD *)(v77 + 16);
                    v167 = *(_QWORD *)(v77 + 32);
                    v166 = v78;
                    *(_QWORD *)(v77 + 24) = 0;
                    *(_QWORD *)(v77 + 32) = 0;
                    *(_QWORD *)(v77 + 16) = 0;
                    v168 = *(_BYTE *)(v77 + 40);
                    v79 = *(_OWORD *)(v77 + 48);
                    v170 = *(_QWORD *)(v77 + 64);
                    v169 = v79;
                    *(_QWORD *)(v77 + 56) = 0;
                    *(_QWORD *)(v77 + 64) = 0;
                    *(_QWORD *)(v77 + 48) = 0;
                    LOBYTE(v171) = 0;
                    v173 = 0;
                    if (*(_BYTE *)(v77 + 96))
                    {
                      v80 = a1 + 144 * v73;
                      v81 = *(_OWORD *)(v80 + 72);
                      v172 = *(_QWORD *)(v80 + 88);
                      v171 = v81;
                      *(_QWORD *)(v80 + 80) = 0;
                      *(_QWORD *)(v80 + 88) = 0;
                      *(_QWORD *)(v80 + 72) = 0;
                      v173 = 1;
                    }
                    LOBYTE(v174) = 0;
                    v176 = 0;
                    if (*(_BYTE *)(a1 + 144 * v73 + 128))
                    {
                      v82 = a1 + 144 * v73;
                      v83 = *(_OWORD *)(v82 + 104);
                      v175 = *(_QWORD *)(v82 + 120);
                      v174 = v83;
                      *(_QWORD *)(v82 + 112) = 0;
                      *(_QWORD *)(v82 + 120) = 0;
                      *(_QWORD *)(v82 + 104) = 0;
                      v176 = 1;
                    }
                    v177 = *(_BYTE *)(a1 + 144 * v73 + 136);
                    do
                    {
                      v84 = v75;
                      *(_OWORD *)v76 = *(_OWORD *)v75;
                      v85 = (void **)(v76 + 16);
                      if (*(char *)(v76 + 39) < 0)
                        operator delete(*v85);
                      v86 = (void **)(v75 + 16);
                      v87 = *(_OWORD *)(v75 + 16);
                      *(_QWORD *)(v76 + 32) = *(_QWORD *)(v75 + 32);
                      *(_OWORD *)v85 = v87;
                      *(_BYTE *)(v75 + 39) = 0;
                      *(_BYTE *)(v75 + 16) = 0;
                      *(_BYTE *)(v76 + 40) = *(_BYTE *)(v75 + 40);
                      v88 = (void **)(v76 + 48);
                      if (*(char *)(v76 + 71) < 0)
                        operator delete(*v88);
                      v89 = *(_OWORD *)(v75 + 48);
                      *(_QWORD *)(v76 + 64) = *(_QWORD *)(v75 + 64);
                      *(_OWORD *)v88 = v89;
                      *(_BYTE *)(v75 + 71) = 0;
                      *(_BYTE *)(v75 + 48) = 0;
                      sub_22EF2DD4C(v76 + 72, (__int128 *)(v75 + 72));
                      sub_22EF2DD4C(v76 + 104, (__int128 *)(v75 + 104));
                      *(_BYTE *)(v76 + 136) = *(_BYTE *)(v75 + 136);
                      if (v150 < v74)
                        break;
                      v90 = (2 * v74) | 1;
                      v75 = a1 + 144 * v90;
                      v91 = 2 * v74 + 2;
                      if (v91 < (uint64_t)v9
                        && sub_22E3B38EC((_DWORD *)(a1 + 144 * v90), (_DWORD *)(v75 + 144)))
                      {
                        v75 += 144;
                        v90 = v91;
                      }
                      v76 = v84;
                      v74 = v90;
                    }
                    while (!sub_22E3B38EC((_DWORD *)v75, &v165));
                    *(_OWORD *)v84 = v165;
                    if (*(char *)(v84 + 39) < 0)
                      operator delete(*v86);
                    v92 = (void **)(v84 + 48);
                    v93 = v166;
                    *(_QWORD *)(v84 + 32) = v167;
                    *(_OWORD *)v86 = v93;
                    HIBYTE(v167) = 0;
                    LOBYTE(v166) = 0;
                    *(_BYTE *)(v84 + 40) = v168;
                    if (*(char *)(v84 + 71) < 0)
                      operator delete(*v92);
                    v94 = v169;
                    *(_QWORD *)(v84 + 64) = v170;
                    *(_OWORD *)v92 = v94;
                    HIBYTE(v170) = 0;
                    LOBYTE(v169) = 0;
                    sub_22EF2DD4C(v84 + 72, &v171);
                    sub_22EF2DD4C(v84 + 104, &v174);
                    *(_BYTE *)(v84 + 136) = v177;
                    if (v176)
                    {
                      if (SHIBYTE(v175) < 0)
                        operator delete((void *)v174);
                      v176 = 0;
                    }
                    if (v173)
                    {
                      if (SHIBYTE(v172) < 0)
                        operator delete((void *)v171);
                      v173 = 0;
                    }
                    if (SHIBYTE(v170) < 0)
                      operator delete((void *)v169);
                    if (SHIBYTE(v167) < 0)
                      operator delete((void *)v166);
                  }
                }
                v72 = v73 - 1;
              }
              while (v73);
              v145 = (__int128 *)(a1 + 48);
              v146 = (__int128 *)(a1 + 16);
              v143 = (__int128 *)(a1 + 104);
              v144 = (__int128 *)(a1 + 72);
              do
              {
                v152 = *(_OWORD *)a1;
                v153 = *v146;
                v154 = *(_QWORD *)(a1 + 32);
                *(_QWORD *)(a1 + 24) = 0;
                *(_QWORD *)(a1 + 32) = 0;
                *(_QWORD *)v146 = 0;
                v155 = *(_BYTE *)(a1 + 40);
                v157 = *(_QWORD *)(a1 + 64);
                v156 = *v145;
                *(_QWORD *)(a1 + 56) = 0;
                *(_QWORD *)(a1 + 64) = 0;
                *(_QWORD *)v145 = 0;
                LOBYTE(v158) = 0;
                v160 = 0;
                if (*(_BYTE *)(a1 + 96))
                {
                  v95 = *v144;
                  v159 = *(_QWORD *)(a1 + 88);
                  v158 = v95;
                  *(_QWORD *)(a1 + 80) = 0;
                  *(_QWORD *)(a1 + 88) = 0;
                  *(_QWORD *)v144 = 0;
                  v160 = 1;
                }
                LOBYTE(__p) = 0;
                v163 = 0;
                if (*(_BYTE *)(a1 + 128))
                {
                  v96 = *v143;
                  v162 = *(_QWORD *)(a1 + 120);
                  __p = v96;
                  *(_QWORD *)(a1 + 112) = 0;
                  *(_QWORD *)(a1 + 120) = 0;
                  *(_QWORD *)v143 = 0;
                  v163 = 1;
                }
                v97 = 0;
                v164 = *(_BYTE *)(a1 + 136);
                v98 = a1;
                do
                {
                  v99 = v98 + 144 * v97 + 144;
                  v100 = 2 * v97;
                  v97 = (2 * v97) | 1;
                  v101 = v100 + 2;
                  if (v100 + 2 < (uint64_t)v9 && sub_22E3B38EC((_DWORD *)v99, (_DWORD *)(v99 + 144)))
                  {
                    v99 += 144;
                    v97 = v101;
                  }
                  *(_OWORD *)v98 = *(_OWORD *)v99;
                  v102 = (void **)(v98 + 16);
                  if (*(char *)(v98 + 39) < 0)
                    operator delete(*v102);
                  v103 = (void **)(v99 + 16);
                  v104 = *(_OWORD *)(v99 + 16);
                  *(_QWORD *)(v98 + 32) = *(_QWORD *)(v99 + 32);
                  *(_OWORD *)v102 = v104;
                  *(_BYTE *)(v99 + 39) = 0;
                  *(_BYTE *)(v99 + 16) = 0;
                  *(_BYTE *)(v98 + 40) = *(_BYTE *)(v99 + 40);
                  v105 = (void **)(v98 + 48);
                  if (*(char *)(v98 + 71) < 0)
                    operator delete(*v105);
                  v106 = *(_OWORD *)(v99 + 48);
                  *(_QWORD *)(v98 + 64) = *(_QWORD *)(v99 + 64);
                  *(_OWORD *)v105 = v106;
                  *(_BYTE *)(v99 + 71) = 0;
                  *(_BYTE *)(v99 + 48) = 0;
                  v107 = (__int128 *)(v99 + 72);
                  sub_22EF2DD4C(v98 + 72, (__int128 *)(v99 + 72));
                  v108 = (__int128 *)(v99 + 104);
                  sub_22EF2DD4C(v98 + 104, (__int128 *)(v99 + 104));
                  *(_BYTE *)(v98 + 136) = *(_BYTE *)(v99 + 136);
                  v98 = v99;
                }
                while (v97 <= (uint64_t)((v9 - 2) >> 1));
                v109 = v99 + 48;
                v110 = (_OWORD *)(a2 - 144);
                v149 = (__int128 *)(v99 + 48);
                if (v99 == a2 - 144)
                {
                  *(_OWORD *)v99 = v152;
                  if (*(char *)(v99 + 39) < 0)
                  {
                    operator delete(*v103);
                    v109 = v99 + 48;
                  }
                  *(_QWORD *)(v99 + 32) = v154;
                  *(_OWORD *)v103 = v153;
                  *(_BYTE *)(v99 + 40) = v155;
                  if (*(char *)(v99 + 71) < 0)
                  {
                    operator delete(*(void **)v109);
                    v109 = v99 + 48;
                  }
                  *(_QWORD *)(v109 + 16) = v157;
                  *(_OWORD *)v109 = v156;
                  sub_22EF2DD4C(v99 + 72, &v158);
                  sub_22EF2DD4C(v99 + 104, &__p);
                  *(_BYTE *)(v99 + 136) = v164;
                }
                else
                {
                  *(_OWORD *)v99 = *v110;
                  if (*(char *)(v99 + 39) < 0)
                  {
                    operator delete(*v103);
                    v109 = v99 + 48;
                  }
                  v111 = (void **)(a2 - 128);
                  v112 = *(_OWORD *)(a2 - 128);
                  *(_QWORD *)(v99 + 32) = *(_QWORD *)(a2 - 112);
                  *(_OWORD *)v103 = v112;
                  *(_BYTE *)(a2 - 105) = 0;
                  *(_BYTE *)(a2 - 128) = 0;
                  *(_BYTE *)(v99 + 40) = *(_BYTE *)(a2 - 104);
                  if (*(char *)(v99 + 71) < 0)
                  {
                    operator delete(*(void **)v109);
                    v109 = v99 + 48;
                  }
                  v113 = *(_OWORD *)(a2 - 96);
                  *(_QWORD *)(v109 + 16) = *(_QWORD *)(a2 - 80);
                  *(_OWORD *)v109 = v113;
                  *(_BYTE *)(a2 - 73) = 0;
                  *(_BYTE *)(a2 - 96) = 0;
                  sub_22EF2DD4C(v99 + 72, (__int128 *)(a2 - 72));
                  sub_22EF2DD4C(v99 + 104, (__int128 *)(a2 - 40));
                  *(_BYTE *)(v99 + 136) = *(_BYTE *)(a2 - 8);
                  *v110 = v152;
                  if (*(char *)(a2 - 105) < 0)
                    operator delete(*v111);
                  v114 = (void **)(a2 - 96);
                  *(_QWORD *)(a2 - 112) = v154;
                  *(_OWORD *)v111 = v153;
                  *(_BYTE *)(a2 - 104) = v155;
                  if (*(char *)(a2 - 73) < 0)
                    operator delete(*v114);
                  *(_QWORD *)(a2 - 80) = v157;
                  *(_OWORD *)v114 = v156;
                  sub_22EF2DD4C(a2 - 72, &v158);
                  sub_22EF2DD4C(a2 - 40, &__p);
                  *(_BYTE *)(a2 - 8) = v164;
                  v110 = (_OWORD *)(a2 - 144);
                  if (v99 + 144 - a1 >= 145)
                  {
                    v115 = ((v99 + 144 - a1) / 0x90uLL - 2) >> 1;
                    v116 = a1 + 144 * v115;
                    if (sub_22E3B38EC((_DWORD *)v116, (_DWORD *)v99))
                    {
                      v165 = *(_OWORD *)v99;
                      v117 = *(_QWORD *)(v99 + 32);
                      v166 = *(_OWORD *)v103;
                      v167 = v117;
                      *(_QWORD *)(v99 + 24) = 0;
                      *(_QWORD *)(v99 + 32) = 0;
                      *v103 = 0;
                      v168 = *(_BYTE *)(v99 + 40);
                      v118 = *v149;
                      v170 = *(_QWORD *)(v99 + 64);
                      v169 = v118;
                      *(_QWORD *)(v99 + 56) = 0;
                      *(_QWORD *)(v99 + 64) = 0;
                      *(_QWORD *)v149 = 0;
                      LOBYTE(v171) = 0;
                      v173 = 0;
                      if (*(_BYTE *)(v99 + 96))
                      {
                        v119 = *v107;
                        v172 = *(_QWORD *)(v99 + 88);
                        v171 = v119;
                        *(_QWORD *)(v99 + 80) = 0;
                        *(_QWORD *)(v99 + 88) = 0;
                        *(_QWORD *)v107 = 0;
                        v173 = 1;
                      }
                      LOBYTE(v174) = 0;
                      v176 = 0;
                      if (*(_BYTE *)(v99 + 128))
                      {
                        v120 = *v108;
                        v175 = *(_QWORD *)(v99 + 120);
                        v174 = v120;
                        *(_QWORD *)(v99 + 112) = 0;
                        *(_QWORD *)(v99 + 120) = 0;
                        *(_QWORD *)v108 = 0;
                        v176 = 1;
                      }
                      v177 = *(_BYTE *)(v99 + 136);
                      do
                      {
                        v121 = v116;
                        *(_OWORD *)v99 = *(_OWORD *)v116;
                        v122 = (void **)(v99 + 16);
                        if (*(char *)(v99 + 39) < 0)
                          operator delete(*v122);
                        v123 = (void **)(v116 + 16);
                        v124 = *(_OWORD *)(v116 + 16);
                        *(_QWORD *)(v99 + 32) = *(_QWORD *)(v116 + 32);
                        *(_OWORD *)v122 = v124;
                        *(_BYTE *)(v116 + 39) = 0;
                        *(_BYTE *)(v116 + 16) = 0;
                        *(_BYTE *)(v99 + 40) = *(_BYTE *)(v116 + 40);
                        v125 = (void **)(v99 + 48);
                        if (*(char *)(v99 + 71) < 0)
                          operator delete(*v125);
                        v126 = *(_OWORD *)(v116 + 48);
                        *(_QWORD *)(v99 + 64) = *(_QWORD *)(v116 + 64);
                        *(_OWORD *)v125 = v126;
                        *(_BYTE *)(v116 + 71) = 0;
                        *(_BYTE *)(v116 + 48) = 0;
                        sub_22EF2DD4C(v99 + 72, (__int128 *)(v116 + 72));
                        sub_22EF2DD4C(v99 + 104, (__int128 *)(v116 + 104));
                        *(_BYTE *)(v99 + 136) = *(_BYTE *)(v116 + 136);
                        if (!v115)
                          break;
                        v115 = (v115 - 1) >> 1;
                        v116 = a1 + 144 * v115;
                        v99 = v121;
                      }
                      while ((sub_22E3B38EC((_DWORD *)v116, &v165) & 1) != 0);
                      *(_OWORD *)v121 = v165;
                      if (*(char *)(v121 + 39) < 0)
                        operator delete(*v123);
                      v127 = (void **)(v121 + 48);
                      v128 = v166;
                      *(_QWORD *)(v121 + 32) = v167;
                      *(_OWORD *)v123 = v128;
                      HIBYTE(v167) = 0;
                      LOBYTE(v166) = 0;
                      *(_BYTE *)(v121 + 40) = v168;
                      if (*(char *)(v121 + 71) < 0)
                        operator delete(*v127);
                      v129 = v169;
                      *(_QWORD *)(v121 + 64) = v170;
                      *(_OWORD *)v127 = v129;
                      HIBYTE(v170) = 0;
                      LOBYTE(v169) = 0;
                      sub_22EF2DD4C(v121 + 72, &v171);
                      sub_22EF2DD4C(v121 + 104, &v174);
                      *(_BYTE *)(v121 + 136) = v177;
                      v110 = (_OWORD *)(a2 - 144);
                      if (v176)
                      {
                        if (SHIBYTE(v175) < 0)
                          operator delete((void *)v174);
                        v176 = 0;
                      }
                      if (v173)
                      {
                        if (SHIBYTE(v172) < 0)
                          operator delete((void *)v171);
                        v173 = 0;
                      }
                      if (SHIBYTE(v170) < 0)
                        operator delete((void *)v169);
                      if (SHIBYTE(v167) < 0)
                        operator delete((void *)v166);
                    }
                  }
                }
                if (v163)
                {
                  if (SHIBYTE(v162) < 0)
                    operator delete((void *)__p);
                  v163 = 0;
                }
                if (v160)
                {
                  if (SHIBYTE(v159) < 0)
                    operator delete((void *)v158);
                  v160 = 0;
                }
                a2 = (uint64_t)v110;
              }
              while ((uint64_t)v9-- > 2);
            }
            return;
          }
          v10 = v7 + 144 * (v9 >> 1);
          if ((unint64_t)v8 < 0x4801)
          {
            sub_22EF30300((uint64_t *)(v7 + 144 * (v9 >> 1)), (uint64_t *)v7, (uint64_t)v148);
          }
          else
          {
            sub_22EF30300((uint64_t *)v7, (uint64_t *)(v7 + 144 * (v9 >> 1)), (uint64_t)v148);
            v11 = (uint64_t *)(v7 + 144 * (v9 >> 1) - 144);
            sub_22EF30300((uint64_t *)(a1 + 144), v11, a2 - 288);
            sub_22EF30300((uint64_t *)(a1 + 288), (uint64_t *)(a1 + 144 + 144 * (v9 >> 1)), a2 - 432);
            sub_22EF30300(v11, (uint64_t *)(a1 + 144 * (v9 >> 1)), a1 + 144 + 144 * (v9 >> 1));
            v12 = *(_QWORD *)a1;
            v13 = *(_QWORD *)(a1 + 8);
            *(_OWORD *)a1 = *(_OWORD *)v10;
            *(_QWORD *)v10 = v12;
            *(_QWORD *)(v10 + 8) = v13;
            sub_22EF30808(a1 + 16, a1 + 16 + 144 * (v9 >> 1));
          }
          --a3;
          if ((a4 & 1) == 0 && (sub_22E3B38EC((_DWORD *)(a1 - 144), (_DWORD *)a1) & 1) == 0)
          {
            v35 = *(_OWORD *)(a1 + 16);
            v165 = *(_OWORD *)a1;
            v36 = *(_QWORD *)(a1 + 32);
            v166 = v35;
            v167 = v36;
            *(_QWORD *)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 32) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            v168 = *(_BYTE *)(a1 + 40);
            v37 = *(_OWORD *)(a1 + 48);
            v170 = *(_QWORD *)(a1 + 64);
            v169 = v37;
            *(_QWORD *)(a1 + 56) = 0;
            *(_QWORD *)(a1 + 64) = 0;
            *(_QWORD *)(a1 + 48) = 0;
            LOBYTE(v171) = 0;
            v173 = 0;
            if (*(_BYTE *)(a1 + 96))
            {
              v38 = *(_OWORD *)(a1 + 72);
              v172 = *(_QWORD *)(a1 + 88);
              v171 = v38;
              *(_QWORD *)(a1 + 80) = 0;
              *(_QWORD *)(a1 + 88) = 0;
              *(_QWORD *)(a1 + 72) = 0;
              v173 = 1;
            }
            LOBYTE(v174) = 0;
            v176 = 0;
            if (*(_BYTE *)(a1 + 128))
            {
              v39 = *(_OWORD *)(a1 + 104);
              v175 = *(_QWORD *)(a1 + 120);
              v174 = v39;
              *(_QWORD *)(a1 + 112) = 0;
              *(_QWORD *)(a1 + 120) = 0;
              *(_QWORD *)(a1 + 104) = 0;
              v176 = 1;
            }
            v177 = *(_BYTE *)(a1 + 136);
            if ((sub_22E3B38EC(&v165, v148) & 1) != 0)
            {
              v7 = a1;
              do
                v7 += 144;
              while ((sub_22E3B38EC(&v165, (_DWORD *)v7) & 1) == 0);
            }
            else
            {
              v40 = (_DWORD *)(a1 + 144);
              do
              {
                v7 = (unint64_t)v40;
                if ((unint64_t)v40 >= v6)
                  break;
                v41 = sub_22E3B38EC(&v165, v40);
                v40 = (_DWORD *)(v7 + 144);
              }
              while (!v41);
            }
            v42 = v6;
            if (v7 < v6)
            {
              v42 = v6;
              do
                v42 -= 144;
              while ((sub_22E3B38EC(&v165, (_DWORD *)v42) & 1) != 0);
            }
            while (v7 < v42)
            {
              v43 = *(_QWORD *)v7;
              v44 = *(_QWORD *)(v7 + 8);
              *(_OWORD *)v7 = *(_OWORD *)v42;
              *(_QWORD *)v42 = v43;
              *(_QWORD *)(v42 + 8) = v44;
              sub_22EF30808(v7 + 16, v42 + 16);
              do
                v7 += 144;
              while (!sub_22E3B38EC(&v165, (_DWORD *)v7));
              do
                v42 -= 144;
              while ((sub_22E3B38EC(&v165, (_DWORD *)v42) & 1) != 0);
            }
            v45 = (_OWORD *)(v7 - 144);
            if (v7 - 144 != a1)
            {
              v46 = (void **)(a1 + 16);
              *(_OWORD *)a1 = *v45;
              if (*(char *)(a1 + 39) < 0)
                operator delete(*v46);
              v47 = (void **)(a1 + 48);
              v48 = *(_OWORD *)(v7 - 128);
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 112);
              *(_OWORD *)v46 = v48;
              *(_BYTE *)(v7 - 105) = 0;
              *(_BYTE *)(v7 - 128) = 0;
              *(_BYTE *)(a1 + 40) = *(_BYTE *)(v7 - 104);
              if (*(char *)(a1 + 71) < 0)
                operator delete(*v47);
              v49 = *(_OWORD *)(v7 - 96);
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(v7 - 80);
              *(_OWORD *)v47 = v49;
              *(_BYTE *)(v7 - 73) = 0;
              *(_BYTE *)(v7 - 96) = 0;
              sub_22EF2DD4C(a1 + 72, (__int128 *)(v7 - 72));
              sub_22EF2DD4C(a1 + 104, (__int128 *)(v7 - 40));
              *(_BYTE *)(a1 + 136) = *(_BYTE *)(v7 - 8);
            }
            *v45 = v165;
            v50 = (void **)(v7 - 128);
            if (*(char *)(v7 - 105) < 0)
              operator delete(*v50);
            v51 = v166;
            *(_QWORD *)(v7 - 112) = v167;
            *(_OWORD *)v50 = v51;
            HIBYTE(v167) = 0;
            LOBYTE(v166) = 0;
            *(_BYTE *)(v7 - 104) = v168;
            v52 = (void **)(v7 - 96);
            if (*(char *)(v7 - 73) < 0)
              operator delete(*v52);
            v53 = v169;
            *(_QWORD *)(v7 - 80) = v170;
            *(_OWORD *)v52 = v53;
            HIBYTE(v170) = 0;
            LOBYTE(v169) = 0;
            sub_22EF2DD4C(v7 - 72, &v171);
            sub_22EF2DD4C(v7 - 40, &v174);
            *(_BYTE *)(v7 - 8) = v177;
            if (v176)
            {
              if (SHIBYTE(v175) < 0)
                operator delete((void *)v174);
              v176 = 0;
            }
            if (v173)
            {
              if (SHIBYTE(v172) < 0)
                operator delete((void *)v171);
              v173 = 0;
            }
            if (SHIBYTE(v170) < 0)
              operator delete((void *)v169);
            if (SHIBYTE(v167) < 0)
              operator delete((void *)v166);
            goto LABEL_54;
          }
          v14 = *(_OWORD *)(a1 + 16);
          v165 = *(_OWORD *)a1;
          v15 = *(_QWORD *)(a1 + 32);
          v166 = v14;
          v167 = v15;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          v168 = *(_BYTE *)(a1 + 40);
          v16 = *(_OWORD *)(a1 + 48);
          v170 = *(_QWORD *)(a1 + 64);
          v169 = v16;
          *(_QWORD *)(a1 + 56) = 0;
          *(_QWORD *)(a1 + 64) = 0;
          *(_QWORD *)(a1 + 48) = 0;
          LOBYTE(v171) = 0;
          v173 = 0;
          if (*(_BYTE *)(a1 + 96))
          {
            v17 = *(_OWORD *)(a1 + 72);
            v172 = *(_QWORD *)(a1 + 88);
            v171 = v17;
            *(_QWORD *)(a1 + 80) = 0;
            *(_QWORD *)(a1 + 88) = 0;
            *(_QWORD *)(a1 + 72) = 0;
            v173 = 1;
          }
          LOBYTE(v174) = 0;
          v176 = 0;
          if (*(_BYTE *)(a1 + 128))
          {
            v18 = *(_OWORD *)(a1 + 104);
            v175 = *(_QWORD *)(a1 + 120);
            v174 = v18;
            *(_QWORD *)(a1 + 112) = 0;
            *(_QWORD *)(a1 + 120) = 0;
            *(_QWORD *)(a1 + 104) = 0;
            v176 = 1;
          }
          v19 = 0;
          v20 = (void **)(a1 + 16);
          v21 = (void **)(a1 + 48);
          v177 = *(_BYTE *)(a1 + 136);
          do
            v19 += 144;
          while ((sub_22E3B38EC((_DWORD *)(v19 + a1), &v165) & 1) != 0);
          v22 = a1 + v19;
          v23 = (_DWORD *)a2;
          if (v19 == 144)
          {
            v23 = (_DWORD *)a2;
            do
            {
              if (v22 >= (unint64_t)v23)
                break;
              v23 -= 36;
            }
            while ((sub_22E3B38EC(v23, &v165) & 1) == 0);
          }
          else
          {
            do
              v23 -= 36;
            while (!sub_22E3B38EC(v23, &v165));
          }
          v7 = a1 + v19;
          if (v22 < (unint64_t)v23)
          {
            v24 = v23;
            do
            {
              v25 = *(_QWORD *)v7;
              v26 = *(_QWORD *)(v7 + 8);
              *(_OWORD *)v7 = *(_OWORD *)v24;
              *(_QWORD *)v24 = v25;
              *((_QWORD *)v24 + 1) = v26;
              sub_22EF30808(v7 + 16, (uint64_t)(v24 + 4));
              do
                v7 += 144;
              while ((sub_22E3B38EC((_DWORD *)v7, &v165) & 1) != 0);
              do
                v24 -= 36;
              while (!sub_22E3B38EC(v24, &v165));
            }
            while (v7 < (unint64_t)v24);
          }
          v27 = (_OWORD *)(v7 - 144);
          if (v7 - 144 != a1)
          {
            *(_OWORD *)a1 = *v27;
            if (*(char *)(a1 + 39) < 0)
              operator delete(*v20);
            v28 = *(_OWORD *)(v7 - 128);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 112);
            *(_OWORD *)v20 = v28;
            *(_BYTE *)(v7 - 105) = 0;
            *(_BYTE *)(v7 - 128) = 0;
            *(_BYTE *)(a1 + 40) = *(_BYTE *)(v7 - 104);
            if (*(char *)(a1 + 71) < 0)
              operator delete(*v21);
            v29 = *(_OWORD *)(v7 - 96);
            *(_QWORD *)(a1 + 64) = *(_QWORD *)(v7 - 80);
            *(_OWORD *)v21 = v29;
            *(_BYTE *)(v7 - 73) = 0;
            *(_BYTE *)(v7 - 96) = 0;
            sub_22EF2DD4C(a1 + 72, (__int128 *)(v7 - 72));
            sub_22EF2DD4C(a1 + 104, (__int128 *)(v7 - 40));
            *(_BYTE *)(a1 + 136) = *(_BYTE *)(v7 - 8);
          }
          *v27 = v165;
          v30 = (void **)(v7 - 128);
          if (*(char *)(v7 - 105) < 0)
            operator delete(*v30);
          v31 = v166;
          *(_QWORD *)(v7 - 112) = v167;
          *(_OWORD *)v30 = v31;
          HIBYTE(v167) = 0;
          LOBYTE(v166) = 0;
          *(_BYTE *)(v7 - 104) = v168;
          v32 = (void **)(v7 - 96);
          v6 = a2;
          if (*(char *)(v7 - 73) < 0)
            operator delete(*v32);
          v33 = v169;
          *(_QWORD *)(v7 - 80) = v170;
          *(_OWORD *)v32 = v33;
          HIBYTE(v170) = 0;
          LOBYTE(v169) = 0;
          sub_22EF2DD4C(v7 - 72, &v171);
          sub_22EF2DD4C(v7 - 40, &v174);
          *(_BYTE *)(v7 - 8) = v177;
          if (v176)
          {
            if (SHIBYTE(v175) < 0)
              operator delete((void *)v174);
            v176 = 0;
          }
          if (v173)
          {
            if (SHIBYTE(v172) < 0)
              operator delete((void *)v171);
            v173 = 0;
          }
          if (SHIBYTE(v170) < 0)
            operator delete((void *)v169);
          if (SHIBYTE(v167) < 0)
            operator delete((void *)v166);
          if (v22 < (unint64_t)v23)
            goto LABEL_53;
          v34 = sub_22EF30410(a1, v7 - 144);
          if (!sub_22EF30410(v7, a2))
          {
            if ((v34 & 1) != 0)
              continue;
LABEL_53:
            sub_22EF2EA30(a1, v7 - 144, a3, a4 & 1);
LABEL_54:
            a4 = 0;
            continue;
          }
          a2 = v7 - 144;
          if ((v34 & 1) != 0)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) != 0)
        {
          if (v7 != v6)
          {
            v56 = (_DWORD *)(v7 + 144);
            if (v7 + 144 != a2)
            {
              v57 = 0;
              v58 = (_OWORD *)v7;
              do
              {
                v59 = v56;
                if (sub_22E3B38EC(v56, v58))
                {
                  v165 = *v59;
                  v166 = v58[10];
                  v167 = *((_QWORD *)v58 + 22);
                  *((_QWORD *)v58 + 20) = 0;
                  *((_QWORD *)v58 + 21) = 0;
                  *((_QWORD *)v58 + 22) = 0;
                  v168 = *((_BYTE *)v58 + 184);
                  v169 = v58[12];
                  v170 = *((_QWORD *)v58 + 26);
                  *((_QWORD *)v58 + 24) = 0;
                  *((_QWORD *)v58 + 25) = 0;
                  *((_QWORD *)v58 + 26) = 0;
                  LOBYTE(v171) = 0;
                  v173 = 0;
                  if (*((_BYTE *)v58 + 240))
                  {
                    v171 = *(_OWORD *)((char *)v58 + 216);
                    v172 = *((_QWORD *)v58 + 29);
                    *((_QWORD *)v58 + 28) = 0;
                    *((_QWORD *)v58 + 29) = 0;
                    *((_QWORD *)v58 + 27) = 0;
                    v173 = 1;
                  }
                  LOBYTE(v174) = 0;
                  v176 = 0;
                  if (*((_BYTE *)v58 + 272))
                  {
                    v174 = *(_OWORD *)((char *)v58 + 248);
                    v175 = *((_QWORD *)v58 + 33);
                    *((_QWORD *)v58 + 32) = 0;
                    *((_QWORD *)v58 + 33) = 0;
                    *((_QWORD *)v58 + 31) = 0;
                    v176 = 1;
                  }
                  v177 = *((_BYTE *)v58 + 280);
                  v60 = v57;
                  while (1)
                  {
                    v61 = v7 + v60;
                    *(_OWORD *)(v7 + v60 + 144) = *(_OWORD *)(v7 + v60);
                    v62 = (void **)(v7 + v60 + 160);
                    if (*(char *)(v7 + v60 + 183) < 0)
                      operator delete(*v62);
                    *(_OWORD *)v62 = *(_OWORD *)(v61 + 16);
                    *(_QWORD *)(v7 + v60 + 176) = *(_QWORD *)(v61 + 32);
                    *(_BYTE *)(v61 + 39) = 0;
                    *(_BYTE *)(v61 + 16) = 0;
                    *(_BYTE *)(v61 + 184) = *(_BYTE *)(v61 + 40);
                    v63 = v61 + 192;
                    if (*(char *)(v61 + 215) < 0)
                      operator delete(*(void **)v63);
                    v64 = v7 + v60;
                    *(_OWORD *)v63 = *(_OWORD *)(v7 + v60 + 48);
                    *(_QWORD *)(v63 + 16) = *(_QWORD *)(v7 + v60 + 64);
                    *(_BYTE *)(v64 + 71) = 0;
                    *(_BYTE *)(v64 + 48) = 0;
                    v65 = (__int128 *)(v7 + v60 + 72);
                    sub_22EF2DD4C(v7 + v60 + 216, v65);
                    v66 = v7 + v60 + 104;
                    sub_22EF2DD4C(v64 + 248, (__int128 *)(v64 + 104));
                    *(_BYTE *)(v64 + 280) = *(_BYTE *)(v64 + 136);
                    if (!v60)
                      break;
                    v60 -= 144;
                    if ((sub_22E3B38EC(&v165, (_DWORD *)(v60 + v7)) & 1) == 0)
                    {
                      v67 = v7 + v60 + 144;
                      goto LABEL_122;
                    }
                  }
                  v67 = v7;
LABEL_122:
                  *(_OWORD *)v67 = v165;
                  v68 = v64 + 16;
                  if (*(char *)(v67 + 39) < 0)
                    operator delete(*(void **)v68);
                  v69 = v64 + 48;
                  v70 = v166;
                  *(_QWORD *)(v68 + 16) = v167;
                  *(_OWORD *)v68 = v70;
                  HIBYTE(v167) = 0;
                  LOBYTE(v166) = 0;
                  *(_BYTE *)(v67 + 40) = v168;
                  if (*(char *)(v67 + 71) < 0)
                    operator delete(*(void **)v69);
                  v71 = v169;
                  *(_QWORD *)(v69 + 16) = v170;
                  *(_OWORD *)v69 = v71;
                  HIBYTE(v170) = 0;
                  LOBYTE(v169) = 0;
                  sub_22EF2DD4C((uint64_t)v65, &v171);
                  sub_22EF2DD4C(v66, &v174);
                  *(_BYTE *)(v67 + 136) = v177;
                  if (v176)
                  {
                    if (SHIBYTE(v175) < 0)
                      operator delete((void *)v174);
                    v176 = 0;
                  }
                  if (v173)
                  {
                    if (SHIBYTE(v172) < 0)
                      operator delete((void *)v171);
                    v173 = 0;
                  }
                  if (SHIBYTE(v170) < 0)
                    operator delete((void *)v169);
                  if (SHIBYTE(v167) < 0)
                    operator delete((void *)v166);
                }
                v56 = v59 + 9;
                v57 += 144;
                v58 = v59;
              }
              while (v59 + 9 != (_OWORD *)a2);
            }
          }
        }
        else if (v7 != v6)
        {
          v131 = (_DWORD *)(v7 + 144);
          if (v7 + 144 != a2)
          {
            v132 = v7 - 144;
            do
            {
              v133 = v131;
              v134 = (_OWORD *)a2;
              if (sub_22E3B38EC(v131, (_DWORD *)a1))
              {
                v165 = *v133;
                v166 = *(_OWORD *)(a1 + 160);
                v167 = *(_QWORD *)(a1 + 176);
                *(_QWORD *)(a1 + 160) = 0;
                *(_QWORD *)(a1 + 168) = 0;
                *(_QWORD *)(a1 + 176) = 0;
                v168 = *(_BYTE *)(a1 + 184);
                v169 = *(_OWORD *)(a1 + 192);
                v170 = *(_QWORD *)(a1 + 208);
                *(_QWORD *)(a1 + 192) = 0;
                *(_QWORD *)(a1 + 200) = 0;
                *(_QWORD *)(a1 + 208) = 0;
                LOBYTE(v171) = 0;
                v173 = 0;
                if (*(_BYTE *)(a1 + 240))
                {
                  v171 = *(_OWORD *)(a1 + 216);
                  v172 = *(_QWORD *)(a1 + 232);
                  *(_QWORD *)(a1 + 224) = 0;
                  *(_QWORD *)(a1 + 232) = 0;
                  *(_QWORD *)(a1 + 216) = 0;
                  v173 = 1;
                }
                LOBYTE(v174) = 0;
                v176 = 0;
                if (*(_BYTE *)(a1 + 272))
                {
                  v174 = *(_OWORD *)(a1 + 248);
                  v175 = *(_QWORD *)(a1 + 264);
                  *(_QWORD *)(a1 + 256) = 0;
                  *(_QWORD *)(a1 + 264) = 0;
                  *(_QWORD *)(a1 + 248) = 0;
                  v176 = 1;
                }
                v177 = *(_BYTE *)(a1 + 280);
                v135 = v132;
                do
                {
                  *(_OWORD *)(v135 + 288) = *(_OWORD *)(v135 + 144);
                  v136 = (void **)(v135 + 304);
                  if (*(char *)(v135 + 327) < 0)
                    operator delete(*v136);
                  *(_OWORD *)v136 = *(_OWORD *)(v135 + 160);
                  *(_QWORD *)(v135 + 320) = *(_QWORD *)(v135 + 176);
                  *(_BYTE *)(v135 + 183) = 0;
                  *(_BYTE *)(v135 + 160) = 0;
                  *(_BYTE *)(v135 + 328) = *(_BYTE *)(v135 + 184);
                  v137 = (void **)(v135 + 336);
                  if (*(char *)(v135 + 359) < 0)
                    operator delete(*v137);
                  *(_OWORD *)v137 = *(_OWORD *)(v135 + 192);
                  *(_QWORD *)(v135 + 352) = *(_QWORD *)(v135 + 208);
                  *(_BYTE *)(v135 + 215) = 0;
                  *(_BYTE *)(v135 + 192) = 0;
                  sub_22EF2DD4C(v135 + 360, (__int128 *)(v135 + 216));
                  sub_22EF2DD4C(v135 + 392, (__int128 *)(v135 + 248));
                  *(_BYTE *)(v135 + 424) = *(_BYTE *)(v135 + 280);
                  v138 = sub_22E3B38EC(&v165, (_DWORD *)v135);
                  v135 -= 144;
                }
                while ((v138 & 1) != 0);
                *(_OWORD *)(v135 + 288) = v165;
                v139 = (void **)(v135 + 304);
                if (*(char *)(v135 + 327) < 0)
                  operator delete(*v139);
                v140 = (void **)(v135 + 336);
                v141 = v166;
                *(_QWORD *)(v135 + 320) = v167;
                *(_OWORD *)v139 = v141;
                HIBYTE(v167) = 0;
                LOBYTE(v166) = 0;
                *(_BYTE *)(v135 + 328) = v168;
                if (*(char *)(v135 + 359) < 0)
                  operator delete(*v140);
                v142 = v169;
                *(_QWORD *)(v135 + 352) = v170;
                *(_OWORD *)v140 = v142;
                HIBYTE(v170) = 0;
                LOBYTE(v169) = 0;
                sub_22EF2DD4C(v135 + 360, &v171);
                sub_22EF2DD4C(v135 + 392, &v174);
                *(_BYTE *)(v135 + 424) = v177;
                v134 = (_OWORD *)a2;
                if (v176)
                {
                  if (SHIBYTE(v175) < 0)
                    operator delete((void *)v174);
                  v176 = 0;
                }
                if (v173)
                {
                  if (SHIBYTE(v172) < 0)
                    operator delete((void *)v171);
                  v173 = 0;
                }
                if (SHIBYTE(v170) < 0)
                  operator delete((void *)v169);
                if (SHIBYTE(v167) < 0)
                  operator delete((void *)v166);
              }
              v131 = v133 + 9;
              v132 += 144;
              a1 = (uint64_t)v133;
            }
            while (v133 + 9 != v134);
          }
        }
        return;
    }
  }
}

  v6 = a2;
  v168 = (_DWORD *)(a2 - 136);
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = v6 - v7;
    v9 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v6 - v7) >> 3);
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (sub_22E3B38EC(v168, (_DWORD *)v7))
        {
          v61 = *(_QWORD *)v7;
          v62 = *(_QWORD *)(v7 + 8);
          *(_OWORD *)v7 = *(_OWORD *)v168;
          *(_QWORD *)(a2 - 136) = v61;
          *(_QWORD *)(a2 - 128) = v62;
          sub_22EF392EC(v7 + 16, (__int128 *)(a2 - 120));
        }
        return;
      case 3uLL:
        sub_22EF38DD0((uint64_t *)v7, (__int128 *)(v7 + 136), (uint64_t)v168);
        return;
      case 4uLL:
        sub_22EF39534((uint64_t *)v7, (__int128 *)(v7 + 136), v7 + 272, (uint64_t)v168);
        return;
      case 5uLL:
        sub_22EF38CC4((uint64_t *)v7, (__int128 *)(v7 + 136), v7 + 272, v7 + 408, (uint64_t)v168);
        return;
      default:
        if (v8 > 3263)
        {
          if (!a3)
          {
            if (v7 != v6)
            {
              v171 = (v9 - 2) >> 1;
              v83 = v171;
              do
              {
                v84 = v83;
                if (v171 >= v83)
                {
                  v85 = (2 * v83) | 1;
                  v86 = (_DWORD *)(a1 + 136 * v85);
                  if (2 * v83 + 2 < (uint64_t)v9 && sub_22E3B38EC((_DWORD *)(a1 + 136 * v85), v86 + 34))
                  {
                    v86 += 34;
                    v85 = 2 * v84 + 2;
                  }
                  v87 = a1 + 136 * v84;
                  if ((sub_22E3B38EC(v86, (_DWORD *)v87) & 1) == 0)
                  {
                    v184 = *(_OWORD *)v87;
                    v88 = a1 + 136 * v84;
                    v89 = *(_OWORD *)(v88 + 16);
                    v186 = *(_QWORD *)(v88 + 32);
                    v185 = v89;
                    *(_QWORD *)(v88 + 24) = 0;
                    *(_QWORD *)(v88 + 32) = 0;
                    *(_QWORD *)(v88 + 16) = 0;
                    v187 = *(_BYTE *)(v88 + 40);
                    v90 = *(_OWORD *)(v88 + 48);
                    v189 = *(_QWORD *)(v88 + 64);
                    v188 = v90;
                    *(_QWORD *)(v88 + 56) = 0;
                    *(_QWORD *)(v88 + 64) = 0;
                    *(_QWORD *)(v88 + 48) = 0;
                    v190 = *(_OWORD *)(v88 + 72);
                    v91 = *(_OWORD *)(v88 + 88);
                    v192 = *(_QWORD *)(v88 + 104);
                    v191 = v91;
                    *(_QWORD *)(v88 + 96) = 0;
                    *(_QWORD *)(v88 + 104) = 0;
                    *(_QWORD *)(v88 + 88) = 0;
                    v193 = *(__n128 *)(v88 + 112);
                    v194 = *(_QWORD *)(v88 + 128);
                    *(_QWORD *)(v88 + 112) = 0;
                    *(_QWORD *)(v88 + 120) = 0;
                    *(_QWORD *)(v88 + 128) = 0;
                    do
                    {
                      v92 = v86;
                      *(_OWORD *)v87 = *(_OWORD *)v86;
                      v93 = (void **)(v87 + 16);
                      if (*(char *)(v87 + 39) < 0)
                        operator delete(*v93);
                      v94 = (void **)(v92 + 4);
                      v95 = *((_OWORD *)v92 + 1);
                      *(_QWORD *)(v87 + 32) = *((_QWORD *)v92 + 4);
                      *(_OWORD *)v93 = v95;
                      *((_BYTE *)v92 + 39) = 0;
                      *((_BYTE *)v92 + 16) = 0;
                      *(_BYTE *)(v87 + 40) = *((_BYTE *)v92 + 40);
                      v96 = (void **)(v87 + 48);
                      if (*(char *)(v87 + 71) < 0)
                        operator delete(*v96);
                      v97 = *((_OWORD *)v92 + 3);
                      *(_QWORD *)(v87 + 64) = *((_QWORD *)v92 + 8);
                      *(_OWORD *)v96 = v97;
                      *((_BYTE *)v92 + 71) = 0;
                      *((_BYTE *)v92 + 48) = 0;
                      *(_OWORD *)(v87 + 72) = *(_OWORD *)(v92 + 18);
                      v98 = (void **)(v87 + 88);
                      if (*(char *)(v87 + 111) < 0)
                        operator delete(*v98);
                      v99 = *(_OWORD *)(v92 + 22);
                      *(_QWORD *)(v87 + 104) = *((_QWORD *)v92 + 13);
                      *(_OWORD *)v98 = v99;
                      *((_BYTE *)v92 + 111) = 0;
                      *((_BYTE *)v92 + 88) = 0;
                      sub_22EF351A4((uint64_t *)(v87 + 112), (__n128 *)v92 + 7);
                      if (v171 < v85)
                        break;
                      v100 = (2 * v85) | 1;
                      v86 = (_DWORD *)(a1 + 136 * v100);
                      v101 = 2 * v85 + 2;
                      if (v101 < (uint64_t)v9 && sub_22E3B38EC((_DWORD *)(a1 + 136 * v100), v86 + 34))
                      {
                        v86 += 34;
                        v100 = v101;
                      }
                      v87 = (uint64_t)v92;
                      v85 = v100;
                    }
                    while (!sub_22E3B38EC(v86, &v184));
                    *(_OWORD *)v92 = v184;
                    if (*((char *)v92 + 39) < 0)
                      operator delete(*v94);
                    v102 = (void **)(v92 + 12);
                    v103 = v185;
                    *((_QWORD *)v92 + 4) = v186;
                    *(_OWORD *)v94 = v103;
                    HIBYTE(v186) = 0;
                    LOBYTE(v185) = 0;
                    *((_BYTE *)v92 + 40) = v187;
                    if (*((char *)v92 + 71) < 0)
                      operator delete(*v102);
                    v104 = (void **)(v92 + 22);
                    v105 = v188;
                    *((_QWORD *)v92 + 8) = v189;
                    *(_OWORD *)v102 = v105;
                    HIBYTE(v189) = 0;
                    LOBYTE(v188) = 0;
                    *(_OWORD *)(v92 + 18) = v190;
                    if (*((char *)v92 + 111) < 0)
                      operator delete(*v104);
                    v106 = v191;
                    *((_QWORD *)v92 + 13) = v192;
                    *(_OWORD *)v104 = v106;
                    HIBYTE(v192) = 0;
                    LOBYTE(v191) = 0;
                    sub_22EF351A4((uint64_t *)v92 + 14, &v193);
                    if (v193.n128_u64[0])
                    {
                      sub_22E916AE0((uint64_t *)&v193);
                      operator delete((void *)v193.n128_u64[0]);
                    }
                    if (SHIBYTE(v192) < 0)
                      operator delete((void *)v191);
                    if (SHIBYTE(v189) < 0)
                      operator delete((void *)v188);
                    if (SHIBYTE(v186) < 0)
                      operator delete((void *)v185);
                  }
                }
                v83 = v84 - 1;
              }
              while (v84);
              v165 = (__int128 *)(a1 + 48);
              v167 = (__int128 *)(a1 + 16);
              v164 = (__int128 *)(a1 + 88);
              do
              {
                v107 = 0;
                v108 = a2;
                v173 = *(_OWORD *)a1;
                v174 = *v167;
                v175 = *(_QWORD *)(a1 + 32);
                *(_QWORD *)(a1 + 24) = 0;
                *(_QWORD *)(a1 + 32) = 0;
                *(_QWORD *)v167 = 0;
                v176 = *(_BYTE *)(a1 + 40);
                v178 = *(_QWORD *)(a1 + 64);
                v177 = *v165;
                *(_QWORD *)(a1 + 56) = 0;
                *(_QWORD *)(a1 + 64) = 0;
                *(_QWORD *)v165 = 0;
                v179 = *(_OWORD *)(a1 + 72);
                v181 = *(_QWORD *)(a1 + 104);
                v180 = *v164;
                *(_QWORD *)v164 = 0;
                *(_QWORD *)(a1 + 96) = 0;
                *(_QWORD *)(a1 + 104) = 0;
                __p[0] = 0;
                __p[1] = 0;
                v183 = 0;
                *(_OWORD *)__p = *(_OWORD *)(a1 + 112);
                v183 = *(_QWORD *)(a1 + 128);
                *(_QWORD *)(a1 + 112) = 0;
                *(_QWORD *)(a1 + 120) = 0;
                v109 = a1;
                *(_QWORD *)(a1 + 128) = 0;
                do
                {
                  v110 = v109 + 136 * v107 + 136;
                  v111 = 2 * v107;
                  v107 = (2 * v107) | 1;
                  v112 = v111 + 2;
                  if (v111 + 2 < (uint64_t)v9 && sub_22E3B38EC((_DWORD *)v110, (_DWORD *)(v110 + 136)))
                  {
                    v110 += 136;
                    v107 = v112;
                  }
                  *(_OWORD *)v109 = *(_OWORD *)v110;
                  v113 = (void **)(v109 + 16);
                  if (*(char *)(v109 + 39) < 0)
                    operator delete(*v113);
                  v114 = (void **)(v110 + 16);
                  v115 = *(_OWORD *)(v110 + 16);
                  *(_QWORD *)(v109 + 32) = *(_QWORD *)(v110 + 32);
                  *(_OWORD *)v113 = v115;
                  *(_BYTE *)(v110 + 39) = 0;
                  *(_BYTE *)(v110 + 16) = 0;
                  *(_BYTE *)(v109 + 40) = *(_BYTE *)(v110 + 40);
                  v116 = (void **)(v109 + 48);
                  if (*(char *)(v109 + 71) < 0)
                    operator delete(*v116);
                  v117 = *(_OWORD *)(v110 + 48);
                  *(_QWORD *)(v109 + 64) = *(_QWORD *)(v110 + 64);
                  *(_OWORD *)v116 = v117;
                  *(_BYTE *)(v110 + 71) = 0;
                  *(_BYTE *)(v110 + 48) = 0;
                  *(_OWORD *)(v109 + 72) = *(_OWORD *)(v110 + 72);
                  v118 = (void **)(v109 + 88);
                  if (*(char *)(v109 + 111) < 0)
                    operator delete(*v118);
                  v119 = *(_OWORD *)(v110 + 88);
                  *(_QWORD *)(v109 + 104) = *(_QWORD *)(v110 + 104);
                  *(_OWORD *)v118 = v119;
                  *(_BYTE *)(v110 + 111) = 0;
                  *(_BYTE *)(v110 + 88) = 0;
                  sub_22EF351A4((uint64_t *)(v109 + 112), (__n128 *)(v110 + 112));
                  v109 = v110;
                }
                while (v107 <= (uint64_t)((v9 - 2) >> 1));
                v120 = (void **)(v110 + 48);
                v170 = (__int128 *)(v110 + 72);
                v121 = (void **)(v110 + 88);
                v122 = (_OWORD *)(a2 - 136);
                a2 -= 136;
                if (v110 == v108 - 136)
                {
                  *(_OWORD *)v110 = v173;
                  if (*(char *)(v110 + 39) < 0)
                    operator delete(*v114);
                  *(_QWORD *)(v110 + 32) = v175;
                  *(_OWORD *)v114 = v174;
                  *(_BYTE *)(v110 + 40) = v176;
                  if (*(char *)(v110 + 71) < 0)
                    operator delete(*v120);
                  *(_QWORD *)(v110 + 64) = v178;
                  *(_OWORD *)v120 = v177;
                  *v170 = v179;
                  if (*(char *)(v110 + 111) < 0)
                    operator delete(*v121);
                  *(_QWORD *)(v110 + 104) = v181;
                  *(_OWORD *)v121 = v180;
                  sub_22EF351A4((uint64_t *)(v110 + 112), (__n128 *)__p);
                }
                else
                {
                  *(_OWORD *)v110 = *v122;
                  if (*(char *)(v110 + 39) < 0)
                    operator delete(*v114);
                  v123 = (void **)(v108 - 120);
                  v124 = *(_OWORD *)(v108 - 120);
                  *(_QWORD *)(v110 + 32) = *(_QWORD *)(v108 - 104);
                  *(_OWORD *)v114 = v124;
                  *(_BYTE *)(v108 - 97) = 0;
                  *(_BYTE *)(v108 - 120) = 0;
                  *(_BYTE *)(v110 + 40) = *(_BYTE *)(v108 - 96);
                  if (*(char *)(v110 + 71) < 0)
                    operator delete(*v120);
                  v125 = *(_OWORD *)(v108 - 88);
                  *(_QWORD *)(v110 + 64) = *(_QWORD *)(v108 - 72);
                  *(_OWORD *)v120 = v125;
                  *(_BYTE *)(v108 - 65) = 0;
                  *(_BYTE *)(v108 - 88) = 0;
                  *v170 = *(_OWORD *)(v108 - 64);
                  if (*(char *)(v110 + 111) < 0)
                    operator delete(*v121);
                  v126 = *(_OWORD *)(v108 - 48);
                  *(_QWORD *)(v110 + 104) = *(_QWORD *)(v108 - 32);
                  v163 = (__int128 *)(v110 + 88);
                  *(_OWORD *)v121 = v126;
                  *(_BYTE *)(v108 - 25) = 0;
                  *(_BYTE *)(v108 - 48) = 0;
                  sub_22EF351A4((uint64_t *)(v110 + 112), (__n128 *)(v108 - 24));
                  *v122 = v173;
                  if (*(char *)(v108 - 97) < 0)
                    operator delete(*v123);
                  v127 = (void **)(v108 - 88);
                  *(_QWORD *)(v108 - 104) = v175;
                  *(_OWORD *)v123 = v174;
                  *(_BYTE *)(v108 - 96) = v176;
                  if (*(char *)(v108 - 65) < 0)
                    operator delete(*v127);
                  v128 = (void **)(v108 - 48);
                  *(_QWORD *)(v108 - 72) = v178;
                  *(_OWORD *)v127 = v177;
                  *(_OWORD *)(v108 - 64) = v179;
                  if (*(char *)(v108 - 25) < 0)
                    operator delete(*v128);
                  *(_QWORD *)(v108 - 32) = v181;
                  *(_OWORD *)v128 = v180;
                  sub_22EF351A4((uint64_t *)(v108 - 24), (__n128 *)__p);
                  if (v110 + 136 - a1 >= 137)
                  {
                    v129 = ((v110 + 136 - a1) / 0x88uLL - 2) >> 1;
                    v130 = a1 + 136 * v129;
                    if (sub_22E3B38EC((_DWORD *)v130, (_DWORD *)v110))
                    {
                      v184 = *(_OWORD *)v110;
                      v131 = *(_QWORD *)(v110 + 32);
                      v185 = *(_OWORD *)v114;
                      v186 = v131;
                      *(_QWORD *)(v110 + 24) = 0;
                      *(_QWORD *)(v110 + 32) = 0;
                      *v114 = 0;
                      v187 = *(_BYTE *)(v110 + 40);
                      v132 = *(_OWORD *)v120;
                      v189 = *(_QWORD *)(v110 + 64);
                      v188 = v132;
                      *(_QWORD *)(v110 + 56) = 0;
                      *(_QWORD *)(v110 + 64) = 0;
                      *v120 = 0;
                      v190 = *v170;
                      v133 = *v163;
                      v192 = *(_QWORD *)(v110 + 104);
                      v191 = v133;
                      *(_QWORD *)(v110 + 96) = 0;
                      *(_QWORD *)(v110 + 104) = 0;
                      *(_QWORD *)v163 = 0;
                      v193 = 0uLL;
                      v194 = 0;
                      v193 = *(__n128 *)(v110 + 112);
                      v194 = *(_QWORD *)(v110 + 128);
                      *(_QWORD *)(v110 + 112) = 0;
                      *(_QWORD *)(v110 + 120) = 0;
                      *(_QWORD *)(v110 + 128) = 0;
                      do
                      {
                        v134 = v130;
                        *(_OWORD *)v110 = *(_OWORD *)v130;
                        v135 = (void **)(v110 + 16);
                        if (*(char *)(v110 + 39) < 0)
                          operator delete(*v135);
                        v136 = (void **)(v130 + 16);
                        v137 = *(_OWORD *)(v130 + 16);
                        *(_QWORD *)(v110 + 32) = *(_QWORD *)(v130 + 32);
                        *(_OWORD *)v135 = v137;
                        *(_BYTE *)(v130 + 39) = 0;
                        *(_BYTE *)(v130 + 16) = 0;
                        *(_BYTE *)(v110 + 40) = *(_BYTE *)(v130 + 40);
                        v138 = (void **)(v110 + 48);
                        if (*(char *)(v110 + 71) < 0)
                          operator delete(*v138);
                        v139 = *(_OWORD *)(v130 + 48);
                        *(_QWORD *)(v110 + 64) = *(_QWORD *)(v130 + 64);
                        *(_OWORD *)v138 = v139;
                        *(_BYTE *)(v130 + 71) = 0;
                        *(_BYTE *)(v130 + 48) = 0;
                        *(_OWORD *)(v110 + 72) = *(_OWORD *)(v130 + 72);
                        v140 = (void **)(v110 + 88);
                        if (*(char *)(v110 + 111) < 0)
                          operator delete(*v140);
                        v141 = *(_OWORD *)(v130 + 88);
                        *(_QWORD *)(v110 + 104) = *(_QWORD *)(v130 + 104);
                        *(_OWORD *)v140 = v141;
                        *(_BYTE *)(v130 + 111) = 0;
                        *(_BYTE *)(v130 + 88) = 0;
                        sub_22EF351A4((uint64_t *)(v110 + 112), (__n128 *)(v130 + 112));
                        if (!v129)
                          break;
                        v129 = (v129 - 1) >> 1;
                        v130 = a1 + 136 * v129;
                        v110 = v134;
                      }
                      while ((sub_22E3B38EC((_DWORD *)v130, &v184) & 1) != 0);
                      *(_OWORD *)v134 = v184;
                      if (*(char *)(v134 + 39) < 0)
                        operator delete(*v136);
                      v142 = (void **)(v134 + 48);
                      v143 = v185;
                      *(_QWORD *)(v134 + 32) = v186;
                      *(_OWORD *)v136 = v143;
                      HIBYTE(v186) = 0;
                      LOBYTE(v185) = 0;
                      *(_BYTE *)(v134 + 40) = v187;
                      if (*(char *)(v134 + 71) < 0)
                        operator delete(*v142);
                      v144 = (void **)(v134 + 88);
                      v145 = v188;
                      *(_QWORD *)(v134 + 64) = v189;
                      *(_OWORD *)v142 = v145;
                      HIBYTE(v189) = 0;
                      LOBYTE(v188) = 0;
                      *(_OWORD *)(v134 + 72) = v190;
                      if (*(char *)(v134 + 111) < 0)
                        operator delete(*v144);
                      v146 = v191;
                      *(_QWORD *)(v134 + 104) = v192;
                      *(_OWORD *)v144 = v146;
                      HIBYTE(v192) = 0;
                      LOBYTE(v191) = 0;
                      sub_22EF351A4((uint64_t *)(v134 + 112), &v193);
                      if (v193.n128_u64[0])
                      {
                        sub_22E916AE0((uint64_t *)&v193);
                        operator delete((void *)v193.n128_u64[0]);
                      }
                      if (SHIBYTE(v192) < 0)
                        operator delete((void *)v191);
                      if (SHIBYTE(v189) < 0)
                        operator delete((void *)v188);
                      if (SHIBYTE(v186) < 0)
                        operator delete((void *)v185);
                    }
                  }
                }
                if (__p[0])
                {
                  sub_22E916AE0((uint64_t *)__p);
                  operator delete(__p[0]);
                }
              }
              while ((uint64_t)v9-- > 2);
            }
            return;
          }
          v10 = v7 + 136 * (v9 >> 1);
          if ((unint64_t)v8 < 0x4401)
          {
            sub_22EF38DD0((uint64_t *)(v7 + 136 * (v9 >> 1)), (__int128 *)v7, (uint64_t)v168);
          }
          else
          {
            sub_22EF38DD0((uint64_t *)v7, (__int128 *)(v7 + 136 * (v9 >> 1)), (uint64_t)v168);
            v11 = (__int128 *)(v7 + 136 * (v9 >> 1) - 136);
            sub_22EF38DD0((uint64_t *)(a1 + 136), v11, a2 - 272);
            sub_22EF38DD0((uint64_t *)(a1 + 272), (__int128 *)(a1 + 136 + 136 * (v9 >> 1)), a2 - 408);
            sub_22EF38DD0((uint64_t *)v11, (__int128 *)(a1 + 136 * (v9 >> 1)), a1 + 136 + 136 * (v9 >> 1));
            v12 = *(_QWORD *)a1;
            v13 = *(_QWORD *)(a1 + 8);
            *(_OWORD *)a1 = *(_OWORD *)v10;
            *(_QWORD *)v10 = v12;
            *(_QWORD *)(v10 + 8) = v13;
            sub_22EF392EC(a1 + 16, (__int128 *)(a1 + 16 + 136 * (v9 >> 1)));
          }
          --a3;
          if ((a4 & 1) == 0 && (sub_22E3B38EC((_DWORD *)(a1 - 136), (_DWORD *)a1) & 1) == 0)
          {
            v39 = *(_OWORD *)(a1 + 16);
            v184 = *(_OWORD *)a1;
            v40 = *(_QWORD *)(a1 + 32);
            v185 = v39;
            v186 = v40;
            *(_QWORD *)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 32) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            v187 = *(_BYTE *)(a1 + 40);
            v41 = *(_OWORD *)(a1 + 48);
            v189 = *(_QWORD *)(a1 + 64);
            v188 = v41;
            *(_QWORD *)(a1 + 56) = 0;
            *(_QWORD *)(a1 + 64) = 0;
            *(_QWORD *)(a1 + 48) = 0;
            v190 = *(_OWORD *)(a1 + 72);
            v42 = *(_OWORD *)(a1 + 88);
            v192 = *(_QWORD *)(a1 + 104);
            v191 = v42;
            *(_QWORD *)(a1 + 88) = 0;
            *(_QWORD *)(a1 + 96) = 0;
            *(_QWORD *)(a1 + 104) = 0;
            v193 = 0uLL;
            v194 = 0;
            v193 = *(__n128 *)(a1 + 112);
            v194 = *(_QWORD *)(a1 + 128);
            *(_QWORD *)(a1 + 112) = 0;
            *(_QWORD *)(a1 + 120) = 0;
            *(_QWORD *)(a1 + 128) = 0;
            if ((sub_22E3B38EC(&v184, v168) & 1) != 0)
            {
              v7 = a1;
              do
                v7 += 136;
              while ((sub_22E3B38EC(&v184, (_DWORD *)v7) & 1) == 0);
            }
            else
            {
              v43 = (_DWORD *)(a1 + 136);
              do
              {
                v7 = (unint64_t)v43;
                if ((unint64_t)v43 >= v6)
                  break;
                v44 = sub_22E3B38EC(&v184, v43);
                v43 = (_DWORD *)(v7 + 136);
              }
              while (!v44);
            }
            v45 = v6;
            if (v7 < v6)
            {
              v45 = v6;
              do
                v45 -= 136;
              while ((sub_22E3B38EC(&v184, (_DWORD *)v45) & 1) != 0);
            }
            while (v7 < v45)
            {
              v46 = *(_QWORD *)v7;
              v47 = *(_QWORD *)(v7 + 8);
              *(_OWORD *)v7 = *(_OWORD *)v45;
              *(_QWORD *)v45 = v46;
              *(_QWORD *)(v45 + 8) = v47;
              sub_22EF392EC(v7 + 16, (__int128 *)(v45 + 16));
              do
                v7 += 136;
              while (!sub_22E3B38EC(&v184, (_DWORD *)v7));
              do
                v45 -= 136;
              while ((sub_22E3B38EC(&v184, (_DWORD *)v45) & 1) != 0);
            }
            v48 = (_OWORD *)(v7 - 136);
            if (v7 - 136 != a1)
            {
              v49 = (void **)(a1 + 16);
              *(_OWORD *)a1 = *v48;
              if (*(char *)(a1 + 39) < 0)
                operator delete(*v49);
              v50 = (void **)(a1 + 48);
              v51 = *(_OWORD *)(v7 - 120);
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 104);
              *(_OWORD *)v49 = v51;
              *(_BYTE *)(v7 - 97) = 0;
              *(_BYTE *)(v7 - 120) = 0;
              *(_BYTE *)(a1 + 40) = *(_BYTE *)(v7 - 96);
              if (*(char *)(a1 + 71) < 0)
                operator delete(*v50);
              v52 = (void **)(a1 + 88);
              v53 = *(_OWORD *)(v7 - 88);
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(v7 - 72);
              *(_OWORD *)v50 = v53;
              *(_BYTE *)(v7 - 65) = 0;
              *(_BYTE *)(v7 - 88) = 0;
              *(_OWORD *)(a1 + 72) = *(_OWORD *)(v7 - 64);
              if (*(char *)(a1 + 111) < 0)
                operator delete(*v52);
              v54 = *(_OWORD *)(v7 - 48);
              *(_QWORD *)(a1 + 104) = *(_QWORD *)(v7 - 32);
              *(_OWORD *)v52 = v54;
              *(_BYTE *)(v7 - 25) = 0;
              *(_BYTE *)(v7 - 48) = 0;
              sub_22EF351A4((uint64_t *)(a1 + 112), (__n128 *)(v7 - 24));
            }
            *v48 = v184;
            v55 = (void **)(v7 - 120);
            if (*(char *)(v7 - 97) < 0)
              operator delete(*v55);
            v56 = v185;
            *(_QWORD *)(v7 - 104) = v186;
            *(_OWORD *)v55 = v56;
            HIBYTE(v186) = 0;
            LOBYTE(v185) = 0;
            *(_BYTE *)(v7 - 96) = v187;
            v57 = (void **)(v7 - 88);
            if (*(char *)(v7 - 65) < 0)
              operator delete(*v57);
            v58 = v188;
            *(_QWORD *)(v7 - 72) = v189;
            *(_OWORD *)v57 = v58;
            HIBYTE(v189) = 0;
            LOBYTE(v188) = 0;
            *(_OWORD *)(v7 - 64) = v190;
            v59 = (void **)(v7 - 48);
            if (*(char *)(v7 - 25) < 0)
              operator delete(*v59);
            v60 = v191;
            *(_QWORD *)(v7 - 32) = v192;
            *(_OWORD *)v59 = v60;
            HIBYTE(v192) = 0;
            LOBYTE(v191) = 0;
            sub_22EF351A4((uint64_t *)(v7 - 24), &v193);
            if (v193.n128_u64[0])
            {
              sub_22E916AE0((uint64_t *)&v193);
              operator delete((void *)v193.n128_u64[0]);
            }
            if (SHIBYTE(v192) < 0)
              operator delete((void *)v191);
            if (SHIBYTE(v189) < 0)
              operator delete((void *)v188);
            if (SHIBYTE(v186) < 0)
              operator delete((void *)v185);
            goto LABEL_50;
          }
          v169 = a3;
          v14 = 0;
          v15 = *(_OWORD *)(a1 + 16);
          v184 = *(_OWORD *)a1;
          v16 = (void **)(a1 + 16);
          v17 = *(_QWORD *)(a1 + 32);
          v185 = v15;
          v186 = v17;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          v187 = *(_BYTE *)(a1 + 40);
          v18 = (void **)(a1 + 48);
          v19 = *(_OWORD *)(a1 + 48);
          v189 = *(_QWORD *)(a1 + 64);
          v188 = v19;
          *(_QWORD *)(a1 + 56) = 0;
          *(_QWORD *)(a1 + 64) = 0;
          *(_QWORD *)(a1 + 48) = 0;
          v190 = *(_OWORD *)(a1 + 72);
          v20 = *(_OWORD *)(a1 + 88);
          v192 = *(_QWORD *)(a1 + 104);
          v191 = v20;
          *(_QWORD *)(a1 + 88) = 0;
          *(_QWORD *)(a1 + 96) = 0;
          *(_QWORD *)(a1 + 104) = 0;
          v193 = 0uLL;
          v194 = 0;
          v21 = *(__n128 *)(a1 + 112);
          v194 = *(_QWORD *)(a1 + 128);
          v22 = (void **)(a1 + 88);
          v193 = v21;
          *(_QWORD *)(a1 + 112) = 0;
          *(_QWORD *)(a1 + 120) = 0;
          *(_QWORD *)(a1 + 128) = 0;
          do
            v14 += 136;
          while ((sub_22E3B38EC((_DWORD *)(v14 + a1), &v184) & 1) != 0);
          v23 = a1 + v14;
          v24 = (_DWORD *)a2;
          if (v14 == 136)
          {
            v24 = (_DWORD *)a2;
            do
            {
              if (v23 >= (unint64_t)v24)
                break;
              v24 -= 34;
            }
            while ((sub_22E3B38EC(v24, &v184) & 1) == 0);
          }
          else
          {
            do
              v24 -= 34;
            while (!sub_22E3B38EC(v24, &v184));
          }
          v7 = a1 + v14;
          if (v23 < (unint64_t)v24)
          {
            v25 = v24;
            do
            {
              v26 = *(_QWORD *)v7;
              v27 = *(_QWORD *)(v7 + 8);
              *(_OWORD *)v7 = *(_OWORD *)v25;
              *(_QWORD *)v25 = v26;
              *((_QWORD *)v25 + 1) = v27;
              sub_22EF392EC(v7 + 16, (__int128 *)v25 + 1);
              do
                v7 += 136;
              while ((sub_22E3B38EC((_DWORD *)v7, &v184) & 1) != 0);
              do
                v25 -= 34;
              while (!sub_22E3B38EC(v25, &v184));
            }
            while (v7 < (unint64_t)v25);
          }
          v28 = (_OWORD *)(v7 - 136);
          if (v7 - 136 != a1)
          {
            *(_OWORD *)a1 = *v28;
            if (*(char *)(a1 + 39) < 0)
              operator delete(*v16);
            v29 = *(_OWORD *)(v7 - 120);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 104);
            *(_OWORD *)v16 = v29;
            *(_BYTE *)(v7 - 97) = 0;
            *(_BYTE *)(v7 - 120) = 0;
            *(_BYTE *)(a1 + 40) = *(_BYTE *)(v7 - 96);
            if (*(char *)(a1 + 71) < 0)
              operator delete(*v18);
            v30 = *(_OWORD *)(v7 - 88);
            *(_QWORD *)(a1 + 64) = *(_QWORD *)(v7 - 72);
            *(_OWORD *)v18 = v30;
            *(_BYTE *)(v7 - 65) = 0;
            *(_BYTE *)(v7 - 88) = 0;
            *(_OWORD *)(a1 + 72) = *(_OWORD *)(v7 - 64);
            if (*(char *)(a1 + 111) < 0)
              operator delete(*v22);
            v31 = *(_OWORD *)(v7 - 48);
            *(_QWORD *)(a1 + 104) = *(_QWORD *)(v7 - 32);
            *(_OWORD *)v22 = v31;
            *(_BYTE *)(v7 - 25) = 0;
            *(_BYTE *)(v7 - 48) = 0;
            sub_22EF351A4((uint64_t *)(a1 + 112), (__n128 *)(v7 - 24));
          }
          *v28 = v184;
          v32 = (void **)(v7 - 120);
          if (*(char *)(v7 - 97) < 0)
            operator delete(*v32);
          v33 = v185;
          *(_QWORD *)(v7 - 104) = v186;
          *(_OWORD *)v32 = v33;
          HIBYTE(v186) = 0;
          LOBYTE(v185) = 0;
          *(_BYTE *)(v7 - 96) = v187;
          v34 = (void **)(v7 - 88);
          v6 = a2;
          a3 = v169;
          if (*(char *)(v7 - 65) < 0)
            operator delete(*v34);
          v35 = v188;
          *(_QWORD *)(v7 - 72) = v189;
          *(_OWORD *)v34 = v35;
          HIBYTE(v189) = 0;
          LOBYTE(v188) = 0;
          *(_OWORD *)(v7 - 64) = v190;
          v36 = (void **)(v7 - 48);
          if (*(char *)(v7 - 25) < 0)
            operator delete(*v36);
          v37 = v191;
          *(_QWORD *)(v7 - 32) = v192;
          *(_OWORD *)v36 = v37;
          HIBYTE(v192) = 0;
          LOBYTE(v191) = 0;
          sub_22EF351A4((uint64_t *)(v7 - 24), &v193);
          if (v193.n128_u64[0])
          {
            sub_22E916AE0((uint64_t *)&v193);
            operator delete((void *)v193.n128_u64[0]);
          }
          if (SHIBYTE(v192) < 0)
            operator delete((void *)v191);
          if (SHIBYTE(v189) < 0)
            operator delete((void *)v188);
          if (SHIBYTE(v186) < 0)
            operator delete((void *)v185);
          if (v23 < (unint64_t)v24)
            goto LABEL_49;
          v38 = sub_22EF38EE0(a1, v7 - 136);
          if (!sub_22EF38EE0(v7, a2))
          {
            if (v38)
              continue;
LABEL_49:
            sub_22EF37440(a1);
LABEL_50:
            a4 = 0;
            continue;
          }
          a2 = v7 - 136;
          if (v38)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) != 0)
        {
          if (v7 != v6)
          {
            v63 = (_DWORD *)(v7 + 136);
            if (v7 + 136 != a2)
            {
              v64 = 0;
              v65 = (_OWORD *)v7;
              do
              {
                v66 = v63;
                if (sub_22E3B38EC(v63, v65))
                {
                  v184 = *v66;
                  v185 = *(_OWORD *)((char *)v65 + 152);
                  v188 = *(_OWORD *)((char *)v65 + 184);
                  v67 = v65[14];
                  v190 = v65[13];
                  v186 = *((_QWORD *)v65 + 21);
                  *((_QWORD *)v65 + 19) = 0;
                  *((_QWORD *)v65 + 20) = 0;
                  *((_QWORD *)v65 + 21) = 0;
                  v187 = *((_BYTE *)v65 + 176);
                  v189 = *((_QWORD *)v65 + 25);
                  *((_QWORD *)v65 + 23) = 0;
                  *((_QWORD *)v65 + 24) = 0;
                  *((_QWORD *)v65 + 25) = 0;
                  v192 = *((_QWORD *)v65 + 30);
                  v191 = v67;
                  *((_QWORD *)v65 + 28) = 0;
                  *((_QWORD *)v65 + 29) = 0;
                  v193 = *(__n128 *)((char *)v65 + 248);
                  v194 = *((_QWORD *)v65 + 33);
                  *((_QWORD *)v65 + 30) = 0;
                  *((_QWORD *)v65 + 31) = 0;
                  v68 = v64;
                  *((_QWORD *)v65 + 32) = 0;
                  *((_QWORD *)v65 + 33) = 0;
                  while (1)
                  {
                    v69 = v68;
                    v70 = a1 + v68;
                    *(_OWORD *)(v70 + 136) = *(_OWORD *)(a1 + v68);
                    v71 = a1 + v68 + 152;
                    if (*(char *)(v70 + 175) < 0)
                      operator delete(*(void **)v71);
                    *(_OWORD *)v71 = *(_OWORD *)(v70 + 16);
                    *(_QWORD *)(v71 + 16) = *(_QWORD *)(v70 + 32);
                    *(_BYTE *)(v70 + 39) = 0;
                    *(_BYTE *)(v70 + 16) = 0;
                    *(_BYTE *)(v70 + 176) = *(_BYTE *)(v70 + 40);
                    v72 = v70 + 184;
                    if (*(char *)(v70 + 207) < 0)
                      operator delete(*(void **)v72);
                    v73 = a1 + v69;
                    *(_OWORD *)v72 = *(_OWORD *)(a1 + v69 + 48);
                    *(_QWORD *)(v72 + 16) = *(_QWORD *)(a1 + v69 + 64);
                    *(_BYTE *)(v73 + 71) = 0;
                    *(_BYTE *)(v73 + 48) = 0;
                    *(_OWORD *)(v73 + 208) = *(_OWORD *)(a1 + v69 + 72);
                    v74 = (void **)(a1 + v69 + 224);
                    if (*(char *)(a1 + v69 + 247) < 0)
                      operator delete(*v74);
                    *(_OWORD *)v74 = *(_OWORD *)(v73 + 88);
                    *(_QWORD *)(a1 + v69 + 240) = *(_QWORD *)(v73 + 104);
                    *(_BYTE *)(v73 + 111) = 0;
                    *(_BYTE *)(v73 + 88) = 0;
                    sub_22EF351A4((uint64_t *)(v73 + 248), (__n128 *)(v73 + 112));
                    if (!v69)
                      break;
                    v68 = v69 - 136;
                    if ((sub_22E3B38EC(&v184, (_DWORD *)(v69 - 136 + a1)) & 1) == 0)
                    {
                      v75 = a1 + v69;
                      goto LABEL_112;
                    }
                  }
                  v75 = a1;
LABEL_112:
                  *(_OWORD *)v75 = v184;
                  v76 = a1 + v69;
                  v77 = (void **)(v76 + 16);
                  if (*(char *)(v75 + 39) < 0)
                    operator delete(*v77);
                  v78 = (void **)(v76 + 48);
                  v79 = v185;
                  *(_QWORD *)(v76 + 32) = v186;
                  *(_OWORD *)v77 = v79;
                  HIBYTE(v186) = 0;
                  LOBYTE(v185) = 0;
                  *(_BYTE *)(v75 + 40) = v187;
                  if (*(char *)(v75 + 71) < 0)
                    operator delete(*v78);
                  v80 = (void **)(v76 + 88);
                  v81 = v188;
                  *(_QWORD *)(v76 + 64) = v189;
                  *(_OWORD *)v78 = v81;
                  HIBYTE(v189) = 0;
                  LOBYTE(v188) = 0;
                  *(_OWORD *)(v76 + 72) = v190;
                  if (*(char *)(v75 + 111) < 0)
                    operator delete(*v80);
                  v82 = v191;
                  *(_QWORD *)(v76 + 104) = v192;
                  *(_OWORD *)v80 = v82;
                  HIBYTE(v192) = 0;
                  LOBYTE(v191) = 0;
                  sub_22EF351A4((uint64_t *)(v76 + 112), &v193);
                  if (v193.n128_u64[0])
                  {
                    sub_22E916AE0((uint64_t *)&v193);
                    operator delete((void *)v193.n128_u64[0]);
                  }
                  if (SHIBYTE(v192) < 0)
                    operator delete((void *)v191);
                  if (SHIBYTE(v189) < 0)
                    operator delete((void *)v188);
                  if (SHIBYTE(v186) < 0)
                    operator delete((void *)v185);
                }
                v63 = (_DWORD *)v66 + 34;
                v64 += 136;
                v65 = v66;
              }
              while ((_OWORD *)((char *)v66 + 136) != (_OWORD *)a2);
            }
          }
        }
        else if (v7 != v6)
        {
          v148 = (_DWORD *)(v7 + 136);
          if (v7 + 136 != a2)
          {
            v149 = v7 - 136;
            do
            {
              v150 = v148;
              if (sub_22E3B38EC(v148, (_DWORD *)a1))
              {
                v184 = *v150;
                v185 = *(_OWORD *)(a1 + 152);
                v188 = *(_OWORD *)(a1 + 184);
                v151 = *(_OWORD *)(a1 + 224);
                v190 = *(_OWORD *)(a1 + 208);
                v186 = *(_QWORD *)(a1 + 168);
                *(_QWORD *)(a1 + 152) = 0;
                *(_QWORD *)(a1 + 160) = 0;
                *(_QWORD *)(a1 + 168) = 0;
                v187 = *(_BYTE *)(a1 + 176);
                v189 = *(_QWORD *)(a1 + 200);
                *(_QWORD *)(a1 + 184) = 0;
                *(_QWORD *)(a1 + 192) = 0;
                *(_QWORD *)(a1 + 200) = 0;
                v192 = *(_QWORD *)(a1 + 240);
                v191 = v151;
                *(_QWORD *)(a1 + 224) = 0;
                *(_QWORD *)(a1 + 232) = 0;
                v193 = *(__n128 *)(a1 + 248);
                v194 = *(_QWORD *)(a1 + 264);
                *(_QWORD *)(a1 + 240) = 0;
                *(_QWORD *)(a1 + 248) = 0;
                v152 = v149;
                *(_QWORD *)(a1 + 256) = 0;
                *(_QWORD *)(a1 + 264) = 0;
                do
                {
                  *(_OWORD *)(v152 + 272) = *(_OWORD *)(v152 + 136);
                  v153 = (void **)(v152 + 288);
                  if (*(char *)(v152 + 311) < 0)
                    operator delete(*v153);
                  *(_OWORD *)v153 = *(_OWORD *)(v152 + 152);
                  *(_QWORD *)(v152 + 304) = *(_QWORD *)(v152 + 168);
                  *(_BYTE *)(v152 + 175) = 0;
                  *(_BYTE *)(v152 + 152) = 0;
                  *(_BYTE *)(v152 + 312) = *(_BYTE *)(v152 + 176);
                  v154 = (void **)(v152 + 320);
                  if (*(char *)(v152 + 343) < 0)
                    operator delete(*v154);
                  *(_OWORD *)v154 = *(_OWORD *)(v152 + 184);
                  *(_QWORD *)(v152 + 336) = *(_QWORD *)(v152 + 200);
                  *(_BYTE *)(v152 + 207) = 0;
                  *(_BYTE *)(v152 + 184) = 0;
                  *(_OWORD *)(v152 + 344) = *(_OWORD *)(v152 + 208);
                  v155 = (void **)(v152 + 360);
                  if (*(char *)(v152 + 383) < 0)
                    operator delete(*v155);
                  *(_OWORD *)v155 = *(_OWORD *)(v152 + 224);
                  *(_QWORD *)(v152 + 376) = *(_QWORD *)(v152 + 240);
                  *(_BYTE *)(v152 + 247) = 0;
                  *(_BYTE *)(v152 + 224) = 0;
                  sub_22EF351A4((uint64_t *)(v152 + 384), (__n128 *)(v152 + 248));
                  v156 = sub_22E3B38EC(&v184, (_DWORD *)v152);
                  v152 -= 136;
                }
                while ((v156 & 1) != 0);
                *(_OWORD *)(v152 + 272) = v184;
                v157 = (void **)(v152 + 288);
                if (*(char *)(v152 + 311) < 0)
                  operator delete(*v157);
                v158 = (void **)(v152 + 320);
                v159 = v185;
                *(_QWORD *)(v152 + 304) = v186;
                *(_OWORD *)v157 = v159;
                HIBYTE(v186) = 0;
                LOBYTE(v185) = 0;
                *(_BYTE *)(v152 + 312) = v187;
                if (*(char *)(v152 + 343) < 0)
                  operator delete(*v158);
                v160 = (void **)(v152 + 360);
                v161 = v188;
                *(_QWORD *)(v152 + 336) = v189;
                *(_OWORD *)v158 = v161;
                HIBYTE(v189) = 0;
                LOBYTE(v188) = 0;
                *(_OWORD *)(v152 + 344) = v190;
                if (*(char *)(v152 + 383) < 0)
                  operator delete(*v160);
                v162 = v191;
                *(_QWORD *)(v152 + 376) = v192;
                *(_OWORD *)v160 = v162;
                HIBYTE(v192) = 0;
                LOBYTE(v191) = 0;
                sub_22EF351A4((uint64_t *)(v152 + 384), &v193);
                if (v193.n128_u64[0])
                {
                  sub_22E916AE0((uint64_t *)&v193);
                  operator delete((void *)v193.n128_u64[0]);
                }
                if (SHIBYTE(v192) < 0)
                  operator delete((void *)v191);
                if (SHIBYTE(v189) < 0)
                  operator delete((void *)v188);
                if (SHIBYTE(v186) < 0)
                  operator delete((void *)v185);
              }
              v148 = (_DWORD *)v150 + 34;
              v149 += 136;
              a1 = (uint64_t)v150;
            }
            while ((_OWORD *)((char *)v150 + 136) != (_OWORD *)a2);
          }
        }
        return;
    }
  }
}

  v6 = a2;
  v148 = (_DWORD *)(a2 - 144);
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = v6 - v7;
    v9 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - v7) >> 4);
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (sub_22E3B38EC(v148, (_DWORD *)v7))
        {
          v54 = *(_QWORD *)v7;
          v55 = *(_QWORD *)(v7 + 8);
          *(_OWORD *)v7 = *(_OWORD *)v148;
          *(_QWORD *)(a2 - 144) = v54;
          *(_QWORD *)(a2 - 136) = v55;
          sub_22EF3FEF8(v7 + 16, a2 - 128);
        }
        return;
      case 3uLL:
        sub_22EF3F9F0((uint64_t *)v7, (uint64_t *)(v7 + 144), (uint64_t)v148);
        return;
      case 4uLL:
        sub_22EF4012C((uint64_t *)v7, (uint64_t *)(v7 + 144), v7 + 288, (uint64_t)v148);
        return;
      case 5uLL:
        sub_22EF3F8E4((uint64_t *)v7, (uint64_t *)(v7 + 144), v7 + 288, v7 + 432, (uint64_t)v148);
        return;
      default:
        if (v8 > 3455)
        {
          if (!a3)
          {
            if (v7 != v6)
            {
              v150 = (v9 - 2) >> 1;
              v72 = v150;
              do
              {
                v73 = v72;
                if (v150 >= v72)
                {
                  v74 = (2 * v72) | 1;
                  v75 = a1 + 144 * v74;
                  if (2 * v72 + 2 < (uint64_t)v9
                    && sub_22E3B38EC((_DWORD *)(a1 + 144 * v74), (_DWORD *)(v75 + 144)))
                  {
                    v75 += 144;
                    v74 = 2 * v73 + 2;
                  }
                  v76 = a1 + 144 * v73;
                  if ((sub_22E3B38EC((_DWORD *)v75, (_DWORD *)v76) & 1) == 0)
                  {
                    v165 = *(_OWORD *)v76;
                    v77 = a1 + 144 * v73;
                    v78 = *(_OWORD *)(v77 + 16);
                    v167 = *(_QWORD *)(v77 + 32);
                    v166 = v78;
                    *(_QWORD *)(v77 + 24) = 0;
                    *(_QWORD *)(v77 + 32) = 0;
                    *(_QWORD *)(v77 + 16) = 0;
                    v168 = *(_BYTE *)(v77 + 40);
                    v79 = *(_OWORD *)(v77 + 48);
                    v170 = *(_QWORD *)(v77 + 64);
                    v169 = v79;
                    *(_QWORD *)(v77 + 56) = 0;
                    *(_QWORD *)(v77 + 64) = 0;
                    *(_QWORD *)(v77 + 48) = 0;
                    LOBYTE(v171) = 0;
                    v173 = 0;
                    if (*(_BYTE *)(v77 + 96))
                    {
                      v80 = a1 + 144 * v73;
                      v81 = *(_OWORD *)(v80 + 72);
                      v172 = *(_QWORD *)(v80 + 88);
                      v171 = v81;
                      *(_QWORD *)(v80 + 80) = 0;
                      *(_QWORD *)(v80 + 88) = 0;
                      *(_QWORD *)(v80 + 72) = 0;
                      v173 = 1;
                    }
                    LOBYTE(v174) = 0;
                    v176 = 0;
                    if (*(_BYTE *)(a1 + 144 * v73 + 128))
                    {
                      v82 = a1 + 144 * v73;
                      v83 = *(_OWORD *)(v82 + 104);
                      v175 = *(_QWORD *)(v82 + 120);
                      v174 = v83;
                      *(_QWORD *)(v82 + 112) = 0;
                      *(_QWORD *)(v82 + 120) = 0;
                      *(_QWORD *)(v82 + 104) = 0;
                      v176 = 1;
                    }
                    v177 = *(_QWORD *)(a1 + 144 * v73 + 136);
                    do
                    {
                      v84 = v75;
                      *(_OWORD *)v76 = *(_OWORD *)v75;
                      v85 = (void **)(v76 + 16);
                      if (*(char *)(v76 + 39) < 0)
                        operator delete(*v85);
                      v86 = (void **)(v75 + 16);
                      v87 = *(_OWORD *)(v75 + 16);
                      *(_QWORD *)(v76 + 32) = *(_QWORD *)(v75 + 32);
                      *(_OWORD *)v85 = v87;
                      *(_BYTE *)(v75 + 39) = 0;
                      *(_BYTE *)(v75 + 16) = 0;
                      *(_BYTE *)(v76 + 40) = *(_BYTE *)(v75 + 40);
                      v88 = (void **)(v76 + 48);
                      if (*(char *)(v76 + 71) < 0)
                        operator delete(*v88);
                      v89 = *(_OWORD *)(v75 + 48);
                      *(_QWORD *)(v76 + 64) = *(_QWORD *)(v75 + 64);
                      *(_OWORD *)v88 = v89;
                      *(_BYTE *)(v75 + 71) = 0;
                      *(_BYTE *)(v75 + 48) = 0;
                      sub_22EF2DD4C(v76 + 72, (__int128 *)(v75 + 72));
                      sub_22EF2DD4C(v76 + 104, (__int128 *)(v75 + 104));
                      *(_QWORD *)(v76 + 136) = *(_QWORD *)(v75 + 136);
                      if (v150 < v74)
                        break;
                      v90 = (2 * v74) | 1;
                      v75 = a1 + 144 * v90;
                      v91 = 2 * v74 + 2;
                      if (v91 < (uint64_t)v9
                        && sub_22E3B38EC((_DWORD *)(a1 + 144 * v90), (_DWORD *)(v75 + 144)))
                      {
                        v75 += 144;
                        v90 = v91;
                      }
                      v76 = v84;
                      v74 = v90;
                    }
                    while (!sub_22E3B38EC((_DWORD *)v75, &v165));
                    *(_OWORD *)v84 = v165;
                    if (*(char *)(v84 + 39) < 0)
                      operator delete(*v86);
                    v92 = (void **)(v84 + 48);
                    v93 = v166;
                    *(_QWORD *)(v84 + 32) = v167;
                    *(_OWORD *)v86 = v93;
                    HIBYTE(v167) = 0;
                    LOBYTE(v166) = 0;
                    *(_BYTE *)(v84 + 40) = v168;
                    if (*(char *)(v84 + 71) < 0)
                      operator delete(*v92);
                    v94 = v169;
                    *(_QWORD *)(v84 + 64) = v170;
                    *(_OWORD *)v92 = v94;
                    HIBYTE(v170) = 0;
                    LOBYTE(v169) = 0;
                    sub_22EF2DD4C(v84 + 72, &v171);
                    sub_22EF2DD4C(v84 + 104, &v174);
                    *(_QWORD *)(v84 + 136) = v177;
                    if (v176)
                    {
                      if (SHIBYTE(v175) < 0)
                        operator delete((void *)v174);
                      v176 = 0;
                    }
                    if (v173)
                    {
                      if (SHIBYTE(v172) < 0)
                        operator delete((void *)v171);
                      v173 = 0;
                    }
                    if (SHIBYTE(v170) < 0)
                      operator delete((void *)v169);
                    if (SHIBYTE(v167) < 0)
                      operator delete((void *)v166);
                  }
                }
                v72 = v73 - 1;
              }
              while (v73);
              v145 = (__int128 *)(a1 + 48);
              v146 = (__int128 *)(a1 + 16);
              v143 = (__int128 *)(a1 + 104);
              v144 = (__int128 *)(a1 + 72);
              do
              {
                v152 = *(_OWORD *)a1;
                v153 = *v146;
                v154 = *(_QWORD *)(a1 + 32);
                *(_QWORD *)(a1 + 24) = 0;
                *(_QWORD *)(a1 + 32) = 0;
                *(_QWORD *)v146 = 0;
                v155 = *(_BYTE *)(a1 + 40);
                v157 = *(_QWORD *)(a1 + 64);
                v156 = *v145;
                *(_QWORD *)(a1 + 56) = 0;
                *(_QWORD *)(a1 + 64) = 0;
                *(_QWORD *)v145 = 0;
                LOBYTE(v158) = 0;
                v160 = 0;
                if (*(_BYTE *)(a1 + 96))
                {
                  v95 = *v144;
                  v159 = *(_QWORD *)(a1 + 88);
                  v158 = v95;
                  *(_QWORD *)(a1 + 80) = 0;
                  *(_QWORD *)(a1 + 88) = 0;
                  *(_QWORD *)v144 = 0;
                  v160 = 1;
                }
                LOBYTE(__p) = 0;
                v163 = 0;
                if (*(_BYTE *)(a1 + 128))
                {
                  v96 = *v143;
                  v162 = *(_QWORD *)(a1 + 120);
                  __p = v96;
                  *(_QWORD *)(a1 + 112) = 0;
                  *(_QWORD *)(a1 + 120) = 0;
                  *(_QWORD *)v143 = 0;
                  v163 = 1;
                }
                v97 = 0;
                v164 = *(_QWORD *)(a1 + 136);
                v98 = a1;
                do
                {
                  v99 = v98 + 144 * v97 + 144;
                  v100 = 2 * v97;
                  v97 = (2 * v97) | 1;
                  v101 = v100 + 2;
                  if (v100 + 2 < (uint64_t)v9 && sub_22E3B38EC((_DWORD *)v99, (_DWORD *)(v99 + 144)))
                  {
                    v99 += 144;
                    v97 = v101;
                  }
                  *(_OWORD *)v98 = *(_OWORD *)v99;
                  v102 = (void **)(v98 + 16);
                  if (*(char *)(v98 + 39) < 0)
                    operator delete(*v102);
                  v103 = (void **)(v99 + 16);
                  v104 = *(_OWORD *)(v99 + 16);
                  *(_QWORD *)(v98 + 32) = *(_QWORD *)(v99 + 32);
                  *(_OWORD *)v102 = v104;
                  *(_BYTE *)(v99 + 39) = 0;
                  *(_BYTE *)(v99 + 16) = 0;
                  *(_BYTE *)(v98 + 40) = *(_BYTE *)(v99 + 40);
                  v105 = (void **)(v98 + 48);
                  if (*(char *)(v98 + 71) < 0)
                    operator delete(*v105);
                  v106 = *(_OWORD *)(v99 + 48);
                  *(_QWORD *)(v98 + 64) = *(_QWORD *)(v99 + 64);
                  *(_OWORD *)v105 = v106;
                  *(_BYTE *)(v99 + 71) = 0;
                  *(_BYTE *)(v99 + 48) = 0;
                  v107 = (__int128 *)(v99 + 72);
                  sub_22EF2DD4C(v98 + 72, (__int128 *)(v99 + 72));
                  v108 = (__int128 *)(v99 + 104);
                  sub_22EF2DD4C(v98 + 104, (__int128 *)(v99 + 104));
                  *(_QWORD *)(v98 + 136) = *(_QWORD *)(v99 + 136);
                  v98 = v99;
                }
                while (v97 <= (uint64_t)((v9 - 2) >> 1));
                v109 = v99 + 48;
                v110 = (_OWORD *)(a2 - 144);
                v149 = (__int128 *)(v99 + 48);
                if (v99 == a2 - 144)
                {
                  *(_OWORD *)v99 = v152;
                  if (*(char *)(v99 + 39) < 0)
                  {
                    operator delete(*v103);
                    v109 = v99 + 48;
                  }
                  *(_QWORD *)(v99 + 32) = v154;
                  *(_OWORD *)v103 = v153;
                  *(_BYTE *)(v99 + 40) = v155;
                  if (*(char *)(v99 + 71) < 0)
                  {
                    operator delete(*(void **)v109);
                    v109 = v99 + 48;
                  }
                  *(_QWORD *)(v109 + 16) = v157;
                  *(_OWORD *)v109 = v156;
                  sub_22EF2DD4C(v99 + 72, &v158);
                  sub_22EF2DD4C(v99 + 104, &__p);
                  *(_QWORD *)(v99 + 136) = v164;
                }
                else
                {
                  *(_OWORD *)v99 = *v110;
                  if (*(char *)(v99 + 39) < 0)
                  {
                    operator delete(*v103);
                    v109 = v99 + 48;
                  }
                  v111 = (void **)(a2 - 128);
                  v112 = *(_OWORD *)(a2 - 128);
                  *(_QWORD *)(v99 + 32) = *(_QWORD *)(a2 - 112);
                  *(_OWORD *)v103 = v112;
                  *(_BYTE *)(a2 - 105) = 0;
                  *(_BYTE *)(a2 - 128) = 0;
                  *(_BYTE *)(v99 + 40) = *(_BYTE *)(a2 - 104);
                  if (*(char *)(v99 + 71) < 0)
                  {
                    operator delete(*(void **)v109);
                    v109 = v99 + 48;
                  }
                  v113 = *(_OWORD *)(a2 - 96);
                  *(_QWORD *)(v109 + 16) = *(_QWORD *)(a2 - 80);
                  *(_OWORD *)v109 = v113;
                  *(_BYTE *)(a2 - 73) = 0;
                  *(_BYTE *)(a2 - 96) = 0;
                  sub_22EF2DD4C(v99 + 72, (__int128 *)(a2 - 72));
                  sub_22EF2DD4C(v99 + 104, (__int128 *)(a2 - 40));
                  *(_QWORD *)(v99 + 136) = *(_QWORD *)(a2 - 8);
                  *v110 = v152;
                  if (*(char *)(a2 - 105) < 0)
                    operator delete(*v111);
                  v114 = (void **)(a2 - 96);
                  *(_QWORD *)(a2 - 112) = v154;
                  *(_OWORD *)v111 = v153;
                  *(_BYTE *)(a2 - 104) = v155;
                  if (*(char *)(a2 - 73) < 0)
                    operator delete(*v114);
                  *(_QWORD *)(a2 - 80) = v157;
                  *(_OWORD *)v114 = v156;
                  sub_22EF2DD4C(a2 - 72, &v158);
                  sub_22EF2DD4C(a2 - 40, &__p);
                  *(_QWORD *)(a2 - 8) = v164;
                  v110 = (_OWORD *)(a2 - 144);
                  if (v99 + 144 - a1 >= 145)
                  {
                    v115 = ((v99 + 144 - a1) / 0x90uLL - 2) >> 1;
                    v116 = a1 + 144 * v115;
                    if (sub_22E3B38EC((_DWORD *)v116, (_DWORD *)v99))
                    {
                      v165 = *(_OWORD *)v99;
                      v117 = *(_QWORD *)(v99 + 32);
                      v166 = *(_OWORD *)v103;
                      v167 = v117;
                      *(_QWORD *)(v99 + 24) = 0;
                      *(_QWORD *)(v99 + 32) = 0;
                      *v103 = 0;
                      v168 = *(_BYTE *)(v99 + 40);
                      v118 = *v149;
                      v170 = *(_QWORD *)(v99 + 64);
                      v169 = v118;
                      *(_QWORD *)(v99 + 56) = 0;
                      *(_QWORD *)(v99 + 64) = 0;
                      *(_QWORD *)v149 = 0;
                      LOBYTE(v171) = 0;
                      v173 = 0;
                      if (*(_BYTE *)(v99 + 96))
                      {
                        v119 = *v107;
                        v172 = *(_QWORD *)(v99 + 88);
                        v171 = v119;
                        *(_QWORD *)(v99 + 80) = 0;
                        *(_QWORD *)(v99 + 88) = 0;
                        *(_QWORD *)v107 = 0;
                        v173 = 1;
                      }
                      LOBYTE(v174) = 0;
                      v176 = 0;
                      if (*(_BYTE *)(v99 + 128))
                      {
                        v120 = *v108;
                        v175 = *(_QWORD *)(v99 + 120);
                        v174 = v120;
                        *(_QWORD *)(v99 + 112) = 0;
                        *(_QWORD *)(v99 + 120) = 0;
                        *(_QWORD *)v108 = 0;
                        v176 = 1;
                      }
                      v177 = *(_QWORD *)(v99 + 136);
                      do
                      {
                        v121 = v116;
                        *(_OWORD *)v99 = *(_OWORD *)v116;
                        v122 = (void **)(v99 + 16);
                        if (*(char *)(v99 + 39) < 0)
                          operator delete(*v122);
                        v123 = (void **)(v116 + 16);
                        v124 = *(_OWORD *)(v116 + 16);
                        *(_QWORD *)(v99 + 32) = *(_QWORD *)(v116 + 32);
                        *(_OWORD *)v122 = v124;
                        *(_BYTE *)(v116 + 39) = 0;
                        *(_BYTE *)(v116 + 16) = 0;
                        *(_BYTE *)(v99 + 40) = *(_BYTE *)(v116 + 40);
                        v125 = (void **)(v99 + 48);
                        if (*(char *)(v99 + 71) < 0)
                          operator delete(*v125);
                        v126 = *(_OWORD *)(v116 + 48);
                        *(_QWORD *)(v99 + 64) = *(_QWORD *)(v116 + 64);
                        *(_OWORD *)v125 = v126;
                        *(_BYTE *)(v116 + 71) = 0;
                        *(_BYTE *)(v116 + 48) = 0;
                        sub_22EF2DD4C(v99 + 72, (__int128 *)(v116 + 72));
                        sub_22EF2DD4C(v99 + 104, (__int128 *)(v116 + 104));
                        *(_QWORD *)(v99 + 136) = *(_QWORD *)(v116 + 136);
                        if (!v115)
                          break;
                        v115 = (v115 - 1) >> 1;
                        v116 = a1 + 144 * v115;
                        v99 = v121;
                      }
                      while ((sub_22E3B38EC((_DWORD *)v116, &v165) & 1) != 0);
                      *(_OWORD *)v121 = v165;
                      if (*(char *)(v121 + 39) < 0)
                        operator delete(*v123);
                      v127 = (void **)(v121 + 48);
                      v128 = v166;
                      *(_QWORD *)(v121 + 32) = v167;
                      *(_OWORD *)v123 = v128;
                      HIBYTE(v167) = 0;
                      LOBYTE(v166) = 0;
                      *(_BYTE *)(v121 + 40) = v168;
                      if (*(char *)(v121 + 71) < 0)
                        operator delete(*v127);
                      v129 = v169;
                      *(_QWORD *)(v121 + 64) = v170;
                      *(_OWORD *)v127 = v129;
                      HIBYTE(v170) = 0;
                      LOBYTE(v169) = 0;
                      sub_22EF2DD4C(v121 + 72, &v171);
                      sub_22EF2DD4C(v121 + 104, &v174);
                      *(_QWORD *)(v121 + 136) = v177;
                      v110 = (_OWORD *)(a2 - 144);
                      if (v176)
                      {
                        if (SHIBYTE(v175) < 0)
                          operator delete((void *)v174);
                        v176 = 0;
                      }
                      if (v173)
                      {
                        if (SHIBYTE(v172) < 0)
                          operator delete((void *)v171);
                        v173 = 0;
                      }
                      if (SHIBYTE(v170) < 0)
                        operator delete((void *)v169);
                      if (SHIBYTE(v167) < 0)
                        operator delete((void *)v166);
                    }
                  }
                }
                if (v163)
                {
                  if (SHIBYTE(v162) < 0)
                    operator delete((void *)__p);
                  v163 = 0;
                }
                if (v160)
                {
                  if (SHIBYTE(v159) < 0)
                    operator delete((void *)v158);
                  v160 = 0;
                }
                a2 = (uint64_t)v110;
              }
              while ((uint64_t)v9-- > 2);
            }
            return;
          }
          v10 = v7 + 144 * (v9 >> 1);
          if ((unint64_t)v8 < 0x4801)
          {
            sub_22EF3F9F0((uint64_t *)(v7 + 144 * (v9 >> 1)), (uint64_t *)v7, (uint64_t)v148);
          }
          else
          {
            sub_22EF3F9F0((uint64_t *)v7, (uint64_t *)(v7 + 144 * (v9 >> 1)), (uint64_t)v148);
            v11 = (uint64_t *)(v7 + 144 * (v9 >> 1) - 144);
            sub_22EF3F9F0((uint64_t *)(a1 + 144), v11, a2 - 288);
            sub_22EF3F9F0((uint64_t *)(a1 + 288), (uint64_t *)(a1 + 144 + 144 * (v9 >> 1)), a2 - 432);
            sub_22EF3F9F0(v11, (uint64_t *)(a1 + 144 * (v9 >> 1)), a1 + 144 + 144 * (v9 >> 1));
            v12 = *(_QWORD *)a1;
            v13 = *(_QWORD *)(a1 + 8);
            *(_OWORD *)a1 = *(_OWORD *)v10;
            *(_QWORD *)v10 = v12;
            *(_QWORD *)(v10 + 8) = v13;
            sub_22EF3FEF8(a1 + 16, a1 + 16 + 144 * (v9 >> 1));
          }
          --a3;
          if ((a4 & 1) == 0 && (sub_22E3B38EC((_DWORD *)(a1 - 144), (_DWORD *)a1) & 1) == 0)
          {
            v35 = *(_OWORD *)(a1 + 16);
            v165 = *(_OWORD *)a1;
            v36 = *(_QWORD *)(a1 + 32);
            v166 = v35;
            v167 = v36;
            *(_QWORD *)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 32) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            v168 = *(_BYTE *)(a1 + 40);
            v37 = *(_OWORD *)(a1 + 48);
            v170 = *(_QWORD *)(a1 + 64);
            v169 = v37;
            *(_QWORD *)(a1 + 56) = 0;
            *(_QWORD *)(a1 + 64) = 0;
            *(_QWORD *)(a1 + 48) = 0;
            LOBYTE(v171) = 0;
            v173 = 0;
            if (*(_BYTE *)(a1 + 96))
            {
              v38 = *(_OWORD *)(a1 + 72);
              v172 = *(_QWORD *)(a1 + 88);
              v171 = v38;
              *(_QWORD *)(a1 + 80) = 0;
              *(_QWORD *)(a1 + 88) = 0;
              *(_QWORD *)(a1 + 72) = 0;
              v173 = 1;
            }
            LOBYTE(v174) = 0;
            v176 = 0;
            if (*(_BYTE *)(a1 + 128))
            {
              v39 = *(_OWORD *)(a1 + 104);
              v175 = *(_QWORD *)(a1 + 120);
              v174 = v39;
              *(_QWORD *)(a1 + 112) = 0;
              *(_QWORD *)(a1 + 120) = 0;
              *(_QWORD *)(a1 + 104) = 0;
              v176 = 1;
            }
            v177 = *(_QWORD *)(a1 + 136);
            if ((sub_22E3B38EC(&v165, v148) & 1) != 0)
            {
              v7 = a1;
              do
                v7 += 144;
              while ((sub_22E3B38EC(&v165, (_DWORD *)v7) & 1) == 0);
            }
            else
            {
              v40 = (_DWORD *)(a1 + 144);
              do
              {
                v7 = (unint64_t)v40;
                if ((unint64_t)v40 >= v6)
                  break;
                v41 = sub_22E3B38EC(&v165, v40);
                v40 = (_DWORD *)(v7 + 144);
              }
              while (!v41);
            }
            v42 = v6;
            if (v7 < v6)
            {
              v42 = v6;
              do
                v42 -= 144;
              while ((sub_22E3B38EC(&v165, (_DWORD *)v42) & 1) != 0);
            }
            while (v7 < v42)
            {
              v43 = *(_QWORD *)v7;
              v44 = *(_QWORD *)(v7 + 8);
              *(_OWORD *)v7 = *(_OWORD *)v42;
              *(_QWORD *)v42 = v43;
              *(_QWORD *)(v42 + 8) = v44;
              sub_22EF3FEF8(v7 + 16, v42 + 16);
              do
                v7 += 144;
              while (!sub_22E3B38EC(&v165, (_DWORD *)v7));
              do
                v42 -= 144;
              while ((sub_22E3B38EC(&v165, (_DWORD *)v42) & 1) != 0);
            }
            v45 = (_OWORD *)(v7 - 144);
            if (v7 - 144 != a1)
            {
              v46 = (void **)(a1 + 16);
              *(_OWORD *)a1 = *v45;
              if (*(char *)(a1 + 39) < 0)
                operator delete(*v46);
              v47 = (void **)(a1 + 48);
              v48 = *(_OWORD *)(v7 - 128);
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 112);
              *(_OWORD *)v46 = v48;
              *(_BYTE *)(v7 - 105) = 0;
              *(_BYTE *)(v7 - 128) = 0;
              *(_BYTE *)(a1 + 40) = *(_BYTE *)(v7 - 104);
              if (*(char *)(a1 + 71) < 0)
                operator delete(*v47);
              v49 = *(_OWORD *)(v7 - 96);
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(v7 - 80);
              *(_OWORD *)v47 = v49;
              *(_BYTE *)(v7 - 73) = 0;
              *(_BYTE *)(v7 - 96) = 0;
              sub_22EF2DD4C(a1 + 72, (__int128 *)(v7 - 72));
              sub_22EF2DD4C(a1 + 104, (__int128 *)(v7 - 40));
              *(_QWORD *)(a1 + 136) = *(_QWORD *)(v7 - 8);
            }
            *v45 = v165;
            v50 = (void **)(v7 - 128);
            if (*(char *)(v7 - 105) < 0)
              operator delete(*v50);
            v51 = v166;
            *(_QWORD *)(v7 - 112) = v167;
            *(_OWORD *)v50 = v51;
            HIBYTE(v167) = 0;
            LOBYTE(v166) = 0;
            *(_BYTE *)(v7 - 104) = v168;
            v52 = (void **)(v7 - 96);
            if (*(char *)(v7 - 73) < 0)
              operator delete(*v52);
            v53 = v169;
            *(_QWORD *)(v7 - 80) = v170;
            *(_OWORD *)v52 = v53;
            HIBYTE(v170) = 0;
            LOBYTE(v169) = 0;
            sub_22EF2DD4C(v7 - 72, &v171);
            sub_22EF2DD4C(v7 - 40, &v174);
            *(_QWORD *)(v7 - 8) = v177;
            if (v176)
            {
              if (SHIBYTE(v175) < 0)
                operator delete((void *)v174);
              v176 = 0;
            }
            if (v173)
            {
              if (SHIBYTE(v172) < 0)
                operator delete((void *)v171);
              v173 = 0;
            }
            if (SHIBYTE(v170) < 0)
              operator delete((void *)v169);
            if (SHIBYTE(v167) < 0)
              operator delete((void *)v166);
            goto LABEL_54;
          }
          v14 = *(_OWORD *)(a1 + 16);
          v165 = *(_OWORD *)a1;
          v15 = *(_QWORD *)(a1 + 32);
          v166 = v14;
          v167 = v15;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          v168 = *(_BYTE *)(a1 + 40);
          v16 = *(_OWORD *)(a1 + 48);
          v170 = *(_QWORD *)(a1 + 64);
          v169 = v16;
          *(_QWORD *)(a1 + 56) = 0;
          *(_QWORD *)(a1 + 64) = 0;
          *(_QWORD *)(a1 + 48) = 0;
          LOBYTE(v171) = 0;
          v173 = 0;
          if (*(_BYTE *)(a1 + 96))
          {
            v17 = *(_OWORD *)(a1 + 72);
            v172 = *(_QWORD *)(a1 + 88);
            v171 = v17;
            *(_QWORD *)(a1 + 80) = 0;
            *(_QWORD *)(a1 + 88) = 0;
            *(_QWORD *)(a1 + 72) = 0;
            v173 = 1;
          }
          LOBYTE(v174) = 0;
          v176 = 0;
          if (*(_BYTE *)(a1 + 128))
          {
            v18 = *(_OWORD *)(a1 + 104);
            v175 = *(_QWORD *)(a1 + 120);
            v174 = v18;
            *(_QWORD *)(a1 + 112) = 0;
            *(_QWORD *)(a1 + 120) = 0;
            *(_QWORD *)(a1 + 104) = 0;
            v176 = 1;
          }
          v19 = 0;
          v20 = (void **)(a1 + 16);
          v21 = (void **)(a1 + 48);
          v177 = *(_QWORD *)(a1 + 136);
          do
            v19 += 144;
          while ((sub_22E3B38EC((_DWORD *)(v19 + a1), &v165) & 1) != 0);
          v22 = a1 + v19;
          v23 = (_DWORD *)a2;
          if (v19 == 144)
          {
            v23 = (_DWORD *)a2;
            do
            {
              if (v22 >= (unint64_t)v23)
                break;
              v23 -= 36;
            }
            while ((sub_22E3B38EC(v23, &v165) & 1) == 0);
          }
          else
          {
            do
              v23 -= 36;
            while (!sub_22E3B38EC(v23, &v165));
          }
          v7 = a1 + v19;
          if (v22 < (unint64_t)v23)
          {
            v24 = v23;
            do
            {
              v25 = *(_QWORD *)v7;
              v26 = *(_QWORD *)(v7 + 8);
              *(_OWORD *)v7 = *(_OWORD *)v24;
              *(_QWORD *)v24 = v25;
              *((_QWORD *)v24 + 1) = v26;
              sub_22EF3FEF8(v7 + 16, (uint64_t)(v24 + 4));
              do
                v7 += 144;
              while ((sub_22E3B38EC((_DWORD *)v7, &v165) & 1) != 0);
              do
                v24 -= 36;
              while (!sub_22E3B38EC(v24, &v165));
            }
            while (v7 < (unint64_t)v24);
          }
          v27 = (_OWORD *)(v7 - 144);
          if (v7 - 144 != a1)
          {
            *(_OWORD *)a1 = *v27;
            if (*(char *)(a1 + 39) < 0)
              operator delete(*v20);
            v28 = *(_OWORD *)(v7 - 128);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 112);
            *(_OWORD *)v20 = v28;
            *(_BYTE *)(v7 - 105) = 0;
            *(_BYTE *)(v7 - 128) = 0;
            *(_BYTE *)(a1 + 40) = *(_BYTE *)(v7 - 104);
            if (*(char *)(a1 + 71) < 0)
              operator delete(*v21);
            v29 = *(_OWORD *)(v7 - 96);
            *(_QWORD *)(a1 + 64) = *(_QWORD *)(v7 - 80);
            *(_OWORD *)v21 = v29;
            *(_BYTE *)(v7 - 73) = 0;
            *(_BYTE *)(v7 - 96) = 0;
            sub_22EF2DD4C(a1 + 72, (__int128 *)(v7 - 72));
            sub_22EF2DD4C(a1 + 104, (__int128 *)(v7 - 40));
            *(_QWORD *)(a1 + 136) = *(_QWORD *)(v7 - 8);
          }
          *v27 = v165;
          v30 = (void **)(v7 - 128);
          if (*(char *)(v7 - 105) < 0)
            operator delete(*v30);
          v31 = v166;
          *(_QWORD *)(v7 - 112) = v167;
          *(_OWORD *)v30 = v31;
          HIBYTE(v167) = 0;
          LOBYTE(v166) = 0;
          *(_BYTE *)(v7 - 104) = v168;
          v32 = (void **)(v7 - 96);
          v6 = a2;
          if (*(char *)(v7 - 73) < 0)
            operator delete(*v32);
          v33 = v169;
          *(_QWORD *)(v7 - 80) = v170;
          *(_OWORD *)v32 = v33;
          HIBYTE(v170) = 0;
          LOBYTE(v169) = 0;
          sub_22EF2DD4C(v7 - 72, &v171);
          sub_22EF2DD4C(v7 - 40, &v174);
          *(_QWORD *)(v7 - 8) = v177;
          if (v176)
          {
            if (SHIBYTE(v175) < 0)
              operator delete((void *)v174);
            v176 = 0;
          }
          if (v173)
          {
            if (SHIBYTE(v172) < 0)
              operator delete((void *)v171);
            v173 = 0;
          }
          if (SHIBYTE(v170) < 0)
            operator delete((void *)v169);
          if (SHIBYTE(v167) < 0)
            operator delete((void *)v166);
          if (v22 < (unint64_t)v23)
            goto LABEL_53;
          v34 = sub_22EF3FB00(a1, v7 - 144);
          if (!sub_22EF3FB00(v7, a2))
          {
            if ((v34 & 1) != 0)
              continue;
LABEL_53:
            sub_22EF3E120(a1, v7 - 144, a3, a4 & 1);
LABEL_54:
            a4 = 0;
            continue;
          }
          a2 = v7 - 144;
          if ((v34 & 1) != 0)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) != 0)
        {
          if (v7 != v6)
          {
            v56 = (_DWORD *)(v7 + 144);
            if (v7 + 144 != a2)
            {
              v57 = 0;
              v58 = (_OWORD *)v7;
              do
              {
                v59 = v56;
                if (sub_22E3B38EC(v56, v58))
                {
                  v165 = *v59;
                  v166 = v58[10];
                  v167 = *((_QWORD *)v58 + 22);
                  *((_QWORD *)v58 + 20) = 0;
                  *((_QWORD *)v58 + 21) = 0;
                  *((_QWORD *)v58 + 22) = 0;
                  v168 = *((_BYTE *)v58 + 184);
                  v169 = v58[12];
                  v170 = *((_QWORD *)v58 + 26);
                  *((_QWORD *)v58 + 24) = 0;
                  *((_QWORD *)v58 + 25) = 0;
                  *((_QWORD *)v58 + 26) = 0;
                  LOBYTE(v171) = 0;
                  v173 = 0;
                  if (*((_BYTE *)v58 + 240))
                  {
                    v171 = *(_OWORD *)((char *)v58 + 216);
                    v172 = *((_QWORD *)v58 + 29);
                    *((_QWORD *)v58 + 28) = 0;
                    *((_QWORD *)v58 + 29) = 0;
                    *((_QWORD *)v58 + 27) = 0;
                    v173 = 1;
                  }
                  LOBYTE(v174) = 0;
                  v176 = 0;
                  if (*((_BYTE *)v58 + 272))
                  {
                    v174 = *(_OWORD *)((char *)v58 + 248);
                    v175 = *((_QWORD *)v58 + 33);
                    *((_QWORD *)v58 + 32) = 0;
                    *((_QWORD *)v58 + 33) = 0;
                    *((_QWORD *)v58 + 31) = 0;
                    v176 = 1;
                  }
                  v177 = *((_QWORD *)v58 + 35);
                  v60 = v57;
                  while (1)
                  {
                    v61 = v7 + v60;
                    *(_OWORD *)(v7 + v60 + 144) = *(_OWORD *)(v7 + v60);
                    v62 = (void **)(v7 + v60 + 160);
                    if (*(char *)(v7 + v60 + 183) < 0)
                      operator delete(*v62);
                    *(_OWORD *)v62 = *(_OWORD *)(v61 + 16);
                    *(_QWORD *)(v7 + v60 + 176) = *(_QWORD *)(v61 + 32);
                    *(_BYTE *)(v61 + 39) = 0;
                    *(_BYTE *)(v61 + 16) = 0;
                    *(_BYTE *)(v61 + 184) = *(_BYTE *)(v61 + 40);
                    v63 = v61 + 192;
                    if (*(char *)(v61 + 215) < 0)
                      operator delete(*(void **)v63);
                    v64 = v7 + v60;
                    *(_OWORD *)v63 = *(_OWORD *)(v7 + v60 + 48);
                    *(_QWORD *)(v63 + 16) = *(_QWORD *)(v7 + v60 + 64);
                    *(_BYTE *)(v64 + 71) = 0;
                    *(_BYTE *)(v64 + 48) = 0;
                    v65 = (__int128 *)(v7 + v60 + 72);
                    sub_22EF2DD4C(v7 + v60 + 216, v65);
                    v66 = v7 + v60 + 104;
                    sub_22EF2DD4C(v64 + 248, (__int128 *)(v64 + 104));
                    *(_QWORD *)(v64 + 280) = *(_QWORD *)(v64 + 136);
                    if (!v60)
                      break;
                    v60 -= 144;
                    if ((sub_22E3B38EC(&v165, (_DWORD *)(v60 + v7)) & 1) == 0)
                    {
                      v67 = v7 + v60 + 144;
                      goto LABEL_122;
                    }
                  }
                  v67 = v7;
LABEL_122:
                  *(_OWORD *)v67 = v165;
                  v68 = v64 + 16;
                  if (*(char *)(v67 + 39) < 0)
                    operator delete(*(void **)v68);
                  v69 = v64 + 48;
                  v70 = v166;
                  *(_QWORD *)(v68 + 16) = v167;
                  *(_OWORD *)v68 = v70;
                  HIBYTE(v167) = 0;
                  LOBYTE(v166) = 0;
                  *(_BYTE *)(v67 + 40) = v168;
                  if (*(char *)(v67 + 71) < 0)
                    operator delete(*(void **)v69);
                  v71 = v169;
                  *(_QWORD *)(v69 + 16) = v170;
                  *(_OWORD *)v69 = v71;
                  HIBYTE(v170) = 0;
                  LOBYTE(v169) = 0;
                  sub_22EF2DD4C((uint64_t)v65, &v171);
                  sub_22EF2DD4C(v66, &v174);
                  *(_QWORD *)(v67 + 136) = v177;
                  if (v176)
                  {
                    if (SHIBYTE(v175) < 0)
                      operator delete((void *)v174);
                    v176 = 0;
                  }
                  if (v173)
                  {
                    if (SHIBYTE(v172) < 0)
                      operator delete((void *)v171);
                    v173 = 0;
                  }
                  if (SHIBYTE(v170) < 0)
                    operator delete((void *)v169);
                  if (SHIBYTE(v167) < 0)
                    operator delete((void *)v166);
                }
                v56 = v59 + 9;
                v57 += 144;
                v58 = v59;
              }
              while (v59 + 9 != (_OWORD *)a2);
            }
          }
        }
        else if (v7 != v6)
        {
          v131 = (_DWORD *)(v7 + 144);
          if (v7 + 144 != a2)
          {
            v132 = v7 - 144;
            do
            {
              v133 = v131;
              v134 = (_OWORD *)a2;
              if (sub_22E3B38EC(v131, (_DWORD *)a1))
              {
                v165 = *v133;
                v166 = *(_OWORD *)(a1 + 160);
                v167 = *(_QWORD *)(a1 + 176);
                *(_QWORD *)(a1 + 160) = 0;
                *(_QWORD *)(a1 + 168) = 0;
                *(_QWORD *)(a1 + 176) = 0;
                v168 = *(_BYTE *)(a1 + 184);
                v169 = *(_OWORD *)(a1 + 192);
                v170 = *(_QWORD *)(a1 + 208);
                *(_QWORD *)(a1 + 192) = 0;
                *(_QWORD *)(a1 + 200) = 0;
                *(_QWORD *)(a1 + 208) = 0;
                LOBYTE(v171) = 0;
                v173 = 0;
                if (*(_BYTE *)(a1 + 240))
                {
                  v171 = *(_OWORD *)(a1 + 216);
                  v172 = *(_QWORD *)(a1 + 232);
                  *(_QWORD *)(a1 + 224) = 0;
                  *(_QWORD *)(a1 + 232) = 0;
                  *(_QWORD *)(a1 + 216) = 0;
                  v173 = 1;
                }
                LOBYTE(v174) = 0;
                v176 = 0;
                if (*(_BYTE *)(a1 + 272))
                {
                  v174 = *(_OWORD *)(a1 + 248);
                  v175 = *(_QWORD *)(a1 + 264);
                  *(_QWORD *)(a1 + 256) = 0;
                  *(_QWORD *)(a1 + 264) = 0;
                  *(_QWORD *)(a1 + 248) = 0;
                  v176 = 1;
                }
                v177 = *(_QWORD *)(a1 + 280);
                v135 = v132;
                do
                {
                  *(_OWORD *)(v135 + 288) = *(_OWORD *)(v135 + 144);
                  v136 = (void **)(v135 + 304);
                  if (*(char *)(v135 + 327) < 0)
                    operator delete(*v136);
                  *(_OWORD *)v136 = *(_OWORD *)(v135 + 160);
                  *(_QWORD *)(v135 + 320) = *(_QWORD *)(v135 + 176);
                  *(_BYTE *)(v135 + 183) = 0;
                  *(_BYTE *)(v135 + 160) = 0;
                  *(_BYTE *)(v135 + 328) = *(_BYTE *)(v135 + 184);
                  v137 = (void **)(v135 + 336);
                  if (*(char *)(v135 + 359) < 0)
                    operator delete(*v137);
                  *(_OWORD *)v137 = *(_OWORD *)(v135 + 192);
                  *(_QWORD *)(v135 + 352) = *(_QWORD *)(v135 + 208);
                  *(_BYTE *)(v135 + 215) = 0;
                  *(_BYTE *)(v135 + 192) = 0;
                  sub_22EF2DD4C(v135 + 360, (__int128 *)(v135 + 216));
                  sub_22EF2DD4C(v135 + 392, (__int128 *)(v135 + 248));
                  *(_QWORD *)(v135 + 424) = *(_QWORD *)(v135 + 280);
                  v138 = sub_22E3B38EC(&v165, (_DWORD *)v135);
                  v135 -= 144;
                }
                while ((v138 & 1) != 0);
                *(_OWORD *)(v135 + 288) = v165;
                v139 = (void **)(v135 + 304);
                if (*(char *)(v135 + 327) < 0)
                  operator delete(*v139);
                v140 = (void **)(v135 + 336);
                v141 = v166;
                *(_QWORD *)(v135 + 320) = v167;
                *(_OWORD *)v139 = v141;
                HIBYTE(v167) = 0;
                LOBYTE(v166) = 0;
                *(_BYTE *)(v135 + 328) = v168;
                if (*(char *)(v135 + 359) < 0)
                  operator delete(*v140);
                v142 = v169;
                *(_QWORD *)(v135 + 352) = v170;
                *(_OWORD *)v140 = v142;
                HIBYTE(v170) = 0;
                LOBYTE(v169) = 0;
                sub_22EF2DD4C(v135 + 360, &v171);
                sub_22EF2DD4C(v135 + 392, &v174);
                *(_QWORD *)(v135 + 424) = v177;
                v134 = (_OWORD *)a2;
                if (v176)
                {
                  if (SHIBYTE(v175) < 0)
                    operator delete((void *)v174);
                  v176 = 0;
                }
                if (v173)
                {
                  if (SHIBYTE(v172) < 0)
                    operator delete((void *)v171);
                  v173 = 0;
                }
                if (SHIBYTE(v170) < 0)
                  operator delete((void *)v169);
                if (SHIBYTE(v167) < 0)
                  operator delete((void *)v166);
              }
              v131 = v133 + 9;
              v132 += 144;
              a1 = (uint64_t)v133;
            }
            while (v133 + 9 != v134);
          }
        }
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 6;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v49 = *(_QWORD *)(a2 - 64);
        v50 = *(_QWORD *)v8;
        if (v49 < *(_QWORD *)v8)
        {
          *(_QWORD *)v8 = v49;
          *(_QWORD *)(a2 - 64) = v50;
          v180 = *(_QWORD *)(v8 + 56);
          v161 = *(_OWORD *)(v8 + 24);
          v171 = *(_OWORD *)(v8 + 40);
          v152 = *(_OWORD *)(v8 + 8);
          v51 = *(_OWORD *)(a2 - 56);
          v52 = *(_OWORD *)(a2 - 40);
          v53 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v8 + 56) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)(v8 + 40) = v53;
          *(_OWORD *)(v8 + 24) = v52;
          *(_OWORD *)(v8 + 8) = v51;
          *(_QWORD *)(a2 - 8) = v180;
          *(_OWORD *)(a2 - 24) = v171;
          *(_OWORD *)(a2 - 40) = v161;
          *(_OWORD *)(a2 - 56) = v152;
        }
        return;
      case 3:
        sub_22F135AE0((unint64_t *)v8, (unint64_t *)(v8 + 64), (unint64_t *)(a2 - 64));
        return;
      case 4:
        sub_22F136040(v8, v8 + 64, v8 + 128, a2 - 64);
        return;
      case 5:
        sub_22F136040(v8, v8 + 64, v8 + 128, v8 + 192);
        v54 = *(_QWORD *)(a2 - 64);
        v55 = *(_QWORD *)(v8 + 192);
        if (v54 < v55)
        {
          *(_QWORD *)(v8 + 192) = v54;
          *(_QWORD *)(a2 - 64) = v55;
          v56 = *(_OWORD *)(v8 + 200);
          v162 = *(_OWORD *)(v8 + 216);
          v57 = *(_OWORD *)(v8 + 232);
          v58 = *(_QWORD *)(v8 + 248);
          v59 = *(_QWORD *)(a2 - 8);
          v60 = *(_OWORD *)(a2 - 24);
          v61 = *(_OWORD *)(a2 - 40);
          *(_OWORD *)(v8 + 200) = *(_OWORD *)(a2 - 56);
          *(_OWORD *)(v8 + 216) = v61;
          *(_OWORD *)(v8 + 232) = v60;
          *(_QWORD *)(v8 + 248) = v59;
          *(_OWORD *)(a2 - 40) = v162;
          *(_OWORD *)(a2 - 24) = v57;
          *(_QWORD *)(a2 - 8) = v58;
          *(_OWORD *)(a2 - 56) = v56;
          v62 = *(_QWORD *)(v8 + 192);
          v63 = *(_QWORD *)(v8 + 128);
          if (v62 < v63)
          {
            *(_QWORD *)(v8 + 128) = v62;
            v64 = *(_QWORD *)(v8 + 184);
            v65 = *(_OWORD *)(v8 + 168);
            v66 = *(_OWORD *)(v8 + 136);
            v67 = *(_OWORD *)(v8 + 216);
            *(_OWORD *)(v8 + 136) = *(_OWORD *)(v8 + 200);
            v68 = *(_OWORD *)(v8 + 152);
            *(_OWORD *)(v8 + 152) = v67;
            *(_OWORD *)(v8 + 168) = *(_OWORD *)(v8 + 232);
            *(_QWORD *)(v8 + 184) = *(_QWORD *)(v8 + 248);
            *(_QWORD *)(v8 + 192) = v63;
            *(_OWORD *)(v8 + 200) = v66;
            *(_OWORD *)(v8 + 216) = v68;
            *(_OWORD *)(v8 + 232) = v65;
            *(_QWORD *)(v8 + 248) = v64;
            v69 = *(_QWORD *)(v8 + 64);
            if (v62 < v69)
            {
              *(_QWORD *)(v8 + 64) = v62;
              v70 = *(_QWORD *)(v8 + 120);
              v71 = *(_OWORD *)(v8 + 104);
              v72 = *(_OWORD *)(v8 + 72);
              v73 = *(_OWORD *)(v8 + 152);
              *(_OWORD *)(v8 + 72) = *(_OWORD *)(v8 + 136);
              v74 = *(_OWORD *)(v8 + 88);
              *(_OWORD *)(v8 + 88) = v73;
              *(_OWORD *)(v8 + 104) = *(_OWORD *)(v8 + 168);
              *(_QWORD *)(v8 + 120) = *(_QWORD *)(v8 + 184);
              *(_QWORD *)(v8 + 128) = v69;
              *(_OWORD *)(v8 + 136) = v72;
              *(_OWORD *)(v8 + 152) = v74;
              *(_OWORD *)(v8 + 168) = v71;
              *(_QWORD *)(v8 + 184) = v70;
              v75 = *(_QWORD *)v8;
              if (v62 < *(_QWORD *)v8)
              {
                *(_QWORD *)v8 = v62;
                v181 = *(_QWORD *)(v8 + 56);
                v163 = *(_OWORD *)(v8 + 24);
                v172 = *(_OWORD *)(v8 + 40);
                v153 = *(_OWORD *)(v8 + 8);
                *(_OWORD *)(v8 + 40) = *(_OWORD *)(v8 + 104);
                v76 = *(_OWORD *)(v8 + 72);
                *(_OWORD *)(v8 + 24) = *(_OWORD *)(v8 + 88);
                *(_OWORD *)(v8 + 8) = v76;
                *(_QWORD *)(v8 + 56) = *(_QWORD *)(v8 + 120);
                *(_QWORD *)(v8 + 64) = v75;
                *(_QWORD *)(v8 + 120) = v181;
                *(_OWORD *)(v8 + 88) = v163;
                *(_OWORD *)(v8 + 104) = v172;
                *(_OWORD *)(v8 + 72) = v153;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 1535)
        {
          v77 = v8 + 64;
          v79 = v8 == a2 || v77 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v79)
            {
              v80 = 0;
              v81 = v8;
              do
              {
                v82 = v77;
                v83 = *(_QWORD *)(v81 + 64);
                if (v83 < *(_QWORD *)v81)
                {
                  v154 = *(_OWORD *)(v81 + 72);
                  v164 = *(_OWORD *)(v81 + 88);
                  v173 = *(_OWORD *)(v81 + 104);
                  v182 = *(_QWORD *)(v81 + 120);
                  v84 = *(_QWORD *)v81;
                  v85 = v80;
                  while (1)
                  {
                    v86 = v8 + v85;
                    *(_QWORD *)(v86 + 64) = v84;
                    *(_OWORD *)(v86 + 72) = *(_OWORD *)(v8 + v85 + 8);
                    *(_OWORD *)(v86 + 88) = *(_OWORD *)(v8 + v85 + 24);
                    *(_OWORD *)(v86 + 104) = *(_OWORD *)(v8 + v85 + 40);
                    *(_QWORD *)(v86 + 120) = *(_QWORD *)(v8 + v85 + 56);
                    if (!v85)
                      break;
                    v84 = *(_QWORD *)(v86 - 64);
                    v85 -= 64;
                    if (v83 >= v84)
                    {
                      v87 = (_QWORD *)(v8 + v85 + 64);
                      goto LABEL_78;
                    }
                  }
                  v87 = (_QWORD *)v8;
LABEL_78:
                  *v87 = v83;
                  *(_QWORD *)(v86 + 56) = v182;
                  *(_OWORD *)(v86 + 40) = v173;
                  *(_OWORD *)(v86 + 24) = v164;
                  *(_OWORD *)(v86 + 8) = v154;
                }
                v77 = v82 + 64;
                v80 += 64;
                v81 = v82;
              }
              while (v82 + 64 != a2);
            }
          }
          else if (!v79)
          {
            v131 = v8 + 72;
            do
            {
              v132 = v77;
              v133 = *(_QWORD *)(a1 + 64);
              if (v133 < *(_QWORD *)a1)
              {
                v157 = *(_OWORD *)(a1 + 72);
                v167 = *(_OWORD *)(a1 + 88);
                v176 = *(_OWORD *)(a1 + 104);
                v185 = *(_QWORD *)(a1 + 120);
                v134 = *(_QWORD *)a1;
                v135 = v131;
                do
                {
                  *(_QWORD *)(v135 - 8) = v134;
                  v136 = *(_OWORD *)(v135 - 48);
                  *(_OWORD *)v135 = *(_OWORD *)(v135 - 64);
                  *(_OWORD *)(v135 + 16) = v136;
                  *(_OWORD *)(v135 + 32) = *(_OWORD *)(v135 - 32);
                  *(_QWORD *)(v135 + 48) = *(_QWORD *)(v135 - 16);
                  v134 = *(_QWORD *)(v135 - 136);
                  v135 -= 64;
                }
                while (v133 < v134);
                *(_QWORD *)(v135 - 8) = v133;
                *(_QWORD *)(v135 + 48) = v185;
                *(_OWORD *)(v135 + 16) = v167;
                *(_OWORD *)(v135 + 32) = v176;
                *(_OWORD *)v135 = v157;
              }
              v77 = v132 + 64;
              v131 += 64;
              a1 = v132;
            }
            while (v132 + 64 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 == a2)
            return;
          v88 = (unint64_t)(v10 - 2) >> 1;
          v89 = v88;
          do
          {
            v90 = v89;
            if (v88 >= v89)
            {
              v91 = (2 * v89) | 1;
              v92 = v8 + (v91 << 6);
              if (2 * v90 + 2 >= v10)
              {
                v93 = *(_QWORD *)v92;
              }
              else
              {
                v93 = *(_QWORD *)(v92 + 64);
                v94 = *(_QWORD *)v92 >= v93;
                if (*(_QWORD *)v92 > v93)
                  v93 = *(_QWORD *)v92;
                if (!v94)
                {
                  v92 += 64;
                  v91 = 2 * v90 + 2;
                }
              }
              v95 = v8 + (v90 << 6);
              v96 = *(_QWORD *)v95;
              if (v93 >= *(_QWORD *)v95)
              {
                v183 = *(_QWORD *)(v95 + 56);
                v165 = *(_OWORD *)(v95 + 24);
                v174 = *(_OWORD *)(v95 + 40);
                v155 = *(_OWORD *)(v95 + 8);
                do
                {
                  v97 = v95;
                  v95 = v92;
                  *(_QWORD *)v97 = v93;
                  v98 = *(_OWORD *)(v92 + 8);
                  v99 = *(_OWORD *)(v92 + 24);
                  v100 = *(_OWORD *)(v92 + 40);
                  *(_QWORD *)(v97 + 56) = *(_QWORD *)(v92 + 56);
                  *(_OWORD *)(v97 + 40) = v100;
                  *(_OWORD *)(v97 + 24) = v99;
                  *(_OWORD *)(v97 + 8) = v98;
                  if (v88 < v91)
                    break;
                  v101 = (2 * v91) | 1;
                  v92 = v8 + (v101 << 6);
                  v91 = 2 * v91 + 2;
                  if (v91 >= v10)
                  {
                    v93 = *(_QWORD *)v92;
                    v91 = v101;
                  }
                  else
                  {
                    v93 = *(_QWORD *)v92;
                    v102 = *(_QWORD *)(v92 + 64);
                    if (*(_QWORD *)v92 <= v102)
                      v93 = *(_QWORD *)(v92 + 64);
                    if (*(_QWORD *)v92 >= v102)
                      v91 = v101;
                    else
                      v92 += 64;
                  }
                }
                while (v93 >= v96);
                *(_QWORD *)v95 = v96;
                *(_QWORD *)(v95 + 56) = v183;
                *(_OWORD *)(v95 + 24) = v165;
                *(_OWORD *)(v95 + 40) = v174;
                *(_OWORD *)(v95 + 8) = v155;
              }
            }
            v89 = v90 - 1;
          }
          while (v90);
          while (2)
          {
            v103 = 0;
            v104 = *(_QWORD *)v8;
            v148 = *(_QWORD *)(v8 + 56);
            v142 = *(_OWORD *)(v8 + 24);
            v145 = *(_OWORD *)(v8 + 40);
            v139 = *(_OWORD *)(v8 + 8);
            v105 = v8;
            do
            {
              v106 = v105 + (v103 << 6) + 64;
              v107 = (2 * v103) | 1;
              v103 = 2 * v103 + 2;
              if (v103 >= v10)
              {
                v108 = *(_QWORD *)v106;
                v103 = v107;
              }
              else
              {
                v108 = *(_QWORD *)v106;
                v109 = *(_QWORD *)(v106 + 64);
                if (*(_QWORD *)v106 <= v109)
                  v108 = *(_QWORD *)(v106 + 64);
                if (*(_QWORD *)v106 >= v109)
                  v103 = v107;
                else
                  v106 += 64;
              }
              *(_QWORD *)v105 = v108;
              v110 = *(_OWORD *)(v106 + 8);
              v111 = *(_OWORD *)(v106 + 24);
              v112 = *(_OWORD *)(v106 + 40);
              *(_QWORD *)(v105 + 56) = *(_QWORD *)(v106 + 56);
              *(_OWORD *)(v105 + 40) = v112;
              *(_OWORD *)(v105 + 24) = v111;
              *(_OWORD *)(v105 + 8) = v110;
              v105 = v106;
            }
            while (v103 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
            v113 = v106 + 8;
            if (v106 != a2 - 64)
            {
              *(_QWORD *)v106 = *(_QWORD *)(a2 - 64);
              v114 = *(_OWORD *)(a2 - 56);
              v115 = *(_OWORD *)(a2 - 40);
              v116 = *(_OWORD *)(a2 - 24);
              *(_QWORD *)(v106 + 56) = *(_QWORD *)(a2 - 8);
              *(_OWORD *)(v106 + 24) = v115;
              *(_OWORD *)(v106 + 40) = v116;
              *(_OWORD *)v113 = v114;
              *(_QWORD *)(a2 - 64) = v104;
              *(_QWORD *)(a2 - 8) = v148;
              *(_OWORD *)(a2 - 24) = v145;
              *(_OWORD *)(a2 - 40) = v142;
              *(_OWORD *)(a2 - 56) = v139;
              v117 = v106 - v8 + 64;
              if (v117 >= 65)
              {
                v118 = (((unint64_t)v117 >> 6) - 2) >> 1;
                v119 = v8 + (v118 << 6);
                v120 = *(_QWORD *)v106;
                if (*(_QWORD *)v119 < *(_QWORD *)v106)
                {
                  v184 = *(_QWORD *)(v106 + 56);
                  v166 = *(_OWORD *)(v106 + 24);
                  v175 = *(_OWORD *)(v106 + 40);
                  v156 = *(_OWORD *)v113;
                  v121 = *(_QWORD *)v119;
                  do
                  {
                    v122 = v106;
                    v106 = v119;
                    *(_QWORD *)v122 = v121;
                    v123 = *(_OWORD *)(v119 + 8);
                    v124 = *(_OWORD *)(v119 + 24);
                    v125 = *(_OWORD *)(v119 + 40);
                    *(_QWORD *)(v122 + 56) = *(_QWORD *)(v119 + 56);
                    *(_OWORD *)(v122 + 40) = v125;
                    *(_OWORD *)(v122 + 24) = v124;
                    *(_OWORD *)(v122 + 8) = v123;
                    if (!v118)
                      break;
                    v118 = (v118 - 1) >> 1;
                    v119 = v8 + (v118 << 6);
                    v121 = *(_QWORD *)v119;
                  }
                  while (*(_QWORD *)v119 < v120);
                  v113 = v106 + 8;
                  *(_QWORD *)v106 = v120;
                  v126 = v156;
                  v127 = v166;
                  v128 = v175;
                  v129 = v184;
LABEL_121:
                  *(_QWORD *)(v113 + 48) = v129;
                  *(_OWORD *)(v113 + 16) = v127;
                  *(_OWORD *)(v113 + 32) = v128;
                  *(_OWORD *)v113 = v126;
                }
              }
              a2 -= 64;
              if (v10-- <= 2)
                return;
              continue;
            }
            break;
          }
          *(_QWORD *)v106 = v104;
          v126 = v139;
          v127 = v142;
          v128 = v145;
          v129 = v148;
          goto LABEL_121;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + ((unint64_t)v10 >> 1 << 6);
        if ((unint64_t)v9 <= 0x2000)
        {
          sub_22F135AE0((unint64_t *)(a1 + ((unint64_t)v10 >> 1 << 6)), (unint64_t *)a1, (unint64_t *)(a2 - 64));
        }
        else
        {
          sub_22F135AE0((unint64_t *)a1, (unint64_t *)(a1 + ((unint64_t)v10 >> 1 << 6)), (unint64_t *)(a2 - 64));
          sub_22F135AE0((unint64_t *)(a1 + 64), (unint64_t *)(v12 - 64), (unint64_t *)(a2 - 128));
          sub_22F135AE0((unint64_t *)(a1 + 128), (unint64_t *)(a1 + 64 + (v11 << 6)), (unint64_t *)(a2 - 192));
          sub_22F135AE0((unint64_t *)(v12 - 64), (unint64_t *)v12, (unint64_t *)(a1 + 64 + (v11 << 6)));
          v13 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
          v177 = *(_QWORD *)(a1 + 56);
          v158 = *(_OWORD *)(a1 + 24);
          v168 = *(_OWORD *)(a1 + 40);
          v149 = *(_OWORD *)(a1 + 8);
          v14 = *(_OWORD *)(v12 + 8);
          v15 = *(_OWORD *)(v12 + 24);
          v16 = *(_OWORD *)(v12 + 40);
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(v12 + 56);
          *(_OWORD *)(a1 + 40) = v16;
          *(_OWORD *)(a1 + 24) = v15;
          *(_OWORD *)(a1 + 8) = v14;
          *(_QWORD *)(v12 + 56) = v177;
          *(_OWORD *)(v12 + 40) = v168;
          *(_OWORD *)(v12 + 24) = v158;
          *(_OWORD *)(v12 + 8) = v149;
        }
        --a3;
        v17 = *(_QWORD *)a1;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 64) >= v17)
        {
          v147 = *(_QWORD *)(a1 + 56);
          v141 = *(_OWORD *)(a1 + 24);
          v144 = *(_OWORD *)(a1 + 40);
          v138 = *(_OWORD *)(a1 + 8);
          if (v17 >= *(_QWORD *)(a2 - 64))
          {
            v36 = a1 + 64;
            do
            {
              v8 = v36;
              if (v36 >= a2)
                break;
              v36 += 64;
            }
            while (v17 >= *(_QWORD *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v35 = *(_QWORD *)(v8 + 64);
              v8 += 64;
            }
            while (v17 >= v35);
          }
          v37 = a2;
          if (v8 < a2)
          {
            v37 = a2;
            do
            {
              v38 = *(_QWORD *)(v37 - 64);
              v37 -= 64;
            }
            while (v17 < v38);
          }
          if (v8 < v37)
          {
            v39 = *(_QWORD *)v8;
            v40 = *(_QWORD *)v37;
            do
            {
              *(_QWORD *)v8 = v40;
              *(_QWORD *)v37 = v39;
              v179 = *(_QWORD *)(v8 + 56);
              v160 = *(_OWORD *)(v8 + 24);
              v170 = *(_OWORD *)(v8 + 40);
              v151 = *(_OWORD *)(v8 + 8);
              v41 = *(_OWORD *)(v37 + 8);
              v42 = *(_OWORD *)(v37 + 24);
              v43 = *(_OWORD *)(v37 + 40);
              *(_QWORD *)(v8 + 56) = *(_QWORD *)(v37 + 56);
              *(_OWORD *)(v8 + 40) = v43;
              *(_OWORD *)(v8 + 24) = v42;
              *(_OWORD *)(v8 + 8) = v41;
              *(_QWORD *)(v37 + 56) = v179;
              *(_OWORD *)(v37 + 8) = v151;
              *(_OWORD *)(v37 + 40) = v170;
              *(_OWORD *)(v37 + 24) = v160;
              do
              {
                v44 = *(_QWORD *)(v8 + 64);
                v8 += 64;
                v39 = v44;
              }
              while (v17 >= v44);
              do
              {
                v45 = *(_QWORD *)(v37 - 64);
                v37 -= 64;
                v40 = v45;
              }
              while (v17 < v45);
            }
            while (v8 < v37);
          }
          if (v8 - 64 != a1)
          {
            *(_QWORD *)a1 = *(_QWORD *)(v8 - 64);
            v46 = *(_OWORD *)(v8 - 56);
            v47 = *(_OWORD *)(v8 - 40);
            v48 = *(_OWORD *)(v8 - 24);
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(v8 - 8);
            *(_OWORD *)(a1 + 24) = v47;
            *(_OWORD *)(a1 + 40) = v48;
            *(_OWORD *)(a1 + 8) = v46;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 64) = v17;
          *(_QWORD *)(v8 - 8) = v147;
          *(_OWORD *)(v8 - 24) = v144;
          *(_OWORD *)(v8 - 40) = v141;
          *(_OWORD *)(v8 - 56) = v138;
          continue;
        }
        v18 = 0;
        v146 = *(_QWORD *)(a1 + 56);
        v140 = *(_OWORD *)(a1 + 24);
        v143 = *(_OWORD *)(a1 + 40);
        v137 = *(_OWORD *)(a1 + 8);
        do
        {
          v19 = *(_QWORD *)(a1 + v18 + 64);
          v18 += 64;
        }
        while (v19 < v17);
        v20 = a1 + v18;
        v21 = (unint64_t *)a2;
        if (v18 == 64)
        {
          v21 = (unint64_t *)a2;
          do
          {
            if (v20 >= (unint64_t)v21)
              break;
            v23 = *(v21 - 8);
            v21 -= 8;
          }
          while (v23 >= v17);
        }
        else
        {
          do
          {
            v22 = *(v21 - 8);
            v21 -= 8;
          }
          while (v22 >= v17);
        }
        if (v20 >= (unint64_t)v21)
        {
          v8 = a1 + v18;
        }
        else
        {
          v24 = *v21;
          v8 = a1 + v18;
          v25 = v21;
          do
          {
            *(_QWORD *)v8 = v24;
            *v25 = v19;
            v178 = *(_QWORD *)(v8 + 56);
            v159 = *(_OWORD *)(v8 + 24);
            v169 = *(_OWORD *)(v8 + 40);
            v150 = *(_OWORD *)(v8 + 8);
            v26 = *(_OWORD *)(v25 + 1);
            v27 = *(_OWORD *)(v25 + 3);
            v28 = *(_OWORD *)(v25 + 5);
            *(_QWORD *)(v8 + 56) = v25[7];
            *(_OWORD *)(v8 + 40) = v28;
            *(_OWORD *)(v8 + 24) = v27;
            *(_OWORD *)(v8 + 8) = v26;
            v25[7] = v178;
            *(_OWORD *)(v25 + 1) = v150;
            *(_OWORD *)(v25 + 5) = v169;
            *(_OWORD *)(v25 + 3) = v159;
            do
            {
              v29 = *(_QWORD *)(v8 + 64);
              v8 += 64;
              v19 = v29;
            }
            while (v29 < v17);
            do
            {
              v30 = *(v25 - 8);
              v25 -= 8;
              v24 = v30;
            }
            while (v30 >= v17);
          }
          while (v8 < (unint64_t)v25);
        }
        if (v8 - 64 != a1)
        {
          *(_QWORD *)a1 = *(_QWORD *)(v8 - 64);
          v31 = *(_OWORD *)(v8 - 56);
          v32 = *(_OWORD *)(v8 - 40);
          v33 = *(_OWORD *)(v8 - 24);
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(v8 - 8);
          *(_OWORD *)(a1 + 24) = v32;
          *(_OWORD *)(a1 + 40) = v33;
          *(_OWORD *)(a1 + 8) = v31;
        }
        *(_QWORD *)(v8 - 64) = v17;
        *(_QWORD *)(v8 - 8) = v146;
        *(_OWORD *)(v8 - 24) = v143;
        *(_OWORD *)(v8 - 40) = v140;
        *(_OWORD *)(v8 - 56) = v137;
        if (v20 < (unint64_t)v21)
        {
LABEL_31:
          sub_22F134F10(a1, v8 - 64, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v34 = sub_22F135CCC(a1, v8 - 64);
        if (!sub_22F135CCC(v8, a2))
        {
          if (v34)
            continue;
          goto LABEL_31;
        }
        a2 = v8 - 64;
        if (!v34)
          goto LABEL_1;
        return;
    }
  }
}

  v6 = *a1;
  if (v6 == 92)
  {
    v7 = *a2 + 1;
    *a2 = v7;
    v8 = a1 + 1;
LABEL_11:
    if ((word_22F4ADB24[*v8] & 7) != 0)
    {
      v11 = 1;
      while (1)
      {
        v12 = v8[v11 - 1];
        if ((word_22F4ADB24[v8[v11 - 1]] & 7) == 0)
          break;
        ++v11;
        if (v12 == 13 || v12 == 10)
        {
          v14 = v11 - 1;
          v15 = v8[v11 - 1];
          if (v12 == v15)
            --v11;
          if (v15 != 10 && v15 != 13)
            v11 = v14;
          if (v11)
          {
            *a2 = v11 + v7;
            a1 = &v8[v11];
            goto LABEL_1;
          }
          break;
        }
      }
    }
    LOBYTE(v10) = 92;
    return (char)v10;
  }
  v9 = v6 != 63 || (*a3 & 0x100000) == 0;
  if (v9 || a1[1] != 63 || (v10 = sub_22F143008((char)a1[2])) == 0)
  {
    ++*a2;
    LOBYTE(v10) = *a1;
    return (char)v10;
  }
  v7 = *a2 + 3;
  *a2 = v7;
  if (v10 == 92)
  {
    v8 = a1 + 3;
    goto LABEL_11;
  }
  return (char)v10;
}

  v5 = a2;
  v6 = a1;
  v413 = &a2[-1].i64[1];
  while (2)
  {
    v7 = (uint64_t *)v6;
    v8 = (char *)v5 - (char *)v6;
    v9 = ((char *)v5 - (char *)v6) >> 3;
    a1 = (int8x16_t *)v7;
    switch(v9)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v175 = *v7;
        v176 = *(llvm::MDString **)(a2[-1].i64[1] - 8 * *(unsigned int *)(a2[-1].i64[1] + 8) + 16);
        if (v176)
        {
          String = (const void *)llvm::MDString::getString(v176);
          v179 = v178;
        }
        else
        {
          v179 = 0;
          String = 0;
        }
        v358 = *(llvm::MDString **)(v175 - 8 * *(unsigned int *)(v175 + 8) + 16);
        if (v358)
        {
          v359 = (const void *)llvm::MDString::getString(v358);
          v361 = v360;
        }
        else
        {
          v361 = 0;
          v359 = 0;
        }
        if (v361 >= v179)
          v366 = v179;
        else
          v366 = v361;
        if (v366 && (v367 = memcmp(String, v359, v366)) != 0)
        {
          if ((v367 & 0x80000000) == 0)
            return result;
        }
        else if (v179 >= v361)
        {
          return result;
        }
        v368 = a1->i64[0];
        a1->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v368;
        return result;
      case 3:
        sub_22F239A0C(v7, v7 + 1, v413);
        return result;
      case 4:
        sub_22F23A254(v7, v7 + 1, v7 + 2, v413);
        return result;
      case 5:
        v180 = v7 + 1;
        v181 = v7 + 2;
        v182 = &a1[1].i8[8];
        sub_22F23A254(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1]);
        v183 = a1[1].i64[1];
        v184 = *(llvm::MDString **)(a2[-1].i64[1] - 8 * *(unsigned int *)(a2[-1].i64[1] + 8) + 16);
        if (v184)
        {
          v185 = (const void *)llvm::MDString::getString(v184);
          v187 = v186;
        }
        else
        {
          v187 = 0;
          v185 = 0;
        }
        v362 = *(llvm::MDString **)(v183 - 8 * *(unsigned int *)(v183 + 8) + 16);
        if (v362)
        {
          v363 = (const void *)llvm::MDString::getString(v362);
          v365 = v364;
        }
        else
        {
          v365 = 0;
          v363 = 0;
        }
        if (v365 >= v187)
          v369 = v187;
        else
          v369 = v365;
        if (v369 && (v370 = memcmp(v185, v363, v369)) != 0)
        {
          if ((v370 & 0x80000000) == 0)
            return result;
        }
        else if (v187 >= v365)
        {
          return result;
        }
        v371 = *(_QWORD *)v182;
        *(_QWORD *)v182 = a2[-1].i64[1];
        a2[-1].i64[1] = v371;
        v372 = *v181;
        v373 = *(llvm::MDString **)(*(_QWORD *)v182 - 8 * *(unsigned int *)(*(_QWORD *)v182 + 8) + 16);
        if (v373)
        {
          v374 = (const void *)llvm::MDString::getString(v373);
          v376 = v375;
        }
        else
        {
          v376 = 0;
          v374 = 0;
        }
        v377 = *(llvm::MDString **)(v372 - 8 * *(unsigned int *)(v372 + 8) + 16);
        if (v377)
        {
          v378 = (const void *)llvm::MDString::getString(v377);
          v380 = v379;
        }
        else
        {
          v380 = 0;
          v378 = 0;
        }
        if (v380 >= v376)
          v381 = v376;
        else
          v381 = v380;
        if (v381 && (v382 = memcmp(v374, v378, v381)) != 0)
        {
          if ((v382 & 0x80000000) == 0)
            return result;
        }
        else if (v376 >= v380)
        {
          return result;
        }
        v383 = *v181;
        v384 = *(_QWORD *)v182;
        *v181 = *(_QWORD *)v182;
        *(_QWORD *)v182 = v383;
        v385 = *v180;
        v386 = *(llvm::MDString **)(v384 - 8 * *(unsigned int *)(v384 + 8) + 16);
        if (v386)
        {
          v387 = (const void *)llvm::MDString::getString(v386);
          v389 = v388;
        }
        else
        {
          v389 = 0;
          v387 = 0;
        }
        v390 = *(llvm::MDString **)(v385 - 8 * *(unsigned int *)(v385 + 8) + 16);
        if (v390)
        {
          v391 = (const void *)llvm::MDString::getString(v390);
          v393 = v392;
        }
        else
        {
          v393 = 0;
          v391 = 0;
        }
        if (v393 >= v389)
          v394 = v389;
        else
          v394 = v393;
        if (v394 && (v395 = memcmp(v387, v391, v394)) != 0)
        {
          if ((v395 & 0x80000000) == 0)
            return result;
        }
        else if (v389 >= v393)
        {
          return result;
        }
        v397 = a1->i64[1];
        v396 = a1[1].i64[0];
        v398 = a1->i64[0];
        a1->i64[1] = v396;
        a1[1].i64[0] = v397;
        v399 = *(llvm::MDString **)(v396 - 8 * *(unsigned int *)(v396 + 8) + 16);
        if (v399)
        {
          v400 = (const void *)llvm::MDString::getString(v399);
          v402 = v401;
        }
        else
        {
          v402 = 0;
          v400 = 0;
        }
        v403 = *(llvm::MDString **)(v398 - 8 * *(unsigned int *)(v398 + 8) + 16);
        if (v403)
        {
          v404 = (const void *)llvm::MDString::getString(v403);
          v406 = v405;
        }
        else
        {
          v406 = 0;
          v404 = 0;
        }
        if (v406 >= v402)
          v407 = v402;
        else
          v407 = v406;
        if (v407 && (v408 = memcmp(v400, v404, v407)) != 0)
        {
          if ((v408 & 0x80000000) == 0)
            return result;
        }
        else if (v402 >= v406)
        {
          return result;
        }
        result = vextq_s8(*a1, *a1, 8uLL);
        *a1 = result;
        return result;
      default:
        if (v8 <= 191)
        {
          v188 = (int8x16_t *)(v7 + 1);
          v189 = v7 == (uint64_t *)v5 || v188 == v5;
          v190 = v189;
          if ((a4 & 1) != 0)
          {
            if ((v190 & 1) != 0)
              return result;
            v191 = 0;
            v192 = v7;
            while (1)
            {
              v194 = *v192;
              v193 = v192[1];
              v192 = (uint64_t *)v188;
              v195 = *(llvm::MDString **)(v193 - 8 * *(unsigned int *)(v193 + 8) + 16);
              if (v195)
              {
                v196 = (const void *)llvm::MDString::getString(v195);
                v198 = v197;
              }
              else
              {
                v198 = 0;
                v196 = 0;
              }
              v199 = *(llvm::MDString **)(v194 - 8 * *(unsigned int *)(v194 + 8) + 16);
              if (v199)
              {
                v200 = (const void *)llvm::MDString::getString(v199);
                v202 = v201;
              }
              else
              {
                v202 = 0;
                v200 = 0;
              }
              if (v202 >= v198)
                v203 = v198;
              else
                v203 = v202;
              if (v203 && (v204 = memcmp(v196, v200, v203)) != 0)
              {
                if (v204 < 0)
                  goto LABEL_261;
              }
              else if (v198 < v202)
              {
LABEL_261:
                v205 = *v192;
                v206 = *v192 + 16;
                v207 = v191;
                v208 = a1;
                while (1)
                {
                  v209 = v207;
                  *(uint64_t *)((char *)&v208->i64[1] + v207) = *(uint64_t *)((char *)v208->i64 + v207);
                  if (!v207)
                    break;
                  v210 = *(uint64_t *)((char *)&v208->i64[-1] + v207);
                  v211 = *(llvm::MDString **)(v206 - 8 * *(unsigned int *)(v205 + 8));
                  if (v211)
                  {
                    v212 = (const void *)llvm::MDString::getString(v211);
                    v214 = v213;
                  }
                  else
                  {
                    v214 = 0;
                    v212 = 0;
                  }
                  v215 = *(llvm::MDString **)(v210 - 8 * *(unsigned int *)(v210 + 8) + 16);
                  if (v215)
                  {
                    v216 = (const void *)llvm::MDString::getString(v215);
                    v218 = v217;
                  }
                  else
                  {
                    v218 = 0;
                    v216 = 0;
                  }
                  if (v218 >= v214)
                    v219 = v214;
                  else
                    v219 = v218;
                  if (v219 && (v220 = memcmp(v212, v216, v219)) != 0)
                  {
                    v221 = (v220 >> 31) | 1;
                    v208 = a1;
                  }
                  else
                  {
                    v208 = a1;
                    if (v214 >= v218)
                      goto LABEL_278;
                    v221 = -1;
                  }
                  v207 = v209 - 8;
                  if (v221 != -1)
                  {
LABEL_278:
                    v222 = (uint64_t *)((char *)v208->i64 + v209);
                    goto LABEL_280;
                  }
                }
                v222 = (uint64_t *)v208;
LABEL_280:
                *v222 = v205;
              }
              v188 = (int8x16_t *)(v192 + 1);
              v191 += 8;
              if (v192 + 1 == (uint64_t *)a2)
                return result;
            }
          }
          if ((v190 & 1) != 0)
            return result;
          while (1)
          {
            v328 = (uint64_t *)a1;
            a1 = v188;
            v329 = *v328;
            v330 = *(llvm::MDString **)(v328[1] - 8 * *(unsigned int *)(v328[1] + 8) + 16);
            if (v330)
            {
              v331 = (const void *)llvm::MDString::getString(v330);
              v333 = v332;
            }
            else
            {
              v333 = 0;
              v331 = 0;
            }
            v334 = a2;
            v335 = *(llvm::MDString **)(v329 - 8 * *(unsigned int *)(v329 + 8) + 16);
            if (v335)
            {
              v336 = (const void *)llvm::MDString::getString(v335);
              v338 = v337;
            }
            else
            {
              v338 = 0;
              v336 = 0;
            }
            if (v338 >= v333)
              v339 = v333;
            else
              v339 = v338;
            if (v339 && (v340 = memcmp(v331, v336, v339)) != 0)
            {
              v341 = (uint64_t *)a1;
              if (v340 < 0)
                goto LABEL_440;
            }
            else
            {
              v341 = (uint64_t *)a1;
              if (v333 < v338)
              {
LABEL_440:
                v342 = *v341;
                v343 = *v341 + 16;
                do
                {
                  v344 = v328;
                  v328[1] = *v328;
                  v346 = *--v328;
                  v345 = v346;
                  v347 = *(llvm::MDString **)(v343 - 8 * *(unsigned int *)(v342 + 8));
                  if (v347)
                  {
                    v348 = (const void *)llvm::MDString::getString(v347);
                    v350 = v349;
                  }
                  else
                  {
                    v350 = 0;
                    v348 = 0;
                  }
                  v351 = *(llvm::MDString **)(v345 - 8 * *(unsigned int *)(v345 + 8) + 16);
                  if (v351)
                  {
                    v352 = (const void *)llvm::MDString::getString(v351);
                    v354 = v353;
                  }
                  else
                  {
                    v354 = 0;
                    v352 = 0;
                  }
                  if (v354 >= v350)
                    v355 = v350;
                  else
                    v355 = v354;
                  if (v355 && (v356 = memcmp(v348, v352, v355)) != 0)
                  {
                    v357 = (v356 >> 31) | 1;
                    v341 = (uint64_t *)a1;
                  }
                  else
                  {
                    v341 = (uint64_t *)a1;
                    if (v350 >= v354)
                      break;
                    v357 = -1;
                  }
                }
                while (v357 == -1);
                *v344 = v342;
                v334 = a2;
              }
            }
            v188 = (int8x16_t *)(v341 + 1);
            if (v341 + 1 == (uint64_t *)v334)
              return result;
          }
        }
        if (!a3)
        {
          if (v7 == (uint64_t *)v5)
            return result;
          v223 = (unint64_t)(v9 - 2) >> 1;
          v224 = v223;
          v225 = (int8x16_t *)v7;
          while (1)
          {
            v226 = v224;
            if (v223 < v224)
              goto LABEL_364;
            v227 = (2 * v224) | 1;
            v228 = &v225->i64[v227];
            if (2 * v224 + 2 < v9)
            {
              v229 = v228[1];
              v230 = *(llvm::MDString **)(*v228 - 8 * *(unsigned int *)(*v228 + 8) + 16);
              if (v230)
              {
                v231 = (const void *)llvm::MDString::getString(v230);
                v233 = v232;
              }
              else
              {
                v233 = 0;
                v231 = 0;
              }
              v234 = *(llvm::MDString **)(v229 - 8 * *(unsigned int *)(v229 + 8) + 16);
              if (v234)
              {
                v235 = (const void *)llvm::MDString::getString(v234);
                v237 = v236;
              }
              else
              {
                v237 = 0;
                v235 = 0;
              }
              if (v237 >= v233)
                v238 = v233;
              else
                v238 = v237;
              if (v238 && (v239 = memcmp(v231, v235, v238)) != 0)
              {
                v240 = (v239 >> 31) | 1;
              }
              else
              {
                if (v233 < v237)
                  v240 = -1;
                else
                  v240 = 1;
                if (v233 == v237)
                  v240 = 0;
              }
              v225 = a1;
              if (v240 == -1)
              {
                ++v228;
                v227 = 2 * v226 + 2;
              }
            }
            v241 = &v225->i64[v226];
            v242 = *v241;
            v243 = *(llvm::MDString **)(*v228 - 8 * *(unsigned int *)(*v228 + 8) + 16);
            if (v243)
            {
              v244 = (const void *)llvm::MDString::getString(v243);
              v246 = v245;
            }
            else
            {
              v246 = 0;
              v244 = 0;
            }
            v247 = *(llvm::MDString **)(v242 - 8 * *(unsigned int *)(v242 + 8) + 16);
            if (v247)
            {
              v248 = (const void *)llvm::MDString::getString(v247);
              v250 = v249;
            }
            else
            {
              v250 = 0;
              v248 = 0;
            }
            v223 = (unint64_t)(v9 - 2) >> 1;
            v251 = v250 >= v246 ? v246 : v250;
            if (!v251)
              break;
            v252 = memcmp(v244, v248, v251);
            if (!v252)
              break;
            v225 = a1;
            if ((v252 & 0x80000000) == 0)
              goto LABEL_320;
LABEL_364:
            v224 = v226 - 1;
            if (!v226)
            {
              while (1)
              {
                v279 = 0;
                v280 = a1;
                v415 = a1->i64[0];
                i64 = a1->i64;
                do
                {
                  v282 = (uint64_t)&i64[v279 + 1];
                  v283 = (2 * v279) | 1;
                  v284 = 2 * v279 + 2;
                  if (v284 < v9)
                  {
                    v285 = i64[v279 + 2];
                    v286 = *(llvm::MDString **)(*(_QWORD *)v282 - 8 * *(unsigned int *)(*(_QWORD *)v282 + 8) + 16);
                    if (v286)
                    {
                      v287 = (const void *)llvm::MDString::getString(v286);
                      v289 = v288;
                    }
                    else
                    {
                      v289 = 0;
                      v287 = 0;
                    }
                    v290 = *(llvm::MDString **)(v285 - 8 * *(unsigned int *)(v285 + 8) + 16);
                    if (v290)
                    {
                      v291 = (const void *)llvm::MDString::getString(v290);
                      v293 = v292;
                    }
                    else
                    {
                      v293 = 0;
                      v291 = 0;
                    }
                    if (v293 >= v289)
                      v294 = v289;
                    else
                      v294 = v293;
                    if (v294 && (v295 = memcmp(v287, v291, v294)) != 0)
                    {
                      v296 = (v295 >> 31) | 1;
                    }
                    else
                    {
                      if (v289 < v293)
                        v296 = -1;
                      else
                        v296 = 1;
                      if (v289 == v293)
                        v296 = 0;
                    }
                    v280 = a1;
                    if (v296 == -1)
                    {
                      v282 += 8;
                      v283 = v284;
                    }
                  }
                  *i64 = *(_QWORD *)v282;
                  i64 = (_QWORD *)v282;
                  v279 = v283;
                }
                while (v283 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
                v297 = &a2[-1].i64[1];
                v189 = v282 == (_QWORD)a2 - 8;
                a2 = (int8x16_t *)((char *)a2 - 8);
                if (v189)
                {
                  *(_QWORD *)v282 = v415;
                }
                else
                {
                  *(_QWORD *)v282 = *v297;
                  *v297 = v415;
                  v298 = v282 - (_QWORD)v280 + 8;
                  if (v298 >= 9)
                  {
                    v299 = (((unint64_t)v298 >> 3) - 2) >> 1;
                    v300 = &v280->i64[v299];
                    v301 = *(_QWORD *)v282;
                    v302 = *(llvm::MDString **)(*v300 - 8 * *(unsigned int *)(*v300 + 8) + 16);
                    if (v302)
                    {
                      v303 = (const void *)llvm::MDString::getString(v302);
                      v305 = v304;
                    }
                    else
                    {
                      v305 = 0;
                      v303 = 0;
                    }
                    v306 = *(llvm::MDString **)(v301 - 8 * *(unsigned int *)(v301 + 8) + 16);
                    if (v306)
                    {
                      v307 = (const void *)llvm::MDString::getString(v306);
                      v309 = v308;
                    }
                    else
                    {
                      v309 = 0;
                      v307 = 0;
                    }
                    if (v309 >= v305)
                      v310 = v305;
                    else
                      v310 = v309;
                    if (v310 && (v311 = memcmp(v303, v307, v310)) != 0)
                    {
                      v312 = a1;
                      if (v311 < 0)
                        goto LABEL_404;
                    }
                    else
                    {
                      v312 = a1;
                      if (v305 < v309)
                      {
LABEL_404:
                        v313 = *(_QWORD *)v282;
                        v314 = *(_QWORD *)v282 + 16;
                        do
                        {
                          v315 = v300;
                          *(_QWORD *)v282 = *v300;
                          if (!v299)
                            break;
                          v299 = (v299 - 1) >> 1;
                          v300 = &v312->i64[v299];
                          v316 = *(llvm::MDString **)(*v300 - 8 * *(unsigned int *)(*v300 + 8) + 16);
                          if (v316)
                          {
                            v317 = (const void *)llvm::MDString::getString(v316);
                            v319 = v318;
                          }
                          else
                          {
                            v319 = 0;
                            v317 = 0;
                          }
                          v320 = *(llvm::MDString **)(v314 - 8 * *(unsigned int *)(v313 + 8));
                          if (v320)
                          {
                            v321 = (const void *)llvm::MDString::getString(v320);
                            v323 = v322;
                          }
                          else
                          {
                            v323 = 0;
                            v321 = 0;
                          }
                          v324 = v323 >= v319 ? v319 : v323;
                          if (v324 && (v325 = memcmp(v317, v321, v324)) != 0)
                          {
                            v326 = (v325 >> 31) | 1;
                            v312 = a1;
                          }
                          else
                          {
                            v312 = a1;
                            if (v319 >= v323)
                              break;
                            v326 = -1;
                          }
                          v282 = (uint64_t)v315;
                        }
                        while (v326 == -1);
                        *v315 = v313;
                      }
                    }
                  }
                }
                if (v9-- <= 2)
                  return result;
              }
            }
          }
          v225 = a1;
          if (v246 < v250)
            goto LABEL_364;
LABEL_320:
          v253 = *v241;
          v414 = *v241 + 16;
          v409 = v226;
          v411 = *v241;
          while (1)
          {
            v254 = v228;
            *v241 = *v228;
            if (v223 < v227)
            {
LABEL_363:
              *v254 = v253;
              v226 = v409;
              goto LABEL_364;
            }
            v255 = (2 * v227) | 1;
            v228 = &v225->i64[v255];
            v227 = 2 * v227 + 2;
            if (v227 >= v9)
            {
              v227 = v255;
            }
            else
            {
              v256 = v228[1];
              v257 = *(llvm::MDString **)(*v228 - 8 * *(unsigned int *)(*v228 + 8) + 16);
              if (v257)
              {
                v258 = (const void *)llvm::MDString::getString(v257);
                v260 = v259;
              }
              else
              {
                v260 = 0;
                v258 = 0;
              }
              v261 = *(llvm::MDString **)(v256 - 8 * *(unsigned int *)(v256 + 8) + 16);
              if (v261)
              {
                v262 = (const void *)llvm::MDString::getString(v261);
                v264 = v263;
              }
              else
              {
                v264 = 0;
                v262 = 0;
              }
              v223 = (unint64_t)(v9 - 2) >> 1;
              if (v264 >= v260)
                v265 = v260;
              else
                v265 = v264;
              if (v265 && (v266 = memcmp(v258, v262, v265)) != 0)
              {
                v267 = (v266 >> 31) | 1;
              }
              else
              {
                if (v260 < v264)
                  v267 = -1;
                else
                  v267 = 1;
                if (v260 == v264)
                  v267 = 0;
              }
              if (v267 == -1)
                ++v228;
              else
                v227 = v255;
              v253 = v411;
            }
            v268 = *(llvm::MDString **)(*v228 - 8 * *(unsigned int *)(*v228 + 8) + 16);
            if (v268)
            {
              v269 = (const void *)llvm::MDString::getString(v268);
              v271 = v270;
            }
            else
            {
              v271 = 0;
              v269 = 0;
            }
            v272 = *(llvm::MDString **)(v414 - 8 * *(unsigned int *)(v253 + 8));
            if (v272)
            {
              v273 = (const void *)llvm::MDString::getString(v272);
              v275 = v274;
            }
            else
            {
              v275 = 0;
              v273 = 0;
            }
            if (v275 >= v271)
              v276 = v271;
            else
              v276 = v275;
            if (v276 && (v277 = memcmp(v269, v273, v276)) != 0)
            {
              v278 = (v277 >> 31) | 1;
            }
            else
            {
              if (v271 != v275)
              {
                v225 = a1;
                if (v271 < v275)
                  goto LABEL_363;
                v278 = 1;
                goto LABEL_362;
              }
              v278 = 0;
            }
            v225 = a1;
LABEL_362:
            v241 = v254;
            if (v278 == -1)
              goto LABEL_363;
          }
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = &v7[(unint64_t)v9 >> 1];
        if ((unint64_t)v8 < 0x401)
        {
          sub_22F239A0C(v11, v7, v413);
        }
        else
        {
          sub_22F239A0C(v7, v11, v413);
          sub_22F239A0C(v7 + 1, v11 - 1, a2[-1].i64);
          sub_22F239A0C(v7 + 2, &v7[v10 + 1], &a2[-2].i64[1]);
          sub_22F239A0C(v11 - 1, v11, &v7[v10 + 1]);
          v13 = *v7;
          *v7 = *v11;
          *v11 = v13;
        }
        v412 = a3 - 1;
        if ((a4 & 1) == 0)
        {
          v14 = *v7;
          v15 = *(llvm::MDString **)(*(v7 - 1) - 8 * *(unsigned int *)(*(v7 - 1) + 8) + 16);
          if (v15)
          {
            v16 = (const void *)llvm::MDString::getString(v15);
            v18 = v17;
          }
          else
          {
            v18 = 0;
            v16 = 0;
          }
          v19 = *(llvm::MDString **)(v14 - 8 * *(unsigned int *)(v14 + 8) + 16);
          if (v19)
          {
            v20 = (const void *)llvm::MDString::getString(v19);
            v22 = v21;
          }
          else
          {
            v22 = 0;
            v20 = 0;
          }
          if (v22 >= v18)
            v23 = v18;
          else
            v23 = v22;
          if (v23 && (v24 = memcmp(v16, v20, v23)) != 0)
          {
            if (v24 < 0)
              goto LABEL_24;
          }
          else if (v18 < v22)
          {
            goto LABEL_24;
          }
          v25 = *v7;
          v26 = *v413;
          v27 = *(llvm::MDString **)(*v7 - 8 * *(unsigned int *)(*v7 + 8) + 16);
          if (v27)
          {
            v28 = (const void *)llvm::MDString::getString(v27);
            v30 = v29;
          }
          else
          {
            v30 = 0;
            v28 = 0;
          }
          v100 = *(llvm::MDString **)(v26 - 8 * *(unsigned int *)(v26 + 8) + 16);
          if (v100)
          {
            v101 = (const void *)llvm::MDString::getString(v100);
            v103 = v102;
          }
          else
          {
            v103 = 0;
            v101 = 0;
          }
          if (v103 >= v30)
            v104 = v30;
          else
            v104 = v103;
          if (v104 && (v105 = memcmp(v28, v101, v104)) != 0)
          {
            if ((v105 & 0x80000000) == 0)
              goto LABEL_133;
          }
          else if (v30 >= v103)
          {
LABEL_133:
            v106 = (int8x16_t *)(v7 + 1);
            do
            {
              v6 = v106;
              if (v106 >= v5)
                break;
              v107 = v106->i64[0];
              v108 = *(llvm::MDString **)(v25 + 16 - 8 * *(unsigned int *)(v25 + 8));
              if (v108)
              {
                v109 = (const void *)llvm::MDString::getString(v108);
                v111 = v110;
              }
              else
              {
                v111 = 0;
                v109 = 0;
              }
              v112 = *(llvm::MDString **)(v107 - 8 * *(unsigned int *)(v107 + 8) + 16);
              if (v112)
              {
                v113 = (const void *)llvm::MDString::getString(v112);
                v115 = v114;
              }
              else
              {
                v115 = 0;
                v113 = 0;
              }
              v116 = v115 >= v111 ? v111 : v115;
              if (v116 && (v117 = memcmp(v109, v113, v116)) != 0)
              {
                v118 = (v117 >> 31) | 1;
              }
              else if (v111 == v115)
              {
                v118 = 0;
              }
              else
              {
                if (v111 < v115)
                  goto LABEL_172;
                v118 = 1;
              }
              v106 = (int8x16_t *)&v6->u64[1];
            }
            while (v118 != -1);
            goto LABEL_172;
          }
          v119 = (int8x16_t *)(v7 + 1);
          do
          {
            v6 = v119;
            v120 = v119->i64[0];
            v121 = *(llvm::MDString **)(v25 + 16 - 8 * *(unsigned int *)(v25 + 8));
            if (v121)
            {
              v122 = (const void *)llvm::MDString::getString(v121);
              v124 = v123;
            }
            else
            {
              v124 = 0;
              v122 = 0;
            }
            v125 = *(llvm::MDString **)(v120 - 8 * *(unsigned int *)(v120 + 8) + 16);
            if (v125)
            {
              v126 = (const void *)llvm::MDString::getString(v125);
              v128 = v127;
            }
            else
            {
              v128 = 0;
              v126 = 0;
            }
            if (v128 >= v124)
              v129 = v124;
            else
              v129 = v128;
            if (v129 && (v130 = memcmp(v122, v126, v129)) != 0)
            {
              v131 = (v130 >> 31) | 1;
            }
            else if (v124 == v128)
            {
              v131 = 0;
            }
            else
            {
              if (v124 < v128)
                break;
              v131 = 1;
            }
            v119 = (int8x16_t *)&v6->u64[1];
          }
          while (v131 != -1);
LABEL_172:
          v132 = v5;
          if (v6 < v5)
          {
            v133 = &a2[-1].i64[1];
            do
            {
              v132 = (int8x16_t *)v133;
              v134 = *v133;
              v135 = *(llvm::MDString **)(v25 + 16 - 8 * *(unsigned int *)(v25 + 8));
              if (v135)
              {
                v136 = (const void *)llvm::MDString::getString(v135);
                v138 = v137;
              }
              else
              {
                v138 = 0;
                v136 = 0;
              }
              v139 = *(llvm::MDString **)(v134 - 8 * *(unsigned int *)(v134 + 8) + 16);
              if (v139)
              {
                v140 = (const void *)llvm::MDString::getString(v139);
                v142 = v141;
              }
              else
              {
                v142 = 0;
                v140 = 0;
              }
              if (v142 >= v138)
                v143 = v138;
              else
                v143 = v142;
              if (v143 && (v144 = memcmp(v136, v140, v143)) != 0)
              {
                v145 = (v144 >> 31) | 1;
              }
              else
              {
                if (v138 >= v142)
                  break;
                v145 = -1;
              }
              v133 = &v132[-1].i64[1];
            }
            while (v145 == -1);
          }
          if (v6 < v132)
          {
            v146 = v25 + 16;
            do
            {
              v147 = v6->i64[0];
              v6->i64[0] = v132->i64[0];
              v132->i64[0] = v147;
              v148 = (int8x16_t *)&v6->u64[1];
              do
              {
                v6 = v148;
                v149 = v148->i64[0];
                v150 = *(llvm::MDString **)(v146 - 8 * *(unsigned int *)(v25 + 8));
                if (v150)
                {
                  v151 = (const void *)llvm::MDString::getString(v150);
                  v153 = v152;
                }
                else
                {
                  v153 = 0;
                  v151 = 0;
                }
                v154 = *(llvm::MDString **)(v149 - 8 * *(unsigned int *)(v149 + 8) + 16);
                if (v154)
                {
                  v155 = (const void *)llvm::MDString::getString(v154);
                  v157 = v156;
                }
                else
                {
                  v157 = 0;
                  v155 = 0;
                }
                if (v157 >= v153)
                  v158 = v153;
                else
                  v158 = v157;
                if (v158 && (v159 = memcmp(v151, v155, v158)) != 0)
                {
                  v160 = (v159 >> 31) | 1;
                }
                else if (v153 == v157)
                {
                  v160 = 0;
                }
                else
                {
                  if (v153 < v157)
                    break;
                  v160 = 1;
                }
                v148 = (int8x16_t *)&v6->u64[1];
              }
              while (v160 != -1);
              v161 = (int8x16_t *)((char *)v132 - 8);
              do
              {
                v132 = v161;
                v162 = v161->i64[0];
                v163 = *(llvm::MDString **)(v146 - 8 * *(unsigned int *)(v25 + 8));
                if (v163)
                {
                  v164 = (const void *)llvm::MDString::getString(v163);
                  v166 = v165;
                }
                else
                {
                  v166 = 0;
                  v164 = 0;
                }
                v167 = *(llvm::MDString **)(v162 - 8 * *(unsigned int *)(v162 + 8) + 16);
                if (v167)
                {
                  v168 = (const void *)llvm::MDString::getString(v167);
                  v170 = v169;
                }
                else
                {
                  v170 = 0;
                  v168 = 0;
                }
                if (v170 >= v166)
                  v171 = v166;
                else
                  v171 = v170;
                if (v171 && (v172 = memcmp(v164, v168, v171)) != 0)
                {
                  v173 = (v172 >> 31) | 1;
                }
                else
                {
                  if (v166 >= v170)
                    break;
                  v173 = -1;
                }
                v161 = (int8x16_t *)((char *)v132 - 8);
              }
              while (v173 == -1);
            }
            while (v6 < v132);
          }
          v174 = &v6[-1].i64[1];
          if (&v6[-1].u64[1] != (unint64_t *)v7)
            *v7 = *v174;
          a4 = 0;
          *v174 = v25;
          a3 = v412;
          continue;
        }
LABEL_24:
        v31 = *v7;
        v32 = *v7 + 16;
        v33 = 8;
        do
        {
          v34 = v33;
          v35 = *(llvm::MDString **)(*(uint64_t *)((char *)v7 + v33)
                                   - 8 * *(unsigned int *)(*(uint64_t *)((char *)v7 + v33) + 8)
                                   + 16);
          if (v35)
          {
            v36 = (const void *)llvm::MDString::getString(v35);
            v38 = v37;
          }
          else
          {
            v38 = 0;
            v36 = 0;
          }
          v39 = *(llvm::MDString **)(v32 - 8 * *(unsigned int *)(v31 + 8));
          if (v39)
          {
            v40 = (const void *)llvm::MDString::getString(v39);
            v42 = v41;
          }
          else
          {
            v42 = 0;
            v40 = 0;
          }
          if (v42 >= v38)
            v43 = v38;
          else
            v43 = v42;
          if (v43 && (v44 = memcmp(v36, v40, v43)) != 0)
          {
            v45 = (v44 >> 31) | 1;
          }
          else
          {
            if (v38 >= v42)
              break;
            v45 = -1;
          }
          v33 = v34 + 8;
        }
        while (v45 == -1);
        v46 = (unint64_t)v7 + v34;
        v47 = &a2[-1].i8[8];
        if (v34 == 8)
        {
          v60 = &a2[-1].i8[8];
          while (v46 < (unint64_t)(v60 + 8))
          {
            v48 = (int8x16_t *)v60;
            v61 = *(llvm::MDString **)(*(_QWORD *)v60 - 8 * *(unsigned int *)(*(_QWORD *)v60 + 8) + 16);
            if (v61)
            {
              v62 = (const void *)llvm::MDString::getString(v61);
              v64 = v63;
            }
            else
            {
              v64 = 0;
              v62 = 0;
            }
            v65 = *(llvm::MDString **)(v32 - 8 * *(unsigned int *)(v31 + 8));
            if (v65)
            {
              v66 = (const void *)llvm::MDString::getString(v65);
              v68 = v67;
            }
            else
            {
              v68 = 0;
              v66 = 0;
            }
            if (v68 >= v64)
              v69 = v64;
            else
              v69 = v68;
            if (v69 && (v70 = memcmp(v62, v66, v69)) != 0)
            {
              v71 = (v70 >> 31) | 1;
            }
            else if (v64 == v68)
            {
              v71 = 0;
            }
            else
            {
              if (v64 < v68)
                goto LABEL_80;
              v71 = 1;
            }
            v60 = &v48[-1].i8[8];
            if (v71 == -1)
              goto LABEL_80;
          }
          v48 = (int8x16_t *)(v60 + 8);
        }
        else
        {
          do
          {
            v48 = (int8x16_t *)v47;
            v49 = *(llvm::MDString **)(*(_QWORD *)v47 - 8 * *(unsigned int *)(*(_QWORD *)v47 + 8) + 16);
            if (v49)
            {
              v50 = (const void *)llvm::MDString::getString(v49);
              v52 = v51;
            }
            else
            {
              v52 = 0;
              v50 = 0;
            }
            v53 = *(llvm::MDString **)(v32 - 8 * *(unsigned int *)(v31 + 8));
            if (v53)
            {
              v54 = (const void *)llvm::MDString::getString(v53);
              v56 = v55;
            }
            else
            {
              v56 = 0;
              v54 = 0;
            }
            if (v56 >= v52)
              v57 = v52;
            else
              v57 = v56;
            if (v57 && (v58 = memcmp(v50, v54, v57)) != 0)
            {
              v59 = (v58 >> 31) | 1;
            }
            else if (v52 == v56)
            {
              v59 = 0;
            }
            else
            {
              if (v52 < v56)
                break;
              v59 = 1;
            }
            v47 = &v48[-1].i8[8];
          }
          while (v59 != -1);
        }
LABEL_80:
        v6 = (int8x16_t *)v46;
        if (v46 < (unint64_t)v48)
        {
          v72 = v48;
          do
          {
            v73 = v6->i64[0];
            v6->i64[0] = v72->i64[0];
            v72->i64[0] = v73;
            v74 = (int8x16_t *)&v6->u64[1];
            do
            {
              v6 = v74;
              v75 = *(llvm::MDString **)(v74->i64[0] - 8 * *(unsigned int *)(v74->i64[0] + 8) + 16);
              if (v75)
              {
                v76 = (const void *)llvm::MDString::getString(v75);
                v78 = v77;
              }
              else
              {
                v78 = 0;
                v76 = 0;
              }
              v79 = *(llvm::MDString **)(v32 - 8 * *(unsigned int *)(v31 + 8));
              if (v79)
              {
                v80 = (const void *)llvm::MDString::getString(v79);
                v82 = v81;
              }
              else
              {
                v82 = 0;
                v80 = 0;
              }
              if (v82 >= v78)
                v83 = v78;
              else
                v83 = v82;
              if (v83 && (v84 = memcmp(v76, v80, v83)) != 0)
              {
                v85 = (v84 >> 31) | 1;
              }
              else
              {
                if (v78 >= v82)
                  break;
                v85 = -1;
              }
              v74 = (int8x16_t *)&v6->u64[1];
            }
            while (v85 == -1);
            v86 = (int8x16_t *)((char *)v72 - 8);
            do
            {
              v72 = v86;
              v87 = *(llvm::MDString **)(v86->i64[0] - 8 * *(unsigned int *)(v86->i64[0] + 8) + 16);
              if (v87)
              {
                v88 = (const void *)llvm::MDString::getString(v87);
                v90 = v89;
              }
              else
              {
                v90 = 0;
                v88 = 0;
              }
              v91 = *(llvm::MDString **)(v32 - 8 * *(unsigned int *)(v31 + 8));
              if (v91)
              {
                v92 = (const void *)llvm::MDString::getString(v91);
                v94 = v93;
              }
              else
              {
                v94 = 0;
                v92 = 0;
              }
              if (v94 >= v90)
                v95 = v90;
              else
                v95 = v94;
              if (v95 && (v96 = memcmp(v88, v92, v95)) != 0)
              {
                v97 = (v96 >> 31) | 1;
              }
              else if (v90 == v94)
              {
                v97 = 0;
              }
              else
              {
                if (v90 < v94)
                  break;
                v97 = 1;
              }
              v86 = (int8x16_t *)((char *)v72 - 8);
            }
            while (v97 != -1);
          }
          while (v6 < v72);
        }
        v98 = &v6[-1].i64[1];
        if (&v6[-1].u64[1] != (unint64_t *)a1)
          a1->i64[0] = *v98;
        *v98 = v31;
        v5 = a2;
        a3 = v412;
        if (v46 < (unint64_t)v48)
        {
LABEL_122:
          sub_22F238414(a1, &v6[-1].u64[1], v412, a4 & 1);
          a4 = 0;
          continue;
        }
        v99 = sub_22F239D0C(a1, (int8x16_t *)((char *)v6 - 8));
        if (!sub_22F239D0C(v6, a2))
        {
          if (v99)
            continue;
          goto LABEL_122;
        }
        a2 = (int8x16_t *)((char *)v6 - 8);
        if (!v99)
          goto LABEL_1;
        return result;
    }
  }
}

  v6 = a2;
  v527 = &a2[-1].i64[1];
  v7 = a1;
  while (2)
  {
    v8 = (uint64_t *)v7;
    v9 = (char *)v6 - (char *)v7;
    v10 = ((char *)v6 - (char *)v7) >> 3;
    v532 = (int8x16_t *)v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v227 = *v8;
        v228 = *(_QWORD *)(a2[-1].i64[1] - 8 * *(unsigned int *)(a2[-1].i64[1] + 8) + 8);
        if (v228)
        {
          v229 = *(llvm::Value **)(v228 + 128);
          if (*((_BYTE *)v229 + 16) == 3)
            v230 = v229;
          else
            v230 = 0;
        }
        else
        {
          v230 = 0;
        }
        Name = (const void *)llvm::Value::getName(v230);
        v453 = v452;
        v454 = *(_QWORD *)(v227 - 8 * *(unsigned int *)(v227 + 8) + 8);
        if (v454)
        {
          v455 = *(llvm::Value **)(v454 + 128);
          if (*((_BYTE *)v455 + 16) == 3)
            v456 = v455;
          else
            v456 = 0;
        }
        else
        {
          v456 = 0;
        }
        v463 = (const void *)llvm::Value::getName(v456);
        v465 = v464;
        if (v464 >= v453)
          v466 = v453;
        else
          v466 = v464;
        if (v466 && (v467 = memcmp(Name, v463, v466)) != 0)
        {
          if ((v467 & 0x80000000) == 0)
            return result;
        }
        else if (v453 >= v465)
        {
          return result;
        }
        v468 = v532->i64[0];
        v532->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v468;
        return result;
      case 3:
        sub_22F23BCEC(v8, v8 + 1, v527);
        return result;
      case 4:
        sub_22F23C654(v8, v8 + 1, v8 + 2, v527);
        return result;
      case 5:
        v231 = v8 + 1;
        v232 = v8 + 2;
        v233 = v8 + 3;
        sub_22F23C654(v8, v8 + 1, v8 + 2, v8 + 3);
        v234 = v8[3];
        v235 = *(_QWORD *)(a2[-1].i64[1] - 8 * *(unsigned int *)(a2[-1].i64[1] + 8) + 8);
        if (v235)
        {
          v236 = *(llvm::Value **)(v235 + 128);
          if (*((_BYTE *)v236 + 16) == 3)
            v237 = v236;
          else
            v237 = 0;
        }
        else
        {
          v237 = 0;
        }
        v457 = (const void *)llvm::Value::getName(v237);
        v459 = v458;
        v460 = *(_QWORD *)(v234 - 8 * *(unsigned int *)(v234 + 8) + 8);
        if (v460)
        {
          v461 = *(llvm::Value **)(v460 + 128);
          if (*((_BYTE *)v461 + 16) == 3)
            v462 = v461;
          else
            v462 = 0;
        }
        else
        {
          v462 = 0;
        }
        v469 = (const void *)llvm::Value::getName(v462);
        v471 = v470;
        if (v470 >= v459)
          v472 = v459;
        else
          v472 = v470;
        if (v472 && (v473 = memcmp(v457, v469, v472)) != 0)
        {
          if ((v473 & 0x80000000) == 0)
            return result;
        }
        else if (v459 >= v471)
        {
          return result;
        }
        v474 = *v233;
        *v233 = a2[-1].i64[1];
        a2[-1].i64[1] = v474;
        v475 = *v232;
        v476 = *(_QWORD *)(*v233 - 8 * *(unsigned int *)(*v233 + 8) + 8);
        if (v476)
        {
          v477 = *(llvm::Value **)(v476 + 128);
          if (*((_BYTE *)v477 + 16) == 3)
            v478 = v477;
          else
            v478 = 0;
        }
        else
        {
          v478 = 0;
        }
        v479 = (const void *)llvm::Value::getName(v478);
        v481 = v480;
        v482 = *(_QWORD *)(v475 - 8 * *(unsigned int *)(v475 + 8) + 8);
        if (v482)
        {
          v483 = *(llvm::Value **)(v482 + 128);
          if (*((_BYTE *)v483 + 16) == 3)
            v484 = v483;
          else
            v484 = 0;
        }
        else
        {
          v484 = 0;
        }
        v485 = (const void *)llvm::Value::getName(v484);
        v487 = v486;
        if (v486 >= v481)
          v488 = v481;
        else
          v488 = v486;
        if (v488 && (v489 = memcmp(v479, v485, v488)) != 0)
        {
          if ((v489 & 0x80000000) == 0)
            return result;
        }
        else if (v481 >= v487)
        {
          return result;
        }
        v490 = *v232;
        v491 = *v233;
        *v232 = *v233;
        *v233 = v490;
        v492 = *v231;
        v493 = *(_QWORD *)(v491 - 8 * *(unsigned int *)(v491 + 8) + 8);
        if (v493)
        {
          v494 = *(llvm::Value **)(v493 + 128);
          if (*((_BYTE *)v494 + 16) == 3)
            v495 = v494;
          else
            v495 = 0;
        }
        else
        {
          v495 = 0;
        }
        v496 = (const void *)llvm::Value::getName(v495);
        v498 = v497;
        v499 = *(_QWORD *)(v492 - 8 * *(unsigned int *)(v492 + 8) + 8);
        if (v499)
        {
          v500 = *(llvm::Value **)(v499 + 128);
          if (*((_BYTE *)v500 + 16) == 3)
            v501 = v500;
          else
            v501 = 0;
        }
        else
        {
          v501 = 0;
        }
        v502 = (const void *)llvm::Value::getName(v501);
        v504 = v503;
        if (v503 >= v498)
          v505 = v498;
        else
          v505 = v503;
        if (v505 && (v506 = memcmp(v496, v502, v505)) != 0)
        {
          if ((v506 & 0x80000000) == 0)
            return result;
        }
        else if (v498 >= v504)
        {
          return result;
        }
        v508 = v532->i64[1];
        v507 = v532[1].i64[0];
        v509 = v532->i64[0];
        v532->i64[1] = v507;
        v532[1].i64[0] = v508;
        v510 = *(_QWORD *)(v507 - 8 * *(unsigned int *)(v507 + 8) + 8);
        if (v510)
        {
          v511 = *(llvm::Value **)(v510 + 128);
          if (*((_BYTE *)v511 + 16) == 3)
            v512 = v511;
          else
            v512 = 0;
        }
        else
        {
          v512 = 0;
        }
        v513 = (const void *)llvm::Value::getName(v512);
        v515 = v514;
        v516 = *(_QWORD *)(v509 - 8 * *(unsigned int *)(v509 + 8) + 8);
        if (v516)
        {
          v517 = *(llvm::Value **)(v516 + 128);
          if (*((_BYTE *)v517 + 16) == 3)
            v518 = v517;
          else
            v518 = 0;
        }
        else
        {
          v518 = 0;
        }
        v519 = (const void *)llvm::Value::getName(v518);
        v521 = v520;
        if (v520 >= v515)
          v522 = v515;
        else
          v522 = v520;
        if (v522 && (v523 = memcmp(v513, v519, v522)) != 0)
        {
          if ((v523 & 0x80000000) == 0)
            return result;
        }
        else if (v515 >= v521)
        {
          return result;
        }
        result = vextq_s8(*v532, *v532, 8uLL);
        *v532 = result;
        return result;
      default:
        if (v9 <= 191)
        {
          v238 = v8 + 1;
          v239 = v8 == (uint64_t *)v6 || v238 == (uint64_t *)v6;
          v240 = v239;
          if ((a4 & 1) != 0)
          {
            if ((v240 & 1) != 0)
              return result;
            v241 = 0;
            v242 = v8;
            while (1)
            {
              v243 = v242;
              v242 = v238;
              v244 = *(_QWORD *)(v243[1] - 8 * *(unsigned int *)(v243[1] + 8) + 8);
              if (v244)
              {
                v245 = *(llvm::Value **)(v244 + 128);
                if (*((_BYTE *)v245 + 16) == 3)
                  v246 = v245;
                else
                  v246 = 0;
              }
              else
              {
                v246 = 0;
              }
              v247 = *v243;
              v248 = (const void *)llvm::Value::getName(v246);
              v250 = v249;
              v251 = *(_QWORD *)(v247 - 8 * *(unsigned int *)(v247 + 8) + 8);
              if (v251)
              {
                v252 = *(llvm::Value **)(v251 + 128);
                if (*((_BYTE *)v252 + 16) == 3)
                  v253 = v252;
                else
                  v253 = 0;
              }
              else
              {
                v253 = 0;
              }
              v254 = v532;
              v255 = (const void *)llvm::Value::getName(v253);
              v257 = v256;
              if (v256 >= v250)
                v258 = v250;
              else
                v258 = v256;
              if (v258 && (v259 = memcmp(v248, v255, v258)) != 0)
              {
                if (v259 < 0)
                  goto LABEL_317;
              }
              else if (v250 < v257)
              {
LABEL_317:
                v260 = *v242;
                v261 = (unsigned int *)(*v242 + 8);
                v262 = v241;
                while (1)
                {
                  v263 = v262;
                  v264 = &v254->i8[v262];
                  *(uint64_t *)((char *)&v254->i64[1] + v262) = *(uint64_t *)((char *)v254->i64 + v262);
                  if (!v262)
                    break;
                  v265 = *(_QWORD *)&v261[-2 * *v261];
                  if (v265)
                  {
                    v266 = *(llvm::Value **)(v265 + 128);
                    if (*((_BYTE *)v266 + 16) == 3)
                      v267 = v266;
                    else
                      v267 = 0;
                  }
                  else
                  {
                    v267 = 0;
                  }
                  v268 = *((_QWORD *)v264 - 1);
                  v269 = (const void *)llvm::Value::getName(v267);
                  v271 = v270;
                  v272 = *(_QWORD *)(v268 - 8 * *(unsigned int *)(v268 + 8) + 8);
                  if (v272)
                  {
                    v273 = *(llvm::Value **)(v272 + 128);
                    if (*((_BYTE *)v273 + 16) == 3)
                      v274 = v273;
                    else
                      v274 = 0;
                  }
                  else
                  {
                    v274 = 0;
                  }
                  v254 = v532;
                  v275 = (const void *)llvm::Value::getName(v274);
                  v277 = v276;
                  if (v276 >= v271)
                    v278 = v271;
                  else
                    v278 = v276;
                  if (v278 && (v279 = memcmp(v269, v275, v278)) != 0)
                  {
                    v280 = (v279 >> 31) | 1;
                  }
                  else
                  {
                    if (v271 >= v277)
                      goto LABEL_338;
                    v280 = -1;
                  }
                  v262 = v263 - 8;
                  if (v280 != -1)
                  {
LABEL_338:
                    v281 = (uint64_t *)((char *)v532->i64 + v263);
                    goto LABEL_340;
                  }
                }
                v281 = (uint64_t *)v254;
LABEL_340:
                *v281 = v260;
              }
              v238 = v242 + 1;
              v241 += 8;
              if (v242 + 1 == (uint64_t *)a2)
                return result;
            }
          }
          if ((v240 & 1) != 0)
            return result;
          while (1)
          {
            v414 = v8;
            v415 = v238;
            v416 = *(_QWORD *)(v8[1] - 8 * *(unsigned int *)(v8[1] + 8) + 8);
            v417 = v415;
            if (v416)
            {
              v418 = *(llvm::Value **)(v416 + 128);
              if (*((_BYTE *)v418 + 16) == 3)
                v419 = v418;
              else
                v419 = 0;
            }
            else
            {
              v419 = 0;
            }
            v420 = *v8;
            v421 = (const void *)llvm::Value::getName(v419);
            v423 = v422;
            v424 = *(_QWORD *)(v420 - 8 * *(unsigned int *)(v420 + 8) + 8);
            if (v424)
            {
              v425 = *(llvm::Value **)(v424 + 128);
              if (*((_BYTE *)v425 + 16) == 3)
                v426 = v425;
              else
                v426 = 0;
            }
            else
            {
              v426 = 0;
            }
            v8 = v417;
            v427 = (const void *)llvm::Value::getName(v426);
            v429 = v428;
            if (v428 >= v423)
              v430 = v423;
            else
              v430 = v428;
            if (v430 && (v431 = memcmp(v421, v427, v430)) != 0)
            {
              if (v431 < 0)
                goto LABEL_531;
            }
            else if (v423 < v429)
            {
LABEL_531:
              v432 = *v417;
              v433 = (unsigned int *)(*v417 + 8);
              do
              {
                v434 = v414;
                v414[1] = *v414;
                v435 = *(_QWORD *)&v433[-2 * *v433];
                if (v435)
                {
                  v436 = *(llvm::Value **)(v435 + 128);
                  if (*((_BYTE *)v436 + 16) == 3)
                    v437 = v436;
                  else
                    v437 = 0;
                }
                else
                {
                  v437 = 0;
                }
                --v414;
                v438 = *(v434 - 1);
                v439 = (const void *)llvm::Value::getName(v437);
                v441 = v440;
                v442 = *(_QWORD *)(v438 - 8 * *(unsigned int *)(v438 + 8) + 8);
                if (v442)
                {
                  v443 = *(llvm::Value **)(v442 + 128);
                  if (*((_BYTE *)v443 + 16) == 3)
                    v444 = v443;
                  else
                    v444 = 0;
                }
                else
                {
                  v444 = 0;
                }
                v8 = v417;
                v445 = (const void *)llvm::Value::getName(v444);
                v447 = v446;
                if (v446 >= v441)
                  v448 = v441;
                else
                  v448 = v446;
                if (v448 && (v449 = memcmp(v439, v445, v448)) != 0)
                {
                  v450 = (v449 >> 31) | 1;
                }
                else
                {
                  if (v441 >= v447)
                    break;
                  v450 = -1;
                }
              }
              while (v450 == -1);
              *v434 = v432;
            }
            v238 = v8 + 1;
            if (v8 + 1 == (uint64_t *)a2)
              return result;
          }
        }
        if (!a3)
        {
          if (v8 == (uint64_t *)v6)
            return result;
          v282 = (unint64_t)(v10 - 2) >> 1;
          v528 = v282;
          while (1)
          {
            v283 = v282;
            if (v528 >= v282)
            {
              v284 = (2 * v282) | 1;
              v285 = &v8[v284];
              v286 = v285;
              if (2 * v282 + 2 < v10)
              {
                v287 = *(_QWORD *)(*v285 - 8 * *(unsigned int *)(*v285 + 8) + 8);
                if (v287)
                {
                  v288 = *(llvm::Value **)(v287 + 128);
                  if (*((_BYTE *)v288 + 16) == 3)
                    v289 = v288;
                  else
                    v289 = 0;
                }
                else
                {
                  v289 = 0;
                }
                v290 = v285[1];
                v286 = v285 + 1;
                v291 = (const void *)llvm::Value::getName(v289);
                v293 = v292;
                v294 = *(_QWORD *)(v290 - 8 * *(unsigned int *)(v290 + 8) + 8);
                if (v294)
                {
                  v295 = *(llvm::Value **)(v294 + 128);
                  if (*((_BYTE *)v295 + 16) == 3)
                    v296 = v295;
                  else
                    v296 = 0;
                }
                else
                {
                  v296 = 0;
                }
                v297 = (const void *)llvm::Value::getName(v296);
                v299 = v298;
                if (v298 >= v293)
                  v300 = v293;
                else
                  v300 = v298;
                v8 = (uint64_t *)v532;
                if (v300 && (v301 = memcmp(v291, v297, v300)) != 0)
                {
                  v302 = (v301 >> 31) | 1;
                }
                else
                {
                  if (v293 < v299)
                    v302 = -1;
                  else
                    v302 = 1;
                  if (v293 == v299)
                    v302 = 0;
                }
                if (v302 == -1)
                  v284 = 2 * v283 + 2;
                else
                  v286 = v285;
              }
              v303 = &v8[v283];
              v304 = *v303;
              v305 = *(_QWORD *)(*v286 - 8 * *(unsigned int *)(*v286 + 8) + 8);
              if (v305)
              {
                v306 = *(llvm::Value **)(v305 + 128);
                if (*((_BYTE *)v306 + 16) == 3)
                  v307 = v306;
                else
                  v307 = 0;
              }
              else
              {
                v307 = 0;
              }
              v308 = (const void *)llvm::Value::getName(v307);
              v310 = v309;
              v311 = *(_QWORD *)(v304 - 8 * *(unsigned int *)(v304 + 8) + 8);
              if (v311)
              {
                v312 = *(llvm::Value **)(v311 + 128);
                if (*((_BYTE *)v312 + 16) == 3)
                  v313 = v312;
                else
                  v313 = 0;
              }
              else
              {
                v313 = 0;
              }
              v8 = (uint64_t *)v532;
              v314 = (const void *)llvm::Value::getName(v313);
              v316 = v315;
              if (v315 >= v310)
                v317 = v310;
              else
                v317 = v315;
              if (v317 && (v318 = memcmp(v308, v314, v317)) != 0)
              {
                if ((v318 & 0x80000000) == 0)
                  goto LABEL_389;
              }
              else if (v310 >= v316)
              {
LABEL_389:
                v524 = *v303;
                v526 = v283;
                v319 = (unsigned int *)(*v303 + 8);
                do
                {
                  v320 = v286;
                  *v303 = *v286;
                  if (v528 < v284)
                    break;
                  v321 = 2 * v284;
                  v322 = (2 * v284) | 1;
                  v323 = &v8[v322];
                  v286 = v323;
                  v324 = v321 + 2;
                  if (v321 + 2 >= v10)
                  {
                    v284 = v322;
                  }
                  else
                  {
                    v325 = *(_QWORD *)(*v323 - 8 * *(unsigned int *)(*v323 + 8) + 8);
                    if (v325)
                    {
                      v326 = *(_QWORD *)(v325 + 128);
                      v327 = *(_BYTE *)(v326 + 16) == 3 ? (llvm::Value *)v326 : 0;
                    }
                    else
                    {
                      v327 = 0;
                    }
                    v328 = v323[1];
                    v286 = v323 + 1;
                    v329 = (const void *)llvm::Value::getName(v327);
                    v331 = v330;
                    v332 = *(_QWORD *)(v328 - 8 * *(unsigned int *)(v328 + 8) + 8);
                    if (v332)
                    {
                      v333 = *(_QWORD *)(v332 + 128);
                      v334 = *(_BYTE *)(v333 + 16) == 3 ? (llvm::Value *)v333 : 0;
                    }
                    else
                    {
                      v334 = 0;
                    }
                    v335 = (const void *)llvm::Value::getName(v334);
                    v337 = v336;
                    v338 = v336 >= v331 ? v331 : v336;
                    if (v338 && (v339 = memcmp(v329, v335, v338)) != 0)
                    {
                      v340 = (v339 >> 31) | 1;
                    }
                    else
                    {
                      if (v331 < v337)
                        v340 = -1;
                      else
                        v340 = 1;
                      if (v331 == v337)
                        v340 = 0;
                    }
                    if (v340 == -1)
                    {
                      v284 = v324;
                    }
                    else
                    {
                      v286 = v323;
                      v284 = v322;
                    }
                  }
                  v341 = *(_QWORD *)(*v286 - 8 * *(unsigned int *)(*v286 + 8) + 8);
                  v8 = (uint64_t *)v532;
                  if (v341)
                  {
                    v342 = *(_QWORD *)(v341 + 128);
                    v343 = *(_BYTE *)(v342 + 16) == 3 ? (llvm::Value *)v342 : 0;
                  }
                  else
                  {
                    v343 = 0;
                  }
                  v344 = (const void *)llvm::Value::getName(v343);
                  v346 = v345;
                  v347 = *(_QWORD *)&v319[-2 * *v319];
                  if (v347)
                  {
                    v348 = *(_QWORD *)(v347 + 128);
                    v349 = *(_BYTE *)(v348 + 16) == 3 ? (llvm::Value *)v348 : 0;
                  }
                  else
                  {
                    v349 = 0;
                  }
                  v350 = (const void *)llvm::Value::getName(v349);
                  v352 = v351;
                  v353 = v351 >= v346 ? v346 : v351;
                  if (v353 && (v354 = memcmp(v344, v350, v353)) != 0)
                  {
                    v355 = (v354 >> 31) | 1;
                  }
                  else if (v346 == v352)
                  {
                    v355 = 0;
                  }
                  else
                  {
                    if (v346 < v352)
                      break;
                    v355 = 1;
                  }
                  v303 = v320;
                }
                while (v355 != -1);
                *v320 = v524;
                v283 = v526;
              }
            }
            v282 = v283 - 1;
            if (!v283)
            {
              while (1)
              {
                v356 = 0;
                v529 = *v8;
                v357 = v8;
                do
                {
                  v358 = &v357[v356 + 1];
                  v359 = (2 * v356) | 1;
                  v360 = 2 * v356 + 2;
                  if (v360 < v10)
                  {
                    v361 = *(_QWORD *)(*v358 - 8 * *(unsigned int *)(*v358 + 8) + 8);
                    if (v361)
                    {
                      v362 = *(llvm::Value **)(v361 + 128);
                      if (*((_BYTE *)v362 + 16) == 3)
                        v363 = v362;
                      else
                        v363 = 0;
                    }
                    else
                    {
                      v363 = 0;
                    }
                    v364 = v358[1];
                    v365 = (const void *)llvm::Value::getName(v363);
                    v367 = v366;
                    v368 = *(_QWORD *)(v364 - 8 * *(unsigned int *)(v364 + 8) + 8);
                    if (v368)
                    {
                      v369 = *(llvm::Value **)(v368 + 128);
                      if (*((_BYTE *)v369 + 16) == 3)
                        v370 = v369;
                      else
                        v370 = 0;
                    }
                    else
                    {
                      v370 = 0;
                    }
                    v371 = (const void *)llvm::Value::getName(v370);
                    v373 = v372;
                    if (v372 >= v367)
                      v374 = v367;
                    else
                      v374 = v372;
                    if (v374 && (v375 = memcmp(v365, v371, v374)) != 0)
                    {
                      v376 = (v375 >> 31) | 1;
                    }
                    else
                    {
                      if (v367 < v373)
                        v376 = -1;
                      else
                        v376 = 1;
                      if (v367 == v373)
                        v376 = 0;
                    }
                    if (v376 == -1)
                    {
                      ++v358;
                      v359 = v360;
                    }
                  }
                  *v357 = *v358;
                  v357 = v358;
                  v356 = v359;
                }
                while (v359 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
                v377 = &a2[-1].i64[1];
                v239 = v358 == (uint64_t *)&a2[-1].u64[1];
                a2 = (int8x16_t *)((char *)a2 - 8);
                if (v239)
                {
                  *v358 = v529;
                  v8 = (uint64_t *)v532;
                }
                else
                {
                  *v358 = *v377;
                  *v377 = v529;
                  v8 = (uint64_t *)v532;
                  v378 = (char *)v358 - (char *)v532 + 8;
                  if (v378 >= 9)
                  {
                    v379 = (((unint64_t)v378 >> 3) - 2) >> 1;
                    v380 = &v532->i64[v379];
                    v381 = *(_QWORD *)(*v380 - 8 * *(unsigned int *)(*v380 + 8) + 8);
                    if (v381)
                    {
                      v382 = *(llvm::Value **)(v381 + 128);
                      if (*((_BYTE *)v382 + 16) == 3)
                        v383 = v382;
                      else
                        v383 = 0;
                    }
                    else
                    {
                      v383 = 0;
                    }
                    v384 = *v358;
                    v385 = (const void *)llvm::Value::getName(v383);
                    v387 = v386;
                    v388 = *(_QWORD *)(v384 - 8 * *(unsigned int *)(v384 + 8) + 8);
                    if (v388)
                    {
                      v389 = *(llvm::Value **)(v388 + 128);
                      if (*((_BYTE *)v389 + 16) == 3)
                        v390 = v389;
                      else
                        v390 = 0;
                    }
                    else
                    {
                      v390 = 0;
                    }
                    v8 = (uint64_t *)v532;
                    v391 = (const void *)llvm::Value::getName(v390);
                    v393 = v392;
                    if (v392 >= v387)
                      v394 = v387;
                    else
                      v394 = v392;
                    if (v394 && (v395 = memcmp(v385, v391, v394)) != 0)
                    {
                      if (v395 < 0)
                        goto LABEL_487;
                    }
                    else if (v387 < v393)
                    {
LABEL_487:
                      v530 = *v358;
                      v396 = (unsigned int *)(*v358 + 8);
                      do
                      {
                        v397 = v380;
                        *v358 = *v380;
                        if (!v379)
                          break;
                        v379 = (v379 - 1) >> 1;
                        v380 = &v532->i64[v379];
                        v398 = *(_QWORD *)(*v380 - 8 * *(unsigned int *)(*v380 + 8) + 8);
                        if (v398)
                        {
                          v399 = *(_QWORD *)(v398 + 128);
                          v400 = *(_BYTE *)(v399 + 16) == 3 ? (llvm::Value *)v399 : 0;
                        }
                        else
                        {
                          v400 = 0;
                        }
                        v401 = (const void *)llvm::Value::getName(v400);
                        v403 = v402;
                        v404 = *(_QWORD *)&v396[-2 * *v396];
                        if (v404)
                        {
                          v405 = *(_QWORD *)(v404 + 128);
                          v406 = *(_BYTE *)(v405 + 16) == 3 ? (llvm::Value *)v405 : 0;
                        }
                        else
                        {
                          v406 = 0;
                        }
                        v407 = (const void *)llvm::Value::getName(v406);
                        v409 = v408;
                        v410 = v408 >= v403 ? v403 : v408;
                        if (v410 && (v411 = memcmp(v401, v407, v410)) != 0)
                        {
                          v412 = (v411 >> 31) | 1;
                        }
                        else
                        {
                          if (v403 >= v409)
                            break;
                          v412 = -1;
                        }
                        v358 = v397;
                      }
                      while (v412 == -1);
                      *v397 = v530;
                    }
                  }
                }
                if (v10-- <= 2)
                  return result;
              }
            }
          }
        }
        v11 = v8;
        v12 = (unint64_t)v10 >> 1;
        v13 = &v11[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          sub_22F23BCEC(v13, v11, v527);
        }
        else
        {
          sub_22F23BCEC(v11, v13, v527);
          sub_22F23BCEC(v11 + 1, v13 - 1, a2[-1].i64);
          sub_22F23BCEC(v11 + 2, &v11[v12 + 1], &a2[-2].i64[1]);
          sub_22F23BCEC(v13 - 1, v13, &v11[v12 + 1]);
          v14 = *v11;
          *v11 = *v13;
          *v13 = v14;
        }
        a1 = (int8x16_t *)v11;
        --a3;
        v6 = a2;
        if ((a4 & 1) == 0)
        {
          v15 = *(_QWORD *)(a1[-1].i64[1] - 8 * *(unsigned int *)(a1[-1].i64[1] + 8) + 8);
          if (v15)
          {
            v16 = *(llvm::Value **)(v15 + 128);
            if (*((_BYTE *)v16 + 16) == 3)
              v17 = v16;
            else
              v17 = 0;
          }
          else
          {
            v17 = 0;
          }
          v18 = a1->i64[0];
          v19 = (const void *)llvm::Value::getName(v17);
          v21 = v20;
          v22 = *(_QWORD *)(v18 - 8 * *(unsigned int *)(v18 + 8) + 8);
          if (v22)
          {
            v23 = *(llvm::Value **)(v22 + 128);
            if (*((_BYTE *)v23 + 16) == 3)
              v24 = v23;
            else
              v24 = 0;
          }
          else
          {
            v24 = 0;
          }
          a1 = v532;
          v25 = (const void *)llvm::Value::getName(v24);
          v27 = v26;
          if (v26 >= v21)
            v28 = v21;
          else
            v28 = v26;
          if (v28 && (v29 = memcmp(v19, v25, v28)) != 0)
          {
            if (v29 < 0)
              goto LABEL_30;
          }
          else if (v21 < v27)
          {
            goto LABEL_30;
          }
          v30 = v532->i64[0];
          v31 = (unsigned int *)(v532->i64[0] + 8);
          v32 = *(_QWORD *)(v532->i64[0] - 8 * *v31 + 8);
          if (v32)
          {
            v33 = *(llvm::Value **)(v32 + 128);
            if (*((_BYTE *)v33 + 16) == 3)
              v34 = v33;
            else
              v34 = 0;
          }
          else
          {
            v34 = 0;
          }
          v126 = *v527;
          v127 = (const void *)llvm::Value::getName(v34);
          v129 = v128;
          v130 = *(_QWORD *)(v126 - 8 * *(unsigned int *)(v126 + 8) + 8);
          if (v130)
          {
            v131 = *(llvm::Value **)(v130 + 128);
            if (*((_BYTE *)v131 + 16) == 3)
              v132 = v131;
            else
              v132 = 0;
          }
          else
          {
            v132 = 0;
          }
          v133 = (uint64_t *)v532;
          v134 = (const void *)llvm::Value::getName(v132);
          v136 = v135;
          if (v135 >= v129)
            v137 = v129;
          else
            v137 = v135;
          if (v137 && (v138 = memcmp(v127, v134, v137)) != 0)
          {
            if ((v138 & 0x80000000) == 0)
              goto LABEL_162;
          }
          else if (v129 >= v136)
          {
LABEL_162:
            v139 = (int8x16_t *)&v532->u64[1];
            do
            {
              v7 = v139;
              if (v139 >= a2)
                break;
              v140 = *(_QWORD *)&v31[-2 * *v31];
              if (v140)
              {
                v141 = *(_QWORD *)(v140 + 128);
                v142 = *(_BYTE *)(v141 + 16) == 3 ? (llvm::Value *)v141 : 0;
              }
              else
              {
                v142 = 0;
              }
              v143 = v139->i64[0];
              v144 = (const void *)llvm::Value::getName(v142);
              v146 = v145;
              v147 = *(_QWORD *)(v143 - 8 * *(unsigned int *)(v143 + 8) + 8);
              if (v147)
              {
                v148 = *(_QWORD *)(v147 + 128);
                v149 = *(_BYTE *)(v148 + 16) == 3 ? (llvm::Value *)v148 : 0;
              }
              else
              {
                v149 = 0;
              }
              v133 = (uint64_t *)v532;
              v150 = (const void *)llvm::Value::getName(v149);
              v152 = v151;
              v153 = v151 >= v146 ? v146 : v151;
              if (v153 && (v154 = memcmp(v144, v150, v153)) != 0)
              {
                v155 = (v154 >> 31) | 1;
              }
              else if (v146 == v152)
              {
                v155 = 0;
              }
              else
              {
                if (v146 < v152)
                  goto LABEL_209;
                v155 = 1;
              }
              v139 = (int8x16_t *)&v7->u64[1];
            }
            while (v155 != -1);
            goto LABEL_209;
          }
          v156 = (int8x16_t *)&v532->u64[1];
          do
          {
            v7 = v156;
            v157 = *(_QWORD *)&v31[-2 * *v31];
            if (v157)
            {
              v158 = *(llvm::Value **)(v157 + 128);
              if (*((_BYTE *)v158 + 16) == 3)
                v159 = v158;
              else
                v159 = 0;
            }
            else
            {
              v159 = 0;
            }
            v160 = v156->i64[0];
            v161 = (const void *)llvm::Value::getName(v159);
            v163 = v162;
            v164 = *(_QWORD *)(v160 - 8 * *(unsigned int *)(v160 + 8) + 8);
            if (v164)
            {
              v165 = *(llvm::Value **)(v164 + 128);
              if (*((_BYTE *)v165 + 16) == 3)
                v166 = v165;
              else
                v166 = 0;
            }
            else
            {
              v166 = 0;
            }
            v133 = (uint64_t *)v532;
            v167 = (const void *)llvm::Value::getName(v166);
            v169 = v168;
            if (v168 >= v163)
              v170 = v163;
            else
              v170 = v168;
            if (v170 && (v171 = memcmp(v161, v167, v170)) != 0)
            {
              v172 = (v171 >> 31) | 1;
            }
            else if (v163 == v169)
            {
              v172 = 0;
            }
            else
            {
              if (v163 < v169)
                break;
              v172 = 1;
            }
            v156 = (int8x16_t *)&v7->u64[1];
          }
          while (v172 != -1);
LABEL_209:
          v173 = a2;
          if (v7 < a2)
          {
            v174 = &a2[-1].i64[1];
            do
            {
              v173 = (int8x16_t *)v174;
              v175 = *(_QWORD *)&v31[-2 * *v31];
              if (v175)
              {
                v176 = *(llvm::Value **)(v175 + 128);
                if (*((_BYTE *)v176 + 16) == 3)
                  v177 = v176;
                else
                  v177 = 0;
              }
              else
              {
                v177 = 0;
              }
              v178 = *v174;
              v179 = (const void *)llvm::Value::getName(v177);
              v181 = v180;
              v182 = *(_QWORD *)(v178 - 8 * *(unsigned int *)(v178 + 8) + 8);
              if (v182)
              {
                v183 = *(llvm::Value **)(v182 + 128);
                if (*((_BYTE *)v183 + 16) == 3)
                  v184 = v183;
                else
                  v184 = 0;
              }
              else
              {
                v184 = 0;
              }
              v185 = (const void *)llvm::Value::getName(v184);
              v187 = v186;
              if (v186 >= v181)
                v188 = v181;
              else
                v188 = v186;
              v133 = (uint64_t *)v532;
              if (v188 && (v189 = memcmp(v179, v185, v188)) != 0)
              {
                v190 = (v189 >> 31) | 1;
              }
              else
              {
                if (v181 >= v187)
                  break;
                v190 = -1;
              }
              v174 = &v173[-1].i64[1];
            }
            while (v190 == -1);
          }
LABEL_273:
          while (v7 < v173)
          {
            v191 = v7->i64[0];
            v7->i64[0] = v173->i64[0];
            v173->i64[0] = v191;
            v192 = (int8x16_t *)&v7->u64[1];
            do
            {
              v7 = v192;
              v193 = v192->i64[0];
              v194 = *(_QWORD *)&v31[-2 * *v31];
              if (v194)
              {
                v195 = *(llvm::Value **)(v194 + 128);
                if (*((_BYTE *)v195 + 16) == 3)
                  v196 = v195;
                else
                  v196 = 0;
              }
              else
              {
                v196 = 0;
              }
              v197 = (const void *)llvm::Value::getName(v196);
              v199 = v198;
              v200 = *(_QWORD *)(v193 - 8 * *(unsigned int *)(v193 + 8) + 8);
              if (v200)
              {
                v201 = *(llvm::Value **)(v200 + 128);
                if (*((_BYTE *)v201 + 16) == 3)
                  v202 = v201;
                else
                  v202 = 0;
              }
              else
              {
                v202 = 0;
              }
              v203 = (const void *)llvm::Value::getName(v202);
              v205 = v204;
              if (v204 >= v199)
                v206 = v199;
              else
                v206 = v204;
              if (v206 && (v207 = memcmp(v197, v203, v206)) != 0)
              {
                v208 = (v207 >> 31) | 1;
              }
              else if (v199 == v205)
              {
                v208 = 0;
              }
              else
              {
                if (v199 < v205)
                  break;
                v208 = 1;
              }
              v192 = (int8x16_t *)&v7->u64[1];
            }
            while (v208 != -1);
            v209 = (int8x16_t *)((char *)v173 - 8);
            do
            {
              v173 = v209;
              v210 = v209->i64[0];
              v211 = *(_QWORD *)&v31[-2 * *v31];
              if (v211)
              {
                v212 = *(llvm::Value **)(v211 + 128);
                if (*((_BYTE *)v212 + 16) == 3)
                  v213 = v212;
                else
                  v213 = 0;
              }
              else
              {
                v213 = 0;
              }
              v214 = (const void *)llvm::Value::getName(v213);
              v216 = v215;
              v217 = *(_QWORD *)(v210 - 8 * *(unsigned int *)(v210 + 8) + 8);
              if (v217)
              {
                v218 = *(llvm::Value **)(v217 + 128);
                if (*((_BYTE *)v218 + 16) == 3)
                  v219 = v218;
                else
                  v219 = 0;
              }
              else
              {
                v219 = 0;
              }
              v133 = (uint64_t *)v532;
              v220 = (const void *)llvm::Value::getName(v219);
              v222 = v221;
              if (v221 >= v216)
                v223 = v216;
              else
                v223 = v221;
              if (v223 && (v224 = memcmp(v214, v220, v223)) != 0)
              {
                v225 = (v224 >> 31) | 1;
              }
              else
              {
                if (v216 >= v222)
                  goto LABEL_273;
                v225 = -1;
              }
              v209 = (int8x16_t *)((char *)v173 - 8);
            }
            while (v225 == -1);
          }
          v226 = &v7[-1].i64[1];
          if (&v7[-1].u64[1] != (unint64_t *)v133)
            *v133 = *v226;
          a4 = 0;
          *v226 = v30;
          continue;
        }
LABEL_30:
        v35 = a1->i64[0];
        v36 = (unsigned int *)(a1->i64[0] + 8);
        v37 = 8;
        do
        {
          v38 = v37;
          v39 = *(_QWORD *)(*(uint64_t *)((char *)a1->i64 + v37)
                          - 8 * *(unsigned int *)(*(uint64_t *)((char *)a1->i64 + v37) + 8)
                          + 8);
          if (v39)
          {
            v40 = *(llvm::Value **)(v39 + 128);
            if (*((_BYTE *)v40 + 16) == 3)
              v41 = v40;
            else
              v41 = 0;
          }
          else
          {
            v41 = 0;
          }
          v42 = (const void *)llvm::Value::getName(v41);
          v44 = v43;
          v45 = *(_QWORD *)&v36[-2 * *v36];
          if (v45)
          {
            v46 = *(llvm::Value **)(v45 + 128);
            if (*((_BYTE *)v46 + 16) == 3)
              v47 = v46;
            else
              v47 = 0;
          }
          else
          {
            v47 = 0;
          }
          v48 = (const void *)llvm::Value::getName(v47);
          v50 = v49;
          if (v49 >= v44)
            v51 = v44;
          else
            v51 = v49;
          if (v51 && (v52 = memcmp(v42, v48, v51)) != 0)
          {
            v53 = (v52 >> 31) | 1;
          }
          else
          {
            if (v44 >= v50)
              break;
            v53 = -1;
          }
          v37 = v38 + 8;
        }
        while (v53 == -1);
        v533 = a3;
        v54 = (unint64_t)a1->u64 + v38;
        v55 = &a2[-1].i8[8];
        if (v38 == 8)
        {
          v72 = &a2[-1].i8[8];
          while (v54 < (unint64_t)(v72 + 8))
          {
            v56 = (int8x16_t *)v72;
            v73 = *(_QWORD *)(*(_QWORD *)v72 - 8 * *(unsigned int *)(*(_QWORD *)v72 + 8) + 8);
            if (v73)
            {
              v74 = *(llvm::Value **)(v73 + 128);
              if (*((_BYTE *)v74 + 16) == 3)
                v75 = v74;
              else
                v75 = 0;
            }
            else
            {
              v75 = 0;
            }
            v76 = (const void *)llvm::Value::getName(v75);
            v78 = v77;
            v79 = *(_QWORD *)&v36[-2 * *v36];
            if (v79)
            {
              v80 = *(llvm::Value **)(v79 + 128);
              if (*((_BYTE *)v80 + 16) == 3)
                v81 = v80;
              else
                v81 = 0;
            }
            else
            {
              v81 = 0;
            }
            v82 = (const void *)llvm::Value::getName(v81);
            v84 = v83;
            if (v83 >= v78)
              v85 = v78;
            else
              v85 = v83;
            if (v85 && (v86 = memcmp(v76, v82, v85)) != 0)
            {
              v87 = (v86 >> 31) | 1;
            }
            else if (v78 == v84)
            {
              v87 = 0;
            }
            else
            {
              if (v78 < v84)
                goto LABEL_98;
              v87 = 1;
            }
            v72 = &v56[-1].i8[8];
            if (v87 == -1)
              goto LABEL_98;
          }
          v56 = (int8x16_t *)(v72 + 8);
        }
        else
        {
          do
          {
            v56 = (int8x16_t *)v55;
            v57 = *(_QWORD *)(*(_QWORD *)v55 - 8 * *(unsigned int *)(*(_QWORD *)v55 + 8) + 8);
            if (v57)
            {
              v58 = *(llvm::Value **)(v57 + 128);
              if (*((_BYTE *)v58 + 16) == 3)
                v59 = v58;
              else
                v59 = 0;
            }
            else
            {
              v59 = 0;
            }
            v60 = (const void *)llvm::Value::getName(v59);
            v62 = v61;
            v63 = *(_QWORD *)&v36[-2 * *v36];
            if (v63)
            {
              v64 = *(llvm::Value **)(v63 + 128);
              if (*((_BYTE *)v64 + 16) == 3)
                v65 = v64;
              else
                v65 = 0;
            }
            else
            {
              v65 = 0;
            }
            v66 = (const void *)llvm::Value::getName(v65);
            v68 = v67;
            if (v67 >= v62)
              v69 = v62;
            else
              v69 = v67;
            if (v69 && (v70 = memcmp(v60, v66, v69)) != 0)
            {
              v71 = (v70 >> 31) | 1;
            }
            else if (v62 == v68)
            {
              v71 = 0;
            }
            else
            {
              if (v62 < v68)
                break;
              v71 = 1;
            }
            v55 = &v56[-1].i8[8];
          }
          while (v71 != -1);
        }
LABEL_98:
        v7 = (int8x16_t *)((char *)a1 + v38);
        if (v54 < (unint64_t)v56)
        {
          v88 = v56;
          do
          {
            v89 = v7->i64[0];
            v7->i64[0] = v88->i64[0];
            v88->i64[0] = v89;
            v90 = (int8x16_t *)&v7->u64[1];
            do
            {
              v7 = v90;
              v91 = *(_QWORD *)(v90->i64[0] - 8 * *(unsigned int *)(v90->i64[0] + 8) + 8);
              if (v91)
              {
                v92 = *(llvm::Value **)(v91 + 128);
                if (*((_BYTE *)v92 + 16) == 3)
                  v93 = v92;
                else
                  v93 = 0;
              }
              else
              {
                v93 = 0;
              }
              v94 = (const void *)llvm::Value::getName(v93);
              v96 = v95;
              v97 = *(_QWORD *)&v36[-2 * *v36];
              if (v97)
              {
                v98 = *(llvm::Value **)(v97 + 128);
                if (*((_BYTE *)v98 + 16) == 3)
                  v99 = v98;
                else
                  v99 = 0;
              }
              else
              {
                v99 = 0;
              }
              v100 = (const void *)llvm::Value::getName(v99);
              v102 = v101;
              if (v101 >= v96)
                v103 = v96;
              else
                v103 = v101;
              if (v103 && (v104 = memcmp(v94, v100, v103)) != 0)
              {
                v105 = (v104 >> 31) | 1;
              }
              else
              {
                if (v96 >= v102)
                  break;
                v105 = -1;
              }
              v90 = (int8x16_t *)&v7->u64[1];
            }
            while (v105 == -1);
            v106 = (int8x16_t *)((char *)v88 - 8);
            do
            {
              v88 = v106;
              v107 = *(_QWORD *)(v106->i64[0] - 8 * *(unsigned int *)(v106->i64[0] + 8) + 8);
              if (v107)
              {
                v108 = *(llvm::Value **)(v107 + 128);
                if (*((_BYTE *)v108 + 16) == 3)
                  v109 = v108;
                else
                  v109 = 0;
              }
              else
              {
                v109 = 0;
              }
              v110 = (const void *)llvm::Value::getName(v109);
              v112 = v111;
              v113 = *(_QWORD *)&v36[-2 * *v36];
              if (v113)
              {
                v114 = *(llvm::Value **)(v113 + 128);
                if (*((_BYTE *)v114 + 16) == 3)
                  v115 = v114;
                else
                  v115 = 0;
              }
              else
              {
                v115 = 0;
              }
              v116 = (const void *)llvm::Value::getName(v115);
              v118 = v117;
              if (v117 >= v112)
                v119 = v112;
              else
                v119 = v117;
              if (v119 && (v120 = memcmp(v110, v116, v119)) != 0)
              {
                v121 = (v120 >> 31) | 1;
              }
              else if (v112 == v118)
              {
                v121 = 0;
              }
              else
              {
                if (v112 < v118)
                  break;
                v121 = 1;
              }
              v106 = (int8x16_t *)((char *)v88 - 8);
            }
            while (v121 != -1);
          }
          while (v7 < v88);
        }
        v122 = &v7[-1].i64[1];
        if (&v7[-1].u64[1] != (unint64_t *)a1)
          a1->i64[0] = *v122;
        *v122 = v35;
        v123 = v54 >= (unint64_t)v56;
        v6 = a2;
        a3 = v533;
        if (!v123)
        {
LABEL_149:
          sub_22F23A454(a1, &v7[-1].u64[1], v533, a4 & 1);
          a4 = 0;
          continue;
        }
        v124 = sub_22F23C064(a1, (int8x16_t *)((char *)v7 - 8));
        if (!sub_22F23C064(v7, a2))
        {
          if (v124)
            continue;
          goto LABEL_149;
        }
        a2 = (int8x16_t *)((char *)v7 - 8);
        if (!v124)
          goto LABEL_1;
        return result;
    }
  }
}

  v6 = a2;
  v527 = &a2[-1].i64[1];
  v7 = a1;
  while (2)
  {
    v8 = (uint64_t *)v7;
    v9 = (char *)v6 - (char *)v7;
    v10 = ((char *)v6 - (char *)v7) >> 3;
    v532 = (int8x16_t *)v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v227 = *v8;
        v228 = *(_QWORD *)(a2[-1].i64[1] - 8 * *(unsigned int *)(a2[-1].i64[1] + 8) + 8);
        if (v228)
        {
          v229 = *(llvm::Value **)(v228 + 128);
          if (*((_BYTE *)v229 + 16) == 3)
            v230 = v229;
          else
            v230 = 0;
        }
        else
        {
          v230 = 0;
        }
        Name = (const void *)llvm::Value::getName(v230);
        v453 = v452;
        v454 = *(_QWORD *)(v227 - 8 * *(unsigned int *)(v227 + 8) + 8);
        if (v454)
        {
          v455 = *(llvm::Value **)(v454 + 128);
          if (*((_BYTE *)v455 + 16) == 3)
            v456 = v455;
          else
            v456 = 0;
        }
        else
        {
          v456 = 0;
        }
        v463 = (const void *)llvm::Value::getName(v456);
        v465 = v464;
        if (v464 >= v453)
          v466 = v453;
        else
          v466 = v464;
        if (v466 && (v467 = memcmp(Name, v463, v466)) != 0)
        {
          if ((v467 & 0x80000000) == 0)
            return result;
        }
        else if (v453 >= v465)
        {
          return result;
        }
        v468 = v532->i64[0];
        v532->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v468;
        return result;
      case 3:
        sub_22F23BCEC(v8, v8 + 1, v527);
        return result;
      case 4:
        sub_22F23C654(v8, v8 + 1, v8 + 2, v527);
        return result;
      case 5:
        v231 = v8 + 1;
        v232 = v8 + 2;
        v233 = v8 + 3;
        sub_22F23C654(v8, v8 + 1, v8 + 2, v8 + 3);
        v234 = v8[3];
        v235 = *(_QWORD *)(a2[-1].i64[1] - 8 * *(unsigned int *)(a2[-1].i64[1] + 8) + 8);
        if (v235)
        {
          v236 = *(llvm::Value **)(v235 + 128);
          if (*((_BYTE *)v236 + 16) == 3)
            v237 = v236;
          else
            v237 = 0;
        }
        else
        {
          v237 = 0;
        }
        v457 = (const void *)llvm::Value::getName(v237);
        v459 = v458;
        v460 = *(_QWORD *)(v234 - 8 * *(unsigned int *)(v234 + 8) + 8);
        if (v460)
        {
          v461 = *(llvm::Value **)(v460 + 128);
          if (*((_BYTE *)v461 + 16) == 3)
            v462 = v461;
          else
            v462 = 0;
        }
        else
        {
          v462 = 0;
        }
        v469 = (const void *)llvm::Value::getName(v462);
        v471 = v470;
        if (v470 >= v459)
          v472 = v459;
        else
          v472 = v470;
        if (v472 && (v473 = memcmp(v457, v469, v472)) != 0)
        {
          if ((v473 & 0x80000000) == 0)
            return result;
        }
        else if (v459 >= v471)
        {
          return result;
        }
        v474 = *v233;
        *v233 = a2[-1].i64[1];
        a2[-1].i64[1] = v474;
        v475 = *v232;
        v476 = *(_QWORD *)(*v233 - 8 * *(unsigned int *)(*v233 + 8) + 8);
        if (v476)
        {
          v477 = *(llvm::Value **)(v476 + 128);
          if (*((_BYTE *)v477 + 16) == 3)
            v478 = v477;
          else
            v478 = 0;
        }
        else
        {
          v478 = 0;
        }
        v479 = (const void *)llvm::Value::getName(v478);
        v481 = v480;
        v482 = *(_QWORD *)(v475 - 8 * *(unsigned int *)(v475 + 8) + 8);
        if (v482)
        {
          v483 = *(llvm::Value **)(v482 + 128);
          if (*((_BYTE *)v483 + 16) == 3)
            v484 = v483;
          else
            v484 = 0;
        }
        else
        {
          v484 = 0;
        }
        v485 = (const void *)llvm::Value::getName(v484);
        v487 = v486;
        if (v486 >= v481)
          v488 = v481;
        else
          v488 = v486;
        if (v488 && (v489 = memcmp(v479, v485, v488)) != 0)
        {
          if ((v489 & 0x80000000) == 0)
            return result;
        }
        else if (v481 >= v487)
        {
          return result;
        }
        v490 = *v232;
        v491 = *v233;
        *v232 = *v233;
        *v233 = v490;
        v492 = *v231;
        v493 = *(_QWORD *)(v491 - 8 * *(unsigned int *)(v491 + 8) + 8);
        if (v493)
        {
          v494 = *(llvm::Value **)(v493 + 128);
          if (*((_BYTE *)v494 + 16) == 3)
            v495 = v494;
          else
            v495 = 0;
        }
        else
        {
          v495 = 0;
        }
        v496 = (const void *)llvm::Value::getName(v495);
        v498 = v497;
        v499 = *(_QWORD *)(v492 - 8 * *(unsigned int *)(v492 + 8) + 8);
        if (v499)
        {
          v500 = *(llvm::Value **)(v499 + 128);
          if (*((_BYTE *)v500 + 16) == 3)
            v501 = v500;
          else
            v501 = 0;
        }
        else
        {
          v501 = 0;
        }
        v502 = (const void *)llvm::Value::getName(v501);
        v504 = v503;
        if (v503 >= v498)
          v505 = v498;
        else
          v505 = v503;
        if (v505 && (v506 = memcmp(v496, v502, v505)) != 0)
        {
          if ((v506 & 0x80000000) == 0)
            return result;
        }
        else if (v498 >= v504)
        {
          return result;
        }
        v508 = v532->i64[1];
        v507 = v532[1].i64[0];
        v509 = v532->i64[0];
        v532->i64[1] = v507;
        v532[1].i64[0] = v508;
        v510 = *(_QWORD *)(v507 - 8 * *(unsigned int *)(v507 + 8) + 8);
        if (v510)
        {
          v511 = *(llvm::Value **)(v510 + 128);
          if (*((_BYTE *)v511 + 16) == 3)
            v512 = v511;
          else
            v512 = 0;
        }
        else
        {
          v512 = 0;
        }
        v513 = (const void *)llvm::Value::getName(v512);
        v515 = v514;
        v516 = *(_QWORD *)(v509 - 8 * *(unsigned int *)(v509 + 8) + 8);
        if (v516)
        {
          v517 = *(llvm::Value **)(v516 + 128);
          if (*((_BYTE *)v517 + 16) == 3)
            v518 = v517;
          else
            v518 = 0;
        }
        else
        {
          v518 = 0;
        }
        v519 = (const void *)llvm::Value::getName(v518);
        v521 = v520;
        if (v520 >= v515)
          v522 = v515;
        else
          v522 = v520;
        if (v522 && (v523 = memcmp(v513, v519, v522)) != 0)
        {
          if ((v523 & 0x80000000) == 0)
            return result;
        }
        else if (v515 >= v521)
        {
          return result;
        }
        result = vextq_s8(*v532, *v532, 8uLL);
        *v532 = result;
        return result;
      default:
        if (v9 <= 191)
        {
          v238 = v8 + 1;
          v239 = v8 == (uint64_t *)v6 || v238 == (uint64_t *)v6;
          v240 = v239;
          if ((a4 & 1) != 0)
          {
            if ((v240 & 1) != 0)
              return result;
            v241 = 0;
            v242 = v8;
            while (1)
            {
              v243 = v242;
              v242 = v238;
              v244 = *(_QWORD *)(v243[1] - 8 * *(unsigned int *)(v243[1] + 8) + 8);
              if (v244)
              {
                v245 = *(llvm::Value **)(v244 + 128);
                if (*((_BYTE *)v245 + 16) == 3)
                  v246 = v245;
                else
                  v246 = 0;
              }
              else
              {
                v246 = 0;
              }
              v247 = *v243;
              v248 = (const void *)llvm::Value::getName(v246);
              v250 = v249;
              v251 = *(_QWORD *)(v247 - 8 * *(unsigned int *)(v247 + 8) + 8);
              if (v251)
              {
                v252 = *(llvm::Value **)(v251 + 128);
                if (*((_BYTE *)v252 + 16) == 3)
                  v253 = v252;
                else
                  v253 = 0;
              }
              else
              {
                v253 = 0;
              }
              v254 = v532;
              v255 = (const void *)llvm::Value::getName(v253);
              v257 = v256;
              if (v256 >= v250)
                v258 = v250;
              else
                v258 = v256;
              if (v258 && (v259 = memcmp(v248, v255, v258)) != 0)
              {
                if (v259 < 0)
                  goto LABEL_317;
              }
              else if (v250 < v257)
              {
LABEL_317:
                v260 = *v242;
                v261 = (unsigned int *)(*v242 + 8);
                v262 = v241;
                while (1)
                {
                  v263 = v262;
                  v264 = &v254->i8[v262];
                  *(uint64_t *)((char *)&v254->i64[1] + v262) = *(uint64_t *)((char *)v254->i64 + v262);
                  if (!v262)
                    break;
                  v265 = *(_QWORD *)&v261[-2 * *v261];
                  if (v265)
                  {
                    v266 = *(llvm::Value **)(v265 + 128);
                    if (*((_BYTE *)v266 + 16) == 3)
                      v267 = v266;
                    else
                      v267 = 0;
                  }
                  else
                  {
                    v267 = 0;
                  }
                  v268 = *((_QWORD *)v264 - 1);
                  v269 = (const void *)llvm::Value::getName(v267);
                  v271 = v270;
                  v272 = *(_QWORD *)(v268 - 8 * *(unsigned int *)(v268 + 8) + 8);
                  if (v272)
                  {
                    v273 = *(llvm::Value **)(v272 + 128);
                    if (*((_BYTE *)v273 + 16) == 3)
                      v274 = v273;
                    else
                      v274 = 0;
                  }
                  else
                  {
                    v274 = 0;
                  }
                  v254 = v532;
                  v275 = (const void *)llvm::Value::getName(v274);
                  v277 = v276;
                  if (v276 >= v271)
                    v278 = v271;
                  else
                    v278 = v276;
                  if (v278 && (v279 = memcmp(v269, v275, v278)) != 0)
                  {
                    v280 = (v279 >> 31) | 1;
                  }
                  else
                  {
                    if (v271 >= v277)
                      goto LABEL_338;
                    v280 = -1;
                  }
                  v262 = v263 - 8;
                  if (v280 != -1)
                  {
LABEL_338:
                    v281 = (uint64_t *)((char *)v532->i64 + v263);
                    goto LABEL_340;
                  }
                }
                v281 = (uint64_t *)v254;
LABEL_340:
                *v281 = v260;
              }
              v238 = v242 + 1;
              v241 += 8;
              if (v242 + 1 == (uint64_t *)a2)
                return result;
            }
          }
          if ((v240 & 1) != 0)
            return result;
          while (1)
          {
            v414 = v8;
            v415 = v238;
            v416 = *(_QWORD *)(v8[1] - 8 * *(unsigned int *)(v8[1] + 8) + 8);
            v417 = v415;
            if (v416)
            {
              v418 = *(llvm::Value **)(v416 + 128);
              if (*((_BYTE *)v418 + 16) == 3)
                v419 = v418;
              else
                v419 = 0;
            }
            else
            {
              v419 = 0;
            }
            v420 = *v8;
            v421 = (const void *)llvm::Value::getName(v419);
            v423 = v422;
            v424 = *(_QWORD *)(v420 - 8 * *(unsigned int *)(v420 + 8) + 8);
            if (v424)
            {
              v425 = *(llvm::Value **)(v424 + 128);
              if (*((_BYTE *)v425 + 16) == 3)
                v426 = v425;
              else
                v426 = 0;
            }
            else
            {
              v426 = 0;
            }
            v8 = v417;
            v427 = (const void *)llvm::Value::getName(v426);
            v429 = v428;
            if (v428 >= v423)
              v430 = v423;
            else
              v430 = v428;
            if (v430 && (v431 = memcmp(v421, v427, v430)) != 0)
            {
              if (v431 < 0)
                goto LABEL_531;
            }
            else if (v423 < v429)
            {
LABEL_531:
              v432 = *v417;
              v433 = (unsigned int *)(*v417 + 8);
              do
              {
                v434 = v414;
                v414[1] = *v414;
                v435 = *(_QWORD *)&v433[-2 * *v433];
                if (v435)
                {
                  v436 = *(llvm::Value **)(v435 + 128);
                  if (*((_BYTE *)v436 + 16) == 3)
                    v437 = v436;
                  else
                    v437 = 0;
                }
                else
                {
                  v437 = 0;
                }
                --v414;
                v438 = *(v434 - 1);
                v439 = (const void *)llvm::Value::getName(v437);
                v441 = v440;
                v442 = *(_QWORD *)(v438 - 8 * *(unsigned int *)(v438 + 8) + 8);
                if (v442)
                {
                  v443 = *(llvm::Value **)(v442 + 128);
                  if (*((_BYTE *)v443 + 16) == 3)
                    v444 = v443;
                  else
                    v444 = 0;
                }
                else
                {
                  v444 = 0;
                }
                v8 = v417;
                v445 = (const void *)llvm::Value::getName(v444);
                v447 = v446;
                if (v446 >= v441)
                  v448 = v441;
                else
                  v448 = v446;
                if (v448 && (v449 = memcmp(v439, v445, v448)) != 0)
                {
                  v450 = (v449 >> 31) | 1;
                }
                else
                {
                  if (v441 >= v447)
                    break;
                  v450 = -1;
                }
              }
              while (v450 == -1);
              *v434 = v432;
            }
            v238 = v8 + 1;
            if (v8 + 1 == (uint64_t *)a2)
              return result;
          }
        }
        if (!a3)
        {
          if (v8 == (uint64_t *)v6)
            return result;
          v282 = (unint64_t)(v10 - 2) >> 1;
          v528 = v282;
          while (1)
          {
            v283 = v282;
            if (v528 >= v282)
            {
              v284 = (2 * v282) | 1;
              v285 = &v8[v284];
              v286 = v285;
              if (2 * v282 + 2 < v10)
              {
                v287 = *(_QWORD *)(*v285 - 8 * *(unsigned int *)(*v285 + 8) + 8);
                if (v287)
                {
                  v288 = *(llvm::Value **)(v287 + 128);
                  if (*((_BYTE *)v288 + 16) == 3)
                    v289 = v288;
                  else
                    v289 = 0;
                }
                else
                {
                  v289 = 0;
                }
                v290 = v285[1];
                v286 = v285 + 1;
                v291 = (const void *)llvm::Value::getName(v289);
                v293 = v292;
                v294 = *(_QWORD *)(v290 - 8 * *(unsigned int *)(v290 + 8) + 8);
                if (v294)
                {
                  v295 = *(llvm::Value **)(v294 + 128);
                  if (*((_BYTE *)v295 + 16) == 3)
                    v296 = v295;
                  else
                    v296 = 0;
                }
                else
                {
                  v296 = 0;
                }
                v297 = (const void *)llvm::Value::getName(v296);
                v299 = v298;
                if (v298 >= v293)
                  v300 = v293;
                else
                  v300 = v298;
                v8 = (uint64_t *)v532;
                if (v300 && (v301 = memcmp(v291, v297, v300)) != 0)
                {
                  v302 = (v301 >> 31) | 1;
                }
                else
                {
                  if (v293 < v299)
                    v302 = -1;
                  else
                    v302 = 1;
                  if (v293 == v299)
                    v302 = 0;
                }
                if (v302 == -1)
                  v284 = 2 * v283 + 2;
                else
                  v286 = v285;
              }
              v303 = &v8[v283];
              v304 = *v303;
              v305 = *(_QWORD *)(*v286 - 8 * *(unsigned int *)(*v286 + 8) + 8);
              if (v305)
              {
                v306 = *(llvm::Value **)(v305 + 128);
                if (*((_BYTE *)v306 + 16) == 3)
                  v307 = v306;
                else
                  v307 = 0;
              }
              else
              {
                v307 = 0;
              }
              v308 = (const void *)llvm::Value::getName(v307);
              v310 = v309;
              v311 = *(_QWORD *)(v304 - 8 * *(unsigned int *)(v304 + 8) + 8);
              if (v311)
              {
                v312 = *(llvm::Value **)(v311 + 128);
                if (*((_BYTE *)v312 + 16) == 3)
                  v313 = v312;
                else
                  v313 = 0;
              }
              else
              {
                v313 = 0;
              }
              v8 = (uint64_t *)v532;
              v314 = (const void *)llvm::Value::getName(v313);
              v316 = v315;
              if (v315 >= v310)
                v317 = v310;
              else
                v317 = v315;
              if (v317 && (v318 = memcmp(v308, v314, v317)) != 0)
              {
                if ((v318 & 0x80000000) == 0)
                  goto LABEL_389;
              }
              else if (v310 >= v316)
              {
LABEL_389:
                v524 = *v303;
                v526 = v283;
                v319 = (unsigned int *)(*v303 + 8);
                do
                {
                  v320 = v286;
                  *v303 = *v286;
                  if (v528 < v284)
                    break;
                  v321 = 2 * v284;
                  v322 = (2 * v284) | 1;
                  v323 = &v8[v322];
                  v286 = v323;
                  v324 = v321 + 2;
                  if (v321 + 2 >= v10)
                  {
                    v284 = v322;
                  }
                  else
                  {
                    v325 = *(_QWORD *)(*v323 - 8 * *(unsigned int *)(*v323 + 8) + 8);
                    if (v325)
                    {
                      v326 = *(_QWORD *)(v325 + 128);
                      v327 = *(_BYTE *)(v326 + 16) == 3 ? (llvm::Value *)v326 : 0;
                    }
                    else
                    {
                      v327 = 0;
                    }
                    v328 = v323[1];
                    v286 = v323 + 1;
                    v329 = (const void *)llvm::Value::getName(v327);
                    v331 = v330;
                    v332 = *(_QWORD *)(v328 - 8 * *(unsigned int *)(v328 + 8) + 8);
                    if (v332)
                    {
                      v333 = *(_QWORD *)(v332 + 128);
                      v334 = *(_BYTE *)(v333 + 16) == 3 ? (llvm::Value *)v333 : 0;
                    }
                    else
                    {
                      v334 = 0;
                    }
                    v335 = (const void *)llvm::Value::getName(v334);
                    v337 = v336;
                    v338 = v336 >= v331 ? v331 : v336;
                    if (v338 && (v339 = memcmp(v329, v335, v338)) != 0)
                    {
                      v340 = (v339 >> 31) | 1;
                    }
                    else
                    {
                      if (v331 < v337)
                        v340 = -1;
                      else
                        v340 = 1;
                      if (v331 == v337)
                        v340 = 0;
                    }
                    if (v340 == -1)
                    {
                      v284 = v324;
                    }
                    else
                    {
                      v286 = v323;
                      v284 = v322;
                    }
                  }
                  v341 = *(_QWORD *)(*v286 - 8 * *(unsigned int *)(*v286 + 8) + 8);
                  v8 = (uint64_t *)v532;
                  if (v341)
                  {
                    v342 = *(_QWORD *)(v341 + 128);
                    v343 = *(_BYTE *)(v342 + 16) == 3 ? (llvm::Value *)v342 : 0;
                  }
                  else
                  {
                    v343 = 0;
                  }
                  v344 = (const void *)llvm::Value::getName(v343);
                  v346 = v345;
                  v347 = *(_QWORD *)&v319[-2 * *v319];
                  if (v347)
                  {
                    v348 = *(_QWORD *)(v347 + 128);
                    v349 = *(_BYTE *)(v348 + 16) == 3 ? (llvm::Value *)v348 : 0;
                  }
                  else
                  {
                    v349 = 0;
                  }
                  v350 = (const void *)llvm::Value::getName(v349);
                  v352 = v351;
                  v353 = v351 >= v346 ? v346 : v351;
                  if (v353 && (v354 = memcmp(v344, v350, v353)) != 0)
                  {
                    v355 = (v354 >> 31) | 1;
                  }
                  else if (v346 == v352)
                  {
                    v355 = 0;
                  }
                  else
                  {
                    if (v346 < v352)
                      break;
                    v355 = 1;
                  }
                  v303 = v320;
                }
                while (v355 != -1);
                *v320 = v524;
                v283 = v526;
              }
            }
            v282 = v283 - 1;
            if (!v283)
            {
              while (1)
              {
                v356 = 0;
                v529 = *v8;
                v357 = v8;
                do
                {
                  v358 = &v357[v356 + 1];
                  v359 = (2 * v356) | 1;
                  v360 = 2 * v356 + 2;
                  if (v360 < v10)
                  {
                    v361 = *(_QWORD *)(*v358 - 8 * *(unsigned int *)(*v358 + 8) + 8);
                    if (v361)
                    {
                      v362 = *(llvm::Value **)(v361 + 128);
                      if (*((_BYTE *)v362 + 16) == 3)
                        v363 = v362;
                      else
                        v363 = 0;
                    }
                    else
                    {
                      v363 = 0;
                    }
                    v364 = v358[1];
                    v365 = (const void *)llvm::Value::getName(v363);
                    v367 = v366;
                    v368 = *(_QWORD *)(v364 - 8 * *(unsigned int *)(v364 + 8) + 8);
                    if (v368)
                    {
                      v369 = *(llvm::Value **)(v368 + 128);
                      if (*((_BYTE *)v369 + 16) == 3)
                        v370 = v369;
                      else
                        v370 = 0;
                    }
                    else
                    {
                      v370 = 0;
                    }
                    v371 = (const void *)llvm::Value::getName(v370);
                    v373 = v372;
                    if (v372 >= v367)
                      v374 = v367;
                    else
                      v374 = v372;
                    if (v374 && (v375 = memcmp(v365, v371, v374)) != 0)
                    {
                      v376 = (v375 >> 31) | 1;
                    }
                    else
                    {
                      if (v367 < v373)
                        v376 = -1;
                      else
                        v376 = 1;
                      if (v367 == v373)
                        v376 = 0;
                    }
                    if (v376 == -1)
                    {
                      ++v358;
                      v359 = v360;
                    }
                  }
                  *v357 = *v358;
                  v357 = v358;
                  v356 = v359;
                }
                while (v359 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
                v377 = &a2[-1].i64[1];
                v239 = v358 == (uint64_t *)&a2[-1].u64[1];
                a2 = (int8x16_t *)((char *)a2 - 8);
                if (v239)
                {
                  *v358 = v529;
                  v8 = (uint64_t *)v532;
                }
                else
                {
                  *v358 = *v377;
                  *v377 = v529;
                  v8 = (uint64_t *)v532;
                  v378 = (char *)v358 - (char *)v532 + 8;
                  if (v378 >= 9)
                  {
                    v379 = (((unint64_t)v378 >> 3) - 2) >> 1;
                    v380 = &v532->i64[v379];
                    v381 = *(_QWORD *)(*v380 - 8 * *(unsigned int *)(*v380 + 8) + 8);
                    if (v381)
                    {
                      v382 = *(llvm::Value **)(v381 + 128);
                      if (*((_BYTE *)v382 + 16) == 3)
                        v383 = v382;
                      else
                        v383 = 0;
                    }
                    else
                    {
                      v383 = 0;
                    }
                    v384 = *v358;
                    v385 = (const void *)llvm::Value::getName(v383);
                    v387 = v386;
                    v388 = *(_QWORD *)(v384 - 8 * *(unsigned int *)(v384 + 8) + 8);
                    if (v388)
                    {
                      v389 = *(llvm::Value **)(v388 + 128);
                      if (*((_BYTE *)v389 + 16) == 3)
                        v390 = v389;
                      else
                        v390 = 0;
                    }
                    else
                    {
                      v390 = 0;
                    }
                    v8 = (uint64_t *)v532;
                    v391 = (const void *)llvm::Value::getName(v390);
                    v393 = v392;
                    if (v392 >= v387)
                      v394 = v387;
                    else
                      v394 = v392;
                    if (v394 && (v395 = memcmp(v385, v391, v394)) != 0)
                    {
                      if (v395 < 0)
                        goto LABEL_487;
                    }
                    else if (v387 < v393)
                    {
LABEL_487:
                      v530 = *v358;
                      v396 = (unsigned int *)(*v358 + 8);
                      do
                      {
                        v397 = v380;
                        *v358 = *v380;
                        if (!v379)
                          break;
                        v379 = (v379 - 1) >> 1;
                        v380 = &v532->i64[v379];
                        v398 = *(_QWORD *)(*v380 - 8 * *(unsigned int *)(*v380 + 8) + 8);
                        if (v398)
                        {
                          v399 = *(_QWORD *)(v398 + 128);
                          v400 = *(_BYTE *)(v399 + 16) == 3 ? (llvm::Value *)v399 : 0;
                        }
                        else
                        {
                          v400 = 0;
                        }
                        v401 = (const void *)llvm::Value::getName(v400);
                        v403 = v402;
                        v404 = *(_QWORD *)&v396[-2 * *v396];
                        if (v404)
                        {
                          v405 = *(_QWORD *)(v404 + 128);
                          v406 = *(_BYTE *)(v405 + 16) == 3 ? (llvm::Value *)v405 : 0;
                        }
                        else
                        {
                          v406 = 0;
                        }
                        v407 = (const void *)llvm::Value::getName(v406);
                        v409 = v408;
                        v410 = v408 >= v403 ? v403 : v408;
                        if (v410 && (v411 = memcmp(v401, v407, v410)) != 0)
                        {
                          v412 = (v411 >> 31) | 1;
                        }
                        else
                        {
                          if (v403 >= v409)
                            break;
                          v412 = -1;
                        }
                        v358 = v397;
                      }
                      while (v412 == -1);
                      *v397 = v530;
                    }
                  }
                }
                if (v10-- <= 2)
                  return result;
              }
            }
          }
        }
        v11 = v8;
        v12 = (unint64_t)v10 >> 1;
        v13 = &v11[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          sub_22F23BCEC(v13, v11, v527);
        }
        else
        {
          sub_22F23BCEC(v11, v13, v527);
          sub_22F23BCEC(v11 + 1, v13 - 1, a2[-1].i64);
          sub_22F23BCEC(v11 + 2, &v11[v12 + 1], &a2[-2].i64[1]);
          sub_22F23BCEC(v13 - 1, v13, &v11[v12 + 1]);
          v14 = *v11;
          *v11 = *v13;
          *v13 = v14;
        }
        a1 = (int8x16_t *)v11;
        --a3;
        v6 = a2;
        if ((a4 & 1) == 0)
        {
          v15 = *(_QWORD *)(a1[-1].i64[1] - 8 * *(unsigned int *)(a1[-1].i64[1] + 8) + 8);
          if (v15)
          {
            v16 = *(llvm::Value **)(v15 + 128);
            if (*((_BYTE *)v16 + 16) == 3)
              v17 = v16;
            else
              v17 = 0;
          }
          else
          {
            v17 = 0;
          }
          v18 = a1->i64[0];
          v19 = (const void *)llvm::Value::getName(v17);
          v21 = v20;
          v22 = *(_QWORD *)(v18 - 8 * *(unsigned int *)(v18 + 8) + 8);
          if (v22)
          {
            v23 = *(llvm::Value **)(v22 + 128);
            if (*((_BYTE *)v23 + 16) == 3)
              v24 = v23;
            else
              v24 = 0;
          }
          else
          {
            v24 = 0;
          }
          a1 = v532;
          v25 = (const void *)llvm::Value::getName(v24);
          v27 = v26;
          if (v26 >= v21)
            v28 = v21;
          else
            v28 = v26;
          if (v28 && (v29 = memcmp(v19, v25, v28)) != 0)
          {
            if (v29 < 0)
              goto LABEL_30;
          }
          else if (v21 < v27)
          {
            goto LABEL_30;
          }
          v30 = v532->i64[0];
          v31 = (unsigned int *)(v532->i64[0] + 8);
          v32 = *(_QWORD *)(v532->i64[0] - 8 * *v31 + 8);
          if (v32)
          {
            v33 = *(llvm::Value **)(v32 + 128);
            if (*((_BYTE *)v33 + 16) == 3)
              v34 = v33;
            else
              v34 = 0;
          }
          else
          {
            v34 = 0;
          }
          v126 = *v527;
          v127 = (const void *)llvm::Value::getName(v34);
          v129 = v128;
          v130 = *(_QWORD *)(v126 - 8 * *(unsigned int *)(v126 + 8) + 8);
          if (v130)
          {
            v131 = *(llvm::Value **)(v130 + 128);
            if (*((_BYTE *)v131 + 16) == 3)
              v132 = v131;
            else
              v132 = 0;
          }
          else
          {
            v132 = 0;
          }
          v133 = (uint64_t *)v532;
          v134 = (const void *)llvm::Value::getName(v132);
          v136 = v135;
          if (v135 >= v129)
            v137 = v129;
          else
            v137 = v135;
          if (v137 && (v138 = memcmp(v127, v134, v137)) != 0)
          {
            if ((v138 & 0x80000000) == 0)
              goto LABEL_162;
          }
          else if (v129 >= v136)
          {
LABEL_162:
            v139 = (int8x16_t *)&v532->u64[1];
            do
            {
              v7 = v139;
              if (v139 >= a2)
                break;
              v140 = *(_QWORD *)&v31[-2 * *v31];
              if (v140)
              {
                v141 = *(_QWORD *)(v140 + 128);
                v142 = *(_BYTE *)(v141 + 16) == 3 ? (llvm::Value *)v141 : 0;
              }
              else
              {
                v142 = 0;
              }
              v143 = v139->i64[0];
              v144 = (const void *)llvm::Value::getName(v142);
              v146 = v145;
              v147 = *(_QWORD *)(v143 - 8 * *(unsigned int *)(v143 + 8) + 8);
              if (v147)
              {
                v148 = *(_QWORD *)(v147 + 128);
                v149 = *(_BYTE *)(v148 + 16) == 3 ? (llvm::Value *)v148 : 0;
              }
              else
              {
                v149 = 0;
              }
              v133 = (uint64_t *)v532;
              v150 = (const void *)llvm::Value::getName(v149);
              v152 = v151;
              v153 = v151 >= v146 ? v146 : v151;
              if (v153 && (v154 = memcmp(v144, v150, v153)) != 0)
              {
                v155 = (v154 >> 31) | 1;
              }
              else if (v146 == v152)
              {
                v155 = 0;
              }
              else
              {
                if (v146 < v152)
                  goto LABEL_209;
                v155 = 1;
              }
              v139 = (int8x16_t *)&v7->u64[1];
            }
            while (v155 != -1);
            goto LABEL_209;
          }
          v156 = (int8x16_t *)&v532->u64[1];
          do
          {
            v7 = v156;
            v157 = *(_QWORD *)&v31[-2 * *v31];
            if (v157)
            {
              v158 = *(llvm::Value **)(v157 + 128);
              if (*((_BYTE *)v158 + 16) == 3)
                v159 = v158;
              else
                v159 = 0;
            }
            else
            {
              v159 = 0;
            }
            v160 = v156->i64[0];
            v161 = (const void *)llvm::Value::getName(v159);
            v163 = v162;
            v164 = *(_QWORD *)(v160 - 8 * *(unsigned int *)(v160 + 8) + 8);
            if (v164)
            {
              v165 = *(llvm::Value **)(v164 + 128);
              if (*((_BYTE *)v165 + 16) == 3)
                v166 = v165;
              else
                v166 = 0;
            }
            else
            {
              v166 = 0;
            }
            v133 = (uint64_t *)v532;
            v167 = (const void *)llvm::Value::getName(v166);
            v169 = v168;
            if (v168 >= v163)
              v170 = v163;
            else
              v170 = v168;
            if (v170 && (v171 = memcmp(v161, v167, v170)) != 0)
            {
              v172 = (v171 >> 31) | 1;
            }
            else if (v163 == v169)
            {
              v172 = 0;
            }
            else
            {
              if (v163 < v169)
                break;
              v172 = 1;
            }
            v156 = (int8x16_t *)&v7->u64[1];
          }
          while (v172 != -1);
LABEL_209:
          v173 = a2;
          if (v7 < a2)
          {
            v174 = &a2[-1].i64[1];
            do
            {
              v173 = (int8x16_t *)v174;
              v175 = *(_QWORD *)&v31[-2 * *v31];
              if (v175)
              {
                v176 = *(llvm::Value **)(v175 + 128);
                if (*((_BYTE *)v176 + 16) == 3)
                  v177 = v176;
                else
                  v177 = 0;
              }
              else
              {
                v177 = 0;
              }
              v178 = *v174;
              v179 = (const void *)llvm::Value::getName(v177);
              v181 = v180;
              v182 = *(_QWORD *)(v178 - 8 * *(unsigned int *)(v178 + 8) + 8);
              if (v182)
              {
                v183 = *(llvm::Value **)(v182 + 128);
                if (*((_BYTE *)v183 + 16) == 3)
                  v184 = v183;
                else
                  v184 = 0;
              }
              else
              {
                v184 = 0;
              }
              v185 = (const void *)llvm::Value::getName(v184);
              v187 = v186;
              if (v186 >= v181)
                v188 = v181;
              else
                v188 = v186;
              v133 = (uint64_t *)v532;
              if (v188 && (v189 = memcmp(v179, v185, v188)) != 0)
              {
                v190 = (v189 >> 31) | 1;
              }
              else
              {
                if (v181 >= v187)
                  break;
                v190 = -1;
              }
              v174 = &v173[-1].i64[1];
            }
            while (v190 == -1);
          }
LABEL_273:
          while (v7 < v173)
          {
            v191 = v7->i64[0];
            v7->i64[0] = v173->i64[0];
            v173->i64[0] = v191;
            v192 = (int8x16_t *)&v7->u64[1];
            do
            {
              v7 = v192;
              v193 = v192->i64[0];
              v194 = *(_QWORD *)&v31[-2 * *v31];
              if (v194)
              {
                v195 = *(llvm::Value **)(v194 + 128);
                if (*((_BYTE *)v195 + 16) == 3)
                  v196 = v195;
                else
                  v196 = 0;
              }
              else
              {
                v196 = 0;
              }
              v197 = (const void *)llvm::Value::getName(v196);
              v199 = v198;
              v200 = *(_QWORD *)(v193 - 8 * *(unsigned int *)(v193 + 8) + 8);
              if (v200)
              {
                v201 = *(llvm::Value **)(v200 + 128);
                if (*((_BYTE *)v201 + 16) == 3)
                  v202 = v201;
                else
                  v202 = 0;
              }
              else
              {
                v202 = 0;
              }
              v203 = (const void *)llvm::Value::getName(v202);
              v205 = v204;
              if (v204 >= v199)
                v206 = v199;
              else
                v206 = v204;
              if (v206 && (v207 = memcmp(v197, v203, v206)) != 0)
              {
                v208 = (v207 >> 31) | 1;
              }
              else if (v199 == v205)
              {
                v208 = 0;
              }
              else
              {
                if (v199 < v205)
                  break;
                v208 = 1;
              }
              v192 = (int8x16_t *)&v7->u64[1];
            }
            while (v208 != -1);
            v209 = (int8x16_t *)((char *)v173 - 8);
            do
            {
              v173 = v209;
              v210 = v209->i64[0];
              v211 = *(_QWORD *)&v31[-2 * *v31];
              if (v211)
              {
                v212 = *(llvm::Value **)(v211 + 128);
                if (*((_BYTE *)v212 + 16) == 3)
                  v213 = v212;
                else
                  v213 = 0;
              }
              else
              {
                v213 = 0;
              }
              v214 = (const void *)llvm::Value::getName(v213);
              v216 = v215;
              v217 = *(_QWORD *)(v210 - 8 * *(unsigned int *)(v210 + 8) + 8);
              if (v217)
              {
                v218 = *(llvm::Value **)(v217 + 128);
                if (*((_BYTE *)v218 + 16) == 3)
                  v219 = v218;
                else
                  v219 = 0;
              }
              else
              {
                v219 = 0;
              }
              v133 = (uint64_t *)v532;
              v220 = (const void *)llvm::Value::getName(v219);
              v222 = v221;
              if (v221 >= v216)
                v223 = v216;
              else
                v223 = v221;
              if (v223 && (v224 = memcmp(v214, v220, v223)) != 0)
              {
                v225 = (v224 >> 31) | 1;
              }
              else
              {
                if (v216 >= v222)
                  goto LABEL_273;
                v225 = -1;
              }
              v209 = (int8x16_t *)((char *)v173 - 8);
            }
            while (v225 == -1);
          }
          v226 = &v7[-1].i64[1];
          if (&v7[-1].u64[1] != (unint64_t *)v133)
            *v133 = *v226;
          a4 = 0;
          *v226 = v30;
          continue;
        }
LABEL_30:
        v35 = a1->i64[0];
        v36 = (unsigned int *)(a1->i64[0] + 8);
        v37 = 8;
        do
        {
          v38 = v37;
          v39 = *(_QWORD *)(*(uint64_t *)((char *)a1->i64 + v37)
                          - 8 * *(unsigned int *)(*(uint64_t *)((char *)a1->i64 + v37) + 8)
                          + 8);
          if (v39)
          {
            v40 = *(llvm::Value **)(v39 + 128);
            if (*((_BYTE *)v40 + 16) == 3)
              v41 = v40;
            else
              v41 = 0;
          }
          else
          {
            v41 = 0;
          }
          v42 = (const void *)llvm::Value::getName(v41);
          v44 = v43;
          v45 = *(_QWORD *)&v36[-2 * *v36];
          if (v45)
          {
            v46 = *(llvm::Value **)(v45 + 128);
            if (*((_BYTE *)v46 + 16) == 3)
              v47 = v46;
            else
              v47 = 0;
          }
          else
          {
            v47 = 0;
          }
          v48 = (const void *)llvm::Value::getName(v47);
          v50 = v49;
          if (v49 >= v44)
            v51 = v44;
          else
            v51 = v49;
          if (v51 && (v52 = memcmp(v42, v48, v51)) != 0)
          {
            v53 = (v52 >> 31) | 1;
          }
          else
          {
            if (v44 >= v50)
              break;
            v53 = -1;
          }
          v37 = v38 + 8;
        }
        while (v53 == -1);
        v533 = a3;
        v54 = (unint64_t)a1->u64 + v38;
        v55 = &a2[-1].i8[8];
        if (v38 == 8)
        {
          v72 = &a2[-1].i8[8];
          while (v54 < (unint64_t)(v72 + 8))
          {
            v56 = (int8x16_t *)v72;
            v73 = *(_QWORD *)(*(_QWORD *)v72 - 8 * *(unsigned int *)(*(_QWORD *)v72 + 8) + 8);
            if (v73)
            {
              v74 = *(llvm::Value **)(v73 + 128);
              if (*((_BYTE *)v74 + 16) == 3)
                v75 = v74;
              else
                v75 = 0;
            }
            else
            {
              v75 = 0;
            }
            v76 = (const void *)llvm::Value::getName(v75);
            v78 = v77;
            v79 = *(_QWORD *)&v36[-2 * *v36];
            if (v79)
            {
              v80 = *(llvm::Value **)(v79 + 128);
              if (*((_BYTE *)v80 + 16) == 3)
                v81 = v80;
              else
                v81 = 0;
            }
            else
            {
              v81 = 0;
            }
            v82 = (const void *)llvm::Value::getName(v81);
            v84 = v83;
            if (v83 >= v78)
              v85 = v78;
            else
              v85 = v83;
            if (v85 && (v86 = memcmp(v76, v82, v85)) != 0)
            {
              v87 = (v86 >> 31) | 1;
            }
            else if (v78 == v84)
            {
              v87 = 0;
            }
            else
            {
              if (v78 < v84)
                goto LABEL_98;
              v87 = 1;
            }
            v72 = &v56[-1].i8[8];
            if (v87 == -1)
              goto LABEL_98;
          }
          v56 = (int8x16_t *)(v72 + 8);
        }
        else
        {
          do
          {
            v56 = (int8x16_t *)v55;
            v57 = *(_QWORD *)(*(_QWORD *)v55 - 8 * *(unsigned int *)(*(_QWORD *)v55 + 8) + 8);
            if (v57)
            {
              v58 = *(llvm::Value **)(v57 + 128);
              if (*((_BYTE *)v58 + 16) == 3)
                v59 = v58;
              else
                v59 = 0;
            }
            else
            {
              v59 = 0;
            }
            v60 = (const void *)llvm::Value::getName(v59);
            v62 = v61;
            v63 = *(_QWORD *)&v36[-2 * *v36];
            if (v63)
            {
              v64 = *(llvm::Value **)(v63 + 128);
              if (*((_BYTE *)v64 + 16) == 3)
                v65 = v64;
              else
                v65 = 0;
            }
            else
            {
              v65 = 0;
            }
            v66 = (const void *)llvm::Value::getName(v65);
            v68 = v67;
            if (v67 >= v62)
              v69 = v62;
            else
              v69 = v67;
            if (v69 && (v70 = memcmp(v60, v66, v69)) != 0)
            {
              v71 = (v70 >> 31) | 1;
            }
            else if (v62 == v68)
            {
              v71 = 0;
            }
            else
            {
              if (v62 < v68)
                break;
              v71 = 1;
            }
            v55 = &v56[-1].i8[8];
          }
          while (v71 != -1);
        }
LABEL_98:
        v7 = (int8x16_t *)((char *)a1 + v38);
        if (v54 < (unint64_t)v56)
        {
          v88 = v56;
          do
          {
            v89 = v7->i64[0];
            v7->i64[0] = v88->i64[0];
            v88->i64[0] = v89;
            v90 = (int8x16_t *)&v7->u64[1];
            do
            {
              v7 = v90;
              v91 = *(_QWORD *)(v90->i64[0] - 8 * *(unsigned int *)(v90->i64[0] + 8) + 8);
              if (v91)
              {
                v92 = *(llvm::Value **)(v91 + 128);
                if (*((_BYTE *)v92 + 16) == 3)
                  v93 = v92;
                else
                  v93 = 0;
              }
              else
              {
                v93 = 0;
              }
              v94 = (const void *)llvm::Value::getName(v93);
              v96 = v95;
              v97 = *(_QWORD *)&v36[-2 * *v36];
              if (v97)
              {
                v98 = *(llvm::Value **)(v97 + 128);
                if (*((_BYTE *)v98 + 16) == 3)
                  v99 = v98;
                else
                  v99 = 0;
              }
              else
              {
                v99 = 0;
              }
              v100 = (const void *)llvm::Value::getName(v99);
              v102 = v101;
              if (v101 >= v96)
                v103 = v96;
              else
                v103 = v101;
              if (v103 && (v104 = memcmp(v94, v100, v103)) != 0)
              {
                v105 = (v104 >> 31) | 1;
              }
              else
              {
                if (v96 >= v102)
                  break;
                v105 = -1;
              }
              v90 = (int8x16_t *)&v7->u64[1];
            }
            while (v105 == -1);
            v106 = (int8x16_t *)((char *)v88 - 8);
            do
            {
              v88 = v106;
              v107 = *(_QWORD *)(v106->i64[0] - 8 * *(unsigned int *)(v106->i64[0] + 8) + 8);
              if (v107)
              {
                v108 = *(llvm::Value **)(v107 + 128);
                if (*((_BYTE *)v108 + 16) == 3)
                  v109 = v108;
                else
                  v109 = 0;
              }
              else
              {
                v109 = 0;
              }
              v110 = (const void *)llvm::Value::getName(v109);
              v112 = v111;
              v113 = *(_QWORD *)&v36[-2 * *v36];
              if (v113)
              {
                v114 = *(llvm::Value **)(v113 + 128);
                if (*((_BYTE *)v114 + 16) == 3)
                  v115 = v114;
                else
                  v115 = 0;
              }
              else
              {
                v115 = 0;
              }
              v116 = (const void *)llvm::Value::getName(v115);
              v118 = v117;
              if (v117 >= v112)
                v119 = v112;
              else
                v119 = v117;
              if (v119 && (v120 = memcmp(v110, v116, v119)) != 0)
              {
                v121 = (v120 >> 31) | 1;
              }
              else if (v112 == v118)
              {
                v121 = 0;
              }
              else
              {
                if (v112 < v118)
                  break;
                v121 = 1;
              }
              v106 = (int8x16_t *)((char *)v88 - 8);
            }
            while (v121 != -1);
          }
          while (v7 < v88);
        }
        v122 = &v7[-1].i64[1];
        if (&v7[-1].u64[1] != (unint64_t *)a1)
          a1->i64[0] = *v122;
        *v122 = v35;
        v123 = v54 >= (unint64_t)v56;
        v6 = a2;
        a3 = v533;
        if (!v123)
        {
LABEL_149:
          sub_22F23C89C(a1, &v7[-1].u64[1], v533, a4 & 1);
          a4 = 0;
          continue;
        }
        v124 = sub_22F23E134(a1, (int8x16_t *)((char *)v7 - 8));
        if (!sub_22F23E134(v7, a2))
        {
          if (v124)
            continue;
          goto LABEL_149;
        }
        a2 = (int8x16_t *)((char *)v7 - 8);
        if (!v124)
          goto LABEL_1;
        return result;
    }
  }
}

  result = a1;
  v3 = *a1;
  if (v3 == 92)
  {
    v4 = 1;
  }
  else
  {
    if (v3 != 63 || result[1] != 63 || result[2] != 47)
      return result;
    v4 = 3;
  }
  v5 = &result[v4];
  LODWORD(v6) = 1;
  while (1)
  {
    v7 = v5[(v6 - 1)];
    if ((word_22F4ADB24[v5[(v6 - 1)]] & 7) == 0)
      return result;
    LODWORD(v6) = v6 + 1;
    if (v7 == 13 || v7 == 10)
    {
      v9 = (v6 - 1);
      v10 = v5[v9];
      if (v7 == v10)
        v6 = v9;
      else
        v6 = v6;
      v11 = v10 == 10 || v10 == 13;
      if (v11)
        v12 = v6;
      else
        v12 = v9;
      if (!v11)
        LODWORD(v6) = v9;
      a1 = &v5[v12];
      if ((_DWORD)v6)
        goto LABEL_1;
      return result;
    }
  }
}

uint64_t sub_22E63C53C(uint64_t result, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  const void **v8;
  const void **v9;
  char v10;
  BOOL v11;
  const void *v12;
  size_t v13;
  size_t v14;
  size_t v15;
  const void *v16;
  size_t v17;
  _BOOL4 v18;
  unint64_t v19;
  int v20;
  size_t v21;
  size_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  const void *v28;
  char v29;
  const void *v30;
  size_t v31;
  size_t v32;
  size_t v33;
  BOOL v34;
  uint64_t v35;
  __int128 v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;

  if ((const void **)result != a2)
  {
    v38 = v2;
    v39 = v3;
    v5 = result;
    v6 = (const void **)(result + 24);
    if ((const void **)(result + 24) != a2)
    {
      v7 = 0;
      v8 = (const void **)result;
      do
      {
        v9 = v6;
        v10 = *((_BYTE *)v8 + 23);
        v11 = v10 < 0;
        if (v10 >= 0)
          v12 = v8;
        else
          v12 = *v8;
        v13 = v10 & 0x7F;
        if (v11)
          v14 = (size_t)v8[1];
        else
          v14 = v13;
        if (*((char *)v8 + 47) < 0)
        {
          v15 = (size_t)v8[4];
          v16 = *v9;
        }
        else
        {
          v15 = *((unsigned __int8 *)v8 + 47);
          v16 = v9;
        }
        if (v14 >= v15)
          v17 = v15;
        else
          v17 = v14;
        result = memcmp(v16, v12, v17);
        v18 = v15 < v14;
        if ((_DWORD)result)
          v18 = (int)result < 0;
        if (v18)
        {
          v37 = v9[2];
          v19 = (unint64_t)v37;
          v36 = *(_OWORD *)v9;
          v9[1] = 0;
          v9[2] = 0;
          *v9 = 0;
          v19 >>= 56;
          v20 = (char)v19;
          v21 = v19 & 0x7F;
          if (v20 >= 0)
            v22 = v21;
          else
            v22 = *((_QWORD *)&v36 + 1);
          if (v20 >= 0)
            v23 = &v36;
          else
            v23 = (__int128 *)v36;
          v24 = v7;
          while (1)
          {
            v25 = v5 + v24;
            *(_OWORD *)(v25 + 24) = *(_OWORD *)(v5 + v24);
            *(_QWORD *)(v25 + 40) = *(_QWORD *)(v5 + v24 + 16);
            *(_BYTE *)(v25 + 23) = 0;
            *(_BYTE *)v25 = 0;
            if (!v24)
              break;
            v28 = *(const void **)(v25 - 24);
            v26 = v25 - 24;
            v27 = v28;
            v29 = *(_BYTE *)(v26 + 23);
            if (v29 >= 0)
              v30 = (const void *)v26;
            else
              v30 = v27;
            v31 = *(_QWORD *)(v26 + 8);
            if (v29 >= 0)
              v32 = v29 & 0x7F;
            else
              v32 = v31;
            if (v32 >= v22)
              v33 = v22;
            else
              v33 = v32;
            result = memcmp(v23, v30, v33);
            v34 = v22 < v32;
            if ((_DWORD)result)
              v34 = (int)result < 0;
            v24 -= 24;
            if (!v34)
            {
              v35 = v5 + v24 + 24;
              goto LABEL_41;
            }
          }
          v35 = v5;
LABEL_41:
          *(_OWORD *)v35 = v36;
          *(_QWORD *)(v35 + 16) = v37;
        }
        v6 = v9 + 3;
        v7 += 24;
        v8 = v9;
      }
      while (v9 + 3 != a2);
    }
  }
  return result;
}

const void **sub_22E63C6E0(const void **result, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  const void **v5;
  const void **v6;
  char v7;
  BOOL v8;
  const void *v9;
  size_t v10;
  size_t v11;
  size_t v12;
  const void *v13;
  size_t v14;
  int v15;
  _BOOL4 v16;
  unint64_t v17;
  int v18;
  size_t v19;
  size_t v20;
  __int128 *v21;
  const void **v22;
  const void **v23;
  char v24;
  int v25;
  const void **v26;
  size_t v27;
  size_t v28;
  size_t v29;
  size_t v30;
  int v31;
  BOOL v32;
  __int128 v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;

  if (result != a2)
  {
    v35 = v2;
    v36 = v3;
    v5 = result + 3;
    if (result + 3 != a2)
    {
      do
      {
        v6 = v5;
        v7 = *((_BYTE *)result + 23);
        v8 = v7 < 0;
        if (v7 >= 0)
          v9 = result;
        else
          v9 = *result;
        v10 = v7 & 0x7F;
        if (v8)
          v11 = (size_t)result[1];
        else
          v11 = v10;
        if (*((char *)result + 47) < 0)
        {
          v12 = (size_t)result[4];
          v13 = *v6;
        }
        else
        {
          v12 = *((unsigned __int8 *)result + 47);
          v13 = v6;
        }
        if (v11 >= v12)
          v14 = v12;
        else
          v14 = v11;
        v15 = memcmp(v13, v9, v14);
        v16 = v12 < v11;
        if (v15)
          v16 = v15 < 0;
        if (v16)
        {
          v34 = v6[2];
          v17 = (unint64_t)v34;
          v33 = *(_OWORD *)v6;
          v6[1] = 0;
          v6[2] = 0;
          *v6 = 0;
          v17 >>= 56;
          v18 = (char)v17;
          v19 = v17 & 0x7F;
          if (v18 >= 0)
            v20 = v19;
          else
            v20 = *((_QWORD *)&v33 + 1);
          if (v18 >= 0)
            v21 = &v33;
          else
            v21 = (__int128 *)v33;
          v22 = v6;
          do
          {
            v23 = v22 - 3;
            *(_OWORD *)v22 = *(_OWORD *)(v22 - 3);
            v22[2] = *(v22 - 1);
            *((_BYTE *)v22 - 1) = 0;
            *((_BYTE *)v22 - 24) = 0;
            v24 = *((_BYTE *)v22 - 25);
            v25 = v24;
            if (v24 >= 0)
              v26 = v22 - 6;
            else
              v26 = (const void **)*(v22 - 6);
            v27 = (size_t)*(v22 - 5);
            v28 = v24 & 0x7F;
            if (v25 >= 0)
              v29 = v28;
            else
              v29 = v27;
            if (v29 >= v20)
              v30 = v20;
            else
              v30 = v29;
            v31 = memcmp(v21, v26, v30);
            v32 = v31 < 0;
            if (!v31)
              v32 = v20 < v29;
            v22 = v23;
          }
          while (v32);
          *(_OWORD *)v23 = v33;
          v23[2] = v34;
        }
        v5 = v6 + 3;
        result = v6;
      }
      while (v6 + 3 != a2);
    }
  }
  return result;
}

uint64_t sub_22E63C85C(const void **a1, _QWORD *__s1, const void **a3)
{
  char v6;
  BOOL v7;
  const void *v8;
  size_t v9;
  size_t v10;
  size_t v11;
  _QWORD *v12;
  size_t v13;
  int v14;
  BOOL v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  const void *v21;
  __int128 v22;
  const void *v23;
  size_t v24;
  int v25;
  _BOOL4 v26;
  const void *v27;
  __int128 v28;
  const void *v29;
  char v30;
  BOOL v31;
  const void *v32;
  size_t v33;
  size_t v34;
  size_t v35;
  _QWORD *v36;
  unint64_t v37;
  __int128 v38;
  const void *v39;
  unint64_t v40;
  BOOL v41;
  _QWORD *v42;
  size_t v43;
  size_t v44;
  size_t v45;
  const void *v46;
  size_t v48;
  int v49;
  _BOOL4 v50;
  const void *v51;
  __int128 v52;
  const void *v53;
  size_t v54;
  int v55;
  _BOOL4 v56;
  const void *v57;
  __int128 v58;
  const void *v59;

  v6 = *((_BYTE *)a1 + 23);
  v7 = v6 < 0;
  if (v6 >= 0)
    v8 = a1;
  else
    v8 = *a1;
  v9 = v6 & 0x7F;
  if (v7)
    v10 = (size_t)a1[1];
  else
    v10 = v9;
  if (*((char *)__s1 + 23) < 0)
  {
    v12 = (_QWORD *)*__s1;
    v11 = __s1[1];
  }
  else
  {
    v11 = *((unsigned __int8 *)__s1 + 23);
    v12 = __s1;
  }
  if (v10 >= v11)
    v13 = v11;
  else
    v13 = v10;
  v14 = memcmp(v12, v8, v13);
  v15 = v11 < v10;
  if (v14)
    v15 = v14 < 0;
  v16 = *((unsigned __int8 *)a3 + 23);
  v17 = a3;
  if (!v15)
  {
    if ((v16 & 0x80) != 0)
    {
      v17 = *a3;
      v16 = (size_t)a3[1];
    }
    if (v11 >= v16)
      v24 = v16;
    else
      v24 = v11;
    v25 = memcmp(v17, v12, v24);
    v26 = v16 < v11;
    if (v25)
      v26 = v25 < 0;
    if (!v26)
      return 0;
    v27 = (const void *)__s1[2];
    v28 = *(_OWORD *)__s1;
    v29 = a3[2];
    *(_OWORD *)__s1 = *(_OWORD *)a3;
    __s1[2] = v29;
    *(_OWORD *)a3 = v28;
    a3[2] = v27;
    v30 = *((_BYTE *)a1 + 23);
    v31 = v30 < 0;
    if (v30 >= 0)
      v32 = a1;
    else
      v32 = *a1;
    v33 = v30 & 0x7F;
    if (v31)
      v34 = (size_t)a1[1];
    else
      v34 = v33;
    if (*((char *)__s1 + 23) < 0)
    {
      v36 = (_QWORD *)*__s1;
      v35 = __s1[1];
    }
    else
    {
      v35 = *((unsigned __int8 *)__s1 + 23);
      v36 = __s1;
    }
    if (v34 >= v35)
      v48 = v35;
    else
      v48 = v34;
    v49 = memcmp(v36, v32, v48);
    v50 = v35 < v34;
    if (v49)
      v50 = v49 < 0;
    if (!v50)
      return 1;
    v51 = a1[2];
    v52 = *(_OWORD *)a1;
    v53 = (const void *)__s1[2];
    *(_OWORD *)a1 = *(_OWORD *)__s1;
    a1[2] = v53;
    *(_OWORD *)__s1 = v52;
    __s1[2] = v51;
    return 2;
  }
  if ((v16 & 0x80) != 0)
  {
    v17 = *a3;
    v16 = (size_t)a3[1];
  }
  if (v11 >= v16)
    v18 = v16;
  else
    v18 = v11;
  v19 = memcmp(v17, v12, v18);
  v20 = v16 < v11;
  if (v19)
    v20 = v19 < 0;
  if (!v20)
  {
    v37 = (unint64_t)a1[2];
    v38 = *(_OWORD *)a1;
    v39 = (const void *)__s1[2];
    *(_OWORD *)a1 = *(_OWORD *)__s1;
    a1[2] = v39;
    *(_OWORD *)__s1 = v38;
    __s1[2] = v37;
    v40 = HIBYTE(v37);
    v41 = (v40 & 0x80u) != 0;
    if ((v40 & 0x80u) == 0)
      v42 = __s1;
    else
      v42 = (_QWORD *)*__s1;
    v43 = v40 & 0x7F;
    if (v41)
      v44 = __s1[1];
    else
      v44 = v43;
    if (*((char *)a3 + 23) < 0)
    {
      v46 = *a3;
      v45 = (size_t)a3[1];
    }
    else
    {
      v45 = *((unsigned __int8 *)a3 + 23);
      v46 = a3;
    }
    if (v44 >= v45)
      v54 = v45;
    else
      v54 = v44;
    v55 = memcmp(v46, v42, v54);
    v56 = v45 < v44;
    if (v55)
      v56 = v55 < 0;
    if (!v56)
      return 1;
    v57 = (const void *)__s1[2];
    v58 = *(_OWORD *)__s1;
    v59 = a3[2];
    *(_OWORD *)__s1 = *(_OWORD *)a3;
    __s1[2] = v59;
    *(_OWORD *)a3 = v58;
    a3[2] = v57;
    return 2;
  }
  v21 = a1[2];
  v22 = *(_OWORD *)a1;
  v23 = a3[2];
  *(_OWORD *)a1 = *(_OWORD *)a3;
  a1[2] = v23;
  *(_OWORD *)a3 = v22;
  a3[2] = v21;
  return 1;
}

const void **sub_22E63CAD8(const void **a1, const void **a2)
{
  const void **v2;
  const void **v4;
  char v5;
  const void **v6;
  size_t v7;
  size_t v8;
  size_t v9;
  __int128 *v10;
  size_t v11;
  int v12;
  BOOL v13;
  const void **v14;
  char v15;
  BOOL v16;
  const void *v17;
  size_t v18;
  size_t v19;
  size_t v20;
  int v21;
  BOOL v22;
  const void **v23;
  const void **v24;
  char v25;
  BOOL v26;
  const void *v27;
  size_t v28;
  size_t v29;
  size_t v30;
  int v31;
  BOOL v32;
  const void **v33;
  char v34;
  BOOL v35;
  const void *v36;
  size_t v37;
  size_t v38;
  size_t v39;
  int v40;
  BOOL v41;
  __int128 v42;
  __int128 v43;
  const void **v44;
  __int128 v45;
  size_t v46;
  __int128 *v47;
  char v48;
  BOOL v49;
  const void *v50;
  size_t v51;
  size_t v52;
  size_t v53;
  int v54;
  _BOOL4 v55;
  const void **v56;
  char v57;
  BOOL v58;
  const void *v59;
  size_t v60;
  size_t v61;
  size_t v62;
  int v63;
  BOOL v64;
  const void **v65;
  __int128 v66;
  __int128 v67;
  __int128 v69;
  const void *v70;
  __int128 v71;
  const void *v72;

  v2 = a2;
  v70 = a1[2];
  v69 = *(_OWORD *)a1;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v4 = a2 - 3;
  v5 = *((_BYTE *)a2 - 1);
  if (v5 >= 0)
    v6 = a2 - 3;
  else
    v6 = (const void **)*(a2 - 3);
  v7 = (size_t)v4[1];
  if (v5 >= 0)
    v8 = v5 & 0x7F;
  else
    v8 = v7;
  if (SHIBYTE(v70) >= 0)
    v9 = HIBYTE(v70) & 0x7F;
  else
    v9 = *((_QWORD *)&v69 + 1);
  if (SHIBYTE(v70) >= 0)
    v10 = &v69;
  else
    v10 = (__int128 *)v69;
  if (v8 >= v9)
    v11 = v9;
  else
    v11 = v8;
  v12 = memcmp(v10, v6, v11);
  v13 = v9 < v8;
  if (v12)
    v13 = v12 < 0;
  if (v13)
  {
    v14 = a1 + 3;
    do
    {
      v15 = *((_BYTE *)v14 + 23);
      v16 = v15 < 0;
      if (v15 >= 0)
        v17 = v14;
      else
        v17 = *v14;
      v18 = v15 & 0x7F;
      if (v16)
        v19 = (size_t)v14[1];
      else
        v19 = v18;
      if (v19 >= v9)
        v20 = v9;
      else
        v20 = v19;
      v21 = memcmp(v10, v17, v20);
      v22 = v9 < v19;
      if (v21)
        v22 = v21 < 0;
      v14 += 3;
    }
    while (!v22);
    v23 = v14 - 3;
  }
  else
  {
    v24 = a1 + 3;
    do
    {
      v23 = v24;
      if (v24 >= v2)
        break;
      v25 = *((_BYTE *)v24 + 23);
      v26 = v25 < 0;
      if (v25 >= 0)
        v27 = v23;
      else
        v27 = *v23;
      v28 = v25 & 0x7F;
      if (v26)
        v29 = (size_t)v23[1];
      else
        v29 = v28;
      if (v29 >= v9)
        v30 = v9;
      else
        v30 = v29;
      v31 = memcmp(v10, v27, v30);
      v32 = v31 < 0;
      if (!v31)
        v32 = v9 < v29;
      v24 = v23 + 3;
    }
    while (!v32);
  }
  if (v23 < v2)
  {
    v33 = v2 - 3;
    do
    {
      v34 = *((_BYTE *)v33 + 23);
      v35 = v34 < 0;
      if (v34 >= 0)
        v36 = v33;
      else
        v36 = *v33;
      v37 = v34 & 0x7F;
      if (v35)
        v38 = (size_t)v33[1];
      else
        v38 = v37;
      if (v38 >= v9)
        v39 = v9;
      else
        v39 = v38;
      v40 = memcmp(v10, v36, v39);
      v41 = v9 < v38;
      if (v40)
        v41 = v40 < 0;
      v33 -= 3;
    }
    while (v41);
    v2 = v33 + 3;
  }
  for (; v23 < v2; v2 = v56 + 3)
  {
    v42 = *(_OWORD *)v23;
    v72 = v23[2];
    v71 = v42;
    v43 = *(_OWORD *)v2;
    v23[2] = v2[2];
    *(_OWORD *)v23 = v43;
    v44 = v23 + 3;
    v45 = v71;
    v2[2] = v72;
    *(_OWORD *)v2 = v45;
    if (SHIBYTE(v70) >= 0)
      v46 = HIBYTE(v70) & 0x7F;
    else
      v46 = *((_QWORD *)&v69 + 1);
    if (SHIBYTE(v70) >= 0)
      v47 = &v69;
    else
      v47 = (__int128 *)v69;
    do
    {
      v48 = *((_BYTE *)v44 + 23);
      v49 = v48 < 0;
      if (v48 >= 0)
        v50 = v44;
      else
        v50 = *v44;
      v51 = v48 & 0x7F;
      if (v49)
        v52 = (size_t)v44[1];
      else
        v52 = v51;
      if (v52 >= v46)
        v53 = v46;
      else
        v53 = v52;
      v54 = memcmp(v47, v50, v53);
      v55 = v46 < v52;
      if (v54)
        v55 = v54 < 0;
      v44 += 3;
    }
    while (!v55);
    v23 = v44 - 3;
    v56 = v2 - 3;
    do
    {
      v57 = *((_BYTE *)v56 + 23);
      v58 = v57 < 0;
      if (v57 >= 0)
        v59 = v56;
      else
        v59 = *v56;
      v60 = v57 & 0x7F;
      if (v58)
        v61 = (size_t)v56[1];
      else
        v61 = v60;
      if (v61 >= v46)
        v62 = v46;
      else
        v62 = v61;
      v63 = memcmp(v47, v59, v62);
      v64 = v46 < v61;
      if (v63)
        v64 = v63 < 0;
      v56 -= 3;
    }
    while (v64);
  }
  v65 = v23 - 3;
  if (v23 - 3 == a1)
  {
    if (*((char *)v23 - 1) < 0)
      operator delete((void *)*a1);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete((void *)*a1);
    v66 = *(_OWORD *)v65;
    a1[2] = *(v23 - 1);
    *(_OWORD *)a1 = v66;
    *((_BYTE *)v23 - 1) = 0;
    *((_BYTE *)v23 - 24) = 0;
  }
  v67 = v69;
  *(v23 - 1) = v70;
  *(_OWORD *)v65 = v67;
  return v23;
}

unint64_t sub_22E63CDFC(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  unint64_t v6;
  _QWORD *v7;
  size_t v8;
  size_t v9;
  int v10;
  BOOL v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  size_t v16;
  int v17;
  BOOL v18;
  unint64_t v19;
  char *v20;
  size_t v21;
  char *v22;
  size_t v23;
  int v24;
  BOOL v25;
  unint64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  __int128 v31;
  __int128 *v32;
  size_t v33;
  size_t v34;
  char *v35;
  size_t v36;
  int v37;
  BOOL v38;
  char *v39;
  size_t v40;
  char *v41;
  size_t v42;
  int v43;
  _BOOL4 v44;
  __int128 *v45;
  __int128 v46;
  __int128 v47;
  __int128 v49;
  int64_t v50;
  __int128 v51;
  uint64_t v52;

  v4 = 0;
  v50 = *((_QWORD *)a1 + 2);
  v49 = *a1;
  if (v50 >= 0)
    v5 = &v49;
  else
    v5 = (__int128 *)v49;
  if (v50 >= 0)
    v6 = HIBYTE(v50) & 0x7F;
  else
    v6 = *((_QWORD *)&v49 + 1);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  do
  {
    v7 = (_QWORD *)((char *)a1 + v4 + 24);
    if (*((char *)a1 + v4 + 47) < 0)
    {
      v8 = *(_QWORD *)((char *)a1 + v4 + 32);
      v7 = (_QWORD *)*v7;
    }
    else
    {
      v8 = *((unsigned __int8 *)a1 + v4 + 47);
    }
    if (v6 >= v8)
      v9 = v8;
    else
      v9 = v6;
    v10 = memcmp(v7, v5, v9);
    v11 = v8 < v6;
    if (v10)
      v11 = v10 < 0;
    v4 += 24;
  }
  while (v11);
  v12 = (unint64_t)a1 + v4;
  if (v4 == 24)
  {
    v20 = (char *)(a2 - 24);
    while (1)
    {
      v19 = (unint64_t)(v20 + 24);
      if (v12 >= (unint64_t)(v20 + 24))
        break;
      if (v20[23] < 0)
      {
        v22 = *(char **)v20;
        v21 = *((_QWORD *)v20 + 1);
      }
      else
      {
        v21 = v20[23];
        v22 = v20;
      }
      if (v6 >= v21)
        v23 = v21;
      else
        v23 = v6;
      v24 = memcmp(v22, v5, v23);
      v25 = v21 < v6;
      if (v24)
        v25 = v24 < 0;
      v20 -= 24;
      if (v25)
      {
        v19 = (unint64_t)(v20 + 24);
        break;
      }
    }
  }
  else
  {
    v13 = (char *)(a2 - 24);
    do
    {
      if (v13[23] < 0)
      {
        v15 = *(char **)v13;
        v14 = *((_QWORD *)v13 + 1);
      }
      else
      {
        v14 = v13[23];
        v15 = v13;
      }
      if (v6 >= v14)
        v16 = v14;
      else
        v16 = v6;
      v17 = memcmp(v15, v5, v16);
      v18 = v14 < v6;
      if (v17)
        v18 = v17 < 0;
      v13 -= 24;
    }
    while (!v18);
    v19 = (unint64_t)(v13 + 24);
  }
  if (v12 >= v19)
  {
    v26 = v12;
  }
  else
  {
    v26 = v12;
    v27 = (char *)v19;
    do
    {
      v28 = *(_OWORD *)v26;
      v52 = *(_QWORD *)(v26 + 16);
      v51 = v28;
      v29 = *(_OWORD *)v27;
      *(_QWORD *)(v26 + 16) = *((_QWORD *)v27 + 2);
      *(_OWORD *)v26 = v29;
      v30 = (char *)(v26 + 24);
      v31 = v51;
      *((_QWORD *)v27 + 2) = v52;
      *(_OWORD *)v27 = v31;
      if (v50 >= 0)
        v32 = &v49;
      else
        v32 = (__int128 *)v49;
      if (v50 >= 0)
        v33 = HIBYTE(v50) & 0x7F;
      else
        v33 = *((_QWORD *)&v49 + 1);
      do
      {
        if (v30[23] < 0)
        {
          v35 = *(char **)v30;
          v34 = *((_QWORD *)v30 + 1);
        }
        else
        {
          v34 = v30[23];
          v35 = v30;
        }
        if (v33 >= v34)
          v36 = v34;
        else
          v36 = v33;
        v37 = memcmp(v35, v32, v36);
        v38 = v34 < v33;
        if (v37)
          v38 = v37 < 0;
        v30 += 24;
      }
      while (v38);
      v26 = (unint64_t)(v30 - 24);
      v39 = v27 - 24;
      do
      {
        if (v39[23] < 0)
        {
          v41 = *(char **)v39;
          v40 = *((_QWORD *)v39 + 1);
        }
        else
        {
          v40 = v39[23];
          v41 = v39;
        }
        if (v33 >= v40)
          v42 = v40;
        else
          v42 = v33;
        v43 = memcmp(v41, v32, v42);
        v44 = v40 < v33;
        if (v43)
          v44 = v43 < 0;
        v39 -= 24;
      }
      while (!v44);
      v27 = v39 + 24;
    }
    while (v26 < (unint64_t)v27);
  }
  v45 = (__int128 *)(v26 - 24);
  if ((__int128 *)(v26 - 24) == a1)
  {
    if (*(char *)(v26 - 1) < 0)
      operator delete(*(void **)a1);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete(*(void **)a1);
    v46 = *v45;
    *((_QWORD *)a1 + 2) = *(_QWORD *)(v26 - 8);
    *a1 = v46;
    *(_BYTE *)(v26 - 1) = 0;
    *(_BYTE *)(v26 - 24) = 0;
  }
  v47 = v49;
  *(_QWORD *)(v26 - 8) = v50;
  *v45 = v47;
  return v26 - 24;
}

BOOL sub_22E63D0EC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  char v7;
  BOOL v8;
  const void *v9;
  size_t v10;
  size_t v11;
  size_t v12;
  const void *v13;
  const void **v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  BOOL v19;
  const void *v20;
  size_t v21;
  size_t v22;
  size_t v23;
  const void *v24;
  size_t v25;
  int v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  const void *v32;
  char v33;
  const void *v34;
  size_t v35;
  size_t v36;
  size_t v37;
  __int128 *v38;
  size_t v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  size_t v43;
  int v44;
  _BOOL4 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (_OWORD *)(a2 - 24);
      v7 = *(_BYTE *)(a1 + 23);
      v8 = v7 < 0;
      if (v7 >= 0)
        v9 = (const void *)a1;
      else
        v9 = *(const void **)a1;
      v10 = v7 & 0x7F;
      if (v8)
        v11 = *(_QWORD *)(a1 + 8);
      else
        v11 = v10;
      if (*(char *)(a2 - 1) < 0)
      {
        v13 = *(const void **)(a2 - 24);
        v12 = *(_QWORD *)(a2 - 16);
      }
      else
      {
        v12 = *(unsigned __int8 *)(a2 - 1);
        v13 = (const void *)(a2 - 24);
      }
      if (v11 >= v12)
        v43 = v12;
      else
        v43 = v11;
      v44 = memcmp(v13, v9, v43);
      v45 = v12 < v11;
      if (v44)
        v45 = v44 < 0;
      if (v45)
      {
        v46 = *(_QWORD *)(a1 + 16);
        v47 = *(_OWORD *)a1;
        v48 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(_QWORD *)(a1 + 16) = v48;
        *v6 = v47;
        *(_QWORD *)(a2 - 8) = v46;
      }
      return 1;
    case 3uLL:
      sub_22E63C85C((const void **)a1, (_QWORD *)(a1 + 24), (const void **)(a2 - 24));
      return 1;
    case 4uLL:
      sub_22E63D3CC(a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), (__int128 *)(a2 - 24));
      return 1;
    case 5uLL:
      sub_22E63D588(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      v14 = (const void **)(a1 + 48);
      sub_22E63C85C((const void **)a1, (_QWORD *)(a1 + 24), (const void **)(a1 + 48));
      v15 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    v18 = *((_BYTE *)v14 + 23);
    v19 = v18 < 0;
    if (v18 >= 0)
      v20 = v14;
    else
      v20 = *v14;
    v21 = v18 & 0x7F;
    if (v19)
      v22 = (size_t)v14[1];
    else
      v22 = v21;
    if (*(char *)(v15 + 23) < 0)
    {
      v24 = *(const void **)v15;
      v23 = *(_QWORD *)(v15 + 8);
    }
    else
    {
      v23 = *(unsigned __int8 *)(v15 + 23);
      v24 = (const void *)v15;
    }
    if (v22 >= v23)
      v25 = v23;
    else
      v25 = v22;
    v26 = memcmp(v24, v20, v25);
    v27 = v23 < v22;
    if (v26)
      v27 = v26 < 0;
    if (v27)
    {
      v49 = *(_OWORD *)v15;
      v50 = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(v15 + 8) = 0;
      *(_QWORD *)(v15 + 16) = 0;
      *(_QWORD *)v15 = 0;
      v28 = v16;
      while (1)
      {
        v29 = a1 + v28;
        *(_OWORD *)(v29 + 72) = *(_OWORD *)(a1 + v28 + 48);
        *(_QWORD *)(v29 + 88) = *(_QWORD *)(a1 + v28 + 64);
        *(_BYTE *)(v29 + 71) = 0;
        *(_BYTE *)(v29 + 48) = 0;
        if (v28 == -48)
          break;
        v32 = *(const void **)(v29 + 24);
        v30 = v29 + 24;
        v31 = v32;
        v33 = *(_BYTE *)(v30 + 23);
        if (v33 >= 0)
          v34 = (const void *)v30;
        else
          v34 = v31;
        v35 = *(_QWORD *)(v30 + 8);
        if (v33 >= 0)
          v36 = v33 & 0x7F;
        else
          v36 = v35;
        if (v50 >= 0)
          v37 = HIBYTE(v50) & 0x7F;
        else
          v37 = *((_QWORD *)&v49 + 1);
        if (v50 >= 0)
          v38 = &v49;
        else
          v38 = (__int128 *)v49;
        if (v36 >= v37)
          v39 = v37;
        else
          v39 = v36;
        v40 = memcmp(v38, v34, v39);
        v41 = v37 < v36;
        if (v40)
          v41 = v40 < 0;
        v28 -= 24;
        if (!v41)
        {
          v42 = a1 + v28 + 72;
          goto LABEL_49;
        }
      }
      v42 = a1;
LABEL_49:
      *(_OWORD *)v42 = v49;
      *(_QWORD *)(v42 + 16) = v50;
      if (++v17 == 8)
        return v15 + 24 == a2;
    }
    v14 = (const void **)v15;
    v16 += 24;
    v15 += 24;
    if (v15 == a2)
      return 1;
  }
}

__n128 sub_22E63D3CC(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  char v8;
  BOOL v9;
  const void *v10;
  size_t v11;
  size_t v12;
  size_t v13;
  const void *v14;
  size_t v15;
  int v16;
  __n128 result;
  _BOOL4 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  BOOL v23;
  const void *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  const void *v28;
  size_t v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  BOOL v36;
  const void *v37;
  size_t v38;
  size_t v39;
  size_t v40;
  const void *v41;
  size_t v42;
  int v43;
  _BOOL4 v44;
  uint64_t v45;
  uint64_t v46;

  sub_22E63C85C((const void **)a1, a2, (const void **)a3);
  v8 = *((_BYTE *)a3 + 23);
  v9 = v8 < 0;
  if (v8 >= 0)
    v10 = a3;
  else
    v10 = *(const void **)a3;
  v11 = v8 & 0x7F;
  if (v9)
    v12 = *((_QWORD *)a3 + 1);
  else
    v12 = v11;
  if (*((char *)a4 + 23) < 0)
  {
    v14 = *(const void **)a4;
    v13 = *((_QWORD *)a4 + 1);
  }
  else
  {
    v13 = *((unsigned __int8 *)a4 + 23);
    v14 = a4;
  }
  if (v12 >= v13)
    v15 = v13;
  else
    v15 = v12;
  v16 = memcmp(v14, v10, v15);
  v18 = v13 < v12;
  if (v16)
    v18 = v16 < 0;
  if (v18)
  {
    v19 = *((_QWORD *)a3 + 2);
    v20 = *a3;
    v21 = *((_QWORD *)a4 + 2);
    *a3 = *a4;
    *((_QWORD *)a3 + 2) = v21;
    *a4 = v20;
    *((_QWORD *)a4 + 2) = v19;
    v22 = *((_BYTE *)a2 + 23);
    v23 = v22 < 0;
    if (v22 >= 0)
      v24 = a2;
    else
      v24 = *(const void **)a2;
    v25 = v22 & 0x7F;
    if (v23)
      v26 = *((_QWORD *)a2 + 1);
    else
      v26 = v25;
    if (*((char *)a3 + 23) < 0)
    {
      v28 = *(const void **)a3;
      v27 = *((_QWORD *)a3 + 1);
    }
    else
    {
      v27 = *((unsigned __int8 *)a3 + 23);
      v28 = a3;
    }
    if (v26 >= v27)
      v29 = v27;
    else
      v29 = v26;
    v30 = memcmp(v28, v24, v29);
    v31 = v27 < v26;
    if (v30)
      v31 = v30 < 0;
    if (v31)
    {
      v32 = *((_QWORD *)a2 + 2);
      v33 = *a2;
      v34 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v34;
      *a3 = v33;
      *((_QWORD *)a3 + 2) = v32;
      v35 = *(_BYTE *)(a1 + 23);
      v36 = v35 < 0;
      if (v35 >= 0)
        v37 = (const void *)a1;
      else
        v37 = *(const void **)a1;
      v38 = v35 & 0x7F;
      if (v36)
        v39 = *(_QWORD *)(a1 + 8);
      else
        v39 = v38;
      if (*((char *)a2 + 23) < 0)
      {
        v41 = *(const void **)a2;
        v40 = *((_QWORD *)a2 + 1);
      }
      else
      {
        v40 = *((unsigned __int8 *)a2 + 23);
        v41 = a2;
      }
      if (v39 >= v40)
        v42 = v40;
      else
        v42 = v39;
      v43 = memcmp(v41, v37, v42);
      v44 = v40 < v39;
      if (v43)
        v44 = v43 < 0;
      if (v44)
      {
        v45 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v46 = *((_QWORD *)a2 + 2);
        *(_OWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 16) = v46;
        *a2 = (__int128)result;
        *((_QWORD *)a2 + 2) = v45;
      }
    }
  }
  return result;
}

__n128 sub_22E63D588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v10;
  BOOL v11;
  const void *v12;
  size_t v13;
  size_t v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  __n128 result;
  _BOOL4 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  BOOL v25;
  const void *v26;
  size_t v27;
  size_t v28;
  size_t v29;
  const void *v30;
  size_t v31;
  int v32;
  _BOOL4 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  BOOL v38;
  const void *v39;
  size_t v40;
  size_t v41;
  size_t v42;
  const void *v43;
  size_t v44;
  int v45;
  _BOOL4 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  char v50;
  BOOL v51;
  const void *v52;
  size_t v53;
  size_t v54;
  size_t v55;
  const void *v56;
  size_t v57;
  int v58;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t v61;

  sub_22E63D3CC(a1, (__int128 *)a2, (__int128 *)a3, (__int128 *)a4);
  v10 = *(_BYTE *)(a4 + 23);
  v11 = v10 < 0;
  if (v10 >= 0)
    v12 = (const void *)a4;
  else
    v12 = *(const void **)a4;
  v13 = v10 & 0x7F;
  if (v11)
    v14 = *(_QWORD *)(a4 + 8);
  else
    v14 = v13;
  if (*(char *)(a5 + 23) < 0)
  {
    v16 = *(const void **)a5;
    v15 = *(_QWORD *)(a5 + 8);
  }
  else
  {
    v15 = *(unsigned __int8 *)(a5 + 23);
    v16 = (const void *)a5;
  }
  if (v14 >= v15)
    v17 = v15;
  else
    v17 = v14;
  v18 = memcmp(v16, v12, v17);
  v20 = v15 < v14;
  if (v18)
    v20 = v18 < 0;
  if (v20)
  {
    v21 = *(_QWORD *)(a4 + 16);
    v22 = *(_OWORD *)a4;
    v23 = *(_QWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)(a4 + 16) = v23;
    *(_OWORD *)a5 = v22;
    *(_QWORD *)(a5 + 16) = v21;
    v24 = *(_BYTE *)(a3 + 23);
    v25 = v24 < 0;
    if (v24 >= 0)
      v26 = (const void *)a3;
    else
      v26 = *(const void **)a3;
    v27 = v24 & 0x7F;
    if (v25)
      v28 = *(_QWORD *)(a3 + 8);
    else
      v28 = v27;
    if (*(char *)(a4 + 23) < 0)
    {
      v30 = *(const void **)a4;
      v29 = *(_QWORD *)(a4 + 8);
    }
    else
    {
      v29 = *(unsigned __int8 *)(a4 + 23);
      v30 = (const void *)a4;
    }
    if (v28 >= v29)
      v31 = v29;
    else
      v31 = v28;
    v32 = memcmp(v30, v26, v31);
    v33 = v29 < v28;
    if (v32)
      v33 = v32 < 0;
    if (v33)
    {
      v34 = *(_QWORD *)(a3 + 16);
      v35 = *(_OWORD *)a3;
      v36 = *(_QWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)(a3 + 16) = v36;
      *(_OWORD *)a4 = v35;
      *(_QWORD *)(a4 + 16) = v34;
      v37 = *(_BYTE *)(a2 + 23);
      v38 = v37 < 0;
      if (v37 >= 0)
        v39 = (const void *)a2;
      else
        v39 = *(const void **)a2;
      v40 = v37 & 0x7F;
      if (v38)
        v41 = *(_QWORD *)(a2 + 8);
      else
        v41 = v40;
      if (*(char *)(a3 + 23) < 0)
      {
        v43 = *(const void **)a3;
        v42 = *(_QWORD *)(a3 + 8);
      }
      else
      {
        v42 = *(unsigned __int8 *)(a3 + 23);
        v43 = (const void *)a3;
      }
      if (v41 >= v42)
        v44 = v42;
      else
        v44 = v41;
      v45 = memcmp(v43, v39, v44);
      v46 = v42 < v41;
      if (v45)
        v46 = v45 < 0;
      if (v46)
      {
        v47 = *(_QWORD *)(a2 + 16);
        v48 = *(_OWORD *)a2;
        v49 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = v49;
        *(_OWORD *)a3 = v48;
        *(_QWORD *)(a3 + 16) = v47;
        v50 = *(_BYTE *)(a1 + 23);
        v51 = v50 < 0;
        if (v50 >= 0)
          v52 = (const void *)a1;
        else
          v52 = *(const void **)a1;
        v53 = v50 & 0x7F;
        if (v51)
          v54 = *(_QWORD *)(a1 + 8);
        else
          v54 = v53;
        if (*(char *)(a2 + 23) < 0)
        {
          v56 = *(const void **)a2;
          v55 = *(_QWORD *)(a2 + 8);
        }
        else
        {
          v55 = *(unsigned __int8 *)(a2 + 23);
          v56 = (const void *)a2;
        }
        if (v54 >= v55)
          v57 = v55;
        else
          v57 = v54;
        v58 = memcmp(v56, v52, v57);
        v59 = v55 < v54;
        if (v58)
          v59 = v58 < 0;
        if (v59)
        {
          v60 = *(_QWORD *)(a1 + 16);
          result = *(__n128 *)a1;
          v61 = *(_QWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v61;
          *(__n128 *)a2 = result;
          *(_QWORD *)(a2 + 16) = v60;
        }
      }
    }
  }
  return result;
}

__int128 *sub_22E63D7CC(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  __int128 *v13;
  __int128 *v14;
  char v15;
  BOOL v16;
  const void *v17;
  size_t v18;
  size_t v19;
  size_t v20;
  __int128 *v21;
  size_t v22;
  int v23;
  _BOOL4 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 *v28;
  const void *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  __int128 v34;
  _BYTE v37[15];

  if ((__int128 *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__n128 *)(a1 + 24 * v10);
      do
      {
        sub_22E63DA3C(a1, a4, v9, v12);
        v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *(_BYTE *)(a1 + 23);
        v16 = v15 < 0;
        if (v15 >= 0)
          v17 = (const void *)a1;
        else
          v17 = *(const void **)a1;
        v18 = v15 & 0x7F;
        if (v16)
          v19 = *(_QWORD *)(a1 + 8);
        else
          v19 = v18;
        if (*((char *)v14 + 23) < 0)
        {
          v21 = *(__int128 **)v14;
          v20 = *((_QWORD *)v14 + 1);
        }
        else
        {
          v20 = *((unsigned __int8 *)v14 + 23);
          v21 = v14;
        }
        if (v19 >= v20)
          v22 = v20;
        else
          v22 = v19;
        v23 = memcmp(v21, v17, v22);
        v24 = v20 < v19;
        if (v23)
          v24 = v23 < 0;
        if (v24)
        {
          v25 = *((_QWORD *)v14 + 2);
          v26 = *v14;
          v27 = *(_QWORD *)(a1 + 16);
          *v14 = *(_OWORD *)a1;
          *((_QWORD *)v14 + 2) = v27;
          *(_OWORD *)a1 = v26;
          *(_QWORD *)(a1 + 16) = v25;
          sub_22E63DA3C(a1, a4, v9, (__n128 *)a1);
        }
        v14 = (__int128 *)((char *)v14 + 24);
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 25)
    {
      v28 = (__int128 *)((char *)a2 - 24);
      do
      {
        v29 = *(const void **)a1;
        *(_QWORD *)v37 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)&v37[7] = *(_QWORD *)(a1 + 15);
        v30 = *(_BYTE *)(a1 + 23);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v31 = sub_22E63DCD8(a1, a4, v9);
        v32 = v31;
        v33 = *(char *)(v31 + 23);
        if (v28 == (__int128 *)v31)
        {
          if (v33 < 0)
            operator delete(*(void **)v31);
          *(_QWORD *)v32 = v29;
          *(_QWORD *)(v32 + 8) = *(_QWORD *)v37;
          *(_QWORD *)(v32 + 15) = *(_QWORD *)&v37[7];
          *(_BYTE *)(v32 + 23) = v30;
        }
        else
        {
          if (v33 < 0)
            operator delete(*(void **)v31);
          v34 = *v28;
          *(_QWORD *)(v32 + 16) = *((_QWORD *)v28 + 2);
          *(_OWORD *)v32 = v34;
          *(_QWORD *)v28 = v29;
          *((_QWORD *)v28 + 1) = *(_QWORD *)v37;
          *(_QWORD *)((char *)v28 + 15) = *(_QWORD *)&v37[7];
          *((_BYTE *)v28 + 23) = v30;
          sub_22E63DDF4(a1, v32 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v32 + 24 - a1) >> 3));
        }
        v28 = (__int128 *)((char *)v28 - 24);
      }
      while (v9-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 sub_22E63DA3C(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  uint64_t v9;
  uint64_t v11;
  __n128 *v12;
  uint64_t v13;
  signed __int8 v14;
  int v15;
  __int8 *v16;
  size_t v17;
  size_t v18;
  size_t v19;
  const void *v20;
  size_t v21;
  int v22;
  _BOOL4 v23;
  signed __int8 v24;
  BOOL v25;
  __n128 *v26;
  size_t v27;
  size_t v28;
  size_t v29;
  __n128 *v30;
  size_t v31;
  int v32;
  __n128 result;
  BOOL v34;
  __n128 *v35;
  __n128 v36;
  uint64_t v37;
  signed __int8 v38;
  int v39;
  __int8 *v40;
  size_t v41;
  size_t v42;
  size_t v43;
  const void *v44;
  size_t v45;
  int v46;
  _BOOL4 v47;
  __n128 *v48;
  unint64_t v49;
  unint64_t v50;
  __n128 *v51;
  size_t v52;
  int v53;
  _BOOL4 v54;
  __n128 v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v57 = v4;
    v58 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v11 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v12 = (__n128 *)(a1 + 24 * v11);
      v13 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v13 < a3)
      {
        v14 = v12[2].n128_i8[15];
        v15 = v14;
        if (v14 >= 0)
          v16 = &v12[1].n128_i8[8];
        else
          v16 = (__int8 *)v12[1].n128_u64[1];
        v17 = v14 & 0x7F;
        if (v15 >= 0)
          v18 = v17;
        else
          v18 = v12[2].n128_u64[0];
        if (v12[1].n128_i8[7] < 0)
        {
          v20 = (const void *)v12->n128_u64[0];
          v19 = v12->n128_u64[1];
        }
        else
        {
          v19 = v12[1].n128_u8[7];
          v20 = (const void *)(a1 + 24 * v11);
        }
        if (v18 >= v19)
          v21 = v19;
        else
          v21 = v18;
        v22 = memcmp(v20, v16, v21);
        v23 = v19 < v18;
        if (v22)
          v23 = v22 < 0;
        if (v23)
        {
          v12 = (__n128 *)((char *)v12 + 24);
          v11 = v13;
        }
      }
      v24 = v7[1].n128_i8[7];
      v25 = v24 < 0;
      if (v24 >= 0)
        v26 = v7;
      else
        v26 = (__n128 *)v7->n128_u64[0];
      v27 = v24 & 0x7F;
      if (v25)
        v28 = v7->n128_u64[1];
      else
        v28 = v27;
      if (v12[1].n128_i8[7] < 0)
      {
        v30 = (__n128 *)v12->n128_u64[0];
        v29 = v12->n128_u64[1];
      }
      else
      {
        v29 = v12[1].n128_u8[7];
        v30 = v12;
      }
      if (v28 >= v29)
        v31 = v29;
      else
        v31 = v28;
      v32 = memcmp(v30, v26, v31);
      v34 = v29 < v28;
      if (v32)
        v34 = v32 < 0;
      if (!v34)
      {
        v55 = *v7;
        v56 = v7[1].n128_i64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        do
        {
          v35 = v12;
          v36 = *v12;
          v7[1].n128_u64[0] = v12[1].n128_u64[0];
          *v7 = v36;
          v12[1].n128_u8[7] = 0;
          v12->n128_u8[0] = 0;
          if (v9 < v11)
            break;
          v37 = (2 * v11) | 1;
          v12 = (__n128 *)(a1 + 24 * v37);
          v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            v11 = v37;
          }
          else
          {
            v38 = v12[2].n128_i8[15];
            v39 = v38;
            if (v38 >= 0)
              v40 = &v12[1].n128_i8[8];
            else
              v40 = (__int8 *)v12[1].n128_u64[1];
            v41 = v38 & 0x7F;
            if (v39 >= 0)
              v42 = v41;
            else
              v42 = v12[2].n128_u64[0];
            if (v12[1].n128_i8[7] < 0)
            {
              v44 = (const void *)v12->n128_u64[0];
              v43 = v12->n128_u64[1];
            }
            else
            {
              v43 = v12[1].n128_u8[7];
              v44 = (const void *)(a1 + 24 * v37);
            }
            if (v42 >= v43)
              v45 = v43;
            else
              v45 = v42;
            v46 = memcmp(v44, v40, v45);
            v47 = v43 < v42;
            if (v46)
              v47 = v46 < 0;
            if (v47)
              v12 = (__n128 *)((char *)v12 + 24);
            else
              v11 = v37;
          }
          v48 = v56 >= 0 ? &v55 : (__n128 *)v55.n128_u64[0];
          v49 = v56 >= 0 ? HIBYTE(v56) & 0x7F : v55.n128_u64[1];
          if (v12[1].n128_i8[7] < 0)
          {
            v51 = (__n128 *)v12->n128_u64[0];
            v50 = v12->n128_u64[1];
          }
          else
          {
            v50 = v12[1].n128_u8[7];
            v51 = v12;
          }
          v52 = v49 >= v50 ? v50 : v49;
          v53 = memcmp(v51, v48, v52);
          v54 = v50 < v49;
          if (v53)
            v54 = v53 < 0;
          v7 = v35;
        }
        while (!v54);
        result = v55;
        v35[1].n128_u64[0] = v56;
        *v35 = result;
      }
    }
  }
  return result;
}

uint64_t sub_22E63DCD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  const void *v13;
  size_t v14;
  size_t v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  __int128 v21;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = a1 + 24 * v5 + 24;
    v9 = 2 * v5;
    v5 = (2 * v5) | 1;
    v10 = v9 + 2;
    if (v9 + 2 < a3)
    {
      v11 = *(_BYTE *)(v8 + 47);
      v12 = v11;
      if (v11 >= 0)
        v13 = (const void *)(v8 + 24);
      else
        v13 = *(const void **)(v8 + 24);
      v14 = v11 & 0x7F;
      if (v12 >= 0)
        v15 = v14;
      else
        v15 = *(_QWORD *)(v8 + 32);
      if (*(char *)(v8 + 23) < 0)
      {
        v17 = *(const void **)v8;
        v16 = *(_QWORD *)(v8 + 8);
      }
      else
      {
        v16 = *(unsigned __int8 *)(v8 + 23);
        v17 = (const void *)v8;
      }
      if (v15 >= v16)
        v18 = v16;
      else
        v18 = v15;
      v19 = memcmp(v17, v13, v18);
      v20 = v16 < v15;
      if (v19)
        v20 = v19 < 0;
      if (v20)
      {
        v8 += 24;
        v5 = v10;
      }
    }
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v21 = *(_OWORD *)v8;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 + 16);
    *(_OWORD *)a1 = v21;
    *(_BYTE *)(v8 + 23) = 0;
    *(_BYTE *)v8 = 0;
    a1 = v8;
  }
  while (v5 <= v7);
  return v8;
}

double sub_22E63DDF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  int v12;
  const void *v13;
  size_t v14;
  size_t v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  double result;
  _BOOL4 v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  __int128 *v25;
  uint64_t v26;
  unint64_t v27;
  __int128 *v28;
  __int128 v29;
  unint64_t v30;
  const void *v31;
  size_t v32;
  int v33;
  BOOL v34;
  __int128 v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v37 = v4;
    v38 = v5;
    v8 = v6 >> 1;
    v9 = (__int128 *)(a1 + 24 * (v6 >> 1));
    v10 = (__int128 *)(a2 - 24);
    v11 = *(_BYTE *)(a2 - 1);
    v12 = v11;
    if (v11 >= 0)
      v13 = (const void *)(a2 - 24);
    else
      v13 = *(const void **)(a2 - 24);
    v14 = v11 & 0x7F;
    if (v12 >= 0)
      v15 = v14;
    else
      v15 = *((_QWORD *)v10 + 1);
    if (*((char *)v9 + 23) < 0)
    {
      v17 = *(const void **)v9;
      v16 = *((_QWORD *)v9 + 1);
    }
    else
    {
      v16 = *((unsigned __int8 *)v9 + 23);
      v17 = (const void *)(a1 + 24 * (v6 >> 1));
    }
    if (v15 >= v16)
      v18 = v16;
    else
      v18 = v15;
    v19 = memcmp(v17, v13, v18);
    v21 = v16 < v15;
    if (v19)
      v21 = v19 < 0;
    if (v21)
    {
      v36 = *((_QWORD *)v10 + 2);
      v35 = *v10;
      v22 = HIBYTE(v36);
      v23 = v36 < 0;
      v24 = *((_QWORD *)&v35 + 1);
      if (v36 >= 0)
        v25 = &v35;
      else
        v25 = (__int128 *)v35;
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = 0;
      *(_QWORD *)v10 = 0;
      v26 = v22 & 0x7F;
      if (v23)
        v27 = v24;
      else
        v27 = v26;
      do
      {
        v28 = v9;
        v29 = *v9;
        *((_QWORD *)v10 + 2) = *((_QWORD *)v9 + 2);
        *v10 = v29;
        *((_BYTE *)v9 + 23) = 0;
        *(_BYTE *)v9 = 0;
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (__int128 *)(a1 + 24 * v8);
        if (*((char *)v9 + 23) < 0)
        {
          v31 = *(const void **)v9;
          v30 = *((_QWORD *)v9 + 1);
        }
        else
        {
          v30 = *((unsigned __int8 *)v9 + 23);
          v31 = (const void *)(a1 + 24 * v8);
        }
        v32 = v27 >= v30 ? v30 : v27;
        v33 = memcmp(v31, v25, v32);
        v34 = v30 < v27;
        if (v33)
          v34 = v33 < 0;
        v10 = v28;
      }
      while (v34);
      result = *(double *)&v35;
      *v28 = v35;
      *((_QWORD *)v28 + 2) = v36;
    }
  }
  return result;
}

uint64_t sub_22E63DF64(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  llvm::ValueHandleBase *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[5];

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  v12[4] = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_22E3B3F8C();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (llvm::ValueHandleBase *)&v7[24 * v2];
  v12[0] = v7;
  v12[1] = v8;
  v12[3] = &v7[24 * v6];
  v9 = *a2;
  *(_QWORD *)v8 = 6;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = v9;
  if (v9 != -8192 && v9 != -4096 && v9)
    llvm::ValueHandleBase::AddToUseList(v8);
  v12[2] = (char *)v8 + 24;
  sub_22E63E080(a1, v12);
  v10 = a1[1];
  sub_22E63E144((uint64_t)v12);
  return v10;
}

uint64_t *sub_22E63E080(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  llvm::ValueHandleBase *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = (_QWORD *)a2[1];
  if (v4 != *result)
  {
    v7 = (llvm::ValueHandleBase *)(v6 - 3);
    do
    {
      *(_QWORD *)v7 = 6;
      *((_QWORD *)v7 + 1) = 0;
      v8 = *(_QWORD *)(v4 - 8);
      *((_QWORD *)v7 + 2) = v8;
      if (v8 != -8192 && v8 != -4096 && v8 != 0)
        result = (uint64_t *)llvm::ValueHandleBase::AddToExistingUseList(v7, (llvm::ValueHandleBase **)(*(_QWORD *)(v4 - 24) & 0xFFFFFFFFFFFFFFF8));
      v4 -= 24;
      v7 = (llvm::ValueHandleBase *)((char *)v7 - 24);
    }
    while (v4 != v5);
    v6 = (_QWORD *)((char *)v7 + 24);
  }
  a2[1] = v6;
  v10 = *v3;
  *v3 = (uint64_t)v6;
  a2[1] = v10;
  v11 = v3[1];
  v3[1] = a2[2];
  a2[2] = v11;
  v12 = v3[2];
  v3[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t sub_22E63E144(uint64_t a1)
{
  llvm::ValueHandleBase *v2;
  llvm::ValueHandleBase *v3;
  uint64_t v4;

  v3 = *(llvm::ValueHandleBase **)(a1 + 8);
  v2 = *(llvm::ValueHandleBase **)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *((_QWORD *)v2 - 1);
    v2 = (llvm::ValueHandleBase *)((char *)v2 - 24);
    *(_QWORD *)(a1 + 16) = v2;
    if (v4 != -8192 && v4 != -4096 && v4 != 0)
    {
      llvm::ValueHandleBase::RemoveFromUseList(v2);
      v2 = *(llvm::ValueHandleBase **)(a1 + 16);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_22E63E1A8(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](8 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F29D3C0(a1, v4, (_QWORD *)v4 + v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E63E268(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(uint64_t **)a1;
  v2 = *(unsigned int *)(a1 + 8);
  i = *(uint64_t **)a1;
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    for (i = *(uint64_t **)a1; *(_WORD *)(*i + 32) != 362; ++i)
    {
      v4 -= 8;
      if (!v4)
        return 0;
    }
  }
  if (i == &v1[v2])
    return 0;
  do
  {
    v6 = *v1++;
    result = v6;
  }
  while (*(_WORD *)(v6 + 32) != 362);
  return result;
}

_QWORD *sub_22E63E2C8(uint64_t *a1, _OWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22E63E32C(a1, (uint64_t)a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22E63E42C((uint64_t)a1, (uint64_t)a2, (uint64_t)a2, v7);
    *(_OWORD *)v5 = *a2;
    v5[2] = 0;
    v5[3] = 0;
  }
  return v5;
}

uint64_t sub_22E63E32C(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  uint64_t v8;
  unsigned int v9;
  const void *v10;
  size_t v11;
  int i;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  BOOL v16;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue();
    v8 = 0;
    v9 = v4 - 1;
    v10 = *(const void **)a2;
    v11 = *(_QWORD *)(a2 + 8);
    for (i = 1; ; ++i)
    {
      v13 = HashValue & v9;
      v14 = v6 + 32 * v13;
      v15 = *(const void **)v14;
      if (*(_QWORD *)v14 == -1)
      {
        if (v10 == (const void *)-1)
          goto LABEL_16;
      }
      else if (v15 == (const void *)-2)
      {
        if (v10 == (const void *)-2)
          goto LABEL_16;
      }
      else if (v11 == *(_QWORD *)(v14 + 8) && (!v11 || !memcmp(v10, *(const void **)v14, v11)))
      {
LABEL_16:
        result = 1;
        goto LABEL_17;
      }
      if (v15 == (const void *)-1)
        break;
      if (v8)
        v16 = 0;
      else
        v16 = v15 == (const void *)-2;
      if (v16)
        v8 = v6 + 32 * v13;
      HashValue = i + v13;
    }
    result = 0;
    if (v8)
      v14 = v8;
  }
  else
  {
    v14 = 0;
    result = 0;
  }
LABEL_17:
  *a3 = v14;
  return result;
}

_QWORD *sub_22E63E42C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E63E4DC(a1, v7);
  v9 = 0;
  sub_22E63E32C((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *sub_22E63E4DC(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  llvm *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_OWORD *)MEMORY[0x23489D23C](32 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = xmmword_22F4572A0;
        result += 2;
        v11 -= 32;
      }
      while (v11);
    }
    v12 = (void *)(32 * v3);
    if ((_DWORD)v3)
    {
      v13 = 32 * v3;
      v14 = v4;
      do
      {
        if (*(_QWORD *)v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v18 = 0;
          sub_22E63E32C((uint64_t *)a1, (uint64_t)v14, &v18);
          v15 = v18;
          *v18 = *(_OWORD *)v14;
          v15[1] = *((_OWORD *)v14 + 1);
          ++*(_DWORD *)(a1 + 8);
        }
        v14 = (llvm *)((char *)v14 + 32);
        v13 -= 32;
      }
      while (v13);
    }
    return (_OWORD *)llvm::deallocate_buffer(v4, v12);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v16 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v16)
    {
      v17 = 32 * v16;
      do
      {
        *result = xmmword_22F4572A0;
        result += 2;
        v17 -= 32;
      }
      while (v17);
    }
  }
  return result;
}

uint64_t sub_22E63E624(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  unsigned int v15;
  char **v16;
  char **v17;
  const char **v18;
  const char *v19;
  size_t v20;
  size_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;

  result = sub_22EFFA604(*(unsigned __int8 **)(a2 + *(unsigned __int8 *)(a2 + 3)));
  if (result)
  {
    v4 = result;
    v5 = *(_DWORD *)(result + 28);
    if ((v5 & 0x7Eu) - 52 > 5)
      return 0;
    if ((v5 & 0x100) != 0)
    {
      sub_22EFC8E88(result);
      v7 = *(uint64_t **)v6;
      v8 = *(unsigned int *)(v6 + 8);
      v9 = *(uint64_t **)v6;
      if ((_DWORD)v8)
      {
        v10 = 8 * v8;
        v9 = *(uint64_t **)v6;
        while (*(_WORD *)(*v9 + 32) != 109)
        {
          ++v9;
          v10 -= 8;
          if (!v10)
            goto LABEL_14;
        }
      }
      if (v9 != &v7[v8])
      {
        do
        {
          v12 = *v7++;
          v11 = v12;
        }
        while (*(_WORD *)(v12 + 32) != 109);
        v13 = *(_QWORD *)(a1 + 8);
        v14 = *(unsigned int *)(v11 + 36);
        if (v13 == v14 && (!(_DWORD)v14 || !memcmp(*(const void **)a1, *(const void **)(v11 + 40), v13)))
          return 1;
      }
    }
LABEL_14:
    result = sub_22EFC01DC(v4, 0);
    if (!(_DWORD)result)
      return result;
    v15 = result;
    if (result < 0x7E8)
    {
      v16 = &off_24FAC8C40;
      v17 = &(&off_24FAC8C40)[6 * result];
LABEL_17:
      result = (uint64_t)strchr(v17[2], 70);
      if (!result)
        return result;
      v18 = (const char **)&v16[6 * v15];
LABEL_19:
      v19 = *v18;
      if (!*v18)
        return 0;
      v20 = strlen(*v18);
      if (v20 < 0xA)
        return 0;
      if (*(_QWORD *)v19 != 0x69746C6975625F5FLL || *((_WORD *)v19 + 4) != 24430)
        return 0;
      v22 = *(_QWORD *)(a1 + 8);
      return v22 == v20 - 10 && (v20 < 0xB || !memcmp(*(const void **)a1, v19 + 10, v22));
    }
    v26 = result - 2024;
    v23 = *(uint64_t **)(a1 + 16);
    v24 = v23[1];
    if (v24 + 2024 <= (unint64_t)result)
    {
      v15 = result - v24 - 2024;
      v16 = (char **)v23[2];
      v17 = &v16[6 * v15];
      goto LABEL_17;
    }
    v25 = *v23;
    result = (uint64_t)strchr(*(char **)(*v23 + 48 * v26 + 16), 70);
    if (result)
    {
      v18 = (const char **)(v25 + 48 * v26);
      goto LABEL_19;
    }
  }
  return result;
}

uint64_t sub_22E63E810(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  _QWORD *v8;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  sub_22F0D492C(a2);
  v10 = v12;
  v3 = v14;
  v11 = v13;
  v4 = v15;
  v6 = *((_QWORD *)&v12 + 1);
  v5 = (uint64_t *)v12;
  if ((_QWORD)v12 == v14 && *((_QWORD *)&v12 + 1) == v15)
    return 0;
  while (1)
  {
    v8 = v5;
    if ((v6 & 3) != 0)
    {
      if ((v6 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        v8 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFCLL) + 40);
      else
        v8 = (_QWORD *)sub_22F3AC1A8(*v5);
    }
    if (*v8 && (sub_22E631674(a1) & 1) != 0)
      break;
    if ((v6 & 3) != 0)
    {
      if (v6 >= 4)
        sub_22F0D8720((uint64_t)&v10);
      else
        sub_22F3F2FE0((uint64_t)&v10, 1);
    }
    else
    {
      *(_QWORD *)&v10 = v5 + 1;
    }
    v6 = *((_QWORD *)&v10 + 1);
    v5 = (uint64_t *)v10;
    if (v10 == __PAIR128__(v4, v3))
      return 0;
  }
  return 1;
}

uint64_t sub_22E63E8FC(_BYTE *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t *v30;
  _BOOL4 v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22E64F91C((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22E63F344(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_DWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 152);
    v45 = *(_QWORD *)(a2 + 40);
    v46 = v10;
    v47 = v11;
    result = sub_22E63F3CC(a1, &v45);
    if ((_DWORD)result)
    {
      v12 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(a2 + 144) & 6) == 4 && v12 != 0 && (*(_BYTE *)(v12 + 16) & 6) != 0)
      {
        v14 = *(_QWORD *)(v12 + 32);
        if (v14)
        {
          v15 = *(unsigned int *)(v14 + 8);
          if ((_DWORD)v15)
          {
            v16 = v14 + 16;
            while ((sub_22E64FFF0((uint64_t)a1, v16) & 1) != 0)
            {
              v16 += 32;
              if (!--v15)
                goto LABEL_19;
            }
            return 0;
          }
        }
      }
LABEL_19:
      v17 = *(_QWORD *)(a2 + 56);
      v18 = (unint64_t *)(v17 & 0xFFFFFFFFFFFFFFF8);
      if ((v17 & 4) != 0)
        v18 = (unint64_t *)v18[4];
      if (v18)
      {
        if ((sub_22E63F484(a1, *v18, (uint64_t)(v18 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        v19 = *(unint64_t **)(a2 + 120);
        v20 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (v20)
          v21 = *(_BYTE *)(v20 + 16) == 26;
        else
          v21 = 0;
        if (v21
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
          && (v20 = sub_22F10CF48(v20)) != 0)
        {
          v22 = *(_QWORD *)(v20 + 16);
          if ((v22 & 0x3FFFC000000000) != 0)
          {
            v23 = 8 * (unsigned __int16)(v22 >> 38);
            while ((sub_22E63FBEC(a1, *v19) & 1) != 0)
            {
              ++v19;
              v23 -= 8;
              if (!v23)
                goto LABEL_33;
            }
            return 0;
          }
        }
      }
LABEL_33:
      v24 = *(_QWORD *)(a2 + 56);
      if ((v24 & 4) == 0
        || (v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 40)) == 0
        || (result = sub_22E643AD8((uint64_t)a1, v25, 0), (_DWORD)result))
      {
        if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x37)
        {
          v26 = (uint64_t **)sub_22EFD7ED0(a2);
          v27 = sub_22EFD7ED0(a2) + 8 * ((*(_QWORD *)(a2 + 80) >> 40) & 0x1FFFFFLL);
          while (v26 != (uint64_t **)v27)
          {
            v28 = *v26;
            v29 = **v26;
            v30 = (unint64_t *)(v29 & 0xFFFFFFFFFFFFFFF8);
            if ((v29 & 6) == 0 && v30 != 0)
            {
              result = sub_22E63F484(a1, *v30, (uint64_t)(v30 + 1));
              if (!(_DWORD)result)
                return result;
            }
            if ((sub_22E643AD8((uint64_t)a1, v28[1], 0) & 1) == 0)
              return 0;
            ++v26;
          }
        }
        v32 = sub_22E49F868(a2);
        if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
          goto LABEL_73;
        v33 = *(_WORD *)(a2 + 80) & 0x7F;
        v34 = -40;
        if (v33 > 0x46)
        {
          if (v33 == 83)
            goto LABEL_63;
          if (v33 == 71)
          {
            v34 = -56;
            goto LABEL_63;
          }
          if (v33 != 81)
          {
LABEL_58:
            v35 = v33 - 52;
            v36 = v33 - 33 >= 5;
            v37 = -48;
            if (!v36)
              v37 = -64;
            if (v35 >= 6)
              v34 = v37;
            else
              v34 = -72;
          }
        }
        else
        {
          if (v33 > 0x18)
            goto LABEL_57;
          if (v33 == 16)
          {
LABEL_50:
            v34 = -48;
            goto LABEL_63;
          }
          if (((1 << v33) & 0x1066) == 0)
          {
            if (v33 == 24)
              goto LABEL_50;
LABEL_57:
            if (v33 == 70)
            {
              v34 = -64;
              goto LABEL_63;
            }
            goto LABEL_58;
          }
        }
LABEL_63:
        v38 = *(_QWORD *)(a2 + 72 + v34 + 16);
        v39 = (_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF8);
        if ((v38 & 4) != 0)
          v39 = (_QWORD *)*v39;
        if (v39)
        {
          v40 = v39[8];
          if (v40)
          {
            if (((*(unsigned __int16 *)(v40 + 8) | (*(unsigned __int8 *)(v40 + 10) << 16)) & 0x100000) != 0)
            {
              v41 = sub_22EFD462C((unint64_t)(v39 - 8));
              if (v41)
              {
                if ((*(_DWORD *)(v41 + 28) & 0x7F) != 0x1D || (v41 = *(_QWORD *)(v41 + 48)) != 0)
                {
                  if (v41 == a2
                    || (v42 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v41 + 32))(v41),
                        v42 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2)))
                  {
                    if (!v32)
                      return 1;
LABEL_74:
                    v43 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
                    result = sub_22E643AD8((uint64_t)a1, v43, 0);
                    if (!(_DWORD)result)
                      return result;
                    if ((*(_WORD *)(a2 + 80) & 0x80) != 0)
                      sub_22EFCC320(a2 + 72);
                    v44 = *(_QWORD *)(a2 + 88);
                    if (v44)
                    {
                      do
                      {
                        if ((*(_DWORD *)(v44 + 28) & 0x7E) == 0x2E)
                        {
                          result = sub_22E63FBEC(a1, v44);
                          if (!(_DWORD)result)
                            break;
                        }
                        result = 1;
                        v44 = *(_QWORD *)(v44 + 8) & 0xFFFFFFFFFFFFFFF8;
                      }
                      while (v44);
                      return result;
                    }
                    return 1;
                  }
                }
              }
            }
          }
        }
LABEL_73:
        if (!v32)
          return 1;
        goto LABEL_74;
      }
    }
  }
  return result;
}

uint64_t sub_22E63ED0C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!a2)
    return 1;
  if ((*(_WORD *)(a2 + 8) & 0x80) != 0)
    sub_22EFCC320(a2);
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 1;
  while (1)
  {
    if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 1 >= 2
      && ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 35 > 2
       || (v5 = *(_QWORD *)(v4 + 128)) == 0
       || ((*(unsigned __int16 *)(v5 + 8) | (*(unsigned __int8 *)(v5 + 10) << 16)) & 0x100000) == 0))
    {
      result = sub_22E63FBEC(a1, v4);
      if (!(_DWORD)result)
        break;
    }
    v4 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v4)
      return 1;
  }
  return result;
}

uint64_t sub_22E63EDA8(uint64_t a1, uint64_t a2)
{
  if (a2)
    __asm { BR              X10 }
  return 1;
}

void sub_22E63EE2C()
{
  uint64_t v0;
  uint64_t v1;

  if (sub_22E643AD8(v0, *(_QWORD *)(v1 + 40), 0))
    JUMPOUT(0x22E63EDE8);
  JUMPOUT(0x22E63EE1CLL);
}

void sub_22E63EE48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v2 = *(unsigned int *)(v1 + 48);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2;
    while ((sub_22E643AD8(v0, *v3, 0) & 1) != 0)
    {
      ++v3;
      v4 -= 8;
      if (!v4)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v5 = *(unsigned int *)(v1 + 64);
    if (!(_DWORD)v5)
      JUMPOUT(0x22E63EE18);
    v6 = *(uint64_t **)(v1 + 72);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22E643AD8(v0, v8, 0))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  JUMPOUT(0x22E63EE1CLL);
}

void sub_22E63EF80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E643AD8(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E63EE1CLL);
}

void sub_22E63EFB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E643AD8(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E63EE1CLL);
}

void sub_22E63EFF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E643AD8(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E63EE1CLL);
}

void sub_22E63F028()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22E643AD8(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22E63EE18);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E643AD8(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E63EE1CLL);
}

void sub_22E63F074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E643AD8(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E63EE1CLL);
}

void sub_22E63F0AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  if (sub_22E643AD8(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 56);
    if ((_DWORD)v2)
    {
      v3 = *(uint64_t **)(v1 + 64);
      v4 = 8 * v2;
      do
      {
        if ((sub_22E643AD8(v0, *v3, 0) & 1) == 0)
          JUMPOUT(0x22E63EF78);
        ++v3;
        v4 -= 8;
      }
      while (v4);
    }
    v5 = *(unsigned int *)(v1 + 72);
    if (!(_DWORD)v5)
      JUMPOUT(0x22E63EE18);
    v6 = *(uint64_t **)(v1 + 80);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22E643AD8(v0, v8, 0))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  JUMPOUT(0x22E63EE1CLL);
}

void sub_22E63F128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E643AD8(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E63EE1CLL);
}

void sub_22E63F160()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E643AD8(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E63EE1CLL);
}

void sub_22E63F198()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22E643AD8(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22E63EE18);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E643AD8(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E63EE1CLL);
}

void sub_22E63F1E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22E643AD8(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22E63EE18);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E643AD8(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E63EE1CLL);
}

void sub_22E63F230()
{
  JUMPOUT(0x22E63EE04);
}

void sub_22E63F238()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (sub_22E643AD8(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if ((_DWORD)v2)
    {
      v3 = *(uint64_t **)(v1 + 56);
      v4 = 8 * v2;
      while ((sub_22E643AD8(v0, *v3, 0) & 1) != 0)
      {
        ++v3;
        v4 -= 8;
        if (!v4)
          goto LABEL_6;
      }
LABEL_33:
      JUMPOUT(0x22E63EF78);
    }
LABEL_6:
    v5 = *(unsigned int *)(v1 + 64);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v1 + 72);
      v7 = 8 * v5;
      while ((sub_22E643AD8(v0, *v6, 0) & 1) != 0)
      {
        ++v6;
        v7 -= 8;
        if (!v7)
          goto LABEL_10;
      }
      goto LABEL_33;
    }
LABEL_10:
    v8 = *(unsigned int *)(v1 + 80);
    if ((_DWORD)v8)
    {
      v9 = *(uint64_t **)(v1 + 88);
      v10 = 8 * v8;
      while ((sub_22E643AD8(v0, *v9, 0) & 1) != 0)
      {
        ++v9;
        v10 -= 8;
        if (!v10)
          goto LABEL_14;
      }
      goto LABEL_33;
    }
LABEL_14:
    v11 = *(unsigned int *)(v1 + 96);
    if ((_DWORD)v11)
    {
      v12 = *(uint64_t **)(v1 + 104);
      v13 = 8 * v11;
      while ((sub_22E643AD8(v0, *v12, 0) & 1) != 0)
      {
        ++v12;
        v13 -= 8;
        if (!v13)
          goto LABEL_18;
      }
      goto LABEL_33;
    }
LABEL_18:
    v14 = *(unsigned int *)(v1 + 128);
    if (!(_DWORD)v14)
      JUMPOUT(0x22E63EE18);
    v15 = *(uint64_t **)(v1 + 136);
    v16 = 8 * v14 - 8;
    do
    {
      v17 = *v15++;
      if (sub_22E643AD8(v0, v17, 0))
        v18 = v16 == 0;
      else
        v18 = 1;
      v16 -= 8;
    }
    while (!v18);
  }
  JUMPOUT(0x22E63EE1CLL);
}

uint64_t sub_22E63F344(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a3;
  if (!a2)
    return 1;
  v5 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (result = sub_22E63F344(a1, v5, a3), (_DWORD)result))
  {
    if (*(_QWORD *)(a2 + 16) && (*(_BYTE *)(a2 + 8) & 4) != 0)
    {
      v7 = sub_22F0AB4E0((uint64_t)v9);
      return sub_22E63F484(a1, v7, v8);
    }
    return 1;
  }
  return result;
}

uint64_t sub_22E63F3CC(_BYTE *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t result;
  unint64_t v8;
  int v9;
  unint64_t v10;

  v2 = *a2;
  v3 = *a2 & 7;
  v4 = v3;
  if ((_DWORD)v3 == 7)
  {
    v5 = *(_DWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
    if (v5 >= 3)
      v5 = 3;
    v4 = v5 | 8;
  }
  if ((v4 - 3) < 3)
  {
    if ((v3 - 3) <= 2)
    {
      v6 = (_QWORD *)a2[2];
      if (v6)
      {
        if ((sub_22E63F484(a1, *v6, v6 + 1) & 1) == 0)
          return 0;
      }
    }
    return 1;
  }
  if (v4 != 8)
    return 1;
  if ((~(_BYTE)v2 & 7) != 0)
    goto LABEL_15;
  v8 = v2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_DWORD *)v8;
  if (*(_DWORD *)v8 >= 3u)
    v9 = 3;
  if (v9)
LABEL_15:
    v10 = 0;
  else
    v10 = *(_QWORD *)(v8 + 16) & 0xFFFFFFFFFFFFFFF9;
  result = sub_22E64F9BC(a1, v10);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22E63F484(_BYTE *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v10;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  unint64_t *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  char v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;

  if (a2)
  {
    v4 = a2;
    do
    {
      v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      if ((v4 & 0xF) != 0)
      {
LABEL_4:
        if ((v6 & 0xFFFFFFFFFFFFFFF0) != 0)
          v7 = *(_QWORD *)((char *)&unk_22F45C268
                         + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        else
          v7 = 1;
        a3 = (a3 + v7 - 1) & -v7;
        v4 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      }
      else
      {
        result = 1;
        switch(*(_BYTE *)(v6 + 16))
        {
          case 0:
          case 1:
          case 0x16:
          case 0x17:
          case 0x36:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F45C268
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 - 1;
            goto LABEL_62;
          case 2:
          case 3:
          case 4:
          case 5:
            v21 = *(_QWORD *)(v4 + 32);
            if (v21 >= 0x10 && (*(_QWORD *)(v4 + 32) & 0xFLL) == 0)
              v74 = *(_QWORD *)((char *)&unk_22F45C268
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v74 = 1;
            result = sub_22E63F484(a1, v21, (a3 + v74 + 15) & -v74);
            if (!(_DWORD)result)
              return result;
            v23 = *(_QWORD *)(a3 + 8);
            return sub_22E643AD8((uint64_t)a1, v23, 0);
          case 6:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F45C268
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 11;
            goto LABEL_62;
          case 7:
          case 0x25:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F45C268
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 7;
            goto LABEL_62;
          case 8:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F45C268
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = v20 + a3;
            goto LABEL_62;
          case 0xA:
          case 0x20:
          case 0x24:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
            v4 = *(_QWORD *)(v4 + 32);
            goto LABEL_9;
          case 0xC:
          case 0x37:
          case 0x38:
            goto LABEL_76;
          case 0xD:
          case 0x30:
            v23 = *(_QWORD *)(v4 + 24);
            return sub_22E643AD8((uint64_t)a1, v23, 0);
          case 0xE:
            result = sub_22E64FA80(a1, *(_QWORD *)(v4 + 24));
            if (!(_DWORD)result)
              return result;
            if (!*(_QWORD *)(v4 + 40))
              return 1;
            result = sub_22E63F344(a1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16));
            if (!(_DWORD)result)
              return result;
            v25 = *(_DWORD *)(a3 + 28);
            v75 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 40);
            v76 = v25;
            sub_22EFC6DC4((uint64_t)&v77, v75);
            result = sub_22E63F3CC(a1, &v75);
            if (!(_DWORD)result)
              return result;
            v26 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v26)
              return 1;
            v27 = v4 + 48;
            v28 = (uint64_t *)(a3 + 56);
            v29 = v26 - 1;
            do
            {
              v30 = *v28++;
              v78 = *(_OWORD *)v27;
              v79 = *(_QWORD *)(v27 + 16);
              v80 = v30;
              result = sub_22E64FFF0((uint64_t)a1, (uint64_t)&v78);
              v31 = v29-- != 0;
              v32 = v31;
              if (!(_DWORD)result)
                break;
              v27 += 24;
            }
            while ((v32 & 1) != 0);
            return result;
          case 0xF:
            result = sub_22E64F9BC(a1, *(_QWORD *)(v4 + 40));
            if (!(_DWORD)result)
              return result;
            v24 = *(_QWORD *)(v4 + 24);
            return sub_22E64FA80(a1, v24);
          case 0x10:
            v33 = *(_QWORD *)(v4 + 40);
            goto LABEL_96;
          case 0x11:
            v23 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
            return sub_22E643AD8((uint64_t)a1, v23, 0);
          case 0x12:
            return sub_22E63F344(a1, *(_QWORD *)(v4 + 32), *(_QWORD *)(a3 + 8));
          case 0x13:
            v33 = *(_QWORD *)(v4 + 40);
            if (!v33)
              goto LABEL_97;
LABEL_96:
            result = sub_22E643AD8((uint64_t)a1, v33, 0);
            if (!(_DWORD)result)
              return result;
LABEL_97:
            v24 = *(_QWORD *)(v4 + 48);
            return sub_22E64FA80(a1, v24);
          case 0x14:
            v34 = *(_QWORD *)(a3 + 8);
            if (v34)
            {
              v35 = *(_QWORD *)(v4 + 32);
              if (v35)
              {
                result = sub_22E63F344(a1, v35, v34);
                if (!(_DWORD)result)
                  return result;
              }
            }
            v36 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v36)
              return 1;
            v37 = v4 + 48;
            v38 = (uint64_t *)(a3 + 32);
            v39 = v36 - 1;
            do
            {
              v40 = *v38++;
              v78 = *(_OWORD *)v37;
              v79 = *(_QWORD *)(v37 + 16);
              v80 = v40;
              result = sub_22E64FFF0((uint64_t)a1, (uint64_t)&v78);
              v31 = v39-- != 0;
              v41 = v31;
              if (!(_DWORD)result)
                break;
              v37 += 24;
            }
            while ((v41 & 1) != 0);
            return result;
          case 0x15:
            v42 = *(_QWORD *)(v4 + 48);
            if (v42)
            {
              result = sub_22E643AD8((uint64_t)a1, v42, 0);
              if (!(_DWORD)result)
                return result;
            }
            v24 = *(_QWORD *)(v4 + 40);
            return sub_22E64FA80(a1, v24);
          case 0x18:
            v17 = *(_QWORD *)(v4 + 32);
            if (v17)
            {
              result = sub_22E63F344(a1, v17, *(_QWORD *)(a3 + 8));
              if (!(_DWORD)result)
                return result;
            }
            v4 = *(_QWORD *)(v4 + 40);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              goto LABEL_60;
            v20 = 1;
            goto LABEL_61;
          case 0x19:
            *(_QWORD *)&v78 = v4;
            *((_QWORD *)&v78 + 1) = a3;
            v43 = *(_QWORD *)(v4 + 24);
            v44 = sub_22E47EE80(&v78);
            return sub_22E63F484(a1, v43, v44);
          case 0x1A:
            *(_QWORD *)&v78 = v4;
            *((_QWORD *)&v78 + 1) = a3;
            v45 = *(_QWORD *)(v4 + 24);
            v46 = sub_22E47EE80(&v78);
            result = sub_22E63F484(a1, v45, v46);
            if (!(_DWORD)result)
              return result;
            v47 = v78;
            v48 = *(_QWORD *)(v78 + 16);
            if (*(_BYTE *)(v78 + 16) == 25 || (v48 & 0x3FFFC000000000) == 0)
              goto LABEL_126;
            v50 = 0;
            v51 = (unsigned __int16)(v48 >> 38);
            do
            {
              v52 = *(_QWORD *)(*((_QWORD *)&v78 + 1) + 8 * v50 + 16);
              if (v52)
              {
                if ((sub_22E63FBEC(a1, v52) & 1) == 0)
                  return 0;
              }
              else if (v50 < (unsigned __int16)(*(_QWORD *)(v47 + 16) >> 38))
              {
                result = sub_22E64FA80(a1, *(_QWORD *)(v47 + 40 + 8 * v50));
                if (!(_DWORD)result)
                  return result;
              }
              ++v50;
            }
            while (v51 != v50);
            v48 = *(_QWORD *)(v47 + 16);
LABEL_126:
            if ((v48 & 0x3C0000000000000) == 0x80000000000000)
            {
              v53 = (_DWORD *)((v47 + 8 * (unsigned __int16)(v48 >> 38) + 4 * ((v48 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8);
              v56 = *v53;
              v55 = (unint64_t *)(v53 + 2);
              v54 = v56;
              if (v56)
              {
                v57 = 8 * v54;
                while ((sub_22E64FA80(a1, *v55) & 1) != 0)
                {
                  ++v55;
                  v57 -= 8;
                  if (!v57)
                    goto LABEL_131;
                }
                return 0;
              }
            }
LABEL_131:
            v58 = sub_22F257D3C(v47);
            if (!v58)
              return 1;
            result = sub_22E643AD8((uint64_t)a1, v58, 0);
            if ((_DWORD)result)
              return 1;
            return result;
          case 0x1C:
            v4 = *(_QWORD *)(v4 + 24);
LABEL_9:
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F45C268
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 3;
            goto LABEL_62;
          case 0x1D:
          case 0x1E:
            result = sub_22E643AD8((uint64_t)a1, *(_QWORD *)(a3 + 16), 0);
            if (!(_DWORD)result)
              return result;
            result = sub_22E643AD8((uint64_t)a1, *(_QWORD *)(a3 + 24), 0);
            if (!(_DWORD)result)
              return result;
LABEL_76:
            v24 = *(_QWORD *)(v4 + 32);
            return sub_22E64FA80(a1, v24);
          case 0x1F:
            v19 = *(_QWORD **)(a3 + 8);
            if (v19)
            {
              if ((sub_22E63F484(a1, *v19, v19 + 1) & 1) == 0)
                return 0;
            }
            else
            {
              result = sub_22E64FA80(a1, *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0);
              if (!(_DWORD)result)
                return result;
            }
            v4 = *(_QWORD *)(v4 + 32);
            v20 = 1;
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
LABEL_60:
              v20 = *(_QWORD *)((char *)&unk_22F45C268
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
LABEL_61:
            v10 = a3 + v20 + 15;
LABEL_62:
            a3 = v10 & -v20;
            break;
          case 0x21:
            v59 = *(_QWORD *)(v4 + 24);
            v60 = *(_QWORD *)(v59 & 0xFFFFFFFFFFFFFFF0);
            if (v60 != v4)
            {
              v61 = 1;
              if (v59 >= 0x10 && (v59 & 0xF) == 0)
                v61 = *(_QWORD *)((char *)&unk_22F45C268
                                + ((uint64_t)((unint64_t)*(unsigned int *)(v60 + 16) << 56) >> 53));
              result = sub_22E63F484(a1, v59, (a3+ (((HIWORD(*(_DWORD *)(v4 + 16)) & 0x3F8) + 4 * (*(_DWORD *)(v4 + 16) >> 26) + 31) & 0x7F8)+ v61- 1) & -v61);
              if (!(_DWORD)result)
                return result;
            }
            v62 = (*(_DWORD *)(v4 + 16) >> 19) & 0x7F;
            if (!(_DWORD)v62)
              return 1;
            v63 = (_QWORD *)(a3 + 24);
            v64 = v62 - 1;
            do
            {
              v65 = (_QWORD *)*v63++;
              result = sub_22E63F484(a1, *v65, v65 + 1);
              v31 = v64-- != 0;
              v66 = v31;
            }
            while ((_DWORD)result && (v66 & 1) != 0);
            return result;
          case 0x2A:
            v67 = *(_DWORD *)(v4 + 20);
            *((_QWORD *)&v78 + 1) = *(_QWORD *)(v4 + 40);
            LODWORD(v78) = 8;
            DWORD1(v78) = v67;
            return sub_22E64FF24((uint64_t)a1, (uint64_t)&v78);
          case 0x2B:
            v24 = *(_QWORD *)(v4 + 8);
            return sub_22E64FA80(a1, v24);
          case 0x2E:
            result = sub_22E64F9BC(a1, *(_QWORD *)(v4 + 32));
            if (!(_DWORD)result)
              return result;
            v68 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v68)
              return 1;
            v69 = v4 + 40;
            v70 = (uint64_t *)(a3 + 16);
            v71 = v68 - 1;
            do
            {
              v72 = *v70++;
              v78 = *(_OWORD *)v69;
              v79 = *(_QWORD *)(v69 + 16);
              v80 = v72;
              result = sub_22E64FFF0((uint64_t)a1, (uint64_t)&v78);
              v31 = v71-- != 0;
              v73 = v31;
              if (!(_DWORD)result)
                break;
              v69 += 24;
            }
            while ((v73 & 1) != 0);
            return result;
          case 0x31:
          case 0x33:
            v13 = *(unint64_t **)(a3 + 16);
            v14 = *v13;
            a3 = (uint64_t)(v13 + 1);
            v4 = v14;
            break;
          case 0x39:
            goto LABEL_4;
          default:
            return result;
        }
      }
    }
    while (v4);
  }
  return 1;
}

uint64_t sub_22E63FBEC(_BYTE *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t result;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  BOOL v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t **v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t **v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t **v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t **v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unsigned int v93;
  BOOL v94;
  uint64_t v95;
  uint64_t **v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t **v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD **v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t **v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  BOOL v113;
  uint64_t v114;
  uint64_t **v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t **v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t **v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  BOOL v128;
  uint64_t v129;
  uint64_t **v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  BOOL v135;
  uint64_t v136;
  uint64_t **v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t **v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  BOOL v151;
  uint64_t v152;
  uint64_t **v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  BOOL v158;
  uint64_t v159;
  uint64_t **v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int v164;
  BOOL v165;
  uint64_t v166;
  uint64_t **v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t **v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t **v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  unsigned int v183;
  BOOL v184;
  uint64_t v185;
  uint64_t **v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int v190;
  BOOL v191;
  uint64_t v192;
  uint64_t **v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  unint64_t v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t **v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t **v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t **v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t **v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t **v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  unsigned int v230;
  BOOL v231;
  uint64_t v232;
  uint64_t **v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unsigned int v240;
  BOOL v241;
  uint64_t v242;
  uint64_t **v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  unsigned int v247;
  BOOL v248;
  uint64_t v249;
  uint64_t **v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t **v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int v263;
  BOOL v264;
  uint64_t v265;
  uint64_t **v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t **v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  _QWORD *v275;
  unsigned int v276;
  BOOL v277;
  uint64_t v278;
  uint64_t **v279;
  uint64_t *v280;
  uint64_t v281;
  uint64_t v282;
  _DWORD *v283;
  uint64_t v284;
  uint64_t *v285;
  unsigned int v286;
  uint64_t v287;
  unsigned int v288;
  BOOL v289;
  uint64_t v290;
  uint64_t **v291;
  uint64_t *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  _QWORD *v296;
  uint64_t v297;
  unsigned int v298;
  BOOL v299;
  uint64_t v300;
  uint64_t **v301;
  uint64_t *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t **v305;
  uint64_t *v306;
  uint64_t v307;
  uint64_t v308;
  _QWORD **v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unsigned int v313;
  BOOL v314;
  uint64_t v315;
  uint64_t **v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t **v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  unsigned int v326;
  BOOL v327;
  uint64_t v328;
  uint64_t **v329;
  uint64_t *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t **v333;
  uint64_t *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t **v337;
  uint64_t *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t **v341;
  uint64_t *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  _QWORD *v346;
  unsigned int v347;
  BOOL v348;
  uint64_t v349;
  uint64_t **v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  unsigned int v354;
  uint64_t v355;
  uint64_t **v356;
  uint64_t *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t **v360;
  uint64_t *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t *v366;
  uint64_t v367;
  _QWORD *v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t v374;
  uint64_t **v375;
  uint64_t *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t **v379;
  uint64_t *v380;
  uint64_t v381;
  uint64_t v382;
  unsigned int v383;
  BOOL v384;
  uint64_t v385;
  uint64_t **v386;
  uint64_t *v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  unint64_t v391;
  unsigned int v392;
  BOOL v393;
  uint64_t v394;
  uint64_t **v395;
  uint64_t *v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  unsigned int v401;
  BOOL v402;
  uint64_t v403;
  uint64_t **v404;
  uint64_t *v405;
  uint64_t v406;
  uint64_t v407;
  unsigned int v408;
  BOOL v409;
  uint64_t v410;
  uint64_t **v411;
  uint64_t *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  unsigned int v417;
  BOOL v418;
  uint64_t v419;
  uint64_t **v420;
  uint64_t *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t **v424;
  uint64_t *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t **v428;
  uint64_t *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t **v432;
  uint64_t *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t **v436;
  uint64_t *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t **v440;
  uint64_t *v441;
  uint64_t v442;
  uint64_t v443;
  int v444;
  uint64_t v445;
  unsigned int v446;
  BOOL v447;
  uint64_t v448;
  uint64_t **v449;
  uint64_t *v450;
  uint64_t v451;
  uint64_t v452;
  unint64_t v453;
  unsigned int v454;
  BOOL v455;
  uint64_t v456;
  uint64_t **v457;
  uint64_t *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t **v461;
  uint64_t *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t **v465;
  uint64_t *v466;
  uint64_t v467;
  uint64_t v468;
  unint64_t v469;
  uint64_t v470;
  uint64_t i;
  uint64_t v472;
  uint64_t v473;
  _QWORD *v474;
  uint64_t v475;
  unsigned int v476;
  BOOL v477;
  uint64_t v478;
  uint64_t **v479;
  uint64_t *v480;
  uint64_t v481;
  uint64_t v482;
  unint64_t v483;
  unsigned int v484;
  BOOL v485;
  uint64_t v486;
  uint64_t **v487;
  uint64_t *v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t **v491;
  uint64_t *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t *v495;
  uint64_t **v496;
  uint64_t *v497;
  uint64_t v498;
  uint64_t v499;
  char *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t **v503;
  uint64_t *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t **v507;
  uint64_t *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t **v512;
  uint64_t *v513;
  uint64_t v514;
  uint64_t v515;
  unint64_t v516;
  uint64_t v517;
  unsigned int v518;
  uint64_t v519;
  uint64_t **v520;
  uint64_t *v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t *v524;
  unsigned int v525;
  uint64_t v526;
  uint64_t **v527;
  uint64_t *v528;
  uint64_t v529;
  uint64_t v530;
  unint64_t v531;
  _QWORD *v532;
  unsigned int v533;
  BOOL v534;
  uint64_t v535;
  uint64_t **v536;
  uint64_t *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t **v547;
  uint64_t *v548;
  uint64_t v549;
  uint64_t v550;
  BOOL v551;
  uint64_t **v552;
  uint64_t *v553;
  uint64_t v554;
  uint64_t v555;
  BOOL v556;
  BOOL v557;
  BOOL v558;
  BOOL v559;
  BOOL v560;
  BOOL v561;
  BOOL v562;
  BOOL v563;
  BOOL v564;
  BOOL v565;
  BOOL v566;
  BOOL v567;
  int *v568;
  BOOL v569;
  BOOL v570;
  BOOL v571;
  BOOL v572;
  uint64_t **v573;
  uint64_t *v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  int v584;
  uint64_t v585;

  if (!a2)
    return 1;
  v3 = a2 + 28;
  switch(*(_DWORD *)(a2 + 28) & 0x7F)
  {
    case 0:
      result = sub_22E63ED0C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v7 = *v6;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v9 = *(_QWORD *)v8 + 8 * *(unsigned int *)(v8 + 8);
      }
      else
      {
        v9 = 0;
      }
      while (2)
      {
        if (v7 == (uint64_t *)v9)
          return 1;
        if ((sub_22E63EDA8((uint64_t)a1, *v7) & 1) != 0)
        {
          ++v7;
          continue;
        }
        break;
      }
      return 0;
    case 1:
      v254 = *(_QWORD **)(a2 + 96);
      if (v254)
      {
        result = sub_22E63F484(a1, *v254, v254 + 1);
        if (!(_DWORD)result)
          return result;
      }
      v255 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
      result = sub_22E643AD8((uint64_t)a1, v255, 0);
      if (!(_DWORD)result)
        return result;
      v256 = *(unsigned int *)(a2 + 112);
      if (!(_DWORD)v256)
        goto LABEL_469;
      v257 = 16 * v256;
      v258 = (uint64_t *)(*(_QWORD *)(a2 + 104) + 8);
      while (1)
      {
        if (*v258)
        {
          result = sub_22E643AD8((uint64_t)a1, *v258, 0);
          if (!(_DWORD)result)
            break;
        }
        v258 += 2;
        v257 -= 16;
        if (!v257)
        {
LABEL_469:
          if ((*(_BYTE *)(v3 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v260 = *v259;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v262 = *(_QWORD *)v261 + 8 * *(unsigned int *)(v261 + 8);
            }
            else
            {
              v262 = 0;
            }
            while (v260 != (uint64_t *)v262)
            {
              if ((sub_22E63EDA8((uint64_t)a1, *v260) & 1) == 0)
                return 0;
              ++v260;
            }
          }
          return 1;
        }
      }
      return result;
    case 2:
      result = sub_22E643AD8((uint64_t)a1, *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v223 = *v222;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v225 = *(_QWORD *)v224 + 8 * *(unsigned int *)(v224 + 8);
      }
      else
      {
        v225 = 0;
      }
      while (2)
      {
        if (v223 == (uint64_t *)v225)
          return 1;
        if ((sub_22E63EDA8((uint64_t)a1, *v223) & 1) != 0)
        {
          ++v223;
          continue;
        }
        break;
      }
      return 0;
    case 3:
      result = sub_22E63FBEC(a1, *(_QWORD *)(a2 + 40));
      if (!(_DWORD)result)
        return result;
      v237 = *(_QWORD *)(a2 + 48);
      if (!v237)
        goto LABEL_436;
      v238 = *(unsigned int *)(v237 + 8);
      if (!(_DWORD)v238)
        goto LABEL_436;
      v239 = v237 + 16;
      while ((sub_22E64FFF0((uint64_t)a1, v239) & 1) != 0)
      {
        v239 += 32;
        if (!--v238)
        {
LABEL_436:
          v240 = *(_DWORD *)v3 & 0x7F;
          v241 = v240 > 0x39 || ((1 << v240) & 0x3F0003E01011066) == 0;
          if (v241
            && (v240 - 70 <= 0xD ? (v565 = ((1 << (v240 - 70)) & 0x2803) == 0) : (v565 = 1), v565 && v240 - 19 > 4))
          {
            v242 = 0;
          }
          else
          {
            v242 = sub_22EFCAE04(a2);
          }
          result = sub_22E63ED0C((uint64_t)a1, v242);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v3 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v244 = *v243;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v246 = *(_QWORD *)v245 + 8 * *(unsigned int *)(v245 + 8);
            }
            else
            {
              v246 = 0;
            }
            while (v244 != (uint64_t *)v246)
            {
              if ((sub_22E63EDA8((uint64_t)a1, *v244) & 1) == 0)
                return 0;
              ++v244;
            }
          }
          return 1;
        }
      }
      return 0;
    case 4:
      result = sub_22E63ED0C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v178 = *v177;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v180 = *(_QWORD *)v179 + 8 * *(unsigned int *)(v179 + 8);
      }
      else
      {
        v180 = 0;
      }
      while (2)
      {
        if (v178 == (uint64_t *)v180)
          return 1;
        if ((sub_22E63EDA8((uint64_t)a1, *v178) & 1) != 0)
        {
          ++v178;
          continue;
        }
        break;
      }
      return 0;
    case 5:
      result = sub_22E63ED0C((uint64_t)a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v306 = *v305;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v308 = *(_QWORD *)v307 + 8 * *(unsigned int *)(v307 + 8);
      }
      else
      {
        v308 = 0;
      }
      while (2)
      {
        if (v306 == (uint64_t *)v308)
          return 1;
        if ((sub_22E63EDA8((uint64_t)a1, *v306) & 1) != 0)
        {
          ++v306;
          continue;
        }
        break;
      }
      return 0;
    case 6:
      result = sub_22E63ED0C((uint64_t)a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v334 = *v333;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v336 = *(_QWORD *)v335 + 8 * *(unsigned int *)(v335 + 8);
      }
      else
      {
        v336 = 0;
      }
      while (2)
      {
        if (v334 == (uint64_t *)v336)
          return 1;
        if ((sub_22E63EDA8((uint64_t)a1, *v334) & 1) != 0)
        {
          ++v334;
          continue;
        }
        break;
      }
      return 0;
    case 7:
      result = sub_22E643AD8((uint64_t)a1, *(_QWORD *)(a2 + 40), 0);
      if (!(_DWORD)result)
        return result;
      v247 = *(_DWORD *)v3 & 0x7F;
      v248 = v247 > 0x39 || ((1 << v247) & 0x3F0003E01011066) == 0;
      if (v248 && (v247 - 70 <= 0xD ? (v561 = ((1 << (v247 - 70)) & 0x2803) == 0) : (v561 = 1), v561 && v247 - 19 > 4))
        v249 = 0;
      else
        v249 = sub_22EFCAE04(a2);
      result = sub_22E63ED0C((uint64_t)a1, v249);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v251 = *v250;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v253 = *(_QWORD *)v252 + 8 * *(unsigned int *)(v252 + 8);
      }
      else
      {
        v253 = 0;
      }
      while (2)
      {
        if (v251 == (uint64_t *)v253)
          return 1;
        if ((sub_22E63EDA8((uint64_t)a1, *v251) & 1) != 0)
        {
          ++v251;
          continue;
        }
        break;
      }
      return 0;
    case 8:
      v345 = *(_QWORD *)(a2 + 40);
      v346 = (_QWORD *)(v345 & 0xFFFFFFFFFFFFFFF8);
      if ((v345 & 4) != 0 && v346)
      {
        if ((sub_22E63F484(a1, *v346, v346 + 1) & 1) == 0)
          return 0;
      }
      else
      {
        if ((v345 & 4) != 0)
          v483 = 0;
        else
          v483 = v345 & 0xFFFFFFFFFFFFFFF8;
        result = sub_22E63FBEC(a1, v483);
        if (!(_DWORD)result)
          return result;
      }
      v484 = *(_DWORD *)v3 & 0x7F;
      v485 = v484 > 0x39 || ((1 << v484) & 0x3F0003E01011066) == 0;
      if (!v485 || v484 - 70 <= 0xD && ((1 << (v484 - 70)) & 0x2803) != 0 || v484 - 19 <= 4)
        v486 = sub_22EFCAE04(a2);
      else
        v486 = 0;
      result = sub_22E63ED0C((uint64_t)a1, v486);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v488 = *v487;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v490 = *(_QWORD *)v489 + 8 * *(unsigned int *)(v489 + 8);
      }
      else
      {
        v490 = 0;
      }
      while (1)
      {
        if (v488 == (uint64_t *)v490)
          return 1;
        if ((sub_22E63EDA8((uint64_t)a1, *v488) & 1) == 0)
          break;
        ++v488;
      }
      return 0;
    case 9:
      v210 = *(_QWORD *)(a2 + 48);
      v211 = (_QWORD *)(v210 & 0xFFFFFFFFFFFFFFF8);
      if ((v210 & 4) != 0 && v211)
      {
        if ((sub_22E63F484(a1, *v211, v211 + 1) & 1) == 0)
          return 0;
      }
      else
      {
        if ((v210 & 4) != 0)
          v469 = 0;
        else
          v469 = v210 & 0xFFFFFFFFFFFFFFF8;
        result = sub_22E63FBEC(a1, v469);
        if (!(_DWORD)result)
          return result;
      }
      v470 = *(unsigned int *)(a2 + 36);
      if ((_DWORD)v470)
      {
        for (i = 0; i != v470; ++i)
        {
          v472 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * i);
          v473 = *(_DWORD *)(v472 + 12) & 0x1FFFFFFF;
          if ((_DWORD)v473)
          {
            v474 = (_QWORD *)(v472 + 16);
            v475 = 8 * v473;
            do
            {
              if ((sub_22E63FBEC(a1, *v474) & 1) == 0)
                return 0;
              ++v474;
              v475 -= 8;
            }
            while (v475);
          }
        }
      }
      v476 = *(_DWORD *)v3 & 0x7F;
      v477 = v476 > 0x39 || ((1 << v476) & 0x3F0003E01011066) == 0;
      if (v477 && (v476 - 70 <= 0xD ? (v570 = ((1 << (v476 - 70)) & 0x2803) == 0) : (v570 = 1), v570 && v476 - 19 > 4))
        v478 = 0;
      else
        v478 = sub_22EFCAE04(a2);
      result = sub_22E63ED0C((uint64_t)a1, v478);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v480 = *v479;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v482 = *(_QWORD *)v481 + 8 * *(unsigned int *)(v481 + 8);
      }
      else
      {
        v482 = 0;
      }
      while (1)
      {
        if (v480 == (uint64_t *)v482)
          return 1;
        if ((sub_22E63EDA8((uint64_t)a1, *v480) & 1) == 0)
          break;
        ++v480;
      }
      return 0;
    case 0xA:
      result = sub_22E63ED0C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v342 = *v341;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v344 = *(_QWORD *)v343 + 8 * *(unsigned int *)(v343 + 8);
      }
      else
      {
        v344 = 0;
      }
      while (2)
      {
        if (v342 == (uint64_t *)v344)
          return 1;
        if ((sub_22E63EDA8((uint64_t)a1, *v342) & 1) != 0)
        {
          ++v342;
          continue;
        }
        break;
      }
      return 0;
    case 0xB:
      return (sub_22E650108((uint64_t)a1, a2) & 1) != 0;
    case 0xC:
      result = sub_22E63ED0C((uint64_t)a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v207 = *v206;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v209 = *(_QWORD *)v208 + 8 * *(unsigned int *)(v208 + 8);
      }
      else
      {
        v209 = 0;
      }
      while (2)
      {
        if (v207 == (uint64_t *)v209)
          return 1;
        if ((sub_22E63EDA8((uint64_t)a1, *v207) & 1) != 0)
        {
          ++v207;
          continue;
        }
        break;
      }
      return 0;
    case 0xD:
      if (!sub_22E63F344(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v324 = *(_DWORD *)(a2 + 24);
      v325 = *(_QWORD *)(a2 + 80);
      v583 = *(_QWORD *)(a2 + 40);
      v584 = v324;
      v585 = v325;
      if (!sub_22E63F3CC(a1, &v583))
        return 0;
      v326 = *(_DWORD *)v3 & 0x7F;
      v327 = v326 > 0x39 || ((1 << v326) & 0x3F0003E01011066) == 0;
      v328 = !v327 || v326 - 70 <= 0xD && ((1 << (v326 - 70)) & 0x2803) != 0 || v326 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      if (!sub_22E63ED0C((uint64_t)a1, v328))
        return 0;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v330 = *v329;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v332 = *(_QWORD *)v331 + 8 * *(unsigned int *)(v331 + 8);
      }
      else
      {
        v332 = 0;
      }
      while (2)
      {
        if (v330 == (uint64_t *)v332)
          return 1;
        if ((sub_22E63EDA8((uint64_t)a1, *v330) & 1) != 0)
        {
          ++v330;
          continue;
        }
        break;
      }
      return 0;
    case 0xE:
      result = sub_22E63ED0C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v142 = *v141;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v144 = *(_QWORD *)v143 + 8 * *(unsigned int *)(v143 + 8);
      }
      else
      {
        v144 = 0;
      }
      while (2)
      {
        if (v142 == (uint64_t *)v144)
          return 1;
        if ((sub_22E63EDA8((uint64_t)a1, *v142) & 1) != 0)
        {
          ++v142;
          continue;
        }
        break;
      }
      return 0;
    case 0xF:
      result = sub_22E63ED0C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v227 = *v226;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v229 = *(_QWORD *)v228 + 8 * *(unsigned int *)(v228 + 8);
      }
      else
      {
        v229 = 0;
      }
      while (2)
      {
        if (v227 == (uint64_t *)v229)
          return 1;
        if ((sub_22E63EDA8((uint64_t)a1, *v227) & 1) != 0)
        {
          ++v227;
          continue;
        }
        break;
      }
      return 0;
    case 0x10:
      result = sub_22E63ED0C((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v124 = *v123;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v126 = *(_QWORD *)v125 + 8 * *(unsigned int *)(v125 + 8);
      }
      else
      {
        v126 = 0;
      }
      while (2)
      {
        if (v124 == (uint64_t *)v126)
          return 1;
        if ((sub_22E63EDA8((uint64_t)a1, *v124) & 1) != 0)
        {
          ++v124;
          continue;
        }
        break;
      }
      return 0;
    case 0x11:
      result = sub_22E63F344(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v271 = *v270;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v273 = *(_QWORD *)v272 + 8 * *(unsigned int *)(v272 + 8);
      }
      else
      {
        v273 = 0;
      }
      while (2)
      {
        if (v271 == (uint64_t *)v273)
          return 1;
        if ((sub_22E63EDA8((uint64_t)a1, *v271) & 1) != 0)
        {
          ++v271;
          continue;
        }
        break;
      }
      return 0;
    case 0x12:
      result = sub_22E63ED0C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v338 = *v337;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v340 = *(_QWORD *)v339 + 8 * *(unsigned int *)(v339 + 8);
      }
      else
      {
        v340 = 0;
      }
      while (2)
      {
        if (v338 == (uint64_t *)v340)
          return 1;
        if ((sub_22E63EDA8((uint64_t)a1, *v338) & 1) != 0)
        {
          ++v338;
          continue;
        }
        break;
      }
      return 0;
    case 0x13:
      v371 = *(_QWORD *)(a2 + 112);
      if (!v371)
        goto LABEL_676;
      v372 = *(unsigned int *)(v371 + 8);
      if (!(_DWORD)v372)
        goto LABEL_676;
      v373 = (uint64_t *)(v371 + 16);
      v374 = 8 * v372;
      while ((sub_22E650220((uint64_t)a1, *v373) & 1) != 0)
      {
        ++v373;
        v374 -= 8;
        if (!v374)
        {
LABEL_676:
          result = sub_22E63ED0C((uint64_t)a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v3 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v376 = *v375;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v378 = *(_QWORD *)v377 + 8 * *(unsigned int *)(v377 + 8);
            }
            else
            {
              v378 = 0;
            }
            while (v376 != (uint64_t *)v378)
            {
              if ((sub_22E63EDA8((uint64_t)a1, *v376) & 1) == 0)
                return 0;
              ++v376;
            }
          }
          return 1;
        }
      }
      return 0;
    case 0x14:
      result = sub_22E63ED0C((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v292 = *v291;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v294 = *(_QWORD *)v293 + 8 * *(unsigned int *)(v293 + 8);
      }
      else
      {
        v294 = 0;
      }
      while (2)
      {
        if (v292 == (uint64_t *)v294)
          return 1;
        if ((sub_22E63EDA8((uint64_t)a1, *v292) & 1) != 0)
        {
          ++v292;
          continue;
        }
        break;
      }
      return 0;
    case 0x15:
      result = sub_22E63ED0C((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v321 = *v320;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v323 = *(_QWORD *)v322 + 8 * *(unsigned int *)(v322 + 8);
      }
      else
      {
        v323 = 0;
      }
      while (2)
      {
        if (v321 == (uint64_t *)v323)
          return 1;
        if ((sub_22E63EDA8((uint64_t)a1, *v321) & 1) != 0)
        {
          ++v321;
          continue;
        }
        break;
      }
      return 0;
    case 0x16:
      v364 = *(_QWORD *)(a2 + 112);
      if (!v364)
        goto LABEL_663;
      v365 = *(unsigned int *)(v364 + 8);
      if (!(_DWORD)v365)
        goto LABEL_663;
      v366 = (uint64_t *)(v364 + 16);
      v367 = 8 * v365;
      while ((sub_22E650220((uint64_t)a1, *v366) & 1) != 0)
      {
        ++v366;
        v367 -= 8;
        if (!v367)
        {
LABEL_663:
          v368 = (_QWORD *)sub_22F259044(a2);
          if (v368)
          {
            result = sub_22E63F484(a1, *v368, v368 + 1);
            if (!(_DWORD)result)
              return result;
          }
          v369 = *(_QWORD *)(a2 + 120);
          if (!v369)
          {
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
            v369 = *(_QWORD *)(a2 + 120);
          }
          if (v369 < 8)
            v370 = 0;
          else
            v370 = *(_QWORD *)(v369 & 0xFFFFFFFFFFFFFFF8);
          if (v370 == a2)
          {
            v577 = sub_22F2590A8(a2);
            v578 = sub_22F25910C(a2);
            v579 = sub_22F259178(a2);
            v580 = sub_22F2591DC(a2);
            if (v577 != v578 && v579 != v580)
            {
              v581 = v579 + 4;
              v582 = v577 + 8;
              do
              {
                if (v582 == v578)
                  break;
                v582 += 8;
                v30 = v581 == v580;
                v581 += 4;
              }
              while (!v30);
            }
          }
          result = sub_22E63ED0C((uint64_t)a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v3 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v548 = *v547;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v550 = *(_QWORD *)v549 + 8 * *(unsigned int *)(v549 + 8);
            }
            else
            {
              v550 = 0;
            }
            while (v548 != (uint64_t *)v550)
            {
              if ((sub_22E63EDA8((uint64_t)a1, *v548) & 1) == 0)
                return 0;
              ++v548;
            }
          }
          return 1;
        }
      }
      return 0;
    case 0x17:
      v399 = *(_QWORD *)(a2 + 104);
      if (!v399)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
        v399 = *(_QWORD *)(a2 + 104);
      }
      if (v399 < 8)
        v400 = 0;
      else
        v400 = *(_QWORD *)(v399 & 0xFFFFFFFFFFFFFFF8);
      if (v400 == a2)
      {
        v540 = sub_22F259248(a2);
        v542 = v541;
        v543 = sub_22F2592CC(a2);
        if (v540 != v542 && v543 != v544)
        {
          v545 = v543 + 4;
          v546 = v540 + 8;
          do
          {
            if (v546 == v542)
              break;
            v546 += 8;
            v30 = v545 == v544;
            v545 += 4;
          }
          while (!v30);
        }
      }
      result = sub_22E63ED0C((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v492 = *v491;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v494 = *(_QWORD *)v493 + 8 * *(unsigned int *)(v493 + 8);
      }
      else
      {
        v494 = 0;
      }
      while (2)
      {
        if (v492 == (uint64_t *)v494)
          return 1;
        if ((sub_22E63EDA8((uint64_t)a1, *v492) & 1) != 0)
        {
          ++v492;
          continue;
        }
        break;
      }
      return 0;
    case 0x18:
      v213 = *(_QWORD **)(a2 + 88);
      if (v213)
      {
        result = sub_22E63F484(a1, *v213, v213 + 1);
        if (!(_DWORD)result)
          return result;
      }
      v214 = *(unsigned int *)(a2 + 104);
      if (!(_DWORD)v214)
        goto LABEL_393;
      v215 = *(_QWORD **)(a2 + 96);
      v216 = 8 * v214;
      while ((sub_22E63FBEC(a1, *v215) & 1) != 0)
      {
        ++v215;
        v216 -= 8;
        if (!v216)
        {
LABEL_393:
          if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 72))(a2))
          {
            v217 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
            result = sub_22E643AD8((uint64_t)a1, v217, 0);
            if (!(_DWORD)result)
              return result;
          }
          if ((*(_BYTE *)(v3 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v219 = *v218;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v221 = *(_QWORD *)v220 + 8 * *(unsigned int *)(v220 + 8);
            }
            else
            {
              v221 = 0;
            }
            while (v219 != (uint64_t *)v221)
            {
              if ((sub_22E63EDA8((uint64_t)a1, *v219) & 1) == 0)
                return 0;
              ++v219;
            }
          }
          return 1;
        }
      }
      return 0;
    case 0x19:
      v212 = *(_QWORD **)(a2 + 64);
      if (v212)
      {
        if ((sub_22E63F484(a1, *v212, v212 + 1) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22E64FA80(a1, *(_QWORD *)(a2 + 56));
        if (!(_DWORD)result)
          return result;
      }
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v508 = *v507;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v510 = *(_QWORD *)v509 + 8 * *(unsigned int *)(v509 + 8);
      }
      else
      {
        v510 = 0;
      }
      while (2)
      {
        if (v508 == (uint64_t *)v510)
          return 1;
        if ((sub_22E63EDA8((uint64_t)a1, *v508) & 1) != 0)
        {
          ++v508;
          continue;
        }
        break;
      }
      return 0;
    case 0x1A:
      result = sub_22E64F91C((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      v417 = *(_DWORD *)v3 & 0x7F;
      v418 = v417 > 0x39 || ((1 << v417) & 0x3F0003E01011066) == 0;
      if (v418 && (v417 - 70 <= 0xD ? (v563 = ((1 << (v417 - 70)) & 0x2803) == 0) : (v563 = 1), v563 && v417 - 19 > 4))
        v419 = 0;
      else
        v419 = sub_22EFCAE04(a2);
      result = sub_22E63ED0C((uint64_t)a1, v419);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v421 = *v420;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v423 = *(_QWORD *)v422 + 8 * *(unsigned int *)(v422 + 8);
      }
      else
      {
        v423 = 0;
      }
      while (2)
      {
        if (v421 == (uint64_t *)v423)
          return 1;
        if ((sub_22E63EDA8((uint64_t)a1, *v421) & 1) != 0)
        {
          ++v421;
          continue;
        }
        break;
      }
      return 0;
    case 0x1B:
      result = sub_22E64F91C((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E643AD8((uint64_t)a1, *(_QWORD *)(a2 + 64), 0);
      if (!(_DWORD)result)
        return result;
      v112 = *(_DWORD *)v3 & 0x7F;
      v113 = v112 > 0x39 || ((1 << v112) & 0x3F0003E01011066) == 0;
      v114 = !v113 || v112 - 70 <= 0xD && ((1 << (v112 - 70)) & 0x2803) != 0 || v112 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E63ED0C((uint64_t)a1, v114);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v116 = *v115;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v118 = *(_QWORD *)v117 + 8 * *(unsigned int *)(v117 + 8);
      }
      else
      {
        v118 = 0;
      }
      while (2)
      {
        if (v116 == (uint64_t *)v118)
          return 1;
        if ((sub_22E63EDA8((uint64_t)a1, *v116) & 1) != 0)
        {
          ++v116;
          continue;
        }
        break;
      }
      return 0;
    case 0x1C:
      result = sub_22E64F91C((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E63FBEC(a1, *(_QWORD *)(a2 + 48));
      if (!(_DWORD)result)
        return result;
      v401 = *(_DWORD *)v3 & 0x7F;
      v402 = v401 > 0x39 || ((1 << v401) & 0x3F0003E01011066) == 0;
      v403 = !v402 || v401 - 70 <= 0xD && ((1 << (v401 - 70)) & 0x2803) != 0 || v401 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E63ED0C((uint64_t)a1, v403);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v405 = *v404;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v407 = *(_QWORD *)v406 + 8 * *(unsigned int *)(v406 + 8);
      }
      else
      {
        v407 = 0;
      }
      while (2)
      {
        if (v405 == (uint64_t *)v407)
          return 1;
        if ((sub_22E63EDA8((uint64_t)a1, *v405) & 1) != 0)
        {
          ++v405;
          continue;
        }
        break;
      }
      return 0;
    case 0x1D:
      result = sub_22E64F91C((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E63FBEC(a1, *(_QWORD *)(a2 + 48));
      if (!(_DWORD)result)
        return result;
      v408 = *(_DWORD *)v3 & 0x7F;
      v409 = v408 > 0x39 || ((1 << v408) & 0x3F0003E01011066) == 0;
      v410 = !v409 || v408 - 70 <= 0xD && ((1 << (v408 - 70)) & 0x2803) != 0 || v408 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E63ED0C((uint64_t)a1, v410);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v412 = *v411;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v414 = *(_QWORD *)v413 + 8 * *(unsigned int *)(v413 + 8);
      }
      else
      {
        v414 = 0;
      }
      while (2)
      {
        if (v412 == (uint64_t *)v414)
          return 1;
        if ((sub_22E63EDA8((uint64_t)a1, *v412) & 1) != 0)
        {
          ++v412;
          continue;
        }
        break;
      }
      return 0;
    case 0x1E:
      result = sub_22E63FBEC(a1, *(_QWORD *)(a2 + 48));
      if (!(_DWORD)result)
        return result;
      result = sub_22E64F91C((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      v347 = *(_DWORD *)v3 & 0x7F;
      v348 = v347 > 0x39 || ((1 << v347) & 0x3F0003E01011066) == 0;
      v349 = !v348 || v347 - 70 <= 0xD && ((1 << (v347 - 70)) & 0x2803) != 0 || v347 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E63ED0C((uint64_t)a1, v349);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v351 = *v350;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v353 = *(_QWORD *)v352 + 8 * *(unsigned int *)(v352 + 8);
      }
      else
      {
        v353 = 0;
      }
      while (2)
      {
        if (v351 == (uint64_t *)v353)
          return 1;
        if ((sub_22E63EDA8((uint64_t)a1, *v351) & 1) != 0)
        {
          ++v351;
          continue;
        }
        break;
      }
      return 0;
    case 0x1F:
      result = sub_22E64F91C((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E63FBEC(a1, *(_QWORD *)(a2 + 48));
      if (!(_DWORD)result)
        return result;
      v263 = *(_DWORD *)v3 & 0x7F;
      v264 = v263 > 0x39 || ((1 << v263) & 0x3F0003E01011066) == 0;
      v265 = !v264 || v263 - 70 <= 0xD && ((1 << (v263 - 70)) & 0x2803) != 0 || v263 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E63ED0C((uint64_t)a1, v265);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v267 = *v266;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v269 = *(_QWORD *)v268 + 8 * *(unsigned int *)(v268 + 8);
      }
      else
      {
        v269 = 0;
      }
      while (2)
      {
        if (v267 == (uint64_t *)v269)
          return 1;
        if ((sub_22E63EDA8((uint64_t)a1, *v267) & 1) != 0)
        {
          ++v267;
          continue;
        }
        break;
      }
      return 0;
    case 0x20:
      result = sub_22E63FBEC(a1, *(_QWORD *)(a2 + 48));
      if (!(_DWORD)result)
        return result;
      if (*(_QWORD *)(a2 + 72) >= 8uLL && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v568 = sub_22F259350(a2);
        result = sub_22E64FFF0((uint64_t)a1, (uint64_t)v568);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22E64F91C((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v354 = *(_DWORD *)v3 & 0x7F, v354 <= 0x39) && ((1 << v354) & 0x3F0003E01011066) != 0
        || v354 - 70 <= 0xD && ((1 << (v354 - 70)) & 0x2803) != 0
        || v354 - 19 <= 4)
      {
        v355 = sub_22EFCAE04(a2);
      }
      else
      {
        v355 = 0;
      }
      result = sub_22E63ED0C((uint64_t)a1, v355);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v357 = *v356;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v359 = *(_QWORD *)v358 + 8 * *(unsigned int *)(v358 + 8);
      }
      else
      {
        v359 = 0;
      }
      if (v357 == (uint64_t *)v359)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v357) & 1) != 0)
      {
        if (++v357 == (uint64_t *)v359)
          return 1;
      }
      return 0;
    case 0x21:
      v145 = *(_QWORD *)(a2 + 120);
      if ((v145 & 4) == 0)
        goto LABEL_254;
      v146 = 0;
      while (1)
      {
        v147 = v145 & 0xFFFFFFFFFFFFFFF8;
        if (v146 >= *(unsigned int *)(v147 + 16))
          break;
        sub_22E64F91C((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v147 + 24) + 8 * v146++));
        v145 = *(_QWORD *)(a2 + 120);
        if ((v145 & 4) == 0)
        {
LABEL_254:
          v148 = 0;
          v149 = 0;
          goto LABEL_956;
        }
      }
      v148 = *(_QWORD *)v147;
      v149 = *(_QWORD *)(v147 + 8);
LABEL_956:
      result = sub_22E63F344(a1, v148, v149);
      if (!(_DWORD)result)
        return result;
      v511 = *(_QWORD *)(a2 + 128);
      if ((v511 & 4) != 0 && (v511 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        result = sub_22E63F484(a1, *(_QWORD *)(v511 & 0xFFFFFFFFFFFFFFF8), (v511 & 0xFFFFFFFFFFFFFFF8) + 8);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22E63ED0C((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v513 = *v512;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v515 = *(_QWORD *)v514 + 8 * *(unsigned int *)(v514 + 8);
      }
      else
      {
        v515 = 0;
      }
      if (v513 == (uint64_t *)v515)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v513) & 1) != 0)
      {
        if (++v513 == (uint64_t *)v515)
          return 1;
      }
      return 0;
    case 0x22:
      result = sub_22E6503F0((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22E63ED0C((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v120 = *v119;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v122 = *(_QWORD *)v121 + 8 * *(unsigned int *)(v121 + 8);
      }
      else
      {
        v122 = 0;
      }
      if (v120 == (uint64_t *)v122)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v120) & 1) != 0)
      {
        if (++v120 == (uint64_t *)v122)
          return 1;
      }
      return 0;
    case 0x23:
      result = sub_22E650464((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22E63ED0C((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v101 = *v100;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v103 = *(_QWORD *)v102 + 8 * *(unsigned int *)(v102 + 8);
      }
      else
      {
        v103 = 0;
      }
      if (v101 == (uint64_t *)v103)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v101) & 1) != 0)
      {
        if (++v101 == (uint64_t *)v103)
          return 1;
      }
      return 0;
    case 0x24:
      v104 = *(_QWORD ***)(a2 + 160);
      if (v104)
      {
        if (*v104)
        {
          result = sub_22E63F484(a1, **v104, *v104 + 1);
          if (!(_DWORD)result)
            return result;
        }
      }
      v105 = *(_QWORD *)(a2 + 120);
      if ((v105 & 4) != 0)
      {
        v495 = (uint64_t *)(v105 & 0xFFFFFFFFFFFFFFF8);
        v106 = *v495;
        v107 = v495[1];
      }
      else
      {
        v106 = 0;
        v107 = 0;
      }
      result = sub_22E63F344(a1, v106, v107);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFD5760(a2) != 2)
        return 1;
      result = sub_22E63ED0C((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v497 = *v496;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v499 = *(_QWORD *)v498 + 8 * *(unsigned int *)(v498 + 8);
      }
      else
      {
        v499 = 0;
      }
      if (v497 == (uint64_t *)v499)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v497) & 1) != 0)
      {
        if (++v497 == (uint64_t *)v499)
          return 1;
      }
      return 0;
    case 0x25:
      v63 = *(_QWORD *)(a2 + 184);
      if (!v63)
        goto LABEL_104;
      v64 = *(_DWORD *)(v63 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v64)
        goto LABEL_104;
      v65 = (_QWORD *)(v63 + 16);
      v66 = 8 * v64;
      while ((sub_22E63FBEC(a1, *v65) & 1) != 0)
      {
        ++v65;
        v66 -= 8;
        if (!v66)
        {
LABEL_104:
          v67 = *(_QWORD *)(a2 + 192);
          v68 = *(unsigned int *)(v67 + 8);
          if ((_DWORD)v68)
          {
            v69 = v67 + 16;
            while ((sub_22E64FFF0((uint64_t)a1, v69) & 1) != 0)
            {
              v69 += 32;
              if (!--v68)
                goto LABEL_108;
            }
            return 0;
          }
LABEL_108:
          result = sub_22E650464((uint64_t)a1, a2);
          if (!(_DWORD)result)
            return result;
          result = sub_22E63ED0C((uint64_t)a1, a2 + 64);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v3 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v71 = *v70;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v73 = *(_QWORD *)v72 + 8 * *(unsigned int *)(v72 + 8);
            }
            else
            {
              v73 = 0;
            }
            if (v71 != (uint64_t *)v73)
            {
              while ((sub_22E63EDA8((uint64_t)a1, *v71) & 1) != 0)
              {
                if (++v71 == (uint64_t *)v73)
                  return 1;
              }
              return 0;
            }
          }
          return 1;
        }
      }
      return 0;
    case 0x26:
      v415 = *(_QWORD *)(a2 + 48);
      if (v415)
      {
        result = sub_22E64FA80(a1, v415 & 0xFFFFFFFFFFFFFFF0);
        if (!(_DWORD)result)
          return result;
      }
      if ((*(_BYTE *)(a2 + 60) & 4) == 0)
        goto LABEL_1001;
      v416 = *(_QWORD *)(a2 + 152);
      if (v416)
      {
        if ((sub_22E643AD8((uint64_t)a1, v416, 0) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22E650350((uint64_t)a1, a2 + 80);
        if (!(_DWORD)result)
          return result;
      }
LABEL_1001:
      v531 = *(_QWORD *)(a2 + 72);
      if (v531 >= 8 && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v532 = (_QWORD *)(v531 & 0xFFFFFFFFFFFFFFF8);
        if ((*(_QWORD *)(a2 + 72) & 6) == 4 && v532)
          v532 = (_QWORD *)v532[1];
        result = sub_22E63F484(a1, *v532, v532 + 1);
        if (!(_DWORD)result)
          return result;
      }
      v533 = *(_DWORD *)v3 & 0x7F;
      v534 = v533 > 0x39 || ((1 << v533) & 0x3F0003E01011066) == 0;
      v535 = !v534 || v533 - 70 <= 0xD && ((1 << (v533 - 70)) & 0x2803) != 0 || v533 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E63ED0C((uint64_t)a1, v535);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v537 = *v536;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v539 = *(_QWORD *)v538 + 8 * *(unsigned int *)(v538 + 8);
      }
      else
      {
        v539 = 0;
      }
      if (v537 == (uint64_t *)v539)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v537) & 1) != 0)
      {
        if (++v537 == (uint64_t *)v539)
          return 1;
      }
      return 0;
    case 0x27:
      return (sub_22E650220((uint64_t)a1, a2) & 1) != 0;
    case 0x28:
      v181 = *(_QWORD *)(a2 + 80);
      v182 = (_QWORD *)(v181 & 0xFFFFFFFFFFFFFFF8);
      if ((v181 & 4) != 0)
        v182 = (_QWORD *)*v182;
      result = sub_22E63F484(a1, *v182, v182 + 1);
      if (!(_DWORD)result)
        return result;
      v183 = *(_DWORD *)v3 & 0x7F;
      v184 = v183 > 0x39 || ((1 << v183) & 0x3F0003E01011066) == 0;
      v185 = !v184 || v183 - 70 <= 0xD && ((1 << (v183 - 70)) & 0x2803) != 0 || v183 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E63ED0C((uint64_t)a1, v185);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v187 = *v186;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v189 = *(_QWORD *)v188 + 8 * *(unsigned int *)(v188 + 8);
      }
      else
      {
        v189 = 0;
      }
      if (v187 == (uint64_t *)v189)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v187) & 1) != 0)
      {
        if (++v187 == (uint64_t *)v189)
          return 1;
      }
      return 0;
    case 0x29:
      v274 = *(_QWORD *)(a2 + 80);
      v275 = (_QWORD *)(v274 & 0xFFFFFFFFFFFFFFF8);
      if ((v274 & 4) != 0)
        v275 = (_QWORD *)*v275;
      result = sub_22E63F484(a1, *v275, v275 + 1);
      if (!(_DWORD)result)
        return result;
      v276 = *(_DWORD *)v3 & 0x7F;
      v277 = v276 > 0x39 || ((1 << v276) & 0x3F0003E01011066) == 0;
      v278 = !v277 || v276 - 70 <= 0xD && ((1 << (v276 - 70)) & 0x2803) != 0 || v276 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E63ED0C((uint64_t)a1, v278);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v280 = *v279;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v282 = *(_QWORD *)v281 + 8 * *(unsigned int *)(v281 + 8);
      }
      else
      {
        v282 = 0;
      }
      if (v280 == (uint64_t *)v282)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v280) & 1) != 0)
      {
        if (++v280 == (uint64_t *)v282)
          return 1;
      }
      return 0;
    case 0x2A:
      result = sub_22E63F344(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      v383 = *(_DWORD *)v3 & 0x7F;
      v384 = v383 > 0x39 || ((1 << v383) & 0x3F0003E01011066) == 0;
      if (v384 && (v383 - 70 <= 0xD ? (v562 = ((1 << (v383 - 70)) & 0x2803) == 0) : (v562 = 1), v562 && v383 - 19 > 4))
        v385 = 0;
      else
        v385 = sub_22EFCAE04(a2);
      result = sub_22E63ED0C((uint64_t)a1, v385);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v387 = *v386;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v389 = *(_QWORD *)v388 + 8 * *(unsigned int *)(v388 + 8);
      }
      else
      {
        v389 = 0;
      }
      if (v387 == (uint64_t *)v389)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v387) & 1) != 0)
      {
        if (++v387 == (uint64_t *)v389)
          return 1;
      }
      return 0;
    case 0x2B:
      result = sub_22E63ED0C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v41 = *v40;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v43 = *(_QWORD *)v42 + 8 * *(unsigned int *)(v42 + 8);
      }
      else
      {
        v43 = 0;
      }
      if (v41 == (uint64_t *)v43)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v41) & 1) != 0)
      {
        if (++v41 == (uint64_t *)v43)
          return 1;
      }
      return 0;
    case 0x2C:
      result = sub_22E63F344(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
      if (!(_DWORD)result)
        return result;
      v134 = *(_DWORD *)v3 & 0x7F;
      v135 = v134 > 0x39 || ((1 << v134) & 0x3F0003E01011066) == 0;
      if (v135 && (v134 - 70 <= 0xD ? (v558 = ((1 << (v134 - 70)) & 0x2803) == 0) : (v558 = 1), v558 && v134 - 19 > 4))
        v136 = 0;
      else
        v136 = sub_22EFCAE04(a2);
      result = sub_22E63ED0C((uint64_t)a1, v136);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v138 = *v137;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v140 = *(_QWORD *)v139 + 8 * *(unsigned int *)(v139 + 8);
      }
      else
      {
        v140 = 0;
      }
      if (v138 == (uint64_t *)v140)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v138) & 1) != 0)
      {
        if (++v138 == (uint64_t *)v140)
          return 1;
      }
      return 0;
    case 0x2D:
      result = sub_22E63ED0C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v361 = *v360;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v363 = *(_QWORD *)v362 + 8 * *(unsigned int *)(v362 + 8);
      }
      else
      {
        v363 = 0;
      }
      if (v361 == (uint64_t *)v363)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v361) & 1) != 0)
      {
        if (++v361 == (uint64_t *)v363)
          return 1;
      }
      return 0;
    case 0x2E:
      result = sub_22E63ED0C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v437 = *v436;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v439 = *(_QWORD *)v438 + 8 * *(unsigned int *)(v438 + 8);
      }
      else
      {
        v439 = 0;
      }
      if (v437 == (uint64_t *)v439)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v437) & 1) != 0)
      {
        if (++v437 == (uint64_t *)v439)
          return 1;
      }
      return 0;
    case 0x2F:
      result = sub_22E63ED0C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v79 = *v78;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v81 = *(_QWORD *)v80 + 8 * *(unsigned int *)(v80 + 8);
      }
      else
      {
        v81 = 0;
      }
      if (v79 == (uint64_t *)v81)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v79) & 1) != 0)
      {
        if (++v79 == (uint64_t *)v81)
          return 1;
      }
      return 0;
    case 0x30:
      result = sub_22E643AD8((uint64_t)a1, *(_QWORD *)(a2 + 64), 0);
      if (!(_DWORD)result)
        return result;
      v150 = *(_DWORD *)v3 & 0x7F;
      v151 = v150 > 0x39 || ((1 << v150) & 0x3F0003E01011066) == 0;
      if (v151 && (v150 - 70 <= 0xD ? (v559 = ((1 << (v150 - 70)) & 0x2803) == 0) : (v559 = 1), v559 && v150 - 19 > 4))
        v152 = 0;
      else
        v152 = sub_22EFCAE04(a2);
      result = sub_22E63ED0C((uint64_t)a1, v152);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v154 = *v153;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v156 = *(_QWORD *)v155 + 8 * *(unsigned int *)(v155 + 8);
      }
      else
      {
        v156 = 0;
      }
      if (v154 == (uint64_t *)v156)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v154) & 1) != 0)
      {
        if (++v154 == (uint64_t *)v156)
          return 1;
      }
      return 0;
    case 0x31:
      result = sub_22E6504DC((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      v176 = *(_QWORD *)(a2 + 72);
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v516 = v176 & 0xFFFFFFFFFFFFFFFCLL;
        v517 = *(_QWORD *)(a2 + 72) & 3;
        if ((_DWORD)v517 && (_DWORD)v517 != 3)
          v516 = *(_QWORD *)(v516 + 8);
        if ((sub_22E643AD8((uint64_t)a1, v516, 0) & 1) == 0)
          return 0;
      }
      else if ((v176 & 3) != 0 && (v176 & 3) != 3)
      {
        result = sub_22E643AD8((uint64_t)a1, v176 & 0xFFFFFFFFFFFFFFFCLL, 0);
        if (!(_DWORD)result)
          return result;
      }
      v518 = *(_DWORD *)v3 & 0x7F;
      if (v518 <= 0x39 && ((1 << v518) & 0x3F0003E01011066) != 0
        || (v518 - 70 <= 0xD ? (v569 = ((1 << (v518 - 70)) & 0x2803) == 0) : (v569 = 1), !v569 || v518 - 19 <= 4))
      {
        v519 = sub_22EFCAE04(a2);
      }
      else
      {
        v519 = 0;
      }
      result = sub_22E63ED0C((uint64_t)a1, v519);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v521 = *v520;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v523 = *(_QWORD *)v522 + 8 * *(unsigned int *)(v522 + 8);
        }
        else
        {
          v523 = 0;
        }
        for (; v521 != (uint64_t *)v523; ++v521)
        {
          if ((sub_22E63EDA8((uint64_t)a1, *v521) & 1) == 0)
            return 0;
        }
      }
      return 1;
    case 0x32:
      result = sub_22E6504DC((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v32 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v32 = *(_QWORD *)(v32 + 8);
        result = sub_22E643AD8((uint64_t)a1, v32, 0);
        if (!(_DWORD)result)
          return result;
      }
      v33 = *(_DWORD *)v3 & 0x7F;
      v34 = v33 > 0x39 || ((1 << v33) & 0x3F0003E01011066) == 0;
      if (v34 && (v33 - 70 <= 0xD ? (v566 = ((1 << (v33 - 70)) & 0x2803) == 0) : (v566 = 1), v566 && v33 - 19 > 4))
        v35 = 0;
      else
        v35 = sub_22EFCAE04(a2);
      result = sub_22E63ED0C((uint64_t)a1, v35);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v37 = *v36;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v39 = *(_QWORD *)v38 + 8 * *(unsigned int *)(v38 + 8);
      }
      else
      {
        v39 = 0;
      }
      if (v37 == (uint64_t *)v39)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v37) & 1) != 0)
      {
        if (++v37 == (uint64_t *)v39)
          return 1;
      }
      return 0;
    case 0x33:
      result = sub_22E6504DC((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v453 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v453 = *(_QWORD *)(v453 + 8);
        result = sub_22E643AD8((uint64_t)a1, v453, 0);
        if (!(_DWORD)result)
          return result;
      }
      v454 = *(_DWORD *)v3 & 0x7F;
      v455 = v454 > 0x39 || ((1 << v454) & 0x3F0003E01011066) == 0;
      if (v455 && (v454 - 70 <= 0xD ? (v567 = ((1 << (v454 - 70)) & 0x2803) == 0) : (v567 = 1), v567 && v454 - 19 > 4))
        v456 = 0;
      else
        v456 = sub_22EFCAE04(a2);
      result = sub_22E63ED0C((uint64_t)a1, v456);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v458 = *v457;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v460 = *(_QWORD *)v459 + 8 * *(unsigned int *)(v459 + 8);
      }
      else
      {
        v460 = 0;
      }
      if (v458 == (uint64_t *)v460)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v458) & 1) != 0)
      {
        if (++v458 == (uint64_t *)v460)
          return 1;
      }
      return 0;
    case 0x34:
      return (sub_22E631704(a1, a2) & 1) != 0;
    case 0x35:
      result = sub_22E63E8FC(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v75 = *v74;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v77 = *(_QWORD *)v76 + 8 * *(unsigned int *)(v76 + 8);
      }
      else
      {
        v77 = 0;
      }
      if (v75 == (uint64_t *)v77)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v75) & 1) != 0)
      {
        if (++v75 == (uint64_t *)v77)
          return 1;
      }
      return 0;
    case 0x36:
      result = sub_22E63E8FC(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v425 = *v424;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v427 = *(_QWORD *)v426 + 8 * *(unsigned int *)(v426 + 8);
      }
      else
      {
        v427 = 0;
      }
      if (v425 == (uint64_t *)v427)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v425) & 1) != 0)
      {
        if (++v425 == (uint64_t *)v427)
          return 1;
      }
      return 0;
    case 0x37:
      result = sub_22E63E8FC(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v433 = *v432;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v435 = *(_QWORD *)v434 + 8 * *(unsigned int *)(v434 + 8);
      }
      else
      {
        v435 = 0;
      }
      if (v433 == (uint64_t *)v435)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v433) & 1) != 0)
      {
        if (++v433 == (uint64_t *)v435)
          return 1;
      }
      return 0;
    case 0x38:
      result = sub_22E63E8FC(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v83 = *v82;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v85 = *(_QWORD *)v84 + 8 * *(unsigned int *)(v84 + 8);
      }
      else
      {
        v85 = 0;
      }
      if (v83 == (uint64_t *)v85)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v83) & 1) != 0)
      {
        if (++v83 == (uint64_t *)v85)
          return 1;
      }
      return 0;
    case 0x39:
      result = sub_22E63E8FC(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v380 = *v379;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v382 = *(_QWORD *)v381 + 8 * *(unsigned int *)(v381 + 8);
      }
      else
      {
        v382 = 0;
      }
      if (v380 == (uint64_t *)v382)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v380) & 1) != 0)
      {
        if (++v380 == (uint64_t *)v382)
          return 1;
      }
      return 0;
    case 0x3A:
      result = sub_22E6504DC((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      v157 = *(_DWORD *)v3 & 0x7F;
      v158 = v157 > 0x39 || ((1 << v157) & 0x3F0003E01011066) == 0;
      if (v158 && (v157 - 70 <= 0xD ? (v560 = ((1 << (v157 - 70)) & 0x2803) == 0) : (v560 = 1), v560 && v157 - 19 > 4))
        v159 = 0;
      else
        v159 = sub_22EFCAE04(a2);
      result = sub_22E63ED0C((uint64_t)a1, v159);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v161 = *v160;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v163 = *(_QWORD *)v162 + 8 * *(unsigned int *)(v162 + 8);
      }
      else
      {
        v163 = 0;
      }
      if (v161 == (uint64_t *)v163)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v161) & 1) != 0)
      {
        if (++v161 == (uint64_t *)v163)
          return 1;
      }
      return 0;
    case 0x3B:
      result = sub_22E6504DC((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      v390 = *(_QWORD *)(a2 + 72);
      if (v390 >= 4 && (*(_QWORD *)(a2 + 72) & 3) != 1)
      {
        v391 = v390 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_QWORD *)(a2 + 72) & 3) == 2 && v391)
          v391 = *(_QWORD *)(v391 + 8);
        result = sub_22E643AD8((uint64_t)a1, v391, 0);
        if (!(_DWORD)result)
          return result;
      }
      v392 = *(_DWORD *)v3 & 0x7F;
      v393 = v392 > 0x39 || ((1 << v392) & 0x3F0003E01011066) == 0;
      v394 = !v393 || v392 - 70 <= 0xD && ((1 << (v392 - 70)) & 0x2803) != 0 || v392 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E63ED0C((uint64_t)a1, v394);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v396 = *v395;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v398 = *(_QWORD *)v397 + 8 * *(unsigned int *)(v397 + 8);
      }
      else
      {
        v398 = 0;
      }
      if (v396 == (uint64_t *)v398)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v396) & 1) != 0)
      {
        if (++v396 == (uint64_t *)v398)
          return 1;
      }
      return 0;
    case 0x3C:
      result = sub_22E6505A8(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22E650714((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      v190 = *(_DWORD *)v3 & 0x7F;
      v191 = v190 > 0x39 || ((1 << v190) & 0x3F0003E01011066) == 0;
      v192 = !v191 || v190 - 70 <= 0xD && ((1 << (v190 - 70)) & 0x2803) != 0 || v190 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E63ED0C((uint64_t)a1, v192);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v194 = *v193;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v196 = *(_QWORD *)v195 + 8 * *(unsigned int *)(v195 + 8);
      }
      else
      {
        v196 = 0;
      }
      if (v194 == (uint64_t *)v196)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v194) & 1) != 0)
      {
        if (++v194 == (uint64_t *)v196)
          return 1;
      }
      return 0;
    case 0x3D:
      result = sub_22E6505A8(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22E650714((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      v295 = *(unsigned int *)(a2 + 100);
      if (!(_DWORD)v295)
        goto LABEL_534;
      v296 = (_QWORD *)(a2 + 104);
      v297 = 8 * v295;
      while ((sub_22E63FBEC(a1, *v296) & 1) != 0)
      {
        ++v296;
        v297 -= 8;
        if (!v297)
        {
LABEL_534:
          v298 = *(_DWORD *)v3 & 0x7F;
          v299 = v298 > 0x39 || ((1 << v298) & 0x3F0003E01011066) == 0;
          if (v299
            && (v298 - 70 <= 0xD ? (v571 = ((1 << (v298 - 70)) & 0x2803) == 0) : (v571 = 1), v571 && v298 - 19 > 4))
          {
            v300 = 0;
          }
          else
          {
            v300 = sub_22EFCAE04(a2);
          }
          result = sub_22E63ED0C((uint64_t)a1, v300);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v3 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v302 = *v301;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v304 = *(_QWORD *)v303 + 8 * *(unsigned int *)(v303 + 8);
          }
          else
          {
            v304 = 0;
          }
          if (v302 == (uint64_t *)v304)
            return 1;
          while ((sub_22E63EDA8((uint64_t)a1, *v302) & 1) != 0)
          {
            if (++v302 == (uint64_t *)v304)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 0x3E:
      result = sub_22E6505A8(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22E650714((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      v313 = *(_DWORD *)v3 & 0x7F;
      v314 = v313 > 0x39 || ((1 << v313) & 0x3F0003E01011066) == 0;
      v315 = !v314 || v313 - 70 <= 0xD && ((1 << (v313 - 70)) & 0x2803) != 0 || v313 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E63ED0C((uint64_t)a1, v315);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v317 = *v316;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v319 = *(_QWORD *)v318 + 8 * *(unsigned int *)(v318 + 8);
      }
      else
      {
        v319 = 0;
      }
      if (v317 == (uint64_t *)v319)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v317) & 1) != 0)
      {
        if (++v317 == (uint64_t *)v319)
          return 1;
      }
      return 0;
    case 0x3F:
      result = sub_22E6505A8(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22E650714((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      v230 = *(_DWORD *)v3 & 0x7F;
      v231 = v230 > 0x39 || ((1 << v230) & 0x3F0003E01011066) == 0;
      v232 = !v231 || v230 - 70 <= 0xD && ((1 << (v230 - 70)) & 0x2803) != 0 || v230 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E63ED0C((uint64_t)a1, v232);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v234 = *v233;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v236 = *(_QWORD *)v235 + 8 * *(unsigned int *)(v235 + 8);
      }
      else
      {
        v236 = 0;
      }
      if (v234 == (uint64_t *)v236)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v234) & 1) != 0)
      {
        if (++v234 == (uint64_t *)v236)
          return 1;
      }
      return 0;
    case 0x40:
      result = sub_22E6505A8(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22E650714((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      v197 = *(_DWORD *)(a2 + 96) & 0x600;
      if (v197 != 1024)
        goto LABEL_357;
      result = sub_22E643AD8((uint64_t)a1, *(_QWORD *)(a2 + 88) & 0xFFFFFFFFFFFFFFF8, 0);
      if (!(_DWORD)result)
        return result;
      v197 = *(_DWORD *)(a2 + 96) & 0x600;
LABEL_357:
      if (v197 != 1024 && v197 != 512 && *(_QWORD *)(a2 + 88) >= 8uLL)
      {
        v198 = sub_22EFBC5B4(a2);
        v199 = v198;
        if (v198 && (*(_BYTE *)v198 & 0xFE) == 0xAC)
          v199 = *(_QWORD *)(v198 + 16);
        result = sub_22E643AD8((uint64_t)a1, v199, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v200 = *(_DWORD *)v3 & 0x7F, v200 <= 0x39) && ((1 << v200) & 0x3F0003E01011066) != 0
        || v200 - 70 <= 0xD && ((1 << (v200 - 70)) & 0x2803) != 0
        || v200 - 19 <= 4)
      {
        v201 = sub_22EFCAE04(a2);
      }
      else
      {
        v201 = 0;
      }
      result = sub_22E63ED0C((uint64_t)a1, v201);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v203 = *v202;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v205 = *(_QWORD *)v204 + 8 * *(unsigned int *)(v204 + 8);
      }
      else
      {
        v205 = 0;
      }
      if (v203 == (uint64_t *)v205)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v203) & 1) != 0)
      {
        if (++v203 == (uint64_t *)v205)
          return 1;
      }
      return 0;
    case 0x41:
      result = sub_22E6505A8(a1, a2);
      if (!(_DWORD)result)
        return result;
      v309 = *(_QWORD ***)(a2 + 120);
      if (v309)
      {
        if (*v309)
        {
          result = sub_22E63F484(a1, **v309, *v309 + 1);
          if (!(_DWORD)result)
            return result;
        }
      }
      v310 = *(_QWORD *)(a2 + 56);
      if ((v310 & 4) != 0)
      {
        v524 = (uint64_t *)(v310 & 0xFFFFFFFFFFFFFFF8);
        v311 = *v524;
        v312 = v524[1];
      }
      else
      {
        v311 = 0;
        v312 = 0;
      }
      result = sub_22E63F344(a1, v311, v312);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFBC2B0(a2) != 2)
        return 1;
      v525 = *(_DWORD *)v3 & 0x7F;
      if (v525 <= 0x39 && ((1 << v525) & 0x3F0003E01011066) != 0
        || v525 - 70 <= 0xD && ((1 << (v525 - 70)) & 0x2803) != 0
        || v525 - 19 <= 4)
      {
        v526 = sub_22EFCAE04(a2);
      }
      else
      {
        v526 = 0;
      }
      result = sub_22E63ED0C((uint64_t)a1, v526);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v528 = *v527;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v530 = *(_QWORD *)v529 + 8 * *(unsigned int *)(v529 + 8);
      }
      else
      {
        v530 = 0;
      }
      if (v528 == (uint64_t *)v530)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v528) & 1) != 0)
      {
        if (++v528 == (uint64_t *)v530)
          return 1;
      }
      return 0;
    case 0x42:
      result = sub_22E6505A8(a1, a2);
      if (!(_DWORD)result)
        return result;
      v44 = *(_QWORD *)(a2 + 424);
      if (!v44)
        goto LABEL_68;
      v45 = *(_DWORD *)(v44 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v45)
        goto LABEL_68;
      v46 = (_QWORD *)(v44 + 16);
      v47 = 8 * v45;
      while ((sub_22E63FBEC(a1, *v46) & 1) != 0)
      {
        ++v46;
        v47 -= 8;
        if (!v47)
        {
LABEL_68:
          v48 = *(_QWORD *)(a2 + 432);
          v49 = *(unsigned int *)(v48 + 8);
          if ((_DWORD)v49)
          {
            v50 = v48 + 16;
            while ((sub_22E64FFF0((uint64_t)a1, v50) & 1) != 0)
            {
              v50 += 32;
              if (!--v49)
                goto LABEL_72;
            }
          }
          else
          {
LABEL_72:
            result = sub_22E650714((uint64_t)a1, a2);
            if (!(_DWORD)result)
              return result;
            v51 = *(_DWORD *)v3 & 0x7F;
            v52 = v51 > 0x39 || ((1 << v51) & 0x3F0003E01011066) == 0;
            if (v52
              && (v51 - 70 <= 0xD ? (v572 = ((1 << (v51 - 70)) & 0x2803) == 0) : (v572 = 1), v572 && v51 - 19 > 4))
            {
              v53 = 0;
            }
            else
            {
              v53 = sub_22EFCAE04(a2);
            }
            result = sub_22E63ED0C((uint64_t)a1, v53);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v3 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v55 = *v54;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v57 = *(_QWORD *)v56 + 8 * *(unsigned int *)(v56 + 8);
            }
            else
            {
              v57 = 0;
            }
            if (v55 == (uint64_t *)v57)
              return 1;
            while ((sub_22E63EDA8((uint64_t)a1, *v55) & 1) != 0)
            {
              if (++v55 == (uint64_t *)v57)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x43:
      result = sub_22E643AD8((uint64_t)a1, *(_QWORD *)(a2 + 56), 0);
      if (!(_DWORD)result)
        return result;
      v127 = *(_DWORD *)v3 & 0x7F;
      v128 = v127 > 0x39 || ((1 << v127) & 0x3F0003E01011066) == 0;
      if (v128 && (v127 - 70 <= 0xD ? (v557 = ((1 << (v127 - 70)) & 0x2803) == 0) : (v557 = 1), v557 && v127 - 19 > 4))
        v129 = 0;
      else
        v129 = sub_22EFCAE04(a2);
      result = sub_22E63ED0C((uint64_t)a1, v129);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v131 = *v130;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v133 = *(_QWORD *)v132 + 8 * *(unsigned int *)(v132 + 8);
      }
      else
      {
        v133 = 0;
      }
      if (v131 == (uint64_t *)v133)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v131) & 1) != 0)
      {
        if (++v131 == (uint64_t *)v133)
          return 1;
      }
      return 0;
    case 0x44:
      result = sub_22E63ED0C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v466 = *v465;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v468 = *(_QWORD *)v467 + 8 * *(unsigned int *)(v467 + 8);
      }
      else
      {
        v468 = 0;
      }
      if (v466 == (uint64_t *)v468)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v466) & 1) != 0)
      {
        if (++v466 == (uint64_t *)v468)
          return 1;
      }
      return 0;
    case 0x45:
      result = sub_22E63ED0C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v109 = *v108;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v111 = *(_QWORD *)v110 + 8 * *(unsigned int *)(v110 + 8);
      }
      else
      {
        v111 = 0;
      }
      if (v109 == (uint64_t *)v111)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v109) & 1) != 0)
      {
        if (++v109 == (uint64_t *)v111)
          return 1;
      }
      return 0;
    case 0x46:
      v20 = *(_DWORD **)(a2 + 56);
      v23 = *v20;
      v22 = (uint64_t *)(v20 + 4);
      v21 = v23;
      if (!v23)
        return (sub_22E64FA80(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      v24 = 8 * v21;
      while ((sub_22E65076C((uint64_t)a1, *v22) & 1) != 0)
      {
        ++v22;
        v24 -= 8;
        if (!v24)
          return (sub_22E64FA80(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return 0;
    case 0x47:
      result = sub_22E643AD8((uint64_t)a1, *(_QWORD *)(a2 + 88), 0);
      if ((_DWORD)result)
      {
        v62 = *(_QWORD *)(a2 + 96);
        if (!v62)
          return (sub_22E64FA80(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
        result = sub_22E643AD8((uint64_t)a1, v62, 0);
        if ((_DWORD)result)
          return (sub_22E64FA80(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return result;
    case 0x48:
      result = sub_22E63ED0C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v429 = *v428;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v431 = *(_QWORD *)v430 + 8 * *(unsigned int *)(v430 + 8);
      }
      else
      {
        v431 = 0;
      }
      if (v429 == (uint64_t *)v431)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v429) & 1) != 0)
      {
        if (++v429 == (uint64_t *)v431)
          return 1;
      }
      return 0;
    case 0x49:
      result = sub_22E63ED0C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v441 = *v440;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v443 = *(_QWORD *)v442 + 8 * *(unsigned int *)(v442 + 8);
      }
      else
      {
        v443 = 0;
      }
      if (v441 == (uint64_t *)v443)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v441) & 1) != 0)
      {
        if (++v441 == (uint64_t *)v443)
          return 1;
      }
      return 0;
    case 0x4A:
      if (!sub_22E63F344(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v444 = *(_DWORD *)(a2 + 24);
      v445 = *(_QWORD *)(a2 + 80);
      v583 = *(_QWORD *)(a2 + 40);
      v584 = v444;
      v585 = v445;
      if (!sub_22E63F3CC(a1, &v583))
        return 0;
      v446 = *(_DWORD *)v3 & 0x7F;
      v447 = v446 > 0x39 || ((1 << v446) & 0x3F0003E01011066) == 0;
      v448 = !v447 || v446 - 70 <= 0xD && ((1 << (v446 - 70)) & 0x2803) != 0 || v446 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      if (!sub_22E63ED0C((uint64_t)a1, v448))
        return 0;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v450 = *v449;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v452 = *(_QWORD *)v451 + 8 * *(unsigned int *)(v451 + 8);
      }
      else
      {
        v452 = 0;
      }
      while (2)
      {
        if (v450 == (uint64_t *)v452)
          return 1;
        if ((sub_22E63EDA8((uint64_t)a1, *v450) & 1) != 0)
        {
          ++v450;
          continue;
        }
        break;
      }
      return 0;
    case 0x4B:
      v86 = *(unsigned int **)(a2 + 40);
      v87 = *v86;
      v88 = v86[1];
      if (!(_DWORD)v88)
        goto LABEL_146;
      v89 = (uint64_t *)&v86[2 * v87 + 4];
      v90 = 8 * v88;
      while ((sub_22E643AD8((uint64_t)a1, *v89, 0) & 1) != 0)
      {
        ++v89;
        v90 -= 8;
        if (!v90)
        {
          v86 = *(unsigned int **)(a2 + 40);
          v87 = *v86;
LABEL_146:
          if ((_DWORD)v87)
          {
            v91 = (uint64_t *)(v86 + 4);
            v92 = 8 * v87;
            while ((sub_22E65076C((uint64_t)a1, *v91) & 1) != 0)
            {
              ++v91;
              v92 -= 8;
              if (!v92)
                goto LABEL_150;
            }
          }
          else
          {
LABEL_150:
            v93 = *(_DWORD *)v3 & 0x7F;
            v94 = v93 > 0x39 || ((1 << v93) & 0x3F0003E01011066) == 0;
            if (v94
              && (v93 - 70 <= 0xD ? (v564 = ((1 << (v93 - 70)) & 0x2803) == 0) : (v564 = 1), v564 && v93 - 19 > 4))
            {
              v95 = 0;
            }
            else
            {
              v95 = sub_22EFCAE04(a2);
            }
            result = sub_22E63ED0C((uint64_t)a1, v95);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v3 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v97 = *v96;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v99 = *(_QWORD *)v98 + 8 * *(unsigned int *)(v98 + 8);
            }
            else
            {
              v99 = 0;
            }
            if (v97 == (uint64_t *)v99)
              return 1;
            while ((sub_22E63EDA8((uint64_t)a1, *v97) & 1) != 0)
            {
              if (++v97 == (uint64_t *)v99)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x4C:
      v283 = *(_DWORD **)(a2 + 40);
      v286 = *v283;
      v285 = (uint64_t *)(v283 + 4);
      v284 = v286;
      if (!v286)
        goto LABEL_1057;
      v287 = 8 * v284;
      while ((sub_22E65076C((uint64_t)a1, *v285) & 1) != 0)
      {
        ++v285;
        v287 -= 8;
        if (!v287)
        {
          v288 = *(_DWORD *)v3 & 0x7F;
          v289 = v288 > 0x39 || ((1 << v288) & 0x3F0003E01011066) == 0;
          if (v289
            && (v288 - 70 <= 0xD ? (v556 = ((1 << (v288 - 70)) & 0x2803) == 0) : (v556 = 1), v556 && v288 - 19 > 4))
          {
LABEL_1057:
            v290 = 0;
          }
          else
          {
            v290 = sub_22EFCAE04(a2);
          }
          result = sub_22E63ED0C((uint64_t)a1, v290);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v3 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v574 = *v573;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v576 = *(_QWORD *)v575 + 8 * *(unsigned int *)(v575 + 8);
          }
          else
          {
            v576 = 0;
          }
          if (v574 == (uint64_t *)v576)
            return 1;
          while ((sub_22E63EDA8((uint64_t)a1, *v574) & 1) != 0)
          {
            if (++v574 == (uint64_t *)v576)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 0x4D:
      v25 = *(unsigned int **)(a2 + 40);
      v26 = v25[1];
      if (!(_DWORD)v26)
        goto LABEL_1042;
      v27 = (uint64_t *)&v25[2 * *v25 + 4];
      v28 = 8 * v26;
      while ((sub_22E643AD8((uint64_t)a1, *v27, 0) & 1) != 0)
      {
        ++v27;
        v28 -= 8;
        if (!v28)
        {
          v29 = *(_DWORD *)v3 & 0x7F;
          v30 = v29 > 0x39 || ((1 << v29) & 0x3F0003E01011066) == 0;
          if (v30 && (v29 - 70 <= 0xD ? (v551 = ((1 << (v29 - 70)) & 0x2803) == 0) : (v551 = 1), v551 && v29 - 19 > 4))
LABEL_1042:
            v31 = 0;
          else
            v31 = sub_22EFCAE04(a2);
          result = sub_22E63ED0C((uint64_t)a1, v31);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v3 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v553 = *v552;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v555 = *(_QWORD *)v554 + 8 * *(unsigned int *)(v554 + 8);
          }
          else
          {
            v555 = 0;
          }
          if (v553 == (uint64_t *)v555)
            return 1;
          while ((sub_22E63EDA8((uint64_t)a1, *v553) & 1) != 0)
          {
            if (++v553 == (uint64_t *)v555)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 0x4E:
      result = sub_22E63ED0C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v462 = *v461;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v464 = *(_QWORD *)v463 + 8 * *(unsigned int *)(v463 + 8);
      }
      else
      {
        v464 = 0;
      }
      if (v462 == (uint64_t *)v464)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v462) & 1) != 0)
      {
        if (++v462 == (uint64_t *)v464)
          return 1;
      }
      return 0;
    case 0x4F:
      result = sub_22E63ED0C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v17 = *v16;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v19 = *(_QWORD *)v18 + 8 * *(unsigned int *)(v18 + 8);
      }
      else
      {
        v19 = 0;
      }
      if (v17 == (uint64_t *)v19)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v17) & 1) != 0)
      {
        if (++v17 == (uint64_t *)v19)
          return 1;
      }
      return 0;
    case 0x50:
      result = sub_22E63ED0C((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v59 = *v58;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v61 = *(_QWORD *)v60 + 8 * *(unsigned int *)(v60 + 8);
      }
      else
      {
        v61 = 0;
      }
      if (v59 == (uint64_t *)v61)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v59) & 1) != 0)
      {
        if (++v59 == (uint64_t *)v61)
          return 1;
      }
      return 0;
    case 0x51:
      v171 = sub_22EFCAE04(a2);
      result = sub_22E63ED0C((uint64_t)a1, v171);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v173 = *v172;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v175 = *(_QWORD *)v174 + 8 * *(unsigned int *)(v174 + 8);
      }
      else
      {
        v175 = 0;
      }
      if (v173 == (uint64_t *)v175)
        return 1;
      while ((sub_22E63EDA8((uint64_t)a1, *v173) & 1) != 0)
      {
        if (++v173 == (uint64_t *)v175)
          return 1;
      }
      return 0;
    case 0x52:
      result = sub_22E643AD8((uint64_t)a1, *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFFCLL, 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22E643AD8((uint64_t)a1, *(_QWORD *)(a2 + 48), 0);
      if (!(_DWORD)result)
        return result;
      v164 = *(_DWORD *)v3 & 0x7F;
      v165 = v164 > 0x39 || ((1 << v164) & 0x3F0003E01011066) == 0;
      v166 = !v165 || v164 - 70 <= 0xD && ((1 << (v164 - 70)) & 0x2803) != 0 || v164 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E63ED0C((uint64_t)a1, v166);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v3 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v168 = *v167;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v170 = *(_QWORD *)v169 + 8 * *(unsigned int *)(v169 + 8);
      }
      else
      {
        v170 = 0;
      }
      if (v168 == (uint64_t *)v170)
        return 1;
      break;
    case 0x53:
      v10 = *(_QWORD *)(a2 + 88);
      v11 = *(_BYTE **)(v10 + 19016);
      v12 = *(_BYTE **)(v10 + 19024);
      v13 = v12 - v11;
      if (v12 == v11)
      {
        v14 = 0;
        v15 = 0;
      }
      else
      {
        if (v13 < 0)
          abort();
        v14 = (char *)operator new(v12 - v11);
        memmove(v14, v11, v13);
        v15 = &v14[8 * (v13 >> 3)];
      }
      if (v15 - v14 == 8 && (*(_DWORD *)(*(_QWORD *)v14 + 28) & 0x7F) == 0x53)
      {
        operator delete(v14);
        result = sub_22E63ED0C((uint64_t)a1, a2 + 40);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (v14 != v15)
        {
          v500 = v14;
          do
          {
            v501 = *(_QWORD *)v500;
            if ((*(_DWORD *)(*(_QWORD *)v500 + 28) & 0x7Fu) - 1 >= 2
              && ((*(_DWORD *)(*(_QWORD *)v500 + 28) & 0x7Fu) - 35 > 2
               || (v502 = *(_QWORD *)(v501 + 128)) == 0
               || ((*(unsigned __int16 *)(v502 + 8) | (*(unsigned __int8 *)(v502 + 10) << 16)) & 0x100000) == 0)
              && !sub_22E63FBEC(a1, v501))
            {
              if (v14)
                operator delete(v14);
              return 0;
            }
            v500 += 8;
          }
          while (v500 != v15);
        }
        if (v14)
          operator delete(v14);
      }
      if ((*(_BYTE *)(v3 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v504 = *v503;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v506 = *(_QWORD *)v505 + 8 * *(unsigned int *)(v505 + 8);
        }
        else
        {
          v506 = 0;
        }
        for (; v504 != (uint64_t *)v506; ++v504)
        {
          if ((sub_22E63EDA8((uint64_t)a1, *v504) & 1) == 0)
            return 0;
        }
      }
      return 1;
    default:
      return 1;
  }
  while ((sub_22E63EDA8((uint64_t)a1, *v168) & 1) != 0)
  {
    if (++v168 == (uint64_t *)v170)
      return 1;
  }
  return 0;
}

uint64_t sub_22E643AD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD v17[10];

  v17[8] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (a3)
    {
      v4 = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v5 = *(_DWORD *)(a3 + 8);
      if (v5 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v5 = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v5) = v4;
      ++*(_DWORD *)(a3 + 8);
    }
    else
    {
      v17[0] = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v16 = 0x800000001;
      v7 = 1;
      do
      {
        v8 = v7;
        v9 = &v17[v7];
        v10 = *(v9 - 1);
        if ((v10 & 4) != 0)
        {
          v7 = v8 - 1;
          LODWORD(v16) = v8 - 1;
        }
        else
        {
          *(v9 - 1) = v10 | 4;
          v11 = *(unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFF8) - 1;
          if (v11 <= 0xEB)
            __asm { BR              X9 }
          v7 = v16;
          if ((_DWORD)v8 != (_DWORD)v16)
          {
            v12 = &v17[v16 - 1];
            if (&v17[v8] < v12)
            {
              v13 = &v17[v8 + 1];
              do
              {
                v14 = *(v13 - 1);
                *(v13 - 1) = *v12;
                *v12-- = v14;
              }
              while (v13++ < v12);
            }
          }
        }
      }
      while (v7);
    }
  }
  return 1;
}

uint64_t sub_22E64F91C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  if (!a2)
    return 1;
  v4 = a2 + 16;
  v5 = *(_DWORD *)(a2 + 12);
  if ((v5 & 0x1FFFFFFF) != 0)
  {
    v6 = 8 * (v5 & 0x1FFFFFFF);
    v7 = (_QWORD *)(a2 + 16);
    while ((sub_22E63FBEC(a1, *v7) & 1) != 0)
    {
      ++v7;
      v6 -= 8;
      if (!v6)
      {
        v5 = *(_DWORD *)(a2 + 12);
        goto LABEL_7;
      }
    }
    return 0;
  }
  else
  {
LABEL_7:
    if ((v5 & 0x40000000) == 0)
      return 1;
    v8 = *(_QWORD *)(v4 + 8 * (v5 & 0x1FFFFFFF));
    if (!v8)
      return 1;
    result = sub_22E643AD8(a1, v8, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22E64F9BC(_BYTE *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  char v5;

  v2 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 6) != 6 || v2 == 0)
  {
    if ((a2 & 6) != 4)
      return 1;
    if (!v2)
      return 1;
    result = sub_22E64FA1C(a1, *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if ((_DWORD)result)
      return 1;
  }
  else
  {
    v5 = sub_22E64FA1C(a1, *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
    return (v5 & 1) != 0;
  }
  return result;
}

uint64_t sub_22E64FA1C(_BYTE *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (!a2)
    return 1;
  v4 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v4 || (result = sub_22E64FA1C(a1, v4), (_DWORD)result))
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (v6 && (*(_BYTE *)(a2 + 8) & 4) != 0)
      return sub_22E64FA80(a1, v6 & 0xFFFFFFFFFFFFFFF0);
    return 1;
  }
  return result;
}

uint64_t sub_22E64FA80(_BYTE *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _DWORD v46[2];
  uint64_t v47;

  if (a2 < 0x10)
    return 1;
  while (2)
  {
    v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    v5 = *(_DWORD *)(v4 + 16);
    result = 1;
    switch((char)v5)
    {
      case 0:
      case 1:
      case 4:
      case 6:
      case 7:
      case 8:
      case 10:
      case 12:
      case 29:
      case 32:
      case 36:
      case 37:
      case 38:
      case 39:
      case 54:
      case 55:
      case 56:
        goto LABEL_5;
      case 2:
        result = sub_22E64FA80(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(v4 + 19) & 2) == 0)
          return 1;
        v14 = *(_QWORD *)(v4 + 56);
        if (!v14)
          return 1;
        goto LABEL_49;
      case 3:
        result = sub_22E64FA80(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v14 = *(_QWORD *)(v4 + 48);
        if (v14)
          goto LABEL_49;
        return 1;
      case 5:
        result = sub_22E64FA80(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v13 = *(_QWORD *)(v4 + 40);
        return sub_22E643AD8((uint64_t)a1, v13, 0);
      case 13:
      case 48:
        v13 = *(_QWORD *)(v4 + 24);
        return sub_22E643AD8((uint64_t)a1, v13, 0);
      case 14:
        result = sub_22E64FA80(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        v15 = *(_QWORD *)(v4 + 40);
        if (!v15)
          return 1;
        result = sub_22E63FBEC(a1, v15);
        if (!(_DWORD)result)
          return result;
        v16 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v16)
          return 1;
        v17 = v4 + 48;
        v18 = v16 - 1;
        do
        {
          result = sub_22E64FF24((uint64_t)a1, v17);
          v19 = v18-- != 0;
          v20 = v19;
          if (!(_DWORD)result)
            break;
          v17 += 24;
        }
        while ((v20 & 1) != 0);
        return result;
      case 15:
        result = sub_22E64F9BC(a1, *(_QWORD *)(v4 + 40));
        if ((_DWORD)result)
          goto LABEL_19;
        return result;
      case 16:
        v7 = *(_QWORD *)(v4 + 40);
        goto LABEL_22;
      case 17:
        v13 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
        return sub_22E643AD8((uint64_t)a1, v13, 0);
      case 18:
        return sub_22E64FA1C(a1, *(_QWORD *)(v4 + 32));
      case 19:
        v7 = *(_QWORD *)(v4 + 40);
        if (!v7)
          goto LABEL_23;
LABEL_22:
        result = sub_22E643AD8((uint64_t)a1, v7, 0);
        if (!(_DWORD)result)
          return result;
LABEL_23:
        v6 = (unint64_t *)(v4 + 48);
        goto LABEL_6;
      case 20:
        result = sub_22E64FA1C(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v21 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v21)
          return 1;
        v22 = v4 + 48;
        v23 = v21 - 1;
        do
        {
          result = sub_22E64FF24((uint64_t)a1, v22);
          v19 = v23-- != 0;
          v24 = v19;
          if (!(_DWORD)result)
            break;
          v22 += 24;
        }
        while ((v24 & 1) != 0);
        return result;
      case 21:
        v8 = *(_QWORD *)(v4 + 48);
        if (v8)
        {
          result = sub_22E643AD8((uint64_t)a1, v8, 0);
          if (!(_DWORD)result)
            return result;
        }
        goto LABEL_31;
      case 22:
        goto LABEL_34;
      case 23:
        v9 = *(_QWORD *)(v4 + 64);
        if (!v9)
          goto LABEL_5;
        goto LABEL_35;
      case 24:
        v10 = *(_QWORD *)(v4 + 32);
        if (v10)
        {
          result = sub_22E64FA1C(a1, v10);
          if (!(_DWORD)result)
            return result;
        }
LABEL_31:
        v6 = (unint64_t *)(v4 + 40);
        goto LABEL_6;
      case 25:
      case 28:
      case 49:
LABEL_19:
        v6 = (unint64_t *)(v4 + 24);
        goto LABEL_6;
      case 26:
        result = sub_22E64FA80(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        v25 = *(_QWORD *)(v4 + 16);
        v26 = (unsigned __int16)(v25 >> 38);
        if (!(unsigned __int16)(v25 >> 38))
          goto LABEL_82;
        v27 = 8 * v26;
        v28 = (_QWORD *)(v4 + 40);
        break;
      case 30:
        v11 = *(_QWORD *)(v4 + 48);
        if (v11)
        {
          result = sub_22E643AD8((uint64_t)a1, v11, 0);
          if (!(_DWORD)result)
            return result;
        }
LABEL_34:
        v9 = *(_QWORD *)(v4 + 56);
        if (!v9)
          goto LABEL_5;
LABEL_35:
        result = sub_22E643AD8((uint64_t)a1, v9, 0);
        if (!(_DWORD)result)
          return result;
LABEL_5:
        v6 = (unint64_t *)(v4 + 32);
LABEL_6:
        a2 = *v6;
        if (*v6 < 0x10)
          return 1;
        continue;
      case 31:
        v12 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0;
        goto LABEL_40;
      case 33:
        v35 = *(_QWORD *)(v4 + 24);
        if (*(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0) != v4)
        {
          result = sub_22E64FA80(a1, v35);
          if (!(_DWORD)result)
            return result;
        }
        v36 = (*(_QWORD *)(v4 + 16) >> 19) & 0x7FLL;
        if (!v36)
          return 1;
        v37 = (uint64_t *)(v4 + 48);
        v38 = 8 * v36 - 8;
        do
        {
          v39 = *v37++;
          result = sub_22E64FA80(a1, v39);
          if ((_DWORD)result)
            v40 = v38 == 0;
          else
            v40 = 1;
          v38 -= 8;
        }
        while (!v40);
        return result;
      case 40:
        while ((v5 & 0x100000) != 0)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v4 = sub_22F10CF48(v4);
          v5 = *(_DWORD *)(v4 + 16);
        }
        goto LABEL_5;
      case 41:
        while ((v5 & 0x100000) != 0)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v4 = sub_22F10CF48(v4);
          v5 = *(_DWORD *)(v4 + 16);
        }
        goto LABEL_5;
      case 42:
        v41 = *(_DWORD *)(v4 + 20);
        v47 = *(_QWORD *)(v4 + 40);
        v46[0] = 8;
        v46[1] = v41;
        return sub_22E64FF24((uint64_t)a1, (uint64_t)v46);
      case 43:
        v6 = (unint64_t *)(v4 + 8);
        goto LABEL_6;
      case 46:
        result = sub_22E64F9BC(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v42 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v42)
          return 1;
        v43 = v4 + 40;
        v44 = v42 - 1;
        do
        {
          result = sub_22E64FF24((uint64_t)a1, v43);
          v19 = v44-- != 0;
          v45 = v19;
          if (!(_DWORD)result)
            break;
          v43 += 24;
        }
        while ((v45 & 1) != 0);
        return result;
      case 51:
        v12 = *(_QWORD *)(v4 + 24);
LABEL_40:
        result = sub_22E64FA80(a1, v12);
        if (!(_DWORD)result)
          return result;
        goto LABEL_5;
      default:
        return result;
    }
    break;
  }
  do
  {
    if ((sub_22E64FA80(a1, *v28) & 1) == 0)
      return 0;
    ++v28;
    v27 -= 8;
  }
  while (v27);
  v25 = *(_QWORD *)(v4 + 16);
  v26 = (unsigned __int16)(v25 >> 38);
LABEL_82:
  if ((v25 & 0x3C0000000000000) == 0x80000000000000)
  {
    v29 = (_DWORD *)((v4 + 40 + 8 * v26 + 4 * ((v25 >> 59) & 1) + 7) & 0xFFFFFFFFFFFFFFF8);
    v32 = *v29;
    v31 = v29 + 2;
    v30 = v32;
    if (v32)
    {
      v33 = 8 * v30;
      while ((sub_22E64FA80(a1, *v31) & 1) != 0)
      {
        ++v31;
        v33 -= 8;
        if (!v33)
          goto LABEL_87;
      }
      return 0;
    }
  }
LABEL_87:
  v34 = sub_22F257D3C(v4);
  if (!v34)
    return 1;
  v14 = v34;
LABEL_49:
  result = sub_22E643AD8((uint64_t)a1, v14, 0);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22E64FF24(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v8;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      result = sub_22E64FA80(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      result = sub_22E64F9BC(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22E643AD8(a1, *(_QWORD *)(a2 + 8), 0);
      break;
    case 8:
      v4 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v4)
      {
        v5 = *(_QWORD *)(a2 + 8);
        v6 = v4 - 1;
        do
        {
          result = sub_22E64FF24(a1, v5);
          v8 = v6-- != 0;
          if (!(_DWORD)result)
            break;
          v5 += 24;
        }
        while (v8);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22E64FFF0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v6 = (_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (v6)
        result = sub_22E63F484(a1, *v6, v6 + 1);
      else
        result = sub_22E64FA80(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      v5 = (_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (!*v5 || (result = sub_22E63F344(a1, *v5, v5[1]), (_DWORD)result))
        result = sub_22E64F9BC(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22E643AD8(a1, *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL, 0);
      break;
    case 8:
      v7 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        v9 = v7 - 1;
        do
        {
          result = sub_22E64FF24(a1, v8);
          v11 = v9-- != 0;
          if (!(_DWORD)result)
            break;
          v8 += 24;
        }
        while (v11);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22E650108(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  __n128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;

  result = sub_22E643AD8(a1, *(_QWORD *)(a2 + 40), 0);
  if ((_DWORD)result)
  {
    v5 = *(_DWORD *)(a2 + 28) & 0x7F;
    v6 = v5 > 0x39 || ((1 << v5) & 0x3F0003E01011066) == 0;
    if (v6 && (v5 - 70 <= 0xD ? (v8 = ((1 << (v5 - 70)) & 0x2803) == 0) : (v8 = 1), v8 && v5 - 19 > 4))
      v7 = 0;
    else
      v7 = sub_22EFCAE04(a2);
    result = sub_22E63ED0C(a1, v7);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      v9.n128_f64[0] = sub_22EFC8E88(a2);
      v11 = *v10;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        v9.n128_f64[0] = sub_22EFC8E88(a2);
        v13 = *(_QWORD *)v12 + 8 * *(unsigned int *)(v12 + 8);
      }
      else
      {
        v13 = 0;
      }
      if (v11 == v13)
      {
        return 1;
      }
      else
      {
        v14 = v11 + 8;
        do
        {
          result = sub_22E63EDA8(a1, *(_QWORD *)(v14 - 8), v9);
          if ((_DWORD)result)
            v15 = v14 == v13;
          else
            v15 = 1;
          v14 += 8;
        }
        while (!v15);
      }
    }
  }
  return result;
}

uint64_t sub_22E650220(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  if (!*(_DWORD *)(a2 + 96))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 80);
  v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (_QWORD *)*v5;
  result = sub_22E63F484(a1, *v5, v5 + 1);
  if ((_DWORD)result)
  {
LABEL_5:
    v7 = *(_DWORD *)(a2 + 28) & 0x7F;
    v8 = v7 > 0x39 || ((1 << v7) & 0x3F0003E01011066) == 0;
    if (v8 && (v7 - 70 <= 0xD ? (v10 = ((1 << (v7 - 70)) & 0x2803) == 0) : (v10 = 1), v10 && v7 - 19 > 4))
      v9 = 0;
    else
      v9 = sub_22EFCAE04(a2);
    result = sub_22E63ED0C(a1, v9);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v12 = *v11;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v14 = *(_QWORD *)v13 + 8 * *(unsigned int *)(v13 + 8);
      }
      else
      {
        v14 = 0;
      }
      if (v12 == v14)
      {
        return 1;
      }
      else
      {
        v15 = v12 + 8;
        do
        {
          result = sub_22E63EDA8(a1, *(_QWORD *)(v15 - 8));
          if ((_DWORD)result)
            v16 = v15 == v14;
          else
            v16 = 1;
          v15 += 8;
        }
        while (!v16);
      }
    }
  }
  return result;
}

uint64_t sub_22E650350(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  __int128 v11;
  uint64_t v12;

  result = sub_22E63F344(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    v11 = *(_OWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 40);
    result = sub_22E63F3CC(a1, &v11);
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)(a2 + 64);
      if (v5 && (v6 = *(unsigned int *)(v5 + 8), (_DWORD)v6))
      {
        v7 = v5 + 16;
        v8 = v6 - 1;
        do
        {
          result = sub_22E64FFF0(a1, v7);
          v10 = v8-- != 0;
          if (!(_DWORD)result)
            break;
          v7 += 32;
        }
        while (v10);
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22E6503F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 120);
  if ((v3 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v3 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22E64F91C(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v3 = *(_QWORD *)(a2 + 120);
      if ((v3 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  return sub_22E63F344(a1, v7, v8);
}

uint64_t sub_22E650464(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;

  result = sub_22E6503F0(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a2 + 74) & 1) == 0)
      return 1;
    v5 = sub_22E46A3A0(a2);
    if (v5 == v6)
    {
      return 1;
    }
    else
    {
      v7 = v6;
      v8 = v5 + 24;
      do
      {
        result = sub_22E63F484(a1, **(_QWORD **)(v8 - 8), *(_QWORD *)(v8 - 8) + 8);
        if ((_DWORD)result)
          v9 = v8 == v7;
        else
          v9 = 1;
        v8 += 24;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t sub_22E6504DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22E64F91C(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22E63F344(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_QWORD *)(a2 + 56);
    if ((v10 & 4) != 0)
    {
      v11 = *(_QWORD **)((v10 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (v11)
        return (sub_22E63F484(a1, *v11, v11 + 1) & 1) != 0;
    }
    else if (v10 >= 8)
    {
      v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
      return (sub_22E63F484(a1, *v11, v11 + 1) & 1) != 0;
    }
    result = sub_22E64FA80(a1, *(_QWORD *)(a2 + 48));
    if (!(_DWORD)result)
      return result;
    return 1;
  }
  return result;
}

BOOL sub_22E6505A8(_BYTE *a1, unint64_t a2)
{
  int v4;
  _BOOL8 result;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int i;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  sub_22EFBB794(a2);
  if (v4)
  {
    result = 0;
    *a1 = 0;
    return result;
  }
  if (!a2 || (v6 = a2, (*(_DWORD *)(a2 + 28) & 0x7F) != 0x53))
  {
    v7 = *(_QWORD *)(a2 + 16);
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
    if ((v7 & 4) != 0)
      v8 = *(_QWORD *)v8;
    for (i = *(_WORD *)(v8 + 8) & 0x7F; i != 83; i = *(_WORD *)(v8 + 8) & 0x7F)
    {
      v10 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v10 = -56;
          goto LABEL_24;
        }
        if (i == 81)
          goto LABEL_24;
      }
      else
      {
        if (i <= 0x18)
        {
          if (i == 16)
            goto LABEL_11;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_24;
          if (i == 24)
          {
LABEL_11:
            v10 = -48;
            goto LABEL_24;
          }
        }
        if (i == 70)
        {
          v10 = -64;
          goto LABEL_24;
        }
      }
      v11 = i - 52;
      if ((i - 33) >= 5)
        v12 = -48;
      else
        v12 = -64;
      if (v11 >= 6)
        v10 = v12;
      else
        v10 = -72;
LABEL_24:
      v13 = *(_QWORD *)(v8 + v10 + 16);
      v8 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0)
        v8 = *(_QWORD *)v8;
    }
    v6 = v8 - 40;
  }
  if (!sub_22EFBBF74(a2, *(_QWORD *)(v6 + 88)))
    return *a1 != 0;
  result = !sub_22E63179C(*(_QWORD *)(a2 + 48));
  *a1 = result;
  return result;
}

uint64_t sub_22E650714(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;

  result = sub_22E6504DC(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
      return 1;
    v5 = sub_22EFBC5B4(a2);
    result = sub_22E643AD8(a1, v5, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22E65076C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *mm;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *i2;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *n;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *ii;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *nn;
  uint64_t v79;
  uint64_t v80;
  _QWORD *i1;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *i;
  uint64_t v92;
  uint64_t v93;
  _QWORD *j;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *jj;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *kk;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *k;
  uint64_t v175;
  uint64_t v176;
  _QWORD *m;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;

  if (!a2)
    return 1;
  switch(*(_DWORD *)(a2 + 8))
  {
    case 3:
      v85 = (_QWORD *)(a2 + 24);
      result = sub_22E643AD8(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
      if ((_DWORD)result)
      {
        v86 = *(unsigned int *)(a2 + 16);
        if (!(_DWORD)v86)
          return 1;
        v87 = 8 * v86;
        do
        {
          if ((sub_22E643AD8(a1, *v85, 0) & 1) == 0)
            return 0;
          ++v85;
          v87 -= 8;
        }
        while (v87);
        return 1;
      }
      return result;
    case 4:
    case 7:
    case 0xC:
    case 0x13:
    case 0x15:
    case 0x23:
    case 0x3C:
    case 0x3D:
    case 0x46:
    case 0x4B:
      v5 = *(_QWORD *)(a2 + 16);
      return (sub_22E643AD8(a1, v5, 0) & 1) != 0;
    case 5:
      v137 = (_QWORD *)(a2 + 24);
      result = sub_22E643AD8(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
      if (!(_DWORD)result)
        return result;
      v138 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v138)
        return 1;
      v139 = 8 * v138;
      while ((sub_22E643AD8(a1, *v137, 0) & 1) != 0)
      {
        ++v137;
        v139 -= 8;
        if (!v139)
          return 1;
      }
      return 0;
    case 6:
      result = sub_22E643AD8(a1, *(_QWORD *)(a2 + 24), 0);
      if (!(_DWORD)result)
        return result;
      v134 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v134)
        return 1;
      v135 = (_QWORD *)(a2 + 40);
      v136 = 8 * v134;
      while ((sub_22E643AD8(a1, *v135, 0) & 1) != 0)
      {
        ++v135;
        v136 -= 8;
        if (!v136)
          return 1;
      }
      return 0;
    case 0xE:
      v88 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v88)
        return 1;
      v89 = a2 + 24;
      v90 = 8 * v88;
      for (i = (_QWORD *)(a2 + 24); (sub_22E643AD8(a1, *i, 0) & 1) != 0; ++i)
      {
        v90 -= 8;
        if (!v90)
        {
          v92 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v92)
            return 1;
          v93 = 8 * v92;
          for (j = (_QWORD *)(v89 + 8 * v92); (sub_22E643AD8(a1, *j, 0) & 1) != 0; ++j)
          {
            v93 -= 8;
            if (!v93)
            {
              v95 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v95)
                return 1;
              v96 = (_QWORD *)(v89 + 8 * v95 + 8 * v95);
              v97 = 8 * v95;
              while ((sub_22E643AD8(a1, *v96, 0) & 1) != 0)
              {
                ++v96;
                v97 -= 8;
                if (!v97)
                {
                  v98 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v98)
                    return 1;
                  v99 = (_QWORD *)(v89 + 8 * v98 + 8 * v98 + 8 * v98);
                  v100 = 8 * v98;
                  while ((sub_22E643AD8(a1, *v99, 0) & 1) != 0)
                  {
                    ++v99;
                    v100 -= 8;
                    if (!v100)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0xF:
      v171 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v171)
        return 1;
      v172 = a2 + 24;
      v173 = 8 * v171;
      for (k = (_QWORD *)(a2 + 24); (sub_22E643AD8(a1, *k, 0) & 1) != 0; ++k)
      {
        v173 -= 8;
        if (!v173)
        {
          v175 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v175)
            return 1;
          v176 = 8 * v175;
          for (m = (_QWORD *)(v172 + 8 * v175); (sub_22E643AD8(a1, *m, 0) & 1) != 0; ++m)
          {
            v176 -= 8;
            if (!v176)
            {
              v178 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v178)
                return 1;
              v179 = (_QWORD *)(v172 + 8 * v178 + 8 * v178);
              v180 = 8 * v178;
              while ((sub_22E643AD8(a1, *v179, 0) & 1) != 0)
              {
                ++v179;
                v180 -= 8;
                if (!v180)
                {
                  v181 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v181)
                    return 1;
                  v182 = (_QWORD *)(v172 + 8 * v181 + 8 * v181 + 8 * v181);
                  v183 = 8 * v181;
                  while ((sub_22E643AD8(a1, *v182, 0) & 1) != 0)
                  {
                    ++v182;
                    v183 -= 8;
                    if (!v183)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x12:
      v184 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v184)
        return 1;
      v185 = (_QWORD *)(a2 + 40);
      v186 = 8 * v184;
      while ((sub_22E643AD8(a1, *v185, 0) & 1) != 0)
      {
        ++v185;
        v186 -= 8;
        if (!v186)
          return 1;
      }
      return 0;
    case 0x14:
    case 0x58:
      v5 = *(_QWORD *)(a2 + 24);
      return (sub_22E643AD8(a1, v5, 0) & 1) != 0;
    case 0x16:
      result = sub_22E643AD8(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 40);
      return (sub_22E643AD8(a1, v5, 0) & 1) != 0;
    case 0x18:
      result = sub_22E643AD8(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 48);
      return (sub_22E643AD8(a1, v5, 0) & 1) != 0;
    case 0x1A:
      v193 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v193)
        return 1;
      v194 = (_QWORD *)(a2 + 24);
      v195 = 8 * v193;
      while ((sub_22E643AD8(a1, *v194, 0) & 1) != 0)
      {
        ++v194;
        v195 -= 8;
        if (!v195)
          return 1;
      }
      return 0;
    case 0x1B:
    case 0x1C:
    case 0x21:
    case 0x24:
    case 0x34:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3E:
    case 0x4E:
      result = sub_22E643AD8(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 32);
      return (sub_22E643AD8(a1, v5, 0) & 1) != 0;
    case 0x1D:
      v40 = a2 + 40;
      v41 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v41)
        goto LABEL_72;
      v42 = 8 * v41;
      v43 = (_QWORD *)(a2 + 40);
      while ((sub_22E643AD8(a1, *v43, 0) & 1) != 0)
      {
        ++v43;
        v42 -= 8;
        if (!v42)
        {
LABEL_72:
          result = sub_22E643AD8(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          v44 = *(unsigned int *)(a2 + 16);
          if ((_DWORD)v44)
          {
            v45 = 8 * v44;
            for (n = (_QWORD *)(v40 + 8 * v44); (sub_22E643AD8(a1, *n, 0) & 1) != 0; ++n)
            {
              v45 -= 8;
              if (!v45)
              {
                v47 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v47)
                  return 1;
                v48 = (_QWORD *)(v40 + 8 * v47 + 8 * v47);
                v49 = 8 * v47;
                while ((sub_22E643AD8(a1, *v48, 0) & 1) != 0)
                {
                  ++v48;
                  v49 -= 8;
                  if (!v49)
                    return 1;
                }
                return 0;
              }
            }
            return 0;
          }
          return 1;
        }
      }
      return 0;
    case 0x1E:
      v82 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v82)
        return 1;
      v83 = (_QWORD *)(a2 + 24);
      v84 = 8 * v82;
      while ((sub_22E643AD8(a1, *v83, 0) & 1) != 0)
      {
        ++v83;
        v84 -= 8;
        if (!v84)
          return 1;
      }
      return 0;
    case 0x1F:
      v187 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v187)
        return 1;
      v188 = (_QWORD *)(a2 + 104);
      v189 = 8 * v187;
      while ((sub_22E643AD8(a1, *v188, 0) & 1) != 0)
      {
        ++v188;
        v189 -= 8;
        if (!v189)
          return 1;
      }
      return 0;
    case 0x22:
      v199 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v199)
        return 1;
      v200 = (_QWORD *)(a2 + 80);
      v201 = 8 * v199;
      while ((sub_22E643AD8(a1, *v200, 0) & 1) != 0)
      {
        ++v200;
        v201 -= 8;
        if (!v201)
          return 1;
      }
      return 0;
    case 0x25:
      if (!sub_22E63F344(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22E63F3CC(a1, &v208))
        return 0;
      v56 = a2 + 96;
      v57 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v57)
        goto LABEL_98;
      v58 = 8 * v57;
      v59 = (_QWORD *)(a2 + 96);
      while ((sub_22E643AD8(a1, *v59, 0) & 1) != 0)
      {
        ++v59;
        v58 -= 8;
        if (!v58)
        {
LABEL_98:
          if (sub_22E643AD8(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22E643AD8(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v60 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v60)
              return 1;
            v61 = 8 * v60;
            for (ii = (_QWORD *)(v56 + 8 * v60); (sub_22E643AD8(a1, *ii, 0) & 1) != 0; ++ii)
            {
              v61 -= 8;
              if (!v61)
              {
                v63 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v63)
                  return 1;
                v64 = (_QWORD *)(v56 + 8 * v63 + 8 * v63);
                v65 = 8 * v63;
                while ((sub_22E643AD8(a1, *v64, 0) & 1) != 0)
                {
                  ++v64;
                  v65 -= 8;
                  if (!v65)
                  {
                    v66 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v66)
                      return 1;
                    v67 = (_QWORD *)(v56 + 8 * v66 + 8 * v66 + 8 * v66);
                    v68 = 8 * v66;
                    while ((sub_22E643AD8(a1, *v67, 0) & 1) != 0)
                    {
                      ++v67;
                      v68 -= 8;
                      if (!v68)
                      {
                        v69 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v69)
                          return 1;
                        v70 = (_QWORD *)(v56 + 8 * v69 + 8 * v69 + 8 * v69 + 8 * v69);
                        v71 = 8 * v69;
                        while ((sub_22E643AD8(a1, *v70, 0) & 1) != 0)
                        {
                          ++v70;
                          v71 -= 8;
                          if (!v71)
                          {
                            v72 = *(unsigned int *)(a2 + 16);
                            if (!(_DWORD)v72)
                              return 1;
                            v73 = (_QWORD *)(v56 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72);
                            v74 = 8 * v72;
                            while ((sub_22E643AD8(a1, *v73, 0) & 1) != 0)
                            {
                              ++v73;
                              v74 -= 8;
                              if (!v74)
                                return 1;
                            }
                            return 0;
                          }
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x27:
      v168 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v168)
        return 1;
      v169 = (_QWORD *)(a2 + 24);
      v170 = 8 * v168;
      while ((sub_22E643AD8(a1, *v169, 0) & 1) != 0)
      {
        ++v169;
        v170 -= 8;
        if (!v170)
          return 1;
      }
      return 0;
    case 0x29:
      v53 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v53)
        return 1;
      v54 = (_QWORD *)(a2 + 32);
      v55 = 8 * v53;
      while ((sub_22E643AD8(a1, *v54, 0) & 1) != 0)
      {
        ++v54;
        v55 -= 8;
        if (!v55)
          return 1;
      }
      return 0;
    case 0x2A:
      v50 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v50)
        return 1;
      v51 = (_QWORD *)(a2 + 80);
      v52 = 8 * v50;
      while ((sub_22E643AD8(a1, *v51, 0) & 1) != 0)
      {
        ++v51;
        v52 -= 8;
        if (!v52)
          return 1;
      }
      return 0;
    case 0x2B:
      v101 = a2 + 64;
      v102 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v102)
        goto LABEL_164;
      v103 = 8 * v102;
      v104 = (_QWORD *)(a2 + 64);
      while ((sub_22E643AD8(a1, *v104, 0) & 1) != 0)
      {
        ++v104;
        v103 -= 8;
        if (!v103)
        {
LABEL_164:
          result = sub_22E643AD8(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22E643AD8(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v105 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v105)
            return 1;
          v106 = 8 * v105;
          for (jj = (_QWORD *)(v101 + 8 * v105); (sub_22E643AD8(a1, *jj, 0) & 1) != 0; ++jj)
          {
            v106 -= 8;
            if (!v106)
            {
              v108 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v108)
                return 1;
              v109 = (_QWORD *)(v101 + 8 * v108 + 8 * v108);
              v110 = 8 * v108;
              while ((sub_22E643AD8(a1, *v109, 0) & 1) != 0)
              {
                ++v109;
                v110 -= 8;
                if (!v110)
                {
                  v111 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v111)
                    return 1;
                  v112 = (_QWORD *)(v101 + 8 * v111 + 8 * v111 + 8 * v111);
                  v113 = 8 * v111;
                  while ((sub_22E643AD8(a1, *v112, 0) & 1) != 0)
                  {
                    ++v112;
                    v113 -= 8;
                    if (!v113)
                    {
                      v114 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v114)
                        return 1;
                      v115 = (_QWORD *)(v101 + 8 * v114 + 8 * v114 + 8 * v114 + 8 * v114);
                      v116 = 8 * v114;
                      while ((sub_22E643AD8(a1, *v115, 0) & 1) != 0)
                      {
                        ++v115;
                        v116 -= 8;
                        if (!v116)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2C:
      v117 = a2 + 64;
      v118 = *(unsigned int *)(a2 + 16);
      result = sub_22E643AD8(a1, *(_QWORD *)(a2 + 64 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118), 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22E643AD8(a1, *(_QWORD *)(v117+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8), 0);
      if (!(_DWORD)result)
        return result;
      v119 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v119)
        goto LABEL_191;
      v120 = 8 * v119;
      v121 = (_QWORD *)(a2 + 64);
      while ((sub_22E643AD8(a1, *v121, 0) & 1) != 0)
      {
        ++v121;
        v120 -= 8;
        if (!v120)
        {
LABEL_191:
          result = sub_22E643AD8(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22E643AD8(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v122 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v122)
            return 1;
          v123 = 8 * v122;
          for (kk = (_QWORD *)(v117 + 8 * v122); (sub_22E643AD8(a1, *kk, 0) & 1) != 0; ++kk)
          {
            v123 -= 8;
            if (!v123)
            {
              v125 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v125)
                return 1;
              v126 = (_QWORD *)(v117 + 8 * v125 + 8 * v125);
              v127 = 8 * v125;
              while ((sub_22E643AD8(a1, *v126, 0) & 1) != 0)
              {
                ++v126;
                v127 -= 8;
                if (!v127)
                {
                  v128 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v128)
                    return 1;
                  v129 = (_QWORD *)(v117 + 8 * v128 + 8 * v128 + 8 * v128);
                  v130 = 8 * v128;
                  while ((sub_22E643AD8(a1, *v129, 0) & 1) != 0)
                  {
                    ++v129;
                    v130 -= 8;
                    if (!v130)
                    {
                      v131 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v131)
                        return 1;
                      v132 = (_QWORD *)(v117 + 8 * v131 + 8 * v131 + 8 * v131 + 8 * v131);
                      v133 = 8 * v131;
                      while ((sub_22E643AD8(a1, *v132, 0) & 1) != 0)
                      {
                        ++v132;
                        v133 -= 8;
                        if (!v133)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2E:
      v190 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v190)
        return 1;
      v191 = (_QWORD *)(a2 + 136);
      v192 = 8 * v190;
      while ((sub_22E643AD8(a1, *v191, 0) & 1) != 0)
      {
        ++v191;
        v192 -= 8;
        if (!v192)
          return 1;
      }
      return 0;
    case 0x35:
      v6 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v6)
        return 1;
      v7 = a2 + 24;
      v8 = 8 * v6;
      for (mm = (_QWORD *)(a2 + 24); (sub_22E643AD8(a1, *mm, 0) & 1) != 0; ++mm)
      {
        v8 -= 8;
        if (!v8)
        {
          v10 = *(unsigned int *)(a2 + 16);
          v11 = (uint64_t *)(v7 + 8 * v10);
          v208 = (unint64_t)v11;
          if ((_DWORD)v10)
          {
            v12 = 0;
            v13 = &v11[v10];
            while (1)
            {
              if ((v12 & 3) != 0)
              {
                if ((v12 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                  v14 = (_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 40);
                else
                  v14 = (_QWORD *)sub_22F3AC1A8(*v11);
                if ((sub_22E643AD8(a1, *v14, 0) & 1) == 0)
                  return 0;
                if (v12 < 4)
                  sub_22F3F2FE0((uint64_t)&v208, 1);
                else
                  sub_22F0D8720((uint64_t)&v208);
              }
              else
              {
                if (!sub_22E643AD8(a1, *v11, 0))
                  return 0;
                *(_QWORD *)&v208 = v11 + 1;
              }
              v12 = *((_QWORD *)&v208 + 1);
              v11 = (uint64_t *)v208;
              if ((uint64_t *)v208 == v13 && *((_QWORD *)&v208 + 1) == 0)
                return 1;
            }
          }
          return 1;
        }
      }
      return 0;
    case 0x3F:
      v75 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v75)
        return 1;
      v76 = a2 + 24;
      v77 = 8 * v75;
      for (nn = (_QWORD *)(a2 + 24); (sub_22E643AD8(a1, *nn, 0) & 1) != 0; ++nn)
      {
        v77 -= 8;
        if (!v77)
        {
          v79 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v79)
            return 1;
          v80 = 8 * v79;
          for (i1 = (_QWORD *)(v76 + 8 * v79); (sub_22E643AD8(a1, *i1, 0) & 1) != 0; ++i1)
          {
            v80 -= 8;
            if (!v80)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 0x42:
      if (!sub_22E63F344(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v208 = *(_OWORD *)(a2 + 80);
      v209 = *(_QWORD *)(a2 + 96);
      if (!sub_22E63F3CC(a1, &v208))
        return 0;
      v140 = a2 + 104;
      v141 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v141)
        goto LABEL_228;
      v142 = 8 * v141;
      v143 = (_QWORD *)(a2 + 104);
      while ((sub_22E643AD8(a1, *v143, 0) & 1) != 0)
      {
        ++v143;
        v142 -= 8;
        if (!v142)
        {
LABEL_228:
          if (sub_22E643AD8(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22E643AD8(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v144 = *(unsigned int *)(a2 + 16);
            if ((_DWORD)v144)
            {
              v145 = 8 * v144;
              v146 = (_QWORD *)(v140 + 8 * v144);
              while ((sub_22E643AD8(a1, *v146, 0) & 1) != 0)
              {
                ++v146;
                v145 -= 8;
                if (!v145)
                {
                  v147 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v147)
                    goto LABEL_246;
                  v148 = (_QWORD *)(v140 + 8 * v147 + 8 * v147);
                  v149 = 8 * v147;
                  while ((sub_22E643AD8(a1, *v148, 0) & 1) != 0)
                  {
                    ++v148;
                    v149 -= 8;
                    if (!v149)
                    {
                      v150 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v150)
                        goto LABEL_246;
                      v151 = (_QWORD *)(v140 + 8 * v150 + 8 * v150 + 8 * v150);
                      v152 = 8 * v150;
                      while ((sub_22E643AD8(a1, *v151, 0) & 1) != 0)
                      {
                        ++v151;
                        v152 -= 8;
                        if (!v152)
                        {
                          v153 = *(unsigned int *)(a2 + 16);
                          if (!(_DWORD)v153)
                            goto LABEL_246;
                          v154 = (_QWORD *)(v140 + 8 * v153 + 8 * v153 + 8 * v153 + 8 * v153);
                          v155 = 8 * v153;
                          while ((sub_22E643AD8(a1, *v154, 0) & 1) != 0)
                          {
                            ++v154;
                            v155 -= 8;
                            if (!v155)
                              goto LABEL_246;
                          }
                          return 0;
                        }
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
            else
            {
LABEL_246:
              if (*(_DWORD *)(a2 + 48) != 1)
                return 1;
              v156 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v156)
                return 1;
              v157 = (_QWORD *)(v140 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156);
              v158 = 8 * v156;
              while ((sub_22E643AD8(a1, *v157, 0) & 1) != 0)
              {
                ++v157;
                v158 -= 8;
                if (!v158)
                {
                  v159 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v159)
                    return 1;
                  v160 = (_QWORD *)(v140 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159);
                  v161 = 8 * v159;
                  while ((sub_22E643AD8(a1, *v160, 0) & 1) != 0)
                  {
                    ++v160;
                    v161 -= 8;
                    if (!v161)
                    {
                      v162 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v162)
                        return 1;
                      v163 = (_QWORD *)(v140 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162);
                      v164 = 8 * v162;
                      while ((sub_22E643AD8(a1, *v163, 0) & 1) != 0)
                      {
                        ++v163;
                        v164 -= 8;
                        if (!v164)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x47:
      result = sub_22E643AD8(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 64);
      return (sub_22E643AD8(a1, v5, 0) & 1) != 0;
    case 0x49:
      v202 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v202)
        return 1;
      v203 = (_QWORD *)(a2 + 24);
      v204 = 8 * v202;
      while ((sub_22E643AD8(a1, *v203, 0) & 1) != 0)
      {
        ++v203;
        v204 -= 8;
        if (!v204)
          return 1;
      }
      return 0;
    case 0x4C:
      v165 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v165)
        return 1;
      v166 = (_QWORD *)(a2 + 24);
      v167 = 8 * v165;
      while ((sub_22E643AD8(a1, *v166, 0) & 1) != 0)
      {
        ++v166;
        v167 -= 8;
        if (!v167)
          return 1;
      }
      return 0;
    case 0x4D:
      if (!sub_22E63F344(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22E63F3CC(a1, &v208))
        return 0;
      v24 = a2 + 96;
      v25 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v25)
        goto LABEL_49;
      v26 = 8 * v25;
      v27 = (_QWORD *)(a2 + 96);
      while ((sub_22E643AD8(a1, *v27, 0) & 1) != 0)
      {
        ++v27;
        v26 -= 8;
        if (!v26)
        {
LABEL_49:
          if (sub_22E643AD8(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22E643AD8(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v28 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v28)
              return 1;
            v29 = 8 * v28;
            for (i2 = (_QWORD *)(v24 + 8 * v28); (sub_22E643AD8(a1, *i2, 0) & 1) != 0; ++i2)
            {
              v29 -= 8;
              if (!v29)
              {
                v31 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v31)
                  return 1;
                v32 = (_QWORD *)(v24 + 8 * v31 + 8 * v31);
                v33 = 8 * v31;
                while ((sub_22E643AD8(a1, *v32, 0) & 1) != 0)
                {
                  ++v32;
                  v33 -= 8;
                  if (!v33)
                  {
                    v34 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v34)
                      return 1;
                    v35 = (_QWORD *)(v24 + 8 * v34 + 8 * v34 + 8 * v34);
                    v36 = 8 * v34;
                    while ((sub_22E643AD8(a1, *v35, 0) & 1) != 0)
                    {
                      ++v35;
                      v36 -= 8;
                      if (!v36)
                      {
                        v37 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v37)
                          return 1;
                        v38 = (_QWORD *)(v24 + 8 * v37 + 8 * v37 + 8 * v37 + 8 * v37);
                        v39 = 8 * v37;
                        while ((sub_22E643AD8(a1, *v38, 0) & 1) != 0)
                        {
                          ++v38;
                          v39 -= 8;
                          if (!v39)
                            return 1;
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x51:
      v16 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v16)
        return 1;
      v17 = (_QWORD *)(a2 + 104);
      v18 = 8 * v16;
      while ((sub_22E643AD8(a1, *v17, 0) & 1) != 0)
      {
        ++v17;
        v18 -= 8;
        if (!v18)
          return 1;
      }
      return 0;
    case 0x59:
      v205 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v205)
        return 1;
      v206 = (_QWORD *)(a2 + 80);
      v207 = 8 * v205;
      while ((sub_22E643AD8(a1, *v206, 0) & 1) != 0)
      {
        ++v206;
        v207 -= 8;
        if (!v207)
          return 1;
      }
      return 0;
    case 0x5A:
      v196 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v196)
        return 1;
      v197 = (_QWORD *)(a2 + 80);
      v198 = 8 * v196;
      while ((sub_22E643AD8(a1, *v197, 0) & 1) != 0)
      {
        ++v197;
        v198 -= 8;
        if (!v198)
          return 1;
      }
      return 0;
    case 0x5B:
      v19 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v19)
        return 1;
      v20 = 0;
      v21 = a2 + 24;
      v22 = 2 * v19;
      break;
    default:
      return 1;
  }
  while (1)
  {
    v23 = *(_QWORD *)(v21 + 8 * (v20 + 1));
    result = sub_22E643AD8(a1, *(_QWORD *)(v21 + 8 * v20), 0);
    if (!(_DWORD)result)
      break;
    if ((sub_22E643AD8(a1, v23, 0) & 1) == 0)
      return 0;
    v20 += 2;
    if (v22 == v20)
      return 1;
  }
  return result;
}

uint64_t sub_22E651820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 1;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4 == v3)
    v5 = 0;
  else
    v5 = *(uint64_t **)(a2 + 24);
  if (v4 == v3)
    v6 = 0;
  else
    v6 = *(uint64_t **)(a2 + 16);
  v14 = 0;
  v15 = 0;
  v13 = v6;
  if (v6 == v5)
    return 1;
  v9 = 0;
  while (1)
  {
    if ((v9 & 3) == 0)
    {
      result = sub_22E643AD8(a1, *v6, a3);
      if (!(_DWORD)result)
        return result;
      v13 = v6 + 1;
      goto LABEL_18;
    }
    v10 = (_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFCLL) != 0 ? (v9 & 0xFFFFFFFFFFFFFFFCLL) + 40 : sub_22F3AC1A8(*v6));
    if ((sub_22E643AD8(a1, *v10, a3) & 1) == 0)
      return 0;
    if (v9 < 4)
      sub_22F3F2FE0((uint64_t)&v13, 1);
    else
      sub_22F0D8720((uint64_t)&v13);
LABEL_18:
    v6 = v13;
    v9 = v14;
    if (v13 == v5 && v14 == 0)
      return 1;
  }
}

void sub_22E651918(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;

  v3 = a1[1];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v5 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 1;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  v4 = MEMORY[0x24BED83D8] + 16;
  v12 = a2;
  llvm::raw_ostream::SetBufferAndMode();
  (*(void (**)(_QWORD, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)**a1 + 96))(**a1, &v4, v3[18] + 15104, 1);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v4);
}

void sub_22E6519BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t NamedValue;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  int v20;
  BOOL v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  int v37;
  int v38;
  BOOL v39;
  unint64_t v40;
  const char *v41;
  unint64_t *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _BYTE v52[128];
  __int128 v53;
  _QWORD v54[4];

  v54[2] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)a1;
  v5 = a2;
  if (sub_22EFBF86C(a2, (unint64_t *)&v50, 0))
  {
    v50 = 0;
    if (sub_22EFBF86C(a2, (unint64_t *)&v50, 0))
      v5 = (unint64_t)v50;
    else
      v5 = 0;
  }
  if (sub_22E462B18(v5))
    v5 = v5 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v5) + 96) & 0x80) == 0);
  sub_22E624994(v4, v5, 0);
  NamedValue = llvm::Module::getNamedValue();
  if (!NamedValue)
  {
    if (sub_22EFBF86C(a2, (unint64_t *)&v50, 0))
    {
      sub_22E631870();
      v7 = llvm::Module::getNamedValue();
    }
    else
    {
      v8 = sub_22E46D978((_QWORD **)(v4 + 280), **(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
      v9 = sub_22E46F2EC(v4 + 280, v8);
      v7 = sub_22E6336F0(v4, v5, 0, v9, 0, 0, 1);
    }
    NamedValue = v7;
  }
  if ((*(_BYTE *)(a2 + 29) & 1) == 0)
    goto LABEL_20;
  sub_22EFC8E88(a2);
  v11 = *(uint64_t **)v10;
  v12 = *(unsigned int *)(v10 + 8);
  v13 = *(uint64_t **)v10;
  if ((_DWORD)v12)
  {
    v16 = 8 * v12;
    v13 = *(uint64_t **)v10;
    while (*(_WORD *)(*v13 + 32) != 327)
    {
      ++v13;
      v16 -= 8;
      if (!v16)
        goto LABEL_20;
    }
  }
  if (v13 == &v11[v12])
  {
LABEL_20:
    v14 = 0;
  }
  else
  {
    do
    {
      v15 = *v11++;
      v14 = v15;
    }
    while (*(_WORD *)(v15 + 32) != 327);
  }
  v50 = v52;
  v51 = 0x800000000;
  v17 = *(unsigned int *)(v14 + 36);
  v18 = *(_DWORD **)(v14 + 40);
  v48 = v18;
  v49 = v17;
  if ((_DWORD)v17 != 7
    || ((v19 = *v18, v20 = *(_DWORD *)((char *)v18 + 3), v19 == 1634100580) ? (v21 = v20 == 1953264993) : (v21 = 0), !v21))
  {
    *(_QWORD *)&v53 = v54;
    *((_QWORD *)&v53 + 1) = 0x100000000;
    llvm::StringRef::split();
    v22 = (unint64_t *)v53;
    if (DWORD2(v53))
    {
      v23 = (unint64_t *)(v53 + 16 * DWORD2(v53));
      do
      {
        v24 = sub_22E63A6F4(v22);
        v26 = v24;
        v27 = v25;
        *v22 = v24;
        v22[1] = v25;
        if (v25 < 3
          || (*(_WORD *)v24 == 28526 ? (v28 = *(_BYTE *)(v24 + 2) == 45) : (v28 = 0), !v28)
          && (v25 < 5
           || (*(_DWORD *)v24 == 1751347809 ? (v29 = *(_BYTE *)(v24 + 4) == 61) : (v29 = 0),
               !v29
            && (v25 < 7 || (*(_DWORD *)v24 == 1634562150 ? (v30 = *(_DWORD *)(v24 + 3) == 1030255713) : (v30 = 0), !v30)))
           && (*(_DWORD *)v24 == 1701737844 ? (v31 = *(_BYTE *)(v24 + 4) == 61) : (v31 = 0), !v31)))
        {
          v32 = v51;
          if (v51 >= (unint64_t)HIDWORD(v51))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v32 = v51;
          }
          v33 = (unint64_t *)((char *)v50 + 16 * v32);
          *v33 = v26;
          v33[1] = v27;
          LODWORD(v51) = v51 + 1;
        }
        v22 += 2;
      }
      while (v22 != v23);
      v22 = (unint64_t *)v53;
    }
    if (v22 != v54)
      free(v22);
  }
  v34 = *(_QWORD *)(a1 + 16);
  v35 = *(unsigned int *)(v14 + 36);
  v36 = *(_DWORD **)(v14 + 40);
  v47 = NamedValue;
  v48 = v36;
  v49 = v35;
  if ((_DWORD)v35 == 7
    && ((v37 = *v36, v38 = *(_DWORD *)((char *)v36 + 3), v37 == 1634100580) ? (v39 = v38 == 1953264993) : (v39 = 0), v39))
  {
    v40 = 0;
    v41 = 0;
  }
  else
  {
    *(_QWORD *)&v53 = v54;
    *((_QWORD *)&v53 + 1) = 0x100000000;
    llvm::StringRef::split();
    if (DWORD2(v53))
    {
      v42 = (unint64_t *)v53;
      v43 = (unint64_t *)(v53 + 16 * DWORD2(v53));
      v41 = "";
      while (1)
      {
        v44 = sub_22E63A6F4(v42);
        *v42 = v44;
        v42[1] = v45;
        v40 = v45 - 5;
        if (v45 >= 5 && *(_DWORD *)v44 == 1751347809 && *(_BYTE *)(v44 + 4) == 61)
          break;
        v42 += 2;
        if (v42 == v43)
        {
          v40 = 0;
          goto LABEL_72;
        }
      }
      v41 = (const char *)(v44 + 5);
    }
    else
    {
      v40 = 0;
      v41 = "";
    }
LABEL_72:
    if ((_QWORD *)v53 != v54)
      free((void *)v53);
  }
  *(_QWORD *)&v53 = v41;
  *((_QWORD *)&v53 + 1) = v40;
  sub_22F29B4E4(v34, &v47, &v53, (uint64_t)&v50);
  if (v50 != v52)
    free(v50);
}

void sub_22E651EB0(uint64_t a1, _QWORD *a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  unsigned int v9;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[18];

  v55[16] = *MEMORY[0x24BDAC8D0];
  if (a4 >= 2)
  {
    v8 = a1;
    if (a4 == 2)
    {
      v9 = sub_22E652F74(*a3, (uint64_t)(a2 - 21));
      if (v9 > sub_22E652F74(*a3, v8))
      {
        v50 = *(_QWORD *)v8;
        v52 = *(_OWORD *)(v8 + 8);
        v53 = v55;
        v54 = 0x800000000;
        if (*(_DWORD *)(v8 + 32))
          sub_22F2528D0((uint64_t)&v53, v8 + 24);
        *(_QWORD *)v8 = *(a2 - 21);
        *(_OWORD *)(v8 + 8) = *((_OWORD *)a2 - 10);
        sub_22F2528D0(v8 + 24, (uint64_t)(a2 - 18));
        *(a2 - 21) = v50;
        *((_OWORD *)a2 - 10) = v52;
        sub_22F2528D0((uint64_t)(a2 - 18), (uint64_t)&v53);
        if (v53 != v55)
          free(v53);
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      if ((_QWORD *)a1 != a2)
      {
        v16 = a1 + 168;
        if ((_QWORD *)(a1 + 168) != a2)
        {
          v17 = a1;
          do
          {
            v18 = (_QWORD *)v16;
            v19 = sub_22E652F74(*a3, v16);
            if (v19 > sub_22E652F74(*a3, v17))
            {
              v51 = *(_OWORD *)(v17 + 176);
              v49 = *v18;
              v53 = v55;
              v54 = 0x800000000;
              if (*(_DWORD *)(v17 + 200))
                sub_22F2528D0((uint64_t)&v53, v17 + 192);
              v20 = v18;
              while (1)
              {
                v21 = v20;
                v20 = (_QWORD *)v17;
                *v21 = *(_QWORD *)v17;
                *(_OWORD *)(v21 + 1) = *(_OWORD *)(v17 + 8);
                v22 = v17 + 24;
                sub_22F2528D0((uint64_t)(v21 + 3), v17 + 24);
                if (v17 == v8)
                  break;
                v23 = *a3;
                if ((_DWORD)v54)
                {
                  v24 = 0;
                  v25 = (char *)v53;
                  v26 = (char *)v53 + 16 * v54;
                  do
                  {
                    v27 = *(_QWORD *)v25;
                    v28 = *((_QWORD *)v25 + 1);
                    v25 += 16;
                    v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 584))(v23, v27, v28);
                    if (v24 <= v29)
                      v24 = v29;
                  }
                  while (v25 != v26);
                }
                else
                {
                  v24 = 0;
                }
                if (*((_QWORD *)&v51 + 1))
                {
                  v30 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 584))(v23, v51);
                  if (v24 <= v30)
                    v24 = v30;
                }
                v17 = (uint64_t)(v20 - 21);
                if (v24 <= sub_22E652F74(*a3, (uint64_t)(v20 - 21)))
                {
                  v31 = v20;
                  goto LABEL_30;
                }
              }
              v31 = (_QWORD *)v8;
LABEL_30:
              *v31 = v49;
              *(_OWORD *)(v20 + 1) = v51;
              sub_22F2528D0(v22, (uint64_t)&v53);
              if (v53 != v55)
                free(v53);
            }
            v16 = (uint64_t)(v18 + 21);
            v17 = (uint64_t)v18;
          }
          while (v18 + 21 != a2);
        }
      }
    }
    else
    {
      v13 = a4 >> 1;
      v14 = (_QWORD *)(a1 + 168 * (a4 >> 1));
      v15 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_22E6523B4(a1, v14, a3, v15, a5);
        v32 = a5 + 168 * v13;
        sub_22E6523B4(v8 + 168 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), v32);
        v33 = a5 + 168 * a4;
        v34 = v32;
        v35 = a5;
        while (v34 != v33)
        {
          v36 = sub_22E652F74(*a3, v34);
          v37 = sub_22E652F74(*a3, v35);
          v38 = (_OWORD *)(v8 + 8);
          v39 = v8 + 24;
          if (v36 <= v37)
          {
            *(_QWORD *)v8 = *(_QWORD *)v35;
            *v38 = *(_OWORD *)(v35 + 8);
            sub_22F2528D0(v39, v35 + 24);
            v35 += 168;
          }
          else
          {
            *(_QWORD *)v8 = *(_QWORD *)v34;
            *v38 = *(_OWORD *)(v34 + 8);
            sub_22F2528D0(v39, v34 + 24);
            v34 += 168;
          }
          v8 += 168;
          if (v35 == v32)
          {
            if (v34 != v33)
            {
              v40 = 0;
              do
              {
                v41 = v34 + v40;
                v42 = v8 + v40;
                *(_QWORD *)v42 = *(_QWORD *)(v34 + v40);
                *(_OWORD *)(v42 + 8) = *(_OWORD *)(v34 + v40 + 8);
                sub_22F2528D0(v8 + v40 + 24, v34 + v40 + 24);
                v40 += 168;
              }
              while (v41 + 168 != v33);
            }
            goto LABEL_45;
          }
        }
        if (v35 != v32)
        {
          v43 = 0;
          do
          {
            v44 = v8 + v43;
            v45 = v35 + v43;
            *(_QWORD *)v44 = *(_QWORD *)(v35 + v43);
            *(_OWORD *)(v44 + 8) = *(_OWORD *)(v35 + v43 + 8);
            sub_22F2528D0(v8 + v43 + 24, v35 + v43 + 24);
            v43 += 168;
          }
          while (v45 + 168 != v32);
        }
LABEL_45:
        if (a5)
        {
          v46 = a4;
          v47 = (_QWORD *)(a5 + 40);
          do
          {
            v48 = (_QWORD *)*(v47 - 2);
            if (v47 != v48)
              free(v48);
            v47 += 21;
            --v46;
          }
          while (v46);
        }
      }
      else
      {
        sub_22E651EB0(a1, v14, a3, v15, a5, a6);
        sub_22E651EB0(v8 + 168 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), a5, a6);
        sub_22E65289C((_QWORD *)v8, v8 + 168 * (a4 >> 1), a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6);
      }
    }
  }
}

uint64_t sub_22E6523B4(uint64_t result, _QWORD *a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _OWORD *v14;
  _QWORD *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  unsigned int v24;
  _OWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unsigned int v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  _OWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  _QWORD *v44;

  if (!a4)
    return result;
  v5 = (_QWORD *)a5;
  v8 = a2;
  v9 = result;
  if (a4 != 2)
  {
    if (a4 == 1)
    {
      *(_QWORD *)a5 = *(_QWORD *)result;
      v10 = *(_OWORD *)(result + 8);
      *(_QWORD *)(a5 + 24) = a5 + 40;
      v11 = a5 + 24;
      *(_OWORD *)(a5 + 8) = v10;
      *(_QWORD *)(a5 + 32) = 0x800000000;
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      v31 = 168 * (a4 >> 1);
      v32 = result + v31;
      sub_22E651EB0(result, result + v31, a3, a4 >> 1, a5, a4 >> 1);
      result = sub_22E651EB0(v9 + v31, v8, a3, a4 - (a4 >> 1), &v5[(unint64_t)v31 / 8], a4 - (a4 >> 1));
      v33 = v9 + v31;
      while ((_QWORD *)v33 != v8)
      {
        v34 = sub_22E652F74(*a3, v33);
        v35 = sub_22E652F74(*a3, v9);
        v36 = v5 + 1;
        result = (uint64_t)(v5 + 3);
        v37 = v5 + 5;
        if (v34 <= v35)
        {
          *v5 = *(_QWORD *)v9;
          *v36 = *(_OWORD *)(v9 + 8);
          v5[3] = v37;
          v5[4] = 0x800000000;
          if (*(_DWORD *)(v9 + 32))
            result = sub_22F2528D0(result, v9 + 24);
          v9 += 168;
        }
        else
        {
          *v5 = *(_QWORD *)v33;
          *v36 = *(_OWORD *)(v33 + 8);
          v5[3] = v37;
          v5[4] = 0x800000000;
          if (*(_DWORD *)(v33 + 32))
            result = sub_22F2528D0(result, v33 + 24);
          v33 += 168;
        }
        v5 += 21;
        if (v9 == v32)
        {
          if ((_QWORD *)v33 != v8)
          {
            v41 = 0;
            do
            {
              v42 = v33 + v41 * 8;
              v5[v41] = *(_QWORD *)(v33 + v41 * 8);
              v43 = *(_OWORD *)(v33 + v41 * 8 + 8);
              v5[v41 + 3] = &v5[v41 + 5];
              result = (uint64_t)&v5[v41 + 3];
              *(_OWORD *)(result - 16) = v43;
              *(_QWORD *)(result + 8) = 0x800000000;
              if (*(_DWORD *)(v33 + v41 * 8 + 32))
                result = sub_22F2528D0(result, v42 + 24);
              v41 += 21;
            }
            while ((_QWORD *)(v42 + 168) != v8);
          }
          return result;
        }
      }
      if (v9 != v32)
      {
        v38 = 0;
        do
        {
          v39 = v9 + v38 * 8;
          v5[v38] = *(_QWORD *)(v9 + v38 * 8);
          v40 = *(_OWORD *)(v9 + v38 * 8 + 8);
          v5[v38 + 3] = &v5[v38 + 5];
          result = (uint64_t)&v5[v38 + 3];
          *(_OWORD *)(result - 16) = v40;
          *(_QWORD *)(result + 8) = 0x800000000;
          if (*(_DWORD *)(v9 + v38 * 8 + 32))
            result = sub_22F2528D0(result, v39 + 24);
          v38 += 21;
        }
        while (v39 + 168 != v32);
      }
      return result;
    }
    if ((_QWORD *)result == a2)
      return result;
    *(_QWORD *)a5 = *(_QWORD *)result;
    v18 = *(_OWORD *)(result + 8);
    *(_QWORD *)(a5 + 24) = a5 + 40;
    result = a5 + 24;
    *(_OWORD *)(a5 + 8) = v18;
    *(_QWORD *)(a5 + 32) = 0x800000000;
    if (*(_DWORD *)(v9 + 32))
      result = sub_22F2528D0(result, v9 + 24);
    v19 = v9 + 168;
    if ((_QWORD *)(v9 + 168) == v8)
      return result;
    v20 = 0;
    v21 = (uint64_t)v5;
    while (1)
    {
      v22 = (_QWORD *)v19;
      v23 = sub_22E652F74(*a3, v19);
      v24 = sub_22E652F74(*a3, v21);
      v25 = (_OWORD *)(v21 + 176);
      result = v21 + 192;
      v26 = v21 + 208;
      if (v23 > v24)
        break;
      *(_QWORD *)(v21 + 168) = *v22;
      *v25 = *(_OWORD *)(v9 + 176);
      *(_QWORD *)(v21 + 192) = v26;
      *(_QWORD *)(v21 + 200) = 0x800000000;
      if (*(_DWORD *)(v9 + 200))
        goto LABEL_30;
LABEL_19:
      v21 += 168;
      v19 = (uint64_t)(v22 + 21);
      v20 += 168;
      v9 = (uint64_t)v22;
      if (v22 + 21 == v8)
        return result;
    }
    *(_QWORD *)(v21 + 168) = *(_QWORD *)v21;
    *v25 = *(_OWORD *)(v21 + 8);
    *(_QWORD *)(v21 + 192) = v26;
    *(_QWORD *)(v21 + 200) = 0x800000000;
    if (*(_DWORD *)(v21 + 32))
      sub_22F2528D0(result, v21 + 24);
    v27 = (char *)v5;
    if ((_QWORD *)v21 != v5)
    {
      v44 = v8;
      v28 = v20;
      while (1)
      {
        v27 = (char *)v5 + v28;
        v29 = sub_22E652F74(*a3, (uint64_t)v22);
        if (v29 <= sub_22E652F74(*a3, (uint64_t)v5 + v28 - 168))
          break;
        *(_QWORD *)v27 = *(_QWORD *)((char *)v5 + v28 - 168);
        *(_OWORD *)(v27 + 8) = *((_OWORD *)v27 - 10);
        sub_22F2528D0((uint64_t)(v27 + 24), (uint64_t)(v27 - 144));
        v28 -= 168;
        if (!v28)
        {
          v27 = (char *)v5;
          break;
        }
      }
      v8 = v44;
    }
    *(_QWORD *)v27 = *v22;
    *(_OWORD *)(v27 + 8) = *(_OWORD *)(v9 + 176);
    result = (uint64_t)(v27 + 24);
LABEL_30:
    result = sub_22F2528D0(result, v9 + 192);
    goto LABEL_19;
  }
  v12 = sub_22E652F74(*a3, (uint64_t)(a2 - 21));
  v13 = sub_22E652F74(*a3, v9);
  v14 = v5 + 1;
  result = (uint64_t)(v5 + 3);
  v15 = v5 + 5;
  if (v12 > v13)
  {
    *v5 = *(v8 - 21);
    *v14 = *((_OWORD *)v8 - 10);
    v5[3] = v15;
    v5[4] = 0x800000000;
    if (*((_DWORD *)v8 - 34))
      result = sub_22F2528D0(result, (uint64_t)(v8 - 18));
    v5[21] = *(_QWORD *)v9;
    v16 = *(_OWORD *)(v9 + 8);
    v5[24] = v5 + 26;
    v11 = (uint64_t)(v5 + 24);
    *(_OWORD *)(v11 - 16) = v16;
    *(_QWORD *)(v11 + 8) = 0x800000000;
LABEL_9:
    if (*(_DWORD *)(v9 + 32))
    {
      v17 = v9 + 24;
      return sub_22F2528D0(v11, v17);
    }
    return result;
  }
  *v5 = *(_QWORD *)v9;
  *v14 = *(_OWORD *)(v9 + 8);
  v5[3] = v15;
  v5[4] = 0x800000000;
  if (*(_DWORD *)(v9 + 32))
    result = sub_22F2528D0(result, v9 + 24);
  v5[21] = *(v8 - 21);
  v30 = *((_OWORD *)v8 - 10);
  v5[24] = v5 + 26;
  v11 = (uint64_t)(v5 + 24);
  *(_OWORD *)(v11 - 16) = v30;
  *(_QWORD *)(v11 + 8) = 0x800000000;
  if (*((_DWORD *)v8 - 34))
  {
    v17 = (uint64_t)(v8 - 18);
    return sub_22F2528D0(v11, v17);
  }
  return result;
}

void sub_22E65289C(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unsigned int v60;
  unsigned int v61;
  _OWORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  void *v84[2];
  _QWORD v85[18];

  v85[16] = *MEMORY[0x24BDAC8D0];
  v81 = a6;
  if (!a6)
    return;
  while (a5 > a8 && v81 > a8)
  {
    if (!a5)
      return;
    v13 = 0;
    v14 = -a5;
    while (1)
    {
      v15 = (uint64_t)&a1[v13];
      v16 = sub_22E652F74(*a4, a2);
      if (v16 > sub_22E652F74(*a4, (uint64_t)&a1[v13]))
        break;
      v13 += 21;
      if (__CFADD__(v14++, 1))
        return;
    }
    v18 = -v14;
    v19 = v81;
    v78 = a4;
    if (-v14 >= v81)
    {
      if (v14 == -1)
      {
        v73 = &a1[v13];
        v82 = a1[v13];
        v83 = *(_OWORD *)&a1[v13 + 1];
        v84[0] = v85;
        v84[1] = (void *)0x800000000;
        if (LODWORD(a1[v13 + 4]))
          sub_22F2528D0((uint64_t)v84, (uint64_t)(v73 + 3));
        *v73 = *(_QWORD *)a2;
        *(_OWORD *)(v73 + 1) = *(_OWORD *)(a2 + 8);
        sub_22F2528D0((uint64_t)(v73 + 3), a2 + 24);
        *(_QWORD *)a2 = v82;
        *(_OWORD *)(a2 + 8) = v83;
        sub_22F2528D0(a2 + 24, (uint64_t)v84);
        if (v84[0] != v85)
          free(v84[0]);
        return;
      }
      if (v14 > 0)
        v18 = 1 - v14;
      v24 = v18 >> 1;
      v25 = (uint64_t)&a1[21 * (v18 >> 1) + v13];
      v23 = a3;
      v21 = 0xCF3CF3CF3CF3CF3DLL * (((uint64_t)a3 - a2) >> 3);
      if (a3 != (uint64_t *)a2)
      {
        v76 = a2;
        v77 = a7;
        v27 = *v78;
        v23 = (uint64_t *)a2;
        do
        {
          v28 = v21 >> 1;
          v29 = (uint64_t)&v23[21 * (v21 >> 1)];
          v30 = v21;
          v31 = sub_22E652F74(v27, v29);
          v32 = sub_22E652F74(v27, v25);
          if (v31 <= v32)
            v21 = v28;
          else
            v21 = v30 + ~(v30 >> 1);
          if (v31 > v32)
            v23 = (uint64_t *)(v29 + 168);
        }
        while (v21);
        a2 = v76;
        a7 = v77;
        v21 = 0xCF3CF3CF3CF3CF3DLL * (((uint64_t)v23 - v76) >> 3);
        v19 = v81;
      }
    }
    else
    {
      if (v81 >= 0)
        v20 = v81;
      else
        v20 = v81 + 1;
      v21 = v20 >> 1;
      v22 = a1;
      v23 = (uint64_t *)(a2 + 168 * v21);
      v75 = v22;
      v24 = 0xCF3CF3CF3CF3CF3DLL * ((a2 - (uint64_t)v22 - v13 * 8) >> 3);
      if (v15 == a2)
      {
        v15 = a2;
LABEL_38:
        v25 = a2;
        v35 = (uint64_t)v23;
        goto LABEL_39;
      }
      v74 = v21;
      v25 = v15;
      do
      {
        v26 = sub_22E652F74(*v78, (uint64_t)v23);
        if (v26 > sub_22E652F74(*v78, v25 + 168 * (v24 >> 1)))
        {
          v24 >>= 1;
        }
        else
        {
          v25 += 168 * (v24 >> 1) + 168;
          v24 += ~(v24 >> 1);
        }
      }
      while (v24);
      v24 = 0xCF3CF3CF3CF3CF3DLL * ((v25 - (uint64_t)v75 - v13 * 8) >> 3);
      v19 = v81;
      v21 = v74;
    }
    if (v25 == a2)
      goto LABEL_38;
    if ((uint64_t *)a2 == v23)
    {
      v23 = (uint64_t *)a2;
      v35 = v25;
    }
    else
    {
      v33 = v21;
      v34 = sub_22E653010(v25, (uint64_t *)a2, v23);
      v21 = v33;
      v19 = v81;
      v35 = (uint64_t)v34;
    }
LABEL_39:
    a5 = -(uint64_t)v24 - v14;
    v36 = v19 - v21;
    if ((uint64_t)(v21 + v24) >= (uint64_t)(v19 - (v21 + v24) - v14))
    {
      v38 = v21;
      sub_22E65289C(v35, v23, a3, v78, -(uint64_t)v24 - v14, v19 - v21, a7, a8);
      v23 = (uint64_t *)v25;
      a4 = v78;
      v36 = v38;
      a5 = v24;
      a3 = (uint64_t *)v35;
    }
    else
    {
      v37 = v25;
      a4 = v78;
      sub_22E65289C(v15, v37, v35, v78, v24, v21, a7, a8);
      v15 = v35;
    }
    v81 = v36;
    a2 = (uint64_t)v23;
    a1 = (_QWORD *)v15;
    if (!v36)
      return;
  }
  if (a5 <= v81)
  {
    if (a1 == (_QWORD *)a2)
      return;
    v45 = 0;
    v41 = 0;
    do
    {
      v46 = a1;
      v47 = &a1[v45 / 8];
      *(_QWORD *)(a7 + v45) = *v47;
      v48 = *(_OWORD *)(v47 + 1);
      *(_QWORD *)(a7 + v45 + 24) = a7 + v45 + 40;
      v49 = a7 + v45 + 24;
      *(_OWORD *)(v49 - 16) = v48;
      *(_QWORD *)(v49 + 8) = 0x800000000;
      if (*((_DWORD *)v47 + 8))
        sub_22F2528D0(v49, (uint64_t)(v47 + 3));
      ++v41;
      v45 += 168;
      v50 = v47 + 21 == (_QWORD *)a2;
      a1 = v46;
    }
    while (!v50);
    if (v45)
    {
      v56 = a7 + v45;
      v57 = a7 + v45 - 168;
      v58 = a7;
      while ((uint64_t *)a2 != a3)
      {
        v59 = a1;
        v60 = sub_22E652F74(*a4, a2);
        v61 = sub_22E652F74(*a4, v58);
        v62 = v59 + 1;
        v63 = (uint64_t)(v59 + 3);
        if (v60 <= v61)
        {
          *v59 = *(_QWORD *)v58;
          *v62 = *(_OWORD *)(v58 + 8);
          sub_22F2528D0(v63, v58 + 24);
          v58 += 168;
        }
        else
        {
          *v59 = *(_QWORD *)a2;
          *v62 = *(_OWORD *)(a2 + 8);
          sub_22F2528D0(v63, a2 + 24);
          a2 += 168;
        }
        a1 = v59 + 21;
        if (v56 == v58)
          goto LABEL_86;
      }
      if (v56 != v58)
      {
        v66 = a7;
        v67 = 0;
        do
        {
          v68 = &a1[v67 / 8];
          v69 = a1;
          v70 = v58 + v67;
          *v68 = *(_QWORD *)(v58 + v67);
          *(_OWORD *)(v68 + 1) = *(_OWORD *)(v58 + v67 + 8);
          sub_22F2528D0((uint64_t)(v68 + 3), v58 + v67 + 24);
          v67 += 168;
          v50 = v57 == v70;
          a1 = v69;
        }
        while (!v50);
        a7 = v66;
      }
    }
  }
  else
  {
    if ((uint64_t *)a2 == a3)
      return;
    v39 = a1;
    v40 = 0;
    v41 = 0;
    do
    {
      v42 = a2 + v40;
      *(_QWORD *)(a7 + v40) = *(_QWORD *)(a2 + v40);
      v43 = *(_OWORD *)(a2 + v40 + 8);
      *(_QWORD *)(a7 + v40 + 24) = a7 + v40 + 40;
      v44 = a7 + v40 + 24;
      *(_OWORD *)(v44 - 16) = v43;
      *(_QWORD *)(v44 + 8) = 0x800000000;
      if (*(_DWORD *)(a2 + v40 + 32))
        sub_22F2528D0(v44, v42 + 24);
      ++v41;
      v40 += 168;
    }
    while ((uint64_t *)(v42 + 168) != a3);
    if (v40)
    {
      v51 = a7 + v40;
      v52 = a3 - 21;
      while ((_QWORD *)a2 != v39)
      {
        v53 = sub_22E652F74(*a4, v51 - 168);
        v54 = sub_22E652F74(*a4, a2 - 168);
        if (v53 <= v54)
          v55 = v51;
        else
          v55 = a2;
        if (v53 <= v54)
          v51 -= 168;
        else
          a2 -= 168;
        *v52 = *(_QWORD *)(v55 - 168);
        *(_OWORD *)(v52 + 1) = *(_OWORD *)(v55 - 160);
        sub_22F2528D0((uint64_t)(v52 + 3), v55 - 144);
        v52 -= 21;
        if (v51 == a7)
          goto LABEL_86;
      }
      if (v51 != a7)
      {
        v64 = 0;
        do
        {
          v65 = &v52[v64 / 8];
          *v65 = *(_QWORD *)(v51 + v64 - 168);
          *(_OWORD *)(v65 + 1) = *(_OWORD *)(v51 + v64 - 160);
          sub_22F2528D0((uint64_t)&v52[v64 / 8 + 3], v51 + v64 - 144);
          v64 -= 168;
        }
        while (v51 + v64 != a7);
      }
    }
  }
LABEL_86:
  if (a7 && v41)
  {
    v71 = (_QWORD *)(a7 + 40);
    do
    {
      v72 = (_QWORD *)*(v71 - 2);
      if (v71 != v72)
        free(v72);
      v71 += 21;
      --v41;
    }
    while (v41);
  }
}

uint64_t sub_22E652F74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t result;

  v4 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = 0;
    v6 = *(uint64_t **)(a2 + 24);
    v7 = &v6[2 * v4];
    do
    {
      v8 = *v6;
      v9 = v6[1];
      v6 += 2;
      v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 584))(a1, v8, v9);
      if (v5 <= v10)
        v5 = v10;
      else
        v5 = v5;
    }
    while (v6 != v7);
  }
  else
  {
    v5 = 0;
  }
  if (!*(_QWORD *)(a2 + 16))
    return v5;
  LODWORD(result) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 584))(a1, *(_QWORD *)(a2 + 8));
  if (v5 <= result)
    return result;
  else
    return v5;
}

uint64_t *sub_22E653010(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[18];

  v4 = a2;
  v18[16] = *MEMORY[0x24BDAC8D0];
  v5 = (uint64_t *)(a1 + 168);
  v6 = a2;
  while (1)
  {
    v14 = *((_OWORD *)v5 - 10);
    v12 = *(v5 - 21);
    v16 = v18;
    v17 = 0x800000000;
    if (*((_DWORD *)v5 - 34))
      sub_22F2528D0((uint64_t)&v16, (uint64_t)(v5 - 18));
    *(v5 - 21) = *v4;
    *((_OWORD *)v5 - 10) = *(_OWORD *)(v4 + 1);
    v7 = v4 + 3;
    sub_22F2528D0((uint64_t)(v5 - 18), (uint64_t)(v4 + 3));
    *v4 = v12;
    *(_OWORD *)(v4 + 1) = v14;
    sub_22F2528D0((uint64_t)(v4 + 3), (uint64_t)&v16);
    if (v16 != v18)
      free(v16);
    v4 += 21;
    if (v7 + 18 == a3)
      break;
    if (v5 == v6)
      v6 = v7 + 18;
    v5 += 21;
  }
  if (v5 != v6)
  {
    v8 = v5;
    v9 = v6;
    do
    {
      while (1)
      {
        v13 = *v8;
        v15 = *(_OWORD *)(v8 + 1);
        v16 = v18;
        v17 = 0x800000000;
        if (*((_DWORD *)v8 + 8))
          sub_22F2528D0((uint64_t)&v16, (uint64_t)(v8 + 3));
        *v8 = *v6;
        *(_OWORD *)(v8 + 1) = *(_OWORD *)(v6 + 1);
        sub_22F2528D0((uint64_t)(v8 + 3), (uint64_t)(v6 + 3));
        *v6 = v13;
        *(_OWORD *)(v6 + 1) = v15;
        sub_22F2528D0((uint64_t)(v6 + 3), (uint64_t)&v16);
        if (v16 != v18)
          free(v16);
        v10 = v8 + 21;
        v6 += 21;
        v8 += 21;
        if (v6 == a3)
          break;
        if (v8 == v9)
          v9 = v6;
        v8 = v10;
      }
      v6 = v9;
    }
    while (v10 != v9);
  }
  return v5;
}

void sub_22E653220(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t CpuSupportsMask;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  void *v45;
  uint64_t v46;
  _QWORD v47[18];

  v47[16] = *MEMORY[0x24BDAC8D0];
  if (a3 >= 2)
  {
    v6 = a1;
    if (a3 == 2)
    {
      CpuSupportsMask = llvm::X86::getCpuSupportsMask();
      if (CpuSupportsMask > llvm::X86::getCpuSupportsMask())
      {
        v42 = *(_QWORD *)v6;
        v44 = *(_OWORD *)(v6 + 8);
        v45 = v47;
        v46 = 0x800000000;
        if (*(_DWORD *)(v6 + 32))
          sub_22F2528D0((uint64_t)&v45, v6 + 24);
        *(_QWORD *)v6 = *(a2 - 21);
        *(_OWORD *)(v6 + 8) = *((_OWORD *)a2 - 10);
        sub_22F2528D0(v6 + 24, (uint64_t)(a2 - 18));
        *(a2 - 21) = v42;
        *((_OWORD *)a2 - 10) = v44;
        sub_22F2528D0((uint64_t)(a2 - 18), (uint64_t)&v45);
        if (v45 != v47)
          free(v45);
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((_QWORD *)a1 != a2)
      {
        v14 = (_QWORD *)(a1 + 168);
        if ((_QWORD *)(a1 + 168) != a2)
        {
          v15 = 0;
          v16 = (_QWORD *)a1;
          do
          {
            v17 = v14;
            v18 = llvm::X86::getCpuSupportsMask();
            if (v18 > llvm::X86::getCpuSupportsMask())
            {
              v43 = *((_OWORD *)v16 + 11);
              v41 = *v17;
              v45 = v47;
              v46 = 0x800000000;
              if (*((_DWORD *)v16 + 50))
                sub_22F2528D0((uint64_t)&v45, (uint64_t)(v16 + 24));
              v19 = v15;
              while (1)
              {
                v20 = v6 + v19;
                *(_QWORD *)(v20 + 168) = *(_QWORD *)(v6 + v19);
                *(_OWORD *)(v20 + 176) = *(_OWORD *)(v6 + v19 + 8);
                v21 = v6 + v19 + 24;
                sub_22F2528D0(v6 + v19 + 192, v21);
                if (!v19)
                  break;
                v22 = llvm::X86::getCpuSupportsMask();
                v19 -= 168;
                if (v22 <= llvm::X86::getCpuSupportsMask())
                {
                  v23 = (_QWORD *)(v6 + v19 + 168);
                  goto LABEL_21;
                }
              }
              v23 = (_QWORD *)v6;
LABEL_21:
              *v23 = v41;
              *(_OWORD *)(v20 + 8) = v43;
              sub_22F2528D0(v21, (uint64_t)&v45);
              if (v45 != v47)
                free(v45);
            }
            v14 = v17 + 21;
            v15 += 168;
            v16 = v17;
          }
          while (v17 + 21 != a2);
        }
      }
    }
    else
    {
      v11 = a3 >> 1;
      v12 = (_QWORD *)(a1 + 168 * (a3 >> 1));
      v13 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_22E6536C4(a1, v12, v13, (uint64_t)a4);
        v24 = (uint64_t)&a4[21 * v11];
        sub_22E6536C4(v6 + 168 * (a3 >> 1), a2, a3 - (a3 >> 1), v24);
        v25 = &a4[21 * a3];
        v26 = v24;
        v27 = a4;
        while ((uint64_t *)v26 != v25)
        {
          v28 = llvm::X86::getCpuSupportsMask();
          v29 = llvm::X86::getCpuSupportsMask();
          v30 = (_OWORD *)(v6 + 8);
          v31 = v6 + 24;
          if (v28 <= v29)
          {
            *(_QWORD *)v6 = *v27;
            *v30 = *(_OWORD *)(v27 + 1);
            sub_22F2528D0(v31, (uint64_t)(v27 + 3));
            v27 += 21;
          }
          else
          {
            *(_QWORD *)v6 = *(_QWORD *)v26;
            *v30 = *(_OWORD *)(v26 + 8);
            sub_22F2528D0(v31, v26 + 24);
            v26 += 168;
          }
          v6 += 168;
          if (v27 == (uint64_t *)v24)
          {
            if ((uint64_t *)v26 != v25)
            {
              v32 = 0;
              do
              {
                v33 = v26 + v32;
                v34 = v6 + v32;
                *(_QWORD *)v34 = *(_QWORD *)(v26 + v32);
                *(_OWORD *)(v34 + 8) = *(_OWORD *)(v26 + v32 + 8);
                sub_22F2528D0(v6 + v32 + 24, v26 + v32 + 24);
                v32 += 168;
              }
              while ((uint64_t *)(v33 + 168) != v25);
            }
            goto LABEL_36;
          }
        }
        if (v27 != (uint64_t *)v24)
        {
          v35 = 0;
          do
          {
            v36 = v6 + v35 * 8;
            v37 = &v27[v35];
            *(_QWORD *)v36 = v27[v35];
            *(_OWORD *)(v36 + 8) = *(_OWORD *)&v27[v35 + 1];
            sub_22F2528D0(v6 + v35 * 8 + 24, (uint64_t)&v27[v35 + 3]);
            v35 += 21;
          }
          while (v37 + 21 != (uint64_t *)v24);
        }
LABEL_36:
        if (a4)
        {
          v38 = a3;
          v39 = a4 + 5;
          do
          {
            v40 = (uint64_t *)*(v39 - 2);
            if (v39 != v40)
              free(v40);
            v39 += 21;
            --v38;
          }
          while (v38);
        }
      }
      else
      {
        sub_22E653220(a1, v12, v13, a4, a5);
        sub_22E653220(v6 + 168 * (a3 >> 1), a2, a3 - (a3 >> 1), a4, a5);
        sub_22E653BCC((uint64_t *)v6, (uint64_t *)(v6 + 168 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), a4, a5);
      }
    }
  }
}

uint64_t sub_22E6536C4(uint64_t result, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  _QWORD *v14;
  __int128 v15;
  _QWORD *v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _OWORD *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t CpuSupportsMask;
  unint64_t v36;
  _OWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  __int128 v41;
  uint64_t v42;
  _QWORD *v43;
  __int128 v44;
  _QWORD *v45;

  if (!a3)
    return result;
  v4 = (_QWORD *)a4;
  v6 = a2;
  v7 = (_QWORD *)result;
  if (a3 != 2)
  {
    if (a3 == 1)
    {
      *(_QWORD *)a4 = *(_QWORD *)result;
      v8 = *(_OWORD *)(result + 8);
      *(_QWORD *)(a4 + 24) = a4 + 40;
      *(_OWORD *)(a4 + 8) = v8;
      *(_QWORD *)(a4 + 32) = 0x800000000;
      if (*(_DWORD *)(result + 32))
      {
        v9 = result + 24;
        v10 = a4 + 24;
        return sub_22F2528D0(v10, v9);
      }
      return result;
    }
    if ((uint64_t)a3 > 8)
    {
      v32 = 21 * (a3 >> 1);
      v33 = result + v32 * 8;
      sub_22E653220(result, result + v32 * 8, a3 >> 1, a4, a3 >> 1);
      result = sub_22E653220(&v7[v32], v6, a3 - (a3 >> 1), &v4[v32], a3 - (a3 >> 1));
      v34 = &v7[v32];
      while (v34 != v6)
      {
        CpuSupportsMask = llvm::X86::getCpuSupportsMask();
        v36 = llvm::X86::getCpuSupportsMask();
        v37 = v4 + 1;
        result = (uint64_t)(v4 + 3);
        v38 = v4 + 5;
        if (CpuSupportsMask <= v36)
        {
          *v4 = *v7;
          *v37 = *(_OWORD *)(v7 + 1);
          v4[3] = v38;
          v4[4] = 0x800000000;
          if (*((_DWORD *)v7 + 8))
            result = sub_22F2528D0(result, (uint64_t)(v7 + 3));
          v7 += 21;
        }
        else
        {
          *v4 = *v34;
          *v37 = *(_OWORD *)(v34 + 1);
          v4[3] = v38;
          v4[4] = 0x800000000;
          if (*((_DWORD *)v34 + 8))
            result = sub_22F2528D0(result, (uint64_t)(v34 + 3));
          v34 += 21;
        }
        v4 += 21;
        if (v7 == (_QWORD *)v33)
        {
          if (v34 != v6)
          {
            v42 = 0;
            do
            {
              v43 = &v34[v42];
              v4[v42] = v34[v42];
              v44 = *(_OWORD *)&v34[v42 + 1];
              v4[v42 + 3] = &v4[v42 + 5];
              result = (uint64_t)&v4[v42 + 3];
              *(_OWORD *)(result - 16) = v44;
              *(_QWORD *)(result + 8) = 0x800000000;
              if (LODWORD(v34[v42 + 4]))
                result = sub_22F2528D0(result, (uint64_t)(v43 + 3));
              v42 += 21;
            }
            while (v43 + 21 != v6);
          }
          return result;
        }
      }
      if (v7 != (_QWORD *)v33)
      {
        v39 = 0;
        do
        {
          v40 = &v7[v39];
          v4[v39] = v7[v39];
          v41 = *(_OWORD *)&v7[v39 + 1];
          v4[v39 + 3] = &v4[v39 + 5];
          result = (uint64_t)&v4[v39 + 3];
          *(_OWORD *)(result - 16) = v41;
          *(_QWORD *)(result + 8) = 0x800000000;
          if (LODWORD(v7[v39 + 4]))
            result = sub_22F2528D0(result, (uint64_t)(v40 + 3));
          v39 += 21;
        }
        while (v40 + 21 != (_QWORD *)v33);
      }
      return result;
    }
    if ((_QWORD *)result == a2)
      return result;
    *(_QWORD *)a4 = *(_QWORD *)result;
    v17 = *(_OWORD *)(result + 8);
    *(_QWORD *)(a4 + 24) = a4 + 40;
    result = a4 + 24;
    *(_OWORD *)(a4 + 8) = v17;
    *(_QWORD *)(a4 + 32) = 0x800000000;
    if (*((_DWORD *)v7 + 8))
      result = sub_22F2528D0(result, (uint64_t)(v7 + 3));
    v18 = v7 + 21;
    if (v7 + 21 == v6)
      return result;
    v19 = 0;
    v20 = v4;
    while (1)
    {
      v21 = v18;
      v22 = llvm::X86::getCpuSupportsMask();
      v23 = v20 + 3;
      v24 = llvm::X86::getCpuSupportsMask();
      v25 = v20 + 22;
      result = (uint64_t)(v20 + 24);
      v26 = v20 + 26;
      if (v22 > v24)
        break;
      v20[21] = *v21;
      *v25 = *((_OWORD *)v7 + 11);
      v20[24] = v26;
      v20[25] = 0x800000000;
      if (*((_DWORD *)v7 + 50))
        goto LABEL_30;
LABEL_19:
      v20 = v23 + 18;
      v18 = v21 + 21;
      v19 += 168;
      v7 = v21;
      if (v21 + 21 == v6)
        return result;
    }
    v20[21] = *v20;
    *v25 = *(_OWORD *)(v20 + 1);
    v20[24] = v26;
    v20[25] = 0x800000000;
    if (*((_DWORD *)v20 + 8))
      sub_22F2528D0(result, (uint64_t)(v20 + 3));
    v27 = (char *)v4;
    if (v20 != v4)
    {
      v45 = v6;
      v28 = v19;
      while (1)
      {
        v29 = llvm::X86::getCpuSupportsMask();
        v27 = (char *)v4 + v28;
        if (v29 <= llvm::X86::getCpuSupportsMask())
          break;
        *(_QWORD *)v27 = *((_QWORD *)v27 - 21);
        *(_OWORD *)(v27 + 8) = *((_OWORD *)v27 - 10);
        sub_22F2528D0((uint64_t)(v27 + 24), (uint64_t)v4 + v28 - 144);
        v28 -= 168;
        if (!v28)
        {
          v27 = (char *)v4;
          break;
        }
      }
      v6 = v45;
    }
    *(_QWORD *)v27 = *v21;
    *(_OWORD *)(v27 + 8) = *((_OWORD *)v7 + 11);
    result = (uint64_t)(v27 + 24);
LABEL_30:
    result = sub_22F2528D0(result, (uint64_t)(v7 + 24));
    goto LABEL_19;
  }
  v11 = llvm::X86::getCpuSupportsMask();
  v12 = llvm::X86::getCpuSupportsMask();
  v13 = v4 + 1;
  result = (uint64_t)(v4 + 3);
  v14 = v4 + 5;
  if (v11 <= v12)
  {
    *v4 = *v7;
    *v13 = *(_OWORD *)(v7 + 1);
    v4[3] = v14;
    v4[4] = 0x800000000;
    if (*((_DWORD *)v7 + 8))
      result = sub_22F2528D0(result, (uint64_t)(v7 + 3));
    v4[21] = *(v6 - 21);
    v30 = *((_OWORD *)v6 - 10);
    v4[24] = v4 + 26;
    v31 = v4 + 24;
    *((_OWORD *)v31 - 1) = v30;
    v31[1] = 0x800000000;
    if (*((_DWORD *)v6 - 34))
    {
      v10 = (uint64_t)v31;
      v9 = (uint64_t)(v6 - 18);
      return sub_22F2528D0(v10, v9);
    }
  }
  else
  {
    *v4 = *(v6 - 21);
    *v13 = *((_OWORD *)v6 - 10);
    v4[3] = v14;
    v4[4] = 0x800000000;
    if (*((_DWORD *)v6 - 34))
      result = sub_22F2528D0(result, (uint64_t)(v6 - 18));
    v4[21] = *v7;
    v15 = *(_OWORD *)(v7 + 1);
    v4[24] = v4 + 26;
    v16 = v4 + 24;
    *((_OWORD *)v16 - 1) = v15;
    v16[1] = 0x800000000;
    if (*((_DWORD *)v7 + 8))
    {
      v10 = (uint64_t)v16;
      v9 = (uint64_t)(v7 + 3);
      return sub_22F2528D0(v10, v9);
    }
  }
  return result;
}

void sub_22E653BCC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t CpuSupportsMask;
  uint64_t *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  _OWORD *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  _OWORD *v58;
  uint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  _OWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  void *v83[2];
  _QWORD v84[18];

  v84[16] = *MEMORY[0x24BDAC8D0];
  v79 = a5;
  if (a5)
  {
    while (a4 > a7 && v79 > a7)
    {
      if (!a4)
        return;
      v12 = 0;
      v13 = -a4;
      while (1)
      {
        CpuSupportsMask = llvm::X86::getCpuSupportsMask();
        v15 = &a1[v12];
        if (CpuSupportsMask > llvm::X86::getCpuSupportsMask())
          break;
        v12 += 21;
        if (__CFADD__(v13++, 1))
          return;
      }
      v17 = -v13;
      v75 = a1;
      v76 = a2;
      v77 = a3;
      if (-v13 >= v79)
      {
        if (v13 == -1)
        {
          v69 = a1;
          v70 = &a1[v12];
          v71 = (uint64_t)&a1[v12 + 3];
          v81 = *v70;
          v72 = v70 + 1;
          v82 = *(_OWORD *)(v70 + 1);
          v83[0] = v84;
          v83[1] = (void *)0x800000000;
          if (*((_DWORD *)v70 + 8))
            sub_22F2528D0((uint64_t)v83, v71);
          v69[v12] = *a2;
          *v72 = *(_OWORD *)(a2 + 1);
          sub_22F2528D0(v71, (uint64_t)(a2 + 3));
          *a2 = v81;
          *(_OWORD *)(a2 + 1) = v82;
          sub_22F2528D0((uint64_t)(a2 + 3), (uint64_t)v83);
          if (v83[0] != v84)
            free(v83[0]);
          return;
        }
        if (v13 > 0)
          v17 = 1 - v13;
        v74 = v17 >> 1;
        if (a3 != a2)
        {
          v25 = 0xCF3CF3CF3CF3CF3DLL * (a3 - a2);
          a3 = a2;
          do
          {
            v26 = &a3[21 * (v25 >> 1)];
            v27 = llvm::X86::getCpuSupportsMask();
            v28 = llvm::X86::getCpuSupportsMask();
            if (v27 <= v28)
              v25 >>= 1;
            else
              v25 += ~(v25 >> 1);
            if (v27 > v28)
              a3 = v26 + 21;
          }
          while (v25);
        }
        v22 = v76;
        v24 = v74;
        v19 = (uint64_t)&a1[21 * v74 + v12];
        v23 = 0xCF3CF3CF3CF3CF3DLL * (a3 - v76);
      }
      else
      {
        if (v79 >= 0)
          v18 = v79;
        else
          v18 = v79 + 1;
        v73 = v18 >> 1;
        v19 = (uint64_t)a2;
        if (v15 != a2)
        {
          v20 = 0xCF3CF3CF3CF3CF3DLL * (((char *)a2 - (char *)a1 - v12 * 8) >> 3);
          v19 = (uint64_t)&a1[v12];
          do
          {
            v21 = llvm::X86::getCpuSupportsMask();
            if (v21 > llvm::X86::getCpuSupportsMask())
            {
              v20 >>= 1;
            }
            else
            {
              v19 += 168 * (v20 >> 1) + 168;
              v20 += ~(v20 >> 1);
            }
          }
          while (v20);
        }
        v22 = a2;
        v23 = v73;
        a3 = &a2[21 * v73];
        v24 = 0xCF3CF3CF3CF3CF3DLL * ((v19 - (uint64_t)v75 - v12 * 8) >> 3);
      }
      v29 = (uint64_t)a3;
      if ((uint64_t *)v19 != v22)
      {
        v29 = v19;
        if (v22 != a3)
        {
          v30 = v24;
          v31 = sub_22E653010(v19, v22, a3);
          v24 = v30;
          v29 = (uint64_t)v31;
        }
      }
      a4 = -(uint64_t)(v24 + v13);
      v32 = v79 - v23;
      if ((uint64_t)(v24 + v23) >= (uint64_t)(v79 - (v24 + v23) - v13))
      {
        v33 = v24;
        sub_22E653BCC(v29, a3, v77, -(uint64_t)(v24 + v13), v32, a6, a7);
        a3 = (uint64_t *)v19;
        v32 = v23;
        a4 = v33;
        v77 = (uint64_t *)v29;
      }
      else
      {
        sub_22E653BCC(v15, v19, v29, v24, v23, a6, a7);
        v15 = (uint64_t *)v29;
      }
      v79 = v32;
      a1 = v15;
      a2 = a3;
      a3 = v77;
      if (!v32)
        return;
    }
    if (a4 <= v79)
    {
      if (a1 == a2)
        return;
      v39 = 0;
      v35 = 0;
      do
      {
        v40 = &a1[v39];
        a6[v39] = a1[v39];
        v41 = *(_OWORD *)&a1[v39 + 1];
        a6[v39 + 3] = (uint64_t)&a6[v39 + 5];
        v42 = (uint64_t)&a6[v39 + 3];
        *(_OWORD *)(v42 - 16) = v41;
        *(_QWORD *)(v42 + 8) = 0x800000000;
        if (LODWORD(a1[v39 + 4]))
          sub_22F2528D0(v42, (uint64_t)(v40 + 3));
        ++v35;
        v39 += 21;
      }
      while (v40 + 21 != a2);
      if (v39 * 8)
      {
        v52 = a3;
        v53 = &a6[v39];
        v80 = (uint64_t)&a6[v39 - 21];
        v54 = a6;
        while (a2 != v52)
        {
          v55 = a1;
          v56 = llvm::X86::getCpuSupportsMask();
          v57 = llvm::X86::getCpuSupportsMask();
          v58 = v55 + 1;
          v59 = (uint64_t)(v55 + 3);
          if (v56 <= v57)
          {
            *v55 = *v54;
            *v58 = *(_OWORD *)(v54 + 1);
            sub_22F2528D0(v59, (uint64_t)(v54 + 3));
            v54 += 21;
          }
          else
          {
            *v55 = *a2;
            *v58 = *(_OWORD *)(a2 + 1);
            sub_22F2528D0(v59, (uint64_t)(a2 + 3));
            a2 += 21;
          }
          a1 = v55 + 21;
          if (v53 == v54)
            goto LABEL_84;
        }
        if (v53 != v54)
        {
          v63 = a6;
          v64 = 0;
          do
          {
            v65 = &a1[v64];
            v66 = &v54[v64];
            *v65 = v54[v64];
            *(_OWORD *)(v65 + 1) = *(_OWORD *)&v54[v64 + 1];
            sub_22F2528D0((uint64_t)&a1[v64 + 3], (uint64_t)&v54[v64 + 3]);
            v64 += 21;
          }
          while ((uint64_t *)v80 != v66);
          a6 = v63;
        }
      }
    }
    else
    {
      if (a2 == a3)
        return;
      v34 = 0;
      v35 = 0;
      do
      {
        v36 = &a2[v34];
        a6[v34] = a2[v34];
        v37 = *(_OWORD *)&a2[v34 + 1];
        a6[v34 + 3] = (uint64_t)&a6[v34 + 5];
        v38 = (uint64_t)&a6[v34 + 3];
        *(_OWORD *)(v38 - 16) = v37;
        *(_QWORD *)(v38 + 8) = 0x800000000;
        if (LODWORD(a2[v34 + 4]))
          sub_22F2528D0(v38, (uint64_t)(v36 + 3));
        ++v35;
        v34 += 21;
      }
      while (v36 + 21 != a3);
      if (v34 * 8)
      {
        v43 = a1;
        v44 = &a6[v34];
        v45 = a3 - 21;
        while (a2 != v43)
        {
          v46 = llvm::X86::getCpuSupportsMask();
          v47 = llvm::X86::getCpuSupportsMask();
          v48 = v45 + 1;
          v49 = (uint64_t)(v45 + 3);
          if (v46 > v47)
            v50 = a2;
          else
            v50 = v44;
          if (v46 > v47)
            v51 = (uint64_t)(a2 - 18);
          else
            v51 = (uint64_t)(v44 - 18);
          if (v46 <= v47)
            v44 -= 21;
          else
            a2 -= 21;
          *v45 = *(v50 - 21);
          v45 -= 21;
          *v48 = *((_OWORD *)v50 - 10);
          sub_22F2528D0(v49, v51);
          if (v44 == a6)
            goto LABEL_84;
        }
        if (v44 != a6)
        {
          v60 = a6;
          v61 = 0;
          do
          {
            v62 = &v45[v61];
            *v62 = v44[v61 - 21];
            *(_OWORD *)(v62 + 1) = *(_OWORD *)&v44[v61 - 20];
            sub_22F2528D0((uint64_t)&v45[v61 + 3], (uint64_t)&v44[v61 - 18]);
            v61 -= 21;
          }
          while (&v44[v61] != v60);
          a6 = v60;
        }
      }
    }
LABEL_84:
    if (a6 && v35)
    {
      v67 = a6 + 5;
      do
      {
        v68 = (_QWORD *)*(v67 - 2);
        if (v67 != v68)
          free(v68);
        v67 += 21;
        --v35;
      }
      while (v35);
    }
  }
}

void sub_22E654290(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  v9 = (void *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = v9;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
      bzero(v9, 16 * v10);
    v11 = (void *)(16 * v3);
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = (uint64_t)v4;
      do
      {
        if ((unint64_t)(*(_QWORD *)v13 + 1) > 1 || *(_DWORD *)(v13 + 8) != 0)
        {
          v18 = 0;
          sub_22F29D7A0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v13, &v18);
          v15 = (_QWORD *)v18;
          v16 = *(_QWORD *)v13;
          *(_DWORD *)(v18 + 8) = *(_DWORD *)(v13 + 8);
          *v15 = v16;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    llvm::deallocate_buffer(v4, v11);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v17 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v17)
      bzero(v9, 16 * v17);
  }
}

BOOL sub_22E6543E4(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;

  if (a1 >= a2)
  {
    if (a2 == a1)
    {
      a2 = a1;
    }
    else
    {
      v9 = a2;
      while (1)
      {
        v10 = *(unsigned __int16 *)(*(_QWORD *)v9 + 32);
        if (v10 == 379)
          break;
        v11 = v10 - 411;
        v5 = v11 > 0x2A;
        v12 = (1 << v11) & 0x41000000001;
        if (!v5 && v12 != 0)
          break;
        v9 += 8;
        a2 = a1;
        if (v9 == a1)
          return a2 == a1;
      }
      a2 = a1;
      a1 = v9;
    }
  }
  else
  {
    v2 = a1;
    while (1)
    {
      v3 = *(unsigned __int16 *)(*(_QWORD *)v2 + 32);
      if (v3 == 379)
        break;
      v4 = v3 - 411;
      v5 = v4 > 0x2A;
      v6 = (1 << v4) & 0x41000000001;
      if (!v5 && v6 != 0)
        break;
      v2 += 8;
      a1 = a2;
      if (v2 == a2)
        return a2 == a1;
    }
    a1 = a2;
    a2 = v2;
  }
  return a2 == a1;
}

uint64_t sub_22E6544B4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22E654544((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22E6545E0(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_DWORD *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_22E654544(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v7;
        v13 = v6 + v10++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_14;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_14:
  *a3 = v7;
  return result;
}

_QWORD *sub_22E6545E0(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E654690(a1, v7);
  v9 = 0;
  sub_22E654544((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_22E654690(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F29D9BC(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

