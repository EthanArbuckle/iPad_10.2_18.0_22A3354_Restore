void sub_22E6CDAD4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  const void **v12;
  char v13;
  const void *v14;
  int v15;
  size_t v16;
  size_t v17;
  size_t v18;
  __int128 *p_dst;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 __dst;
  unint64_t v24;

  if (!a2[49])
  {
    v7 = (char *)operator new(0x40uLL);
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
    *(_QWORD *)v7 = &off_24FA6D828;
    *(_OWORD *)(v7 + 40) = 0u;
    *((_QWORD *)v7 + 7) = 0;
    v8 = (std::__shared_weak_count *)a2[50];
    a2[50] = v7;
    *(_OWORD *)(v7 + 24) = 0u;
    a2[49] = v7 + 24;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = a2[2];
    if (*(_DWORD *)(v11 + 2448))
    {
      v12 = *(const void ***)(v11 + 2440);
      if (!*((_BYTE *)v12 + 56))
      {
        v13 = *((_BYTE *)v12 + 23);
        if (v13 >= 0)
          v14 = v12;
        else
          v14 = *v12;
        if (!v14)
        {
          __dst = 0uLL;
          v24 = 0;
LABEL_30:
          v22 = a2[49];
          if (*(char *)(v22 + 23) < 0)
            operator delete(*(void **)v22);
          *(_OWORD *)v22 = __dst;
          *(_QWORD *)(v22 + 16) = v24;
          goto LABEL_2;
        }
        v15 = v13;
        v16 = (size_t)v12[1];
        v17 = v13 & 0x7F;
        if (v15 >= 0)
          v18 = v17;
        else
          v18 = v16;
        if (v18 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        if (v18 >= 0x17)
        {
          v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v18 | 7) != 0x17)
            v20 = v18 | 7;
          v21 = v20 + 1;
          p_dst = (__int128 *)operator new(v20 + 1);
          *((_QWORD *)&__dst + 1) = v18;
          v24 = v21 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v24) = v18;
          p_dst = &__dst;
          if (!v18)
            goto LABEL_29;
        }
        memmove(p_dst, v14, v18);
LABEL_29:
        *((_BYTE *)p_dst + v18) = 0;
        goto LABEL_30;
      }
    }
  }
LABEL_2:
  v4 = a2[50];
  *a1 = a2[49];
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_22E6CDC80(uint64_t a1)
{
  uint64_t v2;
  const void **v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  BOOL v9;
  const void *v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(const void ***)(a1 + 16);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 104);
    v5 = (uint64_t *)(v4 + 488);
    v6 = v4 + 1544;
    v7 = 24 * v2;
    do
    {
      v8 = *((_BYTE *)v3 + 23);
      v9 = v8 < 0;
      if (v8 >= 0)
        v10 = v3;
      else
        v10 = *v3;
      v11 = v8 & 0x7F;
      if (v9)
        v12 = (size_t)v3[1];
      else
        v12 = v11;
      v13 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), v10, v12);
      v14 = sub_22F1502C8(v5);
      v18 = v13;
      sub_22F2A80BC(v6, &v18)[1] = v14;
      v3 += 3;
      v7 -= 24;
    }
    while (v7);
    v15 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v15)
    {
      v16 = *(_QWORD *)(a1 + 16);
      v17 = 24 * v15;
      do
      {
        if (*(char *)(v16 + v17 - 1) < 0)
          operator delete(*(void **)(v16 + v17 - 24));
        v17 -= 24;
      }
      while (v17);
    }
  }
  *(_DWORD *)(a1 + 24) = 0;
}

void sub_22E6CDD84(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  int v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = v3 + 24 * v2;
    do
    {
      v5 = sub_22F1502C8((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 104) + 488));
      if (v5)
      {
        *(_WORD *)(v5 + 1344) |= 2u;
        v12 = v15;
        v14 = 2;
        v15[0] = v5;
        v6 = 1;
        do
        {
          while (1)
          {
            v7 = *((_QWORD *)v12 + --v6);
            v13 = v6;
            v8 = *(_WORD *)(v7 + 1344);
            if ((v8 & 1) == 0)
              break;
            if (!v6)
              goto LABEL_9;
          }
          *(_WORD *)(v7 + 1344) = v8 | 4;
          sub_22F2A7CF4((uint64_t)&v12, *(char **)(v7 + 200), *(char **)(v7 + 208));
          v6 = v13;
        }
        while (v13);
LABEL_9:
        if (v12 != v15)
          free(v12);
      }
      v3 += 24;
    }
    while (v3 != v4);
    v9 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)(a1 + 16);
      v11 = 24 * v9;
      do
      {
        if (*(char *)(v10 + v11 - 1) < 0)
          operator delete(*(void **)(v10 + v11 - 24));
        v11 -= 24;
      }
      while (v11);
    }
  }
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_22E6CDEE0(uint64_t a1, void *a2, size_t a3, unsigned int a4, int a5)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v16[3];
  __int16 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  sub_22F1D07D8(*(_QWORD *)(a1 + 80), a2, a3, 0, 1, (uint64_t)&v18);
  v10 = v19;
  if ((v19 & 1) != 0)
  {
    v11 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(v11 + 312) = 0x30500000000;
    if (*(char *)(v11 + 311) < 0)
    {
      **(_BYTE **)(v11 + 288) = 0;
      *(_QWORD *)(v11 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v11 + 288) = 0;
      *(_BYTE *)(v11 + 311) = 0;
    }
    v16[0] = (unsigned __int8 *)(v11 + 320);
    v16[1] = 0;
    v16[2] = (unsigned __int8 *)v11;
    v17 = 1;
    *(_BYTE *)(v11 + 320) = 0;
    *(_DWORD *)(v11 + 664) = 0;
    v12 = *(unsigned int *)(v11 + 776);
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD *)(v11 + 768);
      v14 = 56 * v12;
      do
      {
        if (*(char *)(v13 + v14 - 9) < 0)
          operator delete(*(void **)(v13 + v14 - 32));
        v14 -= 56;
      }
      while (v14);
    }
    *(_DWORD *)(v11 + 776) = 0;
    sub_22E3B89A8(v16, a2, a3);
    sub_22E3BB0B8((uint64_t)v16);
  }
  else
  {
    sub_22F4182AC(a1, v18, a4, a5);
  }
  return v10 & 1;
}

void sub_22E6CE020(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void);
  uint64_t *v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;

  v18 = a4;
  if ((a2 & 1) == 0)
  {
    v5 = a1 + 8;
    v6 = *(_QWORD *)(a1 + 16);
    if (v6 != a1 + 8)
    {
      v7 = MEMORY[0x24BED7780];
      do
      {
        llvm::vfs::OutputFile::keep((llvm::vfs::OutputFile *)(v6 + 16));
        v15 = &v18;
        v16 = &v18;
        v8 = v17;
        v17 = 0;
        if (v8)
        {
          if ((*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)v8 + 48))(v8, v7))
          {
            v9 = (uint64_t *)*((_QWORD *)v8 + 1);
            v10 = (uint64_t *)*((_QWORD *)v8 + 2);
            if (v9 == v10)
            {
              v11 = 0;
            }
            else
            {
              v11 = 0;
              do
              {
                v22 = v11;
                v12 = *v9;
                *v9 = 0;
                v20 = v12;
                sub_22E6D8028(&v21, &v20, &v16, &v15);
                sub_22F2436E4(&v22, &v21, &v23);
                v11 = v23;
                v23 = 0;
                if (v21)
                  (*(void (**)(char *))(*(_QWORD *)v21 + 8))(v21);
                v13 = v20;
                v20 = 0;
                if (v13)
                  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
                if (v22)
                  (*(void (**)(char *))(*(_QWORD *)v22 + 8))(v22);
                ++v9;
              }
              while (v9 != v10);
            }
            v19 = v11;
            v14 = *(void (**)(void))(*(_QWORD *)v8 + 8);
            goto LABEL_21;
          }
          v23 = v8;
          sub_22E6D8028(&v19, &v23, &v16, &v15);
          if (v23)
          {
            v14 = *(void (**)(void))(*(_QWORD *)v23 + 8);
LABEL_21:
            v14();
          }
        }
        else
        {
          v19 = 0;
        }
        if (v17)
          (*(void (**)(char *))(*(_QWORD *)v17 + 8))(v17);
        v6 = *(_QWORD *)(v6 + 8);
      }
      while (v6 != v5);
    }
  }
  sub_22F2A847C((uint64_t *)(a1 + 8));
}

void sub_22E6CE1CC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 408) + 8))(*(_QWORD *)(a1 + 408), a2, *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 32));
  if (*(_BYTE *)(a1 + 352))
  {
    v3 = *(_QWORD **)(a1 + 328);
    v4 = (_QWORD *)(a1 + 336);
    if (v3 != (_QWORD *)(a1 + 336))
    {
      do
      {
        llvm::sys::fs::remove();
        v5 = (_QWORD *)v3[1];
        if (v5)
        {
          do
          {
            v6 = v5;
            v5 = (_QWORD *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            v6 = (_QWORD *)v3[2];
            v7 = *v6 == (_QWORD)v3;
            v3 = v6;
          }
          while (!v7);
        }
        v3 = v6;
      }
      while (v6 != v4);
    }
    sub_22E54B6D0(a1 + 328, *(_QWORD **)(a1 + 336));
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 344) = 0;
    *(_QWORD *)(a1 + 328) = v4;
  }
}

void sub_22E6CE29C(_QWORD *a1@<X0>, _BYTE *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  char v9;
  int v10;
  char *v11;
  size_t v12;
  size_t v13;
  _QWORD v14[2];
  void *v15[3];
  uint64_t v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v14[0] = a2;
  v14[1] = a3;
  v8 = a1[2];
  v9 = *(_BYTE *)(v8 + 2527);
  v10 = v9;
  if (v9 >= 0)
    v11 = (char *)(v8 + 2504);
  else
    v11 = *(char **)(v8 + 2504);
  v12 = v9 & 0x7F;
  if (v10 >= 0)
    v13 = v12;
  else
    v13 = *(_QWORD *)(v8 + 2512);
  LOBYTE(v15[0]) = 0;
  v17 = 0;
  if (!v13)
  {
    if (a3 != 1)
    {
      if (!a4)
      {
        v11 = "-";
        v13 = 1;
        goto LABEL_14;
      }
      goto LABEL_18;
    }
    v11 = "-";
    v13 = 1;
    if (*a2 != 45 && a4)
    {
LABEL_18:
      sub_22F2A8628((uint64_t)v15, (uint64_t)v14);
      llvm::sys::path::replace_extension();
      v11 = (char *)v15[0];
      v13 = (size_t)v15[1];
    }
  }
LABEL_14:
  sub_22E6CE414(a1, v11, v13, a5);
  if (v17)
  {
    if (v15[0] != &v16)
      free(v15[0]);
  }
}

_QWORD *sub_22E6CE414@<X0>(_QWORD *a1@<X0>, void *a2@<X1>, size_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *(***v8)(_QWORD **__return_ptr, _QWORD, void *, size_t, uint64_t);
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  const std::error_category *v16;
  std::string *v17;
  size_t size;
  __n128 v19;
  _QWORD *v20;
  std::error_code v21;
  std::string v22;
  unsigned __int8 *v23[3];
  __int16 v24;
  _QWORD *v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v8 = (_QWORD *(***)(_QWORD **__return_ptr, _QWORD, void *, size_t, uint64_t))a1[51];
  v9 = a1[20];
  if (!a1[21])
    sub_22F2A6BAC((uint64_t)a1);
  result = (**v8)(&v25, v8, a2, a3, v9);
  if ((v26 & 1) != 0)
  {
    v11 = a1[4];
    *(_QWORD *)(v11 + 312) = 0x31500000000;
    if (*(char *)(v11 + 311) < 0)
    {
      **(_BYTE **)(v11 + 288) = 0;
      *(_QWORD *)(v11 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v11 + 288) = 0;
      *(_BYTE *)(v11 + 311) = 0;
    }
    v23[0] = (unsigned __int8 *)(v11 + 320);
    v23[1] = 0;
    v23[2] = (unsigned __int8 *)v11;
    v24 = 1;
    *(_BYTE *)(v11 + 320) = 0;
    *(_DWORD *)(v11 + 664) = 0;
    v12 = *(unsigned int *)(v11 + 776);
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD *)(v11 + 768);
      v14 = 56 * v12;
      do
      {
        if (*(char *)(v13 + v14 - 9) < 0)
          operator delete(*(void **)(v13 + v14 - 32));
        v14 -= 56;
      }
      while (v14);
    }
    *(_DWORD *)(v11 + 776) = 0;
    sub_22E3B89A8(v23, a2, a3);
    if ((v26 & 1) != 0)
    {
      v15 = v25;
      v25 = 0;
    }
    else
    {
      v15 = 0;
    }
    v20 = v15;
    *(_QWORD *)&v21.__val_ = llvm::errorToErrorCode();
    v21.__cat_ = v16;
    std::error_code::message(&v22, &v21);
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v22;
    else
      v17 = (std::string *)v22.__r_.__value_.__r.__words[0];
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v22.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v22.__r_.__value_.__l.__size_;
    v19.n128_f64[0] = sub_22E3B89A8(v23, v17, size);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    if (v20)
      (*(void (**)(_QWORD *, __n128))(*v20 + 8))(v20, v19);
    sub_22E3BB0B8((uint64_t)v23);
    result = v25;
    *a4 = 0;
    v25 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  else
  {
    *a4 = v25;
  }
  return result;
}

void sub_22E6CE634(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  void *v7;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  char *v18;
  void *v19;
  uint64_t v20;
  __int16 v21;
  void *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _WORD v27[16];
  uint64_t v28;
  char v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;

  v6 = a3;
  v7 = a2;
  v34 = *MEMORY[0x24BDAC8D0];
  v22 = a2;
  v23 = a3;
  LOBYTE(v30) = 0;
  v33 = 0;
  if (a3 == 1 && *a2 == 45)
  {
    v6 = 1;
  }
  else
  {
    v27[0] = 261;
    *(_QWORD *)&v24 = a2;
    *((_QWORD *)&v24 + 1) = a3;
    if ((llvm::sys::path::is_absolute() & 1) == 0)
    {
      sub_22F2A8628((uint64_t)&v30, (uint64_t)&v22);
      sub_22F1D17C8(a4, &v30);
      v7 = v30;
      v6 = v31;
      v22 = v30;
      v23 = v31;
    }
  }
  v21 = 261;
  v19 = v7;
  v20 = v6;
  llvm::vfs::OutputBackend::createFile();
  if ((v29 & 1) != 0)
  {
    v16 = v24;
    *(_QWORD *)&v24 = 0;
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v16;
  }
  else
  {
    v18 = (char *)&off_255DFECB0 + 2;
    sub_22E673A20((llvm *)v27, (llvm *)v17);
    sub_22E3BACF8((llvm *)v17);
    v10 = operator new(0x58uLL);
    *v10 = 0;
    v10[1] = 0;
    v10[9] = 0;
    v10[10] = 0;
    *((_OWORD *)v10 + 1) = v24;
    v12 = v25;
    v11 = v26;
    HIBYTE(v25) = 0;
    LOBYTE(v24) = 0;
    v26 = 0;
    v10[4] = v12;
    v10[5] = v11;
    sub_22E673A20((llvm *)(v10 + 6), (llvm *)v27);
    v10[10] = v28;
    v28 = 0;
    v14 = *(_QWORD *)(a1 + 8);
    v13 = (_QWORD *)(a1 + 8);
    *v10 = v14;
    v10[1] = v13;
    *(_QWORD *)(v14 + 8) = v10;
    *v13 = v10;
    ++v13[2];
    llvm::vfs::OutputFile::createProxy((llvm::vfs::OutputFile *)(v10 + 2));
    if ((v29 & 1) == 0)
    {
      sub_22E6D7A48((uint64_t)&v24);
      goto LABEL_12;
    }
  }
  v15 = v24;
  *(_QWORD *)&v24 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
LABEL_12:
  if (v33)
  {
    if (v30 != &v32)
      free(v30);
  }
}

uint64_t sub_22E6CE89C(uint64_t a1, uint64_t a2, llvm::MemoryBuffer *a3, uint64_t a4)
{
  int v5;
  unsigned int v6;
  char v8;
  BOOL v9;
  _BYTE *v10;
  size_t v11;
  size_t v12;
  _BOOL8 v13;
  unint64_t v14;
  const std::error_category *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::string *p_p;
  size_t size;
  std::string __p;
  unint64_t v28;
  std::error_code v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 84))
    v5 = 4;
  else
    v5 = 3;
  if ((*(_DWORD *)(a1 + 80) & 0x700) == 0x100)
    v6 = v5;
  else
    v6 = *(unsigned __int8 *)(a1 + 84);
  if (*(_BYTE *)(a1 + 56))
  {
    v21 = *(_OWORD *)(a1 + 40);
    v30 = *(_OWORD *)(a1 + 24);
    v31 = v21;
    *(_DWORD *)(a4 + 344) = sub_22F423810((_QWORD *)a4, (uint64_t)&v30, v6, 0, 0, 0);
    return 1;
  }
  else
  {
    v8 = *(_BYTE *)(a1 + 23);
    v9 = v8 < 0;
    if (v8 >= 0)
      v10 = (_BYTE *)a1;
    else
      v10 = *(_BYTE **)a1;
    v11 = v8 & 0x7F;
    if (v9)
      v12 = *(_QWORD *)(a1 + 8);
    else
      v12 = v11;
    if (v12 == 1 && *v10 == 45)
      sub_22F41B034(a3, (uint64_t)&v32);
    else
      sub_22F1D0894((uint64_t)a3, v10, v12, 1, 1, (uint64_t)&v32);
    v13 = (v33 & 1) == 0;
    if ((v33 & 1) != 0)
    {
      v14 = v32;
      v32 = 0;
      v28 = v14;
      *(_QWORD *)&v29.__val_ = llvm::errorToErrorCode();
      v29.__cat_ = v15;
      if (v28)
        (*(void (**)(unint64_t))(*(_QWORD *)v28 + 8))(v28);
      if (v12 == 1 && *v10 == 45)
      {
        *(_QWORD *)(a2 + 312) = 0x2FE00000000;
        if (*(char *)(a2 + 311) < 0)
        {
          **(_BYTE **)(a2 + 288) = 0;
          *(_QWORD *)(a2 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(a2 + 288) = 0;
          *(_BYTE *)(a2 + 311) = 0;
        }
        v30 = (unint64_t)(a2 + 320);
        *(_QWORD *)&v31 = a2;
        WORD4(v31) = 1;
        *(_BYTE *)(a2 + 320) = 0;
        *(_DWORD *)(a2 + 664) = 0;
        v22 = *(unsigned int *)(a2 + 776);
        if ((_DWORD)v22)
        {
          v23 = *(_QWORD *)(a2 + 768);
          v24 = 56 * v22;
          do
          {
            if (*(char *)(v23 + v24 - 9) < 0)
              operator delete(*(void **)(v23 + v24 - 32));
            v24 -= 56;
          }
          while (v24);
        }
        *(_DWORD *)(a2 + 776) = 0;
        std::error_code::message(&__p, &v29);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
        else
          size = __p.__r_.__value_.__l.__size_;
        sub_22E3B89A8((unsigned __int8 **)&v30, p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        *(_QWORD *)(a2 + 312) = 0x2FD00000000;
        if (*(char *)(a2 + 311) < 0)
        {
          **(_BYTE **)(a2 + 288) = 0;
          *(_QWORD *)(a2 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(a2 + 288) = 0;
          *(_BYTE *)(a2 + 311) = 0;
        }
        v30 = (unint64_t)(a2 + 320);
        *(_QWORD *)&v31 = a2;
        WORD4(v31) = 1;
        *(_BYTE *)(a2 + 320) = 0;
        *(_DWORD *)(a2 + 664) = 0;
        v16 = *(unsigned int *)(a2 + 776);
        if ((_DWORD)v16)
        {
          v17 = *(_QWORD *)(a2 + 768);
          v18 = 56 * v16;
          do
          {
            if (*(char *)(v17 + v18 - 9) < 0)
              operator delete(*(void **)(v17 + v18 - 32));
            v18 -= 56;
          }
          while (v18);
        }
        *(_DWORD *)(a2 + 776) = 0;
        sub_22E3B89A8((unsigned __int8 **)&v30, v10, v12);
      }
      sub_22E3BB0B8((uint64_t)&v30);
    }
    else
    {
      *(_DWORD *)(a4 + 344) = sub_22F1E170C(a4, v32, 0, v6, 0, 0);
    }
    if ((v33 & 1) != 0)
    {
      v19 = v32;
      v32 = 0;
      if (v19)
        (*(void (**)(unint64_t))(*(_QWORD *)v19 + 8))(v19);
    }
  }
  return v13;
}

BOOL sub_22E6CEBA8(llvm::raw_ostream *a1, _QWORD *a2)
{
  _QWORD *v4;
  llvm::raw_ostream *v5;
  _BOOL8 v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  void **v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  _OWORD *v16;
  std::string *p_p;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  uint64_t v20;
  unsigned int v21;
  llvm::raw_ostream *v22;
  uint64_t v23;
  llvm *v24;
  char v25;
  int v26;
  size_t v27;
  size_t v28;
  void *v29;
  void *v30;
  void *v31;
  llvm *v32;
  llvm::raw_ostream *v33;
  uint64_t v34;
  __int128 *v35;
  uint64_t v36;
  std::string::size_type v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::string *v41;
  size_t size;
  _BYTE *v43;
  void *v44[2];
  uint64_t v45;
  __int16 v46;
  std::error_code v47;
  std::string __p;
  uint64_t vars0;

  v4 = (_QWORD *)off_255E04E38(&off_255E04E38, a2);
  if (!*v4)
    *v4 = &vars0;
  v5 = (llvm::raw_ostream *)*((_QWORD *)a1 + 48);
  if ((*(unsigned int (**)(_QWORD *, llvm::raw_ostream *))*a2)(a2, a1) && sub_22E6CB8FC(a1))
  {
    v8 = *((_QWORD *)a1 + 2);
    if (*(_DWORD *)(v8 + 2608) == 30)
    {
      v9 = *((_QWORD *)a1 + 5) + *(_QWORD *)(**((_QWORD **)a1 + 5) - 24);
      *(_BYTE *)(v9 + 160) &= ~1u;
      v8 = *((_QWORD *)a1 + 2);
    }
    if ((*(_WORD *)(*(_QWORD *)(v8 + 40) + 848) & 0x20) != 0)
    {
      v10 = (void *)*((_QWORD *)v5 + 4);
      if (*((_QWORD *)v5 + 3) - (_QWORD)v10 > 0x1BuLL)
      {
        qmemcpy(v10, "clang -cc1 version 32023.334", 28);
        v12 = (_BYTE *)(*((_QWORD *)v5 + 4) + 28);
        *((_QWORD *)v5 + 4) = v12;
        v11 = v5;
      }
      else
      {
        v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v5, "clang -cc1 version 32023.334");
        v12 = (_BYTE *)*((_QWORD *)v11 + 4);
      }
      if (*((_BYTE **)v11 + 3) == v12)
      {
        v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11, " ");
      }
      else
      {
        *v12 = 32;
        ++*((_QWORD *)v11 + 4);
      }
      sub_22F20D5D0(v44);
      if (v45 >= 0)
        v13 = v44;
      else
        v13 = (void **)v44[0];
      v14 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11, (const char *)v13);
      v15 = v14;
      v16 = (_OWORD *)*((_QWORD *)v14 + 4);
      if (*((_QWORD *)v14 + 3) - (_QWORD)v16 > 0xFuLL)
      {
        *v16 = *(_OWORD *)" default target ";
        *((_QWORD *)v14 + 4) += 16;
      }
      else
      {
        v14 = (llvm::raw_ostream *)llvm::raw_ostream::write(v14, " default target ");
        v15 = v14;
      }
      llvm::sys::getDefaultTargetTriple(v14);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v18 = (llvm::raw_ostream *)llvm::raw_ostream::write(v15, (const char *)p_p);
      v19 = (_BYTE *)*((_QWORD *)v18 + 4);
      if (*((_BYTE **)v18 + 3) == v19)
      {
        llvm::raw_ostream::write(v18, "\n");
      }
      else
      {
        *v19 = 10;
        ++*((_QWORD *)v18 + 4);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v45) < 0)
        operator delete(v44[0]);
      v8 = *((_QWORD *)a1 + 2);
    }
    if ((*(_BYTE *)(v8 + 335) & 8) != 0)
    {
      sub_22F2A75DC((uint64_t)a1);
      v8 = *((_QWORD *)a1 + 2);
    }
    if ((*(_BYTE *)(v8 + 2288) & 8) != 0
      || ((*(char *)(v8 + 3111) & 0x80000000) == 0
        ? (v20 = *(unsigned __int8 *)(v8 + 3111))
        : (v20 = *(_QWORD *)(v8 + 3096)),
          v20))
    {
      llvm::EnableStatistics(0);
      v8 = *((_QWORD *)a1 + 2);
    }
    v21 = *(_DWORD *)(v8 + 2448);
    if (v21)
    {
      v35 = *(__int128 **)(v8 + 2440);
      v36 = 88 * v21;
      do
      {
        if (*((_QWORD *)a1 + 22) && ((*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2) & 1) == 0)
          sub_22F4234E4(*((_QWORD *)a1 + 22));
        if (sub_22E729B74((uint64_t)a2, (uint64_t)a1, v35))
        {
          sub_22F2ABC00(a2, &v47);
          v37 = *(_QWORD *)&v47.__val_;
          if (*(_QWORD *)&v47.__val_)
          {
            *(_QWORD *)&v47.__val_ = 0;
            __p.__r_.__value_.__r.__words[0] = v37;
            sub_22E6C5940(&__p.__r_.__value_.__l.__data_, (char **)v44);
            if (__p.__r_.__value_.__r.__words[0])
              (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 8))(__p.__r_.__value_.__r.__words[0]);
          }
          (*(void (**)(_QWORD *))(*a2 + 128))(a2);
        }
        v35 = (__int128 *)((char *)v35 + 88);
        v36 -= 88;
      }
      while (v36);
    }
    sub_22F2A7890(a1);
    v23 = *((_QWORD *)a1 + 2);
    if ((*(_BYTE *)(v23 + 2288) & 8) != 0)
    {
      v24 = (llvm *)*((_QWORD *)a1 + 20);
      if (v24)
      {
        sub_22F41B1D0(v24);
        v43 = (_BYTE *)*((_QWORD *)v5 + 4);
        if ((unint64_t)v43 >= *((_QWORD *)v5 + 3))
        {
          llvm::raw_ostream::write(v5);
        }
        else
        {
          *((_QWORD *)v5 + 4) = v43 + 1;
          *v43 = 10;
        }
      }
      llvm::PrintStatistics(v5, v22);
      v23 = *((_QWORD *)a1 + 2);
    }
    v25 = *(_BYTE *)(v23 + 3111);
    v26 = v25;
    v27 = v25 & 0x7F;
    if (v26 >= 0)
      v28 = v27;
    else
      v28 = *(_QWORD *)(v23 + 3096);
    if (v28)
    {
      v29 = (void *)(v23 + 3088);
      v30 = *(void **)(v23 + 3088);
      if (v26 >= 0)
        v31 = v29;
      else
        v31 = v30;
      v47.__val_ = 0;
      v47.__cat_ = std::system_category();
      v32 = (llvm *)operator new();
      llvm::raw_fd_ostream::raw_fd_ostream();
      if (v47.__val_)
      {
        v34 = *((_QWORD *)a1 + 4);
        *(_QWORD *)(v34 + 312) = 0x37600000000;
        if (*(char *)(v34 + 311) < 0)
        {
          **(_BYTE **)(v34 + 288) = 0;
          *(_QWORD *)(v34 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v34 + 288) = 0;
          *(_BYTE *)(v34 + 311) = 0;
        }
        v44[0] = (void *)(v34 + 320);
        v44[1] = 0;
        v45 = v34;
        v46 = 1;
        *(_BYTE *)(v34 + 320) = 0;
        *(_DWORD *)(v34 + 664) = 0;
        v38 = *(unsigned int *)(v34 + 776);
        if ((_DWORD)v38)
        {
          v39 = *(_QWORD *)(v34 + 768);
          v40 = 56 * v38;
          do
          {
            if (*(char *)(v39 + v40 - 9) < 0)
              operator delete(*(void **)(v39 + v40 - 32));
            v40 -= 56;
          }
          while (v40);
        }
        *(_DWORD *)(v34 + 776) = 0;
        sub_22E3B89A8((unsigned __int8 **)v44, v31, v28);
        std::error_code::message(&__p, &v47);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v41 = &__p;
        else
          v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
        else
          size = __p.__r_.__value_.__l.__size_;
        sub_22E3B89A8((unsigned __int8 **)v44, v41, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        sub_22E3BB0B8((uint64_t)v44);
      }
      else
      {
        llvm::PrintStatisticsJSON(v32, v33);
      }
      (*(void (**)(llvm *))(*(_QWORD *)v32 + 8))(v32);
    }
    v6 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 48) + 12) == 0;
  }
  else
  {
    v6 = 0;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 4) + 48) + 40))(*(_QWORD *)(*((_QWORD *)a1 + 4)
                                                                                                + 48));
  return v6;
}

void sub_22E6CF0EC(_QWORD *a1)
{
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  const void *v10;
  char v11;
  int v12;
  const void *v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  time_t v20;
  uint64_t v21;
  const std::error_category *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  int v31;
  size_t v32;
  size_t v33;
  void **v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  const std::error_category *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  int v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  __int128 *v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  const char *v77;
  size_t v78;
  int v79;
  int v80;
  __int16 v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  _DWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  time_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  void *__p[2];
  char v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  uint64_t v118;
  const std::error_category *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  char v122;
  __int16 v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  __int16 v126;
  _OWORD v127[2];
  __int16 v128;
  _BYTE v129[44];
  uint64_t v130;
  __int16 v131;
  uint64_t v132;
  _BYTE __t[24];
  _WORD v134[64];
  _BYTE __dst[24];
  _QWORD v136[19];

  v136[16] = *MEMORY[0x24BDAC8D0];
  if (a1[33])
    return;
  if (!a1[26])
    sub_22F2A6C34((uint64_t)a1);
  if (*(_DWORD *)(a1[22] + 488))
    goto LABEL_113;
  v2 = *(_QWORD *)(a1[24] + 104);
  v3 = *(_BYTE *)(v2 + 191);
  v4 = v3;
  v5 = *(_QWORD *)(v2 + 176);
  v6 = v3 & 0x7F;
  if (v4 >= 0)
    v5 = v6;
  if (!v5)
    goto LABEL_113;
  v7 = *(_QWORD *)(a1[2] + 40);
  if (!*(_DWORD *)(v7 + 220) || !*(_DWORD *)(v7 + 224))
    goto LABEL_113;
  memset(v129, 0, sizeof(v129));
  v130 = 0xFFFFLL;
  v131 = 0;
  v132 = 0;
  v105 = v7;
  v10 = *(const void **)(v7 + 96);
  v9 = v7 + 96;
  v8 = v10;
  *(_QWORD *)__dst = v136;
  v11 = *(_BYTE *)(v9 + 23);
  v12 = v11;
  if (v11 >= 0)
    v13 = (const void *)v9;
  else
    v13 = v8;
  v14 = v11 & 0x7F;
  if (v12 >= 0)
    v15 = v14;
  else
    v15 = *(_QWORD *)(v9 + 8);
  *(_OWORD *)&__dst[8] = xmmword_22F44E310;
  if (v15 >= 0x81)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v16 = *(_QWORD *)&__dst[8];
    v18 = *(_QWORD **)__dst;
    goto LABEL_19;
  }
  v16 = 0;
  v17 = 0;
  v18 = v136;
  if (v15)
  {
LABEL_19:
    memcpy((char *)v18 + v16, v13, v15);
    v17 = *(_QWORD *)&__dst[8];
  }
  *(_QWORD *)&__dst[8] = v17 + v15;
  v128 = 257;
  v126 = 257;
  v123 = 257;
  llvm::sys::path::append();
  v134[4] = 261;
  *(_OWORD *)__t = *(_OWORD *)__dst;
  *(_QWORD *)&v127[0] = llvm::sys::fs::status();
  *((_QWORD *)&v127[0] + 1) = v19;
  if (!LODWORD(v127[0]))
  {
    *(_QWORD *)__t = llvm::sys::fs::basic_file_status::getLastModificationTime((llvm::sys::fs::basic_file_status *)v129)
                   / 1000;
    v20 = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)__t);
    v107 = time(0);
    v21 = v105;
    if (v107 - v20 <= *(unsigned int *)(v105 + 220))
      goto LABEL_111;
    sub_22E6D5C1C(*(const void **)__dst, *(size_t *)&__dst[8]);
    LODWORD(v118) = 0;
    v119 = std::system_category();
    *(_QWORD *)__t = v134;
    *(_OWORD *)&__t[8] = xmmword_22F44E310;
    llvm::sys::path::native();
    v128 = 261;
    v127[0] = *(_OWORD *)__t;
    sub_22F2A7E34((uint64_t)&v124, (const char **)v127, &v118, 1);
    v120 = 0;
    v121 = 0;
    v122 = 1;
    if (sub_22E6D5D28(&v124, &v120) || (_DWORD)v118)
      goto LABEL_99;
    while (1)
    {
      v128 = 260;
      *(_QWORD *)&v127[0] = v124 + 8;
      LOBYTE(v116) = 0;
      if (llvm::sys::fs::is_directory() || !(_BYTE)v116)
        goto LABEL_26;
      v128 = 260;
      *(_QWORD *)&v127[0] = v124 + 8;
      sub_22F2A7E34((uint64_t)&v116, (const char **)v127, &v118, 1);
      v113 = 0;
      v114 = 0;
      LOBYTE(v115) = 1;
      while (!sub_22E6D5D28(&v116, &v113) && !(_DWORD)v118)
      {
        v23 = llvm::sys::path::extension();
        if (v24 == 10)
        {
          if (*(_QWORD *)v23 != 0x617473656D69742ELL || *(_WORD *)(v23 + 8) != 28781)
          {
LABEL_40:
            v26 = (_QWORD *)llvm::sys::path::filename();
            if (v27 != 11)
              goto LABEL_62;
            if (*v26 != 0x2E73656C75646F6DLL || *(_QWORD *)((char *)v26 + 3) != 0x7864692E73656C75)
              goto LABEL_62;
          }
        }
        else if (v24 != 4 || *(_DWORD *)v23 != 1835233326)
        {
          goto LABEL_40;
        }
        v128 = 260;
        *(_QWORD *)&v127[0] = v116 + 8;
        if (!llvm::sys::fs::status())
        {
          *(_QWORD *)&v127[0] = llvm::sys::fs::basic_file_status::getLastAccessedTime((llvm::sys::fs::basic_file_status *)v129)
                              / 1000;
          if (v107 - std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)v127) > *(unsigned int *)(v21 + 224))
          {
            v128 = 260;
            *(_QWORD *)&v127[0] = v116 + 8;
            llvm::sys::fs::remove();
            v29 = v116;
            v30 = *(_BYTE *)(v116 + 31);
            v31 = v30;
            v32 = v30 & 0x7F;
            if (v31 >= 0)
              v33 = v32;
            else
              v33 = *(_QWORD *)(v116 + 16);
            sub_22E3B8BF4((uint64_t)__p, v33 + 10);
            if (v112 >= 0)
              v34 = __p;
            else
              v34 = (void **)__p[0];
            if (v33)
            {
              v37 = *(char **)(v29 + 8);
              v36 = (char *)(v29 + 8);
              v35 = v37;
              if (v36[23] >= 0)
                v38 = v36;
              else
                v38 = v35;
              memmove(v34, v38, v33);
            }
            strcpy((char *)v34 + v33, ".timestamp");
            v128 = 260;
            *(_QWORD *)&v127[0] = __p;
            llvm::sys::fs::remove();
            if (v112 < 0)
              operator delete(__p[0]);
            v21 = v105;
          }
        }
LABEL_62:
        v118 = llvm::sys::fs::detail::directory_iterator_increment();
        v119 = v39;
      }
      v40 = v114;
      if (v114)
      {
        p_shared_owners = (unint64_t *)&v114->__shared_owners_;
        do
          v42 = __ldaxr(p_shared_owners);
        while (__stlxr(v42 - 1, p_shared_owners));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = v117;
      if (v117)
      {
        v44 = (unint64_t *)&v117->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v128 = 260;
      *(_QWORD *)&v127[0] = v124 + 8;
      sub_22F2A7E34((uint64_t)&v116, (const char **)v127, &v118, 1);
      v114 = 0;
      v113 = 0;
      v115 = 1;
      if (sub_22E6D5D28(&v116, &v113))
      {
        v46 = v118;
        v47 = v114;
        if (v114)
        {
          v48 = (unint64_t *)&v114->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        v50 = v117;
        if (v117)
        {
          v51 = (unint64_t *)&v117->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        if (!v46)
        {
          v128 = 260;
          *(_QWORD *)&v127[0] = v124 + 8;
          llvm::sys::fs::remove();
        }
      }
      else
      {
        v53 = v114;
        if (v114)
        {
          v54 = (unint64_t *)&v114->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v56 = v117;
        if (v117)
        {
          v57 = (unint64_t *)&v117->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
      }
LABEL_26:
      v118 = llvm::sys::fs::detail::directory_iterator_increment();
      v119 = v22;
      if (sub_22E6D5D28(&v124, &v120) || (_DWORD)v118)
      {
LABEL_99:
        v59 = v121;
        if (v121)
        {
          v60 = (unint64_t *)&v121->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        v62 = v125;
        if (v125)
        {
          v63 = (unint64_t *)&v125->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        if (*(_WORD **)__t != v134)
          free(*(void **)__t);
        goto LABEL_111;
      }
    }
  }
  *(_QWORD *)__t = 2;
  *(_QWORD *)&__t[8] = std::generic_category();
  if (((*(uint64_t (**)(_QWORD, _QWORD, _BYTE *))(**((_QWORD **)&v127[0] + 1) + 32))(*((_QWORD *)&v127[0] + 1), LODWORD(v127[0]), __t) & 1) != 0|| ((*(uint64_t (**)(_QWORD, _OWORD *, _QWORD))(**(_QWORD **)&__t[8] + 40))(*(_QWORD *)&__t[8], v127, *(unsigned int *)__t) & 1) != 0)
  {
    sub_22E6D5C1C(*(const void **)__dst, *(size_t *)&__dst[8]);
  }
LABEL_111:
  if (*(_QWORD **)__dst != v136)
    free(*(void **)__dst);
LABEL_113:
  v65 = a1[2];
  v66 = *(__int128 **)(v65 + 40);
  if (*((char *)v66 + 23) < 0)
  {
    sub_22E3BB2B4(__dst, *(void **)v66, *((_QWORD *)v66 + 1));
    v65 = a1[2];
  }
  else
  {
    v67 = *v66;
    *(_QWORD *)&__dst[16] = *((_QWORD *)v66 + 2);
    *(_OWORD *)__dst = v67;
  }
  v108 = *(_QWORD *)(v65 + 56);
  if (a1[31])
  {
    v68 = operator new();
    *(_OWORD *)v68 = 0u;
    *(_OWORD *)(v68 + 16) = 0u;
    *(_OWORD *)(v68 + 32) = 0u;
    *(_OWORD *)(v68 + 48) = 0u;
    *(_OWORD *)(v68 + 64) = 0u;
    *(_OWORD *)(v68 + 80) = 0u;
    *(_OWORD *)(v68 + 96) = 0u;
    *(_OWORD *)(v68 + 112) = 0u;
    *(_WORD *)(v68 + 128) = 0;
    *(_QWORD *)(v68 + 144) = 0;
    *(_QWORD *)(v68 + 152) = 0;
    *(_QWORD *)(v68 + 136) = 0;
    llvm::Timer::init();
  }
  else
  {
    v68 = 0;
  }
  v69 = operator new();
  v106 = (_QWORD *)a1[24];
  v103 = a1[26];
  v104 = (_DWORD *)a1[23];
  v71 = sub_22E6CB02C(a1);
  v72 = a1[2];
  v73 = *(_QWORD **)(v72 + 2808);
  v74 = (uint64_t)(*(_QWORD *)(v72 + 2816) - (_QWORD)v73) >> 4;
  v75 = __dst[23] & 0x7F;
  if (__dst[23] < 0)
    v75 = *(_QWORD *)&__dst[8];
  v76 = __dst;
  if (__dst[23] < 0)
    v76 = *(const char **)__dst;
  if (v75)
    v77 = v76;
  else
    v77 = "";
  if (v77)
    v78 = strlen(v77);
  else
    v78 = 0;
  v79 = *(_DWORD *)(v108 + 152);
  v80 = *(_DWORD *)(v65 + 2288);
  v81 = *((_WORD *)v66 + 424);
  v82 = (*(_DWORD *)(v72 + 2288) >> 13) & 1;
  v110 = v68;
  sub_22E78B02C(v69, v106, v104, v103, v71, v73, v74, v70, v77, v78, v79, v80 < 0, 0, (v81 & 0x80) != 0, HIBYTE(v81) & 1, v82, &v110);
  ++*(_DWORD *)(v69 + 32);
  v83 = a1[33];
  a1[33] = v69;
  if (v83)
  {
    v84 = *(_DWORD *)(v83 + 32) - 1;
    *(_DWORD *)(v83 + 32) = v84;
    if (!v84)
      (*(void (**)(uint64_t))(*(_QWORD *)(v83 + 24) + 8))(v83 + 24);
  }
  if (v110)
  {
    v85 = MEMORY[0x23489EEC8]();
    MEMORY[0x2348A0E9C](v85, 0x10B2C402AE41D3ELL);
  }
  v86 = a1[28];
  v87 = a1[33];
  if (v86)
  {
    *(_QWORD *)(v87 + 64) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v86 + 144))(v86);
    *(_BYTE *)(v87 + 72) = 0;
    v88 = a1[26];
    *(_QWORD *)(v88 + 16056) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[28] + 136))(a1[28]);
    v87 = a1[33];
  }
  v89 = a1[26];
  if (v87)
    ++*(_DWORD *)(v87 + 32);
  v90 = v87 + 24;
  if (!v87)
    v90 = 0;
  v91 = *(_DWORD **)(v89 + 16048);
  *(_QWORD *)(v89 + 16048) = v90;
  if (v91)
  {
    v102 = v91[2] - 1;
    v91[2] = v102;
    if (!v102)
      (*(void (**)(_DWORD *))(*(_QWORD *)v91 + 8))(v91);
  }
  if (a1[30])
    (*(void (**)(_QWORD))(*(_QWORD *)a1[33] + 176))(a1[33]);
  if (a1[28])
    (*(void (**)(_QWORD))(*(_QWORD *)a1[33] + 152))(a1[33]);
  v92 = (uint64_t *)a1[38];
  v93 = (uint64_t *)a1[39];
  while (v92 != v93)
  {
    v94 = *v92;
    v92 += 2;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v94 + 24))(v94, a1[33]);
  }
  v95 = a1[33];
  v96 = sub_22F2A7234(a1);
  v97 = sub_22F2A7310(a1);
  v98 = a1[23];
  v99 = a1[4];
  v100 = (_QWORD *)operator new();
  *v100 = &off_24FA6DB28;
  v100[1] = v96;
  v100[2] = v97;
  v100[3] = v98;
  v100[4] = v99;
  v109 = v100;
  sub_22F2A73EC(v95, (uint64_t *)&v109);
  v101 = (uint64_t)v109;
  v109 = 0;
  if (v101)
    (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
}

uint64_t sub_22E6CFC78(_QWORD *a1, _BYTE *__src, size_t __len)
{
  std::string *p_dst;
  size_t v7;
  size_t v8;
  std::string *v9;
  std::string::size_type v10;
  void *v11;
  size_t v12;
  size_t v13;
  std::string *v14;
  std::string::size_type v15;
  llvm::Timer *v16;
  char v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  std::string::size_type v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::string::size_type v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  void *v33[2];
  std::string::size_type v34;
  __int16 v35;
  _QWORD *v36;
  std::string v37;
  void *__p[2];
  std::string::size_type v39;
  std::string __dst;
  _OWORD v41[8];
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v42 = 0;
  memset(v41, 0, sizeof(v41));
  v44 = 0;
  v45 = 0;
  v43 = 0;
  if (!a1[31])
    goto LABEL_34;
  if (!__src)
  {
    memset(&__dst, 0, sizeof(__dst));
    goto LABEL_13;
  }
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_61;
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = __len;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
    p_dst = &__dst;
    if (!__len)
      goto LABEL_12;
  }
  memmove(p_dst, __src, __len);
LABEL_12:
  p_dst->__r_.__value_.__s.__data_[__len] = 0;
LABEL_13:
  v9 = std::string::insert(&__dst, 0, "preloading.");
  v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v33 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v34 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (!__src)
  {
    memset(&v37, 0, sizeof(v37));
    goto LABEL_24;
  }
  if (__len > 0x7FFFFFFFFFFFFFF7)
LABEL_61:
    abort();
  if (__len >= 0x17)
  {
    v12 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v12 = __len | 7;
    v13 = v12 + 1;
    v11 = operator new(v12 + 1);
    v37.__r_.__value_.__l.__size_ = __len;
    v37.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  }
  else
  {
    *((_BYTE *)&v37.__r_.__value_.__s + 23) = __len;
    v11 = &v37;
    if (!__len)
      goto LABEL_23;
  }
  memmove(v11, __src, __len);
LABEL_23:
  *((_BYTE *)v11 + __len) = 0;
LABEL_24:
  v14 = std::string::insert(&v37, 0, "Preloading ");
  v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v39 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  llvm::Timer::init();
  if (SHIBYTE(v39) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (a1[31])
  {
    v16 = (llvm::Timer *)v41;
    llvm::Timer::startTimer((llvm::Timer *)v41);
    v17 = 0;
    goto LABEL_35;
  }
LABEL_34:
  v16 = 0;
  v17 = 1;
LABEL_35:
  if (!a1[33])
    sub_22E6CF0EC(a1);
  v18 = sub_22F1CF5F4(*(_QWORD *)(a1[4] + 32), 0x37Du, 0, a1[4]);
  v19 = a1[24];
  v20 = (_QWORD *)operator new();
  *v20 = &off_24FA6DBE0;
  v20[1] = v19;
  v20[2] = v20 + 4;
  v20[3] = 0x800000000;
  v21 = a1[33];
  v36 = v20;
  sub_22E6D5B78((uint64_t)&__dst, v21, &v36);
  if (v36)
    (*(void (**)(_QWORD *))(*v36 + 8))(v36);
  v22 = sub_22E77A990(a1[33], __src, __len, 1u, 0, 8 * (v18 < 4), 0);
  if (v22 == 5)
  {
    v23 = a1[4];
    *(_QWORD *)(v23 + 312) = 0x37D00000000;
    if (*(char *)(v23 + 311) < 0)
    {
      **(_BYTE **)(v23 + 288) = 0;
      *(_QWORD *)(v23 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v23 + 288) = 0;
      *(_BYTE *)(v23 + 311) = 0;
    }
    v33[0] = (void *)(v23 + 320);
    v33[1] = 0;
    v34 = v23;
    v35 = 1;
    *(_BYTE *)(v23 + 320) = 0;
    *(_DWORD *)(v23 + 664) = 0;
    v25 = *(unsigned int *)(v23 + 776);
    if ((_DWORD)v25)
    {
      v26 = *(_QWORD *)(v23 + 768);
      v27 = 56 * v25;
      do
      {
        if (*(char *)(v26 + v27 - 9) < 0)
          operator delete(*(void **)(v26 + v27 - 32));
        v27 -= 56;
      }
      while (v27);
    }
    *(_DWORD *)(v23 + 776) = 0;
    sub_22E3B89A8((unsigned __int8 **)v33, __src, __len);
    sub_22E3BB0B8((uint64_t)v33);
    sub_22E6CDD84((uint64_t)v20);
  }
  else
  {
    if (v22)
    {
      v24 = 0;
      goto LABEL_53;
    }
    sub_22E6CDC80((uint64_t)v20);
  }
  v24 = 1;
LABEL_53:
  v28 = __dst.__r_.__value_.__r.__words[0];
  v29 = *(_QWORD **)(__dst.__r_.__value_.__r.__words[0] + 56);
  *(_QWORD *)(__dst.__r_.__value_.__r.__words[0] + 56) = 0;
  if (__dst.__r_.__value_.__s.__data_[8])
  {
    v30 = v29[2];
    v29[2] = 0;
    v31 = *(_QWORD *)(v28 + 56);
    *(_QWORD *)(v28 + 56) = v30;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  else if (!v29)
  {
    goto LABEL_58;
  }
  (*(void (**)(_QWORD *))(*v29 + 8))(v29);
LABEL_58:
  if ((v17 & 1) == 0)
    llvm::Timer::stopTimer(v16);
  MEMORY[0x23489EEC8](v41);
  return v24;
}

unint64_t sub_22E6D00D0(uint64_t a1, unsigned int a2, unsigned int *a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  unsigned int *v8;
  size_t v9;
  const void *v10;
  unsigned int v11;
  void **p_dst;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  char v22;
  int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  char v36;
  int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  void **v40;
  std::string::pointer v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t **v53;
  uint64_t **v54;
  unsigned int v55;
  uint64_t *v56;
  unsigned int v57;
  unint64_t v58;
  char v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  char *v65;
  char v66;
  BOOL v67;
  const void *v68;
  size_t v69;
  size_t v70;
  std::string::size_type v71;
  __int128 *p_p;
  unint64_t v73;
  uint64_t v74;
  std::string::size_type v75;
  const void *v76;
  size_t v77;
  llvm::StringMapImpl *v78;
  char v79;
  BOOL v80;
  const void *v81;
  size_t v82;
  size_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  std::string::size_type v90;
  unsigned int *v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned __int8 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  std::string *v101;
  size_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  size_t v107;
  const void *v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int *v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned __int8 *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  void **v123;
  size_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  __int128 v128;
  unint64_t v129;
  void *v130;
  std::string::size_type v131;
  std::string::size_type v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  std::string::size_type v137;
  uint64_t v138;
  std::string::size_type v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  std::string *v144;
  size_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  unint64_t v154;
  char v155;
  int v156;
  uint64_t v157;
  unsigned __int8 *v158;
  unsigned __int8 *v159;
  unsigned __int8 *v160;
  const void **v161;
  uint64_t *v162;
  const void **v163;
  const void **v164;
  int v165;
  size_t v166;
  size_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  char v171;
  void *v172;
  size_t v173;
  uint64_t v174;
  llvm *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  int v179;
  unsigned int v180;
  unsigned int v181;
  _DWORD *v182;
  unsigned int v183;
  unsigned int v184;
  int v185;
  unsigned int v186;
  _DWORD *v187;
  unsigned int v188;
  uint64_t v190;
  uint64_t *v191;
  uint64_t *v192;
  std::string::size_type v193;
  std::string::size_type v194;
  std::string::size_type v195;
  uint64_t *v196;
  unsigned __int8 *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  std::string::size_type v201;
  uint64_t v202;
  std::string *v203;
  size_t v204;
  std::string::size_type v205;
  int v206;
  unsigned __int8 *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  std::string::size_type v211;
  uint64_t v212;
  unsigned __int8 *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  std::string::size_type v217;
  uint64_t v218;
  std::string *v219;
  size_t v220;
  std::string::size_type v221;
  unsigned __int8 *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unsigned __int8 *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  std::string::size_type v230;
  uint64_t v231;
  std::string *v232;
  size_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  std::string::size_type v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  std::string::size_type v241;
  std::string::size_type size;
  int v243;
  std::string::size_type v244;
  std::string::size_type v245;
  uint64_t started;
  void **v247;
  const void **v248;
  std::string::size_type v249;
  uint64_t v250;
  std::string::size_type v251;
  std::string *v252;
  int v253;
  unsigned int v254;
  uint64_t v255;
  std::string *v256;
  size_t v257;
  unsigned int v258;
  uint64_t v259;
  int v260;
  int v261;
  uint64_t v262;
  char v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  const void **v267;
  uint64_t v268;
  char v269;
  BOOL v270;
  const void *v271;
  const void *v272;
  uint64_t v273;
  uint64_t v274;
  int Key;
  std::string *v276;
  size_t v277;
  uint64_t v278;
  std::string *v279;
  std::string::size_type v280;
  uint64_t v281;
  unsigned __int8 *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  std::string::size_type v287;
  uint64_t v288;
  std::string *v289;
  size_t v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  const void *v296;
  std::string::size_type v297;
  std::string *p_len;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  std::string *v303;
  size_t v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  std::string::size_type v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  std::string *v314;
  size_t v315;
  unsigned int v316;
  uint64_t v317;
  std::string::size_type v318;
  char v319;
  BOOL v320;
  const void **v321;
  const void *v322;
  size_t v323;
  std::string::size_type v324;
  std::string::size_type v325;
  uint64_t **v326;
  std::string::size_type v327;
  std::string *v328;
  size_t v329;
  uint64_t *v330;
  size_t v331;
  size_t v332;
  size_t v333;
  int v334;
  BOOL v335;
  size_t v336;
  size_t v337;
  int v338;
  _BOOL4 v339;
  std::string::size_type v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  std::string::size_type v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  std::string::size_type v351;
  std::string::size_type v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  char v359;
  BOOL v360;
  void *v361;
  size_t v362;
  size_t v363;
  uint64_t v364;
  std::string::size_type v365;
  int State;
  int v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  char v371;
  BOOL v372;
  void *v373;
  size_t v374;
  size_t v375;
  BOOL v376;
  int v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  char v381;
  BOOL v382;
  void *v383;
  size_t v384;
  size_t v385;
  void **v386;
  size_t v387;
  BOOL v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  llvm *TimeTraceProfilerInstance;
  std::string *v394;
  char v395;
  uint64_t *v396;
  const void **v397;
  const void **v398;
  int v399;
  std::string::size_type v400;
  char v401;
  unsigned int *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  int __s2;
  const void **__s2a;
  size_t v410;
  size_t v411;
  size_t v412;
  int v413;
  size_t v415;
  uint64_t *v417;
  uint64_t v419;
  uint64_t v421;
  _QWORD v422[3];
  __int16 v423;
  void *v424[2];
  char v425;
  void *v426[2];
  int64_t v427;
  __int16 v428;
  _DWORD *v429;
  uint64_t v430;
  void **__dst;
  size_t __n;
  uint64_t v433;
  std::string v434;
  void *v435;
  uint64_t v436;
  std::string::size_type v437;
  __int16 v438;
  std::string v439[2];
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int16 v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  std::string __len;
  __int128 __p;
  int64_t v451;
  char v452;
  uint64_t v453;

  v453 = *MEMORY[0x24BDAC8D0];
  v8 = *(unsigned int **)(*(_QWORD *)a3 + 16);
  v11 = *v8;
  v10 = v8 + 4;
  v9 = v11;
  if (v11 >= 0x17uLL)
  {
    if ((v9 | 7) == 0x17)
      v13 = (v9 & 0xFFFFFFF8) + 8;
    else
      v13 = v9 | 7;
    p_dst = (void **)operator new(v13 + 1);
    __n = v9;
    v433 = v13 - 0x7FFFFFFFFFFFFFFFLL;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v433) = v9;
    p_dst = (void **)&__dst;
    if (!v9)
      goto LABEL_9;
  }
  memmove(p_dst, v10, v9);
LABEL_9:
  *((_BYTE *)p_dst + v9) = 0;
  v14 = sub_22E6D2DD0((_QWORD *)a1);
  kdebug_trace_string();
  v421 = a1;
  sub_22E6D2DD0((_QWORD *)a1);
  kdebug_trace_string();
  v15 = atomic_load((unsigned __int8 *)&qword_253E4BCC8);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_253E4BCC8))
  {
    qword_253E4BCC0 = (uint64_t)sub_22F2A8040();
    __cxa_guard_release(&qword_253E4BCC8);
  }
  kdebug_trace();
  v16 = *(_DWORD *)(v14 + 28);
  *(_DWORD *)(v14 + 28) = v16 + 1;
  v17 = a3[2];
  if (a2 && *(_DWORD *)(a1 + 356) == a2)
  {
    v18 = *(_QWORD *)(a1 + 360);
    if (v18 >= 8 && (v18 & 6) == 0)
    {
      v19 = **(_QWORD **)(a1 + 16);
      v20 = HIBYTE(v433) & 0x7F;
      if (v433 >= 0)
        v21 = HIBYTE(v433) & 0x7F;
      else
        v21 = __n;
      v22 = *(_BYTE *)(v19 + 519);
      v23 = v22;
      v24 = v22 & 0x7F;
      if (v23 < 0)
        v24 = *(_QWORD *)(v19 + 504);
      if (v21 == v24)
      {
        v25 = (unsigned __int8 *)(v19 + 496);
        v26 = *(unsigned __int8 **)(v19 + 496);
        if (v23 >= 0)
          v27 = v25;
        else
          v27 = v26;
        if (v433 < 0)
        {
          if (!memcmp(__dst, v27, __n))
            goto LABEL_51;
        }
        else
        {
          if ((v433 & 0x7F00000000000000) == 0)
            goto LABEL_51;
          v28 = (void **)&__dst;
          while (*(unsigned __int8 *)v28 == *v27)
          {
            v28 = (void **)((char *)v28 + 1);
            ++v27;
            if (!--v20)
              goto LABEL_51;
          }
        }
      }
      sub_22E77A418(*(int32x2_t **)(a1 + 264), v18 & 0xFFFFFFFFFFFFFFF8, a5);
      v18 = *(_QWORD *)(a1 + 360);
    }
    goto LABEL_51;
  }
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 104);
  v30 = sub_22F2A79F4(v29 + 488, *(_QWORD *)a3);
  v413 = v16;
  if (v31)
  {
    v18 = v30;
    goto LABEL_31;
  }
  v151 = **(_QWORD **)(v421 + 16);
  v152 = SHIBYTE(v433);
  v153 = HIBYTE(v433) & 0x7F;
  if (v433 >= 0)
    v154 = HIBYTE(v433) & 0x7F;
  else
    v154 = __n;
  v155 = *(_BYTE *)(v151 + 519);
  v156 = v155;
  v157 = v155 & 0x7F;
  if (v156 < 0)
    v157 = *(_QWORD *)(v151 + 504);
  if (v154 == v157)
  {
    v158 = (unsigned __int8 *)(v151 + 496);
    v159 = *(unsigned __int8 **)(v151 + 496);
    if (v156 >= 0)
      v160 = v158;
    else
      v160 = v159;
    if (v433 < 0)
    {
      if (memcmp(__dst, v160, __n))
        goto LABEL_240;
LABEL_416:
      if (v152 >= 0)
        v248 = (const void **)&__dst;
      else
        v248 = (const void **)__dst;
      v18 = sub_22F138980(*(uint64_t **)(*(_QWORD *)(v421 + 192) + 104), v248, v154, a2, 1, a6 ^ 1);
      __len.__r_.__value_.__r.__words[0] = *(_QWORD *)a3;
      sub_22F2A80BC(v29 + 1544, (uint64_t *)&__len)[1] = v18;
      goto LABEL_31;
    }
    if ((v433 & 0x7F00000000000000) == 0)
      goto LABEL_416;
    v247 = (void **)&__dst;
    while (*(unsigned __int8 *)v247 == *v160)
    {
      v247 = (void **)((char *)v247 + 1);
      ++v160;
      if (!--v153)
        goto LABEL_416;
    }
  }
LABEL_240:
  if (v152 >= 0)
    v161 = (const void **)&__dst;
  else
    v161 = (const void **)__dst;
  v162 = *(uint64_t **)(*(_QWORD *)(v421 + 192) + 104);
  v403 = sub_22F138980(v162, v161, v154, a2, 1, a6 ^ 1);
  memset(&v434, 0, sizeof(v434));
  __s2a = v161;
  v439[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v161;
  v439[0].__r_.__value_.__l.__size_ = v154;
  v163 = sub_22F2A7F98(v421 + 328, (uint64_t)v439);
  v164 = v163;
  v412 = v154;
  v396 = v162;
  if ((const void **)(v421 + 336) != v163)
  {
    std::string::operator=(&v434, (const std::string *)(v163 + 7));
    v399 = 0;
    v165 = 0;
    goto LABEL_406;
  }
  v239 = v162;
  v240 = *v162;
  if (!*(_QWORD *)(v240 + 160) && *(_QWORD *)(v240 + 168) == *(_QWORD *)(v240 + 176))
  {
    v264 = v403;
    if (v403)
      goto LABEL_630;
LABEL_633:
    v344 = *(_QWORD *)(v421 + 32);
    *(_DWORD *)(v344 + 312) = v17;
    *(_DWORD *)(v344 + 316) = 42;
    v345 = v14;
    if (*(char *)(v344 + 311) < 0)
    {
      **(_BYTE **)(v344 + 288) = 0;
      *(_QWORD *)(v344 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v344 + 288) = 0;
      *(_BYTE *)(v344 + 311) = 0;
    }
    *(_OWORD *)&__len.__r_.__value_.__l.__data_ = v344 + 320;
    __len.__r_.__value_.__r.__words[2] = v344;
    LOWORD(__p) = 1;
    *(_BYTE *)(v344 + 320) = 0;
    *(_DWORD *)(v344 + 664) = 0;
    v346 = *(unsigned int *)(v344 + 776);
    if ((_DWORD)v346)
    {
      v347 = *(_QWORD *)(v344 + 768);
      v348 = 56 * v346;
      do
      {
        if (*(char *)(v347 + v348 - 9) < 0)
          operator delete(*(void **)(v347 + v348 - 32));
        v348 -= 56;
      }
      while (v348);
    }
    *(_DWORD *)(v344 + 776) = 0;
    sub_22E3B89A8((unsigned __int8 **)&__len, __s2a, v412);
    v349 = __len.__r_.__value_.__r.__words[0];
    if (!__len.__r_.__value_.__r.__words[0])
    {
      v349 = sub_22E3B8AAC(__len.__r_.__value_.__l.__size_);
      __len.__r_.__value_.__r.__words[0] = v349;
    }
    sub_22E4D6448(v349 + 336, a2 | (unint64_t)(v17 << 32), 1);
    sub_22E3BB0B8((uint64_t)&__len);
    v18 = 0;
    v14 = v345;
    goto LABEL_644;
  }
  sub_22F137ED4(v239, v439[0].__r_.__value_.__l.__data_, v439[0].__r_.__value_.__l.__size_, 0, &__len);
  if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v434.__r_.__value_.__l.__data_);
  v434 = __len;
  LOBYTE(v241) = *((_BYTE *)&__len.__r_.__value_.__s + 23);
  if (*(char *)(v240 + 216) < 0)
  {
    size = HIBYTE(__len.__r_.__value_.__r.__words[2]) & 0x7F;
    if ((__len.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v434.__r_.__value_.__l.__size_;
    if (!size)
    {
      sub_22F1382C4((uint64_t)v396, v403, (uint64_t)&__len);
      if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v434.__r_.__value_.__l.__data_);
      v434 = __len;
      v241 = HIBYTE(__len.__r_.__value_.__r.__words[2]);
    }
  }
  v243 = (char)v241;
  v244 = v241 & 0x7F;
  if (v243 < 0)
    v244 = v434.__r_.__value_.__l.__size_;
  if (v244)
  {
    v399 = 0;
    v165 = 1;
    goto LABEL_406;
  }
  if ((*(char *)(v240 + 216) & 0x80000000) == 0)
  {
    v263 = 0;
LABEL_462:
    v264 = v403;
    goto LABEL_628;
  }
  v407 = v14;
  v296 = (const void *)v439[0].__r_.__value_.__r.__words[0];
  v398 = v164;
  if (v439[0].__r_.__value_.__r.__words[0])
  {
    v297 = v439[0].__r_.__value_.__l.__size_;
    if (v439[0].__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
LABEL_753:
      abort();
    if (v439[0].__r_.__value_.__l.__size_ >= 0x17)
    {
      v325 = (v439[0].__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v439[0].__r_.__value_.__l.__size_ | 7) != 0x17)
        v325 = v439[0].__r_.__value_.__l.__size_ | 7;
      v400 = v325 + 1;
      p_len = (std::string *)operator new(v325 + 1);
      __len.__r_.__value_.__r.__words[2] = v400 | 0x8000000000000000;
      __len.__r_.__value_.__r.__words[0] = (std::string::size_type)p_len;
      __len.__r_.__value_.__l.__size_ = v297;
    }
    else
    {
      *((_BYTE *)&__len.__r_.__value_.__s + 23) = v439[0].__r_.__value_.__s.__data_[8];
      p_len = &__len;
      if (!v439[0].__r_.__value_.__l.__size_)
        goto LABEL_583;
    }
    memmove(p_len, v296, v297);
LABEL_583:
    p_len->__r_.__value_.__s.__data_[v297] = 0;
    v316 = HIBYTE(__len.__r_.__value_.__r.__words[2]);
    goto LABEL_584;
  }
  v316 = 0;
  memset(&__len, 0, sizeof(__len));
LABEL_584:
  v326 = *(uint64_t ***)(v240 + 784);
  if (!v326)
  {
    v263 = 0;
    v264 = v403;
    v14 = v407;
    v164 = v398;
    goto LABEL_627;
  }
  v401 = v316;
  if ((v316 & 0x80u) == 0)
    v327 = v316;
  else
    v327 = __len.__r_.__value_.__l.__size_;
  if ((v316 & 0x80u) == 0)
    v328 = &__len;
  else
    v328 = (std::string *)__len.__r_.__value_.__r.__words[0];
  while (1)
  {
    v329 = *((unsigned __int8 *)v326 + 55);
    if ((v329 & 0x80u) == 0)
      v330 = (uint64_t *)(v326 + 4);
    else
      v330 = v326[4];
    v331 = (size_t)v326[5];
    if ((v329 & 0x80u) == 0)
      v332 = v329 & 0x7F;
    else
      v332 = (size_t)v326[5];
    if (v332 >= v327)
      v333 = v327;
    else
      v333 = v332;
    v334 = memcmp(v328, v330, v333);
    v335 = v327 < v332;
    if (v334)
      v335 = v334 < 0;
    if (v335)
      goto LABEL_613;
    if ((v329 & 0x80u) == 0)
      v336 = v329;
    else
      v336 = v331;
    if (v327 >= v336)
      v337 = v336;
    else
      v337 = v327;
    v338 = memcmp(v330, v328, v337);
    v339 = v336 < v327;
    if (v338)
      v339 = v338 < 0;
    if (!v339)
      break;
    ++v326;
LABEL_613:
    v16 = v413;
    v326 = (uint64_t **)*v326;
    if (!v326)
    {
      v263 = 0;
      v14 = v407;
      goto LABEL_626;
    }
  }
  v263 = 1;
  v14 = v407;
  v16 = v413;
LABEL_626:
  v264 = v403;
  v164 = v398;
  LOBYTE(v316) = v401;
LABEL_627:
  if ((v316 & 0x80) != 0)
  {
    operator delete(__len.__r_.__value_.__l.__data_);
    goto LABEL_462;
  }
LABEL_628:
  if (!v264 || (v263 & 1) != 0)
    goto LABEL_633;
LABEL_630:
  sub_22F137E24((uint64_t)v396, v264, &__len);
  if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v434.__r_.__value_.__l.__data_);
  v165 = 0;
  v434 = __len;
  v399 = 1;
LABEL_406:
  v245 = *((_BYTE *)&v434.__r_.__value_.__s + 23) & 0x7F;
  if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v245 = v434.__r_.__value_.__l.__size_;
  if (!v245)
  {
    if (!v403 || (*(_WORD *)(v403 + 1344) & 2) == 0)
    {
      v249 = *(_QWORD *)(v421 + 32);
      *(_DWORD *)(v249 + 312) = v17;
      *(_DWORD *)(v249 + 316) = 36;
      v250 = v14;
      if (*(char *)(v249 + 311) < 0)
      {
        **(_BYTE **)(v249 + 288) = 0;
        *(_QWORD *)(v249 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v249 + 288) = 0;
        *(_BYTE *)(v249 + 311) = 0;
      }
      *(_OWORD *)&__len.__r_.__value_.__l.__data_ = v249 + 320;
      __len.__r_.__value_.__r.__words[2] = v249;
      LOWORD(__p) = 1;
      *(_BYTE *)(v249 + 320) = 0;
      *(_DWORD *)(v249 + 664) = 0;
      v293 = *(unsigned int *)(v249 + 776);
      v262 = v421;
      if ((_DWORD)v293)
      {
        v294 = *(_QWORD *)(v249 + 768);
        v295 = 56 * v293;
        do
        {
          if (*(char *)(v294 + v295 - 9) < 0)
            operator delete(*(void **)(v294 + v295 - 32));
          v295 -= 56;
        }
        while (v295);
      }
      *(_DWORD *)(v249 + 776) = 0;
      sub_22E3B89A8((unsigned __int8 **)&__len, __s2a, v412);
      sub_22E3BB0B8((uint64_t)&__len);
      v18 = 0;
      v14 = v250;
      goto LABEL_745;
    }
    v18 = 4;
LABEL_644:
    v262 = v421;
    goto LABEL_745;
  }
  started = *(_QWORD *)(v421 + 264);
  v397 = v164;
  if (started)
  {
    if (!*(_DWORD *)(started + 32))
      started = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(started + 24) + 8))(started + 24);
  }
  else
  {
    sub_22E6CF0EC((_QWORD *)v421);
  }
  v445 = 0;
  v443 = 0u;
  v444 = 0u;
  v441 = 0u;
  v442 = 0u;
  v440 = 0u;
  memset(v439, 0, sizeof(v439));
  v448 = 0;
  v446 = 0;
  v447 = 0;
  if (*(_QWORD *)(v421 + 248))
  {
    std::operator+<char>();
    std::operator+<char>();
    started = llvm::Timer::init();
    if (SHIBYTE(v437) < 0)
      operator delete(v435);
    if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__len.__r_.__value_.__l.__data_);
    if (*(_QWORD *)(v421 + 248))
    {
      v252 = v439;
      started = llvm::Timer::startTimer((llvm::Timer *)v439);
      v395 = 0;
    }
    else
    {
      v252 = 0;
      v395 = 1;
    }
  }
  else
  {
    v252 = 0;
    v395 = 1;
  }
  if (llvm::getTimeTraceProfilerInstance((llvm *)started))
    llvm::timeTraceProfilerBegin();
  if (v165)
    v253 = 0;
  else
    v253 = 8;
  if (v399)
    v254 = 19;
  else
    v254 = v253;
  v255 = *(_QWORD *)(v421 + 264);
  if (v255)
    ++*(_DWORD *)(v255 + 32);
  if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v256 = &v434;
  else
    v256 = (std::string *)v434.__r_.__value_.__r.__words[0];
  if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v257 = *((_BYTE *)&v434.__r_.__value_.__s + 23) & 0x7F;
  else
    v257 = v434.__r_.__value_.__l.__size_;
  if (v165)
    v258 = 5;
  else
    v258 = v421 + 336 != (_QWORD)v397;
  v259 = sub_22E77A990(v255, v256, v257, v258, a2, v254, 0);
  v260 = v259;
  if (v255)
  {
    v261 = *(_DWORD *)(v255 + 32) - 1;
    *(_DWORD *)(v255 + 32) = v261;
    if (!v261)
      v259 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v255 + 24) + 8))(v255 + 24);
  }
  switch(v260)
  {
    case 0:
      if (v403)
      {
        v18 = v403 & 0xFFFFFFFFFFFFFFF9;
        goto LABEL_524;
      }
      v299 = sub_22F138980(v396, __s2a, v412, a2, 1, a6 ^ 1);
      if (v299)
      {
        v300 = v299;
        v301 = v299;
        do
        {
          v302 = v301;
          v301 = *(_QWORD *)(v301 + 32);
        }
        while (v301);
        if (*(_QWORD *)(v302 + 256))
        {
          v303 = (v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &v434
               : (std::string *)v434.__r_.__value_.__r.__words[0];
          v304 = (v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? *((_BYTE *)&v434.__r_.__value_.__s + 23) & 0x7F
               : v434.__r_.__value_.__l.__size_;
          v259 = sub_22F1D07D8(*(_QWORD *)(v421 + 160), v303, v304, 0, 1, (uint64_t)&__len);
          if ((__len.__r_.__value_.__s.__data_[16] & 1) == 0)
          {
            v305 = v300;
            do
            {
              v306 = v305;
              v305 = *(_QWORD *)(v305 + 32);
            }
            while (v305);
            v307 = *(_QWORD *)(v306 + 256);
            if (v307)
            {
              do
              {
                v308 = *(_QWORD *)(v307 + 8);
                v307 = v308 & 0xFFFFFFFFFFFFFFFCLL;
              }
              while ((v308 & 2) != 0 && v307);
            }
            v16 = v413;
            if (v307 == __len.__r_.__value_.__r.__words[0])
            {
              v18 = v300 & 0xFFFFFFFFFFFFFFF9;
              goto LABEL_524;
            }
          }
        }
      }
      v394 = v252;
      v309 = *(_QWORD *)(v421 + 32);
      *(_DWORD *)(v309 + 312) = v17;
      *(_DWORD *)(v309 + 316) = 43;
      v310 = v14;
      if (*(char *)(v309 + 311) < 0)
      {
        **(_BYTE **)(v309 + 288) = 0;
        *(_QWORD *)(v309 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v309 + 288) = 0;
        *(_BYTE *)(v309 + 311) = 0;
      }
      *(_OWORD *)&__len.__r_.__value_.__l.__data_ = v309 + 320;
      __len.__r_.__value_.__r.__words[2] = v309;
      LOWORD(__p) = 1;
      *(_BYTE *)(v309 + 320) = 0;
      *(_DWORD *)(v309 + 664) = 0;
      v341 = *(unsigned int *)(v309 + 776);
      v262 = v421;
      if ((_DWORD)v341)
      {
        v342 = *(_QWORD *)(v309 + 768);
        v343 = 56 * v341;
        do
        {
          if (*(char *)(v342 + v343 - 9) < 0)
            operator delete(*(void **)(v342 + v343 - 32));
          v343 -= 56;
        }
        while (v343);
      }
      *(_DWORD *)(v309 + 776) = 0;
      sub_22E3B89A8((unsigned __int8 **)&__len, __s2a, v412);
      v259 = sub_22E3BB0B8((uint64_t)&__len);
      v18 = 0;
      v14 = v310;
      goto LABEL_739;
    case 1:
    case 4:
    case 6:
      goto LABEL_459;
    case 5:
      if (v165)
      {
        v279 = v252;
        v280 = *(_QWORD *)(v421 + 32);
        *(_QWORD *)(v280 + 312) = 0x37D00000000;
        v281 = v14;
        if (*(char *)(v280 + 311) < 0)
        {
          **(_BYTE **)(v280 + 288) = 0;
          *(_QWORD *)(v280 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v280 + 288) = 0;
          *(_BYTE *)(v280 + 311) = 0;
        }
        *(_OWORD *)&__len.__r_.__value_.__l.__data_ = v280 + 320;
        __len.__r_.__value_.__r.__words[2] = v280;
        LOWORD(__p) = 1;
        *(_BYTE *)(v280 + 320) = 0;
        *(_DWORD *)(v280 + 664) = 0;
        v311 = *(unsigned int *)(v280 + 776);
        if ((_DWORD)v311)
        {
          v312 = *(_QWORD *)(v280 + 768);
          v313 = 56 * v311;
          do
          {
            if (*(char *)(v312 + v313 - 9) < 0)
              operator delete(*(void **)(v312 + v313 - 32));
            v313 -= 56;
          }
          while (v313);
        }
        *(_DWORD *)(v280 + 776) = 0;
        if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v314 = &v434;
        else
          v314 = (std::string *)v434.__r_.__value_.__r.__words[0];
        if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v315 = *((_BYTE *)&v434.__r_.__value_.__s + 23) & 0x7F;
        else
          v315 = v434.__r_.__value_.__l.__size_;
        sub_22E3B89A8((unsigned __int8 **)&__len, v314, v315);
        v259 = sub_22E3BB0B8((uint64_t)&__len);
        v14 = v281;
        v252 = v279;
      }
LABEL_459:
      v18 = 0;
      v262 = v421;
      *(_BYTE *)(v421 + 9) = 1;
      goto LABEL_740;
    default:
      if (!v399)
      {
        v18 = 0;
LABEL_524:
        v262 = v421;
        goto LABEL_740;
      }
      v394 = v252;
      v265 = *(_QWORD *)(v421 + 176);
      v266 = *(unsigned int *)(v265 + 488);
      if (!(_DWORD)v266)
        goto LABEL_478;
      v267 = *(const void ***)(v265 + 480);
      v268 = 40 * v266;
      break;
  }
  while (2)
  {
    v269 = *((_BYTE *)v267 + 23);
    v270 = v269 < 0;
    if (v269 >= 0)
      v271 = v267;
    else
      v271 = *v267;
    v272 = (const void *)(v269 & 0x7F);
    if (v270)
      v272 = v267[1];
    if (v272 == (const void *)v412 && (!v412 || !memcmp(v271, __s2a, v412)))
    {
      v317 = v14;
      __len.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      *(_OWORD *)&__len.__r_.__value_.__r.__words[1] = xmmword_22F44E320;
      v318 = 0;
      if (v268)
      {
        while (1)
        {
          v319 = *((_BYTE *)v267 + 23);
          v320 = v319 < 0;
          v321 = v319 >= 0 ? v267 : (const void **)*v267;
          v322 = (const void *)(v319 & 0x7F);
          v323 = (size_t)(v320 ? v267[1] : v322);
          if (__len.__r_.__value_.__r.__words[2] < v323 + v318)
            break;
          if (v323)
            goto LABEL_572;
LABEL_573:
          v324 = v318 + v323;
          __len.__r_.__value_.__l.__size_ = v324;
          if (__len.__r_.__value_.__r.__words[2] < v324 + 4)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v324 = __len.__r_.__value_.__l.__size_;
          }
          *(_DWORD *)(__len.__r_.__value_.__r.__words[0] + v324) = 540945696;
          v318 = __len.__r_.__value_.__l.__size_ + 4;
          __len.__r_.__value_.__l.__size_ += 4;
          v267 += 5;
          v268 -= 40;
          if (!v268)
          {
            v350 = __len.__r_.__value_.__r.__words[2];
            goto LABEL_649;
          }
        }
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v318 = __len.__r_.__value_.__l.__size_;
        if (!v323)
          goto LABEL_573;
LABEL_572:
        memcpy((void *)(__len.__r_.__value_.__r.__words[0] + v318), v321, v323);
        v318 = __len.__r_.__value_.__l.__size_;
        goto LABEL_573;
      }
      v350 = 256;
LABEL_649:
      if (v350 < v318 + v412)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v318 = __len.__r_.__value_.__l.__size_;
        if (!v412)
          goto LABEL_652;
      }
      else if (!v412)
      {
LABEL_652:
        __len.__r_.__value_.__l.__size_ = v318 + v412;
        v352 = *(_QWORD *)(v421 + 32);
        *(_DWORD *)(v352 + 312) = v17;
        *(_DWORD *)(v352 + 316) = 38;
        if (*(char *)(v352 + 311) < 0)
        {
          **(_BYTE **)(v352 + 288) = 0;
          *(_QWORD *)(v352 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v352 + 288) = 0;
          *(_BYTE *)(v352 + 311) = 0;
        }
        v435 = (void *)(v352 + 320);
        v436 = 0;
        v437 = v352;
        v438 = 1;
        *(_BYTE *)(v352 + 320) = 0;
        *(_DWORD *)(v352 + 664) = 0;
        v353 = *(unsigned int *)(v352 + 776);
        if ((_DWORD)v353)
        {
          v354 = *(_QWORD *)(v352 + 768);
          v355 = 56 * v353;
          do
          {
            if (*(char *)(v354 + v355 - 9) < 0)
              operator delete(*(void **)(v354 + v355 - 32));
            v355 -= 56;
          }
          while (v355);
        }
        *(_DWORD *)(v352 + 776) = 0;
        sub_22E3B89A8((unsigned __int8 **)&v435, __s2a, v412);
        sub_22E3B89A8((unsigned __int8 **)&v435, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
        sub_22E3BB0B8((uint64_t)&v435);
        v259 = __len.__r_.__value_.__r.__words[0];
        if ((__int128 *)__len.__r_.__value_.__l.__data_ != &__p)
          free(__len.__r_.__value_.__l.__data_);
        v18 = 0;
        v14 = v317;
        goto LABEL_738;
      }
      memcpy((void *)(__len.__r_.__value_.__r.__words[0] + v318), __s2a, v412);
      v318 = __len.__r_.__value_.__l.__size_;
      goto LABEL_652;
    }
    v267 += 5;
    v268 -= 40;
    if (v268)
      continue;
    break;
  }
LABEL_478:
  v273 = *(_QWORD *)(v421 + 16);
  v274 = *(_QWORD *)(*(_QWORD *)(v273 + 56) + 256);
  v406 = v14;
  if (v274)
  {
    Key = llvm::StringMapImpl::FindKey();
    if (Key != -1 && Key != (unint64_t)*(unsigned int *)(v274 + 8))
    {
      v351 = *(_QWORD *)(v421 + 32);
      *(_DWORD *)(v351 + 312) = v17;
      *(_DWORD *)(v351 + 316) = 41;
      if (*(char *)(v351 + 311) < 0)
      {
        **(_BYTE **)(v351 + 288) = 0;
        *(_QWORD *)(v351 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v351 + 288) = 0;
        *(_BYTE *)(v351 + 311) = 0;
      }
      *(_OWORD *)&__len.__r_.__value_.__l.__data_ = v351 + 320;
      __len.__r_.__value_.__r.__words[2] = v351;
      LOWORD(__p) = 1;
      *(_BYTE *)(v351 + 320) = 0;
      *(_DWORD *)(v351 + 664) = 0;
      v389 = *(unsigned int *)(v351 + 776);
      if ((_DWORD)v389)
      {
        v390 = *(_QWORD *)(v351 + 768);
        v391 = 56 * v389;
        do
        {
          if (*(char *)(v390 + v391 - 9) < 0)
            operator delete(*(void **)(v390 + v391 - 32));
          v391 -= 56;
        }
        while (v391);
      }
      *(_DWORD *)(v351 + 776) = 0;
      sub_22E3B89A8((unsigned __int8 **)&__len, __s2a, v412);
      v392 = __len.__r_.__value_.__r.__words[0];
      if (!__len.__r_.__value_.__r.__words[0])
      {
        v392 = sub_22E3B8AAC(__len.__r_.__value_.__l.__size_);
        __len.__r_.__value_.__r.__words[0] = v392;
      }
      sub_22E4D6448(v392 + 336, a2 | (unint64_t)(v17 << 32), 1);
      v259 = sub_22E3BB0B8((uint64_t)&__len);
      goto LABEL_736;
    }
    v273 = *(_QWORD *)(v421 + 16);
  }
  if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v276 = &v434;
  else
    v276 = (std::string *)v434.__r_.__value_.__r.__words[0];
  if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v277 = *((_BYTE *)&v434.__r_.__value_.__s + 23) & 0x7F;
  else
    v277 = v434.__r_.__value_.__l.__size_;
  if ((*(_BYTE *)(v273 + 2290) & 0x10) == 0)
  {
    v278 = v403;
    v259 = sub_22E6D603C(v421, a2, v17, v403, v276, v277);
    if ((v259 & 1) == 0)
      goto LABEL_725;
LABEL_490:
    v18 = v278 & 0xFFFFFFFFFFFFFFF9;
    goto LABEL_737;
  }
  v340 = *(_QWORD *)(v421 + 32);
  *(_DWORD *)(v340 + 312) = v17;
  *(_DWORD *)(v340 + 316) = 859;
  if (*(char *)(v340 + 311) < 0)
  {
    **(_BYTE **)(v340 + 288) = 0;
    *(_QWORD *)(v340 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v340 + 288) = 0;
    *(_BYTE *)(v340 + 311) = 0;
  }
  *(_OWORD *)&__len.__r_.__value_.__l.__data_ = v340 + 320;
  __len.__r_.__value_.__r.__words[2] = v340;
  LOWORD(__p) = 1;
  *(_BYTE *)(v340 + 320) = 0;
  *(_DWORD *)(v340 + 664) = 0;
  v356 = *(unsigned int *)(v340 + 776);
  if ((_DWORD)v356)
  {
    v357 = *(_QWORD *)(v340 + 768);
    v358 = 56 * v356;
    do
    {
      if (*(char *)(v357 + v358 - 9) < 0)
        operator delete(*(void **)(v357 + v358 - 32));
      v358 -= 56;
    }
    while (v358);
  }
  *(_DWORD *)(v340 + 776) = 0;
  sub_22E3B89A8((unsigned __int8 **)&__len, v276, v277);
  v359 = *(_BYTE *)(v403 + 23);
  v360 = v359 < 0;
  if (v359 >= 0)
    v361 = (void *)v403;
  else
    v361 = *(void **)v403;
  v362 = v359 & 0x7F;
  if (v360)
    v363 = *(_QWORD *)(v403 + 8);
  else
    v363 = v362;
  sub_22E3B89A8((unsigned __int8 **)&__len, v361, v363);
  sub_22E3BB0B8((uint64_t)&__len);
  v364 = llvm::sys::path::parent_path();
  WORD4(__p) = 261;
  __len.__r_.__value_.__r.__words[0] = v364;
  __len.__r_.__value_.__l.__size_ = v365;
  llvm::sys::fs::create_directories();
  while (1)
  {
    MEMORY[0x23489CF18](&__len, v276, v277);
    State = llvm::LockFileManager::getState((llvm::LockFileManager *)&__len);
    if (!State)
      break;
    if (State == 2)
    {
      *(_DWORD *)(v340 + 312) = v17;
      *(_DWORD *)(v340 + 316) = 116;
      if (*(char *)(v340 + 311) < 0)
      {
        **(_BYTE **)(v340 + 288) = 0;
        *(_QWORD *)(v340 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v340 + 288) = 0;
        *(_BYTE *)(v340 + 311) = 0;
      }
      v435 = (void *)(v340 + 320);
      v436 = 0;
      v437 = v340;
      v438 = 1;
      *(_BYTE *)(v340 + 320) = 0;
      *(_DWORD *)(v340 + 664) = 0;
      v378 = *(unsigned int *)(v340 + 776);
      if ((_DWORD)v378)
      {
        v379 = *(_QWORD *)(v340 + 768);
        v380 = 56 * v378;
        do
        {
          if (*(char *)(v379 + v380 - 9) < 0)
            operator delete(*(void **)(v379 + v380 - 32));
          v380 -= 56;
        }
        while (v380);
      }
      *(_DWORD *)(v340 + 776) = 0;
      v381 = *(_BYTE *)(v403 + 23);
      v382 = v381 < 0;
      if (v381 >= 0)
        v383 = (void *)v403;
      else
        v383 = *(void **)v403;
      v384 = v381 & 0x7F;
      if (v382)
        v385 = *(_QWORD *)(v403 + 8);
      else
        v385 = v384;
      sub_22E3B89A8((unsigned __int8 **)&v435, v383, v385);
      llvm::LockFileManager::getErrorMessage((llvm::LockFileManager *)&__len);
      if (v427 >= 0)
        v386 = v426;
      else
        v386 = (void **)v426[0];
      if (v427 >= 0)
        v387 = HIBYTE(v427) & 0x7F;
      else
        v387 = (size_t)v426[1];
      sub_22E3B89A8((unsigned __int8 **)&v435, v386, v387);
      if (SHIBYTE(v427) < 0)
        operator delete(v426[0]);
      sub_22E3BB0B8((uint64_t)&v435);
      llvm::LockFileManager::unsafeRemoveLockFile((llvm::LockFileManager *)&__len);
      break;
    }
    v367 = llvm::LockFileManager::waitForUnlock((llvm::LockFileManager *)&__len);
    if (v367 == 1)
      goto LABEL_695;
    if (v367 == 2)
    {
      *(_DWORD *)(v340 + 312) = v17;
      *(_DWORD *)(v340 + 316) = 117;
      if (*(char *)(v340 + 311) < 0)
      {
        **(_BYTE **)(v340 + 288) = 0;
        *(_QWORD *)(v340 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v340 + 288) = 0;
        *(_BYTE *)(v340 + 311) = 0;
      }
      v435 = (void *)(v340 + 320);
      v436 = 0;
      v437 = v340;
      v438 = 1;
      *(_BYTE *)(v340 + 320) = 0;
      *(_DWORD *)(v340 + 664) = 0;
      v368 = *(unsigned int *)(v340 + 776);
      if ((_DWORD)v368)
      {
        v369 = *(_QWORD *)(v340 + 768);
        v370 = 56 * v368;
        do
        {
          if (*(char *)(v369 + v370 - 9) < 0)
            operator delete(*(void **)(v369 + v370 - 32));
          v370 -= 56;
        }
        while (v370);
      }
      *(_DWORD *)(v340 + 776) = 0;
      v371 = *(_BYTE *)(v403 + 23);
      v372 = v371 < 0;
      if (v371 >= 0)
        v373 = (void *)v403;
      else
        v373 = *(void **)v403;
      v374 = v371 & 0x7F;
      if (v372)
        v375 = *(_QWORD *)(v403 + 8);
      else
        v375 = v374;
      sub_22E3B89A8((unsigned __int8 **)&v435, v373, v375);
      sub_22E3BB0B8((uint64_t)&v435);
      llvm::LockFileManager::unsafeRemoveLockFile((llvm::LockFileManager *)&__len);
LABEL_695:
      MEMORY[0x23489CF24](&__len);
      continue;
    }
    LOBYTE(v435) = 0;
    v376 = sub_22E6D6834(*(_QWORD *)(v421 + 32), *(_QWORD *)(v421 + 264), a2, v17, (void **)v403, v276, v277, &v435);
    v377 = v435;
    LOBYTE(v399) = v376 | ((_BYTE)v435 != 0) & v399;
    v259 = MEMORY[0x23489CF24](&__len);
    if (v376 || !v377)
    {
      v278 = v403;
      if ((v399 & 1) != 0)
        goto LABEL_490;
      goto LABEL_725;
    }
  }
  v278 = v403;
  v388 = sub_22E6D603C(v421, a2, v17, v403, v276, v277);
  v259 = MEMORY[0x23489CF24](&__len);
  if (v388)
    goto LABEL_490;
LABEL_725:
  v259 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v421 + 16) + 56) + 256);
  if (v259)
    v259 = (uint64_t)sub_22E3B39D4((llvm::StringMapImpl *)v259, __s2a, v412);
LABEL_736:
  v18 = 0;
LABEL_737:
  v14 = v406;
LABEL_738:
  v16 = v413;
  v262 = v421;
LABEL_739:
  v252 = v394;
LABEL_740:
  TimeTraceProfilerInstance = (llvm *)llvm::getTimeTraceProfilerInstance((llvm *)v259);
  if (TimeTraceProfilerInstance)
    llvm::timeTraceProfilerEnd(TimeTraceProfilerInstance);
  if ((v395 & 1) == 0)
    llvm::Timer::stopTimer((llvm::Timer *)v252);
  MEMORY[0x23489EEC8](v439);
LABEL_745:
  if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v434.__r_.__value_.__l.__data_);
  if ((v18 & 6) != 0)
    goto LABEL_51;
  if (v18 <= 7)
    *(_BYTE *)(v262 + 370) = 1;
  v18 &= 0xFFFFFFFFFFFFFFF8;
  __len.__r_.__value_.__r.__words[0] = *(_QWORD *)a3;
  sub_22F2A80BC(v29 + 1544, (uint64_t *)&__len)[1] = v18;
LABEL_31:
  if (!v18)
    goto LABEL_51;
  if ((_DWORD)a4 == 1)
  {
    __s2 = 0;
    goto LABEL_34;
  }
  __s2 = 0;
  v42 = &v439[0].__r_.__value_.__s.__data_[16];
  v43 = 1;
  v44 = v18;
  v45 = 1;
  v404 = v14;
  while (2)
  {
    v46 = *(unsigned int **)(*(_QWORD *)&a3[4 * v43] + 16);
    v47 = *v46;
    v429 = v46 + 4;
    v430 = v47;
    v48 = sub_22F41FEF0(v44);
    if (v48)
    {
      v18 = v48;
      goto LABEL_90;
    }
    v402 = &a3[4 * v43];
    if (v430 == 7 && *v429 == 1986622032 && *(_DWORD *)((char *)v429 + 3) == 1702125942)
    {
      v50 = v44;
      do
      {
        v51 = v50;
        v50 = *(_QWORD *)(v50 + 32);
      }
      while (v50);
      if (v44 == v51)
      {
        v65 = v42;
        v66 = *(_BYTE *)(v44 + 23);
        v67 = v66 < 0;
        if (v66 >= 0)
          v68 = (const void *)v44;
        else
          v68 = *(const void **)v44;
        v69 = v66 & 0x7F;
        if (v67)
          v70 = *(_QWORD *)(v44 + 8);
        else
          v70 = v69;
        __len.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        *(_OWORD *)&__len.__r_.__value_.__r.__words[1] = xmmword_22F44E310;
        if (v70 >= 0x81)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v71 = __len.__r_.__value_.__l.__size_;
          p_p = (__int128 *)__len.__r_.__value_.__r.__words[0];
        }
        else
        {
          v71 = 0;
          if (!v70)
          {
            v73 = 128;
LABEL_102:
            v74 = v14;
            v75 = v71 + v70;
            __len.__r_.__value_.__l.__size_ = v75;
            if (v73 < v75 + 8)
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
              v75 = __len.__r_.__value_.__l.__size_;
            }
            *(_QWORD *)(__len.__r_.__value_.__r.__words[0] + v75) = 0x657461766972505FLL;
            v76 = (const void *)__len.__r_.__value_.__r.__words[0];
            v77 = __len.__r_.__value_.__l.__size_ + 8;
            __len.__r_.__value_.__l.__size_ += 8;
            v435 = &v437;
            v436 = 0x200000000;
            v78 = (llvm::StringMapImpl *)(*(_QWORD *)(v421 + 192) + 544);
            v79 = *(_BYTE *)(v44 + 23);
            v80 = v79 < 0;
            if (v79 >= 0)
              v81 = (const void *)v44;
            else
              v81 = *(const void **)v44;
            v82 = v79 & 0x7F;
            if (v80)
              v83 = *(_QWORD *)(v44 + 8);
            else
              v83 = v82;
            v84 = *(_QWORD *)sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v421 + 192) + 544), v81, v83);
            v85 = (_QWORD *)sub_22E3CB704(v78, v76, v77);
            *v85 = *v85 & 0xFFFFFFFFFFFFFE00 | v84 & 0x1FF;
            v86 = a3[2];
            v87 = v436;
            if (v436 >= (unint64_t)HIDWORD(v436))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v87 = v436;
            }
            v14 = v74;
            v88 = (char *)v435 + 16 * v87;
            *v88 = v85;
            v88[1] = v86;
            LODWORD(v436) = v436 + 1;
            if (!sub_22F138980(*(uint64_t **)(*(_QWORD *)(v421 + 192) + 104), (const void **)__len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_, a2, 1, a6 ^ 1)|| (v89 = (*(uint64_t (**)(uint64_t, _QWORD, void *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v421 + 16))(v421, a2, v435, v436, a5, a6), (v89 & 0xFFFFFFFFFFFFFFF8) == 0))
            {
              v18 = 0;
              goto LABEL_115;
            }
            v411 = v89 & 0xFFFFFFFFFFFFFFF8;
            sub_22F2A7A64(*(_QWORD *)(v421 + 192), v44);
            v112 = *(_QWORD *)(v421 + 32);
            if (sub_22F1CF68C(*(_QWORD *)(v112 + 32), 0x37Eu, a2, v112) == 1)
            {
              __s2 = 1;
LABEL_195:
              v18 = v411;
LABEL_115:
              v42 = v65;
              if (v435 != &v437)
                free(v435);
              if ((__int128 *)__len.__r_.__value_.__l.__data_ != &__p)
                free(__len.__r_.__value_.__l.__data_);
              if (!v18)
                goto LABEL_68;
              goto LABEL_90;
            }
            v113 = &a3[4 * v43];
            v115 = v113[2];
            v114 = v113 + 2;
            *(_DWORD *)(v112 + 312) = v115;
            *(_DWORD *)(v112 + 316) = 894;
            if (*(char *)(v112 + 311) < 0)
            {
              **(_BYTE **)(v112 + 288) = 0;
              *(_QWORD *)(v112 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v112 + 288) = 0;
              *(_BYTE *)(v112 + 311) = 0;
            }
            v116 = (unsigned __int8 *)(v112 + 320);
            v426[0] = (void *)(v112 + 320);
            v426[1] = 0;
            v427 = v112;
            v428 = 1;
            *(_BYTE *)(v112 + 320) = 0;
            *(_DWORD *)(v112 + 664) = 0;
            v117 = *(unsigned int *)(v112 + 776);
            if ((_DWORD)v117)
            {
              v118 = *(_QWORD *)(v112 + 768);
              v119 = 56 * v117;
              do
              {
                if (*(char *)(v118 + v119 - 9) < 0)
                  operator delete(*(void **)(v118 + v119 - 32));
                v119 -= 56;
              }
              while (v119);
              v116 = (unsigned __int8 *)v426[0];
              *(_DWORD *)(v112 + 776) = 0;
              v120 = *(_QWORD *)v402;
              if (!v116)
              {
                v116 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v426[1]);
                v426[0] = v116;
              }
            }
            else
            {
              *(_DWORD *)(v112 + 776) = 0;
              v120 = *(_QWORD *)v402;
            }
            v116[*v116 + 1] = 5;
            v121 = v426[0];
            v122 = *(unsigned __int8 *)v426[0];
            *(_BYTE *)v426[0] = v122 + 1;
            v121[v122 + 2] = v120;
            sub_22F1D8A24((uint64_t *)v44, 0, v424);
            if (v425 >= 0)
              v123 = v424;
            else
              v123 = (void **)v424[0];
            if (v425 >= 0)
              v124 = v425 & 0x7F;
            else
              v124 = (size_t)v424[1];
            sub_22E3B89A8((unsigned __int8 **)v426, v123, v124);
            sub_22E3B89A8((unsigned __int8 **)v426, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
            v125 = a3[2];
            v126 = *v114;
            v127 = v426[0];
            if (!v426[0])
            {
              v127 = (void *)sub_22E3B8AAC((uint64_t)v426[1]);
              v426[0] = v127;
            }
            sub_22E4D6448((uint64_t)v127 + 336, v125 | (v126 << 32), 1);
            v128 = *(_OWORD *)&__len.__r_.__value_.__l.__data_;
            v129 = a3[2] | ((unint64_t)a3[2] << 32);
            *(std::string::size_type *)((char *)&v439[0].__r_.__value_.__r.__words[1] + 4) = 0;
            v439[0].__r_.__value_.__s.__data_[20] = 0;
            memset(&v439[1], 0, sizeof(std::string));
            LOBYTE(v440) = 0;
            v439[0].__r_.__value_.__r.__words[0] = v129;
            v439[0].__r_.__value_.__s.__data_[8] = 1;
            if (__len.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_753;
            if (__len.__r_.__value_.__l.__size_ >= 0x17)
            {
              v131 = (__len.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((__len.__r_.__value_.__l.__size_ | 7) != 0x17)
                v131 = __len.__r_.__value_.__l.__size_ | 7;
              v132 = v131 + 1;
              v130 = operator new(v131 + 1);
              v434.__r_.__value_.__l.__size_ = *((_QWORD *)&v128 + 1);
              v434.__r_.__value_.__r.__words[2] = v132 | 0x8000000000000000;
              v434.__r_.__value_.__r.__words[0] = (std::string::size_type)v130;
            }
            else
            {
              *((_BYTE *)&v434.__r_.__value_.__s + 23) = __len.__r_.__value_.__s.__data_[8];
              v130 = &v434;
              if (!__len.__r_.__value_.__l.__size_)
                goto LABEL_182;
            }
            memmove(v130, (const void *)v128, *((size_t *)&v128 + 1));
LABEL_182:
            *((_BYTE *)v130 + *((_QWORD *)&v128 + 1)) = 0;
            v439[1] = v434;
            sub_22E6D82D0((uint64_t *)v426, v439);
            if (SHIBYTE(v439[1].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v439[1].__r_.__value_.__l.__data_);
            if (v425 < 0)
              operator delete(v424[0]);
            sub_22E3BB0B8((uint64_t)v426);
            v133 = *(_QWORD *)(v421 + 32);
            *(_DWORD *)(v133 + 312) = *(_DWORD *)(v411 + 24);
            *(_DWORD *)(v133 + 316) = 848;
            if (*(char *)(v133 + 311) < 0)
            {
              **(_BYTE **)(v133 + 288) = 0;
              *(_QWORD *)(v133 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v133 + 288) = 0;
              *(_BYTE *)(v133 + 311) = 0;
            }
            v422[0] = v133 + 320;
            v422[1] = 0;
            v422[2] = v133;
            v423 = 1;
            *(_BYTE *)(v133 + 320) = 0;
            *(_DWORD *)(v133 + 664) = 0;
            v134 = *(unsigned int *)(v133 + 776);
            if ((_DWORD)v134)
            {
              v135 = *(_QWORD *)(v133 + 768);
              v136 = 56 * v134;
              do
              {
                if (*(char *)(v135 + v136 - 9) < 0)
                  operator delete(*(void **)(v135 + v136 - 32));
                v136 -= 56;
              }
              while (v136);
            }
            *(_DWORD *)(v133 + 776) = 0;
            sub_22E3BB0B8((uint64_t)v422);
            __s2 = 1;
            v14 = v74;
            goto LABEL_195;
          }
          p_p = &__p;
        }
        memcpy((char *)p_p + v71, v68, v70);
        v73 = __len.__r_.__value_.__r.__words[2];
        v71 = __len.__r_.__value_.__l.__size_;
        goto LABEL_102;
      }
    }
LABEL_68:
    v52 = v42;
    v439[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
    v439[0].__r_.__value_.__l.__size_ = 0x200000000;
    v53 = *(uint64_t ***)(v44 + 200);
    v54 = *(uint64_t ***)(v44 + 208);
    if (v53 != v54)
    {
      v55 = -1;
      do
      {
        v56 = *v53;
        v57 = llvm::StringRef::edit_distance();
        if (v57 <= v55)
        {
          if (v57 >= v55)
          {
            v58 = LODWORD(v439[0].__r_.__value_.__r.__words[1]);
          }
          else
          {
            v58 = 0;
            LODWORD(v439[0].__r_.__value_.__r.__words[1]) = 0;
            v55 = v57;
          }
          v59 = *((_BYTE *)v56 + 23);
          v60 = v59 < 0;
          v61 = v56[1];
          if (v59 < 0)
            v56 = (uint64_t *)*v56;
          v62 = v59 & 0x7F;
          if (v60)
            v63 = v61;
          else
            v63 = v62;
          if (v58 >= HIDWORD(v439[0].__r_.__value_.__r.__words[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v58 = LODWORD(v439[0].__r_.__value_.__r.__words[1]);
          }
          v64 = (_QWORD *)(v439[0].__r_.__value_.__r.__words[0] + 16 * v58);
          *v64 = v56;
          v64[1] = v63;
          ++LODWORD(v439[0].__r_.__value_.__r.__words[1]);
        }
        ++v53;
      }
      while (v53 != v54);
      if (LODWORD(v439[0].__r_.__value_.__r.__words[1]) != 1)
      {
        v18 = 0;
        v14 = v404;
        goto LABEL_86;
      }
      v90 = *(_QWORD *)(v421 + 32);
      v91 = &a3[4 * v43];
      v93 = v91[2];
      v92 = v91 + 2;
      *(_DWORD *)(v90 + 312) = v93;
      *(_DWORD *)(v90 + 316) = 813;
      if (*(char *)(v90 + 311) < 0)
      {
        **(_BYTE **)(v90 + 288) = 0;
        *(_QWORD *)(v90 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v90 + 288) = 0;
        *(_BYTE *)(v90 + 311) = 0;
      }
      v94 = (unsigned __int8 *)(v90 + 320);
      v435 = (void *)(v90 + 320);
      v436 = 0;
      v437 = v90;
      v438 = 1;
      *(_BYTE *)(v90 + 320) = 0;
      *(_DWORD *)(v90 + 664) = 0;
      v95 = *(unsigned int *)(v90 + 776);
      if ((_DWORD)v95)
      {
        v97 = *(_QWORD *)(v90 + 768);
        v98 = 56 * v95;
        do
        {
          if (*(char *)(v97 + v98 - 9) < 0)
            operator delete(*(void **)(v97 + v98 - 32));
          v98 -= 56;
        }
        while (v98);
        v94 = (unsigned __int8 *)v435;
        *(_DWORD *)(v90 + 776) = 0;
        v96 = *(_QWORD *)v402;
        if (!v94)
        {
          v94 = (unsigned __int8 *)sub_22E3B8AAC(v436);
          v435 = v94;
        }
      }
      else
      {
        *(_DWORD *)(v90 + 776) = 0;
        v96 = *(_QWORD *)v402;
      }
      v94[*v94 + 1] = 5;
      v99 = v435;
      v100 = *(unsigned __int8 *)v435;
      *(_BYTE *)v435 = v100 + 1;
      v99[v100 + 2] = v96;
      sub_22F1D8A24((uint64_t *)v44, 0, &v434);
      if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v101 = &v434;
      else
        v101 = (std::string *)v434.__r_.__value_.__r.__words[0];
      if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v102 = *((_BYTE *)&v434.__r_.__value_.__s + 23) & 0x7F;
      else
        v102 = v434.__r_.__value_.__l.__size_;
      sub_22E3B89A8((unsigned __int8 **)&v435, v101, v102);
      sub_22E3B89A8((unsigned __int8 **)&v435, *(void **)v439[0].__r_.__value_.__l.__data_, *(_QWORD *)(v439[0].__r_.__value_.__r.__words[0] + 8));
      v103 = a3[2];
      v104 = a3[4 * v43 - 2];
      v105 = v435;
      if (!v435)
      {
        v105 = (void *)sub_22E3B8AAC(v436);
        v435 = v105;
      }
      sub_22E4D6448((uint64_t)v105 + 336, v103 | (v104 << 32), 1);
      v106 = *v92;
      v108 = *(const void **)v439[0].__r_.__value_.__l.__data_;
      v107 = *(_QWORD *)(v439[0].__r_.__value_.__r.__words[0] + 8);
      *(std::string::size_type *)((char *)&__len.__r_.__value_.__r.__words[1] + 4) = 0;
      __len.__r_.__value_.__s.__data_[20] = 0;
      v451 = 0;
      __p = 0uLL;
      v452 = 0;
      __len.__r_.__value_.__r.__words[0] = v106 | (v106 << 32);
      __len.__r_.__value_.__s.__data_[8] = 1;
      if (v107 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_753;
      if (v107 >= 0x17)
      {
        v110 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v107 | 7) != 0x17)
          v110 = v107 | 7;
        v111 = v110 + 1;
        v109 = operator new(v110 + 1);
        v426[1] = (void *)v107;
        v427 = v111 | 0x8000000000000000;
        v426[0] = v109;
      }
      else
      {
        HIBYTE(v427) = v107;
        v109 = v426;
        if (!v107)
        {
LABEL_148:
          *((_BYTE *)v109 + v107) = 0;
          __p = *(_OWORD *)v426;
          v451 = v427;
          sub_22E6D82D0((uint64_t *)&v435, &__len);
          if (SHIBYTE(v451) < 0)
            operator delete((void *)__p);
          v14 = v404;
          v42 = v52;
          if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v434.__r_.__value_.__l.__data_);
          sub_22E3BB0B8((uint64_t)&v435);
          v18 = sub_22F41FEF0(v44);
          goto LABEL_87;
        }
      }
      memmove(v109, v108, v107);
      goto LABEL_148;
    }
    v18 = 0;
    v14 = v404;
LABEL_86:
    v42 = v52;
LABEL_87:
    if (v439[0].__r_.__value_.__l.__data_ != v42)
      free(v439[0].__r_.__value_.__l.__data_);
    if (v18)
    {
LABEL_90:
      ++v45;
      ++v43;
      v44 = v18;
      if (v45 == (_DWORD)a4)
        goto LABEL_34;
      continue;
    }
    break;
  }
  v251 = *(_QWORD *)(v421 + 32);
  *(_DWORD *)(v251 + 312) = a3[4 * v43 + 2];
  *(_DWORD *)(v251 + 316) = 812;
  if (*(char *)(v251 + 311) < 0)
  {
    **(_BYTE **)(v251 + 288) = 0;
    *(_QWORD *)(v251 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v251 + 288) = 0;
    *(_BYTE *)(v251 + 311) = 0;
  }
  v282 = (unsigned __int8 *)(v251 + 320);
  *(_OWORD *)&__len.__r_.__value_.__l.__data_ = v251 + 320;
  __len.__r_.__value_.__r.__words[2] = v251;
  LOWORD(__p) = 1;
  *(_BYTE *)(v251 + 320) = 0;
  *(_DWORD *)(v251 + 664) = 0;
  v283 = *(unsigned int *)(v251 + 776);
  if ((_DWORD)v283)
  {
    v284 = *(_QWORD *)(v251 + 768);
    v285 = 56 * v283;
    do
    {
      if (*(char *)(v284 + v285 - 9) < 0)
        operator delete(*(void **)(v284 + v285 - 32));
      v285 -= 56;
    }
    while (v285);
    v282 = (unsigned __int8 *)__len.__r_.__value_.__r.__words[0];
    *(_DWORD *)(v251 + 776) = 0;
    v286 = *(_QWORD *)v402;
    v14 = v404;
    if (!v282)
    {
      v282 = (unsigned __int8 *)sub_22E3B8AAC(__len.__r_.__value_.__l.__size_);
      __len.__r_.__value_.__r.__words[0] = (std::string::size_type)v282;
    }
  }
  else
  {
    *(_DWORD *)(v251 + 776) = 0;
    v286 = *(_QWORD *)v402;
  }
  v282[*v282 + 1] = 5;
  v287 = __len.__r_.__value_.__r.__words[0];
  v288 = *__len.__r_.__value_.__l.__data_;
  *__len.__r_.__value_.__l.__data_ = v288 + 1;
  *(_QWORD *)(v287 + 8 * v288 + 16) = v286;
  sub_22F1D8A24((uint64_t *)v44, 0, v439);
  if ((v439[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v289 = v439;
  else
    v289 = (std::string *)v439[0].__r_.__value_.__r.__words[0];
  if ((v439[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v290 = *((_BYTE *)&v439[0].__r_.__value_.__s + 23) & 0x7F;
  else
    v290 = v439[0].__r_.__value_.__l.__size_;
  sub_22E3B89A8((unsigned __int8 **)&__len, v289, v290);
  v291 = a3[2] | ((unint64_t)a3[4 * (v43 - 1) + 2] << 32);
  v292 = __len.__r_.__value_.__r.__words[0];
  if (!__len.__r_.__value_.__r.__words[0])
  {
    v292 = sub_22E3B8AAC(__len.__r_.__value_.__l.__size_);
    __len.__r_.__value_.__r.__words[0] = v292;
  }
  sub_22E4D6448(v292 + 336, v291, 1);
  if (SHIBYTE(v439[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v439[0].__r_.__value_.__l.__data_);
  sub_22E3BB0B8((uint64_t)&__len);
  v18 = v44;
LABEL_34:
  v410 = v18;
  v32 = v421;
  v33 = **(_QWORD **)(v421 + 16);
  v34 = HIBYTE(v433) & 0x7F;
  if (v433 >= 0)
    v35 = HIBYTE(v433) & 0x7F;
  else
    v35 = __n;
  v36 = *(_BYTE *)(v33 + 519);
  v37 = v36;
  v38 = v36 & 0x7F;
  if (v37 < 0)
    v38 = *(_QWORD *)(v33 + 504);
  v16 = v413;
  if (v35 == v38)
  {
    if (v37 >= 0)
      v39 = (unsigned __int8 *)(v33 + 496);
    else
      v39 = *(unsigned __int8 **)(v33 + 496);
    if (v433 < 0)
    {
      if (memcmp(__dst, v39, __n))
        goto LABEL_199;
    }
    else if ((v433 & 0x7F00000000000000) != 0)
    {
      v40 = (void **)&__dst;
      while (*(unsigned __int8 *)v40 == *v39)
      {
        v40 = (void **)((char *)v40 + 1);
        ++v39;
        if (!--v34)
          goto LABEL_246;
      }
      goto LABEL_199;
    }
LABEL_246:
    v405 = v14;
    v166 = v410;
    do
    {
      v167 = v166;
      v166 = *(_QWORD *)(v166 + 32);
    }
    while (v166);
    v419 = -1431655765 * ((*(_QWORD *)(v167 + 2072) - *(_QWORD *)(v167 + 2064)) >> 3);
    if (!(_DWORD)v419)
    {
LABEL_249:
      sub_22F41224C(*(_QWORD *)(*(_QWORD *)(v32 + 192) + 104) + 488);
      *(_DWORD *)(v32 + 356) = a2;
      v18 = v410 & 0xFFFFFFFFFFFFFFF9;
      *(_QWORD *)(v32 + 360) = v410 & 0xFFFFFFFFFFFFFFF9;
      v14 = v405;
      goto LABEL_51;
    }
    v168 = 0;
    v415 = v167;
    while (2)
    {
      v169 = *(_QWORD *)(v32 + 192);
      v170 = *(_QWORD *)(v167 + 2064) + 24 * v168;
      v171 = *(_BYTE *)(v170 + 23);
      if (v171 >= 0)
        v172 = (void *)(*(_QWORD *)(v167 + 2064) + 24 * v168);
      else
        v172 = *(void **)v170;
      if (v171 >= 0)
        v173 = v171 & 0x7F;
      else
        v173 = *(_QWORD *)(v170 + 8);
      v174 = sub_22E3CB704((llvm::StringMapImpl *)(v169 + 544), v172, v173);
      if ((*(_BYTE *)(v174 + 3) & 4) == 0)
        goto LABEL_388;
      v175 = (llvm *)v174;
      v176 = *(_QWORD *)(v169 + 88);
      v177 = sub_22F175F40(v169, v174);
      v417 = (uint64_t *)v177;
      if (v177)
      {
        v178 = v177;
        while (1)
        {
          v179 = *(_DWORD *)(v178 + 8);
          v180 = *(_DWORD *)(v176 + 304);
          v181 = v180 + 1;
          if (v180 + 1 > 1)
          {
            if ((v180 & 0x80000000) != 0)
            {
              v183 = -2 - v180;
              v182 = (_DWORD *)(((*(_QWORD *)(*(_QWORD *)(v176 + 224) + 8 * ((-2 - v180) >> 6)) >> (-2 - v180)) & 1) != 0
                              ? *(_QWORD *)(v176 + 200) + 24 * v183
                              : sub_22F1E1134(v176, v183, 0));
            }
            else
            {
              v182 = (_DWORD *)(*(_QWORD *)(v176 + 184) + 24 * v180);
            }
          }
          else
          {
            v182 = *(_DWORD **)(v176 + 184);
          }
          v184 = v179 & 0x7FFFFFFF;
          if ((*v182 & 0x7FFFFFFFu) > v184)
            goto LABEL_267;
          if (v180 == -2
            || (v181 != *(_DWORD *)(v176 + 192)
              ? ((v181 & 0x80000000) != 0
               ? ((v188 = -3 - v180,
                   ((*(_QWORD *)(*(_QWORD *)(v176 + 224) + 8 * ((-3 - v180) >> 6)) >> (-3 - v180)) & 1) == 0)
                ? (v187 = (_DWORD *)sub_22F1E1134(v176, v188, 0))
                : (v187 = (_DWORD *)(*(_QWORD *)(v176 + 200) + 24 * v188)))
               : (v187 = (_DWORD *)(*(_QWORD *)(v176 + 184) + 24 * v181)),
                 v186 = *v187 & 0x7FFFFFFF)
              : (v186 = *(_DWORD *)(v176 + 216)),
                v186 > v184))
          {
            v185 = *(_DWORD *)(v176 + 304);
          }
          else
          {
LABEL_267:
            v185 = sub_22F1E1EE8(v176, v184);
          }
          if (v185 && v185 == *(_DWORD *)(v169 + 2264))
            break;
          v178 = *(_QWORD *)v178;
          if (!v178)
          {
            v190 = 0;
LABEL_289:
            v16 = v413;
            goto LABEL_290;
          }
        }
        if ((*(_BYTE *)(v178 + 12) & 3) != 0)
        {
          v190 = 0;
          goto LABEL_289;
        }
        v196 = sub_22F14FEA4((uint64_t *)v178);
        v16 = v413;
        v190 = v196 ? v196[2] : 0;
LABEL_290:
        v167 = v415;
      }
      else
      {
        v190 = 0;
        v16 = v413;
      }
      v191 = sub_22E6D7128(v169, v175);
      if (v191 == (uint64_t *)v190)
        goto LABEL_388;
      v192 = v191;
      if (v191)
      {
        if (v190)
        {
          if ((sub_22F14F4DC((uint64_t)v191, v190, v169, 1) & 1) == 0)
          {
            v193 = *(_QWORD *)(v169 + 48);
            *(_DWORD *)(v193 + 312) = a2;
            *(_DWORD *)(v193 + 316) = 892;
            if (*(char *)(v193 + 311) < 0)
            {
              **(_BYTE **)(v193 + 288) = 0;
              *(_QWORD *)(v193 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v193 + 288) = 0;
              *(_BYTE *)(v193 + 311) = 0;
            }
            v226 = (unsigned __int8 *)(v193 + 320);
            *(_OWORD *)&__len.__r_.__value_.__l.__data_ = v193 + 320;
            __len.__r_.__value_.__r.__words[2] = v193;
            LOWORD(__p) = 1;
            *(_BYTE *)(v193 + 320) = 0;
            *(_DWORD *)(v193 + 664) = 0;
            v227 = *(unsigned int *)(v193 + 776);
            if ((_DWORD)v227)
            {
              v228 = *(_QWORD *)(v193 + 768);
              v229 = 56 * v227;
              do
              {
                if (*(char *)(v228 + v229 - 9) < 0)
                  operator delete(*(void **)(v228 + v229 - 32));
                v229 -= 56;
              }
              while (v229);
              v226 = (unsigned __int8 *)__len.__r_.__value_.__r.__words[0];
              *(_DWORD *)(v193 + 776) = 0;
              v167 = v415;
              if (!v226)
              {
                v226 = (unsigned __int8 *)sub_22E3B8AAC(__len.__r_.__value_.__l.__size_);
                __len.__r_.__value_.__r.__words[0] = (std::string::size_type)v226;
              }
            }
            else
            {
              *(_DWORD *)(v193 + 776) = 0;
            }
            v226[*v226 + 1] = 2;
            v230 = __len.__r_.__value_.__r.__words[0];
            v231 = *__len.__r_.__value_.__l.__data_;
            *__len.__r_.__value_.__l.__data_ = v231 + 1;
            *(_QWORD *)(v230 + 8 * v231 + 16) = 0;
            sub_22E3B89A8((unsigned __int8 **)&__len, v172, v173);
            sub_22F1D8A24((uint64_t *)v410, 0, v439);
            if ((v439[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v232 = v439;
            else
              v232 = (std::string *)v439[0].__r_.__value_.__r.__words[0];
            if ((v439[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v233 = *((_BYTE *)&v439[0].__r_.__value_.__s + 23) & 0x7F;
            else
              v233 = v439[0].__r_.__value_.__l.__size_;
            sub_22E3B89A8((unsigned __int8 **)&__len, v232, v233);
            if (SHIBYTE(v439[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v439[0].__r_.__value_.__l.__data_);
            sub_22E3BB0B8((uint64_t)&__len);
            v221 = *(_QWORD *)(v169 + 48);
            *(_DWORD *)(v221 + 312) = *(_DWORD *)v192;
            *(_DWORD *)(v221 + 316) = 846;
            if (*(char *)(v221 + 311) < 0)
            {
              **(_BYTE **)(v221 + 288) = 0;
              *(_QWORD *)(v221 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v221 + 288) = 0;
              *(_BYTE *)(v221 + 311) = 0;
            }
            v222 = (unsigned __int8 *)(v221 + 320);
            *(_OWORD *)&__len.__r_.__value_.__l.__data_ = v221 + 320;
            __len.__r_.__value_.__r.__words[2] = v221;
            LOWORD(__p) = 1;
            *(_BYTE *)(v221 + 320) = 0;
            *(_DWORD *)(v221 + 664) = 0;
            v234 = *(unsigned int *)(v221 + 776);
            if ((_DWORD)v234)
            {
              v235 = *(_QWORD *)(v221 + 768);
              v236 = 56 * v234;
              do
              {
                if (*(char *)(v235 + v236 - 9) < 0)
                  operator delete(*(void **)(v235 + v236 - 32));
                v236 -= 56;
              }
              while (v236);
              goto LABEL_383;
            }
LABEL_385:
            *(_DWORD *)(v221 + 776) = 0;
            goto LABEL_386;
          }
LABEL_388:
          ++v168;
          v32 = v421;
          if (v168 == v419)
            goto LABEL_249;
          continue;
        }
        v195 = *(_QWORD *)(v169 + 48);
        *(_DWORD *)(v195 + 312) = a2;
        *(_DWORD *)(v195 + 316) = 892;
        if (*(char *)(v195 + 311) < 0)
        {
          **(_BYTE **)(v195 + 288) = 0;
          *(_QWORD *)(v195 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v195 + 288) = 0;
          *(_BYTE *)(v195 + 311) = 0;
        }
        v213 = (unsigned __int8 *)(v195 + 320);
        *(_OWORD *)&__len.__r_.__value_.__l.__data_ = v195 + 320;
        __len.__r_.__value_.__r.__words[2] = v195;
        LOWORD(__p) = 1;
        *(_BYTE *)(v195 + 320) = 0;
        *(_DWORD *)(v195 + 664) = 0;
        v214 = *(unsigned int *)(v195 + 776);
        if ((_DWORD)v214)
        {
          v215 = *(_QWORD *)(v195 + 768);
          v216 = 56 * v214;
          do
          {
            if (*(char *)(v215 + v216 - 9) < 0)
              operator delete(*(void **)(v215 + v216 - 32));
            v216 -= 56;
          }
          while (v216);
          v213 = (unsigned __int8 *)__len.__r_.__value_.__r.__words[0];
          *(_DWORD *)(v195 + 776) = 0;
          v167 = v415;
          if (!v213)
          {
            v213 = (unsigned __int8 *)sub_22E3B8AAC(__len.__r_.__value_.__l.__size_);
            __len.__r_.__value_.__r.__words[0] = (std::string::size_type)v213;
          }
        }
        else
        {
          *(_DWORD *)(v195 + 776) = 0;
        }
        v213[*v213 + 1] = 2;
        v217 = __len.__r_.__value_.__r.__words[0];
        v218 = *__len.__r_.__value_.__l.__data_;
        *__len.__r_.__value_.__l.__data_ = v218 + 1;
        *(_QWORD *)(v217 + 8 * v218 + 16) = 0;
        sub_22E3B89A8((unsigned __int8 **)&__len, v172, v173);
        sub_22F1D8A24((uint64_t *)v410, 0, v439);
        if ((v439[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v219 = v439;
        else
          v219 = (std::string *)v439[0].__r_.__value_.__r.__words[0];
        if ((v439[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v220 = *((_BYTE *)&v439[0].__r_.__value_.__s + 23) & 0x7F;
        else
          v220 = v439[0].__r_.__value_.__l.__size_;
        sub_22E3B89A8((unsigned __int8 **)&__len, v219, v220);
        if (SHIBYTE(v439[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v439[0].__r_.__value_.__l.__data_);
        sub_22E3BB0B8((uint64_t)&__len);
        v221 = *(_QWORD *)(v169 + 48);
        *(_DWORD *)(v221 + 312) = *(_DWORD *)v192;
        *(_DWORD *)(v221 + 316) = 846;
        if (*(char *)(v221 + 311) < 0)
        {
          **(_BYTE **)(v221 + 288) = 0;
          *(_QWORD *)(v221 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v221 + 288) = 0;
          *(_BYTE *)(v221 + 311) = 0;
        }
        v222 = (unsigned __int8 *)(v221 + 320);
        *(_OWORD *)&__len.__r_.__value_.__l.__data_ = v221 + 320;
        __len.__r_.__value_.__r.__words[2] = v221;
        LOWORD(__p) = 1;
        *(_BYTE *)(v221 + 320) = 0;
        *(_DWORD *)(v221 + 664) = 0;
        v223 = *(unsigned int *)(v221 + 776);
        if (!(_DWORD)v223)
          goto LABEL_385;
        v224 = *(_QWORD *)(v221 + 768);
        v225 = 56 * v223;
        do
        {
          if (*(char *)(v224 + v225 - 9) < 0)
            operator delete(*(void **)(v224 + v225 - 32));
          v225 -= 56;
        }
        while (v225);
LABEL_383:
        v222 = (unsigned __int8 *)__len.__r_.__value_.__r.__words[0];
        *(_DWORD *)(v221 + 776) = 0;
        if (!v222)
        {
          v222 = (unsigned __int8 *)sub_22E3B8AAC(__len.__r_.__value_.__l.__size_);
          __len.__r_.__value_.__r.__words[0] = (std::string::size_type)v222;
        }
LABEL_386:
        v222[*v222 + 1] = 2;
        v237 = __len.__r_.__value_.__r.__words[0];
        v238 = *__len.__r_.__value_.__l.__data_;
        *__len.__r_.__value_.__l.__data_ = v238 + 1;
        *(_QWORD *)(v237 + 8 * v238 + 16) = 0;
      }
      else
      {
        v194 = *(_QWORD *)(v169 + 48);
        *(_DWORD *)(v194 + 312) = a2;
        *(_DWORD *)(v194 + 316) = 892;
        if (*(char *)(v194 + 311) < 0)
        {
          **(_BYTE **)(v194 + 288) = 0;
          *(_QWORD *)(v194 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v194 + 288) = 0;
          *(_BYTE *)(v194 + 311) = 0;
        }
        v197 = (unsigned __int8 *)(v194 + 320);
        *(_OWORD *)&__len.__r_.__value_.__l.__data_ = v194 + 320;
        __len.__r_.__value_.__r.__words[2] = v194;
        LOWORD(__p) = 1;
        *(_BYTE *)(v194 + 320) = 0;
        *(_DWORD *)(v194 + 664) = 0;
        v198 = *(unsigned int *)(v194 + 776);
        if ((_DWORD)v198)
        {
          v199 = *(_QWORD *)(v194 + 768);
          v200 = 56 * v198;
          do
          {
            if (*(char *)(v199 + v200 - 9) < 0)
              operator delete(*(void **)(v199 + v200 - 32));
            v200 -= 56;
          }
          while (v200);
          v197 = (unsigned __int8 *)__len.__r_.__value_.__r.__words[0];
          *(_DWORD *)(v194 + 776) = 0;
          v167 = v415;
          if (!v197)
          {
            v197 = (unsigned __int8 *)sub_22E3B8AAC(__len.__r_.__value_.__l.__size_);
            __len.__r_.__value_.__r.__words[0] = (std::string::size_type)v197;
          }
        }
        else
        {
          *(_DWORD *)(v194 + 776) = 0;
        }
        v197[*v197 + 1] = 2;
        v201 = __len.__r_.__value_.__r.__words[0];
        v202 = *__len.__r_.__value_.__l.__data_;
        *__len.__r_.__value_.__l.__data_ = v202 + 1;
        *(_QWORD *)(v201 + 8 * v202 + 16) = 1;
        sub_22E3B89A8((unsigned __int8 **)&__len, v172, v173);
        sub_22F1D8A24((uint64_t *)v410, 0, v439);
        if ((v439[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v203 = v439;
        else
          v203 = (std::string *)v439[0].__r_.__value_.__r.__words[0];
        if ((v439[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v204 = *((_BYTE *)&v439[0].__r_.__value_.__s + 23) & 0x7F;
        else
          v204 = v439[0].__r_.__value_.__l.__size_;
        sub_22E3B89A8((unsigned __int8 **)&__len, v203, v204);
        if (SHIBYTE(v439[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v439[0].__r_.__value_.__l.__data_);
        sub_22E3BB0B8((uint64_t)&__len);
        sub_22F14FEA4(v417);
        v205 = *(_QWORD *)(v169 + 48);
        *(_DWORD *)(v205 + 312) = v206;
        *(_DWORD *)(v205 + 316) = 846;
        if (*(char *)(v205 + 311) < 0)
        {
          **(_BYTE **)(v205 + 288) = 0;
          *(_QWORD *)(v205 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v205 + 288) = 0;
          *(_BYTE *)(v205 + 311) = 0;
        }
        v207 = (unsigned __int8 *)(v205 + 320);
        *(_OWORD *)&__len.__r_.__value_.__l.__data_ = v205 + 320;
        __len.__r_.__value_.__r.__words[2] = v205;
        LOWORD(__p) = 1;
        *(_BYTE *)(v205 + 320) = 0;
        *(_DWORD *)(v205 + 664) = 0;
        v208 = *(unsigned int *)(v205 + 776);
        if ((_DWORD)v208)
        {
          v209 = *(_QWORD *)(v205 + 768);
          v210 = 56 * v208;
          do
          {
            if (*(char *)(v209 + v210 - 9) < 0)
              operator delete(*(void **)(v209 + v210 - 32));
            v210 -= 56;
          }
          while (v210);
          v207 = (unsigned __int8 *)__len.__r_.__value_.__r.__words[0];
          *(_DWORD *)(v205 + 776) = 0;
          if (!v207)
          {
            v207 = (unsigned __int8 *)sub_22E3B8AAC(__len.__r_.__value_.__l.__size_);
            __len.__r_.__value_.__r.__words[0] = (std::string::size_type)v207;
          }
        }
        else
        {
          *(_DWORD *)(v205 + 776) = 0;
        }
        v207[*v207 + 1] = 2;
        v211 = __len.__r_.__value_.__r.__words[0];
        v212 = *__len.__r_.__value_.__l.__data_;
        *__len.__r_.__value_.__l.__data_ = v212 + 1;
        *(_QWORD *)(v211 + 8 * v212 + 16) = 1;
      }
      break;
    }
    sub_22E3BB0B8((uint64_t)&__len);
    goto LABEL_388;
  }
LABEL_199:
  if (((__s2 | ((*(_WORD *)(v410 + 1344) & 8) >> 3)) & 1) != 0)
  {
    if (!sub_22F16B7D0(v33, *(_QWORD *)(v421 + 40), *(_QWORD *)(v421 + 32), v410))
    {
      sub_22E77A418(*(int32x2_t **)(v421 + 264), v410, a5);
      goto LABEL_246;
    }
    v137 = *(_QWORD *)(v421 + 32);
    *(_DWORD *)(v137 + 312) = a2;
    *(_DWORD *)(v137 + 316) = 847;
    v138 = v14;
    if (*(char *)(v137 + 311) < 0)
    {
      **(_BYTE **)(v137 + 288) = 0;
      *(_QWORD *)(v137 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v137 + 288) = 0;
      *(_BYTE *)(v137 + 311) = 0;
    }
    *(_OWORD *)&__len.__r_.__value_.__l.__data_ = v137 + 320;
    __len.__r_.__value_.__r.__words[2] = v137;
    LOWORD(__p) = 1;
    *(_BYTE *)(v137 + 320) = 0;
    *(_DWORD *)(v137 + 664) = 0;
    v148 = *(unsigned int *)(v137 + 776);
    if ((_DWORD)v148)
    {
      v149 = *(_QWORD *)(v137 + 768);
      v150 = 56 * v148;
      do
      {
        if (*(char *)(v149 + v150 - 9) < 0)
          operator delete(*(void **)(v149 + v150 - 32));
        v150 -= 56;
      }
      while (v150);
    }
    *(_DWORD *)(v137 + 776) = 0;
    sub_22E4D6448(v137 + 656, a3[2] | ((unint64_t)a3[4 * a4 - 2] << 32), 1);
    sub_22E3BB0B8((uint64_t)&__len);
    v18 = 0;
    *(_DWORD *)(v421 + 356) = a2;
    *(_QWORD *)(v421 + 360) = 0;
    v14 = v138;
  }
  else
  {
    v139 = *(_QWORD *)(v421 + 32);
    *(_DWORD *)(v139 + 312) = a2;
    *(_DWORD *)(v139 + 316) = 891;
    v140 = v14;
    if (*(char *)(v139 + 311) < 0)
    {
      **(_BYTE **)(v139 + 288) = 0;
      *(_QWORD *)(v139 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v139 + 288) = 0;
      *(_BYTE *)(v139 + 311) = 0;
    }
    *(_OWORD *)&__len.__r_.__value_.__l.__data_ = v139 + 320;
    __len.__r_.__value_.__r.__words[2] = v139;
    LOWORD(__p) = 1;
    *(_BYTE *)(v139 + 320) = 0;
    *(_DWORD *)(v139 + 664) = 0;
    v141 = *(unsigned int *)(v139 + 776);
    if ((_DWORD)v141)
    {
      v142 = *(_QWORD *)(v139 + 768);
      v143 = 56 * v141;
      do
      {
        if (*(char *)(v142 + v143 - 9) < 0)
          operator delete(*(void **)(v142 + v143 - 32));
        v143 -= 56;
      }
      while (v143);
    }
    *(_DWORD *)(v139 + 776) = 0;
    sub_22F1D8A24((uint64_t *)v410, 0, v439);
    if ((v439[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v144 = v439;
    else
      v144 = (std::string *)v439[0].__r_.__value_.__r.__words[0];
    if ((v439[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v145 = *((_BYTE *)&v439[0].__r_.__value_.__s + 23) & 0x7F;
    else
      v145 = v439[0].__r_.__value_.__l.__size_;
    sub_22E3B89A8((unsigned __int8 **)&__len, v144, v145);
    v146 = a3[2] | ((unint64_t)a3[4 * a4 - 2] << 32);
    v147 = __len.__r_.__value_.__r.__words[0];
    if (!__len.__r_.__value_.__r.__words[0])
    {
      v147 = sub_22E3B8AAC(__len.__r_.__value_.__l.__size_);
      __len.__r_.__value_.__r.__words[0] = v147;
    }
    sub_22E4D6448(v147 + 336, v146, 1);
    v14 = v140;
    if (SHIBYTE(v439[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v439[0].__r_.__value_.__l.__data_);
    sub_22E3BB0B8((uint64_t)&__len);
    v18 = v410 & 0xFFFFFFFFFFFFFFF9 | 2;
  }
LABEL_51:
  *(_DWORD *)(v14 + 28) = v16;
  kdebug_trace();
  if (SHIBYTE(v433) < 0)
    operator delete(__dst);
  return v18;
}

uint64_t sub_22E6D2DD0(_QWORD *a1)
{
  uint64_t result;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_22E6CDAD4(&v6, a1);
  result = v6;
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      v5 = result;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v5;
    }
  }
  return result;
}

void sub_22E6D2E40(uint64_t a1, unsigned int a2, void *__src, size_t __n, const void *a5, size_t a6)
{
  uint64_t v12;
  _BYTE *v13;
  size_t v14;
  const std::error_category *v15;
  uint64_t v16;
  char v17;
  std::string *v18;
  int v19;
  int v20;
  size_t v21;
  __int128 *p_dst;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26;
  size_t size;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  size_t v36;
  void *v37;
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD **v41;
  void *v42;
  size_t v43;
  size_t v44;
  void **v45;
  char *v46;
  void **v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  void **v52;
  unsigned int v53;
  const void *__srca;
  void *v55[2];
  unint64_t v56;
  __int128 v57;
  unint64_t v58;
  void *__p[2];
  const char *v60;
  __int128 v61;
  __int128 v62;
  _OWORD v63[2];
  uint64_t v64;
  _QWORD v65[3];
  std::error_code v66;
  unint64_t v67;
  __int128 __dst;
  const char *v69;
  __int128 v70;
  __int128 v71;
  _BYTE v72[29];
  std::string v73;
  uint64_t v74;
  void *v75;
  __int128 __len;
  _BYTE v77[128];
  _BYTE v78[24];
  _QWORD v79[19];

  v79[16] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v78 = v79;
  *(_OWORD *)&v78[8] = xmmword_22F44E310;
  if (__n < 0x81)
  {
    v12 = 0;
    v13 = v79;
    if (!__n)
      goto LABEL_4;
    goto LABEL_3;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  v12 = *(_QWORD *)&v78[8];
  v13 = *(_BYTE **)v78;
  if (__n)
  {
LABEL_3:
    memcpy(&v13[v12], __src, __n);
    v12 = *(_QWORD *)&v78[8];
    v13 = *(_BYTE **)v78;
  }
LABEL_4:
  v14 = v12 + __n;
  *(_QWORD *)&v78[8] = v14;
  if (v14)
  {
    do
    {
      if ((word_22F4ADB24[*v13] & 0x68) == 0)
        *v13 = 95;
      ++v13;
      --v14;
    }
    while (v14);
    v14 = *(_QWORD *)&v78[8];
    v13 = *(_BYTE **)v78;
  }
  v75 = v77;
  __len = xmmword_22F44E310;
  WORD4(v70) = 261;
  *(_QWORD *)&__dst = v13;
  *((_QWORD *)&__dst + 1) = v14;
  *(_QWORD *)&v66.__val_ = llvm::sys::fs::createTemporaryFile();
  v66.__cat_ = v15;
  if (v66.__val_)
  {
    v16 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(v16 + 312) = a2;
    *(_DWORD *)(v16 + 316) = 789;
    if (*(char *)(v16 + 311) < 0)
    {
      **(_BYTE **)(v16 + 288) = 0;
      *(_QWORD *)(v16 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v16 + 288) = 0;
      *(_BYTE *)(v16 + 311) = 0;
    }
    __dst = (unint64_t)(v16 + 320);
    v69 = (const char *)v16;
    LOWORD(v70) = 1;
    *(_BYTE *)(v16 + 320) = 0;
    *(_DWORD *)(v16 + 664) = 0;
    v23 = *(unsigned int *)(v16 + 776);
    if ((_DWORD)v23)
    {
      v24 = *(_QWORD *)(v16 + 768);
      v25 = 56 * v23;
      do
      {
        if (*(char *)(v24 + v25 - 9) < 0)
          operator delete(*(void **)(v24 + v25 - 32));
        v25 -= 56;
      }
      while (v25);
    }
    *(_DWORD *)(v16 + 776) = 0;
    sub_22E3B89A8((unsigned __int8 **)&__dst, v75, __len);
    std::error_code::message(&v73, &v66);
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v73;
    else
      v26 = (std::string *)v73.__r_.__value_.__r.__words[0];
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v73.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v73.__r_.__value_.__l.__size_;
    sub_22E3B89A8((unsigned __int8 **)&__dst, v26, size);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
    sub_22E3BB0B8((uint64_t)&__dst);
    goto LABEL_93;
  }
  __srca = a5;
  v53 = a2;
  WORD4(v70) = 773;
  __dst = *(_OWORD *)v78;
  v69 = ".map";
  llvm::Twine::str((llvm::Twine *)&__dst);
  v17 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v73;
  else
    v18 = (std::string *)v73.__r_.__value_.__r.__words[0];
  v20 = sub_22E6D34E8(**(_QWORD **)(a1 + 16));
  if (!v18)
  {
    __dst = 0uLL;
    v69 = 0;
    goto LABEL_44;
  }
  if (v17 >= 0)
    v21 = v17 & 0x7F;
  else
    v21 = v73.__r_.__value_.__l.__size_;
  if (v21 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_100;
  if (v21 >= 0x17)
  {
    v28 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v28 = v21 | 7;
    v29 = v28 + 1;
    p_dst = (__int128 *)operator new(v28 + 1);
    *((_QWORD *)&__dst + 1) = v21;
    v69 = (const char *)(v29 | 0x8000000000000000);
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v69) = v21;
    p_dst = &__dst;
    if (!v21)
      goto LABEL_43;
  }
  memmove(p_dst, v18, v21);
LABEL_43:
  *((_BYTE *)p_dst + v21) = 0;
LABEL_44:
  LOBYTE(v70) = 0;
  v72[0] = 0;
  v72[8] = 0;
  v72[16] = 0;
  *(_DWORD *)&v72[24] = v20 | 0x900;
  v72[28] = 0;
  if (!__srca)
  {
    *(_QWORD *)&v66.__val_ = 0;
    v66.__cat_ = 0;
    v67 = 0;
    v30 = __src;
    goto LABEL_55;
  }
  v30 = __src;
  if (a6 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_100;
  if (a6 >= 0x17)
  {
    v32 = (a6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a6 | 7) != 0x17)
      v32 = a6 | 7;
    v33 = v32 + 1;
    v31 = operator new(v32 + 1);
    v66.__cat_ = (const std::error_category *)a6;
    v67 = v33 | 0x8000000000000000;
    *(_QWORD *)&v66.__val_ = v31;
  }
  else
  {
    HIBYTE(v67) = a6;
    v31 = &v66;
    if (!a6)
      goto LABEL_54;
  }
  memmove(v31, __srca, a6);
LABEL_54:
  *((_BYTE *)v31 + a6) = 0;
LABEL_55:
  v65[0] = &v73;
  v65[1] = &v66;
  v65[2] = a1;
  v64 = a1;
  if (SHIBYTE(v69) < 0)
  {
    sub_22E3BB2B4(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v60 = v69;
  }
  v61 = v70;
  v62 = v71;
  v63[0] = *(_OWORD *)v72;
  *(_OWORD *)((char *)v63 + 13) = *(_OWORD *)&v72[13];
  v34 = sub_22E6D3540(a1, v53, v30, __n, (uint64_t)__p, 0, 0, v19, v75, __len, (void (*)(_QWORD, _QWORD))sub_22E6D83D8, (uint64_t)v65, (void (*)(_QWORD, _QWORD))sub_22E6D84DC, (uint64_t)&v64);
  v35 = v34;
  if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
    if (!v34)
      goto LABEL_87;
LABEL_62:
    v36 = __len;
    if ((unint64_t)__len > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_100;
    v37 = v75;
    if ((unint64_t)__len >= 0x17)
    {
      v39 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if (((unint64_t)__len | 7) != 0x17)
        v39 = __len | 7;
      v40 = v39 + 1;
      v38 = (__int128 *)operator new(v39 + 1);
      *((_QWORD *)&v57 + 1) = v36;
      v58 = v40 | 0x8000000000000000;
      *(_QWORD *)&v57 = v38;
    }
    else
    {
      HIBYTE(v58) = __len;
      v38 = &v57;
      if (!(_QWORD)__len)
      {
LABEL_70:
        *((_BYTE *)v38 + v36) = 0;
        if (__n <= 0x7FFFFFFFFFFFFFF7)
        {
          v41 = (_QWORD **)(a1 + 328);
          if (__n >= 0x17)
          {
            v43 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((__n | 7) != 0x17)
              v43 = __n | 7;
            v44 = v43 + 1;
            v42 = operator new(v43 + 1);
            v55[1] = (void *)__n;
            v56 = v44 | 0x8000000000000000;
            v55[0] = v42;
          }
          else
          {
            HIBYTE(v56) = __n;
            v42 = v55;
            if (!__n)
              goto LABEL_78;
          }
          memmove(v42, v30, __n);
LABEL_78:
          *((_BYTE *)v42 + __n) = 0;
          v45 = (void **)sub_22E5EFEFC(a1 + 328, &v74, (const void **)v55);
          v46 = (char *)*v45;
          if (!*v45)
          {
            v47 = v45;
            v46 = (char *)operator new(0x50uLL);
            *((_OWORD *)v46 + 2) = *(_OWORD *)v55;
            v48 = v56;
            v55[0] = 0;
            v55[1] = 0;
            v56 = 0;
            *((_QWORD *)v46 + 6) = v48;
            *((_QWORD *)v46 + 7) = 0;
            *((_QWORD *)v46 + 8) = 0;
            *((_QWORD *)v46 + 9) = 0;
            v49 = v74;
            *(_QWORD *)v46 = 0;
            *((_QWORD *)v46 + 1) = 0;
            *((_QWORD *)v46 + 2) = v49;
            *v47 = v46;
            v50 = (_QWORD *)**v41;
            v51 = (uint64_t *)v46;
            if (v50)
            {
              *v41 = v50;
              v51 = (uint64_t *)*v47;
            }
            sub_22E49FD00(*(uint64_t **)(a1 + 336), v51);
            ++*(_QWORD *)(a1 + 344);
          }
          v52 = (void **)(v46 + 56);
          if (v46[79] < 0)
            operator delete(*v52);
          *(_OWORD *)v52 = v57;
          *((_QWORD *)v46 + 9) = v58;
          if (SHIBYTE(v56) < 0)
            operator delete(v55[0]);
          llvm::sys::RemoveFileOnSignal();
          goto LABEL_87;
        }
LABEL_100:
        abort();
      }
    }
    memmove(v38, v37, v36);
    goto LABEL_70;
  }
  operator delete(__p[0]);
  if (v35)
    goto LABEL_62;
LABEL_87:
  if (SHIBYTE(v67) < 0)
    operator delete(*(void **)&v66.__val_);
  if (SHIBYTE(v69) < 0)
    operator delete((void *)__dst);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
LABEL_93:
  if (v75 != v77)
    free(v75);
  if (*(_QWORD **)v78 != v79)
    free(*(void **)v78);
}

uint64_t sub_22E6D34E8(uint64_t a1)
{
  unsigned __int8 v1;
  unsigned __int8 v2;

  if ((*(_DWORD *)(a1 + 52) & 0x40000000) != 0)
  {
    return 7;
  }
  else if ((*(_BYTE *)(a1 + 68) & 0x20) != 0)
  {
    return 9;
  }
  else if ((*(_BYTE *)(a1 + 104) & 0x20) != 0)
  {
    return 13;
  }
  else
  {
    if ((*(_QWORD *)a1 & 0x100) != 0)
      v1 = 4;
    else
      v1 = 3;
    if ((*(_QWORD *)a1 & 0x100) != 0)
      v2 = 6;
    else
      v2 = 5;
    if ((*(_QWORD *)a1 & 0x4000) != 0)
      return v2;
    else
      return v1;
  }
}

uint64_t sub_22E6D3540(uint64_t a1, unsigned int a2, void *__src, size_t __len, uint64_t a5, const void *a6, size_t a7, int a8, void *a9, size_t a10, void (*a11)(_QWORD, _QWORD), uint64_t a12, void (*a13)(_QWORD, _QWORD), uint64_t a14)
{
  void **p_dst;
  uint64_t v19;
  size_t v20;
  size_t v21;
  unsigned __int8 v22;
  llvm *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  llvm *v28;
  uint64_t v29;
  llvm *TimeTraceProfilerInstance;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  int64x2_t v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  __int128 *v54;
  __int128 *v55;
  __int128 v56;
  __int128 *v57;
  uint64_t v58;
  uint64_t i;
  void *v60;
  size_t v61;
  size_t v62;
  void **v63;
  uint64_t v64;
  char *v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  const void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  void **v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void **v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int *v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  __int128 *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  _QWORD *v122;
  void (**v123)(void);
  _DWORD *v124;
  _DWORD *v125;
  int v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void **v134;
  void **v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  void **v139;
  void **v140;
  void **v141;
  int v142;
  __int128 v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void (**v162)(void);
  char *v163;
  uint64_t *v164;
  void **v166;
  int v168;
  void **v170[3];
  __int128 v171;
  _BYTE v172[24];
  void *v173[2];
  void *v174[4];
  _OWORD v175[3];
  __int128 v176;
  _QWORD v177[4];
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  void **__dst;
  size_t v184;
  unint64_t v185;
  _QWORD v186[3];
  _QWORD *v187;
  _QWORD v188[3];
  _QWORD *v189;
  void *__p[3];
  __int128 v191;
  __int128 v192;
  _OWORD v193[6];
  uint64_t v194;
  _DWORD *v195;
  int v196[2];
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  __int128 v202;
  _QWORD v203[9];

  v203[6] = *MEMORY[0x24BDAC8D0];
  if (__src)
  {
    if (__len > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_270;
    if (__len >= 0x17)
    {
      v20 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17)
        v20 = __len | 7;
      v21 = v20 + 1;
      p_dst = (void **)operator new(v20 + 1);
      v184 = __len;
      v185 = v21 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v185) = __len;
      p_dst = (void **)&__dst;
      if (!__len)
        goto LABEL_11;
    }
    memmove(p_dst, __src, __len);
LABEL_11:
    *((_BYTE *)p_dst + __len) = 0;
    v19 = sub_22E6D2DD0((_QWORD *)a1);
    goto LABEL_12;
  }
  __dst = 0;
  v184 = 0;
  v185 = 0;
  v19 = sub_22E6D2DD0((_QWORD *)a1);
LABEL_12:
  kdebug_trace_string();
  sub_22E6D2DD0((_QWORD *)a1);
  kdebug_trace_string();
  v22 = atomic_load((unsigned __int8 *)&qword_253E4BCC8);
  if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_253E4BCC8))
  {
    qword_253E4BCC0 = (uint64_t)sub_22F2A8040();
    __cxa_guard_release(&qword_253E4BCC8);
  }
  v23 = (llvm *)kdebug_trace();
  v168 = *(_DWORD *)(v19 + 32);
  *(_DWORD *)(v19 + 32) = v168 + 1;
  if (llvm::getTimeTraceProfilerInstance(v23))
    llvm::timeTraceProfilerBegin();
  if (sub_22E808214(*(_QWORD *)(a1 + 184)) != 3)
  {
    v32 = *(_QWORD *)(a1 + 16);
    v33 = (char *)operator new(0xC50uLL);
    *((_QWORD *)v33 + 2) = 0;
    *(_QWORD *)v33 = &unk_24FA6D378;
    *((_QWORD *)v33 + 1) = 0;
    sub_22E6D84EC((uint64_t *)v33 + 3, v32);
    sub_22F2A5B9C((uint64_t)(v33 + 104), v32 + 80);
    v163 = v33 + 24;
    v164 = (uint64_t *)*((_QWORD *)v33 + 10);
    sub_22F2A8FD0((uint64_t *)v33 + 3);
    v34 = **(_QWORD **)(a1 + 16);
    if ((*(_BYTE *)(v34 + 104) & 0x20) != 0 && (*(_WORD *)(v34 + 148) & 0x400) != 0)
    {
      v35 = v164;
      v36 = v164[5];
      v37 = (char *)v164[4];
      if ((unint64_t)v37 >= v36)
      {
        v39 = v164[3];
        v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v37[-v39] >> 3);
        v41 = v40 + 1;
        if (v40 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_270;
        v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - v39) >> 3);
        if (2 * v42 > v41)
          v41 = 2 * v42;
        if (v42 >= 0x555555555555555)
          v43 = 0xAAAAAAAAAAAAAAALL;
        else
          v43 = v41;
        *((_QWORD *)&v191 + 1) = v164 + 5;
        if (v43)
        {
          if (v43 > 0xAAAAAAAAAAAAAAALL)
            sub_22E3B3F8C();
          v44 = (char *)operator new(24 * v43);
        }
        else
        {
          v44 = 0;
        }
        v45 = &v44[24 * v40];
        strcpy(v45, "metal_types");
        v45[23] = 11;
        v47 = v164[3];
        v46 = v164[4];
        if (v46 == v47)
        {
          v48 = vdupq_n_s64(v46);
          v49 = &v44[24 * v40];
          v35 = v164;
        }
        else
        {
          v49 = &v44[24 * v40];
          do
          {
            v50 = *(_OWORD *)(v46 - 24);
            *((_QWORD *)v49 - 1) = *(_QWORD *)(v46 - 8);
            *(_OWORD *)(v49 - 24) = v50;
            v49 -= 24;
            *(_QWORD *)(v46 - 16) = 0;
            *(_QWORD *)(v46 - 8) = 0;
            *(_QWORD *)(v46 - 24) = 0;
            v46 -= 24;
          }
          while (v46 != v47);
          v35 = v164;
          v48 = *(int64x2_t *)(v164 + 3);
        }
        v38 = v45 + 24;
        v35[3] = v49;
        v35[4] = v45 + 24;
        *(int64x2_t *)&__p[1] = v48;
        v51 = v35[5];
        v35[5] = &v44[24 * v43];
        *(_QWORD *)&v191 = v51;
        __p[0] = (void *)v48.i64[0];
        sub_22E3B8B94((uint64_t)__p);
      }
      else
      {
        strcpy(v37, "metal_types");
        v37[23] = 11;
        v38 = v37 + 24;
      }
      v35[4] = v38;
    }
    v52 = *((_QWORD *)v33 + 8);
    if ((*(_BYTE *)(v52 + 216) & 8) != 0)
    {
      v58 = *v164;
      for (i = v164[1]; i != v58; i -= 32)
      {
        if (*(char *)(i - 9) < 0)
          operator delete(*(void **)(i - 32));
      }
      v164[1] = v58;
    }
    else
    {
      v53 = (__int128 *)*v164;
      v54 = (__int128 *)v164[1];
      if ((__int128 *)*v164 != v54)
      {
        while (1)
        {
          v55 = v53 + 2;
          if (sub_22E6D7758(v52, (size_t *)v53))
            break;
          v53 += 2;
          if (v55 == v54)
          {
            v53 = v54;
            goto LABEL_64;
          }
        }
        while (v55 != v54)
        {
          if (!sub_22E6D7758(v52, (size_t *)v55))
          {
            if (*((char *)v53 + 23) < 0)
              operator delete(*(void **)v53);
            v56 = *v55;
            *((_QWORD *)v53 + 2) = *((_QWORD *)v55 + 2);
            *v53 = v56;
            *((_BYTE *)v55 + 23) = 0;
            *(_BYTE *)v55 = 0;
            *((_BYTE *)v53 + 24) = *((_BYTE *)v55 + 24);
            v53 += 2;
          }
          v55 += 2;
        }
      }
LABEL_64:
      v57 = (__int128 *)v164[1];
      if (v53 != v57)
      {
        while (v57 != v53)
        {
          if (*((char *)v57 - 9) < 0)
            operator delete(*((void **)v57 - 4));
          v57 -= 2;
        }
        v164[1] = (uint64_t)v53;
      }
    }
    std::string::operator=((std::string *)(*(_QWORD *)v163 + 472), (const std::string *)(**(_QWORD **)(a1 + 16) + 472));
    if (__len > 0x7FFFFFFFFFFFFFF7)
LABEL_270:
      abort();
    if (__len >= 0x17)
    {
      v61 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17)
        v61 = __len | 7;
      v62 = v61 + 1;
      v60 = operator new(v61 + 1);
      __p[1] = (void *)__len;
      __p[2] = (void *)(v62 | 0x8000000000000000);
      __p[0] = v60;
    }
    else
    {
      HIBYTE(__p[2]) = __len;
      v60 = __p;
      if (!__len)
      {
LABEL_85:
        *((_BYTE *)v60 + __len) = 0;
        v63 = (void **)(*(_QWORD *)v163 + 496);
        if (*(char *)(*(_QWORD *)v163 + 519) < 0)
          operator delete(*v63);
        *(_OWORD *)v63 = *(_OWORD *)__p;
        v63[2] = __p[2];
        v64 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56);
        if (!*(_QWORD *)(v64 + 256))
        {
          v65 = (char *)operator new(0x38uLL);
          *((_QWORD *)v65 + 1) = 0;
          *((_QWORD *)v65 + 2) = 0;
          *(_QWORD *)v65 = &off_24FA6D898;
          *(_OWORD *)(v65 + 24) = 0u;
          *(_OWORD *)(v65 + 40) = 0u;
          *((_DWORD *)v65 + 11) = 8;
          v66 = *(std::__shared_weak_count **)(v64 + 264);
          *(_QWORD *)(v64 + 256) = v65 + 24;
          *(_QWORD *)(v64 + 264) = v65;
          if (v66)
          {
            p_shared_owners = (unint64_t *)&v66->__shared_owners_;
            do
              v68 = __ldaxr(p_shared_owners);
            while (__stlxr(v68 - 1, p_shared_owners));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
        }
        sub_22E6C83A4(v164 + 32, (uint64_t *)(v64 + 256));
        v69 = a9;
        if (!a9)
        {
          memset(__p, 0, sizeof(__p));
          goto LABEL_104;
        }
        if (a10 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_270;
        if (a10 >= 0x17)
        {
          v71 = (a10 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((a10 | 7) != 0x17)
            v71 = a10 | 7;
          v72 = v71 + 1;
          v70 = operator new(v71 + 1);
          v69 = a9;
          __p[1] = (void *)a10;
          __p[2] = (void *)(v72 | 0x8000000000000000);
          __p[0] = v70;
        }
        else
        {
          HIBYTE(__p[2]) = a10;
          v70 = __p;
          if (!a10)
            goto LABEL_103;
        }
        memmove(v70, v69, a10);
LABEL_103:
        *((_BYTE *)v70 + a10) = 0;
LABEL_104:
        v73 = (void **)(v33 + 2528);
        if (v33[2551] < 0)
          operator delete(*v73);
        *(_OWORD *)v73 = *(_OWORD *)__p;
        *((void **)v33 + 318) = __p[2];
        *((_QWORD *)v33 + 289) = *((_QWORD *)v33 + 289) & 0xFFFFFFFFFFF7BFFELL | 0x80000;
        if (a7 <= 0x7FFFFFFFFFFFFFF7)
        {
          if (a7 >= 0x17)
          {
            v75 = (a7 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((a7 | 7) != 0x17)
              v75 = a7 | 7;
            v76 = v75 + 1;
            v74 = operator new(v75 + 1);
            __p[1] = (void *)a7;
            __p[2] = (void *)(v76 | 0x8000000000000000);
            __p[0] = v74;
          }
          else
          {
            HIBYTE(__p[2]) = a7;
            v74 = __p;
            if (!a7)
            {
LABEL_114:
              *((_BYTE *)v74 + a7) = 0;
              v77 = (void **)(v33 + 2504);
              if (v33[2527] < 0)
                operator delete(*v77);
              *(_OWORD *)v77 = *(_OWORD *)__p;
              *((void **)v33 + 315) = __p[2];
              *(_WORD *)(v52 + 848) |= 0x800u;
              if (*(char *)(a5 + 23) < 0)
              {
                sub_22E3BB2B4(__p, *(void **)a5, *(_QWORD *)(a5 + 8));
              }
              else
              {
                *(_OWORD *)__p = *(_OWORD *)a5;
                __p[2] = *(void **)(a5 + 16);
              }
              v191 = *(_OWORD *)(a5 + 24);
              v192 = *(_OWORD *)(a5 + 40);
              v193[0] = *(_OWORD *)(a5 + 56);
              *(_OWORD *)((char *)v193 + 13) = *(_OWORD *)(a5 + 69);
              v78 = *((_DWORD *)v33 + 618);
              if (v78)
              {
                v79 = *((_QWORD *)v33 + 308);
                v80 = 88 * v78;
                do
                {
                  if (*(char *)(v79 + v80 - 65) < 0)
                    operator delete(*(void **)(v79 + v80 - 88));
                  v80 -= 88;
                }
                while (v80);
              }
              *((_DWORD *)v33 + 618) = 0;
              if (*((_DWORD *)v33 + 619))
              {
                v81 = 0;
              }
              else
              {
                sub_22F2A5C10((uint64_t)(v33 + 2464));
                v81 = *((_DWORD *)v33 + 618);
              }
              v82 = *((_QWORD *)v33 + 308);
              v83 = v82 + 88 * v81;
              if (SHIBYTE(__p[2]) < 0)
              {
                sub_22E3BB2B4((_BYTE *)v83, __p[0], (unint64_t)__p[1]);
              }
              else
              {
                v84 = *(_OWORD *)__p;
                *(void **)(v83 + 16) = __p[2];
                *(_OWORD *)v83 = v84;
              }
              v85 = v82 + 88 * v81;
              v86 = v191;
              v87 = v192;
              v88 = v193[0];
              *(_OWORD *)(v85 + 69) = *(_OWORD *)((char *)v193 + 13);
              *(_OWORD *)(v85 + 56) = v88;
              *(_OWORD *)(v85 + 40) = v87;
              *(_OWORD *)(v85 + 24) = v86;
              ++*((_DWORD *)v33 + 618);
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              *((_BYTE *)v164 + 248) = 1;
              *(_DWORD *)(*((_QWORD *)v33 + 7) + 4) &= ~0x100000u;
              v89 = *(std::__shared_weak_count **)(a1 + 296);
              v181 = *(_QWORD *)(a1 + 288);
              v182 = v89;
              if (v89)
              {
                v90 = (unint64_t *)&v89->__shared_owners_;
                do
                  v91 = __ldxr(v90);
                while (__stxr(v91 + 1, v90));
              }
              sub_22F2A673C((uint64_t)__p, (uint64_t)&v181, *(int **)(a1 + 184));
              v92 = v182;
              if (v182)
              {
                v93 = (unint64_t *)&v182->__shared_owners_;
                do
                  v94 = __ldaxr(v93);
                while (__stlxr(v94 - 1, v93));
                if (!v94)
                {
                  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                  std::__shared_weak_count::__release_weak(v92);
                }
              }
              v95 = (std::__shared_weak_count *)v191;
              __p[2] = v33 + 24;
              *(_QWORD *)&v191 = v33;
              if (v95)
              {
                v96 = (unint64_t *)&v95->__shared_owners_;
                do
                  v97 = __ldaxr(v96);
                while (__stlxr(v97 - 1, v96));
                if (!v97)
                {
                  ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                  std::__shared_weak_count::__release_weak(v95);
                }
              }
              v98 = (_QWORD *)operator new();
              v99 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
              v98[1] = 0;
              *v98 = &unk_24FAE0CC8;
              v98[2] = v99;
              sub_22E6CBE60(*((_QWORD *)__p[2] + 4), (uint64_t)v98, 1, (uint64_t)__p[2] + 296, (uint64_t *)v172);
              v100 = *(_QWORD *)v172;
              *(_QWORD *)v172 = *((_QWORD *)&v191 + 1);
              *((_QWORD *)&v191 + 1) = v100;
              sub_22E6C62BC((_DWORD **)v172);
              v101 = *(_QWORD *)(a1 + 160);
              if ((v33[2316] & 1) != 0)
              {
                if (v101)
                  ++*(_DWORD *)v101;
                *(_QWORD *)v172 = v194;
                v194 = v101;
                sub_22F2A511C((_DWORD **)v172);
              }
              else
              {
                v102 = *(_QWORD *)(v101 + 8);
                v180 = v102;
                if (v102)
                {
                  v103 = (unsigned int *)(v102 + 8);
                  do
                    v104 = __ldxr(v103);
                  while (__stxr(v104 + 1, v103));
                }
                sub_22E6CC4D4(__p, &v180);
                v105 = v180;
                if (v180)
                {
                  v106 = (unsigned int *)(v180 + 8);
                  do
                  {
                    v107 = __ldaxr(v106);
                    v108 = v107 - 1;
                  }
                  while (__stlxr(v108, v106));
                  if (!v108)
                    (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
                }
              }
              v166 = (void **)(v33 + 2312);
              sub_22E6CC69C((uint64_t)__p, v194);
              v109 = *(_QWORD *)v196;
              v110 = *(_QWORD *)(a1 + 176);
              v111 = *(__int128 **)(v110 + 480);
              v112 = *(unsigned int *)(v110 + 488);
              v113 = *(unsigned int *)(*(_QWORD *)v196 + 488);
              if ((_DWORD)v113)
              {
                v114 = *(_QWORD *)(*(_QWORD *)v196 + 480);
                v115 = 40 * v113;
                do
                {
                  if (*(char *)(v114 + v115 - 17) < 0)
                    operator delete(*(void **)(v114 + v115 - 40));
                  v115 -= 40;
                }
                while (v115);
              }
              *(_DWORD *)(v109 + 488) = 0;
              if (v112 <= *(_DWORD *)(v109 + 492))
              {
                if (!(_DWORD)v112)
                {
                  v117 = 0;
                  goto LABEL_173;
                }
                v116 = 0;
              }
              else
              {
                sub_22F2A8328(v109 + 480);
                v116 = *(_DWORD *)(v109 + 488);
              }
              v118 = *(_QWORD *)(v109 + 480) + 40 * v116;
              v119 = 40 * v112;
              do
              {
                if (*((char *)v111 + 23) < 0)
                {
                  sub_22E3BB2B4((_BYTE *)v118, *(void **)v111, *((_QWORD *)v111 + 1));
                }
                else
                {
                  v120 = *v111;
                  *(_QWORD *)(v118 + 16) = *((_QWORD *)v111 + 2);
                  *(_OWORD *)v118 = v120;
                }
                *(_OWORD *)(v118 + 24) = *(__int128 *)((char *)v111 + 24);
                v111 = (__int128 *)((char *)v111 + 40);
                v118 += 40;
                v119 -= 40;
              }
              while (v119);
              v117 = *(_DWORD *)(v109 + 488);
LABEL_173:
              *(_DWORD *)(v109 + 488) = v117 + v112;
              sub_22E6D7620(v109, __src, __len, a2, *(_QWORD *)(a1 + 176));
              v121 = *(_QWORD *)(a1 + 448);
              if (v121)
              {
                if (v121 == a1 + 424)
                {
                  v189 = v188;
                  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v121 + 24))(v121, v188);
                  v122 = v189;
                }
                else
                {
                  v122 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v121 + 16))(v121);
                  v189 = v122;
                }
                if (v122)
                {
                  if (v122 == v188)
                  {
                    v187 = v186;
                    (*(void (**)(_QWORD *, _QWORD *))(v188[0] + 24))(v188, v186);
                  }
                  else
                  {
                    v187 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v122 + 16))(v122);
                  }
LABEL_180:
                  sub_22F2A8398(v203, v186);
                  if (v187 == v186)
                  {
                    v123 = (void (**)(void))(v186[0] + 32);
                  }
                  else
                  {
                    if (!v187)
                      goto LABEL_185;
                    v123 = (void (**)(void))(*v187 + 40);
                  }
                  (*v123)();
LABEL_185:
                  v124 = *(_DWORD **)(a1 + 168);
                  if (v124)
                    ++v124[2];
                  v125 = v195;
                  v195 = v124;
                  if (v125)
                  {
                    v126 = v125[2] - 1;
                    v125[2] = v126;
                    if (!v126)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v125 + 32))(v125);
                  }
                  v127 = *(_QWORD *)(a1 + 272);
                  v128 = *(std::__shared_weak_count **)(a1 + 280);
                  if (v128)
                  {
                    v129 = (unint64_t *)&v128->__shared_owners_;
                    do
                      v130 = __ldxr(v129);
                    while (__stxr(v130 + 1, v129));
                  }
                  v131 = v201;
                  v200 = v127;
                  v201 = v128;
                  if (v131)
                  {
                    v132 = (unint64_t *)&v131->__shared_owners_;
                    do
                      v133 = __ldaxr(v132);
                    while (__stlxr(v133 - 1, v132));
                    if (!v133)
                    {
                      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                      std::__shared_weak_count::__release_weak(v131);
                    }
                  }
                  v172[0] = 0;
                  *(_OWORD *)&v172[4] = xmmword_22F45D8D0;
                  *(_OWORD *)v173 = 0u;
                  memset(v174, 0, sizeof(v174));
                  memset(v175, 0, sizeof(v175));
                  v176 = 0u;
                  memset(v177, 0, sizeof(v177));
                  v178 = 0u;
                  v179 = 0;
                  *((_OWORD *)v33 + 128) = *(_OWORD *)v172;
                  *((_DWORD *)v33 + 516) = *(_DWORD *)&v172[16];
                  v134 = (void **)(v33 + 2072);
                  if (v33[2095] < 0)
                    operator delete(*v134);
                  *(_OWORD *)v134 = *(_OWORD *)v173;
                  *((void **)v33 + 261) = v174[0];
                  HIBYTE(v174[0]) = 0;
                  LOBYTE(v173[0]) = 0;
                  v135 = (void **)(v33 + 2096);
                  if (v33[2119] < 0)
                    operator delete(*v135);
                  *(_OWORD *)v135 = *(_OWORD *)&v174[1];
                  *((void **)v33 + 264) = v174[3];
                  HIBYTE(v174[3]) = 0;
                  LOBYTE(v174[1]) = 0;
                  sub_22E63B344((void **)v33 + 265);
                  *(_OWORD *)(v33 + 2120) = v175[0];
                  *((_QWORD *)v33 + 267) = *(_QWORD *)&v175[1];
                  memset(v175, 0, 24);
                  v136 = *((_QWORD *)v33 + 268);
                  if (v136)
                  {
                    v137 = *((_QWORD *)v33 + 269);
                    v138 = (void *)*((_QWORD *)v33 + 268);
                    if (v137 != v136)
                    {
                      do
                      {
                        if (*(char *)(v137 - 9) < 0)
                          operator delete(*(void **)(v137 - 32));
                        v137 -= 32;
                      }
                      while (v137 != v136);
                      v138 = (void *)*((_QWORD *)v33 + 268);
                    }
                    *((_QWORD *)v33 + 269) = v136;
                    operator delete(v138);
                  }
                  *((_OWORD *)v33 + 134) = *(_OWORD *)((char *)&v175[1] + 8);
                  *((_QWORD *)v33 + 270) = *((_QWORD *)&v175[2] + 1);
                  v139 = (void **)(v33 + 2168);
                  memset((char *)&v175[1] + 8, 0, 24);
                  if (v33[2191] < 0)
                    operator delete(*v139);
                  *(_OWORD *)v139 = v176;
                  *((_QWORD *)v33 + 273) = v177[0];
                  HIBYTE(v177[0]) = 0;
                  LOBYTE(v176) = 0;
                  v140 = (void **)(v33 + 2192);
                  if (v33[2215] < 0)
                    operator delete(*v140);
                  *(_OWORD *)v140 = *(_OWORD *)&v177[1];
                  *((_QWORD *)v33 + 276) = v177[3];
                  HIBYTE(v177[3]) = 0;
                  LOBYTE(v177[1]) = 0;
                  v141 = (void **)(v33 + 2216);
                  if (v33[2239] < 0)
                  {
                    operator delete(*v141);
                    v142 = SHIBYTE(v177[3]);
                    *(_OWORD *)v141 = v178;
                    *((_QWORD *)v33 + 279) = v179;
                    HIBYTE(v179) = 0;
                    LOBYTE(v178) = 0;
                    if (v142 < 0)
                      operator delete((void *)v177[1]);
                  }
                  else
                  {
                    *(_OWORD *)v141 = v178;
                    *((_QWORD *)v33 + 279) = v179;
                    HIBYTE(v179) = 0;
                    LOBYTE(v178) = 0;
                  }
                  if (SHIBYTE(v177[0]) < 0)
                    operator delete((void *)v176);
                  v170[0] = (void **)&v175[1] + 1;
                  sub_22E6187CC(v170);
                  v170[0] = (void **)v175;
                  sub_22E3B3CC8(v170);
                  if (SHIBYTE(v174[3]) < 0)
                    operator delete(v174[1]);
                  if (SHIBYTE(v174[0]) < 0)
                    operator delete(v173[0]);
                  sub_22E6CDAD4(&v171, (_QWORD *)a1);
                  v143 = v171;
                  v171 = 0uLL;
                  v144 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
                  v202 = v143;
                  if (v144)
                  {
                    v145 = (unint64_t *)&v144->__shared_owners_;
                    do
                      v146 = __ldaxr(v145);
                    while (__stlxr(v146 - 1, v145));
                    if (!v146)
                    {
                      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                      std::__shared_weak_count::__release_weak(v144);
                    }
                  }
                  v147 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
                  if (*((_QWORD *)&v171 + 1))
                  {
                    v148 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
                    do
                      v149 = __ldaxr(v148);
                    while (__stlxr(v149 - 1, v148));
                    if (!v149)
                    {
                      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                      std::__shared_weak_count::__release_weak(v147);
                    }
                  }
                  v150 = *(_QWORD *)(a1 + 32);
                  *(_DWORD *)(v150 + 312) = a2;
                  *(_DWORD *)(v150 + 316) = 857;
                  if (*(char *)(v150 + 311) < 0)
                  {
                    **(_BYTE **)(v150 + 288) = 0;
                    *(_QWORD *)(v150 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v150 + 288) = 0;
                    *(_BYTE *)(v150 + 311) = 0;
                  }
                  *(_OWORD *)v172 = (unint64_t)(v150 + 320);
                  *(_QWORD *)&v172[16] = v150;
                  LOWORD(v173[0]) = 1;
                  *(_BYTE *)(v150 + 320) = 0;
                  *(_DWORD *)(v150 + 664) = 0;
                  v151 = *(unsigned int *)(v150 + 776);
                  if ((_DWORD)v151)
                  {
                    v152 = *(_QWORD *)(v150 + 768);
                    v153 = 56 * v151;
                    do
                    {
                      if (*(char *)(v152 + v153 - 9) < 0)
                        operator delete(*(void **)(v152 + v153 - 32));
                      v153 -= 56;
                    }
                    while (v153);
                  }
                  *(_DWORD *)(v150 + 776) = 0;
                  sub_22E3B89A8((unsigned __int8 **)v172, __src, __len);
                  sub_22E3B89A8((unsigned __int8 **)v172, a9, a10);
                  sub_22E3BB0B8((uint64_t)v172);
                  a11(a12, __p);
                  llvm::CrashRecoveryContext::CrashRecoveryContext((llvm::CrashRecoveryContext *)v172);
                  v170[0] = (void **)v188;
                  v170[1] = v166;
                  v170[2] = __p;
                  v154 = llvm::CrashRecoveryContext::RunSafelyOnThread();
                  MEMORY[0x23489D6D4](v172);
                  a13(a14, __p);
                  v155 = *(_QWORD *)(a1 + 32);
                  *(_DWORD *)(v155 + 312) = a2;
                  *(_DWORD *)(v155 + 316) = 858;
                  if (*(char *)(v155 + 311) < 0)
                  {
                    **(_BYTE **)(v155 + 288) = 0;
                    *(_QWORD *)(v155 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v155 + 288) = 0;
                    *(_BYTE *)(v155 + 311) = 0;
                  }
                  *(_OWORD *)v172 = (unint64_t)(v155 + 320);
                  *(_QWORD *)&v172[16] = v155;
                  LOWORD(v173[0]) = 1;
                  *(_BYTE *)(v155 + 320) = 0;
                  *(_DWORD *)(v155 + 664) = 0;
                  v156 = *(unsigned int *)(v155 + 776);
                  if ((_DWORD)v156)
                  {
                    v157 = *(_QWORD *)(v155 + 768);
                    v158 = 56 * v156;
                    do
                    {
                      if (*(char *)(v157 + v158 - 9) < 0)
                        operator delete(*(void **)(v157 + v158 - 32));
                      v158 -= 56;
                    }
                    while (v158);
                  }
                  *(_DWORD *)(v155 + 776) = 0;
                  sub_22E3B89A8((unsigned __int8 **)v172, __src, __len);
                  sub_22E3BB0B8((uint64_t)v172);
                  if ((v154 & 1) == 0)
                  {
                    v159 = v199;
                    v199 = 0;
                    if (v159)
                    {
                      v160 = sub_22E8FFA2C(v159);
                      MEMORY[0x2348A0E9C](v160, 0x10F3C40F108FF96);
                    }
                    v161 = v198;
                    v198 = 0;
                    if (v161)
                      (*(void (**)(uint64_t))(*(_QWORD *)v161 + 8))(v161);
                    if (v197 && v198)
                      (*(void (**)(uint64_t))(*(_QWORD *)v198 + 16))(v198);
                    sub_22E6CE1CC((uint64_t)__p, 1);
                  }
                  if (*(_BYTE *)(*((_QWORD *)&v191 + 1) + 168))
                    v29 = *((unsigned __int8 *)__p[2] + 2291) >> 7;
                  else
                    v29 = 1;
                  if (v189 == v188)
                  {
                    v162 = (void (**)(void))(v188[0] + 32);
                  }
                  else
                  {
                    if (!v189)
                    {
LABEL_266:
                      v28 = (llvm *)sub_22E6CB49C((uint64_t)__p);
                      goto LABEL_25;
                    }
                    v162 = (void (**)(void))(*v189 + 40);
                  }
                  (*v162)();
                  goto LABEL_266;
                }
              }
              else
              {
                v189 = 0;
              }
              v187 = 0;
              goto LABEL_180;
            }
          }
          memmove(v74, a6, a7);
          goto LABEL_114;
        }
        goto LABEL_270;
      }
    }
    memmove(v60, __src, __len);
    goto LABEL_85;
  }
  v24 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v24 + 312) = a2;
  *(_DWORD *)(v24 + 316) = 44;
  if (*(char *)(v24 + 311) < 0)
  {
    **(_BYTE **)(v24 + 288) = 0;
    *(_QWORD *)(v24 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v24 + 288) = 0;
    *(_BYTE *)(v24 + 311) = 0;
  }
  __p[0] = (void *)(v24 + 320);
  __p[1] = 0;
  __p[2] = (void *)v24;
  LOWORD(v191) = 1;
  *(_BYTE *)(v24 + 320) = 0;
  *(_DWORD *)(v24 + 664) = 0;
  v25 = *(unsigned int *)(v24 + 776);
  if ((_DWORD)v25)
  {
    v26 = *(_QWORD *)(v24 + 768);
    v27 = 56 * v25;
    do
    {
      if (*(char *)(v26 + v27 - 9) < 0)
        operator delete(*(void **)(v26 + v27 - 32));
      v27 -= 56;
    }
    while (v27);
  }
  *(_DWORD *)(v24 + 776) = 0;
  sub_22E3B89A8((unsigned __int8 **)__p, __src, __len);
  v28 = (llvm *)sub_22E3BB0B8((uint64_t)__p);
  v29 = 0;
LABEL_25:
  TimeTraceProfilerInstance = (llvm *)llvm::getTimeTraceProfilerInstance(v28);
  if (TimeTraceProfilerInstance)
    llvm::timeTraceProfilerEnd(TimeTraceProfilerInstance);
  *(_DWORD *)(v19 + 32) = v168;
  kdebug_trace();
  if (SHIBYTE(v185) < 0)
    operator delete(__dst);
  return v29;
}

void sub_22E6D4930(_QWORD *a1, uint64_t a2, int a3)
{
  int32x2_t *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;

  v4 = (int32x2_t *)a1[33];
  if (v4 || (v7 = a3, v6 = a2, v5 = a1, sub_22E6CF0EC(a1), a2 = v6, a3 = v7, (v4 = (int32x2_t *)v5[33]) != 0))
    sub_22E77A418(v4, a2, a3);
}

uint64_t sub_22E6D4994(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  char v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  const void **v33;
  const void **v34;
  const void **v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  BOOL v39;
  const void *v40;
  size_t v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v53;
  char *v54;
  char *v55;
  void *v56;
  uint64_t v57;
  _WORD v58[16];
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 104);
  v3 = *(_BYTE *)(v2 + 191);
  v4 = v3;
  v5 = *(_QWORD *)(v2 + 176);
  v6 = v3 & 0x7F;
  if (v4 >= 0)
    v5 = v6;
  if (!v5)
    return 0;
  v9 = *(_QWORD *)(a1 + 264);
  if (!v9)
  {
    sub_22E6CF0EC((_QWORD *)a1);
    v9 = *(_QWORD *)(a1 + 264);
    if (!v9)
      return 0;
  }
  sub_22E76CA14(v9);
  v10 = *(_QWORD *)(a1 + 264);
  v11 = *(_QWORD *)(v10 + 512);
  if (!v11)
  {
    if (!*(_BYTE *)(a1 + 368))
    {
      if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 120) + 56) + 20) & 0x200000000000) == 0)
        return 0;
      v28 = (_BYTE *)(v10 + 7328);
      if (!*v28 || !v28[1] || (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 2289) & 0x40) == 0)
        return 0;
    }
    if (*(_BYTE *)(a1 + 370))
      return 0;
    if (!*(_QWORD *)(a1 + 160))
      return 0;
    v17 = *(_QWORD *)(a1 + 192);
    if (!v17)
      return 0;
    v18 = *(_QWORD *)(v17 + 104);
    v21 = *(void **)(v18 + 168);
    v19 = v18 + 168;
    v20 = v21;
    v22 = *(_BYTE *)(v19 + 23);
    v23 = v22;
    if (v22 >= 0)
      v20 = (void *)v19;
    v24 = *(_QWORD *)(v19 + 8);
    v25 = v22 & 0x7F;
    if (v23 >= 0)
      v24 = v25;
    v58[8] = 261;
    v56 = v20;
    v57 = v24;
    llvm::sys::fs::create_directories();
    sub_22E6CB02C((_QWORD *)a1);
    sub_22E805BD8();
    v26 = v54;
    if (v54)
    {
LABEL_64:
      v55 = v26;
      sub_22E6C5940(&v55, (char **)&v56);
      if (v55)
        (*(void (**)(char *))(*(_QWORD *)v55 + 8))(v55);
      return 0;
    }
    v27 = *(_QWORD *)(a1 + 264);
    *(_BYTE *)(v27 + 7329) = 0;
    sub_22E76CA14(v27);
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 512);
  }
  if (!*(_BYTE *)(a1 + 369) && v11 && !*(_BYTE *)(a1 + 8))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 104);
    v13 = *(uint64_t **)(v12 + 1512);
    v14 = *(unsigned int *)(v12 + 1520);
    if ((_DWORD)v14)
    {
      for (i = v13; !*i || *i == -8; ++i)
        ;
    }
    else
    {
      i = v13;
    }
    v29 = &v13[v14];
    if (i != v29)
    {
      v30 = 0;
      v31 = a2;
      v32 = *i;
      do
      {
        v33 = *(const void ***)(v32 + 8);
        v34 = v33;
        do
        {
          v35 = v34;
          v34 = (const void **)v34[4];
        }
        while (v34);
        v36 = (unint64_t)v35[32];
        if (!v36)
          goto LABEL_42;
        do
        {
          v37 = *(_QWORD *)(v36 + 8);
          if ((v37 & 2) == 0)
            break;
          v36 = v37 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while ((v37 & 0xFFFFFFFFFFFFFFFCLL) != 0);
        if (v37 <= 3)
        {
LABEL_42:
          v56 = v58;
          v57 = 0x200000000;
          v38 = *((_BYTE *)v33 + 23);
          v39 = v38 < 0;
          if (v38 >= 0)
            v40 = v33;
          else
            v40 = *v33;
          v41 = v38 & 0x7F;
          if (v39)
            v42 = (size_t)v33[1];
          else
            v42 = v41;
          v43 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 192) + 544), v40, v42);
          v44 = v57;
          if (v57 >= (unint64_t)HIDWORD(v57))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v44 = v57;
          }
          v45 = (uint64_t *)((char *)v56 + 16 * v44);
          *v45 = v43;
          v45[1] = v31;
          v46 = (char *)v56;
          v47 = (v57 + 1);
          LODWORD(v57) = v47;
          if ((_DWORD)v47)
          {
            v48 = (char *)v56 + 16 * v47 - 16;
            if (v56 < v48)
            {
              do
              {
                v49 = *(_QWORD *)v46;
                *(_QWORD *)v46 = *(_QWORD *)v48;
                *(_QWORD *)v48 = v49;
                LODWORD(v49) = *((_DWORD *)v46 + 2);
                *((_DWORD *)v46 + 2) = *((_DWORD *)v48 + 2);
                *((_DWORD *)v48 + 2) = v49;
                v46 += 16;
                v48 -= 16;
              }
              while (v46 < v48);
              v46 = (char *)v56;
              v47 = v57;
            }
          }
          (*(void (**)(uint64_t, _QWORD, char *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, *((unsigned int *)v33 + 6), v46, v47, 0, 0);
          if (v56 != v58)
            free(v56);
          v30 = 1;
        }
        do
        {
          v50 = i[1];
          ++i;
          v32 = v50;
          if (v50)
            v51 = v32 == -8;
          else
            v51 = 1;
        }
        while (v51);
      }
      while (i != v29);
      if ((v30 & 1) != 0)
      {
        sub_22E6CB02C((_QWORD *)a1);
        sub_22E805BD8();
        v26 = v54;
        if (v54)
          goto LABEL_64;
        v53 = *(_QWORD *)(a1 + 264);
        *(_BYTE *)(v53 + 7329) = 0;
        sub_22E76CA14(v53);
        v11 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 512);
      }
    }
    *(_BYTE *)(a1 + 369) = 1;
  }
  return v11;
}

BOOL sub_22E6D4DC4(_BYTE *a1, unsigned __int8 *a2, size_t a3, unsigned int a4)
{
  uint64_t v7;
  char v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  int v12;
  _BYTE v13[32];

  if (a1[8])
    return 0;
  v7 = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)a1 + 40))(a1, a4);
  if (!v7)
    return 0;
  v9 = v13;
  v10 = v13;
  v11 = 4;
  v12 = 0;
  v8 = sub_22E805850(v7, a2, a3, (llvm::SmallPtrSetImplBase *)&v9);
  if (v10 != v9)
    free(v10);
  return (v8 & 1) != 0;
}

uint64_t sub_22E6D4E58(const void *a1, size_t a2, void *a3, size_t a4, void *a5, size_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int Key;
  void **v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  void *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  unsigned __int8 *v56[3];
  __int16 v57;
  uint64_t v58;
  char v59;
  _QWORD v60[3];
  void *__p[2];
  uint64_t v62;
  __int16 v63;
  __int128 v64;
  uint64_t v65;
  __int16 v66;
  unsigned __int8 *v67;
  void *v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  char v72;
  char v73;
  void *v74;
  uint64_t *v75;
  uint64_t v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  Key = llvm::StringMapImpl::FindKey();
  if (Key != -1
    && Key != (unint64_t)*(unsigned int *)(a9 + 16)
    && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a9 + 8) + 8 * Key) + 8))
  {
    return 0;
  }
  (**(void (***)(void **__return_ptr, uint64_t, void *, size_t))a7)(&v74, a7, a3, a4);
  if ((v77 & 1) != 0)
  {
    *(_QWORD *)(a10 + 312) = 0x20BA00000000;
    if (*(char *)(a10 + 311) < 0)
    {
      **(_BYTE **)(a10 + 288) = 0;
      *(_QWORD *)(a10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a10 + 288) = 0;
      *(_BYTE *)(a10 + 311) = 0;
    }
    v67 = (unsigned __int8 *)(a10 + 320);
    v68 = 0;
    v69 = a10;
    v70 = 1;
    *(_BYTE *)(a10 + 320) = 0;
    *(_DWORD *)(a10 + 664) = 0;
    v22 = *(unsigned int *)(a10 + 776);
    if ((_DWORD)v22)
    {
      v23 = *(_QWORD *)(a10 + 768);
      v24 = 56 * v22;
      do
      {
        if (*(char *)(v23 + v24 - 9) < 0)
          operator delete(*(void **)(v23 + v24 - 32));
        v24 -= 56;
      }
      while (v24);
    }
    *(_DWORD *)(a10 + 776) = 0;
    sub_22E3B89A8(&v67, a3, a4);
    sub_22E3B89A8(&v67, a5, a6);
    if ((v77 & 1) != 0)
    {
      v25 = v74;
      v74 = 0;
    }
    else
    {
      v25 = 0;
    }
    __p[0] = v25;
    sub_22F1CB318(&v67, (char **)__p);
    if (__p[0])
      (*(void (**)(void *))(*(_QWORD *)__p[0] + 8))(__p[0]);
    sub_22E3BB0B8((uint64_t)&v67);
    v26 = 1;
    goto LABEL_61;
  }
  llvm::cas::CacheKey::CacheKey();
  if (v62 >= 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  if (v62 >= 0)
    v20 = (void *)(HIBYTE(v62) & 0x7F);
  else
    v20 = __p[1];
  (*(void (**)(unsigned __int8 **__return_ptr, uint64_t, void **, void *))(*(_QWORD *)a8 + 24))(&v67, a8, v19, v20);
  if (SHIBYTE(v62) < 0)
    operator delete(__p[0]);
  if ((v73 & 1) != 0 || !v72)
  {
    *(_QWORD *)(a10 + 312) = 0x20BA00000000;
    if (*(char *)(a10 + 311) < 0)
    {
      **(_BYTE **)(a10 + 288) = 0;
      *(_QWORD *)(a10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a10 + 288) = 0;
      *(_BYTE *)(a10 + 311) = 0;
    }
    v64 = (unint64_t)(a10 + 320);
    v65 = a10;
    v66 = 1;
    *(_BYTE *)(a10 + 320) = 0;
    *(_DWORD *)(a10 + 664) = 0;
    v27 = *(unsigned int *)(a10 + 776);
    if ((_DWORD)v27)
    {
      v28 = *(_QWORD *)(a10 + 768);
      v29 = 56 * v27;
      do
      {
        if (*(char *)(v28 + v29 - 9) < 0)
          operator delete(*(void **)(v28 + v29 - 32));
        v29 -= 56;
      }
      while (v29);
    }
    *(_DWORD *)(a10 + 776) = 0;
    sub_22E3B89A8((unsigned __int8 **)&v64, a3, a4);
    sub_22E3B89A8((unsigned __int8 **)&v64, a5, a6);
    v30 = (unsigned __int8 *)v64;
    __p[1] = 0;
    v62 = v65;
    __p[0] = (void *)v64;
    v63 = v66;
    v65 = 0;
    v66 = 0;
    sub_22E3BB0B8((uint64_t)&v64);
    if ((v73 & 1) != 0)
    {
      v33 = v67;
      v67 = 0;
      *(_QWORD *)&v64 = v33;
      sub_22F1CB318((unsigned __int8 **)__p, (char **)&v64);
      if ((_QWORD)v64)
        (*(void (**)(_QWORD))(*(_QWORD *)v64 + 8))(v64);
    }
    else
    {
      if (!v30)
      {
        v30 = (unsigned __int8 *)sub_22E3B8AAC(0);
        __p[0] = v30;
      }
      v30[*v30 + 1] = 1;
      v31 = __p[0];
      v32 = *(unsigned __int8 *)__p[0];
      *(_BYTE *)__p[0] = v32 + 1;
      v31[v32 + 2] = "no such entry in action cache";
    }
    sub_22E3BB0B8((uint64_t)__p);
    goto LABEL_45;
  }
  (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)a7 + 32))(a7, &v67);
  if (!v21)
  {
    *(_QWORD *)(a10 + 312) = 0x20BA00000000;
    if (*(char *)(a10 + 311) < 0)
    {
      **(_BYTE **)(a10 + 288) = 0;
      *(_QWORD *)(a10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a10 + 288) = 0;
      *(_BYTE *)(a10 + 311) = 0;
    }
    __p[0] = (void *)(a10 + 320);
    __p[1] = 0;
    v62 = a10;
    v63 = 1;
    *(_BYTE *)(a10 + 320) = 0;
    *(_DWORD *)(a10 + 664) = 0;
    v34 = *(unsigned int *)(a10 + 776);
    if ((_DWORD)v34)
    {
      v35 = *(_QWORD *)(a10 + 768);
      v36 = 56 * v34;
      do
      {
        if (*(char *)(v35 + v36 - 9) < 0)
          operator delete(*(void **)(v35 + v36 - 32));
        v36 -= 56;
      }
      while (v36);
    }
    *(_DWORD *)(a10 + 776) = 0;
    sub_22E3B89A8((unsigned __int8 **)__p, a3, a4);
    sub_22E3B89A8((unsigned __int8 **)__p, a5, a6);
    v37 = (unsigned __int8 *)__p[0];
    if (!__p[0])
    {
      v37 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__p[1]);
      __p[0] = v37;
    }
    v26 = 1;
    v37[*v37 + 1] = 1;
    v38 = __p[0];
    v39 = *(unsigned __int8 *)__p[0];
    *(_BYTE *)__p[0] = v39 + 1;
    v38[v39 + 2] = "result module doesn't exist in CAS";
    sub_22E3BB0B8((uint64_t)__p);
    goto LABEL_55;
  }
  LOBYTE(__p[0]) = 0;
  LOBYTE(v63) = 0;
  v60[0] = &unk_24FA6D760;
  v60[1] = a7;
  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)a7 + 8))(&v64, a7, 0, 0, "llvm::cas::schema::compile_job_result::v1", 41);
  v60[2] = v64;
  sub_22F2A6508((uint64_t)v60, (uint64_t)&v64);
  if ((v66 & 1) != 0)
  {
    v56[0] = (unsigned __int8 *)v64;
    if ((_QWORD)v64)
    {
      *(_QWORD *)(a10 + 312) = 0x20BA00000000;
      if (*(char *)(a10 + 311) < 0)
      {
        **(_BYTE **)(a10 + 288) = 0;
        *(_QWORD *)(a10 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a10 + 288) = 0;
        *(_BYTE *)(a10 + 311) = 0;
      }
      v64 = (unint64_t)(a10 + 320);
      v65 = a10;
      v66 = 1;
      *(_BYTE *)(a10 + 320) = 0;
      *(_DWORD *)(a10 + 664) = 0;
      v43 = *(unsigned int *)(a10 + 776);
      if ((_DWORD)v43)
      {
        v44 = *(_QWORD *)(a10 + 768);
        v45 = 56 * v43;
        do
        {
          if (*(char *)(v44 + v45 - 9) < 0)
            operator delete(*(void **)(v44 + v45 - 32));
          v45 -= 56;
        }
        while (v45);
      }
      *(_DWORD *)(a10 + 776) = 0;
      sub_22E3B89A8((unsigned __int8 **)&v64, a3, a4);
      sub_22E3B89A8((unsigned __int8 **)&v64, a5, a6);
      sub_22F1CB318((unsigned __int8 **)&v64, (char **)v56);
      sub_22E3BB0B8((uint64_t)&v64);
      if (v56[0])
        (*(void (**)(unsigned __int8 *))(*(_QWORD *)v56[0] + 8))(v56[0]);
LABEL_45:
      v26 = 1;
LABEL_55:
      if ((v73 & 1) != 0)
      {
        v40 = v67;
        v67 = 0;
        if (v40)
          (*(void (**)(unsigned __int8 *))(*(_QWORD *)v40 + 8))(v40);
      }
      else if (v72 && v68 != &v71)
      {
        free(v68);
      }
LABEL_61:
      if ((v77 & 1) != 0)
      {
        v41 = v74;
        v74 = 0;
        if (v41)
          (*(void (**)(void *))(*(_QWORD *)v41 + 8))(v41);
      }
      else if (v75 != &v76)
      {
        free(v75);
      }
      return v26;
    }
  }
  else
  {
    *(_OWORD *)__p = v64;
    v62 = v65;
    LOBYTE(v63) = 1;
  }
  sub_22F2A6444(__p, 0, (uint64_t)&v58);
  if (v59)
  {
    llvm::cas::ObjectStore::getProxy();
    v46 = v66;
    if ((v66 & 1) != 0)
    {
      *(_QWORD *)(a10 + 312) = 0x20BA00000000;
      if (*(char *)(a10 + 311) < 0)
      {
        **(_BYTE **)(a10 + 288) = 0;
        *(_QWORD *)(a10 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a10 + 288) = 0;
        *(_BYTE *)(a10 + 311) = 0;
      }
      v56[0] = (unsigned __int8 *)(a10 + 320);
      v56[1] = 0;
      v56[2] = (unsigned __int8 *)a10;
      v57 = 1;
      *(_BYTE *)(a10 + 320) = 0;
      *(_DWORD *)(a10 + 664) = 0;
      v48 = *(unsigned int *)(a10 + 776);
      if ((_DWORD)v48)
      {
        v49 = *(_QWORD *)(a10 + 768);
        v50 = 56 * v48;
        do
        {
          if (*(char *)(v49 + v50 - 9) < 0)
            operator delete(*(void **)(v49 + v50 - 32));
          v50 -= 56;
        }
        while (v50);
      }
      *(_DWORD *)(a10 + 776) = 0;
      sub_22E3B89A8(v56, a3, a4);
      sub_22E3B89A8(v56, a5, a6);
      if ((v66 & 1) != 0)
      {
        v51 = (char *)v64;
        *(_QWORD *)&v64 = 0;
      }
      else
      {
        v51 = 0;
      }
      v55 = v51;
      sub_22F1CB318(v56, &v55);
      if (v55)
        (*(void (**)(char *))(*(_QWORD *)v55 + 8))(v55);
      sub_22E3BB0B8((uint64_t)v56);
    }
    else
    {
      llvm::cas::ObjectProxy::getMemoryBuffer();
      sub_22E808280(a9, a1, a2, &v54);
      v47 = v54;
      v54 = 0;
      if (v47)
        (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
    }
    v26 = v46 & 1;
    if ((v66 & 1) != 0)
    {
      v52 = v64;
      *(_QWORD *)&v64 = 0;
      if (v52)
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
    }
    goto LABEL_55;
  }
  v53 = llvm::report_fatal_error((llvm *)"missing main output", (const char *)1);
  return sub_22E6D5660(v53);
}

uint64_t sub_22E6D5660(uint64_t a1)
{
  *(_BYTE *)a1 &= 0xFCu;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_BYTE *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_BYTE *)(a1 + 208) = 0;
  sub_22F1CA384(a1 + 216);
  *(_BYTE *)(a1 + 1944) &= 0x80u;
  *(_OWORD *)(a1 + 1948) = xmmword_22F45D8D0;
  *(_OWORD *)(a1 + 1968) = 0u;
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_OWORD *)(a1 + 2032) = 0u;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_OWORD *)(a1 + 2112) = 0u;
  *(_OWORD *)(a1 + 2128) = 0u;
  *(_OWORD *)(a1 + 2144) = 0u;
  *(_OWORD *)(a1 + 2160) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_OWORD *)(a1 + 2192) = 0u;
  *(_QWORD *)(a1 + 2208) = *(_QWORD *)(a1 + 2208) & 0xFFFFFFFE1F050010 | 0x100D06000;
  *(_BYTE *)(a1 + 2216) = *(_BYTE *)(a1 + 2216) & 0x80 | 0x2C;
  *(_OWORD *)(a1 + 2220) = 0u;
  *(_OWORD *)(a1 + 2236) = 0u;
  *(_OWORD *)(a1 + 2252) = 0u;
  *(_OWORD *)(a1 + 2268) = 0u;
  *(_OWORD *)(a1 + 2284) = 0u;
  *(_OWORD *)(a1 + 2300) = 0u;
  *(_OWORD *)(a1 + 2316) = 0u;
  *(_OWORD *)(a1 + 2332) = 0u;
  *(_QWORD *)(a1 + 2346) = 0;
  *(_QWORD *)(a1 + 2360) = a1 + 2376;
  *(_OWORD *)(a1 + 2368) = 0u;
  *(_OWORD *)(a1 + 2384) = 0u;
  *(_OWORD *)(a1 + 2400) = 0u;
  *(_OWORD *)(a1 + 2416) = 0u;
  *(_OWORD *)(a1 + 2432) = 0u;
  *(_OWORD *)(a1 + 2448) = 0u;
  *(_OWORD *)(a1 + 2464) = 0u;
  *(_OWORD *)(a1 + 2480) = 0u;
  *(_OWORD *)(a1 + 2496) = 0u;
  *(_QWORD *)(a1 + 2512) = 0;
  *(_DWORD *)(a1 + 2528) = 25;
  *(_QWORD *)(a1 + 2648) = 0;
  *(_OWORD *)(a1 + 2616) = 0u;
  *(_OWORD *)(a1 + 2632) = 0u;
  *(_OWORD *)(a1 + 2584) = 0u;
  *(_OWORD *)(a1 + 2600) = 0u;
  *(_OWORD *)(a1 + 2552) = 0u;
  *(_OWORD *)(a1 + 2568) = 0u;
  *(_OWORD *)(a1 + 2536) = 0u;
  *(_OWORD *)(a1 + 2664) = 0u;
  *(_QWORD *)(a1 + 2656) = a1 + 2664;
  *(_BYTE *)(a1 + 2968) = 0;
  *(_BYTE *)(a1 + 2976) = 0;
  *(_BYTE *)(a1 + 3000) = 0;
  *(_QWORD *)(a1 + 3024) = 0;
  *(_OWORD *)(a1 + 3008) = 0u;
  *(_OWORD *)(a1 + 2680) = 0u;
  *(_OWORD *)(a1 + 2696) = 0u;
  *(_OWORD *)(a1 + 2712) = 0u;
  *(_OWORD *)(a1 + 2728) = 0u;
  *(_OWORD *)(a1 + 2744) = 0u;
  *(_OWORD *)(a1 + 2760) = 0u;
  *(_OWORD *)(a1 + 2776) = 0u;
  *(_OWORD *)(a1 + 2792) = 0u;
  *(_OWORD *)(a1 + 2808) = 0u;
  *(_OWORD *)(a1 + 2824) = 0u;
  *(_OWORD *)(a1 + 2840) = 0u;
  *(_OWORD *)(a1 + 2856) = 0u;
  *(_OWORD *)(a1 + 2872) = 0u;
  *(_OWORD *)(a1 + 2888) = 0u;
  *(_OWORD *)(a1 + 2904) = 0u;
  *(_OWORD *)(a1 + 2920) = 0u;
  *(_OWORD *)(a1 + 2929) = 0u;
  *(_DWORD *)(a1 + 3032) = 500;
  *(_WORD *)(a1 + 3040) = *(_WORD *)(a1 + 3040) & 0xF800 | 4;
  return a1;
}

uint64_t sub_22E6D5834(_BYTE *a1)
{
  char *v2;
  char *v3;
  char *v4;

  if ((a1[8] & 1) == 0)
    return *(_QWORD *)a1;
  v2 = *(char **)a1;
  *(_QWORD *)a1 = 0;
  v3 = v2;
  sub_22E6C5940(&v3, &v4);
  if (v3)
    (*(void (**)(char *))(*(_QWORD *)v3 + 8))(v3);
  return 0;
}

void sub_22E6D5894(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

char *sub_22E6D58A8(char **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v3 = *a1;
  v2 = a1[1];
  v4 = (v2 - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    abort();
  v7 = a1[2] - v3;
  if (v7 >> 3 > v5)
    v5 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v8 = 0xFFFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8 >> 60)
    sub_22E3B3F8C();
  v10 = (char *)operator new(16 * v8);
  v11 = &v10[16 * v4];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v12 = v11 + 16;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  while (v2 != v3)
  {
    v13 = *((_OWORD *)v2 - 1);
    v2 -= 16;
    *((_OWORD *)v11 - 1) = v13;
    v11 -= 16;
    *(_QWORD *)v2 = 0;
    *((_QWORD *)v2 + 1) = 0;
  }
  v14 = *a1;
  v15 = a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[16 * v8];
  while (v15 != v14)
  {
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v15 -= 16;
  }
  if (v14)
    operator delete(v14);
  return v12;
}

uint64_t sub_22E6D59C0(uint64_t a1, char *a2, unint64_t a3, int a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  sub_22F1D01D8(a1, a2, a3, a4, (uint64_t)&v7);
  result = sub_22E6D5834(&v7);
  if ((v8 & 1) != 0)
  {
    v5 = v7;
    v7 = 0;
    if (v5)
    {
      v6 = result;
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      return v6;
    }
  }
  return result;
}

_QWORD *sub_22E6D5A44(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  *a2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
  a2[1] = v4;
  v5 = *(_BYTE *)(*a1 + 31);
  v6 = v5;
  v7 = *(_QWORD *)(*a1 + 16);
  v8 = v5 & 0x7F;
  if (v6 >= 0)
    v7 = v8;
  if (!v7)
  {
    v10 = (std::__shared_weak_count *)a1[1];
    *a1 = 0;
    a1[1] = 0;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  return a1;
}

BOOL sub_22E6D5ADC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  BOOL v5;
  uint64_t v6;
  const void *v7;
  const void *v8;
  char v9;
  const void *v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  const void *v14;
  const void *v15;
  char v16;
  const void *v17;
  uint64_t v18;

  v2 = *a1;
  v3 = *a2;
  result = (*a1 | *a2) == 0;
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v8 = *(const void **)(v2 + 8);
    v6 = v2 + 8;
    v7 = v8;
    v9 = *(_BYTE *)(v6 + 23);
    if (v9 >= 0)
      v10 = (const void *)v6;
    else
      v10 = v7;
    v11 = *(_QWORD *)(v6 + 8);
    if (v9 >= 0)
      v12 = v9 & 0x7F;
    else
      v12 = v11;
    v15 = *(const void **)(v3 + 8);
    v13 = v3 + 8;
    v14 = v15;
    v16 = *(_BYTE *)(v13 + 23);
    if (v16 >= 0)
      v17 = (const void *)v13;
    else
      v17 = v14;
    v18 = *(_QWORD *)(v13 + 8);
    if (v16 >= 0)
      v18 = v16 & 0x7F;
    if (v12 == v18)
      return !v12 || memcmp(v10, v17, v12) == 0;
    else
      return 0;
  }
  return result;
}

uint64_t sub_22E6D5B78(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  if (v6)
  {
    *(_BYTE *)(a1 + 8) = 1;
    v7 = (_QWORD *)operator new();
    v8 = (_QWORD *)*a3;
    *v7 = &off_24FA71E80;
    v7[1] = v8;
    v7[2] = v6;
  }
  else
  {
    v7 = (_QWORD *)*a3;
  }
  *a3 = 0;
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v7;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return a1;
}

uint64_t sub_22E6D5C1C(const void *a1, size_t a2)
{
  void **p_dst;
  uint64_t v5;
  uint64_t v6;
  void **__dst;
  size_t v9;
  unint64_t v10;
  _BYTE v11[96];
  int v12;
  const std::error_category *v13;

  v12 = 0;
  v13 = std::system_category();
  if (!a1)
  {
    __dst = 0;
    v9 = 0;
    v10 = 0;
    goto LABEL_12;
  }
  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a2 >= 0x17)
  {
    v5 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v5 = a2 | 7;
    v6 = v5 + 1;
    p_dst = (void **)operator new(v5 + 1);
    v9 = a2;
    v10 = v6 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v10) = a2;
    p_dst = (void **)&__dst;
    if (!a2)
      goto LABEL_11;
  }
  memmove(p_dst, a1, a2);
LABEL_11:
  *((_BYTE *)p_dst + a2) = 0;
LABEL_12:
  llvm::raw_fd_ostream::raw_fd_ostream();
  if (SHIBYTE(v10) < 0)
    operator delete(__dst);
  return MEMORY[0x23489CE04](v11);
}

BOOL sub_22E6D5D28(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  size_t v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  const void **v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  char v21;
  _BOOL8 result;
  char v23;
  uint64_t v24;
  const void **v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  char v41;
  const void *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[28];
  int v47;

  v2 = *a1;
  v3 = *a2;
  if (*a1 == *a2)
    return 1;
  if (v3)
  {
    if (v2)
    {
      v4 = *(_BYTE *)(v2 + 31);
      v5 = *(_QWORD *)(v2 + 16);
      if (v4 >= 0)
        v6 = v4 & 0x7F;
      else
        v6 = *(_QWORD *)(v2 + 16);
      v7 = *(_BYTE *)(v3 + 31);
      v8 = v7;
      v9 = v7 & 0x7F;
      if (v8 < 0)
        v9 = *(_QWORD *)(v3 + 16);
      if (v6 == v9)
      {
        v10 = (const void **)(v2 + 8);
        v13 = *(unsigned __int8 **)(v3 + 8);
        v11 = (unsigned __int8 *)(v3 + 8);
        v12 = v13;
        if (v8 >= 0)
          v14 = v11;
        else
          v14 = v12;
        if ((v4 & 0x80) == 0)
        {
          if ((v4 & 0x7F) != 0)
          {
            v15 = (v4 & 0x7F) - 1;
            do
            {
              v17 = *(unsigned __int8 *)v10;
              v10 = (const void **)((char *)v10 + 1);
              v16 = v17;
              v19 = *v14++;
              v18 = v19;
              v20 = v15-- != 0;
              v21 = v20;
              result = v16 == v18;
            }
            while (v16 == v18 && (v21 & 1) != 0);
            return result;
          }
          return 1;
        }
        v42 = *v10;
        return memcmp(v42, v14, v5) == 0;
      }
      return 0;
    }
    v43 = 0u;
    v44 = 0u;
    DWORD2(v44) = 9;
    BYTE12(v44) = 1;
    v45 = 0u;
    memset(v46, 0, sizeof(v46));
    v47 = 0xFFFF;
    v33 = *(_BYTE *)(v3 + 31);
    v5 = *(_QWORD *)(v3 + 16);
    if (v33 >= 0)
      v34 = v33 & 0x7F;
    else
      v34 = *(_QWORD *)(v3 + 16);
    if (v34)
      return 0;
    v25 = (const void **)(v3 + 8);
    if ((v33 & 0x80) == 0)
    {
      if ((v33 & 0x7F) == 0)
        return 1;
      v35 = (v33 & 0x7F) - 1;
      v36 = (unsigned __int8 *)&v43;
      do
      {
        v38 = *(unsigned __int8 *)v25;
        v25 = (const void **)((char *)v25 + 1);
        v37 = v38;
        v40 = *v36++;
        v39 = v40;
        v20 = v35-- != 0;
        v41 = v20;
        result = v37 == v39;
      }
      while (v37 == v39 && (v41 & 1) != 0);
      return result;
    }
LABEL_51:
    v42 = *v25;
    v14 = (unsigned __int8 *)&v43;
    return memcmp(v42, v14, v5) == 0;
  }
  v43 = 0u;
  v44 = 0u;
  DWORD2(v44) = 9;
  BYTE12(v44) = 1;
  v45 = 0u;
  memset(v46, 0, sizeof(v46));
  v47 = 0xFFFF;
  v23 = *(_BYTE *)(v2 + 31);
  v5 = *(_QWORD *)(v2 + 16);
  if (v23 >= 0)
    v24 = v23 & 0x7F;
  else
    v24 = *(_QWORD *)(v2 + 16);
  if (v24)
    return 0;
  v25 = (const void **)(v2 + 8);
  if ((*(_BYTE *)(v2 + 31) & 0x80) != 0)
    goto LABEL_51;
  if ((v23 & 0x7F) == 0)
    return 1;
  v26 = (v23 & 0x7F) - 1;
  v27 = (unsigned __int8 *)&v43;
  do
  {
    v29 = *(unsigned __int8 *)v25;
    v25 = (const void **)((char *)v25 + 1);
    v28 = v29;
    v31 = *v27++;
    v30 = v31;
    v20 = v26-- != 0;
    v32 = v20;
    result = v28 == v30;
  }
  while (v28 == v30 && (v32 & 1) != 0);
  return result;
}

void sub_22E6D5EF4(uint64_t a1)
{
  llvm::sys::fs::detail::directory_iterator_destruct();
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

BOOL sub_22E6D5F34(uint64_t a1, const void **a2, uint64_t a3)
{
  char v3;
  int v4;
  size_t v5;
  size_t v6;
  size_t v7;
  size_t v8;
  const void *v9;
  int v10;
  int v11;

  v3 = *((_BYTE *)a2 + 23);
  v4 = v3;
  v5 = v3 & 0x7F;
  if (v4 >= 0)
    v6 = v5;
  else
    v6 = (size_t)a2[1];
  v7 = *(_QWORD *)(a3 + 8);
  if (v7 >= v6)
    v8 = v6;
  else
    v8 = *(_QWORD *)(a3 + 8);
  if (v8 && (v4 >= 0 ? (v9 = a2) : (v9 = *a2), (v10 = memcmp(v9, *(const void **)a3, v8)) != 0))
  {
    v11 = (v10 >> 31) | 1;
  }
  else
  {
    if (v6 < v7)
      v11 = -1;
    else
      v11 = 1;
    if (v6 == v7)
      v11 = 0;
  }
  return v11 == -1;
}

BOOL sub_22E6D5FB8(uint64_t a1, uint64_t a2, const void **a3)
{
  size_t v3;
  char v4;
  int v5;
  size_t v6;
  size_t v7;
  size_t v8;
  const void *v9;
  int v10;
  int v11;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *((_BYTE *)a3 + 23);
  v5 = v4;
  v6 = v4 & 0x7F;
  if (v5 >= 0)
    v7 = v6;
  else
    v7 = (size_t)a3[1];
  if (v7 >= v3)
    v8 = *(_QWORD *)(a2 + 8);
  else
    v8 = v7;
  if (v8 && (v5 >= 0 ? (v9 = a3) : (v9 = *a3), (v10 = memcmp(*(const void **)a2, v9, v8)) != 0))
  {
    v11 = (v10 >> 31) | 1;
  }
  else
  {
    if (v3 < v7)
      v11 = -1;
    else
      v11 = 1;
    if (v3 == v7)
      v11 = 0;
  }
  return v11 == -1;
}

BOOL sub_22E6D603C(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, _BYTE *a5, size_t a6)
{
  uint64_t *v11;
  size_t *v12;
  size_t *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  size_t v23;
  const void *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  BOOL v29;
  BOOL v30;
  char *v31;
  uint64_t v32;
  size_t v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  char v39;
  void *v40;
  size_t v41;
  unsigned __int8 *v42;
  __int16 v43;
  size_t v44;
  uint64_t *v45;
  size_t v46;
  void *p_p;
  uint64_t v50;
  size_t v51;
  uint64_t v52;
  void **v53;
  uint64_t v54;
  void *v55;
  size_t v56;
  __int16 v57;
  unsigned __int8 *p_dst;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  size_t *v64;
  uint64_t v65;
  char v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  size_t *v73;
  uint64_t v74;
  size_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  BOOL v82;
  void *v83;
  size_t v84;
  size_t v85;
  unint64_t v86;
  unsigned __int8 *v87;
  void *v88;
  size_t __len;
  size_t __lena;
  size_t v91;
  uint64_t v93;
  unsigned int v94;
  int v95;
  _BYTE *v96;
  uint64_t v97;
  char v98;
  void *__p;
  size_t v100;
  unint64_t v101;
  char v102;
  __int16 v103;
  char v104;
  char v105;
  char v106;
  int v107;
  BOOL v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  int v116;
  void **v117;
  _QWORD v118[4];
  __int16 v119;
  void *v120[2];
  uint64_t v121;
  __int16 v122;
  unsigned __int8 *__dst;
  __int128 v124;
  _WORD v125[16];
  char v126;
  char v127;
  char v128;
  int v129;
  BOOL v130;
  uint64_t v131;

  v131 = *MEMORY[0x24BDAC8D0];
  v97 = a3;
  v95 = sub_22E6D34E8(**(_QWORD **)(a1 + 16));
  v11 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 104) + 488);
  v12 = (size_t *)sub_22F158DEC(v11, a4);
  v96 = a5;
  if (v12)
  {
    v13 = v12;
    __len = (size_t)v11;
    v91 = a6;
    v93 = *(_QWORD *)(a1 + 160);
    v14 = (unint64_t)v12;
    do
    {
      v15 = *(_QWORD *)(v14 + 8);
      if ((v15 & 2) == 0)
        break;
      v14 = v15 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v14);
    v16 = (_QWORD *)llvm::sys::path::filename();
    v18 = v17;
    v19 = (unint64_t)v13;
    do
    {
      v20 = v19;
      v21 = *(_QWORD *)(v19 + 8);
      if ((v21 & 2) == 0)
        break;
      v19 = v21 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v19);
    v22 = *(unint64_t **)(v20 + 16);
    v25 = *v22;
    v24 = v22 + 4;
    v23 = v25;
    __dst = (unsigned __int8 *)v125;
    v124 = xmmword_22F44E310;
    if (v25 >= 0x81)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v28 = __dst;
      v26 = v124;
    }
    else
    {
      v26 = 0;
      v27 = 0;
      v28 = (unsigned __int8 *)v125;
      if (!v23)
        goto LABEL_11;
    }
    memcpy(&v28[v26], v24, v23);
    v27 = v124;
LABEL_11:
    *(_QWORD *)&v124 = v27 + v23;
    if (v18 == 24)
    {
      if (*v16 != 0x702E656C75646F6DLL || v16[1] != 0x6D2E657461766972 || v16[2] != 0x70616D656C75646FLL)
        goto LABEL_48;
      v31 = "module.modulemap";
    }
    else
    {
      if (v18 != 18
        || (*v16 == 0x705F656C75646F6DLL ? (v29 = v16[1] == 0x6D2E657461766972) : (v29 = 0),
            v29 ? (v30 = *((unsigned __int16 *)v16 + 8) == 28769) : (v30 = 0),
            !v30))
      {
LABEL_48:
        v50 = 0;
        goto LABEL_49;
      }
      v31 = "module.map";
    }
    __p = v31;
    v103 = 259;
    LOWORD(v113) = 257;
    v122 = 257;
    v119 = 257;
    llvm::sys::path::append();
    v50 = sub_22F2A7C2C(v93, __dst, v124, 0, 1);
LABEL_49:
    if (__dst != (unsigned __int8 *)v125)
      free(__dst);
    if (v50)
      v13 = (size_t *)v50;
    v51 = *v13;
    v52 = a4;
    do
    {
      v53 = (void **)v52;
      v52 = *(_QWORD *)(v52 + 32);
    }
    while (v52);
    v54 = *((unsigned __int8 *)v53 + 23);
    if ((v54 & 0x80u) == 0)
      v55 = v53;
    else
      v55 = *v53;
    if ((v54 & 0x80u) == 0)
      v56 = v54 & 0x7F;
    else
      v56 = (size_t)v53[1];
    if (v51 <= 0x7FFFFFFFFFFFFFF7)
    {
      v57 = *(_WORD *)(a4 + 1344);
      if (v51 >= 0x17)
      {
        v60 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v51 | 7) != 0x17)
          v60 = v51 | 7;
        v61 = v60 + 1;
        p_dst = (unsigned __int8 *)operator new(v60 + 1);
        *(_QWORD *)&v124 = v51;
        *((_QWORD *)&v124 + 1) = v61 | 0x8000000000000000;
        __dst = p_dst;
        v59 = v96;
      }
      else
      {
        HIBYTE(v124) = *v13;
        p_dst = (unsigned __int8 *)&__dst;
        v59 = v96;
        if (!v51)
          goto LABEL_69;
      }
      memmove(p_dst, v13 + 4, v51);
LABEL_69:
      v36 = v97;
      p_dst[v51] = 0;
      LOBYTE(v125[0]) = 0;
      v126 = 0;
      v127 = 0;
      v128 = 0;
      v129 = v95 | 0x100;
      v130 = (v57 & 0x40) != 0;
      v62 = (unint64_t)sub_22F152B7C(__len, a4);
      do
      {
        v64 = (size_t *)v62;
        v65 = *(_QWORD *)(v62 + 8);
        if ((v65 & 2) == 0)
          break;
        v62 = v65 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v65 & 0xFFFFFFFFFFFFFFFCLL) != 0);
      a6 = v91;
      v66 = sub_22E6D3540(a1, v97, v55, v56, (uint64_t)&__dst, v64 + 4, *v64, v63, v59, v91, (void (*)(_QWORD, _QWORD))nullsub_140, (uint64_t)&__p, (void (*)(_QWORD, _QWORD))nullsub_141, (uint64_t)&v109);
      if (SHIBYTE(v124) < 0)
        operator delete(__dst);
      goto LABEL_89;
    }
LABEL_114:
    abort();
  }
  v32 = *(_QWORD *)(a4 + 40);
  v34 = *(const void **)v32;
  v33 = *(_QWORD *)(v32 + 8);
  __dst = (unsigned __int8 *)v125;
  v124 = xmmword_22F44E310;
  if (v33 >= 0x81)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v35 = v124;
  }
  else
  {
    v35 = 0;
  }
  v36 = v97;
  if (v33)
  {
    memcpy(&__dst[v35], v34, v33);
    v35 = v124;
  }
  *(_QWORD *)&v124 = v35 + v33;
  __p = "__inferred_module.map";
  v103 = 259;
  v122 = 257;
  v119 = 257;
  llvm::sys::path::append();
  v120[0] = 0;
  v120[1] = 0;
  v121 = 0;
  v110 = 0;
  v114 = 0;
  v115 = 0;
  v116 = 1;
  v112 = 0;
  v113 = 0;
  v111 = 0;
  v109 = MEMORY[0x24BED83D8] + 16;
  v117 = v120;
  llvm::raw_ostream::SetBufferAndMode();
  sub_22F1D9648(a4, &v109, 0, 0);
  if (v113 != v111)
    llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v109);
  v37 = a4;
  do
  {
    v38 = (void **)v37;
    v37 = *(_QWORD *)(v37 + 32);
  }
  while (v37);
  v39 = *((_BYTE *)v38 + 23);
  if (v39 >= 0)
    v40 = v38;
  else
    v40 = *v38;
  if (v39 >= 0)
    v41 = v39 & 0x7F;
  else
    v41 = (size_t)v38[1];
  v42 = __dst;
  v43 = *(_WORD *)(a4 + 1344);
  __lena = v41;
  if (!__dst)
  {
    __p = 0;
    v100 = 0;
    v101 = 0;
    v59 = v96;
    v67 = v95;
    goto LABEL_80;
  }
  v88 = v40;
  v94 = a2;
  v44 = v124;
  if ((unint64_t)v124 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_114;
  v45 = v11;
  v46 = a6;
  if ((unint64_t)v124 >= 0x17)
  {
    v68 = (v124 & 0xFFFFFFFFFFFFFFF8) + 8;
    if (((unint64_t)v124 | 7) != 0x17)
      v68 = v124 | 7;
    v69 = v68 + 1;
    p_p = operator new(v68 + 1);
    v70 = v69 | 0x8000000000000000;
    v36 = v97;
    v100 = v44;
    v101 = v70;
    __p = p_p;
  }
  else
  {
    HIBYTE(v101) = v124;
    p_p = &__p;
    if (!(_QWORD)v124)
      goto LABEL_79;
  }
  memmove(p_p, v42, v44);
LABEL_79:
  v59 = v96;
  v67 = v95;
  *((_BYTE *)p_p + v44) = 0;
  a6 = v46;
  v11 = v45;
  a2 = v94;
  v40 = v88;
LABEL_80:
  v102 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v107 = v67 | 0x100;
  v108 = (v43 & 0x40) != 0;
  v71 = (unint64_t)sub_22F152B7C((uint64_t)v11, a4);
  do
  {
    v73 = (size_t *)v71;
    v74 = *(_QWORD *)(v71 + 8);
    if ((v74 & 2) == 0)
      break;
    v71 = v74 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while ((v74 & 0xFFFFFFFFFFFFFFFCLL) != 0);
  v75 = *v73;
  v118[0] = v120;
  v118[1] = &__dst;
  v66 = sub_22E6D3540(a1, v36, v40, __lena, (uint64_t)&__p, v73 + 4, v75, v72, v59, a6, (void (*)(_QWORD, _QWORD))sub_22E6D6A18, (uint64_t)v118, (void (*)(_QWORD, _QWORD))nullsub_141, (uint64_t)&v98);
  if (SHIBYTE(v101) < 0)
    operator delete(__p);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v109);
  if (SHIBYTE(v121) < 0)
    operator delete(v120[0]);
  if (__dst != (unsigned __int8 *)v125)
    free(__dst);
LABEL_89:
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 2289) & 0x40) != 0)
    *(_BYTE *)(a1 + 368) = 1;
  if ((v66 & 1) != 0)
    return sub_22E6D6834(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 264), a2, v36, (void **)a4, v59, a6, 0);
  v77 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v77 + 312) = a3;
  *(_DWORD *)(v77 + 316) = 41;
  if (*(char *)(v77 + 311) < 0)
  {
    **(_BYTE **)(v77 + 288) = 0;
    *(_QWORD *)(v77 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v77 + 288) = 0;
    *(_BYTE *)(v77 + 311) = 0;
  }
  __dst = (unsigned __int8 *)(v77 + 320);
  *(_QWORD *)&v124 = 0;
  *((_QWORD *)&v124 + 1) = v77;
  v125[0] = 1;
  *(_BYTE *)(v77 + 320) = 0;
  *(_DWORD *)(v77 + 664) = 0;
  v78 = *(unsigned int *)(v77 + 776);
  if ((_DWORD)v78)
  {
    v79 = *(_QWORD *)(v77 + 768);
    v80 = 56 * v78;
    do
    {
      if (*(char *)(v79 + v80 - 9) < 0)
        operator delete(*(void **)(v79 + v80 - 32));
      v80 -= 56;
    }
    while (v80);
  }
  *(_DWORD *)(v77 + 776) = 0;
  v81 = *(_BYTE *)(a4 + 23);
  v82 = v81 < 0;
  if (v81 >= 0)
    v83 = (void *)a4;
  else
    v83 = *(void **)a4;
  v84 = v81 & 0x7F;
  if (v82)
    v85 = *(_QWORD *)(a4 + 8);
  else
    v85 = v84;
  sub_22E3B89A8(&__dst, v83, v85);
  v86 = a2 | ((unint64_t)a3 << 32);
  v87 = __dst;
  if (!__dst)
  {
    v87 = (unsigned __int8 *)sub_22E3B8AAC(v124);
    __dst = v87;
  }
  sub_22E4D6448((uint64_t)(v87 + 336), v86, 1);
  sub_22E3BB0B8((uint64_t)&__dst);
  return 0;
}

BOOL sub_22E6D6834(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, void **a5, _BYTE *a6, size_t a7, _BYTE *a8)
{
  unsigned int v13;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  BOOL v22;
  void *v23;
  size_t v24;
  size_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;

  if (a8)
    v13 = 3;
  else
    v13 = 1;
  if (a2)
  {
    ++*(_DWORD *)(a2 + 32);
    v15 = a3;
    v16 = sub_22E77A990(a2, a6, a7, 0, a3, v13, 0);
    v17 = *(_DWORD *)(a2 + 32) - 1;
    *(_DWORD *)(a2 + 32) = v17;
    if (!v17)
      (*(void (**)(uint64_t))(*(_QWORD *)(a2 + 24) + 8))(a2 + 24);
  }
  else
  {
    v15 = a3;
    v16 = sub_22E77A990(0, a6, a7, 0, a3, v13, 0);
  }
  if (v16)
  {
    if (a8 && v16 == 3)
    {
      *a8 = 1;
    }
    else if (v16 == 2 || !*(_BYTE *)(a1 + 168))
    {
      *(_DWORD *)(a1 + 312) = a4;
      *(_DWORD *)(a1 + 316) = 41;
      if (*(char *)(a1 + 311) < 0)
      {
        **(_BYTE **)(a1 + 288) = 0;
        *(_QWORD *)(a1 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a1 + 288) = 0;
        *(_BYTE *)(a1 + 311) = 0;
      }
      v29 = (unsigned __int8 *)(a1 + 320);
      v30 = 0;
      v31 = a1;
      v32 = 1;
      *(_BYTE *)(a1 + 320) = 0;
      *(_DWORD *)(a1 + 664) = 0;
      v18 = *(unsigned int *)(a1 + 776);
      if ((_DWORD)v18)
      {
        v19 = *(_QWORD *)(a1 + 768);
        v20 = 56 * v18;
        do
        {
          if (*(char *)(v19 + v20 - 9) < 0)
            operator delete(*(void **)(v19 + v20 - 32));
          v20 -= 56;
        }
        while (v20);
      }
      *(_DWORD *)(a1 + 776) = 0;
      v21 = *((_BYTE *)a5 + 23);
      v22 = v21 < 0;
      if (v21 >= 0)
        v23 = a5;
      else
        v23 = *a5;
      v24 = v21 & 0x7F;
      if (v22)
        v25 = (size_t)a5[1];
      else
        v25 = v24;
      sub_22E3B89A8(&v29, v23, v25);
      v26 = v15 | (a4 << 32);
      v27 = v29;
      if (!v29)
      {
        v27 = (unsigned __int8 *)sub_22E3B8AAC(v30);
        v29 = v27;
      }
      sub_22E4D6448((uint64_t)(v27 + 336), v26, 1);
      sub_22E3BB0B8((uint64_t)&v29);
    }
  }
  return v16 == 0;
}

uint64_t sub_22E6D6A18(const void ***a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  llvm::MemoryBuffer::getMemBuffer();
  if (*((char *)*a1 + 23) < 0)
    v4 = (uint64_t)(*a1)[1];
  else
    v4 = *((unsigned __int8 *)*a1 + 23);
  v5 = sub_22F1D1104(*(_QWORD *)(a2 + 160), *a1[1], (size_t)a1[1][1], v4, 0);
  do
  {
    v6 = *(_QWORD *)(v5 + 8);
    v5 = v6 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while ((v6 & 2) != 0 && v5);
  v7 = *(_QWORD *)(a2 + 176);
  v9 = v10;
  v10 = 0;
  sub_22F42393C(v7, v5, &v9);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_22E6D6AF4(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v10 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v8 = v6;
        v13 = v5 + v9++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v10 = 1;
        if (*v6 == a3)
          goto LABEL_7;
      }
      v10 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v10 = 0;
  }
LABEL_7:
  *a4 = v6;
  return v10;
}

_QWORD *sub_22E6D6B88(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2A81D4(a1, v4, &v4[2 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

BOOL sub_22E6D6C48(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v8;
  unsigned __int8 v9;

  sub_22E6D6CD4(a1, a2, (uint64_t)&v8);
  v4 = v9;
  if (v9)
  {
    v5 = *a2;
    v6 = *(_DWORD *)(a1 + 32);
    if (v6 >= *(_DWORD *)(a1 + 36))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = *(_DWORD *)(a1 + 32);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 32);
  }
  return v4 != 0;
}

_QWORD *sub_22E6D6CD4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_22E6D6D8C(a1, a2, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v12 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v13 = 2;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(unsigned int *)(a1 + 16);
    }
    v11 = 0;
    v10 = v12 + 8 * v13;
  }
  else
  {
    result = sub_22E6D6E34((_DWORD *)a1, (uint64_t)a2, a2, v14);
    v7 = result;
    *result = *a2;
    v8 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v9 = 2;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(unsigned int *)(a1 + 16);
    }
    v10 = v8 + 8 * v9;
    v11 = 1;
  }
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v10;
  *(_BYTE *)(a3 + 16) = v11;
  return result;
}

uint64_t sub_22E6D6D8C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 2;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_13:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v12 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_13;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

_QWORD *sub_22E6D6E34(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 2;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_22E6D6EF4((uint64_t)a1, v7);
  v9 = 0;
  sub_22E6D6D8C((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_22E6D6EF4(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 3)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = 0;
    v10 = v16;
    do
    {
      v11 = v8;
      v12 = *(_QWORD *)(a1 + 8 + 8 * v9);
      if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
        *v10++ = v12;
      v8 = 1;
      v9 = 1;
    }
    while ((v11 & 1) == 0);
    if (a2 > 2)
    {
      *(_DWORD *)a1 &= ~1u;
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](8 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    return sub_22E6D706C(a1, v16, v10);
  }
  else
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 2)
    {
      v15 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](8 * a2, 8);
      *(_QWORD *)(a1 + 16) = v15;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22E6D706C(a1, v6, (_QWORD *)v6 + v7);
    return llvm::deallocate_buffer(v6, (void *)(8 * v7));
  }
}

uint64_t sub_22E6D706C(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 24);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22E6D6D8C((uint64_t)v5, a2, &v10);
      *v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t *sub_22E6D7128(unint64_t a1, llvm *a2)
{
  uint64_t v3;
  uint64_t *result;
  uint64_t v5[2];
  uint64_t v6;

  if ((*((_BYTE *)a2 + 3) & 2) == 0)
    return 0;
  sub_22E6D719C(a1, a2, v5);
  if (v5[0] <= 7uLL && v6 == 0)
    return 0;
  if (v6)
  {
    v3 = *(_QWORD *)(v5[1] + 8 * v6 - 8) + 16;
    return *(uint64_t **)v3;
  }
  result = (uint64_t *)(v5[0] & 0xFFFFFFFFFFFFFFF8);
  if ((v5[0] & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    result = sub_22F14FEA4(result);
    if (result)
    {
      v3 = (uint64_t)(result + 2);
      return *(uint64_t **)v3;
    }
  }
  return result;
}

unint64_t sub_22E6D719C@<X0>(unint64_t result@<X0>, llvm *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  llvm *v18;

  v18 = a2;
  if ((*((_BYTE *)a2 + 3) & 2) == 0)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  v4 = result;
  v5 = sub_22E6D72B8(*(_DWORD **)(result + 1584), &v18);
  v7 = v5 + 1;
  v6 = v5[1];
  v8 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 4) == 0 || !v8)
    goto LABEL_6;
  do
  {
    v8 = *(_QWORD *)v8;
LABEL_6:
    if (!v8)
    {
      v11 = 0;
      goto LABEL_12;
    }
    v9 = *(_BYTE *)(v8 + 12) & 3;
  }
  while (v9 == 2);
  v10 = v8 & 0xFFFFFFFFFFFFFFFBLL;
  if (v9)
    v11 = 0;
  else
    v11 = v10;
LABEL_12:
  v12 = sub_22E6D7534(v5 + 1, v4, v18);
  v13 = v12;
  if (!v12)
    goto LABEL_15;
  v13 = v12 + 8;
  v14 = *(_QWORD *)(v12 + 8);
  if (v14 < 8)
  {
    v13 = 0;
LABEL_15:
    v15 = 0;
    goto LABEL_16;
  }
  if ((v14 & 4) != 0)
  {
    v17 = v14 & 0xFFFFFFFFFFFFFFF8;
    v13 = *(_QWORD *)v17;
    v15 = *(unsigned int *)(v17 + 8);
  }
  else
  {
    v15 = 1;
  }
LABEL_16:
  result = sub_22E6D7534(v7, v4, v18);
  if (result)
    v16 = 4 * *(unsigned __int8 *)(result + 20);
  else
    v16 = 0;
  *a3 = v16 | v11;
  a3[1] = v13;
  a3[2] = v15;
  return result;
}

_QWORD *sub_22E6D72B8(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22E3B9914((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22E6D7314(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22E6D7314(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = a1[2];
  v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E6D73C4((uint64_t)a1, v7);
  v9 = 0;
  sub_22E3B9914((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096)
    --a1[3];
  return a4;
}

_QWORD *sub_22E6D73C4(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E6D7484(a1, v4, (_QWORD *)v4 + 2 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E6D7484(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22E3B9914(v5, a2, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      a2[1] = 0;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

unint64_t sub_22E6D7534(unint64_t *a1, uint64_t a2, llvm *a3)
{
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int v10;

  v6 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 0x800000000) != 0)
  {
    sub_22F418550(a2);
    v6 = *(_QWORD *)a3;
  }
  if ((v6 & 0x2000000) == 0)
    return 0;
  if ((*(_QWORD *)(*(_QWORD *)(a2 + 56) + 20) & 0x200200000000000) == 0)
    return 0;
  v7 = *(_DWORD *)(*(_QWORD *)(a2 + 1584) + 48);
  if (!v7)
    return 0;
  v8 = *a1;
  if ((*a1 & 4) != 0 && (v9 = v8 & 0xFFFFFFFFFFFFFFF8, (v8 & 0xFFFFFFFFFFFFFFF8) != 0))
  {
    v10 = *(_DWORD *)(v9 + 16);
  }
  else
  {
    v9 = sub_22E3CD3D4(a2 + 128, 32, 3);
    v10 = 0;
    *(_QWORD *)v9 = *a1 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v9 + 8) = 0;
    *(_DWORD *)(v9 + 16) = 0;
    *(_BYTE *)(v9 + 20) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *a1 = v9 | 4;
    v7 = *(_DWORD *)(*(_QWORD *)(a2 + 1584) + 48);
  }
  if (v7 != v10)
    sub_22F1766B0(a2, a3, (uint64_t **)v9);
  return v9;
}

void sub_22E6D7620(uint64_t a1, void *__src, size_t __len, uint64_t a4, uint64_t a5)
{
  __int128 *p_dst;
  size_t v11;
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 __dst;
  unint64_t v17;
  void *__p[2];
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (!__src)
  {
    __dst = 0uLL;
    v17 = 0;
    goto LABEL_12;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v11 = __len | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v17 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v17) = __len;
    p_dst = &__dst;
    if (!__len)
      goto LABEL_11;
  }
  memmove(p_dst, __src, __len);
LABEL_11:
  *((_BYTE *)p_dst + __len) = 0;
LABEL_12:
  *(_OWORD *)__p = __dst;
  v19 = v17;
  v20 = a4;
  v21 = a5;
  v13 = sub_22E6D7914(a1 + 480, (unint64_t)__p, 1);
  v14 = *(_QWORD *)(a1 + 480) + 40 * *(unsigned int *)(a1 + 488);
  v15 = *(_OWORD *)v13;
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(v13 + 16);
  *(_OWORD *)v14 = v15;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)v13 = 0;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(v13 + 24);
  ++*(_DWORD *)(a1 + 488);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
}

BOOL sub_22E6D7758(uint64_t a1, size_t *a2)
{
  char v3;
  BOOL v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  unint64_t v8;
  const void *v9;
  size_t v10;
  int HashValue;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v16;
  int v17;
  int v18;
  const void *v19;
  size_t v20;

  v3 = *((_BYTE *)a2 + 23);
  v4 = v3 < 0;
  v5 = (const void *)*a2;
  if (v3 >= 0)
    v5 = a2;
  v6 = v3 & 0x7F;
  if (v4)
    v6 = a2[1];
  v19 = v5;
  v20 = v6;
  v7 = a1 + 240;
  LOBYTE(v16) = 61;
  v8 = llvm::StringRef::find();
  if (v8 == -1)
  {
    v9 = v19;
    v10 = v20;
  }
  else
  {
    v9 = v19;
    if (v20 >= v8)
      v10 = v8;
    else
      v10 = v20;
  }
  HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue();
  v16 = (void *)operator new[]();
  v17 = v10;
  v18 = HashValue;
  memcpy(v16, v9, v10);
  v12 = sub_22F2A8280(v7, (uint64_t)&v16);
  if ((*(_BYTE *)(a1 + 240) & 1) != 0)
  {
    v13 = a1 + 248;
    v14 = 16;
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 248);
    v14 = *(unsigned int *)(a1 + 256);
  }
  if (v16 != (void *)-8192 && v16 != (void *)-4096 && v16)
    MEMORY[0x2348A0E84]();
  return v13 + 16 * v14 != v12;
}

void sub_22E6D7888(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = (__int128 *)*a1;
    v4 = *a1 + 40 * v2;
    do
    {
      v5 = *v3;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)v3 + 2);
      *(_OWORD *)a2 = v5;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
      *(_QWORD *)v3 = 0;
      *(_OWORD *)(a2 + 24) = *(__int128 *)((char *)v3 + 24);
      v3 = (__int128 *)((char *)v3 + 40);
      a2 += 40;
    }
    while (v3 != (__int128 *)v4);
    v6 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v6)
    {
      v7 = (__int128 *)*a1;
      v8 = 40 * v6;
      do
      {
        if (*((char *)v7 + v8 - 17) < 0)
          operator delete(*(void **)((char *)v7 + v8 - 40));
        v8 -= 40;
      }
      while (v8);
    }
  }
}

unint64_t sub_22E6D7914(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 40 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_22F2A8328(a1);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_22F2A8328(a1);
    }
  }
  return v3;
}

uint64_t sub_22E6D797C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v2 = operator new();
  *(_BYTE *)(v2 + 64) = 0;
  *(_BYTE *)(v2 + 72) = 0;
  *(_BYTE *)(v2 + 80) = 0;
  *(_WORD *)(v2 + 88) = 0;
  *(_BYTE *)(v2 + 92) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_BYTE *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)v2 = &unk_24FA70A18;
  *(_QWORD *)(v2 + 8) = 0;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v7 = v2;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(&v8, v3, v4, &v7);
    v5 = v7;
    v2 = v8;
    v7 = 0;
    v8 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 64))(v5);
  }
  sub_22E6CEBA8(*(llvm::raw_ostream **)(a1 + 16), (_QWORD *)v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
}

uint64_t sub_22E6D7A48(uint64_t a1)
{
  uint64_t v2;

  llvm::vfs::OutputFile::destroy((llvm::vfs::OutputFile *)a1);
  sub_22E3BACF8((llvm *)(a1 + 32));
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_22E6D7A9C(_QWORD *a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *a1 = &off_24FA6D940;
  v2 = (_QWORD *)a1[6];
  if (v2 != a1 + 8)
    free(v2);
  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void sub_22E6D7B14(_QWORD *a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *a1 = &off_24FA6D940;
  v2 = (_QWORD *)a1[6];
  if (v2 != a1 + 8)
    free(v2);
  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E6D7B9C(uint64_t a1, int a2, int a3)
{
  unint64_t v4;
  unint64_t v5;
  size_t v6;
  const void *v7;
  void **p_dst;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  BOOL v20;
  char *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **__dst;
  size_t v28;
  unint64_t v29;

  if (a3 == 1)
  {
    sub_22E6D7DDC(a1);
    return;
  }
  if (!a3)
  {
    v4 = sub_22F1E27D0(*(_QWORD **)(a1 + 8), a2);
    if (!v4)
    {
      __dst = 0;
      v28 = 0;
      v29 = 0;
      goto LABEL_15;
    }
    v6 = v5;
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v7 = (const void *)v4;
    if (v5 >= 0x17)
    {
      v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v9 = v5 | 7;
      v10 = v9 + 1;
      p_dst = (void **)operator new(v9 + 1);
      v28 = v6;
      v29 = v10 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v29) = v5;
      p_dst = (void **)&__dst;
      if (!v5)
        goto LABEL_14;
    }
    memmove(p_dst, v7, v6);
LABEL_14:
    *((_BYTE *)p_dst + v6) = 0;
LABEL_15:
    v11 = atomic_load((unsigned __int8 *)&qword_253E4BCC8);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_253E4BCC8))
    {
      qword_253E4BCC0 = (uint64_t)sub_22F2A8040();
      __cxa_guard_release(&qword_253E4BCC8);
    }
    v12 = *(_QWORD *)(a1 + 40);
    v13 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 24);
    v22 = 0;
    v23 = qword_253E4BCC0;
    v24 = v12;
    v25 = v13;
    v26 = kdebug_trace_string();
    kdebug_trace();
    v14 = *(_DWORD *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 48);
    v16 = (char *)&v22;
    if (v14 >= *(_DWORD *)(a1 + 60))
    {
      v20 = v15 + 40 * v14 > (unint64_t)&v22;
      if (v15 <= (unint64_t)&v22 && v20)
      {
        v21 = (char *)&v22 - v15;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v15 = *(_QWORD *)(a1 + 48);
        v16 = &v21[v15];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v15 = *(_QWORD *)(a1 + 48);
        v16 = (char *)&v22;
      }
    }
    v17 = v15 + 40 * *(unsigned int *)(a1 + 56);
    v18 = *(_OWORD *)v16;
    v19 = *((_OWORD *)v16 + 1);
    *(_QWORD *)(v17 + 32) = *((_QWORD *)v16 + 4);
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    ++*(_DWORD *)(a1 + 56);
    ++*(_DWORD *)(*(_QWORD *)(a1 + 16) + 24);
    if (SHIBYTE(v29) < 0)
      operator delete(__dst);
  }
}

uint64_t sub_22E6D7DDC(uint64_t result)
{
  uint64_t v1;

  if (*(_DWORD *)(result + 56))
  {
    v1 = result;
    result = kdebug_trace();
    --*(_DWORD *)(v1 + 56);
    --*(_DWORD *)(*(_QWORD *)(v1 + 16) + 24);
  }
  return result;
}

void sub_22E6D7E48()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E6D7E5C()
{
  return 0;
}

uint64_t sub_22E6D7E64(uint64_t *a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5, void *a6, size_t a7)
{
  return sub_22E6D4E58(a4, a5, a6, a7, "imported module", 0xFuLL, a1[1], a1[2], a1[3], a1[4]);
}

uint64_t sub_22E6D7EAC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24FA6DBE0;
  sub_22E3B9848((char **)(a1 + 16));
  return a1;
}

void sub_22E6D7EDC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24FA6DBE0;
  sub_22E3B9848((char **)(a1 + 16));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E6D7F1C(uint64_t a1, void *__src, size_t __len)
{
  void **p_dst;
  size_t v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  void **__dst;
  size_t v13;
  unint64_t v14;

  if (!__src)
  {
    __dst = 0;
    v13 = 0;
    v14 = 0;
    goto LABEL_12;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (void **)operator new(v7 + 1);
    v13 = __len;
    v14 = v8 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v14) = __len;
    p_dst = (void **)&__dst;
    if (!__len)
      goto LABEL_11;
  }
  memmove(p_dst, __src, __len);
LABEL_11:
  *((_BYTE *)p_dst + __len) = 0;
LABEL_12:
  v9 = sub_22E3B9688(a1 + 16, (unint64_t)&__dst, 1);
  v10 = *(_QWORD *)(a1 + 16) + 24 * *(unsigned int *)(a1 + 24);
  v11 = *(_OWORD *)v9;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v9 + 16);
  *(_OWORD *)v10 = v11;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = 0;
  ++*(_DWORD *)(a1 + 24);
  if (SHIBYTE(v14) < 0)
    operator delete(__dst);
}

uint64_t sub_22E6D8028(_QWORD *a1, _QWORD *a2, uint64_t **a3, uint64_t **a4)
{
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  void *v18;
  size_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  int v25;
  void *v26;
  size_t v27;
  size_t v28;
  double v29;
  const std::error_category *v30;
  std::string *v31;
  size_t size;
  std::error_code v33;
  std::string v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;

  v8 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 48))(*a2, MEMORY[0x24BED6B30]);
  v9 = (_QWORD *)*a2;
  *a2 = 0;
  if (v8)
  {
    v10 = **a3;
    *(_QWORD *)(v10 + 312) = 0x4E00000000;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    v35 = (unsigned __int8 *)(v10 + 320);
    v36 = 0;
    v37 = v10;
    v38 = 1;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 664) = 0;
    v13 = *(unsigned int *)(v10 + 776);
    if ((_DWORD)v13)
    {
      v14 = *(_QWORD *)(v10 + 768);
      v15 = 56 * v13;
      do
      {
        if (*(char *)(v14 + v15 - 9) < 0)
          operator delete(*(void **)(v14 + v15 - 32));
        v15 -= 56;
      }
      while (v15);
    }
    *(_DWORD *)(v10 + 776) = 0;
    v16 = *((_BYTE *)v9 + 71);
    v17 = v16;
    if (v16 >= 0)
      v18 = v9 + 6;
    else
      v18 = (void *)v9[6];
    v19 = v16 & 0x7F;
    if (v17 >= 0)
      v20 = v19;
    else
      v20 = v9[7];
    sub_22E3B89A8(&v35, v18, v20);
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD *, _QWORD))(*v9 + 48))(v9, MEMORY[0x24BED6AF0]);
    if (!(_DWORD)result)
    {
      *a1 = v9;
      return result;
    }
    v12 = **a4;
    *(_QWORD *)(v12 + 312) = 0x31500000000;
    if (*(char *)(v12 + 311) < 0)
    {
      **(_BYTE **)(v12 + 288) = 0;
      *(_QWORD *)(v12 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v12 + 288) = 0;
      *(_BYTE *)(v12 + 311) = 0;
    }
    v35 = (unsigned __int8 *)(v12 + 320);
    v36 = 0;
    v37 = v12;
    v38 = 1;
    *(_BYTE *)(v12 + 320) = 0;
    *(_DWORD *)(v12 + 664) = 0;
    v21 = *(unsigned int *)(v12 + 776);
    if ((_DWORD)v21)
    {
      v22 = *(_QWORD *)(v12 + 768);
      v23 = 56 * v21;
      do
      {
        if (*(char *)(v22 + v23 - 9) < 0)
          operator delete(*(void **)(v22 + v23 - 32));
        v23 -= 56;
      }
      while (v23);
    }
    *(_DWORD *)(v12 + 776) = 0;
  }
  v24 = *((_BYTE *)v9 + 47);
  v25 = v24;
  if (v24 >= 0)
    v26 = v9 + 3;
  else
    v26 = (void *)v9[3];
  v27 = v24 & 0x7F;
  if (v25 >= 0)
    v28 = v27;
  else
    v28 = v9[4];
  v29 = sub_22E3B89A8(&v35, v26, v28);
  *(_QWORD *)&v33.__val_ = (*(uint64_t (**)(_QWORD *, double))(*v9 + 32))(v9, v29);
  v33.__cat_ = v30;
  std::error_code::message(&v34, &v33);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = &v34;
  else
    v31 = (std::string *)v34.__r_.__value_.__r.__words[0];
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v34.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v34.__r_.__value_.__l.__size_;
  sub_22E3B89A8(&v35, v31, size);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  sub_22E3BB0B8((uint64_t)&v35);
  *a1 = 0;
  return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
}

char *sub_22E6D8288(uint64_t a1, char **a2)
{
  char *v2;
  char *result;
  char *v4;
  char *v5;

  v2 = *a2;
  *a2 = 0;
  v4 = v2;
  sub_22E6C5940(&v4, &v5);
  result = v4;
  if (v4)
    return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

uint64_t *sub_22E6D82D0(uint64_t *result, _DWORD *a2)
{
  BOOL v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _DWORD *v6;

  if (*a2)
    v2 = a2[1] == 0;
  else
    v2 = 1;
  if (!v2)
  {
    v3 = *result;
    if (!*result)
    {
      v4 = result;
      v6 = a2;
      v5 = sub_22E3B8AAC(result[1]);
      a2 = v6;
      v3 = v5;
      *v4 = v5;
    }
    return (uint64_t *)sub_22E6D8340(v3 + 448, (unint64_t)a2);
  }
  return result;
}

_BYTE *sub_22E6D8340(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  __int128 v7;
  _BYTE *result;
  __int128 v9;

  v3 = sub_22E6C9D38(a1, a2, 1);
  v4 = *(_QWORD *)a1;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_QWORD *)a1 + 56 * v5;
  v7 = *(_OWORD *)v3;
  *(_QWORD *)(v6 + 13) = *(_QWORD *)(v3 + 13);
  *(_OWORD *)v6 = v7;
  result = (_BYTE *)(v6 + 24);
  if (*(char *)(v3 + 47) < 0)
  {
    result = sub_22E3BB2B4(result, *(void **)(v3 + 24), *(_QWORD *)(v3 + 32));
  }
  else
  {
    v9 = *(_OWORD *)(v3 + 24);
    *(_QWORD *)(v6 + 40) = *(_QWORD *)(v3 + 40);
    *(_OWORD *)result = v9;
  }
  *(_BYTE *)(v4 + 56 * v5 + 48) = *(_BYTE *)(v3 + 48);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_22E6D83D8(const void ***a1, uint64_t a2)
{
  uint64_t v4;
  const void **v5;
  char v6;
  const void *v7;
  size_t v8;
  uint64_t v9;
  const void **v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 160);
  v5 = a1[1];
  v6 = *((_BYTE *)*a1 + 23);
  if (v6 >= 0)
    v7 = *a1;
  else
    v7 = **a1;
  if (v6 >= 0)
    v8 = v6 & 0x7F;
  else
    v8 = (size_t)(*a1)[1];
  if (*((char *)v5 + 23) < 0)
    v9 = (uint64_t)v5[1];
  else
    v9 = *((unsigned __int8 *)v5 + 23);
  v10 = a1[2];
  v11 = sub_22F1D1104(v4, v7, v8, v9, 0);
  do
  {
    v12 = *(_QWORD *)(v11 + 8);
    v11 = v12 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while ((v12 & 2) != 0 && v11);
  v13 = *(_QWORD *)(a2 + 176);
  llvm::MemoryBuffer::getMemBuffer();
  sub_22F42393C(v13, v11, &v15);
  v14 = v15;
  v15 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  sub_22F2A86A8(a2 + 328, v10 + 41);
  *(_BYTE *)(a2 + 352) = 0;
}

void sub_22E6D84DC(_QWORD *a1, uint64_t a2)
{
  sub_22F2A86A8(*a1 + 328, (_QWORD *)(a2 + 328));
}

uint64_t *sub_22E6D84EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v18;

  v4 = operator new();
  *a1 = sub_22E71FFBC(v4, *(__int128 **)a2);
  v5 = (_QWORD *)operator new();
  *v5 = &off_24FA70020;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = v4;
  a1[1] = (uint64_t)v5;
  v6 = (char *)operator new();
  a1[2] = (uint64_t)sub_22E6C7230(v6, *(__int128 **)(a2 + 16));
  v7 = (_QWORD *)operator new();
  *v7 = &off_24FA70058;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = v6;
  a1[3] = (uint64_t)v7;
  v8 = operator new();
  v9 = (_DWORD *)sub_22E720948(v8, *(_QWORD *)(a2 + 32));
  a1[4] = (uint64_t)v9;
  ++*v9;
  v10 = (char *)operator new();
  a1[5] = (uint64_t)sub_22E720A70(v10, *(__int128 **)(a2 + 40));
  v11 = (_QWORD *)operator new();
  *v11 = &off_24FA70090;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v10;
  a1[6] = (uint64_t)v11;
  v12 = operator new();
  a1[7] = sub_22E720E1C(v12, *(_QWORD *)(a2 + 56));
  v13 = (_QWORD *)operator new();
  *v13 = &off_24FA700C8;
  v13[1] = 0;
  v13[2] = 0;
  v13[3] = v12;
  a1[8] = (uint64_t)v13;
  v14 = operator new();
  v15 = *(_DWORD **)(a2 + 72);
  v18 = v15;
  if (v15)
    ++*v15;
  v16 = (_DWORD *)sub_22E721094(v14, (uint64_t)v15);
  a1[9] = (uint64_t)v16;
  ++*v16;
  sub_22E724F68(&v18);
  return a1;
}

uint64_t sub_22E6D86EC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  sub_22E724F68((_DWORD **)(a1 + 72));
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_22E3B3C18((uint64_t *)(a1 + 32));
  v8 = *(std::__shared_weak_count **)(a1 + 24);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *(std::__shared_weak_count **)(a1 + 8);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return a1;
}

void sub_22E6D87FC(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, __int128 *), uint64_t a4, llvm::Triple *a5, unsigned __int8 *a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  std::string::size_type v26;
  std::string::size_type size;
  uint64_t v28;
  unsigned int v29;
  std::string::size_type v30;
  std::string::size_type v31;
  std::string::size_type v32;
  std::string::size_type v33;
  std::string *p_n;
  void ***p_s2;
  void *v36;
  unsigned int v37;
  std::string::size_type v38;
  std::string::size_type v39;
  std::string::size_type v40;
  std::string::size_type v41;
  std::string *v42;
  void ***v43;
  void *v44;
  std::string::size_type v45;
  std::string::size_type v46;
  std::string::size_type v47;
  std::string::size_type v48;
  std::string *v49;
  void ***v50;
  void *v51;
  unsigned int v52;
  std::string::size_type v53;
  std::string::size_type v54;
  std::string::size_type v55;
  std::string::size_type v56;
  std::string *v57;
  void ***v58;
  void *v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  std::string::size_type v64;
  std::string::size_type v65;
  std::string::size_type v66;
  std::string::size_type v67;
  std::string *v68;
  void ***v69;
  void *v70;
  std::string::size_type v71;
  std::string::size_type v72;
  std::string::size_type v73;
  std::string::size_type v74;
  std::string *v75;
  void ***v76;
  void *v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  std::string::size_type v88;
  std::string::size_type v89;
  std::string::size_type v90;
  std::string::size_type v91;
  std::string *v92;
  void ***v93;
  void *v94;
  std::string::size_type v95;
  std::string::size_type v96;
  std::string::size_type v97;
  std::string::size_type v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  unsigned int v117;
  std::string::size_type v118;
  std::string::size_type v119;
  unsigned int v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  std::string::size_type v133;
  std::string::size_type v134;
  std::string::size_type v135;
  std::string::size_type v136;
  std::string *v137;
  void ***v138;
  void *v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  unint64_t v160;
  unsigned int v161;
  unsigned int v162;
  std::string::size_type v163;
  std::string::size_type v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  int v174;
  std::string::size_type v175;
  std::string::size_type v176;
  std::string::size_type v177;
  std::string::size_type v178;
  std::string *v179;
  void ***v180;
  void *v181;
  uint64_t v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  char v193;
  std::string::size_type v194;
  uint64_t v195;
  std::string::size_type v196;
  std::string *v197;
  void ***v198;
  void *v199;
  uint64_t v200;
  unsigned int v201;
  unsigned int v202;
  std::string::size_type v203;
  std::string::size_type v204;
  std::string::size_type v205;
  std::string::size_type v206;
  std::string *v207;
  void ***v208;
  void *v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  unint64_t v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  uint64_t v219;
  unsigned int v220;
  uint64_t v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  __int16 v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  int v230;
  unsigned int v231;
  unsigned int v232;
  unint64_t v233;
  uint64_t v234;
  __int16 v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  int v239;
  unsigned int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  uint64_t v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  std::string::size_type v248;
  std::string::size_type v249;
  std::string::size_type v250;
  std::string::size_type v251;
  std::string::size_type v252;
  std::string::size_type v253;
  std::string *v254;
  void ***v255;
  void *v256;
  std::string::size_type v257;
  std::string::size_type v258;
  std::string::size_type v259;
  std::string::size_type v260;
  std::string *v261;
  void ***v262;
  void *v263;
  int v264;
  std::string::size_type v265;
  std::string::size_type v266;
  std::string::size_type v267;
  std::string::size_type v268;
  std::string *v269;
  void ***v270;
  void *v271;
  uint64_t v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int v276;
  std::string::size_type v277;
  std::string::size_type v278;
  std::string::size_type v279;
  std::string::size_type v280;
  std::string *v281;
  void ***v282;
  void *v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  int v297;
  unsigned int v298;
  std::string::size_type v299;
  std::string::size_type v300;
  uint64_t v301;
  unint64_t v302;
  std::string::size_type v303;
  std::string::size_type v304;
  std::string::size_type v305;
  std::string::size_type v306;
  std::string *v307;
  void ***v308;
  void *v309;
  int v310;
  std::string::size_type v311;
  std::string::size_type v312;
  std::string::size_type v313;
  std::string::size_type v314;
  std::string *v315;
  void ***v316;
  void *v317;
  int v318;
  uint64_t v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;
  unsigned int v323;
  unsigned int v324;
  int v325;
  std::string::size_type v326;
  std::string::size_type v327;
  std::string::size_type v328;
  std::string::size_type v329;
  std::string *v330;
  void ***v331;
  void *v332;
  unsigned int v333;
  uint64_t v334;
  unsigned int v335;
  unsigned int v336;
  unsigned int v337;
  unsigned int v338;
  __int16 v339;
  unsigned int v340;
  unsigned int v341;
  unsigned int v342;
  unsigned int v343;
  uint64_t v344;
  unsigned int v345;
  unsigned int v346;
  unsigned int v347;
  std::string::size_type v348;
  std::string::size_type v349;
  std::string::size_type v350;
  std::string::size_type v351;
  std::string *v352;
  void ***v353;
  void *v354;
  std::string::size_type v355;
  std::string::size_type v356;
  std::string::size_type v357;
  std::string::size_type v358;
  std::string *v359;
  void ***v360;
  void *v361;
  unsigned int v362;
  unsigned int v363;
  uint64_t v364;
  unsigned int v365;
  unsigned int v366;
  std::string::size_type v367;
  std::string::size_type v368;
  std::string::size_type v369;
  std::string::size_type v370;
  std::string *v371;
  void ***v372;
  void *v373;
  uint64_t v374;
  std::string::size_type v375;
  std::string::size_type v376;
  std::string::size_type v377;
  std::string::size_type v378;
  std::string *v379;
  void ***v380;
  void *v381;
  std::string::size_type v382;
  std::string::size_type v383;
  std::string::size_type v384;
  std::string::size_type v385;
  std::string *v386;
  void ***v387;
  void *v388;
  int v389;
  int v390;
  uint64_t v391;
  unsigned int v392;
  uint64_t v393;
  unsigned int v394;
  unsigned int v395;
  std::string::size_type v396;
  std::string::size_type v397;
  unsigned int v398;
  std::string::size_type v399;
  std::string::size_type v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  unsigned int v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int v407;
  unsigned int v408;
  unsigned int v409;
  unsigned int v410;
  unsigned int v411;
  unsigned int v412;
  unsigned int v413;
  unsigned int v414;
  unsigned int v415;
  unsigned int v416;
  unsigned int v417;
  unsigned int v418;
  std::string::size_type v419;
  std::string::size_type v420;
  std::string::size_type v421;
  std::string::size_type v422;
  std::string *v423;
  void ***v424;
  void *v425;
  std::string::size_type v426;
  std::string::size_type v427;
  std::string::size_type v428;
  std::string::size_type v429;
  std::string *v430;
  void ***v431;
  void *v432;
  unsigned int v433;
  unsigned int v434;
  uint64_t v435;
  unsigned int v436;
  unsigned int v437;
  std::string::size_type v438;
  std::string::size_type v439;
  std::string::size_type v440;
  std::string::size_type v441;
  std::string *v442;
  void ***v443;
  void *v444;
  int v445;
  uint64_t v446;
  unsigned int v447;
  unsigned int v448;
  unsigned int v449;
  unsigned int v450;
  uint64_t v451;
  unsigned int v452;
  unsigned int v453;
  unsigned int v454;
  int v455;
  int v456;
  int v457;
  unsigned int v458;
  _BOOL4 v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int v462;
  std::string::size_type v463;
  std::string::size_type v464;
  std::string::size_type v465;
  std::string::size_type v466;
  std::string *v467;
  void ***v468;
  void *v469;
  std::string::size_type v470;
  std::string::size_type v471;
  std::string::size_type v472;
  std::string::size_type v473;
  std::string *v474;
  void ***v475;
  void *v476;
  std::string::size_type v477;
  std::string::size_type v478;
  std::string::size_type v479;
  std::string::size_type v480;
  std::string *v481;
  void ***v482;
  void *v483;
  std::string::size_type v484;
  std::string::size_type v485;
  std::string::size_type v486;
  std::string::size_type v487;
  std::string *v488;
  void ***v489;
  void *v490;
  uint64_t v491;
  int v492;
  int v493;
  uint64_t v494;
  int v495;
  unsigned int v496;
  int v497;
  uint64_t v498;
  char v499;
  unsigned int v500;
  int v501;
  unsigned int v502;
  unsigned int v503;
  std::string::size_type v504;
  std::string::size_type v505;
  std::string::size_type v506;
  std::string::size_type v507;
  std::string *v508;
  void ***v509;
  uint64_t v510;
  void *v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  void **v515;
  uint64_t *v516;
  char v517;
  int v518;
  size_t v519;
  size_t v520;
  std::string *v521;
  const void *v522;
  char v523;
  const std::string::value_type *v524;
  std::string::size_type v525;
  std::string *v526;
  std::string::size_type v527;
  uint64_t *v528;
  uint64_t *v529;
  uint64_t *v530;
  char v531;
  int v532;
  size_t v533;
  size_t v534;
  std::string *v535;
  const void *v536;
  char v537;
  const std::string::value_type *v538;
  std::string::size_type v539;
  std::string *v540;
  std::string::size_type v541;
  uint64_t *v542;
  uint64_t *v543;
  unint64_t v544;
  unint64_t v545;
  uint64_t (*v546)(uint64_t, __int128 *);
  uint64_t v547;
  unsigned __int8 *v548;
  int v549;
  const char *v550;
  uint64_t v551;
  uint64_t v552;
  char v553;
  int v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  const char *v558;
  uint64_t v559;
  uint64_t *v560;
  int v561;
  uint64_t v562;
  uint64_t *v563;
  uint64_t *v564;
  uint64_t v565;
  char v566;
  int v567;
  uint64_t v568;
  char v569;
  uint64_t v570;
  uint64_t v571;
  signed __int8 v572;
  int v573;
  uint64_t v574;
  const void **v575;
  unsigned __int8 *v576;
  char v577;
  int v578;
  uint64_t v579;
  const std::string *v580;
  std::string::size_type v581;
  uint64_t *v582;
  uint64_t v583;
  uint64_t v584;
  BOOL v585;
  uint64_t v586;
  uint64_t v587;
  std::string::size_type v588;
  const void *v589;
  unint64_t v590;
  std::string::size_type v591;
  std::string::size_type v592;
  char *v593;
  const void *v594;
  unint64_t v595;
  char v596;
  std::string::size_type v597;
  uint64_t v598;
  const char *v599;
  uint64_t v600;
  uint64_t i;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  BOOL v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  char v610;
  int v611;
  uint64_t v612;
  char v613;
  int v614;
  uint64_t v615;
  void **v616;
  BOOL v617;
  char v618;
  uint64_t v619;
  uint64_t v620;
  void **p_data;
  void **v622;
  std::string::size_type v623;
  std::string::size_type v624;
  uint64_t v625;
  uint64_t v626;
  void **v627;
  void **v628;
  std::string::size_type v629;
  std::string::size_type v630;
  uint64_t v631;
  uint64_t v634;
  uint64_t v635;
  __int128 v636;
  __int128 v637;
  unsigned __int8 *v638;
  llvm::Triple *v639;
  uint64_t v640;
  uint64_t (*v641)(uint64_t, __int128 *);
  std::string v642;
  std::string v643;
  std::string v644;
  std::string v645;
  std::string v646;
  std::string v647;
  std::string v648;
  std::string v649;
  std::string v650;
  std::string v651;
  std::string v652;
  std::string v653;
  std::string v654;
  std::string v655;
  std::string v656;
  std::string v657;
  std::string v658;
  std::string v659;
  std::string v660;
  std::string v661;
  std::string v662;
  std::string v663;
  std::string v664;
  std::string v665;
  std::string v666;
  std::string v667;
  std::string v668;
  std::string v669;
  std::string v670;
  std::string v671;
  std::string v672;
  std::string v673;
  std::string v674;
  std::string v675;
  std::string v676;
  std::string v677;
  std::string v678;
  std::string v679;
  std::string __p;
  std::string __n;
  std::string v682;
  std::string *__s2;
  uint64_t v684;
  uint64_t v685;
  _BYTE *v686;
  void *__dst;
  char v688;
  uint64_t v689;
  int v690;
  std::string *v691;
  std::string v692;
  __int16 v693;
  uint64_t v694;

  v10 = a4;
  v694 = *MEMORY[0x24BDAC8D0];
  v14 = a1[4];
  if ((v14 & 0x1800) != 0)
  {
    LOWORD(__dst) = 264;
    LODWORD(__s2) = (v14 >> 11) & 3;
    sub_22E6E094C(a2, 2821, (uint64_t)&__s2, a3, a4);
  }
  else
  {
    sub_22E6E0868(a2, 2762, (uint64_t (*)(uint64_t, _QWORD *))a3, a4);
  }
  if ((*((_BYTE *)a1 + 5) & 0x20) != 0)
  {
    v15 = *(_DWORD *)(a2 + 8);
    if (v15 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v15) = "-cl-kernel-arg-info";
    ++*(_DWORD *)(a2 + 8);
  }
  v16 = a1[3];
  v17 = *(_QWORD *)(a7 + 140);
  v18 = (v17 & 0x1000000000000000) != 0 || (v17 & 0x400000000000000) != 0;
  if (((v16 >> 39) & 1) == v18)
  {
    v19 = a1[4];
    if ((v16 & 0x2000000000000000) == 0)
      goto LABEL_20;
    goto LABEL_17;
  }
  v20 = *(_DWORD *)(a2 + 8);
  if (v20 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v20 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v20) = "-cl-mad-enable";
  ++*(_DWORD *)(a2 + 8);
  v16 = a1[3];
  v19 = a1[4];
  if ((v16 & 0x2000000000000000) != 0)
  {
LABEL_17:
    v21 = *(_DWORD *)(a2 + 8);
    if (v21 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v21 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v21) = "-cl-fp32-correctly-rounded-divide-sqrt";
    ++*(_DWORD *)(a2 + 8);
    v16 = a1[3];
    v19 = a1[4];
  }
LABEL_20:
  if ((v19 & 0x10) == 0)
  {
    if ((v16 & 0x4000000000000000) != 0)
      goto LABEL_29;
    goto LABEL_26;
  }
  v22 = *(_DWORD *)(a2 + 8);
  if (v22 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v22 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v22) = "-cl-uniform-work-group-size";
  ++*(_DWORD *)(a2 + 8);
  if ((a1[3] & 0x4000000000000000) == 0)
  {
LABEL_26:
    v23 = *(_DWORD *)(a2 + 8);
    if (v23 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v23 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v23) = "-fno-hip-fp32-correctly-rounded-divide-sqrt";
    ++*(_DWORD *)(a2 + 8);
  }
LABEL_29:
  v639 = a5;
  v24 = *((_DWORD *)a1 + 12);
  if (v24)
  {
    LOWORD(__dst) = 264;
    LODWORD(__s2) = v24;
    sub_22E721364(a2, "-falign-loops=", a3, v10, 4, (uint64_t *)&__s2);
  }
  if ((*((_BYTE *)a1 + 1) & 1) == 0)
  {
    v25 = *(_DWORD *)(a2 + 8);
    if (v25 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v25 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v25) = "-fno-autolink";
    ++*(_DWORD *)(a2 + 8);
  }
  v638 = a6;
  memset(&v682, 0, sizeof(v682));
  sub_22E618148(&v682, a1[119], a1[120], 0xAAAAAAAAAAAAAAABLL * ((a1[120] - a1[119]) >> 3));
  v26 = v682.__r_.__value_.__r.__words[0];
  v692 = v682;
  memset(&v682, 0, sizeof(v682));
  size = v692.__r_.__value_.__l.__size_;
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  __n.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s2;
  sub_22E3B3CC8((void ***)&__n);
  if (size != v26)
    sub_22E7214C8(a2, "-fembed-offload-object=", a3, v10, 4, (__int128 **)&v692);
  __s2 = &v692;
  sub_22E3B3CC8((void ***)&__s2);
  __s2 = &v682;
  sub_22E3B3CC8((void ***)&__s2);
  v28 = ((unint64_t)a1[12] >> 36) & 3;
  if ((_DWORD)v28)
    sub_22E7216A8(a2, "-fembed-bitcode=", a3, v10, 4, 1u, v28);
  if ((*((_BYTE *)a1 + 33) & 1) != 0)
  {
    v29 = *(_DWORD *)(a2 + 8);
    if (v29 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v29 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v29) = "-mwatch-bitcode-compatibility";
    ++*(_DWORD *)(a2 + 8);
  }
  if (*((char *)a1 + 783) < 0)
    sub_22E3BB2B4(&__p, (void *)a1[95], a1[96]);
  else
    __p = *(std::string *)(a1 + 95);
  __n = __p;
  memset(&__p, 0, sizeof(__p));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v30 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v31 = __n.__r_.__value_.__l.__size_;
  v32 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v33 = __n.__r_.__value_.__l.__size_;
  v640 = v10;
  if (v33)
  {
LABEL_50:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_61;
    }
    v36 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_60:
    sub_22E3BB2B4(&v692, v36, v31);
    v10 = v640;
LABEL_61:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-fprofile-sample-use=", a3, v10, 4, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v30 & 0x80) == 0)
        goto LABEL_67;
      goto LABEL_65;
    }
LABEL_62:
    if ((v30 & 0x80) == 0)
      goto LABEL_67;
LABEL_65:
    v36 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_66;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v32)
      goto LABEL_62;
    p_n = &__n;
    p_s2 = (void ***)&__s2;
    while (p_n->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)p_s2)
    {
      p_n = (std::string *)((char *)p_n + 1);
      p_s2 = (void ***)((char *)p_s2 + 1);
      if (!--v32)
        goto LABEL_62;
    }
    goto LABEL_50;
  }
  v36 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_60;
LABEL_66:
  operator delete(v36);
  v10 = v640;
LABEL_67:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((*((_BYTE *)a1 + 44) & 0x80) != 0)
  {
    v37 = *(_DWORD *)(a2 + 8);
    if (v37 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v37 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v37) = "-fprofile-sample-accurate";
    ++*(_DWORD *)(a2 + 8);
  }
  if (*((char *)a1 + 335) < 0)
    sub_22E3BB2B4(&v679, (void *)a1[39], a1[40]);
  else
    v679 = *(std::string *)((_BYTE *)a1 + 13);
  __n = v679;
  memset(&v679, 0, sizeof(v679));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v38 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v39 = __n.__r_.__value_.__l.__size_;
  v40 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v41 = __n.__r_.__value_.__l.__size_;
  if (v41)
  {
LABEL_80:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_91;
    }
    v44 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_90:
    sub_22E3BB2B4(&v692, v44, v39);
    v10 = v640;
LABEL_91:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-fdebug-compilation-dir=", a3, v10, 4, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v38 & 0x80) == 0)
        goto LABEL_97;
      goto LABEL_95;
    }
LABEL_92:
    if ((v38 & 0x80) == 0)
      goto LABEL_97;
LABEL_95:
    v44 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_96;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v40)
      goto LABEL_92;
    v42 = &__n;
    v43 = (void ***)&__s2;
    while (v42->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v43)
    {
      v42 = (std::string *)((char *)v42 + 1);
      v43 = (void ***)((char *)v43 + 1);
      if (!--v40)
        goto LABEL_92;
    }
    goto LABEL_80;
  }
  v44 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_90;
LABEL_96:
  operator delete(v44);
  v10 = v640;
LABEL_97:
  if (SHIBYTE(v679.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v679.__r_.__value_.__l.__data_);
  if (*((char *)a1 + 359) < 0)
    sub_22E3BB2B4(&v678, (void *)a1[42], a1[43]);
  else
    v678 = *(std::string *)((_BYTE *)a1 + 14);
  __n = v678;
  memset(&v678, 0, sizeof(v678));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v45 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v46 = __n.__r_.__value_.__l.__size_;
  v47 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v48 = __n.__r_.__value_.__l.__size_;
  if (v48)
  {
LABEL_106:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_117;
    }
    v51 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_116:
    sub_22E3BB2B4(&v692, v51, v46);
    v10 = v640;
LABEL_117:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-fcoverage-compilation-dir=", a3, v10, 4, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v45 & 0x80) == 0)
        goto LABEL_123;
      goto LABEL_121;
    }
LABEL_118:
    if ((v45 & 0x80) == 0)
      goto LABEL_123;
LABEL_121:
    v51 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_122;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v47)
      goto LABEL_118;
    v49 = &__n;
    v50 = (void ***)&__s2;
    while (v49->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v50)
    {
      v49 = (std::string *)((char *)v49 + 1);
      v50 = (void ***)((char *)v50 + 1);
      if (!--v47)
        goto LABEL_118;
    }
    goto LABEL_106;
  }
  v51 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_116;
LABEL_122:
  operator delete(v51);
  v10 = v640;
LABEL_123:
  if (SHIBYTE(v678.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v678.__r_.__value_.__l.__data_);
  if ((*((_DWORD *)a1 + 23) & 8) != 0)
  {
    v52 = *(_DWORD *)(a2 + 8);
    if (v52 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v52 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v52) = "-fdebug-info-for-profiling";
    ++*(_DWORD *)(a2 + 8);
  }
  if (*((char *)a1 + 855) < 0)
    sub_22E3BB2B4(&v677, (void *)a1[104], a1[105]);
  else
    v677 = *(std::string *)(a1 + 104);
  __n = v677;
  memset(&v677, 0, sizeof(v677));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v53 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v54 = __n.__r_.__value_.__l.__size_;
  v55 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v56 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v56 = __n.__r_.__value_.__l.__size_;
  if (v56)
  {
LABEL_136:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_147;
    }
    v59 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_146:
    sub_22E3BB2B4(&v692, v59, v54);
    v10 = v640;
LABEL_147:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-fprofile-remapping-file=", a3, v10, 4, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v53 & 0x80) == 0)
        goto LABEL_153;
      goto LABEL_151;
    }
LABEL_148:
    if ((v53 & 0x80) == 0)
      goto LABEL_153;
LABEL_151:
    v59 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_152;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v55)
      goto LABEL_148;
    v57 = &__n;
    v58 = (void ***)&__s2;
    while (v57->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v58)
    {
      v57 = (std::string *)((char *)v57 + 1);
      v58 = (void ***)((char *)v58 + 1);
      if (!--v55)
        goto LABEL_148;
    }
    goto LABEL_136;
  }
  v59 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_146;
LABEL_152:
  operator delete(v59);
  v10 = v640;
LABEL_153:
  if (SHIBYTE(v677.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v677.__r_.__value_.__l.__data_);
  if ((*((_BYTE *)a1 + 34) & 1) != 0)
  {
    v60 = *(_DWORD *)(a2 + 8);
    if (v60 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v60 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v60) = "-fcoverage-mapping";
    ++*(_DWORD *)(a2 + 8);
  }
  v61 = *a1;
  if ((*a1 & 0x80000000000) != 0)
  {
    v62 = *(_DWORD *)(a2 + 8);
    if (v62 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v62 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v62) = "-fprofile-arcs";
    ++*(_DWORD *)(a2 + 8);
    v61 = *a1;
  }
  if ((v61 & 0x100000000000) != 0)
  {
    v63 = *(_DWORD *)(a2 + 8);
    if (v63 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v63 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v63) = "-ftest-coverage";
    ++*(_DWORD *)(a2 + 8);
  }
  if (*((char *)a1 + 255) < 0)
    sub_22E3BB2B4(&v676, (void *)a1[29], a1[30]);
  else
    v676 = *(std::string *)(a1 + 29);
  __n = v676;
  memset(&v676, 0, sizeof(v676));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v64 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v65 = __n.__r_.__value_.__l.__size_;
  v66 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v67 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v67 = __n.__r_.__value_.__l.__size_;
  if (v67)
  {
LABEL_174:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_185;
    }
    v70 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_184:
    sub_22E3BB2B4(&v692, v70, v65);
    v10 = v640;
LABEL_185:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-fprofile-filter-files=", a3, v10, 4, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v64 & 0x80) == 0)
        goto LABEL_191;
      goto LABEL_189;
    }
LABEL_186:
    if ((v64 & 0x80) == 0)
      goto LABEL_191;
LABEL_189:
    v70 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_190;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v66)
      goto LABEL_186;
    v68 = &__n;
    v69 = (void ***)&__s2;
    while (v68->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v69)
    {
      v68 = (std::string *)((char *)v68 + 1);
      v69 = (void ***)((char *)v69 + 1);
      if (!--v66)
        goto LABEL_186;
    }
    goto LABEL_174;
  }
  v70 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_184;
LABEL_190:
  operator delete(v70);
  v10 = v640;
LABEL_191:
  if (SHIBYTE(v676.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v676.__r_.__value_.__l.__data_);
  if (*((char *)a1 + 279) < 0)
    sub_22E3BB2B4(&v675, (void *)a1[32], a1[33]);
  else
    v675 = *(std::string *)(a1 + 32);
  __n = v675;
  memset(&v675, 0, sizeof(v675));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v71 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v72 = __n.__r_.__value_.__l.__size_;
  v73 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v74 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v74 = __n.__r_.__value_.__l.__size_;
  if (v74)
  {
LABEL_200:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_211;
    }
    v77 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_210:
    sub_22E3BB2B4(&v692, v77, v72);
    v10 = v640;
LABEL_211:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-fprofile-exclude-files=", a3, v10, 4, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v71 & 0x80) == 0)
        goto LABEL_217;
      goto LABEL_215;
    }
LABEL_212:
    if ((v71 & 0x80) == 0)
      goto LABEL_217;
LABEL_215:
    v77 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_216;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v73)
      goto LABEL_212;
    v75 = &__n;
    v76 = (void ***)&__s2;
    while (v75->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v76)
    {
      v75 = (std::string *)((char *)v75 + 1);
      v76 = (void ***)((char *)v76 + 1);
      if (!--v73)
        goto LABEL_212;
    }
    goto LABEL_200;
  }
  v77 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_210;
LABEL_216:
  operator delete(v77);
  v10 = v640;
LABEL_217:
  if (SHIBYTE(v675.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v675.__r_.__value_.__l.__data_);
  if ((*((_BYTE *)a1 + 33) & 0x80) != 0)
  {
    v78 = *(_DWORD *)(a2 + 8);
    if (v78 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v78 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v78) = "-fprofile-update=";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((*((_DWORD *)a1 + 23) & 0x10) != 0)
  {
    v79 = *(_DWORD *)(a2 + 8);
    if (v79 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v79 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v79) = "-fpseudo-probe-for-profiling";
    ++*(_DWORD *)(a2 + 8);
  }
  v80 = (*((unsigned __int16 *)a1 + 52) >> 9) & 3;
  if (v80 != 1)
    sub_22E7216A8(a2, "-fswift-async-fp=", a3, v10, 4, 2u, v80);
  if ((*((_DWORD *)a1 + 23) & 0x1000) != 0)
  {
    v81 = *(_DWORD *)(a2 + 8);
    if (v81 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v81 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v81) = "-faddrsig";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((*((_BYTE *)a1 + 30) & 2) == 0)
  {
    v82 = *(_DWORD *)(a2 + 8);
    if (v82 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v82 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v82) = "-fcommon";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((*((_DWORD *)a1 + 23) & 1) != 0)
  {
    v83 = *(_DWORD *)(a2 + 8);
    if (v83 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v83 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v83) = "-fdiagnostics-show-hotness";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((*((_BYTE *)a1 + 30) & 4) != 0)
  {
    v84 = *(_DWORD *)(a2 + 8);
    if (v84 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v84 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v84) = "-fno-dwarf-directory-asm";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((*((_BYTE *)a1 + 5) & 0x40) != 0)
  {
    v85 = *(_DWORD *)(a2 + 8);
    if (v85 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v85 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v85) = "-femulated-tls";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((*((_BYTE *)a1 + 44) & 4) != 0)
  {
    v86 = *(_DWORD *)(a2 + 8);
    if (v86 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v86 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v86) = "-fno-jump-tables";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((*((_DWORD *)a1 + 23) & 0x2000) != 0)
  {
    v87 = *(_DWORD *)(a2 + 8);
    if (v87 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v87 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v87) = "-fkeep-static-consts";
    ++*(_DWORD *)(a2 + 8);
  }
  if (*((char *)a1 + 1071) < 0)
    sub_22E3BB2B4(&v674, (void *)a1[131], a1[132]);
  else
    v674 = *(std::string *)(a1 + 131);
  __n = v674;
  memset(&v674, 0, sizeof(v674));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v88 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v89 = __n.__r_.__value_.__l.__size_;
  v90 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v91 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v91 = __n.__r_.__value_.__l.__size_;
  if (v91)
  {
LABEL_264:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_275;
    }
    v94 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_274:
    sub_22E3BB2B4(&v692, v94, v89);
    v10 = v640;
LABEL_275:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-fsymbol-partition=", a3, v10, 4, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v88 & 0x80) == 0)
        goto LABEL_281;
      goto LABEL_279;
    }
LABEL_276:
    if ((v88 & 0x80) == 0)
      goto LABEL_281;
LABEL_279:
    v94 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_280;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v90)
      goto LABEL_276;
    v92 = &__n;
    v93 = (void ***)&__s2;
    while (v92->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v93)
    {
      v92 = (std::string *)((char *)v92 + 1);
      v93 = (void ***)((char *)v93 + 1);
      if (!--v90)
        goto LABEL_276;
    }
    goto LABEL_264;
  }
  v94 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_274;
LABEL_280:
  operator delete(v94);
  v10 = v640;
LABEL_281:
  v641 = a3;
  if (SHIBYTE(v674.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v674.__r_.__value_.__l.__data_);
  memset(&v673, 0, sizeof(v673));
  sub_22E618148(&v673, a1[190], a1[191], 0xAAAAAAAAAAAAAAABLL * ((a1[191] - a1[190]) >> 3));
  v95 = v673.__r_.__value_.__r.__words[0];
  v692 = v673;
  memset(&v673, 0, sizeof(v673));
  v96 = v692.__r_.__value_.__l.__size_;
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  __n.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s2;
  sub_22E3B3CC8((void ***)&__n);
  if (v96 != v95)
    sub_22E7214C8(a2, "-fsanitize-coverage-allowlist=", v641, v10, 4, (__int128 **)&v692);
  __s2 = &v692;
  sub_22E3B3CC8((void ***)&__s2);
  __s2 = &v673;
  sub_22E3B3CC8((void ***)&__s2);
  memset(&v672, 0, sizeof(v672));
  sub_22E618148(&v672, a1[199], a1[200], 0xAAAAAAAAAAAAAAABLL * ((a1[200] - a1[199]) >> 3));
  v97 = v672.__r_.__value_.__r.__words[0];
  v692 = v672;
  memset(&v672, 0, sizeof(v672));
  v98 = v692.__r_.__value_.__l.__size_;
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  __n.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s2;
  sub_22E3B3CC8((void ***)&__n);
  if (v98 != v97)
    sub_22E7214C8(a2, "-fsanitize-coverage-ignorelist=", v641, v10, 4, (__int128 **)&v692);
  __s2 = &v692;
  sub_22E3B3CC8((void ***)&__s2);
  __s2 = &v672;
  sub_22E3B3CC8((void ***)&__s2);
  v99 = a1[4];
  if (((v99 >> 27) & 3) != 0)
  {
    LOWORD(__dst) = 264;
    LODWORD(__s2) = (v99 >> 27) & 3;
    sub_22E721364(a2, "-fsanitize-memory-track-origins=", v641, v10, 4, (uint64_t *)&__s2);
    v99 = a1[4];
  }
  if ((v99 & 0x40000000) != 0)
  {
    v100 = *(_DWORD *)(a2 + 8);
    if (v100 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v100 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v100) = "-fsanitize-memory-use-after-dtor";
    ++*(_DWORD *)(a2 + 8);
    v99 = a1[4];
  }
  if ((v99 & 0x800000) != 0)
  {
    v101 = *(_DWORD *)(a2 + 8);
    if (v101 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v101 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v101) = "-fsanitize-address-use-after-scope";
    ++*(_DWORD *)(a2 + 8);
  }
  v102 = ((unint64_t)a1[12] >> 49) & 3;
  if ((_DWORD)v102 != 1)
    sub_22E7216A8(a2, "-fsanitize-address-use-after-return=", v641, v10, 4, 0xAu, v102);
  v103 = a1[4];
  if ((v103 & 0x1000000) != 0)
  {
    v104 = *(_DWORD *)(a2 + 8);
    if (v104 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v104 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v104) = "-fsanitize-address-poison-custom-array-cookie";
    ++*(_DWORD *)(a2 + 8);
    v103 = a1[4];
    if ((v103 & 0x2000000) == 0)
    {
LABEL_301:
      if ((v103 & 0x4000000) == 0)
        goto LABEL_312;
      goto LABEL_309;
    }
  }
  else if ((v103 & 0x2000000) == 0)
  {
    goto LABEL_301;
  }
  v105 = *(_DWORD *)(a2 + 8);
  if (v105 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v105 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v105) = "-fsanitize-address-globals-dead-stripping";
  ++*(_DWORD *)(a2 + 8);
  if ((a1[4] & 0x4000000) != 0)
  {
LABEL_309:
    v106 = *(_DWORD *)(a2 + 8);
    if (v106 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v106 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v106) = "-fsanitize-address-use-odr-indicator";
    ++*(_DWORD *)(a2 + 8);
  }
LABEL_312:
  v107 = ((unint64_t)a1[12] >> 51) & 3;
  if ((_DWORD)v107 != 1)
    sub_22E7216A8(a2, "-fsanitize-address-destructor=", v641, v10, 4, 0xBu, v107);
  v108 = a1[4];
  if ((v108 & 0x20000000) != 0)
  {
    v109 = *(_DWORD *)(a2 + 8);
    if (v109 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v109 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v109) = "-fsanitize-memory-param-retval";
    ++*(_DWORD *)(a2 + 8);
    v108 = a1[4];
    if ((v108 & 0x100000000) == 0)
    {
LABEL_316:
      if ((v108 & 0x80000000) == 0)
        goto LABEL_317;
      goto LABEL_327;
    }
  }
  else if ((v108 & 0x100000000) == 0)
  {
    goto LABEL_316;
  }
  v110 = *(_DWORD *)(a2 + 8);
  if (v110 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v110 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v110) = "-fsanitize-minimal-runtime";
  ++*(_DWORD *)(a2 + 8);
  v108 = a1[4];
  if ((v108 & 0x80000000) == 0)
  {
LABEL_317:
    if ((v108 & 0x200000000) == 0)
      goto LABEL_318;
    goto LABEL_330;
  }
LABEL_327:
  v111 = *(_DWORD *)(a2 + 8);
  if (v111 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v111 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v111) = "-fsanitize-cfi-cross-dso";
  ++*(_DWORD *)(a2 + 8);
  v108 = a1[4];
  if ((v108 & 0x200000000) == 0)
  {
LABEL_318:
    if ((v108 & 0x400000000) == 0)
      goto LABEL_319;
    goto LABEL_333;
  }
LABEL_330:
  v112 = *(_DWORD *)(a2 + 8);
  if (v112 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v112 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v112) = "-fsanitize-cfi-icall-generalize-pointers";
  ++*(_DWORD *)(a2 + 8);
  v108 = a1[4];
  if ((v108 & 0x400000000) == 0)
  {
LABEL_319:
    if ((v108 & 0x10000000000000) == 0)
      goto LABEL_339;
    goto LABEL_336;
  }
LABEL_333:
  v113 = *(_DWORD *)(a2 + 8);
  if (v113 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v113 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v113) = "-fsanitize-cfi-canonical-jump-tables";
  ++*(_DWORD *)(a2 + 8);
  if ((a1[4] & 0x10000000000000) != 0)
  {
LABEL_336:
    v114 = *(_DWORD *)(a2 + 8);
    if (v114 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v114 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v114) = "-fsanitize-stats";
    ++*(_DWORD *)(a2 + 8);
  }
LABEL_339:
  v115 = *((_DWORD *)a1 + 22);
  if (v115)
  {
    LOWORD(__dst) = 265;
    LODWORD(__s2) = v115;
    sub_22E721364(a2, "-fsanitize-undefined-strip-path-components=", v641, v10, 4, (uint64_t *)&__s2);
  }
  if ((a1[4] & 8) == 0)
  {
    v116 = *(_DWORD *)(a2 + 8);
    if (v116 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v116 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v116) = "-fno-strict-float-cast-overflow";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((a1[3] & 0x1000000000000000) != 0)
  {
    v117 = *(_DWORD *)(a2 + 8);
    if (v117 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v117 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v117) = "-fno-delete-null-pointer-checks";
    ++*(_DWORD *)(a2 + 8);
  }
  memset(&v671, 0, sizeof(v671));
  sub_22E618148(&v671, a1[152], a1[153], 0xAAAAAAAAAAAAAAABLL * ((a1[153] - a1[152]) >> 3));
  v118 = v671.__r_.__value_.__r.__words[0];
  v692 = v671;
  memset(&v671, 0, sizeof(v671));
  v119 = v692.__r_.__value_.__l.__size_;
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  __n.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s2;
  sub_22E3B3CC8((void ***)&__n);
  if (v119 != v118)
    sub_22E7214C8(a2, "-frewrite-map-file=", v641, v10, 4, (__int128 **)&v692);
  __s2 = &v692;
  sub_22E3B3CC8((void ***)&__s2);
  __s2 = &v671;
  sub_22E3B3CC8((void ***)&__s2);
  if ((*((_BYTE *)a1 + 28) & 2) != 0)
  {
    v120 = *(_DWORD *)(a2 + 8);
    if (v120 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v120 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v120) = "-fjmc";
    ++*(_DWORD *)(a2 + 8);
  }
  v121 = *a1;
  if ((*a1 & 0x4000000000000) != 0)
  {
    v122 = *(_DWORD *)(a2 + 8);
    if (v122 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v122 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v122) = "-finstrument-functions";
    ++*(_DWORD *)(a2 + 8);
    v121 = *a1;
    if ((*a1 & 0x8000000000000) == 0)
    {
LABEL_357:
      if ((v121 & 0x10000000000000) == 0)
        goto LABEL_368;
      goto LABEL_365;
    }
  }
  else if ((v121 & 0x8000000000000) == 0)
  {
    goto LABEL_357;
  }
  v123 = *(_DWORD *)(a2 + 8);
  if (v123 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v123 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v123) = "-finstrument-functions-after-inlining";
  ++*(_DWORD *)(a2 + 8);
  if ((*a1 & 0x10000000000000) != 0)
  {
LABEL_365:
    v124 = *(_DWORD *)(a2 + 8);
    if (v124 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v124 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v124) = "-finstrument-function-entry-bare";
    ++*(_DWORD *)(a2 + 8);
  }
LABEL_368:
  v125 = *((_DWORD *)a1 + 2);
  if (v125 != 200)
  {
    LOWORD(__dst) = 264;
    LODWORD(__s2) = v125;
    sub_22E721364(a2, "-fxray-instruction-threshold=", v641, v10, 11, (uint64_t *)&__s2);
  }
  v126 = *a1;
  if ((*a1 & 0x2000000000000000) != 0)
  {
    v127 = *(_DWORD *)(a2 + 8);
    if (v127 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v127 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v127) = "-fxray-ignore-loops";
    ++*(_DWORD *)(a2 + 8);
    v126 = *a1;
  }
  if ((v126 & 0x4000000000000000) == 0)
  {
    v128 = *(_DWORD *)(a2 + 8);
    if (v128 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v128 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v128) = "-fno-xray-function-index";
    ++*(_DWORD *)(a2 + 8);
  }
  v129 = HIDWORD(a1[1]);
  if ((_DWORD)v129 != 1)
  {
    LOWORD(__dst) = 264;
    LODWORD(__s2) = v129;
    sub_22E721364(a2, "-fxray-function-groups=", v641, v10, 4, (uint64_t *)&__s2);
  }
  v130 = a1[4];
  v131 = a1[2];
  if ((_DWORD)v131)
  {
    LOWORD(__dst) = 264;
    LODWORD(__s2) = v131;
    sub_22E721364(a2, "-fxray-selected-function-group=", v641, v10, 4, (uint64_t *)&__s2);
    v130 = a1[4];
  }
  if ((v130 & 0x100000000000000) != 0)
  {
    v132 = *(_DWORD *)(a2 + 8);
    if (v132 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v132 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v132) = "-ffine-grained-bitfield-accesses";
    ++*(_DWORD *)(a2 + 8);
  }
  if (*((char *)a1 + 903) < 0)
    sub_22E3BB2B4(&v670, (void *)a1[110], a1[111]);
  else
    v670 = *(std::string *)(a1 + 110);
  __n = v670;
  memset(&v670, 0, sizeof(v670));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v133 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v134 = __n.__r_.__value_.__l.__size_;
  v135 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v136 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v136 = __n.__r_.__value_.__l.__size_;
  if (v136)
  {
LABEL_393:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_404;
    }
    v139 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_403:
    sub_22E3BB2B4(&v692, v139, v134);
    v10 = v640;
LABEL_404:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-fthin-link-bitcode=", v641, v10, 4, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v133 & 0x80) == 0)
        goto LABEL_410;
      goto LABEL_408;
    }
LABEL_405:
    if ((v133 & 0x80) == 0)
      goto LABEL_410;
LABEL_408:
    v139 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_409;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v135)
      goto LABEL_405;
    v137 = &__n;
    v138 = (void ***)&__s2;
    while (v137->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v138)
    {
      v137 = (std::string *)((char *)v137 + 1);
      v138 = (void ***)((char *)v138 + 1);
      if (!--v135)
        goto LABEL_405;
    }
    goto LABEL_393;
  }
  v139 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_403;
LABEL_409:
  operator delete(v139);
  v10 = v640;
LABEL_410:
  if (SHIBYTE(v670.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v670.__r_.__value_.__l.__data_);
  v140 = a1[3];
  if ((v140 & 0x200000000000) != 0)
  {
    v141 = *(_DWORD *)(a2 + 8);
    if (v141 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v141 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v141) = "-fmerge-all-constants";
    ++*(_DWORD *)(a2 + 8);
    v140 = a1[3];
  }
  if ((v140 & 0x1000000000000) != 0)
  {
    v142 = *(_DWORD *)(a2 + 8);
    if (v142 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v142 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v142) = "-fms-volatile";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((*(_BYTE *)a1 & 0x80) == 0)
  {
    v143 = *(_DWORD *)(a2 + 8);
    if (v143 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v143 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v143) = "-fno-assume-sane-operator-new";
    ++*(_DWORD *)(a2 + 8);
  }
  v144 = (*((unsigned __int16 *)a1 + 52) >> 2) & 7;
  if (v144)
    sub_22E7216A8(a2, "-fveclib=", v641, v10, 4, 0xEu, v144);
  v145 = *a1;
  if ((*a1 & 0x20000) == 0)
  {
    v146 = *(_DWORD *)(a2 + 8);
    if (v146 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v146 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v146) = "-fno-use-cxa-atexit";
    ++*(_DWORD *)(a2 + 8);
    v145 = *a1;
  }
  if ((v145 & 8) == 0)
  {
    v147 = *(_DWORD *)(a2 + 8);
    if (v147 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v147 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v147) = "-fno-verbose-asm";
    ++*(_DWORD *)(a2 + 8);
  }
  v148 = a1[4];
  if ((v148 & 0x40) == 0)
  {
    v149 = *(_DWORD *)(a2 + 8);
    if (v149 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v149 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v149) = "-fno-objc-convert-messages-to-runtime-calls";
    ++*(_DWORD *)(a2 + 8);
    v148 = a1[4];
  }
  if ((v148 & 0x80) != 0)
  {
    v150 = *(_DWORD *)(a2 + 8);
    if (v150 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v150 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v150) = "-fobjc-msgsend-selector-stubs";
    ++*(_DWORD *)(a2 + 8);
  }
  v151 = *a1;
  if ((*a1 & 0x200) != 0)
  {
    v152 = *(_DWORD *)(a2 + 8);
    if (v152 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v152 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v152) = "-fobjc-arc-exceptions";
    ++*(_DWORD *)(a2 + 8);
    v151 = *a1;
    if ((*a1 & 0x400) == 0)
    {
LABEL_444:
      if ((v151 & 0x800) == 0)
        goto LABEL_445;
      goto LABEL_453;
    }
  }
  else if ((v151 & 0x400) == 0)
  {
    goto LABEL_444;
  }
  v153 = *(_DWORD *)(a2 + 8);
  if (v153 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v153 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v153) = "-fin-descriptor-block-flags";
  ++*(_DWORD *)(a2 + 8);
  v151 = *a1;
  if ((*a1 & 0x800) == 0)
  {
LABEL_445:
    if ((v151 & 0x1000) == 0)
      goto LABEL_459;
    goto LABEL_456;
  }
LABEL_453:
  v154 = *(_DWORD *)(a2 + 8);
  if (v154 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v154 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v154) = "-fgeneric-block-helpers";
  ++*(_DWORD *)(a2 + 8);
  if ((*a1 & 0x1000) != 0)
  {
LABEL_456:
    v155 = *(_DWORD *)(a2 + 8);
    if (v155 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v155 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v155) = "-fgeneric-block-helpers-use-extended-layout";
    ++*(_DWORD *)(a2 + 8);
  }
LABEL_459:
  if ((*((_BYTE *)a1 + 33) & 4) != 0)
  {
    v156 = *(_DWORD *)(a2 + 8);
    if (v156 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v156 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v156) = "-fobjc-avoid-heapify-local-blocks";
    ++*(_DWORD *)(a2 + 8);
  }
  v157 = *a1;
  if ((*a1 & 0x2000000000) != 0)
  {
    v158 = *(_DWORD *)(a2 + 8);
    if (v158 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v158 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v158) = "-fno-optimize-sibling-calls";
    ++*(_DWORD *)(a2 + 8);
    v157 = *a1;
  }
  if ((v157 & 0x10000000000) != 0)
  {
    v159 = *(_DWORD *)(a2 + 8);
    if (v159 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v159 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v159) = "-fno-escaping-block-tail-calls";
    ++*(_DWORD *)(a2 + 8);
  }
  v160 = HIDWORD(a1[2]);
  if ((_DWORD)v160)
  {
    LOWORD(__dst) = 264;
    LODWORD(__s2) = v160;
    sub_22E721364(a2, "-fpatchable-function-entry=", v641, v10, 4, (uint64_t *)&__s2);
  }
  if ((a1[3] & 0x100000000) != 0)
  {
    v161 = *(_DWORD *)(a2 + 8);
    if (v161 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v161 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v161) = "-fms-hotpatch";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((*((_DWORD *)a1 + 23) & 0x200) != 0)
  {
    v162 = *(_DWORD *)(a2 + 8);
    if (v162 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v162 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v162) = "-fno-plt";
    ++*(_DWORD *)(a2 + 8);
  }
  memset(&v669, 0, sizeof(v669));
  sub_22E618148(&v669, a1[187], a1[188], 0xAAAAAAAAAAAAAAABLL * ((a1[188] - a1[187]) >> 3));
  v163 = v669.__r_.__value_.__r.__words[0];
  v692 = v669;
  memset(&v669, 0, sizeof(v669));
  v164 = v692.__r_.__value_.__l.__size_;
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  __n.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s2;
  sub_22E3B3CC8((void ***)&__n);
  if (v164 != v163)
    sub_22E7214C8(a2, "-fpass-plugin=", v641, v10, 4, (__int128 **)&v692);
  __s2 = &v692;
  sub_22E3B3CC8((void ***)&__s2);
  __s2 = &v669;
  sub_22E3B3CC8((void ***)&__s2);
  if ((*(_BYTE *)a1 & 0x40) == 0)
  {
    v165 = *(_DWORD *)(a2 + 8);
    if (v165 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v165 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v165) = "-fno-preserve-as-comments";
    ++*(_DWORD *)(a2 + 8);
  }
  v166 = a1[3];
  if ((v166 & 0x80000000000000) == 0)
  {
    v167 = a1[4];
    if ((v166 & 0x200000000000000) == 0)
      goto LABEL_496;
    goto LABEL_493;
  }
  v168 = *(_DWORD *)(a2 + 8);
  if (v168 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v168 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v168) = "-fsplit-stack";
  ++*(_DWORD *)(a2 + 8);
  v167 = a1[4];
  if ((a1[3] & 0x200000000000000) != 0)
  {
LABEL_493:
    v169 = *(_DWORD *)(a2 + 8);
    if (v169 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v169 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v169) = "-fstack-clash-protection";
    ++*(_DWORD *)(a2 + 8);
    v167 = a1[4];
  }
LABEL_496:
  if ((v167 & 0x200000000000000) != 0)
  {
    v170 = *(_DWORD *)(a2 + 8);
    if (v170 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v170 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v170) = "-fstrict-enums";
    ++*(_DWORD *)(a2 + 8);
    v167 = a1[4];
    if ((v167 & 0x400000000000000) == 0)
    {
LABEL_498:
      if ((v167 & 0x800000000000000) == 0)
        goto LABEL_499;
      goto LABEL_507;
    }
  }
  else if ((v167 & 0x400000000000000) == 0)
  {
    goto LABEL_498;
  }
  v171 = *(_DWORD *)(a2 + 8);
  if (v171 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v171 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v171) = "-fstrict-vtable-pointers";
  ++*(_DWORD *)(a2 + 8);
  v167 = a1[4];
  if ((v167 & 0x800000000000000) == 0)
  {
LABEL_499:
    if ((v167 & 0x1000000000000000) == 0)
      goto LABEL_513;
    goto LABEL_510;
  }
LABEL_507:
  v172 = *(_DWORD *)(a2 + 8);
  if (v172 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v172 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v172) = "-ftime-report";
  ++*(_DWORD *)(a2 + 8);
  if ((a1[4] & 0x1000000000000000) != 0)
  {
LABEL_510:
    v173 = *(_DWORD *)(a2 + 8);
    if (v173 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v173 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v173) = "-ftime-report=";
    ++*(_DWORD *)(a2 + 8);
  }
LABEL_513:
  v174 = (*((unsigned __int16 *)a1 + 52) >> 5) & 3;
  if (v174)
    sub_22E7216A8(a2, "-ftls-model=", v641, v10, 4, 0x11u, v174);
  if (*((char *)a1 + 687) < 0)
    sub_22E3BB2B4(&v668, (void *)a1[83], a1[84]);
  else
    v668 = *(std::string *)(a1 + 83);
  __n = v668;
  memset(&v668, 0, sizeof(v668));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v175 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v176 = __n.__r_.__value_.__l.__size_;
  v177 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v178 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v178 = __n.__r_.__value_.__l.__size_;
  if (v178)
  {
LABEL_522:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_533;
    }
    v181 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_532:
    sub_22E3BB2B4(&v692, v181, v176);
    v10 = v640;
LABEL_533:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-ftrap-function=", v641, v10, 4, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v175 & 0x80) == 0)
        goto LABEL_539;
      goto LABEL_537;
    }
LABEL_534:
    if ((v175 & 0x80) == 0)
      goto LABEL_539;
LABEL_537:
    v181 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_538;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v177)
      goto LABEL_534;
    v179 = &__n;
    v180 = (void ***)&__s2;
    while (v179->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v180)
    {
      v179 = (std::string *)((char *)v179 + 1);
      v180 = (void ***)((char *)v180 + 1);
      if (!--v177)
        goto LABEL_534;
    }
    goto LABEL_522;
  }
  v181 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_532;
LABEL_538:
  operator delete(v181);
  v10 = v640;
LABEL_539:
  if (SHIBYTE(v668.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v668.__r_.__value_.__l.__data_);
  v182 = a1[5];
  if ((v182 & 0x10000000000) != 0)
  {
    v183 = *(_DWORD *)(a2 + 8);
    if (v183 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v183 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v183) = "-ftrap-function-returns";
    ++*(_DWORD *)(a2 + 8);
    v182 = a1[5];
  }
  if ((v182 & 0x200000000) != 0)
  {
    v184 = *(_DWORD *)(a2 + 8);
    if (v184 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v184 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v184) = "-freroll-loops";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((*((_BYTE *)a1 + 2) & 4) != 0)
  {
    v185 = *(_DWORD *)(a2 + 8);
    if (v185 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v185 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v185) = "-fregister-global-dtors-with-atexit";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((*((_BYTE *)a1 + 45) & 0x10) == 0)
  {
    v186 = *(_DWORD *)(a2 + 8);
    if (v186 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v186 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v186) = "-fno-use-init-array";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((a1[8] & 0x200) != 0)
  {
    v187 = *(_DWORD *)(a2 + 8);
    if (v187 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v187 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v187) = "-fwhole-program-vtables";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((*((_BYTE *)a1 + 29) & 8) != 0)
  {
    v188 = *(_DWORD *)(a2 + 8);
    if (v188 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v188 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v188) = "-fsplit-lto-unit";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((*((_DWORD *)a1 + 23) & 0x800) != 0)
  {
    v189 = *(_DWORD *)(a2 + 8);
    if (v189 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v189 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v189) = "-fforce-emit-vtables";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((a1[8] & 0x400) != 0)
  {
    v190 = *(_DWORD *)(a2 + 8);
    if (v190 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v190 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v190) = "-fvirtual-function-elimination";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((a1[4] & 0x20) != 0)
  {
    v191 = *(_DWORD *)(a2 + 8);
    if (v191 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v191 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v191) = "-fno-zero-initialized-in-bss";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((*((_BYTE *)a1 + 6) & 2) != 0)
  {
    v192 = *(_DWORD *)(a2 + 8);
    if (v192 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v192 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v192) = "-ffunction-sections";
    ++*(_DWORD *)(a2 + 8);
  }
  if (*((char *)a1 + 135) < 0)
    sub_22E3BB2B4(&v667, (void *)a1[14], a1[15]);
  else
    v667 = *(std::string *)(a1 + 14);
  __n = v667;
  memset(&v667, 0, sizeof(v667));
  HIBYTE(v685) = 4;
  strcpy((char *)&__s2, "none");
  v193 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v194 = __n.__r_.__value_.__l.__size_;
  v195 = *((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v196 = *((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x7F;
  else
    v196 = __n.__r_.__value_.__l.__size_;
  if (v196 != 4)
  {
LABEL_594:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_599;
    }
    v199 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_598:
    sub_22E3BB2B4(&v692, v199, v194);
    v10 = v640;
LABEL_599:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-fbasic-block-sections=", v641, v10, 4, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v193 & 0x80) == 0)
        goto LABEL_605;
      goto LABEL_603;
    }
LABEL_600:
    if ((v193 & 0x80) == 0)
      goto LABEL_605;
LABEL_603:
    v199 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_604;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x7F) == 0)
      goto LABEL_600;
    v197 = &__n;
    v198 = (void ***)&__s2;
    while (v197->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v198)
    {
      v197 = (std::string *)((char *)v197 + 1);
      v198 = (void ***)((char *)v198 + 1);
      if (!--v195)
        goto LABEL_600;
    }
    goto LABEL_594;
  }
  v199 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_598;
LABEL_604:
  operator delete(v199);
  v10 = v640;
LABEL_605:
  if (SHIBYTE(v667.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v667.__r_.__value_.__l.__data_);
  v200 = *a1;
  if ((*a1 & 0x100000) != 0)
  {
    v201 = *(_DWORD *)(a2 + 8);
    if (v201 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v201 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v201) = "-fdata-sections";
    ++*(_DWORD *)(a2 + 8);
    v200 = *a1;
  }
  if ((v200 & 0x200000000000000) != 0)
  {
    v202 = *(_DWORD *)(a2 + 8);
    if (v202 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v202 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v202) = "-fstack-size-section";
    ++*(_DWORD *)(a2 + 8);
  }
  if (*((char *)a1 + 1639) < 0)
    sub_22E3BB2B4(&v666, (void *)a1[202], a1[203]);
  else
    v666 = *(std::string *)(a1 + 202);
  __n = v666;
  memset(&v666, 0, sizeof(v666));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v203 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v204 = __n.__r_.__value_.__l.__size_;
  v205 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v206 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v206 = __n.__r_.__value_.__l.__size_;
  if (v206)
  {
LABEL_622:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_633;
    }
    v209 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_632:
    sub_22E3BB2B4(&v692, v209, v204);
    v10 = v640;
LABEL_633:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-stack-usage-file", v641, v10, 6, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v203 & 0x80) == 0)
        goto LABEL_639;
      goto LABEL_637;
    }
LABEL_634:
    if ((v203 & 0x80) == 0)
      goto LABEL_639;
LABEL_637:
    v209 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_638;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v205)
      goto LABEL_634;
    v207 = &__n;
    v208 = (void ***)&__s2;
    while (v207->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v208)
    {
      v207 = (std::string *)((char *)v207 + 1);
      v208 = (void ***)((char *)v208 + 1);
      if (!--v205)
        goto LABEL_634;
    }
    goto LABEL_622;
  }
  v209 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_632;
LABEL_638:
  operator delete(v209);
  v10 = v640;
LABEL_639:
  if (SHIBYTE(v666.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v666.__r_.__value_.__l.__data_);
  if ((*((_BYTE *)a1 + 2) & 0x40) != 0)
  {
    v210 = *(_DWORD *)(a2 + 8);
    if (v210 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v210 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v210) = "-funique-basic-block-section-names";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((*((_BYTE *)a1 + 31) & 0x80) != 0)
  {
    v211 = *(_DWORD *)(a2 + 8);
    if (v211 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v211 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v211) = "-funique-internal-linkage-names";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((*((_BYTE *)a1 + 2) & 0x20) == 0)
  {
    v212 = *(_DWORD *)(a2 + 8);
    if (v212 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v212 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v212) = "-fno-unique-section-names";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((a1[4] & 1) != 0)
  {
    v213 = *(_DWORD *)(a2 + 8);
    if (v213 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v213 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v213) = "-fsplit-machine-functions";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((*((_DWORD *)a1 + 23) & 4) == 0)
  {
    v214 = *(_DWORD *)(a2 + 8);
    if (v214 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v214 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v214) = "-fno-strict-return";
    ++*(_DWORD *)(a2 + 8);
  }
  v215 = (unint64_t)*((unsigned __int16 *)a1 + 52) >> 11;
  if ((_DWORD)v215 != 1)
    sub_22E7216A8(a2, "-fzero-call-used-regs=", v641, v10, 4, 0x16u, v215);
  if ((*((_DWORD *)a1 + 23) & 0x100) != 0)
  {
    v216 = *(_DWORD *)(a2 + 8);
    if (v216 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v216 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v216) = "-fdebug-ranges-base-address";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((a1[8] & 0x20) != 0)
  {
    v217 = *(_DWORD *)(a2 + 8);
    if (v217 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v217 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v217) = "-fsplit-dwarf-inlining";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((*((_BYTE *)a1 + 7) & 4) != 0)
  {
    v218 = *(_DWORD *)(a2 + 8);
    if (v218 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v218 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v218) = "-fforce-dwarf-frame";
    ++*(_DWORD *)(a2 + 8);
  }
  v219 = ((unint64_t)a1[12] >> 39) & 3;
  if ((_DWORD)v219 != 2)
    sub_22E7216A8(a2, "-femit-dwarf-unwind=", v641, v10, 4, 0x17u, v219);
  if ((*(_BYTE *)a1 & 0x10) != 0)
  {
    v220 = *(_DWORD *)(a2 + 8);
    if (v220 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v220 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v220) = "-gdwarf64";
    ++*(_DWORD *)(a2 + 8);
  }
  v221 = *(uint64_t *)((char *)a1 + 76);
  if ((v221 & 0x2000000000) != 0)
  {
    v222 = *(_DWORD *)(a2 + 8);
    if (v222 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v222 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v222) = "-gcodeview";
    ++*(_DWORD *)(a2 + 8);
    v221 = *(uint64_t *)((char *)a1 + 76);
  }
  if ((v221 & 0x4000000000) != 0)
  {
    v223 = *(_DWORD *)(a2 + 8);
    if (v223 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v223 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v223) = "-gcodeview-ghash";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((*((_BYTE *)a1 + 31) & 1) != 0)
  {
    v224 = *(_DWORD *)(a2 + 8);
    if (v224 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v224 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v224) = "-gno-inline-line-tables";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((a1[10] & 1) != 0)
  {
    v225 = *(_DWORD *)(a2 + 8);
    if (v225 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v225 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v225) = "-greproducible";
    ++*(_DWORD *)(a2 + 8);
  }
  v226 = *((_WORD *)a1 + 32);
  if ((v226 & 2) != 0)
  {
    v227 = *(_DWORD *)(a2 + 8);
    if (v227 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v227 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v227) = "-gstrict-dwarf";
    ++*(_DWORD *)(a2 + 8);
    v226 = *((_WORD *)a1 + 32);
  }
  if ((v226 & 4) == 0)
  {
    v228 = *(_DWORD *)(a2 + 8);
    if (v228 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v228 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v228) = "-gno-column-info";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((*((_DWORD *)a1 + 23) & 0x400) != 0)
  {
    v229 = *(_DWORD *)(a2 + 8);
    if (v229 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v229 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v229) = "-gembed-source";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((a1[12] & 0x4000000000) != 0)
    sub_22E7216A8(a2, "-inline-asm=", v641, v10, 4, 0x18u, 1);
  v230 = (*(unint64_t *)((char *)a1 + 76) >> 39);
  if ((*(unint64_t *)((char *)a1 + 76) >> 39))
  {
    LOWORD(__dst) = 264;
    LODWORD(__s2) = v230;
    sub_22E721364(a2, "-mtls-size=", v641, v10, 4, (uint64_t *)&__s2);
  }
  if ((*((_DWORD *)a1 + 23) & 0x80000) != 0)
  {
    v231 = *(_DWORD *)(a2 + 8);
    if (v231 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v231 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v231) = "-mskip-rax-setup";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((*((_BYTE *)a1 + 45) & 8) != 0)
  {
    v232 = *(_DWORD *)(a2 + 8);
    if (v232 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v232 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v232) = "-mstackrealign";
    ++*(_DWORD *)(a2 + 8);
  }
  v233 = HIDWORD(a1[6]);
  if ((_DWORD)v233)
  {
    LOWORD(__dst) = 264;
    LODWORD(__s2) = v233;
    sub_22E721364(a2, "-mstack-alignment=", v641, v10, 4, (uint64_t *)&__s2);
  }
  v234 = a1[7];
  v235 = *((_WORD *)a1 + 32);
  if ((_DWORD)v234 != 4096)
  {
    LOWORD(__dst) = 264;
    LODWORD(__s2) = v234;
    sub_22E721364(a2, "-mstack-probe-size=", v641, v10, 4, (uint64_t *)&__s2);
    v235 = *((_WORD *)a1 + 32);
  }
  if ((v235 & 1) != 0)
  {
    v236 = *(_DWORD *)(a2 + 8);
    if (v236 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v236 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v236) = "-mno-stack-arg-probe";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((*((_BYTE *)a1 + 4) & 0x10) != 0)
  {
    v237 = *(_DWORD *)(a2 + 8);
    if (v237 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v237 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v237) = "-mno-tls-direct-seg-refs";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((*((_BYTE *)a1 + 38) & 0x80) != 0)
  {
    v238 = *(_DWORD *)(a2 + 8);
    if (v238 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v238 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v238) = "-mspeculative-load-hardening";
    ++*(_DWORD *)(a2 + 8);
  }
  v239 = *((_DWORD *)a1 + 23);
  if ((v239 & 0x4000) != 0)
  {
    v240 = *(_DWORD *)(a2 + 8);
    if (v240 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v240 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v240) = "-faapcs-bitfield-load";
    ++*(_DWORD *)(a2 + 8);
    v239 = *((_DWORD *)a1 + 23);
    if ((v239 & 0x20000) != 0)
    {
LABEL_739:
      if ((v239 & 0x40000) != 0)
        goto LABEL_750;
      goto LABEL_747;
    }
  }
  else if ((v239 & 0x20000) != 0)
  {
    goto LABEL_739;
  }
  v241 = *(_DWORD *)(a2 + 8);
  if (v241 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v241 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v241) = "-fno-aapcs-bitfield-width";
  ++*(_DWORD *)(a2 + 8);
  if ((*((_DWORD *)a1 + 23) & 0x40000) == 0)
  {
LABEL_747:
    v242 = *(_DWORD *)(a2 + 8);
    if (v242 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v242 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v242) = "-mno-amdgpu-ieee";
    ++*(_DWORD *)(a2 + 8);
  }
LABEL_750:
  if ((*((_BYTE *)a1 + 1) & 0x20) != 0)
  {
    v243 = *(_DWORD *)(a2 + 8);
    if (v243 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v243 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v243) = "-mbackchain";
    ++*(_DWORD *)(a2 + 8);
  }
  v244 = a1[4];
  if ((v244 & 0x40000) != 0)
  {
    v245 = *(_DWORD *)(a2 + 8);
    if (v245 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v245 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v245) = "-mrelax-all";
    ++*(_DWORD *)(a2 + 8);
    v244 = a1[4];
  }
  if ((a1[3] & 0x100000000000) != 0)
  {
    v246 = *(_DWORD *)(a2 + 8);
    if (v246 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v246 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v246) = "-mincremental-linker-compatible";
    ++*(_DWORD *)(a2 + 8);
    v244 = a1[4];
  }
  if ((v244 & 0x40000000000000) != 0)
  {
    v247 = *(_DWORD *)(a2 + 8);
    if (v247 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v247 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v247) = "-msoft-float";
    ++*(_DWORD *)(a2 + 8);
  }
  memset(&v665, 0, sizeof(v665));
  sub_22E618148(&v665, a1[165], a1[166], 0xAAAAAAAAAAAAAAABLL * ((a1[166] - a1[165]) >> 3));
  v248 = v665.__r_.__value_.__r.__words[0];
  v692 = v665;
  memset(&v665, 0, sizeof(v665));
  v249 = v692.__r_.__value_.__l.__size_;
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  __n.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s2;
  sub_22E3B3CC8((void ***)&__n);
  if (v249 != v248)
    sub_22E7214C8(a2, "-mrecip=", v641, v10, 9, (__int128 **)&v692);
  __s2 = &v692;
  sub_22E3B3CC8((void ***)&__s2);
  __s2 = &v665;
  sub_22E3B3CC8((void ***)&__s2);
  if (*((char *)a1 + 1439) < 0)
    sub_22E3BB2B4(&v664, (void *)a1[177], a1[178]);
  else
    v664 = *(std::string *)((_BYTE *)a1 + 59);
  __n = v664;
  memset(&v664, 0, sizeof(v664));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v250 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v251 = __n.__r_.__value_.__l.__size_;
  v252 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v253 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v253 = __n.__r_.__value_.__l.__size_;
  if (v253)
  {
LABEL_775:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_786;
    }
    v256 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_785:
    sub_22E3BB2B4(&v692, v256, v251);
    v10 = v640;
LABEL_786:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-mprefer-vector-width=", v641, v10, 4, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v250 & 0x80) == 0)
        goto LABEL_792;
      goto LABEL_790;
    }
LABEL_787:
    if ((v250 & 0x80) == 0)
      goto LABEL_792;
LABEL_790:
    v256 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_791;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v252)
      goto LABEL_787;
    v254 = &__n;
    v255 = (void ***)&__s2;
    while (v254->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v255)
    {
      v254 = (std::string *)((char *)v254 + 1);
      v255 = (void ***)((char *)v255 + 1);
      if (!--v252)
        goto LABEL_787;
    }
    goto LABEL_775;
  }
  v256 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_785;
LABEL_791:
  operator delete(v256);
  v10 = v640;
LABEL_792:
  if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v664.__r_.__value_.__l.__data_);
  if (*((char *)a1 + 1567) < 0)
    sub_22E3BB2B4(&v663, (void *)a1[193], a1[194]);
  else
    v663 = *(std::string *)(a1 + 193);
  __n = v663;
  memset(&v663, 0, sizeof(v663));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v257 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v258 = __n.__r_.__value_.__l.__size_;
  v259 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v260 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v260 = __n.__r_.__value_.__l.__size_;
  if (v260)
  {
LABEL_801:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_812;
    }
    v263 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_811:
    sub_22E3BB2B4(&v692, v263, v258);
    v10 = v640;
LABEL_812:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-mstack-protector-guard=", v641, v10, 4, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v257 & 0x80) == 0)
        goto LABEL_818;
      goto LABEL_816;
    }
LABEL_813:
    if ((v257 & 0x80) == 0)
      goto LABEL_818;
LABEL_816:
    v263 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_817;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v259)
      goto LABEL_813;
    v261 = &__n;
    v262 = (void ***)&__s2;
    while (v261->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v262)
    {
      v261 = (std::string *)((char *)v261 + 1);
      v262 = (void ***)((char *)v262 + 1);
      if (!--v259)
        goto LABEL_813;
    }
    goto LABEL_801;
  }
  v263 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_811;
LABEL_817:
  operator delete(v263);
  v10 = v640;
LABEL_818:
  if (SHIBYTE(v663.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v663.__r_.__value_.__l.__data_);
  v264 = *((_DWORD *)a1 + 21);
  if (v264 != 0x7FFFFFFF)
  {
    LOWORD(__dst) = 265;
    LODWORD(__s2) = v264;
    sub_22E721364(a2, "-mstack-protector-guard-offset=", v641, v10, 4, (uint64_t *)&__s2);
  }
  if (*((char *)a1 + 1591) < 0)
    sub_22E3BB2B4(&v662, (void *)a1[196], a1[197]);
  else
    v662 = *(std::string *)(a1 + 196);
  __n = v662;
  memset(&v662, 0, sizeof(v662));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v265 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v266 = __n.__r_.__value_.__l.__size_;
  v267 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v268 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v268 = __n.__r_.__value_.__l.__size_;
  if (v268)
  {
LABEL_829:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_840;
    }
    v271 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_839:
    sub_22E3BB2B4(&v692, v271, v266);
    v10 = v640;
LABEL_840:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-mstack-protector-guard-reg=", v641, v10, 4, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v265 & 0x80) == 0)
        goto LABEL_846;
      goto LABEL_844;
    }
LABEL_841:
    if ((v265 & 0x80) == 0)
      goto LABEL_846;
LABEL_844:
    v271 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_845;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v267)
      goto LABEL_841;
    v269 = &__n;
    v270 = (void ***)&__s2;
    while (v269->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v270)
    {
      v269 = (std::string *)((char *)v269 + 1);
      v270 = (void ***)((char *)v270 + 1);
      if (!--v267)
        goto LABEL_841;
    }
    goto LABEL_829;
  }
  v271 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_839;
LABEL_845:
  operator delete(v271);
  v10 = v640;
LABEL_846:
  if (SHIBYTE(v662.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v662.__r_.__value_.__l.__data_);
  v272 = a1[3];
  if ((v272 & 0x800000000) != 0)
  {
    v273 = *(_DWORD *)(a2 + 8);
    if (v273 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v273 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v273) = "-mfentry";
    ++*(_DWORD *)(a2 + 8);
    v272 = a1[3];
    if ((v272 & 0x1000000000) == 0)
    {
LABEL_850:
      if ((v272 & 0x2000000000) == 0)
        goto LABEL_851;
      goto LABEL_859;
    }
  }
  else if ((v272 & 0x1000000000) == 0)
  {
    goto LABEL_850;
  }
  v274 = *(_DWORD *)(a2 + 8);
  if (v274 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v274 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v274) = "-mnop-mcount";
  ++*(_DWORD *)(a2 + 8);
  v272 = a1[3];
  if ((v272 & 0x2000000000) == 0)
  {
LABEL_851:
    if ((v272 & 0x4000000000) == 0)
      goto LABEL_865;
    goto LABEL_862;
  }
LABEL_859:
  v275 = *(_DWORD *)(a2 + 8);
  if (v275 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v275 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v275) = "-mrecord-mcount";
  ++*(_DWORD *)(a2 + 8);
  if ((a1[3] & 0x4000000000) != 0)
  {
LABEL_862:
    v276 = *(_DWORD *)(a2 + 8);
    if (v276 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v276 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v276) = "-mpacked-stack";
    ++*(_DWORD *)(a2 + 8);
  }
LABEL_865:
  if (*((char *)a1 + 655) < 0)
    sub_22E3BB2B4(&v661, (void *)a1[79], a1[80]);
  else
    v661 = *(std::string *)(a1 + 79);
  __n = v661;
  memset(&v661, 0, sizeof(v661));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v277 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v278 = __n.__r_.__value_.__l.__size_;
  v279 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v280 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v280 = __n.__r_.__value_.__l.__size_;
  if (v280)
  {
LABEL_872:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_883;
    }
    v283 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_882:
    sub_22E3BB2B4(&v692, v283, v278);
    v10 = v640;
LABEL_883:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-object-file-name=", v641, v10, 4, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v277 & 0x80) == 0)
        goto LABEL_889;
      goto LABEL_887;
    }
LABEL_884:
    if ((v277 & 0x80) == 0)
      goto LABEL_889;
LABEL_887:
    v283 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_888;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v279)
      goto LABEL_884;
    v281 = &__n;
    v282 = (void ***)&__s2;
    while (v281->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v282)
    {
      v281 = (std::string *)((char *)v281 + 1);
      v282 = (void ***)((char *)v282 + 1);
      if (!--v279)
        goto LABEL_884;
    }
    goto LABEL_872;
  }
  v283 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_882;
LABEL_888:
  operator delete(v283);
  v10 = v640;
LABEL_889:
  if (SHIBYTE(v661.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v661.__r_.__value_.__l.__data_);
  if ((*((_BYTE *)a1 + 28) & 4) != 0)
  {
    v284 = *(_DWORD *)(a2 + 8);
    if (v284 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v284 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v284) = "-pg";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v285 = *(_DWORD *)(a2 + 8);
    if (v285 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v285 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v285) = "-fno-integrated-as";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((a1[4] & 4) != 0)
  {
    v286 = *(_DWORD *)(a2 + 8);
    if (v286 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v286 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v286) = "-fimplicit-invariant-position";
    ++*(_DWORD *)(a2 + 8);
  }
  v287 = *((_DWORD *)a1 + 23);
  if ((v287 & 0x200000) != 0)
  {
    v288 = *(_DWORD *)(a2 + 8);
    if (v288 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v288 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v288) = "-ftracepoint-instrument";
    ++*(_DWORD *)(a2 + 8);
    v287 = *((_DWORD *)a1 + 23);
    if ((v287 & 0x400000) != 0)
    {
LABEL_905:
      if ((v287 & 0x800000) != 0)
        goto LABEL_906;
      goto LABEL_918;
    }
  }
  else if ((v287 & 0x400000) != 0)
  {
    goto LABEL_905;
  }
  v289 = *(_DWORD *)(a2 + 8);
  if (v289 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v289 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v289) = "-fno-tracepoint-default-instrument";
  ++*(_DWORD *)(a2 + 8);
  v287 = *((_DWORD *)a1 + 23);
  if ((v287 & 0x800000) != 0)
  {
LABEL_906:
    if ((v287 & 0x2000000) != 0)
      goto LABEL_907;
    goto LABEL_921;
  }
LABEL_918:
  v290 = *(_DWORD *)(a2 + 8);
  if (v290 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v290 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v290) = "-fno-tracepoint-instrument-loops";
  ++*(_DWORD *)(a2 + 8);
  v287 = *((_DWORD *)a1 + 23);
  if ((v287 & 0x2000000) != 0)
  {
LABEL_907:
    if ((v287 & 0x1000000) != 0)
      goto LABEL_908;
    goto LABEL_924;
  }
LABEL_921:
  v291 = *(_DWORD *)(a2 + 8);
  if (v291 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v291 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v291) = "-fno-tracepoint-instrument-local-memory";
  ++*(_DWORD *)(a2 + 8);
  v287 = *((_DWORD *)a1 + 23);
  if ((v287 & 0x1000000) != 0)
  {
LABEL_908:
    if ((v287 & 0x4000000) != 0)
      goto LABEL_909;
    goto LABEL_927;
  }
LABEL_924:
  v292 = *(_DWORD *)(a2 + 8);
  if (v292 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v292 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v292) = "-fno-tracepoint-instrument-global-memory";
  ++*(_DWORD *)(a2 + 8);
  v287 = *((_DWORD *)a1 + 23);
  if ((v287 & 0x4000000) != 0)
  {
LABEL_909:
    if ((v287 & 0x8000000) != 0)
      goto LABEL_910;
    goto LABEL_930;
  }
LABEL_927:
  v293 = *(_DWORD *)(a2 + 8);
  if (v293 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v293 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v293) = "-fno-tracepoint-instrument-resources";
  ++*(_DWORD *)(a2 + 8);
  v287 = *((_DWORD *)a1 + 23);
  if ((v287 & 0x8000000) != 0)
  {
LABEL_910:
    if ((v287 & 0x10000000) == 0)
      goto LABEL_936;
    goto LABEL_933;
  }
LABEL_930:
  v294 = *(_DWORD *)(a2 + 8);
  if (v294 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v294 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v294) = "-fno-tracepoint-instrument-argument-buffers";
  ++*(_DWORD *)(a2 + 8);
  if ((*((_DWORD *)a1 + 23) & 0x10000000) != 0)
  {
LABEL_933:
    v295 = *(_DWORD *)(a2 + 8);
    if (v295 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v295 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v295) = "-ftracepoint-instrument-stdlib";
    ++*(_DWORD *)(a2 + 8);
  }
LABEL_936:
  if ((a1[4] & 2) != 0)
  {
    v296 = *(_DWORD *)(a2 + 8);
    if (v296 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v296 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v296) = "-fpreserve-invariance";
    ++*(_DWORD *)(a2 + 8);
  }
  v297 = *((_DWORD *)a1 + 24);
  if (v297)
  {
    LOWORD(__dst) = 264;
    LODWORD(__s2) = v297;
    sub_22E721364(a2, "-fmax-total-threads-per-threadgroup=", v641, v10, 4, (uint64_t *)&__s2);
  }
  if ((a1[10] & 2) != 0)
  {
    v298 = *(_DWORD *)(a2 + 8);
    if (v298 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v298 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v298) = "-debug-info-macro";
    ++*(_DWORD *)(a2 + 8);
  }
  memset(&v660, 0, sizeof(v660));
  sub_22E618148(&v660, a1[184], a1[185], 0xAAAAAAAAAAAAAAABLL * ((a1[185] - a1[184]) >> 3));
  v299 = v660.__r_.__value_.__r.__words[0];
  v692 = v660;
  memset(&v660, 0, sizeof(v660));
  v300 = v692.__r_.__value_.__l.__size_;
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  __n.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s2;
  sub_22E3B3CC8((void ***)&__n);
  if (v300 != v299)
    sub_22E7214C8(a2, "-default-function-attr", v641, v10, 6, (__int128 **)&v692);
  __s2 = &v692;
  sub_22E3B3CC8((void ***)&__s2);
  __s2 = &v660;
  sub_22E3B3CC8((void ***)&__s2);
  v301 = (*(unint64_t *)((char *)a1 + 76) >> 34) & 7;
  if ((_DWORD)v301)
  {
    LOWORD(__dst) = 264;
    LODWORD(__s2) = v301;
    sub_22E721364(a2, "-dwarf-version=", v641, v10, 4, (uint64_t *)&__s2);
  }
  v302 = (unint64_t)a1[12] >> 61;
  if ((_DWORD)v302)
    sub_22E7216A8(a2, "-debugger-tuning=", v641, v10, 4, 0x1Eu, v302);
  if (*((char *)a1 + 383) < 0)
    sub_22E3BB2B4(&v659, (void *)a1[45], a1[46]);
  else
    v659 = *(std::string *)((_BYTE *)a1 + 15);
  __n = v659;
  memset(&v659, 0, sizeof(v659));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v303 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v304 = __n.__r_.__value_.__l.__size_;
  v305 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v306 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v306 = __n.__r_.__value_.__l.__size_;
  if (v306)
  {
LABEL_959:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_970;
    }
    v309 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_969:
    sub_22E3BB2B4(&v692, v309, v304);
    v10 = v640;
LABEL_970:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-dwarf-debug-flags", v641, v10, 6, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v303 & 0x80) == 0)
        goto LABEL_976;
      goto LABEL_974;
    }
LABEL_971:
    if ((v303 & 0x80) == 0)
      goto LABEL_976;
LABEL_974:
    v309 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_975;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v305)
      goto LABEL_971;
    v307 = &__n;
    v308 = (void ***)&__s2;
    while (v307->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v308)
    {
      v307 = (std::string *)((char *)v307 + 1);
      v308 = (void ***)((char *)v308 + 1);
      if (!--v305)
        goto LABEL_971;
    }
    goto LABEL_959;
  }
  v309 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_969;
LABEL_975:
  operator delete(v309);
  v10 = v640;
LABEL_976:
  if (SHIBYTE(v659.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v659.__r_.__value_.__l.__data_);
  v310 = (*((unsigned __int16 *)a1 + 52) >> 7) & 3;
  if (v310)
    sub_22E7216A8(a2, "-extend-lifetimes=", v641, v10, 4, 0x1Fu, v310);
  if (*((char *)a1 + 407) < 0)
    sub_22E3BB2B4(&v658, (void *)a1[48], a1[49]);
  else
    v658 = *(std::string *)((_BYTE *)a1 + 16);
  __n = v658;
  memset(&v658, 0, sizeof(v658));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v311 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v312 = __n.__r_.__value_.__l.__size_;
  v313 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v314 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v314 = __n.__r_.__value_.__l.__size_;
  if (v314)
  {
LABEL_987:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_998;
    }
    v317 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_997:
    sub_22E3BB2B4(&v692, v317, v312);
    v10 = v640;
LABEL_998:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-record-command-line", v641, v10, 6, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v311 & 0x80) == 0)
        goto LABEL_1004;
      goto LABEL_1002;
    }
LABEL_999:
    if ((v311 & 0x80) == 0)
      goto LABEL_1004;
LABEL_1002:
    v317 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_1003;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v313)
      goto LABEL_999;
    v315 = &__n;
    v316 = (void ***)&__s2;
    while (v315->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v316)
    {
      v315 = (std::string *)((char *)v315 + 1);
      v316 = (void ***)((char *)v316 + 1);
      if (!--v313)
        goto LABEL_999;
    }
    goto LABEL_987;
  }
  v317 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_997;
LABEL_1003:
  operator delete(v317);
  v10 = v640;
LABEL_1004:
  if (SHIBYTE(v658.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v658.__r_.__value_.__l.__data_);
  v318 = *((_DWORD *)a1 + 25) & 3;
  if (v318)
    sub_22E7216A8(a2, "-compress-debug-sections=", v641, v10, 4, 0x20u, v318);
  v319 = a1[3];
  if ((v319 & 0x8000000000000) != 0)
  {
    v320 = *(_DWORD *)(a2 + 8);
    if (v320 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v320 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v320) = "-mnoexecstack";
    ++*(_DWORD *)(a2 + 8);
    v319 = a1[3];
    if ((v319 & 0x20000000000000) == 0)
    {
LABEL_1010:
      if ((v319 & 0x10000000000000) == 0)
        goto LABEL_1021;
      goto LABEL_1018;
    }
  }
  else if ((v319 & 0x20000000000000) == 0)
  {
    goto LABEL_1010;
  }
  v321 = *(_DWORD *)(a2 + 8);
  if (v321 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v321 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v321) = "-massembler-no-warn";
  ++*(_DWORD *)(a2 + 8);
  if ((a1[3] & 0x10000000000000) != 0)
  {
LABEL_1018:
    v322 = *(_DWORD *)(a2 + 8);
    if (v322 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v322 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v322) = "-massembler-fatal-warnings";
    ++*(_DWORD *)(a2 + 8);
  }
LABEL_1021:
  if ((*(_BYTE *)a1 & 4) != 0)
  {
    v323 = *(_DWORD *)(a2 + 8);
    if (v323 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v323 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v323) = "--mrelax-relocations";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((*((_BYTE *)a1 + 34) & 0x40) != 0)
  {
    v324 = *(_DWORD *)(a2 + 8);
    if (v324 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v324 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v324) = "-msave-temp-labels";
    ++*(_DWORD *)(a2 + 8);
  }
  v325 = *((_DWORD *)a1 + 164);
  if (v325 != 1)
    sub_22E7216A8(a2, "-mrelocation-model", v641, v10, 6, 0x21u, v325);
  if (*((char *)a1 + 1727) < 0)
    sub_22E3BB2B4(&v657, (void *)a1[213], a1[214]);
  else
    v657 = *(std::string *)((_BYTE *)a1 + 71);
  __n = v657;
  memset(&v657, 0, sizeof(v657));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v326 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v327 = __n.__r_.__value_.__l.__size_;
  v328 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v329 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v329 = __n.__r_.__value_.__l.__size_;
  if (v329)
  {
LABEL_1038:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_1049;
    }
    v332 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_1048:
    sub_22E3BB2B4(&v692, v332, v327);
    v10 = v640;
LABEL_1049:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-as-secure-log-file", v641, v10, 6, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v326 & 0x80) == 0)
        goto LABEL_1055;
      goto LABEL_1053;
    }
LABEL_1050:
    if ((v326 & 0x80) == 0)
      goto LABEL_1055;
LABEL_1053:
    v332 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_1054;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v328)
      goto LABEL_1050;
    v330 = &__n;
    v331 = (void ***)&__s2;
    while (v330->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v331)
    {
      v330 = (std::string *)((char *)v330 + 1);
      v331 = (void ***)((char *)v331 + 1);
      if (!--v328)
        goto LABEL_1050;
    }
    goto LABEL_1038;
  }
  v332 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_1048;
LABEL_1054:
  operator delete(v332);
  v10 = v640;
LABEL_1055:
  if (SHIBYTE(v657.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v657.__r_.__value_.__l.__data_);
  if ((*((_BYTE *)a1 + 45) & 4) == 0)
  {
    v333 = *(_DWORD *)(a2 + 8);
    if (v333 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v333 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v333) = "-disable-llvm-verifier";
    ++*(_DWORD *)(a2 + 8);
  }
  v334 = *a1;
  if ((*a1 & 0x8000000) != 0)
  {
    v335 = *(_DWORD *)(a2 + 8);
    if (v335 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v335 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v335) = "-disable-llvm-passes";
    ++*(_DWORD *)(a2 + 8);
    v334 = *a1;
    if ((*a1 & 0x10000000) == 0)
    {
LABEL_1063:
      if ((v334 & 0x20000000) == 0)
        goto LABEL_1064;
      goto LABEL_1072;
    }
  }
  else if ((v334 & 0x10000000) == 0)
  {
    goto LABEL_1063;
  }
  v336 = *(_DWORD *)(a2 + 8);
  if (v336 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v336 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v336) = "-disable-lifetime-markers";
  ++*(_DWORD *)(a2 + 8);
  v334 = *a1;
  if ((*a1 & 0x20000000) == 0)
  {
LABEL_1064:
    if ((v334 & 0x200000000) == 0)
      goto LABEL_1078;
    goto LABEL_1075;
  }
LABEL_1072:
  v337 = *(_DWORD *)(a2 + 8);
  if (v337 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v337 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v337) = "-disable-O0-optnone";
  ++*(_DWORD *)(a2 + 8);
  if ((*a1 & 0x200000000) != 0)
  {
LABEL_1075:
    v338 = *(_DWORD *)(a2 + 8);
    if (v338 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v338 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v338) = "-disable-red-zone";
    ++*(_DWORD *)(a2 + 8);
  }
LABEL_1078:
  v339 = *((_WORD *)a1 + 32);
  if ((v339 & 8) != 0)
  {
    v340 = *(_DWORD *)(a2 + 8);
    if (v340 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v340 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v340) = "-dwarf-ext-refs";
    ++*(_DWORD *)(a2 + 8);
    v339 = *((_WORD *)a1 + 32);
    if ((v339 & 0x10) == 0)
    {
LABEL_1080:
      if ((v339 & 0x40) == 0)
        goto LABEL_1091;
      goto LABEL_1088;
    }
  }
  else if ((v339 & 0x10) == 0)
  {
    goto LABEL_1080;
  }
  v341 = *(_DWORD *)(a2 + 8);
  if (v341 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v341 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v341) = "-dwarf-explicit-import";
  ++*(_DWORD *)(a2 + 8);
  if ((a1[8] & 0x40) != 0)
  {
LABEL_1088:
    v342 = *(_DWORD *)(a2 + 8);
    if (v342 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v342 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v342) = "-debug-forward-template-params";
    ++*(_DWORD *)(a2 + 8);
  }
LABEL_1091:
  if ((*((_BYTE *)a1 + 6) & 1) != 0)
  {
    v343 = *(_DWORD *)(a2 + 8);
    if (v343 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v343 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v343) = "-fforbid-guard-variables";
    ++*(_DWORD *)(a2 + 8);
  }
  v344 = a1[3];
  if ((v344 & 0x400000000000000) != 0)
  {
    v345 = *(_DWORD *)(a2 + 8);
    if (v345 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v345 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v345) = "-no-implicit-float";
    ++*(_DWORD *)(a2 + 8);
    v344 = a1[3];
    if ((v344 & 0x800000000000000) == 0)
    {
LABEL_1097:
      if ((v344 & 0x400000000000) == 0)
        goto LABEL_1108;
      goto LABEL_1105;
    }
  }
  else if ((v344 & 0x800000000000000) == 0)
  {
    goto LABEL_1097;
  }
  v346 = *(_DWORD *)(a2 + 8);
  if (v346 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v346 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v346) = "-no-implicit-sme";
  ++*(_DWORD *)(a2 + 8);
  if ((a1[3] & 0x400000000000) != 0)
  {
LABEL_1105:
    v347 = *(_DWORD *)(a2 + 8);
    if (v347 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v347 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v347) = "-fmerge-functions";
    ++*(_DWORD *)(a2 + 8);
  }
LABEL_1108:
  if (*((char *)a1 + 207) < 0)
    sub_22E3BB2B4(&v656, (void *)a1[23], a1[24]);
  else
    v656 = *(std::string *)(a1 + 23);
  __n = v656;
  memset(&v656, 0, sizeof(v656));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v348 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v349 = __n.__r_.__value_.__l.__size_;
  v350 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v351 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v351 = __n.__r_.__value_.__l.__size_;
  if (v351)
  {
LABEL_1115:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_1126;
    }
    v354 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_1125:
    sub_22E3BB2B4(&v692, v354, v349);
    v10 = v640;
LABEL_1126:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-coverage-data-file", v641, v10, 6, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v348 & 0x80) == 0)
        goto LABEL_1132;
      goto LABEL_1130;
    }
LABEL_1127:
    if ((v348 & 0x80) == 0)
      goto LABEL_1132;
LABEL_1130:
    v354 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_1131;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v350)
      goto LABEL_1127;
    v352 = &__n;
    v353 = (void ***)&__s2;
    while (v352->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v353)
    {
      v352 = (std::string *)((char *)v352 + 1);
      v353 = (void ***)((char *)v353 + 1);
      if (!--v350)
        goto LABEL_1127;
    }
    goto LABEL_1115;
  }
  v354 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_1125;
LABEL_1131:
  operator delete(v354);
  v10 = v640;
LABEL_1132:
  if (SHIBYTE(v656.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v656.__r_.__value_.__l.__data_);
  if (*((char *)a1 + 231) < 0)
    sub_22E3BB2B4(&v655, (void *)a1[26], a1[27]);
  else
    v655 = *(std::string *)(a1 + 26);
  __n = v655;
  memset(&v655, 0, sizeof(v655));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v355 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v356 = __n.__r_.__value_.__l.__size_;
  v357 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v358 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v358 = __n.__r_.__value_.__l.__size_;
  if (v358)
  {
LABEL_1141:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_1152;
    }
    v361 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_1151:
    sub_22E3BB2B4(&v692, v361, v356);
    v10 = v640;
LABEL_1152:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-coverage-notes-file", v641, v10, 6, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v355 & 0x80) == 0)
        goto LABEL_1158;
      goto LABEL_1156;
    }
LABEL_1153:
    if ((v355 & 0x80) == 0)
      goto LABEL_1158;
LABEL_1156:
    v361 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_1157;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v357)
      goto LABEL_1153;
    v359 = &__n;
    v360 = (void ***)&__s2;
    while (v359->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v360)
    {
      v359 = (std::string *)((char *)v359 + 1);
      v360 = (void ***)((char *)v360 + 1);
      if (!--v357)
        goto LABEL_1153;
    }
    goto LABEL_1141;
  }
  v361 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_1151;
LABEL_1157:
  operator delete(v361);
  v10 = v640;
LABEL_1158:
  if (SHIBYTE(v655.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v655.__r_.__value_.__l.__data_);
  if ((*((_BYTE *)a1 + 34) & 2) != 0)
  {
    v362 = *(_DWORD *)(a2 + 8);
    if (v362 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v362 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v362) = "-dump-coverage-mapping";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((*((_BYTE *)a1 + 45) & 2) != 0)
  {
    v363 = *(_DWORD *)(a2 + 8);
    if (v363 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v363 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v363) = "-fuse-register-sized-bitfield-access";
    ++*(_DWORD *)(a2 + 8);
  }
  v364 = a1[4];
  if ((v364 & 0x80000) != 0)
  {
    v365 = *(_DWORD *)(a2 + 8);
    if (v365 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v365 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v365) = "-relaxed-aliasing";
    ++*(_DWORD *)(a2 + 8);
    v364 = a1[4];
  }
  if ((v364 & 0x100000) == 0)
  {
    v366 = *(_DWORD *)(a2 + 8);
    if (v366 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v366 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v366) = "-no-struct-path-tbaa";
    ++*(_DWORD *)(a2 + 8);
  }
  if (*((char *)a1 + 311) < 0)
    sub_22E3BB2B4(&v654, (void *)a1[36], a1[37]);
  else
    v654 = *(std::string *)((_BYTE *)a1 + 12);
  __n = v654;
  memset(&v654, 0, sizeof(v654));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v367 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v368 = __n.__r_.__value_.__l.__size_;
  v369 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v370 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v370 = __n.__r_.__value_.__l.__size_;
  if (v370)
  {
LABEL_1183:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_1194;
    }
    v373 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_1193:
    sub_22E3BB2B4(&v692, v373, v368);
    v10 = v640;
LABEL_1194:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-mdebug-pass", v641, v10, 6, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v367 & 0x80) == 0)
        goto LABEL_1200;
      goto LABEL_1198;
    }
LABEL_1195:
    if ((v367 & 0x80) == 0)
      goto LABEL_1200;
LABEL_1198:
    v373 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_1199;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v369)
      goto LABEL_1195;
    v371 = &__n;
    v372 = (void ***)&__s2;
    while (v371->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v372)
    {
      v371 = (std::string *)((char *)v371 + 1);
      v372 = (void ***)((char *)v372 + 1);
      if (!--v369)
        goto LABEL_1195;
    }
    goto LABEL_1183;
  }
  v373 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_1193;
LABEL_1199:
  operator delete(v373);
  v10 = v640;
LABEL_1200:
  if (SHIBYTE(v654.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v654.__r_.__value_.__l.__data_);
  v374 = ((unint64_t)a1[12] >> 34) & 3;
  if ((_DWORD)v374)
    sub_22E7216A8(a2, "-mframe-pointer=", v641, v10, 4, 0x22u, v374);
  if (*((char *)a1 + 479) < 0)
    sub_22E3BB2B4(&v653, (void *)a1[57], a1[58]);
  else
    v653 = *(std::string *)((_BYTE *)a1 + 19);
  __n = v653;
  memset(&v653, 0, sizeof(v653));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v375 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v376 = __n.__r_.__value_.__l.__size_;
  v377 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v378 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v378 = __n.__r_.__value_.__l.__size_;
  if (v378)
  {
LABEL_1211:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_1222;
    }
    v381 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_1221:
    sub_22E3BB2B4(&v692, v381, v376);
    v10 = v640;
LABEL_1222:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-mfloat-abi", v641, v10, 6, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v375 & 0x80) == 0)
        goto LABEL_1228;
      goto LABEL_1226;
    }
LABEL_1223:
    if ((v375 & 0x80) == 0)
      goto LABEL_1228;
LABEL_1226:
    v381 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_1227;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v377)
      goto LABEL_1223;
    v379 = &__n;
    v380 = (void ***)&__s2;
    while (v379->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v380)
    {
      v379 = (std::string *)((char *)v379 + 1);
      v380 = (void ***)((char *)v380 + 1);
      if (!--v377)
        goto LABEL_1223;
    }
    goto LABEL_1211;
  }
  v381 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_1221;
LABEL_1227:
  operator delete(v381);
  v10 = v640;
LABEL_1228:
  if (SHIBYTE(v653.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v653.__r_.__value_.__l.__data_);
  if (*((char *)a1 + 535) < 0)
    sub_22E3BB2B4(&v652, (void *)a1[64], a1[65]);
  else
    v652 = *(std::string *)(a1 + 64);
  __n = v652;
  memset(&v652, 0, sizeof(v652));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v382 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v383 = __n.__r_.__value_.__l.__size_;
  v384 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v385 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v385 = __n.__r_.__value_.__l.__size_;
  if (v385)
  {
LABEL_1237:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_1248;
    }
    v388 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_1247:
    sub_22E3BB2B4(&v692, v388, v383);
    v10 = v640;
LABEL_1248:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-mlimit-float-precision", v641, v10, 6, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v382 & 0x80) == 0)
        goto LABEL_1254;
      goto LABEL_1252;
    }
LABEL_1249:
    if ((v382 & 0x80) == 0)
      goto LABEL_1254;
LABEL_1252:
    v388 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_1253;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v384)
      goto LABEL_1249;
    v386 = &__n;
    v387 = (void ***)&__s2;
    while (v386->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v387)
    {
      v386 = (std::string *)((char *)v386 + 1);
      v387 = (void ***)((char *)v387 + 1);
      if (!--v384)
        goto LABEL_1249;
    }
    goto LABEL_1237;
  }
  v388 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_1247;
LABEL_1253:
  operator delete(v388);
  v10 = v640;
LABEL_1254:
  if (SHIBYTE(v652.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v652.__r_.__value_.__l.__data_);
  v389 = *((_DWORD *)a1 + 17);
  if (v389)
  {
    LOWORD(__dst) = 264;
    LODWORD(__s2) = v389;
    sub_22E721364(a2, "-mregparm", v641, v10, 6, (uint64_t *)&__s2);
  }
  v390 = *((_DWORD *)a1 + 18);
  if (v390)
  {
    LOWORD(__dst) = 264;
    LODWORD(__s2) = v390;
    sub_22E721364(a2, "-msmall-data-limit", v641, v10, 6, (uint64_t *)&__s2);
  }
  v391 = ((unint64_t)a1[5] >> 35) & 3;
  if ((_DWORD)v391)
  {
    LOWORD(__dst) = 264;
    LODWORD(__s2) = v391;
    sub_22E721364(a2, "-funwind-tables=", v641, v10, 4, (uint64_t *)&__s2);
  }
  if ((*((_BYTE *)a1 + 2) & 8) != 0)
  {
    v392 = *(_DWORD *)(a2 + 8);
    if (v392 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v392 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v392) = "-mconstructor-aliases";
    ++*(_DWORD *)(a2 + 8);
  }
  v393 = a1[5];
  if ((v393 & 0x2000000000) != 0)
  {
    v394 = *(_DWORD *)(a2 + 8);
    if (v394 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v394 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v394) = "-vectorize-loops";
    ++*(_DWORD *)(a2 + 8);
    v393 = a1[5];
  }
  if ((v393 & 0x4000000000) != 0)
  {
    v395 = *(_DWORD *)(a2 + 8);
    if (v395 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v395 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v395) = "-vectorize-slp";
    ++*(_DWORD *)(a2 + 8);
  }
  memset(&v651, 0, sizeof(v651));
  sub_22E618148(&v651, a1[86], a1[87], 0xAAAAAAAAAAAAAAABLL * ((a1[87] - a1[86]) >> 3));
  v396 = v651.__r_.__value_.__r.__words[0];
  v692 = v651;
  memset(&v651, 0, sizeof(v651));
  v397 = v692.__r_.__value_.__l.__size_;
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  __n.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s2;
  sub_22E3B3CC8((void ***)&__n);
  if (v397 != v396)
    sub_22E7214C8(a2, "--dependent-lib=", v641, v10, 4, (__int128 **)&v692);
  __s2 = &v692;
  sub_22E3B3CC8((void ***)&__s2);
  __s2 = &v651;
  sub_22E3B3CC8((void ***)&__s2);
  if ((*(_BYTE *)a1 & 2) != 0)
  {
    v398 = *(_DWORD *)(a2 + 8);
    if (v398 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v398 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v398) = "-fapple-kext-vtable-mitigation";
    ++*(_DWORD *)(a2 + 8);
  }
  memset(&v650, 0, sizeof(v650));
  sub_22E618148(&v650, a1[89], a1[90], 0xAAAAAAAAAAAAAAABLL * ((a1[90] - a1[89]) >> 3));
  v399 = v650.__r_.__value_.__r.__words[0];
  v692 = v650;
  memset(&v650, 0, sizeof(v650));
  v400 = v692.__r_.__value_.__l.__size_;
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  __n.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s2;
  sub_22E3B3CC8((void ***)&__n);
  if (v400 != v399)
    sub_22E7214C8(a2, "--linker-option=", v641, v10, 4, (__int128 **)&v692);
  __s2 = &v692;
  sub_22E3B3CC8((void ***)&__s2);
  __s2 = &v650;
  sub_22E3B3CC8((void ***)&__s2);
  v401 = a1[4];
  if (((v401 >> 35) & 3) != 0)
  {
    LOWORD(__dst) = 264;
    LODWORD(__s2) = (v401 >> 35) & 3;
    sub_22E721364(a2, "-fsanitize-coverage-type=", v641, v10, 4, (uint64_t *)&__s2);
    v401 = a1[4];
  }
  v402 = a1[3];
  if ((v401 & 0x2000000000) != 0)
  {
    v404 = *(_DWORD *)(a2 + 8);
    if (v404 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v404 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v404) = "-fsanitize-coverage-indirect-calls";
    ++*(_DWORD *)(a2 + 8);
    v402 = a1[3];
    v401 = a1[4];
    if ((v401 & 0x4000000000) == 0)
    {
LABEL_1286:
      if ((v401 & 0x8000000000) == 0)
        goto LABEL_1287;
      goto LABEL_1311;
    }
  }
  else if ((v401 & 0x4000000000) == 0)
  {
    goto LABEL_1286;
  }
  v405 = *(_DWORD *)(a2 + 8);
  if (v405 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v405 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v405) = "-fsanitize-coverage-trace-bb";
  ++*(_DWORD *)(a2 + 8);
  v402 = a1[3];
  v401 = a1[4];
  if ((v401 & 0x8000000000) == 0)
  {
LABEL_1287:
    if ((v401 & 0x10000000000) == 0)
      goto LABEL_1288;
    goto LABEL_1314;
  }
LABEL_1311:
  v406 = *(_DWORD *)(a2 + 8);
  if (v406 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v406 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v406) = "-fsanitize-coverage-trace-cmp";
  ++*(_DWORD *)(a2 + 8);
  v402 = a1[3];
  v401 = a1[4];
  if ((v401 & 0x10000000000) == 0)
  {
LABEL_1288:
    if ((v401 & 0x20000000000) == 0)
      goto LABEL_1289;
    goto LABEL_1317;
  }
LABEL_1314:
  v407 = *(_DWORD *)(a2 + 8);
  if (v407 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v407 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v407) = "-fsanitize-coverage-trace-div";
  ++*(_DWORD *)(a2 + 8);
  v402 = a1[3];
  v401 = a1[4];
  if ((v401 & 0x20000000000) == 0)
  {
LABEL_1289:
    if ((v401 & 0x40000000000) == 0)
      goto LABEL_1290;
    goto LABEL_1320;
  }
LABEL_1317:
  v408 = *(_DWORD *)(a2 + 8);
  if (v408 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v408 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v408) = "-fsanitize-coverage-trace-gep";
  ++*(_DWORD *)(a2 + 8);
  v402 = a1[3];
  v401 = a1[4];
  if ((v401 & 0x40000000000) == 0)
  {
LABEL_1290:
    if ((v401 & 0x200000000000) == 0)
      goto LABEL_1291;
    goto LABEL_1323;
  }
LABEL_1320:
  v409 = *(_DWORD *)(a2 + 8);
  if (v409 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v409 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v409) = "-fsanitize-coverage-8bit-counters";
  ++*(_DWORD *)(a2 + 8);
  v402 = a1[3];
  v401 = a1[4];
  if ((v401 & 0x200000000000) == 0)
  {
LABEL_1291:
    if ((v401 & 0x400000000000) == 0)
      goto LABEL_1292;
    goto LABEL_1326;
  }
LABEL_1323:
  v410 = *(_DWORD *)(a2 + 8);
  if (v410 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v410 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v410) = "-fsanitize-coverage-inline-8bit-counters";
  ++*(_DWORD *)(a2 + 8);
  v402 = a1[3];
  v401 = a1[4];
  if ((v401 & 0x400000000000) == 0)
  {
LABEL_1292:
    if ((v401 & 0x800000000000) == 0)
      goto LABEL_1293;
    goto LABEL_1329;
  }
LABEL_1326:
  v411 = *(_DWORD *)(a2 + 8);
  if (v411 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v411 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v411) = "-fsanitize-coverage-inline-BOOL-flag";
  ++*(_DWORD *)(a2 + 8);
  v402 = a1[3];
  v401 = a1[4];
  if ((v401 & 0x800000000000) == 0)
  {
LABEL_1293:
    if ((v401 & 0x80000000000) == 0)
      goto LABEL_1294;
    goto LABEL_1332;
  }
LABEL_1329:
  v412 = *(_DWORD *)(a2 + 8);
  if (v412 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v412 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v412) = "-fsanitize-coverage-pc-table";
  ++*(_DWORD *)(a2 + 8);
  v402 = a1[3];
  v401 = a1[4];
  if ((v401 & 0x80000000000) == 0)
  {
LABEL_1294:
    if ((v401 & 0x100000000000) == 0)
      goto LABEL_1295;
    goto LABEL_1335;
  }
LABEL_1332:
  v413 = *(_DWORD *)(a2 + 8);
  if (v413 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v413 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v413) = "-fsanitize-coverage-trace-pc";
  ++*(_DWORD *)(a2 + 8);
  v402 = a1[3];
  v401 = a1[4];
  if ((v401 & 0x100000000000) == 0)
  {
LABEL_1295:
    if ((v401 & 0x1000000000000) == 0)
      goto LABEL_1296;
    goto LABEL_1338;
  }
LABEL_1335:
  v414 = *(_DWORD *)(a2 + 8);
  if (v414 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v414 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v414) = "-fsanitize-coverage-trace-pc-guard";
  ++*(_DWORD *)(a2 + 8);
  v402 = a1[3];
  v401 = a1[4];
  if ((v401 & 0x1000000000000) == 0)
  {
LABEL_1296:
    if ((v401 & 0x2000000000000) == 0)
      goto LABEL_1297;
    goto LABEL_1341;
  }
LABEL_1338:
  v415 = *(_DWORD *)(a2 + 8);
  if (v415 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v415 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v415) = "-fsanitize-coverage-no-prune";
  ++*(_DWORD *)(a2 + 8);
  v402 = a1[3];
  v401 = a1[4];
  if ((v401 & 0x2000000000000) == 0)
  {
LABEL_1297:
    if ((v401 & 0x4000000000000) == 0)
      goto LABEL_1298;
    goto LABEL_1344;
  }
LABEL_1341:
  v416 = *(_DWORD *)(a2 + 8);
  if (v416 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v416 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v416) = "-fsanitize-coverage-stack-depth";
  ++*(_DWORD *)(a2 + 8);
  v402 = a1[3];
  v401 = a1[4];
  if ((v401 & 0x4000000000000) == 0)
  {
LABEL_1298:
    if ((v401 & 0x8000000000000) == 0)
      goto LABEL_1299;
    goto LABEL_1347;
  }
LABEL_1344:
  v417 = *(_DWORD *)(a2 + 8);
  if (v417 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v417 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v417) = "-fsanitize-coverage-trace-loads";
  ++*(_DWORD *)(a2 + 8);
  v402 = a1[3];
  if ((a1[4] & 0x8000000000000) == 0)
  {
LABEL_1299:
    if (!(_DWORD)v402)
      goto LABEL_1301;
    goto LABEL_1300;
  }
LABEL_1347:
  v418 = *(_DWORD *)(a2 + 8);
  if (v418 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v418 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v418) = "-fsanitize-coverage-trace-stores";
  ++*(_DWORD *)(a2 + 8);
  LODWORD(v402) = *((_DWORD *)a1 + 6);
  if ((_DWORD)v402)
  {
LABEL_1300:
    LOWORD(__dst) = 264;
    LODWORD(__s2) = v402;
    sub_22E721364(a2, "-fpatchable-function-entry-offset=", v641, v10, 4, (uint64_t *)&__s2);
  }
LABEL_1301:
  v403 = ((unint64_t)a1[12] >> 43) & 3;
  if ((_DWORD)v403)
    sub_22E7216A8(a2, "-fprofile-instrument=", v641, v10, 4, 0x23u, v403);
  if (*((char *)a1 + 759) < 0)
    sub_22E3BB2B4(&v649, (void *)a1[92], a1[93]);
  else
    v649 = *(std::string *)(a1 + 92);
  __n = v649;
  memset(&v649, 0, sizeof(v649));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v419 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v420 = __n.__r_.__value_.__l.__size_;
  v421 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v422 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v422 = __n.__r_.__value_.__l.__size_;
  if (v422)
  {
LABEL_1356:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_1367;
    }
    v425 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_1366:
    sub_22E3BB2B4(&v692, v425, v420);
    v10 = v640;
LABEL_1367:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-fprofile-instrument-path=", v641, v10, 4, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v419 & 0x80) == 0)
        goto LABEL_1373;
      goto LABEL_1371;
    }
LABEL_1368:
    if ((v419 & 0x80) == 0)
      goto LABEL_1373;
LABEL_1371:
    v425 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_1372;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v421)
      goto LABEL_1368;
    v423 = &__n;
    v424 = (void ***)&__s2;
    while (v423->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v424)
    {
      v423 = (std::string *)((char *)v423 + 1);
      v424 = (void ***)((char *)v424 + 1);
      if (!--v421)
        goto LABEL_1368;
    }
    goto LABEL_1356;
  }
  v425 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_1366;
LABEL_1372:
  operator delete(v425);
  v10 = v640;
LABEL_1373:
  if (SHIBYTE(v649.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v649.__r_.__value_.__l.__data_);
  if (*((char *)a1 + 831) < 0)
    sub_22E3BB2B4(&v648, (void *)a1[101], a1[102]);
  else
    v648 = *(std::string *)(a1 + 101);
  __n = v648;
  memset(&v648, 0, sizeof(v648));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v426 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v427 = __n.__r_.__value_.__l.__size_;
  v428 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v429 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v429 = __n.__r_.__value_.__l.__size_;
  if (v429)
  {
LABEL_1382:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_1393;
    }
    v432 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_1392:
    sub_22E3BB2B4(&v692, v432, v427);
    v10 = v640;
LABEL_1393:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-fprofile-instrument-use-path=", v641, v10, 4, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v426 & 0x80) == 0)
        goto LABEL_1399;
      goto LABEL_1397;
    }
LABEL_1394:
    if ((v426 & 0x80) == 0)
      goto LABEL_1399;
LABEL_1397:
    v432 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_1398;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v428)
      goto LABEL_1394;
    v430 = &__n;
    v431 = (void ***)&__s2;
    while (v430->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v431)
    {
      v430 = (std::string *)((char *)v430 + 1);
      v431 = (void ***)((char *)v431 + 1);
      if (!--v428)
        goto LABEL_1394;
    }
    goto LABEL_1382;
  }
  v432 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_1392;
LABEL_1398:
  operator delete(v432);
  v10 = v640;
LABEL_1399:
  if (SHIBYTE(v648.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v648.__r_.__value_.__l.__data_);
  if ((a1[8] & 0x800) != 0)
  {
    v433 = *(_DWORD *)(a2 + 8);
    if (v433 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v433 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v433) = "-flto-visibility-public-std";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((*((_BYTE *)a1 + 29) & 4) != 0)
  {
    v434 = *(_DWORD *)(a2 + 8);
    if (v434 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v434 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v434) = "-flto-unit";
    ++*(_DWORD *)(a2 + 8);
  }
  v435 = *a1;
  if ((*a1 & 0x100000000) != 0)
  {
    v436 = *(_DWORD *)(a2 + 8);
    if (v436 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v436 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v436) = "-fdebug-pass-manager";
    ++*(_DWORD *)(a2 + 8);
    v435 = *a1;
  }
  if ((v435 & 0x800000000) != 0)
  {
    v437 = *(_DWORD *)(a2 + 8);
    if (v437 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v437 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v437) = "-fverify-debuginfo-preserve";
    ++*(_DWORD *)(a2 + 8);
  }
  if (*((char *)a1 + 503) < 0)
    sub_22E3BB2B4(&v647, (void *)a1[60], a1[61]);
  else
    v647 = *(std::string *)((_BYTE *)a1 + 20);
  __n = v647;
  memset(&v647, 0, sizeof(v647));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v438 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v439 = __n.__r_.__value_.__l.__size_;
  v440 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v441 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v441 = __n.__r_.__value_.__l.__size_;
  if (v441)
  {
LABEL_1424:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_1435;
    }
    v444 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_1434:
    sub_22E3BB2B4(&v692, v444, v439);
    v10 = v640;
LABEL_1435:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-fverify-debuginfo-preserve-export=", v641, v10, 4, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v438 & 0x80) == 0)
        goto LABEL_1441;
      goto LABEL_1439;
    }
LABEL_1436:
    if ((v438 & 0x80) == 0)
      goto LABEL_1441;
LABEL_1439:
    v444 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_1440;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v440)
      goto LABEL_1436;
    v442 = &__n;
    v443 = (void ***)&__s2;
    while (v442->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v443)
    {
      v442 = (std::string *)((char *)v442 + 1);
      v443 = (void ***)((char *)v443 + 1);
      if (!--v440)
        goto LABEL_1436;
    }
    goto LABEL_1424;
  }
  v444 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_1434;
LABEL_1440:
  operator delete(v444);
  v10 = v640;
LABEL_1441:
  if (SHIBYTE(v647.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v647.__r_.__value_.__l.__data_);
  v445 = *((_DWORD *)a1 + 15);
  if (v445 != -1)
  {
    LOWORD(__dst) = 264;
    LODWORD(__s2) = v445;
    sub_22E721364(a2, "-fwarn-stack-size=", v641, v10, 4, (uint64_t *)&__s2);
  }
  v446 = *a1;
  if ((*a1 & 0x4000) != 0)
  {
    v447 = *(_DWORD *)(a2 + 8);
    if (v447 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v447 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v447) = "-cfguard-no-checks";
    ++*(_DWORD *)(a2 + 8);
    v446 = *a1;
    if ((*a1 & 0x8000) == 0)
    {
LABEL_1447:
      if ((v446 & 0x10000) == 0)
        goto LABEL_1458;
      goto LABEL_1455;
    }
  }
  else if ((v446 & 0x8000) == 0)
  {
    goto LABEL_1447;
  }
  v448 = *(_DWORD *)(a2 + 8);
  if (v448 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v448 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v448) = "-cfguard";
  ++*(_DWORD *)(a2 + 8);
  if ((*a1 & 0x10000) != 0)
  {
LABEL_1455:
    v449 = *(_DWORD *)(a2 + 8);
    if (v449 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v449 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v449) = "-ehcontguard";
    ++*(_DWORD *)(a2 + 8);
  }
LABEL_1458:
  if ((a1[8] & 0x80) == 0)
  {
    v450 = *(_DWORD *)(a2 + 8);
    if (v450 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v450 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v450) = "-fno-debuginfo-use-presumed-location";
    ++*(_DWORD *)(a2 + 8);
  }
  v451 = *a1;
  if ((*a1 & 0x1000000) != 0)
  {
    v452 = *(_DWORD *)(a2 + 8);
    if (v452 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v452 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v452) = "-clear-ast-before-backend";
    ++*(_DWORD *)(a2 + 8);
    v451 = *a1;
  }
  if ((v451 & 0x80000000) == 0)
  {
    v453 = *(_DWORD *)(a2 + 8);
    if (v453 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v453 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v453) = "-no-enable-noundef-analysis";
    ++*(_DWORD *)(a2 + 8);
  }
  v454 = *((_DWORD *)a1 + 23);
  v455 = (v454 >> 20) & 1;
  v456 = *((_DWORD *)v639 + 6);
  if ((v456 & 0xFFFFFFFE) == 0x30)
  {
    v457 = getenv("ENABLE_OPAQUE_POINTERS_BY_DEFAULT") != 0;
    if (!v455)
      goto LABEL_1478;
  }
  else
  {
    v457 = 1;
    if (!v455)
      goto LABEL_1478;
  }
  if (v455 != v457)
  {
    v458 = *(_DWORD *)(a2 + 8);
    if (v458 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v458 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v458) = "-opaque-pointers";
    ++*(_DWORD *)(a2 + 8);
    v454 = *((_DWORD *)a1 + 23);
    v456 = *((_DWORD *)v639 + 6);
  }
LABEL_1478:
  if ((v456 & 0xFFFFFFFE) == 0x30)
  {
    v459 = getenv("ENABLE_OPAQUE_POINTERS_BY_DEFAULT") != 0;
    if ((v454 & 0x100000) != 0)
      goto LABEL_1486;
  }
  else
  {
    v459 = 1;
    if ((v454 & 0x100000) != 0)
      goto LABEL_1486;
  }
  if (v459)
  {
    v460 = *(_DWORD *)(a2 + 8);
    if (v460 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v460 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v460) = "-no-opaque-pointers";
    ++*(_DWORD *)(a2 + 8);
  }
LABEL_1486:
  if ((*((_BYTE *)a1 + 3) & 4) != 0)
  {
    v461 = *(_DWORD *)(a2 + 8);
    if (v461 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v461 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v461) = "-discard-value-names";
    ++*(_DWORD *)(a2 + 8);
  }
  if ((a1[8] & 0x100) != 0)
  {
    v462 = *(_DWORD *)(a2 + 8);
    if (v462 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v462 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v462) = "-emit-llvm-uselists";
    ++*(_DWORD *)(a2 + 8);
  }
  if (*((char *)a1 + 999) < 0)
    sub_22E3BB2B4(&v646, (void *)a1[122], a1[123]);
  else
    v646 = *(std::string *)(a1 + 122);
  __n = v646;
  memset(&v646, 0, sizeof(v646));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v463 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v464 = __n.__r_.__value_.__l.__size_;
  v465 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v466 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v466 = __n.__r_.__value_.__l.__size_;
  if (v466)
  {
LABEL_1501:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_1512;
    }
    v469 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_1511:
    sub_22E3BB2B4(&v692, v469, v464);
    v10 = v640;
LABEL_1512:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-opt-record-file", v641, v10, 6, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v463 & 0x80) == 0)
        goto LABEL_1518;
      goto LABEL_1516;
    }
LABEL_1513:
    if ((v463 & 0x80) == 0)
      goto LABEL_1518;
LABEL_1516:
    v469 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_1517;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v465)
      goto LABEL_1513;
    v467 = &__n;
    v468 = (void ***)&__s2;
    while (v467->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v468)
    {
      v467 = (std::string *)((char *)v467 + 1);
      v468 = (void ***)((char *)v468 + 1);
      if (!--v465)
        goto LABEL_1513;
    }
    goto LABEL_1501;
  }
  v469 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_1511;
LABEL_1517:
  operator delete(v469);
  v10 = v640;
LABEL_1518:
  if (SHIBYTE(v646.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v646.__r_.__value_.__l.__data_);
  if (*((char *)a1 + 583) < 0)
    sub_22E3BB2B4(&v645, (void *)a1[70], a1[71]);
  else
    v645 = *(std::string *)(a1 + 70);
  __n = v645;
  memset(&v645, 0, sizeof(v645));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v470 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v471 = __n.__r_.__value_.__l.__size_;
  v472 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v473 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v473 = __n.__r_.__value_.__l.__size_;
  if (v473)
  {
LABEL_1527:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_1538;
    }
    v476 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_1537:
    sub_22E3BB2B4(&v692, v476, v471);
    v10 = v640;
LABEL_1538:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-main-file-name", v641, v10, 6, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v470 & 0x80) == 0)
        goto LABEL_1544;
      goto LABEL_1542;
    }
LABEL_1539:
    if ((v470 & 0x80) == 0)
      goto LABEL_1544;
LABEL_1542:
    v476 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_1543;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v472)
      goto LABEL_1539;
    v474 = &__n;
    v475 = (void ***)&__s2;
    while (v474->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v475)
    {
      v474 = (std::string *)((char *)v474 + 1);
      v475 = (void ***)((char *)v475 + 1);
      if (!--v472)
        goto LABEL_1539;
    }
    goto LABEL_1527;
  }
  v476 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_1537;
LABEL_1543:
  operator delete(v476);
  v10 = v640;
LABEL_1544:
  if (SHIBYTE(v645.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v645.__r_.__value_.__l.__data_);
  if (*((char *)a1 + 631) < 0)
    sub_22E3BB2B4(&v644, (void *)a1[76], a1[77]);
  else
    v644 = *(std::string *)(a1 + 76);
  __n = v644;
  memset(&v644, 0, sizeof(v644));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v477 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v478 = __n.__r_.__value_.__l.__size_;
  v479 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v480 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v480 = __n.__r_.__value_.__l.__size_;
  if (v480)
  {
LABEL_1553:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_1564;
    }
    v483 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_1563:
    sub_22E3BB2B4(&v692, v483, v478);
    v10 = v640;
LABEL_1564:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-split-dwarf-output", v641, v10, 6, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v477 & 0x80) == 0)
        goto LABEL_1570;
      goto LABEL_1568;
    }
LABEL_1565:
    if ((v477 & 0x80) == 0)
      goto LABEL_1570;
LABEL_1568:
    v483 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_1569;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v479)
      goto LABEL_1565;
    v481 = &__n;
    v482 = (void ***)&__s2;
    while (v481->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v482)
    {
      v481 = (std::string *)((char *)v481 + 1);
      v482 = (void ***)((char *)v482 + 1);
      if (!--v479)
        goto LABEL_1565;
    }
    goto LABEL_1553;
  }
  v483 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_1563;
LABEL_1569:
  operator delete(v483);
  v10 = v640;
LABEL_1570:
  if (SHIBYTE(v644.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v644.__r_.__value_.__l.__data_);
  if (*((char *)a1 + 607) < 0)
    sub_22E3BB2B4(&v643, (void *)a1[73], a1[74]);
  else
    v643 = *(std::string *)(a1 + 73);
  __n = v643;
  memset(&v643, 0, sizeof(v643));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v484 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v485 = __n.__r_.__value_.__l.__size_;
  v486 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v487 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v487 = __n.__r_.__value_.__l.__size_;
  if (v487)
  {
LABEL_1579:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_1590;
    }
    v490 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_1589:
    sub_22E3BB2B4(&v692, v490, v485);
    v10 = v640;
LABEL_1590:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-split-dwarf-file", v641, v10, 6, (uint64_t *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v484 & 0x80) == 0)
        goto LABEL_1596;
      goto LABEL_1594;
    }
LABEL_1591:
    if ((v484 & 0x80) == 0)
      goto LABEL_1596;
LABEL_1594:
    v490 = (void *)__n.__r_.__value_.__r.__words[0];
    goto LABEL_1595;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!(_DWORD)v486)
      goto LABEL_1591;
    v488 = &__n;
    v489 = (void ***)&__s2;
    while (v488->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v489)
    {
      v488 = (std::string *)((char *)v488 + 1);
      v489 = (void ***)((char *)v489 + 1);
      if (!--v486)
        goto LABEL_1591;
    }
    goto LABEL_1579;
  }
  v490 = (void *)__n.__r_.__value_.__r.__words[0];
  if (memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    goto LABEL_1589;
LABEL_1595:
  operator delete(v490);
  v10 = v640;
LABEL_1596:
  if (SHIBYTE(v643.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v643.__r_.__value_.__l.__data_);
  v491 = ((unint64_t)a1[12] >> 41) & 3;
  if ((_DWORD)v491)
    sub_22E7216A8(a2, "-fobjc-dispatch-method=", v641, v10, 4, 0x2Au, v491);
  v492 = *((_DWORD *)a1 + 19);
  if (v492 != 8)
  {
    LOWORD(__dst) = 264;
    LODWORD(__s2) = v492;
    sub_22E721364(a2, "-stack-protector-buffer-size", v641, v10, 6, (uint64_t *)&__s2);
  }
  v493 = (*((_DWORD *)a1 + 23) >> 5) & 1;
  if ((*((_DWORD *)v639 + 6) & 0xFFFFFFFE) == 0x30)
  {
    __s2 = (std::string *)llvm::Triple::getAIRVersion(v639);
    v684 = v494;
    *(_OWORD *)&v692.__r_.__value_.__l.__data_ = 0x8000000300000002;
    v495 = sub_22E3B38EC(&__s2, &v692) ^ 1;
    if (!v493)
      goto LABEL_1610;
  }
  else
  {
    v495 = 0;
    if (!v493)
      goto LABEL_1610;
  }
  if (v493 != v495)
  {
    v496 = *(_DWORD *)(a2 + 8);
    if (v496 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v496 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v496) = "-fpreserve-vec3-type";
    ++*(_DWORD *)(a2 + 8);
  }
LABEL_1610:
  if ((*((_DWORD *)v639 + 6) & 0xFFFFFFFE) == 0x30)
  {
    v497 = *((_DWORD *)a1 + 23);
    __s2 = (std::string *)llvm::Triple::getAIRVersion(v639);
    v684 = v498;
    *(_OWORD *)&v692.__r_.__value_.__l.__data_ = 0x8000000300000002;
    v499 = sub_22E3B38EC(&__s2, &v692);
    if ((v497 & 0x20) == 0 && (v499 & 1) == 0)
    {
      v500 = *(_DWORD *)(a2 + 8);
      if (v500 >= *(_DWORD *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v500 = *(_DWORD *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v500) = "-fno-preserve-vec3-type";
      ++*(_DWORD *)(a2 + 8);
    }
  }
  v501 = *((_DWORD *)a1 + 23);
  if ((v501 & 0x10000) != 0)
  {
    v502 = *(_DWORD *)(a2 + 8);
    if (v502 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v502 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v502) = "-fpass-by-value-is-noalias";
    ++*(_DWORD *)(a2 + 8);
    v501 = *((_DWORD *)a1 + 23);
  }
  if ((v501 & 0x8000) != 0)
  {
    v503 = *(_DWORD *)(a2 + 8);
    if (v503 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v503 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v503) = "-fexperimental-optimized-argument-temporaries";
    ++*(_DWORD *)(a2 + 8);
  }
  if (*((char *)a1 + 951) < 0)
    sub_22E3BB2B4(&v642, (void *)a1[116], a1[117]);
  else
    v642 = *(std::string *)(a1 + 116);
  __n = v642;
  memset(&v642, 0, sizeof(v642));
  v684 = 0;
  __s2 = 0;
  v685 = 0;
  v504 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  v505 = __n.__r_.__value_.__l.__size_;
  v506 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v507 = HIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x7F;
  else
    v507 = __n.__r_.__value_.__l.__size_;
  if (v507)
  {
LABEL_1631:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v692 = __n;
      goto LABEL_1643;
    }
    v511 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_1642:
    sub_22E3BB2B4(&v692, v511, v505);
    v10 = v640;
LABEL_1643:
    LOWORD(__dst) = 260;
    __s2 = &v692;
    sub_22E721364(a2, "-fcuda-include-gpubinary", v641, v10, 6, (uint64_t *)&__s2);
    v510 = a7;
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v692.__r_.__value_.__l.__data_);
      if ((v504 & 0x80) == 0)
        goto LABEL_1649;
    }
    else if ((v504 & 0x80) == 0)
    {
      goto LABEL_1649;
    }
    goto LABEL_1647;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v511 = (void *)__n.__r_.__value_.__r.__words[0];
    if (!memcmp(__n.__r_.__value_.__l.__data_, &__s2, __n.__r_.__value_.__l.__size_))
    {
      v510 = a7;
      goto LABEL_1648;
    }
    goto LABEL_1642;
  }
  if ((_DWORD)v506)
  {
    v508 = &__n;
    v509 = (void ***)&__s2;
    while (v508->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v509)
    {
      v508 = (std::string *)((char *)v508 + 1);
      v509 = (void ***)((char *)v509 + 1);
      if (!--v506)
        goto LABEL_1638;
    }
    goto LABEL_1631;
  }
LABEL_1638:
  v510 = a7;
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    goto LABEL_1649;
LABEL_1647:
  v511 = (void *)__n.__r_.__value_.__r.__words[0];
LABEL_1648:
  operator delete(v511);
  v10 = v640;
LABEL_1649:
  if (SHIBYTE(v642.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v642.__r_.__value_.__l.__data_);
  if ((*((_BYTE *)a1 + 33) & 0x18) != 0 && (a1[13] & 3) != 3)
    sub_22E6E0868(a2, qword_22F45DD60[a1[13] & 3], (uint64_t (*)(uint64_t, _QWORD *))v641, v10);
  if ((*((_DWORD *)a1 + 23) & 2) != 0)
  {
    if ((*(_DWORD *)(v510 + 52) & 0xC) == 0)
      goto LABEL_1660;
    v512 = 610;
  }
  else
  {
    if ((*(_DWORD *)(v510 + 52) & 0xC) != 0)
      goto LABEL_1660;
    v512 = 1023;
  }
  sub_22E6E0868(a2, v512, (uint64_t (*)(uint64_t, _QWORD *))v641, v10);
LABEL_1660:
  v513 = (((unint64_t)a1[12] >> 57) & 0xF) - 2;
  if (v513 <= 5)
  {
    v514 = qword_22F45DD78[v513];
    v515 = (void **)off_24FA70128[(int)v513];
    LOWORD(__dst) = 261;
    __s2 = (std::string *)v515;
    v684 = v514;
    sub_22E6E094C(a2, 263, (uint64_t)&__s2, v641, v10);
  }
  v516 = (uint64_t *)a1[51];
  if (v516 != a1 + 52)
  {
    do
    {
      v517 = *((_BYTE *)v516 + 55);
      v518 = v517;
      v519 = v517 & 0x7F;
      if (v518 >= 0)
        v520 = v519;
      else
        v520 = v516[5];
      sub_22E3B8BF4((uint64_t)&__n, v520 + 1);
      if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v521 = &__n;
      else
        v521 = (std::string *)__n.__r_.__value_.__r.__words[0];
      if (v520)
      {
        if (*((char *)v516 + 55) >= 0)
          v522 = v516 + 4;
        else
          v522 = (const void *)v516[4];
        memmove(v521, v522, v520);
      }
      *(_WORD *)((char *)&v521->__r_.__value_.__l.__data_ + v520) = 61;
      v523 = *((_BYTE *)v516 + 79);
      if (v523 >= 0)
        v524 = (const std::string::value_type *)(v516 + 7);
      else
        v524 = (const std::string::value_type *)v516[7];
      if (v523 >= 0)
        v525 = v523 & 0x7F;
      else
        v525 = v516[8];
      v526 = std::string::append(&__n, v524, v525);
      v527 = v526->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v692.__r_.__value_.__l.__data_ = *(_OWORD *)&v526->__r_.__value_.__l.__data_;
      v692.__r_.__value_.__r.__words[2] = v527;
      v526->__r_.__value_.__l.__size_ = 0;
      v526->__r_.__value_.__r.__words[2] = 0;
      v526->__r_.__value_.__r.__words[0] = 0;
      LOWORD(__dst) = 260;
      __s2 = &v692;
      sub_22E6E094C(a2, 553, (uint64_t)&__s2, v641, v640);
      if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v692.__r_.__value_.__l.__data_);
      if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__n.__r_.__value_.__l.__data_);
      v528 = (uint64_t *)v516[1];
      if (v528)
      {
        do
        {
          v529 = v528;
          v528 = (uint64_t *)*v528;
        }
        while (v528);
      }
      else
      {
        do
        {
          v529 = (uint64_t *)v516[2];
          v585 = *v529 == (_QWORD)v516;
          v516 = v529;
        }
        while (!v585);
      }
      v516 = v529;
    }
    while (v529 != a1 + 52);
  }
  v530 = (uint64_t *)a1[54];
  if (v530 != a1 + 55)
  {
    do
    {
      v531 = *((_BYTE *)v530 + 55);
      v532 = v531;
      v533 = v531 & 0x7F;
      if (v532 >= 0)
        v534 = v533;
      else
        v534 = v530[5];
      sub_22E3B8BF4((uint64_t)&__n, v534 + 1);
      if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v535 = &__n;
      else
        v535 = (std::string *)__n.__r_.__value_.__r.__words[0];
      if (v534)
      {
        if (*((char *)v530 + 55) >= 0)
          v536 = v530 + 4;
        else
          v536 = (const void *)v530[4];
        memmove(v535, v536, v534);
      }
      *(_WORD *)((char *)&v535->__r_.__value_.__l.__data_ + v534) = 61;
      v537 = *((_BYTE *)v530 + 79);
      if (v537 >= 0)
        v538 = (const std::string::value_type *)(v530 + 7);
      else
        v538 = (const std::string::value_type *)v530[7];
      if (v537 >= 0)
        v539 = v537 & 0x7F;
      else
        v539 = v530[8];
      v540 = std::string::append(&__n, v538, v539);
      v541 = v540->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v692.__r_.__value_.__l.__data_ = *(_OWORD *)&v540->__r_.__value_.__l.__data_;
      v692.__r_.__value_.__r.__words[2] = v541;
      v540->__r_.__value_.__l.__size_ = 0;
      v540->__r_.__value_.__r.__words[2] = 0;
      v540->__r_.__value_.__r.__words[0] = 0;
      LOWORD(__dst) = 260;
      __s2 = &v692;
      sub_22E6E094C(a2, 516, (uint64_t)&__s2, v641, v640);
      if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v692.__r_.__value_.__l.__data_);
      if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__n.__r_.__value_.__l.__data_);
      v542 = (uint64_t *)v530[1];
      if (v542)
      {
        do
        {
          v543 = v542;
          v542 = (uint64_t *)*v542;
        }
        while (v542);
      }
      else
      {
        do
        {
          v543 = (uint64_t *)v530[2];
          v585 = *v543 == (_QWORD)v530;
          v530 = v543;
        }
        while (!v585);
      }
      v530 = v543;
    }
    while (v543 != a1 + 55);
  }
  v544 = a1[4];
  if ((v544 & 0x200000) != 0)
  {
    v547 = v640;
    v546 = v641;
    sub_22E6E0868(a2, 2701, (uint64_t (*)(uint64_t, _QWORD *))v641, v640);
    v545 = (unint64_t)a1[4] >> 13;
  }
  else
  {
    v545 = v544 >> 13;
    v547 = v640;
    v546 = v641;
  }
  v548 = v638;
  v549 = v545 & 3;
  if (v549 == 2)
  {
    v550 = "z";
  }
  else
  {
    if (v549 != 1)
      goto LABEL_1726;
    v550 = "s";
  }
  __s2 = (std::string *)v550;
  LOWORD(__dst) = 259;
  sub_22E6E094C(a2, 2821, (uint64_t)&__s2, v546, v547);
LABEL_1726:
  v551 = a1[4];
  if ((*((_BYTE *)a1 + 44) & 1) != 0)
  {
    if ((v551 & 0x1000) != 0)
      goto LABEL_1732;
    v552 = 1797;
  }
  else
  {
    if ((v551 & 0x1000) == 0)
      goto LABEL_1732;
    v552 = 1364;
  }
  sub_22E6E0868(a2, v552, (uint64_t (*)(uint64_t, _QWORD *))v546, v547);
LABEL_1732:
  v553 = *((_BYTE *)a1 + 159);
  v554 = v553;
  v555 = v553 & 0x7F;
  if (v554 < 0)
    v555 = a1[18];
  if (v555)
  {
    LOWORD(__dst) = 260;
    __s2 = (std::string *)(a1 + 17);
    sub_22E6E094C(a2, 442, (uint64_t)&__s2, v546, v547);
  }
  if (*((_DWORD *)a1 + 23) >> 6 == 1)
  {
    v556 = 1902;
  }
  else
  {
    if (*((_DWORD *)a1 + 23) >> 6)
      goto LABEL_1741;
    v556 = 1932;
  }
  sub_22E6E0868(a2, v556, (uint64_t (*)(uint64_t, _QWORD *))v546, v547);
LABEL_1741:
  v557 = ((unint64_t)a1[12] >> 55) & 3;
  if ((_DWORD)v557 == 2)
  {
    v558 = "mangled";
  }
  else
  {
    if ((_DWORD)v557 != 1)
      goto LABEL_1746;
    v558 = "simple";
  }
  __s2 = (std::string *)v558;
  LOWORD(__dst) = 259;
  sub_22E6E094C(a2, 1942, (uint64_t)&__s2, v546, v547);
LABEL_1746:
  v559 = a1[4];
  if ((v559 & 0x800000000000000) != 0)
  {
    if ((v559 & 0x1000000000000000) != 0)
    {
      __s2 = (std::string *)"per-pass-run";
      LOWORD(__dst) = 259;
      sub_22E6E094C(a2, 1754, (uint64_t)&__s2, v546, v547);
    }
    else
    {
      sub_22E6E0868(a2, 1755, (uint64_t (*)(uint64_t, _QWORD *))v546, v547);
    }
  }
  if ((*((_DWORD *)a1 + 23) & 0x200000) != 0)
  {
    __s2 = (std::string *)&v685;
    v684 = 0x800000000;
    v560 = (uint64_t *)a1[181];
    if (v560 != a1 + 182)
    {
      do
      {
        v561 = (*((_DWORD *)a1 + 23) >> 22) & 1;
        if (v561 != *((unsigned __int8 *)v560 + 56))
        {
          if (v561)
            v562 = 1338;
          else
            v562 = 1760;
          v693 = 260;
          v692.__r_.__value_.__r.__words[0] = (std::string::size_type)(v560 + 4);
          sub_22E6E094C(a2, v562, (uint64_t)&v692, v641, v547);
        }
        v563 = (uint64_t *)v560[1];
        if (v563)
        {
          do
          {
            v564 = v563;
            v563 = (uint64_t *)*v563;
          }
          while (v563);
        }
        else
        {
          do
          {
            v564 = (uint64_t *)v560[2];
            v585 = *v564 == (_QWORD)v560;
            v560 = v564;
          }
          while (!v585);
        }
        v560 = v564;
      }
      while (v564 != a1 + 182);
      v546 = v641;
      v548 = v638;
      if (__s2 != (std::string *)&v685)
        free(__s2);
    }
  }
  v565 = a1[3];
  if ((v565 & 0x30000000000) == 0x10000000000)
  {
    __s2 = (std::string *)"full";
    LOWORD(__dst) = 259;
    sub_22E6E094C(a2, 846, (uint64_t)&__s2, v546, v547);
    v565 = a1[3];
  }
  if ((v565 & 0x20000000000) != 0)
  {
    __s2 = (std::string *)"thin";
    LOWORD(__dst) = 259;
    sub_22E6E094C(a2, 846, (uint64_t)&__s2, v546, v547);
  }
  v566 = *((_BYTE *)a1 + 879);
  v567 = v566;
  v568 = v566 & 0x7F;
  if (v567 < 0)
    v568 = a1[108];
  if (v568)
  {
    LOWORD(__dst) = 260;
    __s2 = (std::string *)(a1 + 107);
    sub_22E6E094C(a2, 1751, (uint64_t)&__s2, v546, v547);
  }
  v569 = *((_BYTE *)a1 + 927);
  v570 = v569 & 0x7F;
  if (v569 >= 0)
    v571 = v569 & 0x7F;
  else
    v571 = a1[114];
  v572 = v548[23];
  v573 = v572;
  v574 = v572 & 0x7F;
  if (v573 < 0)
    v574 = *((_QWORD *)v548 + 1);
  if (v571 != v574)
    goto LABEL_1789;
  v575 = (const void **)(a1 + 113);
  if (v573 >= 0)
    v576 = v548;
  else
    v576 = *(unsigned __int8 **)v548;
  if ((*((_BYTE *)a1 + 927) & 0x80) != 0)
  {
    if (memcmp(*v575, v576, a1[114]))
      goto LABEL_1789;
    goto LABEL_1788;
  }
  if ((v569 & 0x7F) == 0)
  {
LABEL_1788:
    __s2 = (std::string *)"obj";
    LOWORD(__dst) = 259;
    sub_22E6E094C(a2, 2933, (uint64_t)&__s2, v546, v547);
    goto LABEL_1789;
  }
  while (*(unsigned __int8 *)v575 == *v576)
  {
    v575 = (const void **)((char *)v575 + 1);
    ++v576;
    if (!--v570)
      goto LABEL_1788;
  }
LABEL_1789:
  v577 = *((_BYTE *)a1 + 807);
  v578 = v577;
  v579 = v577 & 0x7F;
  if (v578 < 0)
    v579 = a1[99];
  if (v579)
  {
    v580 = (const std::string *)(a1 + 98);
    v581 = v579 - 15;
    if (v579 == 15
      && (v578 >= 0 ? (v582 = a1 + 98) : (v582 = (uint64_t *)v580->__r_.__value_.__r.__words[0]),
          (v583 = *v582, v584 = *(uint64_t *)((char *)v582 + 7), v583 == 0x2E666F72706D656DLL)
        ? (v585 = v584 == 0x776172666F72702ELL)
        : (v585 = 0),
          v585))
    {
      sub_22E6E0868(a2, 861, (uint64_t (*)(uint64_t, _QWORD *))v546, v547);
    }
    else
    {
      std::string::basic_string(&v692, v580, 0, v581, (std::allocator<char> *)&__s2);
      LOWORD(__dst) = 260;
      __s2 = &v692;
      sub_22E6E094C(a2, 860, (uint64_t)&__s2, v546, v547);
      if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v692.__r_.__value_.__l.__data_);
    }
  }
  if (*((_DWORD *)a1 + 70) != 708325428)
  {
    LOWORD(__dst) = 261;
    __s2 = (std::string *)(a1 + 35);
    v684 = 4;
    sub_22E6E094C(a2, 232, (uint64_t)&__s2, v546, v547);
  }
  v586 = *((unsigned int *)a1 + 360);
  if ((_DWORD)v586 != 15)
  {
    v692.__r_.__value_.__r.__words[0] = (std::string::size_type)&v692.__r_.__value_.__r.__words[2];
    v692.__r_.__value_.__l.__size_ = 0x200000000;
    sub_22F20EAB0(v586, (uint64_t)&v692);
    memset(&__n, 0, sizeof(__n));
    LODWORD(v684) = 0;
    v688 = 0;
    v689 = 0;
    v690 = 1;
    __dst = 0;
    v685 = 0;
    v686 = 0;
    __s2 = (std::string *)(MEMORY[0x24BED83D8] + 16);
    v691 = &__n;
    llvm::raw_ostream::SetBufferAndMode();
    v587 = LODWORD(v692.__r_.__value_.__r.__words[1]);
    if (LODWORD(v692.__r_.__value_.__r.__words[1]))
    {
      v588 = v692.__r_.__value_.__r.__words[0];
      v589 = *(const void **)v692.__r_.__value_.__l.__data_;
      v590 = *(_QWORD *)(v692.__r_.__value_.__r.__words[0] + 8);
      if (v590 <= v686 - (_BYTE *)__dst)
      {
        if (v590)
        {
          memcpy(__dst, v589, *(_QWORD *)(v692.__r_.__value_.__r.__words[0] + 8));
          __dst = (char *)__dst + v590;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&__s2, (const char *)v589);
      }
      if ((_DWORD)v587 != 1)
      {
        v591 = v588 + 16 * v587;
        v592 = v588 + 16;
        do
        {
          if (v686 == __dst)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__s2, ",");
            v593 = (char *)__dst;
          }
          else
          {
            *(_BYTE *)__dst = 44;
            v593 = (char *)__dst + 1;
            __dst = (char *)__dst + 1;
          }
          v594 = *(const void **)v592;
          v595 = *(_QWORD *)(v592 + 8);
          if (v595 <= v686 - v593)
          {
            if (v595)
            {
              memcpy(v593, v594, *(_QWORD *)(v592 + 8));
              __dst = (char *)__dst + v595;
            }
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__s2, (const char *)v594);
          }
          v592 += 16;
          v546 = v641;
        }
        while (v592 != v591);
      }
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__s2);
    if ((std::string::size_type *)v692.__r_.__value_.__l.__data_ != &v692.__r_.__value_.__r.__words[2])
      free(v692.__r_.__value_.__l.__data_);
    v596 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
    v597 = *((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x7F;
    if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v597 = __n.__r_.__value_.__l.__size_;
    v547 = v640;
    if (v597)
    {
      LOWORD(__dst) = 260;
      __s2 = &__n;
      sub_22E6E094C(a2, 1855, (uint64_t)&__s2, v546, v640);
      v596 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
    }
    if (v596 < 0)
      operator delete(__n.__r_.__value_.__l.__data_);
  }
  v598 = *a1;
  if ((~*a1 & 0x60000000000000) != 0)
  {
    if ((v598 & 0x20000000000000) != 0)
    {
      v599 = "return";
    }
    else
    {
      if ((v598 & 0x40000000000000) == 0)
        goto LABEL_1837;
      v599 = "branch";
    }
    __s2 = (std::string *)v599;
  }
  else
  {
    __s2 = (std::string *)"full";
  }
  LOWORD(__dst) = 259;
  sub_22E6E094C(a2, 477, (uint64_t)&__s2, v546, v547);
LABEL_1837:
  v600 = a1[67];
  for (i = a1[68]; v600 != i; v600 += 32)
  {
    if (*(_DWORD *)(v600 + 28) != 2 || *(_BYTE *)(v600 + 24) == 0)
    {
      v603 = 2279;
    }
    else if (*(_BYTE *)(v600 + 25))
    {
      v603 = 2280;
    }
    else
    {
      v603 = 2279;
    }
    LOWORD(__dst) = 260;
    __s2 = (std::string *)v600;
    sub_22E6E094C(a2, v603, (uint64_t)&__s2, v546, v547);
  }
  if ((*a1 & 0x800000000000) != 0)
  {
    if ((*a1 & 0x400000000000) != 0)
      v604 = 640;
    else
      v604 = 1039;
    sub_22E6E0868(a2, v604, (uint64_t (*)(uint64_t, _QWORD *))v546, v547);
  }
  if (*((unsigned __int8 *)a1 + 504) | *((unsigned __int8 *)a1 + 505))
  {
    memset(&v692, 0, sizeof(v692));
    LODWORD(v684) = 0;
    v688 = 0;
    v689 = 0;
    v690 = 1;
    __dst = 0;
    v685 = 0;
    v686 = 0;
    __s2 = (std::string *)(MEMORY[0x24BED83D8] + 16);
    v691 = &v692;
    llvm::raw_ostream::SetBufferAndMode();
    sub_22F24F8E4((llvm::raw_ostream *)(a1 + 63), (llvm::raw_ostream *)&__s2);
    if (SHIBYTE(v691->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_22E3BB2B4(&__n, v691->__r_.__value_.__l.__data_, v691->__r_.__value_.__l.__size_);
    }
    else
    {
      v636 = *(_OWORD *)&v691->__r_.__value_.__l.__data_;
      __n.__r_.__value_.__r.__words[2] = v691->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__n.__r_.__value_.__l.__data_ = v636;
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v692.__r_.__value_.__l.__data_);
    LOWORD(__dst) = 260;
    __s2 = &__n;
    sub_22E6E094C(a2, 573, (uint64_t)&__s2, v546, v547);
    if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__n.__r_.__value_.__l.__data_);
  }
  if (*((unsigned __int8 *)a1 + 506) | *((unsigned __int8 *)a1 + 507))
  {
    memset(&v692, 0, sizeof(v692));
    LODWORD(v684) = 0;
    v688 = 0;
    v689 = 0;
    v690 = 1;
    __dst = 0;
    v685 = 0;
    v686 = 0;
    __s2 = (std::string *)(MEMORY[0x24BED83D8] + 16);
    v691 = &v692;
    llvm::raw_ostream::SetBufferAndMode();
    sub_22F24F8E4((llvm::raw_ostream *)((char *)a1 + 506), (llvm::raw_ostream *)&__s2);
    if (SHIBYTE(v691->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_22E3BB2B4(&__n, v691->__r_.__value_.__l.__data_, v691->__r_.__value_.__l.__size_);
    }
    else
    {
      v637 = *(_OWORD *)&v691->__r_.__value_.__l.__data_;
      __n.__r_.__value_.__r.__words[2] = v691->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__n.__r_.__value_.__l.__data_ = v637;
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__s2);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v692.__r_.__value_.__l.__data_);
    LOWORD(__dst) = 260;
    __s2 = &__n;
    sub_22E6E094C(a2, 572, (uint64_t)&__s2, v546, v547);
    if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__n.__r_.__value_.__l.__data_);
  }
  v605 = ((unint64_t)a1[12] >> 47) & 3;
  if ((_DWORD)v605 == 2)
  {
    v606 = (*((_DWORD *)v639 + 6) - 21) >= 2;
    v607 = 1591;
    v608 = 2633;
  }
  else
  {
    if ((_DWORD)v605 != 1)
      goto LABEL_1863;
    v606 = (*((_DWORD *)v639 + 6) - 21) >= 2;
    v607 = 1500;
    v608 = 2096;
  }
  if (v606)
    v609 = v607;
  else
    v609 = v608;
  sub_22E6E0868(a2, v609, (uint64_t (*)(uint64_t, _QWORD *))v546, v547);
LABEL_1863:
  if ((*((_BYTE *)a1 + 2) & 0x80) != 0)
    sub_22E6E0868(a2, 2088, (uint64_t (*)(uint64_t, _QWORD *))v546, v547);
  v610 = *((_BYTE *)a1 + 1023);
  v611 = v610;
  v612 = v610 & 0x7F;
  if (v611 < 0)
    v612 = a1[126];
  if (v612)
  {
    LOWORD(__dst) = 260;
    __s2 = (std::string *)(a1 + 125);
    sub_22E6E094C(a2, 2807, (uint64_t)&__s2, v546, v547);
  }
  v613 = *((_BYTE *)a1 + 1047);
  v614 = v613;
  v615 = v613 & 0x7F;
  if (v614 < 0)
    v615 = a1[129];
  if (v615)
  {
    LOWORD(__dst) = 260;
    __s2 = (std::string *)(a1 + 128);
    sub_22E6E094C(a2, 2806, (uint64_t)&__s2, v546, v547);
  }
  sub_22E6E0A28(a2, v546, v547, 0xB6Bu, "pass", 4, (uint64_t)(a1 + 134));
  sub_22E6E0A28(a2, v546, v547, 0xB6Au, "pass-missed", 11, (uint64_t)(a1 + 140));
  sub_22E6E0A28(a2, v546, v547, 0xB69u, "pass-analysis", 13, (uint64_t)(a1 + 146));
  v616 = (void **)(a1 + 209);
  v617 = *((_BYTE *)a1 + 1680) == 0;
  if (!*((_BYTE *)a1 + 1680))
    v616 = (void **)"auto";
  BYTE1(__dst) = 1;
  if (v617)
    v618 = 3;
  else
    v618 = 12;
  __s2 = (std::string *)v616;
  LOBYTE(__dst) = v618;
  sub_22E6E094C(a2, 598, (uint64_t)&__s2, v546, v547);
  LOWORD(__dst) = 268;
  __s2 = (std::string *)(a1 + 211);
  sub_22E6E094C(a2, 599, (uint64_t)&__s2, v546, v547);
  v619 = a1[155];
  v620 = a1[156];
  __s2 = (std::string *)&v685;
  v684 = 0x400000000;
  sub_22F1DE81C(v619, v620, (uint64_t)&__s2);
  p_data = (void **)&__s2->__r_.__value_.__l.__data_;
  if ((_DWORD)v684)
  {
    v622 = (void **)(&__s2->__r_.__value_.__l.__data_ + 2 * v684);
    do
    {
      v623 = (std::string::size_type)*p_data;
      v624 = (std::string::size_type)p_data[1];
      p_data += 2;
      v693 = 261;
      v692.__r_.__value_.__r.__words[0] = v623;
      v692.__r_.__value_.__l.__size_ = v624;
      sub_22E6E094C(a2, 1660, (uint64_t)&v692, v546, v547);
    }
    while (p_data != v622);
    p_data = (void **)&__s2->__r_.__value_.__l.__data_;
  }
  if (p_data != (void **)&v685)
    free(p_data);
  v625 = a1[157];
  v626 = a1[158];
  __s2 = (std::string *)&v685;
  v684 = 0x400000000;
  sub_22F1DE81C(v625, v626, (uint64_t)&__s2);
  v627 = (void **)&__s2->__r_.__value_.__l.__data_;
  if ((_DWORD)v684)
  {
    v628 = (void **)(&__s2->__r_.__value_.__l.__data_ + 2 * v684);
    do
    {
      v629 = (std::string::size_type)*v627;
      v630 = (std::string::size_type)v627[1];
      v627 += 2;
      v693 = 261;
      v692.__r_.__value_.__r.__words[0] = v629;
      v692.__r_.__value_.__l.__size_ = v630;
      sub_22E6E094C(a2, 1668, (uint64_t)&v692, v546, v547);
    }
    while (v627 != v628);
    v627 = (void **)&__s2->__r_.__value_.__l.__data_;
  }
  if (v627 != (void **)&v685)
    free(v627);
  if ((*((_BYTE *)a1 + 5) & 4) == 0)
    sub_22E6E0868(a2, 2888, (uint64_t (*)(uint64_t, _QWORD *))v546, v547);
  v631 = a1[4];
  if ((v631 & 0x6000) != 0x4000 && (a1[3] & 0x800000000000) == 0 && (v631 & 0x1800) != 0)
    sub_22E6E0868(a2, 1310, (uint64_t (*)(uint64_t, _QWORD *))v546, v547);
  v634 = ((unint64_t)a1[12] >> 53) & 3;
  if ((_DWORD)v634 == 1)
  {
    v635 = 675;
  }
  else
  {
    if ((_DWORD)v634 != 2)
      return;
    v635 = 1052;
  }
  sub_22E6E0868(a2, v635, (uint64_t (*)(uint64_t, _QWORD *))v546, v547);
}

uint64_t sub_22E6E0868(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD *), uint64_t a4)
{
  const char ***Option;
  const char ***v8;
  const char *v9;
  size_t v10;
  const char *v11;
  size_t v12;
  uint64_t result;
  uint64_t v14;
  unsigned int v15;
  _QWORD v16[4];
  __int16 v17;

  sub_22E80AA50();
  Option = (const char ***)llvm::opt::OptTable::getOption();
  v8 = Option;
  v9 = **Option;
  if (v9)
    v10 = strlen(**Option);
  else
    v10 = 0;
  v11 = (const char *)v8[1];
  if (v11)
    v12 = strlen(v11);
  else
    v12 = 0;
  v16[0] = v9;
  v16[1] = v10;
  v16[2] = v11;
  v16[3] = v12;
  v17 = 1285;
  result = a3(a4, v16);
  v14 = result;
  v15 = *(_DWORD *)(a1 + 8);
  if (v15 >= *(_DWORD *)(a1 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v14;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22E6E094C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, __int128 *), uint64_t a5)
{
  const char ***Option;
  const char ***v10;
  const char *v11;
  size_t v12;
  const char **v13;
  size_t v14;
  _BYTE *v15;
  char v16;
  __int128 v17;
  _QWORD v19[4];
  __int16 v20;
  _OWORD v21[2];
  __int16 v22;

  sub_22E80AA50();
  Option = (const char ***)llvm::opt::OptTable::getOption();
  v10 = Option;
  v11 = **Option;
  if (v11)
    v12 = strlen(**Option);
  else
    v12 = 0;
  v13 = v10[1];
  if (v13)
    v14 = strlen((const char *)v10[1]);
  else
    v14 = 0;
  v19[0] = v11;
  v19[1] = v12;
  v19[2] = v13;
  v19[3] = v14;
  v20 = 1285;
  v15 = (_BYTE *)a4(a5, (__int128 *)v19);
  v16 = *((_BYTE *)v10 + 36);
  v17 = *(_OWORD *)(a3 + 16);
  v21[0] = *(_OWORD *)a3;
  v21[1] = v17;
  v22 = *(_WORD *)(a3 + 32);
  return sub_22E721364(a1, v15, a4, a5, v16, (uint64_t *)v21);
}

uint64_t sub_22E6E0A28(uint64_t result, uint64_t (*a2)(uint64_t, __int128 *), uint64_t a3, unsigned int a4, const char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  __int16 v13;

  if (*(_QWORD *)(a7 + 32))
  {
    v13 = 260;
    v9 = (const char *)(a7 + 8);
    v8 = a4;
  }
  else
  {
    if (*(_DWORD *)a7 == 3)
    {
      v9 = "no-";
      v10 = 3;
      v11 = a5;
      v12 = a6;
      v13 = 1285;
    }
    else
    {
      if (*(_DWORD *)a7 != 1)
        return result;
      v13 = 261;
      v9 = a5;
      v10 = a6;
    }
    v8 = 2929;
  }
  return sub_22E6E094C(result, v8, (uint64_t)&v9, a2, a3);
}

void sub_22E6E0AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::string *a10)
{
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  llvm::Triple *v15;
  llvm::Triple *v16;
  uint64_t v17;
  uint64_t v18;
  const char **v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  size_t v27;
  unsigned __int8 *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  void **v56;
  int v57;
  int v58;
  void **v59;
  int v60;
  int v61;
  void **v62;
  int v63;
  int v64;
  int v65;
  void **v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  int v75;
  uint64_t v76;
  void **v77;
  int v78;
  int v79;
  void **v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  int v87;
  unint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  __int128 *v100;
  int v101;
  int v102;
  uint64_t v103;
  void **v104;
  void **v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unsigned int *v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  int v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  int v129;
  uint64_t v130;
  unint64_t v131;
  int v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  int v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  int v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  int v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  int v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  int v162;
  uint64_t v163;
  unint64_t v164;
  int v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  int v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  int v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  int v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  int v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  int v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  int v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  int v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  int v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  int v221;
  uint64_t v222;
  unint64_t v223;
  int v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  int v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  int v239;
  uint64_t v240;
  unint64_t v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  int v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  int v256;
  uint64_t v257;
  void **v258;
  int v259;
  int v260;
  int v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  unsigned int *v267;
  unint64_t v268;
  int v269;
  uint64_t v270;
  unint64_t v271;
  int v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unint64_t v277;
  int v278;
  uint64_t v279;
  int v280;
  uint64_t v281;
  unint64_t v282;
  int v283;
  uint64_t v284;
  unint64_t v285;
  int v286;
  uint64_t v287;
  unint64_t v288;
  int v289;
  uint64_t v290;
  unint64_t v291;
  int v292;
  uint64_t v293;
  unint64_t v294;
  int v295;
  uint64_t v296;
  unint64_t v297;
  int v298;
  uint64_t v299;
  int v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  unint64_t v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  uint64_t v311;
  void **v312;
  _QWORD *v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  int v317;
  int v318;
  uint64_t v319;
  uint64_t *v320;
  int v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  void **v344;
  int v345;
  int v346;
  int v347;
  uint64_t v348;
  unint64_t v349;
  unsigned int *v350;
  int v351;
  uint64_t v352;
  unint64_t v353;
  int v354;
  uint64_t v355;
  int v356;
  uint64_t v357;
  int v358;
  uint64_t v359;
  __int16 v360;
  _QWORD *v361;
  int v362;
  uint64_t v363;
  int v364;
  __int16 v365;
  _QWORD *v366;
  int v367;
  uint64_t v368;
  int v369;
  uint64_t v370;
  void **v371;
  int v372;
  int v373;
  int v374;
  uint64_t v375;
  unint64_t v376;
  int v377;
  uint64_t v378;
  void **v379;
  int v380;
  int v381;
  int v382;
  uint64_t v383;
  _QWORD *v384;
  uint64_t *v385;
  int v386;
  unint64_t v387;
  int v388;
  uint64_t v389;
  _QWORD *v390;
  int v391;
  unint64_t v392;
  int v393;
  __int16 v394;
  int v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v399;
  int v400;
  uint64_t v401;
  _QWORD *v402;
  int v403;
  uint64_t v404;
  int v405;
  uint64_t v406;
  int v407;
  uint64_t v408;
  uint64_t v409;
  __int16 v410;
  __int16 v411;
  __int16 v412;
  unint64_t v413;
  unint64_t v414;
  uint64_t v415;
  unint64_t v416;
  unint64_t v417;
  unint64_t v418;
  __int16 v419;
  unint64_t v420;
  _QWORD *v421;
  int v422;
  uint64_t v423;
  uint64_t v424;
  int v425;
  int v426;
  uint64_t v427;
  int v428;
  unsigned int v429;
  int v430;
  uint64_t v431;
  int v432;
  unsigned int v433;
  int v434;
  int v435;
  uint64_t v436;
  unint64_t v437;
  int v438;
  uint64_t v439;
  _QWORD *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  unint64_t v445;
  void **v446;
  uint64_t v447;
  llvm::Triple *v448;
  uint64_t *v449;
  int v450;
  int v451;
  void **v452;
  int v453;
  int v454;
  unsigned int *v455;
  uint64_t v456;
  unint64_t v457;
  uint64_t v458;
  void **v459;
  int v460;
  int v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  void **v468;
  int v469;
  int v470;
  uint64_t *v471;
  uint64_t v472;
  uint64_t v473;
  int v474;
  unsigned int v475;
  uint64_t v476;
  int v477;
  uint64_t v478;
  unsigned int v479;
  uint64_t v480;
  int v481;
  uint64_t v482;
  unsigned int v483;
  uint64_t v484;
  int v485;
  uint64_t v486;
  unint64_t v487;
  unint64_t v488;
  unint64_t v489;
  void **v490;
  int v491;
  int v492;
  unint64_t v493;
  void **v494;
  int v495;
  int v496;
  unint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  unint64_t v502;
  void **v503;
  int v504;
  int v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  __int16 v513;
  uint64_t v514;
  __int16 v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  void **v520;
  int v521;
  int v522;
  void **v523;
  int v524;
  int v525;
  uint64_t v526;
  uint64_t v527;
  void **v528;
  int v529;
  int v530;
  unint64_t v531;
  void **v532;
  int v533;
  int v534;
  void **v535;
  int v536;
  int v537;
  uint64_t v538;
  unint64_t v539;
  uint64_t v540;
  unint64_t v541;
  unint64_t v542;
  int v543;
  uint64_t v544;
  unint64_t v545;
  int v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  unint64_t v551;
  unint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  unint64_t v583;
  unint64_t v584;
  void **v585;
  int v586;
  int v587;
  void **v588;
  uint64_t *v589;
  int v590;
  int v591;
  int v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  unint64_t v597;
  int v598;
  uint64_t v599;
  int v600;
  uint64_t v601;
  unint64_t v602;
  int v603;
  uint64_t v604;
  unint64_t v605;
  void **v606;
  int v607;
  int v608;
  unint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  int v614;
  uint64_t v615;
  unint64_t v616;
  int v617;
  uint64_t v618;
  unint64_t v619;
  int v620;
  uint64_t v621;
  unint64_t v622;
  int v623;
  uint64_t v624;
  char *v625;
  uint64_t v626;
  int v627;
  int v628;
  int v629;
  char *v630;
  uint64_t v631;
  int v632;
  int v633;
  int v634;
  int v635;
  uint64_t v636;
  uint64_t v637;
  __int16 v638;
  __int16 v639;
  __int16 v640;
  void **v641;
  int v642;
  int v643;
  void **v644;
  int v645;
  int v646;
  void **v647;
  int v648;
  int v649;
  void **v650;
  int v651;
  int v652;
  unint64_t v653;
  unint64_t v654;
  uint64_t *v655;
  void *v656;
  int v657;
  int v658;
  unsigned int v659;
  int v660;
  void *v661;
  int v662;
  int v663;
  unsigned int v664;
  int v665;
  uint64_t v666;
  int v667;
  unsigned int v668;
  uint64_t v669;
  int v670;
  void **v671;
  int v672;
  int v673;
  uint64_t v674;
  unint64_t v675;
  int v676;
  uint64_t v677;
  __int16 v678;
  __int16 v679;
  int v680;
  uint64_t *v681;
  uint64_t v682;
  int v683;
  int v684;
  uint64_t v685;
  uint64_t v686;
  const char **v687;
  const char *v688;
  BOOL v689;
  uint64_t v690;
  unint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  __int128 *v701;
  size_t v702;
  uint64_t v703;
  unsigned __int8 *v704;
  _QWORD *v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  __int16 v709;
  void **v710;
  void **v711;
  uint64_t v712;
  char v713;
  BOOL v714;
  void *v715;
  void *v716;
  unint64_t v717;
  const void *v718;
  size_t v719;
  void *v720;
  char *v721;
  size_t v722;
  __int128 *v723;
  uint64_t v724;
  uint64_t v725;
  __int128 *p_dst;
  uint64_t v727;
  uint64_t v728;
  void **v729;
  void **v730;
  uint64_t v731;
  char v732;
  BOOL v733;
  void *v734;
  void *v735;
  unint64_t v736;
  const void *v737;
  size_t v738;
  void *v739;
  char *v740;
  size_t v741;
  __int128 *v742;
  uint64_t v743;
  uint64_t v744;
  __int128 *v745;
  uint64_t v746;
  uint64_t v747;
  _QWORD *v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  char v752;
  int v753;
  uint64_t v754;
  unint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  char v759;
  BOOL v760;
  void *v761;
  size_t v762;
  size_t v763;
  unint64_t v764;
  unint64_t v765;
  uint64_t v766;
  uint64_t v767;
  unint64_t v768;
  unint64_t v769;
  int hasFlag;
  uint64_t v771;
  uint64_t v772;
  uint64_t LastArgValue;
  unint64_t v774;
  const void *v775;
  void *v776;
  void *v777;
  uint64_t v778;
  uint64_t v779;
  unsigned int *v780;
  void **v781;
  char v782;
  uint64_t v783;
  _QWORD **v784;
  const char **v785;
  const char *v786;
  size_t v787;
  int v788;
  BOOL v789;
  int v790;
  unint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  void *v796;
  size_t v797;
  uint64_t v798;
  unsigned __int8 *v799;
  _QWORD *v800;
  uint64_t v801;
  unsigned int v802;
  unsigned int v803;
  int v804;
  uint64_t v805;
  __int16 v806;
  char v807;
  int v808;
  uint64_t v809;
  std::__shared_weak_count *v810;
  unint64_t *v811;
  unint64_t v812;
  uint64_t v813;
  int v814;
  int v815;
  uint64_t v816;
  __int16 v817;
  unint64_t v818;
  unint64_t v819;
  uint64_t v820;
  unsigned __int8 *v821;
  unsigned int *v822;
  unsigned int v823;
  unsigned int v824;
  _QWORD *v825;
  _QWORD *v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  const char **v831;
  const char *v832;
  size_t v833;
  unint64_t v834;
  unint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  __int128 *v840;
  size_t v841;
  uint64_t v842;
  unsigned __int8 *v843;
  _QWORD *v844;
  uint64_t v845;
  __int128 *v846;
  __int128 *v847;
  _QWORD **v848;
  BOOL v849;
  __int128 v850;
  uint64_t **v851;
  uint64_t **v852;
  void **v853;
  void *v854;
  _QWORD *v855;
  uint64_t *v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  const char **v864;
  char *v865;
  size_t v866;
  unint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  __int128 *v872;
  size_t v873;
  int v874;
  uint64_t v875;
  uint64_t v876;
  unint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  __int128 *v881;
  size_t v882;
  unsigned __int8 *v883;
  _QWORD *v884;
  uint64_t v885;
  uint64_t v886;
  unint64_t v887;
  const void *v888;
  void *v889;
  void *v890;
  uint64_t v891;
  uint64_t v892;
  void **v893;
  uint64_t v894;
  const char **v895;
  const char *v896;
  void *v897;
  uint64_t v898;
  uint64_t v899;
  unint64_t v900;
  size_t v901;
  const void *v902;
  void *v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  void *v907;
  void **v908;
  char v909;
  uint64_t v910;
  unint64_t v911;
  const void *v912;
  size_t v913;
  __int128 *v914;
  uint64_t v915;
  uint64_t v916;
  int v917;
  void *v918;
  __int128 *v919;
  size_t v920;
  char *v921;
  char *v922;
  void **v923;
  _BYTE *v924;
  const void *v925;
  __int128 *v926;
  unint64_t v927;
  unint64_t v928;
  void **v929;
  _DWORD *v930;
  size_t v931;
  void *v932;
  size_t v933;
  unint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  __int128 *v938;
  size_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t *v942;
  uint64_t v943;
  void **v944;
  uint64_t v945;
  int v946;
  const char **v947;
  const char *v948;
  int64_t v949;
  size_t v950;
  char *v951;
  uint64_t v952;
  char *v953;
  char *v954;
  uint64_t v955;
  unint64_t v956;
  size_t v957;
  char *v958;
  _BYTE *v959;
  int64_t v960;
  const char *v961;
  _BYTE *v962;
  char v963;
  char *v964;
  char *v965;
  char *v966;
  char *v967;
  uint64_t v968;
  void *v969;
  _BYTE *v970;
  unint64_t v971;
  _BYTE *v972;
  unint64_t v973;
  _BYTE *v974;
  uint64_t v975;
  unint64_t v976;
  size_t v977;
  char *v978;
  char *v979;
  _BYTE *v980;
  _BYTE *v981;
  char v982;
  uint64_t *v983;
  uint64_t v984;
  uint64_t v985;
  void **v986;
  void **v987;
  unint64_t v988;
  char v989;
  BOOL v990;
  void *v991;
  size_t v992;
  size_t v993;
  uint64_t *v994;
  uint64_t *v995;
  _DWORD *v996;
  uint64_t v997;
  int v998;
  unint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  _QWORD *v1003;
  uint64_t v1004;
  uint64_t v1005;
  const char **v1006;
  char *v1007;
  size_t v1008;
  size_t v1009;
  unint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  __int128 *v1014;
  size_t v1015;
  uint64_t v1018;
  void *v1019;
  uint64_t *v1020;
  uint64_t v1021;
  char *v1022;
  unint64_t v1023;
  __int128 v1024;
  void **v1025;
  uint64_t v1026;
  unint64_t v1027;
  uint64_t v1028;
  unint64_t v1029;
  _BYTE *v1030;
  char *v1031;
  char *v1032;
  char *v1033;
  __int128 v1034;
  void **v1035;
  uint64_t v1036;
  uint64_t v1037;
  void **v1038;
  const char **v1039;
  char *v1040;
  size_t v1041;
  unint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  const char **v1048;
  char *v1049;
  unint64_t v1050;
  __int16 v1051;
  unint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  __int128 *v1057;
  size_t v1058;
  uint64_t v1059;
  const char **v1060;
  char *v1061;
  unint64_t v1062;
  __int16 v1063;
  unint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  __int128 *v1069;
  size_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  unint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  char v1077;
  BOOL v1078;
  void *v1079;
  size_t v1080;
  size_t v1081;
  uint64_t v1082;
  __int16 v1083;
  uint64_t v1084;
  uint64_t v1085;
  unint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  char v1090;
  BOOL v1091;
  void *v1092;
  size_t v1093;
  size_t v1094;
  int v1095;
  uint64_t v1096;
  char v1097;
  int v1098;
  uint64_t v1099;
  _BOOL4 v1100;
  uint64_t v1101;
  uint64_t v1102;
  void **v1103;
  std::__shared_weak_count *v1104;
  unint64_t *v1105;
  unint64_t v1106;
  void **v1107;
  std::__shared_weak_count *v1108;
  unint64_t *v1109;
  unint64_t v1110;
  void **v1111;
  std::__shared_weak_count *v1112;
  unint64_t *v1113;
  unint64_t v1114;
  _BOOL4 v1115;
  char v1116;
  int v1117;
  uint64_t v1118;
  uint64_t v1119;
  BOOL v1120;
  unint64_t v1121;
  unsigned __int8 *v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  _QWORD *v1126;
  uint64_t v1127;
  uint64_t v1128;
  const char **v1129;
  const char *v1130;
  llvm *AsSignedInteger;
  __int128 *v1132;
  uint64_t v1133;
  unint64_t v1134;
  uint64_t v1135;
  char v1136;
  unsigned __int8 *v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  _QWORD *v1141;
  uint64_t v1142;
  unint64_t v1143;
  unsigned __int8 *v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  _QWORD *v1148;
  uint64_t v1149;
  char v1150;
  uint64_t v1151;
  uint64_t v1152;
  char v1153;
  int v1154;
  uint64_t v1155;
  int v1156;
  uint64_t v1157;
  uint64_t v1158;
  int v1159;
  uint64_t v1160;
  uint64_t v1161;
  void **v1162;
  uint64_t *v1163;
  char v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  unsigned int *v1169;
  uint64_t v1170;
  __int16 v1171;
  int v1172;
  int v1173;
  unint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  const char **v1178;
  const char *v1179;
  unint64_t v1180;
  char v1181;
  char v1182;
  unint64_t v1183;
  unsigned __int8 *v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  char v1191;
  BOOL v1192;
  void *v1193;
  size_t v1194;
  size_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  _QWORD *v1199;
  uint64_t v1200;
  void *v1201;
  void **v1202;
  uint64_t v1203;
  llvm::Triple *v1204;
  uint64_t v1205;
  void **v1206;
  const char **v1207;
  unsigned int *v1208;
  uint64_t v1209;
  _QWORD *v1210;
  uint64_t v1211;
  unint64_t v1212;
  _QWORD v1213[3];
  __int16 v1214;
  unsigned __int8 *v1215;
  __int16 v1216;
  __int128 __dst;
  void *v1218;
  __int16 v1219;
  void *v1220;
  __int128 v1221;
  __int128 v1222;
  void *v1223;
  __int128 v1224;
  _QWORD v1225[2];
  __int128 v1226;
  void *v1227;
  __int128 v1228;
  uint64_t v1229;
  __int128 v1230;
  uint64_t v1231;
  __int128 v1232;
  void *v1233;
  __int128 v1234;
  uint64_t v1235;
  __int128 v1236;
  uint64_t v1237;
  __int128 v1238;
  void *v1239;
  __int128 v1240;
  uint64_t v1241;
  __int128 v1242;
  uint64_t v1243;
  __int128 v1244;
  void *v1245;
  __int128 v1246;
  uint64_t v1247;
  __int128 v1248;
  uint64_t v1249;
  __int128 v1250;
  void *v1251;
  __int128 v1252;
  uint64_t v1253;
  __int128 v1254;
  uint64_t v1255;
  __int128 v1256;
  void *v1257;
  __int128 v1258;
  uint64_t v1259;
  __int128 v1260;
  uint64_t v1261;
  __int128 v1262;
  void *v1263;
  __int128 v1264;
  uint64_t v1265;
  __int128 v1266;
  uint64_t v1267;
  __int128 v1268;
  void *v1269;
  __int128 v1270;
  uint64_t v1271;
  __int128 v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  _QWORD v1277[3];
  _QWORD v1278[3];
  _QWORD v1279[3];
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  _QWORD v1283[3];
  _QWORD v1284[3];
  _QWORD v1285[3];
  __int128 v1286;
  void *v1287;
  __int128 v1288;
  uint64_t v1289;
  __int128 v1290;
  uint64_t v1291;
  __int128 v1292;
  void *v1293;
  __int128 v1294;
  uint64_t v1295;
  __int128 v1296;
  uint64_t v1297;
  __int128 v1298;
  void *v1299;
  __int128 v1300;
  uint64_t v1301;
  __int128 v1302;
  uint64_t v1303;
  __int128 v1304;
  void *v1305;
  __int128 v1306;
  uint64_t v1307;
  __int128 v1308;
  uint64_t v1309;
  __int128 v1310;
  void *v1311;
  __int128 v1312;
  uint64_t v1313;
  __int128 v1314;
  uint64_t v1315;
  __int128 v1316;
  void *v1317;
  __int128 v1318;
  uint64_t v1319;
  __int128 v1320;
  uint64_t v1321;
  __int128 v1322;
  void *v1323;
  __int128 v1324;
  uint64_t v1325;
  __int128 v1326;
  uint64_t v1327;
  __int128 v1328;
  void *v1329;
  __int128 v1330;
  uint64_t v1331;
  __int128 v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  _QWORD v1337[3];
  _QWORD v1338[3];
  _QWORD v1339[3];
  __int128 v1340;
  void *v1341;
  __int128 v1342;
  uint64_t v1343;
  __int128 v1344;
  uint64_t v1345;
  __int128 v1346;
  void *v1347;
  __int128 v1348;
  uint64_t v1349;
  __int128 v1350;
  uint64_t v1351;
  __int128 v1352;
  void *v1353;
  __int128 v1354;
  uint64_t v1355;
  __int128 v1356;
  uint64_t v1357;
  __int128 v1358;
  void *v1359;
  __int128 v1360;
  uint64_t v1361;
  __int128 v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  _QWORD v1367[3];
  _QWORD v1368[3];
  _QWORD v1369[3];
  __int128 v1370;
  void *v1371;
  __int128 v1372;
  uint64_t v1373;
  __int128 v1374;
  uint64_t v1375;
  __int128 v1376;
  void *v1377;
  __int128 v1378;
  uint64_t v1379;
  __int128 v1380;
  uint64_t v1381;
  __int128 v1382;
  void *v1383;
  __int128 v1384;
  uint64_t v1385;
  __int128 v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  _QWORD v1391[3];
  _QWORD v1392[3];
  _QWORD v1393[3];
  __int128 v1394;
  void *v1395;
  __int128 v1396;
  uint64_t v1397;
  __int128 v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  _QWORD v1403[3];
  _QWORD v1404[3];
  _QWORD v1405[3];
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  _QWORD v1409[3];
  _QWORD v1410[3];
  _QWORD v1411[3];
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  _QWORD v1415[3];
  _QWORD v1416[3];
  _QWORD v1417[3];
  __int128 v1418;
  void *v1419;
  __int128 v1420;
  uint64_t v1421;
  __int128 v1422;
  uint64_t v1423;
  __int128 v1424;
  void *v1425;
  __int128 v1426;
  uint64_t v1427;
  __int128 v1428;
  uint64_t v1429;
  __int128 v1430;
  void *v1431;
  __int128 v1432;
  uint64_t v1433;
  __int128 v1434;
  uint64_t v1435;
  __int128 v1436;
  void *v1437;
  __int128 v1438;
  uint64_t v1439;
  __int128 v1440;
  uint64_t v1441;
  __int128 v1442;
  void *v1443;
  __int128 v1444;
  uint64_t v1445;
  __int128 v1446;
  uint64_t v1447;
  __int128 v1448;
  void *v1449;
  __int128 v1450;
  uint64_t v1451;
  __int128 v1452;
  uint64_t v1453;
  __int128 v1454;
  void *v1455;
  __int128 v1456;
  uint64_t v1457;
  __int128 __p;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  _QWORD v1463[3];
  _QWORD v1464[3];
  _QWORD v1465[4];
  __int128 v1466;
  void *v1467;
  __int16 v1468;
  void *__src[7];
  int v1470;
  __int128 *v1471;
  __int128 v1472;
  int64_t v1473;
  uint64_t v1474;
  __int16 v1475;
  uint64_t v1476;

  v10 = MEMORY[0x24BDAC7A8]();
  v1206 = v11;
  v13 = v12;
  v1202 = v14;
  v16 = v15;
  v18 = v17;
  v1211 = v10;
  v1476 = *MEMORY[0x24BDAC8D0];
  v1207 = v19;
  v1212 = v20;
  v21 = sub_22E6EBEA4(v17, v19, v20);
  if (v21 >= 4)
  {
    v22 = v1212;
    *(_QWORD *)(v1212 + 312) = 0x21400000000;
    if (*(char *)(v1212 + 311) < 0)
    {
      **(_BYTE **)(v22 + 288) = 0;
      *(_QWORD *)(v22 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v22 + 288) = 0;
      *(_BYTE *)(v22 + 311) = 0;
    }
    __src[0] = (void *)(v22 + 320);
    __src[1] = 0;
    __src[2] = (void *)v22;
    LOWORD(__src[3]) = 1;
    *(_BYTE *)(v22 + 320) = 0;
    *(_DWORD *)(v22 + 664) = 0;
    v23 = *(unsigned int *)(v22 + 776);
    if ((_DWORD)v23)
    {
      v24 = *(_QWORD *)(v1212 + 768);
      v25 = 56 * v23;
      do
      {
        if (*(char *)(v24 + v25 - 9) < 0)
          operator delete(*(void **)(v24 + v25 - 32));
        v25 -= 56;
      }
      while (v25);
    }
    *(_DWORD *)(v1212 + 776) = 0;
    sub_22E6EBFB4(v18, 2821);
    llvm::opt::Arg::getAsString();
    if (v1473 >= 0)
      v26 = &v1472;
    else
      v26 = (__int128 *)v1472;
    if (v1473 >= 0)
      v27 = HIBYTE(v1473) & 0x7F;
    else
      v27 = *((_QWORD *)&v1472 + 1);
    sub_22E3B89A8((unsigned __int8 **)__src, v26, v27);
    v28 = (unsigned __int8 *)__src[0];
    if (!__src[0])
    {
      v28 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__src[1]);
      __src[0] = v28;
    }
    v28[*v28 + 1] = 1;
    v29 = __src[0];
    v30 = *(unsigned __int8 *)__src[0];
    *(_BYTE *)__src[0] = v30 + 1;
    v29[v30 + 2] = "-O";
    *((_BYTE *)v29 + (v30 + 1) + 1) = 3;
    v31 = __src[0];
    v32 = *(unsigned __int8 *)__src[0];
    *(_BYTE *)__src[0] = v32 + 1;
    v31[v32 + 2] = 3;
    if (SHIBYTE(v1473) < 0)
      operator delete((void *)v1472);
    sub_22E3BB0B8((uint64_t)__src);
    v21 = 3;
  }
  v33 = (_QWORD *)v1211;
  v34 = (_QWORD *)(v1211 + 8);
  *(_QWORD *)(v1211 + 32) = *(_QWORD *)(v1211 + 32) & 0xFFFFFFFFFFFFE7FFLL | ((unint64_t)v21 << 11);
  *(_QWORD *)v1211 &= ~0x200000000000uLL;
  if (sub_22E721714(v18, 190))
    *v33 |= 0x200000000000uLL;
  v36 = *v34;
  v35 = v34[1];
  v38 = v34[2];
  v37 = v34[3];
  v34[2] = v38 & 0xFFFFFF7FFFFFFFFFLL;
  if ((*(_QWORD *)(v13 + 140) & 0x1400000000000000) != 0)
  {
    *v34 = v36;
    v34[1] = v35;
    v34[2] = v38 | 0x8000000000;
    v34[3] = v37;
  }
  v39 = sub_22E721714(v18, 191);
  v40 = v34[2];
  if (v39)
    v40 |= 0x8000000000uLL;
  v34[2] = v40 & 0xDFFFFFFFFFFFFFFFLL;
  v41 = sub_22E721714(v18, 189);
  v42 = v34[2];
  if (v41)
    v42 |= 0x2000000000000000uLL;
  v43 = v34[3] & 0xFFFFFFFFFFFFFFEFLL;
  v34[2] = v42;
  v34[3] = v43;
  v44 = sub_22E721714(v18, 198);
  v45 = v34[3];
  if (v44)
    v45 |= 0x10uLL;
  v34[2] |= 0x4000000000000000uLL;
  v34[3] = v45;
  if ((*(_BYTE *)(v13 + 68) & 0x40) != 0 && sub_22E721888(v18, 0x439u, 0x30Au))
  {
    v46 = llvm::opt::Option::matches();
    v47 = 0x4000000000000000;
    if (v46)
      v47 = 0;
    v34[2] = v34[2] & 0xBFFFFFFFFFFFFFFFLL | v47;
  }
  v48 = v1211;
  v49 = (void **)(v1211 + 712);
  *(_QWORD *)(v1211 + 48) = (unint64_t)*(unsigned int *)(v1211 + 52) << 32;
  v50 = sub_22E6EC038(388, v18, v1212);
  if (HIDWORD(v50))
    *(_DWORD *)(v48 + 48) = v50;
  v1210 = v34;
  v1204 = v16;
  v1205 = v13;
  *(_QWORD *)v48 |= 0x100uLL;
  v51 = v48;
  if (sub_22E721888(v18, 0x3BDu, 0x1B0u))
  {
    v52 = llvm::opt::Option::matches();
    v53 = 256;
    if (v52)
      v53 = 0;
    *(_QWORD *)v48 = *(_QWORD *)v48 & 0xFFFFFFFFFFFFFEFFLL | v53;
  }
  memset(v1465, 0, 24);
  sub_22E618148(v1465, *(_QWORD *)(v48 + 952), *(_QWORD *)(v48 + 960), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v48 + 960) - *(_QWORD *)(v48 + 952)) >> 3));
  memset(v1464, 0, sizeof(v1464));
  memset(__src, 0, 24);
  sub_22E63B344(v49 + 30);
  *((_OWORD *)v49 + 15) = *(_OWORD *)__src;
  *(void **)(v48 + 968) = __src[2];
  memset(__src, 0, 24);
  *(_QWORD *)&v1472 = __src;
  sub_22E3B3CC8((void ***)&v1472);
  *(_QWORD *)&v1472 = v1464;
  sub_22E3B3CC8((void ***)&v1472);
  *(_QWORD *)&v1472 = v1465;
  sub_22E3B3CC8((void ***)&v1472);
  llvm::opt::ArgList::getAllArgValues();
  *(_OWORD *)__src = v1472;
  __src[2] = (void *)v1473;
  v1473 = 0;
  v1472 = 0uLL;
  LOBYTE(__src[3]) = 1;
  *(_QWORD *)&v1466 = &v1472;
  sub_22E3B3CC8((void ***)&v1466);
  v1209 = v18;
  if (LOBYTE(__src[3]))
  {
    memset(v1463, 0, sizeof(v1463));
    sub_22E618148(v1463, *(_QWORD *)(v48 + 952), *(_QWORD *)(v48 + 960), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v48 + 960) - *(_QWORD *)(v48 + 952)) >> 3));
    v1461 = 0;
    v1460 = 0;
    v1462 = 0;
    sub_22E618148(&v1460, (uint64_t)__src[0], (uint64_t)__src[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__src[1] - (char *)__src[0]) >> 3));
    v1472 = 0uLL;
    v1473 = 0;
    sub_22E618148(&v1472, v1460, v1461, 0xAAAAAAAAAAAAAAABLL * ((v1461 - v1460) >> 3));
    sub_22E63B344(v49 + 30);
    *((_OWORD *)v49 + 15) = v1472;
    *(_QWORD *)(v1211 + 968) = v1473;
    v1473 = 0;
    v1472 = 0uLL;
    *(_QWORD *)&v1466 = &v1472;
    sub_22E3B3CC8((void ***)&v1466);
    *(_QWORD *)&v1466 = &v1460;
    v18 = v1209;
    sub_22E3B3CC8((void ***)&v1466);
    *(_QWORD *)&v1466 = v1463;
    v51 = v1211;
    sub_22E3B3CC8((void ***)&v1466);
    if (LOBYTE(__src[3]))
    {
      *(_QWORD *)&v1472 = __src;
      sub_22E3B3CC8((void ***)&v1472);
    }
  }
  *(_QWORD *)(v51 + 96) &= 0xFFFFFFCFFFFFFFFFLL;
  v54 = sub_22E6EC1FC(634, 1u, v18, v1212);
  if (HIDWORD(v54))
    *(_QWORD *)(v51 + 96) = *(_QWORD *)(v51 + 96) & 0xFFFFFFCFFFFFFFFFLL | ((v54 & 3) << 36);
  v55 = v1210;
  v1210[3] &= ~0x100uLL;
  if (sub_22E721714(v18, 2683))
    v55[3] |= 0x100uLL;
  v56 = (void **)(v51 + 760);
  if (*(char *)(v51 + 783) < 0)
  {
    sub_22E3BB2B4(&__p, *(void **)(v51 + 760), *(_QWORD *)(v51 + 768));
    v57 = *(char *)(v51 + 783);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v57 < 0)
      operator delete(*v56);
  }
  else
  {
    __p = *(_OWORD *)v56;
    v1459 = *(_QWORD *)(v51 + 776);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  *v56 = 0;
  *(_QWORD *)(v51 + 768) = 0;
  *(_DWORD *)(v51 + 776) = __src[0];
  *(_DWORD *)(v51 + 779) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v51 + 783) = 0;
  if (SHIBYTE(v1459) < 0)
    operator delete((void *)__p);
  sub_22E6EC3DC((uint64_t)__src, 1543, v18);
  if (LOBYTE(__src[3]))
  {
    if (*(char *)(v51 + 783) < 0)
    {
      sub_22E3BB2B4(&v1456, *(void **)(v51 + 760), *(_QWORD *)(v51 + 768));
    }
    else
    {
      v1456 = *(_OWORD *)v56;
      v1457 = *(_QWORD *)(v51 + 776);
    }
    v58 = SHIBYTE(__src[2]);
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_22E3BB2B4(&v1454, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v1454 = *(_OWORD *)__src;
      v1455 = __src[2];
    }
    if (SHIBYTE(v1455) < 0)
    {
      sub_22E3BB2B4(&v1472, (void *)v1454, *((unint64_t *)&v1454 + 1));
    }
    else
    {
      v1472 = v1454;
      v1473 = (int64_t)v1455;
    }
    if (*(char *)(v51 + 783) < 0)
      operator delete(*v56);
    *(_OWORD *)v56 = v1472;
    *(_QWORD *)(v51 + 776) = v1473;
    HIBYTE(v1473) = 0;
    LOBYTE(v1472) = 0;
    if (SHIBYTE(v1455) < 0)
      operator delete((void *)v1454);
    if (SHIBYTE(v1457) < 0)
    {
      operator delete((void *)v1456);
      if ((v58 & 0x80000000) == 0)
        goto LABEL_71;
    }
    else if ((v58 & 0x80000000) == 0)
    {
      goto LABEL_71;
    }
    operator delete(__src[0]);
  }
LABEL_71:
  *(_QWORD *)(v51 + 40) &= ~0x8000000000uLL;
  if (sub_22E721714(v18, 1542))
    *(_QWORD *)(v51 + 40) |= 0x8000000000uLL;
  v59 = (void **)(v51 + 312);
  if (*(char *)(v51 + 335) < 0)
  {
    sub_22E3BB2B4(&v1452, *(void **)(v51 + 312), *(_QWORD *)(v51 + 320));
    v60 = *(char *)(v51 + 335);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v60 < 0)
      operator delete(*v59);
  }
  else
  {
    v1452 = *(_OWORD *)v59;
    v1453 = *(_QWORD *)(v51 + 328);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  *v59 = 0;
  *(_QWORD *)(v51 + 320) = 0;
  *(_DWORD *)(v51 + 328) = __src[0];
  *(_DWORD *)(v51 + 331) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v51 + 335) = 0;
  if (SHIBYTE(v1453) < 0)
    operator delete((void *)v1452);
  sub_22E6EC3DC((uint64_t)__src, 535, v18);
  if (LOBYTE(__src[3]))
  {
    if (*(char *)(v51 + 335) < 0)
    {
      sub_22E3BB2B4(&v1450, *(void **)(v51 + 312), *(_QWORD *)(v51 + 320));
    }
    else
    {
      v1450 = *(_OWORD *)v59;
      v1451 = *(_QWORD *)(v51 + 328);
    }
    v61 = SHIBYTE(__src[2]);
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_22E3BB2B4(&v1448, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v1448 = *(_OWORD *)__src;
      v1449 = __src[2];
    }
    if (SHIBYTE(v1449) < 0)
    {
      sub_22E3BB2B4(&v1472, (void *)v1448, *((unint64_t *)&v1448 + 1));
    }
    else
    {
      v1472 = v1448;
      v1473 = (int64_t)v1449;
    }
    if (*(char *)(v51 + 335) < 0)
      operator delete(*v59);
    *(_OWORD *)v59 = v1472;
    *(_QWORD *)(v51 + 328) = v1473;
    HIBYTE(v1473) = 0;
    LOBYTE(v1472) = 0;
    if (SHIBYTE(v1449) < 0)
      operator delete((void *)v1448);
    if (SHIBYTE(v1451) < 0)
    {
      operator delete((void *)v1450);
      if ((v61 & 0x80000000) == 0)
        goto LABEL_97;
    }
    else if ((v61 & 0x80000000) == 0)
    {
      goto LABEL_97;
    }
    operator delete(__src[0]);
  }
LABEL_97:
  v62 = (void **)(v51 + 336);
  if (*(char *)(v51 + 359) < 0)
  {
    sub_22E3BB2B4(&v1446, *(void **)(v51 + 336), *(_QWORD *)(v51 + 344));
    v63 = *(char *)(v51 + 359);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v63 < 0)
      operator delete(*v62);
  }
  else
  {
    v1446 = *(_OWORD *)v62;
    v1447 = *(_QWORD *)(v51 + 352);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  *v62 = 0;
  *(_QWORD *)(v51 + 344) = 0;
  *(_DWORD *)(v51 + 352) = __src[0];
  *(_DWORD *)(v51 + 355) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v51 + 359) = 0;
  if (SHIBYTE(v1447) < 0)
    operator delete((void *)v1446);
  sub_22E6EC3DC((uint64_t)__src, 514, v18);
  if (LOBYTE(__src[3]))
  {
    if (*(char *)(v51 + 359) < 0)
    {
      sub_22E3BB2B4(&v1444, *(void **)(v51 + 336), *(_QWORD *)(v51 + 344));
    }
    else
    {
      v1444 = *(_OWORD *)v62;
      v1445 = *(_QWORD *)(v51 + 352);
    }
    v64 = SHIBYTE(__src[2]);
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_22E3BB2B4(&v1442, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v1442 = *(_OWORD *)__src;
      v1443 = __src[2];
    }
    if (SHIBYTE(v1443) < 0)
    {
      sub_22E3BB2B4(&v1472, (void *)v1442, *((unint64_t *)&v1442 + 1));
    }
    else
    {
      v1472 = v1442;
      v1473 = (int64_t)v1443;
    }
    if (*(char *)(v51 + 359) < 0)
      operator delete(*v62);
    *(_OWORD *)v62 = v1472;
    *(_QWORD *)(v51 + 352) = v1473;
    HIBYTE(v1473) = 0;
    LOBYTE(v1472) = 0;
    if (SHIBYTE(v1443) < 0)
      operator delete((void *)v1442);
    if (SHIBYTE(v1445) < 0)
    {
      operator delete((void *)v1444);
      if ((v64 & 0x80000000) == 0)
        goto LABEL_121;
    }
    else if ((v64 & 0x80000000) == 0)
    {
      goto LABEL_121;
    }
    operator delete(__src[0]);
  }
LABEL_121:
  *(_DWORD *)(v51 + 92) &= ~8u;
  if (sub_22E721888(v18, 0x221u, 0x3E8u))
  {
    if (llvm::opt::Option::matches())
      v65 = 8;
    else
      v65 = 0;
    *(_DWORD *)(v51 + 92) = *(_DWORD *)(v51 + 92) & 0xFFFFFFF7 | v65;
  }
  v66 = (void **)(v51 + 832);
  if (*(char *)(v51 + 855) < 0)
  {
    sub_22E3BB2B4(&v1440, *(void **)(v51 + 832), *(_QWORD *)(v51 + 840));
    v67 = *(char *)(v51 + 855);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v67 < 0)
      operator delete(*v66);
  }
  else
  {
    v1440 = *(_OWORD *)v66;
    v1441 = *(_QWORD *)(v51 + 848);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  v1208 = (unsigned int *)(v51 + 84);
  *v66 = 0;
  *(_QWORD *)(v51 + 840) = 0;
  *(_DWORD *)(v51 + 848) = __src[0];
  *(_DWORD *)(v51 + 851) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v51 + 855) = 0;
  if (SHIBYTE(v1441) < 0)
    operator delete((void *)v1440);
  sub_22E6EC3DC((uint64_t)__src, 1540, v18);
  if (LOBYTE(__src[3]))
  {
    if (*(char *)(v51 + 855) < 0)
    {
      sub_22E3BB2B4(&v1438, *(void **)(v51 + 832), *(_QWORD *)(v51 + 840));
    }
    else
    {
      v1438 = *(_OWORD *)v66;
      v1439 = *(_QWORD *)(v51 + 848);
    }
    v68 = SHIBYTE(__src[2]);
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_22E3BB2B4(&v1436, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v1436 = *(_OWORD *)__src;
      v1437 = __src[2];
    }
    if (SHIBYTE(v1437) < 0)
    {
      sub_22E3BB2B4(&v1472, (void *)v1436, *((unint64_t *)&v1436 + 1));
    }
    else
    {
      v1472 = v1436;
      v1473 = (int64_t)v1437;
    }
    if (*(char *)(v51 + 855) < 0)
      operator delete(*v66);
    *(_OWORD *)v66 = v1472;
    *(_QWORD *)(v51 + 848) = v1473;
    HIBYTE(v1473) = 0;
    LOBYTE(v1472) = 0;
    if (SHIBYTE(v1437) < 0)
      operator delete((void *)v1436);
    if (SHIBYTE(v1439) < 0)
    {
      operator delete((void *)v1438);
      if ((v68 & 0x80000000) == 0)
        goto LABEL_150;
    }
    else if ((v68 & 0x80000000) == 0)
    {
      goto LABEL_150;
    }
    operator delete(__src[0]);
  }
LABEL_150:
  v55[3] &= ~0x10000uLL;
  if (sub_22E721888(v18, 0x203u, 0x3DBu))
  {
    v69 = llvm::opt::Option::matches();
    v70 = 0x10000;
    if (!v69)
      v70 = 0;
    v55[3] = v55[3] & 0xFFFFFFFFFFFEFFFFLL | v70;
  }
  *(_QWORD *)v51 &= ~0x80000000000uLL;
  if (sub_22E721888(v18, 0x5F4u, 0x4ADu))
  {
    v71 = llvm::opt::Option::matches();
    v72 = 0x80000000000;
    if (!v71)
      v72 = 0;
    v73 = *(_QWORD *)v51 & 0xFFFFF7FFFFFFFFFFLL | v72;
  }
  else
  {
    v73 = *(_QWORD *)v51;
  }
  *(_QWORD *)v51 = v73 & 0xFFFFEFFFFFFFFFFFLL;
  v74 = (uint64_t *)v1208;
  if (sub_22E721888(v18, 0x6D3u, 0x535u))
  {
    v75 = llvm::opt::Option::matches();
    v76 = 0x100000000000;
    if (!v75)
      v76 = 0;
    *(_QWORD *)v51 = *(_QWORD *)v51 & 0xFFFFEFFFFFFFFFFFLL | v76;
  }
  v77 = (void **)(v51 + 232);
  if (*(char *)(v51 + 255) < 0)
  {
    sub_22E3BB2B4(&v1434, *(void **)(v51 + 232), *(_QWORD *)(v51 + 240));
    v78 = *(char *)(v51 + 255);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v78 < 0)
      operator delete(*v77);
  }
  else
  {
    v1434 = *(_OWORD *)v77;
    v1435 = *(_QWORD *)(v51 + 248);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  *v77 = 0;
  *(_QWORD *)(v51 + 240) = 0;
  *(_DWORD *)(v51 + 248) = __src[0];
  *(_DWORD *)(v51 + 251) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v51 + 255) = 0;
  if (SHIBYTE(v1435) < 0)
    operator delete((void *)v1434);
  if ((*(_BYTE *)(v51 + 5) & 0x18) != 0)
  {
    sub_22E6EC3DC((uint64_t)__src, 1528, v18);
    if (LOBYTE(__src[3]))
    {
      if (*(char *)(v51 + 255) < 0)
      {
        sub_22E3BB2B4(&v1432, *(void **)(v51 + 232), *(_QWORD *)(v51 + 240));
      }
      else
      {
        v1432 = *(_OWORD *)v77;
        v1433 = *(_QWORD *)(v51 + 248);
      }
      v79 = SHIBYTE(__src[2]);
      if (SHIBYTE(__src[2]) < 0)
      {
        sub_22E3BB2B4(&v1430, __src[0], (unint64_t)__src[1]);
      }
      else
      {
        v1430 = *(_OWORD *)__src;
        v1431 = __src[2];
      }
      if (SHIBYTE(v1431) < 0)
      {
        sub_22E3BB2B4(&v1472, (void *)v1430, *((unint64_t *)&v1430 + 1));
      }
      else
      {
        v1472 = v1430;
        v1473 = (int64_t)v1431;
      }
      if (*(char *)(v51 + 255) < 0)
        operator delete(*v77);
      *(_OWORD *)v77 = v1472;
      *(_QWORD *)(v51 + 248) = v1473;
      HIBYTE(v1473) = 0;
      LOBYTE(v1472) = 0;
      if (SHIBYTE(v1431) < 0)
        operator delete((void *)v1430);
      if (SHIBYTE(v1433) < 0)
      {
        operator delete((void *)v1432);
        if ((v79 & 0x80000000) == 0)
          goto LABEL_188;
      }
      else if ((v79 & 0x80000000) == 0)
      {
        goto LABEL_188;
      }
      operator delete(__src[0]);
    }
LABEL_188:
    v74 = (uint64_t *)v1208;
  }
  v80 = (void **)(v51 + 256);
  if (*(char *)(v51 + 279) < 0)
  {
    sub_22E3BB2B4(&v1428, *(void **)(v51 + 256), *(_QWORD *)(v51 + 264));
    v81 = *(char *)(v51 + 279);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v81 < 0)
      operator delete(*v80);
  }
  else
  {
    v1428 = *(_OWORD *)v80;
    v1429 = *(_QWORD *)(v51 + 272);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  *v80 = 0;
  *(_QWORD *)(v51 + 264) = 0;
  *(_DWORD *)(v51 + 272) = __src[0];
  *(_DWORD *)(v51 + 275) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v51 + 279) = 0;
  if (SHIBYTE(v1429) < 0)
    operator delete((void *)v1428);
  if ((*(_BYTE *)(v51 + 5) & 0x18) != 0)
  {
    sub_22E6EC3DC((uint64_t)__src, 1527, v18);
    if (LOBYTE(__src[3]))
    {
      if (*(char *)(v51 + 279) < 0)
      {
        sub_22E3BB2B4(&v1426, *(void **)(v51 + 256), *(_QWORD *)(v51 + 264));
      }
      else
      {
        v1426 = *(_OWORD *)v80;
        v1427 = *(_QWORD *)(v51 + 272);
      }
      v82 = SHIBYTE(__src[2]);
      if (SHIBYTE(__src[2]) < 0)
      {
        sub_22E3BB2B4(&v1424, __src[0], (unint64_t)__src[1]);
      }
      else
      {
        v1424 = *(_OWORD *)__src;
        v1425 = __src[2];
      }
      if (SHIBYTE(v1425) < 0)
      {
        sub_22E3BB2B4(&v1472, (void *)v1424, *((unint64_t *)&v1424 + 1));
      }
      else
      {
        v1472 = v1424;
        v1473 = (int64_t)v1425;
      }
      if (*(char *)(v51 + 279) < 0)
        operator delete(*v80);
      *(_OWORD *)v80 = v1472;
      *(_QWORD *)(v51 + 272) = v1473;
      HIBYTE(v1473) = 0;
      LOBYTE(v1472) = 0;
      if (SHIBYTE(v1425) < 0)
        operator delete((void *)v1424);
      if (SHIBYTE(v1427) < 0)
      {
        operator delete((void *)v1426);
        if ((v82 & 0x80000000) == 0)
          goto LABEL_214;
      }
      else if ((v82 & 0x80000000) == 0)
      {
        goto LABEL_214;
      }
      operator delete(__src[0]);
    }
LABEL_214:
    v74 = (uint64_t *)v1208;
  }
  v55[3] &= ~0x8000uLL;
  if (sub_22E721714(v18, 1545))
    v55[3] |= 0x8000uLL;
  *((_DWORD *)v74 + 2) &= ~0x10u;
  if (sub_22E721888(v18, 0x60Fu, 0x4BAu))
  {
    v83 = llvm::opt::Option::matches();
    v84 = *v74;
    v85 = 16;
    if (!v83)
      v85 = 0;
    v86 = v74[1] & 0xFFFFFFEF | v85;
  }
  else
  {
    v84 = *v74;
    v86 = *((_DWORD *)v74 + 2);
  }
  *v74 = v84;
  *((_DWORD *)v74 + 2) = v86 & 0xFFFFFFEF;
  if (sub_22E721888(v18, 0x4BAu, 0x60Fu))
  {
    if (llvm::opt::Option::matches())
      v87 = 0;
    else
      v87 = 16;
    *((_DWORD *)v74 + 2) = v74[1] & 0xFFFFFFEF | v87;
  }
  *(_WORD *)(v51 + 104) = *(_WORD *)(v51 + 104) & 0xF9FF | 0x200;
  v88 = sub_22E6EC1FC(1730, 2u, v18, v1212);
  if (HIDWORD(v88))
    *(_WORD *)(v51 + 104) = *(_WORD *)(v51 + 104) & 0xF9FF | ((v88 & 3) << 9);
  *((_DWORD *)v74 + 2) &= ~0x1000u;
  if (sub_22E721888(v18, 0x17Bu, 0x3A3u))
  {
    if (llvm::opt::Option::matches())
      v89 = 4096;
    else
      v89 = 0;
    *((_DWORD *)v74 + 2) = v74[1] & 0xFFFFEFFF | v89;
  }
  v55[2] |= 0x2000000000000uLL;
  if (sub_22E721714(v18, 490))
    v55[2] &= ~0x2000000000000uLL;
  *((_DWORD *)v74 + 2) &= ~1u;
  if (sub_22E721888(v18, 0x25Cu, 0x3FAu))
    *((_DWORD *)v74 + 2) = v74[1] & 0xFFFFFFFE | (llvm::opt::Option::matches() != 0);
  v55[2] &= ~0x4000000000000uLL;
  if (sub_22E721888(v18, 0x409u, 0x271u))
  {
    v90 = llvm::opt::Option::matches();
    v91 = 0x4000000000000;
    if (!v90)
      v91 = 0;
    v55[2] = v55[2] & 0xFFFBFFFFFFFFFFFFLL | v91;
  }
  *(_QWORD *)v51 &= ~0x400000000000uLL;
  if (sub_22E721888(v18, 0x280u, 0x40Fu))
  {
    v92 = llvm::opt::Option::matches();
    v93 = 0x400000000000;
    if (!v92)
      v93 = 0;
    v94 = *(_QWORD *)v51 & 0xFFFFBFFFFFFFFFFFLL | v93;
  }
  else
  {
    v94 = *(_QWORD *)v51;
  }
  *(_QWORD *)v51 = v94 & 0xFFFFBFFFFFFFFFFFLL;
  if (sub_22E721888(v18, 0x40Fu, 0x280u))
  {
    v95 = llvm::opt::Option::matches();
    v96 = 0x400000000000;
    if (v95)
      v96 = 0;
    *(_QWORD *)v51 = *(_QWORD *)v51 & 0xFFFFBFFFFFFFFFFFLL | v96;
  }
  *(_QWORD *)(v51 + 40) &= ~0x400000000uLL;
  if (sub_22E721888(v18, 0x453u, 0x33Fu))
  {
    v97 = llvm::opt::Option::matches();
    v98 = 0x400000000;
    if (!v97)
      v98 = 0;
    *(_QWORD *)(v51 + 40) = *(_QWORD *)(v51 + 40) & 0xFFFFFFFBFFFFFFFFLL | v98;
  }
  *((_DWORD *)v74 + 2) &= ~0x2000u;
  if (sub_22E721888(v18, 0x341u, 0x455u))
  {
    if (llvm::opt::Option::matches())
      v99 = 0x2000;
    else
      v99 = 0;
    *((_DWORD *)v74 + 2) = v74[1] & 0xFFFFDFFF | v99;
  }
  v100 = (__int128 *)(v51 + 1048);
  if (*(char *)(v51 + 1071) < 0)
  {
    sub_22E3BB2B4(&v1422, *(void **)(v51 + 1048), *(_QWORD *)(v51 + 1056));
    v101 = *(char *)(v51 + 1071);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v101 < 0)
      operator delete(*(void **)v100);
  }
  else
  {
    v1422 = *v100;
    v1423 = *(_QWORD *)(v51 + 1064);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  *(_QWORD *)v100 = 0;
  *(_QWORD *)(v51 + 1056) = 0;
  *(_DWORD *)(v51 + 1064) = __src[0];
  *(_DWORD *)(v51 + 1067) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v51 + 1071) = 0;
  if (SHIBYTE(v1423) < 0)
    operator delete((void *)v1422);
  sub_22E6EC3DC((uint64_t)__src, 1734, v18);
  if (LOBYTE(__src[3]))
  {
    if (*(char *)(v1211 + 1071) < 0)
    {
      sub_22E3BB2B4(&v1420, *(void **)(v1211 + 1048), *(_QWORD *)(v1211 + 1056));
    }
    else
    {
      v1420 = *v100;
      v1421 = *(_QWORD *)(v51 + 1064);
    }
    v102 = SHIBYTE(__src[2]);
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_22E3BB2B4(&v1418, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v1418 = *(_OWORD *)__src;
      v1419 = __src[2];
    }
    if (SHIBYTE(v1419) < 0)
    {
      sub_22E3BB2B4(&v1472, (void *)v1418, *((unint64_t *)&v1418 + 1));
    }
    else
    {
      v1472 = v1418;
      v1473 = (int64_t)v1419;
    }
    if (*(char *)(v1211 + 1071) < 0)
      operator delete(*(void **)v100);
    *v100 = v1472;
    *((_QWORD *)v100 + 2) = v1473;
    HIBYTE(v1473) = 0;
    LOBYTE(v1472) = 0;
    if (SHIBYTE(v1419) < 0)
      operator delete((void *)v1418);
    if (SHIBYTE(v1421) < 0)
    {
      operator delete((void *)v1420);
      if ((v102 & 0x80000000) == 0)
        goto LABEL_282;
    }
    else if ((v102 & 0x80000000) == 0)
    {
      goto LABEL_282;
    }
    operator delete(__src[0]);
  }
LABEL_282:
  v103 = v1211;
  v104 = (void **)(v1211 + 1592);
  v105 = (void **)(v1211 + 1520);
  memset(v1417, 0, sizeof(v1417));
  sub_22E618148(v1417, *(_QWORD *)(v1211 + 1520), *(_QWORD *)(v1211 + 1528), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1211 + 1528) - *(_QWORD *)(v1211 + 1520)) >> 3));
  memset(v1416, 0, sizeof(v1416));
  memset(__src, 0, 24);
  sub_22E63B344((void **)(v1211 + 1520));
  *(_OWORD *)(v1211 + 1520) = *(_OWORD *)__src;
  *(void **)(v103 + 1536) = __src[2];
  memset(__src, 0, 24);
  *(_QWORD *)&v1472 = __src;
  sub_22E3B3CC8((void ***)&v1472);
  *(_QWORD *)&v1472 = v1416;
  sub_22E3B3CC8((void ***)&v1472);
  *(_QWORD *)&v1472 = v1417;
  sub_22E3B3CC8((void ***)&v1472);
  llvm::opt::ArgList::getAllArgValues();
  *(_OWORD *)__src = v1472;
  __src[2] = (void *)v1473;
  v1473 = 0;
  v1472 = 0uLL;
  LOBYTE(__src[3]) = 1;
  *(_QWORD *)&v1466 = &v1472;
  sub_22E3B3CC8((void ***)&v1466);
  if (LOBYTE(__src[3]))
  {
    memset(v1415, 0, sizeof(v1415));
    sub_22E618148(v1415, *(_QWORD *)(v103 + 1520), *(_QWORD *)(v103 + 1528), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v103 + 1528) - *(_QWORD *)(v103 + 1520)) >> 3));
    v1413 = 0;
    v1412 = 0;
    v1414 = 0;
    sub_22E618148(&v1412, (uint64_t)__src[0], (uint64_t)__src[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__src[1] - (char *)__src[0]) >> 3));
    v1472 = 0uLL;
    v1473 = 0;
    sub_22E618148(&v1472, v1412, v1413, 0xAAAAAAAAAAAAAAABLL * ((v1413 - v1412) >> 3));
    sub_22E63B344(v105);
    *(_OWORD *)(v103 + 1520) = v1472;
    *(_QWORD *)(v103 + 1536) = v1473;
    v1473 = 0;
    v1472 = 0uLL;
    *(_QWORD *)&v1466 = &v1472;
    sub_22E3B3CC8((void ***)&v1466);
    *(_QWORD *)&v1466 = &v1412;
    sub_22E3B3CC8((void ***)&v1466);
    *(_QWORD *)&v1466 = v1415;
    v18 = v1209;
    sub_22E3B3CC8((void ***)&v1466);
    if (LOBYTE(__src[3]))
    {
      *(_QWORD *)&v1472 = __src;
      sub_22E3B3CC8((void ***)&v1472);
    }
  }
  memset(v1411, 0, sizeof(v1411));
  sub_22E618148(v1411, *(_QWORD *)(v103 + 1592), *(_QWORD *)(v103 + 1600), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v103 + 1600) - *(_QWORD *)(v103 + 1592)) >> 3));
  memset(v1410, 0, sizeof(v1410));
  memset(__src, 0, 24);
  sub_22E63B344(v104);
  *(_OWORD *)v104 = *(_OWORD *)__src;
  *(void **)(v103 + 1608) = __src[2];
  memset(__src, 0, 24);
  *(_QWORD *)&v1472 = __src;
  sub_22E3B3CC8((void ***)&v1472);
  *(_QWORD *)&v1472 = v1410;
  sub_22E3B3CC8((void ***)&v1472);
  *(_QWORD *)&v1472 = v1411;
  sub_22E3B3CC8((void ***)&v1472);
  llvm::opt::ArgList::getAllArgValues();
  *(_OWORD *)__src = v1472;
  __src[2] = (void *)v1473;
  v1473 = 0;
  v1472 = 0uLL;
  LOBYTE(__src[3]) = 1;
  *(_QWORD *)&v1466 = &v1472;
  sub_22E3B3CC8((void ***)&v1466);
  v106 = v103;
  if (LOBYTE(__src[3]))
  {
    memset(v1409, 0, sizeof(v1409));
    sub_22E618148(v1409, *(_QWORD *)(v103 + 1592), *(_QWORD *)(v103 + 1600), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v103 + 1600) - *(_QWORD *)(v103 + 1592)) >> 3));
    v1407 = 0;
    v1406 = 0;
    v1408 = 0;
    sub_22E618148(&v1406, (uint64_t)__src[0], (uint64_t)__src[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__src[1] - (char *)__src[0]) >> 3));
    v1472 = 0uLL;
    v1473 = 0;
    v106 = v1211;
    sub_22E618148(&v1472, v1406, v1407, 0xAAAAAAAAAAAAAAABLL * ((v1407 - v1406) >> 3));
    sub_22E63B344(v104);
    *(_OWORD *)v104 = v1472;
    *(_QWORD *)(v106 + 1608) = v1473;
    v1473 = 0;
    v1472 = 0uLL;
    *(_QWORD *)&v1466 = &v1472;
    sub_22E3B3CC8((void ***)&v1466);
    *(_QWORD *)&v1466 = &v1406;
    v18 = v1209;
    sub_22E3B3CC8((void ***)&v1466);
    *(_QWORD *)&v1466 = v1409;
    sub_22E3B3CC8((void ***)&v1466);
    if (LOBYTE(__src[3]))
    {
      *(_QWORD *)&v1472 = __src;
      sub_22E3B3CC8((void ***)&v1472);
    }
  }
  v107 = v1210;
  v1210[3] &= 0xFFFFFFFFE7FFFFFFLL;
  v108 = sub_22E6EC038(1655, v18, v1212);
  if (HIDWORD(v108))
    v109 = v107[3] & 0xFFFFFFFFA7FFFFFFLL | ((v108 & 3) << 27);
  else
    v109 = v107[3];
  v107[3] = v109 & 0xFFFFFFFFBFFFFFFFLL;
  if (sub_22E721888(v18, 0x679u, 0x4FBu))
  {
    v110 = llvm::opt::Option::matches();
    v112 = *v107;
    v111 = v107[1];
    v113 = v107[2];
    v114 = 0x40000000;
    if (!v110)
      v114 = 0;
    v115 = v107[3] & 0xFFFFFFFFBFFFFFFFLL | v114;
  }
  else
  {
    v113 = v107[2];
    v115 = v107[3];
    v112 = *v107;
    v111 = v107[1];
  }
  v116 = v1208;
  *v107 = v112;
  v107[1] = v111;
  v107[2] = v113;
  v107[3] = v115 & 0xFFFFFFFFBFFFFFFFLL;
  if (sub_22E721888(v18, 0x4FBu, 0x679u))
  {
    v117 = llvm::opt::Option::matches();
    v119 = *v107;
    v118 = v107[1];
    v120 = v107[2];
    v121 = 0x40000000;
    if (v117)
      v121 = 0;
    v122 = v107[3] & 0xFFFFFFFFBFFFFFFFLL | v121;
  }
  else
  {
    v120 = v107[2];
    v122 = v107[3];
    v119 = *v107;
    v118 = v107[1];
  }
  *v107 = v119;
  v107[1] = v118;
  v107[2] = v120;
  v107[3] = v122 & 0xFFFFFFFFFF7FFFFFLL;
  if (sub_22E721888(v18, 0x656u, 0x4EEu))
  {
    v123 = llvm::opt::Option::matches();
    v125 = *v107;
    v124 = v107[1];
    v126 = v107[2];
    v127 = 0x800000;
    if (!v123)
      v127 = 0;
    v128 = v107[3] & 0xFFFFFFFFFF7FFFFFLL | v127;
  }
  else
  {
    v126 = v107[2];
    v128 = v107[3];
    v125 = *v107;
    v124 = v107[1];
  }
  *v107 = v125;
  v107[1] = v124;
  v107[2] = v126;
  v107[3] = v128 & 0xFFFFFFFFFF7FFFFFLL;
  if (sub_22E721888(v18, 0x4EEu, 0x656u))
  {
    v129 = llvm::opt::Option::matches();
    v130 = 0x800000;
    if (v129)
      v130 = 0;
    v107[3] = v107[3] & 0xFFFFFFFFFF7FFFFFLL | v130;
  }
  *(_QWORD *)(v106 + 96) = *(_QWORD *)(v106 + 96) & 0xFFF9FFFFFFFFFFFFLL | 0x2000000000000;
  v131 = sub_22E6EC1FC(1620, 0xAu, v18, v1212);
  if (HIDWORD(v131))
    *(_QWORD *)(v106 + 96) = *(_QWORD *)(v106 + 96) & 0xFFF9FFFFFFFFFFFFLL | ((v131 & 3) << 49);
  v107[3] &= ~0x1000000uLL;
  if (sub_22E721888(v18, 0x653u, 0x4EDu))
  {
    v132 = llvm::opt::Option::matches();
    v134 = *v107;
    v133 = v107[1];
    v135 = v107[2];
    v136 = 0x1000000;
    if (!v132)
      v136 = 0;
    v137 = v107[3] & 0xFFFFFFFFFEFFFFFFLL | v136;
  }
  else
  {
    v135 = v107[2];
    v137 = v107[3];
    v134 = *v107;
    v133 = v107[1];
  }
  *v107 = v134;
  v107[1] = v133;
  v107[2] = v135;
  v107[3] = v137 & 0xFFFFFFFFFEFFFFFFLL;
  if (sub_22E721888(v18, 0x4EDu, 0x653u))
  {
    v138 = llvm::opt::Option::matches();
    v140 = *v107;
    v139 = v107[1];
    v141 = v107[2];
    v142 = 0x1000000;
    if (v138)
      v142 = 0;
    v143 = v107[3] & 0xFFFFFFFFFEFFFFFFLL | v142;
  }
  else
  {
    v141 = v107[2];
    v143 = v107[3];
    v140 = *v107;
    v139 = v107[1];
  }
  *v107 = v140;
  v107[1] = v139;
  v107[2] = v141;
  v107[3] = v143 & 0xFFFFFFFFFDFFFFFFLL;
  if (sub_22E721888(v18, 0x651u, 0x4EBu))
  {
    v144 = llvm::opt::Option::matches();
    v146 = *v107;
    v145 = v107[1];
    v147 = v107[2];
    v148 = 0x2000000;
    if (!v144)
      v148 = 0;
    v149 = v107[3] & 0xFFFFFFFFFDFFFFFFLL | v148;
  }
  else
  {
    v147 = v107[2];
    v149 = v107[3];
    v146 = *v107;
    v145 = v107[1];
  }
  *v107 = v146;
  v107[1] = v145;
  v107[2] = v147;
  v107[3] = v149 & 0xFFFFFFFFFDFFFFFFLL;
  if (sub_22E721888(v18, 0x4EBu, 0x651u))
  {
    v150 = llvm::opt::Option::matches();
    v152 = *v107;
    v151 = v107[1];
    v153 = v107[2];
    v154 = 0x2000000;
    if (v150)
      v154 = 0;
    v155 = v107[3] & 0xFFFFFFFFFDFFFFFFLL | v154;
  }
  else
  {
    v153 = v107[2];
    v155 = v107[3];
    v152 = *v107;
    v151 = v107[1];
  }
  *v107 = v152;
  v107[1] = v151;
  v107[2] = v153;
  v107[3] = v155 & 0xFFFFFFFFFBFFFFFFLL;
  if (sub_22E721888(v18, 0x657u, 0x4EFu))
  {
    v156 = llvm::opt::Option::matches();
    v158 = *v107;
    v157 = v107[1];
    v159 = v107[2];
    v160 = 0x4000000;
    if (!v156)
      v160 = 0;
    v161 = v107[3] & 0xFFFFFFFFFBFFFFFFLL | v160;
  }
  else
  {
    v159 = v107[2];
    v161 = v107[3];
    v158 = *v107;
    v157 = v107[1];
  }
  *v107 = v158;
  v107[1] = v157;
  v107[2] = v159;
  v107[3] = v161 & 0xFFFFFFFFFBFFFFFFLL;
  if (sub_22E721888(v18, 0x4EFu, 0x657u))
  {
    v162 = llvm::opt::Option::matches();
    v163 = 0x4000000;
    if (v162)
      v163 = 0;
    v107[3] = v107[3] & 0xFFFFFFFFFBFFFFFFLL | v163;
  }
  *(_QWORD *)(v106 + 96) = *(_QWORD *)(v106 + 96) & 0xFFE7FFFFFFFFFFFFLL | 0x8000000000000;
  v164 = sub_22E6EC1FC(1615, 0xBu, v18, v1212);
  if (HIDWORD(v164))
    *(_QWORD *)(v106 + 96) = *(_QWORD *)(v106 + 96) & 0xFFE7FFFFFFFFFFFFLL | ((v164 & 3) << 51);
  v107[3] &= ~0x20000000uLL;
  if (sub_22E721888(v18, 0x676u, 0x4F9u))
  {
    v165 = llvm::opt::Option::matches();
    v167 = *v107;
    v166 = v107[1];
    v168 = v107[2];
    v169 = 0x20000000;
    if (!v165)
      v169 = 0;
    v170 = v107[3] & 0xFFFFFFFFDFFFFFFFLL | v169;
  }
  else
  {
    v168 = v107[2];
    v170 = v107[3];
    v167 = *v107;
    v166 = v107[1];
  }
  *v107 = v167;
  v107[1] = v166;
  v107[2] = v168;
  v107[3] = v170 & 0xFFFFFFFFDFFFFFFFLL;
  if (sub_22E721888(v18, 0x4F9u, 0x676u))
  {
    v171 = llvm::opt::Option::matches();
    v173 = *v107;
    v172 = v107[1];
    v174 = v107[2];
    v175 = 0x20000000;
    if (v171)
      v175 = 0;
    v176 = v107[3] & 0xFFFFFFFFDFFFFFFFLL | v175;
  }
  else
  {
    v174 = v107[2];
    v176 = v107[3];
    v173 = *v107;
    v172 = v107[1];
  }
  *v107 = v173;
  v107[1] = v172;
  v107[2] = v174;
  v107[3] = v176 & 0xFFFFFFFEFFFFFFFFLL;
  if (sub_22E721888(v18, 0x67Bu, 0x4FCu))
  {
    v177 = llvm::opt::Option::matches();
    v179 = *v107;
    v178 = v107[1];
    v180 = v107[2];
    v181 = 0x100000000;
    if (!v177)
      v181 = 0;
    v182 = v107[3] & 0xFFFFFFFEFFFFFFFFLL | v181;
  }
  else
  {
    v180 = v107[2];
    v182 = v107[3];
    v179 = *v107;
    v178 = v107[1];
  }
  *v107 = v179;
  v107[1] = v178;
  v107[2] = v180;
  v107[3] = v182 & 0xFFFFFFFEFFFFFFFFLL;
  if (sub_22E721888(v18, 0x4FCu, 0x67Bu))
  {
    v183 = llvm::opt::Option::matches();
    v185 = *v107;
    v184 = v107[1];
    v186 = v107[2];
    v187 = 0x100000000;
    if (v183)
      v187 = 0;
    v188 = v107[3] & 0xFFFFFFFEFFFFFFFFLL | v187;
  }
  else
  {
    v186 = v107[2];
    v188 = v107[3];
    v185 = *v107;
    v184 = v107[1];
  }
  *v107 = v185;
  v107[1] = v184;
  v107[2] = v186;
  v107[3] = v188 & 0xFFFFFFFF7FFFFFFFLL;
  if (sub_22E721888(v18, 0x65Au, 0x4F3u))
  {
    v189 = llvm::opt::Option::matches();
    v191 = *v107;
    v190 = v107[1];
    v192 = v107[2];
    v193 = 0x80000000;
    if (!v189)
      v193 = 0;
    v194 = v107[3] & 0xFFFFFFFF7FFFFFFFLL | v193;
  }
  else
  {
    v192 = v107[2];
    v194 = v107[3];
    v191 = *v107;
    v190 = v107[1];
  }
  *v107 = v191;
  v107[1] = v190;
  v107[2] = v192;
  v107[3] = v194 & 0xFFFFFFFF7FFFFFFFLL;
  if (sub_22E721888(v18, 0x4F3u, 0x65Au))
  {
    v195 = llvm::opt::Option::matches();
    v197 = *v107;
    v196 = v107[1];
    v198 = v107[2];
    v199 = 0x80000000;
    if (v195)
      v199 = 0;
    v200 = v107[3] & 0xFFFFFFFF7FFFFFFFLL | v199;
  }
  else
  {
    v198 = v107[2];
    v200 = v107[3];
    v197 = *v107;
    v196 = v107[1];
  }
  *v107 = v197;
  v107[1] = v196;
  v107[2] = v198;
  v107[3] = v200 & 0xFFFFFFFDFFFFFFFFLL;
  v201 = sub_22E721714(v18, 1627);
  v202 = v107[3];
  if (v201)
    v202 |= 0x200000000uLL;
  v107[3] = v202 & 0xFFFFFFFBFFFFFFFFLL;
  if (sub_22E721888(v18, 0x659u, 0x4F2u))
  {
    v203 = llvm::opt::Option::matches();
    v205 = *v107;
    v204 = v107[1];
    v206 = v107[2];
    v207 = 0x400000000;
    if (!v203)
      v207 = 0;
    v208 = v107[3] & 0xFFFFFFFBFFFFFFFFLL | v207;
  }
  else
  {
    v206 = v107[2];
    v208 = v107[3];
    v205 = *v107;
    v204 = v107[1];
  }
  *v107 = v205;
  v107[1] = v204;
  v107[2] = v206;
  v107[3] = v208 & 0xFFFFFFFBFFFFFFFFLL;
  if (sub_22E721888(v18, 0x4F2u, 0x659u))
  {
    v209 = llvm::opt::Option::matches();
    v211 = *v107;
    v210 = v107[1];
    v212 = v107[2];
    v213 = 0x400000000;
    if (v209)
      v213 = 0;
    v214 = v107[3] & 0xFFFFFFFBFFFFFFFFLL | v213;
  }
  else
  {
    v212 = v107[2];
    v214 = v107[3];
    v211 = *v107;
    v210 = v107[1];
  }
  *v107 = v211;
  v107[1] = v210;
  v107[2] = v212;
  v107[3] = v214 & 0xFFEFFFFFFFFFFFFFLL;
  if (sub_22E721888(v18, 0x67Eu, 0x4FFu))
  {
    v215 = llvm::opt::Option::matches();
    v217 = *v107;
    v216 = v107[1];
    v218 = v107[2];
    v219 = 0x10000000000000;
    if (!v215)
      v219 = 0;
    v220 = v107[3] & 0xFFEFFFFFFFFFFFFFLL | v219;
  }
  else
  {
    v218 = v107[2];
    v220 = v107[3];
    v217 = *v107;
    v216 = v107[1];
  }
  *v107 = v217;
  v107[1] = v216;
  v107[2] = v218;
  v107[3] = v220 & 0xFFEFFFFFFFFFFFFFLL;
  if (sub_22E721888(v18, 0x4FFu, 0x67Eu))
  {
    v221 = llvm::opt::Option::matches();
    v222 = 0x10000000000000;
    if (v221)
      v222 = 0;
    v107[3] = v107[3] & 0xFFEFFFFFFFFFFFFFLL | v222;
  }
  *(_QWORD *)v116 = *v116;
  v223 = sub_22E6EC4C4(1670, v18, v1212);
  if (HIDWORD(v223))
    v116[1] = v223;
  v107[3] |= 8uLL;
  if (sub_22E721888(v18, 0x52Cu, 0x6BCu))
  {
    v224 = llvm::opt::Option::matches();
    v226 = *v107;
    v225 = v107[1];
    v227 = v107[2];
    v228 = 8;
    if (v224)
      v228 = 0;
    v229 = v107[3] & 0xFFFFFFFFFFFFFFF7 | v228;
  }
  else
  {
    v227 = v107[2];
    v229 = v107[3];
    v226 = *v107;
    v225 = v107[1];
  }
  *v107 = v226;
  v107[1] = v225;
  v107[2] = v227 & 0xEFFFFFFFFFFFFFFFLL;
  v107[3] = v229;
  if (sub_22E721888(v18, 0x3F2u, 0x23Bu))
  {
    v230 = llvm::opt::Option::matches();
    v231 = 0x1000000000000000;
    if (!v230)
      v231 = 0;
    v107[2] = v107[2] & 0xEFFFFFFFFFFFFFFFLL | v231;
  }
  memset(v1405, 0, sizeof(v1405));
  sub_22E618148(v1405, *(_QWORD *)(v106 + 1216), *(_QWORD *)(v106 + 1224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v106 + 1224) - *(_QWORD *)(v106 + 1216)) >> 3));
  memset(v1404, 0, sizeof(v1404));
  memset(__src, 0, 24);
  sub_22E63B344((void **)(v106 + 1216));
  *(_OWORD *)(v106 + 1216) = *(_OWORD *)__src;
  *(void **)(v106 + 1232) = __src[2];
  memset(__src, 0, 24);
  *(_QWORD *)&v1472 = __src;
  sub_22E3B3CC8((void ***)&v1472);
  *(_QWORD *)&v1472 = v1404;
  sub_22E3B3CC8((void ***)&v1472);
  *(_QWORD *)&v1472 = v1405;
  sub_22E3B3CC8((void ***)&v1472);
  llvm::opt::ArgList::getAllArgValues();
  *(_OWORD *)__src = v1472;
  __src[2] = (void *)v1473;
  v1473 = 0;
  v1472 = 0uLL;
  LOBYTE(__src[3]) = 1;
  *(_QWORD *)&v1466 = &v1472;
  sub_22E3B3CC8((void ***)&v1466);
  if (LOBYTE(__src[3]))
  {
    memset(v1403, 0, sizeof(v1403));
    sub_22E618148(v1403, *(_QWORD *)(v106 + 1216), *(_QWORD *)(v106 + 1224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v106 + 1224) - *(_QWORD *)(v106 + 1216)) >> 3));
    v1401 = 0;
    v1400 = 0;
    v1402 = 0;
    sub_22E618148(&v1400, (uint64_t)__src[0], (uint64_t)__src[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__src[1] - (char *)__src[0]) >> 3));
    v1472 = 0uLL;
    v1473 = 0;
    sub_22E618148(&v1472, v1400, v1401, 0xAAAAAAAAAAAAAAABLL * ((v1401 - v1400) >> 3));
    sub_22E63B344((void **)(v106 + 1216));
    *(_OWORD *)(v1211 + 1216) = v1472;
    *(_QWORD *)(v1211 + 1232) = v1473;
    v1473 = 0;
    v1472 = 0uLL;
    *(_QWORD *)&v1466 = &v1472;
    sub_22E3B3CC8((void ***)&v1466);
    *(_QWORD *)&v1466 = &v1400;
    v18 = v1209;
    sub_22E3B3CC8((void ***)&v1466);
    *(_QWORD *)&v1466 = v1403;
    v106 = v1211;
    sub_22E3B3CC8((void ***)&v1466);
    if (LOBYTE(__src[3]))
    {
      *(_QWORD *)&v1472 = __src;
      sub_22E3B3CC8((void ***)&v1472);
    }
  }
  v107[2] &= ~0x200000000uLL;
  if (sub_22E721888(v18, 0x33Eu, 0x452u))
  {
    v232 = llvm::opt::Option::matches();
    v233 = 0x200000000;
    if (!v232)
      v233 = 0;
    v107[2] = v107[2] & 0xFFFFFFFDFFFFFFFFLL | v233;
  }
  *(_QWORD *)v106 &= ~0x4000000000000uLL;
  v234 = sub_22E721714(v18, 814);
  v235 = *(_QWORD *)v106;
  if (v234)
    v235 = *(_QWORD *)v106 | 0x4000000000000;
  *(_QWORD *)v106 = v235 & 0xFFF7FFFFFFFFFFFFLL;
  v236 = sub_22E721714(v18, 813);
  v237 = *(_QWORD *)v106;
  if (v236)
    v237 = *(_QWORD *)v106 | 0x8000000000000;
  *(_QWORD *)v106 = v237 & 0xFFEFFFFFFFFFFFFFLL;
  if (sub_22E721714(v18, 812))
    *(_QWORD *)v106 |= 0x10000000000000uLL;
  *(_DWORD *)v107 = 200;
  v238 = sub_22E6EC038(1853, v18, v1212);
  if (HIDWORD(v238))
    *(_DWORD *)v107 = v238;
  *(_QWORD *)v106 &= ~0x2000000000000000uLL;
  if (sub_22E721888(v18, 0x73Cu, 0x575u))
  {
    v239 = llvm::opt::Option::matches();
    v240 = 0x2000000000000000;
    if (!v239)
      v240 = 0;
    v241 = *(_QWORD *)v106 & 0xDFFFFFFFFFFFFFFFLL | v240;
  }
  else
  {
    v241 = *(_QWORD *)v106;
  }
  *(_QWORD *)v106 = v241 | 0x4000000000000000;
  if (sub_22E721888(v18, 0x574u, 0x73Bu))
  {
    v242 = llvm::opt::Option::matches();
    v243 = 0x4000000000000000;
    if (v242)
      v243 = 0;
    *(_QWORD *)v106 = *(_QWORD *)v106 & 0xBFFFFFFFFFFFFFFFLL | v243;
  }
  *((_DWORD *)v107 + 1) = 1;
  v244 = v1212;
  v245 = sub_22E6EC038(1850, v18, v1212);
  v246 = (unint64_t)*((unsigned int *)v107 + 3) << 32;
  if (HIDWORD(v245))
    v247 = *v107 | ((unint64_t)v245 << 32);
  else
    v247 = *v107;
  *v107 = v247;
  v107[1] = v246;
  v248 = sub_22E6EC038(1860, v18, v244);
  if (HIDWORD(v248))
    v249 = v107[1] & 0xFFFFFFFF00000000 | v248;
  else
    v249 = v107[1];
  v107[3] &= ~0x100000000000000uLL;
  v107[1] = v249;
  if (sub_22E721888(v18, 0x2A2u, 0x41Bu))
  {
    v250 = llvm::opt::Option::matches();
    v252 = *v107;
    v251 = v107[1];
    v253 = v107[2];
    v254 = 0x100000000000000;
    if (!v250)
      v254 = 0;
    v255 = v107[3] & 0xFEFFFFFFFFFFFFFFLL | v254;
  }
  else
  {
    v253 = v107[2];
    v255 = v107[3];
    v252 = *v107;
    v251 = v107[1];
  }
  *v107 = v252;
  v107[1] = v251;
  v107[2] = v253;
  v107[3] = v255 & 0xFEFFFFFFFFFFFFFFLL;
  if (sub_22E721888(v18, 0x41Bu, 0x2A2u))
  {
    v256 = llvm::opt::Option::matches();
    v257 = 0x100000000000000;
    if (v256)
      v257 = 0;
    v107[3] = v107[3] & 0xFEFFFFFFFFFFFFFFLL | v257;
  }
  v258 = (void **)(v106 + 880);
  if (*(char *)(v106 + 903) < 0)
  {
    sub_22E3BB2B4(&v1398, *(void **)(v106 + 880), *(_QWORD *)(v106 + 888));
    v259 = *(char *)(v106 + 903);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v259 < 0)
      operator delete(*v258);
  }
  else
  {
    v1398 = *(_OWORD *)v258;
    v1399 = *(_QWORD *)(v106 + 896);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  *v258 = 0;
  *(_QWORD *)(v106 + 888) = 0;
  *(_DWORD *)(v106 + 896) = __src[0];
  *(_DWORD *)(v106 + 899) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v106 + 903) = 0;
  if (SHIBYTE(v1399) < 0)
    operator delete((void *)v1398);
  sub_22E6EC3DC((uint64_t)__src, 1750, v18);
  if (LOBYTE(__src[3]))
  {
    if (*(char *)(v106 + 903) < 0)
    {
      sub_22E3BB2B4(&v1396, *(void **)(v106 + 880), *(_QWORD *)(v106 + 888));
    }
    else
    {
      v1396 = *(_OWORD *)v258;
      v1397 = *(_QWORD *)(v106 + 896);
    }
    v260 = SHIBYTE(__src[2]);
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_22E3BB2B4(&v1394, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v1394 = *(_OWORD *)__src;
      v1395 = __src[2];
    }
    if (SHIBYTE(v1395) < 0)
    {
      sub_22E3BB2B4(&v1472, (void *)v1394, *((unint64_t *)&v1394 + 1));
    }
    else
    {
      v1472 = v1394;
      v1473 = (int64_t)v1395;
    }
    if (*(char *)(v106 + 903) < 0)
      operator delete(*v258);
    *(_OWORD *)v258 = v1472;
    *(_QWORD *)(v106 + 896) = v1473;
    HIBYTE(v1473) = 0;
    LOBYTE(v1472) = 0;
    if (SHIBYTE(v1395) < 0)
      operator delete((void *)v1394);
    if (SHIBYTE(v1397) < 0)
    {
      operator delete((void *)v1396);
      if ((v260 & 0x80000000) == 0)
        goto LABEL_468;
    }
    else if ((v260 & 0x80000000) == 0)
    {
      goto LABEL_468;
    }
    operator delete(__src[0]);
  }
LABEL_468:
  v107[2] &= ~0x200000000000uLL;
  if (sub_22E721888(v18, 0x35Eu, 0x462u))
  {
    v261 = llvm::opt::Option::matches();
    v263 = *v107;
    v262 = v107[1];
    v264 = v107[3];
    v265 = 0x200000000000;
    if (!v261)
      v265 = 0;
    v266 = v107[2] & 0xFFFFDFFFFFFFFFFFLL | v265;
  }
  else
  {
    v266 = v107[2];
    v264 = v107[3];
    v263 = *v107;
    v262 = v107[1];
  }
  v267 = v1208;
  *v107 = v263;
  v107[1] = v262;
  v107[2] = v266 & 0xFFFEFFFFFFFFFFFFLL;
  v107[3] = v264;
  if (sub_22E721714(v18, 914))
    v107[2] |= 0x1000000000000uLL;
  *(_QWORD *)v106 |= 0x80uLL;
  if (sub_22E721714(v18, 952))
    *(_QWORD *)v106 &= ~0x80uLL;
  *(_WORD *)(v106 + 104) &= 0xFFE3u;
  v268 = sub_22E6EC1FC(1817, 0xEu, v18, v1212);
  if (HIDWORD(v268))
    *(_WORD *)(v106 + 104) = *(_WORD *)(v106 + 104) & 0xFFE3 | (4 * (v268 & 7));
  *(_QWORD *)v106 |= 0x20000uLL;
  if (sub_22E721888(v18, 0x55Bu, 0x70Fu))
  {
    v269 = llvm::opt::Option::matches();
    v270 = 0x20000;
    if (v269)
      v270 = 0;
    v271 = *(_QWORD *)v106 & 0xFFFFFFFFFFFDFFFFLL | v270;
  }
  else
  {
    v271 = *(_QWORD *)v106;
  }
  *(_QWORD *)v106 = v271 | 8;
  if (sub_22E721714(v18, 1380))
    *(_QWORD *)v106 &= ~8uLL;
  v107[3] |= 0x40uLL;
  if (sub_22E721888(v18, 0x479u, 0x587u))
  {
    v272 = llvm::opt::Option::matches();
    v274 = *v107;
    v273 = v107[1];
    v275 = v107[2];
    v276 = 64;
    if (v272)
      v276 = 0;
    v277 = v107[3] & 0xFFFFFFFFFFFFFFBFLL | v276;
  }
  else
  {
    v275 = v107[2];
    v277 = v107[3];
    v274 = *v107;
    v273 = v107[1];
  }
  *v107 = v274;
  v107[1] = v273;
  v107[2] = v275;
  v107[3] = v277 & 0xFFFFFFFFFFFFFF7FLL;
  if (sub_22E721888(v18, 0x591u, 0x47Eu))
  {
    v278 = llvm::opt::Option::matches();
    v279 = 128;
    if (!v278)
      v279 = 0;
    v107[3] = v107[3] & 0xFFFFFFFFFFFFFF7FLL | v279;
  }
  *(_QWORD *)v106 &= ~0x200uLL;
  if (sub_22E721888(v18, 0x581u, 0x476u))
  {
    v280 = llvm::opt::Option::matches();
    v281 = 512;
    if (!v280)
      v281 = 0;
    v282 = *(_QWORD *)v106 & 0xFFFFFFFFFFFFFDFFLL | v281;
  }
  else
  {
    v282 = *(_QWORD *)v106;
  }
  *(_QWORD *)v106 = v282 & 0xFFFFFFFFFFFFFBFFLL;
  if (sub_22E721888(v18, 0x31Cu, 0x445u))
  {
    v283 = llvm::opt::Option::matches();
    v284 = 1024;
    if (!v283)
      v284 = 0;
    v285 = *(_QWORD *)v106 & 0xFFFFFFFFFFFFFBFFLL | v284;
  }
  else
  {
    v285 = *(_QWORD *)v106;
  }
  *(_QWORD *)v106 = v285 & 0xFFFFFFFFFFFFFBFFLL;
  if (sub_22E721888(v18, 0x445u, 0x31Cu))
  {
    v286 = llvm::opt::Option::matches();
    v287 = 1024;
    if (v286)
      v287 = 0;
    v288 = *(_QWORD *)v106 & 0xFFFFFFFFFFFFFBFFLL | v287;
  }
  else
  {
    v288 = *(_QWORD *)v106;
  }
  *(_QWORD *)v106 = v288 & 0xFFFFFFFFFFFFF7FFLL;
  if (sub_22E721888(v18, 0x2F4u, 0x42Du))
  {
    v289 = llvm::opt::Option::matches();
    v290 = 2048;
    if (!v289)
      v290 = 0;
    v291 = *(_QWORD *)v106 & 0xFFFFFFFFFFFFF7FFLL | v290;
  }
  else
  {
    v291 = *(_QWORD *)v106;
  }
  *(_QWORD *)v106 = v291 & 0xFFFFFFFFFFFFF7FFLL;
  if (sub_22E721888(v18, 0x42Du, 0x2F4u))
  {
    v292 = llvm::opt::Option::matches();
    v293 = 2048;
    if (v292)
      v293 = 0;
    v294 = *(_QWORD *)v106 & 0xFFFFFFFFFFFFF7FFLL | v293;
  }
  else
  {
    v294 = *(_QWORD *)v106;
  }
  *(_QWORD *)v106 = v294 & 0xFFFFFFFFFFFFEFFFLL;
  if (sub_22E721888(v18, 0x2F3u, 0x42Cu))
  {
    v295 = llvm::opt::Option::matches();
    v296 = 4096;
    if (!v295)
      v296 = 0;
    v297 = *(_QWORD *)v106 & 0xFFFFFFFFFFFFEFFFLL | v296;
  }
  else
  {
    v297 = *(_QWORD *)v106;
  }
  *(_QWORD *)v106 = v297 & 0xFFFFFFFFFFFFEFFFLL;
  if (sub_22E721888(v18, 0x42Cu, 0x2F3u))
  {
    v298 = llvm::opt::Option::matches();
    v299 = 4096;
    if (v298)
      v299 = 0;
    *(_QWORD *)v106 = *(_QWORD *)v106 & 0xFFFFFFFFFFFFEFFFLL | v299;
  }
  v107[3] &= ~0x400uLL;
  if (sub_22E721888(v18, 0x584u, 0x478u))
  {
    v300 = llvm::opt::Option::matches();
    v302 = *v107;
    v301 = v107[1];
    v303 = v107[2];
    v304 = 1024;
    if (!v300)
      v304 = 0;
    v305 = v107[3] & 0xFFFFFFFFFFFFFBFFLL | v304;
  }
  else
  {
    v303 = v107[2];
    v305 = v107[3];
    v302 = *v107;
    v301 = v107[1];
  }
  *v107 = v302;
  v107[1] = v301;
  v107[2] = v303;
  v107[3] = v305 & 0xFFFFFFFFFFFFFBFFLL;
  if (sub_22E721888(v18, 0x478u, 0x584u))
  {
    v306 = llvm::opt::Option::matches();
    v307 = 1024;
    if (v306)
      v307 = 0;
    v107[3] = v107[3] & 0xFFFFFFFFFFFFFBFFLL | v307;
  }
  *(_QWORD *)v106 &= ~0x2000000000uLL;
  v308 = sub_22E721714(v18, 1176);
  v309 = *(_QWORD *)v106;
  if (v308)
    v309 = *(_QWORD *)v106 | 0x2000000000;
  *(_QWORD *)v106 = v309 & 0xFFFFFEFFFFFFFFFFLL;
  if (sub_22E721888(v18, 0x410u, 0x286u))
  {
    v310 = llvm::opt::Option::matches();
    v311 = 0x10000000000;
    if (!v310)
      v311 = 0;
    *(_QWORD *)v106 = *(_QWORD *)v106 & 0xFFFFFEFFFFFFFFFFLL | v311;
  }
  v312 = (void **)(v106 + 1320);
  v313 = v1210;
  v1210[1] = *((unsigned int *)v1210 + 2);
  v314 = sub_22E6EC038(1499, v18, v1212);
  if (HIDWORD(v314))
    v315 = v313[1] | ((unint64_t)v314 << 32);
  else
    v315 = v313[1];
  v316 = v313[2] & 0xFFFFFFFEFFFFFFFFLL;
  v313[1] = v315;
  v313[2] = v316;
  if (sub_22E721714(v18, 912))
    v313[2] |= 0x100000000uLL;
  v267[2] &= ~0x200u;
  if (sub_22E721888(v18, 0x4A7u, 0x5E8u))
  {
    if (llvm::opt::Option::matches())
      v317 = 512;
    else
      v317 = 0;
    v267[2] = v267[2] & 0xFFFFFDFF | v317;
  }
  memset(v1393, 0, sizeof(v1393));
  sub_22E618148(v1393, *(_QWORD *)(v106 + 1496), *(_QWORD *)(v106 + 1504), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v106 + 1504) - *(_QWORD *)(v106 + 1496)) >> 3));
  memset(v1392, 0, sizeof(v1392));
  memset(__src, 0, 24);
  sub_22E63B344((void **)(v106 + 1496));
  *(_OWORD *)(v106 + 1496) = *(_OWORD *)__src;
  *(void **)(v106 + 1512) = __src[2];
  memset(__src, 0, 24);
  *(_QWORD *)&v1472 = __src;
  sub_22E3B3CC8((void ***)&v1472);
  *(_QWORD *)&v1472 = v1392;
  sub_22E3B3CC8((void ***)&v1472);
  *(_QWORD *)&v1472 = v1393;
  sub_22E3B3CC8((void ***)&v1472);
  llvm::opt::ArgList::getAllArgValues();
  *(_OWORD *)__src = v1472;
  __src[2] = (void *)v1473;
  v1473 = 0;
  v1472 = 0uLL;
  LOBYTE(__src[3]) = 1;
  *(_QWORD *)&v1466 = &v1472;
  sub_22E3B3CC8((void ***)&v1466);
  if (LOBYTE(__src[3]))
  {
    memset(v1391, 0, sizeof(v1391));
    sub_22E618148(v1391, *(_QWORD *)(v106 + 1496), *(_QWORD *)(v106 + 1504), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v106 + 1504) - *(_QWORD *)(v106 + 1496)) >> 3));
    v1389 = 0;
    v1388 = 0;
    v1390 = 0;
    sub_22E618148(&v1388, (uint64_t)__src[0], (uint64_t)__src[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__src[1] - (char *)__src[0]) >> 3));
    v1472 = 0uLL;
    v1473 = 0;
    sub_22E618148(&v1472, v1388, v1389, 0xAAAAAAAAAAAAAAABLL * ((v1389 - v1388) >> 3));
    sub_22E63B344((void **)(v106 + 1496));
    *(_OWORD *)(v106 + 1496) = v1472;
    *(_QWORD *)(v1211 + 1512) = v1473;
    v1473 = 0;
    v1472 = 0uLL;
    *(_QWORD *)&v1466 = &v1472;
    sub_22E3B3CC8((void ***)&v1466);
    *(_QWORD *)&v1466 = &v1388;
    v18 = v1209;
    sub_22E3B3CC8((void ***)&v1466);
    *(_QWORD *)&v1466 = v1391;
    v106 = v1211;
    sub_22E3B3CC8((void ***)&v1466);
    if (LOBYTE(__src[3]))
    {
      *(_QWORD *)&v1472 = __src;
      sub_22E3B3CC8((void ***)&v1472);
    }
  }
  *(_QWORD *)v106 |= 0x40uLL;
  if (sub_22E721888(v18, 0x4AAu, 0x5EEu))
  {
    v318 = llvm::opt::Option::matches();
    v319 = 64;
    if (v318)
      v319 = 0;
    *(_QWORD *)v106 = *(_QWORD *)v106 & 0xFFFFFFFFFFFFFFBFLL | v319;
  }
  v320 = v1210;
  v1210[2] &= ~0x80000000000000uLL;
  if (sub_22E721888(v18, 0x6AEu, 0x522u))
  {
    v321 = llvm::opt::Option::matches();
    v323 = *v320;
    v322 = v320[1];
    v324 = v320[3];
    v325 = 0x80000000000000;
    if (!v321)
      v325 = 0;
    v326 = v320[2] & 0xFF7FFFFFFFFFFFFFLL | v325;
  }
  else
  {
    v326 = v320[2];
    v324 = v320[3];
    v323 = *v320;
    v322 = v320[1];
  }
  *v320 = v323;
  v320[1] = v322;
  v320[2] = v326 & 0xFDFFFFFFFFFFFFFFLL;
  v320[3] = v324;
  if (sub_22E721888(v18, 0x6B1u, 0x525u))
  {
    v327 = llvm::opt::Option::matches();
    v329 = *v320;
    v328 = v320[1];
    v330 = v320[3];
    v331 = 0x200000000000000;
    if (!v327)
      v331 = 0;
    v332 = v320[2] & 0xFDFFFFFFFFFFFFFFLL | v331;
  }
  else
  {
    v332 = v320[2];
    v330 = v320[3];
    v329 = *v320;
    v328 = v320[1];
  }
  *v320 = v329;
  v320[1] = v328;
  v320[2] = v332;
  v320[3] = v330 & 0xFDFFFFFFFFFFFFFFLL;
  v333 = sub_22E721714(v18, 1723);
  v334 = v320[3];
  if (v333)
    v334 |= 0x200000000000000uLL;
  v320[3] = v334 & 0xFBFFFFFFFFFFFFFFLL;
  if (sub_22E721888(v18, 0x6BFu, 0x530u))
  {
    v335 = llvm::opt::Option::matches();
    v337 = *v320;
    v336 = v320[1];
    v338 = v320[2];
    v339 = 0x400000000000000;
    if (!v335)
      v339 = 0;
    v340 = v320[3] & 0xFBFFFFFFFFFFFFFFLL | v339;
  }
  else
  {
    v338 = v320[2];
    v340 = v320[3];
    v337 = *v320;
    v336 = v320[1];
  }
  *v320 = v337;
  v320[1] = v336;
  v320[2] = v338;
  v320[3] = v340 & 0xF7FFFFFFFFFFFFFFLL;
  v341 = sub_22E721714(v18, 1755);
  v342 = v320[3];
  if (v341)
    v342 |= 0x800000000000000uLL;
  v320[3] = v342 & 0xEFFFFFFFFFFFFFFFLL;
  if (sub_22E721714(v18, 1754))
    v320[3] |= 0x1000000000000000uLL;
  *(_WORD *)(v106 + 104) &= 0xFF9Fu;
  v343 = sub_22E6EC1FC(1758, 0x11u, v18, v1212);
  if (HIDWORD(v343))
    *(_WORD *)(v106 + 104) = *(_WORD *)(v106 + 104) & 0xFF9F | (32 * (v343 & 3));
  v344 = (void **)(v106 + 664);
  if (*(char *)(v106 + 687) < 0)
  {
    sub_22E3BB2B4(&v1386, *(void **)(v106 + 664), *(_QWORD *)(v106 + 672));
    v345 = *(char *)(v106 + 687);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v345 < 0)
      operator delete(*v344);
  }
  else
  {
    v1386 = *(_OWORD *)v344;
    v1387 = *(_QWORD *)(v106 + 680);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  *v344 = 0;
  *(_QWORD *)(v106 + 672) = 0;
  *(_DWORD *)(v106 + 680) = __src[0];
  *(_DWORD *)(v106 + 683) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v106 + 687) = 0;
  if (SHIBYTE(v1387) < 0)
    operator delete((void *)v1386);
  sub_22E6EC3DC((uint64_t)__src, 1765, v18);
  if (LOBYTE(__src[3]))
  {
    if (*(char *)(v106 + 687) < 0)
    {
      sub_22E3BB2B4(&v1384, *(void **)(v106 + 664), *(_QWORD *)(v106 + 672));
    }
    else
    {
      v1384 = *(_OWORD *)v344;
      v1385 = *(_QWORD *)(v106 + 680);
    }
    v346 = SHIBYTE(__src[2]);
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_22E3BB2B4(&v1382, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v1382 = *(_OWORD *)__src;
      v1383 = __src[2];
    }
    if (SHIBYTE(v1383) < 0)
    {
      sub_22E3BB2B4(&v1472, (void *)v1382, *((unint64_t *)&v1382 + 1));
    }
    else
    {
      v1472 = v1382;
      v1473 = (int64_t)v1383;
    }
    if (*(char *)(v106 + 687) < 0)
      operator delete(*v344);
    *(_OWORD *)v344 = v1472;
    *(_QWORD *)(v106 + 680) = v1473;
    HIBYTE(v1473) = 0;
    LOBYTE(v1472) = 0;
    if (SHIBYTE(v1383) < 0)
      operator delete((void *)v1382);
    if (SHIBYTE(v1385) < 0)
    {
      operator delete((void *)v1384);
      if ((v346 & 0x80000000) == 0)
        goto LABEL_608;
    }
    else if ((v346 & 0x80000000) == 0)
    {
      goto LABEL_608;
    }
    operator delete(__src[0]);
  }
LABEL_608:
  *(_QWORD *)(v106 + 40) &= ~0x10000000000uLL;
  if (sub_22E721888(v18, 0x6E4u, 0x541u))
  {
    v347 = llvm::opt::Option::matches();
    v348 = 0x10000000000;
    if (!v347)
      v348 = 0;
    v349 = *(_QWORD *)(v106 + 40) & 0xFFFFFEFFFFFFFFFFLL | v348;
  }
  else
  {
    v349 = *(_QWORD *)(v106 + 40);
  }
  v350 = v1208;
  *(_QWORD *)(v106 + 40) = v349 & 0xFFFFFEFFFFFFFFFFLL;
  if (sub_22E721888(v18, 0x541u, 0x6E4u))
  {
    v351 = llvm::opt::Option::matches();
    v352 = 0x10000000000;
    if (v351)
      v352 = 0;
    v353 = *(_QWORD *)(v106 + 40) & 0xFFFFFEFFFFFFFFFFLL | v352;
  }
  else
  {
    v353 = *(_QWORD *)(v106 + 40);
  }
  *(_QWORD *)(v106 + 40) = v353 & 0xFFFFFFFDFFFFFFFFLL;
  if (sub_22E721888(v18, 0x641u, 0x4E1u))
  {
    v354 = llvm::opt::Option::matches();
    v355 = 0x200000000;
    if (!v354)
      v355 = 0;
    *(_QWORD *)(v106 + 40) = *(_QWORD *)(v106 + 40) & 0xFFFFFFFDFFFFFFFFLL | v355;
  }
  *(_QWORD *)v106 &= ~0x40000uLL;
  if (sub_22E721888(v18, 0x638u, 0x4DAu))
  {
    v356 = llvm::opt::Option::matches();
    v357 = 0x40000;
    if (!v356)
      v357 = 0;
    *(_QWORD *)v106 = *(_QWORD *)v106 & 0xFFFFFFFFFFFBFFFFLL | v357;
  }
  *(_QWORD *)(v106 + 40) |= 0x100000000000uLL;
  if (sub_22E721888(v18, 0x55Cu, 0x710u))
  {
    v358 = llvm::opt::Option::matches();
    v359 = 0x100000000000;
    if (v358)
      v359 = 0;
    *(_QWORD *)(v106 + 40) = *(_QWORD *)(v106 + 40) & 0xFFFFEFFFFFFFFFFFLL | v359;
  }
  *(_WORD *)(v106 + 64) &= ~0x200u;
  if (sub_22E721888(v18, 0x730u, 0x56Cu))
  {
    if (llvm::opt::Option::matches())
      v360 = 512;
    else
      v360 = 0;
    *(_WORD *)(v106 + 64) = *(_WORD *)(v106 + 64) & 0xFDFF | v360;
  }
  v361 = v1210;
  v1210[2] &= ~0x80000000000uLL;
  if (sub_22E721888(v18, 0x6ACu, 0x520u))
  {
    v362 = llvm::opt::Option::matches();
    v363 = 0x80000000000;
    if (!v362)
      v363 = 0;
    v361[2] = v361[2] & 0xFFFFF7FFFFFFFFFFLL | v363;
  }
  v350[2] &= ~0x800u;
  if (sub_22E721888(v18, 0x2DFu, 0x422u))
  {
    if (llvm::opt::Option::matches())
      v364 = 2048;
    else
      v364 = 0;
    v350[2] = v350[2] & 0xFFFFF7FF | v364;
  }
  *(_WORD *)(v106 + 64) &= ~0x400u;
  if (sub_22E721888(v18, 0x71Fu, 0x565u))
  {
    if (llvm::opt::Option::matches())
      v365 = 1024;
    else
      v365 = 0;
    *(_WORD *)(v106 + 64) = *(_WORD *)(v106 + 64) & 0xFBFF | v365;
  }
  v366 = v1210;
  v1210[3] &= ~0x20uLL;
  if (sub_22E721888(v18, 0x577u, 0x747u))
  {
    v367 = llvm::opt::Option::matches();
    v368 = 32;
    if (!v367)
      v368 = 0;
    v366[3] = v366[3] & 0xFFFFFFFFFFFFFFDFLL | v368;
  }
  *(_QWORD *)v106 &= ~0x2000000000000uLL;
  if (sub_22E721888(v18, 0x2EEu, 0x427u))
  {
    v369 = llvm::opt::Option::matches();
    v370 = 0x2000000000000;
    if (!v369)
      v370 = 0;
    *(_QWORD *)v106 = *(_QWORD *)v106 & 0xFFFDFFFFFFFFFFFFLL | v370;
  }
  v371 = (void **)(v106 + 112);
  if (*(char *)(v106 + 135) < 0)
  {
    sub_22E3BB2B4(&v1380, *(void **)(v106 + 112), *(_QWORD *)(v106 + 120));
    v372 = *(char *)(v106 + 135);
    qmemcpy(__src, "one", 3);
    if (v372 < 0)
      operator delete(*v371);
  }
  else
  {
    v1380 = *(_OWORD *)v371;
    v1381 = *(_QWORD *)(v106 + 128);
    qmemcpy(__src, "one", 3);
  }
  *(_BYTE *)(v106 + 112) = 110;
  *(_WORD *)(v106 + 113) = __src[0];
  *(_BYTE *)(v106 + 115) = BYTE2(__src[0]);
  *(_BYTE *)(v106 + 116) = 0;
  *(_BYTE *)(v106 + 135) = 4;
  if (SHIBYTE(v1381) < 0)
    operator delete((void *)v1380);
  sub_22E6EC3DC((uint64_t)__src, 440, v18);
  if (LOBYTE(__src[3]))
  {
    if (*(char *)(v106 + 135) < 0)
    {
      sub_22E3BB2B4(&v1378, *(void **)(v106 + 112), *(_QWORD *)(v106 + 120));
    }
    else
    {
      v1378 = *(_OWORD *)v371;
      v1379 = *(_QWORD *)(v106 + 128);
    }
    v373 = SHIBYTE(__src[2]);
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_22E3BB2B4(&v1376, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v1376 = *(_OWORD *)__src;
      v1377 = __src[2];
    }
    if (SHIBYTE(v1377) < 0)
    {
      sub_22E3BB2B4(&v1472, (void *)v1376, *((unint64_t *)&v1376 + 1));
    }
    else
    {
      v1472 = v1376;
      v1473 = (int64_t)v1377;
    }
    if (*(char *)(v106 + 135) < 0)
      operator delete(*v371);
    *(_OWORD *)v371 = v1472;
    *(_QWORD *)(v106 + 128) = v1473;
    HIBYTE(v1473) = 0;
    LOBYTE(v1472) = 0;
    if (SHIBYTE(v1377) < 0)
      operator delete((void *)v1376);
    if (SHIBYTE(v1379) < 0)
    {
      operator delete((void *)v1378);
      if ((v373 & 0x80000000) == 0)
        goto LABEL_681;
    }
    else if ((v373 & 0x80000000) == 0)
    {
      goto LABEL_681;
    }
    operator delete(__src[0]);
  }
LABEL_681:
  *(_QWORD *)v106 &= ~0x100000uLL;
  if (sub_22E721888(v18, 0x216u, 0x3E7u))
  {
    v374 = llvm::opt::Option::matches();
    v375 = 0x100000;
    if (!v374)
      v375 = 0;
    v376 = *(_QWORD *)v106 & 0xFFFFFFFFFFEFFFFFLL | v375;
  }
  else
  {
    v376 = *(_QWORD *)v106;
  }
  *(_QWORD *)v106 = v376 & 0xFDFFFFFFFFFFFFFFLL;
  if (sub_22E721888(v18, 0x6B5u, 0x527u))
  {
    v377 = llvm::opt::Option::matches();
    v378 = 0x200000000000000;
    if (!v377)
      v378 = 0;
    *(_QWORD *)v106 = *(_QWORD *)v106 & 0xFDFFFFFFFFFFFFFFLL | v378;
  }
  v379 = (void **)(v106 + 1616);
  if (*(char *)(v106 + 1639) < 0)
  {
    sub_22E3BB2B4(&v1374, *(void **)(v106 + 1616), *(_QWORD *)(v106 + 1624));
    v380 = *(char *)(v106 + 1639);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v380 < 0)
      operator delete(*v379);
  }
  else
  {
    v1374 = *(_OWORD *)v379;
    v1375 = *(_QWORD *)(v106 + 1632);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  *v379 = 0;
  *(_QWORD *)(v106 + 1624) = 0;
  *(_DWORD *)(v106 + 1632) = __src[0];
  *(_DWORD *)(v106 + 1635) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v106 + 1639) = 0;
  if (SHIBYTE(v1375) < 0)
    operator delete((void *)v1374);
  sub_22E6EC3DC((uint64_t)__src, 2977, v18);
  if (LOBYTE(__src[3]))
  {
    if (*(char *)(v106 + 1639) < 0)
    {
      sub_22E3BB2B4(&v1372, *(void **)(v106 + 1616), *(_QWORD *)(v106 + 1624));
    }
    else
    {
      v1372 = *(_OWORD *)v379;
      v1373 = *(_QWORD *)(v106 + 1632);
    }
    v381 = SHIBYTE(__src[2]);
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_22E3BB2B4(&v1370, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v1370 = *(_OWORD *)__src;
      v1371 = __src[2];
    }
    if (SHIBYTE(v1371) < 0)
    {
      sub_22E3BB2B4(&v1472, (void *)v1370, *((unint64_t *)&v1370 + 1));
    }
    else
    {
      v1472 = v1370;
      v1473 = (int64_t)v1371;
    }
    if (*(char *)(v106 + 1639) < 0)
      operator delete(*v379);
    *(_OWORD *)v379 = v1472;
    *(_QWORD *)(v106 + 1632) = v1473;
    HIBYTE(v1473) = 0;
    LOBYTE(v1472) = 0;
    if (SHIBYTE(v1371) < 0)
      operator delete((void *)v1370);
    if (SHIBYTE(v1373) < 0)
    {
      operator delete((void *)v1372);
      if ((v381 & 0x80000000) == 0)
        goto LABEL_714;
    }
    else if ((v381 & 0x80000000) == 0)
    {
      goto LABEL_714;
    }
    operator delete(__src[0]);
  }
LABEL_714:
  *(_QWORD *)v106 &= ~0x400000uLL;
  if (sub_22E721888(v18, 0x6FFu, 0x54Fu))
  {
    v382 = llvm::opt::Option::matches();
    v383 = 0x400000;
    if (!v382)
      v383 = 0;
    *(_QWORD *)v106 = *(_QWORD *)v106 & 0xFFFFFFFFFFBFFFFFLL | v383;
  }
  v384 = v1210;
  v1210[2] &= ~0x8000000000000000;
  v385 = (uint64_t *)v1208;
  if (sub_22E721888(v18, 0x700u, 0x550u))
  {
    v386 = llvm::opt::Option::matches();
    v387 = 0x8000000000000000;
    if (!v386)
      v387 = 0;
    v384[2] = v387 & 0x8000000000000000 | v384[2] & 0x7FFFFFFFFFFFFFFFLL;
  }
  *(_QWORD *)v106 |= 0x200000uLL;
  if (sub_22E721888(v18, 0x551u, 0x701u))
  {
    v388 = llvm::opt::Option::matches();
    v389 = 0x200000;
    if (v388)
      v389 = 0;
    *(_QWORD *)v106 = *(_QWORD *)v106 & 0xFFFFFFFFFFDFFFFFLL | v389;
  }
  v390 = v1210;
  v1210[3] &= ~1uLL;
  if (sub_22E721888(v18, 0x6ADu, 0x521u))
    v390[3] = v390[3] & 0xFFFFFFFFFFFFFFFELL | (llvm::opt::Option::matches() != 0);
  *((_DWORD *)v385 + 2) |= 4u;
  if (sub_22E721888(v18, 0x52Fu, 0x6BEu))
  {
    if (llvm::opt::Option::matches())
      v391 = 0;
    else
      v391 = 4;
    *((_DWORD *)v385 + 2) = v385[1] & 0xFFFFFFFB | v391;
  }
  *(_WORD *)(v106 + 104) = *(_WORD *)(v106 + 104) & 0x7FF | 0x800;
  v392 = sub_22E6EC1FC(1862, 0x16u, v18, v1212);
  if (HIDWORD(v392))
    *(_WORD *)(v106 + 104) = *(_WORD *)(v106 + 104) & 0x7FF | ((_WORD)v392 << 11);
  *((_DWORD *)v385 + 2) &= ~0x100u;
  if (sub_22E721888(v18, 0x22Au, 0x3EBu))
  {
    if (llvm::opt::Option::matches())
      v393 = 256;
    else
      v393 = 0;
    *((_DWORD *)v385 + 2) = v385[1] & 0xFFFFFEFF | v393;
  }
  *(_WORD *)(v106 + 64) &= ~0x20u;
  if (sub_22E721888(v18, 0x6ABu, 0x51Fu))
  {
    if (llvm::opt::Option::matches())
      v394 = 32;
    else
      v394 = 0;
    *(_WORD *)(v106 + 64) = *(_WORD *)(v106 + 64) & 0xFFDF | v394;
  }
  *(_QWORD *)v106 &= ~0x400000000000000uLL;
  if (sub_22E721888(v18, 0x2DEu, 0x421u))
  {
    v395 = llvm::opt::Option::matches();
    v396 = 0x400000000000000;
    if (!v395)
      v396 = 0;
    *(_QWORD *)v106 = *(_QWORD *)v106 & 0xFBFFFFFFFFFFFFFFLL | v396;
  }
  *(_QWORD *)(v106 + 96) = *(_QWORD *)(v106 + 96) & 0xFFFFFE7FFFFFFFFFLL | 0x10000000000;
  v397 = sub_22E6EC1FC(639, 0x17u, v18, v1212);
  if (HIDWORD(v397))
    *(_QWORD *)(v106 + 96) = *(_QWORD *)(v106 + 96) & 0xFFFFFE7FFFFFFFFFLL | ((v397 & 3) << 39);
  *(_QWORD *)v106 &= ~0x10uLL;
  if (sub_22E721714(v18, 1887))
    *(_QWORD *)v106 |= 0x10uLL;
  *(_QWORD *)(v106 + 76) &= ~0x2000000000uLL;
  v398 = sub_22E721714(v18, 1877);
  v399 = *(_QWORD *)(v106 + 76);
  if (v398)
    v399 |= 0x2000000000uLL;
  *(_QWORD *)(v106 + 76) = v399 & 0xFFFFFFBFFFFFFFFFLL;
  if (sub_22E721888(v18, 0x754u, 0x77Bu))
  {
    v400 = llvm::opt::Option::matches();
    v401 = 0x4000000000;
    if (!v400)
      v401 = 0;
    *(_QWORD *)(v106 + 76) = *(_QWORD *)(v106 + 76) & 0xFFFFFFBFFFFFFFFFLL | v401;
  }
  v402 = v1210;
  v1210[2] &= ~0x100000000000000uLL;
  if (sub_22E721888(v18, 0x77Fu, 0x771u))
  {
    v403 = llvm::opt::Option::matches();
    v404 = 0x100000000000000;
    if (!v403)
      v404 = 0;
    v402[2] = v402[2] & 0xFEFFFFFFFFFFFFFFLL | v404;
  }
  *(_QWORD *)(v106 + 76) &= ~0x100000000uLL;
  if (sub_22E721888(v18, 0x791u, 0x783u))
  {
    v405 = llvm::opt::Option::matches();
    v406 = 0x100000000;
    if (!v405)
      v406 = 0;
    *(_QWORD *)(v106 + 76) = *(_QWORD *)(v106 + 76) & 0xFFFFFFFEFFFFFFFFLL | v406;
  }
  *(_WORD *)(v106 + 64) &= ~2u;
  if (sub_22E721888(v18, 0x79Bu, 0x786u))
  {
    v407 = llvm::opt::Option::matches();
    v409 = *(_QWORD *)(v106 + 48);
    v408 = *(_QWORD *)(v106 + 56);
    v410 = 2;
    if (!v407)
      v410 = 0;
    v411 = *(_WORD *)(v106 + 64) & 0xFFFD | v410;
  }
  else
  {
    v409 = *(_QWORD *)(v106 + 48);
    v408 = *(_QWORD *)(v106 + 56);
    v411 = *(_WORD *)(v106 + 64);
  }
  *(_QWORD *)(v106 + 48) = v409;
  *(_QWORD *)(v106 + 56) = v408;
  *(_WORD *)(v106 + 64) = v411 | 4;
  if (sub_22E721888(v18, 0x77Cu, 0x757u))
  {
    if (llvm::opt::Option::matches())
      v412 = 0;
    else
      v412 = 4;
    *(_WORD *)(v106 + 64) = *(_WORD *)(v106 + 64) & 0xFFFB | v412;
  }
  *((_DWORD *)v385 + 2) &= ~0x400u;
  if (sub_22E721714(v18, 1890))
    *((_DWORD *)v385 + 2) |= 0x400u;
  *(_QWORD *)(v106 + 96) &= ~0x4000000000uLL;
  v413 = sub_22E6EC1FC(2030, 0x18u, v18, v1212);
  if (HIDWORD(v413))
    *(_QWORD *)(v106 + 96) = *(_QWORD *)(v106 + 96) & 0xFFFFFFBFFFFFFFFFLL | ((v413 & 1) << 38);
  *(_QWORD *)(v106 + 76) &= 0xFFFF807FFFFFFFFFLL;
  v414 = sub_22E6EC038(2644, v18, v1212);
  if (HIDWORD(v414))
    *(_QWORD *)(v106 + 76) = *(_QWORD *)(v106 + 76) & 0xFFFF807FFFFFFFFFLL | ((unint64_t)v414 << 39);
  *((_DWORD *)v385 + 2) &= ~0x80000u;
  if (sub_22E721714(v18, 2609))
    *((_DWORD *)v385 + 2) |= 0x80000u;
  *(_QWORD *)(v106 + 40) &= ~0x80000000000uLL;
  if (sub_22E721714(v18, 2630))
    *(_QWORD *)(v106 + 40) |= 0x80000000000uLL;
  *(_QWORD *)(v106 + 48) = *(unsigned int *)(v106 + 48);
  v415 = v1212;
  v416 = sub_22E6EC038(2624, v18, v1212);
  if (HIDWORD(v416))
    v417 = *(_QWORD *)(v106 + 48) | ((unint64_t)v416 << 32);
  else
    v417 = *(_QWORD *)(v106 + 48);
  *(_DWORD *)(v106 + 56) = 4096;
  *(_QWORD *)(v106 + 48) = v417;
  v418 = sub_22E6EC038(2626, v18, v415);
  v419 = *(_WORD *)(v106 + 64);
  if (HIDWORD(v418))
    v420 = *(_QWORD *)(v106 + 56) & 0xFFFFFFFF00000000 | v418;
  else
    v420 = *(_QWORD *)(v106 + 56);
  *(_QWORD *)(v106 + 56) = v420;
  *(_WORD *)(v106 + 64) = v419 & 0xFFFE;
  if (sub_22E721714(v18, 2498))
    *(_WORD *)(v106 + 64) |= 1u;
  *(_QWORD *)v106 &= ~0x1000000000uLL;
  if (sub_22E721714(v18, 2504))
    *(_QWORD *)v106 |= 0x1000000000uLL;
  v421 = v1210;
  v1210[3] &= ~0x80000000000000uLL;
  if (sub_22E721888(v18, 0xA36u, 0x9B8u))
  {
    v422 = llvm::opt::Option::matches();
    v423 = 0x80000000000000;
    if (!v422)
      v423 = 0;
    v421[3] = v421[3] & 0xFF7FFFFFFFFFFFFFLL | v423;
  }
  *((_DWORD *)v385 + 2) &= ~0x4000u;
  v424 = sub_22E721714(v18, 374);
  v425 = *((_DWORD *)v385 + 2);
  if (v424)
    v425 |= 0x4000u;
  *((_DWORD *)v385 + 2) = v425 | 0x20000;
  if (sub_22E721888(v18, 0x3A1u, 0x177u))
  {
    v426 = llvm::opt::Option::matches();
    v427 = *v385;
    v428 = 0x20000;
    if (v426)
      v428 = 0;
    v429 = v385[1] & 0xFFFDFFFF | v428;
  }
  else
  {
    v427 = *v385;
    v429 = *((_DWORD *)v385 + 2);
  }
  *v385 = v427;
  *((_DWORD *)v385 + 2) = v429 | 0x20000;
  if (sub_22E721888(v18, 0x177u, 0x3A1u))
  {
    v430 = llvm::opt::Option::matches();
    v431 = *v385;
    v432 = 0x20000;
    if (!v430)
      v432 = 0;
    v433 = v385[1] & 0xFFFDFFFF | v432;
  }
  else
  {
    v431 = *v385;
    v433 = *((_DWORD *)v385 + 2);
  }
  *v385 = v431;
  *((_DWORD *)v385 + 2) = v433 | 0x40000;
  if (sub_22E721888(v18, 0x917u, 0x838u))
  {
    if (llvm::opt::Option::matches())
      v434 = 0;
    else
      v434 = 0x40000;
    *((_DWORD *)v385 + 2) = v385[1] & 0xFFFBFFFF | v434;
  }
  *(_QWORD *)v106 &= ~0x2000uLL;
  if (sub_22E721888(v18, 0x857u, 0x92Fu))
  {
    v435 = llvm::opt::Option::matches();
    v436 = 0x2000;
    if (!v435)
      v436 = 0;
    v437 = *(_QWORD *)v106 & 0xFFFFFFFFFFFFDFFFLL | v436;
  }
  else
  {
    v437 = *(_QWORD *)v106;
  }
  *(_QWORD *)v106 = v437 & 0xFFFFFFFFFFFFDFFFLL;
  if (sub_22E721888(v18, 0x92Fu, 0x857u))
  {
    v438 = llvm::opt::Option::matches();
    v439 = 0x2000;
    if (v438)
      v439 = 0;
    *(_QWORD *)v106 = *(_QWORD *)v106 & 0xFFFFFFFFFFFFDFFFLL | v439;
  }
  v440 = v1210;
  v1210[3] &= ~0x40000uLL;
  v441 = sub_22E721714(v18, 2582);
  v442 = v440[3];
  if (v441)
    v442 |= 0x40000uLL;
  v440[2] &= ~0x100000000000uLL;
  v440[3] = v442;
  v443 = sub_22E721714(v18, 2248);
  v444 = v440[2];
  if (v443)
    v444 |= 0x100000000000uLL;
  v445 = v440[3] & 0xFFBFFFFFFFFFFFFFLL;
  v440[2] = v444;
  v440[3] = v445;
  if (sub_22E721714(v18, 2613))
    v440[3] |= 0x40000000000000uLL;
  memset(v1369, 0, sizeof(v1369));
  sub_22E618148(v1369, *(_QWORD *)(v106 + 1320), *(_QWORD *)(v106 + 1328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v106 + 1328) - *(_QWORD *)(v106 + 1320)) >> 3));
  memset(v1368, 0, sizeof(v1368));
  memset(__src, 0, 24);
  sub_22E63B344(v312);
  *(_OWORD *)v312 = *(_OWORD *)__src;
  *(void **)(v106 + 1336) = __src[2];
  memset(__src, 0, 24);
  *(_QWORD *)&v1472 = __src;
  sub_22E3B3CC8((void ***)&v1472);
  *(_QWORD *)&v1472 = v1368;
  sub_22E3B3CC8((void ***)&v1472);
  *(_QWORD *)&v1472 = v1369;
  sub_22E3B3CC8((void ***)&v1472);
  llvm::opt::ArgList::getAllArgValues();
  *(_OWORD *)__src = v1472;
  __src[2] = (void *)v1473;
  v1473 = 0;
  v1472 = 0uLL;
  LOBYTE(__src[3]) = 1;
  *(_QWORD *)&v1466 = &v1472;
  sub_22E3B3CC8((void ***)&v1466);
  if (LOBYTE(__src[3]))
  {
    memset(v1367, 0, sizeof(v1367));
    sub_22E618148(v1367, *(_QWORD *)(v106 + 1320), *(_QWORD *)(v106 + 1328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v106 + 1328) - *(_QWORD *)(v106 + 1320)) >> 3));
    v1365 = 0;
    v1364 = 0;
    v1366 = 0;
    sub_22E618148(&v1364, (uint64_t)__src[0], (uint64_t)__src[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__src[1] - (char *)__src[0]) >> 3));
    v1472 = 0uLL;
    v1473 = 0;
    sub_22E618148(&v1472, v1364, v1365, 0xAAAAAAAAAAAAAAABLL * ((v1365 - v1364) >> 3));
    sub_22E63B344(v312);
    *(_OWORD *)v312 = v1472;
    *(_QWORD *)(v1211 + 1336) = v1473;
    v1473 = 0;
    v1472 = 0uLL;
    *(_QWORD *)&v1466 = &v1472;
    sub_22E3B3CC8((void ***)&v1466);
    *(_QWORD *)&v1466 = &v1364;
    v18 = v1209;
    sub_22E3B3CC8((void ***)&v1466);
    *(_QWORD *)&v1466 = v1367;
    v106 = v1211;
    sub_22E3B3CC8((void ***)&v1466);
    if (LOBYTE(__src[3]))
    {
      *(_QWORD *)&v1472 = __src;
      sub_22E3B3CC8((void ***)&v1472);
    }
  }
  v446 = (void **)(v106 + 1416);
  if (*(char *)(v106 + 1439) < 0)
  {
    sub_22E3BB2B4(&v1362, *(void **)(v106 + 1416), *(_QWORD *)(v106 + 1424));
    v450 = *(char *)(v106 + 1439);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    v448 = v1204;
    v447 = v1205;
    v449 = v1210;
    if (v450 < 0)
      operator delete(*v446);
  }
  else
  {
    v1362 = *(_OWORD *)v446;
    v1363 = *(_QWORD *)(v106 + 1432);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    v448 = v1204;
    v447 = v1205;
    v449 = v1210;
  }
  *v446 = 0;
  *(_QWORD *)(v106 + 1424) = 0;
  *(_DWORD *)(v106 + 1432) = __src[0];
  *(_DWORD *)(v106 + 1435) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v106 + 1439) = 0;
  if (SHIBYTE(v1363) < 0)
    operator delete((void *)v1362);
  sub_22E6EC3DC((uint64_t)__src, 2560, v18);
  if (LOBYTE(__src[3]))
  {
    if (*(char *)(v106 + 1439) < 0)
    {
      sub_22E3BB2B4(&v1360, *(void **)(v106 + 1416), *(_QWORD *)(v106 + 1424));
    }
    else
    {
      v1360 = *(_OWORD *)v446;
      v1361 = *(_QWORD *)(v106 + 1432);
    }
    v451 = SHIBYTE(__src[2]);
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_22E3BB2B4(&v1358, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v1358 = *(_OWORD *)__src;
      v1359 = __src[2];
    }
    if (SHIBYTE(v1359) < 0)
    {
      sub_22E3BB2B4(&v1472, (void *)v1358, *((unint64_t *)&v1358 + 1));
    }
    else
    {
      v1472 = v1358;
      v1473 = (int64_t)v1359;
    }
    if (*(char *)(v106 + 1439) < 0)
      operator delete(*v446);
    *(_OWORD *)v446 = v1472;
    *(_QWORD *)(v106 + 1432) = v1473;
    HIBYTE(v1473) = 0;
    LOBYTE(v1472) = 0;
    if (SHIBYTE(v1359) < 0)
      operator delete((void *)v1358);
    if (SHIBYTE(v1361) < 0)
    {
      operator delete((void *)v1360);
      if ((v451 & 0x80000000) == 0)
        goto LABEL_860;
    }
    else if ((v451 & 0x80000000) == 0)
    {
      goto LABEL_860;
    }
    operator delete(__src[0]);
  }
LABEL_860:
  v452 = (void **)(v106 + 1544);
  if (*(char *)(v106 + 1567) < 0)
  {
    sub_22E3BB2B4(&v1356, *(void **)(v106 + 1544), *(_QWORD *)(v106 + 1552));
    v453 = *(char *)(v106 + 1567);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v453 < 0)
      operator delete(*v452);
  }
  else
  {
    v1356 = *(_OWORD *)v452;
    v1357 = *(_QWORD *)(v106 + 1560);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  *v452 = 0;
  *(_QWORD *)(v106 + 1552) = 0;
  *(_DWORD *)(v106 + 1560) = __src[0];
  *(_DWORD *)(v106 + 1563) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v106 + 1567) = 0;
  if (SHIBYTE(v1357) < 0)
    operator delete((void *)v1356);
  sub_22E6EC3DC((uint64_t)__src, 2629, v18);
  if (LOBYTE(__src[3]))
  {
    if (*(char *)(v106 + 1567) < 0)
    {
      sub_22E3BB2B4(&v1354, *(void **)(v106 + 1544), *(_QWORD *)(v106 + 1552));
    }
    else
    {
      v1354 = *(_OWORD *)v452;
      v1355 = *(_QWORD *)(v106 + 1560);
    }
    v454 = SHIBYTE(__src[2]);
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_22E3BB2B4(&v1352, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v1352 = *(_OWORD *)__src;
      v1353 = __src[2];
    }
    if (SHIBYTE(v1353) < 0)
    {
      sub_22E3BB2B4(&v1472, (void *)v1352, *((unint64_t *)&v1352 + 1));
    }
    else
    {
      v1472 = v1352;
      v1473 = (int64_t)v1353;
    }
    if (*(char *)(v106 + 1567) < 0)
      operator delete(*v452);
    *(_OWORD *)v452 = v1472;
    *(_QWORD *)(v106 + 1560) = v1473;
    HIBYTE(v1473) = 0;
    LOBYTE(v1472) = 0;
    if (SHIBYTE(v1353) < 0)
      operator delete((void *)v1352);
    if (SHIBYTE(v1355) < 0)
    {
      operator delete((void *)v1354);
      if ((v454 & 0x80000000) == 0)
        goto LABEL_884;
    }
    else if ((v454 & 0x80000000) == 0)
    {
      goto LABEL_884;
    }
    operator delete(__src[0]);
  }
LABEL_884:
  v455 = v1208;
  v456 = *(_QWORD *)(v1208 + 1);
  *(_QWORD *)v1208 = (v456 << 32) | 0x7FFFFFFF;
  v1208[2] = HIDWORD(v456);
  v457 = sub_22E6EC4C4(2627, v18, v1212);
  if (HIDWORD(v457))
  {
    v458 = *(_QWORD *)(v455 + 1);
    *(_QWORD *)v455 = v457 | ((unint64_t)v458 << 32);
    v455[2] = HIDWORD(v458);
  }
  v459 = (void **)(v106 + 1568);
  if (*(char *)(v106 + 1591) < 0)
  {
    sub_22E3BB2B4(&v1350, *(void **)(v106 + 1568), *(_QWORD *)(v106 + 1576));
    v460 = *(char *)(v106 + 1591);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v460 < 0)
      operator delete(*v459);
  }
  else
  {
    v1350 = *(_OWORD *)v459;
    v1351 = *(_QWORD *)(v106 + 1584);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  *v459 = 0;
  *(_QWORD *)(v106 + 1576) = 0;
  *(_DWORD *)(v106 + 1584) = __src[0];
  *(_DWORD *)(v106 + 1587) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v106 + 1591) = 0;
  if (SHIBYTE(v1351) < 0)
    operator delete((void *)v1350);
  sub_22E6EC3DC((uint64_t)__src, 2628, v18);
  if (LOBYTE(__src[3]))
  {
    if (*(char *)(v106 + 1591) < 0)
    {
      sub_22E3BB2B4(&v1348, *(void **)(v106 + 1568), *(_QWORD *)(v106 + 1576));
    }
    else
    {
      v1348 = *(_OWORD *)v459;
      v1349 = *(_QWORD *)(v106 + 1584);
    }
    v461 = SHIBYTE(__src[2]);
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_22E3BB2B4(&v1346, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v1346 = *(_OWORD *)__src;
      v1347 = __src[2];
    }
    if (SHIBYTE(v1347) < 0)
    {
      sub_22E3BB2B4(&v1472, (void *)v1346, *((unint64_t *)&v1346 + 1));
    }
    else
    {
      v1472 = v1346;
      v1473 = (int64_t)v1347;
    }
    if (*(char *)(v106 + 1591) < 0)
      operator delete(*v459);
    *(_OWORD *)v459 = v1472;
    *(_QWORD *)(v106 + 1584) = v1473;
    HIBYTE(v1473) = 0;
    LOBYTE(v1472) = 0;
    if (SHIBYTE(v1347) < 0)
      operator delete((void *)v1346);
    if (SHIBYTE(v1349) < 0)
    {
      operator delete((void *)v1348);
      if ((v461 & 0x80000000) == 0)
        goto LABEL_910;
    }
    else if ((v461 & 0x80000000) == 0)
    {
      goto LABEL_910;
    }
    operator delete(__src[0]);
  }
LABEL_910:
  v449[2] &= ~0x800000000uLL;
  v462 = sub_22E721714(v18, 2197);
  v463 = v449[2];
  if (v462)
    v463 |= 0x800000000uLL;
  v449[2] = v463 & 0xFFFFFFEFFFFFFFFFLL;
  v464 = sub_22E721714(v18, 2531);
  v465 = v449[2];
  if (v464)
    v465 |= 0x1000000000uLL;
  v449[2] = v465 & 0xFFFFFFDFFFFFFFFFLL;
  v466 = sub_22E721714(v18, 2577);
  v467 = v449[2];
  if (v466)
    v467 |= 0x2000000000uLL;
  v449[2] = v467 & 0xFFFFFFBFFFFFFFFFLL;
  if (sub_22E721714(v18, 2546))
    v449[2] |= 0x4000000000uLL;
  v468 = (void **)(v106 + 632);
  if (*(char *)(v106 + 655) < 0)
  {
    sub_22E3BB2B4(&v1344, *(void **)(v106 + 632), *(_QWORD *)(v106 + 640));
    v469 = *(char *)(v106 + 655);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v469 < 0)
      operator delete(*v468);
  }
  else
  {
    v1344 = *(_OWORD *)v468;
    v1345 = *(_QWORD *)(v106 + 648);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  *v468 = 0;
  *(_QWORD *)(v106 + 640) = 0;
  *(_DWORD *)(v106 + 648) = __src[0];
  *(_DWORD *)(v106 + 651) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v106 + 655) = 0;
  if (SHIBYTE(v1345) < 0)
    operator delete((void *)v1344);
  sub_22E6EC3DC((uint64_t)__src, 2791, v18);
  if (LOBYTE(__src[3]))
  {
    if (*(char *)(v106 + 655) < 0)
    {
      sub_22E3BB2B4(&v1342, *(void **)(v106 + 632), *(_QWORD *)(v106 + 640));
    }
    else
    {
      v1342 = *(_OWORD *)v468;
      v1343 = *(_QWORD *)(v106 + 648);
    }
    v470 = SHIBYTE(__src[2]);
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_22E3BB2B4(&v1340, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v1340 = *(_OWORD *)__src;
      v1341 = __src[2];
    }
    if (SHIBYTE(v1341) < 0)
    {
      sub_22E3BB2B4(&v1472, (void *)v1340, *((unint64_t *)&v1340 + 1));
    }
    else
    {
      v1472 = v1340;
      v1473 = (int64_t)v1341;
    }
    if (*(char *)(v106 + 655) < 0)
      operator delete(*v468);
    *(_OWORD *)v468 = v1472;
    *(_QWORD *)(v106 + 648) = v1473;
    HIBYTE(v1473) = 0;
    LOBYTE(v1472) = 0;
    if (SHIBYTE(v1341) < 0)
      operator delete((void *)v1340);
    if (SHIBYTE(v1343) < 0)
    {
      operator delete((void *)v1342);
      if ((v470 & 0x80000000) == 0)
        goto LABEL_942;
    }
    else if ((v470 & 0x80000000) == 0)
    {
      goto LABEL_942;
    }
    operator delete(__src[0]);
  }
LABEL_942:
  v449[2] &= ~0x400000000uLL;
  if (sub_22E721714(v18, 2836))
    v449[2] |= 0x400000000uLL;
  *(_QWORD *)v106 &= ~1uLL;
  v471 = (uint64_t *)v1208;
  if (sub_22E721888(v18, 0x44Eu, 0x330u))
    *(_QWORD *)v106 = *(_QWORD *)v106 & 0xFFFFFFFFFFFFFFFELL | llvm::opt::Option::matches();
  v449[3] &= ~4uLL;
  if ((*(_BYTE *)(v447 + 104) & 0x20) != 0 && sub_22E721714(v18, 790))
    v449[3] |= 4uLL;
  *((_DWORD *)v471 + 2) &= ~0x200000u;
  v472 = sub_22E721714(v18, 1762);
  v473 = *v471;
  v474 = *((_DWORD *)v471 + 2);
  if (v472)
    v474 |= 0x200000u;
  v475 = v474 | 0x400000;
  *((_DWORD *)v471 + 2) = v474 | 0x400000;
  if ((v474 & 0x200000) != 0)
  {
    v476 = sub_22E721714(v18, 1336);
    v473 = *v471;
    v475 = v471[1] & 0xFFBFFFFF;
    if (!v476)
      v475 = *((_DWORD *)v471 + 2);
  }
  v477 = v475 | 0x800000;
  *v471 = v473;
  *((_DWORD *)v471 + 2) = v475 | 0x800000;
  if ((v475 & 0x200000) != 0)
  {
    v478 = sub_22E721714(v18, 1342);
    v473 = *v471;
    v477 = *((_DWORD *)v471 + 2);
    if (v478)
      v477 &= ~0x800000u;
  }
  v479 = v477 | 0x2000000;
  *v471 = v473;
  *((_DWORD *)v471 + 2) = v477 | 0x2000000;
  if ((v477 & 0x200000) != 0)
  {
    v480 = sub_22E721714(v18, 1341);
    v473 = *v471;
    v479 = v471[1] & 0xFDFFFFFF;
    if (!v480)
      v479 = *((_DWORD *)v471 + 2);
  }
  v481 = v479 | 0x1000000;
  *v471 = v473;
  *((_DWORD *)v471 + 2) = v479 | 0x1000000;
  if ((v479 & 0x200000) != 0)
  {
    v482 = sub_22E721714(v18, 1339);
    v473 = *v471;
    v481 = *((_DWORD *)v471 + 2);
    if (v482)
      v481 &= ~0x1000000u;
  }
  v483 = v481 | 0x4000000;
  *v471 = v473;
  *((_DWORD *)v471 + 2) = v481 | 0x4000000;
  if ((v481 & 0x200000) != 0)
  {
    v484 = sub_22E721714(v18, 1343);
    v473 = *v471;
    v483 = v471[1] & 0xFBFFFFFF;
    if (!v484)
      v483 = *((_DWORD *)v471 + 2);
  }
  v485 = v483 | 0x8000000;
  *v471 = v473;
  *((_DWORD *)v471 + 2) = v483 | 0x8000000;
  if ((v483 & 0x200000) != 0)
  {
    v486 = sub_22E721714(v18, 1337);
    v473 = *v471;
    v485 = *((_DWORD *)v471 + 2);
    if (v486)
      v485 &= ~0x8000000u;
  }
  *v471 = v473;
  *((_DWORD *)v471 + 2) = v485 & 0xEFFFFFFF;
  if ((v485 & 0x200000) != 0 && sub_22E721714(v18, 1761))
    *((_DWORD *)v471 + 2) |= 0x10000000u;
  v449[3] &= ~2uLL;
  if (sub_22E721714(v18, 1519))
    v449[3] |= 2uLL;
  *(_QWORD *)(v106 + 96) = (unint64_t)*(unsigned int *)(v106 + 100) << 32;
  v487 = sub_22E6EC038(858, v18, v1212);
  if (HIDWORD(v487))
    *(_DWORD *)(v106 + 96) = v487;
  *(_QWORD *)(v106 + 76) &= ~0x200000000uLL;
  if (sub_22E721714(v18, 264))
    *(_QWORD *)(v106 + 76) |= 0x200000000uLL;
  memset(v1339, 0, sizeof(v1339));
  sub_22E618148(v1339, *(_QWORD *)(v106 + 1472), *(_QWORD *)(v106 + 1480), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v106 + 1480) - *(_QWORD *)(v106 + 1472)) >> 3));
  memset(v1338, 0, sizeof(v1338));
  memset(__src, 0, 24);
  sub_22E63B344((void **)(v106 + 1472));
  *(_OWORD *)(v106 + 1472) = *(_OWORD *)__src;
  *(void **)(v106 + 1488) = __src[2];
  memset(__src, 0, 24);
  *(_QWORD *)&v1472 = __src;
  sub_22E3B3CC8((void ***)&v1472);
  *(_QWORD *)&v1472 = v1338;
  sub_22E3B3CC8((void ***)&v1472);
  *(_QWORD *)&v1472 = v1339;
  sub_22E3B3CC8((void ***)&v1472);
  llvm::opt::ArgList::getAllArgValues();
  *(_OWORD *)__src = v1472;
  __src[2] = (void *)v1473;
  v1473 = 0;
  v1472 = 0uLL;
  LOBYTE(__src[3]) = 1;
  *(_QWORD *)&v1466 = &v1472;
  sub_22E3B3CC8((void ***)&v1466);
  if (LOBYTE(__src[3]))
  {
    memset(v1337, 0, sizeof(v1337));
    sub_22E618148(v1337, *(_QWORD *)(v106 + 1472), *(_QWORD *)(v106 + 1480), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v106 + 1480) - *(_QWORD *)(v106 + 1472)) >> 3));
    v1335 = 0;
    v1334 = 0;
    v1336 = 0;
    sub_22E618148(&v1334, (uint64_t)__src[0], (uint64_t)__src[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__src[1] - (char *)__src[0]) >> 3));
    v1472 = 0uLL;
    v1473 = 0;
    sub_22E618148(&v1472, v1334, v1335, 0xAAAAAAAAAAAAAAABLL * ((v1335 - v1334) >> 3));
    sub_22E63B344((void **)(v106 + 1472));
    *(_OWORD *)(v1211 + 1472) = v1472;
    *(_QWORD *)(v1211 + 1488) = v1473;
    v1473 = 0;
    v1472 = 0uLL;
    *(_QWORD *)&v1466 = &v1472;
    sub_22E3B3CC8((void ***)&v1466);
    *(_QWORD *)&v1466 = &v1334;
    v18 = v1209;
    sub_22E3B3CC8((void ***)&v1466);
    *(_QWORD *)&v1466 = v1337;
    v106 = v1211;
    sub_22E3B3CC8((void ***)&v1466);
    if (LOBYTE(__src[3]))
    {
      *(_QWORD *)&v1472 = __src;
      sub_22E3B3CC8((void ***)&v1472);
    }
  }
  *(_QWORD *)(v106 + 76) &= 0xFFFFFFE3FFFFFFFFLL;
  v488 = sub_22E6EC038(309, v18, v1212);
  if (HIDWORD(v488))
    *(_QWORD *)(v106 + 76) = *(_QWORD *)(v106 + 76) & 0xFFFFFFE3FFFFFFFFLL | ((v488 & 7) << 34);
  *(_QWORD *)(v106 + 96) &= 0x1FFFFFFFFFFFFFFFuLL;
  v489 = sub_22E6EC1FC(266, 0x1Eu, v18, v1212);
  if (HIDWORD(v489))
    *(_QWORD *)(v106 + 96) = *(_QWORD *)(v106 + 96) & 0x1FFFFFFFFFFFFFFFLL | ((unint64_t)v489 << 61);
  v490 = (void **)(v106 + 360);
  if (*(char *)(v106 + 383) < 0)
  {
    sub_22E3BB2B4(&v1332, *(void **)(v106 + 360), *(_QWORD *)(v106 + 368));
    v491 = *(char *)(v106 + 383);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v491 < 0)
      operator delete(*v490);
  }
  else
  {
    v1332 = *(_OWORD *)v490;
    v1333 = *(_QWORD *)(v106 + 376);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  *v490 = 0;
  *(_QWORD *)(v106 + 368) = 0;
  *(_DWORD *)(v106 + 376) = __src[0];
  *(_DWORD *)(v106 + 379) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v106 + 383) = 0;
  if (SHIBYTE(v1333) < 0)
    operator delete((void *)v1332);
  sub_22E6EC3DC((uint64_t)__src, 305, v18);
  if (LOBYTE(__src[3]))
  {
    if (*(char *)(v106 + 383) < 0)
    {
      sub_22E3BB2B4(&v1330, *(void **)(v106 + 360), *(_QWORD *)(v106 + 368));
    }
    else
    {
      v1330 = *(_OWORD *)v490;
      v1331 = *(_QWORD *)(v106 + 376);
    }
    v492 = SHIBYTE(__src[2]);
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_22E3BB2B4(&v1328, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v1328 = *(_OWORD *)__src;
      v1329 = __src[2];
    }
    if (SHIBYTE(v1329) < 0)
    {
      sub_22E3BB2B4(&v1472, (void *)v1328, *((unint64_t *)&v1328 + 1));
    }
    else
    {
      v1472 = v1328;
      v1473 = (int64_t)v1329;
    }
    if (*(char *)(v106 + 383) < 0)
      operator delete(*v490);
    *(_OWORD *)v490 = v1472;
    *(_QWORD *)(v106 + 376) = v1473;
    HIBYTE(v1473) = 0;
    LOBYTE(v1472) = 0;
    if (SHIBYTE(v1329) < 0)
      operator delete((void *)v1328);
    if (SHIBYTE(v1331) < 0)
    {
      operator delete((void *)v1330);
      if ((v492 & 0x80000000) == 0)
        goto LABEL_1009;
    }
    else if ((v492 & 0x80000000) == 0)
    {
      goto LABEL_1009;
    }
    operator delete(__src[0]);
  }
LABEL_1009:
  *(_WORD *)(v106 + 104) &= 0xFE7Fu;
  v493 = sub_22E6EC1FC(364, 0x1Fu, v18, v1212);
  if (HIDWORD(v493))
    *(_WORD *)(v106 + 104) = *(_WORD *)(v106 + 104) & 0xFE7F | ((v493 & 3) << 7);
  v494 = (void **)(v106 + 384);
  if (*(char *)(v106 + 407) < 0)
  {
    sub_22E3BB2B4(&v1326, *(void **)(v106 + 384), *(_QWORD *)(v106 + 392));
    v495 = *(char *)(v106 + 407);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v495 < 0)
      operator delete(*v494);
  }
  else
  {
    v1326 = *(_OWORD *)v494;
    v1327 = *(_QWORD *)(v106 + 400);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  *v494 = 0;
  *(_QWORD *)(v106 + 392) = 0;
  *(_DWORD *)(v106 + 400) = __src[0];
  *(_DWORD *)(v106 + 403) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v106 + 407) = 0;
  if (SHIBYTE(v1327) < 0)
    operator delete((void *)v1326);
  sub_22E6EC3DC((uint64_t)__src, 2903, v18);
  if (LOBYTE(__src[3]))
  {
    if (*(char *)(v106 + 407) < 0)
    {
      sub_22E3BB2B4(&v1324, *(void **)(v106 + 384), *(_QWORD *)(v106 + 392));
    }
    else
    {
      v1324 = *(_OWORD *)v494;
      v1325 = *(_QWORD *)(v106 + 400);
    }
    v496 = SHIBYTE(__src[2]);
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_22E3BB2B4(&v1322, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v1322 = *(_OWORD *)__src;
      v1323 = __src[2];
    }
    if (SHIBYTE(v1323) < 0)
    {
      sub_22E3BB2B4(&v1472, (void *)v1322, *((unint64_t *)&v1322 + 1));
    }
    else
    {
      v1472 = v1322;
      v1473 = (int64_t)v1323;
    }
    if (*(char *)(v106 + 407) < 0)
      operator delete(*v494);
    *(_OWORD *)v494 = v1472;
    *(_QWORD *)(v106 + 400) = v1473;
    HIBYTE(v1473) = 0;
    LOBYTE(v1472) = 0;
    if (SHIBYTE(v1323) < 0)
      operator delete((void *)v1322);
    if (SHIBYTE(v1325) < 0)
    {
      operator delete((void *)v1324);
      if ((v496 & 0x80000000) == 0)
        goto LABEL_1035;
    }
    else if ((v496 & 0x80000000) == 0)
    {
      goto LABEL_1035;
    }
    operator delete(__src[0]);
  }
LABEL_1035:
  *(_QWORD *)(v106 + 96) &= 0xFFFFFFFCFFFFFFFFLL;
  v497 = sub_22E6EC1FC(221, 0x20u, v18, v1212);
  if (HIDWORD(v497))
    *(_QWORD *)(v106 + 96) = *(_QWORD *)(v106 + 96) & 0xFFFFFFFCFFFFFFFFLL | ((v497 & 3) << 32);
  v449[2] &= ~0x8000000000000uLL;
  v498 = sub_22E721714(v18, 2529);
  v499 = v449[2];
  if (v498)
    v499 |= 0x8000000000000uLL;
  v449[2] = v499 & 0xFFDFFFFFFFFFFFFFLL;
  v500 = sub_22E721714(v18, 2114);
  v501 = v449[2];
  if (v500)
    v501 |= 0x20000000000000uLL;
  v449[2] = v501 & 0xFFEFFFFFFFFFFFFFLL;
  if (sub_22E721714(v18, 2113))
    v449[2] |= 0x10000000000000uLL;
  *(_QWORD *)v106 &= ~4uLL;
  if (sub_22E721714(v18, 2584))
    *(_QWORD *)v106 |= 4uLL;
  v449[3] &= ~0x400000uLL;
  if (sub_22E721714(v18, 2596))
    v449[3] |= 0x400000uLL;
  *(_DWORD *)(v106 + 656) = 1;
  v502 = sub_22E6EC1FC(2587, 0x21u, v18, v1212);
  if (HIDWORD(v502))
    *(_DWORD *)(v106 + 656) = v502;
  v503 = (void **)(v106 + 1704);
  if (*(char *)(v106 + 1727) < 0)
  {
    sub_22E3BB2B4(&v1320, *(void **)(v106 + 1704), *(_QWORD *)(v106 + 1712));
    v504 = *(char *)(v106 + 1727);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v504 < 0)
      operator delete(*v503);
  }
  else
  {
    v1320 = *(_OWORD *)v503;
    v1321 = *(_QWORD *)(v106 + 1720);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  *v503 = 0;
  *(_QWORD *)(v106 + 1712) = 0;
  *(_DWORD *)(v106 + 1720) = __src[0];
  *(_DWORD *)(v106 + 1723) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v106 + 1727) = 0;
  if (SHIBYTE(v1321) < 0)
    operator delete((void *)v1320);
  sub_22E6EC3DC((uint64_t)__src, 127, v18);
  if (LOBYTE(__src[3]))
  {
    if (*(char *)(v106 + 1727) < 0)
    {
      sub_22E3BB2B4(&v1318, *(void **)(v106 + 1704), *(_QWORD *)(v106 + 1712));
    }
    else
    {
      v1318 = *(_OWORD *)v503;
      v1319 = *(_QWORD *)(v106 + 1720);
    }
    v505 = SHIBYTE(__src[2]);
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_22E3BB2B4(&v1316, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v1316 = *(_OWORD *)__src;
      v1317 = __src[2];
    }
    if (SHIBYTE(v1317) < 0)
    {
      sub_22E3BB2B4(&v1472, (void *)v1316, *((unint64_t *)&v1316 + 1));
    }
    else
    {
      v1472 = v1316;
      v1473 = (int64_t)v1317;
    }
    if (*(char *)(v106 + 1727) < 0)
      operator delete(*v503);
    *(_OWORD *)v503 = v1472;
    *(_QWORD *)(v106 + 1720) = v1473;
    HIBYTE(v1473) = 0;
    LOBYTE(v1472) = 0;
    if (SHIBYTE(v1317) < 0)
      operator delete((void *)v1316);
    if (SHIBYTE(v1319) < 0)
    {
      operator delete((void *)v1318);
      if ((v505 & 0x80000000) == 0)
        goto LABEL_1073;
    }
    else if ((v505 & 0x80000000) == 0)
    {
      goto LABEL_1073;
    }
    operator delete(__src[0]);
  }
LABEL_1073:
  *(_QWORD *)(v106 + 40) |= 0x40000000000uLL;
  if (sub_22E721714(v18, 286))
    *(_QWORD *)(v106 + 40) &= ~0x40000000000uLL;
  *(_QWORD *)v106 &= ~0x8000000uLL;
  v506 = sub_22E721714(v18, 285);
  v507 = *(_QWORD *)v106;
  if (v506)
    v507 = *(_QWORD *)v106 | 0x8000000;
  *(_QWORD *)v106 = v507 & 0xFFFFFFFFEFFFFFFFLL;
  v508 = sub_22E721714(v18, 283);
  v509 = *(_QWORD *)v106;
  if (v508)
    v509 = *(_QWORD *)v106 | 0x10000000;
  *(_QWORD *)v106 = v509 & 0xFFFFFFFFDFFFFFFFLL;
  v510 = sub_22E721714(v18, 287);
  v511 = *(_QWORD *)v106;
  if (v510)
    v511 = *(_QWORD *)v106 | 0x20000000;
  *(_QWORD *)v106 = v511 & 0xFFFFFFFDFFFFFFFFLL;
  if (sub_22E721714(v18, 290))
    *(_QWORD *)v106 |= 0x200000000uLL;
  *(_WORD *)(v106 + 64) &= ~8u;
  v512 = sub_22E721714(v18, 308);
  v513 = *(_WORD *)(v106 + 64);
  if (v512)
    v513 |= 8u;
  *(_WORD *)(v106 + 64) = v513 & 0xFFEF;
  v514 = sub_22E721714(v18, 307);
  v515 = *(_WORD *)(v106 + 64);
  if (v514)
    v515 |= 0x10u;
  *(_WORD *)(v106 + 64) = v515 & 0xFFBF;
  if (sub_22E721714(v18, 262))
    *(_WORD *)(v106 + 64) |= 0x40u;
  *(_QWORD *)v106 &= ~0x1000000000000uLL;
  if (sub_22E721714(v18, 732))
    *(_QWORD *)v106 |= 0x1000000000000uLL;
  v449[2] &= ~0x400000000000000uLL;
  v516 = sub_22E721714(v18, 2716);
  v517 = v449[2];
  if (v516)
    v517 |= 0x400000000000000uLL;
  v449[2] = v517 & 0xF7FFFFFFFFFFFFFFLL;
  v518 = sub_22E721714(v18, 2717);
  v519 = v449[2];
  if (v518)
    v519 |= 0x800000000000000uLL;
  v449[2] = v519 & 0xFFFFBFFFFFFFFFFFLL;
  if (sub_22E721714(v18, 864))
    v449[2] |= 0x400000000000uLL;
  v520 = (void **)(v106 + 184);
  if (*(char *)(v106 + 207) < 0)
  {
    sub_22E3BB2B4(&v1314, *(void **)(v106 + 184), *(_QWORD *)(v106 + 192));
    v521 = *(char *)(v106 + 207);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v521 < 0)
      operator delete(*v520);
  }
  else
  {
    v1314 = *(_OWORD *)v520;
    v1315 = *(_QWORD *)(v106 + 200);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  *v520 = 0;
  *(_QWORD *)(v106 + 192) = 0;
  *(_DWORD *)(v106 + 200) = __src[0];
  *(_DWORD *)(v106 + 203) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v106 + 207) = 0;
  if (SHIBYTE(v1315) < 0)
    operator delete((void *)v1314);
  if ((*(_BYTE *)(v106 + 5) & 0x18) != 0)
  {
    sub_22E6EC3DC((uint64_t)__src, 229, v18);
    if (LOBYTE(__src[3]))
    {
      if (*(char *)(v106 + 207) < 0)
      {
        sub_22E3BB2B4(&v1312, *(void **)(v106 + 184), *(_QWORD *)(v106 + 192));
      }
      else
      {
        v1312 = *(_OWORD *)v520;
        v1313 = *(_QWORD *)(v106 + 200);
      }
      v522 = SHIBYTE(__src[2]);
      if (SHIBYTE(__src[2]) < 0)
      {
        sub_22E3BB2B4(&v1310, __src[0], (unint64_t)__src[1]);
      }
      else
      {
        v1310 = *(_OWORD *)__src;
        v1311 = __src[2];
      }
      if (SHIBYTE(v1311) < 0)
      {
        sub_22E3BB2B4(&v1472, (void *)v1310, *((unint64_t *)&v1310 + 1));
      }
      else
      {
        v1472 = v1310;
        v1473 = (int64_t)v1311;
      }
      if (*(char *)(v106 + 207) < 0)
        operator delete(*v520);
      *(_OWORD *)v520 = v1472;
      *(_QWORD *)(v106 + 200) = v1473;
      HIBYTE(v1473) = 0;
      LOBYTE(v1472) = 0;
      if (SHIBYTE(v1311) < 0)
        operator delete((void *)v1310);
      if (SHIBYTE(v1313) < 0)
      {
        operator delete((void *)v1312);
        if ((v522 & 0x80000000) == 0)
          goto LABEL_1124;
      }
      else if ((v522 & 0x80000000) == 0)
      {
        goto LABEL_1124;
      }
      operator delete(__src[0]);
    }
  }
LABEL_1124:
  v523 = (void **)(v106 + 208);
  if (*(char *)(v106 + 231) < 0)
  {
    sub_22E3BB2B4(&v1308, *(void **)(v106 + 208), *(_QWORD *)(v106 + 216));
    v524 = *(char *)(v106 + 231);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v524 < 0)
      operator delete(*v523);
  }
  else
  {
    v1308 = *(_OWORD *)v523;
    v1309 = *(_QWORD *)(v106 + 224);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  *v523 = 0;
  *(_QWORD *)(v106 + 216) = 0;
  *(_DWORD *)(v106 + 224) = __src[0];
  *(_DWORD *)(v106 + 227) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v106 + 231) = 0;
  if (SHIBYTE(v1309) < 0)
    operator delete((void *)v1308);
  if ((*(_BYTE *)(v106 + 5) & 0x18) != 0)
  {
    sub_22E6EC3DC((uint64_t)__src, 231, v18);
    if (LOBYTE(__src[3]))
    {
      if (*(char *)(v106 + 231) < 0)
      {
        sub_22E3BB2B4(&v1306, *(void **)(v106 + 208), *(_QWORD *)(v106 + 216));
      }
      else
      {
        v1306 = *(_OWORD *)v523;
        v1307 = *(_QWORD *)(v106 + 224);
      }
      v525 = SHIBYTE(__src[2]);
      if (SHIBYTE(__src[2]) < 0)
      {
        sub_22E3BB2B4(&v1304, __src[0], (unint64_t)__src[1]);
      }
      else
      {
        v1304 = *(_OWORD *)__src;
        v1305 = __src[2];
      }
      if (SHIBYTE(v1305) < 0)
      {
        sub_22E3BB2B4(&v1472, (void *)v1304, *((unint64_t *)&v1304 + 1));
      }
      else
      {
        v1472 = v1304;
        v1473 = (int64_t)v1305;
      }
      if (*(char *)(v106 + 231) < 0)
        operator delete(*v523);
      *(_OWORD *)v523 = v1472;
      *(_QWORD *)(v106 + 224) = v1473;
      HIBYTE(v1473) = 0;
      LOBYTE(v1472) = 0;
      if (SHIBYTE(v1305) < 0)
        operator delete((void *)v1304);
      if (SHIBYTE(v1307) < 0)
      {
        operator delete((void *)v1306);
        if ((v525 & 0x80000000) == 0)
          goto LABEL_1149;
      }
      else if ((v525 & 0x80000000) == 0)
      {
        goto LABEL_1149;
      }
      operator delete(__src[0]);
    }
  }
LABEL_1149:
  v449[3] &= ~0x20000uLL;
  if (sub_22E721714(v18, 297))
    v449[3] |= 0x20000uLL;
  *(_QWORD *)(v106 + 40) &= ~0x20000000000uLL;
  if (sub_22E721714(v18, 1813))
    *(_QWORD *)(v106 + 40) |= 0x20000000000uLL;
  v449[3] &= ~0x80000uLL;
  v526 = sub_22E721714(v18, 2905);
  v527 = v449[3];
  if (v526)
    v527 |= 0x80000uLL;
  v449[3] = v527 | 0x100000;
  if (sub_22E721714(v18, 2730))
    v449[3] &= ~0x100000uLL;
  v528 = (void **)(v106 + 288);
  if (*(char *)(v106 + 311) < 0)
  {
    sub_22E3BB2B4(&v1302, *(void **)(v106 + 288), *(_QWORD *)(v106 + 296));
    v529 = *(char *)(v106 + 311);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v529 < 0)
      operator delete(*v528);
  }
  else
  {
    v1302 = *(_OWORD *)v528;
    v1303 = *(_QWORD *)(v106 + 304);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  *v528 = 0;
  *(_QWORD *)(v106 + 296) = 0;
  *(_DWORD *)(v106 + 304) = __src[0];
  *(_DWORD *)(v106 + 307) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v106 + 311) = 0;
  if (SHIBYTE(v1303) < 0)
    operator delete((void *)v1302);
  sub_22E6EC3DC((uint64_t)__src, 2171, v18);
  if (LOBYTE(__src[3]))
  {
    if (*(char *)(v106 + 311) < 0)
    {
      sub_22E3BB2B4(&v1300, *(void **)(v106 + 288), *(_QWORD *)(v106 + 296));
    }
    else
    {
      v1300 = *(_OWORD *)v528;
      v1301 = *(_QWORD *)(v106 + 304);
    }
    v530 = SHIBYTE(__src[2]);
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_22E3BB2B4(&v1298, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v1298 = *(_OWORD *)__src;
      v1299 = __src[2];
    }
    if (SHIBYTE(v1299) < 0)
    {
      sub_22E3BB2B4(&v1472, (void *)v1298, *((unint64_t *)&v1298 + 1));
    }
    else
    {
      v1472 = v1298;
      v1473 = (int64_t)v1299;
    }
    if (*(char *)(v106 + 311) < 0)
      operator delete(*v528);
    *(_OWORD *)v528 = v1472;
    *(_QWORD *)(v106 + 304) = v1473;
    HIBYTE(v1473) = 0;
    LOBYTE(v1472) = 0;
    if (SHIBYTE(v1299) < 0)
      operator delete((void *)v1298);
    if (SHIBYTE(v1301) < 0)
    {
      operator delete((void *)v1300);
      if ((v530 & 0x80000000) == 0)
        goto LABEL_1179;
    }
    else if ((v530 & 0x80000000) == 0)
    {
      goto LABEL_1179;
    }
    operator delete(__src[0]);
  }
LABEL_1179:
  *(_QWORD *)(v106 + 96) &= 0xFFFFFFF3FFFFFFFFLL;
  v531 = sub_22E6EC1FC(2214, 0x22u, v18, v1212);
  if (HIDWORD(v531))
    *(_QWORD *)(v106 + 96) = *(_QWORD *)(v106 + 96) & 0xFFFFFFF3FFFFFFFFLL | ((v531 & 3) << 34);
  v532 = (void **)(v106 + 456);
  if (*(char *)(v106 + 479) < 0)
  {
    sub_22E3BB2B4(&v1296, *(void **)(v106 + 456), *(_QWORD *)(v106 + 464));
    v533 = *(char *)(v106 + 479);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v533 < 0)
      operator delete(*v532);
  }
  else
  {
    v1296 = *(_OWORD *)v532;
    v1297 = *(_QWORD *)(v106 + 472);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  *v532 = 0;
  *(_QWORD *)(v106 + 464) = 0;
  *(_DWORD *)(v106 + 472) = __src[0];
  *(_DWORD *)(v106 + 475) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v106 + 479) = 0;
  if (SHIBYTE(v1297) < 0)
    operator delete((void *)v1296);
  sub_22E6EC3DC((uint64_t)__src, 2203, v18);
  if (LOBYTE(__src[3]))
  {
    if (*(char *)(v106 + 479) < 0)
    {
      sub_22E3BB2B4(&v1294, *(void **)(v106 + 456), *(_QWORD *)(v106 + 464));
    }
    else
    {
      v1294 = *(_OWORD *)v532;
      v1295 = *(_QWORD *)(v106 + 472);
    }
    v534 = SHIBYTE(__src[2]);
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_22E3BB2B4(&v1292, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v1292 = *(_OWORD *)__src;
      v1293 = __src[2];
    }
    if (SHIBYTE(v1293) < 0)
    {
      sub_22E3BB2B4(&v1472, (void *)v1292, *((unint64_t *)&v1292 + 1));
    }
    else
    {
      v1472 = v1292;
      v1473 = (int64_t)v1293;
    }
    if (*(char *)(v106 + 479) < 0)
      operator delete(*v532);
    *(_OWORD *)v532 = v1472;
    *(_QWORD *)(v106 + 472) = v1473;
    HIBYTE(v1473) = 0;
    LOBYTE(v1472) = 0;
    if (SHIBYTE(v1293) < 0)
      operator delete((void *)v1292);
    if (SHIBYTE(v1295) < 0)
    {
      operator delete((void *)v1294);
      if ((v534 & 0x80000000) == 0)
        goto LABEL_1205;
    }
    else if ((v534 & 0x80000000) == 0)
    {
      goto LABEL_1205;
    }
    operator delete(__src[0]);
  }
LABEL_1205:
  v535 = (void **)(v106 + 512);
  if (*(char *)(v106 + 535) < 0)
  {
    sub_22E3BB2B4(&v1290, *(void **)(v106 + 512), *(_QWORD *)(v106 + 520));
    v536 = *(char *)(v106 + 535);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v536 < 0)
      operator delete(*v535);
  }
  else
  {
    v1290 = *(_OWORD *)v535;
    v1291 = *(_QWORD *)(v106 + 528);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  *v535 = 0;
  *(_QWORD *)(v106 + 520) = 0;
  *(_DWORD *)(v106 + 528) = __src[0];
  *(_DWORD *)(v106 + 531) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v106 + 535) = 0;
  if (SHIBYTE(v1291) < 0)
    operator delete((void *)v1290);
  sub_22E6EC3DC((uint64_t)__src, 2278, v18);
  if (LOBYTE(__src[3]))
  {
    if (*(char *)(v106 + 535) < 0)
    {
      sub_22E3BB2B4(&v1288, *(void **)(v106 + 512), *(_QWORD *)(v106 + 520));
    }
    else
    {
      v1288 = *(_OWORD *)v535;
      v1289 = *(_QWORD *)(v106 + 528);
    }
    v537 = SHIBYTE(__src[2]);
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_22E3BB2B4(&v1286, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v1286 = *(_OWORD *)__src;
      v1287 = __src[2];
    }
    if (SHIBYTE(v1287) < 0)
    {
      sub_22E3BB2B4(&v1472, (void *)v1286, *((unint64_t *)&v1286 + 1));
    }
    else
    {
      v1472 = v1286;
      v1473 = (int64_t)v1287;
    }
    if (*(char *)(v106 + 535) < 0)
      operator delete(*v535);
    *(_OWORD *)v535 = v1472;
    *(_QWORD *)(v106 + 528) = v1473;
    HIBYTE(v1473) = 0;
    LOBYTE(v1472) = 0;
    if (SHIBYTE(v1287) < 0)
      operator delete((void *)v1286);
    if (SHIBYTE(v1289) < 0)
    {
      operator delete((void *)v1288);
      if ((v537 & 0x80000000) == 0)
        goto LABEL_1229;
    }
    else if ((v537 & 0x80000000) == 0)
    {
      goto LABEL_1229;
    }
    operator delete(__src[0]);
  }
LABEL_1229:
  *(_QWORD *)(v106 + 68) = (unint64_t)*(unsigned int *)(v106 + 72) << 32;
  v538 = v1212;
  v539 = sub_22E6EC038(2581, v18, v1212);
  if (HIDWORD(v539))
    LODWORD(v540) = v539;
  else
    v540 = *(_QWORD *)(v106 + 68);
  *(_QWORD *)(v106 + 68) = v540;
  v541 = sub_22E6EC038(2611, v18, v538);
  if (HIDWORD(v541))
    *(_DWORD *)(v106 + 72) = v541;
  *(_QWORD *)(v106 + 40) &= 0xFFFFFFE7FFFFFFFFLL;
  v542 = sub_22E6EC038(1803, v18, v1212);
  if (HIDWORD(v542))
    *(_QWORD *)(v106 + 40) = *(_QWORD *)(v106 + 40) & 0xFFFFFFE7FFFFFFFFLL | ((v542 & 3) << 35);
  *(_QWORD *)v106 &= ~0x80000uLL;
  if (sub_22E721888(v18, 0x870u, 0x93Du))
  {
    v543 = llvm::opt::Option::matches();
    v544 = 0x80000;
    if (!v543)
      v544 = 0;
    v545 = *(_QWORD *)v106 & 0xFFFFFFFFFFF7FFFFLL | v544;
  }
  else
  {
    v545 = *(_QWORD *)v106;
  }
  *(_QWORD *)v106 = v545 & 0xFFFFFFFFFFF7FFFFLL;
  if (sub_22E721888(v18, 0x93Du, 0x870u))
  {
    v546 = llvm::opt::Option::matches();
    v547 = 0x80000;
    if (v546)
      v547 = 0;
    *(_QWORD *)v106 = *(_QWORD *)v106 & 0xFFFFFFFFFFF7FFFFLL | v547;
  }
  *(_QWORD *)(v106 + 40) &= ~0x2000000000uLL;
  v548 = sub_22E721714(v18, 3059);
  v549 = *(_QWORD *)(v106 + 40);
  if (v548)
    v549 |= 0x2000000000uLL;
  *(_QWORD *)(v106 + 40) = v549 & 0xFFFFFFBFFFFFFFFFLL;
  if (sub_22E721714(v18, 3060))
    *(_QWORD *)(v106 + 40) |= 0x4000000000uLL;
  memset(v1285, 0, sizeof(v1285));
  sub_22E618148(v1285, *(_QWORD *)(v106 + 688), *(_QWORD *)(v106 + 696), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v106 + 696) - *(_QWORD *)(v106 + 688)) >> 3));
  memset(v1284, 0, sizeof(v1284));
  memset(__src, 0, 24);
  sub_22E63B344((void **)(v106 + 688));
  *(_OWORD *)(v106 + 688) = *(_OWORD *)__src;
  *(void **)(v106 + 704) = __src[2];
  memset(__src, 0, 24);
  *(_QWORD *)&v1472 = __src;
  sub_22E3B3CC8((void ***)&v1472);
  *(_QWORD *)&v1472 = v1284;
  sub_22E3B3CC8((void ***)&v1472);
  *(_QWORD *)&v1472 = v1285;
  sub_22E3B3CC8((void ***)&v1472);
  llvm::opt::ArgList::getAllArgValues();
  *(_OWORD *)__src = v1472;
  __src[2] = (void *)v1473;
  v1473 = 0;
  v1472 = 0uLL;
  LOBYTE(__src[3]) = 1;
  *(_QWORD *)&v1466 = &v1472;
  sub_22E3B3CC8((void ***)&v1466);
  if (LOBYTE(__src[3]))
  {
    memset(v1283, 0, sizeof(v1283));
    sub_22E618148(v1283, *(_QWORD *)(v106 + 688), *(_QWORD *)(v106 + 696), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v106 + 696) - *(_QWORD *)(v106 + 688)) >> 3));
    v1281 = 0;
    v1280 = 0;
    v1282 = 0;
    sub_22E618148(&v1280, (uint64_t)__src[0], (uint64_t)__src[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__src[1] - (char *)__src[0]) >> 3));
    v1472 = 0uLL;
    v1473 = 0;
    sub_22E618148(&v1472, v1280, v1281, 0xAAAAAAAAAAAAAAABLL * ((v1281 - v1280) >> 3));
    sub_22E63B344((void **)(v106 + 688));
    *(_OWORD *)(v1211 + 688) = v1472;
    *(_QWORD *)(v1211 + 704) = v1473;
    v1473 = 0;
    v1472 = 0uLL;
    *(_QWORD *)&v1466 = &v1472;
    sub_22E3B3CC8((void ***)&v1466);
    *(_QWORD *)&v1466 = &v1280;
    v18 = v1209;
    sub_22E3B3CC8((void ***)&v1466);
    *(_QWORD *)&v1466 = v1283;
    v106 = v1211;
    sub_22E3B3CC8((void ***)&v1466);
    if (LOBYTE(__src[3]))
    {
      *(_QWORD *)&v1472 = __src;
      sub_22E3B3CC8((void ***)&v1472);
    }
  }
  *(_QWORD *)v106 &= ~2uLL;
  if (sub_22E721714(v18, 409))
    *(_QWORD *)v106 |= 2uLL;
  memset(v1279, 0, sizeof(v1279));
  sub_22E618148(v1279, *(_QWORD *)(v106 + 712), *(_QWORD *)(v106 + 720), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v106 + 720) - *(_QWORD *)(v106 + 712)) >> 3));
  memset(v1278, 0, sizeof(v1278));
  memset(__src, 0, 24);
  sub_22E63B344(v49);
  *(_OWORD *)v49 = *(_OWORD *)__src;
  *(void **)(v106 + 728) = __src[2];
  memset(__src, 0, 24);
  *(_QWORD *)&v1472 = __src;
  sub_22E3B3CC8((void ***)&v1472);
  *(_QWORD *)&v1472 = v1278;
  sub_22E3B3CC8((void ***)&v1472);
  *(_QWORD *)&v1472 = v1279;
  sub_22E3B3CC8((void ***)&v1472);
  llvm::opt::ArgList::getAllArgValues();
  *(_OWORD *)__src = v1472;
  __src[2] = (void *)v1473;
  v1473 = 0;
  v1472 = 0uLL;
  LOBYTE(__src[3]) = 1;
  *(_QWORD *)&v1466 = &v1472;
  sub_22E3B3CC8((void ***)&v1466);
  if (LOBYTE(__src[3]))
  {
    memset(v1277, 0, sizeof(v1277));
    sub_22E618148(v1277, *(_QWORD *)(v106 + 712), *(_QWORD *)(v106 + 720), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v106 + 720) - *(_QWORD *)(v106 + 712)) >> 3));
    v1275 = 0;
    v1274 = 0;
    v1276 = 0;
    sub_22E618148(&v1274, (uint64_t)__src[0], (uint64_t)__src[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__src[1] - (char *)__src[0]) >> 3));
    v1472 = 0uLL;
    v1473 = 0;
    sub_22E618148(&v1472, v1274, v1275, 0xAAAAAAAAAAAAAAABLL * ((v1275 - v1274) >> 3));
    sub_22E63B344(v49);
    *(_OWORD *)v49 = v1472;
    *(_QWORD *)(v1211 + 728) = v1473;
    v1473 = 0;
    v1472 = 0uLL;
    *(_QWORD *)&v1466 = &v1472;
    sub_22E3B3CC8((void ***)&v1466);
    *(_QWORD *)&v1466 = &v1274;
    v18 = v1209;
    sub_22E3B3CC8((void ***)&v1466);
    *(_QWORD *)&v1466 = v1277;
    v106 = v1211;
    sub_22E3B3CC8((void ***)&v1466);
    if (LOBYTE(__src[3]))
    {
      *(_QWORD *)&v1472 = __src;
      sub_22E3B3CC8((void ***)&v1472);
    }
  }
  v449[3] &= 0xFFFFFFE7FFFFFFFFLL;
  v550 = v1212;
  v551 = sub_22E6EC038(1646, v18, v1212);
  if (HIDWORD(v551))
    v552 = v449[3] & 0xFFFFFFC7FFFFFFFFLL | ((v551 & 3) << 35);
  else
    v552 = v449[3];
  v449[3] = v552 & 0xFFFFFFDFFFFFFFFFLL;
  v553 = sub_22E721714(v18, 1632);
  v554 = v449[3];
  if (v553)
    v554 |= 0x2000000000uLL;
  v449[3] = v554 & 0xFFFFFFBFFFFFFFFFLL;
  v555 = sub_22E721714(v18, 1638);
  v556 = v449[3];
  if (v555)
    v556 |= 0x4000000000uLL;
  v449[3] = v556 & 0xFFFFFF7FFFFFFFFFLL;
  v557 = sub_22E721714(v18, 1639);
  v558 = v449[3];
  if (v557)
    v558 |= 0x8000000000uLL;
  v449[3] = v558 & 0xFFFFFEFFFFFFFFFFLL;
  v559 = sub_22E721714(v18, 1640);
  v560 = v449[3];
  if (v559)
    v560 |= 0x10000000000uLL;
  v449[3] = v560 & 0xFFFFFDFFFFFFFFFFLL;
  v561 = sub_22E721714(v18, 1641);
  v562 = v449[3];
  if (v561)
    v562 |= 0x20000000000uLL;
  v449[3] = v562 & 0xFFFFFBFFFFFFFFFFLL;
  v563 = sub_22E721714(v18, 1628);
  v564 = v449[3];
  if (v563)
    v564 |= 0x40000000000uLL;
  v449[3] = v564 & 0xFFFFDFFFFFFFFFFFLL;
  v565 = sub_22E721714(v18, 1633);
  v566 = v449[3];
  if (v565)
    v566 |= 0x200000000000uLL;
  v449[3] = v566 & 0xFFFFBFFFFFFFFFFFLL;
  v567 = sub_22E721714(v18, 1634);
  v568 = v449[3];
  if (v567)
    v568 |= 0x400000000000uLL;
  v449[3] = v568 & 0xFFFF7FFFFFFFFFFFLL;
  v569 = sub_22E721714(v18, 1636);
  v570 = v449[3];
  if (v569)
    v570 |= 0x800000000000uLL;
  v449[3] = v570 & 0xFFFFF7FFFFFFFFFFLL;
  v571 = sub_22E721714(v18, 1644);
  v572 = v449[3];
  if (v571)
    v572 |= 0x80000000000uLL;
  v449[3] = v572 & 0xFFFFEFFFFFFFFFFFLL;
  v573 = sub_22E721714(v18, 1643);
  v574 = v449[3];
  if (v573)
    v574 |= 0x100000000000uLL;
  v449[3] = v574 & 0xFFFEFFFFFFFFFFFFLL;
  v575 = sub_22E721714(v18, 1635);
  v576 = v449[3];
  if (v575)
    v576 |= 0x1000000000000uLL;
  v449[3] = v576 & 0xFFFDFFFFFFFFFFFFLL;
  v577 = sub_22E721714(v18, 1637);
  v578 = v449[3];
  if (v577)
    v578 |= 0x2000000000000uLL;
  v449[3] = v578 & 0xFFFBFFFFFFFFFFFFLL;
  v579 = sub_22E721714(v18, 1642);
  v580 = v449[3];
  if (v579)
    v580 |= 0x4000000000000uLL;
  v449[3] = v580 & 0xFFF7FFFFFFFFFFFFLL;
  v581 = sub_22E721714(v18, 1645);
  v582 = v449[3];
  if (v581)
    v582 |= 0x8000000000000uLL;
  v449[2] = (unint64_t)*((unsigned int *)v449 + 5) << 32;
  v449[3] = v582;
  v583 = sub_22E6EC038(1498, v18, v550);
  if (HIDWORD(v583))
    *((_DWORD *)v449 + 4) = v583;
  *(_QWORD *)(v106 + 96) &= 0xFFFFE7FFFFFFFFFFLL;
  v584 = sub_22E6EC1FC(1538, 0x23u, v18, v1212);
  if (HIDWORD(v584))
    *(_QWORD *)(v106 + 96) = *(_QWORD *)(v106 + 96) & 0xFFFFE7FFFFFFFFFFLL | ((v584 & 3) << 43);
  v585 = (void **)(v106 + 736);
  if (*(char *)(v106 + 759) < 0)
  {
    sub_22E3BB2B4(&v1272, *(void **)(v106 + 736), *(_QWORD *)(v106 + 744));
    v586 = *(char *)(v106 + 759);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v586 < 0)
      operator delete(*v585);
  }
  else
  {
    v1272 = *(_OWORD *)v585;
    v1273 = *(_QWORD *)(v106 + 752);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  *v585 = 0;
  *(_QWORD *)(v106 + 744) = 0;
  *(_DWORD *)(v106 + 752) = __src[0];
  *(_DWORD *)(v106 + 755) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v106 + 759) = 0;
  if (SHIBYTE(v1273) < 0)
    operator delete((void *)v1272);
  sub_22E6EC3DC((uint64_t)__src, 1536, v18);
  if (LOBYTE(__src[3]))
  {
    if (*(char *)(v106 + 759) < 0)
    {
      sub_22E3BB2B4(&v1270, *(void **)(v106 + 736), *(_QWORD *)(v106 + 744));
    }
    else
    {
      v1270 = *(_OWORD *)v585;
      v1271 = *(_QWORD *)(v106 + 752);
    }
    v587 = SHIBYTE(__src[2]);
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_22E3BB2B4(&v1268, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v1268 = *(_OWORD *)__src;
      v1269 = __src[2];
    }
    if (SHIBYTE(v1269) < 0)
    {
      sub_22E3BB2B4(&v1472, (void *)v1268, *((unint64_t *)&v1268 + 1));
    }
    else
    {
      v1472 = v1268;
      v1473 = (int64_t)v1269;
    }
    if (*(char *)(v106 + 759) < 0)
      operator delete(*v585);
    *(_OWORD *)v585 = v1472;
    *(_QWORD *)(v106 + 752) = v1473;
    HIBYTE(v1473) = 0;
    LOBYTE(v1472) = 0;
    if (SHIBYTE(v1269) < 0)
      operator delete((void *)v1268);
    if (SHIBYTE(v1271) < 0)
    {
      operator delete((void *)v1270);
      if ((v587 & 0x80000000) == 0)
        goto LABEL_1318;
    }
    else if ((v587 & 0x80000000) == 0)
    {
      goto LABEL_1318;
    }
    operator delete(__src[0]);
  }
LABEL_1318:
  v588 = (void **)(v106 + 808);
  if (*(char *)(v106 + 831) < 0)
  {
    sub_22E3BB2B4(&v1266, *(void **)(v106 + 808), *(_QWORD *)(v106 + 816));
    v590 = *(char *)(v106 + 831);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    v589 = (uint64_t *)v1208;
    if (v590 < 0)
      operator delete(*v588);
  }
  else
  {
    v1266 = *(_OWORD *)v588;
    v1267 = *(_QWORD *)(v106 + 824);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    v589 = (uint64_t *)v1208;
  }
  *v588 = 0;
  *(_QWORD *)(v106 + 816) = 0;
  *(_DWORD *)(v106 + 824) = __src[0];
  *(_DWORD *)(v106 + 827) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v106 + 831) = 0;
  if (SHIBYTE(v1267) < 0)
    operator delete((void *)v1266);
  sub_22E6EC3DC((uint64_t)__src, 1537, v18);
  if (LOBYTE(__src[3]))
  {
    if (*(char *)(v106 + 831) < 0)
    {
      sub_22E3BB2B4(&v1264, *(void **)(v106 + 808), *(_QWORD *)(v106 + 816));
    }
    else
    {
      v1264 = *(_OWORD *)v588;
      v1265 = *(_QWORD *)(v106 + 824);
    }
    v591 = SHIBYTE(__src[2]);
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_22E3BB2B4(&v1262, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v1262 = *(_OWORD *)__src;
      v1263 = __src[2];
    }
    if (SHIBYTE(v1263) < 0)
    {
      sub_22E3BB2B4(&v1472, (void *)v1262, *((unint64_t *)&v1262 + 1));
    }
    else
    {
      v1472 = v1262;
      v1473 = (int64_t)v1263;
    }
    if (*(char *)(v106 + 831) < 0)
      operator delete(*v588);
    *(_OWORD *)v588 = v1472;
    *(_QWORD *)(v106 + 824) = v1473;
    HIBYTE(v1473) = 0;
    LOBYTE(v1472) = 0;
    if (SHIBYTE(v1263) < 0)
      operator delete((void *)v1262);
    if (SHIBYTE(v1265) < 0)
    {
      operator delete((void *)v1264);
      if ((v591 & 0x80000000) == 0)
        goto LABEL_1342;
    }
    else if ((v591 & 0x80000000) == 0)
    {
      goto LABEL_1342;
    }
    operator delete(__src[0]);
  }
LABEL_1342:
  *(_WORD *)(v106 + 64) &= ~0x800u;
  if (sub_22E721714(v18, 843))
    *(_WORD *)(v106 + 64) |= 0x800u;
  v449[2] &= ~0x40000000000uLL;
  if (sub_22E721888(v18, 0x34Au, 0x45Bu))
  {
    v592 = llvm::opt::Option::matches();
    v594 = *v449;
    v593 = v449[1];
    v595 = v449[3];
    v596 = 0x40000000000;
    if (!v592)
      v596 = 0;
    v597 = v449[2] & 0xFFFFFBFFFFFFFFFFLL | v596;
  }
  else
  {
    v597 = v449[2];
    v595 = v449[3];
    v594 = *v449;
    v593 = v449[1];
  }
  *v449 = v594;
  v449[1] = v593;
  v449[2] = v597 & 0xFFFFFBFFFFFFFFFFLL;
  v449[3] = v595;
  if (sub_22E721888(v18, 0x45Bu, 0x34Au))
  {
    v598 = llvm::opt::Option::matches();
    v599 = 0x40000000000;
    if (v598)
      v599 = 0;
    v449[2] = v449[2] & 0xFFFFFBFFFFFFFFFFLL | v599;
  }
  *(_QWORD *)v106 &= ~0x100000000uLL;
  if (sub_22E721888(v18, 0x226u, 0x3EAu))
  {
    v600 = llvm::opt::Option::matches();
    v601 = 0x100000000;
    if (!v600)
      v601 = 0;
    v602 = *(_QWORD *)v106 & 0xFFFFFFFEFFFFFFFFLL | v601;
  }
  else
  {
    v602 = *(_QWORD *)v106;
  }
  *(_QWORD *)v106 = v602 & 0xFFFFFFFEFFFFFFFFLL;
  if (sub_22E721888(v18, 0x3EAu, 0x226u))
  {
    v603 = llvm::opt::Option::matches();
    v604 = 0x100000000;
    if (v603)
      v604 = 0;
    v605 = *(_QWORD *)v106 & 0xFFFFFFFEFFFFFFFFLL | v604;
  }
  else
  {
    v605 = *(_QWORD *)v106;
  }
  *(_QWORD *)v106 = v605 & 0xFFFFFFF7FFFFFFFFLL;
  if (sub_22E721714(v18, 1822))
    *(_QWORD *)v106 |= 0x800000000uLL;
  v606 = (void **)(v106 + 480);
  if (*(char *)(v106 + 503) < 0)
  {
    sub_22E3BB2B4(&v1260, *(void **)(v106 + 480), *(_QWORD *)(v106 + 488));
    v607 = *(char *)(v106 + 503);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v607 < 0)
      operator delete(*v606);
  }
  else
  {
    v1260 = *(_OWORD *)v606;
    v1261 = *(_QWORD *)(v106 + 496);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  *v606 = 0;
  *(_QWORD *)(v106 + 488) = 0;
  *(_DWORD *)(v106 + 496) = __src[0];
  *(_DWORD *)(v106 + 499) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v106 + 503) = 0;
  if (SHIBYTE(v1261) < 0)
    operator delete((void *)v1260);
  sub_22E6EC3DC((uint64_t)__src, 1821, v18);
  if (LOBYTE(__src[3]))
  {
    if (*(char *)(v106 + 503) < 0)
    {
      sub_22E3BB2B4(&v1258, *(void **)(v106 + 480), *(_QWORD *)(v106 + 488));
    }
    else
    {
      v1258 = *(_OWORD *)v606;
      v1259 = *(_QWORD *)(v106 + 496);
    }
    v608 = SHIBYTE(__src[2]);
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_22E3BB2B4(&v1256, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v1256 = *(_OWORD *)__src;
      v1257 = __src[2];
    }
    if (SHIBYTE(v1257) < 0)
    {
      sub_22E3BB2B4(&v1472, (void *)v1256, *((unint64_t *)&v1256 + 1));
    }
    else
    {
      v1472 = v1256;
      v1473 = (int64_t)v1257;
    }
    if (*(char *)(v106 + 503) < 0)
      operator delete(*v606);
    *(_OWORD *)v606 = v1472;
    *(_QWORD *)(v106 + 496) = v1473;
    HIBYTE(v1473) = 0;
    LOBYTE(v1472) = 0;
    if (SHIBYTE(v1257) < 0)
      operator delete((void *)v1256);
    if (SHIBYTE(v1259) < 0)
    {
      operator delete((void *)v1258);
      if ((v608 & 0x80000000) == 0)
        goto LABEL_1389;
    }
    else if ((v608 & 0x80000000) == 0)
    {
      goto LABEL_1389;
    }
    operator delete(__src[0]);
  }
LABEL_1389:
  *(_QWORD *)(v106 + 56) |= 0xFFFFFFFF00000000;
  v609 = sub_22E6EC038(1835, v18, v1212);
  if (HIDWORD(v609))
    *(_DWORD *)(v106 + 60) = v609;
  *(_QWORD *)v106 &= ~0x4000uLL;
  v610 = sub_22E721714(v18, 180);
  v611 = *(_QWORD *)v106;
  if (v610)
    v611 = *(_QWORD *)v106 | 0x4000;
  *(_QWORD *)v106 = v611 & 0xFFFFFFFFFFFF7FFFLL;
  v612 = sub_22E721714(v18, 181);
  v613 = *(_QWORD *)v106;
  if (v612)
    v613 = *(_QWORD *)v106 | 0x8000;
  *(_QWORD *)v106 = v613 & 0xFFFFFFFFFFFEFFFFLL;
  if (sub_22E721714(v18, 323))
    *(_QWORD *)v106 |= 0x10000uLL;
  *(_WORD *)(v106 + 64) |= 0x80u;
  if (sub_22E721714(v18, 1005))
    *(_WORD *)(v106 + 64) &= ~0x80u;
  *(_QWORD *)v106 &= ~0x1000000uLL;
  if (sub_22E721888(v18, 0xCEu, 0xA90u))
  {
    v614 = llvm::opt::Option::matches();
    v615 = 0x1000000;
    if (!v614)
      v615 = 0;
    v616 = *(_QWORD *)v106 & 0xFFFFFFFFFEFFFFFFLL | v615;
  }
  else
  {
    v616 = *(_QWORD *)v106;
  }
  *(_QWORD *)v106 = v616 & 0xFFFFFFFFFEFFFFFFLL;
  if (sub_22E721888(v18, 0xA90u, 0xCEu))
  {
    v617 = llvm::opt::Option::matches();
    v618 = 0x1000000;
    if (v617)
      v618 = 0;
    v619 = *(_QWORD *)v106 & 0xFFFFFFFFFEFFFFFFLL | v618;
  }
  else
  {
    v619 = *(_QWORD *)v106;
  }
  *(_QWORD *)v106 = v619 | 0x80000000;
  if (sub_22E721888(v18, 0x159u, 0xA99u))
  {
    v620 = llvm::opt::Option::matches();
    v621 = 0x80000000;
    if (!v620)
      v621 = 0;
    v622 = *(_QWORD *)v106 & 0xFFFFFFFF7FFFFFFFLL | v621;
  }
  else
  {
    v622 = *(_QWORD *)v106;
  }
  *(_QWORD *)v106 = v622 | 0x80000000;
  if (sub_22E721888(v18, 0xA99u, 0x159u))
  {
    v623 = llvm::opt::Option::matches();
    v624 = 0x80000000;
    if (v623)
      v624 = 0;
    *(_QWORD *)v106 = *(_QWORD *)v106 & 0xFFFFFFFF7FFFFFFFLL | v624;
  }
  if ((*((_DWORD *)v448 + 6) & 0xFFFFFFFE) == 0x30)
  {
    v625 = getenv("ENABLE_OPAQUE_POINTERS_BY_DEFAULT");
    v626 = *v589;
    v627 = *((_DWORD *)v589 + 2);
    if (!v625)
    {
      v628 = 0;
      goto LABEL_1423;
    }
  }
  else
  {
    v626 = *v589;
    v627 = *((_DWORD *)v589 + 2);
  }
  v628 = 0x100000;
LABEL_1423:
  *v589 = v626;
  *((_DWORD *)v589 + 2) = v627 & 0xFFEFFFFF | v628;
  if (sub_22E721888(v18, 0xAF1u, 0xAA3u))
  {
    if (llvm::opt::Option::matches())
      v629 = 0x100000;
    else
      v629 = 0;
    *((_DWORD *)v589 + 2) = v589[1] & 0xFFEFFFFF | v629;
  }
  if ((*((_DWORD *)v448 + 6) & 0xFFFFFFFE) == 0x30)
  {
    v630 = getenv("ENABLE_OPAQUE_POINTERS_BY_DEFAULT");
    v631 = *v589;
    v632 = *((_DWORD *)v589 + 2);
    if (!v630)
    {
      v633 = 0;
      goto LABEL_1433;
    }
  }
  else
  {
    v631 = *v589;
    v632 = *((_DWORD *)v589 + 2);
  }
  v633 = 0x100000;
LABEL_1433:
  *v589 = v631;
  *((_DWORD *)v589 + 2) = v632 & 0xFFEFFFFF | v633;
  if (sub_22E721888(v18, 0xAA3u, 0xAF1u))
  {
    if (llvm::opt::Option::matches())
      v634 = 0;
    else
      v634 = 0x100000;
    *((_DWORD *)v589 + 2) = v589[1] & 0xFFEFFFFF | v634;
  }
  *(_QWORD *)v106 &= ~0x4000000uLL;
  if (sub_22E721714(v18, 291))
    *(_QWORD *)v106 |= 0x4000000uLL;
  *(_WORD *)(v106 + 64) &= ~0x100u;
  if (sub_22E721888(v18, 0x14Fu, 0xA98u))
  {
    v635 = llvm::opt::Option::matches();
    v637 = *(_QWORD *)(v106 + 48);
    v636 = *(_QWORD *)(v106 + 56);
    v638 = 256;
    if (!v635)
      v638 = 0;
    v639 = *(_WORD *)(v106 + 64) & 0xFEFF | v638;
  }
  else
  {
    v637 = *(_QWORD *)(v106 + 48);
    v636 = *(_QWORD *)(v106 + 56);
    v639 = *(_WORD *)(v106 + 64);
  }
  *(_QWORD *)(v106 + 48) = v637;
  *(_QWORD *)(v106 + 56) = v636;
  *(_WORD *)(v106 + 64) = v639 & 0xFEFF;
  if (sub_22E721888(v18, 0xA98u, 0x14Fu))
  {
    if (llvm::opt::Option::matches())
      v640 = 0;
    else
      v640 = 256;
    *(_WORD *)(v106 + 64) = *(_WORD *)(v106 + 64) & 0xFEFF | v640;
  }
  v641 = (void **)(v106 + 976);
  if (*(char *)(v106 + 999) < 0)
  {
    sub_22E3BB2B4(&v1254, *(void **)(v106 + 976), *(_QWORD *)(v106 + 984));
    v642 = *(char *)(v106 + 999);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v642 < 0)
      operator delete(*v641);
  }
  else
  {
    v1254 = *(_OWORD *)v641;
    v1255 = *(_QWORD *)(v106 + 992);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  *v641 = 0;
  *(_QWORD *)(v106 + 984) = 0;
  *(_DWORD *)(v106 + 992) = __src[0];
  *(_DWORD *)(v106 + 995) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v106 + 999) = 0;
  if (SHIBYTE(v1255) < 0)
    operator delete((void *)v1254);
  sub_22E6EC3DC((uint64_t)__src, 2805, v18);
  if (LOBYTE(__src[3]))
  {
    if (*(char *)(v106 + 999) < 0)
    {
      sub_22E3BB2B4(&v1252, *(void **)(v106 + 976), *(_QWORD *)(v106 + 984));
    }
    else
    {
      v1252 = *(_OWORD *)v641;
      v1253 = *(_QWORD *)(v106 + 992);
    }
    v643 = SHIBYTE(__src[2]);
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_22E3BB2B4(&v1250, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v1250 = *(_OWORD *)__src;
      v1251 = __src[2];
    }
    if (SHIBYTE(v1251) < 0)
    {
      sub_22E3BB2B4(&v1472, (void *)v1250, *((unint64_t *)&v1250 + 1));
    }
    else
    {
      v1472 = v1250;
      v1473 = (int64_t)v1251;
    }
    if (*(char *)(v106 + 999) < 0)
      operator delete(*v641);
    *(_OWORD *)v641 = v1472;
    *(_QWORD *)(v106 + 992) = v1473;
    HIBYTE(v1473) = 0;
    LOBYTE(v1472) = 0;
    if (SHIBYTE(v1251) < 0)
      operator delete((void *)v1250);
    if (SHIBYTE(v1253) < 0)
    {
      operator delete((void *)v1252);
      if ((v643 & 0x80000000) == 0)
        goto LABEL_1474;
    }
    else if ((v643 & 0x80000000) == 0)
    {
      goto LABEL_1474;
    }
    operator delete(__src[0]);
  }
LABEL_1474:
  v644 = (void **)(v106 + 560);
  if (*(char *)(v106 + 583) < 0)
  {
    sub_22E3BB2B4(&v1248, *(void **)(v106 + 560), *(_QWORD *)(v106 + 568));
    v645 = *(char *)(v106 + 583);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v645 < 0)
      operator delete(*v644);
  }
  else
  {
    v1248 = *(_OWORD *)v644;
    v1249 = *(_QWORD *)(v106 + 576);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  *v644 = 0;
  *(_QWORD *)(v106 + 568) = 0;
  *(_DWORD *)(v106 + 576) = __src[0];
  *(_DWORD *)(v106 + 579) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v106 + 583) = 0;
  if (SHIBYTE(v1249) < 0)
    operator delete((void *)v1248);
  sub_22E6EC3DC((uint64_t)__src, 2095, v18);
  if (LOBYTE(__src[3]))
  {
    if (*(char *)(v106 + 583) < 0)
    {
      sub_22E3BB2B4(&v1246, *(void **)(v106 + 560), *(_QWORD *)(v106 + 568));
    }
    else
    {
      v1246 = *(_OWORD *)v644;
      v1247 = *(_QWORD *)(v106 + 576);
    }
    v646 = SHIBYTE(__src[2]);
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_22E3BB2B4(&v1244, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v1244 = *(_OWORD *)__src;
      v1245 = __src[2];
    }
    if (SHIBYTE(v1245) < 0)
    {
      sub_22E3BB2B4(&v1472, (void *)v1244, *((unint64_t *)&v1244 + 1));
    }
    else
    {
      v1472 = v1244;
      v1473 = (int64_t)v1245;
    }
    if (*(char *)(v106 + 583) < 0)
      operator delete(*v644);
    *(_OWORD *)v644 = v1472;
    *(_QWORD *)(v106 + 576) = v1473;
    HIBYTE(v1473) = 0;
    LOBYTE(v1472) = 0;
    if (SHIBYTE(v1245) < 0)
      operator delete((void *)v1244);
    if (SHIBYTE(v1247) < 0)
    {
      operator delete((void *)v1246);
      if ((v646 & 0x80000000) == 0)
        goto LABEL_1498;
    }
    else if ((v646 & 0x80000000) == 0)
    {
      goto LABEL_1498;
    }
    operator delete(__src[0]);
  }
LABEL_1498:
  v647 = (void **)(v106 + 608);
  if (*(char *)(v106 + 631) < 0)
  {
    sub_22E3BB2B4(&v1242, *(void **)(v106 + 608), *(_QWORD *)(v106 + 616));
    v648 = *(char *)(v106 + 631);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v648 < 0)
      operator delete(*v647);
  }
  else
  {
    v1242 = *(_OWORD *)v647;
    v1243 = *(_QWORD *)(v106 + 624);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  *v647 = 0;
  *(_QWORD *)(v106 + 616) = 0;
  *(_DWORD *)(v106 + 624) = __src[0];
  *(_DWORD *)(v106 + 627) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v106 + 631) = 0;
  if (SHIBYTE(v1243) < 0)
    operator delete((void *)v1242);
  sub_22E6EC3DC((uint64_t)__src, 2974, v18);
  if (LOBYTE(__src[3]))
  {
    if (*(char *)(v106 + 631) < 0)
    {
      sub_22E3BB2B4(&v1240, *(void **)(v106 + 608), *(_QWORD *)(v106 + 616));
    }
    else
    {
      v1240 = *(_OWORD *)v647;
      v1241 = *(_QWORD *)(v106 + 624);
    }
    v649 = SHIBYTE(__src[2]);
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_22E3BB2B4(&v1238, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v1238 = *(_OWORD *)__src;
      v1239 = __src[2];
    }
    if (SHIBYTE(v1239) < 0)
    {
      sub_22E3BB2B4(&v1472, (void *)v1238, *((unint64_t *)&v1238 + 1));
    }
    else
    {
      v1472 = v1238;
      v1473 = (int64_t)v1239;
    }
    if (*(char *)(v106 + 631) < 0)
      operator delete(*v647);
    *(_OWORD *)v647 = v1472;
    *(_QWORD *)(v106 + 624) = v1473;
    HIBYTE(v1473) = 0;
    LOBYTE(v1472) = 0;
    if (SHIBYTE(v1239) < 0)
      operator delete((void *)v1238);
    if (SHIBYTE(v1241) < 0)
    {
      operator delete((void *)v1240);
      if ((v649 & 0x80000000) == 0)
        goto LABEL_1522;
    }
    else if ((v649 & 0x80000000) == 0)
    {
      goto LABEL_1522;
    }
    operator delete(__src[0]);
  }
LABEL_1522:
  v650 = (void **)(v106 + 584);
  if (*(char *)(v106 + 607) < 0)
  {
    sub_22E3BB2B4(&v1236, *(void **)(v106 + 584), *(_QWORD *)(v106 + 592));
    v651 = *(char *)(v106 + 607);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v651 < 0)
      operator delete(*v650);
  }
  else
  {
    v1236 = *(_OWORD *)v650;
    v1237 = *(_QWORD *)(v106 + 600);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  *v650 = 0;
  *(_QWORD *)(v106 + 592) = 0;
  *(_DWORD *)(v106 + 600) = __src[0];
  *(_DWORD *)(v106 + 603) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v106 + 607) = 0;
  if (SHIBYTE(v1237) < 0)
    operator delete((void *)v1236);
  sub_22E6EC3DC((uint64_t)__src, 2973, v18);
  if (LOBYTE(__src[3]))
  {
    if (*(char *)(v106 + 607) < 0)
    {
      sub_22E3BB2B4(&v1234, *(void **)(v106 + 584), *(_QWORD *)(v106 + 592));
    }
    else
    {
      v1234 = *(_OWORD *)v650;
      v1235 = *(_QWORD *)(v106 + 600);
    }
    v652 = SHIBYTE(__src[2]);
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_22E3BB2B4(&v1232, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v1232 = *(_OWORD *)__src;
      v1233 = __src[2];
    }
    if (SHIBYTE(v1233) < 0)
    {
      sub_22E3BB2B4(&v1472, (void *)v1232, *((unint64_t *)&v1232 + 1));
    }
    else
    {
      v1472 = v1232;
      v1473 = (int64_t)v1233;
    }
    if (*(char *)(v106 + 607) < 0)
      operator delete(*v650);
    *(_OWORD *)v650 = v1472;
    *(_QWORD *)(v106 + 600) = v1473;
    HIBYTE(v1473) = 0;
    LOBYTE(v1472) = 0;
    if (SHIBYTE(v1233) < 0)
      operator delete((void *)v1232);
    if (SHIBYTE(v1235) < 0)
    {
      operator delete((void *)v1234);
      if ((v652 & 0x80000000) == 0)
        goto LABEL_1546;
    }
    else if ((v652 & 0x80000000) == 0)
    {
      goto LABEL_1546;
    }
    operator delete(__src[0]);
  }
LABEL_1546:
  *(_QWORD *)(v106 + 96) &= 0xFFFFF9FFFFFFFFFFLL;
  v653 = sub_22E6EC1FC(1417, 0x2Au, v18, v1212);
  if (HIDWORD(v653))
    *(_QWORD *)(v106 + 96) = *(_QWORD *)(v106 + 96) & 0xFFFFF9FFFFFFFFFFLL | ((v653 & 3) << 41);
  *(_DWORD *)(v106 + 76) = 8;
  v654 = sub_22E6EC038(2975, v18, v1212);
  v655 = (uint64_t *)v1208;
  if (HIDWORD(v654))
    *(_DWORD *)(v106 + 76) = v654;
  if ((*((_DWORD *)v448 + 6) & 0xFFFFFFFE) == 0x30)
  {
    __src[0] = (void *)llvm::Triple::getAIRVersion(v448);
    __src[1] = v656;
    v1472 = 0x8000000300000002;
    v657 = sub_22E3B38EC(__src, &v1472);
    v658 = 32;
    if (v657)
      v658 = 0;
  }
  else
  {
    v658 = 0;
  }
  v659 = v655[1] & 0xFFFFFFDF | v658;
  *v655 = *v655;
  *((_DWORD *)v655 + 2) = v659;
  if (sub_22E721888(v18, 0x5F0u, 0x4ABu))
  {
    if (llvm::opt::Option::matches())
      v660 = 32;
    else
      v660 = 0;
    *((_DWORD *)v655 + 2) = v655[1] & 0xFFFFFFDF | v660;
  }
  if ((*((_DWORD *)v448 + 6) & 0xFFFFFFFE) == 0x30)
  {
    __src[0] = (void *)llvm::Triple::getAIRVersion(v448);
    __src[1] = v661;
    v1472 = 0x8000000300000002;
    v662 = sub_22E3B38EC(__src, &v1472);
    v663 = 32;
    if (v662)
      v663 = 0;
  }
  else
  {
    v663 = 0;
  }
  v664 = v655[1] & 0xFFFFFFDF | v663;
  *v655 = *v655;
  *((_DWORD *)v655 + 2) = v664;
  if (sub_22E721888(v18, 0x4ABu, 0x5F0u))
  {
    v665 = llvm::opt::Option::matches();
    v666 = *v655;
    v667 = 32;
    if (v665)
      v667 = 0;
    v668 = v655[1] & 0xFFFFFFDF | v667;
  }
  else
  {
    v666 = *v655;
    v668 = *((_DWORD *)v655 + 2);
  }
  *v655 = v666;
  *((_DWORD *)v655 + 2) = v668 & 0xFFFEFFFF;
  v669 = sub_22E721714(v18, 1496);
  v670 = *((_DWORD *)v655 + 2);
  if (v669)
    v670 |= 0x10000u;
  *((_DWORD *)v655 + 2) = v670 & 0xFFFF7FFF;
  if (sub_22E721714(v18, 657))
    *((_DWORD *)v655 + 2) |= 0x8000u;
  v671 = (void **)(v106 + 928);
  if (*(char *)(v106 + 951) < 0)
  {
    sub_22E3BB2B4(&v1230, *(void **)(v106 + 928), *(_QWORD *)(v106 + 936));
    v672 = *(char *)(v106 + 951);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
    if (v672 < 0)
      operator delete(*v671);
  }
  else
  {
    v1230 = *(_OWORD *)v671;
    v1231 = *(_QWORD *)(v106 + 944);
    LODWORD(__src[0]) = 0;
    *(_DWORD *)((char *)__src + 3) = 0;
  }
  *v671 = 0;
  *(_QWORD *)(v106 + 936) = 0;
  *(_DWORD *)(v106 + 944) = __src[0];
  *(_DWORD *)(v106 + 947) = *(_DWORD *)((char *)__src + 3);
  *(_BYTE *)(v106 + 951) = 0;
  if (SHIBYTE(v1231) < 0)
    operator delete((void *)v1230);
  sub_22E6EC3DC((uint64_t)__src, 525, v18);
  if (LOBYTE(__src[3]))
  {
    if (*(char *)(v106 + 951) < 0)
    {
      sub_22E3BB2B4(&v1228, *(void **)(v106 + 928), *(_QWORD *)(v106 + 936));
    }
    else
    {
      v1228 = *(_OWORD *)v671;
      v1229 = *(_QWORD *)(v106 + 944);
    }
    v673 = SHIBYTE(__src[2]);
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_22E3BB2B4(&v1226, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v1226 = *(_OWORD *)__src;
      v1227 = __src[2];
    }
    if (SHIBYTE(v1227) < 0)
    {
      sub_22E3BB2B4(&v1472, (void *)v1226, *((unint64_t *)&v1226 + 1));
    }
    else
    {
      v1472 = v1226;
      v1473 = (int64_t)v1227;
    }
    if (*(char *)(v106 + 951) < 0)
      operator delete(*v671);
    *(_OWORD *)v671 = v1472;
    *(_QWORD *)(v106 + 944) = v1473;
    HIBYTE(v1473) = 0;
    LOBYTE(v1472) = 0;
    if (SHIBYTE(v1227) < 0)
      operator delete((void *)v1226);
    if (SHIBYTE(v1229) < 0)
    {
      operator delete((void *)v1228);
      if ((v673 & 0x80000000) == 0)
        goto LABEL_1598;
    }
    else if ((v673 & 0x80000000) == 0)
    {
      goto LABEL_1598;
    }
    operator delete(__src[0]);
  }
LABEL_1598:
  v674 = *(_QWORD *)(v447 + 116) & 0x7FFFFFFFLL | 0x80000000;
  v1225[0] = *(_QWORD *)(v447 + 108) | 0x8000000000000000;
  v1225[1] = v674;
  if ((*(_QWORD *)(v447 + 100) & 0x2000000000) != 0)
  {
    __src[1] = 0;
    __src[0] = (void *)0x8000000100000003;
    v676 = sub_22E3B38EC(v1225, __src);
    v675 = 0xFFFFFFFF7FFFFFFFLL;
    if (!v676)
      v675 = -1;
  }
  else
  {
    v675 = -1;
  }
  *(_QWORD *)v106 &= v675;
  if ((*(_BYTE *)(v106 + 33) & 0x18) != 0)
  {
    if (!sub_22E6EC688(v18, 0x325u, 0x326u, 0x449u, 0x44Cu) || llvm::opt::Option::matches())
    {
      v677 = *(_QWORD *)(v106 + 96);
      v678 = *(_WORD *)(v106 + 104) & 0xFFFC;
      goto LABEL_1612;
    }
    v680 = llvm::opt::Option::matches();
    v677 = *(_QWORD *)(v106 + 96);
    v679 = *(_WORD *)(v106 + 104) & 0xFFFC;
    if (v680)
    {
      v678 = v679 | 1;
      goto LABEL_1612;
    }
  }
  else
  {
    v677 = *(_QWORD *)(v106 + 96);
    v679 = *(_WORD *)(v106 + 104) & 0xFFFC;
  }
  v678 = v679 | 2;
LABEL_1612:
  v681 = (uint64_t *)v1208;
  *(_QWORD *)(v106 + 96) = v677;
  *(_WORD *)(v106 + 104) = v678;
  v1203 = v106 + 808;
  v1201 = (void *)(v106 + 480);
  if (sub_22E6EBFB4(v18, 610))
  {
    v682 = *v681;
    v683 = *((_DWORD *)v681 + 2);
LABEL_1614:
    v684 = 2;
    goto LABEL_1621;
  }
  if (sub_22E6EBFB4(v18, 1023))
  {
    v684 = 0;
    v682 = *v681;
    v683 = *((_DWORD *)v681 + 2);
  }
  else
  {
    v682 = *v681;
    v683 = *((_DWORD *)v681 + 2);
    if ((*(_DWORD *)(v447 + 52) & 0xCLL) == 0)
      goto LABEL_1614;
    v684 = 0;
  }
LABEL_1621:
  *v681 = v682;
  *((_DWORD *)v681 + 2) = v683 & 0xFFFFFFFD | v684;
  v685 = sub_22E6EBFB4(v18, 263);
  if (v685)
  {
    v686 = v685;
    v687 = *(const char ***)(v685 + 48);
    v688 = *v687;
    if (*v687)
    {
      switch(strlen(*v687))
      {
        case 7uLL:
          v689 = *(_DWORD *)v688 == 1768778092 && *(_DWORD *)(v688 + 3) == 1684370537;
          if (!v689)
            goto LABEL_1661;
          v690 = 0xA00000000000000;
          break;
        case 0xAuLL:
          if (*(_QWORD *)v688 != 0x6F6C61646E617473 || *((_WORD *)v688 + 4) != 25966)
            goto LABEL_1661;
          v690 = 0xC00000000000000;
          break;
        case 0xBuLL:
          if (*(_QWORD *)v688 != 0x63757274736E6F63 || *(_QWORD *)(v688 + 3) != 0x726F746375727473)
            goto LABEL_1661;
          v690 = 0x800000000000000;
          break;
        case 0xCuLL:
          if (*(_QWORD *)v688 != 0x742D646573756E75 || *((_DWORD *)v688 + 2) != 1936027769)
            goto LABEL_1661;
          v690 = 0xE00000000000000;
          break;
        case 0x10uLL:
          if (*(_QWORD *)v688 != 0x6261742D656E696CLL || *((_QWORD *)v688 + 1) != 0x796C6E6F2D73656CLL)
            goto LABEL_1661;
          v690 = 0x600000000000000;
          break;
        case 0x14uLL:
          if (*(_QWORD *)v688 != 0x7269642D656E696CLL
            || *((_QWORD *)v688 + 1) != 0x2D73657669746365
            || *((_DWORD *)v688 + 4) != 2037149295)
          {
            goto LABEL_1661;
          }
          v690 = 0x400000000000000;
          break;
        default:
          goto LABEL_1661;
      }
      *(_QWORD *)(v106 + 96) = *(_QWORD *)(v106 + 96) & 0xE1FFFFFFFFFFFFFFLL | v690;
    }
    else
    {
LABEL_1661:
      v697 = v1212;
      *(_QWORD *)(v1212 + 312) = 0x18800000000;
      if (*(char *)(v1212 + 311) < 0)
      {
        **(_BYTE **)(v697 + 288) = 0;
        *(_QWORD *)(v697 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v697 + 288) = 0;
        *(_BYTE *)(v697 + 311) = 0;
      }
      __src[0] = (void *)(v697 + 320);
      __src[1] = 0;
      __src[2] = (void *)v697;
      LOWORD(__src[3]) = 1;
      *(_BYTE *)(v697 + 320) = 0;
      *(_DWORD *)(v697 + 664) = 0;
      v698 = *(unsigned int *)(v697 + 776);
      if ((_DWORD)v698)
      {
        v699 = *(_QWORD *)(v1212 + 768);
        v700 = 56 * v698;
        do
        {
          if (*(char *)(v699 + v700 - 9) < 0)
            operator delete(*(void **)(v699 + v700 - 32));
          v700 -= 56;
        }
        while (v700);
      }
      *(_DWORD *)(v1212 + 776) = 0;
      llvm::opt::Arg::getAsString();
      if (v1473 >= 0)
        v701 = &v1472;
      else
        v701 = (__int128 *)v1472;
      if (v1473 >= 0)
        v702 = HIBYTE(v1473) & 0x7F;
      else
        v702 = *((_QWORD *)&v1472 + 1);
      sub_22E3B89A8((unsigned __int8 **)__src, v701, v702);
      v703 = **(_QWORD **)(v686 + 48);
      v704 = (unsigned __int8 *)__src[0];
      if (!__src[0])
      {
        v704 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__src[1]);
        __src[0] = v704;
      }
      v704[*v704 + 1] = 1;
      v705 = __src[0];
      v706 = *(unsigned __int8 *)__src[0];
      *(_BYTE *)__src[0] = v706 + 1;
      v705[v706 + 2] = v703;
      if (SHIBYTE(v1473) < 0)
        operator delete((void *)v1472);
      sub_22E3BB0B8((uint64_t)__src);
    }
  }
  if (sub_22E6EC70C(v18, 0x70Du, 0x55Au))
  {
    if (llvm::opt::Option::matches())
    {
      v707 = *(_QWORD *)(v106 + 96);
      if ((v707 & 0x1E00000000000000) == 0xA00000000000000)
      {
        *(_WORD *)(v106 + 104) = *(_WORD *)(v106 + 104);
        *(_QWORD *)(v106 + 96) = v707 & 0xE1FFFFFFFFFFFFFFLL | 0x800000000000000;
      }
    }
    if (llvm::opt::Option::matches())
    {
      v708 = *(_QWORD *)(v106 + 96);
      if ((v708 & 0x1E00000000000000) == 0x800000000000000)
      {
        v709 = *(_WORD *)(v106 + 104);
        *(_QWORD *)(v106 + 96) = v708 & 0xE1FFFFFFFFFFFFFFLL | 0xA00000000000000;
        *(_WORD *)(v106 + 104) = v709;
      }
    }
  }
  llvm::opt::ArgList::getAllArgValues();
  v710 = (void **)*((_QWORD *)&v1472 + 1);
  v711 = (void **)v1472;
  if ((_QWORD)v1472 != *((_QWORD *)&v1472 + 1))
  {
    v712 = v1211 + 408;
    while (1)
    {
      v713 = *((_BYTE *)v711 + 23);
      v714 = v713 < 0;
      if (v713 >= 0)
        v715 = v711;
      else
        v715 = *v711;
      __src[0] = v715;
      v716 = (void *)(v713 & 0x7F);
      if (v714)
        v716 = v711[1];
      __src[1] = v716;
      LOBYTE(v1466) = 61;
      v717 = llvm::StringRef::find();
      if (v717 == -1)
      {
        v721 = 0;
        v722 = 0;
        v718 = __src[0];
        v719 = (size_t)__src[1];
      }
      else
      {
        v718 = __src[0];
        if (__src[1] >= (void *)v717)
          v719 = v717;
        else
          v719 = (size_t)__src[1];
        if (__src[1] >= (void *)(v717 + 1))
          v720 = (void *)(v717 + 1);
        else
          v720 = __src[1];
        v721 = (char *)__src[0] + (unint64_t)v720;
        v722 = (char *)__src[1] - (char *)v720;
      }
      if (v719 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_2529;
      if (v719 >= 0x17)
        break;
      HIBYTE(v1467) = v719;
      v723 = &v1466;
      if (v719)
        goto LABEL_1712;
LABEL_1713:
      *((_BYTE *)v723 + v719) = 0;
      if (v722 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_2529;
      if (v722 >= 0x17)
      {
        v727 = (v722 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v722 | 7) != 0x17)
          v727 = v722 | 7;
        v728 = v727 + 1;
        p_dst = (__int128 *)operator new(v727 + 1);
        *((_QWORD *)&__dst + 1) = v722;
        v1218 = (void *)(v728 | 0x8000000000000000);
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v1218) = v722;
        p_dst = &__dst;
        if (!v722)
          goto LABEL_1721;
      }
      memmove(p_dst, v721, v722);
LABEL_1721:
      *((_BYTE *)p_dst + v722) = 0;
      *(_OWORD *)__src = v1466;
      __src[2] = v1467;
      *(_OWORD *)&__src[3] = __dst;
      __src[5] = v1218;
      sub_22E72549C(v712, (const void **)__src, (uint64_t)__src);
      if (SHIBYTE(__src[5]) < 0)
        operator delete(__src[3]);
      if (SHIBYTE(__src[2]) < 0)
        operator delete(__src[0]);
      v711 += 3;
      if (v711 == v710)
        goto LABEL_1726;
    }
    v724 = (v719 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v719 | 7) != 0x17)
      v724 = v719 | 7;
    v725 = v724 + 1;
    v723 = (__int128 *)operator new(v724 + 1);
    v1467 = (void *)(v725 | 0x8000000000000000);
    *(_QWORD *)&v1466 = v723;
    *((_QWORD *)&v1466 + 1) = v719;
LABEL_1712:
    memmove(v723, v718, v719);
    goto LABEL_1713;
  }
LABEL_1726:
  __src[0] = &v1472;
  sub_22E3B3CC8((void ***)__src);
  llvm::opt::ArgList::getAllArgValues();
  v729 = (void **)*((_QWORD *)&v1472 + 1);
  v730 = (void **)v1472;
  if ((_QWORD)v1472 != *((_QWORD *)&v1472 + 1))
  {
    v731 = v1211 + 432;
    while (1)
    {
      v732 = *((_BYTE *)v730 + 23);
      v733 = v732 < 0;
      if (v732 >= 0)
        v734 = v730;
      else
        v734 = *v730;
      __src[0] = v734;
      v735 = (void *)(v732 & 0x7F);
      if (v733)
        v735 = v730[1];
      __src[1] = v735;
      LOBYTE(v1466) = 61;
      v736 = llvm::StringRef::find();
      if (v736 == -1)
      {
        v740 = 0;
        v741 = 0;
        v737 = __src[0];
        v738 = (size_t)__src[1];
      }
      else
      {
        v737 = __src[0];
        if (__src[1] >= (void *)v736)
          v738 = v736;
        else
          v738 = (size_t)__src[1];
        if (__src[1] >= (void *)(v736 + 1))
          v739 = (void *)(v736 + 1);
        else
          v739 = __src[1];
        v740 = (char *)__src[0] + (unint64_t)v739;
        v741 = (char *)__src[1] - (char *)v739;
      }
      if (v738 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_2529;
      if (v738 >= 0x17)
        break;
      HIBYTE(v1467) = v738;
      v742 = &v1466;
      if (v738)
        goto LABEL_1749;
LABEL_1750:
      *((_BYTE *)v742 + v738) = 0;
      if (v741 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_2529;
      if (v741 >= 0x17)
      {
        v746 = (v741 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v741 | 7) != 0x17)
          v746 = v741 | 7;
        v747 = v746 + 1;
        v745 = (__int128 *)operator new(v746 + 1);
        *((_QWORD *)&__dst + 1) = v741;
        v1218 = (void *)(v747 | 0x8000000000000000);
        *(_QWORD *)&__dst = v745;
      }
      else
      {
        HIBYTE(v1218) = v741;
        v745 = &__dst;
        if (!v741)
          goto LABEL_1758;
      }
      memmove(v745, v740, v741);
LABEL_1758:
      *((_BYTE *)v745 + v741) = 0;
      *(_OWORD *)__src = v1466;
      __src[2] = v1467;
      *(_OWORD *)&__src[3] = __dst;
      __src[5] = v1218;
      sub_22E72549C(v731, (const void **)__src, (uint64_t)__src);
      if (SHIBYTE(__src[5]) < 0)
        operator delete(__src[3]);
      if (SHIBYTE(__src[2]) < 0)
        operator delete(__src[0]);
      v730 += 3;
      if (v730 == v729)
        goto LABEL_1763;
    }
    v743 = (v738 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v738 | 7) != 0x17)
      v743 = v738 | 7;
    v744 = v743 + 1;
    v742 = (__int128 *)operator new(v743 + 1);
    v1467 = (void *)(v744 | 0x8000000000000000);
    *(_QWORD *)&v1466 = v742;
    *((_QWORD *)&v1466 + 1) = v738;
LABEL_1749:
    memmove(v742, v737, v738);
    goto LABEL_1750;
  }
LABEL_1763:
  __src[0] = &v1472;
  sub_22E3B3CC8((void ***)__src);
  v748 = v1210;
  v749 = v1205;
  if ((*((_BYTE *)v1210 + 25) & 0x18) != 0 && (*(_QWORD *)(v1211 + 96) & 0x1800000000000000) != 0)
  {
    v750 = 0;
    while (dword_22F45DBE8[v750] != *((_DWORD *)v1204 + 6))
    {
      if (++v750 == 9)
        goto LABEL_1770;
    }
    *(_QWORD *)v1211 |= 0x400000000uLL;
  }
LABEL_1770:
  v751 = v1209;
  if ((*(_BYTE *)(v1211 + 4) & 8) == 0)
  {
    v752 = *(_BYTE *)(v1211 + 503);
    v753 = v752;
    v754 = v752 & 0x7F;
    if (v753 < 0)
      v754 = *(_QWORD *)(v1211 + 488);
    if (v754)
    {
      v755 = v1212;
      *(_QWORD *)(v1212 + 312) = 0x23000000000;
      if (*(char *)(v1212 + 311) < 0)
      {
        **(_BYTE **)(v755 + 288) = 0;
        *(_QWORD *)(v755 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v755 + 288) = 0;
        *(_BYTE *)(v755 + 311) = 0;
      }
      __src[0] = (void *)(v755 + 320);
      __src[1] = 0;
      __src[2] = (void *)v755;
      LOWORD(__src[3]) = 1;
      *(_BYTE *)(v755 + 320) = 0;
      *(_DWORD *)(v755 + 664) = 0;
      v756 = *(unsigned int *)(v755 + 776);
      if ((_DWORD)v756)
      {
        v757 = *(_QWORD *)(v1212 + 768);
        v758 = 56 * v756;
        do
        {
          if (*(char *)(v757 + v758 - 9) < 0)
            operator delete(*(void **)(v757 + v758 - 32));
          v758 -= 56;
        }
        while (v758);
      }
      *(_DWORD *)(v1212 + 776) = 0;
      v759 = *(_BYTE *)(v1211 + 503);
      v760 = v759 < 0;
      if (v759 >= 0)
        v761 = v1201;
      else
        v761 = *(void **)(v1211 + 480);
      v762 = v759 & 0x7F;
      if (v760)
        v763 = *(_QWORD *)(v1211 + 488);
      else
        v763 = v762;
      sub_22E3B89A8((unsigned __int8 **)__src, v761, v763);
      sub_22E3BB0B8((uint64_t)__src);
      MEMORY[0x2348A0C14](v1201, "");
    }
  }
  if (sub_22E6EBFB4(v751, 2730))
    v764 = 0;
  else
    v764 = (unint64_t)(sub_22E6EBFB4(v751, 2701) != 0) << 21;
  v765 = v748[3] & 0xFFFFFFFFFFDFFFFFLL | v764;
  v766 = v748[2];
  v767 = v748[1];
  *v748 = *v748;
  v748[1] = v767;
  v748[2] = v766;
  v748[3] = v765;
  v768 = v748[3] & 0xFFFFFFFFFFFF9FFFLL | ((unint64_t)sub_22E6EC790(v751) << 13);
  v748[3] = v768;
  v769 = (v768 & 0xFFDFFFFFFFFFFFFFLL | ((*(_QWORD *)(v749 + 8) & 0x80000000000000uLL) >> 2)) ^ 0x20000000000000;
  v748[3] = v769;
  if ((v769 & 0x20000000000000) != 0 && v1211 + 1296 != v749 + 576)
    sub_22E63B120(v1211 + 1296, *(std::string **)(v749 + 576), *(std::string **)(v749 + 584), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v749 + 584) - *(_QWORD *)(v749 + 576)) >> 3));
  hasFlag = llvm::opt::ArgList::hasFlag();
  v771 = v1211;
  v772 = 0x100000000;
  if (!hasFlag)
    v772 = 0;
  *(_QWORD *)(v1211 + 40) = *(_QWORD *)(v1211 + 40) & 0xFFFFFFFEFFFFFFFFLL | v772;
  LastArgValue = llvm::opt::ArgList::getLastArgValue();
  if (v774 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_2529;
  v775 = (const void *)LastArgValue;
  v776 = (void *)v774;
  if (v774 >= 0x17)
  {
    v778 = (v774 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v774 | 7) != 0x17)
      v778 = v774 | 7;
    v779 = v778 + 1;
    v777 = operator new(v778 + 1);
    __src[2] = (void *)(v779 | 0x8000000000000000);
    __src[0] = v777;
    __src[1] = v776;
    goto LABEL_1804;
  }
  HIBYTE(__src[2]) = v774;
  v777 = __src;
  if (v774)
LABEL_1804:
    memmove(v777, v775, (size_t)v776);
  v780 = v1208;
  *((_BYTE *)v776 + (_QWORD)v777) = 0;
  v781 = (void **)(v771 + 136);
  if (*(char *)(v771 + 159) < 0)
    operator delete(*v781);
  *(_OWORD *)v781 = *(_OWORD *)__src;
  *(void **)(v771 + 152) = __src[2];
  if (sub_22E6EBFB4(v751, 1902))
    v782 = 1;
  else
    v782 = 2 * (sub_22E6EBFB4(v751, 1932) == 0);
  v780[2] = v780[2] & 0xFFFFFF3F | ((v782 & 3) << 6);
  v783 = sub_22E6EBFB4(v751, 1942);
  if (v783)
  {
    v784 = (_QWORD **)v783;
    v785 = *(const char ***)(v783 + 48);
    v786 = *v785;
    if (!*v785)
      goto LABEL_1820;
    v787 = strlen(*v785);
    if (v787 == 7)
    {
      v788 = *(_DWORD *)(v786 + 3);
      v789 = *(_DWORD *)v786 == 1735287149;
      v790 = 1684368487;
    }
    else
    {
      if (v787 != 6)
        goto LABEL_1820;
      v788 = *((unsigned __int16 *)v786 + 2);
      v789 = *(_DWORD *)v786 == 1886218611;
      v790 = 25964;
    }
    if (v789 && v788 == v790)
    {
LABEL_1834:
      if (strlen(v786) == 6)
      {
        v802 = 1936289136;
        v803 = bswap32(*(_DWORD *)v786);
        if (v803 == 1936289136 && (v803 = bswap32(*((unsigned __int16 *)v786 + 2)) >> 16, v802 = 27749, v803 == 27749))
        {
          v804 = 0;
        }
        else if (v803 < v802)
        {
          v804 = -1;
        }
        else
        {
          v804 = 1;
        }
        v689 = v804 == 0;
        v805 = 0x100000000000000;
        if (v689)
          v805 = 0x80000000000000;
        goto LABEL_1844;
      }
LABEL_1838:
      v805 = 0x100000000000000;
LABEL_1844:
      v806 = *(_WORD *)(v771 + 104);
      *(_QWORD *)(v771 + 96) = *(_QWORD *)(v771 + 96) & 0xFE7FFFFFFFFFFFFFLL | v805;
      *(_WORD *)(v771 + 104) = v806;
      goto LABEL_1845;
    }
LABEL_1820:
    v792 = v1212;
    *(_QWORD *)(v1212 + 312) = 0x1D000000000;
    if (*(char *)(v1212 + 311) < 0)
    {
      **(_BYTE **)(v792 + 288) = 0;
      *(_QWORD *)(v792 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v792 + 288) = 0;
      *(_BYTE *)(v792 + 311) = 0;
    }
    __src[0] = (void *)(v792 + 320);
    __src[1] = 0;
    __src[2] = (void *)v792;
    LOWORD(__src[3]) = 1;
    *(_BYTE *)(v792 + 320) = 0;
    *(_DWORD *)(v792 + 664) = 0;
    v793 = *(unsigned int *)(v792 + 776);
    if ((_DWORD)v793)
    {
      v794 = *(_QWORD *)(v1212 + 768);
      v795 = 56 * v793;
      do
      {
        if (*(char *)(v794 + v795 - 9) < 0)
          operator delete(*(void **)(v794 + v795 - 32));
        v795 -= 56;
      }
      while (v795);
    }
    *(_DWORD *)(v1212 + 776) = 0;
    v796 = (void *)(*v784)[1];
    if (v796)
      v797 = strlen((const char *)(*v784)[1]);
    else
      v797 = 0;
    sub_22E3B89A8((unsigned __int8 **)__src, v796, v797);
    v798 = *v784[6];
    v799 = (unsigned __int8 *)__src[0];
    if (!__src[0])
    {
      v799 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__src[1]);
      __src[0] = v799;
    }
    v799[*v799 + 1] = 1;
    v800 = __src[0];
    v801 = *(unsigned __int8 *)__src[0];
    *(_BYTE *)__src[0] = v801 + 1;
    v800[v801 + 2] = v798;
    sub_22E3BB0B8((uint64_t)__src);
    v786 = (const char *)*v784[6];
    v780 = v1208;
    if (!v786)
      goto LABEL_1838;
    goto LABEL_1834;
  }
LABEL_1845:
  v807 = *(_BYTE *)(v771 + 831);
  v808 = v807;
  v809 = v807 & 0x7F;
  if (v808 < 0)
    v809 = *(_QWORD *)(v771 + 816);
  if (v809)
  {
    v1224 = 0uLL;
    sub_22E6EC7E4((uint64_t)v1206, a9, a10, v1212, &v1224, &v1215);
    v810 = (std::__shared_weak_count *)*((_QWORD *)&v1224 + 1);
    if (*((_QWORD *)&v1224 + 1))
    {
      v811 = (unint64_t *)(*((_QWORD *)&v1224 + 1) + 8);
      do
        v812 = __ldaxr(v811);
      while (__stlxr(v812 - 1, v811));
      if (!v812)
      {
        ((void (*)(std::__shared_weak_count *))v810->__on_zero_shared)(v810);
        std::__shared_weak_count::__release_weak(v810);
      }
    }
    v1475 = 260;
    *(_QWORD *)&v1472 = v1203;
    LOWORD(__src[4]) = 257;
    llvm::IndexedInstrProfReader::create();
    v813 = v1466;
    *(_QWORD *)&v1466 = 0;
    if ((BYTE8(v1466) & 1) != 0)
    {
      *(_QWORD *)&__dst = v813;
      sub_22E6C5940((char **)&__dst, (char **)__src);
      v780 = v1208;
      if ((_QWORD)__dst)
        (*(void (**)(_QWORD))(*(_QWORD *)__dst + 8))(__dst);
      *(_QWORD *)(v771 + 96) = *(_QWORD *)(v771 + 96) & 0xFFFF9FFFFFFFFFFFLL | 0x200000000000;
    }
    else
    {
      v814 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v813 + 40))(v813);
      v780 = v1208;
      if (v814)
      {
        v815 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v813 + 48))(v813);
        v816 = *(_QWORD *)(v771 + 96);
        v817 = *(_WORD *)(v771 + 104);
        v818 = v816 & 0xFFFF9FFFFFFFFFFFLL | 0x400000000000;
        v819 = v816 | 0x600000000000;
        if (!v815)
          v819 = v818;
      }
      else
      {
        v817 = *(_WORD *)(v771 + 104);
        v819 = *(_QWORD *)(v771 + 96) & 0xFFFF9FFFFFFFFFFFLL | 0x200000000000;
      }
      *(_QWORD *)(v771 + 96) = v819;
      *(_WORD *)(v771 + 104) = v817;
      (*(void (**)(uint64_t))(*(_QWORD *)v813 + 8))(v813);
    }
    v820 = v1466;
    *(_QWORD *)&v1466 = 0;
    if (v820)
      (*(void (**)(uint64_t))(*(_QWORD *)v820 + 8))(v820);
    v821 = v1215;
    if (v1215)
    {
      v822 = (unsigned int *)(v1215 + 8);
      do
      {
        v823 = __ldaxr(v822);
        v824 = v823 - 1;
      }
      while (__stlxr(v824, v822));
      if (!v824)
        (*(void (**)(unsigned __int8 *))(*(_QWORD *)v821 + 8))(v821);
    }
  }
  v825 = (_QWORD *)sub_22E6EC70C(v751, 0x6DBu, 0x6DAu);
  if (v825)
  {
    v826 = v825;
    v828 = *v748;
    v827 = v748[1];
    v829 = v748[2];
    v830 = v748[3];
    v748[3] = v830 | 0x800000000000000;
    if (*(_DWORD *)(*v825 + 32) == 1754)
    {
      v831 = (const char **)v825[6];
      v832 = *v831;
      if (*v831)
      {
        v833 = strlen(*v831);
        if (v833 == 12)
        {
          if (*(_QWORD *)v832 == 0x737361702D726570 && *((_DWORD *)v832 + 2) == 1853190701)
          {
            v834 = v830 | 0x1800000000000000;
            goto LABEL_2492;
          }
        }
        else if (v833 == 8 && *(_QWORD *)v832 == 0x737361702D726570)
        {
          v834 = v830 & 0xE7FFFFFFFFFFFFFFLL | 0x800000000000000;
LABEL_2492:
          *v748 = v828;
          v748[1] = v827;
          v748[2] = v829;
          v748[3] = v834;
LABEL_1900:
          v780 = v1208;
          goto LABEL_1901;
        }
      }
      v836 = v1212;
      *(_QWORD *)(v1212 + 312) = 0x18800000000;
      if (*(char *)(v1212 + 311) < 0)
      {
        **(_BYTE **)(v836 + 288) = 0;
        *(_QWORD *)(v836 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v836 + 288) = 0;
        *(_BYTE *)(v836 + 311) = 0;
      }
      __src[0] = (void *)(v836 + 320);
      __src[1] = 0;
      __src[2] = (void *)v836;
      LOWORD(__src[3]) = 1;
      *(_BYTE *)(v836 + 320) = 0;
      *(_DWORD *)(v836 + 664) = 0;
      v837 = *(unsigned int *)(v836 + 776);
      if ((_DWORD)v837)
      {
        v838 = *(_QWORD *)(v1212 + 768);
        v839 = 56 * v837;
        do
        {
          if (*(char *)(v838 + v839 - 9) < 0)
            operator delete(*(void **)(v838 + v839 - 32));
          v839 -= 56;
        }
        while (v839);
      }
      *(_DWORD *)(v1212 + 776) = 0;
      llvm::opt::Arg::getAsString();
      if (v1473 >= 0)
        v840 = &v1472;
      else
        v840 = (__int128 *)v1472;
      if (v1473 >= 0)
        v841 = HIBYTE(v1473) & 0x7F;
      else
        v841 = *((_QWORD *)&v1472 + 1);
      sub_22E3B89A8((unsigned __int8 **)__src, v840, v841);
      v842 = *(_QWORD *)v826[6];
      v843 = (unsigned __int8 *)__src[0];
      if (!__src[0])
      {
        v843 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__src[1]);
        __src[0] = v843;
      }
      v843[*v843 + 1] = 1;
      v844 = __src[0];
      v845 = *(unsigned __int8 *)__src[0];
      *(_BYTE *)__src[0] = v845 + 1;
      v844[v845 + 2] = v842;
      if (SHIBYTE(v1473) < 0)
        operator delete((void *)v1472);
      sub_22E3BB0B8((uint64_t)__src);
      goto LABEL_1900;
    }
  }
LABEL_1901:
  if ((v780[2] & 0x200000) != 0)
  {
    llvm::opt::ArgList::getAllArgValues();
    v847 = (__int128 *)*((_QWORD *)&v1472 + 1);
    v846 = (__int128 *)v1472;
    if ((_QWORD)v1472 != *((_QWORD *)&v1472 + 1))
    {
      v848 = (_QWORD **)(v1211 + 1448);
      do
      {
        v849 = (v780[2] & 0x400000) == 0;
        if (*((char *)v846 + 23) < 0)
        {
          sub_22E3BB2B4(__src, *(void **)v846, *((_QWORD *)v846 + 1));
        }
        else
        {
          v850 = *v846;
          __src[2] = *((void **)v846 + 2);
          *(_OWORD *)__src = v850;
        }
        LOBYTE(__src[3]) = v849;
        v851 = (uint64_t **)sub_22E5EFEFC((uint64_t)v848, &v1466, (const void **)__src);
        if (!*v851)
        {
          v852 = v851;
          v853 = (void **)operator new(0x40uLL);
          *((_OWORD *)v853 + 2) = *(_OWORD *)__src;
          v853[6] = __src[2];
          memset(__src, 0, 24);
          *((_BYTE *)v853 + 56) = __src[3];
          v854 = (void *)v1466;
          *v853 = 0;
          v853[1] = 0;
          v853[2] = v854;
          *v852 = (uint64_t *)v853;
          v855 = (_QWORD *)**v848;
          if (v855)
          {
            *v848 = v855;
            v856 = *v852;
          }
          else
          {
            v856 = (uint64_t *)v853;
          }
          v857 = v1211;
          sub_22E49FD00(*(uint64_t **)(v1211 + 1456), v856);
          ++*(_QWORD *)(v857 + 1464);
        }
        if (SHIBYTE(__src[2]) < 0)
          operator delete(__src[0]);
        v846 = (__int128 *)((char *)v846 + 24);
        v780 = v1208;
      }
      while (v846 != v847);
    }
    __src[0] = &v1472;
    sub_22E3B3CC8((void ***)__src);
  }
  v748[2] &= 0xFFFFFCFFFFFFFFFFLL;
  v858 = v1209;
  v859 = sub_22E6EBFB4(v1209, 846);
  if (v859)
  {
    v861 = *v748;
    v860 = v748[1];
    v863 = v748[2];
    v862 = v748[3];
    v748[2] = v863 | 0x10000000000;
    v864 = *(const char ***)(v859 + 48);
    v865 = (char *)*v864;
    if (*v864)
    {
      v866 = strlen(*v864);
      if (v866 == 4)
      {
        if (*(_DWORD *)v865 == 1852401780)
        {
          *v748 = v861;
          v748[1] = v860;
          v748[2] = v863 | 0x30000000000;
          v748[3] = v862;
          v858 = v1209;
          goto LABEL_1940;
        }
        v858 = v1209;
        if (*(_DWORD *)v865 == 1819047270)
          goto LABEL_1940;
        v866 = 4;
      }
    }
    else
    {
      v866 = 0;
    }
    v867 = v1212;
    *(_QWORD *)(v1212 + 312) = 0x18800000000;
    if (*(char *)(v1212 + 311) < 0)
    {
      **(_BYTE **)(v867 + 288) = 0;
      *(_QWORD *)(v867 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v867 + 288) = 0;
      *(_BYTE *)(v867 + 311) = 0;
    }
    v868 = v1209;
    __src[0] = (void *)(v867 + 320);
    __src[1] = 0;
    __src[2] = (void *)v867;
    LOWORD(__src[3]) = 1;
    *(_BYTE *)(v867 + 320) = 0;
    *(_DWORD *)(v867 + 664) = 0;
    v869 = *(unsigned int *)(v867 + 776);
    if ((_DWORD)v869)
    {
      v870 = *(_QWORD *)(v1212 + 768);
      v871 = 56 * v869;
      do
      {
        if (*(char *)(v870 + v871 - 9) < 0)
          operator delete(*(void **)(v870 + v871 - 32));
        v871 -= 56;
      }
      while (v871);
    }
    *(_DWORD *)(v1212 + 776) = 0;
    v858 = v868;
    llvm::opt::Arg::getAsString();
    if (v1473 >= 0)
      v872 = &v1472;
    else
      v872 = (__int128 *)v1472;
    if (v1473 >= 0)
      v873 = HIBYTE(v1473) & 0x7F;
    else
      v873 = *((_QWORD *)&v1472 + 1);
    sub_22E3B89A8((unsigned __int8 **)__src, v872, v873);
    sub_22E3B89A8((unsigned __int8 **)__src, v865, v866);
    if (SHIBYTE(v1473) < 0)
      operator delete((void *)v1472);
    sub_22E3BB0B8((uint64_t)__src);
  }
LABEL_1940:
  v874 = v1207;
  v875 = sub_22E6EBFB4(v858, 1751);
  v876 = v1211;
  if (!v875)
    goto LABEL_1972;
  if (v874 != 2)
  {
    v877 = v1212;
    *(_QWORD *)(v1212 + 312) = 0x14600000000;
    if (*(char *)(v1212 + 311) < 0)
    {
      **(_BYTE **)(v877 + 288) = 0;
      *(_QWORD *)(v877 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v877 + 288) = 0;
      *(_BYTE *)(v877 + 311) = 0;
    }
    __src[0] = (void *)(v877 + 320);
    __src[1] = 0;
    __src[2] = (void *)v877;
    LOWORD(__src[3]) = 1;
    *(_BYTE *)(v877 + 320) = 0;
    *(_DWORD *)(v877 + 664) = 0;
    v878 = *(unsigned int *)(v877 + 776);
    if ((_DWORD)v878)
    {
      v879 = *(_QWORD *)(v1212 + 768);
      v880 = 56 * v878;
      do
      {
        if (*(char *)(v879 + v880 - 9) < 0)
          operator delete(*(void **)(v879 + v880 - 32));
        v880 -= 56;
      }
      while (v880);
    }
    *(_DWORD *)(v1212 + 776) = 0;
    llvm::opt::Arg::getAsString();
    if (v1473 >= 0)
      v881 = &v1472;
    else
      v881 = (__int128 *)v1472;
    if (v1473 >= 0)
      v882 = HIBYTE(v1473) & 0x7F;
    else
      v882 = *((_QWORD *)&v1472 + 1);
    sub_22E3B89A8((unsigned __int8 **)__src, v881, v882);
    v883 = (unsigned __int8 *)__src[0];
    if (!__src[0])
    {
      v883 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__src[1]);
      __src[0] = v883;
    }
    v883[*v883 + 1] = 1;
    v884 = __src[0];
    v885 = *(unsigned __int8 *)__src[0];
    *(_BYTE *)__src[0] = v885 + 1;
    v884[v885 + 2] = "-x ir";
    if (SHIBYTE(v1473) < 0)
      operator delete((void *)v1472);
    sub_22E3BB0B8((uint64_t)__src);
  }
  v886 = llvm::opt::ArgList::getLastArgValue();
  if (v887 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_2529;
  v888 = (const void *)v886;
  v889 = (void *)v887;
  if (v887 >= 0x17)
  {
    v891 = (v887 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v887 | 7) != 0x17)
      v891 = v887 | 7;
    v892 = v891 + 1;
    v890 = operator new(v891 + 1);
    __src[2] = (void *)(v892 | 0x8000000000000000);
    __src[0] = v890;
    __src[1] = v889;
  }
  else
  {
    HIBYTE(__src[2]) = v887;
    v890 = __src;
    if (!v887)
      goto LABEL_1969;
  }
  memmove(v890, v888, (size_t)v889);
LABEL_1969:
  *((_BYTE *)v889 + (_QWORD)v890) = 0;
  v893 = (void **)(v876 + 856);
  if (*(char *)(v876 + 879) < 0)
    operator delete(*v893);
  *(_OWORD *)v893 = *(_OWORD *)__src;
  *(void **)(v876 + 872) = __src[2];
LABEL_1972:
  v894 = sub_22E6EBFB4(v858, 2933);
  if (!v894)
    goto LABEL_2002;
  v895 = *(const char ***)(v894 + 48);
  v896 = *v895;
  if (*v895)
    v897 = (void *)strlen(*v895);
  else
    v897 = 0;
  __src[0] = (void *)v896;
  __src[1] = v897;
  memset(&__src[2], 0, 32);
  if (*((char *)v1202 + 23) < 0)
  {
    sub_22E3BB2B4(&v1222, *v1202, (unint64_t)v1202[1]);
  }
  else
  {
    v1222 = *(_OWORD *)v1202;
    v1223 = v1202[2];
  }
  v898 = sub_22E6ECF40((uint64_t)__src, "obj", 3, &v1222);
  v899 = llvm::sys::path::filename();
  if (v899)
  {
    v901 = v900;
    if (v900 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_2529;
    v902 = (const void *)v899;
    if (v900 >= 0x17)
    {
      v904 = (v900 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v900 | 7) != 0x17)
        v904 = v900 | 7;
      v905 = v904 + 1;
      v903 = operator new(v904 + 1);
      *(_QWORD *)&v1221 = v901;
      *((_QWORD *)&v1221 + 1) = v905 | 0x8000000000000000;
      v1220 = v903;
    }
    else
    {
      HIBYTE(v1221) = v900;
      v903 = &v1220;
      if (!v900)
        goto LABEL_1989;
    }
    memmove(v903, v902, v901);
LABEL_1989:
    *((_BYTE *)v903 + v901) = 0;
    goto LABEL_1990;
  }
  v1220 = 0;
  v1221 = 0uLL;
LABEL_1990:
  if (*(_BYTE *)(v898 + 40))
  {
    v907 = *(void **)(v898 + 16);
    v906 = *(_QWORD *)(v898 + 24);
    v908 = (void **)(v898 + 16);
    *(_QWORD *)&v1472 = v906;
    *(_QWORD *)((char *)&v1472 + 7) = *(void **)((char *)v908 + 15);
  }
  else
  {
    v907 = v1220;
    *(_QWORD *)&v1472 = v1221;
    *(_QWORD *)((char *)&v1472 + 7) = *(_QWORD *)((char *)&v1221 + 7);
    v908 = &v1220;
  }
  v909 = *((_BYTE *)v908 + 23);
  *v908 = 0;
  v908[1] = 0;
  v908[2] = 0;
  if (*(char *)(v876 + 927) < 0)
    operator delete(*(void **)(v876 + 904));
  *(_QWORD *)(v876 + 904) = v907;
  *(_QWORD *)(v876 + 912) = v1472;
  *(_QWORD *)(v876 + 919) = *(_QWORD *)((char *)&v1472 + 7);
  *(_BYTE *)(v876 + 927) = v909;
  if (SHIBYTE(v1221) < 0)
    operator delete(v1220);
  if (SHIBYTE(v1223) < 0)
    operator delete((void *)v1222);
  if (LOBYTE(__src[5]) && SHIBYTE(__src[4]) < 0)
    operator delete(__src[2]);
LABEL_2002:
  if (sub_22E6EBFB4(v858, 860))
  {
    v910 = llvm::opt::ArgList::getLastArgValue();
    if (v911 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_2529;
    v912 = (const void *)v910;
    v913 = v911;
    if (v911 >= 0x17)
    {
      v915 = (v911 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v911 | 7) != 0x17)
        v915 = v911 | 7;
      v916 = v915 + 1;
      v914 = (__int128 *)operator new(v915 + 1);
      *((_QWORD *)&v1472 + 1) = v913;
      v1473 = v916 | 0x8000000000000000;
      *(_QWORD *)&v1472 = v914;
    }
    else
    {
      HIBYTE(v1473) = v911;
      v914 = &v1472;
      if (!v911)
      {
LABEL_2013:
        *((_BYTE *)v914 + v913) = 0;
        v917 = SHIBYTE(v1473);
        v918 = (void *)v1472;
        if (v1473 >= 0)
          v919 = &v1472;
        else
          v919 = (__int128 *)v1472;
        if (v1473 >= 0)
          v920 = HIBYTE(v1473) & 0x7F;
        else
          v920 = *((_QWORD *)&v1472 + 1);
        __src[0] = &__src[3];
        *(_OWORD *)&__src[1] = xmmword_22F44E310;
        if (v920 >= 0x81)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v921 = (char *)__src[1];
          v923 = (void **)__src[0];
        }
        else
        {
          v921 = 0;
          v922 = 0;
          v923 = &__src[3];
          if (!v920)
            goto LABEL_2022;
        }
        memcpy(&v921[(_QWORD)v923], v919, v920);
        v922 = (char *)__src[1];
LABEL_2022:
        __src[1] = &v922[v920];
        if (v917 < 0)
          operator delete(v918);
        *(_QWORD *)&v1472 = "memprof.profraw";
        v1475 = 259;
        v1468 = 257;
        v1219 = 257;
        v1216 = 257;
        llvm::sys::path::append();
        v924 = __src[1];
        if (__src[1] <= (void *)0x7FFFFFFFFFFFFFF7)
        {
          v925 = __src[0];
          if (__src[1] >= (void *)0x17)
          {
            v927 = ((unint64_t)__src[1] & 0xFFFFFFFFFFFFFFF8) + 8;
            if (((unint64_t)__src[1] | 7) != 0x17)
              v927 = (unint64_t)__src[1] | 7;
            v928 = v927 + 1;
            v926 = (__int128 *)operator new(v927 + 1);
            *((_QWORD *)&v1472 + 1) = v924;
            v1473 = v928 | 0x8000000000000000;
            *(_QWORD *)&v1472 = v926;
          }
          else
          {
            HIBYTE(v1473) = __src[1];
            v926 = &v1472;
            if (!__src[1])
              goto LABEL_2032;
          }
          memmove(v926, v925, (size_t)v924);
LABEL_2032:
          v924[(_QWORD)v926] = 0;
          v929 = (void **)(v876 + 784);
          if (*(char *)(v876 + 807) < 0)
            operator delete(*v929);
          *(_OWORD *)v929 = v1472;
          *(_QWORD *)(v876 + 800) = v1473;
          if (__src[0] != &__src[3])
            free(__src[0]);
          goto LABEL_2036;
        }
LABEL_2529:
        abort();
      }
    }
    memmove(v914, v912, v913);
    goto LABEL_2013;
  }
  if (sub_22E6EBFB4(v858, 861))
    MEMORY[0x2348A0C14](v876 + 784, "memprof.profraw");
LABEL_2036:
  *(_DWORD *)(v876 + 280) = 708325428;
  if ((*(_BYTE *)(v876 + 5) & 0x18) != 0 && sub_22E6EBFB4(v858, 232))
  {
    v930 = (_DWORD *)llvm::opt::ArgList::getLastArgValue();
    v932 = v930;
    if (v931 == 4)
    {
      *(_DWORD *)(v876 + 280) = *v930;
    }
    else
    {
      v933 = v931;
      v934 = v1212;
      *(_QWORD *)(v1212 + 312) = 0x18800000000;
      if (*(char *)(v1212 + 311) < 0)
      {
        **(_BYTE **)(v934 + 288) = 0;
        *(_QWORD *)(v934 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v934 + 288) = 0;
        *(_BYTE *)(v934 + 311) = 0;
      }
      __src[0] = (void *)(v934 + 320);
      __src[1] = 0;
      __src[2] = (void *)v934;
      LOWORD(__src[3]) = 1;
      *(_BYTE *)(v934 + 320) = 0;
      *(_DWORD *)(v934 + 664) = 0;
      v935 = *(unsigned int *)(v934 + 776);
      if ((_DWORD)v935)
      {
        v936 = *(_QWORD *)(v1212 + 768);
        v937 = 56 * v935;
        do
        {
          if (*(char *)(v936 + v937 - 9) < 0)
            operator delete(*(void **)(v936 + v937 - 32));
          v937 -= 56;
        }
        while (v937);
      }
      *(_DWORD *)(v1212 + 776) = 0;
      sub_22E6EBFB4(v858, 232);
      llvm::opt::Arg::getAsString();
      if (v1473 >= 0)
        v938 = &v1472;
      else
        v938 = (__int128 *)v1472;
      if (v1473 >= 0)
        v939 = HIBYTE(v1473) & 0x7F;
      else
        v939 = *((_QWORD *)&v1472 + 1);
      sub_22E3B89A8((unsigned __int8 **)__src, v938, v939);
      sub_22E3B89A8((unsigned __int8 **)__src, v932, v933);
      if (SHIBYTE(v1473) < 0)
        operator delete((void *)v1472);
      sub_22E3BB0B8((uint64_t)__src);
    }
  }
  LODWORD(v1203) = v874;
  v940 = *(unsigned int *)(v858 + 16);
  if ((_DWORD)v940)
  {
    v941 = 8 * v940;
    v942 = *(uint64_t **)(v858 + 8);
    while (!*v942)
    {
      ++v942;
      v941 -= 8;
      if (!v941)
        goto LABEL_2123;
    }
  }
  else
  {
    v942 = *(uint64_t **)(v858 + 8);
  }
  v943 = *(_QWORD *)(v858 + 8) + 8 * v940;
  if (v942 != (uint64_t *)v943)
  {
    v944 = &__src[2];
    v945 = *v942;
    while (1)
    {
      v946 = *(_DWORD *)(*(_QWORD *)v945 + 32);
      if (v946 > 2822)
      {
        if (v946 == 3150 || v946 == 2823)
          goto LABEL_2119;
      }
      else if ((v946 - 634) < 2 || v946 == 61)
      {
        goto LABEL_2119;
      }
      if ((llvm::opt::Option::matches() & 1) == 0)
      {
        v1202 = v944;
        __src[0] = v944;
        __src[1] = (void *)0x1000000000;
        llvm::opt::Arg::render();
        v947 = (const char **)__src[0];
        v1207 = (const char **)((char *)__src[0] + 8 * LODWORD(__src[1]));
        if (LODWORD(__src[1]))
        {
          do
          {
            v948 = *v947;
            if (*v947)
            {
              v949 = strlen(*v947);
              if (v949 >= 1)
              {
                v950 = v949;
                v951 = *(char **)(v876 + 1280);
                v952 = *(_QWORD *)(v876 + 1288);
                if (v952 - (uint64_t)v951 >= v949)
                {
                  v959 = *(_BYTE **)(v876 + 1280);
                  v960 = v949;
                  v961 = *v947;
                  v962 = v959;
                  do
                  {
                    v963 = *v961++;
                    *v962++ = v963;
                    ++v959;
                    --v960;
                  }
                  while (v960);
                  *(_QWORD *)(v876 + 1280) = v962;
                }
                else
                {
                  v953 = *(char **)(v876 + 1272);
                  v954 = (char *)(v951 - v953);
                  v955 = v951 - v953 + v949;
                  if (v955 < 0)
                    goto LABEL_2529;
                  v956 = v952 - (_QWORD)v953;
                  if (2 * v956 > v955)
                    v955 = 2 * v956;
                  if (v956 >= 0x3FFFFFFFFFFFFFFFLL)
                    v957 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v957 = v955;
                  v1206 = (void **)v957;
                  if (v957)
                    v958 = (char *)operator new(v957);
                  else
                    v958 = 0;
                  v964 = &v954[(_QWORD)v958];
                  memcpy(&v954[(_QWORD)v958], v948, v950);
                  if (v953 == v951)
                  {
                    v965 = v951;
                    v966 = &v954[(_QWORD)v958];
                    v876 = v1211;
                  }
                  else
                  {
                    do
                    {
                      v954[(_QWORD)v958 - 1] = v954[(_QWORD)(v953 - 1)];
                      --v954;
                    }
                    while (v954);
                    v876 = v1211;
                    v965 = *(char **)(v1211 + 1280);
                    v966 = v958;
                  }
                  v967 = &v964[v950];
                  v968 = v965 - v951;
                  if (v965 != v951)
                    memmove(v967, v951, v965 - v951);
                  v969 = *(void **)(v876 + 1272);
                  *(_QWORD *)(v876 + 1272) = v966;
                  *(_QWORD *)(v876 + 1280) = &v967[v968];
                  *(_QWORD *)(v876 + 1288) = (char *)v1206 + (_QWORD)v958;
                  if (v969)
                    operator delete(v969);
                }
              }
            }
            v970 = *(_BYTE **)(v876 + 1280);
            v971 = *(_QWORD *)(v876 + 1288);
            if ((unint64_t)v970 >= v971)
            {
              v973 = *(_QWORD *)(v876 + 1272);
              v974 = &v970[-v973];
              v975 = (uint64_t)&v970[-v973 + 1];
              if (v975 < 0)
                goto LABEL_2529;
              v976 = v971 - v973;
              if (2 * v976 > v975)
                v975 = 2 * v976;
              if (v976 >= 0x3FFFFFFFFFFFFFFFLL)
                v977 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v977 = v975;
              if (v977)
                v978 = (char *)operator new(v977);
              else
                v978 = 0;
              v979 = &v974[(_QWORD)v978];
              v980 = &v974[(_QWORD)v978];
              *v980 = 0;
              v972 = v980 + 1;
              if (v970 == (_BYTE *)v973)
              {
                v876 = v1211;
              }
              else
              {
                v981 = &v970[~v973];
                do
                {
                  v982 = *--v970;
                  (v981--)[(_QWORD)v978] = v982;
                }
                while (v970 != (_BYTE *)v973);
                v876 = v1211;
                v970 = *(_BYTE **)(v1211 + 1272);
                v979 = v978;
              }
              *(_QWORD *)(v876 + 1272) = v979;
              *(_QWORD *)(v876 + 1280) = v972;
              *(_QWORD *)(v876 + 1288) = &v978[v977];
              if (v970)
                operator delete(v970);
            }
            else
            {
              *v970 = 0;
              v972 = v970 + 1;
            }
            *(_QWORD *)(v876 + 1280) = v972;
            ++v947;
          }
          while (v947 != v1207);
          v947 = (const char **)__src[0];
        }
        v944 = v1202;
        if (v947 != (const char **)v1202)
          free(v947);
      }
LABEL_2119:
      v983 = v942 + 1;
      do
      {
        if (v983 == (uint64_t *)v943)
          goto LABEL_2123;
        v984 = *v983++;
        v945 = v984;
      }
      while (!v984);
      v942 = v983 - 1;
    }
  }
LABEL_2123:
  *(_QWORD *)v876 = *(_QWORD *)v876 & 0xFFFFFF7FFFFFFFFFLL | (((*(_QWORD *)(v1205 + 8) >> 57) & 1) << 39);
  v985 = v1209;
  llvm::opt::ArgList::getAllArgValues();
  v1207 = (const char **)*((_QWORD *)&__dst + 1);
  v986 = (void **)__dst;
  if ((_QWORD)__dst == *((_QWORD *)&__dst + 1))
  {
    *(_DWORD *)(v876 + 1440) = 15;
    v1003 = v1210;
  }
  else
  {
    v987 = &__src[2];
    v988 = v1212 + 320;
    v1206 = &__src[2];
    do
    {
      v989 = *((_BYTE *)v986 + 23);
      v990 = v989 < 0;
      if (v989 >= 0)
        v991 = v986;
      else
        v991 = *v986;
      v992 = v989 & 0x7F;
      if (v990)
        v993 = (size_t)v986[1];
      else
        v993 = v992;
      __src[0] = v987;
      __src[1] = (void *)0x200000000;
      llvm::SplitString();
      v994 = (uint64_t *)__src[0];
      if (LODWORD(__src[1]))
      {
        v995 = (uint64_t *)((char *)__src[0] + 16 * LODWORD(__src[1]));
        do
        {
          v996 = (_DWORD *)*v994;
          v997 = v994[1];
          v998 = sub_22F20E910(*v994, v997);
          if (v998 == 15)
          {
            *(_DWORD *)(v1211 + 1440) = 15;
          }
          else if (v998)
          {
            *(_DWORD *)(v1211 + 1440) |= v998;
          }
          else if (v997 == 4 && *v996 == 1701736302)
          {
            *(_DWORD *)(v1211 + 1440) = 0;
          }
          else
          {
            v999 = v1212;
            *(_QWORD *)(v1212 + 312) = 0x18800000000;
            if (*(char *)(v1212 + 311) < 0)
            {
              **(_BYTE **)(v999 + 288) = 0;
              *(_QWORD *)(v999 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v999 + 288) = 0;
              *(_BYTE *)(v999 + 311) = 0;
            }
            v1472 = v988;
            v1473 = v999;
            LOWORD(v1474) = 1;
            *(_BYTE *)(v999 + 320) = 0;
            *(_DWORD *)(v999 + 664) = 0;
            v1000 = *(unsigned int *)(v999 + 776);
            if ((_DWORD)v1000)
            {
              v1001 = *(_QWORD *)(v1212 + 768);
              v1002 = 56 * v1000;
              do
              {
                if (*(char *)(v1001 + v1002 - 9) < 0)
                  operator delete(*(void **)(v1001 + v1002 - 32));
                v1002 -= 56;
              }
              while (v1002);
            }
            *(_DWORD *)(v1212 + 776) = 0;
            sub_22E3B89A8((unsigned __int8 **)&v1472, "-fxray-instrumentation-bundle=", 0x1EuLL);
            sub_22E3B89A8((unsigned __int8 **)&v1472, v991, v993);
            sub_22E3BB0B8((uint64_t)&v1472);
          }
          v994 += 2;
        }
        while (v994 != v995);
        v994 = (uint64_t *)__src[0];
        v985 = v1209;
        v987 = v1206;
      }
      v1003 = v1210;
      if (v994 != (uint64_t *)v987)
        free(v994);
      v986 += 3;
    }
    while (v986 != (void **)v1207);
  }
  v1004 = sub_22E6EBFB4(v985, 477);
  v1005 = v1211;
  if (v1004)
  {
    v1006 = *(const char ***)(v1004 + 48);
    v1007 = (char *)*v1006;
    if (*v1006)
    {
      v1008 = strlen(*v1006);
      if (v1008 == 6)
      {
        if (*(_DWORD *)v1007 == 1970562418 && *((_WORD *)v1007 + 2) == 28274)
        {
          v1018 = *(_QWORD *)v1211 | 0x20000000000000;
          goto LABEL_2193;
        }
        if (*(_DWORD *)v1007 == 1851880034 && *((_WORD *)v1007 + 2) == 26723)
        {
          v1018 = *(_QWORD *)v1211 | 0x40000000000000;
          goto LABEL_2193;
        }
        v1009 = 6;
      }
      else
      {
        v1009 = v1008;
        if (v1008 == 4)
        {
          if (*(_DWORD *)v1007 != 1819047270)
          {
            if (*(_DWORD *)v1007 == 1701736302)
              goto LABEL_2194;
            v1009 = 4;
            goto LABEL_2164;
          }
          v1018 = *(_QWORD *)v1211 | 0x60000000000000;
LABEL_2193:
          *(_QWORD *)v1211 = v1018;
          goto LABEL_2194;
        }
      }
    }
    else
    {
      v1009 = 0;
    }
LABEL_2164:
    v1010 = v1212;
    *(_QWORD *)(v1212 + 312) = 0x18800000000;
    if (*(char *)(v1212 + 311) < 0)
    {
      **(_BYTE **)(v1010 + 288) = 0;
      *(_QWORD *)(v1010 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v1010 + 288) = 0;
      *(_BYTE *)(v1010 + 311) = 0;
    }
    __src[0] = (void *)(v1010 + 320);
    __src[1] = 0;
    __src[2] = (void *)v1010;
    LOWORD(__src[3]) = 1;
    *(_BYTE *)(v1010 + 320) = 0;
    *(_DWORD *)(v1010 + 664) = 0;
    v1011 = *(unsigned int *)(v1010 + 776);
    if ((_DWORD)v1011)
    {
      v1012 = *(_QWORD *)(v1212 + 768);
      v1013 = 56 * v1011;
      do
      {
        if (*(char *)(v1012 + v1013 - 9) < 0)
          operator delete(*(void **)(v1012 + v1013 - 32));
        v1013 -= 56;
      }
      while (v1013);
    }
    *(_DWORD *)(v1212 + 776) = 0;
    llvm::opt::Arg::getAsString();
    if (v1473 >= 0)
      v1014 = &v1472;
    else
      v1014 = (__int128 *)v1472;
    if (v1473 >= 0)
      v1015 = HIBYTE(v1473) & 0x7F;
    else
      v1015 = *((_QWORD *)&v1472 + 1);
    sub_22E3B89A8((unsigned __int8 **)__src, v1014, v1015);
    sub_22E3B89A8((unsigned __int8 **)__src, v1007, v1009);
    if (SHIBYTE(v1473) < 0)
      operator delete((void *)v1472);
    sub_22E3BB0B8((uint64_t)__src);
  }
LABEL_2194:
  if ((*((_BYTE *)v1003 + 21) & 1) != 0 && sub_22E6EBFB4(v985, 2239))
    *(_QWORD *)v1005 |= 0x80000000000000uLL;
  sub_22E6ECFB0(v985, 0x8E7u, 0x8E8u, (uint64_t)__src);
  v1466 = *(_OWORD *)__src;
  v1019 = __src[3];
  v1467 = __src[2];
  v1020 = (uint64_t *)__src[0];
  if (__src[0] != __src[3])
  {
    do
    {
      v1021 = *v1020;
      HIDWORD(v1474) = 0;
      v1473 = 0;
      v1472 = 0uLL;
      LOWORD(v1474) = 0;
      MEMORY[0x2348A0C14](&v1472, **(_QWORD **)(v1021 + 48));
      if (llvm::opt::Option::matches())
      {
        HIDWORD(v1474) = 2;
        LOWORD(v1474) = 257;
      }
      v1022 = *(char **)(v1005 + 544);
      v1023 = *(_QWORD *)(v1005 + 552);
      if ((unint64_t)v1022 >= v1023)
      {
        v1025 = *(void ***)(v1005 + 536);
        v1026 = (v1022 - (char *)v1025) >> 5;
        v1027 = v1026 + 1;
        if ((unint64_t)(v1026 + 1) >> 59)
          goto LABEL_2529;
        v1028 = v1023 - (_QWORD)v1025;
        if (v1028 >> 4 > v1027)
          v1027 = v1028 >> 4;
        if ((unint64_t)v1028 >= 0x7FFFFFFFFFFFFFE0)
          v1029 = 0x7FFFFFFFFFFFFFFLL;
        else
          v1029 = v1027;
        if (v1029)
        {
          if (v1029 >> 59)
            sub_22E3B3F8C();
          v1030 = operator new(32 * v1029);
        }
        else
        {
          v1030 = 0;
        }
        v1032 = &v1030[32 * v1026];
        if (SHIBYTE(v1473) < 0)
        {
          sub_22E3BB2B4(&v1030[32 * v1026], (void *)v1472, *((unint64_t *)&v1472 + 1));
          v1022 = *(char **)(v1211 + 544);
          v1025 = *(void ***)(v1211 + 536);
        }
        else
        {
          *(_OWORD *)v1032 = v1472;
          *((_QWORD *)v1032 + 2) = v1473;
        }
        v1033 = &v1030[32 * v1029];
        *(_QWORD *)&v1030[32 * v1026 + 24] = v1474;
        v1031 = v1032 + 32;
        if (v1022 == (char *)v1025)
        {
          v1005 = v1211;
          *(_QWORD *)(v1211 + 536) = v1032;
          *(_QWORD *)(v1211 + 544) = v1031;
          *(_QWORD *)(v1211 + 552) = v1033;
        }
        else
        {
          v1005 = v1211;
          do
          {
            v1034 = *((_OWORD *)v1022 - 2);
            *((_QWORD *)v1032 - 2) = *((_QWORD *)v1022 - 2);
            *((_OWORD *)v1032 - 2) = v1034;
            *((_QWORD *)v1022 - 3) = 0;
            *((_QWORD *)v1022 - 2) = 0;
            *((_QWORD *)v1022 - 4) = 0;
            *((_QWORD *)v1032 - 1) = *((_QWORD *)v1022 - 1);
            v1032 -= 32;
            v1022 -= 32;
          }
          while (v1022 != (char *)v1025);
          v1025 = *(void ***)(v1005 + 536);
          v1035 = *(void ***)(v1005 + 544);
          *(_QWORD *)(v1005 + 536) = v1032;
          *(_QWORD *)(v1005 + 544) = v1031;
          *(_QWORD *)(v1005 + 552) = v1033;
          while (v1035 != v1025)
          {
            if (*((char *)v1035 - 9) < 0)
              operator delete(*(v1035 - 4));
            v1035 -= 4;
          }
        }
        if (v1025)
          operator delete(v1025);
      }
      else
      {
        if (SHIBYTE(v1473) < 0)
        {
          sub_22E3BB2B4(*(_BYTE **)(v1005 + 544), (void *)v1472, *((unint64_t *)&v1472 + 1));
        }
        else
        {
          v1024 = v1472;
          *((_QWORD *)v1022 + 2) = v1473;
          *(_OWORD *)v1022 = v1024;
        }
        *((_QWORD *)v1022 + 3) = v1474;
        v1031 = v1022 + 32;
      }
      *(_QWORD *)(v1005 + 544) = v1031;
      if (SHIBYTE(v1473) < 0)
        operator delete((void *)v1472);
      *(_QWORD *)&v1466 = v1466 + 8;
      sub_22E7219D8((uint64_t)&v1466);
      v1020 = (uint64_t *)v1466;
    }
    while ((void *)v1466 != v1019);
  }
  v1036 = v1209;
  if (sub_22E6EBFB4(v1209, 640) || sub_22E6EBFB4(v1036, 1039))
    *(_QWORD *)v1005 |= 0x800000000000uLL;
  v1037 = sub_22E6EBFB4(v1036, 1758);
  v1038 = (void **)v1204;
  if (v1037 && *((_DWORD *)v1204 + 9) == 21)
  {
    v1039 = *(const char ***)(v1037 + 48);
    v1040 = (char *)*v1039;
    if (*v1039)
    {
      v1041 = strlen(*v1039);
      if (v1041 == 14)
      {
        if (*(_QWORD *)v1040 == 0x642D6C61626F6C67 && *(_QWORD *)(v1040 + 6) == 0x63696D616E79642DLL)
          goto LABEL_2254;
        v1041 = 14;
      }
    }
    else
    {
      v1041 = 0;
    }
    v1043 = v1212;
    *(_QWORD *)(v1212 + 312) = 0x12E00000000;
    if (*(char *)(v1212 + 311) < 0)
    {
      **(_BYTE **)(v1043 + 288) = 0;
      *(_QWORD *)(v1043 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v1043 + 288) = 0;
      *(_BYTE *)(v1043 + 311) = 0;
    }
    __src[0] = (void *)(v1043 + 320);
    __src[1] = 0;
    __src[2] = (void *)v1043;
    LOWORD(__src[3]) = 1;
    *(_BYTE *)(v1043 + 320) = 0;
    *(_DWORD *)(v1043 + 664) = 0;
    v1044 = *(unsigned int *)(v1043 + 776);
    if ((_DWORD)v1044)
    {
      v1045 = *(_QWORD *)(v1212 + 768);
      v1046 = 56 * v1044;
      do
      {
        if (*(char *)(v1045 + v1046 - 9) < 0)
          operator delete(*(void **)(v1045 + v1046 - 32));
        v1046 -= 56;
      }
      while (v1046);
    }
    *(_DWORD *)(v1212 + 776) = 0;
    sub_22E3B89A8((unsigned __int8 **)__src, v1040, v1041);
    sub_22E3BB0B8((uint64_t)__src);
  }
LABEL_2254:
  v1047 = sub_22E6EBFB4(v1036, 573);
  if (v1047)
  {
    v1048 = *(const char ***)(v1047 + 48);
    v1049 = (char *)*v1048;
    v1050 = *v1048 ? strlen(*v1048) : 0;
    v1051 = sub_22E6ED074((uint64_t)v1049, v1050);
    *(_WORD *)(v1005 + 504) = v1051;
    if (HIBYTE(v1051) == 255 || ~(_BYTE)v1051 == 0)
    {
      v1053 = v1212;
      *(_QWORD *)(v1212 + 312) = 0x18800000000;
      if (*(char *)(v1212 + 311) < 0)
      {
        **(_BYTE **)(v1053 + 288) = 0;
        *(_QWORD *)(v1053 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v1053 + 288) = 0;
        *(_BYTE *)(v1053 + 311) = 0;
      }
      __src[0] = (void *)(v1053 + 320);
      __src[1] = 0;
      __src[2] = (void *)v1053;
      LOWORD(__src[3]) = 1;
      *(_BYTE *)(v1053 + 320) = 0;
      *(_DWORD *)(v1053 + 664) = 0;
      v1054 = *(unsigned int *)(v1053 + 776);
      if ((_DWORD)v1054)
      {
        v1055 = *(_QWORD *)(v1212 + 768);
        v1056 = 56 * v1054;
        do
        {
          if (*(char *)(v1055 + v1056 - 9) < 0)
            operator delete(*(void **)(v1055 + v1056 - 32));
          v1056 -= 56;
        }
        while (v1056);
      }
      *(_DWORD *)(v1212 + 776) = 0;
      llvm::opt::Arg::getAsString();
      if (v1473 >= 0)
        v1057 = &v1472;
      else
        v1057 = (__int128 *)v1472;
      if (v1473 >= 0)
        v1058 = HIBYTE(v1473) & 0x7F;
      else
        v1058 = *((_QWORD *)&v1472 + 1);
      sub_22E3B89A8((unsigned __int8 **)__src, v1057, v1058);
      sub_22E3B89A8((unsigned __int8 **)__src, v1049, v1050);
      if (SHIBYTE(v1473) < 0)
        operator delete((void *)v1472);
      sub_22E3BB0B8((uint64_t)__src);
    }
  }
  v1059 = sub_22E6EBFB4(v1036, 572);
  if (v1059)
  {
    v1060 = *(const char ***)(v1059 + 48);
    v1061 = (char *)*v1060;
    v1062 = *v1060 ? strlen(*v1060) : 0;
    v1063 = sub_22E6ED074((uint64_t)v1061, v1062);
    *(_WORD *)(v1005 + 506) = v1063;
    if (HIBYTE(v1063) == 255 || ~(_BYTE)v1063 == 0)
    {
      v1065 = v1212;
      *(_QWORD *)(v1212 + 312) = 0x18800000000;
      if (*(char *)(v1212 + 311) < 0)
      {
        **(_BYTE **)(v1065 + 288) = 0;
        *(_QWORD *)(v1065 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v1065 + 288) = 0;
        *(_BYTE *)(v1065 + 311) = 0;
      }
      __src[0] = (void *)(v1065 + 320);
      __src[1] = 0;
      __src[2] = (void *)v1065;
      LOWORD(__src[3]) = 1;
      *(_BYTE *)(v1065 + 320) = 0;
      *(_DWORD *)(v1065 + 664) = 0;
      v1066 = *(unsigned int *)(v1065 + 776);
      if ((_DWORD)v1066)
      {
        v1067 = *(_QWORD *)(v1212 + 768);
        v1068 = 56 * v1066;
        do
        {
          if (*(char *)(v1067 + v1068 - 9) < 0)
            operator delete(*(void **)(v1067 + v1068 - 32));
          v1068 -= 56;
        }
        while (v1068);
      }
      *(_DWORD *)(v1212 + 776) = 0;
      llvm::opt::Arg::getAsString();
      if (v1473 >= 0)
        v1069 = &v1472;
      else
        v1069 = (__int128 *)v1472;
      if (v1473 >= 0)
        v1070 = HIBYTE(v1473) & 0x7F;
      else
        v1070 = *((_QWORD *)&v1472 + 1);
      sub_22E3B89A8((unsigned __int8 **)__src, v1069, v1070);
      sub_22E3B89A8((unsigned __int8 **)__src, v1061, v1062);
      if (SHIBYTE(v1473) < 0)
        operator delete((void *)v1472);
      sub_22E3BB0B8((uint64_t)__src);
    }
  }
  v1071 = sub_22E6EC688(v1036, 0x5DCu, 0x637u, 0x830u, 0xA49u);
  if (v1071)
  {
    v1072 = v1071;
    if (*((_DWORD *)v1038 + 9) == 21)
    {
      v1073 = v1212;
      *(_QWORD *)(v1212 + 312) = 0x1CE00000000;
      if (*(char *)(v1212 + 311) < 0)
      {
        **(_BYTE **)(v1073 + 288) = 0;
        *(_QWORD *)(v1073 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v1073 + 288) = 0;
        *(_BYTE *)(v1073 + 311) = 0;
      }
      __src[0] = (void *)(v1073 + 320);
      __src[1] = 0;
      __src[2] = (void *)v1073;
      LOWORD(__src[3]) = 1;
      *(_BYTE *)(v1073 + 320) = 0;
      *(_DWORD *)(v1073 + 664) = 0;
      v1074 = *(unsigned int *)(v1073 + 776);
      if ((_DWORD)v1074)
      {
        v1075 = *(_QWORD *)(v1212 + 768);
        v1076 = 56 * v1074;
        do
        {
          if (*(char *)(v1075 + v1076 - 9) < 0)
            operator delete(*(void **)(v1075 + v1076 - 32));
          v1076 -= 56;
        }
        while (v1076);
      }
      *(_DWORD *)(v1212 + 776) = 0;
      sub_22E3B89A8((unsigned __int8 **)__src, *(void **)(v1072 + 24), *(_QWORD *)(v1072 + 32));
      v1077 = *((_BYTE *)v1038 + 23);
      v1078 = v1077 < 0;
      if (v1077 >= 0)
        v1079 = v1038;
      else
        v1079 = *v1038;
      v1080 = v1077 & 0x7F;
      if (v1078)
        v1081 = (size_t)v1038[1];
      else
        v1081 = v1080;
      sub_22E3B89A8((unsigned __int8 **)__src, v1079, v1081);
      sub_22E3BB0B8((uint64_t)__src);
    }
    v1082 = 0x800000000000;
    if ((llvm::opt::Option::matches() & 1) == 0 && !llvm::opt::Option::matches())
      v1082 = 0x1000000000000;
    v1083 = *(_WORD *)(v1005 + 104);
    *(_QWORD *)(v1005 + 96) = *(_QWORD *)(v1005 + 96) & 0xFFFE7FFFFFFFFFFFLL | v1082;
    *(_WORD *)(v1005 + 104) = v1083;
  }
  v1084 = sub_22E6EC70C(v1036, 0x827u, 0x828u);
  if (v1084)
  {
    v1085 = v1084;
    if (*((_DWORD *)v1038 + 9) != 21)
    {
      v1086 = v1212;
      *(_QWORD *)(v1212 + 312) = 0x1CE00000000;
      if (*(char *)(v1212 + 311) < 0)
      {
        **(_BYTE **)(v1086 + 288) = 0;
        *(_QWORD *)(v1086 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v1086 + 288) = 0;
        *(_BYTE *)(v1086 + 311) = 0;
      }
      __src[0] = (void *)(v1086 + 320);
      __src[1] = 0;
      __src[2] = (void *)v1086;
      LOWORD(__src[3]) = 1;
      *(_BYTE *)(v1086 + 320) = 0;
      *(_DWORD *)(v1086 + 664) = 0;
      v1087 = *(unsigned int *)(v1086 + 776);
      if ((_DWORD)v1087)
      {
        v1088 = *(_QWORD *)(v1212 + 768);
        v1089 = 56 * v1087;
        do
        {
          if (*(char *)(v1088 + v1089 - 9) < 0)
            operator delete(*(void **)(v1088 + v1089 - 32));
          v1089 -= 56;
        }
        while (v1089);
      }
      *(_DWORD *)(v1212 + 776) = 0;
      sub_22E3B89A8((unsigned __int8 **)__src, *(void **)(v1085 + 24), *(_QWORD *)(v1085 + 32));
      v1090 = *((_BYTE *)v1038 + 23);
      v1091 = v1090 < 0;
      if (v1090 >= 0)
        v1092 = v1038;
      else
        v1092 = *v1038;
      v1093 = v1090 & 0x7F;
      if (v1091)
        v1094 = (size_t)v1038[1];
      else
        v1094 = v1093;
      sub_22E3B89A8((unsigned __int8 **)__src, v1092, v1094);
      sub_22E3BB0B8((uint64_t)__src);
    }
    v1095 = llvm::opt::Option::matches();
    v1096 = 0x800000;
    if (!v1095)
      v1096 = 0;
    *(_QWORD *)v1005 = *(_QWORD *)v1005 & 0xFFFFFFFFFF7FFFFFLL | v1096;
  }
  v1097 = *(_BYTE *)(v1005 + 999);
  v1098 = v1097;
  v1099 = v1097 & 0x7F;
  if (v1098 < 0)
    v1099 = *(_QWORD *)(v1005 + 984);
  v1100 = v1099 != 0;
  v1101 = sub_22E6EBFB4(v1036, 2807);
  if (v1101)
  {
    MEMORY[0x2348A0C14](v1005 + 1000, **(_QWORD **)(v1101 + 48));
    v1100 = 1;
  }
  v1102 = sub_22E6EBFB4(v1036, 2806);
  if (v1102)
  {
    MEMORY[0x2348A0C14](v1005 + 1024, **(_QWORD **)(v1102 + 48));
    v1100 = 1;
  }
  sub_22E6ED258((uint64_t)__src, v1212, v1036, 2923, "pass", 4uLL);
  *(_DWORD *)(v1005 + 1072) = __src[0];
  v1103 = (void **)(v1005 + 1080);
  if (*(char *)(v1005 + 1103) < 0)
    operator delete(*v1103);
  *(_OWORD *)v1103 = *(_OWORD *)&__src[1];
  *(void **)(v1005 + 1096) = __src[3];
  HIBYTE(__src[3]) = 0;
  LOBYTE(__src[1]) = 0;
  sub_22E6C3F18(v1005 + 1104, (__int128 *)&__src[4]);
  v1104 = (std::__shared_weak_count *)__src[5];
  if (__src[5])
  {
    v1105 = (unint64_t *)((char *)__src[5] + 8);
    do
      v1106 = __ldaxr(v1105);
    while (__stlxr(v1106 - 1, v1105));
    if (!v1106)
    {
      ((void (*)(std::__shared_weak_count *))v1104->__on_zero_shared)(v1104);
      std::__shared_weak_count::__release_weak(v1104);
    }
  }
  if (SHIBYTE(__src[3]) < 0)
    operator delete(__src[1]);
  sub_22E6ED258((uint64_t)__src, v1212, v1036, 2922, "pass-missed", 0xBuLL);
  *(_DWORD *)(v1005 + 1120) = __src[0];
  v1107 = (void **)(v1005 + 1128);
  if (*(char *)(v1005 + 1151) < 0)
    operator delete(*v1107);
  *(_OWORD *)v1107 = *(_OWORD *)&__src[1];
  *(void **)(v1005 + 1144) = __src[3];
  HIBYTE(__src[3]) = 0;
  LOBYTE(__src[1]) = 0;
  sub_22E6C3F18(v1005 + 1152, (__int128 *)&__src[4]);
  v1108 = (std::__shared_weak_count *)__src[5];
  if (__src[5])
  {
    v1109 = (unint64_t *)((char *)__src[5] + 8);
    do
      v1110 = __ldaxr(v1109);
    while (__stlxr(v1110 - 1, v1109));
    if (!v1110)
    {
      ((void (*)(std::__shared_weak_count *))v1108->__on_zero_shared)(v1108);
      std::__shared_weak_count::__release_weak(v1108);
    }
  }
  if (SHIBYTE(__src[3]) < 0)
    operator delete(__src[1]);
  sub_22E6ED258((uint64_t)__src, v1212, v1036, 2921, "pass-analysis", 0xDuLL);
  *(_DWORD *)(v1005 + 1168) = __src[0];
  v1111 = (void **)(v1005 + 1176);
  if (*(char *)(v1005 + 1199) < 0)
    operator delete(*v1111);
  *(_OWORD *)v1111 = *(_OWORD *)&__src[1];
  *(void **)(v1005 + 1192) = __src[3];
  HIBYTE(__src[3]) = 0;
  LOBYTE(__src[1]) = 0;
  sub_22E6C3F18(v1005 + 1200, (__int128 *)&__src[4]);
  v1112 = (std::__shared_weak_count *)__src[5];
  if (__src[5])
  {
    v1113 = (unint64_t *)((char *)__src[5] + 8);
    do
      v1114 = __ldaxr(v1113);
    while (__stlxr(v1114 - 1, v1113));
    if (!v1114)
    {
      ((void (*)(std::__shared_weak_count *))v1112->__on_zero_shared)(v1112);
      std::__shared_weak_count::__release_weak(v1112);
    }
  }
  if (SHIBYTE(__src[3]) < 0)
    operator delete(__src[1]);
  if (*(_QWORD *)(v1005 + 1104) | *(_QWORD *)(v1005 + 1152))
    v1115 = 1;
  else
    v1115 = *(_QWORD *)(v1005 + 1200) != 0;
  v1116 = *(_BYTE *)(v1005 + 783);
  v1117 = v1116;
  v1118 = v1116 & 0x7F;
  if (v1117 >= 0)
    v1119 = v1118;
  else
    v1119 = *(_QWORD *)(v1005 + 768);
  if (v1119)
  {
    v1120 = 1;
  }
  else
  {
    v1120 = (*(_QWORD *)(v1005 + 96) & 0x600000000000) != 0;
    if ((*(_DWORD *)(v1005 + 92) & 1) != 0 && (*(_QWORD *)(v1005 + 96) & 0x600000000000) == 0 && (_DWORD)v1203 != 2)
    {
      v1121 = v1212;
      *(_QWORD *)(v1212 + 312) = 0x1F900000000;
      if (*(char *)(v1212 + 311) < 0)
      {
        **(_BYTE **)(v1121 + 288) = 0;
        *(_QWORD *)(v1121 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v1121 + 288) = 0;
        *(_BYTE *)(v1121 + 311) = 0;
      }
      v1122 = (unsigned __int8 *)(v1121 + 320);
      __src[0] = (void *)(v1121 + 320);
      __src[1] = 0;
      __src[2] = (void *)v1121;
      LOWORD(__src[3]) = 1;
      *(_BYTE *)(v1121 + 320) = 0;
      *(_DWORD *)(v1121 + 664) = 0;
      v1123 = *(unsigned int *)(v1121 + 776);
      if ((_DWORD)v1123)
      {
        v1124 = *(_QWORD *)(v1121 + 768);
        v1125 = 56 * v1123;
        do
        {
          if (*(char *)(v1124 + v1125 - 9) < 0)
            operator delete(*(void **)(v1124 + v1125 - 32));
          v1125 -= 56;
        }
        while (v1125);
        v1122 = (unsigned __int8 *)__src[0];
        *(_DWORD *)(v1212 + 776) = 0;
        if (!v1122)
        {
          v1122 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__src[1]);
          __src[0] = v1122;
        }
      }
      else
      {
        *(_DWORD *)(v1121 + 776) = 0;
      }
      v1122[*v1122 + 1] = 1;
      v1126 = __src[0];
      v1127 = *(unsigned __int8 *)__src[0];
      *(_BYTE *)__src[0] = v1127 + 1;
      v1126[v1127 + 2] = "-fdiagnostics-show-hotness";
      sub_22E3BB0B8((uint64_t)__src);
      v1120 = 0;
    }
  }
  v1128 = sub_22E6EBFB4(v1209, 598);
  if (v1128)
  {
    v1129 = *(const char ***)(v1128 + 48);
    v1130 = *v1129;
    if (*v1129 && strlen(*v1129) == 4 && *(_DWORD *)v1130 == 1869903201)
    {
      *(_QWORD *)(v1005 + 1672) = 0;
      *(_BYTE *)(v1005 + 1680) = 0;
      if (v1120)
        goto LABEL_2440;
    }
    else
    {
      __src[0] = 0;
      AsSignedInteger = (llvm *)llvm::getAsSignedInteger();
      if ((_DWORD)AsSignedInteger)
      {
        llvm::inconvertibleErrorCode(AsSignedInteger);
        v1466 = 0uLL;
        v1467 = 0;
        LODWORD(__src[1]) = 0;
        v1470 = 1;
        __src[6] = 0;
        memset(&__src[2], 0, 25);
        __src[0] = (void *)(MEMORY[0x24BED83D8] + 16);
        v1471 = &v1466;
        llvm::raw_ostream::SetBufferAndMode();
        *(_QWORD *)&v1472 = &unk_24FA6EF60;
        *((_QWORD *)&v1472 + 1) = "Not an integer: %s";
        v1473 = (int64_t)v1130;
        llvm::raw_ostream::operator<<();
        v1132 = v1471;
        v1133 = operator new();
        v1475 = 260;
        *(_QWORD *)&v1472 = v1132;
        llvm::StringError::StringError();
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)__src);
        if (SHIBYTE(v1467) < 0)
          operator delete((void *)v1466);
        v1134 = v1212;
        *(_QWORD *)(v1212 + 312) = 0x17000000000;
        if (*(char *)(v1212 + 311) < 0)
        {
          **(_BYTE **)(v1134 + 288) = 0;
          *(_QWORD *)(v1134 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v1134 + 288) = 0;
          *(_BYTE *)(v1134 + 311) = 0;
        }
        v1137 = (unsigned __int8 *)(v1134 + 320);
        __src[0] = (void *)(v1134 + 320);
        __src[1] = 0;
        __src[2] = (void *)v1134;
        LOWORD(__src[3]) = 1;
        *(_BYTE *)(v1134 + 320) = 0;
        *(_DWORD *)(v1134 + 664) = 0;
        v1138 = *(unsigned int *)(v1134 + 776);
        if ((_DWORD)v1138)
        {
          v1139 = *(_QWORD *)(v1134 + 768);
          v1140 = 56 * v1138;
          do
          {
            if (*(char *)(v1139 + v1140 - 9) < 0)
              operator delete(*(void **)(v1139 + v1140 - 32));
            v1140 -= 56;
          }
          while (v1140);
          v1137 = (unsigned __int8 *)__src[0];
          *(_DWORD *)(v1212 + 776) = 0;
          if (!v1137)
          {
            v1137 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__src[1]);
            __src[0] = v1137;
          }
        }
        else
        {
          *(_DWORD *)(v1134 + 776) = 0;
        }
        v1137[*v1137 + 1] = 1;
        v1141 = __src[0];
        v1142 = *(unsigned __int8 *)__src[0];
        *(_BYTE *)__src[0] = v1142 + 1;
        v1141[v1142 + 2] = "-fdiagnostics-hotness-threshold=";
        sub_22E3BB0B8((uint64_t)__src);
        (*(void (**)(uint64_t))(*(_QWORD *)v1133 + 8))(v1133);
        goto LABEL_2440;
      }
      v1135 = (uint64_t)__src[0];
      *(_QWORD *)(v1005 + 1672) = (unint64_t)__src[0] & ~((uint64_t)__src[0] >> 63);
      *(_BYTE *)(v1005 + 1680) = 1;
      v1136 = v1135 < 1 || v1120;
      if ((v1136 & 1) != 0)
        goto LABEL_2440;
    }
    v1143 = v1212;
    *(_QWORD *)(v1212 + 312) = 0x1F900000000;
    if (*(char *)(v1212 + 311) < 0)
    {
      **(_BYTE **)(v1143 + 288) = 0;
      *(_QWORD *)(v1143 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v1143 + 288) = 0;
      *(_BYTE *)(v1143 + 311) = 0;
    }
    v1144 = (unsigned __int8 *)(v1143 + 320);
    __src[0] = (void *)(v1143 + 320);
    __src[1] = 0;
    __src[2] = (void *)v1143;
    LOWORD(__src[3]) = 1;
    *(_BYTE *)(v1143 + 320) = 0;
    *(_DWORD *)(v1143 + 664) = 0;
    v1145 = *(unsigned int *)(v1143 + 776);
    if ((_DWORD)v1145)
    {
      v1146 = *(_QWORD *)(v1143 + 768);
      v1147 = 56 * v1145;
      do
      {
        if (*(char *)(v1146 + v1147 - 9) < 0)
          operator delete(*(void **)(v1146 + v1147 - 32));
        v1147 -= 56;
      }
      while (v1147);
      v1144 = (unsigned __int8 *)__src[0];
      *(_DWORD *)(v1212 + 776) = 0;
      if (!v1144)
      {
        v1144 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__src[1]);
        __src[0] = v1144;
      }
    }
    else
    {
      *(_DWORD *)(v1143 + 776) = 0;
    }
    v1144[*v1144 + 1] = 1;
    v1148 = __src[0];
    v1149 = *(unsigned __int8 *)__src[0];
    *(_BYTE *)__src[0] = v1149 + 1;
    v1148[v1149 + 2] = "-fdiagnostics-hotness-threshold=";
    sub_22E3BB0B8((uint64_t)__src);
  }
LABEL_2440:
  v1150 = v1120;
  v1151 = v1209;
  v1152 = sub_22E6EBFB4(v1209, 599);
  if (!v1152)
    goto LABEL_2441;
  v1178 = *(const char ***)(v1152 + 48);
  v1179 = *v1178;
  if (*v1178)
    strlen(*v1178);
  sub_22F2A8B30((uint64_t)&v1472, (uint64_t)v1179);
  v1181 = v1473;
  if ((v1473 & 1) != 0)
  {
    v1183 = v1212;
    *(_QWORD *)(v1212 + 312) = 0x17100000000;
    if (*(char *)(v1212 + 311) < 0)
    {
      **(_BYTE **)(v1183 + 288) = 0;
      *(_QWORD *)(v1183 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v1183 + 288) = 0;
      *(_BYTE *)(v1183 + 311) = 0;
    }
    v1184 = (unsigned __int8 *)(v1183 + 320);
    __src[0] = (void *)(v1183 + 320);
    __src[1] = 0;
    __src[2] = (void *)v1183;
    LOWORD(__src[3]) = 1;
    *(_BYTE *)(v1183 + 320) = 0;
    *(_DWORD *)(v1183 + 664) = 0;
    v1185 = *(unsigned int *)(v1183 + 776);
    if ((_DWORD)v1185)
    {
      v1186 = *(_QWORD *)(v1183 + 768);
      v1187 = 56 * v1185;
      do
      {
        if (*(char *)(v1186 + v1187 - 9) < 0)
          operator delete(*(void **)(v1186 + v1187 - 32));
        v1187 -= 56;
      }
      while (v1187);
      goto LABEL_2522;
    }
  }
  else
  {
    *(_OWORD *)(v1005 + 1688) = v1472;
    if (*(_BYTE *)(v1005 + 1696))
    {
      if (*(_QWORD *)(v1005 + 1688))
        v1182 = v1150;
      else
        v1182 = 1;
      if ((v1182 & 1) != 0)
        goto LABEL_2441;
    }
    else if ((v1150 & 1) != 0)
    {
      goto LABEL_2441;
    }
    v1183 = v1212;
    *(_QWORD *)(v1212 + 312) = 0x1FA00000000;
    if (*(char *)(v1212 + 311) < 0)
    {
      **(_BYTE **)(v1183 + 288) = 0;
      *(_QWORD *)(v1183 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v1183 + 288) = 0;
      *(_BYTE *)(v1183 + 311) = 0;
    }
    v1184 = (unsigned __int8 *)(v1183 + 320);
    __src[0] = (void *)(v1183 + 320);
    __src[1] = 0;
    __src[2] = (void *)v1183;
    LOWORD(__src[3]) = 1;
    *(_BYTE *)(v1183 + 320) = 0;
    *(_DWORD *)(v1183 + 664) = 0;
    v1196 = *(unsigned int *)(v1183 + 776);
    if ((_DWORD)v1196)
    {
      v1197 = *(_QWORD *)(v1183 + 768);
      v1198 = 56 * v1196;
      do
      {
        if (*(char *)(v1197 + v1198 - 9) < 0)
          operator delete(*(void **)(v1197 + v1198 - 32));
        v1198 -= 56;
      }
      while (v1198);
LABEL_2522:
      v1184 = (unsigned __int8 *)__src[0];
      v1005 = v1211;
      *(_DWORD *)(v1212 + 776) = 0;
      if (!v1184)
      {
        v1184 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__src[1]);
        __src[0] = v1184;
      }
      goto LABEL_2525;
    }
  }
  *(_DWORD *)(v1183 + 776) = 0;
LABEL_2525:
  v1184[*v1184 + 1] = 1;
  v1199 = __src[0];
  v1200 = *(unsigned __int8 *)__src[0];
  *(_BYTE *)__src[0] = v1200 + 1;
  v1199[v1200 + 2] = "-fdiagnostics-misexpect-tolerance=";
  sub_22E3BB0B8((uint64_t)__src);
  if ((v1181 & 1) != 0 && (_QWORD)v1472)
    (*(void (**)(_QWORD))(*(_QWORD *)v1472 + 8))(v1472);
LABEL_2441:
  v1153 = *(_BYTE *)(v1005 + 1639);
  v1154 = v1153;
  v1155 = v1153 & 0x7F;
  if (v1154 < 0)
    v1155 = *(_QWORD *)(v1005 + 1624);
  if (v1155 | v1119)
    v1156 = 1;
  else
    v1156 = v1100 || v1115;
  if (v1156 == 1)
  {
    v1157 = *(_QWORD *)(v1005 + 96);
    if ((v1157 & 0x1E00000000000000) == 0)
    {
      *(_WORD *)(v1005 + 104) = *(_WORD *)(v1005 + 104);
      *(_QWORD *)(v1005 + 96) = v1157 & 0xE1FFFFFFFFFFFFFFLL | 0x200000000000000;
    }
  }
  llvm::opt::ArgList::getAllArgValues();
  v1158 = v1212;
  sub_22E6ED5E8((uint64_t)"-fsanitize-recover=", 0x13uLL, (uint64_t)__src[0], (uint64_t)__src[1], v1212, (_QWORD *)(v1005 + 1240));
  *(_QWORD *)&v1472 = __src;
  sub_22E3B3CC8((void ***)&v1472);
  llvm::opt::ArgList::getAllArgValues();
  sub_22E6ED5E8((uint64_t)"-fsanitize-trap=", 0x10uLL, (uint64_t)__src[0], (uint64_t)__src[1], v1158, (_QWORD *)(v1005 + 1256));
  *(_QWORD *)&v1472 = __src;
  sub_22E3B3CC8((void ***)&v1472);
  v1159 = llvm::opt::ArgList::hasFlag();
  v1160 = 0x40000000000;
  if (!v1159)
    v1160 = 0;
  *(_QWORD *)v1005 = *(_QWORD *)v1005 & 0xFFFFFBFFFFFFFFFFLL | v1160;
  v1162 = (void **)v1204;
  v1161 = v1205;
  v1163 = v1210;
  if ((*(_WORD *)(v1205 + 96) & 0x80) == 0
    && *(_QWORD *)(v1205 + 8) & 0x8000000000000000 | *(_WORD *)(v1205 + 16) & 7
    && (sub_22F2A8974(v1211 + 1344, v1205, *((_DWORD *)v1204 + 6)) & 1) == 0)
  {
    v1180 = v1212;
    *(_QWORD *)(v1212 + 312) = 0x1B600000000;
    if (*(char *)(v1212 + 311) < 0)
    {
      **(_BYTE **)(v1180 + 288) = 0;
      *(_QWORD *)(v1180 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v1180 + 288) = 0;
      *(_BYTE *)(v1180 + 311) = 0;
    }
    __src[0] = (void *)(v1180 + 320);
    __src[1] = 0;
    __src[2] = (void *)v1180;
    LOWORD(__src[3]) = 1;
    *(_BYTE *)(v1180 + 320) = 0;
    *(_DWORD *)(v1180 + 664) = 0;
    v1188 = *(unsigned int *)(v1180 + 776);
    if ((_DWORD)v1188)
    {
      v1189 = *(_QWORD *)(v1212 + 768);
      v1190 = 56 * v1188;
      do
      {
        if (*(char *)(v1189 + v1190 - 9) < 0)
          operator delete(*(void **)(v1189 + v1190 - 32));
        v1190 -= 56;
      }
      while (v1190);
    }
    *(_DWORD *)(v1212 + 776) = 0;
    v1191 = *((_BYTE *)v1162 + 23);
    v1192 = v1191 < 0;
    if (v1191 >= 0)
      v1193 = v1162;
    else
      v1193 = *v1162;
    v1194 = v1191 & 0x7F;
    if (v1192)
      v1195 = (size_t)v1162[1];
    else
      v1195 = v1194;
    sub_22E3B89A8((unsigned __int8 **)__src, v1193, v1195);
    sub_22E3BB0B8((uint64_t)__src);
  }
  v1164 = 0;
  v1166 = *v1163;
  v1165 = v1163[1];
  v1167 = v1163[2];
  v1168 = v1163[3];
  v1169 = v1208;
  if ((v1168 & 0x1800) != 0 && (v1163[3] & 0x6000) != 0x4000)
  {
    v1164 = llvm::opt::ArgList::hasFlag();
    v1167 = v1163[2];
    v1168 = v1163[3];
    v1166 = *v1163;
    v1165 = v1163[1];
  }
  *v1163 = v1166;
  v1163[1] = v1165;
  v1163[2] = v1167 & 0xFFFF7FFFFFFFFFFFLL | ((unint64_t)(v1164 & 1) << 47);
  v1163[3] = v1168;
  if (sub_22E6EBFB4(v1151, 675))
  {
    v1170 = 0x20000000000000;
  }
  else
  {
    if (!sub_22E6EBFB4(v1151, 1052))
      goto LABEL_2461;
    v1170 = 0x40000000000000;
  }
  v1171 = *(_WORD *)(v1211 + 104);
  *(_QWORD *)(v1211 + 96) = *(_QWORD *)(v1211 + 96) & 0xFF9FFFFFFFFFFFFFLL | v1170;
  *(_WORD *)(v1211 + 104) = v1171;
LABEL_2461:
  v1172 = llvm::opt::ArgList::hasFlag();
  if (v1172)
    v1173 = 0x40000;
  else
    v1173 = 0;
  v1169[2] = v1169[2] & 0xFFFBFFFF | v1173;
  if ((v1172 & 1) == 0 && (*(_DWORD *)(v1161 + 52) & 0x10000) == 0)
  {
    v1174 = v1212;
    *(_QWORD *)(v1212 + 312) = 0x14300000000;
    if (*(char *)(v1212 + 311) < 0)
    {
      **(_BYTE **)(v1174 + 288) = 0;
      *(_QWORD *)(v1174 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v1174 + 288) = 0;
      *(_BYTE *)(v1174 + 311) = 0;
    }
    v1213[0] = v1174 + 320;
    v1213[1] = 0;
    v1213[2] = v1174;
    v1214 = 1;
    *(_BYTE *)(v1174 + 320) = 0;
    *(_DWORD *)(v1174 + 664) = 0;
    v1175 = *(unsigned int *)(v1174 + 776);
    if ((_DWORD)v1175)
    {
      v1176 = *(_QWORD *)(v1212 + 768);
      v1177 = 56 * v1175;
      do
      {
        if (*(char *)(v1176 + v1177 - 9) < 0)
          operator delete(*(void **)(v1176 + v1177 - 32));
        v1177 -= 56;
      }
      while (v1177);
    }
    *(_DWORD *)(v1212 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v1213);
  }
  __src[0] = &__dst;
  sub_22E3B3CC8((void ***)__src);
}

uint64_t sub_22E6EBEA4(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  const char **v11;
  const char *v12;
  int v13;

  v5 = a2;
  if (a2 - 7 > 1)
    v6 = 0;
  else
    v6 = 2 * (sub_22E6EBFB4(a1, 194) == 0);
  if (v5 == 13)
    v7 = 2;
  else
    v7 = v6;
  v8 = sub_22E6EBFB4(a1, 10);
  if (!v8)
    return v7;
  v9 = v8;
  if ((llvm::opt::Option::matches() & 1) != 0)
    return 0;
  if ((llvm::opt::Option::matches() & 1) != 0)
    return 3;
  v11 = *(const char ***)(v9 + 48);
  v12 = *v11;
  if (!*v11 || strlen(*v11) != 1)
    return sub_22E80ACDC(a1, 2821, v7, a3);
  v13 = *(unsigned __int8 *)v12;
  if (v13 == 103)
    return 1;
  result = 2;
  if (v13 != 115 && v13 != 122)
    return sub_22E80ACDC(a1, 2821, v7, a3);
  return result;
}

uint64_t sub_22E6EBFB4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  sub_22E70B070(a1, a2, (uint64_t)&v11);
  v9 = v11;
  v2 = v13;
  v10 = v12;
  v3 = (uint64_t *)v11;
  if ((_QWORD)v11 == v13)
    return 0;
  do
  {
    v7 = *v3;
    v6 = v3 + 1;
    v4 = v7;
    v8 = *(_QWORD *)(v7 + 16);
    if (!v8)
      v8 = v4;
    *(_BYTE *)(v8 + 44) |= 1u;
    *(_QWORD *)&v9 = v6;
    sub_22E721830((uint64_t)&v9);
    v3 = (uint64_t *)v9;
  }
  while ((_QWORD)v9 != v2);
  return v4;
}

uint64_t sub_22E6EC038(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  const char **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  size_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  void *__p[2];
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;

  v4 = sub_22E721714(a2, a1);
  if (!v4)
  {
LABEL_26:
    v8 = 0;
    v7 = 0;
    return v7 | v8;
  }
  v5 = v4;
  v6 = *(const char ***)(v4 + 48);
  if (*v6)
    strlen(*v6);
  v21 = 0;
  if ((llvm::getAsUnsignedInteger() & 1) != 0 || HIDWORD(v21))
  {
    *(_QWORD *)(a3 + 312) = 0x17500000000;
    if (*(char *)(a3 + 311) < 0)
    {
      **(_BYTE **)(a3 + 288) = 0;
      *(_QWORD *)(a3 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a3 + 288) = 0;
      *(_BYTE *)(a3 + 311) = 0;
    }
    v21 = a3 + 320;
    v22 = 0;
    v23 = a3;
    v24 = 1;
    *(_BYTE *)(a3 + 320) = 0;
    *(_DWORD *)(a3 + 664) = 0;
    v9 = *(unsigned int *)(a3 + 776);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)(a3 + 768);
      v11 = 56 * v9;
      do
      {
        if (*(char *)(v10 + v11 - 9) < 0)
          operator delete(*(void **)(v10 + v11 - 32));
        v11 -= 56;
      }
      while (v11);
    }
    *(_DWORD *)(a3 + 776) = 0;
    llvm::opt::Arg::getAsString();
    if (v20 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if (v20 >= 0)
      v13 = v20 & 0x7F;
    else
      v13 = (size_t)__p[1];
    sub_22E3B89A8((unsigned __int8 **)&v21, v12, v13);
    v14 = **(_QWORD **)(v5 + 48);
    v15 = (unsigned __int8 *)v21;
    if (!v21)
    {
      v15 = (unsigned __int8 *)sub_22E3B8AAC(v22);
      v21 = (unint64_t)v15;
    }
    v15[*v15 + 1] = 1;
    v16 = v21;
    v17 = *(unsigned __int8 *)v21;
    *(_BYTE *)v21 = v17 + 1;
    *(_QWORD *)(v16 + 8 * v17 + 16) = v14;
    if (v20 < 0)
      operator delete(__p[0]);
    sub_22E3BB0B8((uint64_t)&v21);
    goto LABEL_26;
  }
  v7 = v21;
  v8 = 0x100000000;
  return v7 | v8;
}

uint64_t sub_22E6EC1FC(int a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char ***v8;
  const char **v9;
  char *v10;
  size_t v11;
  uint64_t v12;
  _DWORD *v13;
  const void *v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  size_t v22;
  void *__p[2];
  char v25;
  unsigned __int8 *v26[3];
  __int16 v27;

  v6 = sub_22E721714(a3, a1);
  if (v6)
  {
    v7 = a2;
    v8 = &(&off_24FA6E108)[2 * a2];
    v9 = *(const char ***)(v6 + 48);
    v10 = (char *)*v9;
    if (*v9)
      v11 = strlen(*v9);
    else
      v11 = 0;
    v12 = LODWORD((&off_24FA6E108)[2 * v7 + 1]);
    v13 = *v8 + 1;
    do
    {
      v14 = (const void *)*((_QWORD *)v13 - 1);
      if (v14)
      {
        if (v11 == strlen(*((const char **)v13 - 1)) && (!v11 || !memcmp(v10, v14, v11)))
        {
LABEL_15:
          v15 = *v13 & 0xFFFFFF00;
          v16 = *v13;
          v17 = 0x100000000;
          return v17 | v15 | v16;
        }
      }
      else if (!v11)
      {
        goto LABEL_15;
      }
      v13 += 4;
      --v12;
    }
    while (v12);
    *(_QWORD *)(a4 + 312) = 0x18800000000;
    if (*(char *)(a4 + 311) < 0)
    {
      **(_BYTE **)(a4 + 288) = 0;
      *(_QWORD *)(a4 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a4 + 288) = 0;
      *(_BYTE *)(a4 + 311) = 0;
    }
    v26[0] = (unsigned __int8 *)(a4 + 320);
    v26[1] = 0;
    v26[2] = (unsigned __int8 *)a4;
    v27 = 1;
    *(_BYTE *)(a4 + 320) = 0;
    *(_DWORD *)(a4 + 664) = 0;
    v18 = *(unsigned int *)(a4 + 776);
    if ((_DWORD)v18)
    {
      v19 = *(_QWORD *)(a4 + 768);
      v20 = 56 * v18;
      do
      {
        if (*(char *)(v19 + v20 - 9) < 0)
          operator delete(*(void **)(v19 + v20 - 32));
        v20 -= 56;
      }
      while (v20);
    }
    *(_DWORD *)(a4 + 776) = 0;
    llvm::opt::Arg::getAsString();
    if (v25 >= 0)
      v21 = __p;
    else
      v21 = (void **)__p[0];
    if (v25 >= 0)
      v22 = v25 & 0x7F;
    else
      v22 = (size_t)__p[1];
    sub_22E3B89A8(v26, v21, v22);
    sub_22E3B89A8(v26, v10, v11);
    if (v25 < 0)
      operator delete(__p[0]);
    sub_22E3BB0B8((uint64_t)v26);
  }
  v17 = 0;
  v16 = 0;
  v15 = 0;
  return v17 | v15 | v16;
}

double sub_22E6EC3DC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  double result;
  const char *v6;
  size_t v7;
  size_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  __int128 __dst;
  unint64_t v13;

  v4 = sub_22E721714(a3, a2);
  if (!v4)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    return result;
  }
  v6 = **(const char ***)(v4 + 48);
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = v8;
    v13 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v13) = v7;
    p_dst = &__dst;
    if (!v7)
      goto LABEL_11;
  }
  memmove(p_dst, v6, v8);
LABEL_11:
  *((_BYTE *)p_dst + v8) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 16) = v13;
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

uint64_t sub_22E6EC4C4(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  const char **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  size_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  char v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;

  v4 = sub_22E721714(a2, a1);
  if (v4)
  {
    v5 = v4;
    v6 = *(const char ***)(v4 + 48);
    if (*v6)
      strlen(*v6);
    v21 = 0;
    if (!llvm::getAsSignedInteger() && v21 == (unsigned __int8 *)(int)v21)
    {
      v17 = v21;
      v16 = 0x100000000;
      return v17 | v16;
    }
    *(_QWORD *)(a3 + 312) = 0x17500000000;
    if (*(char *)(a3 + 311) < 0)
    {
      **(_BYTE **)(a3 + 288) = 0;
      *(_QWORD *)(a3 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a3 + 288) = 0;
      *(_BYTE *)(a3 + 311) = 0;
    }
    v21 = (unsigned __int8 *)(a3 + 320);
    v22 = 0;
    v23 = a3;
    v24 = 1;
    *(_BYTE *)(a3 + 320) = 0;
    *(_DWORD *)(a3 + 664) = 0;
    v7 = *(unsigned int *)(a3 + 776);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)(a3 + 768);
      v9 = 56 * v7;
      do
      {
        if (*(char *)(v8 + v9 - 9) < 0)
          operator delete(*(void **)(v8 + v9 - 32));
        v9 -= 56;
      }
      while (v9);
    }
    *(_DWORD *)(a3 + 776) = 0;
    llvm::opt::Arg::getAsString();
    if (v20 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    if (v20 >= 0)
      v11 = v20 & 0x7F;
    else
      v11 = (size_t)__p[1];
    sub_22E3B89A8(&v21, v10, v11);
    v12 = **(_QWORD **)(v5 + 48);
    v13 = v21;
    if (!v21)
    {
      v13 = (unsigned __int8 *)sub_22E3B8AAC(v22);
      v21 = v13;
    }
    v13[*v13 + 1] = 1;
    v14 = v21;
    v15 = *v21;
    *v21 = v15 + 1;
    *(_QWORD *)&v14[8 * v15 + 16] = v12;
    if (v20 < 0)
      operator delete(__p[0]);
    sub_22E3BB0B8((uint64_t)&v21);
  }
  v16 = 0;
  v17 = 0;
  return v17 | v16;
}

uint64_t sub_22E6EC688(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t *v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[2];
  _OWORD v13[2];
  uint64_t v14;

  sub_22E72534C(a1, a2, a3, a4, a5, v13);
  v12[0] = v13[0];
  v12[1] = v13[1];
  v5 = *(uint64_t **)&v13[0];
  if (*(_QWORD *)&v13[0] == v14)
    return 0;
  v11 = v14;
  do
  {
    v9 = *v5;
    v7 = v5 + 1;
    v8 = v9;
    v10 = *(_QWORD *)(v9 + 16);
    if (!v10)
      v10 = v8;
    *(_BYTE *)(v10 + 44) |= 1u;
    *(_QWORD *)&v12[0] = v7;
    sub_22E725424((uint64_t)v12);
    result = v8;
    v5 = *(uint64_t **)&v12[0];
  }
  while (*(_QWORD *)&v12[0] != v11);
  return result;
}

uint64_t sub_22E6EC70C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  sub_22E6ECFB0(a1, a2, a3, (uint64_t)&v12);
  v10 = v12;
  v3 = v14;
  v11 = v13;
  v4 = (uint64_t *)v12;
  if ((_QWORD)v12 == v14)
    return 0;
  do
  {
    v8 = *v4;
    v7 = v4 + 1;
    v5 = v8;
    v9 = *(_QWORD *)(v8 + 16);
    if (!v9)
      v9 = v5;
    *(_BYTE *)(v9 + 44) |= 1u;
    *(_QWORD *)&v10 = v7;
    sub_22E7219D8((uint64_t)&v10);
    v4 = (uint64_t *)v10;
  }
  while ((_QWORD)v10 != v3);
  return v5;
}

uint64_t sub_22E6EC790(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  int v3;

  result = sub_22E6EBFB4(a1, 10);
  if (result)
  {
    v2 = result;
    result = llvm::opt::Option::matches();
    if ((_DWORD)result)
    {
      v3 = ***(unsigned __int8 ***)(v2 + 48);
      if (v3 == 115)
        return 1;
      else
        return 2 * (v3 == 122);
    }
  }
  return result;
}

void sub_22E6EC7E4(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X2>, int64_t a4@<X3>, __int128 *a5@<X4>, unsigned __int8 **a6@<X8>)
{
  char v10;
  int v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  void (***v17)(void **__return_ptr, _QWORD, void *, size_t);
  void **v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void *v24;
  size_t v25;
  __int128 v26;
  llvm *v27;
  char v28;
  llvm *v29;
  const char *v30;
  unsigned __int8 *v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  unsigned __int8 *v49;
  char v50;
  int v51;
  unsigned __int8 *v52;
  size_t v53;
  size_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unsigned int *v59;
  unsigned int v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  void *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unsigned __int8 *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  __int128 *v86;
  __int128 v87;
  __int128 v88;
  unsigned __int8 *v89;
  size_t v90;
  int64_t v91;
  __int16 v92;
  __int16 v93;
  unsigned __int8 *v94;
  char v95;
  void *v96[2];
  uint64_t v97;
  char v98;
  uint64_t v99;
  std::error_code v100;

  v99 = *MEMORY[0x24BDAC8D0];
  v10 = *(_BYTE *)(a1 + 47);
  v11 = v10;
  v12 = v10 & 0x7F;
  if (v11 < 0)
    v12 = *(_QWORD *)(a1 + 32);
  if (!v12)
  {
    v13 = *(_BYTE *)(a2 + 191);
    v14 = v13;
    v15 = v13 & 0x7F;
    if (v14 < 0)
      v15 = *(_QWORD *)(a2 + 176);
    if (!v15)
    {
      llvm::vfs::getRealFileSystem((llvm::vfs *)a1);
      return;
    }
  }
  v16 = *a5;
  v87 = v16;
  v17 = (void (***)(void **__return_ptr, _QWORD, void *, size_t))v16;
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  if ((_QWORD)v16)
  {
    v86 = &v87;
  }
  else
  {
    sub_22F418838(a3, a4, 0, (std::string::size_type *)v96);
    v61 = *(_OWORD *)v96;
    v96[0] = 0;
    v96[1] = 0;
    v62 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
    v87 = v61;
    if (v62)
    {
      p_shared_owners = (unint64_t *)&v62->__shared_owners_;
      do
        v64 = __ldaxr(p_shared_owners);
      while (__stlxr(v64 - 1, p_shared_owners));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
      v65 = (std::__shared_weak_count *)v96[1];
      if (v96[1])
      {
        v66 = (unint64_t *)((char *)v96[1] + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v17 = (void (***)(void **__return_ptr, _QWORD, void *, size_t))v87;
    }
    else
    {
      v17 = (void (***)(void **__return_ptr, _QWORD, void *, size_t))v61;
    }
    v86 = &v87;
    if (!v17)
    {
      sub_22E721A4C((llvm::cas *)&v85, (_QWORD **)&v86);
      v79 = v85;
      *a6 = v85;
      if (v79)
      {
        v80 = (unsigned int *)(v79 + 8);
        do
          v81 = __ldxr(v80);
        while (__stxr(v81 + 1, v80));
      }
      v85 = 0;
      goto LABEL_112;
    }
  }
  v18 = (void **)(a1 + 24);
  v19 = *(_BYTE *)(a2 + 191);
  v20 = v19;
  v21 = v19 & 0x7F;
  if (v20 >= 0)
    v22 = v21;
  else
    v22 = *(_QWORD *)(a2 + 176);
  if (v22)
    v18 = (void **)(a2 + 168);
  v23 = *((_BYTE *)v18 + 23);
  if (v23 >= 0)
    v24 = v18;
  else
    v24 = *v18;
  if (v23 >= 0)
    v25 = v23 & 0x7F;
  else
    v25 = (size_t)v18[1];
  (**v17)(v96, v17, v24, v25);
  if ((v98 & 1) != 0)
  {
    v34 = v96[0];
    v96[0] = 0;
    *(_QWORD *)&v88 = v34;
    sub_22E6C5940((char **)&v88, (char **)&v89);
    if ((_QWORD)v88)
      (*(void (**)(_QWORD))(*(_QWORD *)v88 + 8))(v88);
    *(_QWORD *)(a4 + 312) = 0x20BB00000000;
    if (*(char *)(a4 + 311) < 0)
    {
      **(_BYTE **)(a4 + 288) = 0;
      *(_QWORD *)(a4 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a4 + 288) = 0;
      *(_BYTE *)(a4 + 311) = 0;
    }
    v89 = (unsigned __int8 *)(a4 + 320);
    v90 = 0;
    v91 = a4;
    v92 = 1;
    *(_BYTE *)(a4 + 320) = 0;
    *(_DWORD *)(a4 + 664) = 0;
    v40 = *(unsigned int *)(a4 + 776);
    if ((_DWORD)v40)
    {
      v41 = *(_QWORD *)(a4 + 768);
      v42 = 56 * v40;
      do
      {
        if (*(char *)(v41 + v42 - 9) < 0)
          operator delete(*(void **)(v41 + v42 - 32));
        v42 -= 56;
      }
      while (v42);
    }
    *(_DWORD *)(a4 + 776) = 0;
    sub_22E3B89A8(&v89, v24, v25);
    sub_22E3BB0B8((uint64_t)&v89);
    sub_22E721A4C((llvm::cas *)&v84, (_QWORD **)&v86);
    v43 = v84;
    *a6 = v84;
    if (v43)
    {
      v44 = (unsigned int *)(v43 + 8);
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v84 = 0;
    goto LABEL_107;
  }
  v26 = v87;
  if (v22)
  {
    v87 = 0uLL;
    v27 = (llvm *)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)v26 + 32))(v26, v96);
    if (v28)
    {
      sub_22F418BA8((uint64_t)&v89);
      if ((v92 & 1) == 0)
      {
        sub_22F418E18((uint64_t *)&v89, (uint64_t)&v94);
        if ((v92 & 1) != 0)
        {
          v82 = v89;
          v89 = 0;
          if (v82)
            (*(void (**)(unsigned __int8 *))(*(_QWORD *)v82 + 8))(v82);
        }
        goto LABEL_25;
      }
      v31 = v89;
      v95 |= 1u;
    }
    else
    {
      v29 = (llvm *)llvm::inconvertibleErrorCode(v27);
      v100.__cat_ = (const std::error_category *)"RootID does not exist";
      llvm::createStringError(v29, v100, v30);
      v95 |= 1u;
      v31 = v89;
    }
    v94 = v31;
LABEL_25:
    if (*((_QWORD *)&v26 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v26 + 1) + 16))(*((_QWORD *)&v26 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
      }
    }
    goto LABEL_56;
  }
  v87 = 0uLL;
  v88 = v26;
  llvm::cas::createCASFileSystem();
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
  if (*((_QWORD *)&v88 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if ((v90 & 1) != 0)
  {
    v95 |= 1u;
    v94 = v89;
  }
  else
  {
    v95 &= ~1u;
    v94 = v89;
    if (v89)
    {
      v38 = (unsigned int *)(v89 + 8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
  }
LABEL_56:
  v46 = v94;
  if ((v95 & 1) != 0)
  {
    v94 = 0;
    *(_QWORD *)&v88 = v46;
    sub_22E6C5940((char **)&v88, (char **)&v89);
    if ((_QWORD)v88)
      (*(void (**)(_QWORD))(*(_QWORD *)v88 + 8))(v88);
    *(_QWORD *)(a4 + 312) = 0x20BF00000000;
    if (*(char *)(a4 + 311) < 0)
    {
      **(_BYTE **)(a4 + 288) = 0;
      *(_QWORD *)(a4 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a4 + 288) = 0;
      *(_BYTE *)(a4 + 311) = 0;
    }
    v89 = (unsigned __int8 *)(a4 + 320);
    v90 = 0;
    v91 = a4;
    v92 = 1;
    *(_BYTE *)(a4 + 320) = 0;
    *(_DWORD *)(a4 + 664) = 0;
    v55 = *(unsigned int *)(a4 + 776);
    if ((_DWORD)v55)
    {
      v56 = *(_QWORD *)(a4 + 768);
      v57 = 56 * v55;
      do
      {
        if (*(char *)(v56 + v57 - 9) < 0)
          operator delete(*(void **)(v56 + v57 - 32));
        v57 -= 56;
      }
      while (v57);
    }
    *(_DWORD *)(a4 + 776) = 0;
    sub_22E3B89A8(&v89, v24, v25);
    sub_22E3BB0B8((uint64_t)&v89);
    sub_22E721A4C((llvm::cas *)&v83, (_QWORD **)&v86);
    v58 = v83;
    *a6 = v83;
    if (v58)
    {
      v59 = (unsigned int *)(v58 + 8);
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
    v83 = 0;
  }
  else
  {
    *a6 = v94;
    v94 = 0;
    v49 = *(unsigned __int8 **)(a1 + 48);
    v48 = a1 + 48;
    v47 = v49;
    v50 = *(_BYTE *)(v48 + 23);
    v51 = v50;
    if (v50 >= 0)
      v52 = (unsigned __int8 *)v48;
    else
      v52 = v47;
    v53 = v50 & 0x7F;
    if (v51 >= 0)
      v54 = v53;
    else
      v54 = *(_QWORD *)(v48 + 8);
    if (v54)
    {
      v93 = 261;
      v89 = v52;
      v90 = v54;
      if ((*(unsigned int (**)(unsigned __int8 *, unsigned __int8 **))(*(_QWORD *)v46 + 40))(v46, &v89))
      {
        *(_QWORD *)(a4 + 312) = 0x20C000000000;
        if (*(char *)(a4 + 311) < 0)
        {
          **(_BYTE **)(a4 + 288) = 0;
          *(_QWORD *)(a4 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(a4 + 288) = 0;
          *(_BYTE *)(a4 + 311) = 0;
        }
        v89 = (unsigned __int8 *)(a4 + 320);
        v90 = 0;
        v91 = a4;
        v92 = 1;
        *(_BYTE *)(a4 + 320) = 0;
        *(_DWORD *)(a4 + 664) = 0;
        v68 = *(unsigned int *)(a4 + 776);
        if ((_DWORD)v68)
        {
          v69 = *(_QWORD *)(a4 + 768);
          v70 = 56 * v68;
          do
          {
            if (*(char *)(v69 + v70 - 9) < 0)
              operator delete(*(void **)(v69 + v70 - 32));
            v70 -= 56;
          }
          while (v70);
        }
        *(_DWORD *)(a4 + 776) = 0;
        sub_22E3B89A8(&v89, v52, v54);
        sub_22E3BB0B8((uint64_t)&v89);
      }
    }
  }
  v71 = v94;
  if ((v95 & 1) != 0)
  {
    v94 = 0;
    if (!v71)
      goto LABEL_107;
    goto LABEL_106;
  }
  if (v94)
  {
    v72 = (unsigned int *)(v94 + 8);
    do
    {
      v73 = __ldaxr(v72);
      v74 = v73 - 1;
    }
    while (__stlxr(v74, v72));
    if (!v74)
LABEL_106:
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v71 + 8))(v71);
  }
LABEL_107:
  if ((v98 & 1) != 0)
  {
    v75 = v96[0];
    v96[0] = 0;
    if (v75)
      (*(void (**)(void *))(*(_QWORD *)v75 + 8))(v75);
  }
  else if (v96[1] != &v97)
  {
    free(v96[1]);
  }
LABEL_112:
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
  if (*((_QWORD *)&v87 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
}

uint64_t sub_22E6ECF40(uint64_t a1, const void *a2, uint64_t a3, __int128 *a4)
{
  size_t v6;
  __int128 v8;

  if (!*(_BYTE *)(a1 + 40))
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (v6 == a3 && (!v6 || !memcmp(*(const void **)a1, a2, v6)))
    {
      v8 = *a4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a4 + 2);
      *(_OWORD *)(a1 + 16) = v8;
      *((_QWORD *)a4 + 1) = 0;
      *((_QWORD *)a4 + 2) = 0;
      *(_QWORD *)a4 = 0;
      *(_BYTE *)(a1 + 40) = 1;
    }
  }
  return a1;
}

double sub_22E6ECFB0@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t Range;
  uint64_t v9;
  uint64_t v10;
  double result;
  __int128 v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  v17 = a3;
  Range = llvm::opt::ArgList::getRange();
  v9 = *(_QWORD *)(a1 + 8);
  v10 = v9 + 8 * HIDWORD(Range);
  *(_QWORD *)&v14 = v9 + 8 * Range;
  *((_QWORD *)&v14 + 1) = v10;
  v15 = __PAIR64__(a3, a2);
  sub_22E7219D8((uint64_t)&v14);
  *(_QWORD *)&v12 = v10;
  *((_QWORD *)&v12 + 1) = v10;
  v13 = __PAIR64__(a3, a2);
  sub_22E7219D8((uint64_t)&v12);
  *(_OWORD *)a4 = v14;
  *(_QWORD *)(a4 + 16) = v15;
  result = *(double *)&v12;
  *(_OWORD *)(a4 + 24) = v12;
  *(_QWORD *)(a4 + 40) = v13;
  return result;
}

uint64_t sub_22E6ED074(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  int v10;

  v2 = llvm::StringRef::find();
  if (v2 == -1)
  {
    v7 = 0;
    v6 = 0;
    v3 = a1;
    v4 = a2;
    if (!a2)
    {
LABEL_15:
      v8 = 0;
      goto LABEL_24;
    }
  }
  else
  {
    v3 = a1;
    if (a2 >= v2)
      v4 = v2;
    else
      v4 = a2;
    if (a2 >= v2 + 1)
      v5 = v2 + 1;
    else
      v5 = a2;
    v6 = (_QWORD *)(a1 + v5);
    v7 = a2 - v5;
    if (!v4)
      goto LABEL_15;
  }
  if (v4 != 13)
  {
    if (v4 != 4 || *(_DWORD *)v3 != 1701143913)
    {
      v8 = 255;
      goto LABEL_24;
    }
    goto LABEL_15;
  }
  if (*(_QWORD *)v3 == 0x6576726573657270 && *(_QWORD *)(v3 + 5) == 0x6E6769732D657672)
  {
    v8 = 1;
  }
  else if (*(_QWORD *)v3 ^ 0x6576697469736F70 | *(_QWORD *)(v3 + 5) ^ 0x6F72657A2D657669)
  {
    v8 = -1;
  }
  else
  {
    v8 = 2;
  }
LABEL_24:
  v10 = v8;
  if (v7)
  {
    if (v7 == 13)
    {
      if (*v6 == 0x6576726573657270 && *(_QWORD *)((char *)v6 + 5) == 0x6E6769732D657672)
      {
        v10 = 1;
      }
      else if (*v6 ^ 0x6576697469736F70 | *(_QWORD *)((char *)v6 + 5) ^ 0x6F72657A2D657669)
      {
        v10 = -1;
      }
      else
      {
        v10 = 2;
      }
    }
    else if (v7 == 4 && *(_DWORD *)v6 == 1701143913)
    {
      v10 = 0;
    }
    else
    {
      v10 = 255;
    }
  }
  return v8 | (v10 << 8);
}

void sub_22E6ED258(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, const void *a5, size_t a6)
{
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  const char **v17;
  char *v18;
  size_t v19;
  BOOL v20;
  unint64_t v21;
  _QWORD *v22;
  size_t v23;
  size_t v24;
  size_t v25;
  const void *v26;
  size_t v27;
  int v28;
  BOOL v29;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v41;
  unint64_t v42[3];
  int v43;
  void *__p[2];
  _BYTE v45[24];
  char v46;

  v43 = 0;
  v8 = 0uLL;
  *(_OWORD *)__p = 0u;
  memset(v45, 0, sizeof(v45));
  v42[0] = a2;
  v42[1] = a3;
  v42[2] = (unint64_t)&v43;
  v9 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v9)
  {
    v10 = 8 * v9;
    v11 = *(uint64_t **)(a3 + 8);
    while (!*v11)
    {
      ++v11;
      v10 -= 8;
      if (!v10)
      {
        v12 = 0;
        v8 = 0uLL;
        goto LABEL_66;
      }
    }
  }
  else
  {
    v11 = *(uint64_t **)(a3 + 8);
  }
  v13 = *(_QWORD *)(a3 + 8) + 8 * v9;
  if (v11 == (uint64_t *)v13)
  {
    v12 = 0;
LABEL_66:
    *(_DWORD *)a1 = v12;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)v45;
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)v45 = 0;
    *(_OWORD *)(a1 + 32) = v8;
    *(_QWORD *)&v45[8] = 0;
    *(_QWORD *)&v45[16] = 0;
    goto LABEL_67;
  }
  v14 = *v11;
LABEL_9:
  if (llvm::opt::Option::matches())
  {
    v15 = **(_QWORD **)(v14 + 48);
    v41 = v15;
    if (v15)
      v16 = strlen((const char *)v15);
    else
      v16 = 0;
    if (v16 == a6 && (!a6 || !memcmp((const void *)v15, a5, a6)))
    {
      v28 = 1;
    }
    else
    {
      if (v16 != 10
        || (*(_QWORD *)v15 == 0x6968747972657665 ? (v20 = *(unsigned __int16 *)(v15 + 8) == 26478) : (v20 = 0), !v20))
      {
        v46 = 45;
        v21 = llvm::StringRef::find();
        if (v21 == -1)
        {
          v26 = 0;
          v27 = 0;
          v22 = (_QWORD *)v15;
          v23 = v16;
          v24 = v16;
        }
        else
        {
          v22 = (_QWORD *)v15;
          v23 = v16;
          if (v16 >= v21)
            v24 = v21;
          else
            v24 = v16;
          if (v16 >= v21 + 1)
            v25 = v21 + 1;
          else
            v25 = v16;
          v26 = (const void *)(v41 + v25);
          v27 = v16 - v25;
        }
        if (v24 == 2 && (*(_WORD *)v22 == 28526 ? (v29 = v27 == a6) : (v29 = 0), v29 && (!a6 || !memcmp(v26, a5, a6))))
        {
          v31 = 3;
        }
        else
        {
          if (v23 != 13)
            goto LABEL_54;
          if (*v22 != 0x79726576652D6F6ELL || *(_QWORD *)((char *)v22 + 5) != 0x676E696874797265)
            goto LABEL_54;
          v31 = 4;
        }
        v43 = v31;
        MEMORY[0x2348A0C14](__p, "");
        v34 = *(std::__shared_weak_count **)&v45[16];
        *(_QWORD *)&v45[8] = 0;
        *(_QWORD *)&v45[16] = 0;
        if (v34)
        {
          p_shared_owners = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldaxr(p_shared_owners);
          while (__stlxr(v36 - 1, p_shared_owners));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
LABEL_54:
        v32 = v11 + 1;
        while (v32 != (uint64_t *)v13)
        {
          v33 = *v32++;
          v14 = v33;
          if (v33)
          {
            v11 = v32 - 1;
            goto LABEL_9;
          }
        }
        v12 = v43;
        v8 = *(_OWORD *)&v45[8];
        goto LABEL_66;
      }
      v28 = 2;
    }
    v43 = v28;
    sub_22E721D88(v42, v14, ".*", 2uLL);
    goto LABEL_54;
  }
  if (!llvm::opt::Option::matches())
    goto LABEL_54;
  v43 = 5;
  v17 = *(const char ***)(v14 + 48);
  v18 = (char *)*v17;
  v19 = *v17 ? strlen(*v17) : 0;
  if (sub_22E721D88(v42, v14, v18, v19))
    goto LABEL_54;
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  v37 = *(std::__shared_weak_count **)&v45[16];
  if (*(_QWORD *)&v45[16])
  {
    v38 = (unint64_t *)(*(_QWORD *)&v45[16] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
LABEL_67:
  if ((v45[7] & 0x80000000) != 0)
    operator delete(__p[0]);
}

uint64_t sub_22E6ED5E8(uint64_t result, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  void *v15;
  unsigned __int8 *v16;
  char v17;
  BOOL v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  BOOL v28;
  void *v29;
  size_t v30;
  size_t v31;
  unsigned __int8 *v32[3];
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if (a3 != a4)
  {
    v34 = v9;
    v35 = v8;
    v36 = v6;
    v37 = v7;
    v13 = a3;
    v15 = (void *)result;
    v16 = (unsigned __int8 *)(a5 + 320);
    do
    {
      v17 = *(_BYTE *)(v13 + 23);
      v18 = v17 < 0;
      if (v17 >= 0)
        v19 = (unsigned __int8 *)v13;
      else
        v19 = *(unsigned __int8 **)v13;
      v20 = v17 & 0x7F;
      if (v18)
        v21 = *(_QWORD *)(v13 + 8);
      else
        v21 = v20;
      result = sub_22F1DD7A4(v19, v21, 0);
      if (result | v22)
      {
        v23 = a6[1] | v22;
        *a6 |= result;
        a6[1] = v23;
      }
      else
      {
        *(_QWORD *)(a5 + 312) = 0x18800000000;
        if (*(char *)(a5 + 311) < 0)
        {
          **(_BYTE **)(a5 + 288) = 0;
          *(_QWORD *)(a5 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(a5 + 288) = 0;
          *(_BYTE *)(a5 + 311) = 0;
        }
        v32[0] = v16;
        v32[1] = 0;
        v32[2] = (unsigned __int8 *)a5;
        v33 = 1;
        *(_BYTE *)(a5 + 320) = 0;
        *(_DWORD *)(a5 + 664) = 0;
        v24 = *(unsigned int *)(a5 + 776);
        if ((_DWORD)v24)
        {
          v25 = *(_QWORD *)(a5 + 768);
          v26 = 56 * v24;
          do
          {
            if (*(char *)(v25 + v26 - 9) < 0)
              operator delete(*(void **)(v25 + v26 - 32));
            v26 -= 56;
          }
          while (v26);
        }
        *(_DWORD *)(a5 + 776) = 0;
        sub_22E3B89A8(v32, v15, a2);
        v27 = *(_BYTE *)(v13 + 23);
        v28 = v27 < 0;
        if (v27 >= 0)
          v29 = (void *)v13;
        else
          v29 = *(void **)v13;
        v30 = v27 & 0x7F;
        if (v28)
          v31 = *(_QWORD *)(v13 + 8);
        else
          v31 = v30;
        sub_22E3B89A8(v32, v29, v31);
        result = sub_22E3BB0B8((uint64_t)v32);
      }
      v13 += 24;
    }
    while (v13 != a4);
  }
  return result;
}

void sub_22E6ED754(uint64_t a1, int a2, uint64_t a3, int64x2_t *a4)
{
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  const char *v11;
  size_t v12;
  const char *v13;
  size_t v14;
  size_t v15;
  __int128 *v16;
  uint64_t v17;
  const void *v18;
  size_t v19;
  __int128 *p_dst;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _BOOL8 v35;
  const char *v36;
  size_t v37;
  uint64_t last_not_of;
  unint64_t v39;
  size_t v40;
  size_t v41;
  __int128 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int64x2_t v53;
  char v54;
  char *v55;
  const char *__src;
  unint64_t v57;
  __int128 __dst;
  unint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64x2_t v66;
  unint64_t v67;
  int64x2_t *v68;

  sub_22E72179C(a1, a2, (uint64_t)&v62);
  v60 = v62;
  v5 = v64;
  v61 = v63;
  v6 = (uint64_t **)v62;
  if ((_QWORD)v62 != v64)
  {
    while (1)
    {
      v7 = *v6;
      v8 = **v6;
      if (*(_BYTE *)(v8 + 36) == 3)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
          v10 = strlen(*(const char **)(v8 + 8));
        else
          v10 = 0;
        v17 = v10 != 0;
        if (v10)
          v18 = (const void *)(v9 + 1);
        else
          v18 = (const void *)v9;
        v19 = v10 - v17;
        if (v10 - v17 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_97;
        if (v19 >= 0x17)
        {
          v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v21 = v19 | 7;
          v22 = v21 + 1;
          p_dst = (__int128 *)operator new(v21 + 1);
          *((_QWORD *)&__dst + 1) = v19;
          v59 = v22 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v59) = v10 - v17;
          p_dst = &__dst;
          if (v10 == v17)
          {
LABEL_24:
            *((_BYTE *)p_dst + v19) = 0;
            v23 = a4->u64[1];
            v24 = a4[1].u64[0];
            if (v23 >= v24)
            {
              v25 = a4->i64[0];
              v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - a4->i64[0]) >> 3);
              v27 = v26 + 1;
              if (v26 + 1 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_97;
              if (0x5555555555555556 * ((uint64_t)(v24 - v25) >> 3) > v27)
                v27 = 0x5555555555555556 * ((uint64_t)(v24 - v25) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - v25) >> 3) >= 0x555555555555555)
                v28 = 0xAAAAAAAAAAAAAAALL;
              else
                v28 = v27;
              v68 = a4 + 1;
              if (v28)
              {
                if (v28 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_98;
                v29 = (char *)operator new(24 * v28);
              }
              else
              {
                v29 = 0;
              }
              v48 = &v29[24 * v26];
              *(_OWORD *)v48 = __dst;
              *((_QWORD *)v48 + 2) = v59;
              v59 = 0;
              __dst = 0uLL;
              if (v23 != v25)
              {
                v49 = &v29[24 * v26];
                do
                {
                  v50 = *(_OWORD *)(v23 - 24);
                  *((_QWORD *)v49 - 1) = *(_QWORD *)(v23 - 8);
                  *(_OWORD *)(v49 - 24) = v50;
                  v49 -= 24;
                  *(_QWORD *)(v23 - 16) = 0;
                  *(_QWORD *)(v23 - 8) = 0;
                  *(_QWORD *)(v23 - 24) = 0;
                  v23 -= 24;
                }
                while (v23 != v25);
                goto LABEL_91;
              }
              goto LABEL_92;
            }
            goto LABEL_67;
          }
        }
        memmove(p_dst, v18, v19);
        goto LABEL_24;
      }
      if (llvm::opt::Option::matches())
      {
        v11 = *(const char **)(*v7 + 8);
        if (v11)
          v12 = strlen(v11);
        else
          v12 = 0;
        v35 = v12 != 0;
        if (v12)
          v36 = v11 + 1;
        else
          v36 = v11;
        v37 = v12 - v35;
        __src = v36;
        v57 = v12 - v35;
        last_not_of = llvm::StringRef::find_last_not_of();
        if (last_not_of + 1 < v57)
          v39 = last_not_of + 1;
        else
          v39 = v57;
        v40 = v57 - v37 + v39;
        if (v57 >= v40)
          v41 = v40;
        else
          v41 = v57;
        if (v41 > 0x7FFFFFFFFFFFFFF7)
LABEL_97:
          abort();
        if (v41 >= 0x17)
        {
          v43 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v41 | 7) != 0x17)
            v43 = v41 | 7;
          v44 = v43 + 1;
          v42 = (__int128 *)operator new(v43 + 1);
          *((_QWORD *)&__dst + 1) = v41;
          v59 = v44 | 0x8000000000000000;
          *(_QWORD *)&__dst = v42;
        }
        else
        {
          HIBYTE(v59) = v41;
          v42 = &__dst;
          if (!v41)
          {
LABEL_66:
            *((_BYTE *)v42 + v41) = 0;
            v23 = a4->u64[1];
            v24 = a4[1].u64[0];
            if (v23 >= v24)
            {
              v45 = a4->i64[0];
              v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - a4->i64[0]) >> 3);
              v47 = v46 + 1;
              if (v46 + 1 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_97;
              if (0x5555555555555556 * ((uint64_t)(v24 - v45) >> 3) > v47)
                v47 = 0x5555555555555556 * ((uint64_t)(v24 - v45) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - v45) >> 3) >= 0x555555555555555)
                v28 = 0xAAAAAAAAAAAAAAALL;
              else
                v28 = v47;
              v68 = a4 + 1;
              if (v28)
              {
                if (v28 > 0xAAAAAAAAAAAAAAALL)
LABEL_98:
                  sub_22E3B3F8C();
                v29 = (char *)operator new(24 * v28);
              }
              else
              {
                v29 = 0;
              }
              v48 = &v29[24 * v46];
              *(_OWORD *)v48 = __dst;
              *((_QWORD *)v48 + 2) = v59;
              v59 = 0;
              __dst = 0uLL;
              if (v23 != v45)
              {
                v49 = &v29[24 * v46];
                do
                {
                  v52 = *(_OWORD *)(v23 - 24);
                  *((_QWORD *)v49 - 1) = *(_QWORD *)(v23 - 8);
                  *(_OWORD *)(v49 - 24) = v52;
                  v49 -= 24;
                  *(_QWORD *)(v23 - 16) = 0;
                  *(_QWORD *)(v23 - 8) = 0;
                  *(_QWORD *)(v23 - 24) = 0;
                  v23 -= 24;
                }
                while (v23 != v45);
                goto LABEL_91;
              }
LABEL_92:
              v54 = 0;
              v53 = vdupq_n_s64(v23);
              v49 = v48;
LABEL_93:
              v55 = v48 + 24;
              a4->i64[0] = (uint64_t)v49;
              a4->i64[1] = (uint64_t)(v48 + 24);
              v66 = v53;
              a4[1].i64[0] = (uint64_t)&v29[24 * v28];
              v67 = v24;
              v65 = v53.i64[0];
              sub_22E3B8B94((uint64_t)&v65);
              a4->i64[1] = (uint64_t)v55;
              if (v54 < 0)
                operator delete((void *)__dst);
              goto LABEL_95;
            }
            goto LABEL_67;
          }
        }
        memmove(v42, __src, v41);
        goto LABEL_66;
      }
      v13 = *(const char **)v7[6];
      v14 = strlen(v13);
      if (v14 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_97;
      v15 = v14;
      if (v14 >= 0x17)
        break;
      HIBYTE(v59) = v14;
      v16 = &__dst;
      if (v14)
        goto LABEL_37;
LABEL_38:
      *((_BYTE *)v16 + v15) = 0;
      v23 = a4->u64[1];
      v24 = a4[1].u64[0];
      if (v23 >= v24)
      {
        v32 = a4->i64[0];
        v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - a4->i64[0]) >> 3);
        v34 = v33 + 1;
        if (v33 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_97;
        if (0x5555555555555556 * ((uint64_t)(v24 - v32) >> 3) > v34)
          v34 = 0x5555555555555556 * ((uint64_t)(v24 - v32) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - v32) >> 3) >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v34;
        v68 = a4 + 1;
        if (v28)
        {
          if (v28 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_98;
          v29 = (char *)operator new(24 * v28);
        }
        else
        {
          v29 = 0;
        }
        v48 = &v29[24 * v33];
        *(_OWORD *)v48 = __dst;
        *((_QWORD *)v48 + 2) = v59;
        v59 = 0;
        __dst = 0uLL;
        if (v23 == v32)
          goto LABEL_92;
        v49 = &v29[24 * v33];
        do
        {
          v51 = *(_OWORD *)(v23 - 24);
          *((_QWORD *)v49 - 1) = *(_QWORD *)(v23 - 8);
          *(_OWORD *)(v49 - 24) = v51;
          v49 -= 24;
          *(_QWORD *)(v23 - 16) = 0;
          *(_QWORD *)(v23 - 8) = 0;
          *(_QWORD *)(v23 - 24) = 0;
          v23 -= 24;
        }
        while (v23 != v32);
LABEL_91:
        v53 = *a4;
        v24 = a4[1].u64[0];
        v54 = HIBYTE(v59);
        goto LABEL_93;
      }
LABEL_67:
      *(_OWORD *)v23 = __dst;
      *(_QWORD *)(v23 + 16) = v59;
      a4->i64[1] = v23 + 24;
LABEL_95:
      *(_QWORD *)&v60 = v60 + 8;
      sub_22E721830((uint64_t)&v60);
      v6 = (uint64_t **)v60;
      if ((_QWORD)v60 == v5)
        return;
    }
    v30 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v30 = v14 | 7;
    v31 = v30 + 1;
    v16 = (__int128 *)operator new(v30 + 1);
    *((_QWORD *)&__dst + 1) = v15;
    v59 = v31 | 0x8000000000000000;
    *(_QWORD *)&__dst = v16;
LABEL_37:
    memmove(v16, v13, v15);
    goto LABEL_38;
  }
}

void sub_22E6EDD24(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, __int128 *), uint64_t a4, uint64_t a5, __int16 a6)
{
  int v11;
  uint64_t v12;
  _BYTE *v13;
  char v14;
  __int16 v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  size_t *v39;
  void **v40;
  void *v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  size_t *v78;
  void **v79;
  void *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  size_t *v85;
  void **v86;
  void *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  size_t *v92;
  void **v93;
  void *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  size_t *v99;
  void **v100;
  void *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  size_t *v106;
  void **v107;
  void *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  _BOOL4 v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unint64_t v136;
  int v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  uint64_t v144;
  unint64_t v145;
  unsigned int v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unsigned int v153;
  unint64_t v154;
  unint64_t v155;
  int v156;
  unsigned int v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  int v161;
  unsigned int v162;
  unint64_t v163;
  unint64_t v164;
  int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  _BOOL4 v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int v186;
  unsigned int v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unsigned int v202;
  _BOOL4 v203;
  unsigned int v204;
  unint64_t v205;
  unsigned int v206;
  int v207;
  uint64_t v208;
  unsigned int v209;
  unint64_t v210;
  int v211;
  unsigned int v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  size_t *v217;
  void **v218;
  void *v219;
  unint64_t v220;
  unsigned int v221;
  uint64_t v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  unint64_t v227;
  __int16 v228;
  unsigned int v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  uint64_t v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int v240;
  unint64_t v241;
  unsigned int v242;
  uint64_t v243;
  unsigned int v244;
  unsigned int v245;
  int v246;
  unsigned int v247;
  unsigned int v248;
  unsigned int v249;
  __int16 v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  int v254;
  int v255;
  unsigned int v256;
  int v257;
  unsigned int v258;
  unsigned int v259;
  uint64_t v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  uint64_t v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  unsigned int v270;
  int v271;
  unint64_t v272;
  char v273;
  unint64_t v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  int v279;
  unsigned int v280;
  unsigned int v281;
  unsigned int v282;
  int v283;
  int v284;
  int v285;
  unsigned int v286;
  int v287;
  uint64_t v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  int v296;
  unsigned int v297;
  unsigned int v298;
  int v299;
  unsigned int v300;
  int v301;
  unsigned int v302;
  int v303;
  int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  uint64_t v310;
  unsigned int v311;
  unsigned int v312;
  uint64_t v313;
  uint64_t v314;
  unsigned int v315;
  uint64_t v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;
  unsigned int v323;
  uint64_t v324;
  unsigned int v325;
  unsigned int v326;
  unsigned int v327;
  uint64_t v328;
  unsigned int v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  unsigned int v333;
  unsigned int v334;
  unsigned int v335;
  unint64_t v336;
  unint64_t v337;
  unsigned int v338;
  unsigned int v339;
  unsigned int v340;
  unsigned int v341;
  unsigned int v342;
  unsigned int v343;
  unsigned int v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  unsigned int v349;
  unsigned int v350;
  uint64_t v351;
  unsigned int v352;
  unsigned int v353;
  uint64_t v354;
  unsigned int v355;
  char v356;
  unsigned int v357;
  unsigned int v358;
  unsigned int v359;
  unsigned int v360;
  unsigned int v361;
  unsigned int v362;
  unsigned int v363;
  unsigned int v364;
  unsigned int v365;
  uint64_t v366;
  unsigned int v367;
  unsigned int v368;
  unint64_t v369;
  unsigned int v370;
  unsigned int v371;
  unsigned int v372;
  uint64_t v373;
  int v374;
  unsigned int v375;
  unsigned int v376;
  unsigned int v377;
  unsigned int v378;
  unsigned int v379;
  unsigned int v380;
  unint64_t v381;
  unint64_t v382;
  uint64_t v383;
  uint64_t v384;
  size_t *v385;
  void **p_s2;
  void *v387;
  uint64_t v388;
  unsigned int v389;
  unsigned int v390;
  uint64_t v391;
  unsigned int v392;
  unsigned int v393;
  unsigned int v394;
  unsigned int v395;
  __int16 v396;
  unsigned int v397;
  int v398;
  unsigned int v399;
  int v400;
  int v401;
  int v402;
  int v403;
  int v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int v407;
  int v408;
  uint64_t v409;
  unsigned int v410;
  unsigned int v411;
  unsigned int v412;
  unsigned int v413;
  unsigned int v414;
  int v415;
  unint64_t v416;
  int v417;
  uint64_t v418;
  unsigned int v419;
  uint64_t v420;
  uint64_t v421;
  unsigned int v422;
  int v423;
  unsigned int v424;
  int v425;
  unsigned int v426;
  unsigned int v427;
  int v428;
  __int16 v429;
  unsigned int v430;
  unsigned int v431;
  unsigned int v432;
  uint64_t v433;
  unsigned int v434;
  unsigned int v435;
  int v436;
  unsigned int v437;
  unsigned int v438;
  __int16 v439;
  unsigned int v440;
  int v441;
  unsigned int v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  char *v447;
  char *i;
  uint64_t v449;
  int v450;
  uint64_t v451;
  int v452;
  char *v453;
  uint64_t v454;
  char *v455;
  uint64_t v456;
  uint64_t v457;
  __int16 v458;
  unint64_t v459;
  unint64_t v460;
  unint64_t v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  const char *v465;
  uint64_t j;
  const char *v467;
  char v468;
  int v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  _QWORD v473[2];
  const char *v474;
  __int16 v475;
  size_t __n[2];
  unint64_t v477;
  __int16 v478;
  void *v479[2];
  unint64_t v480;
  uint64_t v481;
  __int128 v482;
  void *v483[2];
  unint64_t v484;
  uint64_t v485;
  __int128 v486;
  uint64_t v487;
  __int128 v488;
  uint64_t v489;
  __int128 v490;
  void *v491[2];
  unint64_t v492;
  void *v493[2];
  unint64_t v494;
  void *v495[2];
  unint64_t v496;
  void *v497[2];
  unint64_t v498;
  void *v499[2];
  unint64_t v500;
  uint64_t v501;
  __int128 v502;
  uint64_t v503;
  __int128 v504;
  void *__dst[2];
  unint64_t v506;
  _BYTE __p[24];
  __int16 v508;
  void *__s2;
  uint64_t v510;
  uint64_t v511;
  _BYTE *v512;
  _BYTE *v513;
  int v514;
  uint64_t v515;
  int v516;
  size_t *v517;
  uint64_t v518;

  v518 = *MEMORY[0x24BDAC8D0];
  if ((a6 & 0x700) != 0x200 && a6 != 2)
  {
    v11 = *((_DWORD *)a1 + 63);
    if ((v11 - 23) >= 7)
      v12 = 2990;
    else
      v12 = 196;
    v13 = *(_BYTE **)sub_22F1D5FAC(v11);
    v14 = 1;
    BYTE1(v513) = 1;
    if (*v13)
    {
      __s2 = v13;
      v14 = 3;
    }
    LOBYTE(v513) = v14;
    sub_22E6E094C(a2, v12, (uint64_t)&__s2, a3, a4);
    v15 = *((_WORD *)a1 + 74);
    if ((v15 & 0x400) != 0)
    {
      sub_22E6E0868(a2, 797, (uint64_t (*)(uint64_t, _QWORD *))a3, a4);
      v15 = *((_WORD *)a1 + 74);
    }
    v16 = *(uint64_t *)((char *)a1 + 140);
    if ((v15 & 0x800) != 0)
    {
      sub_22E6E0868(a2, 562, (uint64_t (*)(uint64_t, _QWORD *))a3, a4);
      v16 = *(uint64_t *)((char *)a1 + 140);
      if ((v16 & 0x200000000000000) == 0)
      {
LABEL_12:
        if ((v16 & 0x2000000000000000) == 0)
          goto LABEL_13;
        goto LABEL_35;
      }
    }
    else if ((v16 & 0x200000000000000) == 0)
    {
      goto LABEL_12;
    }
    v24 = *(_DWORD *)(a2 + 8);
    if (v24 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v24 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v24) = "-cl-single-precision-constant";
    ++*(_DWORD *)(a2 + 8);
    v16 = *(uint64_t *)((char *)a1 + 140);
    if ((v16 & 0x2000000000000000) == 0)
    {
LABEL_13:
      if ((v16 & 0x1000000000000000) == 0)
        goto LABEL_14;
      goto LABEL_38;
    }
LABEL_35:
    v25 = *(_DWORD *)(a2 + 8);
    if (v25 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v25 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v25) = "-cl-finite-math-only";
    ++*(_DWORD *)(a2 + 8);
    v16 = *(uint64_t *)((char *)a1 + 140);
    if ((v16 & 0x1000000000000000) == 0)
    {
LABEL_14:
      if ((v16 & 0x400000000000000) == 0)
        goto LABEL_15;
      goto LABEL_41;
    }
LABEL_38:
    v26 = *(_DWORD *)(a2 + 8);
    if (v26 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v26 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v26) = "-cl-unsafe-math-optimizations";
    ++*(_DWORD *)(a2 + 8);
    v16 = *(uint64_t *)((char *)a1 + 140);
    if ((v16 & 0x400000000000000) == 0)
    {
LABEL_15:
      if ((v16 & 0x800000000000000) == 0)
        goto LABEL_47;
      goto LABEL_44;
    }
LABEL_41:
    v27 = *(_DWORD *)(a2 + 8);
    if (v27 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v27 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v27) = "-cl-fast-relaxed-math";
    ++*(_DWORD *)(a2 + 8);
    if ((*(uint64_t *)((char *)a1 + 140) & 0x800000000000000) == 0)
    {
LABEL_47:
      if ((a1[12] & 0x800) != 0)
      {
        v29 = *(_DWORD *)(a2 + 8);
        if (v29 >= *(_DWORD *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v29 = *(_DWORD *)(a2 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v29) = "-fgpu-rdc";
        ++*(_DWORD *)(a2 + 8);
      }
      v30 = *((_DWORD *)a1 + 208);
      if (v30)
        sub_22E7216A8(a2, "-fgpu-default-stream=", a3, a4, 4, 0, v30);
      if ((a1[13] & 0x10) != 0)
      {
        v31 = *(_DWORD *)(a2 + 8);
        if (v31 >= *(_DWORD *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v31 = *(_DWORD *)(a2 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v31) = "-fhip-new-launch-api";
        ++*(_DWORD *)(a2 + 8);
      }
      if ((a1[12] & 0x1000) != 0)
      {
        v32 = *(_DWORD *)(a2 + 8);
        if (v32 >= *(_DWORD *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = *(_DWORD *)(a2 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v32) = "-fgpu-allow-device-init";
        ++*(_DWORD *)(a2 + 8);
      }
      v33 = *(uint64_t *)((char *)a1 + 100);
      if ((v33 & 0x100000000) != 0)
      {
        v34 = *(_DWORD *)(a2 + 8);
        if (v34 >= *(_DWORD *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = *(_DWORD *)(a2 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v34) = "-fgpu-defer-diag";
        ++*(_DWORD *)(a2 + 8);
        v33 = *(uint64_t *)((char *)a1 + 100);
      }
      if ((v33 & 0x200000000) != 0)
      {
        v35 = *(_DWORD *)(a2 + 8);
        if (v35 >= *(_DWORD *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v35 = *(_DWORD *)(a2 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v35) = "-fgpu-exclude-wrong-side-overloads";
        ++*(_DWORD *)(a2 + 8);
        v33 = *(uint64_t *)((char *)a1 + 100);
      }
      if ((_DWORD)v33 != 1024)
      {
        LOWORD(v513) = 264;
        LODWORD(__s2) = v33;
        sub_22E721364(a2, "--gpu-max-threads-per-block=", a3, a4, 4, (uint64_t *)&__s2);
      }
      if (*((char *)a1 + 695) < 0)
      {
        sub_22E3BB2B4(__dst, (void *)a1[84], a1[85]);
      }
      else
      {
        *(_OWORD *)__dst = *((_OWORD *)a1 + 42);
        v506 = a1[86];
      }
      v477 = v506;
      *(_OWORD *)__n = *(_OWORD *)__dst;
      __dst[1] = 0;
      v506 = 0;
      __dst[0] = 0;
      v510 = 0;
      __s2 = 0;
      v511 = 0;
      v36 = HIBYTE(v477);
      v37 = HIBYTE(v477) & 0x7F;
      if ((v477 & 0x8000000000000000) == 0)
        v38 = HIBYTE(v477) & 0x7F;
      else
        v38 = __n[1];
      if (!v38)
      {
        if ((v477 & 0x8000000000000000) != 0)
        {
          v41 = (void *)__n[0];
          if (!memcmp((const void *)__n[0], &__s2, __n[1]))
          {
LABEL_94:
            operator delete(v41);
LABEL_95:
            if (SHIBYTE(v506) < 0)
              operator delete(__dst[0]);
            v42 = *((_DWORD *)a1 + 52);
            if (v42)
            {
              LOWORD(v513) = 264;
              LODWORD(__s2) = v42;
              sub_22E721364(a2, "-fmax-tokens=", a3, a4, 4, (uint64_t *)&__s2);
            }
            if ((*((_DWORD *)a1 + 13) & 0x400000) == 0)
            {
              v43 = *(_DWORD *)(a2 + 8);
              if (v43 >= *(_DWORD *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v43 = *(_DWORD *)(a2 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a2 + 8 * v43) = "-fno-access-control";
              ++*(_DWORD *)(a2 + 8);
            }
            if ((*((_BYTE *)a1 + 197) & 0x20) != 0)
            {
              v44 = *(_DWORD *)(a2 + 8);
              if (v44 >= *(_DWORD *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v44 = *(_DWORD *)(a2 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a2 + 8 * v44) = "-fallow-editor-placeholders";
              ++*(_DWORD *)(a2 + 8);
            }
            if ((a1[1] & 0x2000000000) != 0)
            {
              v45 = *(_DWORD *)(a2 + 8);
              if (v45 >= *(_DWORD *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v45 = *(_DWORD *)(a2 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a2 + 8 * v45) = "-fapple-kext";
              ++*(_DWORD *)(a2 + 8);
            }
            v46 = a1[24];
            if ((v46 & 0x100000000) != 0)
            {
              v47 = *(_DWORD *)(a2 + 8);
              if (v47 >= *(_DWORD *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v47 = *(_DWORD *)(a2 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a2 + 8 * v47) = "-fapple-pragma-pack";
              ++*(_DWORD *)(a2 + 8);
              v46 = a1[24];
            }
            if ((v46 & 0x200000000) != 0)
            {
              v48 = *(_DWORD *)(a2 + 8);
              if (v48 >= *(_DWORD *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v48 = *(_DWORD *)(a2 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a2 + 8 * v48) = "-fxl-pragma-pack";
              ++*(_DWORD *)(a2 + 8);
            }
            v49 = *(uint64_t *)((char *)a1 + 20);
            v50 = *a1;
            v51 = (*a1 >> 3) & 1;
            if ((*a1 & 0x200) != 0)
              v51 = 1;
            if (((v49 >> 36) & 1) != 0 && ((v49 >> 36) & 1) != v51)
            {
              v52 = *(_DWORD *)(a2 + 8);
              if (v52 >= *(_DWORD *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v52 = *(_DWORD *)(a2 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a2 + 8 * v52) = "-fdouble-square-bracket-attributes";
              ++*(_DWORD *)(a2 + 8);
              v49 = *(uint64_t *)((char *)a1 + 20);
              v50 = *a1;
            }
            if ((v50 & 0x208) != 0 && (v49 & 0x1000000000) == 0)
            {
              v53 = *(_DWORD *)(a2 + 8);
              if (v53 >= *(_DWORD *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v53 = *(_DWORD *)(a2 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a2 + 8 * v53) = "-fno-double-square-bracket-attributes";
              ++*(_DWORD *)(a2 + 8);
              v50 = *a1;
            }
            v54 = a1[1];
            if ((v54 & 0x400000000000000) != 0
              && ((v54 & 0x400000000000000) != 0) != ((v50 >> 12) & 1))
            {
              v55 = *(_DWORD *)(a2 + 8);
              if (v55 >= *(_DWORD *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v55 = *(_DWORD *)(a2 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a2 + 8 * v55) = "-fcoroutines-ts";
              ++*(_DWORD *)(a2 + 8);
              v54 = a1[1];
            }
            if ((v54 & 0x2000000000000000) != 0)
            {
              v56 = *(_DWORD *)(a2 + 8);
              if (v56 >= *(_DWORD *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v56 = *(_DWORD *)(a2 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a2 + 8 * v56) = "-fexperimental-library";
              ++*(_DWORD *)(a2 + 8);
              v54 = a1[1];
            }
            if ((v54 & 0x200000000000000) == 0)
            {
              v57 = *(_DWORD *)(a2 + 8);
              if (v57 >= *(_DWORD *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v57 = *(_DWORD *)(a2 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a2 + 8 * v57) = "-fno-gnu-inline-asm";
              ++*(_DWORD *)(a2 + 8);
            }
            v504 = 0uLL;
            v503 = 0;
            sub_22E618148(&v503, a1[47], a1[48], 0xAAAAAAAAAAAAAAABLL * ((a1[48] - a1[47]) >> 3));
            v58 = v503;
            *(_QWORD *)__p = v503;
            *(_OWORD *)&__p[8] = v504;
            v504 = 0uLL;
            v503 = 0;
            v59 = *(_QWORD *)&__p[8];
            v510 = 0;
            __s2 = 0;
            v511 = 0;
            __n[0] = (size_t)&__s2;
            sub_22E3B3CC8((void ***)__n);
            if (v59 != v58)
              sub_22E7214C8(a2, "-fprofile-list=", a3, a4, 4, (__int128 **)__p);
            __s2 = __p;
            sub_22E3B3CC8((void ***)&__s2);
            __s2 = &v503;
            sub_22E3B3CC8((void ***)&__s2);
            v60 = a1[24];
            if ((v60 & 0x800000000) != 0)
            {
              v61 = *(_DWORD *)(a2 + 8);
              if (v61 >= *(_DWORD *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v61 = *(_DWORD *)(a2 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a2 + 8 * v61) = "-fapinotes";
              ++*(_DWORD *)(a2 + 8);
              v60 = a1[24];
            }
            if ((v60 & 0x1000000000) != 0)
            {
              v62 = *(_DWORD *)(a2 + 8);
              if (v62 >= *(_DWORD *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v62 = *(_DWORD *)(a2 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a2 + 8 * v62) = "-fapinotes-modules";
              ++*(_DWORD *)(a2 + 8);
            }
            if ((*(uint64_t *)((char *)a1 + 140) & 0x4000000000000) != 0)
            {
              v63 = *(_DWORD *)(a2 + 8);
              if (v63 >= *(_DWORD *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v63 = *(_DWORD *)(a2 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a2 + 8 * v63) = "-ftarget-variant-availability-checks";
              ++*(_DWORD *)(a2 + 8);
            }
            v64 = a1[29];
            if ((v64 & 0x100000000) != 0)
            {
              v65 = *(_DWORD *)(a2 + 8);
              if (v65 >= *(_DWORD *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v65 = *(_DWORD *)(a2 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a2 + 8 * v65) = "-ftyped-memory-operations-experimental";
              ++*(_DWORD *)(a2 + 8);
              v64 = a1[29];
            }
            if ((v64 & 0x200000000) != 0)
            {
              v66 = *(_DWORD *)(a2 + 8);
              if (v66 >= *(_DWORD *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v66 = *(_DWORD *)(a2 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a2 + 8 * v66) = "-ftyped-cxx-new-delete";
              ++*(_DWORD *)(a2 + 8);
            }
            if ((*(_BYTE *)a1 & 0x80) != 0)
            {
              v67 = *(_DWORD *)(a2 + 8);
              if (v67 >= *(_DWORD *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v67 = *(_DWORD *)(a2 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a2 + 8 * v67) = "-fborland-extensions";
              ++*(_DWORD *)(a2 + 8);
            }
            v502 = 0uLL;
            v501 = 0;
            sub_22E618148(&v501, a1[68], a1[69], 0xAAAAAAAAAAAAAAABLL * ((a1[69] - a1[68]) >> 3));
            v68 = v501;
            *(_QWORD *)__p = v501;
            *(_OWORD *)&__p[8] = v502;
            v502 = 0uLL;
            v501 = 0;
            v69 = *(_QWORD *)&__p[8];
            v510 = 0;
            __s2 = 0;
            v511 = 0;
            __n[0] = (size_t)&__s2;
            sub_22E3B3CC8((void ***)__n);
            if (v69 != v68)
              sub_22E7214C8(a2, "-fcomment-block-commands=", a3, a4, 9, (__int128 **)__p);
            __s2 = __p;
            sub_22E3B3CC8((void ***)&__s2);
            __s2 = &v501;
            sub_22E3B3CC8((void ***)&__s2);
            if (*((_BYTE *)a1 + 568))
            {
              v70 = *(_DWORD *)(a2 + 8);
              if (v70 >= *(_DWORD *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v70 = *(_DWORD *)(a2 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a2 + 8 * v70) = "-fparse-all-comments";
              ++*(_DWORD *)(a2 + 8);
            }
            if ((*((_WORD *)a1 + 74) & 0x4000) != 0)
            {
              v71 = *(_DWORD *)(a2 + 8);
              if (v71 >= *(_DWORD *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v71 = *(_DWORD *)(a2 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a2 + 8 * v71) = "-fcomplete-member-pointers";
              ++*(_DWORD *)(a2 + 8);
            }
            v72 = *((_DWORD *)a1 + 105);
            if (v72 != 2)
              sub_22E7216A8(a2, "-fcf-runtime-abi=", a3, a4, 4, 3u, v72);
            if ((*(uint64_t *)((char *)a1 + 140) & 0x20000000000) != 0)
            {
              v73 = *(_DWORD *)(a2 + 8);
              if (v73 >= *(_DWORD *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v73 = *(_DWORD *)(a2 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a2 + 8 * v73) = "-fno-constant-cfstrings";
              ++*(_DWORD *)(a2 + 8);
            }
            if (*((char *)a1 + 735) < 0)
            {
              sub_22E3BB2B4(v499, (void *)a1[89], a1[90]);
            }
            else
            {
              *(_OWORD *)v499 = *(_OWORD *)(a1 + 89);
              v500 = a1[91];
            }
            v477 = v500;
            *(_OWORD *)__n = *(_OWORD *)v499;
            v499[1] = 0;
            v500 = 0;
            v499[0] = 0;
            v510 = 0;
            __s2 = 0;
            v511 = 0;
            v74 = HIBYTE(v477);
            v75 = __n[1];
            v76 = HIBYTE(v477) & 0x7F;
            if ((v477 & 0x8000000000000000) == 0)
              v77 = HIBYTE(v477) & 0x7F;
            else
              v77 = __n[1];
            if (!v77)
            {
              if ((v477 & 0x8000000000000000) != 0)
              {
                v80 = (void *)__n[0];
                if (!memcmp((const void *)__n[0], &__s2, __n[1]))
                {
LABEL_209:
                  operator delete(v80);
LABEL_210:
                  if (SHIBYTE(v500) < 0)
                    operator delete(v499[0]);
                  if (*((char *)a1 + 759) < 0)
                  {
                    sub_22E3BB2B4(v497, (void *)a1[92], a1[93]);
                  }
                  else
                  {
                    *(_OWORD *)v497 = *((_OWORD *)a1 + 46);
                    v498 = a1[94];
                  }
                  v477 = v498;
                  *(_OWORD *)__n = *(_OWORD *)v497;
                  v497[1] = 0;
                  v498 = 0;
                  v497[0] = 0;
                  v510 = 0;
                  __s2 = 0;
                  v511 = 0;
                  v81 = HIBYTE(v477);
                  v82 = __n[1];
                  v83 = HIBYTE(v477) & 0x7F;
                  if ((v477 & 0x8000000000000000) == 0)
                    v84 = HIBYTE(v477) & 0x7F;
                  else
                    v84 = __n[1];
                  if (!v84)
                  {
                    if ((v477 & 0x8000000000000000) != 0)
                    {
                      v87 = (void *)__n[0];
                      if (!memcmp((const void *)__n[0], &__s2, __n[1]))
                      {
LABEL_235:
                        operator delete(v87);
LABEL_236:
                        if (SHIBYTE(v498) < 0)
                          operator delete(v497[0]);
                        if (*((char *)a1 + 783) < 0)
                        {
                          sub_22E3BB2B4(v495, (void *)a1[95], a1[96]);
                        }
                        else
                        {
                          *(_OWORD *)v495 = *(_OWORD *)(a1 + 95);
                          v496 = a1[97];
                        }
                        v477 = v496;
                        *(_OWORD *)__n = *(_OWORD *)v495;
                        v495[1] = 0;
                        v496 = 0;
                        v495[0] = 0;
                        v510 = 0;
                        __s2 = 0;
                        v511 = 0;
                        v88 = HIBYTE(v477);
                        v89 = __n[1];
                        v90 = HIBYTE(v477) & 0x7F;
                        if ((v477 & 0x8000000000000000) == 0)
                          v91 = HIBYTE(v477) & 0x7F;
                        else
                          v91 = __n[1];
                        if (!v91)
                        {
                          if ((v477 & 0x8000000000000000) != 0)
                          {
                            v94 = (void *)__n[0];
                            if (!memcmp((const void *)__n[0], &__s2, __n[1]))
                            {
LABEL_261:
                              operator delete(v94);
LABEL_262:
                              if (SHIBYTE(v496) < 0)
                                operator delete(v495[0]);
                              if (*((char *)a1 + 807) < 0)
                              {
                                sub_22E3BB2B4(v493, (void *)a1[98], a1[99]);
                              }
                              else
                              {
                                *(_OWORD *)v493 = *((_OWORD *)a1 + 49);
                                v494 = a1[100];
                              }
                              v477 = v494;
                              *(_OWORD *)__n = *(_OWORD *)v493;
                              v493[1] = 0;
                              v494 = 0;
                              v493[0] = 0;
                              v510 = 0;
                              __s2 = 0;
                              v511 = 0;
                              v95 = HIBYTE(v477);
                              v96 = __n[1];
                              v97 = HIBYTE(v477) & 0x7F;
                              if ((v477 & 0x8000000000000000) == 0)
                                v98 = HIBYTE(v477) & 0x7F;
                              else
                                v98 = __n[1];
                              if (!v98)
                              {
                                if ((v477 & 0x8000000000000000) != 0)
                                {
                                  v101 = (void *)__n[0];
                                  if (!memcmp((const void *)__n[0], &__s2, __n[1]))
                                  {
LABEL_287:
                                    operator delete(v101);
LABEL_288:
                                    if (SHIBYTE(v494) < 0)
                                      operator delete(v493[0]);
                                    if (*((char *)a1 + 831) < 0)
                                    {
                                      sub_22E3BB2B4(v491, (void *)a1[101], a1[102]);
                                    }
                                    else
                                    {
                                      *(_OWORD *)v491 = *(_OWORD *)(a1 + 101);
                                      v492 = a1[103];
                                    }
                                    v477 = v492;
                                    *(_OWORD *)__n = *(_OWORD *)v491;
                                    v491[1] = 0;
                                    v492 = 0;
                                    v491[0] = 0;
                                    v510 = 0;
                                    __s2 = 0;
                                    v511 = 0;
                                    v102 = HIBYTE(v477);
                                    v103 = __n[1];
                                    v104 = HIBYTE(v477) & 0x7F;
                                    if ((v477 & 0x8000000000000000) == 0)
                                      v105 = HIBYTE(v477) & 0x7F;
                                    else
                                      v105 = __n[1];
                                    if (!v105)
                                    {
                                      if ((v477 & 0x8000000000000000) != 0)
                                      {
                                        v108 = (void *)__n[0];
                                        if (!memcmp((const void *)__n[0], &__s2, __n[1]))
                                        {
LABEL_313:
                                          operator delete(v108);
LABEL_314:
                                          if (SHIBYTE(v492) < 0)
                                            operator delete(v491[0]);
                                          if ((*((_BYTE *)a1 + 180) & 1) != 0)
                                          {
                                            v109 = *(_DWORD *)(a2 + 8);
                                            if (v109 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v109 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v109) = "-fexperimental-new-constant-interpreter";
                                            ++*(_DWORD *)(a2 + 8);
                                          }
                                          v110 = a1[1];
                                          if ((v110 & 0x400000000000) != 0)
                                          {
                                            v111 = *(_DWORD *)(a2 + 8);
                                            if (v111 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v111 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v111) = "-fcxx-exceptions";
                                            ++*(_DWORD *)(a2 + 8);
                                            v110 = a1[1];
                                          }
                                          if ((v110 & 0x800000000000) != 0)
                                          {
                                            v112 = *(_DWORD *)(a2 + 8);
                                            if (v112 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v112 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v112) = "-fasync-exceptions";
                                            ++*(_DWORD *)(a2 + 8);
                                          }
                                          v113 = *a1;
                                          v114 = *a1 & 0x5000;
                                          v115 = *(uint64_t *)((char *)a1 + 20) & 0x800000000000;
                                          if (!v115 && v114 == 4096)
                                          {
                                            v116 = *(_DWORD *)(a2 + 8);
                                            if (v116 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v116 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v116) = "-fno-cxx-modules";
                                            ++*(_DWORD *)(a2 + 8);
                                            v113 = *a1;
                                            v114 = *a1 & 0x5000;
                                            v115 = *(uint64_t *)((char *)a1 + 20) & 0x800000000000;
                                          }
                                          v117 = v114 != 4096;
                                          if (v115 && (((v115 != 0) ^ v117) & 1) == 0)
                                          {
                                            v118 = *(_DWORD *)(a2 + 8);
                                            if (v118 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v118 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v118) = "-fcxx-modules";
                                            ++*(_DWORD *)(a2 + 8);
                                            v113 = *a1;
                                          }
                                          if ((v113 & 0x20000000) != 0
                                            && (((v113 >> 30) & 1 ^ ((v113 & 0x20000000) >> 29)) & 1) == 0)
                                          {
                                            v119 = *(_DWORD *)(a2 + 8);
                                            if (v119 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v119 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v119) = "-fdollars-in-identifiers";
                                            ++*(_DWORD *)(a2 + 8);
                                            v113 = *a1;
                                          }
                                          if ((v113 & 0x60000000) == 0)
                                          {
                                            v120 = *(_DWORD *)(a2 + 8);
                                            if (v120 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v120 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v120) = "-fno-dollars-in-identifiers";
                                            ++*(_DWORD *)(a2 + 8);
                                          }
                                          if ((*(uint64_t *)((char *)a1 + 140) & 0x800000000) == 0)
                                          {
                                            v121 = *(_DWORD *)(a2 + 8);
                                            if (v121 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v121 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v121) = "-fno-elide-constructors";
                                            ++*(_DWORD *)(a2 + 8);
                                          }
                                          if ((*(uint64_t *)((char *)a1 + 20) & 0x40000000000) != 0)
                                          {
                                            v122 = *(_DWORD *)(a2 + 8);
                                            if (v122 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v122 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v122) = "-femit-all-decls";
                                            ++*(_DWORD *)(a2 + 8);
                                          }
                                          if ((a1[1] & 0x100000000000) != 0)
                                          {
                                            v123 = *(_DWORD *)(a2 + 8);
                                            if (v123 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v123 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v123) = "-fexceptions";
                                            ++*(_DWORD *)(a2 + 8);
                                          }
                                          v124 = a1[30] & 7;
                                          if (v124)
                                            sub_22E7216A8(a2, "-exception-model", a3, a4, 6, 4u, v124);
                                          if ((a1[1] & 0x1000000000000) != 0)
                                          {
                                            v125 = *(_DWORD *)(a2 + 8);
                                            if (v125 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v125 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v125) = "-fignore-exceptions";
                                            ++*(_DWORD *)(a2 + 8);
                                          }
                                          v126 = *((_DWORD *)a1 + 61);
                                          v127 = (v126 >> 11) & 3;
                                          if (v127)
                                          {
                                            sub_22E7216A8(a2, "-ffloat16-excess-precision=", a3, a4, 4, 5u, v127);
                                            v126 = *((_DWORD *)a1 + 61);
                                          }
                                          v128 = (v126 >> 13) & 3;
                                          if (v128)
                                          {
                                            sub_22E7216A8(a2, "-fbfloat16-excess-precision=", a3, a4, 4, 6u, v128);
                                            v126 = *((_DWORD *)a1 + 61);
                                          }
                                          v129 = (v126 >> 9) & 3;
                                          if (v129 != 3)
                                          {
                                            sub_22E7216A8(a2, "-ffp-eval-method=", a3, a4, 4, 7u, v129);
                                            v126 = *((_DWORD *)a1 + 61);
                                          }
                                          v130 = (v126 >> 7) & 3;
                                          if (v130)
                                            sub_22E7216A8(a2, "-ffp-exception-behavior=", a3, a4, 4, 8u, v130);
                                          v131 = *((unsigned int *)a1 + 13);
                                          v132 = v131 >> 10;
                                          if (((*((_DWORD *)a1 + 13) >> 10) & 1) != 0
                                            && ((*((_DWORD *)a1 + 13) >> 10) & 1) != ((*(uint64_t *)((char *)a1 + 140) & 0x400000000000000) != 0))
                                          {
                                            v133 = *(_DWORD *)(a2 + 8);
                                            if (v133 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v133 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v133) = "-ffast-math";
                                            ++*(_DWORD *)(a2 + 8);
                                            v131 = *((unsigned int *)a1 + 13);
                                            v132 = v131 >> 10;
                                          }
                                          if ((v131 & 0x800) != 0)
                                          {
                                            v135 = *(_DWORD *)(a2 + 8);
                                            if (v135 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v135 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v135) = "-frelaxed-math";
                                            ++*(_DWORD *)(a2 + 8);
                                            v136 = *((unsigned int *)a1 + 13);
                                            v134 = *((_DWORD *)a1 + 13) & 0x800;
                                            v131 = v136 >> 13;
                                            v132 = v136 >> 10;
                                          }
                                          else
                                          {
                                            v134 = 0;
                                            LODWORD(v131) = v131 >> 13;
                                          }
                                          v137 = v131 & 1;
                                          v138 = v132 & 1;
                                          if (v134 | *(uint64_t *)((char *)a1 + 140) & 0x1000000000000000)
                                            v138 = 1;
                                          if (v137 != v138)
                                          {
                                            v139 = *(_DWORD *)(a2 + 8);
                                            if (v139 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v139 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v139) = "-menable-unsafe-fp-math";
                                            ++*(_DWORD *)(a2 + 8);
                                          }
                                          if ((*(uint64_t *)((char *)a1 + 20) & 0x80000000000) != 0)
                                          {
                                            v140 = *(_DWORD *)(a2 + 8);
                                            if (v140 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v140 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v140) = "-fmath-errno";
                                            ++*(_DWORD *)(a2 + 8);
                                          }
                                          if ((*((unsigned __int16 *)a1 + 124) | (*((char *)a1 + 250) << 16)) < 0)
                                            sub_22E7216A8(a2, "-fextend-arguments=", a3, a4, 4, 9u, 1);
                                          v141 = a1[25];
                                          if ((v141 & 0x100000000) != 0)
                                          {
                                            v142 = *(_DWORD *)(a2 + 8);
                                            if (v142 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v142 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v142) = "-ffixed-point";
                                            ++*(_DWORD *)(a2 + 8);
                                            v141 = a1[25];
                                          }
                                          if ((v141 & 0x400000000) == 0)
                                          {
                                            v143 = *(_DWORD *)(a2 + 8);
                                            if (v143 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v143 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v143) = "-fno-c++-static-destructors";
                                            ++*(_DWORD *)(a2 + 8);
                                          }
                                          v144 = ((unint64_t)a1[24] >> 38) & 3;
                                          if ((_DWORD)v144)
                                          {
                                            LOWORD(v513) = 264;
                                            LODWORD(__s2) = v144;
                                            sub_22E721364(a2, "-fsanitize-address-field-padding=", a3, a4, 4, (uint64_t *)&__s2);
                                          }
                                          v145 = *((unsigned int *)a1 + 13);
                                          v146 = (v145 >> 19) & 1;
                                          v147 = v145 >> 13;
                                          v148 = (v145 >> 13) & 1;
                                          v149 = v145 >> 20;
                                          v150 = v145 >> 10;
                                          v151 = v145 >> 12;
                                          v152 = v145 >> 18;
                                          if (v146 != (_DWORD)v148 && v146)
                                          {
                                            v153 = *(_DWORD *)(a2 + 8);
                                            if (v153 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v153 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v153) = "-freciprocal-math";
                                            ++*(_DWORD *)(a2 + 8);
                                            v154 = *((unsigned int *)a1 + 13);
                                            v148 = (v154 >> 13) & 1;
                                            v149 = v154 >> 20;
                                            v150 = v154 >> 10;
                                            v151 = v154 >> 12;
                                            v155 = v154 >> 18;
                                            v147 = v154 >> 13;
                                            LOBYTE(v152) = v155;
                                          }
                                          v156 = v149 & 1;
                                          if (v156 != (_DWORD)v148 && v156)
                                          {
                                            v157 = *(_DWORD *)(a2 + 8);
                                            if (v157 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v157 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v157) = "-fapprox-func";
                                            ++*(_DWORD *)(a2 + 8);
                                            v158 = *((unsigned int *)a1 + 13);
                                            v150 = v158 >> 10;
                                            v151 = v158 >> 12;
                                            v159 = v158 >> 18;
                                            v147 = v158 >> 13;
                                            LOBYTE(v152) = v159;
                                          }
                                          v160 = *(uint64_t *)((char *)a1 + 140);
                                          v161 = v150 & 1;
                                          if ((v160 & 0x2000000000000000) != 0)
                                            v161 = 1;
                                          if ((v151 & 1) != 0 && (v151 & 1) != v161)
                                          {
                                            v162 = *(_DWORD *)(a2 + 8);
                                            if (v162 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v162 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v162) = "-ffinite-math-only";
                                            ++*(_DWORD *)(a2 + 8);
                                            v163 = *((unsigned int *)a1 + 13);
                                            v160 = *(uint64_t *)((char *)a1 + 140);
                                            v164 = v163 >> 18;
                                            v147 = v163 >> 13;
                                            LOBYTE(v152) = v164;
                                          }
                                          v165 = v147 & 1;
                                          if ((v160 & 0x800000000000000) != 0)
                                            v165 = 1;
                                          if ((v152 & 1) != 0 && (v152 & 1) != v165)
                                          {
                                            v166 = *(_DWORD *)(a2 + 8);
                                            if (v166 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v166 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v166) = "-fno-signed-zeros";
                                            ++*(_DWORD *)(a2 + 8);
                                          }
                                          if ((*((_DWORD *)a1 + 61) & 0x70) != 0x10)
                                          {
                                            v167 = *(_DWORD *)(a2 + 8);
                                            if (v167 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v167 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v167) = "-frounding-math";
                                            ++*(_DWORD *)(a2 + 8);
                                          }
                                          if ((*((_DWORD *)a1 + 13) & 0x4000) != 0)
                                          {
                                            v168 = *(_DWORD *)(a2 + 8);
                                            if (v168 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v168 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v168) = "-fprotect-parens";
                                            ++*(_DWORD *)(a2 + 8);
                                          }
                                          if ((a1[1] & 0x40000000000000) != 0)
                                          {
                                            v169 = *(_DWORD *)(a2 + 8);
                                            if (v169 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v169 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v169) = "-ffreestanding";
                                            ++*(_DWORD *)(a2 + 8);
                                          }
                                          v170 = *a1;
                                          v171 = HIDWORD(*a1) & 1;
                                          if ((_DWORD)v171 != *a1 >> 31 && (_DWORD)v171)
                                          {
                                            v172 = *(_DWORD *)(a2 + 8);
                                            if (v172 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v172 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v172) = "-fgnu-keywords";
                                            ++*(_DWORD *)(a2 + 8);
                                            v170 = *a1;
                                          }
                                          if ((v170 & 0x180000000) == 0x80000000)
                                          {
                                            v173 = *(_DWORD *)(a2 + 8);
                                            if (v173 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v173 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v173) = "-fno-gnu-keywords";
                                            ++*(_DWORD *)(a2 + 8);
                                            v170 = *a1;
                                          }
                                          v174 = (v170 & 0x101) != 0;
                                          if ((*((_DWORD *)a1 + 13) & 0x80) != 0
                                            && ((v174 ^ (*((_DWORD *)a1 + 13) >> 7) & 1) & 1) == 0)
                                          {
                                            v175 = *(_DWORD *)(a2 + 8);
                                            if (v175 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v175 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v175) = "-fgnu89-inline";
                                            ++*(_DWORD *)(a2 + 8);
                                          }
                                          if ((*(uint64_t *)((char *)a1 + 20) & 0x100000000000) != 0)
                                          {
                                            v176 = *(_DWORD *)(a2 + 8);
                                            if (v176 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v176 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v176) = "-fheinous-gnu-extensions";
                                            ++*(_DWORD *)(a2 + 8);
                                          }
                                          if ((*(uint64_t *)((char *)a1 + 140) & 0x4000000000000000) != 0)
                                          {
                                            v177 = *(_DWORD *)(a2 + 8);
                                            if (v177 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v177 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v177) = "-fexperimental-strict-floating-point";
                                            ++*(_DWORD *)(a2 + 8);
                                          }
                                          if ((*((_BYTE *)a1 + 197) & 2) != 0)
                                          {
                                            v178 = *(_DWORD *)(a2 + 8);
                                            if (v178 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v178 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v178) = "-fxray-instrument";
                                            ++*(_DWORD *)(a2 + 8);
                                          }
                                          v490 = 0uLL;
                                          v489 = 0;
                                          sub_22E618148(&v489, a1[38], a1[39], 0xAAAAAAAAAAAAAAABLL * ((a1[39] - a1[38]) >> 3));
                                          v179 = v489;
                                          *(_QWORD *)__p = v489;
                                          *(_OWORD *)&__p[8] = v490;
                                          v490 = 0uLL;
                                          v489 = 0;
                                          v180 = *(_QWORD *)&__p[8];
                                          v510 = 0;
                                          __s2 = 0;
                                          v511 = 0;
                                          __n[0] = (size_t)&__s2;
                                          sub_22E3B3CC8((void ***)__n);
                                          if (v180 != v179)
                                            sub_22E7214C8(a2, "-fxray-always-instrument=", a3, a4, 11, (__int128 **)__p);
                                          __s2 = __p;
                                          sub_22E3B3CC8((void ***)&__s2);
                                          __s2 = &v489;
                                          sub_22E3B3CC8((void ***)&__s2);
                                          v488 = 0uLL;
                                          v487 = 0;
                                          sub_22E618148(&v487, a1[41], a1[42], 0xAAAAAAAAAAAAAAABLL * ((a1[42] - a1[41]) >> 3));
                                          v181 = v487;
                                          *(_QWORD *)__p = v487;
                                          *(_OWORD *)&__p[8] = v488;
                                          v488 = 0uLL;
                                          v487 = 0;
                                          v472 = a4;
                                          v182 = *(_QWORD *)&__p[8];
                                          v510 = 0;
                                          __s2 = 0;
                                          v511 = 0;
                                          __n[0] = (size_t)&__s2;
                                          sub_22E3B3CC8((void ***)__n);
                                          if (v182 != v181)
                                            sub_22E7214C8(a2, "-fxray-never-instrument=", a3, v472, 11, (__int128 **)__p);
                                          __s2 = __p;
                                          sub_22E3B3CC8((void ***)&__s2);
                                          __s2 = &v487;
                                          sub_22E3B3CC8((void ***)&__s2);
                                          v486 = 0uLL;
                                          v485 = 0;
                                          sub_22E618148(&v485, a1[44], a1[45], 0xAAAAAAAAAAAAAAABLL * ((a1[45] - a1[44]) >> 3));
                                          v183 = v485;
                                          *(_QWORD *)__p = v485;
                                          *(_OWORD *)&__p[8] = v486;
                                          v486 = 0uLL;
                                          v485 = 0;
                                          v184 = *(_QWORD *)&__p[8];
                                          v510 = 0;
                                          __s2 = 0;
                                          v511 = 0;
                                          __n[0] = (size_t)&__s2;
                                          sub_22E3B3CC8((void ***)__n);
                                          if (v184 != v183)
                                            sub_22E7214C8(a2, "-fxray-attr-list=", a3, v472, 11, (__int128 **)__p);
                                          __s2 = __p;
                                          sub_22E3B3CC8((void ***)&__s2);
                                          __s2 = &v485;
                                          sub_22E3B3CC8((void ***)&__s2);
                                          v185 = a1[24];
                                          if ((v185 & 0x40000000000) != 0)
                                          {
                                            v186 = *(_DWORD *)(a2 + 8);
                                            if (v186 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v186 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v186) = "-fxray-always-emit-customevents";
                                            ++*(_DWORD *)(a2 + 8);
                                            v185 = a1[24];
                                          }
                                          if ((v185 & 0x80000000000) != 0)
                                          {
                                            v187 = *(_DWORD *)(a2 + 8);
                                            if (v187 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v187 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v187) = "-fxray-always-emit-typedevents";
                                            ++*(_DWORD *)(a2 + 8);
                                          }
                                          v188 = ((unint64_t)a1[29] >> 59) & 3;
                                          if ((*((_DWORD *)a1 + 13) & 0x40000000) != 0)
                                            v189 = 0;
                                          else
                                            v189 = ~(*(unint64_t *)((char *)a1 + 100) >> 36) & 2;
                                          if ((_DWORD)v188 != v189)
                                            sub_22E7216A8(a2, "-flax-vector-conversions=", a3, v472, 4, 0xCu, v188);
                                          v190 = *a1;
                                          if ((*a1 & 0x10) != 0)
                                          {
                                            v191 = *(_DWORD *)(a2 + 8);
                                            if (v191 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v191 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v191) = "-fms-compatibility";
                                            ++*(_DWORD *)(a2 + 8);
                                            v190 = *a1;
                                          }
                                          v192 = v190 >> 5;
                                          if ((((v190 >> 5) ^ (v190 >> 4)) & 1) != 0)
                                          {
                                            v193 = *(_DWORD *)(a2 + 8);
                                            if (v193 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v193 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v193) = "-fms-extensions";
                                            ++*(_DWORD *)(a2 + 8);
                                            LODWORD(v190) = *(_DWORD *)a1;
                                            v192 = *(_DWORD *)a1 >> 5;
                                          }
                                          v194 = (v190 >> 6) & 1;
                                          if (v194 != (v192 & 1) && v194)
                                          {
                                            v195 = *(_DWORD *)(a2 + 8);
                                            if (v195 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v195 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v195) = "-fasm-blocks";
                                            ++*(_DWORD *)(a2 + 8);
                                          }
                                          if ((*((_WORD *)a1 + 74) & 0x1000) != 0)
                                          {
                                            v196 = *(_DWORD *)(a2 + 8);
                                            if (v196 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v196 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v196) = "-fdelayed-template-parsing";
                                            ++*(_DWORD *)(a2 + 8);
                                          }
                                          v197 = (*((_DWORD *)a1 + 60) >> 8) & 3;
                                          if (v197)
                                            sub_22E7216A8(a2, "-fms-memptr-rep=", a3, v472, 4, 0xDu, v197);
                                          v198 = *a1;
                                          v199 = *a1 & 0xA0;
                                          v200 = a1[8];
                                          v201 = (v200 >> 37) & 1;
                                          if (v199)
                                            LODWORD(v201) = 1;
                                          if (((*a1 >> 28) & 1) != 0
                                            && ((v198 >> 28) & 1) != (_DWORD)v201)
                                          {
                                            v202 = *(_DWORD *)(a2 + 8);
                                            if (v202 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v202 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v202) = "-fdeclspec";
                                            ++*(_DWORD *)(a2 + 8);
                                            v198 = *a1;
                                            v200 = a1[8];
                                            v199 = *a1 & 0xA0;
                                          }
                                          v203 = (v199 | v200 & 0x2000000000) != 0;
                                          if ((v198 & 0x10000000) == 0 && v203)
                                          {
                                            v204 = *(_DWORD *)(a2 + 8);
                                            if (v204 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v204 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v204) = "-fno-declspec";
                                            ++*(_DWORD *)(a2 + 8);
                                          }
                                          v205 = *(uint64_t *)((char *)a1 + 20);
                                          if ((v205 & 0x8000000000000) != 0)
                                          {
                                            v206 = *(_DWORD *)(a2 + 8);
                                            if (v206 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v206 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v206) = "-fpch-instantiate-templates";
                                            ++*(_DWORD *)(a2 + 8);
                                            v205 = *(uint64_t *)((char *)a1 + 20);
                                          }
                                          if ((v205 & 0x400000000000) != 0)
                                          {
                                            v209 = *(_DWORD *)(a2 + 8);
                                            if (v209 >= *(_DWORD *)(a2 + 12))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v209 = *(_DWORD *)(a2 + 8);
                                            }
                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v209) = "-fmodules-ts";
                                            ++*(_DWORD *)(a2 + 8);
                                            v210 = *(uint64_t *)((char *)a1 + 20);
                                            v208 = (v210 >> 45) & 1;
                                            if ((v210 & 0x400000000000) != 0)
                                            {
                                              v211 = 1;
                                              if (!(_DWORD)v208)
                                                goto LABEL_534;
LABEL_530:
                                              if ((_DWORD)v208 != v211)
                                              {
                                                v212 = *(_DWORD *)(a2 + 8);
                                                if (v212 >= *(_DWORD *)(a2 + 12))
                                                {
                                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                  v212 = *(_DWORD *)(a2 + 8);
                                                }
                                                *(_QWORD *)(*(_QWORD *)a2 + 8 * v212) = "-fmodules";
                                                ++*(_DWORD *)(a2 + 8);
                                              }
LABEL_534:
                                              if (*((char *)a1 + 495) < 0)
                                              {
                                                sub_22E3BB2B4(v483, (void *)a1[59], a1[60]);
                                              }
                                              else
                                              {
                                                *(_OWORD *)v483 = *(_OWORD *)(a1 + 59);
                                                v484 = a1[61];
                                              }
                                              v477 = v484;
                                              *(_OWORD *)__n = *(_OWORD *)v483;
                                              v483[1] = 0;
                                              v484 = 0;
                                              v483[0] = 0;
                                              v510 = 0;
                                              __s2 = 0;
                                              v511 = 0;
                                              v213 = HIBYTE(v477);
                                              v214 = __n[1];
                                              v215 = HIBYTE(v477) & 0x7F;
                                              if ((v477 & 0x8000000000000000) == 0)
                                                v216 = HIBYTE(v477) & 0x7F;
                                              else
                                                v216 = __n[1];
                                              if (!v216)
                                              {
                                                if ((v477 & 0x8000000000000000) != 0)
                                                {
                                                  v219 = (void *)__n[0];
                                                  if (!memcmp((const void *)__n[0], &__s2, __n[1]))
                                                  {
LABEL_557:
                                                    operator delete(v219);
LABEL_558:
                                                    if (SHIBYTE(v484) < 0)
                                                      operator delete(v483[0]);
                                                    v220 = *(uint64_t *)((char *)a1 + 20);
                                                    if ((v220 & 0x40000000000000) != 0)
                                                    {
                                                      v221 = *(_DWORD *)(a2 + 8);
                                                      if (v221 >= *(_DWORD *)(a2 + 12))
                                                      {
                                                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                        v221 = *(_DWORD *)(a2 + 8);
                                                      }
                                                      *(_QWORD *)(*(_QWORD *)a2 + 8 * v221) = "-fmodules-strict-decluse";
                                                      ++*(_DWORD *)(a2 + 8);
                                                      v220 = *(uint64_t *)((char *)a1 + 20);
                                                    }
                                                    v222 = (v220 >> 52) & 1;
                                                    if ((_DWORD)v222 != ((v220 >> 54) & 1) && (_DWORD)v222)
                                                    {
                                                      v223 = *(_DWORD *)(a2 + 8);
                                                      if (v223 >= *(_DWORD *)(a2 + 12))
                                                      {
                                                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                        v223 = *(_DWORD *)(a2 + 8);
                                                      }
                                                      *(_QWORD *)(*(_QWORD *)a2 + 8 * v223) = "-fmodules-decluse";
                                                      ++*(_DWORD *)(a2 + 8);
                                                      v220 = *(uint64_t *)((char *)a1 + 20);
                                                    }
                                                    if ((v220 & 0x20000000000000) != 0)
                                                    {
                                                      v224 = *(_DWORD *)(a2 + 8);
                                                      if (v224 >= *(_DWORD *)(a2 + 12))
                                                      {
                                                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                        v224 = *(_DWORD *)(a2 + 8);
                                                      }
                                                      *(_QWORD *)(*(_QWORD *)a2 + 8 * v224) = "-fmodules-search-all";
                                                      ++*(_DWORD *)(a2 + 8);
                                                      v220 = *(uint64_t *)((char *)a1 + 20);
                                                    }
                                                    if ((v220 & 0x100000000000000) == 0)
                                                    {
                                                      v225 = *(_DWORD *)(a2 + 8);
                                                      if (v225 >= *(_DWORD *)(a2 + 12))
                                                      {
                                                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                        v225 = *(_DWORD *)(a2 + 8);
                                                      }
                                                      *(_QWORD *)(*(_QWORD *)a2 + 8 * v225) = "-fno-implicit-modules";
                                                      ++*(_DWORD *)(a2 + 8);
                                                    }
                                                    if ((*((_BYTE *)a1 + 196) & 4) != 0)
                                                    {
                                                      v226 = *(_DWORD *)(a2 + 8);
                                                      if (v226 >= *(_DWORD *)(a2 + 12))
                                                      {
                                                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                        v226 = *(_DWORD *)(a2 + 8);
                                                      }
                                                      *(_QWORD *)(*(_QWORD *)a2 + 8 * v226) = "-fretain-comments-from-system-headers";
                                                      ++*(_DWORD *)(a2 + 8);
                                                    }
                                                    v227 = a1[1];
                                                    if ((v227 & 0x200000000) != 0)
                                                    {
                                                      v229 = *(_DWORD *)(a2 + 8);
                                                      if (v229 >= *(_DWORD *)(a2 + 12))
                                                      {
                                                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                        v229 = *(_DWORD *)(a2 + 8);
                                                      }
                                                      *(_QWORD *)(*(_QWORD *)a2 + 8 * v229) = "-fno-knr-functions";
                                                      ++*(_DWORD *)(a2 + 8);
                                                      v228 = (unint64_t)a1[1] >> 34;
                                                    }
                                                    else
                                                    {
                                                      v228 = v227 >> 34;
                                                    }
                                                    v230 = sub_22F1D5FAC(*((_DWORD *)a1 + 63));
                                                    if ((v228 & 1) != 0
                                                      && (v228 & 1) != ((*(_DWORD *)(v230 + 16) >> 11) & 1))
                                                    {
                                                      v231 = *(_DWORD *)(a2 + 8);
                                                      if (v231 >= *(_DWORD *)(a2 + 12))
                                                      {
                                                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                        v231 = *(_DWORD *)(a2 + 8);
                                                      }
                                                      *(_QWORD *)(*(_QWORD *)a2 + 8 * v231) = "-fdigraphs";
                                                      ++*(_DWORD *)(a2 + 8);
                                                    }
                                                    v232 = a1[1];
                                                    v233 = sub_22F1D5FAC(*((_DWORD *)a1 + 63));
                                                    if ((v232 & 0x400000000) == 0
                                                      && (*(_DWORD *)(v233 + 16) & 0x800) != 0)
                                                    {
                                                      v234 = *(_DWORD *)(a2 + 8);
                                                      if (v234 >= *(_DWORD *)(a2 + 12))
                                                      {
                                                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                        v234 = *(_DWORD *)(a2 + 8);
                                                      }
                                                      *(_QWORD *)(*(_QWORD *)a2 + 8 * v234) = "-fno-digraphs";
                                                      ++*(_DWORD *)(a2 + 8);
                                                    }
                                                    v235 = *a1;
                                                    if ((a1[1] & 0x1000000000) == 0 && (v235 & 0x100) != 0)
                                                    {
                                                      v236 = *(_DWORD *)(a2 + 8);
                                                      if (v236 >= *(_DWORD *)(a2 + 12))
                                                      {
                                                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                        v236 = *(_DWORD *)(a2 + 8);
                                                      }
                                                      *(_QWORD *)(*(_QWORD *)a2 + 8 * v236) = "-fno-operator-names";
                                                      ++*(_DWORD *)(a2 + 8);
                                                      v235 = *a1;
                                                    }
                                                    if ((v235 & 0x20000) != 0)
                                                    {
                                                      v237 = *(_DWORD *)(a2 + 8);
                                                      if (v237 >= *(_DWORD *)(a2 + 12))
                                                      {
                                                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                        v237 = *(_DWORD *)(a2 + 8);
                                                      }
                                                      *(_QWORD *)(*(_QWORD *)a2 + 8 * v237) = "-fobjc-encode-cxx-class-template-spec";
                                                      ++*(_DWORD *)(a2 + 8);
                                                    }
                                                    if ((a1[1] & 0x200000000000) != 0)
                                                    {
                                                      v238 = *(_DWORD *)(a2 + 8);
                                                      if (v238 >= *(_DWORD *)(a2 + 12))
                                                      {
                                                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                        v238 = *(_DWORD *)(a2 + 8);
                                                      }
                                                      *(_QWORD *)(*(_QWORD *)a2 + 8 * v238) = "-fobjc-exceptions";
                                                      ++*(_DWORD *)(a2 + 8);
                                                    }
                                                    if ((*((_BYTE *)a1 + 2) & 8) != 0)
                                                    {
                                                      v239 = *(_DWORD *)(a2 + 8);
                                                      if (v239 >= *(_DWORD *)(a2 + 12))
                                                      {
                                                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                        v239 = *(_DWORD *)(a2 + 8);
                                                      }
                                                      *(_QWORD *)(*(_QWORD *)a2 + 8 * v239) = "-fapplication-extension";
                                                      ++*(_DWORD *)(a2 + 8);
                                                    }
                                                    if ((a1[1] & 0x1000000000000000) != 0)
                                                    {
                                                      v240 = *(_DWORD *)(a2 + 8);
                                                      if (v240 >= *(_DWORD *)(a2 + 12))
                                                      {
                                                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                        v240 = *(_DWORD *)(a2 + 8);
                                                      }
                                                      *(_QWORD *)(*(_QWORD *)a2 + 8 * v240) = "-frelaxed-template-template-args";
                                                      ++*(_DWORD *)(a2 + 8);
                                                    }
                                                    v241 = *(uint64_t *)((char *)a1 + 132);
                                                    if ((v241 & 0x1000000000) != 0)
                                                    {
                                                      v242 = *(_DWORD *)(a2 + 8);
                                                      if (v242 >= *(_DWORD *)(a2 + 12))
                                                      {
                                                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                        v242 = *(_DWORD *)(a2 + 8);
                                                      }
                                                      *(_QWORD *)(*(_QWORD *)a2 + 8 * v242) = "-fsized-deallocation";
                                                      ++*(_DWORD *)(a2 + 8);
                                                      v241 = *(uint64_t *)((char *)a1 + 132);
                                                    }
                                                    v243 = *a1;
                                                    if (((v241 >> 37) & 1) != 0
                                                      && ((v241 >> 37) & 1) != ((v243 >> 11) & 1))
                                                    {
                                                      v244 = *(_DWORD *)(a2 + 8);
                                                      if (v244 >= *(_DWORD *)(a2 + 12))
                                                      {
                                                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                        v244 = *(_DWORD *)(a2 + 8);
                                                      }
                                                      *(_QWORD *)(*(_QWORD *)a2 + 8 * v244) = "-faligned-allocation";
                                                      ++*(_DWORD *)(a2 + 8);
                                                      v241 = *(uint64_t *)((char *)a1 + 132);
                                                      v243 = *a1;
                                                    }
                                                    if ((v243 & 0x800) != 0 && (v241 & 0x2000000000) == 0)
                                                    {
                                                      v245 = *(_DWORD *)(a2 + 8);
                                                      if (v245 >= *(_DWORD *)(a2 + 12))
                                                      {
                                                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                        v245 = *(_DWORD *)(a2 + 8);
                                                      }
                                                      *(_QWORD *)(*(_QWORD *)a2 + 8 * v245) = "-fno-aligned-allocation";
                                                      ++*(_DWORD *)(a2 + 8);
                                                    }
                                                    v246 = *((_DWORD *)a1 + 35);
                                                    if (v246)
                                                    {
                                                      LOWORD(v513) = 264;
                                                      LODWORD(__s2) = v246;
                                                      sub_22E721364(a2, "-fnew-alignment=", a3, v472, 4, (uint64_t *)&__s2);
                                                    }
                                                    if ((*((_BYTE *)a1 + 2) & 4) == 0)
                                                    {
                                                      v247 = *(_DWORD *)(a2 + 8);
                                                      if (v247 >= *(_DWORD *)(a2 + 12))
                                                      {
                                                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                        v247 = *(_DWORD *)(a2 + 8);
                                                      }
                                                      *(_QWORD *)(*(_QWORD *)a2 + 8 * v247) = "-fno-objc-infer-related-result-type";
                                                      ++*(_DWORD *)(a2 + 8);
                                                    }
                                                    if ((*((_WORD *)a1 + 74) & 0x80) != 0)
                                                    {
                                                      v248 = *(_DWORD *)(a2 + 8);
                                                      if (v248 >= *(_DWORD *)(a2 + 12))
                                                      {
                                                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                        v248 = *(_DWORD *)(a2 + 8);
                                                      }
                                                      *(_QWORD *)(*(_QWORD *)a2 + 8 * v248) = "-fobjc-disable-direct-me"
                                                                                                "thods-for-testing";
                                                      ++*(_DWORD *)(a2 + 8);
                                                    }
                                                    if ((*((_BYTE *)a1 + 76) & 1) == 0)
                                                    {
                                                      v249 = *(_DWORD *)(a2 + 8);
                                                      if (v249 >= *(_DWORD *)(a2 + 12))
                                                      {
                                                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                        v249 = *(_DWORD *)(a2 + 8);
                                                      }
                                                      *(_QWORD *)(*(_QWORD *)a2 + 8 * v249) = "-fno-openmp-extensions";
                                                      ++*(_DWORD *)(a2 + 8);
                                                    }
                                                    v250 = *((_WORD *)a1 + 48);
                                                    if ((v250 & 8) != 0)
                                                    {
                                                      v251 = *(_DWORD *)(a2 + 8);
                                                      if (v251 >= *(_DWORD *)(a2 + 12))
                                                      {
                                                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                        v251 = *(_DWORD *)(a2 + 8);
                                                      }
                                                      *(_QWORD *)(*(_QWORD *)a2 + 8 * v251) = "-fopenmp-assume-no-thread-state";
                                                      ++*(_DWORD *)(a2 + 8);
                                                      v250 = *((_WORD *)a1 + 48);
                                                      if ((v250 & 0x10) == 0)
                                                      {
LABEL_647:
                                                        if ((v250 & 1) == 0)
                                                          goto LABEL_658;
                                                        goto LABEL_655;
                                                      }
                                                    }
                                                    else if ((v250 & 0x10) == 0)
                                                    {
                                                      goto LABEL_647;
                                                    }
                                                    v252 = *(_DWORD *)(a2 + 8);
                                                    if (v252 >= *(_DWORD *)(a2 + 12))
                                                    {
                                                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                      v252 = *(_DWORD *)(a2 + 8);
                                                    }
                                                    *(_QWORD *)(*(_QWORD *)a2 + 8 * v252) = "-fopenmp-offload-mandatory";
                                                    ++*(_DWORD *)(a2 + 8);
                                                    if ((a1[12] & 1) == 0)
                                                    {
LABEL_658:
                                                      v254 = *((_DWORD *)a1 + 8);
                                                      if (v254)
                                                      {
                                                        LOWORD(v513) = 264;
                                                        LODWORD(__s2) = v254;
                                                        sub_22E721364(a2, "-fpack-struct=", a3, v472, 4, (uint64_t *)&__s2);
                                                      }
                                                      v255 = *((_DWORD *)a1 + 9);
                                                      if (v255)
                                                      {
                                                        LOWORD(v513) = 264;
                                                        LODWORD(__s2) = v255;
                                                        sub_22E721364(a2, "-fmax-type-align=", a3, v472, 4, (uint64_t *)&__s2);
                                                      }
                                                      if ((a1[1] & 0x4000000000) != 0)
                                                      {
                                                        v256 = *(_DWORD *)(a2 + 8);
                                                        if (v256 >= *(_DWORD *)(a2 + 12))
                                                        {
                                                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                          v256 = *(_DWORD *)(a2 + 8);
                                                        }
                                                        *(_QWORD *)(*(_QWORD *)a2 + 8 * v256) = "-fpascal-strings";
                                                        ++*(_DWORD *)(a2 + 8);
                                                      }
                                                      v257 = *((_DWORD *)a1 + 13);
                                                      if ((v257 & 0x20) != 0)
                                                      {
                                                        v258 = *(_DWORD *)(a2 + 8);
                                                        if (v258 >= *(_DWORD *)(a2 + 12))
                                                        {
                                                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                          v258 = *(_DWORD *)(a2 + 8);
                                                        }
                                                        *(_QWORD *)(*(_QWORD *)a2 + 8 * v258) = "-fropi";
                                                        ++*(_DWORD *)(a2 + 8);
                                                        v257 = *((_DWORD *)a1 + 13);
                                                      }
                                                      if ((v257 & 0x40) != 0)
                                                      {
                                                        v259 = *(_DWORD *)(a2 + 8);
                                                        if (v259 >= *(_DWORD *)(a2 + 12))
                                                        {
                                                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                          v259 = *(_DWORD *)(a2 + 8);
                                                        }
                                                        *(_QWORD *)(*(_QWORD *)a2 + 8 * v259) = "-frwpi";
                                                        ++*(_DWORD *)(a2 + 8);
                                                      }
                                                      v260 = a1[1];
                                                      if ((v260 & 0x8000000000000) == 0 && (*a1 & 0x100) != 0)
                                                      {
                                                        v261 = *(_DWORD *)(a2 + 8);
                                                        if (v261 >= *(_DWORD *)(a2 + 12))
                                                        {
                                                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                          v261 = *(_DWORD *)(a2 + 8);
                                                        }
                                                        *(_QWORD *)(*(_QWORD *)a2 + 8 * v261) = "-fno-rtti";
                                                        ++*(_DWORD *)(a2 + 8);
                                                        v260 = a1[1];
                                                      }
                                                      if ((v260 & 0x18000000000000) == 0x8000000000000)
                                                      {
                                                        v262 = *(_DWORD *)(a2 + 8);
                                                        if (v262 >= *(_DWORD *)(a2 + 12))
                                                        {
                                                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                          v262 = *(_DWORD *)(a2 + 8);
                                                        }
                                                        *(_QWORD *)(*(_QWORD *)a2 + 8 * v262) = "-fno-rtti-data";
                                                        ++*(_DWORD *)(a2 + 8);
                                                      }
                                                      if ((*((_DWORD *)a1 + 13) & 0x20000000) != 0)
                                                      {
                                                        v263 = *(_DWORD *)(a2 + 8);
                                                        if (v263 >= *(_DWORD *)(a2 + 12))
                                                        {
                                                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                          v263 = *(_DWORD *)(a2 + 8);
                                                        }
                                                        *(_QWORD *)(*(_QWORD *)a2 + 8 * v263) = "-fshort-enums";
                                                        ++*(_DWORD *)(a2 + 8);
                                                      }
                                                      v264 = *a1;
                                                      v265 = (*a1 >> 26) & 1;
                                                      if (v265 != ((*a1 >> 12) & 1) && v265)
                                                      {
                                                        v266 = *(_DWORD *)(a2 + 8);
                                                        if (v266 >= *(_DWORD *)(a2 + 12))
                                                        {
                                                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                          v266 = *(_DWORD *)(a2 + 8);
                                                        }
                                                        *(_QWORD *)(*(_QWORD *)a2 + 8 * v266) = "-fchar8_t";
                                                        ++*(_DWORD *)(a2 + 8);
                                                        v264 = *a1;
                                                      }
                                                      if ((v264 & 0x4001000) == 0x1000)
                                                      {
                                                        v267 = *(_DWORD *)(a2 + 8);
                                                        if (v267 >= *(_DWORD *)(a2 + 12))
                                                        {
                                                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                          v267 = *(_DWORD *)(a2 + 8);
                                                        }
                                                        *(_QWORD *)(*(_QWORD *)a2 + 8 * v267) = "-fno-char8_t";
                                                        ++*(_DWORD *)(a2 + 8);
                                                      }
                                                      if ((*(uint64_t *)((char *)a1 + 140) & 0x100000000000000) == 0)
                                                      {
                                                        v268 = *(_DWORD *)(a2 + 8);
                                                        if (v268 >= *(_DWORD *)(a2 + 12))
                                                        {
                                                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                          v268 = *(_DWORD *)(a2 + 8);
                                                        }
                                                        *(_QWORD *)(*(_QWORD *)a2 + 8 * v268) = "-fno-spell-checking";
                                                        ++*(_DWORD *)(a2 + 8);
                                                      }
                                                      if ((*((_DWORD *)a1 + 13) & 0x800000) == 0)
                                                      {
                                                        v269 = *(_DWORD *)(a2 + 8);
                                                        if (v269 >= *(_DWORD *)(a2 + 12))
                                                        {
                                                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                          v269 = *(_DWORD *)(a2 + 8);
                                                        }
                                                        *(_QWORD *)(*(_QWORD *)a2 + 8 * v269) = "-fno-signed-char";
                                                        ++*(_DWORD *)(a2 + 8);
                                                      }
                                                      if (((*((unsigned __int16 *)a1 + 74) | (*((unsigned __int8 *)a1
                                                                                               + 150) << 16)) & 0x80000) != 0)
                                                      {
                                                        v270 = *(_DWORD *)(a2 + 8);
                                                        if (v270 >= *(_DWORD *)(a2 + 12))
                                                        {
                                                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                          v270 = *(_DWORD *)(a2 + 8);
                                                        }
                                                        *(_QWORD *)(*(_QWORD *)a2 + 8 * v270) = "-fstack-check";
                                                        ++*(_DWORD *)(a2 + 8);
                                                      }
                                                      v271 = *(_WORD *)((_BYTE *)a1 + 249) & 3;
                                                      if (v271)
                                                        sub_22E7216A8(a2, "-ftrivial-auto-var-init=", a3, v472, 4, 0x10u, v271);
                                                      v272 = a1[19];
                                                      if ((_DWORD)v272)
                                                      {
                                                        LOWORD(v513) = 264;
                                                        LODWORD(__s2) = v272;
                                                        sub_22E721364(a2, "-ftrivial-auto-var-init-stop-after=", a3, v472, 4, (uint64_t *)&__s2);
                                                        v272 = a1[19];
                                                      }
                                                      v273 = *((_BYTE *)a1 + 160);
                                                      v274 = HIDWORD(v272);
                                                      if ((_DWORD)v274)
                                                      {
                                                        LOWORD(v513) = 264;
                                                        LODWORD(__s2) = v274;
                                                        sub_22E721364(a2, "-ftrivial-auto-var-zero-init-max-size=", a3, v472, 4, (uint64_t *)&__s2);
                                                        v273 = *((_BYTE *)a1 + 160);
                                                      }
                                                      if ((v273 & 1) != 0)
                                                      {
                                                        v275 = *(_DWORD *)(a2 + 8);
                                                        if (v275 >= *(_DWORD *)(a2 + 12))
                                                        {
                                                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                          v275 = *(_DWORD *)(a2 + 8);
                                                        }
                                                        *(_QWORD *)(*(_QWORD *)a2 + 8 * v275) = "-ftrivial-auto-var-init-skip-cpp-obj";
                                                        ++*(_DWORD *)(a2 + 8);
                                                        v273 = *((_BYTE *)a1 + 160);
                                                        if ((v273 & 2) == 0)
                                                        {
LABEL_716:
                                                          if ((v273 & 4) == 0)
                                                            goto LABEL_717;
                                                          goto LABEL_725;
                                                        }
                                                      }
                                                      else if ((v273 & 2) == 0)
                                                      {
                                                        goto LABEL_716;
                                                      }
                                                      v276 = *(_DWORD *)(a2 + 8);
                                                      if (v276 >= *(_DWORD *)(a2 + 12))
                                                      {
                                                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                        v276 = *(_DWORD *)(a2 + 8);
                                                      }
                                                      *(_QWORD *)(*(_QWORD *)a2 + 8 * v276) = "-ftrivial-auto-var-init-skip-non-pod";
                                                      ++*(_DWORD *)(a2 + 8);
                                                      v273 = *((_BYTE *)a1 + 160);
                                                      if ((v273 & 4) == 0)
                                                      {
LABEL_717:
                                                        if ((v273 & 8) == 0)
                                                          goto LABEL_731;
                                                        goto LABEL_728;
                                                      }
LABEL_725:
                                                      v277 = *(_DWORD *)(a2 + 8);
                                                      if (v277 >= *(_DWORD *)(a2 + 12))
                                                      {
                                                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                        v277 = *(_DWORD *)(a2 + 8);
                                                      }
                                                      *(_QWORD *)(*(_QWORD *)a2 + 8 * v277) = "-ftrivial-auto-var-init-skip-stl";
                                                      ++*(_DWORD *)(a2 + 8);
                                                      if ((a1[20] & 8) == 0)
                                                      {
LABEL_731:
                                                        v279 = *((_DWORD *)a1 + 47);
                                                        if (v279)
                                                        {
                                                          LOWORD(v513) = 264;
                                                          LODWORD(__s2) = v279;
                                                          sub_22E721364(a2, "-Wlarge-by-value-copy=", a3, v472, 4, (uint64_t *)&__s2);
                                                        }
                                                        if ((*(uint64_t *)((char *)a1 + 20) & 0x8000000000) == 0)
                                                        {
                                                          v280 = *(_DWORD *)(a2 + 8);
                                                          if (v280 >= *(_DWORD *)(a2 + 12))
                                                          {
                                                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                            v280 = *(_DWORD *)(a2 + 8);
                                                          }
                                                          *(_QWORD *)(*(_QWORD *)a2 + 8 * v280) = "-fno-threadsafe-statics";
                                                          ++*(_DWORD *)(a2 + 8);
                                                        }
                                                        if (((*((unsigned __int16 *)a1 + 74) | (*((unsigned __int8 *)a1
                                                                                                 + 150) << 16)) & 0x10000) != 0)
                                                        {
                                                          v281 = *(_DWORD *)(a2 + 8);
                                                          if (v281 >= *(_DWORD *)(a2 + 12))
                                                          {
                                                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                            v281 = *(_DWORD *)(a2 + 8);
                                                          }
                                                          *(_QWORD *)(*(_QWORD *)a2 + 8 * v281) = "-fvisibility-from-dllstorageclass";
                                                          ++*(_DWORD *)(a2 + 8);
                                                        }
                                                        v282 = *((_DWORD *)a1 + 61);
                                                        v283 = (v282 >> 25) & 7;
                                                        if (v283 != 2)
                                                        {
                                                          sub_22E7216A8(a2, "-fvisibility-dllexport=", a3, v472, 4, 0x12u, v283);
                                                          v282 = *((_DWORD *)a1 + 61);
                                                        }
                                                        v284 = (v282 >> 28) & 7;
                                                        if (v284)
                                                          sub_22E7216A8(a2, "-fvisibility-nodllstorageclass=", a3, v472, 4, 0x13u, v284);
                                                        v285 = *((unsigned __int16 *)a1 + 124);
                                                        v286 = v285 | (*((unsigned __int8 *)a1 + 250) << 16);
                                                        if ((v285 & 7) != 2)
                                                        {
                                                          sub_22E7216A8(a2, "-fvisibility-externs-dllimport=", a3, v472, 4, 0x14u, v285 & 7);
                                                          v286 = *((unsigned __int16 *)a1 + 124) | (*((unsigned __int8 *)a1 + 250) << 16);
                                                        }
                                                        v287 = (v286 >> 3) & 7;
                                                        if (v287)
                                                          sub_22E7216A8(a2, "-fvisibility-externs-nodllstorageclass=", a3, v472, 4, 0x15u, v287);
                                                        v288 = *(uint64_t *)((char *)a1 + 140);
                                                        if ((v288 & 0x400000000000) != 0)
                                                        {
                                                          v289 = *(_DWORD *)(a2 + 8);
                                                          if (v289 >= *(_DWORD *)(a2 + 12))
                                                          {
                                                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                            v289 = *(_DWORD *)(a2 + 8);
                                                          }
                                                          *(_QWORD *)(*(_QWORD *)a2 + 8 * v289) = "-fvisibility-inlines-hidden";
                                                          ++*(_DWORD *)(a2 + 8);
                                                          v288 = *(uint64_t *)((char *)a1 + 140);
                                                          if ((v288 & 0x1000000000000) == 0)
                                                          {
LABEL_751:
                                                            if ((v288 & 0x2000000000000) == 0)
                                                              goto LABEL_752;
                                                            goto LABEL_760;
                                                          }
                                                        }
                                                        else if ((v288 & 0x1000000000000) == 0)
                                                        {
                                                          goto LABEL_751;
                                                        }
                                                        v290 = *(_DWORD *)(a2 + 8);
                                                        if (v290 >= *(_DWORD *)(a2 + 12))
                                                        {
                                                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                          v290 = *(_DWORD *)(a2 + 8);
                                                        }
                                                        *(_QWORD *)(*(_QWORD *)a2 + 8 * v290) = "-fvisibility-inlines-h"
                                                                                                  "idden-static-local-var";
                                                        ++*(_DWORD *)(a2 + 8);
                                                        v288 = *(uint64_t *)((char *)a1 + 140);
                                                        if ((v288 & 0x2000000000000) == 0)
                                                        {
LABEL_752:
                                                          if ((v288 & 0x8000000000000) == 0)
                                                            goto LABEL_766;
                                                          goto LABEL_763;
                                                        }
LABEL_760:
                                                        v291 = *(_DWORD *)(a2 + 8);
                                                        if (v291 >= *(_DWORD *)(a2 + 12))
                                                        {
                                                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                          v291 = *(_DWORD *)(a2 + 8);
                                                        }
                                                        *(_QWORD *)(*(_QWORD *)a2 + 8 * v291) = "-fvisibility-global-new-delete-hidden";
                                                        ++*(_DWORD *)(a2 + 8);
                                                        if ((*(uint64_t *)((char *)a1 + 140) & 0x8000000000000) == 0)
                                                        {
LABEL_766:
                                                          if ((a1[1] & 0x8000000000) != 0)
                                                          {
                                                            v293 = *(_DWORD *)(a2 + 8);
                                                            if (v293 >= *(_DWORD *)(a2 + 12))
                                                            {
                                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                              v293 = *(_DWORD *)(a2 + 8);
                                                            }
                                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v293) = "-fwritable-strings";
                                                            ++*(_DWORD *)(a2 + 8);
                                                          }
                                                          if ((*((_BYTE *)a1 + 204) & 8) != 0)
                                                          {
                                                            v294 = *(_DWORD *)(a2 + 8);
                                                            if (v294 >= *(_DWORD *)(a2 + 12))
                                                            {
                                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                              v294 = *(_DWORD *)(a2 + 8);
                                                            }
                                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v294) = "-fenable-matrix";
                                                            ++*(_DWORD *)(a2 + 8);
                                                          }
                                                          if ((*((_WORD *)a1 + 74) & 1) != 0)
                                                          {
                                                            v295 = *(_DWORD *)(a2 + 8);
                                                            if (v295 >= *(_DWORD *)(a2 + 12))
                                                            {
                                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                              v295 = *(_DWORD *)(a2 + 8);
                                                            }
                                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v295) = "-mqdsp6-compat";
                                                            ++*(_DWORD *)(a2 + 8);
                                                          }
                                                          v296 = *((_DWORD *)a1 + 11);
                                                          if (v296)
                                                          {
                                                            LOWORD(v513) = 264;
                                                            LODWORD(__s2) = v296;
                                                            sub_22E721364(a2, "-mdouble=", a3, v472, 4, (uint64_t *)&__s2);
                                                          }
                                                          if ((a1[5] & 1) != 0)
                                                          {
                                                            v297 = *(_DWORD *)(a2 + 8);
                                                            if (v297 >= *(_DWORD *)(a2 + 12))
                                                            {
                                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                              v297 = *(_DWORD *)(a2 + 8);
                                                            }
                                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v297) = "-malign-double";
                                                            ++*(_DWORD *)(a2 + 8);
                                                          }
                                                          if (((*((unsigned __int16 *)a1 + 74) | (*((unsigned __int8 *)a1 + 150) << 16)) & 0x100000) != 0)
                                                          {
                                                            v298 = *(_DWORD *)(a2 + 8);
                                                            if (v298 >= *(_DWORD *)(a2 + 12))
                                                            {
                                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                              v298 = *(_DWORD *)(a2 + 8);
                                                            }
                                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v298) = "-mdarwin-stkchk-strong-link";
                                                            ++*(_DWORD *)(a2 + 8);
                                                          }
                                                          v299 = *((_DWORD *)a1 + 56);
                                                          if (v299)
                                                          {
                                                            LOWORD(v513) = 264;
                                                            LODWORD(__s2) = v299;
                                                            sub_22E721364(a2, "-ffuchsia-api-level=", a3, v472, 4, (uint64_t *)&__s2);
                                                          }
                                                          if ((a1[1] & 0x20000000000000) != 0)
                                                          {
                                                            v300 = *(_DWORD *)(a2 + 8);
                                                            if (v300 >= *(_DWORD *)(a2 + 12))
                                                            {
                                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                              v300 = *(_DWORD *)(a2 + 8);
                                                            }
                                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v300) = "-mms-bitfields";
                                                            ++*(_DWORD *)(a2 + 8);
                                                          }
                                                          v301 = (*((unsigned __int16 *)a1 + 124) >> 12) & 3;
                                                          if (v301)
                                                            sub_22E7216A8(a2, "-mthread-model", a3, v472, 6, 0x19u, v301);
                                                          if ((*((_BYTE *)a1 + 197) & 1) != 0)
                                                          {
                                                            v302 = *(_DWORD *)(a2 + 8);
                                                            if (v302 >= *(_DWORD *)(a2 + 12))
                                                            {
                                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                              v302 = *(_DWORD *)(a2 + 8);
                                                            }
                                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v302) = "-mcmse";
                                                            ++*(_DWORD *)(a2 + 8);
                                                          }
                                                          v303 = *((_DWORD *)a1 + 54);
                                                          if (v303)
                                                          {
                                                            LOWORD(v513) = 264;
                                                            LODWORD(__s2) = v303;
                                                            sub_22E721364(a2, "-mvscale-min=", a3, v472, 4, (uint64_t *)&__s2);
                                                          }
                                                          v304 = *((_DWORD *)a1 + 55);
                                                          if (v304)
                                                          {
                                                            LOWORD(v513) = 264;
                                                            LODWORD(__s2) = v304;
                                                            sub_22E721364(a2, "-mvscale-max=", a3, v472, 4, (uint64_t *)&__s2);
                                                          }
                                                          if ((*((_DWORD *)a1 + 13) & 2) != 0)
                                                          {
                                                            v305 = *(_DWORD *)(a2 + 8);
                                                            if (v305 >= *(_DWORD *)(a2 + 12))
                                                            {
                                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                              v305 = *(_DWORD *)(a2 + 8);
                                                            }
                                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v305) = "-mabi=vec-extabi";
                                                            ++*(_DWORD *)(a2 + 8);
                                                          }
                                                          if ((a1[1] & 0x80000000000) != 0)
                                                          {
                                                            v306 = *(_DWORD *)(a2 + 8);
                                                            if (v306 >= *(_DWORD *)(a2 + 12))
                                                            {
                                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                              v306 = *(_DWORD *)(a2 + 8);
                                                            }
                                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v306) = "-fzvector";
                                                            ++*(_DWORD *)(a2 + 8);
                                                          }
                                                          if ((*((_DWORD *)a1 + 13) & 0x200000) != 0)
                                                          {
                                                            v307 = *(_DWORD *)(a2 + 8);
                                                            if (v307 >= *(_DWORD *)(a2 + 12))
                                                            {
                                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                              v307 = *(_DWORD *)(a2 + 8);
                                                            }
                                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v307) = "-print-ivar-layout";
                                                            ++*(_DWORD *)(a2 + 8);
                                                          }
                                                          if ((*(uint64_t *)((char *)a1 + 20) & 0x10000000000) != 0)
                                                          {
                                                            v308 = *(_DWORD *)(a2 + 8);
                                                            if (v308 >= *(_DWORD *)(a2 + 12))
                                                            {
                                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                              v308 = *(_DWORD *)(a2 + 8);
                                                            }
                                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v308) = "-pthread";
                                                            ++*(_DWORD *)(a2 + 8);
                                                          }
                                                          if ((a1[1] & 0x4000000000000) != 0)
                                                          {
                                                            v309 = *(_DWORD *)(a2 + 8);
                                                            if (v309 >= *(_DWORD *)(a2 + 12))
                                                            {
                                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                              v309 = *(_DWORD *)(a2 + 8);
                                                            }
                                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v309) = "-traditional-cpp";
                                                            ++*(_DWORD *)(a2 + 8);
                                                          }
                                                          v310 = ((unint64_t)a1[29] >> 61) & 3;
                                                          if ((_DWORD)v310)
                                                            sub_22E7216A8(a2, "-faltivec-src-compat=", a3, v472, 4, 0x1Cu, v310);
                                                          if ((*((_BYTE *)a1 + 212) & 1) != 0)
                                                          {
                                                            v311 = *(_DWORD *)(a2 + 8);
                                                            if (v311 >= *(_DWORD *)(a2 + 12))
                                                            {
                                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                              v311 = *(_DWORD *)(a2 + 8);
                                                            }
                                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v311) = "-fexperimental-optimized-noescape";
                                                            ++*(_DWORD *)(a2 + 8);
                                                          }
                                                          if (((*((unsigned __int16 *)a1 + 74) | (*((unsigned __int8 *)a1 + 150) << 16)) & 0x20000) != 0)
                                                          {
                                                            v312 = *(_DWORD *)(a2 + 8);
                                                            if (v312 >= *(_DWORD *)(a2 + 12))
                                                            {
                                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                              v312 = *(_DWORD *)(a2 + 8);
                                                            }
                                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v312) = "-fsemantic-interposition";
                                                            ++*(_DWORD *)(a2 + 8);
                                                          }
                                                          v313 = *(uint64_t *)((char *)a1 + 124);
                                                          if ((v313 & 4) != 0)
                                                          {
                                                            v315 = *(_DWORD *)(a2 + 8);
                                                            if (v315 >= *(_DWORD *)(a2 + 12))
                                                            {
                                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                              v315 = *(_DWORD *)(a2 + 8);
                                                            }
                                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v315) = "-fdenorms";
                                                            ++*(_DWORD *)(a2 + 8);
                                                            v314 = *(uint64_t *)((char *)a1 + 132);
                                                            v313 = *(uint64_t *)((char *)a1 + 124);
                                                          }
                                                          else
                                                          {
                                                            v314 = *(uint64_t *)((char *)a1 + 132);
                                                          }
                                                          v316 = *(uint64_t *)((char *)a1 + 116);
                                                          if ((v316 & 0x2000000000000000) != 0)
                                                          {
                                                            v317 = *(_DWORD *)(a2 + 8);
                                                            if (v317 >= *(_DWORD *)(a2 + 12))
                                                            {
                                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                              v317 = *(_DWORD *)(a2 + 8);
                                                            }
                                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v317) = "-fcikernel";
                                                            ++*(_DWORD *)(a2 + 8);
                                                            v314 = *(uint64_t *)((char *)a1 + 132);
                                                            v313 = *(uint64_t *)((char *)a1 + 124);
                                                            v316 = *(uint64_t *)((char *)a1 + 116);
                                                            if ((v313 & 0x400000) == 0)
                                                            {
LABEL_841:
                                                              if ((v316 & 0x200000000) == 0)
                                                                goto LABEL_842;
                                                              goto LABEL_852;
                                                            }
                                                          }
                                                          else if ((v313 & 0x400000) == 0)
                                                          {
                                                            goto LABEL_841;
                                                          }
                                                          v318 = *(_DWORD *)(a2 + 8);
                                                          if (v318 >= *(_DWORD *)(a2 + 12))
                                                          {
                                                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                            v318 = *(_DWORD *)(a2 + 8);
                                                          }
                                                          *(_QWORD *)(*(_QWORD *)a2 + 8 * v318) = "-fmetal-enable-logging";
                                                          ++*(_DWORD *)(a2 + 8);
                                                          v314 = *(uint64_t *)((char *)a1 + 132);
                                                          v313 = *(uint64_t *)((char *)a1 + 124);
                                                          if ((*(uint64_t *)((char *)a1 + 116) & 0x200000000) == 0)
                                                          {
LABEL_842:
                                                            if ((v313 & 0x10000000) == 0)
                                                              goto LABEL_843;
                                                            goto LABEL_855;
                                                          }
LABEL_852:
                                                          v319 = *(_DWORD *)(a2 + 8);
                                                          if (v319 >= *(_DWORD *)(a2 + 12))
                                                          {
                                                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                            v319 = *(_DWORD *)(a2 + 8);
                                                          }
                                                          *(_QWORD *)(*(_QWORD *)a2 + 8 * v319) = "-fgl_max_buffer";
                                                          ++*(_DWORD *)(a2 + 8);
                                                          v314 = *(uint64_t *)((char *)a1 + 132);
                                                          if ((*(uint64_t *)((char *)a1 + 124) & 0x10000000) == 0)
                                                          {
LABEL_843:
                                                            if ((v314 & 0x100) == 0)
                                                              goto LABEL_844;
                                                            goto LABEL_858;
                                                          }
LABEL_855:
                                                          v320 = *(_DWORD *)(a2 + 8);
                                                          if (v320 >= *(_DWORD *)(a2 + 12))
                                                          {
                                                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                            v320 = *(_DWORD *)(a2 + 8);
                                                          }
                                                          *(_QWORD *)(*(_QWORD *)a2 + 8 * v320) = "-fnative-long-long";
                                                          ++*(_DWORD *)(a2 + 8);
                                                          v314 = *(uint64_t *)((char *)a1 + 132);
                                                          if ((v314 & 0x100) == 0)
                                                          {
LABEL_844:
                                                            if ((v314 & 0x800000000) == 0)
                                                              goto LABEL_864;
                                                            goto LABEL_861;
                                                          }
LABEL_858:
                                                          v321 = *(_DWORD *)(a2 + 8);
                                                          if (v321 >= *(_DWORD *)(a2 + 12))
                                                          {
                                                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                            v321 = *(_DWORD *)(a2 + 8);
                                                          }
                                                          *(_QWORD *)(*(_QWORD *)a2 + 8 * v321) = "-fstitching-threadgroup-variables";
                                                          ++*(_DWORD *)(a2 + 8);
                                                          if ((*(uint64_t *)((char *)a1 + 132) & 0x800000000) == 0)
                                                          {
LABEL_864:
                                                            if ((*((_BYTE *)a1 + 236) & 4) != 0)
                                                            {
                                                              v323 = *(_DWORD *)(a2 + 8);
                                                              if (v323 >= *(_DWORD *)(a2 + 12))
                                                              {
                                                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                v323 = *(_DWORD *)(a2 + 8);
                                                              }
                                                              *(_QWORD *)(*(_QWORD *)a2 + 8 * v323) = "-fintersection-call";
                                                              ++*(_DWORD *)(a2 + 8);
                                                            }
                                                            v324 = *(uint64_t *)((char *)a1 + 124);
                                                            if ((v324 & 0x8000000) != 0)
                                                            {
                                                              v325 = *(_DWORD *)(a2 + 8);
                                                              if (v325 >= *(_DWORD *)(a2 + 12))
                                                              {
                                                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                v325 = *(_DWORD *)(a2 + 8);
                                                              }
                                                              *(_QWORD *)(*(_QWORD *)a2 + 8 * v325) = "-fnative-double";
                                                              ++*(_DWORD *)(a2 + 8);
                                                              v324 = *(uint64_t *)((char *)a1 + 124);
                                                            }
                                                            if ((v324 & 0x20000000) != 0)
                                                            {
                                                              v326 = *(_DWORD *)(a2 + 8);
                                                              if (v326 >= *(_DWORD *)(a2 + 12))
                                                              {
                                                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                v326 = *(_DWORD *)(a2 + 8);
                                                              }
                                                              *(_QWORD *)(*(_QWORD *)a2 + 8 * v326) = "-fnative-wide-vectors";
                                                              ++*(_DWORD *)(a2 + 8);
                                                            }
                                                            if ((*((_BYTE *)a1 + 68) & 4) != 0)
                                                            {
                                                              v327 = *(_DWORD *)(a2 + 8);
                                                              if (v327 >= *(_DWORD *)(a2 + 12))
                                                              {
                                                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                v327 = *(_DWORD *)(a2 + 8);
                                                              }
                                                              *(_QWORD *)(*(_QWORD *)a2 + 8 * v327) = "-fopencl-interop";
                                                              ++*(_DWORD *)(a2 + 8);
                                                            }
                                                            v328 = *(uint64_t *)((char *)a1 + 132);
                                                            if ((v328 & 4) != 0)
                                                            {
                                                              v329 = *(_DWORD *)(a2 + 8);
                                                              if (v329 >= *(_DWORD *)(a2 + 12))
                                                              {
                                                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                v329 = *(_DWORD *)(a2 + 8);
                                                              }
                                                              *(_QWORD *)(*(_QWORD *)a2 + 8 * v329) = "-fthread-globals";
                                                              ++*(_DWORD *)(a2 + 8);
                                                              v328 = *(uint64_t *)((char *)a1 + 132);
                                                              if ((v328 & 0x100000000) == 0)
                                                              {
LABEL_882:
                                                                if ((v328 & 0x200000000) == 0)
                                                                  goto LABEL_883;
                                                                goto LABEL_891;
                                                              }
                                                            }
                                                            else if ((v328 & 0x100000000) == 0)
                                                            {
                                                              goto LABEL_882;
                                                            }
                                                            v330 = *(_DWORD *)(a2 + 8);
                                                            if (v330 >= *(_DWORD *)(a2 + 12))
                                                            {
                                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                              v330 = *(_DWORD *)(a2 + 8);
                                                            }
                                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v330) = "-fapplecl-lax-vector-conversions";
                                                            ++*(_DWORD *)(a2 + 8);
                                                            v328 = *(uint64_t *)((char *)a1 + 132);
                                                            if ((v328 & 0x200000000) == 0)
                                                            {
LABEL_883:
                                                              if ((v328 & 0x400000000) == 0)
                                                                goto LABEL_897;
                                                              goto LABEL_894;
                                                            }
LABEL_891:
                                                            v331 = *(_DWORD *)(a2 + 8);
                                                            if (v331 >= *(_DWORD *)(a2 + 12))
                                                            {
                                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                              v331 = *(_DWORD *)(a2 + 8);
                                                            }
                                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v331) = "-fapplecl-functional-casts";
                                                            ++*(_DWORD *)(a2 + 8);
                                                            if ((*(uint64_t *)((char *)a1 + 132) & 0x400000000) == 0)
                                                            {
LABEL_897:
                                                              if ((*((_BYTE *)a1 + 204) & 2) != 0)
                                                              {
                                                                v333 = *(_DWORD *)(a2 + 8);
                                                                if (v333 >= *(_DWORD *)(a2 + 12))
                                                                {
                                                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                  v333 = *(_DWORD *)(a2 + 8);
                                                                }
                                                                *(_QWORD *)(*(_QWORD *)a2 + 8 * v333) = "-fpadding-on-unsigned-fixed-point";
                                                                ++*(_DWORD *)(a2 + 8);
                                                              }
                                                              if ((a1[1] & 0x100000000000000) != 0)
                                                              {
                                                                v334 = *(_DWORD *)(a2 + 8);
                                                                if (v334 >= *(_DWORD *)(a2 + 12))
                                                                {
                                                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                  v334 = *(_DWORD *)(a2 + 8);
                                                                }
                                                                *(_QWORD *)(*(_QWORD *)a2 + 8 * v334) = "-fno-math-builtin";
                                                                ++*(_DWORD *)(a2 + 8);
                                                              }
                                                              if ((*(uint64_t *)((char *)a1 + 140) & 0x10000000000) != 0)
                                                              {
                                                                v335 = *(_DWORD *)(a2 + 8);
                                                                if (v335 >= *(_DWORD *)(a2 + 12))
                                                                {
                                                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                  v335 = *(_DWORD *)(a2 + 8);
                                                                }
                                                                *(_QWORD *)(*(_QWORD *)a2 + 8 * v335) = "-fdump-vtable-layouts";
                                                                ++*(_DWORD *)(a2 + 8);
                                                              }
                                                              v336 = *((unsigned int *)a1 + 13);
                                                              v337 = v336 >> 12;
                                                              if ((((*((_DWORD *)a1 + 13) >> 12) ^ (*((_DWORD *)a1 + 13) >> 17)) & 1) != 0)
                                                              {
                                                                v338 = *(_DWORD *)(a2 + 8);
                                                                if (v338 >= *(_DWORD *)(a2 + 12))
                                                                {
                                                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                  v338 = *(_DWORD *)(a2 + 8);
                                                                }
                                                                *(_QWORD *)(*(_QWORD *)a2 + 8 * v338) = "-menable-no-infs";
                                                                ++*(_DWORD *)(a2 + 8);
                                                                v336 = *((unsigned int *)a1 + 13);
                                                                v337 = v336 >> 12;
                                                              }
                                                              if (((v337 ^ WORD1(v336)) & 1) != 0)
                                                              {
                                                                v339 = *(_DWORD *)(a2 + 8);
                                                                if (v339 >= *(_DWORD *)(a2 + 12))
                                                                {
                                                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                  v339 = *(_DWORD *)(a2 + 8);
                                                                }
                                                                *(_QWORD *)(*(_QWORD *)a2 + 8 * v339) = "-menable-no-nans";
                                                                ++*(_DWORD *)(a2 + 8);
                                                                LODWORD(v336) = *((_DWORD *)a1 + 13);
                                                              }
                                                              if ((((v336 >> 15) ^ (v336 >> 13)) & 1) != 0)
                                                              {
                                                                v340 = *(_DWORD *)(a2 + 8);
                                                                if (v340 >= *(_DWORD *)(a2 + 12))
                                                                {
                                                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                  v340 = *(_DWORD *)(a2 + 8);
                                                                }
                                                                *(_QWORD *)(*(_QWORD *)a2 + 8 * v340) = "-mreassociate";
                                                                ++*(_DWORD *)(a2 + 8);
                                                                LODWORD(v336) = *((_DWORD *)a1 + 13);
                                                              }
                                                              if ((v336 & 1) != 0)
                                                              {
                                                                v341 = *(_DWORD *)(a2 + 8);
                                                                if (v341 >= *(_DWORD *)(a2 + 12))
                                                                {
                                                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                  v341 = *(_DWORD *)(a2 + 8);
                                                                }
                                                                *(_QWORD *)(*(_QWORD *)a2 + 8 * v341) = "-mabi=ieeelongdouble";
                                                                ++*(_DWORD *)(a2 + 8);
                                                              }
                                                              if ((*((_BYTE *)a1 + 212) & 0x10) != 0)
                                                              {
                                                                v342 = *(_DWORD *)(a2 + 8);
                                                                if (v342 >= *(_DWORD *)(a2 + 12))
                                                                {
                                                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                  v342 = *(_DWORD *)(a2 + 8);
                                                                }
                                                                *(_QWORD *)(*(_QWORD *)a2 + 8 * v342) = "-mbranch-target-enforce";
                                                                ++*(_DWORD *)(a2 + 8);
                                                              }
                                                              if ((a1[1] & 0x800000000000000) == 0)
                                                              {
                                                                v343 = *(_DWORD *)(a2 + 8);
                                                                if (v343 >= *(_DWORD *)(a2 + 12))
                                                                {
                                                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                  v343 = *(_DWORD *)(a2 + 8);
                                                                }
                                                                *(_QWORD *)(*(_QWORD *)a2 + 8 * v343) = "-fno-dllexport-inlines";
                                                                ++*(_DWORD *)(a2 + 8);
                                                              }
                                                              if ((*(uint64_t *)((char *)a1 + 20) & 0x80000000000000) == 0)
                                                              {
                                                                v344 = *(_DWORD *)(a2 + 8);
                                                                if (v344 >= *(_DWORD *)(a2 + 12))
                                                                {
                                                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                  v344 = *(_DWORD *)(a2 + 8);
                                                                }
                                                                *(_QWORD *)(*(_QWORD *)a2 + 8 * v344) = "-fno-modules-error-recovery";
                                                                ++*(_DWORD *)(a2 + 8);
                                                              }
                                                              v482 = 0uLL;
                                                              v481 = 0;
                                                              sub_22E618148(&v481, a1[65], a1[66], 0xAAAAAAAAAAAAAAABLL * ((a1[66] - a1[65]) >> 3));
                                                              v345 = v481;
                                                              *(_QWORD *)__p = v481;
                                                              *(_OWORD *)&__p[8] = v482;
                                                              v482 = 0uLL;
                                                              v481 = 0;
                                                              v346 = *(_QWORD *)&__p[8];
                                                              v510 = 0;
                                                              __s2 = 0;
                                                              v511 = 0;
                                                              __n[0] = (size_t)&__s2;
                                                              sub_22E3B3CC8((void ***)__n);
                                                              if (v346 != v345)
                                                                sub_22E7214C8(a2, "-fmodule-feature", a3, v472, 6, (__int128 **)__p);
                                                              __s2 = __p;
                                                              sub_22E3B3CC8((void ***)&__s2);
                                                              __s2 = &v481;
                                                              sub_22E3B3CC8((void ***)&__s2);
                                                              v347 = *(uint64_t *)((char *)a1 + 20);
                                                              v348 = (v347 >> 47) & 1;
                                                              if ((v347 & 0x400000000000) != 0)
                                                                LODWORD(v348) = 1;
                                                              if ((v347 & 0x200000000000000) != 0
                                                                && ((v347 & 0x200000000000000) != 0) != (_DWORD)v348)
                                                              {
                                                                v349 = *(_DWORD *)(a2 + 8);
                                                                if (v349 >= *(_DWORD *)(a2 + 12))
                                                                {
                                                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                  v349 = *(_DWORD *)(a2 + 8);
                                                                }
                                                                *(_QWORD *)(*(_QWORD *)a2 + 8 * v349) = "-fmodules-local-submodule-visibility";
                                                                ++*(_DWORD *)(a2 + 8);
                                                                v347 = *(uint64_t *)((char *)a1 + 20);
                                                              }
                                                              if ((v347 & 0x200000000000000) == 0
                                                                && (v347 & 0xC00000000000) != 0)
                                                              {
                                                                v350 = *(_DWORD *)(a2 + 8);
                                                                if (v350 >= *(_DWORD *)(a2 + 12))
                                                                {
                                                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                  v350 = *(_DWORD *)(a2 + 8);
                                                                }
                                                                *(_QWORD *)(*(_QWORD *)a2 + 8 * v350) = "-fno-modules-local-submodule-visibility";
                                                                ++*(_DWORD *)(a2 + 8);
                                                              }
                                                              v351 = *(uint64_t *)((char *)a1 + 140);
                                                              if ((v351 & 0x200000000) != 0)
                                                              {
                                                                v352 = *(_DWORD *)(a2 + 8);
                                                                if (v352 >= *(_DWORD *)(a2 + 12))
                                                                {
                                                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                  v352 = *(_DWORD *)(a2 + 8);
                                                                }
                                                                *(_QWORD *)(*(_QWORD *)a2 + 8 * v352) = "-fmodules-codegen";
                                                                ++*(_DWORD *)(a2 + 8);
                                                                v351 = *(uint64_t *)((char *)a1 + 140);
                                                              }
                                                              if ((v351 & 0x400000000) != 0)
                                                              {
                                                                v353 = *(_DWORD *)(a2 + 8);
                                                                if (v353 >= *(_DWORD *)(a2 + 12))
                                                                {
                                                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                  v353 = *(_DWORD *)(a2 + 8);
                                                                }
                                                                *(_QWORD *)(*(_QWORD *)a2 + 8 * v353) = "-fmodules-debuginfo";
                                                                ++*(_DWORD *)(a2 + 8);
                                                              }
                                                              v354 = *(uint64_t *)((char *)a1 + 20);
                                                              if ((v354 & 0x400000000000000) != 0)
                                                              {
                                                                v355 = *(_DWORD *)(a2 + 8);
                                                                if (v355 >= *(_DWORD *)(a2 + 12))
                                                                {
                                                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                  v355 = *(_DWORD *)(a2 + 8);
                                                                }
                                                                *(_QWORD *)(*(_QWORD *)a2 + 8 * v355) = "-fmodules-hash-error-diagnostics";
                                                                ++*(_DWORD *)(a2 + 8);
                                                                v354 = *(uint64_t *)((char *)a1 + 20);
                                                              }
                                                              v356 = *((_BYTE *)a1 + 28);
                                                              if ((v354 & 0x800000000000000) != 0)
                                                              {
                                                                v357 = *(_DWORD *)(a2 + 8);
                                                                if (v357 >= *(_DWORD *)(a2 + 12))
                                                                {
                                                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                  v357 = *(_DWORD *)(a2 + 8);
                                                                }
                                                                *(_QWORD *)(*(_QWORD *)a2 + 8 * v357) = "-fodr-hash-attributes";
                                                                ++*(_DWORD *)(a2 + 8);
                                                                v354 = *(uint64_t *)((char *)a1 + 20);
                                                                v356 = *((_BYTE *)a1 + 28);
                                                                if ((v354 & 0x1000000000000000) != 0)
                                                                {
LABEL_965:
                                                                  if ((v354 & 0x2000000000000000) != 0)
                                                                    goto LABEL_966;
                                                                  goto LABEL_978;
                                                                }
                                                              }
                                                              else if ((v354 & 0x1000000000000000) != 0)
                                                              {
                                                                goto LABEL_965;
                                                              }
                                                              v358 = *(_DWORD *)(a2 + 8);
                                                              if (v358 >= *(_DWORD *)(a2 + 12))
                                                              {
                                                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                v358 = *(_DWORD *)(a2 + 8);
                                                              }
                                                              *(_QWORD *)(*(_QWORD *)a2 + 8 * v358) = "-fno-odr-hash-categories";
                                                              ++*(_DWORD *)(a2 + 8);
                                                              v354 = *(uint64_t *)((char *)a1 + 20);
                                                              v356 = *((_BYTE *)a1 + 28);
                                                              if ((v354 & 0x2000000000000000) != 0)
                                                              {
LABEL_966:
                                                                if ((v354 & 0x4000000000000000) != 0)
                                                                  goto LABEL_967;
                                                                goto LABEL_981;
                                                              }
LABEL_978:
                                                              v359 = *(_DWORD *)(a2 + 8);
                                                              if (v359 >= *(_DWORD *)(a2 + 12))
                                                              {
                                                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                v359 = *(_DWORD *)(a2 + 8);
                                                              }
                                                              *(_QWORD *)(*(_QWORD *)a2 + 8 * v359) = "-fno-odr-hash-interfaces";
                                                              ++*(_DWORD *)(a2 + 8);
                                                              v354 = *(uint64_t *)((char *)a1 + 20);
                                                              v356 = *((_BYTE *)a1 + 28);
                                                              if ((v354 & 0x4000000000000000) != 0)
                                                              {
LABEL_967:
                                                                if (v354 < 0)
                                                                  goto LABEL_968;
                                                                goto LABEL_984;
                                                              }
LABEL_981:
                                                              v360 = *(_DWORD *)(a2 + 8);
                                                              if (v360 >= *(_DWORD *)(a2 + 12))
                                                              {
                                                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                v360 = *(_DWORD *)(a2 + 8);
                                                              }
                                                              *(_QWORD *)(*(_QWORD *)a2 + 8 * v360) = "-fno-odr-hash-protocols";
                                                              ++*(_DWORD *)(a2 + 8);
                                                              v356 = *((_BYTE *)a1 + 28);
                                                              if (*(uint64_t *)((char *)a1 + 20) < 0)
                                                              {
LABEL_968:
                                                                if ((v356 & 1) != 0)
                                                                  goto LABEL_969;
                                                                goto LABEL_987;
                                                              }
LABEL_984:
                                                              v361 = *(_DWORD *)(a2 + 8);
                                                              if (v361 >= *(_DWORD *)(a2 + 12))
                                                              {
                                                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                v361 = *(_DWORD *)(a2 + 8);
                                                              }
                                                              *(_QWORD *)(*(_QWORD *)a2 + 8 * v361) = "-fno-odr-hash-records";
                                                              ++*(_DWORD *)(a2 + 8);
                                                              v356 = *((_BYTE *)a1 + 28);
                                                              if ((v356 & 1) != 0)
                                                              {
LABEL_969:
                                                                if ((v356 & 2) != 0)
                                                                  goto LABEL_970;
                                                                goto LABEL_990;
                                                              }
LABEL_987:
                                                              v362 = *(_DWORD *)(a2 + 8);
                                                              if (v362 >= *(_DWORD *)(a2 + 12))
                                                              {
                                                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                v362 = *(_DWORD *)(a2 + 8);
                                                              }
                                                              *(_QWORD *)(*(_QWORD *)a2 + 8 * v362) = "-fno-odr-hash-properties";
                                                              ++*(_DWORD *)(a2 + 8);
                                                              v356 = *((_BYTE *)a1 + 28);
                                                              if ((v356 & 2) != 0)
                                                              {
LABEL_970:
                                                                if ((v356 & 4) != 0)
                                                                  goto LABEL_996;
                                                                goto LABEL_993;
                                                              }
LABEL_990:
                                                              v363 = *(_DWORD *)(a2 + 8);
                                                              if (v363 >= *(_DWORD *)(a2 + 12))
                                                              {
                                                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                v363 = *(_DWORD *)(a2 + 8);
                                                              }
                                                              *(_QWORD *)(*(_QWORD *)a2 + 8 * v363) = "-fno-odr-hash-ivars";
                                                              ++*(_DWORD *)(a2 + 8);
                                                              if ((*((_BYTE *)a1 + 28) & 4) != 0)
                                                              {
LABEL_996:
                                                                if ((*(uint64_t *)((char *)a1 + 140) & 0x100000000) == 0)
                                                                {
                                                                  v365 = *(_DWORD *)(a2 + 8);
                                                                  if (v365 >= *(_DWORD *)(a2 + 12))
                                                                  {
                                                                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                    v365 = *(_DWORD *)(a2 + 8);
                                                                  }
                                                                  *(_QWORD *)(*(_QWORD *)a2 + 8 * v365) = "-fno-concept-satisfaction-caching";
                                                                  ++*(_DWORD *)(a2 + 8);
                                                                }
                                                                v366 = *(uint64_t *)((char *)a1 + 20);
                                                                if ((v366 & 0x2000000000) == 0)
                                                                {
                                                                  v367 = *(_DWORD *)(a2 + 8);
                                                                  if (v367 >= *(_DWORD *)(a2 + 12))
                                                                  {
                                                                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                    v367 = *(_DWORD *)(a2 + 8);
                                                                  }
                                                                  *(_QWORD *)(*(_QWORD *)a2 + 8 * v367) = "-fno-recovery-ast";
                                                                  ++*(_DWORD *)(a2 + 8);
                                                                  v366 = *(uint64_t *)((char *)a1 + 20);
                                                                }
                                                                if ((v366 & 0x4000000000) == 0)
                                                                {
                                                                  v368 = *(_DWORD *)(a2 + 8);
                                                                  if (v368 >= *(_DWORD *)(a2 + 12))
                                                                  {
                                                                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                    v368 = *(_DWORD *)(a2 + 8);
                                                                  }
                                                                  *(_QWORD *)(*(_QWORD *)a2 + 8 * v368) = "-fno-recovery-ast-type";
                                                                  ++*(_DWORD *)(a2 + 8);
                                                                }
                                                                v369 = *(uint64_t *)((char *)a1 + 140);
                                                                if ((v369 & 0x2000000000) != 0)
                                                                {
                                                                  v370 = *(_DWORD *)(a2 + 8);
                                                                  if (v370 >= *(_DWORD *)(a2 + 12))
                                                                  {
                                                                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                    v370 = *(_DWORD *)(a2 + 8);
                                                                  }
                                                                  *(_QWORD *)(*(_QWORD *)a2 + 8 * v370) = "-fdump-record-layouts-simple";
                                                                  ++*(_DWORD *)(a2 + 8);
                                                                  v369 = *(uint64_t *)((char *)a1 + 140);
                                                                  if ((v369 & 0x4000000000) == 0)
                                                                  {
LABEL_1010:
                                                                    if ((v369 & 0x8000000000) == 0)
                                                                      goto LABEL_1021;
                                                                    goto LABEL_1018;
                                                                  }
                                                                }
                                                                else if ((v369 & 0x4000000000) == 0)
                                                                {
                                                                  goto LABEL_1010;
                                                                }
                                                                v371 = *(_DWORD *)(a2 + 8);
                                                                if (v371 >= *(_DWORD *)(a2 + 12))
                                                                {
                                                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                  v371 = *(_DWORD *)(a2 + 8);
                                                                }
                                                                *(_QWORD *)(*(_QWORD *)a2 + 8 * v371) = "-fdump-record-layouts-canonical";
                                                                ++*(_DWORD *)(a2 + 8);
                                                                v369 = *(uint64_t *)((char *)a1 + 140);
                                                                if ((v369 & 0x8000000000) == 0)
                                                                {
LABEL_1021:
                                                                  v373 = (v369 >> 36) & 1;
                                                                  if ((v369 & 0xA000000000) != 0)
                                                                    v374 = 1;
                                                                  else
                                                                    v374 = (v369 >> 38) & 1;
                                                                  if ((_DWORD)v373 != v374)
                                                                  {
                                                                    v375 = *(_DWORD *)(a2 + 8);
                                                                    if (v375 >= *(_DWORD *)(a2 + 12))
                                                                    {
                                                                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                      v375 = *(_DWORD *)(a2 + 8);
                                                                    }
                                                                    *(_QWORD *)(*(_QWORD *)a2 + 8 * v375) = "-fdump-record-layouts";
                                                                    ++*(_DWORD *)(a2 + 8);
                                                                  }
                                                                  if ((*(uint64_t *)((char *)a1 + 20) & 0x2000000000000) != 0)
                                                                  {
                                                                    v376 = *(_DWORD *)(a2 + 8);
                                                                    if (v376 >= *(_DWORD *)(a2 + 12))
                                                                    {
                                                                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                      v376 = *(_DWORD *)(a2 + 8);
                                                                    }
                                                                    *(_QWORD *)(*(_QWORD *)a2 + 8 * v376) = "-building-pch-with-obj";
                                                                    ++*(_DWORD *)(a2 + 8);
                                                                  }
                                                                  if ((a1[17] & 0x40) != 0)
                                                                  {
                                                                    v377 = *(_DWORD *)(a2 + 8);
                                                                    if (v377 >= *(_DWORD *)(a2 + 12))
                                                                    {
                                                                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                      v377 = *(_DWORD *)(a2 + 8);
                                                                    }
                                                                    *(_QWORD *)(*(_QWORD *)a2 + 8 * v377) = "-faligned-alloc-unavailable";
                                                                    ++*(_DWORD *)(a2 + 8);
                                                                  }
                                                                  if ((*((_WORD *)a1 + 74) & 0x2000) != 0)
                                                                  {
                                                                    v378 = *(_DWORD *)(a2 + 8);
                                                                    if (v378 >= *(_DWORD *)(a2 + 12))
                                                                    {
                                                                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                      v378 = *(_DWORD *)(a2 + 8);
                                                                    }
                                                                    *(_QWORD *)(*(_QWORD *)a2 + 8 * v378) = "-fblocks-runtime-optional";
                                                                    ++*(_DWORD *)(a2 + 8);
                                                                  }
                                                                  if ((a1[1] & 0x2000000000000) != 0)
                                                                  {
                                                                    v379 = *(_DWORD *)(a2 + 8);
                                                                    if (v379 >= *(_DWORD *)(a2 + 12))
                                                                    {
                                                                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                      v379 = *(_DWORD *)(a2 + 8);
                                                                    }
                                                                    *(_QWORD *)(*(_QWORD *)a2 + 8 * v379) = "-fexternc-nounwind";
                                                                    ++*(_DWORD *)(a2 + 8);
                                                                  }
                                                                  if ((((*(_DWORD *)a1 >> 25) ^ (*(_DWORD *)a1 >> 8)) & 1) != 0)
                                                                  {
                                                                    v380 = *(_DWORD *)(a2 + 8);
                                                                    if (v380 >= *(_DWORD *)(a2 + 12))
                                                                    {
                                                                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                      v380 = *(_DWORD *)(a2 + 8);
                                                                    }
                                                                    *(_QWORD *)(*(_QWORD *)a2 + 8 * v380) = "-fno-wchar";
                                                                    ++*(_DWORD *)(a2 + 8);
                                                                  }
                                                                  if (*((char *)a1 + 447) < 0)
                                                                  {
                                                                    sub_22E3BB2B4(v479, (void *)a1[53], a1[54]);
                                                                  }
                                                                  else
                                                                  {
                                                                    *(_OWORD *)v479 = *(_OWORD *)(a1 + 53);
                                                                    v480 = a1[55];
                                                                  }
                                                                  v477 = v480;
                                                                  *(_OWORD *)__n = *(_OWORD *)v479;
                                                                  v479[1] = 0;
                                                                  v480 = 0;
                                                                  v479[0] = 0;
                                                                  v510 = 0;
                                                                  __s2 = 0;
                                                                  v511 = 0;
                                                                  v381 = HIBYTE(v477);
                                                                  v382 = __n[1];
                                                                  v383 = HIBYTE(v477) & 0x7F;
                                                                  if ((v477 & 0x8000000000000000) == 0)
                                                                    v384 = HIBYTE(v477) & 0x7F;
                                                                  else
                                                                    v384 = __n[1];
                                                                  if (!v384)
                                                                  {
                                                                    if ((v477 & 0x8000000000000000) != 0)
                                                                    {
                                                                      v387 = (void *)__n[0];
                                                                      if (!memcmp((const void *)__n[0], &__s2, __n[1]))
                                                                      {
LABEL_1071:
                                                                        operator delete(v387);
LABEL_1072:
                                                                        if (SHIBYTE(v480) < 0)
                                                                          operator delete(v479[0]);
                                                                        v388 = *a1;
                                                                        if ((*a1 & 0x8000) == 0)
                                                                        {
                                                                          v389 = *(_DWORD *)(a2 + 8);
                                                                          if (v389 >= *(_DWORD *)(a2 + 12))
                                                                          {
                                                                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                            v389 = *(_DWORD *)(a2 + 8);
                                                                          }
                                                                          *(_QWORD *)(*(_QWORD *)a2 + 8 * v389) = "-disable-objc-default-synthesize-properties";
                                                                          ++*(_DWORD *)(a2 + 8);
                                                                          v388 = *a1;
                                                                        }
                                                                        if ((v388 & 0x10000) != 0)
                                                                        {
                                                                          v390 = *(_DWORD *)(a2 + 8);
                                                                          if (v390 >= *(_DWORD *)(a2 + 12))
                                                                          {
                                                                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                            v390 = *(_DWORD *)(a2 + 8);
                                                                          }
                                                                          *(_QWORD *)(*(_QWORD *)a2 + 8 * v390) = "-fencode-extended-block-signature";
                                                                          ++*(_DWORD *)(a2 + 8);
                                                                        }
                                                                        v391 = ((unint64_t)a1[24] >> 46) & 0x1F;
                                                                        if ((_DWORD)v391)
                                                                        {
                                                                          LOWORD(v513) = 264;
                                                                          LODWORD(__s2) = v391;
                                                                          sub_22E721364(a2, "-function-alignment", a3, v472, 6, (uint64_t *)&__s2);
                                                                        }
                                                                        v392 = *((_DWORD *)a1 + 13);
                                                                        if (((v392 >> 2) & 3) != 0)
                                                                        {
                                                                          LOWORD(v513) = 264;
                                                                          LODWORD(__s2) = (v392 >> 2) & 3;
                                                                          sub_22E721364(a2, "-pic-level", a3, v472, 6, (uint64_t *)&__s2);
                                                                          v392 = *((_DWORD *)a1 + 13);
                                                                        }
                                                                        if ((v392 & 0x10) != 0)
                                                                        {
                                                                          v393 = *(_DWORD *)(a2 + 8);
                                                                          if (v393 >= *(_DWORD *)(a2 + 12))
                                                                          {
                                                                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                            v393 = *(_DWORD *)(a2 + 8);
                                                                          }
                                                                          *(_QWORD *)(*(_QWORD *)a2 + 8 * v393) = "-pic-is-pie";
                                                                          ++*(_DWORD *)(a2 + 8);
                                                                        }
                                                                        if (((*((unsigned __int16 *)a1 + 74) | (*((unsigned __int8 *)a1 + 150) << 16)) & 0x40000) != 0)
                                                                        {
                                                                          v394 = *(_DWORD *)(a2 + 8);
                                                                          if (v394 >= *(_DWORD *)(a2 + 12))
                                                                          {
                                                                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                            v394 = *(_DWORD *)(a2 + 8);
                                                                          }
                                                                          *(_QWORD *)(*(_QWORD *)a2 + 8 * v394) = "-fhalf-no-semantic-interposition";
                                                                          ++*(_DWORD *)(a2 + 8);
                                                                        }
                                                                        if ((*((_BYTE *)a1 + 28) & 0x20) != 0)
                                                                        {
                                                                          v395 = *(_DWORD *)(a2 + 8);
                                                                          if (v395 >= *(_DWORD *)(a2 + 12))
                                                                          {
                                                                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                            v395 = *(_DWORD *)(a2 + 8);
                                                                          }
                                                                          *(_QWORD *)(*(_QWORD *)a2 + 8 * v395) = "-static-define";
                                                                          ++*(_DWORD *)(a2 + 8);
                                                                        }
                                                                        v396 = *((_WORD *)a1 + 124);
                                                                        if (v396 >> 6)
                                                                          sub_22E7216A8(a2, "-stack-protector", a3, v472, 6, 0x2Bu, v396 >> 6);
                                                                        sub_22E7216A8(a2, "-fvisibility", a3, v472, 6, 0x2Cu, (*((_DWORD *)a1 + 61) >> 19) & 7);
                                                                        v397 = *((_DWORD *)a1 + 61);
                                                                        v398 = (v397 >> 22) & 7;
                                                                        if (v398 != ((v397 >> 19) & 7))
                                                                          sub_22E7216A8(a2, "-ftype-visibility", a3, v472, 6, 0x2Du, v398);
                                                                        if ((*((_WORD *)a1 + 74) & 0x8000) != 0)
                                                                        {
                                                                          v399 = *(_DWORD *)(a2 + 8);
                                                                          if (v399 >= *(_DWORD *)(a2 + 12))
                                                                          {
                                                                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                            v399 = *(_DWORD *)(a2 + 8);
                                                                          }
                                                                          *(_QWORD *)(*(_QWORD *)a2 + 8 * v399) = "-fapply-global-visibility-to-externs";
                                                                          ++*(_DWORD *)(a2 + 8);
                                                                        }
                                                                        v400 = *((_DWORD *)a1 + 42);
                                                                        if (v400 != 1024)
                                                                        {
                                                                          LOWORD(v513) = 264;
                                                                          LODWORD(__s2) = v400;
                                                                          sub_22E721364(a2, "-ftemplate-depth", a3, v472, 6, (uint64_t *)&__s2);
                                                                        }
                                                                        v401 = *((_DWORD *)a1 + 41);
                                                                        v403 = *((_DWORD *)a1 + 43);
                                                                        v402 = *((_DWORD *)a1 + 44);
                                                                        if (v401 != 256)
                                                                        {
                                                                          LOWORD(v513) = 264;
                                                                          LODWORD(__s2) = v401;
                                                                          sub_22E721364(a2, "-foperator-arrow-depth", a3, v472, 6, (uint64_t *)&__s2);
                                                                          v403 = *((_DWORD *)a1 + 43);
                                                                          v402 = *((_DWORD *)a1 + 44);
                                                                        }
                                                                        if (v403 != 512)
                                                                        {
                                                                          LOWORD(v513) = 264;
                                                                          LODWORD(__s2) = v403;
                                                                          sub_22E721364(a2, "-fconstexpr-depth", a3, v472, 6, (uint64_t *)&__s2);
                                                                          v402 = *((_DWORD *)a1 + 44);
                                                                        }
                                                                        if (v402 != 0x100000)
                                                                        {
                                                                          LOWORD(v513) = 264;
                                                                          LODWORD(__s2) = v402;
                                                                          sub_22E721364(a2, "-fconstexpr-steps", a3, v472, 6, (uint64_t *)&__s2);
                                                                        }
                                                                        v404 = *((_DWORD *)a1 + 46);
                                                                        if (v404 != 256)
                                                                        {
                                                                          LOWORD(v513) = 264;
                                                                          LODWORD(__s2) = v404;
                                                                          sub_22E721364(a2, "-fbracket-depth", a3, v472, 6, (uint64_t *)&__s2);
                                                                        }
                                                                        if ((a1[1] & 0x10000000000) != 0)
                                                                        {
                                                                          v405 = *(_DWORD *)(a2 + 8);
                                                                          if (v405 >= *(_DWORD *)(a2 + 12))
                                                                          {
                                                                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                            v405 = *(_DWORD *)(a2 + 8);
                                                                          }
                                                                          *(_QWORD *)(*(_QWORD *)a2 + 8 * v405) = "-fconst-strings";
                                                                          ++*(_DWORD *)(a2 + 8);
                                                                        }
                                                                        if (*(uint64_t *)((char *)a1 + 140) < 0)
                                                                        {
                                                                          v406 = *(_DWORD *)(a2 + 8);
                                                                          if (v406 >= *(_DWORD *)(a2 + 12))
                                                                          {
                                                                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                            v406 = *(_DWORD *)(a2 + 8);
                                                                          }
                                                                          *(_QWORD *)(*(_QWORD *)a2 + 8 * v406) = "-fno-bitfield-type-align";
                                                                          ++*(_DWORD *)(a2 + 8);
                                                                        }
                                                                        if ((*((_WORD *)a1 + 74) & 0x200) != 0)
                                                                        {
                                                                          v407 = *(_DWORD *)(a2 + 8);
                                                                          if (v407 >= *(_DWORD *)(a2 + 12))
                                                                          {
                                                                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                            v407 = *(_DWORD *)(a2 + 8);
                                                                          }
                                                                          *(_QWORD *)(*(_QWORD *)a2 + 8 * v407) = "-ffake-address-space-map";
                                                                          ++*(_DWORD *)(a2 + 8);
                                                                        }
                                                                        v408 = (*((_DWORD *)a1 + 61) >> 15) & 3;
                                                                        if (v408)
                                                                          sub_22E7216A8(a2, "-faddress-space-map-mangling=", a3, v472, 4, 0x2Eu, v408);
                                                                        v409 = *(uint64_t *)((char *)a1 + 140);
                                                                        if ((v409 & 0x10000000000000) != 0)
                                                                        {
                                                                          v410 = *(_DWORD *)(a2 + 8);
                                                                          if (v410 >= *(_DWORD *)(a2 + 12))
                                                                          {
                                                                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                            v410 = *(_DWORD *)(a2 + 8);
                                                                          }
                                                                          *(_QWORD *)(*(_QWORD *)a2 + 8 * v410) = "-funknown-anytype";
                                                                          ++*(_DWORD *)(a2 + 8);
                                                                          v409 = *(uint64_t *)((char *)a1 + 140);
                                                                          if ((v409 & 0x20000000000000) == 0)
                                                                          {
LABEL_1132:
                                                                            if ((v409 & 0x40000000000000) == 0)
                                                                              goto LABEL_1133;
                                                                            goto LABEL_1141;
                                                                          }
                                                                        }
                                                                        else if ((v409 & 0x20000000000000) == 0)
                                                                        {
                                                                          goto LABEL_1132;
                                                                        }
                                                                        v411 = *(_DWORD *)(a2 + 8);
                                                                        if (v411 >= *(_DWORD *)(a2 + 12))
                                                                        {
                                                                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                          v411 = *(_DWORD *)(a2 + 8);
                                                                        }
                                                                        *(_QWORD *)(*(_QWORD *)a2 + 8 * v411) = "-fdebugger-support";
                                                                        ++*(_DWORD *)(a2 + 8);
                                                                        v409 = *(uint64_t *)((char *)a1 + 140);
                                                                        if ((v409 & 0x40000000000000) == 0)
                                                                        {
LABEL_1133:
                                                                          if ((v409 & 0x80000000000000) == 0)
                                                                            goto LABEL_1147;
                                                                          goto LABEL_1144;
                                                                        }
LABEL_1141:
                                                                        v412 = *(_DWORD *)(a2 + 8);
                                                                        if (v412 >= *(_DWORD *)(a2 + 12))
                                                                        {
                                                                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                          v412 = *(_DWORD *)(a2 + 8);
                                                                        }
                                                                        *(_QWORD *)(*(_QWORD *)a2 + 8 * v412) = "-fdebugger-cast-result-to-id";
                                                                        ++*(_DWORD *)(a2 + 8);
                                                                        if ((*(uint64_t *)((char *)a1 + 140) & 0x80000000000000) == 0)
                                                                        {
LABEL_1147:
                                                                          if ((*((_DWORD *)a1 + 13) & 0x200) != 0)
                                                                          {
                                                                            v414 = *(_DWORD *)(a2 + 8);
                                                                            if (v414 >= *(_DWORD *)(a2 + 12))
                                                                            {
                                                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                              v414 = *(_DWORD *)(a2 + 8);
                                                                            }
                                                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v414) = "-fdeprecated-macro";
                                                                            ++*(_DWORD *)(a2 + 8);
                                                                          }
                                                                          v415 = *((unsigned __int16 *)a1 + 124) >> 14;
                                                                          if (v415 != 1)
                                                                          {
                                                                            LOWORD(v513) = 264;
                                                                            LODWORD(__s2) = v415;
                                                                            sub_22E721364(a2, "-vtordisp-mode=", a3, v472, 4, (uint64_t *)&__s2);
                                                                          }
                                                                          v416 = a1[8];
                                                                          v417 = *((_DWORD *)a1 + 13);
                                                                          if ((v417 & 0x40000000) != 0
                                                                            || (a1[12] & 0x20) != 0)
                                                                          {
                                                                            LODWORD(v418) = 1;
                                                                          }
                                                                          else
                                                                          {
                                                                            v418 = (*(unint64_t *)((char *)a1 + 100) >> 37) & 1;
                                                                          }
                                                                          if (((v416 >> 35) & 1) != (_DWORD)v418)
                                                                          {
                                                                            v419 = *(_DWORD *)(a2 + 8);
                                                                            if (v419 >= *(_DWORD *)(a2 + 12))
                                                                            {
                                                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                              v419 = *(_DWORD *)(a2 + 8);
                                                                            }
                                                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v419) = "-fnative-half-type";
                                                                            ++*(_DWORD *)(a2 + 8);
                                                                            v416 = a1[8];
                                                                            v417 = *((_DWORD *)a1 + 13);
                                                                          }
                                                                          v420 = (v416 >> 36) & 1;
                                                                          if ((v417 & 0x40000000) != 0
                                                                            || (a1[12] & 0x20) != 0)
                                                                          {
                                                                            LODWORD(v421) = 1;
                                                                          }
                                                                          else
                                                                          {
                                                                            v421 = (*(unint64_t *)((char *)a1 + 100) >> 37) & 1;
                                                                          }
                                                                          if ((_DWORD)v420 != (_DWORD)v421)
                                                                          {
                                                                            v422 = *(_DWORD *)(a2 + 8);
                                                                            if (v422 >= *(_DWORD *)(a2 + 12))
                                                                            {
                                                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                              v422 = *(_DWORD *)(a2 + 8);
                                                                            }
                                                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v422) = "-fnative-half-arguments-and-returns";
                                                                            ++*(_DWORD *)(a2 + 8);
                                                                          }
                                                                          v423 = (*((_DWORD *)a1 + 60) >> 10) & 7;
                                                                          if (v423)
                                                                            sub_22E7216A8(a2, "-fdefault-calling-conv=", a3, v472, 4, 0x2Fu, v423);
                                                                          v424 = *((_DWORD *)a1 + 13);
                                                                          v425 = HIBYTE(v424) & 0xF;
                                                                          if (v425)
                                                                          {
                                                                            sub_22E7216A8(a2, "-fwchar-type=", a3, v472, 4, 0x30u, v425);
                                                                            v424 = *((_DWORD *)a1 + 13);
                                                                          }
                                                                          if ((v424 & 0x10000000) == 0)
                                                                          {
                                                                            v426 = *(_DWORD *)(a2 + 8);
                                                                            if (v426 >= *(_DWORD *)(a2 + 12))
                                                                            {
                                                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                              v426 = *(_DWORD *)(a2 + 8);
                                                                            }
                                                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v426) = "-fno-signed-wchar";
                                                                            ++*(_DWORD *)(a2 + 8);
                                                                          }
                                                                          if ((*((_WORD *)a1 + 74) & 0x40) != 0)
                                                                          {
                                                                            v427 = *(_DWORD *)(a2 + 8);
                                                                            if (v427 >= *(_DWORD *)(a2 + 12))
                                                                            {
                                                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                              v427 = *(_DWORD *)(a2 + 8);
                                                                            }
                                                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v427) = "-fcompatibility-qualified-id-block-type-checking";
                                                                            ++*(_DWORD *)(a2 + 8);
                                                                          }
                                                                          v428 = *((_DWORD *)a1 + 58);
                                                                          if (v428)
                                                                          {
                                                                            LOWORD(v513) = 264;
                                                                            LODWORD(__s2) = v428;
                                                                            sub_22E721364(a2, "-fexperimental-max-bitint-width=", a3, v472, 4, (uint64_t *)&__s2);
                                                                          }
                                                                          v429 = *((_WORD *)a1 + 48);
                                                                          if ((v429 & 0x80) != 0)
                                                                          {
                                                                            v430 = *(_DWORD *)(a2 + 8);
                                                                            if (v430 >= *(_DWORD *)(a2 + 12))
                                                                            {
                                                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                              v430 = *(_DWORD *)(a2 + 8);
                                                                            }
                                                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v430) = "-fcuda-is-device";
                                                                            ++*(_DWORD *)(a2 + 8);
                                                                            v429 = *((_WORD *)a1 + 48);
                                                                            if ((v429 & 0x100) == 0)
                                                                            {
LABEL_1185:
                                                                              if ((v429 & 0x200) != 0)
                                                                                goto LABEL_1196;
                                                                              goto LABEL_1193;
                                                                            }
                                                                          }
                                                                          else if ((a1[12] & 0x100) == 0)
                                                                          {
                                                                            goto LABEL_1185;
                                                                          }
                                                                          v431 = *(_DWORD *)(a2 + 8);
                                                                          if (v431 >= *(_DWORD *)(a2 + 12))
                                                                          {
                                                                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                            v431 = *(_DWORD *)(a2 + 8);
                                                                          }
                                                                          *(_QWORD *)(*(_QWORD *)a2 + 8 * v431) = "-fcuda-allow-variadic-functions";
                                                                          ++*(_DWORD *)(a2 + 8);
                                                                          if ((a1[12] & 0x200) != 0)
                                                                          {
LABEL_1196:
                                                                            v433 = *(uint64_t *)((char *)a1 + 100);
                                                                            if ((v433 & 0x400000000) != 0)
                                                                            {
                                                                              v434 = *(_DWORD *)(a2 + 8);
                                                                              if (v434 >= *(_DWORD *)(a2 + 12))
                                                                              {
                                                                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                                v434 = *(_DWORD *)(a2 + 8);
                                                                              }
                                                                              *(_QWORD *)(*(_QWORD *)a2 + 8 * v434) = "-fsycl-is-device";
                                                                              ++*(_DWORD *)(a2 + 8);
                                                                              v433 = *(uint64_t *)((char *)a1 + 100);
                                                                            }
                                                                            if ((v433 & 0x800000000) != 0)
                                                                            {
                                                                              v435 = *(_DWORD *)(a2 + 8);
                                                                              if (v435 >= *(_DWORD *)(a2 + 12))
                                                                              {
                                                                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                                v435 = *(_DWORD *)(a2 + 8);
                                                                              }
                                                                              *(_QWORD *)(*(_QWORD *)a2 + 8 * v435) = "-fsycl-is-host";
                                                                              ++*(_DWORD *)(a2 + 8);
                                                                            }
                                                                            v436 = (*((_DWORD *)a1 + 60) >> 29) & 3;
                                                                            if (v436)
                                                                              sub_22E7216A8(a2, "-sycl-std=", a3, v472, 4, 0x31u, v436);
                                                                            if ((a1[12] & 0x400) != 0)
                                                                            {
                                                                              v437 = *(_DWORD *)(a2 + 8);
                                                                              if (v437 >= *(_DWORD *)(a2 + 12))
                                                                              {
                                                                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                                v437 = *(_DWORD *)(a2 + 8);
                                                                              }
                                                                              *(_QWORD *)(*(_QWORD *)a2 + 8 * v437) = "-fcuda-approx-transcendentals";
                                                                              ++*(_DWORD *)(a2 + 8);
                                                                            }
                                                                            if ((*((_BYTE *)a1 + 228) & 1) != 0)
                                                                            {
                                                                              v438 = *(_DWORD *)(a2 + 8);
                                                                              if (v438 >= *(_DWORD *)(a2 + 12))
                                                                              {
                                                                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                                v438 = *(_DWORD *)(a2 + 8);
                                                                              }
                                                                              *(_QWORD *)(*(_QWORD *)a2 + 8 * v438) = "-fsuppress-conflicting-types";
                                                                              ++*(_DWORD *)(a2 + 8);
                                                                            }
                                                                            if ((*((_BYTE *)a1 + 196) & 0x20) != 0)
                                                                              sub_22E6E0868(a2, 882, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
                                                                            if ((*((_BYTE *)a1 + 1) & 0x40) == 0)
                                                                            {
LABEL_1227:
                                                                              v440 = *((_DWORD *)a1 + 2);
                                                                              if (v440)
                                                                              {
                                                                                v473[0] = v440 / 0x2710uLL;
                                                                                v474 = ".";
                                                                                v475 = 776;
                                                                                __n[0] = (size_t)v473;
                                                                                v477 = (v440 / 0x64 - 100 * ((42949673 * (unint64_t)(v440 / 0x64)) >> 32));
                                                                                v478 = 2050;
                                                                                *(_QWORD *)__p = __n;
                                                                                *(_QWORD *)&__p[16] = ".";
                                                                                v508 = 770;
                                                                                __s2 = __p;
                                                                                v511 = v440 % 0x64;
                                                                                LOWORD(v513) = 2050;
                                                                                sub_22E6E094C(a2, 765, (uint64_t)&__s2, a3, v472);
                                                                              }
                                                                              if ((*(uint64_t *)((char *)a1 + 140) & 0x800000000000) != 0)
                                                                                sub_22E6E0868(a2, 2242, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
                                                                              v441 = (*((unsigned __int16 *)a1 + 124) >> 10) & 3;
                                                                              if (v441 == 1)
                                                                              {
                                                                                sub_22E6E0868(a2, 1842, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
                                                                              }
                                                                              else if (v441 == 2)
                                                                              {
                                                                                sub_22E6E0868(a2, 1769, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
                                                                                LOWORD(v513) = 260;
                                                                                __s2 = a1 + 56;
                                                                                sub_22E6E094C(a2, 1768, (uint64_t)&__s2, a3, v472);
                                                                              }
                                                                              v442 = *((_DWORD *)a1 + 48);
                                                                              if (v442)
                                                                              {
                                                                                v473[0] = v442 / 0x989680uLL;
                                                                                v474 = ".";
                                                                                v475 = 776;
                                                                                __n[0] = (size_t)v473;
                                                                                v477 = (unsigned __int16)(v442 / 0x186A0 - 100 * ((unsigned __int16)((5243 * (v442 / 0x61A80)) >> 16) >> 1));
                                                                                v478 = 2050;
                                                                                *(_QWORD *)__p = __n;
                                                                                *(_QWORD *)&__p[16] = ".";
                                                                                v508 = 770;
                                                                                __s2 = __p;
                                                                                v511 = v442 % 0x186A0;
                                                                                LOWORD(v513) = 2050;
                                                                                sub_22E6E094C(a2, 909, (uint64_t)&__s2, a3, v472);
                                                                              }
                                                                              v443 = *a1;
                                                                              if ((*a1 & 0x80000810) == 0
                                                                                || *(_DWORD *)(a5 + 36) == 16)
                                                                              {
                                                                                if ((v443 & 0x100000) == 0)
                                                                                {
                                                                                  v444 = 1354;
                                                                                  goto LABEL_1243;
                                                                                }
                                                                              }
                                                                              else if ((v443 & 0x100000) != 0)
                                                                              {
                                                                                v444 = 1777;
LABEL_1243:
                                                                                sub_22E6E0868(a2, v444, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
                                                                              }
                                                                              if ((*(uint64_t *)((char *)a1 + 20) & 0x20000000000) != 0
                                                                                && ((*((_DWORD *)a1 + 13) & 0x40000000) == 0
                                                                                 || *((_DWORD *)a1 + 14) != 200))
                                                                              {
                                                                                sub_22E6E0868(a2, 445, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
                                                                              }
                                                                              v445 = a1[1];
                                                                              if ((v445 & 0x20000000000) != 0
                                                                                && (*((_DWORD *)a1 + 13) & 0x40000000) == 0)
                                                                              {
                                                                                v446 = *(uint64_t *)((char *)a1 + 100);
                                                                                if ((v446 & 0x2000000000) == 0)
                                                                                {
                                                                                  if ((*((_BYTE *)a1 + 68) & 0x20) == 0)
                                                                                  {
                                                                                    if ((v446 & 0x400000000) != 0)
                                                                                      goto LABEL_1260;
                                                                                    goto LABEL_1259;
                                                                                  }
                                                                                  if ((v446 & 0x400000000) == 0
                                                                                    && (a1[12] & 0x80) == 0)
                                                                                  {
LABEL_1259:
                                                                                    sub_22E6E0868(a2, 511, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
                                                                                    v445 = a1[1];
                                                                                  }
                                                                                }
                                                                              }
LABEL_1260:
                                                                              if ((v445 & 0xC0000000000000) == 0x80000000000000
                                                                                && (*((_DWORD *)a1 + 13) & 0x40000000) == 0
                                                                                && (a1[13] & 0x20) == 0)
                                                                              {
                                                                                sub_22E6E0868(a2, 968, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
                                                                                v445 = a1[1];
                                                                              }
                                                                              if ((v445 & 0x80000000000000) == 0)
                                                                              {
                                                                                v447 = (char *)a1[72];
                                                                                for (i = (char *)a1[73];
                                                                                      v447 != i;
                                                                                      v447 += 24)
                                                                                {
                                                                                  LOWORD(v513) = 260;
                                                                                  __s2 = v447;
                                                                                  sub_22E6E094C(a2, 967, (uint64_t)&__s2, a3, v472);
                                                                                }
                                                                              }
                                                                              v449 = *(uint64_t *)((char *)a1 + 140);
                                                                              if ((v449 & 0x40000000000) != 0)
                                                                              {
                                                                                if ((v449 & 0x80000000000) != 0)
                                                                                {
                                                                                  sub_22E6E0868(a2, 985, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
                                                                                  v449 = *(uint64_t *)((char *)a1 + 140);
                                                                                  if ((v449 & 0x100000000000) == 0)
                                                                                  {
LABEL_1270:
                                                                                    if ((v449 & 0x200000000000) == 0)
                                                                                      goto LABEL_1272;
                                                                                    goto LABEL_1271;
                                                                                  }
                                                                                }
                                                                                else if ((v449 & 0x100000000000) == 0)
                                                                                {
                                                                                  goto LABEL_1270;
                                                                                }
                                                                                sub_22E6E0868(a2, 983, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
                                                                                if ((*(uint64_t *)((char *)a1 + 140) & 0x200000000000) != 0)
LABEL_1271:
                                                                                  sub_22E6E0868(a2, 984, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
                                                                              }
LABEL_1272:
                                                                              v450 = *((_DWORD *)a1 + 12);
                                                                              switch(v450)
                                                                              {
                                                                                case 128:
                                                                                  v451 = 2287;
                                                                                  break;
                                                                                case 80:
                                                                                  v451 = 2289;
                                                                                  break;
                                                                                case 64:
                                                                                  v451 = 2288;
                                                                                  break;
                                                                                default:
                                                                                  goto LABEL_1282;
                                                                              }
                                                                              sub_22E6E0868(a2, v451, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
LABEL_1282:
                                                                              v452 = *((_DWORD *)a1 + 61) & 3;
                                                                              if (v452 == 2)
                                                                              {
                                                                                v453 = "rtz";
                                                                              }
                                                                              else if (v452 == 1)
                                                                              {
                                                                                v453 = "rte";
                                                                              }
                                                                              else
                                                                              {
                                                                                if (v452)
                                                                                  goto LABEL_1289;
                                                                                v453 = "native";
                                                                              }
                                                                              __s2 = v453;
                                                                              LOWORD(v513) = 259;
                                                                              sub_22E6E094C(a2, 1749, (uint64_t)&__s2, a3, v472);
LABEL_1289:
                                                                              v454 = *(uint64_t *)((char *)a1 + 116);
                                                                              v473[0] = *(uint64_t *)((char *)a1 + 108) | 0x8000000000000000;
                                                                              v473[1] = v454 & 0x7FFFFFFF | 0x80000000;
                                                                              if ((v454 & 0xE4000000000000) != 0)
                                                                              {
                                                                                sub_22E6E0868(a2, 419, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
                                                                                v454 = *(uint64_t *)((char *)a1 + 116);
                                                                              }
                                                                              if ((v454 & 0x100000000) != 0
                                                                                && (a1[13] & 0x80) != 0)
                                                                              {
                                                                                v510 = 0;
                                                                                __s2 = (void *)0x8000000300000002;
                                                                                if (sub_22E3B38EC(v473, &__s2))sub_22E6E0868(a2, 742, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
                                                                              }
                                                                              if ((*((_BYTE *)a1 + 127) & 1) != 0)
                                                                                v455 = "fast";
                                                                              else
                                                                                v455 = "precise";
                                                                              __s2 = v455;
                                                                              LOWORD(v513) = 259;
                                                                              sub_22E6E094C(a2, 867, (uint64_t)&__s2, a3, v472);
                                                                              v456 = a1[9];
                                                                              if (!(_DWORD)v456
                                                                                || (v456 & 0x200000000) != 0)
                                                                              {
                                                                                goto LABEL_1305;
                                                                              }
                                                                              sub_22E6E0868(a2, 1466, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
                                                                              v456 = a1[9];
                                                                              if ((_DWORD)v456 == 50)
                                                                              {
                                                                                if ((v456 & 0x400000000) != 0)
                                                                                  goto LABEL_1302;
                                                                              }
                                                                              else
                                                                              {
                                                                                LOWORD(v513) = 264;
                                                                                LODWORD(__s2) = v456;
                                                                                sub_22E6E094C(a2, 1464, (uint64_t)&__s2, a3, v472);
                                                                                v456 = a1[9];
                                                                                if ((v456 & 0x400000000) != 0)
                                                                                {
LABEL_1302:
                                                                                  if ((v456 & 0x800000000) == 0)
                                                                                    goto LABEL_1303;
                                                                                  goto LABEL_1347;
                                                                                }
                                                                              }
                                                                              sub_22E6E0868(a2, 1405, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
                                                                              v456 = a1[9];
                                                                              if ((v456 & 0x800000000) == 0)
                                                                              {
LABEL_1303:
                                                                                if ((v456 & 0x2000000000) != 0)
                                                                                {
LABEL_1304:
                                                                                  sub_22E6E0868(a2, 1449, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
                                                                                  v456 = a1[9];
                                                                                }
LABEL_1305:
                                                                                if ((v456 & 0x200000000) != 0)
                                                                                {
                                                                                  sub_22E6E0868(a2, 1458, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
                                                                                  v457 = *((unsigned int *)a1 + 18);
                                                                                  if (v457 != 50)
                                                                                  {
                                                                                    LOWORD(v513) = 264;
                                                                                    LODWORD(__s2) = v457;
                                                                                    sub_22E6E094C(a2, 1464, (uint64_t)&__s2, a3, v472);
                                                                                  }
                                                                                }
                                                                                v458 = *((_WORD *)a1 + 48);
                                                                                if ((v458 & 2) != 0)
                                                                                {
                                                                                  sub_22E6E0868(a2, 1443, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
                                                                                  v460 = a1[10];
                                                                                  v459 = a1[11];
                                                                                  if ((a1[12] & 4) != 0)
                                                                                  {
LABEL_1310:
                                                                                    sub_22E6E0868(a2, 1442, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
                                                                                    LODWORD(v460) = *((_DWORD *)a1 + 20);
                                                                                    LODWORD(v461) = *((_DWORD *)a1 + 21);
                                                                                    LODWORD(v459) = *((_DWORD *)a1 + 22);
                                                                                    LODWORD(v462) = *((_DWORD *)a1 + 23);
                                                                                    if (!(_DWORD)v462)
                                                                                    {
LABEL_1315:
                                                                                      if ((_DWORD)v460)
                                                                                      {
                                                                                        LOWORD(v513) = 264;
                                                                                        LODWORD(__s2) = v460;
                                                                                        sub_22E6E094C(a2, 1447, (uint64_t)&__s2, a3, v472);
                                                                                        LODWORD(v461) = *((_DWORD *)a1 + 21);
                                                                                        LODWORD(v459) = *((_DWORD *)a1 + 22);
                                                                                      }
                                                                                      if ((_DWORD)v461)
                                                                                      {
                                                                                        LOWORD(v513) = 264;
                                                                                        LODWORD(__s2) = v461;
                                                                                        sub_22E6E094C(a2, 1444, (uint64_t)&__s2, a3, v472);
                                                                                        LODWORD(v459) = *((_DWORD *)a1 + 22);
                                                                                      }
                                                                                      if ((_DWORD)v459 != 1024)
                                                                                      {
                                                                                        LOWORD(v513) = 264;
                                                                                        LODWORD(__s2) = v459;
                                                                                        sub_22E6E094C(a2, 1448, (uint64_t)&__s2, a3, v472);
                                                                                      }
                                                                                      if (a1[78] != a1[79])
                                                                                      {
                                                                                        __n[0] = 0;
                                                                                        __n[1] = 0;
                                                                                        v477 = 0;
                                                                                        LODWORD(v510) = 0;
                                                                                        LOBYTE(v514) = 0;
                                                                                        v515 = 0;
                                                                                        v516 = 1;
                                                                                        v513 = 0;
                                                                                        v511 = 0;
                                                                                        v512 = 0;
                                                                                        __s2 = (void *)(MEMORY[0x24BED83D8] + 16);
                                                                                        v517 = __n;
                                                                                        llvm::raw_ostream::SetBufferAndMode();
                                                                                        v463 = a1[78];
                                                                                        v464 = a1[79];
                                                                                        if (v463 != v464)
                                                                                        {
                                                                                          v465 = *(char *)(v463 + 23) >= 0
                                                                                               ? (const char *)a1[78]
                                                                                               : *(const char **)v463;
                                                                                          llvm::raw_ostream::write((llvm::raw_ostream *)&__s2, v465);
                                                                                          for (j = v463 + 48;
                                                                                                j != v464;
                                                                                                j += 48)
                                                                                          {
                                                                                            if (v512 == v513)
                                                                                              llvm::raw_ostream::write((llvm::raw_ostream *)&__s2, ",");
                                                                                            else
                                                                                              *v513++ = 44;
                                                                                            if (*(char *)(j + 23) >= 0)
                                                                                              v467 = (const char *)j;
                                                                                            else
                                                                                              v467 = *(const char **)j;
                                                                                            llvm::raw_ostream::write((llvm::raw_ostream *)&__s2, v467);
                                                                                          }
                                                                                        }
                                                                                        v508 = 260;
                                                                                        *(_QWORD *)__p = v517;
                                                                                        sub_22E6E094C(a2, 1462, (uint64_t)__p, a3, v472);
                                                                                        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__s2);
                                                                                        if (SHIBYTE(v477) < 0)
                                                                                          operator delete((void *)__n[0]);
                                                                                      }
                                                                                      v468 = *((_BYTE *)a1 + 671);
                                                                                      v469 = v468;
                                                                                      v470 = v468 & 0x7F;
                                                                                      if (v469 < 0)
                                                                                        v470 = a1[82];
                                                                                      if (v470)
                                                                                      {
                                                                                        LOWORD(v513) = 260;
                                                                                        __s2 = a1 + 81;
                                                                                        sub_22E6E094C(a2, 1451, (uint64_t)&__s2, a3, v472);
                                                                                      }
                                                                                      v471 = a1[9];
                                                                                      if ((v471 & 0x1000000000) != 0)
                                                                                      {
                                                                                        sub_22E6E0868(a2, 1446, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
                                                                                        v471 = a1[9];
                                                                                      }
                                                                                      if ((v471 & 0x4000000000) != 0)
                                                                                        sub_22E6E0868(a2, 1445, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
                                                                                      __asm { BR              X10 }
                                                                                    }
LABEL_1314:
                                                                                    LOWORD(v513) = 264;
                                                                                    LODWORD(__s2) = v462;
                                                                                    sub_22E6E094C(a2, 1459, (uint64_t)&__s2, a3, v472);
                                                                                    LODWORD(v460) = *((_DWORD *)a1 + 20);
                                                                                    LODWORD(v461) = *((_DWORD *)a1 + 21);
                                                                                    LODWORD(v459) = *((_DWORD *)a1 + 22);
                                                                                    goto LABEL_1315;
                                                                                  }
                                                                                }
                                                                                else
                                                                                {
                                                                                  v460 = a1[10];
                                                                                  v459 = a1[11];
                                                                                  if ((v458 & 4) != 0)
                                                                                    goto LABEL_1310;
                                                                                }
                                                                                v462 = HIDWORD(v459);
                                                                                v461 = HIDWORD(v460);
                                                                                if (!HIDWORD(v459))
                                                                                  goto LABEL_1315;
                                                                                goto LABEL_1314;
                                                                              }
LABEL_1347:
                                                                              sub_22E6E0868(a2, 1453, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
                                                                              v456 = a1[9];
                                                                              if ((v456 & 0x2000000000) == 0)
                                                                                goto LABEL_1305;
                                                                              goto LABEL_1304;
                                                                            }
                                                                            sub_22F1DBB6C((int *)a1 + 100, __p);
                                                                            LOWORD(v513) = 260;
                                                                            __s2 = __p;
                                                                            sub_22E6E094C(a2, 1431, (uint64_t)&__s2, a3, v472);
                                                                            if ((__p[23] & 0x80000000) != 0)
                                                                              operator delete(*(void **)__p);
                                                                            LOBYTE(v439) = *((_WORD *)a1 + 74);
                                                                            if ((*((_WORD *)a1 + 74) & 2) != 0)
                                                                            {
                                                                              sub_22E6E0868(a2, 1410, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
                                                                              LOBYTE(v439) = *((_WORD *)a1 + 74);
                                                                              if ((*((_WORD *)a1 + 74) & 4) == 0)
                                                                              {
LABEL_1221:
                                                                                if ((v439 & 8) == 0)
                                                                                {
LABEL_1223:
                                                                                  if ((v439 & 0x18) == 0x10)
                                                                                  {
                                                                                    sub_22E6E0868(a2, 786, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
                                                                                    v439 = *((_WORD *)a1 + 74);
                                                                                  }
                                                                                  if ((v439 & 0x20) != 0)
                                                                                    sub_22E6E0868(a2, 1433, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
                                                                                  goto LABEL_1227;
                                                                                }
LABEL_1222:
                                                                                sub_22E6E0868(a2, 1434, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
                                                                                v439 = *((_WORD *)a1 + 74);
                                                                                goto LABEL_1223;
                                                                              }
                                                                            }
                                                                            else if ((*((_WORD *)a1 + 74) & 4) == 0)
                                                                            {
                                                                              goto LABEL_1221;
                                                                            }
                                                                            sub_22E6E0868(a2, 1430, (uint64_t (*)(uint64_t, _QWORD *))a3, v472);
                                                                            LOBYTE(v439) = *((_WORD *)a1 + 74);
                                                                            if ((*((_WORD *)a1 + 74) & 8) == 0)
                                                                              goto LABEL_1223;
                                                                            goto LABEL_1222;
                                                                          }
LABEL_1193:
                                                                          v432 = *(_DWORD *)(a2 + 8);
                                                                          if (v432 >= *(_DWORD *)(a2 + 12))
                                                                          {
                                                                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                            v432 = *(_DWORD *)(a2 + 8);
                                                                          }
                                                                          *(_QWORD *)(*(_QWORD *)a2 + 8 * v432) = "-fno-cuda-host-device-constexpr";
                                                                          ++*(_DWORD *)(a2 + 8);
                                                                          goto LABEL_1196;
                                                                        }
LABEL_1144:
                                                                        v413 = *(_DWORD *)(a2 + 8);
                                                                        if (v413 >= *(_DWORD *)(a2 + 12))
                                                                        {
                                                                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                          v413 = *(_DWORD *)(a2 + 8);
                                                                        }
                                                                        *(_QWORD *)(*(_QWORD *)a2 + 8 * v413) = "-fdebugger-objc-literal";
                                                                        ++*(_DWORD *)(a2 + 8);
                                                                        goto LABEL_1147;
                                                                      }
                                                                      goto LABEL_1065;
                                                                    }
                                                                    if (!(_DWORD)v383)
                                                                      goto LABEL_1067;
                                                                    v385 = __n;
                                                                    p_s2 = &__s2;
                                                                    while (*(unsigned __int8 *)v385 == *(unsigned __int8 *)p_s2)
                                                                    {
                                                                      v385 = (size_t *)((char *)v385 + 1);
                                                                      p_s2 = (void **)((char *)p_s2 + 1);
                                                                      if (!--v383)
                                                                        goto LABEL_1067;
                                                                    }
                                                                  }
                                                                  if ((v477 & 0x8000000000000000) == 0)
                                                                  {
                                                                    *(_OWORD *)__p = *(_OWORD *)__n;
                                                                    *(_QWORD *)&__p[16] = v477;
                                                                    goto LABEL_1066;
                                                                  }
                                                                  v387 = (void *)__n[0];
LABEL_1065:
                                                                  sub_22E3BB2B4(__p, v387, v382);
LABEL_1066:
                                                                  LOWORD(v513) = 260;
                                                                  __s2 = __p;
                                                                  sub_22E721364(a2, "-fconstant-string-class", a3, v472, 6, (uint64_t *)&__s2);
                                                                  if ((__p[23] & 0x80000000) != 0)
                                                                  {
                                                                    operator delete(*(void **)__p);
                                                                    if ((v381 & 0x80) == 0)
                                                                      goto LABEL_1072;
                                                                    goto LABEL_1070;
                                                                  }
LABEL_1067:
                                                                  if ((v381 & 0x80) == 0)
                                                                    goto LABEL_1072;
LABEL_1070:
                                                                  v387 = (void *)__n[0];
                                                                  goto LABEL_1071;
                                                                }
LABEL_1018:
                                                                v372 = *(_DWORD *)(a2 + 8);
                                                                if (v372 >= *(_DWORD *)(a2 + 12))
                                                                {
                                                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                  v372 = *(_DWORD *)(a2 + 8);
                                                                }
                                                                *(_QWORD *)(*(_QWORD *)a2 + 8 * v372) = "-fdump-record-layouts-complete";
                                                                ++*(_DWORD *)(a2 + 8);
                                                                v369 = *(uint64_t *)((char *)a1 + 140);
                                                                goto LABEL_1021;
                                                              }
LABEL_993:
                                                              v364 = *(_DWORD *)(a2 + 8);
                                                              if (v364 >= *(_DWORD *)(a2 + 12))
                                                              {
                                                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                                v364 = *(_DWORD *)(a2 + 8);
                                                              }
                                                              *(_QWORD *)(*(_QWORD *)a2 + 8 * v364) = "-fno-odr-hash-methods";
                                                              ++*(_DWORD *)(a2 + 8);
                                                              goto LABEL_996;
                                                            }
LABEL_894:
                                                            v332 = *(_DWORD *)(a2 + 8);
                                                            if (v332 >= *(_DWORD *)(a2 + 12))
                                                            {
                                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                              v332 = *(_DWORD *)(a2 + 8);
                                                            }
                                                            *(_QWORD *)(*(_QWORD *)a2 + 8 * v332) = "-fapplecl-inline-definitions";
                                                            ++*(_DWORD *)(a2 + 8);
                                                            goto LABEL_897;
                                                          }
LABEL_861:
                                                          v322 = *(_DWORD *)(a2 + 8);
                                                          if (v322 >= *(_DWORD *)(a2 + 12))
                                                          {
                                                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                            v322 = *(_DWORD *)(a2 + 8);
                                                          }
                                                          *(_QWORD *)(*(_QWORD *)a2 + 8 * v322) = "-fexternally-initialized";
                                                          ++*(_DWORD *)(a2 + 8);
                                                          goto LABEL_864;
                                                        }
LABEL_763:
                                                        v292 = *(_DWORD *)(a2 + 8);
                                                        if (v292 >= *(_DWORD *)(a2 + 12))
                                                        {
                                                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                          v292 = *(_DWORD *)(a2 + 8);
                                                        }
                                                        *(_QWORD *)(*(_QWORD *)a2 + 8 * v292) = "-fnew-infallible";
                                                        ++*(_DWORD *)(a2 + 8);
                                                        goto LABEL_766;
                                                      }
LABEL_728:
                                                      v278 = *(_DWORD *)(a2 + 8);
                                                      if (v278 >= *(_DWORD *)(a2 + 12))
                                                      {
                                                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                        v278 = *(_DWORD *)(a2 + 8);
                                                      }
                                                      *(_QWORD *)(*(_QWORD *)a2 + 8 * v278) = "-ftrivial-auto-var-init-"
                                                                                                "skip-non-ptr-array";
                                                      ++*(_DWORD *)(a2 + 8);
                                                      goto LABEL_731;
                                                    }
LABEL_655:
                                                    v253 = *(_DWORD *)(a2 + 8);
                                                    if (v253 >= *(_DWORD *)(a2 + 12))
                                                    {
                                                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                      v253 = *(_DWORD *)(a2 + 8);
                                                    }
                                                    *(_QWORD *)(*(_QWORD *)a2 + 8 * v253) = "-fopenmp-optimistic-collapse";
                                                    ++*(_DWORD *)(a2 + 8);
                                                    goto LABEL_658;
                                                  }
                                                  goto LABEL_551;
                                                }
                                                if (!(_DWORD)v215)
                                                  goto LABEL_553;
                                                v217 = __n;
                                                v218 = &__s2;
                                                while (*(unsigned __int8 *)v217 == *(unsigned __int8 *)v218)
                                                {
                                                  v217 = (size_t *)((char *)v217 + 1);
                                                  v218 = (void **)((char *)v218 + 1);
                                                  if (!--v215)
                                                    goto LABEL_553;
                                                }
                                              }
                                              if ((v477 & 0x8000000000000000) == 0)
                                              {
                                                *(_OWORD *)__p = *(_OWORD *)__n;
                                                *(_QWORD *)&__p[16] = v477;
                                                goto LABEL_552;
                                              }
                                              v219 = (void *)__n[0];
LABEL_551:
                                              sub_22E3BB2B4(__p, v219, v214);
LABEL_552:
                                              LOWORD(v513) = 260;
                                              __s2 = __p;
                                              sub_22E721364(a2, "-fmodule-name=", a3, v472, 4, (uint64_t *)&__s2);
                                              if ((__p[23] & 0x80000000) != 0)
                                              {
                                                operator delete(*(void **)__p);
                                                if ((v213 & 0x80) == 0)
                                                  goto LABEL_558;
                                                goto LABEL_556;
                                              }
LABEL_553:
                                              if ((v213 & 0x80) == 0)
                                                goto LABEL_558;
LABEL_556:
                                              v219 = (void *)__n[0];
                                              goto LABEL_557;
                                            }
                                            v207 = (v210 >> 47) & 0xFE01FFFF | (*((unsigned __int8 *)a1 + 28) << 17);
                                          }
                                          else
                                          {
                                            v207 = (v205 >> 47) & 0xFE01FFFF | (*((unsigned __int8 *)a1 + 28) << 17);
                                            v208 = (v205 >> 45) & 1;
                                          }
                                          v211 = v207 & 1;
                                          if (!(_DWORD)v208)
                                            goto LABEL_534;
                                          goto LABEL_530;
                                        }
                                        goto LABEL_307;
                                      }
                                      if (!(_DWORD)v104)
                                        goto LABEL_309;
                                      v106 = __n;
                                      v107 = &__s2;
                                      while (*(unsigned __int8 *)v106 == *(unsigned __int8 *)v107)
                                      {
                                        v106 = (size_t *)((char *)v106 + 1);
                                        v107 = (void **)((char *)v107 + 1);
                                        if (!--v104)
                                          goto LABEL_309;
                                      }
                                    }
                                    if ((v477 & 0x8000000000000000) == 0)
                                    {
                                      *(_OWORD *)__p = *(_OWORD *)__n;
                                      *(_QWORD *)&__p[16] = v477;
                                      goto LABEL_308;
                                    }
                                    v108 = (void *)__n[0];
LABEL_307:
                                    sub_22E3BB2B4(__p, v108, v103);
LABEL_308:
                                    LOWORD(v513) = 260;
                                    __s2 = __p;
                                    sub_22E721364(a2, "-fconstant-double-number-class=", a3, a4, 4, (uint64_t *)&__s2);
                                    if ((__p[23] & 0x80000000) != 0)
                                    {
                                      operator delete(*(void **)__p);
                                      if ((v102 & 0x80) == 0)
                                        goto LABEL_314;
                                      goto LABEL_312;
                                    }
LABEL_309:
                                    if ((v102 & 0x80) == 0)
                                      goto LABEL_314;
LABEL_312:
                                    v108 = (void *)__n[0];
                                    goto LABEL_313;
                                  }
                                  goto LABEL_281;
                                }
                                if (!(_DWORD)v97)
                                  goto LABEL_283;
                                v99 = __n;
                                v100 = &__s2;
                                while (*(unsigned __int8 *)v99 == *(unsigned __int8 *)v100)
                                {
                                  v99 = (size_t *)((char *)v99 + 1);
                                  v100 = (void **)((char *)v100 + 1);
                                  if (!--v97)
                                    goto LABEL_283;
                                }
                              }
                              if ((v477 & 0x8000000000000000) == 0)
                              {
                                *(_OWORD *)__p = *(_OWORD *)__n;
                                *(_QWORD *)&__p[16] = v477;
                                goto LABEL_282;
                              }
                              v101 = (void *)__n[0];
LABEL_281:
                              sub_22E3BB2B4(__p, v101, v96);
LABEL_282:
                              LOWORD(v513) = 260;
                              __s2 = __p;
                              sub_22E721364(a2, "-fconstant-float-number-class=", a3, a4, 4, (uint64_t *)&__s2);
                              if ((__p[23] & 0x80000000) != 0)
                              {
                                operator delete(*(void **)__p);
                                if ((v95 & 0x80) == 0)
                                  goto LABEL_288;
                                goto LABEL_286;
                              }
LABEL_283:
                              if ((v95 & 0x80) == 0)
                                goto LABEL_288;
LABEL_286:
                              v101 = (void *)__n[0];
                              goto LABEL_287;
                            }
                            goto LABEL_255;
                          }
                          if (!(_DWORD)v90)
                            goto LABEL_257;
                          v92 = __n;
                          v93 = &__s2;
                          while (*(unsigned __int8 *)v92 == *(unsigned __int8 *)v93)
                          {
                            v92 = (size_t *)((char *)v92 + 1);
                            v93 = (void **)((char *)v93 + 1);
                            if (!--v90)
                              goto LABEL_257;
                          }
                        }
                        if ((v477 & 0x8000000000000000) == 0)
                        {
                          *(_OWORD *)__p = *(_OWORD *)__n;
                          *(_QWORD *)&__p[16] = v477;
                          goto LABEL_256;
                        }
                        v94 = (void *)__n[0];
LABEL_255:
                        sub_22E3BB2B4(__p, v94, v89);
LABEL_256:
                        LOWORD(v513) = 260;
                        __s2 = __p;
                        sub_22E721364(a2, "-fconstant-integer-number-class=", a3, a4, 4, (uint64_t *)&__s2);
                        if ((__p[23] & 0x80000000) != 0)
                        {
                          operator delete(*(void **)__p);
                          if ((v88 & 0x80) == 0)
                            goto LABEL_262;
                          goto LABEL_260;
                        }
LABEL_257:
                        if ((v88 & 0x80) == 0)
                          goto LABEL_262;
LABEL_260:
                        v94 = (void *)__n[0];
                        goto LABEL_261;
                      }
                      goto LABEL_229;
                    }
                    if (!(_DWORD)v83)
                      goto LABEL_231;
                    v85 = __n;
                    v86 = &__s2;
                    while (*(unsigned __int8 *)v85 == *(unsigned __int8 *)v86)
                    {
                      v85 = (size_t *)((char *)v85 + 1);
                      v86 = (void **)((char *)v86 + 1);
                      if (!--v83)
                        goto LABEL_231;
                    }
                  }
                  if ((v477 & 0x8000000000000000) == 0)
                  {
                    *(_OWORD *)__p = *(_OWORD *)__n;
                    *(_QWORD *)&__p[16] = v477;
                    goto LABEL_230;
                  }
                  v87 = (void *)__n[0];
LABEL_229:
                  sub_22E3BB2B4(__p, v87, v82);
LABEL_230:
                  LOWORD(v513) = 260;
                  __s2 = __p;
                  sub_22E721364(a2, "-fconstant-dictionary-class=", a3, a4, 4, (uint64_t *)&__s2);
                  if ((__p[23] & 0x80000000) != 0)
                  {
                    operator delete(*(void **)__p);
                    if ((v81 & 0x80) == 0)
                      goto LABEL_236;
                    goto LABEL_234;
                  }
LABEL_231:
                  if ((v81 & 0x80) == 0)
                    goto LABEL_236;
LABEL_234:
                  v87 = (void *)__n[0];
                  goto LABEL_235;
                }
                goto LABEL_203;
              }
              if (!(_DWORD)v76)
                goto LABEL_205;
              v78 = __n;
              v79 = &__s2;
              while (*(unsigned __int8 *)v78 == *(unsigned __int8 *)v79)
              {
                v78 = (size_t *)((char *)v78 + 1);
                v79 = (void **)((char *)v79 + 1);
                if (!--v76)
                  goto LABEL_205;
              }
            }
            if ((v477 & 0x8000000000000000) == 0)
            {
              *(_OWORD *)__p = *(_OWORD *)__n;
              *(_QWORD *)&__p[16] = v477;
              goto LABEL_204;
            }
            v80 = (void *)__n[0];
LABEL_203:
            sub_22E3BB2B4(__p, v80, v75);
LABEL_204:
            LOWORD(v513) = 260;
            __s2 = __p;
            sub_22E721364(a2, "-fconstant-array-class=", a3, a4, 4, (uint64_t *)&__s2);
            if ((__p[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)__p);
              if ((v74 & 0x80) == 0)
                goto LABEL_210;
              goto LABEL_208;
            }
LABEL_205:
            if ((v74 & 0x80) == 0)
              goto LABEL_210;
LABEL_208:
            v80 = (void *)__n[0];
            goto LABEL_209;
          }
          goto LABEL_88;
        }
        if (!(_DWORD)v37)
          goto LABEL_90;
        v39 = __n;
        v40 = &__s2;
        while (*(unsigned __int8 *)v39 == *(unsigned __int8 *)v40)
        {
          v39 = (size_t *)((char *)v39 + 1);
          v40 = (void **)((char *)v40 + 1);
          if (!--v37)
            goto LABEL_90;
        }
      }
      if ((v477 & 0x8000000000000000) == 0)
      {
        *(_OWORD *)__p = *(_OWORD *)__n;
        *(_QWORD *)&__p[16] = v477;
        goto LABEL_89;
      }
      v41 = (void *)__n[0];
LABEL_88:
      sub_22E3BB2B4(__p, v41, __n[1]);
LABEL_89:
      LOWORD(v513) = 260;
      __s2 = __p;
      sub_22E721364(a2, "-cuid=", a3, a4, 4, (uint64_t *)&__s2);
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        if ((v36 & 0x80) == 0)
          goto LABEL_95;
        goto LABEL_93;
      }
LABEL_90:
      if ((v36 & 0x80) == 0)
        goto LABEL_95;
LABEL_93:
      v41 = (void *)__n[0];
      goto LABEL_94;
    }
LABEL_44:
    v28 = *(_DWORD *)(a2 + 8);
    if (v28 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v28 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v28) = "-cl-no-signed-zeros";
    ++*(_DWORD *)(a2 + 8);
    goto LABEL_47;
  }
  if ((*((_WORD *)a1 + 74) & 2) != 0)
    sub_22E6E0868(a2, 1410, (uint64_t (*)(uint64_t, _QWORD *))a3, a4);
  v17 = *((_DWORD *)a1 + 13);
  if ((v17 & 0xC) != 0)
  {
    LOWORD(v513) = 264;
    LODWORD(__s2) = (v17 >> 2) & 3;
    sub_22E6E094C(a2, 2838, (uint64_t)&__s2, a3, a4);
    v17 = *((_DWORD *)a1 + 13);
  }
  if ((v17 & 0x10) != 0)
    sub_22E6E0868(a2, 2837, (uint64_t (*)(uint64_t, _QWORD *))a3, a4);
  if ((a1[1] & 0x200000000000000) != 0)
    sub_22E6E0868(a2, 1071, (uint64_t (*)(uint64_t, _QWORD *))a3, a4);
  v18 = a1[32];
  v19 = a1[33];
  __s2 = &v511;
  v510 = 0x400000000;
  sub_22F1DE81C(v18, v19, (uint64_t)&__s2);
  v20 = (char *)__s2;
  if ((_DWORD)v510)
  {
    v21 = (char *)__s2 + 16 * v510;
    do
    {
      v22 = *(_QWORD *)v20;
      v23 = *((_QWORD *)v20 + 1);
      v20 += 16;
      v508 = 261;
      *(_QWORD *)__p = v22;
      *(_QWORD *)&__p[8] = v23;
      sub_22E6E094C(a2, 1673, (uint64_t)__p, a3, a4);
    }
    while (v20 != v21);
    v20 = (char *)__s2;
  }
  if (v20 != (char *)&v511)
    free(v20);
}

void sub_22E6F4E60(uint64_t a1, uint64_t a2, __int16 a3, void **a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v7;
  unsigned __int8 v9;
  uint64_t v12;
  uint64_t v13;
  const char **v14;
  const char *v15;
  size_t v16;
  char v17;
  void **v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  size_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned __int8 v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unsigned __int8 v51;
  int v52;
  const char *v53;
  _QWORD *v54;
  uint64_t v55;
  unsigned int v56;
  const char *v57;
  _QWORD *v58;
  uint64_t v59;
  _BOOL4 v60;
  unsigned int v61;
  const char *v62;
  BOOL v63;
  const char *v64;
  const char *v65;
  BOOL v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void **v71;
  size_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  size_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *LastArgValue;
  size_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  size_t v87;
  uint64_t v88;
  uint64_t v89;
  const char **v90;
  const char *v91;
  uint64_t v92;
  BOOL v95;
  BOOL v96;
  BOOL v97;
  uint64_t v98;
  BOOL v99;
  BOOL v100;
  BOOL v101;
  int v102;
  BOOL v104;
  BOOL v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void **v110;
  size_t v111;
  uint64_t v112;
  unsigned __int8 *v113;
  _QWORD *v114;
  uint64_t v115;
  int v116;
  int v117;
  __int16 v118;
  __int16 v119;
  unsigned int v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int16 v130;
  unint64_t v131;
  int v132;
  uint64_t v133;
  __int16 v134;
  int v135;
  uint64_t v136;
  unint64_t v137;
  int v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  void **v142;
  int v143;
  int v144;
  unint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  unint64_t *v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  int v154;
  uint64_t v155;
  unint64_t *v156;
  int v157;
  char v158;
  uint64_t v159;
  unint64_t v160;
  BOOL v161;
  int v162;
  uint64_t v163;
  int v164;
  int v165;
  uint64_t v166;
  unint64_t v167;
  int v168;
  int v169;
  uint64_t v170;
  unint64_t v171;
  int v172;
  uint64_t v173;
  void **v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  int v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  unint64_t v193;
  int v194;
  uint64_t v195;
  unint64_t v196;
  int v197;
  uint64_t v198;
  unint64_t v199;
  int v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  int v204;
  int v205;
  int v206;
  __int16 v207;
  unint64_t v208;
  int v209;
  uint64_t v210;
  void **v211;
  int v212;
  int v213;
  void **v214;
  int v215;
  int v216;
  void **v217;
  int v218;
  int v219;
  void **v220;
  int v221;
  int v222;
  void **v223;
  int v224;
  int v225;
  int v226;
  int v227;
  uint64_t v228;
  unint64_t v229;
  int v230;
  uint64_t v231;
  char v232;
  unint64_t v233;
  unint64_t v234;
  int v235;
  uint64_t v236;
  unint64_t v237;
  BOOL v238;
  int v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  unint64_t v243;
  int v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  int v252;
  unint64_t v253;
  int v254;
  unint64_t v255;
  int v256;
  unint64_t v257;
  uint64_t v258;
  int v259;
  int v260;
  uint64_t v261;
  int v262;
  unsigned int v263;
  int v264;
  uint64_t v265;
  int v266;
  unsigned int v267;
  uint64_t v268;
  int v269;
  int v270;
  uint64_t v271;
  __int16 v272;
  unint64_t v273;
  int v274;
  unint64_t v275;
  int v276;
  uint64_t v277;
  int v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  int v282;
  uint64_t v283;
  int v284;
  unsigned int v285;
  int v286;
  uint64_t v287;
  int v288;
  unsigned int v289;
  int v290;
  uint64_t v291;
  int v292;
  unsigned int v293;
  int v294;
  int v295;
  int v296;
  uint64_t v297;
  unint64_t v298;
  int v299;
  uint64_t v300;
  unint64_t v301;
  int v302;
  int v303;
  uint64_t v304;
  void **v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  int v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  unint64_t v318;
  int v319;
  uint64_t v320;
  int v321;
  int v322;
  int v323;
  __int16 v324;
  unint64_t v325;
  unint64_t v326;
  int v327;
  uint64_t v328;
  unint64_t v329;
  int v330;
  uint64_t v331;
  int v332;
  char v333;
  uint64_t v334;
  unint64_t v335;
  int v336;
  char v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  int v342;
  uint64_t v343;
  void **v344;
  int v345;
  int v346;
  uint64_t v347;
  unint64_t v348;
  int v349;
  char v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  int v354;
  uint64_t v355;
  unint64_t v356;
  int v357;
  uint64_t v358;
  int v359;
  uint64_t v360;
  int v361;
  uint64_t v362;
  int v363;
  int v364;
  uint64_t v365;
  unint64_t v366;
  unint64_t v367;
  int v368;
  uint64_t v369;
  int v370;
  uint64_t v371;
  int v372;
  uint64_t v373;
  int v374;
  uint64_t v375;
  int v376;
  uint64_t v377;
  int v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  int v384;
  int v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  int v391;
  int v392;
  uint64_t v393;
  unint64_t v394;
  int v395;
  uint64_t v396;
  int v397;
  char v398;
  int v399;
  uint64_t v400;
  unint64_t v401;
  int v402;
  uint64_t v403;
  uint64_t v404;
  __int16 v405;
  uint64_t v406;
  __int16 v407;
  unint64_t v408;
  uint64_t v409;
  unint64_t v410;
  int v411;
  uint64_t v412;
  int v413;
  uint64_t v414;
  int v415;
  unsigned int v416;
  int v417;
  int v418;
  int v419;
  unint64_t v420;
  unint64_t v421;
  int v422;
  int v423;
  uint64_t v424;
  int v425;
  uint64_t v426;
  int v427;
  int v428;
  uint64_t v429;
  unint64_t v430;
  int v431;
  uint64_t v432;
  int v433;
  uint64_t v434;
  int v435;
  int v436;
  unsigned int v437;
  int v438;
  unint64_t v439;
  int v440;
  unsigned int v441;
  int v442;
  unsigned int v443;
  int v444;
  int v445;
  unint64_t v446;
  int v447;
  unint64_t v448;
  uint64_t v449;
  unint64_t v450;
  char v451;
  unint64_t v452;
  uint64_t v453;
  char v454;
  uint64_t v455;
  char v456;
  uint64_t v457;
  char v458;
  unint64_t v459;
  int v460;
  uint64_t v461;
  unsigned int v462;
  int v463;
  int v464;
  int v465;
  unsigned int v466;
  unsigned int v467;
  unint64_t v468;
  unint64_t v469;
  int v470;
  unint64_t v471;
  unint64_t v472;
  int v473;
  int v474;
  int v475;
  uint64_t v476;
  unint64_t v477;
  int v478;
  int v479;
  uint64_t v480;
  unint64_t v481;
  int v482;
  int v483;
  uint64_t v484;
  unint64_t v485;
  uint64_t v486;
  uint64_t v487;
  int v488;
  int v489;
  uint64_t v490;
  unint64_t v491;
  int v492;
  uint64_t v493;
  char v494;
  char v495;
  uint64_t v496;
  unint64_t v497;
  uint64_t v498;
  unsigned int v499;
  int v500;
  unsigned int v501;
  unint64_t v502;
  int v503;
  unint64_t v504;
  int v505;
  unint64_t v506;
  uint64_t v507;
  unint64_t v508;
  int v509;
  uint64_t v510;
  int v511;
  char v512;
  uint64_t v513;
  unint64_t v514;
  int v515;
  uint64_t v516;
  unint64_t v517;
  unsigned int v518;
  int v519;
  unsigned int v520;
  int v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  unint64_t v541;
  uint64_t v542;
  uint64_t v543;
  int v544;
  unint64_t v545;
  uint64_t v546;
  unint64_t v547;
  int v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  int v552;
  int v553;
  uint64_t v554;
  uint64_t v555;
  unsigned int v556;
  uint64_t v557;
  unsigned int v558;
  uint64_t v559;
  int v560;
  void **v561;
  int v562;
  char v563;
  uint64_t v564;
  unint64_t v565;
  int v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  unint64_t v575;
  uint64_t v576;
  unint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  char v581;
  uint64_t v582;
  uint64_t v583;
  char v584;
  uint64_t v585;
  char v586;
  int v587;
  char v588;
  uint64_t v589;
  unint64_t v590;
  int v591;
  char v592;
  uint64_t v593;
  unint64_t v594;
  int v595;
  char v596;
  uint64_t v597;
  unint64_t v598;
  int v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  int v608;
  char v609;
  unint64_t v610;
  void **v611;
  int v612;
  int v613;
  _QWORD *v614;
  uint64_t v615;
  unint64_t v616;
  unint64_t v617;
  uint64_t v618;
  unint64_t v619;
  int v620;
  unsigned int v621;
  int v622;
  unsigned int v623;
  int v624;
  unint64_t v625;
  int v626;
  unint64_t v627;
  unsigned int v628;
  unint64_t v629;
  int v630;
  char v631;
  unint64_t v632;
  unint64_t v633;
  unint64_t v634;
  unint64_t v635;
  unint64_t v636;
  uint64_t v637;
  unint64_t v638;
  unint64_t v639;
  int v640;
  int v641;
  uint64_t v642;
  unint64_t v643;
  int v644;
  uint64_t v645;
  uint64_t v646;
  unint64_t v647;
  int v648;
  char v649;
  unint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  int v657;
  uint64_t v658;
  int v659;
  unsigned int v660;
  int v661;
  int v662;
  unint64_t v663;
  int v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  unint64_t v668;
  unint64_t v669;
  int v670;
  int v671;
  uint64_t v672;
  int v673;
  unsigned int v674;
  int v675;
  int v676;
  char v677;
  unint64_t v678;
  uint64_t v679;
  __int16 v680;
  uint64_t v681;
  __int16 v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  unint64_t v687;
  __int16 v688;
  __int16 v689;
  uint64_t v690;
  const char **v691;
  const char *v692;
  size_t v693;
  char v695;
  uint64_t v696;
  const char **v697;
  char *v698;
  size_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  char v703;
  int v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  void **v708;
  size_t v709;
  unsigned __int8 *v710;
  _QWORD *v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  int v717;
  int v718;
  unsigned int v719;
  __int16 v720;
  unsigned int v721;
  __int16 v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  _QWORD *v726;
  int v727;
  int v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  char v732;
  int v733;
  unsigned __int8 *v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  unint64_t v738;
  _QWORD *v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  const char **v743;
  char v744;
  int v745;
  unsigned int v746;
  unsigned int v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  void **v751;
  size_t v752;
  uint64_t v753;
  unsigned __int8 *v754;
  _QWORD *v755;
  uint64_t v756;
  int v757;
  uint64_t v758;
  unint64_t v759;
  const void *v760;
  void *v761;
  void *v762;
  int v763;
  uint64_t v764;
  uint64_t v765;
  unint64_t v766;
  void **v767;
  uint64_t v768;
  uint64_t v769;
  const char **v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  void **v774;
  size_t v775;
  uint64_t v776;
  unsigned __int8 *v777;
  _QWORD *v778;
  uint64_t v779;
  int v780;
  unsigned int v781;
  uint64_t v783;
  uint64_t v784;
  unint64_t v785;
  char v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  int v791;
  unint64_t v792;
  uint64_t v793;
  uint64_t v794;
  int v795;
  unint64_t v796;
  uint64_t v797;
  unint64_t *v798;
  char **v799;
  char *v800;
  char *v801;
  char v802;
  BOOL v803;
  char *v804;
  uint64_t v805;
  unint64_t v806;
  char *v807;
  char v808;
  BOOL v809;
  unint64_t v810;
  char *v811;
  char *v812;
  unint64_t v813;
  unint64_t v814;
  _BOOL4 v815;
  __int128 v816;
  __int128 v817;
  __int128 v818;
  uint64_t v819;
  int v820;
  uint64_t v821;
  int v822;
  uint64_t v823;
  const void **v824;
  unint64_t v825;
  uint64_t v826;
  uint64_t v827;
  const char **v828;
  char *v829;
  size_t v830;
  size_t v831;
  BOOL v833;
  BOOL v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  void **v838;
  size_t v839;
  uint64_t v840;
  unint64_t v841;
  _QWORD *v842;
  int v843;
  const char **v844;
  char *v845;
  size_t v846;
  size_t v847;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  void *v852;
  size_t v853;
  _QWORD *v854;
  uint64_t v855;
  uint64_t v856;
  int v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  unsigned __int8 *v861;
  _QWORD *v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  char v867;
  BOOL v868;
  void *v869;
  size_t v870;
  size_t v871;
  uint64_t v872;
  int v873;
  int hasFlag;
  uint64_t v875;
  uint64_t v876;
  unint64_t v877;
  unint64_t v878;
  unint64_t v879;
  unint64_t v880;
  unint64_t v881;
  unint64_t v882;
  unint64_t v883;
  _BOOL4 v884;
  uint64_t v885;
  uint64_t v886;
  unsigned int v887;
  unint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  char v892;
  BOOL v893;
  void *v894;
  size_t v895;
  size_t v896;
  unsigned int v897;
  int v898;
  uint64_t v899;
  int v900;
  uint64_t v901;
  int v902;
  uint64_t v903;
  uint64_t v904;
  unint64_t v905;
  unsigned __int8 *v906;
  _BYTE *v907;
  char v908;
  int v910;
  int v911;
  unint64_t v912;
  unint64_t v913;
  __int128 v914;
  unint64_t v915;
  unint64_t v916;
  unint64_t v917;
  unint64_t v918;
  unint64_t v919;
  _BYTE *v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  unsigned __int8 *v924;
  uint64_t v925;
  _QWORD *v926;
  uint64_t v927;
  char v928;
  BOOL v929;
  void *v930;
  size_t v931;
  size_t v932;
  __int128 v933;
  char *v934;
  _QWORD *v935;
  char *v936;
  char *v937;
  char *v938;
  __int128 v939;
  __int128 v940;
  int64x2_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  unsigned __int8 *v946;
  uint64_t v947;
  _QWORD *v948;
  uint64_t v949;
  uint64_t v950;
  void *v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  char v955;
  int v956;
  void *v957;
  size_t v958;
  size_t v959;
  uint64_t v960;
  unint64_t v961;
  unint64_t v962;
  uint64_t v963;
  unsigned int v964;
  BOOL v965;
  uint64_t v966;
  unsigned int v967;
  int v968;
  uint64_t v969;
  const char **v970;
  char *v971;
  int64_t v972;
  size_t v973;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  void **v978;
  size_t v979;
  unsigned int v980;
  uint64_t v981;
  uint64_t v982;
  unsigned int v983;
  const char *v984;
  uint64_t v985;
  unint64_t v986;
  _BYTE *v987;
  unint64_t v988;
  unint64_t v989;
  _BYTE *v990;
  unint64_t v991;
  int v992;
  unsigned int v993;
  _QWORD *v994;
  unsigned int v995;
  unsigned int v996;
  uint64_t v997;
  unsigned int v998;
  unsigned int v999;
  BOOL v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  void **v1004;
  size_t v1005;
  uint64_t v1006;
  unsigned __int8 *v1007;
  _QWORD *v1008;
  uint64_t v1009;
  uint64_t v1010;
  const char *v1011;
  size_t v1012;
  _QWORD *v1013;
  unsigned int v1014;
  unsigned int v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  void **v1019;
  size_t v1020;
  unsigned int v1023;
  unsigned int v1024;
  uint64_t v1025;
  const char *v1026;
  size_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  void **v1031;
  size_t v1032;
  unsigned int v1033;
  unsigned int v1034;
  unsigned int v1035;
  int v1036;
  uint64_t v1037;
  size_t v1038;
  int v1039;
  uint64_t v1040;
  char *v1041;
  char *v1042;
  _QWORD **v1043;
  char v1044;
  BOOL v1045;
  void *v1046;
  void *v1047;
  unint64_t v1048;
  const void *v1049;
  size_t v1050;
  void *v1051;
  char *v1052;
  size_t v1053;
  __int128 *v1054;
  uint64_t v1055;
  uint64_t v1056;
  unint64_t v1057;
  __int128 *v1058;
  uint64_t v1059;
  uint64_t v1060;
  char **v1061;
  char **v1062;
  char *v1063;
  _BYTE *v1064;
  uint64_t v1065;
  _QWORD *v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  const char **v1070;
  char AsUnsignedInteger;
  int v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  _QWORD *v1078;
  _QWORD *v1079;
  char v1080;
  uint64_t v1081;
  int v1082;
  unint64_t v1083;
  unint64_t v1084;
  unint64_t v1085;
  uint64_t v1086;
  unint64_t v1087;
  const void *v1088;
  size_t v1089;
  unint64_t v1091;
  unint64_t v1092;
  const void *v1093;
  size_t v1094;
  unint64_t v1095;
  unint64_t v1096;
  const void *v1097;
  size_t v1098;
  unint64_t v1099;
  unint64_t v1100;
  const void *v1101;
  size_t v1102;
  unint64_t v1103;
  unint64_t v1104;
  const void *v1105;
  size_t v1106;
  unint64_t v1107;
  unint64_t v1108;
  const void *v1109;
  size_t v1110;
  unint64_t v1111;
  unint64_t v1112;
  const void *v1113;
  size_t v1114;
  unint64_t v1115;
  unint64_t v1116;
  const void *v1117;
  size_t v1118;
  unint64_t v1119;
  unint64_t v1120;
  const void *v1121;
  size_t v1122;
  unint64_t v1123;
  unint64_t v1124;
  const void *v1125;
  size_t v1126;
  unint64_t v1127;
  unint64_t v1128;
  const void *v1129;
  size_t v1130;
  unint64_t v1131;
  unint64_t v1132;
  const void *v1133;
  size_t v1134;
  unint64_t v1135;
  unint64_t v1136;
  const void *v1137;
  size_t v1138;
  unint64_t v1139;
  unint64_t v1140;
  const void *v1141;
  size_t v1142;
  unint64_t v1143;
  unint64_t v1144;
  const void *v1145;
  size_t v1146;
  unint64_t v1147;
  unint64_t v1148;
  const void *v1149;
  size_t v1150;
  unint64_t v1151;
  unint64_t v1152;
  const void *v1153;
  size_t v1154;
  unint64_t v1155;
  unint64_t v1156;
  const void *v1157;
  size_t v1158;
  unint64_t v1159;
  unint64_t v1160;
  const void *v1161;
  size_t v1162;
  unint64_t v1163;
  unint64_t v1164;
  const void *v1165;
  size_t v1166;
  unint64_t v1167;
  unint64_t v1168;
  const void *v1169;
  size_t v1170;
  unint64_t v1171;
  unint64_t v1172;
  const void *v1173;
  size_t v1174;
  unint64_t v1175;
  unint64_t v1176;
  const void *v1177;
  size_t v1178;
  unint64_t v1179;
  unint64_t v1180;
  const void *v1181;
  size_t v1182;
  unint64_t v1183;
  _BYTE *v1184;
  BOOL v1185;
  _QWORD *v1186;
  _QWORD *v1187;
  uint64_t v1188;
  int v1189;
  unint64_t v1190;
  unint64_t v1191;
  unint64_t v1192;
  uint64_t v1193;
  unint64_t v1194;
  const void *v1195;
  size_t v1196;
  unint64_t v1198;
  unint64_t v1199;
  const void *v1200;
  size_t v1201;
  unint64_t v1202;
  unint64_t v1203;
  const void *v1204;
  size_t v1205;
  unint64_t v1206;
  unint64_t v1207;
  const void *v1208;
  size_t v1209;
  unint64_t v1210;
  unint64_t v1211;
  const void *v1212;
  size_t v1213;
  unint64_t v1214;
  unint64_t v1215;
  const void *v1216;
  size_t v1217;
  unint64_t v1218;
  unint64_t v1219;
  const void *v1220;
  size_t v1221;
  unint64_t v1222;
  unint64_t v1223;
  const void *v1224;
  size_t v1225;
  unint64_t v1226;
  unint64_t v1227;
  const void *v1228;
  size_t v1229;
  unint64_t v1230;
  unint64_t v1231;
  const void *v1232;
  size_t v1233;
  unint64_t v1234;
  unint64_t v1235;
  const void *v1236;
  size_t v1237;
  unint64_t v1238;
  unint64_t v1239;
  const void *v1240;
  size_t v1241;
  unint64_t v1242;
  unint64_t v1243;
  const void *v1244;
  size_t v1245;
  unint64_t v1246;
  unint64_t v1247;
  const void *v1248;
  size_t v1249;
  unint64_t v1250;
  unint64_t v1251;
  const void *v1252;
  size_t v1253;
  unint64_t v1254;
  unint64_t v1255;
  const void *v1256;
  size_t v1257;
  unint64_t v1258;
  unint64_t v1259;
  const void *v1260;
  size_t v1261;
  unint64_t v1262;
  unint64_t v1263;
  const void *v1264;
  size_t v1265;
  unint64_t v1266;
  unint64_t v1267;
  const void *v1268;
  size_t v1269;
  unint64_t v1270;
  unint64_t v1271;
  const void *v1272;
  size_t v1273;
  unint64_t v1274;
  unint64_t v1275;
  const void *v1276;
  size_t v1277;
  unint64_t v1278;
  unint64_t v1279;
  const void *v1280;
  size_t v1281;
  unint64_t v1282;
  unint64_t v1283;
  const void *v1284;
  size_t v1285;
  unint64_t v1286;
  const void *v1287;
  size_t v1288;
  unint64_t v1289;
  void *v1290;
  size_t v1291;
  int Key;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  void *v1299;
  size_t v1300;
  unint64_t v1301;
  unsigned __int8 *v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t v1305;
  uint64_t v1306;
  _QWORD *v1307;
  uint64_t v1308;
  const std::locale::facet *v1309;
  unsigned __int8 v1310;
  int v1311;
  int v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  char v1316;
  BOOL v1317;
  size_t v1318;
  int v1319;
  unsigned __int8 v1320;
  _QWORD *v1321;
  void **v1322;
  unsigned __int8 *v1323;
  unsigned int *v1324;
  void **v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  _QWORD v1330[3];
  __int16 v1331;
  __int128 v1332;
  unint64_t v1333;
  __int128 v1334;
  void *v1335;
  void **v1336;
  __int128 *v1337;
  _QWORD v1338[3];
  __int16 v1339;
  _QWORD v1340[3];
  __int16 v1341;
  _QWORD v1342[3];
  __int16 v1343;
  void *v1344[2];
  void *v1345;
  void *v1346[2];
  uint64_t v1347;
  void *v1348[2];
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  _QWORD v1353[3];
  _QWORD v1354[3];
  void *v1355[3];
  void *v1356[2];
  void *v1357;
  void *v1358[2];
  uint64_t v1359;
  void *v1360[2];
  uint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  _QWORD v1365[3];
  _QWORD v1366[3];
  _QWORD v1367[3];
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  _QWORD v1371[3];
  _QWORD v1372[3];
  _QWORD v1373[3];
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  _QWORD v1377[3];
  _QWORD v1378[3];
  void *v1379[3];
  void *v1380[2];
  void *v1381;
  void *v1382[2];
  uint64_t v1383;
  void *v1384[2];
  uint64_t v1385;
  void *v1386[2];
  void *v1387;
  void *v1388[2];
  uint64_t v1389;
  void *v1390[2];
  uint64_t v1391;
  void *v1392[2];
  void *v1393;
  void *v1394[2];
  uint64_t v1395;
  void *v1396[2];
  uint64_t v1397;
  void *v1398[2];
  void *v1399;
  void *v1400[2];
  uint64_t v1401;
  void *v1402[2];
  uint64_t v1403;
  void *v1404[2];
  void *v1405;
  void *v1406[2];
  uint64_t v1407;
  void *v1408[2];
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  _QWORD v1413[3];
  _QWORD v1414[3];
  _QWORD v1415[3];
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  _QWORD v1419[3];
  _QWORD v1420[3];
  void *v1421[3];
  void *__src[2];
  void *v1423;
  void *v1424[2];
  uint64_t v1425;
  void *v1426[2];
  uint64_t v1427;
  void *__p[3];
  uint64_t v1429;
  _QWORD *v1430;
  uint64_t v1431;
  void *__dst[2];
  void *v1433;
  __int128 v1434;
  unint64_t v1435;
  void *v1436;
  uint64_t v1437;
  _QWORD v1438[23];

  v7 = a2;
  v1438[20] = *MEMORY[0x24BDAC8D0];
  if ((a3 & 0x700) != 0x200)
  {
    v9 = a3;
    if (a3 != 2)
    {
      v12 = sub_22E6EBFB4(a2, 2990);
      v1325 = a4;
      v1326 = v7;
      v1328 = a6;
      v1329 = a1;
      v1320 = v9;
      if (v12)
      {
        v13 = v12;
        v14 = *(const char ***)(v12 + 48);
        v15 = *v14;
        if (*v14)
          v16 = strlen(*v14);
        else
          v16 = 0;
        v20 = sub_22F1D6298((uint64_t)v15, v16);
        if (v20 == 58)
        {
          *(_QWORD *)(a6 + 312) = 0x18800000000;
          if (*(char *)(a6 + 311) < 0)
          {
            **(_BYTE **)(a6 + 288) = 0;
            *(_QWORD *)(a6 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(a6 + 288) = 0;
            *(_BYTE *)(a6 + 311) = 0;
          }
          __dst[0] = (void *)(a6 + 320);
          __dst[1] = 0;
          v1433 = (void *)a6;
          LOWORD(v1434) = 1;
          *(_BYTE *)(a6 + 320) = 0;
          *(_DWORD *)(a6 + 664) = 0;
          v22 = *(unsigned int *)(a6 + 776);
          if ((_DWORD)v22)
          {
            v23 = *(_QWORD *)(a6 + 768);
            v24 = 56 * v22;
            do
            {
              if (*(char *)(v23 + v24 - 9) < 0)
                operator delete(*(void **)(v23 + v24 - 32));
              v24 -= 56;
            }
            while (v24);
          }
          *(_DWORD *)(a6 + 776) = 0;
          llvm::opt::Arg::getAsString();
          if (SHIBYTE(__p[2]) >= 0)
            v25 = __p;
          else
            v25 = (void **)__p[0];
          if (SHIBYTE(__p[2]) >= 0)
            v26 = HIBYTE(__p[2]) & 0x7F;
          else
            v26 = (size_t)__p[1];
          sub_22E3B89A8((unsigned __int8 **)__dst, v25, v26);
          v27 = **(_QWORD **)(v13 + 48);
          v28 = (unsigned __int8 *)__dst[0];
          if (!__dst[0])
          {
            v28 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__dst[1]);
            __dst[0] = v28;
          }
          v28[*v28 + 1] = 1;
          v29 = __dst[0];
          v30 = *(unsigned __int8 *)__dst[0];
          *(_BYTE *)__dst[0] = v30 + 1;
          v29[v30 + 2] = v27;
          a1 = v1329;
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          sub_22E3BB0B8((uint64_t)__dst);
          v19 = 0;
          while (1)
          {
            v31 = (uint64_t *)sub_22F1D5FAC(v19);
            if (sub_22E6FF9B8(v9))
              break;
LABEL_80:
            if (++v19 == 58)
              goto LABEL_109;
          }
          *(_QWORD *)(a6 + 312) = 0x1E600000000;
          if (*(char *)(a6 + 311) < 0)
          {
            **(_BYTE **)(a6 + 288) = 0;
            *(_QWORD *)(a6 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(a6 + 288) = 0;
            *(_BYTE *)(a6 + 311) = 0;
          }
          __dst[0] = (void *)(a6 + 320);
          __dst[1] = 0;
          v1433 = (void *)a6;
          LOWORD(v1434) = 1;
          *(_BYTE *)(a6 + 320) = 0;
          *(_DWORD *)(a6 + 664) = 0;
          v32 = *(unsigned int *)(a6 + 776);
          if ((_DWORD)v32)
          {
            v33 = *(_QWORD *)(a6 + 768);
            v34 = 56 * v32;
            do
            {
              if (*(char *)(v33 + v34 - 9) < 0)
                operator delete(*(void **)(v33 + v34 - 32));
              v34 -= 56;
            }
            while (v34);
            v35 = (unsigned __int8 *)__dst[0];
            *(_DWORD *)(a6 + 776) = 0;
            v36 = *v31;
            if (!v35)
            {
              v35 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__dst[1]);
              __dst[0] = v35;
            }
            a1 = v1329;
          }
          else
          {
            *(_DWORD *)(a6 + 776) = 0;
            v36 = *v31;
            v35 = (unsigned __int8 *)(a6 + 320);
          }
          v35[*v35 + 1] = 1;
          v37 = __dst[0];
          v38 = *(unsigned __int8 *)__dst[0];
          v39 = v38 + 1;
          *(_BYTE *)__dst[0] = v38 + 1;
          v37[v38 + 2] = v36;
          v40 = v31[1];
          *((_BYTE *)v37 + v39 + 1) = 1;
          v41 = __dst[0];
          v42 = *(unsigned __int8 *)__dst[0];
          v43 = v42 + 1;
          *(_BYTE *)__dst[0] = v42 + 1;
          v41[v42 + 2] = v40;
          v44 = v19 == 3;
          v45 = v19 == 8;
          if (v19 == 11)
            ++v45;
          if (v19 == 12)
            ++v45;
          if (v19 == 28)
            ++v45;
          if (v19 == 38)
            ++v45;
          if (v19 == 39)
            ++v45;
          if (v19 == 40)
            ++v45;
          if (v19 == 41)
            ++v45;
          if (v19 == 5)
            ++v44;
          v46 = 2 * (v19 == 0);
          if (v19 == 2)
            v46 = 1;
          v47 = v44 + v46;
          if (v19 == 7)
            v47 += 3;
          v48 = (v45 + v47);
          *((_BYTE *)v41 + v43 + 1) = 3;
          v49 = __dst[0];
          v50 = *(unsigned __int8 *)__dst[0];
          v51 = v50 + 1;
          *(_BYTE *)__dst[0] = v50 + 1;
          v49[v50 + 2] = v48;
          if (v19)
          {
            v52 = v19 & 0x7FFFFFFE;
            v53 = "iso9899:1999";
            if (v19 == 2)
              v53 = "gnu90";
            if (v52 != 2)
              v53 = "iso9899:2011";
            if (v19 <= 5 && ((1 << v19) & 0x2C) != 0)
              goto LABEL_78;
            if (v19 != 7)
            {
              v60 = v19 == 8;
              v61 = v19 - 11;
              v62 = "gnu++03";
              if (v19 == 11)
                v62 = "c++03";
              v63 = v61 >= 2;
              if (v61 < 2)
                v60 = 1;
              v64 = "clc++";
              if (!v63)
                v64 = v62;
              if (v19 == 8)
                v64 = "gnu18";
              if (v19 == 28)
                v60 = 1;
              v65 = "osx-metal1.1";
              if (v19 == 38)
                v65 = "osx-metal1.0";
              v66 = v52 == 38;
              v67 = v52 == 38 || v60;
              if (!v66)
                v65 = "osx-metal1.2";
              if (v19 == 40)
                v67 = 1;
              if (v60)
                v53 = v64;
              else
                v53 = v65;
              if (!v67)
                v53 = "osx-metal2.0";
              if (v19 > 0x29 || ((1 << v19) & 0x3C010001900) == 0)
                goto LABEL_79;
              goto LABEL_78;
            }
            *((_BYTE *)v49 + v51 + 1) = 1;
            v54 = __dst[0];
            v55 = *(unsigned __int8 *)__dst[0];
            *(_BYTE *)__dst[0] = v55 + 1;
            v54[v55 + 2] = "iso9899:2017";
            *((_BYTE *)v54 + (v55 + 1) + 1) = 1;
            v49 = __dst[0];
            v56 = *(unsigned __int8 *)__dst[0];
            v51 = v56 + 1;
            *(_BYTE *)__dst[0] = v56 + 1;
            v57 = "c18";
            v53 = "iso9899:2018";
          }
          else
          {
            *((_BYTE *)v49 + v51 + 1) = 1;
            v49 = __dst[0];
            v56 = *(unsigned __int8 *)__dst[0];
            v51 = v56 + 1;
            *(_BYTE *)__dst[0] = v56 + 1;
            v57 = "c90";
            v53 = "iso9899:1990";
          }
          v49[v56 + 2] = v57;
LABEL_78:
          *((_BYTE *)v49 + v51 + 1) = 1;
          v58 = __dst[0];
          v59 = *(unsigned __int8 *)__dst[0];
          *(_BYTE *)__dst[0] = v59 + 1;
          v58[v59 + 2] = v53;
LABEL_79:
          sub_22E3BB0B8((uint64_t)__dst);
          goto LABEL_80;
        }
        v19 = v20;
        v21 = sub_22F1D5FAC(v20);
        if ((sub_22E6FF9B8(v9) & 1) == 0)
        {
          *(_QWORD *)(a6 + 312) = 0x14500000000;
          if (*(char *)(a6 + 311) < 0)
          {
            **(_BYTE **)(a6 + 288) = 0;
            *(_QWORD *)(a6 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(a6 + 288) = 0;
            *(_BYTE *)(a6 + 311) = 0;
          }
          __dst[0] = (void *)(a6 + 320);
          __dst[1] = 0;
          v1433 = (void *)a6;
          LOWORD(v1434) = 1;
          *(_BYTE *)(a6 + 320) = 0;
          *(_DWORD *)(a6 + 664) = 0;
          v68 = *(unsigned int *)(a6 + 776);
          if ((_DWORD)v68)
          {
            v69 = *(_QWORD *)(a6 + 768);
            v70 = 56 * v68;
            do
            {
              if (*(char *)(v69 + v70 - 9) < 0)
                operator delete(*(void **)(v69 + v70 - 32));
              v70 -= 56;
            }
            while (v70);
          }
          *(_DWORD *)(a6 + 776) = 0;
          llvm::opt::Arg::getAsString();
          if (SHIBYTE(__p[2]) >= 0)
            v71 = __p;
          else
            v71 = (void **)__p[0];
          if (SHIBYTE(__p[2]) >= 0)
            v72 = HIBYTE(__p[2]) & 0x7F;
          else
            v72 = (size_t)__p[1];
          sub_22E3B89A8((unsigned __int8 **)__dst, v71, v72);
          sub_22E3B89A8((unsigned __int8 **)__dst, off_24FA70158[(char)v9 - 1], qword_22F45DDA8[(char)(v9 - 1)]);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          sub_22E3BB0B8((uint64_t)__dst);
          a1 = v1329;
        }
        if (v9 == 13)
        {
LABEL_127:
          if (v19 == 30)
          {
            *(_QWORD *)(a6 + 312) = 0x37900000000;
            if (*(char *)(a6 + 311) < 0)
            {
              **(_BYTE **)(a6 + 288) = 0;
              *(_QWORD *)(a6 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(a6 + 288) = 0;
              *(_BYTE *)(a6 + 311) = 0;
            }
            __dst[0] = (void *)(a6 + 320);
            __dst[1] = 0;
            v1433 = (void *)a6;
            LOWORD(v1434) = 1;
            *(_BYTE *)(a6 + 320) = 0;
            *(_DWORD *)(a6 + 664) = 0;
            v78 = *(unsigned int *)(a6 + 776);
            if ((_DWORD)v78)
            {
              v79 = *(_QWORD *)(a6 + 768);
              v80 = 56 * v78;
              do
              {
                if (*(char *)(v79 + v80 - 9) < 0)
                  operator delete(*(void **)(v79 + v80 - 32));
                v80 -= 56;
              }
              while (v80);
            }
            *(_DWORD *)(a6 + 776) = 0;
            LastArgValue = (void *)llvm::opt::ArgList::getLastArgValue();
            sub_22E3B89A8((unsigned __int8 **)__dst, LastArgValue, v82);
            sub_22E3BB0B8((uint64_t)__dst);
            v19 = 30;
          }
          else
          {
            if (v19 != 38)
            {
              v1319 = 1;
              goto LABEL_160;
            }
            *(_QWORD *)(a6 + 312) = 0x37A00000000;
            if (*(char *)(a6 + 311) < 0)
            {
              **(_BYTE **)(a6 + 288) = 0;
              *(_QWORD *)(a6 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(a6 + 288) = 0;
              *(_BYTE *)(a6 + 311) = 0;
            }
            __dst[0] = (void *)(a6 + 320);
            __dst[1] = 0;
            v1433 = (void *)a6;
            LOWORD(v1434) = 1;
            *(_BYTE *)(a6 + 320) = 0;
            *(_DWORD *)(a6 + 664) = 0;
            v73 = *(unsigned int *)(a6 + 776);
            if ((_DWORD)v73)
            {
              v74 = *(_QWORD *)(a6 + 768);
              v75 = 56 * v73;
              do
              {
                if (*(char *)(v74 + v75 - 9) < 0)
                  operator delete(*(void **)(v74 + v75 - 32));
                v75 -= 56;
              }
              while (v75);
            }
            *(_DWORD *)(a6 + 776) = 0;
            v7 = v1326;
            v76 = (void *)llvm::opt::ArgList::getLastArgValue();
            sub_22E3B89A8((unsigned __int8 **)__dst, v76, v77);
            sub_22E3BB0B8((uint64_t)__dst);
            *(_QWORD *)(a6 + 312) = 0x37900000000;
            if (*(char *)(a6 + 311) < 0)
            {
              **(_BYTE **)(a6 + 288) = 0;
              *(_QWORD *)(a6 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(a6 + 288) = 0;
              *(_BYTE *)(a6 + 311) = 0;
            }
            __dst[0] = (void *)(a6 + 320);
            __dst[1] = 0;
            v1433 = (void *)a6;
            LOWORD(v1434) = 1;
            *(_BYTE *)(a6 + 320) = 0;
            *(_DWORD *)(a6 + 664) = 0;
            v83 = *(unsigned int *)(a6 + 776);
            if ((_DWORD)v83)
            {
              v84 = *(_QWORD *)(a6 + 768);
              v85 = 56 * v83;
              do
              {
                if (*(char *)(v84 + v85 - 9) < 0)
                  operator delete(*(void **)(v84 + v85 - 32));
                v85 -= 56;
              }
              while (v85);
            }
            *(_DWORD *)(a6 + 776) = 0;
            v86 = (void *)llvm::opt::ArgList::getLastArgValue();
            sub_22E3B89A8((unsigned __int8 **)__dst, v86, v87);
            sub_22E3BB0B8((uint64_t)__dst);
            v19 = 38;
          }
          v1319 = 1;
          a1 = v1329;
LABEL_160:
          v88 = sub_22E6EBFB4(v7, 196);
          if (v88)
          {
            v89 = v88;
            v90 = *(const char ***)(v88 + 48);
            v91 = *v90;
            if (*v90)
            {
              switch(strlen(*v90))
              {
                case 2uLL:
                  v92 = 0x100000017;
                  if (*(_WORD *)v91 != 27747 && *(_WORD *)v91 != 19523)
                    goto LABEL_223;
                  goto LABEL_222;
                case 5uLL:
                  v92 = 0x100000017;
                  if ((*(_DWORD *)v91 != 774990947 || v91[4] != 48) && (*(_DWORD *)v91 != 774982723 || v91[4] != 48))
                  {
                    v95 = *(_DWORD *)v91 == 774990947 && v91[4] == 49;
                    if (v95 || (*(_DWORD *)v91 == 774982723 ? (v96 = v91[4] == 49) : (v96 = 0), v96))
                    {
                      v92 = 0x100000018;
                    }
                    else
                    {
                      v97 = *(_DWORD *)v91 == 774990947 && v91[4] == 50;
                      v98 = 0x100000019;
                      if (v97
                        || (*(_DWORD *)v91 == 774982723 ? (v99 = v91[4] == 50) : (v99 = 0),
                            v99
                         || (*(_DWORD *)v91 == 775056483 ? (v100 = v91[4] == 48) : (v100 = 0),
                             (v98 = 0x10000001ALL, v100)
                          || (*(_DWORD *)v91 == 775048259 ? (v101 = v91[4] == 48) : (v101 = 0),
                              v101
                           || ((v102 = *(_DWORD *)v91 ^ 0x2E336C63 | *((unsigned __int8 *)v91 + 4) ^ 0x30) == 0
                             ? (v98 = 0x10000001BLL)
                             : (v98 = 0),
                               !v102)))))
                      {
                        v92 = v98;
                      }
                      else if (*(_DWORD *)v91 == 775113795 && v91[4] == 48)
                      {
                        v92 = 0x10000001BLL;
                      }
                      else
                      {
                        v104 = *(_DWORD *)v91 == 727936099 && v91[4] == 43;
                        v92 = 0x10000001CLL;
                        if (!v104 && *(_DWORD *)v91 ^ 0x2B434C43 | *((unsigned __int8 *)v91 + 4) ^ 0x2B)
                          v92 = v98;
                      }
                    }
                  }
                  goto LABEL_222;
                case 8uLL:
                  v92 = 0x10000001CLL;
                  if (*(_QWORD *)v91 == 0x302E312B2B636C63)
                    goto LABEL_222;
                  v105 = *(_QWORD *)v91 == 0x302E312B2B434C43;
                  break;
                case 9uLL:
                  v106 = *(_QWORD *)v91 == 0x3230322B2B636C63 && v91[8] == 49;
                  v92 = 0x10000001DLL;
                  if (v106)
                    goto LABEL_222;
                  v105 = (*(_QWORD *)v91 ^ 0x3230322B2B434C43 | *((unsigned __int8 *)v91 + 8) ^ 0x31) == 0;
                  break;
                default:
                  goto LABEL_223;
              }
              if (!v105)
                v92 = 0;
LABEL_222:
              if ((v92 & 0x300000000) != 0)
              {
LABEL_243:
                if (sub_22E6EC70C(v7, 0x31Du, 0x446u))
                {
                  v116 = llvm::opt::Option::matches();
                  v117 = *(_WORD *)(a1 + 148) & 0xFBFF | (*(unsigned __int8 *)(a1 + 150) << 16);
                  if (v116)
                    v118 = 1024;
                  else
                    v118 = 0;
                  *(_WORD *)(a1 + 148) = *(_WORD *)(a1 + 148) & 0xFBFF | v118;
                  *(_BYTE *)(a1 + 150) = BYTE2(v117);
                }
                v119 = sub_22E6EBFB4(v7, 562) != 0;
                v120 = (*(_WORD *)(a1 + 148) & 0xF7FF | (*(unsigned __int8 *)(a1 + 150) << 16)) >> 16;
                *(_WORD *)(a1 + 148) = *(_WORD *)(a1 + 148) & 0xF7FF | (v119 << 11);
                *(_BYTE *)(a1 + 150) = v120;
                sub_22F1D49B4(a1, v9, v1325, a5, v92, a6);
                v121 = (uint64_t *)(a1 + 140);
                *(_QWORD *)(a1 + 140) &= ~0x200000000000000uLL;
                v122 = sub_22E721714(v7, 195);
                v123 = *(_QWORD *)(a1 + 140);
                if (v122)
                  v123 = *v121 | 0x200000000000000;
                *v121 = v123 & 0xDFFFFFFFFFFFFFFFLL;
                v124 = sub_22E721714(v7, 188);
                v125 = *v121;
                if (v124)
                  v125 = *v121 | 0x2000000000000000;
                *v121 = v125 & 0xEFFFFFFFFFFFFFFFLL;
                v126 = sub_22E721714(v7, 199);
                v127 = *v121;
                if (v126)
                  v127 = *v121 | 0x1000000000000000;
                *v121 = v127 & 0xFBFFFFFFFFFFFFFFLL;
                v128 = sub_22E721714(v7, 187);
                v129 = *v121;
                if (v128)
                  v129 = *v121 | 0x400000000000000;
                *v121 = v129 & 0xF7FFFFFFFFFFFFFFLL;
                if (sub_22E721714(v7, 192))
                  *v121 |= 0x800000000000000uLL;
                *(_WORD *)(a1 + 96) &= ~0x800u;
                if (sub_22E721888(v7, 0x305u, 0x437u))
                {
                  if (llvm::opt::Option::matches())
                    v130 = 2048;
                  else
                    v130 = 0;
                  *(_WORD *)(a1 + 96) = *(_WORD *)(a1 + 96) & 0xF7FF | v130;
                }
                *(_DWORD *)(a1 + 832) = 0;
                v131 = sub_22E6EC1FC(768, 0, v7, a6);
                if (HIDWORD(v131))
                  *(_DWORD *)(a1 + 832) = v131;
                *(_QWORD *)(a1 + 100) &= ~0x1000000000uLL;
                if (sub_22E721888(v7, 0x30Bu, 0x43Au))
                {
                  v132 = llvm::opt::Option::matches();
                  v133 = 0x1000000000;
                  if (!v132)
                    v133 = 0;
                  *(_QWORD *)(a1 + 100) = *(_QWORD *)(a1 + 100) & 0xFFFFFFEFFFFFFFFFLL | v133;
                }
                *(_WORD *)(a1 + 96) &= ~0x1000u;
                if ((*(_BYTE *)(a1 + 68) & 0x40) != 0 && sub_22E721888(v7, 0x2FFu, 0x433u))
                {
                  if (llvm::opt::Option::matches())
                    v134 = 4096;
                  else
                    v134 = 0;
                  *(_WORD *)(a1 + 96) = *(_WORD *)(a1 + 96) & 0xEFFF | v134;
                }
                *(_QWORD *)(a1 + 100) &= ~0x100000000uLL;
                if (sub_22E721888(v7, 0x301u, 0x434u))
                {
                  v135 = llvm::opt::Option::matches();
                  v136 = 0x100000000;
                  if (!v135)
                    v136 = 0;
                  v137 = *(_QWORD *)(a1 + 100) & 0xFFFFFFFEFFFFFFFFLL | v136;
                }
                else
                {
                  v137 = *(_QWORD *)(a1 + 100);
                }
                *(_QWORD *)(a1 + 100) = v137 & 0xFFFFFFFDFFFFFFFFLL;
                if (sub_22E721888(v7, 0x302u, 0x435u))
                {
                  v138 = llvm::opt::Option::matches();
                  v139 = 0x200000000;
                  if (!v138)
                    v139 = 0;
                  v140 = *(_QWORD *)(a1 + 100) & 0xFFFFFFFDFFFFFFFFLL | v139;
                }
                else
                {
                  v140 = *(_QWORD *)(a1 + 100);
                }
                v1327 = a1 + 140;
                *(_QWORD *)(a1 + 100) = v140 & 0xFFFFFFFF00000000 | 0x400;
                if ((*(_BYTE *)(a1 + 68) & 0x40) != 0)
                {
                  v141 = sub_22E6EC038(1930, v7, a6);
                  if (HIDWORD(v141))
                    *(_DWORD *)(a1 + 100) = v141;
                }
                v142 = (void **)(a1 + 672);
                if (*(char *)(a1 + 695) < 0)
                {
                  sub_22E3BB2B4(v1426, *(void **)(a1 + 672), *(_QWORD *)(a1 + 680));
                  v143 = *(char *)(a1 + 695);
                  LODWORD(__dst[0]) = 0;
                  *(_DWORD *)((char *)__dst + 3) = 0;
                  if (v143 < 0)
                    operator delete(*v142);
                }
                else
                {
                  *(_OWORD *)v1426 = *(_OWORD *)v142;
                  v1427 = *(_QWORD *)(a1 + 688);
                  LODWORD(__dst[0]) = 0;
                  *(_DWORD *)((char *)__dst + 3) = 0;
                }
                *v142 = 0;
                *(_QWORD *)(a1 + 680) = 0;
                *(_DWORD *)(a1 + 688) = __dst[0];
                *(_DWORD *)(a1 + 691) = *(_DWORD *)((char *)__dst + 3);
                *(_BYTE *)(a1 + 695) = 0;
                if (SHIBYTE(v1427) < 0)
                  operator delete(v1426[0]);
                sub_22E6EC3DC((uint64_t)__dst, 244, v7);
                if ((_BYTE)v1434)
                {
                  if (*(char *)(v1329 + 695) < 0)
                  {
                    sub_22E3BB2B4(v1424, *(void **)(v1329 + 672), *(_QWORD *)(v1329 + 680));
                  }
                  else
                  {
                    *(_OWORD *)v1424 = *(_OWORD *)v142;
                    v1425 = *(_QWORD *)(a1 + 688);
                  }
                  v144 = SHIBYTE(v1433);
                  if (SHIBYTE(v1433) < 0)
                  {
                    sub_22E3BB2B4(__src, __dst[0], (unint64_t)__dst[1]);
                  }
                  else
                  {
                    *(_OWORD *)__src = *(_OWORD *)__dst;
                    v1423 = v1433;
                  }
                  if (SHIBYTE(v1423) < 0)
                  {
                    sub_22E3BB2B4(__p, __src[0], (unint64_t)__src[1]);
                  }
                  else
                  {
                    *(_OWORD *)__p = *(_OWORD *)__src;
                    __p[2] = v1423;
                  }
                  if (*(char *)(v1329 + 695) < 0)
                    operator delete(*v142);
                  *(_OWORD *)v142 = *(_OWORD *)__p;
                  v142[2] = __p[2];
                  HIBYTE(__p[2]) = 0;
                  LOBYTE(__p[0]) = 0;
                  if (SHIBYTE(v1423) < 0)
                    operator delete(__src[0]);
                  if (SHIBYTE(v1425) < 0)
                  {
                    operator delete(v1424[0]);
                    if ((v144 & 0x80000000) == 0)
                      goto LABEL_310;
                  }
                  else if ((v144 & 0x80000000) == 0)
                  {
                    goto LABEL_310;
                  }
                  operator delete(__dst[0]);
                }
LABEL_310:
                *(_QWORD *)(v1329 + 208) = (unint64_t)*(unsigned int *)(v1329 + 212) << 32;
                v145 = sub_22E6EC038(857, v7, a6);
                if (HIDWORD(v145))
                  *(_DWORD *)(v1329 + 208) = v145;
                *(_DWORD *)(v1329 + 52) |= 0x400000u;
                if (sub_22E721888(v7, 0x3A2u, 0x178u))
                {
                  if (llvm::opt::Option::matches())
                    v146 = 0;
                  else
                    v146 = 0x400000;
                  *(_DWORD *)(v1329 + 52) = *(_DWORD *)(v1329 + 52) & 0xFFBFFFFF | v146;
                }
                *(_QWORD *)(v1329 + 192) &= ~0x200000000000uLL;
                if (sub_22E721888(v7, 0x18Bu, 0x3ADu))
                {
                  v147 = llvm::opt::Option::matches();
                  v148 = 0x200000000000;
                  if (!v147)
                    v148 = 0;
                  *(_QWORD *)(v1329 + 192) = *(_QWORD *)(v1329 + 192) & 0xFFFFDFFFFFFFFFFFLL | v148;
                }
                v149 = (unint64_t *)(v1329 + 8);
                *(_QWORD *)(v1329 + 8) &= ~0x2000000000uLL;
                if (sub_22E721714(v7, 410))
                  *v149 |= 0x2000000000uLL;
                *(_QWORD *)(v1329 + 192) &= ~0x100000000uLL;
                if (sub_22E721888(v7, 0x19Cu, 0x3B2u))
                {
                  v150 = llvm::opt::Option::matches();
                  v151 = *(_QWORD *)(v1329 + 184);
                  v152 = 0x100000000;
                  if (!v150)
                    v152 = 0;
                  v153 = *(_QWORD *)(v1329 + 192) & 0xFFFFFFFEFFFFFFFFLL | v152;
                }
                else
                {
                  v151 = *(_QWORD *)(v1329 + 184);
                  v153 = *(_QWORD *)(v1329 + 192);
                }
                *(_QWORD *)(v1329 + 184) = v151;
                *(_QWORD *)(v1329 + 192) = v153 & 0xFFFFFFFDFFFFFFFFLL;
                if (sub_22E721888(v7, 0x734u, 0x570u))
                {
                  v154 = llvm::opt::Option::matches();
                  v155 = 0x200000000;
                  if (!v154)
                    v155 = 0;
                  *(_QWORD *)(v1329 + 192) = *(_QWORD *)(v1329 + 192) & 0xFFFFFFFDFFFFFFFFLL | v155;
                }
                v156 = (unint64_t *)(v1329 + 20);
                *(_QWORD *)(v1329 + 20) = *(_QWORD *)(v1329 + 20) & 0xFFFFFFEFFFFFFFFFLL | ((unint64_t)((*(_QWORD *)v1329 & 0x208) != 0) << 36);
                if (sub_22E721888(v7, 0x268u, 0x405u))
                {
                  v157 = llvm::opt::Option::matches();
                  v158 = *(_BYTE *)(v1329 + 28);
                  v159 = 0x1000000000;
                  if (!v157)
                    v159 = 0;
                  v160 = *v156 & 0xFFFFFFEFFFFFFFFFLL | v159;
                }
                else
                {
                  v160 = *v156;
                  v158 = *(_BYTE *)(v1329 + 28);
                }
                v161 = (*(_QWORD *)v1329 & 0x208) != 0;
                *(_BYTE *)(v1329 + 28) = v158;
                *(_QWORD *)(v1329 + 20) = v160 & 0xFFFFFFEFFFFFFFFFLL | ((unint64_t)v161 << 36);
                if (sub_22E721888(v7, 0x405u, 0x268u))
                {
                  v162 = llvm::opt::Option::matches();
                  v163 = 0x1000000000;
                  if (v162)
                    v163 = 0;
                  *v156 = *v156 & 0xFFFFFFEFFFFFFFFFLL | v163;
                }
                *(_QWORD *)(v1329 + 8) = *(_QWORD *)(v1329 + 8) & 0xFBFFFFFFFFFFFFFFLL | ((unint64_t)((*(_DWORD *)v1329 >> 12) & 1) << 58);
                if (sub_22E721888(v7, 0x201u, 0x3DAu))
                {
                  v164 = llvm::opt::Option::matches();
                  v165 = *(unsigned __int16 *)(v1329 + 16) | (*(unsigned __int8 *)(v1329 + 18) << 16);
                  v166 = 0x400000000000000;
                  if (!v164)
                    v166 = 0;
                  v167 = *v149 & 0xFBFFFFFFFFFFFFFFLL | v166;
                }
                else
                {
                  v165 = *(unsigned __int16 *)(v1329 + 16) | (*(unsigned __int8 *)(v1329 + 18) << 16);
                  v167 = *v149;
                }
                v1322 = (void **)(v1329 + 280);
                *v149 = v167 & 0xDFFFFFFFFFFFFFFFLL;
                *(_WORD *)(v1329 + 16) = v165;
                *(_BYTE *)(v1329 + 18) = BYTE2(v165);
                if (sub_22E721888(v7, 0x28Du, 0x414u))
                {
                  v168 = llvm::opt::Option::matches();
                  v169 = *(unsigned __int16 *)(v1329 + 16) | (*(unsigned __int8 *)(v1329 + 18) << 16);
                  v170 = 0x2000000000000000;
                  if (!v168)
                    v170 = 0;
                  v171 = *v149 & 0xDFFFFFFFFFFFFFFFLL | v170;
                }
                else
                {
                  v169 = *(unsigned __int16 *)(v1329 + 16) | (*(unsigned __int8 *)(v1329 + 18) << 16);
                  v171 = *v149;
                }
                v1324 = (unsigned int *)(v1329 + 44);
                *v149 = v171 | 0x200000000000000;
                *(_WORD *)(v1329 + 16) = v169;
                *(_BYTE *)(v1329 + 18) = BYTE2(v169);
                if (sub_22E721888(v7, 0x42Fu, 0x2F9u))
                {
                  v172 = llvm::opt::Option::matches();
                  v173 = 0x200000000000000;
                  if (v172)
                    v173 = 0;
                  *v149 = *v149 & 0xFDFFFFFFFFFFFFFFLL | v173;
                }
                v174 = (void **)(v1329 + 376);
                memset(v1421, 0, sizeof(v1421));
                sub_22E618148(v1421, *(_QWORD *)(v1329 + 376), *(_QWORD *)(v1329 + 384), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1329 + 384) - *(_QWORD *)(v1329 + 376)) >> 3));
                memset(v1420, 0, sizeof(v1420));
                v1433 = 0;
                __dst[0] = 0;
                __dst[1] = 0;
                sub_22E63B344((void **)(v1329 + 376));
                *(_OWORD *)(v1329 + 376) = *(_OWORD *)__dst;
                *(_QWORD *)(v1329 + 392) = v1433;
                v1433 = 0;
                __dst[1] = 0;
                __dst[0] = 0;
                __p[0] = __dst;
                sub_22E3B3CC8((void ***)__p);
                __p[0] = v1420;
                sub_22E3B3CC8((void ***)__p);
                __p[0] = v1421;
                sub_22E3B3CC8((void ***)__p);
                llvm::opt::ArgList::getAllArgValues();
                *(_OWORD *)__dst = *(_OWORD *)__p;
                v1433 = __p[2];
                memset(__p, 0, sizeof(__p));
                LOBYTE(v1434) = 1;
                v1336 = __p;
                sub_22E3B3CC8(&v1336);
                if ((_BYTE)v1434)
                {
                  memset(v1419, 0, sizeof(v1419));
                  sub_22E618148(v1419, *(_QWORD *)(v1329 + 376), *(_QWORD *)(v1329 + 384), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1329 + 384) - *(_QWORD *)(v1329 + 376)) >> 3));
                  v1417 = 0;
                  v1416 = 0;
                  v1418 = 0;
                  sub_22E618148(&v1416, (uint64_t)__dst[0], (uint64_t)__dst[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__dst[1] - (char *)__dst[0]) >> 3));
                  memset(__p, 0, sizeof(__p));
                  sub_22E618148(__p, v1416, v1417, 0xAAAAAAAAAAAAAAABLL * ((v1417 - v1416) >> 3));
                  sub_22E63B344(v174);
                  *(_OWORD *)v174 = *(_OWORD *)__p;
                  *(void **)(v1329 + 392) = __p[2];
                  memset(__p, 0, sizeof(__p));
                  v1336 = __p;
                  sub_22E3B3CC8(&v1336);
                  v1336 = (void **)&v1416;
                  sub_22E3B3CC8(&v1336);
                  v1336 = (void **)v1419;
                  v7 = v1326;
                  sub_22E3B3CC8(&v1336);
                  if ((_BYTE)v1434)
                  {
                    __p[0] = __dst;
                    sub_22E3B3CC8((void ***)__p);
                  }
                }
                *(_QWORD *)(v1329 + 192) &= ~0x800000000uLL;
                if (sub_22E721888(v7, 0x198u, 0x3B1u))
                {
                  v175 = llvm::opt::Option::matches();
                  v176 = *(_QWORD *)(v1329 + 184);
                  v177 = 0x800000000;
                  if (!v175)
                    v177 = 0;
                  v178 = *(_QWORD *)(v1329 + 192) & 0xFFFFFFF7FFFFFFFFLL | v177;
                }
                else
                {
                  v176 = *(_QWORD *)(v1329 + 184);
                  v178 = *(_QWORD *)(v1329 + 192);
                }
                *(_QWORD *)(v1329 + 184) = v176;
                *(_QWORD *)(v1329 + 192) = v178 & 0xFFFFFFF7FFFFFFFFLL;
                if (sub_22E721888(v7, 0x3B1u, 0x198u))
                {
                  v179 = llvm::opt::Option::matches();
                  v180 = *(_QWORD *)(v1329 + 184);
                  v181 = 0x800000000;
                  if (v179)
                    v181 = 0;
                  v182 = *(_QWORD *)(v1329 + 192) & 0xFFFFFFF7FFFFFFFFLL | v181;
                }
                else
                {
                  v180 = *(_QWORD *)(v1329 + 184);
                  v182 = *(_QWORD *)(v1329 + 192);
                }
                *(_QWORD *)(v1329 + 184) = v180;
                *(_QWORD *)(v1329 + 192) = v182 & 0xFFFFFFEFFFFFFFFFLL;
                if (sub_22E721888(v7, 0x196u, 0x3B0u))
                {
                  v183 = llvm::opt::Option::matches();
                  v184 = *(_QWORD *)(v1329 + 184);
                  v185 = 0x1000000000;
                  if (!v183)
                    v185 = 0;
                  v186 = *(_QWORD *)(v1329 + 192) & 0xFFFFFFEFFFFFFFFFLL | v185;
                }
                else
                {
                  v184 = *(_QWORD *)(v1329 + 184);
                  v186 = *(_QWORD *)(v1329 + 192);
                }
                *(_QWORD *)(v1329 + 184) = v184;
                *(_QWORD *)(v1329 + 192) = v186 & 0xFFFFFFEFFFFFFFFFLL;
                if (sub_22E721888(v7, 0x3B0u, 0x196u))
                {
                  v187 = llvm::opt::Option::matches();
                  v188 = 0x1000000000;
                  if (v187)
                    v188 = 0;
                  *(_QWORD *)(v1329 + 192) = *(_QWORD *)(v1329 + 192) & 0xFFFFFFEFFFFFFFFFLL | v188;
                }
                *(_QWORD *)v1327 &= ~0x4000000000000uLL;
                if (sub_22E721888(v7, 0x6CCu, 0x533u))
                {
                  v189 = llvm::opt::Option::matches();
                  v190 = 0x4000000000000;
                  if (!v189)
                    v190 = 0;
                  *(_QWORD *)v1327 = *(_QWORD *)v1327 & 0xFFFBFFFFFFFFFFFFLL | v190;
                }
                *(_QWORD *)(v1329 + 232) &= ~0x100000000uLL;
                if (sub_22E721888(v7, 0x6FBu, 0x54Cu))
                {
                  v191 = llvm::opt::Option::matches();
                  v192 = 0x100000000;
                  if (!v191)
                    v192 = 0;
                  v193 = *(_QWORD *)(v1329 + 232) & 0xFFFFFFFEFFFFFFFFLL | v192;
                }
                else
                {
                  v193 = *(_QWORD *)(v1329 + 232);
                }
                *(_QWORD *)(v1329 + 232) = v193 & 0xFFFFFFFEFFFFFFFFLL;
                if (sub_22E721888(v7, 0x54Cu, 0x6FBu))
                {
                  v194 = llvm::opt::Option::matches();
                  v195 = 0x100000000;
                  if (v194)
                    v195 = 0;
                  v196 = *(_QWORD *)(v1329 + 232) & 0xFFFFFFFEFFFFFFFFLL | v195;
                }
                else
                {
                  v196 = *(_QWORD *)(v1329 + 232);
                }
                *(_QWORD *)(v1329 + 232) = v196 & 0xFFFFFFFDFFFFFFFFLL;
                if (sub_22E721888(v7, 0x6FAu, 0x54Bu))
                {
                  v197 = llvm::opt::Option::matches();
                  v198 = 0x200000000;
                  if (!v197)
                    v198 = 0;
                  v199 = *(_QWORD *)(v1329 + 232) & 0xFFFFFFFDFFFFFFFFLL | v198;
                }
                else
                {
                  v199 = *(_QWORD *)(v1329 + 232);
                }
                *(_QWORD *)(v1329 + 232) = v199 & 0xFFFFFFFDFFFFFFFFLL;
                if (sub_22E721888(v7, 0x54Bu, 0x6FAu))
                {
                  v200 = llvm::opt::Option::matches();
                  v201 = 0x200000000;
                  if (v200)
                    v201 = 0;
                  *(_QWORD *)(v1329 + 232) = *(_QWORD *)(v1329 + 232) & 0xFFFFFFFDFFFFFFFFLL | v201;
                }
                *(_QWORD *)v1329 &= ~0x80uLL;
                if (sub_22E721888(v7, 0x1BFu, 0x3C3u))
                {
                  v202 = llvm::opt::Option::matches();
                  v203 = 128;
                  if (!v202)
                    v203 = 0;
                  *(_QWORD *)v1329 = *(_QWORD *)v1329 & 0xFFFFFFFFFFFFFF7FLL | v203;
                }
                memset(v1415, 0, sizeof(v1415));
                sub_22E618148(v1415, *(_QWORD *)(v1329 + 544), *(_QWORD *)(v1329 + 552), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1329 + 552) - *(_QWORD *)(v1329 + 544)) >> 3));
                memset(v1414, 0, sizeof(v1414));
                v1433 = 0;
                __dst[0] = 0;
                __dst[1] = 0;
                sub_22E63B344((void **)(v1329 + 544));
                *(_OWORD *)(v1329 + 544) = *(_OWORD *)__dst;
                *(_QWORD *)(v1329 + 560) = v1433;
                v1433 = 0;
                __dst[1] = 0;
                __dst[0] = 0;
                __p[0] = __dst;
                sub_22E3B3CC8((void ***)__p);
                __p[0] = v1414;
                sub_22E3B3CC8((void ***)__p);
                __p[0] = v1415;
                sub_22E3B3CC8((void ***)__p);
                llvm::opt::ArgList::getAllArgValues();
                *(_OWORD *)__dst = *(_OWORD *)__p;
                v1433 = __p[2];
                memset(__p, 0, sizeof(__p));
                LOBYTE(v1434) = 1;
                v1336 = __p;
                sub_22E3B3CC8(&v1336);
                if ((_BYTE)v1434)
                {
                  memset(v1413, 0, sizeof(v1413));
                  sub_22E618148(v1413, *(_QWORD *)(v1329 + 544), *(_QWORD *)(v1329 + 552), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1329 + 552) - *(_QWORD *)(v1329 + 544)) >> 3));
                  v1411 = 0;
                  v1410 = 0;
                  v1412 = 0;
                  sub_22E618148(&v1410, (uint64_t)__dst[0], (uint64_t)__dst[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__dst[1] - (char *)__dst[0]) >> 3));
                  memset(__p, 0, sizeof(__p));
                  sub_22E618148(__p, v1410, v1411, 0xAAAAAAAAAAAAAAABLL * ((v1411 - v1410) >> 3));
                  sub_22E63B344((void **)(v1329 + 544));
                  *(_OWORD *)(v1329 + 544) = *(_OWORD *)__p;
                  *(void **)(v1329 + 560) = __p[2];
                  memset(__p, 0, sizeof(__p));
                  v1336 = __p;
                  sub_22E3B3CC8(&v1336);
                  v1336 = (void **)&v1410;
                  sub_22E3B3CC8(&v1336);
                  v1336 = (void **)v1413;
                  v7 = v1326;
                  sub_22E3B3CC8(&v1336);
                  if ((_BYTE)v1434)
                  {
                    __p[0] = __dst;
                    sub_22E3B3CC8((void ***)__p);
                  }
                }
                *(_BYTE *)(v1329 + 568) = 0;
                if (sub_22E721714(v7, 1494))
                  *(_BYTE *)(v1329 + 568) = 1;
                v204 = *(_WORD *)(v1327 + 8) & 0xBFFF | (*(unsigned __int8 *)(v1327 + 10) << 16);
                *(_WORD *)(v1327 + 8) &= ~0x4000u;
                *(_BYTE *)(v1327 + 10) = BYTE2(v204);
                if (sub_22E721888(v7, 0x1EEu, 0x3D3u))
                {
                  v205 = llvm::opt::Option::matches();
                  v206 = *(_WORD *)(v1327 + 8) & 0xBFFF | (*(unsigned __int8 *)(v1327 + 10) << 16);
                  if (v205)
                    v207 = 0x4000;
                  else
                    v207 = 0;
                  *(_WORD *)(v1327 + 8) = *(_WORD *)(v1327 + 8) & 0xBFFF | v207;
                  *(_BYTE *)(v1327 + 10) = BYTE2(v206);
                }
                *(_DWORD *)(v1329 + 420) = 2;
                v208 = sub_22E6EC1FC(479, 3u, v7, v1328);
                if (HIDWORD(v208))
                  *(_DWORD *)(v1329 + 420) = v208;
                *(_QWORD *)v1327 &= ~0x20000000000uLL;
                if (sub_22E721888(v7, 0x3D6u, 0x1F2u))
                {
                  v209 = llvm::opt::Option::matches();
                  v210 = 0x20000000000;
                  if (!v209)
                    v210 = 0;
                  *(_QWORD *)v1327 = *(_QWORD *)v1327 & 0xFFFFFDFFFFFFFFFFLL | v210;
                }
                v211 = (void **)(v1329 + 712);
                if (*(char *)(v1329 + 735) < 0)
                {
                  sub_22E3BB2B4(v1408, *(void **)(v1329 + 712), *(_QWORD *)(v1329 + 720));
                  v212 = *(char *)(v1329 + 735);
                  LODWORD(__dst[0]) = 0;
                  *(_DWORD *)((char *)__dst + 3) = 0;
                  if (v212 < 0)
                    operator delete(*v211);
                }
                else
                {
                  *(_OWORD *)v1408 = *(_OWORD *)v211;
                  v1409 = *(_QWORD *)(v1329 + 728);
                  LODWORD(__dst[0]) = 0;
                  *(_DWORD *)((char *)__dst + 3) = 0;
                }
                *v211 = 0;
                *(_QWORD *)(v1329 + 720) = 0;
                *(_DWORD *)(v1329 + 728) = __dst[0];
                *(_DWORD *)(v1329 + 731) = *(_DWORD *)((char *)__dst + 3);
                *(_BYTE *)(v1329 + 735) = 0;
                if (SHIBYTE(v1409) < 0)
                  operator delete(v1408[0]);
                sub_22E6EC3DC((uint64_t)__dst, 497, v7);
                if ((_BYTE)v1434)
                {
                  if (*(char *)(v1329 + 735) < 0)
                  {
                    sub_22E3BB2B4(v1406, *(void **)(v1329 + 712), *(_QWORD *)(v1329 + 720));
                  }
                  else
                  {
                    *(_OWORD *)v1406 = *(_OWORD *)v211;
                    v1407 = *(_QWORD *)(v1329 + 728);
                  }
                  v213 = SHIBYTE(v1433);
                  if (SHIBYTE(v1433) < 0)
                  {
                    sub_22E3BB2B4(v1404, __dst[0], (unint64_t)__dst[1]);
                  }
                  else
                  {
                    *(_OWORD *)v1404 = *(_OWORD *)__dst;
                    v1405 = v1433;
                  }
                  if (SHIBYTE(v1405) < 0)
                  {
                    sub_22E3BB2B4(__p, v1404[0], (unint64_t)v1404[1]);
                  }
                  else
                  {
                    *(_OWORD *)__p = *(_OWORD *)v1404;
                    __p[2] = v1405;
                  }
                  if (*(char *)(v1329 + 735) < 0)
                    operator delete(*v211);
                  *(_OWORD *)v211 = *(_OWORD *)__p;
                  *(void **)(v1329 + 728) = __p[2];
                  HIBYTE(__p[2]) = 0;
                  LOBYTE(__p[0]) = 0;
                  if (SHIBYTE(v1405) < 0)
                    operator delete(v1404[0]);
                  if (SHIBYTE(v1407) < 0)
                  {
                    operator delete(v1406[0]);
                    if ((v213 & 0x80000000) == 0)
                      goto LABEL_444;
                  }
                  else if ((v213 & 0x80000000) == 0)
                  {
                    goto LABEL_444;
                  }
                  operator delete(__dst[0]);
                }
LABEL_444:
                v214 = (void **)(v1329 + 736);
                if (*(char *)(v1329 + 759) < 0)
                {
                  sub_22E3BB2B4(v1402, *(void **)(v1329 + 736), *(_QWORD *)(v1329 + 744));
                  v215 = *(char *)(v1329 + 759);
                  LODWORD(__dst[0]) = 0;
                  *(_DWORD *)((char *)__dst + 3) = 0;
                  if (v215 < 0)
                    operator delete(*v214);
                }
                else
                {
                  *(_OWORD *)v1402 = *(_OWORD *)v214;
                  v1403 = *(_QWORD *)(v1329 + 752);
                  LODWORD(__dst[0]) = 0;
                  *(_DWORD *)((char *)__dst + 3) = 0;
                }
                *v214 = 0;
                *(_QWORD *)(v1329 + 744) = 0;
                *(_DWORD *)(v1329 + 752) = __dst[0];
                *(_DWORD *)(v1329 + 755) = *(_DWORD *)((char *)__dst + 3);
                *(_BYTE *)(v1329 + 759) = 0;
                if (SHIBYTE(v1403) < 0)
                  operator delete(v1402[0]);
                sub_22E6EC3DC((uint64_t)__dst, 499, v7);
                if ((_BYTE)v1434)
                {
                  if (*(char *)(v1329 + 759) < 0)
                  {
                    sub_22E3BB2B4(v1400, *(void **)(v1329 + 736), *(_QWORD *)(v1329 + 744));
                  }
                  else
                  {
                    *(_OWORD *)v1400 = *(_OWORD *)v214;
                    v1401 = *(_QWORD *)(v1329 + 752);
                  }
                  v216 = SHIBYTE(v1433);
                  if (SHIBYTE(v1433) < 0)
                  {
                    sub_22E3BB2B4(v1398, __dst[0], (unint64_t)__dst[1]);
                  }
                  else
                  {
                    *(_OWORD *)v1398 = *(_OWORD *)__dst;
                    v1399 = v1433;
                  }
                  if (SHIBYTE(v1399) < 0)
                  {
                    sub_22E3BB2B4(__p, v1398[0], (unint64_t)v1398[1]);
                  }
                  else
                  {
                    *(_OWORD *)__p = *(_OWORD *)v1398;
                    __p[2] = v1399;
                  }
                  if (*(char *)(v1329 + 759) < 0)
                    operator delete(*v214);
                  *(_OWORD *)v214 = *(_OWORD *)__p;
                  *(void **)(v1329 + 752) = __p[2];
                  HIBYTE(__p[2]) = 0;
                  LOBYTE(__p[0]) = 0;
                  if (SHIBYTE(v1399) < 0)
                    operator delete(v1398[0]);
                  if (SHIBYTE(v1401) < 0)
                  {
                    operator delete(v1400[0]);
                    if ((v216 & 0x80000000) == 0)
                      goto LABEL_468;
                  }
                  else if ((v216 & 0x80000000) == 0)
                  {
                    goto LABEL_468;
                  }
                  operator delete(__dst[0]);
                }
LABEL_468:
                v217 = (void **)(v1329 + 760);
                if (*(char *)(v1329 + 783) < 0)
                {
                  sub_22E3BB2B4(v1396, *(void **)(v1329 + 760), *(_QWORD *)(v1329 + 768));
                  v218 = *(char *)(v1329 + 783);
                  LODWORD(__dst[0]) = 0;
                  *(_DWORD *)((char *)__dst + 3) = 0;
                  if (v218 < 0)
                    operator delete(*v217);
                }
                else
                {
                  *(_OWORD *)v1396 = *(_OWORD *)v217;
                  v1397 = *(_QWORD *)(v1329 + 776);
                  LODWORD(__dst[0]) = 0;
                  *(_DWORD *)((char *)__dst + 3) = 0;
                }
                *v217 = 0;
                *(_QWORD *)(v1329 + 768) = 0;
                *(_DWORD *)(v1329 + 776) = __dst[0];
                *(_DWORD *)(v1329 + 779) = *(_DWORD *)((char *)__dst + 3);
                *(_BYTE *)(v1329 + 783) = 0;
                if (SHIBYTE(v1397) < 0)
                  operator delete(v1396[0]);
                sub_22E6EC3DC((uint64_t)__dst, 502, v7);
                if ((_BYTE)v1434)
                {
                  if (*(char *)(v1329 + 783) < 0)
                  {
                    sub_22E3BB2B4(v1394, *(void **)(v1329 + 760), *(_QWORD *)(v1329 + 768));
                  }
                  else
                  {
                    *(_OWORD *)v1394 = *(_OWORD *)v217;
                    v1395 = *(_QWORD *)(v1329 + 776);
                  }
                  v219 = SHIBYTE(v1433);
                  if (SHIBYTE(v1433) < 0)
                  {
                    sub_22E3BB2B4(v1392, __dst[0], (unint64_t)__dst[1]);
                  }
                  else
                  {
                    *(_OWORD *)v1392 = *(_OWORD *)__dst;
                    v1393 = v1433;
                  }
                  if (SHIBYTE(v1393) < 0)
                  {
                    sub_22E3BB2B4(__p, v1392[0], (unint64_t)v1392[1]);
                  }
                  else
                  {
                    *(_OWORD *)__p = *(_OWORD *)v1392;
                    __p[2] = v1393;
                  }
                  if (*(char *)(v1329 + 783) < 0)
                    operator delete(*v217);
                  *(_OWORD *)v217 = *(_OWORD *)__p;
                  *(void **)(v1329 + 776) = __p[2];
                  HIBYTE(__p[2]) = 0;
                  LOBYTE(__p[0]) = 0;
                  if (SHIBYTE(v1393) < 0)
                    operator delete(v1392[0]);
                  if (SHIBYTE(v1395) < 0)
                  {
                    operator delete(v1394[0]);
                    if ((v219 & 0x80000000) == 0)
                      goto LABEL_492;
                  }
                  else if ((v219 & 0x80000000) == 0)
                  {
                    goto LABEL_492;
                  }
                  operator delete(__dst[0]);
                }
LABEL_492:
                v220 = (void **)(v1329 + 784);
                if (*(char *)(v1329 + 807) < 0)
                {
                  sub_22E3BB2B4(v1390, *(void **)(v1329 + 784), *(_QWORD *)(v1329 + 792));
                  v221 = *(char *)(v1329 + 807);
                  LODWORD(__dst[0]) = 0;
                  *(_DWORD *)((char *)__dst + 3) = 0;
                  if (v221 < 0)
                    operator delete(*v220);
                }
                else
                {
                  *(_OWORD *)v1390 = *(_OWORD *)v220;
                  v1391 = *(_QWORD *)(v1329 + 800);
                  LODWORD(__dst[0]) = 0;
                  *(_DWORD *)((char *)__dst + 3) = 0;
                }
                *v220 = 0;
                *(_QWORD *)(v1329 + 792) = 0;
                *(_DWORD *)(v1329 + 800) = __dst[0];
                *(_DWORD *)(v1329 + 803) = *(_DWORD *)((char *)__dst + 3);
                *(_BYTE *)(v1329 + 807) = 0;
                if (SHIBYTE(v1391) < 0)
                  operator delete(v1390[0]);
                sub_22E6EC3DC((uint64_t)__dst, 501, v7);
                if ((_BYTE)v1434)
                {
                  if (*(char *)(v1329 + 807) < 0)
                  {
                    sub_22E3BB2B4(v1388, *(void **)(v1329 + 784), *(_QWORD *)(v1329 + 792));
                  }
                  else
                  {
                    *(_OWORD *)v1388 = *(_OWORD *)v220;
                    v1389 = *(_QWORD *)(v1329 + 800);
                  }
                  v222 = SHIBYTE(v1433);
                  if (SHIBYTE(v1433) < 0)
                  {
                    sub_22E3BB2B4(v1386, __dst[0], (unint64_t)__dst[1]);
                  }
                  else
                  {
                    *(_OWORD *)v1386 = *(_OWORD *)__dst;
                    v1387 = v1433;
                  }
                  if (SHIBYTE(v1387) < 0)
                  {
                    sub_22E3BB2B4(__p, v1386[0], (unint64_t)v1386[1]);
                  }
                  else
                  {
                    *(_OWORD *)__p = *(_OWORD *)v1386;
                    __p[2] = v1387;
                  }
                  if (*(char *)(v1329 + 807) < 0)
                    operator delete(*v220);
                  *(_OWORD *)v220 = *(_OWORD *)__p;
                  *(void **)(v1329 + 800) = __p[2];
                  HIBYTE(__p[2]) = 0;
                  LOBYTE(__p[0]) = 0;
                  if (SHIBYTE(v1387) < 0)
                    operator delete(v1386[0]);
                  if (SHIBYTE(v1389) < 0)
                  {
                    operator delete(v1388[0]);
                    if ((v222 & 0x80000000) == 0)
                      goto LABEL_516;
                  }
                  else if ((v222 & 0x80000000) == 0)
                  {
                    goto LABEL_516;
                  }
                  operator delete(__dst[0]);
                }
LABEL_516:
                v223 = (void **)(v1329 + 808);
                if (*(char *)(v1329 + 831) < 0)
                {
                  sub_22E3BB2B4(v1384, *(void **)(v1329 + 808), *(_QWORD *)(v1329 + 816));
                  v224 = *(char *)(v1329 + 831);
                  LODWORD(__dst[0]) = 0;
                  *(_DWORD *)((char *)__dst + 3) = 0;
                  if (v224 < 0)
                    operator delete(*v223);
                }
                else
                {
                  *(_OWORD *)v1384 = *(_OWORD *)v223;
                  v1385 = *(_QWORD *)(v1329 + 824);
                  LODWORD(__dst[0]) = 0;
                  *(_DWORD *)((char *)__dst + 3) = 0;
                }
                *v223 = 0;
                *(_QWORD *)(v1329 + 816) = 0;
                *(_DWORD *)(v1329 + 824) = __dst[0];
                *(_DWORD *)(v1329 + 827) = *(_DWORD *)((char *)__dst + 3);
                *(_BYTE *)(v1329 + 831) = 0;
                if (SHIBYTE(v1385) < 0)
                  operator delete(v1384[0]);
                sub_22E6EC3DC((uint64_t)__dst, 500, v7);
                if ((_BYTE)v1434)
                {
                  if (*(char *)(v1329 + 831) < 0)
                  {
                    sub_22E3BB2B4(v1382, *(void **)(v1329 + 808), *(_QWORD *)(v1329 + 816));
                  }
                  else
                  {
                    *(_OWORD *)v1382 = *(_OWORD *)v223;
                    v1383 = *(_QWORD *)(v1329 + 824);
                  }
                  v225 = SHIBYTE(v1433);
                  if (SHIBYTE(v1433) < 0)
                  {
                    sub_22E3BB2B4(v1380, __dst[0], (unint64_t)__dst[1]);
                  }
                  else
                  {
                    *(_OWORD *)v1380 = *(_OWORD *)__dst;
                    v1381 = v1433;
                  }
                  if (SHIBYTE(v1381) < 0)
                  {
                    sub_22E3BB2B4(__p, v1380[0], (unint64_t)v1380[1]);
                  }
                  else
                  {
                    *(_OWORD *)__p = *(_OWORD *)v1380;
                    __p[2] = v1381;
                  }
                  if (*(char *)(v1329 + 831) < 0)
                    operator delete(*v223);
                  *(_OWORD *)v223 = *(_OWORD *)__p;
                  *(void **)(v1329 + 824) = __p[2];
                  HIBYTE(__p[2]) = 0;
                  LOBYTE(__p[0]) = 0;
                  if (SHIBYTE(v1381) < 0)
                    operator delete(v1380[0]);
                  if (SHIBYTE(v1383) < 0)
                  {
                    operator delete(v1382[0]);
                    if ((v225 & 0x80000000) == 0)
                      goto LABEL_540;
                  }
                  else if ((v225 & 0x80000000) == 0)
                  {
                    goto LABEL_540;
                  }
                  operator delete(__dst[0]);
                }
LABEL_540:
                *(_BYTE *)(v1329 + 180) &= ~1u;
                if (sub_22E721714(v7, 655))
                  *(_BYTE *)(v1329 + 180) |= 1u;
                *v149 &= ~0x400000000000uLL;
                if (sub_22E721888(v7, 0x211u, 0x3E3u))
                {
                  v226 = llvm::opt::Option::matches();
                  v227 = *(unsigned __int16 *)(v1329 + 16) | (*(unsigned __int8 *)(v1329 + 18) << 16);
                  v228 = 0x400000000000;
                  if (!v226)
                    v228 = 0;
                  v229 = *v149 & 0xFFFFBFFFFFFFFFFFLL | v228;
                }
                else
                {
                  v227 = *(unsigned __int16 *)(v1329 + 16) | (*(unsigned __int8 *)(v1329 + 18) << 16);
                  v229 = *v149;
                }
                *v149 = v229 & 0xFFFF7FFFFFFFFFFFLL;
                *(_WORD *)(v1329 + 16) = v227;
                *(_BYTE *)(v1329 + 18) = BYTE2(v227);
                if (sub_22E721888(v7, 0x1ABu, 0x3B9u))
                {
                  v230 = llvm::opt::Option::matches();
                  v231 = 0x800000000000;
                  if (!v230)
                    v231 = 0;
                  *v149 = *v149 & 0xFFFF7FFFFFFFFFFFLL | v231;
                }
                v232 = *(_BYTE *)(v1329 + 28);
                v233 = *(_QWORD *)v1329;
                v234 = *(_QWORD *)(v1329 + 20) & 0xFFFF7FFFFFFFFFFFLL | ((unint64_t)((*(_QWORD *)v1329 & 0x5000) == 4096) << 47);
                *(_QWORD *)(v1329 + 20) = v234;
                if ((v233 & 0x100) != 0)
                {
                  if (sub_22E721888(v7, 0x3E4u, 0x212u))
                  {
                    v235 = llvm::opt::Option::matches();
                    v232 = *(_BYTE *)(v1329 + 28);
                    v236 = 0x800000000000;
                    if (v235)
                      v236 = 0;
                    v234 = *v156 & 0xFFFF7FFFFFFFFFFFLL | v236;
                  }
                  else
                  {
                    v234 = *v156;
                    v232 = *(_BYTE *)(v1329 + 28);
                  }
                }
                v237 = *(_QWORD *)v1329;
                v238 = (*(_QWORD *)v1329 & 0x5000) == 4096;
                *(_BYTE *)(v1329 + 28) = v232;
                *(_QWORD *)(v1329 + 20) = v234 & 0xFFFF7FFFFFFFFFFFLL | ((unint64_t)v238 << 47);
                if ((v237 & 0x100) != 0 && sub_22E721888(v7, 0x212u, 0x3E4u))
                {
                  v239 = llvm::opt::Option::matches();
                  v240 = 0x800000000000;
                  if (!v239)
                    v240 = 0;
                  *v156 = *v156 & 0xFFFF7FFFFFFFFFFFLL | v240;
                }
                *(_QWORD *)v1329 = (*(_QWORD *)v1329 & 0xFFFFFFFFDFFFFFFFLL | (((*(_QWORD *)v1329 >> 30) & 1) << 29)) ^ 0x20000000;
                if (sub_22E721888(v7, 0x267u, 0x404u))
                {
                  v241 = llvm::opt::Option::matches();
                  v242 = 0x20000000;
                  if (!v241)
                    v242 = 0;
                  v243 = *(_QWORD *)v1329 & 0xFFFFFFFFDFFFFFFFLL | v242;
                }
                else
                {
                  v243 = *(_QWORD *)v1329;
                }
                *(_QWORD *)v1329 = (v243 & 0xFFFFFFFFDFFFFFFFLL | (((v243 >> 30) & 1) << 29)) ^ 0x20000000;
                if (sub_22E721888(v7, 0x404u, 0x267u))
                {
                  v244 = llvm::opt::Option::matches();
                  v245 = 0x20000000;
                  if (v244)
                    v245 = 0;
                  *(_QWORD *)v1329 = *(_QWORD *)v1329 & 0xFFFFFFFFDFFFFFFFLL | v245;
                }
                *(_QWORD *)v1327 |= 0x800000000uLL;
                if (sub_22E721888(v7, 0x40Bu, 0x276u))
                {
                  v246 = llvm::opt::Option::matches();
                  v247 = 0x800000000;
                  if (v246)
                    v247 = 0;
                  *(_QWORD *)v1327 = *(_QWORD *)v1327 & 0xFFFFFFF7FFFFFFFFLL | v247;
                }
                *v156 &= ~0x40000000000uLL;
                if (sub_22E721714(v7, 638))
                  *v156 |= 0x40000000000uLL;
                *v149 &= ~0x100000000000uLL;
                if (sub_22E721888(v7, 0x287u, 0x411u))
                {
                  v248 = llvm::opt::Option::matches();
                  v249 = 0x100000000000;
                  if (!v248)
                    v249 = 0;
                  *v149 = *v149 & 0xFFFFEFFFFFFFFFFFLL | v249;
                }
                *(_DWORD *)(v1329 + 240) &= 0xFFFFFFF8;
                v250 = sub_22E6EC1FC(357, 4u, v7, v1328);
                if (HIDWORD(v250))
                  *(_DWORD *)(v1329 + 240) = *(_DWORD *)(v1329 + 240) & 0xFFFFFFF8 | v250 & 7;
                *v149 &= ~0x1000000000000uLL;
                if (sub_22E721714(v7, 785))
                  *v149 |= 0x1000000000000uLL;
                *(_DWORD *)(v1329 + 244) &= 0xFFFFE7FF;
                v251 = sub_22E6EC1FC(730, 5u, v7, v1328);
                v252 = *(_DWORD *)(v1329 + 244);
                if (HIDWORD(v251))
                  v252 = v252 & 0xFFFF87FF | ((v251 & 3) << 11);
                *(_DWORD *)(v1329 + 244) = v252 & 0xFFFF9FFF;
                v253 = sub_22E6EC1FC(441, 6u, v7, v1328);
                v254 = *(_DWORD *)(v1329 + 244);
                if (HIDWORD(v253))
                  v254 = v254 & 0xFFFF99FF | ((v253 & 3) << 13);
                *(_DWORD *)(v1329 + 244) = v254 | 0x600;
                v255 = sub_22E6EC1FC(738, 7u, v7, v1328);
                v256 = *(_DWORD *)(v1329 + 244);
                if (HIDWORD(v255))
                  v256 = v256 & 0xFFFFF87F | ((v255 & 3) << 9);
                *(_DWORD *)(v1329 + 244) = v256 & 0xFFFFFE7F;
                v257 = sub_22E6EC1FC(739, 8u, v7, v1328);
                if (HIDWORD(v257))
                  *(_DWORD *)(v1329 + 244) = *(_DWORD *)(v1329 + 244) & 0xFFFFFE7F | ((v257 & 3) << 7);
                v258 = *(_QWORD *)v1324;
                v259 = *(_DWORD *)(v1329 + 52);
                *(_DWORD *)(v1329 + 52) = v259 & 0xFFFFFBFF;
                if ((*(_QWORD *)v1327 & 0x400000000000000) != 0)
                {
                  *(_QWORD *)v1324 = v258;
                  *(_DWORD *)(v1329 + 52) = v259 | 0x400;
                }
                if (sub_22E721888(v7, 0x29Eu, 0x419u))
                {
                  v260 = llvm::opt::Option::matches();
                  v261 = *(_QWORD *)v1324;
                  v262 = 1024;
                  if (!v260)
                    v262 = 0;
                  v263 = *(_DWORD *)(v1329 + 52) & 0xFFFFFBFF | v262;
                }
                else
                {
                  v261 = *(_QWORD *)v1324;
                  v263 = *(_DWORD *)(v1329 + 52);
                }
                *(_QWORD *)v1324 = v261;
                *(_DWORD *)(v1329 + 52) = v263 & 0xFFFFF7FF;
                if (sub_22E721888(v7, 0x63Au, 0x4DCu))
                {
                  v264 = llvm::opt::Option::matches();
                  v265 = *(_QWORD *)v1324;
                  v266 = 2048;
                  if (!v264)
                    v266 = 0;
                  v267 = *(_DWORD *)(v1329 + 52) & 0xFFFFF7FF | v266;
                }
                else
                {
                  v265 = *(_QWORD *)v1324;
                  v267 = *(_DWORD *)(v1329 + 52);
                }
                *(_QWORD *)v1324 = v265;
                *(_DWORD *)(v1329 + 52) = v267 & 0xFFFFDFFF;
                if ((*(_QWORD *)v1327 & 0x1000000000000000) != 0 || (v267 & 0x800) != 0 || (v267 & 0x400) != 0)
                {
                  *(_QWORD *)v1324 = v265;
                  *(_DWORD *)(v1329 + 52) = v267 | 0x2000;
                }
                v268 = sub_22E721714(v7, 2188);
                v269 = *(_DWORD *)(v1329 + 52);
                if (v268)
                {
                  v269 |= 0x2000u;
                  *(_QWORD *)v1324 = *(_QWORD *)v1324;
                  *(_DWORD *)(v1329 + 52) = v269;
                }
                *v156 &= ~0x80000000000uLL;
                if ((v269 & 0x40000000) == 0 && sub_22E721888(v7, 0x353u, 0x45Eu))
                {
                  v270 = llvm::opt::Option::matches();
                  v271 = 0x80000000000;
                  if (!v270)
                    v271 = 0;
                  *v156 = *v156 & 0xFFFFF7FFFFFFFFFFLL | v271;
                }
                v272 = *(_WORD *)(v1329 + 248);
                *(_BYTE *)(v1329 + 250) &= ~0x80u;
                *(_WORD *)(v1329 + 248) = v272;
                v273 = sub_22E6EC1FC(662, 9u, v7, v1328);
                if (HIDWORD(v273))
                {
                  v274 = *(unsigned __int16 *)(v1329 + 248);
                  *(_BYTE *)(v1329 + 250) = ((v274 | (*(unsigned __int8 *)(v1329 + 250) << 16)) & 0x7FFFFF | ((unsigned __int16)v273 << 23)) >> 16;
                  *(_WORD *)(v1329 + 248) = v274;
                }
                v275 = *(_QWORD *)(v1329 + 200) & 0xFFFFFFFEFFFFFFFFLL;
                *(_QWORD *)(v1329 + 200) = v275;
                if ((*(_BYTE *)(v1329 + 1) & 1) == 0)
                {
                  if (sub_22E721888(v7, 0x2B7u, 0x41Eu))
                  {
                    v276 = llvm::opt::Option::matches();
                    v277 = 0x100000000;
                    if (!v276)
                      v277 = 0;
                    v275 = *(_QWORD *)(v1329 + 200) & 0xFFFFFFFEFFFFFFFFLL | v277;
                  }
                  else
                  {
                    v275 = *(_QWORD *)(v1329 + 200);
                  }
                }
                *(_QWORD *)(v1329 + 200) = v275 | 0x400000000;
                if (sub_22E721888(v7, 0x3C9u, 0x1CAu))
                {
                  v278 = llvm::opt::Option::matches();
                  v279 = 0x400000000;
                  if (v278)
                    v279 = 0;
                  *(_QWORD *)(v1329 + 200) = *(_QWORD *)(v1329 + 200) & 0xFFFFFFFBFFFFFFFFLL | v279;
                }
                *(_QWORD *)(v1329 + 192) &= 0xFFFFFF3FFFFFFFFFLL;
                v280 = sub_22E6EC038(1616, v7, v1328);
                if (HIDWORD(v280))
                  *(_QWORD *)(v1329 + 192) = *(_QWORD *)(v1329 + 192) & 0xFFFFFF3FFFFFFFFFLL | ((v280 & 3) << 38);
                *(_DWORD *)(v1329 + 52) = *(_DWORD *)(v1329 + 52) & 0xFFF7FFFF | (((*(_DWORD *)(v1329 + 52) >> 13) & 1) << 19);
                v281 = (uint64_t)v1325;
                if (sub_22E721888(v7, 0x62Eu, 0x4D2u))
                {
                  v282 = llvm::opt::Option::matches();
                  v283 = *(_QWORD *)v1324;
                  v284 = 0x80000;
                  if (!v282)
                    v284 = 0;
                  v285 = *(_DWORD *)(v1329 + 52) & 0xFFF7FFFF | v284;
                }
                else
                {
                  v283 = *(_QWORD *)v1324;
                  v285 = *(_DWORD *)(v1329 + 52);
                }
                *(_QWORD *)v1324 = v283;
                *(_DWORD *)(v1329 + 52) = v285 & 0xFFEFFFFF | (((v285 >> 13) & 1) << 20);
                if (sub_22E721888(v7, 0x1A2u, 0x3B4u))
                {
                  v286 = llvm::opt::Option::matches();
                  v287 = *(_QWORD *)v1324;
                  v288 = 0x100000;
                  if (!v286)
                    v288 = 0;
                  v289 = *(_DWORD *)(v1329 + 52) & 0xFFEFFFFF | v288;
                }
                else
                {
                  v287 = *(_QWORD *)v1324;
                  v289 = *(_DWORD *)(v1329 + 52);
                }
                *(_QWORD *)v1324 = v287;
                *(_DWORD *)(v1329 + 52) = v289 & 0xFFFFEFFF;
                if ((*(_QWORD *)v1327 & 0x2000000000000000) != 0 || (v289 & 0x400) != 0)
                {
                  *(_QWORD *)v1324 = v287;
                  *(_DWORD *)(v1329 + 52) = v289 | 0x1000;
                }
                if (sub_22E721888(v7, 0x2A4u, 0x41Du))
                {
                  v290 = llvm::opt::Option::matches();
                  v291 = *(_QWORD *)v1324;
                  v292 = 4096;
                  if (!v290)
                    v292 = 0;
                  v293 = *(_DWORD *)(v1329 + 52) & 0xFFFFEFFF | v292;
                }
                else
                {
                  v291 = *(_QWORD *)v1324;
                  v293 = *(_DWORD *)(v1329 + 52);
                }
                *(_QWORD *)v1324 = v291;
                *(_DWORD *)(v1329 + 52) = v293 & 0xFFFBFFFF;
                if ((*(_QWORD *)v1327 & 0x800000000000000) != 0 || (v293 & 0x2000) != 0)
                {
                  *(_QWORD *)v1324 = v291;
                  *(_DWORD *)(v1329 + 52) = v293 | 0x40000;
                }
                if (sub_22E721888(v7, 0x516u, 0x69Fu))
                {
                  if (llvm::opt::Option::matches())
                    v294 = 0x40000;
                  else
                    v294 = 0;
                  *(_DWORD *)(v1329 + 52) = *(_DWORD *)(v1329 + 52) & 0xFFFBFFFF | v294;
                }
                *(_DWORD *)(v1329 + 244) = *(_DWORD *)(v1329 + 244) & 0xFFFFFF8F | 0x10;
                if (sub_22E721714(v7, 1608))
                  *(_DWORD *)(v1329 + 244) |= 0x70u;
                *(_DWORD *)(v1329 + 52) &= ~0x4000u;
                if (sub_22E721888(v7, 0x60Eu, 0x4B9u))
                {
                  if (llvm::opt::Option::matches())
                    v295 = 0x4000;
                  else
                    v295 = 0;
                  *(_DWORD *)(v1329 + 52) = *(_DWORD *)(v1329 + 52) & 0xFFFFBFFF | v295;
                }
                *v149 &= ~0x40000000000000uLL;
                if (sub_22E721714(v7, 745))
                  *v149 |= 0x40000000000000uLL;
                *(_QWORD *)v1329 = *(_QWORD *)v1329 & 0xFFFFFFFEFFFFFFFFLL | (((*(_QWORD *)v1329 >> 31) & 1) << 32);
                if (sub_22E721888(v7, 0x2FAu, 0x430u))
                {
                  v296 = llvm::opt::Option::matches();
                  v297 = 0x100000000;
                  if (!v296)
                    v297 = 0;
                  v298 = *(_QWORD *)v1329 & 0xFFFFFFFEFFFFFFFFLL | v297;
                }
                else
                {
                  v298 = *(_QWORD *)v1329;
                }
                *(_QWORD *)v1329 = v298 & 0xFFFFFFFEFFFFFFFFLL | (((v298 >> 31) & 1) << 32);
                if (sub_22E721888(v7, 0x430u, 0x2FAu))
                {
                  v299 = llvm::opt::Option::matches();
                  v300 = 0x100000000;
                  if (v299)
                    v300 = 0;
                  v301 = *(_QWORD *)v1329 & 0xFFFFFFFEFFFFFFFFLL | v300;
                  *(_QWORD *)v1329 = v301;
                }
                else
                {
                  v301 = *(_QWORD *)v1329;
                }
                *(_DWORD *)(v1329 + 52) = *(_DWORD *)(v1329 + 52) & 0xFFFFFF7F | (((v301 & 0x101) == 0) << 7);
                if ((v301 & 0x100) == 0 && sub_22E721888(v7, 0x2FCu, 0x431u))
                {
                  if (llvm::opt::Option::matches())
                    v302 = 128;
                  else
                    v302 = 0;
                  *(_DWORD *)(v1329 + 52) = *(_DWORD *)(v1329 + 52) & 0xFFFFFF7F | v302;
                }
                *v156 &= ~0x100000000000uLL;
                if (sub_22E721714(v7, 776))
                  *v156 |= 0x100000000000uLL;
                *(_QWORD *)v1327 &= ~0x4000000000000000uLL;
                if (sub_22E721714(v7, 660))
                  *(_QWORD *)v1327 |= 0x4000000000000000uLL;
                *(_QWORD *)(v1329 + 192) &= ~0x20000000000uLL;
                if (sub_22E721888(v7, 0x740u, 0x576u))
                {
                  v303 = llvm::opt::Option::matches();
                  v304 = 0x20000000000;
                  if (!v303)
                    v304 = 0;
                  *(_QWORD *)(v1329 + 192) = *(_QWORD *)(v1329 + 192) & 0xFFFFFDFFFFFFFFFFLL | v304;
                }
                memset(v1379, 0, sizeof(v1379));
                sub_22E618148(v1379, *(_QWORD *)(v1329 + 304), *(_QWORD *)(v1329 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1329 + 312) - *(_QWORD *)(v1329 + 304)) >> 3));
                memset(v1378, 0, sizeof(v1378));
                v1433 = 0;
                __dst[0] = 0;
                __dst[1] = 0;
                sub_22E63B344((void **)(v1329 + 304));
                *(_OWORD *)(v1329 + 304) = *(_OWORD *)__dst;
                *(_QWORD *)(v1329 + 320) = v1433;
                v1433 = 0;
                __dst[1] = 0;
                __dst[0] = 0;
                __p[0] = __dst;
                sub_22E3B3CC8((void ***)__p);
                __p[0] = v1378;
                sub_22E3B3CC8((void ***)__p);
                __p[0] = v1379;
                sub_22E3B3CC8((void ***)__p);
                llvm::opt::ArgList::getAllArgValues();
                *(_OWORD *)__dst = *(_OWORD *)__p;
                v1433 = __p[2];
                memset(__p, 0, sizeof(__p));
                LOBYTE(v1434) = 1;
                v1336 = __p;
                sub_22E3B3CC8(&v1336);
                if ((_BYTE)v1434)
                {
                  memset(v1377, 0, sizeof(v1377));
                  sub_22E618148(v1377, *(_QWORD *)(v1329 + 304), *(_QWORD *)(v1329 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1329 + 312) - *(_QWORD *)(v1329 + 304)) >> 3));
                  v1375 = 0;
                  v1374 = 0;
                  v1376 = 0;
                  sub_22E618148(&v1374, (uint64_t)__dst[0], (uint64_t)__dst[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__dst[1] - (char *)__dst[0]) >> 3));
                  memset(__p, 0, sizeof(__p));
                  sub_22E618148(__p, v1374, v1375, 0xAAAAAAAAAAAAAAABLL * ((v1375 - v1374) >> 3));
                  sub_22E63B344((void **)(v1329 + 304));
                  *(_OWORD *)(v1329 + 304) = *(_OWORD *)__p;
                  *(void **)(v1329 + 320) = __p[2];
                  memset(__p, 0, sizeof(__p));
                  v1336 = __p;
                  sub_22E3B3CC8(&v1336);
                  v1336 = (void **)&v1374;
                  v281 = (uint64_t)v1325;
                  sub_22E3B3CC8(&v1336);
                  v1336 = (void **)v1377;
                  sub_22E3B3CC8(&v1336);
                  if ((_BYTE)v1434)
                  {
                    __p[0] = __dst;
                    sub_22E3B3CC8((void ***)__p);
                  }
                }
                v305 = (void **)(v1329 + 328);
                memset(v1373, 0, sizeof(v1373));
                sub_22E618148(v1373, *(_QWORD *)(v1329 + 328), *(_QWORD *)(v1329 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1329 + 336) - *(_QWORD *)(v1329 + 328)) >> 3));
                memset(v1372, 0, sizeof(v1372));
                v1433 = 0;
                __dst[0] = 0;
                __dst[1] = 0;
                sub_22E63B344((void **)(v1329 + 328));
                *(_OWORD *)(v1329 + 328) = *(_OWORD *)__dst;
                *(_QWORD *)(v1329 + 344) = v1433;
                v1433 = 0;
                __dst[1] = 0;
                __dst[0] = 0;
                __p[0] = __dst;
                sub_22E3B3CC8((void ***)__p);
                __p[0] = v1372;
                sub_22E3B3CC8((void ***)__p);
                __p[0] = v1373;
                sub_22E3B3CC8((void ***)__p);
                llvm::opt::ArgList::getAllArgValues();
                *(_OWORD *)__dst = *(_OWORD *)__p;
                v1433 = __p[2];
                memset(__p, 0, sizeof(__p));
                LOBYTE(v1434) = 1;
                v1336 = __p;
                sub_22E3B3CC8(&v1336);
                if ((_BYTE)v1434)
                {
                  memset(v1371, 0, sizeof(v1371));
                  sub_22E618148(v1371, *(_QWORD *)(v1329 + 328), *(_QWORD *)(v1329 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1329 + 336) - *(_QWORD *)(v1329 + 328)) >> 3));
                  v1369 = 0;
                  v1368 = 0;
                  v1370 = 0;
                  sub_22E618148(&v1368, (uint64_t)__dst[0], (uint64_t)__dst[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__dst[1] - (char *)__dst[0]) >> 3));
                  memset(__p, 0, sizeof(__p));
                  sub_22E618148(__p, v1368, v1369, 0xAAAAAAAAAAAAAAABLL * ((v1369 - v1368) >> 3));
                  sub_22E63B344(v305);
                  *(_OWORD *)v305 = *(_OWORD *)__p;
                  *(void **)(v1329 + 344) = __p[2];
                  memset(__p, 0, sizeof(__p));
                  v1336 = __p;
                  sub_22E3B3CC8(&v1336);
                  v1336 = (void **)&v1368;
                  sub_22E3B3CC8(&v1336);
                  v1336 = (void **)v1371;
                  sub_22E3B3CC8(&v1336);
                  if ((_BYTE)v1434)
                  {
                    __p[0] = __dst;
                    sub_22E3B3CC8((void ***)__p);
                  }
                }
                memset(v1367, 0, sizeof(v1367));
                sub_22E618148(v1367, *(_QWORD *)(v1329 + 352), *(_QWORD *)(v1329 + 360), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1329 + 360) - *(_QWORD *)(v1329 + 352)) >> 3));
                memset(v1366, 0, sizeof(v1366));
                v1433 = 0;
                __dst[0] = 0;
                __dst[1] = 0;
                sub_22E63B344((void **)(v1329 + 352));
                *(_OWORD *)(v1329 + 352) = *(_OWORD *)__dst;
                *(_QWORD *)(v1329 + 368) = v1433;
                v1433 = 0;
                __dst[1] = 0;
                __dst[0] = 0;
                __p[0] = __dst;
                sub_22E3B3CC8((void ***)__p);
                __p[0] = v1366;
                sub_22E3B3CC8((void ***)__p);
                __p[0] = v1367;
                sub_22E3B3CC8((void ***)__p);
                v306 = v1326;
                llvm::opt::ArgList::getAllArgValues();
                *(_OWORD *)__dst = *(_OWORD *)__p;
                v1433 = __p[2];
                memset(__p, 0, sizeof(__p));
                LOBYTE(v1434) = 1;
                v1336 = __p;
                sub_22E3B3CC8(&v1336);
                if ((_BYTE)v1434)
                {
                  memset(v1365, 0, sizeof(v1365));
                  sub_22E618148(v1365, *(_QWORD *)(v1329 + 352), *(_QWORD *)(v1329 + 360), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1329 + 360) - *(_QWORD *)(v1329 + 352)) >> 3));
                  v1363 = 0;
                  v1362 = 0;
                  v1364 = 0;
                  sub_22E618148(&v1362, (uint64_t)__dst[0], (uint64_t)__dst[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__dst[1] - (char *)__dst[0]) >> 3));
                  memset(__p, 0, sizeof(__p));
                  sub_22E618148(__p, v1362, v1363, 0xAAAAAAAAAAAAAAABLL * ((v1363 - v1362) >> 3));
                  sub_22E63B344((void **)(v1329 + 352));
                  *(_OWORD *)(v1329 + 352) = *(_OWORD *)__p;
                  *(void **)(v1329 + 368) = __p[2];
                  memset(__p, 0, sizeof(__p));
                  v1336 = __p;
                  sub_22E3B3CC8(&v1336);
                  v1336 = (void **)&v1362;
                  sub_22E3B3CC8(&v1336);
                  v1336 = (void **)v1365;
                  v306 = v1326;
                  sub_22E3B3CC8(&v1336);
                  if ((_BYTE)v1434)
                  {
                    __p[0] = __dst;
                    sub_22E3B3CC8((void ***)__p);
                  }
                }
                *(_QWORD *)(v1329 + 192) &= ~0x40000000000uLL;
                if (sub_22E721888(v306, 0x736u, 0x572u))
                {
                  v307 = llvm::opt::Option::matches();
                  v308 = *(_QWORD *)(v1329 + 184);
                  v309 = 0x40000000000;
                  if (!v307)
                    v309 = 0;
                  v310 = *(_QWORD *)(v1329 + 192) & 0xFFFFFBFFFFFFFFFFLL | v309;
                }
                else
                {
                  v308 = *(_QWORD *)(v1329 + 184);
                  v310 = *(_QWORD *)(v1329 + 192);
                }
                v311 = v1328;
                *(_QWORD *)(v1329 + 184) = v308;
                *(_QWORD *)(v1329 + 192) = v310 & 0xFFFFF7FFFFFFFFFFLL;
                if (sub_22E721888(v306, 0x737u, 0x573u))
                {
                  v312 = llvm::opt::Option::matches();
                  v313 = 0x80000000000;
                  if (!v312)
                    v313 = 0;
                  *(_QWORD *)(v1329 + 192) = *(_QWORD *)(v1329 + 192) & 0xFFFFF7FFFFFFFFFFLL | v313;
                }
                *(_QWORD *)(v1329 + 232) = *(_QWORD *)(v1329 + 232) & 0xE7FFFFFFFFFFFFFFLL | ((unint64_t)((*(_DWORD *)(v1329 + 52) & 0x40000000 | *(_QWORD *)(v1329 + 100) & 0x2000000000) == 0) << 60);
                v314 = sub_22E6EC1FC(836, 0xCu, v306, v1328);
                if (HIDWORD(v314))
                  *(_QWORD *)(v1329 + 232) = *(_QWORD *)(v1329 + 232) & 0xE7FFFFFFFFFFFFFFLL | ((v314 & 3) << 59);
                *(_QWORD *)v1329 &= ~0x10uLL;
                v315 = sub_22E721714(v306, 910);
                v316 = *(_QWORD *)v1329;
                if (v315)
                  v316 = *(_QWORD *)v1329 | 0x10;
                *(_QWORD *)v1329 = v316 & 0xFFFFFFFFFFFFFFDFLL | (32 * ((v316 >> 4) & 1));
                v317 = sub_22E721714(v306, 911);
                v318 = *(_QWORD *)v1329;
                if (v317)
                  v318 = *(_QWORD *)v1329 | 0x20;
                *(_QWORD *)v1329 = v318 & 0xFFFFFFFFFFFFFFBFLL | (((v318 >> 5) & 1) << 6);
                if (sub_22E721888(v306, 0x1A4u, 0x3B5u))
                {
                  v319 = llvm::opt::Option::matches();
                  v320 = 64;
                  if (!v319)
                    v320 = 0;
                  *(_QWORD *)v1329 = *(_QWORD *)v1329 & 0xFFFFFFFFFFFFFFBFLL | v320;
                }
                v321 = *(_WORD *)(v1327 + 8) & 0xEFFF | (*(unsigned __int8 *)(v1327 + 10) << 16);
                *(_WORD *)(v1327 + 8) &= ~0x1000u;
                *(_BYTE *)(v1327 + 10) = BYTE2(v321);
                if (sub_22E721888(v306, 0x23Au, 0x3F1u))
                {
                  v322 = llvm::opt::Option::matches();
                  v323 = *(_WORD *)(v1327 + 8) & 0xEFFF | (*(unsigned __int8 *)(v1327 + 10) << 16);
                  if (v322)
                    v324 = 4096;
                  else
                    v324 = 0;
                  *(_WORD *)(v1327 + 8) = *(_WORD *)(v1327 + 8) & 0xEFFF | v324;
                  *(_BYTE *)(v1327 + 10) = BYTE2(v323);
                }
                *(_DWORD *)(v1329 + 240) &= 0xFFFFFCFF;
                v325 = sub_22E6EC1FC(913, 0xDu, v306, v1328);
                if (HIDWORD(v325))
                  *(_DWORD *)(v1329 + 240) = *(_DWORD *)(v1329 + 240) & 0xFFFFFCFF | ((v325 & 3) << 8);
                v326 = *(_QWORD *)v1329;
                *(_QWORD *)v1329 &= ~0x10000000uLL;
                if ((v326 & 0xA0) != 0 || (*(_BYTE *)(v1329 + 68) & 0x20) != 0)
                  *(_QWORD *)v1329 = v326 | 0x10000000;
                if (sub_22E721888(v306, 0x233u, 0x3EEu))
                {
                  v327 = llvm::opt::Option::matches();
                  v328 = 0x10000000;
                  if (!v327)
                    v328 = 0;
                  v329 = *(_QWORD *)v1329 & 0xFFFFFFFFEFFFFFFFLL | v328;
                }
                else
                {
                  v329 = *(_QWORD *)v1329;
                }
                *(_QWORD *)v1329 = v329 & 0xFFFFFFFFEFFFFFFFLL;
                if ((v329 & 0xA0) != 0 || (*(_BYTE *)(v1329 + 68) & 0x20) != 0)
                  *(_QWORD *)v1329 = v329 | 0x10000000;
                if (sub_22E721888(v306, 0x3EEu, 0x233u))
                {
                  v330 = llvm::opt::Option::matches();
                  v331 = 0x10000000;
                  if (v330)
                    v331 = 0;
                  *(_QWORD *)v1329 = *(_QWORD *)v1329 & 0xFFFFFFFFEFFFFFFFLL | v331;
                }
                *v156 &= ~0x8000000000000uLL;
                if (sub_22E721888(v306, 0x5DFu, 0x49Fu))
                {
                  v332 = llvm::opt::Option::matches();
                  v333 = *(_BYTE *)(v1329 + 28);
                  v334 = 0x8000000000000;
                  if (!v332)
                    v334 = 0;
                  v335 = *v156 & 0xFFF7FFFFFFFFFFFFLL | v334;
                }
                else
                {
                  v335 = *v156;
                  v333 = *(_BYTE *)(v1329 + 28);
                }
                *v156 = v335 & 0xFFF7FFFFFFFFFFFFLL;
                *(_BYTE *)(v1329 + 28) = v333;
                if (sub_22E721888(v306, 0x49Fu, 0x5DFu))
                {
                  v336 = llvm::opt::Option::matches();
                  v337 = *(_BYTE *)(v1329 + 28);
                  v338 = 0x8000000000000;
                  if (v336)
                    v338 = 0;
                  v339 = *v156 & 0xFFF7FFFFFFFFFFFFLL | v338;
                }
                else
                {
                  v339 = *v156;
                  v337 = *(_BYTE *)(v1329 + 28);
                }
                *v156 = v339 & 0xFFFFBFFFFFFFFFFFLL;
                *(_BYTE *)(v1329 + 28) = v337;
                v340 = sub_22E721714(v306, 900);
                v341 = *v156;
                if (v340)
                  v341 = *v156 | 0x400000000000;
                *v156 = v341 & 0xFFFFDFFFFFFFFFFFLL | ((unint64_t)((v341 & 0xC00000000000) != 0) << 45);
                if (sub_22E721888(v306, 0x38Au, 0x46Fu))
                {
                  v342 = llvm::opt::Option::matches();
                  v343 = 0x200000000000;
                  if (!v342)
                    v343 = 0;
                  *v156 = *v156 & 0xFFFFDFFFFFFFFFFFLL | v343;
                }
                v344 = (void **)(v1329 + 472);
                if (*(char *)(v1329 + 495) < 0)
                {
                  sub_22E3BB2B4(v1360, *(void **)(v1329 + 472), *(_QWORD *)(v1329 + 480));
                  v345 = *(char *)(v1329 + 495);
                  LODWORD(__dst[0]) = 0;
                  *(_DWORD *)((char *)__dst + 3) = 0;
                  if (v345 < 0)
                    operator delete(*v344);
                }
                else
                {
                  *(_OWORD *)v1360 = *(_OWORD *)v344;
                  v1361 = *(_QWORD *)(v1329 + 488);
                  LODWORD(__dst[0]) = 0;
                  *(_DWORD *)((char *)__dst + 3) = 0;
                }
                *v344 = 0;
                *(_QWORD *)(v1329 + 480) = 0;
                *(_DWORD *)(v1329 + 488) = __dst[0];
                *(_DWORD *)(v1329 + 491) = *(_DWORD *)((char *)__dst + 3);
                *(_BYTE *)(v1329 + 495) = 0;
                if (SHIBYTE(v1361) < 0)
                  operator delete(v1360[0]);
                sub_22E6EC3DC((uint64_t)__dst, 880, v306);
                if ((_BYTE)v1434)
                {
                  if (*(char *)(v1329 + 495) < 0)
                  {
                    sub_22E3BB2B4(v1358, *(void **)(v1329 + 472), *(_QWORD *)(v1329 + 480));
                  }
                  else
                  {
                    *(_OWORD *)v1358 = *(_OWORD *)v344;
                    v1359 = *(_QWORD *)(v1329 + 488);
                  }
                  v346 = SHIBYTE(v1433);
                  if (SHIBYTE(v1433) < 0)
                  {
                    sub_22E3BB2B4(v1356, __dst[0], (unint64_t)__dst[1]);
                  }
                  else
                  {
                    *(_OWORD *)v1356 = *(_OWORD *)__dst;
                    v1357 = v1433;
                  }
                  if (SHIBYTE(v1357) < 0)
                  {
                    sub_22E3BB2B4(__p, v1356[0], (unint64_t)v1356[1]);
                  }
                  else
                  {
                    *(_OWORD *)__p = *(_OWORD *)v1356;
                    __p[2] = v1357;
                  }
                  if (*(char *)(v1329 + 495) < 0)
                    operator delete(*v344);
                  *(_OWORD *)v344 = *(_OWORD *)__p;
                  *(void **)(v1329 + 488) = __p[2];
                  HIBYTE(__p[2]) = 0;
                  LOBYTE(__p[0]) = 0;
                  if (SHIBYTE(v1357) < 0)
                    operator delete(v1356[0]);
                  if (SHIBYTE(v1359) < 0)
                  {
                    operator delete(v1358[0]);
                    if ((v346 & 0x80000000) == 0)
                      goto LABEL_779;
                  }
                  else if ((v346 & 0x80000000) == 0)
                  {
                    goto LABEL_779;
                  }
                  operator delete(__dst[0]);
                }
LABEL_779:
                *v156 &= ~0x40000000000000uLL;
                v347 = sub_22E721714(v306, 899);
                v348 = *v156;
                if (v347)
                  v348 = *v156 | 0x40000000000000;
                *v156 = v348 & 0xFFEFFFFFFFFFFFFFLL | (((v348 >> 54) & 1) << 52);
                if (sub_22E721888(v306, 0x376u, 0x468u))
                {
                  v349 = llvm::opt::Option::matches();
                  v350 = *(_BYTE *)(v1329 + 28);
                  v351 = 0x10000000000000;
                  if (!v349)
                    v351 = 0;
                  v352 = *v156 & 0xFFEFFFFFFFFFFFFFLL | v351;
                }
                else
                {
                  v352 = *v156;
                  v350 = *(_BYTE *)(v1329 + 28);
                }
                v353 = v352 & 0xFFDFFFFFFFFFFFFFLL;
                *v156 = v352 & 0xFFDFFFFFFFFFFFFFLL;
                *(_BYTE *)(v1329 + 28) = v350;
                if ((v352 & 0x200000000000) != 0)
                {
                  if (sub_22E721888(v306, 0x381u, 0x46Cu))
                  {
                    v354 = llvm::opt::Option::matches();
                    v350 = *(_BYTE *)(v1329 + 28);
                    v355 = 0x20000000000000;
                    if (!v354)
                      v355 = 0;
                    v353 = *v156 & 0xFFDFFFFFFFFFFFFFLL | v355;
                  }
                  else
                  {
                    v353 = *v156;
                    v350 = *(_BYTE *)(v1329 + 28);
                  }
                }
                v356 = v353 & 0xFFDFFFFFFFFFFFFFLL;
                *v156 = v353 & 0xFFDFFFFFFFFFFFFFLL;
                *(_BYTE *)(v1329 + 28) = v350;
                if ((v353 & 0x200000000000) != 0)
                {
                  if (sub_22E721888(v306, 0x46Cu, 0x381u))
                  {
                    v357 = llvm::opt::Option::matches();
                    v350 = *(_BYTE *)(v1329 + 28);
                    v358 = 0x20000000000000;
                    if (v357)
                      v358 = 0;
                    v356 = *v156 & 0xFFDFFFFFFFFFFFFFLL | v358;
                  }
                  else
                  {
                    v356 = *v156;
                    v350 = *(_BYTE *)(v1329 + 28);
                  }
                }
                *v156 = v356 | 0x100000000000000;
                *(_BYTE *)(v1329 + 28) = v350;
                if (sub_22E721888(v306, 0x442u, 0x319u))
                {
                  v359 = llvm::opt::Option::matches();
                  v360 = 0x100000000000000;
                  if (v359)
                    v360 = 0;
                  *v156 = *v156 & 0xFEFFFFFFFFFFFFFFLL | v360;
                }
                *(_QWORD *)(v1329 + 192) &= ~0x400000000uLL;
                if (sub_22E721714(v306, 1602))
                  *(_QWORD *)(v1329 + 192) |= 0x400000000uLL;
                *v149 &= ~0x200000000uLL;
                if (sub_22E721714(v306, 1110))
                  *v149 |= 0x200000000uLL;
                *(_QWORD *)(v1329 + 8) = *(_QWORD *)(v1329 + 8) & 0xFFFFFFFBFFFFFFFFLL | ((unint64_t)((*(_DWORD *)(sub_22F1D5FAC(*(_DWORD *)(v1329 + 252)) + 16) >> 11) & 1) << 34);
                if (sub_22E721888(v306, 0x261u, 0x3FEu))
                {
                  v361 = llvm::opt::Option::matches();
                  v362 = 0x400000000;
                  if (!v361)
                    v362 = 0;
                  *v149 = *v149 & 0xFFFFFFFBFFFFFFFFLL | v362;
                }
                *(_QWORD *)(v1329 + 8) = *(_QWORD *)(v1329 + 8) & 0xFFFFFFFBFFFFFFFFLL | ((unint64_t)((*(_DWORD *)(sub_22F1D5FAC(*(_DWORD *)(v1329 + 252)) + 16) >> 11) & 1) << 34);
                if (sub_22E721888(v306, 0x3FEu, 0x261u))
                {
                  v363 = llvm::opt::Option::matches();
                  v364 = *(unsigned __int16 *)(v1329 + 16) | (*(unsigned __int8 *)(v1329 + 18) << 16);
                  v365 = 0x400000000;
                  if (v363)
                    v365 = 0;
                  v366 = *v149 & 0xFFFFFFFBFFFFFFFFLL | v365;
                }
                else
                {
                  v364 = *(unsigned __int16 *)(v1329 + 16) | (*(unsigned __int8 *)(v1329 + 18) << 16);
                  v366 = *v149;
                }
                v367 = v366 & 0xFFFFFFEFFFFFFFFFLL | ((unint64_t)((*(_DWORD *)v1329 >> 8) & 1) << 36);
                *(_WORD *)(v1329 + 16) = v364;
                *(_BYTE *)(v1329 + 18) = BYTE2(v364);
                *(_QWORD *)(v1329 + 8) = v367;
                if (sub_22E721888(v306, 0x497u, 0x5BDu))
                {
                  v368 = llvm::opt::Option::matches();
                  v369 = 0x1000000000;
                  if (v368)
                    v369 = 0;
                  *v149 = *v149 & 0xFFFFFFEFFFFFFFFFLL | v369;
                }
                *(_QWORD *)v1329 &= ~0x20000uLL;
                if (sub_22E721888(v306, 0x58Au, 0x47Au))
                {
                  v370 = llvm::opt::Option::matches();
                  v371 = 0x20000;
                  if (!v370)
                    v371 = 0;
                  *(_QWORD *)v1329 = *(_QWORD *)v1329 & 0xFFFFFFFFFFFDFFFFLL | v371;
                }
                *v149 &= ~0x200000000000uLL;
                if (sub_22E721888(v306, 0x58Bu, 0x47Bu))
                {
                  v372 = llvm::opt::Option::matches();
                  v373 = 0x200000000000;
                  if (!v372)
                    v373 = 0;
                  *v149 = *v149 & 0xFFFFDFFFFFFFFFFFLL | v373;
                }
                *(_QWORD *)v1329 &= ~0x80000uLL;
                if (sub_22E721888(v306, 0x1A0u, 0x3B3u))
                {
                  v374 = llvm::opt::Option::matches();
                  v375 = 0x80000;
                  if (!v374)
                    v375 = 0;
                  *(_QWORD *)v1329 = *(_QWORD *)v1329 & 0xFFFFFFFFFFF7FFFFLL | v375;
                }
                *v149 &= ~0x1000000000000000uLL;
                if (sub_22E721888(v306, 0x63Bu, 0x4DDu))
                {
                  v376 = llvm::opt::Option::matches();
                  v377 = 0x1000000000000000;
                  if (!v376)
                    v377 = 0;
                  *v149 = *v149 & 0xEFFFFFFFFFFFFFFFLL | v377;
                }
                *(_QWORD *)(v1329 + 132) &= ~0x1000000000uLL;
                if (sub_22E721888(v306, 0x6A1u, 0x518u))
                {
                  v378 = llvm::opt::Option::matches();
                  v379 = *(_QWORD *)(v1329 + 124);
                  v380 = *(_QWORD *)(v1329 + 116);
                  v381 = *(_QWORD *)(v1329 + 108);
                  v382 = 0x1000000000;
                  if (!v378)
                    v382 = 0;
                  v383 = *(_QWORD *)(v1329 + 132) & 0xFFFFFFEFFFFFFFFFLL | v382;
                }
                else
                {
                  v383 = *(_QWORD *)(v1329 + 132);
                  v379 = *(_QWORD *)(v1329 + 124);
                  v380 = *(_QWORD *)(v1329 + 116);
                  v381 = *(_QWORD *)(v1329 + 108);
                }
                v384 = (*(_DWORD *)v1329 >> 11) & 1;
                *(_QWORD *)(v1329 + 108) = v381;
                *(_QWORD *)(v1329 + 116) = v380;
                *(_QWORD *)(v1329 + 124) = v379;
                *(_QWORD *)(v1329 + 132) = v383 & 0xFFFFFFDFFFFFFFFFLL | ((unint64_t)(v384 & 1) << 37);
                if (sub_22E721888(v306, 0x187u, 0x3AAu))
                {
                  v385 = llvm::opt::Option::matches();
                  v386 = *(_QWORD *)(v1329 + 124);
                  v387 = *(_QWORD *)(v1329 + 116);
                  v388 = *(_QWORD *)(v1329 + 108);
                  v389 = 0x2000000000;
                  if (!v385)
                    v389 = 0;
                  v390 = *(_QWORD *)(v1329 + 132) & 0xFFFFFFDFFFFFFFFFLL | v389;
                }
                else
                {
                  v390 = *(_QWORD *)(v1329 + 132);
                  v386 = *(_QWORD *)(v1329 + 124);
                  v387 = *(_QWORD *)(v1329 + 116);
                  v388 = *(_QWORD *)(v1329 + 108);
                }
                v391 = (*(_DWORD *)v1329 >> 11) & 1;
                *(_QWORD *)(v1329 + 108) = v388;
                *(_QWORD *)(v1329 + 116) = v387;
                *(_QWORD *)(v1329 + 124) = v386;
                *(_QWORD *)(v1329 + 132) = v390 & 0xFFFFFFDFFFFFFFFFLL | ((unint64_t)(v391 & 1) << 37);
                if (sub_22E721888(v306, 0x3AAu, 0x187u))
                {
                  v392 = llvm::opt::Option::matches();
                  v393 = 0x2000000000;
                  if (v392)
                    v393 = 0;
                  *(_QWORD *)(v1329 + 132) = *(_QWORD *)(v1329 + 132) & 0xFFFFFFDFFFFFFFFFLL | v393;
                }
                *(_QWORD *)v1327 = (unint64_t)*(unsigned int *)(v1327 + 4) << 32;
                v394 = sub_22E6EC038(925, v306, v1328);
                if (HIDWORD(v394))
                  *(_DWORD *)v1327 = v394;
                *(_QWORD *)v1329 |= 0x40000uLL;
                if (sub_22E721888(v306, 0x47Cu, 0x58Eu))
                {
                  v395 = llvm::opt::Option::matches();
                  v396 = 0x40000;
                  if (v395)
                    v396 = 0;
                  *(_QWORD *)v1329 = *(_QWORD *)v1329 & 0xFFFFFFFFFFFBFFFFLL | v396;
                }
                v397 = *(_WORD *)(v1327 + 8) & 0xFF7F | (*(unsigned __int8 *)(v1327 + 10) << 16);
                *(_WORD *)(v1327 + 8) &= ~0x80u;
                *(_BYTE *)(v1327 + 10) = BYTE2(v397);
                if (sub_22E721714(v306, 1416))
                {
                  v398 = *(_BYTE *)(v1327 + 10);
                  *(_WORD *)(v1327 + 8) |= 0x80u;
                  *(_BYTE *)(v1327 + 10) = v398;
                }
                *(_QWORD *)(v1329 + 72) |= 0x100000000uLL;
                if (sub_22E721888(v306, 0x5AAu, 0x48Fu))
                {
                  v399 = llvm::opt::Option::matches();
                  v400 = 0x100000000;
                  if (!v399)
                    v400 = 0;
                  v401 = *(_QWORD *)(v1329 + 72) & 0xFFFFFFFEFFFFFFFFLL | v400;
                }
                else
                {
                  v401 = *(_QWORD *)(v1329 + 72);
                }
                *(_QWORD *)(v1329 + 72) = v401 | 0x100000000;
                if (sub_22E721888(v306, 0x48Fu, 0x5AAu))
                {
                  v402 = llvm::opt::Option::matches();
                  v403 = 0x100000000;
                  if (v402)
                    v403 = 0;
                  *(_QWORD *)(v1329 + 72) = *(_QWORD *)(v1329 + 72) & 0xFFFFFFFEFFFFFFFFLL | v403;
                }
                *(_WORD *)(v1329 + 96) &= ~8u;
                v404 = sub_22E721714(v306, 1441);
                v405 = *(_WORD *)(v1329 + 96);
                if (v404)
                  v405 |= 8u;
                *(_WORD *)(v1329 + 96) = v405 & 0xFFEF;
                v406 = sub_22E721714(v306, 1455);
                v407 = *(_WORD *)(v1329 + 96);
                if (v406)
                  v407 |= 0x10u;
                *(_WORD *)(v1329 + 96) = v407 & 0xFFFE;
                if (sub_22E721888(v306, 0x5B0u, 0x492u))
                  *(_WORD *)(v1329 + 96) = *(_WORD *)(v1329 + 96) & 0xFFFE | (llvm::opt::Option::matches() != 0);
                *(_QWORD *)(v1329 + 32) = (unint64_t)*(unsigned int *)(v1329 + 36) << 32;
                v408 = sub_22E6EC038(1491, v306, v1328);
                if (HIDWORD(v408))
                  LODWORD(v409) = v408;
                else
                  v409 = *(_QWORD *)(v1329 + 32);
                *(_QWORD *)(v1329 + 32) = v409;
                v410 = sub_22E6EC038(859, v306, v1328);
                if (HIDWORD(v410))
                  *(_DWORD *)(v1329 + 36) = v410;
                *v149 &= ~0x4000000000uLL;
                if (sub_22E721888(v306, 0x5D7u, 0x49Cu))
                {
                  v411 = llvm::opt::Option::matches();
                  v412 = 0x4000000000;
                  if (!v411)
                    v412 = 0;
                  *v149 = *v149 & 0xFFFFFFBFFFFFFFFFLL | v412;
                }
                *(_DWORD *)(v1329 + 52) &= ~0x20u;
                if (sub_22E721888(v306, 0x647u, 0x4E5u))
                {
                  v413 = llvm::opt::Option::matches();
                  v414 = *(_QWORD *)v1324;
                  v415 = 32;
                  if (!v413)
                    v415 = 0;
                  v416 = *(_DWORD *)(v1329 + 52) & 0xFFFFFFDF | v415;
                }
                else
                {
                  v414 = *(_QWORD *)v1324;
                  v416 = *(_DWORD *)(v1329 + 52);
                }
                *(_QWORD *)v1324 = v414;
                *(_DWORD *)(v1329 + 52) = v416 & 0xFFFFFFBF;
                if (sub_22E721888(v306, 0x64Cu, 0x4EAu))
                {
                  if (llvm::opt::Option::matches())
                    v417 = 64;
                  else
                    v417 = 0;
                  *(_DWORD *)(v1329 + 52) = *(_DWORD *)(v1329 + 52) & 0xFFFFFFBF | v417;
                }
                v418 = *(unsigned __int8 *)(v1329 + 18);
                v419 = *(unsigned __int16 *)(v1329 + 16);
                v420 = *(_QWORD *)v1329;
                v421 = *(_QWORD *)(v1329 + 8) & 0xFFF7FFFFFFFFFFFFLL | ((unint64_t)((*(_QWORD *)v1329 >> 8) & 1) << 51);
                *(_QWORD *)(v1329 + 8) = v421;
                if ((v420 & 0x100) != 0)
                {
                  if (sub_22E721888(v306, 0x4E9u, 0x64Bu))
                  {
                    v423 = llvm::opt::Option::matches();
                    v422 = *(unsigned __int16 *)(v1329 + 16) | (*(unsigned __int8 *)(v1329 + 18) << 16);
                    v424 = 0x8000000000000;
                    if (v423)
                      v424 = 0;
                    v421 = *v149 & 0xFFF7FFFFFFFFFFFFLL | v424;
                  }
                  else
                  {
                    v422 = *(unsigned __int16 *)(v1329 + 16) | (*(unsigned __int8 *)(v1329 + 18) << 16);
                    v421 = *v149;
                  }
                }
                else
                {
                  v422 = v419 | (v418 << 16);
                }
                *(_WORD *)(v1329 + 16) = v422;
                *v149 = v421 & 0xFFEFFFFFFFFFFFFFLL | (((v421 >> 51) & 1) << 52);
                *(_BYTE *)(v1329 + 18) = BYTE2(v422);
                if ((v421 & 0x8000000000000) != 0 && sub_22E721888(v306, 0x4E8u, 0x64Au))
                {
                  v425 = llvm::opt::Option::matches();
                  v426 = 0x10000000000000;
                  if (v425)
                    v426 = 0;
                  *v149 = *v149 & 0xFFEFFFFFFFFFFFFFLL | v426;
                }
                *(_DWORD *)(v1329 + 52) &= ~0x20000000u;
                if (sub_22E721888(v306, 0x693u, 0x50Du))
                {
                  if (llvm::opt::Option::matches())
                    v427 = 0x20000000;
                  else
                    v427 = 0;
                  *(_DWORD *)(v1329 + 52) = *(_DWORD *)(v1329 + 52) & 0xDFFFFFFF | v427;
                }
                *(_QWORD *)v1329 = *(_QWORD *)v1329 & 0xFFFFFFFFFBFFFFFFLL | (((*(_QWORD *)v1329 >> 12) & 1) << 26);
                if (sub_22E721888(v306, 0x1E0u, 0x3CEu))
                {
                  v428 = llvm::opt::Option::matches();
                  v429 = 0x4000000;
                  if (!v428)
                    v429 = 0;
                  v430 = *(_QWORD *)v1329 & 0xFFFFFFFFFBFFFFFFLL | v429;
                }
                else
                {
                  v430 = *(_QWORD *)v1329;
                }
                *(_QWORD *)v1329 = v430 & 0xFFFFFFFFFBFFFFFFLL | (((v430 >> 12) & 1) << 26);
                if (sub_22E721888(v306, 0x3CEu, 0x1E0u))
                {
                  v431 = llvm::opt::Option::matches();
                  v432 = 0x4000000;
                  if (v431)
                    v432 = 0;
                  *(_QWORD *)v1329 = *(_QWORD *)v1329 & 0xFFFFFFFFFBFFFFFFLL | v432;
                }
                *(_QWORD *)v1327 |= 0x100000000000000uLL;
                if (sub_22E721888(v306, 0x51Du, 0x6A9u))
                {
                  v433 = llvm::opt::Option::matches();
                  v434 = 0x100000000000000;
                  if (v433)
                    v434 = 0;
                  *(_QWORD *)v1327 = *(_QWORD *)v1327 & 0xFEFFFFFFFFFFFFFFLL | v434;
                }
                v435 = *(_DWORD *)(v1329 + 52);
                *(_DWORD *)(v1329 + 52) = v435 | 0x800000;
                if ((v435 & 0x40000000) == 0
                  && (*(_BYTE *)(v1329 + 104) & 0x20) == 0
                  && sub_22E721888(v306, 0x514u, 0x69Du))
                {
                  if (llvm::opt::Option::matches())
                    v436 = 0;
                  else
                    v436 = 0x800000;
                  *(_DWORD *)(v1329 + 52) = *(_DWORD *)(v1329 + 52) & 0xFF7FFFFF | v436;
                }
                v437 = (*(unsigned __int16 *)(v1327 + 8) | (*(unsigned __int8 *)(v1327 + 10) << 16)) & 0xFFF7FFFF;
                *(_WORD *)(v1327 + 8) = *(_WORD *)(v1327 + 8);
                *(_BYTE *)(v1327 + 10) = BYTE2(v437);
                if (sub_22E721888(v306, 0x6B0u, 0x524u))
                {
                  v438 = llvm::opt::Option::matches();
                  v439 = *(_QWORD *)v1327;
                  v440 = 0x80000;
                  if (!v438)
                    v440 = 0;
                  v441 = (*(unsigned __int16 *)(v1327 + 8) | (*(unsigned __int8 *)(v1327 + 10) << 16)) & 0xFFF7FFFF | v440;
                }
                else
                {
                  v441 = *(unsigned __int16 *)(v1327 + 8) | (*(unsigned __int8 *)(v1327 + 10) << 16);
                  v439 = *(_QWORD *)v1327;
                }
                *(_QWORD *)v1327 = v439;
                *(_WORD *)(v1327 + 8) = v441;
                *(_BYTE *)(v1327 + 10) = BYTE2(v441) & 0xF7;
                if (sub_22E721888(v306, 0x524u, 0x6B0u))
                {
                  v442 = llvm::opt::Option::matches();
                  v443 = (*(unsigned __int16 *)(v1327 + 8) | (*(unsigned __int8 *)(v1327 + 10) << 16)) & 0xFFF7FFFF;
                  if (v442)
                    v444 = 0;
                  else
                    v444 = 0x80000;
                  *(_WORD *)(v1327 + 8) = *(_WORD *)(v1327 + 8);
                  *(_BYTE *)(v1327 + 10) = (v443 | v444) >> 16;
                }
                v445 = *(_WORD *)(v1329 + 248) & 0xFCFF | (*(unsigned __int8 *)(v1329 + 250) << 16);
                *(_WORD *)(v1329 + 248) &= 0xFCFFu;
                *(_BYTE *)(v1329 + 250) = BYTE2(v445);
                v446 = sub_22E6EC1FC(1783, 0x10u, v306, v1328);
                if (HIDWORD(v446))
                {
                  v447 = *(_WORD *)(v1329 + 248) & 0xFCFF | (*(unsigned __int8 *)(v1329 + 250) << 16);
                  *(_WORD *)(v1329 + 248) = *(_WORD *)(v1329 + 248) & 0xFCFF | ((v446 & 3) << 8);
                  *(_BYTE *)(v1329 + 250) = BYTE2(v447);
                }
                *(_QWORD *)(v1329 + 152) = (unint64_t)*(unsigned int *)(v1329 + 156) << 32;
                v448 = sub_22E6EC038(1782, v306, v1328);
                if (HIDWORD(v448))
                  LODWORD(v449) = v448;
                else
                  v449 = *(_QWORD *)(v1329 + 152);
                *(_QWORD *)(v1329 + 152) = v449;
                v450 = sub_22E6EC038(1784, v306, v1328);
                v451 = *(_BYTE *)(v1329 + 160);
                if (HIDWORD(v450))
                  v452 = *(_QWORD *)(v1329 + 152) | ((unint64_t)v450 << 32);
                else
                  v452 = *(_QWORD *)(v1329 + 152);
                *(_QWORD *)(v1329 + 152) = v452;
                *(_BYTE *)(v1329 + 160) = v451 & 0xFE;
                v453 = sub_22E721714(v306, 1778);
                v454 = *(_BYTE *)(v1329 + 160);
                if (v453)
                  v454 |= 1u;
                *(_BYTE *)(v1329 + 160) = v454 & 0xFD;
                v455 = sub_22E721714(v306, 1779);
                v456 = *(_BYTE *)(v1329 + 160);
                if (v455)
                  v456 |= 2u;
                *(_BYTE *)(v1329 + 160) = v456 & 0xFB;
                v457 = sub_22E721714(v306, 1781);
                v458 = *(_BYTE *)(v1329 + 160);
                if (v457)
                  v458 |= 4u;
                *(_BYTE *)(v1329 + 160) = v458 & 0xF7;
                if (sub_22E721714(v306, 1780))
                  *(_BYTE *)(v1329 + 160) |= 8u;
                *(_QWORD *)(v1329 + 184) = *(unsigned int *)(v1329 + 184);
                v459 = sub_22E6EC038(3108, v306, v1328);
                if (HIDWORD(v459))
                  *(_DWORD *)(v1329 + 188) = v459;
                *v156 |= 0x8000000000uLL;
                if (sub_22E721888(v306, 0x536u, 0x6D9u))
                {
                  v460 = llvm::opt::Option::matches();
                  v461 = 0x8000000000;
                  if (v460)
                    v461 = 0;
                  *v156 = *v156 & 0xFFFFFF7FFFFFFFFFLL | v461;
                }
                v462 = (*(unsigned __int16 *)(v1327 + 8) | (*(unsigned __int8 *)(v1327 + 10) << 16)) & 0xFFFEFFFF;
                *(_WORD *)(v1327 + 8) = *(_WORD *)(v1327 + 8);
                *(_BYTE *)(v1327 + 10) = BYTE2(v462);
                if (sub_22E721888(v306, 0x723u, 0x566u))
                {
                  v463 = llvm::opt::Option::matches();
                  v464 = *(unsigned __int16 *)(v1327 + 8);
                  v465 = 0x10000;
                  if (!v463)
                    v465 = 0;
                  v466 = (v464 | (*(unsigned __int8 *)(v1327 + 10) << 16)) & 0xFFFEFFFF | v465;
                  *(_WORD *)(v1327 + 8) = v464;
                  *(_BYTE *)(v1327 + 10) = BYTE2(v466);
                }
                else
                {
                  v466 = *(unsigned __int16 *)(v1327 + 8) | (*(unsigned __int8 *)(v1327 + 10) << 16);
                }
                v467 = *(_DWORD *)(v1329 + 244) & 0xF1FFFFFF | 0x4000000;
                *(_DWORD *)(v1329 + 244) = v467;
                if ((v466 & 0x10000) != 0)
                {
                  v468 = sub_22E6EC1FC(1824, 0x12u, v306, v1328);
                  v467 = *(_DWORD *)(v1329 + 244);
                  if (HIDWORD(v468))
                    v467 = v467 & 0xF1FFFFFF | ((v468 & 7) << 25);
                }
                *(_DWORD *)(v1329 + 244) = v467 & 0x8FFFFFFF;
                if (((*(unsigned __int16 *)(v1329 + 148) | (*(unsigned __int8 *)(v1329 + 150) << 16)) & 0x10000) != 0)
                {
                  v469 = sub_22E6EC1FC(1832, 0x13u, v306, v1328);
                  if (HIDWORD(v469))
                    *(_DWORD *)(v1329 + 244) = *(_DWORD *)(v1329 + 244) & 0x8FFFFFFF | ((v469 & 7) << 28);
                }
                v470 = *(_WORD *)(v1329 + 248) & 0xFFF8 | (*(unsigned __int8 *)(v1329 + 250) << 16) | 2;
                *(_WORD *)(v1329 + 248) = *(_WORD *)(v1329 + 248) & 0xFFF8 | 2;
                if (((*(unsigned __int16 *)(v1329 + 148) | (*(unsigned __int8 *)(v1329 + 150) << 16)) & 0x10000) != 0)
                {
                  v471 = sub_22E6EC1FC(1825, 0x14u, v306, v1328);
                  v470 = *(unsigned __int16 *)(v1329 + 248) | (*(unsigned __int8 *)(v1329 + 250) << 16);
                  if (HIDWORD(v471))
                    v470 = *(_WORD *)(v1329 + 248) & 0xFFF8 | (*(unsigned __int8 *)(v1329 + 250) << 16) | v471 & 7;
                }
                *(_BYTE *)(v1329 + 250) = BYTE2(v470);
                *(_WORD *)(v1329 + 248) = v470 & 0xFFC7;
                if (((*(unsigned __int16 *)(v1329 + 148) | (*(unsigned __int8 *)(v1329 + 150) << 16)) & 0x10000) != 0)
                {
                  v472 = sub_22E6EC1FC(1826, 0x15u, v306, v1328);
                  if (HIDWORD(v472))
                  {
                    v473 = *(_WORD *)(v1329 + 248) & 0xFFC7 | (*(unsigned __int8 *)(v1329 + 250) << 16);
                    *(_WORD *)(v1329 + 248) = *(_WORD *)(v1329 + 248) & 0xFFC7 | (8 * (v472 & 7));
                    *(_BYTE *)(v1329 + 250) = BYTE2(v473);
                  }
                }
                *(_QWORD *)v1327 &= ~0x400000000000uLL;
                if (sub_22E721888(v306, 0x726u, 0x568u))
                {
                  v474 = llvm::opt::Option::matches();
                  v475 = *(unsigned __int16 *)(v1327 + 8) | (*(unsigned __int8 *)(v1327 + 10) << 16);
                  v476 = 0x400000000000;
                  if (!v474)
                    v476 = 0;
                  v477 = *(_QWORD *)v1327 & 0xFFFFBFFFFFFFFFFFLL | v476;
                }
                else
                {
                  v475 = *(unsigned __int16 *)(v1327 + 8) | (*(unsigned __int8 *)(v1327 + 10) << 16);
                  v477 = *(_QWORD *)v1327;
                }
                *(_QWORD *)v1327 = v477 & 0xFFFEFFFFFFFFFFFFLL;
                *(_WORD *)(v1327 + 8) = v475;
                *(_BYTE *)(v1327 + 10) = BYTE2(v475);
                if (sub_22E721888(v306, 0x725u, 0x567u))
                {
                  v478 = llvm::opt::Option::matches();
                  v479 = *(unsigned __int16 *)(v1327 + 8) | (*(unsigned __int8 *)(v1327 + 10) << 16);
                  v480 = 0x1000000000000;
                  if (!v478)
                    v480 = 0;
                  v481 = *(_QWORD *)v1327 & 0xFFFEFFFFFFFFFFFFLL | v480;
                }
                else
                {
                  v479 = *(unsigned __int16 *)(v1327 + 8) | (*(unsigned __int8 *)(v1327 + 10) << 16);
                  v481 = *(_QWORD *)v1327;
                }
                *(_QWORD *)v1327 = v481 & 0xFFFEFFFFFFFFFFFFLL;
                *(_WORD *)(v1327 + 8) = v479;
                *(_BYTE *)(v1327 + 10) = BYTE2(v479);
                if (sub_22E721888(v306, 0x567u, 0x725u))
                {
                  v482 = llvm::opt::Option::matches();
                  v483 = *(unsigned __int16 *)(v1327 + 8) | (*(unsigned __int8 *)(v1327 + 10) << 16);
                  v484 = 0x1000000000000;
                  if (v482)
                    v484 = 0;
                  v485 = *(_QWORD *)v1327 & 0xFFFEFFFFFFFFFFFFLL | v484;
                }
                else
                {
                  v483 = *(unsigned __int16 *)(v1327 + 8) | (*(unsigned __int8 *)(v1327 + 10) << 16);
                  v485 = *(_QWORD *)v1327;
                }
                *(_QWORD *)v1327 = v485 & 0xFFFDFFFFFFFFFFFFLL;
                *(_WORD *)(v1327 + 8) = v483;
                *(_BYTE *)(v1327 + 10) = BYTE2(v483);
                v486 = sub_22E721714(v306, 1828);
                v487 = *(_QWORD *)v1327;
                if (v486)
                  v487 = *(_QWORD *)v1327 | 0x2000000000000;
                *(_QWORD *)v1327 = v487 & 0xFFF7FFFFFFFFFFFFLL;
                if (sub_22E721888(v306, 0x39Fu, 0x474u))
                {
                  v488 = llvm::opt::Option::matches();
                  v489 = *(unsigned __int16 *)(v1327 + 8) | (*(unsigned __int8 *)(v1327 + 10) << 16);
                  v490 = 0x8000000000000;
                  if (!v488)
                    v490 = 0;
                  v491 = *(_QWORD *)v1327 & 0xFFF7FFFFFFFFFFFFLL | v490;
                }
                else
                {
                  v489 = *(unsigned __int16 *)(v1327 + 8) | (*(unsigned __int8 *)(v1327 + 10) << 16);
                  v491 = *(_QWORD *)v1327;
                }
                *(_QWORD *)v1327 = v491 & 0xFFF7FFFFFFFFFFFFLL;
                *(_WORD *)(v1327 + 8) = v489;
                *(_BYTE *)(v1327 + 10) = BYTE2(v489);
                if (sub_22E721888(v306, 0x474u, 0x39Fu))
                {
                  v492 = llvm::opt::Option::matches();
                  v493 = 0x8000000000000;
                  if (v492)
                    v493 = 0;
                  *(_QWORD *)v1327 = *(_QWORD *)v1327 & 0xFFF7FFFFFFFFFFFFLL | v493;
                }
                *v149 &= ~0x8000000000uLL;
                if (sub_22E721714(v306, 1843))
                  *v149 |= 0x8000000000uLL;
                *(_QWORD *)(v1329 + 200) &= ~0x800000000uLL;
                if (sub_22E721714(v306, 641))
                  *(_QWORD *)(v1329 + 200) |= 0x800000000uLL;
                v494 = *(_BYTE *)(v1327 + 10);
                *(_WORD *)(v1327 + 8) &= ~1u;
                *(_BYTE *)(v1327 + 10) = v494;
                if (sub_22E721714(v306, 2569))
                {
                  v495 = *(_BYTE *)(v1327 + 10);
                  *(_WORD *)(v1327 + 8) |= 1u;
                  *(_BYTE *)(v1327 + 10) = v495;
                }
                v496 = *(_QWORD *)(v1329 + 48);
                *(_QWORD *)v1324 = v496 << 32;
                *(_DWORD *)(v1329 + 52) = HIDWORD(v496);
                v497 = sub_22E6EC038(2176, v306, v1328);
                if (HIDWORD(v497))
                {
                  v498 = *(_QWORD *)(v1329 + 48);
                  *(_QWORD *)v1324 = v497 | ((unint64_t)v498 << 32);
                  *(_DWORD *)(v1329 + 52) = HIDWORD(v498);
                }
                *(_BYTE *)(v1329 + 40) &= ~1u;
                if (sub_22E721714(v306, 2099))
                  *(_BYTE *)(v1329 + 40) |= 1u;
                v499 = (*(unsigned __int16 *)(v1327 + 8) | (*(unsigned __int8 *)(v1327 + 10) << 16)) & 0xFFEFFFFF;
                *(_WORD *)(v1327 + 8) = *(_WORD *)(v1327 + 8);
                *(_BYTE *)(v1327 + 10) = BYTE2(v499);
                if (sub_22E721714(v306, 2169))
                {
                  v500 = *(unsigned __int16 *)(v1327 + 8);
                  v501 = (v500 | (*(unsigned __int8 *)(v1327 + 10) << 16) | 0x100000u) >> 16;
                  *(_WORD *)(v1327 + 8) = v500;
                  *(_BYTE *)(v1327 + 10) = v501;
                }
                *(_QWORD *)(v1329 + 224) = (unint64_t)*(unsigned int *)(v1329 + 228) << 32;
                v502 = sub_22E6EC038(748, v306, v1328);
                if (HIDWORD(v502))
                  *(_DWORD *)(v1329 + 224) = v502;
                *v149 &= ~0x20000000000000uLL;
                if (sub_22E721714(v306, 2312))
                  *v149 |= 0x20000000000000uLL;
                v503 = *(_WORD *)(v1329 + 248) & 0xCFFF | (*(unsigned __int8 *)(v1329 + 250) << 16);
                *(_WORD *)(v1329 + 248) &= 0xCFFFu;
                *(_BYTE *)(v1329 + 250) = BYTE2(v503);
                v504 = sub_22E6EC1FC(2640, 0x19u, v306, v1328);
                if (HIDWORD(v504))
                {
                  v505 = *(_WORD *)(v1329 + 248) & 0xCFFF | (*(unsigned __int8 *)(v1329 + 250) << 16);
                  *(_WORD *)(v1329 + 248) = *(_WORD *)(v1329 + 248) & 0xCFFF | ((v504 & 3) << 12);
                  *(_BYTE *)(v1329 + 250) = BYTE2(v505);
                }
                *(_QWORD *)(v1329 + 192) &= ~0x10000000000uLL;
                if (sub_22E721714(v306, 2154))
                  *(_QWORD *)(v1329 + 192) |= 0x10000000000uLL;
                *(_QWORD *)(v1329 + 216) = (unint64_t)*(unsigned int *)(v1329 + 220) << 32;
                v506 = sub_22E6EC038(2676, v306, v1328);
                if (HIDWORD(v506))
                  LODWORD(v507) = v506;
                else
                  v507 = *(_QWORD *)(v1329 + 216);
                *(_QWORD *)(v1329 + 216) = v507;
                v508 = sub_22E6EC038(2675, v306, v1328);
                if (HIDWORD(v508))
                  *(_DWORD *)(v1329 + 220) = v508;
                *(_DWORD *)(v1329 + 52) &= ~2u;
                if (sub_22E721714(v306, 2088))
                  *(_DWORD *)(v1329 + 52) |= 2u;
                *v149 &= ~0x80000000000uLL;
                if (sub_22E721888(v306, 0x748u, 0x578u))
                {
                  v509 = llvm::opt::Option::matches();
                  v510 = 0x80000000000;
                  if (!v509)
                    v510 = 0;
                  *v149 = *v149 & 0xFFFFF7FFFFFFFFFFLL | v510;
                }
                *(_DWORD *)(v1329 + 52) &= ~0x200000u;
                if (sub_22E721714(v306, 2856))
                  *(_DWORD *)(v1329 + 52) |= 0x200000u;
                *v156 &= ~0x10000000000uLL;
                if (sub_22E721888(v306, 0xB3Fu, 0xAA6u))
                {
                  v511 = llvm::opt::Option::matches();
                  v512 = *(_BYTE *)(v1329 + 28);
                  v513 = 0x10000000000;
                  if (!v511)
                    v513 = 0;
                  v514 = *v156 & 0xFFFFFEFFFFFFFFFFLL | v513;
                }
                else
                {
                  v514 = *v156;
                  v512 = *(_BYTE *)(v1329 + 28);
                }
                *v156 = v514 & 0xFFFFFEFFFFFFFFFFLL;
                *(_BYTE *)(v1329 + 28) = v512;
                if (sub_22E721888(v306, 0xAA6u, 0xB3Fu))
                {
                  v515 = llvm::opt::Option::matches();
                  v516 = 0x10000000000;
                  if (v515)
                    v516 = 0;
                  *v156 = *v156 & 0xFFFFFEFFFFFFFFFFLL | v516;
                }
                *v149 &= ~0x4000000000000uLL;
                if (sub_22E721714(v306, 3024))
                  *v149 |= 0x4000000000000uLL;
                *(_QWORD *)(v1329 + 232) &= 0x9FFFFFFFFFFFFFFFLL;
                v517 = sub_22E6EC1FC(401, 0x1Cu, v306, v1328);
                if (HIDWORD(v517))
                  *(_QWORD *)(v1329 + 232) = *(_QWORD *)(v1329 + 232) & 0x9FFFFFFFFFFFFFFFLL | ((v517 & 3) << 61);
                *(_QWORD *)(v1329 + 208) &= ~0x100000000uLL;
                if (sub_22E721714(v306, 658))
                  *(_QWORD *)(v1329 + 208) |= 0x100000000uLL;
                v518 = (*(unsigned __int16 *)(v1327 + 8) | (*(unsigned __int8 *)(v1327 + 10) << 16)) & 0xFFFDFFFF;
                *(_WORD *)(v1327 + 8) = *(_WORD *)(v1327 + 8);
                *(_BYTE *)(v1327 + 10) = BYTE2(v518);
                if (sub_22E721888(v306, 0x692u, 0x50Cu))
                {
                  v519 = llvm::opt::Option::matches();
                  v520 = (*(unsigned __int16 *)(v1327 + 8) | (*(unsigned __int8 *)(v1327 + 10) << 16)) & 0xFFFDFFFF;
                  if (v519)
                    v521 = 0x20000;
                  else
                    v521 = 0;
                  *(_WORD *)(v1327 + 8) = *(_WORD *)(v1327 + 8);
                  *(_BYTE *)(v1327 + 10) = (v520 | v521) >> 16;
                }
                *(_QWORD *)(v1329 + 124) &= ~4uLL;
                v522 = sub_22E721714(v306, 574);
                v523 = *(_QWORD *)(v1329 + 124);
                if (v522)
                  v523 |= 4uLL;
                *(_QWORD *)(v1329 + 116) &= ~0x2000000000000000uLL;
                *(_QWORD *)(v1329 + 124) = v523;
                v524 = sub_22E721714(v306, 484);
                v525 = *(_QWORD *)(v1329 + 116);
                if (v524)
                  v525 |= 0x2000000000000000uLL;
                *(_QWORD *)(v1329 + 124) &= ~0x400000uLL;
                *(_QWORD *)(v1329 + 116) = v525;
                v526 = sub_22E721714(v306, 866);
                v527 = *(_QWORD *)(v1329 + 124);
                if (v526)
                  v527 |= 0x400000uLL;
                *(_QWORD *)(v1329 + 116) &= ~0x200000000uLL;
                *(_QWORD *)(v1329 + 124) = v527;
                v528 = sub_22E721714(v306, 759);
                v529 = *(_QWORD *)(v1329 + 116);
                if (v528)
                  v529 |= 0x200000000uLL;
                *(_QWORD *)(v1329 + 124) &= ~0x10000000uLL;
                *(_QWORD *)(v1329 + 116) = v529;
                v530 = sub_22E721714(v306, 922);
                v531 = *(_QWORD *)(v1329 + 124);
                if (v530)
                  v531 |= 0x10000000uLL;
                *(_QWORD *)(v1329 + 132) &= ~0x100uLL;
                *(_QWORD *)(v1329 + 124) = v531;
                v532 = sub_22E721714(v306, 1720);
                v533 = *(_QWORD *)(v1329 + 132);
                if (v532)
                  v533 |= 0x100uLL;
                *(_QWORD *)(v1329 + 132) = v533 & 0xFFFFFFF7FFFFFFFFLL;
                if (sub_22E721714(v306, 665))
                  *(_QWORD *)(v1329 + 132) |= 0x800000000uLL;
                *(_QWORD *)(v1329 + 232) &= ~0x400000000uLL;
                if (sub_22E721714(v306, 818))
                  *(_QWORD *)(v1329 + 232) |= 0x400000000uLL;
                *(_QWORD *)(v1329 + 124) &= ~0x8000000uLL;
                v534 = sub_22E721714(v306, 919);
                v535 = *(_QWORD *)(v1329 + 124);
                if (v534)
                  v535 |= 0x8000000uLL;
                *(_QWORD *)(v1329 + 124) = v535 & 0xFFFFFFFFDFFFFFFFLL;
                if (sub_22E721714(v306, 923))
                  *(_QWORD *)(v1329 + 124) |= 0x20000000uLL;
                *(_QWORD *)(v1329 + 64) &= ~0x400000000uLL;
                if (sub_22E721714(v306, 1440))
                  *(_QWORD *)(v1329 + 64) |= 0x400000000uLL;
                *(_QWORD *)(v1329 + 132) &= ~4uLL;
                v536 = sub_22E721714(v306, 1752);
                v537 = *(_QWORD *)(v1329 + 124);
                v538 = *(_QWORD *)(v1329 + 116);
                v539 = *(_QWORD *)(v1329 + 108);
                v540 = *(_QWORD *)(v1329 + 132);
                if (v536)
                  v540 |= 4uLL;
                *(_QWORD *)(v1329 + 132) = v540 & 0xFFFFFFFEFFFFFFFFLL;
                if ((*(_DWORD *)(v1329 + 52) & 0x40000000) != 0)
                {
                  v542 = sub_22E721714(v306, 415);
                  v537 = *(_QWORD *)(v1329 + 124);
                  v538 = *(_QWORD *)(v1329 + 116);
                  v539 = *(_QWORD *)(v1329 + 108);
                  v543 = *(_QWORD *)(v1329 + 132);
                  if (v542)
                    v543 |= 0x100000000uLL;
                  v544 = *(_DWORD *)(v1329 + 52);
                  v541 = v543 & 0xFFFFFFFDFFFFFFFFLL;
                  *(_QWORD *)(v1329 + 132) = v541;
                  if ((v544 & 0x40000000) != 0)
                  {
                    v550 = sub_22E721714(v306, 413);
                    v551 = *(_QWORD *)(v1329 + 132);
                    if (v550)
                      v551 |= 0x200000000uLL;
                    v552 = *(_DWORD *)(v1329 + 52);
                    *(_QWORD *)(v1329 + 132) = v551 & 0xFFFFFFFBFFFFFFFFLL;
                    if ((v552 & 0x40000000) == 0 || !sub_22E721714(v306, 414))
                    {
LABEL_1089:
                      v546 = *(_QWORD *)(v1329 + 200);
                      v547 = v546 & 0xFFFFFFFDFFFFFFFFLL;
                      *(_QWORD *)(v1329 + 200) = v546 & 0xFFFFFFFDFFFFFFFFLL;
                      if ((v546 & 0x100000000) != 0)
                      {
                        if (sub_22E721888(v306, 0x5D5u, 0x49Bu))
                        {
                          v548 = llvm::opt::Option::matches();
                          v549 = 0x200000000;
                          if (!v548)
                            v549 = 0;
                          v547 = *(_QWORD *)(v1329 + 200) & 0xFFFFFFFDFFFFFFFFLL | v549;
                        }
                        else
                        {
                          v547 = *(_QWORD *)(v1329 + 200);
                        }
                      }
                      *(_QWORD *)(v1329 + 200) = v547 & 0xFFFFFFFDFFFFFFFFLL;
                      if ((v547 & 0x100000000) != 0 && sub_22E721888(v306, 0x49Bu, 0x5D5u))
                      {
                        v553 = llvm::opt::Option::matches();
                        v554 = 0x200000000;
                        if (v553)
                          v554 = 0;
                        *(_QWORD *)(v1329 + 200) = *(_QWORD *)(v1329 + 200) & 0xFFFFFFFDFFFFFFFFLL | v554;
                      }
                      *v149 &= ~0x100000000000000uLL;
                      if (sub_22E721714(v306, 1117))
                        *v149 |= 0x100000000000000uLL;
                      *(_QWORD *)v1327 &= ~0x10000000000uLL;
                      if (sub_22E721714(v306, 624))
                        *(_QWORD *)v1327 |= 0x10000000000uLL;
                      *(_DWORD *)(v1329 + 52) = *(_DWORD *)(v1329 + 52) & 0xFFFDFFFF | (((*(_DWORD *)(v1329 + 52) >> 12) & 1) << 17);
                      v555 = sub_22E721714(v306, 2186);
                      v556 = *(_DWORD *)(v1329 + 52);
                      if (v555)
                        v556 |= 0x20000u;
                      *(_DWORD *)(v1329 + 52) = v556 & 0xFFFEFFFF | (((v556 >> 12) & 1) << 16);
                      v557 = sub_22E721714(v306, 2187);
                      v558 = *(_DWORD *)(v1329 + 52);
                      if (v557)
                        v558 |= 0x10000u;
                      *(_DWORD *)(v1329 + 52) = v558 & 0xFFFF7FFF | (((v558 >> 13) & 1) << 15);
                      v559 = sub_22E721714(v306, 2574);
                      v560 = *(_DWORD *)(v1329 + 52);
                      if (v559)
                        v560 |= 0x8000u;
                      *(_DWORD *)(v1329 + 52) = v560 & 0xFFFFFFFE;
                      if (sub_22E721714(v306, 2086))
                        *(_DWORD *)(v1329 + 52) |= 1u;
                      *(_QWORD *)(v1329 + 208) &= ~0x1000000000uLL;
                      if (sub_22E721714(v306, 2141))
                        *(_QWORD *)(v1329 + 208) |= 0x1000000000uLL;
                      *v149 |= 0x800000000000000uLL;
                      if (sub_22E721714(v306, 1026))
                        *v149 &= ~0x800000000000000uLL;
                      *v156 |= 0x80000000000000uLL;
                      if (sub_22E721714(v306, 1129))
                        *v156 &= ~0x80000000000000uLL;
                      v561 = (void **)(v1329 + 520);
                      memset(v1355, 0, sizeof(v1355));
                      sub_22E618148(v1355, *(_QWORD *)(v1329 + 520), *(_QWORD *)(v1329 + 528), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1329 + 528) - *(_QWORD *)(v1329 + 520)) >> 3));
                      memset(v1354, 0, sizeof(v1354));
                      v1433 = 0;
                      __dst[0] = 0;
                      __dst[1] = 0;
                      sub_22E63B344((void **)(v1329 + 520));
                      *(_OWORD *)(v1329 + 520) = *(_OWORD *)__dst;
                      *(_QWORD *)(v1329 + 536) = v1433;
                      v1433 = 0;
                      __dst[1] = 0;
                      __dst[0] = 0;
                      __p[0] = __dst;
                      sub_22E3B3CC8((void ***)__p);
                      __p[0] = v1354;
                      sub_22E3B3CC8((void ***)__p);
                      __p[0] = v1355;
                      sub_22E3B3CC8((void ***)__p);
                      llvm::opt::ArgList::getAllArgValues();
                      *(_OWORD *)__dst = *(_OWORD *)__p;
                      v1433 = __p[2];
                      memset(__p, 0, sizeof(__p));
                      LOBYTE(v1434) = 1;
                      v1336 = __p;
                      sub_22E3B3CC8(&v1336);
                      if ((_BYTE)v1434)
                      {
                        memset(v1353, 0, sizeof(v1353));
                        sub_22E618148(v1353, *(_QWORD *)(v1329 + 520), *(_QWORD *)(v1329 + 528), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1329 + 528) - *(_QWORD *)(v1329 + 520)) >> 3));
                        v1350 = 0;
                        v1351 = 0;
                        v1352 = 0;
                        sub_22E618148(&v1350, (uint64_t)__dst[0], (uint64_t)__dst[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__dst[1] - (char *)__dst[0]) >> 3));
                        memset(__p, 0, sizeof(__p));
                        sub_22E618148(__p, v1350, v1351, 0xAAAAAAAAAAAAAAABLL * ((v1351 - v1350) >> 3));
                        sub_22E63B344(v561);
                        *(_OWORD *)v561 = *(_OWORD *)__p;
                        *(void **)(v1329 + 536) = __p[2];
                        memset(__p, 0, sizeof(__p));
                        v1336 = __p;
                        sub_22E3B3CC8(&v1336);
                        v1336 = (void **)&v1350;
                        sub_22E3B3CC8(&v1336);
                        v1336 = (void **)v1353;
                        v306 = v1326;
                        sub_22E3B3CC8(&v1336);
                        if ((_BYTE)v1434)
                        {
                          __p[0] = __dst;
                          sub_22E3B3CC8((void ***)__p);
                        }
                      }
                      *v156 = *v156 & 0xFDFFFFFFFFFFFFFFLL | ((unint64_t)((*v156 & 0xC00000000000) != 0) << 57);
                      if (sub_22E721888(v306, 0x37Eu, 0x46Bu))
                      {
                        v562 = llvm::opt::Option::matches();
                        v563 = *(_BYTE *)(v1329 + 28);
                        v564 = 0x200000000000000;
                        if (!v562)
                          v564 = 0;
                        v565 = *v156 & 0xFDFFFFFFFFFFFFFFLL | v564;
                      }
                      else
                      {
                        v565 = *v156;
                        v563 = *(_BYTE *)(v1329 + 28);
                      }
                      *(_BYTE *)(v1329 + 28) = v563;
                      *v156 = v565 & 0xFDFFFFFFFFFFFFFFLL | ((unint64_t)((v565 & 0xC00000000000) != 0) << 57);
                      if (sub_22E721888(v306, 0x46Bu, 0x37Eu))
                      {
                        v566 = llvm::opt::Option::matches();
                        v567 = 0x200000000000000;
                        if (v566)
                          v567 = 0;
                        *v156 = *v156 & 0xFDFFFFFFFFFFFFFFLL | v567;
                      }
                      *(_QWORD *)v1327 &= ~0x200000000uLL;
                      v568 = sub_22E721714(v306, 884);
                      v569 = *(_QWORD *)v1327;
                      if (v568)
                        v569 = *(_QWORD *)v1327 | 0x200000000;
                      *(_QWORD *)v1327 = v569 & 0xFFFFFFFBFFFFFFFFLL;
                      if (sub_22E721714(v306, 885))
                        *(_QWORD *)v1327 |= 0x400000000uLL;
                      *v156 &= ~0x400000000000000uLL;
                      v570 = sub_22E721714(v306, 891);
                      v571 = *v156;
                      if (v570)
                        v571 = *v156 | 0x400000000000000;
                      *v156 = v571 & 0xF7FFFFFFFFFFFFFFLL;
                      v572 = sub_22E721714(v306, 1435);
                      v573 = *v156;
                      if (v572)
                        v573 = *v156 | 0x800000000000000;
                      *v156 = v573 | 0x1000000000000000;
                      v574 = sub_22E721714(v306, 1154);
                      v575 = *v156;
                      if (v574)
                        v575 = *v156 & 0xCFFFFFFFFFFFFFFFLL;
                      *v156 = v575 | 0x2000000000000000;
                      v576 = sub_22E721714(v306, 1155);
                      v577 = *v156;
                      if (v576)
                        v577 = *v156 & 0x9FFFFFFFFFFFFFFFLL;
                      *v156 = v577 | 0x4000000000000000;
                      v578 = sub_22E721714(v306, 1159);
                      v579 = *v156;
                      if (v578)
                        v579 = *v156 & 0x3FFFFFFFFFFFFFFFLL;
                      *v156 = v579 | 0x8000000000000000;
                      v580 = sub_22E721714(v306, 1160);
                      v581 = *(_BYTE *)(v1329 + 28);
                      v582 = *v156;
                      if (v580)
                        v582 = *v156 & 0x7FFFFFFFFFFFFFFFLL;
                      *v156 = v582;
                      *(_BYTE *)(v1329 + 28) = v581 | 1;
                      v583 = sub_22E721714(v306, 1158);
                      v584 = *(_BYTE *)(v1329 + 28);
                      if (v583)
                        v584 &= 0xFCu;
                      *(_BYTE *)(v1329 + 28) = v584 | 2;
                      v585 = sub_22E721714(v306, 1156);
                      v586 = *(_BYTE *)(v1329 + 28);
                      if (v585)
                        v586 &= 0xF9u;
                      *(_BYTE *)(v1329 + 28) = v586 | 4;
                      if (sub_22E721714(v306, 1157))
                        *(_BYTE *)(v1329 + 28) &= ~4u;
                      *(_QWORD *)v1327 |= 0x100000000uLL;
                      if (sub_22E721714(v306, 980))
                        *(_QWORD *)v1327 &= ~0x100000000uLL;
                      *v156 |= 0x2000000000uLL;
                      if (sub_22E721888(v306, 0x4D7u, 0x635u))
                      {
                        v587 = llvm::opt::Option::matches();
                        v588 = *(_BYTE *)(v1329 + 28);
                        v589 = 0x2000000000;
                        if (v587)
                          v589 = 0;
                        v590 = *v156 & 0xFFFFFFDFFFFFFFFFLL | v589;
                      }
                      else
                      {
                        v590 = *v156;
                        v588 = *(_BYTE *)(v1329 + 28);
                      }
                      *v156 = v590 | 0x2000000000;
                      *(_BYTE *)(v1329 + 28) = v588;
                      if (sub_22E721888(v306, 0x635u, 0x4D7u))
                      {
                        v591 = llvm::opt::Option::matches();
                        v592 = *(_BYTE *)(v1329 + 28);
                        v593 = 0x2000000000;
                        if (!v591)
                          v593 = 0;
                        v594 = *v156 & 0xFFFFFFDFFFFFFFFFLL | v593;
                      }
                      else
                      {
                        v594 = *v156;
                        v592 = *(_BYTE *)(v1329 + 28);
                      }
                      *v156 = v594 | 0x4000000000;
                      *(_BYTE *)(v1329 + 28) = v592;
                      if (sub_22E721888(v306, 0x4D6u, 0x634u))
                      {
                        v595 = llvm::opt::Option::matches();
                        v596 = *(_BYTE *)(v1329 + 28);
                        v597 = 0x4000000000;
                        if (v595)
                          v597 = 0;
                        v598 = *v156 & 0xFFFFFFBFFFFFFFFFLL | v597;
                      }
                      else
                      {
                        v598 = *v156;
                        v596 = *(_BYTE *)(v1329 + 28);
                      }
                      *v156 = v598 | 0x4000000000;
                      *(_BYTE *)(v1329 + 28) = v596;
                      if (sub_22E721888(v306, 0x634u, 0x4D6u))
                      {
                        v599 = llvm::opt::Option::matches();
                        v600 = 0x4000000000;
                        if (!v599)
                          v600 = 0;
                        *v156 = *v156 & 0xFFFFFFBFFFFFFFFFLL | v600;
                      }
                      *(_QWORD *)v1327 &= ~0x2000000000uLL;
                      v601 = sub_22E721714(v306, 622);
                      v602 = *(_QWORD *)v1327;
                      if (v601)
                        v602 = *(_QWORD *)v1327 | 0x2000000000;
                      *(_QWORD *)v1327 = v602 & 0xFFFFFFBFFFFFFFFFLL;
                      v603 = sub_22E721714(v306, 620);
                      v604 = *(_QWORD *)v1327;
                      if (v603)
                        v604 = *(_QWORD *)v1327 | 0x4000000000;
                      *(_QWORD *)v1327 = v604 & 0xFFFFFF7FFFFFFFFFLL;
                      v605 = sub_22E721714(v306, 621);
                      v606 = *(_QWORD *)v1327;
                      if (v605)
                        v606 = *(_QWORD *)v1327 | 0x8000000000;
                      *(_QWORD *)v1327 = v606 & 0xFFFFFFEFFFFFFFFFLL | ((unint64_t)((v606 & 0xE000000000) != 0) << 36);
                      if (sub_22E721714(v306, 623))
                        *(_QWORD *)v1327 |= 0x1000000000uLL;
                      *v156 &= ~0x2000000000000uLL;
                      if (sub_22E721714(v306, 159))
                        *v156 |= 0x2000000000000uLL;
                      v607 = *(_QWORD *)(v1329 + 132);
                      *(_QWORD *)(v1329 + 132) = v607 & 0xFFFFFFBFFFFFFFFFLL;
                      if ((v607 & 0x2000000000) != 0 && sub_22E721714(v306, 390))
                        *(_QWORD *)(v1329 + 132) |= 0x4000000000uLL;
                      v608 = *(_WORD *)(v1327 + 8) & 0xDFFF | (*(unsigned __int8 *)(v1327 + 10) << 16);
                      *(_WORD *)(v1327 + 8) &= ~0x2000u;
                      *(_BYTE *)(v1327 + 10) = BYTE2(v608);
                      if (sub_22E721714(v306, 444))
                      {
                        v609 = *(_BYTE *)(v1327 + 10);
                        *(_WORD *)(v1327 + 8) |= 0x2000u;
                        *(_BYTE *)(v1327 + 10) = v609;
                      }
                      *v149 &= ~0x2000000000000uLL;
                      if (sub_22E721714(v306, 666))
                        *v149 |= 0x2000000000000uLL;
                      v610 = *(_QWORD *)v1329;
                      *(_QWORD *)v1329 = *(_QWORD *)v1329 & 0xFFFFFFFFFDFFFFFFLL | (((*(_QWORD *)v1329 >> 8) & 1) << 25);
                      if ((v610 & 0x100) != 0 && sub_22E721714(v306, 1385))
                        *(_QWORD *)v1329 &= ~0x2000000uLL;
                      v611 = (void **)(v1329 + 424);
                      if (*(char *)(v1329 + 447) < 0)
                      {
                        sub_22E3BB2B4(v1348, *(void **)(v1329 + 424), *(_QWORD *)(v1329 + 432));
                        v612 = *(char *)(v1329 + 447);
                        LODWORD(__dst[0]) = 0;
                        *(_DWORD *)((char *)__dst + 3) = 0;
                        if (v612 < 0)
                          operator delete(*v611);
                      }
                      else
                      {
                        *(_OWORD *)v1348 = *(_OWORD *)v611;
                        v1349 = *(_QWORD *)(v1329 + 440);
                        LODWORD(__dst[0]) = 0;
                        *(_DWORD *)((char *)__dst + 3) = 0;
                      }
                      *v611 = 0;
                      *(_QWORD *)(v1329 + 432) = 0;
                      *(_DWORD *)(v1329 + 440) = __dst[0];
                      *(_DWORD *)(v1329 + 443) = *(_DWORD *)((char *)__dst + 3);
                      *(_BYTE *)(v1329 + 447) = 0;
                      if (SHIBYTE(v1349) < 0)
                        operator delete(v1348[0]);
                      sub_22E6EC3DC((uint64_t)__dst, 504, v306);
                      if ((_BYTE)v1434)
                      {
                        if (*(char *)(v1329 + 447) < 0)
                        {
                          sub_22E3BB2B4(v1346, *(void **)(v1329 + 424), *(_QWORD *)(v1329 + 432));
                        }
                        else
                        {
                          *(_OWORD *)v1346 = *(_OWORD *)v611;
                          v1347 = *(_QWORD *)(v1329 + 440);
                        }
                        v613 = SHIBYTE(v1433);
                        if (SHIBYTE(v1433) < 0)
                        {
                          sub_22E3BB2B4(v1344, __dst[0], (unint64_t)__dst[1]);
                        }
                        else
                        {
                          *(_OWORD *)v1344 = *(_OWORD *)__dst;
                          v1345 = v1433;
                        }
                        if (SHIBYTE(v1345) < 0)
                        {
                          sub_22E3BB2B4(__p, v1344[0], (unint64_t)v1344[1]);
                        }
                        else
                        {
                          *(_OWORD *)__p = *(_OWORD *)v1344;
                          __p[2] = v1345;
                        }
                        if (*(char *)(v1329 + 447) < 0)
                          operator delete(*v611);
                        *(_OWORD *)v611 = *(_OWORD *)__p;
                        *(void **)(v1329 + 440) = __p[2];
                        HIBYTE(__p[2]) = 0;
                        LOBYTE(__p[0]) = 0;
                        if (SHIBYTE(v1345) < 0)
                          operator delete(v1344[0]);
                        if (SHIBYTE(v1347) < 0)
                        {
                          operator delete(v1346[0]);
                          if ((v613 & 0x80000000) == 0)
                            goto LABEL_1220;
                        }
                        else if ((v613 & 0x80000000) == 0)
                        {
                          goto LABEL_1220;
                        }
                        operator delete(__dst[0]);
                      }
LABEL_1220:
                      v614 = (_QWORD *)v1329;
                      *(_QWORD *)v1329 |= 0x8000uLL;
                      v615 = sub_22E721714(v306, 288);
                      v616 = *(_QWORD *)v1329;
                      if (v615)
                        v616 = *(_QWORD *)v1329 & 0xFFFFFFFFFFFE7FFFLL;
                      *(_QWORD *)v1329 = v616 & 0xFFFFFFFFFFFEFFFFLL;
                      if (sub_22E721714(v306, 642))
                        *(_QWORD *)v1329 |= 0x10000uLL;
                      *(_QWORD *)(v1329 + 192) &= 0xFFF83FFFFFFFFFFFLL;
                      v617 = sub_22E6EC038(1789, v306, v1328);
                      v618 = v1327;
                      if (HIDWORD(v617))
                        *(_QWORD *)(v1329 + 192) = *(_QWORD *)(v1329 + 192) & 0xFFF83FFFFFFFFFFFLL | ((v617 & 0x1F) << 46);
                      *(_DWORD *)(v1329 + 52) &= 0xFFFFFFF3;
                      v619 = sub_22E6EC038(2838, v306, v1328);
                      if (HIDWORD(v619))
                        v620 = *(_DWORD *)(v1329 + 52) & 0xFFFFFFE3 | (4 * (v619 & 3));
                      else
                        v620 = *(_DWORD *)(v1329 + 52);
                      *(_DWORD *)(v1329 + 52) = v620 & 0xFFFFFFEF;
                      if (sub_22E721714(v306, 2837))
                        *(_DWORD *)(v1329 + 52) |= 0x10u;
                      v621 = (*(unsigned __int16 *)(v1327 + 8) | (*(unsigned __int8 *)(v1327 + 10) << 16)) & 0xFFFBFFFF;
                      *(_WORD *)(v1327 + 8) = *(_WORD *)(v1327 + 8);
                      *(_BYTE *)(v1327 + 10) = BYTE2(v621);
                      if (sub_22E721714(v306, 775))
                      {
                        v622 = *(unsigned __int16 *)(v1327 + 8);
                        v623 = (v622 | (*(unsigned __int8 *)(v1327 + 10) << 16) | 0x40000u) >> 16;
                        *(_WORD *)(v1327 + 8) = v622;
                        *(_BYTE *)(v1327 + 10) = v623;
                      }
                      *(_BYTE *)(v1329 + 28) &= ~0x20u;
                      if (sub_22E721714(v306, 2979))
                        *(_BYTE *)(v1329 + 28) |= 0x20u;
                      v624 = *(_WORD *)(v1329 + 248) & 0xFF3F | (*(unsigned __int8 *)(v1329 + 250) << 16);
                      *(_WORD *)(v1329 + 248) &= 0xFF3Fu;
                      *(_BYTE *)(v1329 + 250) = BYTE2(v624);
                      v625 = sub_22E6EC1FC(2976, 0x2Bu, v306, v1328);
                      if (HIDWORD(v625))
                      {
                        v626 = *(_WORD *)(v1329 + 248) & 0xFF3F | (*(unsigned __int8 *)(v1329 + 250) << 16);
                        *(_WORD *)(v1329 + 248) = *(_WORD *)(v1329 + 248) & 0xFF3F | ((v625 & 3) << 6);
                        *(_BYTE *)(v1329 + 250) = BYTE2(v626);
                      }
                      *(_DWORD *)(v1329 + 244) = *(_DWORD *)(v1329 + 244) & 0xFFC7FFFF | 0x100000;
                      v627 = sub_22E6EC1FC(1834, 0x2Cu, v306, v1328);
                      v628 = *(_DWORD *)(v1329 + 244);
                      if (HIDWORD(v627))
                        v628 = *(_DWORD *)(v1329 + 244) & 0xFFC7FFFF | ((v627 & 7) << 19);
                      *(_DWORD *)(v1329 + 244) = v628 & 0xFE3FFFFF | (((v628 >> 19) & 7) << 22);
                      v629 = sub_22E6EC1FC(1785, 0x2Du, v306, v1328);
                      if (HIDWORD(v629))
                        *(_DWORD *)(v1329 + 244) = *(_DWORD *)(v1329 + 244) & 0xFE3FFFFF | ((v629 & 7) << 22);
                      v630 = *(_WORD *)(v1327 + 8) & 0x7FFF | (*(unsigned __int8 *)(v1327 + 10) << 16);
                      *(_WORD *)(v1327 + 8) &= ~0x8000u;
                      *(_BYTE *)(v1327 + 10) = BYTE2(v630);
                      if (sub_22E721714(v306, 417))
                      {
                        v631 = *(_BYTE *)(v1327 + 10);
                        *(_WORD *)(v1327 + 8) |= 0x8000u;
                        *(_BYTE *)(v1327 + 10) = v631;
                      }
                      *(_DWORD *)(v1329 + 168) = 1024;
                      v632 = sub_22E6EC038(1745, v306, v1328);
                      if (HIDWORD(v632))
                        v633 = v632 << 32;
                      else
                        v633 = *(_QWORD *)(v1329 + 164);
                      *(_QWORD *)(v1329 + 164) = v633 & 0xFFFFFFFF00000000 | 0x100;
                      v634 = sub_22E6EC038(1468, v306, v1328);
                      if (HIDWORD(v634))
                        v635 = *(_QWORD *)(v1329 + 164) & 0xFFFFFFFF00000000 | v634;
                      else
                        v635 = *(_QWORD *)(v1329 + 164);
                      *(_DWORD *)(v1329 + 172) = 512;
                      *(_QWORD *)(v1329 + 164) = v635;
                      v636 = sub_22E6EC038(508, v306, v1328);
                      if (HIDWORD(v636))
                        LODWORD(v637) = v636;
                      else
                        v637 = *(_QWORD *)(v1329 + 172);
                      *(_QWORD *)(v1329 + 172) = v637 | 0x10000000000000;
                      v638 = sub_22E6EC038(510, v306, v1328);
                      if (HIDWORD(v638))
                        *(_DWORD *)(v1329 + 176) = v638;
                      *(_DWORD *)(v1329 + 184) = 256;
                      v639 = sub_22E6EC038(450, v306, v1328);
                      if (HIDWORD(v639))
                        *(_DWORD *)(v1329 + 184) = v639;
                      *v149 &= ~0x10000000000uLL;
                      if (sub_22E721888(v306, 0x1F0u, 0x3D5u))
                      {
                        v640 = llvm::opt::Option::matches();
                        v641 = *(unsigned __int16 *)(v1329 + 16) | (*(unsigned __int8 *)(v1329 + 18) << 16);
                        v642 = 0x10000000000;
                        if (!v640)
                          v642 = 0;
                        v643 = *v149 & 0xFFFFFEFFFFFFFFFFLL | v642;
                      }
                      else
                      {
                        v641 = *(unsigned __int16 *)(v1329 + 16) | (*(unsigned __int8 *)(v1329 + 18) << 16);
                        v643 = *v149;
                      }
                      *v149 = v643 & 0xFFFFFEFFFFFFFFFFLL;
                      *(_WORD *)(v1329 + 16) = v641;
                      *(_BYTE *)(v1329 + 18) = BYTE2(v641);
                      if (sub_22E721888(v306, 0x3D5u, 0x1F0u))
                      {
                        v644 = llvm::opt::Option::matches();
                        v645 = 0x10000000000;
                        if (v644)
                          v645 = 0;
                        *v149 = *v149 & 0xFFFFFEFFFFFFFFFFLL | v645;
                      }
                      *(_QWORD *)v1327 &= ~0x8000000000000000;
                      v646 = sub_22E721714(v306, 961);
                      v647 = *(_QWORD *)v1327;
                      if (v646)
                        v647 = *(_QWORD *)v1327 | 0x8000000000000000;
                      v648 = *(_WORD *)(v1327 + 8) & 0xFDFF | (*(unsigned __int8 *)(v1327 + 10) << 16);
                      *(_QWORD *)v1327 = v647;
                      *(_WORD *)(v1327 + 8) = v648;
                      *(_BYTE *)(v1327 + 10) = BYTE2(v648);
                      if (sub_22E721714(v306, 669))
                      {
                        v649 = *(_BYTE *)(v1327 + 10);
                        *(_WORD *)(v1327 + 8) |= 0x200u;
                        *(_BYTE *)(v1327 + 10) = v649;
                      }
                      *(_DWORD *)(v1329 + 244) &= 0xFFFE7FFF;
                      v650 = sub_22E6EC1FC(378, 0x2Eu, v306, v1328);
                      if (HIDWORD(v650))
                        *(_DWORD *)(v1329 + 244) = *(_DWORD *)(v1329 + 244) & 0xFFFE7FFF | ((v650 & 3) << 15);
                      *(_QWORD *)v1327 &= ~0x10000000000000uLL;
                      v651 = sub_22E721714(v306, 1795);
                      v652 = *(_QWORD *)v1327;
                      if (v651)
                        v652 = *(_QWORD *)v1327 | 0x10000000000000;
                      *(_QWORD *)v1327 = v652 & 0xFFDFFFFFFFFFFFFFLL;
                      v653 = sub_22E721714(v306, 561);
                      v654 = *(_QWORD *)v1327;
                      if (v653)
                        v654 = *(_QWORD *)v1327 | 0x20000000000000;
                      *(_QWORD *)v1327 = v654 & 0xFFBFFFFFFFFFFFFFLL;
                      v655 = sub_22E721714(v306, 559);
                      v656 = *(_QWORD *)v1327;
                      if (v655)
                        v656 = *(_QWORD *)v1327 | 0x40000000000000;
                      *(_QWORD *)v1327 = v656 & 0xFF7FFFFFFFFFFFFFLL;
                      if (sub_22E721714(v306, 560))
                        *(_QWORD *)v1327 |= 0x80000000000000uLL;
                      *(_DWORD *)(v1329 + 52) &= ~0x200u;
                      if (sub_22E721888(v306, 0x240u, 0x3F3u))
                      {
                        v657 = llvm::opt::Option::matches();
                        v658 = *(_QWORD *)v1324;
                        v659 = 512;
                        if (!v657)
                          v659 = 0;
                        v660 = *(_DWORD *)(v1329 + 52) & 0xFFFFFDFF | v659;
                      }
                      else
                      {
                        v658 = *(_QWORD *)v1324;
                        v660 = *(_DWORD *)(v1329 + 52);
                      }
                      *(_QWORD *)v1324 = v658;
                      *(_DWORD *)(v1329 + 52) = v660 & 0xFFFFFDFF;
                      if (sub_22E721888(v306, 0x3F3u, 0x240u))
                      {
                        if (llvm::opt::Option::matches())
                          v661 = 0;
                        else
                          v661 = 512;
                        *(_DWORD *)(v1329 + 52) = *(_DWORD *)(v1329 + 52) & 0xFFFFFDFF | v661;
                      }
                      v662 = *(_WORD *)(v1329 + 248) & 0x7FFF | (*(unsigned __int8 *)(v1329 + 250) << 16);
                      *(_WORD *)(v1329 + 248) = *(_WORD *)(v1329 + 248) & 0x3FFF | 0x4000;
                      *(_BYTE *)(v1329 + 250) = BYTE2(v662);
                      v663 = sub_22E6EC038(3078, v306, v1328);
                      if (HIDWORD(v663))
                      {
                        v664 = *(_WORD *)(v1329 + 248) & 0x3FFF | (*(unsigned __int8 *)(v1329 + 250) << 16);
                        *(_WORD *)(v1329 + 248) = *(_WORD *)(v1329 + 248) & 0x3FFF | ((_WORD)v663 << 14);
                        *(_BYTE *)(v1329 + 250) = BYTE2(v664);
                      }
                      v665 = *(_QWORD *)(v1329 + 64);
                      *(_QWORD *)(v1329 + 64) = v665 & 0xFFFFFFF7FFFFFFFFLL;
                      if ((*(_DWORD *)(v1329 + 52) & 0x40000000) != 0
                        || (*(_WORD *)(v1329 + 96) & 0x20) != 0
                        || (*(_BYTE *)(v1329 + 104) & 0x20) != 0)
                      {
                        *(_QWORD *)(v1329 + 64) = v665 | 0x800000000;
                      }
                      v666 = sub_22E721714(v306, 921);
                      v667 = *(_QWORD *)(v1329 + 64);
                      if (v666)
                        v667 |= 0x800000000uLL;
                      *(_QWORD *)(v1329 + 64) = v667 & 0xFFFFFFEFFFFFFFFFLL;
                      if ((*(_DWORD *)(v1329 + 52) & 0x40000000) != 0
                        || (*(_WORD *)(v1329 + 96) & 0x20) != 0
                        || (*(_BYTE *)(v1329 + 104) & 0x20) != 0)
                      {
                        *(_QWORD *)(v1329 + 64) = v667 | 0x1000000000;
                      }
                      if (sub_22E721714(v306, 920))
                        *(_QWORD *)(v1329 + 64) |= 0x1000000000uLL;
                      *(_DWORD *)(v1329 + 240) &= 0xFFFFE3FF;
                      v668 = sub_22E6EC1FC(564, 0x2Fu, v306, v1328);
                      if (HIDWORD(v668))
                        *(_DWORD *)(v1329 + 240) = *(_DWORD *)(v1329 + 240) & 0xFFFFE3FF | ((v668 & 7) << 10);
                      *(_DWORD *)(v1329 + 52) &= 0xF0FFFFFF;
                      v669 = sub_22E6EC1FC(1837, 0x30u, v306, v1328);
                      if (HIDWORD(v669))
                        v670 = *(_DWORD *)(v1329 + 52) & 0xE0FFFFFF | ((v669 & 0xF) << 24);
                      else
                        v670 = *(_DWORD *)(v1329 + 52);
                      *(_DWORD *)(v1329 + 52) = v670 | 0x10000000;
                      if (sub_22E721888(v306, 0x515u, 0x69Eu))
                      {
                        v671 = llvm::opt::Option::matches();
                        v672 = *(_QWORD *)v1324;
                        v673 = 0x10000000;
                        if (v671)
                          v673 = 0;
                        v674 = *(_DWORD *)(v1329 + 52) & 0xEFFFFFFF | v673;
                      }
                      else
                      {
                        v672 = *(_QWORD *)v1324;
                        v674 = *(_DWORD *)(v1329 + 52);
                      }
                      *(_QWORD *)v1324 = v672;
                      *(_DWORD *)(v1329 + 52) = v674 | 0x10000000;
                      if (sub_22E721888(v306, 0x69Eu, 0x515u))
                      {
                        if (llvm::opt::Option::matches())
                          v675 = 0x10000000;
                        else
                          v675 = 0;
                        *(_DWORD *)(v1329 + 52) = *(_DWORD *)(v1329 + 52) & 0xEFFFFFFF | v675;
                      }
                      v676 = *(_WORD *)(v1327 + 8) & 0xFFBF | (*(unsigned __int8 *)(v1327 + 10) << 16);
                      *(_WORD *)(v1327 + 8) &= ~0x40u;
                      *(_BYTE *)(v1327 + 10) = BYTE2(v676);
                      if (sub_22E721714(v306, 491))
                      {
                        v677 = *(_BYTE *)(v1327 + 10);
                        *(_WORD *)(v1327 + 8) |= 0x40u;
                        *(_BYTE *)(v1327 + 10) = v677;
                      }
                      *(_QWORD *)(v1329 + 232) = (unint64_t)*(unsigned int *)(v1329 + 236) << 32;
                      v678 = sub_22E6EC038(654, v306, v1328);
                      if (HIDWORD(v678))
                        *(_DWORD *)(v1329 + 232) = v678;
                      *(_WORD *)(v1329 + 96) &= ~0x80u;
                      v679 = sub_22E721714(v306, 526);
                      v680 = *(_WORD *)(v1329 + 96);
                      if (v679)
                        v680 |= 0x80u;
                      *(_WORD *)(v1329 + 96) = v680 & 0xFEFF;
                      v681 = sub_22E721714(v306, 522);
                      v682 = *(_WORD *)(v1329 + 96);
                      if (v681)
                        v682 |= 0x100u;
                      *(_WORD *)(v1329 + 96) = v682 | 0x200;
                      if (sub_22E721714(v306, 992))
                        *(_WORD *)(v1329 + 96) &= ~0x200u;
                      *(_QWORD *)(v1329 + 100) &= ~0x400000000uLL;
                      v683 = sub_22E721714(v306, 1731);
                      v684 = *(_QWORD *)(v1329 + 100);
                      if (v683)
                        v684 |= 0x400000000uLL;
                      *(_QWORD *)(v1329 + 100) = v684 & 0xFFFFFFF7FFFFFFFFLL;
                      v685 = sub_22E721714(v306, 1732);
                      v686 = *(_QWORD *)(v1329 + 100);
                      if (v685)
                      {
                        v686 |= 0x800000000uLL;
                        *(_QWORD *)(v1329 + 100) = v686;
                      }
                      *(_DWORD *)(v1329 + 240) &= 0x9FFFFFFF;
                      if ((v686 & 0xC00000000) != 0)
                      {
                        v687 = sub_22E6EC1FC(2997, 0x31u, v306, v1328);
                        if (HIDWORD(v687))
                          *(_DWORD *)(v1329 + 240) = *(_DWORD *)(v1329 + 240) & 0x9FFFFFFF | ((v687 & 3) << 29);
                      }
                      v688 = *(_WORD *)(v1329 + 96);
                      *(_WORD *)(v1329 + 96) = v688 & 0xFBFF;
                      if ((v688 & 0x80) != 0 && sub_22E721888(v306, 0x20Bu, 0x3DEu))
                      {
                        if (llvm::opt::Option::matches())
                          v689 = 1024;
                        else
                          v689 = 0;
                        *(_WORD *)(v1329 + 96) = *(_WORD *)(v1329 + 96) & 0xFBFF | v689;
                      }
                      *(_QWORD *)(v1329 + 224) &= ~0x100000000uLL;
                      if (sub_22E721714(v306, 1729))
                        *(_QWORD *)(v1329 + 224) |= 0x100000000uLL;
                      if (sub_22E6EBFB4(v306, 882))
                        *(_QWORD *)(v1329 + 192) |= 0x2000000000uLL;
                      v690 = sub_22E6EBFB4(v306, 477);
                      if (v690)
                      {
                        v691 = *(const char ***)(v690 + 48);
                        v692 = *v691;
                        if (*v691)
                        {
                          v693 = strlen(*v691);
                          if (v693 != 6)
                          {
                            if (v693 != 4 || *(_DWORD *)v692 != 1819047270)
                              goto LABEL_1359;
                            goto LABEL_1358;
                          }
                          if (*(_DWORD *)v692 == 1851880034 && *((_WORD *)v692 + 2) == 26723)
                          {
LABEL_1358:
                            v695 = *(_BYTE *)(v1327 + 10);
                            *(_WORD *)(v1327 + 8) |= 0x100u;
                            *(_BYTE *)(v1327 + 10) = v695;
                          }
                        }
                      }
LABEL_1359:
                      if ((sub_22E6EBFB4(v306, 1731) || sub_22E6EBFB4(v306, 1732)) && !sub_22E6EBFB4(v306, 2997))
                        *(_DWORD *)(v1329 + 240) = *(_DWORD *)(v1329 + 240) & 0x9FFFFFFF | 0x40000000;
                      if ((*(_BYTE *)(v1329 + 1) & 0x40) == 0)
                      {
LABEL_1446:
                        if ((*v156 & 0xC00000000000) != 0 && (*v156 & 0x200000000000000) == 0)
                        {
                          *(_QWORD *)(v1328 + 312) = 0x1D700000000;
                          if (*(char *)(v1328 + 311) < 0)
                          {
                            **(_BYTE **)(v1328 + 288) = 0;
                            *(_QWORD *)(v1328 + 296) = 0;
                          }
                          else
                          {
                            *(_BYTE *)(v1328 + 288) = 0;
                            *(_BYTE *)(v1328 + 311) = 0;
                          }
                          v734 = (unsigned __int8 *)(v1328 + 320);
                          __dst[0] = (void *)(v1328 + 320);
                          __dst[1] = 0;
                          v1433 = (void *)v1328;
                          LOWORD(v1434) = 1;
                          *(_BYTE *)(v1328 + 320) = 0;
                          *(_DWORD *)(v1328 + 664) = 0;
                          v735 = *(unsigned int *)(v1328 + 776);
                          if ((_DWORD)v735)
                          {
                            v736 = *(_QWORD *)(v1328 + 768);
                            v737 = 56 * v735;
                            do
                            {
                              if (*(char *)(v736 + v737 - 9) < 0)
                                operator delete(*(void **)(v736 + v737 - 32));
                              v737 -= 56;
                            }
                            while (v737);
                            v734 = (unsigned __int8 *)__dst[0];
                            *(_DWORD *)(v1328 + 776) = 0;
                            v738 = *v156;
                            v614 = (_QWORD *)v1329;
                            if (!v734)
                            {
                              v734 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__dst[1]);
                              __dst[0] = v734;
                            }
                          }
                          else
                          {
                            *(_DWORD *)(v1328 + 776) = 0;
                            v738 = *v156;
                          }
                          v734[*v734 + 1] = 2;
                          v739 = __dst[0];
                          v740 = *(unsigned __int8 *)__dst[0];
                          *(_BYTE *)__dst[0] = v740 + 1;
                          v739[v740 + 2] = (v738 & 0x800000000000) == 0;
                          sub_22E3BB0B8((uint64_t)__dst);
                          v618 = v1327;
                        }
                        v741 = sub_22E6EBFB4(v306, 765);
                        if (v741)
                        {
                          v742 = v741;
                          v1336 = 0;
                          v1337 = 0;
                          v743 = *(const char ***)(v741 + 48);
                          if (*v743)
                            strlen(*v743);
                          v744 = llvm::VersionTuple::tryParse();
                          v745 = (int)v1336;
                          if ((uint64_t)v1336 < 0)
                            v746 = HIDWORD(v1336) & 0x7FFFFFFF;
                          else
                            v746 = 0;
                          if ((int)v1337 < 0)
                            v747 = v1337 & 0x7FFFFFFF;
                          else
                            v747 = 0;
                          if ((v744 & 1) != 0
                            || ((unint64_t)v1337 & 0x8000000000000000) != 0
                            || v746 > 0x63
                            || v747 >= 0x64)
                          {
                            *(_QWORD *)(v1328 + 312) = 0x18800000000;
                            if (*(char *)(v1328 + 311) < 0)
                            {
                              **(_BYTE **)(v1328 + 288) = 0;
                              *(_QWORD *)(v1328 + 296) = 0;
                            }
                            else
                            {
                              *(_BYTE *)(v1328 + 288) = 0;
                              *(_BYTE *)(v1328 + 311) = 0;
                            }
                            __dst[0] = (void *)(v1328 + 320);
                            __dst[1] = 0;
                            v1433 = (void *)v1328;
                            LOWORD(v1434) = 1;
                            *(_BYTE *)(v1328 + 320) = 0;
                            *(_DWORD *)(v1328 + 664) = 0;
                            v748 = *(unsigned int *)(v1328 + 776);
                            if ((_DWORD)v748)
                            {
                              v749 = *(_QWORD *)(v1328 + 768);
                              v750 = 56 * v748;
                              do
                              {
                                if (*(char *)(v749 + v750 - 9) < 0)
                                  operator delete(*(void **)(v749 + v750 - 32));
                                v750 -= 56;
                              }
                              while (v750);
                            }
                            *(_DWORD *)(v1328 + 776) = 0;
                            llvm::opt::Arg::getAsString();
                            if (SHIBYTE(__p[2]) >= 0)
                              v751 = __p;
                            else
                              v751 = (void **)__p[0];
                            if (SHIBYTE(__p[2]) >= 0)
                              v752 = HIBYTE(__p[2]) & 0x7F;
                            else
                              v752 = (size_t)__p[1];
                            sub_22E3B89A8((unsigned __int8 **)__dst, v751, v752);
                            v753 = **(_QWORD **)(v742 + 48);
                            v754 = (unsigned __int8 *)__dst[0];
                            if (!__dst[0])
                            {
                              v754 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__dst[1]);
                              __dst[0] = v754;
                            }
                            v754[*v754 + 1] = 1;
                            v755 = __dst[0];
                            v756 = *(unsigned __int8 *)__dst[0];
                            *(_BYTE *)__dst[0] = v756 + 1;
                            v755[v756 + 2] = v753;
                            if (SHIBYTE(__p[2]) < 0)
                              operator delete(__p[0]);
                            sub_22E3BB0B8((uint64_t)__dst);
                          }
                          *(_DWORD *)v149 = v747 + 10000 * v745 + 100 * v746;
                          v306 = v1326;
                          v618 = v1327;
                          v614 = (_QWORD *)v1329;
                        }
                        if (*(_DWORD *)(v281 + 36) == 21 && (sub_22E6EBFB4(v306, 2242) || !sub_22E6EBFB4(v306, 1834)))
                          *(_QWORD *)v618 |= 0x800000000000uLL;
                        if (!sub_22E6EBFB4(v306, 1769))
                        {
                          if (sub_22E6EBFB4(v306, 1842))
                          {
                            v763 = v614[31] & 0xF7FF | (*((unsigned __int8 *)v614 + 250) << 16);
                            *((_WORD *)v614 + 124) = v614[31] & 0xF3FF | 0x400;
                            *((_BYTE *)v614 + 250) = BYTE2(v763);
                          }
LABEL_1512:
                          v614[24] = (unint64_t)*((unsigned int *)v614 + 49) << 32;
                          v768 = sub_22E6EBFB4(v306, 909);
                          if (v768)
                          {
                            v769 = v768;
                            v1336 = 0;
                            v1337 = 0;
                            v770 = *(const char ***)(v768 + 48);
                            if (*v770)
                              strlen(*v770);
                            if (llvm::VersionTuple::tryParse())
                            {
                              *(_QWORD *)(v311 + 312) = 0x18800000000;
                              if (*(char *)(v311 + 311) < 0)
                              {
                                **(_BYTE **)(v311 + 288) = 0;
                                *(_QWORD *)(v311 + 296) = 0;
                              }
                              else
                              {
                                *(_BYTE *)(v311 + 288) = 0;
                                *(_BYTE *)(v311 + 311) = 0;
                              }
                              __dst[0] = (void *)(v311 + 320);
                              __dst[1] = 0;
                              v1433 = (void *)v311;
                              LOWORD(v1434) = 1;
                              *(_BYTE *)(v311 + 320) = 0;
                              *(_DWORD *)(v311 + 664) = 0;
                              v771 = *(unsigned int *)(v311 + 776);
                              if ((_DWORD)v771)
                              {
                                v772 = *(_QWORD *)(v311 + 768);
                                v773 = 56 * v771;
                                do
                                {
                                  if (*(char *)(v772 + v773 - 9) < 0)
                                    operator delete(*(void **)(v772 + v773 - 32));
                                  v773 -= 56;
                                }
                                while (v773);
                              }
                              *(_DWORD *)(v311 + 776) = 0;
                              llvm::opt::Arg::getAsString();
                              if (SHIBYTE(__p[2]) >= 0)
                                v774 = __p;
                              else
                                v774 = (void **)__p[0];
                              if (SHIBYTE(__p[2]) >= 0)
                                v775 = HIBYTE(__p[2]) & 0x7F;
                              else
                                v775 = (size_t)__p[1];
                              sub_22E3B89A8((unsigned __int8 **)__dst, v774, v775);
                              v776 = **(_QWORD **)(v769 + 48);
                              v777 = (unsigned __int8 *)__dst[0];
                              if (!__dst[0])
                              {
                                v777 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__dst[1]);
                                __dst[0] = v777;
                              }
                              v777[*v777 + 1] = 1;
                              v778 = __dst[0];
                              v779 = *(unsigned __int8 *)__dst[0];
                              *(_BYTE *)__dst[0] = v779 + 1;
                              v778[v779 + 2] = v776;
                              v614 = (_QWORD *)v1329;
                              if (SHIBYTE(__p[2]) < 0)
                                operator delete(__p[0]);
                              sub_22E3BB0B8((uint64_t)__dst);
                            }
                            v780 = 100000 * (HIDWORD(v1336) & 0x7FFFFFFF);
                            if ((uint64_t)v1336 >= 0)
                              v780 = 0;
                            if ((int)v1337 < 0)
                              v781 = v1337 & 0x7FFFFFFF;
                            else
                              v781 = 0;
                            *((_DWORD *)v614 + 48) = v781 + 10000000 * (_DWORD)v1336 + v780;
                          }
                          if ((*v614 & 0x80000810) == 0 || *(_DWORD *)(v281 + 36) == 16)
                            v783 = 0x100000;
                          else
                            v783 = 0;
                          *v614 = v783 | *v614 & 0xFFFFFFFFFFEFFFFFLL;
                          if (llvm::opt::ArgList::hasFlag())
                            v784 = 0x100000;
                          else
                            v784 = 0;
                          *v614 = *v614 & 0xFFFFFFFFFFEFFFFFLL | v784;
                          if (sub_22E6EBFB4(v306, 445))
                          {
                            v785 = *v156;
                            v786 = *(_BYTE *)(v1329 + 28);
                            v787 = v1329 + 44;
                          }
                          else
                          {
                            v787 = v1329 + 44;
                            if ((*(_DWORD *)(v1329 + 52) & 0x40000000) == 0)
                            {
                              v788 = 0;
                              v785 = *v156;
                              v786 = *(_BYTE *)(v1329 + 28);
                              goto LABEL_1557;
                            }
                            v785 = *(_QWORD *)((char *)v614 + 20);
                            v786 = *((_BYTE *)v614 + 28);
                            if (v614[7] != 200)
                            {
                              v788 = 0;
                              goto LABEL_1557;
                            }
                          }
                          v788 = 0x20000000000;
LABEL_1557:
                          *(_QWORD *)((char *)v614 + 20) = v785 & 0xFFFFFDFFFFFFFFFFLL | v788;
                          *((_BYTE *)v614 + 28) = v786;
                          v789 = *(_QWORD *)((char *)v614 + 100);
                          if ((v789 & 0x2000000000) != 0 || (*(_DWORD *)(v787 + 8) & 0x40000000) != 0)
                            goto LABEL_1566;
                          if ((*((_BYTE *)v614 + 68) & 0x20) != 0)
                          {
                            if ((v789 & 0x400000000) != 0 || (v614[12] & 0x80) != 0)
                              goto LABEL_1566;
                          }
                          else if ((v789 & 0x400000000) != 0)
                          {
LABEL_1566:
                            v791 = *(unsigned __int16 *)(v1329 + 16) | (*(unsigned __int8 *)(v1329 + 18) << 16);
                            v792 = *v149;
                            goto LABEL_1567;
                          }
                          v790 = sub_22E6EBFB4(v306, 511);
                          v791 = *(unsigned __int16 *)(v1329 + 16) | (*(unsigned __int8 *)(v1329 + 18) << 16);
                          v792 = *v149;
                          if (!v790)
                          {
                            v793 = 0;
LABEL_1568:
                            *v149 = v792 & 0xFFFFFDFFFFFFFFFFLL | v793;
                            *(_WORD *)(v1329 + 16) = v791;
                            *(_BYTE *)(v1329 + 18) = BYTE2(v791);
                            v794 = sub_22E6EBFB4(v306, 968);
                            v795 = *(unsigned __int16 *)(v1329 + 16) | (*(unsigned __int8 *)(v1329 + 18) << 16);
                            v796 = *v149;
                            if (v794 || (v796 & 0x40000000000000) != 0 || (*(_DWORD *)(v787 + 8) & 0x40000000) != 0)
                            {
                              *v149 = v796 | 0x80000000000000;
                              *(_WORD *)(v1329 + 16) = v795;
                              *(_BYTE *)(v1329 + 18) = BYTE2(v795);
                            }
                            else
                            {
                              v797 = *(_QWORD *)((char *)v614 + 100);
                              *((_WORD *)v614 + 8) = *(_WORD *)(v1329 + 16);
                              *((_BYTE *)v614 + 18) = BYTE2(v795);
                              v614[1] = v796 & 0xFF7FFFFFFFFFFFFFLL | ((((v797 & 0x2000000000uLL) >> 37) & 1) << 55);
                              v798 = (unint64_t *)v1327;
                              if ((v797 & 0x2000000000) != 0)
                                goto LABEL_1595;
                              v799 = (char **)(v614 + 72);
                              llvm::opt::ArgList::getAllArgValues();
                              v800 = (char *)__p[0];
                              v801 = (char *)__p[1];
                              if (__p[0] != __p[1])
                              {
LABEL_1573:
                                while (1)
                                {
                                  v802 = v800[23];
                                  v803 = v802 < 0;
                                  v804 = v802 >= 0 ? v800 : *(char **)v800;
                                  v805 = v802 & 0x7F;
                                  v806 = v803 ? *((_QWORD *)v800 + 1) : v805;
                                  if (!sub_22F1C9BB8(v804, v806))
                                    break;
                                  v800 += 24;
                                  if (v800 == v801)
                                    goto LABEL_1662;
                                }
                                v807 = v801;
                                while (1)
                                {
                                  v801 = v807 - 24;
                                  if (v807 - 24 == v800)
                                    break;
                                  v808 = *(v807 - 1);
                                  v809 = v808 < 0;
                                  v811 = (char *)*((_QWORD *)v807 - 3);
                                  v810 = *((_QWORD *)v807 - 2);
                                  if (v808 >= 0)
                                    v812 = v801;
                                  else
                                    v812 = v811;
                                  v813 = v808 & 0x7F;
                                  if (v809)
                                    v814 = v810;
                                  else
                                    v814 = v813;
                                  v815 = sub_22F1C9BB8(v812, v814);
                                  v807 = v801;
                                  if (v815)
                                  {
                                    v816 = *(_OWORD *)v800;
                                    v1433 = (void *)*((_QWORD *)v800 + 2);
                                    *(_OWORD *)__dst = v816;
                                    v817 = *(_OWORD *)v801;
                                    *((_QWORD *)v800 + 2) = *((_QWORD *)v801 + 2);
                                    *(_OWORD *)v800 = v817;
                                    v800 += 24;
                                    v818 = *(_OWORD *)__dst;
                                    *((_QWORD *)v801 + 2) = v1433;
                                    *(_OWORD *)v801 = v818;
                                    if (v801 != v800)
                                      goto LABEL_1573;
                                    goto LABEL_1662;
                                  }
                                }
                              }
                              v801 = v800;
LABEL_1662:
                              v614 = (_QWORD *)v1329;
                              sub_22E724FAC(v799, *(_QWORD *)(v1329 + 584), (__int128 *)__p[0], (__int128 *)v801, 0xAAAAAAAAAAAAAAABLL * ((v801 - (char *)__p[0]) >> 3));
                              __dst[0] = __p;
                              sub_22E3B3CC8((void ***)__dst);
                            }
                            v798 = (unint64_t *)v1327;
LABEL_1595:
                            if (sub_22E6EBFB4(v306, 8))
                            {
                              if (llvm::opt::Option::matches())
                              {
                                v819 = v1329 + 44;
                                v820 = *(_DWORD *)(v1329 + 52);
                                v821 = *v1324 | 0x4000000000;
                              }
                              else if (llvm::opt::Option::matches())
                              {
                                v819 = v1329 + 44;
                                v820 = *(_DWORD *)(v1329 + 52);
                                v821 = *v1324 | 0x5000000000;
                              }
                              else
                              {
                                v822 = llvm::opt::Option::matches();
                                v819 = v1329 + 44;
                                v820 = *(_DWORD *)(v1329 + 52);
                                v821 = *v1324;
                                if (v822)
                                  v821 |= 0x8000000000uLL;
                              }
                              *(_QWORD *)v819 = v821;
                              *(_DWORD *)(v819 + 8) = v820;
                            }
                            if ((*v798 & 0x400000000000000) != 0)
                              *((_DWORD *)v614 + 61) = *((_DWORD *)v614 + 61) & 0xFFFFFFF3 | 8;
                            v823 = v614[65];
                            v824 = (const void **)v614[66];
                            v825 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v824 - v823) >> 3));
                            if (v824 == (const void **)v823)
                              v826 = 0;
                            else
                              v826 = v825;
                            sub_22E63C10C(v823, v824, (uint64_t)__dst, v826, 1);
                            v827 = sub_22E6EBFB4(v306, 1749);
                            if (v827)
                            {
                              v828 = *(const char ***)(v827 + 48);
                              v829 = (char *)*v828;
                              if (!*v828)
                              {
                                v831 = 0;
                                goto LABEL_1631;
                              }
                              v830 = strlen(*v828);
                              if (v830 != 3)
                              {
                                v831 = v830;
                                if (v830 == 6)
                                {
                                  if (*(_DWORD *)v829 == 1769234798 && *((_WORD *)v829 + 2) == 25974)
                                  {
                                    *((_DWORD *)v614 + 61) &= 0xFFFFFFFC;
LABEL_1648:
                                    v281 = (uint64_t)v1325;
                                    goto LABEL_1649;
                                  }
                                  v831 = 6;
                                }
LABEL_1631:
                                *(_QWORD *)(v311 + 312) = 0x18800000000;
                                if (*(char *)(v311 + 311) < 0)
                                {
                                  **(_BYTE **)(v311 + 288) = 0;
                                  *(_QWORD *)(v311 + 296) = 0;
                                }
                                else
                                {
                                  *(_BYTE *)(v311 + 288) = 0;
                                  *(_BYTE *)(v311 + 311) = 0;
                                }
                                __dst[0] = (void *)(v311 + 320);
                                __dst[1] = 0;
                                v1433 = (void *)v311;
                                LOWORD(v1434) = 1;
                                *(_BYTE *)(v311 + 320) = 0;
                                *(_DWORD *)(v311 + 664) = 0;
                                v835 = *(unsigned int *)(v311 + 776);
                                if ((_DWORD)v835)
                                {
                                  v836 = *(_QWORD *)(v311 + 768);
                                  v837 = 56 * v835;
                                  do
                                  {
                                    if (*(char *)(v836 + v837 - 9) < 0)
                                      operator delete(*(void **)(v836 + v837 - 32));
                                    v837 -= 56;
                                  }
                                  while (v837);
                                }
                                *(_DWORD *)(v311 + 776) = 0;
                                llvm::opt::Arg::getAsString();
                                if (SHIBYTE(__p[2]) >= 0)
                                  v838 = __p;
                                else
                                  v838 = (void **)__p[0];
                                if (SHIBYTE(__p[2]) >= 0)
                                  v839 = HIBYTE(__p[2]) & 0x7F;
                                else
                                  v839 = (size_t)__p[1];
                                sub_22E3B89A8((unsigned __int8 **)__dst, v838, v839);
                                sub_22E3B89A8((unsigned __int8 **)__dst, v829, v831);
                                if (SHIBYTE(__p[2]) < 0)
                                  operator delete(__p[0]);
                                sub_22E3BB0B8((uint64_t)__dst);
                                v614 = (_QWORD *)v1329;
                                v798 = (unint64_t *)v1327;
                                goto LABEL_1648;
                              }
                              v833 = *(_WORD *)v829 == 29810 && v829[2] == 101;
                              v281 = (uint64_t)v1325;
                              if (v833 && (*((_BYTE *)v614 + 132) & 1) != 0)
                              {
                                v1034 = *((_DWORD *)v614 + 61) & 0xFFFFFFFC | 1;
                              }
                              else
                              {
                                v834 = *(_WORD *)v829 == 29810 && v829[2] == 122;
                                if (!v834 || (*((_BYTE *)v614 + 132) & 2) == 0)
                                {
                                  v831 = 3;
                                  goto LABEL_1631;
                                }
                                v1034 = *((_DWORD *)v614 + 61) & 0xFFFFFFFC | 2;
                              }
                              *((_DWORD *)v614 + 61) = v1034;
                            }
LABEL_1649:
                            *(_QWORD *)((char *)v614 + 116) = *(_QWORD *)((char *)v614 + 116) & 0xFFFBFFFFFFFFFFFFLL | ((unint64_t)(sub_22E6EBFB4(v306, 419) != 0) << 50);
                            *(_QWORD *)((char *)v614 + 116) = *(_QWORD *)((char *)v614 + 116) & 0xFFDFFFFFFFFFFFFFLL | ((unint64_t)(sub_22E6EBFB4(v306, 419) != 0) << 53);
                            *(_QWORD *)((char *)v614 + 116) = *(_QWORD *)((char *)v614 + 116) & 0xFFBFFFFFFFFFFFFFLL | ((unint64_t)(sub_22E6EBFB4(v306, 419) != 0) << 54);
                            *(_QWORD *)((char *)v614 + 116) = *(_QWORD *)((char *)v614 + 116) & 0xFF7FFFFFFFFFFFFFLL | ((unint64_t)(sub_22E6EBFB4(v306, 419) != 0) << 55);
                            v840 = sub_22E6EBFB4(v306, 742);
                            v841 = *(_QWORD *)((char *)v614 + 124);
                            *(_QWORD *)((char *)v614 + 116) = *(_QWORD *)((char *)v614 + 116) & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)((v840 | *(_QWORD *)((char *)v614 + 116) & 0x100000000) != 0) << 32);
                            if ((v614[13] & 0x20) != 0)
                              *v798 = (*v798 & 0xFDFFFFFFFFFFFFFFLL | (((v841 >> 27) & 1) << 57)) ^ 0x200000000000000;
                            sub_22E72556C(v306, 0x29Eu, 0x363u, (uint64_t)__dst);
                            if (__dst[1] == v1436 || (v842 = (_QWORD *)*((_QWORD *)__dst[1] - 1)) == 0)
                            {
LABEL_1685:
                              v855 = sub_22E6EBFB4(v306, 2592);
                              if (!v855)
                                goto LABEL_1716;
                              v856 = v855;
                              v857 = *((_DWORD *)v614 + 60);
                              if ((v857 & 0x1C00) != 0)
                              {
                                *(_QWORD *)(v311 + 312) = 0x14500000000;
                                if (*(char *)(v311 + 311) < 0)
                                {
                                  **(_BYTE **)(v311 + 288) = 0;
                                  *(_QWORD *)(v311 + 296) = 0;
                                }
                                else
                                {
                                  *(_BYTE *)(v311 + 288) = 0;
                                  *(_BYTE *)(v311 + 311) = 0;
                                }
                                __dst[0] = (void *)(v311 + 320);
                                __dst[1] = 0;
                                v1433 = (void *)v311;
                                LOWORD(v1434) = 1;
                                *(_BYTE *)(v311 + 320) = 0;
                                *(_DWORD *)(v311 + 664) = 0;
                                v858 = *(unsigned int *)(v311 + 776);
                                if ((_DWORD)v858)
                                {
                                  v859 = *(_QWORD *)(v311 + 768);
                                  v860 = 56 * v858;
                                  do
                                  {
                                    if (*(char *)(v859 + v860 - 9) < 0)
                                      operator delete(*(void **)(v859 + v860 - 32));
                                    v860 -= 56;
                                  }
                                  while (v860);
                                }
                                *(_DWORD *)(v311 + 776) = 0;
                                sub_22E3B89A8((unsigned __int8 **)__dst, *(void **)(v856 + 24), *(_QWORD *)(v856 + 32));
                                v861 = (unsigned __int8 *)__dst[0];
                                if (!__dst[0])
                                {
                                  v861 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__dst[1]);
                                  __dst[0] = v861;
                                }
                                v861[*v861 + 1] = 1;
                                v862 = __dst[0];
                                v863 = *(unsigned __int8 *)__dst[0];
                                *(_BYTE *)__dst[0] = v863 + 1;
                                v862[v863 + 2] = "-fdefault-calling-conv";
                              }
                              else
                              {
                                if (*(_DWORD *)(v281 + 24) == 41)
                                {
                                  *((_DWORD *)v614 + 60) = v857 & 0xFFFFE3FF | 0xC00;
                                  goto LABEL_1716;
                                }
                                *(_QWORD *)(v311 + 312) = 0x14500000000;
                                if (*(char *)(v311 + 311) < 0)
                                {
                                  **(_BYTE **)(v311 + 288) = 0;
                                  *(_QWORD *)(v311 + 296) = 0;
                                }
                                else
                                {
                                  *(_BYTE *)(v311 + 288) = 0;
                                  *(_BYTE *)(v311 + 311) = 0;
                                }
                                __dst[0] = (void *)(v311 + 320);
                                __dst[1] = 0;
                                v1433 = (void *)v311;
                                LOWORD(v1434) = 1;
                                *(_BYTE *)(v311 + 320) = 0;
                                *(_DWORD *)(v311 + 664) = 0;
                                v864 = *(unsigned int *)(v311 + 776);
                                if ((_DWORD)v864)
                                {
                                  v865 = *(_QWORD *)(v311 + 768);
                                  v866 = 56 * v864;
                                  do
                                  {
                                    if (*(char *)(v865 + v866 - 9) < 0)
                                      operator delete(*(void **)(v865 + v866 - 32));
                                    v866 -= 56;
                                  }
                                  while (v866);
                                }
                                *(_DWORD *)(v311 + 776) = 0;
                                sub_22E3B89A8((unsigned __int8 **)__dst, *(void **)(v856 + 24), *(_QWORD *)(v856 + 32));
                                v867 = *(_BYTE *)(v281 + 23);
                                v868 = v867 < 0;
                                if (v867 >= 0)
                                  v869 = (void *)v281;
                                else
                                  v869 = *(void **)v281;
                                v870 = v867 & 0x7F;
                                if (v868)
                                  v871 = *(_QWORD *)(v281 + 8);
                                else
                                  v871 = v870;
                                sub_22E3B89A8((unsigned __int8 **)__dst, v869, v871);
                              }
                              sub_22E3BB0B8((uint64_t)__dst);
                              v614 = (_QWORD *)v1329;
LABEL_1716:
                              v872 = sub_22E6EBFB4(v306, 1466);
                              v873 = 50;
                              if (!v872)
                                v873 = 0;
                              *((_DWORD *)v614 + 18) = v873;
                              hasFlag = llvm::opt::ArgList::hasFlag();
                              v875 = v614[9];
                              v876 = 0x200000000;
                              if (((v614[9] == 0) & hasFlag) == 0)
                                v876 = 0;
                              v877 = v876 | v614[9] & 0xFFFFFFFDFFFFFFFFLL;
                              v614[9] = v877;
                              if (v875)
                              {
                                v878 = (unint64_t)(sub_22E6EBFB4(v306, 1405) == 0) << 34;
                                v877 = v614[9];
                              }
                              else
                              {
                                v878 = 0;
                              }
                              v879 = v877 & 0xFFFFFFFBFFFFFFFFLL | v878;
                              v614[9] = v879;
                              if ((_DWORD)v877)
                              {
                                v880 = (unint64_t)(sub_22E6EBFB4(v306, 1453) != 0) << 35;
                                v879 = v614[9];
                              }
                              else
                              {
                                v880 = 0;
                              }
                              v881 = v879 & 0xFFFFFFF7FFFFFFFFLL | v880;
                              v614[9] = v881;
                              if ((_DWORD)v879)
                              {
                                v882 = (unint64_t)(sub_22E6EBFB4(v306, 1449) != 0) << 37;
                                v881 = v614[9];
                              }
                              else
                              {
                                v882 = 0;
                              }
                              v883 = v881 & 0xFFFFFFDFFFFFFFFFLL | v882;
                              v614[9] = v883;
                              if ((v881 & 0x800000000) != 0)
                              {
                                v884 = 1;
                              }
                              else
                              {
                                v884 = sub_22E6EBFB4(v306, 1462) != 0;
                                v883 = v614[9];
                              }
                              v885 = v883 & 0x800000000;
                              *v149 = *v149 & 0xFFFFFDFFFFFFFFFFLL | ((unint64_t)((v883 & 0x800000000 | *v149 & 0x20000000000) != 0) << 41);
                              if ((v883 & 0x2FFFFFFFFLL) != 0)
                              {
                                if (hasFlag | v884)
                                  v886 = 50;
                                else
                                  v886 = v883;
                                v887 = sub_22E80ACDC(v306, 1464, v886, v311);
                                v888 = v614[9];
                                if (v887)
                                {
                                  v888 = v888 & 0xFFFFFFFF00000000 | v887;
                                  v614[9] = v888;
                                }
                                if ((v888 & 0x800000000) != 0)
                                  goto LABEL_1756;
                                if ((*(_DWORD *)(v281 + 24) & 0xFFFFFFFE) != 0x2C)
                                {
LABEL_1766:
                                  if ((*((_BYTE *)v614 + 60) & 1) != 0)
                                    *v149 &= 0xFFFFAFFFFFFFFFFFLL;
LABEL_1768:
                                  if ((*((_BYTE *)v614 + 76) & 8) != 0)
                                  {
                                    if (sub_22E6EBFB4(v306, 1442))
                                      *((_WORD *)v614 + 48) |= 4u;
                                    if (sub_22E6EBFB4(v306, 1443))
                                      *((_WORD *)v614 + 48) |= 2u;
                                  }
                                  v903 = sub_22E6EBFB4(v306, 1462);
                                  if (v903)
                                  {
                                    v904 = v903;
                                    if (*(_DWORD *)(v903 + 56))
                                    {
                                      v905 = 0;
                                      v906 = (unsigned __int8 *)(v311 + 320);
                                      v1321 = v614 + 80;
                                      v1323 = (unsigned __int8 *)(v311 + 320);
                                      do
                                      {
                                        v907 = *(_BYTE **)(*(_QWORD *)(v904 + 48) + 8 * v905);
                                        LOWORD(v1430) = 257;
                                        if (*v907)
                                        {
                                          __p[0] = v907;
                                          v908 = 3;
                                        }
                                        else
                                        {
                                          v908 = 1;
                                        }
                                        LOBYTE(v1430) = v908;
                                        MEMORY[0x23489F1BC](__dst, __p);
                                        if (v1434 > 0x2D || ((1 << v1434) & 0x360041E00008) == 0)
                                        {
                                          *(_QWORD *)(v311 + 312) = 0x17C00000000;
                                          if (*(char *)(v311 + 311) < 0)
                                          {
                                            **(_BYTE **)(v311 + 288) = 0;
                                            *(_QWORD *)(v311 + 296) = 0;
                                          }
                                          else
                                          {
                                            *(_BYTE *)(v311 + 288) = 0;
                                            *(_BYTE *)(v311 + 311) = 0;
                                          }
                                          __p[0] = v906;
                                          __p[1] = 0;
                                          __p[2] = (void *)v311;
                                          LOWORD(v1429) = 1;
                                          *(_BYTE *)(v311 + 320) = 0;
                                          *(_DWORD *)(v311 + 664) = 0;
                                          v943 = *(unsigned int *)(v311 + 776);
                                          if ((_DWORD)v943)
                                          {
                                            v944 = *(_QWORD *)(v311 + 768);
                                            v945 = 56 * v943;
                                            do
                                            {
                                              if (*(char *)(v944 + v945 - 9) < 0)
                                                operator delete(*(void **)(v944 + v945 - 32));
                                              v945 -= 56;
                                            }
                                            while (v945);
                                            v946 = (unsigned __int8 *)__p[0];
                                            *(_DWORD *)(v311 + 776) = 0;
                                            v947 = *(_QWORD *)(*(_QWORD *)(v904 + 48) + 8 * v905);
                                            v614 = (_QWORD *)v1329;
                                            if (!v946)
                                            {
                                              v946 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__p[1]);
                                              __p[0] = v946;
                                            }
                                          }
                                          else
                                          {
                                            *(_DWORD *)(v311 + 776) = 0;
                                            v947 = *(_QWORD *)(*(_QWORD *)(v904 + 48) + 8 * v905);
                                            v946 = v906;
                                          }
                                          v946[*v946 + 1] = 1;
                                          v948 = __p[0];
                                          v949 = *(unsigned __int8 *)__p[0];
                                          *(_BYTE *)__p[0] = v949 + 1;
                                          v948[v949 + 2] = v947;
                                        }
                                        else
                                        {
                                          if ((llvm::Triple::isArch16Bit((llvm::Triple *)v281) & 1) != 0)
                                          {
                                            v910 = 0;
                                          }
                                          else if (llvm::Triple::isArch32Bit((llvm::Triple *)v281))
                                          {
                                            v910 = 1;
                                          }
                                          else
                                          {
                                            v910 = 2;
                                          }
                                          if ((llvm::Triple::isArch16Bit((llvm::Triple *)__dst) & 1) != 0)
                                          {
                                            v911 = 0;
                                          }
                                          else if (llvm::Triple::isArch32Bit((llvm::Triple *)__dst))
                                          {
                                            v911 = 1;
                                          }
                                          else
                                          {
                                            v911 = 2;
                                          }
                                          if (v910 == v911)
                                          {
                                            v912 = v614[79];
                                            v913 = v614[80];
                                            if (v912 >= v913)
                                            {
                                              v915 = v614[78];
                                              v916 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v912 - v915) >> 4);
                                              v917 = v916 + 1;
                                              if (v916 + 1 > 0x555555555555555)
                                                goto LABEL_2792;
                                              v918 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v913 - v915) >> 4);
                                              if (2 * v918 > v917)
                                                v917 = 2 * v918;
                                              if (v918 >= 0x2AAAAAAAAAAAAAALL)
                                                v919 = 0x555555555555555;
                                              else
                                                v919 = v917;
                                              v1430 = v1321;
                                              if (v919)
                                              {
                                                if (v919 > 0x555555555555555)
                                                  sub_22E3B3F8C();
                                                v920 = operator new(48 * v919);
                                              }
                                              else
                                              {
                                                v920 = 0;
                                              }
                                              v936 = &v920[16 * ((uint64_t)(v912 - v915) >> 4)];
                                              if (SHIBYTE(v1433) < 0)
                                              {
                                                sub_22E3BB2B4(&v920[16 * ((uint64_t)(v912 - v915) >> 4)], __dst[0], (unint64_t)__dst[1]);
                                                v912 = *(_QWORD *)(v1329 + 632);
                                                v915 = *(_QWORD *)(v1329 + 624);
                                              }
                                              else
                                              {
                                                *(_OWORD *)v936 = *(_OWORD *)__dst;
                                                *((_QWORD *)v936 + 2) = v1433;
                                              }
                                              v937 = &v920[48 * v916];
                                              *(_OWORD *)(v937 + 24) = v1434;
                                              *((_QWORD *)v937 + 5) = v1435;
                                              if (v912 == v915)
                                              {
                                                v941 = vdupq_n_s64(v915);
                                                v938 = &v920[48 * v916];
                                                v935 = (_QWORD *)v1329;
                                              }
                                              else
                                              {
                                                v938 = &v920[48 * v916];
                                                do
                                                {
                                                  v939 = *(_OWORD *)(v912 - 48);
                                                  *((_QWORD *)v938 - 4) = *(_QWORD *)(v912 - 32);
                                                  *((_OWORD *)v938 - 3) = v939;
                                                  *(_QWORD *)(v912 - 40) = 0;
                                                  *(_QWORD *)(v912 - 32) = 0;
                                                  *(_QWORD *)(v912 - 48) = 0;
                                                  v940 = *(_OWORD *)(v912 - 24);
                                                  *((_QWORD *)v938 - 1) = *(_QWORD *)(v912 - 8);
                                                  *(_OWORD *)(v938 - 24) = v940;
                                                  v938 -= 48;
                                                  v912 -= 48;
                                                }
                                                while (v912 != v915);
                                                v935 = (_QWORD *)v1329;
                                                v941 = *(int64x2_t *)(v1329 + 624);
                                              }
                                              v934 = v936 + 48;
                                              v935[78] = v938;
                                              v935[79] = v936 + 48;
                                              *(int64x2_t *)&__p[1] = v941;
                                              v942 = v935[80];
                                              v935[80] = &v920[48 * v919];
                                              v1429 = v942;
                                              __p[0] = (void *)v941.i64[0];
                                              sub_22E7256C0((uint64_t)__p);
                                              v311 = v1328;
                                              v281 = (uint64_t)v1325;
                                            }
                                            else
                                            {
                                              if (SHIBYTE(v1433) < 0)
                                              {
                                                sub_22E3BB2B4((_BYTE *)v614[79], __dst[0], (unint64_t)__dst[1]);
                                              }
                                              else
                                              {
                                                v914 = *(_OWORD *)__dst;
                                                *(_QWORD *)(v912 + 16) = v1433;
                                                *(_OWORD *)v912 = v914;
                                              }
                                              v933 = v1434;
                                              *(_QWORD *)(v912 + 40) = v1435;
                                              *(_OWORD *)(v912 + 24) = v933;
                                              v934 = (char *)(v912 + 48);
                                              v935 = (_QWORD *)v1329;
                                            }
                                            v935[79] = v934;
                                            v614 = v935;
                                            v906 = v1323;
                                            goto LABEL_1840;
                                          }
                                          *(_QWORD *)(v311 + 312) = 0x16700000000;
                                          if (*(char *)(v311 + 311) < 0)
                                          {
                                            **(_BYTE **)(v311 + 288) = 0;
                                            *(_QWORD *)(v311 + 296) = 0;
                                          }
                                          else
                                          {
                                            *(_BYTE *)(v311 + 288) = 0;
                                            *(_BYTE *)(v311 + 311) = 0;
                                          }
                                          __p[0] = v906;
                                          __p[1] = 0;
                                          __p[2] = (void *)v311;
                                          LOWORD(v1429) = 1;
                                          *(_BYTE *)(v311 + 320) = 0;
                                          *(_DWORD *)(v311 + 664) = 0;
                                          v921 = *(unsigned int *)(v311 + 776);
                                          if ((_DWORD)v921)
                                          {
                                            v922 = *(_QWORD *)(v311 + 768);
                                            v923 = 56 * v921;
                                            do
                                            {
                                              if (*(char *)(v922 + v923 - 9) < 0)
                                                operator delete(*(void **)(v922 + v923 - 32));
                                              v923 -= 56;
                                            }
                                            while (v923);
                                            v924 = (unsigned __int8 *)__p[0];
                                            *(_DWORD *)(v311 + 776) = 0;
                                            v925 = *(_QWORD *)(*(_QWORD *)(v904 + 48) + 8 * v905);
                                            v614 = (_QWORD *)v1329;
                                            if (!v924)
                                            {
                                              v924 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__p[1]);
                                              __p[0] = v924;
                                            }
                                          }
                                          else
                                          {
                                            *(_DWORD *)(v311 + 776) = 0;
                                            v925 = *(_QWORD *)(*(_QWORD *)(v904 + 48) + 8 * v905);
                                            v924 = v906;
                                          }
                                          v924[*v924 + 1] = 1;
                                          v926 = __p[0];
                                          v927 = *(unsigned __int8 *)__p[0];
                                          *(_BYTE *)__p[0] = v927 + 1;
                                          v926[v927 + 2] = v925;
                                          v928 = *(_BYTE *)(v281 + 23);
                                          v929 = v928 < 0;
                                          if (v928 >= 0)
                                            v930 = (void *)v281;
                                          else
                                            v930 = *(void **)v281;
                                          v931 = v928 & 0x7F;
                                          if (v929)
                                            v932 = *(_QWORD *)(v281 + 8);
                                          else
                                            v932 = v931;
                                          sub_22E3B89A8((unsigned __int8 **)__p, v930, v932);
                                        }
                                        sub_22E3BB0B8((uint64_t)__p);
LABEL_1840:
                                        if (SHIBYTE(v1433) < 0)
                                          operator delete(__dst[0]);
                                        ++v905;
                                      }
                                      while (v905 < *(unsigned int *)(v904 + 56));
                                    }
                                  }
                                  v950 = sub_22E6EBFB4(v1326, 1451);
                                  if (v950)
                                  {
                                    v951 = v614 + 81;
                                    MEMORY[0x2348A0C14](v614 + 81, **(_QWORD **)(v950 + 48));
                                    WORD4(v1434) = 260;
                                    __dst[0] = v614 + 81;
                                    if (llvm::sys::fs::access())
                                    {
                                      *(_QWORD *)(v311 + 312) = 0x1A700000000;
                                      if (*(char *)(v311 + 311) < 0)
                                      {
                                        **(_BYTE **)(v311 + 288) = 0;
                                        *(_QWORD *)(v311 + 296) = 0;
                                      }
                                      else
                                      {
                                        *(_BYTE *)(v311 + 288) = 0;
                                        *(_BYTE *)(v311 + 311) = 0;
                                      }
                                      __dst[0] = (void *)(v311 + 320);
                                      __dst[1] = 0;
                                      v1433 = (void *)v311;
                                      LOWORD(v1434) = 1;
                                      *(_BYTE *)(v311 + 320) = 0;
                                      *(_DWORD *)(v311 + 664) = 0;
                                      v952 = *(unsigned int *)(v311 + 776);
                                      if ((_DWORD)v952)
                                      {
                                        v953 = *(_QWORD *)(v311 + 768);
                                        v954 = 56 * v952;
                                        do
                                        {
                                          if (*(char *)(v953 + v954 - 9) < 0)
                                            operator delete(*(void **)(v953 + v954 - 32));
                                          v954 -= 56;
                                        }
                                        while (v954);
                                      }
                                      *(_DWORD *)(v311 + 776) = 0;
                                      v614 = (_QWORD *)v1329;
                                      v955 = *(_BYTE *)(v1329 + 671);
                                      v956 = v955;
                                      if (v955 >= 0)
                                        v957 = v951;
                                      else
                                        v957 = *(void **)(v1329 + 648);
                                      v958 = v955 & 0x7F;
                                      if (v956 >= 0)
                                        v959 = v958;
                                      else
                                        v959 = *(_QWORD *)(v1329 + 656);
                                      sub_22E3B89A8((unsigned __int8 **)__dst, v957, v959);
                                      sub_22E3BB0B8((uint64_t)__dst);
                                    }
                                  }
                                  v960 = v614[9];
                                  if ((v960 & 0x800000000) != 0)
                                  {
                                    v964 = *(_DWORD *)(v281 + 24);
                                    v963 = v1329 + 44;
                                    if (v964 <= 0x2D && ((1 << v964) & 0x300040000000) != 0)
                                    {
                                      v965 = sub_22E6EBFB4(v1326, 1446) != 0;
                                      v966 = v614[9];
                                      v962 = v966 & 0xFFFFFFEFFFFFFFFFLL | ((unint64_t)v965 << 36);
                                      v614[9] = v962;
                                      if ((v966 & 0x800000000) == 0)
                                      {
                                        v961 = 0;
                                        goto LABEL_1883;
                                      }
                                    }
                                    else
                                    {
                                      v962 = v960 & 0xFFFFFFEFFFFFFFFFLL;
                                      v614[9] = v962;
                                    }
                                    v961 = 0;
                                    v967 = *(_DWORD *)(v281 + 24);
                                    if (v967 <= 0x2D && ((1 << v967) & 0x300040000000) != 0)
                                    {
                                      v961 = (unint64_t)(sub_22E6EBFB4(v1326, 1445) != 0) << 38;
                                      v962 = v614[9];
                                    }
                                  }
                                  else
                                  {
                                    v961 = 0;
                                    v962 = v960 & 0xFFFFFFEFFFFFFFFFLL;
                                    v963 = v1329 + 44;
                                  }
LABEL_1883:
                                  v614[9] = v962 & 0xFFFFFFBFFFFFFFFFLL | v961;
                                  v968 = sub_22E6EBEA4(v1326, v1320, v311);
                                  *((_BYTE *)v614 + 28) = (8 * (v968 != 0)) | (16
                                                                             * (sub_22E6EC790(v1326) != 0)) | *((_BYTE *)v614 + 28) & 0xE7;
                                  *((_DWORD *)v614 + 13) = *((_DWORD *)v614 + 13) & 0xFFFFFEFF | ((v968 == 0) << 8);
                                  if (sub_22E6EC688(v1326, 0x325u, 0x326u, 0x449u, 0x44Cu)
                                    && llvm::opt::Option::matches())
                                  {
                                    *(_DWORD *)(v963 + 8) |= 0x100u;
                                  }
                                  v969 = sub_22E6EBFB4(v1326, 737);
                                  if (!v969)
                                  {
LABEL_1918:
                                    llvm::opt::ArgList::getAllArgValues();
                                    sub_22E6ED5E8((uint64_t)"-fsanitize=", 0xBuLL, (uint64_t)__dst[0], (uint64_t)__dst[1], v311, v614 + 32);
                                    __p[0] = __dst;
                                    sub_22E3B3CC8((void ***)__p);
                                    llvm::opt::ArgList::getAllArgValues();
                                    sub_22E63B344(v1322);
                                    *(_OWORD *)v1322 = *(_OWORD *)__dst;
                                    v614[37] = v1433;
                                    v1433 = 0;
                                    __dst[1] = 0;
                                    __dst[0] = 0;
                                    __p[0] = __dst;
                                    sub_22E3B3CC8((void ***)__p);
                                    llvm::opt::ArgList::getAllArgValues();
                                    sub_22E724FAC((char **)v1322, v614[36], (__int128 *)v1336, v1337, 0xAAAAAAAAAAAAAAABLL * (((char *)v1337 - (char *)v1336) >> 3));
                                    if (v1319)
                                    {
                                      v980 = (*((unsigned __int16 *)v614 + 124) | (*((unsigned __int8 *)v614 + 250) << 16)) & 0xFFF0FFFF | 0x80000;
                                      *((_WORD *)v614 + 124) = *((_WORD *)v614 + 124);
                                      *((_BYTE *)v614 + 250) = BYTE2(v980);
                                    }
                                    v981 = sub_22E6EBFB4(v1326, 485);
                                    if (!v981)
                                    {
LABEL_1976:
                                      v1010 = sub_22E6EBFB4(v1326, 2605);
                                      if (!v1010)
                                        goto LABEL_2057;
                                      v1011 = **(const char ***)(v1010 + 48);
                                      *(_QWORD *)&v1334 = v1011;
                                      if (v1011)
                                      {
                                        v1012 = strlen(v1011);
                                        *((_QWORD *)&v1334 + 1) = v1012;
                                        if (v1012 == 4)
                                        {
                                          if (!llvm::StringRef::compare_insensitive())
                                          {
                                            v1013 = v614 + 31;
                                            v1023 = (*((unsigned __int16 *)v614 + 124) | (*((unsigned __int8 *)v614 + 250) << 16)) & 0xFFCFFFFF;
                                            *((_WORD *)v614 + 124) = *((_WORD *)v614 + 124);
                                            v1024 = HIWORD(v1023);
LABEL_2018:
                                            *((_BYTE *)v1013 + 2) = v1024;
                                            goto LABEL_2019;
                                          }
                                          v1012 = *((_QWORD *)&v1334 + 1);
                                        }
                                        if (v1012 == 3)
                                        {
                                          if (!llvm::StringRef::compare_insensitive())
                                          {
                                            v1013 = v614 + 31;
                                            v1014 = (*((unsigned __int16 *)v614 + 124) | (*((unsigned __int8 *)v614 + 250) << 16)) & 0xFFCFFFFF;
                                            v1015 = v1014 | 0x200000;
                                            goto LABEL_2017;
                                          }
                                          v1012 = *((_QWORD *)&v1334 + 1);
                                        }
                                        if (v1012 == 8 && !llvm::StringRef::compare_insensitive())
                                        {
                                          v1013 = v614 + 31;
                                          LOWORD(v1014) = *((_WORD *)v614 + 124);
                                          v1015 = ((unsigned __int16)v1014 | (*((unsigned __int8 *)v614 + 250) << 16)) & 0xFFCFFFFF | 0x100000;
LABEL_2017:
                                          *(_WORD *)v1013 = v1014;
                                          v1024 = HIWORD(v1015);
                                          goto LABEL_2018;
                                        }
                                      }
                                      else
                                      {
                                        v1334 = 0uLL;
                                      }
                                      *(_QWORD *)(v311 + 312) = 0x18800000000;
                                      if (*(char *)(v311 + 311) < 0)
                                      {
                                        **(_BYTE **)(v311 + 288) = 0;
                                        *(_QWORD *)(v311 + 296) = 0;
                                      }
                                      else
                                      {
                                        *(_BYTE *)(v311 + 288) = 0;
                                        *(_BYTE *)(v311 + 311) = 0;
                                      }
                                      __dst[0] = (void *)(v311 + 320);
                                      __dst[1] = 0;
                                      v1433 = (void *)v311;
                                      LOWORD(v1434) = 1;
                                      *(_BYTE *)(v311 + 320) = 0;
                                      *(_DWORD *)(v311 + 664) = 0;
                                      v1016 = *(unsigned int *)(v311 + 776);
                                      if ((_DWORD)v1016)
                                      {
                                        v1017 = *(_QWORD *)(v311 + 768);
                                        v1018 = 56 * v1016;
                                        do
                                        {
                                          if (*(char *)(v1017 + v1018 - 9) < 0)
                                            operator delete(*(void **)(v1017 + v1018 - 32));
                                          v1018 -= 56;
                                        }
                                        while (v1018);
                                      }
                                      *(_DWORD *)(v311 + 776) = 0;
                                      llvm::opt::Arg::getAsString();
                                      if (SHIBYTE(__p[2]) >= 0)
                                        v1019 = __p;
                                      else
                                        v1019 = (void **)__p[0];
                                      if (SHIBYTE(__p[2]) >= 0)
                                        v1020 = HIBYTE(__p[2]) & 0x7F;
                                      else
                                        v1020 = (size_t)__p[1];
                                      sub_22E3B89A8((unsigned __int8 **)__dst, v1019, v1020);
                                      sub_22E3B89A8((unsigned __int8 **)__dst, (void *)v1334, *((size_t *)&v1334 + 1));
                                      if (SHIBYTE(__p[2]) < 0)
                                        operator delete(__p[0]);
                                      sub_22E3BB0B8((uint64_t)__dst);
                                      v614 = (_QWORD *)v1329;
LABEL_2019:
                                      v1025 = sub_22E6EBFB4(v1326, 2604);
                                      if (v1025)
                                      {
                                        v1026 = **(const char ***)(v1025 + 48);
                                        *(_QWORD *)&v1332 = v1026;
                                        if (v1026)
                                        {
                                          v1027 = strlen(v1026);
                                          *((_QWORD *)&v1332 + 1) = v1027;
                                          if (*((_QWORD *)&v1334 + 1))
                                          {
                                            if (v1027)
                                            {
                                              if (v1027 == 5)
                                              {
                                                if (!llvm::StringRef::compare_insensitive())
                                                {
                                                  v1035 = (*((unsigned __int16 *)v614 + 124) | (*((unsigned __int8 *)v614
                                                                                                + 250) << 16)) & 0xFFBFFFFF;
                                                  *((_WORD *)v614 + 124) = *((_WORD *)v614 + 124);
                                                  *((_BYTE *)v614 + 250) = BYTE2(v1035);
                                                  goto LABEL_2057;
                                                }
                                                v1027 = *((_QWORD *)&v1332 + 1);
                                              }
                                              if (v1027 == 5 && !llvm::StringRef::compare_insensitive())
                                              {
                                                v1036 = *((unsigned __int16 *)v614 + 124);
                                                *((_BYTE *)v614 + 250) = (v1036 | (*((unsigned __int8 *)v614 + 250) << 16) | 0x400000u) >> 16;
                                                *((_WORD *)v614 + 124) = v1036;
                                              }
                                              else
                                              {
                                                *(_QWORD *)(v311 + 312) = 0x18800000000;
                                                if (*(char *)(v311 + 311) < 0)
                                                {
                                                  **(_BYTE **)(v311 + 288) = 0;
                                                  *(_QWORD *)(v311 + 296) = 0;
                                                }
                                                else
                                                {
                                                  *(_BYTE *)(v311 + 288) = 0;
                                                  *(_BYTE *)(v311 + 311) = 0;
                                                }
                                                __dst[0] = (void *)(v311 + 320);
                                                __dst[1] = 0;
                                                v1433 = (void *)v311;
                                                LOWORD(v1434) = 1;
                                                *(_BYTE *)(v311 + 320) = 0;
                                                *(_DWORD *)(v311 + 664) = 0;
                                                v1028 = *(unsigned int *)(v311 + 776);
                                                if ((_DWORD)v1028)
                                                {
                                                  v1029 = *(_QWORD *)(v311 + 768);
                                                  v1030 = 56 * v1028;
                                                  do
                                                  {
                                                    if (*(char *)(v1029 + v1030 - 9) < 0)
                                                      operator delete(*(void **)(v1029 + v1030 - 32));
                                                    v1030 -= 56;
                                                  }
                                                  while (v1030);
                                                }
                                                *(_DWORD *)(v311 + 776) = 0;
                                                llvm::opt::Arg::getAsString();
                                                if (SHIBYTE(__p[2]) >= 0)
                                                  v1031 = __p;
                                                else
                                                  v1031 = (void **)__p[0];
                                                if (SHIBYTE(__p[2]) >= 0)
                                                  v1032 = HIBYTE(__p[2]) & 0x7F;
                                                else
                                                  v1032 = (size_t)__p[1];
                                                sub_22E3B89A8((unsigned __int8 **)__dst, v1031, v1032);
                                                sub_22E3B89A8((unsigned __int8 **)__dst, (void *)v1332, *((size_t *)&v1332 + 1));
                                                if (SHIBYTE(__p[2]) < 0)
                                                  operator delete(__p[0]);
                                                sub_22E3BB0B8((uint64_t)__dst);
                                                v614 = (_QWORD *)v1329;
                                              }
                                            }
                                          }
                                        }
                                      }
LABEL_2057:
                                      v1037 = llvm::opt::ArgList::getLastArgValue();
                                      if (!v1038)
                                        goto LABEL_2058;
                                      v1290 = (void *)v1037;
                                      v1291 = v1038;
                                      sub_22F2A9524();
                                      Key = llvm::StringMapImpl::FindKey();
                                      v1293 = dword_253E4BD00;
                                      if (Key != -1)
                                        v1293 = Key;
                                      v1294 = qword_253E4BCF8 + 8 * v1293;
                                      sub_22F2A9524();
                                      if (v1294 == qword_253E4BCF8 + 8 * dword_253E4BD00)
                                      {
                                        *(_QWORD *)(v311 + 312) = 0x1D400000000;
                                        if (*(char *)(v311 + 311) < 0)
                                        {
                                          **(_BYTE **)(v311 + 288) = 0;
                                          *(_QWORD *)(v311 + 296) = 0;
                                        }
                                        else
                                        {
                                          *(_BYTE *)(v311 + 288) = 0;
                                          *(_BYTE *)(v311 + 311) = 0;
                                        }
                                        __dst[0] = (void *)(v311 + 320);
                                        __dst[1] = 0;
                                        v1433 = (void *)v311;
                                        LOWORD(v1434) = 1;
                                        *(_BYTE *)(v311 + 320) = 0;
                                        *(_DWORD *)(v311 + 664) = 0;
                                        v1296 = *(unsigned int *)(v311 + 776);
                                        if ((_DWORD)v1296)
                                        {
                                          v1297 = *(_QWORD *)(v311 + 768);
                                          v1298 = 56 * v1296;
                                          do
                                          {
                                            if (*(char *)(v1297 + v1298 - 9) < 0)
                                              operator delete(*(void **)(v1297 + v1298 - 32));
                                            v1298 -= 56;
                                          }
                                          while (v1298);
                                        }
                                        *(_DWORD *)(v311 + 776) = 0;
                                        v1299 = v1290;
                                        v1300 = v1291;
                                      }
                                      else
                                      {
                                        v1311 = sub_22F2A8BC8();
                                        if ((sub_22F2A8C38(v281, v1311) & 1) != 0)
                                        {
                                          v1312 = *((unsigned __int8 *)v614 + 700);
                                          *((_DWORD *)v614 + 174) = v1311;
                                          if (!v1312)
                                            *((_BYTE *)v614 + 700) = 1;
LABEL_2058:
                                          v1039 = llvm::opt::ArgList::hasFlag();
                                          v1040 = 0x4000000000;
                                          if (!v1039)
                                            v1040 = 0;
                                          v614[26] = v614[26] & 0xFFFFFFBFFFFFFFFFLL | v1040;
                                          llvm::opt::ArgList::getAllArgValues();
                                          v1041 = (char *)__p[0];
                                          v1042 = (char *)__p[1];
                                          if (__p[0] != __p[1])
                                          {
                                            v1043 = (_QWORD **)(v1329 + 600);
                                            while (1)
                                            {
                                              v1044 = v1041[23];
                                              v1045 = v1044 < 0;
                                              if (v1044 >= 0)
                                                v1046 = v1041;
                                              else
                                                v1046 = *(void **)v1041;
                                              __dst[0] = v1046;
                                              v1047 = (void *)(v1044 & 0x7F);
                                              if (v1045)
                                                v1047 = (void *)*((_QWORD *)v1041 + 1);
                                              __dst[1] = v1047;
                                              LOBYTE(v1334) = 61;
                                              v1048 = llvm::StringRef::find();
                                              if (v1048 == -1)
                                              {
                                                v1052 = 0;
                                                v1053 = 0;
                                                v1049 = __dst[0];
                                                v1050 = (size_t)__dst[1];
                                              }
                                              else
                                              {
                                                v1049 = __dst[0];
                                                if (__dst[1] >= (void *)v1048)
                                                  v1050 = v1048;
                                                else
                                                  v1050 = (size_t)__dst[1];
                                                if (__dst[1] >= (void *)(v1048 + 1))
                                                  v1051 = (void *)(v1048 + 1);
                                                else
                                                  v1051 = __dst[1];
                                                v1052 = (char *)__dst[0] + (unint64_t)v1051;
                                                v1053 = (char *)__dst[1] - (char *)v1051;
                                              }
                                              if (v1050 > 0x7FFFFFFFFFFFFFF7)
                                                goto LABEL_2792;
                                              if (v1050 >= 0x17)
                                                break;
                                              HIBYTE(v1335) = v1050;
                                              v1054 = &v1334;
                                              if (v1050)
                                                goto LABEL_2083;
LABEL_2084:
                                              *((_BYTE *)v1054 + v1050) = 0;
                                              if (v1053 > 0x7FFFFFFFFFFFFFF7)
                                                goto LABEL_2792;
                                              if (v1053 >= 0x17)
                                              {
                                                v1059 = (v1053 & 0xFFFFFFFFFFFFFFF8) + 8;
                                                if ((v1053 | 7) != 0x17)
                                                  v1059 = v1053 | 7;
                                                v1060 = v1059 + 1;
                                                v1058 = (__int128 *)operator new(v1059 + 1);
                                                *((_QWORD *)&v1332 + 1) = v1053;
                                                v1333 = v1060 | 0x8000000000000000;
                                                *(_QWORD *)&v1332 = v1058;
                                              }
                                              else
                                              {
                                                HIBYTE(v1333) = v1053;
                                                v1058 = &v1332;
                                                if (!v1053)
                                                  goto LABEL_2092;
                                              }
                                              memmove(v1058, v1052, v1053);
LABEL_2092:
                                              *((_BYTE *)v1058 + v1053) = 0;
                                              *(_OWORD *)__dst = v1334;
                                              v1433 = v1335;
                                              v1434 = v1332;
                                              v1435 = v1333;
                                              v1061 = (char **)sub_22E72076C((uint64_t)v1043, &v1431, (const void **)__dst);
                                              if (!*v1061)
                                              {
                                                v1062 = v1061;
                                                v1063 = (char *)operator new(0x50uLL);
                                                v1064 = v1063 + 32;
                                                if (SHIBYTE(v1433) < 0)
                                                {
                                                  sub_22E3BB2B4(v1064, __dst[0], (unint64_t)__dst[1]);
                                                }
                                                else
                                                {
                                                  *(_OWORD *)v1064 = *(_OWORD *)__dst;
                                                  *((_QWORD *)v1063 + 6) = v1433;
                                                }
                                                *(_OWORD *)(v1063 + 56) = v1434;
                                                *((_QWORD *)v1063 + 9) = v1435;
                                                v1435 = 0;
                                                v1434 = 0uLL;
                                                v1065 = v1431;
                                                *(_QWORD *)v1063 = 0;
                                                *((_QWORD *)v1063 + 1) = 0;
                                                *((_QWORD *)v1063 + 2) = v1065;
                                                *v1062 = v1063;
                                                v1066 = (_QWORD *)**v1043;
                                                if (v1066)
                                                {
                                                  *v1043 = v1066;
                                                  v1063 = *v1062;
                                                }
                                                sub_22E49FD00(*(uint64_t **)(v1329 + 608), (uint64_t *)v1063);
                                                ++*(_QWORD *)(v1329 + 616);
                                              }
                                              if (SHIBYTE(v1435) < 0)
                                                operator delete((void *)v1434);
                                              if (SHIBYTE(v1433) < 0)
                                                operator delete(__dst[0]);
                                              v1041 += 24;
                                              if (v1041 == v1042)
                                                goto LABEL_2104;
                                            }
                                            v1055 = (v1050 & 0xFFFFFFFFFFFFFFF8) + 8;
                                            if ((v1050 | 7) != 0x17)
                                              v1055 = v1050 | 7;
                                            v1056 = v1055 + 1;
                                            v1054 = (__int128 *)operator new(v1055 + 1);
                                            v1057 = v1056 | 0x8000000000000000;
                                            v311 = v1328;
                                            *((_QWORD *)&v1334 + 1) = v1050;
                                            v1335 = (void *)v1057;
                                            *(_QWORD *)&v1334 = v1054;
LABEL_2083:
                                            memmove(v1054, v1049, v1050);
                                            goto LABEL_2084;
                                          }
LABEL_2104:
                                          __dst[0] = __p;
                                          sub_22E3B3CC8((void ***)__dst);
                                          v1067 = v1326;
                                          v1068 = sub_22E6EBFB4(v1326, 2676);
                                          v1069 = v1329;
                                          if (v1068)
                                          {
                                            v1070 = *(const char ***)(v1068 + 48);
                                            if (*v1070)
                                              strlen(*v1070);
                                            __dst[0] = 0;
                                            AsUnsignedInteger = llvm::getAsUnsignedInteger();
                                            v1072 = 0;
                                            if (__dst[0] < (void *)0x100000000)
                                              v1072 = (int)__dst[0];
                                            if ((AsUnsignedInteger & 1) != 0
                                              || (unint64_t)__dst[0] >> 32
                                              || !v1072)
                                            {
                                              *(_QWORD *)(v311 + 312) = 0x13D00000000;
                                              if (*(char *)(v311 + 311) < 0)
                                              {
                                                **(_BYTE **)(v311 + 288) = 0;
                                                *(_QWORD *)(v311 + 296) = 0;
                                              }
                                              else
                                              {
                                                *(_BYTE *)(v311 + 288) = 0;
                                                *(_BYTE *)(v311 + 311) = 0;
                                              }
                                              v1330[0] = v311 + 320;
                                              v1330[1] = 0;
                                              v1330[2] = v311;
                                              v1331 = 1;
                                              *(_BYTE *)(v311 + 320) = 0;
                                              *(_DWORD *)(v311 + 664) = 0;
                                              v1073 = *(unsigned int *)(v311 + 776);
                                              if ((_DWORD)v1073)
                                              {
                                                v1074 = *(_QWORD *)(v311 + 768);
                                                v1075 = 56 * v1073;
                                                do
                                                {
                                                  if (*(char *)(v1074 + v1075 - 9) < 0)
                                                    operator delete(*(void **)(v1074 + v1075 - 32));
                                                  v1075 -= 56;
                                                }
                                                while (v1075);
                                              }
                                              *(_DWORD *)(v311 + 776) = 0;
                                              sub_22E3BB0B8((uint64_t)v1330);
                                              v1069 = v1329;
                                            }
                                          }
                                          v1076 = sub_22E6EBFB4(v1326, 1572);
                                          if (v1076)
                                          {
                                            v1295 = v1076;
                                            sub_22F2A8D10(__dst);
                                            if (!v1437)
                                            {
                                              *(_QWORD *)(v311 + 312) = 0x14B00000000;
                                              if (*(char *)(v311 + 311) < 0)
                                              {
                                                **(_BYTE **)(v311 + 288) = 0;
                                                *(_QWORD *)(v311 + 296) = 0;
                                              }
                                              else
                                              {
                                                *(_BYTE *)(v311 + 288) = 0;
                                                *(_BYTE *)(v311 + 311) = 0;
                                              }
                                              v1302 = (unsigned __int8 *)(v311 + 320);
                                              __p[0] = (void *)(v311 + 320);
                                              __p[1] = 0;
                                              __p[2] = (void *)v311;
                                              LOWORD(v1429) = 1;
                                              *(_BYTE *)(v311 + 320) = 0;
                                              *(_DWORD *)(v311 + 664) = 0;
                                              v1303 = *(unsigned int *)(v311 + 776);
                                              if ((_DWORD)v1303)
                                              {
                                                v1304 = *(_QWORD *)(v311 + 768);
                                                v1305 = 56 * v1303;
                                                do
                                                {
                                                  if (*(char *)(v1304 + v1305 - 9) < 0)
                                                    operator delete(*(void **)(v1304 + v1305 - 32));
                                                  v1305 -= 56;
                                                }
                                                while (v1305);
                                                v1302 = (unsigned __int8 *)__p[0];
                                                *(_DWORD *)(v311 + 776) = 0;
                                                v1306 = **(_QWORD **)(v1295 + 48);
                                                if (!v1302)
                                                {
                                                  v1302 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__p[1]);
                                                  __p[0] = v1302;
                                                }
                                              }
                                              else
                                              {
                                                *(_DWORD *)(v311 + 776) = 0;
                                                v1306 = **(_QWORD **)(v1295 + 48);
                                              }
                                              v1302[*v1302 + 1] = 1;
                                              v1307 = __p[0];
                                              v1308 = *(unsigned __int8 *)__p[0];
                                              *(_BYTE *)__p[0] = v1308 + 1;
                                              v1307[v1308 + 2] = v1306;
                                              sub_22E3BB0B8((uint64_t)__p);
                                              v1069 = v1329;
                                            }
                                            std::ios_base::getloc((const std::ios_base *)((char *)__dst
                                                                                        + *((_QWORD *)__dst[0] - 3)));
                                            v1309 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
                                            v1310 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v1309->__vftable[2].~facet_0)(v1309, 10);
                                            std::locale::~locale((std::locale *)__p);
                                            sub_22E725720(__dst, v1069 + 840, v1310);
                                            __dst[0] = *(void **)MEMORY[0x24BEDB7E0];
                                            *(void **)((char *)__dst + *((_QWORD *)__dst[0] - 3)) = *(void **)(MEMORY[0x24BEDB7E0] + 24);
                                            MEMORY[0x2348A0CBC](&v1433);
                                            v1069 = v1329;
                                            std::istream::~istream();
                                            MEMORY[0x2348A0E3C](v1438);
                                            v1067 = v1326;
                                          }
                                          v1077 = sub_22E6EBFB4(v1067, 1573);
                                          if (v1077)
                                            MEMORY[0x2348A0C14](v1069 + 840, **(_QWORD **)(v1077 + 48));
                                          llvm::opt::ArgList::getAllArgValues();
                                          v1078 = __dst[0];
                                          v1079 = __dst[1];
                                          if (__dst[0] == __dst[1])
                                          {
                                            __p[0] = __dst;
                                          }
                                          else
                                          {
                                            v1080 = 0;
                                            v1081 = *(_QWORD *)(v1069 + 232);
                                            do
                                            {
                                              v1082 = *((char *)v1078 + 23);
                                              v1083 = *((unsigned __int8 *)v1078 + 23);
                                              v1084 = v1078[1];
                                              v1085 = v1083 & 0x7F;
                                              if (v1082 >= 0)
                                                v1086 = *((_BYTE *)v1078 + 23) & 0x7F;
                                              else
                                                v1086 = v1078[1];
                                              if (v1086 == 24)
                                              {
                                                if (v1082 < 0)
                                                {
                                                  v1088 = (const void *)*v1078;
                                                  v1087 = v1078[1];
                                                }
                                                else
                                                {
                                                  v1087 = *((unsigned __int8 *)v1078 + 23);
                                                  v1088 = v1078;
                                                }
                                                v1089 = v1087 >= 0x18 ? 24 : v1087;
                                                if (!memcmp(v1088, "+nullptrToBoolConversion", v1089) && v1087 == 24)
                                                {
                                                  v1081 |= 0x800000000uLL;
                                                  *(_QWORD *)(v1069 + 232) = v1081;
                                                  v1083 = *((unsigned __int8 *)v1078 + 23);
                                                  v1084 = v1078[1];
                                                  v1085 = v1083 & 0x7F;
                                                }
                                              }
                                              if ((v1083 & 0x80u) == 0)
                                                v1091 = v1085;
                                              else
                                                v1091 = v1084;
                                              if (v1091 == 39)
                                              {
                                                v1092 = v1083;
                                                v1093 = v1078;
                                                if ((char)v1083 < 0)
                                                {
                                                  v1093 = (const void *)*v1078;
                                                  v1092 = v1084;
                                                }
                                                if (v1092 >= 0x27)
                                                  v1094 = 39;
                                                else
                                                  v1094 = v1092;
                                                if (!memcmp(v1093, "+messageToSelfInClassMethodIdReturnType", v1094)
                                                  && v1092 == 39)
                                                {
                                                  v1081 |= 0x1000000000uLL;
                                                  *(_QWORD *)(v1069 + 232) = v1081;
                                                  v1083 = *((unsigned __int8 *)v1078 + 23);
                                                  v1084 = v1078[1];
                                                  v1085 = v1083 & 0x7F;
                                                }
                                              }
                                              if ((v1083 & 0x80u) == 0)
                                                v1095 = v1085;
                                              else
                                                v1095 = v1084;
                                              if (v1095 == 36)
                                              {
                                                v1096 = v1083;
                                                v1097 = v1078;
                                                if ((char)v1083 < 0)
                                                {
                                                  v1097 = (const void *)*v1078;
                                                  v1096 = v1084;
                                                }
                                                if (v1096 >= 0x24)
                                                  v1098 = 36;
                                                else
                                                  v1098 = v1096;
                                                if (!memcmp(v1097, "+disableInferNewAvailabilityFromInit", v1098)
                                                  && v1096 == 36)
                                                {
                                                  v1081 |= 0x2000000000uLL;
                                                  *(_QWORD *)(v1069 + 232) = v1081;
                                                  v1083 = *((unsigned __int8 *)v1078 + 23);
                                                  v1084 = v1078[1];
                                                  v1085 = v1083 & 0x7F;
                                                }
                                              }
                                              if ((v1083 & 0x80u) == 0)
                                                v1099 = v1085;
                                              else
                                                v1099 = v1084;
                                              if (v1099 == 42)
                                              {
                                                v1100 = v1083;
                                                v1101 = v1078;
                                                if ((char)v1083 < 0)
                                                {
                                                  v1101 = (const void *)*v1078;
                                                  v1100 = v1084;
                                                }
                                                if (v1100 >= 0x2A)
                                                  v1102 = 42;
                                                else
                                                  v1102 = v1100;
                                                if (!memcmp(v1101, "+allowFormatVoidPointerWithStringSpecifier", v1102)
                                                  && v1100 == 42)
                                                {
                                                  v1081 |= 0x4000000000uLL;
                                                  *(_QWORD *)(v1069 + 232) = v1081;
                                                  v1083 = *((unsigned __int8 *)v1078 + 23);
                                                  v1084 = v1078[1];
                                                  v1085 = v1083 & 0x7F;
                                                }
                                              }
                                              if ((v1083 & 0x80u) == 0)
                                                v1103 = v1085;
                                              else
                                                v1103 = v1084;
                                              if (v1103 == 24)
                                              {
                                                v1104 = v1083;
                                                v1105 = v1078;
                                                if ((char)v1083 < 0)
                                                {
                                                  v1105 = (const void *)*v1078;
                                                  v1104 = v1084;
                                                }
                                                if (v1104 >= 0x18)
                                                  v1106 = 24;
                                                else
                                                  v1106 = v1104;
                                                if (!memcmp(v1105, "+allowFormatBooleanCheck", v1106) && v1104 == 24)
                                                {
                                                  v1081 |= 0x8000000000uLL;
                                                  *(_QWORD *)(v1069 + 232) = v1081;
                                                  v1083 = *((unsigned __int8 *)v1078 + 23);
                                                  v1084 = v1078[1];
                                                  v1085 = v1083 & 0x7F;
                                                }
                                              }
                                              if ((v1083 & 0x80u) == 0)
                                                v1107 = v1085;
                                              else
                                                v1107 = v1084;
                                              if (v1107 == 34)
                                              {
                                                v1108 = v1083;
                                                v1109 = v1078;
                                                if ((char)v1083 < 0)
                                                {
                                                  v1109 = (const void *)*v1078;
                                                  v1108 = v1084;
                                                }
                                                if (v1108 >= 0x22)
                                                  v1110 = 34;
                                                else
                                                  v1110 = v1108;
                                                if (!memcmp(v1109, "+allowStaticMemberInAnonymousUnion", v1110)
                                                  && v1108 == 34)
                                                {
                                                  v1081 |= 0x10000000000uLL;
                                                  *(_QWORD *)(v1069 + 232) = v1081;
                                                  v1083 = *((unsigned __int8 *)v1078 + 23);
                                                  v1084 = v1078[1];
                                                  v1085 = v1083 & 0x7F;
                                                }
                                              }
                                              if ((v1083 & 0x80u) == 0)
                                                v1111 = v1085;
                                              else
                                                v1111 = v1084;
                                              if (v1111 == 31)
                                              {
                                                v1112 = v1083;
                                                v1113 = v1078;
                                                if ((char)v1083 < 0)
                                                {
                                                  v1113 = (const void *)*v1078;
                                                  v1112 = v1084;
                                                }
                                                if (v1112 >= 0x1F)
                                                  v1114 = 31;
                                                else
                                                  v1114 = v1112;
                                                if (!memcmp(v1113, "+allowStaticMemberInLocalRecord", v1114)
                                                  && v1112 == 31)
                                                {
                                                  v1081 |= 0x20000000000uLL;
                                                  *(_QWORD *)(v1069 + 232) = v1081;
                                                  v1083 = *((unsigned __int8 *)v1078 + 23);
                                                  v1084 = v1078[1];
                                                  v1085 = v1083 & 0x7F;
                                                }
                                              }
                                              if ((v1083 & 0x80u) == 0)
                                                v1115 = v1085;
                                              else
                                                v1115 = v1084;
                                              if (v1115 == 31)
                                              {
                                                v1116 = v1083;
                                                v1117 = v1078;
                                                if ((char)v1083 < 0)
                                                {
                                                  v1117 = (const void *)*v1078;
                                                  v1116 = v1084;
                                                }
                                                if (v1116 >= 0x1F)
                                                  v1118 = 31;
                                                else
                                                  v1118 = v1116;
                                                if (!memcmp(v1117, "+disableNeonImmediateRangeCheck", v1118)
                                                  && v1116 == 31)
                                                {
                                                  v1081 |= 0x40000000000uLL;
                                                  *(_QWORD *)(v1069 + 232) = v1081;
                                                  v1083 = *((unsigned __int8 *)v1078 + 23);
                                                  v1084 = v1078[1];
                                                  v1085 = v1083 & 0x7F;
                                                }
                                              }
                                              if ((v1083 & 0x80u) == 0)
                                                v1119 = v1085;
                                              else
                                                v1119 = v1084;
                                              if (v1119 == 52)
                                              {
                                                v1120 = v1083;
                                                v1121 = v1078;
                                                if ((char)v1083 < 0)
                                                {
                                                  v1121 = (const void *)*v1078;
                                                  v1120 = v1084;
                                                }
                                                if (v1120 >= 0x34)
                                                  v1122 = 52;
                                                else
                                                  v1122 = v1120;
                                                if (!memcmp(v1121, "+disableNonDependentMemberExprInCurrentInstantiation", v1122)&& v1120 == 52)
                                                {
                                                  v1081 |= 0x80000000000uLL;
                                                  *(_QWORD *)(v1069 + 232) = v1081;
                                                  v1083 = *((unsigned __int8 *)v1078 + 23);
                                                  v1084 = v1078[1];
                                                  v1085 = v1083 & 0x7F;
                                                }
                                              }
                                              if ((v1083 & 0x80u) == 0)
                                                v1123 = v1085;
                                              else
                                                v1123 = v1084;
                                              if (v1123 == 28)
                                              {
                                                v1124 = v1083;
                                                v1125 = v1078;
                                                if ((char)v1083 < 0)
                                                {
                                                  v1125 = (const void *)*v1078;
                                                  v1124 = v1084;
                                                }
                                                if (v1124 >= 0x1C)
                                                  v1126 = 28;
                                                else
                                                  v1126 = v1124;
                                                if (!memcmp(v1125, "+fixedEnumsInClassScopeCXX98", v1126)
                                                  && v1124 == 28)
                                                {
                                                  v1081 |= 0x100000000000uLL;
                                                  *(_QWORD *)(v1069 + 232) = v1081;
                                                  v1083 = *((unsigned __int8 *)v1078 + 23);
                                                  v1084 = v1078[1];
                                                  v1085 = v1083 & 0x7F;
                                                }
                                              }
                                              if ((v1083 & 0x80u) == 0)
                                                v1127 = v1085;
                                              else
                                                v1127 = v1084;
                                              if (v1127 == 45)
                                              {
                                                v1128 = v1083;
                                                v1129 = v1078;
                                                if ((char)v1083 < 0)
                                                {
                                                  v1129 = (const void *)*v1078;
                                                  v1128 = v1084;
                                                }
                                                if (v1128 >= 0x2D)
                                                  v1130 = 45;
                                                else
                                                  v1130 = v1128;
                                                if (!memcmp(v1129, "+disableNullSanitizerCheckForPointerSanitizer", v1130)&& v1128 == 45)
                                                {
                                                  v1081 |= 0x200000000000uLL;
                                                  *(_QWORD *)(v1069 + 232) = v1081;
                                                  v1083 = *((unsigned __int8 *)v1078 + 23);
                                                  v1084 = v1078[1];
                                                  v1085 = v1083 & 0x7F;
                                                }
                                              }
                                              if ((v1083 & 0x80u) == 0)
                                                v1131 = v1085;
                                              else
                                                v1131 = v1084;
                                              if (v1131 == 23)
                                              {
                                                v1132 = v1083;
                                                v1133 = v1078;
                                                if ((char)v1083 < 0)
                                                {
                                                  v1133 = (const void *)*v1078;
                                                  v1132 = v1084;
                                                }
                                                if (v1132 >= 0x17)
                                                  v1134 = 23;
                                                else
                                                  v1134 = v1132;
                                                if (!memcmp(v1133, "+disableOVEimplicitConv", v1134) && v1132 == 23)
                                                {
                                                  v1081 |= 0x400000000000uLL;
                                                  *(_QWORD *)(v1069 + 232) = v1081;
                                                  v1083 = *((unsigned __int8 *)v1078 + 23);
                                                  v1084 = v1078[1];
                                                  v1085 = v1083 & 0x7F;
                                                }
                                              }
                                              if ((v1083 & 0x80u) == 0)
                                                v1135 = v1085;
                                              else
                                                v1135 = v1084;
                                              if (v1135 == 38)
                                              {
                                                v1136 = v1083;
                                                v1137 = v1078;
                                                if ((char)v1083 < 0)
                                                {
                                                  v1137 = (const void *)*v1078;
                                                  v1136 = v1084;
                                                }
                                                if (v1136 >= 0x26)
                                                  v1138 = 38;
                                                else
                                                  v1138 = v1136;
                                                if (!memcmp(v1137, "+zeroInitializeGlobalsBeforeEvaluating", v1138)
                                                  && v1136 == 38)
                                                {
                                                  v1081 |= 0x800000000000uLL;
                                                  *(_QWORD *)(v1069 + 232) = v1081;
                                                  v1083 = *((unsigned __int8 *)v1078 + 23);
                                                  v1084 = v1078[1];
                                                  v1085 = v1083 & 0x7F;
                                                }
                                              }
                                              if ((v1083 & 0x80u) == 0)
                                                v1139 = v1085;
                                              else
                                                v1139 = v1084;
                                              if (v1139 == 30)
                                              {
                                                v1140 = v1083;
                                                v1141 = v1078;
                                                if ((char)v1083 < 0)
                                                {
                                                  v1141 = (const void *)*v1078;
                                                  v1140 = v1084;
                                                }
                                                if (v1140 >= 0x1E)
                                                  v1142 = 30;
                                                else
                                                  v1142 = v1140;
                                                if (!memcmp(v1141, "+useNonPrimaryObjCCategoryDecl", v1142)
                                                  && v1140 == 30)
                                                {
                                                  v1081 |= 0x1000000000000uLL;
                                                  *(_QWORD *)(v1069 + 232) = v1081;
                                                  v1083 = *((unsigned __int8 *)v1078 + 23);
                                                  v1084 = v1078[1];
                                                  v1085 = v1083 & 0x7F;
                                                }
                                              }
                                              if ((v1083 & 0x80u) == 0)
                                                v1143 = v1085;
                                              else
                                                v1143 = v1084;
                                              if (v1143 == 34)
                                              {
                                                v1144 = v1083;
                                                v1145 = v1078;
                                                if ((char)v1083 < 0)
                                                {
                                                  v1145 = (const void *)*v1078;
                                                  v1144 = v1084;
                                                }
                                                if (v1144 >= 0x22)
                                                  v1146 = 34;
                                                else
                                                  v1146 = v1144;
                                                if (!memcmp(v1145, "+enableObjCNumericLiteralWithoutAt", v1146)
                                                  && v1144 == 34)
                                                {
                                                  v1081 |= 0x2000000000000uLL;
                                                  *(_QWORD *)(v1069 + 232) = v1081;
                                                  v1083 = *((unsigned __int8 *)v1078 + 23);
                                                  v1084 = v1078[1];
                                                  v1085 = v1083 & 0x7F;
                                                }
                                              }
                                              if ((v1083 & 0x80u) == 0)
                                                v1147 = v1085;
                                              else
                                                v1147 = v1084;
                                              if (v1147 == 33)
                                              {
                                                v1148 = v1083;
                                                v1149 = v1078;
                                                if ((char)v1083 < 0)
                                                {
                                                  v1149 = (const void *)*v1078;
                                                  v1148 = v1084;
                                                }
                                                if (v1148 >= 0x21)
                                                  v1150 = 33;
                                                else
                                                  v1150 = v1148;
                                                if (!memcmp(v1149, "+legacyAvailabilityTempWorkaround", v1150)
                                                  && v1148 == 33)
                                                {
                                                  v1081 |= 0x4000000000000uLL;
                                                  *(_QWORD *)(v1069 + 232) = v1081;
                                                  v1083 = *((unsigned __int8 *)v1078 + 23);
                                                  v1084 = v1078[1];
                                                  v1085 = v1083 & 0x7F;
                                                }
                                              }
                                              if ((v1083 & 0x80u) == 0)
                                                v1151 = v1085;
                                              else
                                                v1151 = v1084;
                                              if (v1151 == 36)
                                              {
                                                v1152 = v1083;
                                                v1153 = v1078;
                                                if ((char)v1083 < 0)
                                                {
                                                  v1153 = (const void *)*v1078;
                                                  v1152 = v1084;
                                                }
                                                if (v1152 >= 0x24)
                                                  v1154 = 36;
                                                else
                                                  v1154 = v1152;
                                                if (!memcmp(v1153, "+enableObjCImplicitClassTypeCoercion", v1154)
                                                  && v1152 == 36)
                                                {
                                                  v1081 |= 0x8000000000000uLL;
                                                  *(_QWORD *)(v1069 + 232) = v1081;
                                                  v1083 = *((unsigned __int8 *)v1078 + 23);
                                                  v1084 = v1078[1];
                                                  v1085 = v1083 & 0x7F;
                                                }
                                              }
                                              if ((v1083 & 0x80u) == 0)
                                                v1155 = v1085;
                                              else
                                                v1155 = v1084;
                                              if (v1155 == 27)
                                              {
                                                v1156 = v1083;
                                                v1157 = v1078;
                                                if ((char)v1083 < 0)
                                                {
                                                  v1157 = (const void *)*v1078;
                                                  v1156 = v1084;
                                                }
                                                if (v1156 >= 0x1B)
                                                  v1158 = 27;
                                                else
                                                  v1158 = v1156;
                                                if (!memcmp(v1157, "+enableAggressiveVLAFolding", v1158) && v1156 == 27)
                                                {
                                                  v1081 |= 0x10000000000000uLL;
                                                  *(_QWORD *)(v1069 + 232) = v1081;
                                                  v1083 = *((unsigned __int8 *)v1078 + 23);
                                                  v1084 = v1078[1];
                                                  v1085 = v1083 & 0x7F;
                                                }
                                              }
                                              if ((v1083 & 0x80u) == 0)
                                                v1159 = v1085;
                                              else
                                                v1159 = v1084;
                                              if (v1159 == 23)
                                              {
                                                v1160 = v1083;
                                                v1161 = v1078;
                                                if ((char)v1083 < 0)
                                                {
                                                  v1161 = (const void *)*v1078;
                                                  v1160 = v1084;
                                                }
                                                if (v1160 >= 0x17)
                                                  v1162 = 23;
                                                else
                                                  v1162 = v1160;
                                                if (!memcmp(v1161, "+disablePtrauthPacError", v1162) && v1160 == 23)
                                                {
                                                  v1081 |= 0x20000000000000uLL;
                                                  *(_QWORD *)(v1069 + 232) = v1081;
                                                  v1083 = *((unsigned __int8 *)v1078 + 23);
                                                  v1084 = v1078[1];
                                                  v1085 = v1083 & 0x7F;
                                                }
                                              }
                                              if ((v1083 & 0x80u) == 0)
                                                v1163 = v1085;
                                              else
                                                v1163 = v1084;
                                              if (v1163 == 19)
                                              {
                                                v1164 = v1083;
                                                v1165 = v1078;
                                                if ((char)v1083 < 0)
                                                {
                                                  v1165 = (const void *)*v1078;
                                                  v1164 = v1084;
                                                }
                                                if (v1164 >= 0x13)
                                                  v1166 = 19;
                                                else
                                                  v1166 = v1164;
                                                if (!memcmp(v1165, "+revert09abecef7bbf", v1166) && v1164 == 19)
                                                {
                                                  v1081 |= 0x40000000000000uLL;
                                                  *(_QWORD *)(v1069 + 232) = v1081;
                                                  v1083 = *((unsigned __int8 *)v1078 + 23);
                                                  v1084 = v1078[1];
                                                  v1085 = v1083 & 0x7F;
                                                }
                                              }
                                              if ((v1083 & 0x80u) == 0)
                                                v1167 = v1085;
                                              else
                                                v1167 = v1084;
                                              if (v1167 == 19)
                                              {
                                                v1168 = v1083;
                                                v1169 = v1078;
                                                if ((char)v1083 < 0)
                                                {
                                                  v1169 = (const void *)*v1078;
                                                  v1168 = v1084;
                                                }
                                                if (v1168 >= 0x13)
                                                  v1170 = 19;
                                                else
                                                  v1170 = v1168;
                                                if (!memcmp(v1169, "+revertcff6dda604cb", v1170) && v1168 == 19)
                                                {
                                                  v1081 |= 0x80000000000000uLL;
                                                  *(_QWORD *)(v1069 + 232) = v1081;
                                                  v1083 = *((unsigned __int8 *)v1078 + 23);
                                                  v1084 = v1078[1];
                                                  v1085 = v1083 & 0x7F;
                                                }
                                              }
                                              if ((v1083 & 0x80u) == 0)
                                                v1171 = v1085;
                                              else
                                                v1171 = v1084;
                                              if (v1171 == 16)
                                              {
                                                v1172 = v1083;
                                                v1173 = v1078;
                                                if ((char)v1083 < 0)
                                                {
                                                  v1173 = (const void *)*v1078;
                                                  v1172 = v1084;
                                                }
                                                if (v1172 >= 0x10)
                                                  v1174 = 16;
                                                else
                                                  v1174 = v1172;
                                                if (!memcmp(v1173, "+thisNoAlignAttr", v1174) && v1172 == 16)
                                                {
                                                  v1081 |= 0x100000000000000uLL;
                                                  *(_QWORD *)(v1069 + 232) = v1081;
                                                  v1083 = *((unsigned __int8 *)v1078 + 23);
                                                  v1084 = v1078[1];
                                                  v1085 = v1083 & 0x7F;
                                                }
                                              }
                                              if ((v1083 & 0x80u) == 0)
                                                v1175 = v1085;
                                              else
                                                v1175 = v1084;
                                              if (v1175 == 15)
                                              {
                                                v1176 = v1083;
                                                v1177 = v1078;
                                                if ((char)v1083 < 0)
                                                {
                                                  v1177 = (const void *)*v1078;
                                                  v1176 = v1084;
                                                }
                                                if (v1176 >= 0xF)
                                                  v1178 = 15;
                                                else
                                                  v1178 = v1176;
                                                if (!memcmp(v1177, "+thisNoNullAttr", v1178) && v1176 == 15)
                                                {
                                                  v1081 |= 0x200000000000000uLL;
                                                  *(_QWORD *)(v1069 + 232) = v1081;
                                                  v1083 = *((unsigned __int8 *)v1078 + 23);
                                                  v1084 = v1078[1];
                                                  v1085 = v1083 & 0x7F;
                                                }
                                              }
                                              if ((v1083 & 0x80u) == 0)
                                                v1179 = v1085;
                                              else
                                                v1179 = v1084;
                                              if (v1179 == 28)
                                              {
                                                v1180 = v1083;
                                                v1181 = v1078;
                                                if ((char)v1083 < 0)
                                                {
                                                  v1181 = (const void *)*v1078;
                                                  v1180 = v1084;
                                                }
                                                if (v1180 >= 0x1C)
                                                  v1182 = 28;
                                                else
                                                  v1182 = v1180;
                                                if (!memcmp(v1181, "+disableObjCConstantLiterals", v1182)
                                                  && v1180 == 28)
                                                {
                                                  v1081 |= 0x400000000000000uLL;
                                                  *(_QWORD *)(v1069 + 232) = v1081;
                                                  LOBYTE(v1083) = *((_BYTE *)v1078 + 23);
                                                  v1084 = v1078[1];
                                                  v1085 = v1083 & 0x7F;
                                                }
                                              }
                                              if ((v1083 & 0x80u) == 0)
                                                v1183 = v1085;
                                              else
                                                v1183 = v1084;
                                              if (v1183)
                                              {
                                                if ((v1083 & 0x80u) == 0)
                                                  v1184 = v1078;
                                                else
                                                  v1184 = (_BYTE *)*v1078;
                                                v1185 = *v1184 == 45;
                                              }
                                              else
                                              {
                                                v1185 = 0;
                                              }
                                              v1080 |= v1185;
                                              v1078 += 3;
                                            }
                                            while (v1078 != v1079);
                                            __p[0] = __dst;
                                            sub_22E3B3CC8((void ***)__p);
                                            if ((v1080 & 1) == 0)
                                              goto LABEL_2727;
                                            llvm::opt::ArgList::getAllArgValues();
                                            v1186 = __dst[0];
                                            v1187 = __dst[1];
                                            if (__dst[0] != __dst[1])
                                            {
                                              v1188 = *(_QWORD *)(v1069 + 232);
                                              do
                                              {
                                                v1189 = *((char *)v1186 + 23);
                                                v1190 = *((unsigned __int8 *)v1186 + 23);
                                                v1191 = v1186[1];
                                                v1192 = v1190 & 0x7F;
                                                if (v1189 >= 0)
                                                  v1193 = *((_BYTE *)v1186 + 23) & 0x7F;
                                                else
                                                  v1193 = v1186[1];
                                                if (v1193 == 24)
                                                {
                                                  if (v1189 < 0)
                                                  {
                                                    v1195 = (const void *)*v1186;
                                                    v1194 = v1186[1];
                                                  }
                                                  else
                                                  {
                                                    v1194 = *((unsigned __int8 *)v1186 + 23);
                                                    v1195 = v1186;
                                                  }
                                                  v1196 = v1194 >= 0x18 ? 24 : v1194;
                                                  if (!memcmp(v1195, "-nullptrToBoolConversion", v1196) && v1194 == 24)
                                                  {
                                                    v1188 &= ~0x800000000uLL;
                                                    *(_QWORD *)(v1069 + 232) = v1188;
                                                    v1190 = *((unsigned __int8 *)v1186 + 23);
                                                    v1191 = v1186[1];
                                                    v1192 = v1190 & 0x7F;
                                                  }
                                                }
                                                if ((v1190 & 0x80u) == 0)
                                                  v1198 = v1192;
                                                else
                                                  v1198 = v1191;
                                                if (v1198 == 39)
                                                {
                                                  v1199 = v1190;
                                                  v1200 = v1186;
                                                  if ((char)v1190 < 0)
                                                  {
                                                    v1200 = (const void *)*v1186;
                                                    v1199 = v1191;
                                                  }
                                                  if (v1199 >= 0x27)
                                                    v1201 = 39;
                                                  else
                                                    v1201 = v1199;
                                                  if (!memcmp(v1200, "-messageToSelfInClassMethodIdReturnType", v1201)
                                                    && v1199 == 39)
                                                  {
                                                    v1188 &= ~0x1000000000uLL;
                                                    *(_QWORD *)(v1069 + 232) = v1188;
                                                    v1190 = *((unsigned __int8 *)v1186 + 23);
                                                    v1191 = v1186[1];
                                                    v1192 = v1190 & 0x7F;
                                                  }
                                                }
                                                if ((v1190 & 0x80u) == 0)
                                                  v1202 = v1192;
                                                else
                                                  v1202 = v1191;
                                                if (v1202 == 36)
                                                {
                                                  v1203 = v1190;
                                                  v1204 = v1186;
                                                  if ((char)v1190 < 0)
                                                  {
                                                    v1204 = (const void *)*v1186;
                                                    v1203 = v1191;
                                                  }
                                                  if (v1203 >= 0x24)
                                                    v1205 = 36;
                                                  else
                                                    v1205 = v1203;
                                                  if (!memcmp(v1204, "-disableInferNewAvailabilityFromInit", v1205)
                                                    && v1203 == 36)
                                                  {
                                                    v1188 &= ~0x2000000000uLL;
                                                    *(_QWORD *)(v1069 + 232) = v1188;
                                                    v1190 = *((unsigned __int8 *)v1186 + 23);
                                                    v1191 = v1186[1];
                                                    v1192 = v1190 & 0x7F;
                                                  }
                                                }
                                                if ((v1190 & 0x80u) == 0)
                                                  v1206 = v1192;
                                                else
                                                  v1206 = v1191;
                                                if (v1206 == 42)
                                                {
                                                  v1207 = v1190;
                                                  v1208 = v1186;
                                                  if ((char)v1190 < 0)
                                                  {
                                                    v1208 = (const void *)*v1186;
                                                    v1207 = v1191;
                                                  }
                                                  if (v1207 >= 0x2A)
                                                    v1209 = 42;
                                                  else
                                                    v1209 = v1207;
                                                  if (!memcmp(v1208, "-allowFormatVoidPointerWithStringSpecifier", v1209)&& v1207 == 42)
                                                  {
                                                    v1188 &= ~0x4000000000uLL;
                                                    *(_QWORD *)(v1069 + 232) = v1188;
                                                    v1190 = *((unsigned __int8 *)v1186 + 23);
                                                    v1191 = v1186[1];
                                                    v1192 = v1190 & 0x7F;
                                                  }
                                                }
                                                if ((v1190 & 0x80u) == 0)
                                                  v1210 = v1192;
                                                else
                                                  v1210 = v1191;
                                                if (v1210 == 24)
                                                {
                                                  v1211 = v1190;
                                                  v1212 = v1186;
                                                  if ((char)v1190 < 0)
                                                  {
                                                    v1212 = (const void *)*v1186;
                                                    v1211 = v1191;
                                                  }
                                                  if (v1211 >= 0x18)
                                                    v1213 = 24;
                                                  else
                                                    v1213 = v1211;
                                                  if (!memcmp(v1212, "-allowFormatBooleanCheck", v1213) && v1211 == 24)
                                                  {
                                                    v1188 &= ~0x8000000000uLL;
                                                    *(_QWORD *)(v1069 + 232) = v1188;
                                                    v1190 = *((unsigned __int8 *)v1186 + 23);
                                                    v1191 = v1186[1];
                                                    v1192 = v1190 & 0x7F;
                                                  }
                                                }
                                                if ((v1190 & 0x80u) == 0)
                                                  v1214 = v1192;
                                                else
                                                  v1214 = v1191;
                                                if (v1214 == 34)
                                                {
                                                  v1215 = v1190;
                                                  v1216 = v1186;
                                                  if ((char)v1190 < 0)
                                                  {
                                                    v1216 = (const void *)*v1186;
                                                    v1215 = v1191;
                                                  }
                                                  if (v1215 >= 0x22)
                                                    v1217 = 34;
                                                  else
                                                    v1217 = v1215;
                                                  if (!memcmp(v1216, "-allowStaticMemberInAnonymousUnion", v1217)
                                                    && v1215 == 34)
                                                  {
                                                    v1188 &= ~0x10000000000uLL;
                                                    *(_QWORD *)(v1069 + 232) = v1188;
                                                    v1190 = *((unsigned __int8 *)v1186 + 23);
                                                    v1191 = v1186[1];
                                                    v1192 = v1190 & 0x7F;
                                                  }
                                                }
                                                if ((v1190 & 0x80u) == 0)
                                                  v1218 = v1192;
                                                else
                                                  v1218 = v1191;
                                                if (v1218 == 31)
                                                {
                                                  v1219 = v1190;
                                                  v1220 = v1186;
                                                  if ((char)v1190 < 0)
                                                  {
                                                    v1220 = (const void *)*v1186;
                                                    v1219 = v1191;
                                                  }
                                                  if (v1219 >= 0x1F)
                                                    v1221 = 31;
                                                  else
                                                    v1221 = v1219;
                                                  if (!memcmp(v1220, "-allowStaticMemberInLocalRecord", v1221)
                                                    && v1219 == 31)
                                                  {
                                                    v1188 &= ~0x20000000000uLL;
                                                    *(_QWORD *)(v1069 + 232) = v1188;
                                                    v1190 = *((unsigned __int8 *)v1186 + 23);
                                                    v1191 = v1186[1];
                                                    v1192 = v1190 & 0x7F;
                                                  }
                                                }
                                                if ((v1190 & 0x80u) == 0)
                                                  v1222 = v1192;
                                                else
                                                  v1222 = v1191;
                                                if (v1222 == 31)
                                                {
                                                  v1223 = v1190;
                                                  v1224 = v1186;
                                                  if ((char)v1190 < 0)
                                                  {
                                                    v1224 = (const void *)*v1186;
                                                    v1223 = v1191;
                                                  }
                                                  if (v1223 >= 0x1F)
                                                    v1225 = 31;
                                                  else
                                                    v1225 = v1223;
                                                  if (!memcmp(v1224, "-disableNeonImmediateRangeCheck", v1225)
                                                    && v1223 == 31)
                                                  {
                                                    v1188 &= ~0x40000000000uLL;
                                                    *(_QWORD *)(v1069 + 232) = v1188;
                                                    v1190 = *((unsigned __int8 *)v1186 + 23);
                                                    v1191 = v1186[1];
                                                    v1192 = v1190 & 0x7F;
                                                  }
                                                }
                                                if ((v1190 & 0x80u) == 0)
                                                  v1226 = v1192;
                                                else
                                                  v1226 = v1191;
                                                if (v1226 == 52)
                                                {
                                                  v1227 = v1190;
                                                  v1228 = v1186;
                                                  if ((char)v1190 < 0)
                                                  {
                                                    v1228 = (const void *)*v1186;
                                                    v1227 = v1191;
                                                  }
                                                  if (v1227 >= 0x34)
                                                    v1229 = 52;
                                                  else
                                                    v1229 = v1227;
                                                  if (!memcmp(v1228, "-disableNonDependentMemberExprInCurrentInstantiation", v1229)&& v1227 == 52)
                                                  {
                                                    v1188 &= ~0x80000000000uLL;
                                                    *(_QWORD *)(v1069 + 232) = v1188;
                                                    v1190 = *((unsigned __int8 *)v1186 + 23);
                                                    v1191 = v1186[1];
                                                    v1192 = v1190 & 0x7F;
                                                  }
                                                }
                                                if ((v1190 & 0x80u) == 0)
                                                  v1230 = v1192;
                                                else
                                                  v1230 = v1191;
                                                if (v1230 == 28)
                                                {
                                                  v1231 = v1190;
                                                  v1232 = v1186;
                                                  if ((char)v1190 < 0)
                                                  {
                                                    v1232 = (const void *)*v1186;
                                                    v1231 = v1191;
                                                  }
                                                  if (v1231 >= 0x1C)
                                                    v1233 = 28;
                                                  else
                                                    v1233 = v1231;
                                                  if (!memcmp(v1232, "-fixedEnumsInClassScopeCXX98", v1233)
                                                    && v1231 == 28)
                                                  {
                                                    v1188 &= ~0x100000000000uLL;
                                                    *(_QWORD *)(v1069 + 232) = v1188;
                                                    v1190 = *((unsigned __int8 *)v1186 + 23);
                                                    v1191 = v1186[1];
                                                    v1192 = v1190 & 0x7F;
                                                  }
                                                }
                                                if ((v1190 & 0x80u) == 0)
                                                  v1234 = v1192;
                                                else
                                                  v1234 = v1191;
                                                if (v1234 == 45)
                                                {
                                                  v1235 = v1190;
                                                  v1236 = v1186;
                                                  if ((char)v1190 < 0)
                                                  {
                                                    v1236 = (const void *)*v1186;
                                                    v1235 = v1191;
                                                  }
                                                  if (v1235 >= 0x2D)
                                                    v1237 = 45;
                                                  else
                                                    v1237 = v1235;
                                                  if (!memcmp(v1236, "-disableNullSanitizerCheckForPointerSanitizer", v1237)&& v1235 == 45)
                                                  {
                                                    v1188 &= ~0x200000000000uLL;
                                                    *(_QWORD *)(v1069 + 232) = v1188;
                                                    v1190 = *((unsigned __int8 *)v1186 + 23);
                                                    v1191 = v1186[1];
                                                    v1192 = v1190 & 0x7F;
                                                  }
                                                }
                                                if ((v1190 & 0x80u) == 0)
                                                  v1238 = v1192;
                                                else
                                                  v1238 = v1191;
                                                if (v1238 == 23)
                                                {
                                                  v1239 = v1190;
                                                  v1240 = v1186;
                                                  if ((char)v1190 < 0)
                                                  {
                                                    v1240 = (const void *)*v1186;
                                                    v1239 = v1191;
                                                  }
                                                  if (v1239 >= 0x17)
                                                    v1241 = 23;
                                                  else
                                                    v1241 = v1239;
                                                  if (!memcmp(v1240, "-disableOVEimplicitConv", v1241) && v1239 == 23)
                                                  {
                                                    v1188 &= ~0x400000000000uLL;
                                                    *(_QWORD *)(v1069 + 232) = v1188;
                                                    v1190 = *((unsigned __int8 *)v1186 + 23);
                                                    v1191 = v1186[1];
                                                    v1192 = v1190 & 0x7F;
                                                  }
                                                }
                                                if ((v1190 & 0x80u) == 0)
                                                  v1242 = v1192;
                                                else
                                                  v1242 = v1191;
                                                if (v1242 == 38)
                                                {
                                                  v1243 = v1190;
                                                  v1244 = v1186;
                                                  if ((char)v1190 < 0)
                                                  {
                                                    v1244 = (const void *)*v1186;
                                                    v1243 = v1191;
                                                  }
                                                  if (v1243 >= 0x26)
                                                    v1245 = 38;
                                                  else
                                                    v1245 = v1243;
                                                  if (!memcmp(v1244, "-zeroInitializeGlobalsBeforeEvaluating", v1245)
                                                    && v1243 == 38)
                                                  {
                                                    v1188 &= ~0x800000000000uLL;
                                                    *(_QWORD *)(v1069 + 232) = v1188;
                                                    v1190 = *((unsigned __int8 *)v1186 + 23);
                                                    v1191 = v1186[1];
                                                    v1192 = v1190 & 0x7F;
                                                  }
                                                }
                                                if ((v1190 & 0x80u) == 0)
                                                  v1246 = v1192;
                                                else
                                                  v1246 = v1191;
                                                if (v1246 == 30)
                                                {
                                                  v1247 = v1190;
                                                  v1248 = v1186;
                                                  if ((char)v1190 < 0)
                                                  {
                                                    v1248 = (const void *)*v1186;
                                                    v1247 = v1191;
                                                  }
                                                  if (v1247 >= 0x1E)
                                                    v1249 = 30;
                                                  else
                                                    v1249 = v1247;
                                                  if (!memcmp(v1248, "-useNonPrimaryObjCCategoryDecl", v1249)
                                                    && v1247 == 30)
                                                  {
                                                    v1188 &= ~0x1000000000000uLL;
                                                    *(_QWORD *)(v1069 + 232) = v1188;
                                                    v1190 = *((unsigned __int8 *)v1186 + 23);
                                                    v1191 = v1186[1];
                                                    v1192 = v1190 & 0x7F;
                                                  }
                                                }
                                                if ((v1190 & 0x80u) == 0)
                                                  v1250 = v1192;
                                                else
                                                  v1250 = v1191;
                                                if (v1250 == 34)
                                                {
                                                  v1251 = v1190;
                                                  v1252 = v1186;
                                                  if ((char)v1190 < 0)
                                                  {
                                                    v1252 = (const void *)*v1186;
                                                    v1251 = v1191;
                                                  }
                                                  if (v1251 >= 0x22)
                                                    v1253 = 34;
                                                  else
                                                    v1253 = v1251;
                                                  if (!memcmp(v1252, "-enableObjCNumericLiteralWithoutAt", v1253)
                                                    && v1251 == 34)
                                                  {
                                                    v1188 &= ~0x2000000000000uLL;
                                                    *(_QWORD *)(v1069 + 232) = v1188;
                                                    v1190 = *((unsigned __int8 *)v1186 + 23);
                                                    v1191 = v1186[1];
                                                    v1192 = v1190 & 0x7F;
                                                  }
                                                }
                                                if ((v1190 & 0x80u) == 0)
                                                  v1254 = v1192;
                                                else
                                                  v1254 = v1191;
                                                if (v1254 == 33)
                                                {
                                                  v1255 = v1190;
                                                  v1256 = v1186;
                                                  if ((char)v1190 < 0)
                                                  {
                                                    v1256 = (const void *)*v1186;
                                                    v1255 = v1191;
                                                  }
                                                  if (v1255 >= 0x21)
                                                    v1257 = 33;
                                                  else
                                                    v1257 = v1255;
                                                  if (!memcmp(v1256, "-legacyAvailabilityTempWorkaround", v1257)
                                                    && v1255 == 33)
                                                  {
                                                    v1188 &= ~0x4000000000000uLL;
                                                    *(_QWORD *)(v1069 + 232) = v1188;
                                                    v1190 = *((unsigned __int8 *)v1186 + 23);
                                                    v1191 = v1186[1];
                                                    v1192 = v1190 & 0x7F;
                                                  }
                                                }
                                                if ((v1190 & 0x80u) == 0)
                                                  v1258 = v1192;
                                                else
                                                  v1258 = v1191;
                                                if (v1258 == 36)
                                                {
                                                  v1259 = v1190;
                                                  v1260 = v1186;
                                                  if ((char)v1190 < 0)
                                                  {
                                                    v1260 = (const void *)*v1186;
                                                    v1259 = v1191;
                                                  }
                                                  if (v1259 >= 0x24)
                                                    v1261 = 36;
                                                  else
                                                    v1261 = v1259;
                                                  if (!memcmp(v1260, "-enableObjCImplicitClassTypeCoercion", v1261)
                                                    && v1259 == 36)
                                                  {
                                                    v1188 &= ~0x8000000000000uLL;
                                                    *(_QWORD *)(v1069 + 232) = v1188;
                                                    v1190 = *((unsigned __int8 *)v1186 + 23);
                                                    v1191 = v1186[1];
                                                    v1192 = v1190 & 0x7F;
                                                  }
                                                }
                                                if ((v1190 & 0x80u) == 0)
                                                  v1262 = v1192;
                                                else
                                                  v1262 = v1191;
                                                if (v1262 == 27)
                                                {
                                                  v1263 = v1190;
                                                  v1264 = v1186;
                                                  if ((char)v1190 < 0)
                                                  {
                                                    v1264 = (const void *)*v1186;
                                                    v1263 = v1191;
                                                  }
                                                  if (v1263 >= 0x1B)
                                                    v1265 = 27;
                                                  else
                                                    v1265 = v1263;
                                                  if (!memcmp(v1264, "-enableAggressiveVLAFolding", v1265)
                                                    && v1263 == 27)
                                                  {
                                                    v1188 &= ~0x10000000000000uLL;
                                                    *(_QWORD *)(v1069 + 232) = v1188;
                                                    v1190 = *((unsigned __int8 *)v1186 + 23);
                                                    v1191 = v1186[1];
                                                    v1192 = v1190 & 0x7F;
                                                  }
                                                }
                                                if ((v1190 & 0x80u) == 0)
                                                  v1266 = v1192;
                                                else
                                                  v1266 = v1191;
                                                if (v1266 == 23)
                                                {
                                                  v1267 = v1190;
                                                  v1268 = v1186;
                                                  if ((char)v1190 < 0)
                                                  {
                                                    v1268 = (const void *)*v1186;
                                                    v1267 = v1191;
                                                  }
                                                  if (v1267 >= 0x17)
                                                    v1269 = 23;
                                                  else
                                                    v1269 = v1267;
                                                  if (!memcmp(v1268, "-disablePtrauthPacError", v1269) && v1267 == 23)
                                                  {
                                                    v1188 &= ~0x20000000000000uLL;
                                                    *(_QWORD *)(v1069 + 232) = v1188;
                                                    v1190 = *((unsigned __int8 *)v1186 + 23);
                                                    v1191 = v1186[1];
                                                    v1192 = v1190 & 0x7F;
                                                  }
                                                }
                                                if ((v1190 & 0x80u) == 0)
                                                  v1270 = v1192;
                                                else
                                                  v1270 = v1191;
                                                if (v1270 == 19)
                                                {
                                                  v1271 = v1190;
                                                  v1272 = v1186;
                                                  if ((char)v1190 < 0)
                                                  {
                                                    v1272 = (const void *)*v1186;
                                                    v1271 = v1191;
                                                  }
                                                  if (v1271 >= 0x13)
                                                    v1273 = 19;
                                                  else
                                                    v1273 = v1271;
                                                  if (!memcmp(v1272, "-revert09abecef7bbf", v1273) && v1271 == 19)
                                                  {
                                                    v1188 &= ~0x40000000000000uLL;
                                                    *(_QWORD *)(v1069 + 232) = v1188;
                                                    v1190 = *((unsigned __int8 *)v1186 + 23);
                                                    v1191 = v1186[1];
                                                    v1192 = v1190 & 0x7F;
                                                  }
                                                }
                                                if ((v1190 & 0x80u) == 0)
                                                  v1274 = v1192;
                                                else
                                                  v1274 = v1191;
                                                if (v1274 == 19)
                                                {
                                                  v1275 = v1190;
                                                  v1276 = v1186;
                                                  if ((char)v1190 < 0)
                                                  {
                                                    v1276 = (const void *)*v1186;
                                                    v1275 = v1191;
                                                  }
                                                  if (v1275 >= 0x13)
                                                    v1277 = 19;
                                                  else
                                                    v1277 = v1275;
                                                  if (!memcmp(v1276, "-revertcff6dda604cb", v1277) && v1275 == 19)
                                                  {
                                                    v1188 &= ~0x80000000000000uLL;
                                                    *(_QWORD *)(v1069 + 232) = v1188;
                                                    v1190 = *((unsigned __int8 *)v1186 + 23);
                                                    v1191 = v1186[1];
                                                    v1192 = v1190 & 0x7F;
                                                  }
                                                }
                                                if ((v1190 & 0x80u) == 0)
                                                  v1278 = v1192;
                                                else
                                                  v1278 = v1191;
                                                if (v1278 == 16)
                                                {
                                                  v1279 = v1190;
                                                  v1280 = v1186;
                                                  if ((char)v1190 < 0)
                                                  {
                                                    v1280 = (const void *)*v1186;
                                                    v1279 = v1191;
                                                  }
                                                  if (v1279 >= 0x10)
                                                    v1281 = 16;
                                                  else
                                                    v1281 = v1279;
                                                  if (!memcmp(v1280, "-thisNoAlignAttr", v1281) && v1279 == 16)
                                                  {
                                                    v1188 &= ~0x100000000000000uLL;
                                                    *(_QWORD *)(v1069 + 232) = v1188;
                                                    v1190 = *((unsigned __int8 *)v1186 + 23);
                                                    v1191 = v1186[1];
                                                    v1192 = v1190 & 0x7F;
                                                  }
                                                }
                                                if ((v1190 & 0x80u) == 0)
                                                  v1282 = v1192;
                                                else
                                                  v1282 = v1191;
                                                if (v1282 == 15)
                                                {
                                                  v1283 = v1190;
                                                  v1284 = v1186;
                                                  if ((char)v1190 < 0)
                                                  {
                                                    v1284 = (const void *)*v1186;
                                                    v1283 = v1191;
                                                  }
                                                  if (v1283 >= 0xF)
                                                    v1285 = 15;
                                                  else
                                                    v1285 = v1283;
                                                  if (!memcmp(v1284, "-thisNoNullAttr", v1285) && v1283 == 15)
                                                  {
                                                    v1188 &= ~0x200000000000000uLL;
                                                    *(_QWORD *)(v1069 + 232) = v1188;
                                                    v1190 = *((unsigned __int8 *)v1186 + 23);
                                                    v1191 = v1186[1];
                                                    v1192 = v1190 & 0x7F;
                                                  }
                                                }
                                                if ((v1190 & 0x80u) == 0)
                                                  v1286 = v1192;
                                                else
                                                  v1286 = v1191;
                                                if (v1286 == 28)
                                                {
                                                  v1287 = v1186;
                                                  if ((char)v1190 < 0)
                                                  {
                                                    v1287 = (const void *)*v1186;
                                                    v1190 = v1191;
                                                  }
                                                  if (v1190 >= 0x1C)
                                                    v1288 = 28;
                                                  else
                                                    v1288 = v1190;
                                                  if (!memcmp(v1287, "-disableObjCConstantLiterals", v1288)
                                                    && v1190 == 28)
                                                  {
                                                    v1188 &= ~0x400000000000000uLL;
                                                    *(_QWORD *)(v1069 + 232) = v1188;
                                                  }
                                                }
                                                v1186 += 3;
                                              }
                                              while (v1186 != v1187);
                                            }
                                            __p[0] = __dst;
                                          }
                                          sub_22E3B3CC8((void ***)__p);
LABEL_2727:
                                          v1289 = ~(*(_QWORD *)(v1069 + 232) >> 16);
                                          *(_QWORD *)(v1069 + 140) = *(_QWORD *)(v1069 + 140) & 0xFFFFFBFFFFFFFFFFLL | (((v1289 >> 42) & 1) << 42);
                                          if ((v1289 & 0x40000000000) != 0)
                                          {
                                            *(_QWORD *)v1327 = *(_QWORD *)v1327 & 0xFFFFF7FFFFFFFFFFLL | ((unint64_t)(sub_22E6EBFB4(v1326, 985) != 0) << 43);
                                            *(_QWORD *)v1327 = *(_QWORD *)v1327 & 0xFFFFEFFFFFFFFFFFLL | ((unint64_t)(sub_22E6EBFB4(v1326, 983) != 0) << 44);
                                            *(_QWORD *)v1327 = *(_QWORD *)v1327 & 0xFFFFDFFFFFFFFFFFLL | ((unint64_t)(sub_22E6EBFB4(v1326, 984) != 0) << 45);
                                          }
                                          __dst[0] = &v1336;
                                          v18 = __dst;
                                          goto LABEL_2730;
                                        }
                                        *(_QWORD *)(v311 + 312) = 0x1DF00000000;
                                        if (*(char *)(v311 + 311) < 0)
                                        {
                                          **(_BYTE **)(v311 + 288) = 0;
                                          *(_QWORD *)(v311 + 296) = 0;
                                        }
                                        else
                                        {
                                          *(_BYTE *)(v311 + 288) = 0;
                                          *(_BYTE *)(v311 + 311) = 0;
                                        }
                                        __dst[0] = (void *)(v311 + 320);
                                        __dst[1] = 0;
                                        v1433 = (void *)v311;
                                        LOWORD(v1434) = 1;
                                        *(_BYTE *)(v311 + 320) = 0;
                                        *(_DWORD *)(v311 + 664) = 0;
                                        v1313 = *(unsigned int *)(v311 + 776);
                                        if ((_DWORD)v1313)
                                        {
                                          v1314 = *(_QWORD *)(v311 + 768);
                                          v1315 = 56 * v1313;
                                          do
                                          {
                                            if (*(char *)(v1314 + v1315 - 9) < 0)
                                              operator delete(*(void **)(v1314 + v1315 - 32));
                                            v1315 -= 56;
                                          }
                                          while (v1315);
                                        }
                                        *(_DWORD *)(v311 + 776) = 0;
                                        sub_22E3B89A8((unsigned __int8 **)__dst, v1290, v1291);
                                        v1316 = *(_BYTE *)(v281 + 23);
                                        v1317 = v1316 < 0;
                                        if (v1316 >= 0)
                                          v1299 = (void *)v281;
                                        else
                                          v1299 = *(void **)v281;
                                        v1318 = v1316 & 0x7F;
                                        if (v1317)
                                          v1300 = *(_QWORD *)(v281 + 8);
                                        else
                                          v1300 = v1318;
                                      }
                                      sub_22E3B89A8((unsigned __int8 **)__dst, v1299, v1300);
                                      sub_22E3BB0B8((uint64_t)__dst);
                                      v614 = (_QWORD *)v1329;
                                      goto LABEL_2058;
                                    }
                                    v982 = v981;
                                    v983 = (*((unsigned __int16 *)v614 + 124) | (*((unsigned __int8 *)v614 + 250) << 16)) & 0xFFF0FFFF | 0x80000;
                                    *((_WORD *)v614 + 124) = *((_WORD *)v614 + 124);
                                    *((_BYTE *)v614 + 250) = BYTE2(v983);
                                    v984 = **(const char ***)(v981 + 48);
                                    *(_QWORD *)&v1334 = v984;
                                    if (v984)
                                      v984 = (const char *)strlen(v984);
                                    *((_QWORD *)&v1334 + 1) = v984;
                                    LOBYTE(__dst[0]) = 46;
                                    v985 = llvm::StringRef::find();
                                    if (v985 == -1)
                                    {
                                      v990 = 0;
                                      v991 = 0;
                                      v988 = *((_QWORD *)&v1334 + 1);
                                      v987 = (_BYTE *)v1334;
                                      if (!*((_QWORD *)&v1334 + 1))
                                        goto LABEL_1934;
                                    }
                                    else
                                    {
                                      v986 = v985;
                                      v987 = (_BYTE *)v1334;
                                      if (*((_QWORD *)&v1334 + 1) >= v986)
                                        v988 = v986;
                                      else
                                        v988 = *((_QWORD *)&v1334 + 1);
                                      if (*((_QWORD *)&v1334 + 1) >= v986 + 1)
                                        v989 = v986 + 1;
                                      else
                                        v989 = *((_QWORD *)&v1334 + 1);
                                      v990 = (_BYTE *)(v1334 + v989);
                                      v991 = *((_QWORD *)&v1334 + 1) - v989;
                                      if (!v988)
                                      {
LABEL_1934:
                                        __dst[0] = 0;
                                        v992 = llvm::getAsUnsignedInteger();
                                        v993 = 0;
                                        if (__dst[0] < (void *)0x100000000)
                                          v993 = __dst[0];
                                        if (!v992
                                          && !((unint64_t)__dst[0] >> 32)
                                          && v993 >= 3
                                          && v993 >> 3 <= 0xFA2)
                                        {
                                          if (v993 == 3)
                                          {
                                            if (v991 == 1)
                                            {
                                              __dst[0] = 0;
                                              if ((llvm::getAsUnsignedInteger() & 1) == 0
                                                && !((unint64_t)__dst[0] >> 32))
                                              {
                                                if (LODWORD(__dst[0]) <= 8)
                                                {
                                                  v994 = v614 + 31;
                                                  v995 = (*((unsigned __int16 *)v614 + 124) | (*((unsigned __int8 *)v614
                                                                                               + 250) << 16)) & 0xFFF0FFFF;
                                                  *((_WORD *)v614 + 124) = *((_WORD *)v614 + 124);
                                                  v996 = HIWORD(v995);
LABEL_2778:
                                                  *((_BYTE *)v994 + 2) = v996;
                                                  goto LABEL_1976;
                                                }
                                                goto LABEL_1950;
                                              }
                                            }
                                          }
                                          else
                                          {
                                            v997 = *((_QWORD *)&v1334 + 1);
                                            if (v988 == *((_QWORD *)&v1334 + 1))
                                              goto LABEL_1949;
                                            if (v991 != 1)
                                            {
LABEL_1952:
                                              if (v997 != 6
                                                || (*(_DWORD *)v1334 == 1702125932
                                                  ? (v1000 = *(unsigned __int16 *)(v1334 + 4) == 29811)
                                                  : (v1000 = 0),
                                                    !v1000))
                                              {
                                                *(_QWORD *)(v311 + 312) = 0x18800000000;
                                                if (*(char *)(v311 + 311) < 0)
                                                {
                                                  **(_BYTE **)(v311 + 288) = 0;
                                                  *(_QWORD *)(v311 + 296) = 0;
                                                }
                                                else
                                                {
                                                  *(_BYTE *)(v311 + 288) = 0;
                                                  *(_BYTE *)(v311 + 311) = 0;
                                                }
                                                __dst[0] = (void *)(v311 + 320);
                                                __dst[1] = 0;
                                                v1433 = (void *)v311;
                                                LOWORD(v1434) = 1;
                                                *(_BYTE *)(v311 + 320) = 0;
                                                *(_DWORD *)(v311 + 664) = 0;
                                                v1001 = *(unsigned int *)(v311 + 776);
                                                if ((_DWORD)v1001)
                                                {
                                                  v1002 = *(_QWORD *)(v311 + 768);
                                                  v1003 = 56 * v1001;
                                                  do
                                                  {
                                                    if (*(char *)(v1002 + v1003 - 9) < 0)
                                                      operator delete(*(void **)(v1002 + v1003 - 32));
                                                    v1003 -= 56;
                                                  }
                                                  while (v1003);
                                                }
                                                *(_DWORD *)(v311 + 776) = 0;
                                                llvm::opt::Arg::getAsString();
                                                if (SHIBYTE(__p[2]) >= 0)
                                                  v1004 = __p;
                                                else
                                                  v1004 = (void **)__p[0];
                                                if (SHIBYTE(__p[2]) >= 0)
                                                  v1005 = HIBYTE(__p[2]) & 0x7F;
                                                else
                                                  v1005 = (size_t)__p[1];
                                                sub_22E3B89A8((unsigned __int8 **)__dst, v1004, v1005);
                                                v1006 = **(_QWORD **)(v982 + 48);
                                                v1007 = (unsigned __int8 *)__dst[0];
                                                if (!__dst[0])
                                                {
                                                  v1007 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__dst[1]);
                                                  __dst[0] = v1007;
                                                }
                                                v1007[*v1007 + 1] = 1;
                                                v1008 = __dst[0];
                                                v1009 = *(unsigned __int8 *)__dst[0];
                                                *(_BYTE *)__dst[0] = v1009 + 1;
                                                v1008[v1009 + 2] = v1006;
                                                v614 = (_QWORD *)v1329;
                                                if (SHIBYTE(__p[2]) < 0)
                                                  operator delete(__p[0]);
                                                sub_22E3BB0B8((uint64_t)__dst);
                                              }
                                              goto LABEL_1976;
                                            }
                                            if (*v990 == 48)
                                            {
LABEL_1949:
                                              if (v993 > 4)
                                              {
                                                if (v993 > 6)
                                                {
                                                  if (v993 == 7)
                                                  {
                                                    v994 = v614 + 31;
                                                    LOWORD(v998) = *((_WORD *)v614 + 124);
                                                    v999 = ((unsigned __int16)v998 | (*((unsigned __int8 *)v614 + 250) << 16)) & 0xFFF0FFFF | 0x30000;
                                                  }
                                                  else if (v993 > 9)
                                                  {
                                                    if (v993 > 0xB)
                                                    {
                                                      if (v993 == 12)
                                                      {
                                                        v994 = v614 + 31;
                                                        v998 = (*((unsigned __int16 *)v614 + 124) | (*((unsigned __int8 *)v614 + 250) << 16)) & 0xFFF0FFFF;
                                                        v999 = v998 | 0x60000;
                                                      }
                                                      else
                                                      {
                                                        if (v993 > 0xD)
                                                          goto LABEL_1976;
                                                        v994 = v614 + 31;
                                                        LOWORD(v998) = *((_WORD *)v614 + 124);
                                                        v999 = ((unsigned __int16)v998 | (*((unsigned __int8 *)v614 + 250) << 16)) & 0xFFF0FFFF | 0x70000;
                                                      }
                                                    }
                                                    else
                                                    {
                                                      v994 = v614 + 31;
                                                      LOWORD(v998) = *((_WORD *)v614 + 124);
                                                      v999 = ((unsigned __int16)v998 | (*((unsigned __int8 *)v614 + 250) << 16)) & 0xFFF0FFFF | 0x50000;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    v994 = v614 + 31;
                                                    v998 = (*((unsigned __int16 *)v614 + 124) | (*((unsigned __int8 *)v614
                                                                                                 + 250) << 16)) & 0xFFF0FFFF;
                                                    v999 = v998 | 0x40000;
                                                  }
                                                }
                                                else
                                                {
                                                  v994 = v614 + 31;
                                                  v998 = (*((unsigned __int16 *)v614 + 124) | (*((unsigned __int8 *)v614
                                                                                               + 250) << 16)) & 0xFFF0FFFF;
                                                  v999 = v998 | 0x20000;
                                                }
                                                goto LABEL_2777;
                                              }
LABEL_1950:
                                              v994 = v614 + 31;
                                              LOWORD(v998) = *((_WORD *)v614 + 124);
                                              v999 = ((unsigned __int16)v998 | (*((unsigned __int8 *)v614 + 250) << 16)) & 0xFFF0FFFF | 0x10000;
LABEL_2777:
                                              *(_WORD *)v994 = v998;
                                              v996 = HIWORD(v999);
                                              goto LABEL_2778;
                                            }
                                          }
                                        }
LABEL_1951:
                                        v997 = *((_QWORD *)&v1334 + 1);
                                        goto LABEL_1952;
                                      }
                                    }
                                    if (*v987 == 48)
                                      goto LABEL_1951;
                                    goto LABEL_1934;
                                  }
                                  v970 = *(const char ***)(v969 + 48);
                                  v971 = (char *)*v970;
                                  if (!*v970)
                                  {
                                    v973 = 0;
                                    goto LABEL_1897;
                                  }
                                  v972 = strlen(*v970);
                                  v973 = v972;
                                  if (v972 > 3)
                                  {
                                    if (v972 == 18)
                                    {
                                      if (*(_QWORD *)v971 != 0x6E6F682D74736166
                                        || *((_QWORD *)v971 + 1) != 0x6D676172702D726FLL
                                        || *((_WORD *)v971 + 8) != 29537)
                                      {
                                        v973 = 18;
                                        goto LABEL_1897;
                                      }
                                      v1033 = *((_DWORD *)v614 + 61) | 0xC;
                                    }
                                    else
                                    {
                                      if (v972 != 4)
                                        goto LABEL_1897;
                                      if (*(_DWORD *)v971 != 1953718630)
                                      {
                                        v973 = 4;
                                        goto LABEL_1897;
                                      }
                                      v1033 = *((_DWORD *)v614 + 61) & 0xFFFFFFF3 | 8;
                                    }
                                  }
                                  else if (v972 == 2)
                                  {
                                    if (*(_WORD *)v971 != 28271)
                                    {
                                      v973 = 2;
                                      goto LABEL_1897;
                                    }
                                    v1033 = *((_DWORD *)v614 + 61) & 0xFFFFFFF3 | 4;
                                  }
                                  else
                                  {
                                    if (v972 != 3)
                                    {
LABEL_1897:
                                      *(_QWORD *)(v311 + 312) = 0x18800000000;
                                      if (*(char *)(v311 + 311) < 0)
                                      {
                                        **(_BYTE **)(v311 + 288) = 0;
                                        *(_QWORD *)(v311 + 296) = 0;
                                      }
                                      else
                                      {
                                        *(_BYTE *)(v311 + 288) = 0;
                                        *(_BYTE *)(v311 + 311) = 0;
                                      }
                                      __dst[0] = (void *)(v311 + 320);
                                      __dst[1] = 0;
                                      v1433 = (void *)v311;
                                      LOWORD(v1434) = 1;
                                      *(_BYTE *)(v311 + 320) = 0;
                                      *(_DWORD *)(v311 + 664) = 0;
                                      v975 = *(unsigned int *)(v311 + 776);
                                      if ((_DWORD)v975)
                                      {
                                        v976 = *(_QWORD *)(v311 + 768);
                                        v977 = 56 * v975;
                                        do
                                        {
                                          if (*(char *)(v976 + v977 - 9) < 0)
                                            operator delete(*(void **)(v976 + v977 - 32));
                                          v977 -= 56;
                                        }
                                        while (v977);
                                      }
                                      *(_DWORD *)(v311 + 776) = 0;
                                      llvm::opt::Arg::getAsString();
                                      if (SHIBYTE(__p[2]) >= 0)
                                        v978 = __p;
                                      else
                                        v978 = (void **)__p[0];
                                      if (SHIBYTE(__p[2]) >= 0)
                                        v979 = HIBYTE(__p[2]) & 0x7F;
                                      else
                                        v979 = (size_t)__p[1];
                                      sub_22E3B89A8((unsigned __int8 **)__dst, v978, v979);
                                      sub_22E3B89A8((unsigned __int8 **)__dst, v971, v973);
                                      if (SHIBYTE(__p[2]) < 0)
                                        operator delete(__p[0]);
                                      sub_22E3BB0B8((uint64_t)__dst);
                                      v614 = (_QWORD *)v1329;
                                      goto LABEL_1918;
                                    }
                                    if (*(_WORD *)v971 != 26223 || v971[2] != 102)
                                    {
                                      v973 = 3;
                                      goto LABEL_1897;
                                    }
                                    v1033 = *((_DWORD *)v614 + 61) & 0xFFFFFFF3;
                                  }
                                  *((_DWORD *)v614 + 61) = v1033;
                                  goto LABEL_1918;
                                }
                                *(_QWORD *)(v311 + 312) = 0x1A800000000;
                                if (*(char *)(v311 + 311) < 0)
                                {
                                  **(_BYTE **)(v311 + 288) = 0;
                                  *(_QWORD *)(v311 + 296) = 0;
                                }
                                else
                                {
                                  *(_BYTE *)(v311 + 288) = 0;
                                  *(_BYTE *)(v311 + 311) = 0;
                                }
                                __dst[0] = (void *)(v311 + 320);
                                __dst[1] = 0;
                                v1433 = (void *)v311;
                                LOWORD(v1434) = 1;
                                *(_BYTE *)(v311 + 320) = 0;
                                *(_DWORD *)(v311 + 664) = 0;
                                v889 = *(unsigned int *)(v311 + 776);
                                if ((_DWORD)v889)
                                {
                                  v890 = *(_QWORD *)(v311 + 768);
                                  v891 = 56 * v889;
                                  do
                                  {
                                    if (*(char *)(v890 + v891 - 9) < 0)
                                      operator delete(*(void **)(v890 + v891 - 32));
                                    v891 -= 56;
                                  }
                                  while (v891);
                                }
                                *(_DWORD *)(v311 + 776) = 0;
                                v892 = *(_BYTE *)(v281 + 23);
                                v893 = v892 < 0;
                                if (v892 >= 0)
                                  v894 = (void *)v281;
                                else
                                  v894 = *(void **)v281;
                                v895 = v892 & 0x7F;
                                if (v893)
                                  v896 = *(_QWORD *)(v281 + 8);
                                else
                                  v896 = v895;
                                sub_22E3B89A8((unsigned __int8 **)__dst, v894, v896);
                                sub_22E3BB0B8((uint64_t)__dst);
                                v614 = (_QWORD *)v1329;
                                v885 = *(_QWORD *)(v1329 + 72) & 0x800000000;
                              }
                              if (v885)
                              {
LABEL_1756:
                                v897 = *(_DWORD *)(v281 + 24);
                                if (v897 <= 0x2D && ((1 << v897) & 0x300040000000) != 0
                                  || (*((_BYTE *)v614 + 60) & 1) != 0)
                                {
                                  *v149 &= 0xFFFFAFFFFFFFFFFFLL;
                                }
                                if ((*(_DWORD *)(v281 + 24) & 0xFFFFFFFE) != 0x2C
                                  || (v898 = sub_22E80ACDC(v306, 1447, *((unsigned int *)v614 + 20), v311),
                                      v899 = *((unsigned int *)v614 + 21),
                                      *((_DWORD *)v614 + 20) = v898,
                                      v900 = sub_22E80ACDC(v306, 1444, v899, v311),
                                      v901 = *((unsigned int *)v614 + 22),
                                      *((_DWORD *)v614 + 21) = v900,
                                      *((_DWORD *)v614 + 22) = sub_22E80ACDC(v306, 1448, v901, v311),
                                      (*((_BYTE *)v614 + 76) & 8) != 0))
                                {
                                  if (sub_22E6EBFB4(v306, 1460) || sub_22E6EBFB4(v306, 1459))
                                  {
                                    v902 = sub_22E80ACDC(v306, 1459, *((unsigned int *)v614 + 23), v311);
                                    *((_DWORD *)v614 + 23) = v902;
                                    if (!v902)
                                    {
                                      if (sub_22E6EBFB4(v306, 1460))
                                        *((_DWORD *)v614 + 23) = 1;
                                    }
                                  }
                                }
                                goto LABEL_1768;
                              }
                              goto LABEL_1766;
                            }
                            v843 = *(_DWORD *)(*v842 + 32);
                            if (v843 != 867)
                            {
                              if (v843 == 670)
                                *(_QWORD *)((char *)v614 + 124) |= 0x1000000uLL;
                              goto LABEL_1685;
                            }
                            v844 = (const char **)v842[6];
                            v845 = (char *)*v844;
                            if (!*v844)
                            {
                              v847 = 0;
                              goto LABEL_1670;
                            }
                            v846 = strlen(*v844);
                            if (v846 == 7)
                            {
                              if (*(_DWORD *)v845 != 1667592816 || *(_DWORD *)(v845 + 3) != 1702062435)
                              {
                                v847 = 7;
                                goto LABEL_1670;
                              }
                              v1301 = *(_QWORD *)((char *)v614 + 124) & 0xFFFFFFFFFEFFFFFFLL;
                            }
                            else
                            {
                              v847 = v846;
                              if (v846 != 4)
                              {
LABEL_1670:
                                *(_QWORD *)(v311 + 312) = 0x1D000000000;
                                if (*(char *)(v311 + 311) < 0)
                                {
                                  **(_BYTE **)(v311 + 288) = 0;
                                  *(_QWORD *)(v311 + 296) = 0;
                                }
                                else
                                {
                                  *(_BYTE *)(v311 + 288) = 0;
                                  *(_BYTE *)(v311 + 311) = 0;
                                }
                                __dst[0] = (void *)(v311 + 320);
                                __dst[1] = 0;
                                v1433 = (void *)v311;
                                LOWORD(v1434) = 1;
                                *(_BYTE *)(v311 + 320) = 0;
                                *(_DWORD *)(v311 + 664) = 0;
                                v849 = *(unsigned int *)(v311 + 776);
                                if ((_DWORD)v849)
                                {
                                  v850 = *(_QWORD *)(v311 + 768);
                                  v851 = 56 * v849;
                                  do
                                  {
                                    if (*(char *)(v850 + v851 - 9) < 0)
                                      operator delete(*(void **)(v850 + v851 - 32));
                                    v851 -= 56;
                                  }
                                  while (v851);
                                }
                                *(_DWORD *)(v311 + 776) = 0;
                                v852 = *(void **)(*v842 + 8);
                                if (v852)
                                  v853 = strlen(*(const char **)(*v842 + 8));
                                else
                                  v853 = 0;
                                v306 = v1326;
                                v614 = (_QWORD *)v1329;
                                sub_22E3B89A8((unsigned __int8 **)__dst, v852, v853);
                                sub_22E3B89A8((unsigned __int8 **)__dst, v845, v847);
                                sub_22E3BB0B8((uint64_t)__dst);
                                v281 = (uint64_t)v1325;
                                goto LABEL_1682;
                              }
                              if (*(_DWORD *)v845 != 1953718630)
                              {
                                v847 = 4;
                                goto LABEL_1670;
                              }
                              v1301 = *(_QWORD *)((char *)v614 + 124) | 0x1000000;
                            }
                            *(_QWORD *)((char *)v614 + 124) = v1301;
LABEL_1682:
                            v854 = (_QWORD *)v842[2];
                            if (!v854)
                              v854 = v842;
                            *((_BYTE *)v854 + 44) |= 1u;
                            goto LABEL_1685;
                          }
LABEL_1567:
                          v793 = 0x20000000000;
                          goto LABEL_1568;
                        }
                        v757 = v614[31] & 0xF3FF | (*((unsigned __int8 *)v614 + 250) << 16);
                        *((_WORD *)v614 + 124) = v614[31] & 0xF3FF | 0x800;
                        *((_BYTE *)v614 + 250) = BYTE2(v757);
                        v758 = llvm::opt::ArgList::getLastArgValue();
                        if (v759 > 0x7FFFFFFFFFFFFFF7)
LABEL_2792:
                          abort();
                        v760 = (const void *)v758;
                        v761 = (void *)v759;
                        if (v759 >= 0x17)
                        {
                          v764 = (v759 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v759 | 7) != 0x17)
                            v764 = v759 | 7;
                          v765 = v764 + 1;
                          v762 = operator new(v764 + 1);
                          v766 = v765 | 0x8000000000000000;
                          v311 = v1328;
                          v1433 = (void *)v766;
                          __dst[0] = v762;
                          __dst[1] = v761;
                        }
                        else
                        {
                          HIBYTE(v1433) = v759;
                          v762 = __dst;
                          if (!v759)
                            goto LABEL_1509;
                        }
                        memmove(v762, v760, (size_t)v761);
LABEL_1509:
                        *((_BYTE *)v761 + (_QWORD)v762) = 0;
                        v767 = (void **)(v614 + 56);
                        if (*((char *)v614 + 471) < 0)
                          operator delete(*v767);
                        *(_OWORD *)v767 = *(_OWORD *)__dst;
                        v614[58] = v1433;
                        v281 = (uint64_t)v1325;
                        goto LABEL_1512;
                      }
                      v696 = sub_22E6EBFB4(v306, 1431);
                      if (v696)
                      {
                        v697 = *(const char ***)(v696 + 48);
                        v698 = (char *)*v697;
                        v699 = *v697 ? strlen(*v697) : 0;
                        if (sub_22F1DBBF0(v1329 + 400, (uint64_t)v698, v699))
                        {
                          *(_QWORD *)(v1328 + 312) = 0x1C500000000;
                          if (*(char *)(v1328 + 311) < 0)
                          {
                            **(_BYTE **)(v1328 + 288) = 0;
                            *(_QWORD *)(v1328 + 296) = 0;
                          }
                          else
                          {
                            *(_BYTE *)(v1328 + 288) = 0;
                            *(_BYTE *)(v1328 + 311) = 0;
                          }
                          __dst[0] = (void *)(v1328 + 320);
                          __dst[1] = 0;
                          v1433 = (void *)v1328;
                          LOWORD(v1434) = 1;
                          *(_BYTE *)(v1328 + 320) = 0;
                          *(_DWORD *)(v1328 + 664) = 0;
                          v700 = *(unsigned int *)(v1328 + 776);
                          if ((_DWORD)v700)
                          {
                            v701 = *(_QWORD *)(v1328 + 768);
                            v702 = 56 * v700;
                            do
                            {
                              if (*(char *)(v701 + v702 - 9) < 0)
                                operator delete(*(void **)(v701 + v702 - 32));
                              v702 -= 56;
                            }
                            while (v702);
                          }
                          *(_DWORD *)(v1328 + 776) = 0;
                          sub_22E3B89A8((unsigned __int8 **)__dst, v698, v699);
                          sub_22E3BB0B8((uint64_t)__dst);
                          v614 = (_QWORD *)v1329;
                          v618 = v1327;
                        }
                      }
                      if (sub_22E6EBFB4(v306, 1410))
                      {
                        v703 = *((_BYTE *)v614 + 150);
                        *((_WORD *)v614 + 74) |= 2u;
                        *((_BYTE *)v614 + 150) = v703;
                        v704 = *((_DWORD *)v614 + 100);
                        if (((1 << v704) & 0xDD) == 0)
                        {
                          if (v704 != 1
                            || (__dst[1] = 0,
                                __dst[0] = (void *)0x800000070000000ALL,
                                (sub_22E3B38EC((_DWORD *)v614 + 101, __dst) & 1) != 0))
                          {
                            *(_QWORD *)(v1328 + 312) = 0x13700000000;
                            if (*(char *)(v1328 + 311) < 0)
                            {
                              **(_BYTE **)(v1328 + 288) = 0;
                              *(_QWORD *)(v1328 + 296) = 0;
                            }
                            else
                            {
                              *(_BYTE *)(v1328 + 288) = 0;
                              *(_BYTE *)(v1328 + 311) = 0;
                            }
                            v1342[0] = v1328 + 320;
                            v1342[1] = 0;
                            v1342[2] = v1328;
                            v1343 = 1;
                            *(_BYTE *)(v1328 + 320) = 0;
                            *(_DWORD *)(v1328 + 664) = 0;
                            v713 = *(unsigned int *)(v1328 + 776);
                            if ((_DWORD)v713)
                            {
                              v714 = *(_QWORD *)(v1328 + 768);
                              v715 = 56 * v713;
                              do
                              {
                                if (*(char *)(v714 + v715 - 9) < 0)
                                  operator delete(*(void **)(v714 + v715 - 32));
                                v715 -= 56;
                              }
                              while (v715);
                            }
                            *(_DWORD *)(v1328 + 776) = 0;
                            sub_22E3BB0B8((uint64_t)v1342);
                            v614 = (_QWORD *)v1329;
                            v618 = v1327;
                          }
                        }
                      }
                      if (sub_22E6EBFB4(v306, 1430))
                      {
                        v716 = *(_QWORD *)v618;
                        v717 = *(unsigned __int16 *)(v618 + 8) | (*(unsigned __int8 *)(v618 + 10) << 16) | 4;
                      }
                      else
                      {
                        sub_22F274330((uint64_t)(v614 + 50));
                        v716 = *(_QWORD *)((char *)v614 + 140);
                        v727 = 4;
                        if (!v728)
                          v727 = 0;
                        v717 = *((_WORD *)v614 + 74) & 0xFFFB | (*((unsigned __int8 *)v614 + 150) << 16) | v727;
                      }
                      *(_QWORD *)v618 = v716;
                      *(_WORD *)(v618 + 8) = v717;
                      *(_BYTE *)(v618 + 10) = BYTE2(v717);
                      if (sub_22E6EC70C(v306, 0x59Au, 0x481u))
                      {
                        if (!llvm::opt::Option::matches())
                          goto LABEL_1441;
                        if ((*((_BYTE *)v614 + 246) & 6) != 0)
                        {
                          *(_QWORD *)(v1328 + 312) = 0x1DA00000000;
                          if (*(char *)(v1328 + 311) < 0)
                          {
                            **(_BYTE **)(v1328 + 288) = 0;
                            *(_QWORD *)(v1328 + 296) = 0;
                          }
                          else
                          {
                            *(_BYTE *)(v1328 + 288) = 0;
                            *(_BYTE *)(v1328 + 311) = 0;
                          }
                          v1340[0] = v1328 + 320;
                          v1340[1] = 0;
                          v1340[2] = v1328;
                          v1341 = 1;
                          *(_BYTE *)(v1328 + 320) = 0;
                          *(_DWORD *)(v1328 + 664) = 0;
                          v723 = *(unsigned int *)(v1328 + 776);
                          if ((_DWORD)v723)
                          {
                            v724 = *(_QWORD *)(v1328 + 768);
                            v725 = 56 * v723;
                            do
                            {
                              if (*(char *)(v724 + v725 - 9) < 0)
                                operator delete(*(void **)(v724 + v725 - 32));
                              v725 -= 56;
                            }
                            while (v725);
                          }
                          *(_DWORD *)(v1328 + 776) = 0;
                          v726 = v1340;
LABEL_1440:
                          sub_22E3BB0B8((uint64_t)v726);
                          v614 = (_QWORD *)v1329;
                          v618 = v1327;
LABEL_1441:
                          if ((*(_WORD *)(v618 + 8) & 8) == 0 && sub_22E6EBFB4(v306, 786))
                          {
                            v732 = *(_BYTE *)(v618 + 10);
                            *(_WORD *)(v618 + 8) |= 0x10u;
                            *(_BYTE *)(v618 + 10) = v732;
                          }
                          if (sub_22E6EBFB4(v306, 1433))
                          {
                            v733 = *((_WORD *)v614 + 74) & 0xFFDF | (*((unsigned __int8 *)v614 + 150) << 16);
                            *((_WORD *)v614 + 74) = *((_WORD *)v614 + 74) & 0xFFDF | (32 * (*((_DWORD *)v614 + 100) == 1));
                            *((_BYTE *)v614 + 150) = BYTE2(v733);
                          }
                          goto LABEL_1446;
                        }
                        v722 = *(_WORD *)(v618 + 8);
                        if ((v722 & 4) == 0)
                        {
                          *(_QWORD *)(v1328 + 312) = 0x1D900000000;
                          if (*(char *)(v1328 + 311) < 0)
                          {
                            **(_BYTE **)(v1328 + 288) = 0;
                            *(_QWORD *)(v1328 + 296) = 0;
                          }
                          else
                          {
                            *(_BYTE *)(v1328 + 288) = 0;
                            *(_BYTE *)(v1328 + 311) = 0;
                          }
                          v1338[0] = v1328 + 320;
                          v1338[1] = 0;
                          v1338[2] = v1328;
                          v1339 = 1;
                          *(_BYTE *)(v1328 + 320) = 0;
                          *(_DWORD *)(v1328 + 664) = 0;
                          v729 = *(unsigned int *)(v1328 + 776);
                          if ((_DWORD)v729)
                          {
                            v730 = *(_QWORD *)(v1328 + 768);
                            v731 = 56 * v729;
                            do
                            {
                              if (*(char *)(v730 + v731 - 9) < 0)
                                operator delete(*(void **)(v730 + v731 - 32));
                              v731 -= 56;
                            }
                            while (v731);
                          }
                          *(_DWORD *)(v1328 + 776) = 0;
                          v726 = v1338;
                          goto LABEL_1440;
                        }
                        v720 = v722 | 8;
                        LOBYTE(v721) = *(_BYTE *)(v618 + 10);
                        *(_QWORD *)v618 = *(_QWORD *)v618;
                      }
                      else
                      {
                        v718 = *(unsigned __int16 *)(v618 + 8);
                        if ((v718 & 2) == 0)
                          goto LABEL_1441;
                        v719 = v718 & 0xFFFFFFF7 | (*(unsigned __int8 *)(v618 + 10) << 16);
                        v720 = (2 * v718) & 8 | v718 & 0xFFF7;
                        *(_QWORD *)v618 = *(_QWORD *)v618;
                        v721 = HIWORD(v719);
                      }
                      *(_BYTE *)(v618 + 10) = v721;
                      *(_WORD *)(v618 + 8) = v720;
                      goto LABEL_1441;
                    }
                    v537 = *(_QWORD *)(v1329 + 124);
                    v538 = *(_QWORD *)(v1329 + 116);
                    v539 = *(_QWORD *)(v1329 + 108);
                    v545 = *(_QWORD *)(v1329 + 132) | 0x400000000;
LABEL_1088:
                    *(_QWORD *)(v1329 + 108) = v539;
                    *(_QWORD *)(v1329 + 116) = v538;
                    *(_QWORD *)(v1329 + 124) = v537;
                    *(_QWORD *)(v1329 + 132) = v545;
                    goto LABEL_1089;
                  }
                }
                else
                {
                  v541 = v540 & 0xFFFFFFFCFFFFFFFFLL;
                }
                v545 = v541 & 0xFFFFFFF9FFFFFFFFLL;
                goto LABEL_1088;
              }
            }
LABEL_223:
            *(_QWORD *)(a6 + 312) = 0x18800000000;
            if (*(char *)(a6 + 311) < 0)
            {
              **(_BYTE **)(a6 + 288) = 0;
              *(_QWORD *)(a6 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(a6 + 288) = 0;
              *(_BYTE *)(a6 + 311) = 0;
            }
            __dst[0] = (void *)(a6 + 320);
            __dst[1] = 0;
            v1433 = (void *)a6;
            LOWORD(v1434) = 1;
            *(_BYTE *)(a6 + 320) = 0;
            *(_DWORD *)(a6 + 664) = 0;
            v107 = *(unsigned int *)(a6 + 776);
            if ((_DWORD)v107)
            {
              v108 = *(_QWORD *)(a6 + 768);
              v109 = 56 * v107;
              do
              {
                if (*(char *)(v108 + v109 - 9) < 0)
                  operator delete(*(void **)(v108 + v109 - 32));
                v109 -= 56;
              }
              while (v109);
            }
            *(_DWORD *)(a6 + 776) = 0;
            llvm::opt::Arg::getAsString();
            if (SHIBYTE(__p[2]) >= 0)
              v110 = __p;
            else
              v110 = (void **)__p[0];
            if (SHIBYTE(__p[2]) >= 0)
              v111 = HIBYTE(__p[2]) & 0x7F;
            else
              v111 = (size_t)__p[1];
            sub_22E3B89A8((unsigned __int8 **)__dst, v110, v111);
            v112 = **(_QWORD **)(v89 + 48);
            v113 = (unsigned __int8 *)__dst[0];
            if (!__dst[0])
            {
              v113 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__dst[1]);
              __dst[0] = v113;
            }
            v113[*v113 + 1] = 1;
            v114 = __dst[0];
            v115 = *(unsigned __int8 *)__dst[0];
            *(_BYTE *)__dst[0] = v115 + 1;
            v114[v115 + 2] = v112;
            a1 = v1329;
            if (SHIBYTE(__p[2]) < 0)
              operator delete(__p[0]);
            sub_22E3BB0B8((uint64_t)__dst);
          }
          LODWORD(v92) = v19;
          goto LABEL_243;
        }
        if ((*(_BYTE *)(v21 + 18) & 2) == 0)
        {
LABEL_110:
          v1319 = 0;
          goto LABEL_160;
        }
        *(_QWORD *)(a6 + 312) = 0x14600000000;
        if (*(char *)(a6 + 311) < 0)
        {
          **(_BYTE **)(a6 + 288) = 0;
          *(_QWORD *)(a6 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(a6 + 288) = 0;
          *(_BYTE *)(a6 + 311) = 0;
        }
        __dst[0] = (void *)(a6 + 320);
        __dst[1] = 0;
        v1433 = (void *)a6;
        LOWORD(v1434) = 1;
        *(_BYTE *)(a6 + 320) = 0;
        *(_DWORD *)(a6 + 664) = 0;
        v705 = *(unsigned int *)(a6 + 776);
        if ((_DWORD)v705)
        {
          v706 = *(_QWORD *)(a6 + 768);
          v707 = 56 * v705;
          do
          {
            if (*(char *)(v706 + v707 - 9) < 0)
              operator delete(*(void **)(v706 + v707 - 32));
            v707 -= 56;
          }
          while (v707);
        }
        *(_DWORD *)(a6 + 776) = 0;
        llvm::opt::Arg::getAsString();
        if (SHIBYTE(__p[2]) >= 0)
          v708 = __p;
        else
          v708 = (void **)__p[0];
        if (SHIBYTE(__p[2]) >= 0)
          v709 = HIBYTE(__p[2]) & 0x7F;
        else
          v709 = (size_t)__p[1];
        sub_22E3B89A8((unsigned __int8 **)__dst, v708, v709);
        v710 = (unsigned __int8 *)__dst[0];
        if (!__dst[0])
        {
          v710 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__dst[1]);
          __dst[0] = v710;
        }
        v710[*v710 + 1] = 1;
        v711 = __dst[0];
        v712 = *(unsigned __int8 *)__dst[0];
        *(_BYTE *)__dst[0] = v712 + 1;
        v711[v712 + 2] = "Metal";
        a1 = v1329;
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        sub_22E3BB0B8((uint64_t)__dst);
      }
      else
      {
        v19 = 58;
      }
LABEL_109:
      if (v9 == 13)
        goto LABEL_127;
      goto LABEL_110;
    }
  }
  if (sub_22E6EBFB4(a2, 1410))
  {
    v17 = *(_BYTE *)(a1 + 150);
    *(_WORD *)(a1 + 148) |= 2u;
    *(_BYTE *)(a1 + 150) = v17;
  }
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a1 + 52) & 0xFFFFFFF3 | (4 * (sub_22E80ACDC(v7, 2838, 0, a6) & 3));
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a1 + 52) & 0xFFFFFFEF | (16 * (sub_22E6EBFB4(v7, 2837) != 0));
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFDFFFFFFFFFFFFFFLL | ((unint64_t)(sub_22E6EBFB4(v7, 1071) != 0) << 57);
  llvm::opt::ArgList::getAllArgValues();
  sub_22E6ED5E8((uint64_t)"-fsanitize=", 0xBuLL, (uint64_t)__dst[0], (uint64_t)__dst[1], a6, (_QWORD *)(a1 + 256));
  __p[0] = __dst;
  v18 = __p;
LABEL_2730:
  sub_22E3B3CC8((void ***)v18);
}

uint64_t sub_22E6FF9B8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_22E6FF9E0 + 4 * byte_22F45DBA3[a1 - 1]))(1);
}

BOOL sub_22E6FF9E0@<W0>(int a1@<W8>)
{
  return a1 == 3;
}

BOOL sub_22E6FFA38(uint64_t *a1, const char **a2, uint64_t a3, uint64_t a4, std::string::size_type a5)
{
  std::string::pointer v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  BOOL v14;
  void *size;
  std::string *p_p;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  size_t v21;
  size_t v22;
  size_t v23;
  void **p_size;
  int v25;
  int v26;
  void **v27;
  int v28;
  int v29;
  void **v30;
  int v31;
  int v32;
  void **v33;
  int v34;
  int v35;
  void **v36;
  int v37;
  std::string::value_type v38;
  int v39;
  std::string::size_type v40;
  int v41;
  _DWORD *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  _DWORD *v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  void **v54;
  int v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  const char **v80;
  char *v81;
  size_t v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  size_t v88;
  uint64_t v89;
  const char **v90;
  char *v91;
  size_t v92;
  size_t v93;
  unsigned int v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  size_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const char **v107;
  char *v108;
  size_t v109;
  uint64_t v110;
  size_t v111;
  BOOL v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  size_t v119;
  uint64_t v120;
  const char **v121;
  char *v122;
  size_t v123;
  size_t v124;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _BYTE *v131;
  size_t v132;
  uint64_t v133;
  const char **v134;
  char *v135;
  size_t v136;
  size_t v137;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _BYTE *v143;
  size_t v144;
  uint64_t v145;
  uint64_t i;
  _QWORD *v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  BOOL v151;
  const char *v152;
  std::string *v153;
  std::string::size_type v154;
  std::string::size_type v155;
  const void *v156;
  std::string *p_dst;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  std::string *v161;
  unint64_t v162;
  std::string::value_type *v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  char *v169;
  std::string *v170;
  unint64_t v171;
  uint64_t v172;
  char *v173;
  __int128 v174;
  int64x2_t v175;
  std::string::size_type v176;
  uint64_t v177;
  uint64_t v178;
  int64x2_t *v179;
  uint64_t j;
  std::string::pointer v181;
  const char **v182;
  const char *v183;
  size_t v184;
  std::string::size_type v185;
  llvm::StringMapImpl *v186;
  const char *v187;
  std::string::size_type v188;
  unint64_t v189;
  unint64_t v190;
  char *v191;
  std::string::size_type v192;
  unint64_t v193;
  std::string::size_type v194;
  char *v195;
  _BYTE *v196;
  BOOL v197;
  uint64_t v198;
  std::string *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  void **v203;
  __int128 v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  size_t v209;
  int v210;
  int v211;
  unint64_t v212;
  size_t v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  std::string::size_type v224;
  uint64_t v225;
  const char *v226;
  const char *v227;
  size_t v228;
  std::string::size_type v229;
  uint64_t v230;
  int v231;
  unsigned int v232;
  uint64_t v233;
  int v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  int v240;
  int v241;
  unsigned int v242;
  int v243;
  unsigned int v244;
  int v245;
  unsigned int v246;
  uint64_t v247;
  int v248;
  unint64_t v249;
  unint64_t v250;
  int v251;
  unsigned int v252;
  int v253;
  unsigned int v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  int v258;
  void **v259;
  int v260;
  int v261;
  unint64_t v262;
  unint64_t v263;
  int v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t *v283;
  uint64_t *v284;
  int v285;
  uint64_t v286;
  size_t v287;
  const char **v288;
  const char *v289;
  unsigned int v291;
  BOOL v292;
  int v293;
  int v294;
  uint64_t *v296;
  uint64_t v297;
  int v298;
  int v299;
  int HasColors;
  int v301;
  _QWORD *v302;
  uint64_t *v303;
  uint64_t v304;
  char *v305;
  uint64_t v306;
  char *v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  char *v311;
  char *v312;
  char *v313;
  __int128 v314;
  int64x2_t v315;
  size_t *v316;
  unsigned __int8 *v317;
  char v318;
  char v319;
  int v320;
  unsigned __int8 *v321;
  unsigned __int8 *v322;
  size_t v323;
  size_t v324;
  unsigned __int8 *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unsigned __int8 *v331;
  uint64_t v332;
  uint64_t v333;
  char v334;
  BOOL v335;
  void *v336;
  size_t v337;
  size_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  std::string::size_type v345;
  std::string::size_type v346;
  char v347;
  uint64_t v348;
  char v349;
  BOOL v350;
  int *v351;
  uint64_t v352;
  BOOL v353;
  unint64_t v354;
  char v355;
  int v356;
  int v357;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  char v362;
  BOOL v363;
  int *v364;
  size_t v365;
  size_t v366;
  char v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  char v373;
  char v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  __int128 *v381;
  void **v382;
  int v383;
  unint64_t v384;
  unint64_t v385;
  void **v386;
  int v387;
  int v388;
  void **v389;
  int v390;
  int v391;
  uint64_t v392;
  uint64_t v393;
  void **v394;
  int v395;
  int v396;
  void **v397;
  int v398;
  llvm::sys *v399;
  int v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  int v404;
  __int128 v405;
  void **v406;
  int v407;
  int v408;
  void **v409;
  int v410;
  int v411;
  uint64_t v412;
  uint64_t v413;
  const char **v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  _BYTE *v418;
  size_t v419;
  uint64_t v420;
  unsigned __int8 *v421;
  std::string::size_type v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  const char **v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  _BYTE *v430;
  size_t v431;
  uint64_t v432;
  unsigned __int8 *v433;
  std::string::size_type v434;
  uint64_t v435;
  std::string::size_type v436;
  std::string::size_type v437;
  void **v438;
  int v439;
  int v440;
  char v441;
  char v442;
  char v443;
  unint64_t v444;
  unint64_t v445;
  uint64_t v446;
  uint64_t v447;
  const char **v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  _BYTE *v452;
  size_t v453;
  uint64_t v454;
  unsigned __int8 *v455;
  std::string::size_type v456;
  uint64_t v457;
  uint64_t v458;
  __int16 v459;
  uint64_t v460;
  __int16 v461;
  __int16 v462;
  __int16 v463;
  char v464;
  char v465;
  char v466;
  __int128 v467;
  __int128 v468;
  int v469;
  __int128 v470;
  uint64_t v471;
  __int16 v472;
  void **v473;
  int v474;
  int v475;
  uint64_t v476;
  char v477;
  void **v478;
  int v479;
  uint64_t v480;
  __int16 v481;
  uint64_t v482;
  char v483;
  uint64_t v484;
  unint64_t v485;
  const void *LastArgValue;
  size_t v487;
  std::string::size_type v488;
  std::string::size_type v489;
  std::string::value_type v490;
  int v491;
  std::string::size_type v492;
  std::string::size_type v493;
  const void *v494;
  _BYTE *v495;
  std::string::size_type v496;
  std::string::size_type v497;
  void **v498;
  uint64_t v499;
  std::string::size_type v500;
  _QWORD **v501;
  char *v502;
  std::string::size_type v503;
  _BYTE *v504;
  std::string::size_type v506;
  const void *v507;
  std::string::size_type v508;
  std::string::size_type v509;
  const void *v510;
  std::string::size_type v511;
  _BYTE *v512;
  uint64_t v513;
  uint64_t v514;
  std::string *v515;
  uint64_t v516;
  uint64_t v517;
  char **v518;
  char **v519;
  char *v520;
  _BYTE *v521;
  void *v522;
  _QWORD *v523;
  uint64_t v524;
  std::string::size_type v525;
  const char **v526;
  const char *v527;
  size_t v528;
  std::string::size_type v529;
  std::string *v530;
  uint64_t v531;
  uint64_t v532;
  std::string *v533;
  std::string::size_type v534;
  std::string *v535;
  std::string *v536;
  unint64_t v537;
  unint64_t v538;
  char *v539;
  std::string *v540;
  char *v541;
  __int128 v542;
  int64x2_t v543;
  uint64_t v544;
  std::string::size_type v545;
  const char *v546;
  std::string::size_type v547;
  const void *v548;
  std::string::size_type v549;
  unsigned int HashValue;
  uint64_t v551;
  std::string::size_type v552;
  const char *v553;
  size_t v554;
  std::string::size_type v555;
  std::string *v556;
  uint64_t v557;
  uint64_t v558;
  _BOOL4 v559;
  std::string *v560;
  uint64_t *v561;
  char v562;
  uint64_t v563;
  char v564;
  int v565;
  int v566;
  const char *v567;
  size_t v568;
  std::string::size_type v569;
  std::string *v570;
  uint64_t v571;
  uint64_t v572;
  const char **v573;
  const char *v574;
  size_t v575;
  std::string::size_type v576;
  std::string::size_type v577;
  const void *v578;
  std::string *v579;
  std::string::size_type v580;
  std::string::size_type v581;
  std::string *v582;
  std::string::size_type v583;
  std::string *v584;
  uint64_t *v585;
  std::string::size_type v586;
  const char *v587;
  uint64_t v588;
  const char **v589;
  void *v590;
  void *v591;
  uint64_t v592;
  uint64_t v593;
  std::string *v594;
  std::string::size_type v595;
  std::string *v596;
  std::string::size_type v597;
  uint64_t v598;
  uint64_t v599;
  std::string *v600;
  std::string::size_type v601;
  std::string *v602;
  std::string::size_type v603;
  uint64_t v604;
  std::string::size_type v605;
  const char **v606;
  const char *v607;
  std::string::size_type v608;
  uint64_t v609;
  std::string::size_type v610;
  const char **v611;
  const char *v612;
  std::string::size_type v613;
  uint64_t v614;
  std::string::size_type v615;
  const char **v616;
  const char *v617;
  std::string::size_type v618;
  char v619;
  uint64_t v620;
  std::string::size_type v621;
  const char **v622;
  const char *v623;
  std::string::size_type v624;
  uint64_t v625;
  std::string::size_type v626;
  const char **v627;
  const char *v628;
  std::string::size_type v629;
  uint64_t v630;
  std::string::size_type v631;
  const char **v632;
  const char *v633;
  std::string::size_type v634;
  uint64_t v635;
  std::string::size_type v636;
  const char **v637;
  const char *v638;
  std::string::size_type v639;
  uint64_t v640;
  std::string::size_type v641;
  const char **v642;
  const char *v643;
  std::string::size_type v644;
  uint64_t v645;
  std::string::size_type v646;
  const char **v647;
  const char *v648;
  std::string::size_type v649;
  uint64_t v650;
  uint64_t *v651;
  uint64_t v652;
  int v653;
  const char **v654;
  const char *v655;
  std::string::size_type v656;
  uint64_t v657;
  std::string::size_type v658;
  const char **v659;
  const char *v660;
  size_t v661;
  char v662;
  uint64_t v663;
  std::string::size_type v664;
  const char **v665;
  const char *v666;
  size_t v667;
  std::string::size_type v668;
  std::string *v669;
  uint64_t v670;
  uint64_t v671;
  std::string *v672;
  std::string::size_type v673;
  std::string *v674;
  std::string *v675;
  unint64_t v676;
  unint64_t v677;
  char *v678;
  std::string *v679;
  char *v680;
  __int128 v681;
  int64x2_t v682;
  uint64_t v683;
  std::string::size_type v684;
  std::string *v685;
  std::string **v686;
  const char **v687;
  const char *v688;
  size_t v689;
  std::string::size_type v690;
  std::string *v691;
  uint64_t v692;
  uint64_t v693;
  std::string *v694;
  std::string::size_type v695;
  std::string *v696;
  std::string *v697;
  unint64_t v698;
  unint64_t v699;
  unint64_t v700;
  char *v701;
  std::string *v702;
  char *v703;
  __int128 v704;
  int64x2_t v705;
  uint64_t v706;
  uint64_t v707;
  const char **v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  _BYTE *v712;
  size_t v713;
  uint64_t v714;
  unsigned __int8 *v715;
  std::string::size_type v716;
  uint64_t v717;
  uint64_t v718;
  std::string::pointer v719;
  std::string::size_type v720;
  std::string *v721;
  const char *v722;
  size_t v723;
  std::string::size_type v724;
  std::string *v725;
  uint64_t v726;
  uint64_t v727;
  std::string *v728;
  std::string::pointer v729;
  std::string *v730;
  unint64_t v731;
  unint64_t v732;
  unint64_t v733;
  char *v734;
  std::string *v735;
  char *v736;
  __int128 v737;
  int64x2_t v738;
  char v739;
  std::string *v740;
  BOOL v741;
  uint64_t v742;
  __int16 v743;
  int v744;
  __int16 v745;
  int v746;
  __int16 v747;
  int v748;
  __int16 v749;
  int v750;
  uint64_t v751;
  _QWORD **v752;
  const char **v753;
  const char *v754;
  size_t v755;
  int v757;
  int v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  void *v763;
  size_t v764;
  uint64_t v765;
  unsigned __int8 *v766;
  std::string::size_type v767;
  uint64_t v768;
  uint64_t v769;
  unsigned int v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  unsigned __int8 *v776;
  std::string::size_type v777;
  uint64_t v778;
  uint64_t v779;
  unint64_t v780;
  uint64_t v781;
  int v782;
  int v783;
  __int16 v784;
  std::string::size_type v785;
  __int128 *v786;
  __int128 *k;
  __int128 v788;
  char v789;
  std::string::size_type v790;
  std::string::size_type v791;
  std::string *v792;
  size_t v793;
  BOOL v794;
  uint64_t v795;
  std::string::size_type v796;
  uint64_t v797;
  void **v798;
  int v799;
  int v800;
  void **v801;
  int v802;
  int v803;
  unint64_t v804;
  BOOL v805;
  std::string::pointer v806;
  std::string::size_type v807;
  const char *v808;
  size_t v809;
  std::string::size_type v810;
  std::string *v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  const char **v815;
  char *v816;
  size_t v817;
  _BYTE *v818;
  int AsUnsignedInteger;
  int v820;
  int v821;
  std::string::size_type v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  const char **v827;
  const char *v828;
  size_t v829;
  char *v832;
  std::string::pointer v833;
  uint64_t *m;
  uint64_t v835;
  int v836;
  const char **v837;
  char *v838;
  size_t v839;
  size_t v840;
  std::string::size_type v841;
  std::string *v842;
  uint64_t v843;
  uint64_t v844;
  std::string *v845;
  unint64_t v846;
  std::string::value_type *v847;
  std::string *v848;
  uint64_t v849;
  unint64_t v850;
  unint64_t v851;
  char *v852;
  std::string *v853;
  char *v854;
  __int128 v855;
  std::string *v856;
  std::string::pointer v857;
  std::string::size_type v858;
  std::string::pointer v859;
  std::string::size_type v860;
  uint64_t v861;
  std::string::pointer v862;
  std::string::size_type v863;
  const char *v864;
  unint64_t v865;
  uint64_t v866;
  unint64_t v867;
  std::string::size_type v868;
  size_t v869;
  char *v870;
  _BYTE *v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  std::string *v875;
  size_t v876;
  uint64_t v877;
  uint64_t v878;
  std::string *v879;
  uint64_t v880;
  uint64_t v881;
  unint64_t v882;
  __int128 v883;
  char *v884;
  int v885;
  int v886;
  uint64_t v887;
  __int16 v888;
  uint64_t v889;
  __int16 v890;
  uint64_t v891;
  __int16 v892;
  uint64_t v893;
  __int16 v894;
  __int16 v895;
  __int16 v896;
  __int16 v897;
  __int16 v898;
  __int16 v899;
  __int16 v900;
  __int16 v901;
  __int16 v902;
  __int16 v903;
  __int16 v904;
  __int16 v905;
  int v906;
  uint64_t v907;
  std::string::value_type v908;
  uint64_t v909;
  std::string::value_type v910;
  uint64_t v911;
  std::string::value_type v912;
  void **v913;
  int v914;
  int v915;
  void **v916;
  int v917;
  int v918;
  void **v919;
  int v920;
  int v921;
  uint64_t v922;
  std::string::value_type v923;
  void **v924;
  int v925;
  int v926;
  unint64_t v927;
  unint64_t v928;
  int v929;
  std::string::pointer v930;
  std::string::size_type v931;
  int64x2_t *v932;
  const char **v933;
  char *v934;
  size_t v935;
  std::string::size_type v936;
  _BYTE *v937;
  BOOL v938;
  std::string *v939;
  uint64_t v940;
  uint64_t v941;
  unint64_t v942;
  std::string::pointer v943;
  unint64_t v944;
  std::string *v945;
  uint64_t v946;
  uint64_t v947;
  unint64_t v948;
  unint64_t v949;
  char *v950;
  char *v951;
  char *v952;
  __int128 v953;
  int64x2_t v954;
  std::string::pointer v955;
  std::string::size_type v956;
  int64x2_t *v957;
  const char **v958;
  char *v959;
  size_t v960;
  std::string::size_type v961;
  _BYTE *v962;
  BOOL v963;
  std::string *v964;
  uint64_t v965;
  uint64_t v966;
  unint64_t v967;
  std::string::pointer v968;
  unint64_t v969;
  std::string *v970;
  uint64_t v971;
  uint64_t v972;
  unint64_t v973;
  unint64_t v974;
  char *v975;
  char *v976;
  char *v977;
  __int128 v978;
  int64x2_t v979;
  __int128 *v980;
  __int128 *v981;
  std::string::__raw *v982;
  unint64_t *v983;
  char *v984;
  __int128 v985;
  unint64_t v986;
  uint64_t v987;
  unint64_t v988;
  uint64_t v989;
  unint64_t v990;
  _BYTE *v991;
  char *v992;
  __int128 v993;
  char *v994;
  __int128 v995;
  int64x2_t v996;
  char *v997;
  std::string::pointer v998;
  std::string::size_type v999;
  char *v1000;
  std::string::pointer v1001;
  std::string::size_type v1002;
  unint64_t *v1003;
  int64x2_t *v1004;
  const char **v1005;
  char *v1006;
  size_t v1007;
  std::string::size_type v1008;
  _BYTE *v1009;
  BOOL v1010;
  std::string *v1011;
  uint64_t v1012;
  uint64_t v1013;
  unint64_t v1014;
  unint64_t v1015;
  unint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  unint64_t v1019;
  unint64_t v1020;
  char *v1021;
  char *v1022;
  char *v1023;
  __int128 v1024;
  int64x2_t v1025;
  int v1026;
  int v1027;
  std::string::size_type v1028;
  uint64_t v1029;
  const char **v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  unsigned __int8 *v1035;
  std::string::size_type v1036;
  uint64_t v1037;
  uint64_t v1038;
  unsigned __int8 *v1039;
  std::string::size_type v1040;
  uint64_t v1041;
  std::string *v1042;
  std::string::value_type v1043;
  int v1044;
  std::string::size_type v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  std::string::size_type v1049;
  uint64_t v1050;
  BOOL v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  std::string::size_type v1058;
  std::string::pointer v1059;
  uint64_t v1060;
  uint64_t v1061;
  std::string::size_type v1062;
  unint64_t v1063;
  uint64_t v1064;
  unint64_t v1065;
  char *v1066;
  uint64_t v1067;
  const char **v1068;
  uint64_t v1069;
  const char **v1070;
  const char *v1071;
  size_t v1072;
  size_t v1073;
  void *v1074;
  uint64_t v1075;
  uint64_t v1076;
  _QWORD *v1077;
  uint64_t v1078;
  unint64_t v1079;
  std::string::size_type v1080;
  unint64_t v1081;
  __int128 v1082;
  const char *v1083;
  std::string::size_type v1084;
  std::string::size_type v1085;
  uint64_t v1086;
  const char *v1087;
  size_t v1088;
  size_t v1089;
  void *v1090;
  uint64_t v1091;
  uint64_t v1092;
  std::string::size_type v1093;
  std::string::pointer v1094;
  uint64_t v1095;
  std::string::size_type v1096;
  __int128 v1097;
  std::string::size_type v1098;
  __int128 v1099;
  std::string::__raw *v1100;
  std::string::size_type v1101;
  char *v1102;
  uint64_t v1103;
  std::string::size_type v1104;
  unint64_t v1105;
  unint64_t v1106;
  uint64_t v1107;
  std::string::size_type v1108;
  unint64_t v1109;
  int v1110;
  uint64_t v1111;
  unsigned __int8 *v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  int v1116;
  uint64_t v1117;
  uint64_t v1118;
  std::string *p_len;
  size_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  int8x8_t v1127;
  uint8x8_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  std::string *v1133;
  size_t v1134;
  uint64_t v1135;
  unsigned __int8 *v1136;
  std::string::size_type v1137;
  uint64_t v1138;
  unsigned __int8 *v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  std::string::size_type v1143;
  uint64_t v1144;
  std::string::size_type v1145;
  uint64_t v1146;
  unsigned __int8 *v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  std::string::size_type v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  std::string *v1156;
  size_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  std::string *v1161;
  size_t v1162;
  int v1163;
  unsigned __int8 *v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  std::string::size_type v1168;
  uint64_t v1169;
  unsigned __int8 *v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  std::string::size_type v1174;
  uint64_t v1175;
  unsigned __int8 *v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  std::string::size_type v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  std::string *v1186;
  size_t v1187;
  std::string *v1188;
  size_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  int v1192;
  BOOL v1193;
  _BOOL4 v1194;
  BOOL v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  std::string *v1199;
  size_t v1200;
  int v1201;
  BOOL v1204;
  int v1206;
  uint64_t v1208;
  const char **v1209;
  std::string *v1210;
  uint64_t v1211;
  uint64_t v1212;
  unint64_t *v1213;
  uint64_t v1214;
  int v1215;
  int v1216;
  uint64_t v1217;
  uint64_t v1218;
  std::string *v1219;
  uint64_t v1220;
  std::string::size_type v1221;
  int *v1222;
  uint64_t v1223;
  uint64_t v1224;
  std::string::value_type *v1225;
  _QWORD v1226[3];
  __int16 v1227;
  _QWORD v1228[3];
  __int16 v1229;
  void *v1230[2];
  uint64_t data;
  int v1232;
  uint64_t v1233;
  __int128 v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  void **v1238[3];
  _QWORD v1239[3];
  _QWORD v1240[3];
  std::string v1241;
  void *v1242[2];
  uint64_t v1243;
  void *v1244[2];
  uint64_t v1245;
  std::string v1246;
  void *v1247[2];
  uint64_t v1248;
  void *v1249[2];
  uint64_t v1250;
  std::string v1251;
  void *v1252[2];
  uint64_t v1253;
  std::string v1254;
  std::string __src;
  __int16 v1256;
  std::string v1257;
  __int16 v1258;
  std::string v1259;
  __int16 v1260;
  std::string __p;
  __int16 v1262;
  __int16 v1263;
  std::string v1264;
  void *v1265[2];
  __int128 v1266;
  _BYTE v1267[32];
  std::string *v1268;
  std::string v1269;
  std::string v1270;
  std::string v1271;
  std::string v1272;
  void *v1273[2];
  std::string::pointer v1274;
  std::string v1275;
  std::string v1276;
  void *v1277[2];
  std::string::pointer v1278;
  std::string __s2;
  std::string __dst;
  std::string v1281;
  std::string v1282;
  uint64_t v1283;
  uint64_t *v1284;
  unsigned int v1285;
  std::string v1286[2];
  std::string __len;
  std::string::pointer v1288;
  void *v1289;
  int v1290;
  uint64_t v1291;
  int v1292;
  uint64_t v1293;
  char v1294;
  uint64_t v1295;

  v1295 = *MEMORY[0x24BDAC8D0];
  v1206 = *(_DWORD *)(a4 + 188);
  sub_22E80AA50();
  v1233 = 0;
  llvm::opt::OptTable::ParseArgs();
  v1219 = (std::string *)a1;
  v1211 = *a1;
  v1208 = a3;
  sub_22E70B070((uint64_t)&v1283, 62, (uint64_t)&__len);
  v1286[0] = __len;
  v9 = v1288;
  while (v1286[0].__r_.__value_.__l.__data_ != v9)
  {
    llvm::opt::Arg::getAsString();
    memset(&__p, 0, sizeof(__p));
    if (llvm::opt::OptTable::findNearest() < 2)
    {
      *(_QWORD *)(a4 + 312) = 0x1C200000000;
      if (*(char *)(a4 + 311) < 0)
      {
        **(_BYTE **)(a4 + 288) = 0;
        *(_QWORD *)(a4 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a4 + 288) = 0;
        *(_BYTE *)(a4 + 311) = 0;
      }
      *(_QWORD *)v1267 = a4 + 320;
      *(_QWORD *)&v1267[8] = 0;
      *(_QWORD *)&v1267[16] = a4;
      *(_WORD *)&v1267[24] = 1;
      *(_BYTE *)(a4 + 320) = 0;
      *(_DWORD *)(a4 + 664) = 0;
      v17 = *(unsigned int *)(a4 + 776);
      if ((_DWORD)v17)
      {
        v18 = *(_QWORD *)(a4 + 768);
        v19 = 56 * v17;
        do
        {
          if (*(char *)(v18 + v19 - 9) < 0)
            operator delete(*(void **)(v18 + v19 - 32));
          v19 -= 56;
        }
        while (v19);
      }
      *(_DWORD *)(a4 + 776) = 0;
      if (data >= 0)
        v20 = v1230;
      else
        v20 = (void **)v1230[0];
      if (data >= 0)
        v21 = HIBYTE(data) & 0x7F;
      else
        v21 = (size_t)v1230[1];
      sub_22E3B89A8((unsigned __int8 **)v1267, v20, v21);
      v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v14 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      size = (void *)__p.__r_.__value_.__l.__size_;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      *(_QWORD *)(a4 + 312) = 0x1C100000000;
      if (*(char *)(a4 + 311) < 0)
      {
        **(_BYTE **)(a4 + 288) = 0;
        *(_QWORD *)(a4 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a4 + 288) = 0;
        *(_BYTE *)(a4 + 311) = 0;
      }
      *(_QWORD *)v1267 = a4 + 320;
      *(_QWORD *)&v1267[8] = 0;
      *(_QWORD *)&v1267[16] = a4;
      *(_WORD *)&v1267[24] = 1;
      *(_BYTE *)(a4 + 320) = 0;
      *(_DWORD *)(a4 + 664) = 0;
      v10 = *(unsigned int *)(a4 + 776);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD *)(a4 + 768);
        v12 = 56 * v10;
        do
        {
          if (*(char *)(v11 + v12 - 9) < 0)
            operator delete(*(void **)(v11 + v12 - 32));
          v12 -= 56;
        }
        while (v12);
      }
      *(_DWORD *)(a4 + 776) = 0;
      v13 = HIBYTE(data);
      v14 = data < 0;
      size = v1230[1];
      if (data >= 0)
        p_p = (std::string *)v1230;
      else
        p_p = (std::string *)v1230[0];
    }
    v22 = v13 & 0x7F;
    if (v14)
      v23 = (size_t)size;
    else
      v23 = v22;
    sub_22E3B89A8((unsigned __int8 **)v1267, p_p, v23);
    sub_22E3BB0B8((uint64_t)v1267);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(data) < 0)
      operator delete(v1230[0]);
    v1286[0].__r_.__value_.__r.__words[0] += 8;
    sub_22E721830((uint64_t)v1286);
  }
  p_size = (void **)&v1219[6].__r_.__value_.__l.__size_;
  if (v1219[7].__r_.__value_.__s.__data_[7] < 0)
  {
    sub_22E3BB2B4(v1267, (void *)v1219[6].__r_.__value_.__l.__size_, v1219[6].__r_.__value_.__r.__words[2]);
    v25 = v1219[7].__r_.__value_.__s.__data_[7];
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
    if (v25 < 0)
      operator delete(*p_size);
  }
  else
  {
    *(_OWORD *)v1267 = *(_OWORD *)p_size;
    *(_QWORD *)&v1267[16] = v1219[7].__r_.__value_.__l.__data_;
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
  }
  *p_size = 0;
  v1219[6].__r_.__value_.__r.__words[2] = 0;
  LODWORD(v1219[7].__r_.__value_.__l.__data_) = __len.__r_.__value_.__l.__data_;
  *(_DWORD *)((char *)v1219[7].__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3);
  v1219[7].__r_.__value_.__s.__data_[7] = 0;
  if ((v1267[23] & 0x80000000) != 0)
    operator delete(*(void **)v1267);
  sub_22E6EC3DC((uint64_t)&__len, 476, (uint64_t)&v1283);
  if ((_BYTE)v1288)
  {
    if (v1219[7].__r_.__value_.__s.__data_[7] < 0)
    {
      sub_22E3BB2B4(v1230, (void *)v1219[6].__r_.__value_.__l.__size_, v1219[6].__r_.__value_.__r.__words[2]);
    }
    else
    {
      *(_OWORD *)v1230 = *(_OWORD *)p_size;
      data = (uint64_t)v1219[7].__r_.__value_.__l.__data_;
    }
    v26 = SHIBYTE(__len.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&__p, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
    else
      __p = __len;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(v1286, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v1286[0] = __p;
    if (v1219[7].__r_.__value_.__s.__data_[7] < 0)
      operator delete(*p_size);
    *(_OWORD *)p_size = *(_OWORD *)&v1286[0].__r_.__value_.__l.__data_;
    v1219[7].__r_.__value_.__r.__words[0] = v1286[0].__r_.__value_.__r.__words[2];
    *((_BYTE *)&v1286[0].__r_.__value_.__s + 23) = 0;
    v1286[0].__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(data) < 0)
    {
      operator delete(v1230[0]);
      if ((v26 & 0x80000000) == 0)
        goto LABEL_61;
    }
    else if ((v26 & 0x80000000) == 0)
    {
      goto LABEL_61;
    }
    operator delete(__len.__r_.__value_.__l.__data_);
  }
LABEL_61:
  v1210 = (std::string *)((char *)v1219 + 152);
  v27 = (void **)&v1219[7].__r_.__value_.__l.__size_;
  if (v1219[8].__r_.__value_.__s.__data_[7] < 0)
  {
    sub_22E3BB2B4(v1286, (void *)v1219[7].__r_.__value_.__l.__size_, v1219[7].__r_.__value_.__r.__words[2]);
    v28 = v1219[8].__r_.__value_.__s.__data_[7];
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
    if (v28 < 0)
      operator delete(*v27);
  }
  else
  {
    *(_OWORD *)&v1286[0].__r_.__value_.__l.__data_ = *(_OWORD *)v27;
    v1286[0].__r_.__value_.__r.__words[2] = v1219[8].__r_.__value_.__r.__words[0];
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
  }
  *v27 = 0;
  v1219[7].__r_.__value_.__r.__words[2] = 0;
  LODWORD(v1219[8].__r_.__value_.__l.__data_) = __len.__r_.__value_.__l.__data_;
  *(_DWORD *)((char *)v1219[8].__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3);
  v1219[8].__r_.__value_.__s.__data_[7] = 0;
  if (SHIBYTE(v1286[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1286[0].__r_.__value_.__l.__data_);
  sub_22E6EC3DC((uint64_t)&__len, 377, (uint64_t)&v1283);
  if ((_BYTE)v1288)
  {
    if (v1219[8].__r_.__value_.__s.__data_[7] < 0)
    {
      sub_22E3BB2B4(&v1257, (void *)v1219[7].__r_.__value_.__l.__size_, v1219[7].__r_.__value_.__r.__words[2]);
    }
    else
    {
      *(_OWORD *)&v1257.__r_.__value_.__l.__data_ = *(_OWORD *)v27;
      v1257.__r_.__value_.__r.__words[2] = v1219[8].__r_.__value_.__r.__words[0];
    }
    v29 = SHIBYTE(__len.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&__src, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
    else
      __src = __len;
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v1259, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
    else
      v1259 = __src;
    if (v1219[8].__r_.__value_.__s.__data_[7] < 0)
      operator delete(*v27);
    *(_OWORD *)v27 = *(_OWORD *)&v1259.__r_.__value_.__l.__data_;
    v1219[8].__r_.__value_.__r.__words[0] = v1259.__r_.__value_.__r.__words[2];
    *((_BYTE *)&v1259.__r_.__value_.__s + 23) = 0;
    v1259.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__src.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1257.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v1257.__r_.__value_.__l.__data_);
      if ((v29 & 0x80000000) == 0)
        goto LABEL_85;
    }
    else if ((v29 & 0x80000000) == 0)
    {
      goto LABEL_85;
    }
    operator delete(__len.__r_.__value_.__l.__data_);
  }
LABEL_85:
  v30 = (void **)&v1219[92].__r_.__value_.__l.__size_;
  if (v1219[93].__r_.__value_.__s.__data_[7] < 0)
  {
    sub_22E3BB2B4(v1267, (void *)v1219[92].__r_.__value_.__l.__size_, v1219[92].__r_.__value_.__r.__words[2]);
    v31 = v1219[93].__r_.__value_.__s.__data_[7];
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
    if (v31 < 0)
      operator delete(*v30);
  }
  else
  {
    *(_OWORD *)v1267 = *(_OWORD *)v30;
    *(_QWORD *)&v1267[16] = v1219[93].__r_.__value_.__l.__data_;
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
  }
  *v30 = 0;
  v1219[92].__r_.__value_.__r.__words[2] = 0;
  LODWORD(v1219[93].__r_.__value_.__l.__data_) = __len.__r_.__value_.__l.__data_;
  *(_DWORD *)((char *)v1219[93].__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3);
  v1219[93].__r_.__value_.__s.__data_[7] = 0;
  if ((v1267[23] & 0x80000000) != 0)
    operator delete(*(void **)v1267);
  sub_22E6EC3DC((uint64_t)&__len, 3120, (uint64_t)&v1283);
  if ((_BYTE)v1288)
  {
    if (v1219[93].__r_.__value_.__s.__data_[7] < 0)
    {
      sub_22E3BB2B4(v1230, (void *)v1219[92].__r_.__value_.__l.__size_, v1219[92].__r_.__value_.__r.__words[2]);
    }
    else
    {
      *(_OWORD *)v1230 = *(_OWORD *)v30;
      data = (uint64_t)v1219[93].__r_.__value_.__l.__data_;
    }
    v32 = SHIBYTE(__len.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&__p, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
    else
      __p = __len;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(v1286, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v1286[0] = __p;
    if (v1219[93].__r_.__value_.__s.__data_[7] < 0)
      operator delete(*v30);
    *(_OWORD *)v30 = *(_OWORD *)&v1286[0].__r_.__value_.__l.__data_;
    v1219[93].__r_.__value_.__r.__words[0] = v1286[0].__r_.__value_.__r.__words[2];
    *((_BYTE *)&v1286[0].__r_.__value_.__s + 23) = 0;
    v1286[0].__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(data) < 0)
    {
      operator delete(v1230[0]);
      if ((v32 & 0x80000000) == 0)
        goto LABEL_109;
    }
    else if ((v32 & 0x80000000) == 0)
    {
      goto LABEL_109;
    }
    operator delete(__len.__r_.__value_.__l.__data_);
  }
LABEL_109:
  v33 = (void **)&v1219[93].__r_.__value_.__l.__size_;
  if (v1219[94].__r_.__value_.__s.__data_[7] < 0)
  {
    sub_22E3BB2B4(v1286, (void *)v1219[93].__r_.__value_.__l.__size_, v1219[93].__r_.__value_.__r.__words[2]);
    v34 = v1219[94].__r_.__value_.__s.__data_[7];
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
    if (v34 < 0)
      operator delete(*v33);
  }
  else
  {
    *(_OWORD *)&v1286[0].__r_.__value_.__l.__data_ = *(_OWORD *)v33;
    v1286[0].__r_.__value_.__r.__words[2] = v1219[94].__r_.__value_.__r.__words[0];
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
  }
  *v33 = 0;
  v1219[93].__r_.__value_.__r.__words[2] = 0;
  LODWORD(v1219[94].__r_.__value_.__l.__data_) = __len.__r_.__value_.__l.__data_;
  *(_DWORD *)((char *)v1219[94].__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3);
  v1219[94].__r_.__value_.__s.__data_[7] = 0;
  if (SHIBYTE(v1286[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1286[0].__r_.__value_.__l.__data_);
  sub_22E6EC3DC((uint64_t)&__len, 474, (uint64_t)&v1283);
  if ((_BYTE)v1288)
  {
    if (v1219[94].__r_.__value_.__s.__data_[7] < 0)
    {
      sub_22E3BB2B4(&v1257, (void *)v1219[93].__r_.__value_.__l.__size_, v1219[93].__r_.__value_.__r.__words[2]);
    }
    else
    {
      *(_OWORD *)&v1257.__r_.__value_.__l.__data_ = *(_OWORD *)v33;
      v1257.__r_.__value_.__r.__words[2] = v1219[94].__r_.__value_.__r.__words[0];
    }
    v35 = SHIBYTE(__len.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&__src, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
    else
      __src = __len;
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v1259, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
    else
      v1259 = __src;
    if (v1219[94].__r_.__value_.__s.__data_[7] < 0)
      operator delete(*v33);
    *(_OWORD *)v33 = *(_OWORD *)&v1259.__r_.__value_.__l.__data_;
    v1219[94].__r_.__value_.__r.__words[0] = v1259.__r_.__value_.__r.__words[2];
    *((_BYTE *)&v1259.__r_.__value_.__s + 23) = 0;
    v1259.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__src.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1257.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v1257.__r_.__value_.__l.__data_);
      if ((v35 & 0x80000000) == 0)
        goto LABEL_133;
    }
    else if ((v35 & 0x80000000) == 0)
    {
      goto LABEL_133;
    }
    operator delete(__len.__r_.__value_.__l.__data_);
  }
LABEL_133:
  v36 = (void **)&v1219[94].__r_.__value_.__l.__size_;
  if (v1219[95].__r_.__value_.__s.__data_[7] < 0)
  {
    sub_22E3BB2B4(&v1259, (void *)v1219[94].__r_.__value_.__l.__size_, v1219[94].__r_.__value_.__r.__words[2]);
    v37 = v1219[95].__r_.__value_.__s.__data_[7];
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
    if (v37 < 0)
      operator delete(*v36);
  }
  else
  {
    *(_OWORD *)&v1259.__r_.__value_.__l.__data_ = *(_OWORD *)v36;
    v1259.__r_.__value_.__r.__words[2] = v1219[95].__r_.__value_.__r.__words[0];
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
  }
  *v36 = 0;
  v1219[94].__r_.__value_.__r.__words[2] = 0;
  LODWORD(v1219[95].__r_.__value_.__l.__data_) = __len.__r_.__value_.__l.__data_;
  *(_DWORD *)((char *)v1219[95].__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3);
  v1219[95].__r_.__value_.__s.__data_[7] = 0;
  if (SHIBYTE(v1259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1259.__r_.__value_.__l.__data_);
  v38 = v1219[94].__r_.__value_.__s.__data_[7];
  v39 = v38;
  v40 = v38 & 0x7F;
  if (v39 < 0)
    v40 = v1219[93].__r_.__value_.__r.__words[2];
  if (v40)
  {
    sub_22E6EC3DC((uint64_t)&__len, 473, (uint64_t)&v1283);
    if ((_BYTE)v1288)
    {
      if (v1219[95].__r_.__value_.__s.__data_[7] < 0)
      {
        sub_22E3BB2B4(&v1282, (void *)v1219[94].__r_.__value_.__l.__size_, v1219[94].__r_.__value_.__r.__words[2]);
      }
      else
      {
        *(_OWORD *)&v1282.__r_.__value_.__l.__data_ = *(_OWORD *)v36;
        v1282.__r_.__value_.__r.__words[2] = v1219[95].__r_.__value_.__r.__words[0];
      }
      v41 = SHIBYTE(__len.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
        sub_22E3BB2B4(&v1281, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
      else
        v1281 = __len;
      if (SHIBYTE(v1281.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_22E3BB2B4(v1265, v1281.__r_.__value_.__l.__data_, v1281.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)v1265 = *(_OWORD *)&v1281.__r_.__value_.__l.__data_;
        *(_QWORD *)&v1266 = *((_QWORD *)&v1281.__r_.__value_.__l + 2);
      }
      if (v1219[95].__r_.__value_.__s.__data_[7] < 0)
        operator delete(*v36);
      *(_OWORD *)v36 = *(_OWORD *)v1265;
      v1219[95].__r_.__value_.__r.__words[0] = v1266;
      BYTE7(v1266) = 0;
      LOBYTE(v1265[0]) = 0;
      if (SHIBYTE(v1281.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1281.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1282.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v1282.__r_.__value_.__l.__data_);
        if ((v41 & 0x80000000) == 0)
          goto LABEL_160;
      }
      else if ((v41 & 0x80000000) == 0)
      {
        goto LABEL_160;
      }
      operator delete(__len.__r_.__value_.__l.__data_);
    }
  }
LABEL_160:
  v1219[3].__r_.__value_.__s.__data_[8] &= ~1u;
  v1219[3].__r_.__value_.__s.__data_[8] = v1219[3].__r_.__value_.__s.__data_[8] & 0xFD | (sub_22E721714((uint64_t)&v1283, 2721) != 0);
  if (sub_22E721714((uint64_t)&v1283, 2714))
    v1219[3].__r_.__value_.__s.__data_[8] |= 2u;
  v42 = v1219[3].__r_.__value_.__l.__data_;
  v1277[0] = v42;
  if (v42)
    ++*v42;
  v42[51] &= ~0x10000u;
  v43 = sub_22E721714((uint64_t)&v1283, 3045);
  v44 = v42[51];
  if (v43)
    v44 |= 0x10000u;
  v42[51] = v44 & 0xFFFFFBFF;
  v45 = sub_22E721714((uint64_t)&v1283, 103);
  v46 = v42[51];
  if (v45)
    v46 |= 0x400u;
  v42[51] = v46 & 0xFFFFEFFF;
  v47 = sub_22E721714((uint64_t)&v1283, 104);
  v48 = v42[51];
  if (v47)
    v48 |= 0x1000u;
  v42[51] = v48 & 0xFFFFF7FF;
  if (sub_22E721714((uint64_t)&v1283, 93))
    v42[51] |= 0x800u;
  v49 = v42 + 32;
  v1224 = (uint64_t)v42;
  if (*((char *)v42 + 151) < 0)
  {
    sub_22E3BB2B4(&__p, *((void **)v42 + 16), *((_QWORD *)v42 + 17));
    v50 = *((char *)v42 + 151);
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
    if (v50 < 0)
      operator delete(*(void **)v49);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v49;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v42 + 18);
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
  }
  *(_QWORD *)v49 = 0;
  *((_QWORD *)v42 + 17) = 0;
  v42[36] = __len.__r_.__value_.__l.__data_;
  *(_DWORD *)((char *)v42 + 147) = *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3);
  *((_BYTE *)v42 + 151) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_22E6EC3DC((uint64_t)&__len, 73, (uint64_t)&v1283);
  if ((_BYTE)v1288)
  {
    if (*((char *)v42 + 151) < 0)
    {
      sub_22E3BB2B4(&v1259, *((void **)v42 + 16), *((_QWORD *)v42 + 17));
    }
    else
    {
      *(_OWORD *)&v1259.__r_.__value_.__l.__data_ = *(_OWORD *)v49;
      v1259.__r_.__value_.__r.__words[2] = *((_QWORD *)v42 + 18);
    }
    v51 = SHIBYTE(__len.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v1257, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
    else
      v1257 = __len;
    if (SHIBYTE(v1257.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(v1267, v1257.__r_.__value_.__l.__data_, v1257.__r_.__value_.__l.__size_);
    else
      *(std::string *)v1267 = v1257;
    if (*(char *)(v1224 + 151) < 0)
      operator delete(*(void **)v49);
    *(_OWORD *)v49 = *(_OWORD *)v1267;
    *((_QWORD *)v49 + 2) = *(_QWORD *)&v1267[16];
    v1267[23] = 0;
    v1267[0] = 0;
    if (SHIBYTE(v1257.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1257.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1259.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v1259.__r_.__value_.__l.__data_);
      if ((v51 & 0x80000000) == 0)
        goto LABEL_194;
    }
    else if ((v51 & 0x80000000) == 0)
    {
      goto LABEL_194;
    }
    operator delete(__len.__r_.__value_.__l.__data_);
  }
LABEL_194:
  *(_DWORD *)(v1224 + 204) &= ~0x4000u;
  v52 = sub_22E721714((uint64_t)&v1283, 3028);
  v53 = *(_DWORD *)(v1224 + 204);
  if (v52)
    v53 |= 0x4000u;
  *(_DWORD *)(v1224 + 204) = v53 & 0xFFFF7FFF;
  if (sub_22E721714((uint64_t)&v1283, 115))
    *(_DWORD *)(v1224 + 204) |= 0x8000u;
  v54 = (void **)(v1224 + 152);
  if (*(char *)(v1224 + 175) < 0)
  {
    sub_22E3BB2B4(&__src, *(void **)(v1224 + 152), *(_QWORD *)(v1224 + 160));
    v55 = *(char *)(v1224 + 175);
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
    if (v55 < 0)
      operator delete(*v54);
  }
  else
  {
    *(_OWORD *)&__src.__r_.__value_.__l.__data_ = *(_OWORD *)v54;
    __src.__r_.__value_.__r.__words[2] = *(_QWORD *)(v1224 + 168);
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
  }
  *v54 = 0;
  *(_QWORD *)(v1224 + 160) = 0;
  *(_DWORD *)(v1224 + 168) = __len.__r_.__value_.__l.__data_;
  *(_DWORD *)(v1224 + 171) = *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3);
  *(_BYTE *)(v1224 + 175) = 0;
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
  sub_22E6EC3DC((uint64_t)&__len, 95, (uint64_t)&v1283);
  if ((_BYTE)v1288)
  {
    if (*(char *)(v1224 + 175) < 0)
    {
      sub_22E3BB2B4(v1265, *(void **)(v1224 + 152), *(_QWORD *)(v1224 + 160));
    }
    else
    {
      *(_OWORD *)v1265 = *(_OWORD *)v54;
      *(_QWORD *)&v1266 = *(_QWORD *)(v1224 + 168);
    }
    v56 = SHIBYTE(__len.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v1282, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
    else
      v1282 = __len;
    if (SHIBYTE(v1282.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(v1267, v1282.__r_.__value_.__l.__data_, v1282.__r_.__value_.__l.__size_);
    else
      *(std::string *)v1267 = v1282;
    if (*(char *)(v1224 + 175) < 0)
      operator delete(*v54);
    *(_OWORD *)v54 = *(_OWORD *)v1267;
    *(_QWORD *)(v1224 + 168) = *(_QWORD *)&v1267[16];
    v1267[23] = 0;
    v1267[0] = 0;
    if (SHIBYTE(v1282.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1282.__r_.__value_.__l.__data_);
    if (SBYTE7(v1266) < 0)
    {
      operator delete(v1265[0]);
      if ((v56 & 0x80000000) == 0)
        goto LABEL_222;
    }
    else if ((v56 & 0x80000000) == 0)
    {
      goto LABEL_222;
    }
    operator delete(__len.__r_.__value_.__l.__data_);
  }
LABEL_222:
  *(_DWORD *)(v1224 + 208) = 5;
  v57 = sub_22E6EC038(97, (uint64_t)&v1283, a4);
  if (HIDWORD(v57))
    *(_DWORD *)(v1224 + 208) = v57;
  *(_DWORD *)(v1224 + 204) &= ~0x40000u;
  if (sub_22E721714((uint64_t)&v1283, 92))
    *(_DWORD *)(v1224 + 204) |= 0x40000u;
  *(_DWORD *)(v1224 + 200) = 4;
  v58 = sub_22E6EC038(101, (uint64_t)&v1283, a4);
  if (HIDWORD(v58))
    *(_DWORD *)(v1224 + 200) = v58;
  *(_DWORD *)(v1224 + 204) &= ~0x20000u;
  v59 = sub_22E721714((uint64_t)&v1283, 110);
  v60 = *(_DWORD *)(v1224 + 204);
  if (v59)
    v60 |= 0x20000u;
  *(_DWORD *)(v1224 + 204) = v60 & 0xFFFFFFFE;
  *(_DWORD *)(v1224 + 204) = *(_DWORD *)(v1224 + 204) & 0xFFFFFFFD | (sub_22E721714((uint64_t)&v1283, 89) != 0);
  v61 = sub_22E721714((uint64_t)&v1283, 77);
  v62 = *(_DWORD *)(v1224 + 204);
  if (v61)
    v62 |= 2u;
  *(_DWORD *)(v1224 + 204) = v62 & 0xFFFFFFFB;
  v63 = sub_22E721714((uint64_t)&v1283, 75);
  v64 = *(_DWORD *)(v1224 + 204);
  if (v63)
    v64 |= 4u;
  *(_DWORD *)(v1224 + 204) = v64 & 0xFFFFFFF7;
  v65 = sub_22E721714((uint64_t)&v1283, 76);
  v66 = *(_DWORD *)(v1224 + 204);
  if (v65)
    v66 |= 8u;
  *(_DWORD *)(v1224 + 204) = v66 & 0xFFFFFEFF;
  v67 = sub_22E721714((uint64_t)&v1283, 85);
  v68 = *(_DWORD *)(v1224 + 204);
  if (v67)
    v68 |= 0x100u;
  *(_DWORD *)(v1224 + 204) = v68 & 0xFFFFFF7F;
  v69 = sub_22E721714((uint64_t)&v1283, 100);
  v70 = *(_DWORD *)(v1224 + 204);
  if (v69)
    v70 |= 0x80u;
  *(_DWORD *)(v1224 + 204) = v70 & 0xFFFFFFEF;
  v71 = sub_22E721714((uint64_t)&v1283, 80);
  v72 = *(_DWORD *)(v1224 + 204);
  if (v71)
    v72 |= 0x10u;
  *(_DWORD *)(v1224 + 204) = v72 & 0xFFFFFFDF;
  v73 = sub_22E721714((uint64_t)&v1283, 78);
  v74 = *(_DWORD *)(v1224 + 204);
  if (v73)
    v74 |= 0x20u;
  *(_DWORD *)(v1224 + 204) = v74 & 0xFFFFFFBF;
  v75 = sub_22E721714((uint64_t)&v1283, 79);
  v76 = *(_DWORD *)(v1224 + 204);
  if (v75)
    v76 |= 0x40u;
  *(_DWORD *)(v1224 + 204) = v76 | 0x200;
  v77 = sub_22E6EC1FC(84, 0x1Du, (uint64_t)&v1283, a4);
  v78 = *(_DWORD *)(v1224 + 204);
  if (HIDWORD(v77))
    v78 = v78 & 0xFFF7FDFF | ((v77 & 1) << 9);
  *(_DWORD *)(v1224 + 204) = v78 & 0xFFF7FFFF;
  if (sub_22E721714((uint64_t)&v1283, 116))
    *(_DWORD *)(v1224 + 204) |= 0x80000u;
  v79 = sub_22E6EBFB4((uint64_t)&v1283, 112);
  if (v79)
  {
    v80 = *(const char ***)(v79 + 48);
    v81 = (char *)*v80;
    if (*v80)
    {
      v82 = strlen(*v80);
      if (v82 == 6)
      {
        v83 = *(_DWORD *)v81 == 1768383858 && *((_WORD *)v81 + 2) == 28271;
        if (v83)
        {
          *(_DWORD *)(v1224 + 112) = 0;
          goto LABEL_278;
        }
        v82 = 6;
      }
    }
    else
    {
      v82 = 0;
    }
    *(_QWORD *)(a4 + 312) = 0x18800000000;
    if (*(char *)(a4 + 311) < 0)
    {
      **(_BYTE **)(a4 + 288) = 0;
      *(_QWORD *)(a4 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a4 + 288) = 0;
      *(_BYTE *)(a4 + 311) = 0;
    }
    *(_OWORD *)&__len.__r_.__value_.__l.__data_ = (unint64_t)(a4 + 320);
    __len.__r_.__value_.__r.__words[2] = a4;
    LOWORD(v1288) = 1;
    *(_BYTE *)(a4 + 320) = 0;
    *(_DWORD *)(a4 + 664) = 0;
    v84 = *(unsigned int *)(a4 + 776);
    if ((_DWORD)v84)
    {
      v85 = *(_QWORD *)(a4 + 768);
      v86 = 56 * v84;
      do
      {
        if (*(char *)(v85 + v86 - 9) < 0)
          operator delete(*(void **)(v85 + v86 - 32));
        v86 -= 56;
      }
      while (v86);
    }
    *(_DWORD *)(a4 + 776) = 0;
    llvm::opt::Arg::getAsString();
    if (v1267[23] >= 0)
      v87 = v1267;
    else
      v87 = *(_BYTE **)v1267;
    if (v1267[23] >= 0)
      v88 = v1267[23] & 0x7F;
    else
      v88 = *(_QWORD *)&v1267[8];
    sub_22E3B89A8((unsigned __int8 **)&__len, v87, v88);
    sub_22E3B89A8((unsigned __int8 **)&__len, v81, v82);
    if ((v1267[23] & 0x80000000) != 0)
      operator delete(*(void **)v1267);
    sub_22E3BB0B8((uint64_t)&__len);
  }
LABEL_278:
  v89 = sub_22E6EBFB4((uint64_t)&v1283, 88);
  if (!v89)
    goto LABEL_324;
  v90 = *(const char ***)(v89 + 48);
  v91 = (char *)*v90;
  if (*v90)
  {
    v92 = strlen(*v90);
    v93 = v92;
    if (v92 == 2)
    {
      v96 = (bswap32(*(unsigned __int16 *)v91) >> 16) - 31283;
      v95 = 1;
LABEL_292:
      if (v96)
        v97 = 2;
      else
        v97 = v95;
      if (v97 == 1)
      {
        *(_QWORD *)(a4 + 312) = 0x13600000000;
        if (*(char *)(a4 + 311) < 0)
        {
          **(_BYTE **)(a4 + 288) = 0;
          *(_QWORD *)(a4 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(a4 + 288) = 0;
          *(_BYTE *)(a4 + 311) = 0;
        }
        v1230[0] = (void *)(a4 + 320);
        v1230[1] = 0;
        data = a4;
        LOWORD(v1232) = 1;
        *(_BYTE *)(a4 + 320) = 0;
        *(_DWORD *)(a4 + 664) = 0;
        v103 = *(unsigned int *)(a4 + 776);
        if ((_DWORD)v103)
        {
          v104 = *(_QWORD *)(a4 + 768);
          v105 = 56 * v103;
          do
          {
            if (*(char *)(v104 + v105 - 9) < 0)
              operator delete(*(void **)(v104 + v105 - 32));
            v105 -= 56;
          }
          while (v105);
        }
        *(_DWORD *)(a4 + 776) = 0;
        sub_22E3BB0B8((uint64_t)v1230);
      }
      else if (v97 == 2)
      {
        goto LABEL_297;
      }
      *(_DWORD *)(v1224 + 116) = v97;
      goto LABEL_324;
    }
    if (v92 == 5)
    {
      v94 = bswap32(*(_DWORD *)v91);
      if (v94 == 1918987879)
      {
        v95 = 0;
        v96 = v91[4] - 101;
      }
      else
      {
        v95 = 0;
        if (v94 < 0x72616E67)
          v96 = -1;
        else
          v96 = 1;
      }
      goto LABEL_292;
    }
  }
  else
  {
    v93 = 0;
  }
LABEL_297:
  *(_QWORD *)(a4 + 312) = 0x18800000000;
  if (*(char *)(a4 + 311) < 0)
  {
    **(_BYTE **)(a4 + 288) = 0;
    *(_QWORD *)(a4 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(a4 + 288) = 0;
    *(_BYTE *)(a4 + 311) = 0;
  }
  *(_OWORD *)&__len.__r_.__value_.__l.__data_ = (unint64_t)(a4 + 320);
  __len.__r_.__value_.__r.__words[2] = a4;
  LOWORD(v1288) = 1;
  *(_BYTE *)(a4 + 320) = 0;
  *(_DWORD *)(a4 + 664) = 0;
  v98 = *(unsigned int *)(a4 + 776);
  if ((_DWORD)v98)
  {
    v99 = *(_QWORD *)(a4 + 768);
    v100 = 56 * v98;
    do
    {
      if (*(char *)(v99 + v100 - 9) < 0)
        operator delete(*(void **)(v99 + v100 - 32));
      v100 -= 56;
    }
    while (v100);
  }
  *(_DWORD *)(a4 + 776) = 0;
  llvm::opt::Arg::getAsString();
  if (v1267[23] >= 0)
    v101 = v1267;
  else
    v101 = *(_BYTE **)v1267;
  if (v1267[23] >= 0)
    v102 = v1267[23] & 0x7F;
  else
    v102 = *(_QWORD *)&v1267[8];
  sub_22E3B89A8((unsigned __int8 **)&__len, v101, v102);
  sub_22E3B89A8((unsigned __int8 **)&__len, v91, v93);
  if ((v1267[23] & 0x80000000) != 0)
    operator delete(*(void **)v1267);
  sub_22E3BB0B8((uint64_t)&__len);
LABEL_324:
  v106 = sub_22E6EBFB4((uint64_t)&v1283, 107);
  if (!v106)
    goto LABEL_372;
  v107 = *(const char ***)(v106 + 48);
  v108 = (char *)*v107;
  if (!*v107)
  {
    v111 = 0;
    goto LABEL_355;
  }
  v109 = strlen(*v107);
  switch(v109)
  {
    case 4uLL:
      if (*(_DWORD *)v108 == 1819112552)
      {
        v110 = 0x100000000;
      }
      else if (*(_DWORD *)v108 == 1954047348)
      {
        v110 = 0x100000007;
      }
      else
      {
        v110 = 0;
      }
      v111 = 4;
      goto LABEL_353;
    case 0x10uLL:
      if (*(_QWORD *)v108 == 0x6E69732D6C6D7468 && *((_QWORD *)v108 + 1) == 0x656C69662D656C67)
      {
        v110 = 0x100000001;
        v111 = 16;
        goto LABEL_353;
      }
      v114 = *(_QWORD *)v108 == 0x756D2D7473696C70 && *((_QWORD *)v108 + 1) == 0x656C69662D69746CLL;
      v111 = 16;
      if (!v114)
        goto LABEL_355;
      v110 = 0x100000003;
      break;
    case 0xCuLL:
      if (*(_QWORD *)v108 ^ 0x6E696D2D74786574 | *((unsigned int *)v108 + 2) ^ 0x6C616D69)
        v110 = 0;
      else
        v110 = 0x100000008;
      v111 = 12;
      goto LABEL_353;
    case 0xAuLL:
      if (*(_QWORD *)v108 == 0x74682D7473696C70 && *((_WORD *)v108 + 4) == 27757)
      {
        v110 = 0x100000004;
        v111 = 10;
      }
      else
      {
        v1204 = *(_QWORD *)v108 == 0x74682D6669726173 && *((_WORD *)v108 + 4) == 27757;
        v111 = 10;
        if (v1204)
          v110 = 0x100000006;
        else
          v110 = 0;
      }
      goto LABEL_353;
    default:
      v111 = v109;
      if (v109 != 5)
        goto LABEL_355;
      if (*(_DWORD *)v108 == 1936288880 && v108[4] == 116)
        v110 = 0x100000002;
      else
        v110 = 0;
      break;
  }
  if (v109 != 16 && (v110 & 0x300000000) == 0 && *(_DWORD *)v108 == 1769103731 && v108[4] == 102)
    v110 = 0x100000005;
LABEL_353:
  if ((v110 & 0x300000000) != 0)
  {
    *(_DWORD *)(v1224 + 120) = v110;
    goto LABEL_372;
  }
LABEL_355:
  *(_QWORD *)(a4 + 312) = 0x18800000000;
  if (*(char *)(a4 + 311) < 0)
  {
    **(_BYTE **)(a4 + 288) = 0;
    *(_QWORD *)(a4 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(a4 + 288) = 0;
    *(_BYTE *)(a4 + 311) = 0;
  }
  *(_OWORD *)&__len.__r_.__value_.__l.__data_ = (unint64_t)(a4 + 320);
  __len.__r_.__value_.__r.__words[2] = a4;
  LOWORD(v1288) = 1;
  *(_BYTE *)(a4 + 320) = 0;
  *(_DWORD *)(a4 + 664) = 0;
  v115 = *(unsigned int *)(a4 + 776);
  if ((_DWORD)v115)
  {
    v116 = *(_QWORD *)(a4 + 768);
    v117 = 56 * v115;
    do
    {
      if (*(char *)(v116 + v117 - 9) < 0)
        operator delete(*(void **)(v116 + v117 - 32));
      v117 -= 56;
    }
    while (v117);
  }
  *(_DWORD *)(a4 + 776) = 0;
  llvm::opt::Arg::getAsString();
  if (v1267[23] >= 0)
    v118 = v1267;
  else
    v118 = *(_BYTE **)v1267;
  if (v1267[23] >= 0)
    v119 = v1267[23] & 0x7F;
  else
    v119 = *(_QWORD *)&v1267[8];
  sub_22E3B89A8((unsigned __int8 **)&__len, v118, v119);
  sub_22E3B89A8((unsigned __int8 **)&__len, v108, v111);
  if ((v1267[23] & 0x80000000) != 0)
    operator delete(*(void **)v1267);
  sub_22E3BB0B8((uint64_t)&__len);
LABEL_372:
  v120 = sub_22E6EBFB4((uint64_t)&v1283, 109);
  if (!v120)
    goto LABEL_409;
  v121 = *(const char ***)(v120 + 48);
  v122 = (char *)*v121;
  if (!*v121)
  {
    v124 = 0;
    goto LABEL_392;
  }
  v123 = strlen(*v121);
  v124 = v123;
  switch(v123)
  {
    case 4uLL:
      v127 = 0x100000002;
      if (*(_DWORD *)v122 != 1701736302)
      {
        v124 = 4;
        goto LABEL_392;
      }
      break;
    case 5uLL:
      v127 = 0x100000001;
      if (*(_DWORD *)v122 ^ 0x636F6C62 | v122[4] ^ 0x6B)
        v127 = 0;
      break;
    case 9uLL:
      v126 = *(_QWORD *)v122 == 0x6E656D6574617473 && v122[8] == 116;
      v127 = v126 << 32;
      break;
    default:
      goto LABEL_392;
  }
  if (HIDWORD(v127) && (_DWORD)v127 != 3)
  {
    *(_DWORD *)(v1224 + 124) = v127;
    goto LABEL_409;
  }
LABEL_392:
  *(_QWORD *)(a4 + 312) = 0x18800000000;
  if (*(char *)(a4 + 311) < 0)
  {
    **(_BYTE **)(a4 + 288) = 0;
    *(_QWORD *)(a4 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(a4 + 288) = 0;
    *(_BYTE *)(a4 + 311) = 0;
  }
  *(_OWORD *)&__len.__r_.__value_.__l.__data_ = (unint64_t)(a4 + 320);
  __len.__r_.__value_.__r.__words[2] = a4;
  LOWORD(v1288) = 1;
  *(_BYTE *)(a4 + 320) = 0;
  *(_DWORD *)(a4 + 664) = 0;
  v128 = *(unsigned int *)(a4 + 776);
  if ((_DWORD)v128)
  {
    v129 = *(_QWORD *)(a4 + 768);
    v130 = 56 * v128;
    do
    {
      if (*(char *)(v129 + v130 - 9) < 0)
        operator delete(*(void **)(v129 + v130 - 32));
      v130 -= 56;
    }
    while (v130);
  }
  *(_DWORD *)(a4 + 776) = 0;
  llvm::opt::Arg::getAsString();
  if (v1267[23] >= 0)
    v131 = v1267;
  else
    v131 = *(_BYTE **)v1267;
  if (v1267[23] >= 0)
    v132 = v1267[23] & 0x7F;
  else
    v132 = *(_QWORD *)&v1267[8];
  sub_22E3B89A8((unsigned __int8 **)&__len, v131, v132);
  sub_22E3B89A8((unsigned __int8 **)&__len, v122, v124);
  if ((v1267[23] & 0x80000000) != 0)
    operator delete(*(void **)v1267);
  sub_22E3BB0B8((uint64_t)&__len);
LABEL_409:
  v133 = sub_22E6EBFB4((uint64_t)&v1283, 99);
  if (!v133)
    goto LABEL_441;
  v134 = *(const char ***)(v133 + 48);
  v135 = (char *)*v134;
  if (!*v134)
  {
    v137 = 0;
    goto LABEL_424;
  }
  v136 = strlen(*v134);
  if (v136 == 12)
  {
    if (*(_QWORD *)v135 != 0x646E756465726F6ELL || *((_DWORD *)v135 + 2) != 2036559457)
    {
      v137 = 12;
      goto LABEL_424;
    }
    v759 = 1;
    goto LABEL_1762;
  }
  v137 = v136;
  if (v136 == 3)
  {
    if (*(_WORD *)v135 != 27745 || v135[2] != 108)
    {
      v137 = 3;
      goto LABEL_424;
    }
    v759 = 0;
LABEL_1762:
    *(_DWORD *)(v1224 + 212) = v759;
    goto LABEL_441;
  }
LABEL_424:
  *(_QWORD *)(a4 + 312) = 0x18800000000;
  if (*(char *)(a4 + 311) < 0)
  {
    **(_BYTE **)(a4 + 288) = 0;
    *(_QWORD *)(a4 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(a4 + 288) = 0;
    *(_BYTE *)(a4 + 311) = 0;
  }
  *(_OWORD *)&__len.__r_.__value_.__l.__data_ = (unint64_t)(a4 + 320);
  __len.__r_.__value_.__r.__words[2] = a4;
  LOWORD(v1288) = 1;
  *(_BYTE *)(a4 + 320) = 0;
  *(_DWORD *)(a4 + 664) = 0;
  v140 = *(unsigned int *)(a4 + 776);
  if ((_DWORD)v140)
  {
    v141 = *(_QWORD *)(a4 + 768);
    v142 = 56 * v140;
    do
    {
      if (*(char *)(v141 + v142 - 9) < 0)
        operator delete(*(void **)(v141 + v142 - 32));
      v142 -= 56;
    }
    while (v142);
  }
  *(_DWORD *)(a4 + 776) = 0;
  llvm::opt::Arg::getAsString();
  if (v1267[23] >= 0)
    v143 = v1267;
  else
    v143 = *(_BYTE **)v1267;
  if (v1267[23] >= 0)
    v144 = v1267[23] & 0x7F;
  else
    v144 = *(_QWORD *)&v1267[8];
  sub_22E3B89A8((unsigned __int8 **)&__len, v143, v144);
  sub_22E3B89A8((unsigned __int8 **)&__len, v135, v137);
  if ((v1267[23] & 0x80000000) != 0)
    operator delete(*(void **)v1267);
  sub_22E3BB0B8((uint64_t)&__len);
LABEL_441:
  v145 = *(_QWORD *)(v1224 + 8);
  for (i = *(_QWORD *)(v1224 + 16); i != v145; i -= 32)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  v1209 = a2;
  v1223 = a4;
  v147 = (_QWORD *)v1224;
  *(_QWORD *)(v1224 + 16) = v145;
  sub_22E6ECFB0((uint64_t)&v1283, 0x52u, 0x5Bu, (uint64_t)v1267);
  v1281 = *(std::string *)v1267;
  v148 = *(uint64_t **)v1267;
  v1220 = *(_QWORD *)&v1267[24];
  if (*(_QWORD *)v1267 != *(_QWORD *)&v1267[24])
  {
    while (1)
    {
      v149 = *v148;
      v150 = *(_QWORD *)(v149 + 16);
      if (!v150)
        v150 = v149;
      *(_BYTE *)(v150 + 44) |= 1u;
      v151 = *(_DWORD *)(*(_QWORD *)v149 + 32) == 82;
      v152 = **(const char ***)(v149 + 48);
      __s2.__r_.__value_.__r.__words[0] = (std::string::size_type)v152;
      if (v152)
        v152 = (const char *)strlen(v152);
      __s2.__r_.__value_.__l.__size_ = (std::string::size_type)v152;
      __len.__r_.__value_.__r.__words[0] = (std::string::size_type)&__len.__r_.__value_.__r.__words[2];
      __len.__r_.__value_.__l.__size_ = 0x1000000000;
      llvm::StringRef::split();
      v153 = (std::string *)__len.__r_.__value_.__r.__words[0];
      v154 = __len.__r_.__value_.__r.__words[0] + 16 * LODWORD(__len.__r_.__value_.__r.__words[1]);
      if (LODWORD(__len.__r_.__value_.__r.__words[1]))
        break;
LABEL_477:
      if (v153 != (std::string *)&__len.__r_.__value_.__r.__words[2])
        free(v153);
      v1281.__r_.__value_.__r.__words[0] += 8;
      sub_22E7219D8((uint64_t)&v1281);
      v148 = (uint64_t *)v1281.__r_.__value_.__r.__words[0];
      if (v1281.__r_.__value_.__r.__words[0] == v1220)
        goto LABEL_480;
    }
    while (1)
    {
      v155 = v153->__r_.__value_.__l.__size_;
      if (v155 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_2709;
      v156 = (const void *)v153->__r_.__value_.__r.__words[0];
      if (v155 >= 0x17)
      {
        v158 = (v155 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v155 | 7) != 0x17)
          v158 = v155 | 7;
        v159 = v158 + 1;
        p_dst = (std::string *)operator new(v158 + 1);
        v160 = v159 | 0x8000000000000000;
        v147 = (_QWORD *)v1224;
        __dst.__r_.__value_.__r.__words[2] = v160;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        __dst.__r_.__value_.__l.__size_ = v155;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v153->__r_.__value_.__l.__size_;
        p_dst = &__dst;
        if (!v155)
          goto LABEL_460;
      }
      memmove(p_dst, v156, v155);
LABEL_460:
      p_dst->__r_.__value_.__s.__data_[v155] = 0;
      v161 = (std::string *)v147[2];
      v162 = v147[3];
      if ((unint64_t)v161 >= v162)
      {
        v164 = v147[1];
        v165 = ((uint64_t)v161 - v164) >> 5;
        v166 = v165 + 1;
        if ((unint64_t)(v165 + 1) >> 59)
          goto LABEL_2709;
        v167 = v162 - v164;
        if (v167 >> 4 > v166)
          v166 = v167 >> 4;
        if ((unint64_t)v167 >= 0x7FFFFFFFFFFFFFE0)
          v168 = 0x7FFFFFFFFFFFFFFLL;
        else
          v168 = v166;
        v1286[1].__r_.__value_.__r.__words[0] = 0;
        v1286[1].__r_.__value_.__l.__size_ = v1224 + 24;
        if (v168 >> 59)
          goto LABEL_2710;
        v169 = (char *)operator new(32 * v168);
        v170 = (std::string *)&v169[32 * v165];
        *v170 = __dst;
        v170[1].__r_.__value_.__s.__data_[0] = v151;
        v172 = v147[1];
        v171 = v147[2];
        if (v171 == v172)
        {
          v175 = vdupq_n_s64(v171);
          v173 = &v169[32 * v165];
        }
        else
        {
          v173 = &v169[32 * v165];
          do
          {
            v174 = *(_OWORD *)(v171 - 32);
            *((_QWORD *)v173 - 2) = *(_QWORD *)(v171 - 16);
            *((_OWORD *)v173 - 2) = v174;
            *(_QWORD *)(v171 - 24) = 0;
            *(_QWORD *)(v171 - 16) = 0;
            *(_QWORD *)(v171 - 32) = 0;
            *(v173 - 8) = *(_BYTE *)(v171 - 8);
            v173 -= 32;
            v171 -= 32;
          }
          while (v171 != v172);
          v175 = *(int64x2_t *)(v147 + 1);
        }
        v163 = &v170[1].__r_.__value_.__s.__data_[8];
        v147[1] = v173;
        v147[2] = (char *)v170 + 32;
        *(int64x2_t *)&v1286[0].__r_.__value_.__r.__words[1] = v175;
        v176 = v147[3];
        v147[3] = &v169[32 * v168];
        v1286[1].__r_.__value_.__r.__words[0] = v176;
        v1286[0].__r_.__value_.__r.__words[0] = v175.i64[0];
        sub_22E3B3F98((uint64_t)v1286);
      }
      else
      {
        *v161 = __dst;
        v161[1].__r_.__value_.__s.__data_[0] = v151;
        v163 = &v161[1].__r_.__value_.__s.__data_[8];
      }
      v147[2] = v163;
      v153 = (std::string *)((char *)v153 + 16);
      if (v153 == (std::string *)v154)
      {
        v153 = (std::string *)__len.__r_.__value_.__r.__words[0];
        goto LABEL_477;
      }
    }
  }
LABEL_480:
  v177 = v147[7];
  v178 = v147[8];
  v179 = (int64x2_t *)(v147 + 7);
  for (j = v1223; v178 != v177; v178 -= 24)
  {
    if (*(char *)(v178 - 1) < 0)
      operator delete(*(void **)(v178 - 24));
  }
  *(_QWORD *)(v1224 + 64) = v177;
  sub_22E70B070((uint64_t)&v1283, 114, (uint64_t)&__len);
  *(std::string *)v1267 = __len;
  v181 = v1288;
  while (*(std::string::pointer *)v1267 != v181)
  {
    v182 = *(const char ***)(**(_QWORD **)v1267 + 48);
    v183 = *v182;
    if (*v182)
      v184 = strlen(*v182);
    else
      v184 = 0;
    sub_22F2A983C(v179, v183, v184);
    *(_QWORD *)v1267 += 8;
    sub_22E721830((uint64_t)v1267);
  }
  sub_22E70B070((uint64_t)&v1283, 86, (uint64_t)v1267);
  v1281 = *(std::string *)v1267;
  v185 = *(_QWORD *)v1267;
  v1212 = *(_QWORD *)&v1267[24];
  if (*(_QWORD *)v1267 == *(_QWORD *)&v1267[24])
    goto LABEL_583;
  v186 = (llvm::StringMapImpl *)(v1224 + 80);
  do
  {
    v1217 = *(_QWORD *)v185;
    v187 = **(const char ***)(*(_QWORD *)v185 + 48);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v187;
    if (v187)
      v187 = (const char *)strlen(v187);
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v187;
    __len.__r_.__value_.__r.__words[0] = (std::string::size_type)&__len.__r_.__value_.__r.__words[2];
    __len.__r_.__value_.__l.__size_ = 0x400000000;
    llvm::StringRef::split();
    if (!LODWORD(__len.__r_.__value_.__r.__words[1]))
      goto LABEL_580;
    v188 = __len.__r_.__value_.__r.__words[0];
    v1221 = __len.__r_.__value_.__r.__words[0] + 16 * LODWORD(__len.__r_.__value_.__r.__words[1]);
    while (1)
    {
      *(_OWORD *)&__s2.__r_.__value_.__l.__data_ = 0uLL;
      v189 = llvm::StringRef::find();
      if (v189 == -1)
        break;
      v191 = *(char **)v188;
      v190 = *(_QWORD *)(v188 + 8);
      if (v190 >= v189)
        v192 = v189;
      else
        v192 = *(_QWORD *)(v188 + 8);
      if (v190 >= v189 + 1)
        v193 = v189 + 1;
      else
        v193 = *(_QWORD *)(v188 + 8);
      __s2.__r_.__value_.__r.__words[0] = *(_QWORD *)v188;
      __s2.__r_.__value_.__l.__size_ = v192;
      if (v190 <= v189 + 1)
        goto LABEL_562;
      v194 = v190 - v193;
      v195 = &v191[v193];
      v196 = memchr(&v191[v193], 61, v190 - v193);
      if (v196)
        v197 = v196 - v195 == -1;
      else
        v197 = 1;
      if (!v197)
      {
        *(_QWORD *)(j + 312) = 0x13300000000;
        if (*(char *)(j + 311) < 0)
        {
          **(_BYTE **)(j + 288) = 0;
          *(_QWORD *)(j + 296) = 0;
        }
        else
        {
          *(_BYTE *)(j + 288) = 0;
          *(_BYTE *)(j + 311) = 0;
        }
        *(_OWORD *)&v1286[0].__r_.__value_.__l.__data_ = (unint64_t)(v1223 + 320);
        v1286[0].__r_.__value_.__r.__words[2] = j;
        LOWORD(v1286[1].__r_.__value_.__l.__data_) = 1;
        *(_BYTE *)(j + 320) = 0;
        *(_DWORD *)(j + 664) = 0;
        v221 = *(unsigned int *)(j + 776);
        if ((_DWORD)v221)
        {
          v222 = *(_QWORD *)(j + 768);
          v223 = 56 * v221;
          do
          {
            if (*(char *)(v222 + v223 - 9) < 0)
              operator delete(*(void **)(v222 + v223 - 32));
            v223 -= 56;
          }
          while (v223);
        }
        goto LABEL_579;
      }
      if (llvm::StringRef::find() == -1)
      {
        v204 = *(_OWORD *)&__s2.__r_.__value_.__l.__data_;
        v205 = *(_QWORD *)(v1224 + 456);
        v1214 = *(_QWORD *)(v1224 + 464);
        if (v1214 != v205)
        {
          v206 = (v1214 - v205) >> 4;
          do
          {
            v207 = v205 + 16 * (v206 >> 1);
            v208 = *(_QWORD *)(v207 + 8);
            if (*((_QWORD *)&v204 + 1) >= v208)
              v209 = *(_QWORD *)(v207 + 8);
            else
              v209 = *((_QWORD *)&v204 + 1);
            if (v209 && (v210 = memcmp(*(const void **)v207, (const void *)v204, v209)) != 0)
            {
              v211 = (v210 >> 31) | 1;
            }
            else
            {
              if (v208 < *((_QWORD *)&v204 + 1))
                v211 = -1;
              else
                v211 = 1;
              if (v208 == *((_QWORD *)&v204 + 1))
                v211 = 0;
            }
            if (v211 == -1)
              v206 += ~(v206 >> 1);
            else
              v206 >>= 1;
            if (v211 == -1)
              v205 = v207 + 16;
          }
          while (v206);
        }
        v186 = (llvm::StringMapImpl *)(v1224 + 80);
        if (v205 == v1214)
        {
LABEL_551:
          j = v1223;
          if ((*(_BYTE *)(v1224 + 205) & 2) != 0)
          {
            *(_QWORD *)(v1223 + 312) = 0x13500000000;
            if (*(char *)(v1223 + 311) < 0)
            {
              **(_BYTE **)(v1223 + 288) = 0;
              *(_QWORD *)(v1223 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v1223 + 288) = 0;
              *(_BYTE *)(v1223 + 311) = 0;
            }
            *(_OWORD *)&v1286[0].__r_.__value_.__l.__data_ = (unint64_t)(v1223 + 320);
            v1286[0].__r_.__value_.__r.__words[2] = v1223;
            LOWORD(v1286[1].__r_.__value_.__l.__data_) = 1;
            *(_BYTE *)(v1223 + 320) = 0;
            *(_DWORD *)(v1223 + 664) = 0;
            v215 = *(unsigned int *)(v1223 + 776);
            if ((_DWORD)v215)
            {
              v216 = *(_QWORD *)(v1223 + 768);
              v217 = 56 * v215;
              do
              {
                if (*(char *)(v216 + v217 - 9) < 0)
                  operator delete(*(void **)(v216 + v217 - 32));
                v217 -= 56;
              }
              while (v217);
            }
            *(_DWORD *)(v1223 + 776) = 0;
            sub_22E3B89A8((unsigned __int8 **)v1286, __s2.__r_.__value_.__l.__data_, __s2.__r_.__value_.__l.__size_);
            sub_22E3BB0B8((uint64_t)v1286);
          }
          goto LABEL_521;
        }
        v212 = *(_QWORD *)(v205 + 8);
        if (v212 >= *((_QWORD *)&v204 + 1))
          v213 = *((_QWORD *)&v204 + 1);
        else
          v213 = *(_QWORD *)(v205 + 8);
        if (v213 && (v214 = memcmp((const void *)v204, *(const void **)v205, v213)) != 0)
        {
          if (v214 < 0)
            goto LABEL_551;
        }
        else if (*((_QWORD *)&v204 + 1) < v212)
        {
          goto LABEL_551;
        }
      }
      v198 = *(_QWORD *)(v1217 + 16);
      if (!v198)
        v198 = v1217;
      *(_BYTE *)(v198 + 44) |= 1u;
      if (v194 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_2709;
      if (v194 >= 0x17)
      {
        v200 = (v194 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v194 | 7) != 0x17)
          v200 = v194 | 7;
        v201 = v200 + 1;
        v199 = (std::string *)operator new(v200 + 1);
        v1286[0].__r_.__value_.__r.__words[2] = v201 | 0x8000000000000000;
        v1286[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v199;
        v1286[0].__r_.__value_.__l.__size_ = v194;
      }
      else
      {
        *((_BYTE *)&v1286[0].__r_.__value_.__s + 23) = v194;
        v199 = v1286;
      }
      memmove(v199, v195, v194);
      v199->__r_.__value_.__s.__data_[v194] = 0;
      v202 = sub_22E72362C(v186, __s2.__r_.__value_.__l.__data_, __s2.__r_.__value_.__l.__size_);
      v203 = (void **)(*v202 + 8);
      if (*(char *)(*v202 + 31) < 0)
        operator delete(*v203);
      *(std::string *)v203 = v1286[0];
      j = v1223;
LABEL_521:
      v188 += 16;
      if (v188 == v1221)
        goto LABEL_580;
    }
    *(_OWORD *)&__s2.__r_.__value_.__l.__data_ = *(_OWORD *)v188;
LABEL_562:
    *(_QWORD *)(j + 312) = 0x13400000000;
    if (*(char *)(j + 311) < 0)
    {
      **(_BYTE **)(j + 288) = 0;
      *(_QWORD *)(j + 296) = 0;
    }
    else
    {
      *(_BYTE *)(j + 288) = 0;
      *(_BYTE *)(j + 311) = 0;
    }
    *(_OWORD *)&v1286[0].__r_.__value_.__l.__data_ = (unint64_t)(v1223 + 320);
    v1286[0].__r_.__value_.__r.__words[2] = j;
    LOWORD(v1286[1].__r_.__value_.__l.__data_) = 1;
    *(_BYTE *)(j + 320) = 0;
    *(_DWORD *)(j + 664) = 0;
    v218 = *(unsigned int *)(j + 776);
    if ((_DWORD)v218)
    {
      v219 = *(_QWORD *)(j + 768);
      v220 = 56 * v218;
      do
      {
        if (*(char *)(v219 + v220 - 9) < 0)
          operator delete(*(void **)(v219 + v220 - 32));
        v220 -= 56;
      }
      while (v220);
    }
LABEL_579:
    *(_DWORD *)(j + 776) = 0;
    sub_22E3B89A8((unsigned __int8 **)v1286, *(void **)v188, *(_QWORD *)(v188 + 8));
    sub_22E3BB0B8((uint64_t)v1286);
LABEL_580:
    if ((std::string::size_type *)__len.__r_.__value_.__l.__data_ != &__len.__r_.__value_.__r.__words[2])
      free(__len.__r_.__value_.__l.__data_);
    v1281.__r_.__value_.__r.__words[0] += 8;
    sub_22E721830((uint64_t)&v1281);
    v185 = v1281.__r_.__value_.__r.__words[0];
  }
  while (v1281.__r_.__value_.__r.__words[0] != v1212);
LABEL_583:
  if ((*(_BYTE *)(v1224 + 205) & 2) != 0)
    v224 = j;
  else
    v224 = 0;
  sub_22E7223EC(v1224, v224);
  LODWORD(__len.__r_.__value_.__r.__words[1]) = 0;
  LOBYTE(v1290) = 0;
  v1291 = 0;
  v1292 = 1;
  v1289 = 0;
  __len.__r_.__value_.__r.__words[2] = 0;
  v1288 = 0;
  __len.__r_.__value_.__r.__words[0] = MEMORY[0x24BED83D8] + 16;
  v1293 = v1224 + 176;
  llvm::raw_ostream::SetBufferAndMode();
  if ((*(unsigned int (**)(uint64_t *))(v1283 + 8))(&v1283))
  {
    v225 = 0;
    do
    {
      if ((_DWORD)v225)
      {
        if (v1288 == v1289)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__len, " ");
        }
        else
        {
          *(_BYTE *)v1289 = 32;
          v1289 = (char *)v1289 + 1;
        }
      }
      v226 = (const char *)(*(uint64_t (**)(uint64_t *, uint64_t))v1283)(&v1283, v225);
      if (v226)
      {
        v227 = v226;
        v228 = strlen(v226);
        if (v228 <= v1288 - (_BYTE *)v1289)
        {
          if (v228)
          {
            memcpy(v1289, v227, v228);
            v1289 = (char *)v1289 + v228;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__len, v227);
        }
      }
      v225 = (v225 + 1);
    }
    while (v225 < (*(unsigned int (**)(uint64_t *))(v1283 + 8))(&v1283));
  }
  if (v1289 != (void *)__len.__r_.__value_.__r.__words[2])
    llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&__len);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__len);
  sub_22E724F68((_DWORD **)v1277);
  v229 = v1219[1].__r_.__value_.__l.__size_;
  __len.__r_.__value_.__s.__data_[0] = 0;
  v1294 = 0;
  v230 = *(_QWORD *)(v229 + 120);
  v1230[1] = 0;
  data = 0;
  v1230[0] = 0;
  sub_22E618148(v1230, v230, *(_QWORD *)(v229 + 128), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v229 + 128) - v230) >> 3));
  memset(&__p, 0, sizeof(__p));
  memset(v1267, 0, 24);
  sub_22E63B344((void **)(v229 + 120));
  *(_OWORD *)(v229 + 120) = *(_OWORD *)v1267;
  *(_QWORD *)(v229 + 136) = *(_QWORD *)&v1267[16];
  memset(v1267, 0, 24);
  v1286[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1267;
  sub_22E3B3CC8((void ***)v1286);
  v1286[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  sub_22E3B3CC8((void ***)v1286);
  v1286[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1230;
  sub_22E3B3CC8((void ***)v1286);
  llvm::opt::ArgList::getAllArgValues();
  *(std::string *)v1267 = v1286[0];
  memset(v1286, 0, 24);
  v1267[24] = 1;
  v1259.__r_.__value_.__r.__words[0] = (std::string::size_type)v1286;
  sub_22E3B3CC8((void ***)&v1259);
  if (v1267[24])
  {
    memset(&v1259, 0, sizeof(v1259));
    sub_22E618148(&v1259, *(_QWORD *)(v229 + 120), *(_QWORD *)(v229 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v229 + 128) - *(_QWORD *)(v229 + 120)) >> 3));
    memset(&v1257, 0, sizeof(v1257));
    sub_22E618148(&v1257, *(uint64_t *)v1267, *(uint64_t *)&v1267[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v1267[8] - *(_QWORD *)v1267) >> 3));
    memset(v1286, 0, 24);
    sub_22E618148(v1286, (uint64_t)v1257.__r_.__value_.__l.__data_, v1257.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1257.__r_.__value_.__l.__size_ - v1257.__r_.__value_.__r.__words[0]) >> 3));
    sub_22E63B344((void **)(v229 + 120));
    *(std::string *)(v229 + 120) = v1286[0];
    memset(v1286, 0, 24);
    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v1286;
    sub_22E3B3CC8((void ***)&__src);
    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1257;
    sub_22E3B3CC8((void ***)&__src);
    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1259;
    sub_22E3B3CC8((void ***)&__src);
    if (v1267[24])
    {
      v1286[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1267;
      sub_22E3B3CC8((void ***)v1286);
    }
  }
  *(_DWORD *)(v229 + 4) |= 0x200u;
  if (sub_22E721888((uint64_t)&v1283, 0x3CDu, 0x1D8u))
  {
    if (llvm::opt::Option::matches())
      v231 = 0;
    else
      v231 = 512;
    v232 = *(_DWORD *)(v229 + 4) & 0xFFFFFDFF | v231;
  }
  else
  {
    v232 = *(_DWORD *)(v229 + 4);
  }
  *(_DWORD *)(v229 + 4) = v232 & 0xFFF7FFFF;
  v233 = sub_22E721714((uint64_t)&v1283, 404);
  v234 = *(_DWORD *)(v229 + 4);
  if (v233)
    v234 |= 0x80000u;
  *(_DWORD *)(v229 + 4) = v234 | 0x400;
  v235 = sub_22E721714((uint64_t)&v1283, 1017);
  v236 = *(_DWORD *)(v229 + 4);
  if (v235)
    v236 &= 0xFFFFEBFF;
  *(_DWORD *)(v229 + 4) = v236 & 0xFFFFEFFF;
  v237 = sub_22E721714((uint64_t)&v1283, 600);
  v238 = *(_DWORD *)(v229 + 4);
  if (v237)
    v238 |= 0x1000u;
  *(_DWORD *)(v229 + 4) = v238 & 0xFFFFF7FF;
  v239 = sub_22E721714((uint64_t)&v1283, 601);
  v240 = *(_DWORD *)(v229 + 4);
  if (v239)
    v240 |= 0x800u;
  *(_DWORD *)(v229 + 4) = v240 | 0x4000;
  if (sub_22E721888((uint64_t)&v1283, 0x3FCu, 0x25Fu))
  {
    if (llvm::opt::Option::matches())
      v241 = 0;
    else
      v241 = 0x4000;
    v242 = *(_DWORD *)(v229 + 4) & 0xFFFFBFFF | v241;
  }
  else
  {
    v242 = *(_DWORD *)(v229 + 4);
  }
  *(_DWORD *)(v229 + 4) = v242 & 0xFFFF7FFF;
  if (sub_22E721888((uint64_t)&v1283, 0x25Eu, 0x3FBu))
  {
    if (llvm::opt::Option::matches())
      v243 = 0x8000;
    else
      v243 = 0;
    v244 = *(_DWORD *)(v229 + 4) & 0xFFFF7FFF | v243;
  }
  else
  {
    v244 = *(_DWORD *)(v229 + 4);
  }
  *(_DWORD *)(v229 + 4) = v244 & 0xFFFF7FFF;
  if (sub_22E721888((uint64_t)&v1283, 0x3FBu, 0x25Eu))
  {
    if (llvm::opt::Option::matches())
      v245 = 0;
    else
      v245 = 0x8000;
    v246 = *(_DWORD *)(v229 + 4) & 0xFFFF7FFF | v245;
  }
  else
  {
    v246 = *(_DWORD *)(v229 + 4);
  }
  *(_DWORD *)(v229 + 4) = v246 & 0xFFBFFFFF;
  v247 = sub_22E721714((uint64_t)&v1283, 608);
  v248 = *(_DWORD *)(v229 + 4);
  if (v247)
    v248 |= 0x400000u;
  *(_DWORD *)(v229 + 4) = v248 | 0x200000;
  if (sub_22E721714((uint64_t)&v1283, 1036))
    *(_DWORD *)(v229 + 4) &= ~0x200000u;
  *(_QWORD *)(v229 + 32) = *(unsigned int *)(v229 + 32);
  v249 = sub_22E6EC038(865, (uint64_t)&v1283, j);
  if (HIDWORD(v249))
    *(_DWORD *)(v229 + 36) = v249;
  *(_DWORD *)(v229 + 4) &= ~0x100u;
  if (sub_22E721714((uint64_t)&v1283, 592))
    *(_DWORD *)(v229 + 4) |= 0x100u;
  *(_BYTE *)(v229 + 40) &= ~4u;
  v250 = sub_22E6EC1FC(1686, 0xFu, (uint64_t)&v1283, j);
  if (HIDWORD(v250))
    *(_BYTE *)(v229 + 40) = *(_BYTE *)(v229 + 40) & 0xFB | (4 * (v250 & 1));
  *(_DWORD *)(v229 + 4) |= 0x20u;
  if (sub_22E721888((uint64_t)&v1283, 0x50Fu, 0x695u))
  {
    if (llvm::opt::Option::matches())
      v251 = 0;
    else
      v251 = 32;
    v252 = *(_DWORD *)(v229 + 4) & 0xFFFFFFDF | v251;
  }
  else
  {
    v252 = *(_DWORD *)(v229 + 4);
  }
  *(_DWORD *)(v229 + 4) = v252 | 0x40;
  if (sub_22E721888((uint64_t)&v1283, 0x510u, 0x698u))
  {
    if (llvm::opt::Option::matches())
      v253 = 0;
    else
      v253 = 64;
    v254 = *(_DWORD *)(v229 + 4) & 0xFFFFFFBF | v253;
  }
  else
  {
    v254 = *(_DWORD *)(v229 + 4);
  }
  *(_DWORD *)(v229 + 4) = v254 & 0xFFFFFFF7;
  v255 = sub_22E721714((uint64_t)&v1283, 2832);
  v256 = *(_DWORD *)(v229 + 4);
  if (v255)
    v256 |= 8u;
  *(_DWORD *)(v229 + 4) = v256 & 0xFFFFFFFB;
  v257 = sub_22E721714((uint64_t)&v1283, 2833);
  v258 = *(_DWORD *)(v229 + 4);
  if (v257)
    v258 |= 4u;
  *(_DWORD *)(v229 + 4) = v258 & 0xFFFFFFFE;
  if (sub_22E721714((uint64_t)&v1283, 3131))
    *(_DWORD *)(v229 + 4) |= 1u;
  v259 = (void **)(v229 + 48);
  if (*(char *)(v229 + 71) < 0)
  {
    sub_22E3BB2B4(&__src, *(void **)(v229 + 48), *(_QWORD *)(v229 + 56));
    v260 = *(char *)(v229 + 71);
    *(_DWORD *)v1267 = 0;
    *(_DWORD *)&v1267[3] = 0;
    if (v260 < 0)
      operator delete(*v259);
  }
  else
  {
    *(_OWORD *)&__src.__r_.__value_.__l.__data_ = *(_OWORD *)v259;
    __src.__r_.__value_.__r.__words[2] = *(_QWORD *)(v229 + 64);
    *(_DWORD *)v1267 = 0;
    *(_DWORD *)&v1267[3] = 0;
  }
  *v259 = 0;
  *(_QWORD *)(v229 + 56) = 0;
  *(_DWORD *)(v229 + 64) = *(_DWORD *)v1267;
  *(_DWORD *)(v229 + 67) = *(_DWORD *)&v1267[3];
  *(_BYTE *)(v229 + 71) = 0;
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
  sub_22E6EC3DC((uint64_t)v1267, 277, (uint64_t)&v1283);
  if (v1267[24])
  {
    if (*(char *)(v229 + 71) < 0)
    {
      sub_22E3BB2B4(v1265, *(void **)(v229 + 48), *(_QWORD *)(v229 + 56));
    }
    else
    {
      *(_OWORD *)v1265 = *(_OWORD *)v259;
      *(_QWORD *)&v1266 = *(_QWORD *)(v229 + 64);
    }
    v261 = v1267[23];
    if ((v1267[23] & 0x80000000) != 0)
      sub_22E3BB2B4(&v1282, *(void **)v1267, *(unint64_t *)&v1267[8]);
    else
      v1282 = *(std::string *)v1267;
    if (SHIBYTE(v1282.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(v1286, v1282.__r_.__value_.__l.__data_, v1282.__r_.__value_.__l.__size_);
    else
      v1286[0] = v1282;
    if (*(char *)(v229 + 71) < 0)
      operator delete(*v259);
    *(_OWORD *)v259 = *(_OWORD *)&v1286[0].__r_.__value_.__l.__data_;
    *(_QWORD *)(v229 + 64) = *((_QWORD *)&v1286[0].__r_.__value_.__l + 2);
    *((_BYTE *)&v1286[0].__r_.__value_.__s + 23) = 0;
    v1286[0].__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v1282.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1282.__r_.__value_.__l.__data_);
    if (SBYTE7(v1266) < 0)
    {
      operator delete(v1265[0]);
      if (v261 < 0)
        goto LABEL_758;
    }
    else
    {
      if ((v261 & 0x80000000) == 0)
        goto LABEL_686;
LABEL_758:
      operator delete(*(void **)v1267);
    }
  }
LABEL_686:
  *(_BYTE *)(v229 + 40) &= 0xFCu;
  v262 = sub_22E6EC1FC(597, 0x26u, (uint64_t)&v1283, j);
  if (HIDWORD(v262))
    *(_BYTE *)(v229 + 40) = *(_BYTE *)(v229 + 40) & 0xFC | v262 & 3;
  *(_DWORD *)(v229 + 4) &= 0xFFFCFFFF;
  v263 = sub_22E6EC1FC(603, 0x27u, (uint64_t)&v1283, j);
  v264 = *(_DWORD *)(v229 + 4);
  if (HIDWORD(v263))
    v264 = v264 & 0xFFFCDFFF | ((v263 & 3) << 16);
  *(_DWORD *)(v229 + 4) = v264 | 0x2000;
  if (sub_22E721714((uint64_t)&v1283, 1021))
    *(_DWORD *)(v229 + 4) &= ~0x2000u;
  *(_DWORD *)(v229 + 32) = 8;
  v265 = sub_22E6EC038(1739, (uint64_t)&v1283, j);
  v266 = (unint64_t)*(unsigned int *)(v229 + 12) << 32;
  if (HIDWORD(v265))
    v267 = *(_QWORD *)(v229 + 32) & 0xFFFFFFFF00000000 | v265;
  else
    v267 = *(_QWORD *)(v229 + 32);
  *(_QWORD *)(v229 + 32) = v267;
  *(_QWORD *)(v229 + 8) = v266;
  v268 = sub_22E6EC038(645, (uint64_t)&v1283, j);
  if (HIDWORD(v268))
    LODWORD(v269) = v268;
  else
    v269 = *(_QWORD *)(v229 + 8);
  *(_QWORD *)(v229 + 8) = v269 | 0x600000000;
  v270 = sub_22E6EC038(849, (uint64_t)&v1283, j);
  if (HIDWORD(v270))
    v271 = *(_QWORD *)(v229 + 8) | ((unint64_t)v270 << 32);
  else
    v271 = *(_QWORD *)(v229 + 8);
  *(_DWORD *)(v229 + 16) = 10;
  *(_QWORD *)(v229 + 8) = v271;
  v272 = sub_22E6EC038(1742, (uint64_t)&v1283, j);
  if (HIDWORD(v272))
    LODWORD(v273) = v272;
  else
    v273 = *(_QWORD *)(v229 + 16);
  *(_QWORD *)(v229 + 16) = v273 | 0xA00000000;
  v274 = sub_22E6EC038(506, (uint64_t)&v1283, j);
  if (HIDWORD(v274))
    v275 = *(_QWORD *)(v229 + 16) | ((unint64_t)v274 << 32);
  else
    v275 = *(_QWORD *)(v229 + 16);
  *(_DWORD *)(v229 + 24) = 50;
  *(_QWORD *)(v229 + 16) = v275;
  v276 = sub_22E6EC038(1704, (uint64_t)&v1283, j);
  if (HIDWORD(v276))
    LODWORD(v277) = v276;
  else
    v277 = *(_QWORD *)(v229 + 24);
  *(_QWORD *)(v229 + 24) = v277 | 0x100000000;
  v278 = sub_22E6EC038(471, (uint64_t)&v1283, j);
  if (HIDWORD(v278))
    *(_DWORD *)(v229 + 28) = v278;
  *(_DWORD *)(v229 + 4) &= ~2u;
  v279 = sub_22E721714((uint64_t)&v1283, 3116);
  v280 = *(_DWORD *)(v229 + 4);
  if (v279)
  {
    v280 |= 2u;
    *(_DWORD *)(v229 + 4) = v280;
  }
  llvm::sys::Process::UseANSIEscapeCodes((llvm::sys::Process *)((v280 >> 19) & 1));
  v281 = sub_22E6EC70C((uint64_t)&v1283, 0xB87u, 0xB88u);
  if (v281)
    MEMORY[0x2348A0C14](v229 + 72, **(_QWORD **)(v281 + 48));
  if (v1285)
  {
    v282 = 8 * v1285;
    v283 = v1284;
    while (!*v283)
    {
      ++v283;
      v282 -= 8;
      if (!v282)
        goto LABEL_756;
    }
  }
  else
  {
    v283 = v1284;
  }
  v284 = &v1284[v1285];
  if (v283 == v284)
    goto LABEL_756;
  v285 = 1;
  v286 = *v283;
LABEL_724:
  v287 = llvm::opt::Option::matches();
  if ((v287 & 1) != 0)
  {
LABEL_725:
    v285 = 0;
    goto LABEL_749;
  }
  v287 = llvm::opt::Option::matches();
  if ((v287 & 1) != 0)
  {
LABEL_727:
    v285 = 1;
    goto LABEL_749;
  }
  v287 = llvm::opt::Option::matches();
  if (!(_DWORD)v287)
    goto LABEL_749;
  v288 = *(const char ***)(v286 + 48);
  v289 = *v288;
  if (!*v288)
    goto LABEL_749;
  v287 = strlen(*v288);
  if (v287 == 4)
  {
    v291 = bswap32(*(_DWORD *)v289);
    v292 = v291 >= 0x6175746F;
    v293 = v291 > 0x6175746F;
    v294 = !v292;
    if (v293 == v294)
      v285 = 2;
    goto LABEL_749;
  }
  if (v287 == 5)
  {
    if (*(_DWORD *)v289 != 1702258030 || v289[4] != 114)
      goto LABEL_749;
    goto LABEL_727;
  }
  if (v287 == 6 && *(_DWORD *)v289 == 1635216481 && *((_WORD *)v289 + 2) == 29561)
    goto LABEL_725;
LABEL_749:
  v296 = v283 + 1;
  while (v296 != v284)
  {
    v297 = *v296++;
    v286 = v297;
    if (v297)
    {
      v283 = v296 - 1;
      goto LABEL_724;
    }
  }
  if (v285 == 2)
  {
    HasColors = llvm::sys::Process::StandardErrHasColors((llvm::sys::Process *)v287);
    v298 = *(_DWORD *)(v229 + 4);
    j = v1223;
    if (HasColors)
LABEL_760:
      v299 = 0x40000;
    else
      v299 = 0;
  }
  else
  {
    j = v1223;
    if (!v285)
    {
      v298 = *(_DWORD *)(v229 + 4);
      goto LABEL_760;
    }
LABEL_756:
    v299 = 0;
    v298 = *(_DWORD *)(v229 + 4);
  }
  *(_DWORD *)(v229 + 4) = v298 & 0xFFFBFFFF | v299;
  if (sub_22E6EBFB4((uint64_t)&v1283, 3067))
    v301 = 0x100000;
  else
    v301 = (sub_22E6EBFB4((uint64_t)&v1283, 3066) != 0) << 20;
  *(_DWORD *)(v229 + 4) = *(_DWORD *)(v229 + 4) & 0xFFEFFFFF | v301;
  llvm::opt::ArgList::getAllArgValues();
  v302 = (_QWORD *)(v229 + 168);
  sub_22E63B344((void **)(v229 + 168));
  *(_OWORD *)(v229 + 168) = *(_OWORD *)v1267;
  *(_QWORD *)(v229 + 184) = *(_QWORD *)&v1267[16];
  v303 = (uint64_t *)(v229 + 184);
  memset(v1267, 0, 24);
  v1286[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1267;
  sub_22E3B3CC8((void ***)v1286);
  v304 = sub_22E6EBFB4((uint64_t)&v1283, 3067);
  v305 = *(char **)(v229 + 176);
  if (!v304)
    goto LABEL_785;
  v306 = *v303;
  if ((unint64_t)v305 < *v303)
  {
    strcpy(v305, "expected");
    v305[23] = 8;
    v305 += 24;
    goto LABEL_784;
  }
  v307 = (char *)*v302;
  v308 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v305[-*v302] >> 3);
  v309 = v308 + 1;
  if (v308 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_2709;
  if (0x5555555555555556 * ((v306 - (uint64_t)v307) >> 3) > v309)
    v309 = 0x5555555555555556 * ((v306 - (uint64_t)v307) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((v306 - (uint64_t)v307) >> 3) >= 0x555555555555555)
    v310 = 0xAAAAAAAAAAAAAAALL;
  else
    v310 = v309;
  v1268 = (std::string *)(v229 + 184);
  if (!v310)
  {
    v311 = 0;
    goto LABEL_778;
  }
  if (v310 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_2710;
  v311 = (char *)operator new(24 * v310);
LABEL_778:
  v312 = &v311[24 * v308];
  strcpy(v312, "expected");
  v312[23] = 8;
  if (v305 == v307)
  {
    v315 = vdupq_n_s64((unint64_t)v305);
    v313 = &v311[24 * v308];
  }
  else
  {
    v313 = &v311[24 * v308];
    do
    {
      v314 = *(_OWORD *)(v305 - 24);
      *((_QWORD *)v313 - 1) = *((_QWORD *)v305 - 1);
      *(_OWORD *)(v313 - 24) = v314;
      v313 -= 24;
      *((_QWORD *)v305 - 2) = 0;
      *((_QWORD *)v305 - 1) = 0;
      *((_QWORD *)v305 - 3) = 0;
      v305 -= 24;
    }
    while (v305 != v307);
    v315 = *(int64x2_t *)v302;
    v306 = *v303;
  }
  v305 = v312 + 24;
  *(_QWORD *)(v229 + 168) = v313;
  *(_QWORD *)(v229 + 176) = v312 + 24;
  *(int64x2_t *)&v1267[8] = v315;
  *(_QWORD *)(v229 + 184) = &v311[24 * v310];
  *(_QWORD *)&v1267[24] = v306;
  *(_QWORD *)v1267 = v315.i64[0];
  sub_22E3B8B94((uint64_t)v1267);
LABEL_784:
  *(_QWORD *)(v229 + 176) = v305;
LABEL_785:
  v316 = (size_t *)*v302;
  if ((char *)*v302 == v305)
  {
    v342 = (uint64_t)v305;
LABEL_838:
    v343 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v305[-v342] >> 3));
    if (v305 == (char *)v342)
      v344 = 0;
    else
      v344 = v343;
    sub_22E63C10C(v342, (const void **)v305, (uint64_t)v1267, v344, 1);
    goto LABEL_843;
  }
  v317 = (unsigned __int8 *)(j + 320);
  v318 = 1;
  while (2)
  {
    while (2)
    {
      v319 = *((_BYTE *)v316 + 23);
      v320 = v319;
      v321 = (unsigned __int8 *)*v316;
      if (v319 >= 0)
        v322 = (unsigned __int8 *)v316;
      else
        v322 = (unsigned __int8 *)*v316;
      v323 = v319 & 0x7F;
      if (v320 >= 0)
        v324 = v323;
      else
        v324 = v316[1];
      if (v324)
      {
        v325 = &v322[v324];
        while (1)
        {
          v326 = *v322;
          if ((word_22F4ADB24[v326] & 0x68) == 0 && (_DWORD)v326 != 95 && (_DWORD)v326 != 45)
            break;
          ++v322;
          if (!--v324)
          {
            v322 = v325;
            break;
          }
        }
      }
      if ((v320 & 0x80000000) == 0)
      {
        if (v322 == (unsigned __int8 *)((char *)v316 + v323))
        {
          v327 = *v316;
          goto LABEL_805;
        }
        goto LABEL_808;
      }
      if (v322 != &v321[v316[1]])
        goto LABEL_808;
      v327 = *v321;
LABEL_805:
      if ((word_22F4ADB24[v327] & 0x60) == 0)
      {
LABEL_808:
        *(_QWORD *)(j + 312) = 0x18800000000;
        if (*(char *)(j + 311) < 0)
        {
          **(_BYTE **)(j + 288) = 0;
          *(_QWORD *)(j + 296) = 0;
        }
        else
        {
          *(_BYTE *)(j + 288) = 0;
          *(_BYTE *)(j + 311) = 0;
        }
        *(_QWORD *)v1267 = v317;
        *(_QWORD *)&v1267[8] = 0;
        *(_QWORD *)&v1267[16] = j;
        *(_WORD *)&v1267[24] = 1;
        *(_BYTE *)(j + 320) = 0;
        *(_DWORD *)(j + 664) = 0;
        v328 = *(unsigned int *)(j + 776);
        if ((_DWORD)v328)
        {
          v329 = *(_QWORD *)(j + 768);
          v330 = 56 * v328;
          do
          {
            if (*(char *)(v329 + v330 - 9) < 0)
              operator delete(*(void **)(v329 + v330 - 32));
            v330 -= 56;
          }
          while (v330);
          v331 = *(unsigned __int8 **)v1267;
          j = v1223;
          *(_DWORD *)(v1223 + 776) = 0;
          if (!v331)
          {
            v331 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v1267[8]);
            *(_QWORD *)v1267 = v331;
          }
        }
        else
        {
          *(_DWORD *)(j + 776) = 0;
          v331 = v317;
        }
        v331[*v331 + 1] = 1;
        v332 = *(_QWORD *)v1267;
        v333 = **(_BYTE **)v1267;
        **(_BYTE **)v1267 = v333 + 1;
        *(_QWORD *)(v332 + 8 * v333 + 16) = "-verify=";
        v334 = *((_BYTE *)v316 + 23);
        v335 = v334 < 0;
        if (v334 >= 0)
          v336 = v316;
        else
          v336 = (void *)*v316;
        v337 = v334 & 0x7F;
        if (v335)
          v338 = v316[1];
        else
          v338 = v337;
        sub_22E3B89A8((unsigned __int8 **)v1267, v336, v338);
        sub_22E3BB0B8((uint64_t)v1267);
        *(_QWORD *)(j + 312) = 0x1E700000000;
        if (*(char *)(j + 311) < 0)
        {
          **(_BYTE **)(j + 288) = 0;
          *(_QWORD *)(j + 296) = 0;
        }
        else
        {
          *(_BYTE *)(j + 288) = 0;
          *(_BYTE *)(j + 311) = 0;
        }
        *(_OWORD *)&v1286[0].__r_.__value_.__l.__data_ = (unint64_t)v317;
        v1286[0].__r_.__value_.__r.__words[2] = j;
        LOWORD(v1286[1].__r_.__value_.__l.__data_) = 1;
        *(_BYTE *)(j + 320) = 0;
        *(_DWORD *)(j + 664) = 0;
        v339 = *(unsigned int *)(j + 776);
        if ((_DWORD)v339)
        {
          v340 = *(_QWORD *)(v1223 + 768);
          v341 = 56 * v339;
          do
          {
            if (*(char *)(v340 + v341 - 9) < 0)
              operator delete(*(void **)(v340 + v341 - 32));
            v341 -= 56;
          }
          while (v341);
        }
        j = v1223;
        *(_DWORD *)(v1223 + 776) = 0;
        sub_22E3BB0B8((uint64_t)v1286);
        v318 = 0;
        v316 += 3;
        if (v316 == (size_t *)v305)
          goto LABEL_842;
        continue;
      }
      break;
    }
    v316 += 3;
    if (v316 != (size_t *)v305)
      continue;
    break;
  }
  if ((v318 & 1) != 0)
  {
    v342 = *(_QWORD *)(v229 + 168);
    v305 = *(char **)(v229 + 176);
    goto LABEL_838;
  }
LABEL_842:
  *(_DWORD *)(v229 + 4) &= ~0x100000u;
LABEL_843:
  llvm::opt::ArgList::getAllArgValues();
  v346 = v1286[0].__r_.__value_.__l.__size_;
  v345 = v1286[0].__r_.__value_.__r.__words[0];
  if (v1286[0].__r_.__value_.__r.__words[0] == v1286[0].__r_.__value_.__l.__size_)
  {
    v367 = 0;
  }
  else
  {
    v347 = 0;
    v348 = j + 320;
    while (2)
    {
      v349 = *(_BYTE *)(v345 + 23);
      v350 = v349 < 0;
      v351 = *(int **)v345;
      if (v349 >= 0)
        v351 = (int *)v345;
      v352 = v349 & 0x7F;
      if (v350)
        v352 = *(_QWORD *)(v345 + 8);
      switch(v352)
      {
        case 4:
          v353 = *v351 == 1702129518;
          v354 = 0x100000001;
          goto LABEL_856;
        case 5:
          if (*v351 ^ 0x6F727265 | *((unsigned __int8 *)v351 + 4) ^ 0x72)
            v354 = 0;
          else
            v354 = 0x100000008;
          goto LABEL_858;
        case 6:
          v353 = (*v351 ^ 0x616D6572 | *((unsigned __int16 *)v351 + 2) ^ 0x6B72) == 0;
          v354 = 0x100000002;
LABEL_856:
          if (!v353)
            v354 = 0;
          goto LABEL_858;
        case 7:
          v356 = *v351;
          v357 = *(int *)((char *)v351 + 3);
          if (v356 != 1852989815 || v357 != 1735289198)
            goto LABEL_867;
          v354 = 0x100000004;
LABEL_858:
          if (v354 <= 0x100000000)
            v355 = 0;
          else
            v355 = v354;
          if ((v355 & 0xF) == 0)
          {
LABEL_867:
            *(_QWORD *)(j + 312) = 0x18800000000;
            if (*(char *)(j + 311) < 0)
            {
              **(_BYTE **)(j + 288) = 0;
              *(_QWORD *)(j + 296) = 0;
            }
            else
            {
              *(_BYTE *)(j + 288) = 0;
              *(_BYTE *)(j + 311) = 0;
            }
            *(_QWORD *)v1267 = v348;
            *(_QWORD *)&v1267[8] = 0;
            *(_QWORD *)&v1267[16] = j;
            *(_WORD *)&v1267[24] = 1;
            *(_BYTE *)(j + 320) = 0;
            *(_DWORD *)(j + 664) = 0;
            v359 = *(unsigned int *)(j + 776);
            if ((_DWORD)v359)
            {
              v360 = *(_QWORD *)(v1223 + 768);
              v361 = 56 * v359;
              do
              {
                if (*(char *)(v360 + v361 - 9) < 0)
                  operator delete(*(void **)(v360 + v361 - 32));
                v361 -= 56;
              }
              while (v361);
            }
            j = v1223;
            *(_DWORD *)(v1223 + 776) = 0;
            sub_22E3B89A8((unsigned __int8 **)v1267, "-verify-ignore-unexpected=", 0x1AuLL);
            v362 = *(_BYTE *)(v345 + 23);
            v363 = v362 < 0;
            if (v362 >= 0)
              v364 = (int *)v345;
            else
              v364 = *(int **)v345;
            v365 = v362 & 0x7F;
            if (v363)
              v366 = *(_QWORD *)(v345 + 8);
            else
              v366 = v365;
            sub_22E3B89A8((unsigned __int8 **)v1267, v364, v366);
            sub_22E3BB0B8((uint64_t)v1267);
            LOBYTE(v354) = 0;
          }
          v347 |= v354;
          v345 += 24;
          if (v345 != v346)
            continue;
          v367 = v347 & 0xF;
          break;
        default:
          v354 = 0;
          goto LABEL_858;
      }
      break;
    }
  }
  *(_QWORD *)v1267 = v1286;
  sub_22E3B3CC8((void ***)v1267);
  v368 = sub_22E6EBFB4((uint64_t)&v1283, 3064);
  v370 = *(_QWORD *)(v229 + 8);
  v369 = *(_QWORD *)(v229 + 16);
  v371 = *(_QWORD *)(v229 + 24);
  v372 = *(_QWORD *)(v229 + 32);
  v373 = 8 * v367;
  if (v368)
    v373 = 120;
  v374 = *(_BYTE *)(v229 + 40) & 0x87 | v373;
  *(_BYTE *)(v229 + 40) = v374;
  v375 = v1211;
  if ((v372 - 101) <= 0xFFFFFF9B)
  {
    *(_QWORD *)(v229 + 8) = v370;
    *(_QWORD *)(v229 + 16) = v369;
    *(_QWORD *)(v229 + 24) = v371;
    *(_QWORD *)(v229 + 32) = v372 & 0xFFFFFFFF00000000 | 8;
    *(_BYTE *)(v229 + 40) = v374;
    *(_QWORD *)(j + 312) = 0x22F00000000;
    if (*(char *)(j + 311) < 0)
    {
      **(_BYTE **)(j + 288) = 0;
      *(_QWORD *)(j + 296) = 0;
    }
    else
    {
      *(_BYTE *)(j + 288) = 0;
      *(_BYTE *)(j + 311) = 0;
    }
    *(_QWORD *)v1267 = j + 320;
    *(_QWORD *)&v1267[8] = 0;
    *(_QWORD *)&v1267[16] = j;
    *(_WORD *)&v1267[24] = 1;
    *(_BYTE *)(j + 320) = 0;
    *(_DWORD *)(j + 664) = 0;
    v376 = *(unsigned int *)(j + 776);
    if ((_DWORD)v376)
    {
      v377 = *(_QWORD *)(j + 768);
      v378 = 56 * v376;
      do
      {
        if (*(char *)(v377 + v378 - 9) < 0)
          operator delete(*(void **)(v377 + v378 - 32));
        v378 -= 56;
      }
      while (v378);
      LODWORD(v376) = *(unsigned __int8 *)(j + 320);
      v375 = v1211;
    }
    *(_DWORD *)(j + 776) = 0;
    v379 = *(unsigned int *)(v229 + 32);
    *(_BYTE *)(j + 321 + v376) = 3;
    *(_QWORD *)(j + 336 + 8 * v376) = v379;
    v380 = (v376 + 1);
    *(_BYTE *)(j + 321 + v380) = 2;
    *(_BYTE *)(j + 320) = v376 + 2;
    *(_QWORD *)(j + 336 + 8 * v380) = 8;
    sub_22E3BB0B8((uint64_t)v1267);
  }
  sub_22E6ED754((uint64_t)&v1283, 16, 17, (int64x2_t *)(v229 + 96));
  sub_22E6ED754((uint64_t)&v1283, 12, 13, (int64x2_t *)(v229 + 144));
  if (v1294)
    sub_22F1CB5CC((uint64_t)&__len);
  v1222 = (int *)&v1219[95].__r_.__value_.__r.__words[1];
  sub_22E70B104((uint64_t)&v1219[95].__r_.__value_.__l.__size_, (uint64_t)&v1283, v1210, j, (_BYTE *)(v375 + 704));
  v1218 = LODWORD(v1219[101].__r_.__value_.__r.__words[1]);
  v381 = (__int128 *)v1219->__r_.__value_.__r.__words[2];
  *((_BYTE *)v381 + 313) = 0;
  if (sub_22E721888((uint64_t)&v1283, 0x210u, 0x3E2u))
    *((_BYTE *)v381 + 313) = llvm::opt::Option::matches();
  *((_BYTE *)v381 + 312) = 0;
  if (sub_22E721888((uint64_t)&v1283, 0x2E0u, 0x423u))
    *((_BYTE *)v381 + 312) = llvm::opt::Option::matches();
  v382 = (void **)(v381 + 20);
  if (*((char *)v381 + 343) < 0)
  {
    sub_22E3BB2B4(v1286, *((void **)v381 + 40), *((_QWORD *)v381 + 41));
    if (*((char *)v381 + 343) < 0)
      operator delete(*v382);
  }
  else
  {
    *(_OWORD *)&v1286[0].__r_.__value_.__l.__data_ = *(_OWORD *)v382;
    v1286[0].__r_.__value_.__r.__words[2] = *((_QWORD *)v381 + 42);
  }
  strcpy((char *)v381 + 320, "default");
  *((_BYTE *)v381 + 343) = 7;
  if (SHIBYTE(v1286[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1286[0].__r_.__value_.__l.__data_);
  sub_22E6EC3DC((uint64_t)&__len, 2152, (uint64_t)&v1283);
  if ((_BYTE)v1288)
  {
    if (*((char *)v381 + 343) < 0)
    {
      sub_22E3BB2B4(v1230, *((void **)v381 + 40), *((_QWORD *)v381 + 41));
    }
    else
    {
      *(_OWORD *)v1230 = *(_OWORD *)v382;
      data = *((_QWORD *)v381 + 42);
    }
    v383 = SHIBYTE(__len.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&__p, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
    else
      __p = __len;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(v1267, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      *(std::string *)v1267 = __p;
    if (*((char *)v381 + 343) < 0)
      operator delete(*v382);
    *(_OWORD *)v382 = *(_OWORD *)v1267;
    *((_QWORD *)v381 + 42) = *(_QWORD *)&v1267[16];
    v1267[23] = 0;
    v1267[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(data) < 0)
    {
      operator delete(v1230[0]);
      if (v383 < 0)
        goto LABEL_943;
    }
    else
    {
      if ((v383 & 0x80000000) == 0)
        goto LABEL_927;
LABEL_943:
      operator delete(__len.__r_.__value_.__l.__data_);
    }
  }
LABEL_927:
  *((_DWORD *)v381 + 36) = 1;
  v384 = sub_22E6EC1FC(2182, 0x1Au, (uint64_t)&v1283, j);
  if (HIDWORD(v384))
    *((_DWORD *)v381 + 36) = v384;
  *((_DWORD *)v381 + 79) = 400;
  v385 = sub_22E6EC1FC(2156, 0x1Bu, (uint64_t)&v1283, j);
  if (HIDWORD(v385))
    *((_DWORD *)v381 + 79) = v385;
  *((_BYTE *)v381 + 314) = 0;
  if (sub_22E721888((uint64_t)&v1283, 0xA65u, 0x9CCu))
    *((_BYTE *)v381 + 314) = llvm::opt::Option::matches();
  v386 = (void **)(v381 + 3);
  if (*((char *)v381 + 71) < 0)
  {
    sub_22E3BB2B4(&v1259, *((void **)v381 + 6), *((_QWORD *)v381 + 7));
    v387 = *((char *)v381 + 71);
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
    if (v387 < 0)
      operator delete(*v386);
  }
  else
  {
    *(_OWORD *)&v1259.__r_.__value_.__l.__data_ = *(_OWORD *)v386;
    v1259.__r_.__value_.__r.__words[2] = *((_QWORD *)v381 + 8);
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
  }
  *v386 = 0;
  *((_QWORD *)v381 + 7) = 0;
  *((_DWORD *)v381 + 16) = __len.__r_.__value_.__l.__data_;
  *(_DWORD *)((char *)v381 + 67) = *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3);
  *((_BYTE *)v381 + 71) = 0;
  if (SHIBYTE(v1259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1259.__r_.__value_.__l.__data_);
  sub_22E6EC3DC((uint64_t)&__len, 3006, (uint64_t)&v1283);
  if ((_BYTE)v1288)
  {
    if (*((char *)v381 + 71) < 0)
    {
      sub_22E3BB2B4(&v1257, *((void **)v381 + 6), *((_QWORD *)v381 + 7));
    }
    else
    {
      *(_OWORD *)&v1257.__r_.__value_.__l.__data_ = *(_OWORD *)v386;
      v1257.__r_.__value_.__r.__words[2] = *((_QWORD *)v381 + 8);
    }
    v388 = SHIBYTE(__len.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&__src, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
    else
      __src = __len;
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(v1267, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
    else
      *(std::string *)v1267 = __src;
    if (*((char *)v381 + 71) < 0)
      operator delete(*v386);
    *(_OWORD *)v386 = *(_OWORD *)v1267;
    *((_QWORD *)v381 + 8) = *(_QWORD *)&v1267[16];
    v1267[23] = 0;
    v1267[0] = 0;
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__src.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1257.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v1257.__r_.__value_.__l.__data_);
      if (v388 < 0)
        goto LABEL_967;
    }
    else
    {
      if ((v388 & 0x80000000) == 0)
        goto LABEL_957;
LABEL_967:
      operator delete(__len.__r_.__value_.__l.__data_);
    }
  }
LABEL_957:
  v389 = (void **)v381 + 9;
  if (*((char *)v381 + 95) < 0)
  {
    sub_22E3BB2B4(v1265, *((void **)v381 + 9), *((_QWORD *)v381 + 10));
    v390 = *((char *)v381 + 95);
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
    if (v390 < 0)
      operator delete(*v389);
  }
  else
  {
    *(_OWORD *)v1265 = *(_OWORD *)v389;
    *(_QWORD *)&v1266 = *((_QWORD *)v381 + 11);
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
  }
  *v389 = 0;
  *((_QWORD *)v381 + 10) = 0;
  *((_DWORD *)v381 + 22) = __len.__r_.__value_.__l.__data_;
  *(_DWORD *)((char *)v381 + 91) = *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3);
  *((_BYTE *)v381 + 95) = 0;
  if (SBYTE7(v1266) < 0)
    operator delete(v1265[0]);
  sub_22E6EC3DC((uint64_t)&__len, 3032, (uint64_t)&v1283);
  if ((_BYTE)v1288)
  {
    if (*((char *)v381 + 95) < 0)
    {
      sub_22E3BB2B4(&v1282, *((void **)v381 + 9), *((_QWORD *)v381 + 10));
    }
    else
    {
      *(_OWORD *)&v1282.__r_.__value_.__l.__data_ = *(_OWORD *)v389;
      v1282.__r_.__value_.__r.__words[2] = *((_QWORD *)v381 + 11);
    }
    v391 = SHIBYTE(__len.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v1281, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
    else
      v1281 = __len;
    if (SHIBYTE(v1281.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(v1267, v1281.__r_.__value_.__l.__data_, v1281.__r_.__value_.__l.__size_);
    else
      *(std::string *)v1267 = v1281;
    if (*((char *)v381 + 95) < 0)
      operator delete(*v389);
    *(_OWORD *)v389 = *(_OWORD *)v1267;
    *((_QWORD *)v381 + 11) = *(_QWORD *)&v1267[16];
    v1267[23] = 0;
    v1267[0] = 0;
    if (SHIBYTE(v1281.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1281.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1282.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v1282.__r_.__value_.__l.__data_);
      if ((v391 & 0x80000000) == 0)
        goto LABEL_981;
    }
    else if ((v391 & 0x80000000) == 0)
    {
      goto LABEL_981;
    }
    operator delete(__len.__r_.__value_.__l.__data_);
  }
LABEL_981:
  v392 = *((_QWORD *)v381 + 22);
  v393 = *((_QWORD *)v381 + 23);
  memset(&__dst, 0, sizeof(__dst));
  sub_22E618148(&__dst, v392, v393, 0xAAAAAAAAAAAAAAABLL * ((v393 - v392) >> 3));
  memset(&__s2, 0, sizeof(__s2));
  memset(&__len, 0, sizeof(__len));
  sub_22E63B344((void **)v381 + 22);
  *(std::string *)(v381 + 11) = __len;
  memset(&__len, 0, sizeof(__len));
  *(_QWORD *)v1267 = &__len;
  sub_22E3B3CC8((void ***)v1267);
  *(_QWORD *)v1267 = &__s2;
  sub_22E3B3CC8((void ***)v1267);
  *(_QWORD *)v1267 = &__dst;
  sub_22E3B3CC8((void ***)v1267);
  llvm::opt::ArgList::getAllArgValues();
  __len = *(std::string *)v1267;
  memset(v1267, 0, 24);
  LOBYTE(v1288) = 1;
  v1277[0] = v1267;
  sub_22E3B3CC8((void ***)v1277);
  if ((_BYTE)v1288)
  {
    v1278 = 0;
    v1277[0] = 0;
    v1277[1] = 0;
    sub_22E618148(v1277, *((_QWORD *)v381 + 22), *((_QWORD *)v381 + 23), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v381 + 23) - *((_QWORD *)v381 + 22)) >> 3));
    memset(&v1276, 0, sizeof(v1276));
    sub_22E618148(&v1276, (uint64_t)__len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__len.__r_.__value_.__l.__size_ - __len.__r_.__value_.__r.__words[0]) >> 3));
    memset(v1267, 0, 24);
    sub_22E618148(v1267, (uint64_t)v1276.__r_.__value_.__l.__data_, v1276.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1276.__r_.__value_.__l.__size_ - v1276.__r_.__value_.__r.__words[0]) >> 3));
    sub_22E63B344((void **)v381 + 22);
    v381[11] = *(_OWORD *)v1267;
    *((_QWORD *)v381 + 24) = *(_QWORD *)&v1267[16];
    memset(v1267, 0, 24);
    v1275.__r_.__value_.__r.__words[0] = (std::string::size_type)v1267;
    sub_22E3B3CC8((void ***)&v1275);
    v1275.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1276;
    sub_22E3B3CC8((void ***)&v1275);
    v1275.__r_.__value_.__r.__words[0] = (std::string::size_type)v1277;
    sub_22E3B3CC8((void ***)&v1275);
    if ((_BYTE)v1288)
    {
      *(_QWORD *)v1267 = &__len;
      sub_22E3B3CC8((void ***)v1267);
    }
  }
  v394 = (void **)v381 + 15;
  if (*((char *)v381 + 143) < 0)
  {
    sub_22E3BB2B4(&v1275, *((void **)v381 + 15), *((_QWORD *)v381 + 16));
    v395 = *((char *)v381 + 143);
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
    if (v395 < 0)
      operator delete(*v394);
  }
  else
  {
    *(_OWORD *)&v1275.__r_.__value_.__l.__data_ = *(_OWORD *)v394;
    v1275.__r_.__value_.__r.__words[2] = *((_QWORD *)v381 + 17);
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
  }
  *v394 = 0;
  *((_QWORD *)v381 + 16) = 0;
  *((_DWORD *)v381 + 34) = __len.__r_.__value_.__l.__data_;
  *(_DWORD *)((char *)v381 + 139) = *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3);
  *((_BYTE *)v381 + 143) = 0;
  if (SHIBYTE(v1275.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1275.__r_.__value_.__l.__data_);
  sub_22E6EC3DC((uint64_t)&__len, 3005, (uint64_t)&v1283);
  if ((_BYTE)v1288)
  {
    if (*((char *)v381 + 143) < 0)
    {
      sub_22E3BB2B4(v1273, *((void **)v381 + 15), *((_QWORD *)v381 + 16));
    }
    else
    {
      *(_OWORD *)v1273 = *(_OWORD *)v394;
      v1274 = (std::string::pointer)*((_QWORD *)v381 + 17);
    }
    v396 = SHIBYTE(__len.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v1272, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
    else
      v1272 = __len;
    if (SHIBYTE(v1272.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(v1267, v1272.__r_.__value_.__l.__data_, v1272.__r_.__value_.__l.__size_);
    else
      *(std::string *)v1267 = v1272;
    if (*((char *)v381 + 143) < 0)
      operator delete(*v394);
    *(_OWORD *)v394 = *(_OWORD *)v1267;
    *((_QWORD *)v381 + 17) = *(_QWORD *)&v1267[16];
    v1267[23] = 0;
    v1267[0] = 0;
    if (SHIBYTE(v1272.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1272.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1274) < 0)
    {
      operator delete(v1273[0]);
      if (v396 < 0)
        goto LABEL_1018;
    }
    else
    {
      if ((v396 & 0x80000000) == 0)
        goto LABEL_1008;
LABEL_1018:
      operator delete(__len.__r_.__value_.__l.__data_);
    }
  }
LABEL_1008:
  v397 = (void **)v381 + 45;
  if (*((char *)v381 + 383) < 0)
  {
    sub_22E3BB2B4(&v1271, *((void **)v381 + 45), *((_QWORD *)v381 + 46));
    v398 = *((char *)v381 + 383);
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
    if (v398 < 0)
      operator delete(*v397);
  }
  else
  {
    *(_OWORD *)&v1271.__r_.__value_.__l.__data_ = *(_OWORD *)v397;
    v1271.__r_.__value_.__r.__words[2] = *((_QWORD *)v381 + 47);
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
  }
  *v397 = 0;
  *((_QWORD *)v381 + 46) = 0;
  *((_DWORD *)v381 + 94) = __len.__r_.__value_.__l.__data_;
  *(_DWORD *)((char *)v381 + 379) = *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3);
  *((_BYTE *)v381 + 383) = 0;
  if (SHIBYTE(v1271.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1271.__r_.__value_.__l.__data_);
  sub_22E724288((uint64_t)&__len, 257, (uint64_t)&v1283);
  if ((_BYTE)v1288)
  {
    if (*((char *)v381 + 383) < 0)
    {
      v399 = (llvm::sys *)sub_22E3BB2B4(&v1270, *((void **)v381 + 45), *((_QWORD *)v381 + 46));
    }
    else
    {
      *(_OWORD *)&v1270.__r_.__value_.__l.__data_ = *(_OWORD *)v397;
      v1270.__r_.__value_.__r.__words[2] = *((_QWORD *)v381 + 47);
    }
    v400 = SHIBYTE(__len.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
      v399 = (llvm::sys *)sub_22E3BB2B4(&v1269, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
    else
      v1269 = __len;
    if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0)
      v399 = (llvm::sys *)sub_22E3BB2B4(v1267, v1269.__r_.__value_.__l.__data_, v1269.__r_.__value_.__l.__size_);
    else
      *(std::string *)v1267 = v1269;
    if (*((char *)v381 + 383) < 0)
      operator delete(*v397);
    *(_OWORD *)v397 = *(_OWORD *)v1267;
    *((_QWORD *)v381 + 47) = *(_QWORD *)&v1267[16];
    v1267[23] = 0;
    v1267[0] = 0;
    if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1269.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v1270.__r_.__value_.__l.__data_);
      if (v400 < 0)
        goto LABEL_1050;
    }
    else
    {
      if ((v400 & 0x80000000) == 0)
        goto LABEL_1032;
LABEL_1050:
      operator delete(__len.__r_.__value_.__l.__data_);
    }
  }
LABEL_1032:
  if (*((char *)v381 + 23) < 0)
  {
    v399 = (llvm::sys *)sub_22E3BB2B4(&v1264, *(void **)v381, *((_QWORD *)v381 + 1));
  }
  else
  {
    v401 = *v381;
    v1264.__r_.__value_.__r.__words[2] = *((_QWORD *)v381 + 2);
    *(_OWORD *)&v1264.__r_.__value_.__l.__data_ = v401;
  }
  llvm::sys::getDefaultTargetTriple(v399);
  llvm::Triple::normalize();
  if (SHIBYTE(v1254.__r_.__value_.__r.__words[2]) < 0)
    sub_22E3BB2B4(&__len, v1254.__r_.__value_.__l.__data_, v1254.__r_.__value_.__l.__size_);
  else
    __len = v1254;
  if (*((char *)v381 + 23) < 0)
    operator delete(*(void **)v381);
  v402 = *(_OWORD *)&__len.__r_.__value_.__l.__data_;
  *((_QWORD *)v381 + 2) = *((_QWORD *)&__len.__r_.__value_.__l + 2);
  *v381 = v402;
  *((_BYTE *)&__len.__r_.__value_.__s + 23) = 0;
  __len.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v1254.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1254.__r_.__value_.__l.__data_);
  if ((v1267[23] & 0x80000000) != 0)
    operator delete(*(void **)v1267);
  if (SHIBYTE(v1264.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1264.__r_.__value_.__l.__data_);
  sub_22E724288((uint64_t)&__len, 3030, (uint64_t)&v1283);
  if ((_BYTE)v1288)
  {
    if (*((char *)v381 + 23) < 0)
    {
      sub_22E3BB2B4(v1252, *(void **)v381, *((_QWORD *)v381 + 1));
    }
    else
    {
      v403 = *v381;
      v1253 = *((_QWORD *)v381 + 2);
      *(_OWORD *)v1252 = v403;
    }
    v404 = SHIBYTE(__len.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v1251, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
    else
      v1251 = __len;
    if (SHIBYTE(v1251.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(v1267, v1251.__r_.__value_.__l.__data_, v1251.__r_.__value_.__l.__size_);
    else
      *(std::string *)v1267 = v1251;
    if (*((char *)v381 + 23) < 0)
      operator delete(*(void **)v381);
    v405 = *(_OWORD *)v1267;
    *((_QWORD *)v381 + 2) = *(_QWORD *)&v1267[16];
    *v381 = v405;
    v1267[23] = 0;
    v1267[0] = 0;
    if (SHIBYTE(v1251.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1251.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1253) < 0)
    {
      operator delete(v1252[0]);
      if (v404 < 0)
        goto LABEL_1074;
    }
    else
    {
      if ((v404 & 0x80000000) == 0)
        goto LABEL_1064;
LABEL_1074:
      operator delete(__len.__r_.__value_.__l.__data_);
    }
  }
LABEL_1064:
  v406 = (void **)v381 + 19;
  if (*((char *)v381 + 175) < 0)
  {
    sub_22E3BB2B4(v1249, *((void **)v381 + 19), *((_QWORD *)v381 + 20));
    v407 = *((char *)v381 + 175);
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
    if (v407 < 0)
      operator delete(*v406);
  }
  else
  {
    *(_OWORD *)v1249 = *(_OWORD *)v406;
    v1250 = *((_QWORD *)v381 + 21);
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
  }
  *v406 = 0;
  *((_QWORD *)v381 + 20) = 0;
  *((_DWORD *)v381 + 42) = __len.__r_.__value_.__l.__data_;
  *(_DWORD *)((char *)v381 + 171) = *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3);
  *((_BYTE *)v381 + 175) = 0;
  if (SHIBYTE(v1250) < 0)
    operator delete(v1249[0]);
  sub_22E6EC3DC((uint64_t)&__len, 3009, (uint64_t)&v1283);
  if ((_BYTE)v1288)
  {
    if (*((char *)v381 + 175) < 0)
    {
      sub_22E3BB2B4(v1247, *((void **)v381 + 19), *((_QWORD *)v381 + 20));
    }
    else
    {
      *(_OWORD *)v1247 = *(_OWORD *)v406;
      v1248 = *((_QWORD *)v381 + 21);
    }
    v408 = SHIBYTE(__len.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v1246, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
    else
      v1246 = __len;
    if (SHIBYTE(v1246.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(v1267, v1246.__r_.__value_.__l.__data_, v1246.__r_.__value_.__l.__size_);
    else
      *(std::string *)v1267 = v1246;
    if (*((char *)v381 + 175) < 0)
      operator delete(*v406);
    *(_OWORD *)v406 = *(_OWORD *)v1267;
    *((_QWORD *)v381 + 21) = *(_QWORD *)&v1267[16];
    v1267[23] = 0;
    v1267[0] = 0;
    if (SHIBYTE(v1246.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1246.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1248) < 0)
    {
      operator delete(v1247[0]);
      if (v408 < 0)
        goto LABEL_1098;
    }
    else
    {
      if ((v408 & 0x80000000) == 0)
        goto LABEL_1088;
LABEL_1098:
      operator delete(__len.__r_.__value_.__l.__data_);
    }
  }
LABEL_1088:
  v409 = (void **)(v381 + 6);
  if (*((char *)v381 + 119) < 0)
  {
    sub_22E3BB2B4(v1244, *((void **)v381 + 12), *((_QWORD *)v381 + 13));
    v410 = *((char *)v381 + 119);
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
    if (v410 < 0)
      operator delete(*v409);
  }
  else
  {
    *(_OWORD *)v1244 = *(_OWORD *)v409;
    v1245 = *((_QWORD *)v381 + 14);
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
  }
  *v409 = 0;
  *((_QWORD *)v381 + 13) = 0;
  *((_DWORD *)v381 + 28) = __len.__r_.__value_.__l.__data_;
  *(_DWORD *)((char *)v381 + 115) = *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3);
  *((_BYTE *)v381 + 119) = 0;
  if (SHIBYTE(v1245) < 0)
    operator delete(v1244[0]);
  sub_22E6EC3DC((uint64_t)&__len, 2210, (uint64_t)&v1283);
  if ((_BYTE)v1288)
  {
    if (*((char *)v381 + 119) < 0)
    {
      sub_22E3BB2B4(v1242, *((void **)v381 + 12), *((_QWORD *)v381 + 13));
    }
    else
    {
      *(_OWORD *)v1242 = *(_OWORD *)v409;
      v1243 = *((_QWORD *)v381 + 14);
    }
    v411 = SHIBYTE(__len.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v1241, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
    else
      v1241 = __len;
    if (SHIBYTE(v1241.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(v1267, v1241.__r_.__value_.__l.__data_, v1241.__r_.__value_.__l.__size_);
    else
      *(std::string *)v1267 = v1241;
    if (*((char *)v381 + 119) < 0)
      operator delete(*v409);
    *(_OWORD *)v409 = *(_OWORD *)v1267;
    *((_QWORD *)v381 + 14) = *(_QWORD *)&v1267[16];
    v1267[23] = 0;
    v1267[0] = 0;
    if (SHIBYTE(v1241.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1241.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1243) < 0)
    {
      operator delete(v1242[0]);
      if ((v411 & 0x80000000) == 0)
        goto LABEL_1112;
    }
    else if ((v411 & 0x80000000) == 0)
    {
      goto LABEL_1112;
    }
    operator delete(__len.__r_.__value_.__l.__data_);
  }
LABEL_1112:
  memset(v1240, 0, sizeof(v1240));
  sub_22E618148(v1240, *((_QWORD *)v381 + 36), *((_QWORD *)v381 + 37), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v381 + 37) - *((_QWORD *)v381 + 36)) >> 3));
  memset(v1239, 0, sizeof(v1239));
  memset(&__len, 0, sizeof(__len));
  sub_22E63B344((void **)v381 + 36);
  *((std::string *)v381 + 12) = __len;
  memset(&__len, 0, sizeof(__len));
  *(_QWORD *)v1267 = &__len;
  sub_22E3B3CC8((void ***)v1267);
  *(_QWORD *)v1267 = v1239;
  sub_22E3B3CC8((void ***)v1267);
  *(_QWORD *)v1267 = v1240;
  sub_22E3B3CC8((void ***)v1267);
  llvm::opt::ArgList::getAllArgValues();
  __len = *(std::string *)v1267;
  memset(v1267, 0, 24);
  LOBYTE(v1288) = 1;
  v1238[0] = (void **)v1267;
  sub_22E3B3CC8(v1238);
  if ((_BYTE)v1288)
  {
    memset(v1238, 0, sizeof(v1238));
    sub_22E618148(v1238, *((_QWORD *)v381 + 36), *((_QWORD *)v381 + 37), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v381 + 37) - *((_QWORD *)v381 + 36)) >> 3));
    v1235 = 0;
    v1236 = 0;
    v1237 = 0;
    sub_22E618148(&v1235, (uint64_t)__len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__len.__r_.__value_.__l.__size_ - __len.__r_.__value_.__r.__words[0]) >> 3));
    memset(v1267, 0, 24);
    sub_22E618148(v1267, v1235, v1236, 0xAAAAAAAAAAAAAAABLL * ((v1236 - v1235) >> 3));
    sub_22E63B344((void **)v381 + 36);
    v381[18] = *(_OWORD *)v1267;
    *((_QWORD *)v381 + 38) = *(_QWORD *)&v1267[16];
    memset(v1267, 0, 24);
    *(_QWORD *)&v1234 = v1267;
    sub_22E3B3CC8((void ***)&v1234);
    *(_QWORD *)&v1234 = &v1235;
    sub_22E3B3CC8((void ***)&v1234);
    *(_QWORD *)&v1234 = v1238;
    sub_22E3B3CC8((void ***)&v1234);
    if ((_BYTE)v1288)
    {
      *(_QWORD *)v1267 = &__len;
      sub_22E3B3CC8((void ***)v1267);
    }
  }
  v412 = sub_22E6EBFB4((uint64_t)&v1283, 3010);
  if (v412)
  {
    v413 = v412;
    v1234 = 0uLL;
    v414 = *(const char ***)(v412 + 48);
    if (*v414)
      strlen(*v414);
    if (llvm::VersionTuple::tryParse())
    {
      *(_QWORD *)(j + 312) = 0x18800000000;
      if (*(char *)(j + 311) < 0)
      {
        **(_BYTE **)(j + 288) = 0;
        *(_QWORD *)(j + 296) = 0;
      }
      else
      {
        *(_BYTE *)(j + 288) = 0;
        *(_BYTE *)(j + 311) = 0;
      }
      *(_OWORD *)&__len.__r_.__value_.__l.__data_ = (unint64_t)(j + 320);
      __len.__r_.__value_.__r.__words[2] = j;
      LOWORD(v1288) = 1;
      *(_BYTE *)(j + 320) = 0;
      *(_DWORD *)(j + 664) = 0;
      v415 = *(unsigned int *)(j + 776);
      if ((_DWORD)v415)
      {
        v416 = *(_QWORD *)(j + 768);
        v417 = 56 * v415;
        do
        {
          if (*(char *)(v416 + v417 - 9) < 0)
            operator delete(*(void **)(v416 + v417 - 32));
          v417 -= 56;
        }
        while (v417);
      }
      *(_DWORD *)(j + 776) = 0;
      llvm::opt::Arg::getAsString();
      if (v1267[23] >= 0)
        v418 = v1267;
      else
        v418 = *(_BYTE **)v1267;
      if (v1267[23] >= 0)
        v419 = v1267[23] & 0x7F;
      else
        v419 = *(_QWORD *)&v1267[8];
      sub_22E3B89A8((unsigned __int8 **)&__len, v418, v419);
      v420 = **(_QWORD **)(v413 + 48);
      v421 = (unsigned __int8 *)__len.__r_.__value_.__r.__words[0];
      if (!__len.__r_.__value_.__r.__words[0])
      {
        v421 = (unsigned __int8 *)sub_22E3B8AAC(__len.__r_.__value_.__l.__size_);
        __len.__r_.__value_.__r.__words[0] = (std::string::size_type)v421;
      }
      v421[*v421 + 1] = 1;
      v422 = __len.__r_.__value_.__r.__words[0];
      v423 = *__len.__r_.__value_.__l.__data_;
      *__len.__r_.__value_.__l.__data_ = v423 + 1;
      *(_QWORD *)(v422 + 8 * v423 + 16) = v420;
      if ((v1267[23] & 0x80000000) != 0)
        operator delete(*(void **)v1267);
      sub_22E3BB0B8((uint64_t)&__len);
    }
    else
    {
      *(__int128 *)((char *)v381 + 344) = v1234;
    }
  }
  v424 = sub_22E6EBFB4((uint64_t)&v1283, 256);
  if (v424)
  {
    v425 = v424;
    v1234 = 0uLL;
    v426 = *(const char ***)(v424 + 48);
    if (*v426)
      strlen(*v426);
    if (llvm::VersionTuple::tryParse())
    {
      *(_QWORD *)(j + 312) = 0x18800000000;
      if (*(char *)(j + 311) < 0)
      {
        **(_BYTE **)(j + 288) = 0;
        *(_QWORD *)(j + 296) = 0;
      }
      else
      {
        *(_BYTE *)(j + 288) = 0;
        *(_BYTE *)(j + 311) = 0;
      }
      *(_OWORD *)&__len.__r_.__value_.__l.__data_ = (unint64_t)(j + 320);
      __len.__r_.__value_.__r.__words[2] = j;
      LOWORD(v1288) = 1;
      *(_BYTE *)(j + 320) = 0;
      *(_DWORD *)(j + 664) = 0;
      v427 = *(unsigned int *)(j + 776);
      if ((_DWORD)v427)
      {
        v428 = *(_QWORD *)(j + 768);
        v429 = 56 * v427;
        do
        {
          if (*(char *)(v428 + v429 - 9) < 0)
            operator delete(*(void **)(v428 + v429 - 32));
          v429 -= 56;
        }
        while (v429);
      }
      *(_DWORD *)(j + 776) = 0;
      llvm::opt::Arg::getAsString();
      if (v1267[23] >= 0)
        v430 = v1267;
      else
        v430 = *(_BYTE **)v1267;
      if (v1267[23] >= 0)
        v431 = v1267[23] & 0x7F;
      else
        v431 = *(_QWORD *)&v1267[8];
      sub_22E3B89A8((unsigned __int8 **)&__len, v430, v431);
      v432 = **(_QWORD **)(v425 + 48);
      v433 = (unsigned __int8 *)__len.__r_.__value_.__r.__words[0];
      if (!__len.__r_.__value_.__r.__words[0])
      {
        v433 = (unsigned __int8 *)sub_22E3B8AAC(__len.__r_.__value_.__l.__size_);
        __len.__r_.__value_.__r.__words[0] = (std::string::size_type)v433;
      }
      v433[*v433 + 1] = 1;
      v434 = __len.__r_.__value_.__r.__words[0];
      v435 = *__len.__r_.__value_.__l.__data_;
      *__len.__r_.__value_.__l.__data_ = v435 + 1;
      *(_QWORD *)(v434 + 8 * v435 + 16) = v432;
      if ((v1267[23] & 0x80000000) != 0)
        operator delete(*(void **)v1267);
      sub_22E3BB0B8((uint64_t)&__len);
    }
    else
    {
      v381[24] = v1234;
    }
  }
  v436 = v1219->__r_.__value_.__r.__words[2];
  LOWORD(v1289) = 260;
  __len.__r_.__value_.__r.__words[0] = v436;
  MEMORY[0x23489F1BC](v1230, &__len);
  v437 = v1219[1].__r_.__value_.__r.__words[2];
  v438 = (void **)(v437 + 120);
  if (*(char *)(v437 + 143) < 0)
  {
    sub_22E3BB2B4(&v1282, *(void **)(v437 + 120), *(_QWORD *)(v437 + 128));
    v439 = *(char *)(v437 + 143);
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
    if (v439 < 0)
      operator delete(*v438);
  }
  else
  {
    *(_OWORD *)&v1282.__r_.__value_.__l.__data_ = *(_OWORD *)v438;
    v1282.__r_.__value_.__r.__words[2] = *(_QWORD *)(v437 + 136);
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
  }
  *v438 = 0;
  *(_QWORD *)(v437 + 128) = 0;
  *(_DWORD *)(v437 + 136) = __len.__r_.__value_.__l.__data_;
  *(_DWORD *)(v437 + 139) = *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3);
  *(_BYTE *)(v437 + 143) = 0;
  if (SHIBYTE(v1282.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1282.__r_.__value_.__l.__data_);
  sub_22E6EC3DC((uint64_t)&__len, 901, (uint64_t)&v1283);
  if ((_BYTE)v1288)
  {
    if (*(char *)(v437 + 143) < 0)
    {
      sub_22E3BB2B4(&v1281, *(void **)(v437 + 120), *(_QWORD *)(v437 + 128));
    }
    else
    {
      *(_OWORD *)&v1281.__r_.__value_.__l.__data_ = *(_OWORD *)v438;
      v1281.__r_.__value_.__r.__words[2] = *(_QWORD *)(v437 + 136);
    }
    v440 = SHIBYTE(__len.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&__dst, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
    else
      __dst = __len;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(v1267, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      *(std::string *)v1267 = __dst;
    if (*(char *)(v437 + 143) < 0)
      operator delete(*v438);
    *(_OWORD *)v438 = *(_OWORD *)v1267;
    *(_QWORD *)(v437 + 136) = *(_QWORD *)&v1267[16];
    v1267[23] = 0;
    v1267[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1281.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v1281.__r_.__value_.__l.__data_);
      if (v440 < 0)
        goto LABEL_1206;
    }
    else
    {
      if ((v440 & 0x80000000) == 0)
        goto LABEL_1187;
LABEL_1206:
      operator delete(__len.__r_.__value_.__l.__data_);
    }
  }
LABEL_1187:
  *(_BYTE *)(v437 + 216) &= ~0x80u;
  if (sub_22E721888((uint64_t)&v1283, 0x5EBu, 0x4A8u))
  {
    if (llvm::opt::Option::matches())
      v441 = 0x80;
    else
      v441 = 0;
    v442 = v441 & 0x80 | *(_BYTE *)(v437 + 216) & 0x7F;
  }
  else
  {
    v442 = *(_BYTE *)(v437 + 216);
  }
  *(_BYTE *)(v437 + 216) = v442 & 0x7F;
  if (sub_22E721888((uint64_t)&v1283, 0x4A8u, 0x5EBu))
  {
    if (llvm::opt::Option::matches())
      v443 = 0;
    else
      v443 = 0x80;
    *(_BYTE *)(v437 + 216) = v443 & 0x80 | *(_BYTE *)(v437 + 216) & 0x7F;
  }
  *(_DWORD *)(v437 + 220) = 604800;
  v444 = sub_22E6EC038(896, (uint64_t)&v1283, j);
  if (HIDWORD(v444))
    *(_DWORD *)(v437 + 220) = v444;
  *(_DWORD *)(v437 + 224) = 2678400;
  v445 = sub_22E6EC038(895, (uint64_t)&v1283, j);
  if (HIDWORD(v445))
    *(_DWORD *)(v437 + 224) = v445;
  *(_QWORD *)(v437 + 232) = 0;
  v446 = sub_22E721714((uint64_t)&v1283, 454);
  if (v446)
  {
    v447 = v446;
    v448 = *(const char ***)(v446 + 48);
    if (*v448)
      strlen(*v448);
    __len.__r_.__value_.__r.__words[0] = 0;
    if (llvm::getAsUnsignedInteger())
    {
      *(_QWORD *)(j + 312) = 0x17500000000;
      if (*(char *)(j + 311) < 0)
      {
        **(_BYTE **)(j + 288) = 0;
        *(_QWORD *)(j + 296) = 0;
      }
      else
      {
        *(_BYTE *)(j + 288) = 0;
        *(_BYTE *)(j + 311) = 0;
      }
      *(_OWORD *)&__len.__r_.__value_.__l.__data_ = (unint64_t)(j + 320);
      __len.__r_.__value_.__r.__words[2] = j;
      LOWORD(v1288) = 1;
      *(_BYTE *)(j + 320) = 0;
      *(_DWORD *)(j + 664) = 0;
      v449 = *(unsigned int *)(j + 776);
      if ((_DWORD)v449)
      {
        v450 = *(_QWORD *)(j + 768);
        v451 = 56 * v449;
        do
        {
          if (*(char *)(v450 + v451 - 9) < 0)
            operator delete(*(void **)(v450 + v451 - 32));
          v451 -= 56;
        }
        while (v451);
      }
      *(_DWORD *)(j + 776) = 0;
      llvm::opt::Arg::getAsString();
      if (v1267[23] >= 0)
        v452 = v1267;
      else
        v452 = *(_BYTE **)v1267;
      if (v1267[23] >= 0)
        v453 = v1267[23] & 0x7F;
      else
        v453 = *(_QWORD *)&v1267[8];
      sub_22E3B89A8((unsigned __int8 **)&__len, v452, v453);
      v454 = **(_QWORD **)(v447 + 48);
      v455 = (unsigned __int8 *)__len.__r_.__value_.__r.__words[0];
      if (!__len.__r_.__value_.__r.__words[0])
      {
        v455 = (unsigned __int8 *)sub_22E3B8AAC(__len.__r_.__value_.__l.__size_);
        __len.__r_.__value_.__r.__words[0] = (std::string::size_type)v455;
      }
      v455[*v455 + 1] = 1;
      v456 = __len.__r_.__value_.__r.__words[0];
      v457 = *__len.__r_.__value_.__l.__data_;
      *__len.__r_.__value_.__l.__data_ = v457 + 1;
      *(_QWORD *)(v456 + 8 * v457 + 16) = v454;
      if ((v1267[23] & 0x80000000) != 0)
        operator delete(*(void **)v1267);
      sub_22E3BB0B8((uint64_t)&__len);
    }
    else
    {
      *(_QWORD *)(v437 + 232) = __len.__r_.__value_.__r.__words[0];
    }
  }
  *(_WORD *)(v437 + 848) &= ~0x40u;
  v458 = sub_22E721714((uint64_t)&v1283, 903);
  v459 = *(_WORD *)(v437 + 848);
  if (v458)
    v459 |= 0x40u;
  *(_WORD *)(v437 + 848) = v459 | 0x400;
  v460 = sub_22E721714((uint64_t)&v1283, 887);
  v461 = *(_WORD *)(v437 + 848);
  if (v460)
    v461 &= 0xFB7Fu;
  *(_WORD *)(v437 + 848) = v461 & 0xFF7F;
  if (sub_22E721888((uint64_t)&v1283, 0x388u, 0x46Eu))
  {
    if (llvm::opt::Option::matches())
      v462 = 128;
    else
      v462 = 0;
    v463 = *(_WORD *)(v437 + 848) & 0xFF7F | v462;
  }
  else
  {
    v463 = *(_WORD *)(v437 + 848);
  }
  *(_WORD *)(v437 + 848) = v463 & 0xFEFF;
  if (sub_22E721714((uint64_t)&v1283, 1815))
    *(_WORD *)(v437 + 848) |= 0x100u;
  *(_BYTE *)(v437 + 216) &= ~0x10u;
  if (sub_22E721888((uint64_t)&v1283, 0x317u, 0x440u))
  {
    if (llvm::opt::Option::matches())
      v464 = 16;
    else
      v464 = 0;
    v465 = *(_BYTE *)(v437 + 216) & 0xEF | v464;
  }
  else
  {
    v465 = *(_BYTE *)(v437 + 216);
  }
  *(_BYTE *)(v437 + 216) = v465 & 0xEF;
  if (sub_22E721888((uint64_t)&v1283, 0x440u, 0x317u))
  {
    if (llvm::opt::Option::matches())
      v466 = 0;
    else
      v466 = 16;
    *(_BYTE *)(v437 + 216) = *(_BYTE *)(v437 + 216) & 0xEF | v466;
  }
  if (*(char *)(v437 + 23) < 0)
  {
    sub_22E3BB2B4(&__s2, *(void **)v437, *(_QWORD *)(v437 + 8));
  }
  else
  {
    v467 = *(_OWORD *)v437;
    __s2.__r_.__value_.__r.__words[2] = *(_QWORD *)(v437 + 16);
    *(_OWORD *)&__s2.__r_.__value_.__l.__data_ = v467;
  }
  if (*(char *)(v437 + 23) < 0)
    operator delete(*(void **)v437);
  *(_WORD *)v437 = 47;
  *(_BYTE *)(v437 + 23) = 1;
  if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s2.__r_.__value_.__l.__data_);
  sub_22E6EC3DC((uint64_t)&__len, 2038, (uint64_t)&v1283);
  if ((_BYTE)v1288)
  {
    if (*(char *)(v437 + 23) < 0)
    {
      sub_22E3BB2B4(v1277, *(void **)v437, *(_QWORD *)(v437 + 8));
    }
    else
    {
      v468 = *(_OWORD *)v437;
      v1278 = *(std::string::pointer *)(v437 + 16);
      *(_OWORD *)v1277 = v468;
    }
    v469 = SHIBYTE(__len.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v1276, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
    else
      v1276 = __len;
    if (SHIBYTE(v1276.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(v1267, v1276.__r_.__value_.__l.__data_, v1276.__r_.__value_.__l.__size_);
    else
      *(std::string *)v1267 = v1276;
    if (*(char *)(v437 + 23) < 0)
      operator delete(*(void **)v437);
    v470 = *(_OWORD *)v1267;
    *(_QWORD *)(v437 + 16) = *(_QWORD *)&v1267[16];
    *(_OWORD *)v437 = v470;
    v1267[23] = 0;
    v1267[0] = 0;
    if (SHIBYTE(v1276.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1276.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1278) < 0)
    {
      operator delete(v1277[0]);
      if (v469 < 0)
        goto LABEL_1288;
    }
    else
    {
      if ((v469 & 0x80000000) == 0)
        goto LABEL_1274;
LABEL_1288:
      operator delete(__len.__r_.__value_.__l.__data_);
    }
  }
LABEL_1274:
  *(_WORD *)(v437 + 848) |= 1u;
  v471 = sub_22E721714((uint64_t)&v1283, 2736);
  v472 = *(_WORD *)(v437 + 848);
  if (v471)
    v472 &= 0xFFF6u;
  *(_WORD *)(v437 + 848) = v472 | 8;
  if (sub_22E721714((uint64_t)&v1283, 2754))
    *(_WORD *)(v437 + 848) &= ~8u;
  v473 = (void **)(v437 + 72);
  if (*(char *)(v437 + 95) < 0)
  {
    sub_22E3BB2B4(&v1275, *(void **)(v437 + 72), *(_QWORD *)(v437 + 80));
    v474 = *(char *)(v437 + 95);
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
    if (v474 < 0)
      operator delete(*v473);
  }
  else
  {
    *(_OWORD *)&v1275.__r_.__value_.__l.__data_ = *(_OWORD *)v473;
    v1275.__r_.__value_.__r.__words[2] = *(_QWORD *)(v437 + 88);
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
  }
  *v473 = 0;
  *(_QWORD *)(v437 + 80) = 0;
  *(_DWORD *)(v437 + 88) = __len.__r_.__value_.__l.__data_;
  *(_DWORD *)(v437 + 91) = *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3);
  *(_BYTE *)(v437 + 95) = 0;
  if (SHIBYTE(v1275.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1275.__r_.__value_.__l.__data_);
  sub_22E6EC3DC((uint64_t)&__len, 2911, (uint64_t)&v1283);
  if ((_BYTE)v1288)
  {
    if (*(char *)(v437 + 95) < 0)
    {
      sub_22E3BB2B4(v1273, *(void **)(v437 + 72), *(_QWORD *)(v437 + 80));
    }
    else
    {
      *(_OWORD *)v1273 = *(_OWORD *)v473;
      v1274 = *(std::string::pointer *)(v437 + 88);
    }
    v475 = SHIBYTE(__len.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v1272, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
    else
      v1272 = __len;
    if (SHIBYTE(v1272.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(v1267, v1272.__r_.__value_.__l.__data_, v1272.__r_.__value_.__l.__size_);
    else
      *(std::string *)v1267 = v1272;
    if (*(char *)(v437 + 95) < 0)
      operator delete(*v473);
    *(_OWORD *)v473 = *(_OWORD *)v1267;
    *(_QWORD *)(v437 + 88) = *(_QWORD *)&v1267[16];
    v1267[23] = 0;
    v1267[0] = 0;
    if (SHIBYTE(v1272.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1272.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1274) < 0)
    {
      operator delete(v1273[0]);
      if (v475 < 0)
        goto LABEL_1318;
    }
    else
    {
      if ((v475 & 0x80000000) == 0)
        goto LABEL_1302;
LABEL_1318:
      operator delete(__len.__r_.__value_.__l.__data_);
    }
  }
LABEL_1302:
  *(_WORD *)(v437 + 848) &= ~0x20u;
  if (sub_22E721714((uint64_t)&v1283, 3081))
    *(_WORD *)(v437 + 848) |= 0x20u;
  *(_BYTE *)(v437 + 216) &= ~0x20u;
  v476 = sub_22E721714((uint64_t)&v1283, 877);
  v477 = *(_BYTE *)(v437 + 216);
  if (v476)
    v477 |= 0x20u;
  *(_BYTE *)(v437 + 216) = v477 & 0xBF;
  if (sub_22E721714((uint64_t)&v1283, 873))
    *(_BYTE *)(v437 + 216) |= 0x40u;
  v478 = (void **)(v437 + 192);
  if (*(char *)(v437 + 215) < 0)
  {
    sub_22E3BB2B4(&v1271, *(void **)(v437 + 192), *(_QWORD *)(v437 + 200));
    if (*(char *)(v437 + 215) < 0)
      operator delete(*v478);
  }
  else
  {
    *(_OWORD *)&v1271.__r_.__value_.__l.__data_ = *(_OWORD *)v478;
    v1271.__r_.__value_.__r.__words[2] = *(_QWORD *)(v437 + 208);
  }
  strcpy((char *)(v437 + 192), "raw");
  *(_BYTE *)(v437 + 215) = 3;
  if (SHIBYTE(v1271.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1271.__r_.__value_.__l.__data_);
  sub_22E6EC3DC((uint64_t)&__len, 875, (uint64_t)&v1283);
  if ((_BYTE)v1288)
  {
    if (*(char *)(v437 + 215) < 0)
    {
      sub_22E3BB2B4(&v1270, *(void **)(v437 + 192), *(_QWORD *)(v437 + 200));
    }
    else
    {
      *(_OWORD *)&v1270.__r_.__value_.__l.__data_ = *(_OWORD *)v478;
      v1270.__r_.__value_.__r.__words[2] = *(_QWORD *)(v437 + 208);
    }
    v479 = SHIBYTE(__len.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v1269, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
    else
      v1269 = __len;
    if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(v1267, v1269.__r_.__value_.__l.__data_, v1269.__r_.__value_.__l.__size_);
    else
      *(std::string *)v1267 = v1269;
    if (*(char *)(v437 + 215) < 0)
      operator delete(*v478);
    *(_OWORD *)v478 = *(_OWORD *)v1267;
    *(_QWORD *)(v437 + 208) = *(_QWORD *)&v1267[16];
    v1267[23] = 0;
    v1267[0] = 0;
    if (SHIBYTE(v1269.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1269.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1270.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v1270.__r_.__value_.__l.__data_);
      if (v479 < 0)
        goto LABEL_1358;
    }
    else
    {
      if ((v479 & 0x80000000) == 0)
        goto LABEL_1332;
LABEL_1358:
      operator delete(__len.__r_.__value_.__l.__data_);
    }
  }
LABEL_1332:
  *(_WORD *)(v437 + 848) |= 2u;
  if (sub_22E721714((uint64_t)&v1283, 2759))
    *(_WORD *)(v437 + 848) &= ~2u;
  *(_BYTE *)(v437 + 216) &= ~2u;
  if (sub_22E721714((uint64_t)&v1283, 612))
    *(_BYTE *)(v437 + 216) |= 2u;
  *(_WORD *)(v437 + 848) &= ~0x800u;
  v480 = sub_22E721714((uint64_t)&v1283, 890);
  v481 = *(_WORD *)(v437 + 848);
  if (v480)
    v481 |= 0x800u;
  *(_WORD *)(v437 + 848) = v481 & 0xEFFF;
  if (sub_22E721714((uint64_t)&v1283, 898))
    *(_WORD *)(v437 + 848) |= 0x1000u;
  *(_BYTE *)(v437 + 216) &= ~4u;
  v482 = sub_22E721714((uint64_t)&v1283, 1596);
  v483 = *(_BYTE *)(v437 + 216);
  if (v482)
    v483 |= 4u;
  *(_BYTE *)(v437 + 216) = v483 & 0xFE;
  *(_BYTE *)(v437 + 216) = *(_BYTE *)(v437 + 216) & 0xF7 | (sub_22E721714((uint64_t)&v1283, 1597) != 0);
  if (sub_22E721714((uint64_t)&v1283, 892))
    *(_BYTE *)(v437 + 216) |= 8u;
  *(_WORD *)(v437 + 848) &= ~4u;
  if (sub_22E721714((uint64_t)&v1283, 2909))
    *(_WORD *)(v437 + 848) |= 4u;
  v484 = sub_22E6EBFB4((uint64_t)&v1283, 2992);
  if (v484)
    *(_WORD *)(v437 + 848) = *(_WORD *)(v437 + 848) & 0xFFEF | (16
                                                              * (strcmp(**(const char ***)(v484 + 48), "libc++") == 0));
  LastArgValue = (const void *)llvm::opt::ArgList::getLastArgValue();
  v487 = v485;
  v488 = 0;
  __len.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1288;
  *(_OWORD *)&__len.__r_.__value_.__r.__words[1] = xmmword_22F44E310;
  if (v485 >= 0x81)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v488 = __len.__r_.__value_.__l.__size_;
    if (v487)
    {
LABEL_1350:
      memcpy((void *)(__len.__r_.__value_.__r.__words[0] + v488), LastArgValue, v487);
      v488 = __len.__r_.__value_.__l.__size_;
    }
  }
  else if (v485)
  {
    goto LABEL_1350;
  }
  v489 = v488 + v487;
  __len.__r_.__value_.__l.__size_ = v489;
  if (v489)
  {
    LOWORD(v1268) = 261;
    *(_QWORD *)v1267 = __len.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v1267[8] = v489;
    if ((llvm::sys::path::is_absolute() & 1) == 0)
    {
      v490 = v1219[93].__r_.__value_.__s.__data_[7];
      v491 = v490;
      v492 = v490 & 0x7F;
      if (v491 < 0)
        v492 = v1219[92].__r_.__value_.__r.__words[2];
      if (v492)
      {
        LOWORD(v1268) = 260;
        *(_QWORD *)v1267 = (char *)v1219 + 2216;
        llvm::sys::fs::make_absolute();
      }
      else
      {
        llvm::sys::fs::make_absolute();
      }
    }
  }
  llvm::sys::path::remove_dots();
  v493 = __len.__r_.__value_.__l.__size_;
  if (__len.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
LABEL_2709:
    abort();
  v494 = (const void *)__len.__r_.__value_.__r.__words[0];
  if (__len.__r_.__value_.__l.__size_ >= 0x17)
  {
    v496 = (__len.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len.__r_.__value_.__l.__size_ | 7) != 0x17)
      v496 = __len.__r_.__value_.__l.__size_ | 7;
    v497 = v496 + 1;
    v495 = operator new(v496 + 1);
    *(_QWORD *)&v1267[16] = v497 | 0x8000000000000000;
    *(_QWORD *)v1267 = v495;
    *(_QWORD *)&v1267[8] = v493;
    goto LABEL_1367;
  }
  v1267[23] = __len.__r_.__value_.__s.__data_[8];
  v495 = v1267;
  if (__len.__r_.__value_.__l.__size_)
LABEL_1367:
    memmove(v495, v494, v493);
  v495[v493] = 0;
  v498 = (void **)(v437 + 96);
  if (*(char *)(v437 + 119) < 0)
    operator delete(*v498);
  *(_OWORD *)v498 = *(_OWORD *)v1267;
  *(_QWORD *)(v437 + 112) = *(_QWORD *)&v1267[16];
  sub_22E70B070((uint64_t)&v1283, 874, (uint64_t)v1267);
  __p = *(std::string *)v1267;
  v499 = *(_QWORD *)&v1267[24];
  v500 = *(_QWORD *)v1267;
  if (*(_QWORD *)v1267 != *(_QWORD *)&v1267[24])
  {
    v501 = (_QWORD **)(v437 + 144);
    while (1)
    {
      v502 = **(char ***)(*(_QWORD *)v500 + 48);
      __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v502;
      if (v502)
      {
        v503 = strlen(v502);
        __src.__r_.__value_.__l.__size_ = v503;
        if (v503)
        {
          v504 = memchr(v502, 61, v503);
          if (v504 && v504 - v502 != -1)
            break;
        }
      }
LABEL_1415:
      __p.__r_.__value_.__r.__words[0] = v500 + 8;
      sub_22E721830((uint64_t)&__p);
      v500 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0] == v499)
        goto LABEL_1416;
    }
    v1286[0].__r_.__value_.__s.__data_[0] = 61;
    v506 = llvm::StringRef::find();
    if (v506 == -1)
    {
      v510 = 0;
      v511 = 0;
      v508 = __src.__r_.__value_.__l.__size_;
      v507 = (const void *)__src.__r_.__value_.__r.__words[0];
    }
    else
    {
      v507 = (const void *)__src.__r_.__value_.__r.__words[0];
      if (__src.__r_.__value_.__l.__size_ >= v506)
        v508 = v506;
      else
        v508 = __src.__r_.__value_.__l.__size_;
      if (__src.__r_.__value_.__l.__size_ >= v506 + 1)
        v509 = v506 + 1;
      else
        v509 = __src.__r_.__value_.__l.__size_;
      v510 = (const void *)(__src.__r_.__value_.__r.__words[0] + v509);
      v511 = __src.__r_.__value_.__l.__size_ - v509;
    }
    if (v508 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_2709;
    if (v508 >= 0x17)
    {
      v513 = (v508 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v508 | 7) != 0x17)
        v513 = v508 | 7;
      v514 = v513 + 1;
      v512 = operator new(v513 + 1);
      v1259.__r_.__value_.__r.__words[2] = v514 | 0x8000000000000000;
      v1259.__r_.__value_.__r.__words[0] = (std::string::size_type)v512;
      v1259.__r_.__value_.__l.__size_ = v508;
    }
    else
    {
      *((_BYTE *)&v1259.__r_.__value_.__s + 23) = v508;
      v512 = &v1259;
      if (!v508)
      {
LABEL_1395:
        v512[v508] = 0;
        if (v511 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_2709;
        if (v511 >= 0x17)
        {
          v516 = (v511 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v511 | 7) != 0x17)
            v516 = v511 | 7;
          v517 = v516 + 1;
          v515 = (std::string *)operator new(v516 + 1);
          v1257.__r_.__value_.__r.__words[2] = v517 | 0x8000000000000000;
          v1257.__r_.__value_.__r.__words[0] = (std::string::size_type)v515;
          v1257.__r_.__value_.__l.__size_ = v511;
        }
        else
        {
          *((_BYTE *)&v1257.__r_.__value_.__s + 23) = v511;
          v515 = &v1257;
          if (!v511)
            goto LABEL_1403;
        }
        memmove(v515, v510, v511);
LABEL_1403:
        v515->__r_.__value_.__s.__data_[v511] = 0;
        v1286[0] = v1259;
        v1286[1] = v1257;
        v518 = (char **)sub_22E5EFEFC(v437 + 144, v1265, (const void **)&v1286[0].__r_.__value_.__l.__data_);
        if (!*v518)
        {
          v519 = v518;
          v520 = (char *)operator new(0x50uLL);
          v521 = v520 + 32;
          if (SHIBYTE(v1286[0].__r_.__value_.__r.__words[2]) < 0)
          {
            sub_22E3BB2B4(v521, v1286[0].__r_.__value_.__l.__data_, v1286[0].__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)v521 = *(_OWORD *)&v1286[0].__r_.__value_.__l.__data_;
            *((_QWORD *)v520 + 6) = *((_QWORD *)&v1286[0].__r_.__value_.__l + 2);
          }
          *(std::string *)(v520 + 56) = v1286[1];
          memset(&v1286[1], 0, sizeof(std::string));
          v522 = v1265[0];
          *(_QWORD *)v520 = 0;
          *((_QWORD *)v520 + 1) = 0;
          *((_QWORD *)v520 + 2) = v522;
          *v519 = v520;
          v523 = (_QWORD *)**v501;
          if (v523)
          {
            *v501 = v523;
            v520 = *v519;
          }
          sub_22E49FD00(*(uint64_t **)(v437 + 152), (uint64_t *)v520);
          ++*(_QWORD *)(v437 + 160);
        }
        if (SHIBYTE(v1286[1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1286[1].__r_.__value_.__l.__data_);
        if (SHIBYTE(v1286[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1286[0].__r_.__value_.__l.__data_);
        v500 = __p.__r_.__value_.__r.__words[0];
        goto LABEL_1415;
      }
    }
    memmove(v512, v507, v508);
    goto LABEL_1395;
  }
LABEL_1416:
  sub_22E70B070((uint64_t)&v1283, 1516, (uint64_t)v1267);
  v1259 = *(std::string *)v1267;
  v524 = *(_QWORD *)&v1267[24];
  v525 = *(_QWORD *)v1267;
  if (*(_QWORD *)v1267 != *(_QWORD *)&v1267[24])
  {
    do
    {
      v526 = *(const char ***)(*(_QWORD *)v525 + 48);
      v527 = *v526;
      if (*v526)
      {
        v528 = strlen(*v526);
        if (v528 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_2709;
        v529 = v528;
        if (v528 >= 0x17)
        {
          v531 = (v528 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v528 | 7) != 0x17)
            v531 = v528 | 7;
          v532 = v531 + 1;
          v530 = (std::string *)operator new(v531 + 1);
          __p.__r_.__value_.__r.__words[2] = v532 | 0x8000000000000000;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v530;
          __p.__r_.__value_.__l.__size_ = v529;
        }
        else
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = v528;
          v530 = &__p;
          if (!v528)
            goto LABEL_1427;
        }
        memmove(v530, v527, v529);
      }
      else
      {
        v529 = 0;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        v530 = &__p;
      }
LABEL_1427:
      v530->__r_.__value_.__s.__data_[v529] = 0;
      v533 = *(std::string **)(v437 + 176);
      v534 = *(_QWORD *)(v437 + 184);
      if ((unint64_t)v533 >= v534)
      {
        v536 = *(std::string **)(v437 + 168);
        v537 = 0xAAAAAAAAAAAAAAABLL * (((char *)v533 - (char *)v536) >> 3) + 1;
        if (v537 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_2709;
        if (0x5555555555555556 * ((uint64_t)(v534 - (_QWORD)v536) >> 3) > v537)
          v537 = 0x5555555555555556 * ((uint64_t)(v534 - (_QWORD)v536) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v534 - (_QWORD)v536) >> 3) >= 0x555555555555555)
          v538 = 0xAAAAAAAAAAAAAAALL;
        else
          v538 = v537;
        v1286[1].__r_.__value_.__l.__size_ = v437 + 184;
        if (v538)
        {
          if (v538 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_2710;
          v539 = (char *)operator new(24 * v538);
        }
        else
        {
          v539 = 0;
        }
        v540 = (std::string *)&v539[8 * (((char *)v533 - (char *)v536) >> 3)];
        *v540 = __p;
        if (v533 == v536)
        {
          v543 = vdupq_n_s64((unint64_t)v533);
          v541 = &v539[8 * (((char *)v533 - (char *)v536) >> 3)];
        }
        else
        {
          v541 = &v539[8 * (((char *)v533 - (char *)v536) >> 3)];
          do
          {
            v542 = *(_OWORD *)&v533[-1].__r_.__value_.__l.__data_;
            *((_QWORD *)v541 - 1) = *((_QWORD *)&v533[-1].__r_.__value_.__l + 2);
            *(_OWORD *)(v541 - 24) = v542;
            v541 -= 24;
            v533[-1].__r_.__value_.__l.__size_ = 0;
            v533[-1].__r_.__value_.__r.__words[2] = 0;
            v533[-1].__r_.__value_.__r.__words[0] = 0;
            --v533;
          }
          while (v533 != v536);
          v543 = *(int64x2_t *)(v437 + 168);
          v534 = *(_QWORD *)(v437 + 184);
        }
        v535 = v540 + 1;
        *(_QWORD *)(v437 + 168) = v541;
        *(_QWORD *)(v437 + 176) = v540 + 1;
        *(int64x2_t *)&v1286[0].__r_.__value_.__r.__words[1] = v543;
        *(_QWORD *)(v437 + 184) = &v539[24 * v538];
        v1286[1].__r_.__value_.__r.__words[0] = v534;
        v1286[0].__r_.__value_.__r.__words[0] = v543.i64[0];
        sub_22E3B8B94((uint64_t)v1286);
      }
      else
      {
        *v533 = __p;
        v535 = v533 + 1;
      }
      *(_QWORD *)(v437 + 176) = v535;
      v1259.__r_.__value_.__r.__words[0] += 8;
      sub_22E721830((uint64_t)&v1259);
      v525 = v1259.__r_.__value_.__r.__words[0];
    }
    while (v1259.__r_.__value_.__r.__words[0] != v524);
  }
  sub_22E70B070((uint64_t)&v1283, 893, (uint64_t)v1267);
  v1286[0] = *(std::string *)v1267;
  v544 = *(_QWORD *)&v1267[24];
  v545 = *(_QWORD *)v1267;
  if (*(_QWORD *)v1267 != *(_QWORD *)&v1267[24])
  {
    do
    {
      v546 = **(const char ***)(*(_QWORD *)v545 + 48);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v546;
      if (v546)
        v546 = (const char *)strlen(v546);
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v546;
      v1259.__r_.__value_.__s.__data_[0] = 61;
      v547 = llvm::StringRef::find();
      if (v547 == -1)
      {
        v549 = __p.__r_.__value_.__l.__size_;
        v548 = (const void *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        v548 = (const void *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ >= v547)
          v549 = v547;
        else
          v549 = __p.__r_.__value_.__l.__size_;
      }
      HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue();
      v1259.__r_.__value_.__r.__words[0] = operator new[]();
      v1259.__r_.__value_.__l.__size_ = __PAIR64__(HashValue, v549);
      memcpy(v1259.__r_.__value_.__l.__data_, v548, v549);
      sub_22F2781FC(v437 + 240, (unint64_t)&v1259);
      if (v1259.__r_.__value_.__r.__words[0] != -8192
        && v1259.__r_.__value_.__r.__words[0] != -4096
        && v1259.__r_.__value_.__r.__words[0])
      {
        MEMORY[0x2348A0E84]();
      }
      v1286[0].__r_.__value_.__r.__words[0] += 8;
      sub_22E721830((uint64_t)v1286);
      v545 = v1286[0].__r_.__value_.__r.__words[0];
    }
    while (v1286[0].__r_.__value_.__r.__words[0] != v544);
  }
  sub_22E70B070((uint64_t)&v1283, 650, (uint64_t)v1267);
  v1286[0] = *(std::string *)v1267;
  v551 = *(_QWORD *)&v1267[24];
  v552 = *(_QWORD *)v1267;
  if (*(_QWORD *)v1267 != *(_QWORD *)&v1267[24])
  {
    do
    {
      v553 = **(const char ***)(*(_QWORD *)v552 + 48);
      v554 = strlen(v553);
      if (v554 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_2709;
      v555 = v554;
      if (v554 >= 0x17)
      {
        v557 = (v554 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v554 | 7) != 0x17)
          v557 = v554 | 7;
        v558 = v557 + 1;
        v556 = (std::string *)operator new(v557 + 1);
        __p.__r_.__value_.__r.__words[2] = v558 | 0x8000000000000000;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v556;
        __p.__r_.__value_.__l.__size_ = v555;
      }
      else
      {
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v554;
        v556 = &__p;
        if (!v554)
          goto LABEL_1468;
      }
      memmove(v556, v553, v555);
LABEL_1468:
      v556->__r_.__value_.__s.__data_[v555] = 0;
      sub_22E7243E0(v437 + 776, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v1286[0].__r_.__value_.__r.__words[0] += 8;
      sub_22E721830((uint64_t)v1286);
      v552 = v1286[0].__r_.__value_.__r.__words[0];
    }
    while (v1286[0].__r_.__value_.__r.__words[0] != v551);
  }
  if (sub_22E6EBFB4((uint64_t)&v1283, 2999))
    v559 = 1;
  else
    v559 = sub_22E6EBFB4((uint64_t)&v1283, 2038) != 0;
  sub_22E72430C((uint64_t)&v1283, 0x7FFu, 0x749u, 2021, v1267);
  *(_OWORD *)v1265 = *(_OWORD *)v1267;
  v1266 = *(_OWORD *)&v1267[16];
  v560 = v1268;
  v561 = *(uint64_t **)v1267;
  if (*(std::string **)v1267 != v1268)
  {
    v562 = 0;
    v1215 = !v559;
    while (1)
    {
      v563 = *v561;
      v564 = llvm::opt::Option::matches();
      if ((v564 & 1) == 0)
        break;
LABEL_1477:
      v1265[0] = (char *)v1265[0] + 8;
      sub_22E724498((uint64_t)v1265);
      v561 = (uint64_t *)v1265[0];
      v562 = v564;
      if (v1265[0] == v560)
        goto LABEL_1516;
    }
    if ((v562 & 1) != 0)
      v565 = 2;
    else
      v565 = 1;
    v566 = llvm::opt::Option::matches();
    v567 = **(const char ***)(v563 + 48);
    v568 = strlen(v567);
    if (v568 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_2709;
    v569 = v568;
    if (v568 >= 0x17)
    {
      v571 = (v568 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v568 | 7) != 0x17)
        v571 = v568 | 7;
      v572 = v571 + 1;
      v570 = (std::string *)operator new(v571 + 1);
      v1264.__r_.__value_.__r.__words[2] = v572 | 0x8000000000000000;
      v1264.__r_.__value_.__r.__words[0] = (std::string::size_type)v570;
      v1264.__r_.__value_.__l.__size_ = v569;
    }
    else
    {
      *((_BYTE *)&v1264.__r_.__value_.__s + 23) = v568;
      v570 = &v1264;
      if (!v568)
        goto LABEL_1490;
    }
    memmove(v570, v567, v569);
LABEL_1490:
    v570->__r_.__value_.__s.__data_[v569] = 0;
    if (((v1215 | v566) & 1) != 0 || (v573 = *(const char ***)(v563 + 48), **v573 != 61))
    {
LABEL_1510:
      v582 = (std::string *)v1264.__r_.__value_.__r.__words[0];
      if ((v1264.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v582 = &v1264;
      v583 = *((_BYTE *)&v1264.__r_.__value_.__s + 23) & 0x7F;
      if ((v1264.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v583 = v1264.__r_.__value_.__l.__size_;
      v1286[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v582;
      v1286[0].__r_.__value_.__l.__size_ = v583;
      LODWORD(__p.__r_.__value_.__l.__data_) = v565;
      v1259.__r_.__value_.__s.__data_[0] = v566;
      v1257.__r_.__value_.__s.__data_[0] = 1;
      sub_22F242BC0((int64x2_t *)(v437 + 24), (uint64_t)v1286, (int *)&__p, (char *)&v1259, (unsigned __int8 *)&v1257);
      if (SHIBYTE(v1264.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1264.__r_.__value_.__l.__data_);
      goto LABEL_1477;
    }
    v1286[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1286[1];
    *(_OWORD *)&v1286[0].__r_.__value_.__r.__words[1] = xmmword_22F44E330;
    v1263 = 260;
    __p.__r_.__value_.__r.__words[0] = v437;
    v574 = *v573;
    if (*v573)
      v575 = strlen(*v573);
    else
      v575 = 0;
    v1260 = 261;
    if (v575)
      v576 = (std::string::size_type)(v574 + 1);
    else
      v576 = (std::string::size_type)v574;
    v1259.__r_.__value_.__r.__words[0] = v576;
    v1259.__r_.__value_.__l.__size_ = v575 - (v575 != 0);
    v1258 = 257;
    v1256 = 257;
    llvm::sys::path::append();
    v577 = v1286[0].__r_.__value_.__l.__size_;
    if (v1286[0].__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_2709;
    v578 = (const void *)v1286[0].__r_.__value_.__r.__words[0];
    if (v1286[0].__r_.__value_.__l.__size_ >= 0x17)
    {
      v580 = (v1286[0].__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1286[0].__r_.__value_.__l.__size_ | 7) != 0x17)
        v580 = v1286[0].__r_.__value_.__l.__size_ | 7;
      v581 = v580 + 1;
      v579 = (std::string *)operator new(v580 + 1);
      __p.__r_.__value_.__r.__words[2] = v581 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v579;
      __p.__r_.__value_.__l.__size_ = v577;
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v1286[0].__r_.__value_.__s.__data_[8];
      v579 = &__p;
      if (!v1286[0].__r_.__value_.__l.__size_)
        goto LABEL_1506;
    }
    memmove(v579, v578, v577);
LABEL_1506:
    v579->__r_.__value_.__s.__data_[v577] = 0;
    if (SHIBYTE(v1264.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1264.__r_.__value_.__l.__data_);
    v1264 = __p;
    if ((std::string *)v1286[0].__r_.__value_.__l.__data_ != &v1286[1])
      free(v1286[0].__r_.__value_.__l.__data_);
    goto LABEL_1510;
  }
LABEL_1516:
  sub_22E72430C((uint64_t)&v1283, 0x7F4u, 0x7FCu, 2043, v1267);
  *(_OWORD *)&v1286[0].__r_.__value_.__l.__data_ = *(_OWORD *)v1267;
  *(_OWORD *)&v1286[0].__r_.__value_.__r.__words[2] = *(_OWORD *)&v1267[16];
  v584 = v1268;
  v585 = *(uint64_t **)v1267;
  if (*(std::string **)v1267 != v1268)
  {
    v586 = 0;
    v587 = "";
    while (1)
    {
      v588 = *v585;
      if (!llvm::opt::Option::matches())
        break;
      v589 = *(const char ***)(v588 + 48);
      v587 = *v589;
      if (*v589)
        v586 = strlen(*v589);
      else
        v586 = 0;
LABEL_1522:
      v1286[0].__r_.__value_.__r.__words[0] += 8;
      sub_22E724498((uint64_t)v1286);
      v585 = (uint64_t *)v1286[0].__r_.__value_.__r.__words[0];
      if ((std::string *)v1286[0].__r_.__value_.__l.__data_ == v584)
        goto LABEL_1561;
    }
    if (llvm::opt::Option::matches())
    {
      if (!v587)
      {
        memset(&v1259, 0, sizeof(v1259));
LABEL_1542:
        v594 = std::string::append(&v1259, **(const std::string::value_type ***)(v588 + 48));
        v595 = v594->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v594->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v595;
        v594->__r_.__value_.__l.__size_ = 0;
        v594->__r_.__value_.__r.__words[2] = 0;
        v594->__r_.__value_.__r.__words[0] = 0;
        v596 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v596 = &__p;
        v597 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v597 = __p.__r_.__value_.__l.__size_;
        v1257.__r_.__value_.__r.__words[0] = (std::string::size_type)v596;
        v1257.__r_.__value_.__l.__size_ = v597;
        LODWORD(__src.__r_.__value_.__l.__data_) = 9;
LABEL_1557:
        LOBYTE(v1265[0]) = 0;
        v1264.__r_.__value_.__s.__data_[0] = 1;
        sub_22F242BC0((int64x2_t *)(v437 + 24), (uint64_t)&v1257, (int *)&__src, (char *)v1265, (unsigned __int8 *)&v1264);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v1259.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1259.__r_.__value_.__l.__data_);
        goto LABEL_1522;
      }
      if (v586 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_2709;
      if (v586 >= 0x17)
      {
        v592 = (v586 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v586 | 7) != 0x17)
          v592 = v586 | 7;
        v593 = v592 + 1;
        v590 = operator new(v592 + 1);
        v1259.__r_.__value_.__r.__words[2] = v593 | 0x8000000000000000;
        v1259.__r_.__value_.__r.__words[0] = (std::string::size_type)v590;
        v1259.__r_.__value_.__l.__size_ = v586;
      }
      else
      {
        *((_BYTE *)&v1259.__r_.__value_.__s + 23) = v586;
        v590 = &v1259;
        if (!v586)
          goto LABEL_1541;
      }
      memmove(v590, v587, v586);
LABEL_1541:
      *((_BYTE *)v590 + v586) = 0;
      goto LABEL_1542;
    }
    if (!v587)
    {
      memset(&v1259, 0, sizeof(v1259));
LABEL_1552:
      v600 = std::string::append(&v1259, **(const std::string::value_type ***)(v588 + 48));
      v601 = v600->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v600->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v601;
      v600->__r_.__value_.__l.__size_ = 0;
      v600->__r_.__value_.__r.__words[2] = 0;
      v600->__r_.__value_.__r.__words[0] = 0;
      v602 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v602 = &__p;
      v603 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v603 = __p.__r_.__value_.__l.__size_;
      v1257.__r_.__value_.__r.__words[0] = (std::string::size_type)v602;
      v1257.__r_.__value_.__l.__size_ = v603;
      LODWORD(__src.__r_.__value_.__l.__data_) = 1;
      goto LABEL_1557;
    }
    if (v586 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_2709;
    if (v586 >= 0x17)
    {
      v598 = (v586 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v586 | 7) != 0x17)
        v598 = v586 | 7;
      v599 = v598 + 1;
      v591 = operator new(v598 + 1);
      v1259.__r_.__value_.__r.__words[2] = v599 | 0x8000000000000000;
      v1259.__r_.__value_.__r.__words[0] = (std::string::size_type)v591;
      v1259.__r_.__value_.__l.__size_ = v586;
    }
    else
    {
      *((_BYTE *)&v1259.__r_.__value_.__s + 23) = v586;
      v591 = &v1259;
      if (!v586)
        goto LABEL_1551;
    }
    memmove(v591, v587, v586);
LABEL_1551:
    *((_BYTE *)v591 + v586) = 0;
    goto LABEL_1552;
  }
LABEL_1561:
  sub_22E70B070((uint64_t)&v1283, 1997, (uint64_t)v1267);
  v1286[0] = *(std::string *)v1267;
  v604 = *(_QWORD *)&v1267[24];
  v605 = *(_QWORD *)v1267;
  if (*(_QWORD *)v1267 != *(_QWORD *)&v1267[24])
  {
    do
    {
      v606 = *(const char ***)(*(_QWORD *)v605 + 48);
      v607 = *v606;
      if (*v606)
        v608 = strlen(*v606);
      else
        v608 = 0;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v607;
      __p.__r_.__value_.__l.__size_ = v608;
      LODWORD(v1259.__r_.__value_.__l.__data_) = 9;
      v1257.__r_.__value_.__s.__data_[0] = 0;
      __src.__r_.__value_.__s.__data_[0] = 1;
      sub_22F242BC0((int64x2_t *)(v437 + 24), (uint64_t)&__p, (int *)&v1259, (char *)&v1257, (unsigned __int8 *)&__src);
      v1286[0].__r_.__value_.__r.__words[0] += 8;
      sub_22E721830((uint64_t)v1286);
      v605 = v1286[0].__r_.__value_.__r.__words[0];
    }
    while (v1286[0].__r_.__value_.__r.__words[0] != v604);
  }
  sub_22E70B070((uint64_t)&v1283, 2037, (uint64_t)v1267);
  v1286[0] = *(std::string *)v1267;
  v609 = *(_QWORD *)&v1267[24];
  v610 = *(_QWORD *)v1267;
  if (*(_QWORD *)v1267 != *(_QWORD *)&v1267[24])
  {
    do
    {
      v611 = *(const char ***)(*(_QWORD *)v610 + 48);
      v612 = *v611;
      if (*v611)
        v613 = strlen(*v611);
      else
        v613 = 0;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v612;
      __p.__r_.__value_.__l.__size_ = v613;
      LODWORD(v1259.__r_.__value_.__l.__data_) = 0;
      v1257.__r_.__value_.__s.__data_[0] = 0;
      __src.__r_.__value_.__s.__data_[0] = 1;
      sub_22F242BC0((int64x2_t *)(v437 + 24), (uint64_t)&__p, (int *)&v1259, (char *)&v1257, (unsigned __int8 *)&__src);
      v1286[0].__r_.__value_.__r.__words[0] += 8;
      sub_22E721830((uint64_t)v1286);
      v610 = v1286[0].__r_.__value_.__r.__words[0];
    }
    while (v1286[0].__r_.__value_.__r.__words[0] != v609);
  }
  sub_22E6ECFB0((uint64_t)&v1283, 0x7F8u, 0x7FDu, (uint64_t)v1267);
  v1286[0] = *(std::string *)v1267;
  v614 = *(_QWORD *)&v1267[24];
  v615 = *(_QWORD *)v1267;
  if (*(_QWORD *)v1267 != *(_QWORD *)&v1267[24])
  {
    do
    {
      v616 = *(const char ***)(*(_QWORD *)v615 + 48);
      v617 = *v616;
      if (*v616)
        v618 = strlen(*v616);
      else
        v618 = 0;
      v619 = llvm::opt::Option::matches();
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v617;
      __p.__r_.__value_.__l.__size_ = v618;
      LODWORD(v1259.__r_.__value_.__l.__data_) = 3;
      v1257.__r_.__value_.__s.__data_[0] = 0;
      __src.__r_.__value_.__s.__data_[0] = v619 ^ 1;
      sub_22F242BC0((int64x2_t *)(v437 + 24), (uint64_t)&__p, (int *)&v1259, (char *)&v1257, (unsigned __int8 *)&__src);
      v1286[0].__r_.__value_.__r.__words[0] += 8;
      sub_22E7219D8((uint64_t)v1286);
      v615 = v1286[0].__r_.__value_.__r.__words[0];
    }
    while (v1286[0].__r_.__value_.__r.__words[0] != v614);
  }
  sub_22E70B070((uint64_t)&v1283, 1999, (uint64_t)v1267);
  v1286[0] = *(std::string *)v1267;
  v620 = *(_QWORD *)&v1267[24];
  v621 = *(_QWORD *)v1267;
  if (*(_QWORD *)v1267 != *(_QWORD *)&v1267[24])
  {
    do
    {
      v622 = *(const char ***)(*(_QWORD *)v621 + 48);
      v623 = *v622;
      if (*v622)
        v624 = strlen(*v622);
      else
        v624 = 0;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v623;
      __p.__r_.__value_.__l.__size_ = v624;
      LODWORD(v1259.__r_.__value_.__l.__data_) = 3;
      v1257.__r_.__value_.__s.__data_[0] = 1;
      __src.__r_.__value_.__s.__data_[0] = 1;
      sub_22F242BC0((int64x2_t *)(v437 + 24), (uint64_t)&__p, (int *)&v1259, (char *)&v1257, (unsigned __int8 *)&__src);
      v1286[0].__r_.__value_.__r.__words[0] += 8;
      sub_22E721830((uint64_t)v1286);
      v621 = v1286[0].__r_.__value_.__r.__words[0];
    }
    while (v1286[0].__r_.__value_.__r.__words[0] != v620);
  }
  sub_22E70B070((uint64_t)&v1283, 1998, (uint64_t)v1267);
  v1286[0] = *(std::string *)v1267;
  v625 = *(_QWORD *)&v1267[24];
  v626 = *(_QWORD *)v1267;
  if (*(_QWORD *)v1267 != *(_QWORD *)&v1267[24])
  {
    do
    {
      v627 = *(const char ***)(*(_QWORD *)v626 + 48);
      v628 = *v627;
      if (*v627)
        v629 = strlen(*v627);
      else
        v629 = 0;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v628;
      __p.__r_.__value_.__l.__size_ = v629;
      LODWORD(v1259.__r_.__value_.__l.__data_) = 3;
      v1257.__r_.__value_.__s.__data_[0] = 1;
      __src.__r_.__value_.__s.__data_[0] = 0;
      sub_22F242BC0((int64x2_t *)(v437 + 24), (uint64_t)&__p, (int *)&v1259, (char *)&v1257, (unsigned __int8 *)&__src);
      v1286[0].__r_.__value_.__r.__words[0] += 8;
      sub_22E721830((uint64_t)v1286);
      v626 = v1286[0].__r_.__value_.__r.__words[0];
    }
    while (v1286[0].__r_.__value_.__r.__words[0] != v625);
  }
  sub_22E70B070((uint64_t)&v1283, 164, (uint64_t)v1267);
  v1286[0] = *(std::string *)v1267;
  v630 = *(_QWORD *)&v1267[24];
  v631 = *(_QWORD *)v1267;
  if (*(_QWORD *)v1267 != *(_QWORD *)&v1267[24])
  {
    do
    {
      v632 = *(const char ***)(*(_QWORD *)v631 + 48);
      v633 = *v632;
      if (*v632)
        v634 = strlen(*v632);
      else
        v634 = 0;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v633;
      __p.__r_.__value_.__l.__size_ = v634;
      LODWORD(v1259.__r_.__value_.__l.__data_) = 5;
      v1257.__r_.__value_.__s.__data_[0] = 0;
      __src.__r_.__value_.__s.__data_[0] = 1;
      sub_22F242BC0((int64x2_t *)(v437 + 24), (uint64_t)&__p, (int *)&v1259, (char *)&v1257, (unsigned __int8 *)&__src);
      v1286[0].__r_.__value_.__r.__words[0] += 8;
      sub_22E721830((uint64_t)v1286);
      v631 = v1286[0].__r_.__value_.__r.__words[0];
    }
    while (v1286[0].__r_.__value_.__r.__words[0] != v630);
  }
  sub_22E70B070((uint64_t)&v1283, 246, (uint64_t)v1267);
  v1286[0] = *(std::string *)v1267;
  v635 = *(_QWORD *)&v1267[24];
  v636 = *(_QWORD *)v1267;
  if (*(_QWORD *)v1267 != *(_QWORD *)&v1267[24])
  {
    do
    {
      v637 = *(const char ***)(*(_QWORD *)v636 + 48);
      v638 = *v637;
      if (*v637)
        v639 = strlen(*v637);
      else
        v639 = 0;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v638;
      __p.__r_.__value_.__l.__size_ = v639;
      LODWORD(v1259.__r_.__value_.__l.__data_) = 6;
      v1257.__r_.__value_.__s.__data_[0] = 0;
      __src.__r_.__value_.__s.__data_[0] = 1;
      sub_22F242BC0((int64x2_t *)(v437 + 24), (uint64_t)&__p, (int *)&v1259, (char *)&v1257, (unsigned __int8 *)&__src);
      v1286[0].__r_.__value_.__r.__words[0] += 8;
      sub_22E721830((uint64_t)v1286);
      v636 = v1286[0].__r_.__value_.__r.__words[0];
    }
    while (v1286[0].__r_.__value_.__r.__words[0] != v635);
  }
  sub_22E70B070((uint64_t)&v1283, 2770, (uint64_t)v1267);
  v1286[0] = *(std::string *)v1267;
  v640 = *(_QWORD *)&v1267[24];
  v641 = *(_QWORD *)v1267;
  if (*(_QWORD *)v1267 != *(_QWORD *)&v1267[24])
  {
    do
    {
      v642 = *(const char ***)(*(_QWORD *)v641 + 48);
      v643 = *v642;
      if (*v642)
        v644 = strlen(*v642);
      else
        v644 = 0;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v643;
      __p.__r_.__value_.__l.__size_ = v644;
      LODWORD(v1259.__r_.__value_.__l.__data_) = 7;
      v1257.__r_.__value_.__s.__data_[0] = 0;
      __src.__r_.__value_.__s.__data_[0] = 1;
      sub_22F242BC0((int64x2_t *)(v437 + 24), (uint64_t)&__p, (int *)&v1259, (char *)&v1257, (unsigned __int8 *)&__src);
      v1286[0].__r_.__value_.__r.__words[0] += 8;
      sub_22E721830((uint64_t)v1286);
      v641 = v1286[0].__r_.__value_.__r.__words[0];
    }
    while (v1286[0].__r_.__value_.__r.__words[0] != v640);
  }
  sub_22E70B070((uint64_t)&v1283, 2789, (uint64_t)v1267);
  v1286[0] = *(std::string *)v1267;
  v645 = *(_QWORD *)&v1267[24];
  v646 = *(_QWORD *)v1267;
  if (*(_QWORD *)v1267 != *(_QWORD *)&v1267[24])
  {
    do
    {
      v647 = *(const char ***)(*(_QWORD *)v646 + 48);
      v648 = *v647;
      if (*v647)
        v649 = strlen(*v647);
      else
        v649 = 0;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v648;
      __p.__r_.__value_.__l.__size_ = v649;
      LODWORD(v1259.__r_.__value_.__l.__data_) = 8;
      v1257.__r_.__value_.__s.__data_[0] = 0;
      __src.__r_.__value_.__s.__data_[0] = 1;
      sub_22F242BC0((int64x2_t *)(v437 + 24), (uint64_t)&__p, (int *)&v1259, (char *)&v1257, (unsigned __int8 *)&__src);
      v1286[0].__r_.__value_.__r.__words[0] += 8;
      sub_22E721830((uint64_t)v1286);
      v646 = v1286[0].__r_.__value_.__r.__words[0];
    }
    while (v1286[0].__r_.__value_.__r.__words[0] != v645);
  }
  sub_22E6ECFB0((uint64_t)&v1283, 0x7F3u, 0x7F2u, (uint64_t)v1267);
  v1286[0] = *(std::string *)v1267;
  v650 = *(_QWORD *)&v1267[24];
  v651 = *(uint64_t **)v1267;
  if (*(_QWORD *)v1267 != *(_QWORD *)&v1267[24])
  {
    do
    {
      v652 = *v651;
      if (llvm::opt::Option::matches())
        v653 = 4;
      else
        v653 = 3;
      v654 = *(const char ***)(v652 + 48);
      v655 = *v654;
      if (*v654)
        v656 = strlen(*v654);
      else
        v656 = 0;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v655;
      __p.__r_.__value_.__l.__size_ = v656;
      LODWORD(v1259.__r_.__value_.__l.__data_) = v653;
      v1257.__r_.__value_.__s.__data_[0] = 0;
      __src.__r_.__value_.__s.__data_[0] = 1;
      sub_22F242BC0((int64x2_t *)(v437 + 24), (uint64_t)&__p, (int *)&v1259, (char *)&v1257, (unsigned __int8 *)&__src);
      v1286[0].__r_.__value_.__r.__words[0] += 8;
      sub_22E7219D8((uint64_t)v1286);
      v651 = (uint64_t *)v1286[0].__r_.__value_.__r.__words[0];
    }
    while (v1286[0].__r_.__value_.__r.__words[0] != v650);
  }
  sub_22E6ECFB0((uint64_t)&v1283, 0xBB9u, 0xAABu, (uint64_t)v1267);
  v1286[0] = *(std::string *)v1267;
  v657 = *(_QWORD *)&v1267[24];
  v658 = *(_QWORD *)v1267;
  if (*(_QWORD *)v1267 != *(_QWORD *)&v1267[24])
  {
    do
    {
      v659 = *(const char ***)(*(_QWORD *)v658 + 48);
      v660 = *v659;
      if (*v659)
        v661 = strlen(*v659);
      else
        v661 = 0;
      v662 = llvm::opt::Option::matches();
      sub_22F2A9A7C((int64x2_t *)(v437 + 48), v660, v661, v662);
      v1286[0].__r_.__value_.__r.__words[0] += 8;
      sub_22E7219D8((uint64_t)v1286);
      v658 = v1286[0].__r_.__value_.__r.__words[0];
    }
    while (v1286[0].__r_.__value_.__r.__words[0] != v657);
  }
  sub_22E70B070((uint64_t)&v1283, 2042, (uint64_t)v1267);
  v1259 = *(std::string *)v1267;
  v663 = *(_QWORD *)&v1267[24];
  v664 = *(_QWORD *)v1267;
  if (*(_QWORD *)v1267 != *(_QWORD *)&v1267[24])
  {
    do
    {
      v665 = *(const char ***)(*(_QWORD *)v664 + 48);
      v666 = *v665;
      if (*v665)
      {
        v667 = strlen(*v665);
        if (v667 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_2709;
        v668 = v667;
        if (v667 >= 0x17)
        {
          v670 = (v667 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v667 | 7) != 0x17)
            v670 = v667 | 7;
          v671 = v670 + 1;
          v669 = (std::string *)operator new(v670 + 1);
          __p.__r_.__value_.__r.__words[2] = v671 | 0x8000000000000000;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v669;
          __p.__r_.__value_.__l.__size_ = v668;
        }
        else
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = v667;
          v669 = &__p;
          if (!v667)
            goto LABEL_1630;
        }
        memmove(v669, v666, v668);
      }
      else
      {
        v668 = 0;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        v669 = &__p;
      }
LABEL_1630:
      v669->__r_.__value_.__s.__data_[v668] = 0;
      v672 = *(std::string **)(v437 + 808);
      v673 = *(_QWORD *)(v437 + 816);
      if ((unint64_t)v672 >= v673)
      {
        v675 = *(std::string **)(v437 + 800);
        v676 = 0xAAAAAAAAAAAAAAABLL * (((char *)v672 - (char *)v675) >> 3) + 1;
        if (v676 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_2709;
        if (0x5555555555555556 * ((uint64_t)(v673 - (_QWORD)v675) >> 3) > v676)
          v676 = 0x5555555555555556 * ((uint64_t)(v673 - (_QWORD)v675) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v673 - (_QWORD)v675) >> 3) >= 0x555555555555555)
          v677 = 0xAAAAAAAAAAAAAAALL;
        else
          v677 = v676;
        v1286[1].__r_.__value_.__l.__size_ = v437 + 816;
        if (v677)
        {
          if (v677 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_2710;
          v678 = (char *)operator new(24 * v677);
        }
        else
        {
          v678 = 0;
        }
        v679 = (std::string *)&v678[8 * (((char *)v672 - (char *)v675) >> 3)];
        *v679 = __p;
        if (v672 == v675)
        {
          v682 = vdupq_n_s64((unint64_t)v672);
          v680 = &v678[8 * (((char *)v672 - (char *)v675) >> 3)];
        }
        else
        {
          v680 = &v678[8 * (((char *)v672 - (char *)v675) >> 3)];
          do
          {
            v681 = *(_OWORD *)&v672[-1].__r_.__value_.__l.__data_;
            *((_QWORD *)v680 - 1) = *((_QWORD *)&v672[-1].__r_.__value_.__l + 2);
            *(_OWORD *)(v680 - 24) = v681;
            v680 -= 24;
            v672[-1].__r_.__value_.__l.__size_ = 0;
            v672[-1].__r_.__value_.__r.__words[2] = 0;
            v672[-1].__r_.__value_.__r.__words[0] = 0;
            --v672;
          }
          while (v672 != v675);
          v682 = *(int64x2_t *)(v437 + 800);
          v673 = *(_QWORD *)(v437 + 816);
        }
        v674 = v679 + 1;
        *(_QWORD *)(v437 + 800) = v680;
        *(_QWORD *)(v437 + 808) = v679 + 1;
        *(int64x2_t *)&v1286[0].__r_.__value_.__r.__words[1] = v682;
        *(_QWORD *)(v437 + 816) = &v678[24 * v677];
        v1286[1].__r_.__value_.__r.__words[0] = v673;
        v1286[0].__r_.__value_.__r.__words[0] = v682.i64[0];
        sub_22E3B8B94((uint64_t)v1286);
      }
      else
      {
        *v672 = __p;
        v674 = v672 + 1;
      }
      *(_QWORD *)(v437 + 808) = v674;
      v1259.__r_.__value_.__r.__words[0] += 8;
      sub_22E721830((uint64_t)&v1259);
      v664 = v1259.__r_.__value_.__r.__words[0];
    }
    while (v1259.__r_.__value_.__r.__words[0] != v663);
  }
  sub_22E70B070((uint64_t)&v1283, 2041, (uint64_t)v1267);
  v1259 = *(std::string *)v1267;
  v683 = *(_QWORD *)&v1267[24];
  v684 = *(_QWORD *)v1267;
  v685 = v1219;
  if (*(_QWORD *)v1267 != *(_QWORD *)&v1267[24])
  {
    v686 = (std::string **)(v437 + 824);
    do
    {
      v687 = *(const char ***)(*(_QWORD *)v684 + 48);
      v688 = *v687;
      if (*v687)
      {
        v689 = strlen(*v687);
        if (v689 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_2709;
        v690 = v689;
        if (v689 >= 0x17)
        {
          v692 = (v689 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v689 | 7) != 0x17)
            v692 = v689 | 7;
          v693 = v692 + 1;
          v691 = (std::string *)operator new(v692 + 1);
          __p.__r_.__value_.__r.__words[2] = v693 | 0x8000000000000000;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v691;
          __p.__r_.__value_.__l.__size_ = v690;
        }
        else
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = v689;
          v691 = &__p;
          if (!v689)
            goto LABEL_1661;
        }
        memmove(v691, v688, v690);
      }
      else
      {
        v690 = 0;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        v691 = &__p;
      }
LABEL_1661:
      v691->__r_.__value_.__s.__data_[v690] = 0;
      v694 = *(std::string **)(v437 + 832);
      v695 = *(_QWORD *)(v437 + 840);
      if ((unint64_t)v694 >= v695)
      {
        v697 = *v686;
        v698 = 0xAAAAAAAAAAAAAAABLL * (((char *)v694 - (char *)*v686) >> 3);
        v699 = v698 + 1;
        if (v698 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_2709;
        if (0x5555555555555556 * ((uint64_t)(v695 - (_QWORD)v697) >> 3) > v699)
          v699 = 0x5555555555555556 * ((uint64_t)(v695 - (_QWORD)v697) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v695 - (_QWORD)v697) >> 3) >= 0x555555555555555)
          v700 = 0xAAAAAAAAAAAAAAALL;
        else
          v700 = v699;
        v1286[1].__r_.__value_.__l.__size_ = v437 + 840;
        if (v700)
        {
          if (v700 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_2710;
          v701 = (char *)operator new(24 * v700);
        }
        else
        {
          v701 = 0;
        }
        v702 = (std::string *)&v701[24 * v698];
        *v702 = __p;
        if (v694 == v697)
        {
          v705 = vdupq_n_s64((unint64_t)v694);
          v703 = &v701[24 * v698];
          v685 = v1219;
        }
        else
        {
          v703 = &v701[24 * v698];
          v685 = v1219;
          do
          {
            v704 = *(_OWORD *)&v694[-1].__r_.__value_.__l.__data_;
            *((_QWORD *)v703 - 1) = *((_QWORD *)&v694[-1].__r_.__value_.__l + 2);
            *(_OWORD *)(v703 - 24) = v704;
            v703 -= 24;
            v694[-1].__r_.__value_.__l.__size_ = 0;
            v694[-1].__r_.__value_.__r.__words[2] = 0;
            v694[-1].__r_.__value_.__r.__words[0] = 0;
            --v694;
          }
          while (v694 != v697);
          v705 = *(int64x2_t *)v686;
          v695 = *(_QWORD *)(v437 + 840);
        }
        v696 = v702 + 1;
        *(_QWORD *)(v437 + 824) = v703;
        *(_QWORD *)(v437 + 832) = v702 + 1;
        *(int64x2_t *)&v1286[0].__r_.__value_.__r.__words[1] = v705;
        *(_QWORD *)(v437 + 840) = &v701[24 * v700];
        v1286[1].__r_.__value_.__r.__words[0] = v695;
        v1286[0].__r_.__value_.__r.__words[0] = v705.i64[0];
        sub_22E3B8B94((uint64_t)v1286);
      }
      else
      {
        *v694 = __p;
        v696 = v694 + 1;
      }
      *(_QWORD *)(v437 + 832) = v696;
      v1259.__r_.__value_.__r.__words[0] += 8;
      sub_22E721830((uint64_t)&v1259);
      v684 = v1259.__r_.__value_.__r.__words[0];
    }
    while (v1259.__r_.__value_.__r.__words[0] != v683);
  }
  if ((std::string::pointer *)__len.__r_.__value_.__l.__data_ != &v1288)
    free(__len.__r_.__value_.__l.__data_);
  v706 = sub_22E6EBFB4((uint64_t)&v1283, 407);
  if (v706)
  {
    v707 = v706;
    v708 = *(const char ***)(v706 + 48);
    if (*v708)
      strlen(*v708);
    if (llvm::VersionTuple::tryParse())
    {
      *(_QWORD *)(v1223 + 312) = 0x18800000000;
      if (*(char *)(v1223 + 311) < 0)
      {
        **(_BYTE **)(v1223 + 288) = 0;
        *(_QWORD *)(v1223 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v1223 + 288) = 0;
        *(_BYTE *)(v1223 + 311) = 0;
      }
      *(_OWORD *)&__len.__r_.__value_.__l.__data_ = (unint64_t)(v1223 + 320);
      __len.__r_.__value_.__r.__words[2] = v1223;
      LOWORD(v1288) = 1;
      *(_BYTE *)(v1223 + 320) = 0;
      *(_DWORD *)(v1223 + 664) = 0;
      v709 = *(unsigned int *)(v1223 + 776);
      if ((_DWORD)v709)
      {
        v710 = *(_QWORD *)(v1223 + 768);
        v711 = 56 * v709;
        do
        {
          if (*(char *)(v710 + v711 - 9) < 0)
            operator delete(*(void **)(v710 + v711 - 32));
          v711 -= 56;
        }
        while (v711);
      }
      *(_DWORD *)(v1223 + 776) = 0;
      llvm::opt::Arg::getAsString();
      if (v1267[23] >= 0)
        v712 = v1267;
      else
        v712 = *(_BYTE **)v1267;
      if (v1267[23] >= 0)
        v713 = v1267[23] & 0x7F;
      else
        v713 = *(_QWORD *)&v1267[8];
      sub_22E3B89A8((unsigned __int8 **)&__len, v712, v713);
      v714 = **(_QWORD **)(v707 + 48);
      v715 = (unsigned __int8 *)__len.__r_.__value_.__r.__words[0];
      if (!__len.__r_.__value_.__r.__words[0])
      {
        v715 = (unsigned __int8 *)sub_22E3B8AAC(__len.__r_.__value_.__l.__size_);
        __len.__r_.__value_.__r.__words[0] = (std::string::size_type)v715;
      }
      v715[*v715 + 1] = 1;
      v716 = __len.__r_.__value_.__r.__words[0];
      v717 = *__len.__r_.__value_.__l.__data_;
      *__len.__r_.__value_.__l.__data_ = v717 + 1;
      *(_QWORD *)(v716 + 8 * v717 + 16) = v714;
      if ((v1267[23] & 0x80000000) != 0)
        operator delete(*(void **)v1267);
      sub_22E3BB0B8((uint64_t)&__len);
    }
  }
  v718 = sub_22E6EBFB4((uint64_t)&v1283, 1995);
  if (v718)
    MEMORY[0x2348A0C14](&v685[4].__r_.__value_.__r.__words[1], **(_QWORD **)(v718 + 48));
  sub_22E70B070((uint64_t)&v1283, 1994, (uint64_t)&__len);
  v1286[0] = __len;
  v719 = v1288;
  v720 = __len.__r_.__value_.__r.__words[0];
  if (__len.__r_.__value_.__l.__data_ != v1288)
  {
    v721 = v685 + 6;
    do
    {
      v722 = **(const char ***)(*(_QWORD *)v720 + 48);
      v723 = strlen(v722);
      if (v723 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_2709;
      v724 = v723;
      if (v723 >= 0x17)
      {
        v726 = (v723 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v723 | 7) != 0x17)
          v726 = v723 | 7;
        v727 = v726 + 1;
        v725 = (std::string *)operator new(v726 + 1);
        __p.__r_.__value_.__r.__words[2] = v727 | 0x8000000000000000;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v725;
        __p.__r_.__value_.__l.__size_ = v724;
      }
      else
      {
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v723;
        v725 = &__p;
        if (!v723)
          goto LABEL_1717;
      }
      memmove(v725, v722, v724);
LABEL_1717:
      v725->__r_.__value_.__s.__data_[v724] = 0;
      v728 = (std::string *)v685[5].__r_.__value_.__r.__words[2];
      v729 = v685[6].__r_.__value_.__l.__data_;
      if (v728 >= (std::string *)v729)
      {
        v730 = (std::string *)v685[5].__r_.__value_.__l.__size_;
        v731 = 0xAAAAAAAAAAAAAAABLL * (((char *)v728 - (char *)v730) >> 3);
        v732 = v731 + 1;
        if (v731 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_2709;
        if (0x5555555555555556 * ((v729 - (std::string::pointer)v730) >> 3) > v732)
          v732 = 0x5555555555555556 * ((v729 - (std::string::pointer)v730) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v729 - (std::string::pointer)v730) >> 3) >= 0x555555555555555)
          v733 = 0xAAAAAAAAAAAAAAALL;
        else
          v733 = v732;
        v1268 = v721;
        if (v733)
        {
          if (v733 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_2710;
          v734 = (char *)operator new(24 * v733);
        }
        else
        {
          v734 = 0;
        }
        v735 = (std::string *)&v734[8 * (((char *)v728 - (char *)v730) >> 3)];
        *v735 = __p;
        memset(&__p, 0, sizeof(__p));
        if (v728 == v730)
        {
          v739 = 0;
          v738 = vdupq_n_s64((unint64_t)v728);
          v736 = &v734[24 * v731];
          v685 = v1219;
        }
        else
        {
          v736 = &v734[8 * (((char *)v728 - (char *)v730) >> 3)];
          v685 = v1219;
          do
          {
            v737 = *(_OWORD *)&v728[-1].__r_.__value_.__l.__data_;
            *((_QWORD *)v736 - 1) = *((_QWORD *)&v728[-1].__r_.__value_.__l + 2);
            *(_OWORD *)(v736 - 24) = v737;
            v736 -= 24;
            v728[-1].__r_.__value_.__l.__size_ = 0;
            v728[-1].__r_.__value_.__r.__words[2] = 0;
            v728[-1].__r_.__value_.__r.__words[0] = 0;
            --v728;
          }
          while (v728 != v730);
          v738 = *(int64x2_t *)&v1219[5].__r_.__value_.__r.__words[1];
          v729 = v1219[6].__r_.__value_.__l.__data_;
          v739 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        v740 = v735 + 1;
        v685[5].__r_.__value_.__l.__size_ = (std::string::size_type)v736;
        v685[5].__r_.__value_.__r.__words[2] = (std::string::size_type)&v735[1];
        *(int64x2_t *)&v1267[8] = v738;
        v685[6].__r_.__value_.__r.__words[0] = (std::string::size_type)&v734[24 * v733];
        *(_QWORD *)&v1267[24] = v729;
        *(_QWORD *)v1267 = v738.i64[0];
        sub_22E3B8B94((uint64_t)v1267);
        v685[5].__r_.__value_.__r.__words[2] = (std::string::size_type)v740;
        if (v739 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        *v728 = __p;
        v685[5].__r_.__value_.__r.__words[2] = (std::string::size_type)&v728[1];
      }
      v1286[0].__r_.__value_.__r.__words[0] += 8;
      sub_22E721830((uint64_t)v1286);
      v720 = v1286[0].__r_.__value_.__r.__words[0];
    }
    while (v1286[0].__r_.__value_.__l.__data_ != v719);
  }
  if (sub_22E6EBFB4((uint64_t)&v1283, 1552))
    v741 = 1;
  else
    v741 = sub_22E6EBFB4((uint64_t)&v1283, 1559) != 0;
  v742 = v1211;
  *(_QWORD *)(v1211 + 20) = *(_QWORD *)(v1211 + 20) & 0xFFFFFFFDFFFFFFFFLL | ((unint64_t)v741 << 33);
  *(_DWORD *)(v1211 + 20) = sub_22E80ACDC((uint64_t)&v1283, 1552, 0, v1223);
  *(_QWORD *)(v1211 + 20) = *(_QWORD *)(v1211 + 20) & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(sub_22E6EBFB4((uint64_t)&v1283, 1559) != 0) << 32);
  *(_QWORD *)(v1211 + 8) = *(_QWORD *)(v1211 + 8) & 0xBFFFFFFFFFFFFFFFLL | ((unint64_t)(sub_22E6EBFB4((uint64_t)&v1283, 1558) != 0) << 62);
  *(_QWORD *)(v1211 + 8) = *(_QWORD *)(v1211 + 8) & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)(sub_22E6EBFB4((uint64_t)&v1283, 1555) != 0) << 63);
  *(_WORD *)(v1211 + 16) = *(_WORD *)(v1211 + 16) & 0xFFFE | (sub_22E6EBFB4((uint64_t)&v1283, 1565) != 0);
  v743 = sub_22E6EBFB4((uint64_t)&v1283, 1557) != 0;
  v744 = *(_WORD *)(v742 + 16) & 0xFFFD | (*(unsigned __int8 *)(v742 + 18) << 16);
  *(_WORD *)(v1211 + 16) = *(_WORD *)(v1211 + 16) & 0xFFFD | (2 * v743);
  *(_BYTE *)(v1211 + 18) = BYTE2(v744);
  v745 = sub_22E6EBFB4((uint64_t)&v1283, 1553) != 0;
  v746 = *(_WORD *)(v742 + 16) & 0xFFFB | (*(unsigned __int8 *)(v742 + 18) << 16);
  *(_WORD *)(v1211 + 16) = *(_WORD *)(v1211 + 16) & 0xFFFB | (4 * v745);
  *(_BYTE *)(v1211 + 18) = BYTE2(v746);
  v747 = sub_22E6EBFB4((uint64_t)&v1283, 1567) != 0;
  v748 = *(_WORD *)(v742 + 16) & 0xFFF7 | (*(unsigned __int8 *)(v742 + 18) << 16);
  *(_WORD *)(v1211 + 16) = *(_WORD *)(v1211 + 16) & 0xFFF7 | (8 * v747);
  *(_BYTE *)(v1211 + 18) = BYTE2(v748);
  v749 = sub_22E6EBFB4((uint64_t)&v1283, 1568) != 0;
  v750 = *(_WORD *)(v742 + 16) & 0xFFEF | (*(unsigned __int8 *)(v742 + 18) << 16);
  *(_WORD *)(v1211 + 16) = *(_WORD *)(v1211 + 16) & 0xFFEF | (16 * v749);
  *(_BYTE *)(v1211 + 18) = BYTE2(v750);
  *(_BYTE *)(v1211 + 18) = (((sub_22E6EBFB4((uint64_t)&v1283, 1566) != 0) << 23) | ((*(_BYTE *)(v1211 + 18) & 0x7Fu) << 16)) >> 16;
  *(_QWORD *)(v1211 + 20) = *(_QWORD *)(v1211 + 20) & 0xFFFFFFFBFFFFFFFFLL | ((unint64_t)(sub_22E6EBFB4((uint64_t)&v1283, 1554) != 0) << 34);
  v751 = sub_22E6EBFB4((uint64_t)&v1283, 1563);
  if (v751)
  {
    v752 = (_QWORD **)v751;
    v753 = *(const char ***)(v751 + 48);
    v754 = *v753;
    if (*v753)
    {
      v755 = strlen(*v753);
      if (v755 != 5)
      {
        if (v755 == 13)
        {
          if (*(_QWORD *)v754 != 0x646E612D6E676973 || *(_QWORD *)(v754 + 5) != 0x687475612D646E61)
            goto LABEL_1763;
          v757 = 24;
        }
        else
        {
          if (v755 != 14)
            goto LABEL_1763;
          if (*(_QWORD *)v754 != 0x646E612D6E676973 || *(_QWORD *)(v754 + 6) != 0x70697274732D646ELL)
            goto LABEL_1763;
          v757 = 16;
        }
        goto LABEL_1778;
      }
      if (bswap32(*(_DWORD *)v754) == 1937011305 && v754[4] == 112)
      {
        v757 = 8;
LABEL_1778:
        v742 = v1211;
        *(_DWORD *)(v1211 + 240) = *(_DWORD *)(v1211 + 240) & 0xFFFFFFE7 | v757;
        goto LABEL_1779;
      }
    }
LABEL_1763:
    *(_QWORD *)(v1223 + 312) = 0x1D000000000;
    if (*(char *)(v1223 + 311) < 0)
    {
      **(_BYTE **)(v1223 + 288) = 0;
      *(_QWORD *)(v1223 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v1223 + 288) = 0;
      *(_BYTE *)(v1223 + 311) = 0;
    }
    *(_OWORD *)&__len.__r_.__value_.__l.__data_ = (unint64_t)(v1223 + 320);
    __len.__r_.__value_.__r.__words[2] = v1223;
    LOWORD(v1288) = 1;
    *(_BYTE *)(v1223 + 320) = 0;
    *(_DWORD *)(v1223 + 664) = 0;
    v760 = *(unsigned int *)(v1223 + 776);
    if ((_DWORD)v760)
    {
      v761 = *(_QWORD *)(v1223 + 768);
      v762 = 56 * v760;
      do
      {
        if (*(char *)(v761 + v762 - 9) < 0)
          operator delete(*(void **)(v761 + v762 - 32));
        v762 -= 56;
      }
      while (v762);
    }
    *(_DWORD *)(v1223 + 776) = 0;
    v763 = (void *)(*v752)[1];
    if (v763)
      v764 = strlen((const char *)(*v752)[1]);
    else
      v764 = 0;
    sub_22E3B89A8((unsigned __int8 **)&__len, v763, v764);
    v765 = *v752[6];
    v766 = (unsigned __int8 *)__len.__r_.__value_.__r.__words[0];
    if (!__len.__r_.__value_.__r.__words[0])
    {
      v766 = (unsigned __int8 *)sub_22E3B8AAC(__len.__r_.__value_.__l.__size_);
      __len.__r_.__value_.__r.__words[0] = (std::string::size_type)v766;
    }
    v766[*v766 + 1] = 1;
    v767 = __len.__r_.__value_.__r.__words[0];
    v768 = *__len.__r_.__value_.__l.__data_;
    *__len.__r_.__value_.__l.__data_ = v768 + 1;
    *(_QWORD *)(v767 + 8 * v768 + 16) = v765;
    sub_22E3BB0B8((uint64_t)&__len);
    v769 = v1211;
    goto LABEL_1798;
  }
LABEL_1779:
  v770 = ((*(unsigned __int16 *)(v742 + 16) | (*(unsigned __int8 *)(v742 + 18) << 16)) & 0xFFBFFFFF | ((sub_22E6EBFB4((uint64_t)&v1283, 1562) != 0) << 22)) >> 16;
  *(_WORD *)(v742 + 16) = *(_WORD *)(v742 + 16);
  *(_BYTE *)(v742 + 18) = v770;
  *(_QWORD *)(v742 + 20) = *(_QWORD *)(v742 + 20) & 0xFFFFFFF7FFFFFFFFLL | ((unint64_t)(sub_22E6EBFB4((uint64_t)&v1283, 1560) != 0) << 35);
  v771 = sub_22E6EBFB4((uint64_t)&v1283, 1564);
  if (v771)
  {
    v772 = v771;
    *(_QWORD *)(v1223 + 312) = 0x1CF00000000;
    if (*(char *)(v1223 + 311) < 0)
    {
      **(_BYTE **)(v1223 + 288) = 0;
      *(_QWORD *)(v1223 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v1223 + 288) = 0;
      *(_BYTE *)(v1223 + 311) = 0;
    }
    *(_OWORD *)&__len.__r_.__value_.__l.__data_ = (unint64_t)(v1223 + 320);
    __len.__r_.__value_.__r.__words[2] = v1223;
    LOWORD(v1288) = 1;
    *(_BYTE *)(v1223 + 320) = 0;
    *(_DWORD *)(v1223 + 664) = 0;
    v773 = *(unsigned int *)(v1223 + 776);
    if ((_DWORD)v773)
    {
      v774 = *(_QWORD *)(v1223 + 768);
      v775 = 56 * v773;
      do
      {
        if (*(char *)(v774 + v775 - 9) < 0)
          operator delete(*(void **)(v774 + v775 - 32));
        v775 -= 56;
      }
      while (v775);
    }
    *(_DWORD *)(v1223 + 776) = 0;
    sub_22E3B89A8((unsigned __int8 **)&__len, *(void **)(v772 + 24), *(_QWORD *)(v772 + 32));
    v776 = (unsigned __int8 *)__len.__r_.__value_.__r.__words[0];
    if (!__len.__r_.__value_.__r.__words[0])
    {
      v776 = (unsigned __int8 *)sub_22E3B8AAC(__len.__r_.__value_.__l.__size_);
      __len.__r_.__value_.__r.__words[0] = (std::string::size_type)v776;
    }
    v776[*v776 + 1] = 1;
    v777 = __len.__r_.__value_.__r.__words[0];
    v778 = *__len.__r_.__value_.__l.__data_;
    *__len.__r_.__value_.__l.__data_ = v778 + 1;
    *(_QWORD *)(v777 + 8 * v778 + 16) = "-fptrauth-objc-isa-mode=sign-and-auth";
    sub_22E3BB0B8((uint64_t)&__len);
  }
  v779 = sub_22E6EBFB4((uint64_t)&v1283, 1561);
  v769 = v1211;
  v780 = *(unsigned __int16 *)(v1211 + 16) | (unint64_t)((uint64_t)*(char *)(v1211 + 18) << 16);
  v781 = *(_QWORD *)(v1211 + 8);
  v782 = *(_WORD *)(v1211 + 16) & 0xFFDF | (*(char *)(v1211 + 18) << 16) | (32 * (v779 != 0));
  *(_WORD *)(v1211 + 16) = *(_WORD *)(v1211 + 16) & 0xFFDF | (32 * (v779 != 0));
  if (v781 < 0 && v779)
  {
    if ((v780 & 0x8000000000000000) != 0)
    {
      v783 = v782 & 0xC0003F;
      v784 = v783 | 0x280;
    }
    else
    {
      if (v1232 != 3)
        goto LABEL_1798;
      v783 = v782 & 0xC0003F;
      v784 = v783 | 0xC0;
    }
    *(_QWORD *)(v1211 + 8) = v781;
    *(_BYTE *)(v1211 + 18) = BYTE2(v783);
    *(_WORD *)(v1211 + 16) = v784;
  }
LABEL_1798:
  v1225 = &v685[12].__r_.__value_.__s.__data_[16];
  sub_22E6F4E60(v769, (uint64_t)&v1283, v1218, v1230, (_QWORD *)(v685[2].__r_.__value_.__l.__size_ + 24), v1223);
  if (LODWORD(v685[108].__r_.__value_.__r.__words[2]) == 30)
    *(_QWORD *)(v769 + 8) |= 0x200000000000uLL;
  *(_QWORD *)(v769 + 208) = *(_QWORD *)(v769 + 208) & 0xFFFFFFFDFFFFFFFFLL | ((unint64_t)(sub_22E6EBFB4((uint64_t)&v1283, 1556) != 0) << 33);
  if (sub_22E6EBFB4((uint64_t)&v1283, 1429))
  {
    v685[13].__r_.__value_.__r.__words[2] |= 0x200uLL;
    *(_QWORD *)(v769 + 208) |= 0x400000000uLL;
  }
  *(_QWORD *)(v769 + 208) = *(_QWORD *)(v769 + 208) & 0xFFFFFFF7FFFFFFFFLL | ((unint64_t)(sub_22E6EBFB4((uint64_t)&v1283, 1701) != 0) << 35);
  v785 = v685[1].__r_.__value_.__l.__size_;
  v786 = *(__int128 **)(v785 + 96);
  for (k = *(__int128 **)(v785 + 104); v786 != k; v786 = (__int128 *)((char *)v786 + 24))
  {
    if (*((char *)v786 + 23) < 0)
    {
      sub_22E3BB2B4(&__len, *(void **)v786, *((_QWORD *)v786 + 1));
    }
    else
    {
      v788 = *v786;
      __len.__r_.__value_.__r.__words[2] = *((_QWORD *)v786 + 2);
      *(_OWORD *)&__len.__r_.__value_.__l.__data_ = v788;
    }
    v789 = HIBYTE(__len.__r_.__value_.__r.__words[2]);
    if ((__len.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v790 = *((_BYTE *)&__len.__r_.__value_.__s + 23) & 0x7F;
    else
      v790 = __len.__r_.__value_.__l.__size_;
    if (v790 == 9)
    {
      v791 = (__len.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? HIBYTE(__len.__r_.__value_.__r.__words[2])
           : __len.__r_.__value_.__l.__size_;
      v792 = (__len.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &__len
           : (std::string *)__len.__r_.__value_.__r.__words[0];
      v793 = v791 >= 9 ? 9 : v791;
      v794 = !memcmp(v792, "misexpect", v793) && v791 == 9;
      if (v794 && sub_22F1CF68C(*(_QWORD *)(v1223 + 32), 0x380u, 0, v1223) != 1)
        v685[13].__r_.__value_.__l.__size_ |= 0x40000000000000uLL;
    }
    if (v789 < 0)
      operator delete(__len.__r_.__value_.__l.__data_);
  }
  if ((*(_BYTE *)(v1211 + 68) & 0x20) != 0 && (*(_WORD *)(v1211 + 96) & 0x80) != 0)
    std::string::operator=((std::string *)(v685->__r_.__value_.__r.__words[2] + 24), v685 + 125);
  if ((*(_BYTE *)(v1211 + 76) & 8) != 0)
    std::string::operator=((std::string *)(v685->__r_.__value_.__r.__words[2] + 24), v685 + 125);
  v1213 = &v685[12].__r_.__value_.__l.__size_;
  sub_22E6E0AC0((uint64_t)&v685[12].__r_.__value_.__l.__size_, (uint64_t)&v1283, v1218, v1223, (uint64_t)v1230, (uint64_t)&v685[104].__r_.__value_.__l.__size_, v1211, (uint64_t)&v1219[92].__r_.__value_.__l.__size_, (uint64_t)v1222, v1210);
  v795 = -67108865;
  if ((*(_QWORD *)(v1211 + 256) & 0x609) == 0)
    v795 = -1;
  v685[12].__r_.__value_.__l.__size_ &= v795;
  v796 = v685[2].__r_.__value_.__l.__size_;
  v1216 = v685[108].__r_.__value_.__r.__words[2];
  v797 = *(_QWORD *)(v796 + 48);
  memset(&v1259, 0, sizeof(v1259));
  sub_22E618148(&v1259, v797, *(_QWORD *)(v796 + 56), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v796 + 56) - v797) >> 3));
  memset(&v1257, 0, sizeof(v1257));
  memset(&__len, 0, sizeof(__len));
  sub_22E63B344((void **)(v796 + 48));
  *(std::string *)(v796 + 48) = __len;
  memset(&__len, 0, sizeof(__len));
  *(_QWORD *)v1267 = &__len;
  sub_22E3B3CC8((void ***)v1267);
  *(_QWORD *)v1267 = &v1257;
  sub_22E3B3CC8((void ***)v1267);
  *(_QWORD *)v1267 = &v1259;
  sub_22E3B3CC8((void ***)v1267);
  llvm::opt::ArgList::getAllArgValues();
  __len = *(std::string *)v1267;
  memset(v1267, 0, 24);
  LOBYTE(v1288) = 1;
  v1286[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1267;
  sub_22E3B3CC8((void ***)v1286);
  if ((_BYTE)v1288)
  {
    memset(&__src, 0, sizeof(__src));
    sub_22E618148(&__src, *(_QWORD *)(v796 + 48), *(_QWORD *)(v796 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v796 + 56) - *(_QWORD *)(v796 + 48)) >> 3));
    v1265[1] = 0;
    v1265[0] = 0;
    *(_QWORD *)&v1266 = 0;
    sub_22E618148(v1265, (uint64_t)__len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__len.__r_.__value_.__l.__size_ - __len.__r_.__value_.__r.__words[0]) >> 3));
    memset(v1267, 0, 24);
    sub_22E618148(v1267, (uint64_t)v1265[0], (uint64_t)v1265[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v1265[1] - (char *)v1265[0]) >> 3));
    sub_22E63B344((void **)(v796 + 48));
    *(_OWORD *)(v796 + 48) = *(_OWORD *)v1267;
    *(_QWORD *)(v796 + 64) = *(_QWORD *)&v1267[16];
    memset(v1267, 0, 24);
    v1286[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1267;
    sub_22E3B3CC8((void ***)v1286);
    v1286[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1265;
    sub_22E3B3CC8((void ***)v1286);
    v1286[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__src;
    sub_22E3B3CC8((void ***)v1286);
    if ((_BYTE)v1288)
    {
      *(_QWORD *)v1267 = &__len;
      sub_22E3B3CC8((void ***)v1267);
    }
  }
  v798 = (void **)(v796 + 104);
  if (*(char *)(v796 + 127) < 0)
  {
    sub_22E3BB2B4(&v1282, *(void **)(v796 + 104), *(_QWORD *)(v796 + 112));
    v799 = *(char *)(v796 + 127);
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
    if (v799 < 0)
      operator delete(*v798);
  }
  else
  {
    *(_OWORD *)&v1282.__r_.__value_.__l.__data_ = *(_OWORD *)v798;
    v1282.__r_.__value_.__r.__words[2] = *(_QWORD *)(v796 + 120);
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
  }
  *v798 = 0;
  *(_QWORD *)(v796 + 112) = 0;
  *(_DWORD *)(v796 + 120) = __len.__r_.__value_.__l.__data_;
  *(_DWORD *)(v796 + 123) = *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3);
  *(_BYTE *)(v796 + 127) = 0;
  if (SHIBYTE(v1282.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1282.__r_.__value_.__l.__data_);
  sub_22E6EC3DC((uint64_t)&__len, 2010, (uint64_t)&v1283);
  if ((_BYTE)v1288)
  {
    if (*(char *)(v796 + 127) < 0)
    {
      sub_22E3BB2B4(&v1281, *(void **)(v796 + 104), *(_QWORD *)(v796 + 112));
    }
    else
    {
      *(_OWORD *)&v1281.__r_.__value_.__l.__data_ = *(_OWORD *)v798;
      v1281.__r_.__value_.__r.__words[2] = *(_QWORD *)(v796 + 120);
    }
    v800 = SHIBYTE(__len.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&__dst, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
    else
      __dst = __len;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(v1267, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      *(std::string *)v1267 = __dst;
    if (*(char *)(v796 + 127) < 0)
      operator delete(*v798);
    *(_OWORD *)v798 = *(_OWORD *)v1267;
    *(_QWORD *)(v796 + 120) = *(_QWORD *)&v1267[16];
    v1267[23] = 0;
    v1267[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1281.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v1281.__r_.__value_.__l.__data_);
      if ((v800 & 0x80000000) == 0)
        goto LABEL_1861;
    }
    else if ((v800 & 0x80000000) == 0)
    {
      goto LABEL_1861;
    }
    operator delete(__len.__r_.__value_.__l.__data_);
  }
LABEL_1861:
  *(_BYTE *)(v796 + 72) = 1;
  if (sub_22E721714((uint64_t)&v1283, 3043))
    *(_BYTE *)(v796 + 72) = 0;
  v801 = (void **)(v796 + 80);
  if (*(char *)(v796 + 103) < 0)
  {
    sub_22E3BB2B4(&__s2, *(void **)(v796 + 80), *(_QWORD *)(v796 + 88));
    v802 = *(char *)(v796 + 103);
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
    if (v802 < 0)
      operator delete(*v801);
  }
  else
  {
    *(_OWORD *)&__s2.__r_.__value_.__l.__data_ = *(_OWORD *)v801;
    __s2.__r_.__value_.__r.__words[2] = *(_QWORD *)(v796 + 96);
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
  }
  *v801 = 0;
  *(_QWORD *)(v796 + 88) = 0;
  *(_DWORD *)(v796 + 96) = __len.__r_.__value_.__l.__data_;
  *(_DWORD *)(v796 + 99) = *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3);
  *(_BYTE *)(v796 + 103) = 0;
  if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s2.__r_.__value_.__l.__data_);
  sub_22E6EC3DC((uint64_t)&__len, 2831, (uint64_t)&v1283);
  if ((_BYTE)v1288)
  {
    if (*(char *)(v796 + 103) < 0)
    {
      sub_22E3BB2B4(v1277, *(void **)(v796 + 80), *(_QWORD *)(v796 + 88));
    }
    else
    {
      *(_OWORD *)v1277 = *(_OWORD *)v801;
      v1278 = *(std::string::pointer *)(v796 + 96);
    }
    v803 = SHIBYTE(__len.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v1276, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
    else
      v1276 = __len;
    if (SHIBYTE(v1276.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(v1267, v1276.__r_.__value_.__l.__data_, v1276.__r_.__value_.__l.__size_);
    else
      *(std::string *)v1267 = v1276;
    if (*(char *)(v796 + 103) < 0)
      operator delete(*v801);
    *(_OWORD *)v801 = *(_OWORD *)v1267;
    *(_QWORD *)(v796 + 96) = *(_QWORD *)&v1267[16];
    v1267[23] = 0;
    v1267[0] = 0;
    if (SHIBYTE(v1276.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1276.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1278) < 0)
    {
      operator delete(v1277[0]);
      if ((v803 & 0x80000000) == 0)
        goto LABEL_1887;
    }
    else if ((v803 & 0x80000000) == 0)
    {
      goto LABEL_1887;
    }
    operator delete(__len.__r_.__value_.__l.__data_);
  }
LABEL_1887:
  *(_BYTE *)(v796 + 75) = 0;
  if (sub_22E721714((uint64_t)&v1283, 2829))
    *(_BYTE *)(v796 + 75) = 1;
  *(_DWORD *)(v796 + 252) = 0;
  v804 = sub_22E6EC1FC(1408, 0x29u, (uint64_t)&v1283, v1223);
  if (HIDWORD(v804))
    *(_DWORD *)(v796 + 252) = v804;
  *(_DWORD *)(v796 + 152) = 0;
  if (sub_22E721714((uint64_t)&v1283, 1375))
    *(_DWORD *)(v796 + 152) = 3;
  *(_BYTE *)(v796 + 156) = 0;
  *(_BYTE *)(v796 + 156) = *v1222 < 0;
  if (sub_22E721714((uint64_t)&v1283, 396))
    *(_BYTE *)(v796 + 156) = 1;
  *(_BYTE *)(v796 + 157) = 0;
  if (sub_22E721714((uint64_t)&v1283, 397))
    *(_BYTE *)(v796 + 157) = 1;
  *(_BYTE *)(v796 + 158) = 0;
  if (sub_22E721714((uint64_t)&v1283, 299))
    *(_BYTE *)(v796 + 158) = 1;
  *(_BYTE *)(v796 + 73) = 0;
  if (sub_22E721714((uint64_t)&v1283, 276))
    *(_BYTE *)(v796 + 73) = 1;
  *(_BYTE *)(v796 + 304) = 0;
  if (sub_22E721714((uint64_t)&v1283, 2953))
    *(_BYTE *)(v796 + 304) = 1;
  *(_BYTE *)(v796 + 305) = 0;
  if (sub_22E721714((uint64_t)&v1283, 289))
    *(_BYTE *)(v796 + 305) = 1;
  if (sub_22E6EBFB4((uint64_t)&v1283, 2829))
    v805 = 1;
  else
    v805 = sub_22E6EBFB4((uint64_t)&v1283, 2830) != 0;
  *(_BYTE *)(v796 + 74) = v805;
  sub_22E70B070((uint64_t)&v1283, 354, (uint64_t)&__len);
  *(std::string *)v1267 = __len;
  v806 = v1288;
  v807 = __len.__r_.__value_.__r.__words[0];
  if (__len.__r_.__value_.__l.__data_ != v1288)
  {
    do
    {
      v808 = **(const char ***)(*(_QWORD *)v807 + 48);
      v809 = strlen(v808);
      if (v809 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_2709;
      v810 = v809;
      if (v809 >= 0x17)
      {
        v812 = (v809 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v809 | 7) != 0x17)
          v812 = v809 | 7;
        v813 = v812 + 1;
        v811 = (std::string *)operator new(v812 + 1);
        v1286[0].__r_.__value_.__r.__words[2] = v813 | 0x8000000000000000;
        v1286[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v811;
        v1286[0].__r_.__value_.__l.__size_ = v810;
      }
      else
      {
        *((_BYTE *)&v1286[0].__r_.__value_.__s + 23) = v809;
        v811 = v1286;
        if (!v809)
          goto LABEL_1917;
      }
      memmove(v811, v808, v810);
LABEL_1917:
      v811->__r_.__value_.__s.__data_[v810] = 0;
      sub_22E7243E0(v796 + 160, (const void **)&v1286[0].__r_.__value_.__l.__data_, (uint64_t)v1286);
      if (SHIBYTE(v1286[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1286[0].__r_.__value_.__l.__data_);
      *(_QWORD *)v1267 += 8;
      sub_22E721830((uint64_t)v1267);
      v807 = *(_QWORD *)v1267;
    }
    while (*(std::string::pointer *)v1267 != v806);
  }
  v814 = sub_22E6EBFB4((uint64_t)&v1283, 2843);
  if (v814)
  {
    v815 = *(const char ***)(v814 + 48);
    v816 = (char *)*v815;
    if (!*v815)
      goto LABEL_1935;
    v817 = strlen(*v815);
    if (!v817)
      goto LABEL_1935;
    v818 = memchr(v816, 44, v817);
    if (!v818 || v818 - v816 == -1)
      goto LABEL_1935;
    __len.__r_.__value_.__r.__words[0] = 0;
    AsUnsignedInteger = llvm::getAsUnsignedInteger();
    v820 = 0;
    if (__len.__r_.__value_.__r.__words[0] < 0x100000000)
      v820 = (int)__len.__r_.__value_.__l.__data_;
    v821 = AsUnsignedInteger ? 0 : v820;
    if ((AsUnsignedInteger & 1) != 0
      || HIDWORD(__len.__r_.__value_.__r.__words[0])
      || (__len.__r_.__value_.__r.__words[0] = 0, (llvm::getAsUnsignedInteger() & 1) != 0)
      || (v822 = __len.__r_.__value_.__r.__words[0], HIDWORD(__len.__r_.__value_.__r.__words[0])))
    {
LABEL_1935:
      *(_QWORD *)(v1223 + 312) = 0x1B200000000;
      if (*(char *)(v1223 + 311) < 0)
      {
        **(_BYTE **)(v1223 + 288) = 0;
        *(_QWORD *)(v1223 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v1223 + 288) = 0;
        *(_BYTE *)(v1223 + 311) = 0;
      }
      *(_OWORD *)&v1286[0].__r_.__value_.__l.__data_ = (unint64_t)(v1223 + 320);
      v1286[0].__r_.__value_.__r.__words[2] = v1223;
      LOWORD(v1286[1].__r_.__value_.__l.__data_) = 1;
      *(_BYTE *)(v1223 + 320) = 0;
      *(_DWORD *)(v1223 + 664) = 0;
      v823 = *(unsigned int *)(v1223 + 776);
      if ((_DWORD)v823)
      {
        v824 = *(_QWORD *)(v1223 + 768);
        v825 = 56 * v823;
        do
        {
          if (*(char *)(v824 + v825 - 9) < 0)
            operator delete(*(void **)(v824 + v825 - 32));
          v825 -= 56;
        }
        while (v825);
      }
      *(_DWORD *)(v1223 + 776) = 0;
      sub_22E3BB0B8((uint64_t)v1286);
    }
    else
    {
      *(_DWORD *)(v796 + 184) = v821;
      *(_BYTE *)(v796 + 188) = v822 != 0;
    }
  }
  v826 = sub_22E6EBFB4((uint64_t)&v1283, 477);
  if (v826)
  {
    v827 = *(const char ***)(v826 + 48);
    v828 = *v827;
    if (*v827)
    {
      v829 = strlen(*v827);
      if (v829 == 4)
      {
        if (*(_DWORD *)v828 != 1819047270)
          goto LABEL_1964;
        v832 = "__CET__=3";
      }
      else
      {
        if (v829 != 6)
          goto LABEL_1964;
        if (*(_DWORD *)v828 == 1851880034 && *((_WORD *)v828 + 2) == 26723)
        {
          v832 = "__CET__=1";
        }
        else
        {
          if (*(_DWORD *)v828 != 1970562418 || *((_WORD *)v828 + 2) != 28274)
            goto LABEL_1964;
          v832 = "__CET__=2";
        }
      }
      sub_22E7246B8((int64x2_t *)v796, v832, 9uLL);
    }
  }
LABEL_1964:
  if (sub_22E6EBFB4((uint64_t)&v1283, 1762))
    sub_22E7246B8((int64x2_t *)v796, "__TRACEPOINT_INSTRUMENTED__", 0x1BuLL);
  sub_22E6ECFB0((uint64_t)&v1283, 0x13Eu, 0xBEAu, (uint64_t)&__len);
  v1275 = __len;
  v833 = v1288;
  for (m = (uint64_t *)__len.__r_.__value_.__r.__words[0];
        v1275.__r_.__value_.__l.__data_ != v833;
        m = (uint64_t *)v1275.__r_.__value_.__r.__words[0])
  {
    v835 = *m;
    v836 = llvm::opt::Option::matches();
    v837 = *(const char ***)(v835 + 48);
    v838 = (char *)*v837;
    if (v836)
    {
      if (v838)
        v839 = strlen(*v837);
      else
        v839 = 0;
      sub_22E7246B8((int64x2_t *)v796, v838, v839);
      goto LABEL_1998;
    }
    if (v838)
    {
      v840 = strlen(*v837);
      if (v840 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_2709;
      v841 = v840;
      if (v840 >= 0x17)
      {
        v843 = (v840 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v840 | 7) != 0x17)
          v843 = v840 | 7;
        v844 = v843 + 1;
        v842 = (std::string *)operator new(v843 + 1);
        __p.__r_.__value_.__r.__words[2] = v844 | 0x8000000000000000;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v842;
        __p.__r_.__value_.__l.__size_ = v841;
      }
      else
      {
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v840;
        v842 = &__p;
        if (!v840)
          goto LABEL_1982;
      }
      memmove(v842, v838, v841);
    }
    else
    {
      v841 = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      v842 = &__p;
    }
LABEL_1982:
    v842->__r_.__value_.__s.__data_[v841] = 0;
    v845 = *(std::string **)(v796 + 8);
    v846 = *(_QWORD *)(v796 + 16);
    if ((unint64_t)v845 >= v846)
    {
      v848 = *(std::string **)v796;
      v849 = ((uint64_t)v845 - *(_QWORD *)v796) >> 5;
      v850 = v849 + 1;
      if ((unint64_t)(v849 + 1) >> 59)
        goto LABEL_2709;
      if ((uint64_t)(v846 - (_QWORD)v848) >> 4 > v850)
        v850 = (uint64_t)(v846 - (_QWORD)v848) >> 4;
      if (v846 - (unint64_t)v848 >= 0x7FFFFFFFFFFFFFE0)
        v851 = 0x7FFFFFFFFFFFFFFLL;
      else
        v851 = v850;
      v1268 = (std::string *)(v796 + 16);
      if (v851 >> 59)
        goto LABEL_2710;
      v852 = (char *)operator new(32 * v851);
      v853 = (std::string *)&v852[32 * v849];
      *v853 = __p;
      v853[1].__r_.__value_.__s.__data_[0] = 1;
      if (v845 == v848)
      {
        v856 = v845;
        v854 = &v852[32 * v849];
        v685 = v1219;
      }
      else
      {
        v854 = &v852[32 * v849];
        v685 = v1219;
        do
        {
          v855 = *(_OWORD *)&v845[-2].__r_.__value_.__r.__words[2];
          *((_QWORD *)v854 - 2) = v845[-1].__r_.__value_.__l.__size_;
          *((_OWORD *)v854 - 2) = v855;
          v845[-1].__r_.__value_.__r.__words[0] = 0;
          v845[-1].__r_.__value_.__l.__size_ = 0;
          v845[-2].__r_.__value_.__r.__words[2] = 0;
          *(v854 - 8) = v845[-1].__r_.__value_.__s.__data_[16];
          v854 -= 32;
          v845 = (std::string *)((char *)v845 - 32);
        }
        while (v845 != v848);
        v856 = *(std::string **)v796;
        v845 = *(std::string **)(v796 + 8);
        v846 = *(_QWORD *)(v796 + 16);
      }
      v847 = &v853[1].__r_.__value_.__s.__data_[8];
      *(_QWORD *)v796 = v854;
      *(_QWORD *)&v1267[8] = v856;
      *(_QWORD *)(v796 + 8) = (char *)v853 + 32;
      *(_QWORD *)&v1267[16] = v845;
      *(_QWORD *)(v796 + 16) = &v852[32 * v851];
      *(_QWORD *)&v1267[24] = v846;
      *(_QWORD *)v1267 = v856;
      sub_22E3B3F98((uint64_t)v1267);
    }
    else
    {
      *v845 = __p;
      v845[1].__r_.__value_.__s.__data_[0] = 1;
      v847 = &v845[1].__r_.__value_.__s.__data_[8];
    }
    *(_QWORD *)(v796 + 8) = v847;
LABEL_1998:
    v1275.__r_.__value_.__r.__words[0] += 8;
    sub_22E7219D8((uint64_t)&v1275);
  }
  sub_22E70B070((uint64_t)&v1283, 2020, (uint64_t)&__len);
  *(std::string *)v1267 = __len;
  v857 = v1288;
  v858 = __len.__r_.__value_.__r.__words[0];
  if (__len.__r_.__value_.__l.__data_ != v1288)
  {
    do
    {
      __p.__r_.__value_.__r.__words[0] = **(_QWORD **)(*(_QWORD *)v858 + 48);
      sub_22F2A98D0((int64x2_t *)(v796 + 24), (const char **)&__p.__r_.__value_.__l.__data_);
      *(_QWORD *)v1267 += 8;
      sub_22E721830((uint64_t)v1267);
      v858 = *(_QWORD *)v1267;
    }
    while (*(std::string::pointer *)v1267 != v857);
  }
  sub_22E70B070((uint64_t)&v1283, 183, (uint64_t)&__len);
  *(std::string *)v1267 = __len;
  v859 = v1288;
  v860 = __len.__r_.__value_.__r.__words[0];
  v861 = v1223;
  if (__len.__r_.__value_.__l.__data_ != v1288)
  {
    do
    {
      __p.__r_.__value_.__r.__words[0] = **(_QWORD **)(*(_QWORD *)v860 + 48);
      sub_22F2A98D0((int64x2_t *)(v796 + 128), (const char **)&__p.__r_.__value_.__l.__data_);
      *(_QWORD *)v1267 += 8;
      sub_22E721830((uint64_t)v1267);
      v860 = *(_QWORD *)v1267;
    }
    while (*(std::string::pointer *)v1267 != v859);
  }
  sub_22E70B070((uint64_t)&v1283, 2907, (uint64_t)&__len);
  v1275 = __len;
  v862 = v1288;
  v863 = __len.__r_.__value_.__r.__words[0];
  if (__len.__r_.__value_.__l.__data_ != v1288)
  {
    while (1)
    {
      v864 = **(const char ***)(*(_QWORD *)v863 + 48);
      *(_QWORD *)v1267 = v864;
      if (v864)
        v864 = (const char *)strlen(v864);
      *(_QWORD *)&v1267[8] = v864;
      __p.__r_.__value_.__s.__data_[0] = 59;
      v865 = llvm::StringRef::find();
      if (v865 == -1
        || (v866 = *(_QWORD *)&v1267[8],
            v867 = v865 + 1,
            v868 = *(_QWORD *)&v1267[8] - (v865 + 1),
            *(_QWORD *)&v1267[8] <= v865 + 1))
      {
        v861 = v1223;
        *(_QWORD *)(v1223 + 312) = 0x18100000000;
        if (*(char *)(v1223 + 311) < 0)
        {
          **(_BYTE **)(v1223 + 288) = 0;
          *(_QWORD *)(v1223 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v1223 + 288) = 0;
          *(_BYTE *)(v1223 + 311) = 0;
        }
        *(_QWORD *)v1267 = v1223 + 320;
        *(_QWORD *)&v1267[8] = 0;
        *(_QWORD *)&v1267[16] = v1223;
        *(_WORD *)&v1267[24] = 1;
        *(_BYTE *)(v1223 + 320) = 0;
        *(_DWORD *)(v1223 + 664) = 0;
        v872 = *(unsigned int *)(v1223 + 776);
        if ((_DWORD)v872)
        {
          v873 = *(_QWORD *)(v1223 + 768);
          v874 = 56 * v872;
          do
          {
            if (*(char *)(v873 + v874 - 9) < 0)
              operator delete(*(void **)(v873 + v874 - 32));
            v874 -= 56;
          }
          while (v874);
        }
        *(_DWORD *)(v1223 + 776) = 0;
        llvm::opt::Arg::getAsString();
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v875 = &__p;
        else
          v875 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v876 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
        else
          v876 = __p.__r_.__value_.__l.__size_;
        sub_22E3B89A8((unsigned __int8 **)v1267, v875, v876);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        sub_22E3BB0B8((uint64_t)v1267);
        goto LABEL_2050;
      }
      if (*(_QWORD *)&v1267[8] >= v865)
        v869 = v865;
      else
        v869 = *(_QWORD *)&v1267[8];
      if (v869 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_2709;
      v870 = *(char **)v1267;
      if (v869 >= 0x17)
        break;
      v1267[23] = v869;
      v871 = v1267;
      if (v869)
        goto LABEL_2035;
LABEL_2036:
      v871[v869] = 0;
      if (v868 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_2709;
      v685 = v1219;
      if (v868 >= 0x17)
      {
        v880 = (v868 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v868 | 7) != 0x17)
          v880 = v868 | 7;
        v881 = v880 + 1;
        v879 = (std::string *)operator new(v880 + 1);
        __p.__r_.__value_.__r.__words[2] = v881 | 0x8000000000000000;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v879;
        __p.__r_.__value_.__l.__size_ = v868;
      }
      else
      {
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v868;
        v879 = &__p;
        if (v866 == v867)
          goto LABEL_2044;
      }
      memmove(v879, &v870[v867], v868);
LABEL_2044:
      v879->__r_.__value_.__s.__data_[v868] = 0;
      v882 = *(_QWORD *)(v796 + 208);
      if (v882 >= *(_QWORD *)(v796 + 216))
      {
        v884 = sub_22E579F98((void **)(v796 + 200), (uint64_t)v1267, (uint64_t)&__p);
        v885 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(_QWORD *)(v796 + 208) = v884;
        v861 = v1223;
        if (v885 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v883 = *(_OWORD *)v1267;
        *(_QWORD *)(v882 + 16) = *(_QWORD *)&v1267[16];
        *(_OWORD *)v882 = v883;
        memset(v1267, 0, 24);
        *(std::string *)(v882 + 24) = __p;
        *(_QWORD *)(v796 + 208) = v882 + 48;
        v861 = v1223;
      }
      if ((v1267[23] & 0x80000000) != 0)
        operator delete(*(void **)v1267);
LABEL_2050:
      v1275.__r_.__value_.__r.__words[0] += 8;
      sub_22E721830((uint64_t)&v1275);
      v863 = v1275.__r_.__value_.__r.__words[0];
      if (v1275.__r_.__value_.__l.__data_ == v862)
        goto LABEL_2051;
    }
    v877 = (v869 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v869 | 7) != 0x17)
      v877 = v869 | 7;
    v878 = v877 + 1;
    v871 = operator new(v877 + 1);
    *(_QWORD *)&v1267[16] = v878 | 0x8000000000000000;
    *(_QWORD *)v1267 = v871;
    *(_QWORD *)&v1267[8] = v869;
LABEL_2035:
    memmove(v871, v870, v869);
    goto LABEL_2036;
  }
LABEL_2051:
  if (((1 << v1216) & 0x7C7BFFF8FLL) == 0)
    *(_BYTE *)(v796 + 195) = 0;
  v886 = v685[108].__r_.__value_.__r.__words[2];
  LOWORD(v685[130].__r_.__value_.__l.__data_) &= ~0x10u;
  v887 = sub_22E721714((uint64_t)&v1283, 178);
  v888 = (__int16)v685[130].__r_.__value_.__l.__data_;
  if (v887)
    v888 |= 0x10u;
  LOWORD(v685[130].__r_.__value_.__l.__data_) = v888 & 0xFFFD;
  v889 = sub_22E721714((uint64_t)&v1283, 247);
  v890 = (__int16)v685[130].__r_.__value_.__l.__data_;
  if (v889)
    v890 |= 2u;
  LOWORD(v685[130].__r_.__value_.__l.__data_) = v890 | 4;
  v891 = sub_22E721714((uint64_t)&v1283, 2881);
  v892 = (__int16)v685[130].__r_.__value_.__l.__data_;
  if (v891)
    v892 &= 0xFFBBu;
  LOWORD(v685[130].__r_.__value_.__l.__data_) = v892 & 0xFFBF;
  v893 = sub_22E721714((uint64_t)&v1283, 292);
  v894 = (__int16)v685[130].__r_.__value_.__l.__data_;
  if (v893)
    v894 |= 0x40u;
  LOWORD(v685[130].__r_.__value_.__l.__data_) = v894 & 0xFEFF;
  if (sub_22E721888((uint64_t)&v1283, 0x643u, 0x4E2u))
  {
    if (llvm::opt::Option::matches())
      v895 = 256;
    else
      v895 = 0;
    v896 = (uint64_t)v685[130].__r_.__value_.__l.__data_ & 0xFEFF | v895;
  }
  else
  {
    v896 = (__int16)v685[130].__r_.__value_.__l.__data_;
  }
  LOWORD(v685[130].__r_.__value_.__l.__data_) = v896 & 0xFF7F;
  if (sub_22E721888((uint64_t)&v1283, 0x644u, 0x4E3u))
  {
    if (llvm::opt::Option::matches())
      v897 = 128;
    else
      v897 = 0;
    v898 = (uint64_t)v685[130].__r_.__value_.__l.__data_ & 0xFF7F | v897;
  }
  else
  {
    v898 = (__int16)v685[130].__r_.__value_.__l.__data_;
  }
  LOWORD(v685[130].__r_.__value_.__l.__data_) = v898 & 0xFFF7;
  if (sub_22E721888((uint64_t)&v1283, 0x712u, 0x55Du))
  {
    if (llvm::opt::Option::matches())
      v899 = 8;
    else
      v899 = 0;
    v900 = (uint64_t)v685[130].__r_.__value_.__l.__data_ & 0xFFF7 | v899;
  }
  else
  {
    v900 = (__int16)v685[130].__r_.__value_.__l.__data_;
  }
  LOWORD(v685[130].__r_.__value_.__l.__data_) = v900 & 0xFDFF;
  if (sub_22E721888((uint64_t)&v1283, 0x365u, 0x464u))
  {
    if (llvm::opt::Option::matches())
      v901 = 512;
    else
      v901 = 0;
    LOWORD(v685[130].__r_.__value_.__l.__data_) = (uint64_t)v685[130].__r_.__value_.__l.__data_ & 0xFDFF | v901;
  }
  v902 = 0;
  if (((1 << v886) & 0x7C7BFFF8FLL) == 0)
    v902 = sub_22E6EBFB4((uint64_t)&v1283, 293) == 0;
  LOWORD(v685[130].__r_.__value_.__l.__data_) = (uint64_t)v685[130].__r_.__value_.__l.__data_ & 0xFFFE | v902;
  if (sub_22E6EBFB4((uint64_t)&v1283, 293))
    v903 = 32;
  else
    v903 = 32 * (sub_22E6EBFB4((uint64_t)&v1283, 260) != 0);
  LOWORD(v685[130].__r_.__value_.__l.__data_) = (uint64_t)v685[130].__r_.__value_.__l.__data_ & 0xFFDF | v903;
  v904 = sub_22E6EBFB4((uint64_t)&v1283, 611) != 0;
  v905 = (__int16)v685[130].__r_.__value_.__l.__data_;
  LOWORD(v685[130].__r_.__value_.__l.__data_) = v905 & 0xFBFF | (v904 << 10);
  v906 = v685[108].__r_.__value_.__r.__words[2];
  v685[84].__r_.__value_.__s.__data_[8] &= ~2u;
  v907 = sub_22E721714((uint64_t)&v1283, 1991);
  v908 = v685[84].__r_.__value_.__s.__data_[8];
  if (v907)
    v908 |= 2u;
  v685[84].__r_.__value_.__s.__data_[8] = v908 & 0xBF;
  v909 = sub_22E721714((uint64_t)&v1283, 1687);
  v910 = v685[84].__r_.__value_.__s.__data_[8];
  if (v909)
    v910 |= 0x40u;
  v685[84].__r_.__value_.__s.__data_[8] = v910 & 0xF7;
  v911 = sub_22E721714((uint64_t)&v1283, 2224);
  v912 = v685[84].__r_.__value_.__s.__data_[8];
  if (v911)
    v912 |= 8u;
  v685[84].__r_.__value_.__s.__data_[8] = v912 & 0xFB;
  if (sub_22E721714((uint64_t)&v1283, 2567))
    v685[84].__r_.__value_.__s.__data_[8] |= 4u;
  memset(v1286, 0, 24);
  sub_22E618148(v1286, v685[87].__r_.__value_.__l.__size_, v685[87].__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v685[87].__r_.__value_.__r.__words[2] - v685[87].__r_.__value_.__l.__size_) >> 3));
  memset(&__p, 0, sizeof(__p));
  memset(&__len, 0, sizeof(__len));
  sub_22E63B344((void **)&v685[87].__r_.__value_.__l.__size_);
  *(std::string *)((char *)v685 + 2096) = __len;
  memset(&__len, 0, sizeof(__len));
  *(_QWORD *)v1267 = &__len;
  sub_22E3B3CC8((void ***)v1267);
  *(_QWORD *)v1267 = &__p;
  sub_22E3B3CC8((void ***)v1267);
  *(_QWORD *)v1267 = v1286;
  sub_22E3B3CC8((void ***)v1267);
  llvm::opt::ArgList::getAllArgValues();
  __len = *(std::string *)v1267;
  memset(v1267, 0, 24);
  LOBYTE(v1288) = 1;
  v1259.__r_.__value_.__r.__words[0] = (std::string::size_type)v1267;
  sub_22E3B3CC8((void ***)&v1259);
  if ((_BYTE)v1288)
  {
    memset(&v1259, 0, sizeof(v1259));
    sub_22E618148(&v1259, v685[87].__r_.__value_.__l.__size_, v685[87].__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v685[87].__r_.__value_.__r.__words[2] - v685[87].__r_.__value_.__l.__size_) >> 3));
    memset(&v1257, 0, sizeof(v1257));
    sub_22E618148(&v1257, (uint64_t)__len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__len.__r_.__value_.__l.__size_ - __len.__r_.__value_.__r.__words[0]) >> 3));
    memset(v1267, 0, 24);
    sub_22E618148(v1267, (uint64_t)v1257.__r_.__value_.__l.__data_, v1257.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1257.__r_.__value_.__l.__size_ - v1257.__r_.__value_.__r.__words[0]) >> 3));
    sub_22E63B344((void **)&v685[87].__r_.__value_.__l.__size_);
    *(_OWORD *)&v685[87].__r_.__value_.__r.__words[1] = *(_OWORD *)v1267;
    v685[88].__r_.__value_.__r.__words[0] = *(_QWORD *)&v1267[16];
    memset(v1267, 0, 24);
    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v1267;
    sub_22E3B3CC8((void ***)&__src);
    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1257;
    sub_22E3B3CC8((void ***)&__src);
    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1259;
    sub_22E3B3CC8((void ***)&__src);
    if ((_BYTE)v1288)
    {
      *(_QWORD *)v1267 = &__len;
      sub_22E3B3CC8((void ***)v1267);
    }
  }
  LODWORD(v685[85].__r_.__value_.__l.__data_) = 0;
  if (sub_22E721714((uint64_t)&v1283, 2680))
    LODWORD(v685[85].__r_.__value_.__l.__data_) = 1;
  v913 = (void **)&v685[85].__r_.__value_.__l.__size_;
  if (v685[86].__r_.__value_.__s.__data_[7] < 0)
  {
    sub_22E3BB2B4(&__src, (void *)v685[85].__r_.__value_.__l.__size_, v685[85].__r_.__value_.__r.__words[2]);
    v914 = v685[86].__r_.__value_.__s.__data_[7];
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
    if (v914 < 0)
      operator delete(*v913);
  }
  else
  {
    *(_OWORD *)&__src.__r_.__value_.__l.__data_ = *(_OWORD *)v913;
    __src.__r_.__value_.__r.__words[2] = v685[86].__r_.__value_.__r.__words[0];
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
  }
  *v913 = 0;
  v685[85].__r_.__value_.__r.__words[2] = 0;
  LODWORD(v685[86].__r_.__value_.__l.__data_) = __len.__r_.__value_.__l.__data_;
  *(_DWORD *)((char *)v685[86].__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3);
  v685[86].__r_.__value_.__s.__data_[7] = 0;
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
  sub_22E6EC3DC((uint64_t)&__len, 274, (uint64_t)&v1283);
  if ((_BYTE)v1288)
  {
    if (v685[86].__r_.__value_.__s.__data_[7] < 0)
    {
      sub_22E3BB2B4(v1265, (void *)v685[85].__r_.__value_.__l.__size_, v685[85].__r_.__value_.__r.__words[2]);
    }
    else
    {
      *(_OWORD *)v1265 = *(_OWORD *)v913;
      *(_QWORD *)&v1266 = v685[86].__r_.__value_.__l.__data_;
    }
    v915 = SHIBYTE(__len.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v1282, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
    else
      v1282 = __len;
    if (SHIBYTE(v1282.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(v1267, v1282.__r_.__value_.__l.__data_, v1282.__r_.__value_.__l.__size_);
    else
      *(std::string *)v1267 = v1282;
    if (v685[86].__r_.__value_.__s.__data_[7] < 0)
      operator delete(*v913);
    *(_OWORD *)v913 = *(_OWORD *)v1267;
    v685[86].__r_.__value_.__r.__words[0] = *(_QWORD *)&v1267[16];
    v1267[23] = 0;
    v1267[0] = 0;
    if (SHIBYTE(v1282.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1282.__r_.__value_.__l.__data_);
    if (SBYTE7(v1266) < 0)
    {
      operator delete(v1265[0]);
      if ((v915 & 0x80000000) == 0)
        goto LABEL_2124;
    }
    else if ((v915 & 0x80000000) == 0)
    {
      goto LABEL_2124;
    }
    operator delete(__len.__r_.__value_.__l.__data_);
  }
LABEL_2124:
  v916 = (void **)&v685[90].__r_.__value_.__l.__size_;
  if (v685[91].__r_.__value_.__s.__data_[7] < 0)
  {
    sub_22E3BB2B4(&v1281, (void *)v685[90].__r_.__value_.__l.__size_, v685[90].__r_.__value_.__r.__words[2]);
    v917 = v685[91].__r_.__value_.__s.__data_[7];
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
    if (v917 < 0)
      operator delete(*v916);
  }
  else
  {
    *(_OWORD *)&v1281.__r_.__value_.__l.__data_ = *(_OWORD *)v916;
    v1281.__r_.__value_.__r.__words[2] = v685[91].__r_.__value_.__r.__words[0];
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
  }
  *v916 = 0;
  v685[90].__r_.__value_.__r.__words[2] = 0;
  LODWORD(v685[91].__r_.__value_.__l.__data_) = __len.__r_.__value_.__l.__data_;
  *(_DWORD *)((char *)v685[91].__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3);
  v685[91].__r_.__value_.__s.__data_[7] = 0;
  if (SHIBYTE(v1281.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1281.__r_.__value_.__l.__data_);
  sub_22E6EC3DC((uint64_t)&__len, 273, (uint64_t)&v1283);
  if ((_BYTE)v1288)
  {
    if (v685[91].__r_.__value_.__s.__data_[7] < 0)
    {
      sub_22E3BB2B4(&__dst, (void *)v685[90].__r_.__value_.__l.__size_, v685[90].__r_.__value_.__r.__words[2]);
    }
    else
    {
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)v916;
      __dst.__r_.__value_.__r.__words[2] = v685[91].__r_.__value_.__r.__words[0];
    }
    v918 = SHIBYTE(__len.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&__s2, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
    else
      __s2 = __len;
    if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(v1267, __s2.__r_.__value_.__l.__data_, __s2.__r_.__value_.__l.__size_);
    else
      *(std::string *)v1267 = __s2;
    if (v685[91].__r_.__value_.__s.__data_[7] < 0)
      operator delete(*v916);
    *(_OWORD *)v916 = *(_OWORD *)v1267;
    v685[91].__r_.__value_.__r.__words[0] = *(_QWORD *)&v1267[16];
    v1267[23] = 0;
    v1267[0] = 0;
    if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s2.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v918 & 0x80000000) == 0)
        goto LABEL_2148;
    }
    else if ((v918 & 0x80000000) == 0)
    {
      goto LABEL_2148;
    }
    operator delete(__len.__r_.__value_.__l.__data_);
  }
LABEL_2148:
  v919 = (void **)&v685[91].__r_.__value_.__l.__size_;
  if (v685[92].__r_.__value_.__s.__data_[7] < 0)
  {
    sub_22E3BB2B4(v1277, (void *)v685[91].__r_.__value_.__l.__size_, v685[91].__r_.__value_.__r.__words[2]);
    v920 = v685[92].__r_.__value_.__s.__data_[7];
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
    if (v920 < 0)
      operator delete(*v919);
  }
  else
  {
    *(_OWORD *)v1277 = *(_OWORD *)v919;
    v1278 = v685[92].__r_.__value_.__l.__data_;
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
  }
  *v919 = 0;
  v685[91].__r_.__value_.__r.__words[2] = 0;
  LODWORD(v685[92].__r_.__value_.__l.__data_) = __len.__r_.__value_.__l.__data_;
  *(_DWORD *)((char *)v685[92].__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3);
  v685[92].__r_.__value_.__s.__data_[7] = 0;
  if (SHIBYTE(v1278) < 0)
    operator delete(v1277[0]);
  sub_22E6EC3DC((uint64_t)&__len, 2536, (uint64_t)&v1283);
  if ((_BYTE)v1288)
  {
    if (v685[92].__r_.__value_.__s.__data_[7] < 0)
    {
      sub_22E3BB2B4(&v1276, (void *)v685[91].__r_.__value_.__l.__size_, v685[91].__r_.__value_.__r.__words[2]);
    }
    else
    {
      *(_OWORD *)&v1276.__r_.__value_.__l.__data_ = *(_OWORD *)v919;
      v1276.__r_.__value_.__r.__words[2] = v685[92].__r_.__value_.__r.__words[0];
    }
    v921 = SHIBYTE(__len.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v1275, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
    else
      v1275 = __len;
    if (SHIBYTE(v1275.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(v1267, v1275.__r_.__value_.__l.__data_, v1275.__r_.__value_.__l.__size_);
    else
      *(std::string *)v1267 = v1275;
    if (v685[92].__r_.__value_.__s.__data_[7] < 0)
      operator delete(*v919);
    *(_OWORD *)v919 = *(_OWORD *)v1267;
    v685[92].__r_.__value_.__r.__words[0] = *(_QWORD *)&v1267[16];
    v1267[23] = 0;
    v1267[0] = 0;
    if (SHIBYTE(v1275.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1275.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1276.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v1276.__r_.__value_.__l.__data_);
      if ((v921 & 0x80000000) == 0)
        goto LABEL_2172;
    }
    else if ((v921 & 0x80000000) == 0)
    {
      goto LABEL_2172;
    }
    operator delete(__len.__r_.__value_.__l.__data_);
  }
LABEL_2172:
  v685[84].__r_.__value_.__s.__data_[8] &= ~1u;
  v685[84].__r_.__value_.__s.__data_[8] = v685[84].__r_.__value_.__s.__data_[8] & 0xDF | (sub_22E721714((uint64_t)&v1283, 2998) != 0);
  v922 = sub_22E721714((uint64_t)&v1283, 2967);
  v923 = v685[84].__r_.__value_.__s.__data_[8];
  if (v922)
    v923 |= 0x20u;
  v685[84].__r_.__value_.__s.__data_[8] = v923 & 0xEF;
  if (sub_22E721714((uint64_t)&v1283, 2538))
    v685[84].__r_.__value_.__s.__data_[8] |= 0x10u;
  v924 = (void **)&v685[86].__r_.__value_.__l.__size_;
  if (v685[87].__r_.__value_.__s.__data_[7] < 0)
  {
    sub_22E3BB2B4(v1273, (void *)v685[86].__r_.__value_.__l.__size_, v685[86].__r_.__value_.__r.__words[2]);
    v925 = v685[87].__r_.__value_.__s.__data_[7];
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
    if (v925 < 0)
      operator delete(*v924);
  }
  else
  {
    *(_OWORD *)v1273 = *(_OWORD *)v924;
    v1274 = v685[87].__r_.__value_.__l.__data_;
    LODWORD(__len.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3) = 0;
  }
  *v924 = 0;
  v685[86].__r_.__value_.__r.__words[2] = 0;
  LODWORD(v685[87].__r_.__value_.__l.__data_) = __len.__r_.__value_.__l.__data_;
  *(_DWORD *)((char *)v685[87].__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)__len.__r_.__value_.__r.__words + 3);
  v685[87].__r_.__value_.__s.__data_[7] = 0;
  if (SHIBYTE(v1274) < 0)
    operator delete(v1273[0]);
  sub_22E6EC3DC((uint64_t)&__len, 1970, (uint64_t)&v1283);
  if ((_BYTE)v1288)
  {
    if (v685[87].__r_.__value_.__s.__data_[7] < 0)
    {
      sub_22E3BB2B4(&v1272, (void *)v685[86].__r_.__value_.__l.__size_, v685[86].__r_.__value_.__r.__words[2]);
    }
    else
    {
      *(_OWORD *)&v1272.__r_.__value_.__l.__data_ = *(_OWORD *)v924;
      v1272.__r_.__value_.__r.__words[2] = v685[87].__r_.__value_.__r.__words[0];
    }
    v926 = SHIBYTE(__len.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v1271, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
    else
      v1271 = __len;
    if (SHIBYTE(v1271.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(v1267, v1271.__r_.__value_.__l.__data_, v1271.__r_.__value_.__l.__size_);
    else
      *(std::string *)v1267 = v1271;
    if (v685[87].__r_.__value_.__s.__data_[7] < 0)
      operator delete(*v924);
    *(_OWORD *)v924 = *(_OWORD *)v1267;
    v685[87].__r_.__value_.__r.__words[0] = *(_QWORD *)&v1267[16];
    v1267[23] = 0;
    v1267[0] = 0;
    if (SHIBYTE(v1271.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1271.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1272.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v1272.__r_.__value_.__l.__data_);
      if ((v926 & 0x80000000) == 0)
        goto LABEL_2200;
    }
    else if ((v926 & 0x80000000) == 0)
    {
      goto LABEL_2200;
    }
    operator delete(__len.__r_.__value_.__l.__data_);
  }
LABEL_2200:
  HIDWORD(v685[84].__r_.__value_.__r.__words[1]) = 1;
  v927 = sub_22E6EC1FC(1972, 0x24u, (uint64_t)&v1283, v861);
  if (HIDWORD(v927))
    HIDWORD(v685[84].__r_.__value_.__r.__words[1]) = v927;
  LODWORD(v685[84].__r_.__value_.__r.__words[2]) = 0;
  v928 = sub_22E6EC1FC(1971, 0x25u, (uint64_t)&v1283, v861);
  if (HIDWORD(v928))
    LODWORD(v685[84].__r_.__value_.__r.__words[2]) = v928;
  if (sub_22E6EBFB4((uint64_t)&v1283, 2959))
  {
    if ((v905 & 4) == 0 || v906 == 28)
      v929 = 2;
    else
      v929 = 1;
    HIDWORD(v685[84].__r_.__value_.__r.__words[2]) = v929;
  }
  else
  {
    HIDWORD(v685[84].__r_.__value_.__r.__words[2]) = 0;
  }
  if (!sub_22E6EBFB4((uint64_t)&v1283, 1270))
  {
    sub_22E70B070((uint64_t)&v1283, 1651, (uint64_t)&__len);
    v1270 = __len;
    v930 = v1288;
    v931 = __len.__r_.__value_.__r.__words[0];
    if (__len.__r_.__value_.__l.__data_ != v1288)
    {
      v932 = (int64x2_t *)(v1225 + 1816);
      do
      {
        v933 = *(const char ***)(*(_QWORD *)v931 + 48);
        v934 = (char *)*v933;
        if (*v933 && (v935 = strlen(*v933)) != 0)
        {
          v936 = v935;
          v937 = memchr(v934, 61, v935);
          if (v937)
            v938 = v937 - v934 == -1;
          else
            v938 = 1;
          if (!v938)
            goto LABEL_2245;
          if (v936 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_2709;
          if (v936 >= 0x17)
          {
            v940 = (v936 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v936 | 7) != 0x17)
              v940 = v936 | 7;
            v941 = v940 + 1;
            v939 = (std::string *)operator new(v940 + 1);
            v1269.__r_.__value_.__r.__words[2] = v941 | 0x8000000000000000;
            v1269.__r_.__value_.__r.__words[0] = (std::string::size_type)v939;
            v1269.__r_.__value_.__l.__size_ = v936;
          }
          else
          {
            *((_BYTE *)&v1269.__r_.__value_.__s + 23) = v936;
            v939 = &v1269;
          }
          memmove(v939, v934, v936);
        }
        else
        {
          v936 = 0;
          *((_BYTE *)&v1269.__r_.__value_.__s + 23) = 0;
          v939 = &v1269;
        }
        v939->__r_.__value_.__s.__data_[v936] = 0;
        v942 = v1219[88].__r_.__value_.__r.__words[2];
        v943 = v1219[89].__r_.__value_.__l.__data_;
        if (v942 >= (unint64_t)v943)
        {
          v946 = v932->i64[0];
          v947 = (uint64_t)(v942 - v932->i64[0]) >> 5;
          v948 = v947 + 1;
          if ((unint64_t)(v947 + 1) >> 59)
            goto LABEL_2709;
          if ((uint64_t)&v943[-v946] >> 4 > v948)
            v948 = (uint64_t)&v943[-v946] >> 4;
          if ((unint64_t)&v943[-v946] >= 0x7FFFFFFFFFFFFFE0)
            v949 = 0x7FFFFFFFFFFFFFFLL;
          else
            v949 = v948;
          *(_QWORD *)&v1267[24] = 0;
          v1268 = v1219 + 89;
          if (v949 >> 59)
            goto LABEL_2710;
          v950 = (char *)operator new(32 * v949);
          v951 = &v950[32 * v947];
          *(std::string *)v951 = v1269;
          *((_DWORD *)v951 + 6) = 0;
          if (v942 == v946)
          {
            v954 = vdupq_n_s64(v942);
            v952 = &v950[32 * v947];
          }
          else
          {
            v952 = &v950[32 * v947];
            do
            {
              v953 = *(_OWORD *)(v942 - 32);
              *((_QWORD *)v952 - 2) = *(_QWORD *)(v942 - 16);
              *((_OWORD *)v952 - 2) = v953;
              *(_QWORD *)(v942 - 24) = 0;
              *(_QWORD *)(v942 - 16) = 0;
              *(_QWORD *)(v942 - 32) = 0;
              *((_DWORD *)v952 - 2) = *(_DWORD *)(v942 - 8);
              v952 -= 32;
              v942 -= 32;
            }
            while (v942 != v946);
            v954 = *v932;
            v943 = v1219[89].__r_.__value_.__l.__data_;
          }
          v944 = (unint64_t)(v951 + 32);
          v945 = v1219;
          v1219[88].__r_.__value_.__l.__size_ = (std::string::size_type)v952;
          v1219[88].__r_.__value_.__r.__words[2] = (std::string::size_type)(v951 + 32);
          *(int64x2_t *)&v1267[8] = v954;
          v1219[89].__r_.__value_.__r.__words[0] = (std::string::size_type)&v950[32 * v949];
          *(_QWORD *)&v1267[24] = v943;
          *(_QWORD *)v1267 = v954.i64[0];
          sub_22E3B3F98((uint64_t)v1267);
        }
        else
        {
          *(std::string *)v942 = v1269;
          *(_DWORD *)(v942 + 24) = 0;
          v944 = v942 + 32;
          v945 = v1219;
        }
        v945[88].__r_.__value_.__r.__words[2] = v944;
        v931 = v1270.__r_.__value_.__r.__words[0];
LABEL_2245:
        v1270.__r_.__value_.__r.__words[0] = v931 + 8;
        sub_22E721830((uint64_t)&v1270);
        v931 = v1270.__r_.__value_.__r.__words[0];
      }
      while (v1270.__r_.__value_.__l.__data_ != v930);
    }
    v685 = v1219;
    if ((v1219[84].__r_.__value_.__s.__data_[8] & 1) != 0)
    {
      sub_22E70B070((uint64_t)&v1283, 1664, (uint64_t)&__len);
      v1270 = __len;
      v955 = v1288;
      v956 = __len.__r_.__value_.__r.__words[0];
      if (__len.__r_.__value_.__l.__data_ != v1288)
      {
        v957 = (int64x2_t *)(v1225 + 1816);
        do
        {
          v958 = *(const char ***)(*(_QWORD *)v956 + 48);
          v959 = (char *)*v958;
          if (*v958 && (v960 = strlen(*v958)) != 0)
          {
            v961 = v960;
            v962 = memchr(v959, 61, v960);
            if (v962)
              v963 = v962 - v959 == -1;
            else
              v963 = 1;
            if (!v963)
              goto LABEL_2280;
            if (v961 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_2709;
            if (v961 >= 0x17)
            {
              v965 = (v961 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v961 | 7) != 0x17)
                v965 = v961 | 7;
              v966 = v965 + 1;
              v964 = (std::string *)operator new(v965 + 1);
              v1269.__r_.__value_.__r.__words[2] = v966 | 0x8000000000000000;
              v1269.__r_.__value_.__r.__words[0] = (std::string::size_type)v964;
              v1269.__r_.__value_.__l.__size_ = v961;
            }
            else
            {
              *((_BYTE *)&v1269.__r_.__value_.__s + 23) = v961;
              v964 = &v1269;
            }
            memmove(v964, v959, v961);
          }
          else
          {
            v961 = 0;
            *((_BYTE *)&v1269.__r_.__value_.__s + 23) = 0;
            v964 = &v1269;
          }
          v964->__r_.__value_.__s.__data_[v961] = 0;
          v967 = v1219[88].__r_.__value_.__r.__words[2];
          v968 = v1219[89].__r_.__value_.__l.__data_;
          if (v967 >= (unint64_t)v968)
          {
            v971 = v957->i64[0];
            v972 = (uint64_t)(v967 - v957->i64[0]) >> 5;
            v973 = v972 + 1;
            if ((unint64_t)(v972 + 1) >> 59)
              goto LABEL_2709;
            if ((uint64_t)&v968[-v971] >> 4 > v973)
              v973 = (uint64_t)&v968[-v971] >> 4;
            if ((unint64_t)&v968[-v971] >= 0x7FFFFFFFFFFFFFE0)
              v974 = 0x7FFFFFFFFFFFFFFLL;
            else
              v974 = v973;
            *(_QWORD *)&v1267[24] = 0;
            v1268 = v1219 + 89;
            if (v974 >> 59)
              goto LABEL_2710;
            v975 = (char *)operator new(32 * v974);
            v976 = &v975[32 * v972];
            *(std::string *)v976 = v1269;
            *((_DWORD *)v976 + 6) = 0;
            if (v967 == v971)
            {
              v979 = vdupq_n_s64(v967);
              v977 = &v975[32 * v972];
            }
            else
            {
              v977 = &v975[32 * v972];
              do
              {
                v978 = *(_OWORD *)(v967 - 32);
                *((_QWORD *)v977 - 2) = *(_QWORD *)(v967 - 16);
                *((_OWORD *)v977 - 2) = v978;
                *(_QWORD *)(v967 - 24) = 0;
                *(_QWORD *)(v967 - 16) = 0;
                *(_QWORD *)(v967 - 32) = 0;
                *((_DWORD *)v977 - 2) = *(_DWORD *)(v967 - 8);
                v977 -= 32;
                v967 -= 32;
              }
              while (v967 != v971);
              v979 = *v957;
              v968 = v1219[89].__r_.__value_.__l.__data_;
            }
            v969 = (unint64_t)(v976 + 32);
            v970 = v1219;
            v1219[88].__r_.__value_.__l.__size_ = (std::string::size_type)v977;
            v1219[88].__r_.__value_.__r.__words[2] = (std::string::size_type)(v976 + 32);
            *(int64x2_t *)&v1267[8] = v979;
            v1219[89].__r_.__value_.__r.__words[0] = (std::string::size_type)&v975[32 * v974];
            *(_QWORD *)&v1267[24] = v968;
            *(_QWORD *)v1267 = v979.i64[0];
            sub_22E3B3F98((uint64_t)v1267);
          }
          else
          {
            *(std::string *)v967 = v1269;
            *(_DWORD *)(v967 + 24) = 0;
            v969 = v967 + 32;
            v970 = v1219;
          }
          v970[88].__r_.__value_.__r.__words[2] = v969;
          v956 = v1270.__r_.__value_.__r.__words[0];
LABEL_2280:
          v1270.__r_.__value_.__r.__words[0] = v956 + 8;
          sub_22E721830((uint64_t)&v1270);
          v956 = v1270.__r_.__value_.__r.__words[0];
        }
        while (v1270.__r_.__value_.__l.__data_ != v955);
      }
      v685 = v1219;
    }
  }
  llvm::opt::ArgList::getAllArgValues();
  v980 = *(__int128 **)v1267;
  v981 = *(__int128 **)&v1267[8];
  if (*(_QWORD *)v1267 != *(_QWORD *)&v1267[8])
  {
    v982 = (std::string::__raw *)&v685[89];
    v983 = (unint64_t *)(v1225 + 1816);
    v984 = (char *)v685[88].__r_.__value_.__r.__words[2];
    do
    {
      if ((unint64_t)v984 >= v982->__words[0])
      {
        v986 = *v983;
        v987 = (uint64_t)&v984[-*v983] >> 5;
        v988 = v987 + 1;
        if ((unint64_t)(v987 + 1) >> 59)
          goto LABEL_2709;
        v989 = v982->__words[0] - v986;
        if (v989 >> 4 > v988)
          v988 = v989 >> 4;
        if ((unint64_t)v989 >= 0x7FFFFFFFFFFFFFE0)
          v990 = 0x7FFFFFFFFFFFFFFLL;
        else
          v990 = v988;
        v1289 = v982;
        if (v990)
        {
          if (v990 >> 59)
            goto LABEL_2710;
          v991 = operator new(32 * v990);
        }
        else
        {
          v991 = 0;
        }
        v992 = &v991[32 * v987];
        if (*((char *)v980 + 23) < 0)
        {
          sub_22E3BB2B4(&v991[32 * v987], *(void **)v980, *((_QWORD *)v980 + 1));
          v984 = (char *)v1219[88].__r_.__value_.__r.__words[2];
          v986 = v1219[88].__r_.__value_.__l.__size_;
        }
        else
        {
          v993 = *v980;
          *((_QWORD *)v992 + 2) = *((_QWORD *)v980 + 2);
          *(_OWORD *)v992 = v993;
        }
        *(_DWORD *)&v991[32 * v987 + 24] = 1;
        if (v984 == (char *)v986)
        {
          v996 = vdupq_n_s64(v986);
          v994 = &v991[32 * v987];
          v685 = v1219;
        }
        else
        {
          v994 = &v991[32 * v987];
          v685 = v1219;
          do
          {
            v995 = *((_OWORD *)v984 - 2);
            *((_QWORD *)v994 - 2) = *((_QWORD *)v984 - 2);
            *((_OWORD *)v994 - 2) = v995;
            *((_QWORD *)v984 - 3) = 0;
            *((_QWORD *)v984 - 2) = 0;
            *((_QWORD *)v984 - 4) = 0;
            *((_DWORD *)v994 - 2) = *((_DWORD *)v984 - 2);
            v994 -= 32;
            v984 -= 32;
          }
          while (v984 != (char *)v986);
          v996 = *(int64x2_t *)v983;
        }
        v984 = v992 + 32;
        v685[88].__r_.__value_.__l.__size_ = (std::string::size_type)v994;
        v685[88].__r_.__value_.__r.__words[2] = (std::string::size_type)(v992 + 32);
        *(int64x2_t *)&__len.__r_.__value_.__r.__words[1] = v996;
        v997 = v685[89].__r_.__value_.__l.__data_;
        v685[89].__r_.__value_.__r.__words[0] = (std::string::size_type)&v991[32 * v990];
        v1288 = v997;
        __len.__r_.__value_.__r.__words[0] = v996.i64[0];
        sub_22E3B3F98((uint64_t)&__len);
      }
      else
      {
        if (*((char *)v980 + 23) < 0)
        {
          sub_22E3BB2B4(v984, *(void **)v980, *((_QWORD *)v980 + 1));
        }
        else
        {
          v985 = *v980;
          *((_QWORD *)v984 + 2) = *((_QWORD *)v980 + 2);
          *(_OWORD *)v984 = v985;
        }
        *((_DWORD *)v984 + 6) = 1;
        v984 += 32;
      }
      v685[88].__r_.__value_.__r.__words[2] = (std::string::size_type)v984;
      v980 = (__int128 *)((char *)v980 + 24);
    }
    while (v980 != v981);
  }
  __len.__r_.__value_.__r.__words[0] = (std::string::size_type)v1267;
  sub_22E3B3CC8((void ***)&__len);
  sub_22E70B070((uint64_t)&v1283, 575, (uint64_t)&__len);
  *(std::string *)v1267 = __len;
  v998 = v1288;
  v999 = __len.__r_.__value_.__r.__words[0];
  if (__len.__r_.__value_.__l.__data_ != v1288)
  {
    do
    {
      v1000 = **(char ***)(*(_QWORD *)v999 + 48);
      LODWORD(v1270.__r_.__value_.__l.__data_) = 3;
      sub_22F2A9AD4((int64x2_t *)&v685[88].__r_.__value_.__r.__words[1], v1000, &v1270);
      *(_QWORD *)v1267 += 8;
      sub_22E721830((uint64_t)v1267);
      v999 = *(_QWORD *)v1267;
    }
    while (*(std::string::pointer *)v1267 != v998);
  }
  sub_22E70B070((uint64_t)&v1283, 874, (uint64_t)&__len);
  v1270 = __len;
  v1001 = v1288;
  v1002 = __len.__r_.__value_.__r.__words[0];
  if (__len.__r_.__value_.__l.__data_ != v1288)
  {
    v1003 = (unint64_t *)&v685[89];
    v1004 = (int64x2_t *)(v1225 + 1816);
    do
    {
      v1005 = *(const char ***)(*(_QWORD *)v1002 + 48);
      v1006 = (char *)*v1005;
      if (*v1005 && (v1007 = strlen(*v1005)) != 0)
      {
        v1008 = v1007;
        v1009 = memchr(v1006, 61, v1007);
        if (v1009)
          v1010 = v1009 - v1006 == -1;
        else
          v1010 = 1;
        if (!v1010)
          goto LABEL_2344;
        if (v1008 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_2709;
        if (v1008 >= 0x17)
        {
          v1012 = (v1008 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v1008 | 7) != 0x17)
            v1012 = v1008 | 7;
          v1013 = v1012 + 1;
          v1011 = (std::string *)operator new(v1012 + 1);
          v1269.__r_.__value_.__r.__words[2] = v1013 | 0x8000000000000000;
          v1269.__r_.__value_.__r.__words[0] = (std::string::size_type)v1011;
          v1269.__r_.__value_.__l.__size_ = v1008;
        }
        else
        {
          *((_BYTE *)&v1269.__r_.__value_.__s + 23) = v1008;
          v1011 = &v1269;
        }
        memmove(v1011, v1006, v1008);
      }
      else
      {
        v1008 = 0;
        *((_BYTE *)&v1269.__r_.__value_.__s + 23) = 0;
        v1011 = &v1269;
      }
      v1011->__r_.__value_.__s.__data_[v1008] = 0;
      v1014 = v685[88].__r_.__value_.__r.__words[2];
      v1015 = v685[89].__r_.__value_.__r.__words[0];
      if (v1014 >= v1015)
      {
        v1017 = v1004->i64[0];
        v1018 = (uint64_t)(v1014 - v1004->i64[0]) >> 5;
        v1019 = v1018 + 1;
        if ((unint64_t)(v1018 + 1) >> 59)
          goto LABEL_2709;
        if ((uint64_t)(v1015 - v1017) >> 4 > v1019)
          v1019 = (uint64_t)(v1015 - v1017) >> 4;
        if (v1015 - v1017 >= 0x7FFFFFFFFFFFFFE0)
          v1020 = 0x7FFFFFFFFFFFFFFLL;
        else
          v1020 = v1019;
        *(_QWORD *)&v1267[24] = 0;
        v1268 = (std::string *)v1003;
        if (v1020 >> 59)
          goto LABEL_2710;
        v1021 = (char *)operator new(32 * v1020);
        v1022 = &v1021[32 * v1018];
        *(std::string *)v1022 = v1269;
        *((_DWORD *)v1022 + 6) = 2;
        if (v1014 == v1017)
        {
          v1025 = vdupq_n_s64(v1014);
          v1023 = &v1021[32 * v1018];
          v685 = v1219;
        }
        else
        {
          v1023 = &v1021[32 * v1018];
          v685 = v1219;
          do
          {
            v1024 = *(_OWORD *)(v1014 - 32);
            *((_QWORD *)v1023 - 2) = *(_QWORD *)(v1014 - 16);
            *((_OWORD *)v1023 - 2) = v1024;
            *(_QWORD *)(v1014 - 24) = 0;
            *(_QWORD *)(v1014 - 16) = 0;
            *(_QWORD *)(v1014 - 32) = 0;
            *((_DWORD *)v1023 - 2) = *(_DWORD *)(v1014 - 8);
            v1023 -= 32;
            v1014 -= 32;
          }
          while (v1014 != v1017);
          v1025 = *v1004;
          v1015 = *v1003;
        }
        v1016 = (unint64_t)(v1022 + 32);
        v685[88].__r_.__value_.__l.__size_ = (std::string::size_type)v1023;
        v685[88].__r_.__value_.__r.__words[2] = (std::string::size_type)(v1022 + 32);
        *(int64x2_t *)&v1267[8] = v1025;
        v685[89].__r_.__value_.__r.__words[0] = (std::string::size_type)&v1021[32 * v1020];
        *(_QWORD *)&v1267[24] = v1015;
        *(_QWORD *)v1267 = v1025.i64[0];
        sub_22E3B3F98((uint64_t)v1267);
      }
      else
      {
        *(std::string *)v1014 = v1269;
        *(_DWORD *)(v1014 + 24) = 2;
        v1016 = v1014 + 32;
      }
      v685[88].__r_.__value_.__r.__words[2] = v1016;
      v1002 = v1270.__r_.__value_.__r.__words[0];
LABEL_2344:
      v1270.__r_.__value_.__r.__words[0] = v1002 + 8;
      sub_22E721830((uint64_t)&v1270);
      v1002 = v1270.__r_.__value_.__r.__words[0];
    }
    while (v1270.__r_.__value_.__l.__data_ != v1001);
  }
  v1026 = HIDWORD(v685[84].__r_.__value_.__r.__words[1]);
  v1027 = v685[84].__r_.__value_.__r.__words[2];
  v1028 = v1223;
  v1029 = v1208;
  v1030 = v1209;
  if (v1026 == 1 && v1027 || v1026 == 2 && v1027 != 1)
  {
    *(_QWORD *)(v1223 + 312) = 0x1B500000000;
    if (*(char *)(v1223 + 311) < 0)
    {
      **(_BYTE **)(v1223 + 288) = 0;
      *(_QWORD *)(v1223 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v1223 + 288) = 0;
      *(_BYTE *)(v1223 + 311) = 0;
    }
    *(_OWORD *)&__len.__r_.__value_.__l.__data_ = (unint64_t)(v1223 + 320);
    __len.__r_.__value_.__r.__words[2] = v1223;
    LOWORD(v1288) = 1;
    *(_BYTE *)(v1223 + 320) = 0;
    *(_DWORD *)(v1223 + 664) = 0;
    v1031 = *(unsigned int *)(v1223 + 776);
    if ((_DWORD)v1031)
    {
      v1032 = *(_QWORD *)(v1223 + 768);
      v1033 = 56 * v1031;
      do
      {
        if (*(char *)(v1032 + v1033 - 9) < 0)
          operator delete(*(void **)(v1032 + v1033 - 32));
        v1033 -= 56;
      }
      while (v1033);
    }
    *(_DWORD *)(v1223 + 776) = 0;
    v1034 = **(_QWORD **)(sub_22E6EBFB4((uint64_t)&v1283, 1972) + 48);
    v1035 = (unsigned __int8 *)__len.__r_.__value_.__r.__words[0];
    if (!__len.__r_.__value_.__r.__words[0])
    {
      v1035 = (unsigned __int8 *)sub_22E3B8AAC(__len.__r_.__value_.__l.__size_);
      __len.__r_.__value_.__r.__words[0] = (std::string::size_type)v1035;
    }
    v1035[*v1035 + 1] = 1;
    v1036 = __len.__r_.__value_.__r.__words[0];
    v1037 = *__len.__r_.__value_.__l.__data_;
    *__len.__r_.__value_.__l.__data_ = v1037 + 1;
    *(_QWORD *)(v1036 + 8 * v1037 + 16) = v1034;
    v1038 = **(_QWORD **)(sub_22E6EBFB4((uint64_t)&v1283, 1971) + 48);
    v1039 = (unsigned __int8 *)__len.__r_.__value_.__r.__words[0];
    if (!__len.__r_.__value_.__r.__words[0])
    {
      v1039 = (unsigned __int8 *)sub_22E3B8AAC(__len.__r_.__value_.__l.__size_);
      __len.__r_.__value_.__r.__words[0] = (std::string::size_type)v1039;
    }
    v1039[*v1039 + 1] = 1;
    v1040 = __len.__r_.__value_.__r.__words[0];
    v1041 = *__len.__r_.__value_.__l.__data_;
    *__len.__r_.__value_.__l.__data_ = v1041 + 1;
    *(_QWORD *)(v1040 + 8 * v1041 + 16) = v1038;
    sub_22E3BB0B8((uint64_t)&__len);
  }
  v1042 = v1219;
  v1043 = v1219[86].__r_.__value_.__s.__data_[7];
  v1044 = v1043;
  v1045 = v1043 & 0x7F;
  if (v1044 < 0)
    v1045 = v1219[85].__r_.__value_.__r.__words[2];
  if (v1045 && v1219[87].__r_.__value_.__l.__size_ == v1219[87].__r_.__value_.__r.__words[2])
  {
    *(_QWORD *)(v1223 + 312) = 0x2FA00000000;
    if (*(char *)(v1223 + 311) < 0)
    {
      **(_BYTE **)(v1223 + 288) = 0;
      *(_QWORD *)(v1223 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v1223 + 288) = 0;
      *(_BYTE *)(v1223 + 311) = 0;
    }
    v1228[0] = v1223 + 320;
    v1228[1] = 0;
    v1228[2] = v1223;
    v1229 = 1;
    *(_BYTE *)(v1223 + 320) = 0;
    *(_DWORD *)(v1223 + 664) = 0;
    v1046 = *(unsigned int *)(v1223 + 776);
    if ((_DWORD)v1046)
    {
      v1047 = *(_QWORD *)(v1223 + 768);
      v1048 = 56 * v1046;
      do
      {
        if (*(char *)(v1047 + v1048 - 9) < 0)
          operator delete(*(void **)(v1047 + v1048 - 32));
        v1048 -= 56;
      }
      while (v1048);
    }
    *(_DWORD *)(v1223 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v1228);
    v1042 = v1219;
  }
  v1049 = v1042[2].__r_.__value_.__l.__size_;
  if (*(char *)(v1049 + 127) < 0)
    v1050 = *(_QWORD *)(v1049 + 112);
  else
    v1050 = *(unsigned __int8 *)(v1049 + 127);
  if (v1050)
    v1051 = 1;
  else
    v1051 = LODWORD(v1219[108].__r_.__value_.__r.__words[2]) == 20;
  if (v1051)
    *(_QWORD *)(v1211 + 192) |= 0x2000000000uLL;
  v1052 = *((_QWORD *)v1225 + 3);
  if ((v1052 & 0x100000000000000) != 0)
  {
    v1054 = *((_QWORD *)v1225 + 1);
    v1053 = *((_QWORD *)v1225 + 2);
    if (*(_QWORD *)(v1219->__r_.__value_.__r.__words[0] + 256)
      || *(_QWORD *)(v1219->__r_.__value_.__r.__words[0] + 264))
    {
      *(_QWORD *)v1225 = *(_QWORD *)v1225;
      *((_QWORD *)v1225 + 1) = v1054;
      *((_QWORD *)v1225 + 2) = v1053;
      *((_QWORD *)v1225 + 3) = v1052 & 0xFEFFFFFFFFFFFFFFLL;
      *(_QWORD *)(v1223 + 312) = 0x1FE00000000;
      if (*(char *)(v1223 + 311) < 0)
      {
        **(_BYTE **)(v1223 + 288) = 0;
        *(_QWORD *)(v1223 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v1223 + 288) = 0;
        *(_BYTE *)(v1223 + 311) = 0;
      }
      v1226[0] = v1223 + 320;
      v1226[1] = 0;
      v1226[2] = v1223;
      v1227 = 1;
      *(_BYTE *)(v1223 + 320) = 0;
      *(_DWORD *)(v1223 + 664) = 0;
      v1055 = *(unsigned int *)(v1223 + 776);
      if ((_DWORD)v1055)
      {
        v1056 = *(_QWORD *)(v1223 + 768);
        v1057 = 56 * v1055;
        do
        {
          if (*(char *)(v1056 + v1057 - 9) < 0)
            operator delete(*(void **)(v1056 + v1057 - 32));
          v1057 -= 56;
        }
        while (v1057);
      }
      *(_DWORD *)(v1223 + 776) = 0;
      sub_22E3BB0B8((uint64_t)v1226);
    }
  }
  v1219[80].__r_.__value_.__r.__words[2] = a5;
  if (v1208 < 1)
    goto LABEL_2450;
  v1058 = v1219[81].__r_.__value_.__l.__size_;
  v1059 = v1219[81].__r_.__value_.__l.__data_;
  v1060 = (uint64_t)(v1058 - (_QWORD)v1059) / 24;
  v1061 = (uint64_t)&v1059[24 * v1060];
  v1062 = v1219[81].__r_.__value_.__r.__words[2];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1062 - v1058) >> 3)) < v1208)
  {
    if ((unint64_t)(v1060 + v1208) <= 0xAAAAAAAAAAAAAAALL)
    {
      v1063 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1062 - (_QWORD)v1059) >> 3);
      v1064 = 2 * v1063;
      if (2 * v1063 <= v1060 + v1208)
        v1064 = v1060 + v1208;
      if (v1063 >= 0x555555555555555)
        v1065 = 0xAAAAAAAAAAAAAAALL;
      else
        v1065 = v1064;
      v1289 = &v1219[81].__r_.__value_.__r.__words[2];
      if (!v1065)
      {
        v1066 = 0;
        goto LABEL_2430;
      }
      if (v1065 <= 0xAAAAAAAAAAAAAAALL)
      {
        v1066 = (char *)operator new(24 * v1065);
LABEL_2430:
        v1084 = (std::string::size_type)&v1066[24 * v1060];
        __len.__r_.__value_.__l.__size_ = v1084;
        v1288 = &v1066[24 * v1065];
        v1085 = v1084 + 24 * v1208;
        v1086 = 24 * v1208;
        while (1)
        {
          v1087 = *v1030;
          v1088 = strlen(*v1030);
          if (v1088 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_2709;
          v1089 = v1088;
          if (v1088 >= 0x17)
          {
            v1091 = (v1088 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v1088 | 7) != 0x17)
              v1091 = v1088 | 7;
            v1092 = v1091 + 1;
            v1090 = operator new(v1091 + 1);
            *(_QWORD *)(v1084 + 8) = v1089;
            *(_QWORD *)(v1084 + 16) = v1092 | 0x8000000000000000;
            *(_QWORD *)v1084 = v1090;
          }
          else
          {
            *(_BYTE *)(v1084 + 23) = v1088;
            v1090 = (void *)v1084;
            if (!v1088)
              goto LABEL_2439;
          }
          memmove(v1090, v1087, v1089);
LABEL_2439:
          *((_BYTE *)v1090 + v1089) = 0;
          v1084 += 24;
          ++v1030;
          v1086 -= 24;
          if (!v1086)
          {
            v1093 = __len.__r_.__value_.__l.__size_;
            v1094 = v1219[81].__r_.__value_.__l.__data_;
            if ((std::string::pointer)v1061 == v1094)
            {
              v1096 = __len.__r_.__value_.__l.__size_;
            }
            else
            {
              v1095 = v1061;
              do
              {
                v1096 = v1093 - 24;
                v1097 = *(_OWORD *)(v1095 - 24);
                *(_QWORD *)(v1093 - 8) = *(_QWORD *)(v1095 - 8);
                *(_OWORD *)(v1093 - 24) = v1097;
                *(_QWORD *)(v1095 - 16) = 0;
                *(_QWORD *)(v1095 - 8) = 0;
                *(_QWORD *)(v1095 - 24) = 0;
                v1095 -= 24;
                v1093 -= 24;
              }
              while ((std::string::pointer)v1095 != v1094);
            }
            v1098 = v1219[81].__r_.__value_.__l.__size_;
            if (v1061 == v1098)
            {
              v1100 = (std::string::__raw *)v1219;
            }
            else
            {
              do
              {
                v1099 = *(_OWORD *)v1061;
                *(_QWORD *)(v1085 + 16) = *(_QWORD *)(v1061 + 16);
                *(_OWORD *)v1085 = v1099;
                v1085 += 24;
                *(_QWORD *)(v1061 + 8) = 0;
                *(_QWORD *)(v1061 + 16) = 0;
                *(_QWORD *)v1061 = 0;
                v1061 += 24;
              }
              while (v1061 != v1098);
              v1100 = (std::string::__raw *)v1219;
              v1061 = v1219[81].__r_.__value_.__l.__size_;
            }
            v1101 = v1100[81].__words[0];
            v1100[81].__words[0] = v1096;
            v1100[81].__words[1] = v1085;
            v1102 = (char *)v1100[81].__words[2];
            v1100[81].__words[2] = (std::string::size_type)v1288;
            __len.__r_.__value_.__r.__words[2] = v1061;
            v1288 = v1102;
            __len.__r_.__value_.__l.__size_ = v1101;
            __len.__r_.__value_.__r.__words[0] = v1101;
            sub_22E3B8B94((uint64_t)&__len);
            goto LABEL_2450;
          }
        }
      }
LABEL_2710:
      sub_22E3B3F8C();
    }
    goto LABEL_2709;
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1058 - v1061) >> 3)) >= v1208)
  {
    v1068 = &v1209[v1208];
    v1078 = v1219[81].__r_.__value_.__l.__size_;
    goto LABEL_2423;
  }
  v1067 = 0;
  v1068 = &v1209[0xAAAAAAAAAAAAAABLL * ((uint64_t)(v1058 - v1061) >> 3)];
  v1069 = 8 * v1208 - 0x5555555555555558 * ((uint64_t)(v1058 - v1061) >> 3);
  v1070 = v1068;
  do
  {
    v1071 = *v1070;
    v1072 = strlen(*v1070);
    if (v1072 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_2709;
    v1073 = v1072;
    if (v1072 >= 0x17)
    {
      v1075 = (v1072 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1072 | 7) != 0x17)
        v1075 = v1072 | 7;
      v1076 = v1075 + 1;
      v1074 = operator new(v1075 + 1);
      v1077 = (_QWORD *)(v1058 + v1067);
      v1077[1] = v1073;
      v1077[2] = v1076 | 0x8000000000000000;
      *v1077 = v1074;
LABEL_2418:
      memmove(v1074, v1071, v1073);
      goto LABEL_2419;
    }
    v1074 = (void *)(v1058 + v1067);
    *(_BYTE *)(v1058 + v1067 + 23) = v1072;
    if (v1072)
      goto LABEL_2418;
LABEL_2419:
    *((_BYTE *)v1074 + v1073) = 0;
    ++v1070;
    v1067 += 24;
    v1069 -= 8;
  }
  while (v1069);
  v1078 = v1058 + v1067;
  v1219[81].__r_.__value_.__l.__size_ = v1058 + v1067;
  v1028 = v1223;
  v1029 = v1208;
  v1030 = v1209;
  if ((uint64_t)(v1058 - v1061) < 1)
    goto LABEL_2450;
LABEL_2423:
  v1079 = v1078 - 24 * v1029;
  v1080 = v1078;
  if (v1079 < v1058)
  {
    v1081 = v1078 - 24 * v1029;
    v1080 = v1078;
    do
    {
      v1082 = *(_OWORD *)v1081;
      *(_QWORD *)(v1080 + 16) = *(_QWORD *)(v1081 + 16);
      *(_OWORD *)v1080 = v1082;
      v1080 += 24;
      *(_QWORD *)(v1081 + 8) = 0;
      *(_QWORD *)(v1081 + 16) = 0;
      *(_QWORD *)v1081 = 0;
      v1081 += 24;
    }
    while (v1081 < v1058);
  }
  v1219[81].__r_.__value_.__l.__size_ = v1080;
  sub_22E7252C8(v1061, v1079, v1078);
  for (; v1030 != v1068; v1061 += 24)
  {
    v1083 = *v1030++;
    MEMORY[0x2348A0C14](v1061, v1083);
  }
LABEL_2450:
  v1103 = v1219->__r_.__value_.__r.__words[0];
  v1104 = v1219->__r_.__value_.__r.__words[2];
  v1105 = v1219[12].__r_.__value_.__l.__size_ & 0xFEFFFFFFFFFFFFFFLL | ((((unint64_t)(*(__int128 *)(v1219->__r_.__value_.__r.__words[0] + 184) >> 49) >> 56) & 1) << 56);
  v1219[12].__r_.__value_.__l.__size_ = v1105;
  v1106 = v1105 & 0xF7FFFFFFFFFFFFFFLL | ((((unint64_t)(*(__int128 *)(v1103 + 184) >> 47) >> 59) & 1) << 59);
  v1219[12].__r_.__value_.__l.__size_ = v1106;
  v1107 = v1106 & 0xEFFFFFFFFDFFFFFFLL | (*(__int128 *)(v1103 + 184) >> 47) & 0x1000000000000000;
  v1108 = v1219[95].__r_.__value_.__l.__size_;
  v1109 = v1107 & 0xFFFFFFFFFDFFFFFFLL | ((v1108 & 1) << 25);
  v1219[12].__r_.__value_.__l.__size_ = v1109;
  v1219[95].__r_.__value_.__l.__size_ = v1108 & 0xFFFFFFFFFFFFBFFFLL | (((v1108 >> 13) & 1) << 14);
  if ((v1108 & 8) != 0)
    *v1213 = v1109 & 0xFFFFFFFFFEFFFFFFLL;
  *(_BYTE *)(v1103 + 272) = (*((_QWORD *)v1225 + 3) & 0xC00B800000000) != 0;
  *(_QWORD *)(v1103 + 192) = *(_QWORD *)(v1103 + 192) & 0xFFFFEFFFFFFFFFFFLL | ((unint64_t)((*((_DWORD *)v1225 + 21) & 0x800) != 0) << 44);
  *(_QWORD *)(v1103 + 208) = *(_QWORD *)(v1103 + 208) & 0xFFFFFFDFFFFFFFFFLL | (((*((_QWORD *)v1225 + 3) >> 55) & 1) << 37);
  std::string::operator=((std::string *)(v1103 + 496), (const std::string *)(v1103 + 472));
  LOWORD(v1268) = 260;
  *(_QWORD *)v1267 = v1104;
  MEMORY[0x23489F1BC](&__len, v1267);
  v1110 = (int)v1288;
  std::string::operator=(v1219 + 19, (const std::string *)(v1104 + 320));
  *((_DWORD *)v1225 + 21) = *((_DWORD *)v1225 + 21) & 0xFFFFFBFF | (((sub_22E6EBFB4((uint64_t)&v1283, 637) | *((_DWORD *)v1225 + 21) & 0x400) != 0) << 10);
  v83 = (v1288 & 0xFFFFFFFE) == 48;
  *((_QWORD *)v1225 + 2) = *((_QWORD *)v1225 + 2) & 0xFFFFDFFFFFFFFFFFLL | ((unint64_t)((*((_QWORD *)v1225 + 2) >> 45) & ((v1288 & 0xFFFFFFFE) != 48)) << 45);
  v1111 = -262145;
  if (!v83)
    v1111 = -1;
  v1219[12].__r_.__value_.__l.__size_ &= v1111;
  if ((*(_BYTE *)(v1103 + 240) & 7) != 0 && HIDWORD(v1289) == 15 && (v1290 & 0xFFFFFFEF) == 0)
  {
    *(_QWORD *)(v1028 + 312) = 0x30600000000;
    if (*(char *)(v1028 + 311) < 0)
    {
      **(_BYTE **)(v1028 + 288) = 0;
      *(_QWORD *)(v1028 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v1028 + 288) = 0;
      *(_BYTE *)(v1028 + 311) = 0;
    }
    v1112 = (unsigned __int8 *)(v1028 + 320);
    *(_QWORD *)v1267 = v1028 + 320;
    *(_QWORD *)&v1267[8] = 0;
    *(_QWORD *)&v1267[16] = v1028;
    *(_WORD *)&v1267[24] = 1;
    *(_BYTE *)(v1028 + 320) = 0;
    *(_DWORD *)(v1028 + 664) = 0;
    v1113 = *(unsigned int *)(v1028 + 776);
    if ((_DWORD)v1113)
    {
      v1114 = *(_QWORD *)(v1028 + 768);
      v1115 = 56 * v1113;
      do
      {
        if (*(char *)(v1114 + v1115 - 9) < 0)
          operator delete(*(void **)(v1114 + v1115 - 32));
        v1115 -= 56;
      }
      while (v1115);
      v1112 = *(unsigned __int8 **)v1267;
      *(_DWORD *)(v1028 + 776) = 0;
      v1116 = *(_DWORD *)(v1103 + 240);
      if (!v1112)
      {
        v1112 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v1267[8]);
        *(_QWORD *)v1267 = v1112;
      }
    }
    else
    {
      *(_DWORD *)(v1028 + 776) = 0;
      v1116 = *(_DWORD *)(v1103 + 240);
    }
    v1112[*v1112 + 1] = 3;
    v1117 = *(_QWORD *)v1267;
    v1118 = **(_BYTE **)v1267;
    **(_BYTE **)v1267 = v1118 + 1;
    *(_QWORD *)(v1117 + 8 * v1118 + 16) = v1116 & 7;
    if ((__len.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_len = &__len;
    else
      p_len = (std::string *)__len.__r_.__value_.__r.__words[0];
    if ((__len.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1120 = *((_BYTE *)&__len.__r_.__value_.__s + 23) & 0x7F;
    else
      v1120 = __len.__r_.__value_.__l.__size_;
    sub_22E3B89A8((unsigned __int8 **)v1267, p_len, v1120);
    sub_22E3BB0B8((uint64_t)v1267);
  }
  if ((*(_QWORD *)(v1103 + 8) & 0x2000000000) != 0 && (*(_BYTE *)(v1103 + 1) & 1) == 0)
  {
    *(_QWORD *)(v1028 + 312) = 0x1EB00000000;
    if (*(char *)(v1028 + 311) < 0)
    {
      **(_BYTE **)(v1028 + 288) = 0;
      *(_QWORD *)(v1028 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v1028 + 288) = 0;
      *(_BYTE *)(v1028 + 311) = 0;
    }
    *(_QWORD *)v1267 = v1028 + 320;
    *(_QWORD *)&v1267[8] = 0;
    *(_QWORD *)&v1267[16] = v1028;
    *(_WORD *)&v1267[24] = 1;
    *(_BYTE *)(v1028 + 320) = 0;
    *(_DWORD *)(v1028 + 664) = 0;
    v1121 = *(unsigned int *)(v1028 + 776);
    if ((_DWORD)v1121)
    {
      v1122 = *(_QWORD *)(v1028 + 768);
      v1123 = 56 * v1121;
      do
      {
        if (*(char *)(v1122 + v1123 - 9) < 0)
          operator delete(*(void **)(v1122 + v1123 - 32));
        v1123 -= 56;
      }
      while (v1123);
    }
    *(_DWORD *)(v1028 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v1267);
  }
  if (sub_22E6EBFB4((uint64_t)&v1283, 495))
  {
    *(_QWORD *)(v1028 + 312) = 0x36C00000000;
    if (*(char *)(v1028 + 311) < 0)
    {
      **(_BYTE **)(v1028 + 288) = 0;
      *(_QWORD *)(v1028 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v1028 + 288) = 0;
      *(_BYTE *)(v1028 + 311) = 0;
    }
    *(_OWORD *)&v1286[0].__r_.__value_.__l.__data_ = v1028 + 320;
    v1286[0].__r_.__value_.__r.__words[2] = v1028;
    LOWORD(v1286[1].__r_.__value_.__l.__data_) = 1;
    *(_BYTE *)(v1028 + 320) = 0;
    *(_DWORD *)(v1028 + 664) = 0;
    v1124 = *(unsigned int *)(v1028 + 776);
    if ((_DWORD)v1124)
    {
      v1125 = *(_QWORD *)(v1028 + 768);
      v1126 = 56 * v1124;
      do
      {
        if (*(char *)(v1125 + v1126 - 9) < 0)
          operator delete(*(void **)(v1125 + v1126 - 32));
        v1126 -= 56;
      }
      while (v1126);
    }
    *(_DWORD *)(v1028 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v1286);
  }
  v1127 = (int8x8_t)*(unsigned int *)(v1103 + 140);
  if (v1127.i32[0])
  {
    v1128 = (uint8x8_t)vcnt_s8(v1127);
    v1128.i16[0] = vaddlv_u8(v1128);
    if (v1128.i32[0] >= 2u)
    {
      v1129 = sub_22E6EBFB4((uint64_t)&v1283, 925);
      *(_QWORD *)(v1028 + 312) = 0x30400000000;
      if (*(char *)(v1028 + 311) < 0)
      {
        **(_BYTE **)(v1028 + 288) = 0;
        *(_QWORD *)(v1028 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v1028 + 288) = 0;
        *(_BYTE *)(v1028 + 311) = 0;
      }
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v1028 + 320;
      __p.__r_.__value_.__r.__words[2] = v1028;
      v1262 = 1;
      *(_BYTE *)(v1028 + 320) = 0;
      *(_DWORD *)(v1028 + 664) = 0;
      v1130 = *(unsigned int *)(v1028 + 776);
      if ((_DWORD)v1130)
      {
        v1131 = *(_QWORD *)(v1028 + 768);
        v1132 = 56 * v1130;
        do
        {
          if (*(char *)(v1131 + v1132 - 9) < 0)
            operator delete(*(void **)(v1131 + v1132 - 32));
          v1132 -= 56;
        }
        while (v1132);
      }
      *(_DWORD *)(v1028 + 776) = 0;
      llvm::opt::Arg::getAsString();
      if ((v1259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v1133 = &v1259;
      else
        v1133 = (std::string *)v1259.__r_.__value_.__r.__words[0];
      if ((v1259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v1134 = *((_BYTE *)&v1259.__r_.__value_.__s + 23) & 0x7F;
      else
        v1134 = v1259.__r_.__value_.__l.__size_;
      sub_22E3B89A8((unsigned __int8 **)&__p, v1133, v1134);
      v1135 = **(_QWORD **)(v1129 + 48);
      v1136 = (unsigned __int8 *)__p.__r_.__value_.__r.__words[0];
      if (!__p.__r_.__value_.__r.__words[0])
      {
        v1136 = (unsigned __int8 *)sub_22E3B8AAC(__p.__r_.__value_.__l.__size_);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v1136;
      }
      v1136[*v1136 + 1] = 1;
      v1137 = __p.__r_.__value_.__r.__words[0];
      v1138 = *__p.__r_.__value_.__l.__data_;
      *__p.__r_.__value_.__l.__data_ = v1138 + 1;
      *(_QWORD *)(v1137 + 8 * v1138 + 16) = v1135;
      if (SHIBYTE(v1259.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1259.__r_.__value_.__l.__data_);
      sub_22E3BB0B8((uint64_t)&__p);
      *(_QWORD *)(v1103 + 140) = (unint64_t)*(unsigned int *)(v1103 + 144) << 32;
    }
  }
  if ((~*(_QWORD *)(v1103 + 100) & 0xC00000000) == 0)
  {
    *(_QWORD *)(v1028 + 312) = 0x14500000000;
    if (*(char *)(v1028 + 311) < 0)
    {
      **(_BYTE **)(v1028 + 288) = 0;
      *(_QWORD *)(v1028 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v1028 + 288) = 0;
      *(_BYTE *)(v1028 + 311) = 0;
    }
    v1139 = (unsigned __int8 *)(v1028 + 320);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v1028 + 320;
    __p.__r_.__value_.__r.__words[2] = v1028;
    v1262 = 1;
    *(_BYTE *)(v1028 + 320) = 0;
    *(_DWORD *)(v1028 + 664) = 0;
    v1140 = *(unsigned int *)(v1028 + 776);
    if ((_DWORD)v1140)
    {
      v1141 = *(_QWORD *)(v1028 + 768);
      v1142 = 56 * v1140;
      do
      {
        if (*(char *)(v1141 + v1142 - 9) < 0)
          operator delete(*(void **)(v1141 + v1142 - 32));
        v1142 -= 56;
      }
      while (v1142);
      v1139 = (unsigned __int8 *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)(v1028 + 776) = 0;
      if (!v1139)
      {
        v1139 = (unsigned __int8 *)sub_22E3B8AAC(__p.__r_.__value_.__l.__size_);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v1139;
      }
    }
    else
    {
      *(_DWORD *)(v1028 + 776) = 0;
    }
    v1139[*v1139 + 1] = 1;
    v1143 = __p.__r_.__value_.__r.__words[0];
    v1144 = *__p.__r_.__value_.__l.__data_;
    *__p.__r_.__value_.__l.__data_ = v1144 + 1;
    *(_QWORD *)(v1143 + 8 * v1144 + 16) = "-fsycl-is-device";
    *(_BYTE *)(v1143 + (v1144 + 1) + 1) = 1;
    v1145 = __p.__r_.__value_.__r.__words[0];
    v1146 = *__p.__r_.__value_.__l.__data_;
    *__p.__r_.__value_.__l.__data_ = v1146 + 1;
    *(_QWORD *)(v1145 + 8 * v1146 + 16) = "-fsycl-is-host";
    sub_22E3BB0B8((uint64_t)&__p);
  }
  if (sub_22E6EBFB4((uint64_t)&v1283, 764) && (*(_BYTE *)(v1103 + 1) & 1) != 0)
  {
    *(_QWORD *)(v1028 + 312) = 0x14500000000;
    if (*(char *)(v1028 + 311) < 0)
    {
      **(_BYTE **)(v1028 + 288) = 0;
      *(_QWORD *)(v1028 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v1028 + 288) = 0;
      *(_BYTE *)(v1028 + 311) = 0;
    }
    v1147 = (unsigned __int8 *)(v1028 + 320);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v1028 + 320;
    __p.__r_.__value_.__r.__words[2] = v1028;
    v1262 = 1;
    *(_BYTE *)(v1028 + 320) = 0;
    *(_DWORD *)(v1028 + 664) = 0;
    v1148 = *(unsigned int *)(v1028 + 776);
    if ((_DWORD)v1148)
    {
      v1149 = *(_QWORD *)(v1028 + 768);
      v1150 = 56 * v1148;
      do
      {
        if (*(char *)(v1149 + v1150 - 9) < 0)
          operator delete(*(void **)(v1149 + v1150 - 32));
        v1150 -= 56;
      }
      while (v1150);
      v1147 = (unsigned __int8 *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)(v1028 + 776) = 0;
      if (!v1147)
      {
        v1147 = (unsigned __int8 *)sub_22E3B8AAC(__p.__r_.__value_.__l.__size_);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v1147;
      }
    }
    else
    {
      *(_DWORD *)(v1028 + 776) = 0;
    }
    v1147[*v1147 + 1] = 1;
    v1151 = __p.__r_.__value_.__r.__words[0];
    v1152 = *__p.__r_.__value_.__l.__data_;
    *__p.__r_.__value_.__l.__data_ = v1152 + 1;
    *(_QWORD *)(v1151 + 8 * v1152 + 16) = "-fgnu89-inline";
    sub_22E3B89A8((unsigned __int8 **)&__p, off_24FA701C0[(char)v1218 - 1], qword_22F45DE10[(char)(v1218 - 1)]);
    sub_22E3BB0B8((uint64_t)&__p);
  }
  if (sub_22E6EBFB4((uint64_t)&v1283, 767) && (*(_BYTE *)(v1103 + 68) & 0x40) == 0)
  {
    *(_QWORD *)(v1028 + 312) = 0x8400000000;
    if (*(char *)(v1028 + 311) < 0)
    {
      **(_BYTE **)(v1028 + 288) = 0;
      *(_QWORD *)(v1028 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v1028 + 288) = 0;
      *(_BYTE *)(v1028 + 311) = 0;
    }
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v1028 + 320;
    __p.__r_.__value_.__r.__words[2] = v1028;
    v1262 = 1;
    *(_BYTE *)(v1028 + 320) = 0;
    *(_DWORD *)(v1028 + 664) = 0;
    v1153 = *(unsigned int *)(v1028 + 776);
    if ((_DWORD)v1153)
    {
      v1154 = *(_QWORD *)(v1028 + 768);
      v1155 = 56 * v1153;
      do
      {
        if (*(char *)(v1154 + v1155 - 9) < 0)
          operator delete(*(void **)(v1154 + v1155 - 32));
        v1155 -= 56;
      }
      while (v1155);
    }
    *(_DWORD *)(v1028 + 776) = 0;
    sub_22E6EBFB4((uint64_t)&v1283, 767);
    llvm::opt::Arg::getAsString();
    if ((v1259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1156 = &v1259;
    else
      v1156 = (std::string *)v1259.__r_.__value_.__r.__words[0];
    if ((v1259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1157 = *((_BYTE *)&v1259.__r_.__value_.__s + 23) & 0x7F;
    else
      v1157 = v1259.__r_.__value_.__l.__size_;
    sub_22E3B89A8((unsigned __int8 **)&__p, v1156, v1157);
    if (SHIBYTE(v1259.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1259.__r_.__value_.__l.__data_);
    sub_22E3BB0B8((uint64_t)&__p);
  }
  if (sub_22E6EBFB4((uint64_t)&v1283, 1930) && (*(_BYTE *)(v1103 + 68) & 0x40) == 0)
  {
    *(_QWORD *)(v1028 + 312) = 0x8400000000;
    if (*(char *)(v1028 + 311) < 0)
    {
      **(_BYTE **)(v1028 + 288) = 0;
      *(_QWORD *)(v1028 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v1028 + 288) = 0;
      *(_BYTE *)(v1028 + 311) = 0;
    }
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v1028 + 320;
    __p.__r_.__value_.__r.__words[2] = v1028;
    v1262 = 1;
    *(_BYTE *)(v1028 + 320) = 0;
    *(_DWORD *)(v1028 + 664) = 0;
    v1158 = *(unsigned int *)(v1028 + 776);
    if ((_DWORD)v1158)
    {
      v1159 = *(_QWORD *)(v1028 + 768);
      v1160 = 56 * v1158;
      do
      {
        if (*(char *)(v1159 + v1160 - 9) < 0)
          operator delete(*(void **)(v1159 + v1160 - 32));
        v1160 -= 56;
      }
      while (v1160);
    }
    *(_DWORD *)(v1028 + 776) = 0;
    sub_22E6EBFB4((uint64_t)&v1283, 1930);
    llvm::opt::Arg::getAsString();
    if ((v1259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1161 = &v1259;
    else
      v1161 = (std::string *)v1259.__r_.__value_.__r.__words[0];
    if ((v1259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1162 = *((_BYTE *)&v1259.__r_.__value_.__s + 23) & 0x7F;
    else
      v1162 = v1259.__r_.__value_.__l.__size_;
    sub_22E3B89A8((unsigned __int8 **)&__p, v1161, v1162);
    if (SHIBYTE(v1259.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1259.__r_.__value_.__l.__data_);
    sub_22E3BB0B8((uint64_t)&__p);
  }
  if (sub_22E6EBFB4((uint64_t)&v1283, 738))
  {
    v1163 = *(_DWORD *)(v1103 + 52);
    if ((v1163 & 0x100000) != 0)
    {
      *(_QWORD *)(v1028 + 312) = 0x31B00000000;
      if (*(char *)(v1028 + 311) < 0)
      {
        **(_BYTE **)(v1028 + 288) = 0;
        *(_QWORD *)(v1028 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v1028 + 288) = 0;
        *(_BYTE *)(v1028 + 311) = 0;
      }
      v1164 = (unsigned __int8 *)(v1028 + 320);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v1028 + 320;
      __p.__r_.__value_.__r.__words[2] = v1028;
      v1262 = 1;
      *(_BYTE *)(v1028 + 320) = 0;
      *(_DWORD *)(v1028 + 664) = 0;
      v1165 = *(unsigned int *)(v1028 + 776);
      if ((_DWORD)v1165)
      {
        v1166 = *(_QWORD *)(v1028 + 768);
        v1167 = 56 * v1165;
        do
        {
          if (*(char *)(v1166 + v1167 - 9) < 0)
            operator delete(*(void **)(v1166 + v1167 - 32));
          v1167 -= 56;
        }
        while (v1167);
        v1164 = (unsigned __int8 *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)(v1028 + 776) = 0;
        if (!v1164)
        {
          v1164 = (unsigned __int8 *)sub_22E3B8AAC(__p.__r_.__value_.__l.__size_);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v1164;
        }
      }
      else
      {
        *(_DWORD *)(v1028 + 776) = 0;
      }
      v1164[*v1164 + 1] = 2;
      v1168 = __p.__r_.__value_.__r.__words[0];
      v1169 = *__p.__r_.__value_.__l.__data_;
      *__p.__r_.__value_.__l.__data_ = v1169 + 1;
      *(_QWORD *)(v1168 + 8 * v1169 + 16) = 0;
      sub_22E3BB0B8((uint64_t)&__p);
      v1163 = *(_DWORD *)(v1103 + 52);
      if ((v1163 & 0x8000) != 0)
        goto LABEL_2599;
LABEL_2585:
      if ((v1163 & 0x80000) != 0)
      {
LABEL_2611:
        *(_QWORD *)(v1028 + 312) = 0x31B00000000;
        if (*(char *)(v1028 + 311) < 0)
        {
          **(_BYTE **)(v1028 + 288) = 0;
          *(_QWORD *)(v1028 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v1028 + 288) = 0;
          *(_BYTE *)(v1028 + 311) = 0;
        }
        v1176 = (unsigned __int8 *)(v1028 + 320);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v1028 + 320;
        __p.__r_.__value_.__r.__words[2] = v1028;
        v1262 = 1;
        *(_BYTE *)(v1028 + 320) = 0;
        *(_DWORD *)(v1028 + 664) = 0;
        v1177 = *(unsigned int *)(v1028 + 776);
        if ((_DWORD)v1177)
        {
          v1178 = *(_QWORD *)(v1028 + 768);
          v1179 = 56 * v1177;
          do
          {
            if (*(char *)(v1178 + v1179 - 9) < 0)
              operator delete(*(void **)(v1178 + v1179 - 32));
            v1179 -= 56;
          }
          while (v1179);
          v1176 = (unsigned __int8 *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)(v1028 + 776) = 0;
          if (!v1176)
          {
            v1176 = (unsigned __int8 *)sub_22E3B8AAC(__p.__r_.__value_.__l.__size_);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v1176;
          }
        }
        else
        {
          *(_DWORD *)(v1028 + 776) = 0;
        }
        v1176[*v1176 + 1] = 2;
        v1180 = __p.__r_.__value_.__r.__words[0];
        v1181 = *__p.__r_.__value_.__l.__data_;
        *__p.__r_.__value_.__l.__data_ = v1181 + 1;
        *(_QWORD *)(v1180 + 8 * v1181 + 16) = 2;
        sub_22E3BB0B8((uint64_t)&__p);
      }
    }
    else
    {
      if ((v1163 & 0x8000) == 0)
        goto LABEL_2585;
LABEL_2599:
      *(_QWORD *)(v1028 + 312) = 0x31B00000000;
      if (*(char *)(v1028 + 311) < 0)
      {
        **(_BYTE **)(v1028 + 288) = 0;
        *(_QWORD *)(v1028 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v1028 + 288) = 0;
        *(_BYTE *)(v1028 + 311) = 0;
      }
      v1170 = (unsigned __int8 *)(v1028 + 320);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v1028 + 320;
      __p.__r_.__value_.__r.__words[2] = v1028;
      v1262 = 1;
      *(_BYTE *)(v1028 + 320) = 0;
      *(_DWORD *)(v1028 + 664) = 0;
      v1171 = *(unsigned int *)(v1028 + 776);
      if ((_DWORD)v1171)
      {
        v1172 = *(_QWORD *)(v1028 + 768);
        v1173 = 56 * v1171;
        do
        {
          if (*(char *)(v1172 + v1173 - 9) < 0)
            operator delete(*(void **)(v1172 + v1173 - 32));
          v1173 -= 56;
        }
        while (v1173);
        v1170 = (unsigned __int8 *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)(v1028 + 776) = 0;
        if (!v1170)
        {
          v1170 = (unsigned __int8 *)sub_22E3B8AAC(__p.__r_.__value_.__l.__size_);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v1170;
        }
      }
      else
      {
        *(_DWORD *)(v1028 + 776) = 0;
      }
      v1170[*v1170 + 1] = 2;
      v1174 = __p.__r_.__value_.__r.__words[0];
      v1175 = *__p.__r_.__value_.__l.__data_;
      *__p.__r_.__value_.__l.__data_ = v1175 + 1;
      *(_QWORD *)(v1174 + 8 * v1175 + 16) = 1;
      sub_22E3BB0B8((uint64_t)&__p);
      if ((*(_DWORD *)(v1103 + 52) & 0x80000) != 0)
        goto LABEL_2611;
    }
  }
  if (sub_22E6EBFB4((uint64_t)&v1283, 197))
  {
    v1182 = *(_QWORD *)(v1103 + 56);
    if ((v1182 & 0x100000000) != 0 || v1182 >= 0x65)
    {
      *(_QWORD *)(v1028 + 312) = 0x37F00000000;
      if (*(char *)(v1028 + 311) < 0)
      {
        **(_BYTE **)(v1028 + 288) = 0;
        *(_QWORD *)(v1028 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v1028 + 288) = 0;
        *(_BYTE *)(v1028 + 311) = 0;
      }
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v1028 + 320;
      __p.__r_.__value_.__r.__words[2] = v1028;
      v1262 = 1;
      *(_BYTE *)(v1028 + 320) = 0;
      *(_DWORD *)(v1028 + 664) = 0;
      v1183 = *(unsigned int *)(v1028 + 776);
      if ((_DWORD)v1183)
      {
        v1184 = *(_QWORD *)(v1028 + 768);
        v1185 = 56 * v1183;
        do
        {
          if (*(char *)(v1184 + v1185 - 9) < 0)
            operator delete(*(void **)(v1184 + v1185 - 32));
          v1185 -= 56;
        }
        while (v1185);
      }
      *(_DWORD *)(v1028 + 776) = 0;
      sub_22F1D47B8(v1103, &v1259);
      if ((v1259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v1186 = &v1259;
      else
        v1186 = (std::string *)v1259.__r_.__value_.__r.__words[0];
      if ((v1259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v1187 = *((_BYTE *)&v1259.__r_.__value_.__s + 23) & 0x7F;
      else
        v1187 = v1259.__r_.__value_.__l.__size_;
      sub_22E3B89A8((unsigned __int8 **)&__p, v1186, v1187);
      sub_22E6EBFB4((uint64_t)&v1283, 197);
      llvm::opt::Arg::getAsString();
      if ((v1257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v1188 = &v1257;
      else
        v1188 = (std::string *)v1257.__r_.__value_.__r.__words[0];
      if ((v1257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v1189 = *((_BYTE *)&v1257.__r_.__value_.__s + 23) & 0x7F;
      else
        v1189 = v1257.__r_.__value_.__l.__size_;
      sub_22E3B89A8((unsigned __int8 **)&__p, v1188, v1189);
      if (SHIBYTE(v1257.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1257.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1259.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1259.__r_.__value_.__l.__data_);
      sub_22E3BB0B8((uint64_t)&__p);
    }
  }
  v1190 = sub_22E6EBFB4((uint64_t)&v1283, 564);
  if (v1190)
  {
    v1191 = v1190;
    v1192 = (*(_DWORD *)(v1103 + 240) >> 10) & 6;
    v1193 = v1192 != 2 || v1110 == 41;
    v1194 = !v1193;
    v1195 = ((_DWORD)v1288 - 43) < 0xFFFFFFFE && v1192 == 4;
    if (v1195 || v1194)
    {
      *(_QWORD *)(v1028 + 312) = 0x14500000000;
      if (*(char *)(v1028 + 311) < 0)
      {
        **(_BYTE **)(v1028 + 288) = 0;
        *(_QWORD *)(v1028 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v1028 + 288) = 0;
        *(_BYTE *)(v1028 + 311) = 0;
      }
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v1028 + 320;
      __p.__r_.__value_.__r.__words[2] = v1028;
      v1262 = 1;
      *(_BYTE *)(v1028 + 320) = 0;
      *(_DWORD *)(v1028 + 664) = 0;
      v1196 = *(unsigned int *)(v1028 + 776);
      if ((_DWORD)v1196)
      {
        v1197 = *(_QWORD *)(v1028 + 768);
        v1198 = 56 * v1196;
        do
        {
          if (*(char *)(v1197 + v1198 - 9) < 0)
            operator delete(*(void **)(v1197 + v1198 - 32));
          v1198 -= 56;
        }
        while (v1198);
      }
      *(_DWORD *)(v1028 + 776) = 0;
      sub_22E3B89A8((unsigned __int8 **)&__p, *(void **)(v1191 + 24), *(_QWORD *)(v1191 + 32));
      if ((__len.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v1199 = &__len;
      else
        v1199 = (std::string *)__len.__r_.__value_.__r.__words[0];
      if ((__len.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v1200 = *((_BYTE *)&__len.__r_.__value_.__s + 23) & 0x7F;
      else
        v1200 = __len.__r_.__value_.__l.__size_;
      sub_22E3B89A8((unsigned __int8 **)&__p, v1199, v1200);
      sub_22E3BB0B8((uint64_t)&__p);
    }
  }
  if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__len.__r_.__value_.__l.__data_);
  v1201 = *(_DWORD *)(v1028 + 188);
  if (SHIBYTE(data) < 0)
    operator delete(v1230[0]);
  sub_22E72212C((uint64_t)&v1283);
  return v1201 == v1206;
}

double sub_22E70B070@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t Range;
  uint64_t v7;
  uint64_t v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  v14 = a2;
  Range = llvm::opt::ArgList::getRange();
  v7 = *(_QWORD *)(a1 + 8);
  v8 = v7 + 8 * HIDWORD(Range);
  *(_QWORD *)&v12 = v7 + 8 * Range;
  *((_QWORD *)&v12 + 1) = v8;
  LODWORD(v13) = a2;
  sub_22E721830((uint64_t)&v12);
  *(_QWORD *)&v10 = v8;
  *((_QWORD *)&v10 + 1) = v8;
  LODWORD(v11) = a2;
  sub_22E721830((uint64_t)&v10);
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  result = *(double *)&v10;
  *(_OWORD *)(a3 + 24) = v10;
  *(_QWORD *)(a3 + 40) = v11;
  return result;
}

void sub_22E70B104(uint64_t a1, uint64_t a2, std::string *a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  void **v11;
  int v12;
  int v13;
  void **v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  int v25;
  int v26;
  void **v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  void **v36;
  int v37;
  int v38;
  void **v39;
  void **v40;
  int v41;
  int v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  void **v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void **v64;
  int v65;
  int v66;
  unint64_t v67;
  void **v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void **v77;
  int v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void **v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  void **v100;
  int v101;
  int v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  int v106;
  int v107;
  const char **v108;
  const char *v109;
  size_t v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  std::string *v116;
  size_t v117;
  uint64_t v118;
  unsigned __int8 *v119;
  std::string::size_type v120;
  uint64_t v121;
  _QWORD *LastArgValue;
  unint64_t v123;
  const char *v124;
  std::string::size_type v125;
  BOOL v126;
  BOOL v128;
  BOOL v132;
  std::string *p_dst;
  std::string *v135;
  uint64_t v136;
  uint64_t v137;
  std::string *v138;
  std::string::size_type v139;
  std::string *v140;
  std::string::size_type v141;
  unsigned __int8 *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  std::string *v148;
  std::string::size_type v149;
  std::string *v150;
  std::string::size_type v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  std::string::size_type v155;
  uint64_t v156;
  std::string *v157;
  size_t size;
  uint64_t v159;
  uint64_t v160;
  std::string::size_type v161;
  uint64_t v162;
  const char *v163;
  size_t v164;
  std::string::size_type v165;
  std::string *v166;
  uint64_t v167;
  uint64_t v168;
  _OWORD *v169;
  std::string::size_type v170;
  std::string::size_type v171;
  std::string::size_type v172;
  char v173;
  BOOL v174;
  std::string::size_type v175;
  uint64_t v176;
  int v177;
  std::string::size_type v178;
  const void *v179;
  std::string *v180;
  uint64_t v181;
  uint64_t v182;
  int data;
  int v184;
  uint64_t v185;
  std::string::size_type v186;
  const void *v187;
  std::string *v188;
  std::string::size_type v189;
  _QWORD *v190;
  char *v191;
  std::string *v192;
  size_t v193;
  std::string *v194;
  size_t v195;
  _QWORD *v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  void **v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  unint64_t v206;
  char *v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  char *v212;
  char *v213;
  char *v214;
  _QWORD *v215;
  __int128 v216;
  char *v217;
  std::__shared_weak_count *v218;
  unint64_t *p_shared_owners;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char v224;
  BOOL v225;
  void *v226;
  size_t v227;
  size_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  const char **v234;
  const char *v235;
  std::string::size_type v236;
  std::string::size_type v237;
  std::string::size_type v238;
  std::string::size_type v239;
  std::string::size_type v240;
  std::string::size_type v241;
  std::string::size_type v242;
  const void *v243;
  std::string::size_type v244;
  std::string *v245;
  void **v246;
  unint64_t v247;
  char v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  std::string *v253;
  size_t v254;
  uint64_t v255;
  unsigned __int8 *v256;
  std::string::size_type v257;
  uint64_t v258;
  uint64_t v259;
  std::string::size_type v260;
  const char **v261;
  char *v262;
  size_t v263;
  std::string::size_type v264;
  _BYTE *v265;
  BOOL v266;
  std::string *v267;
  uint64_t v268;
  uint64_t v269;
  std::string *v270;
  unint64_t v271;
  std::string *v272;
  unint64_t v273;
  unint64_t v274;
  char *v275;
  std::string *v276;
  char *v277;
  __int128 v278;
  int64x2_t v279;
  char v280;
  std::string *v281;
  uint64_t v282;
  std::string::size_type v283;
  int64_t j;
  std::string::size_type v285;
  std::string::size_type v286;
  std::string::size_type v287;
  std::string::size_type v288;
  std::string::size_type v289;
  BOOL v290;
  char *v291;
  std::string *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  std::string *v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  __int128 v303;
  char *v304;
  int v305;
  uint64_t v306;
  unsigned __int8 *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  std::string::size_type v311;
  uint64_t v312;
  std::string::size_type v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  const void *v317;
  std::string::size_type v318;
  _BYTE *v319;
  uint64_t v320;
  uint64_t v321;
  void **v322;
  __int128 v323;
  std::string::size_type v324;
  unsigned __int8 *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  std::string::size_type v329;
  uint64_t v330;
  std::string::size_type v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  const char **v336;
  const char *v337;
  size_t v338;
  size_t v339;
  _BOOL4 v340;
  unint64_t v341;
  unsigned int v342;
  int v343;
  int v344;
  int v345;
  int v346;
  uint64_t v347;
  int v348;
  uint64_t v349;
  _BOOL4 v350;
  uint64_t v351;
  size_t v352;
  BOOL v353;
  unsigned int v355;
  unsigned int v356;
  int v357;
  size_t v358;
  int v359;
  _BOOL4 v361;
  size_t v362;
  _BOOL4 v364;
  unsigned int v365;
  int v366;
  uint64_t v367;
  size_t v368;
  BOOL v370;
  BOOL v372;
  BOOL v373;
  uint64_t v374;
  uint64_t v375;
  std::string::size_type v376;
  std::string::size_type v377;
  std::string *v378;
  int v379;
  unint64_t v380;
  unint64_t v381;
  unsigned int v382;
  int v383;
  unint64_t v384;
  int v385;
  BOOL v389;
  uint64_t v390;
  char v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  std::string *v396;
  size_t v397;
  uint64_t v398;
  unsigned __int8 *v399;
  std::string::size_type v400;
  uint64_t v401;
  unsigned int v402;
  uint64_t v403;
  unsigned int v404;
  uint64_t v405;
  char v406;
  int v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t v411;
  std::string::size_type v412;
  char *v413;
  uint64_t v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  char *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  char v422;
  void *v423;
  size_t v424;
  uint64_t v425;
  uint64_t v426;
  unsigned int v427;
  uint64_t v428;
  std::string::size_type v429;
  char v430;
  int v431;
  std::string::size_type v432;
  std::string::size_type v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  std::string::size_type v441;
  unsigned __int8 *v442;
  uint64_t v443;
  unsigned int v444;
  unsigned __int8 v445;
  unsigned int v446;
  unsigned int v447;
  char v449;
  uint64_t v450;
  _BYTE *v451;
  unsigned int v452;
  uint64_t v453;
  _QWORD *v454;
  char v455;
  const void *v456;
  int v457;
  size_t v458;
  size_t v459;
  unint64_t v460;
  uint64_t v461;
  uint64_t v462;
  _QWORD *v463;
  uint64_t v464;
  uint64_t v465;
  unsigned int v466;
  _QWORD *v467;
  char v468;
  int v469;
  size_t v470;
  size_t v471;
  uint64_t v472;
  _QWORD *v473;
  uint64_t v474;
  int v475;
  uint64_t v476;
  void **v477;
  char v478;
  int v479;
  const void *v480;
  int v481;
  char v482;
  std::string::size_type v483;
  std::string::size_type v484;
  char v485;
  void *v486;
  std::string::value_type *v487;
  uint64_t v488;
  uint64_t v489;
  char v490;
  _QWORD *v491;
  std::string *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  BOOL v496;
  _QWORD *v497;
  std::string::size_type v498;
  char v499;
  const void *v500;
  std::string::size_type v501;
  std::string::size_type v502;
  std::__shared_weak_count *v503;
  unint64_t *v504;
  unint64_t v505;
  std::string *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  uint64_t v511;
  unint64_t v512;
  unint64_t v513;
  unint64_t v514;
  char *v515;
  std::string *v516;
  char *v517;
  __int128 v518;
  int64x2_t v519;
  char v520;
  std::string *v521;
  std::string::size_type v522;
  std::string::size_type v523;
  std::string::size_type v524;
  std::string::size_type v525;
  std::string::size_type v526;
  std::string::size_type v527;
  char *v528;
  std::string::size_type v529;
  std::string::size_type v530;
  _QWORD *v532;
  std::string *v534;
  uint64_t v535;
  uint64_t i;
  unint64_t v537;
  std::string::value_type *v538;
  uint64_t v539;
  int v540;
  int v541;
  int v542;
  int v543;
  uint64_t *v544;
  std::string::size_type v545;
  uint64_t v546;
  void **v547;
  _BOOL4 v548;
  char v549;
  char v550;
  uint64_t v551;
  _QWORD v552[3];
  __int16 v553;
  __int128 v554;
  _QWORD v555[2];
  _QWORD v556[3];
  __int16 v557;
  std::string v558;
  void *v559[2];
  uint64_t v560;
  void *v561[2];
  uint64_t v562;
  std::string v563;
  void *v564[2];
  uint64_t v565;
  void *v566[2];
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  _QWORD v571[3];
  _QWORD v572[3];
  _QWORD v573[3];
  std::string v574;
  void *v575[2];
  uint64_t v576;
  void *v577[2];
  uint64_t v578;
  std::string v579;
  void *v580[2];
  uint64_t v581;
  void *v582[2];
  uint64_t v583;
  std::string v584;
  void *v585[2];
  uint64_t v586;
  void *v587[2];
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  _QWORD v592[3];
  _QWORD v593[3];
  _QWORD v594[3];
  std::string v595;
  void *v596[2];
  uint64_t v597;
  void *v598[2];
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  _QWORD v603[3];
  _QWORD v604[3];
  _QWORD v605[3];
  std::string v606;
  void *v607[2];
  uint64_t v608;
  void *v609[2];
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  _QWORD v614[3];
  _QWORD v615[3];
  _QWORD v616[3];
  std::string v617;
  void *v618[2];
  uint64_t v619;
  void *v620[2];
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  _QWORD v625[3];
  _QWORD v626[3];
  _QWORD v627[3];
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  _QWORD v631[3];
  _QWORD v632[3];
  _QWORD v633[3];
  std::string v634;
  void *v635[2];
  uint64_t v636;
  void *v637[2];
  uint64_t v638;
  std::string v639;
  void *v640[2];
  uint64_t v641;
  void *v642[2];
  uint64_t v643;
  std::string v644;
  void *v645[2];
  uint64_t v646;
  void *v647[2];
  uint64_t v648;
  std::string v649;
  void *v650[2];
  uint64_t v651;
  void *v652[2];
  uint64_t v653;
  std::string v654;
  void *v655[2];
  uint64_t v656;
  void *v657[2];
  uint64_t v658;
  std::string __src;
  void *v660[2];
  uint64_t v661;
  void *__p[2];
  uint64_t v663;
  char *v664;
  size_t __len;
  std::__shared_weak_count *v666;
  uint64_t v667[2];
  _QWORD *v668;
  uint64_t v669;
  std::string v670;
  _OWORD v671[2];
  _BYTE v672[29];
  std::string v673;
  char v674;
  std::string v675;
  char v676;
  std::string __dst;
  char v678;
  std::string v679;
  unint64_t v680;
  uint64_t v681;
  uint64_t v682;

  v7 = a1;
  v682 = *MEMORY[0x24BDAC8D0];
  v8 = a1 + 72;
  if (*(char *)(a1 + 95) < 0)
  {
    sub_22E3BB2B4(__p, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
    v9 = *(char *)(v7 + 95);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
    if (v9 < 0)
      operator delete(*(void **)v8);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v8;
    v663 = *(_QWORD *)(a1 + 88);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
  }
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_DWORD *)(v7 + 88) = v670.__r_.__value_.__l.__data_;
  *(_DWORD *)(v7 + 91) = *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3);
  *(_BYTE *)(v7 + 95) = 0;
  if (SHIBYTE(v663) < 0)
    operator delete(__p[0]);
  sub_22E6EC3DC((uint64_t)&v670, 126, a2);
  if (LOBYTE(v671[0]))
  {
    if (*(char *)(v7 + 95) < 0)
    {
      sub_22E3BB2B4(v660, *(void **)(v7 + 72), *(_QWORD *)(v7 + 80));
    }
    else
    {
      *(_OWORD *)v660 = *(_OWORD *)v8;
      v661 = *(_QWORD *)(v8 + 16);
    }
    v10 = SHIBYTE(v670.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v670.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&__src, v670.__r_.__value_.__l.__data_, v670.__r_.__value_.__l.__size_);
    else
      __src = v670;
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v679, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
    else
      v679 = __src;
    if (*(char *)(v7 + 95) < 0)
      operator delete(*(void **)v8);
    *(std::string *)v8 = v679;
    *((_BYTE *)&v679.__r_.__value_.__s + 23) = 0;
    v679.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__src.__r_.__value_.__l.__data_);
    if (SHIBYTE(v661) < 0)
    {
      operator delete(v660[0]);
      if ((v10 & 0x80000000) == 0)
        goto LABEL_23;
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_23;
    }
    operator delete(v670.__r_.__value_.__l.__data_);
  }
LABEL_23:
  *(_QWORD *)v7 &= ~0x800uLL;
  if (sub_22E721714(a2, 125))
    *(_QWORD *)v7 |= 0x800uLL;
  if (sub_22E721714(a2, 2777))
    *(_DWORD *)(v7 + 20) |= 1u;
  if (sub_22E721714(a2, 2784))
    *(_DWORD *)(v7 + 20) |= 2u;
  if (sub_22E721714(a2, 2780))
    *(_DWORD *)(v7 + 20) |= 0xCu;
  if (sub_22E721714(a2, 2773))
    *(_DWORD *)(v7 + 20) |= 0xCFCu;
  if (sub_22E721714(a2, 2782))
    *(_DWORD *)(v7 + 20) |= 4u;
  if (sub_22E721714(a2, 2783))
    *(_DWORD *)(v7 + 20) |= 8u;
  if (sub_22E721714(a2, 2779))
    *(_DWORD *)(v7 + 20) |= 0x1000u;
  if (sub_22E721714(a2, 2774))
    *(_DWORD *)(v7 + 20) |= 0x10u;
  if (sub_22E721714(a2, 2776))
    *(_DWORD *)(v7 + 20) |= 0x20u;
  if (sub_22E721714(a2, 2778))
    *(_DWORD *)(v7 + 20) |= 0x40u;
  if (sub_22E721714(a2, 2781))
    *(_DWORD *)(v7 + 20) |= 0x80u;
  if (sub_22E721714(a2, 2772))
    *(_DWORD *)(v7 + 20) |= 0x100u;
  if (sub_22E721714(a2, 2786))
    *(_DWORD *)(v7 + 20) |= 0x200u;
  if (sub_22E721714(a2, 2785))
    *(_DWORD *)(v7 + 20) |= 0x400u;
  if (sub_22E721714(a2, 2775))
    *(_DWORD *)(v7 + 20) |= 0x800u;
  v11 = (void **)(v7 + 24);
  if (*(char *)(v7 + 47) < 0)
  {
    sub_22E3BB2B4(v657, *(void **)(v7 + 24), *(_QWORD *)(v7 + 32));
    v12 = *(char *)(v7 + 47);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
    if (v12 < 0)
      operator delete(*v11);
  }
  else
  {
    *(_OWORD *)v657 = *(_OWORD *)v11;
    v658 = *(_QWORD *)(v7 + 40);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
  }
  *v11 = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_DWORD *)(v7 + 40) = v670.__r_.__value_.__l.__data_;
  *(_DWORD *)(v7 + 43) = *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3);
  *(_BYTE *)(v7 + 47) = 0;
  if (SHIBYTE(v658) < 0)
    operator delete(v657[0]);
  sub_22E6EC3DC((uint64_t)&v670, 2771, a2);
  if (LOBYTE(v671[0]))
  {
    if (*(char *)(v7 + 47) < 0)
    {
      sub_22E3BB2B4(v655, *(void **)(v7 + 24), *(_QWORD *)(v7 + 32));
    }
    else
    {
      *(_OWORD *)v655 = *(_OWORD *)v11;
      v656 = *(_QWORD *)(v7 + 40);
    }
    v13 = SHIBYTE(v670.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v670.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v654, v670.__r_.__value_.__l.__data_, v670.__r_.__value_.__l.__size_);
    else
      v654 = v670;
    if (SHIBYTE(v654.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v679, v654.__r_.__value_.__l.__data_, v654.__r_.__value_.__l.__size_);
    else
      v679 = v654;
    if (*(char *)(v7 + 47) < 0)
      operator delete(*v11);
    *(_OWORD *)v11 = *(_OWORD *)&v679.__r_.__value_.__l.__data_;
    *(_QWORD *)(v7 + 40) = *((_QWORD *)&v679.__r_.__value_.__l + 2);
    *((_BYTE *)&v679.__r_.__value_.__s + 23) = 0;
    v679.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v654.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v654.__r_.__value_.__l.__data_);
    if (SHIBYTE(v656) < 0)
    {
      operator delete(v655[0]);
      if ((v13 & 0x80000000) == 0)
        goto LABEL_79;
    }
    else if ((v13 & 0x80000000) == 0)
    {
      goto LABEL_79;
    }
    operator delete(v670.__r_.__value_.__l.__data_);
  }
LABEL_79:
  v14 = (void **)(v7 + 96);
  if (*(char *)(v7 + 119) < 0)
  {
    sub_22E3BB2B4(v652, *(void **)(v7 + 96), *(_QWORD *)(v7 + 104));
    v15 = *(char *)(v7 + 119);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
    if (v15 < 0)
      operator delete(*v14);
  }
  else
  {
    *(_OWORD *)v652 = *(_OWORD *)v14;
    v653 = *(_QWORD *)(v7 + 112);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
  }
  *v14 = 0;
  *(_QWORD *)(v7 + 104) = 0;
  *(_DWORD *)(v7 + 112) = v670.__r_.__value_.__l.__data_;
  *(_DWORD *)(v7 + 115) = *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3);
  *(_BYTE *)(v7 + 119) = 0;
  if (SHIBYTE(v653) < 0)
    operator delete(v652[0]);
  sub_22E6EC3DC((uint64_t)&v670, 2026, a2);
  if (LOBYTE(v671[0]))
  {
    if (*(char *)(v7 + 119) < 0)
    {
      sub_22E3BB2B4(v650, *(void **)(v7 + 96), *(_QWORD *)(v7 + 104));
    }
    else
    {
      *(_OWORD *)v650 = *(_OWORD *)v14;
      v651 = *(_QWORD *)(v7 + 112);
    }
    v16 = SHIBYTE(v670.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v670.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v649, v670.__r_.__value_.__l.__data_, v670.__r_.__value_.__l.__size_);
    else
      v649 = v670;
    if (SHIBYTE(v649.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v679, v649.__r_.__value_.__l.__data_, v649.__r_.__value_.__l.__size_);
    else
      v679 = v649;
    if (*(char *)(v7 + 119) < 0)
      operator delete(*v14);
    *(_OWORD *)v14 = *(_OWORD *)&v679.__r_.__value_.__l.__data_;
    *(_QWORD *)(v7 + 112) = *((_QWORD *)&v679.__r_.__value_.__l + 2);
    *((_BYTE *)&v679.__r_.__value_.__s + 23) = 0;
    v679.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v649.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v649.__r_.__value_.__l.__data_);
    if (SHIBYTE(v651) < 0)
    {
      operator delete(v650[0]);
      if ((v16 & 0x80000000) == 0)
        goto LABEL_103;
    }
    else if ((v16 & 0x80000000) == 0)
    {
      goto LABEL_103;
    }
    operator delete(v670.__r_.__value_.__l.__data_);
  }
LABEL_103:
  *(_QWORD *)v7 &= ~0x2000000uLL;
  v17 = sub_22E721714(a2, 2024);
  v18 = *(_QWORD *)v7;
  if (v17)
    v18 = *(_QWORD *)v7 | 0x2000000;
  *(_QWORD *)v7 = v18 & 0xFFFFFFFFFBFFFFFFLL;
  if (sub_22E721714(a2, 2025))
    *(_QWORD *)v7 |= 0x4000000uLL;
  v19 = (void **)(v7 + 120);
  if (*(char *)(v7 + 143) < 0)
  {
    sub_22E3BB2B4(v647, *(void **)(v7 + 120), *(_QWORD *)(v7 + 128));
    v20 = *(char *)(v7 + 143);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
    if (v20 < 0)
      operator delete(*v19);
  }
  else
  {
    *(_OWORD *)v647 = *(_OWORD *)v19;
    v648 = *(_QWORD *)(v7 + 136);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
  }
  *v19 = 0;
  *(_QWORD *)(v7 + 128) = 0;
  *(_DWORD *)(v7 + 136) = v670.__r_.__value_.__l.__data_;
  *(_DWORD *)(v7 + 139) = *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3);
  *(_BYTE *)(v7 + 143) = 0;
  if (SHIBYTE(v648) < 0)
    operator delete(v647[0]);
  sub_22E6EC3DC((uint64_t)&v670, 2027, a2);
  if (LOBYTE(v671[0]))
  {
    if (*(char *)(v7 + 143) < 0)
    {
      sub_22E3BB2B4(v645, *(void **)(v7 + 120), *(_QWORD *)(v7 + 128));
    }
    else
    {
      *(_OWORD *)v645 = *(_OWORD *)v19;
      v646 = *(_QWORD *)(v7 + 136);
    }
    v21 = SHIBYTE(v670.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v670.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v644, v670.__r_.__value_.__l.__data_, v670.__r_.__value_.__l.__size_);
    else
      v644 = v670;
    if (SHIBYTE(v644.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v679, v644.__r_.__value_.__l.__data_, v644.__r_.__value_.__l.__size_);
    else
      v679 = v644;
    if (*(char *)(v7 + 143) < 0)
      operator delete(*v19);
    *(_OWORD *)v19 = *(_OWORD *)&v679.__r_.__value_.__l.__data_;
    *(_QWORD *)(v7 + 136) = *((_QWORD *)&v679.__r_.__value_.__l + 2);
    *((_BYTE *)&v679.__r_.__value_.__s + 23) = 0;
    v679.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v644.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v644.__r_.__value_.__l.__data_);
    if (SHIBYTE(v646) < 0)
    {
      operator delete(v645[0]);
      if ((v21 & 0x80000000) == 0)
        goto LABEL_131;
    }
    else if ((v21 & 0x80000000) == 0)
    {
      goto LABEL_131;
    }
    operator delete(v670.__r_.__value_.__l.__data_);
  }
LABEL_131:
  *(_QWORD *)v7 &= ~0x8000000uLL;
  v22 = sub_22E721714(a2, 2022);
  v23 = *(_QWORD *)v7;
  if (v22)
    v23 = *(_QWORD *)v7 | 0x8000000;
  *(_QWORD *)v7 = v23 & 0xFFFFFFFFEFFFFFFFLL;
  if (sub_22E721714(a2, 2023))
    *(_QWORD *)v7 |= 0x10000000uLL;
  v24 = (void **)(v7 + 352);
  if (*(char *)(v7 + 375) < 0)
  {
    sub_22E3BB2B4(v642, *(void **)(v7 + 352), *(_QWORD *)(v7 + 360));
    v25 = *(char *)(v7 + 375);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
    if (v25 < 0)
      operator delete(*v24);
  }
  else
  {
    *(_OWORD *)v642 = *(_OWORD *)v24;
    v643 = *(_QWORD *)(v7 + 368);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
  }
  *v24 = 0;
  *(_QWORD *)(v7 + 360) = 0;
  *(_DWORD *)(v7 + 368) = v670.__r_.__value_.__l.__data_;
  *(_DWORD *)(v7 + 371) = *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3);
  *(_BYTE *)(v7 + 375) = 0;
  if (SHIBYTE(v643) < 0)
    operator delete(v642[0]);
  sub_22E6EC3DC((uint64_t)&v670, 2875, a2);
  if (LOBYTE(v671[0]))
  {
    if (*(char *)(v7 + 375) < 0)
    {
      sub_22E3BB2B4(v640, *(void **)(v7 + 352), *(_QWORD *)(v7 + 360));
    }
    else
    {
      *(_OWORD *)v640 = *(_OWORD *)v24;
      v641 = *(_QWORD *)(v7 + 368);
    }
    v26 = SHIBYTE(v670.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v670.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v639, v670.__r_.__value_.__l.__data_, v670.__r_.__value_.__l.__size_);
    else
      v639 = v670;
    if (SHIBYTE(v639.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v679, v639.__r_.__value_.__l.__data_, v639.__r_.__value_.__l.__size_);
    else
      v679 = v639;
    if (*(char *)(v7 + 375) < 0)
      operator delete(*v24);
    *(_OWORD *)v24 = *(_OWORD *)&v679.__r_.__value_.__l.__data_;
    *(_QWORD *)(v7 + 368) = *((_QWORD *)&v679.__r_.__value_.__l + 2);
    *((_BYTE *)&v679.__r_.__value_.__s + 23) = 0;
    v679.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v639.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v639.__r_.__value_.__l.__data_);
    if (SHIBYTE(v641) < 0)
    {
      operator delete(v640[0]);
      if ((v26 & 0x80000000) == 0)
        goto LABEL_159;
    }
    else if ((v26 & 0x80000000) == 0)
    {
      goto LABEL_159;
    }
    operator delete(v670.__r_.__value_.__l.__data_);
  }
LABEL_159:
  v27 = (void **)(v7 + 424);
  if (*(char *)(v7 + 447) < 0)
  {
    sub_22E3BB2B4(v637, *(void **)(v7 + 424), *(_QWORD *)(v7 + 432));
    v28 = *(char *)(v7 + 447);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
    if (v28 < 0)
      operator delete(*v27);
  }
  else
  {
    *(_OWORD *)v637 = *(_OWORD *)v27;
    v638 = *(_QWORD *)(v7 + 440);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
  }
  *v27 = 0;
  *(_QWORD *)(v7 + 432) = 0;
  *(_DWORD *)(v7 + 440) = v670.__r_.__value_.__l.__data_;
  *(_DWORD *)(v7 + 443) = *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3);
  *(_BYTE *)(v7 + 447) = 0;
  if (SHIBYTE(v638) < 0)
    operator delete(v637[0]);
  sub_22E6EC3DC((uint64_t)&v670, 369, a2);
  if (LOBYTE(v671[0]))
  {
    if (*(char *)(v7 + 447) < 0)
    {
      sub_22E3BB2B4(v635, *(void **)(v7 + 424), *(_QWORD *)(v7 + 432));
    }
    else
    {
      *(_OWORD *)v635 = *(_OWORD *)v27;
      v636 = *(_QWORD *)(v7 + 440);
    }
    v29 = SHIBYTE(v670.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v670.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v634, v670.__r_.__value_.__l.__data_, v670.__r_.__value_.__l.__size_);
    else
      v634 = v670;
    if (SHIBYTE(v634.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v679, v634.__r_.__value_.__l.__data_, v634.__r_.__value_.__l.__size_);
    else
      v679 = v634;
    if (*(char *)(v7 + 447) < 0)
      operator delete(*v27);
    *(_OWORD *)v27 = *(_OWORD *)&v679.__r_.__value_.__l.__data_;
    *(_QWORD *)(v7 + 440) = *((_QWORD *)&v679.__r_.__value_.__l + 2);
    *((_BYTE *)&v679.__r_.__value_.__s + 23) = 0;
    v679.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v634.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v634.__r_.__value_.__l.__data_);
    if (SHIBYTE(v636) < 0)
    {
      operator delete(v635[0]);
      if ((v29 & 0x80000000) == 0)
        goto LABEL_183;
    }
    else if ((v29 & 0x80000000) == 0)
    {
      goto LABEL_183;
    }
    operator delete(v670.__r_.__value_.__l.__data_);
  }
LABEL_183:
  *(_QWORD *)v7 &= ~0x1000000uLL;
  if (sub_22E721714(a2, 1736))
    *(_QWORD *)v7 |= 0x1000000uLL;
  memset(v633, 0, sizeof(v633));
  sub_22E618148(v633, *(_QWORD *)(v7 + 544), *(_QWORD *)(v7 + 552), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 552) - *(_QWORD *)(v7 + 544)) >> 3));
  memset(v632, 0, sizeof(v632));
  memset(&v670, 0, sizeof(v670));
  sub_22E63B344((void **)(v7 + 544));
  *(std::string *)(v7 + 544) = v670;
  memset(&v670, 0, sizeof(v670));
  v679.__r_.__value_.__r.__words[0] = (std::string::size_type)&v670;
  sub_22E3B3CC8((void ***)&v679);
  v679.__r_.__value_.__r.__words[0] = (std::string::size_type)v632;
  sub_22E3B3CC8((void ***)&v679);
  v679.__r_.__value_.__r.__words[0] = (std::string::size_type)v633;
  sub_22E3B3CC8((void ***)&v679);
  llvm::opt::ArgList::getAllArgValues();
  v670 = v679;
  memset(&v679, 0, sizeof(v679));
  LOBYTE(v671[0]) = 1;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v679;
  sub_22E3B3CC8((void ***)&__dst);
  v551 = v7;
  if (LOBYTE(v671[0]))
  {
    memset(v631, 0, sizeof(v631));
    sub_22E618148(v631, *(_QWORD *)(v7 + 544), *(_QWORD *)(v7 + 552), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 552) - *(_QWORD *)(v7 + 544)) >> 3));
    v629 = 0;
    v628 = 0;
    v630 = 0;
    sub_22E618148(&v628, (uint64_t)v670.__r_.__value_.__l.__data_, v670.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670.__r_.__value_.__l.__size_ - v670.__r_.__value_.__r.__words[0]) >> 3));
    memset(&v679, 0, sizeof(v679));
    sub_22E618148(&v679, v628, v629, 0xAAAAAAAAAAAAAAABLL * ((v629 - v628) >> 3));
    sub_22E63B344((void **)(v7 + 544));
    *(std::string *)(v7 + 544) = v679;
    memset(&v679, 0, sizeof(v679));
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v679;
    sub_22E3B3CC8((void ***)&__dst);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v628;
    sub_22E3B3CC8((void ***)&__dst);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v631;
    sub_22E3B3CC8((void ***)&__dst);
    if (LOBYTE(v671[0]))
    {
      v679.__r_.__value_.__r.__words[0] = (std::string::size_type)&v670;
      sub_22E3B3CC8((void ***)&v679);
    }
  }
  *(_QWORD *)v7 |= 0x800000uLL;
  v30 = sub_22E721714(a2, 1332);
  v31 = *(_QWORD *)v7;
  if (v30)
    v31 = *(_QWORD *)v7 & 0xFFFFFFFFFF7FFFDFLL;
  *(_QWORD *)v7 = v31 & 0xFFFFFFFFFFFFFFDFLL;
  if (sub_22E721714(a2, 1757))
    *(_QWORD *)v7 |= 0x20uLL;
  v539 = v7 + 472;
  *(_DWORD *)(v7 + 824) = 500;
  v32 = sub_22E6EC038(1756, a2, a4);
  if (HIDWORD(v32))
    *(_DWORD *)(v7 + 824) = v32;
  *(_QWORD *)v7 &= ~4uLL;
  v33 = sub_22E721714(a2, 1980);
  v34 = *(_QWORD *)v7;
  if (v33)
    v34 = *(_QWORD *)v7 | 4;
  *(_QWORD *)v7 = v34 & 0xFFFFFFFFFFFFFFFDLL;
  if (sub_22E721714(a2, 2906))
    *(_QWORD *)v7 |= 2uLL;
  v35 = (void **)(v7 + 664);
  memset(v627, 0, sizeof(v627));
  sub_22E618148(v627, *(_QWORD *)(v7 + 664), *(_QWORD *)(v7 + 672), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 672) - *(_QWORD *)(v7 + 664)) >> 3));
  memset(v626, 0, sizeof(v626));
  memset(&v670, 0, sizeof(v670));
  sub_22E63B344((void **)(v7 + 664));
  *(std::string *)(v7 + 664) = v670;
  memset(&v670, 0, sizeof(v670));
  v679.__r_.__value_.__r.__words[0] = (std::string::size_type)&v670;
  sub_22E3B3CC8((void ***)&v679);
  v679.__r_.__value_.__r.__words[0] = (std::string::size_type)v626;
  sub_22E3B3CC8((void ***)&v679);
  v679.__r_.__value_.__r.__words[0] = (std::string::size_type)v627;
  sub_22E3B3CC8((void ***)&v679);
  llvm::opt::ArgList::getAllArgValues();
  v670 = v679;
  memset(&v679, 0, sizeof(v679));
  LOBYTE(v671[0]) = 1;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v679;
  sub_22E3B3CC8((void ***)&__dst);
  if (LOBYTE(v671[0]))
  {
    memset(v625, 0, sizeof(v625));
    sub_22E618148(v625, *(_QWORD *)(v7 + 664), *(_QWORD *)(v7 + 672), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 672) - *(_QWORD *)(v7 + 664)) >> 3));
    v623 = 0;
    v622 = 0;
    v624 = 0;
    sub_22E618148(&v622, (uint64_t)v670.__r_.__value_.__l.__data_, v670.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670.__r_.__value_.__l.__size_ - v670.__r_.__value_.__r.__words[0]) >> 3));
    memset(&v679, 0, sizeof(v679));
    sub_22E618148(&v679, v622, v623, 0xAAAAAAAAAAAAAAABLL * ((v623 - v622) >> 3));
    sub_22E63B344(v35);
    *(_OWORD *)v35 = *(_OWORD *)&v679.__r_.__value_.__l.__data_;
    *(_QWORD *)(v7 + 680) = *((_QWORD *)&v679.__r_.__value_.__l + 2);
    memset(&v679, 0, sizeof(v679));
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v679;
    sub_22E3B3CC8((void ***)&__dst);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v622;
    sub_22E3B3CC8((void ***)&__dst);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v625;
    sub_22E3B3CC8((void ***)&__dst);
    if (LOBYTE(v671[0]))
    {
      v679.__r_.__value_.__r.__words[0] = (std::string::size_type)&v670;
      sub_22E3B3CC8((void ***)&v679);
    }
  }
  v36 = (void **)(v7 + 216);
  if (*(char *)(v7 + 239) < 0)
  {
    sub_22E3BB2B4(v620, *(void **)(v7 + 216), *(_QWORD *)(v7 + 224));
    v37 = *(char *)(v7 + 239);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
    if (v37 < 0)
      operator delete(*v36);
  }
  else
  {
    *(_OWORD *)v620 = *(_OWORD *)v36;
    v621 = *(_QWORD *)(v7 + 232);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
  }
  *v36 = 0;
  *(_QWORD *)(v7 + 224) = 0;
  *(_DWORD *)(v7 + 232) = v670.__r_.__value_.__l.__data_;
  *(_DWORD *)(v7 + 235) = *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3);
  *(_BYTE *)(v7 + 239) = 0;
  if (SHIBYTE(v621) < 0)
    operator delete(v620[0]);
  sub_22E6EC3DC((uint64_t)&v670, 2823, a2);
  if (LOBYTE(v671[0]))
  {
    if (*(char *)(v7 + 239) < 0)
    {
      sub_22E3BB2B4(v618, *(void **)(v7 + 216), *(_QWORD *)(v7 + 224));
    }
    else
    {
      *(_OWORD *)v618 = *(_OWORD *)v36;
      v619 = *(_QWORD *)(v7 + 232);
    }
    v38 = SHIBYTE(v670.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v670.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v617, v670.__r_.__value_.__l.__data_, v670.__r_.__value_.__l.__size_);
    else
      v617 = v670;
    if (SHIBYTE(v617.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v679, v617.__r_.__value_.__l.__data_, v617.__r_.__value_.__l.__size_);
    else
      v679 = v617;
    if (*(char *)(v7 + 239) < 0)
      operator delete(*v36);
    *(_OWORD *)v36 = *(_OWORD *)&v679.__r_.__value_.__l.__data_;
    *(_QWORD *)(v7 + 232) = *((_QWORD *)&v679.__r_.__value_.__l + 2);
    *((_BYTE *)&v679.__r_.__value_.__s + 23) = 0;
    v679.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v617.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v617.__r_.__value_.__l.__data_);
    if (SHIBYTE(v619) < 0)
    {
      operator delete(v618[0]);
      if ((v38 & 0x80000000) == 0)
        goto LABEL_225;
    }
    else if ((v38 & 0x80000000) == 0)
    {
      goto LABEL_225;
    }
    operator delete(v670.__r_.__value_.__l.__data_);
  }
LABEL_225:
  *(_QWORD *)v7 &= ~0x10uLL;
  if (sub_22E721714(a2, 2871))
    *(_QWORD *)v7 |= 0x10uLL;
  v39 = (void **)(v7 + 616);
  memset(v616, 0, sizeof(v616));
  sub_22E618148(v616, *(_QWORD *)(v7 + 616), *(_QWORD *)(v7 + 624), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 624) - *(_QWORD *)(v7 + 616)) >> 3));
  memset(v615, 0, sizeof(v615));
  memset(&v670, 0, sizeof(v670));
  sub_22E63B344((void **)(v7 + 616));
  *(std::string *)(v7 + 616) = v670;
  memset(&v670, 0, sizeof(v670));
  v679.__r_.__value_.__r.__words[0] = (std::string::size_type)&v670;
  sub_22E3B3CC8((void ***)&v679);
  v679.__r_.__value_.__r.__words[0] = (std::string::size_type)v615;
  sub_22E3B3CC8((void ***)&v679);
  v679.__r_.__value_.__r.__words[0] = (std::string::size_type)v616;
  sub_22E3B3CC8((void ***)&v679);
  llvm::opt::ArgList::getAllArgValues();
  v670 = v679;
  memset(&v679, 0, sizeof(v679));
  LOBYTE(v671[0]) = 1;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v679;
  sub_22E3B3CC8((void ***)&__dst);
  if (LOBYTE(v671[0]))
  {
    memset(v614, 0, sizeof(v614));
    sub_22E618148(v614, *(_QWORD *)(v7 + 616), *(_QWORD *)(v7 + 624), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 624) - *(_QWORD *)(v7 + 616)) >> 3));
    v612 = 0;
    v611 = 0;
    v613 = 0;
    sub_22E618148(&v611, (uint64_t)v670.__r_.__value_.__l.__data_, v670.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670.__r_.__value_.__l.__size_ - v670.__r_.__value_.__r.__words[0]) >> 3));
    memset(&v679, 0, sizeof(v679));
    sub_22E618148(&v679, v611, v612, 0xAAAAAAAAAAAAAAABLL * ((v612 - v611) >> 3));
    sub_22E63B344(v39);
    *(_OWORD *)v39 = *(_OWORD *)&v679.__r_.__value_.__l.__data_;
    *(_QWORD *)(v7 + 632) = *((_QWORD *)&v679.__r_.__value_.__l + 2);
    memset(&v679, 0, sizeof(v679));
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v679;
    sub_22E3B3CC8((void ***)&__dst);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v611;
    sub_22E3B3CC8((void ***)&__dst);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v614;
    sub_22E3B3CC8((void ***)&__dst);
    if (LOBYTE(v671[0]))
    {
      v679.__r_.__value_.__r.__words[0] = (std::string::size_type)&v670;
      sub_22E3B3CC8((void ***)&v679);
    }
  }
  v40 = (void **)(v7 + 712);
  if (*(char *)(v7 + 735) < 0)
  {
    sub_22E3BB2B4(v609, *(void **)(v7 + 712), *(_QWORD *)(v7 + 720));
    v41 = *(char *)(v7 + 735);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
    if (v41 < 0)
      operator delete(*v40);
  }
  else
  {
    *(_OWORD *)v609 = *(_OWORD *)v40;
    v610 = *(_QWORD *)(v7 + 728);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
  }
  *v40 = 0;
  *(_QWORD *)(v7 + 720) = 0;
  *(_DWORD *)(v7 + 728) = v670.__r_.__value_.__l.__data_;
  *(_DWORD *)(v7 + 731) = *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3);
  *(_BYTE *)(v7 + 735) = 0;
  if (SHIBYTE(v610) < 0)
    operator delete(v609[0]);
  sub_22E6EC3DC((uint64_t)&v670, 146, a2);
  if (LOBYTE(v671[0]))
  {
    if (*(char *)(v7 + 735) < 0)
    {
      sub_22E3BB2B4(v607, *(void **)(v7 + 712), *(_QWORD *)(v7 + 720));
    }
    else
    {
      *(_OWORD *)v607 = *(_OWORD *)v40;
      v608 = *(_QWORD *)(v7 + 728);
    }
    v42 = SHIBYTE(v670.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v670.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v606, v670.__r_.__value_.__l.__data_, v670.__r_.__value_.__l.__size_);
    else
      v606 = v670;
    if (SHIBYTE(v606.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v679, v606.__r_.__value_.__l.__data_, v606.__r_.__value_.__l.__size_);
    else
      v679 = v606;
    if (*(char *)(v7 + 735) < 0)
      operator delete(*v40);
    *(_OWORD *)v40 = *(_OWORD *)&v679.__r_.__value_.__l.__data_;
    *(_QWORD *)(v7 + 728) = *((_QWORD *)&v679.__r_.__value_.__l + 2);
    *((_BYTE *)&v679.__r_.__value_.__s + 23) = 0;
    v679.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v606.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v606.__r_.__value_.__l.__data_);
    if (SHIBYTE(v608) < 0)
    {
      operator delete(v607[0]);
      if ((v42 & 0x80000000) == 0)
        goto LABEL_254;
    }
    else if ((v42 & 0x80000000) == 0)
    {
      goto LABEL_254;
    }
    operator delete(v670.__r_.__value_.__l.__data_);
  }
LABEL_254:
  *(_BYTE *)(v7 + 8) &= ~1u;
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v7 + 8) & 0xFD | (sub_22E721714(a2, 212) != 0);
  v43 = sub_22E721714(a2, 213);
  v44 = *(_BYTE *)(v7 + 8);
  if (v43)
    v44 |= 2u;
  *(_BYTE *)(v7 + 8) = v44 | 4;
  v45 = sub_22E721714(a2, 2705);
  v46 = *(_BYTE *)(v7 + 8);
  if (v45)
    v46 &= 0xF3u;
  *(_BYTE *)(v7 + 8) = v46 | 8;
  v47 = sub_22E721714(a2, 2706);
  v48 = *(_BYTE *)(v7 + 8);
  if (v47)
    v48 &= 0xE7u;
  *(_BYTE *)(v7 + 8) = v48 & 0xEF;
  v49 = sub_22E721714(a2, 211);
  v50 = *(_BYTE *)(v7 + 8);
  if (v49)
    v50 |= 0x10u;
  *(_BYTE *)(v7 + 8) = v50 & 0xBF;
  if (sub_22E721714(a2, 214))
    *(_BYTE *)(v7 + 8) |= 0x40u;
  *(_QWORD *)v7 &= ~1uLL;
  if (sub_22E721714(a2, 282))
    *(_QWORD *)v7 |= 1uLL;
  memset(v605, 0, sizeof(v605));
  sub_22E618148(v605, *(_QWORD *)(v7 + 472), *(_QWORD *)(v7 + 480), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 480) - *(_QWORD *)(v7 + 472)) >> 3));
  memset(v604, 0, sizeof(v604));
  memset(&v670, 0, sizeof(v670));
  sub_22E63B344((void **)v539);
  *(_OWORD *)v539 = *(_OWORD *)&v670.__r_.__value_.__l.__data_;
  *(_QWORD *)(v7 + 488) = *((_QWORD *)&v670.__r_.__value_.__l + 2);
  memset(&v670, 0, sizeof(v670));
  v679.__r_.__value_.__r.__words[0] = (std::string::size_type)&v670;
  sub_22E3B3CC8((void ***)&v679);
  v679.__r_.__value_.__r.__words[0] = (std::string::size_type)v604;
  sub_22E3B3CC8((void ***)&v679);
  v679.__r_.__value_.__r.__words[0] = (std::string::size_type)v605;
  sub_22E3B3CC8((void ***)&v679);
  llvm::opt::ArgList::getAllArgValues();
  v670 = v679;
  memset(&v679, 0, sizeof(v679));
  LOBYTE(v671[0]) = 1;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v679;
  sub_22E3B3CC8((void ***)&__dst);
  if (LOBYTE(v671[0]))
  {
    memset(v603, 0, sizeof(v603));
    sub_22E618148(v603, *(_QWORD *)(v7 + 472), *(_QWORD *)(v7 + 480), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 480) - *(_QWORD *)(v7 + 472)) >> 3));
    v601 = 0;
    v600 = 0;
    v602 = 0;
    sub_22E618148(&v600, (uint64_t)v670.__r_.__value_.__l.__data_, v670.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670.__r_.__value_.__l.__size_ - v670.__r_.__value_.__r.__words[0]) >> 3));
    memset(&v679, 0, sizeof(v679));
    sub_22E618148(&v679, v600, v601, 0xAAAAAAAAAAAAAAABLL * ((v601 - v600) >> 3));
    sub_22E63B344((void **)v539);
    *(_OWORD *)v539 = *(_OWORD *)&v679.__r_.__value_.__l.__data_;
    *(_QWORD *)(v7 + 488) = *((_QWORD *)&v679.__r_.__value_.__l + 2);
    memset(&v679, 0, sizeof(v679));
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v679;
    sub_22E3B3CC8((void ***)&__dst);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v600;
    sub_22E3B3CC8((void ***)&__dst);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v603;
    sub_22E3B3CC8((void ***)&__dst);
    if (LOBYTE(v671[0]))
    {
      v679.__r_.__value_.__r.__words[0] = (std::string::size_type)&v670;
      sub_22E3B3CC8((void ***)&v679);
    }
  }
  v51 = (void **)(v7 + 264);
  if (*(char *)(v7 + 287) < 0)
  {
    sub_22E3BB2B4(v598, *(void **)(v7 + 264), *(_QWORD *)(v7 + 272));
    v52 = *(char *)(v7 + 287);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
    if (v52 < 0)
      operator delete(*v51);
  }
  else
  {
    *(_OWORD *)v598 = *(_OWORD *)v51;
    v599 = *(_QWORD *)(v7 + 280);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
  }
  *v51 = 0;
  *(_QWORD *)(v7 + 272) = 0;
  *(_DWORD *)(v7 + 280) = v670.__r_.__value_.__l.__data_;
  *(_DWORD *)(v7 + 283) = *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3);
  *(_BYTE *)(v7 + 287) = 0;
  if (SHIBYTE(v599) < 0)
    operator delete(v598[0]);
  sub_22E6EC3DC((uint64_t)&v670, 135, a2);
  if (LOBYTE(v671[0]))
  {
    if (*(char *)(v7 + 287) < 0)
    {
      sub_22E3BB2B4(v596, *(void **)(v7 + 264), *(_QWORD *)(v7 + 272));
    }
    else
    {
      *(_OWORD *)v596 = *(_OWORD *)v51;
      v597 = *(_QWORD *)(v7 + 280);
    }
    v53 = SHIBYTE(v670.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v670.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v595, v670.__r_.__value_.__l.__data_, v670.__r_.__value_.__l.__size_);
    else
      v595 = v670;
    if (SHIBYTE(v595.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v679, v595.__r_.__value_.__l.__data_, v595.__r_.__value_.__l.__size_);
    else
      v679 = v595;
    if (*(char *)(v7 + 287) < 0)
      operator delete(*v51);
    *(_OWORD *)v51 = *(_OWORD *)&v679.__r_.__value_.__l.__data_;
    *(_QWORD *)(v7 + 280) = *((_QWORD *)&v679.__r_.__value_.__l + 2);
    *((_BYTE *)&v679.__r_.__value_.__s + 23) = 0;
    v679.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v595.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v595.__r_.__value_.__l.__data_);
    if (SHIBYTE(v597) < 0)
    {
      operator delete(v596[0]);
      if ((v53 & 0x80000000) == 0)
        goto LABEL_293;
    }
    else if ((v53 & 0x80000000) == 0)
    {
      goto LABEL_293;
    }
    operator delete(v670.__r_.__value_.__l.__data_);
  }
LABEL_293:
  *(_QWORD *)v7 |= 0x2000uLL;
  if (sub_22E721714(a2, 1130))
    *(_QWORD *)v7 &= ~0x2000uLL;
  memset(v594, 0, sizeof(v594));
  sub_22E618148(v594, *(_QWORD *)(v7 + 592), *(_QWORD *)(v7 + 600), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 600) - *(_QWORD *)(v7 + 592)) >> 3));
  memset(v593, 0, sizeof(v593));
  memset(&v670, 0, sizeof(v670));
  sub_22E63B344((void **)(v7 + 592));
  *(std::string *)(v7 + 592) = v670;
  memset(&v670, 0, sizeof(v670));
  v679.__r_.__value_.__r.__words[0] = (std::string::size_type)&v670;
  sub_22E3B3CC8((void ***)&v679);
  v679.__r_.__value_.__r.__words[0] = (std::string::size_type)v593;
  sub_22E3B3CC8((void ***)&v679);
  v679.__r_.__value_.__r.__words[0] = (std::string::size_type)v594;
  sub_22E3B3CC8((void ***)&v679);
  llvm::opt::ArgList::getAllArgValues();
  v670 = v679;
  memset(&v679, 0, sizeof(v679));
  LOBYTE(v671[0]) = 1;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v679;
  sub_22E3B3CC8((void ***)&__dst);
  if (LOBYTE(v671[0]))
  {
    memset(v592, 0, sizeof(v592));
    sub_22E618148(v592, *(_QWORD *)(v7 + 592), *(_QWORD *)(v7 + 600), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 600) - *(_QWORD *)(v7 + 592)) >> 3));
    v590 = 0;
    v589 = 0;
    v591 = 0;
    sub_22E618148(&v589, (uint64_t)v670.__r_.__value_.__l.__data_, v670.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670.__r_.__value_.__l.__size_ - v670.__r_.__value_.__r.__words[0]) >> 3));
    memset(&v679, 0, sizeof(v679));
    sub_22E618148(&v679, v589, v590, 0xAAAAAAAAAAAAAAABLL * ((v590 - v589) >> 3));
    sub_22E63B344((void **)(v7 + 592));
    *(std::string *)(v7 + 592) = v679;
    memset(&v679, 0, sizeof(v679));
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v679;
    sub_22E3B3CC8((void ***)&__dst);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v589;
    sub_22E3B3CC8((void ***)&__dst);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v592;
    sub_22E3B3CC8((void ***)&__dst);
    if (LOBYTE(v671[0]))
    {
      v679.__r_.__value_.__r.__words[0] = (std::string::size_type)&v670;
      sub_22E3B3CC8((void ***)&v679);
    }
  }
  *(_QWORD *)v7 &= ~0x200000uLL;
  v54 = sub_22E721714(a2, 888);
  v55 = *(_QWORD *)v7;
  if (v54)
    v55 = *(_QWORD *)v7 | 0x200000;
  *(_QWORD *)v7 = v55 | 0x100000;
  if (sub_22E721888(a2, 0x441u, 0x318u))
  {
    v56 = llvm::opt::Option::matches();
    v57 = 0x100000;
    if (v56)
      v57 = 0;
    v58 = *(_QWORD *)v7 & 0xFFFFFFFFFFEFFFFFLL | v57;
  }
  else
  {
    v58 = *(_QWORD *)v7;
  }
  *(_QWORD *)v7 = v58 | 0x100000;
  if (sub_22E721888(a2, 0x318u, 0x441u))
  {
    v59 = llvm::opt::Option::matches();
    v60 = 0x100000;
    if (!v59)
      v60 = 0;
    v61 = *(_QWORD *)v7 & 0xFFFFFFFFFFEFFFFFLL | v60;
  }
  else
  {
    v61 = *(_QWORD *)v7;
  }
  *(_QWORD *)v7 = v61 & 0xFFFFFFFFFFFBFFFFLL;
  v62 = sub_22E721714(a2, 133);
  v63 = *(_QWORD *)v7;
  if (v62)
    v63 = *(_QWORD *)v7 | 0x40000;
  *(_QWORD *)v7 = v63 & 0xFFFFFFFFFFFDFFFFLL;
  if (sub_22E721714(a2, 136))
    *(_QWORD *)v7 |= 0x20000uLL;
  v64 = (void **)(v7 + 48);
  if (*(char *)(v7 + 71) < 0)
  {
    sub_22E3BB2B4(v587, *(void **)(v7 + 48), *(_QWORD *)(v7 + 56));
    v65 = *(char *)(v7 + 71);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
    if (v65 < 0)
      operator delete(*v64);
  }
  else
  {
    *(_OWORD *)v587 = *(_OWORD *)v64;
    v588 = *(_QWORD *)(v7 + 64);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
  }
  *v64 = 0;
  *(_QWORD *)(v7 + 56) = 0;
  *(_DWORD *)(v7 + 64) = v670.__r_.__value_.__l.__data_;
  *(_DWORD *)(v7 + 67) = *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3);
  *(_BYTE *)(v7 + 71) = 0;
  if (SHIBYTE(v588) < 0)
    operator delete(v587[0]);
  sub_22E6EC3DC((uint64_t)&v670, 2634, a2);
  if (LOBYTE(v671[0]))
  {
    if (*(char *)(v7 + 71) < 0)
    {
      sub_22E3BB2B4(v585, *(void **)(v7 + 48), *(_QWORD *)(v7 + 56));
    }
    else
    {
      *(_OWORD *)v585 = *(_OWORD *)v64;
      v586 = *(_QWORD *)(v7 + 64);
    }
    v66 = SHIBYTE(v670.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v670.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v584, v670.__r_.__value_.__l.__data_, v670.__r_.__value_.__l.__size_);
    else
      v584 = v670;
    if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v679, v584.__r_.__value_.__l.__data_, v584.__r_.__value_.__l.__size_);
    else
      v679 = v584;
    if (*(char *)(v7 + 71) < 0)
      operator delete(*v64);
    *(_OWORD *)v64 = *(_OWORD *)&v679.__r_.__value_.__l.__data_;
    *(_QWORD *)(v7 + 64) = *((_QWORD *)&v679.__r_.__value_.__l + 2);
    *((_BYTE *)&v679.__r_.__value_.__s + 23) = 0;
    v679.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v584.__r_.__value_.__l.__data_);
    if (SHIBYTE(v586) < 0)
    {
      operator delete(v585[0]);
      if ((v66 & 0x80000000) == 0)
        goto LABEL_338;
    }
    else if ((v66 & 0x80000000) == 0)
    {
      goto LABEL_338;
    }
    operator delete(v670.__r_.__value_.__l.__data_);
  }
LABEL_338:
  *(_DWORD *)(v7 + 16) = 0;
  v67 = sub_22E6EC1FC(124, 0x28u, a2, a4);
  if (HIDWORD(v67))
    *(_DWORD *)(v7 + 16) = v67;
  *(_QWORD *)v7 &= ~8uLL;
  if (sub_22E721714(a2, 2870))
    *(_QWORD *)v7 |= 8uLL;
  v68 = (void **)(v7 + 800);
  if (*(char *)(v7 + 823) < 0)
  {
    sub_22E3BB2B4(v582, *(void **)(v7 + 800), *(_QWORD *)(v7 + 808));
    v69 = *(char *)(v7 + 823);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
    if (v69 < 0)
      operator delete(*v68);
  }
  else
  {
    *(_OWORD *)v582 = *(_OWORD *)v68;
    v583 = *(_QWORD *)(v7 + 816);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
  }
  *v68 = 0;
  *(_QWORD *)(v7 + 808) = 0;
  *(_DWORD *)(v7 + 816) = v670.__r_.__value_.__l.__data_;
  *(_DWORD *)(v7 + 819) = *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3);
  *(_BYTE *)(v7 + 823) = 0;
  if (SHIBYTE(v583) < 0)
    operator delete(v582[0]);
  sub_22E6EC3DC((uint64_t)&v670, 2987, a2);
  if (LOBYTE(v671[0]))
  {
    if (*(char *)(v7 + 823) < 0)
    {
      sub_22E3BB2B4(v580, *(void **)(v7 + 800), *(_QWORD *)(v7 + 808));
    }
    else
    {
      *(_OWORD *)v580 = *(_OWORD *)v68;
      v581 = *(_QWORD *)(v7 + 816);
    }
    v70 = SHIBYTE(v670.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v670.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v579, v670.__r_.__value_.__l.__data_, v670.__r_.__value_.__l.__size_);
    else
      v579 = v670;
    if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v679, v579.__r_.__value_.__l.__data_, v579.__r_.__value_.__l.__size_);
    else
      v679 = v579;
    if (*(char *)(v7 + 823) < 0)
      operator delete(*v68);
    *(_OWORD *)v68 = *(_OWORD *)&v679.__r_.__value_.__l.__data_;
    *(_QWORD *)(v7 + 816) = *((_QWORD *)&v679.__r_.__value_.__l + 2);
    *((_BYTE *)&v679.__r_.__value_.__s + 23) = 0;
    v679.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v579.__r_.__value_.__l.__data_);
    if (SHIBYTE(v581) < 0)
    {
      operator delete(v580[0]);
      if ((v70 & 0x80000000) == 0)
        goto LABEL_366;
    }
    else if ((v70 & 0x80000000) == 0)
    {
      goto LABEL_366;
    }
    operator delete(v670.__r_.__value_.__l.__data_);
  }
LABEL_366:
  *(_QWORD *)v7 &= ~0x80uLL;
  v71 = sub_22E721714(a2, 823);
  v72 = *(_QWORD *)v7;
  if (v71)
    v72 = *(_QWORD *)v7 | 0x80;
  *(_QWORD *)v7 = v72 & 0xFFFFFFFFFFFFFEFFLL;
  v73 = sub_22E721714(a2, 822);
  v74 = *(_QWORD *)v7;
  if (v73)
    v74 = *(_QWORD *)v7 | 0x100;
  *(_QWORD *)v7 = v74 & 0xFFFFFFFFFFFFFDFFLL;
  v75 = sub_22E721714(a2, 824);
  v76 = *(_QWORD *)v7;
  if (v75)
    v76 = *(_QWORD *)v7 | 0x200;
  *(_QWORD *)v7 = v76 & 0xFFFFFFFFFFFFFBFFLL;
  if (sub_22E721714(a2, 825))
    *(_QWORD *)v7 |= 0x400uLL;
  v77 = (void **)(v7 + 688);
  if (*(char *)(v7 + 711) < 0)
  {
    sub_22E3BB2B4(v577, *(void **)(v7 + 688), *(_QWORD *)(v7 + 696));
    v78 = *(char *)(v7 + 711);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
    if (v78 < 0)
      operator delete(*v77);
  }
  else
  {
    *(_OWORD *)v577 = *(_OWORD *)v77;
    v578 = *(_QWORD *)(v7 + 704);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
  }
  *v77 = 0;
  *(_QWORD *)(v7 + 696) = 0;
  *(_DWORD *)(v7 + 704) = v670.__r_.__value_.__l.__data_;
  *(_DWORD *)(v7 + 707) = *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3);
  *(_BYTE *)(v7 + 711) = 0;
  if (SHIBYTE(v578) < 0)
    operator delete(v577[0]);
  sub_22E6EC3DC((uint64_t)&v670, 1482, a2);
  if (LOBYTE(v671[0]))
  {
    if (*(char *)(v7 + 711) < 0)
    {
      sub_22E3BB2B4(v575, *(void **)(v7 + 688), *(_QWORD *)(v7 + 696));
    }
    else
    {
      *(_OWORD *)v575 = *(_OWORD *)v77;
      v576 = *(_QWORD *)(v7 + 704);
    }
    v79 = SHIBYTE(v670.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v670.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v574, v670.__r_.__value_.__l.__data_, v670.__r_.__value_.__l.__size_);
    else
      v574 = v670;
    if (SHIBYTE(v574.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v679, v574.__r_.__value_.__l.__data_, v574.__r_.__value_.__l.__size_);
    else
      v679 = v574;
    if (*(char *)(v7 + 711) < 0)
      operator delete(*v77);
    *(_OWORD *)v77 = *(_OWORD *)&v679.__r_.__value_.__l.__data_;
    *(_QWORD *)(v7 + 704) = *((_QWORD *)&v679.__r_.__value_.__l + 2);
    *((_BYTE *)&v679.__r_.__value_.__s + 23) = 0;
    v679.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v574.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v574.__r_.__value_.__l.__data_);
    if (SHIBYTE(v576) < 0)
    {
      operator delete(v575[0]);
      if ((v79 & 0x80000000) == 0)
        goto LABEL_398;
    }
    else if ((v79 & 0x80000000) == 0)
    {
      goto LABEL_398;
    }
    operator delete(v670.__r_.__value_.__l.__data_);
  }
LABEL_398:
  *(_QWORD *)v7 |= 0x400000uLL;
  v80 = sub_22E721714(a2, 1184);
  v81 = *(_QWORD *)v7;
  if (v80)
    v81 = *(_QWORD *)v7 & 0xFFFFFFFFFFBFFFBFLL;
  *(_QWORD *)v7 = v81 & 0xFFFFFFFFFFFFFFBFLL;
  v82 = sub_22E721714(a2, 3069);
  v83 = *(_QWORD *)v7;
  if (v82)
    v83 = *(_QWORD *)v7 | 0x40;
  *(_QWORD *)v7 = v83 & 0xFFFFFFFF7FFFFFFFLL;
  v84 = sub_22E721714(a2, 398);
  v85 = *(_QWORD *)v7;
  if (v84)
    v85 = *(_QWORD *)v7 | 0x80000000;
  *(_QWORD *)v7 = v85 | 0x100000000;
  if (sub_22E721714(a2, 1133))
    *(_QWORD *)v7 &= ~0x100000000uLL;
  memset(v573, 0, sizeof(v573));
  sub_22E618148(v573, *(_QWORD *)(v7 + 400), *(_QWORD *)(v7 + 408), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 408) - *(_QWORD *)(v7 + 400)) >> 3));
  memset(v572, 0, sizeof(v572));
  memset(&v670, 0, sizeof(v670));
  sub_22E63B344((void **)(v7 + 400));
  *(std::string *)(v7 + 400) = v670;
  memset(&v670, 0, sizeof(v670));
  v679.__r_.__value_.__r.__words[0] = (std::string::size_type)&v670;
  sub_22E3B3CC8((void ***)&v679);
  v679.__r_.__value_.__r.__words[0] = (std::string::size_type)v572;
  sub_22E3B3CC8((void ***)&v679);
  v679.__r_.__value_.__r.__words[0] = (std::string::size_type)v573;
  sub_22E3B3CC8((void ***)&v679);
  llvm::opt::ArgList::getAllArgValues();
  v670 = v679;
  memset(&v679, 0, sizeof(v679));
  LOBYTE(v671[0]) = 1;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v679;
  sub_22E3B3CC8((void ***)&__dst);
  if (LOBYTE(v671[0]))
  {
    memset(v571, 0, sizeof(v571));
    sub_22E618148(v571, *(_QWORD *)(v7 + 400), *(_QWORD *)(v7 + 408), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 408) - *(_QWORD *)(v7 + 400)) >> 3));
    v568 = 0;
    v569 = 0;
    v570 = 0;
    sub_22E618148(&v568, (uint64_t)v670.__r_.__value_.__l.__data_, v670.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670.__r_.__value_.__l.__size_ - v670.__r_.__value_.__r.__words[0]) >> 3));
    memset(&v679, 0, sizeof(v679));
    sub_22E618148(&v679, v568, v569, 0xAAAAAAAAAAAAAAABLL * ((v569 - v568) >> 3));
    sub_22E63B344((void **)(v7 + 400));
    *(std::string *)(v7 + 400) = v679;
    memset(&v679, 0, sizeof(v679));
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v679;
    sub_22E3B3CC8((void ***)&__dst);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v568;
    sub_22E3B3CC8((void ***)&__dst);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v571;
    sub_22E3B3CC8((void ***)&__dst);
    if (LOBYTE(v671[0]))
    {
      v679.__r_.__value_.__r.__words[0] = (std::string::size_type)&v670;
      sub_22E3B3CC8((void ***)&v679);
    }
  }
  v86 = (void **)(v7 + 168);
  if (*(char *)(v7 + 191) < 0)
  {
    sub_22E3BB2B4(v566, *(void **)(v7 + 168), *(_QWORD *)(v7 + 176));
    v87 = *(char *)(v7 + 191);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
    if (v87 < 0)
      operator delete(*v86);
  }
  else
  {
    *(_OWORD *)v566 = *(_OWORD *)v86;
    v567 = *(_QWORD *)(v7 + 184);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
  }
  *v86 = 0;
  *(_QWORD *)(v7 + 176) = 0;
  *(_DWORD *)(v7 + 184) = v670.__r_.__value_.__l.__data_;
  *(_DWORD *)(v7 + 187) = *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3);
  *(_BYTE *)(v7 + 191) = 0;
  if (SHIBYTE(v567) < 0)
    operator delete(v566[0]);
  sub_22E6EC3DC((uint64_t)&v670, 475, a2);
  if (LOBYTE(v671[0]))
  {
    if (*(char *)(v7 + 191) < 0)
    {
      sub_22E3BB2B4(v564, *(void **)(v7 + 168), *(_QWORD *)(v7 + 176));
    }
    else
    {
      *(_OWORD *)v564 = *(_OWORD *)v86;
      v565 = *(_QWORD *)(v7 + 184);
    }
    v88 = SHIBYTE(v670.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v670.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v563, v670.__r_.__value_.__l.__data_, v670.__r_.__value_.__l.__size_);
    else
      v563 = v670;
    if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v679, v563.__r_.__value_.__l.__data_, v563.__r_.__value_.__l.__size_);
    else
      v679 = v563;
    if (*(char *)(v7 + 191) < 0)
      operator delete(*v86);
    *(_OWORD *)v86 = *(_OWORD *)&v679.__r_.__value_.__l.__data_;
    *(_QWORD *)(v7 + 184) = *((_QWORD *)&v679.__r_.__value_.__l + 2);
    *((_BYTE *)&v679.__r_.__value_.__s + 23) = 0;
    v679.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v563.__r_.__value_.__l.__data_);
    if (SHIBYTE(v565) < 0)
    {
      operator delete(v564[0]);
      if ((v88 & 0x80000000) == 0)
        goto LABEL_433;
    }
    else if ((v88 & 0x80000000) == 0)
    {
      goto LABEL_433;
    }
    operator delete(v670.__r_.__value_.__l.__data_);
  }
LABEL_433:
  *(_QWORD *)v7 &= ~0x20000000uLL;
  if (sub_22E721888(a2, 0x1CBu, 0x3CAu))
  {
    v89 = llvm::opt::Option::matches();
    v90 = 0x20000000;
    if (!v89)
      v90 = 0;
    v91 = *(_QWORD *)v7 & 0xFFFFFFFFDFFFFFFFLL | v90;
  }
  else
  {
    v91 = *(_QWORD *)v7;
  }
  *(_QWORD *)v7 = v91 & 0xFFFFFFFFDFFFFFFFLL;
  if (sub_22E721888(a2, 0x3CAu, 0x1CBu))
  {
    v92 = llvm::opt::Option::matches();
    v93 = 0x20000000;
    if (v92)
      v93 = 0;
    v94 = *(_QWORD *)v7 & 0xFFFFFFFFDFFFFFFFLL | v93;
  }
  else
  {
    v94 = *(_QWORD *)v7;
  }
  *(_QWORD *)v7 = v94 & 0xFFFFFFFFBFFFFFFFLL;
  if (sub_22E721888(a2, 0x1CCu, 0x3CBu))
  {
    v95 = llvm::opt::Option::matches();
    v96 = 0x40000000;
    if (!v95)
      v96 = 0;
    v97 = *(_QWORD *)v7 & 0xFFFFFFFFBFFFFFFFLL | v96;
  }
  else
  {
    v97 = *(_QWORD *)v7;
  }
  *(_QWORD *)v7 = v97 & 0xFFFFFFFFBFFFFFFFLL;
  if (sub_22E721888(a2, 0x3CBu, 0x1CCu))
  {
    v98 = llvm::opt::Option::matches();
    v99 = 0x40000000;
    if (v98)
      v99 = 0;
    *(_QWORD *)v7 = *(_QWORD *)v7 & 0xFFFFFFFFBFFFFFFFLL | v99;
  }
  v100 = (void **)(v7 + 376);
  if (*(char *)(v7 + 399) < 0)
  {
    sub_22E3BB2B4(v561, *(void **)(v7 + 376), *(_QWORD *)(v7 + 384));
    v101 = *(char *)(v7 + 399);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
    if (v101 < 0)
      operator delete(*v100);
  }
  else
  {
    *(_OWORD *)v561 = *(_OWORD *)v100;
    v562 = *(_QWORD *)(v7 + 392);
    LODWORD(v670.__r_.__value_.__l.__data_) = 0;
    *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3) = 0;
  }
  v532 = (_QWORD *)(v7 + 168);
  *v100 = 0;
  *(_QWORD *)(v7 + 384) = 0;
  *(_DWORD *)(v7 + 392) = v670.__r_.__value_.__l.__data_;
  *(_DWORD *)(v7 + 395) = *(_DWORD *)((char *)v670.__r_.__value_.__r.__words + 3);
  *(_BYTE *)(v7 + 399) = 0;
  if (SHIBYTE(v562) < 0)
    operator delete(v561[0]);
  sub_22E6EC3DC((uint64_t)&v670, 492, a2);
  if (LOBYTE(v671[0]))
  {
    if (*(char *)(v7 + 399) < 0)
    {
      sub_22E3BB2B4(v559, *(void **)(v7 + 376), *(_QWORD *)(v7 + 384));
    }
    else
    {
      *(_OWORD *)v559 = *(_OWORD *)v100;
      v560 = *(_QWORD *)(v7 + 392);
    }
    v102 = SHIBYTE(v670.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v670.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v558, v670.__r_.__value_.__l.__data_, v670.__r_.__value_.__l.__size_);
    else
      v558 = v670;
    if (SHIBYTE(v558.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&v679, v558.__r_.__value_.__l.__data_, v558.__r_.__value_.__l.__size_);
    else
      v679 = v558;
    if (*(char *)(v7 + 399) < 0)
      operator delete(*v100);
    *(_OWORD *)v100 = *(_OWORD *)&v679.__r_.__value_.__l.__data_;
    *(_QWORD *)(v7 + 392) = *((_QWORD *)&v679.__r_.__value_.__l + 2);
    *((_BYTE *)&v679.__r_.__value_.__s + 23) = 0;
    v679.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v558.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v558.__r_.__value_.__l.__data_);
    if (SHIBYTE(v560) < 0)
    {
      operator delete(v559[0]);
      if ((v102 & 0x80000000) == 0)
        goto LABEL_476;
    }
    else if ((v102 & 0x80000000) == 0)
    {
      goto LABEL_476;
    }
    operator delete(v670.__r_.__value_.__l.__data_);
  }
LABEL_476:
  *(_DWORD *)(v7 + 320) = 25;
  v103 = (_QWORD *)sub_22E6EBFB4(a2, 1);
  v545 = a4;
  if (!v103)
    goto LABEL_622;
  v104 = v103;
  v105 = 0;
  v106 = *(_DWORD *)(*v103 + 32);
  while (dword_22F45DC0C[v105 + 1] != v106)
  {
    v105 += 2;
    if (v105 == 84)
    {
      v107 = 0;
      goto LABEL_621;
    }
  }
  v107 = dword_22F45DC0C[v105];
  if (v107 != 1)
  {
LABEL_522:
    if (v106 == 826 && v107 == 15)
    {
      MEMORY[0x2348A0C14](v7 + 240, *(_QWORD *)v104[6]);
      goto LABEL_621;
    }
    if (v107 != 21)
      goto LABEL_621;
    if (sub_22E6EBFB4(a2, 2033))
    {
      LastArgValue = (_QWORD *)llvm::opt::ArgList::getLastArgValue();
      v124 = (const char *)LastArgValue;
      v125 = v123;
      if (v123 != 19)
      {
        if (v123 != 24)
        {
          if (v123 < 4)
            goto LABEL_565;
          goto LABEL_564;
        }
        v126 = *LastArgValue == 0x656D697265707865 && LastArgValue[1] == 0x6D61792D6C61746ELL;
        if (!v126 || LastArgValue[2] != 0x31762D666C652D6CLL)
        {
          v128 = *LastArgValue == 0x656D697265707865 && LastArgValue[1] == 0x7061742D6C61746ELL;
          if (!v128 || LastArgValue[2] != 0x31762D666C652D69)
          {
            v125 = 24;
            goto LABEL_564;
          }
        }
LABEL_560:
        if (LastArgValue)
        {
          if (v123 >= 0x17)
          {
            v146 = (v123 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v123 | 7) != 0x17)
              v146 = v123 | 7;
            v147 = v146 + 1;
            p_dst = (std::string *)operator new(v146 + 1);
            __dst.__r_.__value_.__l.__size_ = v125;
            __dst.__r_.__value_.__r.__words[2] = v147 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v123;
            p_dst = &__dst;
          }
          memmove(p_dst, v124, v125);
          p_dst->__r_.__value_.__s.__data_[v125] = 0;
        }
        else
        {
          memset(&__dst, 0, sizeof(__dst));
        }
        v148 = std::string::insert(&__dst, 0, "Invalid interface stub format: ");
        v149 = v148->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v670.__r_.__value_.__l.__data_ = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
        v670.__r_.__value_.__r.__words[2] = v149;
        v148->__r_.__value_.__l.__size_ = 0;
        v148->__r_.__value_.__r.__words[2] = 0;
        v148->__r_.__value_.__r.__words[0] = 0;
        v150 = std::string::append(&v670, " is deprecated.");
        v151 = v150->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v679.__r_.__value_.__l.__data_ = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
        v679.__r_.__value_.__r.__words[2] = v151;
        v150->__r_.__value_.__l.__size_ = 0;
        v150->__r_.__value_.__r.__words[2] = 0;
        v150->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v670.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v670.__r_.__value_.__l.__data_);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        *(_QWORD *)(v545 + 312) = 0x18800000000;
        if (*(char *)(v545 + 311) < 0)
        {
          **(_BYTE **)(v545 + 288) = 0;
          *(_QWORD *)(v545 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v545 + 288) = 0;
          *(_BYTE *)(v545 + 311) = 0;
        }
        v142 = (unsigned __int8 *)(v545 + 320);
        *(_OWORD *)&v670.__r_.__value_.__l.__data_ = v545 + 320;
        v670.__r_.__value_.__r.__words[2] = v545;
        LOWORD(v671[0]) = 1;
        *(_BYTE *)(v545 + 320) = 0;
        *(_DWORD *)(v545 + 664) = 0;
        v152 = *(unsigned int *)(v545 + 776);
        if (!(_DWORD)v152)
        {
          *(_DWORD *)(v545 + 776) = 0;
          goto LABEL_612;
        }
        v153 = *(_QWORD *)(v545 + 768);
        v154 = 56 * v152;
        do
        {
          if (*(char *)(v153 + v154 - 9) < 0)
            operator delete(*(void **)(v153 + v154 - 32));
          v154 -= 56;
        }
        while (v154);
        v142 = (unsigned __int8 *)v670.__r_.__value_.__r.__words[0];
        *(_DWORD *)(v545 + 776) = 0;
        if (v142)
          goto LABEL_612;
        goto LABEL_610;
      }
      if (*LastArgValue == 0x656D697265707865
        && LastArgValue[1] == 0x7366692D6C61746ELL
        && *(_QWORD *)((char *)LastArgValue + 11) == 0x31762D7366692D6CLL)
      {
        goto LABEL_560;
      }
      v132 = *LastArgValue == 0x656D697265707865 && LastArgValue[1] == 0x7366692D6C61746ELL;
      if (v132 && *(_QWORD *)((char *)LastArgValue + 11) == 0x32762D7366692D6CLL)
        goto LABEL_560;
      v125 = 19;
    }
    else
    {
      v124 = "ifs-v1";
      v125 = 6;
    }
LABEL_564:
    if (*(_DWORD *)v124 == 762537577)
    {
      v107 = 21;
      goto LABEL_621;
    }
LABEL_565:
    if (!v124)
    {
      memset(&__dst, 0, sizeof(__dst));
LABEL_577:
      v138 = std::string::insert(&__dst, 0, "Invalid interface stub format: ");
      v139 = v138->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v670.__r_.__value_.__l.__data_ = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
      v670.__r_.__value_.__r.__words[2] = v139;
      v138->__r_.__value_.__l.__size_ = 0;
      v138->__r_.__value_.__r.__words[2] = 0;
      v138->__r_.__value_.__r.__words[0] = 0;
      v140 = std::string::append(&v670, ".");
      v141 = v140->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v679.__r_.__value_.__l.__data_ = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
      v679.__r_.__value_.__r.__words[2] = v141;
      v140->__r_.__value_.__l.__size_ = 0;
      v140->__r_.__value_.__r.__words[2] = 0;
      v140->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v670.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v670.__r_.__value_.__l.__data_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      *(_QWORD *)(a4 + 312) = 0x18800000000;
      if (*(char *)(a4 + 311) < 0)
      {
        **(_BYTE **)(a4 + 288) = 0;
        *(_QWORD *)(a4 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a4 + 288) = 0;
        *(_BYTE *)(a4 + 311) = 0;
      }
      v142 = (unsigned __int8 *)(a4 + 320);
      *(_OWORD *)&v670.__r_.__value_.__l.__data_ = (unint64_t)(a4 + 320);
      v670.__r_.__value_.__r.__words[2] = a4;
      LOWORD(v671[0]) = 1;
      *(_BYTE *)(a4 + 320) = 0;
      *(_DWORD *)(a4 + 664) = 0;
      v143 = *(unsigned int *)(a4 + 776);
      if (!(_DWORD)v143)
      {
        *(_DWORD *)(a4 + 776) = 0;
LABEL_612:
        v142[*v142 + 1] = 1;
        v155 = v670.__r_.__value_.__r.__words[0];
        v156 = *v670.__r_.__value_.__l.__data_;
        *v670.__r_.__value_.__l.__data_ = v156 + 1;
        *(_QWORD *)(v155 + 8 * v156 + 16) = "Must specify a valid interface stub format type, ie: -interface-stub-version=ifs-v1";
        if ((v679.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v157 = &v679;
        else
          v157 = (std::string *)v679.__r_.__value_.__r.__words[0];
        if ((v679.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&v679.__r_.__value_.__s + 23) & 0x7F;
        else
          size = v679.__r_.__value_.__l.__size_;
        sub_22E3B89A8((unsigned __int8 **)&v670, v157, size);
        sub_22E3BB0B8((uint64_t)&v670);
        if (SHIBYTE(v679.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v679.__r_.__value_.__l.__data_);
        v107 = 25;
        goto LABEL_621;
      }
      v144 = *(_QWORD *)(a4 + 768);
      v145 = 56 * v143;
      do
      {
        if (*(char *)(v144 + v145 - 9) < 0)
          operator delete(*(void **)(v144 + v145 - 32));
        v145 -= 56;
      }
      while (v145);
      v142 = (unsigned __int8 *)v670.__r_.__value_.__r.__words[0];
      *(_DWORD *)(a4 + 776) = 0;
      if (v142)
        goto LABEL_612;
LABEL_610:
      v142 = (unsigned __int8 *)sub_22E3B8AAC(v670.__r_.__value_.__l.__size_);
      v670.__r_.__value_.__r.__words[0] = (std::string::size_type)v142;
      goto LABEL_612;
    }
    if (v125 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_1373;
    if (v125 >= 0x17)
    {
      v136 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v125 | 7) != 0x17)
        v136 = v125 | 7;
      v137 = v136 + 1;
      v135 = (std::string *)operator new(v136 + 1);
      __dst.__r_.__value_.__l.__size_ = v125;
      __dst.__r_.__value_.__r.__words[2] = v137 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v135;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v125;
      v135 = &__dst;
      if (!v125)
        goto LABEL_576;
    }
    memmove(v135, v124, v125);
LABEL_576:
    a4 = v545;
    v135->__r_.__value_.__s.__data_[v125] = 0;
    goto LABEL_577;
  }
  if (v106 != 137 && v106 != 131)
    goto LABEL_502;
  v108 = (const char **)v103[6];
  v109 = *v108;
  if (!*v108)
  {
LABEL_503:
    *(_QWORD *)(a4 + 312) = 0x18800000000;
    if (*(char *)(a4 + 311) < 0)
    {
      **(_BYTE **)(a4 + 288) = 0;
      *(_QWORD *)(a4 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a4 + 288) = 0;
      *(_BYTE *)(a4 + 311) = 0;
    }
    *(_OWORD *)&v670.__r_.__value_.__l.__data_ = (unint64_t)(a4 + 320);
    v670.__r_.__value_.__r.__words[2] = a4;
    LOWORD(v671[0]) = 1;
    *(_BYTE *)(a4 + 320) = 0;
    *(_DWORD *)(a4 + 664) = 0;
    v113 = *(unsigned int *)(a4 + 776);
    if ((_DWORD)v113)
    {
      v114 = *(_QWORD *)(a4 + 768);
      v115 = 56 * v113;
      do
      {
        if (*(char *)(v114 + v115 - 9) < 0)
          operator delete(*(void **)(v114 + v115 - 32));
        v115 -= 56;
      }
      while (v115);
    }
    *(_DWORD *)(a4 + 776) = 0;
    llvm::opt::Arg::getAsString();
    if ((v679.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v116 = &v679;
    else
      v116 = (std::string *)v679.__r_.__value_.__r.__words[0];
    if ((v679.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v117 = *((_BYTE *)&v679.__r_.__value_.__s + 23) & 0x7F;
    else
      v117 = v679.__r_.__value_.__l.__size_;
    sub_22E3B89A8((unsigned __int8 **)&v670, v116, v117);
    v118 = *(_QWORD *)v104[6];
    v119 = (unsigned __int8 *)v670.__r_.__value_.__r.__words[0];
    if (!v670.__r_.__value_.__r.__words[0])
    {
      v119 = (unsigned __int8 *)sub_22E3B8AAC(v670.__r_.__value_.__l.__size_);
      v670.__r_.__value_.__r.__words[0] = (std::string::size_type)v119;
    }
    v119[*v119 + 1] = 1;
    v120 = v670.__r_.__value_.__r.__words[0];
    v121 = *v670.__r_.__value_.__l.__data_;
    *v670.__r_.__value_.__l.__data_ = v121 + 1;
    *(_QWORD *)(v120 + 8 * v121 + 16) = v118;
    v7 = v551;
    if (SHIBYTE(v679.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v679.__r_.__value_.__l.__data_);
    sub_22E3BB0B8((uint64_t)&v670);
    *(_DWORD *)(v551 + 12) = 0;
    goto LABEL_522;
  }
  v110 = strlen(*v108);
  v670.__r_.__value_.__r.__words[0] = (std::string::size_type)v109;
  *(_OWORD *)&v670.__r_.__value_.__r.__words[1] = v110;
  if (v110 == 7)
  {
    v111 = llvm::StringRef::compare_insensitive();
    v112 = v670.__r_.__value_.__s.__data_[20];
    if (!v111)
    {
      LODWORD(v670.__r_.__value_.__r.__words[2]) = 0;
      if (v670.__r_.__value_.__s.__data_[20])
      {
        v112 = 1;
        goto LABEL_499;
      }
      goto LABEL_498;
    }
    v110 = v670.__r_.__value_.__l.__size_;
  }
  else
  {
    v112 = 0;
  }
  if (!v112 && v110 == 4)
  {
    if (llvm::StringRef::compare_insensitive())
    {
      v112 = v670.__r_.__value_.__s.__data_[20];
      goto LABEL_499;
    }
    v112 = 1;
    LODWORD(v670.__r_.__value_.__r.__words[2]) = 1;
    if (v670.__r_.__value_.__s.__data_[20])
      goto LABEL_499;
LABEL_498:
    v112 = 1;
    v670.__r_.__value_.__s.__data_[20] = 1;
  }
LABEL_499:
  if (!v112 || LODWORD(v670.__r_.__value_.__r.__words[2]) == -1)
    goto LABEL_503;
  *(_DWORD *)(v7 + 12) = v670.__r_.__value_.__r.__words[2];
LABEL_502:
  v107 = 1;
LABEL_621:
  *(_DWORD *)(v7 + 320) = v107;
LABEL_622:
  v159 = sub_22E6EBFB4(a2, 2842);
  if (v159)
  {
    v367 = v159;
    v670.__r_.__value_.__r.__words[0] = **(_QWORD **)(v159 + 48);
    sub_22F2A98D0((int64x2_t *)(v7 + 496), (const char **)&v670.__r_.__value_.__l.__data_);
    *(_DWORD *)(v7 + 320) = 26;
    MEMORY[0x2348A0C14](v7 + 328, **(_QWORD **)(v367 + 48));
  }
  sub_22E70B070(a2, 2841, (uint64_t)&v670);
  v679 = v670;
  v160 = *(_QWORD *)&v671[0];
  v161 = v670.__r_.__value_.__r.__words[0];
  for (i = a2; v679.__r_.__value_.__r.__words[0] != v160; a2 = i)
  {
    v162 = *(_QWORD *)v161;
    v163 = **(const char ***)(*(_QWORD *)v161 + 48);
    v164 = strlen(v163);
    if (v164 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_1373;
    v165 = v164;
    if (v164 >= 0x17)
    {
      v167 = (v164 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v164 | 7) != 0x17)
        v167 = v164 | 7;
      v168 = v167 + 1;
      v166 = (std::string *)operator new(v167 + 1);
      __dst.__r_.__value_.__l.__size_ = v165;
      __dst.__r_.__value_.__r.__words[2] = v168 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v166;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v164;
      v166 = &__dst;
      if (!v164)
        goto LABEL_633;
    }
    memmove(v166, v163, v165);
LABEL_633:
    v166->__r_.__value_.__s.__data_[v165] = 0;
    v675.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
    v169 = sub_22E724090(v551 + 448, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&unk_22F457020, &v675);
    v675.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(v162 + 48) + 8);
    sub_22F2A98D0((int64x2_t *)((char *)v169 + 56), (const char **)&v675.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v679.__r_.__value_.__r.__words[0] += 8;
    sub_22E721830((uint64_t)&v679);
    v161 = v679.__r_.__value_.__r.__words[0];
  }
  llvm::opt::ArgList::getAllArgValues();
  v171 = __dst.__r_.__value_.__l.__size_;
  v170 = __dst.__r_.__value_.__r.__words[0];
  v172 = v545;
  if (__dst.__r_.__value_.__r.__words[0] != __dst.__r_.__value_.__l.__size_)
  {
    v538 = &v670.__r_.__value_.__s.__data_[16];
    while (1)
    {
      memset(&v675, 0, sizeof(v675));
      memset(&v673, 0, sizeof(v673));
      v173 = *(_BYTE *)(v170 + 23);
      v174 = v173 < 0;
      v175 = *(_QWORD *)v170;
      if (v173 >= 0)
        v175 = v170;
      v176 = v173 & 0x7F;
      if (v174)
        v176 = *(_QWORD *)(v170 + 8);
      *(_QWORD *)&v554 = v175;
      *((_QWORD *)&v554 + 1) = v176;
      v670.__r_.__value_.__r.__words[0] = (std::string::size_type)&v670.__r_.__value_.__r.__words[2];
      v670.__r_.__value_.__l.__size_ = 0x500000000;
      v177 = 1;
      llvm::StringRef::split();
      v547 = (void **)v170;
      if (LODWORD(v670.__r_.__value_.__r.__words[1]) < 5)
      {
LABEL_664:
        v184 = 0;
        LOBYTE(v185) = 0;
        data = 0;
        goto LABEL_665;
      }
      v178 = *(_QWORD *)(v670.__r_.__value_.__r.__words[0] + 8);
      if (v178 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1373;
      v179 = *(const void **)v670.__r_.__value_.__l.__data_;
      if (v178 >= 0x17)
        break;
      *((_BYTE *)&v679.__r_.__value_.__s + 23) = *(_QWORD *)(v670.__r_.__value_.__r.__words[0] + 8);
      v180 = &v679;
      if (v178)
        goto LABEL_650;
LABEL_651:
      v180->__r_.__value_.__s.__data_[v178] = 0;
      if (SHIBYTE(v675.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v675.__r_.__value_.__l.__data_);
      v675 = v679;
      v679.__r_.__value_.__r.__words[0] = 0;
      if ((llvm::getAsUnsignedInteger() & 1) != 0)
        goto LABEL_664;
      data = (int)v679.__r_.__value_.__l.__data_;
      if (HIDWORD(v679.__r_.__value_.__r.__words[0]))
        goto LABEL_664;
      v679.__r_.__value_.__r.__words[0] = 0;
      if ((llvm::getAsUnsignedInteger() & 1) != 0
        || (v184 = (int)v679.__r_.__value_.__l.__data_, HIDWORD(v679.__r_.__value_.__r.__words[0])))
      {
        v184 = 0;
LABEL_731:
        LOBYTE(v185) = 0;
        goto LABEL_665;
      }
      v679.__r_.__value_.__r.__words[0] = 0;
      if ((llvm::getAsUnsignedInteger() & 1) != 0)
        goto LABEL_731;
      v185 = v679.__r_.__value_.__r.__words[0] != 0;
      if (v679.__r_.__value_.__r.__words[0] != v185)
        goto LABEL_731;
      if (LODWORD(v670.__r_.__value_.__r.__words[1]) <= 4)
      {
        v177 = 0;
        goto LABEL_665;
      }
      v186 = *(_QWORD *)(v670.__r_.__value_.__r.__words[0] + 72);
      if (v186 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1373;
      v541 = v184;
      v187 = *(const void **)(v670.__r_.__value_.__r.__words[0] + 64);
      if (v186 >= 0x17)
      {
        v229 = (v186 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v186 | 7) != 0x17)
          v229 = v186 | 7;
        v230 = v229 + 1;
        v188 = (std::string *)operator new(v229 + 1);
        v172 = v545;
        v679.__r_.__value_.__l.__size_ = v186;
        v679.__r_.__value_.__r.__words[2] = v230 | 0x8000000000000000;
        v679.__r_.__value_.__r.__words[0] = (std::string::size_type)v188;
      }
      else
      {
        *((_BYTE *)&v679.__r_.__value_.__s + 23) = *(_QWORD *)(v670.__r_.__value_.__r.__words[0] + 72);
        v188 = &v679;
        if (!v186)
          goto LABEL_747;
      }
      memmove(v188, v187, v186);
LABEL_747:
      v188->__r_.__value_.__s.__data_[v186] = 0;
      if (SHIBYTE(v673.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v673.__r_.__value_.__l.__data_);
      v177 = 0;
      v673 = v679;
      v184 = v541;
LABEL_665:
      if ((std::string::size_type *)v670.__r_.__value_.__l.__data_ != &v670.__r_.__value_.__r.__words[2])
        free(v670.__r_.__value_.__l.__data_);
      if (v177)
      {
        *(_QWORD *)(v172 + 312) = 0x1DE00000000;
        if (*(char *)(v172 + 311) < 0)
        {
          **(_BYTE **)(v172 + 288) = 0;
          *(_QWORD *)(v172 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v172 + 288) = 0;
          *(_BYTE *)(v172 + 311) = 0;
        }
        v201 = v547;
        *(_OWORD *)&v670.__r_.__value_.__l.__data_ = v545 + 320;
        v670.__r_.__value_.__r.__words[2] = v172;
        LOWORD(v671[0]) = 1;
        *(_BYTE *)(v172 + 320) = 0;
        *(_DWORD *)(v172 + 664) = 0;
        v221 = *(unsigned int *)(v172 + 776);
        if ((_DWORD)v221)
        {
          v222 = *(_QWORD *)(v172 + 768);
          v223 = 56 * v221;
          do
          {
            if (*(char *)(v222 + v223 - 9) < 0)
              operator delete(*(void **)(v222 + v223 - 32));
            v223 -= 56;
          }
          while (v223);
        }
        *(_DWORD *)(v172 + 776) = 0;
        v224 = *((_BYTE *)v547 + 23);
        v225 = v224 < 0;
        if (v224 >= 0)
          v226 = v547;
        else
          v226 = *v547;
        v227 = v224 & 0x7F;
        if (v225)
          v228 = (size_t)v547[1];
        else
          v228 = v227;
        sub_22E3B89A8((unsigned __int8 **)&v670, v226, v228);
        sub_22E3BB0B8((uint64_t)&v670);
        goto LABEL_736;
      }
      v189 = v171;
      v190 = operator new(0x60uLL);
      v190[1] = 0;
      v190[2] = 0;
      v190[3] = &off_24FA717A8;
      v191 = (char *)(v190 + 3);
      *v190 = &off_24FA6FEC8;
      if ((v675.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v192 = &v675;
      else
        v192 = (std::string *)v675.__r_.__value_.__r.__words[0];
      if ((v675.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v193 = *((_BYTE *)&v675.__r_.__value_.__s + 23) & 0x7F;
      else
        v193 = v675.__r_.__value_.__l.__size_;
      if ((v673.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v194 = &v673;
      else
        v194 = (std::string *)v673.__r_.__value_.__r.__words[0];
      if ((v673.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v195 = *((_BYTE *)&v673.__r_.__value_.__s + 23) & 0x7F;
      else
        v195 = v673.__r_.__value_.__l.__size_;
      if (v193 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1373;
      v196 = v190;
      v542 = v184;
      if (v193 >= 0x17)
      {
        v198 = (v193 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v193 | 7) != 0x17)
          v198 = v193 | 7;
        v534 = v194;
        v199 = v198 + 1;
        v197 = operator new(v198 + 1);
        v200 = v199 | 0x8000000000000000;
        v194 = v534;
        v196[5] = v193;
        v196[6] = v200;
        v196[4] = v197;
LABEL_689:
        memmove(v197, v192, v193);
        goto LABEL_690;
      }
      v197 = v190 + 4;
      *((_BYTE *)v190 + 55) = v193;
      if (v193)
        goto LABEL_689;
LABEL_690:
      *((_BYTE *)v197 + v193) = 0;
      *((_DWORD *)v196 + 14) = data;
      *((_DWORD *)v196 + 15) = v542;
      *((_BYTE *)v196 + 64) = v185;
      if (v195 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1373;
      v171 = v189;
      v201 = v547;
      if (v195 >= 0x17)
      {
        v203 = (v195 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v195 | 7) != 0x17)
          v203 = v195 | 7;
        v204 = v203 + 1;
        v202 = operator new(v203 + 1);
        v196[10] = v195;
        v196[11] = v204 | 0x8000000000000000;
        v196[9] = v202;
LABEL_697:
        memmove(v202, v194, v195);
        goto LABEL_698;
      }
      v202 = v196 + 9;
      *((_BYTE *)v196 + 95) = v195;
      if (v195)
        goto LABEL_697;
LABEL_698:
      *((_BYTE *)v202 + v195) = 0;
      v205 = *(char **)(v551 + 528);
      v206 = *(_QWORD *)(v551 + 536);
      if ((unint64_t)v205 >= v206)
      {
        v207 = *(char **)(v551 + 520);
        v208 = (v205 - v207) >> 4;
        v209 = v208 + 1;
        a2 = i;
        if ((unint64_t)(v208 + 1) >> 60)
          goto LABEL_1373;
        v210 = v206 - (_QWORD)v207;
        if (v210 >> 3 > v209)
          v209 = v210 >> 3;
        if ((unint64_t)v210 >= 0x7FFFFFFFFFFFFFF0)
          v211 = 0xFFFFFFFFFFFFFFFLL;
        else
          v211 = v209;
        if (v211 >> 60)
          goto LABEL_1382;
        v212 = (char *)operator new(16 * v211);
        v213 = &v212[16 * v208];
        v214 = &v212[16 * v211];
        *(_QWORD *)v213 = v191;
        *((_QWORD *)v213 + 1) = v196;
        v215 = v213 + 16;
        if (v205 == v207)
        {
          *(_QWORD *)(v551 + 520) = v213;
          *(_QWORD *)(v551 + 528) = v215;
          *(_QWORD *)(v551 + 536) = v214;
        }
        else
        {
          do
          {
            v216 = *((_OWORD *)v205 - 1);
            v205 -= 16;
            *((_OWORD *)v213 - 1) = v216;
            v213 -= 16;
            *(_QWORD *)v205 = 0;
            *((_QWORD *)v205 + 1) = 0;
          }
          while (v205 != v207);
          v205 = *(char **)(v551 + 520);
          v217 = *(char **)(v551 + 528);
          *(_QWORD *)(v551 + 520) = v213;
          *(_QWORD *)(v551 + 528) = v215;
          *(_QWORD *)(v551 + 536) = v214;
          while (v217 != v205)
          {
            v218 = (std::__shared_weak_count *)*((_QWORD *)v217 - 1);
            if (v218)
            {
              p_shared_owners = (unint64_t *)&v218->__shared_owners_;
              do
                v220 = __ldaxr(p_shared_owners);
              while (__stlxr(v220 - 1, p_shared_owners));
              if (!v220)
              {
                ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
                std::__shared_weak_count::__release_weak(v218);
              }
            }
            v217 -= 16;
          }
        }
        if (v205)
          operator delete(v205);
        *(_QWORD *)(v551 + 528) = v215;
        v172 = v545;
      }
      else
      {
        *(_QWORD *)v205 = v191;
        *((_QWORD *)v205 + 1) = v196;
        *(_QWORD *)(v551 + 528) = v205 + 16;
        v172 = v545;
        a2 = i;
      }
LABEL_736:
      if (SHIBYTE(v673.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v673.__r_.__value_.__l.__data_);
      if (SHIBYTE(v675.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v675.__r_.__value_.__l.__data_);
      v170 = (std::string::size_type)(v201 + 3);
      if (v170 == v171)
        goto LABEL_750;
    }
    v181 = (v178 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v178 | 7) != 0x17)
      v181 = v178 | 7;
    v182 = v181 + 1;
    v180 = (std::string *)operator new(v181 + 1);
    v172 = v545;
    v679.__r_.__value_.__l.__size_ = v178;
    v679.__r_.__value_.__r.__words[2] = v182 | 0x8000000000000000;
    v679.__r_.__value_.__r.__words[0] = (std::string::size_type)v180;
LABEL_650:
    memmove(v180, v179, v178);
    goto LABEL_651;
  }
LABEL_750:
  v670.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
  sub_22E3B3CC8((void ***)&v670);
  v231 = sub_22E6EBFB4(a2, 210);
  v232 = v551;
  if (v231)
  {
    v233 = v231;
    v234 = *(const char ***)(v231 + 48);
    v235 = *v234;
    if (*v234)
      v236 = strlen(*v234);
    else
      v236 = 0;
    v675.__r_.__value_.__r.__words[0] = (std::string::size_type)v235;
    v675.__r_.__value_.__l.__size_ = v236;
    memset(&v679, 0, sizeof(v679));
    __dst.__r_.__value_.__s.__data_[0] = 58;
    v237 = llvm::StringRef::rfind();
    if (v237 == -1)
    {
      v240 = 0;
      v241 = 0;
      *(_OWORD *)&v670.__r_.__value_.__l.__data_ = *(_OWORD *)&v675.__r_.__value_.__l.__data_;
    }
    else
    {
      if (v675.__r_.__value_.__l.__size_ >= v237)
        v238 = v237;
      else
        v238 = v675.__r_.__value_.__l.__size_;
      if (v675.__r_.__value_.__l.__size_ >= v237 + 1)
        v239 = v237 + 1;
      else
        v239 = v675.__r_.__value_.__l.__size_;
      v240 = v675.__r_.__value_.__r.__words[0] + v239;
      v241 = v675.__r_.__value_.__l.__size_ - v239;
      v670.__r_.__value_.__r.__words[0] = v675.__r_.__value_.__r.__words[0];
      v670.__r_.__value_.__l.__size_ = v238;
    }
    v670.__r_.__value_.__r.__words[2] = v240;
    *(_QWORD *)&v671[0] = v241;
    __dst.__r_.__value_.__s.__data_[0] = 58;
    v242 = llvm::StringRef::rfind();
    if (v242 == -1)
    {
      v244 = v670.__r_.__value_.__l.__size_;
      v243 = (const void *)v670.__r_.__value_.__r.__words[0];
    }
    else
    {
      v243 = (const void *)v670.__r_.__value_.__r.__words[0];
      if (v670.__r_.__value_.__l.__size_ >= v242)
        v244 = v242;
      else
        v244 = v670.__r_.__value_.__l.__size_;
    }
    __dst.__r_.__value_.__r.__words[0] = 0;
    if ((llvm::getAsUnsignedInteger() & 1) != 0
      || HIDWORD(__dst.__r_.__value_.__r.__words[0])
      || (HIDWORD(v680) = __dst.__r_.__value_.__l.__data_,
          __dst.__r_.__value_.__r.__words[0] = 0,
          (llvm::getAsUnsignedInteger() & 1) != 0)
      || HIDWORD(__dst.__r_.__value_.__r.__words[0]))
    {
      a2 = i;
LABEL_777:
      v246 = (void **)(v551 + 288);
      if (*(char *)(v551 + 311) < 0)
        operator delete(*v246);
      *(_OWORD *)v246 = *(_OWORD *)&v679.__r_.__value_.__l.__data_;
      v247 = v680;
      *(_QWORD *)(v551 + 304) = *((_QWORD *)&v679.__r_.__value_.__l + 2);
      *(_QWORD *)(v551 + 312) = v247;
      v248 = *(_BYTE *)(v551 + 311);
      LODWORD(v247) = v248;
      v249 = v248 & 0x7F;
      if ((v247 & 0x80000000) != 0)
        v249 = *(_QWORD *)(v551 + 296);
      if (!v249)
      {
        *(_QWORD *)(v545 + 312) = 0x18800000000;
        if (*(char *)(v545 + 311) < 0)
        {
          **(_BYTE **)(v545 + 288) = 0;
          *(_QWORD *)(v545 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v545 + 288) = 0;
          *(_BYTE *)(v545 + 311) = 0;
        }
        *(_OWORD *)&v670.__r_.__value_.__l.__data_ = v545 + 320;
        v670.__r_.__value_.__r.__words[2] = v545;
        LOWORD(v671[0]) = 1;
        *(_BYTE *)(v545 + 320) = 0;
        *(_DWORD *)(v545 + 664) = 0;
        v250 = *(unsigned int *)(v545 + 776);
        if ((_DWORD)v250)
        {
          v251 = *(_QWORD *)(v545 + 768);
          v252 = 56 * v250;
          do
          {
            if (*(char *)(v251 + v252 - 9) < 0)
              operator delete(*(void **)(v251 + v252 - 32));
            v252 -= 56;
          }
          while (v252);
        }
        *(_DWORD *)(v545 + 776) = 0;
        llvm::opt::Arg::getAsString();
        if ((v679.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v253 = &v679;
        else
          v253 = (std::string *)v679.__r_.__value_.__r.__words[0];
        if ((v679.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v254 = *((_BYTE *)&v679.__r_.__value_.__s + 23) & 0x7F;
        else
          v254 = v679.__r_.__value_.__l.__size_;
        sub_22E3B89A8((unsigned __int8 **)&v670, v253, v254);
        v255 = **(_QWORD **)(v233 + 48);
        v256 = (unsigned __int8 *)v670.__r_.__value_.__r.__words[0];
        if (!v670.__r_.__value_.__r.__words[0])
        {
          v256 = (unsigned __int8 *)sub_22E3B8AAC(v670.__r_.__value_.__l.__size_);
          v670.__r_.__value_.__r.__words[0] = (std::string::size_type)v256;
        }
        v256[*v256 + 1] = 1;
        v257 = v670.__r_.__value_.__r.__words[0];
        v258 = *v670.__r_.__value_.__l.__data_;
        *v670.__r_.__value_.__l.__data_ = v258 + 1;
        *(_QWORD *)(v257 + 8 * v258 + 16) = v255;
        if (SHIBYTE(v679.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v679.__r_.__value_.__l.__data_);
        sub_22E3BB0B8((uint64_t)&v670);
      }
      goto LABEL_801;
    }
    LODWORD(v680) = __dst.__r_.__value_.__l.__data_;
    if (v244 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_1373;
    if (v244 >= 0x17)
    {
      v374 = (v244 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v244 | 7) != 0x17)
        v374 = v244 | 7;
      v375 = v374 + 1;
      v245 = (std::string *)operator new(v374 + 1);
      __dst.__r_.__value_.__l.__size_ = v244;
      __dst.__r_.__value_.__r.__words[2] = v375 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v245;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v244;
      v245 = &__dst;
      if (!v244)
      {
LABEL_1055:
        a2 = i;
        v245->__r_.__value_.__s.__data_[v244] = 0;
        v679 = __dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v376 = HIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x7F;
        else
          v376 = v679.__r_.__value_.__l.__size_;
        if (v376 == 1)
        {
          v377 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? HIBYTE(__dst.__r_.__value_.__r.__words[2])
               : v679.__r_.__value_.__l.__size_;
          v378 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &v679
               : (std::string *)v679.__r_.__value_.__r.__words[0];
          v379 = memcmp(v378, "-", v377 != 0);
          if (v377 == 1 && !v379)
            MEMORY[0x2348A0C14](&v679, "<stdin>");
        }
        goto LABEL_777;
      }
    }
    memmove(v245, v243, v244);
    goto LABEL_1055;
  }
LABEL_801:
  llvm::opt::ArgList::getAllArgValues();
  sub_22E63B344((void **)(v551 + 496));
  *(std::string *)(v551 + 496) = v670;
  memset(&v670, 0, sizeof(v670));
  v679.__r_.__value_.__r.__words[0] = (std::string::size_type)&v670;
  sub_22E3B3CC8((void ***)&v679);
  *(_QWORD *)v551 = *(_QWORD *)v551 & 0xFFFFFFFFFFFF7FFFLL | ((unint64_t)(sub_22E6EC70C(a2, 0x8Au, 0x89u) != 0) << 15);
  *(_QWORD *)v551 = *(_QWORD *)v551 & 0xFFFFFFFFFFFEFFFFLL | ((unint64_t)(sub_22E6EC70C(a2, 0x84u, 0x83u) != 0) << 16);
  sub_22E70B070(a2, 874, (uint64_t)&v670);
  __dst = v670;
  v259 = *(_QWORD *)&v671[0];
  v260 = v670.__r_.__value_.__r.__words[0];
  if (v670.__r_.__value_.__r.__words[0] != *(_QWORD *)&v671[0])
  {
    while (1)
    {
      v261 = *(const char ***)(*(_QWORD *)v260 + 48);
      v262 = (char *)*v261;
      if (!*v261)
        break;
      v263 = strlen(*v261);
      if (!v263)
        break;
      v264 = v263;
      v265 = memchr(v262, 61, v263);
      if (v265)
        v266 = v265 - v262 == -1;
      else
        v266 = 1;
      if (v266)
      {
        if (v264 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_1373;
        if (v264 >= 0x17)
        {
          v268 = (v264 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v264 | 7) != 0x17)
            v268 = v264 | 7;
          v269 = v268 + 1;
          v267 = (std::string *)operator new(v268 + 1);
          v675.__r_.__value_.__l.__size_ = v264;
          v675.__r_.__value_.__r.__words[2] = v269 | 0x8000000000000000;
          v675.__r_.__value_.__r.__words[0] = (std::string::size_type)v267;
        }
        else
        {
          *((_BYTE *)&v675.__r_.__value_.__s + 23) = v264;
          v267 = &v675;
        }
        memmove(v267, v262, v264);
        goto LABEL_817;
      }
LABEL_837:
      __dst.__r_.__value_.__r.__words[0] = v260 + 8;
      sub_22E721830((uint64_t)&__dst);
      v260 = __dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__r.__words[0] == v259)
        goto LABEL_838;
    }
    v264 = 0;
    *((_BYTE *)&v675.__r_.__value_.__s + 23) = 0;
    v267 = &v675;
LABEL_817:
    v267->__r_.__value_.__s.__data_[v264] = 0;
    v270 = *(std::string **)(v232 + 576);
    v271 = *(_QWORD *)(v232 + 584);
    if ((unint64_t)v270 >= v271)
    {
      v272 = *(std::string **)(v539 + 96);
      v273 = 0xAAAAAAAAAAAAAAABLL * (((char *)v270 - (char *)v272) >> 3) + 1;
      if (v273 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_1373;
      if (0x5555555555555556 * ((uint64_t)(v271 - (_QWORD)v272) >> 3) > v273)
        v273 = 0x5555555555555556 * ((uint64_t)(v271 - (_QWORD)v272) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v271 - (_QWORD)v272) >> 3) >= 0x555555555555555)
        v274 = 0xAAAAAAAAAAAAAAALL;
      else
        v274 = v273;
      v681 = v551 + 584;
      if (v274)
      {
        if (v274 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_1382;
        v275 = (char *)operator new(24 * v274);
      }
      else
      {
        v275 = 0;
      }
      v276 = (std::string *)&v275[8 * (((char *)v270 - (char *)v272) >> 3)];
      *v276 = v675;
      memset(&v675, 0, sizeof(v675));
      if (v270 == v272)
      {
        v280 = 0;
        v279 = vdupq_n_s64((unint64_t)v270);
        v277 = &v275[8 * (((char *)v270 - (char *)v272) >> 3)];
      }
      else
      {
        v277 = &v275[8 * (((char *)v270 - (char *)v272) >> 3)];
        do
        {
          v278 = *(_OWORD *)&v270[-1].__r_.__value_.__l.__data_;
          *((_QWORD *)v277 - 1) = *((_QWORD *)&v270[-1].__r_.__value_.__l + 2);
          *(_OWORD *)(v277 - 24) = v278;
          v277 -= 24;
          v270[-1].__r_.__value_.__l.__size_ = 0;
          v270[-1].__r_.__value_.__r.__words[2] = 0;
          v270[-1].__r_.__value_.__r.__words[0] = 0;
          --v270;
        }
        while (v270 != v272);
        v279 = *(int64x2_t *)(v539 + 96);
        v271 = *(_QWORD *)(v551 + 584);
        v280 = HIBYTE(v675.__r_.__value_.__r.__words[2]);
      }
      v281 = v276 + 1;
      *(_QWORD *)(v551 + 568) = v277;
      *(_QWORD *)(v551 + 576) = v276 + 1;
      *(int64x2_t *)&v679.__r_.__value_.__r.__words[1] = v279;
      *(_QWORD *)(v551 + 584) = &v275[24 * v274];
      v680 = v271;
      v679.__r_.__value_.__r.__words[0] = v279.i64[0];
      sub_22E3B8B94((uint64_t)&v679);
      *(_QWORD *)(v551 + 576) = v281;
      if (v280 < 0)
        operator delete(v675.__r_.__value_.__l.__data_);
    }
    else
    {
      *v270 = v675;
      *(_QWORD *)(v232 + 576) = v270 + 1;
    }
    v260 = __dst.__r_.__value_.__r.__words[0];
    v232 = v551;
    goto LABEL_837;
  }
LABEL_838:
  sub_22E70B070(i, 871, (uint64_t)&v670);
  v679 = v670;
  v282 = *(_QWORD *)&v671[0];
  v283 = v670.__r_.__value_.__r.__words[0];
  for (j = v545; v679.__r_.__value_.__r.__words[0] != v282; v283 = v679.__r_.__value_.__r.__words[0])
  {
    __dst.__r_.__value_.__r.__words[0] = **(_QWORD **)(*(_QWORD *)v283 + 48);
    v285 = __dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__r.__words[0])
      v285 = strlen(__dst.__r_.__value_.__l.__data_);
    __dst.__r_.__value_.__l.__size_ = v285;
    v675.__r_.__value_.__s.__data_[0] = 61;
    v286 = llvm::StringRef::rfind();
    if (v286 == -1
      || ((v287 = __dst.__r_.__value_.__l.__size_, __dst.__r_.__value_.__l.__size_ >= v286)
        ? (v288 = v286)
        : (v288 = __dst.__r_.__value_.__l.__size_),
          __dst.__r_.__value_.__l.__size_ >= v286 + 1 ? (v289 = v286 + 1) : (v289 = __dst.__r_.__value_.__l.__size_),
          __dst.__r_.__value_.__l.__size_ > v286 + 1 ? (v290 = v288 == 0) : (v290 = 1),
          v290))
    {
      *(_QWORD *)(j + 312) = 0x32500000000;
      if (*(char *)(j + 311) < 0)
      {
        **(_BYTE **)(j + 288) = 0;
        *(_QWORD *)(j + 296) = 0;
      }
      else
      {
        *(_BYTE *)(j + 288) = 0;
        *(_BYTE *)(j + 311) = 0;
      }
      v556[0] = v545 + 320;
      v556[1] = 0;
      v556[2] = j;
      v557 = 1;
      *(_BYTE *)(j + 320) = 0;
      *(_DWORD *)(j + 664) = 0;
      v293 = *(unsigned int *)(j + 776);
      if ((_DWORD)v293)
      {
        v294 = *(_QWORD *)(j + 768);
        v295 = 56 * v293;
        do
        {
          if (*(char *)(v294 + v295 - 9) < 0)
            operator delete(*(void **)(v294 + v295 - 32));
          v295 -= 56;
        }
        while (v295);
      }
      *(_DWORD *)(j + 776) = 0;
      sub_22E3BB0B8((uint64_t)v556);
    }
    else
    {
      if (v288 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1373;
      v291 = (char *)__dst.__r_.__value_.__r.__words[0];
      if (v288 >= 0x17)
      {
        v296 = (v288 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v288 | 7) != 0x17)
          v296 = v288 | 7;
        v297 = v296 + 1;
        v292 = (std::string *)operator new(v296 + 1);
        __dst.__r_.__value_.__l.__size_ = v288;
        __dst.__r_.__value_.__r.__words[2] = v297 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v292;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v288;
        v292 = &__dst;
      }
      v298 = v287 - v289;
      memmove(v292, v291, v288);
      v292->__r_.__value_.__s.__data_[v288] = 0;
      if (v287 - v289 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1373;
      if (v298 >= 0x17)
      {
        v300 = (v298 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v298 | 7) != 0x17)
          v300 = v298 | 7;
        v301 = v300 + 1;
        v299 = (std::string *)operator new(v300 + 1);
        v675.__r_.__value_.__l.__size_ = v287 - v289;
        v675.__r_.__value_.__r.__words[2] = v301 | 0x8000000000000000;
        v675.__r_.__value_.__r.__words[0] = (std::string::size_type)v299;
      }
      else
      {
        *((_BYTE *)&v675.__r_.__value_.__s + 23) = v287 - v289;
        v299 = &v675;
      }
      memmove(v299, &v291[v289], v287 - v289);
      v299->__r_.__value_.__s.__data_[v298] = 0;
      v302 = *(_QWORD *)(v551 + 648);
      if (v302 >= *(_QWORD *)(v551 + 656))
      {
        v304 = sub_22E579F98((void **)(v551 + 640), (uint64_t)&__dst, (uint64_t)&v675);
        v305 = SHIBYTE(v675.__r_.__value_.__r.__words[2]);
        *(_QWORD *)(v551 + 648) = v304;
        j = v545;
        if (v305 < 0)
          operator delete(v675.__r_.__value_.__l.__data_);
      }
      else
      {
        v303 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
        *(_QWORD *)(v302 + 16) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
        *(_OWORD *)v302 = v303;
        memset(&__dst, 0, sizeof(__dst));
        *(std::string *)(v302 + 24) = v675;
        *(_QWORD *)(v551 + 648) = v302 + 48;
        j = v545;
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
    }
    v679.__r_.__value_.__r.__words[0] += 8;
    sub_22E721830((uint64_t)&v679);
  }
  v306 = v551;
  if (*(_DWORD *)(v551 + 320) != 16 && (*(_BYTE *)(v551 + 3) & 1) != 0)
  {
    *(_QWORD *)(j + 312) = 0x14600000000;
    if (*(char *)(j + 311) < 0)
    {
      **(_BYTE **)(j + 288) = 0;
      *(_QWORD *)(j + 296) = 0;
    }
    else
    {
      *(_BYTE *)(j + 288) = 0;
      *(_BYTE *)(j + 311) = 0;
    }
    v307 = (unsigned __int8 *)(j + 320);
    *(_OWORD *)&v670.__r_.__value_.__l.__data_ = (unint64_t)(j + 320);
    v670.__r_.__value_.__r.__words[2] = j;
    LOWORD(v671[0]) = 1;
    *(_BYTE *)(j + 320) = 0;
    *(_DWORD *)(j + 664) = 0;
    v308 = *(unsigned int *)(j + 776);
    if ((_DWORD)v308)
    {
      v309 = *(_QWORD *)(j + 768);
      v310 = 56 * v308;
      do
      {
        if (*(char *)(v309 + v310 - 9) < 0)
          operator delete(*(void **)(v309 + v310 - 32));
        v310 -= 56;
      }
      while (v310);
      v307 = (unsigned __int8 *)v670.__r_.__value_.__r.__words[0];
      *(_DWORD *)(j + 776) = 0;
      if (!v307)
      {
        v307 = (unsigned __int8 *)sub_22E3B8AAC(v670.__r_.__value_.__l.__size_);
        v670.__r_.__value_.__r.__words[0] = (std::string::size_type)v307;
      }
    }
    else
    {
      *(_DWORD *)(j + 776) = 0;
    }
    v307[*v307 + 1] = 1;
    v311 = v670.__r_.__value_.__r.__words[0];
    v312 = *v670.__r_.__value_.__l.__data_;
    *v670.__r_.__value_.__l.__data_ = v312 + 1;
    *(_QWORD *)(v311 + 8 * v312 + 16) = "-fsystem-module";
    *(_BYTE *)(v311 + (v312 + 1) + 1) = 1;
    v313 = v670.__r_.__value_.__r.__words[0];
    v314 = *v670.__r_.__value_.__l.__data_;
    *v670.__r_.__value_.__l.__data_ = v314 + 1;
    *(_QWORD *)(v313 + 8 * v314 + 16) = "-emit-module";
    sub_22E3BB0B8((uint64_t)&v670);
  }
  if (sub_22E6EBFB4(i, 144))
  {
    v315 = llvm::opt::ArgList::getLastArgValue();
    if (v316 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_1373;
    v317 = (const void *)v315;
    v318 = v316;
    if (v316 >= 0x17)
    {
      v320 = (v316 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v316 | 7) != 0x17)
        v320 = v316 | 7;
      v321 = v320 + 1;
      v319 = operator new(v320 + 1);
      v670.__r_.__value_.__r.__words[2] = v321 | 0x8000000000000000;
      v670.__r_.__value_.__r.__words[0] = (std::string::size_type)v319;
      v670.__r_.__value_.__l.__size_ = v318;
    }
    else
    {
      *((_BYTE *)&v670.__r_.__value_.__s + 23) = v316;
      v319 = &v670;
      if (!v316)
      {
LABEL_904:
        v319[v318] = 0;
        v322 = (void **)(v551 + 736);
        if (*(_BYTE *)(v551 + 760))
        {
          if (*(char *)(v551 + 759) < 0)
            operator delete(*v322);
          *(_OWORD *)v322 = *(_OWORD *)&v670.__r_.__value_.__l.__data_;
          *(_QWORD *)(v551 + 752) = *((_QWORD *)&v670.__r_.__value_.__l + 2);
        }
        else
        {
          *(_OWORD *)v322 = *(_OWORD *)&v670.__r_.__value_.__l.__data_;
          *(_QWORD *)(v551 + 752) = *((_QWORD *)&v670.__r_.__value_.__l + 2);
          *(_BYTE *)(v551 + 760) = 1;
        }
        goto LABEL_909;
      }
    }
    memmove(v319, v317, v318);
    goto LABEL_904;
  }
LABEL_909:
  if (sub_22E6EBFB4(i, 145))
  {
    llvm::opt::ArgList::getAllArgValues();
    if (*(_BYTE *)(v551 + 792))
    {
      sub_22E63B344((void **)(v551 + 768));
      v323 = *(_OWORD *)&v670.__r_.__value_.__l.__data_;
      v324 = v670.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v670.__r_.__value_.__r.__words[1] = 0uLL;
    }
    else
    {
      v323 = *(_OWORD *)&v670.__r_.__value_.__l.__data_;
      v324 = v670.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v670.__r_.__value_.__r.__words[1] = 0uLL;
      *(_BYTE *)(v551 + 792) = 1;
    }
    *(_OWORD *)(v551 + 768) = v323;
    *(_QWORD *)(v551 + 784) = v324;
    v670.__r_.__value_.__r.__words[0] = 0;
    v679.__r_.__value_.__r.__words[0] = (std::string::size_type)&v670;
    sub_22E3B3CC8((void ***)&v679);
  }
  if (*(_DWORD *)(v551 + 16) && *(_DWORD *)(v551 + 20))
  {
    *(_QWORD *)(j + 312) = 0x14500000000;
    if (*(char *)(j + 311) < 0)
    {
      **(_BYTE **)(j + 288) = 0;
      *(_QWORD *)(j + 296) = 0;
    }
    else
    {
      *(_BYTE *)(j + 288) = 0;
      *(_BYTE *)(j + 311) = 0;
    }
    v325 = (unsigned __int8 *)(j + 320);
    *(_OWORD *)&v670.__r_.__value_.__l.__data_ = (unint64_t)(j + 320);
    v670.__r_.__value_.__r.__words[2] = j;
    LOWORD(v671[0]) = 1;
    *(_BYTE *)(j + 320) = 0;
    *(_DWORD *)(j + 664) = 0;
    v326 = *(unsigned int *)(j + 776);
    if ((_DWORD)v326)
    {
      v327 = *(_QWORD *)(j + 768);
      v328 = 56 * v326;
      do
      {
        if (*(char *)(v327 + v328 - 9) < 0)
          operator delete(*(void **)(v327 + v328 - 32));
        v328 -= 56;
      }
      while (v328);
      v325 = (unsigned __int8 *)v670.__r_.__value_.__r.__words[0];
      *(_DWORD *)(j + 776) = 0;
      if (!v325)
      {
        v325 = (unsigned __int8 *)sub_22E3B8AAC(v670.__r_.__value_.__l.__size_);
        v670.__r_.__value_.__r.__words[0] = (std::string::size_type)v325;
      }
    }
    else
    {
      *(_DWORD *)(j + 776) = 0;
    }
    v325[*v325 + 1] = 1;
    v329 = v670.__r_.__value_.__r.__words[0];
    v330 = *v670.__r_.__value_.__l.__data_;
    *v670.__r_.__value_.__l.__data_ = v330 + 1;
    *(_QWORD *)(v329 + 8 * v330 + 16) = "ARC migration";
    *(_BYTE *)(v329 + (v330 + 1) + 1) = 1;
    v331 = v670.__r_.__value_.__r.__words[0];
    v332 = *v670.__r_.__value_.__l.__data_;
    *v670.__r_.__value_.__l.__data_ = v332 + 1;
    *(_QWORD *)(v331 + 8 * v332 + 16) = "ObjC migration";
    sub_22E3BB0B8((uint64_t)&v670);
  }
  v333 = sub_22E6EBFB4(i, 3150);
  if (!v333)
  {
    v341 = 0;
    v342 = 0;
    goto LABEL_1168;
  }
  v334 = v333;
  v335 = 0x100000200;
  v336 = *(const char ***)(v333 + 48);
  v337 = *v336;
  if (!*v336)
  {
    v548 = 0;
    v339 = 0;
    goto LABEL_934;
  }
  v338 = strlen(*v336);
  v339 = v338;
  if (v338 < 0xB)
  {
    v340 = 0;
    v548 = 0;
    goto LABEL_955;
  }
  v349 = *(_QWORD *)&v337[v338 - 11] ^ 0x74756F2D7070632DLL | *(_QWORD *)&v337[v338 - 8] ^ 0x74757074756F2D70;
  v350 = v349 != 0;
  v340 = v349 == 0;
  if (!v349)
  {
    if (v338 >= v338 - 11)
      v339 = v338 - 11;
    if (v339 < 0xB)
    {
      v548 = 0;
      v340 = 1;
      goto LABEL_955;
    }
  }
  v351 = *(_QWORD *)&v337[v339 - 11] ^ 0x2D656C75646F6D2DLL | *(_QWORD *)&v337[v339 - 8] ^ 0x70616D2D656C7564;
  v352 = v339 - 11;
  if (v339 < v339 - 11)
    v352 = v339;
  v548 = v351 == 0;
  if (!v351)
    v339 = v352;
  if (v339 == 18)
  {
    v353 = *(_QWORD *)v337 == 0x69706D6F63657270 && *((_QWORD *)v337 + 1) == 0x646165682D64656CLL;
    v339 = 18;
    if (!v353 || *((_WORD *)v337 + 8) != 29285)
      goto LABEL_958;
    if (!v350)
    {
      v340 = 1;
      goto LABEL_975;
    }
LABEL_934:
    v343 = 0;
    v543 = 0;
    v340 = 0;
    v344 = 0;
    v345 = 0;
    v346 = 0;
    v347 = 0;
    *a5 = 0;
    v348 = 1;
    goto LABEL_1075;
  }
LABEL_955:
  if (v339 >= 7)
  {
LABEL_958:
    v355 = 761816417;
    v356 = bswap32(*(_DWORD *)&v337[v339 - 7]);
    if (v356 == 761816417 && (v355 = 1633969522, v356 = bswap32(*(_DWORD *)&v337[v339 - 4]), v356 == 1633969522))
    {
      v357 = 0;
    }
    else if (v356 < v355)
    {
      v357 = -1;
    }
    else
    {
      v357 = 1;
    }
    v358 = v339 - 7;
    if (v339 < v339 - 7)
      v358 = v339;
    v126 = v357 == 0;
    v350 = v357 == 0;
    if (v126)
      v339 = v358;
    if (v340)
      goto LABEL_971;
    goto LABEL_969;
  }
  v350 = 0;
  if (v340)
    goto LABEL_971;
LABEL_969:
  if (!v350)
  {
    v350 = 0;
    v340 = 0;
    v359 = 0;
    v348 = 1;
    goto LABEL_1006;
  }
LABEL_971:
  if (v339 < 0xC)
  {
    if (v339 < 7)
    {
      if (v339 < 5)
      {
        v359 = 0;
LABEL_1002:
        v348 = v359 ^ 1;
        goto LABEL_1006;
      }
LABEL_993:
      v365 = bswap32(*(_DWORD *)&v337[v339 - 5]);
      if (v365 == 762671973)
      {
        v366 = v337[v339 - 1] - 114;
      }
      else if (v365 < 0x2D757365)
      {
        v366 = -1;
      }
      else
      {
        v366 = 1;
      }
      v368 = v339 - 5;
      if (v339 < v339 - 5)
        v368 = v339;
      v359 = v366 == 0;
      if (!v366)
        v339 = v368;
      goto LABEL_1002;
    }
    goto LABEL_984;
  }
LABEL_975:
  v361 = *(_QWORD *)&v337[v339 - 12] != 0x2D7265646165682DLL || *(_DWORD *)&v337[v339 - 4] != 1953066613;
  v362 = v339 - 12;
  if (v339 < v339 - 12)
    v362 = v339;
  if (!v361)
  {
    v348 = 0;
    v359 = 3;
    goto LABEL_1005;
  }
LABEL_984:
  v364 = *(_DWORD *)&v337[v339 - 7] != 1937339181 || *(_DWORD *)&v337[v339 - 4] != 1835365491;
  v362 = v339 - 7;
  if (v339 < v339 - 7)
    v362 = v339;
  if (v364)
    goto LABEL_993;
  v348 = 0;
  v359 = 2;
LABEL_1005:
  v339 = v362;
LABEL_1006:
  v343 = v350 & ~(v548 || v340) & v348;
  *a5 = v343;
  v543 = v359;
  switch(v339)
  {
    case 1uLL:
      v344 = 0;
      v345 = 0;
      v346 = 0;
      if (*v337 == 99)
        v347 = 0x100000003;
      else
        v347 = 0;
      v339 = 1;
      break;
    case 2uLL:
      v344 = 0;
      v346 = 0;
      if (*(_WORD *)v337 == 27747)
        v347 = 0x100000007;
      else
        v347 = 0;
      v345 = 1;
      v339 = 2;
      break;
    case 3uLL:
      if (*(_WORD *)v337 == 26984 && v337[2] == 112)
      {
        v345 = 0;
        v346 = 0;
        v347 = 0x10000000BLL;
        v344 = 1;
      }
      else
      {
        v370 = *(_WORD *)v337 == 11107 && v337[2] == 43;
        v344 = 1;
        if (!v370)
          goto LABEL_1050;
        v345 = 0;
        v346 = 0;
        v347 = 0x100000004;
      }
      v339 = 3;
      break;
    case 4uLL:
      v347 = 0x100000009;
      if (*(_DWORD *)v337 != 1633973603)
        v347 = 0;
      v344 = 0;
      v345 = 0;
      if (*(_DWORD *)v337 == 1819503720)
        v347 = 0x10000000CLL;
      v346 = 1;
      v339 = 4;
      break;
    case 5uLL:
      v347 = 0x100000008;
      v344 = *(_DWORD *)v337 ^ 0x70636C63 | *((unsigned __int8 *)v337 + 4) ^ 0x70;
      if (v344)
      {
        v347 = 0;
        v344 = 0;
        v345 = 0;
        v346 = 0;
        if (!(*(_DWORD *)v337 ^ 0x6174656D | *((unsigned __int8 *)v337 + 4) ^ 0x6C))
          v347 = 0x10000000DLL;
      }
      else
      {
        v345 = 0;
        v346 = 0;
      }
      v339 = 5;
      break;
    case 0xBuLL:
      v344 = 0;
      if (*(_QWORD *)v337 != 0x76697463656A626FLL || *(_QWORD *)(v337 + 3) != 0x632D657669746365)
        goto LABEL_1050;
      v347 = 0x100000005;
      v339 = 11;
      v345 = 0;
      v346 = 0;
      break;
    case 0xCuLL:
      v372 = *(_QWORD *)v337 == 0x63737265646E6572 && *((_DWORD *)v337 + 2) == 1953524082;
      v339 = 12;
      if (!v372)
        goto LABEL_1049;
      v344 = 0;
      v345 = 0;
      v346 = 0;
      v347 = 0x10000000ALL;
      break;
    case 0xDuLL:
      v373 = *(_QWORD *)v337 == 0x76697463656A626FLL && *(_QWORD *)(v337 + 5) == 0x2B2B632D65766974;
      v339 = 13;
      if (!v373)
        goto LABEL_1049;
      v344 = 0;
      v345 = 0;
      v346 = 0;
      v347 = 0x100000006;
      break;
    default:
LABEL_1049:
      v344 = 0;
LABEL_1050:
      v345 = 0;
      v346 = 0;
      v347 = 0;
      break;
  }
LABEL_1075:
  if ((v347 & 0xFF00000000) != 0)
    v380 = v347;
  else
    v380 = 0;
  LODWORD(v381) = BYTE1(v380);
  v382 = (v380 >> 8) & 7;
  v383 = v348 & !v548;
  if (v383 == 1 && v340 && !(v382 | v380) && !v343)
  {
    if (v346)
    {
      if (*(_DWORD *)v337 == 1667916399)
        v384 = 0x100000005;
      else
        v384 = 0;
    }
    else
    {
      v384 = 0;
    }
    if (v339 == 6 && !HIDWORD(v384) && !(*(_DWORD *)v337 ^ 0x636A626F | *((unsigned __int16 *)v337 + 2) ^ 0x2B2B))
      v384 = 0x100000006;
    if ((v384 & 0xFF00000000) != 0)
      v380 = v384;
    else
      v380 = 0;
    LODWORD(v381) = BYTE1(v380);
    v382 = (v380 >> 8) & 7;
  }
  if (v380 | v382)
    v385 = 1;
  else
    v385 = v340;
  if ((v383 & ((v385 | v343) ^ 1)) != 1)
    goto LABEL_1139;
  if (v339 == 18)
  {
    if (*(_QWORD *)v337 == 0x656C626D65737361
      && *((_QWORD *)v337 + 1) == 0x632D687469772D72
      && *((_WORD *)v337 + 8) == 28784)
    {
      v335 = 0x100000001;
      goto LABEL_1135;
    }
  }
  else if (v339 == 10 && *(_QWORD *)v337 == 0x7074756F2D707063 && *((_WORD *)v337 + 4) == 29813)
  {
    v335 = 0x100000803;
    goto LABEL_1135;
  }
  if (v344)
  {
    v389 = *(_WORD *)v337 == 29537 && v337[2] == 116;
    if (v389 || !memcmp(v337, "pcm", v339))
      goto LABEL_1135;
  }
  if (v339 == 18)
  {
    v390 = *(_QWORD *)v337 ^ 0x69706D6F63657270 | *((_QWORD *)v337 + 1) ^ 0x646165682D64656CLL | *((unsigned __int16 *)v337 + 8) ^ 0x7265;
    if (v390)
      v391 = v345;
    else
      v391 = 0;
    if (v390)
      v392 = 0;
    else
      v392 = 0x100000200;
    if ((v391 & 1) == 0)
    {
      v335 = v392;
      goto LABEL_1135;
    }
  }
  else if (!v345)
  {
    v335 = 0;
    goto LABEL_1135;
  }
  if (!memcmp(v337, "ir", v339))
    v335 = 0x100000002;
  else
    v335 = 0;
LABEL_1135:
  if (v335 <= 0x100000000)
    v380 = 0x100000000;
  else
    v380 = v335;
  v381 = v380 >> 8;
LABEL_1139:
  j = v545;
  v341 = v380;
  if (!(v380 | v381 & 7))
  {
    *(_QWORD *)(v545 + 312) = 0x18800000000;
    if (*(char *)(v545 + 311) < 0)
    {
      **(_BYTE **)(v545 + 288) = 0;
      *(_QWORD *)(v545 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v545 + 288) = 0;
      *(_BYTE *)(v545 + 311) = 0;
    }
    *(_OWORD *)&v670.__r_.__value_.__l.__data_ = v545 + 320;
    v670.__r_.__value_.__r.__words[2] = v545;
    LOWORD(v671[0]) = 1;
    *(_BYTE *)(v545 + 320) = 0;
    *(_DWORD *)(v545 + 664) = 0;
    v393 = *(unsigned int *)(v545 + 776);
    if ((_DWORD)v393)
    {
      v394 = *(_QWORD *)(v545 + 768);
      v395 = 56 * v393;
      do
      {
        if (*(char *)(v394 + v395 - 9) < 0)
          operator delete(*(void **)(v394 + v395 - 32));
        v395 -= 56;
      }
      while (v395);
    }
    *(_DWORD *)(v545 + 776) = 0;
    llvm::opt::Arg::getAsString();
    if ((v679.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v396 = &v679;
    else
      v396 = (std::string *)v679.__r_.__value_.__r.__words[0];
    if ((v679.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v397 = *((_BYTE *)&v679.__r_.__value_.__s + 23) & 0x7F;
    else
      v397 = v679.__r_.__value_.__l.__size_;
    sub_22E3B89A8((unsigned __int8 **)&v670, v396, v397);
    v398 = **(_QWORD **)(v334 + 48);
    v399 = (unsigned __int8 *)v670.__r_.__value_.__r.__words[0];
    if (!v670.__r_.__value_.__r.__words[0])
    {
      v399 = (unsigned __int8 *)sub_22E3B8AAC(v670.__r_.__value_.__l.__size_);
      v670.__r_.__value_.__r.__words[0] = (std::string::size_type)v399;
    }
    v399[*v399 + 1] = 1;
    v400 = v670.__r_.__value_.__r.__words[0];
    v401 = *v670.__r_.__value_.__l.__data_;
    *v670.__r_.__value_.__l.__data_ = v401 + 1;
    *(_QWORD *)(v400 + 8 * v401 + 16) = v398;
    v306 = v551;
    if (SHIBYTE(v679.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v679.__r_.__value_.__l.__data_);
    sub_22E3BB0B8((uint64_t)&v670);
  }
  v402 = v381 | 8;
  if (!v340)
    v402 = v381;
  if ((v348 & 1) != 0)
  {
    if (*a5)
      v342 = v402 | 0xFFFFFF80;
    else
      v342 = v402;
  }
  else
  {
    v342 = v402 & 0xFFFFFF8F | (16 * v543);
    *a5 = 1;
  }
  if (v548)
    v342 = v342 & 0xFFFFFFF8 | 1;
LABEL_1168:
  llvm::opt::ArgList::getAllArgValues();
  v403 = *(_QWORD *)(v306 + 152);
  v544 = (uint64_t *)(v306 + 152);
  v404 = *(_DWORD *)(v306 + 160);
  if (v404)
  {
    v405 = 88 * v404;
    do
    {
      if (*(char *)(v403 + v405 - 65) < 0)
        operator delete(*(void **)(v403 + v405 - 88));
      v405 -= 88;
    }
    while (v405);
  }
  *(_DWORD *)(v306 + 160) = 0;
  v406 = *(_BYTE *)(v306 + 191);
  v407 = v406;
  v408 = *(_QWORD *)(v306 + 176);
  v409 = v406 & 0x7F;
  if (v407 >= 0)
    v410 = v409;
  else
    v410 = *(_QWORD *)(v306 + 176);
  if (!v410)
  {
    v540 = 0;
    v411 = v341;
    goto LABEL_1178;
  }
  v491 = v532;
  if ((_QWORD)v554 == *((_QWORD *)&v554 + 1))
  {
    v492 = a3;
  }
  else
  {
    *(_QWORD *)(j + 312) = 0x16900000000;
    if (*(char *)(j + 311) < 0)
    {
      **(_BYTE **)(j + 288) = 0;
      *(_QWORD *)(j + 296) = 0;
    }
    else
    {
      *(_BYTE *)(j + 288) = 0;
      *(_BYTE *)(j + 311) = 0;
    }
    v552[0] = j + 320;
    v552[1] = 0;
    v552[2] = j;
    v553 = 1;
    *(_BYTE *)(j + 320) = 0;
    *(_DWORD *)(j + 664) = 0;
    v493 = *(unsigned int *)(j + 776);
    if ((_DWORD)v493)
    {
      v494 = *(_QWORD *)(j + 768);
      v495 = 56 * v493;
      do
      {
        if (*(char *)(v494 + v495 - 9) < 0)
          operator delete(*(void **)(v494 + v495 - 32));
        v495 -= 56;
      }
      while (v495);
    }
    *(_DWORD *)(j + 776) = 0;
    sub_22E3BB0B8((uint64_t)v552);
    LOBYTE(v407) = *(_BYTE *)(v306 + 191);
    v408 = *(_QWORD *)(v306 + 176);
    v409 = v407 & 0x7F;
    v492 = a3;
    v491 = v532;
  }
  v496 = (v407 & 0x80u) != 0;
  if ((v407 & 0x80u) == 0)
    v497 = v491;
  else
    v497 = (_QWORD *)*v491;
  if (!v496)
    v408 = v409;
  v668 = v497;
  v669 = v408;
  v667[0] = j;
  v667[1] = (uint64_t)&v668;
  sub_22F418838(v492, j, 0, &__len);
  v498 = __len;
  if (!__len)
  {
    v540 = 0;
    v500 = 0;
    goto LABEL_1331;
  }
  (**(void (***)(std::string *__return_ptr, size_t, _QWORD *, uint64_t))__len)(&v670, __len, v668, v669);
  if ((v672[8] & 1) != 0)
  {
    v501 = v670.__r_.__value_.__r.__words[0];
    v670.__r_.__value_.__r.__words[0] = 0;
    v679.__r_.__value_.__r.__words[0] = v501;
  }
  else
  {
    (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v498 + 32))(v498, &v670);
    if (v499)
    {
      sub_22F418BA8((uint64_t)&v679);
      if ((v680 & 1) != 0)
      {
        v522 = v679.__r_.__value_.__r.__words[0];
        v679.__r_.__value_.__r.__words[0] = 0;
        __dst.__r_.__value_.__r.__words[0] = v522;
        sub_22E724154(v667, &__dst.__r_.__value_.__l.__data_);
        if (__dst.__r_.__value_.__r.__words[0])
          (*(void (**)(std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 8))(__dst.__r_.__value_.__r.__words[0]);
        v540 = 0;
        v498 = 0;
        v500 = 0;
      }
      else
      {
        sub_22F2A99C4(&v679, (uint64_t)&__dst);
        if ((v678 & 1) != 0)
        {
          v524 = __dst.__r_.__value_.__r.__words[0];
          __dst.__r_.__value_.__r.__words[0] = 0;
          v675.__r_.__value_.__r.__words[0] = v524;
          sub_22E724154(v667, &v675.__r_.__value_.__l.__data_);
          if (v675.__r_.__value_.__r.__words[0])
            (*(void (**)(std::string::size_type))(*(_QWORD *)v675.__r_.__value_.__l.__data_ + 8))(v675.__r_.__value_.__r.__words[0]);
          v540 = 0;
          v498 = 0;
          v500 = 0;
        }
        else
        {
          sub_22F2A99C4(&__dst, (uint64_t)&v675);
          if ((v676 & 1) != 0)
          {
            v527 = v675.__r_.__value_.__r.__words[0];
            v675.__r_.__value_.__r.__words[0] = 0;
            v673.__r_.__value_.__r.__words[0] = v527;
            sub_22E724154(v667, &v673.__r_.__value_.__l.__data_);
            if (v673.__r_.__value_.__r.__words[0])
              (*(void (**)(std::string::size_type))(*(_QWORD *)v673.__r_.__value_.__l.__data_ + 8))(v673.__r_.__value_.__r.__words[0]);
            v540 = 0;
            v498 = 0;
            v500 = 0;
          }
          else
          {
            (*(void (**)(std::string::size_type, std::string::size_type, _QWORD))(*(_QWORD *)v675.__r_.__value_.__l.__data_
                                                                                           + 72))(v675.__r_.__value_.__r.__words[0], v675.__r_.__value_.__r.__words[2], 0);
            llvm::cas::ObjectStore::getProxy();
            if ((v674 & 1) != 0)
            {
              v528 = (char *)v673.__r_.__value_.__r.__words[0];
              v673.__r_.__value_.__r.__words[0] = 0;
              v664 = v528;
              sub_22E724154(v667, &v664);
              if (v664)
                (*(void (**)(char *))(*(_QWORD *)v664 + 8))(v664);
              v540 = 0;
              v498 = 0;
              v500 = 0;
            }
            else
            {
              v500 = (const void *)(*(uint64_t (**)(std::string::size_type, std::string::size_type, _QWORD))(*(_QWORD *)v673.__r_.__value_.__l.__data_ + 88))(v673.__r_.__value_.__r.__words[0], v673.__r_.__value_.__r.__words[2], 0);
              v498 = v526;
              v540 = 1;
              v538 = (std::string::value_type *)v679.__r_.__value_.__l.__size_;
            }
            if ((v674 & 1) != 0)
            {
              v529 = v673.__r_.__value_.__r.__words[0];
              v673.__r_.__value_.__r.__words[0] = 0;
              if (v529)
                (*(void (**)(std::string::size_type))(*(_QWORD *)v529 + 8))(v529);
            }
          }
          if ((v676 & 1) != 0)
          {
            v530 = v675.__r_.__value_.__r.__words[0];
            v675.__r_.__value_.__r.__words[0] = 0;
            if (v530)
              (*(void (**)(std::string::size_type))(*(_QWORD *)v530 + 8))(v530);
          }
        }
        if ((v678 & 1) != 0)
        {
          v525 = __dst.__r_.__value_.__r.__words[0];
          __dst.__r_.__value_.__r.__words[0] = 0;
          if (v525)
            (*(void (**)(std::string::size_type))(*(_QWORD *)v525 + 8))(v525);
        }
        v306 = v551;
        j = v545;
      }
      if ((v680 & 1) != 0)
      {
        v523 = v679.__r_.__value_.__r.__words[0];
        v679.__r_.__value_.__r.__words[0] = 0;
        if (v523)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v523 + 8))(v523);
      }
      goto LABEL_1326;
    }
    llvm::cas::ObjectStore::createUnknownObjectError();
  }
  sub_22E724154(v667, &v679.__r_.__value_.__l.__data_);
  if (v679.__r_.__value_.__r.__words[0])
    (*(void (**)(std::string::size_type))(*(_QWORD *)v679.__r_.__value_.__l.__data_ + 8))(v679.__r_.__value_.__r.__words[0]);
  v540 = 0;
  v498 = 0;
  v500 = 0;
LABEL_1326:
  if ((v672[8] & 1) != 0)
  {
    v502 = v670.__r_.__value_.__r.__words[0];
    v670.__r_.__value_.__r.__words[0] = 0;
    if (v502)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v502 + 8))(v502);
  }
  else if ((_OWORD *)v670.__r_.__value_.__l.__size_ != (_OWORD *)((char *)v671 + 8))
  {
    free((void *)v670.__r_.__value_.__l.__size_);
  }
LABEL_1331:
  v503 = v666;
  v411 = v341;
  if (v666)
  {
    v504 = (unint64_t *)&v666->__shared_owners_;
    do
      v505 = __ldaxr(v504);
    while (__stlxr(v505 - 1, v504));
    if (!v505)
    {
      ((void (*)(std::__shared_weak_count *))v503->__on_zero_shared)(v503);
      std::__shared_weak_count::__release_weak(v503);
      v411 = v341;
    }
  }
  if (v498)
  {
    if (v500)
    {
      if (v498 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1373;
      if (v498 >= 0x17)
      {
        v507 = (v498 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v498 | 7) != 0x17)
          v507 = v498 | 7;
        v508 = v507 + 1;
        v506 = (std::string *)operator new(v507 + 1);
        v679.__r_.__value_.__l.__size_ = v498;
        v679.__r_.__value_.__r.__words[2] = v508 | 0x8000000000000000;
        v679.__r_.__value_.__r.__words[0] = (std::string::size_type)v506;
      }
      else
      {
        *((_BYTE *)&v679.__r_.__value_.__s + 23) = v498;
        v506 = &v679;
      }
      memmove(v506, v500, v498);
      v506->__r_.__value_.__s.__data_[v498] = 0;
      v411 = v341;
    }
    else
    {
      memset(&v679, 0, sizeof(v679));
    }
    v510 = *((_QWORD *)&v554 + 1);
    v509 = v555[0];
    if (*((_QWORD *)&v554 + 1) >= v555[0])
    {
      v511 = v554;
      v512 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v554 + 1) - v554) >> 3);
      v513 = v512 + 1;
      if (v512 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_1373;
      if (0x5555555555555556 * ((uint64_t)(v555[0] - v554) >> 3) > v513)
        v513 = 0x5555555555555556 * ((uint64_t)(v555[0] - v554) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v555[0] - v554) >> 3) >= 0x555555555555555)
        v514 = 0xAAAAAAAAAAAAAAALL;
      else
        v514 = v513;
      *((_QWORD *)&v671[0] + 1) = v555;
      if (v514)
      {
        if (v514 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_1382;
        v515 = (char *)operator new(24 * v514);
      }
      else
      {
        v515 = 0;
      }
      v516 = (std::string *)&v515[24 * v512];
      *v516 = v679;
      memset(&v679, 0, sizeof(v679));
      if (v510 == v511)
      {
        v520 = 0;
        v519 = vdupq_n_s64(v510);
        v517 = &v515[24 * v512];
      }
      else
      {
        v517 = &v515[24 * v512];
        do
        {
          v518 = *(_OWORD *)(v510 - 24);
          *((_QWORD *)v517 - 1) = *(_QWORD *)(v510 - 8);
          *(_OWORD *)(v517 - 24) = v518;
          v517 -= 24;
          *(_QWORD *)(v510 - 16) = 0;
          *(_QWORD *)(v510 - 8) = 0;
          *(_QWORD *)(v510 - 24) = 0;
          v510 -= 24;
        }
        while (v510 != v511);
        v519 = (int64x2_t)v554;
        v509 = v555[0];
        v520 = HIBYTE(v679.__r_.__value_.__r.__words[2]);
      }
      v521 = v516 + 1;
      *(_QWORD *)&v554 = v517;
      *((_QWORD *)&v554 + 1) = v516 + 1;
      *(int64x2_t *)&v670.__r_.__value_.__r.__words[1] = v519;
      v555[0] = &v515[24 * v514];
      *(_QWORD *)&v671[0] = v509;
      v670.__r_.__value_.__r.__words[0] = v519.i64[0];
      sub_22E3B8B94((uint64_t)&v670);
      *((_QWORD *)&v554 + 1) = v521;
      v411 = v341;
      if (v520 < 0)
      {
        operator delete(v679.__r_.__value_.__l.__data_);
        v411 = v341;
      }
    }
    else
    {
      **((_OWORD **)&v554 + 1) = *(_OWORD *)&v679.__r_.__value_.__l.__data_;
      *(_QWORD *)(v510 + 16) = *((_QWORD *)&v679.__r_.__value_.__l + 2);
      *((_QWORD *)&v554 + 1) = v510 + 24;
    }
    v306 = v551;
  }
LABEL_1178:
  v413 = (char *)*((_QWORD *)&v554 + 1);
  v412 = v554;
  if ((_QWORD)v554 == *((_QWORD *)&v554 + 1))
  {
    v414 = v555[0];
    if ((unint64_t)v554 < v555[0])
    {
      *(_QWORD *)v554 = 45;
      *(_BYTE *)(v412 + 23) = 1;
      v413 = (char *)(v412 + 24);
LABEL_1188:
      *((_QWORD *)&v554 + 1) = v413;
      v412 = v554;
      goto LABEL_1189;
    }
    v415 = 0x5555555555555556 * ((uint64_t)(v555[0] - v554) >> 3);
    if (v415 <= 1)
      v415 = 1;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v555[0] - v554) >> 3) >= 0x555555555555555)
      v416 = 0xAAAAAAAAAAAAAAALL;
    else
      v416 = v415;
    *((_QWORD *)&v671[0] + 1) = v555;
    if (v416 <= 0xAAAAAAAAAAAAAAALL)
    {
      v417 = 3 * v416;
      v418 = (char *)operator new(24 * v416);
      *(_QWORD *)v418 = 45;
      v418[23] = 1;
      v413 = v418 + 24;
      *(_QWORD *)&v554 = v418;
      *((_QWORD *)&v554 + 1) = v418 + 24;
      v555[0] = &v418[8 * v417];
      v670.__r_.__value_.__r.__words[2] = v412;
      *(_QWORD *)&v671[0] = v414;
      v670.__r_.__value_.__l.__size_ = v412;
      v670.__r_.__value_.__r.__words[0] = v412;
      sub_22E3B8B94((uint64_t)&v670);
      v306 = v551;
      v411 = v341;
      goto LABEL_1188;
    }
LABEL_1382:
    sub_22E3B3F8C();
  }
LABEL_1189:
  if ((v342 & 0x70) != 0 && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v413[-v412] >> 3) >= 2)
  {
    *(_QWORD *)(j + 312) = 0x16500000000;
    if (*(char *)(j + 311) < 0)
    {
      **(_BYTE **)(j + 288) = 0;
      *(_QWORD *)(j + 296) = 0;
    }
    else
    {
      *(_BYTE *)(j + 288) = 0;
      *(_BYTE *)(j + 311) = 0;
    }
    *(_OWORD *)&v670.__r_.__value_.__l.__data_ = (unint64_t)(j + 320);
    v670.__r_.__value_.__r.__words[2] = j;
    LOWORD(v671[0]) = 1;
    *(_BYTE *)(j + 320) = 0;
    *(_DWORD *)(j + 664) = 0;
    v419 = *(unsigned int *)(j + 776);
    if ((_DWORD)v419)
    {
      v420 = *(_QWORD *)(j + 768);
      v421 = 56 * v419;
      do
      {
        if (*(char *)(v420 + v421 - 9) < 0)
          operator delete(*(void **)(v420 + v421 - 32));
        v421 -= 56;
      }
      while (v421);
    }
    *(_DWORD *)(j + 776) = 0;
    v422 = *(_BYTE *)(v554 + 47);
    if (v422 >= 0)
      v423 = (void *)(v554 + 24);
    else
      v423 = *(void **)(v554 + 24);
    if (v422 >= 0)
      v424 = v422 & 0x7F;
    else
      v424 = *(_QWORD *)(v554 + 32);
    sub_22E3B89A8((unsigned __int8 **)&v670, v423, v424);
    sub_22E3BB0B8((uint64_t)&v670);
    v413 = (char *)*((_QWORD *)&v554 + 1);
    v412 = v554;
    v411 = v341;
  }
  v425 = -1431655765 * ((unint64_t)&v413[-v412] >> 3);
  if ((_DWORD)v425)
  {
    v426 = 0;
    v546 = 24 * v425;
    v427 = v342;
    while (1)
    {
      if (v411 | v427 & 7)
      {
        LOWORD(v444) = v411 | (unsigned __int16)((_WORD)v427 << 8);
        v445 = v411;
        v446 = v427;
      }
      else
      {
        v428 = v554 + v426;
        if (*(char *)(v554 + v426 + 23) >= 0)
          v429 = v554 + v426;
        else
          v429 = *(_QWORD *)(v554 + v426);
        v670.__r_.__value_.__r.__words[0] = v429;
        v430 = *(_BYTE *)(v428 + 23);
        v431 = v430;
        v432 = *(_QWORD *)(v428 + 8);
        v433 = v430 & 0x7F;
        if (v431 >= 0)
          v432 = v433;
        v670.__r_.__value_.__l.__size_ = v432;
        v679.__r_.__value_.__s.__data_[0] = 46;
        v434 = llvm::StringRef::rfind();
        if (v434 == -1)
        {
          v443 = 0;
          v442 = 0;
        }
        else
        {
          if (v670.__r_.__value_.__l.__size_ >= v434 + 1)
            v441 = v434 + 1;
          else
            v441 = v670.__r_.__value_.__l.__size_;
          v442 = (unsigned __int8 *)(v670.__r_.__value_.__r.__words[0] + v441);
          v443 = v670.__r_.__value_.__l.__size_ - v441;
        }
        v447 = sub_22E7312F8(v442, v443, v435, v436, v437, v438, v439, v440);
        v446 = v447 >> 8;
        if (BYTE1(v447) & 7 | v447)
          v444 = v447;
        else
          v444 = 3;
        if (!(BYTE1(v447) & 7 | v447))
          v446 = 0;
        if (v426)
          v411 = 0;
        else
          v411 = v444;
        if (!v426)
          v427 = v446;
        v445 = v444;
      }
      if (*(_DWORD *)(v306 + 320) == 16 && (v446 & 7) == 0)
      {
        v444 = v445 | ((v446 & 0xFFFFF8) >> 3 << 11) | 0x100;
        v449 = *(_BYTE *)(v306 + 3) & 1;
      }
      else
      {
        v449 = 0;
      }
      v450 = v554;
      v451 = (_BYTE *)(v554 + v426);
      v452 = *(_DWORD *)(v306 + 160);
      if (v452 >= *(_DWORD *)(v306 + 164))
      {
        v550 = v449;
        v537 = v411;
        v670.__r_.__value_.__r.__words[0] = 0;
        v465 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
        v466 = *(_DWORD *)(v306 + 160);
        v467 = (_QWORD *)(v465 + 88 * v466);
        v468 = v451[23];
        if (v468 < 0)
          v451 = *(_BYTE **)v451;
        if (v451)
        {
          v469 = v468;
          v470 = v468 & 0x7F;
          if (v469 >= 0)
            v471 = v470;
          else
            v471 = *(_QWORD *)(v450 + v426 + 8);
          if (v471 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_1373;
          if (v471 >= 0x17)
          {
            v472 = (v471 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v471 | 7) != 0x17)
              v472 = v471 | 7;
            v535 = v472 + 1;
            v473 = operator new(v472 + 1);
            v467[1] = v471;
            v467[2] = v535 | 0x8000000000000000;
            *v467 = v473;
            v467 = v473;
          }
          else
          {
            *((_BYTE *)v467 + 23) = v471;
            if (!v471)
            {
LABEL_1274:
              *((_BYTE *)v467 + v471) = 0;
              goto LABEL_1275;
            }
          }
          memmove(v467, v451, v471);
          goto LABEL_1274;
        }
        *v467 = 0;
        v467[1] = 0;
        v467[2] = 0;
LABEL_1275:
        v474 = v465 + 88 * v466;
        *(_BYTE *)(v474 + 24) = 0;
        *(_BYTE *)(v474 + 56) = 0;
        *(_BYTE *)(v474 + 64) = 0;
        *(_BYTE *)(v474 + 72) = 0;
        *(_DWORD *)(v474 + 80) = (unsigned __int16)v444;
        *(_BYTE *)(v474 + 84) = v550;
        sub_22E6C940C(v544, v465);
        v475 = (int)v670.__r_.__value_.__l.__data_;
        if ((_QWORD *)*v544 != v532)
          free((void *)*v544);
        *(_QWORD *)(v306 + 152) = v465;
        ++*(_DWORD *)(v306 + 160);
        *(_DWORD *)(v306 + 164) = v475;
        v411 = v537;
        goto LABEL_1257;
      }
      v453 = *v544;
      v454 = (_QWORD *)(*v544 + 88 * v452);
      v455 = v451[23];
      v456 = v455 >= 0 ? (const void *)(v554 + v426) : *(const void **)v451;
      if (v456)
        break;
      *v454 = 0;
      v454[1] = 0;
      v454[2] = 0;
LABEL_1256:
      v464 = v453 + 88 * v452;
      *(_BYTE *)(v464 + 24) = 0;
      *(_BYTE *)(v464 + 56) = 0;
      *(_BYTE *)(v464 + 64) = 0;
      *(_BYTE *)(v464 + 72) = 0;
      *(_DWORD *)(v464 + 80) = (unsigned __int16)v444;
      *(_BYTE *)(v464 + 84) = v449;
      v306 = v551;
      ++*(_DWORD *)(v551 + 160);
LABEL_1257:
      v426 += 24;
      if (v546 == v426)
        goto LABEL_1279;
    }
    v457 = v455;
    v458 = v455 & 0x7F;
    if (v457 >= 0)
      v459 = v458;
    else
      v459 = *(_QWORD *)(v554 + v426 + 8);
    if (v459 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_1373;
    v549 = v449;
    v460 = v411;
    if (v459 >= 0x17)
    {
      v461 = (v459 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v459 | 7) != 0x17)
        v461 = v459 | 7;
      v462 = v461 + 1;
      v463 = operator new(v461 + 1);
      v454[1] = v459;
      v454[2] = v462 | 0x8000000000000000;
      *v454 = v463;
      v454 = v463;
    }
    else
    {
      *((_BYTE *)v454 + 23) = v459;
      if (!v459)
        goto LABEL_1255;
    }
    memmove(v454, v456, v459);
LABEL_1255:
    *((_BYTE *)v454 + v459) = 0;
    v411 = v460;
    v449 = v549;
    goto LABEL_1256;
  }
  LOWORD(v427) = v342;
LABEL_1279:
  if (v540)
  {
    v476 = *(_QWORD *)(v306 + 152) + 88 * *(unsigned int *)(v306 + 160);
    v477 = (void **)(v476 - 88);
    v478 = *(_BYTE *)(v476 - 65);
    v479 = v478;
    if (v478 >= 0)
      v480 = (const void *)(v476 - 88);
    else
      v480 = *(const void **)(v476 - 88);
    v481 = *(_DWORD *)(v476 - 8);
    v482 = *(_BYTE *)(v476 - 4);
    if (!v480)
    {
      memset(&v670, 0, sizeof(v670));
      v487 = v538;
LABEL_1297:
      LOBYTE(v671[0]) = 0;
      v672[0] = 0;
      *(_QWORD *)&v672[8] = v487;
      v672[16] = 1;
      *(_DWORD *)&v672[24] = v481;
      v672[28] = v482;
      if ((v479 & 0x80) != 0)
      {
        v490 = v411;
        operator delete(*v477);
        LOBYTE(v411) = v490;
      }
      *(_OWORD *)v477 = *(_OWORD *)&v670.__r_.__value_.__l.__data_;
      *(_QWORD *)(v476 - 72) = *((_QWORD *)&v670.__r_.__value_.__l + 2);
      *(_OWORD *)(v476 - 64) = v671[0];
      *(_OWORD *)(v476 - 48) = v671[1];
      *(_OWORD *)(v476 - 32) = *(_OWORD *)v672;
      *(_OWORD *)(v476 - 19) = *(_OWORD *)&v672[13];
      goto LABEL_1300;
    }
    v483 = v478 & 0x7F;
    if (v479 >= 0)
      v484 = v483;
    else
      v484 = *(_QWORD *)(v476 - 80);
    if (v484 <= 0x7FFFFFFFFFFFFFF7)
    {
      v485 = v411;
      if (v484 >= 0x17)
      {
        v488 = (v484 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v484 | 7) != 0x17)
          v488 = v484 | 7;
        v489 = v488 + 1;
        v486 = operator new(v488 + 1);
        v670.__r_.__value_.__r.__words[2] = v489 | 0x8000000000000000;
        v670.__r_.__value_.__r.__words[0] = (std::string::size_type)v486;
        v670.__r_.__value_.__l.__size_ = v484;
      }
      else
      {
        *((_BYTE *)&v670.__r_.__value_.__s + 23) = v484;
        v486 = &v670;
        if (!v484)
          goto LABEL_1296;
      }
      memmove(v486, v480, v484);
LABEL_1296:
      LOBYTE(v411) = v485;
      v487 = v538;
      *((_BYTE *)v486 + v484) = 0;
      LOBYTE(v479) = *(_BYTE *)(v476 - 65);
      v306 = v551;
      goto LABEL_1297;
    }
LABEL_1373:
    abort();
  }
LABEL_1300:
  *(_WORD *)(v306 + 144) = v411 | (unsigned __int16)((_WORD)v427 << 8);
  v670.__r_.__value_.__r.__words[0] = (std::string::size_type)&v554;
  sub_22E3B3CC8((void ***)&v670);
}

BOOL sub_22E710ABC()
{
  uint64_t v0;
  std::string::size_type v1;
  std::string::size_type v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char **v7;
  const char **v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  _BOOL4 v15;
  _BOOL4 v17;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char **v28;
  const char **v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  size_t v33;
  size_t v34;
  uint64_t v35;
  _BOOL8 v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *p_p;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char **v53;
  void *v54;
  size_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char **v64;
  void *v65;
  size_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char **v71;
  void *v72;
  size_t v73;
  unsigned __int8 *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char **v80;
  void *v81;
  size_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const char **v87;
  void *v88;
  size_t v89;
  char *v90;
  char *v91;
  const char **v92;
  void *v93;
  size_t v94;
  char v95;
  void *v96;
  size_t v97;
  uint64_t v98;
  __int16 v99;
  unsigned __int8 *v100;
  uint64_t v101;
  uint64_t v102;
  __int16 v103;
  uint64_t **v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108[10];
  char v109[8];
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  char v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  char v123;
  uint64_t v124;
  char v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  unint64_t v142;
  char v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  _BYTE v151[22];
  _BYTE *v152;
  _BYTE v153[144];
  uint64_t v154;
  int v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  _BYTE *v164;
  _BYTE v165[344];
  __int128 v166;
  uint64_t v167;
  int v168;
  __int16 v169;
  void *__p;
  uint64_t v171;
  uint64_t v172;
  __int16 v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  __int16 v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  _QWORD v182[6];
  _QWORD v183[2];
  _BYTE v184[48];
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = (uint64_t *)v0;
  v188 = *MEMORY[0x24BDAC8D0];
  sub_22F2A8710(v108);
  v109[0] &= 0xFCu;
  v110 = 0u;
  v111 = 0u;
  v112 = 0u;
  v113 = 0u;
  v114 = 0u;
  v115 = 0u;
  v116 = 0u;
  v117 = 0;
  v118 = 0u;
  v119 = 0u;
  v120 = 0u;
  v121 = 0u;
  v122 = 0u;
  v123 = 0;
  sub_22F1CA384((uint64_t)&v124);
  v125 &= 0x80u;
  v126 = xmmword_22F45D8D0;
  v127 = 0u;
  v128 = 0u;
  v129 = 0u;
  v130 = 0u;
  v131 = 0u;
  v132 = 0u;
  v133 = 0u;
  v134 = 0u;
  v135 = 0u;
  v136 = 0u;
  v137 = 0u;
  v138 = 0u;
  v139 = 0u;
  v140 = 0u;
  v141 = 0u;
  v142 = v142 & 0xFFFFFFFE1F050010 | 0x100D06000;
  v143 = v143 & 0x80 | 0x2C;
  v144 = 0u;
  v145 = 0u;
  v146 = 0u;
  v147 = 0u;
  v148 = 0u;
  v149 = 0u;
  v150 = 0u;
  memset(v151, 0, sizeof(v151));
  v152 = &v153[8];
  memset(v153, 0, sizeof(v153));
  v154 = 0;
  v155 = 25;
  v161 = 0u;
  v162 = 0u;
  v159 = 0u;
  v160 = 0u;
  v157 = 0u;
  v158 = 0u;
  v156 = 0u;
  v163 = 0;
  memset(v165, 0, 281);
  v164 = v165;
  v165[304] = 0;
  v165[312] = 0;
  v165[336] = 0;
  v167 = 0;
  v166 = 0u;
  v168 = 500;
  v169 = v169 & 0xF800 | 4;
  if (!v6)
    goto LABEL_49;
  v92 = v8;
  v10 = 0;
  v11 = v6;
  v12 = 8 * v6;
  do
  {
    v13 = *v8;
    if (!*v8)
    {
LABEL_13:
      v15 = 0;
      goto LABEL_23;
    }
    v14 = strlen(*v8);
    if (v14 == 19)
    {
      v15 = *(_QWORD *)v13 == 0x6E756F722D6F6E2DLL
         && *((_QWORD *)v13 + 1) == 0x612D706972742D64
         && *(_QWORD *)(v13 + 11) == 0x736772612D706972;
    }
    else
    {
      if (v14 != 16)
        goto LABEL_13;
      v15 = 0;
      v17 = *(_QWORD *)v13 == 0x742D646E756F722DLL && *((_QWORD *)v13 + 1) == 0x736772612D706972;
      v10 |= v17;
    }
LABEL_23:
    v10 &= !v15;
    ++v8;
    v12 -= 8;
  }
  while (v12);
  v8 = v92;
  v6 = v11;
  if ((v10 & 1) == 0)
  {
LABEL_49:
    v36 = sub_22E6FFA38(v9, v8, v6, v4, v2);
    goto LABEL_152;
  }
  v20 = operator new();
  *(_QWORD *)(v20 + 8) = 0;
  v107 = v20;
  *(_DWORD *)v20 = 1;
  v21 = operator new();
  *(_OWORD *)(v21 + 48) = 0u;
  *(_OWORD *)(v21 + 64) = 0u;
  *(_OWORD *)(v21 + 80) = 0u;
  *(_OWORD *)(v21 + 96) = 0u;
  *(_OWORD *)(v21 + 112) = 0u;
  *(_OWORD *)(v21 + 128) = 0u;
  *(_OWORD *)(v21 + 144) = 0u;
  *(_OWORD *)(v21 + 160) = 0u;
  *(_OWORD *)(v21 + 176) = 0u;
  v22 = *(_DWORD *)(v21 + 4) & 0xFF800000 | 0x6F0;
  v23 = *(_BYTE *)(v21 + 40) & 0x80;
  *(_QWORD *)(v21 + 24) = 0x100000032;
  *(_QWORD *)(v21 + 32) = 8;
  *(_QWORD *)(v21 + 8) = 0x600000000;
  *(_QWORD *)(v21 + 16) = 0xA0000000ALL;
  *(_BYTE *)(v21 + 40) = v23;
  v106 = v21;
  *(_DWORD *)v21 = 1;
  *(_DWORD *)(v21 + 4) = v22;
  sub_22F1CB3A4((uint64_t)v184, &v107, &v106, 0, 1);
  sub_22E3B3C18(&v106);
  sub_22E3B3D40(&v107);
  v24 = operator new();
  *(_QWORD *)(v24 + 8) = 0;
  *(_QWORD *)v24 = &off_24FA718B0;
  *(_OWORD *)(v24 + 16) = 0u;
  *(_OWORD *)(v24 + 32) = 0u;
  *(_OWORD *)(v24 + 48) = 0u;
  *(_OWORD *)(v24 + 64) = 0u;
  *(_OWORD *)(v24 + 80) = 0u;
  *(_OWORD *)(v24 + 96) = 0u;
  *(_OWORD *)(v24 + 112) = 0u;
  *(_QWORD *)(v24 + 128) = 0;
  v25 = v186;
  v186 = v24;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v185 = v24;
  if (!sub_22E6FFA38(v108, v92, v11, (uint64_t)v184, v2) || v187)
  {
    v37 = *(_DWORD *)(v4 + 184);
    v36 = sub_22E6FFA38(v9, v92, v11, v4, v2);
    if (v36 && *(_DWORD *)(v4 + 184) == v37)
    {
      *(_QWORD *)(v4 + 312) = 0x13A00000000;
      if (*(char *)(v4 + 311) < 0)
      {
        **(_BYTE **)(v4 + 288) = 0;
        *(_QWORD *)(v4 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v4 + 288) = 0;
        *(_BYTE *)(v4 + 311) = 0;
      }
      v178 = v4 + 320;
      v179 = 0;
      v180 = (_QWORD *)v4;
      LOWORD(v181) = 1;
      *(_BYTE *)(v4 + 320) = 0;
      *(_DWORD *)(v4 + 664) = 0;
      v38 = *(unsigned int *)(v4 + 776);
      if ((_DWORD)v38)
      {
        v39 = *(_QWORD *)(v4 + 768);
        v40 = 56 * v38;
        do
        {
          if (*(char *)(v39 + v40 - 9) < 0)
            operator delete(*(void **)(v39 + v40 - 32));
          v40 -= 56;
        }
        while (v40);
      }
      *(_DWORD *)(v4 + 776) = 0;
      sub_22E3BB0B8((uint64_t)&v178);
      *(_QWORD *)(v4 + 312) = 0x1E100000000;
      if (*(char *)(v4 + 311) < 0)
      {
        **(_BYTE **)(v4 + 288) = 0;
        *(_QWORD *)(v4 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v4 + 288) = 0;
        *(_BYTE *)(v4 + 311) = 0;
      }
      v174 = (void *)(v4 + 320);
      v175 = 0;
      v176 = v4;
      v177 = 1;
      *(_BYTE *)(v4 + 320) = 0;
      *(_DWORD *)(v4 + 664) = 0;
      v41 = *(unsigned int *)(v4 + 776);
      if ((_DWORD)v41)
      {
        v42 = *(_QWORD *)(v4 + 768);
        v43 = 56 * v41;
        do
        {
          if (*(char *)(v42 + v43 - 9) < 0)
            operator delete(*(void **)(v42 + v43 - 32));
          v43 -= 56;
        }
        while (v43);
      }
      *(_DWORD *)(v4 + 776) = 0;
      sub_22E724A2C(&__p, v92, v11);
      if (v172 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v172 >= 0)
        v45 = HIBYTE(v172) & 0x7F;
      else
        v45 = v171;
      sub_22E3B89A8((unsigned __int8 **)&v174, p_p, v45);
      if (SHIBYTE(v172) < 0)
        operator delete(__p);
      sub_22E3BB0B8((uint64_t)&v174);
      v36 = 0;
    }
  }
  else
  {
    v179 = 0;
    v178 = 0;
    v180 = v182;
    v181 = 0x400000000;
    v182[4] = v183;
    v182[5] = 0;
    v183[0] = 0;
    v183[1] = 1;
    v105 = &v178;
    v104 = &v105;
    v174 = &v176;
    v175 = 0x600000000;
    sub_22E715750((uint64_t)v108, (uint64_t)&v174, (uint64_t (*)(uint64_t, __int128 *))sub_22E724B34, (uint64_t)&v104);
    if (sub_22E6FFA38(v9, (const char **)v174, v175, v4, v2))
    {
      __p = &v172;
      v171 = 0x600000000;
      sub_22E715750((uint64_t)v9, (uint64_t)&__p, (uint64_t (*)(uint64_t, __int128 *))sub_22E724B34, (uint64_t)&v104);
      v26 = v175;
      v27 = v171;
      if ((_DWORD)v175 != (_DWORD)v171)
        goto LABEL_56;
      v28 = (const char **)v174;
      v29 = (const char **)__p;
      v90 = (char *)__p;
      v91 = (char *)v174;
      if ((_DWORD)v175)
      {
        v30 = 8 * v175 - 8;
        v31 = 8 * v171 - 8;
        while (1)
        {
          v32 = *v29;
          if (*v28)
          {
            v33 = strlen(*v28);
            v34 = v33;
            if (v32)
            {
              if (v33 != strlen(v32) || v34 && memcmp(*v28, v32, v34))
                goto LABEL_56;
            }
            else if (v33)
            {
              goto LABEL_56;
            }
          }
          else if (v32 && *v32)
          {
            goto LABEL_56;
          }
          ++v28;
          ++v29;
          if (v30)
          {
            v30 -= 8;
            v35 = v31;
            v31 -= 8;
            if (v35)
              continue;
          }
          break;
        }
      }
      if (v28 == (const char **)&v91[8 * v26] && v29 == (const char **)&v90[8 * v27])
      {
        *(_QWORD *)(v4 + 312) = 0x1E900000000;
        if (*(char *)(v4 + 311) < 0)
        {
          **(_BYTE **)(v4 + 288) = 0;
          *(_QWORD *)(v4 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v4 + 288) = 0;
          *(_BYTE *)(v4 + 311) = 0;
        }
        v75 = (unsigned __int8 *)(v4 + 320);
        v100 = (unsigned __int8 *)(v4 + 320);
        v101 = 0;
        v102 = v4;
        v103 = 1;
        *(_BYTE *)(v4 + 320) = 0;
        *(_DWORD *)(v4 + 664) = 0;
        v76 = *(unsigned int *)(v4 + 776);
        if ((_DWORD)v76)
        {
          v77 = *(_QWORD *)(v4 + 768);
          v78 = 56 * v76;
          do
          {
            if (*(char *)(v77 + v78 - 9) < 0)
              operator delete(*(void **)(v77 + v78 - 32));
            v78 -= 56;
          }
          while (v78);
          LODWORD(v76) = *v75;
        }
        *(_DWORD *)(v4 + 776) = 0;
        v79 = v175;
        v80 = (const char **)v174;
        v75[v76 + 1] = 2;
        *(_BYTE *)(v4 + 320) = v76 + 1;
        *(_QWORD *)&v75[8 * v76 + 16] = 1;
        sub_22E724A2C(&v96, v80, v79);
        if (v98 >= 0)
          v81 = &v96;
        else
          v81 = v96;
        if (v98 >= 0)
          v82 = HIBYTE(v98) & 0x7F;
        else
          v82 = v97;
        sub_22E3B89A8(&v100, v81, v82);
        if (SHIBYTE(v98) < 0)
          operator delete(v96);
        sub_22E3BB0B8((uint64_t)&v100);
        *(_QWORD *)(v4 + 312) = 0x1E900000000;
        if (*(char *)(v4 + 311) < 0)
        {
          **(_BYTE **)(v4 + 288) = 0;
          *(_QWORD *)(v4 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v4 + 288) = 0;
          *(_BYTE *)(v4 + 311) = 0;
        }
        v100 = (unsigned __int8 *)(v4 + 320);
        v101 = 0;
        v102 = v4;
        v103 = 1;
        *(_BYTE *)(v4 + 320) = 0;
        *(_DWORD *)(v4 + 664) = 0;
        v83 = *(unsigned int *)(v4 + 776);
        if ((_DWORD)v83)
        {
          v84 = *(_QWORD *)(v4 + 768);
          v85 = 56 * v83;
          do
          {
            if (*(char *)(v84 + v85 - 9) < 0)
              operator delete(*(void **)(v84 + v85 - 32));
            v85 -= 56;
          }
          while (v85);
          LODWORD(v83) = *v75;
        }
        *(_DWORD *)(v4 + 776) = 0;
        v86 = v171;
        v87 = (const char **)__p;
        *(_BYTE *)(v4 + 320 + v83 + 1) = 2;
        *(_BYTE *)(v4 + 320) = v83 + 1;
        *(_QWORD *)(v4 + 320 + 8 * v83 + 16) = 2;
        sub_22E724A2C(&v96, v87, v86);
        if (v98 >= 0)
          v88 = &v96;
        else
          v88 = v96;
        if (v98 >= 0)
          v89 = HIBYTE(v98) & 0x7F;
        else
          v89 = v97;
        sub_22E3B89A8(&v100, v88, v89);
        if (SHIBYTE(v98) < 0)
          operator delete(v96);
        sub_22E3BB0B8((uint64_t)&v100);
        v36 = 1;
      }
      else
      {
LABEL_56:
        *(_QWORD *)(v4 + 312) = 0x13B00000000;
        if (*(char *)(v4 + 311) < 0)
        {
          **(_BYTE **)(v4 + 288) = 0;
          *(_QWORD *)(v4 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v4 + 288) = 0;
          *(_BYTE *)(v4 + 311) = 0;
        }
        v56 = (unsigned __int8 *)(v4 + 320);
        v100 = (unsigned __int8 *)(v4 + 320);
        v101 = 0;
        v102 = v4;
        v103 = 1;
        *(_BYTE *)(v4 + 320) = 0;
        *(_DWORD *)(v4 + 664) = 0;
        v57 = *(unsigned int *)(v4 + 776);
        if ((_DWORD)v57)
        {
          v58 = *(_QWORD *)(v4 + 768);
          v59 = 56 * v57;
          do
          {
            if (*(char *)(v58 + v59 - 9) < 0)
              operator delete(*(void **)(v58 + v59 - 32));
            v59 -= 56;
          }
          while (v59);
        }
        *(_DWORD *)(v4 + 776) = 0;
        sub_22E3BB0B8((uint64_t)&v100);
        *(_QWORD *)(v4 + 312) = 0x1E000000000;
        if (*(char *)(v4 + 311) < 0)
        {
          **(_BYTE **)(v4 + 288) = 0;
          *(_QWORD *)(v4 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v4 + 288) = 0;
          *(_BYTE *)(v4 + 311) = 0;
        }
        v96 = (void *)(v4 + 320);
        v97 = 0;
        v98 = v4;
        v99 = 1;
        *(_BYTE *)(v4 + 320) = 0;
        *(_DWORD *)(v4 + 664) = 0;
        v60 = *(unsigned int *)(v4 + 776);
        if ((_DWORD)v60)
        {
          v61 = *(_QWORD *)(v4 + 768);
          v62 = 56 * v60;
          do
          {
            if (*(char *)(v61 + v62 - 9) < 0)
              operator delete(*(void **)(v61 + v62 - 32));
            v62 -= 56;
          }
          while (v62);
          LODWORD(v60) = *v56;
        }
        *(_DWORD *)(v4 + 776) = 0;
        v63 = v175;
        v64 = (const char **)v174;
        *(_BYTE *)(v4 + 320 + v60 + 1) = 2;
        *(_BYTE *)(v4 + 320) = v60 + 1;
        *(_QWORD *)(v4 + 320 + 8 * v60 + 16) = 1;
        sub_22E724A2C(&v93, v64, v63);
        if (v95 >= 0)
          v65 = &v93;
        else
          v65 = v93;
        if (v95 >= 0)
          v66 = v95 & 0x7F;
        else
          v66 = v94;
        sub_22E3B89A8((unsigned __int8 **)&v96, v65, v66);
        if (v95 < 0)
          operator delete(v93);
        sub_22E3BB0B8((uint64_t)&v96);
        *(_QWORD *)(v4 + 312) = 0x1E000000000;
        if (*(char *)(v4 + 311) < 0)
        {
          **(_BYTE **)(v4 + 288) = 0;
          *(_QWORD *)(v4 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v4 + 288) = 0;
          *(_BYTE *)(v4 + 311) = 0;
        }
        v96 = (void *)(v4 + 320);
        v97 = 0;
        v98 = v4;
        v99 = 1;
        *(_BYTE *)(v4 + 320) = 0;
        *(_DWORD *)(v4 + 664) = 0;
        v67 = *(unsigned int *)(v4 + 776);
        if ((_DWORD)v67)
        {
          v68 = *(_QWORD *)(v4 + 768);
          v69 = 56 * v67;
          do
          {
            if (*(char *)(v68 + v69 - 9) < 0)
              operator delete(*(void **)(v68 + v69 - 32));
            v69 -= 56;
          }
          while (v69);
          LODWORD(v67) = *v56;
        }
        *(_DWORD *)(v4 + 776) = 0;
        v70 = v171;
        v71 = (const char **)__p;
        *(_BYTE *)(v4 + 320 + v67 + 1) = 2;
        *(_BYTE *)(v4 + 320) = v67 + 1;
        *(_QWORD *)(v4 + 320 + 8 * v67 + 16) = 2;
        sub_22E724A2C(&v93, v71, v70);
        if (v95 >= 0)
          v72 = &v93;
        else
          v72 = v93;
        if (v95 >= 0)
          v73 = v95 & 0x7F;
        else
          v73 = v94;
        sub_22E3B89A8((unsigned __int8 **)&v96, v72, v73);
        if (v95 < 0)
          operator delete(v93);
        sub_22E3BB0B8((uint64_t)&v96);
        v36 = 0;
      }
      if (__p != &v172)
        free(__p);
    }
    else
    {
      *(_QWORD *)(v4 + 312) = 0x13C00000000;
      if (*(char *)(v4 + 311) < 0)
      {
        **(_BYTE **)(v4 + 288) = 0;
        *(_QWORD *)(v4 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v4 + 288) = 0;
        *(_BYTE *)(v4 + 311) = 0;
      }
      __p = (void *)(v4 + 320);
      v171 = 0;
      v172 = v4;
      v173 = 1;
      *(_BYTE *)(v4 + 320) = 0;
      *(_DWORD *)(v4 + 664) = 0;
      v46 = *(unsigned int *)(v4 + 776);
      if ((_DWORD)v46)
      {
        v47 = *(_QWORD *)(v4 + 768);
        v48 = 56 * v46;
        do
        {
          if (*(char *)(v47 + v48 - 9) < 0)
            operator delete(*(void **)(v47 + v48 - 32));
          v48 -= 56;
        }
        while (v48);
      }
      *(_DWORD *)(v4 + 776) = 0;
      sub_22E3BB0B8((uint64_t)&__p);
      *(_QWORD *)(v4 + 312) = 0x1E000000000;
      if (*(char *)(v4 + 311) < 0)
      {
        **(_BYTE **)(v4 + 288) = 0;
        *(_QWORD *)(v4 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v4 + 288) = 0;
        *(_BYTE *)(v4 + 311) = 0;
      }
      v100 = (unsigned __int8 *)(v4 + 320);
      v101 = 0;
      v102 = v4;
      v103 = 1;
      *(_BYTE *)(v4 + 320) = 0;
      *(_DWORD *)(v4 + 664) = 0;
      v49 = *(unsigned int *)(v4 + 776);
      if ((_DWORD)v49)
      {
        v50 = *(_QWORD *)(v4 + 768);
        v51 = 56 * v49;
        do
        {
          if (*(char *)(v50 + v51 - 9) < 0)
            operator delete(*(void **)(v50 + v51 - 32));
          v51 -= 56;
        }
        while (v51);
        LODWORD(v49) = *(unsigned __int8 *)(v4 + 320);
      }
      *(_DWORD *)(v4 + 776) = 0;
      v52 = v175;
      v53 = (const char **)v174;
      *(_BYTE *)(v4 + 320 + v49 + 1) = 2;
      *(_BYTE *)(v4 + 320) = v49 + 1;
      *(_QWORD *)(v4 + 320 + 8 * v49 + 16) = 1;
      sub_22E724A2C(&v96, v53, v52);
      if (v98 >= 0)
        v54 = &v96;
      else
        v54 = v96;
      if (v98 >= 0)
        v55 = HIBYTE(v98) & 0x7F;
      else
        v55 = v97;
      sub_22E3B89A8(&v100, v54, v55);
      if (SHIBYTE(v98) < 0)
        operator delete(v96);
      sub_22E3BB0B8((uint64_t)&v100);
      v36 = 0;
    }
    if (v174 != &v176)
      free(v174);
    sub_22E3B4EF4((uint64_t)&v178);
  }
  sub_22F1CB5CC((uint64_t)v184);
LABEL_152:
  sub_22E6C97A0((uint64_t)v109);
  sub_22E6D86EC((uint64_t)v108);
  return v36;
}

void sub_22E711880(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t **v20;
  unint64_t *v21;
  unint64_t *v22;
  _QWORD *v23;
  char v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  const void *v29;
  size_t v30;
  unsigned int HashValue;
  char v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  char *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  BOOL v61;
  BOOL v62;
  uint64_t v63;
  int v64;
  unsigned int *v65;
  uint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int *v70;
  int v71;
  unsigned int v72;
  BOOL v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned __int16 *v76;
  unint64_t v77;
  size_t v78;
  unsigned __int16 *v79;
  _QWORD *v80;
  unint64_t *p_dst;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  size_t v89;
  const void *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE v99[160];
  _BYTE *v100;
  unint64_t __dst;
  __int128 v102;
  _QWORD v103[7];

  v103[5] = *MEMORY[0x24BDAC8D0];
  llvm::MD5::MD5((llvm::MD5 *)v99);
  v99[152] = 1;
  v100 = v99;
  sub_22F20D5D0(&__dst);
  if (v102 >= 0)
    v5 = HIBYTE(v102) & 0x7F;
  else
    v5 = v102;
  *(_QWORD *)&v96 = v5;
  llvm::MD5::update();
  llvm::MD5::update();
  if (SHIBYTE(v102) < 0)
    operator delete((void *)__dst);
  LODWORD(__dst) = 25;
  llvm::MD5::update();
  LODWORD(__dst) = 0;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)*a1 & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)*a1 >> 1) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)*a1 >> 2) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)*a1 >> 3) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)*a1 >> 4) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)*a1 >> 5) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)*a1 >> 6) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)*a1 >> 7) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)*a1 >> 8) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)*a1 >> 9) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)*a1 >> 10) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)*a1 >> 11) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)*a1 >> 12) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)*a1 >> 13) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)*a1 >> 14) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)*a1 >> 19) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)*a1 >> 20) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)*a1 >> 21) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)*a1 >> 22) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)*a1 >> 23) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = HIBYTE(*(_DWORD *)*a1) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)*a1 >> 25) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)*a1 >> 26) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)*a1 >> 27) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)*a1 >> 28) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)*a1 >> 31;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 4) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 8);
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 8) >> 33) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 8) >> 34) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 8) >> 36) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 8) >> 37) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 8) >> 39) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 13) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 232) >> 59) & 3;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 232) >> 61) & 3;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 8) >> 41) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 8) >> 42) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 8) >> 43) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 8) >> 44) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 8) >> 45) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 8) >> 46) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 8) >> 47) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 240) & 7;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 14) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 8) >> 49) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 8) >> 50) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 8) >> 51) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 8) >> 52) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 8) >> 53) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 8) >> 54) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 8) >> 55) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 15) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 8) & 0x200000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 8) & 0x400000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 8) & 0x800000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 8) & 0x1000000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 8) & 0x2000000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 8) & 0x4000000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = *(_QWORD *)(*a1 + 8) >> 63;
  llvm::MD5::update();
  LODWORD(__dst) = *(_WORD *)(*a1 + 16) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 16) >> 1) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 16) >> 2) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 16) >> 3) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 16) >> 4) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 240) >> 3) & 3;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 16) >> 5) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (unsigned __int16)((*(unsigned __int16 *)(*a1 + 16) | (*(unsigned __int8 *)(*a1 + 18) << 16)) >> 6);
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int8 *)(*a1 + 18) >> 6) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (unint64_t)*(unsigned __int8 *)(*a1 + 18) >> 7;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 20);
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 24) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 20) >> 33) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 20) >> 34) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 20) >> 35) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 20) >> 36) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 20) >> 37) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 20) >> 38) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 25) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 20) >> 41) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 20) >> 43) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 20) >> 45) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 20) >> 46) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 20) >> 47) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 20) >> 52) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 20) >> 54) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 20) & 0x200000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 20) & 0x400000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 20) & 0x800000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 20) & 0x1000000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 20) & 0x2000000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 20) & 0x4000000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = *(_QWORD *)(*a1 + 20) >> 63;
  llvm::MD5::update();
  LODWORD(__dst) = *(_BYTE *)(*a1 + 28) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int8 *)(*a1 + 28) >> 1) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int8 *)(*a1 + 28) >> 2) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int8 *)(*a1 + 28) >> 3) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int8 *)(*a1 + 28) >> 4) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int8 *)(*a1 + 28) >> 5) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 32);
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 36);
  llvm::MD5::update();
  LODWORD(__dst) = *(_BYTE *)(*a1 + 40) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 44);
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 48);
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 52) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 52) >> 1) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 52) >> 2) & 3;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 52) >> 4) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 52) >> 5) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 52) >> 6) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 52) >> 7) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 52) >> 8) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 52) >> 9) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 52) >> 10) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 52) >> 11) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 52) >> 12) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 52) >> 13) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 52) >> 14) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 52) >> 23) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_BYTE *)(*a1 + 55) & 0xF;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 52) >> 28) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 240) >> 8) & 3;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 240) >> 10) & 7;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 52) >> 29) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 52) >> 30) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_QWORD *)(*a1 + 56);
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 60) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_QWORD *)(*a1 + 64);
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 68) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 64) >> 33) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 64) >> 34) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 64) >> 35) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 64) >> 36) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 64) >> 37) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 64) >> 38) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_QWORD *)(*a1 + 72);
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 76) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 72) >> 33) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 72) >> 34) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 72) >> 35) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 72) >> 36) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 72) >> 37) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 72) >> 38) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 80);
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 84);
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 88);
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 92);
  llvm::MD5::update();
  LODWORD(__dst) = *(_WORD *)(*a1 + 96) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 96) >> 1) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 96) >> 2) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 96) >> 3) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 96) >> 4) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 96) >> 5) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 96) >> 6) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (unsigned __int16)(*(_DWORD *)(*a1 + 240) >> 13);
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 96) >> 7) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_BYTE *)(*a1 + 97) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 96) >> 9) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 96) >> 10) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 96) >> 11) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 96) >> 12) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_QWORD *)(*a1 + 100);
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 104) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 100) >> 33) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 100) >> 34) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 100) >> 35) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 240) >> 29) & 3;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 100) >> 36) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 100) >> 37) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 100) >> 38) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 100) >> 39) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 108);
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 112);
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 116);
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 116) >> 34) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 116) >> 35) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 116) >> 36) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 116) >> 37) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 116) >> 38) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 116) >> 39) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 121) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 116) >> 41) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 116) >> 42) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 116) >> 43) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 116) >> 44) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 116) >> 45) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 116) >> 46) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 116) >> 47) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 122) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 116) >> 49) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 116) >> 51) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 116) >> 52) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 123) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 116) & 0x200000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 116) & 0x400000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 116) & 0x800000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 116) & 0x1000000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 116) & 0x2000000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 116) & 0x4000000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = *(_QWORD *)(*a1 + 116) >> 63;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 124) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 124) >> 1) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 124) >> 2) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 124) >> 3) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 124) >> 4) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 124) >> 5) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 124) >> 6) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 124) >> 7) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 125) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 124) >> 9) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 124) >> 10) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 124) >> 11) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 124) >> 12) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 124) >> 13) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 124) >> 14) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 124) >> 15) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 126) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 124) >> 17) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 124) >> 18) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 124) >> 19) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 124) >> 20) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 124) >> 21) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 124) >> 22) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 124) >> 23) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 127) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 124) >> 25) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 124) >> 26) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 124) >> 27) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 124) >> 28) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 124) >> 29) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 124) >> 30) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 124) >> 31;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 128) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 124) >> 33) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 124) >> 34) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 124) >> 35) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 124) >> 36) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 124) >> 37) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 124) >> 38) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 124) >> 39) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 129) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 124) >> 41) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 124) >> 42) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 124) >> 43) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 124) >> 44) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 124) >> 45) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 124) >> 46) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 124) >> 47) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 130) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 124) >> 49) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 124) >> 50) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 124) >> 51) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 124) >> 52) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 124) >> 53) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 124) >> 54) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 124) >> 55) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 131) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 124) & 0x200000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 124) & 0x400000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 124) & 0x800000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 124) & 0x1000000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 124) & 0x2000000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 124) & 0x4000000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = *(_QWORD *)(*a1 + 124) >> 63;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 244) & 3;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 132) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 132) >> 1) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 132) >> 3) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 132) >> 4) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 132) >> 5) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 132) >> 6) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 132) >> 7) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 132) >> 9) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 132) >> 10) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 132) >> 11) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 132) >> 12) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 132) >> 13) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 132) >> 14) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 132) >> 15) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(unsigned __int16 *)(*a1 + 134);
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 136) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 132) >> 33) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 132) >> 34) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 132) >> 36) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 132) >> 37) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 132) >> 38) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 140);
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 144) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 140) >> 41) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 140) >> 42) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 140) >> 43) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 140) >> 44) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 140) >> 45) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 140) >> 49) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 140) >> 50) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 140) >> 51) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 140) & 0x200000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 140) & 0x400000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 140) & 0x1000000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 140) & 0x2000000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 140) & 0x4000000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 244) >> 11) & 3;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 244) >> 13) & 3;
  llvm::MD5::update();
  LODWORD(__dst) = *(_QWORD *)(*a1 + 140) >> 63;
  llvm::MD5::update();
  LODWORD(__dst) = *(_WORD *)(*a1 + 148) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 148) >> 1) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 148) >> 2) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 148) >> 3) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 148) >> 4) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 148) >> 5) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 148) >> 7) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_WORD *)(*a1 + 149) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 148) >> 9) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 244) >> 15) & 3;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 148) >> 10) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 148) >> 11) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 148) >> 13) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 148) >> 14) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 244) >> 17) & 3;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 244) >> 19) & 7;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 244) >> 22) & 7;
  llvm::MD5::update();
  LODWORD(__dst) = *(unsigned __int16 *)(*a1 + 148) >> 15;
  llvm::MD5::update();
  LODWORD(__dst) = *(_BYTE *)(*a1 + 150) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 244) >> 25) & 7;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_DWORD *)(*a1 + 244) >> 28) & 7;
  llvm::MD5::update();
  LODWORD(__dst) = *(_WORD *)(*a1 + 248) & 7;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 248) >> 3) & 7;
  llvm::MD5::update();
  LODWORD(__dst) = *(_WORD *)(*a1 + 248) >> 6;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int8 *)(*a1 + 150) >> 3) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int8 *)(*a1 + 150) >> 4) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_WORD *)(*a1 + 249) & 3;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 152);
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 156);
  llvm::MD5::update();
  LODWORD(__dst) = *(_BYTE *)(*a1 + 160) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int8 *)(*a1 + 160) >> 1) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int8 *)(*a1 + 160) >> 2) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int8 *)(*a1 + 160) >> 3) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 248) >> 10) & 3;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int16 *)(*a1 + 248) >> 12) & 3;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 192);
  llvm::MD5::update();
  LODWORD(__dst) = *(unsigned __int16 *)(*a1 + 248) >> 14;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 196) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 192) >> 33) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 192) >> 34) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 192) >> 35) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 192) >> 36) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 192) >> 37) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 192) >> 38) & 3;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 192) >> 40) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 192) >> 41) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 192) >> 42) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 192) >> 43) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 192) >> 44) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_BYTE *)(*a1 + 250) & 0xF;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 192) >> 46) & 0x1F;
  llvm::MD5::update();
  LODWORD(__dst) = *(_QWORD *)(*a1 + 200);
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 204) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 200) >> 33) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 200) >> 34) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 200) >> 35) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_QWORD *)(*a1 + 208);
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 212) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int8 *)(*a1 + 250) >> 4) & 3;
  llvm::MD5::update();
  LODWORD(__dst) = (*(unsigned __int8 *)(*a1 + 250) >> 6) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 208) >> 36) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 208) >> 37) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 208) >> 38) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 216);
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 220);
  llvm::MD5::update();
  LODWORD(__dst) = *(unsigned __int8 *)(*a1 + 250) >> 7;
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 224);
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 228) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_QWORD *)(*a1 + 232);
  llvm::MD5::update();
  LODWORD(__dst) = *(_DWORD *)(*a1 + 236) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 232) >> 33) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 232) >> 35) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 232) >> 36) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 232) >> 37) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 232) >> 38) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 232) >> 39) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 232) >> 40) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 232) >> 41) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 232) >> 42) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 232) >> 43) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 232) >> 44) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 232) >> 45) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 232) >> 46) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 232) >> 47) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_WORD *)(*a1 + 238) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 232) >> 49) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 232) >> 50) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 232) >> 51) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 232) >> 52) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 232) >> 53) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 232) >> 54) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 232) >> 55) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = *(_BYTE *)(*a1 + 239) & 1;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 232) & 0x200000000000000) != 0;
  llvm::MD5::update();
  LODWORD(__dst) = (*(_QWORD *)(*a1 + 232) & 0x400000000000000) != 0;
  llvm::MD5::update();
  v6 = *(_QWORD *)(*a1 + 520);
  v7 = *(_QWORD *)(*a1 + 528);
  __dst = 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3);
  llvm::MD5::update();
  sub_22F2A9CC8((uint64_t)v99, v6, v7);
  v8 = *a1;
  v9 = *a1 + 400;
  LODWORD(__dst) = *(_DWORD *)v9;
  llvm::MD5::update();
  v10 = *(_DWORD *)(v8 + 416);
  v11 = *(_QWORD *)(v9 + 4);
  LODWORD(v96) = *(_DWORD *)(v8 + 412) & 0x7FFFFFFF;
  LODWORD(v98) = v10 & 0x7FFFFFFF;
  LODWORD(__dst) = v11;
  llvm::MD5::update();
  sub_22E72584C((uint64_t)v99);
  v12 = *(_QWORD *)(*a1 + 544);
  v13 = *(_QWORD *)(*a1 + 552);
  __dst = 0xAAAAAAAAAAAAAAABLL * ((v13 - v12) >> 3);
  llvm::MD5::update();
  sub_22F2A9CC8((uint64_t)v99, v12, v13);
  sub_22F2A8DE0((uint64_t)v99);
  v14 = a1[2];
  v15 = *(_QWORD *)(v14 + 176);
  v16 = *(_QWORD *)(v14 + 184);
  __dst = 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 3);
  llvm::MD5::update();
  sub_22F2A9CC8((uint64_t)v99, v15, v16);
  v17 = a1[7];
  LOBYTE(__dst) = *(_BYTE *)(v17 + 72);
  llvm::MD5::update();
  LOBYTE(__dst) = *(_BYTE *)(v17 + 73);
  llvm::MD5::update();
  v18 = a1[5];
  v19 = *(_BYTE *)(v18 + 216);
  if ((v19 & 8) == 0)
  {
    v20 = (unint64_t **)a1[7];
    v22 = *v20;
    v21 = v20[1];
    if (*v20 != v21)
    {
      v23 = a3;
      do
      {
        if (!*(_DWORD *)(v18 + 512))
          goto LABEL_25;
        v24 = *((_BYTE *)v22 + 23);
        v25 = v24 < 0;
        if (v24 >= 0)
          v26 = (unint64_t)v22;
        else
          v26 = *v22;
        __dst = v26;
        v27 = v24 & 0x7F;
        if (v25)
          v27 = v22[1];
        *(_QWORD *)&v102 = v27;
        LOBYTE(v96) = 61;
        v28 = llvm::StringRef::find();
        if (v28 == -1)
        {
          v29 = (const void *)__dst;
          v30 = v102;
        }
        else
        {
          v29 = (const void *)__dst;
          if ((unint64_t)v102 >= v28)
            v30 = v28;
          else
            v30 = v102;
        }
        HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue();
        *(_QWORD *)&v96 = operator new[]();
        *((_QWORD *)&v96 + 1) = __PAIR64__(HashValue, v30);
        memcpy((void *)v96, v29, v30);
        v98 = 0;
        v32 = sub_22F278508(v18 + 240, (uint64_t)&v96, &v98);
        if ((_QWORD)v96 != -8192 && (_QWORD)v96 != -4096 && (_QWORD)v96)
          MEMORY[0x2348A0E84]();
        if ((v32 & 1) == 0)
LABEL_25:
          sub_22F2A8E74((uint64_t)v99);
        v22 += 4;
      }
      while (v22 != v21);
      v19 = *(_BYTE *)(a1[5] + 216);
      a3 = v23;
    }
  }
  if ((v19 & 4) == 0)
  {
    v33 = *(_BYTE *)(v18 + 23);
    v25 = v33 < 0;
    v34 = v33 & 0x7F;
    if (v25)
      v35 = *(_QWORD *)(v18 + 8);
    else
      v35 = v34;
    __dst = v35;
    llvm::MD5::update();
    llvm::MD5::update();
  }
  v36 = *(unsigned __int16 *)(v18 + 848);
  LODWORD(__dst) = (v36 >> 9) & 1;
  LODWORD(v98) = (v36 >> 1) & 1;
  LODWORD(v96) = v36 & 1;
  sub_22F2A8F00((uint64_t)v99);
  if ((*(_BYTE *)(a1[5] + 216) & 4) == 0)
  {
    v37 = *(_BYTE *)(v18 + 95);
    if (v37 >= 0)
      v38 = v37 & 0x7F;
    else
      v38 = *(_QWORD *)(v18 + 80);
    __dst = v38;
    llvm::MD5::update();
    llvm::MD5::update();
  }
  if ((*(_WORD *)(v18 + 848) & 0x1000) != 0)
  {
    sub_22F2A9EAC((uint64_t)v99, *(_QWORD *)(v18 + 48), *(_QWORD *)(v18 + 56));
    sub_22F2A9FB0((uint64_t)v99, *(_QWORD *)(v18 + 24), *(_QWORD *)(v18 + 32));
    v94 = a1[4];
    LODWORD(__dst) = *(_DWORD *)(v94 + 4) & 1;
    llvm::MD5::update();
    LODWORD(__dst) = (*(_DWORD *)(v94 + 4) >> 1) & 1;
    llvm::MD5::update();
    LODWORD(__dst) = (*(_DWORD *)(v94 + 4) >> 2) & 1;
    llvm::MD5::update();
    LODWORD(__dst) = (*(_DWORD *)(v94 + 4) >> 3) & 1;
    llvm::MD5::update();
    LODWORD(__dst) = (*(_DWORD *)(v94 + 4) >> 4) & 1;
    llvm::MD5::update();
    LODWORD(__dst) = (*(_DWORD *)(v94 + 4) >> 5) & 1;
    llvm::MD5::update();
    LODWORD(__dst) = (*(_DWORD *)(v94 + 4) >> 6) & 1;
    llvm::MD5::update();
    LODWORD(__dst) = (*(_DWORD *)(v94 + 4) >> 7) & 1;
    llvm::MD5::update();
    LODWORD(__dst) = (*(_DWORD *)(v94 + 4) >> 8) & 1;
    llvm::MD5::update();
    LODWORD(__dst) = (*(_DWORD *)(v94 + 4) >> 9) & 1;
    llvm::MD5::update();
    LODWORD(__dst) = (*(_DWORD *)(v94 + 4) >> 10) & 1;
    llvm::MD5::update();
    LODWORD(__dst) = (*(_DWORD *)(v94 + 4) >> 11) & 1;
    llvm::MD5::update();
    LODWORD(__dst) = (*(_DWORD *)(v94 + 4) >> 12) & 1;
    llvm::MD5::update();
    LODWORD(__dst) = (*(_DWORD *)(v94 + 4) >> 13) & 1;
    llvm::MD5::update();
    LODWORD(__dst) = (*(_DWORD *)(v94 + 4) >> 14) & 1;
    llvm::MD5::update();
    LODWORD(__dst) = (*(_DWORD *)(v94 + 4) >> 15) & 1;
    llvm::MD5::update();
    LODWORD(__dst) = *(_WORD *)(v94 + 6) & 3;
    llvm::MD5::update();
    LODWORD(__dst) = *(_BYTE *)(v94 + 40) & 3;
    llvm::MD5::update();
    LODWORD(__dst) = (*(_DWORD *)(v94 + 4) >> 18) & 1;
    llvm::MD5::update();
    LODWORD(__dst) = (*(_DWORD *)(v94 + 4) >> 19) & 1;
    llvm::MD5::update();
    LODWORD(__dst) = (*(unsigned __int8 *)(v94 + 40) >> 2) & 1;
    llvm::MD5::update();
    LODWORD(__dst) = (*(_DWORD *)(v94 + 4) >> 20) & 1;
    llvm::MD5::update();
    LODWORD(__dst) = (*(unsigned __int8 *)(v94 + 40) >> 3) & 0xF;
    llvm::MD5::update();
    LODWORD(__dst) = (*(_DWORD *)(v94 + 4) >> 21) & 1;
    llvm::MD5::update();
    LODWORD(__dst) = (*(_DWORD *)(v94 + 4) >> 22) & 1;
    llvm::MD5::update();
    LODWORD(__dst) = *(_DWORD *)(v94 + 8);
    llvm::MD5::update();
    LODWORD(__dst) = *(_DWORD *)(v94 + 12);
    llvm::MD5::update();
    LODWORD(__dst) = *(_DWORD *)(v94 + 16);
    llvm::MD5::update();
    LODWORD(__dst) = *(_DWORD *)(v94 + 20);
    llvm::MD5::update();
    LODWORD(__dst) = *(_DWORD *)(v94 + 24);
    llvm::MD5::update();
    LODWORD(__dst) = *(_DWORD *)(v94 + 28);
    llvm::MD5::update();
    LODWORD(__dst) = *(_DWORD *)(v94 + 32);
    llvm::MD5::update();
    LODWORD(__dst) = *(_DWORD *)(v94 + 36);
    llvm::MD5::update();
  }
  v39 = v18 + 120;
  v40 = *(_BYTE *)(v39 + 23);
  v41 = v40;
  v42 = v40 & 0x7F;
  if (v41 >= 0)
    v43 = v42;
  else
    v43 = *(_QWORD *)(v39 + 8);
  __dst = v43;
  llvm::MD5::update();
  llvm::MD5::update();
  v44 = (uint64_t *)a1[351];
  v45 = (uint64_t *)a1[352];
  while (v44 != v45)
  {
    v46 = *v44;
    v44 += 2;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v46 + 48))(v46, v99);
  }
  v47 = a2;
  if (a1[11] & 0x7FFFFFFFFFFFFFFFLL | a1[12] & 0x7FFFFFFF7FFFFFFFLL)
  {
    LODWORD(__dst) = a1[11];
    llvm::MD5::update();
    v48 = a1[11];
    if (v48 < 0)
    {
      LODWORD(__dst) = HIDWORD(v48) & 0x7FFFFFFF;
      llvm::MD5::update();
    }
    v49 = a1[12];
    if ((v49 & 0x80000000) != 0)
    {
      LODWORD(__dst) = v49 & 0x7FFFFFFF;
      llvm::MD5::update();
      v49 = a1[12];
    }
    if (v49 < 0)
    {
      LODWORD(__dst) = HIDWORD(v49) & 0x7FFFFFFF;
      llvm::MD5::update();
    }
  }
  if ((a1[45] & 8) != 0)
  {
    v50 = (uint64_t *)a1[88];
    v51 = a1 + 89;
    if (v50 == a1 + 89)
    {
      __dst = 0;
      llvm::MD5::update();
    }
    else
    {
      v52 = 0;
      v53 = (uint64_t *)a1[88];
      do
      {
        v54 = (uint64_t *)v53[1];
        if (v54)
        {
          do
          {
            v55 = v54;
            v54 = (uint64_t *)*v54;
          }
          while (v54);
        }
        else
        {
          do
          {
            v55 = (uint64_t *)v53[2];
            v73 = *v55 == (_QWORD)v53;
            v53 = v55;
          }
          while (!v73);
        }
        ++v52;
        v53 = v55;
      }
      while (v55 != v51);
      __dst = (unint64_t)v52;
      llvm::MD5::update();
      do
      {
        sub_22F2AA0E0((uint64_t)v99);
        v56 = (uint64_t *)v50[1];
        if (v56)
        {
          do
          {
            v57 = v56;
            v56 = (uint64_t *)*v56;
          }
          while (v56);
        }
        else
        {
          do
          {
            v57 = (uint64_t *)v50[2];
            v73 = *v57 == (_QWORD)v50;
            v50 = v57;
          }
          while (!v73);
        }
        v50 = v57;
      }
      while (v57 != v51);
    }
  }
  v58 = *a1;
  v96 = *(_OWORD *)(*a1 + 256);
  *(_QWORD *)&v96 = v96 & 0xF4F8181020007FFFLL;
  if (v96 != 0)
  {
    sub_22F2AA198((uint64_t)v99, (uint64_t)&v96, (uint64_t)&v97);
    v58 = *a1;
  }
  if ((*(_QWORD *)(v58 + 20) & 0x400000000000000) != 0)
  {
    v59 = *(_QWORD *)(a2 + 128);
    v60 = *(_BYTE *)(v59 + 24);
    LODWORD(v59) = *(_DWORD *)(v59 + 28);
    v61 = (int)v59 <= 3;
    v62 = (_DWORD)v59 == 3 && (v60 & 4) != 0;
    if (!v61)
      v62 = 1;
    LOBYTE(__dst) = v62;
    llvm::MD5::update();
    v63 = *(_QWORD *)(a2 + 128);
    v64 = *(_DWORD *)(v63 + 8);
    v65 = *(unsigned int **)v63;
    v66 = *(unsigned int *)(v63 + 16);
    v67 = &v65[2 * v66];
    if (v64)
    {
      if ((_DWORD)v66)
      {
        v68 = 8 * v66;
        v69 = v65;
        while (*v69 >= 0xFFFFFFFE)
        {
          v69 += 2;
          v68 -= 8;
          if (!v68)
            goto LABEL_84;
        }
      }
      else
      {
        v69 = v65;
      }
    }
    else
    {
LABEL_84:
      v69 = &v65[2 * v66];
    }
    v70 = &v65[2 * v66];
    if (v69 != v70)
    {
      v71 = v60 & 4;
      while (1)
      {
        v72 = *v69;
        v73 = (int)sub_22F1CF5F4(*(_QWORD *)(v47 + 32), *v69, 0, v47) <= 3 && v71 == 0;
        if (v73)
          goto LABEL_93;
        v76 = sub_22F41A9FC(v72);
        if (v76)
          break;
        v82 = 0;
        v83 = 0;
        __dst = 0;
        v102 = 0uLL;
LABEL_111:
        v86 = v83;
        v87 = v83 & 0x7F;
        if (v86 >= 0)
          v88 = v87;
        else
          v88 = v82;
        v98 = v88;
        llvm::MD5::update();
        llvm::MD5::update();
        if (SHIBYTE(v102) < 0)
          operator delete((void *)__dst);
        v47 = a2;
LABEL_93:
        v74 = v69 + 2;
        while (v74 != v67)
        {
          v75 = *v74;
          v74 += 2;
          if (v75 <= 0xFFFFFFFD)
          {
            v69 = v74 - 2;
            goto LABEL_98;
          }
        }
        v69 = v67;
LABEL_98:
        if (v69 == v70)
          goto LABEL_117;
      }
      v78 = v77;
      if (v77 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_128;
      v79 = v76;
      v80 = a3;
      if (v77 >= 0x17)
      {
        v84 = (v77 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v77 | 7) != 0x17)
          v84 = v77 | 7;
        v85 = v84 + 1;
        p_dst = (unint64_t *)operator new(v84 + 1);
        *(_QWORD *)&v102 = v78;
        *((_QWORD *)&v102 + 1) = v85 | 0x8000000000000000;
        __dst = (unint64_t)p_dst;
      }
      else
      {
        HIBYTE(v102) = v77;
        p_dst = &__dst;
        if (!v77)
          goto LABEL_110;
      }
      memmove(p_dst, v79, v78);
LABEL_110:
      *((_BYTE *)p_dst + v78) = 0;
      v83 = HIBYTE(v102);
      v82 = v102;
      a3 = v80;
      goto LABEL_111;
    }
  }
LABEL_117:
  LODWORD(__dst) = (*((_DWORD *)a1 + 572) >> 29) & 1;
  llvm::MD5::update();
  llvm::MD5::final();
  __dst = (unint64_t)v103;
  v102 = xmmword_22F455490;
  llvm::APInt::toString();
  v89 = v102;
  if ((unint64_t)v102 > 0x7FFFFFFFFFFFFFF7)
LABEL_128:
    abort();
  v90 = (const void *)__dst;
  if ((unint64_t)v102 >= 0x17)
  {
    v91 = (v102 & 0xFFFFFFFFFFFFFFF8) + 8;
    if (((unint64_t)v102 | 7) != 0x17)
      v91 = v102 | 7;
    v92 = v91 + 1;
    v93 = operator new(v91 + 1);
    a3[1] = v89;
    a3[2] = v92 | 0x8000000000000000;
    *a3 = v93;
    a3 = v93;
    goto LABEL_124;
  }
  *((_BYTE *)a3 + 23) = v102;
  if (v89)
LABEL_124:
    memmove(a3, v90, v89);
  *((_BYTE *)a3 + v89) = 0;
  if ((_QWORD *)__dst != v103)
    free((void *)__dst);
}

void sub_22E715750(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, __int128 *), uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t *v13;
  unsigned __int8 *v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t *v20;
  unsigned __int8 *v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t *v27;
  unsigned __int8 *v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  size_t *v34;
  unsigned __int8 *v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t *v41;
  unsigned __int8 *v42;
  void *v43;
  char v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  size_t *v57;
  unsigned __int8 *v58;
  void *v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  size_t *v67;
  unsigned __int8 *p_s2;
  void *v69;
  int v70;
  unsigned int v71;
  int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  void *v85;
  size_t __n[2];
  unint64_t v87;
  void *v88[2];
  unint64_t v89;
  void *__p[2];
  __int128 v91;
  void *v92[2];
  unint64_t v93;
  size_t __dst[2];
  unint64_t v95;
  __int128 __s2;
  __int128 v97;
  __int128 v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 16);
  LOWORD(v98) = 260;
  *(_QWORD *)&__s2 = v8;
  MEMORY[0x23489F1BC](&v85, &__s2);
  if (*(char *)(a1 + 175) < 0)
  {
    sub_22E3BB2B4(__dst, *(void **)(a1 + 152), *(_QWORD *)(a1 + 160));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(a1 + 152);
    v95 = *(_QWORD *)(a1 + 168);
  }
  v87 = v95;
  *(_OWORD *)__n = *(_OWORD *)__dst;
  v95 = 0;
  __dst[0] = 0;
  __dst[1] = 0;
  __s2 = 0uLL;
  *(_QWORD *)&v97 = 0;
  v9 = HIBYTE(v87);
  v10 = __n[1];
  v11 = HIBYTE(v87) & 0x7F;
  if ((v87 & 0x8000000000000000) == 0)
    v12 = HIBYTE(v87) & 0x7F;
  else
    v12 = __n[1];
  if (!v12)
  {
    if ((v87 & 0x8000000000000000) != 0)
    {
      v15 = (void *)__n[0];
      if (!memcmp((const void *)__n[0], &__s2, __n[1]))
      {
LABEL_24:
        operator delete(v15);
LABEL_25:
        if (SHIBYTE(v95) < 0)
          operator delete((void *)__dst[0]);
        if (*(char *)(a1 + 199) < 0)
        {
          sub_22E3BB2B4(v92, *(void **)(a1 + 176), *(_QWORD *)(a1 + 184));
        }
        else
        {
          *(_OWORD *)v92 = *(_OWORD *)(a1 + 176);
          v93 = *(_QWORD *)(a1 + 192);
        }
        v87 = v93;
        *(_OWORD *)__n = *(_OWORD *)v92;
        v92[1] = 0;
        v93 = 0;
        v92[0] = 0;
        __s2 = 0uLL;
        *(_QWORD *)&v97 = 0;
        v16 = HIBYTE(v87);
        v17 = __n[1];
        v18 = HIBYTE(v87) & 0x7F;
        if ((v87 & 0x8000000000000000) == 0)
          v19 = HIBYTE(v87) & 0x7F;
        else
          v19 = __n[1];
        if (!v19)
        {
          if ((v87 & 0x8000000000000000) != 0)
          {
            v22 = (void *)__n[0];
            if (!memcmp((const void *)__n[0], &__s2, __n[1]))
            {
LABEL_50:
              operator delete(v22);
LABEL_51:
              if (SHIBYTE(v93) < 0)
                operator delete(v92[0]);
              if (*(char *)(a1 + 2239) < 0)
              {
                sub_22E3BB2B4(__dst, *(void **)(a1 + 2216), *(_QWORD *)(a1 + 2224));
              }
              else
              {
                *(_OWORD *)__dst = *(_OWORD *)(a1 + 2216);
                v95 = *(_QWORD *)(a1 + 2232);
              }
              v87 = v95;
              *(_OWORD *)__n = *(_OWORD *)__dst;
              v95 = 0;
              __dst[0] = 0;
              __dst[1] = 0;
              __s2 = 0uLL;
              *(_QWORD *)&v97 = 0;
              v23 = HIBYTE(v87);
              v24 = __n[1];
              v25 = HIBYTE(v87) & 0x7F;
              if ((v87 & 0x8000000000000000) == 0)
                v26 = HIBYTE(v87) & 0x7F;
              else
                v26 = __n[1];
              if (!v26)
              {
                if ((v87 & 0x8000000000000000) != 0)
                {
                  v29 = (void *)__n[0];
                  if (!memcmp((const void *)__n[0], &__s2, __n[1]))
                  {
LABEL_76:
                    operator delete(v29);
LABEL_77:
                    if (SHIBYTE(v95) < 0)
                      operator delete((void *)__dst[0]);
                    if (*(char *)(a1 + 2263) < 0)
                    {
                      sub_22E3BB2B4(v92, *(void **)(a1 + 2240), *(_QWORD *)(a1 + 2248));
                    }
                    else
                    {
                      *(_OWORD *)v92 = *(_OWORD *)(a1 + 2240);
                      v93 = *(_QWORD *)(a1 + 2256);
                    }
                    v87 = v93;
                    *(_OWORD *)__n = *(_OWORD *)v92;
                    v92[1] = 0;
                    v93 = 0;
                    v92[0] = 0;
                    __s2 = 0uLL;
                    *(_QWORD *)&v97 = 0;
                    v30 = HIBYTE(v87);
                    v31 = __n[1];
                    v32 = HIBYTE(v87) & 0x7F;
                    if ((v87 & 0x8000000000000000) == 0)
                      v33 = HIBYTE(v87) & 0x7F;
                    else
                      v33 = __n[1];
                    if (!v33)
                    {
                      if ((v87 & 0x8000000000000000) != 0)
                      {
                        v36 = (void *)__n[0];
                        if (!memcmp((const void *)__n[0], &__s2, __n[1]))
                        {
LABEL_102:
                          operator delete(v36);
LABEL_103:
                          if (SHIBYTE(v93) < 0)
                            operator delete(v92[0]);
                          if (*(char *)(a1 + 2287) < 0)
                          {
                            sub_22E3BB2B4(v88, *(void **)(a1 + 2264), *(_QWORD *)(a1 + 2272));
                          }
                          else
                          {
                            *(_OWORD *)v88 = *(_OWORD *)(a1 + 2264);
                            v89 = *(_QWORD *)(a1 + 2280);
                          }
                          v87 = v89;
                          *(_OWORD *)__n = *(_OWORD *)v88;
                          v88[1] = 0;
                          v89 = 0;
                          v88[0] = 0;
                          __s2 = 0uLL;
                          *(_QWORD *)&v97 = 0;
                          v37 = HIBYTE(v87);
                          v38 = __n[1];
                          v39 = HIBYTE(v87) & 0x7F;
                          if ((v87 & 0x8000000000000000) == 0)
                            v40 = HIBYTE(v87) & 0x7F;
                          else
                            v40 = __n[1];
                          if (!v40)
                          {
                            if ((v87 & 0x8000000000000000) != 0)
                            {
                              v43 = (void *)__n[0];
                              if (!memcmp((const void *)__n[0], &__s2, __n[1]))
                              {
LABEL_128:
                                operator delete(v43);
LABEL_129:
                                if (SHIBYTE(v89) < 0)
                                  operator delete(v88[0]);
                                v44 = *(_BYTE *)(a1 + 80);
                                if ((v44 & 1) != 0)
                                {
                                  v45 = *(_DWORD *)(a2 + 8);
                                  if (v45 >= *(_DWORD *)(a2 + 12))
                                  {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                                    v45 = *(_DWORD *)(a2 + 8);
                                  }
                                  *(_QWORD *)(*(_QWORD *)a2 + 8 * v45) = "-no-ns-alloc-error";
                                  ++*(_DWORD *)(a2 + 8);
                                  v44 = *(_BYTE *)(a1 + 80);
                                }
                                if ((v44 & 2) != 0)
                                {
                                  v46 = *(_DWORD *)(a2 + 8);
                                  if (v46 >= *(_DWORD *)(a2 + 12))
                                  {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                                    v46 = *(_DWORD *)(a2 + 8);
                                  }
                                  *(_QWORD *)(*(_QWORD *)a2 + 8 * v46) = "-no-finalize-removal";
                                  ++*(_DWORD *)(a2 + 8);
                                }
                                v47 = *(_QWORD *)(a1 + 72);
                                v48 = *(_DWORD *)(v47 + 204);
                                if ((v48 & 0x10000) != 0)
                                {
                                  v49 = *(_DWORD *)(a2 + 8);
                                  if (v49 >= *(_DWORD *)(a2 + 12))
                                  {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                                    v49 = *(_DWORD *)(a2 + 8);
                                  }
                                  *(_QWORD *)(*(_QWORD *)a2 + 8 * v49) = "-unoptimized-cfg";
                                  ++*(_DWORD *)(a2 + 8);
                                  v48 = *(_DWORD *)(v47 + 204);
                                  if ((v48 & 0x400) == 0)
                                  {
LABEL_141:
                                    if ((v48 & 0x1000) == 0)
                                      goto LABEL_142;
                                    goto LABEL_150;
                                  }
                                }
                                else if ((v48 & 0x400) == 0)
                                {
                                  goto LABEL_141;
                                }
                                v50 = *(_DWORD *)(a2 + 8);
                                if (v50 >= *(_DWORD *)(a2 + 12))
                                {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                  v50 = *(_DWORD *)(a2 + 8);
                                }
                                *(_QWORD *)(*(_QWORD *)a2 + 8 * v50) = "-analyzer-opt-analyze-headers";
                                ++*(_DWORD *)(a2 + 8);
                                v48 = *(_DWORD *)(v47 + 204);
                                if ((v48 & 0x1000) == 0)
                                {
LABEL_142:
                                  if ((v48 & 0x800) == 0)
                                    goto LABEL_156;
                                  goto LABEL_153;
                                }
LABEL_150:
                                v51 = *(_DWORD *)(a2 + 8);
                                if (v51 >= *(_DWORD *)(a2 + 12))
                                {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                  v51 = *(_DWORD *)(a2 + 8);
                                }
                                *(_QWORD *)(*(_QWORD *)a2 + 8 * v51) = "-analyzer-opt-analyze-nested-blocks";
                                ++*(_DWORD *)(a2 + 8);
                                if ((*(_DWORD *)(v47 + 204) & 0x800) == 0)
                                {
LABEL_156:
                                  if (*(char *)(v47 + 151) < 0)
                                  {
                                    sub_22E3BB2B4(__dst, *(void **)(v47 + 128), *(_QWORD *)(v47 + 136));
                                  }
                                  else
                                  {
                                    *(_OWORD *)__dst = *(_OWORD *)(v47 + 128);
                                    v95 = *(_QWORD *)(v47 + 144);
                                  }
                                  v87 = v95;
                                  *(_OWORD *)__n = *(_OWORD *)__dst;
                                  v95 = 0;
                                  __dst[0] = 0;
                                  __dst[1] = 0;
                                  __s2 = 0uLL;
                                  *(_QWORD *)&v97 = 0;
                                  v53 = HIBYTE(v87);
                                  v54 = __n[1];
                                  v55 = HIBYTE(v87) & 0x7F;
                                  if ((v87 & 0x8000000000000000) == 0)
                                    v56 = HIBYTE(v87) & 0x7F;
                                  else
                                    v56 = __n[1];
                                  if (!v56)
                                  {
                                    if ((v87 & 0x8000000000000000) != 0)
                                    {
                                      v59 = (void *)__n[0];
                                      if (!memcmp((const void *)__n[0], &__s2, __n[1]))
                                      {
LABEL_179:
                                        operator delete(v59);
LABEL_180:
                                        if (SHIBYTE(v95) < 0)
                                          operator delete((void *)__dst[0]);
                                        v60 = *(_DWORD *)(v47 + 204);
                                        if ((v60 & 0x4000) != 0)
                                        {
                                          v61 = *(_DWORD *)(a2 + 8);
                                          if (v61 >= *(_DWORD *)(a2 + 12))
                                          {
                                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                                            v61 = *(_DWORD *)(a2 + 8);
                                          }
                                          *(_QWORD *)(*(_QWORD *)a2 + 8 * v61) = "-trim-egraph";
                                          ++*(_DWORD *)(a2 + 8);
                                          v60 = *(_DWORD *)(v47 + 204);
                                        }
                                        if ((v60 & 0x8000) != 0)
                                        {
                                          v62 = *(_DWORD *)(a2 + 8);
                                          if (v62 >= *(_DWORD *)(a2 + 12))
                                          {
                                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                                            v62 = *(_DWORD *)(a2 + 8);
                                          }
                                          *(_QWORD *)(*(_QWORD *)a2 + 8 * v62) = "-analyzer-viz-egraph-graphviz";
                                          ++*(_DWORD *)(a2 + 8);
                                        }
                                        if (*(char *)(v47 + 175) < 0)
                                        {
                                          sub_22E3BB2B4(v92, *(void **)(v47 + 152), *(_QWORD *)(v47 + 160));
                                        }
                                        else
                                        {
                                          *(_OWORD *)v92 = *(_OWORD *)(v47 + 152);
                                          v93 = *(_QWORD *)(v47 + 168);
                                        }
                                        v87 = v93;
                                        *(_OWORD *)__n = *(_OWORD *)v92;
                                        v92[1] = 0;
                                        v93 = 0;
                                        v92[0] = 0;
                                        __s2 = 0uLL;
                                        *(_QWORD *)&v97 = 0;
                                        v63 = HIBYTE(v87);
                                        v64 = __n[1];
                                        v65 = HIBYTE(v87) & 0x7F;
                                        if ((v87 & 0x8000000000000000) == 0)
                                          v66 = HIBYTE(v87) & 0x7F;
                                        else
                                          v66 = __n[1];
                                        if (!v66)
                                        {
                                          if ((v87 & 0x8000000000000000) != 0)
                                          {
                                            v69 = (void *)__n[0];
                                            if (!memcmp((const void *)__n[0], &__s2, __n[1]))
                                            {
LABEL_213:
                                              operator delete(v69);
LABEL_214:
                                              if (SHIBYTE(v93) < 0)
                                                operator delete(v92[0]);
                                              v70 = *(_DWORD *)(v47 + 208);
                                              if (v70 != 5)
                                              {
                                                LOWORD(v98) = 264;
                                                LODWORD(__s2) = v70;
                                                sub_22E721364(a2, "-analyzer-inline-max-stack-depth", a3, a4, 6, (uint64_t *)&__s2);
                                              }
                                              if ((*(_BYTE *)(v47 + 206) & 4) != 0)
                                              {
                                                v71 = *(_DWORD *)(a2 + 8);
                                                if (v71 >= *(_DWORD *)(a2 + 12))
                                                {
                                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                  v71 = *(_DWORD *)(a2 + 8);
                                                }
                                                *(_QWORD *)(*(_QWORD *)a2 + 8 * v71) = "-analyzer-disable-retry-exhausted";
                                                ++*(_DWORD *)(a2 + 8);
                                              }
                                              v72 = *(_DWORD *)(v47 + 200);
                                              if (v72 != 4)
                                              {
                                                LOWORD(v98) = 264;
                                                LODWORD(__s2) = v72;
                                                sub_22E721364(a2, "-analyzer-max-loop", a3, a4, 6, (uint64_t *)&__s2);
                                              }
                                              v73 = *(_DWORD *)(v47 + 204);
                                              if ((v73 & 0x20000) != 0)
                                              {
                                                v74 = *(_DWORD *)(a2 + 8);
                                                if (v74 >= *(_DWORD *)(a2 + 12))
                                                {
                                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                  v74 = *(_DWORD *)(a2 + 8);
                                                }
                                                *(_QWORD *)(*(_QWORD *)a2 + 8 * v74) = "-analyzer-stats";
                                                ++*(_DWORD *)(a2 + 8);
                                                v73 = *(_DWORD *)(v47 + 204);
                                                if ((v73 & 1) == 0)
                                                {
LABEL_226:
                                                  if ((v73 & 2) == 0)
                                                    goto LABEL_227;
                                                  goto LABEL_243;
                                                }
                                              }
                                              else if ((v73 & 1) == 0)
                                              {
                                                goto LABEL_226;
                                              }
                                              v75 = *(_DWORD *)(a2 + 8);
                                              if (v75 >= *(_DWORD *)(a2 + 12))
                                              {
                                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                v75 = *(_DWORD *)(a2 + 8);
                                              }
                                              *(_QWORD *)(*(_QWORD *)a2 + 8 * v75) = "-analyzer-disable-all-checks";
                                              ++*(_DWORD *)(a2 + 8);
                                              v73 = *(_DWORD *)(v47 + 204);
                                              if ((v73 & 2) == 0)
                                              {
LABEL_227:
                                                if ((v73 & 4) == 0)
                                                  goto LABEL_228;
                                                goto LABEL_246;
                                              }
LABEL_243:
                                              v76 = *(_DWORD *)(a2 + 8);
                                              if (v76 >= *(_DWORD *)(a2 + 12))
                                              {
                                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                v76 = *(_DWORD *)(a2 + 8);
                                              }
                                              *(_QWORD *)(*(_QWORD *)a2 + 8 * v76) = "-analyzer-checker-help";
                                              ++*(_DWORD *)(a2 + 8);
                                              v73 = *(_DWORD *)(v47 + 204);
                                              if ((v73 & 4) == 0)
                                              {
LABEL_228:
                                                if ((v73 & 8) == 0)
                                                  goto LABEL_229;
                                                goto LABEL_249;
                                              }
LABEL_246:
                                              v77 = *(_DWORD *)(a2 + 8);
                                              if (v77 >= *(_DWORD *)(a2 + 12))
                                              {
                                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                v77 = *(_DWORD *)(a2 + 8);
                                              }
                                              *(_QWORD *)(*(_QWORD *)a2 + 8 * v77) = "-analyzer-checker-help-alpha";
                                              ++*(_DWORD *)(a2 + 8);
                                              v73 = *(_DWORD *)(v47 + 204);
                                              if ((v73 & 8) == 0)
                                              {
LABEL_229:
                                                if ((v73 & 0x100) == 0)
                                                  goto LABEL_230;
                                                goto LABEL_252;
                                              }
LABEL_249:
                                              v78 = *(_DWORD *)(a2 + 8);
                                              if (v78 >= *(_DWORD *)(a2 + 12))
                                              {
                                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                v78 = *(_DWORD *)(a2 + 8);
                                              }
                                              *(_QWORD *)(*(_QWORD *)a2 + 8 * v78) = "-analyzer-checker-help-developer";
                                              ++*(_DWORD *)(a2 + 8);
                                              v73 = *(_DWORD *)(v47 + 204);
                                              if ((v73 & 0x100) == 0)
                                              {
LABEL_230:
                                                if ((v73 & 0x80) == 0)
                                                  goto LABEL_231;
                                                goto LABEL_255;
                                              }
LABEL_252:
                                              v79 = *(_DWORD *)(a2 + 8);
                                              if (v79 >= *(_DWORD *)(a2 + 12))
                                              {
                                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                v79 = *(_DWORD *)(a2 + 8);
                                              }
                                              *(_QWORD *)(*(_QWORD *)a2 + 8 * v79) = "-analyzer-config-help";
                                              ++*(_DWORD *)(a2 + 8);
                                              v73 = *(_DWORD *)(v47 + 204);
                                              if ((v73 & 0x80) == 0)
                                              {
LABEL_231:
                                                if ((v73 & 0x10) == 0)
                                                  goto LABEL_232;
                                                goto LABEL_258;
                                              }
LABEL_255:
                                              v80 = *(_DWORD *)(a2 + 8);
                                              if (v80 >= *(_DWORD *)(a2 + 12))
                                              {
                                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                v80 = *(_DWORD *)(a2 + 8);
                                              }
                                              *(_QWORD *)(*(_QWORD *)a2 + 8 * v80) = "-analyzer-list-enabled-checkers";
                                              ++*(_DWORD *)(a2 + 8);
                                              v73 = *(_DWORD *)(v47 + 204);
                                              if ((v73 & 0x10) == 0)
                                              {
LABEL_232:
                                                if ((v73 & 0x20) == 0)
                                                  goto LABEL_233;
                                                goto LABEL_261;
                                              }
LABEL_258:
                                              v81 = *(_DWORD *)(a2 + 8);
                                              if (v81 >= *(_DWORD *)(a2 + 12))
                                              {
                                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                v81 = *(_DWORD *)(a2 + 8);
                                              }
                                              *(_QWORD *)(*(_QWORD *)a2 + 8 * v81) = "-analyzer-checker-option-help";
                                              ++*(_DWORD *)(a2 + 8);
                                              v73 = *(_DWORD *)(v47 + 204);
                                              if ((v73 & 0x20) == 0)
                                              {
LABEL_233:
                                                if ((v73 & 0x40) == 0)
                                                  goto LABEL_234;
                                                goto LABEL_264;
                                              }
LABEL_261:
                                              v82 = *(_DWORD *)(a2 + 8);
                                              if (v82 >= *(_DWORD *)(a2 + 12))
                                              {
                                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                v82 = *(_DWORD *)(a2 + 8);
                                              }
                                              *(_QWORD *)(*(_QWORD *)a2 + 8 * v82) = "-analyzer-checker-option-help-alpha";
                                              ++*(_DWORD *)(a2 + 8);
                                              v73 = *(_DWORD *)(v47 + 204);
                                              if ((v73 & 0x40) == 0)
                                              {
LABEL_234:
                                                if ((v73 & 0x200) != 0)
                                                  goto LABEL_235;
                                                goto LABEL_267;
                                              }
LABEL_264:
                                              v83 = *(_DWORD *)(a2 + 8);
                                              if (v83 >= *(_DWORD *)(a2 + 12))
                                              {
                                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                v83 = *(_DWORD *)(a2 + 8);
                                              }
                                              *(_QWORD *)(*(_QWORD *)a2 + 8 * v83) = "-analyzer-checker-option-help-developer";
                                              ++*(_DWORD *)(a2 + 8);
                                              v73 = *(_DWORD *)(v47 + 204);
                                              if ((v73 & 0x200) != 0)
                                              {
LABEL_235:
                                                if ((v73 & 0x80000) == 0)
                                                  goto LABEL_271;
                                                goto LABEL_268;
                                              }
LABEL_267:
                                              sub_22E7216A8(a2, "-analyzer-config-compatibility-mode", a3, a4, 6, 0x1Du, 0);
                                              if ((*(_DWORD *)(v47 + 204) & 0x80000) == 0)
                                                goto LABEL_271;
LABEL_268:
                                              v84 = *(_DWORD *)(a2 + 8);
                                              if (v84 >= *(_DWORD *)(a2 + 12))
                                              {
                                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                v84 = *(_DWORD *)(a2 + 8);
                                              }
                                              *(_QWORD *)(*(_QWORD *)a2 + 8 * v84) = "-analyzer-werror";
                                              ++*(_DWORD *)(a2 + 8);
LABEL_271:
                                              if (*(_DWORD *)(v47 + 112))
                                              {
                                                *(_QWORD *)&__s2 = "region";
                                                LOWORD(v98) = 259;
                                                sub_22E6E094C(a2, 112, (uint64_t)&__s2, a3, a4);
                                              }
                                              if (*(_DWORD *)(v47 + 116))
                                              {
                                                *(_QWORD *)&__s2 = "z3";
                                                LOWORD(v98) = 259;
                                                sub_22E6E094C(a2, 88, (uint64_t)&__s2, a3, a4);
                                              }
                                              __asm { BR              X10 }
                                            }
                                            goto LABEL_207;
                                          }
                                          if (!(_DWORD)v65)
                                            goto LABEL_209;
                                          v67 = __n;
                                          p_s2 = (unsigned __int8 *)&__s2;
                                          while (*(unsigned __int8 *)v67 == *p_s2)
                                          {
                                            v67 = (size_t *)((char *)v67 + 1);
                                            ++p_s2;
                                            if (!--v65)
                                              goto LABEL_209;
                                          }
                                        }
                                        if ((v87 & 0x8000000000000000) == 0)
                                        {
                                          *(_OWORD *)__p = *(_OWORD *)__n;
                                          *(_QWORD *)&v91 = v87;
                                          goto LABEL_208;
                                        }
                                        v69 = (void *)__n[0];
LABEL_207:
                                        sub_22E3BB2B4(__p, v69, v64);
LABEL_208:
                                        LOWORD(v98) = 260;
                                        *(_QWORD *)&__s2 = __p;
                                        sub_22E721364(a2, "-analyzer-dump-egraph", a3, a4, 6, (uint64_t *)&__s2);
                                        if (SBYTE7(v91) < 0)
                                        {
                                          operator delete(__p[0]);
                                          if ((v63 & 0x80) == 0)
                                            goto LABEL_214;
                                          goto LABEL_212;
                                        }
LABEL_209:
                                        if ((v63 & 0x80) == 0)
                                          goto LABEL_214;
LABEL_212:
                                        v69 = (void *)__n[0];
                                        goto LABEL_213;
                                      }
                                      goto LABEL_173;
                                    }
                                    if (!(_DWORD)v55)
                                      goto LABEL_175;
                                    v57 = __n;
                                    v58 = (unsigned __int8 *)&__s2;
                                    while (*(unsigned __int8 *)v57 == *v58)
                                    {
                                      v57 = (size_t *)((char *)v57 + 1);
                                      ++v58;
                                      if (!--v55)
                                        goto LABEL_175;
                                    }
                                  }
                                  if ((v87 & 0x8000000000000000) == 0)
                                  {
                                    *(_OWORD *)__p = *(_OWORD *)__n;
                                    *(_QWORD *)&v91 = v87;
                                    goto LABEL_174;
                                  }
                                  v59 = (void *)__n[0];
LABEL_173:
                                  sub_22E3BB2B4(__p, v59, v54);
LABEL_174:
                                  LOWORD(v98) = 260;
                                  *(_QWORD *)&__s2 = __p;
                                  sub_22E721364(a2, "-analyze-function", a3, a4, 6, (uint64_t *)&__s2);
                                  if (SBYTE7(v91) < 0)
                                  {
                                    operator delete(__p[0]);
                                    if ((v53 & 0x80) == 0)
                                      goto LABEL_180;
                                    goto LABEL_178;
                                  }
LABEL_175:
                                  if ((v53 & 0x80) == 0)
                                    goto LABEL_180;
LABEL_178:
                                  v59 = (void *)__n[0];
                                  goto LABEL_179;
                                }
LABEL_153:
                                v52 = *(_DWORD *)(a2 + 8);
                                if (v52 >= *(_DWORD *)(a2 + 12))
                                {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                  v52 = *(_DWORD *)(a2 + 8);
                                }
                                *(_QWORD *)(*(_QWORD *)a2 + 8 * v52) = "-analyzer-display-progress";
                                ++*(_DWORD *)(a2 + 8);
                                goto LABEL_156;
                              }
                              goto LABEL_122;
                            }
                            if (!(_DWORD)v39)
                              goto LABEL_124;
                            v41 = __n;
                            v42 = (unsigned __int8 *)&__s2;
                            while (*(unsigned __int8 *)v41 == *v42)
                            {
                              v41 = (size_t *)((char *)v41 + 1);
                              ++v42;
                              if (!--v39)
                                goto LABEL_124;
                            }
                          }
                          if ((v87 & 0x8000000000000000) == 0)
                          {
                            *(_OWORD *)__p = *(_OWORD *)__n;
                            *(_QWORD *)&v91 = v87;
                            goto LABEL_123;
                          }
                          v43 = (void *)__n[0];
LABEL_122:
                          sub_22E3BB2B4(__p, v43, v38);
LABEL_123:
                          LOWORD(v98) = 260;
                          *(_QWORD *)&__s2 = __p;
                          sub_22E721364(a2, "-fcas-fs-working-directory", a3, a4, 6, (uint64_t *)&__s2);
                          if (SBYTE7(v91) < 0)
                          {
                            operator delete(__p[0]);
                            if ((v37 & 0x80) == 0)
                              goto LABEL_129;
                            goto LABEL_127;
                          }
LABEL_124:
                          if ((v37 & 0x80) == 0)
                            goto LABEL_129;
LABEL_127:
                          v43 = (void *)__n[0];
                          goto LABEL_128;
                        }
                        goto LABEL_96;
                      }
                      if (!(_DWORD)v32)
                        goto LABEL_98;
                      v34 = __n;
                      v35 = (unsigned __int8 *)&__s2;
                      while (*(unsigned __int8 *)v34 == *v35)
                      {
                        v34 = (size_t *)((char *)v34 + 1);
                        ++v35;
                        if (!--v32)
                          goto LABEL_98;
                      }
                    }
                    if ((v87 & 0x8000000000000000) == 0)
                    {
                      *(_OWORD *)__p = *(_OWORD *)__n;
                      *(_QWORD *)&v91 = v87;
                      goto LABEL_97;
                    }
                    v36 = (void *)__n[0];
LABEL_96:
                    sub_22E3BB2B4(__p, v36, v31);
LABEL_97:
                    LOWORD(v98) = 260;
                    *(_QWORD *)&__s2 = __p;
                    sub_22E721364(a2, "-fcas-fs", a3, a4, 6, (uint64_t *)&__s2);
                    if (SBYTE7(v91) < 0)
                    {
                      operator delete(__p[0]);
                      if ((v30 & 0x80) == 0)
                        goto LABEL_103;
                      goto LABEL_101;
                    }
LABEL_98:
                    if ((v30 & 0x80) == 0)
                      goto LABEL_103;
LABEL_101:
                    v36 = (void *)__n[0];
                    goto LABEL_102;
                  }
                  goto LABEL_70;
                }
                if (!(_DWORD)v25)
                  goto LABEL_72;
                v27 = __n;
                v28 = (unsigned __int8 *)&__s2;
                while (*(unsigned __int8 *)v27 == *v28)
                {
                  v27 = (size_t *)((char *)v27 + 1);
                  ++v28;
                  if (!--v25)
                    goto LABEL_72;
                }
              }
              if ((v87 & 0x8000000000000000) == 0)
              {
                *(_OWORD *)__p = *(_OWORD *)__n;
                *(_QWORD *)&v91 = v87;
                goto LABEL_71;
              }
              v29 = (void *)__n[0];
LABEL_70:
              sub_22E3BB2B4(__p, v29, v24);
LABEL_71:
              LOWORD(v98) = 260;
              *(_QWORD *)&__s2 = __p;
              sub_22E721364(a2, "-working-directory", a3, a4, 11, (uint64_t *)&__s2);
              if (SBYTE7(v91) < 0)
              {
                operator delete(__p[0]);
                if ((v23 & 0x80) == 0)
                  goto LABEL_77;
                goto LABEL_75;
              }
LABEL_72:
              if ((v23 & 0x80) == 0)
                goto LABEL_77;
LABEL_75:
              v29 = (void *)__n[0];
              goto LABEL_76;
            }
            goto LABEL_44;
          }
          if (!(_DWORD)v18)
            goto LABEL_46;
          v20 = __n;
          v21 = (unsigned __int8 *)&__s2;
          while (*(unsigned __int8 *)v20 == *v21)
          {
            v20 = (size_t *)((char *)v20 + 1);
            ++v21;
            if (!--v18)
              goto LABEL_46;
          }
        }
        if ((v87 & 0x8000000000000000) == 0)
        {
          *(_OWORD *)__p = *(_OWORD *)__n;
          *(_QWORD *)&v91 = v87;
          goto LABEL_45;
        }
        v22 = (void *)__n[0];
LABEL_44:
        sub_22E3BB2B4(__p, v22, v17);
LABEL_45:
        LOWORD(v98) = 260;
        *(_QWORD *)&__s2 = __p;
        sub_22E721364(a2, "-faction-cache-path", a3, a4, 6, (uint64_t *)&__s2);
        if (SBYTE7(v91) < 0)
        {
          operator delete(__p[0]);
          if ((v16 & 0x80) == 0)
            goto LABEL_51;
          goto LABEL_49;
        }
LABEL_46:
        if ((v16 & 0x80) == 0)
          goto LABEL_51;
LABEL_49:
        v22 = (void *)__n[0];
        goto LABEL_50;
      }
      goto LABEL_18;
    }
    if (!(_DWORD)v11)
      goto LABEL_20;
    v13 = __n;
    v14 = (unsigned __int8 *)&__s2;
    while (*(unsigned __int8 *)v13 == *v14)
    {
      v13 = (size_t *)((char *)v13 + 1);
      ++v14;
      if (!--v11)
        goto LABEL_20;
    }
  }
  if ((v87 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)__p = *(_OWORD *)__n;
    *(_QWORD *)&v91 = v87;
    goto LABEL_19;
  }
  v15 = (void *)__n[0];
LABEL_18:
  sub_22E3BB2B4(__p, v15, v10);
LABEL_19:
  LOWORD(v98) = 260;
  *(_QWORD *)&__s2 = __p;
  sub_22E721364(a2, "-fcas-path", a3, a4, 6, (uint64_t *)&__s2);
  if (SBYTE7(v91) < 0)
  {
    operator delete(__p[0]);
    if ((v9 & 0x80) == 0)
      goto LABEL_25;
    goto LABEL_23;
  }
LABEL_20:
  if ((v9 & 0x80) == 0)
    goto LABEL_25;
LABEL_23:
  v15 = (void *)__n[0];
  goto LABEL_24;
}

uint64_t sub_22E71B790(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, __int128 *), uint64_t a4, int a5)
{
  unint64_t v7;
  unint64_t v8;
  int v9;
  std::string::size_type size;
  uint64_t v11;
  std::string::size_type v12;
  uint64_t (*v13)(uint64_t, __int128 *);
  uint64_t v14;
  std::string *p_s1;
  void ***p_s2;
  void *v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  std::string::size_type v38;
  uint64_t v39;
  std::string::size_type v40;
  uint64_t (*v41)(uint64_t, __int128 *);
  uint64_t v42;
  std::string *v43;
  void ***v44;
  void *v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  std::string::size_type v49;
  uint64_t v50;
  std::string::size_type v51;
  uint64_t (*v52)(uint64_t, __int128 *);
  uint64_t v53;
  std::string *v54;
  void ***v55;
  void *v56;
  void *v57;
  unsigned int v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  std::string::size_type v63;
  uint64_t v64;
  std::string::size_type v65;
  uint64_t (*v66)(uint64_t, __int128 *);
  uint64_t v67;
  std::string *v68;
  void ***v69;
  void *v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  std::string::size_type v77;
  uint64_t v78;
  std::string::size_type v79;
  uint64_t (*v80)(uint64_t, __int128 *);
  uint64_t v81;
  std::string *v82;
  void ***v83;
  void *v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  std::string::size_type v88;
  uint64_t v89;
  std::string::size_type v90;
  uint64_t (*v91)(uint64_t, __int128 *);
  uint64_t v92;
  std::string *v93;
  void ***v94;
  void *v95;
  unsigned int v96;
  std::string::size_type v97;
  std::string::size_type v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  std::string::size_type v106;
  std::string::size_type v107;
  unint64_t v108;
  unint64_t v109;
  int v110;
  std::string::size_type v111;
  uint64_t v112;
  std::string::size_type v113;
  uint64_t (*v114)(uint64_t, __int128 *);
  uint64_t v115;
  std::string *v116;
  void ***v117;
  void *v118;
  unsigned int v119;
  std::string::size_type v120;
  std::string::size_type v121;
  unint64_t v122;
  unint64_t v123;
  int v124;
  std::string::size_type v125;
  uint64_t v126;
  std::string::size_type v127;
  uint64_t (*v128)(uint64_t, __int128 *);
  uint64_t v129;
  std::string *v130;
  void ***v131;
  void *v132;
  char v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  std::string::size_type v141;
  std::string::size_type v142;
  unint64_t v143;
  unint64_t v144;
  int v145;
  std::string::size_type v146;
  uint64_t v147;
  std::string::size_type v148;
  uint64_t (*v149)(uint64_t, __int128 *);
  uint64_t v150;
  std::string *v151;
  void ***v152;
  void *v153;
  unsigned int v154;
  std::string::size_type v155;
  std::string::size_type v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unint64_t v162;
  unint64_t v163;
  int v164;
  std::string::size_type v165;
  uint64_t v166;
  std::string::size_type v167;
  uint64_t (*v168)(uint64_t, __int128 *);
  uint64_t v169;
  std::string *v170;
  void ***v171;
  void *v172;
  int v173;
  unsigned int v174;
  unint64_t v175;
  unint64_t v176;
  int v177;
  std::string::size_type v178;
  uint64_t v179;
  std::string::size_type v180;
  uint64_t (*v181)(uint64_t, __int128 *);
  uint64_t v182;
  std::string *v183;
  void ***v184;
  void *v185;
  uint64_t v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unint64_t v191;
  unint64_t v192;
  int v193;
  std::string::size_type v194;
  uint64_t v195;
  std::string::size_type v196;
  uint64_t (*v197)(uint64_t, __int128 *);
  uint64_t v198;
  std::string *v199;
  void ***v200;
  void *v201;
  uint64_t v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  std::string::size_type v207;
  std::string::size_type v208;
  std::string::size_type v209;
  unint64_t v210;
  unint64_t v211;
  int v212;
  std::string::size_type v213;
  uint64_t v214;
  std::string::size_type v215;
  uint64_t (*v216)(uint64_t, __int128 *);
  uint64_t v217;
  std::string *v218;
  void ***v219;
  void *v220;
  uint64_t v221;
  unsigned int v222;
  unsigned int v223;
  unint64_t v224;
  unint64_t v225;
  int v226;
  std::string::size_type v227;
  uint64_t v228;
  std::string::size_type v229;
  uint64_t (*v230)(uint64_t, __int128 *);
  uint64_t v231;
  std::string *v232;
  void ***v233;
  void *v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  _QWORD *v238;
  void ***v239;
  void ***v240;
  void **p_size;
  void ***v242;
  void ***v243;
  void **v244;
  char v245;
  int v246;
  uint64_t v247;
  void ***v248;
  void (**v249)(void);
  uint64_t v250;
  uint64_t *v251;
  const char ***Option;
  const char ***v253;
  std::string::size_type v254;
  std::string::size_type v255;
  std::string::size_type v256;
  size_t v257;
  uint64_t v258;
  __int128 *v259;
  __int128 *v260;
  _BYTE *v261;
  uint64_t (*v262)(uint64_t, __int128 *);
  uint64_t v263;
  char v264;
  __int128 v265;
  uint64_t *v266;
  uint64_t *v267;
  uint64_t *v268;
  uint64_t *i;
  uint64_t v270;
  uint64_t *v271;
  char v272;
  unint64_t v273;
  uint64_t v274;
  void **v275;
  unint64_t v276;
  void *v277;
  size_t v278;
  BOOL v279;
  std::string::size_type v280;
  const char *v281;
  void **v282;
  void **j;
  void **v284;
  void **k;
  const void **v286;
  const void **m;
  char v288;
  int v289;
  size_t v290;
  size_t v291;
  std::string *v292;
  const void *v293;
  char v294;
  const std::string::value_type *v295;
  std::string::size_type v296;
  std::string *v297;
  std::string::size_type v298;
  void **v299;
  void **n;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  const char *v305;
  uint64_t v306;
  char *v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  const char *v311;
  const char *v312;
  const char *v313;
  unsigned int v314;
  uint64_t v315;
  uint64_t v316;
  char v317;
  BOOL v318;
  void **v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t result;
  uint64_t (**v324)(void);
  uint64_t *v326;
  void *v327;
  char v328;
  void *v329[2];
  uint64_t v330;
  uint64_t v331;
  std::string v332;
  std::string v333;
  std::string v334;
  std::string v335;
  std::string v336;
  std::string v337;
  std::string v338;
  std::string v339;
  std::string v340;
  std::string v341;
  std::string v342;
  std::string v343;
  std::string v344;
  std::string v345;
  std::string v346;
  std::string v347;
  std::string v348;
  std::string v349;
  std::string v350;
  std::string __p;
  uint64_t (*v352)(uint64_t, __int128 *);
  uint64_t v353;
  __int128 v354;
  uint64_t v355;
  _QWORD v356[2];
  const char *v357;
  uint64_t v358;
  __int16 v359;
  std::string __s1;
  uint64_t v361;
  __int16 v362;
  std::string __dst;
  size_t v364;
  __int16 v365;
  _QWORD v366[3];
  _QWORD *v367;
  std::string *__s2;
  uint64_t v369;
  const char *v370;
  void ***v371;
  __int16 v372;
  uint64_t v373;

  v373 = *MEMORY[0x24BDAC8D0];
  v352 = a3;
  v353 = a4;
  if (*((char *)a1 + 95) < 0)
    sub_22E3BB2B4(&__p, (void *)a1[9], a1[10]);
  else
    __p = *(std::string *)((_BYTE *)a1 + 3);
  v7 = __p.__r_.__value_.__r.__words[2];
  __s1 = __p;
  memset(&__p, 0, sizeof(__p));
  __s2 = 0;
  v369 = 0;
  v370 = 0;
  v8 = HIBYTE(v7);
  v9 = SHIBYTE(v7);
  size = __s1.__r_.__value_.__l.__size_;
  v11 = HIBYTE(v7) & 0x7F;
  if (v9 >= 0)
    v12 = v11;
  else
    v12 = __s1.__r_.__value_.__l.__size_;
  if (v12)
  {
LABEL_8:
    v13 = v352;
    v14 = v353;
    if ((v8 & 0x80) == 0)
    {
      __dst = __s1;
      goto LABEL_20;
    }
    v17 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_19:
    sub_22E3BB2B4(&__dst, v17, size);
LABEL_20:
    v372 = 260;
    __s2 = &__dst;
    sub_22E721364(a2, "-arcmt-migrate-report-output", v13, v14, 6, (uint64_t *)&__s2);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v8 & 0x80) == 0)
        goto LABEL_26;
      goto LABEL_24;
    }
LABEL_21:
    if ((v8 & 0x80) == 0)
      goto LABEL_26;
LABEL_24:
    v17 = (void *)__s1.__r_.__value_.__r.__words[0];
    goto LABEL_25;
  }
  if ((v8 & 0x80) == 0)
  {
    if (!(_DWORD)v11)
      goto LABEL_21;
    p_s1 = &__s1;
    p_s2 = (void ***)&__s2;
    while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)p_s2)
    {
      p_s1 = (std::string *)((char *)p_s1 + 1);
      p_s2 = (void ***)((char *)p_s2 + 1);
      if (!--v11)
        goto LABEL_21;
    }
    goto LABEL_8;
  }
  v17 = (void *)__s1.__r_.__value_.__r.__words[0];
  if (memcmp(__s1.__r_.__value_.__l.__data_, &__s2, __s1.__r_.__value_.__l.__size_))
  {
    v13 = v352;
    v14 = v353;
    goto LABEL_19;
  }
LABEL_25:
  operator delete(v17);
LABEL_26:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((*((_BYTE *)a1 + 1) & 8) != 0)
  {
    v18 = *(_DWORD *)(a2 + 8);
    if (v18 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v18 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v18) = "-arcmt-migrate-emit-errors";
    ++*(_DWORD *)(a2 + 8);
  }
  v19 = *((_DWORD *)a1 + 5);
  if ((v19 & 1) != 0)
  {
    v20 = *(_DWORD *)(a2 + 8);
    if (v20 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v20 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v20) = "-objcmt-migrate-literals";
    ++*(_DWORD *)(a2 + 8);
    v19 = *((_DWORD *)a1 + 5);
  }
  if ((v19 & 2) != 0)
  {
    v21 = *(_DWORD *)(a2 + 8);
    if (v21 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v21 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v21) = "-objcmt-migrate-subscripting";
    ++*(_DWORD *)(a2 + 8);
    v19 = *((_DWORD *)a1 + 5);
  }
  if ((~v19 & 0xC) == 0)
  {
    v22 = *(_DWORD *)(a2 + 8);
    if (v22 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v22 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v22) = "-objcmt-migrate-property";
    ++*(_DWORD *)(a2 + 8);
    v19 = *((_DWORD *)a1 + 5);
  }
  if ((~v19 & 0xCFC) != 0)
  {
    if ((v19 & 4) == 0)
      goto LABEL_46;
  }
  else
  {
    v23 = *(_DWORD *)(a2 + 8);
    if (v23 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v23 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v23) = "-objcmt-migrate-all";
    ++*(_DWORD *)(a2 + 8);
    v19 = *((_DWORD *)a1 + 5);
    if ((v19 & 4) == 0)
    {
LABEL_46:
      if ((v19 & 8) == 0)
        goto LABEL_47;
      goto LABEL_63;
    }
  }
  v24 = *(_DWORD *)(a2 + 8);
  if (v24 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v24 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v24) = "-objcmt-migrate-readonly-property";
  ++*(_DWORD *)(a2 + 8);
  v19 = *((_DWORD *)a1 + 5);
  if ((v19 & 8) == 0)
  {
LABEL_47:
    if ((v19 & 0x1000) == 0)
      goto LABEL_48;
    goto LABEL_66;
  }
LABEL_63:
  v25 = *(_DWORD *)(a2 + 8);
  if (v25 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v25 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v25) = "-objcmt-migrate-readwrite-property";
  ++*(_DWORD *)(a2 + 8);
  v19 = *((_DWORD *)a1 + 5);
  if ((v19 & 0x1000) == 0)
  {
LABEL_48:
    if ((v19 & 0x10) == 0)
      goto LABEL_49;
    goto LABEL_69;
  }
LABEL_66:
  v26 = *(_DWORD *)(a2 + 8);
  if (v26 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v26 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v26) = "-objcmt-migrate-property-dot-syntax";
  ++*(_DWORD *)(a2 + 8);
  v19 = *((_DWORD *)a1 + 5);
  if ((v19 & 0x10) == 0)
  {
LABEL_49:
    if ((v19 & 0x20) == 0)
      goto LABEL_50;
    goto LABEL_72;
  }
LABEL_69:
  v27 = *(_DWORD *)(a2 + 8);
  if (v27 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v27 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v27) = "-objcmt-migrate-annotation";
  ++*(_DWORD *)(a2 + 8);
  v19 = *((_DWORD *)a1 + 5);
  if ((v19 & 0x20) == 0)
  {
LABEL_50:
    if ((v19 & 0x40) == 0)
      goto LABEL_51;
    goto LABEL_75;
  }
LABEL_72:
  v28 = *(_DWORD *)(a2 + 8);
  if (v28 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v28 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v28) = "-objcmt-migrate-instancetype";
  ++*(_DWORD *)(a2 + 8);
  v19 = *((_DWORD *)a1 + 5);
  if ((v19 & 0x40) == 0)
  {
LABEL_51:
    if ((v19 & 0x80) == 0)
      goto LABEL_52;
    goto LABEL_78;
  }
LABEL_75:
  v29 = *(_DWORD *)(a2 + 8);
  if (v29 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v29 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v29) = "-objcmt-migrate-ns-macros";
  ++*(_DWORD *)(a2 + 8);
  v19 = *((_DWORD *)a1 + 5);
  if ((v19 & 0x80) == 0)
  {
LABEL_52:
    if ((v19 & 0x100) == 0)
      goto LABEL_53;
    goto LABEL_81;
  }
LABEL_78:
  v30 = *(_DWORD *)(a2 + 8);
  if (v30 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v30 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v30) = "-objcmt-migrate-protocol-conformance";
  ++*(_DWORD *)(a2 + 8);
  v19 = *((_DWORD *)a1 + 5);
  if ((v19 & 0x100) == 0)
  {
LABEL_53:
    if ((v19 & 0x200) == 0)
      goto LABEL_54;
    goto LABEL_84;
  }
LABEL_81:
  v31 = *(_DWORD *)(a2 + 8);
  if (v31 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v31 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v31) = "-objcmt-atomic-property";
  ++*(_DWORD *)(a2 + 8);
  v19 = *((_DWORD *)a1 + 5);
  if ((v19 & 0x200) == 0)
  {
LABEL_54:
    if ((v19 & 0x400) == 0)
      goto LABEL_55;
    goto LABEL_87;
  }
LABEL_84:
  v32 = *(_DWORD *)(a2 + 8);
  if (v32 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v32 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v32) = "-objcmt-returns-innerpointer-property";
  ++*(_DWORD *)(a2 + 8);
  v19 = *((_DWORD *)a1 + 5);
  if ((v19 & 0x400) == 0)
  {
LABEL_55:
    if ((v19 & 0x800) == 0)
      goto LABEL_93;
    goto LABEL_90;
  }
LABEL_87:
  v33 = *(_DWORD *)(a2 + 8);
  if (v33 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v33 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v33) = "-objcmt-ns-nonatomic-iosonly";
  ++*(_DWORD *)(a2 + 8);
  if ((*((_DWORD *)a1 + 5) & 0x800) != 0)
  {
LABEL_90:
    v34 = *(_DWORD *)(a2 + 8);
    if (v34 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v34 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v34) = "-objcmt-migrate-designated-init";
    ++*(_DWORD *)(a2 + 8);
  }
LABEL_93:
  if (*((char *)a1 + 47) < 0)
    sub_22E3BB2B4(&v350, (void *)a1[3], a1[4]);
  else
    v350 = *(std::string *)((_BYTE *)a1 + 1);
  v35 = v350.__r_.__value_.__r.__words[2];
  __s1 = v350;
  memset(&v350, 0, sizeof(v350));
  __s2 = 0;
  v369 = 0;
  v370 = 0;
  v36 = HIBYTE(v35);
  v37 = SHIBYTE(v35);
  v38 = __s1.__r_.__value_.__l.__size_;
  v39 = HIBYTE(v35) & 0x7F;
  if (v37 >= 0)
    v40 = v39;
  else
    v40 = __s1.__r_.__value_.__l.__size_;
  if (v40)
  {
LABEL_100:
    v41 = v352;
    v42 = v353;
    if ((v36 & 0x80) == 0)
    {
      __dst = __s1;
      goto LABEL_112;
    }
    v45 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_111:
    sub_22E3BB2B4(&__dst, v45, v38);
LABEL_112:
    v372 = 260;
    __s2 = &__dst;
    sub_22E721364(a2, "-objcmt-allowlist-dir-path=", v41, v42, 4, (uint64_t *)&__s2);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v36 & 0x80) == 0)
        goto LABEL_118;
      goto LABEL_116;
    }
LABEL_113:
    if ((v36 & 0x80) == 0)
      goto LABEL_118;
LABEL_116:
    v45 = (void *)__s1.__r_.__value_.__r.__words[0];
    goto LABEL_117;
  }
  if ((v36 & 0x80) == 0)
  {
    if (!(_DWORD)v39)
      goto LABEL_113;
    v43 = &__s1;
    v44 = (void ***)&__s2;
    while (v43->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v44)
    {
      v43 = (std::string *)((char *)v43 + 1);
      v44 = (void ***)((char *)v44 + 1);
      if (!--v39)
        goto LABEL_113;
    }
    goto LABEL_100;
  }
  v45 = (void *)__s1.__r_.__value_.__r.__words[0];
  if (memcmp(__s1.__r_.__value_.__l.__data_, &__s2, __s1.__r_.__value_.__l.__size_))
  {
    v41 = v352;
    v42 = v353;
    goto LABEL_111;
  }
LABEL_117:
  operator delete(v45);
LABEL_118:
  if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v350.__r_.__value_.__l.__data_);
  if (*((char *)a1 + 119) < 0)
    sub_22E3BB2B4(&v349, (void *)a1[12], a1[13]);
  else
    v349 = *(std::string *)((_BYTE *)a1 + 4);
  v46 = v349.__r_.__value_.__r.__words[2];
  __s1 = v349;
  memset(&v349, 0, sizeof(v349));
  __s2 = 0;
  v369 = 0;
  v370 = 0;
  v47 = HIBYTE(v46);
  v48 = SHIBYTE(v46);
  v49 = __s1.__r_.__value_.__l.__size_;
  v50 = HIBYTE(v46) & 0x7F;
  if (v48 >= 0)
    v51 = v50;
  else
    v51 = __s1.__r_.__value_.__l.__size_;
  if (v51)
  {
LABEL_127:
    v52 = v352;
    v53 = v353;
    if ((v47 & 0x80) == 0)
    {
      __dst = __s1;
      goto LABEL_139;
    }
    v56 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_138:
    sub_22E3BB2B4(&__dst, v56, v49);
LABEL_139:
    v372 = 260;
    __s2 = &__dst;
    sub_22E721364(a2, "-index-store-path", v52, v53, 6, (uint64_t *)&__s2);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v47 & 0x80) == 0)
        goto LABEL_145;
      goto LABEL_143;
    }
LABEL_140:
    if ((v47 & 0x80) == 0)
      goto LABEL_145;
LABEL_143:
    v56 = (void *)__s1.__r_.__value_.__r.__words[0];
    goto LABEL_144;
  }
  if ((v47 & 0x80) == 0)
  {
    if (!(_DWORD)v50)
      goto LABEL_140;
    v54 = &__s1;
    v55 = (void ***)&__s2;
    while (v54->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v55)
    {
      v54 = (std::string *)((char *)v54 + 1);
      v55 = (void ***)((char *)v55 + 1);
      if (!--v50)
        goto LABEL_140;
    }
    goto LABEL_127;
  }
  v56 = (void *)__s1.__r_.__value_.__r.__words[0];
  if (memcmp(__s1.__r_.__value_.__l.__data_, &__s2, __s1.__r_.__value_.__l.__size_))
  {
    v52 = v352;
    v53 = v353;
    goto LABEL_138;
  }
LABEL_144:
  operator delete(v56);
LABEL_145:
  if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v349.__r_.__value_.__l.__data_);
  v57 = (void *)*a1;
  if ((*a1 & 0x2000000) != 0)
  {
    v58 = *(_DWORD *)(a2 + 8);
    if (v58 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v58 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v58) = "-index-ignore-system-symbols";
    ++*(_DWORD *)(a2 + 8);
    v57 = (void *)*a1;
  }
  if ((v57 & 0x4000000) != 0)
  {
    v59 = *(_DWORD *)(a2 + 8);
    if (v59 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v59 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v59) = "-index-record-codegen-name";
    ++*(_DWORD *)(a2 + 8);
  }
  if (*((char *)a1 + 143) < 0)
    sub_22E3BB2B4(&v348, (void *)a1[15], a1[16]);
  else
    v348 = *(std::string *)((_BYTE *)a1 + 5);
  v60 = v348.__r_.__value_.__r.__words[2];
  __s1 = v348;
  memset(&v348, 0, sizeof(v348));
  __s2 = 0;
  v369 = 0;
  v370 = 0;
  v61 = HIBYTE(v60);
  v62 = SHIBYTE(v60);
  v63 = __s1.__r_.__value_.__l.__size_;
  v64 = HIBYTE(v60) & 0x7F;
  if (v62 >= 0)
    v65 = v64;
  else
    v65 = __s1.__r_.__value_.__l.__size_;
  if (v65)
  {
LABEL_162:
    v66 = v352;
    v67 = v353;
    if ((v61 & 0x80) == 0)
    {
      __dst = __s1;
      goto LABEL_174;
    }
    v70 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_173:
    sub_22E3BB2B4(&__dst, v70, v63);
LABEL_174:
    v372 = 260;
    __s2 = &__dst;
    sub_22E721364(a2, "-index-unit-output-path", v66, v67, 6, (uint64_t *)&__s2);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v61 & 0x80) == 0)
        goto LABEL_180;
      goto LABEL_178;
    }
LABEL_175:
    if ((v61 & 0x80) == 0)
      goto LABEL_180;
LABEL_178:
    v70 = (void *)__s1.__r_.__value_.__r.__words[0];
    goto LABEL_179;
  }
  if ((v61 & 0x80) == 0)
  {
    if (!(_DWORD)v64)
      goto LABEL_175;
    v68 = &__s1;
    v69 = (void ***)&__s2;
    while (v68->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v69)
    {
      v68 = (std::string *)((char *)v68 + 1);
      v69 = (void ***)((char *)v69 + 1);
      if (!--v64)
        goto LABEL_175;
    }
    goto LABEL_162;
  }
  v70 = (void *)__s1.__r_.__value_.__r.__words[0];
  if (memcmp(__s1.__r_.__value_.__l.__data_, &__s2, __s1.__r_.__value_.__l.__size_))
  {
    v66 = v352;
    v67 = v353;
    goto LABEL_173;
  }
LABEL_179:
  operator delete(v70);
LABEL_180:
  if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v348.__r_.__value_.__l.__data_);
  v71 = *a1;
  if ((*a1 & 0x8000000) != 0)
  {
    v72 = *(_DWORD *)(a2 + 8);
    if (v72 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v72 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v72) = "-index-ignore-macros";
    ++*(_DWORD *)(a2 + 8);
    v71 = *a1;
  }
  if ((v71 & 0x10000000) != 0)
  {
    v73 = *(_DWORD *)(a2 + 8);
    if (v73 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v73 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v73) = "-index-ignore-pcms";
    ++*(_DWORD *)(a2 + 8);
  }
  if (*((char *)a1 + 375) < 0)
    sub_22E3BB2B4(&v347, (void *)a1[44], a1[45]);
  else
    v347 = *(std::string *)(a1 + 44);
  v74 = v347.__r_.__value_.__r.__words[2];
  __s1 = v347;
  memset(&v347, 0, sizeof(v347));
  __s2 = 0;
  v369 = 0;
  v370 = 0;
  v75 = HIBYTE(v74);
  v76 = SHIBYTE(v74);
  v77 = __s1.__r_.__value_.__l.__size_;
  v78 = HIBYTE(v74) & 0x7F;
  if (v76 >= 0)
    v79 = v78;
  else
    v79 = __s1.__r_.__value_.__l.__size_;
  if (v79)
  {
LABEL_197:
    v80 = v352;
    v81 = v353;
    if ((v75 & 0x80) == 0)
    {
      __dst = __s1;
      goto LABEL_209;
    }
    v84 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_208:
    sub_22E3BB2B4(&__dst, v84, v77);
LABEL_209:
    v372 = 260;
    __s2 = &__dst;
    sub_22E721364(a2, "--product-name=", v80, v81, 4, (uint64_t *)&__s2);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v75 & 0x80) == 0)
        goto LABEL_215;
      goto LABEL_213;
    }
LABEL_210:
    if ((v75 & 0x80) == 0)
      goto LABEL_215;
LABEL_213:
    v84 = (void *)__s1.__r_.__value_.__r.__words[0];
    goto LABEL_214;
  }
  if ((v75 & 0x80) == 0)
  {
    if (!(_DWORD)v78)
      goto LABEL_210;
    v82 = &__s1;
    v83 = (void ***)&__s2;
    while (v82->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v83)
    {
      v82 = (std::string *)((char *)v82 + 1);
      v83 = (void ***)((char *)v83 + 1);
      if (!--v78)
        goto LABEL_210;
    }
    goto LABEL_197;
  }
  v84 = (void *)__s1.__r_.__value_.__r.__words[0];
  if (memcmp(__s1.__r_.__value_.__l.__data_, &__s2, __s1.__r_.__value_.__l.__size_))
  {
    v80 = v352;
    v81 = v353;
    goto LABEL_208;
  }
LABEL_214:
  operator delete(v84);
LABEL_215:
  if (SHIBYTE(v347.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v347.__r_.__value_.__l.__data_);
  if (*((char *)a1 + 447) < 0)
    sub_22E3BB2B4(&v346, (void *)a1[53], a1[54]);
  else
    v346 = *(std::string *)(a1 + 53);
  v85 = v346.__r_.__value_.__r.__words[2];
  __s1 = v346;
  memset(&v346, 0, sizeof(v346));
  __s2 = 0;
  v369 = 0;
  v370 = 0;
  v86 = HIBYTE(v85);
  v87 = SHIBYTE(v85);
  v88 = __s1.__r_.__value_.__l.__size_;
  v89 = HIBYTE(v85) & 0x7F;
  if (v87 >= 0)
    v90 = v89;
  else
    v90 = __s1.__r_.__value_.__l.__size_;
  if (v90)
  {
LABEL_224:
    v91 = v352;
    v92 = v353;
    if ((v86 & 0x80) == 0)
    {
      __dst = __s1;
      goto LABEL_236;
    }
    v95 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_235:
    sub_22E3BB2B4(&__dst, v95, v88);
LABEL_236:
    v372 = 260;
    __s2 = &__dst;
    sub_22E721364(a2, "--extract-api-ignores=", v91, v92, 4, (uint64_t *)&__s2);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v86 & 0x80) == 0)
        goto LABEL_242;
      goto LABEL_240;
    }
LABEL_237:
    if ((v86 & 0x80) == 0)
      goto LABEL_242;
LABEL_240:
    v95 = (void *)__s1.__r_.__value_.__r.__words[0];
    goto LABEL_241;
  }
  if ((v86 & 0x80) == 0)
  {
    if (!(_DWORD)v89)
      goto LABEL_237;
    v93 = &__s1;
    v94 = (void ***)&__s2;
    while (v93->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v94)
    {
      v93 = (std::string *)((char *)v93 + 1);
      v94 = (void ***)((char *)v94 + 1);
      if (!--v89)
        goto LABEL_237;
    }
    goto LABEL_224;
  }
  v95 = (void *)__s1.__r_.__value_.__r.__words[0];
  if (memcmp(__s1.__r_.__value_.__l.__data_, &__s2, __s1.__r_.__value_.__l.__size_))
  {
    v91 = v352;
    v92 = v353;
    goto LABEL_235;
  }
LABEL_241:
  operator delete(v95);
LABEL_242:
  if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v346.__r_.__value_.__l.__data_);
  if ((*((_BYTE *)a1 + 3) & 1) != 0)
  {
    v96 = *(_DWORD *)(a2 + 8);
    if (v96 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v96 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v96) = "-fsystem-module";
    ++*(_DWORD *)(a2 + 8);
  }
  memset(&v345, 0, sizeof(v345));
  sub_22E618148(&v345, a1[68], a1[69], 0xAAAAAAAAAAAAAAABLL * ((a1[69] - a1[68]) >> 3));
  v97 = v345.__r_.__value_.__r.__words[0];
  __dst = v345;
  memset(&v345, 0, sizeof(v345));
  v98 = __dst.__r_.__value_.__l.__size_;
  __s2 = 0;
  v369 = 0;
  v370 = 0;
  __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s2;
  sub_22E3B3CC8((void ***)&__s1);
  if (v98 != v97)
    sub_22E7214C8(a2, "-fmodule-map-file=", v352, v353, 4, (__int128 **)&__dst);
  __s2 = &__dst;
  sub_22E3B3CC8((void ***)&__s2);
  __s2 = &v345;
  sub_22E3B3CC8((void ***)&__s2);
  v99 = *a1;
  if ((*a1 & 0x800000) == 0)
  {
    v100 = *(_DWORD *)(a2 + 8);
    if (v100 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v100 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v100) = "-fno-temp-file";
    ++*(_DWORD *)(a2 + 8);
    v99 = *a1;
  }
  if ((v99 & 0x20) != 0)
  {
    v101 = *(_DWORD *)(a2 + 8);
    if (v101 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v101 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v101) = "-ftime-trace";
    ++*(_DWORD *)(a2 + 8);
  }
  v102 = *((_DWORD *)a1 + 206);
  if (v102 != 500)
  {
    v372 = 264;
    LODWORD(__s2) = v102;
    sub_22E721364(a2, "-ftime-trace-granularity=", v352, v353, 4, (uint64_t *)&__s2);
  }
  v103 = *a1;
  if ((*a1 & 4) != 0)
  {
    v104 = *(_DWORD *)(a2 + 8);
    if (v104 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v104 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v104) = "-help";
    ++*(_DWORD *)(a2 + 8);
    v103 = *a1;
  }
  if ((v103 & 2) != 0)
  {
    v105 = *(_DWORD *)(a2 + 8);
    if (v105 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v105 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v105) = "-relocatable-pch";
    ++*(_DWORD *)(a2 + 8);
  }
  memset(&v344, 0, sizeof(v344));
  sub_22E618148(&v344, a1[83], a1[84], 0xAAAAAAAAAAAAAAABLL * ((a1[84] - a1[83]) >> 3));
  v106 = v344.__r_.__value_.__r.__words[0];
  __dst = v344;
  memset(&v344, 0, sizeof(v344));
  v107 = __dst.__r_.__value_.__l.__size_;
  __s2 = 0;
  v369 = 0;
  v370 = 0;
  __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s2;
  sub_22E3B3CC8((void ***)&__s1);
  if (v107 != v106)
    sub_22E7214C8(a2, "-mllvm", v352, v353, 6, (__int128 **)&__dst);
  __s2 = &__dst;
  sub_22E3B3CC8((void ***)&__s2);
  __s2 = &v344;
  sub_22E3B3CC8((void ***)&__s2);
  if (*((char *)a1 + 239) < 0)
    sub_22E3BB2B4(&v343, (void *)a1[27], a1[28]);
  else
    v343 = *(std::string *)((_BYTE *)a1 + 9);
  v108 = v343.__r_.__value_.__r.__words[2];
  __s1 = v343;
  memset(&v343, 0, sizeof(v343));
  __s2 = 0;
  v369 = 0;
  v370 = 0;
  v109 = HIBYTE(v108);
  v110 = SHIBYTE(v108);
  v111 = __s1.__r_.__value_.__l.__size_;
  v112 = HIBYTE(v108) & 0x7F;
  if (v110 >= 0)
    v113 = v112;
  else
    v113 = __s1.__r_.__value_.__l.__size_;
  if (v113)
  {
LABEL_277:
    v114 = v352;
    v115 = v353;
    if ((v109 & 0x80) == 0)
    {
      __dst = __s1;
      goto LABEL_289;
    }
    v118 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_288:
    sub_22E3BB2B4(&__dst, v118, v111);
LABEL_289:
    v372 = 260;
    __s2 = &__dst;
    sub_22E721364(a2, "-o", v114, v115, 11, (uint64_t *)&__s2);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v109 & 0x80) == 0)
        goto LABEL_295;
      goto LABEL_293;
    }
LABEL_290:
    if ((v109 & 0x80) == 0)
      goto LABEL_295;
LABEL_293:
    v118 = (void *)__s1.__r_.__value_.__r.__words[0];
    goto LABEL_294;
  }
  if ((v109 & 0x80) == 0)
  {
    if (!(_DWORD)v112)
      goto LABEL_290;
    v116 = &__s1;
    v117 = (void ***)&__s2;
    while (v116->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v117)
    {
      v116 = (std::string *)((char *)v116 + 1);
      v117 = (void ***)((char *)v117 + 1);
      if (!--v112)
        goto LABEL_290;
    }
    goto LABEL_277;
  }
  v118 = (void *)__s1.__r_.__value_.__r.__words[0];
  if (memcmp(__s1.__r_.__value_.__l.__data_, &__s2, __s1.__r_.__value_.__l.__size_))
  {
    v114 = v352;
    v115 = v353;
    goto LABEL_288;
  }
LABEL_294:
  operator delete(v118);
LABEL_295:
  if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v343.__r_.__value_.__l.__data_);
  if ((*(_BYTE *)a1 & 0x10) != 0)
  {
    v119 = *(_DWORD *)(a2 + 8);
    if (v119 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v119 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v119) = "-print-supported-cpus";
    ++*(_DWORD *)(a2 + 8);
  }
  memset(&v342, 0, sizeof(v342));
  sub_22E618148(&v342, a1[77], a1[78], 0xAAAAAAAAAAAAAAABLL * ((a1[78] - a1[77]) >> 3));
  v120 = v342.__r_.__value_.__r.__words[0];
  __dst = v342;
  memset(&v342, 0, sizeof(v342));
  v121 = __dst.__r_.__value_.__l.__size_;
  __s2 = 0;
  v369 = 0;
  v370 = 0;
  __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s2;
  sub_22E3B3CC8((void ***)&__s1);
  if (v121 != v120)
    sub_22E7214C8(a2, "-ast-merge", v352, v353, 6, (__int128 **)&__dst);
  __s2 = &__dst;
  sub_22E3B3CC8((void ***)&__s2);
  __s2 = &v342;
  sub_22E3B3CC8((void ***)&__s2);
  if (*((char *)a1 + 735) < 0)
    sub_22E3BB2B4(&v341, (void *)a1[89], a1[90]);
  else
    v341 = *(std::string *)(a1 + 89);
  v122 = v341.__r_.__value_.__r.__words[2];
  __s1 = v341;
  memset(&v341, 0, sizeof(v341));
  __s2 = 0;
  v369 = 0;
  v370 = 0;
  v123 = HIBYTE(v122);
  v124 = SHIBYTE(v122);
  v125 = __s1.__r_.__value_.__l.__size_;
  v126 = HIBYTE(v122) & 0x7F;
  if (v124 >= 0)
    v127 = v126;
  else
    v127 = __s1.__r_.__value_.__l.__size_;
  if (v127)
  {
LABEL_310:
    v128 = v352;
    v129 = v353;
    if ((v123 & 0x80) == 0)
    {
      __dst = __s1;
      goto LABEL_322;
    }
    v132 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_321:
    sub_22E3BB2B4(&__dst, v132, v125);
LABEL_322:
    v372 = 260;
    __s2 = &__dst;
    sub_22E721364(a2, "-aux-triple", v128, v129, 6, (uint64_t *)&__s2);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v123 & 0x80) == 0)
        goto LABEL_328;
      goto LABEL_326;
    }
LABEL_323:
    if ((v123 & 0x80) == 0)
      goto LABEL_328;
LABEL_326:
    v132 = (void *)__s1.__r_.__value_.__r.__words[0];
    goto LABEL_327;
  }
  if ((v123 & 0x80) == 0)
  {
    if (!(_DWORD)v126)
      goto LABEL_323;
    v130 = &__s1;
    v131 = (void ***)&__s2;
    while (v130->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v131)
    {
      v130 = (std::string *)((char *)v130 + 1);
      v131 = (void ***)((char *)v131 + 1);
      if (!--v126)
        goto LABEL_323;
    }
    goto LABEL_310;
  }
  v132 = (void *)__s1.__r_.__value_.__r.__words[0];
  if (memcmp(__s1.__r_.__value_.__l.__data_, &__s2, __s1.__r_.__value_.__l.__size_))
  {
    v128 = v352;
    v129 = v353;
    goto LABEL_321;
  }
LABEL_327:
  operator delete(v132);
LABEL_328:
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v341.__r_.__value_.__l.__data_);
  v133 = *((_BYTE *)a1 + 8);
  if ((v133 & 1) != 0)
  {
    v134 = *(_DWORD *)(a2 + 8);
    if (v134 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v134 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v134) = "-code-completion-macros";
    ++*(_DWORD *)(a2 + 8);
    v133 = *((_BYTE *)a1 + 8);
    if ((v133 & 2) == 0)
    {
LABEL_332:
      if ((v133 & 4) != 0)
        goto LABEL_333;
      goto LABEL_343;
    }
  }
  else if ((a1[1] & 2) == 0)
  {
    goto LABEL_332;
  }
  v135 = *(_DWORD *)(a2 + 8);
  if (v135 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v135 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v135) = "-code-completion-patterns";
  ++*(_DWORD *)(a2 + 8);
  v133 = *((_BYTE *)a1 + 8);
  if ((v133 & 4) != 0)
  {
LABEL_333:
    if ((v133 & 8) != 0)
      goto LABEL_334;
    goto LABEL_346;
  }
LABEL_343:
  v136 = *(_DWORD *)(a2 + 8);
  if (v136 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v136 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v136) = "-no-code-completion-globals";
  ++*(_DWORD *)(a2 + 8);
  v133 = *((_BYTE *)a1 + 8);
  if ((v133 & 8) != 0)
  {
LABEL_334:
    if ((v133 & 0x10) == 0)
      goto LABEL_335;
    goto LABEL_349;
  }
LABEL_346:
  v137 = *(_DWORD *)(a2 + 8);
  if (v137 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v137 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v137) = "-no-code-completion-ns-level-decls";
  ++*(_DWORD *)(a2 + 8);
  v133 = *((_BYTE *)a1 + 8);
  if ((v133 & 0x10) == 0)
  {
LABEL_335:
    if ((v133 & 0x40) == 0)
      goto LABEL_355;
    goto LABEL_352;
  }
LABEL_349:
  v138 = *(_DWORD *)(a2 + 8);
  if (v138 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v138 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v138) = "-code-completion-brief-comments";
  ++*(_DWORD *)(a2 + 8);
  if ((a1[1] & 0x40) != 0)
  {
LABEL_352:
    v139 = *(_DWORD *)(a2 + 8);
    if (v139 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v139 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v139) = "-code-completion-with-fixits";
    ++*(_DWORD *)(a2 + 8);
  }
LABEL_355:
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v140 = *(_DWORD *)(a2 + 8);
    if (v140 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v140 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v140) = "-disable-free";
    ++*(_DWORD *)(a2 + 8);
  }
  memset(&v340, 0, sizeof(v340));
  sub_22E618148(&v340, a1[59], a1[60], 0xAAAAAAAAAAAAAAABLL * ((a1[60] - a1[59]) >> 3));
  v141 = v340.__r_.__value_.__r.__words[0];
  __dst = v340;
  memset(&v340, 0, sizeof(v340));
  v142 = __dst.__r_.__value_.__l.__size_;
  __s2 = 0;
  v369 = 0;
  v370 = 0;
  __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s2;
  sub_22E3B3CC8((void ***)&__s1);
  if (v142 != v141)
    sub_22E7214C8(a2, "-add-plugin", v352, v353, 6, (__int128 **)&__dst);
  __s2 = &__dst;
  sub_22E3B3CC8((void ***)&__s2);
  __s2 = &v340;
  sub_22E3B3CC8((void ***)&__s2);
  if (*((char *)a1 + 287) < 0)
    sub_22E3BB2B4(&v339, (void *)a1[33], a1[34]);
  else
    v339 = *(std::string *)((_BYTE *)a1 + 11);
  v143 = v339.__r_.__value_.__r.__words[2];
  __s1 = v339;
  memset(&v339, 0, sizeof(v339));
  __s2 = 0;
  v369 = 0;
  v370 = 0;
  v144 = HIBYTE(v143);
  v145 = SHIBYTE(v143);
  v146 = __s1.__r_.__value_.__l.__size_;
  v147 = HIBYTE(v143) & 0x7F;
  if (v145 >= 0)
    v148 = v147;
  else
    v148 = __s1.__r_.__value_.__l.__size_;
  if (v148)
  {
LABEL_368:
    v149 = v352;
    v150 = v353;
    if ((v144 & 0x80) == 0)
    {
      __dst = __s1;
      goto LABEL_380;
    }
    v153 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_379:
    sub_22E3BB2B4(&__dst, v153, v146);
LABEL_380:
    v372 = 260;
    __s2 = &__dst;
    sub_22E721364(a2, "-ast-dump-filter", v149, v150, 6, (uint64_t *)&__s2);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v144 & 0x80) == 0)
        goto LABEL_386;
      goto LABEL_384;
    }
LABEL_381:
    if ((v144 & 0x80) == 0)
      goto LABEL_386;
LABEL_384:
    v153 = (void *)__s1.__r_.__value_.__r.__words[0];
    goto LABEL_385;
  }
  if ((v144 & 0x80) == 0)
  {
    if (!(_DWORD)v147)
      goto LABEL_381;
    v151 = &__s1;
    v152 = (void ***)&__s2;
    while (v151->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v152)
    {
      v151 = (std::string *)((char *)v151 + 1);
      v152 = (void ***)((char *)v152 + 1);
      if (!--v147)
        goto LABEL_381;
    }
    goto LABEL_368;
  }
  v153 = (void *)__s1.__r_.__value_.__r.__words[0];
  if (memcmp(__s1.__r_.__value_.__l.__data_, &__s2, __s1.__r_.__value_.__l.__size_))
  {
    v149 = v352;
    v150 = v353;
    goto LABEL_379;
  }
LABEL_385:
  operator delete(v153);
LABEL_386:
  if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v339.__r_.__value_.__l.__data_);
  if ((*((_BYTE *)a1 + 1) & 0x20) == 0)
  {
    v154 = *(_DWORD *)(a2 + 8);
    if (v154 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v154 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v154) = "-fno-modules-global-index";
    ++*(_DWORD *)(a2 + 8);
  }
  memset(&v338, 0, sizeof(v338));
  sub_22E618148(&v338, a1[74], a1[75], 0xAAAAAAAAAAAAAAABLL * ((a1[75] - a1[74]) >> 3));
  v155 = v338.__r_.__value_.__r.__words[0];
  __dst = v338;
  memset(&v338, 0, sizeof(v338));
  v156 = __dst.__r_.__value_.__l.__size_;
  __s2 = 0;
  v369 = 0;
  v370 = 0;
  __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s2;
  sub_22E3B3CC8((void ***)&__s1);
  if (v156 != v155)
    sub_22E7214C8(a2, "-fmodules-embed-file=", v352, v353, 4, (__int128 **)&__dst);
  __s2 = &__dst;
  sub_22E3B3CC8((void ***)&__s2);
  __s2 = &v338;
  sub_22E3B3CC8((void ***)&__s2);
  v157 = *a1;
  if ((*a1 & 0x200000) != 0)
  {
    v158 = *(_DWORD *)(a2 + 8);
    if (v158 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v158 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v158) = "-fmodules-embed-all-files";
    ++*(_DWORD *)(a2 + 8);
    v157 = *a1;
    if ((*a1 & 0x100000) != 0)
    {
LABEL_396:
      if ((v157 & 0x40000) == 0)
        goto LABEL_397;
      goto LABEL_405;
    }
  }
  else if ((v157 & 0x100000) != 0)
  {
    goto LABEL_396;
  }
  v159 = *(_DWORD *)(a2 + 8);
  if (v159 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v159 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v159) = "-fno-implicit-modules-use-lock";
  ++*(_DWORD *)(a2 + 8);
  v157 = *a1;
  if ((*a1 & 0x40000) == 0)
  {
LABEL_397:
    if ((v157 & 0x20000) == 0)
      goto LABEL_411;
    goto LABEL_408;
  }
LABEL_405:
  v160 = *(_DWORD *)(a2 + 8);
  if (v160 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v160 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v160) = "-ast-dump-decl-types";
  ++*(_DWORD *)(a2 + 8);
  if ((*a1 & 0x20000) != 0)
  {
LABEL_408:
    v161 = *(_DWORD *)(a2 + 8);
    if (v161 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v161 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v161) = "-ast-dump-lookups";
    ++*(_DWORD *)(a2 + 8);
  }
LABEL_411:
  if (*((char *)a1 + 71) < 0)
    sub_22E3BB2B4(&v337, (void *)a1[6], a1[7]);
  else
    v337 = *(std::string *)((_BYTE *)a1 + 2);
  v162 = v337.__r_.__value_.__r.__words[2];
  __s1 = v337;
  memset(&v337, 0, sizeof(v337));
  __s2 = 0;
  v369 = 0;
  v370 = 0;
  v163 = HIBYTE(v162);
  v164 = SHIBYTE(v162);
  v165 = __s1.__r_.__value_.__l.__size_;
  v166 = HIBYTE(v162) & 0x7F;
  if (v164 >= 0)
    v167 = v166;
  else
    v167 = __s1.__r_.__value_.__l.__size_;
  if (v167)
  {
LABEL_418:
    v168 = v352;
    v169 = v353;
    if ((v163 & 0x80) == 0)
    {
      __dst = __s1;
      goto LABEL_430;
    }
    v172 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_429:
    sub_22E3BB2B4(&__dst, v172, v165);
LABEL_430:
    v372 = 260;
    __s2 = &__dst;
    sub_22E721364(a2, "-mt-migrate-directory", v168, v169, 6, (uint64_t *)&__s2);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v163 & 0x80) == 0)
        goto LABEL_436;
      goto LABEL_434;
    }
LABEL_431:
    if ((v163 & 0x80) == 0)
      goto LABEL_436;
LABEL_434:
    v172 = (void *)__s1.__r_.__value_.__r.__words[0];
    goto LABEL_435;
  }
  if ((v163 & 0x80) == 0)
  {
    if (!(_DWORD)v166)
      goto LABEL_431;
    v170 = &__s1;
    v171 = (void ***)&__s2;
    while (v170->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v171)
    {
      v170 = (std::string *)((char *)v170 + 1);
      v171 = (void ***)((char *)v171 + 1);
      if (!--v166)
        goto LABEL_431;
    }
    goto LABEL_418;
  }
  v172 = (void *)__s1.__r_.__value_.__r.__words[0];
  if (memcmp(__s1.__r_.__value_.__l.__data_, &__s2, __s1.__r_.__value_.__l.__size_))
  {
    v168 = v352;
    v169 = v353;
    goto LABEL_429;
  }
LABEL_435:
  operator delete(v172);
LABEL_436:
  if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v337.__r_.__value_.__l.__data_);
  v173 = *((_DWORD *)a1 + 4);
  if (v173)
    sub_22E7216A8(a2, "-arcmt-action=", v352, v353, 4, 0x28u, v173);
  if ((*(_BYTE *)a1 & 8) != 0)
  {
    v174 = *(_DWORD *)(a2 + 8);
    if (v174 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v174 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v174) = "-print-stats";
    ++*(_DWORD *)(a2 + 8);
  }
  if (*((char *)a1 + 823) < 0)
    sub_22E3BB2B4(&v336, (void *)a1[100], a1[101]);
  else
    v336 = *(std::string *)(a1 + 100);
  v175 = v336.__r_.__value_.__r.__words[2];
  __s1 = v336;
  memset(&v336, 0, sizeof(v336));
  __s2 = 0;
  v369 = 0;
  v370 = 0;
  v176 = HIBYTE(v175);
  v177 = SHIBYTE(v175);
  v178 = __s1.__r_.__value_.__l.__size_;
  v179 = HIBYTE(v175) & 0x7F;
  if (v177 >= 0)
    v180 = v179;
  else
    v180 = __s1.__r_.__value_.__l.__size_;
  if (v180)
  {
LABEL_451:
    v181 = v352;
    v182 = v353;
    if ((v176 & 0x80) == 0)
    {
      __dst = __s1;
      goto LABEL_463;
    }
    v185 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_462:
    sub_22E3BB2B4(&__dst, v185, v178);
LABEL_463:
    v372 = 260;
    __s2 = &__dst;
    sub_22E721364(a2, "-stats-file=", v181, v182, 4, (uint64_t *)&__s2);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v176 & 0x80) == 0)
        goto LABEL_469;
      goto LABEL_467;
    }
LABEL_464:
    if ((v176 & 0x80) == 0)
      goto LABEL_469;
LABEL_467:
    v185 = (void *)__s1.__r_.__value_.__r.__words[0];
    goto LABEL_468;
  }
  if ((v176 & 0x80) == 0)
  {
    if (!(_DWORD)v179)
      goto LABEL_464;
    v183 = &__s1;
    v184 = (void ***)&__s2;
    while (v183->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v184)
    {
      v183 = (std::string *)((char *)v183 + 1);
      v184 = (void ***)((char *)v184 + 1);
      if (!--v179)
        goto LABEL_464;
    }
    goto LABEL_451;
  }
  v185 = (void *)__s1.__r_.__value_.__r.__words[0];
  if (memcmp(__s1.__r_.__value_.__l.__data_, &__s2, __s1.__r_.__value_.__l.__size_))
  {
    v181 = v352;
    v182 = v353;
    goto LABEL_462;
  }
LABEL_468:
  operator delete(v185);
LABEL_469:
  if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v336.__r_.__value_.__l.__data_);
  v186 = *a1;
  if ((*a1 & 0x80) != 0)
  {
    v187 = *(_DWORD *)(a2 + 8);
    if (v187 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v187 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v187) = "-fix-what-you-can";
    ++*(_DWORD *)(a2 + 8);
    v186 = *a1;
    if ((*a1 & 0x100) == 0)
    {
LABEL_473:
      if ((v186 & 0x200) == 0)
        goto LABEL_474;
      goto LABEL_482;
    }
  }
  else if ((v186 & 0x100) == 0)
  {
    goto LABEL_473;
  }
  v188 = *(_DWORD *)(a2 + 8);
  if (v188 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v188 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v188) = "-fix-only-warnings";
  ++*(_DWORD *)(a2 + 8);
  v186 = *a1;
  if ((*a1 & 0x200) == 0)
  {
LABEL_474:
    if ((v186 & 0x400) == 0)
      goto LABEL_488;
    goto LABEL_485;
  }
LABEL_482:
  v189 = *(_DWORD *)(a2 + 8);
  if (v189 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v189 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v189) = "-fixit-recompile";
  ++*(_DWORD *)(a2 + 8);
  if ((*a1 & 0x400) != 0)
  {
LABEL_485:
    v190 = *(_DWORD *)(a2 + 8);
    if (v190 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v190 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v190) = "-fixit-to-temporary";
    ++*(_DWORD *)(a2 + 8);
  }
LABEL_488:
  if (*((char *)a1 + 711) < 0)
    sub_22E3BB2B4(&v335, (void *)a1[86], a1[87]);
  else
    v335 = *(std::string *)(a1 + 86);
  v191 = v335.__r_.__value_.__r.__words[2];
  __s1 = v335;
  memset(&v335, 0, sizeof(v335));
  __s2 = 0;
  v369 = 0;
  v370 = 0;
  v192 = HIBYTE(v191);
  v193 = SHIBYTE(v191);
  v194 = __s1.__r_.__value_.__l.__size_;
  v195 = HIBYTE(v191) & 0x7F;
  if (v193 >= 0)
    v196 = v195;
  else
    v196 = __s1.__r_.__value_.__l.__size_;
  if (v196)
  {
LABEL_495:
    v197 = v352;
    v198 = v353;
    if ((v192 & 0x80) == 0)
    {
      __dst = __s1;
      goto LABEL_507;
    }
    v201 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_506:
    sub_22E3BB2B4(&__dst, v201, v194);
LABEL_507:
    v372 = 260;
    __s2 = &__dst;
    sub_22E721364(a2, "-foverride-record-layout=", v197, v198, 4, (uint64_t *)&__s2);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v192 & 0x80) == 0)
        goto LABEL_513;
      goto LABEL_511;
    }
LABEL_508:
    if ((v192 & 0x80) == 0)
      goto LABEL_513;
LABEL_511:
    v201 = (void *)__s1.__r_.__value_.__r.__words[0];
    goto LABEL_512;
  }
  if ((v192 & 0x80) == 0)
  {
    if (!(_DWORD)v195)
      goto LABEL_508;
    v199 = &__s1;
    v200 = (void ***)&__s2;
    while (v199->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v200)
    {
      v199 = (std::string *)((char *)v199 + 1);
      v200 = (void ***)((char *)v200 + 1);
      if (!--v195)
        goto LABEL_508;
    }
    goto LABEL_495;
  }
  v201 = (void *)__s1.__r_.__value_.__r.__words[0];
  if (memcmp(__s1.__r_.__value_.__l.__data_, &__s2, __s1.__r_.__value_.__l.__size_))
  {
    v197 = v352;
    v198 = v353;
    goto LABEL_506;
  }
LABEL_512:
  operator delete(v201);
LABEL_513:
  if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v335.__r_.__value_.__l.__data_);
  v202 = *a1;
  if ((*a1 & 0x400000) != 0)
  {
    if ((v202 & 0x40) == 0)
      goto LABEL_517;
  }
  else
  {
    v203 = *(_DWORD *)(a2 + 8);
    if (v203 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v203 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v203) = "-fno-pch-timestamp";
    ++*(_DWORD *)(a2 + 8);
    v202 = *a1;
    if ((*a1 & 0x40) == 0)
    {
LABEL_517:
      if ((v202 & 0x80000000) == 0)
        goto LABEL_528;
      goto LABEL_525;
    }
  }
  v204 = *(_DWORD *)(a2 + 8);
  if (v204 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v204 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v204) = "-version";
  ++*(_DWORD *)(a2 + 8);
  v202 = *a1;
  if ((*a1 & 0x80000000) != 0)
  {
LABEL_525:
    v205 = *(_DWORD *)(a2 + 8);
    if (v205 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v205 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v205) = "-fallow-pcm-with-compiler-errors";
    ++*(_DWORD *)(a2 + 8);
    v202 = *a1;
  }
LABEL_528:
  if ((v202 & 0x100000000) == 0)
  {
    v206 = *(_DWORD *)(a2 + 8);
    if (v206 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v206 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v206) = "-fno-modules-share-filemanager";
    ++*(_DWORD *)(a2 + 8);
  }
  memset(&v334, 0, sizeof(v334));
  sub_22E618148(&v334, a1[50], a1[51], 0xAAAAAAAAAAAAAAABLL * ((a1[51] - a1[50]) >> 3));
  v207 = v334.__r_.__value_.__r.__words[0];
  __dst = v334;
  v208 = v334.__r_.__value_.__l.__size_;
  memset(&v334, 0, sizeof(v334));
  v209 = v208;
  __s2 = 0;
  v369 = 0;
  v370 = 0;
  __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s2;
  sub_22E3B3CC8((void ***)&__s1);
  if (v209 != v207)
    sub_22E7214C8(a2, "-fdepscan-prefix-map=", v352, v353, 4, (__int128 **)&__dst);
  __s2 = &__dst;
  sub_22E3B3CC8((void ***)&__s2);
  __s2 = &v334;
  sub_22E3B3CC8((void ***)&__s2);
  if (*((char *)a1 + 191) < 0)
    sub_22E3BB2B4(&v333, (void *)a1[21], a1[22]);
  else
    v333 = *(std::string *)((_BYTE *)a1 + 7);
  v210 = v333.__r_.__value_.__r.__words[2];
  __s1 = v333;
  memset(&v333, 0, sizeof(v333));
  __s2 = 0;
  v369 = 0;
  v370 = 0;
  v211 = HIBYTE(v210);
  v212 = SHIBYTE(v210);
  v213 = __s1.__r_.__value_.__l.__size_;
  v214 = HIBYTE(v210) & 0x7F;
  if (v212 >= 0)
    v215 = v214;
  else
    v215 = __s1.__r_.__value_.__l.__size_;
  if (v215)
  {
LABEL_541:
    v216 = v352;
    v217 = v353;
    if ((v211 & 0x80) == 0)
    {
      __dst = __s1;
      goto LABEL_553;
    }
    v220 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_552:
    sub_22E3BB2B4(&__dst, v220, v213);
LABEL_553:
    v372 = 260;
    __s2 = &__dst;
    sub_22E721364(a2, "-fcas-include-tree", v216, v217, 6, (uint64_t *)&__s2);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v211 & 0x80) == 0)
        goto LABEL_559;
      goto LABEL_557;
    }
LABEL_554:
    if ((v211 & 0x80) == 0)
      goto LABEL_559;
LABEL_557:
    v220 = (void *)__s1.__r_.__value_.__r.__words[0];
    goto LABEL_558;
  }
  if ((v211 & 0x80) == 0)
  {
    if (!(_DWORD)v214)
      goto LABEL_554;
    v218 = &__s1;
    v219 = (void ***)&__s2;
    while (v218->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v219)
    {
      v218 = (std::string *)((char *)v218 + 1);
      v219 = (void ***)((char *)v219 + 1);
      if (!--v214)
        goto LABEL_554;
    }
    goto LABEL_541;
  }
  v220 = (void *)__s1.__r_.__value_.__r.__words[0];
  if (memcmp(__s1.__r_.__value_.__l.__data_, &__s2, __s1.__r_.__value_.__l.__size_))
  {
    v216 = v352;
    v217 = v353;
    goto LABEL_552;
  }
LABEL_558:
  operator delete(v220);
LABEL_559:
  if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v333.__r_.__value_.__l.__data_);
  v221 = *a1;
  if ((*a1 & 0x20000000) != 0)
  {
    v222 = *(_DWORD *)(a2 + 8);
    if (v222 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v222 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v222) = "-fcache-compile-job";
    ++*(_DWORD *)(a2 + 8);
    v221 = *a1;
  }
  if ((v221 & 0x40000000) != 0)
  {
    v223 = *(_DWORD *)(a2 + 8);
    if (v223 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v223 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v223) = "-fcache-disable-replay";
    ++*(_DWORD *)(a2 + 8);
  }
  if (*((char *)a1 + 399) < 0)
    sub_22E3BB2B4(&v332, (void *)a1[47], a1[48]);
  else
    v332 = *(std::string *)(a1 + 47);
  v224 = v332.__r_.__value_.__r.__words[2];
  __s1 = v332;
  memset(&v332, 0, sizeof(v332));
  __s2 = 0;
  v369 = 0;
  v370 = 0;
  v225 = HIBYTE(v224);
  v226 = SHIBYTE(v224);
  v227 = __s1.__r_.__value_.__l.__size_;
  v228 = HIBYTE(v224) & 0x7F;
  if (v226 >= 0)
    v229 = v228;
  else
    v229 = __s1.__r_.__value_.__l.__size_;
  if (!v229)
  {
    if ((v225 & 0x80) != 0)
    {
      v234 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (!memcmp(__s1.__r_.__value_.__l.__data_, &__s2, __s1.__r_.__value_.__l.__size_))
      {
LABEL_593:
        operator delete(v234);
        goto LABEL_594;
      }
      v230 = v352;
      v231 = v353;
      goto LABEL_587;
    }
    if (!(_DWORD)v228)
      goto LABEL_589;
    v232 = &__s1;
    v233 = (void ***)&__s2;
    while (v232->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v233)
    {
      v232 = (std::string *)((char *)v232 + 1);
      v233 = (void ***)((char *)v233 + 1);
      if (!--v228)
        goto LABEL_589;
    }
  }
  v230 = v352;
  v231 = v353;
  if ((v225 & 0x80) == 0)
  {
    __dst = __s1;
    goto LABEL_588;
  }
  v234 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_587:
  sub_22E3BB2B4(&__dst, v234, v227);
LABEL_588:
  v372 = 260;
  __s2 = &__dst;
  sub_22E721364(a2, "-fcompilation-caching-service-path", v230, v231, 6, (uint64_t *)&__s2);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_589:
    if ((v225 & 0x80) != 0)
      goto LABEL_592;
    goto LABEL_594;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if ((v225 & 0x80) != 0)
  {
LABEL_592:
    v234 = (void *)__s1.__r_.__value_.__r.__words[0];
    goto LABEL_593;
  }
LABEL_594:
  if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v332.__r_.__value_.__l.__data_);
  v235 = 0;
  v236 = *((_DWORD *)a1 + 80);
  while (dword_22F45DC0C[v235] != v236)
  {
    v235 += 2;
    if (v235 == 84)
    {
      v237 = 0;
      goto LABEL_601;
    }
  }
  v237 = dword_22F45DC0C[v235 + 1] | 0x100000000;
LABEL_601:
  v331 = v237;
  v238 = operator new(0x20uLL);
  *v238 = &off_24FA6FF00;
  v238[1] = a2;
  v238[2] = &v331;
  v238[3] = &v352;
  v367 = v238;
  if ((v237 & 0x100000000) == 0)
  {
    v239 = (void ***)operator new(0x20uLL);
    *v239 = (void **)&off_24FA6FF48;
    v239[1] = (void **)a2;
    v239[2] = (void **)a1;
    v239[3] = (void **)&v352;
    v371 = v239;
    sub_22E63BEA4(&__s2, v366);
    v240 = v371;
    if (v371 == (void ***)&__s2)
    {
      p_size = (void **)&__s2[1].__r_.__value_.__l.__size_;
      v240 = (void ***)&__s2;
    }
    else
    {
      if (!v371)
      {
LABEL_607:
        v236 = *((_DWORD *)a1 + 80);
        goto LABEL_608;
      }
      p_size = *v371 + 5;
    }
    ((void (*)(void ***))*p_size)(v240);
    goto LABEL_607;
  }
LABEL_608:
  if (v236 == 1)
  {
    v242 = (void ***)operator new(0x20uLL);
    *v242 = (void **)&off_24FA6FF90;
    v242[1] = (void **)a1;
    v242[2] = (void **)a2;
    v242[3] = (void **)&v352;
    v371 = v242;
    sub_22E63BEA4(&__s2, v366);
    v243 = v371;
    if (v371 == (void ***)&__s2)
    {
      v244 = (void **)&__s2[1].__r_.__value_.__l.__size_;
      v243 = (void ***)&__s2;
    }
    else
    {
      if (!v371)
      {
LABEL_614:
        v236 = *((_DWORD *)a1 + 80);
        goto LABEL_615;
      }
      v244 = *v371 + 5;
    }
    ((void (*)(void ***))*v244)(v243);
    goto LABEL_614;
  }
LABEL_615:
  if (v236 == 15)
  {
    v245 = *((_BYTE *)a1 + 263);
    v246 = v245;
    v247 = v245 & 0x7F;
    if (v246 < 0)
      v247 = a1[31];
    if (v247)
    {
      v248 = (void ***)operator new(0x20uLL);
      *v248 = (void **)&off_24FA6FFD8;
      v248[1] = (void **)a2;
      v248[2] = (void **)a1;
      v248[3] = (void **)&v352;
      v371 = v248;
      sub_22E63BEA4(&__s2, v366);
      if (v371 == (void ***)&__s2)
      {
        v249 = (void (**)(void))&__s2[1].__r_.__value_.__l.__size_;
      }
      else
      {
        if (!v371)
          goto LABEL_624;
        v249 = (void (**)(void))(*v371 + 5);
      }
      (*v249)();
    }
  }
LABEL_624:
  v326 = a1;
  if (!v367)
    sub_22E4A06C4();
  v250 = a2;
  (*(void (**)(_QWORD *))(*v367 + 48))(v367);
  v251 = (uint64_t *)v326[56];
  if (v251 != v326 + 57)
  {
    do
    {
      sub_22E80AA50();
      Option = (const char ***)llvm::opt::OptTable::getOption();
      v253 = Option;
      v254 = (std::string::size_type)**Option;
      if (v254)
        v255 = strlen(**Option);
      else
        v255 = 0;
      v256 = (std::string::size_type)v253[1];
      if (v256)
        v257 = strlen((const char *)v253[1]);
      else
        v257 = 0;
      __dst.__r_.__value_.__r.__words[0] = v254;
      __dst.__r_.__value_.__l.__size_ = v255;
      __dst.__r_.__value_.__r.__words[2] = v256;
      v364 = v257;
      v365 = 1285;
      __s2 = &__dst;
      v370 = (const char *)(v251 + 4);
      v372 = 1026;
      v258 = v352(v353, (__int128 *)&__s2);
      v259 = (__int128 *)v251[7];
      v260 = (__int128 *)v251[8];
      if (v259 != v260)
      {
        v261 = (_BYTE *)v258;
        do
        {
          v262 = v352;
          v263 = v353;
          v264 = *((_BYTE *)v253 + 36);
          if (*((char *)v259 + 23) < 0)
          {
            sub_22E3BB2B4(v329, *(void **)v259, *((_QWORD *)v259 + 1));
          }
          else
          {
            v265 = *v259;
            v330 = *((_QWORD *)v259 + 2);
            *(_OWORD *)v329 = v265;
          }
          v372 = 260;
          __s2 = (std::string *)v329;
          sub_22E721364(v250, v261, v262, v263, v264, (uint64_t *)&__s2);
          if (SHIBYTE(v330) < 0)
            operator delete(v329[0]);
          v259 = (__int128 *)((char *)v259 + 24);
        }
        while (v259 != v260);
      }
      v266 = (uint64_t *)v251[1];
      if (v266)
      {
        do
        {
          v267 = v266;
          v266 = (uint64_t *)*v266;
        }
        while (v266);
      }
      else
      {
        do
        {
          v267 = (uint64_t *)v251[2];
          v279 = *v267 == (_QWORD)v251;
          v251 = v267;
        }
        while (!v279);
      }
      v251 = v267;
    }
    while (v267 != v326 + 57);
  }
  v268 = (uint64_t *)v326[65];
  for (i = (uint64_t *)v326[66]; v268 != i; v268 += 2)
  {
    v270 = *v268;
    if (*v268)
    {
      if ((*(unsigned int (**)(uint64_t, void *))(*(_QWORD *)v270 + 24))(*v268, &unk_255E04EA8))
      {
        sub_22E747C40(v270, &__dst);
        v372 = 260;
        __s2 = &__dst;
        sub_22E6E094C(v250, 1748, (uint64_t)&__s2, v352, v353);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
    }
  }
  v271 = v326;
  v272 = *((_BYTE *)v326 + 311);
  v273 = v326[37];
  if (v272 >= 0)
    v274 = v272 & 0x7F;
  else
    v274 = v326[37];
  if (v274)
  {
    v275 = (void **)(v326 + 36);
    if (v274 == 7
      && (v272 >= 0 ? (v276 = *((unsigned __int8 *)v326 + 311)) : (v276 = v326[37]),
          v272 >= 0 ? (v277 = v326 + 36) : (v277 = *v275),
          v276 >= 7 ? (v278 = 7) : (v278 = v276),
          !memcmp(v277, "<stdin>", v278) ? (v279 = v276 == 7) : (v279 = 0),
          v279))
    {
      HIBYTE(v355) = 1;
      LOWORD(v354) = 45;
    }
    else if (v272 < 0)
    {
      sub_22E3BB2B4(&v354, *v275, v273);
    }
    else
    {
      v354 = *(_OWORD *)v275;
      v355 = v326[38];
    }
    v356[0] = &v354;
    v357 = ":";
    v359 = 772;
    v280 = *((unsigned int *)v326 + 78);
    __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)v356;
    __s1.__r_.__value_.__r.__words[2] = v280;
    v362 = 2050;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s1;
    __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)":";
    v365 = 770;
    v281 = (const char *)*((unsigned int *)v326 + 79);
    __s2 = &__dst;
    v370 = v281;
    v372 = 2050;
    llvm::Twine::str((llvm::Twine *)&__s2);
    if (SHIBYTE(v355) < 0)
      operator delete((void *)v354);
    v372 = 260;
    __s2 = (std::string *)&v327;
    sub_22E6E094C(v250, 210, (uint64_t)&__s2, v352, v353);
    if (v328 < 0)
      operator delete(v327);
    v271 = v326;
  }
  v282 = (void **)v271[62];
  for (j = (void **)v271[63]; v282 != j; v282 += 3)
  {
    v372 = 260;
    __s2 = (std::string *)v282;
    sub_22E6E094C(v250, 2071, (uint64_t)&__s2, v352, v353);
  }
  v284 = (void **)v326[71];
  for (k = (void **)v326[72]; v284 != k; v284 += 3)
  {
    v372 = 260;
    __s2 = (std::string *)v284;
    sub_22E6E094C(v250, 874, (uint64_t)&__s2, v352, v353);
  }
  v286 = (const void **)v326[80];
  for (m = (const void **)v326[81]; v286 != m; v286 += 6)
  {
    v288 = *((_BYTE *)v286 + 23);
    v289 = v288;
    v290 = v288 & 0x7F;
    if (v289 >= 0)
      v291 = v290;
    else
      v291 = (size_t)v286[1];
    sub_22E3B8BF4((uint64_t)&__s1, v291 + 1);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v292 = &__s1;
    else
      v292 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    if (v291)
    {
      if (*((char *)v286 + 23) >= 0)
        v293 = v286;
      else
        v293 = *v286;
      memmove(v292, v293, v291);
    }
    *(_WORD *)((char *)&v292->__r_.__value_.__l.__data_ + v291) = 61;
    v294 = *((_BYTE *)v286 + 47);
    if (v294 >= 0)
      v295 = (const std::string::value_type *)(v286 + 3);
    else
      v295 = (const std::string::value_type *)v286[3];
    if (v294 >= 0)
      v296 = v294 & 0x7F;
    else
      v296 = (std::string::size_type)v286[4];
    v297 = std::string::append(&__s1, v295, v296);
    v298 = v297->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v297->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v298;
    v297->__r_.__value_.__l.__size_ = 0;
    v297->__r_.__value_.__r.__words[2] = 0;
    v297->__r_.__value_.__r.__words[0] = 0;
    v372 = 260;
    __s2 = &__dst;
    sub_22E6E094C(v250, 871, (uint64_t)&__s2, v352, v353);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s1.__r_.__value_.__l.__data_);
  }
  if (*((_BYTE *)v326 + 760))
  {
    v372 = 260;
    __s2 = (std::string *)(v326 + 92);
    sub_22E6E094C(v250, 144, (uint64_t)&__s2, v352, v353);
  }
  if (*((_BYTE *)v326 + 792))
  {
    v299 = (void **)v326[96];
    for (n = (void **)v326[97]; v299 != n; v299 += 3)
    {
      v372 = 260;
      __s2 = (std::string *)v299;
      sub_22E6E094C(v250, 145, (uint64_t)&__s2, v352, v353);
    }
  }
  v301 = *((unsigned __int8 *)v326 + 145);
  if ((v301 & 8) != 0)
    v302 = 11;
  else
    v302 = 0;
  if ((v301 & 7) == 1)
    v303 = 11;
  else
    v303 = 0;
  v304 = ((v301 >> 4) & 7) - 1;
  if (v304 > 2)
  {
    v306 = 0;
    v305 = "";
  }
  else
  {
    v305 = off_24FA70240[v304];
    v306 = qword_22F45DE90[(int)v304];
  }
  v307 = 0;
  v308 = 0;
  v309 = 7;
  if (!a5)
    v309 = 0;
  v310 = *((char *)v326 + 144);
  if (v310 <= 0xD)
  {
    v307 = off_24FA70258[v310];
    v308 = qword_22F45DEA8[v310];
  }
  v356[0] = v307;
  v356[1] = v308;
  v357 = v305;
  v358 = v306;
  v359 = 1285;
  v311 = "-header";
  if (!a5)
    v311 = "";
  __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)v356;
  __s1.__r_.__value_.__r.__words[2] = (std::string::size_type)v311;
  v361 = v309;
  v362 = 1282;
  if ((v301 & 7) == 1)
    v312 = "-module-map";
  else
    v312 = "";
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s1;
  __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v312;
  v364 = v303;
  v365 = 1282;
  if ((v301 & 8) != 0)
    v313 = "-cpp-output";
  else
    v313 = "";
  __s2 = &__dst;
  v370 = v313;
  v371 = (void ***)v302;
  v372 = 1282;
  sub_22E6E094C(v250, 3150, (uint64_t)&__s2, v352, v353);
  v314 = *((_DWORD *)v326 + 40);
  if (v314)
  {
    v315 = v326[19];
    v316 = 88 * v314;
    do
    {
      if (!*(_BYTE *)(v315 + 72))
      {
        v317 = *(_BYTE *)(v315 + 23);
        v318 = v317 < 0;
        v319 = *(void ***)v315;
        if (v317 >= 0)
          v319 = (void **)v315;
        v320 = v317 & 0x7F;
        if (v318)
          v320 = *(_QWORD *)(v315 + 8);
        v372 = 261;
        __s2 = (std::string *)v319;
        v369 = v320;
        v321 = v352(v353, (__int128 *)&__s2);
        v322 = *(unsigned int *)(v250 + 8);
        if (v322 >= *(unsigned int *)(v250 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v322 = *(unsigned int *)(v250 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v250 + 8 * v322) = v321;
        ++*(_DWORD *)(v250 + 8);
      }
      v315 += 88;
      v316 -= 88;
    }
    while (v316);
  }
  result = (uint64_t)v367;
  if (v367 == v366)
  {
    v324 = (uint64_t (**)(void))(v366[0] + 32);
  }
  else
  {
    if (!v367)
      return result;
    v324 = (uint64_t (**)(void))(*v367 + 40);
  }
  return (*v324)();
}

void sub_22E71E808(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t j;
  uint64_t v6;
  uint64_t k;

  v2 = *(_QWORD *)(a1 + 24);
  for (i = *(_QWORD *)(a1 + 32); i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  *(_QWORD *)(a1 + 32) = v2;
  v4 = *(_QWORD *)(a1 + 48);
  for (j = *(_QWORD *)(a1 + 56); j != v4; j -= 24)
  {
    if (*(char *)(j - 1) < 0)
      operator delete(*(void **)(j - 24));
  }
  *(_QWORD *)(a1 + 56) = v4;
  v6 = *(_QWORD *)(a1 + 128);
  for (k = *(_QWORD *)(a1 + 136); k != v6; k -= 24)
  {
    if (*(char *)(k - 1) < 0)
      operator delete(*(void **)(k - 24));
  }
  *(_QWORD *)(a1 + 136) = v6;
  *(_BYTE *)(a1 + 158) = 0;
  if (*(char *)(a1 + 127) < 0)
  {
    **(_BYTE **)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 0;
    *(_BYTE *)(a1 + 127) = 0;
  }
  *(_WORD *)(a1 + 194) = 256;
  *(_WORD *)(a1 + 248) = 1;
  *(_DWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 188) = 0;
}

uint64_t sub_22E71E8E0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  char *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  BOOL v29;
  void *v30;
  size_t v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  BOOL v37;
  void *v38;
  size_t v39;
  size_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  BOOL v69;
  void *v70;
  size_t v71;
  size_t v72;
  unsigned int *v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  uint64_t v80;
  __int16 v81;
  __int16 v82;
  char *v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  char v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v11 = result;
    v12 = result + 24 * a2;
    do
    {
      v82 = 260;
      v78 = (unsigned __int8 *)v11;
      llvm::MemoryBuffer::getFile();
      if ((v87 & 1) != 0)
      {
        *(_QWORD *)(a5 + 312) = 0x32300000000;
        if (*(char *)(a5 + 311) < 0)
        {
          **(_BYTE **)(a5 + 288) = 0;
          *(_QWORD *)(a5 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(a5 + 288) = 0;
          *(_BYTE *)(a5 + 311) = 0;
        }
        v78 = (unsigned __int8 *)(a5 + 320);
        v79 = 0;
        v80 = a5;
        v81 = 1;
        *(_BYTE *)(a5 + 320) = 0;
        *(_DWORD *)(a5 + 664) = 0;
        v25 = *(unsigned int *)(a5 + 776);
        if ((_DWORD)v25)
        {
          v26 = *(_QWORD *)(a5 + 768);
          v27 = 56 * v25;
          do
          {
            if (*(char *)(v26 + v27 - 9) < 0)
              operator delete(*(void **)(v26 + v27 - 32));
            v27 -= 56;
          }
          while (v27);
        }
        *(_DWORD *)(a5 + 776) = 0;
        v28 = *(_BYTE *)(v11 + 23);
        v29 = v28 < 0;
        if (v28 >= 0)
          v30 = (void *)v11;
        else
          v30 = *(void **)v11;
        v31 = v28 & 0x7F;
        if (v29)
          v32 = *(_QWORD *)(v11 + 8);
        else
          v32 = v31;
        sub_22E3B89A8(&v78, v30, v32);
        result = sub_22E3BB0B8((uint64_t)&v78);
        goto LABEL_44;
      }
      v77 = (unsigned int *)*a6;
      if (*a6)
      {
        v13 = (unsigned int *)(*a6 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      llvm::vfs::StatCacheFileSystem::create();
      if (v77)
      {
        v15 = v77 + 2;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
          (*(void (**)(unsigned int *))(*(_QWORD *)v77 + 8))(v77);
      }
      v18 = (char *)v84;
      v84 = 0;
      if ((v85 & 1) != 0)
      {
        if (v18)
        {
          v83 = v18;
          sub_22E6C5940(&v83, (char **)&v78);
          if (v83)
            (*(void (**)(char *))(*(_QWORD *)v83 + 8))(v83);
          *(_QWORD *)(a5 + 312) = 0x31E00000000;
          if (*(char *)(a5 + 311) < 0)
          {
            **(_BYTE **)(a5 + 288) = 0;
            *(_QWORD *)(a5 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(a5 + 288) = 0;
            *(_BYTE *)(a5 + 311) = 0;
          }
          v78 = (unsigned __int8 *)(a5 + 320);
          v79 = 0;
          v80 = a5;
          v81 = 1;
          *(_BYTE *)(a5 + 320) = 0;
          *(_DWORD *)(a5 + 664) = 0;
          v33 = *(unsigned int *)(a5 + 776);
          if ((_DWORD)v33)
          {
            v34 = *(_QWORD *)(a5 + 768);
            v35 = 56 * v33;
            do
            {
              if (*(char *)(v34 + v35 - 9) < 0)
                operator delete(*(void **)(v34 + v35 - 32));
              v35 -= 56;
            }
            while (v35);
          }
          *(_DWORD *)(a5 + 776) = 0;
          v36 = *(_BYTE *)(v11 + 23);
          v37 = v36 < 0;
          if (v36 >= 0)
            v38 = (void *)v11;
          else
            v38 = *(void **)v11;
          v39 = v36 & 0x7F;
          if (v37)
            v40 = *(_QWORD *)(v11 + 8);
          else
            v40 = v39;
          sub_22E3B89A8(&v78, v38, v40);
          sub_22E3BB0B8((uint64_t)&v78);
          goto LABEL_23;
        }
        result = *a6;
        *a6 = 0;
        if (!result)
          goto LABEL_44;
      }
      else
      {
        result = *a6;
        *a6 = (uint64_t)v18;
        if (!result)
          goto LABEL_44;
      }
      v19 = (unsigned int *)(result + 8);
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
        (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
LABEL_23:
      result = v84;
      if ((v85 & 1) != 0)
      {
        v84 = 0;
        if (!result)
          goto LABEL_44;
      }
      else
      {
        if (!v84)
          goto LABEL_44;
        v22 = (unsigned int *)(v84 + 8);
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (v24)
          goto LABEL_44;
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
LABEL_44:
      if ((v87 & 1) == 0)
      {
        result = v86;
        v86 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      v11 += 24;
    }
    while (v11 != v12);
  }
  v41 = *a6;
  *a7 = *a6;
  if (a4)
  {
    if (v41)
    {
      v42 = (unsigned int *)(v41 + 8);
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = a3 + 24 * a4;
    while (1)
    {
      v45 = *a7;
      v82 = 260;
      v78 = (unsigned __int8 *)a3;
      llvm::vfs::FileSystem::getBufferForFile();
      if ((v87 & 1) != 0)
      {
        *(_QWORD *)(a5 + 312) = 0x32200000000;
        if (*(char *)(a5 + 311) < 0)
        {
          **(_BYTE **)(a5 + 288) = 0;
          *(_QWORD *)(a5 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(a5 + 288) = 0;
          *(_BYTE *)(a5 + 311) = 0;
        }
        v78 = (unsigned __int8 *)(a5 + 320);
        v79 = 0;
        v80 = a5;
        v81 = 1;
        *(_BYTE *)(a5 + 320) = 0;
        *(_DWORD *)(a5 + 664) = 0;
        v62 = *(unsigned int *)(a5 + 776);
        if ((_DWORD)v62)
        {
          v63 = *(_QWORD *)(a5 + 768);
          v64 = 56 * v62;
          do
          {
            if (*(char *)(v63 + v64 - 9) < 0)
              operator delete(*(void **)(v63 + v64 - 32));
            v64 -= 56;
          }
          while (v64);
        }
      }
      else
      {
        v46 = v86;
        v86 = 0;
        v75 = v46;
        v74 = (unsigned int *)v45;
        if (v45)
        {
          v47 = (unsigned int *)(v45 + 8);
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
        }
        llvm::vfs::getVFSFromYAML();
        v49 = v76;
        if (v76)
        {
          v50 = v76 + 2;
          do
            v51 = __ldxr(v50);
          while (__stxr(v51 + 1, v50));
        }
        v76 = 0;
        if (v74)
        {
          v52 = v74 + 2;
          do
          {
            v53 = __ldaxr(v52);
            v54 = v53 - 1;
          }
          while (__stlxr(v54, v52));
          if (!v54)
            (*(void (**)(unsigned int *))(*(_QWORD *)v74 + 8))(v74);
        }
        if (v75)
          (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
        if (v49)
        {
          v55 = v49 + 2;
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
          result = *a7;
          *a7 = (uint64_t)v49;
          if (result)
          {
            v57 = (unsigned int *)(result + 8);
            do
            {
              v58 = __ldaxr(v57);
              v59 = v58 - 1;
            }
            while (__stlxr(v59, v57));
            if (!v59)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          }
          do
          {
            v60 = __ldaxr(v55);
            v61 = v60 - 1;
          }
          while (__stlxr(v61, v55));
          if (!v61)
            result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
          goto LABEL_120;
        }
        *(_QWORD *)(a5 + 312) = 0x31D00000000;
        if (*(char *)(a5 + 311) < 0)
        {
          **(_BYTE **)(a5 + 288) = 0;
          *(_QWORD *)(a5 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(a5 + 288) = 0;
          *(_BYTE *)(a5 + 311) = 0;
        }
        v78 = (unsigned __int8 *)(a5 + 320);
        v79 = 0;
        v80 = a5;
        v81 = 1;
        *(_BYTE *)(a5 + 320) = 0;
        *(_DWORD *)(a5 + 664) = 0;
        v65 = *(unsigned int *)(a5 + 776);
        if ((_DWORD)v65)
        {
          v66 = *(_QWORD *)(a5 + 768);
          v67 = 56 * v65;
          do
          {
            if (*(char *)(v66 + v67 - 9) < 0)
              operator delete(*(void **)(v66 + v67 - 32));
            v67 -= 56;
          }
          while (v67);
        }
      }
      *(_DWORD *)(a5 + 776) = 0;
      v68 = *(_BYTE *)(a3 + 23);
      v69 = v68 < 0;
      if (v68 >= 0)
        v70 = (void *)a3;
      else
        v70 = *(void **)a3;
      v71 = v68 & 0x7F;
      if (v69)
        v72 = *(_QWORD *)(a3 + 8);
      else
        v72 = v71;
      sub_22E3B89A8(&v78, v70, v72);
      result = sub_22E3BB0B8((uint64_t)&v78);
LABEL_120:
      if ((v87 & 1) == 0)
      {
        result = v86;
        v86 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      a3 += 24;
      if (a3 == v44)
        return result;
    }
  }
  *a6 = 0;
  return result;
}

double sub_22E71EF44(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 72) = 1;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 143) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  *(_DWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 188) = 0;
  *(_DWORD *)(a1 + 192) = 16777472;
  *(_BYTE *)(a1 + 196) = 1;
  *(_QWORD *)(a1 + 296) = 0;
  *(_WORD *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 308) = 0;
  *(_WORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 268) = 0;
  *(_QWORD *)(a1 + 252) = 0;
  *(_QWORD *)(a1 + 260) = 0;
  return result;
}

uint64_t sub_22E71EFC0(uint64_t a1)
{
  _OWORD *v2;

  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = 32;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 204) &= 0xFFF00200;
  *(_DWORD *)(a1 + 212) = 1;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  v2 = operator new(0x420uLL);
  *(_QWORD *)(a1 + 456) = v2;
  *(_QWORD *)(a1 + 472) = v2 + 66;
  memcpy(v2, &off_24FA6DCE8, 0x420uLL);
  *(_QWORD *)(a1 + 464) = v2 + 66;
  sub_22E71F090((uint64_t)v2, v2 + 66, 12, 1);
  return a1;
}

void sub_22E71F090(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  const void *v13;
  size_t v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  int v18;
  BOOL v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  const void **v23;
  size_t v24;
  size_t v25;
  int v26;
  BOOL v27;
  size_t v29;
  size_t v30;
  int v31;
  BOOL v32;
  BOOL v33;
  const void **v36;
  unint64_t v37;
  size_t v38;
  size_t v39;
  int v40;
  int v41;
  const void **v42;
  size_t v43;
  size_t v44;
  int v45;
  BOOL v46;
  BOOL v48;
  size_t v49;
  size_t v50;
  int v51;
  size_t v52;
  size_t v53;
  int v54;
  BOOL v55;
  unint64_t v57;
  size_t v58;
  size_t v59;
  int v60;
  BOOL v61;
  const void **v63;
  const void **i;
  size_t v65;
  int v66;
  BOOL v67;
  size_t v69;
  unint64_t v70;
  size_t v71;
  size_t v72;
  int v73;
  int v74;
  const void **v75;
  size_t v76;
  size_t v77;
  int v78;
  BOOL v79;
  const void *v81;
  size_t v82;
  _OWORD *v83;
  _OWORD *v84;
  BOOL v86;
  uint64_t v87;
  _OWORD *v88;
  _OWORD *v89;
  const void *v90;
  size_t v91;
  _QWORD *v92;
  uint64_t v93;
  const void **v94;
  size_t v95;
  size_t v96;
  int v97;
  BOOL v98;
  int64_t v100;
  int64_t v101;
  int64_t v102;
  uint64_t v103;
  uint64_t v104;
  const void *v105;
  void *v106;
  _BOOL4 v107;
  BOOL v108;
  const void *v109;
  uint64_t v110;
  const void *v111;
  size_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _BOOL4 v116;
  size_t v117;
  size_t v118;
  int v119;
  BOOL v120;
  uint64_t v122;
  _OWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  _OWORD *v130;
  const void *v131;
  size_t v132;
  _OWORD *v133;
  unint64_t v134;
  size_t v135;
  size_t v136;
  int v137;
  BOOL v138;
  uint64_t v141;
  const void *v142;
  unint64_t v143;
  _QWORD *v144;
  unint64_t v145;
  size_t v146;
  int v147;
  BOOL v148;
  const void **v150;
  __int128 *v151;
  __int128 *v152;
  _OWORD *v153;
  int64_t v155;
  unint64_t v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;

BOOL sub_22E71FB18(const void *a1, size_t a2, void *__s2, size_t a4)
{
  size_t v6;
  int v7;
  int v8;

  if (a4 >= a2)
    v6 = a2;
  else
    v6 = a4;
  if (v6 && (v7 = memcmp(a1, __s2, v6)) != 0)
  {
    v8 = (v7 >> 31) | 1;
  }
  else
  {
    if (a2 < a4)
      v8 = -1;
    else
      v8 = 1;
    if (a2 == a4)
      v8 = 0;
  }
  return v8 == -1;
}

BOOL sub_22E71FB78(__int128 *a1, __int128 *a2, __int128 *a3)
{
  void *v6;
  size_t v7;
  BOOL v8;
  _BOOL8 result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v6 = *(void **)a2;
  v7 = *((_QWORD *)a2 + 1);
  v8 = sub_22E71FB18(*(const void **)a2, v7, *(void **)a1, *((_QWORD *)a1 + 1));
  result = sub_22E71FB18(*(const void **)a3, *((_QWORD *)a3 + 1), v6, v7);
  if (v8)
  {
    if (result)
    {
      v10 = *a1;
      *a1 = *a3;
    }
    else
    {
      v13 = *a1;
      *a1 = *a2;
      *a2 = v13;
      result = sub_22E71FB18(*(const void **)a3, *((_QWORD *)a3 + 1), *(void **)a2, *((_QWORD *)a2 + 1));
      if (!result)
        return result;
      v10 = *a2;
      *a2 = *a3;
    }
    *a3 = v10;
  }
  else if (result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    result = sub_22E71FB18(*(const void **)a2, *((_QWORD *)a2 + 1), *(void **)a1, *((_QWORD *)a1 + 1));
    if (result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL sub_22E71FC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const void *v12;
  size_t v13;
  _QWORD *v14;
  uint64_t v15;
  const void **v16;
  size_t v17;
  size_t v18;
  int v19;
  BOOL v20;
  uint64_t v22;
  int v23;

  v2 = a2;
  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (_OWORD *)(a2 - 16);
      if (sub_22E71FB18(*(const void **)(a2 - 16), *(_QWORD *)(a2 - 8), *(void **)a1, *(_QWORD *)(a1 + 8)))
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return 1;
    case 3:
      sub_22E71FB78((__int128 *)a1, (__int128 *)(a1 + 16), (__int128 *)(a2 - 16));
      return 1;
    case 4:
      sub_22E71FE58(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      sub_22E71FEF4(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      v8 = a1 + 32;
      sub_22E71FB78((__int128 *)a1, (__int128 *)(a1 + 16), (__int128 *)(a1 + 32));
      v9 = a1 + 48;
      if (a1 + 48 == v2)
        return 1;
      v10 = 0;
      v11 = 0;
      v22 = v2;
      break;
  }
  while (2)
  {
    v12 = *(const void **)v9;
    v13 = *(_QWORD *)(v9 + 8);
    if (!sub_22E71FB18(*(const void **)v9, v13, *(void **)v8, *(_QWORD *)(v8 + 8)))
      goto LABEL_29;
    *(_OWORD *)v9 = *(_OWORD *)v8;
    v14 = (_QWORD *)a1;
    if (v8 == a1)
      goto LABEL_28;
    v23 = v11;
    v15 = v10;
    while (1)
    {
      v16 = (const void **)(a1 + v15 + 16);
      v17 = *(_QWORD *)(a1 + v15 + 24);
      if (v17 >= v13)
        v18 = v13;
      else
        v18 = *(_QWORD *)(a1 + v15 + 24);
      if (v18)
      {
        v19 = memcmp(v12, *v16, v18);
        if ((v19 & 0x80000000) == 0)
        {
          v20 = v19 || v13 == v17;
          if (v20 || v13 >= v17)
          {
            v14 = (_QWORD *)(a1 + v15 + 32);
            goto LABEL_27;
          }
        }
        goto LABEL_24;
      }
      if (v13 >= v17)
        break;
LABEL_24:
      v8 -= 16;
      *(_OWORD *)(a1 + v15 + 32) = *(_OWORD *)v16;
      v15 -= 16;
      if (v15 == -32)
      {
        v14 = (_QWORD *)a1;
        goto LABEL_27;
      }
    }
    v14 = (_QWORD *)v8;
LABEL_27:
    v2 = v22;
    v11 = v23;
LABEL_28:
    *v14 = v12;
    v14[1] = v13;
    if (++v11 != 8)
    {
LABEL_29:
      v8 = v9;
      v10 += 16;
      v9 += 16;
      if (v9 == v2)
        return 1;
      continue;
    }
    return v9 + 16 == v2;
  }
}

__n128 sub_22E71FE58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;

  sub_22E71FB78((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  if (sub_22E71FB18(*(const void **)a4, *(_QWORD *)(a4 + 8), *(void **)a3, *(_QWORD *)(a3 + 8)))
  {
    v9 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v9;
    if (sub_22E71FB18(*(const void **)a3, *(_QWORD *)(a3 + 8), *(void **)a2, *(_QWORD *)(a2 + 8)))
    {
      v10 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v10;
      if (sub_22E71FB18(*(const void **)a2, *(_QWORD *)(a2 + 8), *(void **)a1, *(_QWORD *)(a1 + 8)))
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 sub_22E71FEF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  __n128 v13;

  sub_22E71FE58(a1, a2, a3, a4);
  if (sub_22E71FB18(*(const void **)a5, *(_QWORD *)(a5 + 8), *(void **)a4, *(_QWORD *)(a4 + 8)))
  {
    v11 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v11;
    if (sub_22E71FB18(*(const void **)a4, *(_QWORD *)(a4 + 8), *(void **)a3, *(_QWORD *)(a3 + 8)))
    {
      v12 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v12;
      if (sub_22E71FB18(*(const void **)a3, *(_QWORD *)(a3 + 8), *(void **)a2, *(_QWORD *)(a2 + 8)))
      {
        v13 = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = v13;
        if (sub_22E71FB18(*(const void **)a2, *(_QWORD *)(a2 + 8), *(void **)a1, *(_QWORD *)(a1 + 8)))
        {
          result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

uint64_t sub_22E71FFBC(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE *v18;
  __int128 v19;
  _BYTE *v20;
  __int128 v21;
  _BYTE *v22;
  __int128 v23;
  _BYTE *v24;
  __int128 v25;
  _BYTE *v26;
  __int128 v27;
  _BYTE *v28;
  __int128 v29;
  uint64_t v30;
  _BYTE *v31;
  __int128 v32;
  _BYTE *v33;
  __int128 v34;
  _BYTE *v35;
  __int128 v36;
  _BYTE *v37;
  __int128 v38;
  _BYTE *v39;
  __int128 v40;
  _BYTE *v41;
  __int128 v42;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  v10 = a2[8];
  v11 = a2[9];
  v12 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  v13 = a2[12];
  v14 = a2[13];
  v15 = a2[14];
  *(_OWORD *)(a1 + 236) = *(__int128 *)((char *)a2 + 236);
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 224) = v15;
  *(_OWORD *)(a1 + 192) = v13;
  v16 = *(__int128 *)((char *)a2 + 252);
  *(_QWORD *)(a1 + 265) = *(_QWORD *)((char *)a2 + 265);
  *(_OWORD *)(a1 + 252) = v16;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  sub_22E618148((_QWORD *)(a1 + 280), *((_QWORD *)a2 + 35), *((_QWORD *)a2 + 36), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 36) - *((_QWORD *)a2 + 35)) >> 3));
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  sub_22E618148((_QWORD *)(a1 + 304), *((_QWORD *)a2 + 38), *((_QWORD *)a2 + 39), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 39) - *((_QWORD *)a2 + 38)) >> 3));
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  sub_22E618148((_QWORD *)(a1 + 328), *((_QWORD *)a2 + 41), *((_QWORD *)a2 + 42), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 42) - *((_QWORD *)a2 + 41)) >> 3));
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  sub_22E618148((_QWORD *)(a1 + 352), *((_QWORD *)a2 + 44), *((_QWORD *)a2 + 45), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 45) - *((_QWORD *)a2 + 44)) >> 3));
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  sub_22E618148((_QWORD *)(a1 + 376), *((_QWORD *)a2 + 47), *((_QWORD *)a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 48) - *((_QWORD *)a2 + 47)) >> 3));
  v17 = a2[25];
  *(_QWORD *)(a1 + 416) = *((_QWORD *)a2 + 52);
  *(_OWORD *)(a1 + 400) = v17;
  v18 = (_BYTE *)(a1 + 424);
  if (*((char *)a2 + 447) < 0)
  {
    sub_22E3BB2B4(v18, *((void **)a2 + 53), *((_QWORD *)a2 + 54));
  }
  else
  {
    v19 = *(__int128 *)((char *)a2 + 424);
    *(_QWORD *)(a1 + 440) = *((_QWORD *)a2 + 55);
    *(_OWORD *)v18 = v19;
  }
  v20 = (_BYTE *)(a1 + 448);
  if (*((char *)a2 + 471) < 0)
  {
    sub_22E3BB2B4(v20, *((void **)a2 + 56), *((_QWORD *)a2 + 57));
  }
  else
  {
    v21 = a2[28];
    *(_QWORD *)(a1 + 464) = *((_QWORD *)a2 + 58);
    *(_OWORD *)v20 = v21;
  }
  v22 = (_BYTE *)(a1 + 472);
  if (*((char *)a2 + 495) < 0)
  {
    sub_22E3BB2B4(v22, *((void **)a2 + 59), *((_QWORD *)a2 + 60));
  }
  else
  {
    v23 = *(__int128 *)((char *)a2 + 472);
    *(_QWORD *)(a1 + 488) = *((_QWORD *)a2 + 61);
    *(_OWORD *)v22 = v23;
  }
  v24 = (_BYTE *)(a1 + 496);
  if (*((char *)a2 + 519) < 0)
  {
    sub_22E3BB2B4(v24, *((void **)a2 + 62), *((_QWORD *)a2 + 63));
  }
  else
  {
    v25 = a2[31];
    *(_QWORD *)(a1 + 512) = *((_QWORD *)a2 + 64);
    *(_OWORD *)v24 = v25;
  }
  *(_QWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  sub_22E618148((_QWORD *)(a1 + 520), *((_QWORD *)a2 + 65), *((_QWORD *)a2 + 66), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 66) - *((_QWORD *)a2 + 65)) >> 3));
  *(_QWORD *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 544) = 0u;
  sub_22E618148((_QWORD *)(a1 + 544), *((_QWORD *)a2 + 68), *((_QWORD *)a2 + 69), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 69) - *((_QWORD *)a2 + 68)) >> 3));
  *(_BYTE *)(a1 + 568) = *((_BYTE *)a2 + 568);
  *(_QWORD *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  sub_22E618148((_QWORD *)(a1 + 576), *((_QWORD *)a2 + 72), *((_QWORD *)a2 + 73), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 73) - *((_QWORD *)a2 + 72)) >> 3));
  sub_22E720400(a1 + 600, (const void ***)a2 + 75);
  *(_QWORD *)(a1 + 640) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  sub_22E72088C((_QWORD *)(a1 + 624), *((_QWORD *)a2 + 78), *((_QWORD *)a2 + 79), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 79) - *((_QWORD *)a2 + 78)) >> 4));
  v26 = (_BYTE *)(a1 + 648);
  if (*((char *)a2 + 671) < 0)
  {
    sub_22E3BB2B4(v26, *((void **)a2 + 81), *((_QWORD *)a2 + 82));
  }
  else
  {
    v27 = *(__int128 *)((char *)a2 + 648);
    *(_QWORD *)(a1 + 664) = *((_QWORD *)a2 + 83);
    *(_OWORD *)v26 = v27;
  }
  v28 = (_BYTE *)(a1 + 672);
  if (*((char *)a2 + 695) < 0)
  {
    sub_22E3BB2B4(v28, *((void **)a2 + 84), *((_QWORD *)a2 + 85));
  }
  else
  {
    v29 = a2[42];
    *(_QWORD *)(a1 + 688) = *((_QWORD *)a2 + 86);
    *(_OWORD *)v28 = v29;
  }
  v30 = *((_QWORD *)a2 + 87);
  *(_BYTE *)(a1 + 704) = *((_BYTE *)a2 + 704);
  *(_QWORD *)(a1 + 696) = v30;
  v31 = (_BYTE *)(a1 + 712);
  if (*((char *)a2 + 735) < 0)
  {
    sub_22E3BB2B4(v31, *((void **)a2 + 89), *((_QWORD *)a2 + 90));
  }
  else
  {
    v32 = *(__int128 *)((char *)a2 + 712);
    *(_QWORD *)(a1 + 728) = *((_QWORD *)a2 + 91);
    *(_OWORD *)v31 = v32;
  }
  v33 = (_BYTE *)(a1 + 736);
  if (*((char *)a2 + 759) < 0)
  {
    sub_22E3BB2B4(v33, *((void **)a2 + 92), *((_QWORD *)a2 + 93));
  }
  else
  {
    v34 = a2[46];
    *(_QWORD *)(a1 + 752) = *((_QWORD *)a2 + 94);
    *(_OWORD *)v33 = v34;
  }
  v35 = (_BYTE *)(a1 + 760);
  if (*((char *)a2 + 783) < 0)
  {
    sub_22E3BB2B4(v35, *((void **)a2 + 95), *((_QWORD *)a2 + 96));
  }
  else
  {
    v36 = *(__int128 *)((char *)a2 + 760);
    *(_QWORD *)(a1 + 776) = *((_QWORD *)a2 + 97);
    *(_OWORD *)v35 = v36;
  }
  v37 = (_BYTE *)(a1 + 784);
  if (*((char *)a2 + 807) < 0)
  {
    sub_22E3BB2B4(v37, *((void **)a2 + 98), *((_QWORD *)a2 + 99));
  }
  else
  {
    v38 = a2[49];
    *(_QWORD *)(a1 + 800) = *((_QWORD *)a2 + 100);
    *(_OWORD *)v37 = v38;
  }
  v39 = (_BYTE *)(a1 + 808);
  if (*((char *)a2 + 831) < 0)
  {
    sub_22E3BB2B4(v39, *((void **)a2 + 101), *((_QWORD *)a2 + 102));
  }
  else
  {
    v40 = *(__int128 *)((char *)a2 + 808);
    *(_QWORD *)(a1 + 824) = *((_QWORD *)a2 + 103);
    *(_OWORD *)v39 = v40;
  }
  *(_DWORD *)(a1 + 832) = *((_DWORD *)a2 + 208);
  v41 = (_BYTE *)(a1 + 840);
  if (*((char *)a2 + 863) < 0)
  {
    sub_22E3BB2B4(v41, *((void **)a2 + 105), *((_QWORD *)a2 + 106));
  }
  else
  {
    v42 = *(__int128 *)((char *)a2 + 840);
    *(_QWORD *)(a1 + 856) = *((_QWORD *)a2 + 107);
    *(_OWORD *)v41 = v42;
  }
  return a1;
}

uint64_t sub_22E720400(uint64_t a1, const void ***a2)
{
  uint64_t *v3;
  const void ***v4;
  const void **v5;
  const void **v6;
  const void ***v7;
  BOOL v8;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      sub_22F2A917C((uint64_t **)a1, v3, v5 + 4, (__int128 *)v5 + 2);
      v6 = (const void **)v5[1];
      if (v6)
      {
        do
        {
          v7 = (const void ***)v6;
          v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const void ***)v5[2];
          v8 = *v7 == v5;
          v5 = (const void **)v7;
        }
        while (!v8);
      }
      v5 = (const void **)v7;
    }
    while (v7 != v4);
  }
  return a1;
}

uint64_t *sub_22E720494(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  size_t v8;
  size_t v9;
  const void *v10;
  size_t v11;
  size_t v12;
  size_t v13;
  const void *v14;
  size_t v15;
  int v16;
  _BOOL4 v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  const void *v21;
  size_t v22;
  int v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t *v28;
  BOOL v29;
  char v30;
  const void *v31;
  size_t v32;
  int v33;
  size_t v34;
  const void *v35;
  size_t v36;
  int v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t *v41;
  uint64_t *v42;
  size_t v43;
  size_t v44;
  int v45;
  _BOOL4 v46;
  uint64_t **v47;

  v47 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_16;
  v8 = *((unsigned __int8 *)a5 + 23);
  v9 = (size_t)a5[1];
  if ((v8 & 0x80u) == 0)
    v10 = a5;
  else
    v10 = *a5;
  if ((v8 & 0x80u) == 0)
    v11 = v8 & 0x7F;
  else
    v11 = (size_t)a5[1];
  v12 = *((unsigned __int8 *)a2 + 55);
  v13 = v12;
  v14 = a2 + 4;
  if (*((char *)a2 + 55) < 0)
  {
    v14 = (const void *)a2[4];
    v13 = a2[5];
  }
  if (v11 >= v13)
    v15 = v13;
  else
    v15 = v11;
  v16 = memcmp(v14, v10, v15);
  v17 = v13 < v11;
  if (v16)
    v17 = v16 < 0;
  if (v17)
  {
LABEL_16:
    v18 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      v20 = a2;
LABEL_59:
      if (v18)
      {
        *a3 = v20;
        return v20 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v18)
    {
      v19 = (uint64_t *)*a2;
      do
      {
        v20 = v19;
        v19 = (uint64_t *)v19[1];
      }
      while (v19);
    }
    else
    {
      v28 = a2;
      do
      {
        v20 = (uint64_t *)v28[2];
        v29 = *v20 == (_QWORD)v28;
        v28 = v20;
      }
      while (v29);
    }
    v30 = *((_BYTE *)v20 + 55);
    if (v30 >= 0)
      v31 = v20 + 4;
    else
      v31 = (const void *)v20[4];
    if (v30 >= 0)
      v32 = v30 & 0x7F;
    else
      v32 = v20[5];
    v33 = *((char *)a5 + 23);
    if (v33 >= 0)
      v34 = *((unsigned __int8 *)a5 + 23);
    else
      v34 = (size_t)a5[1];
    if (v33 >= 0)
      v35 = a5;
    else
      v35 = *a5;
    if (v32 >= v34)
      v36 = v34;
    else
      v36 = v32;
    v37 = memcmp(v35, v31, v36);
    v38 = v34 < v32;
    if (v37)
      v38 = v37 < 0;
    if (v38)
      goto LABEL_59;
    v39 = (uint64_t)a1;
    return sub_22E72076C(v39, a3, a5);
  }
  if ((v12 & 0x80u) == 0)
    v21 = a2 + 4;
  else
    v21 = (const void *)a2[4];
  if ((v12 & 0x80u) != 0)
    v12 = a2[5];
  if ((v8 & 0x80u) == 0)
    v9 = v8;
  if (v12 >= v9)
    v22 = v9;
  else
    v22 = v12;
  v23 = memcmp(v10, v21, v22);
  v24 = v9 < v12;
  if (v23)
    v24 = v23 < 0;
  if (v24)
  {
    v25 = a2[1];
    if (v25)
    {
      v26 = (uint64_t *)a2[1];
      v27 = v47;
      do
      {
        a4 = (uint64_t **)v26;
        v26 = (uint64_t *)*v26;
      }
      while (v26);
    }
    else
    {
      v41 = a2;
      v27 = v47;
      do
      {
        a4 = (uint64_t **)v41[2];
        v29 = *a4 == v41;
        v41 = (uint64_t *)a4;
      }
      while (!v29);
    }
    if (a4 == v27)
      goto LABEL_78;
    if (*((char *)a4 + 55) < 0)
    {
      v42 = a4[4];
      v43 = (size_t)a4[5];
    }
    else
    {
      v42 = (uint64_t *)(a4 + 4);
      v43 = *((unsigned __int8 *)a4 + 55);
    }
    if (v11 >= v43)
      v44 = v43;
    else
      v44 = v11;
    v45 = memcmp(v42, v10, v44);
    v46 = v43 < v11;
    if (v45)
      v46 = v45 < 0;
    if (v46)
    {
LABEL_78:
      if (v25)
      {
        *a3 = (uint64_t *)a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return (uint64_t *)a4;
    }
    v39 = (uint64_t)a1;
    return sub_22E72076C(v39, a3, a5);
  }
  *a3 = a2;
  *a4 = a2;
  return (uint64_t *)a4;
}

_QWORD *sub_22E72076C(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  char v6;
  const void *v7;
  size_t v8;
  size_t v9;
  _QWORD *v10;
  const void *v11;
  int v12;
  size_t v13;
  size_t v14;
  const void *v15;
  size_t v16;
  int v17;
  _BOOL4 v18;
  const void *v19;
  size_t v20;
  size_t v21;
  int v22;
  _BOOL4 v23;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v6 = *((_BYTE *)a3 + 23);
    if (v6 >= 0)
      v7 = a3;
    else
      v7 = *a3;
    if (v6 >= 0)
      v8 = v6 & 0x7F;
    else
      v8 = (size_t)a3[1];
    if (v6 >= 0)
      v9 = *((unsigned __int8 *)a3 + 23);
    else
      v9 = (size_t)a3[1];
    do
    {
      while (1)
      {
        v10 = (_QWORD *)v4;
        v11 = (const void *)(v4 + 32);
        v12 = *(char *)(v4 + 55);
        v13 = v12;
        v14 = v12;
        v15 = v11;
        if (v12 < 0)
        {
          v15 = (const void *)v10[4];
          v14 = v10[5];
        }
        if (v8 >= v14)
          v16 = v14;
        else
          v16 = v8;
        v17 = memcmp(v15, v7, v16);
        v18 = v14 < v8;
        if (v17)
          v18 = v17 < 0;
        if (!v18)
          break;
        v4 = *v10;
        v5 = v10;
        if (!*v10)
          goto LABEL_36;
      }
      if ((v13 & 0x80u) == 0)
        v19 = v11;
      else
        v19 = (const void *)v10[4];
      if ((v13 & 0x80u) == 0)
        v20 = v13;
      else
        v20 = v10[5];
      if (v20 >= v9)
        v21 = v9;
      else
        v21 = v20;
      v22 = memcmp(v7, v19, v21);
      v23 = v9 < v20;
      if (v22)
        v23 = v22 < 0;
      if (!v23)
        break;
      v5 = v10 + 1;
      v4 = v10[1];
    }
    while (v4);
  }
  else
  {
    v10 = (_QWORD *)(a1 + 8);
  }
LABEL_36:
  *a2 = v10;
  return v5;
}

_QWORD *sub_22E72088C(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  if (a4)
  {
    if (a4 >= 0x555555555555556)
      abort();
    v6 = result;
    v7 = 3 * a4;
    result = operator new(48 * a4);
    v8 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[2 * v7];
    while (a2 != a3)
    {
      if (*(char *)(a2 + 23) < 0)
      {
        result = sub_22E3BB2B4(v8, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)v8 = *(_OWORD *)a2;
        v8[2] = *(_QWORD *)(a2 + 16);
      }
      *(_OWORD *)(v8 + 3) = *(_OWORD *)(a2 + 24);
      v8[5] = *(_QWORD *)(a2 + 40);
      a2 += 48;
      v8 += 6;
    }
    v6[1] = v8;
  }
  return result;
}

uint64_t sub_22E720948(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  _BYTE *v8;
  __int128 v9;

  *(_DWORD *)a1 = 0;
  v4 = *(_OWORD *)(a2 + 4);
  v5 = *(_OWORD *)(a2 + 20);
  *(_QWORD *)(a1 + 33) = *(_QWORD *)(a2 + 33);
  *(_OWORD *)(a1 + 20) = v5;
  *(_OWORD *)(a1 + 4) = v4;
  v6 = a1 + 48;
  if (*(char *)(a2 + 71) < 0)
  {
    sub_22E3BB2B4((_BYTE *)v6, *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(v6 + 16) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)v6 = v7;
  }
  v8 = (_BYTE *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    sub_22E3BB2B4(v8, *(void **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_OWORD *)v8 = v9;
  }
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_22E618148((_QWORD *)(a1 + 96), *(_QWORD *)(a2 + 96), *(_QWORD *)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3));
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  sub_22E618148((_QWORD *)(a1 + 120), *(_QWORD *)(a2 + 120), *(_QWORD *)(a2 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 3));
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  sub_22E618148((_QWORD *)(a1 + 144), *(_QWORD *)(a2 + 144), *(_QWORD *)(a2 + 152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3));
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  sub_22E618148((_QWORD *)(a1 + 168), *(_QWORD *)(a2 + 168), *(_QWORD *)(a2 + 176), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 3));
  return a1;
}

char *sub_22E720A70(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;
  _BYTE *v9;
  __int128 v10;
  const void **v11;
  const void **v12;
  const void ***v13;
  BOOL v14;
  _BYTE *v15;
  __int128 v16;
  __int128 v17;

  if (*((char *)a2 + 23) < 0)
  {
    sub_22E3BB2B4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  *((_QWORD *)__dst + 4) = 0;
  *((_QWORD *)__dst + 5) = 0;
  *((_QWORD *)__dst + 3) = 0;
  sub_22E6C7694((_QWORD *)__dst + 3, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 5);
  *((_QWORD *)__dst + 6) = 0;
  *((_QWORD *)__dst + 7) = 0;
  *((_QWORD *)__dst + 8) = 0;
  sub_22E6C7744((_QWORD *)__dst + 6, *((_QWORD *)a2 + 6), *((_QWORD *)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 5);
  v5 = __dst + 72;
  if (*((char *)a2 + 95) < 0)
  {
    sub_22E3BB2B4(v5, *((void **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 72);
    *((_QWORD *)__dst + 11) = *((_QWORD *)a2 + 11);
    *(_OWORD *)v5 = v6;
  }
  v7 = __dst + 96;
  if (*((char *)a2 + 119) < 0)
  {
    sub_22E3BB2B4(v7, *((void **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v8 = a2[6];
    *((_QWORD *)__dst + 14) = *((_QWORD *)a2 + 14);
    *(_OWORD *)v7 = v8;
  }
  v9 = __dst + 120;
  if (*((char *)a2 + 143) < 0)
  {
    sub_22E3BB2B4(v9, *((void **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v10 = *(__int128 *)((char *)a2 + 120);
    *((_QWORD *)__dst + 17) = *((_QWORD *)a2 + 17);
    *(_OWORD *)v9 = v10;
  }
  *((_QWORD *)__dst + 19) = 0;
  *((_QWORD *)__dst + 18) = __dst + 152;
  *((_QWORD *)__dst + 20) = 0;
  v11 = (const void **)*((_QWORD *)a2 + 18);
  if (v11 != (const void **)((char *)a2 + 152))
  {
    do
    {
      sub_22F2A922C((uint64_t **)__dst + 18, (uint64_t *)__dst + 19, v11 + 4, (__int128 *)v11 + 2);
      v12 = (const void **)v11[1];
      if (v12)
      {
        do
        {
          v13 = (const void ***)v12;
          v12 = (const void **)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (const void ***)v11[2];
          v14 = *v13 == v11;
          v11 = (const void **)v13;
        }
        while (!v14);
      }
      v11 = (const void **)v13;
    }
    while (v13 != (const void ***)((char *)a2 + 152));
  }
  *((_QWORD *)__dst + 21) = 0;
  *((_QWORD *)__dst + 22) = 0;
  *((_QWORD *)__dst + 23) = 0;
  sub_22E618148((_QWORD *)__dst + 21, *((_QWORD *)a2 + 21), *((_QWORD *)a2 + 22), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 22) - *((_QWORD *)a2 + 21)) >> 3));
  v15 = __dst + 192;
  if (*((char *)a2 + 215) < 0)
  {
    sub_22E3BB2B4(v15, *((void **)a2 + 24), *((_QWORD *)a2 + 25));
  }
  else
  {
    v16 = a2[12];
    *((_QWORD *)__dst + 26) = *((_QWORD *)a2 + 26);
    *(_OWORD *)v15 = v16;
  }
  v17 = *(__int128 *)((char *)a2 + 216);
  *((_QWORD *)__dst + 29) = *((_QWORD *)a2 + 29);
  *(_OWORD *)(__dst + 216) = v17;
  sub_22F2A92D0((_QWORD *)__dst + 30, (_DWORD *)a2 + 60);
  sub_22E720CDC((uint64_t)(__dst + 776), (const void ***)a2 + 97);
  *((_QWORD *)__dst + 102) = 0;
  *((_OWORD *)__dst + 50) = 0u;
  sub_22E618148((_QWORD *)__dst + 100, *((_QWORD *)a2 + 100), *((_QWORD *)a2 + 101), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 101) - *((_QWORD *)a2 + 100)) >> 3));
  *((_QWORD *)__dst + 105) = 0;
  *(_OWORD *)(__dst + 824) = 0u;
  sub_22E618148((_QWORD *)__dst + 103, *((_QWORD *)a2 + 103), *((_QWORD *)a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 104) - *((_QWORD *)a2 + 103)) >> 3));
  *((_WORD *)__dst + 424) = *((_WORD *)a2 + 424);
  return __dst;
}

uint64_t sub_22E720CDC(uint64_t a1, const void ***a2)
{
  uint64_t *v3;
  const void ***v4;
  const void **v5;
  const void **v6;
  const void ***v7;
  BOOL v8;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      sub_22E720D70((uint64_t **)a1, v3, v5 + 4, (uint64_t)(v5 + 4));
      v6 = (const void **)v5[1];
      if (v6)
      {
        do
        {
          v7 = (const void ***)v6;
          v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const void ***)v5[2];
          v8 = *v7 == v5;
          v5 = (const void **)v7;
        }
        while (!v8);
      }
      v5 = (const void **)v7;
    }
    while (v7 != v4);
  }
  return a1;
}

uint64_t *sub_22E720D70(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = sub_22E617DDC(a1, a2, &v13, &v12, a3);
  result = (uint64_t *)*v6;
  if (!*v6)
  {
    sub_22E5F0018((uint64_t)a1, a4, (uint64_t)&v11);
    v8 = v13;
    v9 = v11;
    *v11 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v8;
    *v6 = (uint64_t)v9;
    v10 = (uint64_t *)**a1;
    if (v10)
    {
      *a1 = v10;
      v9 = (uint64_t *)*v6;
    }
    sub_22E49FD00(a1[1], v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v11;
  }
  return result;
}

uint64_t sub_22E720E1C(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  _BYTE *v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  __int128 *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_22E6C7744((_QWORD *)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_22E618148((_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_22E618148((_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v4 = (_BYTE *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    sub_22E3BB2B4(v4, *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)v4 = v5;
  }
  v6 = (_BYTE *)(a1 + 104);
  if (*(char *)(a2 + 127) < 0)
  {
    sub_22E3BB2B4(v6, *(void **)(a2 + 104), *(_QWORD *)(a2 + 112));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)v6 = v7;
  }
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  sub_22E618148((_QWORD *)(a1 + 128), *(_QWORD *)(a2 + 128), *(_QWORD *)(a2 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3));
  v8 = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 155) = *(_DWORD *)(a2 + 155);
  *(_DWORD *)(a1 + 152) = v8;
  sub_22E720CDC(a1 + 160, (const void ***)(a2 + 160));
  v9 = *(_QWORD *)(a2 + 184);
  v10 = *(_QWORD *)(a2 + 189);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 189) = v10;
  *(_QWORD *)(a1 + 184) = v9;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  sub_22E6C9644((char *)(a1 + 200), *(__int128 **)(a2 + 200), *(__int128 **)(a2 + 208), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 208) - *(_QWORD *)(a2 + 200)) >> 4));
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  v11 = *(_QWORD *)(a2 + 224);
  v12 = *(_QWORD *)(a2 + 232);
  v13 = v12 - v11;
  if (v12 != v11)
  {
    if (v13 < 0)
      abort();
    v14 = v13 >> 5;
    v15 = (char *)operator new(v13);
    v16 = 0;
    *(_QWORD *)(a1 + 224) = v15;
    *(_QWORD *)(a1 + 232) = v15;
    *(_QWORD *)(a1 + 240) = &v15[32 * v14];
    do
    {
      v17 = &v15[v16];
      v18 = (__int128 *)(v11 + v16);
      if (*(char *)(v11 + v16 + 23) < 0)
      {
        sub_22E3BB2B4(v17, *(void **)v18, *((_QWORD *)v18 + 1));
      }
      else
      {
        v19 = *v18;
        *((_QWORD *)v17 + 2) = *((_QWORD *)v18 + 2);
        *(_OWORD *)v17 = v19;
      }
      *(_QWORD *)&v15[v16 + 24] = *(_QWORD *)(v11 + v16 + 24);
      v16 += 32;
    }
    while (v11 + v16 != v12);
    *(_QWORD *)(a1 + 232) = &v15[v16];
  }
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  v20 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(_QWORD *)(a2 + 296);
  if (v23)
  {
    if (v23 == a2 + 272)
    {
      *(_QWORD *)(a1 + 296) = a1 + 272;
      (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 296) + 24))(*(_QWORD *)(a2 + 296));
    }
    else
    {
      *(_QWORD *)(a1 + 296) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 296) = 0;
  }
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  return a1;
}

uint64_t sub_22E721094(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE *v15;
  __int128 v16;
  _BYTE *v17;
  __int128 v18;
  _BYTE *v19;
  __int128 v20;
  _BYTE *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE *v35;
  _BYTE *v36;
  int64_t v37;
  char *v38;
  char *v39;
  uint64_t v41;
  uint64_t v42;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_22E6C7744((_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 5);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_22E618148((_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_22E618148((_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v4 = (_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 96) = 0x2000000000;
  if (*(_DWORD *)(a2 + 92))
  {
    llvm::StringMapImpl::init((llvm::StringMapImpl *)(a1 + 80));
    v5 = *(_QWORD *)(a1 + 80);
    v6 = *(unsigned int *)(a1 + 88);
    v7 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 92) = *(_QWORD *)(a2 + 92);
    if ((_DWORD)v6)
    {
      v8 = 0;
      v41 = v7 + 8 * v6 + 8;
      v42 = v5 + 8 * v6 + 8;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * v8);
        if (v9)
          v10 = v9 == -8;
        else
          v10 = 1;
        if (v10)
        {
          *(_QWORD *)(*v4 + 8 * v8) = v9;
        }
        else
        {
          v11 = *(_QWORD *)v9;
          v12 = MEMORY[0x23489D23C](*(_QWORD *)v9 + 33, 8);
          v13 = (_QWORD *)v12;
          v14 = v12 + 32;
          if (v11)
            memcpy((void *)(v12 + 32), (const void *)(v9 + 32), v11);
          *(_BYTE *)(v14 + v11) = 0;
          *v13 = v11;
          v15 = v13 + 1;
          if (*(char *)(v9 + 31) < 0)
          {
            sub_22E3BB2B4(v15, *(void **)(v9 + 8), *(_QWORD *)(v9 + 16));
          }
          else
          {
            v16 = *(_OWORD *)(v9 + 8);
            v13[3] = *(_QWORD *)(v9 + 24);
            *(_OWORD *)v15 = v16;
          }
          *(_QWORD *)(*v4 + 8 * v8) = v13;
          *(_DWORD *)(v42 + 4 * v8) = *(_DWORD *)(v41 + 4 * v8);
        }
        ++v8;
      }
      while (v6 != v8);
    }
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  v17 = (_BYTE *)(a1 + 128);
  if (*(char *)(a2 + 151) < 0)
  {
    sub_22E3BB2B4(v17, *(void **)(a2 + 128), *(_QWORD *)(a2 + 136));
  }
  else
  {
    v18 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)v17 = v18;
  }
  v19 = (_BYTE *)(a1 + 152);
  if (*(char *)(a2 + 175) < 0)
  {
    sub_22E3BB2B4(v19, *(void **)(a2 + 152), *(_QWORD *)(a2 + 160));
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_OWORD *)v19 = v20;
  }
  v21 = (_BYTE *)(a1 + 176);
  if (*(char *)(a2 + 199) < 0)
  {
    sub_22E3BB2B4(v21, *(void **)(a2 + 176), *(_QWORD *)(a2 + 184));
  }
  else
  {
    v22 = *(_OWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_OWORD *)v21 = v22;
  }
  v23 = *(_OWORD *)(a2 + 200);
  v24 = *(_OWORD *)(a2 + 216);
  v25 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v25;
  *(_OWORD *)(a1 + 216) = v24;
  *(_OWORD *)(a1 + 200) = v23;
  v26 = *(_OWORD *)(a2 + 264);
  v27 = *(_OWORD *)(a2 + 280);
  v28 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v28;
  *(_OWORD *)(a1 + 264) = v26;
  *(_OWORD *)(a1 + 280) = v27;
  v29 = *(_OWORD *)(a2 + 328);
  v30 = *(_OWORD *)(a2 + 344);
  v31 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v31;
  *(_OWORD *)(a1 + 328) = v29;
  *(_OWORD *)(a1 + 344) = v30;
  v32 = *(_OWORD *)(a2 + 392);
  v33 = *(_OWORD *)(a2 + 408);
  v34 = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 440) = v34;
  *(_OWORD *)(a1 + 392) = v32;
  *(_OWORD *)(a1 + 408) = v33;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  v36 = *(_BYTE **)(a2 + 456);
  v35 = *(_BYTE **)(a2 + 464);
  v37 = v35 - v36;
  if (v35 != v36)
  {
    if (v37 < 0)
      abort();
    v38 = (char *)operator new(v35 - v36);
    *(_QWORD *)(a1 + 456) = v38;
    *(_QWORD *)(a1 + 464) = v38;
    v39 = &v38[16 * (v37 >> 4)];
    *(_QWORD *)(a1 + 472) = v39;
    memcpy(v38, v36, v37);
    *(_QWORD *)(a1 + 464) = v39;
  }
  return a1;
}

uint64_t sub_22E721364(uint64_t a1, _BYTE *a2, uint64_t (*a3)(uint64_t, __int128 *), uint64_t a4, char a5, uint64_t *a6)
{
  unsigned int v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  __int128 v17;
  __int16 v18;
  uint64_t result;
  uint64_t v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  if (((1 << a5) & 0x1840) == 0)
  {
    if (*a2)
    {
      if (*((_BYTE *)a6 + 32) == 1)
      {
        *(_QWORD *)&v22 = a2;
        v18 = 259;
        goto LABEL_19;
      }
      if (*((_BYTE *)a6 + 32))
      {
        v14 = a6[1];
        if (*((_BYTE *)a6 + 33) == 1)
          v15 = *((_BYTE *)a6 + 32);
        else
          v15 = 2;
        if (*((_BYTE *)a6 + 33) == 1)
          v16 = (uint64_t *)*a6;
        else
          v16 = a6;
        *(_QWORD *)&v22 = a2;
        *(_QWORD *)&v23 = v16;
        *((_QWORD *)&v23 + 1) = v14;
        LOBYTE(v24) = 3;
        BYTE1(v24) = v15;
        goto LABEL_20;
      }
    }
    else if (*((_BYTE *)a6 + 32))
    {
      v17 = *((_OWORD *)a6 + 1);
      v22 = *(_OWORD *)a6;
      v23 = v17;
      v24 = a6[4];
LABEL_20:
      v13 = &v22;
      v12 = a4;
      goto LABEL_21;
    }
    v18 = 256;
LABEL_19:
    LOWORD(v24) = v18;
    goto LABEL_20;
  }
  v11 = *(_DWORD *)(a1 + 8);
  if (v11 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a2;
  ++*(_DWORD *)(a1 + 8);
  v12 = a4;
  v13 = (__int128 *)a6;
LABEL_21:
  result = a3(v12, v13);
  v20 = result;
  v21 = *(_DWORD *)(a1 + 8);
  if (v21 >= *(_DWORD *)(a1 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v21 = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v20;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_22E7214C8(uint64_t a1, _BYTE *a2, uint64_t (*a3)(uint64_t, __int128 *), uint64_t a4, int a5, __int128 **a6)
{
  __int128 *v11;
  char v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t i;
  char v18;
  BOOL v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string::size_type v22;
  __int128 *v23;
  __int128 *v24;
  char v25;
  __int128 v26;
  void *__p[2];
  uint64_t v28;
  std::string __dst;
  std::string v30;
  uint64_t v31[4];
  __int16 v32;

  if (a5 == 9)
  {
    memset(&v30, 0, sizeof(v30));
    v11 = *a6;
    if (*a6 != a6[1])
    {
      v12 = *((_BYTE *)v11 + 23);
      v13 = v12 >= 0 ? (const std::string::value_type *)*a6 : *(const std::string::value_type **)v11;
      v14 = v12 >= 0 ? v12 & 0x7F : *((_QWORD *)v11 + 1);
      std::string::append(&v30, v13, v14);
      v15 = *a6;
      v16 = a6[1];
      for (i = (uint64_t)v15 + 24; (__int128 *)i != v16; i += 24)
      {
        std::string::append(&v30, ",");
        v18 = *(_BYTE *)(i + 23);
        v19 = v18 < 0;
        if (v18 >= 0)
          v20 = (const std::string::value_type *)i;
        else
          v20 = *(const std::string::value_type **)i;
        v21 = v18 & 0x7F;
        if (v19)
          v22 = *(_QWORD *)(i + 8);
        else
          v22 = v21;
        std::string::append(&v30, v20, v22);
      }
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&__dst, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
    else
      __dst = v30;
    v32 = 260;
    v31[0] = (uint64_t)&__dst;
    sub_22E721364(a1, a2, a3, a4, 4, v31);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
  }
  else
  {
    v24 = *a6;
    v23 = a6[1];
    if (*a6 != v23)
    {
      v25 = a5;
      do
      {
        if (*((char *)v24 + 23) < 0)
        {
          sub_22E3BB2B4(__p, *(void **)v24, *((_QWORD *)v24 + 1));
        }
        else
        {
          v26 = *v24;
          v28 = *((_QWORD *)v24 + 2);
          *(_OWORD *)__p = v26;
        }
        v32 = 260;
        v31[0] = (uint64_t)__p;
        sub_22E721364(a1, a2, a3, a4, v25, v31);
        if (SHIBYTE(v28) < 0)
          operator delete(__p[0]);
        v24 = (__int128 *)((char *)v24 + 24);
      }
      while (v24 != v23);
    }
  }
}

uint64_t sub_22E7216A8(uint64_t a1, _BYTE *a2, uint64_t (*a3)(uint64_t, __int128 *), uint64_t a4, char a5, unsigned int a6, int a7)
{
  char ***v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  char v12;
  uint64_t v14[4];
  char v15;
  char v16;

  v7 = &(&off_24FA6E108)[2 * a6];
  v8 = *((unsigned int *)v7 + 2);
  v9 = (uint64_t)(*v7 - 2);
  do
  {
    v10 = *(_DWORD *)(v9 + 24);
    v9 += 16;
    --v8;
  }
  while (v10 != a7);
  v11 = *(_BYTE **)v9;
  v12 = 1;
  v16 = 1;
  if (*v11)
  {
    v14[0] = (uint64_t)v11;
    v12 = 3;
  }
  v15 = v12;
  return sub_22E721364(a1, a2, a3, a4, a5, v14);
}

uint64_t sub_22E721714(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  sub_22E72179C(a1, a2, (uint64_t)&v11);
  v9 = v11;
  v2 = v13;
  v10 = v12;
  v3 = (uint64_t *)v11;
  if ((_QWORD)v11 == v13)
    return 0;
  do
  {
    v7 = *v3;
    v6 = v3 + 1;
    v4 = v7;
    v8 = *(_QWORD *)(v7 + 16);
    if (!v8)
      v8 = v4;
    *(_BYTE *)(v8 + 44) |= 1u;
    *(_QWORD *)&v9 = v6;
    sub_22E721830((uint64_t)&v9);
    v3 = (uint64_t *)v9;
  }
  while ((_QWORD)v9 != v2);
  return v4;
}

double sub_22E72179C@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t Range;
  uint64_t v7;
  uint64_t v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  v14 = a2;
  Range = llvm::opt::ArgList::getRange();
  v7 = *(_QWORD *)(a1 + 8);
  v8 = v7 + 8 * HIDWORD(Range);
  *(_QWORD *)&v12 = v7 + 8 * Range;
  *((_QWORD *)&v12 + 1) = v8;
  LODWORD(v13) = a2;
  sub_22E721830((uint64_t)&v12);
  *(_QWORD *)&v10 = v8;
  *((_QWORD *)&v10 + 1) = v8;
  LODWORD(v11) = a2;
  sub_22E721830((uint64_t)&v10);
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  result = *(double *)&v10;
  *(_OWORD *)(a3 + 24) = v10;
  *(_QWORD *)(a3 + 40) = v11;
  return result;
}

uint64_t sub_22E721830(uint64_t result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)result;
  v2 = *(uint64_t **)(result + 8);
  if (*(uint64_t **)result != v2)
  {
    v3 = result;
    do
    {
      result = *v1;
      if (*v1 && *(_DWORD *)(v3 + 16))
      {
        result = llvm::opt::Option::matches();
        if ((result & 1) != 0)
          return result;
        v1 = *(uint64_t **)v3;
        v2 = *(uint64_t **)(v3 + 8);
      }
      *(_QWORD *)v3 = ++v1;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_22E721888(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  sub_22E721914(a1, a2, a3, (uint64_t)&v12);
  v10 = v12;
  v3 = v14;
  v11 = v13;
  v4 = (uint64_t *)v12;
  if ((_QWORD)v12 == v14)
    return 0;
  do
  {
    v8 = *v4;
    v7 = v4 + 1;
    v5 = v8;
    v9 = *(_QWORD *)(v8 + 16);
    if (!v9)
      v9 = v5;
    *(_BYTE *)(v9 + 44) |= 1u;
    *(_QWORD *)&v10 = v7;
    sub_22E7219D8((uint64_t)&v10);
    v4 = (uint64_t *)v10;
  }
  while ((_QWORD)v10 != v3);
  return v5;
}

double sub_22E721914@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t Range;
  uint64_t v9;
  uint64_t v10;
  double result;
  __int128 v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  v17 = a3;
  Range = llvm::opt::ArgList::getRange();
  v9 = *(_QWORD *)(a1 + 8);
  v10 = v9 + 8 * HIDWORD(Range);
  *(_QWORD *)&v14 = v9 + 8 * Range;
  *((_QWORD *)&v14 + 1) = v10;
  v15 = __PAIR64__(a3, a2);
  sub_22E7219D8((uint64_t)&v14);
  *(_QWORD *)&v12 = v10;
  *((_QWORD *)&v12 + 1) = v10;
  v13 = __PAIR64__(a3, a2);
  sub_22E7219D8((uint64_t)&v12);
  *(_OWORD *)a4 = v14;
  *(_QWORD *)(a4 + 16) = v15;
  result = *(double *)&v12;
  *(_OWORD *)(a4 + 24) = v12;
  *(_QWORD *)(a4 + 40) = v13;
  return result;
}

uint64_t sub_22E7219D8(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  v1 = *(_QWORD **)result;
  v2 = *(_QWORD **)(result + 8);
  if (*(_QWORD **)result != v2)
  {
    v3 = result;
    do
    {
      if (*v1)
      {
        for (i = 16; i != 24; i += 4)
        {
          if (!*(_DWORD *)(v3 + i))
            break;
          result = llvm::opt::Option::matches();
          if ((result & 1) != 0)
            return result;
        }
        v1 = *(_QWORD **)v3;
        v2 = *(_QWORD **)(v3 + 8);
      }
      *(_QWORD *)v3 = ++v1;
    }
    while (v1 != v2);
  }
  return result;
}

void sub_22E721A4C(llvm::cas *a1, _QWORD **a2)
{
  llvm::cas *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _BYTE v14[39];
  uint64_t v15;
  _QWORD v16[4];
  char v17;
  char *v18[4];
  char v19;
  _BYTE v20[8];
  void *v21;
  uint64_t v22;
  char v23;
  char *v24;
  llvm::cas *v25;
  _QWORD v26[5];

  v3 = a1;
  v26[4] = *MEMORY[0x24BDAC8D0];
  v20[0] = 0;
  v23 = 0;
  if (!**a2)
    goto LABEL_21;
  MEMORY[0x23489E4A8](v14);
  a1 = (llvm::cas *)MEMORY[0x23489E49C](v18, v14, 0, 0);
  if ((v19 & 1) != 0)
    goto LABEL_3;
  (*(void (**)(char **__return_ptr, char *, char *))(*(_QWORD *)v18[0] + 24))(&v24, v18[0], v18[2]);
  sub_22F2A93A4((uint64_t)v20, &v24);
  a1 = v25;
  if (v25 != (llvm::cas *)v26)
    free(v25);
  if ((v19 & 1) != 0)
  {
LABEL_3:
    if (v18[0])
    {
      sub_22E6C5940(v18, &v24);
      a1 = (llvm::cas *)v18[0];
      if (v18[0])
        a1 = (llvm::cas *)(*(uint64_t (**)(char *))(*(_QWORD *)v18[0] + 8))(v18[0]);
      v4 = *a2;
      v5 = (std::__shared_weak_count *)(*a2)[1];
      *v4 = 0;
      v4[1] = 0;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
  v8 = *a2;
  if (!**a2)
  {
LABEL_21:
    llvm::cas::createInMemoryCAS(a1);
    sub_22E721CDC(*a2, (uint64_t *)&v24);
    v11 = v24;
    v24 = 0;
    if (v11)
      (*(void (**)(char *))(*(_QWORD *)v11 + 128))(v11);
    MEMORY[0x23489E4A8](v18, **a2);
    MEMORY[0x23489E49C](v16, v18, 0, 0);
    (*(void (**)(char **__return_ptr, _QWORD, _QWORD))(*(_QWORD *)v16[0] + 24))(&v24, v16[0], v16[2]);
    sub_22F2A93A4((uint64_t)v20, &v24);
    if (v25 != (llvm::cas *)v26)
      free(v25);
    if ((v17 & 1) != 0)
    {
      v12 = v16[0];
      v16[0] = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
    v8 = *a2;
  }
  v13 = (std::__shared_weak_count *)v8[1];
  *v8 = 0;
  v8[1] = 0;
  llvm::cas::createCASFileSystem();
  *(_QWORD *)v3 = v15;
  v15 = 0;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v23)
  {
    if (v21 != &v22)
      free(v21);
  }
}

_QWORD *sub_22E721CDC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_24FA70100;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t sub_22E721D88(unint64_t *a1, int a2, void *__src, size_t __len)
{
  __int128 *p_dst;
  size_t v8;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t isValid;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  size_t v24;
  void **v25;
  size_t v26;
  void *__p[2];
  char v29;
  __int128 __dst;
  unint64_t v31;
  __int16 v32;
  void *v33;
  size_t v34;
  uint64_t v35;

  if (!__src)
  {
    __dst = 0uLL;
    v31 = 0;
    goto LABEL_12;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v8 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v8 = __len | 7;
    v9 = v8 + 1;
    p_dst = (__int128 *)operator new(v8 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v31 = v9 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v31) = __len;
    p_dst = &__dst;
    if (!__len)
      goto LABEL_11;
  }
  memmove(p_dst, __src, __len);
LABEL_11:
  *((_BYTE *)p_dst + __len) = 0;
LABEL_12:
  v10 = a1[2];
  v11 = v10 + 8;
  if (*(char *)(v10 + 31) < 0)
    operator delete(*(void **)v11);
  *(_OWORD *)v11 = __dst;
  *(_QWORD *)(v11 + 16) = v31;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v12 = operator new(0x28uLL);
  v12[2] = 0;
  *v12 = &unk_24FA6EF28;
  v12[1] = 0;
  v13 = llvm::Regex::Regex();
  v14 = a1[2];
  v15 = *(std::__shared_weak_count **)(v14 + 40);
  *(_QWORD *)(v14 + 32) = v13;
  *(_QWORD *)(v14 + 40) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  isValid = llvm::Regex::isValid();
  if ((isValid & 1) == 0)
  {
    v19 = *a1;
    *(_QWORD *)(v19 + 312) = 0x1AE00000000;
    if (*(char *)(v19 + 311) < 0)
    {
      **(_BYTE **)(v19 + 288) = 0;
      *(_QWORD *)(v19 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v19 + 288) = 0;
      *(_BYTE *)(v19 + 311) = 0;
    }
    __dst = v19 + 320;
    v31 = v19;
    v32 = 1;
    *(_BYTE *)(v19 + 320) = 0;
    *(_DWORD *)(v19 + 664) = 0;
    v20 = *(unsigned int *)(v19 + 776);
    if ((_DWORD)v20)
    {
      v21 = *(_QWORD *)(v19 + 768);
      v22 = 56 * v20;
      do
      {
        if (*(char *)(v21 + v22 - 9) < 0)
          operator delete(*(void **)(v21 + v22 - 32));
        v22 -= 56;
      }
      while (v22);
    }
    *(_DWORD *)(v19 + 776) = 0;
    if (v35 >= 0)
      v23 = &v33;
    else
      v23 = v33;
    if (v35 >= 0)
      v24 = HIBYTE(v35) & 0x7F;
    else
      v24 = v34;
    sub_22E3B89A8((unsigned __int8 **)&__dst, v23, v24);
    llvm::opt::Arg::getAsString();
    if (v29 >= 0)
      v25 = __p;
    else
      v25 = (void **)__p[0];
    if (v29 >= 0)
      v26 = v29 & 0x7F;
    else
      v26 = (size_t)__p[1];
    sub_22E3B89A8((unsigned __int8 **)&__dst, v25, v26);
    if (v29 < 0)
      operator delete(__p[0]);
    sub_22E3BB0B8((uint64_t)&__dst);
  }
  if (SHIBYTE(v35) < 0)
    operator delete(v33);
  return isValid;
}

void sub_22E722024(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  void **v15;
  void *__p[2];
  uint64_t v17;
  void **v18;
  const char *v19;
  uint64_t v20;
  __int16 v21;

  __p[0] = 0;
  __p[1] = 0;
  v17 = 0;
  v8 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 1;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v7 = MEMORY[0x24BED83D8] + 16;
  v15 = __p;
  llvm::raw_ostream::SetBufferAndMode();
  v6 = *a4;
  v18 = (void **)&unk_24FA6EF60;
  v19 = "Not an integer: %s";
  v20 = v6;
  llvm::raw_ostream::operator<<();
  operator new();
  v21 = 260;
  v18 = __p;
  *a1 = llvm::StringError::StringError();
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v7);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
}

uint64_t sub_22E72212C(uint64_t a1)
{
  void *v2;

  llvm::opt::InputArgList::releaseMemory((llvm::opt::InputArgList *)a1);
  sub_22E7221CC((char *)(a1 + 320));
  v2 = *(void **)(a1 + 176);
  if (v2 != (void *)(a1 + 192))
    free(v2);
  return sub_22E722170(a1);
}

uint64_t sub_22E722170(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &unk_24FA6EF80;
  llvm::deallocate_buffer(*(llvm **)(a1 + 152), (void *)(12 * *(unsigned int *)(a1 + 168)));
  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
  return a1;
}

void sub_22E7221CC(char *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;

  if (*((_QWORD *)a1 + 2))
  {
    v2 = *(_QWORD *)a1;
    v3 = (char *)*((_QWORD *)a1 + 1);
    v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*(_QWORD *)a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    *((_QWORD *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (char *)*((_QWORD *)v3 + 1);
        if (v3[39] < 0)
          operator delete(*((void **)v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t sub_22E722244(uint64_t a1)
{
  sub_22E7223A4(*(char **)(a1 + 8));
  return a1;
}

uint64_t *sub_22E72226C(uint64_t **a1, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;

  v2 = &qword_253E4BCE8;
  v3 = qword_253E4BCE8;
  if ((uint64_t *)qword_253E4BCE0 == &qword_253E4BCE8)
    goto LABEL_9;
  if (qword_253E4BCE8)
  {
    v4 = qword_253E4BCE8;
    do
    {
      v2 = (uint64_t *)v4;
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4);
  }
  else
  {
    v5 = &qword_253E4BCE8;
    do
    {
      v2 = (uint64_t *)v5[2];
      v6 = *v2 == (_QWORD)v5;
      v5 = v2;
    }
    while (v6);
  }
  if (*((_DWORD *)v2 + 8) < a2)
  {
LABEL_9:
    if (qword_253E4BCE8)
    {
      *a1 = v2;
      return v2 + 1;
    }
    goto LABEL_19;
  }
  if (!qword_253E4BCE8)
  {
LABEL_19:
    v7 = &qword_253E4BCE8;
LABEL_20:
    *a1 = v7;
    return v7;
  }
  v8 = &qword_253E4BCE8;
  do
  {
    while (1)
    {
      v7 = (uint64_t *)v3;
      v9 = *(_DWORD *)(v3 + 32);
      if (v9 <= a2)
        break;
      v3 = *v7;
      v8 = v7;
      if (!*v7)
        goto LABEL_20;
    }
    if (v9 >= a2)
      break;
    v8 = v7 + 1;
    v3 = v7[1];
  }
  while (v3);
  *a1 = v7;
  return v8;
}

_QWORD *sub_22E722334(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _QWORD *result;

  v4 = operator new(0x40uLL);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = &qword_253E4BCE8;
  v4[8] = *(_DWORD *)a2;
  result = v4 + 10;
  if (*(char *)(a2 + 31) < 0)
  {
    result = sub_22E3BB2B4(result, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a2 + 8);
    result[2] = *(_QWORD *)(a2 + 24);
  }
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_22E7223A4(char *a1)
{
  if (a1)
  {
    sub_22E7223A4(*(_QWORD *)a1);
    sub_22E7223A4(*((_QWORD *)a1 + 1));
    if (a1[63] < 0)
      operator delete(*((void **)a1 + 5));
    operator delete(a1);
  }
}

void sub_22E7223EC(uint64_t a1, std::string::size_type a2)
{
  llvm::StringMapImpl *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  size_t v24;
  int v25;
  int v26;
  char *v28;
  __int128 *v29;
  __int128 *v30;
  __int128 *v31;
  __int128 *v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 *v43;
  __int128 *v44;
  __int128 *v45;
  __int128 *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::string::size_type v71;
  void *v72;
  uint64_t v73;
  std::string::size_type v74;
  __int16 v75;
  __int16 v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::StringMapImpl *)(a1 + 80);
  *(_QWORD *)(a1 + 216) = sub_22E723AF4((llvm::StringMapImpl *)(a1 + 80), "mode", 4uLL, "deep", 4uLL);
  *(_QWORD *)(a1 + 224) = v5;
  sub_22E723728(v4, a2, (char *)(a1 + 232), "cfg-implicit-dtors", 0x12uLL, 1);
  sub_22E723728(v4, a2, (char *)(a1 + 233), "cfg-temporary-dtors", 0x13uLL, 1);
  sub_22E723728(v4, a2, (char *)(a1 + 234), "cfg-lifetime", 0xCuLL, 0);
  sub_22E723728(v4, a2, (char *)(a1 + 235), "cfg-loopexit", 0xCuLL, 0);
  sub_22E723728(v4, a2, (char *)(a1 + 236), "cfg-rich-constructors", 0x15uLL, 1);
  sub_22E723728(v4, a2, (char *)(a1 + 237), "cfg-scopes", 0xAuLL, 0);
  sub_22E723728(v4, a2, (char *)(a1 + 238), "cfg-expand-default-aggr-inits", 0x1DuLL, 0);
  sub_22E723728(v4, a2, (char *)(a1 + 239), "c++-template-inlining", 0x15uLL, 1);
  sub_22E723728(v4, a2, (char *)(a1 + 240), "c++-stdlib-inlining", 0x13uLL, 1);
  sub_22E723728(v4, a2, (char *)(a1 + 241), "c++-allocator-inlining", 0x16uLL, 1);
  sub_22E723728(v4, a2, (char *)(a1 + 242), "c++-shared_ptr-inlining", 0x17uLL, 0);
  sub_22E723728(v4, a2, (char *)(a1 + 243), "c++-temp-dtor-inlining", 0x16uLL, 1);
  sub_22E723728(v4, a2, (char *)(a1 + 244), "suppress-null-return-paths", 0x1AuLL, 1);
  sub_22E723728(v4, a2, (char *)(a1 + 245), "avoid-suppressing-null-argument-paths", 0x25uLL, 0);
  sub_22E723728(v4, a2, (char *)(a1 + 246), "suppress-inlined-defensive-checks", 0x21uLL, 1);
  sub_22E723728(v4, a2, (char *)(a1 + 247), "c++-container-inlining", 0x16uLL, 0);
  sub_22E723728(v4, a2, (char *)(a1 + 248), "suppress-c++-stdlib", 0x13uLL, 1);
  sub_22E723728(v4, a2, (char *)(a1 + 249), "crosscheck-with-z3", 0x12uLL, 0);
  sub_22E723728(v4, a2, (char *)(a1 + 250), "report-in-main-source-file", 0x1AuLL, 0);
  sub_22E723728(v4, a2, (char *)(a1 + 251), "stable-report-filename", 0x16uLL, 0);
  sub_22E723728(v4, a2, (char *)(a1 + 252), "verbose-report-filename", 0x17uLL, 0);
  sub_22E723728(v4, a2, (char *)(a1 + 253), "serialize-stats", 0xFuLL, 0);
  sub_22E723728(v4, a2, (char *)(a1 + 254), "objc-inlining", 0xDuLL, 1);
  sub_22E723728(v4, a2, (char *)(a1 + 255), "prune-paths", 0xBuLL, 1);
  sub_22E723728(v4, a2, (char *)(a1 + 256), "add-pop-up-notes", 0x10uLL, 1);
  sub_22E723728(v4, a2, (char *)(a1 + 257), "cfg-conditional-static-initializers", 0x23uLL, 1);
  sub_22E723728(v4, a2, (char *)(a1 + 258), "faux-bodies", 0xBuLL, 1);
  sub_22E723728(v4, a2, (char *)(a1 + 259), "elide-constructors", 0x12uLL, 1);
  sub_22E723728(v4, a2, (char *)(a1 + 260), "inline-lambdas", 0xEuLL, 1);
  sub_22E723728(v4, a2, (char *)(a1 + 261), "widen-loops", 0xBuLL, 0);
  sub_22E723728(v4, a2, (char *)(a1 + 262), "unroll-loops", 0xCuLL, 0);
  sub_22E723728(v4, a2, (char *)(a1 + 263), "notes-as-events", 0xFuLL, 0);
  sub_22E723728(v4, a2, (char *)(a1 + 264), "aggressive-binary-operation-simplification", 0x2AuLL, 0);
  sub_22E723728(v4, a2, (char *)(a1 + 265), "eagerly-assume", 0xEuLL, 1);
  sub_22E723728(v4, a2, (char *)(a1 + 266), "experimental-enable-naive-ctu-analysis", 0x26uLL, 0);
  sub_22E723728(v4, a2, (char *)(a1 + 267), "expand-macros", 0xDuLL, 0);
  sub_22E723728(v4, a2, (char *)(a1 + 268), "display-ctu-progress", 0x14uLL, 0);
  sub_22E723728(v4, a2, (char *)(a1 + 269), "track-conditions", 0x10uLL, 1);
  sub_22E723728(v4, a2, (char *)(a1 + 270), "track-conditions-debug", 0x16uLL, 0);
  sub_22E723728(v4, a2, (char *)(a1 + 271), "apply-fixits", 0xCuLL, 0);
  sub_22E723728(v4, a2, (char *)(a1 + 272), "display-checker-name", 0x14uLL, 1);
  sub_22E723728(v4, a2, (char *)(a1 + 273), "support-symbolic-integer-casts", 0x1EuLL, 0);
  sub_22E723728(v4, a2, (char *)(a1 + 274), "consider-single-element-arrays-as-flexible-array-members", 0x38uLL, 0);
  sub_22E723728(v4, a2, (char *)(a1 + 275), "assume-controlled-environment", 0x1DuLL, 0);
  sub_22E723728(v4, a2, (char *)(a1 + 276), "ignore-bison-generated-files", 0x1CuLL, 1);
  sub_22E723728(v4, a2, (char *)(a1 + 277), "ignore-flex-generated-files", 0x1BuLL, 1);
  sub_22E7238D4(v4, a2, (_DWORD *)(a1 + 280), "ctu-import-threshold", 0x14uLL, 0x18u);
  sub_22E7238D4(v4, a2, (_DWORD *)(a1 + 284), "ctu-import-cpp-threshold", 0x18uLL, 8u);
  sub_22E7238D4(v4, a2, (_DWORD *)(a1 + 288), "ipa-always-inline-size", 0x16uLL, 3u);
  sub_22E7238D4(v4, a2, (_DWORD *)(a1 + 292), "graph-trim-interval", 0x13uLL, 0x3E8u);
  sub_22E7238D4(v4, a2, (_DWORD *)(a1 + 296), "min-cfg-size-treat-functions-as-large", 0x25uLL, 0xEu);
  sub_22E7238D4(v4, a2, (_DWORD *)(a1 + 300), "max-symbol-complexity", 0x15uLL, 0x23u);
  sub_22E7238D4(v4, a2, (_DWORD *)(a1 + 304), "max-times-inline-large", 0x16uLL, 0x20u);
  v6 = *(int **)(a1 + 216);
  v7 = *(_QWORD *)(a1 + 224);
  if (v7 == 7)
  {
    if (*v6 != 1818323059 || *(int *)((char *)v6 + 3) != 2003790956)
      goto LABEL_16;
    v8 = 4;
  }
  else
  {
    if (v7 != 4)
      goto LABEL_12;
    if (*v6 != 1885693284)
    {
LABEL_14:
      if (*v6 != 1885693284)
        goto LABEL_23;
      v10 = 225000;
      goto LABEL_22;
    }
    v8 = 100;
  }
  sub_22E7238D4(v4, a2, (_DWORD *)(a1 + 308), "max-inlinable-size", 0x12uLL, v8);
  v6 = *(int **)(a1 + 216);
  v7 = *(_QWORD *)(a1 + 224);
LABEL_12:
  if (v7 != 7)
  {
    if (v7 != 4)
      goto LABEL_23;
    goto LABEL_14;
  }
LABEL_16:
  v11 = *v6;
  v12 = *(int *)((char *)v6 + 3);
  if (v11 == 1818323059 && v12 == 2003790956)
  {
    v10 = 75000;
LABEL_22:
    sub_22E7238D4(v4, a2, (_DWORD *)(a1 + 312), "max-nodes", 9uLL, v10);
  }
LABEL_23:
  sub_22E7238D4(v4, a2, (_DWORD *)(a1 + 316), "region-store-small-struct-limit", 0x1FuLL, 2u);
  sub_22E7238D4(v4, a2, (_DWORD *)(a1 + 320), "region-store-small-array-limit", 0x1EuLL, 5u);
  *(_QWORD *)(a1 + 328) = sub_22E723AF4(v4, "ctu-dir", 7uLL, "", 0);
  *(_QWORD *)(a1 + 336) = v14;
  *(_QWORD *)(a1 + 344) = sub_22E723AF4(v4, "ctu-index-name", 0xEuLL, "externalDefMap.txt", 0x12uLL);
  *(_QWORD *)(a1 + 352) = v15;
  *(_QWORD *)(a1 + 360) = sub_22E723AF4(v4, "ctu-invocation-list", 0x13uLL, "invocations.yaml", 0x10uLL);
  *(_QWORD *)(a1 + 368) = v16;
  *(_QWORD *)(a1 + 376) = sub_22E723AF4(v4, "model-path", 0xAuLL, "", 0);
  *(_QWORD *)(a1 + 384) = v17;
  *(_QWORD *)(a1 + 392) = sub_22E723AF4(v4, "c++-inlining", 0xCuLL, "destructors", 0xBuLL);
  *(_QWORD *)(a1 + 400) = v18;
  *(_QWORD *)(a1 + 408) = sub_22E723AF4(v4, "exploration_strategy", 0x14uLL, "unexplored_first_queue", 0x16uLL);
  *(_QWORD *)(a1 + 416) = v19;
  *(_QWORD *)(a1 + 424) = sub_22E723AF4(v4, "silence-checkers", 0x10uLL, "", 0);
  *(_QWORD *)(a1 + 432) = v20;
  v21 = *(int **)(a1 + 216);
  v22 = *(_QWORD *)(a1 + 224);
  if (v22 == 7)
  {
    v25 = *v21;
    v26 = *(int *)((char *)v21 + 3);
    if (v25 == 1818323059 && v26 == 2003790956)
    {
      v23 = "inlining";
      v24 = 8;
LABEL_96:
      *(_QWORD *)(a1 + 440) = sub_22E723AF4(v4, "ipa", 3uLL, v23, v24);
      *(_QWORD *)(a1 + 448) = v56;
      if (!*(_QWORD *)(a1 + 432))
        goto LABEL_90;
      goto LABEL_32;
    }
  }
  else if (v22 == 4 && *v21 == 1885693284)
  {
    v23 = "dynamic-bifurcate";
    v24 = 17;
    goto LABEL_96;
  }
  if (!v20)
    goto LABEL_90;
LABEL_32:
  v71 = a2;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = &xmmword_24FA6EF98;
  do
  {
    v34 = *(_QWORD *)v32;
    v33 = *((_QWORD *)v32 + 1);
    if (v33 < 6 || (*(_DWORD *)v34 == 1969382756 ? (v35 = *(unsigned __int16 *)(v34 + 4) == 11879) : (v35 = 0), !v35))
    {
      if (v29 >= v31)
      {
        v36 = v29 - v30;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 60)
LABEL_130:
          abort();
        if (((char *)v31 - (char *)v30) >> 3 > v37)
          v37 = ((char *)v31 - (char *)v30) >> 3;
        if ((unint64_t)((char *)v31 - (char *)v30) >= 0x7FFFFFFFFFFFFFF0)
          v38 = 0xFFFFFFFFFFFFFFFLL;
        else
          v38 = v37;
        if (v38)
        {
          if (v38 >> 60)
LABEL_131:
            sub_22E3B3F8C();
          v39 = (char *)operator new(16 * v38);
        }
        else
        {
          v39 = 0;
        }
        v40 = &v39[16 * v36];
        *(_QWORD *)v40 = v34;
        *((_QWORD *)v40 + 1) = v33;
        if (v29 == v30)
        {
          v28 = &v39[16 * v36];
        }
        else
        {
          v41 = &v39[16 * v36];
          do
          {
            v28 = v41 - 16;
            *((_OWORD *)v41 - 1) = *--v29;
            v41 -= 16;
          }
          while (v29 != v30);
        }
        v31 = (__int128 *)&v39[16 * v38];
        v29 = (__int128 *)(v40 + 16);
        if (v30)
          operator delete(v30);
        v30 = (__int128 *)v28;
      }
      else
      {
        *v29++ = *v32;
      }
    }
    ++v32;
  }
  while (v32 != &xmmword_24FA6FB98);
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = &xmmword_24FA6FB98;
  do
  {
    v47 = *(_QWORD *)v46;
    v48 = *((_QWORD *)v46 + 1);
    if (v48 != 5 || (*(_DWORD *)v47 == 1969382756 ? (v49 = *(_BYTE *)(v47 + 4) == 103) : (v49 = 0), !v49))
    {
      if (v43 >= v45)
      {
        v50 = v43 - v44;
        v51 = v50 + 1;
        if ((unint64_t)(v50 + 1) >> 60)
          goto LABEL_130;
        if (((char *)v45 - (char *)v44) >> 3 > v51)
          v51 = ((char *)v45 - (char *)v44) >> 3;
        if ((unint64_t)((char *)v45 - (char *)v44) >= 0x7FFFFFFFFFFFFFF0)
          v52 = 0xFFFFFFFFFFFFFFFLL;
        else
          v52 = v51;
        if (v52)
        {
          if (v52 >> 60)
            goto LABEL_131;
          v53 = (char *)operator new(16 * v52);
        }
        else
        {
          v53 = 0;
        }
        v54 = &v53[16 * v50];
        *(_QWORD *)v54 = v47;
        *((_QWORD *)v54 + 1) = v48;
        if (v43 == v44)
        {
          v42 = &v53[16 * v50];
        }
        else
        {
          v55 = &v53[16 * v50];
          do
          {
            v42 = v55 - 16;
            *((_OWORD *)v55 - 1) = *--v43;
            v55 -= 16;
          }
          while (v43 != v44);
        }
        v45 = (__int128 *)&v53[16 * v52];
        v43 = (__int128 *)(v54 + 16);
        if (v44)
          operator delete(v44);
        v44 = (__int128 *)v42;
      }
      else
      {
        *v43++ = *v46;
      }
    }
    ++v46;
  }
  while (v46 != (__int128 *)&unk_24FA6FEB8);
  v72 = &v74;
  v73 = 0x1000000000;
  llvm::StringRef::split();
  a2 = v71;
  if (v42)
    operator delete(v42);
  if (v28)
    operator delete(v28);
LABEL_90:
  if (a2)
  {
    if (*(_BYTE *)(a1 + 270) && !*(_BYTE *)(a1 + 269))
    {
      *(_QWORD *)(a2 + 312) = 0x13200000000;
      if (*(char *)(a2 + 311) < 0)
      {
        **(_BYTE **)(a2 + 288) = 0;
        *(_QWORD *)(a2 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a2 + 288) = 0;
        *(_BYTE *)(a2 + 311) = 0;
      }
      v72 = (void *)(a2 + 320);
      v73 = 0;
      v74 = a2;
      v75 = 1;
      *(_BYTE *)(a2 + 320) = 0;
      *(_DWORD *)(a2 + 664) = 0;
      v57 = *(unsigned int *)(a2 + 776);
      if ((_DWORD)v57)
      {
        v58 = *(_QWORD *)(a2 + 768);
        v59 = 56 * v57;
        do
        {
          if (*(char *)(v58 + v59 - 9) < 0)
            operator delete(*(void **)(v58 + v59 - 32));
          v59 -= 56;
        }
        while (v59);
        *(_DWORD *)(a2 + 776) = 0;
        LODWORD(v57) = *(unsigned __int8 *)(a2 + 320);
      }
      else
      {
        *(_DWORD *)(a2 + 776) = 0;
      }
      *(_BYTE *)(a2 + 321 + v57) = 1;
      *(_QWORD *)(a2 + 336 + 8 * v57) = "track-conditions-debug";
      v60 = (v57 + 1);
      *(_BYTE *)(a2 + 321 + v60) = 1;
      *(_BYTE *)(a2 + 320) = v57 + 2;
      *(_QWORD *)(a2 + 336 + 8 * v60) = "'track-conditions' to also be enabled";
      sub_22E3BB0B8((uint64_t)&v72);
    }
    v61 = *(_QWORD *)(a1 + 336);
    if (v61)
    {
      v76 = 261;
      v72 = *(void **)(a1 + 328);
      v73 = v61;
      llvm::sys::fs::is_directory();
      *(_QWORD *)(a2 + 312) = 0x13200000000;
      if (*(char *)(a2 + 311) < 0)
      {
        **(_BYTE **)(a2 + 288) = 0;
        *(_QWORD *)(a2 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a2 + 288) = 0;
        *(_BYTE *)(a2 + 311) = 0;
      }
      v72 = (void *)(a2 + 320);
      v73 = 0;
      v74 = a2;
      v75 = 1;
      *(_BYTE *)(a2 + 320) = 0;
      *(_DWORD *)(a2 + 664) = 0;
      v62 = *(unsigned int *)(a2 + 776);
      if ((_DWORD)v62)
      {
        v63 = *(_QWORD *)(a2 + 768);
        v64 = 56 * v62;
        do
        {
          if (*(char *)(v63 + v64 - 9) < 0)
            operator delete(*(void **)(v63 + v64 - 32));
          v64 -= 56;
        }
        while (v64);
        LODWORD(v62) = *(unsigned __int8 *)(a2 + 320);
      }
      *(_DWORD *)(a2 + 776) = 0;
      *(_BYTE *)(a2 + 321 + v62) = 1;
      *(_QWORD *)(a2 + 336 + 8 * v62) = "ctu-dir";
      v65 = (v62 + 1);
      *(_BYTE *)(a2 + 321 + v65) = 1;
      *(_BYTE *)(a2 + 320) = v62 + 2;
      *(_QWORD *)(a2 + 336 + 8 * v65) = "a filename";
      sub_22E3BB0B8((uint64_t)&v72);
    }
    v66 = *(_QWORD *)(a1 + 384);
    if (v66)
    {
      v76 = 261;
      v72 = *(void **)(a1 + 376);
      v73 = v66;
      llvm::sys::fs::is_directory();
      *(_QWORD *)(a2 + 312) = 0x13200000000;
      if (*(char *)(a2 + 311) < 0)
      {
        **(_BYTE **)(a2 + 288) = 0;
        *(_QWORD *)(a2 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a2 + 288) = 0;
        *(_BYTE *)(a2 + 311) = 0;
      }
      v72 = (void *)(a2 + 320);
      v73 = 0;
      v74 = a2;
      v75 = 1;
      *(_BYTE *)(a2 + 320) = 0;
      *(_DWORD *)(a2 + 664) = 0;
      v67 = *(unsigned int *)(a2 + 776);
      if ((_DWORD)v67)
      {
        v68 = *(_QWORD *)(a2 + 768);
        v69 = 56 * v67;
        do
        {
          if (*(char *)(v68 + v69 - 9) < 0)
            operator delete(*(void **)(v68 + v69 - 32));
          v69 -= 56;
        }
        while (v69);
        LODWORD(v67) = *(unsigned __int8 *)(a2 + 320);
      }
      *(_DWORD *)(a2 + 776) = 0;
      *(_BYTE *)(a2 + 321 + v67) = 1;
      *(_QWORD *)(a2 + 336 + 8 * v67) = "model-path";
      v70 = (v67 + 1);
      *(_BYTE *)(a2 + 321 + v70) = 1;
      *(_BYTE *)(a2 + 320) = v67 + 2;
      *(_QWORD *)(a2 + 336 + 8 * v70) = "a filename";
      sub_22E3BB0B8((uint64_t)&v72);
    }
  }
}

uint64_t sub_22E72347C(int64x2_t *a1, const void *a2, size_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  int64x2_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  int64x2_t *v26;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_24;
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v4;
  v26 = a1 + 1;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_22E3B3F8C();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v3];
  v24.i64[0] = (uint64_t)v10;
  v24.i64[1] = (uint64_t)v10;
  v25 = &v9[24 * v8];
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_24:
    abort();
  if (a3 >= 0x17)
  {
    v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v11 = a3 | 7;
    v12 = v11 + 1;
    v13 = (char *)operator new(v11 + 1);
    *((_QWORD *)v10 + 1) = a3;
    *((_QWORD *)v10 + 2) = v12 | 0x8000000000000000;
    *(_QWORD *)v10 = v13;
    v10 = v13;
    goto LABEL_18;
  }
  v10[23] = a3;
  if (a3)
LABEL_18:
    memmove(v10, a2, a3);
  v10[a3] = 0;
  v15 = a1->i64[0];
  v14 = a1->u64[1];
  v16 = v24.i64[1];
  v17 = v24.i64[0];
  if (v14 == a1->i64[0])
  {
    v19 = vdupq_n_s64(v14);
  }
  else
  {
    do
    {
      v18 = *(_OWORD *)(v14 - 24);
      *(_QWORD *)(v17 - 8) = *(_QWORD *)(v14 - 8);
      *(_OWORD *)(v17 - 24) = v18;
      v17 -= 24;
      *(_QWORD *)(v14 - 16) = 0;
      *(_QWORD *)(v14 - 8) = 0;
      *(_QWORD *)(v14 - 24) = 0;
      v14 -= 24;
    }
    while (v14 != v15);
    v19 = *a1;
  }
  v20 = v16 + 24;
  a1->i64[0] = v17;
  a1->i64[1] = v16 + 24;
  v24 = v19;
  v21 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v25;
  v25 = v21;
  v23 = v19.i64[0];
  sub_22E3B8B94((uint64_t)&v23);
  return v20;
}

uint64_t *sub_22E72362C(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v9 = MEMORY[0x23489D23C](a3 + 33, 8);
  v10 = (_QWORD *)v9;
  v11 = v9 + 32;
  if (a3)
    memcpy((void *)(v9 + 32), a2, a3);
  *(_BYTE *)(v11 + a3) = 0;
  *v10 = a3;
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = 0;
  *i = (uint64_t)v10;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t *sub_22E723728(llvm::StringMapImpl *a1, uint64_t a2, char *a3, void *a4, size_t a5, int a6)
{
  char v6;
  size_t v11;
  char *v12;
  uint64_t *result;
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;

  v6 = a6;
  if (a6)
    v11 = 4;
  else
    v11 = 5;
  if (a6)
    v12 = "true";
  else
    v12 = "false";
  result = sub_22E723AF4(a1, a4, a5, v12, v11);
  if (v14 == 5)
  {
    if (*(_DWORD *)result == 1936482662 && *((_BYTE *)result + 4) == 101)
    {
      v15 = 0;
      goto LABEL_29;
    }
  }
  else if (v14 == 4 && *(_DWORD *)result == 1702195828)
  {
    v15 = 1;
LABEL_29:
    *a3 = v15;
    return result;
  }
  if (a2)
  {
    *(_QWORD *)(a2 + 312) = 0x13200000000;
    if (*(char *)(a2 + 311) < 0)
    {
      **(_BYTE **)(a2 + 288) = 0;
      *(_QWORD *)(a2 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a2 + 288) = 0;
      *(_BYTE *)(a2 + 311) = 0;
    }
    v23 = (unsigned __int8 *)(a2 + 320);
    v24 = 0;
    v25 = a2;
    v26 = 1;
    *(_BYTE *)(a2 + 320) = 0;
    *(_DWORD *)(a2 + 664) = 0;
    v17 = *(unsigned int *)(a2 + 776);
    if ((_DWORD)v17)
    {
      v18 = *(_QWORD *)(a2 + 768);
      v19 = 56 * v17;
      do
      {
        if (*(char *)(v18 + v19 - 9) < 0)
          operator delete(*(void **)(v18 + v19 - 32));
        v19 -= 56;
      }
      while (v19);
    }
    *(_DWORD *)(a2 + 776) = 0;
    sub_22E3B89A8(&v23, a4, a5);
    v20 = v23;
    if (!v23)
    {
      v20 = (unsigned __int8 *)sub_22E3B8AAC(v24);
      v23 = v20;
    }
    v20[*v20 + 1] = 1;
    v21 = v23;
    v22 = *v23;
    *v23 = v22 + 1;
    *(_QWORD *)&v21[8 * v22 + 16] = "a BOOLean";
    return (uint64_t *)sub_22E3BB0B8((uint64_t)&v23);
  }
  else
  {
    *a3 = v6;
  }
  return result;
}

void sub_22E7238D4(llvm::StringMapImpl *a1, std::string::size_type a2, _DWORD *a3, void *a4, size_t a5, unsigned int __val)
{
  std::string *v11;
  size_t size;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  std::string::size_type v19;
  uint64_t v20;
  std::string v21;
  __int16 v22;
  unint64_t v23;

  *a3 = __val;
  std::to_string(&v21, __val);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v21;
  else
    v11 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v21.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v21.__r_.__value_.__l.__size_;
  sub_22E723AF4(a1, a4, a5, v11, size);
  v23 = 0;
  v13 = 0;
  if ((llvm::getAsUnsignedInteger() & 1) == 0)
  {
    if (HIDWORD(v23))
    {
      v13 = 0;
    }
    else
    {
      *a3 = v23;
      v13 = 1;
    }
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (a2)
    v14 = v13;
  else
    v14 = 1;
  if ((v14 & 1) == 0)
  {
    *(_QWORD *)(a2 + 312) = 0x13200000000;
    if (*(char *)(a2 + 311) < 0)
    {
      **(_BYTE **)(a2 + 288) = 0;
      *(_QWORD *)(a2 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a2 + 288) = 0;
      *(_BYTE *)(a2 + 311) = 0;
    }
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = a2 + 320;
    v21.__r_.__value_.__r.__words[2] = a2;
    v22 = 1;
    *(_BYTE *)(a2 + 320) = 0;
    *(_DWORD *)(a2 + 664) = 0;
    v15 = *(unsigned int *)(a2 + 776);
    if ((_DWORD)v15)
    {
      v16 = *(_QWORD *)(a2 + 768);
      v17 = 56 * v15;
      do
      {
        if (*(char *)(v16 + v17 - 9) < 0)
          operator delete(*(void **)(v16 + v17 - 32));
        v17 -= 56;
      }
      while (v17);
    }
    *(_DWORD *)(a2 + 776) = 0;
    sub_22E3B89A8((unsigned __int8 **)&v21, a4, a5);
    v18 = (unsigned __int8 *)v21.__r_.__value_.__r.__words[0];
    if (!v21.__r_.__value_.__r.__words[0])
    {
      v18 = (unsigned __int8 *)sub_22E3B8AAC(v21.__r_.__value_.__l.__size_);
      v21.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    }
    v18[*v18 + 1] = 1;
    v19 = v21.__r_.__value_.__r.__words[0];
    v20 = *v21.__r_.__value_.__l.__data_;
    *v21.__r_.__value_.__l.__data_ = v20 + 1;
    *(_QWORD *)(v19 + 8 * v20 + 16) = "an unsigned";
    sub_22E3BB0B8((uint64_t)&v21);
  }
}

BOOL sub_22E723A80(uint64_t a1, uint64_t a2, void *__s2, size_t __n)
{
  uint64_t v5;

  v5 = a1;
  if (a1 != a2)
  {
    while (*(_QWORD *)(v5 + 8) != __n || __n && memcmp(*(const void **)v5, __s2, __n))
    {
      v5 += 16;
      if (v5 == a2)
      {
        v5 = a2;
        return v5 != a2;
      }
    }
  }
  return v5 != a2;
}

uint64_t *sub_22E723AF4(llvm::StringMapImpl *a1, const void *a2, size_t a3, void *__src, size_t __len)
{
  __int128 *v10;
  size_t v11;
  size_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  __int128 v18;
  unint64_t v19;
  const void *v20;
  size_t v21;
  void *__p[2];
  unint64_t v23;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v11 = __len | 7;
    v12 = v11 + 1;
    v10 = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&v18 + 1) = __len;
    v19 = v12 | 0x8000000000000000;
    *(_QWORD *)&v18 = v10;
    goto LABEL_8;
  }
  HIBYTE(v19) = __len;
  v10 = &v18;
  if (__len)
LABEL_8:
    memmove(v10, __src, __len);
  *((_BYTE *)v10 + __len) = 0;
  v20 = a2;
  v21 = a3;
  *(_OWORD *)__p = v18;
  v23 = v19;
  v13 = sub_22E723C0C(a1, a2, a3, (uint64_t)__p);
  v14 = (uint64_t *)(*v13 + 8);
  v15 = *v14;
  v16 = *(_BYTE *)(*v13 + 31);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  if (v16 >= 0)
    return v14;
  else
    return (uint64_t *)v15;
}

uint64_t *sub_22E723C0C(llvm::StringMapImpl *a1, const void *a2, size_t a3, uint64_t a4)
{
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v9 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v9)
  {
    while (!v9 || v9 == -8)
    {
      v10 = i[1];
      ++i;
      v9 = v10;
    }
    return i;
  }
  v11 = MEMORY[0x23489D23C](a3 + 33, 8);
  v12 = v11;
  v13 = v11 + 32;
  if (a3)
    memcpy((void *)(v11 + 32), a2, a3);
  *(_BYTE *)(v13 + a3) = 0;
  *(_QWORD *)v12 = a3;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a4;
  *(_QWORD *)(v12 + 24) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  *i = v12;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22E723D20(int64x2_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  int64x2_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  int64x2_t *v26;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_24;
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v3;
  v26 = a1 + 1;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_22E3B3F8C();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v2];
  v24.i64[0] = (uint64_t)v8;
  v24.i64[1] = (uint64_t)v8;
  v25 = &v7[24 * v6];
  v9 = *(_QWORD *)(a2 + 8);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
LABEL_24:
    abort();
  v10 = *(const void **)a2;
  if (v9 >= 0x17)
  {
    v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v11 = v9 | 7;
    v12 = v11 + 1;
    v13 = (char *)operator new(v11 + 1);
    *((_QWORD *)v8 + 1) = v9;
    *((_QWORD *)v8 + 2) = v12 | 0x8000000000000000;
    *(_QWORD *)v8 = v13;
    v8 = v13;
    goto LABEL_18;
  }
  v8[23] = v9;
  if (v9)
LABEL_18:
    memmove(v8, v10, v9);
  v8[v9] = 0;
  v15 = a1->i64[0];
  v14 = a1->u64[1];
  v16 = v24.i64[1];
  v17 = v24.i64[0];
  if (v14 == a1->i64[0])
  {
    v19 = vdupq_n_s64(v14);
  }
  else
  {
    do
    {
      v18 = *(_OWORD *)(v14 - 24);
      *(_QWORD *)(v17 - 8) = *(_QWORD *)(v14 - 8);
      *(_OWORD *)(v17 - 24) = v18;
      v17 -= 24;
      *(_QWORD *)(v14 - 16) = 0;
      *(_QWORD *)(v14 - 8) = 0;
      *(_QWORD *)(v14 - 24) = 0;
      v14 -= 24;
    }
    while (v14 != v15);
    v19 = *a1;
  }
  v20 = v16 + 24;
  a1->i64[0] = v17;
  a1->i64[1] = v16 + 24;
  v24 = v19;
  v21 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v25;
  v25 = v21;
  v23 = v19.i64[0];
  sub_22E3B8B94((uint64_t)&v23);
  return v20;
}

uint64_t sub_22E723ED4(int64x2_t *a1, const char **a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  const char *v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64x2_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_24;
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v3;
  v27 = a1 + 1;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_22E3B3F8C();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v2];
  v25.i64[0] = (uint64_t)v8;
  v25.i64[1] = (uint64_t)v8;
  v26 = &v7[24 * v6];
  v9 = *a2;
  v10 = strlen(*a2);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
LABEL_24:
    abort();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v12 = v10 | 7;
    v13 = v12 + 1;
    v14 = (char *)operator new(v12 + 1);
    *((_QWORD *)v8 + 1) = v11;
    *((_QWORD *)v8 + 2) = v13 | 0x8000000000000000;
    *(_QWORD *)v8 = v14;
    v8 = v14;
    goto LABEL_18;
  }
  v8[23] = v10;
  if (v10)
LABEL_18:
    memmove(v8, v9, v11);
  v8[v11] = 0;
  v16 = a1->i64[0];
  v15 = a1->u64[1];
  v17 = v25.i64[1];
  v18 = v25.i64[0];
  if (v15 == a1->i64[0])
  {
    v20 = vdupq_n_s64(v15);
  }
  else
  {
    do
    {
      v19 = *(_OWORD *)(v15 - 24);
      *(_QWORD *)(v18 - 8) = *(_QWORD *)(v15 - 8);
      *(_OWORD *)(v18 - 24) = v19;
      v18 -= 24;
      *(_QWORD *)(v15 - 16) = 0;
      *(_QWORD *)(v15 - 8) = 0;
      *(_QWORD *)(v15 - 24) = 0;
      v15 -= 24;
    }
    while (v15 != v16);
    v20 = *a1;
  }
  v21 = v17 + 24;
  a1->i64[0] = v18;
  a1->i64[1] = v17 + 24;
  v25 = v20;
  v22 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v26;
  v26 = v22;
  v24 = v20.i64[0];
  sub_22E3B8B94((uint64_t)&v24);
  return v21;
}

_OWORD *sub_22E724090(uint64_t a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  void **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v15;

  v6 = (void **)sub_22E5EFEFC(a1, &v15, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = operator new(0x50uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 9) = 0;
    v11 = v15;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v11;
    *v8 = v7;
    v12 = **(_QWORD **)a1;
    v13 = (uint64_t *)v7;
    if (v12)
    {
      *(_QWORD *)a1 = v12;
      v13 = (uint64_t *)*v8;
    }
    sub_22E49FD00(*(uint64_t **)(a1 + 8), v13);
    ++*(_QWORD *)(a1 + 16);
  }
  return v7;
}

uint64_t sub_22E724154(uint64_t *a1, char **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string *p_p;
  size_t size;
  __n128 v10;
  char *v12;
  std::string __p;
  unsigned __int8 *v14[3];
  __int16 v15;

  v4 = *a1;
  *(_QWORD *)(v4 + 312) = 0x31200000000;
  if (*(char *)(v4 + 311) < 0)
  {
    **(_BYTE **)(v4 + 288) = 0;
    *(_QWORD *)(v4 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v4 + 288) = 0;
    *(_BYTE *)(v4 + 311) = 0;
  }
  v14[0] = (unsigned __int8 *)(v4 + 320);
  v14[1] = 0;
  v14[2] = (unsigned __int8 *)v4;
  v15 = 1;
  *(_BYTE *)(v4 + 320) = 0;
  *(_DWORD *)(v4 + 664) = 0;
  v5 = *(unsigned int *)(v4 + 776);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(v4 + 768);
    v7 = 56 * v5;
    do
    {
      if (*(char *)(v6 + v7 - 9) < 0)
        operator delete(*(void **)(v6 + v7 - 32));
      v7 -= 56;
    }
    while (v7);
  }
  *(_DWORD *)(v4 + 776) = 0;
  sub_22E3B89A8(v14, *(void **)a1[1], *(_QWORD *)(a1[1] + 8));
  v12 = *a2;
  *a2 = 0;
  sub_22F2432A8(&v12, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v10.n128_f64[0] = sub_22E3B89A8(v14, p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v12)
    (*(void (**)(char *, __n128))(*(_QWORD *)v12 + 8))(v12, v10);
  return sub_22E3BB0B8((uint64_t)v14);
}

double sub_22E724288(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  double result;
  const char **v6;
  __int128 v7;
  uint64_t v8;

  v4 = sub_22E721714(a3, a2);
  if (v4)
  {
    v6 = *(const char ***)(v4 + 48);
    if (*v6)
      strlen(*v6);
    llvm::Triple::normalize();
    result = *(double *)&v7;
    *(_OWORD *)a1 = v7;
    *(_QWORD *)(a1 + 16) = v8;
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  return result;
}

double sub_22E72430C@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, _OWORD *a5@<X8>)
{
  unint64_t Range;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  double result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v20 = a2;
  v21 = a3;
  v22 = a4;
  Range = llvm::opt::ArgList::getRange();
  v11 = *(_QWORD *)(a1 + 8);
  v12 = v11 + 8 * HIDWORD(Range);
  *(_QWORD *)&v18 = v11 + 8 * Range;
  *((_QWORD *)&v18 + 1) = v12;
  *(_QWORD *)&v19 = __PAIR64__(a3, a2);
  DWORD2(v19) = a4;
  sub_22E724498((uint64_t)&v18);
  *(_QWORD *)&v16 = v12;
  *((_QWORD *)&v16 + 1) = v12;
  *(_QWORD *)&v17 = __PAIR64__(a3, a2);
  DWORD2(v17) = a4;
  sub_22E724498((uint64_t)&v16);
  v13 = v19;
  *a5 = v18;
  a5[1] = v13;
  result = *(double *)&v16;
  v15 = v17;
  a5[2] = v16;
  a5[3] = v15;
  return result;
}

_OWORD *sub_22E7243E0(uint64_t a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v12;

  v5 = (void **)sub_22E5EFEFC(a1, &v12, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v8 = v12;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v8;
    *v7 = v6;
    v9 = **(_QWORD **)a1;
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *(_QWORD *)a1 = v9;
      v10 = (uint64_t *)*v7;
    }
    sub_22E49FD00(*(uint64_t **)(a1 + 8), v10);
    ++*(_QWORD *)(a1 + 16);
  }
  return v6;
}

uint64_t sub_22E724498(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  v1 = *(_QWORD **)result;
  v2 = *(_QWORD **)(result + 8);
  if (*(_QWORD **)result != v2)
  {
    v3 = result;
    do
    {
      if (*v1)
      {
        for (i = 16; i != 28; i += 4)
        {
          if (!*(_DWORD *)(v3 + i))
            break;
          result = llvm::opt::Option::matches();
          if ((result & 1) != 0)
            return result;
        }
        v1 = *(_QWORD **)v3;
        v2 = *(_QWORD **)(v3 + 8);
      }
      *(_QWORD *)v3 = ++v1;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_22E72450C(int64x2_t *a1, const void *a2, size_t a3, char a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  int64x2_t v27;
  char *v28;
  int64x2_t *v29;

  v4 = (a1->i64[1] - a1->i64[0]) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    goto LABEL_24;
  v10 = a1[1].i64[0] - a1->i64[0];
  if (v10 >> 4 > v5)
    v5 = v10 >> 4;
  v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v5;
  v29 = a1 + 1;
  if (v11)
  {
    if (v11 >> 59)
      sub_22E3B3F8C();
    v12 = operator new(32 * v11);
  }
  else
  {
    v12 = 0;
  }
  v13 = &v12[32 * v4];
  v27.i64[0] = (uint64_t)v13;
  v27.i64[1] = (uint64_t)v13;
  v28 = &v12[32 * v11];
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_24:
    abort();
  if (a3 >= 0x17)
  {
    v14 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v14 = a3 | 7;
    v15 = v14 + 1;
    v16 = operator new(v14 + 1);
    v13[1] = a3;
    v13[2] = v15 | 0x8000000000000000;
    *v13 = v16;
    v13 = v16;
    goto LABEL_18;
  }
  *((_BYTE *)v13 + 23) = a3;
  if (a3)
LABEL_18:
    memmove(v13, a2, a3);
  *((_BYTE *)v13 + a3) = 0;
  v12[32 * v4 + 24] = a4;
  v18 = a1->i64[0];
  v17 = a1->u64[1];
  v19 = v27.i64[1];
  v20 = v27.i64[0];
  if (v17 == a1->i64[0])
  {
    v22 = vdupq_n_s64(v17);
  }
  else
  {
    do
    {
      v21 = *(_OWORD *)(v17 - 32);
      *(_QWORD *)(v20 - 16) = *(_QWORD *)(v17 - 16);
      *(_OWORD *)(v20 - 32) = v21;
      *(_QWORD *)(v17 - 24) = 0;
      *(_QWORD *)(v17 - 16) = 0;
      *(_QWORD *)(v17 - 32) = 0;
      *(_BYTE *)(v20 - 8) = *(_BYTE *)(v17 - 8);
      v20 -= 32;
      v17 -= 32;
    }
    while (v17 != v18);
    v22 = *a1;
  }
  v23 = v19 + 32;
  a1->i64[0] = v20;
  a1->i64[1] = v19 + 32;
  v27 = v22;
  v24 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v28;
  v28 = v24;
  v26 = v22.i64[0];
  sub_22E3B3F98((uint64_t)&v26);
  return v23;
}

int64x2_t *sub_22E7246B8(int64x2_t *result, void *__src, size_t __len)
{
  int64x2_t *v5;
  __int128 *v6;
  size_t v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  int64x2_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  int64x2_t v24;
  unint64_t v25;
  int64x2_t *v26;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_25;
  v5 = result;
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&v21 + 1) = __len;
    v22 = v8 | 0x8000000000000000;
    *(_QWORD *)&v21 = v6;
    goto LABEL_8;
  }
  HIBYTE(v22) = __len;
  v6 = &v21;
  if (__len)
LABEL_8:
    result = (int64x2_t *)memmove(v6, __src, __len);
  *((_BYTE *)v6 + __len) = 0;
  v9 = v5[1].u64[0];
  v10 = v5->u64[1];
  if (v10 < v9)
  {
    *(_OWORD *)v10 = v21;
    *(_QWORD *)(v10 + 16) = v22;
    *(_BYTE *)(v10 + 24) = 0;
    v11 = v10 + 32;
    goto LABEL_24;
  }
  v12 = v5->i64[0];
  v13 = (uint64_t)(v10 - v5->i64[0]) >> 5;
  v14 = v13 + 1;
  if ((unint64_t)(v13 + 1) >> 59)
LABEL_25:
    abort();
  if ((uint64_t)(v9 - v12) >> 4 > v14)
    v14 = (uint64_t)(v9 - v12) >> 4;
  if (v9 - v12 >= 0x7FFFFFFFFFFFFFE0)
    v15 = 0x7FFFFFFFFFFFFFFLL;
  else
    v15 = v14;
  v26 = v5 + 1;
  if (v15 >> 59)
    sub_22E3B3F8C();
  v16 = (char *)operator new(32 * v15);
  v17 = &v16[32 * v13];
  *(_OWORD *)v17 = v21;
  *((_QWORD *)v17 + 2) = v22;
  v17[24] = 0;
  if (v10 == v12)
  {
    v20 = vdupq_n_s64(v10);
    v18 = &v16[32 * v13];
  }
  else
  {
    v18 = &v16[32 * v13];
    do
    {
      v19 = *(_OWORD *)(v10 - 32);
      *((_QWORD *)v18 - 2) = *(_QWORD *)(v10 - 16);
      *((_OWORD *)v18 - 2) = v19;
      *(_QWORD *)(v10 - 24) = 0;
      *(_QWORD *)(v10 - 16) = 0;
      *(_QWORD *)(v10 - 32) = 0;
      *(v18 - 8) = *(_BYTE *)(v10 - 8);
      v18 -= 32;
      v10 -= 32;
    }
    while (v10 != v12);
    v20 = *v5;
    v9 = v5[1].u64[0];
  }
  v11 = (unint64_t)(v17 + 32);
  v5->i64[0] = (uint64_t)v18;
  v5->i64[1] = (uint64_t)(v17 + 32);
  v24 = v20;
  v5[1].i64[0] = (uint64_t)&v16[32 * v15];
  v25 = v9;
  v23 = v20.i64[0];
  result = (int64x2_t *)sub_22E3B3F98((uint64_t)&v23);
LABEL_24:
  v5->i64[1] = v11;
  return result;
}

uint64_t sub_22E724874(int64x2_t *a1, const char *a2, _DWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  _QWORD *v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  int64x2_t v27;
  char *v28;
  int64x2_t *v29;

  v3 = (a1->i64[1] - a1->i64[0]) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    goto LABEL_24;
  v8 = a1[1].i64[0] - a1->i64[0];
  if (v8 >> 4 > v4)
    v4 = v8 >> 4;
  v9 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v4;
  v29 = a1 + 1;
  if (v9)
  {
    if (v9 >> 59)
      sub_22E3B3F8C();
    v10 = operator new(32 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[8 * v3];
  v27.i64[0] = (uint64_t)v11;
  v27.i64[1] = (uint64_t)v11;
  v28 = (char *)&v10[8 * v9];
  v12 = strlen(a2);
  if (v12 >= 0x7FFFFFFFFFFFFFF8)
LABEL_24:
    abort();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v14 = v12 | 7;
    v15 = v14 + 1;
    v16 = operator new(v14 + 1);
    v11[1] = v13;
    v11[2] = v15 | 0x8000000000000000;
    *v11 = v16;
    v11 = v16;
    goto LABEL_18;
  }
  *((_BYTE *)v11 + 23) = v12;
  if (v12)
LABEL_18:
    memmove(v11, a2, v13);
  *((_BYTE *)v11 + v13) = 0;
  v10[8 * v3 + 6] = *a3;
  v18 = a1->i64[0];
  v17 = a1->u64[1];
  v19 = v27.i64[1];
  v20 = v27.i64[0];
  if (v17 == a1->i64[0])
  {
    v22 = vdupq_n_s64(v17);
  }
  else
  {
    do
    {
      v21 = *(_OWORD *)(v17 - 32);
      *(_QWORD *)(v20 - 16) = *(_QWORD *)(v17 - 16);
      *(_OWORD *)(v20 - 32) = v21;
      *(_QWORD *)(v17 - 24) = 0;
      *(_QWORD *)(v17 - 16) = 0;
      *(_QWORD *)(v17 - 32) = 0;
      *(_DWORD *)(v20 - 8) = *(_DWORD *)(v17 - 8);
      v20 -= 32;
      v17 -= 32;
    }
    while (v17 != v18);
    v22 = *a1;
  }
  v23 = v19 + 32;
  a1->i64[0] = v20;
  a1->i64[1] = v19 + 32;
  v27 = v22;
  v24 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v28;
  v28 = v24;
  v26 = v22.i64[0];
  sub_22E3B3F98((uint64_t)&v26);
  return v23;
}

void sub_22E724A2C(_QWORD *a1, const char **a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  int v8;
  _BYTE *v9;
  unint64_t v10;
  _BYTE *v11;
  char v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v8 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 1;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v7 = MEMORY[0x24BED83D8] + 16;
  v15 = a1;
  llvm::raw_ostream::SetBufferAndMode();
  if (a3)
  {
    v5 = 8 * a3;
    do
    {
      if (*a2)
        strlen(*a2);
      llvm::sys::printArg();
      v6 = v11;
      if ((unint64_t)v11 >= v10)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v7);
      }
      else
      {
        ++v11;
        *v6 = 32;
      }
      ++a2;
      v5 -= 8;
    }
    while (v5);
  }
  if (v11 != v9)
    llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v7);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v7);
}

uint64_t sub_22E724B34(_QWORD *a1, llvm::Twine *a2)
{
  return sub_22E3B3874(*a1, a2);
}

uint64_t sub_22E724B3C(uint64_t a1)
{
  void *v2;
  void **v4;

  v2 = *(void **)(a1 + 456);
  if (v2)
  {
    *(_QWORD *)(a1 + 464) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 199) < 0)
    operator delete(*(void **)(a1 + 176));
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  sub_22E3BAC64(a1 + 80);
  v4 = (void **)(a1 + 56);
  sub_22E3B3CC8(&v4);
  v4 = (void **)(a1 + 32);
  sub_22E3B3CC8(&v4);
  v4 = (void **)(a1 + 8);
  sub_22E6187CC(&v4);
  return a1;
}

void sub_22E724BE0()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22E724BF4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24FA6FF00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_22E724C34(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FA6FF00;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_22E724C5C(uint64_t a1)
{
  return sub_22E6E0868(*(_QWORD *)(a1 + 8), **(unsigned int **)(a1 + 16), **(uint64_t (***)(uint64_t, _QWORD *))(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8));
}

void sub_22E724C78()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22E724C8C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24FA6FF48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_22E724CCC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FA6FF48;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_22E724CF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4[4];
  __int16 v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16) + 328;
  v5 = 260;
  v4[0] = v2;
  return sub_22E6E094C(v1, 2842, (uint64_t)v4, **(uint64_t (***)(uint64_t, __int128 *))(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8));
}

void sub_22E724D3C()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22E724D50(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24FA6FF90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_22E724D90(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FA6FF90;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_22E724DB8(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  int v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  __int16 v10;

  v1 = result;
  v2 = *(uint64_t **)(result + 8);
  v3 = *((_DWORD *)v2 + 3);
  if (v3)
  {
    if (v3 == 1)
      v4 = "json";
    else
      v4 = 0;
    if (v3 == 1)
      v5 = 4;
    else
      v5 = 0;
    v6 = *v2;
    if ((v6 & 0x10000) != 0)
    {
      v10 = 261;
      v8 = v4;
      v9 = v5;
      result = sub_22E6E094C(*(_QWORD *)(result + 16), 131, (uint64_t)&v8, **(uint64_t (***)(uint64_t, __int128 *))(result + 24), *(_QWORD *)(*(_QWORD *)(result + 24) + 8));
      v6 = **(_QWORD **)(v1 + 8);
    }
    if ((v6 & 0x8000) != 0)
    {
      v10 = 261;
      v8 = v4;
      v9 = v5;
      return sub_22E6E094C(*(_QWORD *)(v1 + 16), 137, (uint64_t)&v8, **(uint64_t (***)(uint64_t, __int128 *))(v1 + 24), *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8));
    }
  }
  else
  {
    v7 = *v2;
    if ((v7 & 0x10000) != 0)
    {
      result = sub_22E6E0868(*(_QWORD *)(result + 16), 132, **(uint64_t (***)(uint64_t, _QWORD *))(result + 24), *(_QWORD *)(*(_QWORD *)(result + 24) + 8));
      v7 = **(_QWORD **)(v1 + 8);
    }
    if ((v7 & 0x8000) != 0)
      return sub_22E6E0868(*(_QWORD *)(v1 + 16), 138, **(uint64_t (***)(uint64_t, _QWORD *))(v1 + 24), *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8));
  }
  return result;
}

void sub_22E724EA8()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22E724EBC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24FA6FFD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_22E724EFC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FA6FFD8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_22E724F24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4[4];
  __int16 v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16) + 240;
  v5 = 260;
  v4[0] = v2;
  return sub_22E6E094C(v1, 826, (uint64_t)v4, **(uint64_t (***)(uint64_t, __int128 *))(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8));
}

_DWORD *sub_22E724F68(_DWORD **a1)
{
  _DWORD *result;

  result = *a1;
  if (result)
  {
    if ((*result)-- == 1)
    {
      sub_22E724B3C((uint64_t)result);
      JUMPOUT(0x2348A0E9CLL);
    }
  }
  return result;
}

uint64_t sub_22E724FAC(char **a1, uint64_t a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v9;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  __int128 *v19;
  uint64_t v20;
  __int128 *v21;
  char *v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  std::string *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  _QWORD v45[5];

  v5 = *a1;
  v6 = (a2 - (uint64_t)*a1) / 24;
  v7 = (uint64_t)&(*a1)[24 * v6];
  if (a5 < 1)
    return v7;
  v9 = a3;
  v11 = a1[2];
  v12 = (unint64_t)a1[1];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v11[-v12] >> 3)) >= a5)
  {
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v7) >> 3)) >= a5)
    {
      v19 = (__int128 *)((char *)a3 + 24 * a5);
      v20 = (uint64_t)a1[1];
    }
    else
    {
      v19 = (__int128 *)((char *)a3 + 8 * ((uint64_t)(v12 - v7) >> 3));
      v20 = (uint64_t)a1[1];
      if (v19 != a4)
      {
        v21 = (__int128 *)((char *)a3 + 8 * ((uint64_t)(v12 - v7) >> 3));
        v22 = a1[1];
        do
        {
          if (*((char *)v21 + 23) < 0)
          {
            sub_22E3BB2B4(v22, *(void **)v21, *((_QWORD *)v21 + 1));
          }
          else
          {
            v23 = *v21;
            *((_QWORD *)v22 + 2) = *((_QWORD *)v21 + 2);
            *(_OWORD *)v22 = v23;
          }
          v21 = (__int128 *)((char *)v21 + 24);
          v22 += 24;
          v20 += 24;
        }
        while (v21 != a4);
      }
      a1[1] = (char *)v20;
      if ((uint64_t)(v12 - v7) < 1)
        return v7;
    }
    v24 = v20 - 24 * a5;
    v25 = v20;
    if (v24 < v12)
    {
      v26 = v20 - 24 * a5;
      v25 = v20;
      do
      {
        v27 = *(_OWORD *)v26;
        *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
        *(_OWORD *)v25 = v27;
        v25 += 24;
        *(_QWORD *)(v26 + 8) = 0;
        *(_QWORD *)(v26 + 16) = 0;
        *(_QWORD *)v26 = 0;
        v26 += 24;
      }
      while (v26 < v12);
    }
    a1[1] = (char *)v25;
    sub_22E7252C8(v7, v24, v20);
    if (v19 != v9)
    {
      v28 = (std::string *)v7;
      do
      {
        std::string::operator=(v28, (const std::string *)v9);
        v9 = (__int128 *)((char *)v9 + 24);
        ++v28;
      }
      while (v9 != v19);
    }
    return v7;
  }
  v13 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - (_QWORD)v5) >> 3);
  if (v13 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v5) >> 3);
  v15 = 2 * v14;
  if (2 * v14 <= v13)
    v15 = v13;
  if (v14 >= 0x555555555555555)
    v16 = 0xAAAAAAAAAAAAAAALL;
  else
    v16 = v15;
  v45[4] = a1 + 2;
  if (v16)
  {
    if (v16 > 0xAAAAAAAAAAAAAAALL)
      sub_22E3B3F8C();
    v17 = (char *)operator new(24 * v16);
  }
  else
  {
    v17 = 0;
  }
  v29 = &v17[24 * v6];
  v30 = &v17[24 * v16];
  v31 = &v29[24 * a5];
  v32 = 24 * a5;
  v33 = v29;
  do
  {
    if (*((char *)v9 + 23) < 0)
    {
      sub_22E3BB2B4(v33, *(void **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v34 = *v9;
      *((_QWORD *)v33 + 2) = *((_QWORD *)v9 + 2);
      *(_OWORD *)v33 = v34;
    }
    v33 += 24;
    v9 = (__int128 *)((char *)v9 + 24);
    v32 -= 24;
  }
  while (v32);
  v35 = *a1;
  v36 = v29;
  if ((char *)v7 != *a1)
  {
    v37 = v7;
    v38 = v29;
    do
    {
      v36 = v38 - 24;
      v39 = *(_OWORD *)(v37 - 24);
      *((_QWORD *)v38 - 1) = *(_QWORD *)(v37 - 8);
      *(_OWORD *)(v38 - 24) = v39;
      *(_QWORD *)(v37 - 16) = 0;
      *(_QWORD *)(v37 - 8) = 0;
      *(_QWORD *)(v37 - 24) = 0;
      v37 -= 24;
      v38 -= 24;
    }
    while ((char *)v37 != v35);
  }
  v40 = a1[1];
  if ((char *)v7 != v40)
  {
    do
    {
      v41 = *(_OWORD *)v7;
      *((_QWORD *)v31 + 2) = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v31 = v41;
      v31 += 24;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)v7 = 0;
      v7 += 24;
    }
    while ((char *)v7 != v40);
    v7 = (uint64_t)a1[1];
  }
  v42 = *a1;
  *a1 = v36;
  a1[1] = v31;
  v43 = a1[2];
  a1[2] = v30;
  v45[2] = v7;
  v45[3] = v43;
  v45[0] = v42;
  v45[1] = v42;
  sub_22E3B8B94((uint64_t)v45);
  return (uint64_t)v29;
}

uint64_t sub_22E7252C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  if (a2 != a1)
  {
    v5 = a2;
    do
    {
      v6 = a3 - 24;
      if (*(char *)(a3 - 1) < 0)
        operator delete(*(void **)v6);
      v7 = *(_OWORD *)(v5 - 24);
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(v5 - 8);
      *(_OWORD *)v6 = v7;
      *(_BYTE *)(v5 - 1) = 0;
      *(_BYTE *)(v5 - 24) = 0;
      a3 = v6;
      v5 -= 24;
    }
    while (v5 != a1);
  }
  return a2;
}

double sub_22E72534C@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int a4@<W3>, unsigned int a5@<W4>, _OWORD *a6@<X8>)
{
  unint64_t Range;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  double result;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = a5;
  Range = llvm::opt::ArgList::getRange();
  v13 = *(_QWORD *)(a1 + 8);
  v14 = v13 + 8 * HIDWORD(Range);
  *(_QWORD *)&v20 = v13 + 8 * Range;
  *((_QWORD *)&v20 + 1) = v14;
  *(_QWORD *)&v21 = __PAIR64__(a3, a2);
  *((_QWORD *)&v21 + 1) = __PAIR64__(a5, a4);
  sub_22E725424((uint64_t)&v20);
  *(_QWORD *)&v18 = v14;
  *((_QWORD *)&v18 + 1) = v14;
  *(_QWORD *)&v19 = __PAIR64__(a3, a2);
  *((_QWORD *)&v19 + 1) = __PAIR64__(a5, a4);
  sub_22E725424((uint64_t)&v18);
  v15 = v21;
  *a6 = v20;
  a6[1] = v15;
  result = *(double *)&v18;
  v17 = v19;
  a6[2] = v18;
  a6[3] = v17;
  return result;
}

uint64_t sub_22E725424(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t i;
  uint64_t v4;

  v1 = *(_QWORD **)result;
  v2 = *(_QWORD **)(result + 8);
  while (v1 != v2)
  {
    v4 = result;
    if (*v1)
    {
      for (i = 16; i != 32; i += 4)
      {
        if (!*(_DWORD *)(v4 + i))
          break;
        result = llvm::opt::Option::matches();
        if ((result & 1) != 0)
          return result;
      }
      v1 = *(_QWORD **)v4;
      v2 = *(_QWORD **)(v4 + 8);
    }
    ++v1;
    result = v4;
    *(_QWORD *)v4 = v1;
  }
  return result;
}

char **sub_22E72549C(uint64_t a1, const void **a2, uint64_t a3)
{
  char **result;
  char **v6;
  char *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = (char **)sub_22E5EFEFC(a1, &v11, a2);
  if (!*result)
  {
    v6 = result;
    v7 = (char *)operator new(0x50uLL);
    v8 = v7 + 32;
    if (*(char *)(a3 + 23) < 0)
    {
      sub_22E3BB2B4(v8, *(void **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)v8 = *(_OWORD *)a3;
      *((_QWORD *)v7 + 6) = *(_QWORD *)(a3 + 16);
    }
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(a3 + 24);
    *((_QWORD *)v7 + 9) = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    v9 = v11;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v9;
    *v6 = v7;
    v10 = **(_QWORD **)a1;
    if (v10)
    {
      *(_QWORD *)a1 = v10;
      v7 = *v6;
    }
    result = (char **)sub_22E49FD00(*(uint64_t **)(a1 + 8), (uint64_t *)v7);
    ++*(_QWORD *)(a1 + 16);
  }
  return result;
}

double sub_22E72556C@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t Range;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  double result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v20 = a2;
  v21 = a3;
  Range = llvm::opt::ArgList::getRange();
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)&v17 = v9 + 8 * HIDWORD(Range);
  *((_QWORD *)&v17 + 1) = v17;
  v10 = v9 + 8 * Range;
  *(_QWORD *)&v18 = v10;
  *((_QWORD *)&v18 + 1) = v10;
  v19 = __PAIR64__(a3, a2);
  sub_22E725640((uint64_t)&v17);
  *(_QWORD *)&v14 = v10;
  *((_QWORD *)&v14 + 1) = v10;
  *(_QWORD *)&v15 = v10;
  *((_QWORD *)&v15 + 1) = v10;
  v16 = __PAIR64__(a3, a2);
  sub_22E725640((uint64_t)&v14);
  v11 = v18;
  *(_OWORD *)a4 = v17;
  *(_OWORD *)(a4 + 16) = v11;
  result = *(double *)&v14;
  v13 = v15;
  *(_OWORD *)(a4 + 40) = v14;
  *(_QWORD *)(a4 + 32) = v19;
  *(_OWORD *)(a4 + 56) = v13;
  *(_QWORD *)(a4 + 72) = v16;
  return result;
}

uint64_t sub_22E725640(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  if (v1 != v2)
  {
    v3 = result;
    v4 = result + 32;
    do
    {
      if (*(_QWORD *)(v1 - 8))
      {
        for (i = 0; i != 8; i += 4)
        {
          if (!*(_DWORD *)(v4 + i))
            break;
          result = llvm::opt::Option::matches();
          if ((result & 1) != 0)
            return result;
        }
        v1 = *(_QWORD *)(v3 + 8);
        v2 = *(_QWORD *)(v3 + 24);
      }
      v1 -= 8;
      *(_QWORD *)(v3 + 8) = v1;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_22E7256C0(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 6;
      *(_QWORD *)(a1 + 16) = v2 - 6;
      if (*((char *)v2 - 25) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_22E725720(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x2348A0CC8](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

uint64_t sub_22E72584C(uint64_t a1)
{
  llvm::MD5::update();
  llvm::MD5::update();
  llvm::MD5::update();
  return a1;
}

uint64_t sub_22E7258C8(uint64_t a1)
{
  llvm::MD5::update();
  llvm::MD5::update();
  return sub_22E72584C(a1);
}

uint64_t sub_22E72594C(_QWORD *a1, const void *a2, size_t a3)
{
  char v6;
  char v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  int64x2_t v21;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  int64x2_t v26;
  unint64_t v27;
  _QWORD *v28;

  sub_22E3B39D4((llvm::StringMapImpl *)(a1 + 1), a2, a3);
  v7 = v6;
  if ((v6 & 1) != 0)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_30;
    if (a3 >= 0x17)
    {
      v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v9 = a3 | 7;
      v10 = v9 + 1;
      v8 = (__int128 *)operator new(v9 + 1);
      *((_QWORD *)&v23 + 1) = a3;
      v24 = v10 | 0x8000000000000000;
      *(_QWORD *)&v23 = v8;
    }
    else
    {
      HIBYTE(v24) = a3;
      v8 = &v23;
      if (!a3)
        goto LABEL_10;
    }
    memmove(v8, a2, a3);
LABEL_10:
    *((_BYTE *)v8 + a3) = 0;
    v11 = a1[7];
    v12 = a1[6];
    if (v12 < v11)
    {
      *(_OWORD *)v12 = v23;
      *(_QWORD *)(v12 + 16) = v24;
      v13 = v12 + 24;
LABEL_28:
      a1[6] = v13;
      return v7 & 1;
    }
    v14 = a1[5];
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v14) >> 3) + 1;
    if (v15 <= 0xAAAAAAAAAAAAAAALL)
    {
      if (0x5555555555555556 * ((uint64_t)(v11 - v14) >> 3) > v15)
        v15 = 0x5555555555555556 * ((uint64_t)(v11 - v14) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v14) >> 3) >= 0x555555555555555)
        v16 = 0xAAAAAAAAAAAAAAALL;
      else
        v16 = v15;
      v28 = a1 + 7;
      if (v16)
      {
        if (v16 > 0xAAAAAAAAAAAAAAALL)
          sub_22E3B3F8C();
        v17 = (char *)operator new(24 * v16);
      }
      else
      {
        v17 = 0;
      }
      v18 = &v17[8 * ((uint64_t)(v12 - v14) >> 3)];
      *(_OWORD *)v18 = v23;
      *((_QWORD *)v18 + 2) = v24;
      if (v12 == v14)
      {
        v21 = vdupq_n_s64(v12);
        v19 = &v17[8 * ((uint64_t)(v12 - v14) >> 3)];
      }
      else
      {
        v19 = &v17[8 * ((uint64_t)(v12 - v14) >> 3)];
        do
        {
          v20 = *(_OWORD *)(v12 - 24);
          *((_QWORD *)v19 - 1) = *(_QWORD *)(v12 - 8);
          *(_OWORD *)(v19 - 24) = v20;
          v19 -= 24;
          *(_QWORD *)(v12 - 16) = 0;
          *(_QWORD *)(v12 - 8) = 0;
          *(_QWORD *)(v12 - 24) = 0;
          v12 -= 24;
        }
        while (v12 != v14);
        v21 = *(int64x2_t *)(a1 + 5);
        v11 = a1[7];
      }
      v13 = (unint64_t)(v18 + 24);
      a1[5] = v19;
      a1[6] = v18 + 24;
      v26 = v21;
      a1[7] = &v17[24 * v16];
      v27 = v11;
      v25 = v21.i64[0];
      sub_22E3B8B94((uint64_t)&v25);
      goto LABEL_28;
    }
LABEL_30:
    abort();
  }
  return v7 & 1;
}

uint64_t sub_22E725B48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (sub_22E725B98(a2, a3))
    return 0;
  else
    return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) | a5 ^ 1;
}

BOOL sub_22E725B98(uint64_t a1, uint64_t a2)
{
  int v2;
  BOOL v3;
  int v4;

  if (a2 == 7)
  {
    v2 = *(_DWORD *)(a1 + 3);
    v3 = *(_DWORD *)a1 == 1685353276;
    v4 = 1047423332;
  }
  else
  {
    if (a2 != 10)
      return 0;
    v2 = *(unsigned __int16 *)(a1 + 8);
    v3 = *(_QWORD *)a1 == 0x692D746C6975623CLL;
    v4 = 15982;
  }
  return v3 && v2 == v4;
}

uint64_t sub_22E725BFC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  __int128 v6;
  const void **v7;
  const void **v8;
  char v9;
  BOOL v10;
  const void *v11;
  size_t v12;
  size_t v13;
  uint64_t v15;
  _DWORD *v16;
  int v17;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0x800000000;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &off_24FA70328;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 64) = *a3;
  *a3 = 0;
  v5 = a1 + 72;
  if (*(char *)(a2 + 47) < 0)
  {
    sub_22E3BB2B4((_BYTE *)v5, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)v5 = v6;
  }
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  sub_22E618148((_QWORD *)(a1 + 96), *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3));
  *(_BYTE *)(a1 + 120) = *(_BYTE *)a2 & 1;
  *(_BYTE *)(a1 + 121) = (*(_BYTE *)a2 & 4) != 0;
  *(_BYTE *)(a1 + 122) = (*(_BYTE *)a2 & 8) != 0;
  *(_BYTE *)(a1 + 123) = 0;
  *(_BYTE *)(a1 + 124) = (*(_BYTE *)a2 & 0x10) != 0;
  *(_BYTE *)(a1 + 125) = (*(_BYTE *)a2 & 0x20) != 0;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 132) = 0;
  if (!*(_QWORD *)(a1 + 64))
  {
    v15 = operator new();
    *(_QWORD *)v15 = MEMORY[0x24BED8410] + 16;
    *(_QWORD *)(v15 + 8) = 0;
    *(_BYTE *)(v15 + 14) = 28;
    *(_DWORD *)(v15 + 8) = 1;
    v16 = *(_DWORD **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v15;
    if (v16)
    {
      v17 = v16[2] - 1;
      v16[2] = v17;
      if (!v17)
        (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 32))(v16);
    }
  }
  v8 = *(const void ***)(a2 + 96);
  v7 = *(const void ***)(a2 + 104);
  while (v8 != v7)
  {
    v9 = *((_BYTE *)v8 + 23);
    v10 = v9 < 0;
    if (v9 >= 0)
      v11 = v8;
    else
      v11 = *v8;
    v12 = v9 & 0x7F;
    if (v10)
      v13 = (size_t)v8[1];
    else
      v13 = v12;
    if (sub_22E72594C((_QWORD *)a1, v11, v13))
      ++*(_DWORD *)(a1 + 132);
    v8 += 4;
  }
  return a1;
}

uint64_t sub_22E725DA8(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t result;

  if (a7)
  {
    result = 1;
    if (a1[122])
      return result;
    a1[123] = 1;
    return 0;
  }
  if (a6 && !a1[124] || sub_22E725B98(a2, a3))
    return 0;
  if (a1[120])
    return 1;
  else
    return a5 ^ 1u;
}

uint64_t sub_22E725E14(uint64_t a1, uint64_t a2)
{
  std::string::size_type v4;
  llvm::raw_ostream *v5;
  const void **v6;
  const void **v7;
  int v8;
  char v9;
  BOOL v10;
  const void *v11;
  size_t v12;
  size_t v13;
  _BYTE *v14;
  unint64_t v15;
  void *v16;
  _BYTE *v17;
  void **v18;
  int v19;
  uint64_t v20;
  void **v21;
  char v22;
  BOOL v23;
  void *v24;
  size_t v25;
  size_t v26;
  _DWORD *v27;
  _BYTE *v28;
  int v29;
  uint64_t v30;
  _BYTE *v31;
  char v32;
  BOOL v33;
  void *v34;
  size_t v35;
  size_t v36;
  _WORD *v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  BOOL v43;
  void *v44;
  size_t v45;
  size_t v46;
  char *v47;
  std::string *p_p;
  size_t size;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  BOOL v55;
  void *v56;
  size_t v57;
  size_t v58;
  std::string *v59;
  size_t v60;
  __n128 v61;
  void **v62;
  uint64_t v63;
  char *v64;
  char *v65;
  std::string::size_type v66;
  char *v67;
  std::string __p;
  unsigned __int8 *v69;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  __int16 v73;
  _QWORD v74[3];
  uint64_t v75;
  char v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v73 = 260;
  v69 = (unsigned __int8 *)(a1 + 72);
  llvm::vfs::OutputBackend::createFile();
  if ((v76 & 1) != 0)
  {
    *(_QWORD *)(a2 + 312) = 0x2FC00000000;
    if (*(char *)(a2 + 311) < 0)
    {
      **(_BYTE **)(a2 + 288) = 0;
      *(_QWORD *)(a2 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a2 + 288) = 0;
      *(_BYTE *)(a2 + 311) = 0;
    }
    v69 = (unsigned __int8 *)(a2 + 320);
    v70 = 0;
    v71 = a2;
    v72 = 1;
    *(_BYTE *)(a2 + 320) = 0;
    *(_DWORD *)(a2 + 664) = 0;
    v39 = *(unsigned int *)(a2 + 776);
    if ((_DWORD)v39)
    {
      v40 = *(_QWORD *)(a2 + 768);
      v41 = 56 * v39;
      do
      {
        if (*(char *)(v40 + v41 - 9) < 0)
          operator delete(*(void **)(v40 + v41 - 32));
        v41 -= 56;
      }
      while (v41);
    }
    *(_DWORD *)(a2 + 776) = 0;
    v42 = *(_BYTE *)(a1 + 95);
    v43 = v42 < 0;
    if (v42 >= 0)
      v44 = (void *)(a1 + 72);
    else
      v44 = *(void **)(a1 + 72);
    v45 = v42 & 0x7F;
    if (v43)
      v46 = *(_QWORD *)(a1 + 80);
    else
      v46 = v45;
    sub_22E3B89A8(&v69, v44, v46);
    if ((v76 & 1) != 0)
    {
      v47 = (char *)v74[0];
      v74[0] = 0;
    }
    else
    {
      v47 = 0;
    }
    v67 = v47;
    sub_22F2432A8(&v67, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    v50.n128_f64[0] = sub_22E3B89A8(&v69, p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v67)
      (*(void (**)(char *, __n128))(*(_QWORD *)v67 + 8))(v67, v50);
    sub_22E3BB0B8((uint64_t)&v69);
  }
  else if (*(_BYTE *)(a1 + 123))
  {
    llvm::vfs::OutputFile::discard((llvm::vfs::OutputFile *)v74);
    v4 = v66;
    v66 = 0;
    __p.__r_.__value_.__r.__words[0] = v4;
    sub_22E6C5940(&__p.__r_.__value_.__l.__data_, (char **)&v69);
    if (__p.__r_.__value_.__r.__words[0])
      (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 8))(__p.__r_.__value_.__r.__words[0]);
  }
  else
  {
    v5 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 56))(v75);
    v6 = *(const void ***)(a1 + 96);
    v7 = *(const void ***)(a1 + 104);
    if (v6 == v7)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      do
      {
        v9 = *((_BYTE *)v6 + 23);
        v10 = v9 < 0;
        if (v9 >= 0)
          v11 = v6;
        else
          v11 = *v6;
        v12 = v9 & 0x7F;
        if (v10)
          v13 = (size_t)v6[1];
        else
          v13 = v12;
        if (v8)
        {
          v15 = *((_QWORD *)v5 + 3);
          v14 = (_BYTE *)*((_QWORD *)v5 + 4);
          if ((v8 + v13 - 74) > 0xFFFFFFB3)
          {
            v8 += v13 + 1;
            if ((unint64_t)v14 >= v15)
            {
              llvm::raw_ostream::write(v5);
            }
            else
            {
              *((_QWORD *)v5 + 4) = v14 + 1;
              *v14 = 32;
            }
          }
          else
          {
            v8 = v13 + 2;
            if (v15 - (unint64_t)v14 > 4)
            {
              v14[4] = 32;
              *(_DWORD *)v14 = 537549856;
              *((_QWORD *)v5 + 4) += 5;
            }
            else
            {
              llvm::raw_ostream::write(v5, " \\\n  ");
            }
          }
        }
        else
        {
          v8 = v13;
        }
        v16 = (void *)*((_QWORD *)v5 + 4);
        if (v13 <= *((_QWORD *)v5 + 3) - (_QWORD)v16)
        {
          if (v13)
          {
            memcpy(v16, v11, v13);
            *((_QWORD *)v5 + 4) += v13;
          }
        }
        else
        {
          llvm::raw_ostream::write(v5, (const char *)v11);
        }
        v6 += 3;
      }
      while (v6 != v7);
    }
    v17 = (_BYTE *)*((_QWORD *)v5 + 4);
    if ((unint64_t)v17 >= *((_QWORD *)v5 + 3))
    {
      llvm::raw_ostream::write(v5);
    }
    else
    {
      *((_QWORD *)v5 + 4) = v17 + 1;
      *v17 = 58;
    }
    v18 = *(void ***)(a1 + 40);
    v62 = *(void ***)(a1 + 48);
    v63 = ((char *)v62 - (char *)v18) / 24;
    if (v62 != v18)
    {
      v19 = v8 + 1;
      v20 = 24 * v63;
      v21 = *(void ***)(a1 + 40);
      do
      {
        v22 = *((_BYTE *)v21 + 23);
        v23 = v22 < 0;
        if (v22 >= 0)
          v24 = v21;
        else
          v24 = *v21;
        v25 = v22 & 0x7F;
        if (v23)
          v26 = (size_t)v21[1];
        else
          v26 = v25;
        v27 = (_DWORD *)*((_QWORD *)v5 + 4);
        if ((v19 + v26 + 1 - 74) <= 0xFFFFFFB3)
        {
          if (*((_QWORD *)v5 + 3) - (_QWORD)v27 > 3uLL)
          {
            *v27 = 537549856;
            v27 = (_DWORD *)(*((_QWORD *)v5 + 4) + 4);
            *((_QWORD *)v5 + 4) = v27;
          }
          else
          {
            llvm::raw_ostream::write(v5, " \\\n ");
            v27 = (_DWORD *)*((_QWORD *)v5 + 4);
          }
          v19 = 2;
        }
        if ((unint64_t)v27 >= *((_QWORD *)v5 + 3))
        {
          llvm::raw_ostream::write(v5);
        }
        else
        {
          *((_QWORD *)v5 + 4) = (char *)v27 + 1;
          *(_BYTE *)v27 = 32;
        }
        sub_22E726500(v5, v24, v26, *(_DWORD *)(a1 + 128));
        v19 += v26 + 1;
        v21 += 3;
        v20 -= 24;
      }
      while (v20);
    }
    v28 = (_BYTE *)*((_QWORD *)v5 + 4);
    if ((unint64_t)v28 >= *((_QWORD *)v5 + 3))
    {
      llvm::raw_ostream::write(v5);
    }
    else
    {
      *((_QWORD *)v5 + 4) = v28 + 1;
      *v28 = 10;
    }
    if (v62 != v18 && *(_BYTE *)(a1 + 121))
    {
      v29 = 0;
      v30 = 24 * v63;
      do
      {
        if (v29 != *(_DWORD *)(a1 + 132))
        {
          v31 = (_BYTE *)*((_QWORD *)v5 + 4);
          if ((unint64_t)v31 >= *((_QWORD *)v5 + 3))
          {
            llvm::raw_ostream::write(v5);
          }
          else
          {
            *((_QWORD *)v5 + 4) = v31 + 1;
            *v31 = 10;
          }
          v32 = *((_BYTE *)v18 + 23);
          v33 = v32 < 0;
          if (v32 >= 0)
            v34 = v18;
          else
            v34 = *v18;
          v35 = v32 & 0x7F;
          if (v33)
            v36 = (size_t)v18[1];
          else
            v36 = v35;
          sub_22E726500(v5, v34, v36, *(_DWORD *)(a1 + 128));
          v37 = (_WORD *)*((_QWORD *)v5 + 4);
          if (*((_QWORD *)v5 + 3) - (_QWORD)v37 > 1uLL)
          {
            *v37 = 2618;
            *((_QWORD *)v5 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v5, ":\n");
          }
        }
        v18 += 3;
        ++v29;
        v30 -= 24;
      }
      while (v30);
    }
    llvm::vfs::OutputFile::keep((llvm::vfs::OutputFile *)v74);
    if (v65)
    {
      *(_QWORD *)(a2 + 312) = 0x2FF00000000;
      if (*(char *)(a2 + 311) < 0)
      {
        **(_BYTE **)(a2 + 288) = 0;
        *(_QWORD *)(a2 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a2 + 288) = 0;
        *(_BYTE *)(a2 + 311) = 0;
      }
      v69 = (unsigned __int8 *)(a2 + 320);
      v70 = 0;
      v71 = a2;
      v72 = 1;
      *(_BYTE *)(a2 + 320) = 0;
      *(_DWORD *)(a2 + 664) = 0;
      v51 = *(unsigned int *)(a2 + 776);
      if ((_DWORD)v51)
      {
        v52 = *(_QWORD *)(a2 + 768);
        v53 = 56 * v51;
        do
        {
          if (*(char *)(v52 + v53 - 9) < 0)
            operator delete(*(void **)(v52 + v53 - 32));
          v53 -= 56;
        }
        while (v53);
      }
      *(_DWORD *)(a2 + 776) = 0;
      v54 = *(_BYTE *)(a1 + 95);
      v55 = v54 < 0;
      if (v54 >= 0)
        v56 = (void *)(a1 + 72);
      else
        v56 = *(void **)(a1 + 72);
      v57 = v54 & 0x7F;
      if (v55)
        v58 = *(_QWORD *)(a1 + 80);
      else
        v58 = v57;
      sub_22E3B89A8(&v69, v56, v58);
      v64 = v65;
      v65 = 0;
      sub_22F2432A8(&v64, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v59 = &__p;
      else
        v59 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v60 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
      else
        v60 = __p.__r_.__value_.__l.__size_;
      v61.n128_f64[0] = sub_22E3B89A8(&v69, v59, v60);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v64)
        (*(void (**)(char *, __n128))(*(_QWORD *)v64 + 8))(v64, v61);
      sub_22E3BB0B8((uint64_t)&v69);
      if (v65)
        (*(void (**)(char *))(*(_QWORD *)v65 + 8))(v65);
    }
  }
  if ((v76 & 1) == 0)
    return sub_22E6D7A48((uint64_t)v74);
  result = v74[0];
  v74[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_22E726500(llvm::raw_ostream *a1, void *__src, size_t __len, int a4)
{
  void *p_p;
  size_t v9;
  size_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  llvm::raw_ostream *v19;
  uint64_t v20;
  _BYTE *v21;
  char v22;
  _BYTE *v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  void *__p;
  size_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  __int16 v31;
  void *v32;
  __int128 v33;
  _QWORD v34[33];

  v34[32] = *MEMORY[0x24BDAC8D0];
  v32 = v34;
  v33 = xmmword_22F44E320;
  if (!__src)
  {
    __p = 0;
    v27 = 0;
    v28 = 0;
    goto LABEL_12;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    p_p = operator new(v9 + 1);
    v27 = __len;
    v28 = v10 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v28) = __len;
    p_p = &__p;
    if (!__len)
      goto LABEL_11;
  }
  memmove(p_p, __src, __len);
LABEL_11:
  *((_BYTE *)p_p + __len) = 0;
LABEL_12:
  v31 = 260;
  v29 = &__p;
  llvm::sys::path::native();
  if (SHIBYTE(v28) < 0)
    operator delete(__p);
  if (a4 != 1)
  {
    v12 = v33;
    if (!(_DWORD)v33)
      goto LABEL_50;
    v13 = 0;
    v14 = -1;
    while (1)
    {
      v15 = *((unsigned __int8 *)v32 + v13);
      switch(v15)
      {
        case ' ':
          v18 = (_BYTE *)*((_QWORD *)a1 + 4);
          if ((unint64_t)v18 >= *((_QWORD *)a1 + 3))
          {
            llvm::raw_ostream::write(a1);
            if (v13)
            {
LABEL_34:
              v20 = v14;
              do
              {
                if (*((_BYTE *)v32 + v20) != 92)
                  break;
                v21 = (_BYTE *)*((_QWORD *)a1 + 4);
                if ((unint64_t)v21 >= *((_QWORD *)a1 + 3))
                {
                  llvm::raw_ostream::write(a1);
                }
                else
                {
                  *((_QWORD *)a1 + 4) = v21 + 1;
                  *v21 = 92;
                }
                --v20;
              }
              while (v20 != -1);
            }
          }
          else
          {
            *((_QWORD *)a1 + 4) = v18 + 1;
            *v18 = 92;
            if (v13)
              goto LABEL_34;
          }
          break;
        case '$':
          v17 = (_BYTE *)*((_QWORD *)a1 + 4);
          if ((unint64_t)v17 >= *((_QWORD *)a1 + 3))
          {
            v19 = a1;
LABEL_32:
            llvm::raw_ostream::write(v19);
            break;
          }
          *((_QWORD *)a1 + 4) = v17 + 1;
          *v17 = 36;
          break;
        case '#':
          v16 = (_BYTE *)*((_QWORD *)a1 + 4);
          if ((unint64_t)v16 >= *((_QWORD *)a1 + 3))
          {
            v19 = a1;
            goto LABEL_32;
          }
          *((_QWORD *)a1 + 4) = v16 + 1;
          *v16 = 92;
          break;
      }
      v22 = *((_BYTE *)v32 + v13);
      v23 = (_BYTE *)*((_QWORD *)a1 + 4);
      if ((unint64_t)v23 >= *((_QWORD *)a1 + 3))
      {
        llvm::raw_ostream::write(a1);
      }
      else
      {
        *((_QWORD *)a1 + 4) = v23 + 1;
        *v23 = v22;
      }
      ++v13;
      ++v14;
      if (v13 == v12)
        goto LABEL_50;
    }
  }
  v29 = v32;
  v30 = v33;
  if (llvm::StringRef::find_first_of() == -1)
  {
    llvm::raw_ostream::write(a1, (const char *)v32);
  }
  else
  {
    v11 = (_BYTE *)*((_QWORD *)a1 + 4);
    if ((unint64_t)v11 >= *((_QWORD *)a1 + 3))
    {
      a1 = (llvm::raw_ostream *)llvm::raw_ostream::write(a1);
    }
    else
    {
      *((_QWORD *)a1 + 4) = v11 + 1;
      *v11 = 34;
    }
    v24 = (llvm::raw_ostream *)llvm::raw_ostream::write(a1, (const char *)v32);
    v25 = (_BYTE *)*((_QWORD *)v24 + 4);
    if ((unint64_t)v25 >= *((_QWORD *)v24 + 3))
    {
      llvm::raw_ostream::write(v24);
    }
    else
    {
      *((_QWORD *)v24 + 4) = v25 + 1;
      *v25 = 34;
    }
  }
LABEL_50:
  if (v32 != v34)
    free(v32);
}

void sub_22E726838(uint64_t a1, char *a2)
{
  char *v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v10;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v5 + 8 * v4;
    if (v5 <= (unint64_t)a2 && v8 > (unint64_t)a2)
    {
      v10 = &a2[-v5];
      sub_22F2AA5E0(a1);
      v5 = *(_QWORD *)a1;
      v2 = &v10[*(_QWORD *)a1];
    }
    else
    {
      sub_22F2AA5E0(a1);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(_QWORD *)v2;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v5 + 8 * v6) = v7;
  *(_DWORD *)(a1 + 8) = v6 + 1;
}

uint64_t sub_22E7268BC(uint64_t a1)
{
  _DWORD *v2;
  int v3;
  void **v5;

  *(_QWORD *)a1 = &off_24FA70328;
  v5 = (void **)(a1 + 96);
  sub_22E3B3CC8(&v5);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  v2 = *(_DWORD **)(a1 + 64);
  if (v2)
  {
    v3 = v2[2] - 1;
    v2[2] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 32))(v2);
  }
  *(_QWORD *)a1 = off_24FA702D8;
  v5 = (void **)(a1 + 40);
  sub_22E3B3CC8(&v5);
  sub_22E3B3AD0(a1 + 8);
  return a1;
}

void sub_22E726960()
{
  JUMPOUT(0x2348A0E9CLL);
}

_DWORD *sub_22E726974(_DWORD *result, unsigned int a2, int a3, int a4)
{
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  if (!a3)
  {
    v5 = result;
    result = sub_22E49F3DC(*(_QWORD **)(*((_QWORD *)result + 2) + 88), a2);
    if (result)
    {
      if (*(_QWORD *)((*((_QWORD *)result + 2) & 0xFFFFFFFFFFFFFFF8) + 8))
      {
        v6 = *((_QWORD *)v5 + 1);
        v8 = llvm::sys::path::remove_leading_dotslash();
        if (a4)
          v9 = a4 == 3;
        else
          v9 = 1;
        v10 = !v9;
        return (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 56))(v6, v8, v7, 0, v10, 0, 0);
      }
    }
  }
  return result;
}

uint64_t sub_22E726A0C(uint64_t a1, unint64_t *a2, uint64_t a3, int a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v6 = *a2;
  do
  {
    v7 = *(_QWORD *)(v6 + 8);
    if ((v7 & 2) == 0)
      break;
    v6 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while (v6);
  v9 = llvm::sys::path::remove_leading_dotslash();
  if (a4)
    v10 = a4 == 3;
  else
    v10 = 1;
  v11 = !v10;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8)
                                                                                              + 56))(*(_QWORD *)(a1 + 8), v9, v8, 0, v11, 0, 0);
}

uint64_t sub_22E726A84(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a9)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(result + 8)
                                                                                                + 56))(*(_QWORD *)(result + 8), a4, a5, 0, 0, 0, 1);
  return result;
}

uint64_t sub_22E726AB8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48));
}

uint64_t sub_22E726AD0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (a6)
  {
    v8 = result;
    do
    {
      v9 = *(_QWORD *)(a6 + 8);
      if ((v9 & 2) == 0)
        break;
      a6 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while ((v9 & 0xFFFFFFFFFFFFFFFCLL) != 0);
    v11 = llvm::sys::path::remove_leading_dotslash();
    if (a7)
      v12 = a7 == 3;
    else
      v12 = 1;
    v13 = !v12;
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v8 + 8)
                                                                                                + 56))(*(_QWORD *)(v8 + 8), v11, v10, 0, v13, 0, 0);
  }
  return result;
}

void sub_22E726B58()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E726B6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a3 + 88);
  do
  {
    v5 = (_QWORD *)v4;
    v6 = *(_QWORD *)(v4 + 8);
    if ((v6 & 2) == 0)
      break;
    v4 = v6 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while (v4);
  return (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8)
                                                                                              + 56))(*(_QWORD *)(a1 + 8), v5 + 4, *v5, 0, a4, 0, 0);
}

void sub_22E726BAC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E726BC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8)
                                                                                               + 56))(*(_QWORD *)(a1 + 8), a2, a3, 1, 0, 1, 0);
}

uint64_t sub_22E726BE0()
{
  return 1;
}

uint64_t sub_22E726BE8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_22E726BF8(uint64_t a1, _QWORD *a2, size_t a3, uint64_t a4, char a5, char a6)
{
  size_t v8;
  _QWORD *v9;
  unint64_t v11;
  size_t *v12;
  uint64_t v13;
  size_t v14;

  if ((a5 & 1) == 0 && (a6 & 1) == 0)
  {
    v8 = a3;
    v9 = a2;
    v11 = sub_22F2A7C2C(*(_QWORD *)(a1 + 16), a2, a3, 0, 1);
    if (v11)
    {
      do
      {
        v12 = (size_t *)v11;
        v13 = *(_QWORD *)(v11 + 8);
        if ((v13 & 2) == 0)
          break;
        v11 = v13 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v13 & 0xFFFFFFFFFFFFFFFCLL) != 0);
      v14 = *v12;
      v9 = v12 + 4;
      v8 = v14;
    }
    (*(void (**)(_QWORD, _QWORD *, size_t, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8), v9, v8, 1, a4, 0, 0);
  }
  return 1;
}

void sub_22E726C90()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E726CA4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (!*(_BYTE *)(result + 16))
  {
    v4 = *(_QWORD *)(a3 + 88);
    do
    {
      v5 = (_QWORD *)v4;
      v6 = *(_QWORD *)(v4 + 8);
      if ((v6 & 2) == 0)
        break;
      v4 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v4);
    return (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(result + 8)
                                                                                                + 56))(*(_QWORD *)(result + 8), v5 + 4, *v5, 0, a4, 0, 0);
  }
  return result;
}

uint64_t sub_22E726CEC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  if (*(_BYTE *)(result + 16))
  {
    v4 = *(_QWORD *)(result + 8);
    v5 = *(_QWORD *)(a2 + 88);
    do
    {
      v6 = (_QWORD *)v5;
      v7 = *(_QWORD *)(v5 + 8);
      if ((v7 & 2) == 0)
        break;
      v5 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v5);
    return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 56))(v4, v6 + 4, *v6, 0, a4, 0, 0);
  }
  return result;
}

uint64_t sub_22E726D34(uint64_t a1, const void *a2, size_t a3, const void *a4, size_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v10 = operator new();
  v11 = v10;
  *(_QWORD *)v10 = off_24FA70638;
  *(_QWORD *)(v10 + 8) = a1;
  v12 = (_QWORD *)(v10 + 16);
  if (!a2)
  {
    *v12 = 0;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = 0;
    goto LABEL_12;
  }
  if (a3 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_26;
  if (a3 >= 0x17)
  {
    v13 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v13 = a3 | 7;
    v14 = v13 + 1;
    v12 = operator new(v13 + 1);
    *(_QWORD *)(v11 + 24) = a3;
    *(_QWORD *)(v11 + 32) = v14 | 0x8000000000000000;
    *(_QWORD *)(v11 + 16) = v12;
  }
  else
  {
    *(_BYTE *)(v10 + 39) = a3;
    if (!a3)
      goto LABEL_11;
  }
  memmove(v12, a2, a3);
LABEL_11:
  *((_BYTE *)v12 + a3) = 0;
LABEL_12:
  v15 = (_QWORD *)(v11 + 40);
  if (!a4)
  {
    *v15 = 0;
    *(_QWORD *)(v11 + 48) = 0;
    *(_QWORD *)(v11 + 56) = 0;
    goto LABEL_23;
  }
  if (a5 > 0x7FFFFFFFFFFFFFF7)
LABEL_26:
    abort();
  if (a5 >= 0x17)
  {
    v16 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a5 | 7) != 0x17)
      v16 = a5 | 7;
    v17 = v16 + 1;
    v15 = operator new(v16 + 1);
    *(_QWORD *)(v11 + 48) = a5;
    *(_QWORD *)(v11 + 56) = v17 | 0x8000000000000000;
    *(_QWORD *)(v11 + 40) = v15;
  }
  else
  {
    *(_BYTE *)(v11 + 63) = a5;
    if (!a5)
      goto LABEL_22;
  }
  memmove(v15, a4, a5);
LABEL_22:
  *((_BYTE *)v15 + a5) = 0;
LABEL_23:
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  *(_DWORD *)(v11 + 80) = 0;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_OWORD *)(v11 + 116) = 0u;
  v19 = v11;
  sub_22F2968D4(a1, &v19);
  result = v19;
  v19 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_22E726EE4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FA70638;
  sub_22F2AA6A0(a1 + 112);
  llvm::deallocate_buffer(*(llvm **)(a1 + 112), (void *)(40 * *(unsigned int *)(a1 + 128)));
  sub_22F257CF8(a1 + 64);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_22E726F54(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FA70638;
  sub_22F2AA6A0(a1 + 112);
  llvm::deallocate_buffer(*(llvm **)(a1 + 112), (void *)(40 * *(unsigned int *)(a1 + 128)));
  sub_22F257CF8(a1 + 64);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E726FD4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  _DWORD *v19;
  unsigned int v20;
  _DWORD *v21;
  unint64_t *v22;
  unsigned int v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;

  v26 = a9;
  if (a9)
  {
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(_QWORD *)(v10 + 88);
    if (a2 < 0)
      a2 = sub_22F1E22F0(*(_QWORD **)(v10 + 88), a2);
    v12 = a2 & 0x7FFFFFFF;
    v13 = *(_DWORD *)(v11 + 304);
    v14 = v13 + 1;
    if (v13 + 1 > 1)
    {
      if ((v13 & 0x80000000) != 0)
      {
        v16 = -2 - v13;
        if (((*(_QWORD *)(*(_QWORD *)(v11 + 224) + 8 * ((-2 - v13) >> 6)) >> (-2 - v13)) & 1) != 0)
          v15 = (_DWORD *)(*(_QWORD *)(v11 + 200) + 24 * v16);
        else
          v15 = (_DWORD *)sub_22F1E1134(v11, v16, 0);
      }
      else
      {
        v15 = (_DWORD *)(*(_QWORD *)(v11 + 184) + 24 * v13);
      }
    }
    else
    {
      v15 = *(_DWORD **)(v11 + 184);
    }
    if ((*v15 & 0x7FFFFFFFu) <= v12
      && (v13 == -2
       || (v14 != *(_DWORD *)(v11 + 192)
         ? ((v14 & 0x80000000) != 0
          ? ((v20 = -3 - v13,
              ((*(_QWORD *)(*(_QWORD *)(v11 + 224) + 8 * ((-3 - v13) >> 6)) >> (-3 - v13)) & 1) == 0)
           ? (v19 = (_DWORD *)sub_22F1E1134(v11, v20, 0))
           : (v19 = (_DWORD *)(*(_QWORD *)(v11 + 200) + 24 * v20)))
          : (v19 = (_DWORD *)(*(_QWORD *)(v11 + 184) + 24 * v14)),
            v18 = *v19 & 0x7FFFFFFF)
         : (v18 = *(_DWORD *)(v11 + 216)),
           v18 > v12)))
    {
      v17 = *(_DWORD *)(v11 + 304);
    }
    else
    {
      v17 = sub_22F1E1EE8(v11, v12);
    }
    v21 = sub_22E49F3DC((_QWORD *)v11, v17);
    if (v21)
    {
      v25 = *(_QWORD *)((*((_QWORD *)v21 + 2) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v25)
      {
        v22 = sub_22F2AA764(a1 + 112, &v25);
        v23 = *((_DWORD *)v22 + 4);
        if (v23 >= *((_DWORD *)v22 + 5))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v23 = *((_DWORD *)v22 + 4);
        }
        *(_QWORD *)(v22[1] + 8 * v23) = a9;
        ++*((_DWORD *)v22 + 4);
        v24 = (_QWORD *)(a1 + 64);
        sub_22E72785C(v24, &v26);
        sub_22E72785C(v24, &v25);
      }
    }
  }
}

uint64_t sub_22E7271C4(uint64_t a1)
{
  _DWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  unint64_t v12;
  size_t *v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  size_t v17;
  char v18;
  BOOL v19;
  const void *v20;
  size_t v21;
  size_t v22;
  size_t v23;
  void *v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  unint64_t v29;
  const char *p_p;
  llvm::raw_ostream *v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t i;
  unint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  unint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  void *v49[2];
  unint64_t v50;
  void *__p;
  char v52;
  _BYTE v53[24];
  uint64_t v54;
  _DWORD *v55;
  std::error_code v56;

  v56.__val_ = 0;
  v56.__cat_ = std::system_category();
  llvm::raw_fd_ostream::raw_fd_ostream();
  v2 = v55;
  if ((unint64_t)(v54 - (_QWORD)v55) > 0x18)
  {
    *(_OWORD *)v55 = *(_OWORD *)"digraph \"dependencies\" {\n";
    *(_OWORD *)((char *)v2 + 9) = *(_OWORD *)"dependencies\" {\n";
    v55 = (_DWORD *)((char *)v55 + 25);
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v53, "digraph \"dependencies\" {\n");
  }
  v3 = *(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88);
  if ((v3 & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    v5 = (v3 >> 3);
    v6 = "header_";
    v7 = " [ shape=\"box\", label=\"";
    do
    {
      llvm::raw_ostream::indent((llvm::raw_ostream *)v53);
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v4);
      do
      {
        v9 = *(_QWORD *)(v8 + 8);
        v8 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v9 & 2) != 0 && v8);
      v10 = v55;
      if ((unint64_t)(v54 - (_QWORD)v55) > 6)
      {
        *(_DWORD *)((char *)v55 + 3) = 1601332580;
        *v10 = 1684104552;
        v55 = (_DWORD *)((char *)v55 + 7);
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v53, v6);
      }
      llvm::raw_ostream::operator<<();
      v11 = v55;
      if ((unint64_t)(v54 - (_QWORD)v55) > 0x16)
      {
        *(_OWORD *)v55 = *(_OWORD *)v7;
        *(_QWORD *)((char *)v11 + 15) = *(_QWORD *)(v7 + 15);
        v55 = (_DWORD *)((char *)v55 + 23);
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v53, v7);
      }
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v4);
      do
      {
        v13 = (size_t *)v12;
        v14 = *(_QWORD *)(v12 + 8);
        if ((v14 & 2) == 0)
          break;
        v12 = v14 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while (v12);
      v17 = *v13;
      v15 = (char *)(v13 + 4);
      v16 = v17;
      v18 = *(_BYTE *)(a1 + 63);
      v19 = v18 < 0;
      if (v18 >= 0)
        v20 = (const void *)(a1 + 40);
      else
        v20 = *(const void **)(a1 + 40);
      v21 = v18 & 0x7F;
      if (v19)
        v22 = *(_QWORD *)(a1 + 48);
      else
        v22 = v21;
      if (v16 >= v22 && (!v22 || !memcmp(v15, v20, v22)))
      {
        if (v16 >= v22)
          v23 = v22;
        else
          v23 = v16;
        v15 += v23;
        v16 -= v23;
      }
      if (v16 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v16 >= 0x17)
      {
        v25 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17)
          v25 = v16 | 7;
        v26 = v7;
        v27 = v6;
        v28 = v25 + 1;
        v24 = operator new(v25 + 1);
        v29 = v28 | 0x8000000000000000;
        v6 = v27;
        v7 = v26;
        v49[1] = (void *)v16;
        v50 = v29;
        v49[0] = v24;
      }
      else
      {
        HIBYTE(v50) = v16;
        v24 = v49;
        if (!v16)
          goto LABEL_36;
      }
      memmove(v24, v15, v16);
LABEL_36:
      *((_BYTE *)v24 + v16) = 0;
      llvm::DOT::EscapeString();
      if (v52 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      v31 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)v53, p_p);
      v32 = (_DWORD *)*((_QWORD *)v31 + 4);
      if (*((_QWORD *)v31 + 3) - (_QWORD)v32 > 3uLL)
      {
        *v32 = 171662626;
        *((_QWORD *)v31 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(v31, "\"];\n");
      }
      if (v52 < 0)
        operator delete(__p);
      if (SHIBYTE(v50) < 0)
        operator delete(v49[0]);
      ++v4;
    }
    while (v4 != v5);
  }
  v33 = *(_QWORD *)(a1 + 112);
  v34 = *(unsigned int *)(a1 + 128);
  v35 = v33 + 40 * v34;
  if (*(_DWORD *)(a1 + 120))
  {
    if ((_DWORD)v34)
    {
      v36 = 40 * v34;
      v37 = *(_QWORD *)(a1 + 112);
      while ((*(_QWORD *)v37 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v37 += 40;
        v36 -= 40;
        if (!v36)
          goto LABEL_55;
      }
    }
    else
    {
      v37 = *(_QWORD *)(a1 + 112);
    }
  }
  else
  {
LABEL_55:
    v37 = v33 + 40 * v34;
  }
  v38 = v33 + 40 * v34;
  while (v37 != v38)
  {
    v39 = *(unsigned int *)(v37 + 16);
    if ((_DWORD)v39)
    {
      for (i = 0; i != v39; ++i)
      {
        llvm::raw_ostream::indent((llvm::raw_ostream *)v53);
        v41 = *(_QWORD *)v37;
        do
        {
          v42 = *(_QWORD *)(v41 + 8);
          v41 = v42 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while ((v42 & 2) != 0 && v41);
        v43 = v55;
        if ((unint64_t)(v54 - (_QWORD)v55) > 6)
        {
          *(_DWORD *)((char *)v55 + 3) = 1601332580;
          *v43 = 1684104552;
          v55 = (_DWORD *)((char *)v55 + 7);
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v53, "header_");
        }
        llvm::raw_ostream::operator<<();
        if ((unint64_t)(v54 - (_QWORD)v55) > 3)
          *v55++ = 540945696;
        else
          llvm::raw_ostream::write((llvm::raw_ostream *)v53, " -> ");
        v44 = *(_QWORD *)(*(_QWORD *)(v37 + 8) + 8 * i);
        do
        {
          v45 = *(_QWORD *)(v44 + 8);
          v44 = v45 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while ((v45 & 2) != 0 && v44);
        v46 = v55;
        if ((unint64_t)(v54 - (_QWORD)v55) > 6)
        {
          *(_DWORD *)((char *)v55 + 3) = 1601332580;
          *v46 = 1684104552;
          v55 = (_DWORD *)((char *)v55 + 7);
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v53, "header_");
        }
        llvm::raw_ostream::operator<<();
        if ((unint64_t)(v54 - (_QWORD)v55) > 1)
        {
          *(_WORD *)v55 = 2619;
          v55 = (_DWORD *)((char *)v55 + 2);
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v53, ";\n");
        }
      }
    }
    v47 = v37 + 40;
    v37 = v35;
    if (v47 != v35)
    {
      v37 = v47;
      while ((*(_QWORD *)v37 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v37 += 40;
        if (v37 == v35)
        {
          v37 = v35;
          break;
        }
      }
    }
  }
  if ((unint64_t)(v54 - (_QWORD)v55) > 1)
  {
    *(_WORD *)v55 = 2685;
    v55 = (_DWORD *)((char *)v55 + 2);
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v53, "}\n");
  }
  return MEMORY[0x23489CE04](v53);
}

void sub_22E72785C(_QWORD *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE v15[24];

  sub_22F2AAAE4((uint64_t)v15, (uint64_t)a1, a2);
  if (v15[16])
  {
    v5 = (unint64_t *)a1[4];
    v4 = a1[5];
    if ((unint64_t)v5 >= v4)
    {
      v7 = (_QWORD *)a1[3];
      v8 = v5 - v7;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61)
        abort();
      v10 = v4 - (_QWORD)v7;
      if (v10 >> 2 > v9)
        v9 = v10 >> 2;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 >> 61)
          sub_22E3B3F8C();
        v12 = (char *)operator new(8 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = (unint64_t *)&v12[8 * v8];
      *v13 = *a2;
      v6 = v13 + 1;
      if (v5 != v7)
      {
        do
        {
          v14 = *--v5;
          *--v13 = v14;
        }
        while (v5 != v7);
        v5 = (unint64_t *)a1[3];
      }
      a1[3] = v13;
      a1[4] = v6;
      a1[5] = &v12[8 * v11];
      if (v5)
        operator delete(v5);
    }
    else
    {
      *v5 = *a2;
      v6 = v5 + 1;
    }
    a1[4] = v6;
  }
}

uint64_t sub_22E72796C()
{
  unsigned __int8 v0;
  unint64_t v1;
  int v3;
  unint64_t v4;

  v0 = atomic_load((unsigned __int8 *)&qword_253E4AB98);
  v1 = 0x253E4A000uLL;
  if ((v0 & 1) == 0)
  {
    v3 = __cxa_guard_acquire(&qword_253E4AB98);
    v1 = 0x253E4A000uLL;
    if (v3)
    {
      v4 = *MEMORY[0x24BED7368];
      if (!*MEMORY[0x24BED7368])
        v4 = 0xFF51AFD7ED558CCDLL;
      qword_253E4AB90 = v4;
      __cxa_guard_release(&qword_253E4AB98);
      v1 = 0x253E4A000;
    }
  }
  return *(_QWORD *)(v1 + 2960);
}

_QWORD *sub_22E7279E4(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 40 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2AA9E8(a1, (uint64_t)v4, (uint64_t)v4 + 40 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(40 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 40 * v10;
      do
      {
        *result = -4096;
        result += 5;
        v11 -= 40;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22E727AB0(uint64_t a1, int a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(unint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](8 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2AAD0C(a1, v4, &v4[v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(8 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22E727B70(_QWORD *a1)
{
  *a1 = off_24FA707B0;
  sub_22E3B3C18(a1 + 2);
  return a1;
}

uint64_t sub_22E727BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7, uint64_t a8, char *a9, unint64_t a10, uint64_t a11)
{
  uint64_t v19;
  unint64_t v21;
  char *v22;
  _BYTE *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  const void **v29;
  char *v30;
  const void *v31;
  size_t v32;
  char *v33;
  const void *v34;
  size_t v35;
  unint64_t v36;
  llvm *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  _DWORD *v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  int v61;
  _BOOL4 v62;
  BOOL v63;
  unsigned int v64;
  uint64_t (**v65)();
  uint64_t v66;
  unsigned int v67;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  _QWORD *v76;
  llvm::raw_ostream *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  unsigned int v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  _QWORD v101[3];
  void *v102[3];
  void *v103;
  uint64_t v104;
  _BYTE v105[448];
  void *v106;
  uint64_t v107;
  _BYTE v108[240];
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  _QWORD *v113[2];
  llvm *v114;
  uint64_t v115;
  uint64_t *v116;
  void *v117;
  uint64_t v118;
  _BYTE v119[25];
  void *v120;
  uint64_t v121;
  _QWORD v122[4];
  _QWORD v123[6];
  _QWORD v124[2];
  void *v125;
  __int128 v126;
  uint64_t v127;
  char v128;
  void *v129;
  uint64_t v130;
  _BYTE v131[448];
  _QWORD v132[4];
  _QWORD v133[6];
  _QWORD v134[2];
  uint64_t (**v135)();
  uint64_t v136;
  _QWORD v137[6];

  v19 = a11;
  v137[4] = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, a11, a4);
  if (!(_DWORD)a2)
  {
    memset(v101, 0, sizeof(v101));
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a2, a3, v101, a4, a5, a6);
    LODWORD(a6) = 0;
    goto LABEL_3;
  }
  v89 = a5;
  v22 = a9;
  v21 = a10;
  v23 = &a7[12 * a8];
  v24 = (unint64_t)v108;
  v106 = v108;
  v107 = 0x1400000000;
  sub_22F2ABACC((uint64_t)&v106, a7, v23);
  v103 = v105;
  v104 = 0x800000000;
  v91 = a6;
  if (!a10)
    goto LABEL_45;
  v25 = 0;
  v26 = *(_QWORD *)(a1 + 8);
  v125 = (void *)a3;
  v83 = v26;
  v126 = (unint64_t)v26;
  v127 = 0;
  v128 = 1;
  v129 = v131;
  v130 = 0x800000000;
  v132[1] = 0;
  v132[0] = 0;
  v132[2] = v133;
  v132[3] = 0x400000000;
  v133[4] = v134;
  v134[0] = 0;
  v134[1] = 1;
  v133[5] = 0;
  do
  {
    v27 = &a9[v25];
    v28 = a9[v25 + 47];
    if (v28 < 0)
    {
      if (*((_QWORD *)v27 + 4))
        goto LABEL_8;
    }
    else if (a9[v25 + 47])
    {
LABEL_8:
      v29 = (const void **)(v27 + 24);
      v30 = &a9[v25];
      if (a9[v25 + 8] || *(_DWORD *)v30 != *((_DWORD *)v30 + 1))
      {
        if (v28 >= 0)
          v34 = v29;
        else
          v34 = *v29;
        if (v28 >= 0)
          v35 = a9[v25 + 47];
        else
          v35 = *((_QWORD *)v30 + 4);
        v21 = v21 & 0xFFFFFFFF00000000 | *((unsigned int *)v30 + 2);
        sub_22F3639B8((uint64_t)&v125, *(_QWORD *)v30, v21, v34, v35);
      }
      else
      {
        if (v28 >= 0)
          v31 = v29;
        else
          v31 = *v29;
        if (v28 >= 0)
          v32 = a9[v25 + 47];
        else
          v32 = *(_QWORD *)&a9[v25 + 32];
        sub_22F3633EC((uint64_t)&v125, *(_DWORD *)v30, v31, v32, 0, a9[v25 + 48]);
      }
      goto LABEL_29;
    }
    v33 = &a9[v25];
    if (*(_DWORD *)&a9[v25 + 12] && *((_DWORD *)v33 + 4))
    {
      v94 = v94 & 0xFFFFFFFF00000000 | *(unsigned int *)&a9[v25 + 20];
      sub_22F363738((uint64_t)&v125, *(_DWORD *)&a9[v25], *(_QWORD *)(v33 + 12), *(_DWORD *)&a9[v25 + 20], 0, a9[v25 + 48]);
    }
    else
    {
      v24 = v24 & 0xFFFFFFFF00000000 | *((unsigned int *)v33 + 2);
      sub_22F3638C0((uint64_t)&v125, *(_QWORD *)v33, v24);
    }
LABEL_29:
    v25 += 56;
  }
  while (56 * a10 != v25);
  v109 = a3;
  v110 = v83;
  v113[1] = 0;
  v113[0] = 0;
  v111 = 0;
  v112 = (char *)v113;
  v115 = 0;
  v114 = 0;
  LODWORD(v116) = 0;
  v117 = v119;
  v118 = 0x200000000;
  sub_22F41F1AC((llvm::StringMapImpl *)&v120, v83, 0);
  v122[1] = 0;
  v122[0] = 0;
  v122[2] = v123;
  v122[3] = 0x400000000;
  v123[4] = v124;
  v123[5] = 0;
  v124[0] = 0;
  v124[1] = 1;
  if (sub_22F363D74(&v109, (uint64_t)&v125))
  {
    v135 = &off_24FA70810;
    v136 = (uint64_t)&v103;
    sub_22EF4E36C((uint64_t)&v109, (uint64_t)&v135, 1);
  }
  v36 = (unint64_t)&v112;
  sub_22E3B4EF4((uint64_t)v122);
  free(v120);
  sub_22E3B4EF4((uint64_t)&v121);
  v19 = a11;
  if (v117 != v119)
    free(v117);
  v37 = v114;
  if ((_DWORD)v116)
  {
    v39 = 56 * v116;
    v40 = (char *)v114 + 24;
    do
    {
      if (*((_DWORD *)v40 - 6) <= 0xFFFFFFFD)
      {
        v41 = (char *)*((_QWORD *)v40 - 2);
        if (v40 != v41)
          free(v41);
      }
      v40 += 56;
      v39 -= 56;
    }
    while (v39);
    v37 = v114;
    v38 = 56 * v116;
  }
  else
  {
    v38 = 0;
  }
  v24 = (unint64_t)v108;
  llvm::deallocate_buffer(v37, (void *)v38);
  sub_22E3B4AB8((uint64_t)&v112, v113[0]);
  sub_22E3B4EF4((uint64_t)v132);
  if (v129 != v131)
    free(v129);
  v22 = (char *)v103;
  if ((_DWORD)v104)
  {
    v42 = 0;
    v95 = v104;
    v43 = 56 * v104;
    do
    {
      if (*(_DWORD *)&v22[v42])
      {
        v44 = &v22[v42];
        if (*(_DWORD *)&v22[v42 + 4])
        {
          v36 = v36 & 0xFFFFFFFF00000000 | *((unsigned int *)v44 + 2);
          sub_22E4D6448((uint64_t)&v106, *(_QWORD *)v44, v36);
        }
      }
      v42 += 56;
    }
    while (v43 != v42);
    v24 = (unint64_t)v108;
  }
  else
  {
LABEL_45:
    v95 = 0;
  }
  a6 = a2;
  if ((a2 & 0x80000000) != 0)
    a6 = sub_22F423AE4(a3, a2);
  if ((_DWORD)a6)
  {
    sub_22F1E2F68(a3, a6, (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 4) >> 13) & 1, (uint64_t)&v99);
    v45 = v99;
    v46 = HIDWORD(v100);
  }
  else
  {
    v46 = 0;
    v45 = 0;
    v99 = 0uLL;
    v100 = 0;
  }
  if (v45)
    v47 = v46;
  else
    v47 = 0;
  if (v45)
    v48 = a3;
  else
    v48 = 0;
  if (*(_DWORD *)(a1 + 28) != (_DWORD)v47)
  {
    *(_DWORD *)(a1 + 28) = v47;
    if ((_DWORD)a4 != 1 || (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 4) & 0x8000) != 0)
    {
      if ((_DWORD)v47)
      {
        sub_22F2AAEDC((_QWORD *)a1, v47, v48);
      }
      else
      {
        sub_22F2AAFAC(a1, *(uint64_t **)(a3 + 480), *(_DWORD *)(a3 + 488));
        sub_22F2AB078(a1, a6, a3);
      }
    }
  }
  v98 = v100;
  v97 = v99;
  (*(void (**)(uint64_t, _QWORD, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a6, a3, &v97, a4, v89, v91);
  sub_22F2AADF0(a1, a6, a3, a4, (uint64_t)v106, v107, (uint64_t)v22, v95);
  if ((a2 & 0x80000000) != 0)
  {
    v49 = v107;
    v135 = (uint64_t (**)())v137;
    v136 = 0x800000000;
    v90 = v106;
    v96 = v107;
    v92 = 0;
    v84 = (char *)v106 + 4;
    v85 = 12 * v107;
    while (1)
    {
      v50 = a2;
      if (sub_22F1E2440((_QWORD *)a3, a2, 0))
        LODWORD(a2) = sub_22F1E25A4((_QWORD *)a3, a2);
      v51 = v136;
      if (v136 >= (unint64_t)HIDWORD(v136))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v51 = v136;
      }
      *((_DWORD *)v135 + v51) = a2;
      LODWORD(v136) = v136 + 1;
      v125 = (char *)&v126 + 8;
      *(_QWORD *)&v126 = 0x400000000;
      sub_22E7286B0(v50, a3, (uint64_t)v90, v49, (uint64_t)&v125);
      if (!(_DWORD)v49)
        goto LABEL_81;
      v52 = 0;
      v53 = v84;
      v54 = v85;
      do
      {
        v55 = *(v53 - 1);
        if (v55)
          v55 = *v53 != 0;
        v52 += v55;
        v53 += 3;
        v54 -= 12;
      }
      while (v54);
      if (v126 < v52)
      {
        v56 = 0;
      }
      else
      {
LABEL_81:
        v57 = a6;
        LODWORD(v109) = 0;
        v110 = 0;
        v56 = 0;
        if (sub_22F1E2440((_QWORD *)a3, v50, &v109))
        {
          if ((_DWORD)v126)
          {
            v86 = v19;
            v87 = v24;
            v58 = v125;
            v59 = 12 * v126 - 12;
            while (1)
            {
              v60 = v109;
              v61 = *v58;
              if (v61 != HIDWORD(*v58))
                break;
              LODWORD(v102[0]) = 0;
              v62 = sub_22F1E2440((_QWORD *)a3, v61, v102);
              v56 = LODWORD(v102[0]) == v60 && v62;
              v58 = (_QWORD *)((char *)v58 + 12);
              v63 = v56 != 1 || v59 == 0;
              v59 -= 12;
              if (v63)
              {
                v19 = v86;
                v24 = v87;
                goto LABEL_98;
              }
            }
            v19 = v86;
            v24 = v87;
            do
            {
              LODWORD(v102[0]) = 0;
              v56 = 0;
            }
            while (sub_22F1E2440((_QWORD *)a3, v61, v102) && LODWORD(v102[0]) == v60);
          }
          else
          {
            v56 = 1;
          }
        }
LABEL_98:
        a6 = v57;
        v49 = v96;
      }
      if (v125 != (char *)&v126 + 8)
        free(v125);
      v64 = v92;
      if (v56)
        v64 = v136;
      v92 = v64;
      LODWORD(a2) = sub_22F2AB344((_QWORD *)a3, v50);
      if ((a2 & 0x80000000) == 0)
      {
        LODWORD(a2) = sub_22F2AB344((_QWORD *)a3, *((unsigned int *)v135 + v136 - 1));
        if ((a2 & 0x80000000) == 0)
          break;
      }
    }
    v65 = v135;
    v66 = 4 * v136 - 4 * v92;
    if ((_DWORD)v136 != v92)
      memmove(v135, (char *)v135 + 4 * v92, 4 * v136 - 4 * v92);
    LODWORD(v136) = (unint64_t)((char *)v65 + v66 - (char *)v135) >> 2;
    v67 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 12);
    if (v136 <= v67 || v67 == 0)
    {
      if ((_DWORD)v136)
      {
        v69 = 4 * v136;
        v70 = (char *)v135 - 4;
        do
        {
          sub_22F2AB188(a1, *(unsigned int *)&v70[v69], (_QWORD *)a3, (uint64_t)v90, v96);
          v69 -= 4;
        }
        while (v69);
      }
    }
    else
    {
      v88 = v24;
      v93 = a6;
      if (v67 >= 2)
      {
        v73 = -4 * (v67 >> 1);
        v74 = (unsigned int *)v135 + v136 - 1;
        do
        {
          v75 = *v74--;
          sub_22F2AB188(a1, v75, (_QWORD *)a3, (uint64_t)v90, v96);
          v73 += 4;
        }
        while (v73);
      }
      v125 = &v127;
      v126 = xmmword_22F45DF30;
      sub_22F242C48((uint64_t)&v109, (uint64_t)&v125);
      v76 = v113[0];
      if ((unint64_t)(v112 - (char *)v113[0]) > 9)
      {
        *((_WORD *)v113[0] + 4) = 8295;
        *v76 = *(_QWORD *)"(skipping ";
        v113[0] = (_QWORD *)((char *)v113[0] + 10);
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v109, "(skipping ");
      }
      v77 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v78 = (void *)*((_QWORD *)v77 + 4);
      if (*((_QWORD *)v77 + 3) - (_QWORD)v78 > 0x42uLL)
      {
        qmemcpy(v78, " expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)", 67);
        *((_QWORD *)v77 + 4) += 67;
      }
      else
      {
        llvm::raw_ostream::write(v77, " expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)");
      }
      v24 = v88;
      LODWORD(a6) = v93;
      v79 = *v116;
      v80 = v116[1];
      memset(v102, 0, sizeof(v102));
      (*(void (**)(uint64_t, _QWORD, _QWORD, void **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 0, 0, v102, 1, v79, v80);
      if ((v67 & 1) + (v67 >> 1))
      {
        v81 = 4 * ((v67 & 1) + (v67 >> 1));
        v82 = (char *)v135 - 4;
        do
        {
          sub_22F2AB188(a1, *(unsigned int *)&v82[v81], (_QWORD *)a3, (uint64_t)v90, v96);
          v81 -= 4;
        }
        while (v81);
      }
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v109);
      if (v125 != &v127)
        free(v125);
    }
    if (v135 != v137)
      free(v135);
  }
  v71 = (char *)v103;
  if ((_DWORD)v104)
  {
    v72 = 56 * v104;
    do
    {
      if (v71[v72 - 9] < 0)
        operator delete(*(void **)&v71[v72 - 32]);
      v72 -= 56;
    }
    while (v72);
    v71 = (char *)v103;
  }
  if (v71 != v105)
    free(v71);
  if (v106 != (void *)v24)
    free(v106);
LABEL_3:
  *(_DWORD *)(a1 + 24) = a6;
  *(_DWORD *)(a1 + 32) = a4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, v19, a4);
}

void sub_22E7286B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  char v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  _DWORD *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  _DWORD *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  _DWORD *v28;
  unsigned int v29;
  uint64_t i;
  unsigned int v31;
  unsigned int v32;
  _DWORD *v33;
  unsigned int v34;
  unsigned int v35;
  _DWORD *v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  unsigned int v54;
  _DWORD *v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  _DWORD *v59;
  unsigned int v60;
  unint64_t v62;
  unint64_t v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  int v67;
  char v68;
  _QWORD v69[2];
  void *v70;
  uint64_t v71;
  _BYTE v72[16];
  _QWORD v73[2];
  unsigned int v74;
  void *__base;
  size_t __nel;
  _BYTE v77[16];
  char *v78;
  uint64_t v79;
  _QWORD v80[4];

  v80[2] = *MEMORY[0x24BDAC8D0];
  v69[0] = a1;
  v69[1] = a2;
  v8 = sub_22F1DFF28((uint64_t)v69);
  if (a4)
  {
    v9 = a3 + 12 * a4;
    v64 = v8;
    v65 = v9;
    while (1)
    {
      v10 = *(_DWORD *)a3;
      if (*(_DWORD *)a3)
      {
        LODWORD(v11) = *(_DWORD *)(a3 + 4);
        if ((_DWORD)v11)
          break;
      }
LABEL_108:
      a3 += 12;
      if (a3 == v9)
        return;
    }
    v12 = *(_BYTE *)(a3 + 8);
    v68 = v12;
    v13 = *(_DWORD *)(a2 + 304);
    v14 = v13 + 1;
    if (v13 + 1 > 1)
    {
      if ((v13 & 0x80000000) != 0)
      {
        v16 = -2 - v13;
        if (((*(_QWORD *)(*(_QWORD *)(a2 + 224) + 8 * ((-2 - v13) >> 6)) >> (-2 - v13)) & 1) != 0)
          v15 = (_DWORD *)(*(_QWORD *)(a2 + 200) + 24 * v16);
        else
          v15 = (_DWORD *)sub_22F1E1134(a2, v16, 0);
      }
      else
      {
        v15 = (_DWORD *)(*(_QWORD *)(a2 + 184) + 24 * v13);
      }
    }
    else
    {
      v15 = *(_DWORD **)(a2 + 184);
    }
    if ((*v15 & 0x7FFFFFFFu) <= (v10 & 0x7FFFFFFF)
      && (v13 == -2
       || (v14 != *(_DWORD *)(a2 + 192)
         ? ((v14 & 0x80000000) != 0
          ? ((v21 = -3 - v13,
              ((*(_QWORD *)(*(_QWORD *)(a2 + 224) + 8 * ((-3 - v13) >> 6)) >> (-3 - v13)) & 1) == 0)
           ? (v20 = (_DWORD *)sub_22F1E1134(a2, v21, 0))
           : (v20 = (_DWORD *)(*(_QWORD *)(a2 + 200) + 24 * v21)))
          : (v20 = (_DWORD *)(*(_QWORD *)(a2 + 184) + 24 * v14)),
            v19 = *v20 & 0x7FFFFFFF)
         : (v19 = *(_DWORD *)(a2 + 216)),
           v19 > (v10 & 0x7FFFFFFF))))
    {
      v18 = *(_DWORD *)(a2 + 304);
      v17 = v18;
    }
    else
    {
      v17 = sub_22F1E1EE8(a2, v10 & 0x7FFFFFFF);
      v18 = *(_DWORD *)(a2 + 304);
    }
    v67 = v17;
    v22 = v18;
    v23 = v18 + 1;
    if (v18 + 1 > 1)
    {
      if ((v18 & 0x80000000) != 0)
      {
        v25 = -2 - v18;
        if (((*(_QWORD *)(*(_QWORD *)(a2 + 224) + 8 * ((-2 - v18) >> 6)) >> (-2 - v18)) & 1) != 0)
          v24 = (_DWORD *)(*(_QWORD *)(a2 + 200) + 24 * v25);
        else
          v24 = (_DWORD *)sub_22F1E1134(a2, v25, 0);
      }
      else
      {
        v24 = (_DWORD *)(*(_QWORD *)(a2 + 184) + 24 * v18);
      }
    }
    else
    {
      v24 = *(_DWORD **)(a2 + 184);
    }
    if ((*v24 & 0x7FFFFFFFu) <= (v11 & 0x7FFFFFFF)
      && (v22 == -2
       || (v23 != *(_DWORD *)(a2 + 192)
         ? ((v23 & 0x80000000) != 0
          ? ((v29 = -3 - v22,
              ((*(_QWORD *)(*(_QWORD *)(a2 + 224) + 8 * ((-3 - v22) >> 6)) >> (-3 - v22)) & 1) == 0)
           ? (v28 = (_DWORD *)sub_22F1E1134(a2, v29, 0))
           : (v28 = (_DWORD *)(*(_QWORD *)(a2 + 200) + 24 * v29)))
          : (v28 = (_DWORD *)(*(_QWORD *)(a2 + 184) + 24 * v23)),
            v27 = *v28 & 0x7FFFFFFF)
         : (v27 = *(_DWORD *)(a2 + 216)),
           v27 > (v11 & 0x7FFFFFFF))))
    {
      v26 = *(_DWORD *)(a2 + 304);
    }
    else
    {
      v26 = sub_22F1E1EE8(a2, v11 & 0x7FFFFFFF);
    }
    v66 = v26;
    v73[0] = 1;
    for (i = 1; i != 5; ++i)
      LODWORD(v73[i]) = 0;
    while ((v10 & 0x80000000) != 0)
    {
      if (v17 == v26)
        goto LABEL_69;
      sub_22F2AB834(v73, &v67)[1] = v10;
      v10 = sub_22F1E25A4((_QWORD *)a2, v10);
      v31 = *(_DWORD *)(a2 + 304);
      v32 = v31 + 1;
      if (v31 + 1 > 1)
      {
        if ((v31 & 0x80000000) != 0)
        {
          v34 = -2 - v31;
          if (((*(_QWORD *)(*(_QWORD *)(a2 + 224) + 8 * ((-2 - v31) >> 6)) >> (-2 - v31)) & 1) != 0)
            v33 = (_DWORD *)(*(_QWORD *)(a2 + 200) + 24 * v34);
          else
            v33 = (_DWORD *)sub_22F1E1134(a2, v34, 0);
        }
        else
        {
          v33 = (_DWORD *)(*(_QWORD *)(a2 + 184) + 24 * v31);
        }
      }
      else
      {
        v33 = *(_DWORD **)(a2 + 184);
      }
      if ((*v33 & 0x7FFFFFFFu) <= (v10 & 0x7FFFFFFF)
        && (v31 == -2
         || (v32 != *(_DWORD *)(a2 + 192)
           ? ((v32 & 0x80000000) != 0
            ? ((v37 = -3 - v31,
                ((*(_QWORD *)(*(_QWORD *)(a2 + 224) + 8 * ((-3 - v31) >> 6)) >> (-3 - v31)) & 1) == 0)
             ? (v36 = (_DWORD *)sub_22F1E1134(a2, v37, 0))
             : (v36 = (_DWORD *)(*(_QWORD *)(a2 + 200) + 24 * v37)))
            : (v36 = (_DWORD *)(*(_QWORD *)(a2 + 184) + 24 * v32)),
              v35 = *v36 & 0x7FFFFFFF)
           : (v35 = *(_DWORD *)(a2 + 216)),
             v35 > (v10 & 0x7FFFFFFF))))
      {
        v17 = *(_DWORD *)(a2 + 304);
      }
      else
      {
        v17 = sub_22F1E1EE8(a2, v10 & 0x7FFFFFFF);
      }
      v67 = v17;
    }
    if (v17 == v26)
      goto LABEL_69;
    if ((v11 & 0x80000000) != 0)
    {
      if ((sub_22F2AB894((uint64_t)v73, v26, &v78) & 1) != 0)
      {
LABEL_141:
        v66 = v26;
        v68 = v12;
        v10 = sub_22F2AB834(v73, &v66)[1];
        v67 = v26;
LABEL_69:
        v17 = v26;
        if (!(_DWORD)v11)
          goto LABEL_92;
        goto LABEL_73;
      }
      while (1)
      {
        v50 = sub_22F1E25A4((_QWORD *)a2, v11);
        v52 = v51;
        v53 = *(_DWORD *)(a2 + 304);
        v54 = v53 + 1;
        if (v53 + 1 > 1)
        {
          if ((v53 & 0x80000000) != 0)
          {
            v56 = -2 - v53;
            v55 = (_DWORD *)(((*(_QWORD *)(*(_QWORD *)(a2 + 224) + 8 * ((-2 - v53) >> 6)) >> (-2 - v53)) & 1) != 0
                           ? *(_QWORD *)(a2 + 200) + 24 * v56
                           : sub_22F1E1134(a2, v56, 0));
          }
          else
          {
            v55 = (_DWORD *)(*(_QWORD *)(a2 + 184) + 24 * v53);
          }
        }
        else
        {
          v55 = *(_DWORD **)(a2 + 184);
        }
        v57 = HIDWORD(v50) & 0x7FFFFFFF;
        if ((*v55 & 0x7FFFFFFFu) > v57)
          goto LABEL_120;
        if (v53 == -2
          || (v54 != *(_DWORD *)(a2 + 192)
            ? ((v54 & 0x80000000) != 0
             ? ((v60 = -3 - v53,
                 ((*(_QWORD *)(*(_QWORD *)(a2 + 224) + 8 * ((-3 - v53) >> 6)) >> (-3 - v53)) & 1) == 0)
              ? (v59 = (_DWORD *)sub_22F1E1134(a2, v60, 0))
              : (v59 = (_DWORD *)(*(_QWORD *)(a2 + 200) + 24 * v60)))
             : (v59 = (_DWORD *)(*(_QWORD *)(a2 + 184) + 24 * v54)),
               v58 = *v59 & 0x7FFFFFFF)
            : (v58 = *(_DWORD *)(a2 + 216)),
              v58 > v57))
        {
          v26 = *(_DWORD *)(a2 + 304);
        }
        else
        {
LABEL_120:
          v26 = sub_22F1E1EE8(a2, HIDWORD(v50) & 0x7FFFFFFF);
        }
        v11 = HIDWORD(v50);
        if ((v50 & 0x8000000000000000) == 0)
          break;
        if ((sub_22F2AB894((uint64_t)v73, v26, &v78) & 1) != 0)
        {
          v12 = v52 != 0;
          goto LABEL_141;
        }
      }
      v12 = v52 != 0;
      v66 = v26;
    }
    v68 = v12;
    if (!(_DWORD)v11)
      goto LABEL_92;
LABEL_73:
    if (!v10 || v17 != v26)
    {
LABEL_92:
      v9 = v65;
      goto LABEL_106;
    }
    v70 = v72;
    v71 = 0x400000000;
    v38 = v10;
    v78 = (char *)v80;
    v79 = 0x400000000;
    v39 = v11;
    __base = v77;
    __nel = 0x400000000;
    sub_22E7297B0(v10, (uint64_t)&v78, 1, a2);
    sub_22E7297B0(v11, (uint64_t)&__base, 0, a2);
    if (v79 >= 2)
      qsort(v78, v79, 4uLL, (int (__cdecl *)(const void *, const void *))sub_22F2ABAB0);
    v40 = __nel;
    if (__nel >= 2)
    {
      qsort(__base, __nel, 4uLL, (int (__cdecl *)(const void *, const void *))sub_22F2ABAB0);
      v40 = __nel;
    }
    v41 = (char *)__base;
    if (v40 && (_DWORD)v79)
    {
      v62 = v11;
      v42 = v78;
      v43 = &v78[4 * v79];
      v44 = (char *)__base + 4 * v40;
      do
      {
        v45 = *(_DWORD *)v42;
        if (*(_DWORD *)v42 >= *(_DWORD *)v41)
        {
          if (*(_DWORD *)v41 >= v45)
          {
            v46 = v71;
            if (v71 >= (unint64_t)HIDWORD(v71))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v46 = v71;
            }
            *((_DWORD *)v70 + v46) = v45;
            LODWORD(v71) = v71 + 1;
            v42 += 4;
          }
          v41 += 4;
        }
        else
        {
          v42 += 4;
        }
      }
      while (v42 != v43 && v41 != v44);
      v41 = (char *)__base;
      v39 = v62;
    }
    if (v41 != v77)
      free(v41);
    if (v78 != (char *)v80)
      free(v78);
    v47 = sub_22E729244(v38, v17, v64, (uint64_t)&v70, 1, a2, (BOOL *)&v68);
    v48 = sub_22E729244(v39, v17, v64, (uint64_t)&v70, 0, a2, (BOOL *)&v68);
    if (!v47)
    {
      v9 = v65;
      goto LABEL_104;
    }
    v49 = v48;
    v9 = v65;
    if (!(_DWORD)v48)
    {
LABEL_104:
      if (v70 != v72)
        free(v70);
LABEL_106:
      if ((v73[0] & 1) == 0)
        llvm::deallocate_buffer((llvm *)v73[1], (void *)(8 * v74));
      goto LABEL_108;
    }
    if ((v47 & 0x80000000) != 0)
    {
      v47 = sub_22F1E238C((_QWORD *)a2, v47);
      if ((v49 & 0x80000000) == 0)
        goto LABEL_102;
    }
    else if ((v48 & 0x80000000) == 0)
    {
LABEL_102:
      v63 = v63 & 0xFFFFFFFF00000000 | v68;
      sub_22E4D6448(a5, v47 | (unint64_t)(v49 << 32), v68);
      goto LABEL_104;
    }
    v49 = sub_22F1E238C((_QWORD *)a2, v49);
    goto LABEL_102;
  }
}

void sub_22E728F4C()
{
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E728F60(uint64_t a1, unsigned int a2, void *__src, size_t __len)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _BYTE v9[24];
  void *__p;
  char v11;

  v4 = *(_QWORD *)(a1 + 8);
  sub_22E729148(__src, __len, a2, 0, (uint64_t)v9);
  v5 = sub_22E6C9D38(v4, (unint64_t)v9, 1);
  v6 = *(_QWORD *)v4 + 56 * *(unsigned int *)(v4 + 8);
  v7 = *(_QWORD *)(v5 + 13);
  *(_OWORD *)v6 = *(_OWORD *)v5;
  *(_QWORD *)(v6 + 13) = v7;
  v8 = *(_OWORD *)(v5 + 24);
  *(_QWORD *)(v6 + 40) = *(_QWORD *)(v5 + 40);
  *(_OWORD *)(v6 + 24) = v8;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_BYTE *)(v6 + 48) = *(_BYTE *)(v5 + 48);
  ++*(_DWORD *)(v4 + 8);
  if (v11 < 0)
    operator delete(__p);
}

void sub_22E729008(uint64_t a1, uint64_t a2, char a3, void *__src, size_t __len)
{
  uint64_t v5;
  __int128 *p_dst;
  size_t v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  __int128 __p;
  unint64_t v20;
  char v21;
  __int128 __dst;
  unint64_t v23;

  v5 = *(_QWORD *)(a1 + 8);
  v18 = 0;
  v17 = 0;
  v21 = 0;
  v15 = a2;
  v16 = a3;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    p_dst = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v23 = v10 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v23) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  __p = __dst;
  v20 = v23;
  v11 = sub_22E6C9D38(v5, (unint64_t)&v15, 1);
  v12 = *(_QWORD *)v5 + 56 * *(unsigned int *)(v5 + 8);
  v13 = *(_QWORD *)(v11 + 13);
  *(_OWORD *)v12 = *(_OWORD *)v11;
  *(_QWORD *)(v12 + 13) = v13;
  v14 = *(_OWORD *)(v11 + 24);
  *(_QWORD *)(v12 + 40) = *(_QWORD *)(v11 + 40);
  *(_OWORD *)(v12 + 24) = v14;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  *(_BYTE *)(v12 + 48) = *(_BYTE *)(v11 + 48);
  ++*(_DWORD *)(v5 + 8);
  if (SHIBYTE(v20) < 0)
    operator delete((void *)__p);
}

double sub_22E729148@<D0>(void *__src@<X1>, size_t __len@<X2>, unsigned int a3@<W0>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  __int128 *p_dst;
  size_t v11;
  size_t v12;
  double result;
  __int128 __dst;
  unint64_t v15;

  *(_QWORD *)(a5 + 24) = 0;
  v6 = a5 + 24;
  *(_BYTE *)(a5 + 20) = 0;
  *(_QWORD *)(a5 + 12) = 0;
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 40) = 0;
  *(_BYTE *)(a5 + 48) = 0;
  *(_QWORD *)a5 = a3 | ((unint64_t)a3 << 32);
  *(_BYTE *)(a5 + 8) = 0;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v11 = __len | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v15 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v15) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  if (*(char *)(a5 + 47) < 0)
    operator delete(*(void **)v6);
  result = *(double *)&__dst;
  *(_OWORD *)v6 = __dst;
  *(_QWORD *)(v6 + 16) = v15;
  *(_BYTE *)(a5 + 48) = a4;
  return result;
}

uint64_t sub_22E729244(unint64_t a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, BOOL *a7)
{
  int v7;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  _DWORD *v16;
  int v17;
  unint64_t v18;
  BOOL v19;
  BOOL v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned __int8 v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _DWORD *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  _DWORD *v32;
  unsigned int v33;
  BOOL v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  _DWORD *v38;
  unsigned int v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42;
  uint64_t v44;
  BOOL v48;

  v7 = a2;
  if (a2 != a3)
  {
    v44 = a3;
    while (1)
    {
      if ((a1 & 0x80000000) == 0)
        return 0;
      if (sub_22F1E2440((_QWORD *)a6, a1, 0))
      {
        v11 = *(unsigned int *)(a4 + 8);
        if ((_DWORD)v11)
        {
          v12 = *(_DWORD **)a4;
          v13 = *(unsigned int *)(a4 + 8);
          do
          {
            v14 = v13 >> 1;
            v15 = &v12[v13 >> 1];
            v17 = *v15;
            v16 = v15 + 1;
            v13 += ~(v13 >> 1);
            if (v17 < v7)
              v12 = v16;
            else
              v13 = v14;
          }
          while (v13);
        }
        else
        {
          v12 = *(_DWORD **)a4;
        }
        if (v12 == (_DWORD *)(*(_QWORD *)a4 + 4 * v11) || *v12 > v7)
        {
          v18 = 0;
          v20 = 0;
        }
        else
        {
          v23 = sub_22F1E2500((_QWORD *)a6, a1);
          v20 = *a7;
          v18 = v23 | ((unint64_t)v23 << 32);
        }
        a1 = sub_22F1E25A4((_QWORD *)a6, a1);
        v22 = v24;
      }
      else
      {
        v18 = sub_22F1E25A4((_QWORD *)a6, a1);
        v20 = v19;
        v21 = sub_22F1E2500((_QWORD *)a6, a1);
        v22 = *a7;
        a1 = v21 | ((unint64_t)v21 << 32);
      }
      if ((_DWORD)a5)
        LODWORD(v25) = v18;
      else
        v25 = HIDWORD(v18);
      if ((_DWORD)v25)
      {
        v26 = *(_DWORD *)(a6 + 304);
        v27 = v26 + 1;
        if (v26 + 1 > 1)
        {
          if ((v26 & 0x80000000) != 0)
          {
            v29 = -2 - v26;
            if (((*(_QWORD *)(*(_QWORD *)(a6 + 224) + 8 * ((-2 - v26) >> 6)) >> (-2 - v26)) & 1) != 0)
              v28 = (_DWORD *)(*(_QWORD *)(a6 + 200) + 24 * v29);
            else
              v28 = (_DWORD *)sub_22F1E1134(a6, v29, 0);
          }
          else
          {
            v28 = (_DWORD *)(*(_QWORD *)(a6 + 184) + 24 * v26);
          }
        }
        else
        {
          v28 = *(_DWORD **)(a6 + 184);
        }
        if ((*v28 & 0x7FFFFFFFu) <= (v25 & 0x7FFFFFFF)
          && (v26 == -2
           || (v27 != *(_DWORD *)(a6 + 192)
             ? ((v27 & 0x80000000) != 0
              ? ((v33 = -3 - v26,
                  ((*(_QWORD *)(*(_QWORD *)(a6 + 224) + 8 * ((-3 - v26) >> 6)) >> (-3 - v26)) & 1) == 0)
               ? (v32 = (_DWORD *)sub_22F1E1134(a6, v33, 0))
               : (v32 = (_DWORD *)(*(_QWORD *)(a6 + 200) + 24 * v33)))
              : (v32 = (_DWORD *)(*(_QWORD *)(a6 + 184) + 24 * v27)),
                v31 = *v32 & 0x7FFFFFFF)
             : (v31 = *(_DWORD *)(a6 + 216)),
               v31 > (v25 & 0x7FFFFFFF))))
        {
          v30 = *(_DWORD *)(a6 + 304);
        }
        else
        {
          v30 = sub_22F1E1EE8(a6, v25 & 0x7FFFFFFF);
        }
        v34 = *a7;
        if (!(_DWORD)a5)
          v34 = v20;
        v48 = v34;
        v35 = sub_22E729244(v25, v30, v44, a4, a5, a6, &v48);
        if ((_DWORD)v35)
          break;
      }
      if ((a5 & 1) == 0)
      {
        *a7 = v22 != 0;
        a1 >>= 32;
      }
      v36 = *(_DWORD *)(a6 + 304);
      v37 = v36 + 1;
      if (v36 + 1 > 1)
      {
        if ((v36 & 0x80000000) != 0)
        {
          v39 = -2 - v36;
          if (((*(_QWORD *)(*(_QWORD *)(a6 + 224) + 8 * ((-2 - v36) >> 6)) >> (-2 - v36)) & 1) != 0)
            v38 = (_DWORD *)(*(_QWORD *)(a6 + 200) + 24 * v39);
          else
            v38 = (_DWORD *)sub_22F1E1134(a6, v39, 0);
        }
        else
        {
          v38 = (_DWORD *)(*(_QWORD *)(a6 + 184) + 24 * v36);
        }
      }
      else
      {
        v38 = *(_DWORD **)(a6 + 184);
      }
      if ((*v38 & 0x7FFFFFFFu) <= (a1 & 0x7FFFFFFF)
        && (v36 == -2
         || (v37 != *(_DWORD *)(a6 + 192)
           ? ((v37 & 0x80000000) != 0
            ? ((v42 = -3 - v36,
                ((*(_QWORD *)(*(_QWORD *)(a6 + 224) + 8 * ((-3 - v36) >> 6)) >> (-3 - v36)) & 1) == 0)
             ? (v41 = (_DWORD *)sub_22F1E1134(a6, v42, 0))
             : (v41 = (_DWORD *)(*(_QWORD *)(a6 + 200) + 24 * v42)))
            : (v41 = (_DWORD *)(*(_QWORD *)(a6 + 184) + 24 * v37)),
              v40 = *v41 & 0x7FFFFFFF)
           : (v40 = *(_DWORD *)(a6 + 216)),
             v40 > (a1 & 0x7FFFFFFF))))
      {
        v7 = *(_DWORD *)(a6 + 304);
      }
      else
      {
        v7 = sub_22F1E1EE8(a6, a1 & 0x7FFFFFFF);
      }
      if (v7 == a3)
        return a1;
    }
    *a7 = v48;
    return v35;
  }
  return a1;
}

uint64_t sub_22E729634(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  int v14[8];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v14;
    do
    {
      v10 = *(_DWORD *)(a1 + v8 + 8);
      if ((v10 + 1) >= 2)
      {
        *v9 = v10;
        v9[1] = *(_DWORD *)(a1 + v8 + 12);
        v9 += 2;
      }
      v8 += 8;
    }
    while (v8 != 32);
    if (a2 > 4)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](8 * a2, 4);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22F2AB9EC(a1, v14, v9);
  }
  else
  {
    v6 = *(int **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](8 * a2, 4);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F2AB9EC(a1, v6, &v6[2 * v7]);
    return llvm::deallocate_buffer((llvm *)v6, (void *)(8 * v7));
  }
}

uint64_t sub_22E7297B0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  _DWORD *v14;
  unsigned int v15;
  unint64_t v16;

  for (; (result & 0x80000000) != 0; result = sub_22F1E2500((_QWORD *)a4, v7))
  {
    while (1)
    {
      v7 = result;
      if (sub_22F1E2440((_QWORD *)a4, result, 0))
        break;
      result = sub_22F1E25A4((_QWORD *)a4, v7);
      if (a3)
        result = result;
      else
        result = HIDWORD(result);
      if ((result & 0x80000000) == 0)
        return result;
    }
    v8 = *(_DWORD *)(a4 + 304);
    v9 = v8 + 1;
    if (v8 + 1 > 1)
    {
      if ((v8 & 0x80000000) != 0)
      {
        v11 = -2 - v8;
        if (((*(_QWORD *)(*(_QWORD *)(a4 + 224) + 8 * ((-2 - v8) >> 6)) >> (-2 - v8)) & 1) != 0)
          v10 = (_DWORD *)(*(_QWORD *)(a4 + 200) + 24 * v11);
        else
          v10 = (_DWORD *)sub_22F1E1134(a4, v11, 0);
      }
      else
      {
        v10 = (_DWORD *)(*(_QWORD *)(a4 + 184) + 24 * v8);
      }
    }
    else
    {
      v10 = *(_DWORD **)(a4 + 184);
    }
    if ((*v10 & 0x7FFFFFFFu) <= (v7 & 0x7FFFFFFF)
      && (v8 == -2
       || (v9 != *(_DWORD *)(a4 + 192)
         ? ((v9 & 0x80000000) != 0
          ? ((v15 = -3 - v8,
              ((*(_QWORD *)(*(_QWORD *)(a4 + 224) + 8 * ((-3 - v8) >> 6)) >> (-3 - v8)) & 1) == 0)
           ? (v14 = (_DWORD *)sub_22F1E1134(a4, v15, 0))
           : (v14 = (_DWORD *)(*(_QWORD *)(a4 + 200) + 24 * v15)))
          : (v14 = (_DWORD *)(*(_QWORD *)(a4 + 184) + 24 * v9)),
            v13 = *v14 & 0x7FFFFFFF)
         : (v13 = *(_DWORD *)(a4 + 216)),
           v13 > (v7 & 0x7FFFFFFF))))
    {
      v12 = *(_DWORD *)(a4 + 304);
    }
    else
    {
      v12 = sub_22F1E1EE8(a4, v7 & 0x7FFFFFFF);
    }
    v16 = *(unsigned int *)(a2 + 8);
    if (v16 >= *(unsigned int *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v16 = *(unsigned int *)(a2 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v16) = v12;
    ++*(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t sub_22E729984(uint64_t result)
{
  *(_BYTE *)(result + 64) = 0;
  *(_BYTE *)(result + 72) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_WORD *)(result + 88) = 0;
  *(_BYTE *)(result + 92) = 0;
  *(_QWORD *)result = &off_24FA70848;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  return result;
}

uint64_t sub_22E7299B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24FA70848;
  v2 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v2)
  {
    v3 = sub_22E6C3914(v2);
    MEMORY[0x2348A0E9C](v3, 0x10B2C408FD5D9F4);
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_22E729A14(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *result;
  uint64_t v8;
  void **v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v16;
  void *v17;
  size_t v18;
  size_t v19;
  unsigned __int8 *v20[3];
  __int16 v21;
  _QWORD *v22;

  result = (*(_QWORD *(**)(_QWORD **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(&v22, a2, a3, a4, a5);
  if (!v22 || (v8 = *(_QWORD *)(a3 + 16), v9 = *(void ***)(v8 + 2760), v10 = *(void ***)(v8 + 2768), v9 == v10))
  {
    *a1 = v22;
  }
  else
  {
    do
    {
      v11 = *(_QWORD *)(a3 + 32);
      *(_QWORD *)(v11 + 312) = 0x30700000000;
      if (*(char *)(v11 + 311) < 0)
      {
        **(_BYTE **)(v11 + 288) = 0;
        *(_QWORD *)(v11 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v11 + 288) = 0;
        *(_BYTE *)(v11 + 311) = 0;
      }
      v20[0] = (unsigned __int8 *)(v11 + 320);
      v20[1] = 0;
      v20[2] = (unsigned __int8 *)v11;
      v21 = 1;
      *(_BYTE *)(v11 + 320) = 0;
      *(_DWORD *)(v11 + 664) = 0;
      v12 = *(unsigned int *)(v11 + 776);
      if ((_DWORD)v12)
      {
        v13 = *(_QWORD *)(v11 + 768);
        v14 = 56 * v12;
        do
        {
          if (*(char *)(v13 + v14 - 9) < 0)
            operator delete(*(void **)(v13 + v14 - 32));
          v14 -= 56;
        }
        while (v14);
      }
      *(_DWORD *)(v11 + 776) = 0;
      v15 = *((_BYTE *)v9 + 23);
      v16 = v15 < 0;
      if (v15 >= 0)
        v17 = v9;
      else
        v17 = *v9;
      v18 = v15 & 0x7F;
      if (v16)
        v19 = (size_t)v9[1];
      else
        v19 = v18;
      sub_22E3B89A8(v20, v17, v19);
      sub_22E3BB0B8((uint64_t)v20);
      v9 += 3;
    }
    while (v9 != v10);
    *a1 = 0;
    result = v22;
    v22 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

BOOL sub_22E729B74(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  std::string::size_type v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  size_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  _DWORD *v26;
  const void **v27;
  const void **v28;
  char v29;
  BOOL v30;
  const void *v31;
  size_t v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  BOOL v40;
  void *v41;
  size_t v42;
  size_t v43;
  _BOOL8 v44;
  _DWORD *v45;
  __int128 *v46;
  size_t v47;
  _OWORD *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  _DWORD *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::string::size_type v62;
  uint64_t v63;
  _BOOL4 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  __int128 *v74;
  size_t v75;
  uint64_t v76;
  void *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  __int128 *v92;
  unint64_t v93;
  __int128 v94;
  unint64_t v95;
  int v96;
  std::string::size_type v97;
  int v98;
  uint64_t v99;
  char v100;
  const void *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  _BYTE *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  std::string *__src;
  size_t v115;
  std::__shared_weak_count *v116;
  unint64_t *p_shared_owners;
  unint64_t v118;
  std::__shared_weak_count *cat;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  size_t v130;
  size_t v131;
  unint64_t v132;
  size_t *v133;
  uint64_t v134;
  size_t v135;
  _OWORD *v136;
  uint64_t v137;
  uint64_t v138;
  std::string::size_type v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  const void *v145;
  size_t v146;
  __int128 *v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  unint64_t v153;
  unsigned int v154;
  _OWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  _OWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  std::string::size_type v180;
  uint64_t v181;
  std::string::size_type v182;
  int v183;
  uint64_t v184;
  __int16 v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  _QWORD *v190;
  int v191;
  std::string *p_str;
  size_t size;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  const void *v197;
  const void *v198;
  int v199;
  int v200;
  size_t *v201;
  uint64_t v202;
  uint64_t v203;
  size_t v204;
  const void *v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  int v209;
  size_t v210;
  size_t v211;
  void *v212;
  const void *v213;
  __int128 *v214;
  size_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  const void **v220;
  unint64_t v221;
  const void **v222;
  const void **v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  size_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  __int128 *v231;
  uint64_t v232;
  uint64_t v233;
  char v234;
  int v235;
  size_t v236;
  size_t v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  char v241;
  size_t v242;
  void *v243;
  void *v244;
  size_t v245;
  uint64_t v246;
  const void *v247;
  size_t v248;
  const std::error_category *v249;
  _OWORD *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  void *v260;
  char v261;
  size_t v262;
  void *v263;
  void *v264;
  size_t v265;
  __int128 *v266;
  size_t v267;
  int v268;
  uint64_t v269;
  const void **v270;
  const void **i;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char v276;
  BOOL v277;
  const void *v278;
  uint64_t v279;
  size_t v280;
  char v281;
  int v282;
  void *v283;
  uint64_t v284;
  size_t v285;
  uint64_t v286;
  uint64_t v287;
  char v288;
  BOOL v289;
  _BYTE *v290;
  uint64_t v291;
  size_t v292;
  uint64_t v293;
  char v294;
  BOOL v295;
  const void *v296;
  size_t v297;
  size_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  char v303;
  BOOL v304;
  void *v305;
  size_t v306;
  size_t v307;
  uint64_t v308;
  _QWORD *v309;
  _DWORD *v310;
  uint64_t v311;
  char v312;
  void *v313;
  size_t v314;
  size_t v315;
  _QWORD *v316;
  uint64_t v317;
  _DWORD *v318;
  int v319;
  uint64_t v320;
  uint64_t v321;
  const void *v322;
  const void *v323;
  int v324;
  size_t *v325;
  void *v326;
  void *v327;
  void *v328;
  std::string::size_type v329;
  uint64_t v330;
  uint64_t v331;
  size_t v332;
  uint64_t v333;
  uint64_t v334;
  _OWORD *v335;
  uint64_t v336;
  uint64_t v337;
  _OWORD *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  _QWORD *v342;
  uint64_t v343;
  uint64_t v344;
  _DWORD *v345;
  std::string::size_type v346;
  int v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  std::string *p_p;
  size_t v355;
  std::string *v356;
  size_t v357;
  void *v358;
  unsigned int v359;
  uint64_t v360;
  int v361;
  uint64_t v362;
  void *v363;
  std::string::size_type v364;
  uint64_t v365;
  int v366;
  uint64_t v367;
  _DWORD *v368;
  std::string::size_type v369;
  int v370;
  int v371;
  uint64_t v372;
  _QWORD *v373;
  uint64_t v374;
  char v375;
  char v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  const void ***v380;
  char v381;
  uint64_t v382;
  std::string::size_type v383;
  char *v384;
  size_t v385;
  int v386;
  char v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v391;
  uint64_t v392;
  int v393;
  int v394;
  uint64_t v395;
  int v396;
  int v397;
  size_t v398;
  char *v399;
  unint64_t v400;
  void **v401;
  char v402;
  int v403;
  int v404;
  uint64_t v405;
  std::string::size_type v406;
  _DWORD *v407;
  void *v408;
  int v409;
  std::string __str;
  uint64_t v411;
  uint64_t v412;
  std::string::size_type v413;
  __int128 v414;
  _DWORD *v415;
  std::string::size_type v416;
  _OWORD v417[2];
  _DWORD *v418;
  _DWORD *v419;
  _DWORD *v420;
  uint64_t v421;
  __int128 v422;
  uint64_t v423;
  __int128 v424;
  __int128 v425;
  _BYTE v426[29];
  std::error_code v427;
  __int16 v428;
  std::string __p;
  __int16 v430;
  void *v431;
  std::__shared_weak_count *v432;
  char v433;
  std::string v434;
  __int16 v435;
  __int128 v436;
  unint64_t v437;
  void *v438;
  size_t v439;
  char v440;
  uint64_t v441;
  _OWORD __dst[17];
  uint64_t v443;

  v443 = *MEMORY[0x24BDAC8D0];
  if (*((char *)a3 + 23) < 0)
  {
    sub_22E3BB2B4(&v422, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v422 = *a3;
    v423 = *((_QWORD *)a3 + 2);
  }
  v424 = *(__int128 *)((char *)a3 + 24);
  v425 = *(__int128 *)((char *)a3 + 40);
  *(_OWORD *)v426 = *(__int128 *)((char *)a3 + 56);
  *(_OWORD *)&v426[13] = *(__int128 *)((char *)a3 + 69);
  v421 = 0;
  sub_22F2ABB78(a1, (uint64_t)&v422, &v421);
  v6 = v421;
  v421 = 0;
  if (v6)
  {
    v7 = sub_22E6C3914(v6);
    MEMORY[0x2348A0E9C](v7, 0x10B2C408FD5D9F4);
  }
  *(_QWORD *)(a1 + 104) = a2;
  v8 = *(_QWORD *)a1;
  if ((*(_WORD *)&v426[24] & 0x700) != 0x200)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(a1, a2) & 1) != 0)
      goto LABEL_28;
LABEL_158:
    v44 = 0;
LABEL_703:
    *(_QWORD *)&v436 = 0;
    sub_22F2A6A24(a2, (uint64_t *)&v436);
    if ((_QWORD)v436)
      (*(void (**)(_QWORD))(*(_QWORD *)v436 + 8))(v436);
    sub_22E6CE1CC(a2, 1);
    *(_DWORD *)(**(_QWORD **)(a2 + 16) + 240) &= 0xFFFFFF1F;
    memset(__dst, 0, 88);
    __p.__r_.__value_.__r.__words[0] = 0;
    sub_22F2ABB78(a1, (uint64_t)__dst, (uint64_t *)&__p);
    if (__p.__r_.__value_.__r.__words[0])
    {
      v389 = sub_22E6C3914((uint64_t)__p.__r_.__value_.__l.__data_);
      MEMORY[0x2348A0E9C](v389, 0x10B2C408FD5D9F4);
    }
    if (SBYTE7(__dst[1]) < 0)
      operator delete(*(void **)&__dst[0]);
    *(_QWORD *)(a1 + 104) = 0;
    goto LABEL_710;
  }
  v9 = (*(uint64_t (**)(uint64_t))(v8 + 80))(a1);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a2) & 1) == 0)
    goto LABEL_158;
  if (!v9)
    goto LABEL_28;
  v10 = *(_DWORD **)(a2 + 32);
  *(_QWORD *)&v436 = v10;
  if (v10)
    ++*v10;
  v11 = operator new();
  v12 = v436;
  v13 = *(_DWORD **)(v436 + 32);
  v420 = v13;
  if (v13)
    ++*v13;
  v14 = *(_DWORD **)(v12 + 40);
  v419 = v14;
  if (v14)
    ++*v14;
  __p.__r_.__value_.__r.__words[0] = sub_22F1CB3A4(v11, &v420, (uint64_t *)&v419, 0, 1);
  ++*(_DWORD *)__p.__r_.__value_.__l.__data_;
  sub_22E3B3C18((uint64_t *)&v419);
  sub_22E3B3D40((uint64_t *)&v420);
  v15 = __p.__r_.__value_.__r.__words[0];
  v16 = *(_QWORD *)(v436 + 48);
  v17 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 56);
  *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 56) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  *(_QWORD *)(v15 + 48) = v16;
  if (v423 >= 0)
    v18 = &v422;
  else
    v18 = (__int128 *)v422;
  if (v423 >= 0)
    v19 = HIBYTE(v423) & 0x7F;
  else
    v19 = *((_QWORD *)&v422 + 1);
  if (v19 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_419;
  if (v19 >= 0x17)
  {
    v81 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v81 = v19 | 7;
    v82 = v81 + 1;
    v20 = operator new(v81 + 1);
    *(_QWORD *)&__dst[1] = v82 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v20;
    *((_QWORD *)&__dst[0] + 1) = v19;
    goto LABEL_150;
  }
  BYTE7(__dst[1]) = v19;
  v20 = __dst;
  if (v19)
LABEL_150:
    memmove(v20, v18, v19);
  *((_BYTE *)v20 + v19) = 0;
  v83 = sub_22E6CB02C((_QWORD *)a2);
  v418 = (_DWORD *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
    ++*(_DWORD *)__p.__r_.__value_.__l.__data_;
  sub_22E6C3FF8((uint64_t)__dst, v83, 0, (uint64_t *)&v418, (__int128 *)(*(_QWORD *)(a2 + 16) + 2216), 0, 0, (uint64_t *)&v434, 0, 0);
  sub_22E6C62BC(&v418);
  if (SBYTE7(__dst[1]) < 0)
    operator delete(*(void **)&__dst[0]);
  if (!v434.__r_.__value_.__r.__words[0])
  {
    sub_22E6C62BC(&__p);
LABEL_157:
    sub_22E6C62BC((_DWORD **)&v436);
    goto LABEL_158;
  }
  sub_22F2A5564(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 40), *(_QWORD *)(v434.__r_.__value_.__r.__words[0] + 104));
  sub_22F2A5884(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 56), *(_QWORD *)(v434.__r_.__value_.__r.__words[0] + 120));
  sub_22F2A46A8(**(_QWORD **)(a2 + 16), *(__int128 **)v434.__r_.__value_.__l.__data_);
  v84 = *(_DWORD **)(v434.__r_.__value_.__r.__words[0] + 24);
  if (v84)
    ++*v84;
  *(_QWORD *)&__dst[0] = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = v84;
  sub_22F2A511C((_DWORD **)__dst);
  sub_22E6CC69C(a2, *(_QWORD *)(a2 + 160));
  sub_22F1E0F60(*(_QWORD *)(a2 + 176), *(_QWORD *)(v434.__r_.__value_.__r.__words[0] + 32));
  v85 = *(_QWORD *)(v434.__r_.__value_.__r.__words[0] + 136);
  if (v85)
  {
    ++*(_DWORD *)(v85 + 32);
    v86 = *(uint64_t **)(v85 + 144);
    v87 = *v86;
    v88 = *(unsigned int *)(v85 + 152);
    if ((_DWORD)v88)
    {
      v89 = 8 * v88;
      do
      {
        v90 = *v86;
        if (*v86 != v87)
        {
          v91 = *(unint64_t **)(a2 + 16);
          v92 = (__int128 *)(v90 + 8);
          v93 = v91[358];
          if (v93 >= v91[359])
          {
            v95 = sub_22E73011C(v91 + 357, (uint64_t)v92);
          }
          else
          {
            if (*(char *)(v90 + 31) < 0)
            {
              sub_22E3BB2B4((_BYTE *)v91[358], *(void **)(v90 + 8), *(_QWORD *)(v90 + 16));
            }
            else
            {
              v94 = *v92;
              *(_QWORD *)(v93 + 16) = *(_QWORD *)(v90 + 24);
              *(_OWORD *)v93 = v94;
            }
            v95 = v93 + 24;
          }
          v91[358] = v95;
        }
        ++v86;
        v89 -= 8;
      }
      while (v89);
    }
    *(_QWORD *)&__dst[0] = a2;
    sub_22E786FD4(v85, v87, (void (*)(uint64_t, unint64_t))sub_22E730294, (uint64_t)__dst);
    v96 = *(_DWORD *)(v85 + 32) - 1;
    *(_DWORD *)(v85 + 32) = v96;
    if (!v96)
      (*(void (**)(uint64_t))(*(_QWORD *)(v85 + 24) + 8))(v85 + 24);
  }
  v97 = v434.__r_.__value_.__r.__words[0];
  v98 = sub_22F2A490C((uint64_t *)v434.__r_.__value_.__l.__data_);
  if ((v98 & 0x700) != 0x100)
  {
    v123 = *(_QWORD *)(v97 + 32);
    v124 = *(_DWORD *)(v123 + 344);
    v125 = sub_22E6155EC((_QWORD *)v123, v124);
    if (!v125)
    {
      sub_22E72C63C((_QWORD *)v123, v124, 0, (llvm::MemoryBufferRef *)v417);
      __dst[0] = v417[0];
      __dst[1] = v417[1];
      if (SHIBYTE(v423) < 0)
        operator delete((void *)v422);
      v422 = 0uLL;
      v423 = 0;
      v424 = __dst[0];
      v425 = __dst[1];
      v426[0] = 1;
      v426[8] = 0;
      v426[16] = 0;
      *(_DWORD *)&v426[24] = v98;
      v426[28] = 0;
      goto LABEL_241;
    }
    v132 = *(_QWORD *)(v125 + 88);
    do
    {
      v133 = (size_t *)v132;
      v134 = *(_QWORD *)(v132 + 8);
      if ((v134 & 2) == 0)
        break;
      v132 = v134 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v132);
    v135 = *v133;
    v101 = v133 + 4;
    v131 = v135;
LABEL_229:
    if (v131 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_419;
    if (v131 >= 0x17)
    {
      v137 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v131 | 7) != 0x17)
        v137 = v131 | 7;
      v138 = v137 + 1;
      v136 = operator new(v137 + 1);
      *(_QWORD *)&__dst[1] = v138 | 0x8000000000000000;
      *(_QWORD *)&__dst[0] = v136;
      *((_QWORD *)&__dst[0] + 1) = v131;
    }
    else
    {
      BYTE7(__dst[1]) = v131;
      v136 = __dst;
      if (!v131)
        goto LABEL_237;
    }
    memmove(v136, v101, v131);
LABEL_237:
    *((_BYTE *)v136 + v131) = 0;
    goto LABEL_238;
  }
  v99 = sub_22F1502C8((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v97 + 64) + 104) + 488));
  v100 = *(_BYTE *)(v99 + 71);
  if (v100 >= 0)
    v101 = (const void *)(v99 + 48);
  else
    v101 = *(const void **)(v99 + 48);
  if (v101)
  {
    v129 = v100;
    v130 = v100 & 0x7F;
    if (v129 >= 0)
      v131 = v130;
    else
      v131 = *(_QWORD *)(v99 + 56);
    goto LABEL_229;
  }
  memset(__dst, 0, 24);
LABEL_238:
  BYTE8(__dst[1]) = 0;
  BYTE8(__dst[3]) = 0;
  LOBYTE(__dst[4]) = 0;
  BYTE8(__dst[4]) = 0;
  LODWORD(__dst[5]) = v98;
  BYTE4(__dst[5]) = 0;
  if (SHIBYTE(v423) < 0)
    operator delete((void *)v422);
  v422 = __dst[0];
  v423 = *(_QWORD *)&__dst[1];
  v424 = *(_OWORD *)((char *)&__dst[1] + 8);
  v425 = *(_OWORD *)((char *)&__dst[2] + 8);
  *(_OWORD *)v426 = *(_OWORD *)((char *)&__dst[3] + 8);
  *(_OWORD *)&v426[13] = *(_OWORD *)((char *)&__dst[4] + 5);
LABEL_241:
  v139 = v434.__r_.__value_.__r.__words[0];
  v434.__r_.__value_.__r.__words[0] = 0;
  v416 = v139;
  sub_22F2ABB78(a1, (uint64_t)&v422, (uint64_t *)&v416);
  v140 = v416;
  v416 = 0;
  if (v140)
  {
    v141 = sub_22E6C3914(v140);
    MEMORY[0x2348A0E9C](v141, 0x10B2C408FD5D9F4);
  }
  v142 = v434.__r_.__value_.__r.__words[0];
  v434.__r_.__value_.__r.__words[0] = 0;
  if (v142)
  {
    v143 = sub_22E6C3914(v142);
    MEMORY[0x2348A0E9C](v143, 0x10B2C408FD5D9F4);
  }
  sub_22E6C62BC(&__p);
  sub_22E6C62BC((_DWORD **)&v436);
LABEL_28:
  if ((*(_WORD *)&v426[24] & 0x700) != 0x200)
  {
    if (!*(_QWORD *)(a2 + 160))
    {
      v411 = 0;
      v21 = sub_22E6CC4D4((_QWORD *)a2, &v411);
      v22 = v411;
      if (v411)
      {
        v23 = (unsigned int *)(v411 + 8);
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      }
      if (!v21)
        goto LABEL_158;
    }
    if (!*(_QWORD *)(a2 + 176))
      sub_22E6CC69C(a2, *(_QWORD *)(a2 + 160));
    v26 = *(_DWORD **)(a2 + 16);
    v27 = (const void **)*((_QWORD *)v26 + 360);
    v28 = (const void **)*((_QWORD *)v26 + 361);
    if (v27 != v28)
    {
      do
      {
        v29 = *((_BYTE *)v27 + 23);
        v30 = v29 < 0;
        if (v29 >= 0)
          v31 = v27;
        else
          v31 = *v27;
        v32 = v29 & 0x7F;
        if (v30)
          v33 = (size_t)v27[1];
        else
          v33 = v32;
        sub_22F1D07D8(*(_QWORD *)(a2 + 160), v31, v33, 1, 1, (uint64_t)&v436);
        if ((v437 & 1) != 0)
        {
          v35 = *(_QWORD *)(a2 + 32);
          *(_QWORD *)(v35 + 312) = 0x32A00000000;
          if (*(char *)(v35 + 311) < 0)
          {
            **(_BYTE **)(v35 + 288) = 0;
            *(_QWORD *)(v35 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v35 + 288) = 0;
            *(_BYTE *)(v35 + 311) = 0;
          }
          __dst[0] = (unint64_t)(v35 + 320);
          *(_QWORD *)&__dst[1] = v35;
          WORD4(__dst[1]) = 1;
          *(_BYTE *)(v35 + 320) = 0;
          *(_DWORD *)(v35 + 664) = 0;
          v36 = *(unsigned int *)(v35 + 776);
          if ((_DWORD)v36)
          {
            v37 = *(_QWORD *)(v35 + 768);
            v38 = 56 * v36;
            do
            {
              if (*(char *)(v37 + v38 - 9) < 0)
                operator delete(*(void **)(v37 + v38 - 32));
              v38 -= 56;
            }
            while (v38);
          }
          *(_DWORD *)(v35 + 776) = 0;
          v39 = *((_BYTE *)v27 + 23);
          v40 = v39 < 0;
          if (v39 >= 0)
            v41 = v27;
          else
            v41 = (void *)*v27;
          v42 = v39 & 0x7F;
          if (v40)
            v43 = (size_t)v27[1];
          else
            v43 = v42;
          sub_22E3B89A8((unsigned __int8 **)__dst, v41, v43);
          sub_22E3BB0B8((uint64_t)__dst);
        }
        else
        {
          v34 = sub_22F1E1214(*(_QWORD *)(a2 + 176), *(_QWORD *)(v436 + 88), 0);
          *(_BYTE *)(v34 + 48) |= 4u;
        }
        v27 += 3;
      }
      while (v27 != v28);
      v26 = *(_DWORD **)(a2 + 16);
    }
    if ((*((_BYTE *)v26 + 2290) & 0x20) != 0)
      *(_BYTE *)(*(_QWORD *)(a2 + 176) + 146) = 1;
    if (v426[24] == 2)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 32) + 48) + 24))(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), *(_QWORD *)v26, 0);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2) & 1) != 0
        && (sub_22E6CE89C(a1 + 8, *(_QWORD *)(a2 + 32), *(llvm::MemoryBuffer **)(a2 + 160), *(_QWORD *)(a2 + 176)) & 1) != 0)
      {
LABEL_69:
        v44 = 1;
        goto LABEL_710;
      }
      goto LABEL_701;
    }
    v49 = *((_QWORD *)v26 + 7);
    v50 = *(_BYTE *)(v49 + 127);
    if (v50 < 0)
    {
      if (!*(_QWORD *)(v49 + 112))
        goto LABEL_127;
    }
    else if (!*(_BYTE *)(v49 + 127))
    {
      goto LABEL_127;
    }
    v67 = *(_QWORD *)(a2 + 160);
    if (v50 >= 0)
      v68 = (char *)(v49 + 104);
    else
      v68 = *(char **)(v49 + 104);
    v401 = (void **)(v49 + 104);
    if (v50 >= 0)
      v69 = *(unsigned __int8 *)(v49 + 127);
    else
      v69 = *(_QWORD *)(v49 + 112);
    *(_QWORD *)(*(_QWORD *)v26 + 192) |= 0x2000000000uLL;
    sub_22E711880(*(uint64_t **)(a2 + 16), *(_QWORD *)(a2 + 32), __dst);
    sub_22F2A6A84(a2, &__p);
    if (SBYTE7(__dst[1]) < 0)
      operator delete(*(void **)&__dst[0]);
    v70 = sub_22E6D59C0(v67, v68, v69, 1);
    if (!v70)
    {
LABEL_124:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v26 = *(_DWORD **)(a2 + 16);
LABEL_127:
      if (v26[652] == 20)
        *(_QWORD *)(*(_QWORD *)v26 + 192) |= 0x2000000000uLL;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1) & 1) == 0)
      {
        v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
        sub_22E6CC70C(a2, v71);
      }
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 32) + 48) + 24))(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), **(_QWORD **)(a2 + 16), *(_QWORD *)(a2 + 192));
      v72 = **(_QWORD **)(a2 + 16);
      if ((*(_QWORD *)(v72 + 20) & 0x800000000000) == 0
        || (v73 = *(_DWORD *)&v426[24], ((*(_DWORD *)&v426[24] >> 8) & 0x70) == 0)
        || ((*(_DWORD *)&v426[24] >> 8) & 8) != 0)
      {
LABEL_321:
        if (!v426[16])
        {
          v178 = 0;
          goto LABEL_339;
        }
        __p.__r_.__value_.__r.__words[0] = a2;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v422;
        sub_22F2A7234((_QWORD *)a2);
        sub_22F418BA8((uint64_t)&v436);
        if ((v438 & 1) != 0)
        {
          v182 = v436;
          *(_QWORD *)&v436 = 0;
        }
        else
        {
          sub_22F2AC330(&v436, (uint64_t)&v434);
          if ((v434.__r_.__value_.__s.__data_[8] & 1) == 0)
          {
            v179 = *(_QWORD *)(a2 + 192);
            v180 = v434.__r_.__value_.__r.__words[0];
            v434.__r_.__value_.__r.__words[0] = 0;
            v181 = *(_QWORD *)(v179 + 1096);
            *(_QWORD *)(v179 + 1096) = v180;
            if (v181)
              (*(void (**)(uint64_t))(*(_QWORD *)v181 + 16))(v181);
            *(_QWORD *)(*(_QWORD *)(a2 + 16) + 2288) &= ~0x400000uLL;
            if ((unint64_t)(*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)v436 + 80))(v436, v437) < 3)
            {
              v178 = 0;
LABEL_369:
              v183 = 0;
              goto LABEL_335;
            }
            (*(void (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v436 + 72))(v436, v437, 2);
            llvm::cas::ObjectStore::getProxy();
            if ((BYTE8(__dst[1]) & 1) == 0)
            {
              (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)&__dst[0] + 88))(*(_QWORD *)&__dst[0], *(_QWORD *)&__dst[1], 0);
              if ((BYTE8(__dst[1]) & 1) != 0)
              {
                v202 = *(_QWORD *)&__dst[0];
                *(_QWORD *)&__dst[0] = 0;
                if (v202)
                  (*(void (**)(uint64_t))(*(_QWORD *)v202 + 8))(v202);
              }
              v178 = 1;
              goto LABEL_369;
            }
            if (!*(_QWORD *)&__dst[0])
            {
              v183 = 0;
              v178 = 0;
              goto LABEL_335;
            }
LABEL_332:
            sub_22E72C698((uint64_t)&__p, (char **)__dst);
            if (*(_QWORD *)&__dst[0])
              (*(void (**)(_QWORD))(**(_QWORD **)&__dst[0] + 8))(*(_QWORD *)&__dst[0]);
            v178 = 0;
            v183 = 1;
LABEL_335:
            if ((v438 & 1) != 0)
            {
              v184 = v436;
              *(_QWORD *)&v436 = 0;
              if (v184)
                (*(void (**)(uint64_t))(*(_QWORD *)v184 + 8))(v184);
            }
            if (v183)
              goto LABEL_701;
LABEL_339:
            if (!sub_22E6CE89C((uint64_t)&v422, *(_QWORD *)(a2 + 32), *(llvm::MemoryBuffer **)(a2 + 160), *(_QWORD *)(a2 + 176)))goto LABEL_701;
            if ((*(_QWORD *)(**(_QWORD **)(a2 + 16) + 20) & 0x800000000000) == 0
              || (v426[25] & 0x70) == 0
              || (v426[25] & 8) == 0
              || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1) & 1) != 0)
            {
LABEL_341:
              v185 = *(_WORD *)&v426[24];
              if ((*(_WORD *)&v426[24] & 0x700) != 0x100)
                goto LABEL_496;
              v403 = v178;
              *(_DWORD *)(**(_QWORD **)(a2 + 16) + 240) = *(_DWORD *)(**(_QWORD **)(a2 + 16) + 240) & 0xFFFFFF1F | 0x20;
              memset(&__str, 0, sizeof(__str));
              v409 = 0;
              v186 = v426[28];
              v187 = *(_QWORD *)(a2 + 176);
              v188 = *(_QWORD *)(*(_QWORD *)(a2 + 192) + 104);
              v189 = *(_DWORD *)(v187 + 344);
              v190 = (_QWORD *)sub_22E6155EC((_QWORD *)v187, v189);
              v409 = 0;
              if ((v185 & 0x800) != 0)
              {
                v191 = sub_22E72C860(a2, (void **)&__str.__r_.__value_.__l.__data_, 1);
                if (v191)
                  v409 = sub_22E677168(*(_QWORD *)(a2 + 176), v191) >> 32;
              }
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_str = &__str;
              else
                p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
              else
                size = __str.__r_.__value_.__l.__size_;
              if (sub_22F40F670((uint64_t *)v188, v190, v186 != 0, v189, &v409, p_str, size))
                goto LABEL_491;
              sub_22E72C63C((_QWORD *)v187, v189, 0, (llvm::MemoryBufferRef *)__dst);
              if (*((_QWORD *)&__dst[0] + 1) == v409)
                v409 = 0;
              *(_QWORD *)&__dst[0] = v190[5];
              *(_QWORD *)&v436 = 0;
              if (sub_22F2ABDF8((uint64_t *)(v188 + 1768), __dst, &v436))
              {
                v194 = v436;
                v195 = *(_QWORD *)(v188 + 1768);
                v196 = *(_DWORD *)(v188 + 1784);
              }
              else
              {
                v195 = *(_QWORD *)(v188 + 1768);
                v196 = *(_DWORD *)(v188 + 1784);
                v194 = v195 + 88 * v196;
              }
              if (v195 + 88 * v196 != v194 && (*(_BYTE *)(v194 + 8) & 1) != 0)
              {
                v203 = v190[5];
                v205 = *(const void **)v203;
                v204 = *(_QWORD *)(v203 + 8);
                *(_QWORD *)&__dst[0] = (char *)&__dst[1] + 8;
                *(_OWORD *)((char *)__dst + 8) = xmmword_22F44E310;
                if (v204 >= 0x81)
                {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod();
                  v206 = *((_QWORD *)&__dst[0] + 1);
                }
                else
                {
                  v206 = 0;
                }
                if (v204)
                {
                  memcpy((void *)(*(_QWORD *)&__dst[0] + v206), v205, v204);
                  v206 = *((_QWORD *)&__dst[0] + 1);
                }
                *((_QWORD *)&__dst[0] + 1) = v206 + v204;
                v207 = **(_QWORD **)(a2 + 16);
                v208 = *(_BYTE *)(v207 + 495);
                v209 = v208;
                v210 = v208 & 0x7F;
                if (v209 >= 0)
                  v211 = v210;
                else
                  v211 = *(_QWORD *)(v207 + 480);
                sub_22E3B8BF4((uint64_t)&v431, v211 + 10);
                if (v433 >= 0)
                  v212 = &v431;
                else
                  v212 = v431;
                if (v211)
                {
                  if (*(char *)(v207 + 495) >= 0)
                    v213 = (const void *)(v207 + 472);
                  else
                    v213 = *(const void **)(v207 + 472);
                  memmove(v212, v213, v211);
                }
                strcpy((char *)v212 + v211, ".framework");
                LOWORD(v439) = 260;
                *(_QWORD *)&v436 = &v431;
                v430 = 257;
                v435 = 257;
                v428 = 257;
                llvm::sys::path::append();
                if (v433 < 0)
                  operator delete(v431);
                sub_22F1D0728(*(_QWORD *)(a2 + 160), *(char **)&__dst[0], *((unint64_t *)&__dst[0] + 1), 1, (uint64_t)&v436);
                if ((v437 & 1) == 0)
                  sub_22F159088(v188 + 488, (const void **)v436, v186, 0);
                if (*(_OWORD **)&__dst[0] != (_OWORD *)((char *)&__dst[1] + 8))
                  free(*(void **)&__dst[0]);
              }
              if (v423 >= 0)
                v214 = &v422;
              else
                v214 = (__int128 *)v422;
              if (v423 >= 0)
                v215 = HIBYTE(v423) & 0x7F;
              else
                v215 = *((_QWORD *)&v422 + 1);
              v216 = **(_QWORD **)(a2 + 16);
              v217 = *(unsigned __int8 *)(v216 + 519);
              if (*(char *)(v216 + 519) < 0)
                v218 = *(_QWORD *)(v216 + 504);
              else
                v218 = *(unsigned __int8 *)(v216 + 519);
              if (!v218)
              {
                v219 = *(_QWORD *)(a2 + 32);
                *(_QWORD *)(v219 + 312) = 0x32100000000;
                if (*(char *)(v219 + 311) < 0)
                {
                  **(_BYTE **)(v219 + 288) = 0;
                  *(_QWORD *)(v219 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v219 + 288) = 0;
                  *(_BYTE *)(v219 + 311) = 0;
                }
                v436 = (unint64_t)(v219 + 320);
                v437 = v219;
                LOWORD(v438) = 1;
                *(_BYTE *)(v219 + 320) = 0;
                *(_DWORD *)(v219 + 664) = 0;
                v228 = *(unsigned int *)(v219 + 776);
                if ((_DWORD)v228)
                {
                  v229 = *(_QWORD *)(v219 + 768);
                  v230 = 56 * v228;
                  do
                  {
                    if (*(char *)(v229 + v230 - 9) < 0)
                      operator delete(*(void **)(v229 + v230 - 32));
                    v230 -= 56;
                  }
                  while (v230);
                }
                *(_DWORD *)(v219 + 776) = 0;
                v231 = &v436;
                goto LABEL_490;
              }
              v220 = (const void **)(v216 + 496);
              v222 = *(const void ***)(v216 + 496);
              v221 = *(_QWORD *)(v216 + 504);
              if ((v217 & 0x80u) == 0)
                v223 = v220;
              else
                v223 = v222;
              if ((v217 & 0x80u) == 0)
                v224 = v217;
              else
                v224 = v221;
              v225 = sub_22F138980(*(uint64_t **)(*(_QWORD *)(a2 + 192) + 104), v223, v224, 0, 1, 0);
              if (!v225)
              {
                v226 = *(_QWORD *)(a2 + 32);
                *(_QWORD *)(v226 + 312) = 0x32000000000;
                if (*(char *)(v226 + 311) < 0)
                {
                  **(_BYTE **)(v226 + 288) = 0;
                  *(_QWORD *)(v226 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v226 + 288) = 0;
                  *(_BYTE *)(v226 + 311) = 0;
                }
                __dst[0] = (unint64_t)(v226 + 320);
                *(_QWORD *)&__dst[1] = v226;
                WORD4(__dst[1]) = 1;
                *(_BYTE *)(v226 + 320) = 0;
                *(_DWORD *)(v226 + 664) = 0;
                v256 = *(unsigned int *)(v226 + 776);
                if ((_DWORD)v256)
                {
                  v257 = *(_QWORD *)(v226 + 768);
                  v258 = 56 * v256;
                  do
                  {
                    if (*(char *)(v257 + v258 - 9) < 0)
                      operator delete(*(void **)(v257 + v258 - 32));
                    v258 -= 56;
                  }
                  while (v258);
                }
                *(_DWORD *)(v226 + 776) = 0;
                v259 = **(_QWORD **)(a2 + 16);
                v260 = (void *)(v259 + 496);
                v261 = *(_BYTE *)(v259 + 519);
                v263 = *(void **)(v259 + 496);
                v262 = *(_QWORD *)(v259 + 504);
                if (v261 >= 0)
                  v264 = v260;
                else
                  v264 = v263;
                if (v261 >= 0)
                  v265 = v261 & 0x7F;
                else
                  v265 = v262;
                sub_22E3B89A8((unsigned __int8 **)__dst, v264, v265);
                v266 = v214;
                v267 = v215;
LABEL_489:
                sub_22E3B89A8((unsigned __int8 **)__dst, v266, v267);
                v231 = __dst;
LABEL_490:
                sub_22E3BB0B8((uint64_t)v231);
                goto LABEL_491;
              }
              v232 = v225;
              if ((sub_22F16B7D0(**(_QWORD **)(a2 + 16), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 32), v225) & 1) == 0)
              {
                *(_QWORD *)(*(_QWORD *)(a2 + 192) + 888) = *(_QWORD *)(v232 + 40);
                LOBYTE(__dst[0]) = 0;
                LOBYTE(__dst[4]) = 0;
                if (*(_BYTE *)(a2 + 152))
                {
                  sub_22F2ABE9C((uint64_t)__dst, (_QWORD *)(a2 + 88));
                  if (LOBYTE(__dst[4]))
                  {
                    llvm::cas::CASID::toString((llvm::cas::CASID *)__dst);
                    sub_22E72CFC4(v232, (__n128 *)&__p);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                    if (LOBYTE(__dst[4]) && *((_OWORD **)&__dst[0] + 1) != &__dst[2])
                      free(*((void **)&__dst[0] + 1));
                  }
                }
                v233 = *(_QWORD *)(a2 + 16);
                v234 = *(_BYTE *)(v233 + 2503);
                v235 = v234;
                v236 = v234 & 0x7F;
                if (v235 >= 0)
                  v237 = v236;
                else
                  v237 = *(_QWORD *)(v233 + 2488);
                if (v237)
                {
                  v326 = (void *)(v233 + 2480);
                  v327 = *(void **)(v233 + 2480);
                  if (v235 >= 0)
                    v328 = v326;
                  else
                    v328 = v327;
                  sub_22F1D07D8(*(_QWORD *)(a2 + 160), v328, v237, 1, 1, (uint64_t)&v434);
                  if ((v434.__r_.__value_.__s.__data_[16] & 1) != 0)
                  {
                    v333 = *(_QWORD *)(a2 + 32);
                    *(_QWORD *)(v333 + 312) = 0x32900000000;
                    if (*(char *)(v333 + 311) < 0)
                    {
                      **(_BYTE **)(v333 + 288) = 0;
                      *(_QWORD *)(v333 + 296) = 0;
                    }
                    else
                    {
                      *(_BYTE *)(v333 + 288) = 0;
                      *(_BYTE *)(v333 + 311) = 0;
                    }
                    __dst[0] = (unint64_t)(v333 + 320);
                    *(_QWORD *)&__dst[1] = v333;
                    WORD4(__dst[1]) = 1;
                    *(_BYTE *)(v333 + 320) = 0;
                    *(_DWORD *)(v333 + 664) = 0;
                    v348 = *(unsigned int *)(v333 + 776);
                    if ((_DWORD)v348)
                    {
                      v349 = *(_QWORD *)(v333 + 768);
                      v350 = 56 * v348;
                      do
                      {
                        if (*(char *)(v349 + v350 - 9) < 0)
                          operator delete(*(void **)(v349 + v350 - 32));
                        v350 -= 56;
                      }
                      while (v350);
                    }
                    *(_DWORD *)(v333 + 776) = 0;
                    v266 = (__int128 *)v328;
                    v267 = v237;
                    goto LABEL_489;
                  }
                  v329 = v434.__r_.__value_.__r.__words[0];
                  if (v329 != sub_22E6155EC(*(_QWORD **)(a2 + 176), *(_DWORD *)(*(_QWORD *)(a2 + 176) + 344)))
                  {
                    *(_WORD *)(v232 + 1344) |= 0x100u;
                    v330 = *(_QWORD *)(*(_QWORD *)(a2 + 192) + 104);
                    *(_QWORD *)&__dst[0] = v232;
                    sub_22F37065C((uint64_t *)(v330 + 1792), __dst)[1] = v329;
                  }
                }
                v238 = *(_QWORD *)(a2 + 176);
                v178 = v403;
                if (!*(_DWORD *)(v238 + 488))
                {
                  v239 = **(_QWORD **)(a2 + 16);
                  v240 = (void *)(v239 + 496);
                  v241 = *(_BYTE *)(v239 + 519);
                  v243 = *(void **)(v239 + 496);
                  v242 = *(_QWORD *)(v239 + 504);
                  if (v241 >= 0)
                    v244 = v240;
                  else
                    v244 = v243;
                  if (v241 >= 0)
                    v245 = v241 & 0x7F;
                  else
                    v245 = v242;
                  sub_22E6D7620(v238, v244, v245, 0, *(_QWORD *)(a2 + 176));
                }
                std::string::operator=((std::string *)(v232 + 48), &__str);
                if (v409)
                {
                  v331 = *(_QWORD *)(a2 + 192);
                  *(_DWORD *)(v331 + 896) = v409;
                  v268 = 1;
                  *(_BYTE *)(v331 + 900) = 1;
LABEL_493:
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__str.__r_.__value_.__l.__data_);
                  if (!v268)
                    goto LABEL_701;
LABEL_496:
                  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2))
                    goto LABEL_701;
                  v404 = v178;
                  v269 = *(_QWORD *)(a2 + 16);
                  v270 = *(const void ***)(v269 + 2832);
                  for (i = *(const void ***)(v269 + 2840); v270 != i; v270 += 3)
                  {
                    v294 = *((_BYTE *)v270 + 23);
                    v295 = v294 < 0;
                    if (v294 >= 0)
                      v296 = v270;
                    else
                      v296 = *v270;
                    v297 = v294 & 0x7F;
                    if (v295)
                      v298 = (size_t)v270[1];
                    else
                      v298 = v297;
                    sub_22F1D07D8(*(_QWORD *)(a2 + 160), v296, v298, 0, 1, (uint64_t)&v436);
                    if ((v437 & 1) != 0)
                    {
                      v299 = *(_QWORD *)(a2 + 32);
                      *(_QWORD *)(v299 + 312) = 0x32900000000;
                      if (*(char *)(v299 + 311) < 0)
                      {
                        **(_BYTE **)(v299 + 288) = 0;
                        *(_QWORD *)(v299 + 296) = 0;
                      }
                      else
                      {
                        *(_BYTE *)(v299 + 288) = 0;
                        *(_BYTE *)(v299 + 311) = 0;
                      }
                      __dst[0] = (unint64_t)(v299 + 320);
                      *(_QWORD *)&__dst[1] = v299;
                      WORD4(__dst[1]) = 1;
                      *(_BYTE *)(v299 + 320) = 0;
                      *(_DWORD *)(v299 + 664) = 0;
                      v300 = *(unsigned int *)(v299 + 776);
                      if ((_DWORD)v300)
                      {
                        v301 = *(_QWORD *)(v299 + 768);
                        v302 = 56 * v300;
                        do
                        {
                          if (*(char *)(v301 + v302 - 9) < 0)
                            operator delete(*(void **)(v301 + v302 - 32));
                          v302 -= 56;
                        }
                        while (v302);
                      }
                      *(_DWORD *)(v299 + 776) = 0;
                      v303 = *((_BYTE *)v270 + 23);
                      v304 = v303 < 0;
                      if (v303 >= 0)
                        v305 = v270;
                      else
                        v305 = (void *)*v270;
                      v306 = v303 & 0x7F;
                      if (v304)
                        v307 = (size_t)v270[1];
                      else
                        v307 = v306;
                      sub_22E3B89A8((unsigned __int8 **)__dst, v305, v307);
                      sub_22E3BB0B8((uint64_t)__dst);
                    }
                    else
                    {
                      sub_22F40F670(*(uint64_t **)(*(_QWORD *)(a2 + 192) + 104), (_QWORD *)v436, 0, 0, 0, 0, 0);
                    }
                  }
                  sub_22F418474(*(_QWORD *)(a2 + 192));
                  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 192) + 104) + 1736);
                  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1) & 1) != 0)
                  {
LABEL_499:
                    v272 = *(_QWORD *)(a2 + 16);
                    if ((*(_QWORD *)(*(_QWORD *)v272 + 20) & 0x200000000000) != 0
                      || (v273 = *(_QWORD *)(a2 + 208)) == 0
                      || !*(_QWORD *)(v273 + 16048))
                    {
                      sub_22F1C9CA8(*(_QWORD *)(*(_QWORD *)(a2 + 192) + 680), (unsigned int *)(*(_QWORD *)(a2 + 192) + 544), *(_QWORD *)(*(_QWORD *)(a2 + 192) + 56));
                      v272 = *(_QWORD *)(a2 + 16);
                    }
                    v274 = *(_QWORD *)(v272 + 2928);
                    v275 = *(_QWORD *)(v272 + 2936);
                    if (v274 == v275)
                    {
LABEL_519:
                      v286 = *(_QWORD *)(v272 + 2856);
                      v287 = *(_QWORD *)(v272 + 2864);
                      if (v286 == v287)
                      {
LABEL_529:
                        if (*(char *)(v272 + 2999) < 0)
                          v293 = *(_QWORD *)(v272 + 2984);
                        else
                          v293 = *(unsigned __int8 *)(v272 + 2999);
                        if (v293)
                        {
                          v308 = *(_QWORD *)(a2 + 208);
                          if (v308)
                          {
                            if (!*(_QWORD *)(v308 + 16048))
                            {
                              v309 = (_QWORD *)operator new();
                              v310 = v309;
                              v311 = *(_QWORD *)(a2 + 16);
                              v312 = *(_BYTE *)(v311 + 2999);
                              if (v312 >= 0)
                                v313 = (void *)(v311 + 2976);
                              else
                                v313 = *(void **)(v311 + 2976);
                              v314 = *(_QWORD *)(v311 + 2984);
                              if (v312 >= 0)
                                v315 = v312 & 0x7F;
                              else
                                v315 = v314;
                              v316 = sub_22E73C6A0(v309, v313, v315);
                              v317 = *(_QWORD *)(a2 + 208);
                              *((_DWORD *)v316 + 2) += 2;
                              v318 = *(_DWORD **)(v317 + 16048);
                              *(_QWORD *)(v317 + 16048) = v310;
                              if (v318)
                              {
                                v396 = v318[2] - 1;
                                v318[2] = v396;
                                if (!v396)
                                  (*(void (**)(_DWORD *))(*(_QWORD *)v318 + 8))(v318);
                              }
                              v319 = v310[2] - 1;
                              v310[2] = v319;
                              if (!v319)
                                (*(void (**)(_DWORD *))(*(_QWORD *)v310 + 8))(v310);
                            }
                          }
                        }
                        goto LABEL_69;
                      }
                      while (1)
                      {
                        v288 = *(_BYTE *)(v286 + 23);
                        v289 = v288 < 0;
                        v290 = v288 >= 0 ? (_BYTE *)v286 : *(_BYTE **)v286;
                        v291 = v288 & 0x7F;
                        v292 = v289 ? *(_QWORD *)(v286 + 8) : v291;
                        if ((sub_22E6CFC78((_QWORD *)a2, v290, v292) & 1) == 0)
                          break;
                        v286 += 24;
                        if (v286 == v287)
                        {
                          v272 = *(_QWORD *)(a2 + 16);
                          goto LABEL_529;
                        }
                      }
                    }
                    else
                    {
                      while (1)
                      {
                        v276 = *(_BYTE *)(v274 + 23);
                        v277 = v276 < 0;
                        v278 = v276 >= 0 ? (const void *)v274 : *(const void **)v274;
                        v279 = v276 & 0x7F;
                        v280 = v277 ? *(_QWORD *)(v274 + 8) : v279;
                        v281 = *(_BYTE *)(v274 + 47);
                        v282 = v281;
                        v283 = v281 >= 0 ? (void *)(v274 + 24) : *(void **)(v274 + 24);
                        v284 = v281 & 0x7F;
                        v285 = v282 >= 0 ? v284 : *(_QWORD *)(v274 + 32);
                        if ((sub_22F2A7AB0((_QWORD *)a2, v278, v280, v283, v285, "-fmodule-file-cache-key", 0x17uLL) & 1) != 0)
                          break;
                        v274 += 48;
                        if (v274 == v275)
                        {
                          v272 = *(_QWORD *)(a2 + 16);
                          goto LABEL_519;
                        }
                      }
                    }
                    goto LABEL_701;
                  }
                  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1) & 1) == 0)
                    sub_22F2A6C34(a2);
                  if (*(_BYTE *)(a1 + 64))
                  {
                    v323 = *(const void **)(a1 + 48);
                    v325 = (size_t *)(a1 + 56);
                  }
                  else
                  {
                    v323 = (const void *)(a1 + 8);
                    v322 = *(const void **)(a1 + 8);
                    v324 = *(char *)(a1 + 31);
                    if (v324 >= 0)
                      v322 = (const void *)(a1 + 8);
                    if ((v324 & 0x80000000) == 0)
                    {
                      v332 = *(unsigned __int8 *)(a1 + 31);
                      goto LABEL_597;
                    }
                    v325 = (size_t *)(a1 + 16);
                    v323 = v322;
                  }
                  v332 = *v325;
                  if (*v325 > 0x7FFFFFFFFFFFFFF7)
                    goto LABEL_419;
LABEL_597:
                  if (v332 >= 0x17)
                  {
                    v336 = (v332 & 0x7FFFFFFFFFFFFFF8) + 8;
                    if ((v332 | 7) != 0x17)
                      v336 = v332 | 7;
                    v337 = v336 + 1;
                    v335 = operator new(v336 + 1);
                    *(_QWORD *)&__dst[1] = v337 | 0x8000000000000000;
                    *(_QWORD *)&__dst[0] = v335;
                    *((_QWORD *)&__dst[0] + 1) = v332;
                  }
                  else
                  {
                    BYTE7(__dst[1]) = v332;
                    v335 = __dst;
                    if (!v332)
                    {
LABEL_604:
                      *((_BYTE *)v335 + v332) = 0;
                      if ((v426[25] & 8) != 0)
                        sub_22E72C860(a2, (void **)__dst, 0);
                      if ((SBYTE7(__dst[1]) & 0x80u) == 0)
                        v338 = __dst;
                      else
                        v338 = *(_OWORD **)&__dst[0];
                      if ((SBYTE7(__dst[1]) & 0x80u) == 0)
                        v339 = BYTE7(__dst[1]) & 0x7F;
                      else
                        v339 = *((_QWORD *)&__dst[0] + 1);
                      sub_22E729A14(&v436, a1, a2, (uint64_t)v338, v339);
                      v340 = v436;
                      if (!(_QWORD)v436)
                        goto LABEL_699;
                      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1) & 1) == 0)
                      {
                        v341 = *(_QWORD *)(a2 + 208);
                        *(_QWORD *)(v341 + 16056) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v340 + 136))(v340);
                      }
                      v342 = *(_QWORD **)(a2 + 16);
                      v343 = v342[7];
                      if (*(_QWORD *)(v343 + 128) == *(_QWORD *)(v343 + 136))
                      {
                        if ((*(_QWORD *)(*v342 + 20) & 0x200000000000) == 0)
                        {
                          v344 = *(char *)(v343 + 127) < 0 ? *(_QWORD *)(v343 + 112) : *(unsigned __int8 *)(v343 + 127);
                          if (!v404 && !v344)
                            goto LABEL_722;
                        }
                        v372 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v340 + 144))(v340);
                        v373 = *(_QWORD **)(a2 + 16);
                        v374 = v373[7];
                        v375 = *(_BYTE *)(v374 + 158);
                        v376 = v375 != 0;
                        if (v375)
                        {
                          v377 = operator new();
                          *(_BYTE *)(v377 + 16) = 0;
                          *(_QWORD *)v377 = &off_24FA708E0;
                          *(_QWORD *)(v377 + 8) = v372;
                          v373 = *(_QWORD **)(a2 + 16);
                          v374 = v373[7];
                          v372 = v377;
                        }
                        if (*(_QWORD *)(v374 + 176))
                        {
                          v378 = operator new();
                          v379 = *(_QWORD *)(a2 + 208);
                          v380 = (const void ***)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 56) + 160);
                          *(_BYTE *)(v378 + 16) = v375;
                          *(_QWORD *)v378 = &off_24FA709B0;
                          *(_QWORD *)(v378 + 8) = v372;
                          *(_QWORD *)(v378 + 24) = v379;
                          sub_22E720CDC(v378 + 32, v380);
                          v373 = *(_QWORD **)(a2 + 16);
                          v374 = v373[7];
                          v376 = 1;
                          v372 = v378;
                        }
                        v381 = *(_BYTE *)(v374 + 127);
                        if (v381 < 0)
                          v382 = *(_QWORD *)(v374 + 112);
                        else
                          v382 = *(unsigned __int8 *)(v374 + 127);
                        if (v404 || v382)
                        {
                          if (v404)
                          {
                            v384 = "<PCH>";
                            v385 = 5;
                            llvm::MemoryBuffer::getMemBuffer();
                            v383 = __p.__r_.__value_.__r.__words[0];
                            v374 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 56);
                            v386 = 3;
                          }
                          else
                          {
                            v383 = 0;
                            if (v381 >= 0)
                              v384 = (char *)(v374 + 104);
                            else
                              v384 = *(char **)(v374 + 104);
                            if (v381 >= 0)
                              v385 = *(unsigned __int8 *)(v374 + 127);
                            else
                              v385 = *(_QWORD *)(v374 + 112);
                            v386 = *(_DWORD *)(v374 + 152);
                          }
                          v387 = *(_BYTE *)(v374 + 156);
                          v406 = v383;
                          sub_22F2A6CA8((_QWORD *)a2, v384, v385, v386, v387, v372, v376, (uint64_t *)&v406);
                          v388 = v406;
                          v406 = 0;
                          if (v388)
                            (*(void (**)(uint64_t))(*(_QWORD *)v388 + 8))(v388);
                          if (!*(_QWORD *)(*(_QWORD *)(a2 + 208) + 16048))
                          {
                            v340 = v436;
                            if (!(_QWORD)v436)
                              goto LABEL_699;
                            goto LABEL_698;
                          }
                          v373 = *(_QWORD **)(a2 + 16);
                        }
                        if ((*(_QWORD *)(*v373 + 20) & 0x200000000000) == 0)
                        {
                          v391 = *(_QWORD *)(a2 + 208);
                          if (v391)
                          {
                            if (*(_QWORD *)(v391 + 16048))
                              goto LABEL_722;
                          }
                        }
                        sub_22E6CF0EC((_QWORD *)a2);
                        v392 = *(_QWORD *)(a2 + 264);
                        v393 = v392 ? *(_DWORD *)(v392 + 32) + 1 : MEMORY[0x20];
                        *(_QWORD *)(v392 + 64) = v372;
                        *(_BYTE *)(v392 + 72) = v376;
                        v394 = v393 - 1;
                        *(_DWORD *)(v392 + 32) = v394;
                        if (v394)
                          goto LABEL_722;
                        v345 = (_DWORD *)(v392 + 24);
                      }
                      else
                      {
                        __p.__r_.__value_.__r.__words[0] = 0;
                        sub_22E6C9DF8((_QWORD *)a2, &__p, &v407);
                        v345 = v407;
                        v407 = 0;
                        v346 = __p.__r_.__value_.__r.__words[0];
                        if (!v345)
                        {
                          if (__p.__r_.__value_.__r.__words[0])
                          {
                            v347 = *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 8) - 1;
                            *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 8) = v347;
                            if (!v347)
                              (*(void (**)(std::string::size_type))(*(_QWORD *)v346 + 8))(v346);
                          }
LABEL_698:
                          (*(void (**)(uint64_t))(*(_QWORD *)v340 + 8))(v340);
LABEL_699:
                          if (SBYTE7(__dst[1]) < 0)
                            operator delete(*(void **)&__dst[0]);
                          goto LABEL_701;
                        }
                        v364 = __p.__r_.__value_.__r.__words[0] - 24;
                        if (__p.__r_.__value_.__r.__words[0])
                          ++*(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 8);
                        else
                          v364 = 0;
                        v365 = *(_QWORD *)(a2 + 264);
                        *(_QWORD *)(a2 + 264) = v364;
                        if (v365)
                        {
                          v366 = *(_DWORD *)(v365 + 32) - 1;
                          *(_DWORD *)(v365 + 32) = v366;
                          if (!v366)
                            (*(void (**)(uint64_t))(*(_QWORD *)(v365 + 24) + 8))(v365 + 24);
                        }
                        v367 = *(_QWORD *)(a2 + 208);
                        ++v345[2];
                        v368 = *(_DWORD **)(v367 + 16048);
                        *(_QWORD *)(v367 + 16048) = v345;
                        if (v368)
                        {
                          v397 = v368[2] - 1;
                          v368[2] = v397;
                          if (!v397)
                            (*(void (**)(_DWORD *))(*(_QWORD *)v368 + 8))(v368);
                        }
                        v369 = __p.__r_.__value_.__r.__words[0];
                        if (__p.__r_.__value_.__r.__words[0])
                        {
                          v370 = *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 8) - 1;
                          *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 8) = v370;
                          if (!v370)
                            (*(void (**)(std::string::size_type))(*(_QWORD *)v369 + 8))(v369);
                        }
                        v371 = v345[2] - 1;
                        v345[2] = v371;
                        if (v371)
                          goto LABEL_722;
                      }
                      (*(void (**)(_DWORD *))(*(_QWORD *)v345 + 8))(v345);
LABEL_722:
                      v405 = v436;
                      sub_22F2A6A24(a2, &v405);
                      if (v405)
                        (*(void (**)(uint64_t))(*(_QWORD *)v405 + 8))(v405);
                      v395 = *(_QWORD *)(a2 + 224);
                      if (SBYTE7(__dst[1]) < 0)
                        operator delete(*(void **)&__dst[0]);
                      if (v395)
                        goto LABEL_499;
LABEL_701:
                      v44 = 0;
                      goto LABEL_702;
                    }
                  }
                  memmove(v335, v323, v332);
                  goto LABEL_604;
                }
                v246 = *(_QWORD *)(a2 + 160);
                *(_QWORD *)&__dst[0] = (char *)&__dst[1] + 8;
                *(_OWORD *)((char *)__dst + 8) = xmmword_22F44E320;
                std::system_category();
                sub_22E72D044((char *)v232, (uint64_t)&v436);
                if (v441)
                {
                  if (v440 >= 0)
                    v247 = &v438;
                  else
                    v247 = v438;
                  if (v440 >= 0)
                    v248 = v440 & 0x7F;
                  else
                    v248 = v439;
                  sub_22E72D0EC(v247, v248, __dst, **(uint64_t ***)(a2 + 16), (*(unsigned __int16 *)(v232 + 1344) >> 7) & 1);
                }
                if (v440 < 0)
                  operator delete(v438);
                if (SHIBYTE(v437) < 0)
                  operator delete((void *)v436);
                *(_QWORD *)&v427.__val_ = sub_22E72D310(**(uint64_t ***)(a2 + 16), v246, *(_QWORD *)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 192) + 104) + 488, v232, __dst);
                v427.__cat_ = v249;
                if (v427.__val_)
                {
                  v334 = *(_QWORD *)(a2 + 32);
                  *(_QWORD *)(v334 + 312) = 0x32600000000;
                  if (*(char *)(v334 + 311) < 0)
                  {
                    **(_BYTE **)(v334 + 288) = 0;
                    *(_QWORD *)(v334 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v334 + 288) = 0;
                    *(_BYTE *)(v334 + 311) = 0;
                  }
                  v436 = (unint64_t)(v334 + 320);
                  v437 = v334;
                  LOWORD(v438) = 1;
                  *(_BYTE *)(v334 + 320) = 0;
                  *(_DWORD *)(v334 + 664) = 0;
                  v351 = *(unsigned int *)(v334 + 776);
                  if ((_DWORD)v351)
                  {
                    v352 = *(_QWORD *)(v334 + 768);
                    v353 = 56 * v351;
                    do
                    {
                      if (*(char *)(v352 + v353 - 9) < 0)
                        operator delete(*(void **)(v352 + v353 - 32));
                      v353 -= 56;
                    }
                    while (v353);
                  }
                  *(_DWORD *)(v334 + 776) = 0;
                  sub_22F1D8A24((uint64_t *)v232, 0, &__p);
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    p_p = &__p;
                  else
                    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v355 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
                  else
                    v355 = __p.__r_.__value_.__l.__size_;
                  sub_22E3B89A8((unsigned __int8 **)&v436, p_p, v355);
                  std::error_code::message(&v434, &v427);
                  if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v356 = &v434;
                  else
                    v356 = (std::string *)v434.__r_.__value_.__r.__words[0];
                  if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v357 = *((_BYTE *)&v434.__r_.__value_.__s + 23) & 0x7F;
                  else
                    v357 = v434.__r_.__value_.__l.__size_;
                  sub_22E3B89A8((unsigned __int8 **)&v436, v356, v357);
                  if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v434.__r_.__value_.__l.__data_);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  sub_22E3BB0B8((uint64_t)&v436);
                  v431 = 0;
                }
                else
                {
                  LOWORD(v439) = 261;
                  *(_QWORD *)&v436 = "<module-includes>";
                  *((_QWORD *)&v436 + 1) = 17;
                  llvm::MemoryBuffer::getMemBufferCopy();
                }
                if (*(_OWORD **)&__dst[0] != (_OWORD *)((char *)&__dst[1] + 8))
                  free(*(void **)&__dst[0]);
                v358 = v431;
                if (v431)
                {
                  v359 = (*(unsigned __int16 *)(v232 + 1344) >> 6) & 1;
                  v360 = *(_QWORD *)(a2 + 176);
                  v431 = 0;
                  v408 = v358;
                  v361 = sub_22F1E1980((_QWORD *)v360, (uint64_t *)&v408, v359, 0, 0, 0);
                  v362 = (uint64_t)v408;
                  v408 = 0;
                  if (v362)
                    (*(void (**)(uint64_t))(*(_QWORD *)v362 + 8))(v362);
                  *(_DWORD *)(v360 + 344) = v361;
                  v363 = v431;
                  v431 = 0;
                  if (v363)
                    (*(void (**)(void *))(*(_QWORD *)v363 + 8))(v363);
                  v268 = 1;
                  goto LABEL_492;
                }
              }
LABEL_491:
              v268 = 0;
LABEL_492:
              v178 = v403;
              goto LABEL_493;
            }
            if (*(_BYTE *)(a1 + 64))
            {
              v200 = v178;
              v198 = *(const void **)(a1 + 48);
              v201 = (size_t *)(a1 + 56);
            }
            else
            {
              v198 = (const void *)(a1 + 8);
              v197 = *(const void **)(a1 + 8);
              v199 = *(char *)(a1 + 31);
              if (v199 >= 0)
                v197 = (const void *)(a1 + 8);
              v200 = v178;
              if ((v199 & 0x80000000) == 0)
              {
                v227 = *(unsigned __int8 *)(a1 + 31);
                goto LABEL_463;
              }
              v201 = (size_t *)(a1 + 16);
              v198 = v197;
            }
            v227 = *v201;
            if (*v201 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_419;
LABEL_463:
            if (v227 >= 0x17)
            {
              v251 = (v227 & 0x7FFFFFFFFFFFFFF8) + 8;
              if ((v227 | 7) != 0x17)
                v251 = v227 | 7;
              v252 = v251 + 1;
              v250 = operator new(v251 + 1);
              *(_QWORD *)&__dst[1] = v252 | 0x8000000000000000;
              *(_QWORD *)&__dst[0] = v250;
              *((_QWORD *)&__dst[0] + 1) = v227;
            }
            else
            {
              BYTE7(__dst[1]) = v227;
              v250 = __dst;
              if (!v227)
                goto LABEL_470;
            }
            memmove(v250, v198, v227);
LABEL_470:
            *((_BYTE *)v250 + v227) = 0;
            sub_22E72C860(a2, (void **)__dst, 0);
            v253 = *(uint64_t **)(a2 + 16);
            v254 = *v253;
            if (*(char *)(*v253 + 495) < 0)
              v255 = *(_QWORD *)(v254 + 480);
            else
              v255 = *(unsigned __int8 *)(*v253 + 495);
            v178 = v200;
            if (!v255)
            {
              if (SBYTE7(__dst[1]) < 0)
              {
                sub_22E3BB2B4(&v436, *(void **)&__dst[0], *((unint64_t *)&__dst[0] + 1));
                v253 = *(uint64_t **)(a2 + 16);
              }
              else
              {
                v436 = __dst[0];
                v437 = *(_QWORD *)&__dst[1];
              }
              v320 = *v253;
              v321 = v320 + 472;
              if (*(char *)(v320 + 495) < 0)
                operator delete(*(void **)v321);
              *(_OWORD *)v321 = v436;
              *(_QWORD *)(v321 + 16) = v437;
              v254 = **(_QWORD **)(a2 + 16);
            }
            std::string::operator=((std::string *)(v254 + 496), (const std::string *)(v254 + 472));
            if (SBYTE7(__dst[1]) < 0)
              operator delete(*(void **)&__dst[0]);
            goto LABEL_341;
          }
          v182 = v434.__r_.__value_.__r.__words[0];
          v434.__r_.__value_.__r.__words[0] = 0;
        }
        *(_QWORD *)&__dst[0] = v182;
        goto LABEL_332;
      }
      if (v423 >= 0)
        v74 = &v422;
      else
        v74 = (__int128 *)v422;
      if (v423 >= 0)
        v75 = HIBYTE(v423) & 0x7F;
      else
        v75 = *((_QWORD *)&v422 + 1);
      if ((*(_WORD *)&v426[24] & 0x7000) == 0x3000)
      {
LABEL_305:
        if (*(char *)(v72 + 495) < 0)
          v172 = *(_QWORD *)(v72 + 480);
        else
          v172 = *(unsigned __int8 *)(v72 + 495);
        if (v172)
        {
LABEL_320:
          std::string::operator=((std::string *)(v72 + 496), (const std::string *)(v72 + 472));
          goto LABEL_321;
        }
        if (v75 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_419;
        if (v75 >= 0x17)
        {
          v174 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v75 | 7) != 0x17)
            v174 = v75 | 7;
          v175 = v174 + 1;
          v173 = operator new(v174 + 1);
          *(_QWORD *)&__dst[1] = v175 | 0x8000000000000000;
          *(_QWORD *)&__dst[0] = v173;
          *((_QWORD *)&__dst[0] + 1) = v75;
        }
        else
        {
          BYTE7(__dst[1]) = v75;
          v173 = __dst;
          if (!v75)
            goto LABEL_317;
        }
        memmove(v173, v74, v75);
LABEL_317:
        *((_BYTE *)v173 + v75) = 0;
        v176 = **(_QWORD **)(a2 + 16);
        v177 = v176 + 472;
        if (*(char *)(v176 + 495) < 0)
          operator delete(*(void **)v177);
        *(_OWORD *)v177 = __dst[0];
        *(_QWORD *)(v177 + 16) = *(_QWORD *)&__dst[1];
        v72 = **(_QWORD **)(a2 + 16);
        goto LABEL_320;
      }
      v76 = *(_QWORD *)(*(_QWORD *)(a2 + 192) + 104);
      sub_22F1D0728(*(_QWORD *)(a2 + 160), ".", 1uLL, 1, (uint64_t)__dst);
      *(_QWORD *)&v436 = &v437;
      if ((__dst[1] & 1) != 0)
        v77 = 0;
      else
        v77 = *(void **)&__dst[0];
      v437 = 0;
      v438 = v77;
      *((_QWORD *)&v436 + 1) = 0x100000001;
      v78 = sub_22F13A25C(v76, v74, v75, 0, (*(_WORD *)&v426[24] & 0x7000) == 0x2000, 0, 0, 0, (uint64_t *)&v437, 1, 0, 0, 0, 0, 0, 0, 0, 0);
      v79 = v78;
      if (!v78)
      {
        v80 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(v80 + 312) = 0x32700000000;
        if (*(char *)(v80 + 311) < 0)
        {
          **(_BYTE **)(v80 + 288) = 0;
          *(_QWORD *)(v80 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v80 + 288) = 0;
          *(_BYTE *)(v80 + 311) = 0;
        }
        __dst[0] = (unint64_t)(v80 + 320);
        *(_QWORD *)&__dst[1] = v80;
        WORD4(__dst[1]) = 1;
        *(_BYTE *)(v80 + 320) = 0;
        *(_DWORD *)(v80 + 664) = 0;
        v165 = *(unsigned int *)(v80 + 776);
        if ((_DWORD)v165)
        {
          v166 = *(_QWORD *)(v80 + 768);
          v167 = 56 * v165;
          do
          {
            if (*(char *)(v166 + v167 - 9) < 0)
              operator delete(*(void **)(v166 + v167 - 32));
            v167 -= 56;
          }
          while (v167);
        }
        *(_DWORD *)(v80 + 776) = 0;
        sub_22E3B89A8((unsigned __int8 **)__dst, v74, v75);
        sub_22E3BB0B8((uint64_t)__dst);
LABEL_301:
        if ((unint64_t *)v436 != &v437)
          free((void *)v436);
        if (!v79)
          goto LABEL_701;
        v72 = **(_QWORD **)(a2 + 16);
        goto LABEL_305;
      }
      v148 = v78;
      do
      {
        v149 = *(_QWORD *)(v148 + 8);
        v148 = v149 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v149 & 2) != 0 && v148);
      v150 = *(_QWORD *)(v148 + 88);
      do
      {
        v151 = (_QWORD *)v150;
        v152 = *(_QWORD *)(v150 + 8);
        if ((v152 & 2) == 0)
          break;
        v150 = v152 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while (v150);
      v153 = *v151;
      v74 = (__int128 *)(v151 + 4);
      v75 = v153;
      if (v153 <= 0x7FFFFFFFFFFFFFF7)
      {
        v154 = v73 & 0xFFFF0000 | *(_WORD *)&v426[24] & 0x8FFF | 0x3000;
        v402 = v426[28];
        if (v75 >= 0x17)
        {
          v168 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v75 | 7) != 0x17)
            v168 = v75 | 7;
          v400 = v78;
          v169 = v73 & 0xFFFF0000 | *(_WORD *)&v426[24] & 0x8FFF | 0x3000;
          v170 = v168 + 1;
          v155 = operator new(v168 + 1);
          v171 = v170 | 0x8000000000000000;
          v154 = v169;
          v79 = v400;
          *(_QWORD *)&__dst[1] = v171;
          *(_QWORD *)&__dst[0] = v155;
          *((_QWORD *)&__dst[0] + 1) = v75;
        }
        else
        {
          BYTE7(__dst[1]) = v75;
          v155 = __dst;
          if (!v75)
            goto LABEL_298;
        }
        memmove(v155, v74, v75);
LABEL_298:
        *((_BYTE *)v155 + v75) = 0;
        BYTE8(__dst[1]) = 0;
        BYTE8(__dst[3]) = 0;
        LOBYTE(__dst[4]) = 0;
        BYTE8(__dst[4]) = 0;
        LODWORD(__dst[5]) = v154;
        BYTE4(__dst[5]) = v402;
        if (SHIBYTE(v423) < 0)
          operator delete((void *)v422);
        v422 = __dst[0];
        v423 = *(_QWORD *)&__dst[1];
        v424 = *(_OWORD *)((char *)&__dst[1] + 8);
        v425 = *(_OWORD *)((char *)&__dst[2] + 8);
        *(_OWORD *)v426 = *(_OWORD *)((char *)&__dst[3] + 8);
        *(_OWORD *)&v426[13] = *(_OWORD *)((char *)&__dst[4] + 5);
        goto LABEL_301;
      }
LABEL_419:
      abort();
    }
    v102 = (uint64_t *)v70;
    v398 = v69;
    v399 = v68;
    LODWORD(v434.__r_.__value_.__l.__data_) = 0;
    v434.__r_.__value_.__l.__size_ = (std::string::size_type)std::system_category();
    *(_QWORD *)&__dst[0] = (char *)&__dst[1] + 8;
    *(_OWORD *)((char *)__dst + 8) = xmmword_22F44E310;
    v103 = *v102;
    LOWORD(v439) = 261;
    *(_QWORD *)&v436 = v102 + 4;
    *((_QWORD *)&v436 + 1) = v103;
    llvm::sys::path::native();
    v104 = *(_QWORD *)(v67 + 8);
    LOWORD(v439) = 261;
    v436 = __dst[0];
    (*(void (**)(std::error_code *__return_ptr, uint64_t, __int128 *, std::string *))(*(_QWORD *)v104 + 32))(&v427, v104, &v436, &v434);
    v431 = 0;
    v432 = 0;
    if (sub_22E6D5ADC((uint64_t *)&v427.__val_, (uint64_t *)&v431) || LODWORD(v434.__r_.__value_.__l.__data_))
    {
LABEL_196:
      v116 = v432;
      if (v432)
      {
        p_shared_owners = (unint64_t *)&v432->__shared_owners_;
        do
          v118 = __ldaxr(p_shared_owners);
        while (__stlxr(v118 - 1, p_shared_owners));
        if (!v118)
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
        }
      }
      cat = (std::__shared_weak_count *)v427.__cat_;
      if (v427.__cat_)
      {
        v120 = (unint64_t *)&v427.__cat_[1];
        do
          v121 = __ldaxr(v120);
        while (__stlxr(v121 - 1, v120));
        if (!v121)
        {
          ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
          std::__shared_weak_count::__release_weak(cat);
        }
      }
      v122 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(v122 + 312) = 0x30900000000;
      if (*(char *)(v122 + 311) < 0)
      {
        **(_BYTE **)(v122 + 288) = 0;
        *(_QWORD *)(v122 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v122 + 288) = 0;
        *(_BYTE *)(v122 + 311) = 0;
      }
      v436 = (unint64_t)(v122 + 320);
      v437 = v122;
      LOWORD(v438) = 1;
      *(_BYTE *)(v122 + 320) = 0;
      *(_DWORD *)(v122 + 664) = 0;
      v126 = *(unsigned int *)(v122 + 776);
      if ((_DWORD)v126)
      {
        v127 = *(_QWORD *)(v122 + 768);
        v128 = 56 * v126;
        do
        {
          if (*(char *)(v127 + v128 - 9) < 0)
            operator delete(*(void **)(v127 + v128 - 32));
          v128 -= 56;
        }
        while (v128);
      }
      *(_DWORD *)(v122 + 776) = 0;
      sub_22E3B89A8((unsigned __int8 **)&v436, v399, v398);
      sub_22E3BB0B8((uint64_t)&v436);
      if (*(_OWORD **)&__dst[0] != (_OWORD *)((char *)&__dst[1] + 8))
        free(*(void **)&__dst[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_158;
    }
    while (1)
    {
      v105 = *(_BYTE *)(*(_QWORD *)&v427.__val_ + 31);
      if (v105 >= 0)
        v106 = (_BYTE *)(*(_QWORD *)&v427.__val_ + 8);
      else
        v106 = *(_BYTE **)(*(_QWORD *)&v427.__val_ + 8);
      if (v105 >= 0)
        v107 = v105 & 0x7F;
      else
        v107 = *(_QWORD *)(*(_QWORD *)&v427.__val_ + 16);
      v108 = *(_QWORD *)(a2 + 184);
      v109 = sub_22E6CB02C((_QWORD *)a2);
      v110 = *(uint64_t **)(a2 + 16);
      v111 = *v110;
      v112 = v110[2];
      v113 = v110[7];
      __src = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        __src = &__p;
      v115 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v115 = __p.__r_.__value_.__l.__size_;
      if (sub_22E780E7C(v106, v107, v67, v108, v109, v111, v112, v113, __src, v115))
        break;
      sub_22E6D5A44(&v427, &v434);
      if (sub_22E6D5ADC((uint64_t *)&v427.__val_, (uint64_t *)&v431) || LODWORD(v434.__r_.__value_.__l.__data_))
        goto LABEL_196;
    }
    v144 = *(_BYTE *)(*(_QWORD *)&v427.__val_ + 31);
    if (v144 >= 0)
      v145 = (const void *)(*(_QWORD *)&v427.__val_ + 8);
    else
      v145 = *(const void **)(*(_QWORD *)&v427.__val_ + 8);
    if (v144 >= 0)
      v146 = v144 & 0x7F;
    else
      v146 = *(_QWORD *)(*(_QWORD *)&v427.__val_ + 16);
    if (v146 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_419;
    if (v146 >= 0x17)
    {
      v157 = (v146 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v146 | 7) != 0x17)
        v157 = v146 | 7;
      v158 = v157 + 1;
      v147 = (__int128 *)operator new(v157 + 1);
      v437 = v158 | 0x8000000000000000;
      *(_QWORD *)&v436 = v147;
      *((_QWORD *)&v436 + 1) = v146;
    }
    else
    {
      HIBYTE(v437) = v146;
      v147 = &v436;
      if (!v146)
        goto LABEL_273;
    }
    memmove(v147, v145, v146);
LABEL_273:
    *((_BYTE *)v147 + v146) = 0;
    if (*(char *)(v49 + 127) < 0)
      operator delete(*v401);
    *(_OWORD *)v401 = v436;
    *(_QWORD *)(v49 + 120) = v437;
    v159 = v432;
    if (v432)
    {
      v160 = (unint64_t *)&v432->__shared_owners_;
      do
        v161 = __ldaxr(v160);
      while (__stlxr(v161 - 1, v160));
      if (!v161)
      {
        ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
        std::__shared_weak_count::__release_weak(v159);
      }
    }
    v162 = (std::__shared_weak_count *)v427.__cat_;
    if (v427.__cat_)
    {
      v163 = (unint64_t *)&v427.__cat_[1];
      do
        v164 = __ldaxr(v163);
      while (__stlxr(v164 - 1, v163));
      if (!v164)
      {
        ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
        std::__shared_weak_count::__release_weak(v162);
      }
    }
    if (*(_OWORD **)&__dst[0] != (_OWORD *)((char *)&__dst[1] + 8))
      free(*(void **)&__dst[0]);
    goto LABEL_124;
  }
  v45 = *(_DWORD **)(a2 + 32);
  *(_QWORD *)&v436 = v45;
  if (v45)
    ++*v45;
  if (v423 >= 0)
    v46 = &v422;
  else
    v46 = (__int128 *)v422;
  if (v423 >= 0)
    v47 = HIBYTE(v423) & 0x7F;
  else
    v47 = *((_QWORD *)&v422 + 1);
  if (v47 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_419;
  if (v47 >= 0x17)
  {
    v51 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v47 | 7) != 0x17)
      v51 = v47 | 7;
    v52 = v51 + 1;
    v48 = operator new(v51 + 1);
    *(_QWORD *)&__dst[1] = v52 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v48;
    *((_QWORD *)&__dst[0] + 1) = v47;
    goto LABEL_88;
  }
  BYTE7(__dst[1]) = v47;
  v48 = __dst;
  if (v47)
LABEL_88:
    memmove(v48, v46, v47);
  *((_BYTE *)v48 + v47) = 0;
  v53 = sub_22E6CB02C((_QWORD *)a2);
  v415 = (_DWORD *)v436;
  if ((_QWORD)v436)
    ++*(_DWORD *)v436;
  sub_22E6C3FF8((uint64_t)__dst, v53, 2, (uint64_t *)&v415, (__int128 *)(*(_QWORD *)(a2 + 16) + 2216), 0, 0, (uint64_t *)&__p, 0, 0);
  sub_22E6C62BC(&v415);
  if (SBYTE7(__dst[1]) < 0)
    operator delete(*(void **)&__dst[0]);
  if (!__p.__r_.__value_.__r.__words[0])
    goto LABEL_157;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 32) + 48) + 24))(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), **(_QWORD **)(a2 + 16), 0);
  v54 = *(_DWORD **)(__p.__r_.__value_.__r.__words[0] + 24);
  if (v54)
    ++*v54;
  *(_QWORD *)&__dst[0] = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = v54;
  sub_22F2A511C((_DWORD **)__dst);
  v55 = *(_DWORD **)(__p.__r_.__value_.__r.__words[0] + 32);
  if (v55)
    ++*v55;
  *(_QWORD *)&__dst[0] = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 176) = v55;
  sub_22F2A5160((_DWORD **)__dst);
  v56 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 72);
  *(_QWORD *)&v414 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 64);
  *((_QWORD *)&v414 + 1) = v56;
  if (v56)
  {
    v57 = (unint64_t *)(v56 + 8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  sub_22E6C3F18(a2 + 192, &v414);
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v414 + 1);
  if (*((_QWORD *)&v414 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v414 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  sub_22F1C9CA8(*(_QWORD *)(*(_QWORD *)(a2 + 192) + 680), (unsigned int *)(*(_QWORD *)(a2 + 192) + 544), *(_QWORD *)(*(_QWORD *)(a2 + 192) + 56));
  sub_22E6CBDAC(a2, *(_DWORD **)(__p.__r_.__value_.__r.__words[0] + 80));
  v62 = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  v413 = v62;
  sub_22F2ABB78(a1, (uint64_t)&v422, (uint64_t *)&v413);
  if (v413)
  {
    v63 = sub_22E6C3914(v413);
    MEMORY[0x2348A0E9C](v63, 0x10B2C408FD5D9F4);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2))
  {
    sub_22E729A14(&v412, a1, a2, (uint64_t)v46, v47);
    sub_22F2A6A24(a2, &v412);
    if (v412)
      (*(void (**)(uint64_t))(*(_QWORD *)v412 + 8))(v412);
    v156 = *(_QWORD *)(a2 + 224);
    v44 = v156 != 0;
    v64 = v156 == 0;
  }
  else
  {
    v44 = 0;
    v64 = 1;
  }
  v65 = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  if (v65)
  {
    v66 = sub_22E6C3914(v65);
    MEMORY[0x2348A0E9C](v66, 0x10B2C408FD5D9F4);
  }
  sub_22E6C62BC((_DWORD **)&v436);
  if (v64)
  {
LABEL_702:
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 32) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 48));
    goto LABEL_703;
  }
LABEL_710:
  if (SHIBYTE(v423) < 0)
    operator delete((void *)v422);
  return v44;
}

void sub_22E72C63C(_QWORD *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, llvm::MemoryBufferRef *a4@<X8>)
{
  __int128 v6;
  _OWORD v7[2];
  char v8;

  sub_22E490D40(a1, a2, a3, v7);
  if (v8)
  {
    v6 = v7[1];
    *(_OWORD *)a4 = v7[0];
    *((_OWORD *)a4 + 1) = v6;
  }
  else
  {
    sub_22F4236E0((uint64_t)a1, a4);
  }
}

void sub_22E72C698(uint64_t a1, char **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  size_t v10;
  std::string *p_p;
  size_t size;
  __n128 v13;
  char *v14;
  std::string __p;
  void *v16[2];
  char v17;
  unsigned __int8 *v18;
  void *v19;
  uint64_t v20;
  __int16 v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22F2A7234(*(_QWORD **)a1);
  (*(void (**)(unsigned __int8 **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(&v18, v4, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64));
  llvm::cas::CASID::toString((llvm::cas::CASID *)&v18);
  if (v19 != v22)
    free(v19);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  *(_QWORD *)(v5 + 312) = 0x31200000000;
  if (*(char *)(v5 + 311) < 0)
  {
    **(_BYTE **)(v5 + 288) = 0;
    *(_QWORD *)(v5 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v5 + 288) = 0;
    *(_BYTE *)(v5 + 311) = 0;
  }
  v18 = (unsigned __int8 *)(v5 + 320);
  v19 = 0;
  v20 = v5;
  v21 = 1;
  *(_BYTE *)(v5 + 320) = 0;
  *(_DWORD *)(v5 + 664) = 0;
  v6 = *(unsigned int *)(v5 + 776);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(v5 + 768);
    v8 = 56 * v6;
    do
    {
      if (*(char *)(v7 + v8 - 9) < 0)
        operator delete(*(void **)(v7 + v8 - 32));
      v8 -= 56;
    }
    while (v8);
  }
  *(_DWORD *)(v5 + 776) = 0;
  if (v17 >= 0)
    v9 = v16;
  else
    v9 = (void **)v16[0];
  if (v17 >= 0)
    v10 = v17 & 0x7F;
  else
    v10 = (size_t)v16[1];
  sub_22E3B89A8(&v18, v9, v10);
  v14 = *a2;
  *a2 = 0;
  sub_22F2432A8(&v14, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v13.n128_f64[0] = sub_22E3B89A8(&v18, p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v14)
    (*(void (**)(char *, __n128))(*(_QWORD *)v14 + 8))(v14, v13);
  sub_22E3BB0B8((uint64_t)&v18);
  if (v17 < 0)
    operator delete(v16[0]);
}

uint64_t sub_22E72C860(uint64_t a1, void **a2, int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  unsigned int v13;
  void *v14;
  size_t v15;
  __int128 *p_dst;
  int AsUnsignedInteger;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  BOOL v21;
  size_t v22;
  size_t v23;
  size_t v24;
  void **v25;
  unsigned int v26;
  uint64_t v27;
  __int128 __dst;
  void *v29;
  int v30[4];
  __int16 v31;
  __int16 v32;
  _BYTE v33[40];
  void *v34;
  __int128 v35;
  _BYTE v36[24];
  void *__src;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  _BYTE v41[48];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 176);
  v7 = *(_DWORD *)(v6 + 344);
  sub_22E490D40((_QWORD *)v6, v7, 0, v33);
  if (v33[32])
  {
    v10 = operator new();
    v11 = (_BYTE *)sub_22F4108A4(v10, v7, (uint64_t)v33, (_QWORD *)v6, **(_DWORD ***)(a1 + 16), 1);
    sub_22F14651C(v11, (uint64_t)v30);
    if (*(_QWORD *)(v10 + 184) != *(_QWORD *)(v10 + 152) && v31 == 66)
    {
      sub_22F14651C((_BYTE *)v10, (uint64_t)v30);
      if (*(_QWORD *)(v10 + 184) != *(_QWORD *)(v10 + 152))
      {
        v8 = 0;
        if ((v32 & 1) != 0 || v31 != 7)
          goto LABEL_51;
        v12 = v30[0];
        if (!a3)
        {
          v13 = 0;
          goto LABEL_11;
        }
        v34 = v36;
        v35 = xmmword_22F44E350;
        sub_22F410A14(v30[0], (uint64_t *)&v34, (_QWORD *)v6, **(_DWORD ***)(a1 + 16), 0);
        *(_QWORD *)&__dst = 0;
        AsUnsignedInteger = llvm::getAsUnsignedInteger();
        if (AsUnsignedInteger)
          v13 = 0;
        else
          v13 = __dst;
        if ((AsUnsignedInteger & 1) == 0 && !DWORD1(__dst))
        {
          if (v34 != v36)
            free(v34);
LABEL_11:
          sub_22F14651C((_BYTE *)v10, (uint64_t)v30);
          v8 = 0;
          if ((v32 & 1) == 0 && v31 == 13)
          {
            sub_22F14E1D0((uint64_t)&v34, (uint64_t)v30, 1, *(_QWORD **)(a1 + 192));
            if (v41[40] || (sub_22F14651C((_BYTE *)v10, (uint64_t)v30), v31 != 1) && (v32 & 1) == 0)
            {
              v8 = 0;
LABEL_44:
              if (v40 != v41)
                free(v40);
              if (__src != &v38)
                free(__src);
              goto LABEL_51;
            }
            v14 = __src;
            if (!__src)
            {
              __dst = 0uLL;
              v29 = 0;
LABEL_34:
              if (*((char *)a2 + 23) < 0)
                operator delete(*a2);
              *(_OWORD *)a2 = __dst;
              a2[2] = v29;
              if (a3)
              {
                v19 = *(_QWORD **)(a1 + 176);
                v20 = *((_BYTE *)a2 + 23);
                v21 = v20 < 0;
                v22 = (size_t)a2[1];
                if (v20 < 0)
                  a2 = (void **)*a2;
                v23 = v20 & 0x7F;
                if (v21)
                  v24 = v22;
                else
                  v24 = v23;
                v25 = (void **)sub_22F1E0AA0(v6);
                v26 = sub_22F1E07D8(v25, a2, v24);
                sub_22F1E0B64(v19, v12, v13, v26, 0, 0, 3u);
              }
              v8 = v30[0];
              goto LABEL_44;
            }
            v15 = (v39 - (_DWORD)__src);
            if (v15 >= 0x17)
            {
              v18 = (((_DWORD)v39 - (_DWORD)__src) & 0xFFFFFFF8) + 8;
              if ((v15 | 7) != 0x17)
                v18 = v15 | 7;
              v27 = v18;
              p_dst = (__int128 *)operator new(v18 + 1);
              *((_QWORD *)&__dst + 1) = v15;
              v29 = (void *)(v27 - 0x7FFFFFFFFFFFFFFFLL);
              *(_QWORD *)&__dst = p_dst;
            }
            else
            {
              HIBYTE(v29) = v39 - (_BYTE)__src;
              p_dst = &__dst;
              if ((_DWORD)v39 == (_DWORD)__src)
                goto LABEL_33;
            }
            memmove(p_dst, v14, v15);
LABEL_33:
            *((_BYTE *)p_dst + v15) = 0;
            goto LABEL_34;
          }
LABEL_51:
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
          return v8;
        }
        if (v34 != v36)
          free(v34);
      }
    }
    v8 = 0;
    goto LABEL_51;
  }
  return 0;
}

void sub_22E72CBE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  llvm *v7;
  llvm *v8;
  llvm *v9;
  const void *v10;
  const void *v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  _BYTE *v15;
  char v16;
  const void *v17;
  size_t v18;
  llvm *v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  llvm *v26;
  const void *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  const void *v31;
  const void *v32;
  llvm *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  void *__p[2];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  llvm *v44;

  v2 = *(_QWORD *)(a1 + 104);
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 32) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(v2 + 32)
                                                                                                 + 48));
  v3 = *(_QWORD *)(v2 + 192);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 1088);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v6 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 2288);
  if ((v6 & 1) != 0)
  {
    v9 = *(llvm **)(v2 + 240);
    *(_QWORD *)(v2 + 240) = 0;
    llvm::BuryPointer(v9, v5);
    llvm::BuryPointer(*(llvm **)(v2 + 208), v10);
    *(_QWORD *)(v2 + 208) = 0;
    v8 = *(llvm **)(v2 + 224);
    *(_QWORD *)(v2 + 224) = 0;
    v7 = (llvm *)llvm::BuryPointer(v8, v11);
    if (!v8)
      goto LABEL_9;
    goto LABEL_8;
  }
  sub_22F2A69E8(v2, 0);
  sub_22E6CBDAC(v2, 0);
  v44 = 0;
  v7 = (llvm *)sub_22F2A6A24(v2, (uint64_t *)&v44);
  v8 = v44;
  v44 = 0;
  if (v8)
LABEL_8:
    v7 = (llvm *)(*(uint64_t (**)(llvm *))(*(_QWORD *)v8 + 8))(v8);
LABEL_9:
  if ((*(_BYTE *)(*(_QWORD *)(v2 + 16) + 2288) & 8) != 0)
  {
    v12 = (llvm::raw_ostream *)llvm::errs(v7);
    v13 = v12;
    v14 = *((_QWORD *)v12 + 4);
    if ((unint64_t)(*((_QWORD *)v12 + 3) - v14) > 0x10)
    {
      *(_BYTE *)(v14 + 16) = 39;
      *(_OWORD *)v14 = *(_OWORD *)"\nSTATISTICS FOR '";
      v15 = (_BYTE *)(*((_QWORD *)v12 + 4) + 17);
      *((_QWORD *)v13 + 4) = v15;
    }
    else
    {
      v13 = (llvm::raw_ostream *)llvm::raw_ostream::write(v12, "\nSTATISTICS FOR '");
      v15 = (_BYTE *)*((_QWORD *)v13 + 4);
    }
    v16 = *(_BYTE *)(a1 + 31);
    if (v16 >= 0)
      v17 = (const void *)(a1 + 8);
    else
      v17 = *(const void **)(a1 + 8);
    if (v16 >= 0)
      v18 = v16 & 0x7F;
    else
      v18 = *(_QWORD *)(a1 + 16);
    if (v18 <= *((_QWORD *)v13 + 3) - (_QWORD)v15)
    {
      if (v18)
      {
        memcpy(v15, v17, v18);
        v15 = (_BYTE *)(*((_QWORD *)v13 + 4) + v18);
        *((_QWORD *)v13 + 4) = v15;
      }
    }
    else
    {
      v13 = (llvm::raw_ostream *)llvm::raw_ostream::write(v13, (const char *)v17);
      v15 = (_BYTE *)*((_QWORD *)v13 + 4);
    }
    if (*((_QWORD *)v13 + 3) - (_QWORD)v15 > 2uLL)
    {
      v15[2] = 10;
      *(_WORD *)v15 = 14887;
      *((_QWORD *)v13 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v13, "':\n");
    }
    sub_22F18D1A8(*(_QWORD *)(v2 + 192));
    sub_22F1D3804(*(_QWORD *)(v2 + 192) + 544);
    sub_22F40EBF8(*(llvm **)(*(_QWORD *)(v2 + 192) + 104));
    v19 = sub_22F1E40F4(*(_QWORD *)(v2 + 176));
    v20 = (llvm::raw_ostream *)llvm::errs(v19);
    v21 = (_BYTE *)*((_QWORD *)v20 + 4);
    if (*((_BYTE **)v20 + 3) == v21)
    {
      llvm::raw_ostream::write(v20, "\n");
    }
    else
    {
      *v21 = 10;
      ++*((_QWORD *)v20 + 4);
    }
  }
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  sub_22E6CE1CC(v2, v22);
  if (*(_QWORD *)(a1 + 96))
  {
    if ((v6 & 1) != 0)
    {
      v26 = (llvm *)operator new();
      *(_QWORD *)v26 = *(_QWORD *)(v2 + 192);
      v28 = *(_QWORD *)(v2 + 200);
      *((_QWORD *)v26 + 1) = v28;
      if (v28)
      {
        v29 = (unint64_t *)(v28 + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      llvm::BuryPointer(v26, v27);
      llvm::BuryPointer(*(llvm **)(v2 + 176), v31);
      *(_QWORD *)(v2 + 176) = 0;
      llvm::BuryPointer(*(llvm **)(v2 + 160), v32);
      *(_QWORD *)(v2 + 160) = 0;
      v33 = *(llvm **)(a1 + 96);
      *(_QWORD *)(a1 + 96) = 0;
      llvm::BuryPointer(v33, v34);
    }
    else
    {
      v43 = 0uLL;
      sub_22E6C3F18(v2 + 192, &v43);
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
      if (*((_QWORD *)&v43 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      __p[0] = *(void **)(v2 + 176);
      *(_QWORD *)(v2 + 176) = 0;
      sub_22F2A5160((_DWORD **)__p);
      __p[0] = *(void **)(v2 + 160);
      *(_QWORD *)(v2 + 160) = 0;
      sub_22F2A511C((_DWORD **)__p);
    }
  }
  *(_QWORD *)(a1 + 104) = 0;
  v42 = 0;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  *(_OWORD *)__p = 0u;
  v36 = 0;
  sub_22F2ABB78(a1, (uint64_t)__p, &v36);
  if (v36)
  {
    v35 = sub_22E6C3914(v36);
    MEMORY[0x2348A0E9C](v35, 0x10B2C408FD5D9F4);
  }
  if (SBYTE7(v38) < 0)
    operator delete(__p[0]);
  *(_DWORD *)(**(_QWORD **)(v2 + 16) + 240) &= 0xFFFFFF1F;
}

__n128 sub_22E72CFC4(uint64_t a1, __n128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  __n128 result;

  do
  {
    v3 = a1;
    a1 = *(_QWORD *)(a1 + 32);
  }
  while (a1);
  v4 = v3 + 264;
  if (*(_BYTE *)(v3 + 288))
  {
    if (*(char *)(v3 + 287) < 0)
      operator delete(*(void **)v4);
    result = *a2;
    *(_QWORD *)(v4 + 16) = a2[1].n128_u64[0];
    *(__n128 *)v4 = result;
    a2[1].n128_u8[7] = 0;
    a2->n128_u8[0] = 0;
  }
  else
  {
    result = *a2;
    *(_QWORD *)(v3 + 280) = a2[1].n128_u64[0];
    *(__n128 *)v4 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(_BYTE *)(v3 + 288) = 1;
  }
  return result;
}

char *sub_22E72D044@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  char *v5;

  v3 = *((_QWORD *)result + 9);
  if ((v3 & 4) != 0 || (v4 = v3 & 0xFFFFFFFFFFFFFFF8, (v3 & 0xFFFFFFFFFFFFFFF8) == 0))
  {
    *(_QWORD *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  else
  {
    v5 = result;
    if (result[127] < 0)
    {
      sub_22E3BB2B4((_BYTE *)a2, *((void **)result + 13), *((_QWORD *)result + 14));
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)(result + 104);
      *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 15);
    }
    result = (char *)(a2 + 24);
    if (v5[151] < 0)
    {
      result = (char *)sub_22E3BB2B4(result, *((void **)v5 + 16), *((_QWORD *)v5 + 17));
    }
    else
    {
      *(_OWORD *)result = *((_OWORD *)v5 + 8);
      *(_QWORD *)(a2 + 40) = *((_QWORD *)v5 + 18);
    }
    *(_QWORD *)(a2 + 48) = v4;
  }
  return result;
}

const void *sub_22E72D0EC(const void *__src, size_t __n, _QWORD *a3, uint64_t *a4, int a5)
{
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;

  v9 = __src;
  v10 = *a4;
  v11 = a3[1];
  if (a5 && (v10 & 0x100) != 0)
  {
    if (a3[2] < (unint64_t)(v11 + 13))
    {
      __src = (const void *)llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v11 = a3[1];
    }
    qmemcpy((void *)(*a3 + v11), "extern \"C\" {\n", 13);
    v11 = a3[1] + 13;
    a3[1] = v11;
    v10 = *a4;
  }
  v12 = a3[2];
  if ((v10 & 0x4000) != 0)
  {
    if (v12 < v11 + 9)
    {
      __src = (const void *)llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v11 = a3[1];
    }
    v15 = *a3 + v11;
    *(_QWORD *)v15 = *(_QWORD *)"#import \"";
    *(_BYTE *)(v15 + 8) = 34;
    v14 = 9;
  }
  else
  {
    if (v12 < v11 + 10)
    {
      __src = (const void *)llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v11 = a3[1];
    }
    v13 = *a3 + v11;
    *(_QWORD *)v13 = *(_QWORD *)"#include \"";
    *(_WORD *)(v13 + 8) = 8736;
    v14 = 10;
  }
  v16 = a3[2];
  v17 = a3[1] + v14;
  a3[1] = v17;
  if (v16 >= v17 + __n)
  {
    if (!__n)
      goto LABEL_16;
    goto LABEL_15;
  }
  __src = (const void *)llvm::SmallVectorBase<unsigned long long>::grow_pod();
  v17 = a3[1];
  if (__n)
  {
LABEL_15:
    __src = memcpy((void *)(*a3 + v17), v9, __n);
    v17 = a3[1];
  }
LABEL_16:
  v18 = v17 + __n;
  a3[1] = v18;
  if (a3[2] < v18 + 2)
  {
    __src = (const void *)llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v18 = a3[1];
  }
  *(_WORD *)(*a3 + v18) = 2594;
  v19 = a3[1];
  v20 = v19 + 2;
  a3[1] = v19 + 2;
  if (a5 && (*((_BYTE *)a4 + 1) & 1) != 0)
  {
    if (a3[2] < (unint64_t)(v19 + 4))
    {
      __src = (const void *)llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v20 = a3[1];
    }
    *(_WORD *)(*a3 + v20) = 2685;
    a3[1] += 2;
  }
  return __src;
}

uint64_t sub_22E72D310(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  BOOL v22;
  const void *v23;
  size_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  const void *v39;
  uint64_t v40;
  size_t v41;
  int v42;
  __int128 v43;
  uint64_t v44;
  void **v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  size_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  size_t v54;
  size_t v55;
  __int128 *p_dst;
  uint64_t v57;
  int v58;
  unsigned __int8 *v59;
  void **v60;
  unsigned __int8 *v61;
  __int128 v62;
  int64_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  void *v71;
  char v72;
  int v73;
  void *v74;
  size_t v75;
  size_t v76;
  std::__shared_weak_count *v77;
  unint64_t *p_shared_owners;
  unint64_t v79;
  char v80;
  unint64_t v81;
  uint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  signed __int8 v85;
  BOOL v86;
  unsigned __int8 *v87;
  size_t v88;
  size_t v89;
  _QWORD *v90;
  _QWORD *v91;
  const std::error_category *v92;
  void **v93;
  size_t v94;
  __int128 v95;
  uint64_t v96;
  __int128 __dst;
  unint64_t v98;
  __int16 v99;
  void *__p[2];
  unint64_t v101;
  _QWORD *v102;
  __int16 v103;
  __int128 v104;
  char v105[8];
  _QWORD *v106;
  std::__shared_weak_count *v107;
  void *v108;
  char v109;
  void *v110[2];
  char v111;
  uint64_t v112;
  void *v113;
  char v114;
  void *v115[2];
  char v116;
  unsigned __int8 *v117;
  std::error_code v118;
  char *__s;
  __int128 v120;
  _BYTE v121[128];
  void *v122;
  uint64_t v123;
  _WORD v124[128];
  _QWORD *v125;
  char v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  __int16 v130;
  __int16 v131;
  void *v132;
  __int128 v133;
  _QWORD v134[18];

  v134[16] = *MEMORY[0x24BDAC8D0];
  if ((*(_WORD *)(a5 + 1344) & 4) == 0)
  {
LABEL_2:
    v118.__val_ = 0;
    std::system_category();
    return *(_QWORD *)&v118.__val_;
  }
  sub_22F41274C(a4, a5, 0, 0);
  v13 = *(_DWORD *)(a5 + 1176);
  if (v13)
  {
    v14 = *(_QWORD *)(a5 + 1168);
    *(_DWORD *)(a3 + 312) = *(_DWORD *)(v14 + 4);
    *(_DWORD *)(a3 + 316) = 40;
    if (*(char *)(a3 + 311) < 0)
    {
      **(_BYTE **)(a3 + 288) = 0;
      *(_QWORD *)(a3 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a3 + 288) = 0;
      *(_BYTE *)(a3 + 311) = 0;
    }
    v64 = (unsigned __int8 *)(a3 + 320);
    v127 = (char *)(a3 + 320);
    v128 = 0;
    v129 = a3;
    v130 = 1;
    *(_BYTE *)(a3 + 320) = 0;
    *(_DWORD *)(a3 + 664) = 0;
    v65 = *(unsigned int *)(a3 + 776);
    if ((_DWORD)v65)
    {
      v66 = *(_QWORD *)(a3 + 768);
      v67 = 56 * v65;
      do
      {
        if (*(char *)(v66 + v67 - 9) < 0)
          operator delete(*(void **)(v66 + v67 - 32));
        v67 -= 56;
      }
      while (v67);
      LODWORD(v65) = *v64;
    }
    *(_DWORD *)(a3 + 776) = 0;
    v68 = *(unsigned __int8 *)(v14 + 32);
    v64[v65 + 1] = 2;
    *(_BYTE *)(a3 + 320) = v65 + 1;
    *(_QWORD *)&v64[8 * v65 + 16] = v68;
    v71 = *(void **)(v14 + 8);
    v70 = v14 + 8;
    v69 = v71;
    v72 = *(_BYTE *)(v70 + 23);
    v73 = v72;
    if (v72 >= 0)
      v74 = (void *)v70;
    else
      v74 = v69;
    v75 = v72 & 0x7F;
    if (v73 >= 0)
      v76 = v75;
    else
      v76 = *(_QWORD *)(v70 + 8);
    sub_22E3B89A8((unsigned __int8 **)&v127, v74, v76);
    sub_22E3BB0B8((uint64_t)&v127);
    goto LABEL_2;
  }
  v15 = 0;
  v122 = (void *)0x200000000;
  do
  {
    v16 = v13;
    v17 = a5 + ((unint64_t)*((unsigned int *)&v122 + v15) << 7);
    v18 = *(unsigned int *)(v17 + 448);
    if ((_DWORD)v18)
    {
      v19 = 56 * v18;
      v20 = *(_QWORD *)(v17 + 440) + 24;
      do
      {
        v127 = *(char **)(v20 + 24);
        sub_22F41FE64(a5 + 328, (uint64_t *)&v127);
        v21 = *(_BYTE *)(v20 + 23);
        v22 = v21 < 0;
        if (v21 >= 0)
          v23 = (const void *)v20;
        else
          v23 = *(const void **)v20;
        v24 = v21 & 0x7F;
        if (v22)
          v25 = *(_QWORD *)(v20 + 8);
        else
          v25 = v24;
        sub_22E72D0EC(v23, v25, a6, a1, (*(unsigned __int16 *)(a5 + 1344) >> 7) & 1);
        v20 += 56;
        v19 -= 56;
      }
      while (v19);
    }
    LOBYTE(v13) = 1;
    v15 = 1;
  }
  while ((v16 & 1) == 0);
  sub_22E72D044((char *)a5, (uint64_t)&v113);
  if (v117)
  {
    v127 = (char *)v117;
    sub_22F41FE64(a5 + 328, (uint64_t *)&v127);
    v26 = a4;
    if (*(_QWORD *)(a5 + 32))
    {
      if (v116 >= 0)
        v93 = v115;
      else
        v93 = (void **)v115[0];
      if (v116 >= 0)
        v94 = v116 & 0x7F;
      else
        v94 = (size_t)v115[1];
      sub_22E72D0EC(v93, v94, a6, a1, (*(unsigned __int16 *)(a5 + 1344) >> 7) & 1);
    }
    goto LABEL_129;
  }
  sub_22F1D8DAC(a5, (uint64_t)&v108);
  v26 = a4;
  if (!v112)
  {
LABEL_125:
    if (v111 < 0)
      operator delete(v110[0]);
    if (v109 < 0)
      operator delete(v108);
LABEL_129:
    v80 = 1;
    goto LABEL_130;
  }
  v118.__val_ = 0;
  v118.__cat_ = std::system_category();
  v132 = v134;
  v133 = xmmword_22F44E310;
  v28 = *(unsigned __int8 **)v112;
  v27 = *(_QWORD *)(v112 + 8);
  v131 = 261;
  v127 = (char *)v28;
  v128 = v27;
  llvm::sys::path::native();
  v29 = *(_QWORD *)(a2 + 8);
  v127 = (char *)&v129;
  v128 = 0x800000000;
  v124[8] = 261;
  v122 = v132;
  v123 = v133;
  MEMORY[0x23489E97C](v105, v29, &v122, &v118);
  if (v106 && !v118.__val_)
  {
    while (1)
    {
      v122 = (void *)llvm::sys::path::extension();
      v123 = v30;
      v124[0] = 0;
      v32 = sub_22E72DCE4((uint64_t)&v122, ".h", 2, ".H", 2, ".hh", 3, v31, ".hpp", 4, 1);
      if (*(_BYTE *)(v32 + 17) && *(_BYTE *)(v32 + 16) != 0)
      {
        v34 = *(_QWORD *)(v106[1] - 16);
        v37 = *(_QWORD *)(v34 + 8);
        v35 = v34 + 8;
        v36 = v37;
        v38 = *(_BYTE *)(v35 + 23);
        v39 = (const void *)(v38 >= 0 ? v35 : v36);
        v40 = *(_QWORD *)(v35 + 8);
        v41 = v38 >= 0 ? v38 & 0x7F : v40;
        sub_22F1D07D8(a2, v39, v41, 0, 1, (uint64_t)&v125);
        if ((v126 & 1) == 0 && (sub_22F158954(v26, v125, a5) & 1) == 0)
          break;
      }
LABEL_75:
      llvm::vfs::recursive_directory_iterator::increment((llvm::vfs::recursive_directory_iterator *)v105, &v118);
      if (!v106 || v118.__val_)
        goto LABEL_98;
    }
    v122 = v124;
    v123 = 0x1000000000;
    llvm::sys::path::rbegin();
    if (((v106[1] - *v106) & 0xFFFFFFFF0) != 0)
    {
      v42 = 0;
      do
      {
        v43 = v104;
        v44 = v123;
        if (v123 >= (unint64_t)HIDWORD(v123))
        {
          v95 = v104;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v43 = v95;
          v44 = v123;
        }
        *((_OWORD *)v122 + v44) = v43;
        LODWORD(v123) = v123 + 1;
        ++v42;
        llvm::sys::path::reverse_iterator::operator++();
      }
      while (v42 != ((v106[1] - *v106) >> 4));
    }
    if (v111 >= 0)
      v45 = v110;
    else
      v45 = (void **)v110[0];
    if (v111 >= 0)
      v46 = v111 & 0x7F;
    else
      v46 = (size_t)v110[1];
    __s = v121;
    v120 = xmmword_22F44E310;
    if (v46 >= 0x81)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v49 = __s;
      v47 = v120;
    }
    else
    {
      v47 = 0;
      v48 = 0;
      v49 = v121;
      if (!v46)
        goto LABEL_48;
    }
    memcpy(&v49[v47], v45, v46);
    v48 = v120;
LABEL_48:
    v50 = v48 + v46;
    *(_QWORD *)&v120 = v48 + v46;
    if ((_DWORD)v123)
    {
      v51 = (char *)v122;
      v52 = 16 * v123;
      do
      {
        v103 = 261;
        __p[0] = *(void **)&v51[v52 - 16];
        __p[1] = *(void **)&v51[v52 - 8];
        v99 = 257;
        llvm::sys::path::append();
        v52 -= 16;
      }
      while (v52);
      v50 = v120;
    }
    if (v50 + 1 > *((_QWORD *)&v120 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v50 = v120;
    }
    __s[v50] = 0;
    v53 = __s;
    v54 = strlen(__s);
    if (v54 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v55 = v54;
    if (v54 >= 0x17)
    {
      v57 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v54 | 7) != 0x17)
        v57 = v54 | 7;
      v96 = v57 + 1;
      p_dst = (__int128 *)operator new(v57 + 1);
      *((_QWORD *)&__dst + 1) = v55;
      v98 = v96 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v98) = v54;
      p_dst = &__dst;
      if (!v54)
        goto LABEL_62;
    }
    memmove(p_dst, v53, v55);
LABEL_62:
    *((_BYTE *)p_dst + v55) = 0;
    v58 = SHIBYTE(v98);
    if (SHIBYTE(v98) < 0)
    {
      sub_22E3BB2B4(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
    }
    else
    {
      *(_OWORD *)__p = __dst;
      v101 = v98;
    }
    v26 = a4;
    v102 = v125;
    v59 = (unsigned __int8 *)v127;
    if (v128 >= HIDWORD(v128))
    {
      if (v127 <= (char *)__p && &v127[32 * v128] > (char *)__p)
      {
        v63 = (char *)__p - v127;
        sub_22F275E70((uint64_t)&v127);
        v59 = (unsigned __int8 *)v127;
        v60 = (void **)&v127[v63];
      }
      else
      {
        sub_22F275E70((uint64_t)&v127);
        v60 = __p;
        v59 = (unsigned __int8 *)v127;
      }
      v26 = a4;
    }
    else
    {
      v60 = __p;
    }
    v61 = &v59[32 * v128];
    v62 = *(_OWORD *)v60;
    *((_QWORD *)v61 + 2) = v60[2];
    *(_OWORD *)v61 = v62;
    v60[1] = 0;
    v60[2] = 0;
    *v60 = 0;
    *((_QWORD *)v61 + 3) = v60[3];
    LODWORD(v128) = v128 + 1;
    if (SHIBYTE(v101) < 0)
      operator delete(__p[0]);
    if (v58 < 0)
      operator delete((void *)__dst);
    if (__s != v121)
      free(__s);
    if (v122 != v124)
      free(v122);
    goto LABEL_75;
  }
LABEL_98:
  v77 = v107;
  if (v107)
  {
    p_shared_owners = (unint64_t *)&v107->__shared_owners_;
    do
      v79 = __ldaxr(p_shared_owners);
    while (__stlxr(v79 - 1, p_shared_owners));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  if (!v118.__val_)
  {
    v81 = 126 - 2 * __clz(v128);
    if ((_DWORD)v128)
      v82 = v81;
    else
      v82 = 0;
    sub_22E72DD60((uint64_t)v127, (uint64_t)&v127[32 * v128], v82, 1);
    if ((_DWORD)v128)
    {
      v83 = (unsigned __int8 *)v127;
      v84 = 32 * v128;
      do
      {
        v122 = (void *)*((_QWORD *)v83 + 3);
        sub_22F41FE64(a5 + 328, (uint64_t *)&v122);
        v85 = v83[23];
        v86 = v85 < 0;
        if (v85 >= 0)
          v87 = v83;
        else
          v87 = *(unsigned __int8 **)v83;
        v88 = v85 & 0x7F;
        if (v86)
          v89 = *((_QWORD *)v83 + 1);
        else
          v89 = v88;
        sub_22E72D0EC(v87, v89, a6, a1, (*(unsigned __int16 *)(a5 + 1344) >> 7) & 1);
        v83 += 32;
        v84 -= 32;
      }
      while (v84);
    }
    sub_22E5762C8(&v127);
    if (v132 != v134)
      free(v132);
    goto LABEL_125;
  }
  sub_22E5762C8(&v127);
  if (v132 != v134)
    free(v132);
  if (v111 < 0)
    operator delete(v110[0]);
  if (v109 < 0)
    operator delete(v108);
  v80 = 0;
LABEL_130:
  if (v116 < 0)
    operator delete(v115[0]);
  if (v114 < 0)
    operator delete(v113);
  if ((v80 & 1) != 0)
  {
    v90 = *(_QWORD **)(a5 + 200);
    v91 = *(_QWORD **)(a5 + 208);
    while (v90 != v91)
    {
      *(_QWORD *)&v118.__val_ = sub_22E72D310(a1, a2, a3, v26, *v90, a6);
      v118.__cat_ = v92;
      if (v118.__val_)
        return *(_QWORD *)&v118.__val_;
      ++v90;
    }
    goto LABEL_2;
  }
  return *(_QWORD *)&v118.__val_;
}

uint64_t sub_22E72DCE4(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5, const void *a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, char a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v15 = sub_22F2ABF14(a1, a2, a3, a11);
  v16 = sub_22F2ABF14(v15, a4, a5, a11);
  v17 = sub_22F2ABF14(v16, a6, a7, a11);
  return sub_22F2ABF14(v17, a9, a10, a11);
}

__n128 sub_22E72DD60(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  const void **v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  char v18;
  BOOL v19;
  const void *v20;
  size_t v21;
  size_t v22;
  const void *v23;
  size_t v24;
  size_t v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  __int128 v29;
  const void *v30;
  void *v31;
  void **v32;
  _QWORD *v33;
  size_t v34;
  size_t v35;
  int v36;
  BOOL v37;
  unint64_t v38;
  char *v39;
  size_t v40;
  char *v41;
  size_t v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  size_t v46;
  const void *v47;
  size_t v48;
  int v49;
  BOOL v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  const void *v55;
  void **v56;
  void *v57;
  char *v58;
  size_t v59;
  char *v60;
  size_t v61;
  int v62;
  BOOL v63;
  char *v64;
  size_t v65;
  char *v66;
  size_t v67;
  int v68;
  _BOOL4 v69;
  void **v70;
  __int128 v71;
  __int128 v72;
  BOOL v73;
  __n128 result;
  __int128 v75;
  const void *v76;
  char v77;
  BOOL v78;
  const void *v79;
  size_t v80;
  size_t v81;
  void *v82;
  void **v83;
  size_t v84;
  int v85;
  BOOL v86;
  const void **v87;
  char v88;
  BOOL v89;
  const void *v90;
  size_t v91;
  size_t v92;
  size_t v93;
  int v94;
  BOOL v95;
  void **v96;
  char v97;
  BOOL v98;
  const void *v99;
  size_t v100;
  size_t v101;
  size_t v102;
  int v103;
  BOOL v104;
  unint64_t v105;
  const void **v106;
  char v107;
  BOOL v108;
  const void *v109;
  size_t v110;
  size_t v111;
  size_t v112;
  int v113;
  BOOL v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  const void *v118;
  void *v119;
  void **v120;
  const void **v121;
  char v122;
  BOOL v123;
  const void *v124;
  size_t v125;
  size_t v126;
  size_t v127;
  int v128;
  _BOOL4 v129;
  char v130;
  BOOL v131;
  const void *v132;
  size_t v133;
  size_t v134;
  size_t v135;
  int v136;
  BOOL v137;
  void **v138;
  __int128 v139;
  char v140;
  BOOL v141;
  const void *v142;
  size_t v143;
  size_t v144;
  size_t v145;
  const void *v146;
  uint64_t v147;
  uint64_t v148;
  const void **v149;
  const void **v150;
  char v151;
  BOOL v152;
  const void *v153;
  size_t v154;
  size_t v155;
  size_t v156;
  const void *v157;
  size_t v158;
  int v159;
  _BOOL4 v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  void **v164;
  uint64_t v165;
  char v166;
  const void *v167;
  size_t v168;
  void *v169;
  void **v170;
  size_t v171;
  int v172;
  BOOL v173;
  uint64_t v174;
  int64_t v175;
  int64_t v176;
  int64_t v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  int v181;
  const void *v182;
  size_t v183;
  size_t v184;
  size_t v185;
  const void *v186;
  size_t v187;
  int v188;
  _BOOL4 v189;
  uint64_t v190;
  char v191;
  BOOL v192;
  const void *v193;
  size_t v194;
  size_t v195;
  size_t v196;
  const void *v197;
  size_t v198;
  int v199;
  BOOL v200;
  __int128 v201;
  uint64_t v202;
  __int128 v203;
  uint64_t v204;
  char v205;
  int v206;
  const void *v207;
  size_t v208;
  size_t v209;
  size_t v210;
  const void *v211;
  size_t v212;
  int v213;
  _BOOL4 v214;
  void **v215;
  void *v216;
  size_t v217;
  const void *v218;
  size_t v219;
  int v220;
  _BOOL4 v221;
  __int128 v222;
  void **v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char v229;
  int v230;
  const void *v231;
  size_t v232;
  size_t v233;
  size_t v234;
  const void *v235;
  size_t v236;
  int v237;
  _BOOL4 v238;
  int v239;
  void *v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  char v244;
  BOOL v245;
  const void *v246;
  size_t v247;
  size_t v248;
  size_t v249;
  const void *v250;
  uint64_t v251;
  size_t v252;
  int v253;
  _BOOL4 v254;
  __int128 v255;
  const void *v256;
  uint64_t v257;
  __int128 v258;
  void **v259;
  void *v260;
  size_t v261;
  const void *v262;
  size_t v263;
  int v264;
  BOOL v265;
  uint64_t v267;
  _QWORD *v268;
  const void **v269;
  char v270;
  BOOL v271;
  const void *v272;
  size_t v273;
  size_t v274;
  size_t v275;
  const void *v276;
  size_t v277;
  int v278;
  _BOOL4 v279;
  __int128 v280;
  _QWORD *v281;
  void **v282;
  _QWORD *v283;
  char v284;
  int v285;
  _QWORD *v286;
  size_t v287;
  size_t v288;
  void *v289;
  void **v290;
  size_t v291;
  int v292;
  BOOL v293;
  void **v294;
  size_t v295;
  int v296;
  _BOOL4 v297;
  __int128 v298;
  __n128 v299;
  uint64_t v300;
  const void **v301;
  const void **v302;
  void **v303;
  void **v304;
  void *v305;
  uint64_t v306;
  void *v307;
  char v309;
  void *__p[2];
  const void *v311;
  const void *v312;
  __int128 v313;
  const void *v314;
  uint64_t v315;

  v315 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v7 = a2 - 32;
  v301 = (const void **)(a2 - 96);
  v302 = (const void **)(a2 - 64);
  v8 = (const void **)a1;
  v304 = (void **)a2;
  v306 = a2 - 32;
  while (2)
  {
    a1 = (uint64_t)v8;
    v9 = a2 - (_QWORD)v8;
    v10 = (a2 - (uint64_t)v8) >> 5;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v140 = *(_BYTE *)(a1 + 23);
        v141 = v140 < 0;
        if (v140 >= 0)
          v142 = (const void *)a1;
        else
          v142 = *(const void **)a1;
        v143 = v140 & 0x7F;
        if (v141)
          v144 = *(_QWORD *)(a1 + 8);
        else
          v144 = v143;
        if (*(char *)(a2 - 9) < 0)
        {
          v146 = *(const void **)(a2 - 32);
          v145 = *(_QWORD *)(a2 - 24);
        }
        else
        {
          v145 = *(unsigned __int8 *)(a2 - 9);
          v146 = (const void *)v7;
        }
        if (v144 >= v145)
          v295 = v145;
        else
          v295 = v144;
        v296 = memcmp(v146, v142, v295);
        v297 = v145 < v144;
        if (v296)
          v297 = v296 < 0;
        if (v297)
        {
          v298 = *(_OWORD *)a1;
          v311 = *(const void **)(a1 + 16);
          *(_OWORD *)__p = v298;
          v299 = *(__n128 *)v7;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 + 16);
          *(__n128 *)a1 = v299;
          result = *(__n128 *)__p;
          *(_QWORD *)(v7 + 16) = v311;
          *(__n128 *)v7 = result;
          v300 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v300;
        }
        return result;
      case 3:
        sub_22E72F268((const void **)a1, (_QWORD *)(a1 + 32), (const void **)v7);
        return result;
      case 4:
        result.n128_u64[0] = sub_22E72F814(a1, (__int128 *)(a1 + 32), (__int128 *)(a1 + 64), (__int128 *)v7).n128_u64[0];
        return result;
      case 5:
        result.n128_u64[0] = sub_22E72EFE8(a1, a1 + 32, a1 + 64, a1 + 96, v7).n128_u64[0];
        return result;
      default:
        if (v9 > 767)
        {
          if (!a3)
          {
            if (a1 != a2)
            {
              v175 = (unint64_t)(v10 - 2) >> 1;
              v176 = v175;
              do
              {
                v177 = v176;
                if (v175 >= v176)
                {
                  v178 = (2 * v176) | 1;
                  v179 = a1 + 32 * v178;
                  if (2 * v176 + 2 < v10)
                  {
                    v180 = *(_BYTE *)(v179 + 55);
                    v181 = v180;
                    if (v180 >= 0)
                      v182 = (const void *)(v179 + 32);
                    else
                      v182 = *(const void **)(v179 + 32);
                    v183 = v180 & 0x7F;
                    if (v181 >= 0)
                      v184 = v183;
                    else
                      v184 = *(_QWORD *)(v179 + 40);
                    if (*(char *)(v179 + 23) < 0)
                    {
                      v186 = *(const void **)v179;
                      v185 = *(_QWORD *)(v179 + 8);
                    }
                    else
                    {
                      v185 = *(unsigned __int8 *)(v179 + 23);
                      v186 = (const void *)(a1 + 32 * v178);
                    }
                    if (v184 >= v185)
                      v187 = v185;
                    else
                      v187 = v184;
                    v188 = memcmp(v186, v182, v187);
                    v189 = v185 < v184;
                    if (v188)
                      v189 = v188 < 0;
                    if (v189)
                    {
                      v179 += 32;
                      v178 = 2 * v177 + 2;
                    }
                  }
                  v190 = a1 + 32 * v177;
                  v191 = *(_BYTE *)(v190 + 23);
                  v192 = v191 < 0;
                  if (v191 >= 0)
                    v193 = (const void *)(a1 + 32 * v177);
                  else
                    v193 = *(const void **)v190;
                  v194 = v191 & 0x7F;
                  if (v192)
                    v195 = *(_QWORD *)(v190 + 8);
                  else
                    v195 = v194;
                  if (*(char *)(v179 + 23) < 0)
                  {
                    v197 = *(const void **)v179;
                    v196 = *(_QWORD *)(v179 + 8);
                  }
                  else
                  {
                    v196 = *(unsigned __int8 *)(v179 + 23);
                    v197 = (const void *)v179;
                  }
                  if (v195 >= v196)
                    v198 = v196;
                  else
                    v198 = v195;
                  v199 = memcmp(v197, v193, v198);
                  v200 = v196 < v195;
                  if (v199)
                    v200 = v199 < 0;
                  v175 = (unint64_t)(v10 - 2) >> 1;
                  if (!v200)
                  {
                    v201 = *(_OWORD *)v190;
                    v311 = *(const void **)(v190 + 16);
                    *(_OWORD *)__p = v201;
                    *(_QWORD *)(v190 + 8) = 0;
                    *(_QWORD *)(v190 + 16) = 0;
                    *(_QWORD *)v190 = 0;
                    v312 = *(const void **)(a1 + 32 * v177 + 24);
                    do
                    {
                      v202 = v179;
                      if (*(char *)(v190 + 23) < 0)
                        operator delete(*(void **)v190);
                      v203 = *(_OWORD *)v179;
                      *(_QWORD *)(v190 + 16) = *(_QWORD *)(v179 + 16);
                      *(_OWORD *)v190 = v203;
                      *(_BYTE *)(v179 + 23) = 0;
                      *(_BYTE *)v179 = 0;
                      *(_QWORD *)(v190 + 24) = *(_QWORD *)(v179 + 24);
                      if (v175 < v178)
                        break;
                      v204 = (2 * v178) | 1;
                      v179 = a1 + 32 * v204;
                      v178 = 2 * v178 + 2;
                      if (v178 >= v10)
                      {
                        v178 = v204;
                      }
                      else
                      {
                        v205 = *(_BYTE *)(v179 + 55);
                        v206 = v205;
                        if (v205 >= 0)
                          v207 = (const void *)(v179 + 32);
                        else
                          v207 = *(const void **)(v179 + 32);
                        v208 = v205 & 0x7F;
                        if (v206 >= 0)
                          v209 = v208;
                        else
                          v209 = *(_QWORD *)(v179 + 40);
                        if (*(char *)(v179 + 23) < 0)
                        {
                          v211 = *(const void **)v179;
                          v210 = *(_QWORD *)(v179 + 8);
                        }
                        else
                        {
                          v210 = *(unsigned __int8 *)(v179 + 23);
                          v211 = (const void *)(a1 + 32 * v204);
                        }
                        if (v209 >= v210)
                          v212 = v210;
                        else
                          v212 = v209;
                        v213 = memcmp(v211, v207, v212);
                        v214 = v210 < v209;
                        if (v213)
                          v214 = v213 < 0;
                        if (v214)
                          v179 += 32;
                        else
                          v178 = v204;
                        v175 = (unint64_t)(v10 - 2) >> 1;
                      }
                      if (SHIBYTE(v311) >= 0)
                        v215 = __p;
                      else
                        v215 = (void **)__p[0];
                      if (SHIBYTE(v311) >= 0)
                        v216 = (void *)(HIBYTE(v311) & 0x7F);
                      else
                        v216 = __p[1];
                      if (*(char *)(v179 + 23) < 0)
                      {
                        v218 = *(const void **)v179;
                        v217 = *(_QWORD *)(v179 + 8);
                      }
                      else
                      {
                        v217 = *(unsigned __int8 *)(v179 + 23);
                        v218 = (const void *)v179;
                      }
                      if ((unint64_t)v216 >= v217)
                        v219 = v217;
                      else
                        v219 = (size_t)v216;
                      v220 = memcmp(v218, v215, v219);
                      v221 = v217 < (unint64_t)v216;
                      if (v220)
                        v221 = v220 < 0;
                      v190 = v202;
                    }
                    while (!v221);
                    if (*(char *)(v202 + 23) < 0)
                      operator delete(*(void **)v202);
                    v222 = *(_OWORD *)__p;
                    *(_QWORD *)(v202 + 16) = v311;
                    *(_OWORD *)v202 = v222;
                    *(_QWORD *)(v202 + 24) = v312;
                  }
                }
                v176 = v177 - 1;
              }
              while (v177);
              v223 = v304;
              do
              {
                v224 = 0;
                v307 = *(void **)a1;
                *(_QWORD *)&v313 = *(_QWORD *)(a1 + 8);
                *(_QWORD *)((char *)&v313 + 7) = *(_QWORD *)(a1 + 15);
                v309 = *(_BYTE *)(a1 + 23);
                *(_QWORD *)(a1 + 8) = 0;
                *(_QWORD *)(a1 + 16) = 0;
                *(_QWORD *)a1 = 0;
                v303 = v223;
                v305 = *(void **)(a1 + 24);
                v225 = a1;
                do
                {
                  v226 = v225 + 32 * v224 + 32;
                  v227 = 2 * v224;
                  v224 = (2 * v224) | 1;
                  v228 = v227 + 2;
                  if (v227 + 2 < v10)
                  {
                    v229 = *(_BYTE *)(v226 + 55);
                    v230 = v229;
                    if (v229 >= 0)
                      v231 = (const void *)(v226 + 32);
                    else
                      v231 = *(const void **)(v226 + 32);
                    v232 = v229 & 0x7F;
                    if (v230 >= 0)
                      v233 = v232;
                    else
                      v233 = *(_QWORD *)(v226 + 40);
                    if (*(char *)(v226 + 23) < 0)
                    {
                      v235 = *(const void **)v226;
                      v234 = *(_QWORD *)(v226 + 8);
                    }
                    else
                    {
                      v234 = *(unsigned __int8 *)(v226 + 23);
                      v235 = (const void *)v226;
                    }
                    if (v233 >= v234)
                      v236 = v234;
                    else
                      v236 = v233;
                    v237 = memcmp(v235, v231, v236);
                    v238 = v234 < v233;
                    if (v237)
                      v238 = v237 < 0;
                    if (v238)
                    {
                      v226 += 32;
                      v224 = v228;
                    }
                  }
                  if (*(char *)(v225 + 23) < 0)
                    operator delete(*(void **)v225);
                  result = *(__n128 *)v226;
                  *(_QWORD *)(v225 + 16) = *(_QWORD *)(v226 + 16);
                  *(__n128 *)v225 = result;
                  *(_BYTE *)(v226 + 23) = 0;
                  *(_BYTE *)v226 = 0;
                  *(_QWORD *)(v225 + 24) = *(_QWORD *)(v226 + 24);
                  v225 = v226;
                }
                while (v224 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
                v223 = v303 - 4;
                v239 = *(char *)(v226 + 23);
                if ((void **)v226 == v303 - 4)
                {
                  if (v239 < 0)
                    operator delete(*(void **)v226);
                  *(_QWORD *)v226 = v307;
                  v251 = *(_QWORD *)((char *)&v313 + 7);
                  *(_QWORD *)(v226 + 8) = v313;
                  *(_QWORD *)(v226 + 15) = v251;
                  *(_BYTE *)(v226 + 23) = v309;
                  *(_QWORD *)(v226 + 24) = v305;
                }
                else
                {
                  if (v239 < 0)
                    operator delete(*(void **)v226);
                  result = *(__n128 *)v223;
                  *(_QWORD *)(v226 + 16) = *(v303 - 2);
                  *(__n128 *)v226 = result;
                  *((_BYTE *)v303 - 9) = 0;
                  *((_BYTE *)v303 - 32) = 0;
                  *(_QWORD *)(v226 + 24) = *(v303 - 1);
                  if (*((char *)v303 - 9) < 0)
                    operator delete(*v223);
                  *(v303 - 4) = v307;
                  v240 = (void *)v313;
                  *(void **)((char *)v303 - 17) = *(void **)((char *)&v313 + 7);
                  *(v303 - 3) = v240;
                  *((_BYTE *)v303 - 9) = v309;
                  *(v303 - 1) = v305;
                  v241 = v226 + 32 - a1;
                  if (v241 >= 33)
                  {
                    v242 = (((unint64_t)v241 >> 5) - 2) >> 1;
                    v243 = a1 + 32 * v242;
                    v244 = *(_BYTE *)(v226 + 23);
                    v245 = v244 < 0;
                    if (v244 >= 0)
                      v246 = (const void *)v226;
                    else
                      v246 = *(const void **)v226;
                    v247 = v244 & 0x7F;
                    if (v245)
                      v248 = *(_QWORD *)(v226 + 8);
                    else
                      v248 = v247;
                    if (*(char *)(v243 + 23) < 0)
                    {
                      v250 = *(const void **)v243;
                      v249 = *(_QWORD *)(v243 + 8);
                    }
                    else
                    {
                      v249 = *(unsigned __int8 *)(v243 + 23);
                      v250 = (const void *)(a1 + 32 * v242);
                    }
                    if (v248 >= v249)
                      v252 = v249;
                    else
                      v252 = v248;
                    v253 = memcmp(v250, v246, v252);
                    v254 = v249 < v248;
                    if (v253)
                      v254 = v253 < 0;
                    if (v254)
                    {
                      v255 = *(_OWORD *)v226;
                      v256 = *(const void **)(v226 + 24);
                      v311 = *(const void **)(v226 + 16);
                      *(_OWORD *)__p = v255;
                      *(_QWORD *)(v226 + 8) = 0;
                      *(_QWORD *)(v226 + 16) = 0;
                      *(_QWORD *)v226 = 0;
                      v312 = v256;
                      do
                      {
                        v257 = v243;
                        if (*(char *)(v226 + 23) < 0)
                          operator delete(*(void **)v226);
                        v258 = *(_OWORD *)v243;
                        *(_QWORD *)(v226 + 16) = *(_QWORD *)(v243 + 16);
                        *(_OWORD *)v226 = v258;
                        *(_BYTE *)(v243 + 23) = 0;
                        *(_BYTE *)v243 = 0;
                        *(_QWORD *)(v226 + 24) = *(_QWORD *)(v243 + 24);
                        if (!v242)
                          break;
                        v242 = (v242 - 1) >> 1;
                        v243 = a1 + 32 * v242;
                        if (SHIBYTE(v311) >= 0)
                          v259 = __p;
                        else
                          v259 = (void **)__p[0];
                        if (SHIBYTE(v311) >= 0)
                          v260 = (void *)(HIBYTE(v311) & 0x7F);
                        else
                          v260 = __p[1];
                        if (*(char *)(v243 + 23) < 0)
                        {
                          v262 = *(const void **)v243;
                          v261 = *(_QWORD *)(v243 + 8);
                        }
                        else
                        {
                          v261 = *(unsigned __int8 *)(v243 + 23);
                          v262 = (const void *)(a1 + 32 * v242);
                        }
                        if ((unint64_t)v260 >= v261)
                          v263 = v261;
                        else
                          v263 = (size_t)v260;
                        v264 = memcmp(v262, v259, v263);
                        v265 = v261 < (unint64_t)v260;
                        if (v264)
                          v265 = v264 < 0;
                        v226 = v257;
                      }
                      while (v265);
                      if (*(char *)(v257 + 23) < 0)
                        operator delete(*(void **)v257);
                      result = *(__n128 *)__p;
                      *(_QWORD *)(v257 + 16) = v311;
                      *(__n128 *)v257 = result;
                      *(_QWORD *)(v257 + 24) = v312;
                    }
                  }
                }
              }
              while (v10-- > 2);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = a1 + 32 * ((unint64_t)v10 >> 1);
          if ((unint64_t)v9 <= 0x1000)
          {
            sub_22E72F268((const void **)v12, (_QWORD *)a1, (const void **)v7);
          }
          else
          {
            sub_22E72F268((const void **)a1, (_QWORD *)v12, (const void **)v7);
            sub_22E72F268((const void **)(a1 + 32), (_QWORD *)(v12 - 32), v302);
            sub_22E72F268((const void **)(a1 + 64), (_QWORD *)(a1 + 32 + 32 * v11), v301);
            sub_22E72F268((const void **)(v12 - 32), (_QWORD *)v12, (const void **)(a1 + 32 + 32 * v11));
            v13 = *(_OWORD *)a1;
            v14 = *(_QWORD *)(a1 + 24);
            v311 = *(const void **)(a1 + 16);
            *(_OWORD *)__p = v13;
            v15 = *(_QWORD *)(v12 + 16);
            v16 = *(_QWORD *)(v12 + 24);
            *(_OWORD *)a1 = *(_OWORD *)v12;
            *(_QWORD *)(a1 + 16) = v15;
            *(_QWORD *)(a1 + 24) = v16;
            v17 = v311;
            *(_OWORD *)v12 = *(_OWORD *)__p;
            *(_QWORD *)(v12 + 16) = v17;
            *(_QWORD *)(v12 + 24) = v14;
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            v18 = *(_BYTE *)(a1 + 23);
            v19 = v18 < 0;
            if (v18 >= 0)
              v20 = (const void *)a1;
            else
              v20 = *(const void **)a1;
            v21 = v18 & 0x7F;
            if (v19)
              v22 = *(_QWORD *)(a1 + 8);
            else
              v22 = v21;
            if (*(char *)(a1 - 9) < 0)
            {
              v23 = *(const void **)(a1 - 32);
              v24 = *(_QWORD *)(a1 - 24);
            }
            else
            {
              v23 = (const void *)(a1 - 32);
              v24 = *(unsigned __int8 *)(a1 - 9);
            }
            if (v22 >= v24)
              v25 = v24;
            else
              v25 = v22;
            v26 = memcmp(v23, v20, v25);
            v27 = v24 < v22;
            if (v26)
              v27 = v26 < 0;
            if (!v27)
            {
              v75 = *(_OWORD *)a1;
              v76 = *(const void **)(a1 + 24);
              v311 = *(const void **)(a1 + 16);
              *(_OWORD *)__p = v75;
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              v312 = v76;
              v77 = *(_BYTE *)(a2 - 9);
              v78 = v77 < 0;
              if (v77 >= 0)
                v79 = (const void *)v7;
              else
                v79 = *(const void **)(a2 - 32);
              v80 = v77 & 0x7F;
              if (v78)
                v81 = *(_QWORD *)(a2 - 24);
              else
                v81 = v80;
              if (SHIBYTE(v311) >= 0)
                v82 = (void *)(HIBYTE(v311) & 0x7F);
              else
                v82 = __p[1];
              if (SHIBYTE(v311) >= 0)
                v83 = __p;
              else
                v83 = (void **)__p[0];
              if (v81 >= (unint64_t)v82)
                v84 = (size_t)v82;
              else
                v84 = v81;
              v85 = memcmp(v83, v79, v84);
              v86 = (unint64_t)v82 < v81;
              if (v85)
                v86 = v85 < 0;
              if (v86)
              {
                v87 = (const void **)(a1 + 32);
                do
                {
                  v88 = *((_BYTE *)v87 + 23);
                  v89 = v88 < 0;
                  if (v88 >= 0)
                    v90 = v87;
                  else
                    v90 = *v87;
                  v91 = v88 & 0x7F;
                  if (v89)
                    v92 = (size_t)v87[1];
                  else
                    v92 = v91;
                  if (v92 >= (unint64_t)v82)
                    v93 = (size_t)v82;
                  else
                    v93 = v92;
                  v94 = memcmp(v83, v90, v93);
                  v95 = (unint64_t)v82 < v92;
                  if (v94)
                    v95 = v94 < 0;
                  v87 += 4;
                }
                while (!v95);
                v8 = v87 - 4;
              }
              else
              {
                v96 = (void **)(a1 + 32);
                do
                {
                  v8 = (const void **)v96;
                  if (v96 >= v304)
                    break;
                  v97 = *((_BYTE *)v96 + 23);
                  v98 = v97 < 0;
                  if (v97 >= 0)
                    v99 = v8;
                  else
                    v99 = *v8;
                  v100 = v97 & 0x7F;
                  if (v98)
                    v101 = (size_t)v8[1];
                  else
                    v101 = v100;
                  if (v101 >= (unint64_t)v82)
                    v102 = (size_t)v82;
                  else
                    v102 = v101;
                  v103 = memcmp(v83, v99, v102);
                  v104 = v103 < 0;
                  if (!v103)
                    v104 = (unint64_t)v82 < v101;
                  v96 = (void **)(v8 + 4);
                }
                while (!v104);
              }
              v105 = (unint64_t)v304;
              if (v8 >= (const void **)v304)
                goto LABEL_167;
              v106 = (const void **)v306;
              do
              {
                v107 = *((_BYTE *)v106 + 23);
                v108 = v107 < 0;
                if (v107 >= 0)
                  v109 = v106;
                else
                  v109 = *v106;
                v110 = v107 & 0x7F;
                if (v108)
                  v111 = (size_t)v106[1];
                else
                  v111 = v110;
                if (v111 >= (unint64_t)v82)
                  v112 = (size_t)v82;
                else
                  v112 = v111;
                v113 = memcmp(v83, v109, v112);
                v114 = (unint64_t)v82 < v111;
                if (v113)
                  v114 = v113 < 0;
                v106 -= 4;
              }
              while (v114);
              while (1)
              {
                v105 = (unint64_t)(v106 + 4);
LABEL_167:
                if ((unint64_t)v8 >= v105)
                  break;
                v115 = *(_OWORD *)v8;
                v314 = v8[2];
                v313 = v115;
                v116 = *(_OWORD *)v105;
                v8[2] = *(const void **)(v105 + 16);
                *(_OWORD *)v8 = v116;
                v117 = v313;
                *(_QWORD *)(v105 + 16) = v314;
                *(_OWORD *)v105 = v117;
                v118 = v8[3];
                v8[3] = *(const void **)(v105 + 24);
                *(_QWORD *)(v105 + 24) = v118;
                if (SHIBYTE(v311) >= 0)
                  v119 = (void *)(HIBYTE(v311) & 0x7F);
                else
                  v119 = __p[1];
                if (SHIBYTE(v311) >= 0)
                  v120 = __p;
                else
                  v120 = (void **)__p[0];
                v121 = v8 + 4;
                do
                {
                  v122 = *((_BYTE *)v121 + 23);
                  v123 = v122 < 0;
                  if (v122 >= 0)
                    v124 = v121;
                  else
                    v124 = *v121;
                  v125 = v122 & 0x7F;
                  if (v123)
                    v126 = (size_t)v121[1];
                  else
                    v126 = v125;
                  if (v126 >= (unint64_t)v119)
                    v127 = (size_t)v119;
                  else
                    v127 = v126;
                  v128 = memcmp(v120, v124, v127);
                  v129 = (unint64_t)v119 < v126;
                  if (v128)
                    v129 = v128 < 0;
                  v121 += 4;
                }
                while (!v129);
                v8 = v121 - 4;
                v106 = (const void **)(v105 - 32);
                do
                {
                  v130 = *((_BYTE *)v106 + 23);
                  v131 = v130 < 0;
                  if (v130 >= 0)
                    v132 = v106;
                  else
                    v132 = *v106;
                  v133 = v130 & 0x7F;
                  if (v131)
                    v134 = (size_t)v106[1];
                  else
                    v134 = v133;
                  if (v134 >= (unint64_t)v119)
                    v135 = (size_t)v119;
                  else
                    v135 = v134;
                  v136 = memcmp(v120, v132, v135);
                  v137 = (unint64_t)v119 < v134;
                  if (v136)
                    v137 = v136 < 0;
                  v106 -= 4;
                }
                while (v137);
              }
              v138 = (void **)(v8 - 4);
              a2 = (uint64_t)v304;
              v7 = v306;
              if (v8 - 4 != (const void **)a1)
              {
                if (*(char *)(a1 + 23) < 0)
                  operator delete(*(void **)a1);
                v139 = *(_OWORD *)v138;
                *(_QWORD *)(a1 + 16) = *(v8 - 2);
                *(_OWORD *)a1 = v139;
                *((_BYTE *)v8 - 9) = 0;
                *((_BYTE *)v8 - 32) = 0;
                *(_QWORD *)(a1 + 24) = *(v8 - 1);
              }
              if (*((char *)v8 - 9) < 0)
                operator delete(*v138);
              result = *(__n128 *)__p;
              *(v8 - 2) = v311;
              *(__n128 *)v138 = result;
              HIBYTE(v311) = 0;
              LOBYTE(__p[0]) = 0;
              *(v8 - 1) = v312;
              if (SHIBYTE(v311) < 0)
                operator delete(__p[0]);
              goto LABEL_105;
            }
          }
          v28 = 0;
          v29 = *(_OWORD *)a1;
          v30 = *(const void **)(a1 + 24);
          v311 = *(const void **)(a1 + 16);
          *(_OWORD *)__p = v29;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v312 = v30;
          if (SHIBYTE(v311) >= 0)
            v31 = (void *)(HIBYTE(v311) & 0x7F);
          else
            v31 = __p[1];
          if (SHIBYTE(v311) >= 0)
            v32 = __p;
          else
            v32 = (void **)__p[0];
          do
          {
            v33 = (_QWORD *)(a1 + v28 + 32);
            if (*(char *)(a1 + v28 + 55) < 0)
            {
              v34 = *(_QWORD *)(a1 + v28 + 40);
              v33 = (_QWORD *)*v33;
            }
            else
            {
              v34 = *(unsigned __int8 *)(a1 + v28 + 55);
            }
            if ((unint64_t)v31 >= v34)
              v35 = v34;
            else
              v35 = (size_t)v31;
            v36 = memcmp(v33, v32, v35);
            v37 = v34 < (unint64_t)v31;
            if (v36)
              v37 = v36 < 0;
            v28 += 32;
          }
          while (v37);
          v38 = a1 + v28;
          v39 = (char *)v7;
          if (v28 == 32)
          {
            while (1)
            {
              v45 = v7 + 32;
              if (v38 >= v7 + 32)
                break;
              if (*(char *)(v7 + 23) < 0)
              {
                v47 = *(const void **)v7;
                v46 = *(_QWORD *)(v7 + 8);
              }
              else
              {
                v46 = *(unsigned __int8 *)(v7 + 23);
                v47 = (const void *)v7;
              }
              if ((unint64_t)v31 >= v46)
                v48 = v46;
              else
                v48 = (size_t)v31;
              v49 = memcmp(v47, v32, v48);
              v50 = v46 < (unint64_t)v31;
              if (v49)
                v50 = v49 < 0;
              v7 -= 32;
              if (v50)
              {
                v45 = v7 + 32;
                break;
              }
            }
            v7 = v306;
          }
          else
          {
            do
            {
              if (v39[23] < 0)
              {
                v41 = *(char **)v39;
                v40 = *((_QWORD *)v39 + 1);
              }
              else
              {
                v40 = v39[23];
                v41 = v39;
              }
              if ((unint64_t)v31 >= v40)
                v42 = v40;
              else
                v42 = (size_t)v31;
              v43 = memcmp(v41, v32, v42);
              v44 = v40 < (unint64_t)v31;
              if (v43)
                v44 = v43 < 0;
              v39 -= 32;
            }
            while (!v44);
            v45 = (unint64_t)(v39 + 32);
          }
          v8 = (const void **)v38;
          if (v38 < v45)
          {
            v51 = (char *)v45;
            do
            {
              v52 = *(_OWORD *)v8;
              v314 = v8[2];
              v313 = v52;
              v53 = *(_OWORD *)v51;
              v8[2] = (const void *)*((_QWORD *)v51 + 2);
              *(_OWORD *)v8 = v53;
              v54 = v313;
              *((_QWORD *)v51 + 2) = v314;
              *(_OWORD *)v51 = v54;
              v55 = v8[3];
              v8[3] = (const void *)*((_QWORD *)v51 + 3);
              *((_QWORD *)v51 + 3) = v55;
              if (SHIBYTE(v311) >= 0)
                v56 = __p;
              else
                v56 = (void **)__p[0];
              if (SHIBYTE(v311) >= 0)
                v57 = (void *)(HIBYTE(v311) & 0x7F);
              else
                v57 = __p[1];
              v58 = (char *)(v8 + 4);
              do
              {
                if (v58[23] < 0)
                {
                  v60 = *(char **)v58;
                  v59 = *((_QWORD *)v58 + 1);
                }
                else
                {
                  v59 = v58[23];
                  v60 = v58;
                }
                if ((unint64_t)v57 >= v59)
                  v61 = v59;
                else
                  v61 = (size_t)v57;
                v62 = memcmp(v60, v56, v61);
                v63 = v59 < (unint64_t)v57;
                if (v62)
                  v63 = v62 < 0;
                v58 += 32;
              }
              while (v63);
              v8 = (const void **)(v58 - 32);
              v64 = v51 - 32;
              do
              {
                if (v64[23] < 0)
                {
                  v66 = *(char **)v64;
                  v65 = *((_QWORD *)v64 + 1);
                }
                else
                {
                  v65 = v64[23];
                  v66 = v64;
                }
                if ((unint64_t)v57 >= v65)
                  v67 = v65;
                else
                  v67 = (size_t)v57;
                v68 = memcmp(v66, v56, v67);
                v69 = v65 < (unint64_t)v57;
                if (v68)
                  v69 = v68 < 0;
                v64 -= 32;
              }
              while (!v69);
              v51 = v64 + 32;
            }
            while (v8 < (const void **)v64 + 4);
            a2 = (uint64_t)v304;
            v7 = v306;
          }
          v70 = (void **)(v8 - 4);
          if (v8 - 4 != (const void **)a1)
          {
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v71 = *(_OWORD *)v70;
            *(_QWORD *)(a1 + 16) = *(v8 - 2);
            *(_OWORD *)a1 = v71;
            *((_BYTE *)v8 - 9) = 0;
            *((_BYTE *)v8 - 32) = 0;
            *(_QWORD *)(a1 + 24) = *(v8 - 1);
          }
          if (*((char *)v8 - 9) < 0)
            operator delete(*v70);
          v72 = *(_OWORD *)__p;
          *(v8 - 2) = v311;
          *(_OWORD *)v70 = v72;
          HIBYTE(v311) = 0;
          LOBYTE(__p[0]) = 0;
          *(v8 - 1) = v312;
          if (SHIBYTE(v311) < 0)
            operator delete(__p[0]);
          if (v38 < v45)
            goto LABEL_104;
          v73 = sub_22E72F50C(a1, (uint64_t)(v8 - 4));
          if (!sub_22E72F50C((uint64_t)v8, a2))
          {
            if (v73)
              continue;
LABEL_104:
            sub_22E72DD60(a1, v8 - 4, a3, a4 & 1);
LABEL_105:
            a4 = 0;
            continue;
          }
          a2 = (uint64_t)(v8 - 4);
          if (v73)
            return result;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
        {
          if (a1 != a2)
          {
            v147 = a1 + 32;
            if (a1 + 32 != a2)
            {
              v148 = 0;
              v149 = (const void **)a1;
              do
              {
                v150 = (const void **)v147;
                v151 = *((_BYTE *)v149 + 23);
                v152 = v151 < 0;
                if (v151 >= 0)
                  v153 = v149;
                else
                  v153 = *v149;
                v154 = v151 & 0x7F;
                if (v152)
                  v155 = (size_t)v149[1];
                else
                  v155 = v154;
                if (*((char *)v149 + 55) < 0)
                {
                  v156 = (size_t)v149[5];
                  v157 = *v150;
                }
                else
                {
                  v156 = *((unsigned __int8 *)v149 + 55);
                  v157 = v150;
                }
                if (v155 >= v156)
                  v158 = v156;
                else
                  v158 = v155;
                v159 = memcmp(v157, v153, v158);
                v160 = v156 < v155;
                if (v159)
                  v160 = v159 < 0;
                if (v160)
                {
                  v161 = *(_OWORD *)v150;
                  v311 = v150[2];
                  *(_OWORD *)__p = v161;
                  v150[1] = 0;
                  v150[2] = 0;
                  *v150 = 0;
                  v312 = v149[7];
                  v162 = v148;
                  while (1)
                  {
                    v163 = a1 + v162;
                    v164 = (void **)(a1 + v162 + 32);
                    if (*(char *)(a1 + v162 + 55) < 0)
                      operator delete(*v164);
                    *(_OWORD *)v164 = *(_OWORD *)v163;
                    v165 = *(_QWORD *)(v163 + 24);
                    *(_QWORD *)(a1 + v162 + 48) = *(_QWORD *)(v163 + 16);
                    *(_BYTE *)(v163 + 23) = 0;
                    *(_BYTE *)v163 = 0;
                    *(_QWORD *)(v163 + 56) = v165;
                    if (!v162)
                      break;
                    v166 = *(_BYTE *)(a1 + v162 - 9);
                    if (v166 >= 0)
                      v167 = (const void *)(a1 + v162 - 32);
                    else
                      v167 = *(const void **)(a1 + v162 - 32);
                    if (v166 >= 0)
                      v168 = v166 & 0x7F;
                    else
                      v168 = *(_QWORD *)(a1 + v162 - 24);
                    if (SHIBYTE(v311) >= 0)
                      v169 = (void *)(HIBYTE(v311) & 0x7F);
                    else
                      v169 = __p[1];
                    if (SHIBYTE(v311) >= 0)
                      v170 = __p;
                    else
                      v170 = (void **)__p[0];
                    if (v168 >= (unint64_t)v169)
                      v171 = (size_t)v169;
                    else
                      v171 = v168;
                    v172 = memcmp(v170, v167, v171);
                    v173 = (unint64_t)v169 < v168;
                    if (v172)
                      v173 = v172 < 0;
                    v162 -= 32;
                    if (!v173)
                    {
                      v174 = a1 + v162 + 32;
                      goto LABEL_266;
                    }
                  }
                  v174 = a1;
LABEL_266:
                  if (*(char *)(v174 + 23) < 0)
                    operator delete(*(void **)v174);
                  result = *(__n128 *)__p;
                  *(_QWORD *)(v174 + 16) = v311;
                  *(__n128 *)v174 = result;
                  *(_QWORD *)(v174 + 24) = v312;
                }
                v147 = (uint64_t)(v150 + 4);
                v148 += 32;
                v149 = v150;
              }
              while (v150 + 4 != (const void **)v304);
            }
          }
        }
        else if (a1 != a2)
        {
          v267 = a1 + 32;
          if (a1 + 32 != a2)
          {
            v268 = (_QWORD *)(a1 + 56);
            do
            {
              v269 = (const void **)v267;
              v270 = *(_BYTE *)(a1 + 23);
              v271 = v270 < 0;
              if (v270 >= 0)
                v272 = (const void *)a1;
              else
                v272 = *(const void **)a1;
              v273 = v270 & 0x7F;
              if (v271)
                v274 = *(_QWORD *)(a1 + 8);
              else
                v274 = v273;
              if (*(char *)(a1 + 55) < 0)
              {
                v275 = *(_QWORD *)(a1 + 40);
                v276 = *v269;
              }
              else
              {
                v275 = *(unsigned __int8 *)(a1 + 55);
                v276 = v269;
              }
              if (v274 >= v275)
                v277 = v275;
              else
                v277 = v274;
              v278 = memcmp(v276, v272, v277);
              v279 = v275 < v274;
              if (v278)
                v279 = v278 < 0;
              if (v279)
              {
                v280 = *(_OWORD *)v269;
                v311 = v269[2];
                *(_OWORD *)__p = v280;
                v269[1] = 0;
                v269[2] = 0;
                *v269 = 0;
                v312 = *(const void **)(a1 + 56);
                v281 = v268;
                do
                {
                  v282 = (void **)(v281 - 3);
                  if (*((char *)v281 - 1) < 0)
                    operator delete(*v282);
                  *(_OWORD *)v282 = *(_OWORD *)(v281 - 7);
                  *(v281 - 1) = *(v281 - 5);
                  *((_BYTE *)v281 - 33) = 0;
                  *((_BYTE *)v281 - 56) = 0;
                  v283 = v281 - 4;
                  *v281 = *(v281 - 4);
                  v284 = *((_BYTE *)v281 - 65);
                  v285 = v284;
                  if (v284 >= 0)
                    v286 = v281 - 11;
                  else
                    v286 = (_QWORD *)*(v281 - 11);
                  v287 = v284 & 0x7F;
                  if (v285 >= 0)
                    v288 = v287;
                  else
                    v288 = *(v281 - 10);
                  if (SHIBYTE(v311) >= 0)
                    v289 = (void *)(HIBYTE(v311) & 0x7F);
                  else
                    v289 = __p[1];
                  if (SHIBYTE(v311) >= 0)
                    v290 = __p;
                  else
                    v290 = (void **)__p[0];
                  if (v288 >= (unint64_t)v289)
                    v291 = (size_t)v289;
                  else
                    v291 = v288;
                  v292 = memcmp(v290, v286, v291);
                  v293 = (unint64_t)v289 < v288;
                  if (v292)
                    v293 = v292 < 0;
                  v281 = v283;
                }
                while (v293);
                v294 = (void **)(v283 - 3);
                if (*((char *)v283 - 1) < 0)
                  operator delete(*v294);
                result = *(__n128 *)__p;
                *(v283 - 1) = v311;
                *(__n128 *)v294 = result;
                HIBYTE(v311) = 0;
                LOBYTE(__p[0]) = 0;
                *v283 = v312;
              }
              v267 = (uint64_t)(v269 + 4);
              v268 += 4;
              a1 = (uint64_t)v269;
            }
            while (v269 + 4 != (const void **)a2);
          }
        }
        return result;
    }
  }
}

__n128 sub_22E72EFE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v10;
  BOOL v11;
  const void *v12;
  size_t v13;
  size_t v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  __n128 result;
  _BOOL4 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  BOOL v26;
  const void *v27;
  size_t v28;
  size_t v29;
  size_t v30;
  const void *v31;
  size_t v32;
  int v33;
  _BOOL4 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  BOOL v40;
  const void *v41;
  size_t v42;
  size_t v43;
  size_t v44;
  const void *v45;
  size_t v46;
  int v47;
  _BOOL4 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  BOOL v54;
  const void *v55;
  size_t v56;
  size_t v57;
  size_t v58;
  const void *v59;
  size_t v60;
  int v61;
  _BOOL4 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  sub_22E72F814(a1, (__int128 *)a2, (__int128 *)a3, (__int128 *)a4);
  v10 = *(_BYTE *)(a4 + 23);
  v11 = v10 < 0;
  if (v10 >= 0)
    v12 = (const void *)a4;
  else
    v12 = *(const void **)a4;
  v13 = v10 & 0x7F;
  if (v11)
    v14 = *(_QWORD *)(a4 + 8);
  else
    v14 = v13;
  if (*(char *)(a5 + 23) < 0)
  {
    v16 = *(const void **)a5;
    v15 = *(_QWORD *)(a5 + 8);
  }
  else
  {
    v15 = *(unsigned __int8 *)(a5 + 23);
    v16 = (const void *)a5;
  }
  if (v14 >= v15)
    v17 = v15;
  else
    v17 = v14;
  v18 = memcmp(v16, v12, v17);
  v20 = v15 < v14;
  if (v18)
    v20 = v18 < 0;
  if (v20)
  {
    v21 = *(_QWORD *)(a4 + 16);
    v22 = *(_OWORD *)a4;
    v23 = *(_QWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)(a4 + 16) = v23;
    *(_OWORD *)a5 = v22;
    *(_QWORD *)(a5 + 16) = v21;
    v24 = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(a4 + 24) = *(_QWORD *)(a5 + 24);
    *(_QWORD *)(a5 + 24) = v24;
    v25 = *(_BYTE *)(a3 + 23);
    v26 = v25 < 0;
    if (v25 >= 0)
      v27 = (const void *)a3;
    else
      v27 = *(const void **)a3;
    v28 = v25 & 0x7F;
    if (v26)
      v29 = *(_QWORD *)(a3 + 8);
    else
      v29 = v28;
    if (*(char *)(a4 + 23) < 0)
    {
      v31 = *(const void **)a4;
      v30 = *(_QWORD *)(a4 + 8);
    }
    else
    {
      v30 = *(unsigned __int8 *)(a4 + 23);
      v31 = (const void *)a4;
    }
    if (v29 >= v30)
      v32 = v30;
    else
      v32 = v29;
    v33 = memcmp(v31, v27, v32);
    v34 = v30 < v29;
    if (v33)
      v34 = v33 < 0;
    if (v34)
    {
      v35 = *(_QWORD *)(a3 + 16);
      v36 = *(_OWORD *)a3;
      v37 = *(_QWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)(a3 + 16) = v37;
      *(_OWORD *)a4 = v36;
      *(_QWORD *)(a4 + 16) = v35;
      v38 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)(a4 + 24);
      *(_QWORD *)(a4 + 24) = v38;
      v39 = *(_BYTE *)(a2 + 23);
      v40 = v39 < 0;
      if (v39 >= 0)
        v41 = (const void *)a2;
      else
        v41 = *(const void **)a2;
      v42 = v39 & 0x7F;
      if (v40)
        v43 = *(_QWORD *)(a2 + 8);
      else
        v43 = v42;
      if (*(char *)(a3 + 23) < 0)
      {
        v45 = *(const void **)a3;
        v44 = *(_QWORD *)(a3 + 8);
      }
      else
      {
        v44 = *(unsigned __int8 *)(a3 + 23);
        v45 = (const void *)a3;
      }
      if (v43 >= v44)
        v46 = v44;
      else
        v46 = v43;
      v47 = memcmp(v45, v41, v46);
      v48 = v44 < v43;
      if (v47)
        v48 = v47 < 0;
      if (v48)
      {
        v49 = *(_QWORD *)(a2 + 16);
        v50 = *(_OWORD *)a2;
        v51 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = v51;
        *(_OWORD *)a3 = v50;
        *(_QWORD *)(a3 + 16) = v49;
        v52 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
        *(_QWORD *)(a3 + 24) = v52;
        v53 = *(_BYTE *)(a1 + 23);
        v54 = v53 < 0;
        if (v53 >= 0)
          v55 = (const void *)a1;
        else
          v55 = *(const void **)a1;
        v56 = v53 & 0x7F;
        if (v54)
          v57 = *(_QWORD *)(a1 + 8);
        else
          v57 = v56;
        if (*(char *)(a2 + 23) < 0)
        {
          v59 = *(const void **)a2;
          v58 = *(_QWORD *)(a2 + 8);
        }
        else
        {
          v58 = *(unsigned __int8 *)(a2 + 23);
          v59 = (const void *)a2;
        }
        if (v57 >= v58)
          v60 = v58;
        else
          v60 = v57;
        v61 = memcmp(v59, v55, v60);
        v62 = v58 < v57;
        if (v61)
          v62 = v61 < 0;
        if (v62)
        {
          v63 = *(_QWORD *)(a1 + 16);
          result = *(__n128 *)a1;
          v64 = *(_QWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v64;
          *(__n128 *)a2 = result;
          *(_QWORD *)(a2 + 16) = v63;
          v65 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a2 + 24) = v65;
        }
      }
    }
  }
  return result;
}

uint64_t sub_22E72F268(const void **a1, _QWORD *__s1, const void **a3)
{
  char v6;
  BOOL v7;
  const void *v8;
  size_t v9;
  size_t v10;
  size_t v11;
  _QWORD *v12;
  size_t v13;
  int v14;
  BOOL v15;
  size_t v16;
  const void *v17;
  size_t v18;
  uint64_t result;
  _BOOL4 v20;
  uint64_t *v21;
  const void *v22;
  __int128 v23;
  const void *v24;
  size_t v25;
  _BOOL4 v26;
  const void *v27;
  __int128 v28;
  const void *v29;
  const void *v30;
  uint64_t *v31;
  char v32;
  BOOL v33;
  const void *v34;
  size_t v35;
  size_t v36;
  size_t v37;
  _QWORD *v38;
  const void *v39;
  __int128 v40;
  const void *v41;
  const void *v42;
  char v43;
  BOOL v44;
  _QWORD *v45;
  size_t v46;
  size_t v47;
  size_t v48;
  const void *v49;
  size_t v50;
  _BOOL4 v51;
  const void *v52;
  __int128 v53;
  const void *v54;
  size_t v55;
  _BOOL4 v56;
  const void *v57;
  uint64_t v58;

  v6 = *((_BYTE *)a1 + 23);
  v7 = v6 < 0;
  if (v6 >= 0)
    v8 = a1;
  else
    v8 = *a1;
  v9 = v6 & 0x7F;
  if (v7)
    v10 = (size_t)a1[1];
  else
    v10 = v9;
  if (*((char *)__s1 + 23) < 0)
  {
    v12 = (_QWORD *)*__s1;
    v11 = __s1[1];
  }
  else
  {
    v11 = *((unsigned __int8 *)__s1 + 23);
    v12 = __s1;
  }
  if (v10 >= v11)
    v13 = v11;
  else
    v13 = v10;
  v14 = memcmp(v12, v8, v13);
  v15 = v11 < v10;
  if (v14)
    v15 = v14 < 0;
  v16 = *((unsigned __int8 *)a3 + 23);
  v17 = a3;
  if (v15)
  {
    if ((v16 & 0x80) != 0)
    {
      v17 = *a3;
      v16 = (size_t)a3[1];
    }
    if (v11 >= v16)
      v18 = v16;
    else
      v18 = v11;
    result = memcmp(v17, v12, v18);
    v20 = v16 < v11;
    if ((_DWORD)result)
      v20 = (int)result < 0;
    if (v20)
    {
      v21 = (uint64_t *)(a1 + 3);
      v22 = a1[2];
      v23 = *(_OWORD *)a1;
      v24 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v24;
LABEL_65:
      *(_OWORD *)a3 = v23;
      a3[2] = v22;
      v31 = (uint64_t *)(a3 + 3);
      goto LABEL_66;
    }
    v39 = a1[2];
    v40 = *(_OWORD *)a1;
    v41 = (const void *)__s1[2];
    *(_OWORD *)a1 = *(_OWORD *)__s1;
    a1[2] = v41;
    *(_OWORD *)__s1 = v40;
    __s1[2] = v39;
    v21 = __s1 + 3;
    v42 = a1[3];
    a1[3] = (const void *)__s1[3];
    __s1[3] = v42;
    v43 = *((_BYTE *)__s1 + 23);
    v44 = v43 < 0;
    if (v43 >= 0)
      v45 = __s1;
    else
      v45 = (_QWORD *)*__s1;
    v46 = v43 & 0x7F;
    if (v44)
      v47 = __s1[1];
    else
      v47 = v46;
    if (*((char *)a3 + 23) < 0)
    {
      v49 = *a3;
      v48 = (size_t)a3[1];
    }
    else
    {
      v48 = *((unsigned __int8 *)a3 + 23);
      v49 = a3;
    }
    if (v47 >= v48)
      v55 = v48;
    else
      v55 = v47;
    result = memcmp(v49, v45, v55);
    v56 = v48 < v47;
    if ((_DWORD)result)
      v56 = (int)result < 0;
    if (v56)
    {
      v22 = (const void *)__s1[2];
      v23 = *(_OWORD *)__s1;
      v57 = a3[2];
      *(_OWORD *)__s1 = *(_OWORD *)a3;
      __s1[2] = v57;
      goto LABEL_65;
    }
  }
  else
  {
    if ((v16 & 0x80) != 0)
    {
      v17 = *a3;
      v16 = (size_t)a3[1];
    }
    if (v11 >= v16)
      v25 = v16;
    else
      v25 = v11;
    result = memcmp(v17, v12, v25);
    v26 = v16 < v11;
    if ((_DWORD)result)
      v26 = (int)result < 0;
    if (v26)
    {
      v27 = (const void *)__s1[2];
      v28 = *(_OWORD *)__s1;
      v29 = a3[2];
      *(_OWORD *)__s1 = *(_OWORD *)a3;
      __s1[2] = v29;
      *(_OWORD *)a3 = v28;
      a3[2] = v27;
      v31 = __s1 + 3;
      v30 = (const void *)__s1[3];
      __s1[3] = a3[3];
      a3[3] = v30;
      v32 = *((_BYTE *)a1 + 23);
      v33 = v32 < 0;
      if (v32 >= 0)
        v34 = a1;
      else
        v34 = *a1;
      v35 = v32 & 0x7F;
      if (v33)
        v36 = (size_t)a1[1];
      else
        v36 = v35;
      if (*((char *)__s1 + 23) < 0)
      {
        v38 = (_QWORD *)*__s1;
        v37 = __s1[1];
      }
      else
      {
        v37 = *((unsigned __int8 *)__s1 + 23);
        v38 = __s1;
      }
      if (v36 >= v37)
        v50 = v37;
      else
        v50 = v36;
      result = memcmp(v38, v34, v50);
      v51 = v37 < v36;
      if ((_DWORD)result)
        v51 = (int)result < 0;
      if (v51)
      {
        v52 = a1[2];
        v53 = *(_OWORD *)a1;
        v54 = (const void *)__s1[2];
        *(_OWORD *)a1 = *(_OWORD *)__s1;
        a1[2] = v54;
        *(_OWORD *)__s1 = v53;
        __s1[2] = v52;
        v21 = (uint64_t *)(a1 + 3);
LABEL_66:
        v58 = *v21;
        *v21 = *v31;
        *v31 = v58;
      }
    }
  }
  return result;
}

BOOL sub_22E72F50C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  char v7;
  BOOL v8;
  const void *v9;
  size_t v10;
  size_t v11;
  size_t v12;
  const void *v13;
  const void **v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  BOOL v19;
  const void *v20;
  size_t v21;
  size_t v22;
  size_t v23;
  const void *v24;
  size_t v25;
  int v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  char v33;
  const void *v34;
  size_t v35;
  size_t v36;
  __int128 *v37;
  size_t v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  int v44;
  _BOOL4 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (_OWORD *)(a2 - 32);
      v7 = *(_BYTE *)(a1 + 23);
      v8 = v7 < 0;
      if (v7 >= 0)
        v9 = (const void *)a1;
      else
        v9 = *(const void **)a1;
      v10 = v7 & 0x7F;
      if (v8)
        v11 = *(_QWORD *)(a1 + 8);
      else
        v11 = v10;
      if (*(char *)(a2 - 9) < 0)
      {
        v13 = *(const void **)(a2 - 32);
        v12 = *(_QWORD *)(a2 - 24);
      }
      else
      {
        v12 = *(unsigned __int8 *)(a2 - 9);
        v13 = (const void *)(a2 - 32);
      }
      if (v11 >= v12)
        v43 = v12;
      else
        v43 = v11;
      v44 = memcmp(v13, v9, v43);
      v45 = v12 < v11;
      if (v44)
        v45 = v44 < 0;
      if (v45)
      {
        v46 = *(_QWORD *)(a1 + 16);
        v47 = *(_OWORD *)a1;
        v48 = *(_QWORD *)(a2 - 16);
        *(_OWORD *)a1 = *v6;
        *(_QWORD *)(a1 + 16) = v48;
        *v6 = v47;
        *(_QWORD *)(a2 - 16) = v46;
        v49 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v49;
      }
      return 1;
    case 3:
      sub_22E72F268((const void **)a1, (_QWORD *)(a1 + 32), (const void **)(a2 - 32));
      return 1;
    case 4:
      sub_22E72F814(a1, (__int128 *)(a1 + 32), (__int128 *)(a1 + 64), (__int128 *)(a2 - 32));
      return 1;
    case 5:
      sub_22E72EFE8(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
      return 1;
    default:
      v14 = (const void **)(a1 + 64);
      sub_22E72F268((const void **)a1, (_QWORD *)(a1 + 32), (const void **)(a1 + 64));
      v15 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    v18 = *((_BYTE *)v14 + 23);
    v19 = v18 < 0;
    if (v18 >= 0)
      v20 = v14;
    else
      v20 = *v14;
    v21 = v18 & 0x7F;
    if (v19)
      v22 = (size_t)v14[1];
    else
      v22 = v21;
    if (*(char *)(v15 + 23) < 0)
    {
      v24 = *(const void **)v15;
      v23 = *(_QWORD *)(v15 + 8);
    }
    else
    {
      v23 = *(unsigned __int8 *)(v15 + 23);
      v24 = (const void *)v15;
    }
    if (v22 >= v23)
      v25 = v23;
    else
      v25 = v22;
    v26 = memcmp(v24, v20, v25);
    v27 = v23 < v22;
    if (v26)
      v27 = v26 < 0;
    if (v27)
    {
      v50 = *(_OWORD *)v15;
      v28 = *(_QWORD *)(v15 + 16);
      v29 = *(_QWORD *)(v15 + 24);
      *(_QWORD *)(v15 + 8) = 0;
      *(_QWORD *)(v15 + 16) = 0;
      *(_QWORD *)v15 = 0;
      v51 = v28;
      v52 = v29;
      v30 = v16;
      while (1)
      {
        v31 = a1 + v30;
        v32 = (void **)(a1 + v30 + 96);
        if (*(char *)(a1 + v30 + 119) < 0)
          operator delete(*v32);
        *(_OWORD *)v32 = *(_OWORD *)(v31 + 64);
        *(_QWORD *)(a1 + v30 + 112) = *(_QWORD *)(v31 + 80);
        *(_BYTE *)(v31 + 87) = 0;
        *(_BYTE *)(v31 + 64) = 0;
        *(_QWORD *)(v31 + 120) = *(_QWORD *)(v31 + 88);
        if (v30 == -64)
          break;
        v33 = *(_BYTE *)(a1 + v30 + 55);
        if (v33 >= 0)
          v34 = (const void *)(a1 + v30 + 32);
        else
          v34 = *(const void **)(a1 + v30 + 32);
        if (v33 >= 0)
          v35 = v33 & 0x7F;
        else
          v35 = *(_QWORD *)(a1 + v30 + 40);
        if (v51 >= 0)
          v36 = HIBYTE(v51) & 0x7F;
        else
          v36 = *((_QWORD *)&v50 + 1);
        if (v51 >= 0)
          v37 = &v50;
        else
          v37 = (__int128 *)v50;
        if (v35 >= v36)
          v38 = v36;
        else
          v38 = v35;
        v39 = memcmp(v37, v34, v38);
        v40 = v36 < v35;
        if (v39)
          v40 = v39 < 0;
        v30 -= 32;
        if (!v40)
        {
          v41 = a1 + v30 + 96;
          goto LABEL_51;
        }
      }
      v41 = a1;
LABEL_51:
      if (*(char *)(v41 + 23) < 0)
        operator delete(*(void **)v41);
      *(_OWORD *)v41 = v50;
      v42 = v52;
      *(_QWORD *)(v41 + 16) = v51;
      *(_QWORD *)(v41 + 24) = v42;
      if (++v17 == 8)
        return v15 + 32 == a2;
    }
    v14 = (const void **)v15;
    v16 += 32;
    v15 += 32;
    if (v15 == a2)
      return 1;
  }
}

__n128 sub_22E72F814(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  char v8;
  BOOL v9;
  const void *v10;
  size_t v11;
  size_t v12;
  size_t v13;
  const void *v14;
  size_t v15;
  int v16;
  __n128 result;
  _BOOL4 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  BOOL v24;
  const void *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  const void *v29;
  size_t v30;
  int v31;
  _BOOL4 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  BOOL v38;
  const void *v39;
  size_t v40;
  size_t v41;
  size_t v42;
  const void *v43;
  size_t v44;
  int v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  sub_22E72F268((const void **)a1, a2, (const void **)a3);
  v8 = *((_BYTE *)a3 + 23);
  v9 = v8 < 0;
  if (v8 >= 0)
    v10 = a3;
  else
    v10 = *(const void **)a3;
  v11 = v8 & 0x7F;
  if (v9)
    v12 = *((_QWORD *)a3 + 1);
  else
    v12 = v11;
  if (*((char *)a4 + 23) < 0)
  {
    v14 = *(const void **)a4;
    v13 = *((_QWORD *)a4 + 1);
  }
  else
  {
    v13 = *((unsigned __int8 *)a4 + 23);
    v14 = a4;
  }
  if (v12 >= v13)
    v15 = v13;
  else
    v15 = v12;
  v16 = memcmp(v14, v10, v15);
  v18 = v13 < v12;
  if (v16)
    v18 = v16 < 0;
  if (v18)
  {
    v19 = *((_QWORD *)a3 + 2);
    v20 = *a3;
    v21 = *((_QWORD *)a4 + 2);
    *a3 = *a4;
    *((_QWORD *)a3 + 2) = v21;
    *a4 = v20;
    *((_QWORD *)a4 + 2) = v19;
    v22 = *((_QWORD *)a3 + 3);
    *((_QWORD *)a3 + 3) = *((_QWORD *)a4 + 3);
    *((_QWORD *)a4 + 3) = v22;
    v23 = *((_BYTE *)a2 + 23);
    v24 = v23 < 0;
    if (v23 >= 0)
      v25 = a2;
    else
      v25 = *(const void **)a2;
    v26 = v23 & 0x7F;
    if (v24)
      v27 = *((_QWORD *)a2 + 1);
    else
      v27 = v26;
    if (*((char *)a3 + 23) < 0)
    {
      v29 = *(const void **)a3;
      v28 = *((_QWORD *)a3 + 1);
    }
    else
    {
      v28 = *((unsigned __int8 *)a3 + 23);
      v29 = a3;
    }
    if (v27 >= v28)
      v30 = v28;
    else
      v30 = v27;
    v31 = memcmp(v29, v25, v30);
    v32 = v28 < v27;
    if (v31)
      v32 = v31 < 0;
    if (v32)
    {
      v33 = *((_QWORD *)a2 + 2);
      v34 = *a2;
      v35 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v35;
      *a3 = v34;
      *((_QWORD *)a3 + 2) = v33;
      v36 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a2 + 3) = *((_QWORD *)a3 + 3);
      *((_QWORD *)a3 + 3) = v36;
      v37 = *(_BYTE *)(a1 + 23);
      v38 = v37 < 0;
      if (v37 >= 0)
        v39 = (const void *)a1;
      else
        v39 = *(const void **)a1;
      v40 = v37 & 0x7F;
      if (v38)
        v41 = *(_QWORD *)(a1 + 8);
      else
        v41 = v40;
      if (*((char *)a2 + 23) < 0)
      {
        v43 = *(const void **)a2;
        v42 = *((_QWORD *)a2 + 1);
      }
      else
      {
        v42 = *((unsigned __int8 *)a2 + 23);
        v43 = a2;
      }
      if (v41 >= v42)
        v44 = v42;
      else
        v44 = v41;
      v45 = memcmp(v43, v39, v44);
      v46 = v42 < v41;
      if (v45)
        v46 = v45 < 0;
      if (v46)
      {
        v47 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v48 = *((_QWORD *)a2 + 2);
        *(_OWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 16) = v48;
        *a2 = (__int128)result;
        *((_QWORD *)a2 + 2) = v47;
        v49 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        *((_QWORD *)a2 + 3) = v49;
      }
    }
  }
  return result;
}

uint64_t sub_22E72F9FC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24FA70948;
  if (*(_BYTE *)(a1 + 16))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_22E72FA44(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = &off_24FA70948;
  if (*(_BYTE *)(a1 + 16))
  {
    v1 = *(_QWORD *)(a1 + 8);
    if (v1)
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E72FA9C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t sub_22E72FAB4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_22E72FACC(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, a2);
  return result;
}

uint64_t sub_22E72FAE8(llvm *a1, uint64_t a2, unint64_t a3)
{
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  void *v9;
  char *v10;
  llvm *v11;
  llvm *v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  uint64_t result;

  v6 = (llvm::raw_ostream *)llvm::outs(a1);
  v7 = v6;
  v8 = *((_QWORD *)v6 + 4);
  if ((unint64_t)(*((_QWORD *)v6 + 3) - v8) > 9)
  {
    *(_WORD *)(v8 + 8) = 8250;
    *(_QWORD *)v8 = *(_QWORD *)"PCH DECL: ";
    v9 = (void *)(*((_QWORD *)v6 + 4) + 10);
    *((_QWORD *)v6 + 4) = v9;
  }
  else
  {
    v7 = (llvm::raw_ostream *)llvm::raw_ostream::write(v6, "PCH DECL: ");
    v9 = (void *)*((_QWORD *)v7 + 4);
  }
  v10 = sub_22F3AEA44(a3);
  v11 = (llvm *)strlen(v10);
  v12 = v11;
  if ((unint64_t)v11 <= *((_QWORD *)v7 + 3) - (_QWORD)v9)
  {
    if (v11)
    {
      v11 = (llvm *)memcpy(v9, v10, (size_t)v11);
      *((_QWORD *)v7 + 4) += v12;
    }
  }
  else
  {
    v11 = (llvm *)llvm::raw_ostream::write(v7, v10);
  }
  if (a3 && (*(_DWORD *)(a3 + 28) & 0x7Fu) - 75 >= 0xFFFFFFC2)
  {
    v13 = (llvm::raw_ostream *)llvm::outs(v11);
    v14 = *((_QWORD *)v13 + 4);
    if ((unint64_t)(*((_QWORD *)v13 + 3) - v14) > 2)
    {
      *(_BYTE *)(v14 + 2) = 32;
      *(_WORD *)v14 = 11552;
      *((_QWORD *)v13 + 4) += 3;
    }
    else
    {
      v13 = (llvm::raw_ostream *)llvm::raw_ostream::write(v13, " - ");
    }
    v15 = (llvm::raw_ostream *)llvm::outs(v13);
    v16 = sub_22EFC72E8(a3);
    sub_22EFBA008((_QWORD *)a3, v15, v16 + 15104);
  }
  v17 = (llvm::raw_ostream *)llvm::outs(v11);
  v18 = (_BYTE *)*((_QWORD *)v17 + 4);
  if (*((_BYTE **)v17 + 3) == v18)
  {
    llvm::raw_ostream::write(v17, "\n");
  }
  else
  {
    *v18 = 10;
    ++*((_QWORD *)v17 + 4);
  }
  result = *((_QWORD *)a1 + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)result + 48))(result, a2, a3);
  return result;
}

uint64_t sub_22E72FCC0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  return result;
}

uint64_t sub_22E72FCD8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

uint64_t sub_22E72FCF0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24FA70948;
  if (*(_BYTE *)(a1 + 16))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_22E72FD38(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = &off_24FA70948;
  if (*(_BYTE *)(a1 + 16))
  {
    v1 = *(_QWORD *)(a1 + 8);
    if (v1)
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E72FD90(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t sub_22E72FDA8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24FA709B0;
  sub_22E5EFB0C(a1 + 32, *(char **)(a1 + 40));
  *(_QWORD *)a1 = &off_24FA70948;
  if (*(_BYTE *)(a1 + 16))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_22E72FE04(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24FA709B0;
  sub_22E5EFB0C(a1 + 32, *(char **)(a1 + 40));
  *(_QWORD *)a1 = &off_24FA70948;
  if (*(_BYTE *)(a1 + 16))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E72FE70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  __int16 v16;

  if (a3 && (*(_DWORD *)(a3 + 28) & 0x7Fu) - 75 >= 0xFFFFFFC2)
  {
    sub_22EFC683C((uint64_t *)(a3 + 40), __p);
    v6 = sub_22E72FFFC(a1 + 32, (uint64_t)__p);
    if (SHIBYTE(v15) < 0)
      operator delete(__p[0]);
    if (a1 + 40 != v6)
    {
      v8 = sub_22F41A810(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 1992) + 8) + 32), 4, "%0 was deserialized", 0x13uLL);
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 1992) + 8);
      *(_DWORD *)(v9 + 312) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(v9 + 316) = v8;
      if (*(char *)(v9 + 311) < 0)
      {
        **(_BYTE **)(v9 + 288) = 0;
        *(_QWORD *)(v9 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v9 + 288) = 0;
        *(_BYTE *)(v9 + 311) = 0;
      }
      v10 = (unsigned __int8 *)(v9 + 320);
      __p[0] = (void *)(v9 + 320);
      __p[1] = 0;
      v15 = v9;
      v16 = 1;
      *(_BYTE *)(v9 + 320) = 0;
      *(_DWORD *)(v9 + 664) = 0;
      v11 = *(unsigned int *)(v9 + 776);
      if ((_DWORD)v11)
      {
        v12 = *(_QWORD *)(v9 + 768);
        v13 = 56 * v11;
        do
        {
          if (*(char *)(v12 + v13 - 9) < 0)
            operator delete(*(void **)(v12 + v13 - 32));
          v13 -= 56;
        }
        while (v13);
        LODWORD(v11) = *v10;
      }
      *(_DWORD *)(v9 + 776) = 0;
      v10[v11 + 1] = 11;
      *(_BYTE *)(v9 + 320) = v11 + 1;
      *(_QWORD *)&v10[8 * v11 + 16] = a3;
      sub_22E3BB0B8((uint64_t)__p);
    }
  }
  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 48))(result, a2, a3);
  return result;
}

uint64_t sub_22E72FFFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v6;
  size_t v7;
  uint64_t v8;
  const void *v9;
  size_t v10;
  size_t v11;
  int v12;
  _BOOL4 v13;
  BOOL v14;
  uint64_t *v15;
  char v16;
  const void *v17;
  unint64_t v18;
  size_t v19;
  int v20;
  _BOOL4 v21;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *(unsigned __int8 *)(a2 + 23);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = (v4 & 0x80u) == 0 ? (const void *)a2 : *(const void **)a2;
  v7 = (v4 & 0x80u) == 0 ? v4 & 0x7F : *(_QWORD *)(a2 + 8);
  v8 = a1 + 8;
  do
  {
    if (*(char *)(v3 + 55) < 0)
    {
      v9 = *(const void **)(v3 + 32);
      v10 = *(_QWORD *)(v3 + 40);
    }
    else
    {
      v9 = (const void *)(v3 + 32);
      v10 = *(unsigned __int8 *)(v3 + 55);
    }
    if (v7 >= v10)
      v11 = v10;
    else
      v11 = v7;
    v12 = memcmp(v9, v6, v11);
    v13 = v10 < v7;
    if (v12)
      v13 = v12 < 0;
    v14 = !v13;
    if (v13)
      v15 = (uint64_t *)(v3 + 8);
    else
      v15 = (uint64_t *)v3;
    if (v14)
      v8 = v3;
    v3 = *v15;
  }
  while (*v15);
  if (v8 == v2)
    return v2;
  v16 = *(_BYTE *)(v8 + 55);
  if (v16 >= 0)
    v17 = (const void *)(v8 + 32);
  else
    v17 = *(const void **)(v8 + 32);
  if (v16 >= 0)
    v18 = v16 & 0x7F;
  else
    v18 = *(_QWORD *)(v8 + 40);
  if ((v4 & 0x80u) != 0)
    v4 = v5;
  v19 = v18 >= v4 ? v4 : v18;
  v20 = memcmp(v6, v17, v19);
  v21 = v4 < v18;
  if (v20)
    v21 = v20 < 0;
  if (v21)
    return v2;
  return v8;
}

unint64_t sub_22E73011C(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  __int128 v12;
  int64x2_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  int64x2_t v18;
  unint64_t v19;
  unint64_t *v20;

  v3 = *a1;
  v2 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((uint64_t)(a1[2] - v3) >> 3) > v5)
    v5 = 0x5555555555555556 * ((uint64_t)(a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v5;
  v20 = a1 + 2;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_22E3B3F8C();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v4];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_22E3BB2B4(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v2 = a1[1];
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
  }
  if (v2 == v3)
  {
    v13 = vdupq_n_s64(v3);
    v11 = (unint64_t)v10;
  }
  else
  {
    v11 = (unint64_t)v10;
    do
    {
      v12 = *(_OWORD *)(v2 - 24);
      *(_QWORD *)(v11 - 8) = *(_QWORD *)(v2 - 8);
      *(_OWORD *)(v11 - 24) = v12;
      v11 -= 24;
      *(_QWORD *)(v2 - 16) = 0;
      *(_QWORD *)(v2 - 8) = 0;
      *(_QWORD *)(v2 - 24) = 0;
      v2 -= 24;
    }
    while (v2 != v3);
    v13 = *(int64x2_t *)a1;
  }
  v14 = (unint64_t)(v10 + 24);
  *a1 = v11;
  a1[1] = v14;
  v18 = v13;
  v15 = a1[2];
  a1[2] = (unint64_t)&v9[24 * v8];
  v19 = v15;
  v17 = v13.i64[0];
  sub_22E3B8B94((uint64_t)&v17);
  return v14;
}

uint64_t sub_22E730294(uint64_t result, unint64_t *__src)
{
  int64x2_t *v2;
  unint64_t *v3;
  unint64_t v4;
  const void *v5;
  size_t v6;
  unint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  int64x2_t v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  int64x2_t v25;
  unint64_t v26;
  int64x2_t *v27;

  v2 = *(int64x2_t **)(*(_QWORD *)result + 16);
  do
  {
    v3 = __src;
    v4 = __src[1];
    if ((v4 & 2) == 0)
      break;
    __src = (unint64_t *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  }
  while ((v4 & 0xFFFFFFFFFFFFFFFCLL) != 0);
  v7 = *v3;
  v5 = v3 + 4;
  v6 = v7;
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_31;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&v22 + 1) = v6;
    v23 = v10 | 0x8000000000000000;
    *(_QWORD *)&v22 = v8;
    goto LABEL_11;
  }
  HIBYTE(v23) = v6;
  v8 = &v22;
  if (v6)
LABEL_11:
    result = (uint64_t)memmove(v8, v5, v6);
  *((_BYTE *)v8 + v6) = 0;
  v11 = v2[177].u64[1];
  v12 = v2[178].u64[0];
  if (v11 < v12)
  {
    *(_OWORD *)v11 = v22;
    *(_QWORD *)(v11 + 16) = v23;
    v13 = v11 + 24;
    goto LABEL_30;
  }
  v14 = v2[177].i64[0];
  v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v14) >> 3) + 1;
  if (v15 > 0xAAAAAAAAAAAAAAALL)
LABEL_31:
    abort();
  if (0x5555555555555556 * ((uint64_t)(v12 - v14) >> 3) > v15)
    v15 = 0x5555555555555556 * ((uint64_t)(v12 - v14) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v14) >> 3) >= 0x555555555555555)
    v16 = 0xAAAAAAAAAAAAAAALL;
  else
    v16 = v15;
  v27 = v2 + 178;
  if (v16)
  {
    if (v16 > 0xAAAAAAAAAAAAAAALL)
      sub_22E3B3F8C();
    v17 = (char *)operator new(24 * v16);
  }
  else
  {
    v17 = 0;
  }
  v18 = &v17[8 * ((uint64_t)(v11 - v14) >> 3)];
  *(_OWORD *)v18 = v22;
  *((_QWORD *)v18 + 2) = v23;
  if (v11 == v14)
  {
    v21 = vdupq_n_s64(v11);
    v19 = &v17[8 * ((uint64_t)(v11 - v14) >> 3)];
  }
  else
  {
    v19 = &v17[8 * ((uint64_t)(v11 - v14) >> 3)];
    do
    {
      v20 = *(_OWORD *)(v11 - 24);
      *((_QWORD *)v19 - 1) = *(_QWORD *)(v11 - 8);
      *(_OWORD *)(v19 - 24) = v20;
      v19 -= 24;
      *(_QWORD *)(v11 - 16) = 0;
      *(_QWORD *)(v11 - 8) = 0;
      *(_QWORD *)(v11 - 24) = 0;
      v11 -= 24;
    }
    while (v11 != v14);
    v21 = v2[177];
    v12 = v2[178].u64[0];
  }
  v13 = (unint64_t)(v18 + 24);
  v2[177].i64[0] = (uint64_t)v19;
  v2[177].i64[1] = (uint64_t)(v18 + 24);
  v25 = v21;
  v2[178].i64[0] = (uint64_t)&v17[24 * v16];
  v26 = v12;
  v24 = v21.i64[0];
  result = sub_22E3B8B94((uint64_t)&v24);
LABEL_30:
  v2[177].i64[1] = v13;
  return result;
}

_QWORD *sub_22E73048C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  uint64_t v10;
  char *v11;
  unint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  void **v16;
  size_t v17;
  void *p_p;
  size_t v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  char v39;
  void *v40;
  size_t v41;
  size_t v42;
  uint64_t v43;
  __int128 *p_dst;
  char *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  _QWORD *v55;
  void **v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  void ***v64;
  void **v65;
  void **v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  void **v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  std::__shared_weak_count *v86;
  _QWORD *v87;
  __int128 v88;
  char *v89;
  void *__p;
  size_t v91;
  uint64_t v92;
  void *v93[2];
  uint64_t v94;
  _QWORD *v95;
  void **v96;
  __int128 __dst;
  unint64_t v98;
  __int16 v99;

  result = (*(_QWORD *(**)(_QWORD **__return_ptr))(*(_QWORD *)a1 + 136))(&v95);
  if (!v95)
  {
    *a5 = 0;
    return result;
  }
  v10 = *(_QWORD *)(a2 + 16);
  if (*(char *)(v10 + 2527) < 0)
  {
    sub_22E3BB2B4(v93, *(void **)(v10 + 2504), *(_QWORD *)(v10 + 2512));
    v10 = *(_QWORD *)(a2 + 16);
  }
  else
  {
    *(_OWORD *)v93 = *(_OWORD *)(v10 + 2504);
    v94 = *(_QWORD *)(v10 + 2520);
  }
  __p = 0;
  v91 = 0;
  v92 = 0;
  v11 = (char *)operator new(0x50uLL);
  *((_QWORD *)v11 + 1) = 0;
  v12 = (unint64_t *)(v11 + 8);
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &unk_24FA6D728;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *((_QWORD *)v11 + 9) = 0;
  *((_QWORD *)v11 + 6) = v11 + 72;
  *((_QWORD *)v11 + 7) = 0;
  *((_QWORD *)v11 + 8) = 0;
  v88 = 0uLL;
  v89 = 0;
  v13 = *(_QWORD *)(a2 + 184);
  v84 = *(_QWORD *)(a2 + 192);
  v14 = *(_DWORD *)(v10 + 2288);
  v15 = operator new();
  if (v94 >= 0)
    v16 = v93;
  else
    v16 = (void **)v93[0];
  if (v94 >= 0)
    v17 = HIBYTE(v94) & 0x7F;
  else
    v17 = (size_t)v93[1];
  if (v92 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v92 >= 0)
    v19 = HIBYTE(v92) & 0x7F;
  else
    v19 = v91;
  v82 = (std::__shared_weak_count *)v11;
  v83 = v11 + 24;
  *(_QWORD *)&__dst = v11 + 24;
  *((_QWORD *)&__dst + 1) = v11;
  do
    v20 = __ldxr(v12);
  while (__stxr(v20 + 1, v12));
  v21 = v15;
  sub_22E8048F0(v15, v84, v13, v16, v17, p_p, v19, (uint64_t)&__dst, *(_QWORD **)(v10 + 2808), (uint64_t)(*(_QWORD *)(v10 + 2816) - *(_QWORD *)(v10 + 2808)) >> 4, v14 < 0, (v14 & 0x80000) != 0, (v14 & 0x80000) != 0);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (_QWORD *)*((_QWORD *)&v88 + 1);
  if (*((_QWORD *)&v88 + 1) >= (unint64_t)v89)
  {
    v27 = (_QWORD *)v88;
    v28 = (uint64_t)(*((_QWORD *)&v88 + 1) - v88) >> 3;
    v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 61)
      goto LABEL_106;
    v30 = (uint64_t)&v89[-v88];
    if ((uint64_t)&v89[-v88] >> 2 > v29)
      v29 = v30 >> 2;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
      v31 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v31 = v29;
    if (v31)
    {
      if (v31 >> 61)
        goto LABEL_107;
      v32 = (char *)operator new(8 * v31);
    }
    else
    {
      v32 = 0;
    }
    v33 = (uint64_t *)&v32[8 * v28];
    v34 = &v32[8 * v31];
    *v33 = v21;
    v26 = v33 + 1;
    if (v25 == v27)
    {
      *(_QWORD *)&v88 = &v32[8 * v28];
      v89 = v34;
    }
    else
    {
      do
      {
        v47 = *--v25;
        *v25 = 0;
        *--v33 = v47;
      }
      while (v25 != v27);
      v48 = (_QWORD *)*((_QWORD *)&v88 + 1);
      v25 = (_QWORD *)v88;
      *(_QWORD *)&v88 = v33;
      v89 = v34;
      while (v48 != v25)
      {
        v50 = *--v48;
        v49 = v50;
        *v48 = 0;
        if (v50)
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
      }
    }
    if (v25)
      operator delete(v25);
  }
  else
  {
    **((_QWORD **)&v88 + 1) = v21;
    v26 = v25 + 1;
  }
  *((_QWORD *)&v88 + 1) = v26;
  v35 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40);
  v38 = *(void **)(v35 + 192);
  v36 = v35 + 192;
  v37 = v38;
  v39 = *(_BYTE *)(v36 + 23);
  if (v39 >= 0)
    v40 = (void *)v36;
  else
    v40 = v37;
  v41 = *(_QWORD *)(v36 + 8);
  if (v39 >= 0)
    v42 = v39 & 0x7F;
  else
    v42 = v41;
  v43 = *(_QWORD *)(*sub_22F2AC050(*(llvm::StringMapImpl **)(a2 + 288), v40, v42) + 8);
  if (v43)
  {
    if (a4 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_106;
    if (a4 >= 0x17)
    {
      v51 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a4 | 7) != 0x17)
        v51 = a4 | 7;
      v52 = v51 + 1;
      p_dst = (__int128 *)operator new(v51 + 1);
      *((_QWORD *)&__dst + 1) = a4;
      v98 = v52 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
      v46 = v82;
      v45 = v83;
    }
    else
    {
      HIBYTE(v98) = a4;
      p_dst = &__dst;
      v46 = v82;
      v45 = v83;
      if (!a4)
        goto LABEL_62;
    }
    memmove(p_dst, a3, a4);
LABEL_62:
    *((_BYTE *)p_dst + a4) = 0;
    v53 = v95;
    v95 = 0;
    v86 = v46;
    v87 = v53;
    v85 = v45;
    do
      v54 = __ldxr(v12);
    while (__stxr(v54 + 1, v12));
    (*(void (**)(void ***__return_ptr, uint64_t, uint64_t, __int128 *, void **, _QWORD **, char **))(*(_QWORD *)v43 + 24))(&v96, v43, a2, &__dst, v93, &v87, &v85);
    v55 = (_QWORD *)*((_QWORD *)&v88 + 1);
    if (*((_QWORD *)&v88 + 1) < (unint64_t)v89)
    {
      v56 = v96;
      v96 = 0;
      **((_QWORD **)&v88 + 1) = v56;
      v57 = v55 + 1;
LABEL_85:
      *((_QWORD *)&v88 + 1) = v57;
      v70 = v96;
      v96 = 0;
      if (v70)
        (*((void (**)(void **))*v70 + 1))(v70);
      v71 = v86;
      if (v86)
      {
        p_shared_owners = (unint64_t *)&v86->__shared_owners_;
        do
          v73 = __ldaxr(p_shared_owners);
        while (__stlxr(v73 - 1, p_shared_owners));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v74 = v87;
      v87 = 0;
      if (v74)
        (*(void (**)(_QWORD *))(*v74 + 8))(v74);
      if (SHIBYTE(v98) < 0)
        operator delete((void *)__dst);
      v75 = operator new();
      __dst = v88;
      v98 = (unint64_t)v89;
      v88 = 0uLL;
      v89 = 0;
      sub_22E73E5DC(v75, (uint64_t)&__dst);
      v96 = (void **)&__dst;
      sub_22E3B4AF8(&v96);
      *a5 = v75;
      *(_QWORD *)&__dst = &v88;
      sub_22E3B4AF8((void ***)&__dst);
      do
        v76 = __ldaxr(v12);
      while (__stlxr(v76 - 1, v12));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
      if (SHIBYTE(v92) < 0)
        operator delete(__p);
      if (SHIBYTE(v94) < 0)
        operator delete(v93[0]);
      result = v95;
      v95 = 0;
      if (result)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      return result;
    }
    v58 = (_QWORD *)v88;
    v59 = (uint64_t)(*((_QWORD *)&v88 + 1) - v88) >> 3;
    v60 = v59 + 1;
    if (!((unint64_t)(v59 + 1) >> 61))
    {
      v61 = (uint64_t)&v89[-v88];
      if ((uint64_t)&v89[-v88] >> 2 > v60)
        v60 = v61 >> 2;
      if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
        v62 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v62 = v60;
      if (!v62)
      {
        v63 = 0;
        goto LABEL_76;
      }
      if (!(v62 >> 61))
      {
        v63 = (char *)operator new(8 * v62);
LABEL_76:
        v64 = (void ***)&v63[8 * v59];
        v65 = v96;
        v96 = 0;
        *v64 = v65;
        v57 = v64 + 1;
        if (v55 == v58)
        {
          *(_QWORD *)&v88 = v64;
          v89 = &v63[8 * v62];
        }
        else
        {
          do
          {
            v66 = (void **)*--v55;
            *v55 = 0;
            *--v64 = v66;
          }
          while (v55 != v58);
          v67 = (_QWORD *)*((_QWORD *)&v88 + 1);
          v55 = (_QWORD *)v88;
          *(_QWORD *)&v88 = v64;
          v89 = &v63[8 * v62];
          while (v67 != v55)
          {
            v69 = *--v67;
            v68 = v69;
            *v67 = 0;
            if (v69)
              (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
          }
        }
        if (v55)
          operator delete(v55);
        goto LABEL_85;
      }
LABEL_107:
      sub_22E3B3F8C();
    }
LABEL_106:
    abort();
  }
  v77 = *(_QWORD *)(a2 + 32);
  if (v77)
  {
    *(_QWORD *)(v77 + 312) = 0x2700000000;
    if (*(char *)(v77 + 311) < 0)
    {
      **(_BYTE **)(v77 + 288) = 0;
      *(_QWORD *)(v77 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v77 + 288) = 0;
      *(_BYTE *)(v77 + 311) = 0;
    }
    __dst = v77 + 320;
    v98 = v77;
    v99 = 1;
    *(_BYTE *)(v77 + 320) = 0;
    *(_DWORD *)(v77 + 664) = 0;
    v78 = *(unsigned int *)(v77 + 776);
    if ((_DWORD)v78)
    {
      v79 = *(_QWORD *)(v77 + 768);
      v80 = 56 * v78;
      do
      {
        if (*(char *)(v79 + v80 - 9) < 0)
          operator delete(*(void **)(v79 + v80 - 32));
        v80 -= 56;
      }
      while (v80);
    }
    *(_DWORD *)(v77 + 776) = 0;
    sub_22E3B89A8((unsigned __int8 **)&__dst, v40, v42);
    sub_22E3BB0B8((uint64_t)&__dst);
  }
  v81 = llvm::report_fatal_error((llvm *)"unknown module format", (const char *)1);
  return (_QWORD *)sub_22E730B3C(v81);
}

uint64_t sub_22E730B3C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  __int16 v9;

  v2 = *(_QWORD *)(**(_QWORD **)(a2 + 16) + 20);
  if ((v2 & 0x200000000000) == 0)
  {
    v3 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(v3 + 312) = 0x32400000000;
    if (*(char *)(v3 + 311) < 0)
    {
      **(_BYTE **)(v3 + 288) = 0;
      *(_QWORD *)(v3 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v3 + 288) = 0;
      *(_BYTE *)(v3 + 311) = 0;
    }
    v8[0] = v3 + 320;
    v8[1] = 0;
    v8[2] = v3;
    v9 = 1;
    *(_BYTE *)(v3 + 320) = 0;
    *(_DWORD *)(v3 + 664) = 0;
    v4 = *(unsigned int *)(v3 + 776);
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD *)(v3 + 768);
      v6 = 56 * v4;
      do
      {
        if (*(char *)(v5 + v6 - 9) < 0)
          operator delete(*(void **)(v5 + v6 - 32));
        v6 -= 56;
      }
      while (v6);
    }
    *(_DWORD *)(v3 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v8);
  }
  return (v2 >> 45) & 1;
}

void sub_22E730C00(_QWORD *a1@<X1>, _BYTE *a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t *v8;
  const void *v9;
  char v10;
  int v11;
  size_t v12;
  const void *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v8 = (uint64_t *)a1[2];
  if (*((char *)v8 + 2527) < 0)
  {
    if (v8[314])
      goto LABEL_5;
  }
  else if (*((_BYTE *)v8 + 2527))
  {
    goto LABEL_5;
  }
  v9 = v8 + 310;
  v10 = *((_BYTE *)v8 + 2503);
  v11 = v10;
  if (v10 < 0)
    v9 = (const void *)v8[310];
  v12 = v10 & 0x7F;
  if (v11 < 0)
    v12 = v8[311];
  if (v12)
    v13 = v9;
  else
    v13 = a2;
  if (v12)
    v14 = v12;
  else
    v14 = a3;
  v15 = *(_QWORD *)(a1[24] + 104);
  v16 = *v8;
  v17 = (void *)(v16 + 496);
  v18 = *(_BYTE *)(v16 + 519);
  v20 = *(void **)(v16 + 496);
  v19 = *(_QWORD *)(v16 + 504);
  if (v18 >= 0)
    v21 = v17;
  else
    v21 = v20;
  if (v18 >= 0)
    v22 = v18 & 0x7F;
  else
    v22 = v19;
  sub_22F40EE28(v15, v21, v22, v13, v14, &v25);
  v23 = a1[2];
  v24 = v23 + 2504;
  if (*(char *)(v23 + 2527) < 0)
    operator delete(*(void **)v24);
  *(_OWORD *)v24 = v25;
  *(_QWORD *)(v24 + 16) = v26;
LABEL_5:
  sub_22E6CE29C(a1, a2, a3, 0, a4);
}

uint64_t sub_22E730D24(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm *v6;
  BOOL v7;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8 * v3;
      do
      {
        v6 = *(llvm **)(*(_QWORD *)a1 + v4);
        if (v6)
          v7 = (llvm *)((char *)v6 + 8) == 0;
        else
          v7 = 1;
        if (!v7)
          llvm::deallocate_buffer(v6, (void *)(*(_QWORD *)v6 + 25));
        v4 += 8;
      }
      while (v5 != v4);
    }
  }
  free(*(void **)a1);
  return a1;
}

unint64_t sub_22E730DA4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 56 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_22F2AC14C(a1);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_22F2AC14C(a1);
    }
  }
  return v3;
}

void sub_22E730E0C(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = (__int128 *)*a1;
    v4 = *a1 + 56 * v2;
    do
    {
      v5 = *v3;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)v3 + 2);
      *(_OWORD *)a2 = v5;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
      *(_QWORD *)v3 = 0;
      v6 = *(__int128 *)((char *)v3 + 24);
      *(_QWORD *)(a2 + 40) = *((_QWORD *)v3 + 5);
      *(_OWORD *)(a2 + 24) = v6;
      *((_QWORD *)v3 + 4) = 0;
      *((_QWORD *)v3 + 5) = 0;
      *((_QWORD *)v3 + 3) = 0;
      *(_QWORD *)(a2 + 48) = *((_QWORD *)v3 + 6);
      v3 = (__int128 *)((char *)v3 + 56);
      a2 += 56;
    }
    while (v3 != (__int128 *)v4);
    v7 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v7)
    {
      v8 = (__int128 *)*a1;
      v9 = 56 * v7;
      do
      {
        v10 = (uint64_t)v8 + v9;
        if (*((char *)v8 + v9 - 9) < 0)
          operator delete(*(void **)(v10 - 32));
        if (*(char *)(v10 - 33) < 0)
          operator delete(*(void **)(v10 - 56));
        v9 -= 56;
      }
      while (v9);
    }
  }
}

uint64_t sub_22E730EC8(_BYTE *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v3;
  _DWORD *v4;
  int v5;
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v8;
  int v9;
  void *v10;
  uint64_t v11;
  unsigned int v12;
  int v14;

  if (a2)
  {
    v3 = a2;
    v4 = a1;
    v5 = *a1;
    v6 = 1;
    if ((v5 - 9) >= 5 && v5 != 32)
    {
      v14 = a1[a2 - 1];
      if ((v14 - 9) >= 5)
        v6 = v14 == 32;
    }
    v7 = sub_22F2AC1B8(a1, a2);
    v8 = sub_22F2AC220((uint64_t)v4, v3);
    v9 = sub_22E73102C(v4, v3);
    if (v9 | v8 | v7)
      LODWORD(v11) = 1;
    else
      LODWORD(v11) = v6;
    if (v10)
      v11 = 1;
    else
      v11 = v11;
    while (1)
    {
      v12 = *(unsigned __int8 *)v4;
      if (v12 - 48 < 0xA || (v12 & 0xFFFFFFDF) - 65 < 0x1A)
        goto LABEL_25;
      result = 2;
      if (v12 <= 0x2E)
      {
        if (((1 << v12) & 0x700100000200) != 0)
          goto LABEL_25;
        if (((1 << v12) & 0x2400) != 0)
          return result;
      }
      if (v12 - 94 >= 2)
      {
        if (v12 == 127 || v12 < 0x20)
          return result;
        v11 = (v12 & 0x80u) == 0 ? 1 : v11;
        if ((v12 & 0x80) != 0)
          return result;
      }
LABEL_25:
      v4 = (_DWORD *)((char *)v4 + 1);
      result = v11;
      if (!--v3)
        return result;
    }
  }
  return 1;
}

uint64_t sub_22E73102C(_DWORD *a1, unint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned __int8 *v4;
  unint64_t v5;
  int v6;
  unint64_t first_not_of;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  int v11;
  unint64_t v12;
  int v13;
  unsigned __int8 *v15;
  unint64_t v16;

  if (!a2)
    return 0;
  if (a2 == 4)
  {
    if (*a1 == 1851878958 || *a1 == 1314999854 || *a1 == 1312902702)
      return 1;
    goto LABEL_11;
  }
  if (a2 != 1)
  {
LABEL_11:
    v3 = *(unsigned __int8 *)a1;
    goto LABEL_12;
  }
  v2 = 0;
  v3 = *(unsigned __int8 *)a1;
  if (v3 == 43 || v3 == 45)
    return v2;
LABEL_12:
  if (v3 == 45 || v3 == 43)
  {
    v4 = (unsigned __int8 *)a1 + 1;
    v5 = a2 - 1;
  }
  else
  {
    v4 = (unsigned __int8 *)a1;
    v5 = a2;
  }
  if (v5 == 4 && (*(_DWORD *)v4 == 1718511918 || *(_DWORD *)v4 == 1718503726 || *(_DWORD *)v4 == 1179535662))
    return 1;
  if (a2 < 2)
    goto LABEL_23;
  if (*(_WORD *)a1 == 28464)
  {
    if (a2 < 3)
      return 0;
    return llvm::StringRef::find_first_not_of() == -1;
  }
  if (*(_WORD *)a1 == 30768)
  {
    if (a2 < 3)
      return 0;
    return llvm::StringRef::find_first_not_of() == -1;
  }
LABEL_23:
  if (!v5)
    goto LABEL_29;
  v2 = 0;
  v6 = *v4;
  if (v6 != 101 && v6 != 69)
  {
    if (v6 == 46 && (v5 == 1 || !memchr("0123456789", (char)v4[1], 0xBuLL)))
      return 0;
LABEL_29:
    first_not_of = llvm::StringRef::find_first_not_of();
    v8 = first_not_of;
    v9 = v5;
    if (first_not_of >= v5)
      first_not_of = v5;
    if (v5 > v8)
    {
      v10 = &v4[first_not_of];
      v11 = v4[first_not_of];
      if (v11 == 101 || v11 == 69)
      {
LABEL_37:
        v12 = v9 + ~first_not_of;
        if (v12)
        {
          v13 = v10[1];
          if (v13 != 45 && v13 != 43)
            return v12 <= llvm::StringRef::find_first_not_of();
          if (--v12)
            return v12 <= llvm::StringRef::find_first_not_of();
        }
        return 0;
      }
      if (v11 != 46)
        return 0;
      v15 = v10 + 1;
      v16 = v5 + ~first_not_of;
      first_not_of = llvm::StringRef::find_first_not_of();
      v9 = v16;
      if (v16 > first_not_of)
      {
        v10 = &v15[first_not_of];
        if ((v15[first_not_of] | 0x20) != 0x65)
          return 0;
        goto LABEL_37;
      }
    }
    return 1;
  }
  return v2;
}

uint64_t sub_22E7312F8(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8;
  BOOL v9;
  int v10;
  unsigned int v11;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[2];
  uint64_t v29;

  v28[0] = a1;
  v28[1] = a2;
  v29 = 0;
  if (a2 == 1)
  {
    v11 = *a1;
    if (v11 <= 0x62)
    {
      if (v11 == 67)
      {
LABEL_58:
        v10 = 4;
        goto LABEL_59;
      }
      if (v11 == 77)
        goto LABEL_37;
      if (v11 != 83)
        goto LABEL_60;
    }
    else
    {
      if (*a1 <= 0x6Cu)
      {
        if (v11 == 99)
        {
          v10 = 3;
        }
        else
        {
          if (v11 != 105)
            goto LABEL_60;
          v10 = 2051;
        }
        goto LABEL_59;
      }
      if (v11 == 109)
      {
        v10 = 5;
        goto LABEL_59;
      }
      if (v11 != 115)
        goto LABEL_60;
    }
    v10 = 1;
    goto LABEL_59;
  }
  if (a2 == 2)
  {
    if (*(_WORD *)a1 == 26985)
    {
      v10 = 2052;
      goto LABEL_59;
    }
    if (*(_WORD *)a1 == 26989)
    {
      v10 = 2053;
      goto LABEL_59;
    }
    if (*(_WORD *)a1 != 28013)
    {
      if (*(_WORD *)a1 != 25443 && *(_WORD *)a1 != 28771)
        goto LABEL_60;
      goto LABEL_58;
    }
LABEL_37:
    v10 = 6;
    goto LABEL_59;
  }
  if (a2 != 3)
    goto LABEL_60;
  v8 = *(_WORD *)a1 == 29537 && a1[2] == 116;
  if (v8 || (*(_WORD *)a1 == 25456 ? (v9 = a1[2] == 109) : (v9 = 0), v9))
  {
    v10 = 512;
LABEL_59:
    LODWORD(v29) = v10;
    BYTE4(v29) = 1;
    goto LABEL_60;
  }
  if (*(_WORD *)a1 == 30051 && a1[2] == 105)
  {
    v10 = 2057;
    goto LABEL_59;
  }
  if (*(_WORD *)a1 == 26989 && a1[2] == 105)
  {
    v10 = 2054;
    goto LABEL_59;
  }
  if (*(_WORD *)a1 == 28771 && a1[2] == 112)
    goto LABEL_58;
  if (*(_WORD *)a1 == 20547 && a1[2] == 80)
    goto LABEL_58;
LABEL_60:
  v16 = sub_22E7315F4((uint64_t)v28, "c++", 3, "cxx", 3, "hpp", 3, a8, "hxx", 3, 4);
  v17 = sub_22F2AC2D4(v16, "cppm", 4, 4);
  v18 = sub_22F2AC2D4(v17, "iim", 3, 2052);
  v19 = sub_22F2AC2D4(v18, "cl", 2, 7);
  v20 = sub_22F2AC2D4(v19, "clcpp", 5, 8);
  v21 = sub_22F2AC2D4(v20, "cu", 2, 9);
  v22 = sub_22F2AC2D4(v21, "cuh", 3, 9);
  v23 = sub_22F2AC2D4(v22, "hip", 3, 11);
  v24 = sub_22F2AC2D4(v23, "ll", 2, 2);
  v25 = sub_22F2AC2D4(v24, "bc", 2, 2);
  v26 = sub_22F2AC2D4(v25, "metal", 5, 13);
  if (*(_BYTE *)(v26 + 20))
    return *(unsigned int *)(v26 + 16);
  else
    return 0;
}

uint64_t sub_22E7315F4(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5, const void *a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, int a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v15 = sub_22F2AC2D4(a1, a2, a3, a11);
  v16 = sub_22F2AC2D4(v15, a4, a5, a11);
  v17 = sub_22F2AC2D4(v16, a6, a7, a11);
  return sub_22F2AC2D4(v17, a9, a10, a11);
}

llvm *sub_22E731670(llvm *a1, uint64_t a2, char a3, const void *a4, size_t a5, int a6, int a7)
{
  uint64_t v13;
  llvm *result;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  char v18;
  unsigned __int8 *p_dst;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  size_t size;
  int v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  void **v33;
  char v34;
  BOOL v35;
  void *v36;
  size_t v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  llvm *v42;
  llvm *v43;
  std::string v44;
  unsigned __int8 *__dst;
  size_t v46;
  unint64_t v47;
  __int16 v48;
  std::error_code v49;

  v13 = (uint64_t)a1;
  result = (llvm *)llvm::errs(a1);
  if (a7)
  {
    if (*(_DWORD *)(a2 + 12) == 2)
      result = (llvm *)llvm::errs(result);
    else
      result = (llvm *)llvm::outs(result);
  }
  v15 = result;
  if (!a5)
    goto LABEL_38;
  v49.__val_ = 0;
  v49.__cat_ = std::system_category();
  v16 = (llvm::raw_ostream *)operator new();
  if (a4)
  {
    v41 = a2;
    if (a5 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v17 = v13;
    v18 = a3;
    if (a5 >= 0x17)
    {
      v20 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a5 | 7) != 0x17)
        v20 = a5 | 7;
      v21 = v20 + 1;
      p_dst = (unsigned __int8 *)operator new(v20 + 1);
      v46 = a5;
      v47 = v21 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v47) = a5;
      p_dst = (unsigned __int8 *)&__dst;
    }
    memmove(p_dst, a4, a5);
    p_dst[a5] = 0;
    a3 = v18;
    v13 = v17;
    a2 = v41;
  }
  else
  {
    __dst = 0;
    v46 = 0;
    v47 = 0;
  }
  llvm::raw_fd_ostream::raw_fd_ostream();
  if (SHIBYTE(v47) < 0)
    operator delete(__dst);
  if (v49.__val_)
  {
    v22 = *(_QWORD *)(v13 + 48);
    *(_QWORD *)(v22 + 312) = 0x36B00000000;
    if (*(char *)(v22 + 311) < 0)
    {
      **(_BYTE **)(v22 + 288) = 0;
      *(_QWORD *)(v22 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v22 + 288) = 0;
      *(_BYTE *)(v22 + 311) = 0;
    }
    __dst = (unsigned __int8 *)(v22 + 320);
    v46 = 0;
    v47 = v22;
    v48 = 1;
    *(_BYTE *)(v22 + 320) = 0;
    *(_DWORD *)(v22 + 664) = 0;
    v24 = *(unsigned int *)(v22 + 776);
    if ((_DWORD)v24)
    {
      v25 = *(_QWORD *)(v22 + 768);
      v26 = 56 * v24;
      do
      {
        if (*(char *)(v25 + v26 - 9) < 0)
          operator delete(*(void **)(v25 + v26 - 32));
        v26 -= 56;
      }
      while (v26);
    }
    *(_DWORD *)(v22 + 776) = 0;
    std::error_code::message(&v44, &v49);
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &v44;
    else
      v27 = (std::string *)v44.__r_.__value_.__r.__words[0];
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v44.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v44.__r_.__value_.__l.__size_;
    sub_22E3B89A8(&__dst, v27, size);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    sub_22E3BB0B8((uint64_t)&__dst);
    result = (llvm *)(*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)v16 + 8))(v16);
LABEL_38:
    v23 = 0;
    goto LABEL_39;
  }
  if (*((_QWORD *)v16 + 4) != *((_QWORD *)v16 + 2))
    llvm::raw_ostream::flush_nonempty(v16);
  result = (llvm *)llvm::raw_ostream::SetBufferAndMode();
  v23 = 1;
  v15 = v16;
LABEL_39:
  v29 = *(_DWORD *)(a2 + 4);
  if (v29 == 2)
  {
    v30 = operator new();
    v31 = *(_QWORD *)(v13 + 88);
    *(_QWORD *)v30 = &off_24FA70C30;
    *(_QWORD *)(v30 + 8) = v31;
    *(_QWORD *)(v30 + 16) = v15;
    *(_BYTE *)(v30 + 24) = v23;
    *(_QWORD *)(v30 + 32) = v30 + 48;
    *(_QWORD *)(v30 + 40) = 0x1000000000;
    v42 = (llvm *)v30;
    sub_22F2968D4(v13, (uint64_t *)&v42);
    result = v42;
    v42 = 0;
    if (result)
      return (llvm *)(*(uint64_t (**)(llvm *))(*(_QWORD *)result + 8))(result);
  }
  else if (v29 == 1)
  {
    v32 = *(void ***)(a2 + 96);
    v33 = *(void ***)(a2 + 104);
    while (v32 != v33)
    {
      v34 = *((_BYTE *)v32 + 23);
      v35 = v34 < 0;
      if (v34 >= 0)
        v36 = v32;
      else
        v36 = *v32;
      v37 = v34 & 0x7F;
      if (v35)
        v38 = (size_t)v32[1];
      else
        v38 = v37;
      sub_22E731A44(v15, v36, v38, a6, 2, a7);
      v32 += 4;
    }
    v39 = operator new();
    v40 = *(_QWORD *)(v13 + 88);
    *(_QWORD *)v39 = &off_24FA70AB8;
    *(_QWORD *)(v39 + 8) = v40;
    *(_QWORD *)(v39 + 16) = v15;
    *(_QWORD *)(v39 + 24) = a2;
    *(_DWORD *)(v39 + 32) = 0;
    *(_BYTE *)(v39 + 36) = 0;
    *(_BYTE *)(v39 + 37) = v23;
    *(_BYTE *)(v39 + 38) = a3;
    *(_BYTE *)(v39 + 39) = a6;
    *(_BYTE *)(v39 + 40) = a7;
    v43 = (llvm *)v39;
    sub_22F2968D4(v13, (uint64_t *)&v43);
    result = v43;
    v43 = 0;
    if (result)
      return (llvm *)(*(uint64_t (**)(llvm *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_22E731A44(llvm::raw_ostream *this, void *__src, size_t __n, int a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  size_t v16;
  void *v17;
  size_t v18;
  uint64_t v19;
  size_t v20;
  char v21[256];
  void *v22;
  __int128 v23;
  _QWORD v24[65];

  v24[64] = *MEMORY[0x24BDAC8D0];
  v22 = v24;
  v23 = xmmword_22F45DFC0;
  if (__n < 0x201)
  {
    v12 = 0;
    if (!__n)
      goto LABEL_4;
    goto LABEL_3;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  v12 = v23;
  if (__n)
  {
LABEL_3:
    memcpy((char *)v22 + v12, __src, __n);
    v12 = v23;
  }
LABEL_4:
  *(_QWORD *)&v23 = v12 + __n;
  if ((a6 & 1) != 0)
  {
    qmemcpy(v21, "Note: including file:", 21);
    v13 = 21;
  }
  else
  {
    sub_22F41090C((uint64_t)&v22);
    v13 = 0;
  }
  v19 = v13;
  if (!a4)
    goto LABEL_20;
  v14 = a5 - 1;
  if (a5 == 1)
  {
    if ((a6 & 1) != 0)
      goto LABEL_20;
    goto LABEL_17;
  }
  if (a6)
    v15 = 32;
  else
    v15 = 46;
  do
  {
    if ((unint64_t)(v13 + 1) > 0x100)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v13 = v19;
    }
    v21[v13] = v15;
    v13 = ++v19;
    --v14;
  }
  while (v14);
  if ((a6 & 1) == 0)
  {
LABEL_17:
    if ((unint64_t)(v13 + 1) > 0x100)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v13 = v19;
    }
    v21[v13] = 32;
    v13 = ++v19;
  }
LABEL_20:
  v17 = v22;
  v16 = v23;
  if ((unint64_t)(v23 + v13) <= 0x100)
  {
    if (!(_QWORD)v23)
      goto LABEL_23;
    goto LABEL_22;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  v13 = v19;
  if (v16)
  {
LABEL_22:
    memcpy(&v21[v13], v17, v16);
    v13 = v19;
  }
LABEL_23:
  v18 = v13 + v16;
  v20 = v18;
  if (v18 + 1 > 0x100)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v18 = v20;
  }
  v21[v18] = 10;
  llvm::raw_ostream::write(this, v21);
  if (*((_QWORD *)this + 4) != *((_QWORD *)this + 2))
    llvm::raw_ostream::flush_nonempty(this);
  if (v22 != v24)
    free(v22);
}

uint64_t sub_22E731D18(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24FA70AB8;
  if (*(_BYTE *)(a1 + 37))
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_22E731D60(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = &off_24FA70AB8;
  if (*(_BYTE *)(a1 + 37))
  {
    v1 = *(_QWORD *)(a1 + 16);
    if (v1)
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E731DB8(uint64_t a1, int a2, int a3, int a4)
{
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  BOOL v18;
  size_t v19;
  BOOL v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  size_t v25;
  size_t v26;
  char *__s;

  sub_22F1E2F68(*(_QWORD *)(a1 + 8), a2, 1, (uint64_t)&__s);
  v7 = __s;
  if (!__s)
    return;
  if (a3 != 1)
  {
    if (a3)
      return;
    v8 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v8 + 1;
    if (*(_BYTE *)(a1 + 36))
    {
      v9 = *(_QWORD *)(a1 + 24);
      if (*(char *)(v9 + 143) < 0)
        v10 = *(_QWORD *)(v9 + 128);
      else
        v10 = *(unsigned __int8 *)(v9 + 143);
      if (v10)
        v8 += 2;
      else
        ++v8;
      if ((*(_BYTE *)v9 & 1) == 0)
      {
        LOBYTE(v17) = 1;
        goto LABEL_27;
      }
    }
    else
    {
      if (*(_BYTE *)(a1 + 38))
        v16 = (v8 + 1) > 2;
      else
        v16 = 0;
      v17 = v16;
      if ((**(_BYTE **)(a1 + 24) & 1) == 0)
      {
LABEL_27:
        v18 = a4 == 3 || a4 == 0;
        if (!v18 || (v17 & 1) == 0)
          return;
        goto LABEL_33;
      }
      if (!v17)
        return;
    }
LABEL_33:
    v19 = strlen(v7);
    if (v19 != 14
      || (*(_QWORD *)v7 == 0x646E616D6D6F633CLL ? (v20 = *(_QWORD *)(v7 + 6) == 0x3E656E696C20646ELL) : (v20 = 0), !v20))
    {
      sub_22E731A44(*(llvm::raw_ostream **)(a1 + 16), v7, v19, *(unsigned __int8 *)(a1 + 39), v8, *(unsigned __int8 *)(a1 + 40));
    }
    return;
  }
  v11 = *(_DWORD *)(a1 + 32);
  if (v11)
  {
    v12 = v11 - 1;
    *(_DWORD *)(a1 + 32) = v12;
    if (v12 == 1 && !*(_BYTE *)(a1 + 36))
    {
      v13 = *(_QWORD *)(a1 + 24);
      v14 = *(unsigned __int8 *)(v13 + 143);
      if (*(char *)(v13 + 143) < 0)
        v15 = *(_QWORD *)(v13 + 128);
      else
        v15 = *(unsigned __int8 *)(v13 + 143);
      if (v15)
      {
        v23 = *(void **)(v13 + 120);
        v21 = (_QWORD *)(v13 + 120);
        v22 = v23;
        if ((v14 & 0x80u) == 0)
          v24 = v21;
        else
          v24 = v22;
        v25 = v21[1];
        if ((v14 & 0x80u) == 0)
          v26 = v14;
        else
          v26 = v25;
        sub_22E731A44(*(llvm::raw_ostream **)(a1 + 16), v24, v26, *(unsigned __int8 *)(a1 + 39), 2, *(unsigned __int8 *)(a1 + 40));
      }
      *(_BYTE *)(a1 + 36) = 1;
    }
  }
}

void sub_22E731F60(uint64_t a1, unint64_t *a2, uint64_t a3, int a4)
{
  unint64_t v4;
  size_t *v5;
  uint64_t v6;

  if ((**(_BYTE **)(a1 + 24) & 0x40) != 0 && ((**(_BYTE **)(a1 + 24) & 1) != 0 || a4 == 3 || !a4))
  {
    v4 = *a2;
    do
    {
      v5 = (size_t *)v4;
      v6 = *(_QWORD *)(v4 + 8);
      if ((v6 & 2) == 0)
        break;
      v4 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v4);
    sub_22E731A44(*(llvm::raw_ostream **)(a1 + 16), v5 + 4, *v5, *(unsigned __int8 *)(a1 + 39), *(_DWORD *)(a1 + 32) + 1, *(unsigned __int8 *)(a1 + 40));
  }
}

uint64_t sub_22E731FB8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24FA70C30;
  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  sub_22E3B9848((char **)(a1 + 32));
  return a1;
}

void sub_22E732008(uint64_t a1)
{
  sub_22E731FB8(a1);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E73202C(uint64_t a1, int a2, int a3, int a4, unsigned int a5)
{
  _DWORD *v9;
  uint64_t v10;
  unsigned int v11;
  char *v12;
  BOOL v13;
  size_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  void *__p[2];
  unint64_t v23;
  char *__s;

  if (a5)
  {
    v9 = sub_22E49F3DC(*(_QWORD **)(a1 + 8), a5);
    if (v9)
    {
      v10 = *v9 & 0x7FFFFFFF;
      if (!a4)
        return;
    }
    else
    {
      v10 = 0;
      if (!a4)
        return;
    }
    if (a4 != 3)
    {
      if (!v10 || (v11 = sub_22F1E361C(*(_QWORD **)(a1 + 8), v10), v11 == 3) || !v11)
      {
        sub_22F1E2F68(*(_QWORD *)(a1 + 8), a2, 1, (uint64_t)&__s);
        if (!a3)
        {
          v12 = __s;
          if (__s)
          {
            if (strlen(__s) != 14
              || (*(_QWORD *)__s == 0x646E616D6D6F633CLL
                ? (v13 = *(_QWORD *)(__s + 6) == 0x3E656E696C20646ELL)
                : (v13 = 0),
                  !v13))
            {
              v14 = strlen(__s);
              if (v14 >= 0x7FFFFFFFFFFFFFF8)
                abort();
              v15 = (void *)v14;
              if (v14 >= 0x17)
              {
                v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v14 | 7) != 0x17)
                  v17 = v14 | 7;
                v18 = v17 + 1;
                v16 = operator new(v17 + 1);
                __p[1] = v15;
                v23 = v18 | 0x8000000000000000;
                __p[0] = v16;
              }
              else
              {
                HIBYTE(v23) = v14;
                v16 = __p;
                if (!v14)
                {
LABEL_26:
                  *((_BYTE *)v15 + (_QWORD)v16) = 0;
                  v19 = sub_22E3B9688(a1 + 32, (unint64_t)__p, 1);
                  v20 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 40);
                  v21 = *(_OWORD *)v19;
                  *(_QWORD *)(v20 + 16) = *(_QWORD *)(v19 + 16);
                  *(_OWORD *)v20 = v21;
                  *(_QWORD *)(v19 + 8) = 0;
                  *(_QWORD *)(v19 + 16) = 0;
                  *(_QWORD *)v19 = 0;
                  ++*(_DWORD *)(a1 + 40);
                  if (SHIBYTE(v23) < 0)
                    operator delete(__p[0]);
                  return;
                }
              }
              memmove(v16, v12, (size_t)v15);
              goto LABEL_26;
            }
          }
        }
      }
    }
  }
}

void sub_22E7321F0(uint64_t a1, unint64_t *a2, int *a3, int a4)
{
  unsigned int v6;
  BOOL v7;
  unint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  unint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  void *__dst[2];
  unint64_t v21;

  if (a4 && a4 != 3)
  {
    if (!*a3
      || ((v6 = sub_22F1E361C(*(_QWORD **)(a1 + 8), *a3), v6 != 3) ? (v7 = v6 == 0) : (v7 = 1), v7))
    {
      v8 = *a2;
      do
      {
        v9 = (unint64_t *)v8;
        v10 = *(_QWORD *)(v8 + 8);
        if ((v10 & 2) == 0)
          break;
        v8 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while (v8);
      v13 = *v9;
      v11 = v9 + 4;
      v12 = v13;
      if (v13 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v12 >= 0x17)
      {
        v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v15 = v12 | 7;
        v16 = v15 + 1;
        v14 = (void **)operator new(v15 + 1);
        __dst[1] = (void *)v12;
        v21 = v16 | 0x8000000000000000;
        __dst[0] = v14;
      }
      else
      {
        HIBYTE(v21) = v12;
        v14 = __dst;
        if (!v12)
        {
LABEL_20:
          *((_BYTE *)v14 + v12) = 0;
          v17 = sub_22E3B9688(a1 + 32, (unint64_t)__dst, 1);
          v18 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 40);
          v19 = *(_OWORD *)v17;
          *(_QWORD *)(v18 + 16) = *(_QWORD *)(v17 + 16);
          *(_OWORD *)v18 = v19;
          *(_QWORD *)(v17 + 8) = 0;
          *(_QWORD *)(v17 + 16) = 0;
          *(_QWORD *)v17 = 0;
          ++*(_DWORD *)(a1 + 40);
          if (SHIBYTE(v21) < 0)
            operator delete(__dst[0]);
          return;
        }
      }
      memmove(v14, v11, v12);
      goto LABEL_20;
    }
  }
}

void sub_22E732330(uint64_t a1)
{
  unint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  const void *v5;
  size_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  const void **v14;
  uint64_t v15;
  char v16;
  BOOL v17;
  const void *v18;
  size_t v19;
  size_t v20;
  char v21;
  __int128 v22;
  llvm::raw_fd_ostream *v23;
  char v24;
  void **v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  char v33;
  uint64_t v34;
  int v35;
  void **v36;
  void *v37[2];
  uint64_t v38;
  void *__p[2];
  const void *v40;
  void *v41[2];
  _QWORD v42[20];
  char v43;
  char *__s;
  __int128 v45;
  _BYTE v46[256];
  _BYTE v47[32];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(sub_22E6155EC(*(_QWORD **)(a1 + 8), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 344)) + 88);
  do
  {
    v3 = (unint64_t *)v2;
    v4 = *(_QWORD *)(v2 + 8);
    if ((v4 & 2) == 0)
      break;
    v2 = v4 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while (v2);
  v7 = *v3;
  v5 = v3 + 4;
  v6 = v7;
  __s = v46;
  v45 = xmmword_22F44E320;
  if (v7 >= 0x101)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v10 = __s;
    v8 = v45;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = v46;
    if (!v6)
      goto LABEL_7;
  }
  memcpy(&v10[v8], v5, v6);
  v9 = v45;
LABEL_7:
  *(_QWORD *)&v45 = v9 + v6;
  sub_22F1D1908(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), (void **)&__s);
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  v29 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 1;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  v28 = MEMORY[0x24BED83D8] + 16;
  v36 = v37;
  llvm::raw_ostream::SetBufferAndMode();
  v41[0] = v42;
  v42[17] = 0;
  v42[18] = &v28;
  v42[16] = 0;
  v42[0] = 0;
  v42[19] = 0;
  v43 = 0;
  v41[1] = (void *)0x1000000001;
  llvm::json::OStream::objectBegin((llvm::json::OStream *)v41);
  v11 = v45;
  if ((unint64_t)(v45 + 1) > *((_QWORD *)&v45 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v11 = v45;
  }
  __s[v11] = 0;
  if (__s)
    v12 = strlen(__s);
  else
    v12 = 0;
  sub_22E732740((llvm::json::Value *)&v48, (uint64_t)__s, v12);
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::value((llvm::json::OStream *)v41, (const llvm::json::Value *)&v48);
  llvm::json::OStream::attributeEnd((llvm::json::OStream *)v41);
  llvm::json::Value::destroy((llvm::json::Value *)&v48);
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::arrayBegin((llvm::json::OStream *)v41);
  v48 = 0;
  v49 = 0;
  v50 = 0x800000000;
  v13 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v13)
  {
    v14 = *(const void ***)(a1 + 32);
    v15 = 24 * v13;
    do
    {
      v16 = *((_BYTE *)v14 + 23);
      v17 = v16 < 0;
      if (v16 >= 0)
        v18 = v14;
      else
        v18 = *v14;
      v19 = v16 & 0x7F;
      if (v17)
        v20 = (size_t)v14[1];
      else
        v20 = v19;
      sub_22E3B39D4((llvm::StringMapImpl *)&v48, v18, v20);
      if ((v21 & 1) != 0)
      {
        if (*((char *)v14 + 23) < 0)
        {
          sub_22E3BB2B4(__p, (void *)*v14, (unint64_t)v14[1]);
        }
        else
        {
          v22 = *(_OWORD *)v14;
          v40 = v14[2];
          *(_OWORD *)__p = v22;
        }
        sub_22E732810((uint64_t)v47, (__int128 *)__p);
        llvm::json::OStream::value((llvm::json::OStream *)v41, (const llvm::json::Value *)v47);
        llvm::json::Value::destroy((llvm::json::Value *)v47);
        if (SHIBYTE(v40) < 0)
          operator delete(__p[0]);
      }
      v14 += 3;
      v15 -= 24;
    }
    while (v15);
  }
  sub_22E3B3AD0((uint64_t)&v48);
  llvm::json::OStream::arrayEnd((llvm::json::OStream *)v41);
  llvm::json::OStream::attributeEnd((llvm::json::OStream *)v41);
  llvm::json::OStream::objectEnd((llvm::json::OStream *)v41);
  if (v31 == v32)
    llvm::raw_ostream::write((llvm::raw_ostream *)&v28, "\n");
  else
    *v32++ = 10;
  v23 = *(llvm::raw_fd_ostream **)(a1 + 16);
  if (*((_DWORD *)v23 + 2) == 1)
  {
    llvm::raw_fd_ostream::lock(v23);
    v24 = v49;
    if ((v49 & 1) == 0)
    {
      if (v38 >= 0)
        v25 = v37;
      else
        v25 = (void **)v37[0];
      llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), (const char *)v25);
      v24 = v49;
    }
    if ((v24 & 1) != 0)
    {
      v27 = v48;
      v48 = 0;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    else if ((_DWORD)v48 != -1)
    {
      llvm::sys::fs::unlockFile((llvm::sys::fs *)v48);
    }
  }
  else
  {
    if (v38 >= 0)
      v26 = v37;
    else
      v26 = (void **)v37[0];
    llvm::raw_ostream::write(v23, (const char *)v26);
  }
  if (v41[0] != v42)
    free(v41[0]);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v28);
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
  if (__s != v46)
    free(__s);
}

llvm::json::Value *sub_22E732740(llvm::json::Value *a1, uint64_t a2, uint64_t a3)
{
  __int128 __p;
  char v6;
  _BYTE v7[32];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_WORD *)a1 = 5;
  *((_QWORD *)a1 + 1) = a2;
  *((_QWORD *)a1 + 2) = a3;
  if ((llvm::json::isUTF8() & 1) == 0)
  {
    llvm::json::fixUTF8();
    sub_22E732810((uint64_t)v7, &__p);
    llvm::json::Value::destroy(a1);
    llvm::json::Value::moveFrom();
    llvm::json::Value::destroy((llvm::json::Value *)v7);
    if (v6 < 0)
      operator delete((void *)__p);
  }
  return a1;
}

uint64_t sub_22E732810(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v6;
  uint64_t v7;

  *(_WORD *)a1 = 6;
  if ((llvm::json::isUTF8() & 1) == 0)
  {
    llvm::json::fixUTF8();
    if (*((char *)a2 + 23) < 0)
      operator delete(*(void **)a2);
    *a2 = v6;
    *((_QWORD *)a2 + 2) = v7;
  }
  v4 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v4;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  return a1;
}

uint64_t sub_22E7328CC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2 != (void *)(a1 + 48))
    free(v2);
  return a1;
}

void sub_22E732900(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2 != (void *)(a1 + 48))
    free(v2);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E732944(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  const char *v20;
  uint64_t v21;
  int v22;
  _OWORD v23[2];
  __int128 v24;
  const char *v25;
  char v26;
  __int128 v27;
  _BYTE v28[20];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 88))
  {
    v27 = 0uLL;
    *(_QWORD *)v28 = "<built-in>";
    *(_QWORD *)&v28[8] = 10;
    return sub_22F423810(*(_QWORD **)(a2 + 88), (uint64_t)&v27, 0, 0, 0, 0);
  }
  v4 = *(_QWORD *)(a2 + 88);
  v5 = sub_22E49F3DC((_QWORD *)v4, *(_DWORD *)(v4 + 344));
  if (v5)
    v6 = *v5 & 0x7FFFFFFF;
  else
    v6 = 0;
  v27 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)v28 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)&v28[12] = 0;
  *(_DWORD *)&v28[8] = v6;
  v8 = sub_22E7330A0((uint64_t *)(a1 + 32), (unint64_t)&v27);
  v9 = *(_QWORD *)(a1 + 32) + 40 * *(unsigned int *)(a1 + 40);
  v10 = *(_QWORD *)(v9 - 40);
  v9 -= 40;
  v11 = *(unsigned int *)(v9 + 28);
  *(_DWORD *)(v9 + 28) = v11 + 1;
  (*(void (**)(uint64_t, _QWORD, uint64_t, __n128))(*(_QWORD *)v10 + 72))(v10, *(_QWORD *)(v9 + 16), v11 + 1, v8);
  sub_22F2AC4C8((uint64_t)&v24);
  if ((v26 & 1) != 0)
  {
    v14 = v24;
    *(_QWORD *)&v24 = 0;
    *(_QWORD *)&v19 = v14;
    sub_22E733148(a1, *(_QWORD *)(a2 + 48), (char **)&v19);
    v27 = 0uLL;
    *(_QWORD *)v28 = "<built-in>";
    *(_QWORD *)&v28[8] = 10;
    v7 = sub_22F423810(*(_QWORD **)(a2 + 88), (uint64_t)&v27, 0, 0, 0, 0);
    v16 = v19;
    if (!(_QWORD)v19)
      goto LABEL_16;
    goto LABEL_13;
  }
  sub_22F2AC420((uint64_t)&v27, &v24);
  if ((v28[16] & 1) == 0)
  {
    v23[0] = *(_OWORD *)v28;
    v23[1] = v27;
    v7 = sub_22F423810((_QWORD *)v4, (uint64_t)v23, 0, 0, 0, 0);
    v19 = v24;
    v20 = v25;
    v12 = sub_22E49F3DC((_QWORD *)v4, v7);
    if (v12)
      v13 = *v12 & 0x7FFFFFFF;
    else
      v13 = 0;
    v22 = 0;
    v21 = v13;
    v15 = sub_22E7330A0((uint64_t *)(a1 + 32), (unint64_t)&v19);
    goto LABEL_16;
  }
  *(_QWORD *)&v23[0] = v27;
  sub_22E733148(a1, *(_QWORD *)(a2 + 48), (char **)v23);
  v19 = 0uLL;
  v20 = "<built-in>";
  v21 = 10;
  v7 = sub_22F423810(*(_QWORD **)(a2 + 88), (uint64_t)&v19, 0, 0, 0, 0);
  v16 = *(_QWORD *)&v23[0];
  if (*(_QWORD *)&v23[0])
LABEL_13:
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
LABEL_16:
  if ((v26 & 1) != 0)
  {
    v17 = v24;
    *(_QWORD *)&v24 = 0;
    if (v17)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v17 + 8))(v17, v15);
  }
  return v7;
}

uint64_t sub_22E732BE4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  if (*(_BYTE *)(a1 + 88))
    return 0;
  v2 = *(_QWORD *)(a1 + 32) + 40 * *(unsigned int *)(a1 + 40);
  v3 = *(unsigned int *)(v2 - 8);
  *(_DWORD *)(v2 - 8) = v3 + 1;
  return sub_22F1940DC((_QWORD *)(v2 - 40), v3);
}

uint64_t sub_22E732C18(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  const void *v24;
  size_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _QWORD v54[3];
  char v55;
  __int128 v56;
  uint64_t v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 88))
    goto LABEL_6;
  v8 = (uint64_t *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 32) + 40 * *(unsigned int *)(a1 + 40);
  v10 = *(unsigned int *)(v9 - 12);
  if ((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v9 - 40) + 80))(*(_QWORD *)(v9 - 40), *(_QWORD *)(v9 - 24))- 1 <= v10)goto LABEL_6;
  v11 = *(unsigned int *)(v9 - 12);
  v12 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v9 - 40) + 88))(*(_QWORD *)(v9 - 40), *(_QWORD *)(v9 - 24), 0);
  v14 = 4;
  if (v13 < 4)
    v14 = v13;
  if (*(_DWORD *)(v9 - 16) + *(_DWORD *)(v12 + v14 + 4 * v11) == a4)
  {
    v19 = *(unsigned int *)(v9 - 12);
    *(_DWORD *)(v9 - 12) = v19 + 1;
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v9 - 40) + 72))(*(_QWORD *)(v9 - 40), *(_QWORD *)(v9 - 24), v19 + 1);
    sub_22F2AC4C8((uint64_t)&v56);
    if ((v58 & 1) != 0)
    {
      v20 = v56;
      *(_QWORD *)&v56 = 0;
      *(_QWORD *)&v43 = v20;
      sub_22E733148(a1, *(_QWORD *)(a2 + 48), (char **)&v43);
      if ((_QWORD)v43)
        (*(void (**)(_QWORD))(*(_QWORD *)v43 + 8))(v43);
      v15 = 0;
      LOBYTE(v16) = 0;
      v17 = 0;
    }
    else
    {
      sub_22F2A99C4(&v56, (uint64_t)v54);
      if ((v55 & 1) != 0)
      {
        v37 = v54[0];
        v54[0] = 0;
        *(_QWORD *)&v43 = v37;
        sub_22E733148(a1, *(_QWORD *)(a2 + 48), (char **)&v43);
        if ((_QWORD)v43)
          (*(void (**)(_QWORD))(*(_QWORD *)v43 + 8))(v43);
        v15 = 0;
        LOBYTE(v16) = 0;
        v17 = 0;
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)v54[0] + 72))(v54[0], v54[2], 0);
        llvm::cas::ObjectStore::getProxy();
        if ((v53 & 1) != 0)
        {
          v38 = v51;
          v51 = 0;
          *(_QWORD *)&v43 = v38;
          sub_22E733148(a1, *(_QWORD *)(a2 + 48), (char **)&v43);
          if ((_QWORD)v43)
            (*(void (**)(_QWORD))(*(_QWORD *)v43 + 8))(v43);
          v15 = 0;
          LOBYTE(v16) = 0;
          v17 = 0;
        }
        else
        {
          v22 = *(_QWORD **)(a2 + 88);
          v23 = v22[2];
          v24 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v51 + 88))(v51, v52, 0);
          sub_22F1D0894(v23, v24, v25, 1, 1, (uint64_t)&v49);
          if ((v50 & 1) != 0)
          {
            v39 = v49;
            v49 = 0;
            *(_QWORD *)&v43 = v39;
            sub_22E733148(a1, *(_QWORD *)(a2 + 48), (char **)&v43);
            if ((_QWORD)v43)
              (*(void (**)(_QWORD))(*(_QWORD *)v43 + 8))(v43);
            v15 = 0;
            LOBYTE(v16) = 0;
            v17 = 0;
          }
          else
          {
            v26 = v49;
            v27 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)v56 + 88))(v56, v57, 0);
            v29 = 4;
            if (v28 < 4)
              v29 = v28;
            v30 = v27 + v29;
            v31 = v28 - v29;
            v32 = 4 * (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v56 + 80))(v56, v57) - 4;
            if (v31 < v32)
              v32 = v31;
            v16 = sub_22F1E170C((uint64_t)v22, v26, a3, *(char *)(v30 + v32), 0, 0);
            v33 = v49;
            do
            {
              v34 = *(_QWORD *)(v33 + 8);
              v33 = v34 & 0xFFFFFFFFFFFFFFFCLL;
            }
            while ((v34 & 2) != 0 && v33);
            v48 = v34 & 0xFFFFFFFFFFFFFFFCLL;
            sub_22F13B0E4(*(_QWORD **)(a2 + 104), v33);
            sub_22E67A2B0((_DWORD *)(a2 + 1592), &v48, (uint64_t)&v43);
            v43 = v56;
            v44 = v57;
            v35 = sub_22E49F3DC(v22, v16);
            if (v35)
              v36 = *v35 & 0x7FFFFFFF;
            else
              v36 = 0;
            v46 = 0;
            v47 = 0;
            v45 = v36;
            sub_22E7330A0(v8, (unint64_t)&v43);
            v17 = v16 & 0xFFFFFF00;
            v15 = 0x100000000;
          }
          if ((v50 & 1) != 0)
          {
            v40 = v49;
            v49 = 0;
            if (v40)
              (*(void (**)(unint64_t))(*(_QWORD *)v40 + 8))(v40);
          }
        }
        if ((v53 & 1) != 0)
        {
          v41 = v51;
          v51 = 0;
          if (v41)
            (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
        }
      }
      if ((v55 & 1) != 0)
      {
        v42 = v54[0];
        v54[0] = 0;
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      }
    }
    if ((v58 & 1) != 0)
    {
      v21 = v56;
      *(_QWORD *)&v56 = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    }
  }
  else
  {
LABEL_6:
    v15 = 0;
    LOBYTE(v16) = 0;
    v17 = 0;
  }
  return v15 & 0x100000000 | v17 | v16;
}

uint64_t sub_22E733084(uint64_t result)
{
  if (!*(_BYTE *)(result + 88))
    --*(_DWORD *)(result + 40);
  return result;
}

__n128 sub_22E7330A0(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  __int128 v8;
  unint64_t v9;
  unint64_t v11;

  v2 = a2;
  v4 = *((_DWORD *)a1 + 2);
  v5 = *a1;
  if (v4 >= *((_DWORD *)a1 + 3))
  {
    v9 = v5 + 40 * v4;
    if (v5 <= a2 && v9 > a2)
    {
      v11 = a2 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v5 = *a1;
      v2 = *a1 + v11;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v5 = *a1;
    }
  }
  v6 = v5 + 40 * *((unsigned int *)a1 + 2);
  result = *(__n128 *)v2;
  v8 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(v6 + 32) = *(_QWORD *)(v2 + 32);
  *(__n128 *)v6 = result;
  *(_OWORD *)(v6 + 16) = v8;
  ++*((_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_22E733148(uint64_t a1, uint64_t a2, char **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *p_p;
  size_t size;
  __n128 v11;
  uint64_t result;
  char *v13;
  std::string __p;
  unsigned __int8 *v15[3];
  __int16 v16;

  *(_QWORD *)(a2 + 312) = 0x33000000000;
  if (*(char *)(a2 + 311) < 0)
  {
    **(_BYTE **)(a2 + 288) = 0;
    *(_QWORD *)(a2 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(a2 + 288) = 0;
    *(_BYTE *)(a2 + 311) = 0;
  }
  v15[0] = (unsigned __int8 *)(a2 + 320);
  v15[1] = 0;
  v15[2] = (unsigned __int8 *)a2;
  v16 = 1;
  *(_BYTE *)(a2 + 320) = 0;
  *(_DWORD *)(a2 + 664) = 0;
  v6 = *(unsigned int *)(a2 + 776);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(a2 + 768);
    v8 = 56 * v6;
    do
    {
      if (*(char *)(v7 + v8 - 9) < 0)
        operator delete(*(void **)(v7 + v8 - 32));
      v8 -= 56;
    }
    while (v8);
  }
  *(_DWORD *)(a2 + 776) = 0;
  v13 = *a3;
  *a3 = 0;
  sub_22F2432A8(&v13, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v11.n128_f64[0] = sub_22E3B89A8(v15, p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v13)
    (*(void (**)(char *, __n128))(*(_QWORD *)v13 + 8))(v13, v11);
  result = sub_22E3BB0B8((uint64_t)v15);
  *(_BYTE *)(a1 + 88) = 1;
  return result;
}

uint64_t sub_22E733274(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  llvm::raw_ostream **v8;
  const char *v9;
  __int16 v10;
  _QWORD v11[4];
  __int16 v12;

  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 520))(*a1, a1[1], a2, a3);
  if ((_DWORD)result)
  {
    v7 = *(_QWORD *)(a1[2] + 56);
    if ((v7 & 0x100000000) != 0 || v7 >= 0x64)
    {
      v8 = (llvm::raw_ostream **)a1[3];
      v12 = 261;
      v11[0] = a2;
      v11[1] = a3;
      v9 = "1";
      v10 = 259;
      return sub_22E7333BC(v8, (llvm::Twine *)v11, (llvm::Twine *)&v9);
    }
  }
  return result;
}

uint64_t sub_22E73330C(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  llvm::raw_ostream **v11;
  const char *v12;
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;

  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 520))(*a1, a1[1], a2, a3);
  if ((_DWORD)result)
  {
    v9 = a1[2];
    v10 = *(_QWORD *)(v9 + 56);
    if ((v10 & 0x100000000) != 0)
    {
      if (*(_DWORD *)(v9 + 64) == 100)
        LODWORD(v10) = 200;
      else
        LODWORD(v10) = 300;
    }
    if (v10 >= a4)
    {
      v11 = (llvm::raw_ostream **)a1[3];
      v15 = 261;
      v14[0] = a2;
      v14[1] = a3;
      v12 = "1";
      v13 = 259;
      return sub_22E7333BC(v11, (llvm::Twine *)v14, (llvm::Twine *)&v12);
    }
  }
  return result;
}

uint64_t sub_22E7333BC(llvm::raw_ostream **a1, llvm::Twine *a2, llvm::Twine *a3)
{
  llvm::raw_ostream *v5;
  _QWORD *v6;
  _BYTE *v7;
  uint64_t result;
  _BYTE *v9;

  v5 = *a1;
  v6 = (_QWORD *)*((_QWORD *)*a1 + 4);
  if (*((_QWORD *)*a1 + 3) - (_QWORD)v6 > 7uLL)
  {
    *v6 = 0x20656E6966656423;
    *((_QWORD *)v5 + 4) += 8;
  }
  else
  {
    v5 = (llvm::raw_ostream *)llvm::raw_ostream::write(*a1, "#define ");
  }
  llvm::Twine::print(a2, v5);
  v7 = (_BYTE *)*((_QWORD *)v5 + 4);
  if ((unint64_t)v7 < *((_QWORD *)v5 + 3))
  {
    *((_QWORD *)v5 + 4) = v7 + 1;
    *v7 = 32;
  }
  else
  {
    v5 = (llvm::raw_ostream *)llvm::raw_ostream::write(v5);
  }
  result = llvm::Twine::print(a3, v5);
  v9 = (_BYTE *)*((_QWORD *)v5 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v5 + 3))
    return llvm::raw_ostream::write(v5);
  *((_QWORD *)v5 + 4) = v9 + 1;
  *v9 = 10;
  return result;
}

void sub_22E7334B0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _QWORD *v12;
  char **p_dst;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  _OWORD *v19;
  char **v20;
  char *v21;
  _QWORD *v22;
  _OWORD *v23;
  char **v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  char **v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  _OWORD *v39;
  char **v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  llvm::raw_ostream *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  int v52;
  int v53;
  uint64_t OSVersion;
  int v55;
  uint64_t v56;
  const char *v57;
  const char *v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  const char *v62;
  __int16 v63;
  int v64;
  int v65;
  const char *v66;
  uint64_t v67;
  llvm::raw_ostream *v68;
  _BYTE *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  BOOL v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  void *v81;
  unint64_t v82;
  size_t v83;
  unint64_t first_of;
  __int16 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  llvm::raw_ostream *v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  llvm::raw_ostream *v97;
  uint64_t *v98;
  char v99;
  BOOL v100;
  unint64_t v101;
  unint64_t v102;
  _BYTE *v103;
  llvm::raw_ostream *v104;
  _BYTE *v105;
  uint64_t v106;
  char v107;
  int v108;
  size_t v109;
  size_t v110;
  const void *v111;
  unsigned __int8 *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  char v121;
  BOOL v122;
  unint64_t v123;
  unint64_t v124;
  char v125;
  char v126;
  std::string *v127;
  size_t size;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  llvm::raw_ostream *v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  unint64_t v137;
  _BYTE *v138;
  char v139;
  uint64_t v140;
  int v141;
  std::string *v142;
  std::string v143;
  char *__dst;
  size_t v145;
  const char *v146;
  uint64_t v147;
  _OWORD *v148;
  char v149;
  uint64_t v150;
  int v151;
  char **v152;
  char *v153;
  unint64_t v154;
  char *v155;
  unint64_t v156;
  char v157;
  char *v158;
  unint64_t v159;
  const char *v160;
  unint64_t v161;
  __int16 v162;

  v7 = a1;
  v8 = a1[7];
  memset(&v143, 0, sizeof(v143));
  std::string::reserve(&v143, 0xFF0uLL);
  v135 = 0;
  v139 = 0;
  v140 = 0;
  v141 = 1;
  v137 = 0;
  v138 = 0;
  v136 = 0;
  v9 = MEMORY[0x24BED83D8];
  v134 = MEMORY[0x24BED83D8] + 16;
  v142 = &v143;
  llvm::raw_ostream::SetBufferAndMode();
  v133 = (llvm::raw_ostream *)&v134;
  if ((*(_BYTE *)(v7[7] + 3) & 0x40) == 0)
  {
    __dst = "# 1 \"<built-in>\" 3";
    LOWORD(v148) = 259;
    llvm::Twine::print((llvm::Twine *)&__dst, (llvm::raw_ostream *)&v134);
    v10 = v138;
    if ((unint64_t)v138 >= v137)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v134);
    }
    else
    {
      ++v138;
      *v10 = 10;
    }
  }
  if (*(_BYTE *)(a2 + 72))
  {
    if ((*(_BYTE *)(v8 + 68) & 0x20) != 0 || (*(_BYTE *)(v8 + 76) & 8) != 0 || (*(_BYTE *)(v8 + 104) & 4) != 0)
    {
      v11 = v7[9];
      if (v11)
        sub_22E7350F4(v11, v8, a4, v7[4], &v133);
    }
    sub_22E7350F4(v7[8], v8, a4, v7[4], &v133);
    if ((~*(_DWORD *)v8 & 0x4100) == 0 && (*(_WORD *)(v8 + 148) & 0xALL) != 0 && *(_DWORD *)(a2 + 252) == 2)
    {
      v12 = &v148;
      __dst = "_GLIBCXX_PREDEFINED_OBJC_ARC_IS_SCALAR";
      LOWORD(v148) = 259;
      v158 = "1";
      v162 = 259;
      sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
      v158 = 0;
      v159 = 0;
      v160 = 0;
      LODWORD(v145) = 0;
      v149 = 0;
      v150 = 0;
      v151 = 1;
      v147 = 0;
      v148 = 0;
      v146 = 0;
      __dst = (char *)(v9 + 16);
      v152 = &v158;
      llvm::raw_ostream::SetBufferAndMode();
      if ((unint64_t)(v147 - (_QWORD)v148) > 0xF)
      {
        *v148 = *(_OWORD *)"namespace std {\n";
        v14 = (char *)++v148;
        p_dst = &__dst;
        v15 = &v148;
      }
      else
      {
        p_dst = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)&__dst, "namespace std {\n");
        v15 = p_dst + 4;
        v14 = p_dst[4];
      }
      if (p_dst[3] == v14)
      {
        p_dst = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)p_dst, "\n");
      }
      else
      {
        *v14 = 10;
        ++*v15;
      }
      v16 = p_dst[4];
      if ((unint64_t)(p_dst[3] - v16) > 0x13)
      {
        *((_DWORD *)v16 + 4) = 171664752;
        *(_OWORD *)v16 = *(_OWORD *)"struct __true_type;\n";
        v17 = p_dst[4] + 20;
        p_dst[4] = v17;
      }
      else
      {
        p_dst = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)p_dst, "struct __true_type;\n");
        v17 = p_dst[4];
      }
      if ((unint64_t)(p_dst[3] - v17) > 0x14)
      {
        qmemcpy(v17, "struct __false_type;\n", 21);
        v18 = p_dst[4] + 21;
        p_dst[4] = v18;
      }
      else
      {
        p_dst = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)p_dst, "struct __false_type;\n");
        v18 = p_dst[4];
      }
      if (p_dst[3] == v18)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)p_dst, "\n");
      }
      else
      {
        *v18 = 10;
        ++p_dst[4];
      }
      v19 = v148;
      if ((unint64_t)(v147 - (_QWORD)v148) > 0x2A)
      {
        *v148 = *(_OWORD *)"template<typename _Tp> struct __is_scalar;\n";
        qmemcpy(v19 + 1, "e _Tp> struct __is_scalar;\n", 27);
        v21 = (char *)v148 + 43;
        v148 = (_OWORD *)((char *)v148 + 43);
        v20 = &__dst;
        v22 = &v148;
      }
      else
      {
        v20 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)&__dst, "template<typename _Tp> struct __is_scalar;\n");
        v22 = v20 + 4;
        v21 = v20[4];
      }
      if (v20[3] == v21)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v20, "\n");
      }
      else
      {
        *v21 = 10;
        ++*v22;
      }
      if ((*(_WORD *)(v8 + 148) & 2) != 0)
      {
        v23 = v148;
        if ((unint64_t)(v147 - (_QWORD)v148) > 0x16)
        {
          *v148 = *(_OWORD *)"template<typename _Tp>\n";
          *(_QWORD *)((char *)v23 + 15) = *(_QWORD *)"me _Tp>\n";
          v25 = (char *)v148 + 23;
          v148 = (_OWORD *)((char *)v148 + 23);
          v24 = &__dst;
          v26 = &v148;
        }
        else
        {
          v24 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)&__dst, "template<typename _Tp>\n");
          v26 = v24 + 4;
          v25 = v24[4];
        }
        if ((unint64_t)(v24[3] - v25) > 0x41)
        {
          qmemcpy(v25, "struct __is_scalar<__attribute__((objc_ownership(strong))) _Tp> {\n", 66);
          *v26 += 66;
        }
        else
        {
          v24 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v24, "struct __is_scalar<__attribute__((objc_ownership(strong))) _Tp> {\n");
        }
        v27 = v24[4];
        if ((unint64_t)(v24[3] - v27) > 0x17)
        {
          qmemcpy(v27, "  enum { __value = 0 };\n", 24);
          v28 = v24[4] + 24;
          v24[4] = v28;
        }
        else
        {
          v24 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v24, "  enum { __value = 0 };\n");
          v28 = v24[4];
        }
        if ((unint64_t)(v24[3] - v28) > 0x1E)
        {
          qmemcpy(v28, "  typedef __false_type __type;\n", 31);
          v29 = (uint64_t)(v24[4] + 31);
          v24[4] = (char *)v29;
        }
        else
        {
          v24 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v24, "  typedef __false_type __type;\n");
          v29 = (uint64_t)v24[4];
        }
        if ((unint64_t)&v24[3][-v29] > 2)
        {
          *(_BYTE *)(v29 + 2) = 10;
          *(_WORD *)v29 = 15229;
          v30 = v24[4] + 3;
          v24[4] = v30;
        }
        else
        {
          v24 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v24, "};\n");
          v30 = v24[4];
        }
        if (v24[3] == v30)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v24, "\n");
        }
        else
        {
          *v30 = 10;
          ++v24[4];
        }
      }
      if ((*(_WORD *)(v8 + 148) & 8) != 0)
      {
        v31 = v148;
        if ((unint64_t)(v147 - (_QWORD)v148) > 0x16)
        {
          *v148 = *(_OWORD *)"template<typename _Tp>\n";
          *(_QWORD *)((char *)v31 + 15) = *(_QWORD *)"me _Tp>\n";
          v33 = (char *)v148 + 23;
          v148 = (_OWORD *)((char *)v148 + 23);
          v32 = &__dst;
          v34 = &v148;
        }
        else
        {
          v32 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)&__dst, "template<typename _Tp>\n");
          v34 = v32 + 4;
          v33 = v32[4];
        }
        if ((unint64_t)(v32[3] - v33) > 0x3F)
        {
          qmemcpy(v33, "struct __is_scalar<__attribute__((objc_ownership(weak))) _Tp> {\n", 64);
          *v34 += 64;
        }
        else
        {
          v32 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v32, "struct __is_scalar<__attribute__((objc_ownership(weak))) _Tp> {\n");
        }
        v35 = v32[4];
        if ((unint64_t)(v32[3] - v35) > 0x17)
        {
          qmemcpy(v35, "  enum { __value = 0 };\n", 24);
          v36 = v32[4] + 24;
          v32[4] = v36;
        }
        else
        {
          v32 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v32, "  enum { __value = 0 };\n");
          v36 = v32[4];
        }
        if ((unint64_t)(v32[3] - v36) > 0x1E)
        {
          qmemcpy(v36, "  typedef __false_type __type;\n", 31);
          v37 = (uint64_t)(v32[4] + 31);
          v32[4] = (char *)v37;
        }
        else
        {
          v32 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v32, "  typedef __false_type __type;\n");
          v37 = (uint64_t)v32[4];
        }
        if ((unint64_t)&v32[3][-v37] > 2)
        {
          *(_BYTE *)(v37 + 2) = 10;
          *(_WORD *)v37 = 15229;
          v38 = v32[4] + 3;
          v32[4] = v38;
        }
        else
        {
          v32 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v32, "};\n");
          v38 = v32[4];
        }
        if (v32[3] == v38)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v32, "\n");
        }
        else
        {
          *v38 = 10;
          ++v32[4];
        }
      }
      if ((*(_WORD *)(v8 + 148) & 2) != 0)
      {
        v39 = v148;
        if ((unint64_t)(v147 - (_QWORD)v148) > 0x16)
        {
          *v148 = *(_OWORD *)"template<typename _Tp>\n";
          *(_QWORD *)((char *)v39 + 15) = *(_QWORD *)"me _Tp>\n";
          v41 = (char *)v148 + 23;
          v148 = (_OWORD *)((char *)v148 + 23);
          v40 = &__dst;
        }
        else
        {
          v40 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)&__dst, "template<typename _Tp>\n");
          v12 = v40 + 4;
          v41 = v40[4];
        }
        if ((unint64_t)(v40[3] - v41) > 0x40)
        {
          qmemcpy(v41, "struct __is_scalar<__attribute__((objc_ownership(autoreleasing)))", 65);
          *v12 += 65;
        }
        else
        {
          v40 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v40, "struct __is_scalar<__attribute__((objc_ownership(autoreleasing)))");
        }
        v42 = v40[4];
        if ((unint64_t)(v40[3] - v42) > 7)
        {
          *(_QWORD *)v42 = 0xA7B203E70545F20;
          v43 = v40[4] + 8;
          v40[4] = v43;
        }
        else
        {
          v40 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v40, " _Tp> {\n");
          v43 = v40[4];
        }
        if ((unint64_t)(v40[3] - v43) > 0x17)
        {
          qmemcpy(v43, "  enum { __value = 0 };\n", 24);
          v44 = v40[4] + 24;
          v40[4] = v44;
        }
        else
        {
          v40 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v40, "  enum { __value = 0 };\n");
          v44 = v40[4];
        }
        if ((unint64_t)(v40[3] - v44) > 0x1E)
        {
          qmemcpy(v44, "  typedef __false_type __type;\n", 31);
          v45 = (uint64_t)(v40[4] + 31);
          v40[4] = (char *)v45;
        }
        else
        {
          v40 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v40, "  typedef __false_type __type;\n");
          v45 = (uint64_t)v40[4];
        }
        if ((unint64_t)&v40[3][-v45] > 2)
        {
          *(_BYTE *)(v45 + 2) = 10;
          *(_WORD *)v45 = 15229;
          v46 = v40[4] + 3;
          v40[4] = v46;
        }
        else
        {
          v40 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v40, "};\n");
          v46 = v40[4];
        }
        if (v40[3] == v46)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v40, "\n");
        }
        else
        {
          *v46 = 10;
          ++v40[4];
        }
      }
      if ((unint64_t)(v147 - (_QWORD)v148) > 1)
      {
        *(_WORD *)v148 = 2685;
        v148 = (_OWORD *)((char *)v148 + 2);
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&__dst, "}\n");
      }
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__dst);
      LOWORD(v148) = 260;
      __dst = (char *)&v158;
      v47 = v133;
      llvm::Twine::print((llvm::Twine *)&__dst, v133);
      v48 = (_BYTE *)*((_QWORD *)v47 + 4);
      if ((unint64_t)v48 >= *((_QWORD *)v47 + 3))
      {
        llvm::raw_ostream::write(v47);
      }
      else
      {
        *((_QWORD *)v47 + 4) = v48 + 1;
        *v48 = 10;
      }
      if (SHIBYTE(v160) < 0)
        operator delete(v158);
    }
  }
  v50 = v7[7];
  v49 = v7[8];
  v131 = (uint64_t)v7;
  v132 = a2;
  v130 = a3;
  if ((*(_WORD *)(v50 + 96) & 0x40) != 0)
  {
    __dst = "__hlsl_clang";
    LOWORD(v148) = 259;
    v158 = "1";
    v162 = 259;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    __dst = "__HLSL_VERSION";
    LOWORD(v148) = 259;
    v52 = (unsigned __int16)(*(_DWORD *)(v50 + 240) >> 13);
    v162 = 264;
    LODWORD(v158) = v52;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    __dst = "__SHADER_STAGE_VERTEX";
    LOWORD(v148) = 259;
    v162 = 264;
    LODWORD(v158) = 1;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    __dst = "__SHADER_STAGE_PIXEL";
    LOWORD(v148) = 259;
    v162 = 264;
    LODWORD(v158) = 0;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    __dst = "__SHADER_STAGE_GEOMETRY";
    LOWORD(v148) = 259;
    v162 = 264;
    LODWORD(v158) = 2;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    __dst = "__SHADER_STAGE_HULL";
    LOWORD(v148) = 259;
    v162 = 264;
    LODWORD(v158) = 3;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    __dst = "__SHADER_STAGE_DOMAIN";
    LOWORD(v148) = 259;
    v162 = 264;
    LODWORD(v158) = 4;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    __dst = "__SHADER_STAGE_COMPUTE";
    LOWORD(v148) = 259;
    v162 = 264;
    LODWORD(v158) = 5;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    __dst = "__SHADER_STAGE_AMPLIFICATION";
    LOWORD(v148) = 259;
    v162 = 264;
    LODWORD(v158) = 14;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    __dst = "__SHADER_STAGE_MESH";
    LOWORD(v148) = 259;
    v162 = 264;
    LODWORD(v158) = 13;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    __dst = "__SHADER_STAGE_LIBRARY";
    LOWORD(v148) = 259;
    v162 = 264;
    LODWORD(v158) = 6;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    v53 = *(_DWORD *)(v49 + 72) - 22;
    __dst = "__SHADER_TARGET_STAGE";
    LOWORD(v148) = 259;
    v162 = 264;
    LODWORD(v158) = v53;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    if (*(_DWORD *)(v49 + 68) != 41)
      goto LABEL_161;
    OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)(v49 + 32));
    __dst = "__SHADER_TARGET_MAJOR";
    LOWORD(v148) = 259;
    v162 = 264;
    LODWORD(v158) = OSVersion;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    v55 = HIDWORD(OSVersion) & (OSVersion >> 63) & 0x7FFFFFFF;
    __dst = "__SHADER_TARGET_MINOR";
    LOWORD(v148) = 259;
    if (OSVersion >= 0)
      v55 = 0;
    v162 = 264;
    LODWORD(v158) = v55;
    goto LABEL_160;
  }
  if ((*(_BYTE *)v50 & 0x10) == 0 && (*(_QWORD *)(v50 + 8) & 0x4000000000000) == 0)
  {
    __dst = "__STDC__";
    LOWORD(v148) = 259;
    v158 = "1";
    v162 = 259;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
  }
  if ((*(_QWORD *)(v50 + 8) & 0x40000000000000) != 0)
  {
    __dst = "__STDC_HOSTED__";
    LOWORD(v148) = 259;
    v51 = "0";
  }
  else
  {
    __dst = "__STDC_HOSTED__";
    LOWORD(v148) = 259;
    v51 = "1";
  }
  v158 = (char *)v51;
  v162 = 259;
  sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
  v56 = *(_QWORD *)v50;
  if ((*(_QWORD *)v50 & 0x100) != 0)
  {
    if ((v56 & 0x2000) != 0)
    {
      __dst = "__cplusplus";
      LOWORD(v148) = 259;
      v58 = "202101L";
    }
    else if ((v56 & 0x1000) != 0)
    {
      __dst = "__cplusplus";
      LOWORD(v148) = 259;
      v58 = "202002L";
    }
    else if ((v56 & 0x800) != 0)
    {
      __dst = "__cplusplus";
      LOWORD(v148) = 259;
      v58 = "201703L";
    }
    else if ((v56 & 0x400) != 0)
    {
      __dst = "__cplusplus";
      LOWORD(v148) = 259;
      v58 = "201402L";
    }
    else
    {
      __dst = "__cplusplus";
      LOWORD(v148) = 259;
      if ((v56 & 0x200) != 0)
        v58 = "201103L";
      else
        v58 = "199711L";
    }
    v158 = (char *)v58;
    v162 = 259;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    __dst = "__STDCPP_DEFAULT_NEW_ALIGNMENT__";
    LOWORD(v148) = 259;
    v59 = v49 + *(_QWORD *)(*(_QWORD *)v49 - 24);
    v60 = *(unsigned __int16 *)(v59 + 44);
    if (!*(_WORD *)(v59 + 44))
    {
      if (*(unsigned __int8 *)(v59 + 15) <= *(unsigned __int8 *)(v59 + 23))
        v60 = *(unsigned __int8 *)(v59 + 23);
      else
        v60 = *(unsigned __int8 *)(v59 + 15);
    }
    v61 = (char *)(v60 >> 3);
    v62 = (const char *)sub_22F1E71B0(v49, *(_DWORD *)(v59 + 112));
    if (*v62)
    {
      v158 = v61;
      v160 = v62;
      v63 = 776;
    }
    else
    {
      v158 = v61;
      v63 = 264;
    }
    v162 = v63;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    if ((*(_WORD *)(v50 + 248) & 0x3000) == 0)
    {
      __dst = "__STDCPP_THREADS__";
      LOWORD(v148) = 259;
      v57 = "1";
      goto LABEL_119;
    }
  }
  else
  {
    if ((v56 & 8) != 0)
    {
      __dst = "__STDC_VERSION__";
      LOWORD(v148) = 259;
      v57 = "202000L";
      goto LABEL_119;
    }
    if ((v56 & 4) != 0)
    {
      __dst = "__STDC_VERSION__";
      LOWORD(v148) = 259;
      v57 = "201710L";
      goto LABEL_119;
    }
    if ((v56 & 2) != 0)
    {
      __dst = "__STDC_VERSION__";
      LOWORD(v148) = 259;
      v57 = "201112L";
      goto LABEL_119;
    }
    if ((v56 & 1) != 0)
    {
      __dst = "__STDC_VERSION__";
      LOWORD(v148) = 259;
      v57 = "199901L";
      goto LABEL_119;
    }
    if ((v56 & 0x80000000) == 0 && (*(_QWORD *)(v50 + 8) & 0x400000000) != 0)
    {
      __dst = "__STDC_VERSION__";
      LOWORD(v148) = 259;
      v57 = "199409L";
LABEL_119:
      v158 = (char *)v57;
      v162 = 259;
      sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    }
  }
  __dst = "__STDC_UTF_16__";
  LOWORD(v148) = 259;
  v158 = "1";
  v162 = 259;
  sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
  __dst = "__STDC_UTF_32__";
  LOWORD(v148) = 259;
  v158 = "1";
  v162 = 259;
  sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
  if ((*(_BYTE *)(v50 + 1) & 0x40) != 0)
  {
    __dst = "__OBJC__";
    LOWORD(v148) = 259;
    v158 = "1";
    v162 = 259;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
  }
  if ((*(_DWORD *)(v50 + 52) & 0x40000000) != 0)
  {
    if ((*(_BYTE *)(v50 + 1) & 1) != 0)
    {
      if (*(_DWORD *)(v50 + 64) == 100)
      {
        __dst = "__OPENCL_CPP_VERSION__";
        LOWORD(v148) = 259;
        v158 = "100";
      }
      else
      {
        __dst = "__OPENCL_CPP_VERSION__";
        LOWORD(v148) = 259;
        v158 = "202100";
      }
      v162 = 259;
      sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
      __dst = "__CL_CPP_VERSION_1_0__";
      LOWORD(v148) = 259;
      v158 = "100";
      v162 = 259;
      sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
      __dst = "__CL_CPP_VERSION_2021__";
      LOWORD(v148) = 259;
      v158 = "202100";
      v162 = 259;
    }
    else
    {
      v64 = *(_DWORD *)(v50 + 56);
      if (v64 <= 119)
      {
        __dst = "__OPENCL_C_VERSION__";
        LOWORD(v148) = 259;
        if (v64 == 100)
          v158 = "100";
        else
          v158 = "110";
      }
      else if (v64 == 120)
      {
        __dst = "__OPENCL_C_VERSION__";
        LOWORD(v148) = 259;
        v158 = "120";
      }
      else
      {
        __dst = "__OPENCL_C_VERSION__";
        LOWORD(v148) = 259;
        if (v64 == 200)
          v158 = "200";
        else
          v158 = "300";
      }
      v162 = 259;
    }
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    __dst = "CL_VERSION_1_0";
    LOWORD(v148) = 259;
    v158 = "100";
    v162 = 259;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    __dst = "CL_VERSION_1_1";
    LOWORD(v148) = 259;
    v158 = "110";
    v162 = 259;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    __dst = "CL_VERSION_1_2";
    LOWORD(v148) = 259;
    v158 = "120";
    v162 = 259;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    __dst = "CL_VERSION_2_0";
    LOWORD(v148) = 259;
    v158 = "200";
    v162 = 259;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    __dst = "CL_VERSION_3_0";
    LOWORD(v148) = 259;
    v158 = "300";
    v162 = 259;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    if (!*(_BYTE *)(v49 + 80))
    {
      __dst = "__ENDIAN_LITTLE__";
      LOWORD(v148) = 259;
      v158 = "1";
      v162 = 259;
      sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    }
    if ((*(_QWORD *)(v50 + 140) & 0x400000000000000) != 0)
    {
      __dst = "__FAST_RELAXED_MATH__";
      LOWORD(v148) = 259;
      v158 = "1";
      v162 = 259;
      sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    }
  }
  if ((*(_BYTE *)(v50 + 104) & 0xC) != 0)
  {
    v65 = (*(_DWORD *)(v50 + 240) >> 29) & 3;
    if (v65 == 2)
    {
      __dst = "SYCL_LANGUAGE_VERSION";
      LOWORD(v148) = 259;
      v66 = "202001";
    }
    else
    {
      if (v65 != 1)
        goto LABEL_148;
      __dst = "CL_SYCL_LANGUAGE_VERSION";
      LOWORD(v148) = 259;
      v66 = "121";
    }
    v158 = (char *)v66;
    v162 = 259;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
  }
LABEL_148:
  if ((*(_BYTE *)(v50 + 3) & 0x40) != 0)
  {
    __dst = "__ASSEMBLER__";
    LOWORD(v148) = 259;
    v158 = "1";
    v162 = 259;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
  }
  v67 = *(_QWORD *)(v50 + 64);
  if ((v67 & 0x2000000000) != 0)
  {
    if ((*(_WORD *)(v50 + 96) & 0x800) != 0)
    {
      __dst = "__CLANG_RDC__";
      LOWORD(v148) = 259;
      v158 = "1";
      v162 = 259;
      sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
      v67 = *(_QWORD *)(v50 + 64);
    }
    if ((v67 & 0x4000000000) == 0)
    {
      __dst = "__CUDA__";
      LOWORD(v148) = 259;
      v158 = "1";
      v162 = 259;
      sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
      v67 = *(_QWORD *)(v50 + 64);
    }
  }
  if ((v67 & 0x4000000000) != 0)
  {
    __dst = "__HIP__";
    LOWORD(v148) = 259;
    v158 = "1";
    v162 = 259;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    __dst = "__HIPCC__";
    LOWORD(v148) = 259;
    v158 = "1";
    v162 = 259;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    __dst = "__HIP_MEMORY_SCOPE_SINGLETHREAD";
    LOWORD(v148) = 259;
    v158 = "1";
    v162 = 259;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    __dst = "__HIP_MEMORY_SCOPE_WAVEFRONT";
    LOWORD(v148) = 259;
    v158 = "2";
    v162 = 259;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    __dst = "__HIP_MEMORY_SCOPE_WORKGROUP";
    LOWORD(v148) = 259;
    v158 = "3";
    v162 = 259;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    __dst = "__HIP_MEMORY_SCOPE_AGENT";
    LOWORD(v148) = 259;
    v158 = "4";
    v162 = 259;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    __dst = "__HIP_MEMORY_SCOPE_SYSTEM";
    LOWORD(v148) = 259;
    v158 = "5";
    v162 = 259;
    sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    if ((*(_WORD *)(v50 + 96) & 0x80) != 0)
    {
      __dst = "__HIP_DEVICE_COMPILE__";
      LOWORD(v148) = 259;
      v158 = "1";
      v162 = 259;
      sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    }
    if (*(_DWORD *)(v50 + 832) == 1)
    {
      __dst = "HIP_API_PER_THREAD_DEFAULT_STREAM";
      LOWORD(v148) = 259;
      v158 = "1";
      v162 = 259;
LABEL_160:
      sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
    }
  }
LABEL_161:
  if ((*(_BYTE *)(v7[7] + 3) & 0x40) == 0)
  {
    __dst = "# 1 \"<command line>\" 1";
    LOWORD(v148) = 259;
    v68 = v133;
    llvm::Twine::print((llvm::Twine *)&__dst, v133);
    v69 = (_BYTE *)*((_QWORD *)v68 + 4);
    if ((unint64_t)v69 >= *((_QWORD *)v68 + 3))
    {
      llvm::raw_ostream::write(v68);
    }
    else
    {
      *((_QWORD *)v68 + 4) = v69 + 1;
      *v69 = 10;
    }
  }
  v70 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if ((v70 & 0x1FFFFFFFE0) != 0)
  {
    v71 = 0;
    v72 = (v70 >> 5);
    while (1)
    {
      v73 = *(_QWORD *)a2 + 32 * v71;
      if (*(_BYTE *)(v73 + 24))
      {
        LOWORD(v148) = 260;
        __dst = (char *)v73;
        sub_22F2ACC10(v133, (llvm::Twine *)&__dst);
        goto LABEL_206;
      }
      v74 = *(_BYTE *)(v73 + 23);
      v75 = v74 < 0;
      v76 = *(_QWORD *)(v73 + 8);
      if (v74 < 0)
        v73 = *(_QWORD *)v73;
      v77 = v74 & 0x7F;
      if (v75)
        v77 = v76;
      v78 = v7[6];
      v155 = (char *)v73;
      v156 = v77;
      LOBYTE(__dst) = 61;
      v79 = llvm::StringRef::find();
      if (v79 == -1)
        break;
      v81 = v155;
      v80 = v156;
      if (v156 >= v79 + 1)
        v82 = v79 + 1;
      else
        v82 = v156;
      v153 = &v155[v82];
      v154 = v156 - v82;
      if (v156 >= v79)
        v83 = v79;
      else
        v83 = v156;
      if (v156 <= v79)
        goto LABEL_184;
      first_of = llvm::StringRef::find_first_of();
      if (first_of != -1)
      {
        *(_QWORD *)(v78 + 312) = 0x37000000000;
        if (*(char *)(v78 + 311) < 0)
        {
          **(_BYTE **)(v78 + 288) = 0;
          *(_QWORD *)(v78 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v78 + 288) = 0;
          *(_BYTE *)(v78 + 311) = 0;
        }
        __dst = (char *)(v78 + 320);
        v145 = 0;
        v146 = (const char *)v78;
        LOWORD(v147) = 1;
        *(_BYTE *)(v78 + 320) = 0;
        *(_DWORD *)(v78 + 664) = 0;
        v86 = *(unsigned int *)(v78 + 776);
        if ((_DWORD)v86)
        {
          v87 = *(_QWORD *)(v78 + 768);
          v88 = 56 * v86;
          do
          {
            if (*(char *)(v87 + v88 - 9) < 0)
              operator delete(*(void **)(v87 + v88 - 32));
            v88 -= 56;
          }
          while (v88);
        }
        *(_DWORD *)(v78 + 776) = 0;
        sub_22E3B89A8((unsigned __int8 **)&__dst, v81, v83);
        sub_22E3BB0B8((uint64_t)&__dst);
        v7 = (uint64_t *)v131;
      }
      v89 = v154;
      if (v154 >= first_of)
        v89 = first_of;
      v154 = v89;
      a2 = v132;
      if (!v89)
        goto LABEL_204;
      v90 = v89;
      while (1)
      {
        v91 = v153[v90 - 1];
        if ((word_22F4ADB24[v91] & 7) == 0)
          break;
        if (v90 >= v90 - 1)
          --v90;
        if (!v90)
          goto LABEL_204;
      }
      if ((_DWORD)v91 != 92)
      {
LABEL_204:
        LOWORD(v148) = 261;
        __dst = (char *)v81;
        v145 = v83;
        v162 = 261;
        v158 = v153;
        v159 = v89;
        goto LABEL_205;
      }
      LOWORD(v148) = 261;
      __dst = (char *)v81;
      v145 = v83;
      v158 = v153;
      v159 = v89;
      v160 = "\\\n";
      v85 = 773;
LABEL_185:
      v162 = v85;
LABEL_205:
      sub_22E7333BC(&v133, (llvm::Twine *)&__dst, (llvm::Twine *)&v158);
LABEL_206:
      if (++v71 == v72)
        goto LABEL_209;
    }
    v81 = v155;
    v80 = v156;
    v153 = 0;
    v154 = 0;
LABEL_184:
    LOWORD(v148) = 261;
    __dst = (char *)v81;
    v145 = v80;
    v158 = "1";
    v85 = 259;
    goto LABEL_185;
  }
LABEL_209:
  if ((*(_BYTE *)(v7[7] + 3) & 0x40) == 0)
  {
    __dst = "# 1 \"<built-in>\" 2";
    LOWORD(v148) = 259;
    v92 = v133;
    llvm::Twine::print((llvm::Twine *)&__dst, v133);
    v93 = (_BYTE *)*((_QWORD *)v92 + 4);
    if ((unint64_t)v93 >= *((_QWORD *)v92 + 3))
    {
      llvm::raw_ostream::write(v92);
    }
    else
    {
      *((_QWORD *)v92 + 4) = v93 + 1;
      *v93 = 10;
    }
  }
  v94 = -1431655765 * ((*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3);
  if ((_DWORD)v94)
  {
    v95 = 0;
    v96 = 24 * v94;
    do
    {
      v97 = v133;
      v98 = (uint64_t *)(*(_QWORD *)(v132 + 48) + v95);
      v99 = *((_BYTE *)v98 + 23);
      v100 = v99 < 0;
      v101 = v98[1];
      if (v99 < 0)
        v98 = (uint64_t *)*v98;
      v102 = v99 & 0x7F;
      if (v100)
        v102 = v101;
      v158 = "#__include_macros \"";
      v160 = (const char *)v98;
      v161 = v102;
      v162 = 1283;
      __dst = (char *)&v158;
      v146 = "\"";
      LOWORD(v148) = 770;
      llvm::Twine::print((llvm::Twine *)&__dst, v133);
      v103 = (_BYTE *)*((_QWORD *)v97 + 4);
      if ((unint64_t)v103 >= *((_QWORD *)v97 + 3))
      {
        llvm::raw_ostream::write(v97);
      }
      else
      {
        *((_QWORD *)v97 + 4) = v103 + 1;
        *v103 = 10;
      }
      __dst = "##";
      LOWORD(v148) = 259;
      v104 = v133;
      llvm::Twine::print((llvm::Twine *)&__dst, v133);
      v105 = (_BYTE *)*((_QWORD *)v104 + 4);
      if ((unint64_t)v105 >= *((_QWORD *)v104 + 3))
      {
        llvm::raw_ostream::write(v104);
      }
      else
      {
        *((_QWORD *)v104 + 4) = v105 + 1;
        *v105 = 10;
      }
      v95 += 24;
    }
    while (v96 != v95);
  }
  v106 = v132;
  v107 = *(_BYTE *)(v132 + 127);
  v108 = v107;
  v109 = v107 & 0x7F;
  if (v108 >= 0)
    v110 = v109;
  else
    v110 = *(_QWORD *)(v132 + 112);
  if (v110)
  {
    if (v108 >= 0)
      v111 = (const void *)(v132 + 104);
    else
      v111 = *(const void **)(v132 + 104);
    if (v110 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v110 >= 0x17)
    {
      v113 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v110 | 7) != 0x17)
        v113 = v110 | 7;
      v114 = v113 + 1;
      v112 = (unsigned __int8 *)operator new(v113 + 1);
      v115 = v114 | 0x8000000000000000;
      v106 = v132;
      v145 = v110;
      v146 = (const char *)v115;
      __dst = (char *)v112;
    }
    else
    {
      HIBYTE(v146) = v110;
      v112 = (unsigned __int8 *)&__dst;
    }
    memmove(v112, v111, v110);
    v112[v110] = 0;
    sub_22E77F92C((uint64_t)&__dst, *(_QWORD *)(v131 + 80), v130, *(_QWORD *)(v131 + 48), &v155);
    if (SHIBYTE(v146) < 0)
      operator delete(__dst);
    v116 = v157 & 0x7F;
    if (v157 < 0)
      v116 = v156;
    if (!v116)
    {
      if ((v157 & 0x80) == 0)
        goto LABEL_246;
      goto LABEL_245;
    }
    v129 = (const char *)&v155;
    if (v157 < 0)
      v129 = v155;
    v158 = "#include \"";
    v160 = v129;
    v161 = v116;
    v162 = 1283;
    __dst = (char *)&v158;
    v146 = "\"";
    LOWORD(v148) = 770;
    sub_22F2ACBB8(v133, (llvm::Twine *)&__dst);
    if (v157 < 0)
LABEL_245:
      operator delete(v155);
  }
LABEL_246:
  v117 = -1431655765 * ((*(_QWORD *)(v106 + 32) - *(_QWORD *)(v106 + 24)) >> 3);
  if ((_DWORD)v117)
  {
    v118 = 0;
    v119 = 24 * v117;
    do
    {
      v120 = (uint64_t *)(*(_QWORD *)(v106 + 24) + v118);
      v121 = *((_BYTE *)v120 + 23);
      v122 = v121 < 0;
      v123 = v120[1];
      if (v121 < 0)
        v120 = (uint64_t *)*v120;
      v124 = v121 & 0x7F;
      if (v122)
        v124 = v123;
      v158 = "#include \"";
      v160 = (const char *)v120;
      v161 = v124;
      v162 = 1283;
      __dst = (char *)&v158;
      v146 = "\"";
      LOWORD(v148) = 770;
      sub_22F2ACBB8(v133, (llvm::Twine *)&__dst);
      v118 += 24;
    }
    while (v119 != v118);
  }
  v125 = *(_BYTE *)(v106 + 188);
  *(_DWORD *)(v131 + 896) = *(_DWORD *)(v106 + 184);
  *(_BYTE *)(v131 + 900) = v125;
  v126 = HIBYTE(v142->__r_.__value_.__r.__words[2]);
  if (v126 >= 0)
    v127 = v142;
  else
    v127 = (std::string *)v142->__r_.__value_.__r.__words[0];
  if (v126 >= 0)
    size = v126 & 0x7F;
  else
    size = v142->__r_.__value_.__l.__size_;
  sub_22E6CB154(v131, v127, size);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v134);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
}

uint64_t sub_22E7350F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::raw_ostream **a5)
{
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  std::string *v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  std::string *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  char v35;
  char v36;
  const char *v37;
  const char *v38;
  char v39;
  const char *v40;
  char v41;
  char v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  const char *v54;
  unsigned int v55;
  uint64_t v56;
  const char *v57;
  char v58;
  int v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  _BYTE *v80;
  char v81;
  _BYTE *v82;
  char v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  char v93;
  _BYTE *v94;
  const char *v95;
  unint64_t v96;
  unint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  const char *v103;
  __int16 v104;
  std::string v108;
  __int16 v109;
  void *__p[2];
  std::string *v111;
  __int16 v112;
  std::string v113;
  _QWORD v114[2];
  const char *v115;
  __int16 v116;
  const char *v117;
  uint64_t v118;
  __int16 v119;

  v117 = "__llvm__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__clang__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__clang_major__";
  v119 = 259;
  v114[0] = "32023";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__clang_minor__";
  v119 = 259;
  v114[0] = "334";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__clang_patchlevel__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__clang_version__";
  v119 = 259;
  sub_22F20D5D0(&v113);
  v8 = std::string::insert(&v113, 0, "\"32023.334 ");
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v108.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v108.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v108, "\"");
  v11 = (std::string *)v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v111 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v116 = 260;
  v114[0] = __p;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  if (SHIBYTE(v111) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v108.__r_.__value_.__l.__data_);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113.__r_.__value_.__l.__data_);
  v12 = *(_DWORD *)(a2 + 8);
  if (v12)
  {
    v13 = v12 / 0x2710;
    v14 = v12 / 0x64 - 100 * ((42949673 * (unint64_t)(v12 / 0x64)) >> 32);
    v15 = v12 % 0x64;
    v117 = "__GNUC__";
    v119 = 259;
    v116 = 264;
    LODWORD(v114[0]) = v12 / 0x2710;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "__GNUC_MINOR__";
    v119 = 259;
    v116 = 264;
    LODWORD(v114[0]) = v14;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "__GNUC_PATCHLEVEL__";
    v119 = 259;
    v116 = 264;
    LODWORD(v114[0]) = v15;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "__GXX_ABI_VERSION";
    v119 = 259;
    v114[0] = "1002";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    if ((*(_BYTE *)(a2 + 1) & 1) != 0)
    {
      v117 = "__GNUG__";
      v119 = 259;
      v116 = 264;
      LODWORD(v114[0]) = v13;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__GXX_WEAK__";
      v119 = 259;
      v114[0] = "1";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    }
  }
  v117 = "__ATOMIC_RELAXED";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__ATOMIC_CONSUME";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__ATOMIC_ACQUIRE";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__ATOMIC_RELEASE";
  v119 = 259;
  v114[0] = "3";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__ATOMIC_ACQ_REL";
  v119 = 259;
  v114[0] = "4";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__ATOMIC_SEQ_CST";
  v119 = 259;
  v114[0] = "5";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__OPENCL_MEMORY_SCOPE_WORK_ITEM";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__OPENCL_MEMORY_SCOPE_WORK_GROUP";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__OPENCL_MEMORY_SCOPE_DEVICE";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES";
  v119 = 259;
  v114[0] = "3";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__OPENCL_MEMORY_SCOPE_SUB_GROUP";
  v119 = 259;
  v114[0] = "4";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__PRAGMA_REDEFINE_EXTNAME";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__VERSION__";
  v119 = 259;
  v108.__r_.__value_.__r.__words[0] = (std::string::size_type)"\"";
  v109 = 259;
  v16 = &v113;
  sub_22F20D8DC(&v113);
  v17 = v109;
  if (v109 == 1)
  {
    __p[0] = &v113;
    v112 = 260;
    v18 = 4;
    v20 = (uint64_t)__p[1];
  }
  else
  {
    if (!(_BYTE)v109)
    {
      v18 = 0;
      v112 = 256;
      v19 = 1;
      goto LABEL_18;
    }
    v21 = (std::string *)v108.__r_.__value_.__r.__words[0];
    v18 = 2;
    if (HIBYTE(v109) != 1)
    {
      v17 = 2;
      v21 = &v108;
    }
    __p[0] = v21;
    __p[1] = (void *)v108.__r_.__value_.__l.__size_;
    v111 = &v113;
    LOBYTE(v112) = v17;
    v20 = 4;
    HIBYTE(v112) = 4;
    v16 = (std::string *)__p;
  }
  v114[0] = v16;
  v114[1] = v20;
  v19 = 3;
  v115 = "\"";
LABEL_18:
  LOBYTE(v116) = v18;
  HIBYTE(v116) = v19;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113.__r_.__value_.__l.__data_);
  v22 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 0x80000010) == 0)
  {
    v117 = "__STRICT_ANSI__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v22 = *(_QWORD *)a2;
  }
  if (*(_DWORD *)(a2 + 8) && (v22 & 0x200) != 0)
  {
    v117 = "__GXX_EXPERIMENTAL_CXX0X__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v22 = *(_QWORD *)a2;
  }
  if ((v22 & 0x4000) != 0)
  {
    if (((1 << *(_DWORD *)(a2 + 400)) & 0xDD) != 0)
    {
      v117 = "__OBJC2__";
      v119 = 259;
      v114[0] = "1";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      if ((*(_QWORD *)(a2 + 8) & 0x200000000000) != 0)
      {
        v117 = "OBJC_ZEROCOST_EXCEPTIONS";
        v119 = 259;
        v114[0] = "1";
        v116 = 259;
        sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      }
    }
    if ((*(_BYTE *)(a2 + 246) & 6) != 0)
    {
      v117 = "__OBJC_GC__";
      v119 = 259;
      v114[0] = "1";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    }
    v23 = *(_DWORD *)(a2 + 400);
    if (v23 <= 4)
    {
      v117 = "__NEXT_RUNTIME__";
      v119 = 259;
      v114[0] = "1";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v23 = *(_DWORD *)(a2 + 400);
    }
    if (v23 == 6)
    {
      *(_OWORD *)__p = *(_OWORD *)(a2 + 404);
      v117 = (const char *)0x8000000000000002;
      v118 = 0;
      if ((sub_22E3B38EC(__p, &v117) & 1) != 0)
      {
        v117 = "__OBJC_GNUSTEP_RUNTIME_ABI__";
        v119 = 259;
        if ((HIDWORD(__p[0]) & 0x7FFFFFF8) != 0)
          v24 = 8;
        else
          v24 = HIDWORD(__p[0]) & 0x7FFFFFFF;
        v114[0] = "1";
        v115 = (const char *)(v24 & ((uint64_t)__p[0] >> 63));
        v25 = 2051;
      }
      else
      {
        v117 = "__OBJC_GNUSTEP_RUNTIME_ABI__";
        v25 = 259;
        v119 = 259;
        v114[0] = "20";
      }
      v116 = v25;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v23 = *(_DWORD *)(a2 + 400);
    }
    if (v23 == 7)
    {
      v26 = *(_DWORD *)(a2 + 412);
      v27 = *(_QWORD *)(a2 + 404);
      v28 = 100 * (HIDWORD(v27) & 0x7FFFFFFF);
      v29 = v26 & 0x7FFFFFFF;
      if (v26 >= 0)
        v29 = 0;
      v117 = "__OBJFW_RUNTIME_ABI__";
      v119 = 259;
      if (v27 >= 0)
        v28 = 0;
      v116 = 264;
      LODWORD(v114[0]) = v29 + 10000 * v27 + v28;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    }
    v117 = "IBOutlet";
    v119 = 259;
    v114[0] = "__attribute__((iboutlet))";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "IBOutletCollection(ClassName)";
    v119 = 259;
    v114[0] = "__attribute__((iboutletcollection(ClassName)))";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "IBAction";
    v119 = 259;
    v114[0] = "void)__attribute__((ibaction)";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "IBInspectable";
    v119 = 259;
    v116 = 257;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "IB_DESIGNABLE";
    v119 = 259;
    v116 = 257;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
  v117 = "__OBJC_BOOL_IS_BOOL";
  v119 = 259;
  if ((*(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 160) & 1) != 0)
    v30 = "0";
  else
    v30 = "1";
  v31 = 1;
  HIBYTE(v116) = 1;
  if (*v30)
  {
    v114[0] = v30;
    v31 = 3;
  }
  LOBYTE(v116) = v31;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
  {
    v32 = *(_QWORD *)(a2 + 8);
    if ((v32 & 0x8000000000000) != 0)
    {
      v117 = "__cpp_rtti";
      v119 = 259;
      v114[0] = "199711L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v32 = *(_QWORD *)(a2 + 8);
    }
    if ((v32 & 0x400000000000) != 0)
    {
      v117 = "__cpp_exceptions";
      v119 = 259;
      v114[0] = "199711L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    }
    if ((*(_BYTE *)(a2 + 1) & 2) != 0)
    {
      v117 = "__cpp_unicode_characters";
      v119 = 259;
      v114[0] = "200704L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_raw_strings";
      v119 = 259;
      v114[0] = "200710L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_unicode_literals";
      v119 = 259;
      v114[0] = "200710L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_user_defined_literals";
      v119 = 259;
      v114[0] = "200809L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_lambdas";
      v119 = 259;
      v114[0] = "200907L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_constexpr";
      v119 = 259;
      v33 = *(_QWORD *)a2;
      if ((*(_QWORD *)a2 & 0x2000) != 0)
      {
        v34 = "202110L";
      }
      else if ((v33 & 0x1000) != 0)
      {
        v34 = "201907L";
      }
      else if ((v33 & 0x800) != 0)
      {
        v34 = "201603L";
      }
      else if ((v33 & 0x400) != 0)
      {
        v34 = "201304L";
      }
      else
      {
        v34 = "200704";
      }
      v35 = 1;
      HIBYTE(v116) = 1;
      if (*v34)
      {
        v114[0] = v34;
        v36 = 3;
      }
      else
      {
        v36 = 1;
      }
      LOBYTE(v116) = v36;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_constexpr_in_decltype";
      v119 = 259;
      v114[0] = "201711L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_range_based_for";
      v119 = 259;
      v37 = "201603L";
      if ((*(_QWORD *)a2 & 0x800) == 0)
        v37 = "200907";
      HIBYTE(v116) = 1;
      if (*v37)
      {
        v114[0] = v37;
        v35 = 3;
      }
      LOBYTE(v116) = v35;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_static_assert";
      v119 = 259;
      v38 = "201411L";
      if ((*(_QWORD *)a2 & 0x800) == 0)
        v38 = "200410";
      v39 = 1;
      HIBYTE(v116) = 1;
      if (*v38)
      {
        v114[0] = v38;
        v39 = 3;
      }
      LOBYTE(v116) = v39;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_decltype";
      v119 = 259;
      v114[0] = "200707L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_attributes";
      v119 = 259;
      v114[0] = "200809L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_rvalue_references";
      v119 = 259;
      v114[0] = "200610L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_variadic_templates";
      v119 = 259;
      v114[0] = "200704L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_initializer_lists";
      v119 = 259;
      v114[0] = "200806L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_delegating_constructors";
      v119 = 259;
      v114[0] = "200604L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_nsdmi";
      v119 = 259;
      v114[0] = "200809L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_inheriting_constructors";
      v119 = 259;
      v114[0] = "201511L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_ref_qualifiers";
      v119 = 259;
      v114[0] = "200710L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_alias_templates";
      v119 = 259;
      v114[0] = "200704L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    }
    if ((*(_QWORD *)(a2 + 20) & 0x8000000000) != 0)
    {
      v117 = "__cpp_threadsafe_static_init";
      v119 = 259;
      v114[0] = "200806L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    }
    if ((*(_BYTE *)(a2 + 1) & 4) != 0)
    {
      v117 = "__cpp_binary_literals";
      v119 = 259;
      v114[0] = "201304L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_digit_separators";
      v119 = 259;
      v114[0] = "201309L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_init_captures";
      v119 = 259;
      v40 = "201803L";
      if ((*(_QWORD *)a2 & 0x1000) == 0)
        v40 = "201304L";
      v41 = 1;
      HIBYTE(v116) = 1;
      if (*v40)
      {
        v114[0] = v40;
        v42 = 3;
      }
      else
      {
        v42 = 1;
      }
      LOBYTE(v116) = v42;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_generic_lambdas";
      v119 = 259;
      if ((*(_QWORD *)a2 & 0x1000) != 0)
        v43 = "201707L";
      else
        v43 = "201304L";
      HIBYTE(v116) = 1;
      if (*v43)
      {
        v114[0] = v43;
        v41 = 3;
      }
      LOBYTE(v116) = v41;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_decltype_auto";
      v119 = 259;
      v114[0] = "201304L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_return_type_deduction";
      v119 = 259;
      v114[0] = "201304L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_aggregate_nsdmi";
      v119 = 259;
      v114[0] = "201304L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_variable_templates";
      v119 = 259;
      v114[0] = "201304L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    }
    if ((*(_BYTE *)(a2 + 136) & 0x10) != 0)
    {
      v117 = "__cpp_sized_deallocation";
      v119 = 259;
      v114[0] = "201309L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    }
    if ((*(_BYTE *)(a2 + 1) & 8) != 0)
    {
      v117 = "__cpp_hex_float";
      v119 = 259;
      v114[0] = "201603L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_inline_variables";
      v119 = 259;
      v114[0] = "201606L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_noexcept_function_type";
      v119 = 259;
      v114[0] = "201510L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_capture_star_this";
      v119 = 259;
      v114[0] = "201603L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_if_constexpr";
      v119 = 259;
      v114[0] = "201606L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_deduction_guides";
      v119 = 259;
      v114[0] = "201703L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_template_auto";
      v119 = 259;
      v114[0] = "201606L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_namespace_attributes";
      v119 = 259;
      v114[0] = "201411L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_enumerator_attributes";
      v119 = 259;
      v114[0] = "201411L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_nested_namespace_definitions";
      v119 = 259;
      v114[0] = "201411L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_variadic_using";
      v119 = 259;
      v114[0] = "201611L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_aggregate_bases";
      v119 = 259;
      v114[0] = "201603L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_structured_bindings";
      v119 = 259;
      v114[0] = "201606L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_nontype_template_args";
      v119 = 259;
      v114[0] = "201411L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_fold_expressions";
      v119 = 259;
      v114[0] = "201603L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_guaranteed_copy_elision";
      v119 = 259;
      v114[0] = "201606L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_nontype_template_parameter_auto";
      v119 = 259;
      v114[0] = "201606L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    }
    if ((*(_QWORD *)(a2 + 132) & 0x6000000000) == 0x2000000000)
    {
      v117 = "__cpp_aligned_new";
      v119 = 259;
      v114[0] = "201606L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    }
    if ((*(_QWORD *)(a2 + 8) & 0x1000000000000000) != 0)
    {
      v117 = "__cpp_template_template_args";
      v119 = 259;
      v114[0] = "201611L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    }
    v44 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 & 0x1000) != 0)
    {
      v117 = "__cpp_concepts";
      v119 = 259;
      v114[0] = "201907L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_conditional_explicit";
      v119 = 259;
      v114[0] = "201806L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_constexpr_dynamic_alloc";
      v119 = 259;
      v114[0] = "201907L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_constinit";
      v119 = 259;
      v114[0] = "201907L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_impl_coroutine";
      v119 = 259;
      v114[0] = "201902L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_designated_initializers";
      v119 = 259;
      v114[0] = "201707L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_impl_three_way_comparison";
      v119 = 259;
      v114[0] = "201907L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__cpp_using_enum";
      v119 = 259;
      v114[0] = "201907L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v44 = *(_QWORD *)a2;
      if ((*(_QWORD *)a2 & 0x2000) == 0)
      {
LABEL_104:
        if ((v44 & 0x4000000) == 0)
          goto LABEL_106;
        goto LABEL_105;
      }
    }
    else if ((v44 & 0x2000) == 0)
    {
      goto LABEL_104;
    }
    v117 = "__cpp_implicit_move";
    v119 = 259;
    v114[0] = "202011L";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "__cpp_size_t_suffix";
    v119 = 259;
    v114[0] = "202011L";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "__cpp_if_consteval";
    v119 = 259;
    v114[0] = "202106L";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "__cpp_­multidimensional_­subscript";
    v119 = 259;
    v114[0] = "202110L";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    if ((*(_QWORD *)a2 & 0x4000000) == 0)
    {
LABEL_106:
      v117 = "__cpp_impl_destroying_delete";
      v119 = 259;
      v114[0] = "201806L";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      if ((*(_QWORD *)(a2 + 8) & 0x400000000000000) != 0)
      {
        v117 = "__cpp_coroutines";
        v119 = 259;
        v114[0] = "201703L";
        v116 = 259;
        sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      }
      goto LABEL_108;
    }
LABEL_105:
    v117 = "__cpp_char8_t";
    v119 = 259;
    v114[0] = "201811L";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    goto LABEL_106;
  }
LABEL_108:
  v45 = *(_QWORD *)(a2 + 100);
  if ((v45 & 0x2000000000) == 0)
    goto LABEL_136;
  if ((v45 & 0x4000000000) != 0)
  {
    v117 = "__METAL_IOS__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v45 = *(_QWORD *)(a2 + 100);
  }
  if ((v45 & 0x8000000000) != 0)
  {
    v117 = "__METAL_MACOS__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v45 = *(_QWORD *)(a2 + 100);
  }
  if ((v45 & 0xC000000000) == 0)
  {
    v117 = "__METAL__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
  v117 = "__METAL_VERSION__";
  v119 = 259;
  v46 = *(_DWORD *)(a2 + 116) + 100 * *(_DWORD *)(a2 + 108) + 10 * *(_DWORD *)(a2 + 112);
  v116 = 264;
  LODWORD(v114[0]) = v46;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_VOTE_T__";
  v119 = 259;
  if ((*(_QWORD *)(a2 + 132) & 0x20) != 0)
    v47 = 8;
  else
    v47 = 6;
  sub_22E73AA44((llvm::Twine *)&v117, v47, a5);
  v117 = "__METAL_ACCESS_SAMPLE__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_ACCESS_READ__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_ACCESS_WRITE__";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_ACCESS_READ_WRITE__";
  v119 = 259;
  v114[0] = "3";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_ADDRESS_CLAMP_TO_ZERO__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_ADDRESS_CLAMP_TO_EDGE__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_ADDRESS_REPEAT__";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_ADDRESS_MIRRORED_REPEAT__";
  v119 = 259;
  v114[0] = "3";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_ADDRESS_CLAMP_TO_BORDER__";
  v119 = 259;
  v114[0] = "4";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_BORDER_COLOR_TRANSPARENT_BLACK__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_BORDER_COLOR_OPAQUE_BLACK__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_BORDER_COLOR_OPAQUE_WHITE__";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_COMPARE_FUNC_NONE__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_COMPARE_FUNC_LESS__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_COMPARE_FUNC_LESS_EQUAL__";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_COMPARE_FUNC_GREATER__";
  v119 = 259;
  v114[0] = "3";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_COMPARE_FUNC_GREATER_EQUAL__";
  v119 = 259;
  v114[0] = "4";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_COMPARE_FUNC_EQUAL__";
  v119 = 259;
  v114[0] = "5";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_COMPARE_FUNC_NOT_EQUAL__";
  v119 = 259;
  v114[0] = "6";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_COMPARE_FUNC_ALWAYS__";
  v119 = 259;
  v114[0] = "7";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_COMPARE_FUNC_NEVER__";
  v119 = 259;
  v114[0] = "8";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_COORD_NORMALIZED__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_COORD_PIXEL__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_FILTER_NEAREST__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_FILTER_LINEAR__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_FILTER_BICUBIC__";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_FAST_MATH__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_HALF_MATH__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_NATIVE_MATH__";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_PRECISE_MATH__";
  v119 = 259;
  v114[0] = "3";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_MAG_FILTER_NEAREST__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_MAG_FILTER_LINEAR__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_MAG_FILTER_BICUBIC__";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_MEMORY_FLAGS_NONE__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_MEMORY_FLAGS_DEVICE__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_MEMORY_FLAGS_THREADGROUP__";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_MEMORY_FLAGS_TEXTURE__";
  v119 = 259;
  v114[0] = "4";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_MEMORY_FLAGS_THREADGROUP_IMAGEBLOCK__";
  v119 = 259;
  v114[0] = "8";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_MEMORY_FLAGS_OBJECT_DATA__";
  v119 = 259;
  v114[0] = "16";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_MEMORY_ORDER_RELAXED__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_MEMORY_ORDER_ACQUIRE__";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_MEMORY_ORDER_RELEASE__";
  v119 = 259;
  v114[0] = "3";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_MEMORY_ORDER_ACQ_REL__";
  v119 = 259;
  v114[0] = "4";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_MEMORY_ORDER_SEQ_CST__";
  v119 = 259;
  v114[0] = "5";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_MEMORY_SCOPE_THREAD__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_MEMORY_SCOPE_THREADGROUP__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_MEMORY_SCOPE_DEVICE__";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_MEMORY_SCOPE_SIMDGROUP__";
  v119 = 259;
  v114[0] = "4";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_MIN_FILTER_NEAREST__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_MIN_FILTER_LINEAR__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_MIN_FILTER_BICUBIC__";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_MIP_FILTER_NONE__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_MIP_FILTER_NEAREST__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_MIP_FILTER_LINEAR__";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_OS_LOG_TYPE_DEFAULT__";
  v119 = 259;
  v114[0] = "0x00";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_OS_LOG_TYPE_INFO__";
  v119 = 259;
  v114[0] = "0x01";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_OS_LOG_TYPE_DEBUG__";
  v119 = 259;
  v114[0] = "0x02";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_OS_LOG_TYPE_ERROR__";
  v119 = 259;
  v114[0] = "0x10";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_OS_LOG_TYPE_FAULT__";
  v119 = 259;
  v114[0] = "0x11";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_PRIMITIVE_TYPE_POINT__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_PRIMITIVE_TYPE_LINE__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_PRIMITIVE_TYPE_LINE_STRIP__";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_PRIMITIVE_TYPE_TRIANGLE__";
  v119 = 259;
  v114[0] = "3";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_PRIMITIVE_TYPE_TRIANGLE_STRIP__";
  v119 = 259;
  v114[0] = "4";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_FORCED_OPACITY_NONE__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_FORCED_OPACITY_OPAQUE__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_FORCED_OPACITY_NON_OPAQUE__";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_GEOMETRY_CULL_MODE_NONE__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_GEOMETRY_CULL_MODE_TRIANGLE__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_GEOMETRY_CULL_MODE_BOUNDING_BOX__";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_GEOMETRY_CULL_MODE_CURVE__";
  v119 = 259;
  v114[0] = "4";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_GEOMETRY_TYPE_NONE__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_GEOMETRY_TYPE_TRIANGLE__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_GEOMETRY_TYPE_BOUNDING_BOX__";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_GEOMETRY_TYPE_CURVE__";
  v119 = 259;
  v114[0] = "4";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_CURVE_BASIS_BSPLINE__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_CURVE_BASIS_CATMULL_ROM__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_CURVE_BASIS_LINEAR__";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_CURVE_BASIS_BEZIER__";
  v119 = 259;
  v114[0] = "3";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_CURVE_BASIS_ALL__";
  v119 = 259;
  v114[0] = "0xFFFFFFFF";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_CURVE_TYPE_ROUND__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_CURVE_TYPE_FLAT__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_CURVE_TYPE_ALL__";
  v119 = 259;
  v114[0] = "0xFFFFFFFF";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_INTERSECTION_TAG_NONE__";
  v119 = 259;
  v116 = 265;
  LODWORD(v114[0]) = 0;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_INTERSECTION_TAG_INSTANCING__";
  v119 = 259;
  v116 = 265;
  LODWORD(v114[0]) = 1;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_INTERSECTION_TAG_MAX_LEVELS__";
  v119 = 259;
  v116 = 265;
  LODWORD(v114[0]) = 2;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_INTERSECTION_TAG_TRIANGLE_DATA__";
  v119 = 259;
  v116 = 265;
  LODWORD(v114[0]) = 4;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_INTERSECTION_TAG_CURVE_DATA__";
  v119 = 259;
  v116 = 265;
  LODWORD(v114[0]) = 8;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_INTERSECTION_TAG_WORLD_SPACE_DATA__";
  v119 = 259;
  v116 = 265;
  LODWORD(v114[0]) = 16;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_INTERSECTION_TAG_PRIMITIVE_MOTION__";
  v119 = 259;
  v116 = 265;
  LODWORD(v114[0]) = 32;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_INTERSECTION_TAG_INSTANCE_MOTION__";
  v119 = 259;
  v116 = 265;
  LODWORD(v114[0]) = 64;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_INTERSECTION_TAG_EXTENDED_LIMITS__";
  v119 = 259;
  v116 = 265;
  LODWORD(v114[0]) = 128;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_INTERSECTION_TYPE_NONE__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_INTERSECTION_TYPE_TRIANGLE__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_INTERSECTION_TYPE_BOUNDING_BOX__";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_INTERSECTION_TYPE_CURVE__";
  v119 = 259;
  v114[0] = "3";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_OPACITY_CULL_MODE_NONE__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_OPACITY_CULL_MODE_OPAQUE__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_OPACITY_CULL_MODE_NON_OPAQUE__";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_TRIANGLE_CULL_MODE_NONE__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_TRIANGLE_CULL_MODE_FRONT__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_RAYTRACING_TRIANGLE_CULL_MODE_BACK__";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_REDUCTION_WEIGHTED_AVERAGE__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_REDUCTION_MINIMUM__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_REDUCTION_MAXIMUM__";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_ROUNDING_RTE__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_ROUNDING_RTZ__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_ROUNDING_RTP__";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_ROUNDING_RTN__";
  v119 = 259;
  v114[0] = "3";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_COHERENCE_THREADGROUP__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_COHERENCE_DEVICE__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_TEXTURE_WRITE_ROUNDING_MODE_NATIVE__";
  v119 = 259;
  v116 = 265;
  LODWORD(v114[0]) = 0;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_TEXTURE_WRITE_ROUNDING_MODE_RTE__";
  v119 = 259;
  v116 = 265;
  LODWORD(v114[0]) = 1;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_TEXTURE_WRITE_ROUNDING_MODE_RTZ__";
  v119 = 259;
  v116 = 265;
  LODWORD(v114[0]) = 2;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_TEXTURE_WRITE_ROUNDING_MODE__";
  v119 = 259;
  v48 = *(_DWORD *)(a2 + 244) & 3;
  v116 = 265;
  LODWORD(v114[0]) = v48;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_TOPOLOGY_POINT__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_TOPOLOGY_LINE__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_TOPOLOGY_TRIANGLE__";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_VERTEX_INDEX_FIRST__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_VERTEX_INDEX_SECOND__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_VERTEX_INDEX_THIRD__";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_WINDING_CLOCKWISE__";
  v119 = 259;
  v114[0] = "0";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__METAL_WINDING_COUNTERCLOCKWISE__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v49 = *(_QWORD *)(a2 + 116);
  if ((v49 & 0x4000000000000) != 0)
  {
    v117 = "__HAVE_ARRAYS_OF_BUFFERS__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v50 = *(_QWORD *)(a2 + 132);
    v51 = *(_QWORD *)(a2 + 124);
    v49 = *(_QWORD *)(a2 + 116);
    if ((v49 & 0x20000000000000) == 0)
      goto LABEL_126;
    goto LABEL_125;
  }
  v50 = *(_QWORD *)(a2 + 132);
  v51 = *(_QWORD *)(a2 + 124);
  if ((v49 & 0x20000000000000) != 0)
  {
LABEL_125:
    v117 = "__HAVE_ARRAYREFS_OF_BUFFERS__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v50 = *(_QWORD *)(a2 + 132);
    v51 = *(_QWORD *)(a2 + 124);
    v49 = *(_QWORD *)(a2 + 116);
  }
LABEL_126:
  if ((v49 & 0x40000000000000) != 0)
  {
    v117 = "__HAVE_ARRAYREFS_OF_SAMPLERS__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v50 = *(_QWORD *)(a2 + 132);
    v51 = *(_QWORD *)(a2 + 124);
    v49 = *(_QWORD *)(a2 + 116);
    if ((v49 & 0x80000000000000) == 0)
    {
LABEL_128:
      if ((v49 & 0x2000000000000000) == 0)
        goto LABEL_129;
      goto LABEL_157;
    }
  }
  else if ((v49 & 0x80000000000000) == 0)
  {
    goto LABEL_128;
  }
  v117 = "__HAVE_ARRAYREFS_OF_TEXTURES__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v50 = *(_QWORD *)(a2 + 132);
  v51 = *(_QWORD *)(a2 + 124);
  if ((*(_QWORD *)(a2 + 116) & 0x2000000000000000) == 0)
  {
LABEL_129:
    if ((v51 & 0x400000) == 0)
      goto LABEL_130;
    goto LABEL_158;
  }
LABEL_157:
  v117 = "__METAL_CIKERNEL__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v50 = *(_QWORD *)(a2 + 132);
  v51 = *(_QWORD *)(a2 + 124);
  if ((v51 & 0x400000) == 0)
  {
LABEL_130:
    if ((v51 & 0x8000000) == 0)
      goto LABEL_131;
    goto LABEL_159;
  }
LABEL_158:
  v117 = "__METAL_ENABLE_LOGGING__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v50 = *(_QWORD *)(a2 + 132);
  v51 = *(_QWORD *)(a2 + 124);
  if ((v51 & 0x8000000) == 0)
  {
LABEL_131:
    if ((v51 & 0x10000000) == 0)
      goto LABEL_132;
    goto LABEL_160;
  }
LABEL_159:
  v117 = "__HAVE_NATIVE_DOUBLE__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v50 = *(_QWORD *)(a2 + 132);
  v51 = *(_QWORD *)(a2 + 124);
  if ((v51 & 0x10000000) == 0)
  {
LABEL_132:
    if ((v51 & 0x20000000) == 0)
      goto LABEL_133;
    goto LABEL_161;
  }
LABEL_160:
  v117 = "__HAVE_NATIVE_LONG_LONG__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v50 = *(_QWORD *)(a2 + 132);
  v51 = *(_QWORD *)(a2 + 124);
  if ((v51 & 0x20000000) == 0)
  {
LABEL_133:
    if ((v51 & 0x80) == 0)
      goto LABEL_134;
    goto LABEL_162;
  }
LABEL_161:
  v117 = "__HAVE_NATIVE_WIDE_VECTORS__";
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v50 = *(_QWORD *)(a2 + 132);
  if ((*(_QWORD *)(a2 + 124) & 0x80) == 0)
  {
LABEL_134:
    if ((v50 & 0x100) == 0)
      goto LABEL_136;
    goto LABEL_135;
  }
LABEL_162:
  v117 = "__MAX_FUNCTION_CONSTANT_INDEX__";
  v119 = 259;
  v116 = 264;
  LODWORD(v114[0]) = WORD1(v50);
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  if ((*(_QWORD *)(a2 + 132) & 0x100) != 0)
  {
LABEL_135:
    v117 = "__HAVE_STITCHING_THREADGROUP_VARIABLES__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
LABEL_136:
  if ((*(_QWORD *)(a2 + 140) & 0x20000000000) == 0)
  {
    v117 = "__CONSTANT_CFSTRINGS__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
  {
    v117 = "OBJC_NEW_PROPERTIES";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
  if ((*(_QWORD *)(a2 + 8) & 0x4000000000) != 0)
  {
    v117 = "__PASCAL_STRINGS__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
  if ((*(_QWORD *)(a2 + 20) & 0x20000000000) != 0)
  {
    v117 = "__block";
    v119 = 259;
    v114[0] = "__attribute__((__blocks__(byref)))";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "__BLOCKS__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
  v52 = *(_QWORD *)(a2 + 8);
  if ((*(_BYTE *)a2 & 0x10) == 0 && (v52 & 0x100000000000) != 0)
  {
    v117 = "__EXCEPTIONS";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v52 = *(_QWORD *)(a2 + 8);
  }
  if ((_DWORD)v52 && (v52 & 0x8000000000000) != 0)
  {
    v117 = "__GXX_RTTI";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
  v53 = *(_DWORD *)(a2 + 240) & 7;
  if (v53 != 3)
  {
    if (v53 == 2)
    {
      v54 = "__SEH__";
    }
    else
    {
      if (v53 != 1)
        goto LABEL_168;
      v54 = "__USING_SJLJ_EXCEPTIONS__";
    }
    goto LABEL_167;
  }
  v55 = *(_DWORD *)(a1 + 56);
  if (v55 <= 0x28 && ((1 << v55) & 0x18000000006) != 0)
  {
    v54 = "__ARM_DWARF_EH__";
LABEL_167:
    v117 = v54;
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
LABEL_168:
  if ((*(_DWORD *)(a2 + 52) & 0x200) != 0)
  {
    v117 = "__DEPRECATED";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
  v56 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 0x110) == 0x100)
  {
    v117 = "__private_extern__";
    v119 = 259;
    v114[0] = "extern";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v56 = *(_QWORD *)a2;
  }
  if ((~(_DWORD)v56 & 0x2000020) == 0)
  {
    v117 = "_WCHAR_T_DEFINED";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "_NATIVE_WCHAR_T_DEFINED";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
  v117 = "__clang_literal_encoding__";
  v119 = 259;
  v114[0] = "\"UTF-8\"";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  if (sub_22F1E724C((_QWORD *)a1, *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 128)) < 0x20)
  {
    v117 = "__clang_wide_literal_encoding__";
    v119 = 259;
    v57 = "\"UTF-16\"";
  }
  else
  {
    v117 = "__clang_wide_literal_encoding__";
    v119 = 259;
    v57 = "\"UTF-32\"";
  }
  v114[0] = v57;
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v58 = *(_BYTE *)(a2 + 28);
  if ((v58 & 8) != 0)
  {
    v117 = "__OPTIMIZE__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v58 = *(_BYTE *)(a2 + 28);
  }
  if ((v58 & 0x10) != 0)
  {
    v117 = "__OPTIMIZE_SIZE__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
  v59 = *(_DWORD *)(a2 + 52);
  if ((v59 & 0x400) != 0)
  {
    v117 = "__FAST_MATH__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v59 = *(_DWORD *)(a2 + 52);
  }
  if ((v59 & 0x800) != 0)
  {
    v117 = "__RELAXED_MATH__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
  if ((*(_BYTE *)(a2 + 127) & 1) != 0)
  {
    v117 = "__METAL_MATH_FP32_FUNCTIONS_FAST__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
  v117 = "__ORDER_LITTLE_ENDIAN__";
  v119 = 259;
  v114[0] = "1234";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__ORDER_BIG_ENDIAN__";
  v119 = 259;
  v114[0] = "4321";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__ORDER_PDP_ENDIAN__";
  v119 = 259;
  v114[0] = "3412";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  if (*(_BYTE *)(a1 + 80))
  {
    v117 = "__BYTE_ORDER__";
    v119 = 259;
    v114[0] = "__ORDER_BIG_ENDIAN__";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v60 = "__BIG_ENDIAN__";
  }
  else
  {
    v117 = "__BYTE_ORDER__";
    v119 = 259;
    v114[0] = "__ORDER_LITTLE_ENDIAN__";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v60 = "__LITTLE_ENDIAN__";
  }
  v117 = v60;
  v119 = 259;
  v114[0] = "1";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v61 = *(_QWORD *)(*(_QWORD *)a1 - 24);
  v62 = a1 + v61;
  v63 = *(unsigned __int8 *)(a1 + v61);
  if (v63 == 64)
  {
    if (*(_BYTE *)(v62 + 20) != 64 || *(_BYTE *)(v62 + 4) != 32)
      goto LABEL_198;
    v117 = "_LP64";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "__LP64__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v61 = *(_QWORD *)(*(_QWORD *)a1 - 24);
    v63 = *(unsigned __int8 *)(a1 + v61);
  }
  if (v63 == 32)
  {
    v64 = a1 + v61;
    if (*(_BYTE *)(v64 + 20) == 32 && *(_BYTE *)(v64 + 4) == 32)
    {
      v117 = "_ILP32";
      v119 = 259;
      v114[0] = "1";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__ILP32__";
      v119 = 259;
      v114[0] = "1";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    }
  }
LABEL_198:
  v117 = "__CHAR_BIT__";
  v119 = 259;
  v116 = 264;
  LODWORD(v114[0]) = 8;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__BOOL_WIDTH__";
  v119 = 259;
  v65 = *(unsigned __int8 *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 2);
  v116 = 264;
  LODWORD(v114[0]) = v65;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__SHRT_WIDTH__";
  v119 = 259;
  v116 = 264;
  LODWORD(v114[0]) = 16;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__INT_WIDTH__";
  v119 = 259;
  v66 = *(unsigned __int8 *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 4);
  v116 = 264;
  LODWORD(v114[0]) = v66;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__LONG_WIDTH__";
  v119 = 259;
  v67 = *(unsigned __int8 *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 20);
  v116 = 264;
  LODWORD(v114[0]) = v67;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__LLONG_WIDTH__";
  v119 = 259;
  v68 = *(unsigned __int8 *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 22);
  v116 = 264;
  LODWORD(v114[0]) = v68;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v108.__r_.__value_.__r.__words[0] = 0;
  v108.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v117 = "__BITINT_MAXWIDTH__";
  v119 = 259;
  v116 = 266;
  v114[0] = &v108;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__SCHAR_MAX__";
  v119 = 259;
  sub_22E73A68C((llvm::Twine *)&v117, 1, (_QWORD *)a1, a5);
  v117 = "__SHRT_MAX__";
  v119 = 259;
  sub_22E73A68C((llvm::Twine *)&v117, 3, (_QWORD *)a1, a5);
  v117 = "__INT_MAX__";
  v119 = 259;
  sub_22E73A68C((llvm::Twine *)&v117, 5, (_QWORD *)a1, a5);
  v117 = "__LONG_MAX__";
  v119 = 259;
  sub_22E73A68C((llvm::Twine *)&v117, 7, (_QWORD *)a1, a5);
  v117 = "__LONG_LONG_MAX__";
  v119 = 259;
  sub_22E73A68C((llvm::Twine *)&v117, 9, (_QWORD *)a1, a5);
  v117 = "__WCHAR";
  v119 = 259;
  sub_22E73A908((uint64_t *)&v117, *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 128), (_QWORD *)a1, a5);
  v117 = "__WINT";
  v119 = 259;
  sub_22E73A908((uint64_t *)&v117, *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 132), (_QWORD *)a1, a5);
  v117 = "__INTMAX";
  v119 = 259;
  sub_22E73A908((uint64_t *)&v117, *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 116), (_QWORD *)a1, a5);
  v117 = "__SIZE";
  v119 = 259;
  sub_22E73A908((uint64_t *)&v117, *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 112), (_QWORD *)a1, a5);
  v117 = "__UINTMAX";
  v119 = 259;
  sub_22E73A908((uint64_t *)&v117, dword_22F45DFF0[*(int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 116) - 1], (_QWORD *)a1, a5);
  v117 = "__PTRDIFF";
  v119 = 259;
  sub_22E73A908((uint64_t *)&v117, *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 120), (_QWORD *)a1, a5);
  v117 = "__INTPTR";
  v119 = 259;
  sub_22E73A908((uint64_t *)&v117, *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 124), (_QWORD *)a1, a5);
  v117 = "__UINTPTR";
  v119 = 259;
  sub_22E73A908((uint64_t *)&v117, dword_22F45DFF0[*(int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 124) - 1], (_QWORD *)a1, a5);
  v69 = *(unsigned __int8 *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
  v119 = 261;
  v117 = "__SIZEOF_DOUBLE__";
  v118 = 17;
  v116 = 264;
  LODWORD(v114[0]) = v69 >> 3;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v70 = *(unsigned __int8 *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 10);
  v119 = 261;
  v117 = "__SIZEOF_FLOAT__";
  v118 = 16;
  v116 = 264;
  LODWORD(v114[0]) = v70 >> 3;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v71 = *(unsigned __int8 *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 4);
  v119 = 261;
  v117 = "__SIZEOF_INT__";
  v118 = 14;
  v116 = 264;
  LODWORD(v114[0]) = v71 >> 3;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v72 = *(unsigned __int8 *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 20);
  v119 = 261;
  v117 = "__SIZEOF_LONG__";
  v118 = 15;
  v116 = 264;
  LODWORD(v114[0]) = v72 >> 3;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v73 = *(unsigned __int8 *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 14);
  v119 = 261;
  v117 = "__SIZEOF_LONG_DOUBLE__";
  v118 = 22;
  v116 = 264;
  LODWORD(v114[0]) = v73 >> 3;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v74 = *(unsigned __int8 *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 22);
  v119 = 261;
  v117 = "__SIZEOF_LONG_LONG__";
  v118 = 20;
  v116 = 264;
  LODWORD(v114[0]) = v74 >> 3;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v75 = *(unsigned __int8 *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  v119 = 261;
  v117 = "__SIZEOF_POINTER__";
  v118 = 18;
  v116 = 264;
  LODWORD(v114[0]) = v75 >> 3;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v119 = 261;
  v117 = "__SIZEOF_SHORT__";
  v118 = 16;
  v116 = 264;
  LODWORD(v114[0]) = 2;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v76 = sub_22F1E724C((_QWORD *)a1, *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 120));
  v119 = 261;
  v117 = "__SIZEOF_PTRDIFF_T__";
  v118 = 20;
  v116 = 264;
  LODWORD(v114[0]) = v76 >> 3;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v77 = sub_22F1E724C((_QWORD *)a1, *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 112));
  v119 = 261;
  v117 = "__SIZEOF_SIZE_T__";
  v118 = 17;
  v116 = 264;
  LODWORD(v114[0]) = v77 >> 3;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v78 = sub_22F1E724C((_QWORD *)a1, *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 128));
  v119 = 261;
  v117 = "__SIZEOF_WCHAR_T__";
  v118 = 18;
  v116 = 264;
  LODWORD(v114[0]) = v78 >> 3;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v79 = sub_22F1E724C((_QWORD *)a1, *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 132));
  v119 = 261;
  v117 = "__SIZEOF_WINT_T__";
  v118 = 17;
  v116 = 264;
  LODWORD(v114[0]) = v79 >> 3;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1))
  {
    v119 = 261;
    v117 = "__SIZEOF_INT128__";
    v118 = 17;
    v116 = 264;
    LODWORD(v114[0]) = 16;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
  v117 = "__INTMAX_TYPE__";
  v119 = 259;
  sub_22E73AA44((llvm::Twine *)&v117, *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 116), a5);
  v117 = "__INTMAX";
  v119 = 259;
  sub_22E73AAA0((uint64_t)&v117, *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 116), a5);
  v117 = "__INTMAX_C_SUFFIX__";
  v119 = 259;
  v80 = (_BYTE *)sub_22F1E71B0(a1, *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 116));
  v116 = 257;
  if (*v80)
  {
    v114[0] = v80;
    v81 = 3;
  }
  else
  {
    v81 = 1;
  }
  LOBYTE(v116) = v81;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__UINTMAX_TYPE__";
  v119 = 259;
  sub_22E73AA44((llvm::Twine *)&v117, dword_22F45DFF0[*(int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 116) - 1], a5);
  v117 = "__UINTMAX";
  v119 = 259;
  sub_22E73AAA0((uint64_t)&v117, dword_22F45DFF0[*(int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 116) - 1], a5);
  v117 = "__UINTMAX_C_SUFFIX__";
  v119 = 259;
  v82 = (_BYTE *)sub_22F1E71B0(a1, dword_22F45DFF0[*(int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 116) - 1]);
  v116 = 257;
  if (*v82)
  {
    v114[0] = v82;
    v83 = 3;
  }
  else
  {
    v83 = 1;
  }
  LOBYTE(v116) = v83;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__PTRDIFF_TYPE__";
  v119 = 259;
  sub_22E73AA44((llvm::Twine *)&v117, *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 120), a5);
  v117 = "__PTRDIFF";
  v119 = 259;
  sub_22E73AAA0((uint64_t)&v117, *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 120), a5);
  v117 = "__INTPTR_TYPE__";
  v119 = 259;
  sub_22E73AA44((llvm::Twine *)&v117, *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 124), a5);
  v117 = "__INTPTR";
  v119 = 259;
  sub_22E73AAA0((uint64_t)&v117, *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 124), a5);
  v117 = "__SIZE_TYPE__";
  v119 = 259;
  sub_22E73AA44((llvm::Twine *)&v117, *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 112), a5);
  v117 = "__SIZE";
  v119 = 259;
  sub_22E73AAA0((uint64_t)&v117, *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 112), a5);
  v117 = "__WCHAR_TYPE__";
  v119 = 259;
  sub_22E73AA44((llvm::Twine *)&v117, *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 128), a5);
  v117 = "__WINT_TYPE__";
  v119 = 259;
  sub_22E73AA44((llvm::Twine *)&v117, *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 132), a5);
  v117 = "__SIG_ATOMIC";
  v119 = 259;
  sub_22E73A908((uint64_t *)&v117, *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 152), (_QWORD *)a1, a5);
  v117 = "__CHAR16_TYPE__";
  v119 = 259;
  sub_22E73AA44((llvm::Twine *)&v117, *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 136), a5);
  v117 = "__CHAR32_TYPE__";
  v119 = 259;
  sub_22E73AA44((llvm::Twine *)&v117, *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 140), a5);
  v117 = "__UINTPTR_TYPE__";
  v119 = 259;
  sub_22E73AA44((llvm::Twine *)&v117, dword_22F45DFF0[*(int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 124) - 1], a5);
  v117 = "__UINTPTR";
  v119 = 259;
  sub_22E73AAA0((uint64_t)&v117, dword_22F45DFF0[*(int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 124) - 1], a5);
  if ((*(_BYTE *)(a2 + 3) & 1) != 0)
    sub_22E73AC54(a5, "HALF", 4uLL, *(llvm::APFloatBase **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 56), "H", 1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1))
    sub_22E73AC54(a5, "FLT16", 5uLL, *(llvm::APFloatBase **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 56), "F16", 3);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    sub_22E73AC54(a5, "BFLT16", 6uLL, *(llvm::APFloatBase **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 64), "BF16", 4);
  sub_22E73AC54(a5, "FLT", 3uLL, *(llvm::APFloatBase **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 72), "F", 1);
  sub_22E73AC54(a5, "DBL", 3uLL, *(llvm::APFloatBase **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80), "", 0);
  sub_22E73AC54(a5, "LDBL", 4uLL, *(llvm::APFloatBase **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 88), "L", 1);
  v117 = "__POINTER_WIDTH__";
  v119 = 259;
  v84 = *(unsigned __int8 *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  v116 = 265;
  LODWORD(v114[0]) = v84;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__BIGGEST_ALIGNMENT__";
  v119 = 259;
  v85 = *(unsigned __int16 *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 42) >> 3;
  v116 = 264;
  LODWORD(v114[0]) = v85;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  if ((*(_DWORD *)(a2 + 52) & 0x800000) == 0)
  {
    v117 = "__CHAR_UNSIGNED__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
  v86 = *(_QWORD *)(*(_QWORD *)a1 - 24);
  if (((1 << *(_DWORD *)(a1 + v86 + 128)) & 0x2AA) == 0)
  {
    v117 = "__WCHAR_UNSIGNED__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v86 = *(_QWORD *)(*(_QWORD *)a1 - 24);
  }
  if (((1 << *(_DWORD *)(a1 + v86 + 132)) & 0x2AA) == 0)
  {
    v117 = "__WINT_UNSIGNED__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
  sub_22E73B6A0(1, (_QWORD *)a1, a5);
  sub_22E73B6A0(3, (_QWORD *)a1, a5);
  v87 = *(_QWORD *)(*(_QWORD *)a1 - 24);
  v88 = *(unsigned __int8 *)(a1 + v87 + 4);
  if (v88 >= 0x11)
  {
    sub_22E73B6A0(5, (_QWORD *)a1, a5);
    v87 = *(_QWORD *)(*(_QWORD *)a1 - 24);
    v88 = *(unsigned __int8 *)(a1 + v87 + 4);
  }
  v89 = *(unsigned __int8 *)(a1 + v87 + 20);
  if (v89 > v88)
  {
    sub_22E73B6A0(7, (_QWORD *)a1, a5);
    v87 = *(_QWORD *)(*(_QWORD *)a1 - 24);
    v89 = *(unsigned __int8 *)(a1 + v87 + 20);
  }
  if (*(unsigned __int8 *)(a1 + v87 + 22) > v89)
    sub_22E73B6A0(9, (_QWORD *)a1, a5);
  sub_22E73B6A0(2, (_QWORD *)a1, a5);
  sub_22E73B864(2, (_QWORD *)a1, a5);
  sub_22E73B864(1, (_QWORD *)a1, a5);
  sub_22E73B6A0(4, (_QWORD *)a1, a5);
  sub_22E73B864(4, (_QWORD *)a1, a5);
  sub_22E73B864(3, (_QWORD *)a1, a5);
  v90 = *(_QWORD *)(*(_QWORD *)a1 - 24);
  v91 = *(unsigned __int8 *)(a1 + v90 + 4);
  if (v91 >= 0x11)
  {
    sub_22E73B6A0(6, (_QWORD *)a1, a5);
    sub_22E73B864(6, (_QWORD *)a1, a5);
    sub_22E73B864(5, (_QWORD *)a1, a5);
    v90 = *(_QWORD *)(*(_QWORD *)a1 - 24);
    v91 = *(unsigned __int8 *)(a1 + v90 + 4);
  }
  v92 = *(unsigned __int8 *)(a1 + v90 + 20);
  if (v92 > v91)
  {
    sub_22E73B6A0(8, (_QWORD *)a1, a5);
    sub_22E73B864(8, (_QWORD *)a1, a5);
    sub_22E73B864(7, (_QWORD *)a1, a5);
    v90 = *(_QWORD *)(*(_QWORD *)a1 - 24);
    v92 = *(unsigned __int8 *)(a1 + v90 + 20);
  }
  if (*(unsigned __int8 *)(a1 + v90 + 22) > v92)
  {
    sub_22E73B6A0(10, (_QWORD *)a1, a5);
    sub_22E73B864(10, (_QWORD *)a1, a5);
    sub_22E73B864(9, (_QWORD *)a1, a5);
  }
  v93 = 1;
  sub_22E73B974(8, 1, (_QWORD *)a1, a5);
  sub_22E73B974(8, 0, (_QWORD *)a1, a5);
  sub_22E73B974(16, 1, (_QWORD *)a1, a5);
  sub_22E73B974(16, 0, (_QWORD *)a1, a5);
  sub_22E73B974(32, 1, (_QWORD *)a1, a5);
  sub_22E73B974(32, 0, (_QWORD *)a1, a5);
  sub_22E73B974(64, 1, (_QWORD *)a1, a5);
  sub_22E73B974(64, 0, (_QWORD *)a1, a5);
  sub_22E73BB34(8, 1, (_QWORD *)a1, a5);
  sub_22E73BB34(8, 0, (_QWORD *)a1, a5);
  sub_22E73BB34(16, 1, (_QWORD *)a1, a5);
  sub_22E73BB34(16, 0, (_QWORD *)a1, a5);
  sub_22E73BB34(32, 1, (_QWORD *)a1, a5);
  sub_22E73BB34(32, 0, (_QWORD *)a1, a5);
  sub_22E73BB34(64, 1, (_QWORD *)a1, a5);
  sub_22E73BB34(64, 0, (_QWORD *)a1, a5);
  v117 = "__USER_LABEL_PREFIX__";
  v119 = 259;
  v94 = *(_BYTE **)(a1 + 128);
  v116 = 257;
  if (*v94)
  {
    v114[0] = v94;
    v93 = 3;
  }
  LOBYTE(v116) = v93;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  if ((*(_QWORD *)(a2 + 20) & 0x80000000000) == 0)
  {
    v117 = "__NO_MATH_ERRNO__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
  if ((*(_DWORD *)(a2 + 52) & 0x1400) != 0)
  {
    v117 = "__FINITE_MATH_ONLY__";
    v119 = 259;
    v114[0] = "1";
  }
  else
  {
    v117 = "__FINITE_MATH_ONLY__";
    v119 = 259;
    v114[0] = "0";
  }
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  if (*(_DWORD *)(a2 + 8))
  {
    if ((*(_DWORD *)(a2 + 52) & 0x80) != 0 || (*(_BYTE *)(a2 + 1) & 1) != 0)
      v95 = "__GNUC_GNU_INLINE__";
    else
      v95 = "__GNUC_STDC_INLINE__";
    v117 = v95;
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "__GCC_ATOMIC_TEST_AND_SET_TRUEVAL";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
  __p[0] = (void *)a1;
  __p[1] = a5;
  v111 = (std::string *)a2;
  v117 = "__CLANG_ATOMIC_";
  v119 = 259;
  sub_22E73BCF4((_QWORD **)__p, (uint64_t)&v117);
  if (*(_DWORD *)(a2 + 8))
  {
    v117 = "__GCC_ATOMIC_";
    v119 = 259;
    sub_22E73BCF4((_QWORD **)__p, (uint64_t)&v117);
  }
  v96 = *(unsigned int *)(a2 + 52);
  if ((v96 & 0x100) != 0)
  {
    v117 = "__NO_INLINE__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v97 = (unint64_t)*(unsigned int *)(a2 + 52) >> 2;
  }
  else
  {
    v97 = v96 >> 2;
  }
  v98 = v97 & 3;
  if ((v97 & 3) != 0)
  {
    v117 = "__PIC__";
    v119 = 259;
    v116 = 264;
    LODWORD(v114[0]) = v97 & 3;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "__pic__";
    v119 = 259;
    v116 = 264;
    LODWORD(v114[0]) = v98;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    if ((*(_DWORD *)(a2 + 52) & 0x10) != 0)
    {
      v117 = "__PIE__";
      v119 = 259;
      v116 = 264;
      LODWORD(v114[0]) = v98;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__pie__";
      v119 = 259;
      v116 = 264;
      LODWORD(v114[0]) = v98;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    }
  }
  v117 = "__FLT_RADIX__";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v117 = "__DECIMAL_DIG__";
  v119 = 259;
  v114[0] = "__LDBL_DECIMAL_DIG__";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  if ((*(_BYTE *)(a2 + 3) & 1) != 0)
  {
    v117 = "__HALF_RADIX__";
    v119 = 259;
    v114[0] = "2";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1))
  {
    v117 = "__FLT16_RADIX__";
    v119 = 259;
    v114[0] = "2";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
  {
    v117 = "__BFLT16_RADIX__";
    v119 = 259;
    v114[0] = "2";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
  v117 = "__DBL_RADIX__";
  v119 = 259;
  v114[0] = "2";
  v116 = 259;
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  v99 = *(_WORD *)(a2 + 248) >> 6;
  if (v99 == 3)
  {
    v117 = "__SSP_ALL__";
    v119 = 259;
    v114[0] = "3";
    v116 = 259;
    goto LABEL_263;
  }
  if (v99 == 2)
  {
    v117 = "__SSP_STRONG__";
    v119 = 259;
    v114[0] = "2";
    v116 = 259;
LABEL_263:
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v100 = a3;
    goto LABEL_264;
  }
  v100 = a3;
  if (v99 == 1)
  {
    v117 = "__SSP__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
LABEL_264:
  if (*(_BYTE *)(a4 + 304))
  {
    v117 = "__clang_analyzer__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
  if ((*(_QWORD *)(a2 + 140) & 0x400000000000000) != 0)
  {
    v117 = "__FAST_RELAXED_MATH__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
  if (*(_DWORD *)(v100 + 320) == 30 || (*(_BYTE *)(a2 + 246) & 6) != 0)
  {
    v117 = "__weak";
    v119 = 259;
    v114[0] = "__attribute__((objc_gc(weak)))";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "__strong";
    v119 = 259;
    v114[0] = "__attribute__((objc_gc(strong)))";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "__autoreleasing";
    v119 = 259;
    v116 = 257;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "__unsafe_unretained";
    v119 = 259;
    v116 = 257;
  }
  else
  {
    if ((*(_BYTE *)(a2 + 1) & 0x40) == 0)
      goto LABEL_272;
    v117 = "__weak";
    v119 = 259;
    v114[0] = "__attribute__((objc_ownership(weak)))";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "__strong";
    v119 = 259;
    v114[0] = "__attribute__((objc_ownership(strong)))";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "__autoreleasing";
    v119 = 259;
    v114[0] = "__attribute__((objc_ownership(autoreleasing)))";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "__unsafe_unretained";
    v119 = 259;
    v114[0] = "__attribute__((objc_ownership(none)))";
    v116 = 259;
  }
  sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
LABEL_272:
  v101 = *(_DWORD *)(a1 + 68);
  if (v101 <= 0x21 && ((1 << v101) & 0x3F0000888) != 0)
  {
    v117 = "__nonnull";
    v119 = 259;
    v114[0] = "_Nonnull";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "__null_unspecified";
    v119 = 259;
    v114[0] = "_Null_unspecified";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "__nullable";
    v119 = 259;
    v114[0] = "_Nullable";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v101 = *(_DWORD *)(a1 + 68);
  }
  if (v101 <= 0x21 && ((1 << v101) & 0x3F0000888) != 0)
  {
    v117 = "__FP_ILOGB0__";
    v119 = 259;
    v114[0] = "(-__INT_MAX__ - 1)";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "__FP_ILOGBNAN__";
    v119 = 259;
    v114[0] = "(-__INT_MAX__ - 1)";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v101 = *(_DWORD *)(a1 + 68);
  }
  if (v101 <= 0x21 && ((1 << v101) & 0x3F0000888) != 0 && *(_DWORD *)(a1 + 72) == 20)
  {
    v117 = "__APPLE_EMBEDDED_SIMULATOR__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
  v102 = *(_QWORD *)(a2 + 72);
  if ((v102 & 0x200000000) == 0)
  {
    if ((int)v102 > 44)
    {
      switch((_DWORD)v102)
      {
        case '-':
          v117 = "_OPENMP";
          v119 = 259;
          v103 = "201511";
          goto LABEL_298;
        case '3':
          v117 = "_OPENMP";
          v119 = 259;
          v103 = "202011";
          goto LABEL_298;
        case '4':
          v117 = "_OPENMP";
          v119 = 259;
          v103 = "202111";
          goto LABEL_298;
      }
LABEL_297:
      v117 = "_OPENMP";
      v119 = 259;
      v103 = "201811";
      goto LABEL_298;
    }
    if ((_DWORD)v102)
    {
      if ((_DWORD)v102 == 31)
      {
        v117 = "_OPENMP";
        v119 = 259;
        v103 = "201107";
        goto LABEL_298;
      }
      if ((_DWORD)v102 == 40)
      {
        v117 = "_OPENMP";
        v119 = 259;
        v103 = "201307";
LABEL_298:
        v114[0] = v103;
        v116 = 259;
        sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
        goto LABEL_299;
      }
      goto LABEL_297;
    }
  }
LABEL_299:
  v104 = *(_WORD *)(a2 + 96);
  if ((v104 & 0x80) != 0 && (*(_BYTE *)(a2 + 68) & 0x40) == 0)
  {
    v117 = "__CUDA_ARCH__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v104 = *(_WORD *)(a2 + 96);
  }
  if ((v104 & 0x400) != 0 || (*(_DWORD *)(a2 + 52) & 0x400) != 0)
  {
    v117 = "__CLANG_CUDA_APPROX_TRANSCENDENTALS__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
  if ((*(_BYTE *)(a2 + 104) & 4) != 0)
  {
    v117 = "__SYCL_DEVICE_ONLY__";
    v119 = 259;
    v114[0] = "1";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
  if ((*(_DWORD *)(a2 + 52) & 0x40000000) != 0)
  {
    sub_22F2AC6E0((_QWORD *)a1, a2, a5);
    if ((*(_DWORD *)(a1 + 56) & 0xFFFFFFFC | 2) == 0x3A)
    {
      v117 = "__IMAGE_SUPPORT__";
      v119 = 259;
      v114[0] = "1";
      v116 = 259;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    }
  }
  if ((*(_BYTE *)(a2 + 104) & 0x20) != 0)
  {
    v117 = "__MAX_BUFFERS__";
    v119 = 259;
    v114[0] = *(unsigned int *)(a1 + 172);
    v115 = "u";
    v116 = 776;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "__MAX_COLORS__";
    v119 = 259;
    v114[0] = *(unsigned int *)(a1 + 176);
    v115 = "u";
    v116 = 776;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "__MAX_CONSTANT_BUFFERS__";
    v119 = 259;
    v114[0] = *(unsigned int *)(a1 + 180);
    v115 = "u";
    v116 = 776;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "__MAX_CONSTANT_BUFFER_SIZE__";
    v119 = 259;
    v114[0] = *(unsigned int *)(a1 + 184);
    v115 = "u";
    v116 = 776;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "__MAX_SAMPLERS__";
    v119 = 259;
    v114[0] = *(unsigned int *)(a1 + 204);
    v115 = "u";
    v116 = 776;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "__MAX_TEXTURES__";
    v119 = 259;
    v114[0] = *(unsigned int *)(a1 + 212);
    v115 = "u";
    v116 = 776;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "__MAX_READ_WRITE_TEXTURES__";
    v119 = 259;
    v114[0] = *(unsigned int *)(a1 + 200);
    v115 = "u";
    v116 = 776;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    if ((*(_BYTE *)(a2 + 131) & 0x10) != 0)
    {
      v117 = "__MAX_PATCH_DATA_ATTRIBUTES__";
      v119 = 259;
      v114[0] = *(unsigned int *)(a1 + 196);
      v115 = "u";
      v116 = 776;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
      v117 = "__MAX_TESSELLATION_CONTROL_POINTS__";
      v119 = 259;
      v114[0] = *(unsigned int *)(a1 + 208);
      v115 = "u";
      v116 = 776;
      sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    }
    v117 = "__MAX_THREADGROUP_BUFFERS__";
    v119 = 259;
    v114[0] = *(unsigned int *)(a1 + 216);
    v115 = "u";
    v116 = 776;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) && (~*(_DWORD *)a2 & 0x80000100) == 0)
  {
    v117 = "__GLIBCXX_TYPE_INT_N_0";
    v119 = 259;
    v114[0] = "__int128";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
    v117 = "__GLIBCXX_BITSIZE_INT_N_0";
    v119 = 259;
    v114[0] = "128";
    v116 = 259;
    sub_22E7333BC(a5, (llvm::Twine *)&v117, (llvm::Twine *)v114);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, llvm::raw_ostream **))(*(_QWORD *)a1 + 256))(a1, a2, a5);
}

void sub_22E73A68C(llvm::Twine *a1, int a2, _QWORD *a3, llvm::raw_ostream **a4)
{
  unsigned int v8;
  const char *v9;
  size_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  size_t v17;
  size_t v18;
  void *__p[2];
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  void *__src;
  size_t __len[2];
  size_t v25;
  __int16 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v8 = sub_22F1E724C(a3, a2);
  v9 = (const char *)sub_22F1E71B0((uint64_t)a3, a2);
  v10 = strlen(v9);
  if (((1 << a2) & 0x2AA) != 0)
  {
    v22 = v8;
    if (v8 > 0x40)
    {
      v12 = &v21;
      llvm::APInt::initSlowCase((llvm::APInt *)&v21);
      LODWORD(v11) = v8 - 1;
      if (v22 >= 0x41)
        v12 = (unint64_t *)(v21 + 8 * (v11 >> 6));
    }
    else
    {
      v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
      if (!v8)
        v11 = 0;
      v21 = v11;
      LOBYTE(v11) = v8 - 1;
      v12 = &v21;
    }
    *v12 &= ~(1 << v11);
  }
  else
  {
    v22 = v8;
    if (v8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v21);
    }
    else
    {
      v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
      if (!v8)
        v13 = 0;
      v21 = v13;
    }
  }
  __src = &v25;
  *(_OWORD *)__len = xmmword_22F455490;
  llvm::APInt::toString();
  v14 = (void *)__len[0];
  if (__len[0] >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v15 = __src;
  if (__len[0] >= 0x17)
  {
    v17 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len[0] | 7) != 0x17)
      v17 = __len[0] | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    __p[1] = v14;
    v20 = v18 | 0x8000000000000000;
    __p[0] = v16;
    goto LABEL_18;
  }
  HIBYTE(v20) = __len[0];
  v16 = __p;
  if (__len[0])
LABEL_18:
    memmove(v16, v15, (size_t)v14);
  *((_BYTE *)v14 + (_QWORD)v16) = 0;
  if (__src != &v25)
    free(__src);
  __src = __p;
  __len[1] = (size_t)v9;
  v25 = v10;
  v26 = 1284;
  sub_22E7333BC(a4, a1, (llvm::Twine *)&__src);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
  if (v22 >= 0x41)
  {
    if (v21)
      MEMORY[0x2348A0E84](v21, 0x1000C8000313F17);
  }
}

uint64_t sub_22E73A908(uint64_t *a1, int a2, _QWORD *a3, llvm::raw_ostream **a4)
{
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  _QWORD v18[4];
  __int16 v19;
  _QWORD v20[4];
  __int16 v21;

  v8 = *((unsigned __int8 *)a1 + 32);
  if (v8 == 1)
  {
    v20[0] = "_MAX__";
    v9 = 259;
    goto LABEL_5;
  }
  if (!*((_BYTE *)a1 + 32))
  {
    v9 = 256;
LABEL_5:
    v21 = v9;
    goto LABEL_10;
  }
  v10 = a1[1];
  if (*((_BYTE *)a1 + 33) == 1)
  {
    v11 = (uint64_t *)*a1;
  }
  else
  {
    LOBYTE(v8) = 2;
    v11 = a1;
  }
  v20[0] = v11;
  v20[1] = v10;
  v20[2] = "_MAX__";
  LOBYTE(v21) = v8;
  HIBYTE(v21) = 3;
LABEL_10:
  sub_22E73A68C((llvm::Twine *)v20, a2, a3, a4);
  v12 = *((unsigned __int8 *)a1 + 32);
  if (v12 == 1)
  {
    v18[0] = "_WIDTH__";
    v13 = 259;
    goto LABEL_14;
  }
  if (!*((_BYTE *)a1 + 32))
  {
    v13 = 256;
LABEL_14:
    v19 = v13;
    goto LABEL_19;
  }
  v14 = a1[1];
  if (*((_BYTE *)a1 + 33) == 1)
  {
    v15 = (uint64_t *)*a1;
  }
  else
  {
    LOBYTE(v12) = 2;
    v15 = a1;
  }
  v18[0] = v15;
  v18[1] = v14;
  v18[2] = "_WIDTH__";
  LOBYTE(v19) = v12;
  HIBYTE(v19) = 3;
LABEL_19:
  v16 = sub_22F1E724C(a3, a2);
  v21 = 264;
  LODWORD(v20[0]) = v16;
  return sub_22E7333BC(a4, (llvm::Twine *)v18, (llvm::Twine *)v20);
}

uint64_t sub_22E73AA44(llvm::Twine *a1, int a2, llvm::raw_ostream **a3)
{
  char *v3;
  char v4;
  char *v6;
  char v7;
  char v8;

  v3 = off_24FA70DE0[a2 - 1];
  v4 = 1;
  v8 = 1;
  if (*v3)
  {
    v6 = v3;
    v4 = 3;
  }
  v7 = v4;
  return sub_22E7333BC(a3, a1, (llvm::Twine *)&v6);
}

size_t sub_22E73AAA0(uint64_t a1, int a2, llvm::raw_ostream **a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  _BYTE *v8;
  const char *v9;
  size_t result;
  unsigned int v11;
  size_t v12;
  unsigned __int8 *v13;
  int v14;
  char v15;
  char v16;
  const char **v17;
  char v18;
  const char *v19;
  const char *v20;
  const char *v21;
  unsigned int v22;
  _QWORD v23[4];
  __int16 v24;
  _QWORD v25[4];
  __int16 v26;
  _QWORD v27[4];
  __int16 v28;
  const char *v29;
  const char *v30;
  const char *v31;
  __int16 v32;
  _QWORD v33[4];
  __int16 v34;
  _QWORD v35[4];
  char v36;
  char v37;

  v7 = 8 * a2 - 8;
  v8 = *(char **)((char *)off_24FA70E30 + v7);
  v9 = *(char **)((char *)off_24FA70E80 + v7);
  result = strlen(v9);
  v11 = *v8;
  if (*v8)
  {
    v12 = result;
    v13 = v8 + 1;
    while (1)
    {
      v14 = *(unsigned __int8 *)(a1 + 32);
      if (v14 == 1)
        break;
      if (*(_BYTE *)(a1 + 32))
      {
        v20 = *(const char **)a1;
        v21 = *(const char **)(a1 + 8);
        v18 = 2;
        if (*(_BYTE *)(a1 + 33) != 1)
        {
          LOBYTE(v14) = 2;
          v20 = (const char *)a1;
        }
        v29 = v20;
        v30 = v21;
        v19 = "_FMT";
        v31 = "_FMT";
        LOBYTE(v32) = v14;
        HIBYTE(v32) = 3;
        v4 = v4 & 0xFFFFFFFFFFFFFF00 | v11;
        v17 = &v29;
        goto LABEL_10;
      }
      v15 = 0;
      v32 = 256;
      v4 = v4 & 0xFFFFFFFFFFFFFF00 | v11;
      v34 = 256;
      v16 = 1;
LABEL_11:
      v36 = v15;
      v37 = v16;
      v23[0] = "\"";
      v23[2] = v9;
      v23[3] = v12;
      v24 = 1283;
      v3 = v11 | v3 & 0xFFFFFFFFFFFFFF00;
      v25[0] = v23;
      v25[2] = v3;
      v26 = 1794;
      v27[0] = v25;
      v27[2] = "\"";
      v28 = 770;
      result = sub_22E7333BC(a3, (llvm::Twine *)v35, (llvm::Twine *)v27);
      v22 = *v13++;
      v11 = v22;
      if (!v22)
        return result;
    }
    v17 = (const char **)"_FMT";
    v29 = "_FMT";
    v32 = 259;
    v4 = v4 & 0xFFFFFFFFFFFFFF00 | v11;
    v18 = 3;
    v19 = v30;
LABEL_10:
    v33[0] = v17;
    v33[1] = v19;
    v33[2] = v4;
    LOBYTE(v34) = v18;
    HIBYTE(v34) = 7;
    v16 = 3;
    v15 = 2;
    v35[0] = v33;
    v35[2] = "__";
    goto LABEL_11;
  }
  return result;
}

void sub_22E73AC54(llvm::raw_ostream **a1, const void *a2, size_t a3, llvm::APFloatBase *a4, const char *a5, uint64_t a6)
{
  const char *v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  size_t v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  llvm::APFloatBase *v21;
  llvm::APFloatBase *v22;
  llvm::APFloatBase *v23;
  llvm::APFloatBase *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  const char *v30;
  unsigned int v31;
  unsigned int v32;
  _QWORD v33[2];
  uint64_t v34;
  __int16 v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  void *v41;
  uint64_t v42;
  const char *v43;
  __int16 v44;
  _BYTE *v45;
  __int128 v46;
  _WORD v47[16];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v12 = (const char *)sub_22E73C548(a4, (uint64_t)"5.9604644775390625e-8", (uint64_t)"9.183550e-41", (uint64_t)"1.40129846e-45", (uint64_t)"4.9406564584124654e-324", (uint64_t)"3.64519953188247460253e-4951", (uint64_t)"4.94065645841246544176568792868221e-324", (uint64_t)"6.47517511943802511092443895822764655e-4966");
  v13 = 2;
  v26 = sub_22E73C5F4(a4, 3, 2, 6, 15, 18, 0x1Fu, 0x21u);
  v25 = sub_22E73C5F4(a4, 5, 4, 9, 17, 21, 0x21u, 0x24u);
  v14 = (const char *)sub_22E73C548(a4, (uint64_t)"9.765625e-4", (uint64_t)"7.812500e-03", (uint64_t)"1.19209290e-7", (uint64_t)"2.2204460492503131e-16", (uint64_t)"1.08420217248550443401e-19", (uint64_t)"4.94065645841246544176568792868221e-324", (uint64_t)"1.92592994438723585305597794258492732e-34");
  v29 = sub_22E73C5F4(a4, 11, 8, 24, 53, 64, 0x6Au, 0x71u);
  v32 = sub_22E73C5F4(a4, 4294967292, 4294967259, 4294967259, 4294966989, 4294962365, 0xFFFFFEDD, 0xFFFFECBD);
  v28 = sub_22E73C5F4(a4, 4, 38, 38, 308, 4932, 0x134u, 0x1344u);
  v31 = sub_22E73C5F4(a4, 4294967283, 4294967171, 4294967171, 4294966275, 4294950915, 0xFFFFFC38, 0xFFFFC003);
  v27 = sub_22E73C5F4(a4, 16, 128, 128, 1024, 0x4000, 0x400u, 0x4000u);
  v30 = (const char *)sub_22E73C548(a4, (uint64_t)"6.103515625e-5", (uint64_t)"1.175494e-38", (uint64_t)"1.17549435e-38", (uint64_t)"2.2250738585072014e-308", (uint64_t)"3.36210314311209350626e-4932", (uint64_t)"2.00416836000897277799610805135016e-292", (uint64_t)"3.36210314311209350626267781732175260e-4932");
  v15 = (const char *)sub_22E73C548(a4, (uint64_t)"6.5504e+4", (uint64_t)"3.389531e+38", (uint64_t)"3.40282347e+38", (uint64_t)"1.7976931348623157e+308", (uint64_t)"1.18973149535723176502e+4932", (uint64_t)"1.79769313486231580793728971405301e+308", (uint64_t)"1.18973149535723176508575932662800702e+4932");
  v45 = v47;
  v47[0] = 24415;
  v46 = xmmword_22F45DFE0;
  if (a3 + 2 < 0x21)
  {
    if (!a3)
      goto LABEL_4;
    goto LABEL_3;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  v13 = v46;
  if (a3)
  {
LABEL_3:
    memcpy(&v45[v13], a2, a3);
    v13 = v46;
  }
LABEL_4:
  v16 = v13 + a3;
  *(_QWORD *)&v46 = v13 + a3;
  if (*((_QWORD *)&v46 + 1) < v13 + a3 + 1)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v16 = v46;
  }
  v45[v16] = 95;
  *(_QWORD *)&v46 = v46 + 1;
  v44 = 773;
  v41 = v45;
  v42 = v46;
  v43 = "DENORM_MIN__";
  if (*v12)
  {
    v36 = v12;
    v38 = a5;
    v39 = a6;
    v17 = 1283;
  }
  else
  {
    v36 = a5;
    v37 = a6;
    v17 = 261;
  }
  v40 = v17;
  sub_22E7333BC(a1, (llvm::Twine *)&v41, (llvm::Twine *)&v36);
  v44 = 773;
  v41 = v45;
  v42 = v46;
  v43 = "HAS_DENORM__";
  v36 = "1";
  v40 = 259;
  sub_22E7333BC(a1, (llvm::Twine *)&v41, (llvm::Twine *)&v36);
  v44 = 773;
  v41 = v45;
  v42 = v46;
  v43 = "DIG__";
  v40 = 265;
  LODWORD(v36) = v26;
  sub_22E7333BC(a1, (llvm::Twine *)&v41, (llvm::Twine *)&v36);
  v44 = 773;
  v41 = v45;
  v42 = v46;
  v43 = "DECIMAL_DIG__";
  v40 = 265;
  LODWORD(v36) = v25;
  sub_22E7333BC(a1, (llvm::Twine *)&v41, (llvm::Twine *)&v36);
  v44 = 773;
  v41 = v45;
  v42 = v46;
  v43 = "EPSILON__";
  if (*v14)
  {
    v36 = v14;
    v38 = a5;
    v39 = a6;
    v18 = 1283;
  }
  else
  {
    v36 = a5;
    v37 = a6;
    v18 = 261;
  }
  v40 = v18;
  sub_22E7333BC(a1, (llvm::Twine *)&v41, (llvm::Twine *)&v36);
  v44 = 773;
  v41 = v45;
  v42 = v46;
  v43 = "HAS_INFINITY__";
  v36 = "1";
  v40 = 259;
  sub_22E7333BC(a1, (llvm::Twine *)&v41, (llvm::Twine *)&v36);
  v44 = 773;
  v41 = v45;
  v42 = v46;
  v43 = "HAS_QUIET_NAN__";
  v36 = "1";
  v40 = 259;
  sub_22E7333BC(a1, (llvm::Twine *)&v41, (llvm::Twine *)&v36);
  v44 = 773;
  v41 = v45;
  v42 = v46;
  v43 = "MANT_DIG__";
  v40 = 265;
  LODWORD(v36) = v29;
  sub_22E7333BC(a1, (llvm::Twine *)&v41, (llvm::Twine *)&v36);
  v44 = 773;
  v41 = v45;
  v42 = v46;
  v43 = "MAX_10_EXP__";
  v40 = 265;
  LODWORD(v36) = v28;
  sub_22E7333BC(a1, (llvm::Twine *)&v41, (llvm::Twine *)&v36);
  v44 = 773;
  v41 = v45;
  v42 = v46;
  v43 = "MAX_EXP__";
  v40 = 265;
  LODWORD(v36) = v27;
  sub_22E7333BC(a1, (llvm::Twine *)&v41, (llvm::Twine *)&v36);
  v44 = 773;
  v41 = v45;
  v42 = v46;
  v43 = "MAX__";
  if (*v15)
  {
    v36 = v15;
    v38 = a5;
    v39 = a6;
    v19 = 1283;
  }
  else
  {
    v36 = a5;
    v37 = a6;
    v19 = 261;
  }
  v40 = v19;
  sub_22E7333BC(a1, (llvm::Twine *)&v41, (llvm::Twine *)&v36);
  v44 = 773;
  v41 = v45;
  v42 = v46;
  v43 = "MIN_10_EXP__";
  v33[0] = "(";
  v34 = v32;
  v35 = 2307;
  v36 = (const char *)v33;
  v38 = ")";
  v40 = 770;
  sub_22E7333BC(a1, (llvm::Twine *)&v41, (llvm::Twine *)&v36);
  v44 = 773;
  v41 = v45;
  v42 = v46;
  v43 = "MIN_EXP__";
  v33[0] = "(";
  v34 = v31;
  v35 = 2307;
  v36 = (const char *)v33;
  v38 = ")";
  v40 = 770;
  sub_22E7333BC(a1, (llvm::Twine *)&v41, (llvm::Twine *)&v36);
  v44 = 773;
  v41 = v45;
  v42 = v46;
  v43 = "MIN__";
  if (*v30)
  {
    v36 = v30;
    v38 = a5;
    v39 = a6;
    v20 = 1283;
  }
  else
  {
    v36 = a5;
    v37 = a6;
    v20 = 261;
  }
  v40 = v20;
  v21 = (llvm::APFloatBase *)sub_22E7333BC(a1, (llvm::Twine *)&v41, (llvm::Twine *)&v36);
  v22 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEhalf(v21);
  if (v22 == a4
    || (v23 = (llvm::APFloatBase *)llvm::APFloatBase::BFloat(v22), v23 == a4)
    || (v24 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEsingle(v23), v24 == a4)
    || (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(v24) == a4)
  {
    v44 = 773;
    v41 = v45;
    v42 = v46;
    v43 = "M_E__";
    v36 = "2.71828182845904523536028747135266250";
    v38 = a5;
    v39 = a6;
    v40 = 1283;
    sub_22E7333BC(a1, (llvm::Twine *)&v41, (llvm::Twine *)&v36);
    v44 = 773;
    v41 = v45;
    v42 = v46;
    v43 = "M_LOG2E__";
    v36 = "1.44269504088896340735992468100189214";
    v38 = a5;
    v39 = a6;
    v40 = 1283;
    sub_22E7333BC(a1, (llvm::Twine *)&v41, (llvm::Twine *)&v36);
    v44 = 773;
    v41 = v45;
    v42 = v46;
    v43 = "M_LOG10E__";
    v36 = "0.434294481903251827651128918916605082";
    v38 = a5;
    v39 = a6;
    v40 = 1283;
    sub_22E7333BC(a1, (llvm::Twine *)&v41, (llvm::Twine *)&v36);
    v44 = 773;
    v41 = v45;
    v42 = v46;
    v43 = "M_LN2__";
    v36 = "0.693147180559945309417232121458176568";
    v38 = a5;
    v39 = a6;
    v40 = 1283;
    sub_22E7333BC(a1, (llvm::Twine *)&v41, (llvm::Twine *)&v36);
    v44 = 773;
    v41 = v45;
    v42 = v46;
    v43 = "M_LN10__";
    v36 = "2.3025850929940456840179914546843642";
    v38 = a5;
    v39 = a6;
    v40 = 1283;
    sub_22E7333BC(a1, (llvm::Twine *)&v41, (llvm::Twine *)&v36);
    v44 = 773;
    v41 = v45;
    v42 = v46;
    v43 = "M_PI__";
    v36 = "3.14159265358979323846264338327950288";
    v38 = a5;
    v39 = a6;
    v40 = 1283;
    sub_22E7333BC(a1, (llvm::Twine *)&v41, (llvm::Twine *)&v36);
    v44 = 773;
    v41 = v45;
    v42 = v46;
    v43 = "M_PI_2__";
    v36 = "1.57079632679489661923132169163975144";
    v38 = a5;
    v39 = a6;
    v40 = 1283;
    sub_22E7333BC(a1, (llvm::Twine *)&v41, (llvm::Twine *)&v36);
    v44 = 773;
    v41 = v45;
    v42 = v46;
    v43 = "M_PI_4__";
    v36 = "0.785398163397448309615660845819875721";
    v38 = a5;
    v39 = a6;
    v40 = 1283;
    sub_22E7333BC(a1, (llvm::Twine *)&v41, (llvm::Twine *)&v36);
    v44 = 773;
    v41 = v45;
    v42 = v46;
    v43 = "M_1_PI__";
    v36 = "0.318309886183790671537767526745028724";
    v38 = a5;
    v39 = a6;
    v40 = 1283;
    sub_22E7333BC(a1, (llvm::Twine *)&v41, (llvm::Twine *)&v36);
    v44 = 773;
    v41 = v45;
    v42 = v46;
    v43 = "M_2_PI__";
    v36 = "0.636619772367581343075535053490057448";
    v38 = a5;
    v39 = a6;
    v40 = 1283;
    sub_22E7333BC(a1, (llvm::Twine *)&v41, (llvm::Twine *)&v36);
    v44 = 773;
    v41 = v45;
    v42 = v46;
    v43 = "M_2_SQRTPI__";
    v36 = "1.12837916709551257389615890312154517";
    v38 = a5;
    v39 = a6;
    v40 = 1283;
    sub_22E7333BC(a1, (llvm::Twine *)&v41, (llvm::Twine *)&v36);
    v44 = 773;
    v41 = v45;
    v42 = v46;
    v43 = "M_SQRT2__";
    v36 = "1.41421356237309504880168872420969808";
    v38 = a5;
    v39 = a6;
    v40 = 1283;
    sub_22E7333BC(a1, (llvm::Twine *)&v41, (llvm::Twine *)&v36);
    v44 = 773;
    v41 = v45;
    v42 = v46;
    v43 = "M_SQRT1_2__";
    v36 = "0.707106781186547524400844362104849039";
    v38 = a5;
    v39 = a6;
    v40 = 1283;
    sub_22E7333BC(a1, (llvm::Twine *)&v41, (llvm::Twine *)&v36);
  }
  if (v45 != (_BYTE *)v47)
    free(v45);
}

uint64_t sub_22E73B6A0(int a1, _QWORD *a2, llvm::raw_ostream **a3)
{
  unsigned int v6;
  int v7;
  const char *v8;
  int v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  __int16 v13;
  const char *v14;
  size_t v15;
  char v16;
  _QWORD v18[4];
  __int16 v19;
  _QWORD v20[2];
  unint64_t v21;
  __int16 v22;
  _QWORD v23[2];
  const char *v24;
  __int16 v25;

  v6 = sub_22F1E724C(a2, a1);
  if (v6 == 16)
  {
    v7 = *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 148);
    if ((a1 & 1) != 0)
      goto LABEL_7;
  }
  else
  {
    v7 = a1;
    if (v6 != 64)
      goto LABEL_7;
    v7 = *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 144);
    if ((a1 & 1) != 0)
      goto LABEL_7;
  }
  v7 = dword_22F45DFF0[v7 - 1];
LABEL_7:
  if ((a1 & 1) != 0)
    v8 = "__INT";
  else
    v8 = "__UINT";
  v9 = *(unsigned __int8 *)v8;
  v10 = v6;
  if (*v8)
  {
    v20[0] = v8;
    v21 = v6;
    v22 = 2307;
    v11 = 2;
    v12 = (unint64_t)v20;
  }
  else
  {
    v20[0] = v6;
    v22 = 265;
    v11 = 9;
    v12 = v6;
  }
  v23[0] = v12;
  v24 = "_TYPE__";
  LOBYTE(v25) = v11;
  HIBYTE(v25) = 3;
  sub_22E73AA44((llvm::Twine *)v23, v7, a3);
  if (v9)
  {
    v23[0] = v8;
    v24 = (const char *)v10;
    v13 = 2307;
  }
  else
  {
    v23[0] = v10;
    v13 = 265;
  }
  v25 = v13;
  sub_22E73AAA0((uint64_t)v23, v7, a3);
  v14 = (const char *)sub_22F1E71B0((uint64_t)a2, v7);
  v15 = strlen(v14);
  if (v9)
  {
    v20[0] = v8;
    v21 = v10;
    v22 = 2307;
    v16 = 2;
    v10 = (unint64_t)v20;
  }
  else
  {
    v20[0] = v10;
    v22 = 265;
    v16 = 9;
  }
  v23[0] = v10;
  v24 = "_C_SUFFIX__";
  LOBYTE(v25) = v16;
  HIBYTE(v25) = 3;
  v19 = 261;
  v18[0] = v14;
  v18[1] = v15;
  return sub_22E7333BC(a3, (llvm::Twine *)v23, (llvm::Twine *)v18);
}

void sub_22E73B864(int a1, _QWORD *a2, llvm::raw_ostream **a3)
{
  int v5;
  unsigned int v6;
  const char *v7;
  unint64_t v8;
  char v9;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  char v13;
  char v14;

  v5 = a1;
  v6 = sub_22F1E724C(a2, a1);
  if (((1 << v5) & 0x2AA) != 0)
  {
    if (v6 == 64)
      v5 = *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 144);
    v7 = "__INT";
  }
  else
  {
    if (v6 == 64)
      v5 = dword_22F45DFF0[*(int *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 144) - 1];
    v7 = "__UINT";
  }
  v8 = v6;
  if (*v7)
  {
    v10[0] = v7;
    v10[2] = v6;
    v11 = 2307;
    v9 = 2;
    v8 = (unint64_t)v10;
  }
  else
  {
    v10[0] = v6;
    v11 = 265;
    v9 = 9;
  }
  v12[0] = v8;
  v12[2] = "_MAX__";
  v13 = v9;
  v14 = 3;
  sub_22E73A68C((llvm::Twine *)v12, v5, a2, a3);
}

size_t sub_22E73B974(uint64_t a1, uint64_t a2, _QWORD *a3, llvm::raw_ostream **a4)
{
  int v6;
  unsigned int v7;
  size_t result;
  int v9;
  const char *v10;
  int v11;
  char v12;
  uint64_t v13;
  __int16 v14;
  char v15;
  uint64_t v16;
  __int16 v17;
  _QWORD v18[2];
  uint64_t v19;
  __int16 v20;
  uint64_t v21[2];
  const char *v22;
  __int16 v23;

  v6 = a2;
  v7 = a1;
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a3 + 24))(a3, a1, a2);
  if ((_DWORD)result)
  {
    v9 = result;
    if (v6)
      v10 = "__INT_LEAST";
    else
      v10 = "__UINT_LEAST";
    v11 = *(unsigned __int8 *)v10;
    if (*v10)
    {
      v18[0] = v10;
      v19 = v7;
      v20 = 2051;
      v12 = 2;
      v13 = (uint64_t)v18;
    }
    else
    {
      v18[0] = v7;
      v20 = 264;
      v12 = 8;
      v13 = v7;
    }
    v21[0] = v13;
    v22 = "_TYPE__";
    LOBYTE(v23) = v12;
    HIBYTE(v23) = 3;
    sub_22E73AA44((llvm::Twine *)v21, result, a4);
    if (v6)
    {
      if (v11)
      {
        v21[0] = (uint64_t)"__INT_LEAST";
        v22 = (const char *)v7;
        v14 = 2051;
      }
      else
      {
        v21[0] = v7;
        v14 = 264;
      }
      v23 = v14;
      sub_22E73A908(v21, v9, a3, a4);
      if (v11)
      {
LABEL_15:
        v21[0] = (uint64_t)v10;
        v22 = (const char *)v7;
        v17 = 2051;
LABEL_19:
        v23 = v17;
        return sub_22E73AAA0((uint64_t)v21, v9, a4);
      }
    }
    else
    {
      if (v11)
      {
        v18[0] = "__UINT_LEAST";
        v19 = v7;
        v20 = 2051;
        v15 = 2;
        v16 = (uint64_t)v18;
      }
      else
      {
        v18[0] = v7;
        v20 = 264;
        v15 = 8;
        v16 = v7;
      }
      v21[0] = v16;
      v22 = "_MAX__";
      LOBYTE(v23) = v15;
      HIBYTE(v23) = 3;
      sub_22E73A68C((llvm::Twine *)v21, v9, a3, a4);
      if (v11)
        goto LABEL_15;
    }
    v21[0] = v7;
    v17 = 264;
    goto LABEL_19;
  }
  return result;
}

size_t sub_22E73BB34(uint64_t a1, uint64_t a2, _QWORD *a3, llvm::raw_ostream **a4)
{
  int v6;
  unsigned int v7;
  size_t result;
  int v9;
  const char *v10;
  int v11;
  char v12;
  uint64_t v13;
  __int16 v14;
  char v15;
  uint64_t v16;
  __int16 v17;
  _QWORD v18[2];
  uint64_t v19;
  __int16 v20;
  uint64_t v21[2];
  const char *v22;
  __int16 v23;

  v6 = a2;
  v7 = a1;
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a3 + 24))(a3, a1, a2);
  if ((_DWORD)result)
  {
    v9 = result;
    if (v6)
      v10 = "__INT_FAST";
    else
      v10 = "__UINT_FAST";
    v11 = *(unsigned __int8 *)v10;
    if (*v10)
    {
      v18[0] = v10;
      v19 = v7;
      v20 = 2051;
      v12 = 2;
      v13 = (uint64_t)v18;
    }
    else
    {
      v18[0] = v7;
      v20 = 264;
      v12 = 8;
      v13 = v7;
    }
    v21[0] = v13;
    v22 = "_TYPE__";
    LOBYTE(v23) = v12;
    HIBYTE(v23) = 3;
    sub_22E73AA44((llvm::Twine *)v21, result, a4);
    if (v6)
    {
      if (v11)
      {
        v21[0] = (uint64_t)"__INT_FAST";
        v22 = (const char *)v7;
        v14 = 2051;
      }
      else
      {
        v21[0] = v7;
        v14 = 264;
      }
      v23 = v14;
      sub_22E73A908(v21, v9, a3, a4);
      if (v11)
      {
LABEL_15:
        v21[0] = (uint64_t)v10;
        v22 = (const char *)v7;
        v17 = 2051;
LABEL_19:
        v23 = v17;
        return sub_22E73AAA0((uint64_t)v21, v9, a4);
      }
    }
    else
    {
      if (v11)
      {
        v18[0] = "__UINT_FAST";
        v19 = v7;
        v20 = 2051;
        v15 = 2;
        v16 = (uint64_t)v18;
      }
      else
      {
        v18[0] = v7;
        v20 = 264;
        v15 = 8;
        v16 = v7;
      }
      v21[0] = v16;
      v22 = "_MAX__";
      LOBYTE(v23) = v15;
      HIBYTE(v23) = 3;
      sub_22E73A68C((llvm::Twine *)v21, v9, a3, a4);
      if (v11)
        goto LABEL_15;
    }
    v21[0] = v7;
    v17 = 264;
    goto LABEL_19;
  }
  return result;
}

